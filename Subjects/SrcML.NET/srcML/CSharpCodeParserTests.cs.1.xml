<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data.Test\CSharpCodeParserTests.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2013 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Patrick Francis (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">ABB</name><op:operator pos:line="12" pos:column="10">.</op:operator><name pos:line="12" pos:column="11">SrcML</name><op:operator pos:line="12" pos:column="16">.</op:operator><name pos:line="12" pos:column="17">Test</name><op:operator pos:line="12" pos:column="21">.</op:operator><name pos:line="12" pos:column="22">Utilities</name></name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">NUnit</name><op:operator pos:line="13" pos:column="12">.</op:operator><name pos:line="13" pos:column="13">Framework</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Linq</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Xml</name><op:operator pos:line="15" pos:column="17">.</op:operator><name pos:line="15" pos:column="18">Linq</name></name>;</using>

<namespace pos:line="17" pos:column="1">namespace <name><name pos:line="17" pos:column="11">ABB</name><op:operator pos:line="17" pos:column="14">.</op:operator><name pos:line="17" pos:column="15">SrcML</name><op:operator pos:line="17" pos:column="20">.</op:operator><name pos:line="17" pos:column="21">Data</name><op:operator pos:line="17" pos:column="25">.</op:operator><name pos:line="17" pos:column="26">Test</name></name> <block pos:line="17" pos:column="31">{

    <class><attribute pos:line="19" pos:column="5">[<expr><name pos:line="19" pos:column="6">TestFixture</name></expr>]</attribute>
    <attribute pos:line="20" pos:column="5">[<expr><call><name pos:line="20" pos:column="6">Category</name><argument_list pos:line="20" pos:column="14">(<argument><expr><lit:literal type="string" pos:line="20" pos:column="15">"Build"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    <specifier pos:line="21" pos:column="5">public</specifier> class <name pos:line="21" pos:column="18">CSharpCodeParserTests</name> <block pos:line="21" pos:column="40">{
        <decl_stmt><decl><type><specifier pos:line="22" pos:column="9">private</specifier> <name pos:line="22" pos:column="17">CSharpCodeParser</name></type> <name pos:line="22" pos:column="34">codeParser</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="23" pos:column="9">private</specifier> <name pos:line="23" pos:column="17">SrcMLFileUnitSetup</name></type> <name pos:line="23" pos:column="36">fileSetup</name></decl>;</decl_stmt>

        <function><type><attribute pos:line="25" pos:column="9">[<expr><name pos:line="25" pos:column="10">TestFixtureSetUp</name></expr>]</attribute>
        <specifier pos:line="26" pos:column="9">public</specifier> <name pos:line="26" pos:column="16">void</name></type> <name pos:line="26" pos:column="21">ClassSetup</name><parameter_list pos:line="26" pos:column="31">()</parameter_list> <block pos:line="26" pos:column="34">{
            <expr_stmt><expr><name pos:line="27" pos:column="13">codeParser</name> <op:operator pos:line="27" pos:column="24">=</op:operator> <op:operator pos:line="27" pos:column="26">new</op:operator> <call><name pos:line="27" pos:column="30">CSharpCodeParser</name><argument_list pos:line="27" pos:column="46">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="28" pos:column="13">fileSetup</name> <op:operator pos:line="28" pos:column="23">=</op:operator> <op:operator pos:line="28" pos:column="25">new</op:operator> <call><name pos:line="28" pos:column="29">SrcMLFileUnitSetup</name><argument_list pos:line="28" pos:column="47">(<argument><expr><name><name pos:line="28" pos:column="48">Language</name><op:operator pos:line="28" pos:column="56">.</op:operator><name pos:line="28" pos:column="57">CSharp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="31" pos:column="9">[<expr><name pos:line="31" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="32" pos:column="9">public</specifier> <name pos:line="32" pos:column="16">void</name></type> <name pos:line="32" pos:column="21">TestNamespace</name><parameter_list pos:line="32" pos:column="34">()</parameter_list> <block pos:line="32" pos:column="37">{
            <comment type="line" pos:line="33" pos:column="13">//namespace A { </comment>
            <comment type="line" pos:line="34" pos:column="13">//	public class foo { }</comment>
            <comment type="line" pos:line="35" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="36" pos:column="13">var</name></type> <name pos:line="36" pos:column="17">xml</name> <init pos:line="36" pos:column="21">= <expr><lit:literal type="string" pos:line="36" pos:column="23">@"&lt;namespace&gt;namespace &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{ 
	&lt;class&gt;&lt;specifier&gt;public&lt;/specifier&gt; class &lt;name&gt;foo&lt;/name&gt; &lt;block&gt;{ }&lt;/block&gt;&lt;/class&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="39" pos:column="13">var</name></type> <name pos:line="39" pos:column="17">unit</name> <init pos:line="39" pos:column="22">= <expr><call><name><name pos:line="39" pos:column="24">fileSetup</name><op:operator pos:line="39" pos:column="33">.</op:operator><name pos:line="39" pos:column="34">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="39" pos:column="58">(<argument><expr><name pos:line="39" pos:column="59">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="39" pos:column="64">"A.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="41" pos:column="13">var</name></type> <name pos:line="41" pos:column="17">globalScope</name> <init pos:line="41" pos:column="29">= <expr><call><name><name pos:line="41" pos:column="31">codeParser</name><op:operator pos:line="41" pos:column="41">.</op:operator><name pos:line="41" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="41" pos:column="55">(<argument><expr><name pos:line="41" pos:column="56">unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="42" pos:column="13">Assert</name><op:operator pos:line="42" pos:column="19">.</op:operator><name pos:line="42" pos:column="20">IsTrue</name></name><argument_list pos:line="42" pos:column="26">(<argument><expr><name><name pos:line="42" pos:column="27">globalScope</name><op:operator pos:line="42" pos:column="38">.</op:operator><name pos:line="42" pos:column="39">IsGlobal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="44" pos:column="13">var</name></type> <name pos:line="44" pos:column="17">actual</name> <init pos:line="44" pos:column="24">= <expr><call><name><name pos:line="44" pos:column="26">globalScope</name><op:operator pos:line="44" pos:column="37">.</op:operator><name pos:line="44" pos:column="38">ChildStatements</name><op:operator pos:line="44" pos:column="53">.</op:operator><name pos:line="44" pos:column="54">First</name></name><argument_list pos:line="44" pos:column="59">()</argument_list></call> <op:operator pos:line="44" pos:column="62">as</op:operator> <name pos:line="44" pos:column="65">NamespaceDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="45" pos:column="13">Assert</name><op:operator pos:line="45" pos:column="19">.</op:operator><name pos:line="45" pos:column="20">IsNotNull</name></name><argument_list pos:line="45" pos:column="29">(<argument><expr><name pos:line="45" pos:column="30">actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="46" pos:column="13">Assert</name><op:operator pos:line="46" pos:column="19">.</op:operator><name pos:line="46" pos:column="20">AreEqual</name></name><argument_list pos:line="46" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="46" pos:column="29">"A"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="34">actual</name><op:operator pos:line="46" pos:column="40">.</op:operator><name pos:line="46" pos:column="41">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="47" pos:column="13">Assert</name><op:operator pos:line="47" pos:column="19">.</op:operator><name pos:line="47" pos:column="20">AreEqual</name></name><argument_list pos:line="47" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="47" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="47" pos:column="32">actual</name><op:operator pos:line="47" pos:column="38">.</op:operator><name pos:line="47" pos:column="39">ChildStatements</name><op:operator pos:line="47" pos:column="54">.</op:operator><name pos:line="47" pos:column="55">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="50" pos:column="9">[<expr><name pos:line="50" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="51" pos:column="9">public</specifier> <name pos:line="51" pos:column="16">void</name></type> <name pos:line="51" pos:column="21">TestCallToGenericMethod</name><parameter_list pos:line="51" pos:column="44">()</parameter_list> <block pos:line="51" pos:column="47">{
            <comment type="line" pos:line="52" pos:column="13">//namespace A {</comment>
            <comment type="line" pos:line="53" pos:column="13">//    public class B {</comment>
            <comment type="line" pos:line="54" pos:column="13">//        void Foo&lt;T&gt;(T t) { }</comment>
            <comment type="line" pos:line="55" pos:column="13">//        void Bar() { Foo(this); }</comment>
            <comment type="line" pos:line="56" pos:column="13">//    }</comment>
            <comment type="line" pos:line="57" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="58" pos:column="13">var</name></type> <name pos:line="58" pos:column="17">xml</name> <init pos:line="58" pos:column="21">= <expr><lit:literal type="string" pos:line="58" pos:column="23">@"&lt;namespace&gt;namespace &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{
    &lt;class&gt;&lt;specifier&gt;public&lt;/specifier&gt; class &lt;name&gt;B&lt;/name&gt; &lt;block&gt;{
        &lt;function&gt;&lt;type&gt;&lt;name&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name&gt;&lt;name&gt;Foo&lt;/name&gt;&lt;argument_list&gt;&amp;lt;&lt;argument&gt;&lt;name&gt;T&lt;/name&gt;&lt;/argument&gt;&amp;gt;&lt;/argument_list&gt;&lt;/name&gt;&lt;parameter_list&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;T&lt;/name&gt;&lt;/type&gt; &lt;name&gt;t&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt; &lt;block&gt;{ }&lt;/block&gt;&lt;/function&gt;
        &lt;function&gt;&lt;type&gt;&lt;name&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Bar&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;Foo&lt;/name&gt;&lt;argument_list&gt;(&lt;argument&gt;&lt;expr&gt;&lt;name&gt;this&lt;/name&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt; }&lt;/block&gt;&lt;/function&gt;
    }&lt;/block&gt;&lt;/class&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="64" pos:column="13">var</name></type> <name pos:line="64" pos:column="17">unit</name> <init pos:line="64" pos:column="22">= <expr><call><name><name pos:line="64" pos:column="24">fileSetup</name><op:operator pos:line="64" pos:column="33">.</op:operator><name pos:line="64" pos:column="34">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="64" pos:column="58">(<argument><expr><name pos:line="64" pos:column="59">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="64" pos:column="64">"A.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="65" pos:column="13">var</name></type> <name pos:line="65" pos:column="17">globalScope</name> <init pos:line="65" pos:column="29">= <expr><call><name><name pos:line="65" pos:column="31">codeParser</name><op:operator pos:line="65" pos:column="41">.</op:operator><name pos:line="65" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="65" pos:column="55">(<argument><expr><name pos:line="65" pos:column="56">unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="67" pos:column="13">var</name></type> <name pos:line="67" pos:column="17">foo</name> <init pos:line="67" pos:column="21">= <expr><call><name><name pos:line="67" pos:column="23">globalScope</name><op:operator pos:line="67" pos:column="34">.</op:operator><name><name pos:line="67" pos:column="35">GetDescendants</name><argument_list pos:line="67" pos:column="49">&lt;<argument><name pos:line="67" pos:column="50">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="67" pos:column="67">()</argument_list></call><op:operator pos:line="67" pos:column="69">.</op:operator><call><name pos:line="67" pos:column="70">FirstOrDefault</name><argument_list pos:line="67" pos:column="84">(<argument><expr><lambda><name pos:line="67" pos:column="85">md</name> <op:operator pos:line="67" pos:column="88">=&gt;</op:operator> <name><name pos:line="67" pos:column="91">md</name><op:operator pos:line="67" pos:column="93">.</op:operator><name pos:line="67" pos:column="94">Name</name></name> <op:operator pos:line="67" pos:column="99">==</op:operator> <lit:literal type="string" pos:line="67" pos:column="102">"Foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="68" pos:column="13">var</name></type> <name pos:line="68" pos:column="17">bar</name> <init pos:line="68" pos:column="21">= <expr><call><name><name pos:line="68" pos:column="23">globalScope</name><op:operator pos:line="68" pos:column="34">.</op:operator><name><name pos:line="68" pos:column="35">GetDescendants</name><argument_list pos:line="68" pos:column="49">&lt;<argument><name pos:line="68" pos:column="50">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="68" pos:column="67">()</argument_list></call><op:operator pos:line="68" pos:column="69">.</op:operator><call><name pos:line="68" pos:column="70">FirstOrDefault</name><argument_list pos:line="68" pos:column="84">(<argument><expr><lambda><name pos:line="68" pos:column="85">md</name> <op:operator pos:line="68" pos:column="88">=&gt;</op:operator> <name><name pos:line="68" pos:column="91">md</name><op:operator pos:line="68" pos:column="93">.</op:operator><name pos:line="68" pos:column="94">Name</name></name> <op:operator pos:line="68" pos:column="99">==</op:operator> <lit:literal type="string" pos:line="68" pos:column="102">"Bar"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="69" pos:column="13">Assert</name><op:operator pos:line="69" pos:column="19">.</op:operator><name pos:line="69" pos:column="20">IsNotNull</name></name><argument_list pos:line="69" pos:column="29">(<argument><expr><name pos:line="69" pos:column="30">foo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="70" pos:column="13">Assert</name><op:operator pos:line="70" pos:column="19">.</op:operator><name pos:line="70" pos:column="20">IsNotNull</name></name><argument_list pos:line="70" pos:column="29">(<argument><expr><name pos:line="70" pos:column="30">bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="72" pos:column="13">Assert</name><op:operator pos:line="72" pos:column="19">.</op:operator><name pos:line="72" pos:column="20">AreEqual</name></name><argument_list pos:line="72" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="72" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="72" pos:column="32">bar</name><op:operator pos:line="72" pos:column="35">.</op:operator><name pos:line="72" pos:column="36">ChildStatements</name><op:operator pos:line="72" pos:column="51">.</op:operator><name pos:line="72" pos:column="52">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="73" pos:column="13">var</name></type> <name pos:line="73" pos:column="17">callToFoo</name> <init pos:line="73" pos:column="27">= <expr><name><name pos:line="73" pos:column="29">bar</name><op:operator pos:line="73" pos:column="32">.</op:operator><name pos:line="73" pos:column="33">ChildStatements</name><index pos:line="73" pos:column="48">[<expr><lit:literal type="number" pos:line="73" pos:column="49">0</lit:literal></expr>]</index></name><op:operator pos:line="73" pos:column="51">.</op:operator><call><name><name pos:line="73" pos:column="52">Content</name><op:operator pos:line="73" pos:column="59">.</op:operator><name><name pos:line="73" pos:column="60">GetDescendantsAndSelf</name><argument_list pos:line="73" pos:column="81">&lt;<argument><name pos:line="73" pos:column="82">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="73" pos:column="93">()</argument_list></call><op:operator pos:line="73" pos:column="95">.</op:operator><call><name pos:line="73" pos:column="96">FirstOrDefault</name><argument_list pos:line="73" pos:column="110">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="74" pos:column="13">Assert</name><op:operator pos:line="74" pos:column="19">.</op:operator><name pos:line="74" pos:column="20">IsNotNull</name></name><argument_list pos:line="74" pos:column="29">(<argument><expr><name pos:line="74" pos:column="30">callToFoo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="76" pos:column="13">Assert</name><op:operator pos:line="76" pos:column="19">.</op:operator><name pos:line="76" pos:column="20">AreSame</name></name><argument_list pos:line="76" pos:column="27">(<argument><expr><name pos:line="76" pos:column="28">foo</name></expr></argument>, <argument><expr><call><name><name pos:line="76" pos:column="33">callToFoo</name><op:operator pos:line="76" pos:column="42">.</op:operator><name pos:line="76" pos:column="43">FindMatches</name></name><argument_list pos:line="76" pos:column="54">()</argument_list></call><op:operator pos:line="76" pos:column="56">.</op:operator><call><name pos:line="76" pos:column="57">FirstOrDefault</name><argument_list pos:line="76" pos:column="71">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="79" pos:column="9">[<expr><name pos:line="79" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="80" pos:column="9">public</specifier> <name pos:line="80" pos:column="16">void</name></type> <name pos:line="80" pos:column="21">TestCallToGrandparent</name><parameter_list pos:line="80" pos:column="42">()</parameter_list> <block pos:line="80" pos:column="45">{
            <comment type="line" pos:line="81" pos:column="13">//namespace A {</comment>
            <comment type="line" pos:line="82" pos:column="13">//    public class B { public void Foo() { } }</comment>
            <comment type="line" pos:line="83" pos:column="13">//    public class C : B { }</comment>
            <comment type="line" pos:line="84" pos:column="13">//    public class D : C { public void Bar() { Foo() } }</comment>
            <comment type="line" pos:line="85" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="86" pos:column="13">var</name></type> <name pos:line="86" pos:column="17">xml</name> <init pos:line="86" pos:column="21">= <expr><lit:literal type="string" pos:line="86" pos:column="23">@"&lt;namespace&gt;namespace &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{
    &lt;class&gt;&lt;specifier&gt;public&lt;/specifier&gt; class &lt;name&gt;B&lt;/name&gt; &lt;block&gt;{ &lt;function&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ }&lt;/block&gt;&lt;/function&gt; }&lt;/block&gt;&lt;/class&gt;
    &lt;class&gt;&lt;specifier&gt;public&lt;/specifier&gt; class &lt;name&gt;C&lt;/name&gt; &lt;super&gt;: &lt;name&gt;B&lt;/name&gt;&lt;/super&gt; &lt;block&gt;{ }&lt;/block&gt;&lt;/class&gt;
    &lt;class&gt;&lt;specifier&gt;public&lt;/specifier&gt; class &lt;name&gt;D&lt;/name&gt; &lt;super&gt;: &lt;name&gt;C&lt;/name&gt;&lt;/super&gt; &lt;block&gt;{ &lt;function&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Bar&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;Foo&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;&lt;/expr_stmt&gt; }&lt;/block&gt;&lt;/function&gt; }&lt;/block&gt;&lt;/class&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="92" pos:column="13">var</name></type> <name pos:line="92" pos:column="17">unit</name> <init pos:line="92" pos:column="22">= <expr><call><name><name pos:line="92" pos:column="24">fileSetup</name><op:operator pos:line="92" pos:column="33">.</op:operator><name pos:line="92" pos:column="34">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="92" pos:column="58">(<argument><expr><name pos:line="92" pos:column="59">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="92" pos:column="64">"A.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="93" pos:column="13">var</name></type> <name pos:line="93" pos:column="17">scope</name> <init pos:line="93" pos:column="23">= <expr><call><name><name pos:line="93" pos:column="25">codeParser</name><op:operator pos:line="93" pos:column="35">.</op:operator><name pos:line="93" pos:column="36">ParseFileUnit</name></name><argument_list pos:line="93" pos:column="49">(<argument><expr><name pos:line="93" pos:column="50">unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="95" pos:column="13">var</name></type> <name pos:line="95" pos:column="17">bDotFoo</name> <init pos:line="95" pos:column="25">= <expr><call><name><name pos:line="95" pos:column="27">scope</name><op:operator pos:line="95" pos:column="32">.</op:operator><name><name pos:line="95" pos:column="33">GetDescendants</name><argument_list pos:line="95" pos:column="47">&lt;<argument><name pos:line="95" pos:column="48">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="95" pos:column="65">()</argument_list></call><op:operator pos:line="95" pos:column="67">.</op:operator><call><name pos:line="95" pos:column="68">FirstOrDefault</name><argument_list pos:line="95" pos:column="82">(<argument><expr><lambda><name pos:line="95" pos:column="83">m</name> <op:operator pos:line="95" pos:column="85">=&gt;</op:operator> <name><name pos:line="95" pos:column="88">m</name><op:operator pos:line="95" pos:column="89">.</op:operator><name pos:line="95" pos:column="90">Name</name></name> <op:operator pos:line="95" pos:column="95">==</op:operator> <lit:literal type="string" pos:line="95" pos:column="98">"Foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="96" pos:column="13">var</name></type> <name pos:line="96" pos:column="17">dDotBar</name> <init pos:line="96" pos:column="25">= <expr><call><name><name pos:line="96" pos:column="27">scope</name><op:operator pos:line="96" pos:column="32">.</op:operator><name><name pos:line="96" pos:column="33">GetDescendants</name><argument_list pos:line="96" pos:column="47">&lt;<argument><name pos:line="96" pos:column="48">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="96" pos:column="65">()</argument_list></call><op:operator pos:line="96" pos:column="67">.</op:operator><call><name pos:line="96" pos:column="68">FirstOrDefault</name><argument_list pos:line="96" pos:column="82">(<argument><expr><lambda><name pos:line="96" pos:column="83">m</name> <op:operator pos:line="96" pos:column="85">=&gt;</op:operator> <name><name pos:line="96" pos:column="88">m</name><op:operator pos:line="96" pos:column="89">.</op:operator><name pos:line="96" pos:column="90">Name</name></name> <op:operator pos:line="96" pos:column="95">==</op:operator> <lit:literal type="string" pos:line="96" pos:column="98">"Bar"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="97" pos:column="13">Assert</name><op:operator pos:line="97" pos:column="19">.</op:operator><name pos:line="97" pos:column="20">IsNotNull</name></name><argument_list pos:line="97" pos:column="29">(<argument><expr><name pos:line="97" pos:column="30">bDotFoo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="98" pos:column="13">Assert</name><op:operator pos:line="98" pos:column="19">.</op:operator><name pos:line="98" pos:column="20">IsNotNull</name></name><argument_list pos:line="98" pos:column="29">(<argument><expr><name pos:line="98" pos:column="30">dDotBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="100" pos:column="13">Assert</name><op:operator pos:line="100" pos:column="19">.</op:operator><name pos:line="100" pos:column="20">AreEqual</name></name><argument_list pos:line="100" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="100" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="100" pos:column="32">dDotBar</name><op:operator pos:line="100" pos:column="39">.</op:operator><name pos:line="100" pos:column="40">ChildStatements</name><op:operator pos:line="100" pos:column="55">.</op:operator><name pos:line="100" pos:column="56">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="101" pos:column="13">var</name></type> <name pos:line="101" pos:column="17">callToFoo</name> <init pos:line="101" pos:column="27">= <expr><name><name pos:line="101" pos:column="29">dDotBar</name><op:operator pos:line="101" pos:column="36">.</op:operator><name pos:line="101" pos:column="37">ChildStatements</name><index pos:line="101" pos:column="52">[<expr><lit:literal type="number" pos:line="101" pos:column="53">0</lit:literal></expr>]</index></name><op:operator pos:line="101" pos:column="55">.</op:operator><call><name><name pos:line="101" pos:column="56">Content</name><op:operator pos:line="101" pos:column="63">.</op:operator><name><name pos:line="101" pos:column="64">GetDescendantsAndSelf</name><argument_list pos:line="101" pos:column="85">&lt;<argument><name pos:line="101" pos:column="86">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="101" pos:column="97">()</argument_list></call><op:operator pos:line="101" pos:column="99">.</op:operator><call><name pos:line="101" pos:column="100">FirstOrDefault</name><argument_list pos:line="101" pos:column="114">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="102" pos:column="13">Assert</name><op:operator pos:line="102" pos:column="19">.</op:operator><name pos:line="102" pos:column="20">IsNotNull</name></name><argument_list pos:line="102" pos:column="29">(<argument><expr><name pos:line="102" pos:column="30">callToFoo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="104" pos:column="13">Assert</name><op:operator pos:line="104" pos:column="19">.</op:operator><name pos:line="104" pos:column="20">AreSame</name></name><argument_list pos:line="104" pos:column="27">(<argument><expr><name pos:line="104" pos:column="28">bDotFoo</name></expr></argument>, <argument><expr><call><name><name pos:line="104" pos:column="37">callToFoo</name><op:operator pos:line="104" pos:column="46">.</op:operator><name pos:line="104" pos:column="47">FindMatches</name></name><argument_list pos:line="104" pos:column="58">()</argument_list></call><op:operator pos:line="104" pos:column="60">.</op:operator><call><name pos:line="104" pos:column="61">FirstOrDefault</name><argument_list pos:line="104" pos:column="75">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="107" pos:column="9">[<expr><name pos:line="107" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="108" pos:column="9">public</specifier> <name pos:line="108" pos:column="16">void</name></type> <name pos:line="108" pos:column="21">TestMethodCallToParentOfCallingObject</name><parameter_list pos:line="108" pos:column="58">()</parameter_list> <block pos:line="108" pos:column="61">{
            <comment type="line" pos:line="109" pos:column="13">//class A { void Foo() { } }</comment>
            <decl_stmt><decl><type><name pos:line="110" pos:column="13">string</name></type> <name pos:line="110" pos:column="20">a_xml</name> <init pos:line="110" pos:column="26">= <expr><lit:literal type="string" pos:line="110" pos:column="28">@"&lt;class pos:line=""1"" pos:column="&gt;class &lt;name pos:line=""1"" pos:column="&gt;A&lt;/name&gt; &lt;block pos:line=""1"" pos:column="&gt;{ &lt;function&gt;&lt;type&gt;&lt;name pos:line=""1"" pos:column=""&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""1"" pos:column=""&gt;Foo&lt;/name&gt;&lt;parameter_list pos:line=""1"" pos:column=""&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""1"" pos:column=""&gt;{ }&lt;/block&gt;&lt;/function&gt; }&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="112" pos:column="13">//class B : A { void Bar() { } }</comment>
            <decl_stmt><decl><type><name pos:line="113" pos:column="13">string</name></type> <name pos:line="113" pos:column="20">b_xml</name> <init pos:line="113" pos:column="26">= <expr><lit:literal type="string" pos:line="113" pos:column="28">@"&lt;class pos:line=""1"" pos:column="&gt;class &lt;name pos:line=""1"" pos:column="&gt;B&lt;/name&gt; &lt;super pos:line=""1"" pos:column="&gt;: &lt;name pos:line=""1"" pos:column=""&gt;A&lt;/name&gt;&lt;/super&gt; &lt;block pos:line=""1"" pos:column=""&gt;{ &lt;function&gt;&lt;type&gt;&lt;name pos:line=""1"" pos:column=""&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""1"" pos:column=""&gt;Bar&lt;/name&gt;&lt;parameter_list pos:line=""1"" pos:column=""&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""1"" pos:column=""&gt;{ }&lt;/block&gt;&lt;/function&gt; }&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="115" pos:column="13">//class C {</comment>
            <comment type="line" pos:line="116" pos:column="13">//	private B b;</comment>
            <comment type="line" pos:line="117" pos:column="13">//	void main() {</comment>
            <comment type="line" pos:line="118" pos:column="13">//		b.Foo();</comment>
            <comment type="line" pos:line="119" pos:column="13">//	}</comment>
            <comment type="line" pos:line="120" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="121" pos:column="13">string</name></type> <name pos:line="121" pos:column="20">c_xml</name> <init pos:line="121" pos:column="26">= <expr><lit:literal type="string" pos:line="121" pos:column="28">@"&lt;class pos:line=""1"" pos:column="&gt;class &lt;name pos:line=""1"" pos:column="&gt;C&lt;/name&gt; &lt;block pos:line=""1"" pos:column="&gt;{
    &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;specifier pos:line=""2"" pos:column="&gt;private&lt;/specifier&gt; &lt;name pos:line=""2"" pos:column=""&gt;B&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""2"" pos:column=""&gt;b&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
    &lt;function&gt;&lt;type&gt;&lt;name pos:line=""3"" pos:column="&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""3"" pos:column=""&gt;main&lt;/name&gt;&lt;parameter_list pos:line=""3"" pos:column=""&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""3"" pos:column=""&gt;{
        &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;&lt;name pos:line=""4"" pos:column="&gt;b&lt;/name&gt;&lt;op:operator pos:line=""4"" pos:column=""&gt;.&lt;/op:operator&gt;&lt;name pos:line=""4"" pos:column=""&gt;Foo&lt;/name&gt;&lt;/name&gt;&lt;argument_list pos:line=""4"" pos:column=""&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
    }&lt;/block&gt;&lt;/function&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="128" pos:column="13">var</name></type> <name pos:line="128" pos:column="17">aUnit</name> <init pos:line="128" pos:column="23">= <expr><call><name><name pos:line="128" pos:column="25">fileSetup</name><op:operator pos:line="128" pos:column="34">.</op:operator><name pos:line="128" pos:column="35">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="128" pos:column="59">(<argument><expr><name pos:line="128" pos:column="60">a_xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="128" pos:column="67">"A.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="129" pos:column="13">var</name></type> <name pos:line="129" pos:column="17">bUnit</name> <init pos:line="129" pos:column="23">= <expr><call><name><name pos:line="129" pos:column="25">fileSetup</name><op:operator pos:line="129" pos:column="34">.</op:operator><name pos:line="129" pos:column="35">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="129" pos:column="59">(<argument><expr><name pos:line="129" pos:column="60">b_xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="129" pos:column="67">"B.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="130" pos:column="13">var</name></type> <name pos:line="130" pos:column="17">cUnit</name> <init pos:line="130" pos:column="23">= <expr><call><name><name pos:line="130" pos:column="25">fileSetup</name><op:operator pos:line="130" pos:column="34">.</op:operator><name pos:line="130" pos:column="35">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="130" pos:column="59">(<argument><expr><name pos:line="130" pos:column="60">c_xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="130" pos:column="67">"C.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="132" pos:column="13">NamespaceDefinition</name></type> <name pos:line="132" pos:column="33">globalScope</name> <init pos:line="132" pos:column="45">= <expr><call><name><name pos:line="132" pos:column="47">codeParser</name><op:operator pos:line="132" pos:column="57">.</op:operator><name pos:line="132" pos:column="58">ParseFileUnit</name></name><argument_list pos:line="132" pos:column="71">(<argument><expr><name pos:line="132" pos:column="72">aUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="133" pos:column="13">globalScope</name> <op:operator pos:line="133" pos:column="25">=</op:operator> <call><name><name pos:line="133" pos:column="27">globalScope</name><op:operator pos:line="133" pos:column="38">.</op:operator><name pos:line="133" pos:column="39">Merge</name></name><argument_list pos:line="133" pos:column="44">(<argument><expr><call><name><name pos:line="133" pos:column="45">codeParser</name><op:operator pos:line="133" pos:column="55">.</op:operator><name pos:line="133" pos:column="56">ParseFileUnit</name></name><argument_list pos:line="133" pos:column="69">(<argument><expr><name pos:line="133" pos:column="70">bUnit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="134" pos:column="13">globalScope</name> <op:operator pos:line="134" pos:column="25">=</op:operator> <call><name><name pos:line="134" pos:column="27">globalScope</name><op:operator pos:line="134" pos:column="38">.</op:operator><name pos:line="134" pos:column="39">Merge</name></name><argument_list pos:line="134" pos:column="44">(<argument><expr><call><name><name pos:line="134" pos:column="45">codeParser</name><op:operator pos:line="134" pos:column="55">.</op:operator><name pos:line="134" pos:column="56">ParseFileUnit</name></name><argument_list pos:line="134" pos:column="69">(<argument><expr><name pos:line="134" pos:column="70">cUnit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="136" pos:column="13">var</name></type> <name pos:line="136" pos:column="17">typeA</name> <init pos:line="136" pos:column="23">= <expr><call><name><name pos:line="136" pos:column="25">globalScope</name><op:operator pos:line="136" pos:column="36">.</op:operator><name><name pos:line="136" pos:column="37">GetNamedChildren</name><argument_list pos:line="136" pos:column="53">&lt;<argument><name pos:line="136" pos:column="54">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="136" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="136" pos:column="70">"A"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="136" pos:column="74">.</op:operator><call><name pos:line="136" pos:column="75">FirstOrDefault</name><argument_list pos:line="136" pos:column="89">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="137" pos:column="13">var</name></type> <name pos:line="137" pos:column="17">typeB</name> <init pos:line="137" pos:column="23">= <expr><call><name><name pos:line="137" pos:column="25">globalScope</name><op:operator pos:line="137" pos:column="36">.</op:operator><name><name pos:line="137" pos:column="37">GetNamedChildren</name><argument_list pos:line="137" pos:column="53">&lt;<argument><name pos:line="137" pos:column="54">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="137" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="137" pos:column="70">"B"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="137" pos:column="74">.</op:operator><call><name pos:line="137" pos:column="75">FirstOrDefault</name><argument_list pos:line="137" pos:column="89">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="138" pos:column="13">var</name></type> <name pos:line="138" pos:column="17">typeC</name> <init pos:line="138" pos:column="23">= <expr><call><name><name pos:line="138" pos:column="25">globalScope</name><op:operator pos:line="138" pos:column="36">.</op:operator><name><name pos:line="138" pos:column="37">GetNamedChildren</name><argument_list pos:line="138" pos:column="53">&lt;<argument><name pos:line="138" pos:column="54">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="138" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="138" pos:column="70">"C"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="138" pos:column="74">.</op:operator><call><name pos:line="138" pos:column="75">FirstOrDefault</name><argument_list pos:line="138" pos:column="89">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="140" pos:column="13">Assert</name><op:operator pos:line="140" pos:column="19">.</op:operator><name pos:line="140" pos:column="20">IsNotNull</name></name><argument_list pos:line="140" pos:column="29">(<argument><expr><name pos:line="140" pos:column="30">typeA</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="140" pos:column="37">"could not find class A"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="141" pos:column="13">Assert</name><op:operator pos:line="141" pos:column="19">.</op:operator><name pos:line="141" pos:column="20">IsNotNull</name></name><argument_list pos:line="141" pos:column="29">(<argument><expr><name pos:line="141" pos:column="30">typeB</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="141" pos:column="37">"could not find class B"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="142" pos:column="13">Assert</name><op:operator pos:line="142" pos:column="19">.</op:operator><name pos:line="142" pos:column="20">IsNotNull</name></name><argument_list pos:line="142" pos:column="29">(<argument><expr><name pos:line="142" pos:column="30">typeC</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="142" pos:column="37">"could not find class C"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="144" pos:column="13">var</name></type> <name pos:line="144" pos:column="17">aDotFoo</name> <init pos:line="144" pos:column="25">= <expr><call><name><name pos:line="144" pos:column="27">typeA</name><op:operator pos:line="144" pos:column="32">.</op:operator><name><name pos:line="144" pos:column="33">GetNamedChildren</name><argument_list pos:line="144" pos:column="49">&lt;<argument><name pos:line="144" pos:column="50">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="144" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="144" pos:column="68">"Foo"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="144" pos:column="74">.</op:operator><call><name pos:line="144" pos:column="75">FirstOrDefault</name><argument_list pos:line="144" pos:column="89">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="145" pos:column="13">var</name></type> <name pos:line="145" pos:column="17">cDotMain</name> <init pos:line="145" pos:column="26">= <expr><call><name><name pos:line="145" pos:column="28">typeC</name><op:operator pos:line="145" pos:column="33">.</op:operator><name><name pos:line="145" pos:column="34">GetNamedChildren</name><argument_list pos:line="145" pos:column="50">&lt;<argument><name pos:line="145" pos:column="51">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="145" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="145" pos:column="69">"main"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="145" pos:column="76">.</op:operator><call><name pos:line="145" pos:column="77">FirstOrDefault</name><argument_list pos:line="145" pos:column="91">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="147" pos:column="13">Assert</name><op:operator pos:line="147" pos:column="19">.</op:operator><name pos:line="147" pos:column="20">IsNotNull</name></name><argument_list pos:line="147" pos:column="29">(<argument><expr><name pos:line="147" pos:column="30">aDotFoo</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="147" pos:column="39">"could not find method A.Foo()"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="148" pos:column="13">Assert</name><op:operator pos:line="148" pos:column="19">.</op:operator><name pos:line="148" pos:column="20">IsNotNull</name></name><argument_list pos:line="148" pos:column="29">(<argument><expr><name pos:line="148" pos:column="30">cDotMain</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="148" pos:column="40">"could not find method C.main()"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="150" pos:column="13">var</name></type> <name pos:line="150" pos:column="17">callToFooFromC</name> <init pos:line="150" pos:column="32">= <expr><call><name><name pos:line="150" pos:column="34">cDotMain</name><op:operator pos:line="150" pos:column="42">.</op:operator><name><name pos:line="150" pos:column="43">FindExpressions</name><argument_list pos:line="150" pos:column="58">&lt;<argument><name pos:line="150" pos:column="59">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="150" pos:column="70">(<argument><expr><lit:literal type="boolean" pos:line="150" pos:column="71">true</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="150" pos:column="76">.</op:operator><call><name pos:line="150" pos:column="77">FirstOrDefault</name><argument_list pos:line="150" pos:column="91">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="152" pos:column="13">Assert</name><op:operator pos:line="152" pos:column="19">.</op:operator><name pos:line="152" pos:column="20">IsNotNull</name></name><argument_list pos:line="152" pos:column="29">(<argument><expr><name pos:line="152" pos:column="30">callToFooFromC</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="152" pos:column="46">"could not find any calls in C.main()"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="153" pos:column="13">Assert</name><op:operator pos:line="153" pos:column="19">.</op:operator><name pos:line="153" pos:column="20">AreEqual</name></name><argument_list pos:line="153" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="153" pos:column="29">"Foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="153" pos:column="36">callToFooFromC</name><op:operator pos:line="153" pos:column="50">.</op:operator><name pos:line="153" pos:column="51">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="154" pos:column="13">var</name></type> <name pos:line="154" pos:column="17">callingObject</name> <init pos:line="154" pos:column="31">= <expr><call><name><name pos:line="154" pos:column="33">callToFooFromC</name><op:operator pos:line="154" pos:column="47">.</op:operator><name><name pos:line="154" pos:column="48">GetSiblingsBeforeSelf</name><argument_list pos:line="154" pos:column="69">&lt;<argument><name pos:line="154" pos:column="70">NameUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="154" pos:column="78">()</argument_list></call><op:operator pos:line="154" pos:column="80">.</op:operator><call><name pos:line="154" pos:column="81">Last</name><argument_list pos:line="154" pos:column="85">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="155" pos:column="13">Assert</name><op:operator pos:line="155" pos:column="19">.</op:operator><name pos:line="155" pos:column="20">AreEqual</name></name><argument_list pos:line="155" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="155" pos:column="29">"b"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="155" pos:column="34">callingObject</name><op:operator pos:line="155" pos:column="47">.</op:operator><name pos:line="155" pos:column="48">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="157" pos:column="13">Assert</name><op:operator pos:line="157" pos:column="19">.</op:operator><name pos:line="157" pos:column="20">AreEqual</name></name><argument_list pos:line="157" pos:column="28">(<argument><expr><name pos:line="157" pos:column="29">typeB</name></expr></argument>, <argument><expr><call><name><name pos:line="157" pos:column="36">callingObject</name><op:operator pos:line="157" pos:column="49">.</op:operator><name pos:line="157" pos:column="50">ResolveType</name></name><argument_list pos:line="157" pos:column="61">()</argument_list></call><op:operator pos:line="157" pos:column="63">.</op:operator><call><name pos:line="157" pos:column="64">FirstOrDefault</name><argument_list pos:line="157" pos:column="78">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="158" pos:column="13">Assert</name><op:operator pos:line="158" pos:column="19">.</op:operator><name pos:line="158" pos:column="20">AreEqual</name></name><argument_list pos:line="158" pos:column="28">(<argument><expr><name pos:line="158" pos:column="29">aDotFoo</name></expr></argument>, <argument><expr><call><name><name pos:line="158" pos:column="38">callToFooFromC</name><op:operator pos:line="158" pos:column="52">.</op:operator><name pos:line="158" pos:column="53">FindMatches</name></name><argument_list pos:line="158" pos:column="64">()</argument_list></call><op:operator pos:line="158" pos:column="66">.</op:operator><call><name pos:line="158" pos:column="67">FirstOrDefault</name><argument_list pos:line="158" pos:column="81">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="161" pos:column="9">[<expr><name pos:line="161" pos:column="10">Test</name></expr>]</attribute>
        <attribute pos:line="162" pos:column="9">[<expr><call><name pos:line="162" pos:column="10">Category</name><argument_list pos:line="162" pos:column="18">(<argument><expr><lit:literal type="string" pos:line="162" pos:column="19">"Todo"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="163" pos:column="9">public</specifier> <name pos:line="163" pos:column="16">void</name></type> <name pos:line="163" pos:column="21">TestCallWithTypeParameters</name><parameter_list pos:line="163" pos:column="47">()</parameter_list> <block pos:line="163" pos:column="50">{
            <comment type="line" pos:line="164" pos:column="13">//namespace A {</comment>
            <comment type="line" pos:line="165" pos:column="13">//    public interface IOdb { </comment>
            <comment type="line" pos:line="166" pos:column="13">//        int Query();</comment>
            <comment type="line" pos:line="167" pos:column="13">//        int Query&lt;T&gt;();</comment>
            <comment type="line" pos:line="168" pos:column="13">//    }</comment>
            <comment type="line" pos:line="169" pos:column="13">//    public class Test {</comment>
            <comment type="line" pos:line="170" pos:column="13">//        public IOdb Open() { }</comment>
            <comment type="line" pos:line="171" pos:column="13">//        void Test1() {</comment>
            <comment type="line" pos:line="172" pos:column="13">//            IOdb odb = Open();</comment>
            <comment type="line" pos:line="173" pos:column="13">//            var query = odb.Query&lt;Foo&gt;();</comment>
            <comment type="line" pos:line="174" pos:column="13">//        }</comment>
            <comment type="line" pos:line="175" pos:column="13">//    }</comment>
            <comment type="line" pos:line="176" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="177" pos:column="13">var</name></type> <name pos:line="177" pos:column="17">xml</name> <init pos:line="177" pos:column="21">= <expr><lit:literal type="string" pos:line="177" pos:column="23">@"&lt;namespace&gt;namespace &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{
    &lt;class type=""interface&gt;&lt;specifier&gt;public&lt;/specifier&gt; interface &lt;name&gt;IOdb&lt;/name&gt; &lt;block&gt;{ 
        &lt;function_decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Query&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt;;&lt;/function_decl&gt;
        &lt;function_decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;&lt;name&gt;Query&lt;/name&gt;&lt;argument_list&gt;&amp;lt;&lt;argument&gt;&lt;name&gt;T&lt;/name&gt;&lt;/argument&gt;&amp;gt;&lt;/argument_list&gt;&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt;;&lt;/function_decl&gt;
    }&lt;/block&gt;&lt;/class&gt;
    &lt;class&gt;&lt;specifier&gt;public&lt;/specifier&gt; class &lt;name&gt;Test&lt;/name&gt; &lt;block&gt;{
        &lt;function&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;IOdb&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Open&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ }&lt;/block&gt;&lt;/function&gt;
        &lt;function&gt;&lt;type&gt;&lt;name&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Test1&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{
            &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;IOdb&lt;/name&gt;&lt;/type&gt; &lt;name&gt;odb&lt;/name&gt; &lt;init&gt;= &lt;expr&gt;&lt;call&gt;&lt;name&gt;Open&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;&lt;/init&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
            &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;var&lt;/name&gt;&lt;/type&gt; &lt;name&gt;query&lt;/name&gt; &lt;init&gt;= &lt;expr&gt;&lt;call&gt;&lt;name&gt;&lt;name&gt;odb&lt;/name&gt;&lt;op:operator&gt;.&lt;/op:operator&gt;&lt;name&gt;&lt;name&gt;Query&lt;/name&gt;&lt;argument_list&gt;&amp;lt;&lt;argument&gt;&lt;name&gt;Foo&lt;/name&gt;&lt;/argument&gt;&amp;gt;&lt;/argument_list&gt;&lt;/name&gt;&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;&lt;/init&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
        }&lt;/block&gt;&lt;/function&gt;
    }&lt;/block&gt;&lt;/class&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="190" pos:column="13">var</name></type> <name pos:line="190" pos:column="17">unit</name> <init pos:line="190" pos:column="22">= <expr><call><name><name pos:line="190" pos:column="24">fileSetup</name><op:operator pos:line="190" pos:column="33">.</op:operator><name pos:line="190" pos:column="34">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="190" pos:column="58">(<argument><expr><name pos:line="190" pos:column="59">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="190" pos:column="64">"A.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="191" pos:column="13">var</name></type> <name pos:line="191" pos:column="17">scope</name> <init pos:line="191" pos:column="23">= <expr><call><name><name pos:line="191" pos:column="25">codeParser</name><op:operator pos:line="191" pos:column="35">.</op:operator><name pos:line="191" pos:column="36">ParseFileUnit</name></name><argument_list pos:line="191" pos:column="49">(<argument><expr><name pos:line="191" pos:column="50">unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="193" pos:column="13">//TODO: update to search for method with type params, not just LastOrDefault</comment>
            <decl_stmt><decl><type><name pos:line="194" pos:column="13">var</name></type> <name pos:line="194" pos:column="17">queryTMethod</name> <init pos:line="194" pos:column="30">= <expr><call><name><name pos:line="194" pos:column="32">scope</name><op:operator pos:line="194" pos:column="37">.</op:operator><name><name pos:line="194" pos:column="38">GetDescendants</name><argument_list pos:line="194" pos:column="52">&lt;<argument><name pos:line="194" pos:column="53">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="194" pos:column="70">()</argument_list></call><op:operator pos:line="194" pos:column="72">.</op:operator><call><name pos:line="194" pos:column="73">LastOrDefault</name><argument_list pos:line="194" pos:column="86">(<argument><expr><lambda><name pos:line="194" pos:column="87">m</name> <op:operator pos:line="194" pos:column="89">=&gt;</op:operator> <name><name pos:line="194" pos:column="92">m</name><op:operator pos:line="194" pos:column="93">.</op:operator><name pos:line="194" pos:column="94">Name</name></name> <op:operator pos:line="194" pos:column="99">==</op:operator> <lit:literal type="string" pos:line="194" pos:column="102">"Query"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="195" pos:column="13">Assert</name><op:operator pos:line="195" pos:column="19">.</op:operator><name pos:line="195" pos:column="20">IsNotNull</name></name><argument_list pos:line="195" pos:column="29">(<argument><expr><name pos:line="195" pos:column="30">queryTMethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="196" pos:column="13">var</name></type> <name pos:line="196" pos:column="17">test1Method</name> <init pos:line="196" pos:column="29">= <expr><call><name><name pos:line="196" pos:column="31">scope</name><op:operator pos:line="196" pos:column="36">.</op:operator><name><name pos:line="196" pos:column="37">GetDescendants</name><argument_list pos:line="196" pos:column="51">&lt;<argument><name pos:line="196" pos:column="52">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="196" pos:column="69">()</argument_list></call><op:operator pos:line="196" pos:column="71">.</op:operator><call><name pos:line="196" pos:column="72">FirstOrDefault</name><argument_list pos:line="196" pos:column="86">(<argument><expr><lambda><name pos:line="196" pos:column="87">m</name> <op:operator pos:line="196" pos:column="89">=&gt;</op:operator> <name><name pos:line="196" pos:column="92">m</name><op:operator pos:line="196" pos:column="93">.</op:operator><name pos:line="196" pos:column="94">Name</name></name> <op:operator pos:line="196" pos:column="99">==</op:operator> <lit:literal type="string" pos:line="196" pos:column="102">"Test1"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="197" pos:column="13">Assert</name><op:operator pos:line="197" pos:column="19">.</op:operator><name pos:line="197" pos:column="20">IsNotNull</name></name><argument_list pos:line="197" pos:column="29">(<argument><expr><name pos:line="197" pos:column="30">test1Method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="199" pos:column="13">Assert</name><op:operator pos:line="199" pos:column="19">.</op:operator><name pos:line="199" pos:column="20">AreEqual</name></name><argument_list pos:line="199" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="199" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="199" pos:column="32">test1Method</name><op:operator pos:line="199" pos:column="43">.</op:operator><name pos:line="199" pos:column="44">ChildStatements</name><op:operator pos:line="199" pos:column="59">.</op:operator><name pos:line="199" pos:column="60">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="200" pos:column="13">var</name></type> <name pos:line="200" pos:column="17">callToQuery</name> <init pos:line="200" pos:column="29">= <expr><name><name pos:line="200" pos:column="31">test1Method</name><op:operator pos:line="200" pos:column="42">.</op:operator><name pos:line="200" pos:column="43">ChildStatements</name><index pos:line="200" pos:column="58">[<expr><lit:literal type="number" pos:line="200" pos:column="59">1</lit:literal></expr>]</index></name><op:operator pos:line="200" pos:column="61">.</op:operator><call><name><name pos:line="200" pos:column="62">Content</name><op:operator pos:line="200" pos:column="69">.</op:operator><name><name pos:line="200" pos:column="70">GetDescendantsAndSelf</name><argument_list pos:line="200" pos:column="91">&lt;<argument><name pos:line="200" pos:column="92">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="200" pos:column="103">()</argument_list></call><op:operator pos:line="200" pos:column="105">.</op:operator><call><name pos:line="200" pos:column="106">FirstOrDefault</name><argument_list pos:line="200" pos:column="120">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="201" pos:column="13">Assert</name><op:operator pos:line="201" pos:column="19">.</op:operator><name pos:line="201" pos:column="20">IsNotNull</name></name><argument_list pos:line="201" pos:column="29">(<argument><expr><name pos:line="201" pos:column="30">callToQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="203" pos:column="13">var</name></type> <name pos:line="203" pos:column="17">matches</name> <init pos:line="203" pos:column="25">= <expr><call><name><name pos:line="203" pos:column="27">callToQuery</name><op:operator pos:line="203" pos:column="38">.</op:operator><name pos:line="203" pos:column="39">FindMatches</name></name><argument_list pos:line="203" pos:column="50">()</argument_list></call><op:operator pos:line="203" pos:column="52">.</op:operator><call><name pos:line="203" pos:column="53">ToList</name><argument_list pos:line="203" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="204" pos:column="13">Assert</name><op:operator pos:line="204" pos:column="19">.</op:operator><name pos:line="204" pos:column="20">AreEqual</name></name><argument_list pos:line="204" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="204" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="204" pos:column="32">matches</name><op:operator pos:line="204" pos:column="39">.</op:operator><name pos:line="204" pos:column="40">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="205" pos:column="13">Assert</name><op:operator pos:line="205" pos:column="19">.</op:operator><name pos:line="205" pos:column="20">AreSame</name></name><argument_list pos:line="205" pos:column="27">(<argument><expr><name pos:line="205" pos:column="28">queryTMethod</name></expr></argument>, <argument><expr><name><name pos:line="205" pos:column="42">matches</name><index pos:line="205" pos:column="49">[<expr><lit:literal type="number" pos:line="205" pos:column="50">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="208" pos:column="9">[<expr><name pos:line="208" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="209" pos:column="9">public</specifier> <name pos:line="209" pos:column="16">void</name></type> <name pos:line="209" pos:column="21">TestCallConstructor</name><parameter_list pos:line="209" pos:column="40">()</parameter_list> <block pos:line="209" pos:column="43">{
            <comment type="line" pos:line="210" pos:column="13">//class Foo {</comment>
            <comment type="line" pos:line="211" pos:column="13">//  public Foo() { }</comment>
            <comment type="line" pos:line="212" pos:column="13">//}</comment>
            <comment type="line" pos:line="213" pos:column="13">//class Bar {</comment>
            <comment type="line" pos:line="214" pos:column="13">//  Foo myFoo = new Foo();</comment>
            <comment type="line" pos:line="215" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="216" pos:column="13">string</name></type> <name pos:line="216" pos:column="20">xml</name> <init pos:line="216" pos:column="24">= <expr><lit:literal type="string" pos:line="216" pos:column="26">@"&lt;class&gt;class &lt;name&gt;Foo&lt;/name&gt; &lt;block&gt;{
  &lt;constructor&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ }&lt;/block&gt;&lt;/constructor&gt;
}&lt;/block&gt;&lt;/class&gt;
&lt;class&gt;class &lt;name&gt;Bar&lt;/name&gt; &lt;block&gt;{
  &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;Foo&lt;/name&gt;&lt;/type&gt; &lt;name&gt;myFoo&lt;/name&gt; &lt;init&gt;= &lt;expr&gt;&lt;op:operator&gt;new&lt;/op:operator&gt; &lt;call&gt;&lt;name&gt;Foo&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;&lt;/init&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="222" pos:column="13">var</name></type> <name pos:line="222" pos:column="17">xmlElement</name> <init pos:line="222" pos:column="28">= <expr><call><name><name pos:line="222" pos:column="30">fileSetup</name><op:operator pos:line="222" pos:column="39">.</op:operator><name pos:line="222" pos:column="40">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="222" pos:column="64">(<argument><expr><name pos:line="222" pos:column="65">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="222" pos:column="70">"A.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="224" pos:column="13">var</name></type> <name pos:line="224" pos:column="17">globalScope</name> <init pos:line="224" pos:column="29">= <expr><call><name><name pos:line="224" pos:column="31">codeParser</name><op:operator pos:line="224" pos:column="41">.</op:operator><name pos:line="224" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="224" pos:column="55">(<argument><expr><name pos:line="224" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="225" pos:column="13">Assert</name><op:operator pos:line="225" pos:column="19">.</op:operator><name pos:line="225" pos:column="20">AreEqual</name></name><argument_list pos:line="225" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="225" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="225" pos:column="32">globalScope</name><op:operator pos:line="225" pos:column="43">.</op:operator><name pos:line="225" pos:column="44">ChildStatements</name><op:operator pos:line="225" pos:column="59">.</op:operator><name pos:line="225" pos:column="60">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="227" pos:column="13">var</name></type> <name pos:line="227" pos:column="17">fooConstructor</name> <init pos:line="227" pos:column="32">= <expr><call><name><name pos:line="227" pos:column="34">globalScope</name><op:operator pos:line="227" pos:column="45">.</op:operator><name><name pos:line="227" pos:column="46">GetDescendants</name><argument_list pos:line="227" pos:column="60">&lt;<argument><name pos:line="227" pos:column="61">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="227" pos:column="78">()</argument_list></call><op:operator pos:line="227" pos:column="80">.</op:operator><call><name pos:line="227" pos:column="81">FirstOrDefault</name><argument_list pos:line="227" pos:column="95">(<argument><expr><lambda><name pos:line="227" pos:column="96">m</name> <op:operator pos:line="227" pos:column="98">=&gt;</op:operator> <name><name pos:line="227" pos:column="101">m</name><op:operator pos:line="227" pos:column="102">.</op:operator><name pos:line="227" pos:column="103">Name</name></name> <op:operator pos:line="227" pos:column="108">==</op:operator> <lit:literal type="string" pos:line="227" pos:column="111">"Foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="228" pos:column="13">Assert</name><op:operator pos:line="228" pos:column="19">.</op:operator><name pos:line="228" pos:column="20">IsNotNull</name></name><argument_list pos:line="228" pos:column="29">(<argument><expr><name pos:line="228" pos:column="30">fooConstructor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="229" pos:column="13">var</name></type> <name pos:line="229" pos:column="17">fooCall</name> <init pos:line="229" pos:column="25">= <expr><name><name pos:line="229" pos:column="27">globalScope</name><op:operator pos:line="229" pos:column="38">.</op:operator><name pos:line="229" pos:column="39">ChildStatements</name><index pos:line="229" pos:column="54">[<expr><lit:literal type="number" pos:line="229" pos:column="55">1</lit:literal></expr>]</index></name><op:operator pos:line="229" pos:column="57">.</op:operator><name><name pos:line="229" pos:column="58">ChildStatements</name><index pos:line="229" pos:column="73">[<expr><lit:literal type="number" pos:line="229" pos:column="74">0</lit:literal></expr>]</index></name><op:operator pos:line="229" pos:column="76">.</op:operator><call><name><name pos:line="229" pos:column="77">Content</name><op:operator pos:line="229" pos:column="84">.</op:operator><name><name pos:line="229" pos:column="85">GetDescendantsAndSelf</name><argument_list pos:line="229" pos:column="106">&lt;<argument><name pos:line="229" pos:column="107">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="229" pos:column="118">()</argument_list></call><op:operator pos:line="229" pos:column="120">.</op:operator><call><name pos:line="229" pos:column="121">FirstOrDefault</name><argument_list pos:line="229" pos:column="135">(<argument><expr><lambda><name pos:line="229" pos:column="136">mc</name> <op:operator pos:line="229" pos:column="139">=&gt;</op:operator> <name><name pos:line="229" pos:column="142">mc</name><op:operator pos:line="229" pos:column="144">.</op:operator><name pos:line="229" pos:column="145">Name</name></name> <op:operator pos:line="229" pos:column="150">==</op:operator> <lit:literal type="string" pos:line="229" pos:column="153">"Foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="230" pos:column="13">Assert</name><op:operator pos:line="230" pos:column="19">.</op:operator><name pos:line="230" pos:column="20">IsNotNull</name></name><argument_list pos:line="230" pos:column="29">(<argument><expr><name pos:line="230" pos:column="30">fooCall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="231" pos:column="13">Assert</name><op:operator pos:line="231" pos:column="19">.</op:operator><name pos:line="231" pos:column="20">AreSame</name></name><argument_list pos:line="231" pos:column="27">(<argument><expr><name pos:line="231" pos:column="28">fooConstructor</name></expr></argument>, <argument><expr><call><name><name pos:line="231" pos:column="44">fooCall</name><op:operator pos:line="231" pos:column="51">.</op:operator><name pos:line="231" pos:column="52">FindMatches</name></name><argument_list pos:line="231" pos:column="63">()</argument_list></call><op:operator pos:line="231" pos:column="65">.</op:operator><call><name pos:line="231" pos:column="66">First</name><argument_list pos:line="231" pos:column="71">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="234" pos:column="9">[<expr><name pos:line="234" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="235" pos:column="9">public</specifier> <name pos:line="235" pos:column="16">void</name></type> <name pos:line="235" pos:column="21">TestConstructorWithBaseKeyword</name><parameter_list pos:line="235" pos:column="51">()</parameter_list> <block pos:line="235" pos:column="54">{
            <comment type="line" pos:line="236" pos:column="13">// B.cs namespace A { class B { public B() { } } }</comment>
            <decl_stmt><decl><type><name pos:line="237" pos:column="13">string</name></type> <name pos:line="237" pos:column="20">bXml</name> <init pos:line="237" pos:column="25">= <expr><lit:literal type="string" pos:line="237" pos:column="27">@"&lt;namespace&gt;namespace &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{ &lt;class&gt;class &lt;name&gt;B&lt;/name&gt; &lt;block&gt;{ &lt;constructor&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;B&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ }&lt;/block&gt;&lt;/constructor&gt; }&lt;/block&gt;&lt;/class&gt; }&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="238" pos:column="13">// C.cs namespace A { class C : B { public C() : base() { } } }</comment>
            <decl_stmt><decl><type><name pos:line="239" pos:column="13">string</name></type> <name pos:line="239" pos:column="20">cXml</name> <init pos:line="239" pos:column="25">= <expr><lit:literal type="string" pos:line="239" pos:column="27">@"&lt;namespace&gt;namespace &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{ &lt;class&gt;class &lt;name&gt;C&lt;/name&gt; &lt;super&gt;: &lt;name&gt;B&lt;/name&gt;&lt;/super&gt; &lt;block&gt;{ &lt;constructor&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;C&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;member_list&gt;: &lt;call&gt;&lt;name&gt;base&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt; &lt;/member_list&gt;&lt;block&gt;{ }&lt;/block&gt;&lt;/constructor&gt; }&lt;/block&gt;&lt;/class&gt; }&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="241" pos:column="13">var</name></type> <name pos:line="241" pos:column="17">bUnit</name> <init pos:line="241" pos:column="23">= <expr><call><name><name pos:line="241" pos:column="25">fileSetup</name><op:operator pos:line="241" pos:column="34">.</op:operator><name pos:line="241" pos:column="35">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="241" pos:column="59">(<argument><expr><name pos:line="241" pos:column="60">bXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="241" pos:column="66">"B.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="242" pos:column="13">var</name></type> <name pos:line="242" pos:column="17">cUnit</name> <init pos:line="242" pos:column="23">= <expr><call><name><name pos:line="242" pos:column="25">fileSetup</name><op:operator pos:line="242" pos:column="34">.</op:operator><name pos:line="242" pos:column="35">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="242" pos:column="59">(<argument><expr><name pos:line="242" pos:column="60">cXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="242" pos:column="66">"C.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="244" pos:column="13">var</name></type> <name pos:line="244" pos:column="17">bScope</name> <init pos:line="244" pos:column="24">= <expr><call><name><name pos:line="244" pos:column="26">codeParser</name><op:operator pos:line="244" pos:column="36">.</op:operator><name pos:line="244" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="244" pos:column="50">(<argument><expr><name pos:line="244" pos:column="51">bUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="245" pos:column="13">var</name></type> <name pos:line="245" pos:column="17">cScope</name> <init pos:line="245" pos:column="24">= <expr><call><name><name pos:line="245" pos:column="26">codeParser</name><op:operator pos:line="245" pos:column="36">.</op:operator><name pos:line="245" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="245" pos:column="50">(<argument><expr><name pos:line="245" pos:column="51">cUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="246" pos:column="13">var</name></type> <name pos:line="246" pos:column="17">globalScope</name> <init pos:line="246" pos:column="29">= <expr><call><name><name pos:line="246" pos:column="31">bScope</name><op:operator pos:line="246" pos:column="37">.</op:operator><name pos:line="246" pos:column="38">Merge</name></name><argument_list pos:line="246" pos:column="43">(<argument><expr><name pos:line="246" pos:column="44">cScope</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="248" pos:column="13">var</name></type> <name pos:line="248" pos:column="17">bConstructor</name> <init pos:line="248" pos:column="30">= <expr><call><name><name pos:line="248" pos:column="32">globalScope</name><op:operator pos:line="248" pos:column="43">.</op:operator><name><name pos:line="248" pos:column="44">GetDescendants</name><argument_list pos:line="248" pos:column="58">&lt;<argument><name pos:line="248" pos:column="59">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="248" pos:column="76">()</argument_list></call><op:operator pos:line="248" pos:column="78">.</op:operator><call><name pos:line="248" pos:column="79">First</name><argument_list pos:line="248" pos:column="84">(<argument><expr><lambda><name pos:line="248" pos:column="85">m</name> <op:operator pos:line="248" pos:column="87">=&gt;</op:operator> <name><name pos:line="248" pos:column="90">m</name><op:operator pos:line="248" pos:column="91">.</op:operator><name pos:line="248" pos:column="92">Name</name></name> <op:operator pos:line="248" pos:column="97">==</op:operator> <lit:literal type="string" pos:line="248" pos:column="100">"B"</lit:literal> <op:operator pos:line="248" pos:column="104">&amp;&amp;</op:operator> <name><name pos:line="248" pos:column="107">m</name><op:operator pos:line="248" pos:column="108">.</op:operator><name pos:line="248" pos:column="109">IsConstructor</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="249" pos:column="13">var</name></type> <name pos:line="249" pos:column="17">cConstructor</name> <init pos:line="249" pos:column="30">= <expr><call><name><name pos:line="249" pos:column="32">globalScope</name><op:operator pos:line="249" pos:column="43">.</op:operator><name><name pos:line="249" pos:column="44">GetDescendants</name><argument_list pos:line="249" pos:column="58">&lt;<argument><name pos:line="249" pos:column="59">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="249" pos:column="76">()</argument_list></call><op:operator pos:line="249" pos:column="78">.</op:operator><call><name pos:line="249" pos:column="79">First</name><argument_list pos:line="249" pos:column="84">(<argument><expr><lambda><name pos:line="249" pos:column="85">m</name> <op:operator pos:line="249" pos:column="87">=&gt;</op:operator> <name><name pos:line="249" pos:column="90">m</name><op:operator pos:line="249" pos:column="91">.</op:operator><name pos:line="249" pos:column="92">Name</name></name> <op:operator pos:line="249" pos:column="97">==</op:operator> <lit:literal type="string" pos:line="249" pos:column="100">"C"</lit:literal> <op:operator pos:line="249" pos:column="104">&amp;&amp;</op:operator> <name><name pos:line="249" pos:column="107">m</name><op:operator pos:line="249" pos:column="108">.</op:operator><name pos:line="249" pos:column="109">IsConstructor</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="250" pos:column="13">Assert</name><op:operator pos:line="250" pos:column="19">.</op:operator><name pos:line="250" pos:column="20">AreEqual</name></name><argument_list pos:line="250" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="250" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="250" pos:column="32">cConstructor</name><op:operator pos:line="250" pos:column="44">.</op:operator><name pos:line="250" pos:column="45">ConstructorInitializers</name><op:operator pos:line="250" pos:column="68">.</op:operator><name pos:line="250" pos:column="69">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="252" pos:column="13">var</name></type> <name pos:line="252" pos:column="17">methodCall</name> <init pos:line="252" pos:column="28">= <expr><name><name pos:line="252" pos:column="30">cConstructor</name><op:operator pos:line="252" pos:column="42">.</op:operator><name pos:line="252" pos:column="43">ConstructorInitializers</name><index pos:line="252" pos:column="66">[<expr><lit:literal type="number" pos:line="252" pos:column="67">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="253" pos:column="13">Assert</name><op:operator pos:line="253" pos:column="19">.</op:operator><name pos:line="253" pos:column="20">IsNotNull</name></name><argument_list pos:line="253" pos:column="29">(<argument><expr><name pos:line="253" pos:column="30">methodCall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="254" pos:column="13">Assert</name><op:operator pos:line="254" pos:column="19">.</op:operator><name pos:line="254" pos:column="20">That</name></name><argument_list pos:line="254" pos:column="24">(<argument><expr><name><name pos:line="254" pos:column="25">methodCall</name><op:operator pos:line="254" pos:column="35">.</op:operator><name pos:line="254" pos:column="36">IsConstructor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="255" pos:column="13">Assert</name><op:operator pos:line="255" pos:column="19">.</op:operator><name pos:line="255" pos:column="20">That</name></name><argument_list pos:line="255" pos:column="24">(<argument><expr><name><name pos:line="255" pos:column="25">methodCall</name><op:operator pos:line="255" pos:column="35">.</op:operator><name pos:line="255" pos:column="36">IsConstructorInitializer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="256" pos:column="13">Assert</name><op:operator pos:line="256" pos:column="19">.</op:operator><name pos:line="256" pos:column="20">AreEqual</name></name><argument_list pos:line="256" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="256" pos:column="29">"base"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="256" pos:column="37">methodCall</name><op:operator pos:line="256" pos:column="47">.</op:operator><name pos:line="256" pos:column="48">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="257" pos:column="13">Assert</name><op:operator pos:line="257" pos:column="19">.</op:operator><name pos:line="257" pos:column="20">AreSame</name></name><argument_list pos:line="257" pos:column="27">(<argument><expr><name pos:line="257" pos:column="28">bConstructor</name></expr></argument>, <argument><expr><call><name><name pos:line="257" pos:column="42">methodCall</name><op:operator pos:line="257" pos:column="52">.</op:operator><name pos:line="257" pos:column="53">FindMatches</name></name><argument_list pos:line="257" pos:column="64">()</argument_list></call><op:operator pos:line="257" pos:column="66">.</op:operator><call><name pos:line="257" pos:column="67">FirstOrDefault</name><argument_list pos:line="257" pos:column="81">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="260" pos:column="9">[<expr><name pos:line="260" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="261" pos:column="9">public</specifier> <name pos:line="261" pos:column="16">void</name></type> <name pos:line="261" pos:column="21">TestConstructorWithThisKeyword</name><parameter_list pos:line="261" pos:column="51">()</parameter_list> <block pos:line="261" pos:column="54">{
            <comment type="line" pos:line="262" pos:column="13">// B.cs</comment>
            <comment type="line" pos:line="263" pos:column="13">//namespace A {</comment>
            <comment type="line" pos:line="264" pos:column="13">//    class B {</comment>
            <comment type="line" pos:line="265" pos:column="13">//        public B() : this(0) { }</comment>
            <comment type="line" pos:line="266" pos:column="13">//        public B(int i) { }</comment>
            <comment type="line" pos:line="267" pos:column="13">//    }</comment>
            <comment type="line" pos:line="268" pos:column="13">//}</comment>

            <decl_stmt><decl><type><name pos:line="270" pos:column="13">string</name></type> <name pos:line="270" pos:column="20">bXml</name> <init pos:line="270" pos:column="25">= <expr><lit:literal type="string" pos:line="270" pos:column="27">@"&lt;namespace&gt;namespace &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{
    &lt;class&gt;class &lt;name&gt;B&lt;/name&gt; &lt;block&gt;{
        &lt;constructor&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;B&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;member_list&gt;: &lt;call&gt;&lt;name&gt;this&lt;/name&gt;&lt;argument_list&gt;(&lt;argument&gt;&lt;expr&gt;&lt;lit:literal type=""number&gt;0&lt;/lit:literal&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt; &lt;/member_list&gt;&lt;block&gt;{ }&lt;/block&gt;&lt;/constructor&gt;
        &lt;constructor&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;B&lt;/name&gt;&lt;parameter_list&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;i&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt; &lt;block&gt;{ }&lt;/block&gt;&lt;/constructor&gt;
    }&lt;/block&gt;&lt;/class&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="277" pos:column="13">var</name></type> <name pos:line="277" pos:column="17">bUnit</name> <init pos:line="277" pos:column="23">= <expr><call><name><name pos:line="277" pos:column="25">fileSetup</name><op:operator pos:line="277" pos:column="34">.</op:operator><name pos:line="277" pos:column="35">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="277" pos:column="59">(<argument><expr><name pos:line="277" pos:column="60">bXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="277" pos:column="66">"B.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="279" pos:column="13">var</name></type> <name pos:line="279" pos:column="17">globalScope</name> <init pos:line="279" pos:column="29">= <expr><call><name><name pos:line="279" pos:column="31">codeParser</name><op:operator pos:line="279" pos:column="41">.</op:operator><name pos:line="279" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="279" pos:column="55">(<argument><expr><name pos:line="279" pos:column="56">bUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="281" pos:column="13">var</name></type> <name pos:line="281" pos:column="17">oneArgumentConstructor</name> <init pos:line="281" pos:column="40">= <expr><call><name><name pos:line="281" pos:column="42">globalScope</name><op:operator pos:line="281" pos:column="53">.</op:operator><name><name pos:line="281" pos:column="54">GetDescendants</name><argument_list pos:line="281" pos:column="68">&lt;<argument><name pos:line="281" pos:column="69">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="281" pos:column="86">()</argument_list></call><op:operator pos:line="281" pos:column="88">.</op:operator><call><name pos:line="281" pos:column="89">First</name><argument_list pos:line="281" pos:column="94">(<argument><expr><lambda><name pos:line="281" pos:column="95">m</name> <op:operator pos:line="281" pos:column="97">=&gt;</op:operator> <name><name pos:line="281" pos:column="100">m</name><op:operator pos:line="281" pos:column="101">.</op:operator><name pos:line="281" pos:column="102">Name</name></name> <op:operator pos:line="281" pos:column="107">==</op:operator> <lit:literal type="string" pos:line="281" pos:column="110">"B"</lit:literal> <op:operator pos:line="281" pos:column="114">&amp;&amp;</op:operator> <name><name pos:line="281" pos:column="117">m</name><op:operator pos:line="281" pos:column="118">.</op:operator><name pos:line="281" pos:column="119">Parameters</name><op:operator pos:line="281" pos:column="129">.</op:operator><name pos:line="281" pos:column="130">Count</name></name> <op:operator pos:line="281" pos:column="136">==</op:operator> <lit:literal type="number" pos:line="281" pos:column="139">1</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="282" pos:column="13">var</name></type> <name pos:line="282" pos:column="17">defaultConstructor</name> <init pos:line="282" pos:column="36">= <expr><call><name><name pos:line="282" pos:column="38">globalScope</name><op:operator pos:line="282" pos:column="49">.</op:operator><name><name pos:line="282" pos:column="50">GetDescendants</name><argument_list pos:line="282" pos:column="64">&lt;<argument><name pos:line="282" pos:column="65">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="282" pos:column="82">()</argument_list></call><op:operator pos:line="282" pos:column="84">.</op:operator><call><name pos:line="282" pos:column="85">First</name><argument_list pos:line="282" pos:column="90">(<argument><expr><lambda><name pos:line="282" pos:column="91">m</name> <op:operator pos:line="282" pos:column="93">=&gt;</op:operator> <name><name pos:line="282" pos:column="96">m</name><op:operator pos:line="282" pos:column="97">.</op:operator><name pos:line="282" pos:column="98">Name</name></name> <op:operator pos:line="282" pos:column="103">==</op:operator> <lit:literal type="string" pos:line="282" pos:column="106">"B"</lit:literal> <op:operator pos:line="282" pos:column="110">&amp;&amp;</op:operator> <name><name pos:line="282" pos:column="113">m</name><op:operator pos:line="282" pos:column="114">.</op:operator><name pos:line="282" pos:column="115">Parameters</name><op:operator pos:line="282" pos:column="125">.</op:operator><name pos:line="282" pos:column="126">Count</name></name> <op:operator pos:line="282" pos:column="132">==</op:operator> <lit:literal type="number" pos:line="282" pos:column="135">0</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="283" pos:column="13">Assert</name><op:operator pos:line="283" pos:column="19">.</op:operator><name pos:line="283" pos:column="20">AreEqual</name></name><argument_list pos:line="283" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="283" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="283" pos:column="32">defaultConstructor</name><op:operator pos:line="283" pos:column="50">.</op:operator><name pos:line="283" pos:column="51">ConstructorInitializers</name><op:operator pos:line="283" pos:column="74">.</op:operator><name pos:line="283" pos:column="75">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="285" pos:column="13">var</name></type> <name pos:line="285" pos:column="17">methodCall</name> <init pos:line="285" pos:column="28">= <expr><name><name pos:line="285" pos:column="30">defaultConstructor</name><op:operator pos:line="285" pos:column="48">.</op:operator><name pos:line="285" pos:column="49">ConstructorInitializers</name><index pos:line="285" pos:column="72">[<expr><lit:literal type="number" pos:line="285" pos:column="73">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="286" pos:column="13">Assert</name><op:operator pos:line="286" pos:column="19">.</op:operator><name pos:line="286" pos:column="20">IsNotNull</name></name><argument_list pos:line="286" pos:column="29">(<argument><expr><name pos:line="286" pos:column="30">methodCall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="287" pos:column="13">Assert</name><op:operator pos:line="287" pos:column="19">.</op:operator><name pos:line="287" pos:column="20">That</name></name><argument_list pos:line="287" pos:column="24">(<argument><expr><name><name pos:line="287" pos:column="25">methodCall</name><op:operator pos:line="287" pos:column="35">.</op:operator><name pos:line="287" pos:column="36">IsConstructor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="288" pos:column="13">Assert</name><op:operator pos:line="288" pos:column="19">.</op:operator><name pos:line="288" pos:column="20">That</name></name><argument_list pos:line="288" pos:column="24">(<argument><expr><name><name pos:line="288" pos:column="25">methodCall</name><op:operator pos:line="288" pos:column="35">.</op:operator><name pos:line="288" pos:column="36">IsConstructorInitializer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="289" pos:column="13">Assert</name><op:operator pos:line="289" pos:column="19">.</op:operator><name pos:line="289" pos:column="20">AreEqual</name></name><argument_list pos:line="289" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="289" pos:column="29">"this"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="289" pos:column="37">methodCall</name><op:operator pos:line="289" pos:column="47">.</op:operator><name pos:line="289" pos:column="48">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="290" pos:column="13">Assert</name><op:operator pos:line="290" pos:column="19">.</op:operator><name pos:line="290" pos:column="20">AreSame</name></name><argument_list pos:line="290" pos:column="27">(<argument><expr><name pos:line="290" pos:column="28">oneArgumentConstructor</name></expr></argument>, <argument><expr><call><name><name pos:line="290" pos:column="52">methodCall</name><op:operator pos:line="290" pos:column="62">.</op:operator><name pos:line="290" pos:column="63">FindMatches</name></name><argument_list pos:line="290" pos:column="74">()</argument_list></call><op:operator pos:line="290" pos:column="76">.</op:operator><call><name pos:line="290" pos:column="77">FirstOrDefault</name><argument_list pos:line="290" pos:column="91">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="293" pos:column="9">[<expr><name pos:line="293" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="294" pos:column="9">public</specifier> <name pos:line="294" pos:column="16">void</name></type> <name pos:line="294" pos:column="21">TestCreateAliasesForFiles_UsingNamespace</name><parameter_list pos:line="294" pos:column="61">()</parameter_list> <block pos:line="294" pos:column="64">{
            <comment type="line" pos:line="295" pos:column="13">// using x.y.z;</comment>
            <decl_stmt><decl><type><name pos:line="296" pos:column="13">string</name></type> <name pos:line="296" pos:column="20">xml</name> <init pos:line="296" pos:column="24">= <expr><lit:literal type="string" pos:line="296" pos:column="26">@"&lt;using&gt;using &lt;name&gt;&lt;name&gt;x&lt;/name&gt;&lt;op:operator&gt;.&lt;/op:operator&gt;&lt;name&gt;y&lt;/name&gt;&lt;op:operator&gt;.&lt;/op:operator&gt;&lt;name&gt;z&lt;/name&gt;&lt;/name&gt;;&lt;/using&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="297" pos:column="13">XElement</name></type> <name pos:line="297" pos:column="22">xmlElement</name> <init pos:line="297" pos:column="33">= <expr><call><name><name pos:line="297" pos:column="35">fileSetup</name><op:operator pos:line="297" pos:column="44">.</op:operator><name pos:line="297" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="297" pos:column="69">(<argument><expr><name pos:line="297" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="297" pos:column="75">"A.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="299" pos:column="13">var</name></type> <name pos:line="299" pos:column="17">globalScope</name> <init pos:line="299" pos:column="29">= <expr><call><name><name pos:line="299" pos:column="31">codeParser</name><op:operator pos:line="299" pos:column="41">.</op:operator><name pos:line="299" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="299" pos:column="55">(<argument><expr><name pos:line="299" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="300" pos:column="13">Assert</name><op:operator pos:line="300" pos:column="19">.</op:operator><name pos:line="300" pos:column="20">AreEqual</name></name><argument_list pos:line="300" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="300" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="300" pos:column="32">globalScope</name><op:operator pos:line="300" pos:column="43">.</op:operator><name pos:line="300" pos:column="44">ChildStatements</name><op:operator pos:line="300" pos:column="59">.</op:operator><name pos:line="300" pos:column="60">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="302" pos:column="13">var</name></type> <name pos:line="302" pos:column="17">actual</name> <init pos:line="302" pos:column="24">= <expr><name><name pos:line="302" pos:column="26">globalScope</name><op:operator pos:line="302" pos:column="37">.</op:operator><name pos:line="302" pos:column="38">ChildStatements</name><index pos:line="302" pos:column="53">[<expr><lit:literal type="number" pos:line="302" pos:column="54">0</lit:literal></expr>]</index></name> <op:operator pos:line="302" pos:column="57">as</op:operator> <name pos:line="302" pos:column="60">ImportStatement</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="303" pos:column="13">Assert</name><op:operator pos:line="303" pos:column="19">.</op:operator><name pos:line="303" pos:column="20">IsNotNull</name></name><argument_list pos:line="303" pos:column="29">(<argument><expr><name pos:line="303" pos:column="30">actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="304" pos:column="13">Assert</name><op:operator pos:line="304" pos:column="19">.</op:operator><name pos:line="304" pos:column="20">AreEqual</name></name><argument_list pos:line="304" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="304" pos:column="29">"x . y . z"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="304" pos:column="42">actual</name><op:operator pos:line="304" pos:column="48">.</op:operator><name pos:line="304" pos:column="49">ImportedNamespace</name><op:operator pos:line="304" pos:column="66">.</op:operator><name pos:line="304" pos:column="67">ToString</name></name><argument_list pos:line="304" pos:column="75">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="307" pos:column="9">[<expr><name pos:line="307" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="308" pos:column="9">public</specifier> <name pos:line="308" pos:column="16">void</name></type> <name pos:line="308" pos:column="21">TestCreateAliasesForFiles_UsingAlias</name><parameter_list pos:line="308" pos:column="57">()</parameter_list> <block pos:line="308" pos:column="60">{
            <comment type="line" pos:line="309" pos:column="13">// using x = Foo.Bar.Baz;</comment>
            <decl_stmt><decl><type><name pos:line="310" pos:column="13">string</name></type> <name pos:line="310" pos:column="20">xml</name> <init pos:line="310" pos:column="24">= <expr><lit:literal type="string" pos:line="310" pos:column="26">@"&lt;using&gt;using &lt;name&gt;x&lt;/name&gt; &lt;init&gt;= &lt;expr&gt;&lt;name&gt;&lt;name&gt;Foo&lt;/name&gt;&lt;op:operator&gt;.&lt;/op:operator&gt;&lt;name&gt;Bar&lt;/name&gt;&lt;op:operator&gt;.&lt;/op:operator&gt;&lt;name&gt;Baz&lt;/name&gt;&lt;/name&gt;&lt;/expr&gt;&lt;/init&gt;;&lt;/using&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="311" pos:column="13">XElement</name></type> <name pos:line="311" pos:column="22">xmlElement</name> <init pos:line="311" pos:column="33">= <expr><call><name><name pos:line="311" pos:column="35">fileSetup</name><op:operator pos:line="311" pos:column="44">.</op:operator><name pos:line="311" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="311" pos:column="69">(<argument><expr><name pos:line="311" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="311" pos:column="75">"A.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="313" pos:column="13">var</name></type> <name pos:line="313" pos:column="17">globalScope</name> <init pos:line="313" pos:column="29">= <expr><call><name><name pos:line="313" pos:column="31">codeParser</name><op:operator pos:line="313" pos:column="41">.</op:operator><name pos:line="313" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="313" pos:column="55">(<argument><expr><name pos:line="313" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="314" pos:column="13">Assert</name><op:operator pos:line="314" pos:column="19">.</op:operator><name pos:line="314" pos:column="20">AreEqual</name></name><argument_list pos:line="314" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="314" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="314" pos:column="32">globalScope</name><op:operator pos:line="314" pos:column="43">.</op:operator><name pos:line="314" pos:column="44">ChildStatements</name><op:operator pos:line="314" pos:column="59">.</op:operator><name pos:line="314" pos:column="60">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="316" pos:column="13">var</name></type> <name pos:line="316" pos:column="17">actual</name> <init pos:line="316" pos:column="24">= <expr><name><name pos:line="316" pos:column="26">globalScope</name><op:operator pos:line="316" pos:column="37">.</op:operator><name pos:line="316" pos:column="38">ChildStatements</name><index pos:line="316" pos:column="53">[<expr><lit:literal type="number" pos:line="316" pos:column="54">0</lit:literal></expr>]</index></name> <op:operator pos:line="316" pos:column="57">as</op:operator> <name pos:line="316" pos:column="60">AliasStatement</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="317" pos:column="13">Assert</name><op:operator pos:line="317" pos:column="19">.</op:operator><name pos:line="317" pos:column="20">IsNotNull</name></name><argument_list pos:line="317" pos:column="29">(<argument><expr><name pos:line="317" pos:column="30">actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="318" pos:column="13">Assert</name><op:operator pos:line="318" pos:column="19">.</op:operator><name pos:line="318" pos:column="20">AreEqual</name></name><argument_list pos:line="318" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="318" pos:column="29">"x"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="318" pos:column="34">actual</name><op:operator pos:line="318" pos:column="40">.</op:operator><name pos:line="318" pos:column="41">AliasName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="319" pos:column="13">Assert</name><op:operator pos:line="319" pos:column="19">.</op:operator><name pos:line="319" pos:column="20">AreEqual</name></name><argument_list pos:line="319" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="319" pos:column="29">"Foo . Bar . Baz"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="319" pos:column="48">actual</name><op:operator pos:line="319" pos:column="54">.</op:operator><name pos:line="319" pos:column="55">Target</name><op:operator pos:line="319" pos:column="61">.</op:operator><name pos:line="319" pos:column="62">ToString</name></name><argument_list pos:line="319" pos:column="70">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="322" pos:column="9">[<expr><name pos:line="322" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="323" pos:column="9">public</specifier> <name pos:line="323" pos:column="16">void</name></type> <name pos:line="323" pos:column="21">TestGetImports</name><parameter_list pos:line="323" pos:column="35">()</parameter_list> <block pos:line="323" pos:column="38">{
            <comment type="line" pos:line="324" pos:column="13">//B.cs</comment>
            <comment type="line" pos:line="325" pos:column="13">//namespace x.y.z {}</comment>
            <decl_stmt><decl><type><name pos:line="326" pos:column="13">string</name></type> <name pos:line="326" pos:column="20">xmlB</name> <init pos:line="326" pos:column="25">= <expr><lit:literal type="string" pos:line="326" pos:column="27">@"&lt;namespace pos:line=""1"" pos:column="&gt;namespace &lt;name&gt;&lt;name pos:line=""1"" pos:column=""&gt;x&lt;/name&gt;&lt;op:operator pos:line=""1"" pos:column=""&gt;.&lt;/op:operator&gt;&lt;name pos:line=""1"" pos:column=""&gt;y&lt;/name&gt;&lt;op:operator pos:line=""1"" pos:column=""&gt;.&lt;/op:operator&gt;&lt;name pos:line=""1"" pos:column=""&gt;z&lt;/name&gt;&lt;/name&gt; &lt;block pos:line=""1"" pos:column=""&gt;{}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="327" pos:column="13">XElement</name></type> <name pos:line="327" pos:column="22">xmlElementB</name> <init pos:line="327" pos:column="34">= <expr><call><name><name pos:line="327" pos:column="36">fileSetup</name><op:operator pos:line="327" pos:column="45">.</op:operator><name pos:line="327" pos:column="46">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="327" pos:column="70">(<argument><expr><name pos:line="327" pos:column="71">xmlB</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="327" pos:column="77">"B.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="328" pos:column="13">//A.cs</comment>
            <comment type="line" pos:line="329" pos:column="13">//using x.y.z;</comment>
            <comment type="line" pos:line="330" pos:column="13">//foo = 17;</comment>
            <decl_stmt><decl><type><name pos:line="331" pos:column="13">string</name></type> <name pos:line="331" pos:column="20">xmlA</name> <init pos:line="331" pos:column="25">= <expr><lit:literal type="string" pos:line="331" pos:column="27">@"&lt;using pos:line=""1"" pos:column="&gt;using &lt;name&gt;&lt;name pos:line=""1"" pos:column="&gt;x&lt;/name&gt;&lt;op:operator pos:line=""1"" pos:column="&gt;.&lt;/op:operator&gt;&lt;name pos:line=""1"" pos:column="&gt;y&lt;/name&gt;&lt;op:operator pos:line=""1"" pos:column=""&gt;.&lt;/op:operator&gt;&lt;name pos:line=""1"" pos:column=""&gt;z&lt;/name&gt;&lt;/name&gt;;&lt;/using&gt;
&lt;expr_stmt&gt;&lt;expr&gt;&lt;name pos:line=""2"" pos:column="&gt;foo&lt;/name&gt; &lt;op:operator pos:line=""2"" pos:column="&gt;=&lt;/op:operator&gt; &lt;lit:literal type=""number"" pos:line=""2"" pos:column&gt;17&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="333" pos:column="13">XElement</name></type> <name pos:line="333" pos:column="22">xmlElementA</name> <init pos:line="333" pos:column="34">= <expr><call><name><name pos:line="333" pos:column="36">fileSetup</name><op:operator pos:line="333" pos:column="45">.</op:operator><name pos:line="333" pos:column="46">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="333" pos:column="70">(<argument><expr><name pos:line="333" pos:column="71">xmlA</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="333" pos:column="77">"A.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <decl_stmt><decl><type><name pos:line="335" pos:column="13">var</name></type> <name pos:line="335" pos:column="17">scopeA</name> <init pos:line="335" pos:column="24">= <expr><call><name><name pos:line="335" pos:column="26">codeParser</name><op:operator pos:line="335" pos:column="36">.</op:operator><name pos:line="335" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="335" pos:column="50">(<argument><expr><name pos:line="335" pos:column="51">xmlElementA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="336" pos:column="13">var</name></type> <name pos:line="336" pos:column="17">scopeB</name> <init pos:line="336" pos:column="24">= <expr><call><name><name pos:line="336" pos:column="26">codeParser</name><op:operator pos:line="336" pos:column="36">.</op:operator><name pos:line="336" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="336" pos:column="50">(<argument><expr><name pos:line="336" pos:column="51">xmlElementB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="337" pos:column="13">var</name></type> <name pos:line="337" pos:column="17">globalScope</name> <init pos:line="337" pos:column="29">= <expr><call><name><name pos:line="337" pos:column="31">scopeA</name><op:operator pos:line="337" pos:column="37">.</op:operator><name pos:line="337" pos:column="38">Merge</name></name><argument_list pos:line="337" pos:column="43">(<argument><expr><name pos:line="337" pos:column="44">scopeB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="338" pos:column="13">Assert</name><op:operator pos:line="338" pos:column="19">.</op:operator><name pos:line="338" pos:column="20">AreEqual</name></name><argument_list pos:line="338" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="338" pos:column="29">3</lit:literal></expr></argument>, <argument><expr><name><name pos:line="338" pos:column="32">globalScope</name><op:operator pos:line="338" pos:column="43">.</op:operator><name pos:line="338" pos:column="44">ChildStatements</name><op:operator pos:line="338" pos:column="59">.</op:operator><name pos:line="338" pos:column="60">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="339" pos:column="13">var</name></type> <name pos:line="339" pos:column="17">foo</name> <init pos:line="339" pos:column="21">= <expr><name><name pos:line="339" pos:column="23">globalScope</name><op:operator pos:line="339" pos:column="34">.</op:operator><name pos:line="339" pos:column="35">ChildStatements</name><index pos:line="339" pos:column="50">[<expr><lit:literal type="number" pos:line="339" pos:column="51">1</lit:literal></expr>]</index></name><op:operator pos:line="339" pos:column="53">.</op:operator><call><name><name pos:line="339" pos:column="54">Content</name><op:operator pos:line="339" pos:column="61">.</op:operator><name><name pos:line="339" pos:column="62">GetDescendantsAndSelf</name><argument_list pos:line="339" pos:column="83">&lt;<argument><name pos:line="339" pos:column="84">NameUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="339" pos:column="92">()</argument_list></call><op:operator pos:line="339" pos:column="94">.</op:operator><call><name pos:line="339" pos:column="95">FirstOrDefault</name><argument_list pos:line="339" pos:column="109">(<argument><expr><lambda><name pos:line="339" pos:column="110">n</name> <op:operator pos:line="339" pos:column="112">=&gt;</op:operator> <name><name pos:line="339" pos:column="115">n</name><op:operator pos:line="339" pos:column="116">.</op:operator><name pos:line="339" pos:column="117">Name</name></name> <op:operator pos:line="339" pos:column="122">==</op:operator> <lit:literal type="string" pos:line="339" pos:column="125">"foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="340" pos:column="13">Assert</name><op:operator pos:line="340" pos:column="19">.</op:operator><name pos:line="340" pos:column="20">IsNotNull</name></name><argument_list pos:line="340" pos:column="29">(<argument><expr><name pos:line="340" pos:column="30">foo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="341" pos:column="13">var</name></type> <name pos:line="341" pos:column="17">imports</name> <init pos:line="341" pos:column="25">= <expr><call><name><name pos:line="341" pos:column="27">foo</name><op:operator pos:line="341" pos:column="30">.</op:operator><name pos:line="341" pos:column="31">GetImports</name></name><argument_list pos:line="341" pos:column="41">()</argument_list></call><op:operator pos:line="341" pos:column="43">.</op:operator><call><name pos:line="341" pos:column="44">ToList</name><argument_list pos:line="341" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="342" pos:column="13">Assert</name><op:operator pos:line="342" pos:column="19">.</op:operator><name pos:line="342" pos:column="20">AreEqual</name></name><argument_list pos:line="342" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="342" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="342" pos:column="32">imports</name><op:operator pos:line="342" pos:column="39">.</op:operator><name pos:line="342" pos:column="40">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="343" pos:column="13">Assert</name><op:operator pos:line="343" pos:column="19">.</op:operator><name pos:line="343" pos:column="20">AreEqual</name></name><argument_list pos:line="343" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="343" pos:column="29">"x . y . z"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="343" pos:column="42">imports</name><index pos:line="343" pos:column="49">[<expr><lit:literal type="number" pos:line="343" pos:column="50">0</lit:literal></expr>]</index></name><op:operator pos:line="343" pos:column="52">.</op:operator><call><name><name pos:line="343" pos:column="53">ImportedNamespace</name><op:operator pos:line="343" pos:column="70">.</op:operator><name pos:line="343" pos:column="71">ToString</name></name><argument_list pos:line="343" pos:column="79">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="345" pos:column="13">var</name></type> <name pos:line="345" pos:column="17">nsd</name> <init pos:line="345" pos:column="21">= <expr><call><name><name pos:line="345" pos:column="23">globalScope</name><op:operator pos:line="345" pos:column="34">.</op:operator><name><name pos:line="345" pos:column="35">GetDescendants</name><argument_list pos:line="345" pos:column="49">&lt;<argument><name pos:line="345" pos:column="50">NamespaceDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="345" pos:column="70">()</argument_list></call><op:operator pos:line="345" pos:column="72">.</op:operator><call><name pos:line="345" pos:column="73">FirstOrDefault</name><argument_list pos:line="345" pos:column="87">(<argument><expr><lambda><name pos:line="345" pos:column="88">ns</name> <op:operator pos:line="345" pos:column="91">=&gt;</op:operator> <name><name pos:line="345" pos:column="94">ns</name><op:operator pos:line="345" pos:column="96">.</op:operator><name pos:line="345" pos:column="97">Name</name></name> <op:operator pos:line="345" pos:column="102">==</op:operator> <lit:literal type="string" pos:line="345" pos:column="105">"z"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="346" pos:column="13">Assert</name><op:operator pos:line="346" pos:column="19">.</op:operator><name pos:line="346" pos:column="20">IsNotNull</name></name><argument_list pos:line="346" pos:column="29">(<argument><expr><name pos:line="346" pos:column="30">nsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="347" pos:column="13">var</name></type> <name pos:line="347" pos:column="17">zUse</name> <init pos:line="347" pos:column="22">= <expr><name><name pos:line="347" pos:column="24">imports</name><index pos:line="347" pos:column="31">[<expr><lit:literal type="number" pos:line="347" pos:column="32">0</lit:literal></expr>]</index></name><op:operator pos:line="347" pos:column="34">.</op:operator><call><name><name pos:line="347" pos:column="35">ImportedNamespace</name><op:operator pos:line="347" pos:column="52">.</op:operator><name><name pos:line="347" pos:column="53">GetDescendantsAndSelf</name><argument_list pos:line="347" pos:column="74">&lt;<argument><name pos:line="347" pos:column="75">NameUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="347" pos:column="83">()</argument_list></call><op:operator pos:line="347" pos:column="85">.</op:operator><call><name pos:line="347" pos:column="86">LastOrDefault</name><argument_list pos:line="347" pos:column="99">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="348" pos:column="13">Assert</name><op:operator pos:line="348" pos:column="19">.</op:operator><name pos:line="348" pos:column="20">IsNotNull</name></name><argument_list pos:line="348" pos:column="29">(<argument><expr><name pos:line="348" pos:column="30">zUse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="349" pos:column="13">Assert</name><op:operator pos:line="349" pos:column="19">.</op:operator><name pos:line="349" pos:column="20">AreEqual</name></name><argument_list pos:line="349" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="349" pos:column="29">"z"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="349" pos:column="34">zUse</name><op:operator pos:line="349" pos:column="38">.</op:operator><name pos:line="349" pos:column="39">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="350" pos:column="13">Assert</name><op:operator pos:line="350" pos:column="19">.</op:operator><name pos:line="350" pos:column="20">AreSame</name></name><argument_list pos:line="350" pos:column="27">(<argument><expr><name pos:line="350" pos:column="28">nsd</name></expr></argument>, <argument><expr><call><name><name pos:line="350" pos:column="33">zUse</name><op:operator pos:line="350" pos:column="37">.</op:operator><name pos:line="350" pos:column="38">FindMatches</name></name><argument_list pos:line="350" pos:column="49">()</argument_list></call><op:operator pos:line="350" pos:column="51">.</op:operator><call><name pos:line="350" pos:column="52">First</name><argument_list pos:line="350" pos:column="57">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="353" pos:column="9">[<expr><name pos:line="353" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="354" pos:column="9">public</specifier> <name pos:line="354" pos:column="16">void</name></type> <name pos:line="354" pos:column="21">TestGetImports_NestedImportNamespace</name><parameter_list pos:line="354" pos:column="57">()</parameter_list> <block pos:line="354" pos:column="60">{
            <comment type="line" pos:line="355" pos:column="13">//A.cs</comment>
            <comment type="line" pos:line="356" pos:column="13">//namespace bar.baz {}</comment>
            <decl_stmt><decl><type><name pos:line="357" pos:column="13">string</name></type> <name pos:line="357" pos:column="20">xmlA</name> <init pos:line="357" pos:column="25">= <expr><lit:literal type="string" pos:line="357" pos:column="27">@"&lt;namespace pos:line=""1"" pos:column="&gt;namespace &lt;name&gt;&lt;name pos:line=""1"" pos:column=""&gt;bar&lt;/name&gt;&lt;op:operator pos:line=""1"" pos:column=""&gt;.&lt;/op:operator&gt;&lt;name pos:line=""1"" pos:column=""&gt;baz&lt;/name&gt;&lt;/name&gt; &lt;block pos:line=""1"" pos:column=""&gt;{}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="358" pos:column="13">XElement</name></type> <name pos:line="358" pos:column="22">xmlElementA</name> <init pos:line="358" pos:column="34">= <expr><call><name><name pos:line="358" pos:column="36">fileSetup</name><op:operator pos:line="358" pos:column="45">.</op:operator><name pos:line="358" pos:column="46">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="358" pos:column="70">(<argument><expr><name pos:line="358" pos:column="71">xmlA</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="358" pos:column="77">"A.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="359" pos:column="13">//B.cs</comment>
            <comment type="line" pos:line="360" pos:column="13">//using x.y.z;</comment>
            <comment type="line" pos:line="361" pos:column="13">//if(bar) {</comment>
            <comment type="line" pos:line="362" pos:column="13">//  using bar.baz;</comment>
            <comment type="line" pos:line="363" pos:column="13">//  foo = 17;</comment>
            <comment type="line" pos:line="364" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="365" pos:column="13">string</name></type> <name pos:line="365" pos:column="20">xmlB</name> <init pos:line="365" pos:column="25">= <expr><lit:literal type="string" pos:line="365" pos:column="27">@"&lt;using pos:line=""1"" pos:column="&gt;using &lt;name&gt;&lt;name pos:line=""1"" pos:column="&gt;x&lt;/name&gt;&lt;op:operator pos:line=""1"" pos:column="&gt;.&lt;/op:operator&gt;&lt;name pos:line=""1"" pos:column="&gt;y&lt;/name&gt;&lt;op:operator pos:line=""1"" pos:column=""&gt;.&lt;/op:operator&gt;&lt;name pos:line=""1"" pos:column=""&gt;z&lt;/name&gt;&lt;/name&gt;;&lt;/using&gt;
&lt;if pos:line=""2"" pos:column="&gt;if&lt;condition pos:line=""2"" pos:column="&gt;(&lt;expr&gt;&lt;name pos:line=""2"" pos:column="&gt;bar&lt;/name&gt;&lt;/expr&gt;)&lt;/condition&gt;&lt;then pos:line=""2"" pos:column="&gt; &lt;block pos:line=""2"" pos:column="&gt;{
  &lt;using pos:line=""3"" pos:column="&gt;using &lt;name&gt;&lt;name pos:line=""3"" pos:column="&gt;bar&lt;/name&gt;&lt;op:operator pos:line=""3"" pos:column=""&gt;.&lt;/op:operator&gt;&lt;name pos:line=""3"" pos:column=""&gt;baz&lt;/name&gt;&lt;/name&gt;;&lt;/using&gt;
  &lt;expr_stmt&gt;&lt;expr&gt;&lt;name pos:line=""4"" pos:column="&gt;foo&lt;/name&gt; &lt;op:operator pos:line=""4"" pos:column="&gt;=&lt;/op:operator&gt; &lt;lit:literal type=""number"" pos:line=""4"" pos:column&gt;17&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
}&lt;/block&gt;&lt;/then&gt;&lt;/if&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="370" pos:column="13">XElement</name></type> <name pos:line="370" pos:column="22">xmlElementB</name> <init pos:line="370" pos:column="34">= <expr><call><name><name pos:line="370" pos:column="36">fileSetup</name><op:operator pos:line="370" pos:column="45">.</op:operator><name pos:line="370" pos:column="46">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="370" pos:column="70">(<argument><expr><name pos:line="370" pos:column="71">xmlB</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="370" pos:column="77">"B.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="372" pos:column="13">var</name></type> <name pos:line="372" pos:column="17">scopeA</name> <init pos:line="372" pos:column="24">= <expr><call><name><name pos:line="372" pos:column="26">codeParser</name><op:operator pos:line="372" pos:column="36">.</op:operator><name pos:line="372" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="372" pos:column="50">(<argument><expr><name pos:line="372" pos:column="51">xmlElementA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="373" pos:column="13">var</name></type> <name pos:line="373" pos:column="17">scopeB</name> <init pos:line="373" pos:column="24">= <expr><call><name><name pos:line="373" pos:column="26">codeParser</name><op:operator pos:line="373" pos:column="36">.</op:operator><name pos:line="373" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="373" pos:column="50">(<argument><expr><name pos:line="373" pos:column="51">xmlElementB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="374" pos:column="13">var</name></type> <name pos:line="374" pos:column="17">globalScope</name> <init pos:line="374" pos:column="29">= <expr><call><name><name pos:line="374" pos:column="31">scopeA</name><op:operator pos:line="374" pos:column="37">.</op:operator><name pos:line="374" pos:column="38">Merge</name></name><argument_list pos:line="374" pos:column="43">(<argument><expr><name pos:line="374" pos:column="44">scopeB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="375" pos:column="13">var</name></type> <name pos:line="375" pos:column="17">foo</name> <init pos:line="375" pos:column="21">= <expr><name><name pos:line="375" pos:column="23">globalScope</name><op:operator pos:line="375" pos:column="34">.</op:operator><name pos:line="375" pos:column="35">ChildStatements</name><index pos:line="375" pos:column="50">[<expr><lit:literal type="number" pos:line="375" pos:column="51">2</lit:literal></expr>]</index></name><op:operator pos:line="375" pos:column="53">.</op:operator><name><name pos:line="375" pos:column="54">ChildStatements</name><index pos:line="375" pos:column="69">[<expr><lit:literal type="number" pos:line="375" pos:column="70">1</lit:literal></expr>]</index></name><op:operator pos:line="375" pos:column="72">.</op:operator><call><name><name pos:line="375" pos:column="73">Content</name><op:operator pos:line="375" pos:column="80">.</op:operator><name><name pos:line="375" pos:column="81">GetDescendantsAndSelf</name><argument_list pos:line="375" pos:column="102">&lt;<argument><name pos:line="375" pos:column="103">NameUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="375" pos:column="111">()</argument_list></call><op:operator pos:line="375" pos:column="113">.</op:operator><call><name pos:line="375" pos:column="114">FirstOrDefault</name><argument_list pos:line="375" pos:column="128">(<argument><expr><lambda><name pos:line="375" pos:column="129">n</name> <op:operator pos:line="375" pos:column="131">=&gt;</op:operator> <name><name pos:line="375" pos:column="134">n</name><op:operator pos:line="375" pos:column="135">.</op:operator><name pos:line="375" pos:column="136">Name</name></name> <op:operator pos:line="375" pos:column="141">==</op:operator> <lit:literal type="string" pos:line="375" pos:column="144">"foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="376" pos:column="13">Assert</name><op:operator pos:line="376" pos:column="19">.</op:operator><name pos:line="376" pos:column="20">IsNotNull</name></name><argument_list pos:line="376" pos:column="29">(<argument><expr><name pos:line="376" pos:column="30">foo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="377" pos:column="13">var</name></type> <name pos:line="377" pos:column="17">imports</name> <init pos:line="377" pos:column="25">= <expr><call><name><name pos:line="377" pos:column="27">foo</name><op:operator pos:line="377" pos:column="30">.</op:operator><name pos:line="377" pos:column="31">GetImports</name></name><argument_list pos:line="377" pos:column="41">()</argument_list></call><op:operator pos:line="377" pos:column="43">.</op:operator><call><name pos:line="377" pos:column="44">ToList</name><argument_list pos:line="377" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="378" pos:column="13">Assert</name><op:operator pos:line="378" pos:column="19">.</op:operator><name pos:line="378" pos:column="20">AreEqual</name></name><argument_list pos:line="378" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="378" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="378" pos:column="32">imports</name><op:operator pos:line="378" pos:column="39">.</op:operator><name pos:line="378" pos:column="40">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="379" pos:column="13">Assert</name><op:operator pos:line="379" pos:column="19">.</op:operator><name pos:line="379" pos:column="20">AreEqual</name></name><argument_list pos:line="379" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="379" pos:column="29">"bar . baz"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="379" pos:column="42">imports</name><index pos:line="379" pos:column="49">[<expr><lit:literal type="number" pos:line="379" pos:column="50">0</lit:literal></expr>]</index></name><op:operator pos:line="379" pos:column="52">.</op:operator><call><name><name pos:line="379" pos:column="53">ImportedNamespace</name><op:operator pos:line="379" pos:column="70">.</op:operator><name pos:line="379" pos:column="71">ToString</name></name><argument_list pos:line="379" pos:column="79">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="380" pos:column="13">Assert</name><op:operator pos:line="380" pos:column="19">.</op:operator><name pos:line="380" pos:column="20">AreEqual</name></name><argument_list pos:line="380" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="380" pos:column="29">"x . y . z"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="380" pos:column="42">imports</name><index pos:line="380" pos:column="49">[<expr><lit:literal type="number" pos:line="380" pos:column="50">1</lit:literal></expr>]</index></name><op:operator pos:line="380" pos:column="52">.</op:operator><call><name><name pos:line="380" pos:column="53">ImportedNamespace</name><op:operator pos:line="380" pos:column="70">.</op:operator><name pos:line="380" pos:column="71">ToString</name></name><argument_list pos:line="380" pos:column="79">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="382" pos:column="13">var</name></type> <name pos:line="382" pos:column="17">baz</name> <init pos:line="382" pos:column="21">= <expr><call><name><name pos:line="382" pos:column="23">globalScope</name><op:operator pos:line="382" pos:column="34">.</op:operator><name><name pos:line="382" pos:column="35">GetDescendants</name><argument_list pos:line="382" pos:column="49">&lt;<argument><name pos:line="382" pos:column="50">NamespaceDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="382" pos:column="70">()</argument_list></call><op:operator pos:line="382" pos:column="72">.</op:operator><call><name pos:line="382" pos:column="73">FirstOrDefault</name><argument_list pos:line="382" pos:column="87">(<argument><expr><lambda><name pos:line="382" pos:column="88">ns</name> <op:operator pos:line="382" pos:column="91">=&gt;</op:operator> <name><name pos:line="382" pos:column="94">ns</name><op:operator pos:line="382" pos:column="96">.</op:operator><name pos:line="382" pos:column="97">Name</name></name> <op:operator pos:line="382" pos:column="102">==</op:operator> <lit:literal type="string" pos:line="382" pos:column="105">"baz"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="383" pos:column="13">Assert</name><op:operator pos:line="383" pos:column="19">.</op:operator><name pos:line="383" pos:column="20">IsNotNull</name></name><argument_list pos:line="383" pos:column="29">(<argument><expr><name pos:line="383" pos:column="30">baz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="384" pos:column="13">var</name></type> <name pos:line="384" pos:column="17">bazUse</name> <init pos:line="384" pos:column="24">= <expr><name><name pos:line="384" pos:column="26">imports</name><index pos:line="384" pos:column="33">[<expr><lit:literal type="number" pos:line="384" pos:column="34">0</lit:literal></expr>]</index></name><op:operator pos:line="384" pos:column="36">.</op:operator><call><name><name pos:line="384" pos:column="37">ImportedNamespace</name><op:operator pos:line="384" pos:column="54">.</op:operator><name><name pos:line="384" pos:column="55">GetDescendantsAndSelf</name><argument_list pos:line="384" pos:column="76">&lt;<argument><name pos:line="384" pos:column="77">NameUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="384" pos:column="85">()</argument_list></call><op:operator pos:line="384" pos:column="87">.</op:operator><call><name pos:line="384" pos:column="88">LastOrDefault</name><argument_list pos:line="384" pos:column="101">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="385" pos:column="13">Assert</name><op:operator pos:line="385" pos:column="19">.</op:operator><name pos:line="385" pos:column="20">IsNotNull</name></name><argument_list pos:line="385" pos:column="29">(<argument><expr><name pos:line="385" pos:column="30">bazUse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="386" pos:column="13">Assert</name><op:operator pos:line="386" pos:column="19">.</op:operator><name pos:line="386" pos:column="20">AreEqual</name></name><argument_list pos:line="386" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="386" pos:column="29">"baz"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="386" pos:column="36">bazUse</name><op:operator pos:line="386" pos:column="42">.</op:operator><name pos:line="386" pos:column="43">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="387" pos:column="13">Assert</name><op:operator pos:line="387" pos:column="19">.</op:operator><name pos:line="387" pos:column="20">AreSame</name></name><argument_list pos:line="387" pos:column="27">(<argument><expr><name pos:line="387" pos:column="28">baz</name></expr></argument>, <argument><expr><call><name><name pos:line="387" pos:column="33">bazUse</name><op:operator pos:line="387" pos:column="39">.</op:operator><name pos:line="387" pos:column="40">FindMatches</name></name><argument_list pos:line="387" pos:column="51">()</argument_list></call><op:operator pos:line="387" pos:column="53">.</op:operator><call><name pos:line="387" pos:column="54">First</name><argument_list pos:line="387" pos:column="59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="390" pos:column="9">[<expr><name pos:line="390" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="391" pos:column="9">public</specifier> <name pos:line="391" pos:column="16">void</name></type> <name pos:line="391" pos:column="21">TestGetImports_SeparateFiles</name><parameter_list pos:line="391" pos:column="49">()</parameter_list> <block pos:line="391" pos:column="52">{
            <comment type="line" pos:line="392" pos:column="13">//A.cs</comment>
            <comment type="line" pos:line="393" pos:column="13">//using x.y.z;</comment>
            <comment type="line" pos:line="394" pos:column="13">//Foo = 17;</comment>
            <decl_stmt><decl><type><name pos:line="395" pos:column="13">string</name></type> <name pos:line="395" pos:column="20">xmlA</name> <init pos:line="395" pos:column="25">= <expr><lit:literal type="string" pos:line="395" pos:column="27">@"&lt;using pos:line=""1"" pos:column="&gt;using &lt;name&gt;&lt;name pos:line=""1"" pos:column="&gt;x&lt;/name&gt;&lt;op:operator pos:line=""1"" pos:column="&gt;.&lt;/op:operator&gt;&lt;name pos:line=""1"" pos:column="&gt;y&lt;/name&gt;&lt;op:operator pos:line=""1"" pos:column=""&gt;.&lt;/op:operator&gt;&lt;name pos:line=""1"" pos:column=""&gt;z&lt;/name&gt;&lt;/name&gt;;&lt;/using&gt;
&lt;expr_stmt&gt;&lt;expr&gt;&lt;name pos:line=""2"" pos:column="&gt;Foo&lt;/name&gt; &lt;op:operator pos:line=""2"" pos:column="&gt;=&lt;/op:operator&gt; &lt;lit:literal type=""number"" pos:line=""2"" pos:column&gt;17&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="397" pos:column="13">XElement</name></type> <name pos:line="397" pos:column="22">xmlElementA</name> <init pos:line="397" pos:column="34">= <expr><call><name><name pos:line="397" pos:column="36">fileSetup</name><op:operator pos:line="397" pos:column="45">.</op:operator><name pos:line="397" pos:column="46">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="397" pos:column="70">(<argument><expr><name pos:line="397" pos:column="71">xmlA</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="397" pos:column="77">"A.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="398" pos:column="13">//B.cs</comment>
            <comment type="line" pos:line="399" pos:column="13">//using a.b.howdy;</comment>
            <comment type="line" pos:line="400" pos:column="13">//Bar();</comment>
            <decl_stmt><decl><type><name pos:line="401" pos:column="13">string</name></type> <name pos:line="401" pos:column="20">xmlB</name> <init pos:line="401" pos:column="25">= <expr><lit:literal type="string" pos:line="401" pos:column="27">@"&lt;using pos:line=""1"" pos:column="&gt;using &lt;name&gt;&lt;name pos:line=""1"" pos:column="&gt;a&lt;/name&gt;&lt;op:operator pos:line=""1"" pos:column="&gt;.&lt;/op:operator&gt;&lt;name pos:line=""1"" pos:column="&gt;b&lt;/name&gt;&lt;op:operator pos:line=""1"" pos:column=""&gt;.&lt;/op:operator&gt;&lt;name pos:line=""1"" pos:column=""&gt;howdy&lt;/name&gt;&lt;/name&gt;;&lt;/using&gt;
&lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name pos:line=""2"" pos:column="&gt;Bar&lt;/name&gt;&lt;argument_list pos:line=""2"" pos:column="&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="403" pos:column="13">XElement</name></type> <name pos:line="403" pos:column="22">xmlElementB</name> <init pos:line="403" pos:column="34">= <expr><call><name><name pos:line="403" pos:column="36">fileSetup</name><op:operator pos:line="403" pos:column="45">.</op:operator><name pos:line="403" pos:column="46">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="403" pos:column="70">(<argument><expr><name pos:line="403" pos:column="71">xmlB</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="403" pos:column="77">"B.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="405" pos:column="13">var</name></type> <name pos:line="405" pos:column="17">scopeA</name> <init pos:line="405" pos:column="24">= <expr><call><name><name pos:line="405" pos:column="26">codeParser</name><op:operator pos:line="405" pos:column="36">.</op:operator><name pos:line="405" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="405" pos:column="50">(<argument><expr><name pos:line="405" pos:column="51">xmlElementA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="406" pos:column="13">var</name></type> <name pos:line="406" pos:column="17">scopeB</name> <init pos:line="406" pos:column="24">= <expr><call><name><name pos:line="406" pos:column="26">codeParser</name><op:operator pos:line="406" pos:column="36">.</op:operator><name pos:line="406" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="406" pos:column="50">(<argument><expr><name pos:line="406" pos:column="51">xmlElementB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="407" pos:column="13">var</name></type> <name pos:line="407" pos:column="17">globalScope</name> <init pos:line="407" pos:column="29">= <expr><call><name><name pos:line="407" pos:column="31">scopeA</name><op:operator pos:line="407" pos:column="37">.</op:operator><name pos:line="407" pos:column="38">Merge</name></name><argument_list pos:line="407" pos:column="43">(<argument><expr><name pos:line="407" pos:column="44">scopeB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="408" pos:column="13">Assert</name><op:operator pos:line="408" pos:column="19">.</op:operator><name pos:line="408" pos:column="20">AreEqual</name></name><argument_list pos:line="408" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="408" pos:column="29">4</lit:literal></expr></argument>, <argument><expr><name><name pos:line="408" pos:column="32">globalScope</name><op:operator pos:line="408" pos:column="43">.</op:operator><name pos:line="408" pos:column="44">ChildStatements</name><op:operator pos:line="408" pos:column="59">.</op:operator><name pos:line="408" pos:column="60">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="410" pos:column="13">var</name></type> <name pos:line="410" pos:column="17">foo</name> <init pos:line="410" pos:column="21">= <expr><name><name pos:line="410" pos:column="23">globalScope</name><op:operator pos:line="410" pos:column="34">.</op:operator><name pos:line="410" pos:column="35">ChildStatements</name><index pos:line="410" pos:column="50">[<expr><lit:literal type="number" pos:line="410" pos:column="51">1</lit:literal></expr>]</index></name><op:operator pos:line="410" pos:column="53">.</op:operator><call><name><name pos:line="410" pos:column="54">Content</name><op:operator pos:line="410" pos:column="61">.</op:operator><name><name pos:line="410" pos:column="62">GetDescendantsAndSelf</name><argument_list pos:line="410" pos:column="83">&lt;<argument><name pos:line="410" pos:column="84">NameUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="410" pos:column="92">()</argument_list></call><op:operator pos:line="410" pos:column="94">.</op:operator><call><name pos:line="410" pos:column="95">FirstOrDefault</name><argument_list pos:line="410" pos:column="109">(<argument><expr><lambda><name pos:line="410" pos:column="110">nu</name> <op:operator pos:line="410" pos:column="113">=&gt;</op:operator> <name><name pos:line="410" pos:column="116">nu</name><op:operator pos:line="410" pos:column="118">.</op:operator><name pos:line="410" pos:column="119">Name</name></name> <op:operator pos:line="410" pos:column="124">==</op:operator> <lit:literal type="string" pos:line="410" pos:column="127">"Foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="411" pos:column="13">Assert</name><op:operator pos:line="411" pos:column="19">.</op:operator><name pos:line="411" pos:column="20">IsNotNull</name></name><argument_list pos:line="411" pos:column="29">(<argument><expr><name pos:line="411" pos:column="30">foo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="412" pos:column="13">var</name></type> <name pos:line="412" pos:column="17">fooImports</name> <init pos:line="412" pos:column="28">= <expr><call><name><name pos:line="412" pos:column="30">foo</name><op:operator pos:line="412" pos:column="33">.</op:operator><name pos:line="412" pos:column="34">GetImports</name></name><argument_list pos:line="412" pos:column="44">()</argument_list></call><op:operator pos:line="412" pos:column="46">.</op:operator><call><name pos:line="412" pos:column="47">ToList</name><argument_list pos:line="412" pos:column="53">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="413" pos:column="13">Assert</name><op:operator pos:line="413" pos:column="19">.</op:operator><name pos:line="413" pos:column="20">AreEqual</name></name><argument_list pos:line="413" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="413" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="413" pos:column="32">fooImports</name><op:operator pos:line="413" pos:column="42">.</op:operator><name pos:line="413" pos:column="43">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="414" pos:column="13">Assert</name><op:operator pos:line="414" pos:column="19">.</op:operator><name pos:line="414" pos:column="20">AreEqual</name></name><argument_list pos:line="414" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="414" pos:column="29">"x . y . z"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="414" pos:column="42">fooImports</name><index pos:line="414" pos:column="52">[<expr><lit:literal type="number" pos:line="414" pos:column="53">0</lit:literal></expr>]</index></name><op:operator pos:line="414" pos:column="55">.</op:operator><call><name><name pos:line="414" pos:column="56">ImportedNamespace</name><op:operator pos:line="414" pos:column="73">.</op:operator><name pos:line="414" pos:column="74">ToString</name></name><argument_list pos:line="414" pos:column="82">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="416" pos:column="13">var</name></type> <name pos:line="416" pos:column="17">bar</name> <init pos:line="416" pos:column="21">= <expr><name><name pos:line="416" pos:column="23">globalScope</name><op:operator pos:line="416" pos:column="34">.</op:operator><name pos:line="416" pos:column="35">ChildStatements</name><index pos:line="416" pos:column="50">[<expr><lit:literal type="number" pos:line="416" pos:column="51">3</lit:literal></expr>]</index></name><op:operator pos:line="416" pos:column="53">.</op:operator><call><name><name pos:line="416" pos:column="54">Content</name><op:operator pos:line="416" pos:column="61">.</op:operator><name><name pos:line="416" pos:column="62">GetDescendantsAndSelf</name><argument_list pos:line="416" pos:column="83">&lt;<argument><name pos:line="416" pos:column="84">NameUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="416" pos:column="92">()</argument_list></call><op:operator pos:line="416" pos:column="94">.</op:operator><call><name pos:line="416" pos:column="95">FirstOrDefault</name><argument_list pos:line="416" pos:column="109">(<argument><expr><lambda><name pos:line="416" pos:column="110">nu</name> <op:operator pos:line="416" pos:column="113">=&gt;</op:operator> <name><name pos:line="416" pos:column="116">nu</name><op:operator pos:line="416" pos:column="118">.</op:operator><name pos:line="416" pos:column="119">Name</name></name> <op:operator pos:line="416" pos:column="124">==</op:operator> <lit:literal type="string" pos:line="416" pos:column="127">"Bar"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="417" pos:column="13">Assert</name><op:operator pos:line="417" pos:column="19">.</op:operator><name pos:line="417" pos:column="20">IsNotNull</name></name><argument_list pos:line="417" pos:column="29">(<argument><expr><name pos:line="417" pos:column="30">bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="418" pos:column="13">var</name></type> <name pos:line="418" pos:column="17">barImports</name> <init pos:line="418" pos:column="28">= <expr><call><name><name pos:line="418" pos:column="30">bar</name><op:operator pos:line="418" pos:column="33">.</op:operator><name pos:line="418" pos:column="34">GetImports</name></name><argument_list pos:line="418" pos:column="44">()</argument_list></call><op:operator pos:line="418" pos:column="46">.</op:operator><call><name pos:line="418" pos:column="47">ToList</name><argument_list pos:line="418" pos:column="53">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="419" pos:column="13">Assert</name><op:operator pos:line="419" pos:column="19">.</op:operator><name pos:line="419" pos:column="20">AreEqual</name></name><argument_list pos:line="419" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="419" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="419" pos:column="32">barImports</name><op:operator pos:line="419" pos:column="42">.</op:operator><name pos:line="419" pos:column="43">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="420" pos:column="13">Assert</name><op:operator pos:line="420" pos:column="19">.</op:operator><name pos:line="420" pos:column="20">AreEqual</name></name><argument_list pos:line="420" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="420" pos:column="29">"a . b . howdy"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="420" pos:column="46">barImports</name><index pos:line="420" pos:column="56">[<expr><lit:literal type="number" pos:line="420" pos:column="57">0</lit:literal></expr>]</index></name><op:operator pos:line="420" pos:column="59">.</op:operator><call><name><name pos:line="420" pos:column="60">ImportedNamespace</name><op:operator pos:line="420" pos:column="77">.</op:operator><name pos:line="420" pos:column="78">ToString</name></name><argument_list pos:line="420" pos:column="86">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="423" pos:column="9">[<expr><name pos:line="423" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="424" pos:column="9">public</specifier> <name pos:line="424" pos:column="16">void</name></type> <name pos:line="424" pos:column="21">TestGetAliases_NestedUsingAlias</name><parameter_list pos:line="424" pos:column="52">()</parameter_list> <block pos:line="424" pos:column="55">{
            <comment type="line" pos:line="425" pos:column="13">//A.cs</comment>
            <comment type="line" pos:line="426" pos:column="13">//namespace bar {</comment>
            <comment type="line" pos:line="427" pos:column="13">//  class baz {}</comment>
            <comment type="line" pos:line="428" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="429" pos:column="13">string</name></type> <name pos:line="429" pos:column="20">xmlA</name> <init pos:line="429" pos:column="25">= <expr><lit:literal type="string" pos:line="429" pos:column="27">@"&lt;namespace pos:line=""1"" pos:column="&gt;namespace &lt;name pos:line=""1"" pos:column=""&gt;bar&lt;/name&gt; &lt;block pos:line=""1"" pos:column=""&gt;{
  &lt;class pos:line=""2"" pos:column="&gt;class &lt;name pos:line=""2"" pos:column="&gt;baz&lt;/name&gt; &lt;block pos:line=""2"" pos:column=""&gt;{}&lt;/block&gt;&lt;/class&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="432" pos:column="13">XElement</name></type> <name pos:line="432" pos:column="22">xmlElementA</name> <init pos:line="432" pos:column="34">= <expr><call><name><name pos:line="432" pos:column="36">fileSetup</name><op:operator pos:line="432" pos:column="45">.</op:operator><name pos:line="432" pos:column="46">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="432" pos:column="70">(<argument><expr><name pos:line="432" pos:column="71">xmlA</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="432" pos:column="77">"A.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="433" pos:column="13">//B.cs</comment>
            <comment type="line" pos:line="434" pos:column="13">//using x.y.z;</comment>
            <comment type="line" pos:line="435" pos:column="13">//if(bar) {</comment>
            <comment type="line" pos:line="436" pos:column="13">//  using x = bar.baz;</comment>
            <comment type="line" pos:line="437" pos:column="13">//  foo = 17;</comment>
            <comment type="line" pos:line="438" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="439" pos:column="13">string</name></type> <name pos:line="439" pos:column="20">xmlB</name> <init pos:line="439" pos:column="25">= <expr><lit:literal type="string" pos:line="439" pos:column="27">@"&lt;using pos:line=""1"" pos:column="&gt;using &lt;name&gt;&lt;name pos:line=""1"" pos:column="&gt;x&lt;/name&gt;&lt;op:operator pos:line=""1"" pos:column="&gt;.&lt;/op:operator&gt;&lt;name pos:line=""1"" pos:column="&gt;y&lt;/name&gt;&lt;op:operator pos:line=""1"" pos:column=""&gt;.&lt;/op:operator&gt;&lt;name pos:line=""1"" pos:column=""&gt;z&lt;/name&gt;&lt;/name&gt;;&lt;/using&gt;
&lt;if pos:line=""2"" pos:column="&gt;if&lt;condition pos:line=""2"" pos:column="&gt;(&lt;expr&gt;&lt;name pos:line=""2"" pos:column="&gt;bar&lt;/name&gt;&lt;/expr&gt;)&lt;/condition&gt;&lt;then pos:line=""2"" pos:column="&gt; &lt;block pos:line=""2"" pos:column="&gt;{
  &lt;using pos:line=""3"" pos:column="&gt;using &lt;name pos:line=""3"" pos:column="&gt;x&lt;/name&gt; &lt;init pos:line=""3"" pos:column=""&gt;= &lt;expr&gt;&lt;name&gt;&lt;name pos:line=""3"" pos:column=""&gt;bar&lt;/name&gt;&lt;op:operator pos:line=""3"" pos:column=""&gt;.&lt;/op:operator&gt;&lt;name pos:line=""3"" pos:column=""&gt;baz&lt;/name&gt;&lt;/name&gt;&lt;/expr&gt;&lt;/init&gt;;&lt;/using&gt;
  &lt;expr_stmt&gt;&lt;expr&gt;&lt;name pos:line=""4"" pos:column="&gt;foo&lt;/name&gt; &lt;op:operator pos:line=""4"" pos:column="&gt;=&lt;/op:operator&gt; &lt;lit:literal type=""number"" pos:line=""4"" pos:column&gt;17&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
}&lt;/block&gt;&lt;/then&gt;&lt;/if&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="444" pos:column="13">XElement</name></type> <name pos:line="444" pos:column="22">xmlElementB</name> <init pos:line="444" pos:column="34">= <expr><call><name><name pos:line="444" pos:column="36">fileSetup</name><op:operator pos:line="444" pos:column="45">.</op:operator><name pos:line="444" pos:column="46">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="444" pos:column="70">(<argument><expr><name pos:line="444" pos:column="71">xmlB</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="444" pos:column="77">"A.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <decl_stmt><decl><type><name pos:line="446" pos:column="13">var</name></type> <name pos:line="446" pos:column="17">scopeA</name> <init pos:line="446" pos:column="24">= <expr><call><name><name pos:line="446" pos:column="26">codeParser</name><op:operator pos:line="446" pos:column="36">.</op:operator><name pos:line="446" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="446" pos:column="50">(<argument><expr><name pos:line="446" pos:column="51">xmlElementA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="447" pos:column="13">var</name></type> <name pos:line="447" pos:column="17">scopeB</name> <init pos:line="447" pos:column="24">= <expr><call><name><name pos:line="447" pos:column="26">codeParser</name><op:operator pos:line="447" pos:column="36">.</op:operator><name pos:line="447" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="447" pos:column="50">(<argument><expr><name pos:line="447" pos:column="51">xmlElementB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="448" pos:column="13">var</name></type> <name pos:line="448" pos:column="17">globalScope</name> <init pos:line="448" pos:column="29">= <expr><call><name><name pos:line="448" pos:column="31">scopeA</name><op:operator pos:line="448" pos:column="37">.</op:operator><name pos:line="448" pos:column="38">Merge</name></name><argument_list pos:line="448" pos:column="43">(<argument><expr><name pos:line="448" pos:column="44">scopeB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="449" pos:column="13">var</name></type> <name pos:line="449" pos:column="17">foo</name> <init pos:line="449" pos:column="21">= <expr><name><name pos:line="449" pos:column="23">globalScope</name><op:operator pos:line="449" pos:column="34">.</op:operator><name pos:line="449" pos:column="35">ChildStatements</name><index pos:line="449" pos:column="50">[<expr><lit:literal type="number" pos:line="449" pos:column="51">2</lit:literal></expr>]</index></name><op:operator pos:line="449" pos:column="53">.</op:operator><name><name pos:line="449" pos:column="54">ChildStatements</name><index pos:line="449" pos:column="69">[<expr><lit:literal type="number" pos:line="449" pos:column="70">1</lit:literal></expr>]</index></name><op:operator pos:line="449" pos:column="72">.</op:operator><call><name><name pos:line="449" pos:column="73">Content</name><op:operator pos:line="449" pos:column="80">.</op:operator><name><name pos:line="449" pos:column="81">GetDescendantsAndSelf</name><argument_list pos:line="449" pos:column="102">&lt;<argument><name pos:line="449" pos:column="103">NameUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="449" pos:column="111">()</argument_list></call><op:operator pos:line="449" pos:column="113">.</op:operator><call><name pos:line="449" pos:column="114">FirstOrDefault</name><argument_list pos:line="449" pos:column="128">(<argument><expr><lambda><name pos:line="449" pos:column="129">n</name> <op:operator pos:line="449" pos:column="131">=&gt;</op:operator> <name><name pos:line="449" pos:column="134">n</name><op:operator pos:line="449" pos:column="135">.</op:operator><name pos:line="449" pos:column="136">Name</name></name> <op:operator pos:line="449" pos:column="141">==</op:operator> <lit:literal type="string" pos:line="449" pos:column="144">"foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="450" pos:column="13">Assert</name><op:operator pos:line="450" pos:column="19">.</op:operator><name pos:line="450" pos:column="20">IsNotNull</name></name><argument_list pos:line="450" pos:column="29">(<argument><expr><name pos:line="450" pos:column="30">foo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="451" pos:column="13">var</name></type> <name pos:line="451" pos:column="17">aliases</name> <init pos:line="451" pos:column="25">= <expr><call><name><name pos:line="451" pos:column="27">foo</name><op:operator pos:line="451" pos:column="30">.</op:operator><name pos:line="451" pos:column="31">GetAliases</name></name><argument_list pos:line="451" pos:column="41">()</argument_list></call><op:operator pos:line="451" pos:column="43">.</op:operator><call><name pos:line="451" pos:column="44">ToList</name><argument_list pos:line="451" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="452" pos:column="13">Assert</name><op:operator pos:line="452" pos:column="19">.</op:operator><name pos:line="452" pos:column="20">AreEqual</name></name><argument_list pos:line="452" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="452" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="452" pos:column="32">aliases</name><op:operator pos:line="452" pos:column="39">.</op:operator><name pos:line="452" pos:column="40">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="453" pos:column="13">Assert</name><op:operator pos:line="453" pos:column="19">.</op:operator><name pos:line="453" pos:column="20">AreEqual</name></name><argument_list pos:line="453" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="453" pos:column="29">"bar . baz"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="453" pos:column="42">aliases</name><index pos:line="453" pos:column="49">[<expr><lit:literal type="number" pos:line="453" pos:column="50">0</lit:literal></expr>]</index></name><op:operator pos:line="453" pos:column="52">.</op:operator><call><name><name pos:line="453" pos:column="53">Target</name><op:operator pos:line="453" pos:column="59">.</op:operator><name pos:line="453" pos:column="60">ToString</name></name><argument_list pos:line="453" pos:column="68">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="454" pos:column="13">Assert</name><op:operator pos:line="454" pos:column="19">.</op:operator><name pos:line="454" pos:column="20">AreEqual</name></name><argument_list pos:line="454" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="454" pos:column="29">"x"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="454" pos:column="34">aliases</name><index pos:line="454" pos:column="41">[<expr><lit:literal type="number" pos:line="454" pos:column="42">0</lit:literal></expr>]</index></name><op:operator pos:line="454" pos:column="44">.</op:operator><name pos:line="454" pos:column="45">AliasName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="455" pos:column="13">var</name></type> <name pos:line="455" pos:column="17">imports</name> <init pos:line="455" pos:column="25">= <expr><call><name><name pos:line="455" pos:column="27">foo</name><op:operator pos:line="455" pos:column="30">.</op:operator><name pos:line="455" pos:column="31">GetImports</name></name><argument_list pos:line="455" pos:column="41">()</argument_list></call><op:operator pos:line="455" pos:column="43">.</op:operator><call><name pos:line="455" pos:column="44">ToList</name><argument_list pos:line="455" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="456" pos:column="13">Assert</name><op:operator pos:line="456" pos:column="19">.</op:operator><name pos:line="456" pos:column="20">AreEqual</name></name><argument_list pos:line="456" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="456" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="456" pos:column="32">imports</name><op:operator pos:line="456" pos:column="39">.</op:operator><name pos:line="456" pos:column="40">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="457" pos:column="13">Assert</name><op:operator pos:line="457" pos:column="19">.</op:operator><name pos:line="457" pos:column="20">AreEqual</name></name><argument_list pos:line="457" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="457" pos:column="29">"x . y . z"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="457" pos:column="42">imports</name><index pos:line="457" pos:column="49">[<expr><lit:literal type="number" pos:line="457" pos:column="50">0</lit:literal></expr>]</index></name><op:operator pos:line="457" pos:column="52">.</op:operator><call><name><name pos:line="457" pos:column="53">ImportedNamespace</name><op:operator pos:line="457" pos:column="70">.</op:operator><name pos:line="457" pos:column="71">ToString</name></name><argument_list pos:line="457" pos:column="79">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="459" pos:column="13">var</name></type> <name pos:line="459" pos:column="17">baz</name> <init pos:line="459" pos:column="21">= <expr><call><name><name pos:line="459" pos:column="23">globalScope</name><op:operator pos:line="459" pos:column="34">.</op:operator><name><name pos:line="459" pos:column="35">GetDescendants</name><argument_list pos:line="459" pos:column="49">&lt;<argument><name pos:line="459" pos:column="50">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="459" pos:column="65">()</argument_list></call><op:operator pos:line="459" pos:column="67">.</op:operator><call><name pos:line="459" pos:column="68">FirstOrDefault</name><argument_list pos:line="459" pos:column="82">(<argument><expr><lambda><name pos:line="459" pos:column="83">ns</name> <op:operator pos:line="459" pos:column="86">=&gt;</op:operator> <name><name pos:line="459" pos:column="89">ns</name><op:operator pos:line="459" pos:column="91">.</op:operator><name pos:line="459" pos:column="92">Name</name></name> <op:operator pos:line="459" pos:column="97">==</op:operator> <lit:literal type="string" pos:line="459" pos:column="100">"baz"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="460" pos:column="13">Assert</name><op:operator pos:line="460" pos:column="19">.</op:operator><name pos:line="460" pos:column="20">IsNotNull</name></name><argument_list pos:line="460" pos:column="29">(<argument><expr><name pos:line="460" pos:column="30">baz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="461" pos:column="13">var</name></type> <name pos:line="461" pos:column="17">bazUse</name> <init pos:line="461" pos:column="24">= <expr><name><name pos:line="461" pos:column="26">aliases</name><index pos:line="461" pos:column="33">[<expr><lit:literal type="number" pos:line="461" pos:column="34">0</lit:literal></expr>]</index></name><op:operator pos:line="461" pos:column="36">.</op:operator><call><name><name pos:line="461" pos:column="37">Target</name><op:operator pos:line="461" pos:column="43">.</op:operator><name><name pos:line="461" pos:column="44">GetDescendantsAndSelf</name><argument_list pos:line="461" pos:column="65">&lt;<argument><name pos:line="461" pos:column="66">NameUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="461" pos:column="74">()</argument_list></call><op:operator pos:line="461" pos:column="76">.</op:operator><call><name pos:line="461" pos:column="77">LastOrDefault</name><argument_list pos:line="461" pos:column="90">(<argument><expr><lambda><name pos:line="461" pos:column="91">nu</name> <op:operator pos:line="461" pos:column="94">=&gt;</op:operator> <name><name pos:line="461" pos:column="97">nu</name><op:operator pos:line="461" pos:column="99">.</op:operator><name pos:line="461" pos:column="100">Name</name></name> <op:operator pos:line="461" pos:column="105">==</op:operator> <lit:literal type="string" pos:line="461" pos:column="108">"baz"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="462" pos:column="13">Assert</name><op:operator pos:line="462" pos:column="19">.</op:operator><name pos:line="462" pos:column="20">IsNotNull</name></name><argument_list pos:line="462" pos:column="29">(<argument><expr><name pos:line="462" pos:column="30">bazUse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="463" pos:column="13">Assert</name><op:operator pos:line="463" pos:column="19">.</op:operator><name pos:line="463" pos:column="20">AreSame</name></name><argument_list pos:line="463" pos:column="27">(<argument><expr><name pos:line="463" pos:column="28">baz</name></expr></argument>, <argument><expr><call><name><name pos:line="463" pos:column="33">bazUse</name><op:operator pos:line="463" pos:column="39">.</op:operator><name pos:line="463" pos:column="40">FindMatches</name></name><argument_list pos:line="463" pos:column="51">()</argument_list></call><op:operator pos:line="463" pos:column="53">.</op:operator><call><name pos:line="463" pos:column="54">First</name><argument_list pos:line="463" pos:column="59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="466" pos:column="9">[<expr><name pos:line="466" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="467" pos:column="9">public</specifier> <name pos:line="467" pos:column="16">void</name></type> <name pos:line="467" pos:column="21">TestImport_NameResolution</name><parameter_list pos:line="467" pos:column="46">()</parameter_list> <block pos:line="467" pos:column="49">{
            <comment type="line" pos:line="468" pos:column="13">//A.cs</comment>
            <comment type="line" pos:line="469" pos:column="13">//using Foo.Bar;</comment>
            <comment type="line" pos:line="470" pos:column="13">//</comment>
            <comment type="line" pos:line="471" pos:column="13">//namespace A {</comment>
            <comment type="line" pos:line="472" pos:column="13">//  public class Robot {</comment>
            <comment type="line" pos:line="473" pos:column="13">//    public Baz GetThingy() { return new Baz(); }</comment>
            <comment type="line" pos:line="474" pos:column="13">//  }</comment>
            <comment type="line" pos:line="475" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="476" pos:column="13">string</name></type> <name pos:line="476" pos:column="20">xmlA</name> <init pos:line="476" pos:column="25">= <expr><lit:literal type="string" pos:line="476" pos:column="27">@"&lt;using pos:line=""1"" pos:column="&gt;using &lt;name&gt;&lt;name pos:line=""1"" pos:column="&gt;Foo&lt;/name&gt;&lt;op:operator pos:line=""1"" pos:column=""&gt;.&lt;/op:operator&gt;&lt;name pos:line=""1"" pos:column=""&gt;Bar&lt;/name&gt;&lt;/name&gt;;&lt;/using&gt;

&lt;namespace pos:line=""3"" pos:column="&gt;namespace &lt;name pos:line=""3"" pos:column=""&gt;A&lt;/name&gt; &lt;block pos:line=""3"" pos:column=""&gt;{
  &lt;class&gt;&lt;specifier pos:line=""4"" pos:column="&gt;public&lt;/specifier&gt; class &lt;name pos:line=""4"" pos:column=""&gt;Robot&lt;/name&gt; &lt;block pos:line=""4"" pos:column=""&gt;{
    &lt;function&gt;&lt;type&gt;&lt;specifier pos:line=""5"" pos:column="&gt;public&lt;/specifier&gt; &lt;name pos:line=""5"" pos:column=""&gt;Baz&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""5"" pos:column=""&gt;GetThingy&lt;/name&gt;&lt;parameter_list pos:line=""5"" pos:column=""&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""5"" pos:column=""&gt;{ &lt;return pos:line=""5"" pos:column=""&gt;return &lt;expr&gt;&lt;op:operator pos:line=""5"" pos:column=""&gt;new&lt;/op:operator&gt; &lt;call&gt;&lt;name pos:line=""5"" pos:column=""&gt;Baz&lt;/name&gt;&lt;argument_list pos:line=""5"" pos:column=""&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/return&gt; }&lt;/block&gt;&lt;/function&gt;
  }&lt;/block&gt;&lt;/class&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="483" pos:column="13">XElement</name></type> <name pos:line="483" pos:column="22">xmlElementA</name> <init pos:line="483" pos:column="34">= <expr><call><name><name pos:line="483" pos:column="36">fileSetup</name><op:operator pos:line="483" pos:column="45">.</op:operator><name pos:line="483" pos:column="46">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="483" pos:column="70">(<argument><expr><name pos:line="483" pos:column="71">xmlA</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="483" pos:column="77">"A.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="484" pos:column="13">//B.cs</comment>
            <comment type="line" pos:line="485" pos:column="13">//namespace Foo.Bar {</comment>
            <comment type="line" pos:line="486" pos:column="13">//  public class Baz {</comment>
            <comment type="line" pos:line="487" pos:column="13">//    public Baz() { }</comment>
            <comment type="line" pos:line="488" pos:column="13">//  }</comment>
            <comment type="line" pos:line="489" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="490" pos:column="13">string</name></type> <name pos:line="490" pos:column="20">xmlB</name> <init pos:line="490" pos:column="25">= <expr><lit:literal type="string" pos:line="490" pos:column="27">@"&lt;namespace pos:line=""1"" pos:column="&gt;namespace &lt;name&gt;&lt;name pos:line=""1"" pos:column=""&gt;Foo&lt;/name&gt;&lt;op:operator pos:line=""1"" pos:column=""&gt;.&lt;/op:operator&gt;&lt;name pos:line=""1"" pos:column=""&gt;Bar&lt;/name&gt;&lt;/name&gt; &lt;block pos:line=""1"" pos:column=""&gt;{
  &lt;class&gt;&lt;specifier pos:line=""2"" pos:column="&gt;public&lt;/specifier&gt; class &lt;name pos:line=""2"" pos:column=""&gt;Baz&lt;/name&gt; &lt;block pos:line=""2"" pos:column=""&gt;{
    &lt;constructor&gt;&lt;specifier pos:line=""3"" pos:column="&gt;public&lt;/specifier&gt; &lt;name pos:line=""3"" pos:column=""&gt;Baz&lt;/name&gt;&lt;parameter_list pos:line=""3"" pos:column=""&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""3"" pos:column=""&gt;{ }&lt;/block&gt;&lt;/constructor&gt;
  }&lt;/block&gt;&lt;/class&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="495" pos:column="13">XElement</name></type> <name pos:line="495" pos:column="22">xmlElementB</name> <init pos:line="495" pos:column="34">= <expr><call><name><name pos:line="495" pos:column="36">fileSetup</name><op:operator pos:line="495" pos:column="45">.</op:operator><name pos:line="495" pos:column="46">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="495" pos:column="70">(<argument><expr><name pos:line="495" pos:column="71">xmlB</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="495" pos:column="77">"B.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <decl_stmt><decl><type><name pos:line="497" pos:column="13">var</name></type> <name pos:line="497" pos:column="17">scopeA</name> <init pos:line="497" pos:column="24">= <expr><call><name><name pos:line="497" pos:column="26">codeParser</name><op:operator pos:line="497" pos:column="36">.</op:operator><name pos:line="497" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="497" pos:column="50">(<argument><expr><name pos:line="497" pos:column="51">xmlElementA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="498" pos:column="13">var</name></type> <name pos:line="498" pos:column="17">scopeB</name> <init pos:line="498" pos:column="24">= <expr><call><name><name pos:line="498" pos:column="26">codeParser</name><op:operator pos:line="498" pos:column="36">.</op:operator><name pos:line="498" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="498" pos:column="50">(<argument><expr><name pos:line="498" pos:column="51">xmlElementB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="499" pos:column="13">var</name></type> <name pos:line="499" pos:column="17">globalScope</name> <init pos:line="499" pos:column="29">= <expr><call><name><name pos:line="499" pos:column="31">scopeA</name><op:operator pos:line="499" pos:column="37">.</op:operator><name pos:line="499" pos:column="38">Merge</name></name><argument_list pos:line="499" pos:column="43">(<argument><expr><name pos:line="499" pos:column="44">scopeB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="500" pos:column="13">Assert</name><op:operator pos:line="500" pos:column="19">.</op:operator><name pos:line="500" pos:column="20">AreEqual</name></name><argument_list pos:line="500" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="500" pos:column="29">3</lit:literal></expr></argument>, <argument><expr><name><name pos:line="500" pos:column="32">globalScope</name><op:operator pos:line="500" pos:column="43">.</op:operator><name pos:line="500" pos:column="44">ChildStatements</name><op:operator pos:line="500" pos:column="59">.</op:operator><name pos:line="500" pos:column="60">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="502" pos:column="13">var</name></type> <name pos:line="502" pos:column="17">baz</name> <init pos:line="502" pos:column="21">= <expr><call><name><name pos:line="502" pos:column="23">globalScope</name><op:operator pos:line="502" pos:column="34">.</op:operator><name><name pos:line="502" pos:column="35">GetDescendants</name><argument_list pos:line="502" pos:column="49">&lt;<argument><name pos:line="502" pos:column="50">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="502" pos:column="65">()</argument_list></call><op:operator pos:line="502" pos:column="67">.</op:operator><call><name pos:line="502" pos:column="68">FirstOrDefault</name><argument_list pos:line="502" pos:column="82">(<argument><expr><lambda><name pos:line="502" pos:column="83">t</name> <op:operator pos:line="502" pos:column="85">=&gt;</op:operator> <name><name pos:line="502" pos:column="88">t</name><op:operator pos:line="502" pos:column="89">.</op:operator><name pos:line="502" pos:column="90">Name</name></name> <op:operator pos:line="502" pos:column="95">==</op:operator> <lit:literal type="string" pos:line="502" pos:column="98">"Baz"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="503" pos:column="13">Assert</name><op:operator pos:line="503" pos:column="19">.</op:operator><name pos:line="503" pos:column="20">IsNotNull</name></name><argument_list pos:line="503" pos:column="29">(<argument><expr><name pos:line="503" pos:column="30">baz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="505" pos:column="13">var</name></type> <name pos:line="505" pos:column="17">thingy</name> <init pos:line="505" pos:column="24">= <expr><call><name><name pos:line="505" pos:column="26">globalScope</name><op:operator pos:line="505" pos:column="37">.</op:operator><name><name pos:line="505" pos:column="38">GetDescendants</name><argument_list pos:line="505" pos:column="52">&lt;<argument><name pos:line="505" pos:column="53">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="505" pos:column="70">()</argument_list></call><op:operator pos:line="505" pos:column="72">.</op:operator><call><name pos:line="505" pos:column="73">FirstOrDefault</name><argument_list pos:line="505" pos:column="87">(<argument><expr><lambda><name pos:line="505" pos:column="88">m</name> <op:operator pos:line="505" pos:column="90">=&gt;</op:operator> <name><name pos:line="505" pos:column="93">m</name><op:operator pos:line="505" pos:column="94">.</op:operator><name pos:line="505" pos:column="95">Name</name></name> <op:operator pos:line="505" pos:column="100">==</op:operator> <lit:literal type="string" pos:line="505" pos:column="103">"GetThingy"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="506" pos:column="13">Assert</name><op:operator pos:line="506" pos:column="19">.</op:operator><name pos:line="506" pos:column="20">IsNotNull</name></name><argument_list pos:line="506" pos:column="29">(<argument><expr><name pos:line="506" pos:column="30">thingy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="507" pos:column="13">var</name></type> <name pos:line="507" pos:column="17">thingyTypes</name> <init pos:line="507" pos:column="29">= <expr><call><name><name pos:line="507" pos:column="31">thingy</name><op:operator pos:line="507" pos:column="37">.</op:operator><name pos:line="507" pos:column="38">ReturnType</name><op:operator pos:line="507" pos:column="48">.</op:operator><name pos:line="507" pos:column="49">FindMatches</name></name><argument_list pos:line="507" pos:column="60">()</argument_list></call><op:operator pos:line="507" pos:column="62">.</op:operator><call><name pos:line="507" pos:column="63">ToList</name><argument_list pos:line="507" pos:column="69">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="508" pos:column="13">Assert</name><op:operator pos:line="508" pos:column="19">.</op:operator><name pos:line="508" pos:column="20">AreEqual</name></name><argument_list pos:line="508" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="508" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="508" pos:column="32">thingyTypes</name><op:operator pos:line="508" pos:column="43">.</op:operator><name pos:line="508" pos:column="44">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="509" pos:column="13">Assert</name><op:operator pos:line="509" pos:column="19">.</op:operator><name pos:line="509" pos:column="20">AreSame</name></name><argument_list pos:line="509" pos:column="27">(<argument><expr><name pos:line="509" pos:column="28">baz</name></expr></argument>, <argument><expr><name><name pos:line="509" pos:column="33">thingyTypes</name><index pos:line="509" pos:column="44">[<expr><lit:literal type="number" pos:line="509" pos:column="45">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="511" pos:column="13">var</name></type> <name pos:line="511" pos:column="17">bazDef</name> <init pos:line="511" pos:column="24">= <expr><call><name><name pos:line="511" pos:column="26">baz</name><op:operator pos:line="511" pos:column="29">.</op:operator><name><name pos:line="511" pos:column="30">GetNamedChildren</name><argument_list pos:line="511" pos:column="46">&lt;<argument><name pos:line="511" pos:column="47">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="511" pos:column="64">(<argument><expr><lit:literal type="string" pos:line="511" pos:column="65">"Baz"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="511" pos:column="71">.</op:operator><call><name pos:line="511" pos:column="72">First</name><argument_list pos:line="511" pos:column="77">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="512" pos:column="13">var</name></type> <name pos:line="512" pos:column="17">bazCall</name> <init pos:line="512" pos:column="25">= <expr><name><name pos:line="512" pos:column="27">thingy</name><op:operator pos:line="512" pos:column="33">.</op:operator><name pos:line="512" pos:column="34">ChildStatements</name><index pos:line="512" pos:column="49">[<expr><lit:literal type="number" pos:line="512" pos:column="50">0</lit:literal></expr>]</index></name><op:operator pos:line="512" pos:column="52">.</op:operator><call><name><name pos:line="512" pos:column="53">Content</name><op:operator pos:line="512" pos:column="60">.</op:operator><name><name pos:line="512" pos:column="61">GetDescendantsAndSelf</name><argument_list pos:line="512" pos:column="82">&lt;<argument><name pos:line="512" pos:column="83">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="512" pos:column="94">()</argument_list></call><op:operator pos:line="512" pos:column="96">.</op:operator><call><name pos:line="512" pos:column="97">FirstOrDefault</name><argument_list pos:line="512" pos:column="111">(<argument><expr><lambda><name pos:line="512" pos:column="112">mc</name> <op:operator pos:line="512" pos:column="115">=&gt;</op:operator> <name><name pos:line="512" pos:column="118">mc</name><op:operator pos:line="512" pos:column="120">.</op:operator><name pos:line="512" pos:column="121">Name</name></name> <op:operator pos:line="512" pos:column="126">==</op:operator> <lit:literal type="string" pos:line="512" pos:column="129">"Baz"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="513" pos:column="13">Assert</name><op:operator pos:line="513" pos:column="19">.</op:operator><name pos:line="513" pos:column="20">IsNotNull</name></name><argument_list pos:line="513" pos:column="29">(<argument><expr><name pos:line="513" pos:column="30">bazCall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="514" pos:column="13">Assert</name><op:operator pos:line="514" pos:column="19">.</op:operator><name pos:line="514" pos:column="20">AreSame</name></name><argument_list pos:line="514" pos:column="27">(<argument><expr><name pos:line="514" pos:column="28">bazDef</name></expr></argument>, <argument><expr><call><name><name pos:line="514" pos:column="36">bazCall</name><op:operator pos:line="514" pos:column="43">.</op:operator><name pos:line="514" pos:column="44">FindMatches</name></name><argument_list pos:line="514" pos:column="55">()</argument_list></call><op:operator pos:line="514" pos:column="57">.</op:operator><call><name pos:line="514" pos:column="58">FirstOrDefault</name><argument_list pos:line="514" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="517" pos:column="9">[<expr><name pos:line="517" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="518" pos:column="9">public</specifier> <name pos:line="518" pos:column="16">void</name></type> <name pos:line="518" pos:column="21">TestAlias_NameResolution</name><parameter_list pos:line="518" pos:column="45">()</parameter_list> <block pos:line="518" pos:column="48">{
            <comment type="line" pos:line="519" pos:column="13">//A.cs</comment>
            <comment type="line" pos:line="520" pos:column="13">//namespace Foo.Bar {</comment>
            <comment type="line" pos:line="521" pos:column="13">//  public class Baz {</comment>
            <comment type="line" pos:line="522" pos:column="13">//    public static void DoTheThing() { };</comment>
            <comment type="line" pos:line="523" pos:column="13">//  }</comment>
            <comment type="line" pos:line="524" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="525" pos:column="13">string</name></type> <name pos:line="525" pos:column="20">xmlA</name> <init pos:line="525" pos:column="25">= <expr><lit:literal type="string" pos:line="525" pos:column="27">@"&lt;namespace pos:line=""1"" pos:column="&gt;namespace &lt;name&gt;&lt;name pos:line=""1"" pos:column=""&gt;Foo&lt;/name&gt;&lt;op:operator pos:line=""1"" pos:column=""&gt;.&lt;/op:operator&gt;&lt;name pos:line=""1"" pos:column=""&gt;Bar&lt;/name&gt;&lt;/name&gt; &lt;block pos:line=""1"" pos:column=""&gt;{
  &lt;class&gt;&lt;specifier pos:line=""2"" pos:column="&gt;public&lt;/specifier&gt; class &lt;name pos:line=""2"" pos:column=""&gt;Baz&lt;/name&gt; &lt;block pos:line=""2"" pos:column=""&gt;{
    &lt;function&gt;&lt;type&gt;&lt;specifier pos:line=""3"" pos:column="&gt;public&lt;/specifier&gt; &lt;specifier pos:line=""3"" pos:column=""&gt;static&lt;/specifier&gt; &lt;name pos:line=""3"" pos:column=""&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""3"" pos:column=""&gt;DoTheThing&lt;/name&gt;&lt;parameter_list pos:line=""3"" pos:column=""&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""3"" pos:column=""&gt;{ }&lt;/block&gt;&lt;/function&gt;&lt;empty_stmt pos:line=""3"" pos:column=""&gt;;&lt;/empty_stmt&gt;
  }&lt;/block&gt;&lt;/class&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="530" pos:column="13">XElement</name></type> <name pos:line="530" pos:column="22">xmlElementA</name> <init pos:line="530" pos:column="34">= <expr><call><name><name pos:line="530" pos:column="36">fileSetup</name><op:operator pos:line="530" pos:column="45">.</op:operator><name pos:line="530" pos:column="46">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="530" pos:column="70">(<argument><expr><name pos:line="530" pos:column="71">xmlA</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="530" pos:column="77">"A.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="531" pos:column="13">//B.cs</comment>
            <comment type="line" pos:line="532" pos:column="13">//using Baz = Foo.Bar.Baz;</comment>
            <comment type="line" pos:line="533" pos:column="13">//namespace A {</comment>
            <comment type="line" pos:line="534" pos:column="13">//  public class B {</comment>
            <comment type="line" pos:line="535" pos:column="13">//    public B() {</comment>
            <comment type="line" pos:line="536" pos:column="13">//      Baz.DoTheThing();</comment>
            <comment type="line" pos:line="537" pos:column="13">//    }</comment>
            <comment type="line" pos:line="538" pos:column="13">//  }</comment>
            <comment type="line" pos:line="539" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="540" pos:column="13">string</name></type> <name pos:line="540" pos:column="20">xmlB</name> <init pos:line="540" pos:column="25">= <expr><lit:literal type="string" pos:line="540" pos:column="27">@"&lt;using pos:line=""1"" pos:column="&gt;using &lt;name pos:line=""1"" pos:column="&gt;Baz&lt;/name&gt; &lt;init pos:line=""1"" pos:column=""&gt;= &lt;expr&gt;&lt;name&gt;&lt;name pos:line=""1"" pos:column=""&gt;Foo&lt;/name&gt;&lt;op:operator pos:line=""1"" pos:column=""&gt;.&lt;/op:operator&gt;&lt;name pos:line=""1"" pos:column=""&gt;Bar&lt;/name&gt;&lt;op:operator pos:line=""1"" pos:column=""&gt;.&lt;/op:operator&gt;&lt;name pos:line=""1"" pos:column=""&gt;Baz&lt;/name&gt;&lt;/name&gt;&lt;/expr&gt;&lt;/init&gt;;&lt;/using&gt;
&lt;namespace pos:line=""2"" pos:column="&gt;namespace &lt;name pos:line=""2"" pos:column=""&gt;A&lt;/name&gt; &lt;block pos:line=""2"" pos:column=""&gt;{
  &lt;class&gt;&lt;specifier pos:line=""3"" pos:column="&gt;public&lt;/specifier&gt; class &lt;name pos:line=""3"" pos:column=""&gt;B&lt;/name&gt; &lt;block pos:line=""3"" pos:column=""&gt;{
    &lt;constructor&gt;&lt;specifier pos:line=""4"" pos:column="&gt;public&lt;/specifier&gt; &lt;name pos:line=""4"" pos:column=""&gt;B&lt;/name&gt;&lt;parameter_list pos:line=""4"" pos:column=""&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""4"" pos:column=""&gt;{
      &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;&lt;name pos:line=""5"" pos:column="&gt;Baz&lt;/name&gt;&lt;op:operator pos:line=""5"" pos:column=""&gt;.&lt;/op:operator&gt;&lt;name pos:line=""5"" pos:column=""&gt;DoTheThing&lt;/name&gt;&lt;/name&gt;&lt;argument_list pos:line=""5"" pos:column=""&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
    }&lt;/block&gt;&lt;/constructor&gt;
  }&lt;/block&gt;&lt;/class&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="548" pos:column="13">XElement</name></type> <name pos:line="548" pos:column="22">xmlElementB</name> <init pos:line="548" pos:column="34">= <expr><call><name><name pos:line="548" pos:column="36">fileSetup</name><op:operator pos:line="548" pos:column="45">.</op:operator><name pos:line="548" pos:column="46">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="548" pos:column="70">(<argument><expr><name pos:line="548" pos:column="71">xmlB</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="548" pos:column="77">"B.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <decl_stmt><decl><type><name pos:line="550" pos:column="13">var</name></type> <name pos:line="550" pos:column="17">scopeA</name> <init pos:line="550" pos:column="24">= <expr><call><name><name pos:line="550" pos:column="26">codeParser</name><op:operator pos:line="550" pos:column="36">.</op:operator><name pos:line="550" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="550" pos:column="50">(<argument><expr><name pos:line="550" pos:column="51">xmlElementA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="551" pos:column="13">var</name></type> <name pos:line="551" pos:column="17">scopeB</name> <init pos:line="551" pos:column="24">= <expr><call><name><name pos:line="551" pos:column="26">codeParser</name><op:operator pos:line="551" pos:column="36">.</op:operator><name pos:line="551" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="551" pos:column="50">(<argument><expr><name pos:line="551" pos:column="51">xmlElementB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="552" pos:column="13">var</name></type> <name pos:line="552" pos:column="17">globalScope</name> <init pos:line="552" pos:column="29">= <expr><call><name><name pos:line="552" pos:column="31">scopeA</name><op:operator pos:line="552" pos:column="37">.</op:operator><name pos:line="552" pos:column="38">Merge</name></name><argument_list pos:line="552" pos:column="43">(<argument><expr><name pos:line="552" pos:column="44">scopeB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="553" pos:column="13">Assert</name><op:operator pos:line="553" pos:column="19">.</op:operator><name pos:line="553" pos:column="20">AreEqual</name></name><argument_list pos:line="553" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="553" pos:column="29">3</lit:literal></expr></argument>, <argument><expr><name><name pos:line="553" pos:column="32">globalScope</name><op:operator pos:line="553" pos:column="43">.</op:operator><name pos:line="553" pos:column="44">ChildStatements</name><op:operator pos:line="553" pos:column="59">.</op:operator><name pos:line="553" pos:column="60">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="555" pos:column="13">var</name></type> <name pos:line="555" pos:column="17">thingDef</name> <init pos:line="555" pos:column="26">= <expr><call><name><name pos:line="555" pos:column="28">globalScope</name><op:operator pos:line="555" pos:column="39">.</op:operator><name><name pos:line="555" pos:column="40">GetDescendants</name><argument_list pos:line="555" pos:column="54">&lt;<argument><name pos:line="555" pos:column="55">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="555" pos:column="72">()</argument_list></call><op:operator pos:line="555" pos:column="74">.</op:operator><call><name pos:line="555" pos:column="75">FirstOrDefault</name><argument_list pos:line="555" pos:column="89">(<argument><expr><lambda><name pos:line="555" pos:column="90">md</name> <op:operator pos:line="555" pos:column="93">=&gt;</op:operator> <name><name pos:line="555" pos:column="96">md</name><op:operator pos:line="555" pos:column="98">.</op:operator><name pos:line="555" pos:column="99">Name</name></name> <op:operator pos:line="555" pos:column="104">==</op:operator> <lit:literal type="string" pos:line="555" pos:column="107">"DoTheThing"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="556" pos:column="13">Assert</name><op:operator pos:line="556" pos:column="19">.</op:operator><name pos:line="556" pos:column="20">IsNotNull</name></name><argument_list pos:line="556" pos:column="29">(<argument><expr><name pos:line="556" pos:column="30">thingDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="557" pos:column="13">Assert</name><op:operator pos:line="557" pos:column="19">.</op:operator><name pos:line="557" pos:column="20">AreEqual</name></name><argument_list pos:line="557" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="557" pos:column="29">"Baz"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="557" pos:column="36">(</op:operator><op:operator pos:line="557" pos:column="37">(</op:operator><name pos:line="557" pos:column="38">TypeDefinition</name><op:operator pos:line="557" pos:column="52">)</op:operator><name><name pos:line="557" pos:column="53">thingDef</name><op:operator pos:line="557" pos:column="61">.</op:operator><name pos:line="557" pos:column="62">ParentStatement</name></name><op:operator pos:line="557" pos:column="77">)</op:operator><op:operator pos:line="557" pos:column="78">.</op:operator><name pos:line="557" pos:column="79">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="559" pos:column="13">var</name></type> <name pos:line="559" pos:column="17">bDef</name> <init pos:line="559" pos:column="22">= <expr><call><name><name pos:line="559" pos:column="24">globalScope</name><op:operator pos:line="559" pos:column="35">.</op:operator><name><name pos:line="559" pos:column="36">GetDescendants</name><argument_list pos:line="559" pos:column="50">&lt;<argument><name pos:line="559" pos:column="51">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="559" pos:column="68">()</argument_list></call><op:operator pos:line="559" pos:column="70">.</op:operator><call><name pos:line="559" pos:column="71">FirstOrDefault</name><argument_list pos:line="559" pos:column="85">(<argument><expr><lambda><name pos:line="559" pos:column="86">md</name> <op:operator pos:line="559" pos:column="89">=&gt;</op:operator> <name><name pos:line="559" pos:column="92">md</name><op:operator pos:line="559" pos:column="94">.</op:operator><name pos:line="559" pos:column="95">Name</name></name> <op:operator pos:line="559" pos:column="100">==</op:operator> <lit:literal type="string" pos:line="559" pos:column="103">"B"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="560" pos:column="13">Assert</name><op:operator pos:line="560" pos:column="19">.</op:operator><name pos:line="560" pos:column="20">IsNotNull</name></name><argument_list pos:line="560" pos:column="29">(<argument><expr><name pos:line="560" pos:column="30">bDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="561" pos:column="13">Assert</name><op:operator pos:line="561" pos:column="19">.</op:operator><name pos:line="561" pos:column="20">AreEqual</name></name><argument_list pos:line="561" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="561" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="561" pos:column="32">bDef</name><op:operator pos:line="561" pos:column="36">.</op:operator><name pos:line="561" pos:column="37">ChildStatements</name><op:operator pos:line="561" pos:column="52">.</op:operator><name pos:line="561" pos:column="53">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="562" pos:column="13">var</name></type> <name pos:line="562" pos:column="17">thingCall</name> <init pos:line="562" pos:column="27">= <expr><name><name pos:line="562" pos:column="29">bDef</name><op:operator pos:line="562" pos:column="33">.</op:operator><name pos:line="562" pos:column="34">ChildStatements</name><index pos:line="562" pos:column="49">[<expr><lit:literal type="number" pos:line="562" pos:column="50">0</lit:literal></expr>]</index></name><op:operator pos:line="562" pos:column="52">.</op:operator><call><name><name pos:line="562" pos:column="53">Content</name><op:operator pos:line="562" pos:column="60">.</op:operator><name><name pos:line="562" pos:column="61">GetDescendantsAndSelf</name><argument_list pos:line="562" pos:column="82">&lt;<argument><name pos:line="562" pos:column="83">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="562" pos:column="94">()</argument_list></call><op:operator pos:line="562" pos:column="96">.</op:operator><call><name pos:line="562" pos:column="97">FirstOrDefault</name><argument_list pos:line="562" pos:column="111">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="563" pos:column="13">Assert</name><op:operator pos:line="563" pos:column="19">.</op:operator><name pos:line="563" pos:column="20">IsNotNull</name></name><argument_list pos:line="563" pos:column="29">(<argument><expr><name pos:line="563" pos:column="30">thingCall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="564" pos:column="13">Assert</name><op:operator pos:line="564" pos:column="19">.</op:operator><name pos:line="564" pos:column="20">AreSame</name></name><argument_list pos:line="564" pos:column="27">(<argument><expr><name pos:line="564" pos:column="28">thingDef</name></expr></argument>, <argument><expr><call><name><name pos:line="564" pos:column="38">thingCall</name><op:operator pos:line="564" pos:column="47">.</op:operator><name pos:line="564" pos:column="48">FindMatches</name></name><argument_list pos:line="564" pos:column="59">()</argument_list></call><op:operator pos:line="564" pos:column="61">.</op:operator><call><name pos:line="564" pos:column="62">First</name><argument_list pos:line="564" pos:column="67">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="567" pos:column="9">[<expr><name pos:line="567" pos:column="10">Test</name></expr>]</attribute>
        <attribute pos:line="568" pos:column="9">[<expr><call><name pos:line="568" pos:column="10">Category</name><argument_list pos:line="568" pos:column="18">(<argument><expr><lit:literal type="string" pos:line="568" pos:column="19">"SrcMLUpdate"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="569" pos:column="9">public</specifier> <name pos:line="569" pos:column="16">void</name></type> <name pos:line="569" pos:column="21">TestUsingBlock_SingleDecl</name><parameter_list pos:line="569" pos:column="46">()</parameter_list> <block pos:line="569" pos:column="49">{
            <comment type="line" pos:line="570" pos:column="13">//using(var f = File.Open("out.txt")) {</comment>
            <comment type="line" pos:line="571" pos:column="13">//  ;</comment>
            <comment type="line" pos:line="572" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="573" pos:column="13">string</name></type> <name pos:line="573" pos:column="20">xml</name> <init pos:line="573" pos:column="24">= <expr><lit:literal type="string" pos:line="573" pos:column="26">@"&lt;using&gt;using(&lt;decl&gt;&lt;type&gt;&lt;name&gt;var&lt;/name&gt;&lt;/type&gt; &lt;name&gt;f&lt;/name&gt; &lt;init&gt;= &lt;expr&gt;&lt;call&gt;&lt;name&gt;&lt;name&gt;File&lt;/name&gt;&lt;op:operator&gt;.&lt;/op:operator&gt;&lt;name&gt;Open&lt;/name&gt;&lt;/name&gt;&lt;argument_list&gt;(&lt;argument&gt;&lt;expr&gt;&lt;lit:literal type=""string&gt;""out.txt&lt;/lit:literal&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;&lt;/init&gt;&lt;/decl&gt;) &lt;block&gt;{
  &lt;empty_stmt&gt;;&lt;/empty_stmt&gt;
}&lt;/block&gt;&lt;/using&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="576" pos:column="13">XElement</name></type> <name pos:line="576" pos:column="22">xmlElement</name> <init pos:line="576" pos:column="33">= <expr><call><name><name pos:line="576" pos:column="35">fileSetup</name><op:operator pos:line="576" pos:column="44">.</op:operator><name pos:line="576" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="576" pos:column="69">(<argument><expr><name pos:line="576" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="576" pos:column="75">"A.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="578" pos:column="13">var</name></type> <name pos:line="578" pos:column="17">globalScope</name> <init pos:line="578" pos:column="29">= <expr><call><name><name pos:line="578" pos:column="31">codeParser</name><op:operator pos:line="578" pos:column="41">.</op:operator><name pos:line="578" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="578" pos:column="55">(<argument><expr><name pos:line="578" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="579" pos:column="13">Assert</name><op:operator pos:line="579" pos:column="19">.</op:operator><name pos:line="579" pos:column="20">AreEqual</name></name><argument_list pos:line="579" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="579" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="579" pos:column="32">globalScope</name><op:operator pos:line="579" pos:column="43">.</op:operator><name pos:line="579" pos:column="44">ChildStatements</name><op:operator pos:line="579" pos:column="59">.</op:operator><name pos:line="579" pos:column="60">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="581" pos:column="13">var</name></type> <name pos:line="581" pos:column="17">actual</name> <init pos:line="581" pos:column="24">= <expr><name><name pos:line="581" pos:column="26">globalScope</name><op:operator pos:line="581" pos:column="37">.</op:operator><name pos:line="581" pos:column="38">ChildStatements</name><index pos:line="581" pos:column="53">[<expr><lit:literal type="number" pos:line="581" pos:column="54">0</lit:literal></expr>]</index></name> <op:operator pos:line="581" pos:column="57">as</op:operator> <name pos:line="581" pos:column="60">UsingBlockStatement</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="582" pos:column="13">Assert</name><op:operator pos:line="582" pos:column="19">.</op:operator><name pos:line="582" pos:column="20">IsNotNull</name></name><argument_list pos:line="582" pos:column="29">(<argument><expr><name pos:line="582" pos:column="30">actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="583" pos:column="13">Assert</name><op:operator pos:line="583" pos:column="19">.</op:operator><name pos:line="583" pos:column="20">AreEqual</name></name><argument_list pos:line="583" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="583" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="583" pos:column="32">actual</name><op:operator pos:line="583" pos:column="38">.</op:operator><name pos:line="583" pos:column="39">ChildStatements</name><op:operator pos:line="583" pos:column="54">.</op:operator><name pos:line="583" pos:column="55">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="584" pos:column="13">Assert</name><op:operator pos:line="584" pos:column="19">.</op:operator><name pos:line="584" pos:column="20">IsNotNull</name></name><argument_list pos:line="584" pos:column="29">(<argument><expr><name><name pos:line="584" pos:column="30">actual</name><op:operator pos:line="584" pos:column="36">.</op:operator><name pos:line="584" pos:column="37">Initializer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="585" pos:column="13">var</name></type> <name pos:line="585" pos:column="17">decls</name> <init pos:line="585" pos:column="23">= <expr><call><name><name pos:line="585" pos:column="25">actual</name><op:operator pos:line="585" pos:column="31">.</op:operator><name pos:line="585" pos:column="32">Initializer</name><op:operator pos:line="585" pos:column="43">.</op:operator><name><name pos:line="585" pos:column="44">GetDescendantsAndSelf</name><argument_list pos:line="585" pos:column="65">&lt;<argument><name pos:line="585" pos:column="66">VariableDeclaration</name></argument>&gt;</argument_list></name></name><argument_list pos:line="585" pos:column="86">()</argument_list></call><op:operator pos:line="585" pos:column="88">.</op:operator><call><name pos:line="585" pos:column="89">ToList</name><argument_list pos:line="585" pos:column="95">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="586" pos:column="13">Assert</name><op:operator pos:line="586" pos:column="19">.</op:operator><name pos:line="586" pos:column="20">AreEqual</name></name><argument_list pos:line="586" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="586" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="586" pos:column="32">decls</name><op:operator pos:line="586" pos:column="37">.</op:operator><name pos:line="586" pos:column="38">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="587" pos:column="13">Assert</name><op:operator pos:line="587" pos:column="19">.</op:operator><name pos:line="587" pos:column="20">AreEqual</name></name><argument_list pos:line="587" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="587" pos:column="29">"f"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="587" pos:column="34">decls</name><index pos:line="587" pos:column="39">[<expr><lit:literal type="number" pos:line="587" pos:column="40">0</lit:literal></expr>]</index></name><op:operator pos:line="587" pos:column="42">.</op:operator><name pos:line="587" pos:column="43">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="588" pos:column="13">Assert</name><op:operator pos:line="588" pos:column="19">.</op:operator><name pos:line="588" pos:column="20">AreEqual</name></name><argument_list pos:line="588" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="588" pos:column="29">"var"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="588" pos:column="36">decls</name><index pos:line="588" pos:column="41">[<expr><lit:literal type="number" pos:line="588" pos:column="42">0</lit:literal></expr>]</index></name><op:operator pos:line="588" pos:column="44">.</op:operator><name><name pos:line="588" pos:column="45">VariableType</name><op:operator pos:line="588" pos:column="57">.</op:operator><name pos:line="588" pos:column="58">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="589" pos:column="13">Assert</name><op:operator pos:line="589" pos:column="19">.</op:operator><name pos:line="589" pos:column="20">IsNotNull</name></name><argument_list pos:line="589" pos:column="29">(<argument><expr><name><name pos:line="589" pos:column="30">decls</name><index pos:line="589" pos:column="35">[<expr><lit:literal type="number" pos:line="589" pos:column="36">0</lit:literal></expr>]</index></name><op:operator pos:line="589" pos:column="38">.</op:operator><name pos:line="589" pos:column="39">Initializer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="592" pos:column="9">[<expr><name pos:line="592" pos:column="10">Test</name></expr>]</attribute>
        <attribute pos:line="593" pos:column="9">[<expr><call><name pos:line="593" pos:column="10">Category</name><argument_list pos:line="593" pos:column="18">(<argument><expr><lit:literal type="string" pos:line="593" pos:column="19">"SrcMLUpdate"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="594" pos:column="9">public</specifier> <name pos:line="594" pos:column="16">void</name></type> <name pos:line="594" pos:column="21">TestUsingBlock_MultipleDecl</name><parameter_list pos:line="594" pos:column="48">()</parameter_list> <block pos:line="594" pos:column="51">{
            <comment type="line" pos:line="595" pos:column="13">// using(Foo a = new Foo(1), b = new Foo(2)) { ; }</comment>
            <decl_stmt><decl><type><name pos:line="596" pos:column="13">string</name></type> <name pos:line="596" pos:column="20">xml</name> <init pos:line="596" pos:column="24">= <expr><lit:literal type="string" pos:line="596" pos:column="26">@"&lt;using&gt;using(&lt;decl&gt;&lt;type&gt;&lt;name&gt;Foo&lt;/name&gt;&lt;/type&gt; &lt;name&gt;a&lt;/name&gt; &lt;init&gt;= &lt;expr&gt;&lt;op:operator&gt;new&lt;/op:operator&gt; &lt;call&gt;&lt;name&gt;Foo&lt;/name&gt;&lt;argument_list&gt;(&lt;argument&gt;&lt;expr&gt;&lt;lit:literal type=""number&gt;1&lt;/lit:literal&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;&lt;/init&gt;&lt;op:operator&gt;,&lt;/op:operator&gt; &lt;name&gt;b&lt;/name&gt; &lt;init&gt;= &lt;expr&gt;&lt;op:operator&gt;new&lt;/op:operator&gt; &lt;call&gt;&lt;name&gt;Foo&lt;/name&gt;&lt;argument_list&gt;(&lt;argument&gt;&lt;expr&gt;&lt;lit:literal type=""number&gt;2&lt;/lit:literal&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;&lt;/init&gt;&lt;/decl&gt;) &lt;block&gt;{ &lt;empty_stmt&gt;;&lt;/empty_stmt&gt; }&lt;/block&gt;&lt;/using&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="597" pos:column="13">XElement</name></type> <name pos:line="597" pos:column="22">xmlElement</name> <init pos:line="597" pos:column="33">= <expr><call><name><name pos:line="597" pos:column="35">fileSetup</name><op:operator pos:line="597" pos:column="44">.</op:operator><name pos:line="597" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="597" pos:column="69">(<argument><expr><name pos:line="597" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="597" pos:column="75">"A.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="599" pos:column="13">var</name></type> <name pos:line="599" pos:column="17">globalScope</name> <init pos:line="599" pos:column="29">= <expr><call><name><name pos:line="599" pos:column="31">codeParser</name><op:operator pos:line="599" pos:column="41">.</op:operator><name pos:line="599" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="599" pos:column="55">(<argument><expr><name pos:line="599" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="600" pos:column="13">Assert</name><op:operator pos:line="600" pos:column="19">.</op:operator><name pos:line="600" pos:column="20">AreEqual</name></name><argument_list pos:line="600" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="600" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="600" pos:column="32">globalScope</name><op:operator pos:line="600" pos:column="43">.</op:operator><name pos:line="600" pos:column="44">ChildStatements</name><op:operator pos:line="600" pos:column="59">.</op:operator><name pos:line="600" pos:column="60">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="602" pos:column="13">var</name></type> <name pos:line="602" pos:column="17">actual</name> <init pos:line="602" pos:column="24">= <expr><name><name pos:line="602" pos:column="26">globalScope</name><op:operator pos:line="602" pos:column="37">.</op:operator><name pos:line="602" pos:column="38">ChildStatements</name><index pos:line="602" pos:column="53">[<expr><lit:literal type="number" pos:line="602" pos:column="54">0</lit:literal></expr>]</index></name> <op:operator pos:line="602" pos:column="57">as</op:operator> <name pos:line="602" pos:column="60">UsingBlockStatement</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="603" pos:column="13">Assert</name><op:operator pos:line="603" pos:column="19">.</op:operator><name pos:line="603" pos:column="20">IsNotNull</name></name><argument_list pos:line="603" pos:column="29">(<argument><expr><name pos:line="603" pos:column="30">actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="604" pos:column="13">Assert</name><op:operator pos:line="604" pos:column="19">.</op:operator><name pos:line="604" pos:column="20">AreEqual</name></name><argument_list pos:line="604" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="604" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="604" pos:column="32">actual</name><op:operator pos:line="604" pos:column="38">.</op:operator><name pos:line="604" pos:column="39">ChildStatements</name><op:operator pos:line="604" pos:column="54">.</op:operator><name pos:line="604" pos:column="55">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="605" pos:column="13">Assert</name><op:operator pos:line="605" pos:column="19">.</op:operator><name pos:line="605" pos:column="20">IsNotNull</name></name><argument_list pos:line="605" pos:column="29">(<argument><expr><name><name pos:line="605" pos:column="30">actual</name><op:operator pos:line="605" pos:column="36">.</op:operator><name pos:line="605" pos:column="37">Initializer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="606" pos:column="13">var</name></type> <name pos:line="606" pos:column="17">decls</name> <init pos:line="606" pos:column="23">= <expr><call><name><name pos:line="606" pos:column="25">actual</name><op:operator pos:line="606" pos:column="31">.</op:operator><name pos:line="606" pos:column="32">Initializer</name><op:operator pos:line="606" pos:column="43">.</op:operator><name><name pos:line="606" pos:column="44">GetDescendantsAndSelf</name><argument_list pos:line="606" pos:column="65">&lt;<argument><name pos:line="606" pos:column="66">VariableDeclaration</name></argument>&gt;</argument_list></name></name><argument_list pos:line="606" pos:column="86">()</argument_list></call><op:operator pos:line="606" pos:column="88">.</op:operator><call><name pos:line="606" pos:column="89">ToList</name><argument_list pos:line="606" pos:column="95">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="607" pos:column="13">Assert</name><op:operator pos:line="607" pos:column="19">.</op:operator><name pos:line="607" pos:column="20">AreEqual</name></name><argument_list pos:line="607" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="607" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="607" pos:column="32">decls</name><op:operator pos:line="607" pos:column="37">.</op:operator><name pos:line="607" pos:column="38">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="608" pos:column="13">Assert</name><op:operator pos:line="608" pos:column="19">.</op:operator><name pos:line="608" pos:column="20">AreEqual</name></name><argument_list pos:line="608" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="608" pos:column="29">"a"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="608" pos:column="34">decls</name><index pos:line="608" pos:column="39">[<expr><lit:literal type="number" pos:line="608" pos:column="40">0</lit:literal></expr>]</index></name><op:operator pos:line="608" pos:column="42">.</op:operator><name pos:line="608" pos:column="43">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="609" pos:column="13">Assert</name><op:operator pos:line="609" pos:column="19">.</op:operator><name pos:line="609" pos:column="20">AreEqual</name></name><argument_list pos:line="609" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="609" pos:column="29">"Foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="609" pos:column="36">decls</name><index pos:line="609" pos:column="41">[<expr><lit:literal type="number" pos:line="609" pos:column="42">0</lit:literal></expr>]</index></name><op:operator pos:line="609" pos:column="44">.</op:operator><name><name pos:line="609" pos:column="45">VariableType</name><op:operator pos:line="609" pos:column="57">.</op:operator><name pos:line="609" pos:column="58">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="610" pos:column="13">Assert</name><op:operator pos:line="610" pos:column="19">.</op:operator><name pos:line="610" pos:column="20">IsNotNull</name></name><argument_list pos:line="610" pos:column="29">(<argument><expr><name><name pos:line="610" pos:column="30">decls</name><index pos:line="610" pos:column="35">[<expr><lit:literal type="number" pos:line="610" pos:column="36">0</lit:literal></expr>]</index></name><op:operator pos:line="610" pos:column="38">.</op:operator><name pos:line="610" pos:column="39">Initializer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="611" pos:column="13">Assert</name><op:operator pos:line="611" pos:column="19">.</op:operator><name pos:line="611" pos:column="20">AreEqual</name></name><argument_list pos:line="611" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="611" pos:column="29">"b"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="611" pos:column="34">decls</name><index pos:line="611" pos:column="39">[<expr><lit:literal type="number" pos:line="611" pos:column="40">1</lit:literal></expr>]</index></name><op:operator pos:line="611" pos:column="42">.</op:operator><name pos:line="611" pos:column="43">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="612" pos:column="13">Assert</name><op:operator pos:line="612" pos:column="19">.</op:operator><name pos:line="612" pos:column="20">AreEqual</name></name><argument_list pos:line="612" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="612" pos:column="29">"Foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="612" pos:column="36">decls</name><index pos:line="612" pos:column="41">[<expr><lit:literal type="number" pos:line="612" pos:column="42">1</lit:literal></expr>]</index></name><op:operator pos:line="612" pos:column="44">.</op:operator><name><name pos:line="612" pos:column="45">VariableType</name><op:operator pos:line="612" pos:column="57">.</op:operator><name pos:line="612" pos:column="58">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="613" pos:column="13">Assert</name><op:operator pos:line="613" pos:column="19">.</op:operator><name pos:line="613" pos:column="20">IsNotNull</name></name><argument_list pos:line="613" pos:column="29">(<argument><expr><name><name pos:line="613" pos:column="30">decls</name><index pos:line="613" pos:column="35">[<expr><lit:literal type="number" pos:line="613" pos:column="36">1</lit:literal></expr>]</index></name><op:operator pos:line="613" pos:column="38">.</op:operator><name pos:line="613" pos:column="39">Initializer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="616" pos:column="9">[<expr><name pos:line="616" pos:column="10">Test</name></expr>]</attribute>
        <attribute pos:line="617" pos:column="9">[<expr><call><name pos:line="617" pos:column="10">Category</name><argument_list pos:line="617" pos:column="18">(<argument><expr><lit:literal type="string" pos:line="617" pos:column="19">"SrcMLUpdate"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="618" pos:column="9">public</specifier> <name pos:line="618" pos:column="16">void</name></type> <name pos:line="618" pos:column="21">TestUsingBlock_Expression</name><parameter_list pos:line="618" pos:column="46">()</parameter_list> <block pos:line="618" pos:column="49">{
            <comment type="line" pos:line="619" pos:column="13">//using(bar = new Foo()) { ; }</comment>
            <decl_stmt><decl><type><name pos:line="620" pos:column="13">string</name></type> <name pos:line="620" pos:column="20">xml</name> <init pos:line="620" pos:column="24">= <expr><lit:literal type="string" pos:line="620" pos:column="26">@"&lt;using&gt;using(&lt;expr&gt;&lt;name&gt;bar&lt;/name&gt; &lt;op:operator&gt;=&lt;/op:operator&gt; &lt;op:operator&gt;new&lt;/op:operator&gt; &lt;call&gt;&lt;name&gt;Foo&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;) &lt;block&gt;{ &lt;empty_stmt&gt;;&lt;/empty_stmt&gt; }&lt;/block&gt;&lt;/using&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="621" pos:column="13">XElement</name></type> <name pos:line="621" pos:column="22">xmlElement</name> <init pos:line="621" pos:column="33">= <expr><call><name><name pos:line="621" pos:column="35">fileSetup</name><op:operator pos:line="621" pos:column="44">.</op:operator><name pos:line="621" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="621" pos:column="69">(<argument><expr><name pos:line="621" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="621" pos:column="75">"A.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="623" pos:column="13">var</name></type> <name pos:line="623" pos:column="17">globalScope</name> <init pos:line="623" pos:column="29">= <expr><call><name><name pos:line="623" pos:column="31">codeParser</name><op:operator pos:line="623" pos:column="41">.</op:operator><name pos:line="623" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="623" pos:column="55">(<argument><expr><name pos:line="623" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="624" pos:column="13">Assert</name><op:operator pos:line="624" pos:column="19">.</op:operator><name pos:line="624" pos:column="20">AreEqual</name></name><argument_list pos:line="624" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="624" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="624" pos:column="32">globalScope</name><op:operator pos:line="624" pos:column="43">.</op:operator><name pos:line="624" pos:column="44">ChildStatements</name><op:operator pos:line="624" pos:column="59">.</op:operator><name pos:line="624" pos:column="60">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="626" pos:column="13">var</name></type> <name pos:line="626" pos:column="17">actual</name> <init pos:line="626" pos:column="24">= <expr><name><name pos:line="626" pos:column="26">globalScope</name><op:operator pos:line="626" pos:column="37">.</op:operator><name pos:line="626" pos:column="38">ChildStatements</name><index pos:line="626" pos:column="53">[<expr><lit:literal type="number" pos:line="626" pos:column="54">0</lit:literal></expr>]</index></name> <op:operator pos:line="626" pos:column="57">as</op:operator> <name pos:line="626" pos:column="60">UsingBlockStatement</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="627" pos:column="13">Assert</name><op:operator pos:line="627" pos:column="19">.</op:operator><name pos:line="627" pos:column="20">IsNotNull</name></name><argument_list pos:line="627" pos:column="29">(<argument><expr><name pos:line="627" pos:column="30">actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="628" pos:column="13">Assert</name><op:operator pos:line="628" pos:column="19">.</op:operator><name pos:line="628" pos:column="20">AreEqual</name></name><argument_list pos:line="628" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="628" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="628" pos:column="32">actual</name><op:operator pos:line="628" pos:column="38">.</op:operator><name pos:line="628" pos:column="39">ChildStatements</name><op:operator pos:line="628" pos:column="54">.</op:operator><name pos:line="628" pos:column="55">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="629" pos:column="13">var</name></type> <name pos:line="629" pos:column="17">init</name> <init pos:line="629" pos:column="22">= <expr><name><name pos:line="629" pos:column="24">actual</name><op:operator pos:line="629" pos:column="30">.</op:operator><name pos:line="629" pos:column="31">Initializer</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="630" pos:column="13">Assert</name><op:operator pos:line="630" pos:column="19">.</op:operator><name pos:line="630" pos:column="20">IsNotNull</name></name><argument_list pos:line="630" pos:column="29">(<argument><expr><name><name pos:line="630" pos:column="30">actual</name><op:operator pos:line="630" pos:column="36">.</op:operator><name pos:line="630" pos:column="37">Initializer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="631" pos:column="13">Assert</name><op:operator pos:line="631" pos:column="19">.</op:operator><name pos:line="631" pos:column="20">AreEqual</name></name><argument_list pos:line="631" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="631" pos:column="29">4</lit:literal></expr></argument>, <argument><expr><name><name pos:line="631" pos:column="32">init</name><op:operator pos:line="631" pos:column="36">.</op:operator><name pos:line="631" pos:column="37">Components</name><op:operator pos:line="631" pos:column="47">.</op:operator><name pos:line="631" pos:column="48">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="632" pos:column="13">var</name></type> <name pos:line="632" pos:column="17">bar</name> <init pos:line="632" pos:column="21">= <expr><name><name pos:line="632" pos:column="23">init</name><op:operator pos:line="632" pos:column="27">.</op:operator><name pos:line="632" pos:column="28">Components</name><index pos:line="632" pos:column="38">[<expr><lit:literal type="number" pos:line="632" pos:column="39">0</lit:literal></expr>]</index></name> <op:operator pos:line="632" pos:column="42">as</op:operator> <name pos:line="632" pos:column="45">NameUse</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="633" pos:column="13">Assert</name><op:operator pos:line="633" pos:column="19">.</op:operator><name pos:line="633" pos:column="20">IsNotNull</name></name><argument_list pos:line="633" pos:column="29">(<argument><expr><name pos:line="633" pos:column="30">bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="634" pos:column="13">Assert</name><op:operator pos:line="634" pos:column="19">.</op:operator><name pos:line="634" pos:column="20">AreEqual</name></name><argument_list pos:line="634" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="634" pos:column="29">"bar"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="634" pos:column="36">bar</name><op:operator pos:line="634" pos:column="39">.</op:operator><name pos:line="634" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="635" pos:column="13">var</name></type> <name pos:line="635" pos:column="17">equals</name> <init pos:line="635" pos:column="24">= <expr><name><name pos:line="635" pos:column="26">init</name><op:operator pos:line="635" pos:column="30">.</op:operator><name pos:line="635" pos:column="31">Components</name><index pos:line="635" pos:column="41">[<expr><lit:literal type="number" pos:line="635" pos:column="42">1</lit:literal></expr>]</index></name> <op:operator pos:line="635" pos:column="45">as</op:operator> <name pos:line="635" pos:column="48">OperatorUse</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="636" pos:column="13">Assert</name><op:operator pos:line="636" pos:column="19">.</op:operator><name pos:line="636" pos:column="20">IsNotNull</name></name><argument_list pos:line="636" pos:column="29">(<argument><expr><name pos:line="636" pos:column="30">equals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="637" pos:column="13">Assert</name><op:operator pos:line="637" pos:column="19">.</op:operator><name pos:line="637" pos:column="20">AreEqual</name></name><argument_list pos:line="637" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="637" pos:column="29">"="</lit:literal></expr></argument>, <argument><expr><name><name pos:line="637" pos:column="34">equals</name><op:operator pos:line="637" pos:column="40">.</op:operator><name pos:line="637" pos:column="41">Text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="638" pos:column="13">var</name></type> <name pos:line="638" pos:column="17">newOp</name> <init pos:line="638" pos:column="23">= <expr><name><name pos:line="638" pos:column="25">init</name><op:operator pos:line="638" pos:column="29">.</op:operator><name pos:line="638" pos:column="30">Components</name><index pos:line="638" pos:column="40">[<expr><lit:literal type="number" pos:line="638" pos:column="41">2</lit:literal></expr>]</index></name> <op:operator pos:line="638" pos:column="44">as</op:operator> <name pos:line="638" pos:column="47">OperatorUse</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="639" pos:column="13">Assert</name><op:operator pos:line="639" pos:column="19">.</op:operator><name pos:line="639" pos:column="20">IsNotNull</name></name><argument_list pos:line="639" pos:column="29">(<argument><expr><name pos:line="639" pos:column="30">newOp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="640" pos:column="13">Assert</name><op:operator pos:line="640" pos:column="19">.</op:operator><name pos:line="640" pos:column="20">AreEqual</name></name><argument_list pos:line="640" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="640" pos:column="29">"new"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="640" pos:column="36">newOp</name><op:operator pos:line="640" pos:column="41">.</op:operator><name pos:line="640" pos:column="42">Text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="641" pos:column="13">var</name></type> <name pos:line="641" pos:column="17">foo</name> <init pos:line="641" pos:column="21">= <expr><name><name pos:line="641" pos:column="23">init</name><op:operator pos:line="641" pos:column="27">.</op:operator><name pos:line="641" pos:column="28">Components</name><index pos:line="641" pos:column="38">[<expr><lit:literal type="number" pos:line="641" pos:column="39">3</lit:literal></expr>]</index></name> <op:operator pos:line="641" pos:column="42">as</op:operator> <name pos:line="641" pos:column="45">MethodCall</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="642" pos:column="13">Assert</name><op:operator pos:line="642" pos:column="19">.</op:operator><name pos:line="642" pos:column="20">IsNotNull</name></name><argument_list pos:line="642" pos:column="29">(<argument><expr><name pos:line="642" pos:column="30">foo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="643" pos:column="13">Assert</name><op:operator pos:line="643" pos:column="19">.</op:operator><name pos:line="643" pos:column="20">AreEqual</name></name><argument_list pos:line="643" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="643" pos:column="29">"Foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="643" pos:column="36">foo</name><op:operator pos:line="643" pos:column="39">.</op:operator><name pos:line="643" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="644" pos:column="13">Assert</name><op:operator pos:line="644" pos:column="19">.</op:operator><name pos:line="644" pos:column="20">AreEqual</name></name><argument_list pos:line="644" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="644" pos:column="29">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="644" pos:column="32">foo</name><op:operator pos:line="644" pos:column="35">.</op:operator><name pos:line="644" pos:column="36">Arguments</name><op:operator pos:line="644" pos:column="45">.</op:operator><name pos:line="644" pos:column="46">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="647" pos:column="9">[<expr><name pos:line="647" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="648" pos:column="9">public</specifier> <name pos:line="648" pos:column="16">void</name></type> <name pos:line="648" pos:column="21">TestCreateTypeDefinition_Class</name><parameter_list pos:line="648" pos:column="51">()</parameter_list> <block pos:line="648" pos:column="54">{
            <comment type="line" pos:line="649" pos:column="13">////Foo.cs</comment>
            <comment type="line" pos:line="650" pos:column="13">//public class Foo {</comment>
            <comment type="line" pos:line="651" pos:column="13">//    public int bar;</comment>
            <comment type="line" pos:line="652" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="653" pos:column="13">string</name></type> <name pos:line="653" pos:column="20">fooXml</name> <init pos:line="653" pos:column="27">= <expr><lit:literal type="string" pos:line="653" pos:column="29">@"&lt;class&gt;&lt;specifier&gt;public&lt;/specifier&gt; class &lt;name&gt;Foo&lt;/name&gt; &lt;block&gt;{
    &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;bar&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="656" pos:column="13">var</name></type> <name pos:line="656" pos:column="17">fooFileUnit</name> <init pos:line="656" pos:column="29">= <expr><call><name><name pos:line="656" pos:column="31">fileSetup</name><op:operator pos:line="656" pos:column="40">.</op:operator><name pos:line="656" pos:column="41">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="656" pos:column="65">(<argument><expr><name pos:line="656" pos:column="66">fooXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="656" pos:column="74">"Foo.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="657" pos:column="13">var</name></type> <name pos:line="657" pos:column="17">globalScope</name> <init pos:line="657" pos:column="29">= <expr><call><name><name pos:line="657" pos:column="31">codeParser</name><op:operator pos:line="657" pos:column="41">.</op:operator><name pos:line="657" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="657" pos:column="55">(<argument><expr><name pos:line="657" pos:column="56">fooFileUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="659" pos:column="13">Assert</name><op:operator pos:line="659" pos:column="19">.</op:operator><name pos:line="659" pos:column="20">AreEqual</name></name><argument_list pos:line="659" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="659" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="659" pos:column="32">globalScope</name><op:operator pos:line="659" pos:column="43">.</op:operator><name pos:line="659" pos:column="44">ChildStatements</name><op:operator pos:line="659" pos:column="59">.</op:operator><name pos:line="659" pos:column="60">Count</name></name><argument_list pos:line="659" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="660" pos:column="13">var</name></type> <name pos:line="660" pos:column="17">foo</name> <init pos:line="660" pos:column="21">= <expr><call><name><name pos:line="660" pos:column="23">globalScope</name><op:operator pos:line="660" pos:column="34">.</op:operator><name pos:line="660" pos:column="35">ChildStatements</name><op:operator pos:line="660" pos:column="50">.</op:operator><name pos:line="660" pos:column="51">First</name></name><argument_list pos:line="660" pos:column="56">()</argument_list></call> <op:operator pos:line="660" pos:column="59">as</op:operator> <name pos:line="660" pos:column="62">TypeDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="661" pos:column="13">Assert</name><op:operator pos:line="661" pos:column="19">.</op:operator><name pos:line="661" pos:column="20">IsNotNull</name></name><argument_list pos:line="661" pos:column="29">(<argument><expr><name pos:line="661" pos:column="30">foo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="662" pos:column="13">Assert</name><op:operator pos:line="662" pos:column="19">.</op:operator><name pos:line="662" pos:column="20">AreEqual</name></name><argument_list pos:line="662" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="662" pos:column="29">"Foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="662" pos:column="36">foo</name><op:operator pos:line="662" pos:column="39">.</op:operator><name pos:line="662" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="663" pos:column="13">Assert</name><op:operator pos:line="663" pos:column="19">.</op:operator><name pos:line="663" pos:column="20">AreEqual</name></name><argument_list pos:line="663" pos:column="28">(<argument><expr><name><name pos:line="663" pos:column="29">TypeKind</name><op:operator pos:line="663" pos:column="37">.</op:operator><name pos:line="663" pos:column="38">Class</name></name></expr></argument>, <argument><expr><name><name pos:line="663" pos:column="45">foo</name><op:operator pos:line="663" pos:column="48">.</op:operator><name pos:line="663" pos:column="49">Kind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="664" pos:column="13">Assert</name><op:operator pos:line="664" pos:column="19">.</op:operator><name pos:line="664" pos:column="20">AreEqual</name></name><argument_list pos:line="664" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="664" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="664" pos:column="32">foo</name><op:operator pos:line="664" pos:column="35">.</op:operator><name pos:line="664" pos:column="36">ChildStatements</name><op:operator pos:line="664" pos:column="51">.</op:operator><name pos:line="664" pos:column="52">Count</name></name><argument_list pos:line="664" pos:column="57">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="666" pos:column="13">var</name></type> <name pos:line="666" pos:column="17">bar</name> <init pos:line="666" pos:column="21">= <expr><name><name pos:line="666" pos:column="23">foo</name><op:operator pos:line="666" pos:column="26">.</op:operator><name pos:line="666" pos:column="27">ChildStatements</name><index pos:line="666" pos:column="42">[<expr><lit:literal type="number" pos:line="666" pos:column="43">0</lit:literal></expr>]</index></name><op:operator pos:line="666" pos:column="45">.</op:operator><name pos:line="666" pos:column="46">Content</name> <op:operator pos:line="666" pos:column="54">as</op:operator> <name pos:line="666" pos:column="57">VariableDeclaration</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="667" pos:column="13">Assert</name><op:operator pos:line="667" pos:column="19">.</op:operator><name pos:line="667" pos:column="20">IsNotNull</name></name><argument_list pos:line="667" pos:column="29">(<argument><expr><name pos:line="667" pos:column="30">bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="668" pos:column="13">Assert</name><op:operator pos:line="668" pos:column="19">.</op:operator><name pos:line="668" pos:column="20">AreEqual</name></name><argument_list pos:line="668" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="668" pos:column="29">"bar"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="668" pos:column="36">bar</name><op:operator pos:line="668" pos:column="39">.</op:operator><name pos:line="668" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="669" pos:column="13">Assert</name><op:operator pos:line="669" pos:column="19">.</op:operator><name pos:line="669" pos:column="20">AreEqual</name></name><argument_list pos:line="669" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="669" pos:column="29">"int"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="669" pos:column="36">bar</name><op:operator pos:line="669" pos:column="39">.</op:operator><name pos:line="669" pos:column="40">VariableType</name><op:operator pos:line="669" pos:column="52">.</op:operator><name pos:line="669" pos:column="53">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="670" pos:column="13">Assert</name><op:operator pos:line="670" pos:column="19">.</op:operator><name pos:line="670" pos:column="20">AreEqual</name></name><argument_list pos:line="670" pos:column="28">(<argument><expr><name><name pos:line="670" pos:column="29">AccessModifier</name><op:operator pos:line="670" pos:column="43">.</op:operator><name pos:line="670" pos:column="44">Public</name></name></expr></argument>, <argument><expr><name><name pos:line="670" pos:column="52">bar</name><op:operator pos:line="670" pos:column="55">.</op:operator><name pos:line="670" pos:column="56">Accessibility</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="673" pos:column="9">[<expr><name pos:line="673" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="674" pos:column="9">public</specifier> <name pos:line="674" pos:column="16">void</name></type> <name pos:line="674" pos:column="21">TestCreateTypeDefinition_ClassWithParent</name><parameter_list pos:line="674" pos:column="61">()</parameter_list> <block pos:line="674" pos:column="64">{
            <comment type="line" pos:line="675" pos:column="13">////Foo.cs</comment>
            <comment type="line" pos:line="676" pos:column="13">//public class Foo : Baz {</comment>
            <comment type="line" pos:line="677" pos:column="13">//    public int bar;</comment>
            <comment type="line" pos:line="678" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="679" pos:column="13">string</name></type> <name pos:line="679" pos:column="20">fooXml</name> <init pos:line="679" pos:column="27">= <expr><lit:literal type="string" pos:line="679" pos:column="29">@"&lt;class&gt;&lt;specifier&gt;public&lt;/specifier&gt; class &lt;name&gt;Foo&lt;/name&gt; &lt;super&gt;: &lt;name&gt;Baz&lt;/name&gt;&lt;/super&gt; &lt;block&gt;{
    &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;bar&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="682" pos:column="13">var</name></type> <name pos:line="682" pos:column="17">fooFileUnit</name> <init pos:line="682" pos:column="29">= <expr><call><name><name pos:line="682" pos:column="31">fileSetup</name><op:operator pos:line="682" pos:column="40">.</op:operator><name pos:line="682" pos:column="41">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="682" pos:column="65">(<argument><expr><name pos:line="682" pos:column="66">fooXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="682" pos:column="74">"Foo.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="683" pos:column="13">var</name></type> <name pos:line="683" pos:column="17">globalScope</name> <init pos:line="683" pos:column="29">= <expr><call><name><name pos:line="683" pos:column="31">codeParser</name><op:operator pos:line="683" pos:column="41">.</op:operator><name pos:line="683" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="683" pos:column="55">(<argument><expr><name pos:line="683" pos:column="56">fooFileUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="685" pos:column="13">Assert</name><op:operator pos:line="685" pos:column="19">.</op:operator><name pos:line="685" pos:column="20">AreEqual</name></name><argument_list pos:line="685" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="685" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="685" pos:column="32">globalScope</name><op:operator pos:line="685" pos:column="43">.</op:operator><name pos:line="685" pos:column="44">ChildStatements</name><op:operator pos:line="685" pos:column="59">.</op:operator><name pos:line="685" pos:column="60">Count</name></name><argument_list pos:line="685" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="686" pos:column="13">var</name></type> <name pos:line="686" pos:column="17">foo</name> <init pos:line="686" pos:column="21">= <expr><call><name><name pos:line="686" pos:column="23">globalScope</name><op:operator pos:line="686" pos:column="34">.</op:operator><name pos:line="686" pos:column="35">ChildStatements</name><op:operator pos:line="686" pos:column="50">.</op:operator><name pos:line="686" pos:column="51">First</name></name><argument_list pos:line="686" pos:column="56">()</argument_list></call> <op:operator pos:line="686" pos:column="59">as</op:operator> <name pos:line="686" pos:column="62">TypeDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="687" pos:column="13">Assert</name><op:operator pos:line="687" pos:column="19">.</op:operator><name pos:line="687" pos:column="20">IsNotNull</name></name><argument_list pos:line="687" pos:column="29">(<argument><expr><name pos:line="687" pos:column="30">foo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="688" pos:column="13">Assert</name><op:operator pos:line="688" pos:column="19">.</op:operator><name pos:line="688" pos:column="20">AreEqual</name></name><argument_list pos:line="688" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="688" pos:column="29">"Foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="688" pos:column="36">foo</name><op:operator pos:line="688" pos:column="39">.</op:operator><name pos:line="688" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="689" pos:column="13">Assert</name><op:operator pos:line="689" pos:column="19">.</op:operator><name pos:line="689" pos:column="20">AreEqual</name></name><argument_list pos:line="689" pos:column="28">(<argument><expr><name><name pos:line="689" pos:column="29">TypeKind</name><op:operator pos:line="689" pos:column="37">.</op:operator><name pos:line="689" pos:column="38">Class</name></name></expr></argument>, <argument><expr><name><name pos:line="689" pos:column="45">foo</name><op:operator pos:line="689" pos:column="48">.</op:operator><name pos:line="689" pos:column="49">Kind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="690" pos:column="13">Assert</name><op:operator pos:line="690" pos:column="19">.</op:operator><name pos:line="690" pos:column="20">AreEqual</name></name><argument_list pos:line="690" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="690" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="690" pos:column="32">foo</name><op:operator pos:line="690" pos:column="35">.</op:operator><name pos:line="690" pos:column="36">ChildStatements</name><op:operator pos:line="690" pos:column="51">.</op:operator><name pos:line="690" pos:column="52">Count</name></name><argument_list pos:line="690" pos:column="57">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="691" pos:column="13">Assert</name><op:operator pos:line="691" pos:column="19">.</op:operator><name pos:line="691" pos:column="20">AreEqual</name></name><argument_list pos:line="691" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="691" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="691" pos:column="32">foo</name><op:operator pos:line="691" pos:column="35">.</op:operator><name pos:line="691" pos:column="36">ParentTypeNames</name><op:operator pos:line="691" pos:column="51">.</op:operator><name pos:line="691" pos:column="52">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="692" pos:column="13">Assert</name><op:operator pos:line="692" pos:column="19">.</op:operator><name pos:line="692" pos:column="20">AreEqual</name></name><argument_list pos:line="692" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="692" pos:column="29">"Baz"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="692" pos:column="36">foo</name><op:operator pos:line="692" pos:column="39">.</op:operator><name pos:line="692" pos:column="40">ParentTypeNames</name><op:operator pos:line="692" pos:column="55">.</op:operator><name pos:line="692" pos:column="56">First</name></name><argument_list pos:line="692" pos:column="61">()</argument_list></call><op:operator pos:line="692" pos:column="63">.</op:operator><name pos:line="692" pos:column="64">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="695" pos:column="9">[<expr><name pos:line="695" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="696" pos:column="9">public</specifier> <name pos:line="696" pos:column="16">void</name></type> <name pos:line="696" pos:column="21">TestCreateTypeDefinition_ClassWithQualifiedParent</name><parameter_list pos:line="696" pos:column="70">()</parameter_list> <block pos:line="696" pos:column="73">{
            <comment type="line" pos:line="697" pos:column="13">////Foo.cs</comment>
            <comment type="line" pos:line="698" pos:column="13">//public class Foo : Baz, System.IDisposable {</comment>
            <comment type="line" pos:line="699" pos:column="13">//    public int bar;</comment>
            <comment type="line" pos:line="700" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="701" pos:column="13">string</name></type> <name pos:line="701" pos:column="20">fooXml</name> <init pos:line="701" pos:column="27">= <expr><lit:literal type="string" pos:line="701" pos:column="29">@"&lt;class&gt;&lt;specifier&gt;public&lt;/specifier&gt; class &lt;name&gt;Foo&lt;/name&gt; &lt;super&gt;: &lt;name&gt;Baz&lt;/name&gt;, &lt;name&gt;&lt;name&gt;System&lt;/name&gt;&lt;op:operator&gt;.&lt;/op:operator&gt;&lt;name&gt;IDisposable&lt;/name&gt;&lt;/name&gt;&lt;/super&gt; &lt;block&gt;{
    &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;bar&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="704" pos:column="13">var</name></type> <name pos:line="704" pos:column="17">fooFileUnit</name> <init pos:line="704" pos:column="29">= <expr><call><name><name pos:line="704" pos:column="31">fileSetup</name><op:operator pos:line="704" pos:column="40">.</op:operator><name pos:line="704" pos:column="41">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="704" pos:column="65">(<argument><expr><name pos:line="704" pos:column="66">fooXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="704" pos:column="74">"Foo.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="705" pos:column="13">var</name></type> <name pos:line="705" pos:column="17">globalScope</name> <init pos:line="705" pos:column="29">= <expr><call><name><name pos:line="705" pos:column="31">codeParser</name><op:operator pos:line="705" pos:column="41">.</op:operator><name pos:line="705" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="705" pos:column="55">(<argument><expr><name pos:line="705" pos:column="56">fooFileUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="707" pos:column="13">Assert</name><op:operator pos:line="707" pos:column="19">.</op:operator><name pos:line="707" pos:column="20">AreEqual</name></name><argument_list pos:line="707" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="707" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="707" pos:column="32">globalScope</name><op:operator pos:line="707" pos:column="43">.</op:operator><name pos:line="707" pos:column="44">ChildStatements</name><op:operator pos:line="707" pos:column="59">.</op:operator><name pos:line="707" pos:column="60">Count</name></name><argument_list pos:line="707" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="708" pos:column="13">var</name></type> <name pos:line="708" pos:column="17">foo</name> <init pos:line="708" pos:column="21">= <expr><call><name><name pos:line="708" pos:column="23">globalScope</name><op:operator pos:line="708" pos:column="34">.</op:operator><name pos:line="708" pos:column="35">ChildStatements</name><op:operator pos:line="708" pos:column="50">.</op:operator><name pos:line="708" pos:column="51">First</name></name><argument_list pos:line="708" pos:column="56">()</argument_list></call> <op:operator pos:line="708" pos:column="59">as</op:operator> <name pos:line="708" pos:column="62">TypeDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="709" pos:column="13">Assert</name><op:operator pos:line="709" pos:column="19">.</op:operator><name pos:line="709" pos:column="20">IsNotNull</name></name><argument_list pos:line="709" pos:column="29">(<argument><expr><name pos:line="709" pos:column="30">foo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="710" pos:column="13">Assert</name><op:operator pos:line="710" pos:column="19">.</op:operator><name pos:line="710" pos:column="20">AreEqual</name></name><argument_list pos:line="710" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="710" pos:column="29">"Foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="710" pos:column="36">foo</name><op:operator pos:line="710" pos:column="39">.</op:operator><name pos:line="710" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="711" pos:column="13">Assert</name><op:operator pos:line="711" pos:column="19">.</op:operator><name pos:line="711" pos:column="20">AreEqual</name></name><argument_list pos:line="711" pos:column="28">(<argument><expr><name><name pos:line="711" pos:column="29">TypeKind</name><op:operator pos:line="711" pos:column="37">.</op:operator><name pos:line="711" pos:column="38">Class</name></name></expr></argument>, <argument><expr><name><name pos:line="711" pos:column="45">foo</name><op:operator pos:line="711" pos:column="48">.</op:operator><name pos:line="711" pos:column="49">Kind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="712" pos:column="13">Assert</name><op:operator pos:line="712" pos:column="19">.</op:operator><name pos:line="712" pos:column="20">AreEqual</name></name><argument_list pos:line="712" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="712" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="712" pos:column="32">foo</name><op:operator pos:line="712" pos:column="35">.</op:operator><name pos:line="712" pos:column="36">ChildStatements</name><op:operator pos:line="712" pos:column="51">.</op:operator><name pos:line="712" pos:column="52">Count</name></name><argument_list pos:line="712" pos:column="57">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="713" pos:column="13">Assert</name><op:operator pos:line="713" pos:column="19">.</op:operator><name pos:line="713" pos:column="20">AreEqual</name></name><argument_list pos:line="713" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="713" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="713" pos:column="32">foo</name><op:operator pos:line="713" pos:column="35">.</op:operator><name pos:line="713" pos:column="36">ParentTypeNames</name><op:operator pos:line="713" pos:column="51">.</op:operator><name pos:line="713" pos:column="52">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="714" pos:column="13">Assert</name><op:operator pos:line="714" pos:column="19">.</op:operator><name pos:line="714" pos:column="20">AreEqual</name></name><argument_list pos:line="714" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="714" pos:column="29">"Baz"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="714" pos:column="36">foo</name><op:operator pos:line="714" pos:column="39">.</op:operator><name pos:line="714" pos:column="40">ParentTypeNames</name><index pos:line="714" pos:column="55">[<expr><lit:literal type="number" pos:line="714" pos:column="56">0</lit:literal></expr>]</index></name><op:operator pos:line="714" pos:column="58">.</op:operator><name pos:line="714" pos:column="59">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="715" pos:column="13">Assert</name><op:operator pos:line="715" pos:column="19">.</op:operator><name pos:line="715" pos:column="20">AreEqual</name></name><argument_list pos:line="715" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="715" pos:column="29">"IDisposable"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="715" pos:column="44">foo</name><op:operator pos:line="715" pos:column="47">.</op:operator><name pos:line="715" pos:column="48">ParentTypeNames</name><index pos:line="715" pos:column="63">[<expr><lit:literal type="number" pos:line="715" pos:column="64">1</lit:literal></expr>]</index></name><op:operator pos:line="715" pos:column="66">.</op:operator><name pos:line="715" pos:column="67">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="716" pos:column="13">Assert</name><op:operator pos:line="716" pos:column="19">.</op:operator><name pos:line="716" pos:column="20">AreEqual</name></name><argument_list pos:line="716" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="716" pos:column="29">"System"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="716" pos:column="39">foo</name><op:operator pos:line="716" pos:column="42">.</op:operator><name pos:line="716" pos:column="43">ParentTypeNames</name><index pos:line="716" pos:column="58">[<expr><lit:literal type="number" pos:line="716" pos:column="59">1</lit:literal></expr>]</index></name><op:operator pos:line="716" pos:column="61">.</op:operator><call><name><name pos:line="716" pos:column="62">Prefix</name><op:operator pos:line="716" pos:column="68">.</op:operator><name pos:line="716" pos:column="69">Names</name><op:operator pos:line="716" pos:column="74">.</op:operator><name pos:line="716" pos:column="75">First</name></name><argument_list pos:line="716" pos:column="80">()</argument_list></call><op:operator pos:line="716" pos:column="82">.</op:operator><name pos:line="716" pos:column="83">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="719" pos:column="9">[<expr><name pos:line="719" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="720" pos:column="9">public</specifier> <name pos:line="720" pos:column="16">void</name></type> <name pos:line="720" pos:column="21">TestCreateTypeDefinition_CompoundNamespace</name><parameter_list pos:line="720" pos:column="63">()</parameter_list> <block pos:line="720" pos:column="66">{
            <comment type="line" pos:line="721" pos:column="13">////Foo.cs</comment>
            <comment type="line" pos:line="722" pos:column="13">//namespace Example.Level2.Level3 {</comment>
            <comment type="line" pos:line="723" pos:column="13">//    public class Foo {</comment>
            <comment type="line" pos:line="724" pos:column="13">//        public int bar;</comment>
            <comment type="line" pos:line="725" pos:column="13">//    }</comment>
            <comment type="line" pos:line="726" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="727" pos:column="13">string</name></type> <name pos:line="727" pos:column="20">fooXml</name> <init pos:line="727" pos:column="27">= <expr><lit:literal type="string" pos:line="727" pos:column="29">@"&lt;namespace&gt;namespace &lt;name&gt;&lt;name&gt;Example&lt;/name&gt;&lt;op:operator&gt;.&lt;/op:operator&gt;&lt;name&gt;Level2&lt;/name&gt;&lt;op:operator&gt;.&lt;/op:operator&gt;&lt;name&gt;Level3&lt;/name&gt;&lt;/name&gt; &lt;block&gt;{
    &lt;class&gt;&lt;specifier&gt;public&lt;/specifier&gt; class &lt;name&gt;Foo&lt;/name&gt; &lt;block&gt;{
        &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;bar&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
    }&lt;/block&gt;&lt;/class&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="732" pos:column="13">var</name></type> <name pos:line="732" pos:column="17">fooFileUnit</name> <init pos:line="732" pos:column="29">= <expr><call><name><name pos:line="732" pos:column="31">fileSetup</name><op:operator pos:line="732" pos:column="40">.</op:operator><name pos:line="732" pos:column="41">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="732" pos:column="65">(<argument><expr><name pos:line="732" pos:column="66">fooXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="732" pos:column="74">"Foo.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="733" pos:column="13">var</name></type> <name pos:line="733" pos:column="17">globalScope</name> <init pos:line="733" pos:column="29">= <expr><call><name><name pos:line="733" pos:column="31">codeParser</name><op:operator pos:line="733" pos:column="41">.</op:operator><name pos:line="733" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="733" pos:column="55">(<argument><expr><name pos:line="733" pos:column="56">fooFileUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="735" pos:column="13">Assert</name><op:operator pos:line="735" pos:column="19">.</op:operator><name pos:line="735" pos:column="20">AreEqual</name></name><argument_list pos:line="735" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="735" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="735" pos:column="32">globalScope</name><op:operator pos:line="735" pos:column="43">.</op:operator><name pos:line="735" pos:column="44">ChildStatements</name><op:operator pos:line="735" pos:column="59">.</op:operator><name pos:line="735" pos:column="60">Count</name></name><argument_list pos:line="735" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="736" pos:column="13">var</name></type> <name pos:line="736" pos:column="17">example</name> <init pos:line="736" pos:column="25">= <expr><call><name><name pos:line="736" pos:column="27">globalScope</name><op:operator pos:line="736" pos:column="38">.</op:operator><name pos:line="736" pos:column="39">ChildStatements</name><op:operator pos:line="736" pos:column="54">.</op:operator><name pos:line="736" pos:column="55">First</name></name><argument_list pos:line="736" pos:column="60">()</argument_list></call> <op:operator pos:line="736" pos:column="63">as</op:operator> <name pos:line="736" pos:column="66">NamespaceDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="737" pos:column="13">Assert</name><op:operator pos:line="737" pos:column="19">.</op:operator><name pos:line="737" pos:column="20">IsNotNull</name></name><argument_list pos:line="737" pos:column="29">(<argument><expr><name pos:line="737" pos:column="30">example</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="738" pos:column="13">Assert</name><op:operator pos:line="738" pos:column="19">.</op:operator><name pos:line="738" pos:column="20">AreEqual</name></name><argument_list pos:line="738" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="738" pos:column="29">"Example"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="738" pos:column="40">example</name><op:operator pos:line="738" pos:column="47">.</op:operator><name pos:line="738" pos:column="48">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="739" pos:column="13">Assert</name><op:operator pos:line="739" pos:column="19">.</op:operator><name pos:line="739" pos:column="20">AreEqual</name></name><argument_list pos:line="739" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="739" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="739" pos:column="32">example</name><op:operator pos:line="739" pos:column="39">.</op:operator><name pos:line="739" pos:column="40">ChildStatements</name><op:operator pos:line="739" pos:column="55">.</op:operator><name pos:line="739" pos:column="56">Count</name></name><argument_list pos:line="739" pos:column="61">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="740" pos:column="13">var</name></type> <name pos:line="740" pos:column="17">level2</name> <init pos:line="740" pos:column="24">= <expr><call><name><name pos:line="740" pos:column="26">example</name><op:operator pos:line="740" pos:column="33">.</op:operator><name pos:line="740" pos:column="34">ChildStatements</name><op:operator pos:line="740" pos:column="49">.</op:operator><name pos:line="740" pos:column="50">First</name></name><argument_list pos:line="740" pos:column="55">()</argument_list></call> <op:operator pos:line="740" pos:column="58">as</op:operator> <name pos:line="740" pos:column="61">NamespaceDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="741" pos:column="13">Assert</name><op:operator pos:line="741" pos:column="19">.</op:operator><name pos:line="741" pos:column="20">IsNotNull</name></name><argument_list pos:line="741" pos:column="29">(<argument><expr><name pos:line="741" pos:column="30">level2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="742" pos:column="13">Assert</name><op:operator pos:line="742" pos:column="19">.</op:operator><name pos:line="742" pos:column="20">AreEqual</name></name><argument_list pos:line="742" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="742" pos:column="29">"Level2"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="742" pos:column="39">level2</name><op:operator pos:line="742" pos:column="45">.</op:operator><name pos:line="742" pos:column="46">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="743" pos:column="13">Assert</name><op:operator pos:line="743" pos:column="19">.</op:operator><name pos:line="743" pos:column="20">AreEqual</name></name><argument_list pos:line="743" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="743" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="743" pos:column="32">level2</name><op:operator pos:line="743" pos:column="38">.</op:operator><name pos:line="743" pos:column="39">ChildStatements</name><op:operator pos:line="743" pos:column="54">.</op:operator><name pos:line="743" pos:column="55">Count</name></name><argument_list pos:line="743" pos:column="60">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="744" pos:column="13">var</name></type> <name pos:line="744" pos:column="17">level3</name> <init pos:line="744" pos:column="24">= <expr><call><name><name pos:line="744" pos:column="26">level2</name><op:operator pos:line="744" pos:column="32">.</op:operator><name pos:line="744" pos:column="33">ChildStatements</name><op:operator pos:line="744" pos:column="48">.</op:operator><name pos:line="744" pos:column="49">First</name></name><argument_list pos:line="744" pos:column="54">()</argument_list></call> <op:operator pos:line="744" pos:column="57">as</op:operator> <name pos:line="744" pos:column="60">NamespaceDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="745" pos:column="13">Assert</name><op:operator pos:line="745" pos:column="19">.</op:operator><name pos:line="745" pos:column="20">IsNotNull</name></name><argument_list pos:line="745" pos:column="29">(<argument><expr><name pos:line="745" pos:column="30">level3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="746" pos:column="13">Assert</name><op:operator pos:line="746" pos:column="19">.</op:operator><name pos:line="746" pos:column="20">AreEqual</name></name><argument_list pos:line="746" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="746" pos:column="29">"Level3"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="746" pos:column="39">level3</name><op:operator pos:line="746" pos:column="45">.</op:operator><name pos:line="746" pos:column="46">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="747" pos:column="13">Assert</name><op:operator pos:line="747" pos:column="19">.</op:operator><name pos:line="747" pos:column="20">AreEqual</name></name><argument_list pos:line="747" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="747" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="747" pos:column="32">level3</name><op:operator pos:line="747" pos:column="38">.</op:operator><name pos:line="747" pos:column="39">ChildStatements</name><op:operator pos:line="747" pos:column="54">.</op:operator><name pos:line="747" pos:column="55">Count</name></name><argument_list pos:line="747" pos:column="60">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="748" pos:column="13">var</name></type> <name pos:line="748" pos:column="17">foo</name> <init pos:line="748" pos:column="21">= <expr><call><name><name pos:line="748" pos:column="23">level3</name><op:operator pos:line="748" pos:column="29">.</op:operator><name pos:line="748" pos:column="30">ChildStatements</name><op:operator pos:line="748" pos:column="45">.</op:operator><name pos:line="748" pos:column="46">First</name></name><argument_list pos:line="748" pos:column="51">()</argument_list></call> <op:operator pos:line="748" pos:column="54">as</op:operator> <name pos:line="748" pos:column="57">TypeDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="749" pos:column="13">Assert</name><op:operator pos:line="749" pos:column="19">.</op:operator><name pos:line="749" pos:column="20">IsNotNull</name></name><argument_list pos:line="749" pos:column="29">(<argument><expr><name pos:line="749" pos:column="30">foo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="750" pos:column="13">Assert</name><op:operator pos:line="750" pos:column="19">.</op:operator><name pos:line="750" pos:column="20">AreEqual</name></name><argument_list pos:line="750" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="750" pos:column="29">"Foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="750" pos:column="36">foo</name><op:operator pos:line="750" pos:column="39">.</op:operator><name pos:line="750" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="751" pos:column="13">Assert</name><op:operator pos:line="751" pos:column="19">.</op:operator><name pos:line="751" pos:column="20">AreEqual</name></name><argument_list pos:line="751" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="751" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="751" pos:column="32">foo</name><op:operator pos:line="751" pos:column="35">.</op:operator><name pos:line="751" pos:column="36">ChildStatements</name><op:operator pos:line="751" pos:column="51">.</op:operator><name pos:line="751" pos:column="52">Count</name></name><argument_list pos:line="751" pos:column="57">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="754" pos:column="9">[<expr><name pos:line="754" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="755" pos:column="9">public</specifier> <name pos:line="755" pos:column="16">void</name></type> <name pos:line="755" pos:column="21">TestCreateTypeDefinition_Interface</name><parameter_list pos:line="755" pos:column="55">()</parameter_list> <block pos:line="755" pos:column="58">{
            <comment type="line" pos:line="756" pos:column="13">////Foo.cs</comment>
            <comment type="line" pos:line="757" pos:column="13">//public interface Foo {</comment>
            <comment type="line" pos:line="758" pos:column="13">//    public int GetBar();</comment>
            <comment type="line" pos:line="759" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="760" pos:column="13">string</name></type> <name pos:line="760" pos:column="20">fooXml</name> <init pos:line="760" pos:column="27">= <expr><lit:literal type="string" pos:line="760" pos:column="29">@"&lt;class type=""interface&gt;&lt;specifier&gt;public&lt;/specifier&gt; interface &lt;name&gt;Foo&lt;/name&gt; &lt;block&gt;{
    &lt;function_decl&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;GetBar&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt;;&lt;/function_decl&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="763" pos:column="13">var</name></type> <name pos:line="763" pos:column="17">fooFileUnit</name> <init pos:line="763" pos:column="29">= <expr><call><name><name pos:line="763" pos:column="31">fileSetup</name><op:operator pos:line="763" pos:column="40">.</op:operator><name pos:line="763" pos:column="41">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="763" pos:column="65">(<argument><expr><name pos:line="763" pos:column="66">fooXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="763" pos:column="74">"Foo.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="764" pos:column="13">var</name></type> <name pos:line="764" pos:column="17">globalScope</name> <init pos:line="764" pos:column="29">= <expr><call><name><name pos:line="764" pos:column="31">codeParser</name><op:operator pos:line="764" pos:column="41">.</op:operator><name pos:line="764" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="764" pos:column="55">(<argument><expr><name pos:line="764" pos:column="56">fooFileUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="766" pos:column="13">Assert</name><op:operator pos:line="766" pos:column="19">.</op:operator><name pos:line="766" pos:column="20">AreEqual</name></name><argument_list pos:line="766" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="766" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="766" pos:column="32">globalScope</name><op:operator pos:line="766" pos:column="43">.</op:operator><name pos:line="766" pos:column="44">ChildStatements</name><op:operator pos:line="766" pos:column="59">.</op:operator><name pos:line="766" pos:column="60">Count</name></name><argument_list pos:line="766" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="767" pos:column="13">var</name></type> <name pos:line="767" pos:column="17">foo</name> <init pos:line="767" pos:column="21">= <expr><call><name><name pos:line="767" pos:column="23">globalScope</name><op:operator pos:line="767" pos:column="34">.</op:operator><name pos:line="767" pos:column="35">ChildStatements</name><op:operator pos:line="767" pos:column="50">.</op:operator><name pos:line="767" pos:column="51">First</name></name><argument_list pos:line="767" pos:column="56">()</argument_list></call> <op:operator pos:line="767" pos:column="59">as</op:operator> <name pos:line="767" pos:column="62">TypeDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="768" pos:column="13">Assert</name><op:operator pos:line="768" pos:column="19">.</op:operator><name pos:line="768" pos:column="20">IsNotNull</name></name><argument_list pos:line="768" pos:column="29">(<argument><expr><name pos:line="768" pos:column="30">foo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="769" pos:column="13">Assert</name><op:operator pos:line="769" pos:column="19">.</op:operator><name pos:line="769" pos:column="20">AreEqual</name></name><argument_list pos:line="769" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="769" pos:column="29">"Foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="769" pos:column="36">foo</name><op:operator pos:line="769" pos:column="39">.</op:operator><name pos:line="769" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="770" pos:column="13">Assert</name><op:operator pos:line="770" pos:column="19">.</op:operator><name pos:line="770" pos:column="20">AreEqual</name></name><argument_list pos:line="770" pos:column="28">(<argument><expr><name><name pos:line="770" pos:column="29">TypeKind</name><op:operator pos:line="770" pos:column="37">.</op:operator><name pos:line="770" pos:column="38">Interface</name></name></expr></argument>, <argument><expr><name><name pos:line="770" pos:column="49">foo</name><op:operator pos:line="770" pos:column="52">.</op:operator><name pos:line="770" pos:column="53">Kind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="771" pos:column="13">Assert</name><op:operator pos:line="771" pos:column="19">.</op:operator><name pos:line="771" pos:column="20">AreEqual</name></name><argument_list pos:line="771" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="771" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="771" pos:column="32">foo</name><op:operator pos:line="771" pos:column="35">.</op:operator><name pos:line="771" pos:column="36">ChildStatements</name><op:operator pos:line="771" pos:column="51">.</op:operator><name pos:line="771" pos:column="52">Count</name></name><argument_list pos:line="771" pos:column="57">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="774" pos:column="9">[<expr><name pos:line="774" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="775" pos:column="9">public</specifier> <name pos:line="775" pos:column="16">void</name></type> <name pos:line="775" pos:column="21">TestCreateTypeDefinition_Namespace</name><parameter_list pos:line="775" pos:column="55">()</parameter_list> <block pos:line="775" pos:column="58">{
            <comment type="line" pos:line="776" pos:column="13">////Foo.cs</comment>
            <comment type="line" pos:line="777" pos:column="13">//namespace Example {</comment>
            <comment type="line" pos:line="778" pos:column="13">//    public class Foo {</comment>
            <comment type="line" pos:line="779" pos:column="13">//        public int bar;</comment>
            <comment type="line" pos:line="780" pos:column="13">//    }</comment>
            <comment type="line" pos:line="781" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="782" pos:column="13">string</name></type> <name pos:line="782" pos:column="20">fooXml</name> <init pos:line="782" pos:column="27">= <expr><lit:literal type="string" pos:line="782" pos:column="29">@"&lt;namespace&gt;namespace &lt;name&gt;Example&lt;/name&gt; &lt;block&gt;{
    &lt;class&gt;&lt;specifier&gt;public&lt;/specifier&gt; class &lt;name&gt;Foo&lt;/name&gt; &lt;block&gt;{
        &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;bar&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
    }&lt;/block&gt;&lt;/class&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="787" pos:column="13">var</name></type> <name pos:line="787" pos:column="17">fooFileUnit</name> <init pos:line="787" pos:column="29">= <expr><call><name><name pos:line="787" pos:column="31">fileSetup</name><op:operator pos:line="787" pos:column="40">.</op:operator><name pos:line="787" pos:column="41">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="787" pos:column="65">(<argument><expr><name pos:line="787" pos:column="66">fooXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="787" pos:column="74">"Foo.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="788" pos:column="13">var</name></type> <name pos:line="788" pos:column="17">globalScope</name> <init pos:line="788" pos:column="29">= <expr><call><name><name pos:line="788" pos:column="31">codeParser</name><op:operator pos:line="788" pos:column="41">.</op:operator><name pos:line="788" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="788" pos:column="55">(<argument><expr><name pos:line="788" pos:column="56">fooFileUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="790" pos:column="13">Assert</name><op:operator pos:line="790" pos:column="19">.</op:operator><name pos:line="790" pos:column="20">AreEqual</name></name><argument_list pos:line="790" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="790" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="790" pos:column="32">globalScope</name><op:operator pos:line="790" pos:column="43">.</op:operator><name pos:line="790" pos:column="44">ChildStatements</name><op:operator pos:line="790" pos:column="59">.</op:operator><name pos:line="790" pos:column="60">Count</name></name><argument_list pos:line="790" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="791" pos:column="13">var</name></type> <name pos:line="791" pos:column="17">example</name> <init pos:line="791" pos:column="25">= <expr><call><name><name pos:line="791" pos:column="27">globalScope</name><op:operator pos:line="791" pos:column="38">.</op:operator><name pos:line="791" pos:column="39">ChildStatements</name><op:operator pos:line="791" pos:column="54">.</op:operator><name pos:line="791" pos:column="55">First</name></name><argument_list pos:line="791" pos:column="60">()</argument_list></call> <op:operator pos:line="791" pos:column="63">as</op:operator> <name pos:line="791" pos:column="66">NamespaceDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="792" pos:column="13">Assert</name><op:operator pos:line="792" pos:column="19">.</op:operator><name pos:line="792" pos:column="20">IsNotNull</name></name><argument_list pos:line="792" pos:column="29">(<argument><expr><name pos:line="792" pos:column="30">example</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="793" pos:column="13">Assert</name><op:operator pos:line="793" pos:column="19">.</op:operator><name pos:line="793" pos:column="20">AreEqual</name></name><argument_list pos:line="793" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="793" pos:column="29">"Example"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="793" pos:column="40">example</name><op:operator pos:line="793" pos:column="47">.</op:operator><name pos:line="793" pos:column="48">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="794" pos:column="13">Assert</name><op:operator pos:line="794" pos:column="19">.</op:operator><name pos:line="794" pos:column="20">AreEqual</name></name><argument_list pos:line="794" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="794" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="794" pos:column="32">example</name><op:operator pos:line="794" pos:column="39">.</op:operator><name pos:line="794" pos:column="40">ChildStatements</name><op:operator pos:line="794" pos:column="55">.</op:operator><name pos:line="794" pos:column="56">Count</name></name><argument_list pos:line="794" pos:column="61">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="795" pos:column="13">var</name></type> <name pos:line="795" pos:column="17">foo</name> <init pos:line="795" pos:column="21">= <expr><call><name><name pos:line="795" pos:column="23">example</name><op:operator pos:line="795" pos:column="30">.</op:operator><name pos:line="795" pos:column="31">ChildStatements</name><op:operator pos:line="795" pos:column="46">.</op:operator><name pos:line="795" pos:column="47">First</name></name><argument_list pos:line="795" pos:column="52">()</argument_list></call> <op:operator pos:line="795" pos:column="55">as</op:operator> <name pos:line="795" pos:column="58">TypeDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="796" pos:column="13">Assert</name><op:operator pos:line="796" pos:column="19">.</op:operator><name pos:line="796" pos:column="20">IsNotNull</name></name><argument_list pos:line="796" pos:column="29">(<argument><expr><name pos:line="796" pos:column="30">foo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="797" pos:column="13">Assert</name><op:operator pos:line="797" pos:column="19">.</op:operator><name pos:line="797" pos:column="20">AreEqual</name></name><argument_list pos:line="797" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="797" pos:column="29">"Foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="797" pos:column="36">foo</name><op:operator pos:line="797" pos:column="39">.</op:operator><name pos:line="797" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="798" pos:column="13">Assert</name><op:operator pos:line="798" pos:column="19">.</op:operator><name pos:line="798" pos:column="20">AreEqual</name></name><argument_list pos:line="798" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="798" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="798" pos:column="32">foo</name><op:operator pos:line="798" pos:column="35">.</op:operator><name pos:line="798" pos:column="36">ChildStatements</name><op:operator pos:line="798" pos:column="51">.</op:operator><name pos:line="798" pos:column="52">Count</name></name><argument_list pos:line="798" pos:column="57">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="801" pos:column="9">[<expr><name pos:line="801" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="802" pos:column="9">public</specifier> <name pos:line="802" pos:column="16">void</name></type> <name pos:line="802" pos:column="21">TestCreateTypeDefinition_NestedCompoundNamespace</name><parameter_list pos:line="802" pos:column="69">()</parameter_list> <block pos:line="802" pos:column="72">{
            <comment type="line" pos:line="803" pos:column="13">////Foo.cs</comment>
            <comment type="line" pos:line="804" pos:column="13">//namespace Watermelon {</comment>
            <comment type="line" pos:line="805" pos:column="13">//    namespace Example.Level2.Level3 {</comment>
            <comment type="line" pos:line="806" pos:column="13">//        public class Foo {</comment>
            <comment type="line" pos:line="807" pos:column="13">//            public int bar;</comment>
            <comment type="line" pos:line="808" pos:column="13">//        }</comment>
            <comment type="line" pos:line="809" pos:column="13">//    }</comment>
            <comment type="line" pos:line="810" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="811" pos:column="13">string</name></type> <name pos:line="811" pos:column="20">fooXml</name> <init pos:line="811" pos:column="27">= <expr><lit:literal type="string" pos:line="811" pos:column="29">@"&lt;namespace&gt;namespace &lt;name&gt;Watermelon&lt;/name&gt; &lt;block&gt;{
    &lt;namespace&gt;namespace &lt;name&gt;&lt;name&gt;Example&lt;/name&gt;&lt;op:operator&gt;.&lt;/op:operator&gt;&lt;name&gt;Level2&lt;/name&gt;&lt;op:operator&gt;.&lt;/op:operator&gt;&lt;name&gt;Level3&lt;/name&gt;&lt;/name&gt; &lt;block&gt;{
        &lt;class&gt;&lt;specifier&gt;public&lt;/specifier&gt; class &lt;name&gt;Foo&lt;/name&gt; &lt;block&gt;{
            &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;bar&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
        }&lt;/block&gt;&lt;/class&gt;
    }&lt;/block&gt;&lt;/namespace&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="818" pos:column="13">var</name></type> <name pos:line="818" pos:column="17">fooFileUnit</name> <init pos:line="818" pos:column="29">= <expr><call><name><name pos:line="818" pos:column="31">fileSetup</name><op:operator pos:line="818" pos:column="40">.</op:operator><name pos:line="818" pos:column="41">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="818" pos:column="65">(<argument><expr><name pos:line="818" pos:column="66">fooXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="818" pos:column="74">"Foo.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="819" pos:column="13">var</name></type> <name pos:line="819" pos:column="17">globalScope</name> <init pos:line="819" pos:column="29">= <expr><call><name><name pos:line="819" pos:column="31">codeParser</name><op:operator pos:line="819" pos:column="41">.</op:operator><name pos:line="819" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="819" pos:column="55">(<argument><expr><name pos:line="819" pos:column="56">fooFileUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="821" pos:column="13">Assert</name><op:operator pos:line="821" pos:column="19">.</op:operator><name pos:line="821" pos:column="20">AreEqual</name></name><argument_list pos:line="821" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="821" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="821" pos:column="32">globalScope</name><op:operator pos:line="821" pos:column="43">.</op:operator><name pos:line="821" pos:column="44">ChildStatements</name><op:operator pos:line="821" pos:column="59">.</op:operator><name pos:line="821" pos:column="60">Count</name></name><argument_list pos:line="821" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="822" pos:column="13">var</name></type> <name pos:line="822" pos:column="17">watermelon</name> <init pos:line="822" pos:column="28">= <expr><call><name><name pos:line="822" pos:column="30">globalScope</name><op:operator pos:line="822" pos:column="41">.</op:operator><name pos:line="822" pos:column="42">ChildStatements</name><op:operator pos:line="822" pos:column="57">.</op:operator><name pos:line="822" pos:column="58">First</name></name><argument_list pos:line="822" pos:column="63">()</argument_list></call> <op:operator pos:line="822" pos:column="66">as</op:operator> <name pos:line="822" pos:column="69">NamespaceDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="823" pos:column="13">Assert</name><op:operator pos:line="823" pos:column="19">.</op:operator><name pos:line="823" pos:column="20">IsNotNull</name></name><argument_list pos:line="823" pos:column="29">(<argument><expr><name pos:line="823" pos:column="30">watermelon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="824" pos:column="13">Assert</name><op:operator pos:line="824" pos:column="19">.</op:operator><name pos:line="824" pos:column="20">AreEqual</name></name><argument_list pos:line="824" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="824" pos:column="29">"Watermelon"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="824" pos:column="43">watermelon</name><op:operator pos:line="824" pos:column="53">.</op:operator><name pos:line="824" pos:column="54">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="825" pos:column="13">Assert</name><op:operator pos:line="825" pos:column="19">.</op:operator><name pos:line="825" pos:column="20">AreEqual</name></name><argument_list pos:line="825" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="825" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="825" pos:column="32">watermelon</name><op:operator pos:line="825" pos:column="42">.</op:operator><name pos:line="825" pos:column="43">ChildStatements</name><op:operator pos:line="825" pos:column="58">.</op:operator><name pos:line="825" pos:column="59">Count</name></name><argument_list pos:line="825" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="826" pos:column="13">var</name></type> <name pos:line="826" pos:column="17">example</name> <init pos:line="826" pos:column="25">= <expr><call><name><name pos:line="826" pos:column="27">watermelon</name><op:operator pos:line="826" pos:column="37">.</op:operator><name pos:line="826" pos:column="38">ChildStatements</name><op:operator pos:line="826" pos:column="53">.</op:operator><name pos:line="826" pos:column="54">First</name></name><argument_list pos:line="826" pos:column="59">()</argument_list></call> <op:operator pos:line="826" pos:column="62">as</op:operator> <name pos:line="826" pos:column="65">NamespaceDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="827" pos:column="13">Assert</name><op:operator pos:line="827" pos:column="19">.</op:operator><name pos:line="827" pos:column="20">IsNotNull</name></name><argument_list pos:line="827" pos:column="29">(<argument><expr><name pos:line="827" pos:column="30">example</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="828" pos:column="13">Assert</name><op:operator pos:line="828" pos:column="19">.</op:operator><name pos:line="828" pos:column="20">AreEqual</name></name><argument_list pos:line="828" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="828" pos:column="29">"Example"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="828" pos:column="40">example</name><op:operator pos:line="828" pos:column="47">.</op:operator><name pos:line="828" pos:column="48">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="829" pos:column="13">Assert</name><op:operator pos:line="829" pos:column="19">.</op:operator><name pos:line="829" pos:column="20">AreEqual</name></name><argument_list pos:line="829" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="829" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="829" pos:column="32">example</name><op:operator pos:line="829" pos:column="39">.</op:operator><name pos:line="829" pos:column="40">ChildStatements</name><op:operator pos:line="829" pos:column="55">.</op:operator><name pos:line="829" pos:column="56">Count</name></name><argument_list pos:line="829" pos:column="61">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="830" pos:column="13">var</name></type> <name pos:line="830" pos:column="17">level2</name> <init pos:line="830" pos:column="24">= <expr><call><name><name pos:line="830" pos:column="26">example</name><op:operator pos:line="830" pos:column="33">.</op:operator><name pos:line="830" pos:column="34">ChildStatements</name><op:operator pos:line="830" pos:column="49">.</op:operator><name pos:line="830" pos:column="50">First</name></name><argument_list pos:line="830" pos:column="55">()</argument_list></call> <op:operator pos:line="830" pos:column="58">as</op:operator> <name pos:line="830" pos:column="61">NamespaceDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="831" pos:column="13">Assert</name><op:operator pos:line="831" pos:column="19">.</op:operator><name pos:line="831" pos:column="20">IsNotNull</name></name><argument_list pos:line="831" pos:column="29">(<argument><expr><name pos:line="831" pos:column="30">level2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="832" pos:column="13">Assert</name><op:operator pos:line="832" pos:column="19">.</op:operator><name pos:line="832" pos:column="20">AreEqual</name></name><argument_list pos:line="832" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="832" pos:column="29">"Level2"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="832" pos:column="39">level2</name><op:operator pos:line="832" pos:column="45">.</op:operator><name pos:line="832" pos:column="46">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="833" pos:column="13">Assert</name><op:operator pos:line="833" pos:column="19">.</op:operator><name pos:line="833" pos:column="20">AreEqual</name></name><argument_list pos:line="833" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="833" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="833" pos:column="32">level2</name><op:operator pos:line="833" pos:column="38">.</op:operator><name pos:line="833" pos:column="39">ChildStatements</name><op:operator pos:line="833" pos:column="54">.</op:operator><name pos:line="833" pos:column="55">Count</name></name><argument_list pos:line="833" pos:column="60">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="834" pos:column="13">var</name></type> <name pos:line="834" pos:column="17">level3</name> <init pos:line="834" pos:column="24">= <expr><call><name><name pos:line="834" pos:column="26">level2</name><op:operator pos:line="834" pos:column="32">.</op:operator><name pos:line="834" pos:column="33">ChildStatements</name><op:operator pos:line="834" pos:column="48">.</op:operator><name pos:line="834" pos:column="49">First</name></name><argument_list pos:line="834" pos:column="54">()</argument_list></call> <op:operator pos:line="834" pos:column="57">as</op:operator> <name pos:line="834" pos:column="60">NamespaceDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="835" pos:column="13">Assert</name><op:operator pos:line="835" pos:column="19">.</op:operator><name pos:line="835" pos:column="20">IsNotNull</name></name><argument_list pos:line="835" pos:column="29">(<argument><expr><name pos:line="835" pos:column="30">level3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="836" pos:column="13">Assert</name><op:operator pos:line="836" pos:column="19">.</op:operator><name pos:line="836" pos:column="20">AreEqual</name></name><argument_list pos:line="836" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="836" pos:column="29">"Level3"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="836" pos:column="39">level3</name><op:operator pos:line="836" pos:column="45">.</op:operator><name pos:line="836" pos:column="46">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="837" pos:column="13">Assert</name><op:operator pos:line="837" pos:column="19">.</op:operator><name pos:line="837" pos:column="20">AreEqual</name></name><argument_list pos:line="837" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="837" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="837" pos:column="32">level3</name><op:operator pos:line="837" pos:column="38">.</op:operator><name pos:line="837" pos:column="39">ChildStatements</name><op:operator pos:line="837" pos:column="54">.</op:operator><name pos:line="837" pos:column="55">Count</name></name><argument_list pos:line="837" pos:column="60">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="838" pos:column="13">var</name></type> <name pos:line="838" pos:column="17">foo</name> <init pos:line="838" pos:column="21">= <expr><call><name><name pos:line="838" pos:column="23">level3</name><op:operator pos:line="838" pos:column="29">.</op:operator><name pos:line="838" pos:column="30">ChildStatements</name><op:operator pos:line="838" pos:column="45">.</op:operator><name pos:line="838" pos:column="46">First</name></name><argument_list pos:line="838" pos:column="51">()</argument_list></call> <op:operator pos:line="838" pos:column="54">as</op:operator> <name pos:line="838" pos:column="57">TypeDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="839" pos:column="13">Assert</name><op:operator pos:line="839" pos:column="19">.</op:operator><name pos:line="839" pos:column="20">IsNotNull</name></name><argument_list pos:line="839" pos:column="29">(<argument><expr><name pos:line="839" pos:column="30">foo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="840" pos:column="13">Assert</name><op:operator pos:line="840" pos:column="19">.</op:operator><name pos:line="840" pos:column="20">AreEqual</name></name><argument_list pos:line="840" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="840" pos:column="29">"Foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="840" pos:column="36">foo</name><op:operator pos:line="840" pos:column="39">.</op:operator><name pos:line="840" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="841" pos:column="13">Assert</name><op:operator pos:line="841" pos:column="19">.</op:operator><name pos:line="841" pos:column="20">AreEqual</name></name><argument_list pos:line="841" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="841" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="841" pos:column="32">foo</name><op:operator pos:line="841" pos:column="35">.</op:operator><name pos:line="841" pos:column="36">ChildStatements</name><op:operator pos:line="841" pos:column="51">.</op:operator><name pos:line="841" pos:column="52">Count</name></name><argument_list pos:line="841" pos:column="57">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="844" pos:column="9">[<expr><name pos:line="844" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="845" pos:column="9">public</specifier> <name pos:line="845" pos:column="16">void</name></type> <name pos:line="845" pos:column="21">TestCreateTypeDefinition_Struct</name><parameter_list pos:line="845" pos:column="52">()</parameter_list> <block pos:line="845" pos:column="55">{
            <comment type="line" pos:line="846" pos:column="13">////Foo.cs</comment>
            <comment type="line" pos:line="847" pos:column="13">//public struct Foo {</comment>
            <comment type="line" pos:line="848" pos:column="13">//    public int bar;</comment>
            <comment type="line" pos:line="849" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="850" pos:column="13">string</name></type> <name pos:line="850" pos:column="20">fooXml</name> <init pos:line="850" pos:column="27">= <expr><lit:literal type="string" pos:line="850" pos:column="29">@"&lt;struct&gt;&lt;specifier&gt;public&lt;/specifier&gt; struct &lt;name&gt;Foo&lt;/name&gt; &lt;block&gt;{
    &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;bar&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
}&lt;/block&gt;&lt;/struct&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="853" pos:column="13">var</name></type> <name pos:line="853" pos:column="17">fooFileUnit</name> <init pos:line="853" pos:column="29">= <expr><call><name><name pos:line="853" pos:column="31">fileSetup</name><op:operator pos:line="853" pos:column="40">.</op:operator><name pos:line="853" pos:column="41">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="853" pos:column="65">(<argument><expr><name pos:line="853" pos:column="66">fooXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="853" pos:column="74">"Foo.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="854" pos:column="13">var</name></type> <name pos:line="854" pos:column="17">globalScope</name> <init pos:line="854" pos:column="29">= <expr><call><name><name pos:line="854" pos:column="31">codeParser</name><op:operator pos:line="854" pos:column="41">.</op:operator><name pos:line="854" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="854" pos:column="55">(<argument><expr><name pos:line="854" pos:column="56">fooFileUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="856" pos:column="13">Assert</name><op:operator pos:line="856" pos:column="19">.</op:operator><name pos:line="856" pos:column="20">AreEqual</name></name><argument_list pos:line="856" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="856" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="856" pos:column="32">globalScope</name><op:operator pos:line="856" pos:column="43">.</op:operator><name pos:line="856" pos:column="44">ChildStatements</name><op:operator pos:line="856" pos:column="59">.</op:operator><name pos:line="856" pos:column="60">Count</name></name><argument_list pos:line="856" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="857" pos:column="13">var</name></type> <name pos:line="857" pos:column="17">foo</name> <init pos:line="857" pos:column="21">= <expr><call><name><name pos:line="857" pos:column="23">globalScope</name><op:operator pos:line="857" pos:column="34">.</op:operator><name pos:line="857" pos:column="35">ChildStatements</name><op:operator pos:line="857" pos:column="50">.</op:operator><name pos:line="857" pos:column="51">First</name></name><argument_list pos:line="857" pos:column="56">()</argument_list></call> <op:operator pos:line="857" pos:column="59">as</op:operator> <name pos:line="857" pos:column="62">TypeDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="858" pos:column="13">Assert</name><op:operator pos:line="858" pos:column="19">.</op:operator><name pos:line="858" pos:column="20">IsNotNull</name></name><argument_list pos:line="858" pos:column="29">(<argument><expr><name pos:line="858" pos:column="30">foo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="859" pos:column="13">Assert</name><op:operator pos:line="859" pos:column="19">.</op:operator><name pos:line="859" pos:column="20">AreEqual</name></name><argument_list pos:line="859" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="859" pos:column="29">"Foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="859" pos:column="36">foo</name><op:operator pos:line="859" pos:column="39">.</op:operator><name pos:line="859" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="860" pos:column="13">Assert</name><op:operator pos:line="860" pos:column="19">.</op:operator><name pos:line="860" pos:column="20">AreEqual</name></name><argument_list pos:line="860" pos:column="28">(<argument><expr><name><name pos:line="860" pos:column="29">TypeKind</name><op:operator pos:line="860" pos:column="37">.</op:operator><name pos:line="860" pos:column="38">Struct</name></name></expr></argument>, <argument><expr><name><name pos:line="860" pos:column="46">foo</name><op:operator pos:line="860" pos:column="49">.</op:operator><name pos:line="860" pos:column="50">Kind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="861" pos:column="13">Assert</name><op:operator pos:line="861" pos:column="19">.</op:operator><name pos:line="861" pos:column="20">AreEqual</name></name><argument_list pos:line="861" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="861" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="861" pos:column="32">foo</name><op:operator pos:line="861" pos:column="35">.</op:operator><name pos:line="861" pos:column="36">ChildStatements</name><op:operator pos:line="861" pos:column="51">.</op:operator><name pos:line="861" pos:column="52">Count</name></name><argument_list pos:line="861" pos:column="57">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="864" pos:column="9">[<expr><name pos:line="864" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="865" pos:column="9">public</specifier> <name pos:line="865" pos:column="16">void</name></type> <name pos:line="865" pos:column="21">TestCreateTypeDefinitions_ClassWithInnerClass</name><parameter_list pos:line="865" pos:column="66">()</parameter_list> <block pos:line="865" pos:column="69">{
            <comment type="line" pos:line="866" pos:column="13">////A.cs</comment>
            <comment type="line" pos:line="867" pos:column="13">//class A {</comment>
            <comment type="line" pos:line="868" pos:column="13">//    class B {}</comment>
            <comment type="line" pos:line="869" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="870" pos:column="13">string</name></type> <name pos:line="870" pos:column="20">xml</name> <init pos:line="870" pos:column="24">= <expr><lit:literal type="string" pos:line="870" pos:column="26">@"&lt;class&gt;class &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{
    &lt;class&gt;class &lt;name&gt;B&lt;/name&gt; &lt;block&gt;{}&lt;/block&gt;&lt;/class&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="873" pos:column="13">var</name></type> <name pos:line="873" pos:column="17">xmlElement</name> <init pos:line="873" pos:column="28">= <expr><call><name><name pos:line="873" pos:column="30">fileSetup</name><op:operator pos:line="873" pos:column="39">.</op:operator><name pos:line="873" pos:column="40">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="873" pos:column="64">(<argument><expr><name pos:line="873" pos:column="65">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="873" pos:column="70">"A.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="874" pos:column="13">var</name></type> <name pos:line="874" pos:column="17">globalScope</name> <init pos:line="874" pos:column="29">= <expr><call><name><name pos:line="874" pos:column="31">codeParser</name><op:operator pos:line="874" pos:column="41">.</op:operator><name pos:line="874" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="874" pos:column="55">(<argument><expr><name pos:line="874" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="876" pos:column="13">Assert</name><op:operator pos:line="876" pos:column="19">.</op:operator><name pos:line="876" pos:column="20">AreEqual</name></name><argument_list pos:line="876" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="876" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="876" pos:column="32">globalScope</name><op:operator pos:line="876" pos:column="43">.</op:operator><name pos:line="876" pos:column="44">ChildStatements</name><op:operator pos:line="876" pos:column="59">.</op:operator><name pos:line="876" pos:column="60">Count</name></name><argument_list pos:line="876" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="877" pos:column="13">var</name></type> <name pos:line="877" pos:column="17">typeA</name> <init pos:line="877" pos:column="23">= <expr><call><name><name pos:line="877" pos:column="25">globalScope</name><op:operator pos:line="877" pos:column="36">.</op:operator><name pos:line="877" pos:column="37">ChildStatements</name><op:operator pos:line="877" pos:column="52">.</op:operator><name pos:line="877" pos:column="53">First</name></name><argument_list pos:line="877" pos:column="58">()</argument_list></call> <op:operator pos:line="877" pos:column="61">as</op:operator> <name pos:line="877" pos:column="64">TypeDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="878" pos:column="13">Assert</name><op:operator pos:line="878" pos:column="19">.</op:operator><name pos:line="878" pos:column="20">IsNotNull</name></name><argument_list pos:line="878" pos:column="29">(<argument><expr><name pos:line="878" pos:column="30">typeA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="879" pos:column="13">Assert</name><op:operator pos:line="879" pos:column="19">.</op:operator><name pos:line="879" pos:column="20">AreEqual</name></name><argument_list pos:line="879" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="879" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="879" pos:column="32">typeA</name><op:operator pos:line="879" pos:column="37">.</op:operator><name pos:line="879" pos:column="38">ChildStatements</name><op:operator pos:line="879" pos:column="53">.</op:operator><name pos:line="879" pos:column="54">Count</name></name><argument_list pos:line="879" pos:column="59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="880" pos:column="13">var</name></type> <name pos:line="880" pos:column="17">typeB</name> <init pos:line="880" pos:column="23">= <expr><call><name><name pos:line="880" pos:column="25">typeA</name><op:operator pos:line="880" pos:column="30">.</op:operator><name pos:line="880" pos:column="31">ChildStatements</name><op:operator pos:line="880" pos:column="46">.</op:operator><name pos:line="880" pos:column="47">First</name></name><argument_list pos:line="880" pos:column="52">()</argument_list></call> <op:operator pos:line="880" pos:column="55">as</op:operator> <name pos:line="880" pos:column="58">TypeDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="881" pos:column="13">Assert</name><op:operator pos:line="881" pos:column="19">.</op:operator><name pos:line="881" pos:column="20">IsNotNull</name></name><argument_list pos:line="881" pos:column="29">(<argument><expr><name pos:line="881" pos:column="30">typeB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="883" pos:column="13">Assert</name><op:operator pos:line="883" pos:column="19">.</op:operator><name pos:line="883" pos:column="20">AreSame</name></name><argument_list pos:line="883" pos:column="27">(<argument><expr><name pos:line="883" pos:column="28">typeA</name></expr></argument>, <argument><expr><name><name pos:line="883" pos:column="35">typeB</name><op:operator pos:line="883" pos:column="40">.</op:operator><name pos:line="883" pos:column="41">ParentStatement</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="884" pos:column="13">Assert</name><op:operator pos:line="884" pos:column="19">.</op:operator><name pos:line="884" pos:column="20">AreEqual</name></name><argument_list pos:line="884" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="884" pos:column="29">"A"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="884" pos:column="34">typeA</name><op:operator pos:line="884" pos:column="39">.</op:operator><name pos:line="884" pos:column="40">GetFullName</name></name><argument_list pos:line="884" pos:column="51">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="885" pos:column="13">Assert</name><op:operator pos:line="885" pos:column="19">.</op:operator><name pos:line="885" pos:column="20">AreEqual</name></name><argument_list pos:line="885" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="885" pos:column="29">"A.B"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="885" pos:column="36">typeB</name><op:operator pos:line="885" pos:column="41">.</op:operator><name pos:line="885" pos:column="42">GetFullName</name></name><argument_list pos:line="885" pos:column="53">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="888" pos:column="9">[<expr><name pos:line="888" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="889" pos:column="9">public</specifier> <name pos:line="889" pos:column="16">void</name></type> <name pos:line="889" pos:column="21">TestCreateTypeDefinitions_InnerClassWithNamespace</name><parameter_list pos:line="889" pos:column="70">()</parameter_list> <block pos:line="889" pos:column="73">{
            <comment type="line" pos:line="890" pos:column="13">////A.cs</comment>
            <comment type="line" pos:line="891" pos:column="13">//namespace Foo {</comment>
            <comment type="line" pos:line="892" pos:column="13">//    class A {</comment>
            <comment type="line" pos:line="893" pos:column="13">//        class B {}</comment>
            <comment type="line" pos:line="894" pos:column="13">//    }</comment>
            <comment type="line" pos:line="895" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="896" pos:column="13">string</name></type> <name pos:line="896" pos:column="20">xml</name> <init pos:line="896" pos:column="24">= <expr><lit:literal type="string" pos:line="896" pos:column="26">@"&lt;namespace&gt;namespace &lt;name&gt;Foo&lt;/name&gt; &lt;block&gt;{
    &lt;class&gt;class &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{
        &lt;class&gt;class &lt;name&gt;B&lt;/name&gt; &lt;block&gt;{}&lt;/block&gt;&lt;/class&gt;
    }&lt;/block&gt;&lt;/class&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="901" pos:column="13">var</name></type> <name pos:line="901" pos:column="17">xmlElement</name> <init pos:line="901" pos:column="28">= <expr><call><name><name pos:line="901" pos:column="30">fileSetup</name><op:operator pos:line="901" pos:column="39">.</op:operator><name pos:line="901" pos:column="40">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="901" pos:column="64">(<argument><expr><name pos:line="901" pos:column="65">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="901" pos:column="70">"A.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="902" pos:column="13">var</name></type> <name pos:line="902" pos:column="17">globalScope</name> <init pos:line="902" pos:column="29">= <expr><call><name><name pos:line="902" pos:column="31">codeParser</name><op:operator pos:line="902" pos:column="41">.</op:operator><name pos:line="902" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="902" pos:column="55">(<argument><expr><name pos:line="902" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="904" pos:column="13">Assert</name><op:operator pos:line="904" pos:column="19">.</op:operator><name pos:line="904" pos:column="20">AreEqual</name></name><argument_list pos:line="904" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="904" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="904" pos:column="32">globalScope</name><op:operator pos:line="904" pos:column="43">.</op:operator><name pos:line="904" pos:column="44">ChildStatements</name><op:operator pos:line="904" pos:column="59">.</op:operator><name pos:line="904" pos:column="60">Count</name></name><argument_list pos:line="904" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="905" pos:column="13">var</name></type> <name pos:line="905" pos:column="17">foo</name> <init pos:line="905" pos:column="21">= <expr><call><name><name pos:line="905" pos:column="23">globalScope</name><op:operator pos:line="905" pos:column="34">.</op:operator><name pos:line="905" pos:column="35">ChildStatements</name><op:operator pos:line="905" pos:column="50">.</op:operator><name pos:line="905" pos:column="51">First</name></name><argument_list pos:line="905" pos:column="56">()</argument_list></call> <op:operator pos:line="905" pos:column="59">as</op:operator> <name pos:line="905" pos:column="62">NamespaceDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="906" pos:column="13">Assert</name><op:operator pos:line="906" pos:column="19">.</op:operator><name pos:line="906" pos:column="20">IsNotNull</name></name><argument_list pos:line="906" pos:column="29">(<argument><expr><name pos:line="906" pos:column="30">foo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="907" pos:column="13">Assert</name><op:operator pos:line="907" pos:column="19">.</op:operator><name pos:line="907" pos:column="20">AreEqual</name></name><argument_list pos:line="907" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="907" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="907" pos:column="32">foo</name><op:operator pos:line="907" pos:column="35">.</op:operator><name pos:line="907" pos:column="36">ChildStatements</name><op:operator pos:line="907" pos:column="51">.</op:operator><name pos:line="907" pos:column="52">Count</name></name><argument_list pos:line="907" pos:column="57">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="908" pos:column="13">var</name></type> <name pos:line="908" pos:column="17">typeA</name> <init pos:line="908" pos:column="23">= <expr><call><name><name pos:line="908" pos:column="25">foo</name><op:operator pos:line="908" pos:column="28">.</op:operator><name pos:line="908" pos:column="29">ChildStatements</name><op:operator pos:line="908" pos:column="44">.</op:operator><name pos:line="908" pos:column="45">First</name></name><argument_list pos:line="908" pos:column="50">()</argument_list></call> <op:operator pos:line="908" pos:column="53">as</op:operator> <name pos:line="908" pos:column="56">TypeDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="909" pos:column="13">Assert</name><op:operator pos:line="909" pos:column="19">.</op:operator><name pos:line="909" pos:column="20">IsNotNull</name></name><argument_list pos:line="909" pos:column="29">(<argument><expr><name pos:line="909" pos:column="30">typeA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="910" pos:column="13">Assert</name><op:operator pos:line="910" pos:column="19">.</op:operator><name pos:line="910" pos:column="20">AreEqual</name></name><argument_list pos:line="910" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="910" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="910" pos:column="32">typeA</name><op:operator pos:line="910" pos:column="37">.</op:operator><name pos:line="910" pos:column="38">ChildStatements</name><op:operator pos:line="910" pos:column="53">.</op:operator><name pos:line="910" pos:column="54">Count</name></name><argument_list pos:line="910" pos:column="59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="911" pos:column="13">var</name></type> <name pos:line="911" pos:column="17">typeB</name> <init pos:line="911" pos:column="23">= <expr><call><name><name pos:line="911" pos:column="25">typeA</name><op:operator pos:line="911" pos:column="30">.</op:operator><name pos:line="911" pos:column="31">ChildStatements</name><op:operator pos:line="911" pos:column="46">.</op:operator><name pos:line="911" pos:column="47">First</name></name><argument_list pos:line="911" pos:column="52">()</argument_list></call> <op:operator pos:line="911" pos:column="55">as</op:operator> <name pos:line="911" pos:column="58">TypeDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="912" pos:column="13">Assert</name><op:operator pos:line="912" pos:column="19">.</op:operator><name pos:line="912" pos:column="20">IsNotNull</name></name><argument_list pos:line="912" pos:column="29">(<argument><expr><name pos:line="912" pos:column="30">typeB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="914" pos:column="13">Assert</name><op:operator pos:line="914" pos:column="19">.</op:operator><name pos:line="914" pos:column="20">AreEqual</name></name><argument_list pos:line="914" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="914" pos:column="29">"A"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="914" pos:column="34">typeA</name><op:operator pos:line="914" pos:column="39">.</op:operator><name pos:line="914" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="915" pos:column="13">Assert</name><op:operator pos:line="915" pos:column="19">.</op:operator><name pos:line="915" pos:column="20">AreEqual</name></name><argument_list pos:line="915" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="915" pos:column="29">"Foo"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="915" pos:column="36">typeA</name><op:operator pos:line="915" pos:column="41">.</op:operator><name><name pos:line="915" pos:column="42">GetAncestors</name><argument_list pos:line="915" pos:column="54">&lt;<argument><name pos:line="915" pos:column="55">NamespaceDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="915" pos:column="75">()</argument_list></call><op:operator pos:line="915" pos:column="77">.</op:operator><call><name pos:line="915" pos:column="78">First</name><argument_list pos:line="915" pos:column="83">()</argument_list></call><op:operator pos:line="915" pos:column="85">.</op:operator><call><name pos:line="915" pos:column="86">GetFullName</name><argument_list pos:line="915" pos:column="97">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="916" pos:column="13">Assert</name><op:operator pos:line="916" pos:column="19">.</op:operator><name pos:line="916" pos:column="20">AreEqual</name></name><argument_list pos:line="916" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="916" pos:column="29">"Foo.A"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="916" pos:column="38">typeA</name><op:operator pos:line="916" pos:column="43">.</op:operator><name pos:line="916" pos:column="44">GetFullName</name></name><argument_list pos:line="916" pos:column="55">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="918" pos:column="13">Assert</name><op:operator pos:line="918" pos:column="19">.</op:operator><name pos:line="918" pos:column="20">AreEqual</name></name><argument_list pos:line="918" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="918" pos:column="29">"B"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="918" pos:column="34">typeB</name><op:operator pos:line="918" pos:column="39">.</op:operator><name pos:line="918" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="919" pos:column="13">Assert</name><op:operator pos:line="919" pos:column="19">.</op:operator><name pos:line="919" pos:column="20">AreEqual</name></name><argument_list pos:line="919" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="919" pos:column="29">"Foo"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="919" pos:column="36">typeB</name><op:operator pos:line="919" pos:column="41">.</op:operator><name><name pos:line="919" pos:column="42">GetAncestors</name><argument_list pos:line="919" pos:column="54">&lt;<argument><name pos:line="919" pos:column="55">NamespaceDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="919" pos:column="75">()</argument_list></call><op:operator pos:line="919" pos:column="77">.</op:operator><call><name pos:line="919" pos:column="78">First</name><argument_list pos:line="919" pos:column="83">()</argument_list></call><op:operator pos:line="919" pos:column="85">.</op:operator><call><name pos:line="919" pos:column="86">GetFullName</name><argument_list pos:line="919" pos:column="97">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="920" pos:column="13">Assert</name><op:operator pos:line="920" pos:column="19">.</op:operator><name pos:line="920" pos:column="20">AreEqual</name></name><argument_list pos:line="920" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="920" pos:column="29">"Foo.A.B"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="920" pos:column="40">typeB</name><op:operator pos:line="920" pos:column="45">.</op:operator><name pos:line="920" pos:column="46">GetFullName</name></name><argument_list pos:line="920" pos:column="57">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="923" pos:column="9">[<expr><name pos:line="923" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="924" pos:column="9">public</specifier> <name pos:line="924" pos:column="16">void</name></type> <name pos:line="924" pos:column="21">TestDeclarationWithTypeVarFromConstructor</name><parameter_list pos:line="924" pos:column="62">()</parameter_list> <block pos:line="924" pos:column="65">{
            <comment type="line" pos:line="925" pos:column="13">// B.cs namespace A { class B { public B() { }; } }</comment>
            <decl_stmt><decl><type><name pos:line="926" pos:column="13">string</name></type> <name pos:line="926" pos:column="20">bXml</name> <init pos:line="926" pos:column="25">= <expr><lit:literal type="string" pos:line="926" pos:column="27">@"&lt;namespace&gt;namespace &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{ &lt;class&gt;class &lt;name&gt;B&lt;/name&gt; &lt;block&gt;{ &lt;constructor&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;B&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ }&lt;/block&gt;&lt;/constructor&gt;&lt;empty_stmt&gt;;&lt;/empty_stmt&gt; }&lt;/block&gt;&lt;/class&gt; }&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="927" pos:column="13">// C.cs namespace A { class C { void main() { var b = new B(); } } }</comment>
            <decl_stmt><decl><type><name pos:line="928" pos:column="13">string</name></type> <name pos:line="928" pos:column="20">cXml</name> <init pos:line="928" pos:column="25">= <expr><lit:literal type="string" pos:line="928" pos:column="27">@"&lt;namespace&gt;namespace &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{ &lt;class&gt;class &lt;name&gt;C&lt;/name&gt; &lt;block&gt;{ &lt;function&gt;&lt;type&gt;&lt;name&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name&gt;main&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;var&lt;/name&gt;&lt;/type&gt; &lt;name&gt;b&lt;/name&gt; =&lt;init&gt; &lt;expr&gt;&lt;op:operator&gt;new&lt;/op:operator&gt; &lt;call&gt;&lt;name&gt;B&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;&lt;/init&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt; }&lt;/block&gt;&lt;/function&gt; }&lt;/block&gt;&lt;/class&gt; }&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="930" pos:column="13">var</name></type> <name pos:line="930" pos:column="17">bUnit</name> <init pos:line="930" pos:column="23">= <expr><call><name><name pos:line="930" pos:column="25">fileSetup</name><op:operator pos:line="930" pos:column="34">.</op:operator><name pos:line="930" pos:column="35">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="930" pos:column="59">(<argument><expr><name pos:line="930" pos:column="60">bXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="930" pos:column="66">"B.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="931" pos:column="13">var</name></type> <name pos:line="931" pos:column="17">cUnit</name> <init pos:line="931" pos:column="23">= <expr><call><name><name pos:line="931" pos:column="25">fileSetup</name><op:operator pos:line="931" pos:column="34">.</op:operator><name pos:line="931" pos:column="35">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="931" pos:column="59">(<argument><expr><name pos:line="931" pos:column="60">cXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="931" pos:column="66">"C.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="932" pos:column="13">var</name></type> <name pos:line="932" pos:column="17">bScope</name> <init pos:line="932" pos:column="24">= <expr><call><name><name pos:line="932" pos:column="26">codeParser</name><op:operator pos:line="932" pos:column="36">.</op:operator><name pos:line="932" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="932" pos:column="50">(<argument><expr><name pos:line="932" pos:column="51">bUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="933" pos:column="13">var</name></type> <name pos:line="933" pos:column="17">cScope</name> <init pos:line="933" pos:column="24">= <expr><call><name><name pos:line="933" pos:column="26">codeParser</name><op:operator pos:line="933" pos:column="36">.</op:operator><name pos:line="933" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="933" pos:column="50">(<argument><expr><name pos:line="933" pos:column="51">cUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="934" pos:column="13">var</name></type> <name pos:line="934" pos:column="17">globalScope</name> <init pos:line="934" pos:column="29">= <expr><call><name><name pos:line="934" pos:column="31">bScope</name><op:operator pos:line="934" pos:column="37">.</op:operator><name pos:line="934" pos:column="38">Merge</name></name><argument_list pos:line="934" pos:column="43">(<argument><expr><name pos:line="934" pos:column="44">cScope</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="936" pos:column="13">var</name></type> <name pos:line="936" pos:column="17">typeB</name> <init pos:line="936" pos:column="23">= <expr><call><name><name pos:line="936" pos:column="25">globalScope</name><op:operator pos:line="936" pos:column="36">.</op:operator><name><name pos:line="936" pos:column="37">GetDescendants</name><argument_list pos:line="936" pos:column="51">&lt;<argument><name pos:line="936" pos:column="52">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="936" pos:column="67">()</argument_list></call><op:operator pos:line="936" pos:column="69">.</op:operator><call><name pos:line="936" pos:column="70">FirstOrDefault</name><argument_list pos:line="936" pos:column="84">(<argument><expr><lambda><name pos:line="936" pos:column="85">t</name> <op:operator pos:line="936" pos:column="87">=&gt;</op:operator> <name><name pos:line="936" pos:column="90">t</name><op:operator pos:line="936" pos:column="91">.</op:operator><name pos:line="936" pos:column="92">Name</name></name> <op:operator pos:line="936" pos:column="97">==</op:operator> <lit:literal type="string" pos:line="936" pos:column="100">"B"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="937" pos:column="13">Assert</name><op:operator pos:line="937" pos:column="19">.</op:operator><name pos:line="937" pos:column="20">IsNotNull</name></name><argument_list pos:line="937" pos:column="29">(<argument><expr><name pos:line="937" pos:column="30">typeB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="938" pos:column="13">var</name></type> main <init pos:line="938" pos:column="22">= <expr><call><name><name pos:line="938" pos:column="24">globalScope</name><op:operator pos:line="938" pos:column="35">.</op:operator><name><name pos:line="938" pos:column="36">GetDescendants</name><argument_list pos:line="938" pos:column="50">&lt;<argument><name pos:line="938" pos:column="51">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="938" pos:column="68">()</argument_list></call><op:operator pos:line="938" pos:column="70">.</op:operator><call><name pos:line="938" pos:column="71">FirstOrDefault</name><argument_list pos:line="938" pos:column="85">(<argument><expr><lambda><name pos:line="938" pos:column="86">m</name> <op:operator pos:line="938" pos:column="88">=&gt;</op:operator> <name><name pos:line="938" pos:column="91">m</name><op:operator pos:line="938" pos:column="92">.</op:operator><name pos:line="938" pos:column="93">Name</name></name> <op:operator pos:line="938" pos:column="98">==</op:operator> <lit:literal type="string" pos:line="938" pos:column="101">"main"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="939" pos:column="13">Assert</name><op:operator pos:line="939" pos:column="19">.</op:operator><name pos:line="939" pos:column="20">IsNotNull</name></name><argument_list pos:line="939" pos:column="29">(<argument><expr pos:line="939" pos:column="30">main</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="941" pos:column="13">Assert</name><op:operator pos:line="941" pos:column="19">.</op:operator><name pos:line="941" pos:column="20">AreEqual</name></name><argument_list pos:line="941" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="941" pos:column="29">1</lit:literal></expr></argument>, <argument><expr pos:line="941" pos:column="32">main<op:operator pos:line="941" pos:column="36">.</op:operator><name><name pos:line="941" pos:column="37">ChildStatements</name><op:operator pos:line="941" pos:column="52">.</op:operator><name pos:line="941" pos:column="53">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="942" pos:column="13">var</name></type> <name pos:line="942" pos:column="17">varDecl</name> <init pos:line="942" pos:column="25">= <expr pos:line="942" pos:column="27">main<op:operator pos:line="942" pos:column="31">.</op:operator><name><name pos:line="942" pos:column="32">ChildStatements</name><index pos:line="942" pos:column="47">[<expr><lit:literal type="number" pos:line="942" pos:column="48">0</lit:literal></expr>]</index></name><op:operator pos:line="942" pos:column="50">.</op:operator><call><name><name pos:line="942" pos:column="51">Content</name><op:operator pos:line="942" pos:column="58">.</op:operator><name><name pos:line="942" pos:column="59">GetDescendantsAndSelf</name><argument_list pos:line="942" pos:column="80">&lt;<argument><name pos:line="942" pos:column="81">VariableDeclaration</name></argument>&gt;</argument_list></name></name><argument_list pos:line="942" pos:column="101">()</argument_list></call><op:operator pos:line="942" pos:column="103">.</op:operator><call><name pos:line="942" pos:column="104">FirstOrDefault</name><argument_list pos:line="942" pos:column="118">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="943" pos:column="13">Assert</name><op:operator pos:line="943" pos:column="19">.</op:operator><name pos:line="943" pos:column="20">IsNotNull</name></name><argument_list pos:line="943" pos:column="29">(<argument><expr><name pos:line="943" pos:column="30">varDecl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="945" pos:column="13">Assert</name><op:operator pos:line="945" pos:column="19">.</op:operator><name pos:line="945" pos:column="20">AreSame</name></name><argument_list pos:line="945" pos:column="27">(<argument><expr><name pos:line="945" pos:column="28">typeB</name></expr></argument>, <argument><expr><call><name><name pos:line="945" pos:column="35">varDecl</name><op:operator pos:line="945" pos:column="42">.</op:operator><name pos:line="945" pos:column="43">ResolveType</name></name><argument_list pos:line="945" pos:column="54">()</argument_list></call><op:operator pos:line="945" pos:column="56">.</op:operator><call><name pos:line="945" pos:column="57">FirstOrDefault</name><argument_list pos:line="945" pos:column="71">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="948" pos:column="9">[<expr><name pos:line="948" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="949" pos:column="9">public</specifier> <name pos:line="949" pos:column="16">void</name></type> <name pos:line="949" pos:column="21">TestDeclarationWithTypeVarFromImplicitConstructor</name><parameter_list pos:line="949" pos:column="70">()</parameter_list> <block pos:line="949" pos:column="73">{
            <comment type="line" pos:line="950" pos:column="13">// B.cs namespace A { class B { } }</comment>
            <decl_stmt><decl><type><name pos:line="951" pos:column="13">string</name></type> <name pos:line="951" pos:column="20">bXml</name> <init pos:line="951" pos:column="25">= <expr><lit:literal type="string" pos:line="951" pos:column="27">@"&lt;namespace pos:line=""1"" pos:column="&gt;namespace &lt;name pos:line=""1"" pos:column=""&gt;A&lt;/name&gt; &lt;block pos:line=""1"" pos:column=""&gt;{ &lt;class pos:line=""1"" pos:column=""&gt;class &lt;name pos:line=""1"" pos:column=""&gt;B&lt;/name&gt; &lt;block pos:line=""1"" pos:column=""&gt;{ }&lt;/block&gt;&lt;/class&gt; }&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="952" pos:column="13">// C.cs namespace A { class C { void main() { var b = new B(); } } }</comment>
            <decl_stmt><decl><type><name pos:line="953" pos:column="13">string</name></type> <name pos:line="953" pos:column="20">cXml</name> <init pos:line="953" pos:column="25">= <expr><lit:literal type="string" pos:line="953" pos:column="27">@"&lt;namespace pos:line=""1"" pos:column="&gt;namespace &lt;name pos:line=""1"" pos:column=""&gt;A&lt;/name&gt; &lt;block pos:line=""1"" pos:column=""&gt;{ &lt;class pos:line=""1"" pos:column=""&gt;class &lt;name pos:line=""1"" pos:column=""&gt;C&lt;/name&gt; &lt;block pos:line=""1"" pos:column=""&gt;{ &lt;function&gt;&lt;type&gt;&lt;name pos:line=""1"" pos:column=""&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""1"" pos:column=""&gt;main&lt;/name&gt;&lt;parameter_list pos:line=""1"" pos:column=""&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""1"" pos:column=""&gt;{ &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""1"" pos:column=""&gt;var&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""1"" pos:column=""&gt;b&lt;/name&gt; &lt;init pos:line=""1"" pos:column=""&gt;= &lt;expr&gt;&lt;op:operator pos:line=""1"" pos:column=""&gt;new&lt;/op:operator&gt; &lt;call&gt;&lt;name pos:line=""1"" pos:column=""&gt;B&lt;/name&gt;&lt;argument_list pos:line=""1"" pos:column=""&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;&lt;/init&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt; }&lt;/block&gt;&lt;/function&gt; }&lt;/block&gt;&lt;/class&gt; }&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="955" pos:column="13">var</name></type> <name pos:line="955" pos:column="17">bUnit</name> <init pos:line="955" pos:column="23">= <expr><call><name><name pos:line="955" pos:column="25">fileSetup</name><op:operator pos:line="955" pos:column="34">.</op:operator><name pos:line="955" pos:column="35">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="955" pos:column="59">(<argument><expr><name pos:line="955" pos:column="60">bXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="955" pos:column="66">"B.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="956" pos:column="13">var</name></type> <name pos:line="956" pos:column="17">cUnit</name> <init pos:line="956" pos:column="23">= <expr><call><name><name pos:line="956" pos:column="25">fileSetup</name><op:operator pos:line="956" pos:column="34">.</op:operator><name pos:line="956" pos:column="35">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="956" pos:column="59">(<argument><expr><name pos:line="956" pos:column="60">cXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="956" pos:column="66">"C.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="957" pos:column="13">var</name></type> <name pos:line="957" pos:column="17">bScope</name> <init pos:line="957" pos:column="24">= <expr><call><name><name pos:line="957" pos:column="26">codeParser</name><op:operator pos:line="957" pos:column="36">.</op:operator><name pos:line="957" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="957" pos:column="50">(<argument><expr><name pos:line="957" pos:column="51">bUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="958" pos:column="13">var</name></type> <name pos:line="958" pos:column="17">cScope</name> <init pos:line="958" pos:column="24">= <expr><call><name><name pos:line="958" pos:column="26">codeParser</name><op:operator pos:line="958" pos:column="36">.</op:operator><name pos:line="958" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="958" pos:column="50">(<argument><expr><name pos:line="958" pos:column="51">cUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="959" pos:column="13">var</name></type> <name pos:line="959" pos:column="17">globalScope</name> <init pos:line="959" pos:column="29">= <expr><call><name><name pos:line="959" pos:column="31">bScope</name><op:operator pos:line="959" pos:column="37">.</op:operator><name pos:line="959" pos:column="38">Merge</name></name><argument_list pos:line="959" pos:column="43">(<argument><expr><name pos:line="959" pos:column="44">cScope</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="961" pos:column="13">var</name></type> <name pos:line="961" pos:column="17">typeB</name> <init pos:line="961" pos:column="23">= <expr><call><name><name pos:line="961" pos:column="25">globalScope</name><op:operator pos:line="961" pos:column="36">.</op:operator><name><name pos:line="961" pos:column="37">GetDescendants</name><argument_list pos:line="961" pos:column="51">&lt;<argument><name pos:line="961" pos:column="52">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="961" pos:column="67">()</argument_list></call><op:operator pos:line="961" pos:column="69">.</op:operator><call><name pos:line="961" pos:column="70">FirstOrDefault</name><argument_list pos:line="961" pos:column="84">(<argument><expr><lambda><name pos:line="961" pos:column="85">t</name> <op:operator pos:line="961" pos:column="87">=&gt;</op:operator> <name><name pos:line="961" pos:column="90">t</name><op:operator pos:line="961" pos:column="91">.</op:operator><name pos:line="961" pos:column="92">Name</name></name> <op:operator pos:line="961" pos:column="97">==</op:operator> <lit:literal type="string" pos:line="961" pos:column="100">"B"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="962" pos:column="13">Assert</name><op:operator pos:line="962" pos:column="19">.</op:operator><name pos:line="962" pos:column="20">IsNotNull</name></name><argument_list pos:line="962" pos:column="29">(<argument><expr><name pos:line="962" pos:column="30">typeB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="963" pos:column="13">var</name></type> main <init pos:line="963" pos:column="22">= <expr><call><name><name pos:line="963" pos:column="24">globalScope</name><op:operator pos:line="963" pos:column="35">.</op:operator><name><name pos:line="963" pos:column="36">GetDescendants</name><argument_list pos:line="963" pos:column="50">&lt;<argument><name pos:line="963" pos:column="51">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="963" pos:column="68">()</argument_list></call><op:operator pos:line="963" pos:column="70">.</op:operator><call><name pos:line="963" pos:column="71">FirstOrDefault</name><argument_list pos:line="963" pos:column="85">(<argument><expr><lambda><name pos:line="963" pos:column="86">m</name> <op:operator pos:line="963" pos:column="88">=&gt;</op:operator> <name><name pos:line="963" pos:column="91">m</name><op:operator pos:line="963" pos:column="92">.</op:operator><name pos:line="963" pos:column="93">Name</name></name> <op:operator pos:line="963" pos:column="98">==</op:operator> <lit:literal type="string" pos:line="963" pos:column="101">"main"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="964" pos:column="13">Assert</name><op:operator pos:line="964" pos:column="19">.</op:operator><name pos:line="964" pos:column="20">IsNotNull</name></name><argument_list pos:line="964" pos:column="29">(<argument><expr pos:line="964" pos:column="30">main</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="966" pos:column="13">Assert</name><op:operator pos:line="966" pos:column="19">.</op:operator><name pos:line="966" pos:column="20">AreEqual</name></name><argument_list pos:line="966" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="966" pos:column="29">1</lit:literal></expr></argument>, <argument><expr pos:line="966" pos:column="32">main<op:operator pos:line="966" pos:column="36">.</op:operator><name><name pos:line="966" pos:column="37">ChildStatements</name><op:operator pos:line="966" pos:column="52">.</op:operator><name pos:line="966" pos:column="53">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="967" pos:column="13">var</name></type> <name pos:line="967" pos:column="17">varDecl</name> <init pos:line="967" pos:column="25">= <expr pos:line="967" pos:column="27">main<op:operator pos:line="967" pos:column="31">.</op:operator><name><name pos:line="967" pos:column="32">ChildStatements</name><index pos:line="967" pos:column="47">[<expr><lit:literal type="number" pos:line="967" pos:column="48">0</lit:literal></expr>]</index></name><op:operator pos:line="967" pos:column="50">.</op:operator><call><name><name pos:line="967" pos:column="51">Content</name><op:operator pos:line="967" pos:column="58">.</op:operator><name><name pos:line="967" pos:column="59">GetDescendantsAndSelf</name><argument_list pos:line="967" pos:column="80">&lt;<argument><name pos:line="967" pos:column="81">VariableDeclaration</name></argument>&gt;</argument_list></name></name><argument_list pos:line="967" pos:column="101">()</argument_list></call><op:operator pos:line="967" pos:column="103">.</op:operator><call><name pos:line="967" pos:column="104">FirstOrDefault</name><argument_list pos:line="967" pos:column="118">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="968" pos:column="13">Assert</name><op:operator pos:line="968" pos:column="19">.</op:operator><name pos:line="968" pos:column="20">IsNotNull</name></name><argument_list pos:line="968" pos:column="29">(<argument><expr><name pos:line="968" pos:column="30">varDecl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="970" pos:column="13">Assert</name><op:operator pos:line="970" pos:column="19">.</op:operator><name pos:line="970" pos:column="20">AreSame</name></name><argument_list pos:line="970" pos:column="27">(<argument><expr><name pos:line="970" pos:column="28">typeB</name></expr></argument>, <argument><expr><call><name><name pos:line="970" pos:column="35">varDecl</name><op:operator pos:line="970" pos:column="42">.</op:operator><name pos:line="970" pos:column="43">ResolveType</name></name><argument_list pos:line="970" pos:column="54">()</argument_list></call><op:operator pos:line="970" pos:column="56">.</op:operator><call><name pos:line="970" pos:column="57">FirstOrDefault</name><argument_list pos:line="970" pos:column="71">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="973" pos:column="9">[<expr><name pos:line="973" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="974" pos:column="9">public</specifier> <name pos:line="974" pos:column="16">void</name></type> <name pos:line="974" pos:column="21">TestDeclarationWithTypeVarFromMethod</name><parameter_list pos:line="974" pos:column="57">()</parameter_list> <block pos:line="974" pos:column="60">{
            <comment type="line" pos:line="975" pos:column="13">//namespace A {</comment>
            <comment type="line" pos:line="976" pos:column="13">//    class B {</comment>
            <comment type="line" pos:line="977" pos:column="13">//        public static void main() { var b = getB(); }</comment>
            <comment type="line" pos:line="978" pos:column="13">//        public static B getB() { return new B(); }</comment>
            <comment type="line" pos:line="979" pos:column="13">//    }</comment>
            <comment type="line" pos:line="980" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="981" pos:column="13">string</name></type> <name pos:line="981" pos:column="20">xml</name> <init pos:line="981" pos:column="24">= <expr><lit:literal type="string" pos:line="981" pos:column="26">@"&lt;namespace&gt;namespace &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{
    &lt;class&gt;class &lt;name&gt;B&lt;/name&gt; &lt;block&gt;{
        &lt;function&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;specifier&gt;static&lt;/specifier&gt; &lt;name&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name&gt;main&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;var&lt;/name&gt;&lt;/type&gt; &lt;name&gt;b&lt;/name&gt; =&lt;init&gt; &lt;expr&gt;&lt;call&gt;&lt;name&gt;getB&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;&lt;/init&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt; }&lt;/block&gt;&lt;/function&gt;
        &lt;function&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;specifier&gt;static&lt;/specifier&gt; &lt;name&gt;B&lt;/name&gt;&lt;/type&gt; &lt;name&gt;getB&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ &lt;return&gt;return &lt;expr&gt;&lt;op:operator&gt;new&lt;/op:operator&gt; &lt;call&gt;&lt;name&gt;B&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/return&gt; }&lt;/block&gt;&lt;/function&gt;
    }&lt;/block&gt;&lt;/class&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="987" pos:column="13">var</name></type> <name pos:line="987" pos:column="17">unit</name> <init pos:line="987" pos:column="22">= <expr><call><name><name pos:line="987" pos:column="24">fileSetup</name><op:operator pos:line="987" pos:column="33">.</op:operator><name pos:line="987" pos:column="34">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="987" pos:column="58">(<argument><expr><name pos:line="987" pos:column="59">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="987" pos:column="64">"B.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="988" pos:column="13">var</name></type> <name pos:line="988" pos:column="17">globalScope</name> <init pos:line="988" pos:column="29">= <expr><call><name><name pos:line="988" pos:column="31">codeParser</name><op:operator pos:line="988" pos:column="41">.</op:operator><name pos:line="988" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="988" pos:column="55">(<argument><expr><name pos:line="988" pos:column="56">unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="990" pos:column="13">var</name></type> <name pos:line="990" pos:column="17">typeB</name> <init pos:line="990" pos:column="23">= <expr><call><name><name pos:line="990" pos:column="25">globalScope</name><op:operator pos:line="990" pos:column="36">.</op:operator><name><name pos:line="990" pos:column="37">GetDescendants</name><argument_list pos:line="990" pos:column="51">&lt;<argument><name pos:line="990" pos:column="52">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="990" pos:column="67">()</argument_list></call><op:operator pos:line="990" pos:column="69">.</op:operator><call><name pos:line="990" pos:column="70">FirstOrDefault</name><argument_list pos:line="990" pos:column="84">(<argument><expr><lambda><name pos:line="990" pos:column="85">t</name> <op:operator pos:line="990" pos:column="87">=&gt;</op:operator> <name><name pos:line="990" pos:column="90">t</name><op:operator pos:line="990" pos:column="91">.</op:operator><name pos:line="990" pos:column="92">Name</name></name> <op:operator pos:line="990" pos:column="97">==</op:operator> <lit:literal type="string" pos:line="990" pos:column="100">"B"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="991" pos:column="13">Assert</name><op:operator pos:line="991" pos:column="19">.</op:operator><name pos:line="991" pos:column="20">IsNotNull</name></name><argument_list pos:line="991" pos:column="29">(<argument><expr><name pos:line="991" pos:column="30">typeB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="992" pos:column="13">var</name></type> <name pos:line="992" pos:column="17">mainMethod</name> <init pos:line="992" pos:column="28">= <expr><call><name><name pos:line="992" pos:column="30">globalScope</name><op:operator pos:line="992" pos:column="41">.</op:operator><name><name pos:line="992" pos:column="42">GetDescendants</name><argument_list pos:line="992" pos:column="56">&lt;<argument><name pos:line="992" pos:column="57">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="992" pos:column="74">()</argument_list></call><op:operator pos:line="992" pos:column="76">.</op:operator><call><name pos:line="992" pos:column="77">FirstOrDefault</name><argument_list pos:line="992" pos:column="91">(<argument><expr><lambda><name pos:line="992" pos:column="92">m</name> <op:operator pos:line="992" pos:column="94">=&gt;</op:operator> <name><name pos:line="992" pos:column="97">m</name><op:operator pos:line="992" pos:column="98">.</op:operator><name pos:line="992" pos:column="99">Name</name></name> <op:operator pos:line="992" pos:column="104">==</op:operator> <lit:literal type="string" pos:line="992" pos:column="107">"main"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="993" pos:column="13">Assert</name><op:operator pos:line="993" pos:column="19">.</op:operator><name pos:line="993" pos:column="20">IsNotNull</name></name><argument_list pos:line="993" pos:column="29">(<argument><expr><name pos:line="993" pos:column="30">mainMethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="995" pos:column="13">Assert</name><op:operator pos:line="995" pos:column="19">.</op:operator><name pos:line="995" pos:column="20">AreEqual</name></name><argument_list pos:line="995" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="995" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="995" pos:column="32">mainMethod</name><op:operator pos:line="995" pos:column="42">.</op:operator><name pos:line="995" pos:column="43">ChildStatements</name><op:operator pos:line="995" pos:column="58">.</op:operator><name pos:line="995" pos:column="59">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="996" pos:column="13">var</name></type> <name pos:line="996" pos:column="17">varDecl</name> <init pos:line="996" pos:column="25">= <expr><name><name pos:line="996" pos:column="27">mainMethod</name><op:operator pos:line="996" pos:column="37">.</op:operator><name pos:line="996" pos:column="38">ChildStatements</name><index pos:line="996" pos:column="53">[<expr><lit:literal type="number" pos:line="996" pos:column="54">0</lit:literal></expr>]</index></name><op:operator pos:line="996" pos:column="56">.</op:operator><call><name><name pos:line="996" pos:column="57">Content</name><op:operator pos:line="996" pos:column="64">.</op:operator><name><name pos:line="996" pos:column="65">GetDescendantsAndSelf</name><argument_list pos:line="996" pos:column="86">&lt;<argument><name pos:line="996" pos:column="87">VariableDeclaration</name></argument>&gt;</argument_list></name></name><argument_list pos:line="996" pos:column="107">()</argument_list></call><op:operator pos:line="996" pos:column="109">.</op:operator><call><name pos:line="996" pos:column="110">FirstOrDefault</name><argument_list pos:line="996" pos:column="124">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="997" pos:column="13">Assert</name><op:operator pos:line="997" pos:column="19">.</op:operator><name pos:line="997" pos:column="20">IsNotNull</name></name><argument_list pos:line="997" pos:column="29">(<argument><expr><name pos:line="997" pos:column="30">varDecl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="999" pos:column="13">Assert</name><op:operator pos:line="999" pos:column="19">.</op:operator><name pos:line="999" pos:column="20">AreSame</name></name><argument_list pos:line="999" pos:column="27">(<argument><expr><name pos:line="999" pos:column="28">typeB</name></expr></argument>, <argument><expr><call><name><name pos:line="999" pos:column="35">varDecl</name><op:operator pos:line="999" pos:column="42">.</op:operator><name pos:line="999" pos:column="43">ResolveType</name></name><argument_list pos:line="999" pos:column="54">()</argument_list></call><op:operator pos:line="999" pos:column="56">.</op:operator><call><name pos:line="999" pos:column="57">FirstOrDefault</name><argument_list pos:line="999" pos:column="71">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1002" pos:column="9">[<expr><name pos:line="1002" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1003" pos:column="9">public</specifier> <name pos:line="1003" pos:column="16">void</name></type> <name pos:line="1003" pos:column="21">TestDeclarationWithTypeVarInForeach</name><parameter_list pos:line="1003" pos:column="56">()</parameter_list> <block pos:line="1003" pos:column="59">{
            <comment type="line" pos:line="1004" pos:column="13">//class Foo {</comment>
            <comment type="line" pos:line="1005" pos:column="13">//    int[] GetInts() {</comment>
            <comment type="line" pos:line="1006" pos:column="13">//        return new[] {1, 2, 3, 4};</comment>
            <comment type="line" pos:line="1007" pos:column="13">//    }</comment>
            <comment type="line" pos:line="1008" pos:column="13">//    int main() {</comment>
            <comment type="line" pos:line="1009" pos:column="13">//        foreach(var num in GetInts()) {</comment>
            <comment type="line" pos:line="1010" pos:column="13">//            print(num);</comment>
            <comment type="line" pos:line="1011" pos:column="13">//        }</comment>
            <comment type="line" pos:line="1012" pos:column="13">//    }</comment>
            <comment type="line" pos:line="1013" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="1014" pos:column="13">string</name></type> <name pos:line="1014" pos:column="20">xml</name> <init pos:line="1014" pos:column="24">= <expr><lit:literal type="string" pos:line="1014" pos:column="26">@"&lt;class pos:line=""1"" pos:column="&gt;class &lt;name pos:line=""1"" pos:column="&gt;Foo&lt;/name&gt; &lt;block pos:line=""1"" pos:column=""&gt;{
    &lt;function&gt;&lt;type&gt;&lt;name pos:line=""2"" pos:column="&gt;int&lt;/name&gt;&lt;index pos:line=""2"" pos:column="&gt;[]&lt;/index&gt;&lt;/type&gt; &lt;name pos:line=""2"" pos:column=""&gt;GetInts&lt;/name&gt;&lt;parameter_list pos:line=""2"" pos:column=""&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""2"" pos:column=""&gt;{
        &lt;return pos:line=""3"" pos:column="&gt;return &lt;expr&gt;&lt;op:operator pos:line=""3"" pos:column=""&gt;new&lt;/op:operator&gt;&lt;index pos:line=""3"" pos:column=""&gt;[]&lt;/index&gt; &lt;block pos:line=""3"" pos:column=""&gt;{&lt;expr&gt;&lt;lit:literal type=""number"" pos:line=""3"" pos:column=&gt;1&lt;/lit:literal&gt;&lt;/expr&gt;&lt;op:operator pos:line=""3"" pos:column=""&gt;,&lt;/op:operator&gt; &lt;expr&gt;&lt;lit:literal type=""number"" pos:line=""3"" pos:column=&gt;2&lt;/lit:literal&gt;&lt;/expr&gt;&lt;op:operator pos:line=""3"" pos:column=""&gt;,&lt;/op:operator&gt; &lt;expr&gt;&lt;lit:literal type=""number"" pos:line=""3"" pos:column=&gt;3&lt;/lit:literal&gt;&lt;/expr&gt;&lt;op:operator pos:line=""3"" pos:column=""&gt;,&lt;/op:operator&gt; &lt;expr&gt;&lt;lit:literal type=""number"" pos:line=""3"" pos:column=&gt;4&lt;/lit:literal&gt;&lt;/expr&gt;}&lt;/block&gt;&lt;/expr&gt;;&lt;/return&gt;
    }&lt;/block&gt;&lt;/function&gt;
    &lt;function&gt;&lt;type&gt;&lt;name pos:line=""5"" pos:column="&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""5"" pos:column="&gt;main&lt;/name&gt;&lt;parameter_list pos:line=""5"" pos:column=""&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""5"" pos:column=""&gt;{
        &lt;foreach pos:line=""6"" pos:column="&gt;foreach(&lt;init&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""6"" pos:column=""&gt;var&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""6"" pos:column=""&gt;num&lt;/name&gt; &lt;range pos:line=""6"" pos:column=""&gt;in &lt;expr&gt;&lt;call&gt;&lt;name pos:line=""6"" pos:column=""&gt;GetInts&lt;/name&gt;&lt;argument_list pos:line=""6"" pos:column=""&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;&lt;/range&gt;&lt;/decl&gt;&lt;/init&gt;) &lt;block pos:line=""6"" pos:column=""&gt;{
            &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name pos:line=""7"" pos:column=""&gt;print&lt;/name&gt;&lt;argument_list pos:line=""7"" pos:column=""&gt;(&lt;argument&gt;&lt;expr&gt;&lt;name pos:line=""7"" pos:column=""&gt;num&lt;/name&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
        }&lt;/block&gt;&lt;/foreach&gt;
    }&lt;/block&gt;&lt;/function&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1024" pos:column="13">var</name></type> <name pos:line="1024" pos:column="17">unit</name> <init pos:line="1024" pos:column="22">= <expr><call><name><name pos:line="1024" pos:column="24">fileSetup</name><op:operator pos:line="1024" pos:column="33">.</op:operator><name pos:line="1024" pos:column="34">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1024" pos:column="58">(<argument><expr><name pos:line="1024" pos:column="59">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1024" pos:column="64">"B.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1025" pos:column="13">var</name></type> <name pos:line="1025" pos:column="17">globalScope</name> <init pos:line="1025" pos:column="29">= <expr><call><name><name pos:line="1025" pos:column="31">codeParser</name><op:operator pos:line="1025" pos:column="41">.</op:operator><name pos:line="1025" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="1025" pos:column="55">(<argument><expr><name pos:line="1025" pos:column="56">unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1027" pos:column="13">var</name></type> <name pos:line="1027" pos:column="17">loop</name> <init pos:line="1027" pos:column="22">= <expr><call><name><name pos:line="1027" pos:column="24">globalScope</name><op:operator pos:line="1027" pos:column="35">.</op:operator><name><name pos:line="1027" pos:column="36">GetDescendants</name><argument_list pos:line="1027" pos:column="50">&lt;<argument><name pos:line="1027" pos:column="51">ForeachStatement</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1027" pos:column="68">()</argument_list></call><op:operator pos:line="1027" pos:column="70">.</op:operator><call><name pos:line="1027" pos:column="71">First</name><argument_list pos:line="1027" pos:column="76">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1028" pos:column="13">var</name></type> <name pos:line="1028" pos:column="17">varDecl</name> <init pos:line="1028" pos:column="25">= <expr><call><name><name pos:line="1028" pos:column="27">loop</name><op:operator pos:line="1028" pos:column="31">.</op:operator><name pos:line="1028" pos:column="32">Condition</name><op:operator pos:line="1028" pos:column="41">.</op:operator><name><name pos:line="1028" pos:column="42">GetDescendantsAndSelf</name><argument_list pos:line="1028" pos:column="63">&lt;<argument><name pos:line="1028" pos:column="64">VariableDeclaration</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1028" pos:column="84">()</argument_list></call><op:operator pos:line="1028" pos:column="86">.</op:operator><call><name pos:line="1028" pos:column="87">FirstOrDefault</name><argument_list pos:line="1028" pos:column="101">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1029" pos:column="13">Assert</name><op:operator pos:line="1029" pos:column="19">.</op:operator><name pos:line="1029" pos:column="20">IsNotNull</name></name><argument_list pos:line="1029" pos:column="29">(<argument><expr><name pos:line="1029" pos:column="30">varDecl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="1031" pos:column="13">Assert</name><op:operator pos:line="1031" pos:column="19">.</op:operator><name pos:line="1031" pos:column="20">AreSame</name></name><argument_list pos:line="1031" pos:column="27">(<argument><expr><call><name><name pos:line="1031" pos:column="28">BuiltInTypeFactory</name><op:operator pos:line="1031" pos:column="46">.</op:operator><name pos:line="1031" pos:column="47">GetBuiltIn</name></name><argument_list pos:line="1031" pos:column="57">(<argument><expr><op:operator pos:line="1031" pos:column="58">new</op:operator> <call><name pos:line="1031" pos:column="62">TypeUse</name><argument_list pos:line="1031" pos:column="69">()</argument_list></call> <block pos:line="1031" pos:column="72">{<expr><name pos:line="1031" pos:column="73">Name</name> <op:operator pos:line="1031" pos:column="78">=</op:operator> <lit:literal type="string" pos:line="1031" pos:column="80">"int"</lit:literal></expr>}</block></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1031" pos:column="89">varDecl</name><op:operator pos:line="1031" pos:column="96">.</op:operator><name pos:line="1031" pos:column="97">ResolveType</name></name><argument_list pos:line="1031" pos:column="108">()</argument_list></call><op:operator pos:line="1031" pos:column="110">.</op:operator><call><name pos:line="1031" pos:column="111">FirstOrDefault</name><argument_list pos:line="1031" pos:column="125">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1034" pos:column="9">[<expr><name pos:line="1034" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1035" pos:column="9">public</specifier> <name pos:line="1035" pos:column="16">void</name></type> <name pos:line="1035" pos:column="21">TestFieldCreation</name><parameter_list pos:line="1035" pos:column="38">()</parameter_list> <block pos:line="1035" pos:column="41">{
            <comment type="line" pos:line="1036" pos:column="13">//// A.cs</comment>
            <comment type="line" pos:line="1037" pos:column="13">//class A {</comment>
            <comment type="line" pos:line="1038" pos:column="13">//    public int Foo;</comment>
            <comment type="line" pos:line="1039" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="1040" pos:column="13">string</name></type> <name pos:line="1040" pos:column="20">xml</name> <init pos:line="1040" pos:column="24">= <expr><lit:literal type="string" pos:line="1040" pos:column="26">@"&lt;class&gt;class &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{
    &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1043" pos:column="13">var</name></type> <name pos:line="1043" pos:column="17">xmlElement</name> <init pos:line="1043" pos:column="28">= <expr><call><name><name pos:line="1043" pos:column="30">fileSetup</name><op:operator pos:line="1043" pos:column="39">.</op:operator><name pos:line="1043" pos:column="40">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1043" pos:column="64">(<argument><expr><name pos:line="1043" pos:column="65">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1043" pos:column="70">"A.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1044" pos:column="13">var</name></type> <name pos:line="1044" pos:column="17">globalScope</name> <init pos:line="1044" pos:column="29">= <expr><call><name><name pos:line="1044" pos:column="31">codeParser</name><op:operator pos:line="1044" pos:column="41">.</op:operator><name pos:line="1044" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="1044" pos:column="55">(<argument><expr><name pos:line="1044" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="1046" pos:column="13">Assert</name><op:operator pos:line="1046" pos:column="19">.</op:operator><name pos:line="1046" pos:column="20">AreEqual</name></name><argument_list pos:line="1046" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1046" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="1046" pos:column="32">globalScope</name><op:operator pos:line="1046" pos:column="43">.</op:operator><name pos:line="1046" pos:column="44">ChildStatements</name><op:operator pos:line="1046" pos:column="59">.</op:operator><name pos:line="1046" pos:column="60">Count</name></name><argument_list pos:line="1046" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="1047" pos:column="13">var</name></type> <name pos:line="1047" pos:column="17">typeA</name> <init pos:line="1047" pos:column="23">= <expr><call><name><name pos:line="1047" pos:column="25">globalScope</name><op:operator pos:line="1047" pos:column="36">.</op:operator><name pos:line="1047" pos:column="37">ChildStatements</name><op:operator pos:line="1047" pos:column="52">.</op:operator><name pos:line="1047" pos:column="53">First</name></name><argument_list pos:line="1047" pos:column="58">()</argument_list></call> <op:operator pos:line="1047" pos:column="61">as</op:operator> <name pos:line="1047" pos:column="64">TypeDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1048" pos:column="13">Assert</name><op:operator pos:line="1048" pos:column="19">.</op:operator><name pos:line="1048" pos:column="20">IsNotNull</name></name><argument_list pos:line="1048" pos:column="29">(<argument><expr><name pos:line="1048" pos:column="30">typeA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1049" pos:column="13">Assert</name><op:operator pos:line="1049" pos:column="19">.</op:operator><name pos:line="1049" pos:column="20">AreEqual</name></name><argument_list pos:line="1049" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1049" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="1049" pos:column="32">typeA</name><op:operator pos:line="1049" pos:column="37">.</op:operator><name pos:line="1049" pos:column="38">ChildStatements</name><op:operator pos:line="1049" pos:column="53">.</op:operator><name pos:line="1049" pos:column="54">Count</name></name><argument_list pos:line="1049" pos:column="59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="1050" pos:column="13">var</name></type> <name pos:line="1050" pos:column="17">foo</name> <init pos:line="1050" pos:column="21">= <expr><call><name><name pos:line="1050" pos:column="23">typeA</name><op:operator pos:line="1050" pos:column="28">.</op:operator><name pos:line="1050" pos:column="29">ChildStatements</name><op:operator pos:line="1050" pos:column="44">.</op:operator><name pos:line="1050" pos:column="45">First</name></name><argument_list pos:line="1050" pos:column="50">()</argument_list></call><op:operator pos:line="1050" pos:column="52">.</op:operator><name pos:line="1050" pos:column="53">Content</name> <op:operator pos:line="1050" pos:column="61">as</op:operator> <name pos:line="1050" pos:column="64">VariableDeclaration</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1051" pos:column="13">Assert</name><op:operator pos:line="1051" pos:column="19">.</op:operator><name pos:line="1051" pos:column="20">IsNotNull</name></name><argument_list pos:line="1051" pos:column="29">(<argument><expr><name pos:line="1051" pos:column="30">foo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1052" pos:column="13">Assert</name><op:operator pos:line="1052" pos:column="19">.</op:operator><name pos:line="1052" pos:column="20">AreEqual</name></name><argument_list pos:line="1052" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1052" pos:column="29">"Foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1052" pos:column="36">foo</name><op:operator pos:line="1052" pos:column="39">.</op:operator><name pos:line="1052" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1053" pos:column="13">Assert</name><op:operator pos:line="1053" pos:column="19">.</op:operator><name pos:line="1053" pos:column="20">AreEqual</name></name><argument_list pos:line="1053" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1053" pos:column="29">"int"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1053" pos:column="36">foo</name><op:operator pos:line="1053" pos:column="39">.</op:operator><name pos:line="1053" pos:column="40">VariableType</name><op:operator pos:line="1053" pos:column="52">.</op:operator><name pos:line="1053" pos:column="53">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1054" pos:column="13">Assert</name><op:operator pos:line="1054" pos:column="19">.</op:operator><name pos:line="1054" pos:column="20">AreEqual</name></name><argument_list pos:line="1054" pos:column="28">(<argument><expr><name><name pos:line="1054" pos:column="29">AccessModifier</name><op:operator pos:line="1054" pos:column="43">.</op:operator><name pos:line="1054" pos:column="44">Public</name></name></expr></argument>, <argument><expr><name><name pos:line="1054" pos:column="52">foo</name><op:operator pos:line="1054" pos:column="55">.</op:operator><name pos:line="1054" pos:column="56">Accessibility</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1057" pos:column="9">[<expr><name pos:line="1057" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1058" pos:column="9">public</specifier> <name pos:line="1058" pos:column="16">void</name></type> <name pos:line="1058" pos:column="21">TestFindParentType</name><parameter_list pos:line="1058" pos:column="39">()</parameter_list> <block pos:line="1058" pos:column="42">{
            <comment type="line" pos:line="1059" pos:column="13">// namespace A { class B : C { } }</comment>
            <decl_stmt><decl><type><name pos:line="1060" pos:column="13">string</name></type> <name pos:line="1060" pos:column="20">bXml</name> <init pos:line="1060" pos:column="25">= <expr><lit:literal type="string" pos:line="1060" pos:column="27">@"&lt;namespace&gt;namespace &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{ &lt;class&gt;class &lt;name&gt;B&lt;/name&gt; &lt;super&gt;: &lt;name&gt;C&lt;/name&gt;&lt;/super&gt; &lt;block&gt;{&lt;private type=""default&gt; &lt;/private&gt;}&lt;/block&gt; &lt;decl/&gt;&lt;/class&gt;}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="1062" pos:column="13">// namespace A { class C { } }</comment>
            <decl_stmt><decl><type><name pos:line="1063" pos:column="13">string</name></type> <name pos:line="1063" pos:column="20">cXml</name> <init pos:line="1063" pos:column="25">= <expr><lit:literal type="string" pos:line="1063" pos:column="27">@"&lt;namespace&gt;namespace &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{ &lt;class&gt;class &lt;name&gt;C&lt;/name&gt; &lt;block&gt;{&lt;private type=""default&gt; &lt;/private&gt;}&lt;/block&gt; &lt;decl/&gt;&lt;/class&gt;}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1065" pos:column="13">var</name></type> <name pos:line="1065" pos:column="17">bUnit</name> <init pos:line="1065" pos:column="23">= <expr><call><name><name pos:line="1065" pos:column="25">fileSetup</name><op:operator pos:line="1065" pos:column="34">.</op:operator><name pos:line="1065" pos:column="35">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1065" pos:column="59">(<argument><expr><name pos:line="1065" pos:column="60">bXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1065" pos:column="66">"B.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1066" pos:column="13">var</name></type> <name pos:line="1066" pos:column="17">cUnit</name> <init pos:line="1066" pos:column="23">= <expr><call><name><name pos:line="1066" pos:column="25">fileSetup</name><op:operator pos:line="1066" pos:column="34">.</op:operator><name pos:line="1066" pos:column="35">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1066" pos:column="59">(<argument><expr><name pos:line="1066" pos:column="60">cXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1066" pos:column="66">"D.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1068" pos:column="13">var</name></type> <name pos:line="1068" pos:column="17">bScope</name> <init pos:line="1068" pos:column="24">= <expr><call><name><name pos:line="1068" pos:column="26">codeParser</name><op:operator pos:line="1068" pos:column="36">.</op:operator><name pos:line="1068" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="1068" pos:column="50">(<argument><expr><name pos:line="1068" pos:column="51">bUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1069" pos:column="13">var</name></type> <name pos:line="1069" pos:column="17">cScope</name> <init pos:line="1069" pos:column="24">= <expr><call><name><name pos:line="1069" pos:column="26">codeParser</name><op:operator pos:line="1069" pos:column="36">.</op:operator><name pos:line="1069" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="1069" pos:column="50">(<argument><expr><name pos:line="1069" pos:column="51">cUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1071" pos:column="13">var</name></type> <name pos:line="1071" pos:column="17">globalScope</name> <init pos:line="1071" pos:column="29">= <expr><call><name><name pos:line="1071" pos:column="31">bScope</name><op:operator pos:line="1071" pos:column="37">.</op:operator><name pos:line="1071" pos:column="38">Merge</name></name><argument_list pos:line="1071" pos:column="43">(<argument><expr><name pos:line="1071" pos:column="44">cScope</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1073" pos:column="13">var</name></type> <name pos:line="1073" pos:column="17">typeB</name> <init pos:line="1073" pos:column="23">= <expr><call><name><name pos:line="1073" pos:column="25">globalScope</name><op:operator pos:line="1073" pos:column="36">.</op:operator><name><name pos:line="1073" pos:column="37">GetDescendants</name><argument_list pos:line="1073" pos:column="51">&lt;<argument><name pos:line="1073" pos:column="52">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1073" pos:column="67">()</argument_list></call><op:operator pos:line="1073" pos:column="69">.</op:operator><call><name pos:line="1073" pos:column="70">FirstOrDefault</name><argument_list pos:line="1073" pos:column="84">(<argument><expr><lambda><name pos:line="1073" pos:column="85">t</name> <op:operator pos:line="1073" pos:column="87">=&gt;</op:operator> <name><name pos:line="1073" pos:column="90">t</name><op:operator pos:line="1073" pos:column="91">.</op:operator><name pos:line="1073" pos:column="92">Name</name></name> <op:operator pos:line="1073" pos:column="97">==</op:operator> <lit:literal type="string" pos:line="1073" pos:column="100">"B"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1074" pos:column="13">Assert</name><op:operator pos:line="1074" pos:column="19">.</op:operator><name pos:line="1074" pos:column="20">IsNotNull</name></name><argument_list pos:line="1074" pos:column="29">(<argument><expr><name pos:line="1074" pos:column="30">typeB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="1075" pos:column="13">var</name></type> <name pos:line="1075" pos:column="17">typeC</name> <init pos:line="1075" pos:column="23">= <expr><call><name><name pos:line="1075" pos:column="25">globalScope</name><op:operator pos:line="1075" pos:column="36">.</op:operator><name><name pos:line="1075" pos:column="37">GetDescendants</name><argument_list pos:line="1075" pos:column="51">&lt;<argument><name pos:line="1075" pos:column="52">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1075" pos:column="67">()</argument_list></call><op:operator pos:line="1075" pos:column="69">.</op:operator><call><name pos:line="1075" pos:column="70">FirstOrDefault</name><argument_list pos:line="1075" pos:column="84">(<argument><expr><lambda><name pos:line="1075" pos:column="85">t</name> <op:operator pos:line="1075" pos:column="87">=&gt;</op:operator> <name><name pos:line="1075" pos:column="90">t</name><op:operator pos:line="1075" pos:column="91">.</op:operator><name pos:line="1075" pos:column="92">Name</name></name> <op:operator pos:line="1075" pos:column="97">==</op:operator> <lit:literal type="string" pos:line="1075" pos:column="100">"C"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1076" pos:column="13">Assert</name><op:operator pos:line="1076" pos:column="19">.</op:operator><name pos:line="1076" pos:column="20">IsNotNull</name></name><argument_list pos:line="1076" pos:column="29">(<argument><expr><name pos:line="1076" pos:column="30">typeC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="1078" pos:column="13">Assert</name><op:operator pos:line="1078" pos:column="19">.</op:operator><name pos:line="1078" pos:column="20">AreEqual</name></name><argument_list pos:line="1078" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1078" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1078" pos:column="32">typeB</name><op:operator pos:line="1078" pos:column="37">.</op:operator><name pos:line="1078" pos:column="38">ParentTypeNames</name><op:operator pos:line="1078" pos:column="53">.</op:operator><name pos:line="1078" pos:column="54">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1079" pos:column="13">Assert</name><op:operator pos:line="1079" pos:column="19">.</op:operator><name pos:line="1079" pos:column="20">AreSame</name></name><argument_list pos:line="1079" pos:column="27">(<argument><expr><name pos:line="1079" pos:column="28">typeC</name></expr></argument>, <argument><expr><name><name pos:line="1079" pos:column="35">typeB</name><op:operator pos:line="1079" pos:column="40">.</op:operator><name pos:line="1079" pos:column="41">ParentTypeNames</name><index pos:line="1079" pos:column="56">[<expr><lit:literal type="number" pos:line="1079" pos:column="57">0</lit:literal></expr>]</index></name><op:operator pos:line="1079" pos:column="59">.</op:operator><call><name pos:line="1079" pos:column="60">ResolveType</name><argument_list pos:line="1079" pos:column="71">()</argument_list></call><op:operator pos:line="1079" pos:column="73">.</op:operator><call><name pos:line="1079" pos:column="74">FirstOrDefault</name><argument_list pos:line="1079" pos:column="88">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1082" pos:column="9">[<expr><name pos:line="1082" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1083" pos:column="9">public</specifier> <name pos:line="1083" pos:column="16">void</name></type> <name pos:line="1083" pos:column="21">TestFindQualifiedParentType</name><parameter_list pos:line="1083" pos:column="48">()</parameter_list> <block pos:line="1083" pos:column="51">{
            <comment type="line" pos:line="1084" pos:column="13">// namespace A { class B : C.D { } }</comment>
            <decl_stmt><decl><type><name pos:line="1085" pos:column="13">string</name></type> <name pos:line="1085" pos:column="20">bXml</name> <init pos:line="1085" pos:column="25">= <expr><lit:literal type="string" pos:line="1085" pos:column="27">@"&lt;namespace&gt;namespace &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{ &lt;class&gt;class &lt;name&gt;B&lt;/name&gt; &lt;super&gt;: &lt;name&gt;&lt;name&gt;C&lt;/name&gt;&lt;op:operator&gt;.&lt;/op:operator&gt;&lt;name&gt;D&lt;/name&gt;&lt;/name&gt;&lt;/super&gt; &lt;block&gt;{&lt;private type=""default&gt; &lt;/private&gt;}&lt;/block&gt; &lt;decl/&gt;&lt;/class&gt;}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="1087" pos:column="13">// namespace C { class D { } }</comment>
            <decl_stmt><decl><type><name pos:line="1088" pos:column="13">string</name></type> <name pos:line="1088" pos:column="20">dXml</name> <init pos:line="1088" pos:column="25">= <expr><lit:literal type="string" pos:line="1088" pos:column="27">@"&lt;namespace&gt;namespace &lt;name&gt;C&lt;/name&gt; &lt;block&gt;{ &lt;class&gt;class &lt;name&gt;D&lt;/name&gt; &lt;block&gt;{&lt;private type=""default&gt; &lt;/private&gt;}&lt;/block&gt; &lt;decl/&gt;&lt;/class&gt;}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1090" pos:column="13">var</name></type> <name pos:line="1090" pos:column="17">bUnit</name> <init pos:line="1090" pos:column="23">= <expr><call><name><name pos:line="1090" pos:column="25">fileSetup</name><op:operator pos:line="1090" pos:column="34">.</op:operator><name pos:line="1090" pos:column="35">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1090" pos:column="59">(<argument><expr><name pos:line="1090" pos:column="60">bXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1090" pos:column="66">"B.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1091" pos:column="13">var</name></type> <name pos:line="1091" pos:column="17">dUnit</name> <init pos:line="1091" pos:column="23">= <expr><call><name><name pos:line="1091" pos:column="25">fileSetup</name><op:operator pos:line="1091" pos:column="34">.</op:operator><name pos:line="1091" pos:column="35">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1091" pos:column="59">(<argument><expr><name pos:line="1091" pos:column="60">dXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1091" pos:column="66">"D.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1093" pos:column="13">var</name></type> <name pos:line="1093" pos:column="17">bScope</name> <init pos:line="1093" pos:column="24">= <expr><call><name><name pos:line="1093" pos:column="26">codeParser</name><op:operator pos:line="1093" pos:column="36">.</op:operator><name pos:line="1093" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="1093" pos:column="50">(<argument><expr><name pos:line="1093" pos:column="51">bUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1094" pos:column="13">var</name></type> <name pos:line="1094" pos:column="17">dScope</name> <init pos:line="1094" pos:column="24">= <expr><call><name><name pos:line="1094" pos:column="26">codeParser</name><op:operator pos:line="1094" pos:column="36">.</op:operator><name pos:line="1094" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="1094" pos:column="50">(<argument><expr><name pos:line="1094" pos:column="51">dUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1096" pos:column="13">var</name></type> <name pos:line="1096" pos:column="17">globalScope</name> <init pos:line="1096" pos:column="29">= <expr><call><name><name pos:line="1096" pos:column="31">bScope</name><op:operator pos:line="1096" pos:column="37">.</op:operator><name pos:line="1096" pos:column="38">Merge</name></name><argument_list pos:line="1096" pos:column="43">(<argument><expr><name pos:line="1096" pos:column="44">dScope</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1098" pos:column="13">var</name></type> <name pos:line="1098" pos:column="17">typeB</name> <init pos:line="1098" pos:column="23">= <expr><call><name><name pos:line="1098" pos:column="25">globalScope</name><op:operator pos:line="1098" pos:column="36">.</op:operator><name><name pos:line="1098" pos:column="37">GetDescendants</name><argument_list pos:line="1098" pos:column="51">&lt;<argument><name pos:line="1098" pos:column="52">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1098" pos:column="67">()</argument_list></call><op:operator pos:line="1098" pos:column="69">.</op:operator><call><name pos:line="1098" pos:column="70">FirstOrDefault</name><argument_list pos:line="1098" pos:column="84">(<argument><expr><lambda><name pos:line="1098" pos:column="85">t</name> <op:operator pos:line="1098" pos:column="87">=&gt;</op:operator> <name><name pos:line="1098" pos:column="90">t</name><op:operator pos:line="1098" pos:column="91">.</op:operator><name pos:line="1098" pos:column="92">Name</name></name> <op:operator pos:line="1098" pos:column="97">==</op:operator> <lit:literal type="string" pos:line="1098" pos:column="100">"B"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1099" pos:column="13">Assert</name><op:operator pos:line="1099" pos:column="19">.</op:operator><name pos:line="1099" pos:column="20">IsNotNull</name></name><argument_list pos:line="1099" pos:column="29">(<argument><expr><name pos:line="1099" pos:column="30">typeB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="1100" pos:column="13">var</name></type> <name pos:line="1100" pos:column="17">typeD</name> <init pos:line="1100" pos:column="23">= <expr><call><name><name pos:line="1100" pos:column="25">globalScope</name><op:operator pos:line="1100" pos:column="36">.</op:operator><name><name pos:line="1100" pos:column="37">GetDescendants</name><argument_list pos:line="1100" pos:column="51">&lt;<argument><name pos:line="1100" pos:column="52">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1100" pos:column="67">()</argument_list></call><op:operator pos:line="1100" pos:column="69">.</op:operator><call><name pos:line="1100" pos:column="70">FirstOrDefault</name><argument_list pos:line="1100" pos:column="84">(<argument><expr><lambda><name pos:line="1100" pos:column="85">t</name> <op:operator pos:line="1100" pos:column="87">=&gt;</op:operator> <name><name pos:line="1100" pos:column="90">t</name><op:operator pos:line="1100" pos:column="91">.</op:operator><name pos:line="1100" pos:column="92">Name</name></name> <op:operator pos:line="1100" pos:column="97">==</op:operator> <lit:literal type="string" pos:line="1100" pos:column="100">"D"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1101" pos:column="13">Assert</name><op:operator pos:line="1101" pos:column="19">.</op:operator><name pos:line="1101" pos:column="20">IsNotNull</name></name><argument_list pos:line="1101" pos:column="29">(<argument><expr><name pos:line="1101" pos:column="30">typeD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="1103" pos:column="13">Assert</name><op:operator pos:line="1103" pos:column="19">.</op:operator><name pos:line="1103" pos:column="20">AreEqual</name></name><argument_list pos:line="1103" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1103" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1103" pos:column="32">typeB</name><op:operator pos:line="1103" pos:column="37">.</op:operator><name pos:line="1103" pos:column="38">ParentTypeNames</name><op:operator pos:line="1103" pos:column="53">.</op:operator><name pos:line="1103" pos:column="54">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1104" pos:column="13">Assert</name><op:operator pos:line="1104" pos:column="19">.</op:operator><name pos:line="1104" pos:column="20">AreSame</name></name><argument_list pos:line="1104" pos:column="27">(<argument><expr><name pos:line="1104" pos:column="28">typeD</name></expr></argument>, <argument><expr><name><name pos:line="1104" pos:column="35">typeB</name><op:operator pos:line="1104" pos:column="40">.</op:operator><name pos:line="1104" pos:column="41">ParentTypeNames</name><index pos:line="1104" pos:column="56">[<expr><lit:literal type="number" pos:line="1104" pos:column="57">0</lit:literal></expr>]</index></name><op:operator pos:line="1104" pos:column="59">.</op:operator><call><name pos:line="1104" pos:column="60">ResolveType</name><argument_list pos:line="1104" pos:column="71">()</argument_list></call><op:operator pos:line="1104" pos:column="73">.</op:operator><call><name pos:line="1104" pos:column="74">FirstOrDefault</name><argument_list pos:line="1104" pos:column="88">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1107" pos:column="9">[<expr><name pos:line="1107" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1108" pos:column="9">public</specifier> <name pos:line="1108" pos:column="16">void</name></type> <name pos:line="1108" pos:column="21">TestGenericType</name><parameter_list pos:line="1108" pos:column="36">()</parameter_list> <block pos:line="1108" pos:column="39">{
            <comment type="line" pos:line="1109" pos:column="13">//public class B&lt;T&gt; { }</comment>
            <decl_stmt><decl><type><name pos:line="1110" pos:column="13">var</name></type> <name pos:line="1110" pos:column="17">xml</name> <init pos:line="1110" pos:column="21">= <expr><lit:literal type="string" pos:line="1110" pos:column="23">@"&lt;class&gt;&lt;specifier&gt;public&lt;/specifier&gt; class &lt;name&gt;&lt;name&gt;B&lt;/name&gt;&lt;argument_list&gt;&amp;lt;&lt;argument&gt;&lt;name&gt;T&lt;/name&gt;&lt;/argument&gt;&amp;gt;&lt;/argument_list&gt;&lt;/name&gt; &lt;block&gt;{ }&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1112" pos:column="13">var</name></type> <name pos:line="1112" pos:column="17">unit</name> <init pos:line="1112" pos:column="22">= <expr><call><name><name pos:line="1112" pos:column="24">fileSetup</name><op:operator pos:line="1112" pos:column="33">.</op:operator><name pos:line="1112" pos:column="34">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1112" pos:column="58">(<argument><expr><name pos:line="1112" pos:column="59">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1112" pos:column="64">"B.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1113" pos:column="13">var</name></type> <name pos:line="1113" pos:column="17">scope</name> <init pos:line="1113" pos:column="23">= <expr><call><name><name pos:line="1113" pos:column="25">codeParser</name><op:operator pos:line="1113" pos:column="35">.</op:operator><name pos:line="1113" pos:column="36">ParseFileUnit</name></name><argument_list pos:line="1113" pos:column="49">(<argument><expr><name pos:line="1113" pos:column="50">unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1115" pos:column="13">var</name></type> <name pos:line="1115" pos:column="17">typeB</name> <init pos:line="1115" pos:column="23">= <expr><call><name><name pos:line="1115" pos:column="25">scope</name><op:operator pos:line="1115" pos:column="30">.</op:operator><name><name pos:line="1115" pos:column="31">GetDescendants</name><argument_list pos:line="1115" pos:column="45">&lt;<argument><name pos:line="1115" pos:column="46">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1115" pos:column="61">()</argument_list></call><op:operator pos:line="1115" pos:column="63">.</op:operator><call><name pos:line="1115" pos:column="64">FirstOrDefault</name><argument_list pos:line="1115" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1116" pos:column="13">Assert</name><op:operator pos:line="1116" pos:column="19">.</op:operator><name pos:line="1116" pos:column="20">IsNotNull</name></name><argument_list pos:line="1116" pos:column="29">(<argument><expr><name pos:line="1116" pos:column="30">typeB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1117" pos:column="13">Assert</name><op:operator pos:line="1117" pos:column="19">.</op:operator><name pos:line="1117" pos:column="20">AreEqual</name></name><argument_list pos:line="1117" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1117" pos:column="29">"B"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1117" pos:column="34">typeB</name><op:operator pos:line="1117" pos:column="39">.</op:operator><name pos:line="1117" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1120" pos:column="9">[<expr><name pos:line="1120" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1121" pos:column="9">public</specifier> <name pos:line="1121" pos:column="16">void</name></type> <name pos:line="1121" pos:column="21">TestGenericVariableDeclaration</name><parameter_list pos:line="1121" pos:column="51">()</parameter_list> <block pos:line="1121" pos:column="54">{
            <comment type="line" pos:line="1122" pos:column="13">//Dictionary&lt;string,int&gt; map;</comment>
            <decl_stmt><decl><type><name pos:line="1123" pos:column="13">string</name></type> <name pos:line="1123" pos:column="20">xml</name> <init pos:line="1123" pos:column="24">= <expr><lit:literal type="string" pos:line="1123" pos:column="26">@"&lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;&lt;name&gt;Dictionary&lt;/name&gt;&lt;argument_list&gt;&amp;lt;&lt;argument&gt;&lt;name&gt;string&lt;/name&gt;&lt;/argument&gt;,&lt;argument&gt;&lt;name&gt;int&lt;/name&gt;&lt;/argument&gt;&amp;gt;&lt;/argument_list&gt;&lt;/name&gt;&lt;/type&gt; &lt;name&gt;map&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1125" pos:column="13">var</name></type> <name pos:line="1125" pos:column="17">testUnit</name> <init pos:line="1125" pos:column="26">= <expr><call><name><name pos:line="1125" pos:column="28">fileSetup</name><op:operator pos:line="1125" pos:column="37">.</op:operator><name pos:line="1125" pos:column="38">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1125" pos:column="62">(<argument><expr><name pos:line="1125" pos:column="63">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1125" pos:column="68">"test.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1127" pos:column="13">var</name></type> <name pos:line="1127" pos:column="17">testScope</name> <init pos:line="1127" pos:column="27">= <expr><call><name><name pos:line="1127" pos:column="29">codeParser</name><op:operator pos:line="1127" pos:column="39">.</op:operator><name pos:line="1127" pos:column="40">ParseFileUnit</name></name><argument_list pos:line="1127" pos:column="53">(<argument><expr><name pos:line="1127" pos:column="54">testUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1129" pos:column="13">var</name></type> <name pos:line="1129" pos:column="17">testDeclaration</name> <init pos:line="1129" pos:column="33">= <expr><call><name><name pos:line="1129" pos:column="35">testScope</name><op:operator pos:line="1129" pos:column="44">.</op:operator><name pos:line="1129" pos:column="45">ChildStatements</name><op:operator pos:line="1129" pos:column="60">.</op:operator><name pos:line="1129" pos:column="61">First</name></name><argument_list pos:line="1129" pos:column="66">()</argument_list></call><op:operator pos:line="1129" pos:column="68">.</op:operator><name pos:line="1129" pos:column="69">Content</name> <op:operator pos:line="1129" pos:column="77">as</op:operator> <name pos:line="1129" pos:column="80">VariableDeclaration</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1130" pos:column="13">Assert</name><op:operator pos:line="1130" pos:column="19">.</op:operator><name pos:line="1130" pos:column="20">IsNotNull</name></name><argument_list pos:line="1130" pos:column="29">(<argument><expr><name pos:line="1130" pos:column="30">testDeclaration</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1130" pos:column="47">"could not find the test declaration"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1131" pos:column="13">Assert</name><op:operator pos:line="1131" pos:column="19">.</op:operator><name pos:line="1131" pos:column="20">AreEqual</name></name><argument_list pos:line="1131" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1131" pos:column="29">"map"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1131" pos:column="36">testDeclaration</name><op:operator pos:line="1131" pos:column="51">.</op:operator><name pos:line="1131" pos:column="52">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1132" pos:column="13">Assert</name><op:operator pos:line="1132" pos:column="19">.</op:operator><name pos:line="1132" pos:column="20">AreEqual</name></name><argument_list pos:line="1132" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1132" pos:column="29">"Dictionary"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1132" pos:column="43">testDeclaration</name><op:operator pos:line="1132" pos:column="58">.</op:operator><name pos:line="1132" pos:column="59">VariableType</name><op:operator pos:line="1132" pos:column="71">.</op:operator><name pos:line="1132" pos:column="72">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1133" pos:column="13">Assert</name><op:operator pos:line="1133" pos:column="19">.</op:operator><name pos:line="1133" pos:column="20">That</name></name><argument_list pos:line="1133" pos:column="24">(<argument><expr><name><name pos:line="1133" pos:column="25">testDeclaration</name><op:operator pos:line="1133" pos:column="40">.</op:operator><name pos:line="1133" pos:column="41">VariableType</name><op:operator pos:line="1133" pos:column="53">.</op:operator><name pos:line="1133" pos:column="54">IsGeneric</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1134" pos:column="13">Assert</name><op:operator pos:line="1134" pos:column="19">.</op:operator><name pos:line="1134" pos:column="20">AreEqual</name></name><argument_list pos:line="1134" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1134" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1134" pos:column="32">testDeclaration</name><op:operator pos:line="1134" pos:column="47">.</op:operator><name pos:line="1134" pos:column="48">VariableType</name><op:operator pos:line="1134" pos:column="60">.</op:operator><name pos:line="1134" pos:column="61">TypeParameters</name><op:operator pos:line="1134" pos:column="75">.</op:operator><name pos:line="1134" pos:column="76">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1135" pos:column="13">Assert</name><op:operator pos:line="1135" pos:column="19">.</op:operator><name pos:line="1135" pos:column="20">AreEqual</name></name><argument_list pos:line="1135" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1135" pos:column="29">"string"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="1135" pos:column="39">testDeclaration</name><op:operator pos:line="1135" pos:column="54">.</op:operator><name pos:line="1135" pos:column="55">VariableType</name><op:operator pos:line="1135" pos:column="67">.</op:operator><name pos:line="1135" pos:column="68">TypeParameters</name><op:operator pos:line="1135" pos:column="82">.</op:operator><name pos:line="1135" pos:column="83">First</name></name><argument_list pos:line="1135" pos:column="88">()</argument_list></call><op:operator pos:line="1135" pos:column="90">.</op:operator><name pos:line="1135" pos:column="91">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1136" pos:column="13">Assert</name><op:operator pos:line="1136" pos:column="19">.</op:operator><name pos:line="1136" pos:column="20">AreEqual</name></name><argument_list pos:line="1136" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1136" pos:column="29">"int"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="1136" pos:column="36">testDeclaration</name><op:operator pos:line="1136" pos:column="51">.</op:operator><name pos:line="1136" pos:column="52">VariableType</name><op:operator pos:line="1136" pos:column="64">.</op:operator><name pos:line="1136" pos:column="65">TypeParameters</name><op:operator pos:line="1136" pos:column="79">.</op:operator><name pos:line="1136" pos:column="80">Last</name></name><argument_list pos:line="1136" pos:column="84">()</argument_list></call><op:operator pos:line="1136" pos:column="86">.</op:operator><name pos:line="1136" pos:column="87">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1139" pos:column="9">[<expr><name pos:line="1139" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1140" pos:column="9">public</specifier> <name pos:line="1140" pos:column="16">void</name></type> <name pos:line="1140" pos:column="21">TestGenericVariableDeclarationWithPrefix</name><parameter_list pos:line="1140" pos:column="61">()</parameter_list> <block pos:line="1140" pos:column="64">{
            <comment type="line" pos:line="1141" pos:column="13">//System.Collection.Dictionary&lt;string,int&gt; map;</comment>
            <decl_stmt><decl><type><name pos:line="1142" pos:column="13">string</name></type> <name pos:line="1142" pos:column="20">xml</name> <init pos:line="1142" pos:column="24">= <expr><lit:literal type="string" pos:line="1142" pos:column="26">@"&lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;&lt;name&gt;System&lt;/name&gt;&lt;op:operator&gt;.&lt;/op:operator&gt;&lt;name&gt;Collection&lt;/name&gt;&lt;op:operator&gt;.&lt;/op:operator&gt;&lt;name&gt;&lt;name&gt;Dictionary&lt;/name&gt;&lt;argument_list&gt;&amp;lt;&lt;argument&gt;&lt;name&gt;string&lt;/name&gt;&lt;/argument&gt;,&lt;argument&gt;&lt;name&gt;int&lt;/name&gt;&lt;/argument&gt;&amp;gt;&lt;/argument_list&gt;&lt;/name&gt;&lt;/name&gt;&lt;/type&gt; &lt;name&gt;map&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1144" pos:column="13">var</name></type> <name pos:line="1144" pos:column="17">testUnit</name> <init pos:line="1144" pos:column="26">= <expr><call><name><name pos:line="1144" pos:column="28">fileSetup</name><op:operator pos:line="1144" pos:column="37">.</op:operator><name pos:line="1144" pos:column="38">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1144" pos:column="62">(<argument><expr><name pos:line="1144" pos:column="63">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1144" pos:column="68">"test.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1146" pos:column="13">var</name></type> <name pos:line="1146" pos:column="17">testScope</name> <init pos:line="1146" pos:column="27">= <expr><call><name><name pos:line="1146" pos:column="29">codeParser</name><op:operator pos:line="1146" pos:column="39">.</op:operator><name pos:line="1146" pos:column="40">ParseFileUnit</name></name><argument_list pos:line="1146" pos:column="53">(<argument><expr><name pos:line="1146" pos:column="54">testUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1148" pos:column="13">var</name></type> <name pos:line="1148" pos:column="17">testDeclaration</name> <init pos:line="1148" pos:column="33">= <expr><call><name><name pos:line="1148" pos:column="35">testScope</name><op:operator pos:line="1148" pos:column="44">.</op:operator><name pos:line="1148" pos:column="45">ChildStatements</name><op:operator pos:line="1148" pos:column="60">.</op:operator><name pos:line="1148" pos:column="61">First</name></name><argument_list pos:line="1148" pos:column="66">()</argument_list></call><op:operator pos:line="1148" pos:column="68">.</op:operator><name pos:line="1148" pos:column="69">Content</name> <op:operator pos:line="1148" pos:column="77">as</op:operator> <name pos:line="1148" pos:column="80">VariableDeclaration</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1149" pos:column="13">Assert</name><op:operator pos:line="1149" pos:column="19">.</op:operator><name pos:line="1149" pos:column="20">IsNotNull</name></name><argument_list pos:line="1149" pos:column="29">(<argument><expr><name pos:line="1149" pos:column="30">testDeclaration</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1149" pos:column="47">"could not find the test declaration"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1150" pos:column="13">Assert</name><op:operator pos:line="1150" pos:column="19">.</op:operator><name pos:line="1150" pos:column="20">AreEqual</name></name><argument_list pos:line="1150" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1150" pos:column="29">"map"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1150" pos:column="36">testDeclaration</name><op:operator pos:line="1150" pos:column="51">.</op:operator><name pos:line="1150" pos:column="52">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1151" pos:column="13">Assert</name><op:operator pos:line="1151" pos:column="19">.</op:operator><name pos:line="1151" pos:column="20">AreEqual</name></name><argument_list pos:line="1151" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1151" pos:column="29">"Dictionary"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1151" pos:column="43">testDeclaration</name><op:operator pos:line="1151" pos:column="58">.</op:operator><name pos:line="1151" pos:column="59">VariableType</name><op:operator pos:line="1151" pos:column="71">.</op:operator><name pos:line="1151" pos:column="72">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="1152" pos:column="13">var</name></type> <name pos:line="1152" pos:column="17">prefixNames</name> <init pos:line="1152" pos:column="29">= <expr><call><name><name pos:line="1152" pos:column="31">testDeclaration</name><op:operator pos:line="1152" pos:column="46">.</op:operator><name pos:line="1152" pos:column="47">VariableType</name><op:operator pos:line="1152" pos:column="59">.</op:operator><name pos:line="1152" pos:column="60">Prefix</name><op:operator pos:line="1152" pos:column="66">.</op:operator><name pos:line="1152" pos:column="67">Names</name><op:operator pos:line="1152" pos:column="72">.</op:operator><name pos:line="1152" pos:column="73">ToList</name></name><argument_list pos:line="1152" pos:column="79">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1153" pos:column="13">Assert</name><op:operator pos:line="1153" pos:column="19">.</op:operator><name pos:line="1153" pos:column="20">AreEqual</name></name><argument_list pos:line="1153" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1153" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1153" pos:column="32">prefixNames</name><op:operator pos:line="1153" pos:column="43">.</op:operator><name pos:line="1153" pos:column="44">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1154" pos:column="13">Assert</name><op:operator pos:line="1154" pos:column="19">.</op:operator><name pos:line="1154" pos:column="20">AreEqual</name></name><argument_list pos:line="1154" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1154" pos:column="29">"System"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1154" pos:column="39">prefixNames</name><index pos:line="1154" pos:column="50">[<expr><lit:literal type="number" pos:line="1154" pos:column="51">0</lit:literal></expr>]</index></name><op:operator pos:line="1154" pos:column="53">.</op:operator><name pos:line="1154" pos:column="54">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1155" pos:column="13">Assert</name><op:operator pos:line="1155" pos:column="19">.</op:operator><name pos:line="1155" pos:column="20">AreEqual</name></name><argument_list pos:line="1155" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1155" pos:column="29">"Collection"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1155" pos:column="43">prefixNames</name><index pos:line="1155" pos:column="54">[<expr><lit:literal type="number" pos:line="1155" pos:column="55">1</lit:literal></expr>]</index></name><op:operator pos:line="1155" pos:column="57">.</op:operator><name pos:line="1155" pos:column="58">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1156" pos:column="13">Assert</name><op:operator pos:line="1156" pos:column="19">.</op:operator><name pos:line="1156" pos:column="20">That</name></name><argument_list pos:line="1156" pos:column="24">(<argument><expr><name><name pos:line="1156" pos:column="25">testDeclaration</name><op:operator pos:line="1156" pos:column="40">.</op:operator><name pos:line="1156" pos:column="41">VariableType</name><op:operator pos:line="1156" pos:column="53">.</op:operator><name pos:line="1156" pos:column="54">IsGeneric</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1157" pos:column="13">Assert</name><op:operator pos:line="1157" pos:column="19">.</op:operator><name pos:line="1157" pos:column="20">AreEqual</name></name><argument_list pos:line="1157" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1157" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1157" pos:column="32">testDeclaration</name><op:operator pos:line="1157" pos:column="47">.</op:operator><name pos:line="1157" pos:column="48">VariableType</name><op:operator pos:line="1157" pos:column="60">.</op:operator><name pos:line="1157" pos:column="61">TypeParameters</name><op:operator pos:line="1157" pos:column="75">.</op:operator><name pos:line="1157" pos:column="76">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1158" pos:column="13">Assert</name><op:operator pos:line="1158" pos:column="19">.</op:operator><name pos:line="1158" pos:column="20">AreEqual</name></name><argument_list pos:line="1158" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1158" pos:column="29">"string"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="1158" pos:column="39">testDeclaration</name><op:operator pos:line="1158" pos:column="54">.</op:operator><name pos:line="1158" pos:column="55">VariableType</name><op:operator pos:line="1158" pos:column="67">.</op:operator><name pos:line="1158" pos:column="68">TypeParameters</name><op:operator pos:line="1158" pos:column="82">.</op:operator><name pos:line="1158" pos:column="83">First</name></name><argument_list pos:line="1158" pos:column="88">()</argument_list></call><op:operator pos:line="1158" pos:column="90">.</op:operator><name pos:line="1158" pos:column="91">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1159" pos:column="13">Assert</name><op:operator pos:line="1159" pos:column="19">.</op:operator><name pos:line="1159" pos:column="20">AreEqual</name></name><argument_list pos:line="1159" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1159" pos:column="29">"int"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="1159" pos:column="36">testDeclaration</name><op:operator pos:line="1159" pos:column="51">.</op:operator><name pos:line="1159" pos:column="52">VariableType</name><op:operator pos:line="1159" pos:column="64">.</op:operator><name pos:line="1159" pos:column="65">TypeParameters</name><op:operator pos:line="1159" pos:column="79">.</op:operator><name pos:line="1159" pos:column="80">Last</name></name><argument_list pos:line="1159" pos:column="84">()</argument_list></call><op:operator pos:line="1159" pos:column="86">.</op:operator><name pos:line="1159" pos:column="87">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1162" pos:column="9">[<expr><name pos:line="1162" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1163" pos:column="9">public</specifier> <name pos:line="1163" pos:column="16">void</name></type> <name pos:line="1163" pos:column="21">TestGetAccessModifierForMethod_InternalProtected</name><parameter_list pos:line="1163" pos:column="69">()</parameter_list> <block pos:line="1163" pos:column="72">{
            <comment type="line" pos:line="1164" pos:column="13">//namespace Example {</comment>
            <comment type="line" pos:line="1165" pos:column="13">//    public class Foo {</comment>
            <comment type="line" pos:line="1166" pos:column="13">//        internal protected bool Bar() { return true; }</comment>
            <comment type="line" pos:line="1167" pos:column="13">//    }</comment>
            <comment type="line" pos:line="1168" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="1169" pos:column="13">string</name></type> <name pos:line="1169" pos:column="20">xml</name> <init pos:line="1169" pos:column="24">= <expr><lit:literal type="string" pos:line="1169" pos:column="26">@"&lt;namespace&gt;namespace &lt;name&gt;Example&lt;/name&gt; &lt;block&gt;{
    &lt;class&gt;&lt;specifier&gt;public&lt;/specifier&gt; class &lt;name&gt;Foo&lt;/name&gt; &lt;block&gt;{
        &lt;function&gt;&lt;type&gt;&lt;specifier&gt;internal&lt;/specifier&gt; &lt;specifier&gt;protected&lt;/specifier&gt; &lt;name&gt;bool&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Bar&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ &lt;return&gt;return &lt;expr&gt;&lt;lit:literal type=""boolean&gt;true&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt; }&lt;/block&gt;&lt;/function&gt;
    }&lt;/block&gt;&lt;/class&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1174" pos:column="13">var</name></type> <name pos:line="1174" pos:column="17">unit</name> <init pos:line="1174" pos:column="22">= <expr><call><name><name pos:line="1174" pos:column="24">fileSetup</name><op:operator pos:line="1174" pos:column="33">.</op:operator><name pos:line="1174" pos:column="34">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1174" pos:column="58">(<argument><expr><name pos:line="1174" pos:column="59">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1174" pos:column="64">"Foo.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <decl_stmt><decl><type><name pos:line="1176" pos:column="13">var</name></type> <name pos:line="1176" pos:column="17">globalScope</name> <init pos:line="1176" pos:column="29">= <expr><call><name><name pos:line="1176" pos:column="31">codeParser</name><op:operator pos:line="1176" pos:column="41">.</op:operator><name pos:line="1176" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="1176" pos:column="55">(<argument><expr><name pos:line="1176" pos:column="56">unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1177" pos:column="13">var</name></type> <name pos:line="1177" pos:column="17">method</name> <init pos:line="1177" pos:column="24">= <expr><call><name><name pos:line="1177" pos:column="26">globalScope</name><op:operator pos:line="1177" pos:column="37">.</op:operator><name><name pos:line="1177" pos:column="38">GetDescendants</name><argument_list pos:line="1177" pos:column="52">&lt;<argument><name pos:line="1177" pos:column="53">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1177" pos:column="70">()</argument_list></call><op:operator pos:line="1177" pos:column="72">.</op:operator><call><name pos:line="1177" pos:column="73">First</name><argument_list pos:line="1177" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="1179" pos:column="13">Assert</name><op:operator pos:line="1179" pos:column="19">.</op:operator><name pos:line="1179" pos:column="20">AreEqual</name></name><argument_list pos:line="1179" pos:column="28">(<argument><expr><name><name pos:line="1179" pos:column="29">AccessModifier</name><op:operator pos:line="1179" pos:column="43">.</op:operator><name pos:line="1179" pos:column="44">ProtectedInternal</name></name></expr></argument>, <argument><expr><name><name pos:line="1179" pos:column="63">method</name><op:operator pos:line="1179" pos:column="69">.</op:operator><name pos:line="1179" pos:column="70">Accessibility</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1182" pos:column="9">[<expr><name pos:line="1182" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1183" pos:column="9">public</specifier> <name pos:line="1183" pos:column="16">void</name></type> <name pos:line="1183" pos:column="21">TestGetAccessModifierForMethod_None</name><parameter_list pos:line="1183" pos:column="56">()</parameter_list> <block pos:line="1183" pos:column="59">{
            <comment type="line" pos:line="1184" pos:column="13">//namespace Example {</comment>
            <comment type="line" pos:line="1185" pos:column="13">//    public class Foo {</comment>
            <comment type="line" pos:line="1186" pos:column="13">//        bool Bar() { return true; }</comment>
            <comment type="line" pos:line="1187" pos:column="13">//    }</comment>
            <comment type="line" pos:line="1188" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="1189" pos:column="13">string</name></type> <name pos:line="1189" pos:column="20">xml</name> <init pos:line="1189" pos:column="24">= <expr><lit:literal type="string" pos:line="1189" pos:column="26">@"&lt;namespace&gt;namespace &lt;name&gt;Example&lt;/name&gt; &lt;block&gt;{
    &lt;class&gt;&lt;specifier&gt;public&lt;/specifier&gt; class &lt;name&gt;Foo&lt;/name&gt; &lt;block&gt;{
        &lt;function&gt;&lt;type&gt;&lt;name&gt;bool&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Bar&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ &lt;return&gt;return &lt;expr&gt;&lt;lit:literal type=""boolean&gt;true&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt; }&lt;/block&gt;&lt;/function&gt;
    }&lt;/block&gt;&lt;/class&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1194" pos:column="13">var</name></type> <name pos:line="1194" pos:column="17">unit</name> <init pos:line="1194" pos:column="22">= <expr><call><name><name pos:line="1194" pos:column="24">fileSetup</name><op:operator pos:line="1194" pos:column="33">.</op:operator><name pos:line="1194" pos:column="34">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1194" pos:column="58">(<argument><expr><name pos:line="1194" pos:column="59">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1194" pos:column="64">"Foo.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1196" pos:column="13">var</name></type> <name pos:line="1196" pos:column="17">globalScope</name> <init pos:line="1196" pos:column="29">= <expr><call><name><name pos:line="1196" pos:column="31">codeParser</name><op:operator pos:line="1196" pos:column="41">.</op:operator><name pos:line="1196" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="1196" pos:column="55">(<argument><expr><name pos:line="1196" pos:column="56">unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1197" pos:column="13">var</name></type> <name pos:line="1197" pos:column="17">method</name> <init pos:line="1197" pos:column="24">= <expr><call><name><name pos:line="1197" pos:column="26">globalScope</name><op:operator pos:line="1197" pos:column="37">.</op:operator><name><name pos:line="1197" pos:column="38">GetDescendants</name><argument_list pos:line="1197" pos:column="52">&lt;<argument><name pos:line="1197" pos:column="53">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1197" pos:column="70">()</argument_list></call><op:operator pos:line="1197" pos:column="72">.</op:operator><call><name pos:line="1197" pos:column="73">First</name><argument_list pos:line="1197" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="1199" pos:column="13">Assert</name><op:operator pos:line="1199" pos:column="19">.</op:operator><name pos:line="1199" pos:column="20">AreEqual</name></name><argument_list pos:line="1199" pos:column="28">(<argument><expr><name><name pos:line="1199" pos:column="29">AccessModifier</name><op:operator pos:line="1199" pos:column="43">.</op:operator><name pos:line="1199" pos:column="44">None</name></name></expr></argument>, <argument><expr><name><name pos:line="1199" pos:column="50">method</name><op:operator pos:line="1199" pos:column="56">.</op:operator><name pos:line="1199" pos:column="57">Accessibility</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1202" pos:column="9">[<expr><name pos:line="1202" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1203" pos:column="9">public</specifier> <name pos:line="1203" pos:column="16">void</name></type> <name pos:line="1203" pos:column="21">TestGetAccessModifierForMethod_Normal</name><parameter_list pos:line="1203" pos:column="58">()</parameter_list> <block pos:line="1203" pos:column="61">{
            <comment type="line" pos:line="1204" pos:column="13">//namespace Example {</comment>
            <comment type="line" pos:line="1205" pos:column="13">//    public class Foo {</comment>
            <comment type="line" pos:line="1206" pos:column="13">//        public bool Bar() { return true; }</comment>
            <comment type="line" pos:line="1207" pos:column="13">//    }</comment>
            <comment type="line" pos:line="1208" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="1209" pos:column="13">string</name></type> <name pos:line="1209" pos:column="20">xml</name> <init pos:line="1209" pos:column="24">= <expr><lit:literal type="string" pos:line="1209" pos:column="26">@"&lt;namespace&gt;namespace &lt;name&gt;Example&lt;/name&gt; &lt;block&gt;{
    &lt;class&gt;&lt;specifier&gt;public&lt;/specifier&gt; class &lt;name&gt;Foo&lt;/name&gt; &lt;block&gt;{
        &lt;function&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;bool&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Bar&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ &lt;return&gt;return &lt;expr&gt;&lt;lit:literal type=""boolean&gt;true&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt; }&lt;/block&gt;&lt;/function&gt;
    }&lt;/block&gt;&lt;/class&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1214" pos:column="13">var</name></type> <name pos:line="1214" pos:column="17">unit</name> <init pos:line="1214" pos:column="22">= <expr><call><name><name pos:line="1214" pos:column="24">fileSetup</name><op:operator pos:line="1214" pos:column="33">.</op:operator><name pos:line="1214" pos:column="34">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1214" pos:column="58">(<argument><expr><name pos:line="1214" pos:column="59">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1214" pos:column="64">"Foo.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1216" pos:column="13">var</name></type> <name pos:line="1216" pos:column="17">globalScope</name> <init pos:line="1216" pos:column="29">= <expr><call><name><name pos:line="1216" pos:column="31">codeParser</name><op:operator pos:line="1216" pos:column="41">.</op:operator><name pos:line="1216" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="1216" pos:column="55">(<argument><expr><name pos:line="1216" pos:column="56">unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1217" pos:column="13">var</name></type> <name pos:line="1217" pos:column="17">method</name> <init pos:line="1217" pos:column="24">= <expr><call><name><name pos:line="1217" pos:column="26">globalScope</name><op:operator pos:line="1217" pos:column="37">.</op:operator><name><name pos:line="1217" pos:column="38">GetDescendants</name><argument_list pos:line="1217" pos:column="52">&lt;<argument><name pos:line="1217" pos:column="53">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1217" pos:column="70">()</argument_list></call><op:operator pos:line="1217" pos:column="72">.</op:operator><call><name pos:line="1217" pos:column="73">First</name><argument_list pos:line="1217" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="1219" pos:column="13">Assert</name><op:operator pos:line="1219" pos:column="19">.</op:operator><name pos:line="1219" pos:column="20">AreEqual</name></name><argument_list pos:line="1219" pos:column="28">(<argument><expr><name><name pos:line="1219" pos:column="29">AccessModifier</name><op:operator pos:line="1219" pos:column="43">.</op:operator><name pos:line="1219" pos:column="44">Public</name></name></expr></argument>, <argument><expr><name><name pos:line="1219" pos:column="52">method</name><op:operator pos:line="1219" pos:column="58">.</op:operator><name pos:line="1219" pos:column="59">Accessibility</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1222" pos:column="9">[<expr><name pos:line="1222" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1223" pos:column="9">public</specifier> <name pos:line="1223" pos:column="16">void</name></type> <name pos:line="1223" pos:column="21">TestGetAccessModifierForMethod_ProtectedInternal</name><parameter_list pos:line="1223" pos:column="69">()</parameter_list> <block pos:line="1223" pos:column="72">{
            <comment type="line" pos:line="1224" pos:column="13">//namespace Example {</comment>
            <comment type="line" pos:line="1225" pos:column="13">//    public class Foo {</comment>
            <comment type="line" pos:line="1226" pos:column="13">//        protected internal bool Bar() { return true; }</comment>
            <comment type="line" pos:line="1227" pos:column="13">//    }</comment>
            <comment type="line" pos:line="1228" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="1229" pos:column="13">string</name></type> <name pos:line="1229" pos:column="20">xml</name> <init pos:line="1229" pos:column="24">= <expr><lit:literal type="string" pos:line="1229" pos:column="26">@"&lt;namespace&gt;namespace &lt;name&gt;Example&lt;/name&gt; &lt;block&gt;{
    &lt;class&gt;&lt;specifier&gt;public&lt;/specifier&gt; class &lt;name&gt;Foo&lt;/name&gt; &lt;block&gt;{
        &lt;function&gt;&lt;type&gt;&lt;specifier&gt;protected&lt;/specifier&gt; &lt;specifier&gt;internal&lt;/specifier&gt; &lt;name&gt;bool&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Bar&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ &lt;return&gt;return &lt;expr&gt;&lt;lit:literal type=""boolean&gt;true&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt; }&lt;/block&gt;&lt;/function&gt;
    }&lt;/block&gt;&lt;/class&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1234" pos:column="13">var</name></type> <name pos:line="1234" pos:column="17">unit</name> <init pos:line="1234" pos:column="22">= <expr><call><name><name pos:line="1234" pos:column="24">fileSetup</name><op:operator pos:line="1234" pos:column="33">.</op:operator><name pos:line="1234" pos:column="34">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1234" pos:column="58">(<argument><expr><name pos:line="1234" pos:column="59">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1234" pos:column="64">"Foo.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1236" pos:column="13">var</name></type> <name pos:line="1236" pos:column="17">globalScope</name> <init pos:line="1236" pos:column="29">= <expr><call><name><name pos:line="1236" pos:column="31">codeParser</name><op:operator pos:line="1236" pos:column="41">.</op:operator><name pos:line="1236" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="1236" pos:column="55">(<argument><expr><name pos:line="1236" pos:column="56">unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1237" pos:column="13">var</name></type> <name pos:line="1237" pos:column="17">method</name> <init pos:line="1237" pos:column="24">= <expr><call><name><name pos:line="1237" pos:column="26">globalScope</name><op:operator pos:line="1237" pos:column="37">.</op:operator><name><name pos:line="1237" pos:column="38">GetDescendants</name><argument_list pos:line="1237" pos:column="52">&lt;<argument><name pos:line="1237" pos:column="53">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1237" pos:column="70">()</argument_list></call><op:operator pos:line="1237" pos:column="72">.</op:operator><call><name pos:line="1237" pos:column="73">First</name><argument_list pos:line="1237" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="1239" pos:column="13">Assert</name><op:operator pos:line="1239" pos:column="19">.</op:operator><name pos:line="1239" pos:column="20">AreEqual</name></name><argument_list pos:line="1239" pos:column="28">(<argument><expr><name><name pos:line="1239" pos:column="29">AccessModifier</name><op:operator pos:line="1239" pos:column="43">.</op:operator><name pos:line="1239" pos:column="44">ProtectedInternal</name></name></expr></argument>, <argument><expr><name><name pos:line="1239" pos:column="63">method</name><op:operator pos:line="1239" pos:column="69">.</op:operator><name pos:line="1239" pos:column="70">Accessibility</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1242" pos:column="9">[<expr><name pos:line="1242" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1243" pos:column="9">public</specifier> <name pos:line="1243" pos:column="16">void</name></type> <name pos:line="1243" pos:column="21">TestGetAccessModifierForMethod_ProtectedInternalStatic</name><parameter_list pos:line="1243" pos:column="75">()</parameter_list> <block pos:line="1243" pos:column="78">{
            <comment type="line" pos:line="1244" pos:column="13">//namespace Example {</comment>
            <comment type="line" pos:line="1245" pos:column="13">//    public class Foo {</comment>
            <comment type="line" pos:line="1246" pos:column="13">//        protected static internal bool Bar() { return true; }</comment>
            <comment type="line" pos:line="1247" pos:column="13">//    }</comment>
            <comment type="line" pos:line="1248" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="1249" pos:column="13">string</name></type> <name pos:line="1249" pos:column="20">xml</name> <init pos:line="1249" pos:column="24">= <expr><lit:literal type="string" pos:line="1249" pos:column="26">@"&lt;namespace&gt;namespace &lt;name&gt;Example&lt;/name&gt; &lt;block&gt;{
    &lt;class&gt;&lt;specifier&gt;public&lt;/specifier&gt; class &lt;name&gt;Foo&lt;/name&gt; &lt;block&gt;{
        &lt;function&gt;&lt;type&gt;&lt;specifier&gt;protected&lt;/specifier&gt; &lt;specifier&gt;static&lt;/specifier&gt; &lt;specifier&gt;internal&lt;/specifier&gt; &lt;name&gt;bool&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Bar&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ &lt;return&gt;return &lt;expr&gt;&lt;lit:literal type=""boolean&gt;true&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt; }&lt;/block&gt;&lt;/function&gt;
    }&lt;/block&gt;&lt;/class&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1254" pos:column="13">var</name></type> <name pos:line="1254" pos:column="17">unit</name> <init pos:line="1254" pos:column="22">= <expr><call><name><name pos:line="1254" pos:column="24">fileSetup</name><op:operator pos:line="1254" pos:column="33">.</op:operator><name pos:line="1254" pos:column="34">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1254" pos:column="58">(<argument><expr><name pos:line="1254" pos:column="59">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1254" pos:column="64">"Foo.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1256" pos:column="13">var</name></type> <name pos:line="1256" pos:column="17">globalScope</name> <init pos:line="1256" pos:column="29">= <expr><call><name><name pos:line="1256" pos:column="31">codeParser</name><op:operator pos:line="1256" pos:column="41">.</op:operator><name pos:line="1256" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="1256" pos:column="55">(<argument><expr><name pos:line="1256" pos:column="56">unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1257" pos:column="13">var</name></type> <name pos:line="1257" pos:column="17">method</name> <init pos:line="1257" pos:column="24">= <expr><call><name><name pos:line="1257" pos:column="26">globalScope</name><op:operator pos:line="1257" pos:column="37">.</op:operator><name><name pos:line="1257" pos:column="38">GetDescendants</name><argument_list pos:line="1257" pos:column="52">&lt;<argument><name pos:line="1257" pos:column="53">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1257" pos:column="70">()</argument_list></call><op:operator pos:line="1257" pos:column="72">.</op:operator><call><name pos:line="1257" pos:column="73">First</name><argument_list pos:line="1257" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="1259" pos:column="13">Assert</name><op:operator pos:line="1259" pos:column="19">.</op:operator><name pos:line="1259" pos:column="20">AreEqual</name></name><argument_list pos:line="1259" pos:column="28">(<argument><expr><name><name pos:line="1259" pos:column="29">AccessModifier</name><op:operator pos:line="1259" pos:column="43">.</op:operator><name pos:line="1259" pos:column="44">ProtectedInternal</name></name></expr></argument>, <argument><expr><name><name pos:line="1259" pos:column="63">method</name><op:operator pos:line="1259" pos:column="69">.</op:operator><name pos:line="1259" pos:column="70">Accessibility</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1262" pos:column="9">[<expr><name pos:line="1262" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1263" pos:column="9">public</specifier> <name pos:line="1263" pos:column="16">void</name></type> <name pos:line="1263" pos:column="21">TestGetAccessModifierForType_InternalProtected</name><parameter_list pos:line="1263" pos:column="67">()</parameter_list> <block pos:line="1263" pos:column="70">{
            <comment type="line" pos:line="1264" pos:column="13">//namespace Example {</comment>
            <comment type="line" pos:line="1265" pos:column="13">//    internal protected class Foo {}</comment>
            <comment type="line" pos:line="1266" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="1267" pos:column="13">string</name></type> <name pos:line="1267" pos:column="20">xml</name> <init pos:line="1267" pos:column="24">= <expr><lit:literal type="string" pos:line="1267" pos:column="26">@"&lt;namespace&gt;namespace &lt;name&gt;Example&lt;/name&gt; &lt;block&gt;{
    &lt;class&gt;&lt;specifier&gt;internal&lt;/specifier&gt; &lt;specifier&gt;protected&lt;/specifier&gt; class &lt;name&gt;Foo&lt;/name&gt; &lt;block&gt;{}&lt;/block&gt;&lt;/class&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1270" pos:column="13">var</name></type> <name pos:line="1270" pos:column="17">unit</name> <init pos:line="1270" pos:column="22">= <expr><call><name><name pos:line="1270" pos:column="24">fileSetup</name><op:operator pos:line="1270" pos:column="33">.</op:operator><name pos:line="1270" pos:column="34">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1270" pos:column="58">(<argument><expr><name pos:line="1270" pos:column="59">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1270" pos:column="64">"Foo.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1272" pos:column="13">var</name></type> <name pos:line="1272" pos:column="17">globalScope</name> <init pos:line="1272" pos:column="29">= <expr><call><name><name pos:line="1272" pos:column="31">codeParser</name><op:operator pos:line="1272" pos:column="41">.</op:operator><name pos:line="1272" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="1272" pos:column="55">(<argument><expr><name pos:line="1272" pos:column="56">unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1273" pos:column="13">var</name></type> <name pos:line="1273" pos:column="17">type</name> <init pos:line="1273" pos:column="22">= <expr><call><name><name pos:line="1273" pos:column="24">globalScope</name><op:operator pos:line="1273" pos:column="35">.</op:operator><name><name pos:line="1273" pos:column="36">GetDescendants</name><argument_list pos:line="1273" pos:column="50">&lt;<argument><name pos:line="1273" pos:column="51">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1273" pos:column="66">()</argument_list></call><op:operator pos:line="1273" pos:column="68">.</op:operator><call><name pos:line="1273" pos:column="69">First</name><argument_list pos:line="1273" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="1275" pos:column="13">Assert</name><op:operator pos:line="1275" pos:column="19">.</op:operator><name pos:line="1275" pos:column="20">AreEqual</name></name><argument_list pos:line="1275" pos:column="28">(<argument><expr><name><name pos:line="1275" pos:column="29">AccessModifier</name><op:operator pos:line="1275" pos:column="43">.</op:operator><name pos:line="1275" pos:column="44">ProtectedInternal</name></name></expr></argument>, <argument><expr><name><name pos:line="1275" pos:column="63">type</name><op:operator pos:line="1275" pos:column="67">.</op:operator><name pos:line="1275" pos:column="68">Accessibility</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1278" pos:column="9">[<expr><name pos:line="1278" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1279" pos:column="9">public</specifier> <name pos:line="1279" pos:column="16">void</name></type> <name pos:line="1279" pos:column="21">TestGetAccessModifierForType_None</name><parameter_list pos:line="1279" pos:column="54">()</parameter_list> <block pos:line="1279" pos:column="57">{
            <comment type="line" pos:line="1280" pos:column="13">//namespace Example {</comment>
            <comment type="line" pos:line="1281" pos:column="13">//    class Foo {}</comment>
            <comment type="line" pos:line="1282" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="1283" pos:column="13">string</name></type> <name pos:line="1283" pos:column="20">xml</name> <init pos:line="1283" pos:column="24">= <expr><lit:literal type="string" pos:line="1283" pos:column="26">@"&lt;namespace&gt;namespace &lt;name&gt;Example&lt;/name&gt; &lt;block&gt;{
    &lt;class&gt;class &lt;name&gt;Foo&lt;/name&gt; &lt;block&gt;{}&lt;/block&gt;&lt;/class&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1286" pos:column="13">var</name></type> <name pos:line="1286" pos:column="17">unit</name> <init pos:line="1286" pos:column="22">= <expr><call><name><name pos:line="1286" pos:column="24">fileSetup</name><op:operator pos:line="1286" pos:column="33">.</op:operator><name pos:line="1286" pos:column="34">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1286" pos:column="58">(<argument><expr><name pos:line="1286" pos:column="59">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1286" pos:column="64">"Foo.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1288" pos:column="13">var</name></type> <name pos:line="1288" pos:column="17">globalScope</name> <init pos:line="1288" pos:column="29">= <expr><call><name><name pos:line="1288" pos:column="31">codeParser</name><op:operator pos:line="1288" pos:column="41">.</op:operator><name pos:line="1288" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="1288" pos:column="55">(<argument><expr><name pos:line="1288" pos:column="56">unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1289" pos:column="13">var</name></type> <name pos:line="1289" pos:column="17">type</name> <init pos:line="1289" pos:column="22">= <expr><call><name><name pos:line="1289" pos:column="24">globalScope</name><op:operator pos:line="1289" pos:column="35">.</op:operator><name><name pos:line="1289" pos:column="36">GetDescendants</name><argument_list pos:line="1289" pos:column="50">&lt;<argument><name pos:line="1289" pos:column="51">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1289" pos:column="66">()</argument_list></call><op:operator pos:line="1289" pos:column="68">.</op:operator><call><name pos:line="1289" pos:column="69">First</name><argument_list pos:line="1289" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="1291" pos:column="13">Assert</name><op:operator pos:line="1291" pos:column="19">.</op:operator><name pos:line="1291" pos:column="20">AreEqual</name></name><argument_list pos:line="1291" pos:column="28">(<argument><expr><name><name pos:line="1291" pos:column="29">AccessModifier</name><op:operator pos:line="1291" pos:column="43">.</op:operator><name pos:line="1291" pos:column="44">None</name></name></expr></argument>, <argument><expr><name><name pos:line="1291" pos:column="50">type</name><op:operator pos:line="1291" pos:column="54">.</op:operator><name pos:line="1291" pos:column="55">Accessibility</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1294" pos:column="9">[<expr><name pos:line="1294" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1295" pos:column="9">public</specifier> <name pos:line="1295" pos:column="16">void</name></type> <name pos:line="1295" pos:column="21">TestGetAccessModifierForType_Normal</name><parameter_list pos:line="1295" pos:column="56">()</parameter_list> <block pos:line="1295" pos:column="59">{
            <comment type="line" pos:line="1296" pos:column="13">//namespace Example {</comment>
            <comment type="line" pos:line="1297" pos:column="13">//    public class Foo {}</comment>
            <comment type="line" pos:line="1298" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="1299" pos:column="13">string</name></type> <name pos:line="1299" pos:column="20">xml</name> <init pos:line="1299" pos:column="24">= <expr><lit:literal type="string" pos:line="1299" pos:column="26">@"&lt;namespace&gt;namespace &lt;name&gt;Example&lt;/name&gt; &lt;block&gt;{
    &lt;class&gt;&lt;specifier&gt;public&lt;/specifier&gt; class &lt;name&gt;Foo&lt;/name&gt; &lt;block&gt;{}&lt;/block&gt;&lt;/class&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1302" pos:column="13">var</name></type> <name pos:line="1302" pos:column="17">unit</name> <init pos:line="1302" pos:column="22">= <expr><call><name><name pos:line="1302" pos:column="24">fileSetup</name><op:operator pos:line="1302" pos:column="33">.</op:operator><name pos:line="1302" pos:column="34">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1302" pos:column="58">(<argument><expr><name pos:line="1302" pos:column="59">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1302" pos:column="64">"Foo.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1304" pos:column="13">var</name></type> <name pos:line="1304" pos:column="17">globalScope</name> <init pos:line="1304" pos:column="29">= <expr><call><name><name pos:line="1304" pos:column="31">codeParser</name><op:operator pos:line="1304" pos:column="41">.</op:operator><name pos:line="1304" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="1304" pos:column="55">(<argument><expr><name pos:line="1304" pos:column="56">unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1305" pos:column="13">var</name></type> <name pos:line="1305" pos:column="17">type</name> <init pos:line="1305" pos:column="22">= <expr><call><name><name pos:line="1305" pos:column="24">globalScope</name><op:operator pos:line="1305" pos:column="35">.</op:operator><name><name pos:line="1305" pos:column="36">GetDescendants</name><argument_list pos:line="1305" pos:column="50">&lt;<argument><name pos:line="1305" pos:column="51">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1305" pos:column="66">()</argument_list></call><op:operator pos:line="1305" pos:column="68">.</op:operator><call><name pos:line="1305" pos:column="69">First</name><argument_list pos:line="1305" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="1307" pos:column="13">Assert</name><op:operator pos:line="1307" pos:column="19">.</op:operator><name pos:line="1307" pos:column="20">AreEqual</name></name><argument_list pos:line="1307" pos:column="28">(<argument><expr><name><name pos:line="1307" pos:column="29">AccessModifier</name><op:operator pos:line="1307" pos:column="43">.</op:operator><name pos:line="1307" pos:column="44">Public</name></name></expr></argument>, <argument><expr><name><name pos:line="1307" pos:column="52">type</name><op:operator pos:line="1307" pos:column="56">.</op:operator><name pos:line="1307" pos:column="57">Accessibility</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1310" pos:column="9">[<expr><name pos:line="1310" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1311" pos:column="9">public</specifier> <name pos:line="1311" pos:column="16">void</name></type> <name pos:line="1311" pos:column="21">TestGetAccessModifierForType_ProtectedInternal</name><parameter_list pos:line="1311" pos:column="67">()</parameter_list> <block pos:line="1311" pos:column="70">{
            <comment type="line" pos:line="1312" pos:column="13">//namespace Example {</comment>
            <comment type="line" pos:line="1313" pos:column="13">//    protected internal class Foo {}</comment>
            <comment type="line" pos:line="1314" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="1315" pos:column="13">string</name></type> <name pos:line="1315" pos:column="20">xml</name> <init pos:line="1315" pos:column="24">= <expr><lit:literal type="string" pos:line="1315" pos:column="26">@"&lt;namespace&gt;namespace &lt;name&gt;Example&lt;/name&gt; &lt;block&gt;{
    &lt;class&gt;&lt;specifier&gt;protected&lt;/specifier&gt; &lt;specifier&gt;internal&lt;/specifier&gt; class &lt;name&gt;Foo&lt;/name&gt; &lt;block&gt;{}&lt;/block&gt;&lt;/class&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1318" pos:column="13">var</name></type> <name pos:line="1318" pos:column="17">unit</name> <init pos:line="1318" pos:column="22">= <expr><call><name><name pos:line="1318" pos:column="24">fileSetup</name><op:operator pos:line="1318" pos:column="33">.</op:operator><name pos:line="1318" pos:column="34">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1318" pos:column="58">(<argument><expr><name pos:line="1318" pos:column="59">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1318" pos:column="64">"Foo.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1320" pos:column="13">var</name></type> <name pos:line="1320" pos:column="17">globalScope</name> <init pos:line="1320" pos:column="29">= <expr><call><name><name pos:line="1320" pos:column="31">codeParser</name><op:operator pos:line="1320" pos:column="41">.</op:operator><name pos:line="1320" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="1320" pos:column="55">(<argument><expr><name pos:line="1320" pos:column="56">unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1321" pos:column="13">var</name></type> <name pos:line="1321" pos:column="17">type</name> <init pos:line="1321" pos:column="22">= <expr><call><name><name pos:line="1321" pos:column="24">globalScope</name><op:operator pos:line="1321" pos:column="35">.</op:operator><name><name pos:line="1321" pos:column="36">GetDescendants</name><argument_list pos:line="1321" pos:column="50">&lt;<argument><name pos:line="1321" pos:column="51">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1321" pos:column="66">()</argument_list></call><op:operator pos:line="1321" pos:column="68">.</op:operator><call><name pos:line="1321" pos:column="69">First</name><argument_list pos:line="1321" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="1323" pos:column="13">Assert</name><op:operator pos:line="1323" pos:column="19">.</op:operator><name pos:line="1323" pos:column="20">AreEqual</name></name><argument_list pos:line="1323" pos:column="28">(<argument><expr><name><name pos:line="1323" pos:column="29">AccessModifier</name><op:operator pos:line="1323" pos:column="43">.</op:operator><name pos:line="1323" pos:column="44">ProtectedInternal</name></name></expr></argument>, <argument><expr><name><name pos:line="1323" pos:column="63">type</name><op:operator pos:line="1323" pos:column="67">.</op:operator><name pos:line="1323" pos:column="68">Accessibility</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1326" pos:column="9">[<expr><name pos:line="1326" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1327" pos:column="9">public</specifier> <name pos:line="1327" pos:column="16">void</name></type> <name pos:line="1327" pos:column="21">TestGetAccessModifierForType_ProtectedInternalStatic</name><parameter_list pos:line="1327" pos:column="73">()</parameter_list> <block pos:line="1327" pos:column="76">{
            <comment type="line" pos:line="1328" pos:column="13">//namespace Example {</comment>
            <comment type="line" pos:line="1329" pos:column="13">//    protected static internal class Foo {}</comment>
            <comment type="line" pos:line="1330" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="1331" pos:column="13">string</name></type> <name pos:line="1331" pos:column="20">xml</name> <init pos:line="1331" pos:column="24">= <expr><lit:literal type="string" pos:line="1331" pos:column="26">@"&lt;namespace&gt;namespace &lt;name&gt;Example&lt;/name&gt; &lt;block&gt;{
    &lt;class&gt;&lt;specifier&gt;protected&lt;/specifier&gt; &lt;specifier&gt;static&lt;/specifier&gt; &lt;specifier&gt;internal&lt;/specifier&gt; class &lt;name&gt;Foo&lt;/name&gt; &lt;block&gt;{}&lt;/block&gt;&lt;/class&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1334" pos:column="13">var</name></type> <name pos:line="1334" pos:column="17">unit</name> <init pos:line="1334" pos:column="22">= <expr><call><name><name pos:line="1334" pos:column="24">fileSetup</name><op:operator pos:line="1334" pos:column="33">.</op:operator><name pos:line="1334" pos:column="34">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1334" pos:column="58">(<argument><expr><name pos:line="1334" pos:column="59">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1334" pos:column="64">"Foo.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1336" pos:column="13">var</name></type> <name pos:line="1336" pos:column="17">globalScope</name> <init pos:line="1336" pos:column="29">= <expr><call><name><name pos:line="1336" pos:column="31">codeParser</name><op:operator pos:line="1336" pos:column="41">.</op:operator><name pos:line="1336" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="1336" pos:column="55">(<argument><expr><name pos:line="1336" pos:column="56">unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1337" pos:column="13">var</name></type> <name pos:line="1337" pos:column="17">type</name> <init pos:line="1337" pos:column="22">= <expr><call><name><name pos:line="1337" pos:column="24">globalScope</name><op:operator pos:line="1337" pos:column="35">.</op:operator><name><name pos:line="1337" pos:column="36">GetDescendants</name><argument_list pos:line="1337" pos:column="50">&lt;<argument><name pos:line="1337" pos:column="51">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1337" pos:column="66">()</argument_list></call><op:operator pos:line="1337" pos:column="68">.</op:operator><call><name pos:line="1337" pos:column="69">First</name><argument_list pos:line="1337" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="1339" pos:column="13">Assert</name><op:operator pos:line="1339" pos:column="19">.</op:operator><name pos:line="1339" pos:column="20">AreEqual</name></name><argument_list pos:line="1339" pos:column="28">(<argument><expr><name><name pos:line="1339" pos:column="29">AccessModifier</name><op:operator pos:line="1339" pos:column="43">.</op:operator><name pos:line="1339" pos:column="44">ProtectedInternal</name></name></expr></argument>, <argument><expr><name><name pos:line="1339" pos:column="63">type</name><op:operator pos:line="1339" pos:column="67">.</op:operator><name pos:line="1339" pos:column="68">Accessibility</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1342" pos:column="9">[<expr><name pos:line="1342" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1343" pos:column="9">public</specifier> <name pos:line="1343" pos:column="16">void</name></type> <name pos:line="1343" pos:column="21">TestMethodCallWithBaseKeyword</name><parameter_list pos:line="1343" pos:column="50">()</parameter_list> <block pos:line="1343" pos:column="53">{
            <comment type="line" pos:line="1344" pos:column="13">// B.cs namespace A { class B { public virtual void Foo() { } } }</comment>
            <decl_stmt><decl><type><name pos:line="1345" pos:column="13">string</name></type> <name pos:line="1345" pos:column="20">bXml</name> <init pos:line="1345" pos:column="25">= <expr><lit:literal type="string" pos:line="1345" pos:column="27">@"&lt;namespace&gt;namespace &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{ &lt;class&gt;class &lt;name&gt;B&lt;/name&gt; &lt;block&gt;{ &lt;function&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;specifier&gt;virtual&lt;/specifier&gt; &lt;name&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ }&lt;/block&gt;&lt;/function&gt; }&lt;/block&gt;&lt;/class&gt; }&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="1346" pos:column="13">// C.cs namespace A { class C : B { public override void Foo() { base.Foo(); } } }</comment>
            <decl_stmt><decl><type><name pos:line="1347" pos:column="13">string</name></type> <name pos:line="1347" pos:column="20">cXml</name> <init pos:line="1347" pos:column="25">= <expr><lit:literal type="string" pos:line="1347" pos:column="27">@"&lt;namespace&gt;namespace &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{ &lt;class&gt;class &lt;name&gt;C&lt;/name&gt; &lt;super&gt;: &lt;name&gt;B&lt;/name&gt;&lt;/super&gt; &lt;block&gt;{ &lt;function&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;specifier&gt;override&lt;/specifier&gt; &lt;name&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;&lt;name&gt;base&lt;/name&gt;&lt;op:operator&gt;.&lt;/op:operator&gt;&lt;name&gt;Foo&lt;/name&gt;&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt; }&lt;/block&gt;&lt;/function&gt; }&lt;/block&gt;&lt;/class&gt; }&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1349" pos:column="13">var</name></type> <name pos:line="1349" pos:column="17">bUnit</name> <init pos:line="1349" pos:column="23">= <expr><call><name><name pos:line="1349" pos:column="25">fileSetup</name><op:operator pos:line="1349" pos:column="34">.</op:operator><name pos:line="1349" pos:column="35">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1349" pos:column="59">(<argument><expr><name pos:line="1349" pos:column="60">bXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1349" pos:column="66">"B.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1350" pos:column="13">var</name></type> <name pos:line="1350" pos:column="17">cUnit</name> <init pos:line="1350" pos:column="23">= <expr><call><name><name pos:line="1350" pos:column="25">fileSetup</name><op:operator pos:line="1350" pos:column="34">.</op:operator><name pos:line="1350" pos:column="35">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1350" pos:column="59">(<argument><expr><name pos:line="1350" pos:column="60">cXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1350" pos:column="66">"C.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1352" pos:column="13">var</name></type> <name pos:line="1352" pos:column="17">bScope</name> <init pos:line="1352" pos:column="24">= <expr><call><name><name pos:line="1352" pos:column="26">codeParser</name><op:operator pos:line="1352" pos:column="36">.</op:operator><name pos:line="1352" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="1352" pos:column="50">(<argument><expr><name pos:line="1352" pos:column="51">bUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1353" pos:column="13">var</name></type> <name pos:line="1353" pos:column="17">cScope</name> <init pos:line="1353" pos:column="24">= <expr><call><name><name pos:line="1353" pos:column="26">codeParser</name><op:operator pos:line="1353" pos:column="36">.</op:operator><name pos:line="1353" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="1353" pos:column="50">(<argument><expr><name pos:line="1353" pos:column="51">cUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1354" pos:column="13">var</name></type> <name pos:line="1354" pos:column="17">globalScope</name> <init pos:line="1354" pos:column="29">= <expr><call><name><name pos:line="1354" pos:column="31">bScope</name><op:operator pos:line="1354" pos:column="37">.</op:operator><name pos:line="1354" pos:column="38">Merge</name></name><argument_list pos:line="1354" pos:column="43">(<argument><expr><name pos:line="1354" pos:column="44">cScope</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1356" pos:column="13">var</name></type> <name pos:line="1356" pos:column="17">fooMethods</name> <init pos:line="1356" pos:column="28">= <expr><call><name><name pos:line="1356" pos:column="30">globalScope</name><op:operator pos:line="1356" pos:column="41">.</op:operator><name><name pos:line="1356" pos:column="42">GetDescendants</name><argument_list pos:line="1356" pos:column="56">&lt;<argument><name pos:line="1356" pos:column="57">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1356" pos:column="74">()</argument_list></call><op:operator pos:line="1356" pos:column="76">.</op:operator><call><name pos:line="1356" pos:column="77">ToList</name><argument_list pos:line="1356" pos:column="83">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1358" pos:column="13">var</name></type> <name pos:line="1358" pos:column="17">bDotFoo</name> <init pos:line="1358" pos:column="25">= <expr><call><name><name pos:line="1358" pos:column="27">fooMethods</name><op:operator pos:line="1358" pos:column="37">.</op:operator><name pos:line="1358" pos:column="38">FirstOrDefault</name></name><argument_list pos:line="1358" pos:column="52">(<argument><expr><lambda><name pos:line="1358" pos:column="53">m</name> <op:operator pos:line="1358" pos:column="55">=&gt;</op:operator> <call><name><name pos:line="1358" pos:column="58">m</name><op:operator pos:line="1358" pos:column="59">.</op:operator><name><name pos:line="1358" pos:column="60">GetAncestors</name><argument_list pos:line="1358" pos:column="72">&lt;<argument><name pos:line="1358" pos:column="73">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1358" pos:column="88">()</argument_list></call><op:operator pos:line="1358" pos:column="90">.</op:operator><call><name pos:line="1358" pos:column="91">FirstOrDefault</name><argument_list pos:line="1358" pos:column="105">()</argument_list></call><op:operator pos:line="1358" pos:column="107">.</op:operator><name pos:line="1358" pos:column="108">Name</name> <op:operator pos:line="1358" pos:column="113">==</op:operator> <lit:literal type="string" pos:line="1358" pos:column="116">"B"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1359" pos:column="13">Assert</name><op:operator pos:line="1359" pos:column="19">.</op:operator><name pos:line="1359" pos:column="20">IsNotNull</name></name><argument_list pos:line="1359" pos:column="29">(<argument><expr><name pos:line="1359" pos:column="30">bDotFoo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="1360" pos:column="13">var</name></type> <name pos:line="1360" pos:column="17">cDotFoo</name> <init pos:line="1360" pos:column="25">= <expr><call><name><name pos:line="1360" pos:column="27">fooMethods</name><op:operator pos:line="1360" pos:column="37">.</op:operator><name pos:line="1360" pos:column="38">FirstOrDefault</name></name><argument_list pos:line="1360" pos:column="52">(<argument><expr><lambda><name pos:line="1360" pos:column="53">m</name> <op:operator pos:line="1360" pos:column="55">=&gt;</op:operator> <call><name><name pos:line="1360" pos:column="58">m</name><op:operator pos:line="1360" pos:column="59">.</op:operator><name><name pos:line="1360" pos:column="60">GetAncestors</name><argument_list pos:line="1360" pos:column="72">&lt;<argument><name pos:line="1360" pos:column="73">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1360" pos:column="88">()</argument_list></call><op:operator pos:line="1360" pos:column="90">.</op:operator><call><name pos:line="1360" pos:column="91">FirstOrDefault</name><argument_list pos:line="1360" pos:column="105">()</argument_list></call><op:operator pos:line="1360" pos:column="107">.</op:operator><name pos:line="1360" pos:column="108">Name</name> <op:operator pos:line="1360" pos:column="113">==</op:operator> <lit:literal type="string" pos:line="1360" pos:column="116">"C"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1361" pos:column="13">Assert</name><op:operator pos:line="1361" pos:column="19">.</op:operator><name pos:line="1361" pos:column="20">IsNotNull</name></name><argument_list pos:line="1361" pos:column="29">(<argument><expr><name pos:line="1361" pos:column="30">cDotFoo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="1363" pos:column="13">Assert</name><op:operator pos:line="1363" pos:column="19">.</op:operator><name pos:line="1363" pos:column="20">AreEqual</name></name><argument_list pos:line="1363" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1363" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1363" pos:column="32">cDotFoo</name><op:operator pos:line="1363" pos:column="39">.</op:operator><name pos:line="1363" pos:column="40">ChildStatements</name><op:operator pos:line="1363" pos:column="55">.</op:operator><name pos:line="1363" pos:column="56">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="1364" pos:column="13">var</name></type> <name pos:line="1364" pos:column="17">methodCall</name> <init pos:line="1364" pos:column="28">= <expr><name><name pos:line="1364" pos:column="30">cDotFoo</name><op:operator pos:line="1364" pos:column="37">.</op:operator><name pos:line="1364" pos:column="38">ChildStatements</name><index pos:line="1364" pos:column="53">[<expr><lit:literal type="number" pos:line="1364" pos:column="54">0</lit:literal></expr>]</index></name><op:operator pos:line="1364" pos:column="56">.</op:operator><call><name><name pos:line="1364" pos:column="57">Content</name><op:operator pos:line="1364" pos:column="64">.</op:operator><name><name pos:line="1364" pos:column="65">GetDescendantsAndSelf</name><argument_list pos:line="1364" pos:column="86">&lt;<argument><name pos:line="1364" pos:column="87">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1364" pos:column="98">()</argument_list></call><op:operator pos:line="1364" pos:column="100">.</op:operator><call><name pos:line="1364" pos:column="101">FirstOrDefault</name><argument_list pos:line="1364" pos:column="115">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1365" pos:column="13">Assert</name><op:operator pos:line="1365" pos:column="19">.</op:operator><name pos:line="1365" pos:column="20">IsNotNull</name></name><argument_list pos:line="1365" pos:column="29">(<argument><expr><name pos:line="1365" pos:column="30">methodCall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1366" pos:column="13">Assert</name><op:operator pos:line="1366" pos:column="19">.</op:operator><name pos:line="1366" pos:column="20">AreSame</name></name><argument_list pos:line="1366" pos:column="27">(<argument><expr><name pos:line="1366" pos:column="28">bDotFoo</name></expr></argument>, <argument><expr><call><name><name pos:line="1366" pos:column="37">methodCall</name><op:operator pos:line="1366" pos:column="47">.</op:operator><name pos:line="1366" pos:column="48">FindMatches</name></name><argument_list pos:line="1366" pos:column="59">()</argument_list></call><op:operator pos:line="1366" pos:column="61">.</op:operator><call><name pos:line="1366" pos:column="62">FirstOrDefault</name><argument_list pos:line="1366" pos:column="76">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1369" pos:column="9">[<expr><name pos:line="1369" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1370" pos:column="9">public</specifier> <name pos:line="1370" pos:column="16">void</name></type> <name pos:line="1370" pos:column="21">TestMethodDefinitionWithReturnType</name><parameter_list pos:line="1370" pos:column="55">()</parameter_list> <block pos:line="1370" pos:column="58">{
            <comment type="line" pos:line="1371" pos:column="13">//int Foo() { }</comment>
            <decl_stmt><decl><type><name pos:line="1372" pos:column="13">string</name></type> <name pos:line="1372" pos:column="20">xml</name> <init pos:line="1372" pos:column="24">= <expr><lit:literal type="string" pos:line="1372" pos:column="26">@"&lt;function&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ }&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1374" pos:column="13">var</name></type> <name pos:line="1374" pos:column="17">testUnit</name> <init pos:line="1374" pos:column="26">= <expr><call><name><name pos:line="1374" pos:column="28">fileSetup</name><op:operator pos:line="1374" pos:column="37">.</op:operator><name pos:line="1374" pos:column="38">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1374" pos:column="62">(<argument><expr><name pos:line="1374" pos:column="63">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1374" pos:column="68">"test.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1376" pos:column="13">var</name></type> <name pos:line="1376" pos:column="17">testScope</name> <init pos:line="1376" pos:column="27">= <expr><call><name><name pos:line="1376" pos:column="29">codeParser</name><op:operator pos:line="1376" pos:column="39">.</op:operator><name pos:line="1376" pos:column="40">ParseFileUnit</name></name><argument_list pos:line="1376" pos:column="53">(<argument><expr><name pos:line="1376" pos:column="54">testUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1378" pos:column="13">var</name></type> <name pos:line="1378" pos:column="17">method</name> <init pos:line="1378" pos:column="24">= <expr><call><name><name pos:line="1378" pos:column="26">testScope</name><op:operator pos:line="1378" pos:column="35">.</op:operator><name><name pos:line="1378" pos:column="36">GetDescendants</name><argument_list pos:line="1378" pos:column="50">&lt;<argument><name pos:line="1378" pos:column="51">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1378" pos:column="68">()</argument_list></call><op:operator pos:line="1378" pos:column="70">.</op:operator><call><name pos:line="1378" pos:column="71">FirstOrDefault</name><argument_list pos:line="1378" pos:column="85">(<argument><expr><lambda><name pos:line="1378" pos:column="86">m</name> <op:operator pos:line="1378" pos:column="88">=&gt;</op:operator> <name><name pos:line="1378" pos:column="91">m</name><op:operator pos:line="1378" pos:column="92">.</op:operator><name pos:line="1378" pos:column="93">Name</name></name> <op:operator pos:line="1378" pos:column="98">==</op:operator> <lit:literal type="string" pos:line="1378" pos:column="101">"Foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1379" pos:column="13">Assert</name><op:operator pos:line="1379" pos:column="19">.</op:operator><name pos:line="1379" pos:column="20">IsNotNull</name></name><argument_list pos:line="1379" pos:column="29">(<argument><expr><name pos:line="1379" pos:column="30">method</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1379" pos:column="38">"could not find the test method"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="1381" pos:column="13">Assert</name><op:operator pos:line="1381" pos:column="19">.</op:operator><name pos:line="1381" pos:column="20">AreEqual</name></name><argument_list pos:line="1381" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1381" pos:column="29">"int"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1381" pos:column="36">method</name><op:operator pos:line="1381" pos:column="42">.</op:operator><name pos:line="1381" pos:column="43">ReturnType</name><op:operator pos:line="1381" pos:column="53">.</op:operator><name pos:line="1381" pos:column="54">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1384" pos:column="9">[<expr><name pos:line="1384" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1385" pos:column="9">public</specifier> <name pos:line="1385" pos:column="16">void</name></type> <name pos:line="1385" pos:column="21">TestMethodDefinitionWithReturnTypeAndWithSpecifier</name><parameter_list pos:line="1385" pos:column="71">()</parameter_list> <block pos:line="1385" pos:column="74">{
            <comment type="line" pos:line="1386" pos:column="13">//static int Foo() { }</comment>
            <decl_stmt><decl><type><name pos:line="1387" pos:column="13">string</name></type> <name pos:line="1387" pos:column="20">xml</name> <init pos:line="1387" pos:column="24">= <expr><lit:literal type="string" pos:line="1387" pos:column="26">@"&lt;function&gt;&lt;type&gt;&lt;specifier&gt;static&lt;/specifier&gt; &lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ }&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1389" pos:column="13">var</name></type> <name pos:line="1389" pos:column="17">testUnit</name> <init pos:line="1389" pos:column="26">= <expr><call><name><name pos:line="1389" pos:column="28">fileSetup</name><op:operator pos:line="1389" pos:column="37">.</op:operator><name pos:line="1389" pos:column="38">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1389" pos:column="62">(<argument><expr><name pos:line="1389" pos:column="63">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1389" pos:column="68">"test.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1391" pos:column="13">var</name></type> <name pos:line="1391" pos:column="17">testScope</name> <init pos:line="1391" pos:column="27">= <expr><call><name><name pos:line="1391" pos:column="29">codeParser</name><op:operator pos:line="1391" pos:column="39">.</op:operator><name pos:line="1391" pos:column="40">ParseFileUnit</name></name><argument_list pos:line="1391" pos:column="53">(<argument><expr><name pos:line="1391" pos:column="54">testUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1393" pos:column="13">var</name></type> <name pos:line="1393" pos:column="17">method</name> <init pos:line="1393" pos:column="24">= <expr><call><name><name pos:line="1393" pos:column="26">testScope</name><op:operator pos:line="1393" pos:column="35">.</op:operator><name><name pos:line="1393" pos:column="36">GetDescendants</name><argument_list pos:line="1393" pos:column="50">&lt;<argument><name pos:line="1393" pos:column="51">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1393" pos:column="68">()</argument_list></call><op:operator pos:line="1393" pos:column="70">.</op:operator><call><name pos:line="1393" pos:column="71">FirstOrDefault</name><argument_list pos:line="1393" pos:column="85">(<argument><expr><lambda><name pos:line="1393" pos:column="86">m</name> <op:operator pos:line="1393" pos:column="88">=&gt;</op:operator> <name><name pos:line="1393" pos:column="91">m</name><op:operator pos:line="1393" pos:column="92">.</op:operator><name pos:line="1393" pos:column="93">Name</name></name> <op:operator pos:line="1393" pos:column="98">==</op:operator> <lit:literal type="string" pos:line="1393" pos:column="101">"Foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1394" pos:column="13">Assert</name><op:operator pos:line="1394" pos:column="19">.</op:operator><name pos:line="1394" pos:column="20">IsNotNull</name></name><argument_list pos:line="1394" pos:column="29">(<argument><expr><name pos:line="1394" pos:column="30">method</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1394" pos:column="38">"could not find the test method"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="1396" pos:column="13">Assert</name><op:operator pos:line="1396" pos:column="19">.</op:operator><name pos:line="1396" pos:column="20">AreEqual</name></name><argument_list pos:line="1396" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1396" pos:column="29">"int"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1396" pos:column="36">method</name><op:operator pos:line="1396" pos:column="42">.</op:operator><name pos:line="1396" pos:column="43">ReturnType</name><op:operator pos:line="1396" pos:column="53">.</op:operator><name pos:line="1396" pos:column="54">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1399" pos:column="9">[<expr><name pos:line="1399" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1400" pos:column="9">public</specifier> <name pos:line="1400" pos:column="16">void</name></type> <name pos:line="1400" pos:column="21">TestMethodDefinitionWithVoidReturn</name><parameter_list pos:line="1400" pos:column="55">()</parameter_list> <block pos:line="1400" pos:column="58">{
            <comment type="line" pos:line="1401" pos:column="13">//void Foo() { }</comment>
            <decl_stmt><decl><type><name pos:line="1402" pos:column="13">string</name></type> <name pos:line="1402" pos:column="20">xml</name> <init pos:line="1402" pos:column="24">= <expr><lit:literal type="string" pos:line="1402" pos:column="26">@"&lt;function&gt;&lt;type&gt;&lt;name&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ }&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1404" pos:column="13">var</name></type> <name pos:line="1404" pos:column="17">testUnit</name> <init pos:line="1404" pos:column="26">= <expr><call><name><name pos:line="1404" pos:column="28">fileSetup</name><op:operator pos:line="1404" pos:column="37">.</op:operator><name pos:line="1404" pos:column="38">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1404" pos:column="62">(<argument><expr><name pos:line="1404" pos:column="63">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1404" pos:column="68">"test.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1406" pos:column="13">var</name></type> <name pos:line="1406" pos:column="17">testScope</name> <init pos:line="1406" pos:column="27">= <expr><call><name><name pos:line="1406" pos:column="29">codeParser</name><op:operator pos:line="1406" pos:column="39">.</op:operator><name pos:line="1406" pos:column="40">ParseFileUnit</name></name><argument_list pos:line="1406" pos:column="53">(<argument><expr><name pos:line="1406" pos:column="54">testUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1408" pos:column="13">var</name></type> <name pos:line="1408" pos:column="17">method</name> <init pos:line="1408" pos:column="24">= <expr><call><name><name pos:line="1408" pos:column="26">testScope</name><op:operator pos:line="1408" pos:column="35">.</op:operator><name><name pos:line="1408" pos:column="36">GetDescendants</name><argument_list pos:line="1408" pos:column="50">&lt;<argument><name pos:line="1408" pos:column="51">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1408" pos:column="68">()</argument_list></call><op:operator pos:line="1408" pos:column="70">.</op:operator><call><name pos:line="1408" pos:column="71">FirstOrDefault</name><argument_list pos:line="1408" pos:column="85">(<argument><expr><lambda><name pos:line="1408" pos:column="86">m</name> <op:operator pos:line="1408" pos:column="88">=&gt;</op:operator> <name><name pos:line="1408" pos:column="91">m</name><op:operator pos:line="1408" pos:column="92">.</op:operator><name pos:line="1408" pos:column="93">Name</name></name> <op:operator pos:line="1408" pos:column="98">==</op:operator> <lit:literal type="string" pos:line="1408" pos:column="101">"Foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1409" pos:column="13">Assert</name><op:operator pos:line="1409" pos:column="19">.</op:operator><name pos:line="1409" pos:column="20">IsNotNull</name></name><argument_list pos:line="1409" pos:column="29">(<argument><expr><name pos:line="1409" pos:column="30">method</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1409" pos:column="38">"could not find the test method"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="1411" pos:column="13">Assert</name><op:operator pos:line="1411" pos:column="19">.</op:operator><name pos:line="1411" pos:column="20">IsNull</name></name><argument_list pos:line="1411" pos:column="26">(<argument><expr><name><name pos:line="1411" pos:column="27">method</name><op:operator pos:line="1411" pos:column="33">.</op:operator><name pos:line="1411" pos:column="34">ReturnType</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1411" pos:column="46">"return type should be null"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>


        <function><type><attribute pos:line="1415" pos:column="9">[<expr><name pos:line="1415" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1416" pos:column="9">public</specifier> <name pos:line="1416" pos:column="16">void</name></type> <name pos:line="1416" pos:column="21">TestProperty</name><parameter_list pos:line="1416" pos:column="33">()</parameter_list> <block pos:line="1416" pos:column="36">{
            <comment type="line" pos:line="1417" pos:column="13">// namespace A { class B { int Foo { get; set; } } }</comment>
            <decl_stmt><decl><type><name pos:line="1418" pos:column="13">string</name></type> <name pos:line="1418" pos:column="20">xml</name> <init pos:line="1418" pos:column="24">= <expr><lit:literal type="string" pos:line="1418" pos:column="26">@"&lt;namespace&gt;namespace &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{ &lt;class&gt;class &lt;name&gt;B&lt;/name&gt; &lt;block&gt;{ &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Foo&lt;/name&gt; &lt;block&gt;{ &lt;function_decl&gt;&lt;name&gt;get&lt;/name&gt;;&lt;/function_decl&gt; &lt;function_decl&gt;&lt;name&gt;set&lt;/name&gt;;&lt;/function_decl&gt; }&lt;/block&gt;&lt;/decl&gt;&lt;/decl_stmt&gt; }&lt;/block&gt;&lt;/class&gt; }&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1420" pos:column="13">var</name></type> <name pos:line="1420" pos:column="17">testUnit</name> <init pos:line="1420" pos:column="26">= <expr><call><name><name pos:line="1420" pos:column="28">fileSetup</name><op:operator pos:line="1420" pos:column="37">.</op:operator><name pos:line="1420" pos:column="38">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1420" pos:column="62">(<argument><expr><name pos:line="1420" pos:column="63">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1420" pos:column="68">"B.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1421" pos:column="13">var</name></type> <name pos:line="1421" pos:column="17">testScope</name> <init pos:line="1421" pos:column="27">= <expr><call><name><name pos:line="1421" pos:column="29">codeParser</name><op:operator pos:line="1421" pos:column="39">.</op:operator><name pos:line="1421" pos:column="40">ParseFileUnit</name></name><argument_list pos:line="1421" pos:column="53">(<argument><expr><name pos:line="1421" pos:column="54">testUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1423" pos:column="13">var</name></type> <name pos:line="1423" pos:column="17">classB</name> <init pos:line="1423" pos:column="24">= <expr><call><name><name pos:line="1423" pos:column="26">testScope</name><op:operator pos:line="1423" pos:column="35">.</op:operator><name><name pos:line="1423" pos:column="36">GetDescendants</name><argument_list pos:line="1423" pos:column="50">&lt;<argument><name pos:line="1423" pos:column="51">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1423" pos:column="66">()</argument_list></call><op:operator pos:line="1423" pos:column="68">.</op:operator><call><name pos:line="1423" pos:column="69">FirstOrDefault</name><argument_list pos:line="1423" pos:column="83">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="1425" pos:column="13">Assert</name><op:operator pos:line="1425" pos:column="19">.</op:operator><name pos:line="1425" pos:column="20">IsNotNull</name></name><argument_list pos:line="1425" pos:column="29">(<argument><expr><name pos:line="1425" pos:column="30">classB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1426" pos:column="13">Assert</name><op:operator pos:line="1426" pos:column="19">.</op:operator><name pos:line="1426" pos:column="20">AreEqual</name></name><argument_list pos:line="1426" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1426" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="1426" pos:column="32">classB</name><op:operator pos:line="1426" pos:column="38">.</op:operator><name pos:line="1426" pos:column="39">ChildStatements</name><op:operator pos:line="1426" pos:column="54">.</op:operator><name pos:line="1426" pos:column="55">Count</name></name><argument_list pos:line="1426" pos:column="60">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1428" pos:column="13">var</name></type> <name pos:line="1428" pos:column="17">fooProperty</name> <init pos:line="1428" pos:column="29">= <expr><call><name><name pos:line="1428" pos:column="31">classB</name><op:operator pos:line="1428" pos:column="37">.</op:operator><name pos:line="1428" pos:column="38">ChildStatements</name><op:operator pos:line="1428" pos:column="53">.</op:operator><name pos:line="1428" pos:column="54">First</name></name><argument_list pos:line="1428" pos:column="59">()</argument_list></call> <op:operator pos:line="1428" pos:column="62">as</op:operator> <name pos:line="1428" pos:column="65">PropertyDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1429" pos:column="13">Assert</name><op:operator pos:line="1429" pos:column="19">.</op:operator><name pos:line="1429" pos:column="20">IsNotNull</name></name><argument_list pos:line="1429" pos:column="29">(<argument><expr><name pos:line="1429" pos:column="30">fooProperty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1430" pos:column="13">Assert</name><op:operator pos:line="1430" pos:column="19">.</op:operator><name pos:line="1430" pos:column="20">AreEqual</name></name><argument_list pos:line="1430" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1430" pos:column="29">"Foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1430" pos:column="36">fooProperty</name><op:operator pos:line="1430" pos:column="47">.</op:operator><name pos:line="1430" pos:column="48">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1431" pos:column="13">Assert</name><op:operator pos:line="1431" pos:column="19">.</op:operator><name pos:line="1431" pos:column="20">AreEqual</name></name><argument_list pos:line="1431" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1431" pos:column="29">"int"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1431" pos:column="36">fooProperty</name><op:operator pos:line="1431" pos:column="47">.</op:operator><name pos:line="1431" pos:column="48">ReturnType</name><op:operator pos:line="1431" pos:column="58">.</op:operator><name pos:line="1431" pos:column="59">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1432" pos:column="13">Assert</name><op:operator pos:line="1432" pos:column="19">.</op:operator><name pos:line="1432" pos:column="20">AreEqual</name></name><argument_list pos:line="1432" pos:column="28">(<argument><expr><name><name pos:line="1432" pos:column="29">AccessModifier</name><op:operator pos:line="1432" pos:column="43">.</op:operator><name pos:line="1432" pos:column="44">None</name></name></expr></argument>, <argument><expr><name><name pos:line="1432" pos:column="50">fooProperty</name><op:operator pos:line="1432" pos:column="61">.</op:operator><name pos:line="1432" pos:column="62">Accessibility</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1433" pos:column="13">Assert</name><op:operator pos:line="1433" pos:column="19">.</op:operator><name pos:line="1433" pos:column="20">IsNotNull</name></name><argument_list pos:line="1433" pos:column="29">(<argument><expr><name><name pos:line="1433" pos:column="30">fooProperty</name><op:operator pos:line="1433" pos:column="41">.</op:operator><name pos:line="1433" pos:column="42">Getter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1434" pos:column="13">Assert</name><op:operator pos:line="1434" pos:column="19">.</op:operator><name pos:line="1434" pos:column="20">IsNotNull</name></name><argument_list pos:line="1434" pos:column="29">(<argument><expr><name><name pos:line="1434" pos:column="30">fooProperty</name><op:operator pos:line="1434" pos:column="41">.</op:operator><name pos:line="1434" pos:column="42">Setter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1437" pos:column="9">[<expr><name pos:line="1437" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1438" pos:column="9">public</specifier> <name pos:line="1438" pos:column="16">void</name></type> <name pos:line="1438" pos:column="21">TestPropertyAsCallingObject</name><parameter_list pos:line="1438" pos:column="48">()</parameter_list> <block pos:line="1438" pos:column="51">{
            <comment type="line" pos:line="1439" pos:column="13">// B.cs</comment>
            <comment type="line" pos:line="1440" pos:column="13">//namespace A {</comment>
            <comment type="line" pos:line="1441" pos:column="13">//  class B {</comment>
            <comment type="line" pos:line="1442" pos:column="13">//    C Foo { get; set; }</comment>
            <comment type="line" pos:line="1443" pos:column="13">//  }</comment>
            <comment type="line" pos:line="1444" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="1445" pos:column="13">string</name></type> <name pos:line="1445" pos:column="20">bXml</name> <init pos:line="1445" pos:column="25">= <expr><lit:literal type="string" pos:line="1445" pos:column="27">@"&lt;namespace pos:line=""1"" pos:column="&gt;namespace &lt;name pos:line=""1"" pos:column=""&gt;A&lt;/name&gt; &lt;block pos:line=""1"" pos:column=""&gt;{
  &lt;class pos:line=""2"" pos:column="&gt;class &lt;name pos:line=""2"" pos:column="&gt;B&lt;/name&gt; &lt;block pos:line=""2"" pos:column=""&gt;{
    &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""3"" pos:column="&gt;C&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""3"" pos:column="&gt;Foo&lt;/name&gt; &lt;block pos:line=""3"" pos:column=""&gt;{ &lt;function_decl&gt;&lt;name pos:line=""3"" pos:column=""&gt;get&lt;/name&gt;;&lt;/function_decl&gt; &lt;function_decl&gt;&lt;name pos:line=""3"" pos:column=""&gt;set&lt;/name&gt;;&lt;/function_decl&gt; }&lt;/block&gt;&lt;/decl&gt;&lt;/decl_stmt&gt;
  }&lt;/block&gt;&lt;/class&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="1450" pos:column="13">// C.cs</comment>
            <comment type="line" pos:line="1451" pos:column="13">//namespace A {</comment>
            <comment type="line" pos:line="1452" pos:column="13">//	class C {</comment>
            <comment type="line" pos:line="1453" pos:column="13">//		static void main() {</comment>
            <comment type="line" pos:line="1454" pos:column="13">//			B b = new B();</comment>
            <comment type="line" pos:line="1455" pos:column="13">//			b.Foo.Bar();</comment>
            <comment type="line" pos:line="1456" pos:column="13">//		}</comment>
            <comment type="line" pos:line="1457" pos:column="13">//		void Bar() { }</comment>
            <comment type="line" pos:line="1458" pos:column="13">//	}</comment>
            <comment type="line" pos:line="1459" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="1460" pos:column="13">string</name></type> <name pos:line="1460" pos:column="20">cXml</name> <init pos:line="1460" pos:column="25">= <expr><lit:literal type="string" pos:line="1460" pos:column="27">@"&lt;namespace pos:line=""1"" pos:column="&gt;namespace &lt;name pos:line=""1"" pos:column=""&gt;A&lt;/name&gt; &lt;block pos:line=""1"" pos:column=""&gt;{
    &lt;class pos:line=""2"" pos:column="&gt;class &lt;name pos:line=""2"" pos:column=""&gt;C&lt;/name&gt; &lt;block pos:line=""2"" pos:column=""&gt;{
        &lt;function&gt;&lt;type&gt;&lt;specifier pos:line=""3"" pos:column="&gt;static&lt;/specifier&gt; &lt;name pos:line=""3"" pos:column=""&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""3"" pos:column=""&gt;main&lt;/name&gt;&lt;parameter_list pos:line=""3"" pos:column=""&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""3"" pos:column=""&gt;{
            &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""4"" pos:column=""&gt;B&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""4"" pos:column=""&gt;b&lt;/name&gt; &lt;init pos:line=""4"" pos:column=""&gt;= &lt;expr&gt;&lt;op:operator pos:line=""4"" pos:column=""&gt;new&lt;/op:operator&gt; &lt;call&gt;&lt;name pos:line=""4"" pos:column=""&gt;B&lt;/name&gt;&lt;argument_list pos:line=""4"" pos:column=""&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;&lt;/init&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
            &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;&lt;name pos:line=""5"" pos:column=""&gt;b&lt;/name&gt;&lt;op:operator pos:line=""5"" pos:column=""&gt;.&lt;/op:operator&gt;&lt;name pos:line=""5"" pos:column=""&gt;Foo&lt;/name&gt;&lt;op:operator pos:line=""5"" pos:column=""&gt;.&lt;/op:operator&gt;&lt;name pos:line=""5"" pos:column=""&gt;Bar&lt;/name&gt;&lt;/name&gt;&lt;argument_list pos:line=""5"" pos:column=""&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
        }&lt;/block&gt;&lt;/function&gt;
        &lt;function&gt;&lt;type&gt;&lt;name pos:line=""7"" pos:column="&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""7"" pos:column=""&gt;Bar&lt;/name&gt;&lt;parameter_list pos:line=""7"" pos:column=""&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""7"" pos:column=""&gt;{ }&lt;/block&gt;&lt;/function&gt;
    }&lt;/block&gt;&lt;/class&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1470" pos:column="13">var</name></type> <name pos:line="1470" pos:column="17">bUnit</name> <init pos:line="1470" pos:column="23">= <expr><call><name><name pos:line="1470" pos:column="25">fileSetup</name><op:operator pos:line="1470" pos:column="34">.</op:operator><name pos:line="1470" pos:column="35">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1470" pos:column="59">(<argument><expr><name pos:line="1470" pos:column="60">bXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1470" pos:column="66">"B.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1471" pos:column="13">var</name></type> <name pos:line="1471" pos:column="17">cUnit</name> <init pos:line="1471" pos:column="23">= <expr><call><name><name pos:line="1471" pos:column="25">fileSetup</name><op:operator pos:line="1471" pos:column="34">.</op:operator><name pos:line="1471" pos:column="35">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1471" pos:column="59">(<argument><expr><name pos:line="1471" pos:column="60">cXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1471" pos:column="66">"C.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1472" pos:column="13">var</name></type> <name pos:line="1472" pos:column="17">bScope</name> <init pos:line="1472" pos:column="24">= <expr><call><name><name pos:line="1472" pos:column="26">codeParser</name><op:operator pos:line="1472" pos:column="36">.</op:operator><name pos:line="1472" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="1472" pos:column="50">(<argument><expr><name pos:line="1472" pos:column="51">bUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1473" pos:column="13">var</name></type> <name pos:line="1473" pos:column="17">cScope</name> <init pos:line="1473" pos:column="24">= <expr><call><name><name pos:line="1473" pos:column="26">codeParser</name><op:operator pos:line="1473" pos:column="36">.</op:operator><name pos:line="1473" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="1473" pos:column="50">(<argument><expr><name pos:line="1473" pos:column="51">cUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1475" pos:column="13">var</name></type> <name pos:line="1475" pos:column="17">globalScope</name> <init pos:line="1475" pos:column="29">= <expr><call><name><name pos:line="1475" pos:column="31">bScope</name><op:operator pos:line="1475" pos:column="37">.</op:operator><name pos:line="1475" pos:column="38">Merge</name></name><argument_list pos:line="1475" pos:column="43">(<argument><expr><name pos:line="1475" pos:column="44">cScope</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1477" pos:column="13">var</name></type> <name pos:line="1477" pos:column="17">classB</name> <init pos:line="1477" pos:column="24">= <expr><call><name><name pos:line="1477" pos:column="26">globalScope</name><op:operator pos:line="1477" pos:column="37">.</op:operator><name><name pos:line="1477" pos:column="38">GetDescendants</name><argument_list pos:line="1477" pos:column="52">&lt;<argument><name pos:line="1477" pos:column="53">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1477" pos:column="68">()</argument_list></call><op:operator pos:line="1477" pos:column="70">.</op:operator><call><name pos:line="1477" pos:column="71">FirstOrDefault</name><argument_list pos:line="1477" pos:column="85">(<argument><expr><lambda><name pos:line="1477" pos:column="86">t</name> <op:operator pos:line="1477" pos:column="88">=&gt;</op:operator> <name><name pos:line="1477" pos:column="91">t</name><op:operator pos:line="1477" pos:column="92">.</op:operator><name pos:line="1477" pos:column="93">Name</name></name> <op:operator pos:line="1477" pos:column="98">==</op:operator> <lit:literal type="string" pos:line="1477" pos:column="101">"B"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1478" pos:column="13">Assert</name><op:operator pos:line="1478" pos:column="19">.</op:operator><name pos:line="1478" pos:column="20">IsNotNull</name></name><argument_list pos:line="1478" pos:column="29">(<argument><expr><name pos:line="1478" pos:column="30">classB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="1479" pos:column="13">var</name></type> <name pos:line="1479" pos:column="17">classC</name> <init pos:line="1479" pos:column="24">= <expr><call><name><name pos:line="1479" pos:column="26">globalScope</name><op:operator pos:line="1479" pos:column="37">.</op:operator><name><name pos:line="1479" pos:column="38">GetDescendants</name><argument_list pos:line="1479" pos:column="52">&lt;<argument><name pos:line="1479" pos:column="53">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1479" pos:column="68">()</argument_list></call><op:operator pos:line="1479" pos:column="70">.</op:operator><call><name pos:line="1479" pos:column="71">FirstOrDefault</name><argument_list pos:line="1479" pos:column="85">(<argument><expr><lambda><name pos:line="1479" pos:column="86">t</name> <op:operator pos:line="1479" pos:column="88">=&gt;</op:operator> <name><name pos:line="1479" pos:column="91">t</name><op:operator pos:line="1479" pos:column="92">.</op:operator><name pos:line="1479" pos:column="93">Name</name></name> <op:operator pos:line="1479" pos:column="98">==</op:operator> <lit:literal type="string" pos:line="1479" pos:column="101">"C"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1480" pos:column="13">Assert</name><op:operator pos:line="1480" pos:column="19">.</op:operator><name pos:line="1480" pos:column="20">IsNotNull</name></name><argument_list pos:line="1480" pos:column="29">(<argument><expr><name pos:line="1480" pos:column="30">classC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1482" pos:column="13">var</name></type> <name pos:line="1482" pos:column="17">mainMethod</name> <init pos:line="1482" pos:column="28">= <expr><call><name><name pos:line="1482" pos:column="30">classC</name><op:operator pos:line="1482" pos:column="36">.</op:operator><name><name pos:line="1482" pos:column="37">GetNamedChildren</name><argument_list pos:line="1482" pos:column="53">&lt;<argument><name pos:line="1482" pos:column="54">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1482" pos:column="71">(<argument><expr><lit:literal type="string" pos:line="1482" pos:column="72">"main"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1482" pos:column="79">.</op:operator><call><name pos:line="1482" pos:column="80">FirstOrDefault</name><argument_list pos:line="1482" pos:column="94">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1483" pos:column="13">var</name></type> <name pos:line="1483" pos:column="17">barMethod</name> <init pos:line="1483" pos:column="27">= <expr><call><name><name pos:line="1483" pos:column="29">classC</name><op:operator pos:line="1483" pos:column="35">.</op:operator><name><name pos:line="1483" pos:column="36">GetNamedChildren</name><argument_list pos:line="1483" pos:column="52">&lt;<argument><name pos:line="1483" pos:column="53">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1483" pos:column="70">(<argument><expr><lit:literal type="string" pos:line="1483" pos:column="71">"Bar"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1483" pos:column="77">.</op:operator><call><name pos:line="1483" pos:column="78">FirstOrDefault</name><argument_list pos:line="1483" pos:column="92">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1484" pos:column="13">Assert</name><op:operator pos:line="1484" pos:column="19">.</op:operator><name pos:line="1484" pos:column="20">IsNotNull</name></name><argument_list pos:line="1484" pos:column="29">(<argument><expr><name pos:line="1484" pos:column="30">mainMethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1485" pos:column="13">Assert</name><op:operator pos:line="1485" pos:column="19">.</op:operator><name pos:line="1485" pos:column="20">IsNotNull</name></name><argument_list pos:line="1485" pos:column="29">(<argument><expr><name pos:line="1485" pos:column="30">barMethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="1487" pos:column="13">Assert</name><op:operator pos:line="1487" pos:column="19">.</op:operator><name pos:line="1487" pos:column="20">AreEqual</name></name><argument_list pos:line="1487" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1487" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1487" pos:column="32">mainMethod</name><op:operator pos:line="1487" pos:column="42">.</op:operator><name pos:line="1487" pos:column="43">ChildStatements</name><op:operator pos:line="1487" pos:column="58">.</op:operator><name pos:line="1487" pos:column="59">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="1488" pos:column="13">var</name></type> <name pos:line="1488" pos:column="17">callToBar</name> <init pos:line="1488" pos:column="27">= <expr><name><name pos:line="1488" pos:column="29">mainMethod</name><op:operator pos:line="1488" pos:column="39">.</op:operator><name pos:line="1488" pos:column="40">ChildStatements</name><index pos:line="1488" pos:column="55">[<expr><lit:literal type="number" pos:line="1488" pos:column="56">1</lit:literal></expr>]</index></name><op:operator pos:line="1488" pos:column="58">.</op:operator><call><name><name pos:line="1488" pos:column="59">Content</name><op:operator pos:line="1488" pos:column="66">.</op:operator><name><name pos:line="1488" pos:column="67">GetDescendantsAndSelf</name><argument_list pos:line="1488" pos:column="88">&lt;<argument><name pos:line="1488" pos:column="89">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1488" pos:column="100">()</argument_list></call><op:operator pos:line="1488" pos:column="102">.</op:operator><call><name pos:line="1488" pos:column="103">FirstOrDefault</name><argument_list pos:line="1488" pos:column="117">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1489" pos:column="13">Assert</name><op:operator pos:line="1489" pos:column="19">.</op:operator><name pos:line="1489" pos:column="20">IsNotNull</name></name><argument_list pos:line="1489" pos:column="29">(<argument><expr><name pos:line="1489" pos:column="30">callToBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1490" pos:column="13">Assert</name><op:operator pos:line="1490" pos:column="19">.</op:operator><name pos:line="1490" pos:column="20">AreSame</name></name><argument_list pos:line="1490" pos:column="27">(<argument><expr><name pos:line="1490" pos:column="28">barMethod</name></expr></argument>, <argument><expr><call><name><name pos:line="1490" pos:column="39">callToBar</name><op:operator pos:line="1490" pos:column="48">.</op:operator><name pos:line="1490" pos:column="49">FindMatches</name></name><argument_list pos:line="1490" pos:column="60">()</argument_list></call><op:operator pos:line="1490" pos:column="62">.</op:operator><call><name pos:line="1490" pos:column="63">FirstOrDefault</name><argument_list pos:line="1490" pos:column="77">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1493" pos:column="9">[<expr><name pos:line="1493" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1494" pos:column="9">public</specifier> <name pos:line="1494" pos:column="16">void</name></type> <name pos:line="1494" pos:column="21">TestStaticMethodCall</name><parameter_list pos:line="1494" pos:column="41">()</parameter_list> <block pos:line="1494" pos:column="44">{
            <comment type="line" pos:line="1495" pos:column="13">//namespace A { public class B { public static void Bar() { } } }</comment>
            <decl_stmt><decl><type><name pos:line="1496" pos:column="13">var</name></type> <name pos:line="1496" pos:column="17">bXml</name> <init pos:line="1496" pos:column="22">= <expr><lit:literal type="string" pos:line="1496" pos:column="24">@"&lt;namespace&gt;namespace &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{ &lt;class&gt;&lt;specifier&gt;public&lt;/specifier&gt; class &lt;name&gt;B&lt;/name&gt; &lt;block&gt;{ &lt;function&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;specifier&gt;static&lt;/specifier&gt; &lt;name&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Bar&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ }&lt;/block&gt;&lt;/function&gt; }&lt;/block&gt;&lt;/class&gt; }&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="1497" pos:column="13">//namespace A { public class C { public void Foo() { B.Bar(); } } }</comment>
            <decl_stmt><decl><type><name pos:line="1498" pos:column="13">var</name></type> <name pos:line="1498" pos:column="17">cXml</name> <init pos:line="1498" pos:column="22">= <expr><lit:literal type="string" pos:line="1498" pos:column="24">@"&lt;namespace&gt;namespace &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{ &lt;class&gt;&lt;specifier&gt;public&lt;/specifier&gt; class &lt;name&gt;C&lt;/name&gt; &lt;block&gt;{ &lt;function&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;&lt;name&gt;B&lt;/name&gt;&lt;op:operator&gt;.&lt;/op:operator&gt;&lt;name&gt;Bar&lt;/name&gt;&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt; }&lt;/block&gt;&lt;/function&gt; }&lt;/block&gt;&lt;/class&gt; }&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1500" pos:column="13">var</name></type> <name pos:line="1500" pos:column="17">bUnit</name> <init pos:line="1500" pos:column="23">= <expr><call><name><name pos:line="1500" pos:column="25">fileSetup</name><op:operator pos:line="1500" pos:column="34">.</op:operator><name pos:line="1500" pos:column="35">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1500" pos:column="59">(<argument><expr><name pos:line="1500" pos:column="60">bXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1500" pos:column="66">"B.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1501" pos:column="13">var</name></type> <name pos:line="1501" pos:column="17">cUnit</name> <init pos:line="1501" pos:column="23">= <expr><call><name><name pos:line="1501" pos:column="25">fileSetup</name><op:operator pos:line="1501" pos:column="34">.</op:operator><name pos:line="1501" pos:column="35">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1501" pos:column="59">(<argument><expr><name pos:line="1501" pos:column="60">cXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1501" pos:column="66">"C.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1503" pos:column="13">var</name></type> <name pos:line="1503" pos:column="17">bScope</name> <init pos:line="1503" pos:column="24">= <expr><call><name><name pos:line="1503" pos:column="26">codeParser</name><op:operator pos:line="1503" pos:column="36">.</op:operator><name pos:line="1503" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="1503" pos:column="50">(<argument><expr><name pos:line="1503" pos:column="51">bUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1504" pos:column="13">var</name></type> <name pos:line="1504" pos:column="17">cScope</name> <init pos:line="1504" pos:column="24">= <expr><call><name><name pos:line="1504" pos:column="26">codeParser</name><op:operator pos:line="1504" pos:column="36">.</op:operator><name pos:line="1504" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="1504" pos:column="50">(<argument><expr><name pos:line="1504" pos:column="51">cUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1506" pos:column="13">var</name></type> <name pos:line="1506" pos:column="17">globalScope</name> <init pos:line="1506" pos:column="29">= <expr><call><name><name pos:line="1506" pos:column="31">bScope</name><op:operator pos:line="1506" pos:column="37">.</op:operator><name pos:line="1506" pos:column="38">Merge</name></name><argument_list pos:line="1506" pos:column="43">(<argument><expr><name pos:line="1506" pos:column="44">cScope</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1508" pos:column="13">var</name></type> <name pos:line="1508" pos:column="17">fooMethod</name> <init pos:line="1508" pos:column="27">= <expr><call><name><name pos:line="1508" pos:column="29">globalScope</name><op:operator pos:line="1508" pos:column="40">.</op:operator><name><name pos:line="1508" pos:column="41">GetDescendants</name><argument_list pos:line="1508" pos:column="55">&lt;<argument><name pos:line="1508" pos:column="56">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1508" pos:column="73">()</argument_list></call><op:operator pos:line="1508" pos:column="75">.</op:operator><call><name pos:line="1508" pos:column="76">FirstOrDefault</name><argument_list pos:line="1508" pos:column="90">(<argument><expr><lambda><name pos:line="1508" pos:column="91">m</name> <op:operator pos:line="1508" pos:column="93">=&gt;</op:operator> <name><name pos:line="1508" pos:column="96">m</name><op:operator pos:line="1508" pos:column="97">.</op:operator><name pos:line="1508" pos:column="98">Name</name></name> <op:operator pos:line="1508" pos:column="103">==</op:operator> <lit:literal type="string" pos:line="1508" pos:column="106">"Foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1509" pos:column="13">var</name></type> <name pos:line="1509" pos:column="17">barMethod</name> <init pos:line="1509" pos:column="27">= <expr><call><name><name pos:line="1509" pos:column="29">globalScope</name><op:operator pos:line="1509" pos:column="40">.</op:operator><name><name pos:line="1509" pos:column="41">GetDescendants</name><argument_list pos:line="1509" pos:column="55">&lt;<argument><name pos:line="1509" pos:column="56">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1509" pos:column="73">()</argument_list></call><op:operator pos:line="1509" pos:column="75">.</op:operator><call><name pos:line="1509" pos:column="76">FirstOrDefault</name><argument_list pos:line="1509" pos:column="90">(<argument><expr><lambda><name pos:line="1509" pos:column="91">m</name> <op:operator pos:line="1509" pos:column="93">=&gt;</op:operator> <name><name pos:line="1509" pos:column="96">m</name><op:operator pos:line="1509" pos:column="97">.</op:operator><name pos:line="1509" pos:column="98">Name</name></name> <op:operator pos:line="1509" pos:column="103">==</op:operator> <lit:literal type="string" pos:line="1509" pos:column="106">"Bar"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1510" pos:column="13">Assert</name><op:operator pos:line="1510" pos:column="19">.</op:operator><name pos:line="1510" pos:column="20">IsNotNull</name></name><argument_list pos:line="1510" pos:column="29">(<argument><expr><name pos:line="1510" pos:column="30">fooMethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1511" pos:column="13">Assert</name><op:operator pos:line="1511" pos:column="19">.</op:operator><name pos:line="1511" pos:column="20">IsNotNull</name></name><argument_list pos:line="1511" pos:column="29">(<argument><expr><name pos:line="1511" pos:column="30">barMethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="1513" pos:column="13">Assert</name><op:operator pos:line="1513" pos:column="19">.</op:operator><name pos:line="1513" pos:column="20">AreEqual</name></name><argument_list pos:line="1513" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1513" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1513" pos:column="32">fooMethod</name><op:operator pos:line="1513" pos:column="41">.</op:operator><name pos:line="1513" pos:column="42">ChildStatements</name><op:operator pos:line="1513" pos:column="57">.</op:operator><name pos:line="1513" pos:column="58">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="1514" pos:column="13">var</name></type> <name pos:line="1514" pos:column="17">callToBar</name> <init pos:line="1514" pos:column="27">= <expr><name><name pos:line="1514" pos:column="29">fooMethod</name><op:operator pos:line="1514" pos:column="38">.</op:operator><name pos:line="1514" pos:column="39">ChildStatements</name><index pos:line="1514" pos:column="54">[<expr><lit:literal type="number" pos:line="1514" pos:column="55">0</lit:literal></expr>]</index></name><op:operator pos:line="1514" pos:column="57">.</op:operator><call><name><name pos:line="1514" pos:column="58">Content</name><op:operator pos:line="1514" pos:column="65">.</op:operator><name><name pos:line="1514" pos:column="66">GetDescendantsAndSelf</name><argument_list pos:line="1514" pos:column="87">&lt;<argument><name pos:line="1514" pos:column="88">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1514" pos:column="99">()</argument_list></call><op:operator pos:line="1514" pos:column="101">.</op:operator><call><name pos:line="1514" pos:column="102">FirstOrDefault</name><argument_list pos:line="1514" pos:column="116">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1515" pos:column="13">Assert</name><op:operator pos:line="1515" pos:column="19">.</op:operator><name pos:line="1515" pos:column="20">IsNotNull</name></name><argument_list pos:line="1515" pos:column="29">(<argument><expr><name pos:line="1515" pos:column="30">callToBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1516" pos:column="13">Assert</name><op:operator pos:line="1516" pos:column="19">.</op:operator><name pos:line="1516" pos:column="20">AreSame</name></name><argument_list pos:line="1516" pos:column="27">(<argument><expr><name pos:line="1516" pos:column="28">barMethod</name></expr></argument>, <argument><expr><call><name><name pos:line="1516" pos:column="39">callToBar</name><op:operator pos:line="1516" pos:column="48">.</op:operator><name pos:line="1516" pos:column="49">FindMatches</name></name><argument_list pos:line="1516" pos:column="60">()</argument_list></call><op:operator pos:line="1516" pos:column="62">.</op:operator><call><name pos:line="1516" pos:column="63">FirstOrDefault</name><argument_list pos:line="1516" pos:column="77">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1519" pos:column="9">[<expr><name pos:line="1519" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1520" pos:column="9">public</specifier> <name pos:line="1520" pos:column="16">void</name></type> <name pos:line="1520" pos:column="21">TestStaticMethodCallInDifferentNamespace</name><parameter_list pos:line="1520" pos:column="61">()</parameter_list> <block pos:line="1520" pos:column="64">{
            <comment type="line" pos:line="1521" pos:column="13">//namespace A { public class B { public static void Bar() { } } }</comment>
            <decl_stmt><decl><type><name pos:line="1522" pos:column="13">var</name></type> <name pos:line="1522" pos:column="17">bXml</name> <init pos:line="1522" pos:column="22">= <expr><lit:literal type="string" pos:line="1522" pos:column="24">@"&lt;namespace&gt;namespace &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{ &lt;class&gt;&lt;specifier&gt;public&lt;/specifier&gt; class &lt;name&gt;B&lt;/name&gt; &lt;block&gt;{ &lt;function&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;specifier&gt;static&lt;/specifier&gt; &lt;name&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Bar&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ }&lt;/block&gt;&lt;/function&gt; }&lt;/block&gt;&lt;/class&gt; }&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="1523" pos:column="13">//namespace C { public class D { public void Foo() { A.B.Bar(); } } }</comment>
            <decl_stmt><decl><type><name pos:line="1524" pos:column="13">var</name></type> <name pos:line="1524" pos:column="17">dXml</name> <init pos:line="1524" pos:column="22">= <expr><lit:literal type="string" pos:line="1524" pos:column="24">@"&lt;namespace&gt;namespace &lt;name&gt;C&lt;/name&gt; &lt;block&gt;{ &lt;class&gt;&lt;specifier&gt;public&lt;/specifier&gt; class &lt;name&gt;D&lt;/name&gt; &lt;block&gt;{ &lt;function&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;&lt;name&gt;A&lt;/name&gt;&lt;op:operator&gt;.&lt;/op:operator&gt;&lt;name&gt;B&lt;/name&gt;&lt;op:operator&gt;.&lt;/op:operator&gt;&lt;name&gt;Bar&lt;/name&gt;&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt; }&lt;/block&gt;&lt;/function&gt; }&lt;/block&gt;&lt;/class&gt; }&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1526" pos:column="13">var</name></type> <name pos:line="1526" pos:column="17">bUnit</name> <init pos:line="1526" pos:column="23">= <expr><call><name><name pos:line="1526" pos:column="25">fileSetup</name><op:operator pos:line="1526" pos:column="34">.</op:operator><name pos:line="1526" pos:column="35">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1526" pos:column="59">(<argument><expr><name pos:line="1526" pos:column="60">bXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1526" pos:column="66">"B.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1527" pos:column="13">var</name></type> <name pos:line="1527" pos:column="17">dUnit</name> <init pos:line="1527" pos:column="23">= <expr><call><name><name pos:line="1527" pos:column="25">fileSetup</name><op:operator pos:line="1527" pos:column="34">.</op:operator><name pos:line="1527" pos:column="35">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1527" pos:column="59">(<argument><expr><name pos:line="1527" pos:column="60">dXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1527" pos:column="66">"C.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1529" pos:column="13">var</name></type> <name pos:line="1529" pos:column="17">bScope</name> <init pos:line="1529" pos:column="24">= <expr><call><name><name pos:line="1529" pos:column="26">codeParser</name><op:operator pos:line="1529" pos:column="36">.</op:operator><name pos:line="1529" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="1529" pos:column="50">(<argument><expr><name pos:line="1529" pos:column="51">bUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1530" pos:column="13">var</name></type> <name pos:line="1530" pos:column="17">dScope</name> <init pos:line="1530" pos:column="24">= <expr><call><name><name pos:line="1530" pos:column="26">codeParser</name><op:operator pos:line="1530" pos:column="36">.</op:operator><name pos:line="1530" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="1530" pos:column="50">(<argument><expr><name pos:line="1530" pos:column="51">dUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1532" pos:column="13">var</name></type> <name pos:line="1532" pos:column="17">globalScope</name> <init pos:line="1532" pos:column="29">= <expr><call><name><name pos:line="1532" pos:column="31">bScope</name><op:operator pos:line="1532" pos:column="37">.</op:operator><name pos:line="1532" pos:column="38">Merge</name></name><argument_list pos:line="1532" pos:column="43">(<argument><expr><name pos:line="1532" pos:column="44">dScope</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1534" pos:column="13">var</name></type> <name pos:line="1534" pos:column="17">fooMethod</name> <init pos:line="1534" pos:column="27">= <expr><call><name><name pos:line="1534" pos:column="29">globalScope</name><op:operator pos:line="1534" pos:column="40">.</op:operator><name><name pos:line="1534" pos:column="41">GetDescendants</name><argument_list pos:line="1534" pos:column="55">&lt;<argument><name pos:line="1534" pos:column="56">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1534" pos:column="73">()</argument_list></call><op:operator pos:line="1534" pos:column="75">.</op:operator><call><name pos:line="1534" pos:column="76">FirstOrDefault</name><argument_list pos:line="1534" pos:column="90">(<argument><expr><lambda><name pos:line="1534" pos:column="91">m</name> <op:operator pos:line="1534" pos:column="93">=&gt;</op:operator> <name><name pos:line="1534" pos:column="96">m</name><op:operator pos:line="1534" pos:column="97">.</op:operator><name pos:line="1534" pos:column="98">Name</name></name> <op:operator pos:line="1534" pos:column="103">==</op:operator> <lit:literal type="string" pos:line="1534" pos:column="106">"Foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1535" pos:column="13">var</name></type> <name pos:line="1535" pos:column="17">barMethod</name> <init pos:line="1535" pos:column="27">= <expr><call><name><name pos:line="1535" pos:column="29">globalScope</name><op:operator pos:line="1535" pos:column="40">.</op:operator><name><name pos:line="1535" pos:column="41">GetDescendants</name><argument_list pos:line="1535" pos:column="55">&lt;<argument><name pos:line="1535" pos:column="56">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1535" pos:column="73">()</argument_list></call><op:operator pos:line="1535" pos:column="75">.</op:operator><call><name pos:line="1535" pos:column="76">FirstOrDefault</name><argument_list pos:line="1535" pos:column="90">(<argument><expr><lambda><name pos:line="1535" pos:column="91">m</name> <op:operator pos:line="1535" pos:column="93">=&gt;</op:operator> <name><name pos:line="1535" pos:column="96">m</name><op:operator pos:line="1535" pos:column="97">.</op:operator><name pos:line="1535" pos:column="98">Name</name></name> <op:operator pos:line="1535" pos:column="103">==</op:operator> <lit:literal type="string" pos:line="1535" pos:column="106">"Bar"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1536" pos:column="13">Assert</name><op:operator pos:line="1536" pos:column="19">.</op:operator><name pos:line="1536" pos:column="20">IsNotNull</name></name><argument_list pos:line="1536" pos:column="29">(<argument><expr><name pos:line="1536" pos:column="30">fooMethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1537" pos:column="13">Assert</name><op:operator pos:line="1537" pos:column="19">.</op:operator><name pos:line="1537" pos:column="20">IsNotNull</name></name><argument_list pos:line="1537" pos:column="29">(<argument><expr><name pos:line="1537" pos:column="30">barMethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="1539" pos:column="13">Assert</name><op:operator pos:line="1539" pos:column="19">.</op:operator><name pos:line="1539" pos:column="20">AreEqual</name></name><argument_list pos:line="1539" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1539" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1539" pos:column="32">fooMethod</name><op:operator pos:line="1539" pos:column="41">.</op:operator><name pos:line="1539" pos:column="42">ChildStatements</name><op:operator pos:line="1539" pos:column="57">.</op:operator><name pos:line="1539" pos:column="58">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="1540" pos:column="13">var</name></type> <name pos:line="1540" pos:column="17">callToBar</name> <init pos:line="1540" pos:column="27">= <expr><name><name pos:line="1540" pos:column="29">fooMethod</name><op:operator pos:line="1540" pos:column="38">.</op:operator><name pos:line="1540" pos:column="39">ChildStatements</name><index pos:line="1540" pos:column="54">[<expr><lit:literal type="number" pos:line="1540" pos:column="55">0</lit:literal></expr>]</index></name><op:operator pos:line="1540" pos:column="57">.</op:operator><call><name><name pos:line="1540" pos:column="58">Content</name><op:operator pos:line="1540" pos:column="65">.</op:operator><name><name pos:line="1540" pos:column="66">GetDescendantsAndSelf</name><argument_list pos:line="1540" pos:column="87">&lt;<argument><name pos:line="1540" pos:column="88">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1540" pos:column="99">()</argument_list></call><op:operator pos:line="1540" pos:column="101">.</op:operator><call><name pos:line="1540" pos:column="102">FirstOrDefault</name><argument_list pos:line="1540" pos:column="116">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1541" pos:column="13">Assert</name><op:operator pos:line="1541" pos:column="19">.</op:operator><name pos:line="1541" pos:column="20">IsNotNull</name></name><argument_list pos:line="1541" pos:column="29">(<argument><expr><name pos:line="1541" pos:column="30">callToBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1542" pos:column="13">Assert</name><op:operator pos:line="1542" pos:column="19">.</op:operator><name pos:line="1542" pos:column="20">AreSame</name></name><argument_list pos:line="1542" pos:column="27">(<argument><expr><name pos:line="1542" pos:column="28">barMethod</name></expr></argument>, <argument><expr><call><name><name pos:line="1542" pos:column="39">callToBar</name><op:operator pos:line="1542" pos:column="48">.</op:operator><name pos:line="1542" pos:column="49">FindMatches</name></name><argument_list pos:line="1542" pos:column="60">()</argument_list></call><op:operator pos:line="1542" pos:column="62">.</op:operator><call><name pos:line="1542" pos:column="63">FirstOrDefault</name><argument_list pos:line="1542" pos:column="77">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1545" pos:column="9">[<expr><name pos:line="1545" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1546" pos:column="9">public</specifier> <name pos:line="1546" pos:column="16">void</name></type> <name pos:line="1546" pos:column="21">TestVariablesWithSpecifiers</name><parameter_list pos:line="1546" pos:column="48">()</parameter_list> <block pos:line="1546" pos:column="51">{
            <comment type="line" pos:line="1547" pos:column="13">//static int A;</comment>
            <comment type="line" pos:line="1548" pos:column="13">//public const int B;</comment>
            <comment type="line" pos:line="1549" pos:column="13">//public static readonly Foo C;</comment>
            <comment type="line" pos:line="1550" pos:column="13">//volatile  int D;</comment>
            <decl_stmt><decl><type><name pos:line="1551" pos:column="13">string</name></type> <name pos:line="1551" pos:column="20">testXml</name> <init pos:line="1551" pos:column="28">= <expr><lit:literal type="string" pos:line="1551" pos:column="30">@"&lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;specifier&gt;static&lt;/specifier&gt; &lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;A&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
&lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;specifier&gt;const&lt;/specifier&gt; &lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;B&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
&lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;specifier&gt;static&lt;/specifier&gt; &lt;specifier&gt;readonly&lt;/specifier&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;/type&gt; &lt;name&gt;C&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
&lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;specifier&gt;volatile&lt;/specifier&gt;  &lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;D&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1555" pos:column="13">var</name></type> <name pos:line="1555" pos:column="17">testUnit</name> <init pos:line="1555" pos:column="26">= <expr><call><name><name pos:line="1555" pos:column="28">fileSetup</name><op:operator pos:line="1555" pos:column="37">.</op:operator><name pos:line="1555" pos:column="38">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1555" pos:column="62">(<argument><expr><name pos:line="1555" pos:column="63">testXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1555" pos:column="72">"test.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1557" pos:column="13">var</name></type> <name pos:line="1557" pos:column="17">globalScope</name> <init pos:line="1557" pos:column="29">= <expr><call><name><name pos:line="1557" pos:column="31">codeParser</name><op:operator pos:line="1557" pos:column="41">.</op:operator><name pos:line="1557" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="1557" pos:column="55">(<argument><expr><name pos:line="1557" pos:column="56">testUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1558" pos:column="13">Assert</name><op:operator pos:line="1558" pos:column="19">.</op:operator><name pos:line="1558" pos:column="20">AreEqual</name></name><argument_list pos:line="1558" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1558" pos:column="29">4</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1558" pos:column="32">globalScope</name><op:operator pos:line="1558" pos:column="43">.</op:operator><name pos:line="1558" pos:column="44">ChildStatements</name><op:operator pos:line="1558" pos:column="59">.</op:operator><name pos:line="1558" pos:column="60">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1560" pos:column="13">var</name></type> <name pos:line="1560" pos:column="17">declA</name> <init pos:line="1560" pos:column="23">= <expr><name><name pos:line="1560" pos:column="25">globalScope</name><op:operator pos:line="1560" pos:column="36">.</op:operator><name pos:line="1560" pos:column="37">ChildStatements</name><index pos:line="1560" pos:column="52">[<expr><lit:literal type="number" pos:line="1560" pos:column="53">0</lit:literal></expr>]</index></name><op:operator pos:line="1560" pos:column="55">.</op:operator><name pos:line="1560" pos:column="56">Content</name> <op:operator pos:line="1560" pos:column="64">as</op:operator> <name pos:line="1560" pos:column="67">VariableDeclaration</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1561" pos:column="13">Assert</name><op:operator pos:line="1561" pos:column="19">.</op:operator><name pos:line="1561" pos:column="20">IsNotNull</name></name><argument_list pos:line="1561" pos:column="29">(<argument><expr><name pos:line="1561" pos:column="30">declA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1562" pos:column="13">Assert</name><op:operator pos:line="1562" pos:column="19">.</op:operator><name pos:line="1562" pos:column="20">AreEqual</name></name><argument_list pos:line="1562" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1562" pos:column="29">"A"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1562" pos:column="34">declA</name><op:operator pos:line="1562" pos:column="39">.</op:operator><name pos:line="1562" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1563" pos:column="13">Assert</name><op:operator pos:line="1563" pos:column="19">.</op:operator><name pos:line="1563" pos:column="20">AreEqual</name></name><argument_list pos:line="1563" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1563" pos:column="29">"int"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1563" pos:column="36">declA</name><op:operator pos:line="1563" pos:column="41">.</op:operator><name pos:line="1563" pos:column="42">VariableType</name><op:operator pos:line="1563" pos:column="54">.</op:operator><name pos:line="1563" pos:column="55">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1564" pos:column="13">Assert</name><op:operator pos:line="1564" pos:column="19">.</op:operator><name pos:line="1564" pos:column="20">AreEqual</name></name><argument_list pos:line="1564" pos:column="28">(<argument><expr><name><name pos:line="1564" pos:column="29">AccessModifier</name><op:operator pos:line="1564" pos:column="43">.</op:operator><name pos:line="1564" pos:column="44">None</name></name></expr></argument>, <argument><expr><name><name pos:line="1564" pos:column="50">declA</name><op:operator pos:line="1564" pos:column="55">.</op:operator><name pos:line="1564" pos:column="56">Accessibility</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1566" pos:column="13">var</name></type> <name pos:line="1566" pos:column="17">declB</name> <init pos:line="1566" pos:column="23">= <expr><name><name pos:line="1566" pos:column="25">globalScope</name><op:operator pos:line="1566" pos:column="36">.</op:operator><name pos:line="1566" pos:column="37">ChildStatements</name><index pos:line="1566" pos:column="52">[<expr><lit:literal type="number" pos:line="1566" pos:column="53">1</lit:literal></expr>]</index></name><op:operator pos:line="1566" pos:column="55">.</op:operator><name pos:line="1566" pos:column="56">Content</name> <op:operator pos:line="1566" pos:column="64">as</op:operator> <name pos:line="1566" pos:column="67">VariableDeclaration</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1567" pos:column="13">Assert</name><op:operator pos:line="1567" pos:column="19">.</op:operator><name pos:line="1567" pos:column="20">IsNotNull</name></name><argument_list pos:line="1567" pos:column="29">(<argument><expr><name pos:line="1567" pos:column="30">declB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1568" pos:column="13">Assert</name><op:operator pos:line="1568" pos:column="19">.</op:operator><name pos:line="1568" pos:column="20">AreEqual</name></name><argument_list pos:line="1568" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1568" pos:column="29">"B"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1568" pos:column="34">declB</name><op:operator pos:line="1568" pos:column="39">.</op:operator><name pos:line="1568" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1569" pos:column="13">Assert</name><op:operator pos:line="1569" pos:column="19">.</op:operator><name pos:line="1569" pos:column="20">AreEqual</name></name><argument_list pos:line="1569" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1569" pos:column="29">"int"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1569" pos:column="36">declB</name><op:operator pos:line="1569" pos:column="41">.</op:operator><name pos:line="1569" pos:column="42">VariableType</name><op:operator pos:line="1569" pos:column="54">.</op:operator><name pos:line="1569" pos:column="55">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1570" pos:column="13">Assert</name><op:operator pos:line="1570" pos:column="19">.</op:operator><name pos:line="1570" pos:column="20">AreEqual</name></name><argument_list pos:line="1570" pos:column="28">(<argument><expr><name><name pos:line="1570" pos:column="29">AccessModifier</name><op:operator pos:line="1570" pos:column="43">.</op:operator><name pos:line="1570" pos:column="44">Public</name></name></expr></argument>, <argument><expr><name><name pos:line="1570" pos:column="52">declB</name><op:operator pos:line="1570" pos:column="57">.</op:operator><name pos:line="1570" pos:column="58">Accessibility</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1572" pos:column="13">var</name></type> <name pos:line="1572" pos:column="17">declC</name> <init pos:line="1572" pos:column="23">= <expr><name><name pos:line="1572" pos:column="25">globalScope</name><op:operator pos:line="1572" pos:column="36">.</op:operator><name pos:line="1572" pos:column="37">ChildStatements</name><index pos:line="1572" pos:column="52">[<expr><lit:literal type="number" pos:line="1572" pos:column="53">2</lit:literal></expr>]</index></name><op:operator pos:line="1572" pos:column="55">.</op:operator><name pos:line="1572" pos:column="56">Content</name> <op:operator pos:line="1572" pos:column="64">as</op:operator> <name pos:line="1572" pos:column="67">VariableDeclaration</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1573" pos:column="13">Assert</name><op:operator pos:line="1573" pos:column="19">.</op:operator><name pos:line="1573" pos:column="20">IsNotNull</name></name><argument_list pos:line="1573" pos:column="29">(<argument><expr><name pos:line="1573" pos:column="30">declC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1574" pos:column="13">Assert</name><op:operator pos:line="1574" pos:column="19">.</op:operator><name pos:line="1574" pos:column="20">AreEqual</name></name><argument_list pos:line="1574" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1574" pos:column="29">"C"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1574" pos:column="34">declC</name><op:operator pos:line="1574" pos:column="39">.</op:operator><name pos:line="1574" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1575" pos:column="13">Assert</name><op:operator pos:line="1575" pos:column="19">.</op:operator><name pos:line="1575" pos:column="20">AreEqual</name></name><argument_list pos:line="1575" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1575" pos:column="29">"Foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1575" pos:column="36">declC</name><op:operator pos:line="1575" pos:column="41">.</op:operator><name pos:line="1575" pos:column="42">VariableType</name><op:operator pos:line="1575" pos:column="54">.</op:operator><name pos:line="1575" pos:column="55">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1576" pos:column="13">Assert</name><op:operator pos:line="1576" pos:column="19">.</op:operator><name pos:line="1576" pos:column="20">AreEqual</name></name><argument_list pos:line="1576" pos:column="28">(<argument><expr><name><name pos:line="1576" pos:column="29">AccessModifier</name><op:operator pos:line="1576" pos:column="43">.</op:operator><name pos:line="1576" pos:column="44">Public</name></name></expr></argument>, <argument><expr><name><name pos:line="1576" pos:column="52">declC</name><op:operator pos:line="1576" pos:column="57">.</op:operator><name pos:line="1576" pos:column="58">Accessibility</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1578" pos:column="13">var</name></type> <name pos:line="1578" pos:column="17">declD</name> <init pos:line="1578" pos:column="23">= <expr><name><name pos:line="1578" pos:column="25">globalScope</name><op:operator pos:line="1578" pos:column="36">.</op:operator><name pos:line="1578" pos:column="37">ChildStatements</name><index pos:line="1578" pos:column="52">[<expr><lit:literal type="number" pos:line="1578" pos:column="53">3</lit:literal></expr>]</index></name><op:operator pos:line="1578" pos:column="55">.</op:operator><name pos:line="1578" pos:column="56">Content</name> <op:operator pos:line="1578" pos:column="64">as</op:operator> <name pos:line="1578" pos:column="67">VariableDeclaration</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1579" pos:column="13">Assert</name><op:operator pos:line="1579" pos:column="19">.</op:operator><name pos:line="1579" pos:column="20">IsNotNull</name></name><argument_list pos:line="1579" pos:column="29">(<argument><expr><name pos:line="1579" pos:column="30">declD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1580" pos:column="13">Assert</name><op:operator pos:line="1580" pos:column="19">.</op:operator><name pos:line="1580" pos:column="20">AreEqual</name></name><argument_list pos:line="1580" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1580" pos:column="29">"D"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1580" pos:column="34">declD</name><op:operator pos:line="1580" pos:column="39">.</op:operator><name pos:line="1580" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1581" pos:column="13">Assert</name><op:operator pos:line="1581" pos:column="19">.</op:operator><name pos:line="1581" pos:column="20">AreEqual</name></name><argument_list pos:line="1581" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1581" pos:column="29">"int"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1581" pos:column="36">declD</name><op:operator pos:line="1581" pos:column="41">.</op:operator><name pos:line="1581" pos:column="42">VariableType</name><op:operator pos:line="1581" pos:column="54">.</op:operator><name pos:line="1581" pos:column="55">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1582" pos:column="13">Assert</name><op:operator pos:line="1582" pos:column="19">.</op:operator><name pos:line="1582" pos:column="20">AreEqual</name></name><argument_list pos:line="1582" pos:column="28">(<argument><expr><name><name pos:line="1582" pos:column="29">AccessModifier</name><op:operator pos:line="1582" pos:column="43">.</op:operator><name pos:line="1582" pos:column="44">None</name></name></expr></argument>, <argument><expr><name><name pos:line="1582" pos:column="50">declD</name><op:operator pos:line="1582" pos:column="55">.</op:operator><name pos:line="1582" pos:column="56">Accessibility</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1585" pos:column="9">[<expr><name pos:line="1585" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1586" pos:column="9">public</specifier> <name pos:line="1586" pos:column="16">void</name></type> <name pos:line="1586" pos:column="21">TestStaticInstanceVariable</name><parameter_list pos:line="1586" pos:column="47">()</parameter_list> <block pos:line="1586" pos:column="50">{
            <comment type="line" pos:line="1587" pos:column="13">//namespace A {</comment>
            <comment type="line" pos:line="1588" pos:column="13">//	class B {</comment>
            <comment type="line" pos:line="1589" pos:column="13">//		public static B Instance { get; set; }</comment>
            <comment type="line" pos:line="1590" pos:column="13">//		public void Bar() { }</comment>
            <comment type="line" pos:line="1591" pos:column="13">//	}</comment>
            <comment type="line" pos:line="1592" pos:column="13">//	</comment>
            <comment type="line" pos:line="1593" pos:column="13">//	class C { public void Foo() { B.Instance.Bar(); } }</comment>
            <comment type="line" pos:line="1594" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="1595" pos:column="13">var</name></type> <name pos:line="1595" pos:column="17">xml</name> <init pos:line="1595" pos:column="21">= <expr><lit:literal type="string" pos:line="1595" pos:column="23">@"&lt;namespace&gt;namespace &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{
	&lt;class&gt;class &lt;name&gt;B&lt;/name&gt; &lt;block&gt;{
		&lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;specifier&gt;static&lt;/specifier&gt; &lt;name&gt;B&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Instance&lt;/name&gt; &lt;block&gt;{ &lt;function_decl&gt;&lt;name&gt;get&lt;/name&gt;;&lt;/function_decl&gt; &lt;function_decl&gt;&lt;name&gt;set&lt;/name&gt;;&lt;/function_decl&gt; }&lt;/block&gt;&lt;/decl&gt;&lt;/decl_stmt&gt;
		&lt;function&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Bar&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ }&lt;/block&gt;&lt;/function&gt;
	}&lt;/block&gt;&lt;/class&gt;
	
	&lt;class&gt;class &lt;name&gt;C&lt;/name&gt; &lt;block&gt;{ &lt;function&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;&lt;name&gt;B&lt;/name&gt;&lt;op:operator&gt;.&lt;/op:operator&gt;&lt;name&gt;Instance&lt;/name&gt;&lt;op:operator&gt;.&lt;/op:operator&gt;&lt;name&gt;Bar&lt;/name&gt;&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt; }&lt;/block&gt;&lt;/function&gt; }&lt;/block&gt;&lt;/class&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1603" pos:column="13">var</name></type> <name pos:line="1603" pos:column="17">unit</name> <init pos:line="1603" pos:column="22">= <expr><call><name><name pos:line="1603" pos:column="24">fileSetup</name><op:operator pos:line="1603" pos:column="33">.</op:operator><name pos:line="1603" pos:column="34">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1603" pos:column="58">(<argument><expr><name pos:line="1603" pos:column="59">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1603" pos:column="64">"A.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1605" pos:column="13">var</name></type> <name pos:line="1605" pos:column="17">globalScope</name> <init pos:line="1605" pos:column="29">= <expr><call><name><name pos:line="1605" pos:column="31">codeParser</name><op:operator pos:line="1605" pos:column="41">.</op:operator><name pos:line="1605" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="1605" pos:column="55">(<argument><expr><name pos:line="1605" pos:column="56">unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1607" pos:column="13">var</name></type> <name pos:line="1607" pos:column="17">methodBar</name> <init pos:line="1607" pos:column="27">= <expr><call><name><name pos:line="1607" pos:column="29">globalScope</name><op:operator pos:line="1607" pos:column="40">.</op:operator><name><name pos:line="1607" pos:column="41">GetDescendants</name><argument_list pos:line="1607" pos:column="55">&lt;<argument><name pos:line="1607" pos:column="56">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1607" pos:column="73">()</argument_list></call><op:operator pos:line="1607" pos:column="75">.</op:operator><call><name pos:line="1607" pos:column="76">FirstOrDefault</name><argument_list pos:line="1607" pos:column="90">(<argument><expr><lambda><name pos:line="1607" pos:column="91">m</name> <op:operator pos:line="1607" pos:column="93">=&gt;</op:operator> <name><name pos:line="1607" pos:column="96">m</name><op:operator pos:line="1607" pos:column="97">.</op:operator><name pos:line="1607" pos:column="98">Name</name></name> <op:operator pos:line="1607" pos:column="103">==</op:operator> <lit:literal type="string" pos:line="1607" pos:column="106">"Bar"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1608" pos:column="13">Assert</name><op:operator pos:line="1608" pos:column="19">.</op:operator><name pos:line="1608" pos:column="20">IsNotNull</name></name><argument_list pos:line="1608" pos:column="29">(<argument><expr><name pos:line="1608" pos:column="30">methodBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="1609" pos:column="13">var</name></type> <name pos:line="1609" pos:column="17">methodFoo</name> <init pos:line="1609" pos:column="27">= <expr><call><name><name pos:line="1609" pos:column="29">globalScope</name><op:operator pos:line="1609" pos:column="40">.</op:operator><name><name pos:line="1609" pos:column="41">GetDescendants</name><argument_list pos:line="1609" pos:column="55">&lt;<argument><name pos:line="1609" pos:column="56">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1609" pos:column="73">()</argument_list></call><op:operator pos:line="1609" pos:column="75">.</op:operator><call><name pos:line="1609" pos:column="76">FirstOrDefault</name><argument_list pos:line="1609" pos:column="90">(<argument><expr><lambda><name pos:line="1609" pos:column="91">m</name> <op:operator pos:line="1609" pos:column="93">=&gt;</op:operator> <name><name pos:line="1609" pos:column="96">m</name><op:operator pos:line="1609" pos:column="97">.</op:operator><name pos:line="1609" pos:column="98">Name</name></name> <op:operator pos:line="1609" pos:column="103">==</op:operator> <lit:literal type="string" pos:line="1609" pos:column="106">"Foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1610" pos:column="13">Assert</name><op:operator pos:line="1610" pos:column="19">.</op:operator><name pos:line="1610" pos:column="20">IsNotNull</name></name><argument_list pos:line="1610" pos:column="29">(<argument><expr><name pos:line="1610" pos:column="30">methodFoo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="1612" pos:column="13">Assert</name><op:operator pos:line="1612" pos:column="19">.</op:operator><name pos:line="1612" pos:column="20">AreEqual</name></name><argument_list pos:line="1612" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1612" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1612" pos:column="32">methodFoo</name><op:operator pos:line="1612" pos:column="41">.</op:operator><name pos:line="1612" pos:column="42">ChildStatements</name><op:operator pos:line="1612" pos:column="57">.</op:operator><name pos:line="1612" pos:column="58">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="1613" pos:column="13">var</name></type> <name pos:line="1613" pos:column="17">callToBar</name> <init pos:line="1613" pos:column="27">= <expr><name><name pos:line="1613" pos:column="29">methodFoo</name><op:operator pos:line="1613" pos:column="38">.</op:operator><name pos:line="1613" pos:column="39">ChildStatements</name><index pos:line="1613" pos:column="54">[<expr><lit:literal type="number" pos:line="1613" pos:column="55">0</lit:literal></expr>]</index></name><op:operator pos:line="1613" pos:column="57">.</op:operator><call><name><name pos:line="1613" pos:column="58">Content</name><op:operator pos:line="1613" pos:column="65">.</op:operator><name><name pos:line="1613" pos:column="66">GetDescendantsAndSelf</name><argument_list pos:line="1613" pos:column="87">&lt;<argument><name pos:line="1613" pos:column="88">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1613" pos:column="99">()</argument_list></call><op:operator pos:line="1613" pos:column="101">.</op:operator><call><name pos:line="1613" pos:column="102">FirstOrDefault</name><argument_list pos:line="1613" pos:column="116">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1614" pos:column="13">Assert</name><op:operator pos:line="1614" pos:column="19">.</op:operator><name pos:line="1614" pos:column="20">IsNotNull</name></name><argument_list pos:line="1614" pos:column="29">(<argument><expr><name pos:line="1614" pos:column="30">callToBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1615" pos:column="13">Assert</name><op:operator pos:line="1615" pos:column="19">.</op:operator><name pos:line="1615" pos:column="20">AreSame</name></name><argument_list pos:line="1615" pos:column="27">(<argument><expr><name pos:line="1615" pos:column="28">methodBar</name></expr></argument>, <argument><expr><call><name><name pos:line="1615" pos:column="39">callToBar</name><op:operator pos:line="1615" pos:column="48">.</op:operator><name pos:line="1615" pos:column="49">FindMatches</name></name><argument_list pos:line="1615" pos:column="60">()</argument_list></call><op:operator pos:line="1615" pos:column="62">.</op:operator><call><name pos:line="1615" pos:column="63">FirstOrDefault</name><argument_list pos:line="1615" pos:column="77">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1618" pos:column="9">[<expr><name pos:line="1618" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1619" pos:column="9">public</specifier> <name pos:line="1619" pos:column="16">void</name></type> <name pos:line="1619" pos:column="21">TestStaticInstanceVariableInDifferentNamespace</name><parameter_list pos:line="1619" pos:column="67">()</parameter_list> <block pos:line="1619" pos:column="70">{
            <comment type="line" pos:line="1620" pos:column="13">//namespace A {</comment>
            <comment type="line" pos:line="1621" pos:column="13">//	class B {</comment>
            <comment type="line" pos:line="1622" pos:column="13">//		public static B Instance { get; set; }</comment>
            <comment type="line" pos:line="1623" pos:column="13">//		public void Bar() { }</comment>
            <comment type="line" pos:line="1624" pos:column="13">//	}</comment>
            <comment type="line" pos:line="1625" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="1626" pos:column="13">var</name></type> <name pos:line="1626" pos:column="17">aXml</name> <init pos:line="1626" pos:column="22">= <expr><lit:literal type="string" pos:line="1626" pos:column="24">@"&lt;namespace pos:line=""1"" pos:column="&gt;namespace &lt;name pos:line=""1"" pos:column=""&gt;A&lt;/name&gt; &lt;block pos:line=""1"" pos:column=""&gt;{
	&lt;class pos:line=""2"" pos:column="&gt;class &lt;name pos:line=""2"" pos:column=""&gt;B&lt;/name&gt; &lt;block pos:line=""2"" pos:column=""&gt;{
		&lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;specifier pos:line=""3"" pos:column=""&gt;public&lt;/specifier&gt; &lt;specifier pos:line=""3"" pos:column=""&gt;static&lt;/specifier&gt; &lt;name pos:line=""3"" pos:column=""&gt;B&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""3"" pos:column=""&gt;Instance&lt;/name&gt; &lt;block pos:line=""3"" pos:column=""&gt;{ &lt;function_decl&gt;&lt;name pos:line=""3"" pos:column=""&gt;get&lt;/name&gt;;&lt;/function_decl&gt; &lt;function_decl&gt;&lt;name pos:line=""3"" pos:column=""&gt;set&lt;/name&gt;;&lt;/function_decl&gt; }&lt;/block&gt;&lt;/decl&gt;&lt;/decl_stmt&gt;
		&lt;function&gt;&lt;type&gt;&lt;specifier pos:line=""4"" pos:column=""&gt;public&lt;/specifier&gt; &lt;name pos:line=""4"" pos:column=""&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""4"" pos:column=""&gt;Bar&lt;/name&gt;&lt;parameter_list pos:line=""4"" pos:column=""&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""4"" pos:column=""&gt;{ }&lt;/block&gt;&lt;/function&gt;
	}&lt;/block&gt;&lt;/class&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="1632" pos:column="13">//using A;</comment>
            <comment type="line" pos:line="1633" pos:column="13">//</comment>
            <comment type="line" pos:line="1634" pos:column="13">//namespace C {</comment>
            <comment type="line" pos:line="1635" pos:column="13">//	class D {</comment>
            <comment type="line" pos:line="1636" pos:column="13">//		public void Foo() { B.Instance.Bar(); }</comment>
            <comment type="line" pos:line="1637" pos:column="13">//	}</comment>
            <comment type="line" pos:line="1638" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="1639" pos:column="13">var</name></type> <name pos:line="1639" pos:column="17">cXml</name> <init pos:line="1639" pos:column="22">= <expr><lit:literal type="string" pos:line="1639" pos:column="24">@"&lt;using pos:line=""1"" pos:column="&gt;using &lt;name pos:line=""1"" pos:column="&gt;A&lt;/name&gt;;&lt;/using&gt;

&lt;namespace pos:line=""3"" pos:column="&gt;namespace &lt;name pos:line=""3"" pos:column=""&gt;C&lt;/name&gt; &lt;block pos:line=""3"" pos:column=""&gt;{
    &lt;class pos:line=""4"" pos:column="&gt;class &lt;name pos:line=""4"" pos:column=""&gt;D&lt;/name&gt; &lt;block pos:line=""4"" pos:column=""&gt;{
        &lt;function&gt;&lt;type&gt;&lt;specifier pos:line=""5"" pos:column="&gt;public&lt;/specifier&gt; &lt;name pos:line=""5"" pos:column=""&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""5"" pos:column=""&gt;Foo&lt;/name&gt;&lt;parameter_list pos:line=""5"" pos:column=""&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""5"" pos:column=""&gt;{ &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;&lt;name pos:line=""5"" pos:column=""&gt;B&lt;/name&gt;&lt;op:operator pos:line=""5"" pos:column=""&gt;.&lt;/op:operator&gt;&lt;name pos:line=""5"" pos:column=""&gt;Instance&lt;/name&gt;&lt;op:operator pos:line=""5"" pos:column=""&gt;.&lt;/op:operator&gt;&lt;name pos:line=""5"" pos:column=""&gt;Bar&lt;/name&gt;&lt;/name&gt;&lt;argument_list pos:line=""5"" pos:column=""&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt; }&lt;/block&gt;&lt;/function&gt;
    }&lt;/block&gt;&lt;/class&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1646" pos:column="13">var</name></type> <name pos:line="1646" pos:column="17">aUnit</name> <init pos:line="1646" pos:column="23">= <expr><call><name><name pos:line="1646" pos:column="25">fileSetup</name><op:operator pos:line="1646" pos:column="34">.</op:operator><name pos:line="1646" pos:column="35">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1646" pos:column="59">(<argument><expr><name pos:line="1646" pos:column="60">aXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1646" pos:column="66">"A.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1647" pos:column="13">var</name></type> <name pos:line="1647" pos:column="17">cUnit</name> <init pos:line="1647" pos:column="23">= <expr><call><name><name pos:line="1647" pos:column="25">fileSetup</name><op:operator pos:line="1647" pos:column="34">.</op:operator><name pos:line="1647" pos:column="35">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1647" pos:column="59">(<argument><expr><name pos:line="1647" pos:column="60">cXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1647" pos:column="66">"C.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1648" pos:column="13">var</name></type> <name pos:line="1648" pos:column="17">aScope</name> <init pos:line="1648" pos:column="24">= <expr><call><name><name pos:line="1648" pos:column="26">codeParser</name><op:operator pos:line="1648" pos:column="36">.</op:operator><name pos:line="1648" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="1648" pos:column="50">(<argument><expr><name pos:line="1648" pos:column="51">aUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1649" pos:column="13">var</name></type> <name pos:line="1649" pos:column="17">cScope</name> <init pos:line="1649" pos:column="24">= <expr><call><name><name pos:line="1649" pos:column="26">codeParser</name><op:operator pos:line="1649" pos:column="36">.</op:operator><name pos:line="1649" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="1649" pos:column="50">(<argument><expr><name pos:line="1649" pos:column="51">cUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1650" pos:column="13">var</name></type> <name pos:line="1650" pos:column="17">globalScope</name> <init pos:line="1650" pos:column="29">= <expr><call><name><name pos:line="1650" pos:column="31">aScope</name><op:operator pos:line="1650" pos:column="37">.</op:operator><name pos:line="1650" pos:column="38">Merge</name></name><argument_list pos:line="1650" pos:column="43">(<argument><expr><name pos:line="1650" pos:column="44">cScope</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1652" pos:column="13">var</name></type> <name pos:line="1652" pos:column="17">methodBar</name> <init pos:line="1652" pos:column="27">= <expr><call><name><name pos:line="1652" pos:column="29">globalScope</name><op:operator pos:line="1652" pos:column="40">.</op:operator><name><name pos:line="1652" pos:column="41">GetDescendants</name><argument_list pos:line="1652" pos:column="55">&lt;<argument><name pos:line="1652" pos:column="56">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1652" pos:column="73">()</argument_list></call><op:operator pos:line="1652" pos:column="75">.</op:operator><call><name pos:line="1652" pos:column="76">FirstOrDefault</name><argument_list pos:line="1652" pos:column="90">(<argument><expr><lambda><name pos:line="1652" pos:column="91">m</name> <op:operator pos:line="1652" pos:column="93">=&gt;</op:operator> <name><name pos:line="1652" pos:column="96">m</name><op:operator pos:line="1652" pos:column="97">.</op:operator><name pos:line="1652" pos:column="98">Name</name></name> <op:operator pos:line="1652" pos:column="103">==</op:operator> <lit:literal type="string" pos:line="1652" pos:column="106">"Bar"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1653" pos:column="13">Assert</name><op:operator pos:line="1653" pos:column="19">.</op:operator><name pos:line="1653" pos:column="20">IsNotNull</name></name><argument_list pos:line="1653" pos:column="29">(<argument><expr><name pos:line="1653" pos:column="30">methodBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="1654" pos:column="13">var</name></type> <name pos:line="1654" pos:column="17">methodFoo</name> <init pos:line="1654" pos:column="27">= <expr><call><name><name pos:line="1654" pos:column="29">globalScope</name><op:operator pos:line="1654" pos:column="40">.</op:operator><name><name pos:line="1654" pos:column="41">GetDescendants</name><argument_list pos:line="1654" pos:column="55">&lt;<argument><name pos:line="1654" pos:column="56">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1654" pos:column="73">()</argument_list></call><op:operator pos:line="1654" pos:column="75">.</op:operator><call><name pos:line="1654" pos:column="76">FirstOrDefault</name><argument_list pos:line="1654" pos:column="90">(<argument><expr><lambda><name pos:line="1654" pos:column="91">m</name> <op:operator pos:line="1654" pos:column="93">=&gt;</op:operator> <name><name pos:line="1654" pos:column="96">m</name><op:operator pos:line="1654" pos:column="97">.</op:operator><name pos:line="1654" pos:column="98">Name</name></name> <op:operator pos:line="1654" pos:column="103">==</op:operator> <lit:literal type="string" pos:line="1654" pos:column="106">"Foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1655" pos:column="13">Assert</name><op:operator pos:line="1655" pos:column="19">.</op:operator><name pos:line="1655" pos:column="20">IsNotNull</name></name><argument_list pos:line="1655" pos:column="29">(<argument><expr><name pos:line="1655" pos:column="30">methodFoo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="1657" pos:column="13">Assert</name><op:operator pos:line="1657" pos:column="19">.</op:operator><name pos:line="1657" pos:column="20">AreEqual</name></name><argument_list pos:line="1657" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1657" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1657" pos:column="32">methodFoo</name><op:operator pos:line="1657" pos:column="41">.</op:operator><name pos:line="1657" pos:column="42">ChildStatements</name><op:operator pos:line="1657" pos:column="57">.</op:operator><name pos:line="1657" pos:column="58">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="1658" pos:column="13">var</name></type> <name pos:line="1658" pos:column="17">callToBar</name> <init pos:line="1658" pos:column="27">= <expr><name><name pos:line="1658" pos:column="29">methodFoo</name><op:operator pos:line="1658" pos:column="38">.</op:operator><name pos:line="1658" pos:column="39">ChildStatements</name><index pos:line="1658" pos:column="54">[<expr><lit:literal type="number" pos:line="1658" pos:column="55">0</lit:literal></expr>]</index></name><op:operator pos:line="1658" pos:column="57">.</op:operator><call><name><name pos:line="1658" pos:column="58">Content</name><op:operator pos:line="1658" pos:column="65">.</op:operator><name><name pos:line="1658" pos:column="66">GetDescendantsAndSelf</name><argument_list pos:line="1658" pos:column="87">&lt;<argument><name pos:line="1658" pos:column="88">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1658" pos:column="99">()</argument_list></call><op:operator pos:line="1658" pos:column="101">.</op:operator><call><name pos:line="1658" pos:column="102">FirstOrDefault</name><argument_list pos:line="1658" pos:column="116">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1659" pos:column="13">Assert</name><op:operator pos:line="1659" pos:column="19">.</op:operator><name pos:line="1659" pos:column="20">IsNotNull</name></name><argument_list pos:line="1659" pos:column="29">(<argument><expr><name pos:line="1659" pos:column="30">callToBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1660" pos:column="13">Assert</name><op:operator pos:line="1660" pos:column="19">.</op:operator><name pos:line="1660" pos:column="20">AreSame</name></name><argument_list pos:line="1660" pos:column="27">(<argument><expr><name pos:line="1660" pos:column="28">methodBar</name></expr></argument>, <argument><expr><call><name><name pos:line="1660" pos:column="39">callToBar</name><op:operator pos:line="1660" pos:column="48">.</op:operator><name pos:line="1660" pos:column="49">FindMatches</name></name><argument_list pos:line="1660" pos:column="60">()</argument_list></call><op:operator pos:line="1660" pos:column="62">.</op:operator><call><name pos:line="1660" pos:column="63">FirstOrDefault</name><argument_list pos:line="1660" pos:column="77">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1663" pos:column="9">[<expr><name pos:line="1663" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1664" pos:column="9">public</specifier> <name pos:line="1664" pos:column="16">void</name></type> <name pos:line="1664" pos:column="21">TestCallAsCallingObject</name><parameter_list pos:line="1664" pos:column="44">()</parameter_list> <block pos:line="1664" pos:column="47">{
            <comment type="line" pos:line="1665" pos:column="13">//namespace A {</comment>
            <comment type="line" pos:line="1666" pos:column="13">//	public class B {</comment>
            <comment type="line" pos:line="1667" pos:column="13">//		void main() {</comment>
            <comment type="line" pos:line="1668" pos:column="13">//			Foo().Bar();</comment>
            <comment type="line" pos:line="1669" pos:column="13">//		}</comment>
            <comment type="line" pos:line="1670" pos:column="13">//</comment>
            <comment type="line" pos:line="1671" pos:column="13">//		C Foo() { return new C(); }</comment>
            <comment type="line" pos:line="1672" pos:column="13">//	}</comment>
            <comment type="line" pos:line="1673" pos:column="13">//</comment>
            <comment type="line" pos:line="1674" pos:column="13">//	public class C {</comment>
            <comment type="line" pos:line="1675" pos:column="13">//		void Bar() { }</comment>
            <comment type="line" pos:line="1676" pos:column="13">//	}</comment>
            <comment type="line" pos:line="1677" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="1678" pos:column="13">var</name></type> <name pos:line="1678" pos:column="17">xml</name> <init pos:line="1678" pos:column="21">= <expr><lit:literal type="string" pos:line="1678" pos:column="23">@"&lt;namespace&gt;namespace &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{
	&lt;class&gt;&lt;specifier&gt;public&lt;/specifier&gt; class &lt;name&gt;B&lt;/name&gt; &lt;block&gt;{
		&lt;function&gt;&lt;type&gt;&lt;name&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name&gt;main&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{
			&lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;Foo&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;op:operator&gt;.&lt;/op:operator&gt;&lt;call&gt;&lt;name&gt;Bar&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
		}&lt;/block&gt;&lt;/function&gt;

		&lt;function&gt;&lt;type&gt;&lt;name&gt;C&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ &lt;return&gt;return &lt;expr&gt;&lt;op:operator&gt;new&lt;/op:operator&gt; &lt;call&gt;&lt;name&gt;C&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/return&gt; }&lt;/block&gt;&lt;/function&gt;
	}&lt;/block&gt;&lt;/class&gt;

	&lt;class&gt;&lt;specifier&gt;public&lt;/specifier&gt; class &lt;name&gt;C&lt;/name&gt; &lt;block&gt;{
		&lt;function&gt;&lt;type&gt;&lt;name&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Bar&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ }&lt;/block&gt;&lt;/function&gt;
	}&lt;/block&gt;&lt;/class&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1692" pos:column="13">var</name></type> <name pos:line="1692" pos:column="17">unit</name> <init pos:line="1692" pos:column="22">= <expr><call><name><name pos:line="1692" pos:column="24">fileSetup</name><op:operator pos:line="1692" pos:column="33">.</op:operator><name pos:line="1692" pos:column="34">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1692" pos:column="58">(<argument><expr><name pos:line="1692" pos:column="59">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1692" pos:column="64">"B.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1693" pos:column="13">var</name></type> <name pos:line="1693" pos:column="17">globalScope</name> <init pos:line="1693" pos:column="29">= <expr><call><name><name pos:line="1693" pos:column="31">codeParser</name><op:operator pos:line="1693" pos:column="41">.</op:operator><name pos:line="1693" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="1693" pos:column="55">(<argument><expr><name pos:line="1693" pos:column="56">unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1695" pos:column="13">var</name></type> <name pos:line="1695" pos:column="17">mainMethod</name> <init pos:line="1695" pos:column="28">= <expr><call><name><name pos:line="1695" pos:column="30">globalScope</name><op:operator pos:line="1695" pos:column="41">.</op:operator><name><name pos:line="1695" pos:column="42">GetDescendants</name><argument_list pos:line="1695" pos:column="56">&lt;<argument><name pos:line="1695" pos:column="57">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1695" pos:column="74">()</argument_list></call><op:operator pos:line="1695" pos:column="76">.</op:operator><call><name pos:line="1695" pos:column="77">FirstOrDefault</name><argument_list pos:line="1695" pos:column="91">(<argument><expr><lambda><name pos:line="1695" pos:column="92">m</name> <op:operator pos:line="1695" pos:column="94">=&gt;</op:operator> <name><name pos:line="1695" pos:column="97">m</name><op:operator pos:line="1695" pos:column="98">.</op:operator><name pos:line="1695" pos:column="99">Name</name></name> <op:operator pos:line="1695" pos:column="104">==</op:operator> <lit:literal type="string" pos:line="1695" pos:column="107">"main"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1696" pos:column="13">var</name></type> <name pos:line="1696" pos:column="17">fooMethod</name> <init pos:line="1696" pos:column="27">= <expr><call><name><name pos:line="1696" pos:column="29">globalScope</name><op:operator pos:line="1696" pos:column="40">.</op:operator><name><name pos:line="1696" pos:column="41">GetDescendants</name><argument_list pos:line="1696" pos:column="55">&lt;<argument><name pos:line="1696" pos:column="56">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1696" pos:column="73">()</argument_list></call><op:operator pos:line="1696" pos:column="75">.</op:operator><call><name pos:line="1696" pos:column="76">FirstOrDefault</name><argument_list pos:line="1696" pos:column="90">(<argument><expr><lambda><name pos:line="1696" pos:column="91">m</name> <op:operator pos:line="1696" pos:column="93">=&gt;</op:operator> <name><name pos:line="1696" pos:column="96">m</name><op:operator pos:line="1696" pos:column="97">.</op:operator><name pos:line="1696" pos:column="98">Name</name></name> <op:operator pos:line="1696" pos:column="103">==</op:operator> <lit:literal type="string" pos:line="1696" pos:column="106">"Foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1697" pos:column="13">var</name></type> <name pos:line="1697" pos:column="17">barMethod</name> <init pos:line="1697" pos:column="27">= <expr><call><name><name pos:line="1697" pos:column="29">globalScope</name><op:operator pos:line="1697" pos:column="40">.</op:operator><name><name pos:line="1697" pos:column="41">GetDescendants</name><argument_list pos:line="1697" pos:column="55">&lt;<argument><name pos:line="1697" pos:column="56">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1697" pos:column="73">()</argument_list></call><op:operator pos:line="1697" pos:column="75">.</op:operator><call><name pos:line="1697" pos:column="76">FirstOrDefault</name><argument_list pos:line="1697" pos:column="90">(<argument><expr><lambda><name pos:line="1697" pos:column="91">m</name> <op:operator pos:line="1697" pos:column="93">=&gt;</op:operator> <name><name pos:line="1697" pos:column="96">m</name><op:operator pos:line="1697" pos:column="97">.</op:operator><name pos:line="1697" pos:column="98">Name</name></name> <op:operator pos:line="1697" pos:column="103">==</op:operator> <lit:literal type="string" pos:line="1697" pos:column="106">"Bar"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1698" pos:column="13">Assert</name><op:operator pos:line="1698" pos:column="19">.</op:operator><name pos:line="1698" pos:column="20">IsNotNull</name></name><argument_list pos:line="1698" pos:column="29">(<argument><expr><name pos:line="1698" pos:column="30">mainMethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1699" pos:column="13">Assert</name><op:operator pos:line="1699" pos:column="19">.</op:operator><name pos:line="1699" pos:column="20">IsNotNull</name></name><argument_list pos:line="1699" pos:column="29">(<argument><expr><name pos:line="1699" pos:column="30">fooMethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1700" pos:column="13">Assert</name><op:operator pos:line="1700" pos:column="19">.</op:operator><name pos:line="1700" pos:column="20">IsNotNull</name></name><argument_list pos:line="1700" pos:column="29">(<argument><expr><name pos:line="1700" pos:column="30">barMethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="1702" pos:column="13">Assert</name><op:operator pos:line="1702" pos:column="19">.</op:operator><name pos:line="1702" pos:column="20">AreEqual</name></name><argument_list pos:line="1702" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1702" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1702" pos:column="32">mainMethod</name><op:operator pos:line="1702" pos:column="42">.</op:operator><name pos:line="1702" pos:column="43">ChildStatements</name><op:operator pos:line="1702" pos:column="58">.</op:operator><name pos:line="1702" pos:column="59">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="1703" pos:column="13">var</name></type> <name pos:line="1703" pos:column="17">callToFoo</name> <init pos:line="1703" pos:column="27">= <expr><name><name pos:line="1703" pos:column="29">mainMethod</name><op:operator pos:line="1703" pos:column="39">.</op:operator><name pos:line="1703" pos:column="40">ChildStatements</name><index pos:line="1703" pos:column="55">[<expr><lit:literal type="number" pos:line="1703" pos:column="56">0</lit:literal></expr>]</index></name><op:operator pos:line="1703" pos:column="58">.</op:operator><call><name><name pos:line="1703" pos:column="59">Content</name><op:operator pos:line="1703" pos:column="66">.</op:operator><name><name pos:line="1703" pos:column="67">GetDescendantsAndSelf</name><argument_list pos:line="1703" pos:column="88">&lt;<argument><name pos:line="1703" pos:column="89">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1703" pos:column="100">()</argument_list></call><op:operator pos:line="1703" pos:column="102">.</op:operator><call><name pos:line="1703" pos:column="103">FirstOrDefault</name><argument_list pos:line="1703" pos:column="117">(<argument><expr><lambda><name pos:line="1703" pos:column="118">mc</name> <op:operator pos:line="1703" pos:column="121">=&gt;</op:operator> <name><name pos:line="1703" pos:column="124">mc</name><op:operator pos:line="1703" pos:column="126">.</op:operator><name pos:line="1703" pos:column="127">Name</name></name> <op:operator pos:line="1703" pos:column="132">==</op:operator> <lit:literal type="string" pos:line="1703" pos:column="135">"Foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1704" pos:column="13">var</name></type> <name pos:line="1704" pos:column="17">callToBar</name> <init pos:line="1704" pos:column="27">= <expr><name><name pos:line="1704" pos:column="29">mainMethod</name><op:operator pos:line="1704" pos:column="39">.</op:operator><name pos:line="1704" pos:column="40">ChildStatements</name><index pos:line="1704" pos:column="55">[<expr><lit:literal type="number" pos:line="1704" pos:column="56">0</lit:literal></expr>]</index></name><op:operator pos:line="1704" pos:column="58">.</op:operator><call><name><name pos:line="1704" pos:column="59">Content</name><op:operator pos:line="1704" pos:column="66">.</op:operator><name><name pos:line="1704" pos:column="67">GetDescendantsAndSelf</name><argument_list pos:line="1704" pos:column="88">&lt;<argument><name pos:line="1704" pos:column="89">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1704" pos:column="100">()</argument_list></call><op:operator pos:line="1704" pos:column="102">.</op:operator><call><name pos:line="1704" pos:column="103">FirstOrDefault</name><argument_list pos:line="1704" pos:column="117">(<argument><expr><lambda><name pos:line="1704" pos:column="118">mc</name> <op:operator pos:line="1704" pos:column="121">=&gt;</op:operator> <name><name pos:line="1704" pos:column="124">mc</name><op:operator pos:line="1704" pos:column="126">.</op:operator><name pos:line="1704" pos:column="127">Name</name></name> <op:operator pos:line="1704" pos:column="132">==</op:operator> <lit:literal type="string" pos:line="1704" pos:column="135">"Bar"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1705" pos:column="13">Assert</name><op:operator pos:line="1705" pos:column="19">.</op:operator><name pos:line="1705" pos:column="20">IsNotNull</name></name><argument_list pos:line="1705" pos:column="29">(<argument><expr><name pos:line="1705" pos:column="30">callToFoo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1706" pos:column="13">Assert</name><op:operator pos:line="1706" pos:column="19">.</op:operator><name pos:line="1706" pos:column="20">IsNotNull</name></name><argument_list pos:line="1706" pos:column="29">(<argument><expr><name pos:line="1706" pos:column="30">callToBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="1708" pos:column="13">Assert</name><op:operator pos:line="1708" pos:column="19">.</op:operator><name pos:line="1708" pos:column="20">AreSame</name></name><argument_list pos:line="1708" pos:column="27">(<argument><expr><name pos:line="1708" pos:column="28">fooMethod</name></expr></argument>, <argument><expr><call><name><name pos:line="1708" pos:column="39">callToFoo</name><op:operator pos:line="1708" pos:column="48">.</op:operator><name pos:line="1708" pos:column="49">FindMatches</name></name><argument_list pos:line="1708" pos:column="60">()</argument_list></call><op:operator pos:line="1708" pos:column="62">.</op:operator><call><name pos:line="1708" pos:column="63">FirstOrDefault</name><argument_list pos:line="1708" pos:column="77">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1709" pos:column="13">Assert</name><op:operator pos:line="1709" pos:column="19">.</op:operator><name pos:line="1709" pos:column="20">AreSame</name></name><argument_list pos:line="1709" pos:column="27">(<argument><expr><name pos:line="1709" pos:column="28">barMethod</name></expr></argument>, <argument><expr><call><name><name pos:line="1709" pos:column="39">callToBar</name><op:operator pos:line="1709" pos:column="48">.</op:operator><name pos:line="1709" pos:column="49">FindMatches</name></name><argument_list pos:line="1709" pos:column="60">()</argument_list></call><op:operator pos:line="1709" pos:column="62">.</op:operator><call><name pos:line="1709" pos:column="63">FirstOrDefault</name><argument_list pos:line="1709" pos:column="77">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1712" pos:column="9">[<expr><name pos:line="1712" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1713" pos:column="9">public</specifier> <name pos:line="1713" pos:column="16">void</name></type> <name pos:line="1713" pos:column="21">TestResolveVariable_Field</name><parameter_list pos:line="1713" pos:column="46">()</parameter_list> <block pos:line="1713" pos:column="49">{
            <comment type="line" pos:line="1714" pos:column="13">//class A {</comment>
            <comment type="line" pos:line="1715" pos:column="13">//  public int Foo;</comment>
            <comment type="line" pos:line="1716" pos:column="13">//  public A() {</comment>
            <comment type="line" pos:line="1717" pos:column="13">//    Foo = 42;</comment>
            <comment type="line" pos:line="1718" pos:column="13">//  }</comment>
            <comment type="line" pos:line="1719" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="1720" pos:column="13">string</name></type> <name pos:line="1720" pos:column="20">xml</name> <init pos:line="1720" pos:column="24">= <expr><lit:literal type="string" pos:line="1720" pos:column="26">@"&lt;class&gt;class &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{
  &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
  &lt;constructor&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;A&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{
    &lt;expr_stmt&gt;&lt;expr&gt;&lt;name&gt;Foo&lt;/name&gt; &lt;op:operator&gt;=&lt;/op:operator&gt; &lt;lit:literal type=""number&gt;42&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
  }&lt;/block&gt;&lt;/constructor&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1726" pos:column="13">XElement</name></type> <name pos:line="1726" pos:column="22">xmlElement</name> <init pos:line="1726" pos:column="33">= <expr><call><name><name pos:line="1726" pos:column="35">fileSetup</name><op:operator pos:line="1726" pos:column="44">.</op:operator><name pos:line="1726" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1726" pos:column="69">(<argument><expr><name pos:line="1726" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1726" pos:column="75">"A.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1728" pos:column="13">var</name></type> <name pos:line="1728" pos:column="17">globalScope</name> <init pos:line="1728" pos:column="29">= <expr><call><name><name pos:line="1728" pos:column="31">codeParser</name><op:operator pos:line="1728" pos:column="41">.</op:operator><name pos:line="1728" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="1728" pos:column="55">(<argument><expr><name pos:line="1728" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1729" pos:column="13">var</name></type> <name pos:line="1729" pos:column="17">fooDecl</name> <init pos:line="1729" pos:column="25">= <expr><call><name><name pos:line="1729" pos:column="27">globalScope</name><op:operator pos:line="1729" pos:column="38">.</op:operator><name><name pos:line="1729" pos:column="39">GetNamedChildren</name><argument_list pos:line="1729" pos:column="55">&lt;<argument><name pos:line="1729" pos:column="56">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1729" pos:column="71">(<argument><expr><lit:literal type="string" pos:line="1729" pos:column="72">"A"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1729" pos:column="76">.</op:operator><call><name pos:line="1729" pos:column="77">First</name><argument_list pos:line="1729" pos:column="82">()</argument_list></call><op:operator pos:line="1729" pos:column="84">.</op:operator><call><name><name pos:line="1729" pos:column="85">GetNamedChildren</name><argument_list pos:line="1729" pos:column="101">&lt;<argument><name pos:line="1729" pos:column="102">VariableDeclaration</name></argument>&gt;</argument_list></name><argument_list pos:line="1729" pos:column="122">(<argument><expr><lit:literal type="string" pos:line="1729" pos:column="123">"Foo"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1729" pos:column="129">.</op:operator><call><name pos:line="1729" pos:column="130">First</name><argument_list pos:line="1729" pos:column="135">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1730" pos:column="13">var</name></type> <name pos:line="1730" pos:column="17">aConstructor</name> <init pos:line="1730" pos:column="30">= <expr><call><name><name pos:line="1730" pos:column="32">globalScope</name><op:operator pos:line="1730" pos:column="43">.</op:operator><name><name pos:line="1730" pos:column="44">GetDescendants</name><argument_list pos:line="1730" pos:column="58">&lt;<argument><name pos:line="1730" pos:column="59">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1730" pos:column="76">()</argument_list></call><op:operator pos:line="1730" pos:column="78">.</op:operator><call><name pos:line="1730" pos:column="79">First</name><argument_list pos:line="1730" pos:column="84">(<argument><expr><lambda><name pos:line="1730" pos:column="85">m</name> <op:operator pos:line="1730" pos:column="87">=&gt;</op:operator> <name><name pos:line="1730" pos:column="90">m</name><op:operator pos:line="1730" pos:column="91">.</op:operator><name pos:line="1730" pos:column="92">Name</name></name> <op:operator pos:line="1730" pos:column="97">==</op:operator> <lit:literal type="string" pos:line="1730" pos:column="100">"A"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1731" pos:column="13">Assert</name><op:operator pos:line="1731" pos:column="19">.</op:operator><name pos:line="1731" pos:column="20">AreEqual</name></name><argument_list pos:line="1731" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1731" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1731" pos:column="32">aConstructor</name><op:operator pos:line="1731" pos:column="44">.</op:operator><name pos:line="1731" pos:column="45">ChildStatements</name><op:operator pos:line="1731" pos:column="60">.</op:operator><name pos:line="1731" pos:column="61">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="1732" pos:column="13">var</name></type> <name pos:line="1732" pos:column="17">fooUse</name> <init pos:line="1732" pos:column="24">= <expr><name><name pos:line="1732" pos:column="26">aConstructor</name><op:operator pos:line="1732" pos:column="38">.</op:operator><name pos:line="1732" pos:column="39">ChildStatements</name><index pos:line="1732" pos:column="54">[<expr><lit:literal type="number" pos:line="1732" pos:column="55">0</lit:literal></expr>]</index></name><op:operator pos:line="1732" pos:column="57">.</op:operator><call><name><name pos:line="1732" pos:column="58">Content</name><op:operator pos:line="1732" pos:column="65">.</op:operator><name><name pos:line="1732" pos:column="66">GetDescendants</name><argument_list pos:line="1732" pos:column="80">&lt;<argument><name pos:line="1732" pos:column="81">NameUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1732" pos:column="89">()</argument_list></call><op:operator pos:line="1732" pos:column="91">.</op:operator><call><name pos:line="1732" pos:column="92">FirstOrDefault</name><argument_list pos:line="1732" pos:column="106">(<argument><expr><lambda><name pos:line="1732" pos:column="107">n</name> <op:operator pos:line="1732" pos:column="109">=&gt;</op:operator> <name><name pos:line="1732" pos:column="112">n</name><op:operator pos:line="1732" pos:column="113">.</op:operator><name pos:line="1732" pos:column="114">Name</name></name> <op:operator pos:line="1732" pos:column="119">==</op:operator> <lit:literal type="string" pos:line="1732" pos:column="122">"Foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1733" pos:column="13">Assert</name><op:operator pos:line="1733" pos:column="19">.</op:operator><name pos:line="1733" pos:column="20">IsNotNull</name></name><argument_list pos:line="1733" pos:column="29">(<argument><expr><name pos:line="1733" pos:column="30">fooUse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1734" pos:column="13">Assert</name><op:operator pos:line="1734" pos:column="19">.</op:operator><name pos:line="1734" pos:column="20">AreSame</name></name><argument_list pos:line="1734" pos:column="27">(<argument><expr><name pos:line="1734" pos:column="28">fooDecl</name></expr></argument>, <argument><expr><call><name><name pos:line="1734" pos:column="37">fooUse</name><op:operator pos:line="1734" pos:column="43">.</op:operator><name pos:line="1734" pos:column="44">FindMatches</name></name><argument_list pos:line="1734" pos:column="55">()</argument_list></call><op:operator pos:line="1734" pos:column="57">.</op:operator><call><name pos:line="1734" pos:column="58">FirstOrDefault</name><argument_list pos:line="1734" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1737" pos:column="9">[<expr><name pos:line="1737" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1738" pos:column="9">public</specifier> <name pos:line="1738" pos:column="16">void</name></type> <name pos:line="1738" pos:column="21">TestResolveVariable_FieldInParent</name><parameter_list pos:line="1738" pos:column="54">()</parameter_list> <block pos:line="1738" pos:column="57">{
            <comment type="line" pos:line="1739" pos:column="13">//class B {</comment>
            <comment type="line" pos:line="1740" pos:column="13">//  public int Foo;</comment>
            <comment type="line" pos:line="1741" pos:column="13">//}</comment>
            <comment type="line" pos:line="1742" pos:column="13">//class A : B {</comment>
            <comment type="line" pos:line="1743" pos:column="13">//  public A() {</comment>
            <comment type="line" pos:line="1744" pos:column="13">//    Foo = 42;</comment>
            <comment type="line" pos:line="1745" pos:column="13">//  }</comment>
            <comment type="line" pos:line="1746" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="1747" pos:column="13">var</name></type> <name pos:line="1747" pos:column="17">xml</name> <init pos:line="1747" pos:column="21">= <expr><lit:literal type="string" pos:line="1747" pos:column="23">@"&lt;class&gt;class &lt;name&gt;B&lt;/name&gt; &lt;block&gt;{
  &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
}&lt;/block&gt;&lt;/class&gt;
&lt;class&gt;class &lt;name&gt;A&lt;/name&gt; &lt;super&gt;: &lt;name&gt;B&lt;/name&gt;&lt;/super&gt; &lt;block&gt;{
  &lt;constructor&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;A&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{
    &lt;expr_stmt&gt;&lt;expr&gt;&lt;name&gt;Foo&lt;/name&gt; &lt;op:operator&gt;=&lt;/op:operator&gt; &lt;lit:literal type=""number&gt;42&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
  }&lt;/block&gt;&lt;/constructor&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1755" pos:column="13">XElement</name></type> <name pos:line="1755" pos:column="22">xmlElement</name> <init pos:line="1755" pos:column="33">= <expr><call><name><name pos:line="1755" pos:column="35">fileSetup</name><op:operator pos:line="1755" pos:column="44">.</op:operator><name pos:line="1755" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1755" pos:column="69">(<argument><expr><name pos:line="1755" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1755" pos:column="75">"A.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1757" pos:column="13">var</name></type> <name pos:line="1757" pos:column="17">globalScope</name> <init pos:line="1757" pos:column="29">= <expr><call><name><name pos:line="1757" pos:column="31">codeParser</name><op:operator pos:line="1757" pos:column="41">.</op:operator><name pos:line="1757" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="1757" pos:column="55">(<argument><expr><name pos:line="1757" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1758" pos:column="13">var</name></type> <name pos:line="1758" pos:column="17">fooDecl</name> <init pos:line="1758" pos:column="25">= <expr><call><name><name pos:line="1758" pos:column="27">globalScope</name><op:operator pos:line="1758" pos:column="38">.</op:operator><name><name pos:line="1758" pos:column="39">GetNamedChildren</name><argument_list pos:line="1758" pos:column="55">&lt;<argument><name pos:line="1758" pos:column="56">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1758" pos:column="71">(<argument><expr><lit:literal type="string" pos:line="1758" pos:column="72">"B"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1758" pos:column="76">.</op:operator><call><name pos:line="1758" pos:column="77">First</name><argument_list pos:line="1758" pos:column="82">()</argument_list></call><op:operator pos:line="1758" pos:column="84">.</op:operator><call><name><name pos:line="1758" pos:column="85">GetNamedChildren</name><argument_list pos:line="1758" pos:column="101">&lt;<argument><name pos:line="1758" pos:column="102">VariableDeclaration</name></argument>&gt;</argument_list></name><argument_list pos:line="1758" pos:column="122">(<argument><expr><lit:literal type="string" pos:line="1758" pos:column="123">"Foo"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1758" pos:column="129">.</op:operator><call><name pos:line="1758" pos:column="130">First</name><argument_list pos:line="1758" pos:column="135">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1759" pos:column="13">var</name></type> <name pos:line="1759" pos:column="17">aConstructor</name> <init pos:line="1759" pos:column="30">= <expr><call><name><name pos:line="1759" pos:column="32">globalScope</name><op:operator pos:line="1759" pos:column="43">.</op:operator><name><name pos:line="1759" pos:column="44">GetDescendants</name><argument_list pos:line="1759" pos:column="58">&lt;<argument><name pos:line="1759" pos:column="59">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1759" pos:column="76">()</argument_list></call><op:operator pos:line="1759" pos:column="78">.</op:operator><call><name pos:line="1759" pos:column="79">First</name><argument_list pos:line="1759" pos:column="84">(<argument><expr><lambda><name pos:line="1759" pos:column="85">m</name> <op:operator pos:line="1759" pos:column="87">=&gt;</op:operator> <name><name pos:line="1759" pos:column="90">m</name><op:operator pos:line="1759" pos:column="91">.</op:operator><name pos:line="1759" pos:column="92">Name</name></name> <op:operator pos:line="1759" pos:column="97">==</op:operator> <lit:literal type="string" pos:line="1759" pos:column="100">"A"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1760" pos:column="13">Assert</name><op:operator pos:line="1760" pos:column="19">.</op:operator><name pos:line="1760" pos:column="20">AreEqual</name></name><argument_list pos:line="1760" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1760" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1760" pos:column="32">aConstructor</name><op:operator pos:line="1760" pos:column="44">.</op:operator><name pos:line="1760" pos:column="45">ChildStatements</name><op:operator pos:line="1760" pos:column="60">.</op:operator><name pos:line="1760" pos:column="61">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="1761" pos:column="13">var</name></type> <name pos:line="1761" pos:column="17">fooUse</name> <init pos:line="1761" pos:column="24">= <expr><name><name pos:line="1761" pos:column="26">aConstructor</name><op:operator pos:line="1761" pos:column="38">.</op:operator><name pos:line="1761" pos:column="39">ChildStatements</name><index pos:line="1761" pos:column="54">[<expr><lit:literal type="number" pos:line="1761" pos:column="55">0</lit:literal></expr>]</index></name><op:operator pos:line="1761" pos:column="57">.</op:operator><call><name><name pos:line="1761" pos:column="58">Content</name><op:operator pos:line="1761" pos:column="65">.</op:operator><name><name pos:line="1761" pos:column="66">GetDescendants</name><argument_list pos:line="1761" pos:column="80">&lt;<argument><name pos:line="1761" pos:column="81">NameUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1761" pos:column="89">()</argument_list></call><op:operator pos:line="1761" pos:column="91">.</op:operator><call><name pos:line="1761" pos:column="92">FirstOrDefault</name><argument_list pos:line="1761" pos:column="106">(<argument><expr><lambda><name pos:line="1761" pos:column="107">n</name> <op:operator pos:line="1761" pos:column="109">=&gt;</op:operator> <name><name pos:line="1761" pos:column="112">n</name><op:operator pos:line="1761" pos:column="113">.</op:operator><name pos:line="1761" pos:column="114">Name</name></name> <op:operator pos:line="1761" pos:column="119">==</op:operator> <lit:literal type="string" pos:line="1761" pos:column="122">"Foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1762" pos:column="13">Assert</name><op:operator pos:line="1762" pos:column="19">.</op:operator><name pos:line="1762" pos:column="20">IsNotNull</name></name><argument_list pos:line="1762" pos:column="29">(<argument><expr><name pos:line="1762" pos:column="30">fooUse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1763" pos:column="13">Assert</name><op:operator pos:line="1763" pos:column="19">.</op:operator><name pos:line="1763" pos:column="20">AreSame</name></name><argument_list pos:line="1763" pos:column="27">(<argument><expr><name pos:line="1763" pos:column="28">fooDecl</name></expr></argument>, <argument><expr><call><name><name pos:line="1763" pos:column="37">fooUse</name><op:operator pos:line="1763" pos:column="43">.</op:operator><name pos:line="1763" pos:column="44">FindMatches</name></name><argument_list pos:line="1763" pos:column="55">()</argument_list></call><op:operator pos:line="1763" pos:column="57">.</op:operator><call><name pos:line="1763" pos:column="58">FirstOrDefault</name><argument_list pos:line="1763" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1766" pos:column="9">[<expr><name pos:line="1766" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1767" pos:column="9">public</specifier> <name pos:line="1767" pos:column="16">void</name></type> <name pos:line="1767" pos:column="21">TestCallingVariableDeclaredInParentClass</name><parameter_list pos:line="1767" pos:column="61">()</parameter_list> <block pos:line="1767" pos:column="64">{
            <comment type="line" pos:line="1768" pos:column="13">//class A { void Foo() { } }</comment>
            <decl_stmt><decl><type><name pos:line="1769" pos:column="13">string</name></type> <name pos:line="1769" pos:column="20">a_xml</name> <init pos:line="1769" pos:column="26">= <expr><lit:literal type="string" pos:line="1769" pos:column="28">@"&lt;class pos:line=""1"" pos:column="&gt;class &lt;name pos:line=""1"" pos:column="&gt;A&lt;/name&gt; &lt;block pos:line=""1"" pos:column="&gt;{ &lt;function&gt;&lt;type&gt;&lt;name pos:line=""1"" pos:column=""&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""1"" pos:column=""&gt;Foo&lt;/name&gt;&lt;parameter_list pos:line=""1"" pos:column=""&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""1"" pos:column=""&gt;{ }&lt;/block&gt;&lt;/function&gt; }&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="1771" pos:column="13">//class B { protected A a; }</comment>
            <decl_stmt><decl><type><name pos:line="1772" pos:column="13">string</name></type> <name pos:line="1772" pos:column="20">b_xml</name> <init pos:line="1772" pos:column="26">= <expr><lit:literal type="string" pos:line="1772" pos:column="28">@"&lt;class pos:line=""1"" pos:column="&gt;class &lt;name pos:line=""1"" pos:column="&gt;B&lt;/name&gt; &lt;block pos:line=""1"" pos:column="&gt;{ &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;specifier pos:line=""1"" pos:column=""&gt;protected&lt;/specifier&gt; &lt;name pos:line=""1"" pos:column=""&gt;A&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""1"" pos:column=""&gt;a&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt; }&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="1774" pos:column="13">//class C : B { void Bar() { a.Foo(); } }</comment>
            <decl_stmt><decl><type><name pos:line="1775" pos:column="13">string</name></type> <name pos:line="1775" pos:column="20">c_xml</name> <init pos:line="1775" pos:column="26">= <expr><lit:literal type="string" pos:line="1775" pos:column="28">@"&lt;class pos:line=""1"" pos:column="&gt;class &lt;name pos:line=""1"" pos:column="&gt;C&lt;/name&gt; &lt;super pos:line=""1"" pos:column="&gt;: &lt;name pos:line=""1"" pos:column=""&gt;B&lt;/name&gt;&lt;/super&gt; &lt;block pos:line=""1"" pos:column=""&gt;{ &lt;function&gt;&lt;type&gt;&lt;name pos:line=""1"" pos:column=""&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""1"" pos:column=""&gt;Bar&lt;/name&gt;&lt;parameter_list pos:line=""1"" pos:column=""&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""1"" pos:column=""&gt;{ &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;&lt;name pos:line=""1"" pos:column=""&gt;a&lt;/name&gt;&lt;op:operator pos:line=""1"" pos:column=""&gt;.&lt;/op:operator&gt;&lt;name pos:line=""1"" pos:column=""&gt;Foo&lt;/name&gt;&lt;/name&gt;&lt;argument_list pos:line=""1"" pos:column=""&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt; }&lt;/block&gt;&lt;/function&gt; }&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1777" pos:column="13">var</name></type> <name pos:line="1777" pos:column="17">aUnit</name> <init pos:line="1777" pos:column="23">= <expr><call><name><name pos:line="1777" pos:column="25">fileSetup</name><op:operator pos:line="1777" pos:column="34">.</op:operator><name pos:line="1777" pos:column="35">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1777" pos:column="59">(<argument><expr><name pos:line="1777" pos:column="60">a_xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1777" pos:column="67">"A.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1778" pos:column="13">var</name></type> <name pos:line="1778" pos:column="17">bUnit</name> <init pos:line="1778" pos:column="23">= <expr><call><name><name pos:line="1778" pos:column="25">fileSetup</name><op:operator pos:line="1778" pos:column="34">.</op:operator><name pos:line="1778" pos:column="35">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1778" pos:column="59">(<argument><expr><name pos:line="1778" pos:column="60">b_xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1778" pos:column="67">"B.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1779" pos:column="13">var</name></type> <name pos:line="1779" pos:column="17">cUnit</name> <init pos:line="1779" pos:column="23">= <expr><call><name><name pos:line="1779" pos:column="25">fileSetup</name><op:operator pos:line="1779" pos:column="34">.</op:operator><name pos:line="1779" pos:column="35">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1779" pos:column="59">(<argument><expr><name pos:line="1779" pos:column="60">c_xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1779" pos:column="67">"C.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1781" pos:column="13">var</name></type> <name pos:line="1781" pos:column="17">globalScope</name> <init pos:line="1781" pos:column="29">= <expr><call><name><name pos:line="1781" pos:column="31">codeParser</name><op:operator pos:line="1781" pos:column="41">.</op:operator><name pos:line="1781" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="1781" pos:column="55">(<argument><expr><name pos:line="1781" pos:column="56">aUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="1782" pos:column="13">globalScope</name> <op:operator pos:line="1782" pos:column="25">=</op:operator> <call><name><name pos:line="1782" pos:column="27">globalScope</name><op:operator pos:line="1782" pos:column="38">.</op:operator><name pos:line="1782" pos:column="39">Merge</name></name><argument_list pos:line="1782" pos:column="44">(<argument><expr><call><name><name pos:line="1782" pos:column="45">codeParser</name><op:operator pos:line="1782" pos:column="55">.</op:operator><name pos:line="1782" pos:column="56">ParseFileUnit</name></name><argument_list pos:line="1782" pos:column="69">(<argument><expr><name pos:line="1782" pos:column="70">bUnit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="1783" pos:column="13">globalScope</name> <op:operator pos:line="1783" pos:column="25">=</op:operator> <call><name><name pos:line="1783" pos:column="27">globalScope</name><op:operator pos:line="1783" pos:column="38">.</op:operator><name pos:line="1783" pos:column="39">Merge</name></name><argument_list pos:line="1783" pos:column="44">(<argument><expr><call><name><name pos:line="1783" pos:column="45">codeParser</name><op:operator pos:line="1783" pos:column="55">.</op:operator><name pos:line="1783" pos:column="56">ParseFileUnit</name></name><argument_list pos:line="1783" pos:column="69">(<argument><expr><name pos:line="1783" pos:column="70">cUnit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1785" pos:column="13">var</name></type> <name pos:line="1785" pos:column="17">typeA</name> <init pos:line="1785" pos:column="23">= <expr><call><name><name pos:line="1785" pos:column="25">globalScope</name><op:operator pos:line="1785" pos:column="36">.</op:operator><name><name pos:line="1785" pos:column="37">GetNamedChildren</name><argument_list pos:line="1785" pos:column="53">&lt;<argument><name pos:line="1785" pos:column="54">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1785" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="1785" pos:column="70">"A"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1785" pos:column="74">.</op:operator><call><name pos:line="1785" pos:column="75">FirstOrDefault</name><argument_list pos:line="1785" pos:column="89">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1786" pos:column="13">var</name></type> <name pos:line="1786" pos:column="17">typeB</name> <init pos:line="1786" pos:column="23">= <expr><call><name><name pos:line="1786" pos:column="25">globalScope</name><op:operator pos:line="1786" pos:column="36">.</op:operator><name><name pos:line="1786" pos:column="37">GetNamedChildren</name><argument_list pos:line="1786" pos:column="53">&lt;<argument><name pos:line="1786" pos:column="54">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1786" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="1786" pos:column="70">"B"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1786" pos:column="74">.</op:operator><call><name pos:line="1786" pos:column="75">FirstOrDefault</name><argument_list pos:line="1786" pos:column="89">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1787" pos:column="13">var</name></type> <name pos:line="1787" pos:column="17">typeC</name> <init pos:line="1787" pos:column="23">= <expr><call><name><name pos:line="1787" pos:column="25">globalScope</name><op:operator pos:line="1787" pos:column="36">.</op:operator><name><name pos:line="1787" pos:column="37">GetNamedChildren</name><argument_list pos:line="1787" pos:column="53">&lt;<argument><name pos:line="1787" pos:column="54">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1787" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="1787" pos:column="70">"C"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1787" pos:column="74">.</op:operator><call><name pos:line="1787" pos:column="75">FirstOrDefault</name><argument_list pos:line="1787" pos:column="89">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="1789" pos:column="13">Assert</name><op:operator pos:line="1789" pos:column="19">.</op:operator><name pos:line="1789" pos:column="20">IsNotNull</name></name><argument_list pos:line="1789" pos:column="29">(<argument><expr><name pos:line="1789" pos:column="30">typeA</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1789" pos:column="37">"could not find class A"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1790" pos:column="13">Assert</name><op:operator pos:line="1790" pos:column="19">.</op:operator><name pos:line="1790" pos:column="20">IsNotNull</name></name><argument_list pos:line="1790" pos:column="29">(<argument><expr><name pos:line="1790" pos:column="30">typeB</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1790" pos:column="37">"could not find class B"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1791" pos:column="13">Assert</name><op:operator pos:line="1791" pos:column="19">.</op:operator><name pos:line="1791" pos:column="20">IsNotNull</name></name><argument_list pos:line="1791" pos:column="29">(<argument><expr><name pos:line="1791" pos:column="30">typeC</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1791" pos:column="37">"could not find class C"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1793" pos:column="13">var</name></type> <name pos:line="1793" pos:column="17">aDotFoo</name> <init pos:line="1793" pos:column="25">= <expr><call><name><name pos:line="1793" pos:column="27">typeA</name><op:operator pos:line="1793" pos:column="32">.</op:operator><name><name pos:line="1793" pos:column="33">GetNamedChildren</name><argument_list pos:line="1793" pos:column="49">&lt;<argument><name pos:line="1793" pos:column="50">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1793" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="1793" pos:column="68">"Foo"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1793" pos:column="74">.</op:operator><call><name pos:line="1793" pos:column="75">FirstOrDefault</name><argument_list pos:line="1793" pos:column="89">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1794" pos:column="13">Assert</name><op:operator pos:line="1794" pos:column="19">.</op:operator><name pos:line="1794" pos:column="20">IsNotNull</name></name><argument_list pos:line="1794" pos:column="29">(<argument><expr><name pos:line="1794" pos:column="30">aDotFoo</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1794" pos:column="39">"could not find method A.Foo()"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1796" pos:column="13">var</name></type> <name pos:line="1796" pos:column="17">cDotBar</name> <init pos:line="1796" pos:column="25">= <expr><call><name><name pos:line="1796" pos:column="27">typeC</name><op:operator pos:line="1796" pos:column="32">.</op:operator><name><name pos:line="1796" pos:column="33">GetNamedChildren</name><argument_list pos:line="1796" pos:column="49">&lt;<argument><name pos:line="1796" pos:column="50">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1796" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="1796" pos:column="68">"Bar"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1796" pos:column="74">.</op:operator><call><name pos:line="1796" pos:column="75">FirstOrDefault</name><argument_list pos:line="1796" pos:column="89">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1797" pos:column="13">Assert</name><op:operator pos:line="1797" pos:column="19">.</op:operator><name pos:line="1797" pos:column="20">IsNotNull</name></name><argument_list pos:line="1797" pos:column="29">(<argument><expr><name pos:line="1797" pos:column="30">cDotBar</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1797" pos:column="39">"could not find method C.Bar()"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1799" pos:column="13">var</name></type> <name pos:line="1799" pos:column="17">callToFoo</name> <init pos:line="1799" pos:column="27">= <expr><call><name><name pos:line="1799" pos:column="29">cDotBar</name><op:operator pos:line="1799" pos:column="36">.</op:operator><name><name pos:line="1799" pos:column="37">FindExpressions</name><argument_list pos:line="1799" pos:column="52">&lt;<argument><name pos:line="1799" pos:column="53">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1799" pos:column="64">(<argument><expr><lit:literal type="boolean" pos:line="1799" pos:column="65">true</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1799" pos:column="70">.</op:operator><call><name pos:line="1799" pos:column="71">FirstOrDefault</name><argument_list pos:line="1799" pos:column="85">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1800" pos:column="13">Assert</name><op:operator pos:line="1800" pos:column="19">.</op:operator><name pos:line="1800" pos:column="20">IsNotNull</name></name><argument_list pos:line="1800" pos:column="29">(<argument><expr><name pos:line="1800" pos:column="30">callToFoo</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1800" pos:column="41">"could not find any method calls in C.Bar()"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1801" pos:column="13">Assert</name><op:operator pos:line="1801" pos:column="19">.</op:operator><name pos:line="1801" pos:column="20">AreEqual</name></name><argument_list pos:line="1801" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1801" pos:column="29">"Foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1801" pos:column="36">callToFoo</name><op:operator pos:line="1801" pos:column="45">.</op:operator><name pos:line="1801" pos:column="46">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="1803" pos:column="13">Assert</name><op:operator pos:line="1803" pos:column="19">.</op:operator><name pos:line="1803" pos:column="20">AreEqual</name></name><argument_list pos:line="1803" pos:column="28">(<argument><expr><name pos:line="1803" pos:column="29">aDotFoo</name></expr></argument>, <argument><expr><call><name><name pos:line="1803" pos:column="38">callToFoo</name><op:operator pos:line="1803" pos:column="47">.</op:operator><name pos:line="1803" pos:column="48">FindMatches</name></name><argument_list pos:line="1803" pos:column="59">()</argument_list></call><op:operator pos:line="1803" pos:column="61">.</op:operator><call><name pos:line="1803" pos:column="62">FirstOrDefault</name><argument_list pos:line="1803" pos:column="76">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1806" pos:column="9">[<expr><name pos:line="1806" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1807" pos:column="9">public</specifier> <name pos:line="1807" pos:column="16">void</name></type> <name pos:line="1807" pos:column="21">TestVariableDeclaredInCallingObjectWithParentClass</name><parameter_list pos:line="1807" pos:column="71">()</parameter_list> <block pos:line="1807" pos:column="74">{
            <comment type="line" pos:line="1808" pos:column="13">//class A { B b; }</comment>
            <decl_stmt><decl><type><name pos:line="1809" pos:column="13">string</name></type> <name pos:line="1809" pos:column="20">a_xml</name> <init pos:line="1809" pos:column="26">= <expr><lit:literal type="string" pos:line="1809" pos:column="28">@"&lt;class pos:line=""1"" pos:column="&gt;class &lt;name pos:line=""1"" pos:column="&gt;A&lt;/name&gt; &lt;block pos:line=""1"" pos:column="&gt;{ &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""1"" pos:column=""&gt;B&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""1"" pos:column=""&gt;b&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt; }&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="1811" pos:column="13">//class B { void Foo() { } }</comment>
            <decl_stmt><decl><type><name pos:line="1812" pos:column="13">string</name></type> <name pos:line="1812" pos:column="20">b_xml</name> <init pos:line="1812" pos:column="26">= <expr><lit:literal type="string" pos:line="1812" pos:column="28">@"&lt;class pos:line=""1"" pos:column="&gt;class &lt;name pos:line=""1"" pos:column="&gt;B&lt;/name&gt; &lt;block pos:line=""1"" pos:column="&gt;{ &lt;function&gt;&lt;type&gt;&lt;name pos:line=""1"" pos:column=""&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""1"" pos:column=""&gt;Foo&lt;/name&gt;&lt;parameter_list pos:line=""1"" pos:column=""&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""1"" pos:column=""&gt;{ }&lt;/block&gt;&lt;/function&gt; }&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="1814" pos:column="13">//class C : A { }</comment>
            <decl_stmt><decl><type><name pos:line="1815" pos:column="13">string</name></type> <name pos:line="1815" pos:column="20">c_xml</name> <init pos:line="1815" pos:column="26">= <expr><lit:literal type="string" pos:line="1815" pos:column="28">@"&lt;class pos:line=""1"" pos:column="&gt;class &lt;name pos:line=""1"" pos:column="&gt;C&lt;/name&gt; &lt;super pos:line=""1"" pos:column="&gt;: &lt;name pos:line=""1"" pos:column=""&gt;A&lt;/name&gt;&lt;/super&gt; &lt;block pos:line=""1"" pos:column=""&gt;{ }&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="1817" pos:column="13">//class D {</comment>
            <comment type="line" pos:line="1818" pos:column="13">//	C c;</comment>
            <comment type="line" pos:line="1819" pos:column="13">//	void Bar() { c.b.Foo(); }</comment>
            <comment type="line" pos:line="1820" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="1821" pos:column="13">string</name></type> <name pos:line="1821" pos:column="20">d_xml</name> <init pos:line="1821" pos:column="26">= <expr><lit:literal type="string" pos:line="1821" pos:column="28">@"&lt;class pos:line=""1"" pos:column="&gt;class &lt;name pos:line=""1"" pos:column="&gt;D&lt;/name&gt; &lt;block pos:line=""1"" pos:column="&gt;{
    &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""2"" pos:column="&gt;C&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""2"" pos:column="&gt;c&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
    &lt;function&gt;&lt;type&gt;&lt;name pos:line=""3"" pos:column="&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""3"" pos:column=""&gt;Bar&lt;/name&gt;&lt;parameter_list pos:line=""3"" pos:column=""&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""3"" pos:column=""&gt;{ &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;&lt;name pos:line=""3"" pos:column=""&gt;c&lt;/name&gt;&lt;op:operator pos:line=""3"" pos:column=""&gt;.&lt;/op:operator&gt;&lt;name pos:line=""3"" pos:column=""&gt;b&lt;/name&gt;&lt;op:operator pos:line=""3"" pos:column=""&gt;.&lt;/op:operator&gt;&lt;name pos:line=""3"" pos:column=""&gt;Foo&lt;/name&gt;&lt;/name&gt;&lt;argument_list pos:line=""3"" pos:column=""&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt; }&lt;/block&gt;&lt;/function&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1826" pos:column="13">var</name></type> <name pos:line="1826" pos:column="17">aUnit</name> <init pos:line="1826" pos:column="23">= <expr><call><name><name pos:line="1826" pos:column="25">fileSetup</name><op:operator pos:line="1826" pos:column="34">.</op:operator><name pos:line="1826" pos:column="35">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1826" pos:column="59">(<argument><expr><name pos:line="1826" pos:column="60">a_xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1826" pos:column="67">"A.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1827" pos:column="13">var</name></type> <name pos:line="1827" pos:column="17">bUnit</name> <init pos:line="1827" pos:column="23">= <expr><call><name><name pos:line="1827" pos:column="25">fileSetup</name><op:operator pos:line="1827" pos:column="34">.</op:operator><name pos:line="1827" pos:column="35">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1827" pos:column="59">(<argument><expr><name pos:line="1827" pos:column="60">b_xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1827" pos:column="67">"B.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1828" pos:column="13">var</name></type> <name pos:line="1828" pos:column="17">cUnit</name> <init pos:line="1828" pos:column="23">= <expr><call><name><name pos:line="1828" pos:column="25">fileSetup</name><op:operator pos:line="1828" pos:column="34">.</op:operator><name pos:line="1828" pos:column="35">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1828" pos:column="59">(<argument><expr><name pos:line="1828" pos:column="60">c_xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1828" pos:column="67">"C.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1829" pos:column="13">var</name></type> <name pos:line="1829" pos:column="17">dUnit</name> <init pos:line="1829" pos:column="23">= <expr><call><name><name pos:line="1829" pos:column="25">fileSetup</name><op:operator pos:line="1829" pos:column="34">.</op:operator><name pos:line="1829" pos:column="35">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1829" pos:column="59">(<argument><expr><name pos:line="1829" pos:column="60">d_xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1829" pos:column="67">"D.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1831" pos:column="13">var</name></type> <name pos:line="1831" pos:column="17">globalScope</name> <init pos:line="1831" pos:column="29">= <expr><call><name><name pos:line="1831" pos:column="31">codeParser</name><op:operator pos:line="1831" pos:column="41">.</op:operator><name pos:line="1831" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="1831" pos:column="55">(<argument><expr><name pos:line="1831" pos:column="56">aUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="1832" pos:column="13">globalScope</name> <op:operator pos:line="1832" pos:column="25">=</op:operator> <call><name><name pos:line="1832" pos:column="27">globalScope</name><op:operator pos:line="1832" pos:column="38">.</op:operator><name pos:line="1832" pos:column="39">Merge</name></name><argument_list pos:line="1832" pos:column="44">(<argument><expr><call><name><name pos:line="1832" pos:column="45">codeParser</name><op:operator pos:line="1832" pos:column="55">.</op:operator><name pos:line="1832" pos:column="56">ParseFileUnit</name></name><argument_list pos:line="1832" pos:column="69">(<argument><expr><name pos:line="1832" pos:column="70">bUnit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="1833" pos:column="13">globalScope</name> <op:operator pos:line="1833" pos:column="25">=</op:operator> <call><name><name pos:line="1833" pos:column="27">globalScope</name><op:operator pos:line="1833" pos:column="38">.</op:operator><name pos:line="1833" pos:column="39">Merge</name></name><argument_list pos:line="1833" pos:column="44">(<argument><expr><call><name><name pos:line="1833" pos:column="45">codeParser</name><op:operator pos:line="1833" pos:column="55">.</op:operator><name pos:line="1833" pos:column="56">ParseFileUnit</name></name><argument_list pos:line="1833" pos:column="69">(<argument><expr><name pos:line="1833" pos:column="70">cUnit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="1834" pos:column="13">globalScope</name> <op:operator pos:line="1834" pos:column="25">=</op:operator> <call><name><name pos:line="1834" pos:column="27">globalScope</name><op:operator pos:line="1834" pos:column="38">.</op:operator><name pos:line="1834" pos:column="39">Merge</name></name><argument_list pos:line="1834" pos:column="44">(<argument><expr><call><name><name pos:line="1834" pos:column="45">codeParser</name><op:operator pos:line="1834" pos:column="55">.</op:operator><name pos:line="1834" pos:column="56">ParseFileUnit</name></name><argument_list pos:line="1834" pos:column="69">(<argument><expr><name pos:line="1834" pos:column="70">dUnit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1836" pos:column="13">var</name></type> <name pos:line="1836" pos:column="17">typeA</name> <init pos:line="1836" pos:column="23">= <expr><call><name><name pos:line="1836" pos:column="25">globalScope</name><op:operator pos:line="1836" pos:column="36">.</op:operator><name><name pos:line="1836" pos:column="37">GetNamedChildren</name><argument_list pos:line="1836" pos:column="53">&lt;<argument><name pos:line="1836" pos:column="54">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1836" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="1836" pos:column="70">"A"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1836" pos:column="74">.</op:operator><call><name pos:line="1836" pos:column="75">FirstOrDefault</name><argument_list pos:line="1836" pos:column="89">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1837" pos:column="13">var</name></type> <name pos:line="1837" pos:column="17">typeB</name> <init pos:line="1837" pos:column="23">= <expr><call><name><name pos:line="1837" pos:column="25">globalScope</name><op:operator pos:line="1837" pos:column="36">.</op:operator><name><name pos:line="1837" pos:column="37">GetNamedChildren</name><argument_list pos:line="1837" pos:column="53">&lt;<argument><name pos:line="1837" pos:column="54">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1837" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="1837" pos:column="70">"B"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1837" pos:column="74">.</op:operator><call><name pos:line="1837" pos:column="75">FirstOrDefault</name><argument_list pos:line="1837" pos:column="89">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1838" pos:column="13">var</name></type> <name pos:line="1838" pos:column="17">typeC</name> <init pos:line="1838" pos:column="23">= <expr><call><name><name pos:line="1838" pos:column="25">globalScope</name><op:operator pos:line="1838" pos:column="36">.</op:operator><name><name pos:line="1838" pos:column="37">GetNamedChildren</name><argument_list pos:line="1838" pos:column="53">&lt;<argument><name pos:line="1838" pos:column="54">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1838" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="1838" pos:column="70">"C"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1838" pos:column="74">.</op:operator><call><name pos:line="1838" pos:column="75">FirstOrDefault</name><argument_list pos:line="1838" pos:column="89">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1839" pos:column="13">var</name></type> <name pos:line="1839" pos:column="17">typeD</name> <init pos:line="1839" pos:column="23">= <expr><call><name><name pos:line="1839" pos:column="25">globalScope</name><op:operator pos:line="1839" pos:column="36">.</op:operator><name><name pos:line="1839" pos:column="37">GetNamedChildren</name><argument_list pos:line="1839" pos:column="53">&lt;<argument><name pos:line="1839" pos:column="54">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1839" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="1839" pos:column="70">"D"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1839" pos:column="74">.</op:operator><call><name pos:line="1839" pos:column="75">FirstOrDefault</name><argument_list pos:line="1839" pos:column="89">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="1841" pos:column="13">Assert</name><op:operator pos:line="1841" pos:column="19">.</op:operator><name pos:line="1841" pos:column="20">IsNotNull</name></name><argument_list pos:line="1841" pos:column="29">(<argument><expr><name pos:line="1841" pos:column="30">typeA</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1841" pos:column="37">"could not find class A"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1842" pos:column="13">Assert</name><op:operator pos:line="1842" pos:column="19">.</op:operator><name pos:line="1842" pos:column="20">IsNotNull</name></name><argument_list pos:line="1842" pos:column="29">(<argument><expr><name pos:line="1842" pos:column="30">typeB</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1842" pos:column="37">"could not find class B"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1843" pos:column="13">Assert</name><op:operator pos:line="1843" pos:column="19">.</op:operator><name pos:line="1843" pos:column="20">IsNotNull</name></name><argument_list pos:line="1843" pos:column="29">(<argument><expr><name pos:line="1843" pos:column="30">typeC</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1843" pos:column="37">"could not find class C"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1844" pos:column="13">Assert</name><op:operator pos:line="1844" pos:column="19">.</op:operator><name pos:line="1844" pos:column="20">IsNotNull</name></name><argument_list pos:line="1844" pos:column="29">(<argument><expr><name pos:line="1844" pos:column="30">typeD</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1844" pos:column="37">"could not find class D"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1846" pos:column="13">var</name></type> <name pos:line="1846" pos:column="17">adotB</name> <init pos:line="1846" pos:column="23">= <expr><call><name><name pos:line="1846" pos:column="25">typeA</name><op:operator pos:line="1846" pos:column="30">.</op:operator><name><name pos:line="1846" pos:column="31">GetNamedChildren</name><argument_list pos:line="1846" pos:column="47">&lt;<argument><name pos:line="1846" pos:column="48">VariableDeclaration</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1846" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="1846" pos:column="69">"b"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1846" pos:column="73">.</op:operator><call><name pos:line="1846" pos:column="74">FirstOrDefault</name><argument_list pos:line="1846" pos:column="88">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1847" pos:column="13">Assert</name><op:operator pos:line="1847" pos:column="19">.</op:operator><name pos:line="1847" pos:column="20">IsNotNull</name></name><argument_list pos:line="1847" pos:column="29">(<argument><expr><name pos:line="1847" pos:column="30">adotB</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1847" pos:column="37">"could not find variable A.b"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1848" pos:column="13">Assert</name><op:operator pos:line="1848" pos:column="19">.</op:operator><name pos:line="1848" pos:column="20">AreEqual</name></name><argument_list pos:line="1848" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1848" pos:column="29">"b"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1848" pos:column="34">adotB</name><op:operator pos:line="1848" pos:column="39">.</op:operator><name pos:line="1848" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1850" pos:column="13">var</name></type> <name pos:line="1850" pos:column="17">bDotFoo</name> <init pos:line="1850" pos:column="25">= <expr><call><name><name pos:line="1850" pos:column="27">typeB</name><op:operator pos:line="1850" pos:column="32">.</op:operator><name><name pos:line="1850" pos:column="33">GetNamedChildren</name><argument_list pos:line="1850" pos:column="49">&lt;<argument><name pos:line="1850" pos:column="50">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1850" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="1850" pos:column="68">"Foo"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1850" pos:column="74">.</op:operator><call><name pos:line="1850" pos:column="75">FirstOrDefault</name><argument_list pos:line="1850" pos:column="89">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1851" pos:column="13">Assert</name><op:operator pos:line="1851" pos:column="19">.</op:operator><name pos:line="1851" pos:column="20">IsNotNull</name></name><argument_list pos:line="1851" pos:column="29">(<argument><expr><name pos:line="1851" pos:column="30">bDotFoo</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1851" pos:column="39">"could not method B.Foo()"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1853" pos:column="13">var</name></type> <name pos:line="1853" pos:column="17">dDotBar</name> <init pos:line="1853" pos:column="25">= <expr><call><name><name pos:line="1853" pos:column="27">typeD</name><op:operator pos:line="1853" pos:column="32">.</op:operator><name><name pos:line="1853" pos:column="33">GetNamedChildren</name><argument_list pos:line="1853" pos:column="49">&lt;<argument><name pos:line="1853" pos:column="50">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1853" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="1853" pos:column="68">"Bar"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1853" pos:column="74">.</op:operator><call><name pos:line="1853" pos:column="75">FirstOrDefault</name><argument_list pos:line="1853" pos:column="89">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1854" pos:column="13">Assert</name><op:operator pos:line="1854" pos:column="19">.</op:operator><name pos:line="1854" pos:column="20">IsNotNull</name></name><argument_list pos:line="1854" pos:column="29">(<argument><expr><name pos:line="1854" pos:column="30">dDotBar</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1854" pos:column="39">"could not find method D.Bar()"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1856" pos:column="13">var</name></type> <name pos:line="1856" pos:column="17">callToFoo</name> <init pos:line="1856" pos:column="27">= <expr><call><name><name pos:line="1856" pos:column="29">dDotBar</name><op:operator pos:line="1856" pos:column="36">.</op:operator><name><name pos:line="1856" pos:column="37">FindExpressions</name><argument_list pos:line="1856" pos:column="52">&lt;<argument><name pos:line="1856" pos:column="53">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1856" pos:column="64">(<argument><expr><lit:literal type="boolean" pos:line="1856" pos:column="65">true</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1856" pos:column="70">.</op:operator><call><name pos:line="1856" pos:column="71">FirstOrDefault</name><argument_list pos:line="1856" pos:column="85">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1857" pos:column="13">Assert</name><op:operator pos:line="1857" pos:column="19">.</op:operator><name pos:line="1857" pos:column="20">IsNotNull</name></name><argument_list pos:line="1857" pos:column="29">(<argument><expr><name pos:line="1857" pos:column="30">callToFoo</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1857" pos:column="41">"could not find any method calls in D.Bar()"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="1859" pos:column="13">Assert</name><op:operator pos:line="1859" pos:column="19">.</op:operator><name pos:line="1859" pos:column="20">AreEqual</name></name><argument_list pos:line="1859" pos:column="28">(<argument><expr><name pos:line="1859" pos:column="29">bDotFoo</name></expr></argument>, <argument><expr><call><name><name pos:line="1859" pos:column="38">callToFoo</name><op:operator pos:line="1859" pos:column="47">.</op:operator><name pos:line="1859" pos:column="48">FindMatches</name></name><argument_list pos:line="1859" pos:column="59">()</argument_list></call><op:operator pos:line="1859" pos:column="61">.</op:operator><call><name pos:line="1859" pos:column="62">FirstOrDefault</name><argument_list pos:line="1859" pos:column="76">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1862" pos:column="9">[<expr><name pos:line="1862" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1863" pos:column="9">public</specifier> <name pos:line="1863" pos:column="16">void</name></type> <name pos:line="1863" pos:column="21">TestResolveArrayVariable_Property</name><parameter_list pos:line="1863" pos:column="54">()</parameter_list> <block pos:line="1863" pos:column="57">{
            <comment type="line" pos:line="1864" pos:column="13">//class Foo {</comment>
            <comment type="line" pos:line="1865" pos:column="13">//  Collection&lt;int&gt; Parameters { get; set; }</comment>
            <comment type="line" pos:line="1866" pos:column="13">//  void DoWork() {</comment>
            <comment type="line" pos:line="1867" pos:column="13">//    printf(Parameters[0]);</comment>
            <comment type="line" pos:line="1868" pos:column="13">//  }</comment>
            <comment type="line" pos:line="1869" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="1870" pos:column="13">string</name></type> <name pos:line="1870" pos:column="20">xml</name> <init pos:line="1870" pos:column="24">= <expr><lit:literal type="string" pos:line="1870" pos:column="26">@"&lt;class&gt;class &lt;name&gt;Foo&lt;/name&gt; &lt;block&gt;{
  &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;&lt;name&gt;Collection&lt;/name&gt;&lt;argument_list&gt;&amp;lt;&lt;argument&gt;&lt;name&gt;int&lt;/name&gt;&lt;/argument&gt;&amp;gt;&lt;/argument_list&gt;&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Parameters&lt;/name&gt; &lt;block&gt;{ &lt;function_decl&gt;&lt;name&gt;get&lt;/name&gt;;&lt;/function_decl&gt; &lt;function_decl&gt;&lt;name&gt;set&lt;/name&gt;;&lt;/function_decl&gt; }&lt;/block&gt;&lt;/decl&gt;&lt;/decl_stmt&gt;
  &lt;function&gt;&lt;type&gt;&lt;name&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name&gt;DoWork&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{
    &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;printf&lt;/name&gt;&lt;argument_list&gt;(&lt;argument&gt;&lt;expr&gt;&lt;name&gt;&lt;name&gt;Parameters&lt;/name&gt;&lt;index&gt;[&lt;expr&gt;&lt;lit:literal type=""number&gt;0&lt;/lit:literal&gt;&lt;/expr&gt;]&lt;/index&gt;&lt;/name&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
  }&lt;/block&gt;&lt;/function&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1876" pos:column="13">XElement</name></type> <name pos:line="1876" pos:column="22">xmlElement</name> <init pos:line="1876" pos:column="33">= <expr><call><name><name pos:line="1876" pos:column="35">fileSetup</name><op:operator pos:line="1876" pos:column="44">.</op:operator><name pos:line="1876" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1876" pos:column="69">(<argument><expr><name pos:line="1876" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1876" pos:column="75">"A.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1878" pos:column="13">var</name></type> <name pos:line="1878" pos:column="17">globalScope</name> <init pos:line="1878" pos:column="29">= <expr><call><name><name pos:line="1878" pos:column="31">codeParser</name><op:operator pos:line="1878" pos:column="41">.</op:operator><name pos:line="1878" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="1878" pos:column="55">(<argument><expr><name pos:line="1878" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1879" pos:column="13">var</name></type> <name pos:line="1879" pos:column="17">paramDecl</name> <init pos:line="1879" pos:column="27">= <expr><call><name><name pos:line="1879" pos:column="29">globalScope</name><op:operator pos:line="1879" pos:column="40">.</op:operator><name><name pos:line="1879" pos:column="41">GetDescendants</name><argument_list pos:line="1879" pos:column="55">&lt;<argument><name pos:line="1879" pos:column="56">PropertyDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1879" pos:column="75">()</argument_list></call><op:operator pos:line="1879" pos:column="77">.</op:operator><call><name pos:line="1879" pos:column="78">First</name><argument_list pos:line="1879" pos:column="83">(<argument><expr><lambda><name pos:line="1879" pos:column="84">p</name> <op:operator pos:line="1879" pos:column="86">=&gt;</op:operator> <name><name pos:line="1879" pos:column="89">p</name><op:operator pos:line="1879" pos:column="90">.</op:operator><name pos:line="1879" pos:column="91">Name</name></name> <op:operator pos:line="1879" pos:column="96">==</op:operator> <lit:literal type="string" pos:line="1879" pos:column="99">"Parameters"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1880" pos:column="13">Assert</name><op:operator pos:line="1880" pos:column="19">.</op:operator><name pos:line="1880" pos:column="20">IsNotNull</name></name><argument_list pos:line="1880" pos:column="29">(<argument><expr><name pos:line="1880" pos:column="30">paramDecl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="1881" pos:column="13">var</name></type> <name pos:line="1881" pos:column="17">doWork</name> <init pos:line="1881" pos:column="24">= <expr><call><name><name pos:line="1881" pos:column="26">globalScope</name><op:operator pos:line="1881" pos:column="37">.</op:operator><name><name pos:line="1881" pos:column="38">GetDescendants</name><argument_list pos:line="1881" pos:column="52">&lt;<argument><name pos:line="1881" pos:column="53">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1881" pos:column="70">()</argument_list></call><op:operator pos:line="1881" pos:column="72">.</op:operator><call><name pos:line="1881" pos:column="73">First</name><argument_list pos:line="1881" pos:column="78">(<argument><expr><lambda><name pos:line="1881" pos:column="79">m</name> <op:operator pos:line="1881" pos:column="81">=&gt;</op:operator> <name><name pos:line="1881" pos:column="84">m</name><op:operator pos:line="1881" pos:column="85">.</op:operator><name pos:line="1881" pos:column="86">Name</name></name> <op:operator pos:line="1881" pos:column="91">==</op:operator> <lit:literal type="string" pos:line="1881" pos:column="94">"DoWork"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1882" pos:column="13">Assert</name><op:operator pos:line="1882" pos:column="19">.</op:operator><name pos:line="1882" pos:column="20">AreEqual</name></name><argument_list pos:line="1882" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1882" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1882" pos:column="32">doWork</name><op:operator pos:line="1882" pos:column="38">.</op:operator><name pos:line="1882" pos:column="39">ChildStatements</name><op:operator pos:line="1882" pos:column="54">.</op:operator><name pos:line="1882" pos:column="55">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="1883" pos:column="13">var</name></type> <name pos:line="1883" pos:column="17">paramUse</name> <init pos:line="1883" pos:column="26">= <expr><name><name pos:line="1883" pos:column="28">doWork</name><op:operator pos:line="1883" pos:column="34">.</op:operator><name pos:line="1883" pos:column="35">ChildStatements</name><index pos:line="1883" pos:column="50">[<expr><lit:literal type="number" pos:line="1883" pos:column="51">0</lit:literal></expr>]</index></name><op:operator pos:line="1883" pos:column="53">.</op:operator><call><name><name pos:line="1883" pos:column="54">Content</name><op:operator pos:line="1883" pos:column="61">.</op:operator><name><name pos:line="1883" pos:column="62">GetDescendantsAndSelf</name><argument_list pos:line="1883" pos:column="83">&lt;<argument><name pos:line="1883" pos:column="84">NameUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1883" pos:column="92">()</argument_list></call><op:operator pos:line="1883" pos:column="94">.</op:operator><call><name pos:line="1883" pos:column="95">FirstOrDefault</name><argument_list pos:line="1883" pos:column="109">(<argument><expr><lambda><name pos:line="1883" pos:column="110">n</name> <op:operator pos:line="1883" pos:column="112">=&gt;</op:operator> <name><name pos:line="1883" pos:column="115">n</name><op:operator pos:line="1883" pos:column="116">.</op:operator><name pos:line="1883" pos:column="117">Name</name></name> <op:operator pos:line="1883" pos:column="122">==</op:operator> <lit:literal type="string" pos:line="1883" pos:column="125">"Parameters"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1884" pos:column="13">Assert</name><op:operator pos:line="1884" pos:column="19">.</op:operator><name pos:line="1884" pos:column="20">IsNotNull</name></name><argument_list pos:line="1884" pos:column="29">(<argument><expr><name pos:line="1884" pos:column="30">paramUse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1885" pos:column="13">Assert</name><op:operator pos:line="1885" pos:column="19">.</op:operator><name pos:line="1885" pos:column="20">AreSame</name></name><argument_list pos:line="1885" pos:column="27">(<argument><expr><name pos:line="1885" pos:column="28">paramDecl</name></expr></argument>, <argument><expr><call><name><name pos:line="1885" pos:column="39">paramUse</name><op:operator pos:line="1885" pos:column="47">.</op:operator><name pos:line="1885" pos:column="48">FindMatches</name></name><argument_list pos:line="1885" pos:column="59">()</argument_list></call><op:operator pos:line="1885" pos:column="61">.</op:operator><call><name pos:line="1885" pos:column="62">FirstOrDefault</name><argument_list pos:line="1885" pos:column="76">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1888" pos:column="9">[<expr><name pos:line="1888" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1889" pos:column="9">public</specifier> <name pos:line="1889" pos:column="16">void</name></type> <name pos:line="1889" pos:column="21">TestTypeUseForOtherNamespace</name><parameter_list pos:line="1889" pos:column="49">()</parameter_list> <block pos:line="1889" pos:column="52">{
            <comment type="line" pos:line="1890" pos:column="13">//namespace A.B {</comment>
            <comment type="line" pos:line="1891" pos:column="13">//    class C {</comment>
            <comment type="line" pos:line="1892" pos:column="13">//        int Foo() { }</comment>
            <comment type="line" pos:line="1893" pos:column="13">//    }</comment>
            <comment type="line" pos:line="1894" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="1895" pos:column="13">string</name></type> <name pos:line="1895" pos:column="20">c_xml</name> <init pos:line="1895" pos:column="26">= <expr><lit:literal type="string" pos:line="1895" pos:column="28">@"&lt;namespace pos:line=""1"" pos:column="&gt;namespace &lt;name&gt;&lt;name pos:line=""1"" pos:column=""&gt;A&lt;/name&gt;&lt;op:operator pos:line=""1"" pos:column=""&gt;.&lt;/op:operator&gt;&lt;name pos:line=""1"" pos:column=""&gt;B&lt;/name&gt;&lt;/name&gt; &lt;block pos:line=""1"" pos:column=""&gt;{
    &lt;class pos:line=""2"" pos:column="&gt;class &lt;name pos:line=""2"" pos:column=""&gt;C&lt;/name&gt; &lt;block pos:line=""2"" pos:column=""&gt;{
        &lt;function&gt;&lt;type&gt;&lt;name pos:line=""3"" pos:column="&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""3"" pos:column=""&gt;Foo&lt;/name&gt;&lt;parameter_list pos:line=""3"" pos:column=""&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""3"" pos:column=""&gt;{ }&lt;/block&gt;&lt;/function&gt;
    }&lt;/block&gt;&lt;/class&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="1901" pos:column="13">//using A.B;</comment>
            <comment type="line" pos:line="1902" pos:column="13">//namespace D {</comment>
            <comment type="line" pos:line="1903" pos:column="13">//    class E {</comment>
            <comment type="line" pos:line="1904" pos:column="13">//        void main() {</comment>
            <comment type="line" pos:line="1905" pos:column="13">//            C c = new C();</comment>
            <comment type="line" pos:line="1906" pos:column="13">//            c.Foo();</comment>
            <comment type="line" pos:line="1907" pos:column="13">//        }</comment>
            <comment type="line" pos:line="1908" pos:column="13">//    }</comment>
            <comment type="line" pos:line="1909" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="1910" pos:column="13">string</name></type> <name pos:line="1910" pos:column="20">e_xml</name> <init pos:line="1910" pos:column="26">= <expr><lit:literal type="string" pos:line="1910" pos:column="28">@"&lt;using pos:line=""1"" pos:column="&gt;using &lt;name&gt;&lt;name pos:line=""1"" pos:column="&gt;A&lt;/name&gt;&lt;op:operator pos:line=""1"" pos:column="&gt;.&lt;/op:operator&gt;&lt;name pos:line=""1"" pos:column="&gt;B&lt;/name&gt;&lt;/name&gt;;&lt;/using&gt;
&lt;namespace pos:line=""2"" pos:column="&gt;namespace &lt;name pos:line=""2"" pos:column=""&gt;D&lt;/name&gt; &lt;block pos:line=""2"" pos:column=""&gt;{
    &lt;class pos:line=""3"" pos:column="&gt;class &lt;name pos:line=""3"" pos:column=""&gt;E&lt;/name&gt; &lt;block pos:line=""3"" pos:column=""&gt;{
        &lt;function&gt;&lt;type&gt;&lt;name pos:line=""4"" pos:column="&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""4"" pos:column=""&gt;main&lt;/name&gt;&lt;parameter_list pos:line=""4"" pos:column=""&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""4"" pos:column=""&gt;{
            &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""5"" pos:column=""&gt;C&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""5"" pos:column=""&gt;c&lt;/name&gt; &lt;init pos:line=""5"" pos:column=""&gt;= &lt;expr&gt;&lt;op:operator pos:line=""5"" pos:column=""&gt;new&lt;/op:operator&gt; &lt;call&gt;&lt;name pos:line=""5"" pos:column=""&gt;C&lt;/name&gt;&lt;argument_list pos:line=""5"" pos:column=""&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;&lt;/init&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
            &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;&lt;name pos:line=""6"" pos:column=""&gt;c&lt;/name&gt;&lt;op:operator pos:line=""6"" pos:column=""&gt;.&lt;/op:operator&gt;&lt;name pos:line=""6"" pos:column=""&gt;Foo&lt;/name&gt;&lt;/name&gt;&lt;argument_list pos:line=""6"" pos:column=""&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
        }&lt;/block&gt;&lt;/function&gt;
    }&lt;/block&gt;&lt;/class&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1920" pos:column="13">var</name></type> <name pos:line="1920" pos:column="17">cUnit</name> <init pos:line="1920" pos:column="23">= <expr><call><name><name pos:line="1920" pos:column="25">fileSetup</name><op:operator pos:line="1920" pos:column="34">.</op:operator><name pos:line="1920" pos:column="35">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1920" pos:column="59">(<argument><expr><name pos:line="1920" pos:column="60">c_xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1920" pos:column="67">"C.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1921" pos:column="13">var</name></type> <name pos:line="1921" pos:column="17">eUnit</name> <init pos:line="1921" pos:column="23">= <expr><call><name><name pos:line="1921" pos:column="25">fileSetup</name><op:operator pos:line="1921" pos:column="34">.</op:operator><name pos:line="1921" pos:column="35">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1921" pos:column="59">(<argument><expr><name pos:line="1921" pos:column="60">e_xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1921" pos:column="67">"E.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1923" pos:column="13">NamespaceDefinition</name></type> <name pos:line="1923" pos:column="33">globalScope</name> <init pos:line="1923" pos:column="45">= <expr><call><name><name pos:line="1923" pos:column="47">codeParser</name><op:operator pos:line="1923" pos:column="57">.</op:operator><name pos:line="1923" pos:column="58">ParseFileUnit</name></name><argument_list pos:line="1923" pos:column="71">(<argument><expr><name pos:line="1923" pos:column="72">cUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="1924" pos:column="13">globalScope</name> <op:operator pos:line="1924" pos:column="25">=</op:operator> <call><name><name pos:line="1924" pos:column="27">globalScope</name><op:operator pos:line="1924" pos:column="38">.</op:operator><name pos:line="1924" pos:column="39">Merge</name></name><argument_list pos:line="1924" pos:column="44">(<argument><expr><call><name><name pos:line="1924" pos:column="45">codeParser</name><op:operator pos:line="1924" pos:column="55">.</op:operator><name pos:line="1924" pos:column="56">ParseFileUnit</name></name><argument_list pos:line="1924" pos:column="69">(<argument><expr><name pos:line="1924" pos:column="70">eUnit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="1924" pos:column="78">as</op:operator> <name pos:line="1924" pos:column="81">NamespaceDefinition</name></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1926" pos:column="13">var</name></type> <name pos:line="1926" pos:column="17">typeC</name> <init pos:line="1926" pos:column="23">= <expr><call><name><name pos:line="1926" pos:column="25">globalScope</name><op:operator pos:line="1926" pos:column="36">.</op:operator><name><name pos:line="1926" pos:column="37">GetDescendants</name><argument_list pos:line="1926" pos:column="51">&lt;<argument><name pos:line="1926" pos:column="52">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1926" pos:column="67">()</argument_list></call><op:operator pos:line="1926" pos:column="69">.</op:operator><call><name pos:line="1926" pos:column="70">Where</name><argument_list pos:line="1926" pos:column="75">(<argument><expr><lambda><name pos:line="1926" pos:column="76">t</name> <op:operator pos:line="1926" pos:column="78">=&gt;</op:operator> <name><name pos:line="1926" pos:column="81">t</name><op:operator pos:line="1926" pos:column="82">.</op:operator><name pos:line="1926" pos:column="83">Name</name></name> <op:operator pos:line="1926" pos:column="88">==</op:operator> <lit:literal type="string" pos:line="1926" pos:column="91">"C"</lit:literal></lambda></expr></argument>)</argument_list></call><op:operator pos:line="1926" pos:column="95">.</op:operator><call><name pos:line="1926" pos:column="96">FirstOrDefault</name><argument_list pos:line="1926" pos:column="110">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1927" pos:column="13">var</name></type> <name pos:line="1927" pos:column="17">typeE</name> <init pos:line="1927" pos:column="23">= <expr><call><name><name pos:line="1927" pos:column="25">globalScope</name><op:operator pos:line="1927" pos:column="36">.</op:operator><name><name pos:line="1927" pos:column="37">GetDescendants</name><argument_list pos:line="1927" pos:column="51">&lt;<argument><name pos:line="1927" pos:column="52">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1927" pos:column="67">()</argument_list></call><op:operator pos:line="1927" pos:column="69">.</op:operator><call><name pos:line="1927" pos:column="70">Where</name><argument_list pos:line="1927" pos:column="75">(<argument><expr><lambda><name pos:line="1927" pos:column="76">t</name> <op:operator pos:line="1927" pos:column="78">=&gt;</op:operator> <name><name pos:line="1927" pos:column="81">t</name><op:operator pos:line="1927" pos:column="82">.</op:operator><name pos:line="1927" pos:column="83">Name</name></name> <op:operator pos:line="1927" pos:column="88">==</op:operator> <lit:literal type="string" pos:line="1927" pos:column="91">"E"</lit:literal></lambda></expr></argument>)</argument_list></call><op:operator pos:line="1927" pos:column="95">.</op:operator><call><name pos:line="1927" pos:column="96">FirstOrDefault</name><argument_list pos:line="1927" pos:column="110">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1929" pos:column="13">var</name></type> <name pos:line="1929" pos:column="17">mainMethod</name> <init pos:line="1929" pos:column="28">= <expr><call><name><name pos:line="1929" pos:column="30">typeE</name><op:operator pos:line="1929" pos:column="35">.</op:operator><name pos:line="1929" pos:column="36">ChildStatements</name><op:operator pos:line="1929" pos:column="51">.</op:operator><name pos:line="1929" pos:column="52">First</name></name><argument_list pos:line="1929" pos:column="57">()</argument_list></call> <op:operator pos:line="1929" pos:column="60">as</op:operator> <name pos:line="1929" pos:column="63">MethodDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1930" pos:column="13">Assert</name><op:operator pos:line="1930" pos:column="19">.</op:operator><name pos:line="1930" pos:column="20">IsNotNull</name></name><argument_list pos:line="1930" pos:column="29">(<argument><expr><name pos:line="1930" pos:column="30">mainMethod</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1930" pos:column="42">"is not a method definition"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1931" pos:column="13">Assert</name><op:operator pos:line="1931" pos:column="19">.</op:operator><name pos:line="1931" pos:column="20">AreEqual</name></name><argument_list pos:line="1931" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1931" pos:column="29">"main"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1931" pos:column="37">mainMethod</name><op:operator pos:line="1931" pos:column="47">.</op:operator><name pos:line="1931" pos:column="48">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1933" pos:column="13">var</name></type> <name pos:line="1933" pos:column="17">fooMethod</name> <init pos:line="1933" pos:column="27">= <expr><call><name><name pos:line="1933" pos:column="29">typeC</name><op:operator pos:line="1933" pos:column="34">.</op:operator><name><name pos:line="1933" pos:column="35">GetNamedChildren</name><argument_list pos:line="1933" pos:column="51">&lt;<argument><name pos:line="1933" pos:column="52">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1933" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="1933" pos:column="70">"Foo"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1933" pos:column="76">.</op:operator><call><name pos:line="1933" pos:column="77">FirstOrDefault</name><argument_list pos:line="1933" pos:column="91">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1934" pos:column="13">Assert</name><op:operator pos:line="1934" pos:column="19">.</op:operator><name pos:line="1934" pos:column="20">IsNotNull</name></name><argument_list pos:line="1934" pos:column="29">(<argument><expr><name pos:line="1934" pos:column="30">fooMethod</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1934" pos:column="41">"no method foo found"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1935" pos:column="13">Assert</name><op:operator pos:line="1935" pos:column="19">.</op:operator><name pos:line="1935" pos:column="20">AreEqual</name></name><argument_list pos:line="1935" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1935" pos:column="29">"Foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1935" pos:column="36">fooMethod</name><op:operator pos:line="1935" pos:column="45">.</op:operator><name pos:line="1935" pos:column="46">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1937" pos:column="13">var</name></type> <name pos:line="1937" pos:column="17">cDeclaration</name> <init pos:line="1937" pos:column="30">= <expr><call><name><name pos:line="1937" pos:column="32">mainMethod</name><op:operator pos:line="1937" pos:column="42">.</op:operator><name><name pos:line="1937" pos:column="43">FindExpressions</name><argument_list pos:line="1937" pos:column="58">&lt;<argument><name pos:line="1937" pos:column="59">VariableDeclaration</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1937" pos:column="79">(<argument><expr><lit:literal type="boolean" pos:line="1937" pos:column="80">true</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1937" pos:column="85">.</op:operator><call><name pos:line="1937" pos:column="86">FirstOrDefault</name><argument_list pos:line="1937" pos:column="100">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1938" pos:column="13">Assert</name><op:operator pos:line="1938" pos:column="19">.</op:operator><name pos:line="1938" pos:column="20">IsNotNull</name></name><argument_list pos:line="1938" pos:column="29">(<argument><expr><name pos:line="1938" pos:column="30">cDeclaration</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1938" pos:column="44">"No declaration found"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1939" pos:column="13">Assert</name><op:operator pos:line="1939" pos:column="19">.</op:operator><name pos:line="1939" pos:column="20">AreSame</name></name><argument_list pos:line="1939" pos:column="27">(<argument><expr><name pos:line="1939" pos:column="28">typeC</name></expr></argument>, <argument><expr><call><name><name pos:line="1939" pos:column="35">cDeclaration</name><op:operator pos:line="1939" pos:column="47">.</op:operator><name pos:line="1939" pos:column="48">VariableType</name><op:operator pos:line="1939" pos:column="60">.</op:operator><name pos:line="1939" pos:column="61">ResolveType</name></name><argument_list pos:line="1939" pos:column="72">()</argument_list></call><op:operator pos:line="1939" pos:column="74">.</op:operator><call><name pos:line="1939" pos:column="75">FirstOrDefault</name><argument_list pos:line="1939" pos:column="89">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1941" pos:column="13">var</name></type> <name pos:line="1941" pos:column="17">callToCConstructor</name> <init pos:line="1941" pos:column="36">= <expr><call><name><name pos:line="1941" pos:column="38">mainMethod</name><op:operator pos:line="1941" pos:column="48">.</op:operator><name><name pos:line="1941" pos:column="49">FindExpressions</name><argument_list pos:line="1941" pos:column="64">&lt;<argument><name pos:line="1941" pos:column="65">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1941" pos:column="76">(<argument><expr><lit:literal type="boolean" pos:line="1941" pos:column="77">true</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1941" pos:column="82">.</op:operator><call><name pos:line="1941" pos:column="83">First</name><argument_list pos:line="1941" pos:column="88">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1942" pos:column="13">var</name></type> <name pos:line="1942" pos:column="17">callToFoo</name> <init pos:line="1942" pos:column="27">= <expr><call><name><name pos:line="1942" pos:column="29">mainMethod</name><op:operator pos:line="1942" pos:column="39">.</op:operator><name><name pos:line="1942" pos:column="40">FindExpressions</name><argument_list pos:line="1942" pos:column="55">&lt;<argument><name pos:line="1942" pos:column="56">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1942" pos:column="67">(<argument><expr><lit:literal type="boolean" pos:line="1942" pos:column="68">true</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1942" pos:column="73">.</op:operator><call><name pos:line="1942" pos:column="74">Last</name><argument_list pos:line="1942" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="1944" pos:column="13">Assert</name><op:operator pos:line="1944" pos:column="19">.</op:operator><name pos:line="1944" pos:column="20">AreEqual</name></name><argument_list pos:line="1944" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1944" pos:column="29">"C"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1944" pos:column="34">callToCConstructor</name><op:operator pos:line="1944" pos:column="52">.</op:operator><name pos:line="1944" pos:column="53">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1945" pos:column="13">Assert</name><op:operator pos:line="1945" pos:column="19">.</op:operator><name pos:line="1945" pos:column="20">That</name></name><argument_list pos:line="1945" pos:column="24">(<argument><expr><name><name pos:line="1945" pos:column="25">callToCConstructor</name><op:operator pos:line="1945" pos:column="43">.</op:operator><name pos:line="1945" pos:column="44">IsConstructor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1946" pos:column="13">Assert</name><op:operator pos:line="1946" pos:column="19">.</op:operator><name pos:line="1946" pos:column="20">IsNull</name></name><argument_list pos:line="1946" pos:column="26">(<argument><expr><call><name><name pos:line="1946" pos:column="27">callToCConstructor</name><op:operator pos:line="1946" pos:column="45">.</op:operator><name pos:line="1946" pos:column="46">FindMatches</name></name><argument_list pos:line="1946" pos:column="57">()</argument_list></call><op:operator pos:line="1946" pos:column="59">.</op:operator><call><name pos:line="1946" pos:column="60">FirstOrDefault</name><argument_list pos:line="1946" pos:column="74">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="1948" pos:column="13">Assert</name><op:operator pos:line="1948" pos:column="19">.</op:operator><name pos:line="1948" pos:column="20">AreEqual</name></name><argument_list pos:line="1948" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1948" pos:column="29">"Foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1948" pos:column="36">callToFoo</name><op:operator pos:line="1948" pos:column="45">.</op:operator><name pos:line="1948" pos:column="46">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1949" pos:column="13">Assert</name><op:operator pos:line="1949" pos:column="19">.</op:operator><name pos:line="1949" pos:column="20">AreSame</name></name><argument_list pos:line="1949" pos:column="27">(<argument><expr><name pos:line="1949" pos:column="28">fooMethod</name></expr></argument>, <argument><expr><call><name><name pos:line="1949" pos:column="39">callToFoo</name><op:operator pos:line="1949" pos:column="48">.</op:operator><name pos:line="1949" pos:column="49">FindMatches</name></name><argument_list pos:line="1949" pos:column="60">()</argument_list></call><op:operator pos:line="1949" pos:column="62">.</op:operator><call><name pos:line="1949" pos:column="63">FirstOrDefault</name><argument_list pos:line="1949" pos:column="77">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1952" pos:column="9">[<expr><name pos:line="1952" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1953" pos:column="9">public</specifier> <name pos:line="1953" pos:column="16">void</name></type> <name pos:line="1953" pos:column="21">TestLockStatement</name><parameter_list pos:line="1953" pos:column="38">()</parameter_list> <block pos:line="1953" pos:column="41">{
            <comment type="line" pos:line="1954" pos:column="13">//lock(myVar) {</comment>
            <comment type="line" pos:line="1955" pos:column="13">//    myVar.DoFoo();</comment>
            <comment type="line" pos:line="1956" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="1957" pos:column="13">string</name></type> <name pos:line="1957" pos:column="20">xml</name> <init pos:line="1957" pos:column="24">= <expr><lit:literal type="string" pos:line="1957" pos:column="26">@"&lt;lock pos:line=""1"" pos:column="&gt;lock(&lt;expr&gt;&lt;name pos:line=""1"" pos:column="&gt;myVar&lt;/name&gt;&lt;/expr&gt;) &lt;block pos:line=""1"" pos:column=""&gt;{
    &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;&lt;name pos:line=""2"" pos:column="&gt;myVar&lt;/name&gt;&lt;op:operator pos:line=""2"" pos:column=""&gt;.&lt;/op:operator&gt;&lt;name pos:line=""2"" pos:column=""&gt;DoFoo&lt;/name&gt;&lt;/name&gt;&lt;argument_list pos:line=""2"" pos:column=""&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
}&lt;/block&gt;&lt;/lock&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1960" pos:column="13">var</name></type> <name pos:line="1960" pos:column="17">xmlElement</name> <init pos:line="1960" pos:column="28">= <expr><call><name><name pos:line="1960" pos:column="30">fileSetup</name><op:operator pos:line="1960" pos:column="39">.</op:operator><name pos:line="1960" pos:column="40">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1960" pos:column="64">(<argument><expr><name pos:line="1960" pos:column="65">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1960" pos:column="70">"A.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1961" pos:column="13">var</name></type> <name pos:line="1961" pos:column="17">globalScope</name> <init pos:line="1961" pos:column="29">= <expr><call><name><name pos:line="1961" pos:column="31">codeParser</name><op:operator pos:line="1961" pos:column="41">.</op:operator><name pos:line="1961" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="1961" pos:column="55">(<argument><expr><name pos:line="1961" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1963" pos:column="13">var</name></type> <name pos:line="1963" pos:column="17">lockStmt</name> <init pos:line="1963" pos:column="26">= <expr><call><name><name pos:line="1963" pos:column="28">globalScope</name><op:operator pos:line="1963" pos:column="39">.</op:operator><name pos:line="1963" pos:column="40">ChildStatements</name><op:operator pos:line="1963" pos:column="55">.</op:operator><name pos:line="1963" pos:column="56">First</name></name><argument_list pos:line="1963" pos:column="61">()</argument_list></call> <op:operator pos:line="1963" pos:column="64">as</op:operator> <name pos:line="1963" pos:column="67">LockStatement</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1964" pos:column="13">Assert</name><op:operator pos:line="1964" pos:column="19">.</op:operator><name pos:line="1964" pos:column="20">IsNotNull</name></name><argument_list pos:line="1964" pos:column="29">(<argument><expr><name pos:line="1964" pos:column="30">lockStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1965" pos:column="13">Assert</name><op:operator pos:line="1965" pos:column="19">.</op:operator><name pos:line="1965" pos:column="20">AreEqual</name></name><argument_list pos:line="1965" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1965" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1965" pos:column="32">lockStmt</name><op:operator pos:line="1965" pos:column="40">.</op:operator><name pos:line="1965" pos:column="41">ChildStatements</name><op:operator pos:line="1965" pos:column="56">.</op:operator><name pos:line="1965" pos:column="57">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1967" pos:column="13">var</name></type> <name pos:line="1967" pos:column="17">lockVar</name> <init pos:line="1967" pos:column="25">= <expr><name><name pos:line="1967" pos:column="27">lockStmt</name><op:operator pos:line="1967" pos:column="35">.</op:operator><name pos:line="1967" pos:column="36">LockExpression</name></name> <op:operator pos:line="1967" pos:column="51">as</op:operator> <name pos:line="1967" pos:column="54">NameUse</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1968" pos:column="13">Assert</name><op:operator pos:line="1968" pos:column="19">.</op:operator><name pos:line="1968" pos:column="20">IsNotNull</name></name><argument_list pos:line="1968" pos:column="29">(<argument><expr><name pos:line="1968" pos:column="30">lockVar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1969" pos:column="13">Assert</name><op:operator pos:line="1969" pos:column="19">.</op:operator><name pos:line="1969" pos:column="20">AreEqual</name></name><argument_list pos:line="1969" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1969" pos:column="29">"myVar"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1969" pos:column="38">lockVar</name><op:operator pos:line="1969" pos:column="45">.</op:operator><name pos:line="1969" pos:column="46">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
