<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\Tools\ABB.SrcML.Tools.Converter\Program.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2010 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name pos:line="12" pos:column="7">System</name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Collections</name><op:operator pos:line="13" pos:column="25">.</op:operator><name pos:line="13" pos:column="26">Generic</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Linq</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Text</name></name>;</using>
<using pos:line="16" pos:column="1">using <name pos:line="16" pos:column="7">NConsoler</name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">ABB</name><op:operator pos:line="17" pos:column="10">.</op:operator><name pos:line="17" pos:column="11">SrcML</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">IO</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">System</name><op:operator pos:line="19" pos:column="13">.</op:operator><name pos:line="19" pos:column="14">Xml</name><op:operator pos:line="19" pos:column="17">.</op:operator><name pos:line="19" pos:column="18">Linq</name></name>;</using>
<using pos:line="20" pos:column="1">using <name><name pos:line="20" pos:column="7">ABB</name><op:operator pos:line="20" pos:column="10">.</op:operator><name pos:line="20" pos:column="11">SrcML</name><op:operator pos:line="20" pos:column="16">.</op:operator><name pos:line="20" pos:column="17">Utilities</name></name>;</using>
<using pos:line="21" pos:column="1">using <name><name pos:line="21" pos:column="7">System</name><op:operator pos:line="21" pos:column="13">.</op:operator><name pos:line="21" pos:column="14">Collections</name><op:operator pos:line="21" pos:column="25">.</op:operator><name pos:line="21" pos:column="26">ObjectModel</name></name>;</using>

<namespace pos:line="23" pos:column="1">namespace <name><name pos:line="23" pos:column="11">ABB</name><op:operator pos:line="23" pos:column="14">.</op:operator><name pos:line="23" pos:column="15">SrcML</name><op:operator pos:line="23" pos:column="20">.</op:operator><name pos:line="23" pos:column="21">Tools</name><op:operator pos:line="23" pos:column="26">.</op:operator><name pos:line="23" pos:column="27">Converter</name></name>
<block pos:line="24" pos:column="1">{
    <class pos:line="25" pos:column="5">class <name pos:line="25" pos:column="11">Program</name>
    <block pos:line="26" pos:column="5">{
        <function><type><specifier pos:line="27" pos:column="9">static</specifier> <name pos:line="27" pos:column="16">void</name></type> <name pos:line="27" pos:column="21">Main</name><parameter_list pos:line="27" pos:column="25">(<param><decl><type><name><name pos:line="27" pos:column="26">string</name><index pos:line="27" pos:column="32">[]</index></name></type> <name pos:line="27" pos:column="35">args</name></decl></param>)</parameter_list>
        <block pos:line="28" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="29" pos:column="13">Consolery</name><op:operator pos:line="29" pos:column="22">.</op:operator><name pos:line="29" pos:column="23">Run</name></name><argument_list pos:line="29" pos:column="26">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="32" pos:column="9">[<expr><call><name pos:line="32" pos:column="10">Action</name><argument_list pos:line="32" pos:column="16">(<argument><expr><lit:literal type="string" pos:line="32" pos:column="17">"Converts source code in directory to SrcML"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="33" pos:column="9">public</specifier> <specifier pos:line="33" pos:column="16">static</specifier> <name pos:line="33" pos:column="23">void</name></type> <name pos:line="33" pos:column="28">Src2SrcML</name><parameter_list pos:line="33" pos:column="37">(<param><decl><type><attribute pos:line="33" pos:column="38">[<expr><call><name pos:line="33" pos:column="39">Required</name><argument_list pos:line="33" pos:column="47">(<argument><expr><name pos:line="33" pos:column="48">Description</name><op:operator pos:line="33" pos:column="59">=</op:operator><lit:literal type="string" pos:line="33" pos:column="60">"Source file or directory of source code to convert"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute> <name pos:line="33" pos:column="115">string</name></type> <name pos:line="33" pos:column="122">source</name></decl></param>,
                                     <param><decl><type><attribute pos:line="34" pos:column="38">[<expr><call><name pos:line="34" pos:column="39">Optional</name><argument_list pos:line="34" pos:column="47">(<argument><expr><name pos:line="34" pos:column="48">null</name></expr></argument>, <argument><expr><name pos:line="34" pos:column="54">Description</name><op:operator pos:line="34" pos:column="65">=</op:operator><lit:literal type="string" pos:line="34" pos:column="66">@"The file to write SrcML to. By default, this is &lt;Current Directory&gt;\&lt;Directory&gt;-&lt;Date&gt;.xml
        For instance, if you run .\srcml.exe src2srcml c:\source\python, the resulting output file will be located at .\python-YYYMMDDHHMM.xml"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute> <name pos:line="35" pos:column="147">string</name></type> <name pos:line="35" pos:column="154">outputFileName</name></decl></param>,
                                     <param><decl><type><attribute pos:line="36" pos:column="38">[<expr><call><name pos:line="36" pos:column="39">Optional</name><argument_list pos:line="36" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="36" pos:column="48">"Any"</lit:literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="55">Description</name><op:operator pos:line="36" pos:column="66">=</op:operator><lit:literal type="string" pos:line="36" pos:column="67">@"Language to use. Only files for this language will be included. The options are
        * Any (the default: indicates that all recognized languages should be included)
        * C
        * C++
        * Java
        * AspectJ"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute> <name pos:line="41" pos:column="22">string</name></type> <name pos:line="41" pos:column="29">language</name></decl></param>,
                                     <param><decl><type><attribute pos:line="42" pos:column="38">[<expr><call><name pos:line="42" pos:column="39">Optional</name><argument_list pos:line="42" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="42" pos:column="48">""</lit:literal></expr></argument>, <argument><expr><name pos:line="42" pos:column="52">Description</name><op:operator pos:line="42" pos:column="63">=</op:operator><lit:literal type="string" pos:line="42" pos:column="64">@"Mapping of file extensions to languages.
        This is formatted like this: ""/languageMapping:ext1=LANG;ext2=LANG;ext3=LANG""
        For example, to map foo.h and foo.cxx to C++, we would use ""/languageMapping:h=C++;cxx=C++""
        All of the languages that are valid for the /language option are valid except for ""Any"".
"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute> <name pos:line="46" pos:column="5">string</name></type> <name pos:line="46" pos:column="12">languageMapping</name></decl></param>,
                                     <param><decl><type><attribute pos:line="47" pos:column="38">[<expr><call><name pos:line="47" pos:column="39">Optional</name><argument_list pos:line="47" pos:column="47">(<argument><expr><name pos:line="47" pos:column="48">null</name></expr></argument>, <argument><expr><name pos:line="47" pos:column="54">Description</name><op:operator pos:line="47" pos:column="65">=</op:operator><lit:literal type="string" pos:line="47" pos:column="66">@"Folder with SrcML binaries. If this is not given, the following directories are checked: 
        1. %SRCMLBINDIR%
        2. c:\Program Files (x86)\SrcML\bin
        3. c:\Program Files\SrcML\bin (only checked if c:\Program Files (x86) does not exist)
        4. The current directory"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute> <name pos:line="51" pos:column="37">string</name></type> <name pos:line="51" pos:column="44">binaryFolder</name></decl></param>)</parameter_list>
        <block pos:line="52" pos:column="9">{


            <if pos:line="55" pos:column="13">if <condition pos:line="55" pos:column="16">(<expr><name pos:line="55" pos:column="17">null</name> <op:operator pos:line="55" pos:column="22">==</op:operator> <name pos:line="55" pos:column="25">outputFileName</name></expr>)</condition><then pos:line="55" pos:column="40">
            <block pos:line="56" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="57" pos:column="17">var</name></type> <name pos:line="57" pos:column="21">name</name> <init pos:line="57" pos:column="26">= <expr><call><name><name pos:line="57" pos:column="28">source</name><op:operator pos:line="57" pos:column="34">.</op:operator><name pos:line="57" pos:column="35">Split</name></name><argument_list pos:line="57" pos:column="40">(<argument><expr><op:operator pos:line="57" pos:column="41">new</op:operator> <name><name pos:line="57" pos:column="45">char</name><index pos:line="57" pos:column="49">[]</index></name> <block pos:line="57" pos:column="52">{ <expr><name><name pos:line="57" pos:column="54">Path</name><op:operator pos:line="57" pos:column="58">.</op:operator><name pos:line="57" pos:column="59">DirectorySeparatorChar</name></name></expr> }</block></expr></argument>, <argument><expr><name><name pos:line="57" pos:column="85">StringSplitOptions</name><op:operator pos:line="57" pos:column="103">.</op:operator><name pos:line="57" pos:column="104">RemoveEmptyEntries</name></name></expr></argument>)</argument_list></call><op:operator pos:line="57" pos:column="123">.</op:operator><call><name pos:line="57" pos:column="124">Last</name><argument_list pos:line="57" pos:column="128">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name pos:line="58" pos:column="17">outputFileName</name> <op:operator pos:line="58" pos:column="32">=</op:operator> <call><name><name pos:line="58" pos:column="34">String</name><op:operator pos:line="58" pos:column="40">.</op:operator><name pos:line="58" pos:column="41">Format</name></name><argument_list pos:line="58" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="58" pos:column="48">"{0}-{1}.xml"</lit:literal></expr></argument>, <argument><expr><name pos:line="58" pos:column="63">name</name></expr></argument>, <argument><expr><call><name><name pos:line="58" pos:column="69">DateTime</name><op:operator pos:line="58" pos:column="77">.</op:operator><name pos:line="58" pos:column="78">Now</name><op:operator pos:line="58" pos:column="81">.</op:operator><name pos:line="58" pos:column="82">ToString</name></name><argument_list pos:line="58" pos:column="90">(<argument><expr><lit:literal type="string" pos:line="58" pos:column="91">"yyyyMMddHHmmss"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            
            <decl_stmt><decl><type><name pos:line="61" pos:column="13">SrcMLGenerator</name></type> <name pos:line="61" pos:column="28">generator</name> <init pos:line="61" pos:column="38">= <expr><name pos:line="61" pos:column="40">null</name></expr></init></decl>;</decl_stmt>

            <if pos:line="63" pos:column="13">if<condition pos:line="63" pos:column="15">(<expr><name pos:line="63" pos:column="16">null</name> <op:operator pos:line="63" pos:column="21">!=</op:operator> <name pos:line="63" pos:column="24">binaryFolder</name></expr>)</condition><then pos:line="63" pos:column="37">
            <block pos:line="64" pos:column="13">{
                <try pos:line="65" pos:column="17">try
                <block pos:line="66" pos:column="17">{
                    <expr_stmt><expr><name pos:line="67" pos:column="21">generator</name> <op:operator pos:line="67" pos:column="31">=</op:operator> <call><name pos:line="67" pos:column="33">GetGeneratorWithDirectory</name><argument_list pos:line="67" pos:column="58">(<argument><expr><name pos:line="67" pos:column="59">binaryFolder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block>
                <catch pos:line="69" pos:column="17">catch<parameter_list pos:line="69" pos:column="22">(<param><decl><type><name pos:line="69" pos:column="23">IOException</name></type> <name pos:line="69" pos:column="35">e</name></decl></param>)</parameter_list>
                <block pos:line="70" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="71" pos:column="21">Console</name><op:operator pos:line="71" pos:column="28">.</op:operator><name pos:line="71" pos:column="29">Error</name><op:operator pos:line="71" pos:column="34">.</op:operator><name pos:line="71" pos:column="35">WriteLine</name></name><argument_list pos:line="71" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="71" pos:column="45">"Invalid binary directory: {0}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="71" pos:column="78">e</name><op:operator pos:line="71" pos:column="79">.</op:operator><name pos:line="71" pos:column="80">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="72" pos:column="21">Environment</name><op:operator pos:line="72" pos:column="32">.</op:operator><name pos:line="72" pos:column="33">Exit</name></name><argument_list pos:line="72" pos:column="37">(<argument><expr><op:operator pos:line="72" pos:column="38">-</op:operator><lit:literal type="number" pos:line="72" pos:column="39">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></then>
            <else pos:line="75" pos:column="13">else
            <block pos:line="76" pos:column="13">{
                <comment type="line" pos:line="77" pos:column="17">//try</comment>
                <comment type="line" pos:line="78" pos:column="17">//{</comment>
                    <comment type="line" pos:line="79" pos:column="21">// check all of the usual suspects</comment>
                    <expr_stmt><expr><name pos:line="80" pos:column="21">generator</name> <op:operator pos:line="80" pos:column="31">=</op:operator> <op:operator pos:line="80" pos:column="33">new</op:operator> <call><name pos:line="80" pos:column="37">SrcMLGenerator</name><argument_list pos:line="80" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
                <comment type="line" pos:line="81" pos:column="17">//}</comment>
                <comment type="line" pos:line="82" pos:column="17">//catch(IOException)</comment>
                <comment type="line" pos:line="83" pos:column="17">//{</comment>
                <comment type="line" pos:line="84" pos:column="17">//    generator = null;</comment>
                <comment type="line" pos:line="85" pos:column="17">//}</comment>
            }</block></else></if>

            <decl_stmt><decl><type><name pos:line="88" pos:column="13">Language</name></type> <name pos:line="88" pos:column="22">lang</name> <init pos:line="88" pos:column="27">= <expr><call><name><name pos:line="88" pos:column="29">SrcMLElement</name><op:operator pos:line="88" pos:column="41">.</op:operator><name pos:line="88" pos:column="42">GetLanguageFromString</name></name><argument_list pos:line="88" pos:column="63">(<argument><expr><name pos:line="88" pos:column="64">language</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="89" pos:column="13">if <condition pos:line="89" pos:column="16">(<expr><name pos:line="89" pos:column="17">lang</name> <op:operator pos:line="89" pos:column="22">&gt;</op:operator> <name><name pos:line="89" pos:column="24">Language</name><op:operator pos:line="89" pos:column="32">.</op:operator><name pos:line="89" pos:column="33">Any</name></name></expr>)</condition><then pos:line="89" pos:column="37">
            <block pos:line="90" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="91" pos:column="17">Console</name><op:operator pos:line="91" pos:column="24">.</op:operator><name pos:line="91" pos:column="25">WriteLine</name></name><argument_list pos:line="91" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="91" pos:column="35">"Using {0} language"</lit:literal></expr></argument>, <argument><expr><name pos:line="91" pos:column="57">language</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if pos:line="94" pos:column="13">if <condition pos:line="94" pos:column="16">(<expr><name><name pos:line="94" pos:column="17">String</name><op:operator pos:line="94" pos:column="23">.</op:operator><name pos:line="94" pos:column="24">Empty</name></name> <op:operator pos:line="94" pos:column="30">!=</op:operator> <name pos:line="94" pos:column="33">languageMapping</name></expr>)</condition><then pos:line="94" pos:column="49">
            <block pos:line="95" pos:column="13">{
                <foreach pos:line="96" pos:column="17">foreach (<init><decl><type><name pos:line="96" pos:column="26">var</name></type> <name pos:line="96" pos:column="30">pair</name> <range pos:line="96" pos:column="35">in <expr><call><name pos:line="96" pos:column="38">ParseLanguageMap</name><argument_list pos:line="96" pos:column="54">(<argument><expr><name pos:line="96" pos:column="55">languageMapping</name></expr></argument>)</argument_list></call></expr></range></decl></init>)
                <block pos:line="97" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="98" pos:column="21">Console</name><op:operator pos:line="98" pos:column="28">.</op:operator><name pos:line="98" pos:column="29">WriteLine</name></name><argument_list pos:line="98" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="98" pos:column="39">"Mapping {0} files to {1} language"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="98" pos:column="76">pair</name><op:operator pos:line="98" pos:column="80">.</op:operator><name pos:line="98" pos:column="81">Extension</name></name></expr></argument>, <argument><expr><call><name><name pos:line="98" pos:column="92">KsuAdapter</name><op:operator pos:line="98" pos:column="102">.</op:operator><name pos:line="98" pos:column="103">GetLanguage</name></name><argument_list pos:line="98" pos:column="114">(<argument><expr><name><name pos:line="98" pos:column="115">pair</name><op:operator pos:line="98" pos:column="119">.</op:operator><name pos:line="98" pos:column="120">Language</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name pos:line="99" pos:column="21">string</name></type> <name pos:line="99" pos:column="28">ext</name> <init pos:line="99" pos:column="32">= <expr><call><name><name pos:line="99" pos:column="34">pair</name><op:operator pos:line="99" pos:column="38">.</op:operator><name pos:line="99" pos:column="39">Extension</name><op:operator pos:line="99" pos:column="48">.</op:operator><name pos:line="99" pos:column="49">StartsWith</name></name><argument_list pos:line="99" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="99" pos:column="60">"."</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="99" pos:column="65">?</op:operator> <name><name pos:line="99" pos:column="67">pair</name><op:operator pos:line="99" pos:column="71">.</op:operator><name pos:line="99" pos:column="72">Extension</name></name> <op:operator pos:line="99" pos:column="82">:</op:operator> <lit:literal type="string" pos:line="99" pos:column="84">"."</lit:literal> <op:operator pos:line="99" pos:column="88">+</op:operator> <name><name pos:line="99" pos:column="90">pair</name><op:operator pos:line="99" pos:column="94">.</op:operator><name pos:line="99" pos:column="95">Extension</name></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="100" pos:column="21">generator</name><op:operator pos:line="100" pos:column="30">.</op:operator><name pos:line="100" pos:column="31">ExtensionMapping</name><op:operator pos:line="100" pos:column="47">.</op:operator><name pos:line="100" pos:column="48">Add</name></name><argument_list pos:line="100" pos:column="51">(<argument><expr><name pos:line="100" pos:column="52">ext</name></expr></argument>, <argument><expr><name><name pos:line="100" pos:column="57">pair</name><op:operator pos:line="100" pos:column="61">.</op:operator><name pos:line="100" pos:column="62">Language</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>
            }</block></then></if>
            <decl_stmt><decl><type><name pos:line="103" pos:column="13">SrcMLFile</name></type> <name pos:line="103" pos:column="23">doc</name></decl>;</decl_stmt>
            <if pos:line="104" pos:column="13">if <condition pos:line="104" pos:column="16">(<expr><call><name><name pos:line="104" pos:column="17">Directory</name><op:operator pos:line="104" pos:column="26">.</op:operator><name pos:line="104" pos:column="27">Exists</name></name><argument_list pos:line="104" pos:column="33">(<argument><expr><name pos:line="104" pos:column="34">source</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="104" pos:column="42"> 
            <block pos:line="105" pos:column="13">{
                <expr_stmt><expr><name pos:line="106" pos:column="17">doc</name> <op:operator pos:line="106" pos:column="21">=</op:operator> <call><name><name pos:line="106" pos:column="23">generator</name><op:operator pos:line="106" pos:column="32">.</op:operator><name pos:line="106" pos:column="33">GenerateSrcMLFileFromDirectory</name></name><argument_list pos:line="106" pos:column="63">(<argument><expr><name pos:line="106" pos:column="64">source</name></expr></argument>, <argument><expr><name pos:line="106" pos:column="72">outputFileName</name></expr></argument>, <argument><expr><name pos:line="106" pos:column="88">lang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="107" pos:column="17">Console</name><op:operator pos:line="107" pos:column="24">.</op:operator><name pos:line="107" pos:column="25">WriteLine</name></name><argument_list pos:line="107" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="107" pos:column="35">"Created {0}, a srcML archive, from {1} files located at {2}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="107" pos:column="98">doc</name><op:operator pos:line="107" pos:column="101">.</op:operator><name pos:line="107" pos:column="102">FileName</name></name></expr></argument>, <argument><expr><call><name><name pos:line="107" pos:column="112">doc</name><op:operator pos:line="107" pos:column="115">.</op:operator><name pos:line="107" pos:column="116">FileUnits</name><op:operator pos:line="107" pos:column="125">.</op:operator><name pos:line="107" pos:column="126">Count</name></name><argument_list pos:line="107" pos:column="131">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="107" pos:column="135">source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else pos:line="109" pos:column="13">else <if pos:line="109" pos:column="18">if <condition pos:line="109" pos:column="21">(<expr><call><name><name pos:line="109" pos:column="22">File</name><op:operator pos:line="109" pos:column="26">.</op:operator><name pos:line="109" pos:column="27">Exists</name></name><argument_list pos:line="109" pos:column="33">(<argument><expr><name pos:line="109" pos:column="34">source</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="109" pos:column="42">
            <block pos:line="110" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="111" pos:column="17">generator</name><op:operator pos:line="111" pos:column="26">.</op:operator><name pos:line="111" pos:column="27">GenerateSrcMLFromFile</name></name><argument_list pos:line="111" pos:column="48">(<argument><expr><name pos:line="111" pos:column="49">source</name></expr></argument>, <argument><expr><name pos:line="111" pos:column="57">outputFileName</name></expr></argument>, <argument><expr><name pos:line="111" pos:column="73">lang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="112" pos:column="17">Console</name><op:operator pos:line="112" pos:column="24">.</op:operator><name pos:line="112" pos:column="25">WriteLine</name></name><argument_list pos:line="112" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="112" pos:column="35">"Converted {0} to a srcML document at {1}"</lit:literal></expr></argument>, <argument><expr><name pos:line="112" pos:column="79">source</name></expr></argument>, <argument><expr><name pos:line="112" pos:column="87">outputFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else pos:line="114" pos:column="13">else
            <block pos:line="115" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="116" pos:column="17">Console</name><op:operator pos:line="116" pos:column="24">.</op:operator><name pos:line="116" pos:column="25">Error</name><op:operator pos:line="116" pos:column="30">.</op:operator><name pos:line="116" pos:column="31">WriteLine</name></name><argument_list pos:line="116" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="116" pos:column="41">"the input folder or directory ({0}) does not exist!"</lit:literal></expr></argument>, <argument><expr><name pos:line="116" pos:column="96">source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="117" pos:column="17">Environment</name><op:operator pos:line="117" pos:column="28">.</op:operator><name pos:line="117" pos:column="29">Exit</name></name><argument_list pos:line="117" pos:column="33">(<argument><expr><op:operator pos:line="117" pos:column="34">-</op:operator><lit:literal type="number" pos:line="117" pos:column="35">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if></else></if>
        }</block></function>

        <function><type><attribute pos:line="121" pos:column="9">[<expr><call><name pos:line="121" pos:column="10">Action</name><argument_list pos:line="121" pos:column="16">(<argument><expr><lit:literal type="string" pos:line="121" pos:column="17">"Converts SrcML file back to source code"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="122" pos:column="9">public</specifier> <specifier pos:line="122" pos:column="16">static</specifier> <name pos:line="122" pos:column="23">void</name></type> <name pos:line="122" pos:column="28">SrcML2Src</name><parameter_list pos:line="122" pos:column="37">(<param><decl><type><attribute pos:line="122" pos:column="38">[<expr><call><name pos:line="122" pos:column="39">Required</name><argument_list pos:line="122" pos:column="47">(<argument><expr><name pos:line="122" pos:column="48">Description</name><op:operator pos:line="122" pos:column="59">=</op:operator><lit:literal type="string" pos:line="122" pos:column="60">"SrcML folder containing the source code"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute> <name pos:line="122" pos:column="104">string</name></type> <name pos:line="122" pos:column="111">fileName</name></decl></param>,
                                     <param><decl><type><attribute pos:line="123" pos:column="38">[<expr><call><name pos:line="123" pos:column="39">Optional</name><argument_list pos:line="123" pos:column="47">(<argument><expr><name pos:line="123" pos:column="48">null</name></expr></argument>, <argument><expr><name pos:line="123" pos:column="54">Description</name><op:operator pos:line="123" pos:column="65">=</op:operator><lit:literal type="string" pos:line="123" pos:column="66">"Folder to write the source code to. Default: original folder"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute> <name pos:line="123" pos:column="131">string</name></type> <name pos:line="123" pos:column="138">outputFolder</name></decl></param>)</parameter_list>
        <block pos:line="124" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="125" pos:column="13">string</name></type> <name pos:line="125" pos:column="20">workingFileName</name> <init pos:line="125" pos:column="36">= <expr><op:operator pos:line="125" pos:column="38">(</op:operator><name pos:line="125" pos:column="39">null</name> <op:operator pos:line="125" pos:column="44">==</op:operator> <name pos:line="125" pos:column="47">outputFolder</name> <op:operator pos:line="125" pos:column="60">?</op:operator> <name pos:line="125" pos:column="62">fileName</name> <op:operator pos:line="125" pos:column="71">:</op:operator> <call><name><name pos:line="125" pos:column="73">Path</name><op:operator pos:line="125" pos:column="77">.</op:operator><name pos:line="125" pos:column="78">GetTempFileName</name></name><argument_list pos:line="125" pos:column="93">()</argument_list></call><op:operator pos:line="125" pos:column="95">)</op:operator></expr></init></decl>;</decl_stmt>

            <if pos:line="127" pos:column="13">if<condition pos:line="127" pos:column="15">(<expr><name pos:line="127" pos:column="16">null</name> <op:operator pos:line="127" pos:column="21">!=</op:operator> <name pos:line="127" pos:column="24">outputFolder</name></expr>)</condition><then pos:line="127" pos:column="37">
                <expr_stmt><expr><call><name><name pos:line="128" pos:column="17">File</name><op:operator pos:line="128" pos:column="21">.</op:operator><name pos:line="128" pos:column="22">Copy</name></name><argument_list pos:line="128" pos:column="26">(<argument><expr><name pos:line="128" pos:column="27">fileName</name></expr></argument>, <argument><expr><name pos:line="128" pos:column="37">workingFileName</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="128" pos:column="54">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

            <try pos:line="130" pos:column="13">try
            <block pos:line="131" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="132" pos:column="17">SrcMLFile</name></type> <name pos:line="132" pos:column="27">doc</name> <init pos:line="132" pos:column="31">= <expr><op:operator pos:line="132" pos:column="33">new</op:operator> <call><name pos:line="132" pos:column="37">SrcMLFile</name><argument_list pos:line="132" pos:column="46">(<argument><expr><name pos:line="132" pos:column="47">workingFileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if pos:line="134" pos:column="17">if <condition pos:line="134" pos:column="20">(<expr><name pos:line="134" pos:column="21">null</name> <op:operator pos:line="134" pos:column="26">!=</op:operator> <name pos:line="134" pos:column="29">outputFolder</name></expr>)</condition><then pos:line="134" pos:column="42">
                    <expr_stmt><expr><name><name pos:line="135" pos:column="21">doc</name><op:operator pos:line="135" pos:column="24">.</op:operator><name pos:line="135" pos:column="25">ProjectDirectory</name></name> <op:operator pos:line="135" pos:column="42">=</op:operator> <name pos:line="135" pos:column="44">outputFolder</name></expr>;</expr_stmt></then></if>

                <try pos:line="137" pos:column="17">try
                <block pos:line="138" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="139" pos:column="21">doc</name><op:operator pos:line="139" pos:column="24">.</op:operator><name pos:line="139" pos:column="25">ExportSource</name></name><argument_list pos:line="139" pos:column="37">()</argument_list></call></expr>;</expr_stmt>
                }</block>
                <catch pos:line="141" pos:column="17">catch <parameter_list pos:line="141" pos:column="23">(<param><decl><type><name pos:line="141" pos:column="24">IOException</name></type> <name pos:line="141" pos:column="36">e</name></decl></param>)</parameter_list>
                <block pos:line="142" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="143" pos:column="21">Console</name><op:operator pos:line="143" pos:column="28">.</op:operator><name pos:line="143" pos:column="29">Error</name><op:operator pos:line="143" pos:column="34">.</op:operator><name pos:line="143" pos:column="35">WriteLine</name></name><argument_list pos:line="143" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="143" pos:column="45">"IO Exception {0}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="143" pos:column="65">e</name><op:operator pos:line="143" pos:column="66">.</op:operator><name pos:line="143" pos:column="67">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>


                <comment type="line" pos:line="147" pos:column="17">//if (1 == errors.Count)</comment>
                <comment type="line" pos:line="148" pos:column="17">//    Console.Error.WriteLine("Could not write {0}", errors[0]);</comment>
                <comment type="line" pos:line="149" pos:column="17">//else if (1 &lt; errors.Count)</comment>
                <comment type="line" pos:line="150" pos:column="17">//{</comment>
                <comment type="line" pos:line="151" pos:column="17">//    Console.Error.WriteLine("Could not write the following {0} files:", errors.Count);</comment>
                <comment type="line" pos:line="152" pos:column="17">//    foreach (var error in errors)</comment>
                <comment type="line" pos:line="153" pos:column="17">//        Console.Error.WriteLine("\t{0}", error);</comment>
                <comment type="line" pos:line="154" pos:column="17">//}</comment>

                <if pos:line="156" pos:column="17">if <condition pos:line="156" pos:column="20">(<expr><name pos:line="156" pos:column="21">null</name> <op:operator pos:line="156" pos:column="26">!=</op:operator> <name pos:line="156" pos:column="29">outputFolder</name></expr>)</condition><then pos:line="156" pos:column="42">
                    <expr_stmt><expr><call><name><name pos:line="157" pos:column="21">File</name><op:operator pos:line="157" pos:column="25">.</op:operator><name pos:line="157" pos:column="26">Delete</name></name><argument_list pos:line="157" pos:column="32">(<argument><expr><name pos:line="157" pos:column="33">workingFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block>
            <catch pos:line="159" pos:column="13">catch <parameter_list pos:line="159" pos:column="19">(<param><decl><type><name pos:line="159" pos:column="20">SrcMLException</name></type> <name pos:line="159" pos:column="35">ex</name></decl></param>)</parameter_list>
            <block pos:line="160" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="161" pos:column="17">Console</name><op:operator pos:line="161" pos:column="24">.</op:operator><name pos:line="161" pos:column="25">Error</name><op:operator pos:line="161" pos:column="30">.</op:operator><name pos:line="161" pos:column="31">WriteLine</name></name><argument_list pos:line="161" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="161" pos:column="41">"Could not read {0}: {1}"</lit:literal></expr></argument>, <argument><expr><name pos:line="161" pos:column="68">fileName</name></expr></argument>, <argument><expr><name><name pos:line="161" pos:column="78">ex</name><op:operator pos:line="161" pos:column="80">.</op:operator><name pos:line="161" pos:column="81">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch>
            <catch pos:line="163" pos:column="13">catch <parameter_list pos:line="163" pos:column="19">(<param><decl><type><name pos:line="163" pos:column="20">IOException</name></type> <name pos:line="163" pos:column="32">ex</name></decl></param>)</parameter_list>
            <block pos:line="164" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="165" pos:column="17">Console</name><op:operator pos:line="165" pos:column="24">.</op:operator><name pos:line="165" pos:column="25">WriteLine</name></name><argument_list pos:line="165" pos:column="34">(<argument><expr><name><name pos:line="165" pos:column="35">ex</name><op:operator pos:line="165" pos:column="37">.</op:operator><name pos:line="165" pos:column="38">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></function>

        <function><type><attribute pos:line="169" pos:column="9">[<expr><call><name pos:line="169" pos:column="10">Action</name><argument_list pos:line="169" pos:column="16">(<argument><expr><lit:literal type="string" pos:line="169" pos:column="17">"Lists statistics about the srcML document"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="170" pos:column="9">public</specifier> <specifier pos:line="170" pos:column="16">static</specifier> <name pos:line="170" pos:column="23">void</name></type> <name pos:line="170" pos:column="28">Stats</name><parameter_list pos:line="170" pos:column="33">(<param><decl><type><attribute pos:line="170" pos:column="34">[<expr><call><name pos:line="170" pos:column="35">Required</name><argument_list pos:line="170" pos:column="43">(<argument><expr><name pos:line="170" pos:column="44">Description</name><op:operator pos:line="170" pos:column="55">=</op:operator><lit:literal type="string" pos:line="170" pos:column="56">"Path to srcML file"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute> <name pos:line="170" pos:column="79">string</name></type> <name pos:line="170" pos:column="86">fileName</name></decl></param>,
                                 <param><decl><type><attribute pos:line="171" pos:column="34">[<expr><call><name pos:line="171" pos:column="35">Optional</name><argument_list pos:line="171" pos:column="43">(<argument><expr><name pos:line="171" pos:column="44">null</name></expr></argument>, <argument><expr><name pos:line="171" pos:column="50">Description</name><op:operator pos:line="171" pos:column="61">=</op:operator><lit:literal type="string" pos:line="171" pos:column="62">"Path to write output to (standard out by default)"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute> <name pos:line="171" pos:column="116">string</name></type> <name pos:line="171" pos:column="123">outputPath</name></decl></param>)</parameter_list>
        <block pos:line="172" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="173" pos:column="13">SrcMLFile</name></type> <name pos:line="173" pos:column="23">doc</name> <init pos:line="173" pos:column="27">= <expr><op:operator pos:line="173" pos:column="29">new</op:operator> <call><name pos:line="173" pos:column="33">SrcMLFile</name><argument_list pos:line="173" pos:column="42">(<argument><expr><name pos:line="173" pos:column="43">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="174" pos:column="13">int</name></type> <name pos:line="174" pos:column="17">numFileUnits</name> <init pos:line="174" pos:column="30">= <expr><call><name><name pos:line="174" pos:column="32">doc</name><op:operator pos:line="174" pos:column="35">.</op:operator><name pos:line="174" pos:column="36">FileUnits</name><op:operator pos:line="174" pos:column="45">.</op:operator><name pos:line="174" pos:column="46">Count</name></name><argument_list pos:line="174" pos:column="51">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="175" pos:column="13">var</name></type> <name pos:line="175" pos:column="17">dict</name> <init pos:line="175" pos:column="22">= <expr><call><name pos:line="175" pos:column="24">GenerateUnitChildDictionary</name><argument_list pos:line="175" pos:column="51">(<argument><expr><name pos:line="175" pos:column="52">doc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <using pos:line="176" pos:column="13">using (<decl><type><name pos:line="176" pos:column="20">var</name></type> <name pos:line="176" pos:column="24">output</name> <init pos:line="176" pos:column="31">= <expr><op:operator pos:line="176" pos:column="33">(</op:operator><name pos:line="176" pos:column="34">null</name> <op:operator pos:line="176" pos:column="39">==</op:operator> <name pos:line="176" pos:column="42">outputPath</name> <op:operator pos:line="176" pos:column="53">?</op:operator> <name><name pos:line="176" pos:column="55">Console</name><op:operator pos:line="176" pos:column="62">.</op:operator><name pos:line="176" pos:column="63">Out</name></name> <op:operator pos:line="176" pos:column="67">:</op:operator> <op:operator pos:line="176" pos:column="69">new</op:operator> <call><name pos:line="176" pos:column="73">StreamWriter</name><argument_list pos:line="176" pos:column="85">(<argument><expr><name pos:line="176" pos:column="86">outputPath</name></expr></argument>)</argument_list></call><op:operator pos:line="176" pos:column="97">)</op:operator></expr></init></decl>)
            <block pos:line="177" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="178" pos:column="17">output</name><op:operator pos:line="178" pos:column="23">.</op:operator><name pos:line="178" pos:column="24">WriteLine</name></name><argument_list pos:line="178" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="178" pos:column="34">"{0} has {1} files containing"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="178" pos:column="66">Path</name><op:operator pos:line="178" pos:column="70">.</op:operator><name pos:line="178" pos:column="71">GetFileName</name></name><argument_list pos:line="178" pos:column="82">(<argument><expr><name><name pos:line="178" pos:column="83">doc</name><op:operator pos:line="178" pos:column="86">.</op:operator><name pos:line="178" pos:column="87">FileName</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="178" pos:column="98">numFileUnits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="179" pos:column="17">var</name></type> <name pos:line="179" pos:column="21">numChildren</name> <init pos:line="179" pos:column="33">= <expr><op:operator pos:line="179" pos:column="35">(</op:operator><linq><from pos:line="179" pos:column="36">from <expr><name pos:line="179" pos:column="41">list</name></expr> <in pos:line="179" pos:column="46">in <expr><name><name pos:line="179" pos:column="49">dict</name><op:operator pos:line="179" pos:column="53">.</op:operator><name pos:line="179" pos:column="54">Values</name></name></expr></in></from>
                                       <select pos:line="180" pos:column="40">select <expr><name><name pos:line="180" pos:column="47">list</name><op:operator pos:line="180" pos:column="51">.</op:operator><name pos:line="180" pos:column="52">Count</name></name></expr></select></linq><op:operator pos:line="180" pos:column="57">)</op:operator><op:operator pos:line="180" pos:column="58">.</op:operator><call><name pos:line="180" pos:column="59">Sum</name><argument_list pos:line="180" pos:column="62">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="181" pos:column="17">var</name></type> <name pos:line="181" pos:column="21">sortedKeys</name> <init pos:line="181" pos:column="32">= <expr><linq><from pos:line="181" pos:column="34">from <expr><name pos:line="181" pos:column="39">key</name></expr> <in pos:line="181" pos:column="43">in <expr><name><name pos:line="181" pos:column="46">dict</name><op:operator pos:line="181" pos:column="50">.</op:operator><name pos:line="181" pos:column="51">Keys</name></name></expr></in></from>
                                 <orderby pos:line="182" pos:column="34">orderby <expr><name><name pos:line="182" pos:column="42">dict</name><index pos:line="182" pos:column="46">[<expr><name pos:line="182" pos:column="47">key</name></expr>]</index></name><op:operator pos:line="182" pos:column="51">.</op:operator><name pos:line="182" pos:column="52">Count</name></expr> <name pos:line="182" pos:column="58">descending</name></orderby>
                                 <select pos:line="183" pos:column="34">select <expr><name pos:line="183" pos:column="41">key</name></expr></select></linq></expr></init></decl>;</decl_stmt>

                <foreach pos:line="185" pos:column="17">foreach (<init><decl><type><name pos:line="185" pos:column="26">var</name></type> <name pos:line="185" pos:column="30">key</name> <range pos:line="185" pos:column="34">in <expr><name pos:line="185" pos:column="37">sortedKeys</name></expr></range></decl></init>)
                <block pos:line="186" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="187" pos:column="21">int</name></type> <name pos:line="187" pos:column="25">count</name> <init pos:line="187" pos:column="31">= <expr><name><name pos:line="187" pos:column="33">dict</name><index pos:line="187" pos:column="37">[<expr><name pos:line="187" pos:column="38">key</name></expr>]</index></name><op:operator pos:line="187" pos:column="42">.</op:operator><name pos:line="187" pos:column="43">Count</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="188" pos:column="21">var</name></type> <name pos:line="188" pos:column="25">percentage</name> <init pos:line="188" pos:column="36">= <expr><op:operator pos:line="188" pos:column="38">(</op:operator><op:operator pos:line="188" pos:column="39">(</op:operator><name pos:line="188" pos:column="40">float</name><op:operator pos:line="188" pos:column="45">)</op:operator> <name pos:line="188" pos:column="47">count</name> <op:operator pos:line="188" pos:column="53">/</op:operator> <name pos:line="188" pos:column="55">numChildren</name><op:operator pos:line="188" pos:column="66">)</op:operator> <op:operator pos:line="188" pos:column="68">*</op:operator> <lit:literal type="number" pos:line="188" pos:column="70">100</lit:literal></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="189" pos:column="21">output</name><op:operator pos:line="189" pos:column="27">.</op:operator><name pos:line="189" pos:column="28">WriteLine</name></name><argument_list pos:line="189" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="189" pos:column="38">"\t{0,10} ({1,5:f2}%) {2} elements"</lit:literal></expr></argument>, <argument><expr><name pos:line="189" pos:column="75">count</name></expr></argument>, <argument><expr><name pos:line="189" pos:column="82">percentage</name></expr></argument>, <argument><expr><name><name pos:line="189" pos:column="94">key</name><op:operator pos:line="189" pos:column="97">.</op:operator><name pos:line="189" pos:column="98">LocalName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>
            }</block></using>
        }</block></function>

        <function><type><specifier pos:line="194" pos:column="9">private</specifier> <specifier pos:line="194" pos:column="17">static</specifier> <name><name pos:line="194" pos:column="24">IEnumerable</name><argument_list pos:line="194" pos:column="35">&lt;<argument><name pos:line="194" pos:column="36">ExtensionLanguagePair</name></argument>&gt;</argument_list></name></type> <name pos:line="194" pos:column="59">ParseLanguageMap</name><parameter_list pos:line="194" pos:column="75">(<param><decl><type><name pos:line="194" pos:column="76">string</name></type> <name pos:line="194" pos:column="83">languageMapping</name></decl></param>)</parameter_list>
        <block pos:line="195" pos:column="9">{
            <foreach pos:line="196" pos:column="13">foreach (<init><decl><type><name pos:line="196" pos:column="22">var</name></type> <name pos:line="196" pos:column="26">segment</name> <range pos:line="196" pos:column="34">in <expr><call><name><name pos:line="196" pos:column="37">languageMapping</name><op:operator pos:line="196" pos:column="52">.</op:operator><name pos:line="196" pos:column="53">Split</name></name><argument_list pos:line="196" pos:column="58">(<argument><expr><lit:literal type="char" pos:line="196" pos:column="59">';'</lit:literal></expr></argument>)</argument_list></call></expr></range></decl></init>)
            <block pos:line="197" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="198" pos:column="17">var</name></type> <name pos:line="198" pos:column="21">parts</name> <init pos:line="198" pos:column="27">= <expr><call><name><name pos:line="198" pos:column="29">segment</name><op:operator pos:line="198" pos:column="36">.</op:operator><name pos:line="198" pos:column="37">Split</name></name><argument_list pos:line="198" pos:column="42">(<argument><expr><lit:literal type="char" pos:line="198" pos:column="43">'='</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="199" pos:column="17">var</name></type> <name pos:line="199" pos:column="21">extension</name> <init pos:line="199" pos:column="31">= <expr><name><name pos:line="199" pos:column="33">parts</name><index pos:line="199" pos:column="38">[<expr><lit:literal type="number" pos:line="199" pos:column="39">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="200" pos:column="17">Language</name></type> <name pos:line="200" pos:column="26">language</name> <init pos:line="200" pos:column="35">= <expr><call><name><name pos:line="200" pos:column="37">SrcMLElement</name><op:operator pos:line="200" pos:column="49">.</op:operator><name pos:line="200" pos:column="50">GetLanguageFromString</name></name><argument_list pos:line="200" pos:column="71">(<argument><expr><name><name pos:line="200" pos:column="72">parts</name><index pos:line="200" pos:column="77">[<expr><lit:literal type="number" pos:line="200" pos:column="78">1</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return><specifier pos:line="201" pos:column="17">yield</specifier> return <expr><op:operator pos:line="201" pos:column="30">new</op:operator> <call><name pos:line="201" pos:column="34">ExtensionLanguagePair</name><argument_list pos:line="201" pos:column="55">(<argument><expr><name pos:line="201" pos:column="56">extension</name></expr></argument>, <argument><expr><name pos:line="201" pos:column="67">language</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></foreach>
        }</block></function>

        <function><type><specifier pos:line="205" pos:column="9">private</specifier> <specifier pos:line="205" pos:column="17">static</specifier> <name><name pos:line="205" pos:column="24">Dictionary</name><argument_list pos:line="205" pos:column="34">&lt;<argument><name pos:line="205" pos:column="35">XName</name></argument>,<argument><name><name pos:line="205" pos:column="41">List</name><argument_list pos:line="205" pos:column="45">&lt;<argument><name pos:line="205" pos:column="46">XElement</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="205" pos:column="57">GenerateUnitChildDictionary</name><parameter_list pos:line="205" pos:column="84">(<param><decl><type><name pos:line="205" pos:column="85">SrcMLFile</name></type> <name pos:line="205" pos:column="95">document</name></decl></param>)</parameter_list>
        <block pos:line="206" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="207" pos:column="13">var</name></type> <name pos:line="207" pos:column="17">unitChildDictionary</name> <init pos:line="207" pos:column="37">= <expr><op:operator pos:line="207" pos:column="39">new</op:operator> <call><name><name pos:line="207" pos:column="43">Dictionary</name><argument_list pos:line="207" pos:column="53">&lt;<argument><name pos:line="207" pos:column="54">XName</name></argument>,<argument><name><name pos:line="207" pos:column="60">List</name><argument_list pos:line="207" pos:column="64">&lt;<argument><name pos:line="207" pos:column="65">XElement</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list pos:line="207" pos:column="75">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="208" pos:column="13">foreach(<init><decl><type><name pos:line="208" pos:column="21">var</name></type> <name pos:line="208" pos:column="25">unit</name> <range pos:line="208" pos:column="30">in <expr><name><name pos:line="208" pos:column="33">document</name><op:operator pos:line="208" pos:column="41">.</op:operator><name pos:line="208" pos:column="42">FileUnits</name></name></expr></range></decl></init>)
            <block pos:line="209" pos:column="13">{
                <foreach pos:line="210" pos:column="17">foreach (<init><decl><type><name pos:line="210" pos:column="26">var</name></type> <name pos:line="210" pos:column="30">child</name> <range pos:line="210" pos:column="36">in <expr><call><name><name pos:line="210" pos:column="39">unit</name><op:operator pos:line="210" pos:column="43">.</op:operator><name pos:line="210" pos:column="44">Elements</name></name><argument_list pos:line="210" pos:column="52">()</argument_list></call></expr></range></decl></init>)
                <block pos:line="211" pos:column="17">{
                    <decl_stmt><decl><type><name><name pos:line="212" pos:column="21">List</name><argument_list pos:line="212" pos:column="25">&lt;<argument><name pos:line="212" pos:column="26">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="212" pos:column="36">nameList</name> <init pos:line="212" pos:column="45">= <expr><name pos:line="212" pos:column="47">null</name></expr></init></decl>;</decl_stmt>
                    <if pos:line="213" pos:column="21">if<condition pos:line="213" pos:column="23">(<expr><call><name><name pos:line="213" pos:column="24">unitChildDictionary</name><op:operator pos:line="213" pos:column="43">.</op:operator><name pos:line="213" pos:column="44">TryGetValue</name></name><argument_list pos:line="213" pos:column="55">(<argument><expr><name><name pos:line="213" pos:column="56">child</name><op:operator pos:line="213" pos:column="61">.</op:operator><name pos:line="213" pos:column="62">Name</name></name></expr></argument>, <argument><expr pos:line="213" pos:column="68">out <name pos:line="213" pos:column="72">nameList</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="213" pos:column="82">
                    <block pos:line="214" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="215" pos:column="25">nameList</name><op:operator pos:line="215" pos:column="33">.</op:operator><name pos:line="215" pos:column="34">Add</name></name><argument_list pos:line="215" pos:column="37">(<argument><expr><name pos:line="215" pos:column="38">child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else pos:line="217" pos:column="21">else
                    <block pos:line="218" pos:column="21">{
                        <expr_stmt><expr><name pos:line="219" pos:column="25">nameList</name> <op:operator pos:line="219" pos:column="34">=</op:operator> <op:operator pos:line="219" pos:column="36">new</op:operator> <call><name><name pos:line="219" pos:column="40">List</name><argument_list pos:line="219" pos:column="44">&lt;<argument><name pos:line="219" pos:column="45">XElement</name></argument>&gt;</argument_list></name><argument_list pos:line="219" pos:column="54">()</argument_list></call> <block pos:line="219" pos:column="57">{ <expr><name pos:line="219" pos:column="59">child</name></expr> }</block></expr>;</expr_stmt>
                    }</block></else></if>
                    <expr_stmt><expr><name><name pos:line="221" pos:column="21">unitChildDictionary</name><index pos:line="221" pos:column="40">[<expr><name><name pos:line="221" pos:column="41">child</name><op:operator pos:line="221" pos:column="46">.</op:operator><name pos:line="221" pos:column="47">Name</name></name></expr>]</index></name> <op:operator pos:line="221" pos:column="53">=</op:operator> <name pos:line="221" pos:column="55">nameList</name></expr>;</expr_stmt>
                }</block></foreach>
            }</block></foreach>
            <return pos:line="224" pos:column="13">return <expr><name pos:line="224" pos:column="20">unitChildDictionary</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="227" pos:column="9">private</specifier> <specifier pos:line="227" pos:column="17">static</specifier> <name pos:line="227" pos:column="24">SrcMLGenerator</name></type> <name pos:line="227" pos:column="39">GetGeneratorWithDirectory</name><parameter_list pos:line="227" pos:column="64">(<param><decl><type><name pos:line="227" pos:column="65">string</name></type> <name pos:line="227" pos:column="72">directory</name></decl></param>)</parameter_list>
        <block pos:line="228" pos:column="9">{
            <if pos:line="229" pos:column="13">if <condition pos:line="229" pos:column="16">(<expr><op:operator pos:line="229" pos:column="17">!</op:operator><call><name><name pos:line="229" pos:column="18">Directory</name><op:operator pos:line="229" pos:column="27">.</op:operator><name pos:line="229" pos:column="28">Exists</name></name><argument_list pos:line="229" pos:column="34">(<argument><expr><name pos:line="229" pos:column="35">directory</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="229" pos:column="46">
            <block pos:line="230" pos:column="13">{
                <throw pos:line="231" pos:column="17">throw <expr><op:operator pos:line="231" pos:column="23">new</op:operator> <call><name pos:line="231" pos:column="27">DirectoryNotFoundException</name><argument_list pos:line="231" pos:column="53">(<argument><expr><call><name><name pos:line="231" pos:column="54">String</name><op:operator pos:line="231" pos:column="60">.</op:operator><name pos:line="231" pos:column="61">Format</name></name><argument_list pos:line="231" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="231" pos:column="68">"{0} does not exist"</lit:literal></expr></argument>, <argument><expr><name pos:line="231" pos:column="90">directory</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <comment type="line" pos:line="233" pos:column="13">//if (!File.Exists(runner.ExecutablePath))</comment>
            <comment type="line" pos:line="234" pos:column="13">//{</comment>
            <comment type="line" pos:line="235" pos:column="13">//    throw new FileNotFoundException(String.Format("{0} does not exist", runner.ExecutablePath));</comment>
            <comment type="line" pos:line="236" pos:column="13">//}</comment>
            <return pos:line="237" pos:column="13">return <expr><op:operator pos:line="237" pos:column="20">new</op:operator> <call><name pos:line="237" pos:column="24">SrcMLGenerator</name><argument_list pos:line="237" pos:column="38">(<argument><expr><name pos:line="237" pos:column="39">directory</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
