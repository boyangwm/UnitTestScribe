<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data\TryStatement.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2014 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Patrick Francis (ABB Group) - initial API, implementation, &amp; documentation
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="13" pos:column="1">using <name pos:line="13" pos:column="7">System</name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Collections</name><op:operator pos:line="14" pos:column="25">.</op:operator><name pos:line="14" pos:column="26">Generic</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Collections</name><op:operator pos:line="15" pos:column="25">.</op:operator><name pos:line="15" pos:column="26">ObjectModel</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Linq</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Text</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Xml</name></name>;</using>

<namespace pos:line="20" pos:column="1">namespace <name><name pos:line="20" pos:column="11">ABB</name><op:operator pos:line="20" pos:column="14">.</op:operator><name pos:line="20" pos:column="15">SrcML</name><op:operator pos:line="20" pos:column="20">.</op:operator><name pos:line="20" pos:column="21">Data</name></name> <block pos:line="20" pos:column="26">{
    <comment type="line" pos:line="21" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="22" pos:column="5">/// Represents a try block in a program.</comment>
    <comment type="line" pos:line="23" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="24" pos:column="5">public</specifier> class <name pos:line="24" pos:column="18">TryStatement</name> <super pos:line="24" pos:column="31">: <name pos:line="24" pos:column="33">BlockStatement</name></super> <block pos:line="24" pos:column="48">{
        <decl_stmt><decl><type><specifier pos:line="25" pos:column="9">private</specifier> <name><name pos:line="25" pos:column="17">List</name><argument_list pos:line="25" pos:column="21">&lt;<argument><name pos:line="25" pos:column="22">CatchStatement</name></argument>&gt;</argument_list></name></type> <name pos:line="25" pos:column="38">catchStatementsList</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="26" pos:column="9">private</specifier> <name><name pos:line="26" pos:column="17">List</name><argument_list pos:line="26" pos:column="21">&lt;<argument><name pos:line="26" pos:column="22">Statement</name></argument>&gt;</argument_list></name></type> <name pos:line="26" pos:column="33">finallyStatementsList</name></decl>;</decl_stmt>

        <comment type="line" pos:line="28" pos:column="9">/// &lt;summary&gt; The XML name for TryStatement &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="29" pos:column="9">public</specifier> <specifier pos:line="29" pos:column="16">new</specifier> <specifier pos:line="29" pos:column="20">const</specifier> <name pos:line="29" pos:column="26">string</name></type> <name pos:line="29" pos:column="33">XmlName</name> <init pos:line="29" pos:column="41">= <expr><lit:literal type="string" pos:line="29" pos:column="43">"Try"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="31" pos:column="9">/// &lt;summary&gt; XML Name for &lt;see cref="CatchStatements" /&gt; &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="32" pos:column="9">public</specifier> <specifier pos:line="32" pos:column="16">const</specifier> <name pos:line="32" pos:column="22">string</name></type> <name pos:line="32" pos:column="29">XmlCatchName</name> <init pos:line="32" pos:column="42">= <expr><lit:literal type="string" pos:line="32" pos:column="44">"Catch"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="34" pos:column="9">/// &lt;summary&gt; XML Name for &lt;see cref="FinallyStatements" /&gt; &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="35" pos:column="9">public</specifier> <specifier pos:line="35" pos:column="16">const</specifier> <name pos:line="35" pos:column="22">string</name></type> <name pos:line="35" pos:column="29">XmlFinallyName</name> <init pos:line="35" pos:column="44">= <expr><lit:literal type="string" pos:line="35" pos:column="46">"Finally"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="37" pos:column="9">/// &lt;summary&gt; Creates a new empty TryStatement. &lt;/summary&gt;</comment>
        <constructor><specifier pos:line="38" pos:column="9">public</specifier> <name pos:line="38" pos:column="16">TryStatement</name><parameter_list pos:line="38" pos:column="28">()</parameter_list> <member_list pos:line="38" pos:column="31">: <call><name pos:line="38" pos:column="33">base</name><argument_list pos:line="38" pos:column="37">()</argument_list></call> </member_list><block pos:line="38" pos:column="40">{
            <expr_stmt><expr><name pos:line="39" pos:column="13">catchStatementsList</name> <op:operator pos:line="39" pos:column="33">=</op:operator> <op:operator pos:line="39" pos:column="35">new</op:operator> <call><name><name pos:line="39" pos:column="39">List</name><argument_list pos:line="39" pos:column="43">&lt;<argument><name pos:line="39" pos:column="44">CatchStatement</name></argument>&gt;</argument_list></name><argument_list pos:line="39" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="40" pos:column="13">CatchStatements</name> <op:operator pos:line="40" pos:column="29">=</op:operator> <op:operator pos:line="40" pos:column="31">new</op:operator> <call><name><name pos:line="40" pos:column="35">ReadOnlyCollection</name><argument_list pos:line="40" pos:column="53">&lt;<argument><name pos:line="40" pos:column="54">CatchStatement</name></argument>&gt;</argument_list></name><argument_list pos:line="40" pos:column="69">(<argument><expr><name pos:line="40" pos:column="70">catchStatementsList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="41" pos:column="13">finallyStatementsList</name> <op:operator pos:line="41" pos:column="35">=</op:operator> <op:operator pos:line="41" pos:column="37">new</op:operator> <call><name><name pos:line="41" pos:column="41">List</name><argument_list pos:line="41" pos:column="45">&lt;<argument><name pos:line="41" pos:column="46">Statement</name></argument>&gt;</argument_list></name><argument_list pos:line="41" pos:column="56">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="42" pos:column="13">FinallyStatements</name> <op:operator pos:line="42" pos:column="31">=</op:operator> <op:operator pos:line="42" pos:column="33">new</op:operator> <call><name><name pos:line="42" pos:column="37">ReadOnlyCollection</name><argument_list pos:line="42" pos:column="55">&lt;<argument><name pos:line="42" pos:column="56">Statement</name></argument>&gt;</argument_list></name><argument_list pos:line="42" pos:column="66">(<argument><expr><name pos:line="42" pos:column="67">finallyStatementsList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="45" pos:column="9">/// &lt;summary&gt; The catch statements associated with this try, if any. &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="46" pos:column="9">public</specifier> <name><name pos:line="46" pos:column="16">ReadOnlyCollection</name><argument_list pos:line="46" pos:column="34">&lt;<argument><name pos:line="46" pos:column="35">CatchStatement</name></argument>&gt;</argument_list></name></type> <name pos:line="46" pos:column="51">CatchStatements</name> <block pos:line="46" pos:column="67">{ <function_decl><name pos:line="46" pos:column="69">get</name>;</function_decl> <function_decl><specifier pos:line="46" pos:column="74">private</specifier> <name pos:line="46" pos:column="82">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="48" pos:column="9">/// &lt;summary&gt; The contents of the finally block associated with this try, if any. &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="49" pos:column="9">public</specifier> <name><name pos:line="49" pos:column="16">ReadOnlyCollection</name><argument_list pos:line="49" pos:column="34">&lt;<argument><name pos:line="49" pos:column="35">Statement</name></argument>&gt;</argument_list></name></type> <name pos:line="49" pos:column="46">FinallyStatements</name> <block pos:line="49" pos:column="64">{ <function_decl><name pos:line="49" pos:column="66">get</name>;</function_decl> <function_decl><specifier pos:line="49" pos:column="71">private</specifier> <name pos:line="49" pos:column="79">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="51" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="52" pos:column="9">/// Instance method for getting &lt;see cref="TryStatement.XmlName"/&gt;</comment>
        <comment type="line" pos:line="53" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="54" pos:column="9">/// &lt;returns&gt;Returns the XML name for TryStatement&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="55" pos:column="9">public</specifier> <specifier pos:line="55" pos:column="16">override</specifier> <name pos:line="55" pos:column="25">string</name></type> <name pos:line="55" pos:column="32">GetXmlName</name><parameter_list pos:line="55" pos:column="42">()</parameter_list> <block pos:line="55" pos:column="45">{ <return pos:line="55" pos:column="47">return <expr><name><name pos:line="55" pos:column="54">TryStatement</name><op:operator pos:line="55" pos:column="66">.</op:operator><name pos:line="55" pos:column="67">XmlName</name></name></expr>;</return> }</block></function>

        <comment type="line" pos:line="57" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="58" pos:column="9">/// Adds the given catch to the CatchStatements collection.</comment>
        <comment type="line" pos:line="59" pos:column="9">/// If &lt;paramref name="catchStmt"/&gt; is null, nothing will be done.</comment>
        <comment type="line" pos:line="60" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="61" pos:column="9">/// &lt;param name="catchStmt"&gt;The catch statement to add.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="62" pos:column="9">public</specifier> <name pos:line="62" pos:column="16">void</name></type> <name pos:line="62" pos:column="21">AddCatchStatement</name><parameter_list pos:line="62" pos:column="38">(<param><decl><type><name pos:line="62" pos:column="39">CatchStatement</name></type> <name pos:line="62" pos:column="54">catchStmt</name></decl></param>)</parameter_list> <block pos:line="62" pos:column="65">{
            <if pos:line="63" pos:column="13">if<condition pos:line="63" pos:column="15">(<expr><name pos:line="63" pos:column="16">catchStmt</name> <op:operator pos:line="63" pos:column="26">!=</op:operator> <name pos:line="63" pos:column="29">null</name></expr>)</condition><then pos:line="63" pos:column="34"> <block pos:line="63" pos:column="35">{
                <expr_stmt><expr><name><name pos:line="64" pos:column="17">catchStmt</name><op:operator pos:line="64" pos:column="26">.</op:operator><name pos:line="64" pos:column="27">ParentStatement</name></name> <op:operator pos:line="64" pos:column="43">=</op:operator> <name pos:line="64" pos:column="45">this</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="65" pos:column="17">catchStatementsList</name><op:operator pos:line="65" pos:column="36">.</op:operator><name pos:line="65" pos:column="37">Add</name></name><argument_list pos:line="65" pos:column="40">(<argument><expr><name pos:line="65" pos:column="41">catchStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="69" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="70" pos:column="9">/// Adds the given catches to the CatchStatements collection.</comment>
        <comment type="line" pos:line="71" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="72" pos:column="9">/// &lt;param name="catchStmts"&gt;An enumerable of catch statements to add.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="73" pos:column="9">public</specifier> <name pos:line="73" pos:column="16">void</name></type> <name pos:line="73" pos:column="21">AddCatchStatements</name><parameter_list pos:line="73" pos:column="39">(<param><decl><type><name><name pos:line="73" pos:column="40">IEnumerable</name><argument_list pos:line="73" pos:column="51">&lt;<argument><name pos:line="73" pos:column="52">CatchStatement</name></argument>&gt;</argument_list></name></type> <name pos:line="73" pos:column="68">catchStmts</name></decl></param>)</parameter_list> <block pos:line="73" pos:column="80">{
            <foreach pos:line="74" pos:column="13">foreach(<init><decl><type><name pos:line="74" pos:column="21">var</name></type> <name pos:line="74" pos:column="25">stmt</name> <range pos:line="74" pos:column="30">in <expr><name pos:line="74" pos:column="33">catchStmts</name></expr></range></decl></init>) <block pos:line="74" pos:column="45">{
                <expr_stmt><expr><call><name pos:line="75" pos:column="17">AddCatchStatement</name><argument_list pos:line="75" pos:column="34">(<argument><expr><name pos:line="75" pos:column="35">stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>

        <comment type="line" pos:line="79" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="80" pos:column="9">/// Adds the given statement to the FinallyStatements collection.</comment>
        <comment type="line" pos:line="81" pos:column="9">/// If &lt;paramref name="finallyStmt"/&gt; is null, nothing will be done.</comment>
        <comment type="line" pos:line="82" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="83" pos:column="9">/// &lt;param name="finallyStmt"&gt;The statement to add.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="84" pos:column="9">public</specifier> <name pos:line="84" pos:column="16">void</name></type> <name pos:line="84" pos:column="21">AddFinallyStatement</name><parameter_list pos:line="84" pos:column="40">(<param><decl><type><name pos:line="84" pos:column="41">Statement</name></type> <name pos:line="84" pos:column="51">finallyStmt</name></decl></param>)</parameter_list> <block pos:line="84" pos:column="64">{
            <if pos:line="85" pos:column="13">if<condition pos:line="85" pos:column="15">(<expr><name pos:line="85" pos:column="16">finallyStmt</name> <op:operator pos:line="85" pos:column="28">!=</op:operator> <name pos:line="85" pos:column="31">null</name></expr>)</condition><then pos:line="85" pos:column="36"> <block pos:line="85" pos:column="37">{
                <expr_stmt><expr><name><name pos:line="86" pos:column="17">finallyStmt</name><op:operator pos:line="86" pos:column="28">.</op:operator><name pos:line="86" pos:column="29">ParentStatement</name></name> <op:operator pos:line="86" pos:column="45">=</op:operator> <name pos:line="86" pos:column="47">this</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="87" pos:column="17">finallyStatementsList</name><op:operator pos:line="87" pos:column="38">.</op:operator><name pos:line="87" pos:column="39">Add</name></name><argument_list pos:line="87" pos:column="42">(<argument><expr><name pos:line="87" pos:column="43">finallyStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="91" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="92" pos:column="9">/// Adds the given statements to the FinallyStatements collection.</comment>
        <comment type="line" pos:line="93" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="94" pos:column="9">/// &lt;param name="finallyStmts"&gt;An enumerable of statements to add.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="95" pos:column="9">public</specifier> <name pos:line="95" pos:column="16">void</name></type> <name pos:line="95" pos:column="21">AddFinallyStatements</name><parameter_list pos:line="95" pos:column="41">(<param><decl><type><name><name pos:line="95" pos:column="42">IEnumerable</name><argument_list pos:line="95" pos:column="53">&lt;<argument><name pos:line="95" pos:column="54">Statement</name></argument>&gt;</argument_list></name></type> <name pos:line="95" pos:column="65">finallyStmts</name></decl></param>)</parameter_list> <block pos:line="95" pos:column="79">{
            <foreach pos:line="96" pos:column="13">foreach(<init><decl><type><name pos:line="96" pos:column="21">var</name></type> <name pos:line="96" pos:column="25">stmt</name> <range pos:line="96" pos:column="30">in <expr><name pos:line="96" pos:column="33">finallyStmts</name></expr></range></decl></init>) <block pos:line="96" pos:column="47">{
                <expr_stmt><expr><call><name pos:line="97" pos:column="17">AddFinallyStatement</name><argument_list pos:line="97" pos:column="36">(<argument><expr><name pos:line="97" pos:column="37">stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>

        <comment type="line" pos:line="101" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="102" pos:column="9">/// Returns the child statements, including the catch and finally statements.</comment>
        <comment type="line" pos:line="103" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="104" pos:column="9">protected</specifier> <specifier pos:line="104" pos:column="19">override</specifier> <name><name pos:line="104" pos:column="28">IEnumerable</name><argument_list pos:line="104" pos:column="39">&lt;<argument><name pos:line="104" pos:column="40">AbstractProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="104" pos:column="64">GetChildren</name><parameter_list pos:line="104" pos:column="75">()</parameter_list> <block pos:line="104" pos:column="78">{
            <return pos:line="105" pos:column="13">return <expr><call><name><name pos:line="105" pos:column="20">base</name><op:operator pos:line="105" pos:column="24">.</op:operator><name pos:line="105" pos:column="25">GetChildren</name></name><argument_list pos:line="105" pos:column="36">()</argument_list></call><op:operator pos:line="105" pos:column="38">.</op:operator><call><name pos:line="105" pos:column="39">Concat</name><argument_list pos:line="105" pos:column="45">(<argument><expr><name pos:line="105" pos:column="46">CatchStatements</name></expr></argument>)</argument_list></call><op:operator pos:line="105" pos:column="62">.</op:operator><call><name pos:line="105" pos:column="63">Concat</name><argument_list pos:line="105" pos:column="69">(<argument><expr><name pos:line="105" pos:column="70">FinallyStatements</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="108" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="109" pos:column="9">/// Processes the child of the current reader position into a child of this object.</comment>
        <comment type="line" pos:line="110" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="111" pos:column="9">/// &lt;param name="reader"&gt;The XML reader&lt;/param&gt;</comment>
        <function><type><specifier pos:line="112" pos:column="9">protected</specifier> <specifier pos:line="112" pos:column="19">override</specifier> <name pos:line="112" pos:column="28">void</name></type> <name pos:line="112" pos:column="33">ReadXmlChild</name><parameter_list pos:line="112" pos:column="45">(<param><decl><type><name pos:line="112" pos:column="46">XmlReader</name></type> <name pos:line="112" pos:column="56">reader</name></decl></param>)</parameter_list> <block pos:line="112" pos:column="64">{
            <if pos:line="113" pos:column="13">if<condition pos:line="113" pos:column="15">(<expr><name pos:line="113" pos:column="16">XmlCatchName</name> <op:operator pos:line="113" pos:column="29">==</op:operator> <name><name pos:line="113" pos:column="32">reader</name><op:operator pos:line="113" pos:column="38">.</op:operator><name pos:line="113" pos:column="39">Name</name></name></expr>)</condition><then pos:line="113" pos:column="44"> <block pos:line="113" pos:column="45">{
                <expr_stmt><expr><call><name pos:line="114" pos:column="17">AddCatchStatements</name><argument_list pos:line="114" pos:column="35">(<argument><expr><call><name><name pos:line="114" pos:column="36">XmlSerialization</name><op:operator pos:line="114" pos:column="52">.</op:operator><name pos:line="114" pos:column="53">ReadChildStatements</name></name><argument_list pos:line="114" pos:column="72">(<argument><expr><name pos:line="114" pos:column="73">reader</name></expr></argument>)</argument_list></call><op:operator pos:line="114" pos:column="80">.</op:operator><call><name><name pos:line="114" pos:column="81">Cast</name><argument_list pos:line="114" pos:column="85">&lt;<argument><name pos:line="114" pos:column="86">CatchStatement</name></argument>&gt;</argument_list></name><argument_list pos:line="114" pos:column="101">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="115" pos:column="15">else <if pos:line="115" pos:column="20">if<condition pos:line="115" pos:column="22">(<expr><name pos:line="115" pos:column="23">XmlFinallyName</name> <op:operator pos:line="115" pos:column="38">==</op:operator> <name><name pos:line="115" pos:column="41">reader</name><op:operator pos:line="115" pos:column="47">.</op:operator><name pos:line="115" pos:column="48">Name</name></name></expr>)</condition><then pos:line="115" pos:column="53"> <block pos:line="115" pos:column="54">{
                <expr_stmt><expr><call><name pos:line="116" pos:column="17">AddFinallyStatements</name><argument_list pos:line="116" pos:column="37">(<argument><expr><call><name><name pos:line="116" pos:column="38">XmlSerialization</name><op:operator pos:line="116" pos:column="54">.</op:operator><name pos:line="116" pos:column="55">ReadChildStatements</name></name><argument_list pos:line="116" pos:column="74">(<argument><expr><name pos:line="116" pos:column="75">reader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="117" pos:column="15">else <block pos:line="117" pos:column="20">{
                <expr_stmt><expr><call><name><name pos:line="118" pos:column="17">base</name><op:operator pos:line="118" pos:column="21">.</op:operator><name pos:line="118" pos:column="22">ReadXmlChild</name></name><argument_list pos:line="118" pos:column="34">(<argument><expr><name pos:line="118" pos:column="35">reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if></else></if>
        }</block></function>

        <comment type="line" pos:line="122" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="123" pos:column="9">/// Writes the contents of this object to &lt;paramref name="writer"/&gt;.</comment>
        <comment type="line" pos:line="124" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="125" pos:column="9">/// &lt;param name="writer"&gt;The XML writer to write to&lt;/param&gt;</comment>
        <function><type><specifier pos:line="126" pos:column="9">protected</specifier> <specifier pos:line="126" pos:column="19">override</specifier> <name pos:line="126" pos:column="28">void</name></type> <name pos:line="126" pos:column="33">WriteXmlContents</name><parameter_list pos:line="126" pos:column="49">(<param><decl><type><name pos:line="126" pos:column="50">XmlWriter</name></type> <name pos:line="126" pos:column="60">writer</name></decl></param>)</parameter_list> <block pos:line="126" pos:column="68">{
            <expr_stmt><expr><call><name><name pos:line="127" pos:column="13">base</name><op:operator pos:line="127" pos:column="17">.</op:operator><name pos:line="127" pos:column="18">WriteXmlContents</name></name><argument_list pos:line="127" pos:column="34">(<argument><expr><name pos:line="127" pos:column="35">writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if pos:line="128" pos:column="13">if<condition pos:line="128" pos:column="15">(<expr><name pos:line="128" pos:column="16">null</name> <op:operator pos:line="128" pos:column="21">!=</op:operator> <name pos:line="128" pos:column="24">CatchStatements</name></expr>)</condition><then pos:line="128" pos:column="40"> <block pos:line="128" pos:column="41">{
                <expr_stmt><expr><call><name><name pos:line="129" pos:column="17">XmlSerialization</name><op:operator pos:line="129" pos:column="33">.</op:operator><name><name pos:line="129" pos:column="34">WriteCollection</name><argument_list pos:line="129" pos:column="49">&lt;<argument><name pos:line="129" pos:column="50">CatchStatement</name></argument>&gt;</argument_list></name></name><argument_list pos:line="129" pos:column="65">(<argument><expr><name pos:line="129" pos:column="66">writer</name></expr></argument>, <argument><expr><name pos:line="129" pos:column="74">XmlCatchName</name></expr></argument>, <argument><expr><name pos:line="129" pos:column="88">CatchStatements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if pos:line="131" pos:column="13">if<condition pos:line="131" pos:column="15">(<expr><name pos:line="131" pos:column="16">null</name> <op:operator pos:line="131" pos:column="21">!=</op:operator> <name pos:line="131" pos:column="24">FinallyStatements</name></expr>)</condition><then pos:line="131" pos:column="42"> <block pos:line="131" pos:column="43">{
                <expr_stmt><expr><call><name><name pos:line="132" pos:column="17">XmlSerialization</name><op:operator pos:line="132" pos:column="33">.</op:operator><name><name pos:line="132" pos:column="34">WriteCollection</name><argument_list pos:line="132" pos:column="49">&lt;<argument><name pos:line="132" pos:column="50">Statement</name></argument>&gt;</argument_list></name></name><argument_list pos:line="132" pos:column="60">(<argument><expr><name pos:line="132" pos:column="61">writer</name></expr></argument>, <argument><expr><name pos:line="132" pos:column="69">XmlFinallyName</name></expr></argument>, <argument><expr><name pos:line="132" pos:column="85">FinallyStatements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="136" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="137" pos:column="9">/// Returns the children of this statement that have the same name as the given &lt;paramref name="use"/&gt;, and the given type.</comment>
        <comment type="line" pos:line="138" pos:column="9">/// This method searches only the immediate children, and not further descendants.</comment>
        <comment type="line" pos:line="139" pos:column="9">/// If the &lt;paramref name="use"/&gt; occurs within this statement, this method will return only the children</comment>
        <comment type="line" pos:line="140" pos:column="9">/// that occur prior to that use.</comment>
        <comment type="line" pos:line="141" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="142" pos:column="9">/// &lt;typeparam name="T"&gt;The type of children to return.&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="143" pos:column="9">/// &lt;param name="use"&gt;The use containing the name to search for.&lt;/param&gt;</comment>
        <comment type="line" pos:line="144" pos:column="9">/// &lt;param name="searchDeclarations"&gt;Whether to search the child DeclarationStatements for named entities.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="145" pos:column="9">public</specifier> <specifier pos:line="145" pos:column="16">override</specifier> <name><name pos:line="145" pos:column="25">IEnumerable</name><argument_list pos:line="145" pos:column="36">&lt;<argument><name pos:line="145" pos:column="37">T</name></argument>&gt;</argument_list></name></type> <name><name pos:line="145" pos:column="40">GetNamedChildren</name><argument_list pos:line="145" pos:column="56">&lt;<argument><name pos:line="145" pos:column="57">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="145" pos:column="59">(<param><decl><type><name pos:line="145" pos:column="60">NameUse</name></type> <name pos:line="145" pos:column="68">use</name></decl></param>, <param><decl><type><name pos:line="145" pos:column="73">bool</name></type> <name pos:line="145" pos:column="78">searchDeclarations</name></decl></param>)</parameter_list> <block pos:line="145" pos:column="98">{
            <decl_stmt><decl><type><name pos:line="146" pos:column="13">var</name></type> <name pos:line="146" pos:column="17">matches</name> <init pos:line="146" pos:column="25">= <expr><call><name><name pos:line="146" pos:column="27">base</name><op:operator pos:line="146" pos:column="31">.</op:operator><name><name pos:line="146" pos:column="32">GetNamedChildren</name><argument_list pos:line="146" pos:column="48">&lt;<argument><name pos:line="146" pos:column="49">T</name></argument>&gt;</argument_list></name></name><argument_list pos:line="146" pos:column="51">(<argument><expr><name pos:line="146" pos:column="52">use</name></expr></argument>, <argument><expr><name pos:line="146" pos:column="57">searchDeclarations</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="147" pos:column="13">//check if we should filter the results</comment>
            <if pos:line="148" pos:column="13">if<condition pos:line="148" pos:column="15">(<expr><name><name pos:line="148" pos:column="16">ChildStatements</name><op:operator pos:line="148" pos:column="31">.</op:operator><name pos:line="148" pos:column="32">Count</name></name> <op:operator pos:line="148" pos:column="38">&gt;</op:operator> <lit:literal type="number" pos:line="148" pos:column="40">0</lit:literal></expr>)</condition><then pos:line="148" pos:column="42"> <block pos:line="148" pos:column="43">{
                <decl_stmt><decl><type><name pos:line="149" pos:column="17">var</name></type> <name pos:line="149" pos:column="21">firstTryLoc</name> <init pos:line="149" pos:column="33">= <expr><call><name><name pos:line="149" pos:column="35">ChildStatements</name><op:operator pos:line="149" pos:column="50">.</op:operator><name pos:line="149" pos:column="51">First</name></name><argument_list pos:line="149" pos:column="56">()</argument_list></call><op:operator pos:line="149" pos:column="58">.</op:operator><name pos:line="149" pos:column="59">PrimaryLocation</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="150" pos:column="17">var</name></type> <name pos:line="150" pos:column="21">lastTryLoc</name> <init pos:line="150" pos:column="32">= <expr><call><name><name pos:line="150" pos:column="34">ChildStatements</name><op:operator pos:line="150" pos:column="49">.</op:operator><name pos:line="150" pos:column="50">Last</name></name><argument_list pos:line="150" pos:column="54">()</argument_list></call><op:operator pos:line="150" pos:column="56">.</op:operator><name pos:line="150" pos:column="57">PrimaryLocation</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="151" pos:column="17">var</name></type> <name pos:line="151" pos:column="21">tryBlockLocation</name> <init pos:line="151" pos:column="38">= <expr><op:operator pos:line="151" pos:column="40">new</op:operator> <call><name pos:line="151" pos:column="44">SourceLocation</name><argument_list pos:line="151" pos:column="58">(<argument><expr><name><name pos:line="151" pos:column="59">firstTryLoc</name><op:operator pos:line="151" pos:column="70">.</op:operator><name pos:line="151" pos:column="71">SourceFileName</name></name></expr></argument>, <argument><expr><name><name pos:line="151" pos:column="87">firstTryLoc</name><op:operator pos:line="151" pos:column="98">.</op:operator><name pos:line="151" pos:column="99">StartingLineNumber</name></name></expr></argument>, <argument><expr><name><name pos:line="151" pos:column="119">firstTryLoc</name><op:operator pos:line="151" pos:column="130">.</op:operator><name pos:line="151" pos:column="131">StartingColumnNumber</name></name></expr></argument>, <argument><expr><name><name pos:line="151" pos:column="153">lastTryLoc</name><op:operator pos:line="151" pos:column="163">.</op:operator><name pos:line="151" pos:column="164">EndingLineNumber</name></name></expr></argument>, <argument><expr><name><name pos:line="151" pos:column="182">lastTryLoc</name><op:operator pos:line="151" pos:column="192">.</op:operator><name pos:line="151" pos:column="193">EndingColumnNumber</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="152" pos:column="17">if<condition pos:line="152" pos:column="19">(<expr><call><name><name pos:line="152" pos:column="20">this</name><op:operator pos:line="152" pos:column="24">.</op:operator><name pos:line="152" pos:column="25">PrimaryLocation</name><op:operator pos:line="152" pos:column="40">.</op:operator><name pos:line="152" pos:column="41">Contains</name></name><argument_list pos:line="152" pos:column="49">(<argument><expr><name><name pos:line="152" pos:column="50">use</name><op:operator pos:line="152" pos:column="53">.</op:operator><name pos:line="152" pos:column="54">Location</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="152" pos:column="64">&amp;&amp;</op:operator> <op:operator pos:line="152" pos:column="67">!</op:operator><call><name><name pos:line="152" pos:column="68">tryBlockLocation</name><op:operator pos:line="152" pos:column="84">.</op:operator><name pos:line="152" pos:column="85">Contains</name></name><argument_list pos:line="152" pos:column="93">(<argument><expr><name><name pos:line="152" pos:column="94">use</name><op:operator pos:line="152" pos:column="97">.</op:operator><name pos:line="152" pos:column="98">Location</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="152" pos:column="108"> <block pos:line="152" pos:column="109">{
                    <comment type="line" pos:line="153" pos:column="21">//the use is within the overall TryStatement, but not in the try block. Don't return results from the try block</comment>
                    <return pos:line="154" pos:column="21">return <expr><call><name><name pos:line="154" pos:column="28">matches</name><op:operator pos:line="154" pos:column="35">.</op:operator><name pos:line="154" pos:column="36">SkipWhile</name></name><argument_list pos:line="154" pos:column="45">(<argument><expr><lambda><name pos:line="154" pos:column="46">m</name> <op:operator pos:line="154" pos:column="48">=&gt;</op:operator> <call><name><name pos:line="154" pos:column="51">tryBlockLocation</name><op:operator pos:line="154" pos:column="67">.</op:operator><name pos:line="154" pos:column="68">Contains</name></name><argument_list pos:line="154" pos:column="76">(<argument><expr><call><name><name pos:line="154" pos:column="77">m</name><op:operator pos:line="154" pos:column="78">.</op:operator><name pos:line="154" pos:column="79">GetLocations</name></name><argument_list pos:line="154" pos:column="91">()</argument_list></call><op:operator pos:line="154" pos:column="93">.</op:operator><call><name pos:line="154" pos:column="94">First</name><argument_list pos:line="154" pos:column="99">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</return>
                }</block></then></if>
            }</block></then></if>
            <return pos:line="157" pos:column="13">return <expr><name pos:line="157" pos:column="20">matches</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="160" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="161" pos:column="9">/// Returns a string representation of this statement.</comment>
        <comment type="line" pos:line="162" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="163" pos:column="9">public</specifier> <specifier pos:line="163" pos:column="16">override</specifier> <name pos:line="163" pos:column="25">string</name></type> <name pos:line="163" pos:column="32">ToString</name><parameter_list pos:line="163" pos:column="40">()</parameter_list> <block pos:line="163" pos:column="43">{
            <return pos:line="164" pos:column="13">return <expr><lit:literal type="string" pos:line="164" pos:column="20">"try"</lit:literal></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
