<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Core\Framework\MessageBrokerShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Linq</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Glimpse</name><op:operator pos:line="3" pos:column="14">.</op:operator><name pos:line="3" pos:column="15">Core</name><op:operator pos:line="3" pos:column="19">.</op:operator><name pos:line="3" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Core</name><op:operator pos:line="4" pos:column="19">.</op:operator><name pos:line="4" pos:column="20">Message</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Glimpse</name><op:operator pos:line="5" pos:column="14">.</op:operator><name pos:line="5" pos:column="15">Test</name><op:operator pos:line="5" pos:column="19">.</op:operator><name pos:line="5" pos:column="20">Common</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Glimpse</name><op:operator pos:line="6" pos:column="14">.</op:operator><name pos:line="6" pos:column="15">Test</name><op:operator pos:line="6" pos:column="19">.</op:operator><name pos:line="6" pos:column="20">Core</name><op:operator pos:line="6" pos:column="24">.</op:operator><name pos:line="6" pos:column="25">TestDoubles</name></name>;</using>
<using pos:line="7" pos:column="1">using <name pos:line="7" pos:column="7">Moq</name>;</using>
<using pos:line="8" pos:column="1">using <name pos:line="8" pos:column="7">Xunit</name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">Xunit</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">Extensions</name></name>;</using>

<namespace pos:line="11" pos:column="1">namespace <name><name pos:line="11" pos:column="11">Glimpse</name><op:operator pos:line="11" pos:column="18">.</op:operator><name pos:line="11" pos:column="19">Test</name><op:operator pos:line="11" pos:column="23">.</op:operator><name pos:line="11" pos:column="24">Core</name><op:operator pos:line="11" pos:column="28">.</op:operator><name pos:line="11" pos:column="29">Framework</name></name>
<block pos:line="12" pos:column="1">{
    <class><specifier pos:line="13" pos:column="5">public</specifier> class <name pos:line="13" pos:column="18">MessageBrokerShould</name>
    <block pos:line="14" pos:column="5">{
        <function><type><attribute pos:line="15" pos:column="9">[<expr><name pos:line="15" pos:column="10">Theory</name></expr><op:operator pos:line="15" pos:column="16">,</op:operator> <expr><name pos:line="15" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="16" pos:column="9">public</specifier> <name pos:line="16" pos:column="16">void</name></type> <name pos:line="16" pos:column="21">Construct</name><parameter_list pos:line="16" pos:column="30">(<param><decl><type><name pos:line="16" pos:column="31">ILogger</name></type> <name pos:line="16" pos:column="39">logger</name></decl></param>)</parameter_list>
        <block pos:line="17" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="18" pos:column="13">var</name></type> <name pos:line="18" pos:column="17">sut</name> <init pos:line="18" pos:column="21">= <expr><op:operator pos:line="18" pos:column="23">new</op:operator> <call><name pos:line="18" pos:column="27">MessageBroker</name><argument_list pos:line="18" pos:column="40">(<argument><expr><name pos:line="18" pos:column="41">logger</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="20" pos:column="13">Assert</name><op:operator pos:line="20" pos:column="19">.</op:operator><name pos:line="20" pos:column="20">NotNull</name></name><argument_list pos:line="20" pos:column="27">(<argument><expr><name pos:line="20" pos:column="28">sut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="21" pos:column="13">Assert</name><op:operator pos:line="21" pos:column="19">.</op:operator><name pos:line="21" pos:column="20">Equal</name></name><argument_list pos:line="21" pos:column="25">(<argument><expr><name pos:line="21" pos:column="26">logger</name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="34">sut</name><op:operator pos:line="21" pos:column="37">.</op:operator><name pos:line="21" pos:column="38">Logger</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="24" pos:column="9">[<expr><name pos:line="24" pos:column="10">Theory</name></expr><op:operator pos:line="24" pos:column="16">,</op:operator> <expr><name pos:line="24" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="25" pos:column="9">public</specifier> <name pos:line="25" pos:column="16">void</name></type> <name pos:line="25" pos:column="21">SubscribeToEvents</name><parameter_list pos:line="25" pos:column="38">(<param><decl><type><name pos:line="25" pos:column="39">MessageBroker</name></type> <name pos:line="25" pos:column="53">sut</name></decl></param>)</parameter_list>
        <block pos:line="26" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="27" pos:column="13">sut</name><op:operator pos:line="27" pos:column="16">.</op:operator><name><name pos:line="27" pos:column="17">Subscribe</name><argument_list pos:line="27" pos:column="26">&lt;<argument><name pos:line="27" pos:column="27">DummyMessage</name></argument>&gt;</argument_list></name></name><argument_list pos:line="27" pos:column="40">(<argument><expr><lambda><name pos:line="27" pos:column="41">evt</name> <op:operator pos:line="27" pos:column="45">=&gt;</op:operator> <call><name><name pos:line="27" pos:column="48">Assert</name><op:operator pos:line="27" pos:column="54">.</op:operator><name><name pos:line="27" pos:column="55">IsType</name><argument_list pos:line="27" pos:column="61">&lt;<argument><name pos:line="27" pos:column="62">DummyMessage</name></argument>&gt;</argument_list></name></name><argument_list pos:line="27" pos:column="75">(<argument><expr><name pos:line="27" pos:column="76">evt</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="29" pos:column="13">Assert</name><op:operator pos:line="29" pos:column="19">.</op:operator><name pos:line="29" pos:column="20">True</name></name><argument_list pos:line="29" pos:column="24">(<argument><expr><name><name pos:line="29" pos:column="25">sut</name><op:operator pos:line="29" pos:column="28">.</op:operator><name pos:line="29" pos:column="29">Subscriptions</name><index pos:line="29" pos:column="42">[<expr><call><name pos:line="29" pos:column="43">typeof</name><argument_list pos:line="29" pos:column="49">(<argument><expr><name pos:line="29" pos:column="50">DummyMessage</name></expr></argument>)</argument_list></call></expr>]</index></name><op:operator pos:line="29" pos:column="64">.</op:operator><call><name pos:line="29" pos:column="65">Any</name><argument_list pos:line="29" pos:column="68">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="32" pos:column="9">[<expr><name pos:line="32" pos:column="10">Theory</name></expr><op:operator pos:line="32" pos:column="16">,</op:operator> <expr><name pos:line="32" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="33" pos:column="9">public</specifier> <name pos:line="33" pos:column="16">void</name></type> <name pos:line="33" pos:column="21">SubscribeToEventsGrowsSubscriberbase</name><parameter_list pos:line="33" pos:column="57">(<param><decl><type><name pos:line="33" pos:column="58">MessageBroker</name></type> <name pos:line="33" pos:column="72">sut</name></decl></param>)</parameter_list>
        <block pos:line="34" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="35" pos:column="13">sut</name><op:operator pos:line="35" pos:column="16">.</op:operator><name><name pos:line="35" pos:column="17">Subscribe</name><argument_list pos:line="35" pos:column="26">&lt;<argument><name pos:line="35" pos:column="27">DummyMessage</name></argument>&gt;</argument_list></name></name><argument_list pos:line="35" pos:column="40">(<argument><expr><lambda><name pos:line="35" pos:column="41">evt</name> <op:operator pos:line="35" pos:column="45">=&gt;</op:operator> <call><name><name pos:line="35" pos:column="48">Assert</name><op:operator pos:line="35" pos:column="54">.</op:operator><name><name pos:line="35" pos:column="55">IsType</name><argument_list pos:line="35" pos:column="61">&lt;<argument><name pos:line="35" pos:column="62">DummyMessage</name></argument>&gt;</argument_list></name></name><argument_list pos:line="35" pos:column="75">(<argument><expr><name pos:line="35" pos:column="76">evt</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="37" pos:column="13">Assert</name><op:operator pos:line="37" pos:column="19">.</op:operator><name pos:line="37" pos:column="20">True</name></name><argument_list pos:line="37" pos:column="24">(<argument><expr><name><name pos:line="37" pos:column="25">sut</name><op:operator pos:line="37" pos:column="28">.</op:operator><name pos:line="37" pos:column="29">Subscriptions</name><index pos:line="37" pos:column="42">[<expr><call><name pos:line="37" pos:column="43">typeof</name><argument_list pos:line="37" pos:column="49">(<argument><expr><name pos:line="37" pos:column="50">DummyMessage</name></expr></argument>)</argument_list></call></expr>]</index></name><op:operator pos:line="37" pos:column="64">.</op:operator><call><name pos:line="37" pos:column="65">Count</name><argument_list pos:line="37" pos:column="70">()</argument_list></call> <op:operator pos:line="37" pos:column="73">==</op:operator> <lit:literal type="number" pos:line="37" pos:column="76">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="39" pos:column="13">sut</name><op:operator pos:line="39" pos:column="16">.</op:operator><name><name pos:line="39" pos:column="17">Subscribe</name><argument_list pos:line="39" pos:column="26">&lt;<argument><name pos:line="39" pos:column="27">DummyMessage</name></argument>&gt;</argument_list></name></name><argument_list pos:line="39" pos:column="40">(<argument><expr><name><name pos:line="39" pos:column="41">Assert</name><op:operator pos:line="39" pos:column="47">.</op:operator><name pos:line="39" pos:column="48">NotNull</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="41" pos:column="13">Assert</name><op:operator pos:line="41" pos:column="19">.</op:operator><name pos:line="41" pos:column="20">True</name></name><argument_list pos:line="41" pos:column="24">(<argument><expr><name><name pos:line="41" pos:column="25">sut</name><op:operator pos:line="41" pos:column="28">.</op:operator><name pos:line="41" pos:column="29">Subscriptions</name><index pos:line="41" pos:column="42">[<expr><call><name pos:line="41" pos:column="43">typeof</name><argument_list pos:line="41" pos:column="49">(<argument><expr><name pos:line="41" pos:column="50">DummyMessage</name></expr></argument>)</argument_list></call></expr>]</index></name><op:operator pos:line="41" pos:column="64">.</op:operator><call><name pos:line="41" pos:column="65">Count</name><argument_list pos:line="41" pos:column="70">()</argument_list></call> <op:operator pos:line="41" pos:column="73">==</op:operator> <lit:literal type="number" pos:line="41" pos:column="76">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="44" pos:column="9">[<expr><name pos:line="44" pos:column="10">Theory</name></expr><op:operator pos:line="44" pos:column="16">,</op:operator> <expr><name pos:line="44" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="45" pos:column="9">public</specifier> <name pos:line="45" pos:column="16">void</name></type> <name pos:line="45" pos:column="21">UnsubscribeFromEvent</name><parameter_list pos:line="45" pos:column="41">(<param><decl><type><name pos:line="45" pos:column="42">MessageBroker</name></type> <name pos:line="45" pos:column="56">sut</name></decl></param>)</parameter_list>
        <block pos:line="46" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="47" pos:column="13">var</name></type> <name pos:line="47" pos:column="17">subId</name> <init pos:line="47" pos:column="23">= <expr><call><name><name pos:line="47" pos:column="25">sut</name><op:operator pos:line="47" pos:column="28">.</op:operator><name><name pos:line="47" pos:column="29">Subscribe</name><argument_list pos:line="47" pos:column="38">&lt;<argument><name pos:line="47" pos:column="39">DummyMessage</name></argument>&gt;</argument_list></name></name><argument_list pos:line="47" pos:column="52">(<argument><expr><lambda><name pos:line="47" pos:column="53">evt</name> <op:operator pos:line="47" pos:column="57">=&gt;</op:operator> <call><name><name pos:line="47" pos:column="60">Assert</name><op:operator pos:line="47" pos:column="66">.</op:operator><name><name pos:line="47" pos:column="67">IsType</name><argument_list pos:line="47" pos:column="73">&lt;<argument><name pos:line="47" pos:column="74">DummyMessage</name></argument>&gt;</argument_list></name></name><argument_list pos:line="47" pos:column="87">(<argument><expr><name pos:line="47" pos:column="88">evt</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="49" pos:column="13">Assert</name><op:operator pos:line="49" pos:column="19">.</op:operator><name pos:line="49" pos:column="20">True</name></name><argument_list pos:line="49" pos:column="24">(<argument><expr><name><name pos:line="49" pos:column="25">sut</name><op:operator pos:line="49" pos:column="28">.</op:operator><name pos:line="49" pos:column="29">Subscriptions</name><index pos:line="49" pos:column="42">[<expr><call><name pos:line="49" pos:column="43">typeof</name><argument_list pos:line="49" pos:column="49">(<argument><expr><name pos:line="49" pos:column="50">DummyMessage</name></expr></argument>)</argument_list></call></expr>]</index></name><op:operator pos:line="49" pos:column="64">.</op:operator><call><name pos:line="49" pos:column="65">Any</name><argument_list pos:line="49" pos:column="68">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="51" pos:column="13">sut</name><op:operator pos:line="51" pos:column="16">.</op:operator><name><name pos:line="51" pos:column="17">Unsubscribe</name><argument_list pos:line="51" pos:column="28">&lt;<argument><name pos:line="51" pos:column="29">DummyMessage</name></argument>&gt;</argument_list></name></name><argument_list pos:line="51" pos:column="42">(<argument><expr><name pos:line="51" pos:column="43">subId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="53" pos:column="13">Assert</name><op:operator pos:line="53" pos:column="19">.</op:operator><name pos:line="53" pos:column="20">False</name></name><argument_list pos:line="53" pos:column="25">(<argument><expr><name><name pos:line="53" pos:column="26">sut</name><op:operator pos:line="53" pos:column="29">.</op:operator><name pos:line="53" pos:column="30">Subscriptions</name><index pos:line="53" pos:column="43">[<expr><call><name pos:line="53" pos:column="44">typeof</name><argument_list pos:line="53" pos:column="50">(<argument><expr><name pos:line="53" pos:column="51">DummyMessage</name></expr></argument>)</argument_list></call></expr>]</index></name><op:operator pos:line="53" pos:column="65">.</op:operator><call><name pos:line="53" pos:column="66">Any</name><argument_list pos:line="53" pos:column="69">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="56" pos:column="9">[<expr><name pos:line="56" pos:column="10">Theory</name></expr><op:operator pos:line="56" pos:column="16">,</op:operator> <expr><name pos:line="56" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="57" pos:column="9">public</specifier> <name pos:line="57" pos:column="16">void</name></type> <name pos:line="57" pos:column="21">Publish</name><parameter_list pos:line="57" pos:column="28">(<param><decl><type><name pos:line="57" pos:column="29">MessageBroker</name></type> <name pos:line="57" pos:column="43">sut</name></decl></param>, <param><decl><type><name pos:line="57" pos:column="48">string</name></type> <name pos:line="57" pos:column="55">expected</name></decl></param>)</parameter_list>
        <block pos:line="58" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="59" pos:column="13">var</name></type> <name pos:line="59" pos:column="17">counter</name> <init pos:line="59" pos:column="25">= <expr><lit:literal type="number" pos:line="59" pos:column="27">0</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="60" pos:column="13">var</name></type> <name pos:line="60" pos:column="17">message</name> <init pos:line="60" pos:column="25">= <expr><op:operator pos:line="60" pos:column="27">new</op:operator> <name pos:line="60" pos:column="31">DummyMessage</name> <block pos:line="60" pos:column="44">{ <expr><name pos:line="60" pos:column="46">Identifier</name> <op:operator pos:line="60" pos:column="57">=</op:operator> <name pos:line="60" pos:column="59">expected</name></expr> }</block></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="62" pos:column="13">sut</name><op:operator pos:line="62" pos:column="16">.</op:operator><name><name pos:line="62" pos:column="17">Subscribe</name><argument_list pos:line="62" pos:column="26">&lt;<argument><name pos:line="62" pos:column="27">DummyMessage</name></argument>&gt;</argument_list></name></name><argument_list pos:line="62" pos:column="40">(
                <argument><expr><lambda><name pos:line="63" pos:column="17">evt</name> <op:operator pos:line="63" pos:column="21">=&gt;</op:operator>
                <block pos:line="64" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="65" pos:column="21">Assert</name><op:operator pos:line="65" pos:column="27">.</op:operator><name pos:line="65" pos:column="28">Equal</name></name><argument_list pos:line="65" pos:column="33">(<argument><expr><name pos:line="65" pos:column="34">expected</name></expr></argument>, <argument><expr><name><name pos:line="65" pos:column="44">evt</name><op:operator pos:line="65" pos:column="47">.</op:operator><name pos:line="65" pos:column="48">Identifier</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="66" pos:column="21">counter</name><op:operator pos:line="66" pos:column="28">++</op:operator></expr>;</expr_stmt>
                }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="69" pos:column="13">sut</name><op:operator pos:line="69" pos:column="16">.</op:operator><name pos:line="69" pos:column="17">Publish</name></name><argument_list pos:line="69" pos:column="24">(<argument><expr><name pos:line="69" pos:column="25">message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="71" pos:column="13">Assert</name><op:operator pos:line="71" pos:column="19">.</op:operator><name pos:line="71" pos:column="20">Equal</name></name><argument_list pos:line="71" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="71" pos:column="26">1</lit:literal></expr></argument>, <argument><expr><name pos:line="71" pos:column="29">counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="74" pos:column="9">[<expr><name pos:line="74" pos:column="10">Theory</name></expr><op:operator pos:line="74" pos:column="16">,</op:operator> <expr><name pos:line="74" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="75" pos:column="9">public</specifier> <name pos:line="75" pos:column="16">void</name></type> <name pos:line="75" pos:column="21">LogSubscriptions</name><parameter_list pos:line="75" pos:column="37">(<param><decl><type><name pos:line="75" pos:column="38">MessageBroker</name></type> <name pos:line="75" pos:column="52">sut</name></decl></param>)</parameter_list>
        <block pos:line="76" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="77" pos:column="13">sut</name><op:operator pos:line="77" pos:column="16">.</op:operator><name><name pos:line="77" pos:column="17">Subscribe</name><argument_list pos:line="77" pos:column="26">&lt;<argument><name pos:line="77" pos:column="27">DummyMessage</name></argument>&gt;</argument_list></name></name><argument_list pos:line="77" pos:column="40">(<argument><expr><name><name pos:line="77" pos:column="41">Assert</name><op:operator pos:line="77" pos:column="47">.</op:operator><name pos:line="77" pos:column="48">NotNull</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="79" pos:column="13">sut</name><op:operator pos:line="79" pos:column="16">.</op:operator><name pos:line="79" pos:column="17">Logger</name><op:operator pos:line="79" pos:column="23">.</op:operator><name pos:line="79" pos:column="24">Verify</name></name><argument_list pos:line="79" pos:column="30">(<argument><expr><lambda><name pos:line="79" pos:column="31">l</name> <op:operator pos:line="79" pos:column="33">=&gt;</op:operator> <call><name><name pos:line="79" pos:column="36">l</name><op:operator pos:line="79" pos:column="37">.</op:operator><name pos:line="79" pos:column="38">Debug</name></name><argument_list pos:line="79" pos:column="43">(<argument><expr><call><name><name pos:line="79" pos:column="44">It</name><op:operator pos:line="79" pos:column="46">.</op:operator><name><name pos:line="79" pos:column="47">IsAny</name><argument_list pos:line="79" pos:column="52">&lt;<argument><name pos:line="79" pos:column="53">string</name></argument>&gt;</argument_list></name></name><argument_list pos:line="79" pos:column="60">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="79" pos:column="64">It</name><op:operator pos:line="79" pos:column="66">.</op:operator><name><name pos:line="79" pos:column="67">IsAny</name><argument_list pos:line="79" pos:column="72">&lt;<argument><name><name pos:line="79" pos:column="73">object</name><index pos:line="79" pos:column="79">[]</index></name></argument>&gt;</argument_list></name></name><argument_list pos:line="79" pos:column="82">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="82" pos:column="9">[<expr><name pos:line="82" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="83" pos:column="9">public</specifier> <name pos:line="83" pos:column="16">void</name></type> <name pos:line="83" pos:column="21">ThrowWithNullLogger</name><parameter_list pos:line="83" pos:column="40">()</parameter_list>
        <block pos:line="84" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="85" pos:column="13">Assert</name><op:operator pos:line="85" pos:column="19">.</op:operator><name><name pos:line="85" pos:column="20">Throws</name><argument_list pos:line="85" pos:column="26">&lt;<argument><name pos:line="85" pos:column="27">ArgumentNullException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="85" pos:column="49">(<argument><expr><lambda><parameter_list pos:line="85" pos:column="50">()</parameter_list> <op:operator pos:line="85" pos:column="53">=&gt;</op:operator> <op:operator pos:line="85" pos:column="56">new</op:operator> <call><name pos:line="85" pos:column="60">MessageBroker</name><argument_list pos:line="85" pos:column="73">(<argument><expr><name pos:line="85" pos:column="74">null</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="88" pos:column="9">[<expr><name pos:line="88" pos:column="10">Theory</name></expr><op:operator pos:line="88" pos:column="16">,</op:operator> <expr><name pos:line="88" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="89" pos:column="9">public</specifier> <name pos:line="89" pos:column="16">void</name></type> <name pos:line="89" pos:column="21">HandleExceptionsFromSubscribers</name><parameter_list pos:line="89" pos:column="52">(<param><decl><type><name pos:line="89" pos:column="53">MessageBroker</name></type> <name pos:line="89" pos:column="67">sut</name></decl></param>)</parameter_list>
        <block pos:line="90" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="91" pos:column="13">sut</name><op:operator pos:line="91" pos:column="16">.</op:operator><name><name pos:line="91" pos:column="17">Subscribe</name><argument_list pos:line="91" pos:column="26">&lt;<argument><name pos:line="91" pos:column="27">DummyMessage</name></argument>&gt;</argument_list></name></name><argument_list pos:line="91" pos:column="40">(<argument><expr><lambda><name pos:line="91" pos:column="41">m</name> <op:operator pos:line="91" pos:column="43">=&gt;</op:operator> <block pos:line="91" pos:column="46">{ <throw pos:line="91" pos:column="48">throw <expr><op:operator pos:line="91" pos:column="54">new</op:operator> <call><name pos:line="91" pos:column="58">DummyException</name><argument_list pos:line="91" pos:column="72">()</argument_list></call></expr>;</throw> }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="92" pos:column="13">sut</name><op:operator pos:line="92" pos:column="16">.</op:operator><name pos:line="92" pos:column="17">Publish</name></name><argument_list pos:line="92" pos:column="24">(<argument><expr><op:operator pos:line="92" pos:column="25">new</op:operator> <call><name pos:line="92" pos:column="29">DummyMessage</name><argument_list pos:line="92" pos:column="41">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="94" pos:column="13">sut</name><op:operator pos:line="94" pos:column="16">.</op:operator><name pos:line="94" pos:column="17">Logger</name><op:operator pos:line="94" pos:column="23">.</op:operator><name pos:line="94" pos:column="24">Verify</name></name><argument_list pos:line="94" pos:column="30">(<argument><expr><lambda><name pos:line="94" pos:column="31">l</name> <op:operator pos:line="94" pos:column="33">=&gt;</op:operator> <call><name><name pos:line="94" pos:column="36">l</name><op:operator pos:line="94" pos:column="37">.</op:operator><name pos:line="94" pos:column="38">Error</name></name><argument_list pos:line="94" pos:column="43">(<argument><expr><call><name><name pos:line="94" pos:column="44">It</name><op:operator pos:line="94" pos:column="46">.</op:operator><name><name pos:line="94" pos:column="47">IsAny</name><argument_list pos:line="94" pos:column="52">&lt;<argument><name pos:line="94" pos:column="53">string</name></argument>&gt;</argument_list></name></name><argument_list pos:line="94" pos:column="60">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="94" pos:column="64">It</name><op:operator pos:line="94" pos:column="66">.</op:operator><name><name pos:line="94" pos:column="67">IsAny</name><argument_list pos:line="94" pos:column="72">&lt;<argument><name pos:line="94" pos:column="73">DummyException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="94" pos:column="88">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="94" pos:column="92">It</name><op:operator pos:line="94" pos:column="94">.</op:operator><name><name pos:line="94" pos:column="95">IsAny</name><argument_list pos:line="94" pos:column="100">&lt;<argument><name><name pos:line="94" pos:column="101">object</name><index pos:line="94" pos:column="107">[]</index></name></argument>&gt;</argument_list></name></name><argument_list pos:line="94" pos:column="110">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="97" pos:column="9">[<expr><name pos:line="97" pos:column="10">Theory</name></expr><op:operator pos:line="97" pos:column="16">,</op:operator> <expr><name pos:line="97" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="98" pos:column="9">public</specifier> <name pos:line="98" pos:column="16">void</name></type> <name pos:line="98" pos:column="21">ThrowWithNullSubscriptionAction</name><parameter_list pos:line="98" pos:column="52">(<param><decl><type><name pos:line="98" pos:column="53">MessageBroker</name></type> <name pos:line="98" pos:column="67">sut</name></decl></param>)</parameter_list>
        <block pos:line="99" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="100" pos:column="13">Assert</name><op:operator pos:line="100" pos:column="19">.</op:operator><name><name pos:line="100" pos:column="20">Throws</name><argument_list pos:line="100" pos:column="26">&lt;<argument><name pos:line="100" pos:column="27">ArgumentNullException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="100" pos:column="49">(<argument><expr><lambda><parameter_list pos:line="100" pos:column="50">()</parameter_list> <op:operator pos:line="100" pos:column="53">=&gt;</op:operator> <call><name><name pos:line="100" pos:column="56">sut</name><op:operator pos:line="100" pos:column="59">.</op:operator><name><name pos:line="100" pos:column="60">Subscribe</name><argument_list pos:line="100" pos:column="69">&lt;<argument><name pos:line="100" pos:column="70">DummyMessage</name></argument>&gt;</argument_list></name></name><argument_list pos:line="100" pos:column="83">(<argument><expr><name pos:line="100" pos:column="84">null</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="103" pos:column="9">[<expr><name pos:line="103" pos:column="10">Theory</name></expr><op:operator pos:line="103" pos:column="16">,</op:operator> <expr><name pos:line="103" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="104" pos:column="9">public</specifier> <name pos:line="104" pos:column="16">void</name></type> <name pos:line="104" pos:column="21">HandleInterfaceBasedSubscriptions</name><parameter_list pos:line="104" pos:column="54">(<param><decl><type><name pos:line="104" pos:column="55">MessageBroker</name></type> <name pos:line="104" pos:column="69">sut</name></decl></param>)</parameter_list>
        <block pos:line="105" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="106" pos:column="13">var</name></type> <name pos:line="106" pos:column="17">counter</name> <init pos:line="106" pos:column="25">= <expr><lit:literal type="number" pos:line="106" pos:column="27">0</lit:literal></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="108" pos:column="13">sut</name><op:operator pos:line="108" pos:column="16">.</op:operator><name><name pos:line="108" pos:column="17">Subscribe</name><argument_list pos:line="108" pos:column="26">&lt;<argument><name pos:line="108" pos:column="27">IDummyInterface</name></argument>&gt;</argument_list></name></name><argument_list pos:line="108" pos:column="43">(<argument><expr><lambda><name pos:line="108" pos:column="44">m</name> <op:operator pos:line="108" pos:column="46">=&gt;</op:operator> <name pos:line="108" pos:column="49">counter</name><op:operator pos:line="108" pos:column="56">++</op:operator></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="110" pos:column="13">sut</name><op:operator pos:line="110" pos:column="16">.</op:operator><name pos:line="110" pos:column="17">Publish</name></name><argument_list pos:line="110" pos:column="24">(<argument><expr><op:operator pos:line="110" pos:column="25">new</op:operator> <call><name pos:line="110" pos:column="29">DummyMessage</name><argument_list pos:line="110" pos:column="41">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="112" pos:column="13">Assert</name><op:operator pos:line="112" pos:column="19">.</op:operator><name pos:line="112" pos:column="20">Equal</name></name><argument_list pos:line="112" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="112" pos:column="26">1</lit:literal></expr></argument>, <argument><expr><name pos:line="112" pos:column="29">counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="115" pos:column="9">[<expr><name pos:line="115" pos:column="10">Theory</name></expr><op:operator pos:line="115" pos:column="16">,</op:operator> <expr><name pos:line="115" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="116" pos:column="9">public</specifier> <name pos:line="116" pos:column="16">void</name></type> <name pos:line="116" pos:column="21">HandleMessageInheritanceChains</name><parameter_list pos:line="116" pos:column="51">(<param><decl><type><name pos:line="116" pos:column="52">MessageBroker</name></type> <name pos:line="116" pos:column="66">sut</name></decl></param>)</parameter_list>
        <block pos:line="117" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="118" pos:column="13">var</name></type> <name pos:line="118" pos:column="17">counter</name> <init pos:line="118" pos:column="25">= <expr><lit:literal type="number" pos:line="118" pos:column="27">0</lit:literal></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="120" pos:column="13">sut</name><op:operator pos:line="120" pos:column="16">.</op:operator><name><name pos:line="120" pos:column="17">Subscribe</name><argument_list pos:line="120" pos:column="26">&lt;<argument><name pos:line="120" pos:column="27">MessageBase</name></argument>&gt;</argument_list></name></name><argument_list pos:line="120" pos:column="39">(<argument><expr><lambda><name pos:line="120" pos:column="40">m</name> <op:operator pos:line="120" pos:column="42">=&gt;</op:operator> <name pos:line="120" pos:column="45">counter</name><op:operator pos:line="120" pos:column="52">++</op:operator></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="122" pos:column="13">sut</name><op:operator pos:line="122" pos:column="16">.</op:operator><name pos:line="122" pos:column="17">Publish</name></name><argument_list pos:line="122" pos:column="24">(<argument><expr><op:operator pos:line="122" pos:column="25">new</op:operator> <call><name pos:line="122" pos:column="29">DummyMessage</name><argument_list pos:line="122" pos:column="41">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="124" pos:column="13">Assert</name><op:operator pos:line="124" pos:column="19">.</op:operator><name pos:line="124" pos:column="20">Equal</name></name><argument_list pos:line="124" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="124" pos:column="26">1</lit:literal></expr></argument>, <argument><expr><name pos:line="124" pos:column="29">counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="127" pos:column="9">[<expr><name pos:line="127" pos:column="10">Theory</name></expr><op:operator pos:line="127" pos:column="16">,</op:operator> <expr><name pos:line="127" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="128" pos:column="9">public</specifier> <name pos:line="128" pos:column="16">void</name></type> <name pos:line="128" pos:column="21">IgnoreUnknownTypes</name><parameter_list pos:line="128" pos:column="39">(<param><decl><type><name pos:line="128" pos:column="40">MessageBroker</name></type> <name pos:line="128" pos:column="54">sut</name></decl></param>)</parameter_list>
        <block pos:line="129" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="130" pos:column="13">var</name></type> <name pos:line="130" pos:column="17">counter</name> <init pos:line="130" pos:column="25">= <expr><lit:literal type="number" pos:line="130" pos:column="27">0</lit:literal></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="132" pos:column="13">sut</name><op:operator pos:line="132" pos:column="16">.</op:operator><name><name pos:line="132" pos:column="17">Subscribe</name><argument_list pos:line="132" pos:column="26">&lt;<argument><name pos:line="132" pos:column="27">IDisposable</name></argument>&gt;</argument_list></name></name><argument_list pos:line="132" pos:column="39">(<argument><expr><lambda><name pos:line="132" pos:column="40">m</name> <op:operator pos:line="132" pos:column="42">=&gt;</op:operator> <name pos:line="132" pos:column="45">counter</name><op:operator pos:line="132" pos:column="52">++</op:operator></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="134" pos:column="13">sut</name><op:operator pos:line="134" pos:column="16">.</op:operator><name pos:line="134" pos:column="17">Publish</name></name><argument_list pos:line="134" pos:column="24">(<argument><expr><op:operator pos:line="134" pos:column="25">new</op:operator> <call><name pos:line="134" pos:column="29">DummyMessage</name><argument_list pos:line="134" pos:column="41">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="136" pos:column="13">Assert</name><op:operator pos:line="136" pos:column="19">.</op:operator><name pos:line="136" pos:column="20">Equal</name></name><argument_list pos:line="136" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="136" pos:column="26">0</lit:literal></expr></argument>, <argument><expr><name pos:line="136" pos:column="29">counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
