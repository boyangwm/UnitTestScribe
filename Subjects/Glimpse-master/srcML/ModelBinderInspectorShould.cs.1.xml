<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Mvc\Inspector\ModelBinderInspectorShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Web</name><op:operator pos:line="4" pos:column="17">.</op:operator><name pos:line="4" pos:column="18">Mvc</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Glimpse</name><op:operator pos:line="5" pos:column="14">.</op:operator><name pos:line="5" pos:column="15">Core</name><op:operator pos:line="5" pos:column="19">.</op:operator><name pos:line="5" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Glimpse</name><op:operator pos:line="6" pos:column="14">.</op:operator><name pos:line="6" pos:column="15">Mvc</name><op:operator pos:line="6" pos:column="18">.</op:operator><name pos:line="6" pos:column="19">Inspector</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Glimpse</name><op:operator pos:line="7" pos:column="14">.</op:operator><name pos:line="7" pos:column="15">Test</name><op:operator pos:line="7" pos:column="19">.</op:operator><name pos:line="7" pos:column="20">Common</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Glimpse</name><op:operator pos:line="8" pos:column="14">.</op:operator><name pos:line="8" pos:column="15">Test</name><op:operator pos:line="8" pos:column="19">.</op:operator><name pos:line="8" pos:column="20">Mvc</name><op:operator pos:line="8" pos:column="23">.</op:operator><name pos:line="8" pos:column="24">TestDoubles</name></name>;</using>
<using pos:line="9" pos:column="1">using <name pos:line="9" pos:column="7">Moq</name>;</using>
<using pos:line="10" pos:column="1">using <name pos:line="10" pos:column="7">Xunit</name>;</using>
<using pos:line="11" pos:column="1">using <name><name pos:line="11" pos:column="7">Xunit</name><op:operator pos:line="11" pos:column="12">.</op:operator><name pos:line="11" pos:column="13">Extensions</name></name>;</using>

<namespace pos:line="13" pos:column="1">namespace <name><name pos:line="13" pos:column="11">Glimpse</name><op:operator pos:line="13" pos:column="18">.</op:operator><name pos:line="13" pos:column="19">Test</name><op:operator pos:line="13" pos:column="23">.</op:operator><name pos:line="13" pos:column="24">Mvc</name><op:operator pos:line="13" pos:column="27">.</op:operator><name pos:line="13" pos:column="28">Inspector</name></name>
<block pos:line="14" pos:column="1">{
    <class><specifier pos:line="15" pos:column="5">public</specifier> class <name pos:line="15" pos:column="18">ModelBinderInspectorShould</name> <super pos:line="15" pos:column="45">: <name pos:line="15" pos:column="47">IDisposable</name></super>
    <block pos:line="16" pos:column="5">{
        <function><type><specifier pos:line="17" pos:column="9">public</specifier> <name pos:line="17" pos:column="16">void</name></type> <name pos:line="17" pos:column="21">Dispose</name><parameter_list pos:line="17" pos:column="28">()</parameter_list>
        <block pos:line="18" pos:column="9">{
            <expr_stmt><expr><name><name pos:line="19" pos:column="13">ModelBinders</name><op:operator pos:line="19" pos:column="25">.</op:operator><name pos:line="19" pos:column="26">Binders</name><op:operator pos:line="19" pos:column="33">.</op:operator><name pos:line="19" pos:column="34">DefaultBinder</name></name> <op:operator pos:line="19" pos:column="48">=</op:operator> <op:operator pos:line="19" pos:column="50">new</op:operator> <call><name pos:line="19" pos:column="54">DefaultModelBinder</name><argument_list pos:line="19" pos:column="72">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="22" pos:column="9">[<expr><name pos:line="22" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="23" pos:column="9">public</specifier> <name pos:line="23" pos:column="16">void</name></type> <name pos:line="23" pos:column="21">Constuct</name><parameter_list pos:line="23" pos:column="29">()</parameter_list>
        <block pos:line="24" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="25" pos:column="13">var</name></type> <name pos:line="25" pos:column="17">sut</name> <init pos:line="25" pos:column="21">= <expr><op:operator pos:line="25" pos:column="23">new</op:operator> <call><name pos:line="25" pos:column="27">ModelBinderInspector</name><argument_list pos:line="25" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="27" pos:column="13">Assert</name><op:operator pos:line="27" pos:column="19">.</op:operator><name><name pos:line="27" pos:column="20">IsAssignableFrom</name><argument_list pos:line="27" pos:column="36">&lt;<argument><name pos:line="27" pos:column="37">IInspector</name></argument>&gt;</argument_list></name></name><argument_list pos:line="27" pos:column="48">(<argument><expr><name pos:line="27" pos:column="49">sut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="30" pos:column="9">[<expr><name pos:line="30" pos:column="10">Theory</name></expr><op:operator pos:line="30" pos:column="16">,</op:operator> <expr><name pos:line="30" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="31" pos:column="9">public</specifier> <name pos:line="31" pos:column="16">void</name></type> <name pos:line="31" pos:column="21">IgnoreEmptyModelBindingProvidersCollection</name><parameter_list pos:line="31" pos:column="63">(<param><decl><type><name pos:line="31" pos:column="64">ModelBinderInspector</name></type> <name pos:line="31" pos:column="85">sut</name></decl></param>, <param><decl><type><name pos:line="31" pos:column="90">IInspectorContext</name></type> <name pos:line="31" pos:column="108">context</name></decl></param>, <param><decl><type><name pos:line="31" pos:column="117">IModelBinderProvider</name></type> <name pos:line="31" pos:column="138">proxy</name></decl></param>)</parameter_list>
        <block pos:line="32" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="33" pos:column="13">ModelBinderProviders</name><op:operator pos:line="33" pos:column="33">.</op:operator><name pos:line="33" pos:column="34">BinderProviders</name><op:operator pos:line="33" pos:column="49">.</op:operator><name pos:line="33" pos:column="50">Clear</name></name><argument_list pos:line="33" pos:column="55">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="34" pos:column="13">context</name><op:operator pos:line="34" pos:column="20">.</op:operator><name pos:line="34" pos:column="21">ProxyFactory</name><op:operator pos:line="34" pos:column="33">.</op:operator><name pos:line="34" pos:column="34">Setup</name></name><argument_list pos:line="34" pos:column="39">(<argument><expr><lambda><name pos:line="34" pos:column="40">pf</name> <op:operator pos:line="34" pos:column="43">=&gt;</op:operator> <call><name><name pos:line="34" pos:column="46">pf</name><op:operator pos:line="34" pos:column="48">.</op:operator><name><name pos:line="34" pos:column="49">IsWrapInterfaceEligible</name><argument_list pos:line="34" pos:column="72">&lt;<argument><name pos:line="34" pos:column="73">IModelBinderProvider</name></argument>&gt;</argument_list></name></name><argument_list pos:line="34" pos:column="94">(<argument><expr><call><name><name pos:line="34" pos:column="95">It</name><op:operator pos:line="34" pos:column="97">.</op:operator><name><name pos:line="34" pos:column="98">IsAny</name><argument_list pos:line="34" pos:column="103">&lt;<argument><name pos:line="34" pos:column="104">Type</name></argument>&gt;</argument_list></name></name><argument_list pos:line="34" pos:column="109">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="34" pos:column="113">.</op:operator><call><name pos:line="34" pos:column="114">Returns</name><argument_list pos:line="34" pos:column="121">(<argument><expr><lit:literal type="boolean" pos:line="34" pos:column="122">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="35" pos:column="13">context</name><op:operator pos:line="35" pos:column="20">.</op:operator><name pos:line="35" pos:column="21">ProxyFactory</name><op:operator pos:line="35" pos:column="33">.</op:operator><name pos:line="35" pos:column="34">Setup</name></name><argument_list pos:line="35" pos:column="39">(<argument><expr><lambda><name pos:line="35" pos:column="40">pf</name> <op:operator pos:line="35" pos:column="43">=&gt;</op:operator> <call><name><name pos:line="35" pos:column="46">pf</name><op:operator pos:line="35" pos:column="48">.</op:operator><name pos:line="35" pos:column="49">WrapInterface</name></name><argument_list pos:line="35" pos:column="62">(<argument><expr><call><name><name pos:line="35" pos:column="63">It</name><op:operator pos:line="35" pos:column="65">.</op:operator><name><name pos:line="35" pos:column="66">IsAny</name><argument_list pos:line="35" pos:column="71">&lt;<argument><name pos:line="35" pos:column="72">IModelBinderProvider</name></argument>&gt;</argument_list></name></name><argument_list pos:line="35" pos:column="93">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="35" pos:column="97">It</name><op:operator pos:line="35" pos:column="99">.</op:operator><name><name pos:line="35" pos:column="100">IsAny</name><argument_list pos:line="35" pos:column="105">&lt;<argument><name><name pos:line="35" pos:column="106">IEnumerable</name><argument_list pos:line="35" pos:column="117">&lt;<argument><name pos:line="35" pos:column="118">IAlternateMethod</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name><argument_list pos:line="35" pos:column="136">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="35" pos:column="140">Enumerable</name><op:operator pos:line="35" pos:column="150">.</op:operator><name><name pos:line="35" pos:column="151">Empty</name><argument_list pos:line="35" pos:column="156">&lt;<argument><name pos:line="35" pos:column="157">object</name></argument>&gt;</argument_list></name></name><argument_list pos:line="35" pos:column="164">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="35" pos:column="168">.</op:operator><call><name pos:line="35" pos:column="169">Returns</name><argument_list pos:line="35" pos:column="176">(<argument><expr><name pos:line="35" pos:column="177">proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="37" pos:column="13">sut</name><op:operator pos:line="37" pos:column="16">.</op:operator><name pos:line="37" pos:column="17">Setup</name></name><argument_list pos:line="37" pos:column="22">(<argument><expr><name pos:line="37" pos:column="23">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="39" pos:column="13">Assert</name><op:operator pos:line="39" pos:column="19">.</op:operator><name pos:line="39" pos:column="20">Empty</name></name><argument_list pos:line="39" pos:column="25">(<argument><expr><name><name pos:line="39" pos:column="26">ModelBinderProviders</name><op:operator pos:line="39" pos:column="46">.</op:operator><name pos:line="39" pos:column="47">BinderProviders</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="42" pos:column="9">[<expr><name pos:line="42" pos:column="10">Theory</name></expr><op:operator pos:line="42" pos:column="16">,</op:operator> <expr><name pos:line="42" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="43" pos:column="9">public</specifier> <name pos:line="43" pos:column="16">void</name></type> <name pos:line="43" pos:column="21">UpdateModelBindingProviders</name><parameter_list pos:line="43" pos:column="48">(<param><decl><type><name pos:line="43" pos:column="49">ModelBinderInspector</name></type> <name pos:line="43" pos:column="70">sut</name></decl></param>, <param><decl><type><name pos:line="43" pos:column="75">IInspectorContext</name></type> <name pos:line="43" pos:column="93">context</name></decl></param>, <param><decl><type><name pos:line="43" pos:column="102">IModelBinderProvider</name></type> <name pos:line="43" pos:column="123">proxy</name></decl></param>)</parameter_list>
        <block pos:line="44" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="45" pos:column="13">ModelBinderProviders</name><op:operator pos:line="45" pos:column="33">.</op:operator><name pos:line="45" pos:column="34">BinderProviders</name><op:operator pos:line="45" pos:column="49">.</op:operator><name pos:line="45" pos:column="50">Add</name></name><argument_list pos:line="45" pos:column="53">(<argument><expr><op:operator pos:line="45" pos:column="54">new</op:operator> <call><name pos:line="45" pos:column="58">DummyModelBinderProvider</name><argument_list pos:line="45" pos:column="82">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="46" pos:column="13">context</name><op:operator pos:line="46" pos:column="20">.</op:operator><name pos:line="46" pos:column="21">ProxyFactory</name><op:operator pos:line="46" pos:column="33">.</op:operator><name pos:line="46" pos:column="34">Setup</name></name><argument_list pos:line="46" pos:column="39">(<argument><expr><lambda><name pos:line="46" pos:column="40">pf</name> <op:operator pos:line="46" pos:column="43">=&gt;</op:operator> <call><name><name pos:line="46" pos:column="46">pf</name><op:operator pos:line="46" pos:column="48">.</op:operator><name><name pos:line="46" pos:column="49">IsWrapInterfaceEligible</name><argument_list pos:line="46" pos:column="72">&lt;<argument><name pos:line="46" pos:column="73">IModelBinderProvider</name></argument>&gt;</argument_list></name></name><argument_list pos:line="46" pos:column="94">(<argument><expr><call><name><name pos:line="46" pos:column="95">It</name><op:operator pos:line="46" pos:column="97">.</op:operator><name><name pos:line="46" pos:column="98">IsAny</name><argument_list pos:line="46" pos:column="103">&lt;<argument><name pos:line="46" pos:column="104">Type</name></argument>&gt;</argument_list></name></name><argument_list pos:line="46" pos:column="109">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="46" pos:column="113">.</op:operator><call><name pos:line="46" pos:column="114">Returns</name><argument_list pos:line="46" pos:column="121">(<argument><expr><lit:literal type="boolean" pos:line="46" pos:column="122">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="47" pos:column="13">context</name><op:operator pos:line="47" pos:column="20">.</op:operator><name pos:line="47" pos:column="21">ProxyFactory</name><op:operator pos:line="47" pos:column="33">.</op:operator><name pos:line="47" pos:column="34">Setup</name></name><argument_list pos:line="47" pos:column="39">(<argument><expr><lambda><name pos:line="47" pos:column="40">pf</name> <op:operator pos:line="47" pos:column="43">=&gt;</op:operator> <call><name><name pos:line="47" pos:column="46">pf</name><op:operator pos:line="47" pos:column="48">.</op:operator><name pos:line="47" pos:column="49">WrapInterface</name></name><argument_list pos:line="47" pos:column="62">(<argument><expr><call><name><name pos:line="47" pos:column="63">It</name><op:operator pos:line="47" pos:column="65">.</op:operator><name><name pos:line="47" pos:column="66">IsAny</name><argument_list pos:line="47" pos:column="71">&lt;<argument><name pos:line="47" pos:column="72">IModelBinderProvider</name></argument>&gt;</argument_list></name></name><argument_list pos:line="47" pos:column="93">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="47" pos:column="97">It</name><op:operator pos:line="47" pos:column="99">.</op:operator><name><name pos:line="47" pos:column="100">IsAny</name><argument_list pos:line="47" pos:column="105">&lt;<argument><name><name pos:line="47" pos:column="106">IEnumerable</name><argument_list pos:line="47" pos:column="117">&lt;<argument><name pos:line="47" pos:column="118">IAlternateMethod</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name><argument_list pos:line="47" pos:column="136">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="47" pos:column="140">Enumerable</name><op:operator pos:line="47" pos:column="150">.</op:operator><name><name pos:line="47" pos:column="151">Empty</name><argument_list pos:line="47" pos:column="156">&lt;<argument><name pos:line="47" pos:column="157">object</name></argument>&gt;</argument_list></name></name><argument_list pos:line="47" pos:column="164">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="47" pos:column="168">.</op:operator><call><name pos:line="47" pos:column="169">Returns</name><argument_list pos:line="47" pos:column="176">(<argument><expr><name pos:line="47" pos:column="177">proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="49" pos:column="13">sut</name><op:operator pos:line="49" pos:column="16">.</op:operator><name pos:line="49" pos:column="17">Setup</name></name><argument_list pos:line="49" pos:column="22">(<argument><expr><name pos:line="49" pos:column="23">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="51" pos:column="13">Assert</name><op:operator pos:line="51" pos:column="19">.</op:operator><name pos:line="51" pos:column="20">Contains</name></name><argument_list pos:line="51" pos:column="28">(<argument><expr><name pos:line="51" pos:column="29">proxy</name></expr></argument>, <argument><expr><name><name pos:line="51" pos:column="36">ModelBinderProviders</name><op:operator pos:line="51" pos:column="56">.</op:operator><name pos:line="51" pos:column="57">BinderProviders</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="52" pos:column="13">context</name><op:operator pos:line="52" pos:column="20">.</op:operator><name pos:line="52" pos:column="21">Logger</name><op:operator pos:line="52" pos:column="27">.</op:operator><name pos:line="52" pos:column="28">Verify</name></name><argument_list pos:line="52" pos:column="34">(<argument><expr><lambda><name pos:line="52" pos:column="35">l</name> <op:operator pos:line="52" pos:column="37">=&gt;</op:operator> <call><name><name pos:line="52" pos:column="40">l</name><op:operator pos:line="52" pos:column="41">.</op:operator><name pos:line="52" pos:column="42">Info</name></name><argument_list pos:line="52" pos:column="46">(<argument><expr><call><name><name pos:line="52" pos:column="47">It</name><op:operator pos:line="52" pos:column="49">.</op:operator><name><name pos:line="52" pos:column="50">IsAny</name><argument_list pos:line="52" pos:column="55">&lt;<argument><name pos:line="52" pos:column="56">string</name></argument>&gt;</argument_list></name></name><argument_list pos:line="52" pos:column="63">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="52" pos:column="67">It</name><op:operator pos:line="52" pos:column="69">.</op:operator><name><name pos:line="52" pos:column="70">IsAny</name><argument_list pos:line="52" pos:column="75">&lt;<argument><name><name pos:line="52" pos:column="76">object</name><index pos:line="52" pos:column="82">[]</index></name></argument>&gt;</argument_list></name></name><argument_list pos:line="52" pos:column="85">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="55" pos:column="9">[<expr><name pos:line="55" pos:column="10">Theory</name></expr><op:operator pos:line="55" pos:column="16">,</op:operator> <expr><name pos:line="55" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="56" pos:column="9">public</specifier> <name pos:line="56" pos:column="16">void</name></type> <name pos:line="56" pos:column="21">IgnoreEmptyValueProviderFactoriesCollection</name><parameter_list pos:line="56" pos:column="64">(<param><decl><type><name pos:line="56" pos:column="65">ModelBinderInspector</name></type> <name pos:line="56" pos:column="86">sut</name></decl></param>, <param><decl><type><name pos:line="56" pos:column="91">IInspectorContext</name></type> <name pos:line="56" pos:column="109">context</name></decl></param>, <param><decl><type><name pos:line="56" pos:column="118">ValueProviderFactory</name></type> <name pos:line="56" pos:column="139">proxy</name></decl></param>)</parameter_list>
        <block pos:line="57" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="58" pos:column="13">ValueProviderFactories</name><op:operator pos:line="58" pos:column="35">.</op:operator><name pos:line="58" pos:column="36">Factories</name><op:operator pos:line="58" pos:column="45">.</op:operator><name pos:line="58" pos:column="46">Clear</name></name><argument_list pos:line="58" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="59" pos:column="13">context</name><op:operator pos:line="59" pos:column="20">.</op:operator><name pos:line="59" pos:column="21">ProxyFactory</name><op:operator pos:line="59" pos:column="33">.</op:operator><name pos:line="59" pos:column="34">Setup</name></name><argument_list pos:line="59" pos:column="39">(<argument><expr><lambda><name pos:line="59" pos:column="40">pf</name> <op:operator pos:line="59" pos:column="43">=&gt;</op:operator> <call><name><name pos:line="59" pos:column="46">pf</name><op:operator pos:line="59" pos:column="48">.</op:operator><name pos:line="59" pos:column="49">IsWrapClassEligible</name></name><argument_list pos:line="59" pos:column="68">(<argument><expr><call><name><name pos:line="59" pos:column="69">It</name><op:operator pos:line="59" pos:column="71">.</op:operator><name><name pos:line="59" pos:column="72">IsAny</name><argument_list pos:line="59" pos:column="77">&lt;<argument><name pos:line="59" pos:column="78">Type</name></argument>&gt;</argument_list></name></name><argument_list pos:line="59" pos:column="83">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="59" pos:column="87">.</op:operator><call><name pos:line="59" pos:column="88">Returns</name><argument_list pos:line="59" pos:column="95">(<argument><expr><lit:literal type="boolean" pos:line="59" pos:column="96">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="60" pos:column="13">context</name><op:operator pos:line="60" pos:column="20">.</op:operator><name pos:line="60" pos:column="21">ProxyFactory</name><op:operator pos:line="60" pos:column="33">.</op:operator><name pos:line="60" pos:column="34">Setup</name></name><argument_list pos:line="60" pos:column="39">(<argument><expr><lambda><name pos:line="60" pos:column="40">pf</name> <op:operator pos:line="60" pos:column="43">=&gt;</op:operator> <call><name><name pos:line="60" pos:column="46">pf</name><op:operator pos:line="60" pos:column="48">.</op:operator><name pos:line="60" pos:column="49">WrapClass</name></name><argument_list pos:line="60" pos:column="58">(<argument><expr><call><name><name pos:line="60" pos:column="59">It</name><op:operator pos:line="60" pos:column="61">.</op:operator><name><name pos:line="60" pos:column="62">IsAny</name><argument_list pos:line="60" pos:column="67">&lt;<argument><name pos:line="60" pos:column="68">ValueProviderFactory</name></argument>&gt;</argument_list></name></name><argument_list pos:line="60" pos:column="89">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="60" pos:column="93">It</name><op:operator pos:line="60" pos:column="95">.</op:operator><name><name pos:line="60" pos:column="96">IsAny</name><argument_list pos:line="60" pos:column="101">&lt;<argument><name><name pos:line="60" pos:column="102">IEnumerable</name><argument_list pos:line="60" pos:column="113">&lt;<argument><name pos:line="60" pos:column="114">IAlternateMethod</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name><argument_list pos:line="60" pos:column="132">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="60" pos:column="136">Enumerable</name><op:operator pos:line="60" pos:column="146">.</op:operator><name><name pos:line="60" pos:column="147">Empty</name><argument_list pos:line="60" pos:column="152">&lt;<argument><name pos:line="60" pos:column="153">object</name></argument>&gt;</argument_list></name></name><argument_list pos:line="60" pos:column="160">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="60" pos:column="164">null</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="60" pos:column="170">.</op:operator><call><name pos:line="60" pos:column="171">Returns</name><argument_list pos:line="60" pos:column="178">(<argument><expr><name pos:line="60" pos:column="179">proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="62" pos:column="13">sut</name><op:operator pos:line="62" pos:column="16">.</op:operator><name pos:line="62" pos:column="17">Setup</name></name><argument_list pos:line="62" pos:column="22">(<argument><expr><name pos:line="62" pos:column="23">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="64" pos:column="13">Assert</name><op:operator pos:line="64" pos:column="19">.</op:operator><name pos:line="64" pos:column="20">Empty</name></name><argument_list pos:line="64" pos:column="25">(<argument><expr><name><name pos:line="64" pos:column="26">ValueProviderFactories</name><op:operator pos:line="64" pos:column="48">.</op:operator><name pos:line="64" pos:column="49">Factories</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="67" pos:column="9">[<expr><name pos:line="67" pos:column="10">Theory</name></expr><op:operator pos:line="67" pos:column="16">,</op:operator> <expr><name pos:line="67" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="68" pos:column="9">public</specifier> <name pos:line="68" pos:column="16">void</name></type> <name pos:line="68" pos:column="21">UpdateValueProviderFactories</name><parameter_list pos:line="68" pos:column="49">(<param><decl><type><name pos:line="68" pos:column="50">ModelBinderInspector</name></type> <name pos:line="68" pos:column="71">sut</name></decl></param>, <param><decl><type><name pos:line="68" pos:column="76">IInspectorContext</name></type> <name pos:line="68" pos:column="94">context</name></decl></param>, <param><decl><type><name pos:line="68" pos:column="103">ValueProviderFactory</name></type> <name pos:line="68" pos:column="124">proxy</name></decl></param>)</parameter_list>
        <block pos:line="69" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="70" pos:column="13">ValueProviderFactories</name><op:operator pos:line="70" pos:column="35">.</op:operator><name pos:line="70" pos:column="36">Factories</name><op:operator pos:line="70" pos:column="45">.</op:operator><name pos:line="70" pos:column="46">Add</name></name><argument_list pos:line="70" pos:column="49">(<argument><expr><op:operator pos:line="70" pos:column="50">new</op:operator> <call><name pos:line="70" pos:column="54">DummyValueProviderFactory</name><argument_list pos:line="70" pos:column="79">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="71" pos:column="13">context</name><op:operator pos:line="71" pos:column="20">.</op:operator><name pos:line="71" pos:column="21">ProxyFactory</name><op:operator pos:line="71" pos:column="33">.</op:operator><name pos:line="71" pos:column="34">Setup</name></name><argument_list pos:line="71" pos:column="39">(<argument><expr><lambda><name pos:line="71" pos:column="40">pf</name> <op:operator pos:line="71" pos:column="43">=&gt;</op:operator> <call><name><name pos:line="71" pos:column="46">pf</name><op:operator pos:line="71" pos:column="48">.</op:operator><name pos:line="71" pos:column="49">IsWrapClassEligible</name></name><argument_list pos:line="71" pos:column="68">(<argument><expr><call><name><name pos:line="71" pos:column="69">It</name><op:operator pos:line="71" pos:column="71">.</op:operator><name><name pos:line="71" pos:column="72">IsAny</name><argument_list pos:line="71" pos:column="77">&lt;<argument><name pos:line="71" pos:column="78">Type</name></argument>&gt;</argument_list></name></name><argument_list pos:line="71" pos:column="83">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="71" pos:column="87">.</op:operator><call><name pos:line="71" pos:column="88">Returns</name><argument_list pos:line="71" pos:column="95">(<argument><expr><lit:literal type="boolean" pos:line="71" pos:column="96">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="72" pos:column="13">context</name><op:operator pos:line="72" pos:column="20">.</op:operator><name pos:line="72" pos:column="21">ProxyFactory</name><op:operator pos:line="72" pos:column="33">.</op:operator><name pos:line="72" pos:column="34">Setup</name></name><argument_list pos:line="72" pos:column="39">(<argument><expr><lambda><name pos:line="72" pos:column="40">pf</name> <op:operator pos:line="72" pos:column="43">=&gt;</op:operator> <call><name><name pos:line="72" pos:column="46">pf</name><op:operator pos:line="72" pos:column="48">.</op:operator><name pos:line="72" pos:column="49">WrapClass</name></name><argument_list pos:line="72" pos:column="58">(<argument><expr><call><name><name pos:line="72" pos:column="59">It</name><op:operator pos:line="72" pos:column="61">.</op:operator><name><name pos:line="72" pos:column="62">IsAny</name><argument_list pos:line="72" pos:column="67">&lt;<argument><name pos:line="72" pos:column="68">ValueProviderFactory</name></argument>&gt;</argument_list></name></name><argument_list pos:line="72" pos:column="89">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="72" pos:column="93">It</name><op:operator pos:line="72" pos:column="95">.</op:operator><name><name pos:line="72" pos:column="96">IsAny</name><argument_list pos:line="72" pos:column="101">&lt;<argument><name><name pos:line="72" pos:column="102">IEnumerable</name><argument_list pos:line="72" pos:column="113">&lt;<argument><name pos:line="72" pos:column="114">IAlternateMethod</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name><argument_list pos:line="72" pos:column="132">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="72" pos:column="136">Enumerable</name><op:operator pos:line="72" pos:column="146">.</op:operator><name><name pos:line="72" pos:column="147">Empty</name><argument_list pos:line="72" pos:column="152">&lt;<argument><name pos:line="72" pos:column="153">object</name></argument>&gt;</argument_list></name></name><argument_list pos:line="72" pos:column="160">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="72" pos:column="164">null</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="72" pos:column="170">.</op:operator><call><name pos:line="72" pos:column="171">Returns</name><argument_list pos:line="72" pos:column="178">(<argument><expr><name pos:line="72" pos:column="179">proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="74" pos:column="13">sut</name><op:operator pos:line="74" pos:column="16">.</op:operator><name pos:line="74" pos:column="17">Setup</name></name><argument_list pos:line="74" pos:column="22">(<argument><expr><name pos:line="74" pos:column="23">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="76" pos:column="13">Assert</name><op:operator pos:line="76" pos:column="19">.</op:operator><name pos:line="76" pos:column="20">Contains</name></name><argument_list pos:line="76" pos:column="28">(<argument><expr><name pos:line="76" pos:column="29">proxy</name></expr></argument>, <argument><expr><name><name pos:line="76" pos:column="36">ValueProviderFactories</name><op:operator pos:line="76" pos:column="58">.</op:operator><name pos:line="76" pos:column="59">Factories</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="77" pos:column="13">context</name><op:operator pos:line="77" pos:column="20">.</op:operator><name pos:line="77" pos:column="21">Logger</name><op:operator pos:line="77" pos:column="27">.</op:operator><name pos:line="77" pos:column="28">Verify</name></name><argument_list pos:line="77" pos:column="34">(<argument><expr><lambda><name pos:line="77" pos:column="35">l</name> <op:operator pos:line="77" pos:column="37">=&gt;</op:operator> <call><name><name pos:line="77" pos:column="40">l</name><op:operator pos:line="77" pos:column="41">.</op:operator><name pos:line="77" pos:column="42">Info</name></name><argument_list pos:line="77" pos:column="46">(<argument><expr><call><name><name pos:line="77" pos:column="47">It</name><op:operator pos:line="77" pos:column="49">.</op:operator><name><name pos:line="77" pos:column="50">IsAny</name><argument_list pos:line="77" pos:column="55">&lt;<argument><name pos:line="77" pos:column="56">string</name></argument>&gt;</argument_list></name></name><argument_list pos:line="77" pos:column="63">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="77" pos:column="67">It</name><op:operator pos:line="77" pos:column="69">.</op:operator><name><name pos:line="77" pos:column="70">IsAny</name><argument_list pos:line="77" pos:column="75">&lt;<argument><name><name pos:line="77" pos:column="76">object</name><index pos:line="77" pos:column="82">[]</index></name></argument>&gt;</argument_list></name></name><argument_list pos:line="77" pos:column="85">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="80" pos:column="9">[<expr><name pos:line="80" pos:column="10">Theory</name></expr><op:operator pos:line="80" pos:column="16">,</op:operator> <expr><name pos:line="80" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="81" pos:column="9">public</specifier> <name pos:line="81" pos:column="16">void</name></type> <name pos:line="81" pos:column="21">UpdateModelBinders</name><parameter_list pos:line="81" pos:column="39">(<param><decl><type><name pos:line="81" pos:column="40">ModelBinderInspector</name></type> <name pos:line="81" pos:column="61">sut</name></decl></param>, <param><decl><type><name pos:line="81" pos:column="66">IInspectorContext</name></type> <name pos:line="81" pos:column="84">context</name></decl></param>, <param><decl><type><name pos:line="81" pos:column="93">DummyDefaultModelBinder</name></type> <name pos:line="81" pos:column="117">seedBinder</name></decl></param>, <param><decl><type><name pos:line="81" pos:column="129">IModelBinder</name></type> <name pos:line="81" pos:column="142">proxy</name></decl></param>)</parameter_list>
        <block pos:line="82" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="83" pos:column="13">ModelBinders</name><op:operator pos:line="83" pos:column="25">.</op:operator><name pos:line="83" pos:column="26">Binders</name><op:operator pos:line="83" pos:column="33">.</op:operator><name pos:line="83" pos:column="34">Add</name></name><argument_list pos:line="83" pos:column="37">(<argument><expr><call><name pos:line="83" pos:column="38">typeof</name><argument_list pos:line="83" pos:column="44">(<argument><expr><name pos:line="83" pos:column="45">object</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="83" pos:column="54">seedBinder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="84" pos:column="13">context</name><op:operator pos:line="84" pos:column="20">.</op:operator><name pos:line="84" pos:column="21">ProxyFactory</name><op:operator pos:line="84" pos:column="33">.</op:operator><name pos:line="84" pos:column="34">Setup</name></name><argument_list pos:line="84" pos:column="39">(<argument><expr><lambda><name pos:line="84" pos:column="40">pf</name> <op:operator pos:line="84" pos:column="43">=&gt;</op:operator> <call><name><name pos:line="84" pos:column="46">pf</name><op:operator pos:line="84" pos:column="48">.</op:operator><name><name pos:line="84" pos:column="49">IsWrapInterfaceEligible</name><argument_list pos:line="84" pos:column="72">&lt;<argument><name pos:line="84" pos:column="73">IModelBinder</name></argument>&gt;</argument_list></name></name><argument_list pos:line="84" pos:column="86">(<argument><expr><call><name><name pos:line="84" pos:column="87">It</name><op:operator pos:line="84" pos:column="89">.</op:operator><name><name pos:line="84" pos:column="90">IsAny</name><argument_list pos:line="84" pos:column="95">&lt;<argument><name pos:line="84" pos:column="96">Type</name></argument>&gt;</argument_list></name></name><argument_list pos:line="84" pos:column="101">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="84" pos:column="105">.</op:operator><call><name pos:line="84" pos:column="106">Returns</name><argument_list pos:line="84" pos:column="113">(<argument><expr><lit:literal type="boolean" pos:line="84" pos:column="114">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="85" pos:column="13">context</name><op:operator pos:line="85" pos:column="20">.</op:operator><name pos:line="85" pos:column="21">ProxyFactory</name><op:operator pos:line="85" pos:column="33">.</op:operator><name pos:line="85" pos:column="34">Setup</name></name><argument_list pos:line="85" pos:column="39">(<argument><expr><lambda><name pos:line="85" pos:column="40">pf</name> <op:operator pos:line="85" pos:column="43">=&gt;</op:operator> <call><name><name pos:line="85" pos:column="46">pf</name><op:operator pos:line="85" pos:column="48">.</op:operator><name pos:line="85" pos:column="49">WrapInterface</name></name><argument_list pos:line="85" pos:column="62">(<argument><expr><call><name><name pos:line="85" pos:column="63">It</name><op:operator pos:line="85" pos:column="65">.</op:operator><name><name pos:line="85" pos:column="66">IsAny</name><argument_list pos:line="85" pos:column="71">&lt;<argument><name pos:line="85" pos:column="72">IModelBinder</name></argument>&gt;</argument_list></name></name><argument_list pos:line="85" pos:column="85">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="85" pos:column="89">It</name><op:operator pos:line="85" pos:column="91">.</op:operator><name><name pos:line="85" pos:column="92">IsAny</name><argument_list pos:line="85" pos:column="97">&lt;<argument><name><name pos:line="85" pos:column="98">IEnumerable</name><argument_list pos:line="85" pos:column="109">&lt;<argument><name pos:line="85" pos:column="110">IAlternateMethod</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name><argument_list pos:line="85" pos:column="128">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="85" pos:column="132">.</op:operator><call><name pos:line="85" pos:column="133">Returns</name><argument_list pos:line="85" pos:column="140">(<argument><expr><name pos:line="85" pos:column="141">proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="87" pos:column="13">sut</name><op:operator pos:line="87" pos:column="16">.</op:operator><name pos:line="87" pos:column="17">Setup</name></name><argument_list pos:line="87" pos:column="22">(<argument><expr><name pos:line="87" pos:column="23">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="89" pos:column="13">Assert</name><op:operator pos:line="89" pos:column="19">.</op:operator><name pos:line="89" pos:column="20">Contains</name></name><argument_list pos:line="89" pos:column="28">(<argument><expr><name pos:line="89" pos:column="29">proxy</name></expr></argument>, <argument><expr><name><name pos:line="89" pos:column="36">ModelBinders</name><op:operator pos:line="89" pos:column="48">.</op:operator><name pos:line="89" pos:column="49">Binders</name><op:operator pos:line="89" pos:column="56">.</op:operator><name pos:line="89" pos:column="57">Values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="90" pos:column="13">Assert</name><op:operator pos:line="90" pos:column="19">.</op:operator><name pos:line="90" pos:column="20">DoesNotContain</name></name><argument_list pos:line="90" pos:column="34">(<argument><expr><name pos:line="90" pos:column="35">seedBinder</name></expr></argument>, <argument><expr><name><name pos:line="90" pos:column="47">ModelBinders</name><op:operator pos:line="90" pos:column="59">.</op:operator><name pos:line="90" pos:column="60">Binders</name><op:operator pos:line="90" pos:column="67">.</op:operator><name pos:line="90" pos:column="68">Values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="91" pos:column="13">context</name><op:operator pos:line="91" pos:column="20">.</op:operator><name pos:line="91" pos:column="21">Logger</name><op:operator pos:line="91" pos:column="27">.</op:operator><name pos:line="91" pos:column="28">Verify</name></name><argument_list pos:line="91" pos:column="34">(<argument><expr><lambda><name pos:line="91" pos:column="35">l</name> <op:operator pos:line="91" pos:column="37">=&gt;</op:operator> <call><name><name pos:line="91" pos:column="40">l</name><op:operator pos:line="91" pos:column="41">.</op:operator><name pos:line="91" pos:column="42">Info</name></name><argument_list pos:line="91" pos:column="46">(<argument><expr><call><name><name pos:line="91" pos:column="47">It</name><op:operator pos:line="91" pos:column="49">.</op:operator><name><name pos:line="91" pos:column="50">IsAny</name><argument_list pos:line="91" pos:column="55">&lt;<argument><name pos:line="91" pos:column="56">string</name></argument>&gt;</argument_list></name></name><argument_list pos:line="91" pos:column="63">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="91" pos:column="67">It</name><op:operator pos:line="91" pos:column="69">.</op:operator><name><name pos:line="91" pos:column="70">IsAny</name><argument_list pos:line="91" pos:column="75">&lt;<argument><name><name pos:line="91" pos:column="76">object</name><index pos:line="91" pos:column="82">[]</index></name></argument>&gt;</argument_list></name></name><argument_list pos:line="91" pos:column="85">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="94" pos:column="9">[<expr><name pos:line="94" pos:column="10">Theory</name></expr><op:operator pos:line="94" pos:column="16">,</op:operator> <expr><name pos:line="94" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="95" pos:column="9">public</specifier> <name pos:line="95" pos:column="16">void</name></type> <name pos:line="95" pos:column="21">UpdateDefaultModelBinder</name><parameter_list pos:line="95" pos:column="45">(<param><decl><type><name pos:line="95" pos:column="46">ModelBinderInspector</name></type> <name pos:line="95" pos:column="67">sut</name></decl></param>, <param><decl><type><name pos:line="95" pos:column="72">IInspectorContext</name></type> <name pos:line="95" pos:column="90">context</name></decl></param>, <param><decl><type><name pos:line="95" pos:column="99">DefaultModelBinder</name></type> <name pos:line="95" pos:column="118">proxy</name></decl></param>)</parameter_list>
        <block pos:line="96" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="97" pos:column="13">context</name><op:operator pos:line="97" pos:column="20">.</op:operator><name pos:line="97" pos:column="21">ProxyFactory</name><op:operator pos:line="97" pos:column="33">.</op:operator><name pos:line="97" pos:column="34">Setup</name></name><argument_list pos:line="97" pos:column="39">(<argument><expr><lambda><name pos:line="97" pos:column="40">pf</name> <op:operator pos:line="97" pos:column="43">=&gt;</op:operator> <call><name><name pos:line="97" pos:column="46">pf</name><op:operator pos:line="97" pos:column="48">.</op:operator><name pos:line="97" pos:column="49">IsExtendClassEligible</name></name><argument_list pos:line="97" pos:column="70">(<argument><expr><call><name><name pos:line="97" pos:column="71">It</name><op:operator pos:line="97" pos:column="73">.</op:operator><name><name pos:line="97" pos:column="74">IsAny</name><argument_list pos:line="97" pos:column="79">&lt;<argument><name pos:line="97" pos:column="80">Type</name></argument>&gt;</argument_list></name></name><argument_list pos:line="97" pos:column="85">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="97" pos:column="89">.</op:operator><call><name pos:line="97" pos:column="90">Returns</name><argument_list pos:line="97" pos:column="97">(<argument><expr><lit:literal type="boolean" pos:line="97" pos:column="98">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="98" pos:column="13">context</name><op:operator pos:line="98" pos:column="20">.</op:operator><name pos:line="98" pos:column="21">ProxyFactory</name><op:operator pos:line="98" pos:column="33">.</op:operator><name pos:line="98" pos:column="34">Setup</name></name><argument_list pos:line="98" pos:column="39">(<argument><expr><lambda><name pos:line="98" pos:column="40">pf</name> <op:operator pos:line="98" pos:column="43">=&gt;</op:operator> <call><name><name pos:line="98" pos:column="46">pf</name><op:operator pos:line="98" pos:column="48">.</op:operator><name><name pos:line="98" pos:column="49">ExtendClass</name><argument_list pos:line="98" pos:column="60">&lt;<argument><name pos:line="98" pos:column="61">DefaultModelBinder</name></argument>&gt;</argument_list></name></name><argument_list pos:line="98" pos:column="80">(<argument><expr><call><name><name pos:line="98" pos:column="81">It</name><op:operator pos:line="98" pos:column="83">.</op:operator><name><name pos:line="98" pos:column="84">IsAny</name><argument_list pos:line="98" pos:column="89">&lt;<argument><name><name pos:line="98" pos:column="90">IEnumerable</name><argument_list pos:line="98" pos:column="101">&lt;<argument><name pos:line="98" pos:column="102">IAlternateMethod</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name><argument_list pos:line="98" pos:column="120">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="98" pos:column="124">.</op:operator><call><name pos:line="98" pos:column="125">Returns</name><argument_list pos:line="98" pos:column="132">(<argument><expr><name pos:line="98" pos:column="133">proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="100" pos:column="13">sut</name><op:operator pos:line="100" pos:column="16">.</op:operator><name pos:line="100" pos:column="17">Setup</name></name><argument_list pos:line="100" pos:column="22">(<argument><expr><name pos:line="100" pos:column="23">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="102" pos:column="13">Assert</name><op:operator pos:line="102" pos:column="19">.</op:operator><name pos:line="102" pos:column="20">Equal</name></name><argument_list pos:line="102" pos:column="25">(<argument><expr><name pos:line="102" pos:column="26">proxy</name></expr></argument>, <argument><expr><name><name pos:line="102" pos:column="33">ModelBinders</name><op:operator pos:line="102" pos:column="45">.</op:operator><name pos:line="102" pos:column="46">Binders</name><op:operator pos:line="102" pos:column="53">.</op:operator><name pos:line="102" pos:column="54">DefaultBinder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="103" pos:column="13">context</name><op:operator pos:line="103" pos:column="20">.</op:operator><name pos:line="103" pos:column="21">Logger</name><op:operator pos:line="103" pos:column="27">.</op:operator><name pos:line="103" pos:column="28">Verify</name></name><argument_list pos:line="103" pos:column="34">(<argument><expr><lambda><name pos:line="103" pos:column="35">l</name> <op:operator pos:line="103" pos:column="37">=&gt;</op:operator> <call><name><name pos:line="103" pos:column="40">l</name><op:operator pos:line="103" pos:column="41">.</op:operator><name pos:line="103" pos:column="42">Info</name></name><argument_list pos:line="103" pos:column="46">(<argument><expr><call><name><name pos:line="103" pos:column="47">It</name><op:operator pos:line="103" pos:column="49">.</op:operator><name><name pos:line="103" pos:column="50">IsAny</name><argument_list pos:line="103" pos:column="55">&lt;<argument><name pos:line="103" pos:column="56">string</name></argument>&gt;</argument_list></name></name><argument_list pos:line="103" pos:column="63">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="103" pos:column="67">It</name><op:operator pos:line="103" pos:column="69">.</op:operator><name><name pos:line="103" pos:column="70">IsAny</name><argument_list pos:line="103" pos:column="75">&lt;<argument><name><name pos:line="103" pos:column="76">object</name><index pos:line="103" pos:column="82">[]</index></name></argument>&gt;</argument_list></name></name><argument_list pos:line="103" pos:column="85">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
