<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Core\Tab\Assist\StringFormattingExtensions.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>

<namespace pos:line="3" pos:column="1">namespace <name><name pos:line="3" pos:column="11">Glimpse</name><op:operator pos:line="3" pos:column="18">.</op:operator><name pos:line="3" pos:column="19">Core</name><op:operator pos:line="3" pos:column="23">.</op:operator><name pos:line="3" pos:column="24">Tab</name><op:operator pos:line="3" pos:column="27">.</op:operator><name pos:line="3" pos:column="28">Assist</name></name>
<block pos:line="4" pos:column="1">{
    <class><specifier pos:line="5" pos:column="5">public</specifier> <specifier pos:line="5" pos:column="12">static</specifier> class <name pos:line="5" pos:column="25">StringFormattingExtensions</name>
    <block pos:line="6" pos:column="5">{
        <function><type><specifier pos:line="7" pos:column="9">public</specifier> <specifier pos:line="7" pos:column="16">static</specifier> <name pos:line="7" pos:column="23">string</name></type> <name pos:line="7" pos:column="30">Strong</name><parameter_list pos:line="7" pos:column="36">(<param><decl><type><name pos:line="7" pos:column="37">this</name> <name pos:line="7" pos:column="42">string</name></type> <name pos:line="7" pos:column="49">value</name></decl></param>)</parameter_list>
        <block pos:line="8" pos:column="9">{
            <return pos:line="9" pos:column="13">return <expr><call><name><name pos:line="9" pos:column="20">Formats</name><op:operator pos:line="9" pos:column="27">.</op:operator><name pos:line="9" pos:column="28">Strong</name><op:operator pos:line="9" pos:column="34">.</op:operator><name pos:line="9" pos:column="35">FormatWith</name></name><argument_list pos:line="9" pos:column="45">(<argument><expr><name pos:line="9" pos:column="46">value</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="12" pos:column="9">public</specifier> <specifier pos:line="12" pos:column="16">static</specifier> <name pos:line="12" pos:column="23">string</name></type> <name pos:line="12" pos:column="30">StrongIf</name><parameter_list pos:line="12" pos:column="38">(<param><decl><type><name pos:line="12" pos:column="39">this</name> <name pos:line="12" pos:column="44">string</name></type> <name pos:line="12" pos:column="51">value</name></decl></param>, <param><decl><type><name pos:line="12" pos:column="58">bool</name></type> <name pos:line="12" pos:column="63">condition</name></decl></param>)</parameter_list>
        <block pos:line="13" pos:column="9">{
            <return pos:line="14" pos:column="13">return <expr><name pos:line="14" pos:column="20">condition</name> <op:operator pos:line="14" pos:column="30">?</op:operator> <call><name><name pos:line="14" pos:column="32">value</name><op:operator pos:line="14" pos:column="37">.</op:operator><name pos:line="14" pos:column="38">Strong</name></name><argument_list pos:line="14" pos:column="44">()</argument_list></call> <op:operator pos:line="14" pos:column="47">:</op:operator> <name pos:line="14" pos:column="49">value</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="17" pos:column="9">public</specifier> <specifier pos:line="17" pos:column="16">static</specifier> <name pos:line="17" pos:column="23">string</name></type> <name pos:line="17" pos:column="30">Emphasis</name><parameter_list pos:line="17" pos:column="38">(<param><decl><type><name pos:line="17" pos:column="39">this</name> <name pos:line="17" pos:column="44">string</name></type> <name pos:line="17" pos:column="51">value</name></decl></param>)</parameter_list>
        <block pos:line="18" pos:column="9">{
            <return pos:line="19" pos:column="13">return <expr><call><name><name pos:line="19" pos:column="20">Formats</name><op:operator pos:line="19" pos:column="27">.</op:operator><name pos:line="19" pos:column="28">Emphasis</name><op:operator pos:line="19" pos:column="36">.</op:operator><name pos:line="19" pos:column="37">FormatWith</name></name><argument_list pos:line="19" pos:column="47">(<argument><expr><name pos:line="19" pos:column="48">value</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="22" pos:column="9">public</specifier> <specifier pos:line="22" pos:column="16">static</specifier> <name pos:line="22" pos:column="23">string</name></type> <name pos:line="22" pos:column="30">EmphasisIf</name><parameter_list pos:line="22" pos:column="40">(<param><decl><type><name pos:line="22" pos:column="41">this</name> <name pos:line="22" pos:column="46">string</name></type> <name pos:line="22" pos:column="53">value</name></decl></param>, <param><decl><type><name pos:line="22" pos:column="60">bool</name></type> <name pos:line="22" pos:column="65">condition</name></decl></param>)</parameter_list>
        <block pos:line="23" pos:column="9">{
            <return pos:line="24" pos:column="13">return <expr><name pos:line="24" pos:column="20">condition</name> <op:operator pos:line="24" pos:column="30">?</op:operator> <call><name><name pos:line="24" pos:column="32">value</name><op:operator pos:line="24" pos:column="37">.</op:operator><name pos:line="24" pos:column="38">Emphasis</name></name><argument_list pos:line="24" pos:column="46">()</argument_list></call> <op:operator pos:line="24" pos:column="49">:</op:operator> <name pos:line="24" pos:column="51">value</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="27" pos:column="9">public</specifier> <specifier pos:line="27" pos:column="16">static</specifier> <name pos:line="27" pos:column="23">string</name></type> <name pos:line="27" pos:column="30">Raw</name><parameter_list pos:line="27" pos:column="33">(<param><decl><type><name pos:line="27" pos:column="34">this</name> <name pos:line="27" pos:column="39">string</name></type> <name pos:line="27" pos:column="46">value</name></decl></param>)</parameter_list>
        <block pos:line="28" pos:column="9">{
            <return pos:line="29" pos:column="13">return <expr><call><name><name pos:line="29" pos:column="20">Formats</name><op:operator pos:line="29" pos:column="27">.</op:operator><name pos:line="29" pos:column="28">Raw</name><op:operator pos:line="29" pos:column="31">.</op:operator><name pos:line="29" pos:column="32">FormatWith</name></name><argument_list pos:line="29" pos:column="42">(<argument><expr><name pos:line="29" pos:column="43">value</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="32" pos:column="9">public</specifier> <specifier pos:line="32" pos:column="16">static</specifier> <name pos:line="32" pos:column="23">string</name></type> <name pos:line="32" pos:column="30">RawIf</name><parameter_list pos:line="32" pos:column="35">(<param><decl><type><name pos:line="32" pos:column="36">this</name> <name pos:line="32" pos:column="41">string</name></type> <name pos:line="32" pos:column="48">value</name></decl></param>, <param><decl><type><name pos:line="32" pos:column="55">bool</name></type> <name pos:line="32" pos:column="60">condition</name></decl></param>)</parameter_list>
        <block pos:line="33" pos:column="9">{
            <return pos:line="34" pos:column="13">return <expr><name pos:line="34" pos:column="20">condition</name> <op:operator pos:line="34" pos:column="30">?</op:operator> <call><name><name pos:line="34" pos:column="32">value</name><op:operator pos:line="34" pos:column="37">.</op:operator><name pos:line="34" pos:column="38">Raw</name></name><argument_list pos:line="34" pos:column="41">()</argument_list></call> <op:operator pos:line="34" pos:column="44">:</op:operator> <name pos:line="34" pos:column="46">value</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="37" pos:column="9">public</specifier> <specifier pos:line="37" pos:column="16">static</specifier> <name pos:line="37" pos:column="23">string</name></type> <name pos:line="37" pos:column="30">Sub</name><parameter_list pos:line="37" pos:column="33">(<param><decl><type><name pos:line="37" pos:column="34">this</name> <name pos:line="37" pos:column="39">string</name></type> <name pos:line="37" pos:column="46">value</name></decl></param>)</parameter_list>
        <block pos:line="38" pos:column="9">{
            <return pos:line="39" pos:column="13">return <expr><call><name><name pos:line="39" pos:column="20">Formats</name><op:operator pos:line="39" pos:column="27">.</op:operator><name pos:line="39" pos:column="28">Sub</name><op:operator pos:line="39" pos:column="31">.</op:operator><name pos:line="39" pos:column="32">FormatWith</name></name><argument_list pos:line="39" pos:column="42">(<argument><expr><name pos:line="39" pos:column="43">value</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="42" pos:column="9">public</specifier> <specifier pos:line="42" pos:column="16">static</specifier> <name pos:line="42" pos:column="23">string</name></type> <name pos:line="42" pos:column="30">SubIf</name><parameter_list pos:line="42" pos:column="35">(<param><decl><type><name pos:line="42" pos:column="36">this</name> <name pos:line="42" pos:column="41">string</name></type> <name pos:line="42" pos:column="48">value</name></decl></param>, <param><decl><type><name pos:line="42" pos:column="55">bool</name></type> <name pos:line="42" pos:column="60">condition</name></decl></param>)</parameter_list>
        <block pos:line="43" pos:column="9">{
            <return pos:line="44" pos:column="13">return <expr><name pos:line="44" pos:column="20">condition</name> <op:operator pos:line="44" pos:column="30">?</op:operator> <call><name><name pos:line="44" pos:column="32">value</name><op:operator pos:line="44" pos:column="37">.</op:operator><name pos:line="44" pos:column="38">Sub</name></name><argument_list pos:line="44" pos:column="41">()</argument_list></call> <op:operator pos:line="44" pos:column="44">:</op:operator> <name pos:line="44" pos:column="46">value</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="47" pos:column="9">public</specifier> <specifier pos:line="47" pos:column="16">static</specifier> <name pos:line="47" pos:column="23">string</name></type> <name pos:line="47" pos:column="30">Underline</name><parameter_list pos:line="47" pos:column="39">(<param><decl><type><name pos:line="47" pos:column="40">this</name> <name pos:line="47" pos:column="45">string</name></type> <name pos:line="47" pos:column="52">value</name></decl></param>)</parameter_list>
        <block pos:line="48" pos:column="9">{
            <return pos:line="49" pos:column="13">return <expr><call><name><name pos:line="49" pos:column="20">Formats</name><op:operator pos:line="49" pos:column="27">.</op:operator><name pos:line="49" pos:column="28">Underline</name><op:operator pos:line="49" pos:column="37">.</op:operator><name pos:line="49" pos:column="38">FormatWith</name></name><argument_list pos:line="49" pos:column="48">(<argument><expr><name pos:line="49" pos:column="49">value</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="52" pos:column="9">public</specifier> <specifier pos:line="52" pos:column="16">static</specifier> <name pos:line="52" pos:column="23">string</name></type> <name pos:line="52" pos:column="30">UnderlineIf</name><parameter_list pos:line="52" pos:column="41">(<param><decl><type><name pos:line="52" pos:column="42">this</name> <name pos:line="52" pos:column="47">string</name></type> <name pos:line="52" pos:column="54">value</name></decl></param>, <param><decl><type><name pos:line="52" pos:column="61">bool</name></type> <name pos:line="52" pos:column="66">condition</name></decl></param>)</parameter_list>
        <block pos:line="53" pos:column="9">{
            <return pos:line="54" pos:column="13">return <expr><name pos:line="54" pos:column="20">condition</name> <op:operator pos:line="54" pos:column="30">?</op:operator> <call><name><name pos:line="54" pos:column="32">value</name><op:operator pos:line="54" pos:column="37">.</op:operator><name pos:line="54" pos:column="38">Underline</name></name><argument_list pos:line="54" pos:column="47">()</argument_list></call> <op:operator pos:line="54" pos:column="50">:</op:operator> <name pos:line="54" pos:column="52">value</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="57" pos:column="9">public</specifier> <specifier pos:line="57" pos:column="16">static</specifier> <name pos:line="57" pos:column="23">string</name></type> <name pos:line="57" pos:column="30">FormatWith</name><parameter_list pos:line="57" pos:column="40">(<param><decl><type><name pos:line="57" pos:column="41">this</name> <name pos:line="57" pos:column="46">string</name></type> <name pos:line="57" pos:column="53">format</name></decl></param>, <param><decl><type><specifier pos:line="57" pos:column="61">params</specifier> <name><name pos:line="57" pos:column="68">object</name><index pos:line="57" pos:column="74">[]</index></name></type> <name pos:line="57" pos:column="77">arguments</name></decl></param>)</parameter_list>
        <block pos:line="58" pos:column="9">{
            <return pos:line="59" pos:column="13">return <expr><call><name><name pos:line="59" pos:column="20">string</name><op:operator pos:line="59" pos:column="26">.</op:operator><name pos:line="59" pos:column="27">Format</name></name><argument_list pos:line="59" pos:column="33">(<argument><expr><name pos:line="59" pos:column="34">format</name></expr></argument>, <argument><expr><name pos:line="59" pos:column="42">arguments</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
