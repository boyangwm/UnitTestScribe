<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Core\Configuration\RegexElement.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">System</name><op:operator pos:line="1" pos:column="13">.</op:operator><name pos:line="1" pos:column="14">ComponentModel</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Configuration</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Text</name><op:operator pos:line="3" pos:column="18">.</op:operator><name pos:line="3" pos:column="19">RegularExpressions</name></name>;</using>

<namespace pos:line="5" pos:column="1">namespace <name><name pos:line="5" pos:column="11">Glimpse</name><op:operator pos:line="5" pos:column="18">.</op:operator><name pos:line="5" pos:column="19">Core</name><op:operator pos:line="5" pos:column="23">.</op:operator><name pos:line="5" pos:column="24">Configuration</name></name>
<block pos:line="6" pos:column="1">{
    <comment type="line" pos:line="7" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="8" pos:column="5">/// The Glimpse configuration node representing a regular expression.</comment>
    <comment type="line" pos:line="9" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="10" pos:column="5">public</specifier> class <name pos:line="10" pos:column="18">RegexElement</name> <super pos:line="10" pos:column="31">: <name pos:line="10" pos:column="33">ConfigurationElement</name></super>
    <block pos:line="11" pos:column="5">{
        <comment type="line" pos:line="12" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="13" pos:column="9">/// Gets or sets the regular expression.</comment>
        <comment type="line" pos:line="14" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="15" pos:column="9">/// &lt;value&gt;</comment>
        <comment type="line" pos:line="16" pos:column="9">/// Any valid &lt;see href="http://msdn.microsoft.com/en-us/library/hs600312%28v=vs.110%29.aspx"&gt;.NET Framework regular expression&lt;/see&gt;. is supported. </comment>
        <comment type="line" pos:line="17" pos:column="9">/// &lt;/value&gt;</comment>
        <decl_stmt><decl><type><attribute pos:line="18" pos:column="9">[<expr><call><name pos:line="18" pos:column="10">ConfigurationProperty</name><argument_list pos:line="18" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="18" pos:column="32">"regex"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <attribute pos:line="19" pos:column="9">[<expr><call><name pos:line="19" pos:column="10">TypeConverter</name><argument_list pos:line="19" pos:column="23">(<argument><expr><call><name pos:line="19" pos:column="24">typeof</name><argument_list pos:line="19" pos:column="30">(<argument><expr><name pos:line="19" pos:column="31">RegexConverter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="20" pos:column="9">public</specifier> <name pos:line="20" pos:column="16">Regex</name></type> <name pos:line="20" pos:column="22">Regex</name>
        <block pos:line="21" pos:column="9">{
            <function><name pos:line="22" pos:column="13">get</name> <block pos:line="22" pos:column="17">{ <return pos:line="22" pos:column="19">return <expr><op:operator pos:line="22" pos:column="26">(</op:operator><name pos:line="22" pos:column="27">Regex</name><op:operator pos:line="22" pos:column="32">)</op:operator><name><name pos:line="22" pos:column="33">base</name><index pos:line="22" pos:column="37">[<expr><lit:literal type="string" pos:line="22" pos:column="38">"regex"</lit:literal></expr>]</index></name></expr>;</return> }</block></function>
            <function><name pos:line="23" pos:column="13">set</name> <block pos:line="23" pos:column="17">{ <expr_stmt><expr><name><name pos:line="23" pos:column="19">base</name><index pos:line="23" pos:column="23">[<expr><lit:literal type="string" pos:line="23" pos:column="24">"regex"</lit:literal></expr>]</index></name> <op:operator pos:line="23" pos:column="33">=</op:operator> <name pos:line="23" pos:column="35">value</name></expr>;</expr_stmt> }</block></function>
        }</block></decl></decl_stmt>
    }</block></class>
}</block></namespace></unit>
