<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Mvc\AlternateType\ControllerFactory.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Diagnostics</name><op:operator pos:line="3" pos:column="25">.</op:operator><name pos:line="3" pos:column="26">CodeAnalysis</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Reflection</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Web</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">Mvc</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">System</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">Web</name><op:operator pos:line="6" pos:column="17">.</op:operator><name pos:line="6" pos:column="18">Mvc</name><op:operator pos:line="6" pos:column="21">.</op:operator><name pos:line="6" pos:column="22">Async</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">System</name><op:operator pos:line="7" pos:column="13">.</op:operator><name pos:line="7" pos:column="14">Web</name><op:operator pos:line="7" pos:column="17">.</op:operator><name pos:line="7" pos:column="18">Routing</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Glimpse</name><op:operator pos:line="8" pos:column="14">.</op:operator><name pos:line="8" pos:column="15">Core</name><op:operator pos:line="8" pos:column="19">.</op:operator><name pos:line="8" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">Glimpse</name><op:operator pos:line="9" pos:column="14">.</op:operator><name pos:line="9" pos:column="15">Core</name><op:operator pos:line="9" pos:column="19">.</op:operator><name pos:line="9" pos:column="20">Message</name></name>;</using>

<namespace pos:line="11" pos:column="1">namespace <name><name pos:line="11" pos:column="11">Glimpse</name><op:operator pos:line="11" pos:column="18">.</op:operator><name pos:line="11" pos:column="19">Mvc</name><op:operator pos:line="11" pos:column="22">.</op:operator><name pos:line="11" pos:column="23">AlternateType</name></name>
<block pos:line="12" pos:column="1">{
    <class><specifier pos:line="13" pos:column="5">public</specifier> class <name pos:line="13" pos:column="18">ControllerFactory</name> <super pos:line="13" pos:column="36">: <name><name pos:line="13" pos:column="38">AlternateType</name><argument_list pos:line="13" pos:column="51">&lt;<argument><name pos:line="13" pos:column="52">IControllerFactory</name></argument>&gt;</argument_list></name></super>
    <block pos:line="14" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="15" pos:column="9">private</specifier> <name><name pos:line="15" pos:column="17">IEnumerable</name><argument_list pos:line="15" pos:column="28">&lt;<argument><name pos:line="15" pos:column="29">IAlternateMethod</name></argument>&gt;</argument_list></name></type> <name pos:line="15" pos:column="47">allMethods</name></decl>;</decl_stmt>

        <constructor><specifier pos:line="17" pos:column="9">public</specifier> <name pos:line="17" pos:column="16">ControllerFactory</name><parameter_list pos:line="17" pos:column="33">(<param><decl><type><name pos:line="17" pos:column="34">IProxyFactory</name></type> <name pos:line="17" pos:column="48">proxyFactory</name></decl></param>)</parameter_list> <member_list pos:line="17" pos:column="62">: <call><name pos:line="17" pos:column="64">base</name><argument_list pos:line="17" pos:column="68">(<argument><expr><name pos:line="17" pos:column="69">proxyFactory</name></expr></argument>)</argument_list></call>
        </member_list><block pos:line="18" pos:column="9">{
        }</block></constructor>

        <decl_stmt><decl><type><specifier pos:line="21" pos:column="9">public</specifier> <specifier pos:line="21" pos:column="16">override</specifier> <name><name pos:line="21" pos:column="25">IEnumerable</name><argument_list pos:line="21" pos:column="36">&lt;<argument><name pos:line="21" pos:column="37">IAlternateMethod</name></argument>&gt;</argument_list></name></type> <name pos:line="21" pos:column="55">AllMethods</name>
        <block pos:line="22" pos:column="9">{
            <function><name pos:line="23" pos:column="13">get</name>
            <block pos:line="24" pos:column="13">{
                <return pos:line="25" pos:column="17">return <expr><name pos:line="25" pos:column="24">allMethods</name> <op:operator pos:line="25" pos:column="35">??</op:operator> <op:operator pos:line="25" pos:column="38">(</op:operator><name pos:line="25" pos:column="39">allMethods</name> <op:operator pos:line="25" pos:column="50">=</op:operator> <op:operator pos:line="25" pos:column="52">new</op:operator> <name><name pos:line="25" pos:column="56">List</name><argument_list pos:line="25" pos:column="60">&lt;<argument><name pos:line="25" pos:column="61">IAlternateMethod</name></argument>&gt;</argument_list></name>
                    <block pos:line="26" pos:column="21">{
                        <expr><op:operator pos:line="27" pos:column="25">new</op:operator> <call><name pos:line="27" pos:column="29">CreateController</name><argument_list pos:line="27" pos:column="45">(<argument><expr><op:operator pos:line="27" pos:column="46">new</op:operator> <call><name pos:line="27" pos:column="50">ActionInvoker</name><argument_list pos:line="27" pos:column="63">(<argument><expr><name pos:line="27" pos:column="64">ProxyFactory</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="27" pos:column="79">new</op:operator> <call><name pos:line="27" pos:column="83">AsyncActionInvoker</name><argument_list pos:line="27" pos:column="101">(<argument><expr><name pos:line="27" pos:column="102">ProxyFactory</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>
                    }</block>)</expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <class><specifier pos:line="32" pos:column="9">public</specifier> class <name pos:line="32" pos:column="22">CreateController</name> <super pos:line="32" pos:column="39">: <name pos:line="32" pos:column="41">AlternateMethod</name></super>
        <block pos:line="33" pos:column="9">{
            <constructor><specifier pos:line="34" pos:column="13">public</specifier> <name pos:line="34" pos:column="20">CreateController</name><parameter_list pos:line="34" pos:column="36">(<param><decl><type><name><name pos:line="34" pos:column="37">AlternateType</name><argument_list pos:line="34" pos:column="50">&lt;<argument><name pos:line="34" pos:column="51">IActionInvoker</name></argument>&gt;</argument_list></name></type> <name pos:line="34" pos:column="67">alternateControllerActionInvoker</name></decl></param>, <param><decl><type><name><name pos:line="34" pos:column="101">AlternateType</name><argument_list pos:line="34" pos:column="114">&lt;<argument><name pos:line="34" pos:column="115">IAsyncActionInvoker</name></argument>&gt;</argument_list></name></type> <name pos:line="34" pos:column="136">alternateAsyncControllerActionInvoker</name></decl></param>)</parameter_list> <member_list pos:line="34" pos:column="175">: <call><name pos:line="34" pos:column="177">base</name><argument_list pos:line="34" pos:column="181">(<argument><expr><call><name pos:line="34" pos:column="182">typeof</name><argument_list pos:line="34" pos:column="188">(<argument><expr><name pos:line="34" pos:column="189">IControllerFactory</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="34" pos:column="210">"CreateController"</lit:literal></expr></argument>)</argument_list></call>
            </member_list><block pos:line="35" pos:column="13">{
                <expr_stmt><expr><name pos:line="36" pos:column="17">AlternateControllerActionInvoker</name> <op:operator pos:line="36" pos:column="50">=</op:operator> <name pos:line="36" pos:column="52">alternateControllerActionInvoker</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="37" pos:column="17">AlternateAsyncControllerActionInvoker</name> <op:operator pos:line="37" pos:column="55">=</op:operator> <name pos:line="37" pos:column="57">alternateAsyncControllerActionInvoker</name></expr>;</expr_stmt>
            }</block></constructor>

            <decl_stmt><decl><type><specifier pos:line="40" pos:column="13">public</specifier> <name><name pos:line="40" pos:column="20">AlternateType</name><argument_list pos:line="40" pos:column="33">&lt;<argument><name pos:line="40" pos:column="34">IActionInvoker</name></argument>&gt;</argument_list></name></type> <name pos:line="40" pos:column="50">AlternateControllerActionInvoker</name> <block pos:line="40" pos:column="83">{ <function_decl><name pos:line="40" pos:column="85">get</name>;</function_decl> <function_decl><name pos:line="40" pos:column="90">set</name>;</function_decl> }</block></decl></decl_stmt>

            <decl_stmt><decl><type><specifier pos:line="42" pos:column="13">public</specifier> <name><name pos:line="42" pos:column="20">AlternateType</name><argument_list pos:line="42" pos:column="33">&lt;<argument><name pos:line="42" pos:column="34">IAsyncActionInvoker</name></argument>&gt;</argument_list></name></type> <name pos:line="42" pos:column="55">AlternateAsyncControllerActionInvoker</name> <block pos:line="42" pos:column="93">{ <function_decl><name pos:line="42" pos:column="95">get</name>;</function_decl> <function_decl><name pos:line="42" pos:column="100">set</name>;</function_decl> }</block></decl></decl_stmt>

            <function><type><specifier pos:line="44" pos:column="13">public</specifier> <specifier pos:line="44" pos:column="20">override</specifier> <name pos:line="44" pos:column="29">void</name></type> <name pos:line="44" pos:column="34">PostImplementation</name><parameter_list pos:line="44" pos:column="52">(<param><decl><type><name pos:line="44" pos:column="53">IAlternateMethodContext</name></type> <name pos:line="44" pos:column="77">context</name></decl></param>, <param><decl><type><name pos:line="44" pos:column="86">TimerResult</name></type> <name pos:line="44" pos:column="98">timerResult</name></decl></param>)</parameter_list>
            <block pos:line="45" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="46" pos:column="17">var</name></type> <name pos:line="46" pos:column="21">controller</name> <init pos:line="46" pos:column="32">= <expr><name><name pos:line="46" pos:column="34">context</name><op:operator pos:line="46" pos:column="41">.</op:operator><name pos:line="46" pos:column="42">ReturnValue</name></name> <op:operator pos:line="46" pos:column="54">as</op:operator> <name pos:line="46" pos:column="57">Controller</name></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name pos:line="48" pos:column="17">var</name></type> <name pos:line="48" pos:column="21">args</name> <init pos:line="48" pos:column="26">= <expr><op:operator pos:line="48" pos:column="28">new</op:operator> <call><name pos:line="48" pos:column="32">Arguments</name><argument_list pos:line="48" pos:column="41">(<argument><expr><name><name pos:line="48" pos:column="42">context</name><op:operator pos:line="48" pos:column="49">.</op:operator><name pos:line="48" pos:column="50">Arguments</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
                <decl_stmt><decl><type><name pos:line="49" pos:column="17">var</name></type> <name pos:line="49" pos:column="21">message</name> <init pos:line="49" pos:column="29">= <expr><op:operator pos:line="49" pos:column="31">new</op:operator> <call><name pos:line="49" pos:column="35">Message</name><argument_list pos:line="49" pos:column="42">(<argument><expr><name><name pos:line="49" pos:column="43">args</name><op:operator pos:line="49" pos:column="47">.</op:operator><name pos:line="49" pos:column="48">ControllerName</name></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="64">controller</name></expr></argument>)</argument_list></call>
                    <op:operator pos:line="50" pos:column="21">.</op:operator><call><name pos:line="50" pos:column="22">AsSourceMessage</name><argument_list pos:line="50" pos:column="37">(<argument><expr><name><name pos:line="50" pos:column="38">context</name><op:operator pos:line="50" pos:column="45">.</op:operator><name pos:line="50" pos:column="46">TargetType</name></name></expr></argument>, <argument><expr><name><name pos:line="50" pos:column="58">context</name><op:operator pos:line="50" pos:column="65">.</op:operator><name pos:line="50" pos:column="66">MethodInvocationTarget</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name pos:line="52" pos:column="17">context</name><op:operator pos:line="52" pos:column="24">.</op:operator><name pos:line="52" pos:column="25">MessageBroker</name><op:operator pos:line="52" pos:column="38">.</op:operator><name pos:line="52" pos:column="39">Publish</name></name><argument_list pos:line="52" pos:column="46">(<argument><expr><name pos:line="52" pos:column="47">message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name pos:line="54" pos:column="17">ProxyActionInvoker</name><argument_list pos:line="54" pos:column="35">(<argument><expr><name pos:line="54" pos:column="36">controller</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <function><type><attribute pos:line="57" pos:column="13">[<expr><call><name pos:line="57" pos:column="14">SuppressMessage</name><argument_list pos:line="57" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="57" pos:column="30">"StyleCop.CSharp.NamingRules"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="57" pos:column="61">"SA1305:FieldNamesMustNotUseHungarianNotation"</lit:literal></expr></argument>, <argument><expr><name pos:line="57" pos:column="109">Justification</name> <op:operator pos:line="57" pos:column="123">=</op:operator> <lit:literal type="string" pos:line="57" pos:column="125">"iController name is allowed in this usage."</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
            <specifier pos:line="58" pos:column="13">private</specifier> <name pos:line="58" pos:column="21">void</name></type> <name pos:line="58" pos:column="26">ProxyActionInvoker</name><parameter_list pos:line="58" pos:column="44">(<param><decl><type><name pos:line="58" pos:column="45">IController</name></type> <name pos:line="58" pos:column="57">iController</name></decl></param>)</parameter_list>
            <block pos:line="59" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="60" pos:column="17">var</name></type> <name pos:line="60" pos:column="21">controller</name> <init pos:line="60" pos:column="32">= <expr><name pos:line="60" pos:column="34">iController</name> <op:operator pos:line="60" pos:column="46">as</op:operator> <name pos:line="60" pos:column="49">AsyncController</name> <op:operator pos:line="60" pos:column="65">??</op:operator> <name pos:line="60" pos:column="68">iController</name> <op:operator pos:line="60" pos:column="80">as</op:operator> <name pos:line="60" pos:column="83">Controller</name></expr></init></decl>;</decl_stmt>

                <if pos:line="62" pos:column="17">if <condition pos:line="62" pos:column="20">(<expr><name pos:line="62" pos:column="21">controller</name> <op:operator pos:line="62" pos:column="32">==</op:operator> <name pos:line="62" pos:column="35">null</name></expr>)</condition><then pos:line="62" pos:column="40">
                <block pos:line="63" pos:column="17">{
                    <return pos:line="64" pos:column="21">return;</return>
                }</block></then></if>

                <if pos:line="67" pos:column="17">if <condition pos:line="67" pos:column="20">(<expr><name><name pos:line="67" pos:column="21">controller</name><op:operator pos:line="67" pos:column="31">.</op:operator><name pos:line="67" pos:column="32">ActionInvoker</name></name> <op:operator pos:line="67" pos:column="46">is</op:operator> <name pos:line="67" pos:column="49">IAsyncActionInvoker</name></expr>)</condition><then pos:line="67" pos:column="69">
                <block pos:line="68" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="69" pos:column="21">var</name></type> <name pos:line="69" pos:column="25">originalActionInvoker</name> <init pos:line="69" pos:column="47">= <expr><name><name pos:line="69" pos:column="49">controller</name><op:operator pos:line="69" pos:column="59">.</op:operator><name pos:line="69" pos:column="60">ActionInvoker</name></name> <op:operator pos:line="69" pos:column="74">as</op:operator> <name pos:line="69" pos:column="77">IAsyncActionInvoker</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="70" pos:column="21">IAsyncActionInvoker</name></type> <name pos:line="70" pos:column="41">newActionInvoker</name></decl>;</decl_stmt>

                    <if pos:line="72" pos:column="21">if <condition pos:line="72" pos:column="24">(<expr><call><name><name pos:line="72" pos:column="25">AlternateAsyncControllerActionInvoker</name><op:operator pos:line="72" pos:column="62">.</op:operator><name pos:line="72" pos:column="63">TryCreate</name></name><argument_list pos:line="72" pos:column="72">(<argument><expr><name pos:line="72" pos:column="73">originalActionInvoker</name></expr></argument>, <argument><expr pos:line="72" pos:column="96">out <name pos:line="72" pos:column="100">newActionInvoker</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="72" pos:column="118">
                    <block pos:line="73" pos:column="21">{
                        <expr_stmt><expr><name><name pos:line="74" pos:column="25">controller</name><op:operator pos:line="74" pos:column="35">.</op:operator><name pos:line="74" pos:column="36">ActionInvoker</name></name> <op:operator pos:line="74" pos:column="50">=</op:operator> <name pos:line="74" pos:column="52">newActionInvoker</name></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then>
                <else pos:line="77" pos:column="17">else
                <block pos:line="78" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="79" pos:column="21">var</name></type> <name pos:line="79" pos:column="25">originalActionInvoker</name> <init pos:line="79" pos:column="47">= <expr><name><name pos:line="79" pos:column="49">controller</name><op:operator pos:line="79" pos:column="59">.</op:operator><name pos:line="79" pos:column="60">ActionInvoker</name></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="80" pos:column="21">IActionInvoker</name></type> <name pos:line="80" pos:column="36">newActionInvoker</name></decl>;</decl_stmt>

                    <if pos:line="82" pos:column="21">if <condition pos:line="82" pos:column="24">(<expr><call><name><name pos:line="82" pos:column="25">AlternateControllerActionInvoker</name><op:operator pos:line="82" pos:column="57">.</op:operator><name pos:line="82" pos:column="58">TryCreate</name></name><argument_list pos:line="82" pos:column="67">(<argument><expr><name pos:line="82" pos:column="68">originalActionInvoker</name></expr></argument>, <argument><expr pos:line="82" pos:column="91">out <name pos:line="82" pos:column="95">newActionInvoker</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="82" pos:column="113">
                    <block pos:line="83" pos:column="21">{
                        <expr_stmt><expr><name><name pos:line="84" pos:column="25">controller</name><op:operator pos:line="84" pos:column="35">.</op:operator><name pos:line="84" pos:column="36">ActionInvoker</name></name> <op:operator pos:line="84" pos:column="50">=</op:operator> <name pos:line="84" pos:column="52">newActionInvoker</name></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></else></if>
            }</block></function>

            <class><specifier pos:line="89" pos:column="13">public</specifier> class <name pos:line="89" pos:column="26">Arguments</name>
            <block pos:line="90" pos:column="13">{
                <constructor><specifier pos:line="91" pos:column="17">public</specifier> <name pos:line="91" pos:column="24">Arguments</name><parameter_list pos:line="91" pos:column="33">(<param><decl><type><specifier pos:line="91" pos:column="34">params</specifier> <name><name pos:line="91" pos:column="41">object</name><index pos:line="91" pos:column="47">[]</index></name></type> <name pos:line="91" pos:column="50">arguments</name></decl></param>)</parameter_list>
                <block pos:line="92" pos:column="17">{
                    <expr_stmt><expr><name pos:line="93" pos:column="21">RequestContext</name> <op:operator pos:line="93" pos:column="36">=</op:operator> <op:operator pos:line="93" pos:column="38">(</op:operator><name pos:line="93" pos:column="39">RequestContext</name><op:operator pos:line="93" pos:column="53">)</op:operator><name><name pos:line="93" pos:column="54">arguments</name><index pos:line="93" pos:column="63">[<expr><lit:literal type="number" pos:line="93" pos:column="64">0</lit:literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="94" pos:column="21">ControllerName</name> <op:operator pos:line="94" pos:column="36">=</op:operator> <op:operator pos:line="94" pos:column="38">(</op:operator><name pos:line="94" pos:column="39">string</name><op:operator pos:line="94" pos:column="45">)</op:operator><name><name pos:line="94" pos:column="46">arguments</name><index pos:line="94" pos:column="55">[<expr><lit:literal type="number" pos:line="94" pos:column="56">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>
                }</block></constructor>

                <decl_stmt><decl><type><specifier pos:line="97" pos:column="17">public</specifier> <name pos:line="97" pos:column="24">RequestContext</name></type> <name pos:line="97" pos:column="39">RequestContext</name> <block pos:line="97" pos:column="54">{ <function_decl><name pos:line="97" pos:column="56">get</name>;</function_decl> <function_decl><name pos:line="97" pos:column="61">set</name>;</function_decl> }</block></decl></decl_stmt>
                
                <decl_stmt><decl><type><specifier pos:line="99" pos:column="17">public</specifier> <name pos:line="99" pos:column="24">string</name></type> <name pos:line="99" pos:column="31">ControllerName</name> <block pos:line="99" pos:column="46">{ <function_decl><name pos:line="99" pos:column="48">get</name>;</function_decl> <function_decl><name pos:line="99" pos:column="53">set</name>;</function_decl> }</block></decl></decl_stmt>
            }</block></class>

            <class><specifier pos:line="102" pos:column="13">public</specifier> class <name pos:line="102" pos:column="26">Message</name> <super pos:line="102" pos:column="34">: <name pos:line="102" pos:column="36">MessageBase</name>, <name pos:line="102" pos:column="49">ISourceMessage</name></super>
            <block pos:line="103" pos:column="13">{
                <constructor><specifier pos:line="104" pos:column="17">public</specifier> <name pos:line="104" pos:column="24">Message</name><parameter_list pos:line="104" pos:column="31">(<param><decl><type><name pos:line="104" pos:column="32">string</name></type> <name pos:line="104" pos:column="39">controllerName</name></decl></param>, <param><decl><type><name pos:line="104" pos:column="55">IController</name></type> <name pos:line="104" pos:column="67">controller</name></decl></param>)</parameter_list>
                <block pos:line="105" pos:column="17">{
                    <expr_stmt><expr><name pos:line="106" pos:column="21">ControllerName</name> <op:operator pos:line="106" pos:column="36">=</op:operator> <name pos:line="106" pos:column="38">controllerName</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="107" pos:column="21">IsControllerResolved</name> <op:operator pos:line="107" pos:column="42">=</op:operator> <lit:literal type="boolean" pos:line="107" pos:column="44">false</lit:literal></expr>;</expr_stmt>

                    <if pos:line="109" pos:column="21">if <condition pos:line="109" pos:column="24">(<expr><name pos:line="109" pos:column="25">controller</name> <op:operator pos:line="109" pos:column="36">!=</op:operator> <name pos:line="109" pos:column="39">null</name></expr>)</condition><then pos:line="109" pos:column="44">
                    <block pos:line="110" pos:column="21">{
                        <expr_stmt><expr><name pos:line="111" pos:column="25">ControllerType</name> <op:operator pos:line="111" pos:column="40">=</op:operator> <call><name><name pos:line="111" pos:column="42">controller</name><op:operator pos:line="111" pos:column="52">.</op:operator><name pos:line="111" pos:column="53">GetType</name></name><argument_list pos:line="111" pos:column="60">()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="112" pos:column="25">IsControllerResolved</name> <op:operator pos:line="112" pos:column="46">=</op:operator> <lit:literal type="boolean" pos:line="112" pos:column="48">true</lit:literal></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></constructor>

                <decl_stmt><decl><type><specifier pos:line="116" pos:column="17">public</specifier> <name pos:line="116" pos:column="24">bool</name></type> <name pos:line="116" pos:column="29">IsControllerResolved</name> <block pos:line="116" pos:column="50">{ <function_decl><name pos:line="116" pos:column="52">get</name>;</function_decl> <function_decl><specifier pos:line="116" pos:column="57">private</specifier> <name pos:line="116" pos:column="65">set</name>;</function_decl> }</block></decl></decl_stmt>

                <decl_stmt><decl><type><specifier pos:line="118" pos:column="17">public</specifier> <name pos:line="118" pos:column="24">Type</name></type> <name pos:line="118" pos:column="29">ControllerType</name> <block pos:line="118" pos:column="44">{ <function_decl><name pos:line="118" pos:column="46">get</name>;</function_decl> <function_decl><specifier pos:line="118" pos:column="51">private</specifier> <name pos:line="118" pos:column="59">set</name>;</function_decl> }</block></decl></decl_stmt>

                <decl_stmt><decl><type><specifier pos:line="120" pos:column="17">public</specifier> <name pos:line="120" pos:column="24">string</name></type> <name pos:line="120" pos:column="31">ControllerName</name> <block pos:line="120" pos:column="46">{ <function_decl><name pos:line="120" pos:column="48">get</name>;</function_decl> <function_decl><specifier pos:line="120" pos:column="53">private</specifier> <name pos:line="120" pos:column="61">set</name>;</function_decl> }</block></decl></decl_stmt>

                <decl_stmt><decl><type><specifier pos:line="122" pos:column="17">public</specifier> <name pos:line="122" pos:column="24">Type</name></type> <name pos:line="122" pos:column="29">ExecutedType</name> <block pos:line="122" pos:column="42">{ <function_decl><name pos:line="122" pos:column="44">get</name>;</function_decl> <function_decl><name pos:line="122" pos:column="49">set</name>;</function_decl> }</block></decl></decl_stmt>

                <decl_stmt><decl><type><specifier pos:line="124" pos:column="17">public</specifier> <name pos:line="124" pos:column="24">MethodInfo</name></type> <name pos:line="124" pos:column="35">ExecutedMethod</name> <block pos:line="124" pos:column="50">{ <function_decl><name pos:line="124" pos:column="52">get</name>;</function_decl> <function_decl><name pos:line="124" pos:column="57">set</name>;</function_decl> }</block></decl></decl_stmt>
            }</block></class>
        }</block></class>
    }</block></class>
}</block></namespace></unit>
