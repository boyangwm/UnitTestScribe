<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Core\Framework\FactoryShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">System</name><op:operator pos:line="1" pos:column="13">.</op:operator><name pos:line="1" pos:column="14">Collections</name><op:operator pos:line="1" pos:column="25">.</op:operator><name pos:line="1" pos:column="26">Generic</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Linq</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Glimpse</name><op:operator pos:line="3" pos:column="14">.</op:operator><name pos:line="3" pos:column="15">Core</name><op:operator pos:line="3" pos:column="19">.</op:operator><name pos:line="3" pos:column="20">Configuration</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Core</name><op:operator pos:line="4" pos:column="19">.</op:operator><name pos:line="4" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Glimpse</name><op:operator pos:line="5" pos:column="14">.</op:operator><name pos:line="5" pos:column="15">Core</name><op:operator pos:line="5" pos:column="19">.</op:operator><name pos:line="5" pos:column="20">Framework</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Glimpse</name><op:operator pos:line="6" pos:column="14">.</op:operator><name pos:line="6" pos:column="15">Core</name><op:operator pos:line="6" pos:column="19">.</op:operator><name pos:line="6" pos:column="20">Resource</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Glimpse</name><op:operator pos:line="7" pos:column="14">.</op:operator><name pos:line="7" pos:column="15">Core</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Glimpse</name><op:operator pos:line="8" pos:column="14">.</op:operator><name pos:line="8" pos:column="15">Test</name><op:operator pos:line="8" pos:column="19">.</op:operator><name pos:line="8" pos:column="20">Core</name><op:operator pos:line="8" pos:column="24">.</op:operator><name pos:line="8" pos:column="25">TestDoubles</name></name>;</using>
<using pos:line="9" pos:column="1">using <name pos:line="9" pos:column="7">Moq</name>;</using>
<using pos:line="10" pos:column="1">using <name pos:line="10" pos:column="7">Xunit</name>;</using>

<namespace pos:line="12" pos:column="1">namespace <name><name pos:line="12" pos:column="11">Glimpse</name><op:operator pos:line="12" pos:column="18">.</op:operator><name pos:line="12" pos:column="19">Test</name><op:operator pos:line="12" pos:column="23">.</op:operator><name pos:line="12" pos:column="24">Core</name><op:operator pos:line="12" pos:column="28">.</op:operator><name pos:line="12" pos:column="29">Framework</name></name>
<block pos:line="13" pos:column="1">{
    <class><specifier pos:line="14" pos:column="5">public</specifier> class <name pos:line="14" pos:column="18">FactoryShould</name>
    <block pos:line="15" pos:column="5">{
        <function><type><attribute pos:line="16" pos:column="9">[<expr><name pos:line="16" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="17" pos:column="9">public</specifier> <name pos:line="17" pos:column="16">void</name></type> <name pos:line="17" pos:column="21">ConstructWithProviderServiceLocator</name><parameter_list pos:line="17" pos:column="56">()</parameter_list>
        <block pos:line="18" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="19" pos:column="13">var</name></type> <name pos:line="19" pos:column="17">serviceLocatorMock</name> <init pos:line="19" pos:column="36">= <expr><op:operator pos:line="19" pos:column="38">new</op:operator> <call><name><name pos:line="19" pos:column="42">Mock</name><argument_list pos:line="19" pos:column="46">&lt;<argument><name pos:line="19" pos:column="47">IServiceLocator</name></argument>&gt;</argument_list></name><argument_list pos:line="19" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="21" pos:column="13">var</name></type> <name pos:line="21" pos:column="17">factory</name> <init pos:line="21" pos:column="25">= <expr><op:operator pos:line="21" pos:column="27">new</op:operator> <call><name pos:line="21" pos:column="31">Factory</name><argument_list pos:line="21" pos:column="38">(<argument><expr><name><name pos:line="21" pos:column="39">serviceLocatorMock</name><op:operator pos:line="21" pos:column="57">.</op:operator><name pos:line="21" pos:column="58">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="22" pos:column="13">Assert</name><op:operator pos:line="22" pos:column="19">.</op:operator><name pos:line="22" pos:column="20">NotNull</name></name><argument_list pos:line="22" pos:column="27">(<argument><expr><name pos:line="22" pos:column="28">factory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="23" pos:column="13">Assert</name><op:operator pos:line="23" pos:column="19">.</op:operator><name pos:line="23" pos:column="20">Equal</name></name><argument_list pos:line="23" pos:column="25">(<argument><expr><name><name pos:line="23" pos:column="26">serviceLocatorMock</name><op:operator pos:line="23" pos:column="44">.</op:operator><name pos:line="23" pos:column="45">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="53">factory</name><op:operator pos:line="23" pos:column="60">.</op:operator><name pos:line="23" pos:column="61">ProviderServiceLocator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="26" pos:column="9">[<expr><name pos:line="26" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="27" pos:column="9">public</specifier> <name pos:line="27" pos:column="16">void</name></type> <name pos:line="27" pos:column="21">ConstructWithBothServiceLocators</name><parameter_list pos:line="27" pos:column="53">()</parameter_list>
        <block pos:line="28" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="29" pos:column="13">var</name></type> <name pos:line="29" pos:column="17">userLocatorMock</name> <init pos:line="29" pos:column="33">= <expr><op:operator pos:line="29" pos:column="35">new</op:operator> <call><name><name pos:line="29" pos:column="39">Mock</name><argument_list pos:line="29" pos:column="43">&lt;<argument><name pos:line="29" pos:column="44">IServiceLocator</name></argument>&gt;</argument_list></name><argument_list pos:line="29" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="30" pos:column="13">var</name></type> <name pos:line="30" pos:column="17">providerLocatorMock</name> <init pos:line="30" pos:column="37">= <expr><op:operator pos:line="30" pos:column="39">new</op:operator> <call><name><name pos:line="30" pos:column="43">Mock</name><argument_list pos:line="30" pos:column="47">&lt;<argument><name pos:line="30" pos:column="48">IServiceLocator</name></argument>&gt;</argument_list></name><argument_list pos:line="30" pos:column="64">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="32" pos:column="13">var</name></type> <name pos:line="32" pos:column="17">factory</name> <init pos:line="32" pos:column="25">= <expr><op:operator pos:line="32" pos:column="27">new</op:operator> <call><name pos:line="32" pos:column="31">Factory</name><argument_list pos:line="32" pos:column="38">(<argument><expr><name><name pos:line="32" pos:column="39">providerLocatorMock</name><op:operator pos:line="32" pos:column="58">.</op:operator><name pos:line="32" pos:column="59">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="67">userLocatorMock</name><op:operator pos:line="32" pos:column="82">.</op:operator><name pos:line="32" pos:column="83">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="33" pos:column="13">Assert</name><op:operator pos:line="33" pos:column="19">.</op:operator><name pos:line="33" pos:column="20">NotNull</name></name><argument_list pos:line="33" pos:column="27">(<argument><expr><name pos:line="33" pos:column="28">factory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="34" pos:column="13">Assert</name><op:operator pos:line="34" pos:column="19">.</op:operator><name pos:line="34" pos:column="20">Equal</name></name><argument_list pos:line="34" pos:column="25">(<argument><expr><name><name pos:line="34" pos:column="26">providerLocatorMock</name><op:operator pos:line="34" pos:column="45">.</op:operator><name pos:line="34" pos:column="46">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="54">factory</name><op:operator pos:line="34" pos:column="61">.</op:operator><name pos:line="34" pos:column="62">ProviderServiceLocator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="35" pos:column="13">Assert</name><op:operator pos:line="35" pos:column="19">.</op:operator><name pos:line="35" pos:column="20">Equal</name></name><argument_list pos:line="35" pos:column="25">(<argument><expr><name><name pos:line="35" pos:column="26">userLocatorMock</name><op:operator pos:line="35" pos:column="41">.</op:operator><name pos:line="35" pos:column="42">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="50">factory</name><op:operator pos:line="35" pos:column="57">.</op:operator><name pos:line="35" pos:column="58">UserServiceLocator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="38" pos:column="9">[<expr><name pos:line="38" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="39" pos:column="9">public</specifier> <name pos:line="39" pos:column="16">void</name></type> <name pos:line="39" pos:column="21">ConstructWithoutServiceLocator</name><parameter_list pos:line="39" pos:column="51">()</parameter_list>
        <block pos:line="40" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="41" pos:column="13">var</name></type> <name pos:line="41" pos:column="17">factory</name> <init pos:line="41" pos:column="25">= <expr><op:operator pos:line="41" pos:column="27">new</op:operator> <call><name pos:line="41" pos:column="31">Factory</name><argument_list pos:line="41" pos:column="38">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="42" pos:column="13">Assert</name><op:operator pos:line="42" pos:column="19">.</op:operator><name pos:line="42" pos:column="20">NotNull</name></name><argument_list pos:line="42" pos:column="27">(<argument><expr><name pos:line="42" pos:column="28">factory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="43" pos:column="13">Assert</name><op:operator pos:line="43" pos:column="19">.</op:operator><name pos:line="43" pos:column="20">Null</name></name><argument_list pos:line="43" pos:column="24">(<argument><expr><name><name pos:line="43" pos:column="25">factory</name><op:operator pos:line="43" pos:column="32">.</op:operator><name pos:line="43" pos:column="33">ProviderServiceLocator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="46" pos:column="9">[<expr><name pos:line="46" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="47" pos:column="9">public</specifier> <name pos:line="47" pos:column="16">void</name></type> <name pos:line="47" pos:column="21">InstantiateRuntimeLeveragesIServiceLocator</name><parameter_list pos:line="47" pos:column="63">()</parameter_list>
        <block pos:line="48" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="49" pos:column="13">var</name></type> <name pos:line="49" pos:column="17">runtimeMock</name> <init pos:line="49" pos:column="29">= <expr><op:operator pos:line="49" pos:column="31">new</op:operator> <call><name><name pos:line="49" pos:column="35">Mock</name><argument_list pos:line="49" pos:column="39">&lt;<argument><name pos:line="49" pos:column="40">IGlimpseRuntime</name></argument>&gt;</argument_list></name><argument_list pos:line="49" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="50" pos:column="13">var</name></type> <name pos:line="50" pos:column="17">serviceLocatorMock</name> <init pos:line="50" pos:column="36">= <expr><op:operator pos:line="50" pos:column="38">new</op:operator> <call><name><name pos:line="50" pos:column="42">Mock</name><argument_list pos:line="50" pos:column="46">&lt;<argument><name pos:line="50" pos:column="47">IServiceLocator</name></argument>&gt;</argument_list></name><argument_list pos:line="50" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="52" pos:column="13">serviceLocatorMock</name><op:operator pos:line="52" pos:column="31">.</op:operator><name pos:line="52" pos:column="32">Setup</name></name><argument_list pos:line="52" pos:column="37">(<argument><expr><lambda><name pos:line="52" pos:column="38">sl</name> <op:operator pos:line="52" pos:column="41">=&gt;</op:operator> <call><name><name pos:line="52" pos:column="44">sl</name><op:operator pos:line="52" pos:column="46">.</op:operator><name><name pos:line="52" pos:column="47">GetInstance</name><argument_list pos:line="52" pos:column="58">&lt;<argument><name pos:line="52" pos:column="59">IGlimpseRuntime</name></argument>&gt;</argument_list></name></name><argument_list pos:line="52" pos:column="75">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="52" pos:column="78">.</op:operator><call><name pos:line="52" pos:column="79">Returns</name><argument_list pos:line="52" pos:column="86">(<argument><expr><name><name pos:line="52" pos:column="87">runtimeMock</name><op:operator pos:line="52" pos:column="98">.</op:operator><name pos:line="52" pos:column="99">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="54" pos:column="13">var</name></type> <name pos:line="54" pos:column="17">factory</name> <init pos:line="54" pos:column="25">= <expr><op:operator pos:line="54" pos:column="27">new</op:operator> <call><name pos:line="54" pos:column="31">Factory</name><argument_list pos:line="54" pos:column="38">(<argument><expr><name><name pos:line="54" pos:column="39">serviceLocatorMock</name><op:operator pos:line="54" pos:column="57">.</op:operator><name pos:line="54" pos:column="58">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="55" pos:column="13">var</name></type> <name pos:line="55" pos:column="17">result</name> <init pos:line="55" pos:column="24">= <expr><call><name><name pos:line="55" pos:column="26">factory</name><op:operator pos:line="55" pos:column="33">.</op:operator><name pos:line="55" pos:column="34">InstantiateRuntime</name></name><argument_list pos:line="55" pos:column="52">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="56" pos:column="13">Assert</name><op:operator pos:line="56" pos:column="19">.</op:operator><name pos:line="56" pos:column="20">Equal</name></name><argument_list pos:line="56" pos:column="25">(<argument><expr><name><name pos:line="56" pos:column="26">runtimeMock</name><op:operator pos:line="56" pos:column="37">.</op:operator><name pos:line="56" pos:column="38">Object</name></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="46">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="59" pos:column="9">[<expr><name pos:line="59" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="60" pos:column="9">public</specifier> <name pos:line="60" pos:column="16">void</name></type> <name pos:line="60" pos:column="21">InstantiateFrameworkProviderLeveragesIServiceLocator</name><parameter_list pos:line="60" pos:column="73">()</parameter_list>
        <block pos:line="61" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="62" pos:column="13">var</name></type> <name pos:line="62" pos:column="17">providerMock</name> <init pos:line="62" pos:column="30">= <expr><op:operator pos:line="62" pos:column="32">new</op:operator> <call><name><name pos:line="62" pos:column="36">Mock</name><argument_list pos:line="62" pos:column="40">&lt;<argument><name pos:line="62" pos:column="41">IFrameworkProvider</name></argument>&gt;</argument_list></name><argument_list pos:line="62" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="63" pos:column="13">var</name></type> <name pos:line="63" pos:column="17">serviceLocatorMock</name> <init pos:line="63" pos:column="36">= <expr><op:operator pos:line="63" pos:column="38">new</op:operator> <call><name><name pos:line="63" pos:column="42">Mock</name><argument_list pos:line="63" pos:column="46">&lt;<argument><name pos:line="63" pos:column="47">IServiceLocator</name></argument>&gt;</argument_list></name><argument_list pos:line="63" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="65" pos:column="13">serviceLocatorMock</name><op:operator pos:line="65" pos:column="31">.</op:operator><name pos:line="65" pos:column="32">Setup</name></name><argument_list pos:line="65" pos:column="37">(<argument><expr><lambda><name pos:line="65" pos:column="38">sl</name> <op:operator pos:line="65" pos:column="41">=&gt;</op:operator> <call><name><name pos:line="65" pos:column="44">sl</name><op:operator pos:line="65" pos:column="46">.</op:operator><name><name pos:line="65" pos:column="47">GetInstance</name><argument_list pos:line="65" pos:column="58">&lt;<argument><name pos:line="65" pos:column="59">IFrameworkProvider</name></argument>&gt;</argument_list></name></name><argument_list pos:line="65" pos:column="78">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="65" pos:column="81">.</op:operator><call><name pos:line="65" pos:column="82">Returns</name><argument_list pos:line="65" pos:column="89">(<argument><expr><name><name pos:line="65" pos:column="90">providerMock</name><op:operator pos:line="65" pos:column="102">.</op:operator><name pos:line="65" pos:column="103">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="67" pos:column="13">var</name></type> <name pos:line="67" pos:column="17">factory</name> <init pos:line="67" pos:column="25">= <expr><op:operator pos:line="67" pos:column="27">new</op:operator> <call><name pos:line="67" pos:column="31">Factory</name><argument_list pos:line="67" pos:column="38">(<argument><expr><name><name pos:line="67" pos:column="39">serviceLocatorMock</name><op:operator pos:line="67" pos:column="57">.</op:operator><name pos:line="67" pos:column="58">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="68" pos:column="13">var</name></type> <name pos:line="68" pos:column="17">result</name> <init pos:line="68" pos:column="24">= <expr><call><name><name pos:line="68" pos:column="26">factory</name><op:operator pos:line="68" pos:column="33">.</op:operator><name pos:line="68" pos:column="34">InstantiateFrameworkProvider</name></name><argument_list pos:line="68" pos:column="62">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="69" pos:column="13">Assert</name><op:operator pos:line="69" pos:column="19">.</op:operator><name pos:line="69" pos:column="20">Equal</name></name><argument_list pos:line="69" pos:column="25">(<argument><expr><name><name pos:line="69" pos:column="26">providerMock</name><op:operator pos:line="69" pos:column="38">.</op:operator><name pos:line="69" pos:column="39">Object</name></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="47">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="72" pos:column="9">[<expr><name pos:line="72" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="73" pos:column="9">public</specifier> <name pos:line="73" pos:column="16">void</name></type> <name pos:line="73" pos:column="21">InstantiateFrameworkProviderCachesResults</name><parameter_list pos:line="73" pos:column="62">()</parameter_list>
        <block pos:line="74" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="75" pos:column="13">var</name></type> <name pos:line="75" pos:column="17">providerMock</name> <init pos:line="75" pos:column="30">= <expr><op:operator pos:line="75" pos:column="32">new</op:operator> <call><name><name pos:line="75" pos:column="36">Mock</name><argument_list pos:line="75" pos:column="40">&lt;<argument><name pos:line="75" pos:column="41">IFrameworkProvider</name></argument>&gt;</argument_list></name><argument_list pos:line="75" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="76" pos:column="13">var</name></type> <name pos:line="76" pos:column="17">serviceLocatorMock</name> <init pos:line="76" pos:column="36">= <expr><op:operator pos:line="76" pos:column="38">new</op:operator> <call><name><name pos:line="76" pos:column="42">Mock</name><argument_list pos:line="76" pos:column="46">&lt;<argument><name pos:line="76" pos:column="47">IServiceLocator</name></argument>&gt;</argument_list></name><argument_list pos:line="76" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="78" pos:column="13">serviceLocatorMock</name><op:operator pos:line="78" pos:column="31">.</op:operator><name pos:line="78" pos:column="32">Setup</name></name><argument_list pos:line="78" pos:column="37">(<argument><expr><lambda><name pos:line="78" pos:column="38">sl</name> <op:operator pos:line="78" pos:column="41">=&gt;</op:operator> <call><name><name pos:line="78" pos:column="44">sl</name><op:operator pos:line="78" pos:column="46">.</op:operator><name><name pos:line="78" pos:column="47">GetInstance</name><argument_list pos:line="78" pos:column="58">&lt;<argument><name pos:line="78" pos:column="59">IFrameworkProvider</name></argument>&gt;</argument_list></name></name><argument_list pos:line="78" pos:column="78">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="78" pos:column="81">.</op:operator><call><name pos:line="78" pos:column="82">Returns</name><argument_list pos:line="78" pos:column="89">(<argument><expr><name><name pos:line="78" pos:column="90">providerMock</name><op:operator pos:line="78" pos:column="102">.</op:operator><name pos:line="78" pos:column="103">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="80" pos:column="13">var</name></type> <name pos:line="80" pos:column="17">factory</name> <init pos:line="80" pos:column="25">= <expr><op:operator pos:line="80" pos:column="27">new</op:operator> <call><name pos:line="80" pos:column="31">Factory</name><argument_list pos:line="80" pos:column="38">(<argument><expr><name><name pos:line="80" pos:column="39">serviceLocatorMock</name><op:operator pos:line="80" pos:column="57">.</op:operator><name pos:line="80" pos:column="58">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="81" pos:column="13">var</name></type> <name pos:line="81" pos:column="17">first</name> <init pos:line="81" pos:column="23">= <expr><call><name><name pos:line="81" pos:column="25">factory</name><op:operator pos:line="81" pos:column="32">.</op:operator><name pos:line="81" pos:column="33">InstantiateFrameworkProvider</name></name><argument_list pos:line="81" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="82" pos:column="13">var</name></type> <name pos:line="82" pos:column="17">second</name> <init pos:line="82" pos:column="24">= <expr><call><name><name pos:line="82" pos:column="26">factory</name><op:operator pos:line="82" pos:column="33">.</op:operator><name pos:line="82" pos:column="34">InstantiateFrameworkProvider</name></name><argument_list pos:line="82" pos:column="62">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="83" pos:column="13">Assert</name><op:operator pos:line="83" pos:column="19">.</op:operator><name pos:line="83" pos:column="20">Equal</name></name><argument_list pos:line="83" pos:column="25">(<argument><expr><name><name pos:line="83" pos:column="26">providerMock</name><op:operator pos:line="83" pos:column="38">.</op:operator><name pos:line="83" pos:column="39">Object</name></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="47">first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="84" pos:column="13">Assert</name><op:operator pos:line="84" pos:column="19">.</op:operator><name pos:line="84" pos:column="20">Equal</name></name><argument_list pos:line="84" pos:column="25">(<argument><expr><name><name pos:line="84" pos:column="26">providerMock</name><op:operator pos:line="84" pos:column="38">.</op:operator><name pos:line="84" pos:column="39">Object</name></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="47">second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="85" pos:column="13">serviceLocatorMock</name><op:operator pos:line="85" pos:column="31">.</op:operator><name pos:line="85" pos:column="32">Verify</name></name><argument_list pos:line="85" pos:column="38">(<argument><expr><lambda><name pos:line="85" pos:column="39">sl</name><op:operator pos:line="85" pos:column="41">=&gt;</op:operator><call><name><name pos:line="85" pos:column="43">sl</name><op:operator pos:line="85" pos:column="45">.</op:operator><name><name pos:line="85" pos:column="46">GetInstance</name><argument_list pos:line="85" pos:column="57">&lt;<argument><name pos:line="85" pos:column="58">IFrameworkProvider</name></argument>&gt;</argument_list></name></name><argument_list pos:line="85" pos:column="77">()</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="85" pos:column="81">Times</name><op:operator pos:line="85" pos:column="86">.</op:operator><name pos:line="85" pos:column="87">AtMostOnce</name></name><argument_list pos:line="85" pos:column="97">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="88" pos:column="9">[<expr><name pos:line="88" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="89" pos:column="9">public</specifier> <name pos:line="89" pos:column="16">void</name></type> <name pos:line="89" pos:column="21">InstantiateFrameworkProviderWithoutIServiceLocator</name><parameter_list pos:line="89" pos:column="71">()</parameter_list>
        <block pos:line="90" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="91" pos:column="13">var</name></type> <name pos:line="91" pos:column="17">factory</name> <init pos:line="91" pos:column="25">= <expr><op:operator pos:line="91" pos:column="27">new</op:operator> <call><name pos:line="91" pos:column="31">Factory</name><argument_list pos:line="91" pos:column="38">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="92" pos:column="13">Assert</name><op:operator pos:line="92" pos:column="19">.</op:operator><name><name pos:line="92" pos:column="20">Throws</name><argument_list pos:line="92" pos:column="26">&lt;<argument><name pos:line="92" pos:column="27">GlimpseException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="92" pos:column="44">(<argument><expr><lambda><parameter_list pos:line="92" pos:column="45">()</parameter_list><op:operator pos:line="92" pos:column="47">=&gt;</op:operator><call><name><name pos:line="92" pos:column="49">factory</name><op:operator pos:line="92" pos:column="56">.</op:operator><name pos:line="92" pos:column="57">InstantiateFrameworkProvider</name></name><argument_list pos:line="92" pos:column="85">()</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="95" pos:column="9">[<expr><name pos:line="95" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="96" pos:column="9">public</specifier> <name pos:line="96" pos:column="16">void</name></type> <name pos:line="96" pos:column="21">InstantiateResourceEndpointConfigLeveragesIServiceLocator</name><parameter_list pos:line="96" pos:column="78">()</parameter_list>
        <block pos:line="97" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="98" pos:column="13">var</name></type> <name pos:line="98" pos:column="17">endpointConfigMock</name> <init pos:line="98" pos:column="36">= <expr><op:operator pos:line="98" pos:column="38">new</op:operator> <call><name><name pos:line="98" pos:column="42">Mock</name><argument_list pos:line="98" pos:column="46">&lt;<argument><name pos:line="98" pos:column="47">ResourceEndpointConfiguration</name></argument>&gt;</argument_list></name><argument_list pos:line="98" pos:column="77">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="99" pos:column="13">var</name></type> <name pos:line="99" pos:column="17">serviceLocatorMock</name> <init pos:line="99" pos:column="36">= <expr><op:operator pos:line="99" pos:column="38">new</op:operator> <call><name><name pos:line="99" pos:column="42">Mock</name><argument_list pos:line="99" pos:column="46">&lt;<argument><name pos:line="99" pos:column="47">IServiceLocator</name></argument>&gt;</argument_list></name><argument_list pos:line="99" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="101" pos:column="13">serviceLocatorMock</name><op:operator pos:line="101" pos:column="31">.</op:operator><name pos:line="101" pos:column="32">Setup</name></name><argument_list pos:line="101" pos:column="37">(<argument><expr><lambda><name pos:line="101" pos:column="38">sl</name> <op:operator pos:line="101" pos:column="41">=&gt;</op:operator> <call><name><name pos:line="101" pos:column="44">sl</name><op:operator pos:line="101" pos:column="46">.</op:operator><name><name pos:line="101" pos:column="47">GetInstance</name><argument_list pos:line="101" pos:column="58">&lt;<argument><name pos:line="101" pos:column="59">ResourceEndpointConfiguration</name></argument>&gt;</argument_list></name></name><argument_list pos:line="101" pos:column="89">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="101" pos:column="92">.</op:operator><call><name pos:line="101" pos:column="93">Returns</name><argument_list pos:line="101" pos:column="100">(<argument><expr><name><name pos:line="101" pos:column="101">endpointConfigMock</name><op:operator pos:line="101" pos:column="119">.</op:operator><name pos:line="101" pos:column="120">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="103" pos:column="13">var</name></type> <name pos:line="103" pos:column="17">factory</name> <init pos:line="103" pos:column="25">= <expr><op:operator pos:line="103" pos:column="27">new</op:operator> <call><name pos:line="103" pos:column="31">Factory</name><argument_list pos:line="103" pos:column="38">(<argument><expr><name><name pos:line="103" pos:column="39">serviceLocatorMock</name><op:operator pos:line="103" pos:column="57">.</op:operator><name pos:line="103" pos:column="58">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="104" pos:column="13">var</name></type> <name pos:line="104" pos:column="17">result</name> <init pos:line="104" pos:column="24">= <expr><call><name><name pos:line="104" pos:column="26">factory</name><op:operator pos:line="104" pos:column="33">.</op:operator><name pos:line="104" pos:column="34">InstantiateResourceEndpointConfiguration</name></name><argument_list pos:line="104" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="105" pos:column="13">Assert</name><op:operator pos:line="105" pos:column="19">.</op:operator><name pos:line="105" pos:column="20">Equal</name></name><argument_list pos:line="105" pos:column="25">(<argument><expr><name><name pos:line="105" pos:column="26">endpointConfigMock</name><op:operator pos:line="105" pos:column="44">.</op:operator><name pos:line="105" pos:column="45">Object</name></name></expr></argument>, <argument><expr><name pos:line="105" pos:column="53">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="108" pos:column="9">[<expr><name pos:line="108" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="109" pos:column="9">public</specifier> <name pos:line="109" pos:column="16">void</name></type> <name pos:line="109" pos:column="21">InstantiateResourceEndpointConfigWithoutIServiceLocator</name><parameter_list pos:line="109" pos:column="76">()</parameter_list>
        <block pos:line="110" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="111" pos:column="13">var</name></type> <name pos:line="111" pos:column="17">factory</name> <init pos:line="111" pos:column="25">= <expr><op:operator pos:line="111" pos:column="27">new</op:operator> <call><name pos:line="111" pos:column="31">Factory</name><argument_list pos:line="111" pos:column="38">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="112" pos:column="13">Assert</name><op:operator pos:line="112" pos:column="19">.</op:operator><name><name pos:line="112" pos:column="20">Throws</name><argument_list pos:line="112" pos:column="26">&lt;<argument><name pos:line="112" pos:column="27">GlimpseException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="112" pos:column="44">(<argument><expr><lambda><parameter_list pos:line="112" pos:column="45">()</parameter_list> <op:operator pos:line="112" pos:column="48">=&gt;</op:operator> <call><name><name pos:line="112" pos:column="51">factory</name><op:operator pos:line="112" pos:column="58">.</op:operator><name pos:line="112" pos:column="59">InstantiateResourceEndpointConfiguration</name></name><argument_list pos:line="112" pos:column="99">()</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="115" pos:column="9">[<expr><name pos:line="115" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="116" pos:column="9">public</specifier> <name pos:line="116" pos:column="16">void</name></type> <name pos:line="116" pos:column="21">InstantiateClientScriptsLeveragesIServiceLocator</name><parameter_list pos:line="116" pos:column="69">()</parameter_list>
        <block pos:line="117" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="118" pos:column="13">var</name></type> <name pos:line="118" pos:column="17">clientScripts</name> <init pos:line="118" pos:column="31">= <expr><op:operator pos:line="118" pos:column="33">new</op:operator> <call><name><name pos:line="118" pos:column="37">List</name><argument_list pos:line="118" pos:column="41">&lt;<argument><name pos:line="118" pos:column="42">IClientScript</name></argument>&gt;</argument_list></name><argument_list pos:line="118" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="120" pos:column="13">var</name></type> <name pos:line="120" pos:column="17">serviceLocatorMock</name> <init pos:line="120" pos:column="36">= <expr><op:operator pos:line="120" pos:column="38">new</op:operator> <call><name><name pos:line="120" pos:column="42">Mock</name><argument_list pos:line="120" pos:column="46">&lt;<argument><name pos:line="120" pos:column="47">IServiceLocator</name></argument>&gt;</argument_list></name><argument_list pos:line="120" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="121" pos:column="13">serviceLocatorMock</name><op:operator pos:line="121" pos:column="31">.</op:operator><name pos:line="121" pos:column="32">Setup</name></name><argument_list pos:line="121" pos:column="37">(<argument><expr><lambda><name pos:line="121" pos:column="38">sl</name> <op:operator pos:line="121" pos:column="41">=&gt;</op:operator> <call><name><name pos:line="121" pos:column="44">sl</name><op:operator pos:line="121" pos:column="46">.</op:operator><name><name pos:line="121" pos:column="47">GetAllInstances</name><argument_list pos:line="121" pos:column="62">&lt;<argument><name pos:line="121" pos:column="63">IClientScript</name></argument>&gt;</argument_list></name></name><argument_list pos:line="121" pos:column="77">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="121" pos:column="80">.</op:operator><call><name pos:line="121" pos:column="81">Returns</name><argument_list pos:line="121" pos:column="88">(<argument><expr><name pos:line="121" pos:column="89">clientScripts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="123" pos:column="13">var</name></type> <name pos:line="123" pos:column="17">factory</name> <init pos:line="123" pos:column="25">= <expr><op:operator pos:line="123" pos:column="27">new</op:operator> <call><name pos:line="123" pos:column="31">Factory</name><argument_list pos:line="123" pos:column="38">(<argument><expr><name><name pos:line="123" pos:column="39">serviceLocatorMock</name><op:operator pos:line="123" pos:column="57">.</op:operator><name pos:line="123" pos:column="58">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="124" pos:column="13">var</name></type> <name pos:line="124" pos:column="17">result</name> <init pos:line="124" pos:column="24">= <expr><call><name><name pos:line="124" pos:column="26">factory</name><op:operator pos:line="124" pos:column="33">.</op:operator><name pos:line="124" pos:column="34">InstantiateClientScripts</name></name><argument_list pos:line="124" pos:column="58">()</argument_list></call></expr></init></decl>;</decl_stmt>


            <expr_stmt><expr><call><name><name pos:line="127" pos:column="13">Assert</name><op:operator pos:line="127" pos:column="19">.</op:operator><name pos:line="127" pos:column="20">Equal</name></name><argument_list pos:line="127" pos:column="25">(<argument><expr><name pos:line="127" pos:column="26">clientScripts</name></expr></argument>, <argument><expr><name pos:line="127" pos:column="41">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="130" pos:column="9">[<expr><name pos:line="130" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="131" pos:column="9">public</specifier> <name pos:line="131" pos:column="16">void</name></type> <name pos:line="131" pos:column="21">InstantiateClientScripts</name><parameter_list pos:line="131" pos:column="45">()</parameter_list>
        <block pos:line="132" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="133" pos:column="13">var</name></type> <name pos:line="133" pos:column="17">factory</name> <init pos:line="133" pos:column="25">= <expr><op:operator pos:line="133" pos:column="27">new</op:operator> <call><name pos:line="133" pos:column="31">Factory</name><argument_list pos:line="133" pos:column="38">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="134" pos:column="13">var</name></type> <name pos:line="134" pos:column="17">result</name> <init pos:line="134" pos:column="24">= <expr><call><name><name pos:line="134" pos:column="26">factory</name><op:operator pos:line="134" pos:column="33">.</op:operator><name pos:line="134" pos:column="34">InstantiateClientScripts</name></name><argument_list pos:line="134" pos:column="58">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="135" pos:column="13">Assert</name><op:operator pos:line="135" pos:column="19">.</op:operator><name pos:line="135" pos:column="20">True</name></name><argument_list pos:line="135" pos:column="24">(<argument><expr><call><name><name pos:line="135" pos:column="25">result</name><op:operator pos:line="135" pos:column="31">.</op:operator><name pos:line="135" pos:column="32">Any</name></name><argument_list pos:line="135" pos:column="35">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="138" pos:column="9">[<expr><name pos:line="138" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="139" pos:column="9">public</specifier> <name pos:line="139" pos:column="16">void</name></type> <name pos:line="139" pos:column="21">InstantiateLoggerWithIServiceLocator</name><parameter_list pos:line="139" pos:column="57">()</parameter_list>
        <block pos:line="140" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="141" pos:column="13">var</name></type> <name pos:line="141" pos:column="17">loggerMock</name> <init pos:line="141" pos:column="28">= <expr><op:operator pos:line="141" pos:column="30">new</op:operator> <call><name><name pos:line="141" pos:column="34">Mock</name><argument_list pos:line="141" pos:column="38">&lt;<argument><name pos:line="141" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="141" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="142" pos:column="13">var</name></type> <name pos:line="142" pos:column="17">locatorMock</name> <init pos:line="142" pos:column="29">= <expr><op:operator pos:line="142" pos:column="31">new</op:operator> <call><name><name pos:line="142" pos:column="35">Mock</name><argument_list pos:line="142" pos:column="39">&lt;<argument><name pos:line="142" pos:column="40">IServiceLocator</name></argument>&gt;</argument_list></name><argument_list pos:line="142" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="143" pos:column="13">locatorMock</name><op:operator pos:line="143" pos:column="24">.</op:operator><name pos:line="143" pos:column="25">Setup</name></name><argument_list pos:line="143" pos:column="30">(<argument><expr><lambda><name pos:line="143" pos:column="31">lm</name> <op:operator pos:line="143" pos:column="34">=&gt;</op:operator> <call><name><name pos:line="143" pos:column="37">lm</name><op:operator pos:line="143" pos:column="39">.</op:operator><name><name pos:line="143" pos:column="40">GetInstance</name><argument_list pos:line="143" pos:column="51">&lt;<argument><name pos:line="143" pos:column="52">ILogger</name></argument>&gt;</argument_list></name></name><argument_list pos:line="143" pos:column="60">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="143" pos:column="63">.</op:operator><call><name pos:line="143" pos:column="64">Returns</name><argument_list pos:line="143" pos:column="71">(<argument><expr><name><name pos:line="143" pos:column="72">loggerMock</name><op:operator pos:line="143" pos:column="82">.</op:operator><name pos:line="143" pos:column="83">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="145" pos:column="13">var</name></type> <name pos:line="145" pos:column="17">factory</name> <init pos:line="145" pos:column="25">= <expr><op:operator pos:line="145" pos:column="27">new</op:operator> <call><name pos:line="145" pos:column="31">Factory</name><argument_list pos:line="145" pos:column="38">(<argument><expr><name><name pos:line="145" pos:column="39">locatorMock</name><op:operator pos:line="145" pos:column="50">.</op:operator><name pos:line="145" pos:column="51">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="146" pos:column="13">var</name></type> <name pos:line="146" pos:column="17">result</name> <init pos:line="146" pos:column="24">= <expr><call><name><name pos:line="146" pos:column="26">factory</name><op:operator pos:line="146" pos:column="33">.</op:operator><name pos:line="146" pos:column="34">InstantiateLogger</name></name><argument_list pos:line="146" pos:column="51">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="148" pos:column="13">locatorMock</name><op:operator pos:line="148" pos:column="24">.</op:operator><name pos:line="148" pos:column="25">Verify</name></name><argument_list pos:line="148" pos:column="31">(<argument><expr><lambda><name pos:line="148" pos:column="32">lm</name><op:operator pos:line="148" pos:column="34">=&gt;</op:operator><call><name><name pos:line="148" pos:column="36">lm</name><op:operator pos:line="148" pos:column="38">.</op:operator><name><name pos:line="148" pos:column="39">GetInstance</name><argument_list pos:line="148" pos:column="50">&lt;<argument><name pos:line="148" pos:column="51">ILogger</name></argument>&gt;</argument_list></name></name><argument_list pos:line="148" pos:column="59">()</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="148" pos:column="63">Times</name><op:operator pos:line="148" pos:column="68">.</op:operator><name pos:line="148" pos:column="69">Once</name></name><argument_list pos:line="148" pos:column="73">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="149" pos:column="13">Assert</name><op:operator pos:line="149" pos:column="19">.</op:operator><name pos:line="149" pos:column="20">Equal</name></name><argument_list pos:line="149" pos:column="25">(<argument><expr><name><name pos:line="149" pos:column="26">loggerMock</name><op:operator pos:line="149" pos:column="36">.</op:operator><name pos:line="149" pos:column="37">Object</name></name></expr></argument>, <argument><expr><name pos:line="149" pos:column="45">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="152" pos:column="9">[<expr><name pos:line="152" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="153" pos:column="9">public</specifier> <name pos:line="153" pos:column="16">void</name></type> <name pos:line="153" pos:column="21">InstantiateNullLogger</name><parameter_list pos:line="153" pos:column="42">()</parameter_list>
        <block pos:line="154" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="155" pos:column="13">var</name></type> <name pos:line="155" pos:column="17">factory</name> <init pos:line="155" pos:column="25">= <expr><op:operator pos:line="155" pos:column="27">new</op:operator> <call><name pos:line="155" pos:column="31">Factory</name><argument_list pos:line="155" pos:column="38">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="156" pos:column="13">factory</name><op:operator pos:line="156" pos:column="20">.</op:operator><name pos:line="156" pos:column="21">Configuration</name></name> <op:operator pos:line="156" pos:column="35">=</op:operator> <op:operator pos:line="156" pos:column="37">new</op:operator> <name pos:line="156" pos:column="41">Section</name> <block pos:line="156" pos:column="49">{<expr><name pos:line="156" pos:column="50">Logging</name> <op:operator pos:line="156" pos:column="58">=</op:operator> <block pos:line="156" pos:column="60">{<expr><name pos:line="156" pos:column="61">Level</name> <op:operator pos:line="156" pos:column="67">=</op:operator> <name><name pos:line="156" pos:column="69">LoggingLevel</name><op:operator pos:line="156" pos:column="81">.</op:operator><name pos:line="156" pos:column="82">Off</name></name></expr>}</block></expr>}</block></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="158" pos:column="13">var</name></type> <name pos:line="158" pos:column="17">result</name> <init pos:line="158" pos:column="24">= <expr><call><name><name pos:line="158" pos:column="26">factory</name><op:operator pos:line="158" pos:column="33">.</op:operator><name pos:line="158" pos:column="34">InstantiateLogger</name></name><argument_list pos:line="158" pos:column="51">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="159" pos:column="13">Assert</name><op:operator pos:line="159" pos:column="19">.</op:operator><name pos:line="159" pos:column="20">NotNull</name></name><argument_list pos:line="159" pos:column="27">(<argument><expr><name pos:line="159" pos:column="28">result</name> <op:operator pos:line="159" pos:column="35">as</op:operator> <name pos:line="159" pos:column="38">NullLogger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="162" pos:column="9">[<expr><name pos:line="162" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="163" pos:column="9">public</specifier> <name pos:line="163" pos:column="16">void</name></type> <name pos:line="163" pos:column="21">InstantiateNLogLogger</name><parameter_list pos:line="163" pos:column="42">()</parameter_list>
        <block pos:line="164" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="165" pos:column="13">var</name></type> <name pos:line="165" pos:column="17">factory</name> <init pos:line="165" pos:column="25">= <expr><op:operator pos:line="165" pos:column="27">new</op:operator> <call><name pos:line="165" pos:column="31">Factory</name><argument_list pos:line="165" pos:column="38">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="166" pos:column="13">factory</name><op:operator pos:line="166" pos:column="20">.</op:operator><name pos:line="166" pos:column="21">Configuration</name></name> <op:operator pos:line="166" pos:column="35">=</op:operator> <op:operator pos:line="166" pos:column="37">new</op:operator> <name pos:line="166" pos:column="41">Section</name> <block pos:line="166" pos:column="49">{ <expr><name pos:line="166" pos:column="51">Logging</name> <op:operator pos:line="166" pos:column="59">=</op:operator> <block pos:line="166" pos:column="61">{ <expr><name pos:line="166" pos:column="63">Level</name> <op:operator pos:line="166" pos:column="69">=</op:operator> <name><name pos:line="166" pos:column="71">LoggingLevel</name><op:operator pos:line="166" pos:column="83">.</op:operator><name pos:line="166" pos:column="84">Warn</name></name></expr> }</block></expr> }</block></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="168" pos:column="13">var</name></type> <name pos:line="168" pos:column="17">result</name> <init pos:line="168" pos:column="24">= <expr><call><name><name pos:line="168" pos:column="26">factory</name><op:operator pos:line="168" pos:column="33">.</op:operator><name pos:line="168" pos:column="34">InstantiateLogger</name></name><argument_list pos:line="168" pos:column="51">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="169" pos:column="13">Assert</name><op:operator pos:line="169" pos:column="19">.</op:operator><name pos:line="169" pos:column="20">NotNull</name></name><argument_list pos:line="169" pos:column="27">(<argument><expr><name pos:line="169" pos:column="28">result</name> <op:operator pos:line="169" pos:column="35">as</op:operator> <name pos:line="169" pos:column="38">NLogLogger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="172" pos:column="9">[<expr><name pos:line="172" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="173" pos:column="9">public</specifier> <name pos:line="173" pos:column="16">void</name></type> <name pos:line="173" pos:column="21">ReuseExistingLogger</name><parameter_list pos:line="173" pos:column="40">()</parameter_list>
        <block pos:line="174" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="175" pos:column="13">var</name></type> <name pos:line="175" pos:column="17">logger</name> <init pos:line="175" pos:column="24">= <expr><op:operator pos:line="175" pos:column="26">new</op:operator> <call><name pos:line="175" pos:column="30">NullLogger</name><argument_list pos:line="175" pos:column="40">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="176" pos:column="13">var</name></type> <name pos:line="176" pos:column="17">locatorMock</name> <init pos:line="176" pos:column="29">= <expr><op:operator pos:line="176" pos:column="31">new</op:operator> <call><name><name pos:line="176" pos:column="35">Mock</name><argument_list pos:line="176" pos:column="39">&lt;<argument><name pos:line="176" pos:column="40">IServiceLocator</name></argument>&gt;</argument_list></name><argument_list pos:line="176" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="177" pos:column="13">locatorMock</name><op:operator pos:line="177" pos:column="24">.</op:operator><name pos:line="177" pos:column="25">Setup</name></name><argument_list pos:line="177" pos:column="30">(<argument><expr><lambda><name pos:line="177" pos:column="31">l</name> <op:operator pos:line="177" pos:column="33">=&gt;</op:operator> <call><name><name pos:line="177" pos:column="36">l</name><op:operator pos:line="177" pos:column="37">.</op:operator><name><name pos:line="177" pos:column="38">GetInstance</name><argument_list pos:line="177" pos:column="49">&lt;<argument><name pos:line="177" pos:column="50">ILogger</name></argument>&gt;</argument_list></name></name><argument_list pos:line="177" pos:column="58">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="177" pos:column="61">.</op:operator><call><name pos:line="177" pos:column="62">Returns</name><argument_list pos:line="177" pos:column="69">(<argument><expr><name pos:line="177" pos:column="70">logger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="179" pos:column="13">var</name></type> <name pos:line="179" pos:column="17">factory</name> <init pos:line="179" pos:column="25">= <expr><op:operator pos:line="179" pos:column="27">new</op:operator> <call><name pos:line="179" pos:column="31">Factory</name><argument_list pos:line="179" pos:column="38">(<argument><expr><name><name pos:line="179" pos:column="39">locatorMock</name><op:operator pos:line="179" pos:column="50">.</op:operator><name pos:line="179" pos:column="51">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="181" pos:column="13">var</name></type> <name pos:line="181" pos:column="17">first</name> <init pos:line="181" pos:column="23">= <expr><call><name><name pos:line="181" pos:column="25">factory</name><op:operator pos:line="181" pos:column="32">.</op:operator><name pos:line="181" pos:column="33">InstantiateLogger</name></name><argument_list pos:line="181" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="182" pos:column="13">var</name></type> <name pos:line="182" pos:column="17">second</name> <init pos:line="182" pos:column="24">= <expr><call><name><name pos:line="182" pos:column="26">factory</name><op:operator pos:line="182" pos:column="33">.</op:operator><name pos:line="182" pos:column="34">InstantiateLogger</name></name><argument_list pos:line="182" pos:column="51">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="184" pos:column="13">Assert</name><op:operator pos:line="184" pos:column="19">.</op:operator><name pos:line="184" pos:column="20">Equal</name></name><argument_list pos:line="184" pos:column="25">(<argument><expr><name pos:line="184" pos:column="26">logger</name></expr></argument>, <argument><expr><name pos:line="184" pos:column="34">first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="185" pos:column="13">Assert</name><op:operator pos:line="185" pos:column="19">.</op:operator><name pos:line="185" pos:column="20">Equal</name></name><argument_list pos:line="185" pos:column="25">(<argument><expr><name pos:line="185" pos:column="26">logger</name></expr></argument>, <argument><expr><name pos:line="185" pos:column="34">second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="186" pos:column="13">locatorMock</name><op:operator pos:line="186" pos:column="24">.</op:operator><name pos:line="186" pos:column="25">Verify</name></name><argument_list pos:line="186" pos:column="31">(<argument><expr><lambda><name pos:line="186" pos:column="32">l</name><op:operator pos:line="186" pos:column="33">=&gt;</op:operator><call><name><name pos:line="186" pos:column="35">l</name><op:operator pos:line="186" pos:column="36">.</op:operator><name><name pos:line="186" pos:column="37">GetInstance</name><argument_list pos:line="186" pos:column="48">&lt;<argument><name pos:line="186" pos:column="49">ILogger</name></argument>&gt;</argument_list></name></name><argument_list pos:line="186" pos:column="57">()</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="186" pos:column="61">Times</name><op:operator pos:line="186" pos:column="66">.</op:operator><name pos:line="186" pos:column="67">AtMostOnce</name></name><argument_list pos:line="186" pos:column="77">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="189" pos:column="9">[<expr><name pos:line="189" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="190" pos:column="9">public</specifier> <name pos:line="190" pos:column="16">void</name></type> <name pos:line="190" pos:column="21">CascadeFromUserLocatorToProviderLocatorForSingleInstance</name><parameter_list pos:line="190" pos:column="77">()</parameter_list>
        <block pos:line="191" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="192" pos:column="13">var</name></type> <name pos:line="192" pos:column="17">sequence</name> <init pos:line="192" pos:column="26">= <expr><lit:literal type="number" pos:line="192" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="193" pos:column="13">var</name></type> <name pos:line="193" pos:column="17">loggerMock</name> <init pos:line="193" pos:column="28">= <expr><op:operator pos:line="193" pos:column="30">new</op:operator> <call><name><name pos:line="193" pos:column="34">Mock</name><argument_list pos:line="193" pos:column="38">&lt;<argument><name pos:line="193" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="193" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="194" pos:column="13">var</name></type> <name pos:line="194" pos:column="17">userLocatorMock</name> <init pos:line="194" pos:column="33">= <expr><op:operator pos:line="194" pos:column="35">new</op:operator> <call><name><name pos:line="194" pos:column="39">Mock</name><argument_list pos:line="194" pos:column="43">&lt;<argument><name pos:line="194" pos:column="44">IServiceLocator</name></argument>&gt;</argument_list></name><argument_list pos:line="194" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="195" pos:column="13">userLocatorMock</name><op:operator pos:line="195" pos:column="28">.</op:operator><name pos:line="195" pos:column="29">Setup</name></name><argument_list pos:line="195" pos:column="34">(<argument><expr><lambda><name pos:line="195" pos:column="35">ul</name> <op:operator pos:line="195" pos:column="38">=&gt;</op:operator> <call><name><name pos:line="195" pos:column="41">ul</name><op:operator pos:line="195" pos:column="43">.</op:operator><name><name pos:line="195" pos:column="44">GetInstance</name><argument_list pos:line="195" pos:column="55">&lt;<argument><name pos:line="195" pos:column="56">ILogger</name></argument>&gt;</argument_list></name></name><argument_list pos:line="195" pos:column="64">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="195" pos:column="67">.</op:operator><call><name><name pos:line="195" pos:column="68">Returns</name><argument_list pos:line="195" pos:column="75">&lt;<argument><name pos:line="195" pos:column="76">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="195" pos:column="84">(<argument><expr><name pos:line="195" pos:column="85">null</name></expr></argument>)</argument_list></call><op:operator pos:line="195" pos:column="90">.</op:operator><call><name pos:line="195" pos:column="91">Callback</name><argument_list pos:line="195" pos:column="99">(<argument><expr><lambda><parameter_list pos:line="195" pos:column="100">()</parameter_list><op:operator pos:line="195" pos:column="102">=&gt;</op:operator><call><name><name pos:line="195" pos:column="104">Assert</name><op:operator pos:line="195" pos:column="110">.</op:operator><name pos:line="195" pos:column="111">Equal</name></name><argument_list pos:line="195" pos:column="116">(<argument><expr><lit:literal type="number" pos:line="195" pos:column="117">0</lit:literal></expr></argument>, <argument><expr><name pos:line="195" pos:column="120">sequence</name><op:operator pos:line="195" pos:column="128">++</op:operator></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="196" pos:column="13">var</name></type> <name pos:line="196" pos:column="17">providerLocatorMock</name> <init pos:line="196" pos:column="37">= <expr><op:operator pos:line="196" pos:column="39">new</op:operator> <call><name><name pos:line="196" pos:column="43">Mock</name><argument_list pos:line="196" pos:column="47">&lt;<argument><name pos:line="196" pos:column="48">IServiceLocator</name></argument>&gt;</argument_list></name><argument_list pos:line="196" pos:column="64">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="197" pos:column="13">providerLocatorMock</name><op:operator pos:line="197" pos:column="32">.</op:operator><name pos:line="197" pos:column="33">Setup</name></name><argument_list pos:line="197" pos:column="38">(<argument><expr><lambda><name pos:line="197" pos:column="39">pl</name> <op:operator pos:line="197" pos:column="42">=&gt;</op:operator> <call><name><name pos:line="197" pos:column="45">pl</name><op:operator pos:line="197" pos:column="47">.</op:operator><name><name pos:line="197" pos:column="48">GetInstance</name><argument_list pos:line="197" pos:column="59">&lt;<argument><name pos:line="197" pos:column="60">ILogger</name></argument>&gt;</argument_list></name></name><argument_list pos:line="197" pos:column="68">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="197" pos:column="71">.</op:operator><call><name pos:line="197" pos:column="72">Returns</name><argument_list pos:line="197" pos:column="79">(<argument><expr><name><name pos:line="197" pos:column="80">loggerMock</name><op:operator pos:line="197" pos:column="90">.</op:operator><name pos:line="197" pos:column="91">Object</name></name></expr></argument>)</argument_list></call><op:operator pos:line="197" pos:column="98">.</op:operator><call><name pos:line="197" pos:column="99">Callback</name><argument_list pos:line="197" pos:column="107">(<argument><expr><lambda><parameter_list pos:line="197" pos:column="108">()</parameter_list><op:operator pos:line="197" pos:column="110">=&gt;</op:operator><call><name><name pos:line="197" pos:column="112">Assert</name><op:operator pos:line="197" pos:column="118">.</op:operator><name pos:line="197" pos:column="119">Equal</name></name><argument_list pos:line="197" pos:column="124">(<argument><expr><lit:literal type="number" pos:line="197" pos:column="125">1</lit:literal></expr></argument>, <argument><expr><name pos:line="197" pos:column="128">sequence</name><op:operator pos:line="197" pos:column="136">++</op:operator></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="199" pos:column="13">var</name></type> <name pos:line="199" pos:column="17">factory</name> <init pos:line="199" pos:column="25">= <expr><op:operator pos:line="199" pos:column="27">new</op:operator> <call><name pos:line="199" pos:column="31">Factory</name><argument_list pos:line="199" pos:column="38">(<argument><expr><name><name pos:line="199" pos:column="39">providerLocatorMock</name><op:operator pos:line="199" pos:column="58">.</op:operator><name pos:line="199" pos:column="59">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="199" pos:column="67">userLocatorMock</name><op:operator pos:line="199" pos:column="82">.</op:operator><name pos:line="199" pos:column="83">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="201" pos:column="13">factory</name><op:operator pos:line="201" pos:column="20">.</op:operator><name pos:line="201" pos:column="21">InstantiateLogger</name></name><argument_list pos:line="201" pos:column="38">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="203" pos:column="13">userLocatorMock</name><op:operator pos:line="203" pos:column="28">.</op:operator><name pos:line="203" pos:column="29">Verify</name></name><argument_list pos:line="203" pos:column="35">(<argument><expr><lambda><name pos:line="203" pos:column="36">ul</name><op:operator pos:line="203" pos:column="38">=&gt;</op:operator><call><name><name pos:line="203" pos:column="40">ul</name><op:operator pos:line="203" pos:column="42">.</op:operator><name><name pos:line="203" pos:column="43">GetInstance</name><argument_list pos:line="203" pos:column="54">&lt;<argument><name pos:line="203" pos:column="55">ILogger</name></argument>&gt;</argument_list></name></name><argument_list pos:line="203" pos:column="63">()</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="203" pos:column="67">Times</name><op:operator pos:line="203" pos:column="72">.</op:operator><name pos:line="203" pos:column="73">Once</name></name><argument_list pos:line="203" pos:column="77">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="204" pos:column="13">providerLocatorMock</name><op:operator pos:line="204" pos:column="32">.</op:operator><name pos:line="204" pos:column="33">Verify</name></name><argument_list pos:line="204" pos:column="39">(<argument><expr><lambda><name pos:line="204" pos:column="40">pl</name><op:operator pos:line="204" pos:column="42">=&gt;</op:operator><call><name><name pos:line="204" pos:column="44">pl</name><op:operator pos:line="204" pos:column="46">.</op:operator><name><name pos:line="204" pos:column="47">GetInstance</name><argument_list pos:line="204" pos:column="58">&lt;<argument><name pos:line="204" pos:column="59">ILogger</name></argument>&gt;</argument_list></name></name><argument_list pos:line="204" pos:column="67">()</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="204" pos:column="71">Times</name><op:operator pos:line="204" pos:column="76">.</op:operator><name pos:line="204" pos:column="77">Once</name></name><argument_list pos:line="204" pos:column="81">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="207" pos:column="9">[<expr><name pos:line="207" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="208" pos:column="9">public</specifier> <name pos:line="208" pos:column="16">void</name></type> <name pos:line="208" pos:column="21">CascadeFromUserLocatorToProviderLocatorForAllInstance</name><parameter_list pos:line="208" pos:column="74">()</parameter_list>
        <block pos:line="209" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="210" pos:column="13">var</name></type> <name pos:line="210" pos:column="17">sequence</name> <init pos:line="210" pos:column="26">= <expr><lit:literal type="number" pos:line="210" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="211" pos:column="13">var</name></type> <name pos:line="211" pos:column="17">scripts</name> <init pos:line="211" pos:column="25">= <expr><op:operator pos:line="211" pos:column="27">new</op:operator> <call><name><name pos:line="211" pos:column="31">List</name><argument_list pos:line="211" pos:column="35">&lt;<argument><name pos:line="211" pos:column="36">IClientScript</name></argument>&gt;</argument_list></name><argument_list pos:line="211" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="212" pos:column="13">var</name></type> <name pos:line="212" pos:column="17">userLocatorMock</name> <init pos:line="212" pos:column="33">= <expr><op:operator pos:line="212" pos:column="35">new</op:operator> <call><name><name pos:line="212" pos:column="39">Mock</name><argument_list pos:line="212" pos:column="43">&lt;<argument><name pos:line="212" pos:column="44">IServiceLocator</name></argument>&gt;</argument_list></name><argument_list pos:line="212" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="213" pos:column="13">userLocatorMock</name><op:operator pos:line="213" pos:column="28">.</op:operator><name pos:line="213" pos:column="29">Setup</name></name><argument_list pos:line="213" pos:column="34">(<argument><expr><lambda><name pos:line="213" pos:column="35">ul</name> <op:operator pos:line="213" pos:column="38">=&gt;</op:operator> <call><name><name pos:line="213" pos:column="41">ul</name><op:operator pos:line="213" pos:column="43">.</op:operator><name><name pos:line="213" pos:column="44">GetAllInstances</name><argument_list pos:line="213" pos:column="59">&lt;<argument><name pos:line="213" pos:column="60">IClientScript</name></argument>&gt;</argument_list></name></name><argument_list pos:line="213" pos:column="74">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="213" pos:column="77">.</op:operator><call><name><name pos:line="213" pos:column="78">Returns</name><argument_list pos:line="213" pos:column="85">&lt;<argument><name><name pos:line="213" pos:column="86">ICollection</name><argument_list pos:line="213" pos:column="97">&lt;<argument><name pos:line="213" pos:column="98">IClientScript</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list pos:line="213" pos:column="113">(<argument><expr><name pos:line="213" pos:column="114">null</name></expr></argument>)</argument_list></call><op:operator pos:line="213" pos:column="119">.</op:operator><call><name pos:line="213" pos:column="120">Callback</name><argument_list pos:line="213" pos:column="128">(<argument><expr><lambda><parameter_list pos:line="213" pos:column="129">()</parameter_list> <op:operator pos:line="213" pos:column="132">=&gt;</op:operator> <call><name><name pos:line="213" pos:column="135">Assert</name><op:operator pos:line="213" pos:column="141">.</op:operator><name pos:line="213" pos:column="142">Equal</name></name><argument_list pos:line="213" pos:column="147">(<argument><expr><lit:literal type="number" pos:line="213" pos:column="148">0</lit:literal></expr></argument>, <argument><expr><name pos:line="213" pos:column="151">sequence</name><op:operator pos:line="213" pos:column="159">++</op:operator></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="214" pos:column="13">var</name></type> <name pos:line="214" pos:column="17">providerLocatorMock</name> <init pos:line="214" pos:column="37">= <expr><op:operator pos:line="214" pos:column="39">new</op:operator> <call><name><name pos:line="214" pos:column="43">Mock</name><argument_list pos:line="214" pos:column="47">&lt;<argument><name pos:line="214" pos:column="48">IServiceLocator</name></argument>&gt;</argument_list></name><argument_list pos:line="214" pos:column="64">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="215" pos:column="13">providerLocatorMock</name><op:operator pos:line="215" pos:column="32">.</op:operator><name pos:line="215" pos:column="33">Setup</name></name><argument_list pos:line="215" pos:column="38">(<argument><expr><lambda><name pos:line="215" pos:column="39">pl</name> <op:operator pos:line="215" pos:column="42">=&gt;</op:operator> <call><name><name pos:line="215" pos:column="45">pl</name><op:operator pos:line="215" pos:column="47">.</op:operator><name><name pos:line="215" pos:column="48">GetAllInstances</name><argument_list pos:line="215" pos:column="63">&lt;<argument><name pos:line="215" pos:column="64">IClientScript</name></argument>&gt;</argument_list></name></name><argument_list pos:line="215" pos:column="78">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="215" pos:column="81">.</op:operator><call><name pos:line="215" pos:column="82">Returns</name><argument_list pos:line="215" pos:column="89">(<argument><expr><name pos:line="215" pos:column="90">scripts</name></expr></argument>)</argument_list></call><op:operator pos:line="215" pos:column="98">.</op:operator><call><name pos:line="215" pos:column="99">Callback</name><argument_list pos:line="215" pos:column="107">(<argument><expr><lambda><parameter_list pos:line="215" pos:column="108">()</parameter_list> <op:operator pos:line="215" pos:column="111">=&gt;</op:operator> <call><name><name pos:line="215" pos:column="114">Assert</name><op:operator pos:line="215" pos:column="120">.</op:operator><name pos:line="215" pos:column="121">Equal</name></name><argument_list pos:line="215" pos:column="126">(<argument><expr><lit:literal type="number" pos:line="215" pos:column="127">1</lit:literal></expr></argument>, <argument><expr><name pos:line="215" pos:column="130">sequence</name><op:operator pos:line="215" pos:column="138">++</op:operator></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="217" pos:column="13">var</name></type> <name pos:line="217" pos:column="17">factory</name> <init pos:line="217" pos:column="25">= <expr><op:operator pos:line="217" pos:column="27">new</op:operator> <call><name pos:line="217" pos:column="31">Factory</name><argument_list pos:line="217" pos:column="38">(<argument><expr><name><name pos:line="217" pos:column="39">providerLocatorMock</name><op:operator pos:line="217" pos:column="58">.</op:operator><name pos:line="217" pos:column="59">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="217" pos:column="67">userLocatorMock</name><op:operator pos:line="217" pos:column="82">.</op:operator><name pos:line="217" pos:column="83">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="219" pos:column="13">factory</name><op:operator pos:line="219" pos:column="20">.</op:operator><name pos:line="219" pos:column="21">InstantiateClientScripts</name></name><argument_list pos:line="219" pos:column="45">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="221" pos:column="13">userLocatorMock</name><op:operator pos:line="221" pos:column="28">.</op:operator><name pos:line="221" pos:column="29">Verify</name></name><argument_list pos:line="221" pos:column="35">(<argument><expr><lambda><name pos:line="221" pos:column="36">ul</name> <op:operator pos:line="221" pos:column="39">=&gt;</op:operator> <call><name><name pos:line="221" pos:column="42">ul</name><op:operator pos:line="221" pos:column="44">.</op:operator><name><name pos:line="221" pos:column="45">GetAllInstances</name><argument_list pos:line="221" pos:column="60">&lt;<argument><name pos:line="221" pos:column="61">IClientScript</name></argument>&gt;</argument_list></name></name><argument_list pos:line="221" pos:column="75">()</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="221" pos:column="79">Times</name><op:operator pos:line="221" pos:column="84">.</op:operator><name pos:line="221" pos:column="85">Once</name></name><argument_list pos:line="221" pos:column="89">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="222" pos:column="13">providerLocatorMock</name><op:operator pos:line="222" pos:column="32">.</op:operator><name pos:line="222" pos:column="33">Verify</name></name><argument_list pos:line="222" pos:column="39">(<argument><expr><lambda><name pos:line="222" pos:column="40">pl</name> <op:operator pos:line="222" pos:column="43">=&gt;</op:operator> <call><name><name pos:line="222" pos:column="46">pl</name><op:operator pos:line="222" pos:column="48">.</op:operator><name><name pos:line="222" pos:column="49">GetAllInstances</name><argument_list pos:line="222" pos:column="64">&lt;<argument><name pos:line="222" pos:column="65">IClientScript</name></argument>&gt;</argument_list></name></name><argument_list pos:line="222" pos:column="79">()</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="222" pos:column="83">Times</name><op:operator pos:line="222" pos:column="88">.</op:operator><name pos:line="222" pos:column="89">Once</name></name><argument_list pos:line="222" pos:column="93">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="225" pos:column="9">[<expr><name pos:line="225" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="226" pos:column="9">public</specifier> <name pos:line="226" pos:column="16">void</name></type> <name pos:line="226" pos:column="21">UseUserLocatorFirstForInstances</name><parameter_list pos:line="226" pos:column="52">()</parameter_list>
        <block pos:line="227" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="228" pos:column="13">var</name></type> <name pos:line="228" pos:column="17">loggerMock</name> <init pos:line="228" pos:column="28">= <expr><op:operator pos:line="228" pos:column="30">new</op:operator> <call><name><name pos:line="228" pos:column="34">Mock</name><argument_list pos:line="228" pos:column="38">&lt;<argument><name pos:line="228" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="228" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="229" pos:column="13">var</name></type> <name pos:line="229" pos:column="17">userLocatorMock</name> <init pos:line="229" pos:column="33">= <expr><op:operator pos:line="229" pos:column="35">new</op:operator> <call><name><name pos:line="229" pos:column="39">Mock</name><argument_list pos:line="229" pos:column="43">&lt;<argument><name pos:line="229" pos:column="44">IServiceLocator</name></argument>&gt;</argument_list></name><argument_list pos:line="229" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="230" pos:column="13">userLocatorMock</name><op:operator pos:line="230" pos:column="28">.</op:operator><name pos:line="230" pos:column="29">Setup</name></name><argument_list pos:line="230" pos:column="34">(<argument><expr><lambda><name pos:line="230" pos:column="35">ul</name> <op:operator pos:line="230" pos:column="38">=&gt;</op:operator> <call><name><name pos:line="230" pos:column="41">ul</name><op:operator pos:line="230" pos:column="43">.</op:operator><name><name pos:line="230" pos:column="44">GetInstance</name><argument_list pos:line="230" pos:column="55">&lt;<argument><name pos:line="230" pos:column="56">ILogger</name></argument>&gt;</argument_list></name></name><argument_list pos:line="230" pos:column="64">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="230" pos:column="67">.</op:operator><call><name pos:line="230" pos:column="68">Returns</name><argument_list pos:line="230" pos:column="75">(<argument><expr><name><name pos:line="230" pos:column="76">loggerMock</name><op:operator pos:line="230" pos:column="86">.</op:operator><name pos:line="230" pos:column="87">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="231" pos:column="13">var</name></type> <name pos:line="231" pos:column="17">providerLocatorMock</name> <init pos:line="231" pos:column="37">= <expr><op:operator pos:line="231" pos:column="39">new</op:operator> <call><name><name pos:line="231" pos:column="43">Mock</name><argument_list pos:line="231" pos:column="47">&lt;<argument><name pos:line="231" pos:column="48">IServiceLocator</name></argument>&gt;</argument_list></name><argument_list pos:line="231" pos:column="64">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="233" pos:column="13">var</name></type> <name pos:line="233" pos:column="17">factory</name> <init pos:line="233" pos:column="25">= <expr><op:operator pos:line="233" pos:column="27">new</op:operator> <call><name pos:line="233" pos:column="31">Factory</name><argument_list pos:line="233" pos:column="38">(<argument><expr><name><name pos:line="233" pos:column="39">providerLocatorMock</name><op:operator pos:line="233" pos:column="58">.</op:operator><name pos:line="233" pos:column="59">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="233" pos:column="67">userLocatorMock</name><op:operator pos:line="233" pos:column="82">.</op:operator><name pos:line="233" pos:column="83">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="235" pos:column="13">factory</name><op:operator pos:line="235" pos:column="20">.</op:operator><name pos:line="235" pos:column="21">InstantiateLogger</name></name><argument_list pos:line="235" pos:column="38">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="237" pos:column="13">userLocatorMock</name><op:operator pos:line="237" pos:column="28">.</op:operator><name pos:line="237" pos:column="29">Verify</name></name><argument_list pos:line="237" pos:column="35">(<argument><expr><lambda><name pos:line="237" pos:column="36">ul</name> <op:operator pos:line="237" pos:column="39">=&gt;</op:operator> <call><name><name pos:line="237" pos:column="42">ul</name><op:operator pos:line="237" pos:column="44">.</op:operator><name><name pos:line="237" pos:column="45">GetInstance</name><argument_list pos:line="237" pos:column="56">&lt;<argument><name pos:line="237" pos:column="57">ILogger</name></argument>&gt;</argument_list></name></name><argument_list pos:line="237" pos:column="65">()</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="237" pos:column="69">Times</name><op:operator pos:line="237" pos:column="74">.</op:operator><name pos:line="237" pos:column="75">Once</name></name><argument_list pos:line="237" pos:column="79">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="238" pos:column="13">providerLocatorMock</name><op:operator pos:line="238" pos:column="32">.</op:operator><name pos:line="238" pos:column="33">Verify</name></name><argument_list pos:line="238" pos:column="39">(<argument><expr><lambda><name pos:line="238" pos:column="40">pl</name> <op:operator pos:line="238" pos:column="43">=&gt;</op:operator> <call><name><name pos:line="238" pos:column="46">pl</name><op:operator pos:line="238" pos:column="48">.</op:operator><name><name pos:line="238" pos:column="49">GetInstance</name><argument_list pos:line="238" pos:column="60">&lt;<argument><name pos:line="238" pos:column="61">ILogger</name></argument>&gt;</argument_list></name></name><argument_list pos:line="238" pos:column="69">()</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="238" pos:column="73">Times</name><op:operator pos:line="238" pos:column="78">.</op:operator><name pos:line="238" pos:column="79">Never</name></name><argument_list pos:line="238" pos:column="84">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="241" pos:column="9">[<expr><name pos:line="241" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="242" pos:column="9">public</specifier> <name pos:line="242" pos:column="16">void</name></type> <name pos:line="242" pos:column="21">UseUserLocatorFirstForAllInstances</name><parameter_list pos:line="242" pos:column="55">()</parameter_list>
        <block pos:line="243" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="244" pos:column="13">var</name></type> <name pos:line="244" pos:column="17">scripts</name> <init pos:line="244" pos:column="25">= <expr><op:operator pos:line="244" pos:column="27">new</op:operator> <call><name><name pos:line="244" pos:column="31">List</name><argument_list pos:line="244" pos:column="35">&lt;<argument><name pos:line="244" pos:column="36">IClientScript</name></argument>&gt;</argument_list></name><argument_list pos:line="244" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="245" pos:column="13">var</name></type> <name pos:line="245" pos:column="17">userLocatorMock</name> <init pos:line="245" pos:column="33">= <expr><op:operator pos:line="245" pos:column="35">new</op:operator> <call><name><name pos:line="245" pos:column="39">Mock</name><argument_list pos:line="245" pos:column="43">&lt;<argument><name pos:line="245" pos:column="44">IServiceLocator</name></argument>&gt;</argument_list></name><argument_list pos:line="245" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="246" pos:column="13">userLocatorMock</name><op:operator pos:line="246" pos:column="28">.</op:operator><name pos:line="246" pos:column="29">Setup</name></name><argument_list pos:line="246" pos:column="34">(<argument><expr><lambda><name pos:line="246" pos:column="35">ul</name> <op:operator pos:line="246" pos:column="38">=&gt;</op:operator> <call><name><name pos:line="246" pos:column="41">ul</name><op:operator pos:line="246" pos:column="43">.</op:operator><name><name pos:line="246" pos:column="44">GetAllInstances</name><argument_list pos:line="246" pos:column="59">&lt;<argument><name pos:line="246" pos:column="60">IClientScript</name></argument>&gt;</argument_list></name></name><argument_list pos:line="246" pos:column="74">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="246" pos:column="77">.</op:operator><call><name pos:line="246" pos:column="78">Returns</name><argument_list pos:line="246" pos:column="85">(<argument><expr><name pos:line="246" pos:column="86">scripts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="247" pos:column="13">var</name></type> <name pos:line="247" pos:column="17">providerLocatorMock</name> <init pos:line="247" pos:column="37">= <expr><op:operator pos:line="247" pos:column="39">new</op:operator> <call><name><name pos:line="247" pos:column="43">Mock</name><argument_list pos:line="247" pos:column="47">&lt;<argument><name pos:line="247" pos:column="48">IServiceLocator</name></argument>&gt;</argument_list></name><argument_list pos:line="247" pos:column="64">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="249" pos:column="13">var</name></type> <name pos:line="249" pos:column="17">factory</name> <init pos:line="249" pos:column="25">= <expr><op:operator pos:line="249" pos:column="27">new</op:operator> <call><name pos:line="249" pos:column="31">Factory</name><argument_list pos:line="249" pos:column="38">(<argument><expr><name><name pos:line="249" pos:column="39">providerLocatorMock</name><op:operator pos:line="249" pos:column="58">.</op:operator><name pos:line="249" pos:column="59">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="249" pos:column="67">userLocatorMock</name><op:operator pos:line="249" pos:column="82">.</op:operator><name pos:line="249" pos:column="83">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="251" pos:column="13">factory</name><op:operator pos:line="251" pos:column="20">.</op:operator><name pos:line="251" pos:column="21">InstantiateClientScripts</name></name><argument_list pos:line="251" pos:column="45">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="253" pos:column="13">userLocatorMock</name><op:operator pos:line="253" pos:column="28">.</op:operator><name pos:line="253" pos:column="29">Verify</name></name><argument_list pos:line="253" pos:column="35">(<argument><expr><lambda><name pos:line="253" pos:column="36">ul</name> <op:operator pos:line="253" pos:column="39">=&gt;</op:operator> <call><name><name pos:line="253" pos:column="42">ul</name><op:operator pos:line="253" pos:column="44">.</op:operator><name><name pos:line="253" pos:column="45">GetAllInstances</name><argument_list pos:line="253" pos:column="60">&lt;<argument><name pos:line="253" pos:column="61">IClientScript</name></argument>&gt;</argument_list></name></name><argument_list pos:line="253" pos:column="75">()</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="253" pos:column="79">Times</name><op:operator pos:line="253" pos:column="84">.</op:operator><name pos:line="253" pos:column="85">Once</name></name><argument_list pos:line="253" pos:column="89">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="254" pos:column="13">providerLocatorMock</name><op:operator pos:line="254" pos:column="32">.</op:operator><name pos:line="254" pos:column="33">Verify</name></name><argument_list pos:line="254" pos:column="39">(<argument><expr><lambda><name pos:line="254" pos:column="40">pl</name> <op:operator pos:line="254" pos:column="43">=&gt;</op:operator> <call><name><name pos:line="254" pos:column="46">pl</name><op:operator pos:line="254" pos:column="48">.</op:operator><name><name pos:line="254" pos:column="49">GetAllInstances</name><argument_list pos:line="254" pos:column="64">&lt;<argument><name pos:line="254" pos:column="65">IClientScript</name></argument>&gt;</argument_list></name></name><argument_list pos:line="254" pos:column="79">()</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="254" pos:column="83">Times</name><op:operator pos:line="254" pos:column="88">.</op:operator><name pos:line="254" pos:column="89">Never</name></name><argument_list pos:line="254" pos:column="94">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="257" pos:column="9">[<expr><name pos:line="257" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="258" pos:column="9">public</specifier> <name pos:line="258" pos:column="16">void</name></type> <name pos:line="258" pos:column="21">LeverageConfigurationWhenCreatingDiscoverableCollection</name><parameter_list pos:line="258" pos:column="76">()</parameter_list>
        <block pos:line="259" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="260" pos:column="13">var</name></type> <name pos:line="260" pos:column="17">path</name> <init pos:line="260" pos:column="22">= <expr><lit:literal type="string" pos:line="260" pos:column="24">@"c:\Windows"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="261" pos:column="13">var</name></type> <name pos:line="261" pos:column="17">config</name> <init pos:line="261" pos:column="24">= <expr><op:operator pos:line="261" pos:column="26">new</op:operator> <name pos:line="261" pos:column="30">Section</name> <block pos:line="261" pos:column="38">{<expr><name pos:line="261" pos:column="39">ClientScripts</name> <op:operator pos:line="261" pos:column="53">=</op:operator> <block pos:line="261" pos:column="55">{<expr><name pos:line="261" pos:column="56">DiscoveryLocation</name> <op:operator pos:line="261" pos:column="74">=</op:operator> <name pos:line="261" pos:column="76">path</name></expr>, <expr><name pos:line="261" pos:column="82">AutoDiscover</name> <op:operator pos:line="261" pos:column="95">=</op:operator> <lit:literal type="boolean" pos:line="261" pos:column="97">false</lit:literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="263" pos:column="13">var</name></type> <name pos:line="263" pos:column="17">locatorMock</name> <init pos:line="263" pos:column="29">= <expr><op:operator pos:line="263" pos:column="31">new</op:operator> <call><name><name pos:line="263" pos:column="35">Mock</name><argument_list pos:line="263" pos:column="39">&lt;<argument><name pos:line="263" pos:column="40">IServiceLocator</name></argument>&gt;</argument_list></name><argument_list pos:line="263" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="264" pos:column="13">locatorMock</name><op:operator pos:line="264" pos:column="24">.</op:operator><name pos:line="264" pos:column="25">Setup</name></name><argument_list pos:line="264" pos:column="30">(<argument><expr><lambda><name pos:line="264" pos:column="31">l</name> <op:operator pos:line="264" pos:column="33">=&gt;</op:operator> <call><name><name pos:line="264" pos:column="36">l</name><op:operator pos:line="264" pos:column="37">.</op:operator><name><name pos:line="264" pos:column="38">GetAllInstances</name><argument_list pos:line="264" pos:column="53">&lt;<argument><name pos:line="264" pos:column="54">IClientScript</name></argument>&gt;</argument_list></name></name><argument_list pos:line="264" pos:column="68">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="264" pos:column="71">.</op:operator><call><name><name pos:line="264" pos:column="72">Returns</name><argument_list pos:line="264" pos:column="79">&lt;<argument><name><name pos:line="264" pos:column="80">ICollection</name><argument_list pos:line="264" pos:column="91">&lt;<argument><name pos:line="264" pos:column="92">IClientScript</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list pos:line="264" pos:column="107">(<argument><expr><name pos:line="264" pos:column="108">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="266" pos:column="13">var</name></type> <name pos:line="266" pos:column="17">factory</name> <init pos:line="266" pos:column="25">= <expr><op:operator pos:line="266" pos:column="27">new</op:operator> <call><name pos:line="266" pos:column="31">Factory</name><argument_list pos:line="266" pos:column="38">(<argument><expr><name><name pos:line="266" pos:column="39">locatorMock</name><op:operator pos:line="266" pos:column="50">.</op:operator><name pos:line="266" pos:column="51">Object</name></name></expr></argument>)</argument_list></call><block pos:line="266" pos:column="58">{<expr><name pos:line="266" pos:column="59">Configuration</name> <op:operator pos:line="266" pos:column="73">=</op:operator> <name pos:line="266" pos:column="75">config</name></expr>}</block></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="268" pos:column="13">var</name></type> <name pos:line="268" pos:column="17">result</name> <init pos:line="268" pos:column="24">= <expr><call><name><name pos:line="268" pos:column="26">factory</name><op:operator pos:line="268" pos:column="33">.</op:operator><name pos:line="268" pos:column="34">InstantiateClientScripts</name></name><argument_list pos:line="268" pos:column="58">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="270" pos:column="13">var</name></type> <name pos:line="270" pos:column="17">discoverableCollection</name> <init pos:line="270" pos:column="40">= <expr><name pos:line="270" pos:column="42">result</name> <op:operator pos:line="270" pos:column="49">as</op:operator> <name><name pos:line="270" pos:column="52">IDiscoverableCollection</name><argument_list pos:line="270" pos:column="75">&lt;<argument><name pos:line="270" pos:column="76">IClientScript</name></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="272" pos:column="13">Assert</name><op:operator pos:line="272" pos:column="19">.</op:operator><name pos:line="272" pos:column="20">Equal</name></name><argument_list pos:line="272" pos:column="25">(<argument><expr><name pos:line="272" pos:column="26">path</name></expr></argument>, <argument><expr><name><name pos:line="272" pos:column="32">discoverableCollection</name><op:operator pos:line="272" pos:column="54">.</op:operator><name pos:line="272" pos:column="55">DiscoveryLocation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="275" pos:column="9">[<expr><name pos:line="275" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="276" pos:column="9">public</specifier> <name pos:line="276" pos:column="16">void</name></type> <name pos:line="276" pos:column="21">GetBasePolicyFromConfiguration</name><parameter_list pos:line="276" pos:column="51">()</parameter_list>
        <block pos:line="277" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="278" pos:column="13">var</name></type> <name pos:line="278" pos:column="17">locatorMock</name> <init pos:line="278" pos:column="29">= <expr><op:operator pos:line="278" pos:column="31">new</op:operator> <call><name><name pos:line="278" pos:column="35">Mock</name><argument_list pos:line="278" pos:column="39">&lt;<argument><name pos:line="278" pos:column="40">IServiceLocator</name></argument>&gt;</argument_list></name><argument_list pos:line="278" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="280" pos:column="13">var</name></type> <name pos:line="280" pos:column="17">factory</name> <init pos:line="280" pos:column="25">= <expr><op:operator pos:line="280" pos:column="27">new</op:operator> <call><name pos:line="280" pos:column="31">Factory</name><argument_list pos:line="280" pos:column="38">(<argument><expr><name><name pos:line="280" pos:column="39">locatorMock</name><op:operator pos:line="280" pos:column="50">.</op:operator><name pos:line="280" pos:column="51">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="282" pos:column="13">RuntimePolicy</name></type> <name pos:line="282" pos:column="27">result</name> <init pos:line="282" pos:column="34">= <expr><call><name><name pos:line="282" pos:column="36">factory</name><op:operator pos:line="282" pos:column="43">.</op:operator><name pos:line="282" pos:column="44">InstantiateDefaultRuntimePolicy</name></name><argument_list pos:line="282" pos:column="75">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="284" pos:column="13">Assert</name><op:operator pos:line="284" pos:column="19">.</op:operator><name pos:line="284" pos:column="20">Equal</name></name><argument_list pos:line="284" pos:column="25">(<argument><expr><name><name pos:line="284" pos:column="26">RuntimePolicy</name><op:operator pos:line="284" pos:column="39">.</op:operator><name pos:line="284" pos:column="40">On</name></name></expr></argument>, <argument><expr><name pos:line="284" pos:column="44">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="287" pos:column="9">[<expr><name pos:line="287" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="288" pos:column="9">public</specifier> <name pos:line="288" pos:column="16">void</name></type> <name pos:line="288" pos:column="21">InstantiateHtmlEncoderWithAntiXss</name><parameter_list pos:line="288" pos:column="54">()</parameter_list>
        <block pos:line="289" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="290" pos:column="13">var</name></type> <name pos:line="290" pos:column="17">locatorMock</name> <init pos:line="290" pos:column="29">= <expr><op:operator pos:line="290" pos:column="31">new</op:operator> <call><name><name pos:line="290" pos:column="35">Mock</name><argument_list pos:line="290" pos:column="39">&lt;<argument><name pos:line="290" pos:column="40">IServiceLocator</name></argument>&gt;</argument_list></name><argument_list pos:line="290" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="292" pos:column="13">var</name></type> <name pos:line="292" pos:column="17">factory</name> <init pos:line="292" pos:column="25">= <expr><op:operator pos:line="292" pos:column="27">new</op:operator> <call><name pos:line="292" pos:column="31">Factory</name><argument_list pos:line="292" pos:column="38">(<argument><expr><name><name pos:line="292" pos:column="39">locatorMock</name><op:operator pos:line="292" pos:column="50">.</op:operator><name pos:line="292" pos:column="51">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="294" pos:column="13">IHtmlEncoder</name></type> <name pos:line="294" pos:column="26">encoder</name> <init pos:line="294" pos:column="34">= <expr><call><name><name pos:line="294" pos:column="36">factory</name><op:operator pos:line="294" pos:column="43">.</op:operator><name pos:line="294" pos:column="44">InstantiateHtmlEncoder</name></name><argument_list pos:line="294" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="296" pos:column="13">Assert</name><op:operator pos:line="296" pos:column="19">.</op:operator><name pos:line="296" pos:column="20">NotNull</name></name><argument_list pos:line="296" pos:column="27">(<argument><expr><name pos:line="296" pos:column="28">encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="297" pos:column="13">Assert</name><op:operator pos:line="297" pos:column="19">.</op:operator><name pos:line="297" pos:column="20">NotNull</name></name><argument_list pos:line="297" pos:column="27">(<argument><expr><name pos:line="297" pos:column="28">encoder</name> <op:operator pos:line="297" pos:column="36">as</op:operator> <name pos:line="297" pos:column="39">AntiXssEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="298" pos:column="13">locatorMock</name><op:operator pos:line="298" pos:column="24">.</op:operator><name pos:line="298" pos:column="25">Verify</name></name><argument_list pos:line="298" pos:column="31">(<argument><expr><lambda><name pos:line="298" pos:column="32">l</name><op:operator pos:line="298" pos:column="33">=&gt;</op:operator><call><name><name pos:line="298" pos:column="35">l</name><op:operator pos:line="298" pos:column="36">.</op:operator><name><name pos:line="298" pos:column="37">GetInstance</name><argument_list pos:line="298" pos:column="48">&lt;<argument><name pos:line="298" pos:column="49">IHtmlEncoder</name></argument>&gt;</argument_list></name></name><argument_list pos:line="298" pos:column="62">()</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="298" pos:column="66">Times</name><op:operator pos:line="298" pos:column="71">.</op:operator><name pos:line="298" pos:column="72">Once</name></name><argument_list pos:line="298" pos:column="76">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="301" pos:column="9">[<expr><name pos:line="301" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="302" pos:column="9">public</specifier> <name pos:line="302" pos:column="16">void</name></type> <name pos:line="302" pos:column="21">LeverageServiceLocatorForHtmlEncoder</name><parameter_list pos:line="302" pos:column="57">()</parameter_list>
        <block pos:line="303" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="304" pos:column="13">var</name></type> <name pos:line="304" pos:column="17">encoderMock</name> <init pos:line="304" pos:column="29">= <expr><op:operator pos:line="304" pos:column="31">new</op:operator> <call><name><name pos:line="304" pos:column="35">Mock</name><argument_list pos:line="304" pos:column="39">&lt;<argument><name pos:line="304" pos:column="40">IHtmlEncoder</name></argument>&gt;</argument_list></name><argument_list pos:line="304" pos:column="53">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="305" pos:column="13">var</name></type> <name pos:line="305" pos:column="17">locatorMock</name> <init pos:line="305" pos:column="29">= <expr><op:operator pos:line="305" pos:column="31">new</op:operator> <call><name><name pos:line="305" pos:column="35">Mock</name><argument_list pos:line="305" pos:column="39">&lt;<argument><name pos:line="305" pos:column="40">IServiceLocator</name></argument>&gt;</argument_list></name><argument_list pos:line="305" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="306" pos:column="13">locatorMock</name><op:operator pos:line="306" pos:column="24">.</op:operator><name pos:line="306" pos:column="25">Setup</name></name><argument_list pos:line="306" pos:column="30">(<argument><expr><lambda><name pos:line="306" pos:column="31">l</name> <op:operator pos:line="306" pos:column="33">=&gt;</op:operator> <call><name><name pos:line="306" pos:column="36">l</name><op:operator pos:line="306" pos:column="37">.</op:operator><name><name pos:line="306" pos:column="38">GetInstance</name><argument_list pos:line="306" pos:column="49">&lt;<argument><name pos:line="306" pos:column="50">IHtmlEncoder</name></argument>&gt;</argument_list></name></name><argument_list pos:line="306" pos:column="63">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="306" pos:column="66">.</op:operator><call><name pos:line="306" pos:column="67">Returns</name><argument_list pos:line="306" pos:column="74">(<argument><expr><name><name pos:line="306" pos:column="75">encoderMock</name><op:operator pos:line="306" pos:column="86">.</op:operator><name pos:line="306" pos:column="87">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="308" pos:column="13">var</name></type> <name pos:line="308" pos:column="17">factory</name> <init pos:line="308" pos:column="25">= <expr><op:operator pos:line="308" pos:column="27">new</op:operator> <call><name pos:line="308" pos:column="31">Factory</name><argument_list pos:line="308" pos:column="38">(<argument><expr><name><name pos:line="308" pos:column="39">locatorMock</name><op:operator pos:line="308" pos:column="50">.</op:operator><name pos:line="308" pos:column="51">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="310" pos:column="13">IHtmlEncoder</name></type> <name pos:line="310" pos:column="26">encoder</name> <init pos:line="310" pos:column="34">= <expr><call><name><name pos:line="310" pos:column="36">factory</name><op:operator pos:line="310" pos:column="43">.</op:operator><name pos:line="310" pos:column="44">InstantiateHtmlEncoder</name></name><argument_list pos:line="310" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="312" pos:column="13">Assert</name><op:operator pos:line="312" pos:column="19">.</op:operator><name pos:line="312" pos:column="20">NotNull</name></name><argument_list pos:line="312" pos:column="27">(<argument><expr><name pos:line="312" pos:column="28">encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="313" pos:column="13">Assert</name><op:operator pos:line="313" pos:column="19">.</op:operator><name pos:line="313" pos:column="20">Equal</name></name><argument_list pos:line="313" pos:column="25">(<argument><expr><name><name pos:line="313" pos:column="26">encoderMock</name><op:operator pos:line="313" pos:column="37">.</op:operator><name pos:line="313" pos:column="38">Object</name></name></expr></argument>, <argument><expr><name pos:line="313" pos:column="46">encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <expr_stmt><expr><call><name><name pos:line="315" pos:column="13">locatorMock</name><op:operator pos:line="315" pos:column="24">.</op:operator><name pos:line="315" pos:column="25">Verify</name></name><argument_list pos:line="315" pos:column="31">(<argument><expr><lambda><name pos:line="315" pos:column="32">l</name> <op:operator pos:line="315" pos:column="34">=&gt;</op:operator> <call><name><name pos:line="315" pos:column="37">l</name><op:operator pos:line="315" pos:column="38">.</op:operator><name><name pos:line="315" pos:column="39">GetInstance</name><argument_list pos:line="315" pos:column="50">&lt;<argument><name pos:line="315" pos:column="51">IHtmlEncoder</name></argument>&gt;</argument_list></name></name><argument_list pos:line="315" pos:column="64">()</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="315" pos:column="68">Times</name><op:operator pos:line="315" pos:column="73">.</op:operator><name pos:line="315" pos:column="74">Once</name></name><argument_list pos:line="315" pos:column="78">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="318" pos:column="9">[<expr><name pos:line="318" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="319" pos:column="9">public</specifier> <name pos:line="319" pos:column="16">void</name></type> <name pos:line="319" pos:column="21">InstantiatePersistenceStoreWithApplicationPersistenceStore</name><parameter_list pos:line="319" pos:column="79">()</parameter_list>
        <block pos:line="320" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="321" pos:column="13">var</name></type> <name pos:line="321" pos:column="17">dataStoreMock</name> <init pos:line="321" pos:column="31">= <expr><op:operator pos:line="321" pos:column="33">new</op:operator> <call><name><name pos:line="321" pos:column="37">Mock</name><argument_list pos:line="321" pos:column="41">&lt;<argument><name pos:line="321" pos:column="42">IDataStore</name></argument>&gt;</argument_list></name><argument_list pos:line="321" pos:column="53">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="322" pos:column="13">var</name></type> <name pos:line="322" pos:column="17">providerMock</name> <init pos:line="322" pos:column="30">= <expr><op:operator pos:line="322" pos:column="32">new</op:operator> <call><name><name pos:line="322" pos:column="36">Mock</name><argument_list pos:line="322" pos:column="40">&lt;<argument><name pos:line="322" pos:column="41">IFrameworkProvider</name></argument>&gt;</argument_list></name><argument_list pos:line="322" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="323" pos:column="13">providerMock</name><op:operator pos:line="323" pos:column="25">.</op:operator><name pos:line="323" pos:column="26">Setup</name></name><argument_list pos:line="323" pos:column="31">(<argument><expr><lambda><name pos:line="323" pos:column="32">pm</name> <op:operator pos:line="323" pos:column="35">=&gt;</op:operator> <name><name pos:line="323" pos:column="38">pm</name><op:operator pos:line="323" pos:column="40">.</op:operator><name pos:line="323" pos:column="41">HttpServerStore</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="323" pos:column="57">.</op:operator><call><name pos:line="323" pos:column="58">Returns</name><argument_list pos:line="323" pos:column="65">(<argument><expr><name><name pos:line="323" pos:column="66">dataStoreMock</name><op:operator pos:line="323" pos:column="79">.</op:operator><name pos:line="323" pos:column="80">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="324" pos:column="13">var</name></type> <name pos:line="324" pos:column="17">locatorMock</name> <init pos:line="324" pos:column="29">= <expr><op:operator pos:line="324" pos:column="31">new</op:operator> <call><name><name pos:line="324" pos:column="35">Mock</name><argument_list pos:line="324" pos:column="39">&lt;<argument><name pos:line="324" pos:column="40">IServiceLocator</name></argument>&gt;</argument_list></name><argument_list pos:line="324" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="325" pos:column="13">locatorMock</name><op:operator pos:line="325" pos:column="24">.</op:operator><name pos:line="325" pos:column="25">Setup</name></name><argument_list pos:line="325" pos:column="30">(<argument><expr><lambda><name pos:line="325" pos:column="31">l</name> <op:operator pos:line="325" pos:column="33">=&gt;</op:operator> <call><name><name pos:line="325" pos:column="36">l</name><op:operator pos:line="325" pos:column="37">.</op:operator><name><name pos:line="325" pos:column="38">GetInstance</name><argument_list pos:line="325" pos:column="49">&lt;<argument><name pos:line="325" pos:column="50">IFrameworkProvider</name></argument>&gt;</argument_list></name></name><argument_list pos:line="325" pos:column="69">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="325" pos:column="72">.</op:operator><call><name pos:line="325" pos:column="73">Returns</name><argument_list pos:line="325" pos:column="80">(<argument><expr><name><name pos:line="325" pos:column="81">providerMock</name><op:operator pos:line="325" pos:column="93">.</op:operator><name pos:line="325" pos:column="94">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="327" pos:column="13">var</name></type> <name pos:line="327" pos:column="17">factory</name> <init pos:line="327" pos:column="25">= <expr><op:operator pos:line="327" pos:column="27">new</op:operator> <call><name pos:line="327" pos:column="31">Factory</name><argument_list pos:line="327" pos:column="38">(<argument><expr><name><name pos:line="327" pos:column="39">locatorMock</name><op:operator pos:line="327" pos:column="50">.</op:operator><name pos:line="327" pos:column="51">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="329" pos:column="13">IPersistenceStore</name></type> <name pos:line="329" pos:column="31">store</name> <init pos:line="329" pos:column="37">= <expr><call><name><name pos:line="329" pos:column="39">factory</name><op:operator pos:line="329" pos:column="46">.</op:operator><name pos:line="329" pos:column="47">InstantiatePersistenceStore</name></name><argument_list pos:line="329" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="331" pos:column="13">Assert</name><op:operator pos:line="331" pos:column="19">.</op:operator><name pos:line="331" pos:column="20">NotNull</name></name><argument_list pos:line="331" pos:column="27">(<argument><expr><name pos:line="331" pos:column="28">store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="332" pos:column="13">Assert</name><op:operator pos:line="332" pos:column="19">.</op:operator><name pos:line="332" pos:column="20">NotNull</name></name><argument_list pos:line="332" pos:column="27">(<argument><expr><name pos:line="332" pos:column="28">store</name> <op:operator pos:line="332" pos:column="34">as</op:operator> <name pos:line="332" pos:column="37">ApplicationPersistenceStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="335" pos:column="9">[<expr><name pos:line="335" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="336" pos:column="9">public</specifier> <name pos:line="336" pos:column="16">void</name></type> <name pos:line="336" pos:column="21">LeverageServiceLocatorForPersistenceStore</name><parameter_list pos:line="336" pos:column="62">()</parameter_list>
        <block pos:line="337" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="338" pos:column="13">var</name></type> <name pos:line="338" pos:column="17">dataStoreMock</name> <init pos:line="338" pos:column="31">= <expr><op:operator pos:line="338" pos:column="33">new</op:operator> <call><name><name pos:line="338" pos:column="37">Mock</name><argument_list pos:line="338" pos:column="41">&lt;<argument><name pos:line="338" pos:column="42">IDataStore</name></argument>&gt;</argument_list></name><argument_list pos:line="338" pos:column="53">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="339" pos:column="13">var</name></type> <name pos:line="339" pos:column="17">providerMock</name> <init pos:line="339" pos:column="30">= <expr><op:operator pos:line="339" pos:column="32">new</op:operator> <call><name><name pos:line="339" pos:column="36">Mock</name><argument_list pos:line="339" pos:column="40">&lt;<argument><name pos:line="339" pos:column="41">IFrameworkProvider</name></argument>&gt;</argument_list></name><argument_list pos:line="339" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="340" pos:column="13">providerMock</name><op:operator pos:line="340" pos:column="25">.</op:operator><name pos:line="340" pos:column="26">Setup</name></name><argument_list pos:line="340" pos:column="31">(<argument><expr><lambda><name pos:line="340" pos:column="32">pm</name> <op:operator pos:line="340" pos:column="35">=&gt;</op:operator> <name><name pos:line="340" pos:column="38">pm</name><op:operator pos:line="340" pos:column="40">.</op:operator><name pos:line="340" pos:column="41">HttpServerStore</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="340" pos:column="57">.</op:operator><call><name pos:line="340" pos:column="58">Returns</name><argument_list pos:line="340" pos:column="65">(<argument><expr><name><name pos:line="340" pos:column="66">dataStoreMock</name><op:operator pos:line="340" pos:column="79">.</op:operator><name pos:line="340" pos:column="80">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="341" pos:column="13">var</name></type> <name pos:line="341" pos:column="17">persistenceStoreMock</name> <init pos:line="341" pos:column="38">= <expr><op:operator pos:line="341" pos:column="40">new</op:operator> <call><name><name pos:line="341" pos:column="44">Mock</name><argument_list pos:line="341" pos:column="48">&lt;<argument><name pos:line="341" pos:column="49">IPersistenceStore</name></argument>&gt;</argument_list></name><argument_list pos:line="341" pos:column="67">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="342" pos:column="13">var</name></type> <name pos:line="342" pos:column="17">locatorMock</name> <init pos:line="342" pos:column="29">= <expr><op:operator pos:line="342" pos:column="31">new</op:operator> <call><name><name pos:line="342" pos:column="35">Mock</name><argument_list pos:line="342" pos:column="39">&lt;<argument><name pos:line="342" pos:column="40">IServiceLocator</name></argument>&gt;</argument_list></name><argument_list pos:line="342" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="343" pos:column="13">locatorMock</name><op:operator pos:line="343" pos:column="24">.</op:operator><name pos:line="343" pos:column="25">Setup</name></name><argument_list pos:line="343" pos:column="30">(<argument><expr><lambda><name pos:line="343" pos:column="31">l</name> <op:operator pos:line="343" pos:column="33">=&gt;</op:operator> <call><name><name pos:line="343" pos:column="36">l</name><op:operator pos:line="343" pos:column="37">.</op:operator><name><name pos:line="343" pos:column="38">GetInstance</name><argument_list pos:line="343" pos:column="49">&lt;<argument><name pos:line="343" pos:column="50">IFrameworkProvider</name></argument>&gt;</argument_list></name></name><argument_list pos:line="343" pos:column="69">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="343" pos:column="72">.</op:operator><call><name pos:line="343" pos:column="73">Returns</name><argument_list pos:line="343" pos:column="80">(<argument><expr><name><name pos:line="343" pos:column="81">providerMock</name><op:operator pos:line="343" pos:column="93">.</op:operator><name pos:line="343" pos:column="94">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="344" pos:column="13">locatorMock</name><op:operator pos:line="344" pos:column="24">.</op:operator><name pos:line="344" pos:column="25">Setup</name></name><argument_list pos:line="344" pos:column="30">(<argument><expr><lambda><name pos:line="344" pos:column="31">l</name> <op:operator pos:line="344" pos:column="33">=&gt;</op:operator> <call><name><name pos:line="344" pos:column="36">l</name><op:operator pos:line="344" pos:column="37">.</op:operator><name><name pos:line="344" pos:column="38">GetInstance</name><argument_list pos:line="344" pos:column="49">&lt;<argument><name pos:line="344" pos:column="50">IPersistenceStore</name></argument>&gt;</argument_list></name></name><argument_list pos:line="344" pos:column="68">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="344" pos:column="71">.</op:operator><call><name pos:line="344" pos:column="72">Returns</name><argument_list pos:line="344" pos:column="79">(<argument><expr><name><name pos:line="344" pos:column="80">persistenceStoreMock</name><op:operator pos:line="344" pos:column="100">.</op:operator><name pos:line="344" pos:column="101">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="346" pos:column="13">var</name></type> <name pos:line="346" pos:column="17">factory</name> <init pos:line="346" pos:column="25">= <expr><op:operator pos:line="346" pos:column="27">new</op:operator> <call><name pos:line="346" pos:column="31">Factory</name><argument_list pos:line="346" pos:column="38">(<argument><expr><name><name pos:line="346" pos:column="39">locatorMock</name><op:operator pos:line="346" pos:column="50">.</op:operator><name pos:line="346" pos:column="51">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="348" pos:column="13">IPersistenceStore</name></type> <name pos:line="348" pos:column="31">store</name> <init pos:line="348" pos:column="37">= <expr><call><name><name pos:line="348" pos:column="39">factory</name><op:operator pos:line="348" pos:column="46">.</op:operator><name pos:line="348" pos:column="47">InstantiatePersistenceStore</name></name><argument_list pos:line="348" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="350" pos:column="13">Assert</name><op:operator pos:line="350" pos:column="19">.</op:operator><name pos:line="350" pos:column="20">NotNull</name></name><argument_list pos:line="350" pos:column="27">(<argument><expr><name pos:line="350" pos:column="28">store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="351" pos:column="13">Assert</name><op:operator pos:line="351" pos:column="19">.</op:operator><name pos:line="351" pos:column="20">Equal</name></name><argument_list pos:line="351" pos:column="25">(<argument><expr><name><name pos:line="351" pos:column="26">persistenceStoreMock</name><op:operator pos:line="351" pos:column="46">.</op:operator><name pos:line="351" pos:column="47">Object</name></name></expr></argument>, <argument><expr><name pos:line="351" pos:column="55">store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="354" pos:column="9">[<expr><name pos:line="354" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="355" pos:column="9">public</specifier> <name pos:line="355" pos:column="16">void</name></type> <name pos:line="355" pos:column="21">InstantiateInspectorsWithReflectionDiscoverableCollection</name><parameter_list pos:line="355" pos:column="78">()</parameter_list>
        <block pos:line="356" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="357" pos:column="13">var</name></type> <name pos:line="357" pos:column="17">locatorMock</name> <init pos:line="357" pos:column="29">= <expr><op:operator pos:line="357" pos:column="31">new</op:operator> <call><name><name pos:line="357" pos:column="35">Mock</name><argument_list pos:line="357" pos:column="39">&lt;<argument><name pos:line="357" pos:column="40">IServiceLocator</name></argument>&gt;</argument_list></name><argument_list pos:line="357" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="358" pos:column="13">var</name></type> <name pos:line="358" pos:column="17">factory</name> <init pos:line="358" pos:column="25">= <expr><op:operator pos:line="358" pos:column="27">new</op:operator> <call><name pos:line="358" pos:column="31">Factory</name><argument_list pos:line="358" pos:column="38">(<argument><expr><name><name pos:line="358" pos:column="39">locatorMock</name><op:operator pos:line="358" pos:column="50">.</op:operator><name pos:line="358" pos:column="51">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="359" pos:column="13">ICollection</name><argument_list pos:line="359" pos:column="24">&lt;<argument><name pos:line="359" pos:column="25">IInspector</name></argument>&gt;</argument_list></name></type> <name pos:line="359" pos:column="37">inspectors</name> <init pos:line="359" pos:column="48">= <expr><call><name><name pos:line="359" pos:column="50">factory</name><op:operator pos:line="359" pos:column="57">.</op:operator><name pos:line="359" pos:column="58">InstantiateInspectors</name></name><argument_list pos:line="359" pos:column="79">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="361" pos:column="13">Assert</name><op:operator pos:line="361" pos:column="19">.</op:operator><name pos:line="361" pos:column="20">NotNull</name></name><argument_list pos:line="361" pos:column="27">(<argument><expr><name pos:line="361" pos:column="28">inspectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="362" pos:column="13">Assert</name><op:operator pos:line="362" pos:column="19">.</op:operator><name pos:line="362" pos:column="20">NotNull</name></name><argument_list pos:line="362" pos:column="27">(<argument><expr><name pos:line="362" pos:column="28">inspectors</name> <op:operator pos:line="362" pos:column="39">as</op:operator> <name><name pos:line="362" pos:column="42">ReflectionDiscoverableCollection</name><argument_list pos:line="362" pos:column="74">&lt;<argument><name pos:line="362" pos:column="75">IInspector</name></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="365" pos:column="9">[<expr><name pos:line="365" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="366" pos:column="9">public</specifier> <name pos:line="366" pos:column="16">void</name></type> <name pos:line="366" pos:column="21">LeverageServiceLocatorForInspectors</name><parameter_list pos:line="366" pos:column="56">()</parameter_list>
        <block pos:line="367" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="368" pos:column="13">ICollection</name><argument_list pos:line="368" pos:column="24">&lt;<argument><name pos:line="368" pos:column="25">IInspector</name></argument>&gt;</argument_list></name></type> <name pos:line="368" pos:column="37">inspectors</name> <init pos:line="368" pos:column="48">= <expr><op:operator pos:line="368" pos:column="50">new</op:operator> <call><name><name pos:line="368" pos:column="54">List</name><argument_list pos:line="368" pos:column="58">&lt;<argument><name pos:line="368" pos:column="59">IInspector</name></argument>&gt;</argument_list></name><argument_list pos:line="368" pos:column="70">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="370" pos:column="13">var</name></type> <name pos:line="370" pos:column="17">locatorMock</name> <init pos:line="370" pos:column="29">= <expr><op:operator pos:line="370" pos:column="31">new</op:operator> <call><name><name pos:line="370" pos:column="35">Mock</name><argument_list pos:line="370" pos:column="39">&lt;<argument><name pos:line="370" pos:column="40">IServiceLocator</name></argument>&gt;</argument_list></name><argument_list pos:line="370" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="371" pos:column="13">locatorMock</name><op:operator pos:line="371" pos:column="24">.</op:operator><name pos:line="371" pos:column="25">Setup</name></name><argument_list pos:line="371" pos:column="30">(<argument><expr><lambda><name pos:line="371" pos:column="31">l</name> <op:operator pos:line="371" pos:column="33">=&gt;</op:operator> <call><name><name pos:line="371" pos:column="36">l</name><op:operator pos:line="371" pos:column="37">.</op:operator><name><name pos:line="371" pos:column="38">GetAllInstances</name><argument_list pos:line="371" pos:column="53">&lt;<argument><name pos:line="371" pos:column="54">IInspector</name></argument>&gt;</argument_list></name></name><argument_list pos:line="371" pos:column="65">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="371" pos:column="68">.</op:operator><call><name pos:line="371" pos:column="69">Returns</name><argument_list pos:line="371" pos:column="76">(<argument><expr><name pos:line="371" pos:column="77">inspectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="373" pos:column="13">var</name></type> <name pos:line="373" pos:column="17">factory</name> <init pos:line="373" pos:column="25">= <expr><op:operator pos:line="373" pos:column="27">new</op:operator> <call><name pos:line="373" pos:column="31">Factory</name><argument_list pos:line="373" pos:column="38">(<argument><expr><name><name pos:line="373" pos:column="39">locatorMock</name><op:operator pos:line="373" pos:column="50">.</op:operator><name pos:line="373" pos:column="51">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="375" pos:column="13">var</name></type> <name pos:line="375" pos:column="17">result</name> <init pos:line="375" pos:column="24">= <expr><call><name><name pos:line="375" pos:column="26">factory</name><op:operator pos:line="375" pos:column="33">.</op:operator><name pos:line="375" pos:column="34">InstantiateInspectors</name></name><argument_list pos:line="375" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="377" pos:column="13">Assert</name><op:operator pos:line="377" pos:column="19">.</op:operator><name pos:line="377" pos:column="20">Equal</name></name><argument_list pos:line="377" pos:column="25">(<argument><expr><name pos:line="377" pos:column="26">inspectors</name></expr></argument>, <argument><expr><name pos:line="377" pos:column="38">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="380" pos:column="9">[<expr><name pos:line="380" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="381" pos:column="9">public</specifier> <name pos:line="381" pos:column="16">void</name></type> <name pos:line="381" pos:column="21">InstantiateResourcesWithReflectionDiscoverableCollection</name><parameter_list pos:line="381" pos:column="77">()</parameter_list>
        <block pos:line="382" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="383" pos:column="13">var</name></type> <name pos:line="383" pos:column="17">locatorMock</name> <init pos:line="383" pos:column="29">= <expr><op:operator pos:line="383" pos:column="31">new</op:operator> <call><name><name pos:line="383" pos:column="35">Mock</name><argument_list pos:line="383" pos:column="39">&lt;<argument><name pos:line="383" pos:column="40">IServiceLocator</name></argument>&gt;</argument_list></name><argument_list pos:line="383" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="384" pos:column="13">var</name></type> <name pos:line="384" pos:column="17">factory</name> <init pos:line="384" pos:column="25">= <expr><op:operator pos:line="384" pos:column="27">new</op:operator> <call><name pos:line="384" pos:column="31">Factory</name><argument_list pos:line="384" pos:column="38">(<argument><expr><name><name pos:line="384" pos:column="39">locatorMock</name><op:operator pos:line="384" pos:column="50">.</op:operator><name pos:line="384" pos:column="51">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="385" pos:column="13">ICollection</name><argument_list pos:line="385" pos:column="24">&lt;<argument><name pos:line="385" pos:column="25">IResource</name></argument>&gt;</argument_list></name></type> <name pos:line="385" pos:column="36">resources</name> <init pos:line="385" pos:column="46">= <expr><call><name><name pos:line="385" pos:column="48">factory</name><op:operator pos:line="385" pos:column="55">.</op:operator><name pos:line="385" pos:column="56">InstantiateResources</name></name><argument_list pos:line="385" pos:column="76">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="387" pos:column="13">Assert</name><op:operator pos:line="387" pos:column="19">.</op:operator><name pos:line="387" pos:column="20">NotNull</name></name><argument_list pos:line="387" pos:column="27">(<argument><expr><name pos:line="387" pos:column="28">resources</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="388" pos:column="13">Assert</name><op:operator pos:line="388" pos:column="19">.</op:operator><name pos:line="388" pos:column="20">NotNull</name></name><argument_list pos:line="388" pos:column="27">(<argument><expr><name pos:line="388" pos:column="28">resources</name> <op:operator pos:line="388" pos:column="38">as</op:operator> <name><name pos:line="388" pos:column="41">ReflectionDiscoverableCollection</name><argument_list pos:line="388" pos:column="73">&lt;<argument><name pos:line="388" pos:column="74">IResource</name></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="391" pos:column="9">[<expr><name pos:line="391" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="392" pos:column="9">public</specifier> <name pos:line="392" pos:column="16">void</name></type> <name pos:line="392" pos:column="21">LeverageServiceLocatorForResources</name><parameter_list pos:line="392" pos:column="55">()</parameter_list>
        <block pos:line="393" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="394" pos:column="13">ICollection</name><argument_list pos:line="394" pos:column="24">&lt;<argument><name pos:line="394" pos:column="25">IResource</name></argument>&gt;</argument_list></name></type> <name pos:line="394" pos:column="36">resources</name> <init pos:line="394" pos:column="46">= <expr><op:operator pos:line="394" pos:column="48">new</op:operator> <call><name><name pos:line="394" pos:column="52">List</name><argument_list pos:line="394" pos:column="56">&lt;<argument><name pos:line="394" pos:column="57">IResource</name></argument>&gt;</argument_list></name><argument_list pos:line="394" pos:column="67">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="396" pos:column="13">var</name></type> <name pos:line="396" pos:column="17">locatorMock</name> <init pos:line="396" pos:column="29">= <expr><op:operator pos:line="396" pos:column="31">new</op:operator> <call><name><name pos:line="396" pos:column="35">Mock</name><argument_list pos:line="396" pos:column="39">&lt;<argument><name pos:line="396" pos:column="40">IServiceLocator</name></argument>&gt;</argument_list></name><argument_list pos:line="396" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="397" pos:column="13">locatorMock</name><op:operator pos:line="397" pos:column="24">.</op:operator><name pos:line="397" pos:column="25">Setup</name></name><argument_list pos:line="397" pos:column="30">(<argument><expr><lambda><name pos:line="397" pos:column="31">l</name> <op:operator pos:line="397" pos:column="33">=&gt;</op:operator> <call><name><name pos:line="397" pos:column="36">l</name><op:operator pos:line="397" pos:column="37">.</op:operator><name><name pos:line="397" pos:column="38">GetAllInstances</name><argument_list pos:line="397" pos:column="53">&lt;<argument><name pos:line="397" pos:column="54">IResource</name></argument>&gt;</argument_list></name></name><argument_list pos:line="397" pos:column="64">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="397" pos:column="67">.</op:operator><call><name pos:line="397" pos:column="68">Returns</name><argument_list pos:line="397" pos:column="75">(<argument><expr><name pos:line="397" pos:column="76">resources</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="399" pos:column="13">var</name></type> <name pos:line="399" pos:column="17">factory</name> <init pos:line="399" pos:column="25">= <expr><op:operator pos:line="399" pos:column="27">new</op:operator> <call><name pos:line="399" pos:column="31">Factory</name><argument_list pos:line="399" pos:column="38">(<argument><expr><name><name pos:line="399" pos:column="39">locatorMock</name><op:operator pos:line="399" pos:column="50">.</op:operator><name pos:line="399" pos:column="51">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="401" pos:column="13">var</name></type> <name pos:line="401" pos:column="17">result</name> <init pos:line="401" pos:column="24">= <expr><call><name><name pos:line="401" pos:column="26">factory</name><op:operator pos:line="401" pos:column="33">.</op:operator><name pos:line="401" pos:column="34">InstantiateResources</name></name><argument_list pos:line="401" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="403" pos:column="13">Assert</name><op:operator pos:line="403" pos:column="19">.</op:operator><name pos:line="403" pos:column="20">Equal</name></name><argument_list pos:line="403" pos:column="25">(<argument><expr><name pos:line="403" pos:column="26">resources</name></expr></argument>, <argument><expr><name pos:line="403" pos:column="37">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="406" pos:column="9">[<expr><name pos:line="406" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="407" pos:column="9">public</specifier> <name pos:line="407" pos:column="16">void</name></type> <name pos:line="407" pos:column="21">InstantiateSerializerWithJsonNetSerializer</name><parameter_list pos:line="407" pos:column="63">()</parameter_list>
        <block pos:line="408" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="409" pos:column="13">var</name></type> <name pos:line="409" pos:column="17">locatorMock</name> <init pos:line="409" pos:column="29">= <expr><op:operator pos:line="409" pos:column="31">new</op:operator> <call><name><name pos:line="409" pos:column="35">Mock</name><argument_list pos:line="409" pos:column="39">&lt;<argument><name pos:line="409" pos:column="40">IServiceLocator</name></argument>&gt;</argument_list></name><argument_list pos:line="409" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="411" pos:column="13">var</name></type> <name pos:line="411" pos:column="17">factory</name> <init pos:line="411" pos:column="25">= <expr><op:operator pos:line="411" pos:column="27">new</op:operator> <call><name pos:line="411" pos:column="31">Factory</name><argument_list pos:line="411" pos:column="38">(<argument><expr><name><name pos:line="411" pos:column="39">locatorMock</name><op:operator pos:line="411" pos:column="50">.</op:operator><name pos:line="411" pos:column="51">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="413" pos:column="13">ISerializer</name></type> <name pos:line="413" pos:column="25">serializer</name> <init pos:line="413" pos:column="36">= <expr><call><name><name pos:line="413" pos:column="38">factory</name><op:operator pos:line="413" pos:column="45">.</op:operator><name pos:line="413" pos:column="46">InstantiateSerializer</name></name><argument_list pos:line="413" pos:column="67">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="415" pos:column="13">Assert</name><op:operator pos:line="415" pos:column="19">.</op:operator><name pos:line="415" pos:column="20">NotNull</name></name><argument_list pos:line="415" pos:column="27">(<argument><expr><name pos:line="415" pos:column="28">serializer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="416" pos:column="13">Assert</name><op:operator pos:line="416" pos:column="19">.</op:operator><name pos:line="416" pos:column="20">NotNull</name></name><argument_list pos:line="416" pos:column="27">(<argument><expr><name pos:line="416" pos:column="28">serializer</name> <op:operator pos:line="416" pos:column="39">as</op:operator> <name pos:line="416" pos:column="42">JsonNetSerializer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="417" pos:column="13">locatorMock</name><op:operator pos:line="417" pos:column="24">.</op:operator><name pos:line="417" pos:column="25">Verify</name></name><argument_list pos:line="417" pos:column="31">(<argument><expr><lambda><name pos:line="417" pos:column="32">l</name> <op:operator pos:line="417" pos:column="34">=&gt;</op:operator> <call><name><name pos:line="417" pos:column="37">l</name><op:operator pos:line="417" pos:column="38">.</op:operator><name><name pos:line="417" pos:column="39">GetInstance</name><argument_list pos:line="417" pos:column="50">&lt;<argument><name pos:line="417" pos:column="51">ISerializer</name></argument>&gt;</argument_list></name></name><argument_list pos:line="417" pos:column="63">()</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="417" pos:column="67">Times</name><op:operator pos:line="417" pos:column="72">.</op:operator><name pos:line="417" pos:column="73">Once</name></name><argument_list pos:line="417" pos:column="77">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="420" pos:column="9">[<expr><name pos:line="420" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="421" pos:column="9">public</specifier> <name pos:line="421" pos:column="16">void</name></type> <name pos:line="421" pos:column="21">LeverageServiceLocatorForSerializer</name><parameter_list pos:line="421" pos:column="56">()</parameter_list>
        <block pos:line="422" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="423" pos:column="13">var</name></type> <name pos:line="423" pos:column="17">serializerMock</name> <init pos:line="423" pos:column="32">= <expr><op:operator pos:line="423" pos:column="34">new</op:operator> <call><name><name pos:line="423" pos:column="38">Mock</name><argument_list pos:line="423" pos:column="42">&lt;<argument><name pos:line="423" pos:column="43">ISerializer</name></argument>&gt;</argument_list></name><argument_list pos:line="423" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="424" pos:column="13">var</name></type> <name pos:line="424" pos:column="17">locatorMock</name> <init pos:line="424" pos:column="29">= <expr><op:operator pos:line="424" pos:column="31">new</op:operator> <call><name><name pos:line="424" pos:column="35">Mock</name><argument_list pos:line="424" pos:column="39">&lt;<argument><name pos:line="424" pos:column="40">IServiceLocator</name></argument>&gt;</argument_list></name><argument_list pos:line="424" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="425" pos:column="13">locatorMock</name><op:operator pos:line="425" pos:column="24">.</op:operator><name pos:line="425" pos:column="25">Setup</name></name><argument_list pos:line="425" pos:column="30">(<argument><expr><lambda><name pos:line="425" pos:column="31">l</name> <op:operator pos:line="425" pos:column="33">=&gt;</op:operator> <call><name><name pos:line="425" pos:column="36">l</name><op:operator pos:line="425" pos:column="37">.</op:operator><name><name pos:line="425" pos:column="38">GetInstance</name><argument_list pos:line="425" pos:column="49">&lt;<argument><name pos:line="425" pos:column="50">ISerializer</name></argument>&gt;</argument_list></name></name><argument_list pos:line="425" pos:column="62">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="425" pos:column="65">.</op:operator><call><name pos:line="425" pos:column="66">Returns</name><argument_list pos:line="425" pos:column="73">(<argument><expr><name><name pos:line="425" pos:column="74">serializerMock</name><op:operator pos:line="425" pos:column="88">.</op:operator><name pos:line="425" pos:column="89">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="427" pos:column="13">var</name></type> <name pos:line="427" pos:column="17">factory</name> <init pos:line="427" pos:column="25">= <expr><op:operator pos:line="427" pos:column="27">new</op:operator> <call><name pos:line="427" pos:column="31">Factory</name><argument_list pos:line="427" pos:column="38">(<argument><expr><name><name pos:line="427" pos:column="39">locatorMock</name><op:operator pos:line="427" pos:column="50">.</op:operator><name pos:line="427" pos:column="51">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="429" pos:column="13">ISerializer</name></type> <name pos:line="429" pos:column="25">serializer</name> <init pos:line="429" pos:column="36">= <expr><call><name><name pos:line="429" pos:column="38">factory</name><op:operator pos:line="429" pos:column="45">.</op:operator><name pos:line="429" pos:column="46">InstantiateSerializer</name></name><argument_list pos:line="429" pos:column="67">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="431" pos:column="13">Assert</name><op:operator pos:line="431" pos:column="19">.</op:operator><name pos:line="431" pos:column="20">NotNull</name></name><argument_list pos:line="431" pos:column="27">(<argument><expr><name pos:line="431" pos:column="28">serializer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="432" pos:column="13">Assert</name><op:operator pos:line="432" pos:column="19">.</op:operator><name pos:line="432" pos:column="20">Equal</name></name><argument_list pos:line="432" pos:column="25">(<argument><expr><name><name pos:line="432" pos:column="26">serializerMock</name><op:operator pos:line="432" pos:column="40">.</op:operator><name pos:line="432" pos:column="41">Object</name></name></expr></argument>, <argument><expr><name pos:line="432" pos:column="49">serializer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="434" pos:column="13">locatorMock</name><op:operator pos:line="434" pos:column="24">.</op:operator><name pos:line="434" pos:column="25">Verify</name></name><argument_list pos:line="434" pos:column="31">(<argument><expr><lambda><name pos:line="434" pos:column="32">l</name> <op:operator pos:line="434" pos:column="34">=&gt;</op:operator> <call><name><name pos:line="434" pos:column="37">l</name><op:operator pos:line="434" pos:column="38">.</op:operator><name><name pos:line="434" pos:column="39">GetInstance</name><argument_list pos:line="434" pos:column="50">&lt;<argument><name pos:line="434" pos:column="51">ISerializer</name></argument>&gt;</argument_list></name></name><argument_list pos:line="434" pos:column="63">()</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="434" pos:column="67">Times</name><op:operator pos:line="434" pos:column="72">.</op:operator><name pos:line="434" pos:column="73">Once</name></name><argument_list pos:line="434" pos:column="77">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="437" pos:column="9">[<expr><name pos:line="437" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="438" pos:column="9">public</specifier> <name pos:line="438" pos:column="16">void</name></type> <name pos:line="438" pos:column="21">RegisterConvertersWithSerializer</name><parameter_list pos:line="438" pos:column="53">()</parameter_list>
        <block pos:line="439" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="440" pos:column="13">var</name></type> <name pos:line="440" pos:column="17">converters</name> <init pos:line="440" pos:column="28">= <expr><op:operator pos:line="440" pos:column="30">new</op:operator> <call><name><name pos:line="440" pos:column="34">List</name><argument_list pos:line="440" pos:column="38">&lt;<argument><name pos:line="440" pos:column="39">ISerializationConverter</name></argument>&gt;</argument_list></name><argument_list pos:line="440" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="442" pos:column="13">var</name></type> <name pos:line="442" pos:column="17">locatorMock</name> <init pos:line="442" pos:column="29">= <expr><op:operator pos:line="442" pos:column="31">new</op:operator> <call><name><name pos:line="442" pos:column="35">Mock</name><argument_list pos:line="442" pos:column="39">&lt;<argument><name pos:line="442" pos:column="40">IServiceLocator</name></argument>&gt;</argument_list></name><argument_list pos:line="442" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="443" pos:column="13">locatorMock</name><op:operator pos:line="443" pos:column="24">.</op:operator><name pos:line="443" pos:column="25">Setup</name></name><argument_list pos:line="443" pos:column="30">(<argument><expr><lambda><name pos:line="443" pos:column="31">l</name> <op:operator pos:line="443" pos:column="33">=&gt;</op:operator> <call><name><name pos:line="443" pos:column="36">l</name><op:operator pos:line="443" pos:column="37">.</op:operator><name><name pos:line="443" pos:column="38">GetAllInstances</name><argument_list pos:line="443" pos:column="53">&lt;<argument><name pos:line="443" pos:column="54">ISerializationConverter</name></argument>&gt;</argument_list></name></name><argument_list pos:line="443" pos:column="78">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="443" pos:column="81">.</op:operator><call><name pos:line="443" pos:column="82">Returns</name><argument_list pos:line="443" pos:column="89">(<argument><expr><name pos:line="443" pos:column="90">converters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="445" pos:column="13">var</name></type> <name pos:line="445" pos:column="17">factory</name> <init pos:line="445" pos:column="25">= <expr><op:operator pos:line="445" pos:column="27">new</op:operator> <call><name pos:line="445" pos:column="31">Factory</name><argument_list pos:line="445" pos:column="38">(<argument><expr><name><name pos:line="445" pos:column="39">locatorMock</name><op:operator pos:line="445" pos:column="50">.</op:operator><name pos:line="445" pos:column="51">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="447" pos:column="13">factory</name><op:operator pos:line="447" pos:column="20">.</op:operator><name pos:line="447" pos:column="21">InstantiateSerializer</name></name><argument_list pos:line="447" pos:column="42">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="449" pos:column="13">locatorMock</name><op:operator pos:line="449" pos:column="24">.</op:operator><name pos:line="449" pos:column="25">Verify</name></name><argument_list pos:line="449" pos:column="31">(<argument><expr><lambda><name pos:line="449" pos:column="32">l</name><op:operator pos:line="449" pos:column="33">=&gt;</op:operator><call><name><name pos:line="449" pos:column="35">l</name><op:operator pos:line="449" pos:column="36">.</op:operator><name><name pos:line="449" pos:column="37">GetAllInstances</name><argument_list pos:line="449" pos:column="52">&lt;<argument><name pos:line="449" pos:column="53">ISerializationConverter</name></argument>&gt;</argument_list></name></name><argument_list pos:line="449" pos:column="77">()</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="449" pos:column="81">Times</name><op:operator pos:line="449" pos:column="86">.</op:operator><name pos:line="449" pos:column="87">Once</name></name><argument_list pos:line="449" pos:column="91">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="452" pos:column="9">[<expr><name pos:line="452" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="453" pos:column="9">public</specifier> <name pos:line="453" pos:column="16">void</name></type> <name pos:line="453" pos:column="21">InstantiateTabsWithReflectionDiscoverableCollection</name><parameter_list pos:line="453" pos:column="72">()</parameter_list>
        <block pos:line="454" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="455" pos:column="13">var</name></type> <name pos:line="455" pos:column="17">locatorMock</name> <init pos:line="455" pos:column="29">= <expr><op:operator pos:line="455" pos:column="31">new</op:operator> <call><name><name pos:line="455" pos:column="35">Mock</name><argument_list pos:line="455" pos:column="39">&lt;<argument><name pos:line="455" pos:column="40">IServiceLocator</name></argument>&gt;</argument_list></name><argument_list pos:line="455" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="456" pos:column="13">var</name></type> <name pos:line="456" pos:column="17">factory</name> <init pos:line="456" pos:column="25">= <expr><op:operator pos:line="456" pos:column="27">new</op:operator> <call><name pos:line="456" pos:column="31">Factory</name><argument_list pos:line="456" pos:column="38">(<argument><expr><name><name pos:line="456" pos:column="39">locatorMock</name><op:operator pos:line="456" pos:column="50">.</op:operator><name pos:line="456" pos:column="51">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="457" pos:column="13">ICollection</name><argument_list pos:line="457" pos:column="24">&lt;<argument><name pos:line="457" pos:column="25">ITab</name></argument>&gt;</argument_list></name></type> <name pos:line="457" pos:column="31">tabs</name> <init pos:line="457" pos:column="36">= <expr><call><name><name pos:line="457" pos:column="38">factory</name><op:operator pos:line="457" pos:column="45">.</op:operator><name pos:line="457" pos:column="46">InstantiateTabs</name></name><argument_list pos:line="457" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="459" pos:column="13">Assert</name><op:operator pos:line="459" pos:column="19">.</op:operator><name pos:line="459" pos:column="20">NotNull</name></name><argument_list pos:line="459" pos:column="27">(<argument><expr><name pos:line="459" pos:column="28">tabs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="460" pos:column="13">Assert</name><op:operator pos:line="460" pos:column="19">.</op:operator><name pos:line="460" pos:column="20">NotNull</name></name><argument_list pos:line="460" pos:column="27">(<argument><expr><name pos:line="460" pos:column="28">tabs</name> <op:operator pos:line="460" pos:column="33">as</op:operator> <name><name pos:line="460" pos:column="36">ReflectionDiscoverableCollection</name><argument_list pos:line="460" pos:column="68">&lt;<argument><name pos:line="460" pos:column="69">ITab</name></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="463" pos:column="9">[<expr><name pos:line="463" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="464" pos:column="9">public</specifier> <name pos:line="464" pos:column="16">void</name></type> <name pos:line="464" pos:column="21">LeverageServiceLocatorForTabs</name><parameter_list pos:line="464" pos:column="50">()</parameter_list>
        <block pos:line="465" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="466" pos:column="13">ICollection</name><argument_list pos:line="466" pos:column="24">&lt;<argument><name pos:line="466" pos:column="25">ITab</name></argument>&gt;</argument_list></name></type> <name pos:line="466" pos:column="31">tabs</name> <init pos:line="466" pos:column="36">= <expr><op:operator pos:line="466" pos:column="38">new</op:operator> <call><name><name pos:line="466" pos:column="42">List</name><argument_list pos:line="466" pos:column="46">&lt;<argument><name pos:line="466" pos:column="47">ITab</name></argument>&gt;</argument_list></name><argument_list pos:line="466" pos:column="52">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="468" pos:column="13">var</name></type> <name pos:line="468" pos:column="17">locatorMock</name> <init pos:line="468" pos:column="29">= <expr><op:operator pos:line="468" pos:column="31">new</op:operator> <call><name><name pos:line="468" pos:column="35">Mock</name><argument_list pos:line="468" pos:column="39">&lt;<argument><name pos:line="468" pos:column="40">IServiceLocator</name></argument>&gt;</argument_list></name><argument_list pos:line="468" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="469" pos:column="13">locatorMock</name><op:operator pos:line="469" pos:column="24">.</op:operator><name pos:line="469" pos:column="25">Setup</name></name><argument_list pos:line="469" pos:column="30">(<argument><expr><lambda><name pos:line="469" pos:column="31">l</name> <op:operator pos:line="469" pos:column="33">=&gt;</op:operator> <call><name><name pos:line="469" pos:column="36">l</name><op:operator pos:line="469" pos:column="37">.</op:operator><name><name pos:line="469" pos:column="38">GetAllInstances</name><argument_list pos:line="469" pos:column="53">&lt;<argument><name pos:line="469" pos:column="54">ITab</name></argument>&gt;</argument_list></name></name><argument_list pos:line="469" pos:column="59">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="469" pos:column="62">.</op:operator><call><name pos:line="469" pos:column="63">Returns</name><argument_list pos:line="469" pos:column="70">(<argument><expr><name pos:line="469" pos:column="71">tabs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="471" pos:column="13">var</name></type> <name pos:line="471" pos:column="17">factory</name> <init pos:line="471" pos:column="25">= <expr><op:operator pos:line="471" pos:column="27">new</op:operator> <call><name pos:line="471" pos:column="31">Factory</name><argument_list pos:line="471" pos:column="38">(<argument><expr><name><name pos:line="471" pos:column="39">locatorMock</name><op:operator pos:line="471" pos:column="50">.</op:operator><name pos:line="471" pos:column="51">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="473" pos:column="13">var</name></type> <name pos:line="473" pos:column="17">result</name> <init pos:line="473" pos:column="24">= <expr><call><name><name pos:line="473" pos:column="26">factory</name><op:operator pos:line="473" pos:column="33">.</op:operator><name pos:line="473" pos:column="34">InstantiateTabs</name></name><argument_list pos:line="473" pos:column="49">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="475" pos:column="13">Assert</name><op:operator pos:line="475" pos:column="19">.</op:operator><name pos:line="475" pos:column="20">Equal</name></name><argument_list pos:line="475" pos:column="25">(<argument><expr><name pos:line="475" pos:column="26">tabs</name></expr></argument>, <argument><expr><name pos:line="475" pos:column="32">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="476" pos:column="13">locatorMock</name><op:operator pos:line="476" pos:column="24">.</op:operator><name pos:line="476" pos:column="25">Verify</name></name><argument_list pos:line="476" pos:column="31">(<argument><expr><lambda><name pos:line="476" pos:column="32">l</name> <op:operator pos:line="476" pos:column="34">=&gt;</op:operator> <call><name><name pos:line="476" pos:column="37">l</name><op:operator pos:line="476" pos:column="38">.</op:operator><name><name pos:line="476" pos:column="39">GetAllInstances</name><argument_list pos:line="476" pos:column="54">&lt;<argument><name pos:line="476" pos:column="55">ITab</name></argument>&gt;</argument_list></name></name><argument_list pos:line="476" pos:column="60">()</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="476" pos:column="64">Times</name><op:operator pos:line="476" pos:column="69">.</op:operator><name pos:line="476" pos:column="70">Once</name></name><argument_list pos:line="476" pos:column="74">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="479" pos:column="9">[<expr><name pos:line="479" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="480" pos:column="9">public</specifier> <name pos:line="480" pos:column="16">void</name></type> <name pos:line="480" pos:column="21">InstantiateRuntimePoliciesWithReflectionDiscoverableCollection</name><parameter_list pos:line="480" pos:column="83">()</parameter_list>
        <block pos:line="481" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="482" pos:column="13">var</name></type> <name pos:line="482" pos:column="17">locatorMock</name> <init pos:line="482" pos:column="29">= <expr><op:operator pos:line="482" pos:column="31">new</op:operator> <call><name><name pos:line="482" pos:column="35">Mock</name><argument_list pos:line="482" pos:column="39">&lt;<argument><name pos:line="482" pos:column="40">IServiceLocator</name></argument>&gt;</argument_list></name><argument_list pos:line="482" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="483" pos:column="13">var</name></type> <name pos:line="483" pos:column="17">factory</name> <init pos:line="483" pos:column="25">= <expr><op:operator pos:line="483" pos:column="27">new</op:operator> <call><name pos:line="483" pos:column="31">Factory</name><argument_list pos:line="483" pos:column="38">(<argument><expr><name><name pos:line="483" pos:column="39">locatorMock</name><op:operator pos:line="483" pos:column="50">.</op:operator><name pos:line="483" pos:column="51">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="484" pos:column="13">ICollection</name><argument_list pos:line="484" pos:column="24">&lt;<argument><name pos:line="484" pos:column="25">IRuntimePolicy</name></argument>&gt;</argument_list></name></type> <name pos:line="484" pos:column="41">policies</name> <init pos:line="484" pos:column="50">= <expr><call><name><name pos:line="484" pos:column="52">factory</name><op:operator pos:line="484" pos:column="59">.</op:operator><name pos:line="484" pos:column="60">InstantiateRuntimePolicies</name></name><argument_list pos:line="484" pos:column="86">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="486" pos:column="13">Assert</name><op:operator pos:line="486" pos:column="19">.</op:operator><name pos:line="486" pos:column="20">NotNull</name></name><argument_list pos:line="486" pos:column="27">(<argument><expr><name pos:line="486" pos:column="28">policies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="487" pos:column="13">Assert</name><op:operator pos:line="487" pos:column="19">.</op:operator><name pos:line="487" pos:column="20">NotNull</name></name><argument_list pos:line="487" pos:column="27">(<argument><expr><name pos:line="487" pos:column="28">policies</name> <op:operator pos:line="487" pos:column="37">as</op:operator> <name><name pos:line="487" pos:column="40">ReflectionDiscoverableCollection</name><argument_list pos:line="487" pos:column="72">&lt;<argument><name pos:line="487" pos:column="73">IRuntimePolicy</name></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="490" pos:column="9">[<expr><name pos:line="490" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="491" pos:column="9">public</specifier> <name pos:line="491" pos:column="16">void</name></type> <name pos:line="491" pos:column="21">LeverageServiceLocatorForRuntimePolicies</name><parameter_list pos:line="491" pos:column="61">()</parameter_list>
        <block pos:line="492" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="493" pos:column="13">ICollection</name><argument_list pos:line="493" pos:column="24">&lt;<argument><name pos:line="493" pos:column="25">IRuntimePolicy</name></argument>&gt;</argument_list></name></type> <name pos:line="493" pos:column="41">policies</name> <init pos:line="493" pos:column="50">= <expr><op:operator pos:line="493" pos:column="52">new</op:operator> <call><name><name pos:line="493" pos:column="56">List</name><argument_list pos:line="493" pos:column="60">&lt;<argument><name pos:line="493" pos:column="61">IRuntimePolicy</name></argument>&gt;</argument_list></name><argument_list pos:line="493" pos:column="76">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="495" pos:column="13">var</name></type> <name pos:line="495" pos:column="17">locatorMock</name> <init pos:line="495" pos:column="29">= <expr><op:operator pos:line="495" pos:column="31">new</op:operator> <call><name><name pos:line="495" pos:column="35">Mock</name><argument_list pos:line="495" pos:column="39">&lt;<argument><name pos:line="495" pos:column="40">IServiceLocator</name></argument>&gt;</argument_list></name><argument_list pos:line="495" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="496" pos:column="13">locatorMock</name><op:operator pos:line="496" pos:column="24">.</op:operator><name pos:line="496" pos:column="25">Setup</name></name><argument_list pos:line="496" pos:column="30">(<argument><expr><lambda><name pos:line="496" pos:column="31">l</name> <op:operator pos:line="496" pos:column="33">=&gt;</op:operator> <call><name><name pos:line="496" pos:column="36">l</name><op:operator pos:line="496" pos:column="37">.</op:operator><name><name pos:line="496" pos:column="38">GetAllInstances</name><argument_list pos:line="496" pos:column="53">&lt;<argument><name pos:line="496" pos:column="54">IRuntimePolicy</name></argument>&gt;</argument_list></name></name><argument_list pos:line="496" pos:column="69">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="496" pos:column="72">.</op:operator><call><name pos:line="496" pos:column="73">Returns</name><argument_list pos:line="496" pos:column="80">(<argument><expr><name pos:line="496" pos:column="81">policies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="498" pos:column="13">var</name></type> <name pos:line="498" pos:column="17">factory</name> <init pos:line="498" pos:column="25">= <expr><op:operator pos:line="498" pos:column="27">new</op:operator> <call><name pos:line="498" pos:column="31">Factory</name><argument_list pos:line="498" pos:column="38">(<argument><expr><name><name pos:line="498" pos:column="39">locatorMock</name><op:operator pos:line="498" pos:column="50">.</op:operator><name pos:line="498" pos:column="51">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="500" pos:column="13">var</name></type> <name pos:line="500" pos:column="17">result</name> <init pos:line="500" pos:column="24">= <expr><call><name><name pos:line="500" pos:column="26">factory</name><op:operator pos:line="500" pos:column="33">.</op:operator><name pos:line="500" pos:column="34">InstantiateRuntimePolicies</name></name><argument_list pos:line="500" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="502" pos:column="13">Assert</name><op:operator pos:line="502" pos:column="19">.</op:operator><name pos:line="502" pos:column="20">Equal</name></name><argument_list pos:line="502" pos:column="25">(<argument><expr><name pos:line="502" pos:column="26">policies</name></expr></argument>, <argument><expr><name pos:line="502" pos:column="36">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="503" pos:column="13">locatorMock</name><op:operator pos:line="503" pos:column="24">.</op:operator><name pos:line="503" pos:column="25">Verify</name></name><argument_list pos:line="503" pos:column="31">(<argument><expr><lambda><name pos:line="503" pos:column="32">l</name> <op:operator pos:line="503" pos:column="34">=&gt;</op:operator> <call><name><name pos:line="503" pos:column="37">l</name><op:operator pos:line="503" pos:column="38">.</op:operator><name><name pos:line="503" pos:column="39">GetAllInstances</name><argument_list pos:line="503" pos:column="54">&lt;<argument><name pos:line="503" pos:column="55">IRuntimePolicy</name></argument>&gt;</argument_list></name></name><argument_list pos:line="503" pos:column="70">()</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="503" pos:column="74">Times</name><op:operator pos:line="503" pos:column="79">.</op:operator><name pos:line="503" pos:column="80">Once</name></name><argument_list pos:line="503" pos:column="84">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="506" pos:column="9">[<expr><name pos:line="506" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="507" pos:column="9">public</specifier> <name pos:line="507" pos:column="16">void</name></type> <name pos:line="507" pos:column="21">InstantiateSerializationConvertersWithReflectionDiscoverableCollection</name><parameter_list pos:line="507" pos:column="91">()</parameter_list>
        <block pos:line="508" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="509" pos:column="13">var</name></type> <name pos:line="509" pos:column="17">locatorMock</name> <init pos:line="509" pos:column="29">= <expr><op:operator pos:line="509" pos:column="31">new</op:operator> <call><name><name pos:line="509" pos:column="35">Mock</name><argument_list pos:line="509" pos:column="39">&lt;<argument><name pos:line="509" pos:column="40">IServiceLocator</name></argument>&gt;</argument_list></name><argument_list pos:line="509" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="510" pos:column="13">var</name></type> <name pos:line="510" pos:column="17">factory</name> <init pos:line="510" pos:column="25">= <expr><op:operator pos:line="510" pos:column="27">new</op:operator> <call><name pos:line="510" pos:column="31">Factory</name><argument_list pos:line="510" pos:column="38">(<argument><expr><name><name pos:line="510" pos:column="39">locatorMock</name><op:operator pos:line="510" pos:column="50">.</op:operator><name pos:line="510" pos:column="51">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="511" pos:column="13">ICollection</name><argument_list pos:line="511" pos:column="24">&lt;<argument><name pos:line="511" pos:column="25">ISerializationConverter</name></argument>&gt;</argument_list></name></type> <name pos:line="511" pos:column="50">converters</name> <init pos:line="511" pos:column="61">= <expr><call><name><name pos:line="511" pos:column="63">factory</name><op:operator pos:line="511" pos:column="70">.</op:operator><name pos:line="511" pos:column="71">InstantiateSerializationConverters</name></name><argument_list pos:line="511" pos:column="105">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="513" pos:column="13">Assert</name><op:operator pos:line="513" pos:column="19">.</op:operator><name pos:line="513" pos:column="20">NotNull</name></name><argument_list pos:line="513" pos:column="27">(<argument><expr><name pos:line="513" pos:column="28">converters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="514" pos:column="13">Assert</name><op:operator pos:line="514" pos:column="19">.</op:operator><name pos:line="514" pos:column="20">NotNull</name></name><argument_list pos:line="514" pos:column="27">(<argument><expr><name pos:line="514" pos:column="28">converters</name> <op:operator pos:line="514" pos:column="39">as</op:operator> <name><name pos:line="514" pos:column="42">ReflectionDiscoverableCollection</name><argument_list pos:line="514" pos:column="74">&lt;<argument><name pos:line="514" pos:column="75">ISerializationConverter</name></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="517" pos:column="9">[<expr><name pos:line="517" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="518" pos:column="9">public</specifier> <name pos:line="518" pos:column="16">void</name></type> <name pos:line="518" pos:column="21">LeverageServiceLocatorForSerializationConverters</name><parameter_list pos:line="518" pos:column="69">()</parameter_list>
        <block pos:line="519" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="520" pos:column="13">ICollection</name><argument_list pos:line="520" pos:column="24">&lt;<argument><name pos:line="520" pos:column="25">ISerializationConverter</name></argument>&gt;</argument_list></name></type> <name pos:line="520" pos:column="50">converters</name> <init pos:line="520" pos:column="61">= <expr><op:operator pos:line="520" pos:column="63">new</op:operator> <call><name><name pos:line="520" pos:column="67">List</name><argument_list pos:line="520" pos:column="71">&lt;<argument><name pos:line="520" pos:column="72">ISerializationConverter</name></argument>&gt;</argument_list></name><argument_list pos:line="520" pos:column="96">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="522" pos:column="13">var</name></type> <name pos:line="522" pos:column="17">locatorMock</name> <init pos:line="522" pos:column="29">= <expr><op:operator pos:line="522" pos:column="31">new</op:operator> <call><name><name pos:line="522" pos:column="35">Mock</name><argument_list pos:line="522" pos:column="39">&lt;<argument><name pos:line="522" pos:column="40">IServiceLocator</name></argument>&gt;</argument_list></name><argument_list pos:line="522" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="523" pos:column="13">locatorMock</name><op:operator pos:line="523" pos:column="24">.</op:operator><name pos:line="523" pos:column="25">Setup</name></name><argument_list pos:line="523" pos:column="30">(<argument><expr><lambda><name pos:line="523" pos:column="31">l</name> <op:operator pos:line="523" pos:column="33">=&gt;</op:operator> <call><name><name pos:line="523" pos:column="36">l</name><op:operator pos:line="523" pos:column="37">.</op:operator><name><name pos:line="523" pos:column="38">GetAllInstances</name><argument_list pos:line="523" pos:column="53">&lt;<argument><name pos:line="523" pos:column="54">ISerializationConverter</name></argument>&gt;</argument_list></name></name><argument_list pos:line="523" pos:column="78">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="523" pos:column="81">.</op:operator><call><name pos:line="523" pos:column="82">Returns</name><argument_list pos:line="523" pos:column="89">(<argument><expr><name pos:line="523" pos:column="90">converters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="525" pos:column="13">var</name></type> <name pos:line="525" pos:column="17">factory</name> <init pos:line="525" pos:column="25">= <expr><op:operator pos:line="525" pos:column="27">new</op:operator> <call><name pos:line="525" pos:column="31">Factory</name><argument_list pos:line="525" pos:column="38">(<argument><expr><name><name pos:line="525" pos:column="39">locatorMock</name><op:operator pos:line="525" pos:column="50">.</op:operator><name pos:line="525" pos:column="51">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="527" pos:column="13">var</name></type> <name pos:line="527" pos:column="17">result</name> <init pos:line="527" pos:column="24">= <expr><call><name><name pos:line="527" pos:column="26">factory</name><op:operator pos:line="527" pos:column="33">.</op:operator><name pos:line="527" pos:column="34">InstantiateSerializationConverters</name></name><argument_list pos:line="527" pos:column="68">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="529" pos:column="13">Assert</name><op:operator pos:line="529" pos:column="19">.</op:operator><name pos:line="529" pos:column="20">Equal</name></name><argument_list pos:line="529" pos:column="25">(<argument><expr><name pos:line="529" pos:column="26">converters</name></expr></argument>, <argument><expr><name pos:line="529" pos:column="38">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="530" pos:column="13">locatorMock</name><op:operator pos:line="530" pos:column="24">.</op:operator><name pos:line="530" pos:column="25">Verify</name></name><argument_list pos:line="530" pos:column="31">(<argument><expr><lambda><name pos:line="530" pos:column="32">l</name> <op:operator pos:line="530" pos:column="34">=&gt;</op:operator> <call><name><name pos:line="530" pos:column="37">l</name><op:operator pos:line="530" pos:column="38">.</op:operator><name><name pos:line="530" pos:column="39">GetAllInstances</name><argument_list pos:line="530" pos:column="54">&lt;<argument><name pos:line="530" pos:column="55">ISerializationConverter</name></argument>&gt;</argument_list></name></name><argument_list pos:line="530" pos:column="79">()</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="530" pos:column="83">Times</name><op:operator pos:line="530" pos:column="88">.</op:operator><name pos:line="530" pos:column="89">Once</name></name><argument_list pos:line="530" pos:column="93">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="533" pos:column="9">[<expr><name pos:line="533" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="534" pos:column="9">public</specifier> <name pos:line="534" pos:column="16">void</name></type> <name pos:line="534" pos:column="21">InstantiateDefaultResourceWithConfigurationResource</name><parameter_list pos:line="534" pos:column="72">()</parameter_list>
        <block pos:line="535" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="536" pos:column="13">var</name></type> <name pos:line="536" pos:column="17">locatorMock</name> <init pos:line="536" pos:column="29">= <expr><op:operator pos:line="536" pos:column="31">new</op:operator> <call><name><name pos:line="536" pos:column="35">Mock</name><argument_list pos:line="536" pos:column="39">&lt;<argument><name pos:line="536" pos:column="40">IServiceLocator</name></argument>&gt;</argument_list></name><argument_list pos:line="536" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="538" pos:column="13">var</name></type> <name pos:line="538" pos:column="17">factory</name> <init pos:line="538" pos:column="25">= <expr><op:operator pos:line="538" pos:column="27">new</op:operator> <call><name pos:line="538" pos:column="31">Factory</name><argument_list pos:line="538" pos:column="38">(<argument><expr><name><name pos:line="538" pos:column="39">locatorMock</name><op:operator pos:line="538" pos:column="50">.</op:operator><name pos:line="538" pos:column="51">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="540" pos:column="13">IResource</name></type> <name pos:line="540" pos:column="23">resource</name> <init pos:line="540" pos:column="32">= <expr><call><name><name pos:line="540" pos:column="34">factory</name><op:operator pos:line="540" pos:column="41">.</op:operator><name pos:line="540" pos:column="42">InstantiateDefaultResource</name></name><argument_list pos:line="540" pos:column="68">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="542" pos:column="13">Assert</name><op:operator pos:line="542" pos:column="19">.</op:operator><name pos:line="542" pos:column="20">NotNull</name></name><argument_list pos:line="542" pos:column="27">(<argument><expr><name pos:line="542" pos:column="28">resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="543" pos:column="13">Assert</name><op:operator pos:line="543" pos:column="19">.</op:operator><name pos:line="543" pos:column="20">NotNull</name></name><argument_list pos:line="543" pos:column="27">(<argument><expr><name pos:line="543" pos:column="28">resource</name> <op:operator pos:line="543" pos:column="37">as</op:operator> <name pos:line="543" pos:column="40">ConfigurationResource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="544" pos:column="13">locatorMock</name><op:operator pos:line="544" pos:column="24">.</op:operator><name pos:line="544" pos:column="25">Verify</name></name><argument_list pos:line="544" pos:column="31">(<argument><expr><lambda><name pos:line="544" pos:column="32">l</name> <op:operator pos:line="544" pos:column="34">=&gt;</op:operator> <call><name><name pos:line="544" pos:column="37">l</name><op:operator pos:line="544" pos:column="38">.</op:operator><name><name pos:line="544" pos:column="39">GetInstance</name><argument_list pos:line="544" pos:column="50">&lt;<argument><name pos:line="544" pos:column="51">IResource</name></argument>&gt;</argument_list></name></name><argument_list pos:line="544" pos:column="61">()</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="544" pos:column="65">Times</name><op:operator pos:line="544" pos:column="70">.</op:operator><name pos:line="544" pos:column="71">Once</name></name><argument_list pos:line="544" pos:column="75">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="547" pos:column="9">[<expr><name pos:line="547" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="548" pos:column="9">public</specifier> <name pos:line="548" pos:column="16">void</name></type> <name pos:line="548" pos:column="21">LeverageServiceLocatorForDefaultResource</name><parameter_list pos:line="548" pos:column="61">()</parameter_list>
        <block pos:line="549" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="550" pos:column="13">var</name></type> <name pos:line="550" pos:column="17">resourceMock</name> <init pos:line="550" pos:column="30">= <expr><op:operator pos:line="550" pos:column="32">new</op:operator> <call><name><name pos:line="550" pos:column="36">Mock</name><argument_list pos:line="550" pos:column="40">&lt;<argument><name pos:line="550" pos:column="41">IResource</name></argument>&gt;</argument_list></name><argument_list pos:line="550" pos:column="51">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="551" pos:column="13">var</name></type> <name pos:line="551" pos:column="17">locatorMock</name> <init pos:line="551" pos:column="29">= <expr><op:operator pos:line="551" pos:column="31">new</op:operator> <call><name><name pos:line="551" pos:column="35">Mock</name><argument_list pos:line="551" pos:column="39">&lt;<argument><name pos:line="551" pos:column="40">IServiceLocator</name></argument>&gt;</argument_list></name><argument_list pos:line="551" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="552" pos:column="13">locatorMock</name><op:operator pos:line="552" pos:column="24">.</op:operator><name pos:line="552" pos:column="25">Setup</name></name><argument_list pos:line="552" pos:column="30">(<argument><expr><lambda><name pos:line="552" pos:column="31">l</name> <op:operator pos:line="552" pos:column="33">=&gt;</op:operator> <call><name><name pos:line="552" pos:column="36">l</name><op:operator pos:line="552" pos:column="37">.</op:operator><name><name pos:line="552" pos:column="38">GetInstance</name><argument_list pos:line="552" pos:column="49">&lt;<argument><name pos:line="552" pos:column="50">IResource</name></argument>&gt;</argument_list></name></name><argument_list pos:line="552" pos:column="60">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="552" pos:column="63">.</op:operator><call><name pos:line="552" pos:column="64">Returns</name><argument_list pos:line="552" pos:column="71">(<argument><expr><name><name pos:line="552" pos:column="72">resourceMock</name><op:operator pos:line="552" pos:column="84">.</op:operator><name pos:line="552" pos:column="85">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="554" pos:column="13">var</name></type> <name pos:line="554" pos:column="17">factory</name> <init pos:line="554" pos:column="25">= <expr><op:operator pos:line="554" pos:column="27">new</op:operator> <call><name pos:line="554" pos:column="31">Factory</name><argument_list pos:line="554" pos:column="38">(<argument><expr><name><name pos:line="554" pos:column="39">locatorMock</name><op:operator pos:line="554" pos:column="50">.</op:operator><name pos:line="554" pos:column="51">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="556" pos:column="13">IResource</name></type> <name pos:line="556" pos:column="23">resource</name> <init pos:line="556" pos:column="32">= <expr><call><name><name pos:line="556" pos:column="34">factory</name><op:operator pos:line="556" pos:column="41">.</op:operator><name pos:line="556" pos:column="42">InstantiateDefaultResource</name></name><argument_list pos:line="556" pos:column="68">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="558" pos:column="13">Assert</name><op:operator pos:line="558" pos:column="19">.</op:operator><name pos:line="558" pos:column="20">NotNull</name></name><argument_list pos:line="558" pos:column="27">(<argument><expr><name pos:line="558" pos:column="28">resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="559" pos:column="13">Assert</name><op:operator pos:line="559" pos:column="19">.</op:operator><name pos:line="559" pos:column="20">Equal</name></name><argument_list pos:line="559" pos:column="25">(<argument><expr><name><name pos:line="559" pos:column="26">resourceMock</name><op:operator pos:line="559" pos:column="38">.</op:operator><name pos:line="559" pos:column="39">Object</name></name></expr></argument>, <argument><expr><name pos:line="559" pos:column="47">resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="561" pos:column="13">locatorMock</name><op:operator pos:line="561" pos:column="24">.</op:operator><name pos:line="561" pos:column="25">Verify</name></name><argument_list pos:line="561" pos:column="31">(<argument><expr><lambda><name pos:line="561" pos:column="32">l</name> <op:operator pos:line="561" pos:column="34">=&gt;</op:operator> <call><name><name pos:line="561" pos:column="37">l</name><op:operator pos:line="561" pos:column="38">.</op:operator><name><name pos:line="561" pos:column="39">GetInstance</name><argument_list pos:line="561" pos:column="50">&lt;<argument><name pos:line="561" pos:column="51">IResource</name></argument>&gt;</argument_list></name></name><argument_list pos:line="561" pos:column="61">()</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="561" pos:column="65">Times</name><op:operator pos:line="561" pos:column="70">.</op:operator><name pos:line="561" pos:column="71">Once</name></name><argument_list pos:line="561" pos:column="75">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="564" pos:column="9">[<expr><name pos:line="564" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="565" pos:column="9">public</specifier> <name pos:line="565" pos:column="16">void</name></type> <name pos:line="565" pos:column="21">InstantiateGlimpseConfiguration</name><parameter_list pos:line="565" pos:column="52">()</parameter_list>
        <block pos:line="566" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="567" pos:column="13">var</name></type> <name pos:line="567" pos:column="17">dataStoreMock</name> <init pos:line="567" pos:column="31">= <expr><op:operator pos:line="567" pos:column="33">new</op:operator> <call><name><name pos:line="567" pos:column="37">Mock</name><argument_list pos:line="567" pos:column="41">&lt;<argument><name pos:line="567" pos:column="42">IDataStore</name></argument>&gt;</argument_list></name><argument_list pos:line="567" pos:column="53">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="568" pos:column="13">var</name></type> <name pos:line="568" pos:column="17">providerMock</name> <init pos:line="568" pos:column="30">= <expr><op:operator pos:line="568" pos:column="32">new</op:operator> <call><name><name pos:line="568" pos:column="36">Mock</name><argument_list pos:line="568" pos:column="40">&lt;<argument><name pos:line="568" pos:column="41">IFrameworkProvider</name></argument>&gt;</argument_list></name><argument_list pos:line="568" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="569" pos:column="13">providerMock</name><op:operator pos:line="569" pos:column="25">.</op:operator><name pos:line="569" pos:column="26">Setup</name></name><argument_list pos:line="569" pos:column="31">(<argument><expr><lambda><name pos:line="569" pos:column="32">p</name> <op:operator pos:line="569" pos:column="34">=&gt;</op:operator> <name><name pos:line="569" pos:column="37">p</name><op:operator pos:line="569" pos:column="38">.</op:operator><name pos:line="569" pos:column="39">HttpServerStore</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="569" pos:column="55">.</op:operator><call><name pos:line="569" pos:column="56">Returns</name><argument_list pos:line="569" pos:column="63">(<argument><expr><name><name pos:line="569" pos:column="64">dataStoreMock</name><op:operator pos:line="569" pos:column="77">.</op:operator><name pos:line="569" pos:column="78">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="570" pos:column="13">var</name></type> <name pos:line="570" pos:column="17">endpointConfigMock</name> <init pos:line="570" pos:column="36">= <expr><op:operator pos:line="570" pos:column="38">new</op:operator> <call><name><name pos:line="570" pos:column="42">Mock</name><argument_list pos:line="570" pos:column="46">&lt;<argument><name pos:line="570" pos:column="47">ResourceEndpointConfiguration</name></argument>&gt;</argument_list></name><argument_list pos:line="570" pos:column="77">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="572" pos:column="13">var</name></type> <name pos:line="572" pos:column="17">locatorMock</name> <init pos:line="572" pos:column="29">= <expr><op:operator pos:line="572" pos:column="31">new</op:operator> <call><name><name pos:line="572" pos:column="35">Mock</name><argument_list pos:line="572" pos:column="39">&lt;<argument><name pos:line="572" pos:column="40">IServiceLocator</name></argument>&gt;</argument_list></name><argument_list pos:line="572" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="573" pos:column="13">locatorMock</name><op:operator pos:line="573" pos:column="24">.</op:operator><name pos:line="573" pos:column="25">Setup</name></name><argument_list pos:line="573" pos:column="30">(<argument><expr><lambda><name pos:line="573" pos:column="31">l</name> <op:operator pos:line="573" pos:column="33">=&gt;</op:operator> <call><name><name pos:line="573" pos:column="36">l</name><op:operator pos:line="573" pos:column="37">.</op:operator><name><name pos:line="573" pos:column="38">GetInstance</name><argument_list pos:line="573" pos:column="49">&lt;<argument><name pos:line="573" pos:column="50">IFrameworkProvider</name></argument>&gt;</argument_list></name></name><argument_list pos:line="573" pos:column="69">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="573" pos:column="72">.</op:operator><call><name pos:line="573" pos:column="73">Returns</name><argument_list pos:line="573" pos:column="80">(<argument><expr><name><name pos:line="573" pos:column="81">providerMock</name><op:operator pos:line="573" pos:column="93">.</op:operator><name pos:line="573" pos:column="94">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="574" pos:column="13">locatorMock</name><op:operator pos:line="574" pos:column="24">.</op:operator><name pos:line="574" pos:column="25">Setup</name></name><argument_list pos:line="574" pos:column="30">(<argument><expr><lambda><name pos:line="574" pos:column="31">l</name> <op:operator pos:line="574" pos:column="33">=&gt;</op:operator> <call><name><name pos:line="574" pos:column="36">l</name><op:operator pos:line="574" pos:column="37">.</op:operator><name><name pos:line="574" pos:column="38">GetInstance</name><argument_list pos:line="574" pos:column="49">&lt;<argument><name pos:line="574" pos:column="50">ResourceEndpointConfiguration</name></argument>&gt;</argument_list></name></name><argument_list pos:line="574" pos:column="80">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="574" pos:column="83">.</op:operator><call><name pos:line="574" pos:column="84">Returns</name><argument_list pos:line="574" pos:column="91">(<argument><expr><name><name pos:line="574" pos:column="92">endpointConfigMock</name><op:operator pos:line="574" pos:column="110">.</op:operator><name pos:line="574" pos:column="111">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="576" pos:column="13">var</name></type> <name pos:line="576" pos:column="17">factory</name> <init pos:line="576" pos:column="25">= <expr><op:operator pos:line="576" pos:column="27">new</op:operator> <call><name pos:line="576" pos:column="31">Factory</name><argument_list pos:line="576" pos:column="38">(<argument><expr><name><name pos:line="576" pos:column="39">locatorMock</name><op:operator pos:line="576" pos:column="50">.</op:operator><name pos:line="576" pos:column="51">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="578" pos:column="13">IGlimpseConfiguration</name></type> <name pos:line="578" pos:column="35">resource</name> <init pos:line="578" pos:column="44">= <expr><call><name><name pos:line="578" pos:column="46">factory</name><op:operator pos:line="578" pos:column="53">.</op:operator><name pos:line="578" pos:column="54">InstantiateConfiguration</name></name><argument_list pos:line="578" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="580" pos:column="13">Assert</name><op:operator pos:line="580" pos:column="19">.</op:operator><name pos:line="580" pos:column="20">NotNull</name></name><argument_list pos:line="580" pos:column="27">(<argument><expr><name pos:line="580" pos:column="28">resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="581" pos:column="13">locatorMock</name><op:operator pos:line="581" pos:column="24">.</op:operator><name pos:line="581" pos:column="25">Verify</name></name><argument_list pos:line="581" pos:column="31">(<argument><expr><lambda><name pos:line="581" pos:column="32">l</name> <op:operator pos:line="581" pos:column="34">=&gt;</op:operator> <call><name><name pos:line="581" pos:column="37">l</name><op:operator pos:line="581" pos:column="38">.</op:operator><name><name pos:line="581" pos:column="39">GetInstance</name><argument_list pos:line="581" pos:column="50">&lt;<argument><name pos:line="581" pos:column="51">IResource</name></argument>&gt;</argument_list></name></name><argument_list pos:line="581" pos:column="61">()</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="581" pos:column="65">Times</name><op:operator pos:line="581" pos:column="70">.</op:operator><name pos:line="581" pos:column="71">Once</name></name><argument_list pos:line="581" pos:column="75">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="582" pos:column="13">locatorMock</name><op:operator pos:line="582" pos:column="24">.</op:operator><name pos:line="582" pos:column="25">Verify</name></name><argument_list pos:line="582" pos:column="31">(<argument><expr><lambda><name pos:line="582" pos:column="32">l</name> <op:operator pos:line="582" pos:column="34">=&gt;</op:operator> <call><name><name pos:line="582" pos:column="37">l</name><op:operator pos:line="582" pos:column="38">.</op:operator><name><name pos:line="582" pos:column="39">GetInstance</name><argument_list pos:line="582" pos:column="50">&lt;<argument><name pos:line="582" pos:column="51">IFrameworkProvider</name></argument>&gt;</argument_list></name></name><argument_list pos:line="582" pos:column="70">()</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="582" pos:column="74">Times</name><op:operator pos:line="582" pos:column="79">.</op:operator><name pos:line="582" pos:column="80">Once</name></name><argument_list pos:line="582" pos:column="84">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="583" pos:column="13">locatorMock</name><op:operator pos:line="583" pos:column="24">.</op:operator><name pos:line="583" pos:column="25">Verify</name></name><argument_list pos:line="583" pos:column="31">(<argument><expr><lambda><name pos:line="583" pos:column="32">l</name> <op:operator pos:line="583" pos:column="34">=&gt;</op:operator> <call><name><name pos:line="583" pos:column="37">l</name><op:operator pos:line="583" pos:column="38">.</op:operator><name><name pos:line="583" pos:column="39">GetInstance</name><argument_list pos:line="583" pos:column="50">&lt;<argument><name pos:line="583" pos:column="51">ResourceEndpointConfiguration</name></argument>&gt;</argument_list></name></name><argument_list pos:line="583" pos:column="81">()</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="583" pos:column="85">Times</name><op:operator pos:line="583" pos:column="90">.</op:operator><name pos:line="583" pos:column="91">Once</name></name><argument_list pos:line="583" pos:column="95">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="584" pos:column="13">locatorMock</name><op:operator pos:line="584" pos:column="24">.</op:operator><name pos:line="584" pos:column="25">Verify</name></name><argument_list pos:line="584" pos:column="31">(<argument><expr><lambda><name pos:line="584" pos:column="32">l</name> <op:operator pos:line="584" pos:column="34">=&gt;</op:operator> <call><name><name pos:line="584" pos:column="37">l</name><op:operator pos:line="584" pos:column="38">.</op:operator><name><name pos:line="584" pos:column="39">GetInstance</name><argument_list pos:line="584" pos:column="50">&lt;<argument><name pos:line="584" pos:column="51">ILogger</name></argument>&gt;</argument_list></name></name><argument_list pos:line="584" pos:column="59">()</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="584" pos:column="63">Times</name><op:operator pos:line="584" pos:column="68">.</op:operator><name pos:line="584" pos:column="69">Once</name></name><argument_list pos:line="584" pos:column="73">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="585" pos:column="13">locatorMock</name><op:operator pos:line="585" pos:column="24">.</op:operator><name pos:line="585" pos:column="25">Verify</name></name><argument_list pos:line="585" pos:column="31">(<argument><expr><lambda><name pos:line="585" pos:column="32">l</name> <op:operator pos:line="585" pos:column="34">=&gt;</op:operator> <call><name><name pos:line="585" pos:column="37">l</name><op:operator pos:line="585" pos:column="38">.</op:operator><name><name pos:line="585" pos:column="39">GetInstance</name><argument_list pos:line="585" pos:column="50">&lt;<argument><name pos:line="585" pos:column="51">IHtmlEncoder</name></argument>&gt;</argument_list></name></name><argument_list pos:line="585" pos:column="64">()</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="585" pos:column="68">Times</name><op:operator pos:line="585" pos:column="73">.</op:operator><name pos:line="585" pos:column="74">Once</name></name><argument_list pos:line="585" pos:column="78">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="586" pos:column="13">locatorMock</name><op:operator pos:line="586" pos:column="24">.</op:operator><name pos:line="586" pos:column="25">Verify</name></name><argument_list pos:line="586" pos:column="31">(<argument><expr><lambda><name pos:line="586" pos:column="32">l</name> <op:operator pos:line="586" pos:column="34">=&gt;</op:operator> <call><name><name pos:line="586" pos:column="37">l</name><op:operator pos:line="586" pos:column="38">.</op:operator><name><name pos:line="586" pos:column="39">GetInstance</name><argument_list pos:line="586" pos:column="50">&lt;<argument><name pos:line="586" pos:column="51">IPersistenceStore</name></argument>&gt;</argument_list></name></name><argument_list pos:line="586" pos:column="69">()</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="586" pos:column="73">Times</name><op:operator pos:line="586" pos:column="78">.</op:operator><name pos:line="586" pos:column="79">Once</name></name><argument_list pos:line="586" pos:column="83">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="587" pos:column="13">locatorMock</name><op:operator pos:line="587" pos:column="24">.</op:operator><name pos:line="587" pos:column="25">Verify</name></name><argument_list pos:line="587" pos:column="31">(<argument><expr><lambda><name pos:line="587" pos:column="32">l</name> <op:operator pos:line="587" pos:column="34">=&gt;</op:operator> <call><name><name pos:line="587" pos:column="37">l</name><op:operator pos:line="587" pos:column="38">.</op:operator><name><name pos:line="587" pos:column="39">GetInstance</name><argument_list pos:line="587" pos:column="50">&lt;<argument><name pos:line="587" pos:column="51">ISerializer</name></argument>&gt;</argument_list></name></name><argument_list pos:line="587" pos:column="63">()</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="587" pos:column="67">Times</name><op:operator pos:line="587" pos:column="72">.</op:operator><name pos:line="587" pos:column="73">Once</name></name><argument_list pos:line="587" pos:column="77">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="588" pos:column="13">locatorMock</name><op:operator pos:line="588" pos:column="24">.</op:operator><name pos:line="588" pos:column="25">Verify</name></name><argument_list pos:line="588" pos:column="31">(<argument><expr><lambda><name pos:line="588" pos:column="32">l</name> <op:operator pos:line="588" pos:column="34">=&gt;</op:operator> <call><name><name pos:line="588" pos:column="37">l</name><op:operator pos:line="588" pos:column="38">.</op:operator><name><name pos:line="588" pos:column="39">GetAllInstances</name><argument_list pos:line="588" pos:column="54">&lt;<argument><name pos:line="588" pos:column="55">IClientScript</name></argument>&gt;</argument_list></name></name><argument_list pos:line="588" pos:column="69">()</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="588" pos:column="73">Times</name><op:operator pos:line="588" pos:column="78">.</op:operator><name pos:line="588" pos:column="79">Once</name></name><argument_list pos:line="588" pos:column="83">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="589" pos:column="13">locatorMock</name><op:operator pos:line="589" pos:column="24">.</op:operator><name pos:line="589" pos:column="25">Verify</name></name><argument_list pos:line="589" pos:column="31">(<argument><expr><lambda><name pos:line="589" pos:column="32">l</name> <op:operator pos:line="589" pos:column="34">=&gt;</op:operator> <call><name><name pos:line="589" pos:column="37">l</name><op:operator pos:line="589" pos:column="38">.</op:operator><name><name pos:line="589" pos:column="39">GetAllInstances</name><argument_list pos:line="589" pos:column="54">&lt;<argument><name pos:line="589" pos:column="55">IInspector</name></argument>&gt;</argument_list></name></name><argument_list pos:line="589" pos:column="66">()</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="589" pos:column="70">Times</name><op:operator pos:line="589" pos:column="75">.</op:operator><name pos:line="589" pos:column="76">Once</name></name><argument_list pos:line="589" pos:column="80">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="590" pos:column="13">locatorMock</name><op:operator pos:line="590" pos:column="24">.</op:operator><name pos:line="590" pos:column="25">Verify</name></name><argument_list pos:line="590" pos:column="31">(<argument><expr><lambda><name pos:line="590" pos:column="32">l</name> <op:operator pos:line="590" pos:column="34">=&gt;</op:operator> <call><name><name pos:line="590" pos:column="37">l</name><op:operator pos:line="590" pos:column="38">.</op:operator><name><name pos:line="590" pos:column="39">GetAllInstances</name><argument_list pos:line="590" pos:column="54">&lt;<argument><name pos:line="590" pos:column="55">IResource</name></argument>&gt;</argument_list></name></name><argument_list pos:line="590" pos:column="65">()</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="590" pos:column="69">Times</name><op:operator pos:line="590" pos:column="74">.</op:operator><name pos:line="590" pos:column="75">Once</name></name><argument_list pos:line="590" pos:column="79">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="591" pos:column="13">locatorMock</name><op:operator pos:line="591" pos:column="24">.</op:operator><name pos:line="591" pos:column="25">Verify</name></name><argument_list pos:line="591" pos:column="31">(<argument><expr><lambda><name pos:line="591" pos:column="32">l</name> <op:operator pos:line="591" pos:column="34">=&gt;</op:operator> <call><name><name pos:line="591" pos:column="37">l</name><op:operator pos:line="591" pos:column="38">.</op:operator><name><name pos:line="591" pos:column="39">GetAllInstances</name><argument_list pos:line="591" pos:column="54">&lt;<argument><name pos:line="591" pos:column="55">ITab</name></argument>&gt;</argument_list></name></name><argument_list pos:line="591" pos:column="60">()</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="591" pos:column="64">Times</name><op:operator pos:line="591" pos:column="69">.</op:operator><name pos:line="591" pos:column="70">Once</name></name><argument_list pos:line="591" pos:column="74">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="592" pos:column="13">locatorMock</name><op:operator pos:line="592" pos:column="24">.</op:operator><name pos:line="592" pos:column="25">Verify</name></name><argument_list pos:line="592" pos:column="31">(<argument><expr><lambda><name pos:line="592" pos:column="32">l</name> <op:operator pos:line="592" pos:column="34">=&gt;</op:operator> <call><name><name pos:line="592" pos:column="37">l</name><op:operator pos:line="592" pos:column="38">.</op:operator><name><name pos:line="592" pos:column="39">GetAllInstances</name><argument_list pos:line="592" pos:column="54">&lt;<argument><name pos:line="592" pos:column="55">IRuntimePolicy</name></argument>&gt;</argument_list></name></name><argument_list pos:line="592" pos:column="70">()</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="592" pos:column="74">Times</name><op:operator pos:line="592" pos:column="79">.</op:operator><name pos:line="592" pos:column="80">Once</name></name><argument_list pos:line="592" pos:column="84">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="595" pos:column="9">[<expr><name pos:line="595" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="596" pos:column="9">public</specifier> <name pos:line="596" pos:column="16">void</name></type> <name pos:line="596" pos:column="21">LeverageServiceLocatorForGlimpseConfiguration</name><parameter_list pos:line="596" pos:column="66">()</parameter_list>
        <block pos:line="597" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="598" pos:column="13">var</name></type> <name pos:line="598" pos:column="17">configMock</name> <init pos:line="598" pos:column="28">= <expr><op:operator pos:line="598" pos:column="30">new</op:operator> <call><name><name pos:line="598" pos:column="34">Mock</name><argument_list pos:line="598" pos:column="38">&lt;<argument><name pos:line="598" pos:column="39">IGlimpseConfiguration</name></argument>&gt;</argument_list></name><argument_list pos:line="598" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="599" pos:column="13">var</name></type> <name pos:line="599" pos:column="17">locatorMock</name> <init pos:line="599" pos:column="29">= <expr><op:operator pos:line="599" pos:column="31">new</op:operator> <call><name><name pos:line="599" pos:column="35">Mock</name><argument_list pos:line="599" pos:column="39">&lt;<argument><name pos:line="599" pos:column="40">IServiceLocator</name></argument>&gt;</argument_list></name><argument_list pos:line="599" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="600" pos:column="13">locatorMock</name><op:operator pos:line="600" pos:column="24">.</op:operator><name pos:line="600" pos:column="25">Setup</name></name><argument_list pos:line="600" pos:column="30">(<argument><expr><lambda><name pos:line="600" pos:column="31">l</name> <op:operator pos:line="600" pos:column="33">=&gt;</op:operator> <call><name><name pos:line="600" pos:column="36">l</name><op:operator pos:line="600" pos:column="37">.</op:operator><name><name pos:line="600" pos:column="38">GetInstance</name><argument_list pos:line="600" pos:column="49">&lt;<argument><name pos:line="600" pos:column="50">IGlimpseConfiguration</name></argument>&gt;</argument_list></name></name><argument_list pos:line="600" pos:column="72">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="600" pos:column="75">.</op:operator><call><name pos:line="600" pos:column="76">Returns</name><argument_list pos:line="600" pos:column="83">(<argument><expr><name><name pos:line="600" pos:column="84">configMock</name><op:operator pos:line="600" pos:column="94">.</op:operator><name pos:line="600" pos:column="95">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="602" pos:column="13">var</name></type> <name pos:line="602" pos:column="17">factory</name> <init pos:line="602" pos:column="25">= <expr><op:operator pos:line="602" pos:column="27">new</op:operator> <call><name pos:line="602" pos:column="31">Factory</name><argument_list pos:line="602" pos:column="38">(<argument><expr><name><name pos:line="602" pos:column="39">locatorMock</name><op:operator pos:line="602" pos:column="50">.</op:operator><name pos:line="602" pos:column="51">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="604" pos:column="13">IGlimpseConfiguration</name></type> <name pos:line="604" pos:column="35">config</name> <init pos:line="604" pos:column="42">= <expr><call><name><name pos:line="604" pos:column="44">factory</name><op:operator pos:line="604" pos:column="51">.</op:operator><name pos:line="604" pos:column="52">InstantiateConfiguration</name></name><argument_list pos:line="604" pos:column="76">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="606" pos:column="13">Assert</name><op:operator pos:line="606" pos:column="19">.</op:operator><name pos:line="606" pos:column="20">NotNull</name></name><argument_list pos:line="606" pos:column="27">(<argument><expr><name pos:line="606" pos:column="28">config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="607" pos:column="13">Assert</name><op:operator pos:line="607" pos:column="19">.</op:operator><name pos:line="607" pos:column="20">Equal</name></name><argument_list pos:line="607" pos:column="25">(<argument><expr><name><name pos:line="607" pos:column="26">configMock</name><op:operator pos:line="607" pos:column="36">.</op:operator><name pos:line="607" pos:column="37">Object</name></name></expr></argument>, <argument><expr><name pos:line="607" pos:column="45">config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="609" pos:column="13">locatorMock</name><op:operator pos:line="609" pos:column="24">.</op:operator><name pos:line="609" pos:column="25">Verify</name></name><argument_list pos:line="609" pos:column="31">(<argument><expr><lambda><name pos:line="609" pos:column="32">l</name> <op:operator pos:line="609" pos:column="34">=&gt;</op:operator> <call><name><name pos:line="609" pos:column="37">l</name><op:operator pos:line="609" pos:column="38">.</op:operator><name><name pos:line="609" pos:column="39">GetInstance</name><argument_list pos:line="609" pos:column="50">&lt;<argument><name pos:line="609" pos:column="51">IGlimpseConfiguration</name></argument>&gt;</argument_list></name></name><argument_list pos:line="609" pos:column="73">()</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="609" pos:column="77">Times</name><op:operator pos:line="609" pos:column="82">.</op:operator><name pos:line="609" pos:column="83">Once</name></name><argument_list pos:line="609" pos:column="87">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="612" pos:column="9">[<expr><name pos:line="612" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="613" pos:column="9">public</specifier> <name pos:line="613" pos:column="16">void</name></type> <name pos:line="613" pos:column="21">InstantiateRuntimeReturnsDefaultRuntime</name><parameter_list pos:line="613" pos:column="60">()</parameter_list>
        <block pos:line="614" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="615" pos:column="13">var</name></type> <name pos:line="615" pos:column="17">dataStoreMock</name> <init pos:line="615" pos:column="31">= <expr><op:operator pos:line="615" pos:column="33">new</op:operator> <call><name><name pos:line="615" pos:column="37">Mock</name><argument_list pos:line="615" pos:column="41">&lt;<argument><name pos:line="615" pos:column="42">IDataStore</name></argument>&gt;</argument_list></name><argument_list pos:line="615" pos:column="53">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="616" pos:column="13">var</name></type> <name pos:line="616" pos:column="17">providerMock</name> <init pos:line="616" pos:column="30">= <expr><op:operator pos:line="616" pos:column="32">new</op:operator> <call><name><name pos:line="616" pos:column="36">Mock</name><argument_list pos:line="616" pos:column="40">&lt;<argument><name pos:line="616" pos:column="41">IFrameworkProvider</name></argument>&gt;</argument_list></name><argument_list pos:line="616" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="617" pos:column="13">providerMock</name><op:operator pos:line="617" pos:column="25">.</op:operator><name pos:line="617" pos:column="26">Setup</name></name><argument_list pos:line="617" pos:column="31">(<argument><expr><lambda><name pos:line="617" pos:column="32">p</name> <op:operator pos:line="617" pos:column="34">=&gt;</op:operator> <name><name pos:line="617" pos:column="37">p</name><op:operator pos:line="617" pos:column="38">.</op:operator><name pos:line="617" pos:column="39">HttpServerStore</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="617" pos:column="55">.</op:operator><call><name pos:line="617" pos:column="56">Returns</name><argument_list pos:line="617" pos:column="63">(<argument><expr><name><name pos:line="617" pos:column="64">dataStoreMock</name><op:operator pos:line="617" pos:column="77">.</op:operator><name pos:line="617" pos:column="78">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="618" pos:column="13">var</name></type> <name pos:line="618" pos:column="17">endpointConfigMock</name> <init pos:line="618" pos:column="36">= <expr><op:operator pos:line="618" pos:column="38">new</op:operator> <call><name><name pos:line="618" pos:column="42">Mock</name><argument_list pos:line="618" pos:column="46">&lt;<argument><name pos:line="618" pos:column="47">ResourceEndpointConfiguration</name></argument>&gt;</argument_list></name><argument_list pos:line="618" pos:column="77">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="620" pos:column="13">var</name></type> <name pos:line="620" pos:column="17">locatorMock</name> <init pos:line="620" pos:column="29">= <expr><op:operator pos:line="620" pos:column="31">new</op:operator> <call><name><name pos:line="620" pos:column="35">Mock</name><argument_list pos:line="620" pos:column="39">&lt;<argument><name pos:line="620" pos:column="40">IServiceLocator</name></argument>&gt;</argument_list></name><argument_list pos:line="620" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="621" pos:column="13">locatorMock</name><op:operator pos:line="621" pos:column="24">.</op:operator><name pos:line="621" pos:column="25">Setup</name></name><argument_list pos:line="621" pos:column="30">(<argument><expr><lambda><name pos:line="621" pos:column="31">l</name> <op:operator pos:line="621" pos:column="33">=&gt;</op:operator> <call><name><name pos:line="621" pos:column="36">l</name><op:operator pos:line="621" pos:column="37">.</op:operator><name><name pos:line="621" pos:column="38">GetInstance</name><argument_list pos:line="621" pos:column="49">&lt;<argument><name pos:line="621" pos:column="50">IFrameworkProvider</name></argument>&gt;</argument_list></name></name><argument_list pos:line="621" pos:column="69">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="621" pos:column="72">.</op:operator><call><name pos:line="621" pos:column="73">Returns</name><argument_list pos:line="621" pos:column="80">(<argument><expr><name><name pos:line="621" pos:column="81">providerMock</name><op:operator pos:line="621" pos:column="93">.</op:operator><name pos:line="621" pos:column="94">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="622" pos:column="13">locatorMock</name><op:operator pos:line="622" pos:column="24">.</op:operator><name pos:line="622" pos:column="25">Setup</name></name><argument_list pos:line="622" pos:column="30">(<argument><expr><lambda><name pos:line="622" pos:column="31">l</name> <op:operator pos:line="622" pos:column="33">=&gt;</op:operator> <call><name><name pos:line="622" pos:column="36">l</name><op:operator pos:line="622" pos:column="37">.</op:operator><name><name pos:line="622" pos:column="38">GetInstance</name><argument_list pos:line="622" pos:column="49">&lt;<argument><name pos:line="622" pos:column="50">ResourceEndpointConfiguration</name></argument>&gt;</argument_list></name></name><argument_list pos:line="622" pos:column="80">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="622" pos:column="83">.</op:operator><call><name pos:line="622" pos:column="84">Returns</name><argument_list pos:line="622" pos:column="91">(<argument><expr><name><name pos:line="622" pos:column="92">endpointConfigMock</name><op:operator pos:line="622" pos:column="110">.</op:operator><name pos:line="622" pos:column="111">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="624" pos:column="13">var</name></type> <name pos:line="624" pos:column="17">factory</name> <init pos:line="624" pos:column="25">= <expr><op:operator pos:line="624" pos:column="27">new</op:operator> <call><name pos:line="624" pos:column="31">Factory</name><argument_list pos:line="624" pos:column="38">(<argument><expr><name><name pos:line="624" pos:column="39">locatorMock</name><op:operator pos:line="624" pos:column="50">.</op:operator><name pos:line="624" pos:column="51">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="626" pos:column="13">var</name></type> <name pos:line="626" pos:column="17">runtime</name> <init pos:line="626" pos:column="25">= <expr><call><name><name pos:line="626" pos:column="27">factory</name><op:operator pos:line="626" pos:column="34">.</op:operator><name pos:line="626" pos:column="35">InstantiateRuntime</name></name><argument_list pos:line="626" pos:column="53">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="628" pos:column="13">Assert</name><op:operator pos:line="628" pos:column="19">.</op:operator><name pos:line="628" pos:column="20">NotNull</name></name><argument_list pos:line="628" pos:column="27">(<argument><expr><name pos:line="628" pos:column="28">runtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="629" pos:column="13">Assert</name><op:operator pos:line="629" pos:column="19">.</op:operator><name pos:line="629" pos:column="20">NotNull</name></name><argument_list pos:line="629" pos:column="27">(<argument><expr><name pos:line="629" pos:column="28">runtime</name> <op:operator pos:line="629" pos:column="36">as</op:operator> <name pos:line="629" pos:column="39">GlimpseRuntime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="632" pos:column="9">[<expr><name pos:line="632" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="633" pos:column="9">public</specifier> <name pos:line="633" pos:column="16">void</name></type> <name pos:line="633" pos:column="21">LeverageServiceLocatorForRuntime</name><parameter_list pos:line="633" pos:column="53">()</parameter_list>
        <block pos:line="634" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="635" pos:column="13">var</name></type> <name pos:line="635" pos:column="17">runtimeMock</name> <init pos:line="635" pos:column="29">= <expr><op:operator pos:line="635" pos:column="31">new</op:operator> <call><name><name pos:line="635" pos:column="35">Mock</name><argument_list pos:line="635" pos:column="39">&lt;<argument><name pos:line="635" pos:column="40">IGlimpseRuntime</name></argument>&gt;</argument_list></name><argument_list pos:line="635" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="636" pos:column="13">var</name></type> <name pos:line="636" pos:column="17">locatorMock</name> <init pos:line="636" pos:column="29">= <expr><op:operator pos:line="636" pos:column="31">new</op:operator> <call><name><name pos:line="636" pos:column="35">Mock</name><argument_list pos:line="636" pos:column="39">&lt;<argument><name pos:line="636" pos:column="40">IServiceLocator</name></argument>&gt;</argument_list></name><argument_list pos:line="636" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="637" pos:column="13">locatorMock</name><op:operator pos:line="637" pos:column="24">.</op:operator><name pos:line="637" pos:column="25">Setup</name></name><argument_list pos:line="637" pos:column="30">(<argument><expr><lambda><name pos:line="637" pos:column="31">l</name> <op:operator pos:line="637" pos:column="33">=&gt;</op:operator> <call><name><name pos:line="637" pos:column="36">l</name><op:operator pos:line="637" pos:column="37">.</op:operator><name><name pos:line="637" pos:column="38">GetInstance</name><argument_list pos:line="637" pos:column="49">&lt;<argument><name pos:line="637" pos:column="50">IGlimpseRuntime</name></argument>&gt;</argument_list></name></name><argument_list pos:line="637" pos:column="66">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="637" pos:column="69">.</op:operator><call><name pos:line="637" pos:column="70">Returns</name><argument_list pos:line="637" pos:column="77">(<argument><expr><name><name pos:line="637" pos:column="78">runtimeMock</name><op:operator pos:line="637" pos:column="89">.</op:operator><name pos:line="637" pos:column="90">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="639" pos:column="13">var</name></type> <name pos:line="639" pos:column="17">factory</name> <init pos:line="639" pos:column="25">= <expr><op:operator pos:line="639" pos:column="27">new</op:operator> <call><name pos:line="639" pos:column="31">Factory</name><argument_list pos:line="639" pos:column="38">(<argument><expr><name><name pos:line="639" pos:column="39">locatorMock</name><op:operator pos:line="639" pos:column="50">.</op:operator><name pos:line="639" pos:column="51">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="641" pos:column="13">var</name></type> <name pos:line="641" pos:column="17">result</name> <init pos:line="641" pos:column="24">= <expr><call><name><name pos:line="641" pos:column="26">factory</name><op:operator pos:line="641" pos:column="33">.</op:operator><name pos:line="641" pos:column="34">InstantiateRuntime</name></name><argument_list pos:line="641" pos:column="52">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="643" pos:column="13">Assert</name><op:operator pos:line="643" pos:column="19">.</op:operator><name pos:line="643" pos:column="20">NotNull</name></name><argument_list pos:line="643" pos:column="27">(<argument><expr><name pos:line="643" pos:column="28">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="644" pos:column="13">Assert</name><op:operator pos:line="644" pos:column="19">.</op:operator><name pos:line="644" pos:column="20">Equal</name></name><argument_list pos:line="644" pos:column="25">(<argument><expr><name><name pos:line="644" pos:column="26">runtimeMock</name><op:operator pos:line="644" pos:column="37">.</op:operator><name pos:line="644" pos:column="38">Object</name></name></expr></argument>, <argument><expr><name pos:line="644" pos:column="46">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="647" pos:column="9">[<expr><name pos:line="647" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="648" pos:column="9">public</specifier> <name pos:line="648" pos:column="16">void</name></type> <name pos:line="648" pos:column="21">SetUserServiceLocatorWhenConfigured</name><parameter_list pos:line="648" pos:column="56">()</parameter_list>
        <block pos:line="649" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="650" pos:column="13">var</name></type> <name pos:line="650" pos:column="17">factory</name> <init pos:line="650" pos:column="25">= <expr><op:operator pos:line="650" pos:column="27">new</op:operator> <call><name pos:line="650" pos:column="31">Factory</name><argument_list pos:line="650" pos:column="38">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="652" pos:column="13">Assert</name><op:operator pos:line="652" pos:column="19">.</op:operator><name pos:line="652" pos:column="20">NotNull</name></name><argument_list pos:line="652" pos:column="27">(<argument><expr><name><name pos:line="652" pos:column="28">factory</name><op:operator pos:line="652" pos:column="35">.</op:operator><name pos:line="652" pos:column="36">UserServiceLocator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="653" pos:column="13">Assert</name><op:operator pos:line="653" pos:column="19">.</op:operator><name pos:line="653" pos:column="20">True</name></name><argument_list pos:line="653" pos:column="24">(<argument><expr><call><name><name pos:line="653" pos:column="25">factory</name><op:operator pos:line="653" pos:column="32">.</op:operator><name pos:line="653" pos:column="33">UserServiceLocator</name><op:operator pos:line="653" pos:column="51">.</op:operator><name pos:line="653" pos:column="52">GetType</name></name><argument_list pos:line="653" pos:column="59">()</argument_list></call> <op:operator pos:line="653" pos:column="62">==</op:operator> <call><name pos:line="653" pos:column="65">typeof</name><argument_list pos:line="653" pos:column="71">(<argument><expr><name pos:line="653" pos:column="72">DummyServiceLocator</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="656" pos:column="9">[<expr><name pos:line="656" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="657" pos:column="9">public</specifier> <name pos:line="657" pos:column="16">void</name></type> <name pos:line="657" pos:column="21">LeaveUserServiceLocatorAsBlankWhenNotConfigured</name><parameter_list pos:line="657" pos:column="68">()</parameter_list>
        <block pos:line="658" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="659" pos:column="13">var</name></type> <name pos:line="659" pos:column="17">factory</name> <init pos:line="659" pos:column="25">= <expr><op:operator pos:line="659" pos:column="27">new</op:operator> <call><name pos:line="659" pos:column="31">Factory</name><argument_list pos:line="659" pos:column="38">(<argument><expr><name pos:line="659" pos:column="39">null</name></expr></argument>, <argument><expr><name pos:line="659" pos:column="45">null</name></expr></argument>, <argument><expr><op:operator pos:line="659" pos:column="51">new</op:operator> <call><name pos:line="659" pos:column="55">Section</name><argument_list pos:line="659" pos:column="62">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="661" pos:column="13">Assert</name><op:operator pos:line="661" pos:column="19">.</op:operator><name pos:line="661" pos:column="20">Null</name></name><argument_list pos:line="661" pos:column="24">(<argument><expr><name><name pos:line="661" pos:column="25">factory</name><op:operator pos:line="661" pos:column="32">.</op:operator><name pos:line="661" pos:column="33">UserServiceLocator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="664" pos:column="9">[<expr><name pos:line="664" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="665" pos:column="9">public</specifier> <name pos:line="665" pos:column="16">void</name></type> <name pos:line="665" pos:column="21">InstantiateProxyFactoryReturnsCastleDynamicProxyFactory</name><parameter_list pos:line="665" pos:column="76">()</parameter_list>
        <block pos:line="666" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="667" pos:column="13">var</name></type> <name pos:line="667" pos:column="17">dataStoreMock</name> <init pos:line="667" pos:column="31">= <expr><op:operator pos:line="667" pos:column="33">new</op:operator> <call><name><name pos:line="667" pos:column="37">Mock</name><argument_list pos:line="667" pos:column="41">&lt;<argument><name pos:line="667" pos:column="42">IDataStore</name></argument>&gt;</argument_list></name><argument_list pos:line="667" pos:column="53">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="668" pos:column="13">var</name></type> <name pos:line="668" pos:column="17">providerMock</name> <init pos:line="668" pos:column="30">= <expr><op:operator pos:line="668" pos:column="32">new</op:operator> <call><name><name pos:line="668" pos:column="36">Mock</name><argument_list pos:line="668" pos:column="40">&lt;<argument><name pos:line="668" pos:column="41">IFrameworkProvider</name></argument>&gt;</argument_list></name><argument_list pos:line="668" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="669" pos:column="13">providerMock</name><op:operator pos:line="669" pos:column="25">.</op:operator><name pos:line="669" pos:column="26">Setup</name></name><argument_list pos:line="669" pos:column="31">(<argument><expr><lambda><name pos:line="669" pos:column="32">p</name> <op:operator pos:line="669" pos:column="34">=&gt;</op:operator> <name><name pos:line="669" pos:column="37">p</name><op:operator pos:line="669" pos:column="38">.</op:operator><name pos:line="669" pos:column="39">HttpServerStore</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="669" pos:column="55">.</op:operator><call><name pos:line="669" pos:column="56">Returns</name><argument_list pos:line="669" pos:column="63">(<argument><expr><name><name pos:line="669" pos:column="64">dataStoreMock</name><op:operator pos:line="669" pos:column="77">.</op:operator><name pos:line="669" pos:column="78">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="670" pos:column="13">var</name></type> <name pos:line="670" pos:column="17">endpointConfigMock</name> <init pos:line="670" pos:column="36">= <expr><op:operator pos:line="670" pos:column="38">new</op:operator> <call><name><name pos:line="670" pos:column="42">Mock</name><argument_list pos:line="670" pos:column="46">&lt;<argument><name pos:line="670" pos:column="47">ResourceEndpointConfiguration</name></argument>&gt;</argument_list></name><argument_list pos:line="670" pos:column="77">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="672" pos:column="13">var</name></type> <name pos:line="672" pos:column="17">locatorMock</name> <init pos:line="672" pos:column="29">= <expr><op:operator pos:line="672" pos:column="31">new</op:operator> <call><name><name pos:line="672" pos:column="35">Mock</name><argument_list pos:line="672" pos:column="39">&lt;<argument><name pos:line="672" pos:column="40">IServiceLocator</name></argument>&gt;</argument_list></name><argument_list pos:line="672" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="673" pos:column="13">locatorMock</name><op:operator pos:line="673" pos:column="24">.</op:operator><name pos:line="673" pos:column="25">Setup</name></name><argument_list pos:line="673" pos:column="30">(<argument><expr><lambda><name pos:line="673" pos:column="31">l</name> <op:operator pos:line="673" pos:column="33">=&gt;</op:operator> <call><name><name pos:line="673" pos:column="36">l</name><op:operator pos:line="673" pos:column="37">.</op:operator><name><name pos:line="673" pos:column="38">GetInstance</name><argument_list pos:line="673" pos:column="49">&lt;<argument><name pos:line="673" pos:column="50">IFrameworkProvider</name></argument>&gt;</argument_list></name></name><argument_list pos:line="673" pos:column="69">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="673" pos:column="72">.</op:operator><call><name pos:line="673" pos:column="73">Returns</name><argument_list pos:line="673" pos:column="80">(<argument><expr><name><name pos:line="673" pos:column="81">providerMock</name><op:operator pos:line="673" pos:column="93">.</op:operator><name pos:line="673" pos:column="94">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="674" pos:column="13">locatorMock</name><op:operator pos:line="674" pos:column="24">.</op:operator><name pos:line="674" pos:column="25">Setup</name></name><argument_list pos:line="674" pos:column="30">(<argument><expr><lambda><name pos:line="674" pos:column="31">l</name> <op:operator pos:line="674" pos:column="33">=&gt;</op:operator> <call><name><name pos:line="674" pos:column="36">l</name><op:operator pos:line="674" pos:column="37">.</op:operator><name><name pos:line="674" pos:column="38">GetInstance</name><argument_list pos:line="674" pos:column="49">&lt;<argument><name pos:line="674" pos:column="50">ResourceEndpointConfiguration</name></argument>&gt;</argument_list></name></name><argument_list pos:line="674" pos:column="80">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="674" pos:column="83">.</op:operator><call><name pos:line="674" pos:column="84">Returns</name><argument_list pos:line="674" pos:column="91">(<argument><expr><name><name pos:line="674" pos:column="92">endpointConfigMock</name><op:operator pos:line="674" pos:column="110">.</op:operator><name pos:line="674" pos:column="111">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="676" pos:column="13">var</name></type> <name pos:line="676" pos:column="17">factory</name> <init pos:line="676" pos:column="25">= <expr><op:operator pos:line="676" pos:column="27">new</op:operator> <call><name pos:line="676" pos:column="31">Factory</name><argument_list pos:line="676" pos:column="38">(<argument><expr><name><name pos:line="676" pos:column="39">locatorMock</name><op:operator pos:line="676" pos:column="50">.</op:operator><name pos:line="676" pos:column="51">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="678" pos:column="13">var</name></type> <name pos:line="678" pos:column="17">proxyFactory</name> <init pos:line="678" pos:column="30">= <expr><call><name><name pos:line="678" pos:column="32">factory</name><op:operator pos:line="678" pos:column="39">.</op:operator><name pos:line="678" pos:column="40">InstantiateProxyFactory</name></name><argument_list pos:line="678" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="680" pos:column="13">Assert</name><op:operator pos:line="680" pos:column="19">.</op:operator><name pos:line="680" pos:column="20">NotNull</name></name><argument_list pos:line="680" pos:column="27">(<argument><expr><name pos:line="680" pos:column="28">proxyFactory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="681" pos:column="13">Assert</name><op:operator pos:line="681" pos:column="19">.</op:operator><name pos:line="681" pos:column="20">NotNull</name></name><argument_list pos:line="681" pos:column="27">(<argument><expr><name pos:line="681" pos:column="28">proxyFactory</name> <op:operator pos:line="681" pos:column="41">as</op:operator> <name pos:line="681" pos:column="44">CastleDynamicProxyFactory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="684" pos:column="9">[<expr><name pos:line="684" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="685" pos:column="9">public</specifier> <name pos:line="685" pos:column="16">void</name></type> <name pos:line="685" pos:column="21">LeverageServiceLocatorForProxyFactory</name><parameter_list pos:line="685" pos:column="58">()</parameter_list>
        <block pos:line="686" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="687" pos:column="13">var</name></type> <name pos:line="687" pos:column="17">proxyFactoryMock</name> <init pos:line="687" pos:column="34">= <expr><op:operator pos:line="687" pos:column="36">new</op:operator> <call><name><name pos:line="687" pos:column="40">Mock</name><argument_list pos:line="687" pos:column="44">&lt;<argument><name pos:line="687" pos:column="45">IProxyFactory</name></argument>&gt;</argument_list></name><argument_list pos:line="687" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="688" pos:column="13">var</name></type> <name pos:line="688" pos:column="17">locatorMock</name> <init pos:line="688" pos:column="29">= <expr><op:operator pos:line="688" pos:column="31">new</op:operator> <call><name><name pos:line="688" pos:column="35">Mock</name><argument_list pos:line="688" pos:column="39">&lt;<argument><name pos:line="688" pos:column="40">IServiceLocator</name></argument>&gt;</argument_list></name><argument_list pos:line="688" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="689" pos:column="13">locatorMock</name><op:operator pos:line="689" pos:column="24">.</op:operator><name pos:line="689" pos:column="25">Setup</name></name><argument_list pos:line="689" pos:column="30">(<argument><expr><lambda><name pos:line="689" pos:column="31">l</name> <op:operator pos:line="689" pos:column="33">=&gt;</op:operator> <call><name><name pos:line="689" pos:column="36">l</name><op:operator pos:line="689" pos:column="37">.</op:operator><name><name pos:line="689" pos:column="38">GetInstance</name><argument_list pos:line="689" pos:column="49">&lt;<argument><name pos:line="689" pos:column="50">IProxyFactory</name></argument>&gt;</argument_list></name></name><argument_list pos:line="689" pos:column="64">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="689" pos:column="67">.</op:operator><call><name pos:line="689" pos:column="68">Returns</name><argument_list pos:line="689" pos:column="75">(<argument><expr><name><name pos:line="689" pos:column="76">proxyFactoryMock</name><op:operator pos:line="689" pos:column="92">.</op:operator><name pos:line="689" pos:column="93">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="691" pos:column="13">var</name></type> <name pos:line="691" pos:column="17">factory</name> <init pos:line="691" pos:column="25">= <expr><op:operator pos:line="691" pos:column="27">new</op:operator> <call><name pos:line="691" pos:column="31">Factory</name><argument_list pos:line="691" pos:column="38">(<argument><expr><name><name pos:line="691" pos:column="39">locatorMock</name><op:operator pos:line="691" pos:column="50">.</op:operator><name pos:line="691" pos:column="51">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="693" pos:column="13">var</name></type> <name pos:line="693" pos:column="17">result</name> <init pos:line="693" pos:column="24">= <expr><call><name><name pos:line="693" pos:column="26">factory</name><op:operator pos:line="693" pos:column="33">.</op:operator><name pos:line="693" pos:column="34">InstantiateProxyFactory</name></name><argument_list pos:line="693" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="695" pos:column="13">Assert</name><op:operator pos:line="695" pos:column="19">.</op:operator><name pos:line="695" pos:column="20">NotNull</name></name><argument_list pos:line="695" pos:column="27">(<argument><expr><name pos:line="695" pos:column="28">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="696" pos:column="13">Assert</name><op:operator pos:line="696" pos:column="19">.</op:operator><name pos:line="696" pos:column="20">Equal</name></name><argument_list pos:line="696" pos:column="25">(<argument><expr><name><name pos:line="696" pos:column="26">proxyFactoryMock</name><op:operator pos:line="696" pos:column="42">.</op:operator><name pos:line="696" pos:column="43">Object</name></name></expr></argument>, <argument><expr><name pos:line="696" pos:column="51">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>


        <function><type><attribute pos:line="700" pos:column="9">[<expr><name pos:line="700" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="701" pos:column="9">public</specifier> <name pos:line="701" pos:column="16">void</name></type> <name pos:line="701" pos:column="21">InstantiateMessageBrokerWithDefault</name><parameter_list pos:line="701" pos:column="56">()</parameter_list>
        <block pos:line="702" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="703" pos:column="13">var</name></type> <name pos:line="703" pos:column="17">locatorMock</name> <init pos:line="703" pos:column="29">= <expr><op:operator pos:line="703" pos:column="31">new</op:operator> <call><name><name pos:line="703" pos:column="35">Mock</name><argument_list pos:line="703" pos:column="39">&lt;<argument><name pos:line="703" pos:column="40">IServiceLocator</name></argument>&gt;</argument_list></name><argument_list pos:line="703" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="705" pos:column="13">var</name></type> <name pos:line="705" pos:column="17">factory</name> <init pos:line="705" pos:column="25">= <expr><op:operator pos:line="705" pos:column="27">new</op:operator> <call><name pos:line="705" pos:column="31">Factory</name><argument_list pos:line="705" pos:column="38">(<argument><expr><name><name pos:line="705" pos:column="39">locatorMock</name><op:operator pos:line="705" pos:column="50">.</op:operator><name pos:line="705" pos:column="51">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="707" pos:column="13">IMessageBroker</name></type> <name pos:line="707" pos:column="28">broker</name> <init pos:line="707" pos:column="35">= <expr><call><name><name pos:line="707" pos:column="37">factory</name><op:operator pos:line="707" pos:column="44">.</op:operator><name pos:line="707" pos:column="45">InstantiateMessageBroker</name></name><argument_list pos:line="707" pos:column="69">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="709" pos:column="13">Assert</name><op:operator pos:line="709" pos:column="19">.</op:operator><name pos:line="709" pos:column="20">NotNull</name></name><argument_list pos:line="709" pos:column="27">(<argument><expr><name pos:line="709" pos:column="28">broker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="710" pos:column="13">Assert</name><op:operator pos:line="710" pos:column="19">.</op:operator><name pos:line="710" pos:column="20">NotNull</name></name><argument_list pos:line="710" pos:column="27">(<argument><expr><name pos:line="710" pos:column="28">broker</name> <op:operator pos:line="710" pos:column="35">as</op:operator> <name pos:line="710" pos:column="38">MessageBroker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="711" pos:column="13">locatorMock</name><op:operator pos:line="711" pos:column="24">.</op:operator><name pos:line="711" pos:column="25">Verify</name></name><argument_list pos:line="711" pos:column="31">(<argument><expr><lambda><name pos:line="711" pos:column="32">l</name> <op:operator pos:line="711" pos:column="34">=&gt;</op:operator> <call><name><name pos:line="711" pos:column="37">l</name><op:operator pos:line="711" pos:column="38">.</op:operator><name><name pos:line="711" pos:column="39">GetInstance</name><argument_list pos:line="711" pos:column="50">&lt;<argument><name pos:line="711" pos:column="51">IMessageBroker</name></argument>&gt;</argument_list></name></name><argument_list pos:line="711" pos:column="66">()</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="711" pos:column="70">Times</name><op:operator pos:line="711" pos:column="75">.</op:operator><name pos:line="711" pos:column="76">Once</name></name><argument_list pos:line="711" pos:column="80">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="714" pos:column="9">[<expr><name pos:line="714" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="715" pos:column="9">public</specifier> <name pos:line="715" pos:column="16">void</name></type> <name pos:line="715" pos:column="21">LeverageServiceLocatorForMessageBroker</name><parameter_list pos:line="715" pos:column="59">()</parameter_list>
        <block pos:line="716" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="717" pos:column="13">var</name></type> <name pos:line="717" pos:column="17">brokerMock</name> <init pos:line="717" pos:column="28">= <expr><op:operator pos:line="717" pos:column="30">new</op:operator> <call><name><name pos:line="717" pos:column="34">Mock</name><argument_list pos:line="717" pos:column="38">&lt;<argument><name pos:line="717" pos:column="39">IMessageBroker</name></argument>&gt;</argument_list></name><argument_list pos:line="717" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="718" pos:column="13">var</name></type> <name pos:line="718" pos:column="17">locatorMock</name> <init pos:line="718" pos:column="29">= <expr><op:operator pos:line="718" pos:column="31">new</op:operator> <call><name><name pos:line="718" pos:column="35">Mock</name><argument_list pos:line="718" pos:column="39">&lt;<argument><name pos:line="718" pos:column="40">IServiceLocator</name></argument>&gt;</argument_list></name><argument_list pos:line="718" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="719" pos:column="13">locatorMock</name><op:operator pos:line="719" pos:column="24">.</op:operator><name pos:line="719" pos:column="25">Setup</name></name><argument_list pos:line="719" pos:column="30">(<argument><expr><lambda><name pos:line="719" pos:column="31">l</name> <op:operator pos:line="719" pos:column="33">=&gt;</op:operator> <call><name><name pos:line="719" pos:column="36">l</name><op:operator pos:line="719" pos:column="37">.</op:operator><name><name pos:line="719" pos:column="38">GetInstance</name><argument_list pos:line="719" pos:column="49">&lt;<argument><name pos:line="719" pos:column="50">IMessageBroker</name></argument>&gt;</argument_list></name></name><argument_list pos:line="719" pos:column="65">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="719" pos:column="68">.</op:operator><call><name pos:line="719" pos:column="69">Returns</name><argument_list pos:line="719" pos:column="76">(<argument><expr><name><name pos:line="719" pos:column="77">brokerMock</name><op:operator pos:line="719" pos:column="87">.</op:operator><name pos:line="719" pos:column="88">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="721" pos:column="13">var</name></type> <name pos:line="721" pos:column="17">factory</name> <init pos:line="721" pos:column="25">= <expr><op:operator pos:line="721" pos:column="27">new</op:operator> <call><name pos:line="721" pos:column="31">Factory</name><argument_list pos:line="721" pos:column="38">(<argument><expr><name><name pos:line="721" pos:column="39">locatorMock</name><op:operator pos:line="721" pos:column="50">.</op:operator><name pos:line="721" pos:column="51">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="723" pos:column="13">IMessageBroker</name></type> <name pos:line="723" pos:column="28">broker</name> <init pos:line="723" pos:column="35">= <expr><call><name><name pos:line="723" pos:column="37">factory</name><op:operator pos:line="723" pos:column="44">.</op:operator><name pos:line="723" pos:column="45">InstantiateMessageBroker</name></name><argument_list pos:line="723" pos:column="69">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="725" pos:column="13">Assert</name><op:operator pos:line="725" pos:column="19">.</op:operator><name pos:line="725" pos:column="20">NotNull</name></name><argument_list pos:line="725" pos:column="27">(<argument><expr><name pos:line="725" pos:column="28">broker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="726" pos:column="13">Assert</name><op:operator pos:line="726" pos:column="19">.</op:operator><name pos:line="726" pos:column="20">Equal</name></name><argument_list pos:line="726" pos:column="25">(<argument><expr><name><name pos:line="726" pos:column="26">brokerMock</name><op:operator pos:line="726" pos:column="36">.</op:operator><name pos:line="726" pos:column="37">Object</name></name></expr></argument>, <argument><expr><name pos:line="726" pos:column="45">broker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="728" pos:column="13">locatorMock</name><op:operator pos:line="728" pos:column="24">.</op:operator><name pos:line="728" pos:column="25">Verify</name></name><argument_list pos:line="728" pos:column="31">(<argument><expr><lambda><name pos:line="728" pos:column="32">l</name> <op:operator pos:line="728" pos:column="34">=&gt;</op:operator> <call><name><name pos:line="728" pos:column="37">l</name><op:operator pos:line="728" pos:column="38">.</op:operator><name><name pos:line="728" pos:column="39">GetInstance</name><argument_list pos:line="728" pos:column="50">&lt;<argument><name pos:line="728" pos:column="51">IMessageBroker</name></argument>&gt;</argument_list></name></name><argument_list pos:line="728" pos:column="66">()</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="728" pos:column="70">Times</name><op:operator pos:line="728" pos:column="75">.</op:operator><name pos:line="728" pos:column="76">Once</name></name><argument_list pos:line="728" pos:column="80">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
