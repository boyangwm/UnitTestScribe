<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Core\SerializationConverter\DateTimeConverterShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">Glimpse</name><op:operator pos:line="2" pos:column="14">.</op:operator><name pos:line="2" pos:column="15">Core</name><op:operator pos:line="2" pos:column="19">.</op:operator><name pos:line="2" pos:column="20">SerializationConverter</name></name>;</using>
<using pos:line="3" pos:column="1">using <name pos:line="3" pos:column="7">Xunit</name>;</using>

<namespace pos:line="5" pos:column="1">namespace <name><name pos:line="5" pos:column="11">Glimpse</name><op:operator pos:line="5" pos:column="18">.</op:operator><name pos:line="5" pos:column="19">Test</name><op:operator pos:line="5" pos:column="23">.</op:operator><name pos:line="5" pos:column="24">Core</name><op:operator pos:line="5" pos:column="28">.</op:operator><name pos:line="5" pos:column="29">SerializationConverter</name></name>
<block pos:line="6" pos:column="1">{
    <class><specifier pos:line="7" pos:column="5">public</specifier> class <name pos:line="7" pos:column="18">DateTimeConverterShould</name>
    <block pos:line="8" pos:column="5">{
        <function><type><attribute pos:line="9" pos:column="9">[<expr><name pos:line="9" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="10" pos:column="9">public</specifier> <name pos:line="10" pos:column="16">void</name></type> <name pos:line="10" pos:column="21">HandleNull</name><parameter_list pos:line="10" pos:column="31">()</parameter_list>
        <block pos:line="11" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="12" pos:column="13">var</name></type> <name pos:line="12" pos:column="17">converter</name> <init pos:line="12" pos:column="27">= <expr><op:operator pos:line="12" pos:column="29">new</op:operator> <call><name pos:line="12" pos:column="33">DateTimeConverter</name><argument_list pos:line="12" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="14" pos:column="13">var</name></type> <name pos:line="14" pos:column="17">result</name> <init pos:line="14" pos:column="24">= <expr><call><name><name pos:line="14" pos:column="26">converter</name><op:operator pos:line="14" pos:column="35">.</op:operator><name pos:line="14" pos:column="36">Convert</name></name><argument_list pos:line="14" pos:column="43">(<argument><expr><name pos:line="14" pos:column="44">null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="16" pos:column="13">Assert</name><op:operator pos:line="16" pos:column="19">.</op:operator><name pos:line="16" pos:column="20">Null</name></name><argument_list pos:line="16" pos:column="24">(<argument><expr><name pos:line="16" pos:column="25">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="19" pos:column="9">[<expr><name pos:line="19" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="20" pos:column="9">public</specifier> <name pos:line="20" pos:column="16">void</name></type> <name pos:line="20" pos:column="21">SupportDateTimes</name><parameter_list pos:line="20" pos:column="37">()</parameter_list>
        <block pos:line="21" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="22" pos:column="13">var</name></type> <name pos:line="22" pos:column="17">converter</name> <init pos:line="22" pos:column="27">= <expr><op:operator pos:line="22" pos:column="29">new</op:operator> <call><name pos:line="22" pos:column="33">DateTimeConverter</name><argument_list pos:line="22" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="24" pos:column="13">var</name></type> <name pos:line="24" pos:column="17">result</name> <init pos:line="24" pos:column="24">= <expr><name><name pos:line="24" pos:column="26">converter</name><op:operator pos:line="24" pos:column="35">.</op:operator><name pos:line="24" pos:column="36">SupportedTypes</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="26" pos:column="13">Assert</name><op:operator pos:line="26" pos:column="19">.</op:operator><name pos:line="26" pos:column="20">Contains</name></name><argument_list pos:line="26" pos:column="28">(<argument><expr><call><name pos:line="26" pos:column="29">typeof</name><argument_list pos:line="26" pos:column="35">(<argument><expr><name pos:line="26" pos:column="36">DateTime</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="26" pos:column="47">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="27" pos:column="13">Assert</name><op:operator pos:line="27" pos:column="19">.</op:operator><name pos:line="27" pos:column="20">Contains</name></name><argument_list pos:line="27" pos:column="28">(<argument><expr><call><name pos:line="27" pos:column="29">typeof</name><argument_list pos:line="27" pos:column="35">(<argument><expr><name pos:line="27" pos:column="36">DateTime</name><op:operator pos:line="27" pos:column="44">?</op:operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="27" pos:column="48">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="30" pos:column="9">[<expr><name pos:line="30" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="31" pos:column="9">public</specifier> <name pos:line="31" pos:column="16">void</name></type> <name pos:line="31" pos:column="21">HandleNullableDateTimes</name><parameter_list pos:line="31" pos:column="44">()</parameter_list>
        <block pos:line="32" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="33" pos:column="13">DateTime</name><type:modifier pos:line="33" pos:column="21">?</type:modifier></type> <name pos:line="33" pos:column="23">input</name> <init pos:line="33" pos:column="29">= <expr><op:operator pos:line="33" pos:column="31">new</op:operator> <call><name pos:line="33" pos:column="35">DateTime</name><argument_list pos:line="33" pos:column="43">(<argument><expr><lit:literal type="number" pos:line="33" pos:column="44">2000</lit:literal></expr></argument>,<argument><expr><lit:literal type="number" pos:line="33" pos:column="49">1</lit:literal></expr></argument>,<argument><expr><lit:literal type="number" pos:line="33" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="35" pos:column="13">var</name></type> <name pos:line="35" pos:column="17">converter</name> <init pos:line="35" pos:column="27">= <expr><op:operator pos:line="35" pos:column="29">new</op:operator> <call><name pos:line="35" pos:column="33">DateTimeConverter</name><argument_list pos:line="35" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="37" pos:column="13">var</name></type> <name pos:line="37" pos:column="17">result</name> <init pos:line="37" pos:column="24">= <expr><call><name><name pos:line="37" pos:column="26">converter</name><op:operator pos:line="37" pos:column="35">.</op:operator><name pos:line="37" pos:column="36">Convert</name></name><argument_list pos:line="37" pos:column="43">(<argument><expr><name pos:line="37" pos:column="44">input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="39" pos:column="13">Assert</name><op:operator pos:line="39" pos:column="19">.</op:operator><name pos:line="39" pos:column="20">Equal</name></name><argument_list pos:line="39" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="39" pos:column="26">"01/01/2000 00:00:00"</lit:literal></expr></argument>, <argument><expr><name pos:line="39" pos:column="49">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="42" pos:column="9">[<expr><name pos:line="42" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="43" pos:column="9">public</specifier> <name pos:line="43" pos:column="16">void</name></type> <name pos:line="43" pos:column="21">HandleDateTimes</name><parameter_list pos:line="43" pos:column="36">()</parameter_list>
        <block pos:line="44" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="45" pos:column="13">DateTime</name></type> <name pos:line="45" pos:column="22">input</name> <init pos:line="45" pos:column="28">= <expr><op:operator pos:line="45" pos:column="30">new</op:operator> <call><name pos:line="45" pos:column="34">DateTime</name><argument_list pos:line="45" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="45" pos:column="43">2000</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="45" pos:column="49">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="45" pos:column="52">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="47" pos:column="13">var</name></type> <name pos:line="47" pos:column="17">converter</name> <init pos:line="47" pos:column="27">= <expr><op:operator pos:line="47" pos:column="29">new</op:operator> <call><name pos:line="47" pos:column="33">DateTimeConverter</name><argument_list pos:line="47" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="49" pos:column="13">var</name></type> <name pos:line="49" pos:column="17">result</name> <init pos:line="49" pos:column="24">= <expr><call><name><name pos:line="49" pos:column="26">converter</name><op:operator pos:line="49" pos:column="35">.</op:operator><name pos:line="49" pos:column="36">Convert</name></name><argument_list pos:line="49" pos:column="43">(<argument><expr><name pos:line="49" pos:column="44">input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="51" pos:column="13">Assert</name><op:operator pos:line="51" pos:column="19">.</op:operator><name pos:line="51" pos:column="20">Equal</name></name><argument_list pos:line="51" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="51" pos:column="26">"01/01/2000 00:00:00"</lit:literal></expr></argument>, <argument><expr><name pos:line="51" pos:column="49">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="54" pos:column="9">[<expr><name pos:line="54" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="55" pos:column="9">public</specifier> <name pos:line="55" pos:column="16">void</name></type> <name pos:line="55" pos:column="21">HandleNullableDateTimesWithNoValue</name><parameter_list pos:line="55" pos:column="55">()</parameter_list>
        <block pos:line="56" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="57" pos:column="13">DateTime</name><type:modifier pos:line="57" pos:column="21">?</type:modifier></type> <name pos:line="57" pos:column="23">input</name> <init pos:line="57" pos:column="29">= <expr><name pos:line="57" pos:column="31">null</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="59" pos:column="13">var</name></type> <name pos:line="59" pos:column="17">converter</name> <init pos:line="59" pos:column="27">= <expr><op:operator pos:line="59" pos:column="29">new</op:operator> <call><name pos:line="59" pos:column="33">DateTimeConverter</name><argument_list pos:line="59" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="61" pos:column="13">var</name></type> <name pos:line="61" pos:column="17">result</name> <init pos:line="61" pos:column="24">= <expr><call><name><name pos:line="61" pos:column="26">converter</name><op:operator pos:line="61" pos:column="35">.</op:operator><name pos:line="61" pos:column="36">Convert</name></name><argument_list pos:line="61" pos:column="43">(<argument><expr><name pos:line="61" pos:column="44">input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="63" pos:column="13">Assert</name><op:operator pos:line="63" pos:column="19">.</op:operator><name pos:line="63" pos:column="20">Null</name></name><argument_list pos:line="63" pos:column="24">(<argument><expr><name pos:line="63" pos:column="25">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
