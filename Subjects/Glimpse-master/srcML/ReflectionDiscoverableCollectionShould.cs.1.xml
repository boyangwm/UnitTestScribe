<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Core\Framework\ReflectionDiscoverableCollectionShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Diagnostics</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">CodeAnalysis</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">IO</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Core</name><op:operator pos:line="4" pos:column="19">.</op:operator><name pos:line="4" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Glimpse</name><op:operator pos:line="5" pos:column="14">.</op:operator><name pos:line="5" pos:column="15">Core</name><op:operator pos:line="5" pos:column="19">.</op:operator><name pos:line="5" pos:column="20">Framework</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Glimpse</name><op:operator pos:line="6" pos:column="14">.</op:operator><name pos:line="6" pos:column="15">Test</name><op:operator pos:line="6" pos:column="19">.</op:operator><name pos:line="6" pos:column="20">Core</name><op:operator pos:line="6" pos:column="24">.</op:operator><name pos:line="6" pos:column="25">BadData</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Glimpse</name><op:operator pos:line="7" pos:column="14">.</op:operator><name pos:line="7" pos:column="15">Test</name><op:operator pos:line="7" pos:column="19">.</op:operator><name pos:line="7" pos:column="20">Core</name><op:operator pos:line="7" pos:column="24">.</op:operator><name pos:line="7" pos:column="25">TestDoubles</name></name>;</using>
<using pos:line="8" pos:column="1">using <name pos:line="8" pos:column="7">Moq</name>;</using>
<using pos:line="9" pos:column="1">using <name pos:line="9" pos:column="7">Xunit</name>;</using>

<namespace pos:line="11" pos:column="1">namespace <name><name pos:line="11" pos:column="11">Glimpse</name><op:operator pos:line="11" pos:column="18">.</op:operator><name pos:line="11" pos:column="19">Test</name><op:operator pos:line="11" pos:column="23">.</op:operator><name pos:line="11" pos:column="24">Core</name><op:operator pos:line="11" pos:column="28">.</op:operator><name pos:line="11" pos:column="29">Framework</name></name>
<block pos:line="12" pos:column="1">{
    <class><attribute pos:line="13" pos:column="5">[<expr><call><name pos:line="13" pos:column="6">SuppressMessage</name><argument_list pos:line="13" pos:column="21">(<argument><expr><lit:literal type="string" pos:line="13" pos:column="22">"StyleCop.CSharp.MaintainabilityRules"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="13" pos:column="62">"SA1402:FileMayOnlyContainASingleClass"</lit:literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="103">Justification</name> <op:operator pos:line="13" pos:column="117">=</op:operator> <lit:literal type="string" pos:line="13" pos:column="119">"Reviewed. Class is okay because it is only needed for the tests below."</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    <specifier pos:line="14" pos:column="5">public</specifier> class <name><name pos:line="14" pos:column="18">ReflectionDiscoverableCollectionTester</name><argument_list pos:line="14" pos:column="56">&lt;<argument><name pos:line="14" pos:column="57">T</name></argument>&gt;</argument_list></name> <super pos:line="14" pos:column="60">: <name><name pos:line="14" pos:column="62">ReflectionDiscoverableCollection</name><argument_list pos:line="14" pos:column="94">&lt;<argument><name pos:line="14" pos:column="95">T</name></argument>&gt;</argument_list></name></super>
    <block pos:line="15" pos:column="5">{
        <constructor><specifier pos:line="16" pos:column="9">private</specifier> <name pos:line="16" pos:column="17">ReflectionDiscoverableCollectionTester</name><parameter_list pos:line="16" pos:column="55">(<param><decl><type><name><name pos:line="16" pos:column="56">Mock</name><argument_list pos:line="16" pos:column="60">&lt;<argument><name pos:line="16" pos:column="61">ILogger</name></argument>&gt;</argument_list></name></type> <name pos:line="16" pos:column="70">loggerMock</name></decl></param>)</parameter_list> <member_list pos:line="16" pos:column="82">: <call><name pos:line="16" pos:column="84">base</name><argument_list pos:line="16" pos:column="88">(<argument><expr><name><name pos:line="16" pos:column="89">loggerMock</name><op:operator pos:line="16" pos:column="99">.</op:operator><name pos:line="16" pos:column="100">Object</name></name></expr></argument>)</argument_list></call>
        </member_list><block pos:line="17" pos:column="9">{
            <expr_stmt><expr><name pos:line="18" pos:column="13">LoggerMock</name> <op:operator pos:line="18" pos:column="24">=</op:operator> <name pos:line="18" pos:column="26">loggerMock</name></expr>;</expr_stmt>
        }</block></constructor>

        <decl_stmt><decl><type><specifier pos:line="21" pos:column="9">public</specifier> <name><name pos:line="21" pos:column="16">Mock</name><argument_list pos:line="21" pos:column="20">&lt;<argument><name pos:line="21" pos:column="21">ILogger</name></argument>&gt;</argument_list></name></type> <name pos:line="21" pos:column="30">LoggerMock</name> <block pos:line="21" pos:column="41">{ <function_decl><name pos:line="21" pos:column="43">get</name>;</function_decl> <function_decl><name pos:line="21" pos:column="48">set</name>;</function_decl> }</block></decl></decl_stmt>

        <function><type><specifier pos:line="23" pos:column="9">public</specifier> <specifier pos:line="23" pos:column="16">static</specifier> <name><name pos:line="23" pos:column="23">ReflectionDiscoverableCollectionTester</name><argument_list pos:line="23" pos:column="61">&lt;<argument><name pos:line="23" pos:column="62">T</name></argument>&gt;</argument_list></name></type> <name pos:line="23" pos:column="65">Create</name><parameter_list pos:line="23" pos:column="71">()</parameter_list>
        <block pos:line="24" pos:column="9">{
            <return pos:line="25" pos:column="13">return <expr><op:operator pos:line="25" pos:column="20">new</op:operator> <call><name><name pos:line="25" pos:column="24">ReflectionDiscoverableCollectionTester</name><argument_list pos:line="25" pos:column="62">&lt;<argument><name pos:line="25" pos:column="63">T</name></argument>&gt;</argument_list></name><argument_list pos:line="25" pos:column="65">(<argument><expr><op:operator pos:line="25" pos:column="66">new</op:operator> <call><name><name pos:line="25" pos:column="70">Mock</name><argument_list pos:line="25" pos:column="74">&lt;<argument><name pos:line="25" pos:column="75">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="25" pos:column="83">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>

    <class><attribute pos:line="29" pos:column="5">[<expr><call><name pos:line="29" pos:column="6">SuppressMessage</name><argument_list pos:line="29" pos:column="21">(<argument><expr><lit:literal type="string" pos:line="29" pos:column="22">"StyleCop.CSharp.MaintainabilityRules"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="29" pos:column="62">"SA1402:FileMayOnlyContainASingleClass"</lit:literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="103">Justification</name> <op:operator pos:line="29" pos:column="117">=</op:operator> <lit:literal type="string" pos:line="29" pos:column="119">"Reviewed. Class is okay because it is only needed for the tests below."</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    <specifier pos:line="30" pos:column="5">public</specifier> class <name pos:line="30" pos:column="18">ReflectionDiscoverableCollectionTesterRef</name> <super pos:line="30" pos:column="60">: <name pos:line="30" pos:column="62">MarshalByRefObject</name></super>
    <block pos:line="31" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="32" pos:column="9">private</specifier> <specifier pos:line="32" pos:column="17">readonly</specifier> <name><name pos:line="32" pos:column="26">ReflectionDiscoverableCollectionTester</name><argument_list pos:line="32" pos:column="64">&lt;<argument><name pos:line="32" pos:column="65">IInspector</name></argument>&gt;</argument_list></name></type> <name pos:line="32" pos:column="77">collection</name> <init pos:line="32" pos:column="88">= <expr><call><name><name><name pos:line="32" pos:column="90">ReflectionDiscoverableCollectionTester</name><argument_list pos:line="32" pos:column="128">&lt;<argument><name pos:line="32" pos:column="129">IInspector</name></argument>&gt;</argument_list></name><op:operator pos:line="32" pos:column="140">.</op:operator><name pos:line="32" pos:column="141">Create</name></name><argument_list pos:line="32" pos:column="147">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="34" pos:column="9">public</specifier> <name pos:line="34" pos:column="16">string</name></type> <name pos:line="34" pos:column="23">DiscoveryLocation</name>
        <block pos:line="35" pos:column="9">{
            <function><name pos:line="36" pos:column="13">get</name> <block pos:line="36" pos:column="17">{ <return pos:line="36" pos:column="19">return <expr><name><name pos:line="36" pos:column="26">collection</name><op:operator pos:line="36" pos:column="36">.</op:operator><name pos:line="36" pos:column="37">DiscoveryLocation</name></name></expr>;</return> }</block></function>
            <function><name pos:line="37" pos:column="13">set</name> <block pos:line="37" pos:column="17">{ <expr_stmt><expr><name><name pos:line="37" pos:column="19">collection</name><op:operator pos:line="37" pos:column="29">.</op:operator><name pos:line="37" pos:column="30">DiscoveryLocation</name></name> <op:operator pos:line="37" pos:column="48">=</op:operator> <name pos:line="37" pos:column="50">value</name></expr>;</expr_stmt> }</block></function>
        }</block></decl></decl_stmt>

        <function><type><specifier pos:line="40" pos:column="9">public</specifier> <name pos:line="40" pos:column="16">void</name></type> <name pos:line="40" pos:column="21">Discover</name><parameter_list pos:line="40" pos:column="29">()</parameter_list>
        <block pos:line="41" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="42" pos:column="13">collection</name><op:operator pos:line="42" pos:column="23">.</op:operator><name pos:line="42" pos:column="24">Discover</name></name><argument_list pos:line="42" pos:column="32">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="45" pos:column="9">public</specifier> <name pos:line="45" pos:column="16">void</name></type> <name pos:line="45" pos:column="21">LoggerVerify</name><parameter_list pos:line="45" pos:column="33">()</parameter_list>
        <block pos:line="46" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="47" pos:column="13">collection</name><op:operator pos:line="47" pos:column="23">.</op:operator><name pos:line="47" pos:column="24">LoggerMock</name><op:operator pos:line="47" pos:column="34">.</op:operator><name pos:line="47" pos:column="35">Verify</name></name><argument_list pos:line="47" pos:column="41">(<argument><expr><lambda><name pos:line="47" pos:column="42">l</name> <op:operator pos:line="47" pos:column="44">=&gt;</op:operator> <call><name><name pos:line="47" pos:column="47">l</name><op:operator pos:line="47" pos:column="48">.</op:operator><name pos:line="47" pos:column="49">Error</name></name><argument_list pos:line="47" pos:column="54">(<argument><expr><call><name><name pos:line="47" pos:column="55">It</name><op:operator pos:line="47" pos:column="57">.</op:operator><name><name pos:line="47" pos:column="58">IsAny</name><argument_list pos:line="47" pos:column="63">&lt;<argument><name pos:line="47" pos:column="64">string</name></argument>&gt;</argument_list></name></name><argument_list pos:line="47" pos:column="71">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="47" pos:column="75">It</name><op:operator pos:line="47" pos:column="77">.</op:operator><name><name pos:line="47" pos:column="78">IsAny</name><argument_list pos:line="47" pos:column="83">&lt;<argument><name pos:line="47" pos:column="84">Exception</name></argument>&gt;</argument_list></name></name><argument_list pos:line="47" pos:column="94">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="47" pos:column="98">It</name><op:operator pos:line="47" pos:column="100">.</op:operator><name><name pos:line="47" pos:column="101">IsAny</name><argument_list pos:line="47" pos:column="106">&lt;<argument><name><name pos:line="47" pos:column="107">object</name><index pos:line="47" pos:column="113">[]</index></name></argument>&gt;</argument_list></name></name><argument_list pos:line="47" pos:column="116">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

    <class><specifier pos:line="51" pos:column="5">public</specifier> class <name pos:line="51" pos:column="18">ReflectionDiscoverableCollectionShould</name> <super pos:line="51" pos:column="57">: <name pos:line="51" pos:column="59">IDisposable</name></super>
    <block pos:line="52" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="53" pos:column="9">private</specifier> <name><name pos:line="53" pos:column="17">ReflectionDiscoverableCollectionTester</name><argument_list pos:line="53" pos:column="55">&lt;<argument><name pos:line="53" pos:column="56">IInspector</name></argument>&gt;</argument_list></name></type> <name pos:line="53" pos:column="68">tester</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="55" pos:column="9">public</specifier> <name><name pos:line="55" pos:column="16">ReflectionDiscoverableCollectionTester</name><argument_list pos:line="55" pos:column="54">&lt;<argument><name pos:line="55" pos:column="55">IInspector</name></argument>&gt;</argument_list></name></type> <name pos:line="55" pos:column="67">Collection</name>
        <block pos:line="56" pos:column="9">{
            <function><name pos:line="57" pos:column="13">get</name> <block pos:line="57" pos:column="17">{ <return pos:line="57" pos:column="19">return <expr><name pos:line="57" pos:column="26">tester</name> <op:operator pos:line="57" pos:column="33">??</op:operator> <op:operator pos:line="57" pos:column="36">(</op:operator><name pos:line="57" pos:column="37">tester</name> <op:operator pos:line="57" pos:column="44">=</op:operator> <call><name><name><name pos:line="57" pos:column="46">ReflectionDiscoverableCollectionTester</name><argument_list pos:line="57" pos:column="84">&lt;<argument><name pos:line="57" pos:column="85">IInspector</name></argument>&gt;</argument_list></name><op:operator pos:line="57" pos:column="96">.</op:operator><name pos:line="57" pos:column="97">Create</name></name><argument_list pos:line="57" pos:column="103">()</argument_list></call><op:operator pos:line="57" pos:column="105">)</op:operator></expr>;</return> }</block></function>
            <function><name pos:line="58" pos:column="13">set</name> <block pos:line="58" pos:column="17">{ <expr_stmt><expr><name pos:line="58" pos:column="19">tester</name> <op:operator pos:line="58" pos:column="26">=</op:operator> <name pos:line="58" pos:column="28">value</name></expr>;</expr_stmt> }</block></function>
        }</block></decl></decl_stmt>

        <function><type><specifier pos:line="61" pos:column="9">public</specifier> <name pos:line="61" pos:column="16">void</name></type> <name pos:line="61" pos:column="21">Dispose</name><parameter_list pos:line="61" pos:column="28">()</parameter_list>
        <block pos:line="62" pos:column="9">{
            <expr_stmt><expr><name pos:line="63" pos:column="13">Collection</name> <op:operator pos:line="63" pos:column="24">=</op:operator> <name pos:line="63" pos:column="26">null</name></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="66" pos:column="9">[<expr><name pos:line="66" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="67" pos:column="9">public</specifier> <name pos:line="67" pos:column="16">void</name></type> <name pos:line="67" pos:column="21">Construct</name><parameter_list pos:line="67" pos:column="30">()</parameter_list>
        <block pos:line="68" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="69" pos:column="13">Assert</name><op:operator pos:line="69" pos:column="19">.</op:operator><name pos:line="69" pos:column="20">NotNull</name></name><argument_list pos:line="69" pos:column="27">(<argument><expr><name pos:line="69" pos:column="28">Collection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="70" pos:column="13">Assert</name><op:operator pos:line="70" pos:column="19">.</op:operator><name pos:line="70" pos:column="20">NotNull</name></name><argument_list pos:line="70" pos:column="27">(<argument><expr><name><name pos:line="70" pos:column="28">Collection</name><op:operator pos:line="70" pos:column="38">.</op:operator><name pos:line="70" pos:column="39">Items</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="73" pos:column="9">[<expr><name pos:line="73" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="74" pos:column="9">public</specifier> <name pos:line="74" pos:column="16">void</name></type> <name pos:line="74" pos:column="21">ReturnEnumerator</name><parameter_list pos:line="74" pos:column="37">()</parameter_list>
        <block pos:line="75" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="76" pos:column="13">var</name></type> <name pos:line="76" pos:column="17">enumerator</name> <init pos:line="76" pos:column="28">= <expr><call><name><name pos:line="76" pos:column="30">Collection</name><op:operator pos:line="76" pos:column="40">.</op:operator><name pos:line="76" pos:column="41">GetEnumerator</name></name><argument_list pos:line="76" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="77" pos:column="13">Assert</name><op:operator pos:line="77" pos:column="19">.</op:operator><name pos:line="77" pos:column="20">NotNull</name></name><argument_list pos:line="77" pos:column="27">(<argument><expr><name pos:line="77" pos:column="28">enumerator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="80" pos:column="9">[<expr><name pos:line="80" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="81" pos:column="9">public</specifier> <name pos:line="81" pos:column="16">void</name></type> <name pos:line="81" pos:column="21">AddItems</name><parameter_list pos:line="81" pos:column="29">()</parameter_list>
        <block pos:line="82" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="83" pos:column="13">Assert</name><op:operator pos:line="83" pos:column="19">.</op:operator><name pos:line="83" pos:column="20">Empty</name></name><argument_list pos:line="83" pos:column="25">(<argument><expr><name pos:line="83" pos:column="26">Collection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="84" pos:column="13">Collection</name><op:operator pos:line="84" pos:column="23">.</op:operator><name pos:line="84" pos:column="24">Add</name></name><argument_list pos:line="84" pos:column="27">(<argument><expr><op:operator pos:line="84" pos:column="28">new</op:operator> <call><name pos:line="84" pos:column="32">DummyInspector1</name><argument_list pos:line="84" pos:column="47">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="85" pos:column="13">Assert</name><op:operator pos:line="85" pos:column="19">.</op:operator><name pos:line="85" pos:column="20">Equal</name></name><argument_list pos:line="85" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="85" pos:column="26">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="85" pos:column="29">Collection</name><op:operator pos:line="85" pos:column="39">.</op:operator><name pos:line="85" pos:column="40">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="88" pos:column="9">[<expr><name pos:line="88" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="89" pos:column="9">public</specifier> <name pos:line="89" pos:column="16">void</name></type> <name pos:line="89" pos:column="21">ReturnCount</name><parameter_list pos:line="89" pos:column="32">()</parameter_list>
        <block pos:line="90" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="91" pos:column="13">Assert</name><op:operator pos:line="91" pos:column="19">.</op:operator><name pos:line="91" pos:column="20">Empty</name></name><argument_list pos:line="91" pos:column="25">(<argument><expr><name pos:line="91" pos:column="26">Collection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="94" pos:column="9">[<expr><name pos:line="94" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="95" pos:column="9">public</specifier> <name pos:line="95" pos:column="16">void</name></type> <name pos:line="95" pos:column="21">Clear</name><parameter_list pos:line="95" pos:column="26">()</parameter_list>
        <block pos:line="96" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="97" pos:column="13">Assert</name><op:operator pos:line="97" pos:column="19">.</op:operator><name pos:line="97" pos:column="20">Equal</name></name><argument_list pos:line="97" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="97" pos:column="26">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="97" pos:column="29">Collection</name><op:operator pos:line="97" pos:column="39">.</op:operator><name pos:line="97" pos:column="40">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="98" pos:column="13">Collection</name><op:operator pos:line="98" pos:column="23">.</op:operator><name pos:line="98" pos:column="24">Add</name></name><argument_list pos:line="98" pos:column="27">(<argument><expr><op:operator pos:line="98" pos:column="28">new</op:operator> <call><name pos:line="98" pos:column="32">DummyInspector1</name><argument_list pos:line="98" pos:column="47">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="99" pos:column="13">Assert</name><op:operator pos:line="99" pos:column="19">.</op:operator><name pos:line="99" pos:column="20">Equal</name></name><argument_list pos:line="99" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="99" pos:column="26">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="99" pos:column="29">Collection</name><op:operator pos:line="99" pos:column="39">.</op:operator><name pos:line="99" pos:column="40">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <expr_stmt><expr><call><name><name pos:line="101" pos:column="13">Collection</name><op:operator pos:line="101" pos:column="23">.</op:operator><name pos:line="101" pos:column="24">Clear</name></name><argument_list pos:line="101" pos:column="29">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="102" pos:column="13">Assert</name><op:operator pos:line="102" pos:column="19">.</op:operator><name pos:line="102" pos:column="20">Empty</name></name><argument_list pos:line="102" pos:column="25">(<argument><expr><name pos:line="102" pos:column="26">Collection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="105" pos:column="9">[<expr><name pos:line="105" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="106" pos:column="9">public</specifier> <name pos:line="106" pos:column="16">void</name></type> <name pos:line="106" pos:column="21">Contains</name><parameter_list pos:line="106" pos:column="29">()</parameter_list>
        <block pos:line="107" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="108" pos:column="13">var</name></type> <name pos:line="108" pos:column="17">item</name> <init pos:line="108" pos:column="22">= <expr><op:operator pos:line="108" pos:column="24">new</op:operator> <call><name pos:line="108" pos:column="28">DummyInspector1</name><argument_list pos:line="108" pos:column="43">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="110" pos:column="13">Collection</name><op:operator pos:line="110" pos:column="23">.</op:operator><name pos:line="110" pos:column="24">Add</name></name><argument_list pos:line="110" pos:column="27">(<argument><expr><name pos:line="110" pos:column="28">item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="112" pos:column="13">Assert</name><op:operator pos:line="112" pos:column="19">.</op:operator><name pos:line="112" pos:column="20">True</name></name><argument_list pos:line="112" pos:column="24">(<argument><expr><call><name><name pos:line="112" pos:column="25">Collection</name><op:operator pos:line="112" pos:column="35">.</op:operator><name pos:line="112" pos:column="36">Contains</name></name><argument_list pos:line="112" pos:column="44">(<argument><expr><name pos:line="112" pos:column="45">item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="115" pos:column="9">[<expr><name pos:line="115" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="116" pos:column="9">public</specifier> <name pos:line="116" pos:column="16">void</name></type> <name pos:line="116" pos:column="21">CopyTo</name><parameter_list pos:line="116" pos:column="27">()</parameter_list>
        <block pos:line="117" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="118" pos:column="13">var</name></type> <name pos:line="118" pos:column="17">items</name> <init pos:line="118" pos:column="23">= <expr><op:operator pos:line="118" pos:column="25">new</op:operator> <name><name pos:line="118" pos:column="29">IInspector</name><index pos:line="118" pos:column="39">[]</index></name> <block pos:line="118" pos:column="42">{ <expr><op:operator pos:line="118" pos:column="44">new</op:operator> <call><name pos:line="118" pos:column="48">DummyInspector1</name><argument_list pos:line="118" pos:column="63">()</argument_list></call></expr>, <expr><op:operator pos:line="118" pos:column="67">new</op:operator> <call><name pos:line="118" pos:column="71">DummyInspector2</name><argument_list pos:line="118" pos:column="86">()</argument_list></call></expr> }</block></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="120" pos:column="13">Collection</name><op:operator pos:line="120" pos:column="23">.</op:operator><name pos:line="120" pos:column="24">CopyTo</name></name><argument_list pos:line="120" pos:column="30">(<argument><expr><name pos:line="120" pos:column="31">items</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="120" pos:column="38">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="122" pos:column="13">Assert</name><op:operator pos:line="122" pos:column="19">.</op:operator><name pos:line="122" pos:column="20">Empty</name></name><argument_list pos:line="122" pos:column="25">(<argument><expr><name pos:line="122" pos:column="26">Collection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="125" pos:column="9">[<expr><name pos:line="125" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="126" pos:column="9">public</specifier> <name pos:line="126" pos:column="16">void</name></type> <name pos:line="126" pos:column="21">CopyToWithItems</name><parameter_list pos:line="126" pos:column="36">()</parameter_list>
        <block pos:line="127" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="128" pos:column="13">var</name></type> <name pos:line="128" pos:column="17">collection</name> <init pos:line="128" pos:column="28">= <expr><op:operator pos:line="128" pos:column="30">new</op:operator> <call><name><name pos:line="128" pos:column="34">ReflectionDiscoverableCollection</name><argument_list pos:line="128" pos:column="66">&lt;<argument><name pos:line="128" pos:column="67">DummyObjectContext</name></argument>&gt;</argument_list></name><argument_list pos:line="128" pos:column="86">(<argument><expr><name><name pos:line="128" pos:column="87">Collection</name><op:operator pos:line="128" pos:column="97">.</op:operator><name pos:line="128" pos:column="98">LoggerMock</name><op:operator pos:line="128" pos:column="108">.</op:operator><name pos:line="128" pos:column="109">Object</name></name></expr></argument>)</argument_list></call>
                                 <block pos:line="129" pos:column="34">{
                                     <expr><op:operator pos:line="130" pos:column="38">new</op:operator> <call><name pos:line="130" pos:column="42">DummyObjectContext</name><argument_list pos:line="130" pos:column="60">()</argument_list></call></expr>,
                                     <expr><op:operator pos:line="131" pos:column="38">new</op:operator> <call><name pos:line="131" pos:column="42">DummyObjectContext</name><argument_list pos:line="131" pos:column="60">()</argument_list></call></expr>
                                 }</block></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="134" pos:column="13">var</name></type> <name pos:line="134" pos:column="17">items</name> <init pos:line="134" pos:column="23">= <expr><op:operator pos:line="134" pos:column="25">new</op:operator><index pos:line="134" pos:column="28">[]</index> <block pos:line="134" pos:column="31">{ <expr><op:operator pos:line="134" pos:column="33">new</op:operator> <call><name pos:line="134" pos:column="37">DummyObjectContext</name><argument_list pos:line="134" pos:column="55">()</argument_list></call></expr>, <expr><op:operator pos:line="134" pos:column="59">new</op:operator> <call><name pos:line="134" pos:column="63">DummyObjectContext</name><argument_list pos:line="134" pos:column="81">()</argument_list></call></expr>, <expr><op:operator pos:line="134" pos:column="85">new</op:operator> <call><name pos:line="134" pos:column="89">DummyObjectContext</name><argument_list pos:line="134" pos:column="107">()</argument_list></call></expr> }</block></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="136" pos:column="13">collection</name><op:operator pos:line="136" pos:column="23">.</op:operator><name pos:line="136" pos:column="24">CopyTo</name></name><argument_list pos:line="136" pos:column="30">(<argument><expr><name pos:line="136" pos:column="31">items</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="136" pos:column="38">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="138" pos:column="13">Assert</name><op:operator pos:line="138" pos:column="19">.</op:operator><name pos:line="138" pos:column="20">Equal</name></name><argument_list pos:line="138" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="138" pos:column="26">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="138" pos:column="29">collection</name><op:operator pos:line="138" pos:column="39">.</op:operator><name pos:line="138" pos:column="40">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="141" pos:column="9">[<expr><name pos:line="141" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="142" pos:column="9">public</specifier> <name pos:line="142" pos:column="16">void</name></type> <name pos:line="142" pos:column="21">Remove</name><parameter_list pos:line="142" pos:column="27">()</parameter_list>
        <block pos:line="143" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="144" pos:column="13">var</name></type> <name pos:line="144" pos:column="17">item</name> <init pos:line="144" pos:column="22">= <expr><op:operator pos:line="144" pos:column="24">new</op:operator> <call><name pos:line="144" pos:column="28">DummyObjectContext</name><argument_list pos:line="144" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="145" pos:column="13">var</name></type> <name pos:line="145" pos:column="17">collection</name> <init pos:line="145" pos:column="28">= <expr><op:operator pos:line="145" pos:column="30">new</op:operator> <call><name><name pos:line="145" pos:column="34">ReflectionDiscoverableCollection</name><argument_list pos:line="145" pos:column="66">&lt;<argument><name pos:line="145" pos:column="67">DummyObjectContext</name></argument>&gt;</argument_list></name><argument_list pos:line="145" pos:column="86">(<argument><expr><name><name pos:line="145" pos:column="87">Collection</name><op:operator pos:line="145" pos:column="97">.</op:operator><name pos:line="145" pos:column="98">LoggerMock</name><op:operator pos:line="145" pos:column="108">.</op:operator><name pos:line="145" pos:column="109">Object</name></name></expr></argument>)</argument_list></call>
                                 <block pos:line="146" pos:column="34">{
                                     <expr><name pos:line="147" pos:column="38">item</name></expr>
                                 }</block></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="150" pos:column="13">Assert</name><op:operator pos:line="150" pos:column="19">.</op:operator><name pos:line="150" pos:column="20">Equal</name></name><argument_list pos:line="150" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="150" pos:column="26">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="150" pos:column="29">collection</name><op:operator pos:line="150" pos:column="39">.</op:operator><name pos:line="150" pos:column="40">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="152" pos:column="13">collection</name><op:operator pos:line="152" pos:column="23">.</op:operator><name pos:line="152" pos:column="24">Remove</name></name><argument_list pos:line="152" pos:column="30">(<argument><expr><name pos:line="152" pos:column="31">item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="154" pos:column="13">Assert</name><op:operator pos:line="154" pos:column="19">.</op:operator><name pos:line="154" pos:column="20">Empty</name></name><argument_list pos:line="154" pos:column="25">(<argument><expr><name pos:line="154" pos:column="26">collection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="157" pos:column="9">[<expr><name pos:line="157" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="158" pos:column="9">public</specifier> <name pos:line="158" pos:column="16">void</name></type> <name pos:line="158" pos:column="21">NotBeReadOnly</name><parameter_list pos:line="158" pos:column="34">()</parameter_list>
        <block pos:line="159" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="160" pos:column="13">Assert</name><op:operator pos:line="160" pos:column="19">.</op:operator><name pos:line="160" pos:column="20">False</name></name><argument_list pos:line="160" pos:column="25">(<argument><expr><name><name pos:line="160" pos:column="26">Collection</name><op:operator pos:line="160" pos:column="36">.</op:operator><name pos:line="160" pos:column="37">IsReadOnly</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="163" pos:column="9">[<expr><name pos:line="163" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="164" pos:column="9">public</specifier> <name pos:line="164" pos:column="16">void</name></type> <name pos:line="164" pos:column="21">GetSetAutoDiscover</name><parameter_list pos:line="164" pos:column="39">()</parameter_list>
        <block pos:line="165" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="166" pos:column="13">Assert</name><op:operator pos:line="166" pos:column="19">.</op:operator><name pos:line="166" pos:column="20">True</name></name><argument_list pos:line="166" pos:column="24">(<argument><expr><name><name pos:line="166" pos:column="25">Collection</name><op:operator pos:line="166" pos:column="35">.</op:operator><name pos:line="166" pos:column="36">AutoDiscover</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name pos:line="168" pos:column="13">Collection</name><op:operator pos:line="168" pos:column="23">.</op:operator><name pos:line="168" pos:column="24">AutoDiscover</name></name> <op:operator pos:line="168" pos:column="37">=</op:operator> <lit:literal type="boolean" pos:line="168" pos:column="39">false</lit:literal></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="170" pos:column="13">Assert</name><op:operator pos:line="170" pos:column="19">.</op:operator><name pos:line="170" pos:column="20">False</name></name><argument_list pos:line="170" pos:column="25">(<argument><expr><name><name pos:line="170" pos:column="26">Collection</name><op:operator pos:line="170" pos:column="36">.</op:operator><name pos:line="170" pos:column="37">AutoDiscover</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="173" pos:column="9">[<expr><name pos:line="173" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="174" pos:column="9">public</specifier> <name pos:line="174" pos:column="16">void</name></type> <name pos:line="174" pos:column="21">IgnoreType</name><parameter_list pos:line="174" pos:column="31">()</parameter_list>
        <block pos:line="175" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="176" pos:column="13">Assert</name><op:operator pos:line="176" pos:column="19">.</op:operator><name pos:line="176" pos:column="20">Empty</name></name><argument_list pos:line="176" pos:column="25">(<argument><expr><name><name pos:line="176" pos:column="26">Collection</name><op:operator pos:line="176" pos:column="36">.</op:operator><name pos:line="176" pos:column="37">IgnoredTypes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="178" pos:column="13">Collection</name><op:operator pos:line="178" pos:column="23">.</op:operator><name pos:line="178" pos:column="24">IgnoreType</name></name><argument_list pos:line="178" pos:column="34">(<argument><expr><call><name pos:line="178" pos:column="35">typeof</name><argument_list pos:line="178" pos:column="41">(<argument><expr><name pos:line="178" pos:column="42">string</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="180" pos:column="13">Assert</name><op:operator pos:line="180" pos:column="19">.</op:operator><name pos:line="180" pos:column="20">Equal</name></name><argument_list pos:line="180" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="180" pos:column="26">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="180" pos:column="29">Collection</name><op:operator pos:line="180" pos:column="39">.</op:operator><name pos:line="180" pos:column="40">IgnoredTypes</name><op:operator pos:line="180" pos:column="52">.</op:operator><name pos:line="180" pos:column="53">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="183" pos:column="9">[<expr><name pos:line="183" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="184" pos:column="9">public</specifier> <name pos:line="184" pos:column="16">void</name></type> <name pos:line="184" pos:column="21">Discover</name><parameter_list pos:line="184" pos:column="29">()</parameter_list>
        <block pos:line="185" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="186" pos:column="13">Assert</name><op:operator pos:line="186" pos:column="19">.</op:operator><name pos:line="186" pos:column="20">Empty</name></name><argument_list pos:line="186" pos:column="25">(<argument><expr><name pos:line="186" pos:column="26">Collection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="188" pos:column="13">Collection</name><op:operator pos:line="188" pos:column="23">.</op:operator><name pos:line="188" pos:column="24">Discover</name></name><argument_list pos:line="188" pos:column="32">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="190" pos:column="13">Assert</name><op:operator pos:line="190" pos:column="19">.</op:operator><name pos:line="190" pos:column="20">True</name></name><argument_list pos:line="190" pos:column="24">(<argument><expr><name><name pos:line="190" pos:column="25">Collection</name><op:operator pos:line="190" pos:column="35">.</op:operator><name pos:line="190" pos:column="36">Count</name></name> <op:operator pos:line="190" pos:column="42">&gt;=</op:operator> <lit:literal type="number" pos:line="190" pos:column="45">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="193" pos:column="9">[<expr><name pos:line="193" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="194" pos:column="9">public</specifier> <name pos:line="194" pos:column="16">void</name></type> <name pos:line="194" pos:column="21">DiscoverLogsAssemblyLoadExceptions</name><parameter_list pos:line="194" pos:column="55">()</parameter_list>
        <block pos:line="195" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="196" pos:column="13">var</name></type> <name pos:line="196" pos:column="17">setup</name> <init pos:line="196" pos:column="23">= <expr><op:operator pos:line="196" pos:column="25">new</op:operator> <name pos:line="196" pos:column="29">AppDomainSetup</name> <block pos:line="196" pos:column="44">{ <expr><name pos:line="196" pos:column="46">ApplicationBase</name> <op:operator pos:line="196" pos:column="62">=</op:operator> <name><name pos:line="196" pos:column="64">AppDomain</name><op:operator pos:line="196" pos:column="73">.</op:operator><name pos:line="196" pos:column="74">CurrentDomain</name><op:operator pos:line="196" pos:column="87">.</op:operator><name pos:line="196" pos:column="88">BaseDirectory</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="197" pos:column="13">var</name></type> <name pos:line="197" pos:column="17">domain</name> <init pos:line="197" pos:column="24">= <expr><call><name><name pos:line="197" pos:column="26">AppDomain</name><op:operator pos:line="197" pos:column="35">.</op:operator><name pos:line="197" pos:column="36">CreateDomain</name></name><argument_list pos:line="197" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="197" pos:column="49">"TestAppDomain"</lit:literal></expr></argument>, <argument><expr><name pos:line="197" pos:column="66">null</name></expr></argument>, <argument><expr><name pos:line="197" pos:column="72">setup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <decl_stmt><decl><type><name pos:line="199" pos:column="13">var</name></type> <name pos:line="199" pos:column="17">refType</name> <init pos:line="199" pos:column="25">= <expr><call><name pos:line="199" pos:column="27">typeof</name><argument_list pos:line="199" pos:column="33">(<argument><expr><name pos:line="199" pos:column="34">ReflectionDiscoverableCollectionTesterRef</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="200" pos:column="13">var</name></type> <name pos:line="200" pos:column="17">collection</name> <init pos:line="200" pos:column="28">= <expr><call><name><name pos:line="200" pos:column="30">domain</name><op:operator pos:line="200" pos:column="36">.</op:operator><name pos:line="200" pos:column="37">CreateInstanceAndUnwrap</name></name><argument_list pos:line="200" pos:column="60">(<argument><expr><name><name pos:line="200" pos:column="61">refType</name><op:operator pos:line="200" pos:column="68">.</op:operator><name pos:line="200" pos:column="69">Assembly</name><op:operator pos:line="200" pos:column="77">.</op:operator><name pos:line="200" pos:column="78">FullName</name></name></expr></argument>, <argument><expr><name><name pos:line="200" pos:column="88">refType</name><op:operator pos:line="200" pos:column="95">.</op:operator><name pos:line="200" pos:column="96">FullName</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="200" pos:column="106">as</op:operator> <name pos:line="200" pos:column="109">ReflectionDiscoverableCollectionTesterRef</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name><name pos:line="202" pos:column="13">collection</name><op:operator pos:line="202" pos:column="23">.</op:operator><name pos:line="202" pos:column="24">DiscoveryLocation</name></name> <op:operator pos:line="202" pos:column="42">=</op:operator> <lit:literal type="string" pos:line="202" pos:column="44">"../../BadData/"</lit:literal></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="204" pos:column="13">collection</name><op:operator pos:line="204" pos:column="23">.</op:operator><name pos:line="204" pos:column="24">Discover</name></name><argument_list pos:line="204" pos:column="32">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="206" pos:column="13">collection</name><op:operator pos:line="206" pos:column="23">.</op:operator><name pos:line="206" pos:column="24">LoggerVerify</name></name><argument_list pos:line="206" pos:column="36">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="208" pos:column="13">AppDomain</name><op:operator pos:line="208" pos:column="22">.</op:operator><name pos:line="208" pos:column="23">Unload</name></name><argument_list pos:line="208" pos:column="29">(<argument><expr><name pos:line="208" pos:column="30">domain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="211" pos:column="9">[<expr><name pos:line="211" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="212" pos:column="9">public</specifier> <name pos:line="212" pos:column="16">void</name></type> <name pos:line="212" pos:column="21">UseBasePathInNonShadowedAppDomains</name><parameter_list pos:line="212" pos:column="55">()</parameter_list> 
        <block pos:line="213" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="214" pos:column="13">var</name></type> <name pos:line="214" pos:column="17">setup</name> <init pos:line="214" pos:column="23">= <expr><op:operator pos:line="214" pos:column="25">new</op:operator> <name pos:line="214" pos:column="29">AppDomainSetup</name> <block pos:line="214" pos:column="44">{ <expr><name pos:line="214" pos:column="46">ApplicationBase</name> <op:operator pos:line="214" pos:column="62">=</op:operator> <name><name pos:line="214" pos:column="64">AppDomain</name><op:operator pos:line="214" pos:column="73">.</op:operator><name pos:line="214" pos:column="74">CurrentDomain</name><op:operator pos:line="214" pos:column="87">.</op:operator><name pos:line="214" pos:column="88">BaseDirectory</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="216" pos:column="13">var</name></type> <name pos:line="216" pos:column="17">domain</name> <init pos:line="216" pos:column="24">= <expr><call><name><name pos:line="216" pos:column="26">AppDomain</name><op:operator pos:line="216" pos:column="35">.</op:operator><name pos:line="216" pos:column="36">CreateDomain</name></name><argument_list pos:line="216" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="216" pos:column="49">"TestAppDomain"</lit:literal></expr></argument>, <argument><expr><name pos:line="216" pos:column="66">null</name></expr></argument>, <argument><expr><name pos:line="216" pos:column="72">setup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="218" pos:column="13">var</name></type> <name pos:line="218" pos:column="17">refType</name> <init pos:line="218" pos:column="25">= <expr><call><name pos:line="218" pos:column="27">typeof</name><argument_list pos:line="218" pos:column="33">(<argument><expr><name pos:line="218" pos:column="34">ReflectionDiscoverableCollectionTesterRef</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="219" pos:column="13">var</name></type> <name pos:line="219" pos:column="17">collection</name> <init pos:line="219" pos:column="28">= <expr><call><name><name pos:line="219" pos:column="30">domain</name><op:operator pos:line="219" pos:column="36">.</op:operator><name pos:line="219" pos:column="37">CreateInstanceAndUnwrap</name></name><argument_list pos:line="219" pos:column="60">(<argument><expr><name><name pos:line="219" pos:column="61">refType</name><op:operator pos:line="219" pos:column="68">.</op:operator><name pos:line="219" pos:column="69">Assembly</name><op:operator pos:line="219" pos:column="77">.</op:operator><name pos:line="219" pos:column="78">FullName</name></name></expr></argument>, <argument><expr><name><name pos:line="219" pos:column="88">refType</name><op:operator pos:line="219" pos:column="95">.</op:operator><name pos:line="219" pos:column="96">FullName</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="219" pos:column="106">as</op:operator> <name pos:line="219" pos:column="109">ReflectionDiscoverableCollectionTesterRef</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="221" pos:column="13">Assert</name><op:operator pos:line="221" pos:column="19">.</op:operator><name pos:line="221" pos:column="20">Equal</name></name><argument_list pos:line="221" pos:column="25">(<argument><expr><name><name pos:line="221" pos:column="26">setup</name><op:operator pos:line="221" pos:column="31">.</op:operator><name pos:line="221" pos:column="32">ApplicationBase</name></name></expr></argument>, <argument><expr><name><name pos:line="221" pos:column="49">collection</name><op:operator pos:line="221" pos:column="59">.</op:operator><name pos:line="221" pos:column="60">DiscoveryLocation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="223" pos:column="13">AppDomain</name><op:operator pos:line="223" pos:column="22">.</op:operator><name pos:line="223" pos:column="23">Unload</name></name><argument_list pos:line="223" pos:column="29">(<argument><expr><name pos:line="223" pos:column="30">domain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="226" pos:column="9">[<expr><name pos:line="226" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="227" pos:column="9">public</specifier> <name pos:line="227" pos:column="16">void</name></type> <name pos:line="227" pos:column="21">UseShadowCopyFolderInShadowedAppDomains</name><parameter_list pos:line="227" pos:column="60">()</parameter_list> 
        <block pos:line="228" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="229" pos:column="13">var</name></type> <name pos:line="229" pos:column="17">setup</name> <init pos:line="229" pos:column="23">= <expr><op:operator pos:line="229" pos:column="25">new</op:operator> <name pos:line="229" pos:column="29">AppDomainSetup</name> 
            <block pos:line="230" pos:column="13">{
                <expr><name pos:line="231" pos:column="17">ShadowCopyFiles</name> <op:operator pos:line="231" pos:column="33">=</op:operator> <lit:literal type="string" pos:line="231" pos:column="35">"true"</lit:literal></expr>,
                <expr><name pos:line="232" pos:column="17">ApplicationBase</name> <op:operator pos:line="232" pos:column="33">=</op:operator> <name><name pos:line="232" pos:column="35">AppDomain</name><op:operator pos:line="232" pos:column="44">.</op:operator><name pos:line="232" pos:column="45">CurrentDomain</name><op:operator pos:line="232" pos:column="58">.</op:operator><name pos:line="232" pos:column="59">BaseDirectory</name></name></expr>,
                <expr><name pos:line="233" pos:column="17">ApplicationName</name> <op:operator pos:line="233" pos:column="33">=</op:operator> <call><name><name pos:line="233" pos:column="35">Guid</name><op:operator pos:line="233" pos:column="39">.</op:operator><name pos:line="233" pos:column="40">NewGuid</name></name><argument_list pos:line="233" pos:column="47">()</argument_list></call><op:operator pos:line="233" pos:column="49">.</op:operator><call><name pos:line="233" pos:column="50">ToString</name><argument_list pos:line="233" pos:column="58">()</argument_list></call></expr>,
                <expr><name pos:line="234" pos:column="17">CachePath</name> <op:operator pos:line="234" pos:column="27">=</op:operator> <call><name><name pos:line="234" pos:column="29">Path</name><op:operator pos:line="234" pos:column="33">.</op:operator><name pos:line="234" pos:column="34">GetTempPath</name></name><argument_list pos:line="234" pos:column="45">()</argument_list></call></expr>
            }</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="236" pos:column="13">var</name></type> <name pos:line="236" pos:column="17">domain</name> <init pos:line="236" pos:column="24">= <expr><call><name><name pos:line="236" pos:column="26">AppDomain</name><op:operator pos:line="236" pos:column="35">.</op:operator><name pos:line="236" pos:column="36">CreateDomain</name></name><argument_list pos:line="236" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="236" pos:column="49">"TestAppDomain"</lit:literal></expr></argument>, <argument><expr><name pos:line="236" pos:column="66">null</name></expr></argument>, <argument><expr><name pos:line="236" pos:column="72">setup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="238" pos:column="13">var</name></type> <name pos:line="238" pos:column="17">refType</name> <init pos:line="238" pos:column="25">= <expr><call><name pos:line="238" pos:column="27">typeof</name><argument_list pos:line="238" pos:column="33">(<argument><expr><name pos:line="238" pos:column="34">ReflectionDiscoverableCollectionTesterRef</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="239" pos:column="13">var</name></type> <name pos:line="239" pos:column="17">collection</name> <init pos:line="239" pos:column="28">= <expr><call><name><name pos:line="239" pos:column="30">domain</name><op:operator pos:line="239" pos:column="36">.</op:operator><name pos:line="239" pos:column="37">CreateInstanceAndUnwrap</name></name><argument_list pos:line="239" pos:column="60">(<argument><expr><name><name pos:line="239" pos:column="61">refType</name><op:operator pos:line="239" pos:column="68">.</op:operator><name pos:line="239" pos:column="69">Assembly</name><op:operator pos:line="239" pos:column="77">.</op:operator><name pos:line="239" pos:column="78">FullName</name></name></expr></argument>, <argument><expr><name><name pos:line="239" pos:column="88">refType</name><op:operator pos:line="239" pos:column="95">.</op:operator><name pos:line="239" pos:column="96">FullName</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="239" pos:column="106">as</op:operator> <name pos:line="239" pos:column="109">ReflectionDiscoverableCollectionTesterRef</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="241" pos:column="13">Assert</name><op:operator pos:line="241" pos:column="19">.</op:operator><name pos:line="241" pos:column="20">Equal</name></name><argument_list pos:line="241" pos:column="25">(<argument><expr><call><name><name pos:line="241" pos:column="26">Path</name><op:operator pos:line="241" pos:column="30">.</op:operator><name pos:line="241" pos:column="31">Combine</name></name><argument_list pos:line="241" pos:column="38">(<argument><expr><name><name pos:line="241" pos:column="39">setup</name><op:operator pos:line="241" pos:column="44">.</op:operator><name pos:line="241" pos:column="45">CachePath</name></name></expr></argument>, <argument><expr><name><name pos:line="241" pos:column="56">setup</name><op:operator pos:line="241" pos:column="61">.</op:operator><name pos:line="241" pos:column="62">ApplicationName</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="241" pos:column="80">collection</name><op:operator pos:line="241" pos:column="90">.</op:operator><name pos:line="241" pos:column="91">DiscoveryLocation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="243" pos:column="13">AppDomain</name><op:operator pos:line="243" pos:column="22">.</op:operator><name pos:line="243" pos:column="23">Unload</name></name><argument_list pos:line="243" pos:column="29">(<argument><expr><name pos:line="243" pos:column="30">domain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="246" pos:column="9">[<expr><name pos:line="246" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="247" pos:column="9">public</specifier> <name pos:line="247" pos:column="16">void</name></type> <name pos:line="247" pos:column="21">DiscoverLogsActivatorCreateExceptions</name><parameter_list pos:line="247" pos:column="58">()</parameter_list>
        <block pos:line="248" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="249" pos:column="13">var</name></type> <name pos:line="249" pos:column="17">collection</name> <init pos:line="249" pos:column="28">= <expr><op:operator pos:line="249" pos:column="30">new</op:operator> <call><name><name pos:line="249" pos:column="34">ReflectionDiscoverableCollection</name><argument_list pos:line="249" pos:column="66">&lt;<argument><name pos:line="249" pos:column="67">IBlowup</name></argument>&gt;</argument_list></name><argument_list pos:line="249" pos:column="75">(<argument><expr><name><name pos:line="249" pos:column="76">Collection</name><op:operator pos:line="249" pos:column="86">.</op:operator><name pos:line="249" pos:column="87">LoggerMock</name><op:operator pos:line="249" pos:column="97">.</op:operator><name pos:line="249" pos:column="98">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="250" pos:column="13">collection</name><op:operator pos:line="250" pos:column="23">.</op:operator><name pos:line="250" pos:column="24">Discover</name></name><argument_list pos:line="250" pos:column="32">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="252" pos:column="13">Assert</name><op:operator pos:line="252" pos:column="19">.</op:operator><name pos:line="252" pos:column="20">Equal</name></name><argument_list pos:line="252" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="252" pos:column="26">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="252" pos:column="29">collection</name><op:operator pos:line="252" pos:column="39">.</op:operator><name pos:line="252" pos:column="40">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="253" pos:column="13">Collection</name><op:operator pos:line="253" pos:column="23">.</op:operator><name pos:line="253" pos:column="24">LoggerMock</name><op:operator pos:line="253" pos:column="34">.</op:operator><name pos:line="253" pos:column="35">Verify</name></name><argument_list pos:line="253" pos:column="41">(<argument><expr><lambda><name pos:line="253" pos:column="42">l</name> <op:operator pos:line="253" pos:column="44">=&gt;</op:operator> <call><name><name pos:line="253" pos:column="47">l</name><op:operator pos:line="253" pos:column="48">.</op:operator><name pos:line="253" pos:column="49">Error</name></name><argument_list pos:line="253" pos:column="54">(<argument><expr><call><name><name pos:line="253" pos:column="55">It</name><op:operator pos:line="253" pos:column="57">.</op:operator><name><name pos:line="253" pos:column="58">IsAny</name><argument_list pos:line="253" pos:column="63">&lt;<argument><name pos:line="253" pos:column="64">string</name></argument>&gt;</argument_list></name></name><argument_list pos:line="253" pos:column="71">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="253" pos:column="75">It</name><op:operator pos:line="253" pos:column="77">.</op:operator><name><name pos:line="253" pos:column="78">IsAny</name><argument_list pos:line="253" pos:column="83">&lt;<argument><name pos:line="253" pos:column="84">Exception</name></argument>&gt;</argument_list></name></name><argument_list pos:line="253" pos:column="94">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="253" pos:column="98">It</name><op:operator pos:line="253" pos:column="100">.</op:operator><name><name pos:line="253" pos:column="101">IsAny</name><argument_list pos:line="253" pos:column="106">&lt;<argument><name><name pos:line="253" pos:column="107">object</name><index pos:line="253" pos:column="113">[]</index></name></argument>&gt;</argument_list></name></name><argument_list pos:line="253" pos:column="116">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="256" pos:column="9">[<expr><name pos:line="256" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="257" pos:column="9">public</specifier> <name pos:line="257" pos:column="16">void</name></type> <name pos:line="257" pos:column="21">UserDefaltDiscoveryLocation</name><parameter_list pos:line="257" pos:column="48">()</parameter_list>
        <block pos:line="258" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="259" pos:column="13">Assert</name><op:operator pos:line="259" pos:column="19">.</op:operator><name pos:line="259" pos:column="20">False</name></name><argument_list pos:line="259" pos:column="25">(<argument><expr><call><name><name pos:line="259" pos:column="26">string</name><op:operator pos:line="259" pos:column="32">.</op:operator><name pos:line="259" pos:column="33">IsNullOrWhiteSpace</name></name><argument_list pos:line="259" pos:column="51">(<argument><expr><name><name pos:line="259" pos:column="52">Collection</name><op:operator pos:line="259" pos:column="62">.</op:operator><name pos:line="259" pos:column="63">DiscoveryLocation</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="262" pos:column="9">[<expr><name pos:line="262" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="263" pos:column="9">public</specifier> <name pos:line="263" pos:column="16">void</name></type> <name pos:line="263" pos:column="21">SetDiscoveryLocationWithRootedPath</name><parameter_list pos:line="263" pos:column="55">()</parameter_list>
        <block pos:line="264" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="265" pos:column="13">var</name></type> <name pos:line="265" pos:column="17">path</name> <init pos:line="265" pos:column="22">= <expr><lit:literal type="string" pos:line="265" pos:column="24">@"c:\Windows"</lit:literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="266" pos:column="13">Collection</name><op:operator pos:line="266" pos:column="23">.</op:operator><name pos:line="266" pos:column="24">DiscoveryLocation</name></name> <op:operator pos:line="266" pos:column="42">=</op:operator> <name pos:line="266" pos:column="44">path</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="267" pos:column="13">Assert</name><op:operator pos:line="267" pos:column="19">.</op:operator><name pos:line="267" pos:column="20">Equal</name></name><argument_list pos:line="267" pos:column="25">(<argument><expr><name pos:line="267" pos:column="26">path</name></expr></argument>, <argument><expr><name><name pos:line="267" pos:column="32">Collection</name><op:operator pos:line="267" pos:column="42">.</op:operator><name pos:line="267" pos:column="43">DiscoveryLocation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="270" pos:column="9">[<expr><name pos:line="270" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="271" pos:column="9">public</specifier> <name pos:line="271" pos:column="16">void</name></type> <name pos:line="271" pos:column="21">SetDiscoveryLocationWithNonRootedPath</name><parameter_list pos:line="271" pos:column="58">()</parameter_list>
        <block pos:line="272" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="273" pos:column="13">var</name></type> <name pos:line="273" pos:column="17">path</name> <init pos:line="273" pos:column="22">= <expr><lit:literal type="string" pos:line="273" pos:column="24">@"..\..\"</lit:literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="274" pos:column="13">Collection</name><op:operator pos:line="274" pos:column="23">.</op:operator><name pos:line="274" pos:column="24">DiscoveryLocation</name></name> <op:operator pos:line="274" pos:column="42">=</op:operator> <name pos:line="274" pos:column="44">path</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="275" pos:column="13">Assert</name><op:operator pos:line="275" pos:column="19">.</op:operator><name pos:line="275" pos:column="20">Contains</name></name><argument_list pos:line="275" pos:column="28">(<argument><expr><name pos:line="275" pos:column="29">path</name></expr></argument>, <argument><expr><name><name pos:line="275" pos:column="35">Collection</name><op:operator pos:line="275" pos:column="45">.</op:operator><name pos:line="275" pos:column="46">DiscoveryLocation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="278" pos:column="9">[<expr><name pos:line="278" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="279" pos:column="9">public</specifier> <name pos:line="279" pos:column="16">void</name></type> <name pos:line="279" pos:column="21">ThrowArgumentExceptionWithBadPath</name><parameter_list pos:line="279" pos:column="54">()</parameter_list>
        <block pos:line="280" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="281" pos:column="13">var</name></type> <name pos:line="281" pos:column="17">path</name> <init pos:line="281" pos:column="22">= <expr><lit:literal type="string" pos:line="281" pos:column="24">@"c:\I\dont\exist\"</lit:literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="282" pos:column="13">Assert</name><op:operator pos:line="282" pos:column="19">.</op:operator><name><name pos:line="282" pos:column="20">Throws</name><argument_list pos:line="282" pos:column="26">&lt;<argument><name pos:line="282" pos:column="27">DirectoryNotFoundException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="282" pos:column="54">(<argument><expr><lambda><parameter_list pos:line="282" pos:column="55">()</parameter_list> <op:operator pos:line="282" pos:column="58">=&gt;</op:operator> <name><name pos:line="282" pos:column="61">Collection</name><op:operator pos:line="282" pos:column="71">.</op:operator><name pos:line="282" pos:column="72">DiscoveryLocation</name></name> <op:operator pos:line="282" pos:column="90">=</op:operator> <name pos:line="282" pos:column="92">path</name></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="284" pos:column="13">path</name> <op:operator pos:line="284" pos:column="18">=</op:operator> <lit:literal type="string" pos:line="284" pos:column="20">@"..\neither\do\I\"</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="285" pos:column="13">Assert</name><op:operator pos:line="285" pos:column="19">.</op:operator><name><name pos:line="285" pos:column="20">Throws</name><argument_list pos:line="285" pos:column="26">&lt;<argument><name pos:line="285" pos:column="27">DirectoryNotFoundException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="285" pos:column="54">(<argument><expr><lambda><parameter_list pos:line="285" pos:column="55">()</parameter_list> <op:operator pos:line="285" pos:column="58">=&gt;</op:operator> <name><name pos:line="285" pos:column="61">Collection</name><op:operator pos:line="285" pos:column="71">.</op:operator><name pos:line="285" pos:column="72">DiscoveryLocation</name></name> <op:operator pos:line="285" pos:column="90">=</op:operator> <name pos:line="285" pos:column="92">path</name></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
