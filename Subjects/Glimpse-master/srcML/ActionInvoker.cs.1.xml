<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Mvc\AlternateType\ActionInvoker.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Reflection</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Web</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">Mvc</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Glimpse</name><op:operator pos:line="6" pos:column="14">.</op:operator><name pos:line="6" pos:column="15">Core</name><op:operator pos:line="6" pos:column="19">.</op:operator><name pos:line="6" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Glimpse</name><op:operator pos:line="7" pos:column="14">.</op:operator><name pos:line="7" pos:column="15">Core</name><op:operator pos:line="7" pos:column="19">.</op:operator><name pos:line="7" pos:column="20">Message</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Glimpse</name><op:operator pos:line="8" pos:column="14">.</op:operator><name pos:line="8" pos:column="15">Mvc</name><op:operator pos:line="8" pos:column="18">.</op:operator><name pos:line="8" pos:column="19">Message</name></name>;</using>

<namespace pos:line="10" pos:column="1">namespace <name><name pos:line="10" pos:column="11">Glimpse</name><op:operator pos:line="10" pos:column="18">.</op:operator><name pos:line="10" pos:column="19">Mvc</name><op:operator pos:line="10" pos:column="22">.</op:operator><name pos:line="10" pos:column="23">AlternateType</name></name>
<block pos:line="11" pos:column="1">{
    <class><specifier pos:line="12" pos:column="5">public</specifier> class <name pos:line="12" pos:column="18">ActionInvoker</name> <super pos:line="12" pos:column="32">: <name><name pos:line="12" pos:column="34">AlternateType</name><argument_list pos:line="12" pos:column="47">&lt;<argument><name pos:line="12" pos:column="48">IActionInvoker</name></argument>&gt;</argument_list></name></super>
    <block pos:line="13" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="14" pos:column="9">private</specifier> <specifier pos:line="14" pos:column="17">static</specifier> <name pos:line="14" pos:column="24">MethodInfo</name></type> <name pos:line="14" pos:column="35">executedMethod</name> <init pos:line="14" pos:column="50">= <expr><call><name pos:line="14" pos:column="52">typeof</name><argument_list pos:line="14" pos:column="58">(<argument><expr><name pos:line="14" pos:column="59">ActionResult</name></expr></argument>)</argument_list></call><op:operator pos:line="14" pos:column="72">.</op:operator><call><name pos:line="14" pos:column="73">GetMethod</name><argument_list pos:line="14" pos:column="82">(<argument><expr><lit:literal type="string" pos:line="14" pos:column="83">"ExecuteResult"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="15" pos:column="9">private</specifier> <name><name pos:line="15" pos:column="17">IEnumerable</name><argument_list pos:line="15" pos:column="28">&lt;<argument><name pos:line="15" pos:column="29">IAlternateMethod</name></argument>&gt;</argument_list></name></type> <name pos:line="15" pos:column="47">allMethods</name></decl>;</decl_stmt>

        <constructor><specifier pos:line="17" pos:column="9">public</specifier> <name pos:line="17" pos:column="16">ActionInvoker</name><parameter_list pos:line="17" pos:column="29">(<param><decl><type><name pos:line="17" pos:column="30">IProxyFactory</name></type> <name pos:line="17" pos:column="44">proxyFactory</name></decl></param>)</parameter_list> <member_list pos:line="17" pos:column="58">: <call><name pos:line="17" pos:column="60">base</name><argument_list pos:line="17" pos:column="64">(<argument><expr><name pos:line="17" pos:column="65">proxyFactory</name></expr></argument>)</argument_list></call>
        </member_list><block pos:line="18" pos:column="9">{
        }</block></constructor>

        <decl_stmt><decl><type><specifier pos:line="21" pos:column="9">public</specifier> <specifier pos:line="21" pos:column="16">override</specifier> <name><name pos:line="21" pos:column="25">IEnumerable</name><argument_list pos:line="21" pos:column="36">&lt;<argument><name pos:line="21" pos:column="37">IAlternateMethod</name></argument>&gt;</argument_list></name></type> <name pos:line="21" pos:column="55">AllMethods</name>
        <block pos:line="22" pos:column="9">{
            <function><name pos:line="23" pos:column="13">get</name> 
            <block pos:line="24" pos:column="13">{ 
                <return pos:line="25" pos:column="17">return <expr><name pos:line="25" pos:column="24">allMethods</name> <op:operator pos:line="25" pos:column="35">??</op:operator> <op:operator pos:line="25" pos:column="38">(</op:operator><name pos:line="25" pos:column="39">allMethods</name> <op:operator pos:line="25" pos:column="50">=</op:operator> <op:operator pos:line="25" pos:column="52">new</op:operator> <name><name pos:line="25" pos:column="56">List</name><argument_list pos:line="25" pos:column="60">&lt;<argument><name pos:line="25" pos:column="61">IAlternateMethod</name></argument>&gt;</argument_list></name>
                <block pos:line="26" pos:column="17">{
                    <expr><op:operator pos:line="27" pos:column="21">new</op:operator> <call><name><name pos:line="27" pos:column="25">InvokeActionResult</name><argument_list pos:line="27" pos:column="43">&lt;<argument><name pos:line="27" pos:column="44">ControllerActionInvoker</name></argument>&gt;</argument_list></name><argument_list pos:line="27" pos:column="68">()</argument_list></call></expr><op:operator pos:line="27" pos:column="70">,</op:operator>
                    <expr><op:operator pos:line="28" pos:column="21">new</op:operator> <call><name pos:line="28" pos:column="25">InvokeActionMethod</name><argument_list pos:line="28" pos:column="43">()</argument_list></call></expr><op:operator pos:line="28" pos:column="45">,</op:operator>
                    <expr><op:operator pos:line="29" pos:column="21">new</op:operator> <call><name><name pos:line="29" pos:column="25">GetFilters</name><argument_list pos:line="29" pos:column="35">&lt;<argument><name pos:line="29" pos:column="36">ControllerActionInvoker</name></argument>&gt;</argument_list></name><argument_list pos:line="29" pos:column="60">(<argument><expr><op:operator pos:line="29" pos:column="61">new</op:operator> <call><name pos:line="29" pos:column="65">ActionFilter</name><argument_list pos:line="29" pos:column="77">(<argument><expr><name pos:line="29" pos:column="78">ProxyFactory</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="29" pos:column="93">new</op:operator> <call><name pos:line="29" pos:column="97">ResultFilter</name><argument_list pos:line="29" pos:column="109">(<argument><expr><name pos:line="29" pos:column="110">ProxyFactory</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="29" pos:column="125">new</op:operator> <call><name pos:line="29" pos:column="129">AuthorizationFilter</name><argument_list pos:line="29" pos:column="148">(<argument><expr><name pos:line="29" pos:column="149">ProxyFactory</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="29" pos:column="164">new</op:operator> <call><name pos:line="29" pos:column="168">ExceptionFilter</name><argument_list pos:line="29" pos:column="183">(<argument><expr><name pos:line="29" pos:column="184">ProxyFactory</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>
                }</block>)</expr>;</return> 
            }</block></function>
        }</block></decl></decl_stmt>

        <function><type><specifier pos:line="34" pos:column="9">public</specifier> <specifier pos:line="34" pos:column="16">override</specifier> <name pos:line="34" pos:column="25">bool</name></type> <name pos:line="34" pos:column="30">TryCreate</name><parameter_list pos:line="34" pos:column="39">(<param><decl><type><name pos:line="34" pos:column="40">IActionInvoker</name></type> <name pos:line="34" pos:column="55">originalObj</name></decl></param>, <param><decl><type><specifier pos:line="34" pos:column="68">out</specifier> <name pos:line="34" pos:column="72">IActionInvoker</name></type> <name pos:line="34" pos:column="87">newObj</name></decl></param>, <param><decl><type><name><name pos:line="34" pos:column="95">IEnumerable</name><argument_list pos:line="34" pos:column="106">&lt;<argument><name pos:line="34" pos:column="107">object</name></argument>&gt;</argument_list></name></type> <name pos:line="34" pos:column="115">mixins</name></decl></param>, <param><decl><type><name><name pos:line="34" pos:column="123">object</name><index pos:line="34" pos:column="129">[]</index></name></type> <name pos:line="34" pos:column="132">constructorArgs</name></decl></param>)</parameter_list>
        <block pos:line="35" pos:column="9">{
            <if pos:line="36" pos:column="13">if <condition pos:line="36" pos:column="16">(<expr><name pos:line="36" pos:column="17">originalObj</name> <op:operator pos:line="36" pos:column="29">==</op:operator> <name pos:line="36" pos:column="32">null</name></expr>)</condition><then pos:line="36" pos:column="37">
            <block pos:line="37" pos:column="13">{
                <expr_stmt><expr><name pos:line="38" pos:column="17">newObj</name> <op:operator pos:line="38" pos:column="24">=</op:operator> <name pos:line="38" pos:column="26">null</name></expr>;</expr_stmt>
                <return pos:line="39" pos:column="17">return <expr><lit:literal type="boolean" pos:line="39" pos:column="24">false</lit:literal></expr>;</return>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="42" pos:column="13">var</name></type> <name pos:line="42" pos:column="17">originalType</name> <init pos:line="42" pos:column="30">= <expr><call><name><name pos:line="42" pos:column="32">originalObj</name><op:operator pos:line="42" pos:column="43">.</op:operator><name pos:line="42" pos:column="44">GetType</name></name><argument_list pos:line="42" pos:column="51">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if pos:line="44" pos:column="13">if <condition pos:line="44" pos:column="16">(<expr><name pos:line="44" pos:column="17">originalType</name> <op:operator pos:line="44" pos:column="30">==</op:operator> <call><name pos:line="44" pos:column="33">typeof</name><argument_list pos:line="44" pos:column="39">(<argument><expr><name pos:line="44" pos:column="40">ControllerActionInvoker</name></expr></argument>)</argument_list></call> <op:operator pos:line="44" pos:column="65">&amp;&amp;</op:operator> <call><name><name pos:line="44" pos:column="68">ProxyFactory</name><op:operator pos:line="44" pos:column="80">.</op:operator><name pos:line="44" pos:column="81">IsExtendClassEligible</name></name><argument_list pos:line="44" pos:column="102">(<argument><expr><name pos:line="44" pos:column="103">originalType</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="44" pos:column="117">
            <block pos:line="45" pos:column="13">{
                <expr_stmt><expr><name pos:line="46" pos:column="17">newObj</name> <op:operator pos:line="46" pos:column="24">=</op:operator> <call><name><name pos:line="46" pos:column="26">ProxyFactory</name><op:operator pos:line="46" pos:column="38">.</op:operator><name><name pos:line="46" pos:column="39">ExtendClass</name><argument_list pos:line="46" pos:column="50">&lt;<argument><name pos:line="46" pos:column="51">ControllerActionInvoker</name></argument>&gt;</argument_list></name></name><argument_list pos:line="46" pos:column="75">(<argument><expr><name pos:line="46" pos:column="76">AllMethods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="47" pos:column="17">return <expr><lit:literal type="boolean" pos:line="47" pos:column="24">true</lit:literal></expr>;</return>
            }</block></then></if>

            <if pos:line="50" pos:column="13">if <condition pos:line="50" pos:column="16">(<expr><name pos:line="50" pos:column="17">originalObj</name> <op:operator pos:line="50" pos:column="29">is</op:operator> <name pos:line="50" pos:column="32">ControllerActionInvoker</name> <op:operator pos:line="50" pos:column="56">&amp;&amp;</op:operator> <call><name><name pos:line="50" pos:column="59">ProxyFactory</name><op:operator pos:line="50" pos:column="71">.</op:operator><name pos:line="50" pos:column="72">IsWrapClassEligible</name></name><argument_list pos:line="50" pos:column="91">(<argument><expr><name pos:line="50" pos:column="92">originalType</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="50" pos:column="106">
            <block pos:line="51" pos:column="13">{
                <expr_stmt><expr><name pos:line="52" pos:column="17">newObj</name> <op:operator pos:line="52" pos:column="24">=</op:operator> <call><name><name pos:line="52" pos:column="26">ProxyFactory</name><op:operator pos:line="52" pos:column="38">.</op:operator><name pos:line="52" pos:column="39">WrapClass</name></name><argument_list pos:line="52" pos:column="48">(<argument><expr><op:operator pos:line="52" pos:column="49">(</op:operator><name pos:line="52" pos:column="50">ControllerActionInvoker</name><op:operator pos:line="52" pos:column="73">)</op:operator><name pos:line="52" pos:column="74">originalObj</name></expr></argument>, <argument><expr><name pos:line="52" pos:column="87">AllMethods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="53" pos:column="17">return <expr><lit:literal type="boolean" pos:line="53" pos:column="24">true</lit:literal></expr>;</return>
            }</block></then></if>

            <if pos:line="56" pos:column="13">if <condition pos:line="56" pos:column="16">(<expr><call><name><name pos:line="56" pos:column="17">ProxyFactory</name><op:operator pos:line="56" pos:column="29">.</op:operator><name><name pos:line="56" pos:column="30">IsWrapInterfaceEligible</name><argument_list pos:line="56" pos:column="53">&lt;<argument><name pos:line="56" pos:column="54">IActionInvoker</name></argument>&gt;</argument_list></name></name><argument_list pos:line="56" pos:column="69">(<argument><expr><name pos:line="56" pos:column="70">originalType</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="56" pos:column="84">
            <block pos:line="57" pos:column="13">{
                <expr_stmt><expr><name pos:line="58" pos:column="17">newObj</name> <op:operator pos:line="58" pos:column="24">=</op:operator> <call><name><name pos:line="58" pos:column="26">ProxyFactory</name><op:operator pos:line="58" pos:column="38">.</op:operator><name pos:line="58" pos:column="39">WrapInterface</name></name><argument_list pos:line="58" pos:column="52">(<argument><expr><name pos:line="58" pos:column="53">originalObj</name></expr></argument>, <argument><expr><name pos:line="58" pos:column="66">AllMethods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="59" pos:column="17">return <expr><lit:literal type="boolean" pos:line="59" pos:column="24">true</lit:literal></expr>;</return>
            }</block></then></if>

            <expr_stmt><expr><name pos:line="62" pos:column="13">newObj</name> <op:operator pos:line="62" pos:column="20">=</op:operator> <name pos:line="62" pos:column="22">null</name></expr>;</expr_stmt>
            <return pos:line="63" pos:column="13">return <expr><lit:literal type="boolean" pos:line="63" pos:column="20">false</lit:literal></expr>;</return>
        }</block></function>

        <class><specifier pos:line="66" pos:column="9">public</specifier> class <name><name pos:line="66" pos:column="22">GetFilters</name><argument_list pos:line="66" pos:column="32">&lt;<argument><name pos:line="66" pos:column="33">T</name></argument>&gt;</argument_list></name> <super pos:line="66" pos:column="36">: <name pos:line="66" pos:column="38">AlternateMethod</name></super> <where pos:line="66" pos:column="54">where <name pos:line="66" pos:column="60">T</name> : class</where>
        <block pos:line="67" pos:column="9">{
            <constructor><specifier pos:line="68" pos:column="13">public</specifier> <name pos:line="68" pos:column="20">GetFilters</name><parameter_list pos:line="68" pos:column="30">(<param><decl><type><name><name pos:line="68" pos:column="31">AlternateType</name><argument_list pos:line="68" pos:column="44">&lt;<argument><name pos:line="68" pos:column="45">IActionFilter</name></argument>&gt;</argument_list></name></type> <name pos:line="68" pos:column="60">alternateActionFilter</name></decl></param>, <param><decl><type><name><name pos:line="68" pos:column="83">AlternateType</name><argument_list pos:line="68" pos:column="96">&lt;<argument><name pos:line="68" pos:column="97">IResultFilter</name></argument>&gt;</argument_list></name></type> <name pos:line="68" pos:column="112">alternateResultFilter</name></decl></param>, <param><decl><type><name><name pos:line="68" pos:column="135">AlternateType</name><argument_list pos:line="68" pos:column="148">&lt;<argument><name pos:line="68" pos:column="149">IAuthorizationFilter</name></argument>&gt;</argument_list></name></type> <name pos:line="68" pos:column="171">alternateAuthorizationFilter</name></decl></param>, <param><decl><type><name><name pos:line="68" pos:column="201">AlternateType</name><argument_list pos:line="68" pos:column="214">&lt;<argument><name pos:line="68" pos:column="215">IExceptionFilter</name></argument>&gt;</argument_list></name></type> <name pos:line="68" pos:column="233">alternateExceptionFilter</name></decl></param>)</parameter_list> <member_list pos:line="68" pos:column="259">: <call><name pos:line="68" pos:column="261">base</name><argument_list pos:line="68" pos:column="265">(<argument><expr><call><name pos:line="68" pos:column="266">typeof</name><argument_list pos:line="68" pos:column="272">(<argument><expr><name pos:line="68" pos:column="273">T</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="68" pos:column="277">"GetFilters"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="68" pos:column="291">BindingFlags</name><op:operator pos:line="68" pos:column="303">.</op:operator><name pos:line="68" pos:column="304">Instance</name></name> <op:operator pos:line="68" pos:column="313">|</op:operator> <name><name pos:line="68" pos:column="315">BindingFlags</name><op:operator pos:line="68" pos:column="327">.</op:operator><name pos:line="68" pos:column="328">NonPublic</name></name></expr></argument>)</argument_list></call>
            </member_list><block pos:line="69" pos:column="13">{
                <expr_stmt><expr><name pos:line="70" pos:column="17">AlternateActionFilter</name> <op:operator pos:line="70" pos:column="39">=</op:operator> <name pos:line="70" pos:column="41">alternateActionFilter</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="71" pos:column="17">AlternateResultFilter</name> <op:operator pos:line="71" pos:column="39">=</op:operator> <name pos:line="71" pos:column="41">alternateResultFilter</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="72" pos:column="17">AlternateAuthorizationFilter</name> <op:operator pos:line="72" pos:column="46">=</op:operator> <name pos:line="72" pos:column="48">alternateAuthorizationFilter</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="73" pos:column="17">AlternateExceptionFilter</name> <op:operator pos:line="73" pos:column="42">=</op:operator> <name pos:line="73" pos:column="44">alternateExceptionFilter</name></expr>;</expr_stmt>
            }</block></constructor>

            <decl_stmt><decl><type><specifier pos:line="76" pos:column="13">public</specifier> <name><name pos:line="76" pos:column="20">AlternateType</name><argument_list pos:line="76" pos:column="33">&lt;<argument><name pos:line="76" pos:column="34">IExceptionFilter</name></argument>&gt;</argument_list></name></type> <name pos:line="76" pos:column="52">AlternateExceptionFilter</name> <block pos:line="76" pos:column="77">{ <function_decl><name pos:line="76" pos:column="79">get</name>;</function_decl> <function_decl><name pos:line="76" pos:column="84">set</name>;</function_decl> }</block></decl></decl_stmt>

            <decl_stmt><decl><type><specifier pos:line="78" pos:column="13">public</specifier> <name><name pos:line="78" pos:column="20">AlternateType</name><argument_list pos:line="78" pos:column="33">&lt;<argument><name pos:line="78" pos:column="34">IAuthorizationFilter</name></argument>&gt;</argument_list></name></type> <name pos:line="78" pos:column="56">AlternateAuthorizationFilter</name> <block pos:line="78" pos:column="85">{ <function_decl><name pos:line="78" pos:column="87">get</name>;</function_decl> <function_decl><name pos:line="78" pos:column="92">set</name>;</function_decl> }</block></decl></decl_stmt>

            <decl_stmt><decl><type><specifier pos:line="80" pos:column="13">public</specifier> <name><name pos:line="80" pos:column="20">AlternateType</name><argument_list pos:line="80" pos:column="33">&lt;<argument><name pos:line="80" pos:column="34">IResultFilter</name></argument>&gt;</argument_list></name></type> <name pos:line="80" pos:column="49">AlternateResultFilter</name> <block pos:line="80" pos:column="71">{ <function_decl><name pos:line="80" pos:column="73">get</name>;</function_decl> <function_decl><name pos:line="80" pos:column="78">set</name>;</function_decl> }</block></decl></decl_stmt>

            <decl_stmt><decl><type><specifier pos:line="82" pos:column="13">public</specifier> <name><name pos:line="82" pos:column="20">AlternateType</name><argument_list pos:line="82" pos:column="33">&lt;<argument><name pos:line="82" pos:column="34">IActionFilter</name></argument>&gt;</argument_list></name></type> <name pos:line="82" pos:column="49">AlternateActionFilter</name> <block pos:line="82" pos:column="71">{ <function_decl><name pos:line="82" pos:column="73">get</name>;</function_decl> <function_decl><name pos:line="82" pos:column="78">set</name>;</function_decl> }</block></decl></decl_stmt>

            <function><type><specifier pos:line="84" pos:column="13">public</specifier> <specifier pos:line="84" pos:column="20">override</specifier> <name pos:line="84" pos:column="29">void</name></type> <name pos:line="84" pos:column="34">PostImplementation</name><parameter_list pos:line="84" pos:column="52">(<param><decl><type><name pos:line="84" pos:column="53">IAlternateMethodContext</name></type> <name pos:line="84" pos:column="77">context</name></decl></param>, <param><decl><type><name pos:line="84" pos:column="86">TimerResult</name></type> <name pos:line="84" pos:column="98">timerResult</name></decl></param>)</parameter_list>
            <block pos:line="85" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="86" pos:column="17">var</name></type> <name pos:line="86" pos:column="21">result</name> <init pos:line="86" pos:column="28">= <expr><name><name pos:line="86" pos:column="30">context</name><op:operator pos:line="86" pos:column="37">.</op:operator><name pos:line="86" pos:column="38">ReturnValue</name></name> <op:operator pos:line="86" pos:column="50">as</op:operator> <name pos:line="86" pos:column="53">FilterInfo</name></expr></init></decl>;</decl_stmt>
                <if pos:line="87" pos:column="17">if <condition pos:line="87" pos:column="20">(<expr><name pos:line="87" pos:column="21">result</name> <op:operator pos:line="87" pos:column="28">==</op:operator> <name pos:line="87" pos:column="31">null</name></expr>)</condition><then pos:line="87" pos:column="36">
                <block pos:line="88" pos:column="17">{
                    <return pos:line="89" pos:column="21">return;</return>
                }</block></then></if>

                <expr_stmt><expr><call><name pos:line="92" pos:column="17">Proxy</name><argument_list pos:line="92" pos:column="22">(<argument><expr><name><name pos:line="92" pos:column="23">result</name><op:operator pos:line="92" pos:column="29">.</op:operator><name pos:line="92" pos:column="30">ActionFilters</name></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="45">AlternateActionFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="93" pos:column="17">Proxy</name><argument_list pos:line="93" pos:column="22">(<argument><expr><name><name pos:line="93" pos:column="23">result</name><op:operator pos:line="93" pos:column="29">.</op:operator><name pos:line="93" pos:column="30">ResultFilters</name></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="45">AlternateResultFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="94" pos:column="17">Proxy</name><argument_list pos:line="94" pos:column="22">(<argument><expr><name><name pos:line="94" pos:column="23">result</name><op:operator pos:line="94" pos:column="29">.</op:operator><name pos:line="94" pos:column="30">AuthorizationFilters</name></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="52">AlternateAuthorizationFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="95" pos:column="17">Proxy</name><argument_list pos:line="95" pos:column="22">(<argument><expr><name><name pos:line="95" pos:column="23">result</name><op:operator pos:line="95" pos:column="29">.</op:operator><name pos:line="95" pos:column="30">ExceptionFilters</name></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="48">AlternateExceptionFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <function><type><specifier pos:line="98" pos:column="13">private</specifier> <name pos:line="98" pos:column="21">void</name></type> <name><name pos:line="98" pos:column="26">Proxy</name><argument_list pos:line="98" pos:column="31">&lt;<argument><name pos:line="98" pos:column="32">TFilter</name></argument>&gt;</argument_list></name><parameter_list pos:line="98" pos:column="40">(<param><decl><type><name><name pos:line="98" pos:column="41">IList</name><argument_list pos:line="98" pos:column="46">&lt;<argument><name pos:line="98" pos:column="47">TFilter</name></argument>&gt;</argument_list></name></type> <name pos:line="98" pos:column="56">filters</name></decl></param>, <param><decl><type><name><name pos:line="98" pos:column="65">AlternateType</name><argument_list pos:line="98" pos:column="78">&lt;<argument><name pos:line="98" pos:column="79">TFilter</name></argument>&gt;</argument_list></name></type> <name pos:line="98" pos:column="88">alternateImplementation</name></decl></param>)</parameter_list> <where pos:line="98" pos:column="113">where <name pos:line="98" pos:column="119">TFilter</name> : class</where>
            <block pos:line="99" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="100" pos:column="17">var</name></type> <name pos:line="100" pos:column="21">count</name> <init pos:line="100" pos:column="27">= <expr><name><name pos:line="100" pos:column="29">filters</name><op:operator pos:line="100" pos:column="36">.</op:operator><name pos:line="100" pos:column="37">Count</name></name></expr></init></decl>;</decl_stmt>

                <for pos:line="102" pos:column="17">for (<init><decl><type><name pos:line="102" pos:column="22">int</name></type> <name pos:line="102" pos:column="26">i</name> <init pos:line="102" pos:column="28">= <expr><lit:literal type="number" pos:line="102" pos:column="30">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="102" pos:column="33">i</name> <op:operator pos:line="102" pos:column="35">&lt;</op:operator> <name pos:line="102" pos:column="37">count</name></expr>;</condition> <incr><expr><name pos:line="102" pos:column="44">i</name><op:operator pos:line="102" pos:column="45">++</op:operator></expr></incr>)
                <block pos:line="103" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="104" pos:column="21">var</name></type> <name pos:line="104" pos:column="25">originalFilter</name> <init pos:line="104" pos:column="40">= <expr><name><name pos:line="104" pos:column="42">filters</name><index pos:line="104" pos:column="49">[<expr><name pos:line="104" pos:column="50">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="105" pos:column="21">TFilter</name></type> <name pos:line="105" pos:column="29">newFilter</name></decl>;</decl_stmt>
                
                    <if pos:line="107" pos:column="21">if <condition pos:line="107" pos:column="24">(<expr><call><name><name pos:line="107" pos:column="25">alternateImplementation</name><op:operator pos:line="107" pos:column="48">.</op:operator><name pos:line="107" pos:column="49">TryCreate</name></name><argument_list pos:line="107" pos:column="58">(<argument><expr><name pos:line="107" pos:column="59">originalFilter</name></expr></argument>, <argument><expr pos:line="107" pos:column="75">out <name pos:line="107" pos:column="79">newFilter</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="107" pos:column="90">
                    <block pos:line="108" pos:column="21">{
                        <expr_stmt><expr><name><name pos:line="109" pos:column="25">filters</name><index pos:line="109" pos:column="32">[<expr><name pos:line="109" pos:column="33">i</name></expr>]</index></name> <op:operator pos:line="109" pos:column="36">=</op:operator> <name pos:line="109" pos:column="38">newFilter</name></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></for>
            }</block></function>
        }</block></class>

        <class><specifier pos:line="115" pos:column="9">public</specifier> class <name><name pos:line="115" pos:column="22">InvokeActionResult</name><argument_list pos:line="115" pos:column="40">&lt;<argument><name pos:line="115" pos:column="41">T</name></argument>&gt;</argument_list></name> <super pos:line="115" pos:column="44">: <name pos:line="115" pos:column="46">AlternateMethod</name></super> <where pos:line="115" pos:column="62">where <name pos:line="115" pos:column="68">T</name> : class</where>
        <block pos:line="116" pos:column="9">{
            <constructor><specifier pos:line="117" pos:column="13">public</specifier> <name pos:line="117" pos:column="20">InvokeActionResult</name><parameter_list pos:line="117" pos:column="38">()</parameter_list> <member_list pos:line="117" pos:column="41">: <call><name pos:line="117" pos:column="43">base</name><argument_list pos:line="117" pos:column="47">(<argument><expr><call><name pos:line="117" pos:column="48">typeof</name><argument_list pos:line="117" pos:column="54">(<argument><expr><name pos:line="117" pos:column="55">T</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="117" pos:column="59">"InvokeActionResult"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="117" pos:column="81">BindingFlags</name><op:operator pos:line="117" pos:column="93">.</op:operator><name pos:line="117" pos:column="94">Instance</name></name> <op:operator pos:line="117" pos:column="103">|</op:operator> <name><name pos:line="117" pos:column="105">BindingFlags</name><op:operator pos:line="117" pos:column="117">.</op:operator><name pos:line="117" pos:column="118">NonPublic</name></name></expr></argument>)</argument_list></call>
            </member_list><block pos:line="118" pos:column="13">{
            }</block></constructor>

            <function><type><specifier pos:line="121" pos:column="13">public</specifier> <specifier pos:line="121" pos:column="20">override</specifier> <name pos:line="121" pos:column="29">void</name></type> <name pos:line="121" pos:column="34">PostImplementation</name><parameter_list pos:line="121" pos:column="52">(<param><decl><type><name pos:line="121" pos:column="53">IAlternateMethodContext</name></type> <name pos:line="121" pos:column="77">context</name></decl></param>, <param><decl><type><name pos:line="121" pos:column="86">TimerResult</name></type> <name pos:line="121" pos:column="98">timerResult</name></decl></param>)</parameter_list>
            <block pos:line="122" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="123" pos:column="17">var</name></type> <name pos:line="123" pos:column="21">args</name> <init pos:line="123" pos:column="26">= <expr><op:operator pos:line="123" pos:column="28">new</op:operator> <call><name pos:line="123" pos:column="32">Arguments</name><argument_list pos:line="123" pos:column="41">(<argument><expr><name><name pos:line="123" pos:column="42">context</name><op:operator pos:line="123" pos:column="49">.</op:operator><name pos:line="123" pos:column="50">Arguments</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="124" pos:column="17">var</name></type> <name pos:line="124" pos:column="21">message</name> <init pos:line="124" pos:column="29">= <expr><op:operator pos:line="124" pos:column="31">new</op:operator> <call><name pos:line="124" pos:column="35">Message</name><argument_list pos:line="124" pos:column="42">()</argument_list></call>
                    <op:operator pos:line="125" pos:column="21">.</op:operator><call><name pos:line="125" pos:column="22">AsTimedMessage</name><argument_list pos:line="125" pos:column="36">(<argument><expr><name pos:line="125" pos:column="37">timerResult</name></expr></argument>)</argument_list></call>
                    <op:operator pos:line="126" pos:column="21">.</op:operator><call><name pos:line="126" pos:column="22">AsSourceMessage</name><argument_list pos:line="126" pos:column="37">(<argument><expr><call><name><name pos:line="126" pos:column="38">args</name><op:operator pos:line="126" pos:column="42">.</op:operator><name pos:line="126" pos:column="43">ActionResult</name><op:operator pos:line="126" pos:column="55">.</op:operator><name pos:line="126" pos:column="56">GetType</name></name><argument_list pos:line="126" pos:column="63">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="126" pos:column="67">executedMethod</name></expr></argument>)</argument_list></call>
                    <op:operator pos:line="127" pos:column="21">.</op:operator><call><name pos:line="127" pos:column="22">AsChildActionMessage</name><argument_list pos:line="127" pos:column="42">(<argument><expr><name><name pos:line="127" pos:column="43">args</name><op:operator pos:line="127" pos:column="47">.</op:operator><name pos:line="127" pos:column="48">ControllerContext</name></name></expr></argument>)</argument_list></call>
                    <op:operator pos:line="128" pos:column="21">.</op:operator><call><name pos:line="128" pos:column="22">AsActionMessage</name><argument_list pos:line="128" pos:column="37">(<argument><expr><name><name pos:line="128" pos:column="38">args</name><op:operator pos:line="128" pos:column="42">.</op:operator><name pos:line="128" pos:column="43">ControllerContext</name></name></expr></argument>)</argument_list></call>
                    <op:operator pos:line="129" pos:column="21">.</op:operator><call><name pos:line="129" pos:column="22">AsMvcTimelineMessage</name><argument_list pos:line="129" pos:column="42">(<argument><expr><name><name pos:line="129" pos:column="43">MvcTimelineCategory</name><op:operator pos:line="129" pos:column="62">.</op:operator><name pos:line="129" pos:column="63">Controller</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name pos:line="131" pos:column="17">context</name><op:operator pos:line="131" pos:column="24">.</op:operator><name pos:line="131" pos:column="25">MessageBroker</name><op:operator pos:line="131" pos:column="38">.</op:operator><name pos:line="131" pos:column="39">Publish</name></name><argument_list pos:line="131" pos:column="46">(<argument><expr><name pos:line="131" pos:column="47">message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
            }</block></function>

            <class><specifier pos:line="134" pos:column="13">public</specifier> class <name pos:line="134" pos:column="26">Arguments</name>
            <block pos:line="135" pos:column="13">{
                <constructor><specifier pos:line="136" pos:column="17">public</specifier> <name pos:line="136" pos:column="24">Arguments</name><parameter_list pos:line="136" pos:column="33">(<param><decl><type><specifier pos:line="136" pos:column="34">params</specifier> <name><name pos:line="136" pos:column="41">object</name><index pos:line="136" pos:column="47">[]</index></name></type> <name pos:line="136" pos:column="50">args</name></decl></param>)</parameter_list>
                <block pos:line="137" pos:column="17">{
                    <expr_stmt><expr><name pos:line="138" pos:column="21">ControllerContext</name> <op:operator pos:line="138" pos:column="39">=</op:operator> <op:operator pos:line="138" pos:column="41">(</op:operator><name pos:line="138" pos:column="42">ControllerContext</name><op:operator pos:line="138" pos:column="59">)</op:operator><name><name pos:line="138" pos:column="60">args</name><index pos:line="138" pos:column="64">[<expr><lit:literal type="number" pos:line="138" pos:column="65">0</lit:literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="139" pos:column="21">ActionResult</name> <op:operator pos:line="139" pos:column="34">=</op:operator> <op:operator pos:line="139" pos:column="36">(</op:operator><name pos:line="139" pos:column="37">ActionResult</name><op:operator pos:line="139" pos:column="49">)</op:operator><name><name pos:line="139" pos:column="50">args</name><index pos:line="139" pos:column="54">[<expr><lit:literal type="number" pos:line="139" pos:column="55">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>
                }</block></constructor>

                <decl_stmt><decl><type><specifier pos:line="142" pos:column="17">public</specifier> <name pos:line="142" pos:column="24">ControllerContext</name></type> <name pos:line="142" pos:column="42">ControllerContext</name> <block pos:line="142" pos:column="60">{ <function_decl><name pos:line="142" pos:column="62">get</name>;</function_decl> <function_decl><name pos:line="142" pos:column="67">set</name>;</function_decl> }</block></decl></decl_stmt>
                
                <decl_stmt><decl><type><specifier pos:line="144" pos:column="17">public</specifier> <name pos:line="144" pos:column="24">ActionResult</name></type> <name pos:line="144" pos:column="37">ActionResult</name> <block pos:line="144" pos:column="50">{ <function_decl><name pos:line="144" pos:column="52">get</name>;</function_decl> <function_decl><name pos:line="144" pos:column="57">set</name>;</function_decl> }</block></decl></decl_stmt>
            }</block></class>

            <class><specifier pos:line="147" pos:column="13">public</specifier> class <name pos:line="147" pos:column="26">Message</name> <super pos:line="147" pos:column="34">: <name pos:line="147" pos:column="36">MessageBase</name>, <name pos:line="147" pos:column="49">IExecutionMessage</name>, <name pos:line="147" pos:column="68">IInvokeActionResultMessage</name></super>
            <block pos:line="148" pos:column="13">{
                <decl_stmt><decl><type><specifier pos:line="149" pos:column="17">public</specifier> <name pos:line="149" pos:column="24">string</name></type> <name pos:line="149" pos:column="31">ControllerName</name> <block pos:line="149" pos:column="46">{ <function_decl><name pos:line="149" pos:column="48">get</name>;</function_decl> <function_decl><name pos:line="149" pos:column="53">set</name>;</function_decl> }</block></decl></decl_stmt>

                <decl_stmt><decl><type><specifier pos:line="151" pos:column="17">public</specifier> <name pos:line="151" pos:column="24">string</name></type> <name pos:line="151" pos:column="31">ActionName</name> <block pos:line="151" pos:column="42">{ <function_decl><name pos:line="151" pos:column="44">get</name>;</function_decl> <function_decl><name pos:line="151" pos:column="49">set</name>;</function_decl> }</block></decl></decl_stmt>

                <decl_stmt><decl><type><specifier pos:line="153" pos:column="17">public</specifier> <name pos:line="153" pos:column="24">Type</name></type> <name pos:line="153" pos:column="29">ExecutedType</name> <block pos:line="153" pos:column="42">{ <function_decl><name pos:line="153" pos:column="44">get</name>;</function_decl> <function_decl><name pos:line="153" pos:column="49">set</name>;</function_decl> }</block></decl></decl_stmt>

                <decl_stmt><decl><type><specifier pos:line="155" pos:column="17">public</specifier> <name pos:line="155" pos:column="24">MethodInfo</name></type> <name pos:line="155" pos:column="35">ExecutedMethod</name> <block pos:line="155" pos:column="50">{ <function_decl><name pos:line="155" pos:column="52">get</name>;</function_decl> <function_decl><name pos:line="155" pos:column="57">set</name>;</function_decl> }</block></decl></decl_stmt>

                <decl_stmt><decl><type><specifier pos:line="157" pos:column="17">public</specifier> <name pos:line="157" pos:column="24">TimeSpan</name></type> <name pos:line="157" pos:column="33">Offset</name> <block pos:line="157" pos:column="40">{ <function_decl><name pos:line="157" pos:column="42">get</name>;</function_decl> <function_decl><name pos:line="157" pos:column="47">set</name>;</function_decl> }</block></decl></decl_stmt>

                <decl_stmt><decl><type><specifier pos:line="159" pos:column="17">public</specifier> <name pos:line="159" pos:column="24">TimeSpan</name></type> <name pos:line="159" pos:column="33">Duration</name> <block pos:line="159" pos:column="42">{ <function_decl><name pos:line="159" pos:column="44">get</name>;</function_decl> <function_decl><name pos:line="159" pos:column="49">set</name>;</function_decl> }</block></decl></decl_stmt>

                <decl_stmt><decl><type><specifier pos:line="161" pos:column="17">public</specifier> <name pos:line="161" pos:column="24">DateTime</name></type> <name pos:line="161" pos:column="33">StartTime</name> <block pos:line="161" pos:column="43">{ <function_decl><name pos:line="161" pos:column="45">get</name>;</function_decl> <function_decl><name pos:line="161" pos:column="50">set</name>;</function_decl> }</block></decl></decl_stmt>

                <decl_stmt><decl><type><specifier pos:line="163" pos:column="17">public</specifier> <name pos:line="163" pos:column="24">string</name></type> <name pos:line="163" pos:column="31">EventName</name> <block pos:line="163" pos:column="41">{ <function_decl><name pos:line="163" pos:column="43">get</name>;</function_decl> <function_decl><name pos:line="163" pos:column="48">set</name>;</function_decl> }</block></decl></decl_stmt>

                <decl_stmt><decl><type><specifier pos:line="165" pos:column="17">public</specifier> <name pos:line="165" pos:column="24">TimelineCategoryItem</name></type> <name pos:line="165" pos:column="45">EventCategory</name> <block pos:line="165" pos:column="59">{ <function_decl><name pos:line="165" pos:column="61">get</name>;</function_decl> <function_decl><name pos:line="165" pos:column="66">set</name>;</function_decl> }</block></decl></decl_stmt>

                <decl_stmt><decl><type><specifier pos:line="167" pos:column="17">public</specifier> <name pos:line="167" pos:column="24">string</name></type> <name pos:line="167" pos:column="31">EventSubText</name> <block pos:line="167" pos:column="44">{ <function_decl><name pos:line="167" pos:column="46">get</name>;</function_decl> <function_decl><name pos:line="167" pos:column="51">set</name>;</function_decl> }</block></decl></decl_stmt>

                <decl_stmt><decl><type><specifier pos:line="169" pos:column="17">public</specifier> <name pos:line="169" pos:column="24">bool</name></type> <name pos:line="169" pos:column="29">IsChildAction</name> <block pos:line="169" pos:column="43">{ <function_decl><name pos:line="169" pos:column="45">get</name>;</function_decl> <function_decl><name pos:line="169" pos:column="50">set</name>;</function_decl> }</block></decl></decl_stmt>
            }</block></class> 
        }</block></class>

        <class><specifier pos:line="173" pos:column="9">public</specifier> class <name pos:line="173" pos:column="22">InvokeActionMethod</name> <super pos:line="173" pos:column="41">: <name pos:line="173" pos:column="43">AlternateMethod</name></super>
        <block pos:line="174" pos:column="9">{
            <constructor><specifier pos:line="175" pos:column="13">public</specifier> <name pos:line="175" pos:column="20">InvokeActionMethod</name><parameter_list pos:line="175" pos:column="38">()</parameter_list> <member_list pos:line="175" pos:column="41">: <call><name pos:line="175" pos:column="43">base</name><argument_list pos:line="175" pos:column="47">(<argument><expr><call><name pos:line="175" pos:column="48">typeof</name><argument_list pos:line="175" pos:column="54">(<argument><expr><name pos:line="175" pos:column="55">ControllerActionInvoker</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="175" pos:column="81">"InvokeActionMethod"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="175" pos:column="103">BindingFlags</name><op:operator pos:line="175" pos:column="115">.</op:operator><name pos:line="175" pos:column="116">Instance</name></name> <op:operator pos:line="175" pos:column="125">|</op:operator> <name><name pos:line="175" pos:column="127">BindingFlags</name><op:operator pos:line="175" pos:column="139">.</op:operator><name pos:line="175" pos:column="140">NonPublic</name></name></expr></argument>)</argument_list></call>
            </member_list><block pos:line="176" pos:column="13">{
            }</block></constructor>

            <function><type><specifier pos:line="179" pos:column="13">public</specifier> <specifier pos:line="179" pos:column="20">override</specifier> <name pos:line="179" pos:column="29">void</name></type> <name pos:line="179" pos:column="34">PostImplementation</name><parameter_list pos:line="179" pos:column="52">(<param><decl><type><name pos:line="179" pos:column="53">IAlternateMethodContext</name></type> <name pos:line="179" pos:column="77">context</name></decl></param>, <param><decl><type><name pos:line="179" pos:column="86">TimerResult</name></type> <name pos:line="179" pos:column="98">timerResult</name></decl></param>)</parameter_list>
            <block pos:line="180" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="181" pos:column="17">var</name></type> <name pos:line="181" pos:column="21">args</name> <init pos:line="181" pos:column="26">= <expr><op:operator pos:line="181" pos:column="28">new</op:operator> <call><name pos:line="181" pos:column="32">Arguments</name><argument_list pos:line="181" pos:column="41">(<argument><expr><name><name pos:line="181" pos:column="42">context</name><op:operator pos:line="181" pos:column="49">.</op:operator><name pos:line="181" pos:column="50">Arguments</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="182" pos:column="17">var</name></type> <name pos:line="182" pos:column="21">actionDescriptor</name> <init pos:line="182" pos:column="38">= <expr><name><name pos:line="182" pos:column="40">args</name><op:operator pos:line="182" pos:column="44">.</op:operator><name pos:line="182" pos:column="45">ActionDescriptor</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="183" pos:column="17">var</name></type> <name pos:line="183" pos:column="21">controllerDescriptor</name> <init pos:line="183" pos:column="42">= <expr><name><name pos:line="183" pos:column="44">actionDescriptor</name><op:operator pos:line="183" pos:column="60">.</op:operator><name pos:line="183" pos:column="61">ControllerDescriptor</name></name></expr></init></decl>;</decl_stmt> 
                <decl_stmt><decl><type><name pos:line="184" pos:column="17">var</name></type> <name pos:line="184" pos:column="21">actionName</name> <init pos:line="184" pos:column="32">= <expr><name><name pos:line="184" pos:column="34">actionDescriptor</name><op:operator pos:line="184" pos:column="50">.</op:operator><name pos:line="184" pos:column="51">ActionName</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="185" pos:column="17">var</name></type> <name pos:line="185" pos:column="21">actionParams</name> <init pos:line="185" pos:column="34">= <expr><call><name><name pos:line="185" pos:column="36">actionDescriptor</name><op:operator pos:line="185" pos:column="52">.</op:operator><name pos:line="185" pos:column="53">GetParameters</name></name><argument_list pos:line="185" pos:column="66">()</argument_list></call><op:operator pos:line="185" pos:column="68">.</op:operator><call><name pos:line="185" pos:column="69">Select</name><argument_list pos:line="185" pos:column="75">(<argument><expr><lambda><name pos:line="185" pos:column="76">p</name> <op:operator pos:line="185" pos:column="78">=&gt;</op:operator> <name><name pos:line="185" pos:column="81">p</name><op:operator pos:line="185" pos:column="82">.</op:operator><name pos:line="185" pos:column="83">ParameterType</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="185" pos:column="97">.</op:operator><call><name pos:line="185" pos:column="98">ToArray</name><argument_list pos:line="185" pos:column="105">()</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name pos:line="187" pos:column="17">var</name></type> <name pos:line="187" pos:column="21">message</name> <init pos:line="187" pos:column="29">= <expr><op:operator pos:line="187" pos:column="31">new</op:operator> <call><name pos:line="187" pos:column="35">Message</name><argument_list pos:line="187" pos:column="42">(<argument><expr><call><name><name pos:line="187" pos:column="43">context</name><op:operator pos:line="187" pos:column="50">.</op:operator><name pos:line="187" pos:column="51">ReturnValue</name><op:operator pos:line="187" pos:column="62">.</op:operator><name pos:line="187" pos:column="63">GetType</name></name><argument_list pos:line="187" pos:column="70">()</argument_list></call></expr></argument>)</argument_list></call>
                    <op:operator pos:line="188" pos:column="21">.</op:operator><call><name pos:line="188" pos:column="22">AsTimedMessage</name><argument_list pos:line="188" pos:column="36">(<argument><expr><name pos:line="188" pos:column="37">timerResult</name></expr></argument>)</argument_list></call>
                    <op:operator pos:line="189" pos:column="21">.</op:operator><call><name pos:line="189" pos:column="22">AsSourceMessage</name><argument_list pos:line="189" pos:column="37">(<argument><expr><name><name pos:line="189" pos:column="38">controllerDescriptor</name><op:operator pos:line="189" pos:column="58">.</op:operator><name pos:line="189" pos:column="59">ControllerType</name></name></expr></argument>, <argument><expr><call><name><name pos:line="189" pos:column="75">controllerDescriptor</name><op:operator pos:line="189" pos:column="95">.</op:operator><name pos:line="189" pos:column="96">ControllerType</name><op:operator pos:line="189" pos:column="110">.</op:operator><name pos:line="189" pos:column="111">GetMethod</name></name><argument_list pos:line="189" pos:column="120">(<argument><expr><name pos:line="189" pos:column="121">actionName</name></expr></argument>, <argument><expr><name pos:line="189" pos:column="133">actionParams</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                    <op:operator pos:line="190" pos:column="21">.</op:operator><call><name pos:line="190" pos:column="22">AsChildActionMessage</name><argument_list pos:line="190" pos:column="42">(<argument><expr><name><name pos:line="190" pos:column="43">args</name><op:operator pos:line="190" pos:column="47">.</op:operator><name pos:line="190" pos:column="48">ControllerContext</name></name></expr></argument>)</argument_list></call>
                    <op:operator pos:line="191" pos:column="21">.</op:operator><call><name pos:line="191" pos:column="22">AsActionMessage</name><argument_list pos:line="191" pos:column="37">(<argument><expr><name><name pos:line="191" pos:column="38">args</name><op:operator pos:line="191" pos:column="42">.</op:operator><name pos:line="191" pos:column="43">ControllerContext</name></name></expr></argument>)</argument_list></call>
                    <op:operator pos:line="192" pos:column="21">.</op:operator><call><name pos:line="192" pos:column="22">AsMvcTimelineMessage</name><argument_list pos:line="192" pos:column="42">(<argument><expr><name><name pos:line="192" pos:column="43">MvcTimelineCategory</name><op:operator pos:line="192" pos:column="62">.</op:operator><name pos:line="192" pos:column="63">Controller</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name pos:line="194" pos:column="17">context</name><op:operator pos:line="194" pos:column="24">.</op:operator><name pos:line="194" pos:column="25">MessageBroker</name><op:operator pos:line="194" pos:column="38">.</op:operator><name pos:line="194" pos:column="39">Publish</name></name><argument_list pos:line="194" pos:column="46">(<argument><expr><name pos:line="194" pos:column="47">message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
            }</block></function>

            <class><specifier pos:line="197" pos:column="13">public</specifier> class <name pos:line="197" pos:column="26">Arguments</name>
            <block pos:line="198" pos:column="13">{
                <constructor><specifier pos:line="199" pos:column="17">public</specifier> <name pos:line="199" pos:column="24">Arguments</name><parameter_list pos:line="199" pos:column="33">(<param><decl><type><specifier pos:line="199" pos:column="34">params</specifier> <name><name pos:line="199" pos:column="41">object</name><index pos:line="199" pos:column="47">[]</index></name></type> <name pos:line="199" pos:column="50">arguments</name></decl></param>)</parameter_list>
                <block pos:line="200" pos:column="17">{
                    <expr_stmt><expr><name pos:line="201" pos:column="21">ControllerContext</name> <op:operator pos:line="201" pos:column="39">=</op:operator> <op:operator pos:line="201" pos:column="41">(</op:operator><name pos:line="201" pos:column="42">ControllerContext</name><op:operator pos:line="201" pos:column="59">)</op:operator><name><name pos:line="201" pos:column="60">arguments</name><index pos:line="201" pos:column="69">[<expr><lit:literal type="number" pos:line="201" pos:column="70">0</lit:literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="202" pos:column="21">ActionDescriptor</name> <op:operator pos:line="202" pos:column="38">=</op:operator> <op:operator pos:line="202" pos:column="40">(</op:operator><name pos:line="202" pos:column="41">ActionDescriptor</name><op:operator pos:line="202" pos:column="57">)</op:operator><name><name pos:line="202" pos:column="58">arguments</name><index pos:line="202" pos:column="67">[<expr><lit:literal type="number" pos:line="202" pos:column="68">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="203" pos:column="21">Parameters</name> <op:operator pos:line="203" pos:column="32">=</op:operator> <op:operator pos:line="203" pos:column="34">(</op:operator><name><name pos:line="203" pos:column="35">IDictionary</name><argument_list pos:line="203" pos:column="46">&lt;<argument><name pos:line="203" pos:column="47">string</name></argument>, <argument><name pos:line="203" pos:column="55">object</name></argument>&gt;</argument_list></name><op:operator pos:line="203" pos:column="62">)</op:operator><name><name pos:line="203" pos:column="63">arguments</name><index pos:line="203" pos:column="72">[<expr><lit:literal type="number" pos:line="203" pos:column="73">2</lit:literal></expr>]</index></name></expr>;</expr_stmt>

                    <if pos:line="205" pos:column="21">if <condition pos:line="205" pos:column="24">(<expr><name><name pos:line="205" pos:column="25">arguments</name><op:operator pos:line="205" pos:column="34">.</op:operator><name pos:line="205" pos:column="35">Length</name></name> <op:operator pos:line="205" pos:column="42">==</op:operator> <lit:literal type="number" pos:line="205" pos:column="45">5</lit:literal></expr>)</condition><then pos:line="205" pos:column="47">
                    <block pos:line="206" pos:column="21">{
                        <expr_stmt><expr><name pos:line="207" pos:column="25">IsAsync</name> <op:operator pos:line="207" pos:column="33">=</op:operator> <lit:literal type="boolean" pos:line="207" pos:column="35">true</lit:literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="208" pos:column="25">Callback</name> <op:operator pos:line="208" pos:column="34">=</op:operator> <op:operator pos:line="208" pos:column="36">(</op:operator><name pos:line="208" pos:column="37">AsyncCallback</name><op:operator pos:line="208" pos:column="50">)</op:operator><name><name pos:line="208" pos:column="51">arguments</name><index pos:line="208" pos:column="60">[<expr><lit:literal type="number" pos:line="208" pos:column="61">3</lit:literal></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="209" pos:column="25">State</name> <op:operator pos:line="209" pos:column="31">=</op:operator> <name><name pos:line="209" pos:column="33">arguments</name><index pos:line="209" pos:column="42">[<expr><lit:literal type="number" pos:line="209" pos:column="43">4</lit:literal></expr>]</index></name></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></constructor>

                <decl_stmt><decl><type><specifier pos:line="213" pos:column="17">public</specifier> <name pos:line="213" pos:column="24">ControllerContext</name></type> <name pos:line="213" pos:column="42">ControllerContext</name> <block pos:line="213" pos:column="60">{ <function_decl><name pos:line="213" pos:column="62">get</name>;</function_decl> <function_decl><name pos:line="213" pos:column="67">set</name>;</function_decl> }</block></decl></decl_stmt>
                
                <decl_stmt><decl><type><specifier pos:line="215" pos:column="17">public</specifier> <name pos:line="215" pos:column="24">ActionDescriptor</name></type> <name pos:line="215" pos:column="41">ActionDescriptor</name> <block pos:line="215" pos:column="58">{ <function_decl><name pos:line="215" pos:column="60">get</name>;</function_decl> <function_decl><name pos:line="215" pos:column="65">set</name>;</function_decl> }</block></decl></decl_stmt>
                
                <decl_stmt><decl><type><specifier pos:line="217" pos:column="17">public</specifier> <name><name pos:line="217" pos:column="24">IDictionary</name><argument_list pos:line="217" pos:column="35">&lt;<argument><name pos:line="217" pos:column="36">string</name></argument>, <argument><name pos:line="217" pos:column="44">object</name></argument>&gt;</argument_list></name></type> <name pos:line="217" pos:column="52">Parameters</name> <block pos:line="217" pos:column="63">{ <function_decl><name pos:line="217" pos:column="65">get</name>;</function_decl> <function_decl><name pos:line="217" pos:column="70">set</name>;</function_decl> }</block></decl></decl_stmt>
                
                <decl_stmt><decl><type><specifier pos:line="219" pos:column="17">public</specifier> <name pos:line="219" pos:column="24">AsyncCallback</name></type> <name pos:line="219" pos:column="38">Callback</name> <block pos:line="219" pos:column="47">{ <function_decl><name pos:line="219" pos:column="49">get</name>;</function_decl> <function_decl><name pos:line="219" pos:column="54">set</name>;</function_decl> }</block></decl></decl_stmt>
                
                <decl_stmt><decl><type><specifier pos:line="221" pos:column="17">public</specifier> <name pos:line="221" pos:column="24">object</name></type> <name pos:line="221" pos:column="31">State</name> <block pos:line="221" pos:column="37">{ <function_decl><name pos:line="221" pos:column="39">get</name>;</function_decl> <function_decl><name pos:line="221" pos:column="44">set</name>;</function_decl> }</block></decl></decl_stmt>
                
                <decl_stmt><decl><type><specifier pos:line="223" pos:column="17">public</specifier> <name pos:line="223" pos:column="24">bool</name></type> <name pos:line="223" pos:column="29">IsAsync</name> <block pos:line="223" pos:column="37">{ <function_decl><name pos:line="223" pos:column="39">get</name>;</function_decl> <function_decl><name pos:line="223" pos:column="44">set</name>;</function_decl> }</block></decl></decl_stmt>
            }</block></class>

            <class><specifier pos:line="226" pos:column="13">public</specifier> class <name pos:line="226" pos:column="26">Message</name> <super pos:line="226" pos:column="34">: <name pos:line="226" pos:column="36">MessageBase</name>, <name pos:line="226" pos:column="49">IExecutionMessage</name></super>
            <block pos:line="227" pos:column="13">{
                <constructor><specifier pos:line="228" pos:column="17">public</specifier> <name pos:line="228" pos:column="24">Message</name><parameter_list pos:line="228" pos:column="31">(<param><decl><type><name pos:line="228" pos:column="32">Type</name></type> <name pos:line="228" pos:column="37">resultType</name></decl></param>)</parameter_list>
                <block pos:line="229" pos:column="17">{
                    <expr_stmt><expr><name pos:line="230" pos:column="21">ResultType</name> <op:operator pos:line="230" pos:column="32">=</op:operator> <name pos:line="230" pos:column="34">resultType</name></expr>;</expr_stmt>
                }</block></constructor>

                <decl_stmt><decl><type><specifier pos:line="233" pos:column="17">public</specifier> <name pos:line="233" pos:column="24">string</name></type> <name pos:line="233" pos:column="31">ControllerName</name> <block pos:line="233" pos:column="46">{ <function_decl><name pos:line="233" pos:column="48">get</name>;</function_decl> <function_decl><name pos:line="233" pos:column="53">set</name>;</function_decl> }</block></decl></decl_stmt>

                <decl_stmt><decl><type><specifier pos:line="235" pos:column="17">public</specifier> <name pos:line="235" pos:column="24">string</name></type> <name pos:line="235" pos:column="31">ActionName</name> <block pos:line="235" pos:column="42">{ <function_decl><name pos:line="235" pos:column="44">get</name>;</function_decl> <function_decl><name pos:line="235" pos:column="49">set</name>;</function_decl> }</block></decl></decl_stmt>

                <decl_stmt><decl><type><specifier pos:line="237" pos:column="17">public</specifier> <name pos:line="237" pos:column="24">Type</name></type> <name pos:line="237" pos:column="29">ExecutedType</name> <block pos:line="237" pos:column="42">{ <function_decl><name pos:line="237" pos:column="44">get</name>;</function_decl> <function_decl><name pos:line="237" pos:column="49">set</name>;</function_decl> }</block></decl></decl_stmt>

                <decl_stmt><decl><type><specifier pos:line="239" pos:column="17">public</specifier> <name pos:line="239" pos:column="24">MethodInfo</name></type> <name pos:line="239" pos:column="35">ExecutedMethod</name> <block pos:line="239" pos:column="50">{ <function_decl><name pos:line="239" pos:column="52">get</name>;</function_decl> <function_decl><name pos:line="239" pos:column="57">set</name>;</function_decl> }</block></decl></decl_stmt>

                <decl_stmt><decl><type><specifier pos:line="241" pos:column="17">public</specifier> <name pos:line="241" pos:column="24">TimeSpan</name></type> <name pos:line="241" pos:column="33">Offset</name> <block pos:line="241" pos:column="40">{ <function_decl><name pos:line="241" pos:column="42">get</name>;</function_decl> <function_decl><name pos:line="241" pos:column="47">set</name>;</function_decl> }</block></decl></decl_stmt>

                <decl_stmt><decl><type><specifier pos:line="243" pos:column="17">public</specifier> <name pos:line="243" pos:column="24">TimeSpan</name></type> <name pos:line="243" pos:column="33">Duration</name> <block pos:line="243" pos:column="42">{ <function_decl><name pos:line="243" pos:column="44">get</name>;</function_decl> <function_decl><name pos:line="243" pos:column="49">set</name>;</function_decl> }</block></decl></decl_stmt>

                <decl_stmt><decl><type><specifier pos:line="245" pos:column="17">public</specifier> <name pos:line="245" pos:column="24">DateTime</name></type> <name pos:line="245" pos:column="33">StartTime</name> <block pos:line="245" pos:column="43">{ <function_decl><name pos:line="245" pos:column="45">get</name>;</function_decl> <function_decl><name pos:line="245" pos:column="50">set</name>;</function_decl> }</block></decl></decl_stmt>

                <decl_stmt><decl><type><specifier pos:line="247" pos:column="17">public</specifier> <name pos:line="247" pos:column="24">string</name></type> <name pos:line="247" pos:column="31">EventName</name> <block pos:line="247" pos:column="41">{ <function_decl><name pos:line="247" pos:column="43">get</name>;</function_decl> <function_decl><name pos:line="247" pos:column="48">set</name>;</function_decl> }</block></decl></decl_stmt>

                <decl_stmt><decl><type><specifier pos:line="249" pos:column="17">public</specifier> <name pos:line="249" pos:column="24">TimelineCategoryItem</name></type> <name pos:line="249" pos:column="45">EventCategory</name> <block pos:line="249" pos:column="59">{ <function_decl><name pos:line="249" pos:column="61">get</name>;</function_decl> <function_decl><name pos:line="249" pos:column="66">set</name>;</function_decl> }</block></decl></decl_stmt>

                <decl_stmt><decl><type><specifier pos:line="251" pos:column="17">public</specifier> <name pos:line="251" pos:column="24">string</name></type> <name pos:line="251" pos:column="31">EventSubText</name> <block pos:line="251" pos:column="44">{ <function_decl><name pos:line="251" pos:column="46">get</name>;</function_decl> <function_decl><name pos:line="251" pos:column="51">set</name>;</function_decl> }</block></decl></decl_stmt>

                <decl_stmt><decl><type><specifier pos:line="253" pos:column="17">public</specifier> <name pos:line="253" pos:column="24">Type</name></type> <name pos:line="253" pos:column="29">ResultType</name> <block pos:line="253" pos:column="40">{ <function_decl><name pos:line="253" pos:column="42">get</name>;</function_decl> <function_decl><specifier pos:line="253" pos:column="47">private</specifier> <name pos:line="253" pos:column="55">set</name>;</function_decl> }</block></decl></decl_stmt>

                <decl_stmt><decl><type><specifier pos:line="255" pos:column="17">public</specifier> <name pos:line="255" pos:column="24">bool</name></type> <name pos:line="255" pos:column="29">IsChildAction</name> <block pos:line="255" pos:column="43">{ <function_decl><name pos:line="255" pos:column="45">get</name>;</function_decl> <function_decl><name pos:line="255" pos:column="50">set</name>;</function_decl> }</block></decl></decl_stmt>
            }</block></class> 
        }</block></class>
    }</block></class>
}</block></namespace></unit>
