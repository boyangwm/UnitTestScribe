<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Core\Extensions\AlternateMethodContextExtensions.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">Glimpse</name><op:operator pos:line="1" pos:column="14">.</op:operator><name pos:line="1" pos:column="15">Core</name><op:operator pos:line="1" pos:column="19">.</op:operator><name pos:line="1" pos:column="20">Extensibility</name></name>;</using>

<namespace pos:line="3" pos:column="1">namespace <name><name pos:line="3" pos:column="11">Glimpse</name><op:operator pos:line="3" pos:column="18">.</op:operator><name pos:line="3" pos:column="19">Core</name><op:operator pos:line="3" pos:column="23">.</op:operator><name pos:line="3" pos:column="24">Extensions</name></name>
<block pos:line="4" pos:column="1">{
    <comment type="line" pos:line="5" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="6" pos:column="5">/// Extension methods to simplify common tasks completed with &lt;see cref="IAlternateMethodContext"/&gt;.</comment>
    <comment type="line" pos:line="7" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="8" pos:column="5">public</specifier> <specifier pos:line="8" pos:column="12">static</specifier> class <name pos:line="8" pos:column="25">AlternateMethodContextExtensions</name>
    <block pos:line="9" pos:column="5">{
        <comment type="line" pos:line="10" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="11" pos:column="9">/// Calls &lt;c&gt;Proceed&lt;/c&gt; on the original implementation, if the current &lt;c&gt;RuntimePolicy&lt;/c&gt; is not &lt;c&gt;Off&lt;/c&gt;, and provides a corresponding &lt;see cref="TimerResult"/&gt;.</comment>
        <comment type="line" pos:line="12" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="13" pos:column="9">/// &lt;param name="context"&gt;The context.&lt;/param&gt;</comment>
        <comment type="line" pos:line="14" pos:column="9">/// &lt;param name="timerResult"&gt;The timer result.&lt;/param&gt;</comment>
        <comment type="line" pos:line="15" pos:column="9">/// &lt;returns&gt;</comment>
        <comment type="line" pos:line="16" pos:column="9">/// Returns &lt;c&gt;true&lt;/c&gt; if &lt;c&gt;Proceed&lt;/c&gt; was called on the original object, and sets &lt;paramref name="timerResult" /&gt;. Returns &lt;c&gt;false&lt;/c&gt; and sets &lt;paramref name="timerResult" /&gt; to &lt;c&gt;null&lt;/c&gt; if &lt;c&gt;RuntimePolicy&lt;/c&gt; is &lt;c&gt;Off&lt;/c&gt;.</comment>
        <comment type="line" pos:line="17" pos:column="9">/// &lt;/returns&gt;</comment>
        <function><type><specifier pos:line="18" pos:column="9">public</specifier> <specifier pos:line="18" pos:column="16">static</specifier> <name pos:line="18" pos:column="23">bool</name></type> <name pos:line="18" pos:column="28">TryProceedWithTimer</name><parameter_list pos:line="18" pos:column="47">(<param><decl><type><name pos:line="18" pos:column="48">this</name> <name pos:line="18" pos:column="53">IAlternateMethodContext</name></type> <name pos:line="18" pos:column="77">context</name></decl></param>, <param><decl><type><specifier pos:line="18" pos:column="86">out</specifier> <name pos:line="18" pos:column="90">TimerResult</name></type> <name pos:line="18" pos:column="102">timerResult</name></decl></param>)</parameter_list>
        <block pos:line="19" pos:column="9">{
            <if pos:line="20" pos:column="13">if <condition pos:line="20" pos:column="16">(<expr><call><name><name pos:line="20" pos:column="17">context</name><op:operator pos:line="20" pos:column="24">.</op:operator><name pos:line="20" pos:column="25">RuntimePolicyStrategy</name></name><argument_list pos:line="20" pos:column="46">()</argument_list></call> <op:operator pos:line="20" pos:column="49">==</op:operator> <name><name pos:line="20" pos:column="52">RuntimePolicy</name><op:operator pos:line="20" pos:column="65">.</op:operator><name pos:line="20" pos:column="66">Off</name></name></expr>)</condition><then pos:line="20" pos:column="70">
            <block pos:line="21" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="22" pos:column="17">context</name><op:operator pos:line="22" pos:column="24">.</op:operator><name pos:line="22" pos:column="25">Proceed</name></name><argument_list pos:line="22" pos:column="32">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="23" pos:column="17">timerResult</name> <op:operator pos:line="23" pos:column="29">=</op:operator> <name pos:line="23" pos:column="31">null</name></expr>;</expr_stmt>
                <return pos:line="24" pos:column="17">return <expr><lit:literal type="boolean" pos:line="24" pos:column="24">false</lit:literal></expr>;</return>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="27" pos:column="13">var</name></type> <name pos:line="27" pos:column="17">timer</name> <init pos:line="27" pos:column="23">= <expr><call><name><name pos:line="27" pos:column="25">context</name><op:operator pos:line="27" pos:column="32">.</op:operator><name pos:line="27" pos:column="33">TimerStrategy</name></name><argument_list pos:line="27" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name pos:line="29" pos:column="13">timerResult</name> <op:operator pos:line="29" pos:column="25">=</op:operator> <call><name><name pos:line="29" pos:column="27">timer</name><op:operator pos:line="29" pos:column="32">.</op:operator><name pos:line="29" pos:column="33">Time</name></name><argument_list pos:line="29" pos:column="37">(<argument><expr><name><name pos:line="29" pos:column="38">context</name><op:operator pos:line="29" pos:column="45">.</op:operator><name pos:line="29" pos:column="46">Proceed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="30" pos:column="13">return <expr><lit:literal type="boolean" pos:line="30" pos:column="20">true</lit:literal></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
