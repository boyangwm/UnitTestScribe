<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Core\Extensibility\AlternateTypeSelector.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Linq</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Reflection</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Castle</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">DynamicProxy</name></name>;</using>

<namespace pos:line="6" pos:column="1">namespace <name><name pos:line="6" pos:column="11">Glimpse</name><op:operator pos:line="6" pos:column="18">.</op:operator><name pos:line="6" pos:column="19">Core</name><op:operator pos:line="6" pos:column="23">.</op:operator><name pos:line="6" pos:column="24">Extensibility</name></name>
<block pos:line="7" pos:column="1">{
    <comment type="line" pos:line="8" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="9" pos:column="5">/// An implementation of Castle DynamicProxy's &lt;see cref="IInterceptorSelector"/&gt; for Glimpse.</comment>
    <comment type="line" pos:line="10" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="11" pos:column="5">public</specifier> class <name pos:line="11" pos:column="18">AlternateTypeSelector</name> <super pos:line="11" pos:column="40">: <name pos:line="11" pos:column="42">IInterceptorSelector</name></super>
    <block pos:line="12" pos:column="5">{
        <comment type="line" pos:line="13" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="14" pos:column="9">/// Selects the interceptors that should intercept calls to the given &lt;paramref name="method" /&gt;.</comment>
        <comment type="line" pos:line="15" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="16" pos:column="9">/// &lt;param name="type"&gt;The type declaring the method to intercept.&lt;/param&gt;</comment>
        <comment type="line" pos:line="17" pos:column="9">/// &lt;param name="method"&gt;The method that will be intercepted.&lt;/param&gt;</comment>
        <comment type="line" pos:line="18" pos:column="9">/// &lt;param name="interceptors"&gt;All interceptors registered with the proxy.&lt;/param&gt;</comment>
        <comment type="line" pos:line="19" pos:column="9">/// &lt;returns&gt;</comment>
        <comment type="line" pos:line="20" pos:column="9">/// An array of interceptors to invoke upon calling the &lt;paramref name="method" /&gt;.</comment>
        <comment type="line" pos:line="21" pos:column="9">/// &lt;/returns&gt;</comment>
        <comment type="line" pos:line="22" pos:column="9">/// &lt;remarks&gt;</comment>
        <comment type="line" pos:line="23" pos:column="9">/// This method is called only once per proxy instance, upon the first call to the</comment>
        <comment type="line" pos:line="24" pos:column="9">/// &lt;paramref name="method" /&gt;. Either an empty array or null are valid return values to indicate</comment>
        <comment type="line" pos:line="25" pos:column="9">/// that no interceptor should intercept calls to the method. Although it is not advised, it is</comment>
        <comment type="line" pos:line="26" pos:column="9">/// legal to return other &lt;see cref="T:Castle.DynamicProxy.IInterceptor" /&gt; implementations than these provided in</comment>
        <comment type="line" pos:line="27" pos:column="9">/// &lt;paramref name="interceptors" /&gt;.</comment>
        <comment type="line" pos:line="28" pos:column="9">/// &lt;/remarks&gt;</comment>
        <function><type><specifier pos:line="29" pos:column="9">public</specifier> <name pos:line="29" pos:column="16">IInterceptor</name><index pos:line="29" pos:column="28">[]</index></type> <name pos:line="29" pos:column="31">SelectInterceptors</name><parameter_list pos:line="29" pos:column="49">(<param><decl><type><name pos:line="29" pos:column="50">Type</name></type> <name pos:line="29" pos:column="55">type</name></decl></param>, <param><decl><type><name pos:line="29" pos:column="61">MethodInfo</name></type> <name pos:line="29" pos:column="72">method</name></decl></param>, <param><decl><type><name><name pos:line="29" pos:column="80">IInterceptor</name><index pos:line="29" pos:column="92">[]</index></name></type> <name pos:line="29" pos:column="95">interceptors</name></decl></param>)</parameter_list>
        <block pos:line="30" pos:column="9">{
            <return pos:line="31" pos:column="13">return <expr><call><name><name pos:line="31" pos:column="20">interceptors</name><op:operator pos:line="31" pos:column="32">.</op:operator><name pos:line="31" pos:column="33">Where</name></name><argument_list pos:line="31" pos:column="38">(<argument><expr><lambda><name pos:line="31" pos:column="39">i</name> <op:operator pos:line="31" pos:column="41">=&gt;</op:operator>
                                          <block pos:line="32" pos:column="43">{
                                              <decl_stmt><decl><type><name pos:line="33" pos:column="47">var</name></type> <name pos:line="33" pos:column="51">ai</name> <init pos:line="33" pos:column="54">= <expr><name pos:line="33" pos:column="56">i</name> <op:operator pos:line="33" pos:column="58">as</op:operator> <name pos:line="33" pos:column="61">AlternateTypeToCastleInterceptorAdapter</name></expr></init></decl>;</decl_stmt>
                                              <return pos:line="34" pos:column="47">return <expr><name pos:line="34" pos:column="54">ai</name> <op:operator pos:line="34" pos:column="57">!=</op:operator> <name pos:line="34" pos:column="60">null</name> <op:operator pos:line="34" pos:column="65">&amp;&amp;</op:operator> <name><name pos:line="34" pos:column="68">ai</name><op:operator pos:line="34" pos:column="70">.</op:operator><name pos:line="34" pos:column="71">MethodToImplement</name></name> <op:operator pos:line="34" pos:column="89">==</op:operator> <name pos:line="34" pos:column="92">method</name></expr>;</return>
                                          }</block></lambda></expr></argument>)</argument_list></call><op:operator pos:line="35" pos:column="45">.</op:operator><call><name pos:line="35" pos:column="46">ToArray</name><argument_list pos:line="35" pos:column="53">()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
