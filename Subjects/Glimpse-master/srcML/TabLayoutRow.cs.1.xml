<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Core\Tab\Assist\TabLayoutRow.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">System</name><op:operator pos:line="1" pos:column="13">.</op:operator><name pos:line="1" pos:column="14">Collections</name><op:operator pos:line="1" pos:column="25">.</op:operator><name pos:line="1" pos:column="26">Generic</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Linq</name></name>;</using>

<namespace pos:line="4" pos:column="1">namespace <name><name pos:line="4" pos:column="11">Glimpse</name><op:operator pos:line="4" pos:column="18">.</op:operator><name pos:line="4" pos:column="19">Core</name><op:operator pos:line="4" pos:column="23">.</op:operator><name pos:line="4" pos:column="24">Tab</name><op:operator pos:line="4" pos:column="27">.</op:operator><name pos:line="4" pos:column="28">Assist</name></name>
<block pos:line="5" pos:column="1">{
    <class><specifier pos:line="6" pos:column="5">public</specifier> class <name pos:line="6" pos:column="18">TabLayoutRow</name> <super pos:line="6" pos:column="31">: <name pos:line="6" pos:column="33">ITabBuild</name></super>
    <block pos:line="7" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="8" pos:column="9">private</specifier> <specifier pos:line="8" pos:column="17">readonly</specifier> <name><name pos:line="8" pos:column="26">List</name><argument_list pos:line="8" pos:column="30">&lt;<argument><name pos:line="8" pos:column="31">TabLayoutCell</name></argument>&gt;</argument_list></name></type> <name pos:line="8" pos:column="46">cells</name> <init pos:line="8" pos:column="52">= <expr><op:operator pos:line="8" pos:column="54">new</op:operator> <call><name><name pos:line="8" pos:column="58">List</name><argument_list pos:line="8" pos:column="62">&lt;<argument><name pos:line="8" pos:column="63">TabLayoutCell</name></argument>&gt;</argument_list></name><argument_list pos:line="8" pos:column="77">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <function><type><specifier pos:line="10" pos:column="9">public</specifier> <name pos:line="10" pos:column="16">TabLayoutCell</name></type> <name pos:line="10" pos:column="30">Cell</name><parameter_list pos:line="10" pos:column="34">(<param><decl><type><name pos:line="10" pos:column="35">int</name></type> <name pos:line="10" pos:column="39">cell</name></decl></param>)</parameter_list>
        <block pos:line="11" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="12" pos:column="13">var</name></type> <name pos:line="12" pos:column="17">layoutCell</name> <init pos:line="12" pos:column="28">= <expr><op:operator pos:line="12" pos:column="30">new</op:operator> <call><name pos:line="12" pos:column="34">TabLayoutCell</name><argument_list pos:line="12" pos:column="47">(<argument><expr><name pos:line="12" pos:column="48">cell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="13" pos:column="13">cells</name><op:operator pos:line="13" pos:column="18">.</op:operator><name pos:line="13" pos:column="19">Add</name></name><argument_list pos:line="13" pos:column="22">(<argument><expr><name pos:line="13" pos:column="23">layoutCell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="14" pos:column="13">return <expr><name pos:line="14" pos:column="20">layoutCell</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="17" pos:column="9">public</specifier> <name pos:line="17" pos:column="16">TabLayoutCell</name></type> <name pos:line="17" pos:column="30">Cell</name><parameter_list pos:line="17" pos:column="34">(<param><decl><type><name pos:line="17" pos:column="35">string</name></type> <name pos:line="17" pos:column="42">format</name></decl></param>)</parameter_list>
        <block pos:line="18" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="19" pos:column="13">var</name></type> <name pos:line="19" pos:column="17">layoutCell</name> <init pos:line="19" pos:column="28">= <expr><op:operator pos:line="19" pos:column="30">new</op:operator> <call><name pos:line="19" pos:column="34">TabLayoutCell</name><argument_list pos:line="19" pos:column="47">(<argument><expr><name pos:line="19" pos:column="48">format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="20" pos:column="13">cells</name><op:operator pos:line="20" pos:column="18">.</op:operator><name pos:line="20" pos:column="19">Add</name></name><argument_list pos:line="20" pos:column="22">(<argument><expr><name pos:line="20" pos:column="23">layoutCell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="21" pos:column="13">return <expr><name pos:line="21" pos:column="20">layoutCell</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="24" pos:column="9">public</specifier> <name pos:line="24" pos:column="16">object</name></type> <name pos:line="24" pos:column="23">Build</name><parameter_list pos:line="24" pos:column="28">()</parameter_list>
        <block pos:line="25" pos:column="9">{
            <return pos:line="26" pos:column="13">return <expr><call><name><name pos:line="26" pos:column="20">cells</name><op:operator pos:line="26" pos:column="25">.</op:operator><name pos:line="26" pos:column="26">Select</name></name><argument_list pos:line="26" pos:column="32">(<argument><expr><lambda><name pos:line="26" pos:column="33">x</name> <op:operator pos:line="26" pos:column="35">=&gt;</op:operator> <call><name><name pos:line="26" pos:column="38">x</name><op:operator pos:line="26" pos:column="39">.</op:operator><name pos:line="26" pos:column="40">Build</name></name><argument_list pos:line="26" pos:column="45">()</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
