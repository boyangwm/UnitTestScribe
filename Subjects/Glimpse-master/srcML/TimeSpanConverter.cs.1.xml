<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Core\SerializationConverter\TimeSpanConverter.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Glimpse</name><op:operator pos:line="3" pos:column="14">.</op:operator><name pos:line="3" pos:column="15">Core</name><op:operator pos:line="3" pos:column="19">.</op:operator><name pos:line="3" pos:column="20">Extensibility</name></name>;</using>

<namespace pos:line="5" pos:column="1">namespace <name><name pos:line="5" pos:column="11">Glimpse</name><op:operator pos:line="5" pos:column="18">.</op:operator><name pos:line="5" pos:column="19">Core</name><op:operator pos:line="5" pos:column="23">.</op:operator><name pos:line="5" pos:column="24">SerializationConverter</name></name>
<block pos:line="6" pos:column="1">{
    <comment type="line" pos:line="7" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="8" pos:column="5">/// The &lt;see cref="ISerializationConverter"/&gt; implementation responsible converting &lt;see cref="TimeSpan"/&gt; representation's into rounded off millisecond counts.</comment>
    <comment type="line" pos:line="9" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="10" pos:column="5">public</specifier> class <name pos:line="10" pos:column="18">TimeSpanConverter</name> <super pos:line="10" pos:column="36">: <name pos:line="10" pos:column="38">ISerializationConverter</name></super>
    <block pos:line="11" pos:column="5">{
        <comment type="line" pos:line="12" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="13" pos:column="9">/// Gets the supported types the converter will be invoked for.</comment>
        <comment type="line" pos:line="14" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="15" pos:column="9">/// &lt;value&gt;</comment>
        <comment type="line" pos:line="16" pos:column="9">/// The supported types.</comment>
        <comment type="line" pos:line="17" pos:column="9">/// &lt;/value&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="18" pos:column="9">public</specifier> <name><name pos:line="18" pos:column="16">IEnumerable</name><argument_list pos:line="18" pos:column="27">&lt;<argument><name pos:line="18" pos:column="28">Type</name></argument>&gt;</argument_list></name></type> <name pos:line="18" pos:column="34">SupportedTypes</name>
        <block pos:line="19" pos:column="9">{
            <function><name pos:line="20" pos:column="13">get</name>
            <block pos:line="21" pos:column="13">{
                <return><specifier pos:line="22" pos:column="17">yield</specifier> return <expr><call><name pos:line="22" pos:column="30">typeof</name><argument_list pos:line="22" pos:column="36">(<argument><expr><name pos:line="22" pos:column="37">TimeSpan</name></expr></argument>)</argument_list></call></expr>;</return>
                <return><specifier pos:line="23" pos:column="17">yield</specifier> return <expr><call><name pos:line="23" pos:column="30">typeof</name><argument_list pos:line="23" pos:column="36">(<argument><expr><name pos:line="23" pos:column="37">TimeSpan</name><op:operator pos:line="23" pos:column="45">?</op:operator></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="27" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="28" pos:column="9">/// Converts the specified date.</comment>
        <comment type="line" pos:line="29" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="30" pos:column="9">/// &lt;param name="date"&gt;The date.&lt;/param&gt;</comment>
        <comment type="line" pos:line="31" pos:column="9">/// &lt;returns&gt;A double of rounded off milliseconds of the length of the time span.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="32" pos:column="9">public</specifier> <name pos:line="32" pos:column="16">object</name></type> <name pos:line="32" pos:column="23">Convert</name><parameter_list pos:line="32" pos:column="30">(<param><decl><type><name pos:line="32" pos:column="31">object</name></type> <name pos:line="32" pos:column="38">date</name></decl></param>)</parameter_list>
        <block pos:line="33" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="34" pos:column="13">var</name></type> <name pos:line="34" pos:column="17">converted</name> <init pos:line="34" pos:column="27">= <expr><name pos:line="34" pos:column="29">date</name> <op:operator pos:line="34" pos:column="34">as</op:operator> <name pos:line="34" pos:column="37">TimeSpan</name><op:operator pos:line="34" pos:column="45">?</op:operator></expr></init></decl>;</decl_stmt>

            <if pos:line="36" pos:column="13">if <condition pos:line="36" pos:column="16">(<expr><name><name pos:line="36" pos:column="17">converted</name><op:operator pos:line="36" pos:column="26">.</op:operator><name pos:line="36" pos:column="27">HasValue</name></name></expr>)</condition><then pos:line="36" pos:column="36">
            <block pos:line="37" pos:column="13">{
                <return pos:line="38" pos:column="17">return <expr><call><name><name pos:line="38" pos:column="24">Math</name><op:operator pos:line="38" pos:column="28">.</op:operator><name pos:line="38" pos:column="29">Round</name></name><argument_list pos:line="38" pos:column="34">(<argument><expr><name><name pos:line="38" pos:column="35">converted</name><op:operator pos:line="38" pos:column="44">.</op:operator><name pos:line="38" pos:column="45">Value</name><op:operator pos:line="38" pos:column="50">.</op:operator><name pos:line="38" pos:column="51">TotalMilliseconds</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="38" pos:column="70">2</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>

            <return pos:line="41" pos:column="13">return <expr><name pos:line="41" pos:column="20">null</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
