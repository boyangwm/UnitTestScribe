<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Mvc\AlternateType\ValueProvider.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Globalization</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Reflection</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Web</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">Mvc</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Glimpse</name><op:operator pos:line="6" pos:column="14">.</op:operator><name pos:line="6" pos:column="15">Core</name><op:operator pos:line="6" pos:column="19">.</op:operator><name pos:line="6" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Glimpse</name><op:operator pos:line="7" pos:column="14">.</op:operator><name pos:line="7" pos:column="15">Core</name><op:operator pos:line="7" pos:column="19">.</op:operator><name pos:line="7" pos:column="20">Message</name></name>;</using>

<cpp:if pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">if</cpp:directive> <expr><name pos:line="9" pos:column="5">MVC2</name></expr></cpp:if>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">Glimpse</name><op:operator pos:line="10" pos:column="14">.</op:operator><name pos:line="10" pos:column="15">Mvc2</name><op:operator pos:line="10" pos:column="19">.</op:operator><name pos:line="10" pos:column="20">Backport</name></name>;</using>
<cpp:endif pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">endif</cpp:directive></cpp:endif>
<cpp:if pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">if</cpp:directive> <expr><name pos:line="12" pos:column="5">MVC3</name></expr></cpp:if>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">Glimpse</name><op:operator pos:line="13" pos:column="14">.</op:operator><name pos:line="13" pos:column="15">Mvc3</name><op:operator pos:line="13" pos:column="19">.</op:operator><name pos:line="13" pos:column="20">Backport</name></name>;</using>
<cpp:endif pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">endif</cpp:directive></cpp:endif>

<namespace pos:line="16" pos:column="1">namespace <name><name pos:line="16" pos:column="11">Glimpse</name><op:operator pos:line="16" pos:column="18">.</op:operator><name pos:line="16" pos:column="19">Mvc</name><op:operator pos:line="16" pos:column="22">.</op:operator><name pos:line="16" pos:column="23">AlternateType</name></name>
<block pos:line="17" pos:column="1">{
    <class><specifier pos:line="18" pos:column="5">public</specifier> class <name><name pos:line="18" pos:column="18">ValueProvider</name><argument_list pos:line="18" pos:column="31">&lt;<argument><name pos:line="18" pos:column="32">T</name></argument>&gt;</argument_list></name> <super pos:line="18" pos:column="35">: <name><name pos:line="18" pos:column="37">AlternateType</name><argument_list pos:line="18" pos:column="50">&lt;<argument><name pos:line="18" pos:column="51">T</name></argument>&gt; <where pos:line="18" pos:column="54">where <name pos:line="18" pos:column="60">T</name> : class</where></argument_list></name></super>
    <block pos:line="19" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="20" pos:column="9">private</specifier> <name><name pos:line="20" pos:column="17">IEnumerable</name><argument_list pos:line="20" pos:column="28">&lt;<argument><name pos:line="20" pos:column="29">IAlternateMethod</name></argument>&gt;</argument_list></name></type> <name pos:line="20" pos:column="47">allMethods</name></decl>;</decl_stmt>

        <comment type="line" pos:line="22" pos:column="9">// This class manages alternate implementations of both IValueProvider, IUnvalidatedValueProvider and IEnumerableValueProvider</comment>
        <constructor><specifier pos:line="23" pos:column="9">public</specifier> <name pos:line="23" pos:column="16">ValueProvider</name><parameter_list pos:line="23" pos:column="29">(<param><decl><type><name pos:line="23" pos:column="30">IProxyFactory</name></type> <name pos:line="23" pos:column="44">proxyFactory</name></decl></param>)</parameter_list> <member_list pos:line="23" pos:column="58">: <call><name pos:line="23" pos:column="60">base</name><argument_list pos:line="23" pos:column="64">(<argument><expr><name pos:line="23" pos:column="65">proxyFactory</name></expr></argument>)</argument_list></call>
        </member_list><block pos:line="24" pos:column="9">{
        }</block></constructor>

        <decl_stmt><decl><type><specifier pos:line="27" pos:column="9">public</specifier> <specifier pos:line="27" pos:column="16">override</specifier> <name><name pos:line="27" pos:column="25">IEnumerable</name><argument_list pos:line="27" pos:column="36">&lt;<argument><name pos:line="27" pos:column="37">IAlternateMethod</name></argument>&gt;</argument_list></name></type> <name pos:line="27" pos:column="55">AllMethods</name>
        <block pos:line="28" pos:column="9">{
            <function><name pos:line="29" pos:column="13">get</name>
            <block pos:line="30" pos:column="13">{
                <return pos:line="31" pos:column="17">return <expr><name pos:line="31" pos:column="24">allMethods</name> <op:operator pos:line="31" pos:column="35">??</op:operator> <op:operator pos:line="31" pos:column="38">(</op:operator><name pos:line="31" pos:column="39">allMethods</name> <op:operator pos:line="31" pos:column="50">=</op:operator> <op:operator pos:line="31" pos:column="52">new</op:operator> <name><name pos:line="31" pos:column="56">List</name><argument_list pos:line="31" pos:column="60">&lt;<argument><name pos:line="31" pos:column="61">IAlternateMethod</name></argument>&gt;</argument_list></name>
                    <block pos:line="32" pos:column="21">{
                        <expr><op:operator pos:line="33" pos:column="25">new</op:operator> <call><name pos:line="33" pos:column="29">GetValue</name><argument_list pos:line="33" pos:column="37">()</argument_list></call></expr><op:operator pos:line="33" pos:column="39">,</op:operator> 
                        <expr><op:operator pos:line="34" pos:column="25">new</op:operator> <call><name pos:line="34" pos:column="29">ContainsPrefix</name><argument_list pos:line="34" pos:column="43">()</argument_list></call></expr><op:operator pos:line="34" pos:column="45">,</op:operator>
                        <expr><op:operator pos:line="35" pos:column="25">new</op:operator> <call><name pos:line="35" pos:column="29">GetKeysFromPrefix</name><argument_list pos:line="35" pos:column="46">()</argument_list></call></expr>
                    }</block>)</expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <class><specifier pos:line="40" pos:column="9">public</specifier> class <name pos:line="40" pos:column="22">ContainsPrefix</name> <super pos:line="40" pos:column="37">: <name pos:line="40" pos:column="39">AlternateMethod</name></super>
        <block pos:line="41" pos:column="9">{
            <constructor><specifier pos:line="42" pos:column="13">public</specifier> <name pos:line="42" pos:column="20">ContainsPrefix</name><parameter_list pos:line="42" pos:column="34">()</parameter_list> <member_list pos:line="42" pos:column="37">: <call><name pos:line="42" pos:column="39">base</name><argument_list pos:line="42" pos:column="43">(<argument><expr><call><name pos:line="42" pos:column="44">typeof</name><argument_list pos:line="42" pos:column="50">(<argument><expr><name pos:line="42" pos:column="51">IValueProvider</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="42" pos:column="68">"ContainsPrefix"</lit:literal></expr></argument>)</argument_list></call>
            </member_list><block pos:line="43" pos:column="13">{
            }</block></constructor>

            <function><type><specifier pos:line="46" pos:column="13">public</specifier> <specifier pos:line="46" pos:column="20">override</specifier> <name pos:line="46" pos:column="29">void</name></type> <name pos:line="46" pos:column="34">PostImplementation</name><parameter_list pos:line="46" pos:column="52">(<param><decl><type><name pos:line="46" pos:column="53">IAlternateMethodContext</name></type> <name pos:line="46" pos:column="77">context</name></decl></param>, <param><decl><type><name pos:line="46" pos:column="86">TimerResult</name></type> <name pos:line="46" pos:column="98">timerResult</name></decl></param>)</parameter_list>
            <block pos:line="47" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="48" pos:column="17">var</name></type> <name pos:line="48" pos:column="21">message</name> <init pos:line="48" pos:column="29">= <expr><op:operator pos:line="48" pos:column="31">new</op:operator> <call><name pos:line="48" pos:column="35">Message</name><argument_list pos:line="48" pos:column="42">(<argument><expr><op:operator pos:line="48" pos:column="43">(</op:operator><name pos:line="48" pos:column="44">string</name><op:operator pos:line="48" pos:column="50">)</op:operator><name><name pos:line="48" pos:column="51">context</name><op:operator pos:line="48" pos:column="58">.</op:operator><name pos:line="48" pos:column="59">Arguments</name><index pos:line="48" pos:column="68">[<expr><lit:literal type="number" pos:line="48" pos:column="69">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><op:operator pos:line="48" pos:column="73">(</op:operator><name pos:line="48" pos:column="74">bool</name><op:operator pos:line="48" pos:column="78">)</op:operator><name><name pos:line="48" pos:column="79">context</name><op:operator pos:line="48" pos:column="86">.</op:operator><name pos:line="48" pos:column="87">ReturnValue</name></name></expr></argument>, <argument><expr><name><name pos:line="48" pos:column="100">context</name><op:operator pos:line="48" pos:column="107">.</op:operator><name pos:line="48" pos:column="108">TargetType</name></name></expr></argument>)</argument_list></call>
                    <op:operator pos:line="49" pos:column="21">.</op:operator><call><name pos:line="49" pos:column="22">AsSourceMessage</name><argument_list pos:line="49" pos:column="37">(<argument><expr><name><name pos:line="49" pos:column="38">context</name><op:operator pos:line="49" pos:column="45">.</op:operator><name pos:line="49" pos:column="46">TargetType</name></name></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="58">context</name><op:operator pos:line="49" pos:column="65">.</op:operator><name pos:line="49" pos:column="66">MethodInvocationTarget</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name pos:line="51" pos:column="17">context</name><op:operator pos:line="51" pos:column="24">.</op:operator><name pos:line="51" pos:column="25">MessageBroker</name><op:operator pos:line="51" pos:column="38">.</op:operator><name pos:line="51" pos:column="39">Publish</name></name><argument_list pos:line="51" pos:column="46">(<argument><expr><name pos:line="51" pos:column="47">message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <class><specifier pos:line="54" pos:column="13">public</specifier> class <name pos:line="54" pos:column="26">Message</name> <super pos:line="54" pos:column="34">: <name pos:line="54" pos:column="36">MessageBase</name>, <name pos:line="54" pos:column="49">ISourceMessage</name></super>
            <block pos:line="55" pos:column="13">{
                <constructor><specifier pos:line="56" pos:column="17">public</specifier> <name pos:line="56" pos:column="24">Message</name><parameter_list pos:line="56" pos:column="31">(<param><decl><type><name pos:line="56" pos:column="32">string</name></type> <name pos:line="56" pos:column="39">prefix</name></decl></param>, <param><decl><type><name pos:line="56" pos:column="47">bool</name></type> <name pos:line="56" pos:column="52">isMatch</name></decl></param>, <param><decl><type><name pos:line="56" pos:column="61">Type</name></type> <name pos:line="56" pos:column="66">valueProviderType</name></decl></param>)</parameter_list>
                <block pos:line="57" pos:column="17">{
                    <expr_stmt><expr><name pos:line="58" pos:column="21">Prefix</name> <op:operator pos:line="58" pos:column="28">=</op:operator> <name pos:line="58" pos:column="30">prefix</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="59" pos:column="21">IsMatch</name> <op:operator pos:line="59" pos:column="29">=</op:operator> <name pos:line="59" pos:column="31">isMatch</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="60" pos:column="21">ValueProviderType</name> <op:operator pos:line="60" pos:column="39">=</op:operator> <name pos:line="60" pos:column="41">valueProviderType</name></expr>;</expr_stmt>
                }</block></constructor>

                <decl_stmt><decl><type><specifier pos:line="63" pos:column="17">public</specifier> <name pos:line="63" pos:column="24">bool</name></type> <name pos:line="63" pos:column="29">IsMatch</name> <block pos:line="63" pos:column="37">{ <function_decl><name pos:line="63" pos:column="39">get</name>;</function_decl> <function_decl><specifier pos:line="63" pos:column="44">private</specifier> <name pos:line="63" pos:column="52">set</name>;</function_decl> }</block></decl></decl_stmt>

                <decl_stmt><decl><type><specifier pos:line="65" pos:column="17">public</specifier> <name pos:line="65" pos:column="24">Type</name></type> <name pos:line="65" pos:column="29">ValueProviderType</name> <block pos:line="65" pos:column="47">{ <function_decl><name pos:line="65" pos:column="49">get</name>;</function_decl> <function_decl><specifier pos:line="65" pos:column="54">private</specifier> <name pos:line="65" pos:column="62">set</name>;</function_decl> }</block></decl></decl_stmt>

                <decl_stmt><decl><type><specifier pos:line="67" pos:column="17">public</specifier> <name pos:line="67" pos:column="24">string</name></type> <name pos:line="67" pos:column="31">Prefix</name> <block pos:line="67" pos:column="38">{ <function_decl><name pos:line="67" pos:column="40">get</name>;</function_decl> <function_decl><specifier pos:line="67" pos:column="45">private</specifier> <name pos:line="67" pos:column="53">set</name>;</function_decl> }</block></decl></decl_stmt>

                <decl_stmt><decl><type><specifier pos:line="69" pos:column="17">public</specifier> <name pos:line="69" pos:column="24">Type</name></type> <name pos:line="69" pos:column="29">ExecutedType</name> <block pos:line="69" pos:column="42">{ <function_decl><name pos:line="69" pos:column="44">get</name>;</function_decl> <function_decl><name pos:line="69" pos:column="49">set</name>;</function_decl> }</block></decl></decl_stmt>

                <decl_stmt><decl><type><specifier pos:line="71" pos:column="17">public</specifier> <name pos:line="71" pos:column="24">MethodInfo</name></type> <name pos:line="71" pos:column="35">ExecutedMethod</name> <block pos:line="71" pos:column="50">{ <function_decl><name pos:line="71" pos:column="52">get</name>;</function_decl> <function_decl><name pos:line="71" pos:column="57">set</name>;</function_decl> }</block></decl></decl_stmt>
            }</block></class>
        }</block></class>

        <class><specifier pos:line="75" pos:column="9">public</specifier> class <name pos:line="75" pos:column="22">GetValue</name> <super pos:line="75" pos:column="31">: <name pos:line="75" pos:column="33">AlternateMethod</name></super>
        <block pos:line="76" pos:column="9">{
            <constructor><specifier pos:line="77" pos:column="13">public</specifier> <name pos:line="77" pos:column="20">GetValue</name><parameter_list pos:line="77" pos:column="28">()</parameter_list> <member_list pos:line="77" pos:column="31">: <call><name pos:line="77" pos:column="33">base</name><argument_list pos:line="77" pos:column="37">(<argument><expr><call><name pos:line="77" pos:column="38">typeof</name><argument_list pos:line="77" pos:column="44">(<argument><expr><name pos:line="77" pos:column="45">IValueProvider</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="77" pos:column="62">"GetValue"</lit:literal></expr></argument>)</argument_list></call>
            </member_list><block pos:line="78" pos:column="13">{
            }</block></constructor>

            <function><type><specifier pos:line="81" pos:column="13">public</specifier> <specifier pos:line="81" pos:column="20">override</specifier> <name pos:line="81" pos:column="29">void</name></type> <name pos:line="81" pos:column="34">PostImplementation</name><parameter_list pos:line="81" pos:column="52">(<param><decl><type><name pos:line="81" pos:column="53">IAlternateMethodContext</name></type> <name pos:line="81" pos:column="77">context</name></decl></param>, <param><decl><type><name pos:line="81" pos:column="86">TimerResult</name></type> <name pos:line="81" pos:column="98">timerResult</name></decl></param>)</parameter_list>
            <block pos:line="82" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="83" pos:column="17">var</name></type> <name pos:line="83" pos:column="21">args</name> <init pos:line="83" pos:column="26">= <expr><op:operator pos:line="83" pos:column="28">new</op:operator> <call><name pos:line="83" pos:column="32">Arguments</name><argument_list pos:line="83" pos:column="41">(<argument><expr><name><name pos:line="83" pos:column="42">context</name><op:operator pos:line="83" pos:column="49">.</op:operator><name pos:line="83" pos:column="50">Arguments</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="84" pos:column="17">var</name></type> <name pos:line="84" pos:column="21">message</name> <init pos:line="84" pos:column="29">= <expr><op:operator pos:line="84" pos:column="31">new</op:operator> <call><name pos:line="84" pos:column="35">Message</name><argument_list pos:line="84" pos:column="42">(<argument><expr><name><name pos:line="84" pos:column="43">args</name><op:operator pos:line="84" pos:column="47">.</op:operator><name pos:line="84" pos:column="48">Key</name></name></expr></argument>, <argument><expr><name><name pos:line="84" pos:column="53">context</name><op:operator pos:line="84" pos:column="60">.</op:operator><name pos:line="84" pos:column="61">ReturnValue</name></name> <op:operator pos:line="84" pos:column="73">as</op:operator> <name pos:line="84" pos:column="76">ValueProviderResult</name></expr></argument>, <argument><expr><name><name pos:line="84" pos:column="97">context</name><op:operator pos:line="84" pos:column="104">.</op:operator><name pos:line="84" pos:column="105">TargetType</name></name></expr></argument>)</argument_list></call>
                    <op:operator pos:line="85" pos:column="21">.</op:operator><call><name pos:line="85" pos:column="22">AsSourceMessage</name><argument_list pos:line="85" pos:column="37">(<argument><expr><name><name pos:line="85" pos:column="38">context</name><op:operator pos:line="85" pos:column="45">.</op:operator><name pos:line="85" pos:column="46">TargetType</name></name></expr></argument>, <argument><expr><name><name pos:line="85" pos:column="58">context</name><op:operator pos:line="85" pos:column="65">.</op:operator><name pos:line="85" pos:column="66">MethodInvocationTarget</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name pos:line="87" pos:column="17">context</name><op:operator pos:line="87" pos:column="24">.</op:operator><name pos:line="87" pos:column="25">MessageBroker</name><op:operator pos:line="87" pos:column="38">.</op:operator><name pos:line="87" pos:column="39">Publish</name></name><argument_list pos:line="87" pos:column="46">(<argument><expr><name pos:line="87" pos:column="47">message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <class><specifier pos:line="90" pos:column="13">public</specifier> class <name pos:line="90" pos:column="26">Arguments</name>
            <block pos:line="91" pos:column="13">{
                <constructor><specifier pos:line="92" pos:column="17">public</specifier> <name pos:line="92" pos:column="24">Arguments</name><parameter_list pos:line="92" pos:column="33">(<param><decl><type><specifier pos:line="92" pos:column="34">params</specifier> <name><name pos:line="92" pos:column="41">object</name><index pos:line="92" pos:column="47">[]</index></name></type> <name pos:line="92" pos:column="50">arguments</name></decl></param>)</parameter_list>
                <block pos:line="93" pos:column="17">{
                    <expr_stmt><expr><name pos:line="94" pos:column="21">SkipValidation</name> <op:operator pos:line="94" pos:column="36">=</op:operator> <lit:literal type="boolean" pos:line="94" pos:column="38">false</lit:literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="95" pos:column="21">Key</name> <op:operator pos:line="95" pos:column="25">=</op:operator> <op:operator pos:line="95" pos:column="27">(</op:operator><name pos:line="95" pos:column="28">string</name><op:operator pos:line="95" pos:column="34">)</op:operator><name><name pos:line="95" pos:column="35">arguments</name><index pos:line="95" pos:column="44">[<expr><lit:literal type="number" pos:line="95" pos:column="45">0</lit:literal></expr>]</index></name></expr>;</expr_stmt>

                    <if pos:line="97" pos:column="21">if <condition pos:line="97" pos:column="24">(<expr><name><name pos:line="97" pos:column="25">arguments</name><op:operator pos:line="97" pos:column="34">.</op:operator><name pos:line="97" pos:column="35">Length</name></name> <op:operator pos:line="97" pos:column="42">&gt;</op:operator> <lit:literal type="number" pos:line="97" pos:column="44">1</lit:literal></expr>)</condition><then pos:line="97" pos:column="46">
                    <block pos:line="98" pos:column="21">{
                        <expr_stmt><expr><name pos:line="99" pos:column="25">SkipValidation</name> <op:operator pos:line="99" pos:column="40">=</op:operator> <op:operator pos:line="99" pos:column="42">(</op:operator><name pos:line="99" pos:column="43">bool</name><op:operator pos:line="99" pos:column="47">)</op:operator><name><name pos:line="99" pos:column="48">arguments</name><index pos:line="99" pos:column="57">[<expr><lit:literal type="number" pos:line="99" pos:column="58">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></constructor>

                <decl_stmt><decl><type><specifier pos:line="103" pos:column="17">public</specifier> <name pos:line="103" pos:column="24">string</name></type> <name pos:line="103" pos:column="31">Key</name> <block pos:line="103" pos:column="35">{ <function_decl><name pos:line="103" pos:column="37">get</name>;</function_decl> <function_decl><name pos:line="103" pos:column="42">set</name>;</function_decl> }</block></decl></decl_stmt>

                <decl_stmt><decl><type><specifier pos:line="105" pos:column="17">public</specifier> <name pos:line="105" pos:column="24">bool</name></type> <name pos:line="105" pos:column="29">SkipValidation</name> <block pos:line="105" pos:column="44">{ <function_decl><name pos:line="105" pos:column="46">get</name>;</function_decl> <function_decl><name pos:line="105" pos:column="51">set</name>;</function_decl> }</block></decl></decl_stmt>
            }</block></class>

            <class><specifier pos:line="108" pos:column="13">public</specifier> class <name pos:line="108" pos:column="26">Message</name> <super pos:line="108" pos:column="34">: <name pos:line="108" pos:column="36">MessageBase</name>, <name pos:line="108" pos:column="49">ISourceMessage</name></super>
            <block pos:line="109" pos:column="13">{
                <constructor><specifier pos:line="110" pos:column="17">public</specifier> <name pos:line="110" pos:column="24">Message</name><parameter_list pos:line="110" pos:column="31">(<param><decl><type><name pos:line="110" pos:column="32">string</name></type> <name pos:line="110" pos:column="39">key</name></decl></param>, <param><decl><type><name pos:line="110" pos:column="44">ValueProviderResult</name></type> <name pos:line="110" pos:column="64">result</name></decl></param>, <param><decl><type><name pos:line="110" pos:column="72">Type</name></type> <name pos:line="110" pos:column="77">valueProviderType</name></decl></param>)</parameter_list>
                <block pos:line="111" pos:column="17">{
                    <expr_stmt><expr><name pos:line="112" pos:column="21">Key</name> <op:operator pos:line="112" pos:column="25">=</op:operator> <name pos:line="112" pos:column="27">key</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="113" pos:column="21">IsFound</name> <op:operator pos:line="113" pos:column="29">=</op:operator> <lit:literal type="boolean" pos:line="113" pos:column="31">false</lit:literal></expr>;</expr_stmt>
                    <if pos:line="114" pos:column="21">if <condition pos:line="114" pos:column="24">(<expr><name pos:line="114" pos:column="25">result</name> <op:operator pos:line="114" pos:column="32">!=</op:operator> <name pos:line="114" pos:column="35">null</name></expr>)</condition><then pos:line="114" pos:column="40">
                    <block pos:line="115" pos:column="21">{
                        <expr_stmt><expr><name pos:line="116" pos:column="25">IsFound</name> <op:operator pos:line="116" pos:column="33">=</op:operator> <lit:literal type="boolean" pos:line="116" pos:column="35">true</lit:literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="117" pos:column="25">AttemptedValue</name> <op:operator pos:line="117" pos:column="40">=</op:operator> <name><name pos:line="117" pos:column="42">result</name><op:operator pos:line="117" pos:column="48">.</op:operator><name pos:line="117" pos:column="49">AttemptedValue</name></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="118" pos:column="25">Culture</name> <op:operator pos:line="118" pos:column="33">=</op:operator> <call><name><name pos:line="118" pos:column="35">CultureInfo</name><op:operator pos:line="118" pos:column="46">.</op:operator><name pos:line="118" pos:column="47">ReadOnly</name></name><argument_list pos:line="118" pos:column="55">(<argument><expr><name><name pos:line="118" pos:column="56">result</name><op:operator pos:line="118" pos:column="62">.</op:operator><name pos:line="118" pos:column="63">Culture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="119" pos:column="25">RawValue</name> <op:operator pos:line="119" pos:column="34">=</op:operator> <name><name pos:line="119" pos:column="36">result</name><op:operator pos:line="119" pos:column="42">.</op:operator><name pos:line="119" pos:column="43">RawValue</name></name></expr>;</expr_stmt>
                    }</block></then></if>

                    <expr_stmt><expr><name pos:line="122" pos:column="21">ValueProviderType</name> <op:operator pos:line="122" pos:column="39">=</op:operator> <name pos:line="122" pos:column="41">valueProviderType</name></expr>;</expr_stmt>
                }</block></constructor>

                <decl_stmt><decl><type><specifier pos:line="125" pos:column="17">public</specifier> <name pos:line="125" pos:column="24">string</name></type> <name pos:line="125" pos:column="31">Key</name> <block pos:line="125" pos:column="35">{ <function_decl><name pos:line="125" pos:column="37">get</name>;</function_decl> <function_decl><name pos:line="125" pos:column="42">set</name>;</function_decl> }</block></decl></decl_stmt>

                <decl_stmt><decl><type><specifier pos:line="127" pos:column="17">public</specifier> <name pos:line="127" pos:column="24">bool</name></type> <name pos:line="127" pos:column="29">IsFound</name> <block pos:line="127" pos:column="37">{ <function_decl><name pos:line="127" pos:column="39">get</name>;</function_decl> <function_decl><specifier pos:line="127" pos:column="44">private</specifier> <name pos:line="127" pos:column="52">set</name>;</function_decl> }</block></decl></decl_stmt>

                <decl_stmt><decl><type><specifier pos:line="129" pos:column="17">public</specifier> <name pos:line="129" pos:column="24">Type</name></type> <name pos:line="129" pos:column="29">ValueProviderType</name> <block pos:line="129" pos:column="47">{ <function_decl><name pos:line="129" pos:column="49">get</name>;</function_decl> <function_decl><specifier pos:line="129" pos:column="54">private</specifier> <name pos:line="129" pos:column="62">set</name>;</function_decl> }</block></decl></decl_stmt>

                <decl_stmt><decl><type><specifier pos:line="131" pos:column="17">public</specifier> <name pos:line="131" pos:column="24">object</name></type> <name pos:line="131" pos:column="31">RawValue</name> <block pos:line="131" pos:column="40">{ <function_decl><name pos:line="131" pos:column="42">get</name>;</function_decl> <function_decl><specifier pos:line="131" pos:column="47">private</specifier> <name pos:line="131" pos:column="55">set</name>;</function_decl> }</block></decl></decl_stmt>

                <decl_stmt><decl><type><specifier pos:line="133" pos:column="17">public</specifier> <name pos:line="133" pos:column="24">CultureInfo</name></type> <name pos:line="133" pos:column="36">Culture</name> <block pos:line="133" pos:column="44">{ <function_decl><name pos:line="133" pos:column="46">get</name>;</function_decl> <function_decl><specifier pos:line="133" pos:column="51">private</specifier> <name pos:line="133" pos:column="59">set</name>;</function_decl> }</block></decl></decl_stmt>

                <decl_stmt><decl><type><specifier pos:line="135" pos:column="17">public</specifier> <name pos:line="135" pos:column="24">string</name></type> <name pos:line="135" pos:column="31">AttemptedValue</name> <block pos:line="135" pos:column="46">{ <function_decl><name pos:line="135" pos:column="48">get</name>;</function_decl> <function_decl><specifier pos:line="135" pos:column="53">private</specifier> <name pos:line="135" pos:column="61">set</name>;</function_decl> }</block></decl></decl_stmt>

                <decl_stmt><decl><type><specifier pos:line="137" pos:column="17">public</specifier> <name pos:line="137" pos:column="24">Type</name></type> <name pos:line="137" pos:column="29">ExecutedType</name> <block pos:line="137" pos:column="42">{ <function_decl><name pos:line="137" pos:column="44">get</name>;</function_decl> <function_decl><name pos:line="137" pos:column="49">set</name>;</function_decl> }</block></decl></decl_stmt>

                <decl_stmt><decl><type><specifier pos:line="139" pos:column="17">public</specifier> <name pos:line="139" pos:column="24">MethodInfo</name></type> <name pos:line="139" pos:column="35">ExecutedMethod</name> <block pos:line="139" pos:column="50">{ <function_decl><name pos:line="139" pos:column="52">get</name>;</function_decl> <function_decl><name pos:line="139" pos:column="57">set</name>;</function_decl> }</block></decl></decl_stmt>
            }</block></class>
        }</block></class>

        <class><specifier pos:line="143" pos:column="9">public</specifier> class <name pos:line="143" pos:column="22">GetKeysFromPrefix</name> <super pos:line="143" pos:column="40">: <name pos:line="143" pos:column="42">AlternateMethod</name></super>
        <block pos:line="144" pos:column="9">{
            <constructor><specifier pos:line="145" pos:column="13">public</specifier> <name pos:line="145" pos:column="20">GetKeysFromPrefix</name><parameter_list pos:line="145" pos:column="37">()</parameter_list>
                <member_list pos:line="146" pos:column="17">: <call><name pos:line="146" pos:column="19">base</name><argument_list pos:line="146" pos:column="23">(<argument><expr><call><name pos:line="146" pos:column="24">typeof</name><argument_list pos:line="146" pos:column="30">(<argument><expr><name pos:line="146" pos:column="31">IEnumerableValueProvider</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="146" pos:column="58">"GetKeysFromPrefix"</lit:literal></expr></argument>)</argument_list></call>
            </member_list><block pos:line="147" pos:column="13">{
            }</block></constructor>

            <function><type><specifier pos:line="150" pos:column="13">public</specifier> <specifier pos:line="150" pos:column="20">override</specifier> <name pos:line="150" pos:column="29">void</name></type> <name pos:line="150" pos:column="34">PostImplementation</name><parameter_list pos:line="150" pos:column="52">(<param><decl><type><name pos:line="150" pos:column="53">IAlternateMethodContext</name></type> <name pos:line="150" pos:column="77">context</name></decl></param>, <param><decl><type><name pos:line="150" pos:column="86">TimerResult</name></type> <name pos:line="150" pos:column="98">timerResult</name></decl></param>)</parameter_list>
            <block pos:line="151" pos:column="13">{
            }</block></function>
        }</block></class>
    }</block></class>
}</block></namespace></unit>
