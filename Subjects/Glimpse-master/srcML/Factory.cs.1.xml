<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Core\Framework\Factory.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Configuration</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">IO</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Linq</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Glimpse</name><op:operator pos:line="6" pos:column="14">.</op:operator><name pos:line="6" pos:column="15">Core</name><op:operator pos:line="6" pos:column="19">.</op:operator><name pos:line="6" pos:column="20">Configuration</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Glimpse</name><op:operator pos:line="7" pos:column="14">.</op:operator><name pos:line="7" pos:column="15">Core</name><op:operator pos:line="7" pos:column="19">.</op:operator><name pos:line="7" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Glimpse</name><op:operator pos:line="8" pos:column="14">.</op:operator><name pos:line="8" pos:column="15">Core</name><op:operator pos:line="8" pos:column="19">.</op:operator><name pos:line="8" pos:column="20">Extensions</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">Glimpse</name><op:operator pos:line="9" pos:column="14">.</op:operator><name pos:line="9" pos:column="15">Core</name><op:operator pos:line="9" pos:column="19">.</op:operator><name pos:line="9" pos:column="20">Resource</name></name>;</using>
<using pos:line="10" pos:column="1">using <name pos:line="10" pos:column="7">NLog</name>;</using>
<using pos:line="11" pos:column="1">using <name><name pos:line="11" pos:column="7">NLog</name><op:operator pos:line="11" pos:column="11">.</op:operator><name pos:line="11" pos:column="12">Config</name></name>;</using>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">NLog</name><op:operator pos:line="12" pos:column="11">.</op:operator><name pos:line="12" pos:column="12">Targets</name></name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">NLog</name><op:operator pos:line="13" pos:column="11">.</op:operator><name pos:line="13" pos:column="12">Targets</name><op:operator pos:line="13" pos:column="19">.</op:operator><name pos:line="13" pos:column="20">Wrappers</name></name>;</using>

<namespace pos:line="15" pos:column="1">namespace <name><name pos:line="15" pos:column="11">Glimpse</name><op:operator pos:line="15" pos:column="18">.</op:operator><name pos:line="15" pos:column="19">Core</name><op:operator pos:line="15" pos:column="23">.</op:operator><name pos:line="15" pos:column="24">Framework</name></name>
<block pos:line="16" pos:column="1">{
    <comment type="line" pos:line="17" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="18" pos:column="5">/// The main bootstrapper for Glimpse, &lt;c&gt;Factory&lt;/c&gt; (or its derived types) is responsible for instantiating all required configurable types.</comment>
    <comment type="line" pos:line="19" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="20" pos:column="5">public</specifier> class <name pos:line="20" pos:column="18">Factory</name>
    <block pos:line="21" pos:column="5">{
        <comment type="line" pos:line="22" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="23" pos:column="9">/// Initializes a new instance of the &lt;see cref="Factory" /&gt; class without any &lt;see cref="IServiceLocator"/&gt; implementations.</comment>
        <comment type="line" pos:line="24" pos:column="9">/// &lt;/summary&gt;</comment>
        <constructor><specifier pos:line="25" pos:column="9">public</specifier> <name pos:line="25" pos:column="16">Factory</name><parameter_list pos:line="25" pos:column="23">()</parameter_list> <member_list pos:line="25" pos:column="26">: <call><name pos:line="25" pos:column="28">this</name><argument_list pos:line="25" pos:column="32">(<argument><expr><name pos:line="25" pos:column="33">null</name></expr></argument>)</argument_list></call>
        </member_list><block pos:line="26" pos:column="9">{
        }</block></constructor>

        <comment type="line" pos:line="29" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="30" pos:column="9">/// Initializes a new instance of the &lt;see cref="Factory" /&gt; class without a &lt;see cref="IServiceLocator"/&gt; implementation from the framework provider.</comment>
        <comment type="line" pos:line="31" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="32" pos:column="9">/// &lt;param name="providerServiceLocator"&gt;The framework provider's service locator.&lt;/param&gt;</comment>
        <constructor><specifier pos:line="33" pos:column="9">public</specifier> <name pos:line="33" pos:column="16">Factory</name><parameter_list pos:line="33" pos:column="23">(<param><decl><type><name pos:line="33" pos:column="24">IServiceLocator</name></type> <name pos:line="33" pos:column="40">providerServiceLocator</name></decl></param>)</parameter_list> <member_list pos:line="33" pos:column="64">: <call><name pos:line="33" pos:column="66">this</name><argument_list pos:line="33" pos:column="70">(<argument><expr><name pos:line="33" pos:column="71">providerServiceLocator</name></expr></argument>, <argument><expr><name pos:line="33" pos:column="95">null</name></expr></argument>)</argument_list></call>
        </member_list><block pos:line="34" pos:column="9">{
        }</block></constructor>

        <comment type="line" pos:line="37" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="38" pos:column="9">/// Initializes a new instance of the &lt;see cref="Factory" /&gt; class.</comment>
        <comment type="line" pos:line="39" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="40" pos:column="9">/// &lt;param name="providerServiceLocator"&gt;The framework provider's service locator.&lt;/param&gt;</comment>
        <comment type="line" pos:line="41" pos:column="9">/// &lt;param name="userServiceLocator"&gt;The user's service locator.&lt;/param&gt;</comment>
        <constructor><specifier pos:line="42" pos:column="9">public</specifier> <name pos:line="42" pos:column="16">Factory</name><parameter_list pos:line="42" pos:column="23">(<param><decl><type><name pos:line="42" pos:column="24">IServiceLocator</name></type> <name pos:line="42" pos:column="40">providerServiceLocator</name></decl></param>, <param><decl><type><name pos:line="42" pos:column="64">IServiceLocator</name></type> <name pos:line="42" pos:column="80">userServiceLocator</name></decl></param>)</parameter_list> <member_list pos:line="42" pos:column="100">: <call><name pos:line="42" pos:column="102">this</name><argument_list pos:line="42" pos:column="106">(<argument><expr><name pos:line="42" pos:column="107">providerServiceLocator</name></expr></argument>, <argument><expr><name pos:line="42" pos:column="131">userServiceLocator</name></expr></argument>, <argument><expr><name pos:line="42" pos:column="151">null</name></expr></argument>)</argument_list></call>
        </member_list><block pos:line="43" pos:column="9">{
        }</block></constructor>

        <comment type="line" pos:line="46" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="47" pos:column="9">/// Initializes a new instance of the &lt;see cref="Factory" /&gt; class.</comment>
        <comment type="line" pos:line="48" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="49" pos:column="9">/// &lt;param name="providerServiceLocator"&gt;The framework provider's service locator.&lt;/param&gt;</comment>
        <comment type="line" pos:line="50" pos:column="9">/// &lt;param name="userServiceLocator"&gt;The user's service locator.&lt;/param&gt;</comment>
        <comment type="line" pos:line="51" pos:column="9">/// &lt;param name="configuration"&gt;The Glimpse configuration to use.&lt;/param&gt;</comment>
        <constructor><specifier pos:line="52" pos:column="9">public</specifier> <name pos:line="52" pos:column="16">Factory</name><parameter_list pos:line="52" pos:column="23">(<param><decl><type><name pos:line="52" pos:column="24">IServiceLocator</name></type> <name pos:line="52" pos:column="40">providerServiceLocator</name></decl></param>, <param><decl><type><name pos:line="52" pos:column="64">IServiceLocator</name></type> <name pos:line="52" pos:column="80">userServiceLocator</name></decl></param>, <param><decl><type><name pos:line="52" pos:column="100">Section</name></type> <name pos:line="52" pos:column="108">configuration</name></decl></param>)</parameter_list>
        <block pos:line="53" pos:column="9">{
            <expr_stmt><expr><name pos:line="54" pos:column="13">Configuration</name> <op:operator pos:line="54" pos:column="27">=</op:operator> <name pos:line="54" pos:column="29">configuration</name> <op:operator pos:line="54" pos:column="43">??</op:operator> <call><name><name pos:line="54" pos:column="46">ConfigurationManager</name><op:operator pos:line="54" pos:column="66">.</op:operator><name pos:line="54" pos:column="67">GetSection</name></name><argument_list pos:line="54" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="54" pos:column="78">"glimpse"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="54" pos:column="89">as</op:operator> <name pos:line="54" pos:column="92">Section</name> <op:operator pos:line="54" pos:column="100">??</op:operator> <op:operator pos:line="54" pos:column="103">new</op:operator> <call><name pos:line="54" pos:column="107">Section</name><argument_list pos:line="54" pos:column="114">()</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="56" pos:column="13">IServiceLocator</name></type> <name pos:line="56" pos:column="29">loadedServiceLocator</name> <init pos:line="56" pos:column="50">= <expr><name pos:line="56" pos:column="52">null</name></expr></init></decl>;</decl_stmt>
            <if pos:line="57" pos:column="13">if <condition pos:line="57" pos:column="16">(<expr><name pos:line="57" pos:column="17">userServiceLocator</name> <op:operator pos:line="57" pos:column="36">==</op:operator> <name pos:line="57" pos:column="39">null</name> <op:operator pos:line="57" pos:column="44">&amp;&amp;</op:operator> <name><name pos:line="57" pos:column="47">Configuration</name><op:operator pos:line="57" pos:column="60">.</op:operator><name pos:line="57" pos:column="61">ServiceLocatorType</name></name> <op:operator pos:line="57" pos:column="80">!=</op:operator> <name pos:line="57" pos:column="83">null</name></expr>)</condition><then pos:line="57" pos:column="88">
            <block pos:line="58" pos:column="13">{
                <expr_stmt><expr><name pos:line="59" pos:column="17">loadedServiceLocator</name> <op:operator pos:line="59" pos:column="38">=</op:operator> <call><name><name pos:line="59" pos:column="40">Activator</name><op:operator pos:line="59" pos:column="49">.</op:operator><name pos:line="59" pos:column="50">CreateInstance</name></name><argument_list pos:line="59" pos:column="64">(<argument><expr><name><name pos:line="59" pos:column="65">Configuration</name><op:operator pos:line="59" pos:column="78">.</op:operator><name pos:line="59" pos:column="79">ServiceLocatorType</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="59" pos:column="99">as</op:operator> <name pos:line="59" pos:column="102">IServiceLocator</name></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><name pos:line="62" pos:column="13">ProviderServiceLocator</name> <op:operator pos:line="62" pos:column="36">=</op:operator> <name pos:line="62" pos:column="38">providerServiceLocator</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="63" pos:column="13">UserServiceLocator</name> <op:operator pos:line="63" pos:column="32">=</op:operator> <name pos:line="63" pos:column="34">userServiceLocator</name> <op:operator pos:line="63" pos:column="53">??</op:operator> <name pos:line="63" pos:column="56">loadedServiceLocator</name></expr>;</expr_stmt>
        }</block></constructor>

        <decl_stmt><decl><type><specifier pos:line="66" pos:column="9">internal</specifier> <name pos:line="66" pos:column="18">IServiceLocator</name></type> <name pos:line="66" pos:column="34">UserServiceLocator</name> <block pos:line="66" pos:column="53">{ <function_decl><name pos:line="66" pos:column="55">get</name>;</function_decl> <function_decl><name pos:line="66" pos:column="60">set</name>;</function_decl> }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="68" pos:column="9">internal</specifier> <name pos:line="68" pos:column="18">IServiceLocator</name></type> <name pos:line="68" pos:column="34">ProviderServiceLocator</name> <block pos:line="68" pos:column="57">{ <function_decl><name pos:line="68" pos:column="59">get</name>;</function_decl> <function_decl><name pos:line="68" pos:column="64">set</name>;</function_decl> }</block></decl></decl_stmt>
        
        <decl_stmt><decl><type><specifier pos:line="70" pos:column="9">internal</specifier> <name pos:line="70" pos:column="18">Section</name></type> <name pos:line="70" pos:column="26">Configuration</name> <block pos:line="70" pos:column="40">{ <function_decl><name pos:line="70" pos:column="42">get</name>;</function_decl> <function_decl><name pos:line="70" pos:column="47">set</name>;</function_decl> }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="72" pos:column="9">private</specifier> <name pos:line="72" pos:column="17">ILogger</name></type> <name pos:line="72" pos:column="25">Logger</name> <block pos:line="72" pos:column="32">{ <function_decl><name pos:line="72" pos:column="34">get</name>;</function_decl> <function_decl><name pos:line="72" pos:column="39">set</name>;</function_decl> }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="74" pos:column="9">private</specifier> <name pos:line="74" pos:column="17">IFrameworkProvider</name></type> <name pos:line="74" pos:column="36">FrameworkProvider</name> <block pos:line="74" pos:column="54">{ <function_decl><name pos:line="74" pos:column="56">get</name>;</function_decl> <function_decl><name pos:line="74" pos:column="61">set</name>;</function_decl> }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="76" pos:column="9">private</specifier> <name pos:line="76" pos:column="17">IMessageBroker</name></type> <name pos:line="76" pos:column="32">MessageBroker</name> <block pos:line="76" pos:column="46">{ <function_decl><name pos:line="76" pos:column="48">get</name>;</function_decl> <function_decl><name pos:line="76" pos:column="53">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="78" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="79" pos:column="9">/// Instantiates an instance of &lt;see cref="IGlimpseRuntime"/&gt;.</comment>
        <comment type="line" pos:line="80" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="81" pos:column="9">/// &lt;returns&gt;A &lt;see cref="IGlimpseRuntime"/&gt; instance resolved by one of the &lt;see cref="IServiceLocator"/&gt;s, otherwise &lt;see cref="GlimpseRuntime"/&gt;.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="82" pos:column="9">public</specifier> <name pos:line="82" pos:column="16">IGlimpseRuntime</name></type> <name pos:line="82" pos:column="32">InstantiateRuntime</name><parameter_list pos:line="82" pos:column="50">()</parameter_list>
        <block pos:line="83" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="84" pos:column="13">IGlimpseRuntime</name></type> <name pos:line="84" pos:column="29">result</name></decl>;</decl_stmt>
            <if pos:line="85" pos:column="13">if <condition pos:line="85" pos:column="16">(<expr><call><name pos:line="85" pos:column="17">TrySingleInstanceFromServiceLocators</name><argument_list pos:line="85" pos:column="53">(<argument><expr pos:line="85" pos:column="54">out <name pos:line="85" pos:column="58">result</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="85" pos:column="66">
            <block pos:line="86" pos:column="13">{
                <return pos:line="87" pos:column="17">return <expr><name pos:line="87" pos:column="24">result</name></expr>;</return>
            }</block></then></if>

            <return pos:line="90" pos:column="13">return <expr><op:operator pos:line="90" pos:column="20">new</op:operator> <call><name pos:line="90" pos:column="24">GlimpseRuntime</name><argument_list pos:line="90" pos:column="38">(<argument><expr><call><name pos:line="90" pos:column="39">InstantiateConfiguration</name><argument_list pos:line="90" pos:column="63">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="93" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="94" pos:column="9">/// Instantiates an instance of &lt;see cref="IFrameworkProvider"/&gt;.</comment>
        <comment type="line" pos:line="95" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="96" pos:column="9">/// &lt;returns&gt;A &lt;see cref="IFrameworkProvider"/&gt; instance resolved by one of the &lt;see cref="IServiceLocator"/&gt;s.&lt;/returns&gt;</comment>
        <comment type="line" pos:line="97" pos:column="9">/// &lt;exception cref="GlimpseException"&gt;An exception is thrown is an instance of &lt;see cref="IFrameworkProvider"/&gt; is not provided by a &lt;see cref="IServiceLocator"/&gt;.&lt;/exception&gt;</comment>
        <function><type><specifier pos:line="98" pos:column="9">public</specifier> <name pos:line="98" pos:column="16">IFrameworkProvider</name></type> <name pos:line="98" pos:column="35">InstantiateFrameworkProvider</name><parameter_list pos:line="98" pos:column="63">()</parameter_list>
        <block pos:line="99" pos:column="9">{
            <if pos:line="100" pos:column="13">if <condition pos:line="100" pos:column="16">(<expr><name pos:line="100" pos:column="17">FrameworkProvider</name> <op:operator pos:line="100" pos:column="35">!=</op:operator> <name pos:line="100" pos:column="38">null</name></expr>)</condition><then pos:line="100" pos:column="43">
            <block pos:line="101" pos:column="13">{
                <return pos:line="102" pos:column="17">return <expr><name pos:line="102" pos:column="24">FrameworkProvider</name></expr>;</return>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="105" pos:column="13">IFrameworkProvider</name></type> <name pos:line="105" pos:column="32">result</name></decl>;</decl_stmt>
            <if pos:line="106" pos:column="13">if <condition pos:line="106" pos:column="16">(<expr><call><name pos:line="106" pos:column="17">TrySingleInstanceFromServiceLocators</name><argument_list pos:line="106" pos:column="53">(<argument><expr pos:line="106" pos:column="54">out <name pos:line="106" pos:column="58">result</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="106" pos:column="66">
            <block pos:line="107" pos:column="13">{
                <expr_stmt><expr><name pos:line="108" pos:column="17">FrameworkProvider</name> <op:operator pos:line="108" pos:column="35">=</op:operator> <name pos:line="108" pos:column="37">result</name></expr>;</expr_stmt>
                <return pos:line="109" pos:column="17">return <expr><name pos:line="109" pos:column="24">FrameworkProvider</name></expr>;</return>
            }</block></then></if>

            <throw pos:line="112" pos:column="13">throw <expr><op:operator pos:line="112" pos:column="19">new</op:operator> <call><name pos:line="112" pos:column="23">GlimpseException</name><argument_list pos:line="112" pos:column="39">(
                <argument><expr><call><name><name pos:line="113" pos:column="17">string</name><op:operator pos:line="113" pos:column="23">.</op:operator><name pos:line="113" pos:column="24">Format</name></name><argument_list pos:line="113" pos:column="30">(
                    <argument><expr><name><name pos:line="114" pos:column="21">Resources</name><op:operator pos:line="114" pos:column="30">.</op:operator><name pos:line="114" pos:column="31">InstantiateFrameworkProviderException</name></name></expr></argument>,
                    <argument><expr><name pos:line="115" pos:column="21">UserServiceLocator</name> <op:operator pos:line="115" pos:column="40">==</op:operator> <name pos:line="115" pos:column="43">null</name> <op:operator pos:line="115" pos:column="48">?</op:operator> <lit:literal type="string" pos:line="115" pos:column="50">"UserServiceLocator not configured"</lit:literal> <op:operator pos:line="115" pos:column="86">:</op:operator> <call><name><name pos:line="115" pos:column="88">UserServiceLocator</name><op:operator pos:line="115" pos:column="106">.</op:operator><name pos:line="115" pos:column="107">GetType</name></name><argument_list pos:line="115" pos:column="114">()</argument_list></call><op:operator pos:line="115" pos:column="116">.</op:operator><name pos:line="115" pos:column="117">AssemblyQualifiedName</name></expr></argument>,
                    <argument><expr><name pos:line="116" pos:column="21">ProviderServiceLocator</name> <op:operator pos:line="116" pos:column="44">==</op:operator> <name pos:line="116" pos:column="47">null</name> <op:operator pos:line="116" pos:column="52">?</op:operator> <lit:literal type="string" pos:line="116" pos:column="54">"ProviderServiceLocator not configured"</lit:literal> <op:operator pos:line="116" pos:column="94">:</op:operator> <call><name><name pos:line="116" pos:column="96">ProviderServiceLocator</name><op:operator pos:line="116" pos:column="118">.</op:operator><name pos:line="116" pos:column="119">GetType</name></name><argument_list pos:line="116" pos:column="126">()</argument_list></call><op:operator pos:line="116" pos:column="128">.</op:operator><name pos:line="116" pos:column="129">AssemblyQualifiedName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></function>

        <comment type="line" pos:line="119" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="120" pos:column="9">/// Instantiates an instance of &lt;see cref="ResourceEndpointConfiguration"/&gt;.</comment>
        <comment type="line" pos:line="121" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="122" pos:column="9">/// &lt;returns&gt;A &lt;see cref="ResourceEndpointConfiguration"/&gt; instance resolved by one of the &lt;see cref="IServiceLocator"/&gt;s.&lt;/returns&gt;</comment>
        <comment type="line" pos:line="123" pos:column="9">/// &lt;exception cref="GlimpseException"&gt;An exception is thrown is an instance of &lt;see cref="ResourceEndpointConfiguration"/&gt; is not provided by a &lt;see cref="IServiceLocator"/&gt;.&lt;/exception&gt;</comment>
        <function><type><specifier pos:line="124" pos:column="9">public</specifier> <name pos:line="124" pos:column="16">ResourceEndpointConfiguration</name></type> <name pos:line="124" pos:column="46">InstantiateResourceEndpointConfiguration</name><parameter_list pos:line="124" pos:column="86">()</parameter_list>
        <block pos:line="125" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="126" pos:column="13">ResourceEndpointConfiguration</name></type> <name pos:line="126" pos:column="43">result</name></decl>;</decl_stmt>
            <if pos:line="127" pos:column="13">if <condition pos:line="127" pos:column="16">(<expr><call><name pos:line="127" pos:column="17">TrySingleInstanceFromServiceLocators</name><argument_list pos:line="127" pos:column="53">(<argument><expr pos:line="127" pos:column="54">out <name pos:line="127" pos:column="58">result</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="127" pos:column="66">
            <block pos:line="128" pos:column="13">{
                <return pos:line="129" pos:column="17">return <expr><name pos:line="129" pos:column="24">result</name></expr>;</return>
            }</block></then></if>

            <throw pos:line="132" pos:column="13">throw <expr><op:operator pos:line="132" pos:column="19">new</op:operator> <call><name pos:line="132" pos:column="23">GlimpseException</name><argument_list pos:line="132" pos:column="39">(
                <argument><expr><call><name><name pos:line="133" pos:column="17">string</name><op:operator pos:line="133" pos:column="23">.</op:operator><name pos:line="133" pos:column="24">Format</name></name><argument_list pos:line="133" pos:column="30">(
                    <argument><expr><name><name pos:line="134" pos:column="21">Resources</name><op:operator pos:line="134" pos:column="30">.</op:operator><name pos:line="134" pos:column="31">InstantiateResourceEndpointConfigurationException</name></name></expr></argument>,
                    <argument><expr><name pos:line="135" pos:column="21">UserServiceLocator</name> <op:operator pos:line="135" pos:column="40">==</op:operator> <name pos:line="135" pos:column="43">null</name> <op:operator pos:line="135" pos:column="48">?</op:operator> <lit:literal type="string" pos:line="135" pos:column="50">"UserServiceLocator not configured"</lit:literal> <op:operator pos:line="135" pos:column="86">:</op:operator> <call><name><name pos:line="135" pos:column="88">UserServiceLocator</name><op:operator pos:line="135" pos:column="106">.</op:operator><name pos:line="135" pos:column="107">GetType</name></name><argument_list pos:line="135" pos:column="114">()</argument_list></call><op:operator pos:line="135" pos:column="116">.</op:operator><name pos:line="135" pos:column="117">AssemblyQualifiedName</name></expr></argument>,
                    <argument><expr><name pos:line="136" pos:column="21">ProviderServiceLocator</name> <op:operator pos:line="136" pos:column="44">==</op:operator> <name pos:line="136" pos:column="47">null</name> <op:operator pos:line="136" pos:column="52">?</op:operator> <lit:literal type="string" pos:line="136" pos:column="54">"ProviderServiceLocator not configured"</lit:literal> <op:operator pos:line="136" pos:column="94">:</op:operator> <call><name><name pos:line="136" pos:column="96">ProviderServiceLocator</name><op:operator pos:line="136" pos:column="118">.</op:operator><name pos:line="136" pos:column="119">GetType</name></name><argument_list pos:line="136" pos:column="126">()</argument_list></call><op:operator pos:line="136" pos:column="128">.</op:operator><name pos:line="136" pos:column="129">AssemblyQualifiedName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></function>

        <comment type="line" pos:line="139" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="140" pos:column="9">/// Instantiates a collection of &lt;see cref="IClientScript"/&gt;s.</comment>
        <comment type="line" pos:line="141" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="142" pos:column="9">/// &lt;returns&gt;</comment>
        <comment type="line" pos:line="143" pos:column="9">/// A collection of &lt;see cref="IClientScript"/&gt; instances resolved by one of the &lt;see cref="IServiceLocator"/&gt;s, otherwise all &lt;see cref="IClientScript"/&gt;s discovered in the configured discovery location.</comment>
        <comment type="line" pos:line="144" pos:column="9">/// &lt;/returns&gt;</comment>
        <function><type><specifier pos:line="145" pos:column="9">public</specifier> <name><name pos:line="145" pos:column="16">ICollection</name><argument_list pos:line="145" pos:column="27">&lt;<argument><name pos:line="145" pos:column="28">IClientScript</name></argument>&gt;</argument_list></name></type> <name pos:line="145" pos:column="43">InstantiateClientScripts</name><parameter_list pos:line="145" pos:column="67">()</parameter_list>
        <block pos:line="146" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="147" pos:column="13">ICollection</name><argument_list pos:line="147" pos:column="24">&lt;<argument><name pos:line="147" pos:column="25">IClientScript</name></argument>&gt;</argument_list></name></type> <name pos:line="147" pos:column="40">result</name></decl>;</decl_stmt>
            <if pos:line="148" pos:column="13">if <condition pos:line="148" pos:column="16">(<expr><call><name pos:line="148" pos:column="17">TryAllInstancesFromServiceLocators</name><argument_list pos:line="148" pos:column="51">(<argument><expr pos:line="148" pos:column="52">out <name pos:line="148" pos:column="56">result</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="148" pos:column="64">
            <block pos:line="149" pos:column="13">{
                <return pos:line="150" pos:column="17">return <expr><name pos:line="150" pos:column="24">result</name></expr>;</return>
            }</block></then></if>

            <return pos:line="153" pos:column="13">return <expr><call><name><name pos:line="153" pos:column="20">CreateDiscoverableCollection</name><argument_list pos:line="153" pos:column="48">&lt;<argument><name pos:line="153" pos:column="49">IClientScript</name></argument>&gt;</argument_list></name><argument_list pos:line="153" pos:column="63">(<argument><expr><name><name pos:line="153" pos:column="64">Configuration</name><op:operator pos:line="153" pos:column="77">.</op:operator><name pos:line="153" pos:column="78">ClientScripts</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="156" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="157" pos:column="9">/// Instantiates an instance of &lt;see cref="ILogger"/&gt;.</comment>
        <comment type="line" pos:line="158" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="159" pos:column="9">/// &lt;returns&gt;A &lt;see cref="ILogger"/&gt; instance resolved by one of the &lt;see cref="IServiceLocator"/&gt;s, otherwise a &lt;see cref="NullLogger"/&gt; or &lt;see cref="NLogLogger"/&gt; (leveraging the &lt;see href="http://nlog-project.org/"&gt;NLog&lt;/see&gt; project) based on configuration settings.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="160" pos:column="9">public</specifier> <name pos:line="160" pos:column="16">ILogger</name></type> <name pos:line="160" pos:column="24">InstantiateLogger</name><parameter_list pos:line="160" pos:column="41">()</parameter_list>
        <block pos:line="161" pos:column="9">{
            <comment type="line" pos:line="162" pos:column="13">// reuse logger if already created</comment>
            <if pos:line="163" pos:column="13">if <condition pos:line="163" pos:column="16">(<expr><name pos:line="163" pos:column="17">Logger</name> <op:operator pos:line="163" pos:column="24">!=</op:operator> <name pos:line="163" pos:column="27">null</name></expr>)</condition><then pos:line="163" pos:column="32">
            <block pos:line="164" pos:column="13">{
                <return pos:line="165" pos:column="17">return <expr><name pos:line="165" pos:column="24">Logger</name></expr>;</return>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="168" pos:column="13">ILogger</name></type> <name pos:line="168" pos:column="21">result</name></decl>;</decl_stmt>
            <if pos:line="169" pos:column="13">if <condition pos:line="169" pos:column="16">(<expr><call><name pos:line="169" pos:column="17">TrySingleInstanceFromServiceLocators</name><argument_list pos:line="169" pos:column="53">(<argument><expr pos:line="169" pos:column="54">out <name pos:line="169" pos:column="58">result</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="169" pos:column="66">
            <block pos:line="170" pos:column="13">{
                <expr_stmt><expr><name pos:line="171" pos:column="17">Logger</name> <op:operator pos:line="171" pos:column="24">=</op:operator> <name pos:line="171" pos:column="26">result</name></expr>;</expr_stmt>
                <return pos:line="172" pos:column="17">return <expr><name pos:line="172" pos:column="24">Logger</name></expr>;</return>
            }</block></then></if>

            <comment type="line" pos:line="175" pos:column="13">// use null logger if logging is off</comment>
            <decl_stmt><decl><type><name pos:line="176" pos:column="13">var</name></type> <name pos:line="176" pos:column="17">logLevel</name> <init pos:line="176" pos:column="26">= <expr><name><name pos:line="176" pos:column="28">Configuration</name><op:operator pos:line="176" pos:column="41">.</op:operator><name pos:line="176" pos:column="42">Logging</name><op:operator pos:line="176" pos:column="49">.</op:operator><name pos:line="176" pos:column="50">Level</name></name></expr></init></decl>;</decl_stmt>
            <if pos:line="177" pos:column="13">if <condition pos:line="177" pos:column="16">(<expr><name pos:line="177" pos:column="17">logLevel</name> <op:operator pos:line="177" pos:column="26">==</op:operator> <name><name pos:line="177" pos:column="29">LoggingLevel</name><op:operator pos:line="177" pos:column="41">.</op:operator><name pos:line="177" pos:column="42">Off</name></name></expr>)</condition><then pos:line="177" pos:column="46">
            <block pos:line="178" pos:column="13">{
                <expr_stmt><expr><name pos:line="179" pos:column="17">Logger</name> <op:operator pos:line="179" pos:column="24">=</op:operator> <op:operator pos:line="179" pos:column="26">new</op:operator> <call><name pos:line="179" pos:column="30">NullLogger</name><argument_list pos:line="179" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
                <return pos:line="180" pos:column="17">return <expr><name pos:line="180" pos:column="24">Logger</name></expr>;</return>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="183" pos:column="13">var</name></type> <name pos:line="183" pos:column="17">configuredPath</name> <init pos:line="183" pos:column="32">= <expr><name><name pos:line="183" pos:column="34">Configuration</name><op:operator pos:line="183" pos:column="47">.</op:operator><name pos:line="183" pos:column="48">Logging</name><op:operator pos:line="183" pos:column="55">.</op:operator><name pos:line="183" pos:column="56">LogLocation</name></name></expr></init></decl>;</decl_stmt>
            
            <comment type="line" pos:line="185" pos:column="13">// Root the path if it isn't already</comment>
            <decl_stmt><decl><type><name pos:line="186" pos:column="13">var</name></type> <name pos:line="186" pos:column="17">logDirPath</name> <init pos:line="186" pos:column="28">= <expr><call><name><name pos:line="186" pos:column="30">Path</name><op:operator pos:line="186" pos:column="34">.</op:operator><name pos:line="186" pos:column="35">IsPathRooted</name></name><argument_list pos:line="186" pos:column="47">(<argument><expr><name pos:line="186" pos:column="48">configuredPath</name></expr></argument>)</argument_list></call>
                                 <op:operator pos:line="187" pos:column="34">?</op:operator> <name pos:line="187" pos:column="36">configuredPath</name>
                                 <op:operator pos:line="188" pos:column="34">:</op:operator> <call><name><name pos:line="188" pos:column="36">Path</name><op:operator pos:line="188" pos:column="40">.</op:operator><name pos:line="188" pos:column="41">Combine</name></name><argument_list pos:line="188" pos:column="48">(<argument><expr><name><name pos:line="188" pos:column="49">AppDomain</name><op:operator pos:line="188" pos:column="58">.</op:operator><name pos:line="188" pos:column="59">CurrentDomain</name><op:operator pos:line="188" pos:column="72">.</op:operator><name pos:line="188" pos:column="73">BaseDirectory</name></name></expr></argument>, <argument><expr><name pos:line="188" pos:column="88">configuredPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <comment type="line" pos:line="190" pos:column="13">// Add a filename if one isn't specified</comment>
            <decl_stmt><decl><type><name pos:line="191" pos:column="13">var</name></type> <name pos:line="191" pos:column="17">logFilePath</name> <init pos:line="191" pos:column="29">= <expr><call><name><name pos:line="191" pos:column="31">string</name><op:operator pos:line="191" pos:column="37">.</op:operator><name pos:line="191" pos:column="38">IsNullOrEmpty</name></name><argument_list pos:line="191" pos:column="51">(<argument><expr><call><name><name pos:line="191" pos:column="52">Path</name><op:operator pos:line="191" pos:column="56">.</op:operator><name pos:line="191" pos:column="57">GetExtension</name></name><argument_list pos:line="191" pos:column="69">(<argument><expr><name pos:line="191" pos:column="70">logDirPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                  <op:operator pos:line="192" pos:column="35">?</op:operator> <call><name><name pos:line="192" pos:column="37">Path</name><op:operator pos:line="192" pos:column="41">.</op:operator><name pos:line="192" pos:column="42">Combine</name></name><argument_list pos:line="192" pos:column="49">(<argument><expr><name pos:line="192" pos:column="50">logDirPath</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="192" pos:column="62">"Glimpse.log"</lit:literal></expr></argument>)</argument_list></call>
                                  <op:operator pos:line="193" pos:column="35">:</op:operator> <name pos:line="193" pos:column="37">logDirPath</name></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="195" pos:column="13">// use NLog logger otherwise</comment>
            <decl_stmt><decl><type><name pos:line="196" pos:column="13">var</name></type> <name pos:line="196" pos:column="17">fileTarget</name> <init pos:line="196" pos:column="28">= <expr><op:operator pos:line="196" pos:column="30">new</op:operator> <name pos:line="196" pos:column="34">FileTarget</name>
                                 <block pos:line="197" pos:column="34">{
                                     <expr><name pos:line="198" pos:column="38">FileName</name> <op:operator pos:line="198" pos:column="47">=</op:operator> <name pos:line="198" pos:column="49">logFilePath</name></expr>,
                                     <expr><name pos:line="199" pos:column="38">Layout</name> <op:operator pos:line="199" pos:column="45">=</op:operator>
                                         <lit:literal type="string" pos:line="200" pos:column="42">"${longdate} | ${level:uppercase=true} | ${message} | ${exception:maxInnerExceptionLevel=5:format=type,message,stacktrace:separator=--:innerFormat=shortType,message,method:innerExceptionSeparator=&gt;&gt;}"</lit:literal></expr>
                                 }</block></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="203" pos:column="13">var</name></type> <name pos:line="203" pos:column="17">asyncTarget</name> <init pos:line="203" pos:column="29">= <expr><op:operator pos:line="203" pos:column="31">new</op:operator> <call><name pos:line="203" pos:column="35">AsyncTargetWrapper</name><argument_list pos:line="203" pos:column="53">(<argument><expr><name pos:line="203" pos:column="54">fileTarget</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="205" pos:column="13">var</name></type> <name pos:line="205" pos:column="17">loggingConfiguration</name> <init pos:line="205" pos:column="38">= <expr><op:operator pos:line="205" pos:column="40">new</op:operator> <call><name pos:line="205" pos:column="44">LoggingConfiguration</name><argument_list pos:line="205" pos:column="64">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="206" pos:column="13">loggingConfiguration</name><op:operator pos:line="206" pos:column="33">.</op:operator><name pos:line="206" pos:column="34">AddTarget</name></name><argument_list pos:line="206" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="206" pos:column="44">"file"</lit:literal></expr></argument>, <argument><expr><name pos:line="206" pos:column="52">asyncTarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="207" pos:column="13">loggingConfiguration</name><op:operator pos:line="207" pos:column="33">.</op:operator><name pos:line="207" pos:column="34">LoggingRules</name><op:operator pos:line="207" pos:column="46">.</op:operator><name pos:line="207" pos:column="47">Add</name></name><argument_list pos:line="207" pos:column="50">(<argument><expr><op:operator pos:line="207" pos:column="51">new</op:operator> <call><name pos:line="207" pos:column="55">LoggingRule</name><argument_list pos:line="207" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="207" pos:column="67">"*"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="207" pos:column="72">LogLevel</name><op:operator pos:line="207" pos:column="80">.</op:operator><name pos:line="207" pos:column="81">FromOrdinal</name></name><argument_list pos:line="207" pos:column="92">(<argument><expr><op:operator pos:line="207" pos:column="93">(</op:operator><name pos:line="207" pos:column="94">int</name><op:operator pos:line="207" pos:column="97">)</op:operator><name pos:line="207" pos:column="98">logLevel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="207" pos:column="109">asyncTarget</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="209" pos:column="13">Logger</name> <op:operator pos:line="209" pos:column="20">=</op:operator> <op:operator pos:line="209" pos:column="22">new</op:operator> <call><name pos:line="209" pos:column="26">NLogLogger</name><argument_list pos:line="209" pos:column="36">(<argument><expr><op:operator pos:line="209" pos:column="37">new</op:operator> <call><name pos:line="209" pos:column="41">LogFactory</name><argument_list pos:line="209" pos:column="51">(<argument><expr><name pos:line="209" pos:column="52">loggingConfiguration</name></expr></argument>)</argument_list></call><op:operator pos:line="209" pos:column="73">.</op:operator><call><name pos:line="209" pos:column="74">GetLogger</name><argument_list pos:line="209" pos:column="83">(<argument><expr><lit:literal type="string" pos:line="209" pos:column="84">"Glimpse"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="210" pos:column="13">return <expr><name pos:line="210" pos:column="20">Logger</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="213" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="214" pos:column="9">/// Instantiates the default instance of &lt;see cref="RuntimePolicy"/&gt;.</comment>
        <comment type="line" pos:line="215" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="216" pos:column="9">/// &lt;returns&gt;A &lt;see cref="RuntimePolicy"/&gt; instance based on configuration settings.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="217" pos:column="9">public</specifier> <name pos:line="217" pos:column="16">RuntimePolicy</name></type> <name pos:line="217" pos:column="30">InstantiateDefaultRuntimePolicy</name><parameter_list pos:line="217" pos:column="61">()</parameter_list>
        <block pos:line="218" pos:column="9">{
            <return pos:line="219" pos:column="13">return <expr><name><name pos:line="219" pos:column="20">Configuration</name><op:operator pos:line="219" pos:column="33">.</op:operator><name pos:line="219" pos:column="34">DefaultRuntimePolicy</name></name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="222" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="223" pos:column="9">/// Instantiates an instance of &lt;see cref="IHtmlEncoder"/&gt;.</comment>
        <comment type="line" pos:line="224" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="225" pos:column="9">/// &lt;returns&gt;A &lt;see cref="IHtmlEncoder"/&gt; instance resolved by one of the &lt;see cref="IServiceLocator"/&gt;s, otherwise &lt;see cref="AntiXssEncoder"/&gt; (leveraging the &lt;see href="http://wpl.codeplex.com/"&gt;Microsoft Web Protection Library&lt;/see&gt;).&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="226" pos:column="9">public</specifier> <name pos:line="226" pos:column="16">IHtmlEncoder</name></type> <name pos:line="226" pos:column="29">InstantiateHtmlEncoder</name><parameter_list pos:line="226" pos:column="51">()</parameter_list>
        <block pos:line="227" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="228" pos:column="13">IHtmlEncoder</name></type> <name pos:line="228" pos:column="26">encoder</name></decl>;</decl_stmt>

            <if pos:line="230" pos:column="13">if <condition pos:line="230" pos:column="16">(<expr><call><name pos:line="230" pos:column="17">TrySingleInstanceFromServiceLocators</name><argument_list pos:line="230" pos:column="53">(<argument><expr pos:line="230" pos:column="54">out <name pos:line="230" pos:column="58">encoder</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="230" pos:column="67">
            <block pos:line="231" pos:column="13">{
                <return pos:line="232" pos:column="17">return <expr><name pos:line="232" pos:column="24">encoder</name></expr>;</return>
            }</block></then></if>

            <return pos:line="235" pos:column="13">return <expr><op:operator pos:line="235" pos:column="20">new</op:operator> <call><name pos:line="235" pos:column="24">AntiXssEncoder</name><argument_list pos:line="235" pos:column="38">()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="238" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="239" pos:column="9">/// Instantiates an instance of &lt;see cref="IPersistenceStore"/&gt;.</comment>
        <comment type="line" pos:line="240" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="241" pos:column="9">/// &lt;returns&gt;A &lt;see cref="IPersistenceStore"/&gt; instance resolved by one of the &lt;see cref="IServiceLocator"/&gt;s, otherwise &lt;see cref="ApplicationPersistenceStore"/&gt;.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="242" pos:column="9">public</specifier> <name pos:line="242" pos:column="16">IPersistenceStore</name></type> <name pos:line="242" pos:column="34">InstantiatePersistenceStore</name><parameter_list pos:line="242" pos:column="61">()</parameter_list>
        <block pos:line="243" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="244" pos:column="13">IPersistenceStore</name></type> <name pos:line="244" pos:column="31">store</name></decl>;</decl_stmt>
            <if pos:line="245" pos:column="13">if <condition pos:line="245" pos:column="16">(<expr><call><name pos:line="245" pos:column="17">TrySingleInstanceFromServiceLocators</name><argument_list pos:line="245" pos:column="53">(<argument><expr pos:line="245" pos:column="54">out <name pos:line="245" pos:column="58">store</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="245" pos:column="65">
            <block pos:line="246" pos:column="13">{
                <return pos:line="247" pos:column="17">return <expr><name pos:line="247" pos:column="24">store</name></expr>;</return>
            }</block></then></if>

            <return pos:line="250" pos:column="13">return <expr><op:operator pos:line="250" pos:column="20">new</op:operator> <call><name pos:line="250" pos:column="24">ApplicationPersistenceStore</name><argument_list pos:line="250" pos:column="51">(<argument><expr><call><name pos:line="250" pos:column="52">InstantiateFrameworkProvider</name><argument_list pos:line="250" pos:column="80">()</argument_list></call><op:operator pos:line="250" pos:column="82">.</op:operator><name pos:line="250" pos:column="83">HttpServerStore</name></expr></argument>, <argument><expr><name><name pos:line="250" pos:column="100">Configuration</name><op:operator pos:line="250" pos:column="113">.</op:operator><name pos:line="250" pos:column="114">RequestBufferSize</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="253" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="254" pos:column="9">/// Instantiates a collection of &lt;see cref="IInspector"/&gt;s.</comment>
        <comment type="line" pos:line="255" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="256" pos:column="9">/// &lt;returns&gt;</comment>
        <comment type="line" pos:line="257" pos:column="9">/// A collection of &lt;see cref="IInspector"/&gt; instances resolved by one of the &lt;see cref="IServiceLocator"/&gt;s, otherwise all &lt;see cref="IInspector"/&gt;s discovered in the configured discovery location.</comment>
        <comment type="line" pos:line="258" pos:column="9">/// &lt;/returns&gt;</comment>
        <function><type><specifier pos:line="259" pos:column="9">public</specifier> <name><name pos:line="259" pos:column="16">ICollection</name><argument_list pos:line="259" pos:column="27">&lt;<argument><name pos:line="259" pos:column="28">IInspector</name></argument>&gt;</argument_list></name></type> <name pos:line="259" pos:column="40">InstantiateInspectors</name><parameter_list pos:line="259" pos:column="61">()</parameter_list>
        <block pos:line="260" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="261" pos:column="13">ICollection</name><argument_list pos:line="261" pos:column="24">&lt;<argument><name pos:line="261" pos:column="25">IInspector</name></argument>&gt;</argument_list></name></type> <name pos:line="261" pos:column="37">result</name></decl>;</decl_stmt>
            <if pos:line="262" pos:column="13">if <condition pos:line="262" pos:column="16">(<expr><call><name pos:line="262" pos:column="17">TryAllInstancesFromServiceLocators</name><argument_list pos:line="262" pos:column="51">(<argument><expr pos:line="262" pos:column="52">out <name pos:line="262" pos:column="56">result</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="262" pos:column="64">
            <block pos:line="263" pos:column="13">{
                <return pos:line="264" pos:column="17">return <expr><name pos:line="264" pos:column="24">result</name></expr>;</return>
            }</block></then></if>

            <return pos:line="267" pos:column="13">return <expr><call><name><name pos:line="267" pos:column="20">CreateDiscoverableCollection</name><argument_list pos:line="267" pos:column="48">&lt;<argument><name pos:line="267" pos:column="49">IInspector</name></argument>&gt;</argument_list></name><argument_list pos:line="267" pos:column="60">(<argument><expr><name><name pos:line="267" pos:column="61">Configuration</name><op:operator pos:line="267" pos:column="74">.</op:operator><name pos:line="267" pos:column="75">Inspectors</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="270" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="271" pos:column="9">/// Instantiates a collection of &lt;see cref="IResource"/&gt;s.</comment>
        <comment type="line" pos:line="272" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="273" pos:column="9">/// &lt;returns&gt;</comment>
        <comment type="line" pos:line="274" pos:column="9">/// A collection of &lt;see cref="IResource"/&gt; instances resolved by one of the &lt;see cref="IServiceLocator"/&gt;s, otherwise all &lt;see cref="IResource"/&gt;s discovered in the configured discovery location.</comment>
        <comment type="line" pos:line="275" pos:column="9">/// &lt;/returns&gt;</comment>
        <function><type><specifier pos:line="276" pos:column="9">public</specifier> <name><name pos:line="276" pos:column="16">ICollection</name><argument_list pos:line="276" pos:column="27">&lt;<argument><name pos:line="276" pos:column="28">IResource</name></argument>&gt;</argument_list></name></type> <name pos:line="276" pos:column="39">InstantiateResources</name><parameter_list pos:line="276" pos:column="59">()</parameter_list>
        <block pos:line="277" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="278" pos:column="13">ICollection</name><argument_list pos:line="278" pos:column="24">&lt;<argument><name pos:line="278" pos:column="25">IResource</name></argument>&gt;</argument_list></name></type> <name pos:line="278" pos:column="36">resources</name></decl>;</decl_stmt>
            <if pos:line="279" pos:column="13">if <condition pos:line="279" pos:column="16">(<expr><call><name pos:line="279" pos:column="17">TryAllInstancesFromServiceLocators</name><argument_list pos:line="279" pos:column="51">(<argument><expr pos:line="279" pos:column="52">out <name pos:line="279" pos:column="56">resources</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="279" pos:column="67">
            <block pos:line="280" pos:column="13">{
                <return pos:line="281" pos:column="17">return <expr><name pos:line="281" pos:column="24">resources</name></expr>;</return>
            }</block></then></if>

            <return pos:line="284" pos:column="13">return <expr><call><name><name pos:line="284" pos:column="20">CreateDiscoverableCollection</name><argument_list pos:line="284" pos:column="48">&lt;<argument><name pos:line="284" pos:column="49">IResource</name></argument>&gt;</argument_list></name><argument_list pos:line="284" pos:column="59">(<argument><expr><name><name pos:line="284" pos:column="60">Configuration</name><op:operator pos:line="284" pos:column="73">.</op:operator><name pos:line="284" pos:column="74">Resources</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="287" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="288" pos:column="9">/// Instantiates an instance of &lt;see cref="ISerializer"/&gt;.</comment>
        <comment type="line" pos:line="289" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="290" pos:column="9">/// &lt;returns&gt;A &lt;see cref="ISerializer"/&gt; instance resolved by one of the &lt;see cref="IServiceLocator"/&gt;s, otherwise &lt;see cref="JsonNetSerializer"/&gt; (leveraging &lt;see href="http://json.codeplex.com/"&gt;Json.Net&lt;/see&gt;).&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="291" pos:column="9">public</specifier> <name pos:line="291" pos:column="16">ISerializer</name></type> <name pos:line="291" pos:column="28">InstantiateSerializer</name><parameter_list pos:line="291" pos:column="49">()</parameter_list>
        <block pos:line="292" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="293" pos:column="13">ISerializer</name></type> <name pos:line="293" pos:column="25">result</name></decl>;</decl_stmt>
            <if pos:line="294" pos:column="13">if <condition pos:line="294" pos:column="16">(<expr><call><name pos:line="294" pos:column="17">TrySingleInstanceFromServiceLocators</name><argument_list pos:line="294" pos:column="53">(<argument><expr pos:line="294" pos:column="54">out <name pos:line="294" pos:column="58">result</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="294" pos:column="66">
            <block pos:line="295" pos:column="13">{
                <return pos:line="296" pos:column="17">return <expr><name pos:line="296" pos:column="24">result</name></expr>;</return>
            }</block></then></if>

            <expr_stmt><expr><name pos:line="299" pos:column="13">result</name> <op:operator pos:line="299" pos:column="20">=</op:operator> <op:operator pos:line="299" pos:column="22">new</op:operator> <call><name pos:line="299" pos:column="26">JsonNetSerializer</name><argument_list pos:line="299" pos:column="43">(<argument><expr><call><name pos:line="299" pos:column="44">InstantiateLogger</name><argument_list pos:line="299" pos:column="61">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="300" pos:column="13">result</name><op:operator pos:line="300" pos:column="19">.</op:operator><name pos:line="300" pos:column="20">RegisterSerializationConverters</name></name><argument_list pos:line="300" pos:column="51">(<argument><expr><call><name pos:line="300" pos:column="52">InstantiateSerializationConverters</name><argument_list pos:line="300" pos:column="86">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:line="302" pos:column="13">return <expr><name pos:line="302" pos:column="20">result</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="305" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="306" pos:column="9">/// Instantiates a collection of &lt;see cref="ITab"/&gt;s.</comment>
        <comment type="line" pos:line="307" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="308" pos:column="9">/// &lt;returns&gt;</comment>
        <comment type="line" pos:line="309" pos:column="9">/// A collection of &lt;see cref="ITab"/&gt; instances resolved by one of the &lt;see cref="IServiceLocator"/&gt;s, otherwise all &lt;see cref="ITab"/&gt;s discovered in the configured discovery location.</comment>
        <comment type="line" pos:line="310" pos:column="9">/// &lt;/returns&gt;</comment>
        <function><type><specifier pos:line="311" pos:column="9">public</specifier> <name><name pos:line="311" pos:column="16">ICollection</name><argument_list pos:line="311" pos:column="27">&lt;<argument><name pos:line="311" pos:column="28">ITab</name></argument>&gt;</argument_list></name></type> <name pos:line="311" pos:column="34">InstantiateTabs</name><parameter_list pos:line="311" pos:column="49">()</parameter_list>
        <block pos:line="312" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="313" pos:column="13">ICollection</name><argument_list pos:line="313" pos:column="24">&lt;<argument><name pos:line="313" pos:column="25">ITab</name></argument>&gt;</argument_list></name></type> <name pos:line="313" pos:column="31">tabs</name></decl>;</decl_stmt>
            <if pos:line="314" pos:column="13">if <condition pos:line="314" pos:column="16">(<expr><call><name pos:line="314" pos:column="17">TryAllInstancesFromServiceLocators</name><argument_list pos:line="314" pos:column="51">(<argument><expr pos:line="314" pos:column="52">out <name pos:line="314" pos:column="56">tabs</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="314" pos:column="62">
            <block pos:line="315" pos:column="13">{
                <return pos:line="316" pos:column="17">return <expr><name pos:line="316" pos:column="24">tabs</name></expr>;</return>
            }</block></then></if>

            <return pos:line="319" pos:column="13">return <expr><call><name><name pos:line="319" pos:column="20">CreateDiscoverableCollection</name><argument_list pos:line="319" pos:column="48">&lt;<argument><name pos:line="319" pos:column="49">ITab</name></argument>&gt;</argument_list></name><argument_list pos:line="319" pos:column="54">(<argument><expr><name><name pos:line="319" pos:column="55">Configuration</name><op:operator pos:line="319" pos:column="68">.</op:operator><name pos:line="319" pos:column="69">Tabs</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="322" pos:column="9">public</specifier> <name><name pos:line="322" pos:column="16">ICollection</name><argument_list pos:line="322" pos:column="27">&lt;<argument><name pos:line="322" pos:column="28">IDisplay</name></argument>&gt;</argument_list></name></type> <name pos:line="322" pos:column="38">InstantiateDisplays</name><parameter_list pos:line="322" pos:column="57">()</parameter_list>
        <block pos:line="323" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="324" pos:column="13">ICollection</name><argument_list pos:line="324" pos:column="24">&lt;<argument><name pos:line="324" pos:column="25">IDisplay</name></argument>&gt;</argument_list></name></type> <name pos:line="324" pos:column="35">displays</name></decl>;</decl_stmt>
            <if pos:line="325" pos:column="13">if <condition pos:line="325" pos:column="16">(<expr><call><name pos:line="325" pos:column="17">TryAllInstancesFromServiceLocators</name><argument_list pos:line="325" pos:column="51">(<argument><expr pos:line="325" pos:column="52">out <name pos:line="325" pos:column="56">displays</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="325" pos:column="66">
            <block pos:line="326" pos:column="13">{
                <return pos:line="327" pos:column="17">return <expr><name pos:line="327" pos:column="24">displays</name></expr>;</return>
            }</block></then></if>

            <return pos:line="330" pos:column="13">return <expr><call><name><name pos:line="330" pos:column="20">CreateDiscoverableCollection</name><argument_list pos:line="330" pos:column="48">&lt;<argument><name pos:line="330" pos:column="49">IDisplay</name></argument>&gt;</argument_list></name><argument_list pos:line="330" pos:column="58">(<argument><expr><name><name pos:line="330" pos:column="59">Configuration</name><op:operator pos:line="330" pos:column="72">.</op:operator><name pos:line="330" pos:column="73">Displays</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="333" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="334" pos:column="9">/// Instantiates a collection of &lt;see cref="IRuntimePolicy"/&gt;s.</comment>
        <comment type="line" pos:line="335" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="336" pos:column="9">/// &lt;returns&gt;</comment>
        <comment type="line" pos:line="337" pos:column="9">/// A collection of &lt;see cref="IRuntimePolicy"/&gt; instances resolved by one of the &lt;see cref="IServiceLocator"/&gt;s, otherwise all &lt;see cref="IRuntimePolicy"/&gt;s discovered in the configured discovery location.</comment>
        <comment type="line" pos:line="338" pos:column="9">/// &lt;/returns&gt;</comment>
        <function><type><specifier pos:line="339" pos:column="9">public</specifier> <name><name pos:line="339" pos:column="16">ICollection</name><argument_list pos:line="339" pos:column="27">&lt;<argument><name pos:line="339" pos:column="28">IRuntimePolicy</name></argument>&gt;</argument_list></name></type> <name pos:line="339" pos:column="44">InstantiateRuntimePolicies</name><parameter_list pos:line="339" pos:column="70">()</parameter_list>
        <block pos:line="340" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="341" pos:column="13">ICollection</name><argument_list pos:line="341" pos:column="24">&lt;<argument><name pos:line="341" pos:column="25">IRuntimePolicy</name></argument>&gt;</argument_list></name></type> <name pos:line="341" pos:column="41">result</name></decl>;</decl_stmt>
            <if pos:line="342" pos:column="13">if <condition pos:line="342" pos:column="16">(<expr><call><name pos:line="342" pos:column="17">TryAllInstancesFromServiceLocators</name><argument_list pos:line="342" pos:column="51">(<argument><expr pos:line="342" pos:column="52">out <name pos:line="342" pos:column="56">result</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="342" pos:column="64">
            <block pos:line="343" pos:column="13">{
                <return pos:line="344" pos:column="17">return <expr><name pos:line="344" pos:column="24">result</name></expr>;</return>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="347" pos:column="13">var</name></type> <name pos:line="347" pos:column="17">collection</name> <init pos:line="347" pos:column="28">= <expr><call><name><name pos:line="347" pos:column="30">CreateDiscoverableCollection</name><argument_list pos:line="347" pos:column="58">&lt;<argument><name pos:line="347" pos:column="59">IRuntimePolicy</name></argument>&gt;</argument_list></name><argument_list pos:line="347" pos:column="74">(<argument><expr><name><name pos:line="347" pos:column="75">Configuration</name><op:operator pos:line="347" pos:column="88">.</op:operator><name pos:line="347" pos:column="89">RuntimePolicies</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <foreach pos:line="349" pos:column="13">foreach (<init><decl><type><name pos:line="349" pos:column="22">var</name></type> <name pos:line="349" pos:column="26">config</name> <range pos:line="349" pos:column="33">in <expr><call><name><name pos:line="349" pos:column="36">collection</name><op:operator pos:line="349" pos:column="46">.</op:operator><name><name pos:line="349" pos:column="47">OfType</name><argument_list pos:line="349" pos:column="53">&lt;<argument><name pos:line="349" pos:column="54">IConfigurable</name></argument>&gt;</argument_list></name></name><argument_list pos:line="349" pos:column="68">()</argument_list></call></expr></range></decl></init>)
            <block pos:line="350" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="351" pos:column="17">config</name><op:operator pos:line="351" pos:column="23">.</op:operator><name pos:line="351" pos:column="24">Configure</name></name><argument_list pos:line="351" pos:column="33">(<argument><expr><name pos:line="351" pos:column="34">Configuration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>

            <return pos:line="354" pos:column="13">return <expr><name pos:line="354" pos:column="20">collection</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="357" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="358" pos:column="9">/// Instantiates a collection of &lt;see cref="ISerializationConverter"/&gt;s.</comment>
        <comment type="line" pos:line="359" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="360" pos:column="9">/// &lt;returns&gt;</comment>
        <comment type="line" pos:line="361" pos:column="9">/// A collection of &lt;see cref="ISerializationConverter"/&gt; instances resolved by one of the &lt;see cref="IServiceLocator"/&gt;s, otherwise all &lt;see cref="ISerializationConverter"/&gt;s discovered in the configured discovery location.</comment>
        <comment type="line" pos:line="362" pos:column="9">/// &lt;/returns&gt;</comment>
        <function><type><specifier pos:line="363" pos:column="9">public</specifier> <name><name pos:line="363" pos:column="16">ICollection</name><argument_list pos:line="363" pos:column="27">&lt;<argument><name pos:line="363" pos:column="28">ISerializationConverter</name></argument>&gt;</argument_list></name></type> <name pos:line="363" pos:column="53">InstantiateSerializationConverters</name><parameter_list pos:line="363" pos:column="87">()</parameter_list>
        <block pos:line="364" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="365" pos:column="13">ICollection</name><argument_list pos:line="365" pos:column="24">&lt;<argument><name pos:line="365" pos:column="25">ISerializationConverter</name></argument>&gt;</argument_list></name></type> <name pos:line="365" pos:column="50">result</name></decl>;</decl_stmt>
            <if pos:line="366" pos:column="13">if <condition pos:line="366" pos:column="16">(<expr><call><name pos:line="366" pos:column="17">TryAllInstancesFromServiceLocators</name><argument_list pos:line="366" pos:column="51">(<argument><expr pos:line="366" pos:column="52">out <name pos:line="366" pos:column="56">result</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="366" pos:column="64">
            <block pos:line="367" pos:column="13">{
                <return pos:line="368" pos:column="17">return <expr><name pos:line="368" pos:column="24">result</name></expr>;</return>
            }</block></then></if>

            <return pos:line="371" pos:column="13">return <expr><call><name><name pos:line="371" pos:column="20">CreateDiscoverableCollection</name><argument_list pos:line="371" pos:column="48">&lt;<argument><name pos:line="371" pos:column="49">ISerializationConverter</name></argument>&gt;</argument_list></name><argument_list pos:line="371" pos:column="73">(<argument><expr><name><name pos:line="371" pos:column="74">Configuration</name><op:operator pos:line="371" pos:column="87">.</op:operator><name pos:line="371" pos:column="88">SerializationConverters</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="374" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="375" pos:column="9">/// Instantiates an instance of &lt;see cref="IResource"/&gt;.</comment>
        <comment type="line" pos:line="376" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="377" pos:column="9">/// &lt;returns&gt;A &lt;see cref="IResource"/&gt; instance resolved by one of the &lt;see cref="IServiceLocator"/&gt;s, otherwise &lt;see cref="ConfigurationResource"/&gt;.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="378" pos:column="9">public</specifier> <name pos:line="378" pos:column="16">IResource</name></type> <name pos:line="378" pos:column="26">InstantiateDefaultResource</name><parameter_list pos:line="378" pos:column="52">()</parameter_list>
        <block pos:line="379" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="380" pos:column="13">IResource</name></type> <name pos:line="380" pos:column="23">result</name></decl>;</decl_stmt>
            <if pos:line="381" pos:column="13">if <condition pos:line="381" pos:column="16">(<expr><call><name pos:line="381" pos:column="17">TrySingleInstanceFromServiceLocators</name><argument_list pos:line="381" pos:column="53">(<argument><expr pos:line="381" pos:column="54">out <name pos:line="381" pos:column="58">result</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="381" pos:column="66">
            <block pos:line="382" pos:column="13">{
                <return pos:line="383" pos:column="17">return <expr><name pos:line="383" pos:column="24">result</name></expr>;</return>
            }</block></then></if>

            <return pos:line="386" pos:column="13">return <expr><op:operator pos:line="386" pos:column="20">new</op:operator> <call><name pos:line="386" pos:column="24">ConfigurationResource</name><argument_list pos:line="386" pos:column="45">()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="389" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="390" pos:column="9">/// Instantiates a strategy pattern for accessing an instance of &lt;see cref="IExecutionTimer"/&gt;.</comment>
        <comment type="line" pos:line="391" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="392" pos:column="9">/// &lt;returns&gt;</comment>
        <comment type="line" pos:line="393" pos:column="9">/// A &lt;c&gt;Func&amp;lt;IExecutionTimer&amp;gt;&lt;/c&gt; to access the request specific &lt;see cref="IExecutionTimer"/&gt;.</comment>
        <comment type="line" pos:line="394" pos:column="9">/// &lt;/returns&gt;</comment>
        <function><type><specifier pos:line="395" pos:column="9">public</specifier> <name><name pos:line="395" pos:column="16">Func</name><argument_list pos:line="395" pos:column="20">&lt;<argument><name pos:line="395" pos:column="21">IExecutionTimer</name></argument>&gt;</argument_list></name></type> <name pos:line="395" pos:column="38">InstantiateTimerStrategy</name><parameter_list pos:line="395" pos:column="62">()</parameter_list>
        <block pos:line="396" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="397" pos:column="13">var</name></type> <name pos:line="397" pos:column="17">frameworkProvider</name> <init pos:line="397" pos:column="35">= <expr><call><name pos:line="397" pos:column="37">InstantiateFrameworkProvider</name><argument_list pos:line="397" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <return pos:line="399" pos:column="13">return <expr><lambda><parameter_list pos:line="399" pos:column="20">()</parameter_list> <op:operator pos:line="399" pos:column="23">=&gt;</op:operator> <call><name><name pos:line="399" pos:column="26">frameworkProvider</name><op:operator pos:line="399" pos:column="43">.</op:operator><name pos:line="399" pos:column="44">HttpRequestStore</name><op:operator pos:line="399" pos:column="60">.</op:operator><name><name pos:line="399" pos:column="61">Get</name><argument_list pos:line="399" pos:column="64">&lt;<argument><name pos:line="399" pos:column="65">IExecutionTimer</name></argument>&gt;</argument_list></name></name><argument_list pos:line="399" pos:column="81">(<argument><expr><name><name pos:line="399" pos:column="82">Constants</name><op:operator pos:line="399" pos:column="91">.</op:operator><name pos:line="399" pos:column="92">GlobalTimerKey</name></name></expr></argument>)</argument_list></call></lambda></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="402" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="403" pos:column="9">/// Instantiates a strategy pattern for accessing an instance of &lt;see cref="RuntimePolicy"/&gt;.</comment>
        <comment type="line" pos:line="404" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="405" pos:column="9">/// &lt;returns&gt;</comment>
        <comment type="line" pos:line="406" pos:column="9">/// A &lt;c&gt;Func&amp;lt;RuntimePolicy&amp;gt;&lt;/c&gt; to access the request specific &lt;see cref="RuntimePolicy"/&gt;.</comment>
        <comment type="line" pos:line="407" pos:column="9">/// &lt;/returns&gt;</comment>
        <function><type><specifier pos:line="408" pos:column="9">public</specifier> <name><name pos:line="408" pos:column="16">Func</name><argument_list pos:line="408" pos:column="20">&lt;<argument><name pos:line="408" pos:column="21">RuntimePolicy</name></argument>&gt;</argument_list></name></type> <name pos:line="408" pos:column="36">InstantiateRuntimePolicyStrategy</name><parameter_list pos:line="408" pos:column="68">()</parameter_list>
        <block pos:line="409" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="410" pos:column="13">var</name></type> <name pos:line="410" pos:column="17">frameworkProvider</name> <init pos:line="410" pos:column="35">= <expr><call><name pos:line="410" pos:column="37">InstantiateFrameworkProvider</name><argument_list pos:line="410" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="411" pos:column="13">var</name></type> <name pos:line="411" pos:column="17">logger</name> <init pos:line="411" pos:column="24">= <expr><call><name pos:line="411" pos:column="26">InstantiateLogger</name><argument_list pos:line="411" pos:column="43">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <return pos:line="413" pos:column="13">return <expr><lambda><parameter_list pos:line="413" pos:column="20">()</parameter_list> <op:operator pos:line="413" pos:column="23">=&gt;</op:operator>
            <block pos:line="414" pos:column="13">{
                <comment type="line" pos:line="415" pos:column="17">// this code is indirectly called from 2 places :</comment>
                <comment type="line" pos:line="416" pos:column="17">// - From inside an AlternateMethod instance (or basically everything that is related to a Glimpse proxy) to decide whether </comment>
                <comment type="line" pos:line="417" pos:column="17">//   or not Glimpse is enabled and data should be collected, and in case RuntimePolicy.Off is returned, the original method </comment>
                <comment type="line" pos:line="418" pos:column="17">//   will be called, which has the same effect as if Glimpse is not there.</comment>
                <comment type="line" pos:line="419" pos:column="17">// - By any Inspector, since it is exposed on the InspectorContext</comment>

                <comment type="line" pos:line="421" pos:column="17">// Now the assumption that is made here, is that this code will only be called after that the GlimpseRuntime's BeginRequest method</comment>
                <comment type="line" pos:line="422" pos:column="17">// has run and properly initialized the 'GlimpseContext' for the current request, which means it has at least set the current runtime policy. </comment>
                <comment type="line" pos:line="423" pos:column="17">// Unfortunately there are use-cases where users are creative and (ab)use specific concepts to achieve a specific goal, and those uses don't</comment>
                <comment type="line" pos:line="424" pos:column="17">// always align with Glimpse's assumptions. For example a new instance of an HttpContext is sometimes created and assigned to the HttpContext.Current</comment>
                <comment type="line" pos:line="425" pos:column="17">// property to have a new controller instance render a view to a string as if it was a request... This has the nasty side-effect that Glimpse is not</comment>
                <comment type="line" pos:line="426" pos:column="17">// given the opportunity to do a proper setup of that request, resulting in non-deterministic behavior.</comment>
                
                <comment type="line" pos:line="428" pos:column="17">// Therefore if we notice that the current request has not properly been initialized by the GlimpseRuntime's BeginRequest method then we'll decide</comment>
                <comment type="line" pos:line="429" pos:column="17">// that Glimpse is disabled, which is the safest assumption we can make here, preventing any further Glimpse specific code from collection information for that new "request".</comment>
                <if pos:line="430" pos:column="17">if <condition pos:line="430" pos:column="20">(<expr><op:operator pos:line="430" pos:column="21">!</op:operator><call><name><name pos:line="430" pos:column="22">frameworkProvider</name><op:operator pos:line="430" pos:column="39">.</op:operator><name pos:line="430" pos:column="40">HttpRequestStore</name><op:operator pos:line="430" pos:column="56">.</op:operator><name pos:line="430" pos:column="57">Contains</name></name><argument_list pos:line="430" pos:column="65">(<argument><expr><name><name pos:line="430" pos:column="66">Constants</name><op:operator pos:line="430" pos:column="75">.</op:operator><name pos:line="430" pos:column="76">RuntimePolicyKey</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="430" pos:column="94">
                <block pos:line="431" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="432" pos:column="21">logger</name><op:operator pos:line="432" pos:column="27">.</op:operator><name pos:line="432" pos:column="28">Debug</name></name><argument_list pos:line="432" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="432" pos:column="34">"Apparently GlimpseRuntime has not yet initialized this request. This might happen in case you're doing something specific like mentioned in this issue: https://github.com/Glimpse/Glimpse/issues/703 . Either way, Glimpse will be disabled to prevent any further non-deterministic behavior during this request."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    
                    <comment type="line" pos:line="434" pos:column="21">// we'll store a RuntimePolicy.Off in the HttpRequestStore for subsequent calls for this request.</comment>
                    <expr_stmt><expr><call><name><name pos:line="435" pos:column="21">frameworkProvider</name><op:operator pos:line="435" pos:column="38">.</op:operator><name pos:line="435" pos:column="39">HttpRequestStore</name><op:operator pos:line="435" pos:column="55">.</op:operator><name pos:line="435" pos:column="56">Set</name></name><argument_list pos:line="435" pos:column="59">(<argument><expr><name><name pos:line="435" pos:column="60">Constants</name><op:operator pos:line="435" pos:column="69">.</op:operator><name pos:line="435" pos:column="70">RuntimePolicyKey</name></name></expr></argument>, <argument><expr><name><name pos:line="435" pos:column="88">RuntimePolicy</name><op:operator pos:line="435" pos:column="101">.</op:operator><name pos:line="435" pos:column="102">Off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <return pos:line="438" pos:column="17">return <expr><call><name><name pos:line="438" pos:column="24">frameworkProvider</name><op:operator pos:line="438" pos:column="41">.</op:operator><name pos:line="438" pos:column="42">HttpRequestStore</name><op:operator pos:line="438" pos:column="58">.</op:operator><name><name pos:line="438" pos:column="59">Get</name><argument_list pos:line="438" pos:column="62">&lt;<argument><name pos:line="438" pos:column="63">RuntimePolicy</name></argument>&gt;</argument_list></name></name><argument_list pos:line="438" pos:column="77">(<argument><expr><name><name pos:line="438" pos:column="78">Constants</name><op:operator pos:line="438" pos:column="87">.</op:operator><name pos:line="438" pos:column="88">RuntimePolicyKey</name></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></lambda></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="442" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="443" pos:column="9">/// Instantiates an instance of &lt;see cref="IGlimpseConfiguration"/&gt;.</comment>
        <comment type="line" pos:line="444" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="445" pos:column="9">/// &lt;returns&gt;A &lt;see cref="IGlimpseConfiguration"/&gt; instance resolved by one of the &lt;see cref="IServiceLocator"/&gt;s, otherwise &lt;see cref="GlimpseConfiguration"/&gt; with each constructor parameter created with the corresponding &lt;see cref="Factory"/&gt; method.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="446" pos:column="9">public</specifier> <name pos:line="446" pos:column="16">IGlimpseConfiguration</name></type> <name pos:line="446" pos:column="38">InstantiateConfiguration</name><parameter_list pos:line="446" pos:column="62">()</parameter_list>
        <block pos:line="447" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="448" pos:column="13">IGlimpseConfiguration</name></type> <name pos:line="448" pos:column="35">result</name></decl>;</decl_stmt>
            <if pos:line="449" pos:column="13">if <condition pos:line="449" pos:column="16">(<expr><call><name pos:line="449" pos:column="17">TrySingleInstanceFromServiceLocators</name><argument_list pos:line="449" pos:column="53">(<argument><expr pos:line="449" pos:column="54">out <name pos:line="449" pos:column="58">result</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="449" pos:column="66">
            <block pos:line="450" pos:column="13">{
                <return pos:line="451" pos:column="17">return <expr><name pos:line="451" pos:column="24">result</name></expr>;</return>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="454" pos:column="13">var</name></type> <name pos:line="454" pos:column="17">frameworkProvider</name> <init pos:line="454" pos:column="35">= <expr><call><name pos:line="454" pos:column="37">InstantiateFrameworkProvider</name><argument_list pos:line="454" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="455" pos:column="13">var</name></type> <name pos:line="455" pos:column="17">timerStrategy</name> <init pos:line="455" pos:column="31">= <expr><call><name pos:line="455" pos:column="33">InstantiateTimerStrategy</name><argument_list pos:line="455" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="456" pos:column="13">var</name></type> <name pos:line="456" pos:column="17">runtimePolicyStrategy</name> <init pos:line="456" pos:column="39">= <expr><call><name pos:line="456" pos:column="41">InstantiateRuntimePolicyStrategy</name><argument_list pos:line="456" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="457" pos:column="13">var</name></type> <name pos:line="457" pos:column="17">endpointConfiguration</name> <init pos:line="457" pos:column="39">= <expr><call><name pos:line="457" pos:column="41">InstantiateResourceEndpointConfiguration</name><argument_list pos:line="457" pos:column="81">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="458" pos:column="13">var</name></type> <name pos:line="458" pos:column="17">clientScripts</name> <init pos:line="458" pos:column="31">= <expr><call><name pos:line="458" pos:column="33">InstantiateClientScripts</name><argument_list pos:line="458" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="459" pos:column="13">var</name></type> <name pos:line="459" pos:column="17">logger</name> <init pos:line="459" pos:column="24">= <expr><call><name pos:line="459" pos:column="26">InstantiateLogger</name><argument_list pos:line="459" pos:column="43">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="460" pos:column="13">var</name></type> <name pos:line="460" pos:column="17">policy</name> <init pos:line="460" pos:column="24">= <expr><call><name pos:line="460" pos:column="26">InstantiateDefaultRuntimePolicy</name><argument_list pos:line="460" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="461" pos:column="13">var</name></type> <name pos:line="461" pos:column="17">htmlEncoder</name> <init pos:line="461" pos:column="29">= <expr><call><name pos:line="461" pos:column="31">InstantiateHtmlEncoder</name><argument_list pos:line="461" pos:column="53">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="462" pos:column="13">var</name></type> <name pos:line="462" pos:column="17">persistenceStore</name> <init pos:line="462" pos:column="34">= <expr><call><name pos:line="462" pos:column="36">InstantiatePersistenceStore</name><argument_list pos:line="462" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="463" pos:column="13">var</name></type> <name pos:line="463" pos:column="17">inspectors</name> <init pos:line="463" pos:column="28">= <expr><call><name pos:line="463" pos:column="30">InstantiateInspectors</name><argument_list pos:line="463" pos:column="51">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="464" pos:column="13">var</name></type> <name pos:line="464" pos:column="17">resources</name> <init pos:line="464" pos:column="27">= <expr><call><name pos:line="464" pos:column="29">InstantiateResources</name><argument_list pos:line="464" pos:column="49">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="465" pos:column="13">var</name></type> <name pos:line="465" pos:column="17">serializer</name> <init pos:line="465" pos:column="28">= <expr><call><name pos:line="465" pos:column="30">InstantiateSerializer</name><argument_list pos:line="465" pos:column="51">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="466" pos:column="13">var</name></type> <name pos:line="466" pos:column="17">tabs</name> <init pos:line="466" pos:column="22">= <expr><call><name pos:line="466" pos:column="24">InstantiateTabs</name><argument_list pos:line="466" pos:column="39">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="467" pos:column="13">var</name></type> <name pos:line="467" pos:column="17">displays</name> <init pos:line="467" pos:column="26">= <expr><call><name pos:line="467" pos:column="28">InstantiateDisplays</name><argument_list pos:line="467" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="468" pos:column="13">var</name></type> <name pos:line="468" pos:column="17">runtimePolicies</name> <init pos:line="468" pos:column="33">= <expr><call><name pos:line="468" pos:column="35">InstantiateRuntimePolicies</name><argument_list pos:line="468" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="469" pos:column="13">var</name></type> <name pos:line="469" pos:column="17">defaultResource</name> <init pos:line="469" pos:column="33">= <expr><call><name pos:line="469" pos:column="35">InstantiateDefaultResource</name><argument_list pos:line="469" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="470" pos:column="13">var</name></type> <name pos:line="470" pos:column="17">proxyFactory</name> <init pos:line="470" pos:column="30">= <expr><call><name pos:line="470" pos:column="32">InstantiateProxyFactory</name><argument_list pos:line="470" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="471" pos:column="13">var</name></type> <name pos:line="471" pos:column="17">messageBroker</name> <init pos:line="471" pos:column="31">= <expr><call><name pos:line="471" pos:column="33">InstantiateMessageBroker</name><argument_list pos:line="471" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="472" pos:column="13">var</name></type> <name pos:line="472" pos:column="17">endpointBaseUri</name> <init pos:line="472" pos:column="33">= <expr><call><name pos:line="472" pos:column="35">InstantiateBaseResourceUri</name><argument_list pos:line="472" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <return pos:line="474" pos:column="13">return <expr><op:operator pos:line="474" pos:column="20">new</op:operator> <call><name pos:line="474" pos:column="24">GlimpseConfiguration</name><argument_list pos:line="474" pos:column="44">(<argument><expr><name pos:line="474" pos:column="45">frameworkProvider</name></expr></argument>, <argument><expr><name pos:line="474" pos:column="64">endpointConfiguration</name></expr></argument>, <argument><expr><name pos:line="474" pos:column="87">clientScripts</name></expr></argument>, <argument><expr><name pos:line="474" pos:column="102">logger</name></expr></argument>, <argument><expr><name pos:line="474" pos:column="110">policy</name></expr></argument>, <argument><expr><name pos:line="474" pos:column="118">htmlEncoder</name></expr></argument>, <argument><expr><name pos:line="474" pos:column="131">persistenceStore</name></expr></argument>, <argument><expr><name pos:line="474" pos:column="149">inspectors</name></expr></argument>, <argument><expr><name pos:line="474" pos:column="161">resources</name></expr></argument>, <argument><expr><name pos:line="474" pos:column="172">serializer</name></expr></argument>, <argument><expr><name pos:line="474" pos:column="184">tabs</name></expr></argument>, <argument><expr><name pos:line="474" pos:column="190">displays</name></expr></argument>, <argument><expr><name pos:line="474" pos:column="200">runtimePolicies</name></expr></argument>, <argument><expr><name pos:line="474" pos:column="217">defaultResource</name></expr></argument>, <argument><expr><name pos:line="474" pos:column="234">proxyFactory</name></expr></argument>, <argument><expr><name pos:line="474" pos:column="248">messageBroker</name></expr></argument>, <argument><expr><name pos:line="474" pos:column="263">endpointBaseUri</name></expr></argument>, <argument><expr><name pos:line="474" pos:column="280">timerStrategy</name></expr></argument>, <argument><expr><name pos:line="474" pos:column="295">runtimePolicyStrategy</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="477" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="478" pos:column="9">/// Instantiates a string that represents the base Uri Glimpse will use for invoking all instances of &lt;see cref="IResource"/&gt;.</comment>
        <comment type="line" pos:line="479" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="480" pos:column="9">/// &lt;returns&gt;A &lt;see cref="string"/&gt; instance based on configuration settings.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="481" pos:column="9">public</specifier> <name pos:line="481" pos:column="16">string</name></type> <name pos:line="481" pos:column="23">InstantiateBaseResourceUri</name><parameter_list pos:line="481" pos:column="49">()</parameter_list>
        <block pos:line="482" pos:column="9">{
            <return pos:line="483" pos:column="13">return <expr><name><name pos:line="483" pos:column="20">Configuration</name><op:operator pos:line="483" pos:column="33">.</op:operator><name pos:line="483" pos:column="34">EndpointBaseUri</name></name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="486" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="487" pos:column="9">/// Instantiates an instance of &lt;see cref="IMessageBroker"/&gt;.</comment>
        <comment type="line" pos:line="488" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="489" pos:column="9">/// &lt;returns&gt;A &lt;see cref="IMessageBroker"/&gt; instance resolved by one of the &lt;see cref="IServiceLocator"/&gt;s, otherwise &lt;see cref="MessageBroker"/&gt;.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="490" pos:column="9">public</specifier> <name pos:line="490" pos:column="16">IMessageBroker</name></type> <name pos:line="490" pos:column="31">InstantiateMessageBroker</name><parameter_list pos:line="490" pos:column="55">()</parameter_list>
        <block pos:line="491" pos:column="9">{
            <if pos:line="492" pos:column="13">if <condition pos:line="492" pos:column="16">(<expr><name pos:line="492" pos:column="17">MessageBroker</name> <op:operator pos:line="492" pos:column="31">==</op:operator> <name pos:line="492" pos:column="34">null</name></expr>)</condition><then pos:line="492" pos:column="39">
            <block pos:line="493" pos:column="13">{ 
                <decl_stmt><decl><type><name pos:line="494" pos:column="17">IMessageBroker</name></type> <name pos:line="494" pos:column="32">result</name></decl>;</decl_stmt>
                <if pos:line="495" pos:column="17">if <condition pos:line="495" pos:column="20">(<expr><call><name pos:line="495" pos:column="21">TrySingleInstanceFromServiceLocators</name><argument_list pos:line="495" pos:column="57">(<argument><expr pos:line="495" pos:column="58">out <name pos:line="495" pos:column="62">result</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="495" pos:column="70">
                <block pos:line="496" pos:column="17">{
                    <expr_stmt><expr><name pos:line="497" pos:column="21">MessageBroker</name> <op:operator pos:line="497" pos:column="35">=</op:operator> <name pos:line="497" pos:column="37">result</name></expr>;</expr_stmt> 
                }</block></then>
                <else pos:line="499" pos:column="17">else
                <block pos:line="500" pos:column="17">{
                    <expr_stmt><expr><name pos:line="501" pos:column="21">MessageBroker</name> <op:operator pos:line="501" pos:column="35">=</op:operator> <op:operator pos:line="501" pos:column="37">new</op:operator> <call><name pos:line="501" pos:column="41">MessageBroker</name><argument_list pos:line="501" pos:column="54">(<argument><expr><call><name pos:line="501" pos:column="55">InstantiateLogger</name><argument_list pos:line="501" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if>

            <return pos:line="505" pos:column="13">return <expr><name pos:line="505" pos:column="20">MessageBroker</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="508" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="509" pos:column="9">/// Instantiates an instance of &lt;see cref="IProxyFactory"/&gt;.</comment>
        <comment type="line" pos:line="510" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="511" pos:column="9">/// &lt;returns&gt;A &lt;see cref="IProxyFactory"/&gt; instance resolved by one of the &lt;see cref="IServiceLocator"/&gt;s, otherwise &lt;see cref="CastleDynamicProxyFactory"/&gt; (leveraging &lt;see href="http://www.castleproject.org/projects/dynamicproxy/"&gt;Castle DynamicProxy&lt;/see&gt;.).&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="512" pos:column="9">public</specifier> <name pos:line="512" pos:column="16">IProxyFactory</name></type> <name pos:line="512" pos:column="30">InstantiateProxyFactory</name><parameter_list pos:line="512" pos:column="53">()</parameter_list>
        <block pos:line="513" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="514" pos:column="13">IProxyFactory</name></type> <name pos:line="514" pos:column="27">result</name></decl>;</decl_stmt>
            <if pos:line="515" pos:column="13">if <condition pos:line="515" pos:column="16">(<expr><call><name pos:line="515" pos:column="17">TrySingleInstanceFromServiceLocators</name><argument_list pos:line="515" pos:column="53">(<argument><expr pos:line="515" pos:column="54">out <name pos:line="515" pos:column="58">result</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="515" pos:column="66">
            <block pos:line="516" pos:column="13">{
                <return pos:line="517" pos:column="17">return <expr><name pos:line="517" pos:column="24">result</name></expr>;</return>
            }</block></then></if>

            <return pos:line="520" pos:column="13">return <expr><op:operator pos:line="520" pos:column="20">new</op:operator> <call><name pos:line="520" pos:column="24">CastleDynamicProxyFactory</name><argument_list pos:line="520" pos:column="49">(<argument><expr><call><name pos:line="520" pos:column="50">InstantiateLogger</name><argument_list pos:line="520" pos:column="67">()</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="520" pos:column="71">InstantiateMessageBroker</name><argument_list pos:line="520" pos:column="95">()</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="520" pos:column="99">InstantiateTimerStrategy</name><argument_list pos:line="520" pos:column="123">()</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="520" pos:column="127">InstantiateRuntimePolicyStrategy</name><argument_list pos:line="520" pos:column="159">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="523" pos:column="9">private</specifier> <specifier pos:line="523" pos:column="17">static</specifier> <name><name pos:line="523" pos:column="24">IEnumerable</name><argument_list pos:line="523" pos:column="35">&lt;<argument><name pos:line="523" pos:column="36">Type</name></argument>&gt;</argument_list></name></type> <name pos:line="523" pos:column="42">ToEnumerable</name><parameter_list pos:line="523" pos:column="54">(<param><decl><type><name pos:line="523" pos:column="55">TypeElementCollection</name></type> <name pos:line="523" pos:column="77">collection</name></decl></param>)</parameter_list>
        <block pos:line="524" pos:column="9">{
            <foreach pos:line="525" pos:column="13">foreach (<init><decl><type><name pos:line="525" pos:column="22">TypeElement</name></type> <name pos:line="525" pos:column="34">typeElement</name> <range pos:line="525" pos:column="46">in <expr><name pos:line="525" pos:column="49">collection</name></expr></range></decl></init>)
            <block pos:line="526" pos:column="13">{
                <return><specifier pos:line="527" pos:column="17">yield</specifier> return <expr><name><name pos:line="527" pos:column="30">typeElement</name><op:operator pos:line="527" pos:column="41">.</op:operator><name pos:line="527" pos:column="42">Type</name></name></expr>;</return>
            }</block></foreach>
        }</block></function>

        <function><type><specifier pos:line="531" pos:column="9">private</specifier> <name><name pos:line="531" pos:column="17">IDiscoverableCollection</name><argument_list pos:line="531" pos:column="40">&lt;<argument><name pos:line="531" pos:column="41">T</name></argument>&gt;</argument_list></name></type> <name><name pos:line="531" pos:column="44">CreateDiscoverableCollection</name><argument_list pos:line="531" pos:column="72">&lt;<argument><name pos:line="531" pos:column="73">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="531" pos:column="75">(<param><decl><type><name pos:line="531" pos:column="76">DiscoverableCollectionElement</name></type> <name pos:line="531" pos:column="106">config</name></decl></param>)</parameter_list>
        <block pos:line="532" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="533" pos:column="13">var</name></type> <name pos:line="533" pos:column="17">discoverableCollection</name> <init pos:line="533" pos:column="40">= <expr><op:operator pos:line="533" pos:column="42">new</op:operator> <call><name><name pos:line="533" pos:column="46">ReflectionDiscoverableCollection</name><argument_list pos:line="533" pos:column="78">&lt;<argument><name pos:line="533" pos:column="79">T</name></argument>&gt;</argument_list></name><argument_list pos:line="533" pos:column="81">(<argument><expr><call><name pos:line="533" pos:column="82">InstantiateLogger</name><argument_list pos:line="533" pos:column="99">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="535" pos:column="13">discoverableCollection</name><op:operator pos:line="535" pos:column="35">.</op:operator><name pos:line="535" pos:column="36">IgnoredTypes</name><op:operator pos:line="535" pos:column="48">.</op:operator><name pos:line="535" pos:column="49">AddRange</name></name><argument_list pos:line="535" pos:column="57">(<argument><expr><call><name pos:line="535" pos:column="58">ToEnumerable</name><argument_list pos:line="535" pos:column="70">(<argument><expr><name><name pos:line="535" pos:column="71">config</name><op:operator pos:line="535" pos:column="77">.</op:operator><name pos:line="535" pos:column="78">IgnoredTypes</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="537" pos:column="13">// config.DiscoveryLocation (collection specific) overrides Configuration.DiscoveryLocation (on main &lt;glimpse&gt; node)</comment>
            <decl_stmt><decl><type><name pos:line="538" pos:column="13">var</name></type> <name pos:line="538" pos:column="17">locationCascade</name> <init pos:line="538" pos:column="33">= <expr><call><name><name pos:line="538" pos:column="35">string</name><op:operator pos:line="538" pos:column="41">.</op:operator><name pos:line="538" pos:column="42">IsNullOrEmpty</name></name><argument_list pos:line="538" pos:column="55">(<argument><expr><name><name pos:line="538" pos:column="56">config</name><op:operator pos:line="538" pos:column="62">.</op:operator><name pos:line="538" pos:column="63">DiscoveryLocation</name></name></expr></argument>)</argument_list></call>
                                       <op:operator pos:line="539" pos:column="40">?</op:operator> <call><name><name pos:line="539" pos:column="42">string</name><op:operator pos:line="539" pos:column="48">.</op:operator><name pos:line="539" pos:column="49">IsNullOrEmpty</name></name><argument_list pos:line="539" pos:column="62">(<argument><expr><name><name pos:line="539" pos:column="63">Configuration</name><op:operator pos:line="539" pos:column="76">.</op:operator><name pos:line="539" pos:column="77">DiscoveryLocation</name></name></expr></argument>)</argument_list></call>
                                             <op:operator pos:line="540" pos:column="46">?</op:operator> <name pos:line="540" pos:column="48">null</name>
                                             <op:operator pos:line="541" pos:column="46">:</op:operator> <name><name pos:line="541" pos:column="48">Configuration</name><op:operator pos:line="541" pos:column="61">.</op:operator><name pos:line="541" pos:column="62">DiscoveryLocation</name></name>
                                       <op:operator pos:line="542" pos:column="40">:</op:operator> <name><name pos:line="542" pos:column="42">config</name><op:operator pos:line="542" pos:column="48">.</op:operator><name pos:line="542" pos:column="49">DiscoveryLocation</name></name></expr></init></decl>;</decl_stmt>

            <if pos:line="544" pos:column="13">if <condition pos:line="544" pos:column="16">(<expr><name pos:line="544" pos:column="17">locationCascade</name> <op:operator pos:line="544" pos:column="33">!=</op:operator> <name pos:line="544" pos:column="36">null</name></expr>)</condition><then pos:line="544" pos:column="41">
            <block pos:line="545" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="546" pos:column="17">discoverableCollection</name><op:operator pos:line="546" pos:column="39">.</op:operator><name pos:line="546" pos:column="40">DiscoveryLocation</name></name> <op:operator pos:line="546" pos:column="58">=</op:operator> <name pos:line="546" pos:column="60">locationCascade</name></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><name><name pos:line="549" pos:column="13">discoverableCollection</name><op:operator pos:line="549" pos:column="35">.</op:operator><name pos:line="549" pos:column="36">AutoDiscover</name></name> <op:operator pos:line="549" pos:column="49">=</op:operator> <name><name pos:line="549" pos:column="51">config</name><op:operator pos:line="549" pos:column="57">.</op:operator><name pos:line="549" pos:column="58">AutoDiscover</name></name></expr>;</expr_stmt>
            <if pos:line="550" pos:column="13">if <condition pos:line="550" pos:column="16">(<expr><name><name pos:line="550" pos:column="17">discoverableCollection</name><op:operator pos:line="550" pos:column="39">.</op:operator><name pos:line="550" pos:column="40">AutoDiscover</name></name></expr>)</condition><then pos:line="550" pos:column="53">
            <block pos:line="551" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="552" pos:column="17">discoverableCollection</name><op:operator pos:line="552" pos:column="39">.</op:operator><name pos:line="552" pos:column="40">Discover</name></name><argument_list pos:line="552" pos:column="48">()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <return pos:line="555" pos:column="13">return <expr><name pos:line="555" pos:column="20">discoverableCollection</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="558" pos:column="9">private</specifier> <name pos:line="558" pos:column="17">bool</name></type> <name><name pos:line="558" pos:column="22">TrySingleInstanceFromServiceLocators</name><argument_list pos:line="558" pos:column="58">&lt;<argument><name pos:line="558" pos:column="59">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="558" pos:column="61">(<param><decl><type><specifier pos:line="558" pos:column="62">out</specifier> <name pos:line="558" pos:column="66">T</name></type> <name pos:line="558" pos:column="68">instance</name></decl></param>)</parameter_list> <where pos:line="558" pos:column="78">where <name pos:line="558" pos:column="84">T</name> : class</where>
        <block pos:line="559" pos:column="9">{
            <if pos:line="560" pos:column="13">if <condition pos:line="560" pos:column="16">(<expr><name pos:line="560" pos:column="17">UserServiceLocator</name> <op:operator pos:line="560" pos:column="36">!=</op:operator> <name pos:line="560" pos:column="39">null</name></expr>)</condition><then pos:line="560" pos:column="44">
            <block pos:line="561" pos:column="13">{
                <expr_stmt><expr><name pos:line="562" pos:column="17">instance</name> <op:operator pos:line="562" pos:column="26">=</op:operator> <call><name><name pos:line="562" pos:column="28">UserServiceLocator</name><op:operator pos:line="562" pos:column="46">.</op:operator><name><name pos:line="562" pos:column="47">GetInstance</name><argument_list pos:line="562" pos:column="58">&lt;<argument><name pos:line="562" pos:column="59">T</name></argument>&gt;</argument_list></name></name><argument_list pos:line="562" pos:column="61">()</argument_list></call></expr>;</expr_stmt>
                <if pos:line="563" pos:column="17">if <condition pos:line="563" pos:column="20">(<expr><name pos:line="563" pos:column="21">instance</name> <op:operator pos:line="563" pos:column="30">!=</op:operator> <name pos:line="563" pos:column="33">null</name></expr>)</condition><then pos:line="563" pos:column="38">
                <block pos:line="564" pos:column="17">{
                    <return pos:line="565" pos:column="21">return <expr><lit:literal type="boolean" pos:line="565" pos:column="28">true</lit:literal></expr>;</return>
                }</block></then></if>
            }</block></then></if>

            <if pos:line="569" pos:column="13">if <condition pos:line="569" pos:column="16">(<expr><name pos:line="569" pos:column="17">ProviderServiceLocator</name> <op:operator pos:line="569" pos:column="40">!=</op:operator> <name pos:line="569" pos:column="43">null</name></expr>)</condition><then pos:line="569" pos:column="48">
            <block pos:line="570" pos:column="13">{
                <expr_stmt><expr><name pos:line="571" pos:column="17">instance</name> <op:operator pos:line="571" pos:column="26">=</op:operator> <call><name><name pos:line="571" pos:column="28">ProviderServiceLocator</name><op:operator pos:line="571" pos:column="50">.</op:operator><name><name pos:line="571" pos:column="51">GetInstance</name><argument_list pos:line="571" pos:column="62">&lt;<argument><name pos:line="571" pos:column="63">T</name></argument>&gt;</argument_list></name></name><argument_list pos:line="571" pos:column="65">()</argument_list></call></expr>;</expr_stmt>
                <if pos:line="572" pos:column="17">if <condition pos:line="572" pos:column="20">(<expr><name pos:line="572" pos:column="21">instance</name> <op:operator pos:line="572" pos:column="30">!=</op:operator> <name pos:line="572" pos:column="33">null</name></expr>)</condition><then pos:line="572" pos:column="38">
                <block pos:line="573" pos:column="17">{
                    <return pos:line="574" pos:column="21">return <expr><lit:literal type="boolean" pos:line="574" pos:column="28">true</lit:literal></expr>;</return>
                }</block></then></if>
            }</block></then></if>

            <expr_stmt><expr><name pos:line="578" pos:column="13">instance</name> <op:operator pos:line="578" pos:column="22">=</op:operator> <name pos:line="578" pos:column="24">null</name></expr>;</expr_stmt>
            <return pos:line="579" pos:column="13">return <expr><lit:literal type="boolean" pos:line="579" pos:column="20">false</lit:literal></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="582" pos:column="9">private</specifier> <name pos:line="582" pos:column="17">bool</name></type> <name><name pos:line="582" pos:column="22">TryAllInstancesFromServiceLocators</name><argument_list pos:line="582" pos:column="56">&lt;<argument><name pos:line="582" pos:column="57">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="582" pos:column="59">(<param><decl><type><specifier pos:line="582" pos:column="60">out</specifier> <name><name pos:line="582" pos:column="64">ICollection</name><argument_list pos:line="582" pos:column="75">&lt;<argument><name pos:line="582" pos:column="76">T</name></argument>&gt;</argument_list></name></type> <name pos:line="582" pos:column="79">instance</name></decl></param>)</parameter_list> <where pos:line="582" pos:column="89">where <name pos:line="582" pos:column="95">T</name> : class</where>
        <block pos:line="583" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="584" pos:column="13">IEnumerable</name><argument_list pos:line="584" pos:column="24">&lt;<argument><name pos:line="584" pos:column="25">T</name></argument>&gt;</argument_list></name></type> <name pos:line="584" pos:column="28">result</name></decl>;</decl_stmt>
            <if pos:line="585" pos:column="13">if <condition pos:line="585" pos:column="16">(<expr><name pos:line="585" pos:column="17">UserServiceLocator</name> <op:operator pos:line="585" pos:column="36">!=</op:operator> <name pos:line="585" pos:column="39">null</name></expr>)</condition><then pos:line="585" pos:column="44">
            <block pos:line="586" pos:column="13">{
                <expr_stmt><expr><name pos:line="587" pos:column="17">result</name> <op:operator pos:line="587" pos:column="24">=</op:operator> <call><name><name pos:line="587" pos:column="26">UserServiceLocator</name><op:operator pos:line="587" pos:column="44">.</op:operator><name><name pos:line="587" pos:column="45">GetAllInstances</name><argument_list pos:line="587" pos:column="60">&lt;<argument><name pos:line="587" pos:column="61">T</name></argument>&gt;</argument_list></name></name><argument_list pos:line="587" pos:column="63">()</argument_list></call></expr>;</expr_stmt>
                <if pos:line="588" pos:column="17">if <condition pos:line="588" pos:column="20">(<expr><name pos:line="588" pos:column="21">result</name> <op:operator pos:line="588" pos:column="28">!=</op:operator> <name pos:line="588" pos:column="31">null</name></expr>)</condition><then pos:line="588" pos:column="36">
                <block pos:line="589" pos:column="17">{
                    <expr_stmt><expr><name pos:line="590" pos:column="21">instance</name> <op:operator pos:line="590" pos:column="30">=</op:operator> <name pos:line="590" pos:column="32">result</name> <op:operator pos:line="590" pos:column="39">as</op:operator> <name><name pos:line="590" pos:column="42">IList</name><argument_list pos:line="590" pos:column="47">&lt;<argument><name pos:line="590" pos:column="48">T</name></argument>&gt;</argument_list></name></expr>;</expr_stmt>
                    <return pos:line="591" pos:column="21">return <expr><lit:literal type="boolean" pos:line="591" pos:column="28">true</lit:literal></expr>;</return>
                }</block></then></if>
            }</block></then></if>

            <if pos:line="595" pos:column="13">if <condition pos:line="595" pos:column="16">(<expr><name pos:line="595" pos:column="17">ProviderServiceLocator</name> <op:operator pos:line="595" pos:column="40">!=</op:operator> <name pos:line="595" pos:column="43">null</name></expr>)</condition><then pos:line="595" pos:column="48">
            <block pos:line="596" pos:column="13">{
                <expr_stmt><expr><name pos:line="597" pos:column="17">result</name> <op:operator pos:line="597" pos:column="24">=</op:operator> <call><name><name pos:line="597" pos:column="26">ProviderServiceLocator</name><op:operator pos:line="597" pos:column="48">.</op:operator><name><name pos:line="597" pos:column="49">GetAllInstances</name><argument_list pos:line="597" pos:column="64">&lt;<argument><name pos:line="597" pos:column="65">T</name></argument>&gt;</argument_list></name></name><argument_list pos:line="597" pos:column="67">()</argument_list></call></expr>;</expr_stmt>
                <if pos:line="598" pos:column="17">if <condition pos:line="598" pos:column="20">(<expr><name pos:line="598" pos:column="21">result</name> <op:operator pos:line="598" pos:column="28">!=</op:operator> <name pos:line="598" pos:column="31">null</name></expr>)</condition><then pos:line="598" pos:column="36">
                <block pos:line="599" pos:column="17">{
                    <expr_stmt><expr><name pos:line="600" pos:column="21">instance</name> <op:operator pos:line="600" pos:column="30">=</op:operator> <name pos:line="600" pos:column="32">result</name> <op:operator pos:line="600" pos:column="39">as</op:operator> <name><name pos:line="600" pos:column="42">IList</name><argument_list pos:line="600" pos:column="47">&lt;<argument><name pos:line="600" pos:column="48">T</name></argument>&gt;</argument_list></name></expr>;</expr_stmt>
                    <return pos:line="601" pos:column="21">return <expr><lit:literal type="boolean" pos:line="601" pos:column="28">true</lit:literal></expr>;</return>
                }</block></then></if>
            }</block></then></if>

            <expr_stmt><expr><name pos:line="605" pos:column="13">instance</name> <op:operator pos:line="605" pos:column="22">=</op:operator> <name pos:line="605" pos:column="24">null</name></expr>;</expr_stmt>
            <return pos:line="606" pos:column="13">return <expr><lit:literal type="boolean" pos:line="606" pos:column="20">false</lit:literal></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
