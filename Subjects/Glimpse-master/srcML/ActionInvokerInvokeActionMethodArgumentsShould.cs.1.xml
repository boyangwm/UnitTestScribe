<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Mvc\AlternateType\ActionInvokerInvokeActionMethodArgumentsShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Web</name><op:operator pos:line="3" pos:column="17">.</op:operator><name pos:line="3" pos:column="18">Mvc</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Mvc</name><op:operator pos:line="4" pos:column="18">.</op:operator><name pos:line="4" pos:column="19">AlternateType</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Glimpse</name><op:operator pos:line="5" pos:column="14">.</op:operator><name pos:line="5" pos:column="15">Test</name><op:operator pos:line="5" pos:column="19">.</op:operator><name pos:line="5" pos:column="20">Common</name></name>;</using>
<using pos:line="6" pos:column="1">using <name pos:line="6" pos:column="7">Xunit</name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Xunit</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">Extensions</name></name>;</using>

<namespace pos:line="9" pos:column="1">namespace <name><name pos:line="9" pos:column="11">Glimpse</name><op:operator pos:line="9" pos:column="18">.</op:operator><name pos:line="9" pos:column="19">Test</name><op:operator pos:line="9" pos:column="23">.</op:operator><name pos:line="9" pos:column="24">Mvc</name><op:operator pos:line="9" pos:column="27">.</op:operator><name pos:line="9" pos:column="28">AlternateType</name></name>
<block pos:line="10" pos:column="1">{
    <class><specifier pos:line="11" pos:column="5">public</specifier> class <name pos:line="11" pos:column="18">ActionInvokerInvokeActionMethodArgumentsShould</name>
    <block pos:line="12" pos:column="5">{
        <function><type><attribute pos:line="13" pos:column="9">[<expr><name pos:line="13" pos:column="10">Theory</name></expr><op:operator pos:line="13" pos:column="16">,</op:operator> <expr><name pos:line="13" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="14" pos:column="9">public</specifier> <name pos:line="14" pos:column="16">void</name></type> <name pos:line="14" pos:column="21">ConstructForNonAsync</name><parameter_list pos:line="14" pos:column="41">(<param><decl><type><name pos:line="14" pos:column="42">ControllerContext</name></type> <name pos:line="14" pos:column="60">expectedControllerContext</name></decl></param>, <param><decl><type><name pos:line="14" pos:column="87">ActionDescriptor</name></type> <name pos:line="14" pos:column="104">expectedActionDescriptor</name></decl></param>, <param><decl><type><name><name pos:line="14" pos:column="130">IDictionary</name><argument_list pos:line="14" pos:column="141">&lt;<argument><name pos:line="14" pos:column="142">string</name></argument>, <argument><name pos:line="14" pos:column="150">object</name></argument>&gt;</argument_list></name></type> <name pos:line="14" pos:column="158">expectedParameters</name></decl></param>)</parameter_list>
        <block pos:line="15" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="16" pos:column="13">var</name></type> <name pos:line="16" pos:column="17">sut</name> <init pos:line="16" pos:column="21">= <expr><op:operator pos:line="16" pos:column="23">new</op:operator> <call><name><name pos:line="16" pos:column="27">ActionInvoker</name><op:operator pos:line="16" pos:column="40">.</op:operator><name pos:line="16" pos:column="41">InvokeActionMethod</name><op:operator pos:line="16" pos:column="59">.</op:operator><name pos:line="16" pos:column="60">Arguments</name></name><argument_list pos:line="16" pos:column="69">(<argument><expr><name pos:line="16" pos:column="70">expectedControllerContext</name></expr></argument>, <argument><expr><name pos:line="16" pos:column="97">expectedActionDescriptor</name></expr></argument>, <argument><expr><name pos:line="16" pos:column="123">expectedParameters</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="18" pos:column="13">Assert</name><op:operator pos:line="18" pos:column="19">.</op:operator><name pos:line="18" pos:column="20">Equal</name></name><argument_list pos:line="18" pos:column="25">(<argument><expr><name pos:line="18" pos:column="26">expectedControllerContext</name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="53">sut</name><op:operator pos:line="18" pos:column="56">.</op:operator><name pos:line="18" pos:column="57">ControllerContext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="19" pos:column="13">Assert</name><op:operator pos:line="19" pos:column="19">.</op:operator><name pos:line="19" pos:column="20">Equal</name></name><argument_list pos:line="19" pos:column="25">(<argument><expr><name pos:line="19" pos:column="26">expectedActionDescriptor</name></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="52">sut</name><op:operator pos:line="19" pos:column="55">.</op:operator><name pos:line="19" pos:column="56">ActionDescriptor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="20" pos:column="13">Assert</name><op:operator pos:line="20" pos:column="19">.</op:operator><name pos:line="20" pos:column="20">Equal</name></name><argument_list pos:line="20" pos:column="25">(<argument><expr><name pos:line="20" pos:column="26">expectedParameters</name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="46">sut</name><op:operator pos:line="20" pos:column="49">.</op:operator><name pos:line="20" pos:column="50">Parameters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="21" pos:column="13">Assert</name><op:operator pos:line="21" pos:column="19">.</op:operator><name pos:line="21" pos:column="20">False</name></name><argument_list pos:line="21" pos:column="25">(<argument><expr><name><name pos:line="21" pos:column="26">sut</name><op:operator pos:line="21" pos:column="29">.</op:operator><name pos:line="21" pos:column="30">IsAsync</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="22" pos:column="13">Assert</name><op:operator pos:line="22" pos:column="19">.</op:operator><name pos:line="22" pos:column="20">Null</name></name><argument_list pos:line="22" pos:column="24">(<argument><expr><name><name pos:line="22" pos:column="25">sut</name><op:operator pos:line="22" pos:column="28">.</op:operator><name pos:line="22" pos:column="29">Callback</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="23" pos:column="13">Assert</name><op:operator pos:line="23" pos:column="19">.</op:operator><name pos:line="23" pos:column="20">Null</name></name><argument_list pos:line="23" pos:column="24">(<argument><expr><name><name pos:line="23" pos:column="25">sut</name><op:operator pos:line="23" pos:column="28">.</op:operator><name pos:line="23" pos:column="29">State</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="26" pos:column="9">[<expr><name pos:line="26" pos:column="10">Theory</name></expr><op:operator pos:line="26" pos:column="16">,</op:operator> <expr><name pos:line="26" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="27" pos:column="9">public</specifier> <name pos:line="27" pos:column="16">void</name></type> <name pos:line="27" pos:column="21">ConstructForAsync</name><parameter_list pos:line="27" pos:column="38">(<param><decl><type><name pos:line="27" pos:column="39">ControllerContext</name></type> <name pos:line="27" pos:column="57">expectedControllerContext</name></decl></param>, <param><decl><type><name pos:line="27" pos:column="84">ActionDescriptor</name></type> <name pos:line="27" pos:column="101">expectedActionDescriptor</name></decl></param>, <param><decl><type><name><name pos:line="27" pos:column="127">IDictionary</name><argument_list pos:line="27" pos:column="138">&lt;<argument><name pos:line="27" pos:column="139">string</name></argument>, <argument><name pos:line="27" pos:column="147">object</name></argument>&gt;</argument_list></name></type> <name pos:line="27" pos:column="155">expectedParameters</name></decl></param>, <param><decl><type><name pos:line="27" pos:column="175">AsyncCallback</name></type> <name pos:line="27" pos:column="189">expectedCallback</name></decl></param>, <param><decl><type><name pos:line="27" pos:column="207">string</name></type> <name pos:line="27" pos:column="214">expectedState</name></decl></param>)</parameter_list>
        <block pos:line="28" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="29" pos:column="13">var</name></type> <name pos:line="29" pos:column="17">arguments</name> <init pos:line="29" pos:column="27">= <expr><op:operator pos:line="29" pos:column="29">new</op:operator> <call><name><name pos:line="29" pos:column="33">ActionInvoker</name><op:operator pos:line="29" pos:column="46">.</op:operator><name pos:line="29" pos:column="47">InvokeActionMethod</name><op:operator pos:line="29" pos:column="65">.</op:operator><name pos:line="29" pos:column="66">Arguments</name></name><argument_list pos:line="29" pos:column="75">(<argument><expr><name pos:line="29" pos:column="76">expectedControllerContext</name></expr></argument>, <argument><expr><name pos:line="29" pos:column="103">expectedActionDescriptor</name></expr></argument>, <argument><expr><name pos:line="29" pos:column="129">expectedParameters</name></expr></argument>, <argument><expr><name pos:line="29" pos:column="149">expectedCallback</name></expr></argument>, <argument><expr><name pos:line="29" pos:column="167">expectedState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="31" pos:column="13">Assert</name><op:operator pos:line="31" pos:column="19">.</op:operator><name pos:line="31" pos:column="20">Equal</name></name><argument_list pos:line="31" pos:column="25">(<argument><expr><name pos:line="31" pos:column="26">expectedControllerContext</name></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="53">arguments</name><op:operator pos:line="31" pos:column="62">.</op:operator><name pos:line="31" pos:column="63">ControllerContext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="32" pos:column="13">Assert</name><op:operator pos:line="32" pos:column="19">.</op:operator><name pos:line="32" pos:column="20">Equal</name></name><argument_list pos:line="32" pos:column="25">(<argument><expr><name pos:line="32" pos:column="26">expectedActionDescriptor</name></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="52">arguments</name><op:operator pos:line="32" pos:column="61">.</op:operator><name pos:line="32" pos:column="62">ActionDescriptor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="33" pos:column="13">Assert</name><op:operator pos:line="33" pos:column="19">.</op:operator><name pos:line="33" pos:column="20">Equal</name></name><argument_list pos:line="33" pos:column="25">(<argument><expr><name pos:line="33" pos:column="26">expectedParameters</name></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="46">arguments</name><op:operator pos:line="33" pos:column="55">.</op:operator><name pos:line="33" pos:column="56">Parameters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="34" pos:column="13">Assert</name><op:operator pos:line="34" pos:column="19">.</op:operator><name pos:line="34" pos:column="20">True</name></name><argument_list pos:line="34" pos:column="24">(<argument><expr><name><name pos:line="34" pos:column="25">arguments</name><op:operator pos:line="34" pos:column="34">.</op:operator><name pos:line="34" pos:column="35">IsAsync</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="35" pos:column="13">Assert</name><op:operator pos:line="35" pos:column="19">.</op:operator><name pos:line="35" pos:column="20">Equal</name></name><argument_list pos:line="35" pos:column="25">(<argument><expr><name pos:line="35" pos:column="26">expectedCallback</name></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="44">arguments</name><op:operator pos:line="35" pos:column="53">.</op:operator><name pos:line="35" pos:column="54">Callback</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="36" pos:column="13">Assert</name><op:operator pos:line="36" pos:column="19">.</op:operator><name pos:line="36" pos:column="20">Equal</name></name><argument_list pos:line="36" pos:column="25">(<argument><expr><name pos:line="36" pos:column="26">expectedState</name></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="41">arguments</name><op:operator pos:line="36" pos:column="50">.</op:operator><name pos:line="36" pos:column="51">State</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function> 
    }</block></class>
}</block></namespace></unit>
