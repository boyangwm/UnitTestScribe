<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Core\Extensibility\AlternateMethod.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Reflection</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Glimpse</name><op:operator pos:line="3" pos:column="14">.</op:operator><name pos:line="3" pos:column="15">Core</name><op:operator pos:line="3" pos:column="19">.</op:operator><name pos:line="3" pos:column="20">Extensions</name></name>;</using>

<namespace pos:line="5" pos:column="1">namespace <name><name pos:line="5" pos:column="11">Glimpse</name><op:operator pos:line="5" pos:column="18">.</op:operator><name pos:line="5" pos:column="19">Core</name><op:operator pos:line="5" pos:column="23">.</op:operator><name pos:line="5" pos:column="24">Extensibility</name></name>
<block pos:line="6" pos:column="1">{
    <comment type="line" pos:line="7" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="8" pos:column="5">/// An abstract &lt;see cref="IAlternateMethod"/&gt; implementation which handles checking Glimpse policies and timing original implementations.</comment>
    <comment type="line" pos:line="9" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="10" pos:column="5">public</specifier> <specifier pos:line="10" pos:column="12">abstract</specifier> class <name pos:line="10" pos:column="27">AlternateMethod</name> <super pos:line="10" pos:column="43">: <name pos:line="10" pos:column="45">IAlternateMethod</name></super>
    <block pos:line="11" pos:column="5">{
        <comment type="line" pos:line="12" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="13" pos:column="9">/// Initializes a new instance of the &lt;see cref="AlternateMethod" /&gt; class.</comment>
        <comment type="line" pos:line="14" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="15" pos:column="9">/// &lt;param name="type"&gt;The type.&lt;/param&gt;</comment>
        <comment type="line" pos:line="16" pos:column="9">/// &lt;param name="methodName"&gt;Name of the method.&lt;/param&gt;</comment>
        <constructor><specifier pos:line="17" pos:column="9">protected</specifier> <name pos:line="17" pos:column="19">AlternateMethod</name><parameter_list pos:line="17" pos:column="34">(<param><decl><type><name pos:line="17" pos:column="35">Type</name></type> <name pos:line="17" pos:column="40">type</name></decl></param>, <param><decl><type><name pos:line="17" pos:column="46">string</name></type> <name pos:line="17" pos:column="53">methodName</name></decl></param>)</parameter_list> <member_list pos:line="17" pos:column="65">: <call><name pos:line="17" pos:column="67">this</name><argument_list pos:line="17" pos:column="71">(<argument><expr><call><name><name pos:line="17" pos:column="72">type</name><op:operator pos:line="17" pos:column="76">.</op:operator><name pos:line="17" pos:column="77">GetMethod</name></name><argument_list pos:line="17" pos:column="86">(<argument><expr><name pos:line="17" pos:column="87">methodName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
        </member_list><block pos:line="18" pos:column="9">{
        }</block></constructor>

        <comment type="line" pos:line="21" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="22" pos:column="9">/// Initializes a new instance of the &lt;see cref="AlternateMethod" /&gt; class.</comment>
        <comment type="line" pos:line="23" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="24" pos:column="9">/// &lt;param name="type"&gt;The type.&lt;/param&gt;</comment>
        <comment type="line" pos:line="25" pos:column="9">/// &lt;param name="methodName"&gt;Name of the method.&lt;/param&gt;</comment>
        <comment type="line" pos:line="26" pos:column="9">/// &lt;param name="bindingFlags"&gt;The binding flags.&lt;/param&gt;</comment>
        <constructor><specifier pos:line="27" pos:column="9">protected</specifier> <name pos:line="27" pos:column="19">AlternateMethod</name><parameter_list pos:line="27" pos:column="34">(<param><decl><type><name pos:line="27" pos:column="35">Type</name></type> <name pos:line="27" pos:column="40">type</name></decl></param>, <param><decl><type><name pos:line="27" pos:column="46">string</name></type> <name pos:line="27" pos:column="53">methodName</name></decl></param>, <param><decl><type><name pos:line="27" pos:column="65">BindingFlags</name></type> <name pos:line="27" pos:column="78">bindingFlags</name></decl></param>)</parameter_list> <member_list pos:line="27" pos:column="92">: <call><name pos:line="27" pos:column="94">this</name><argument_list pos:line="27" pos:column="98">(<argument><expr><call><name><name pos:line="27" pos:column="99">type</name><op:operator pos:line="27" pos:column="103">.</op:operator><name pos:line="27" pos:column="104">GetMethod</name></name><argument_list pos:line="27" pos:column="113">(<argument><expr><name pos:line="27" pos:column="114">methodName</name></expr></argument>, <argument><expr><name pos:line="27" pos:column="126">bindingFlags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
        </member_list><block pos:line="28" pos:column="9">{
        }</block></constructor>

        <comment type="line" pos:line="31" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="32" pos:column="9">/// Initializes a new instance of the &lt;see cref="AlternateMethod" /&gt; class.</comment>
        <comment type="line" pos:line="33" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="34" pos:column="9">/// &lt;param name="methodToImplement"&gt;The method to implement.&lt;/param&gt;</comment>
        <comment type="line" pos:line="35" pos:column="9">/// &lt;exception cref="System.ArgumentNullException"&gt;Throws an exception if &lt;paramref name="methodToImplement"/&gt; is &lt;c&gt;null&lt;/c&gt;.&lt;/exception&gt;</comment>
        <constructor><specifier pos:line="36" pos:column="9">protected</specifier> <name pos:line="36" pos:column="19">AlternateMethod</name><parameter_list pos:line="36" pos:column="34">(<param><decl><type><name pos:line="36" pos:column="35">MethodInfo</name></type> <name pos:line="36" pos:column="46">methodToImplement</name></decl></param>)</parameter_list>
        <block pos:line="37" pos:column="9">{
            <if pos:line="38" pos:column="13">if <condition pos:line="38" pos:column="16">(<expr><name pos:line="38" pos:column="17">methodToImplement</name> <op:operator pos:line="38" pos:column="35">==</op:operator> <name pos:line="38" pos:column="38">null</name></expr>)</condition><then pos:line="38" pos:column="43">
            <block pos:line="39" pos:column="13">{
                <throw pos:line="40" pos:column="17">throw <expr><op:operator pos:line="40" pos:column="23">new</op:operator> <call><name pos:line="40" pos:column="27">ArgumentNullException</name><argument_list pos:line="40" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="40" pos:column="49">"methodToImplement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <expr_stmt><expr><name pos:line="43" pos:column="13">MethodToImplement</name> <op:operator pos:line="43" pos:column="31">=</op:operator> <name pos:line="43" pos:column="33">methodToImplement</name></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="46" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="47" pos:column="9">/// Gets the method to implement.</comment>
        <comment type="line" pos:line="48" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="49" pos:column="9">/// &lt;value&gt;</comment>
        <comment type="line" pos:line="50" pos:column="9">/// The method to implement.</comment>
        <comment type="line" pos:line="51" pos:column="9">/// &lt;/value&gt;</comment>
        <comment type="line" pos:line="52" pos:column="9">/// &lt;remarks&gt;</comment>
        <comment type="line" pos:line="53" pos:column="9">/// The info of the method that this alternate is for.</comment>
        <comment type="line" pos:line="54" pos:column="9">/// &lt;/remarks&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="55" pos:column="9">public</specifier> <name pos:line="55" pos:column="16">MethodInfo</name></type> <name pos:line="55" pos:column="27">MethodToImplement</name> <block pos:line="55" pos:column="45">{ <function_decl><name pos:line="55" pos:column="47">get</name>;</function_decl> <function_decl><specifier pos:line="55" pos:column="52">private</specifier> <name pos:line="55" pos:column="60">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="57" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="58" pos:column="9">/// New implementation that is called in-place of the the original method.</comment>
        <comment type="line" pos:line="59" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="60" pos:column="9">/// &lt;param name="context"&gt;The context.&lt;/param&gt;</comment>
        <comment type="line" pos:line="61" pos:column="9">/// &lt;remarks&gt;</comment>
        <comment type="line" pos:line="62" pos:column="9">/// It is up to this method to call the underlying target method.</comment>
        <comment type="line" pos:line="63" pos:column="9">/// &lt;/remarks&gt;</comment>
        <function><type><specifier pos:line="64" pos:column="9">public</specifier> <name pos:line="64" pos:column="16">void</name></type> <name pos:line="64" pos:column="21">NewImplementation</name><parameter_list pos:line="64" pos:column="38">(<param><decl><type><name pos:line="64" pos:column="39">IAlternateMethodContext</name></type> <name pos:line="64" pos:column="63">context</name></decl></param>)</parameter_list>
        <block pos:line="65" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="66" pos:column="13">TimerResult</name></type> <name pos:line="66" pos:column="25">timerResult</name></decl>;</decl_stmt>
            <if pos:line="67" pos:column="13">if <condition pos:line="67" pos:column="16">(<expr><op:operator pos:line="67" pos:column="17">!</op:operator><call><name><name pos:line="67" pos:column="18">context</name><op:operator pos:line="67" pos:column="25">.</op:operator><name pos:line="67" pos:column="26">TryProceedWithTimer</name></name><argument_list pos:line="67" pos:column="45">(<argument><expr pos:line="67" pos:column="46">out <name pos:line="67" pos:column="50">timerResult</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="67" pos:column="63">
            <block pos:line="68" pos:column="13">{
                <return pos:line="69" pos:column="17">return;</return>
            }</block></then></if>

            <expr_stmt><expr><call><name pos:line="72" pos:column="13">PostImplementation</name><argument_list pos:line="72" pos:column="31">(<argument><expr><name pos:line="72" pos:column="32">context</name></expr></argument>, <argument><expr><name pos:line="72" pos:column="41">timerResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="75" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="76" pos:column="9">/// Additional code to be executed after the original implementation has been run.</comment>
        <comment type="line" pos:line="77" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="78" pos:column="9">/// &lt;param name="context"&gt;The context.&lt;/param&gt;</comment>
        <comment type="line" pos:line="79" pos:column="9">/// &lt;param name="timerResult"&gt;The timer result.&lt;/param&gt;</comment>
        <function_decl><type><specifier pos:line="80" pos:column="9">public</specifier> <specifier pos:line="80" pos:column="16">abstract</specifier> <name pos:line="80" pos:column="25">void</name></type> <name pos:line="80" pos:column="30">PostImplementation</name><parameter_list pos:line="80" pos:column="48">(<param><decl><type><name pos:line="80" pos:column="49">IAlternateMethodContext</name></type> <name pos:line="80" pos:column="73">context</name></decl></param>, <param><decl><type><name pos:line="80" pos:column="82">TimerResult</name></type> <name pos:line="80" pos:column="94">timerResult</name></decl></param>)</parameter_list>;</function_decl>
    }</block></class>
}</block></namespace></unit>
