<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Core\CastleShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Diagnostics</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">CodeAnalysis</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Castle</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">DynamicProxy</name></name>;</using>
<using pos:line="5" pos:column="1">using <name pos:line="5" pos:column="7">Xunit</name>;</using>

<namespace pos:line="7" pos:column="1">namespace <name><name pos:line="7" pos:column="11">Glimpse</name><op:operator pos:line="7" pos:column="18">.</op:operator><name pos:line="7" pos:column="19">Test</name><op:operator pos:line="7" pos:column="23">.</op:operator><name pos:line="7" pos:column="24">Core</name></name>
<block pos:line="8" pos:column="1">{
    <class type="interface"><specifier pos:line="9" pos:column="5">public</specifier> interface <name pos:line="9" pos:column="22">ISpecialDisposable</name> <super pos:line="9" pos:column="41">: <name pos:line="9" pos:column="43">IDisposable</name></super>
    <block pos:line="10" pos:column="5">{
        <function_decl><type><name pos:line="11" pos:column="9">string</name></type> <name pos:line="11" pos:column="16">GetReasonToDispose</name><parameter_list pos:line="11" pos:column="34">()</parameter_list>;</function_decl>
    }</block></class>

    <class><specifier pos:line="14" pos:column="5">public</specifier> class <name pos:line="14" pos:column="18">SimpleSpecialDisposable</name> <super pos:line="14" pos:column="42">: <name pos:line="14" pos:column="44">ISpecialDisposable</name></super>
    <block pos:line="15" pos:column="5">{
        <function><type><specifier pos:line="16" pos:column="9">public</specifier> <name pos:line="16" pos:column="16">void</name></type> <name pos:line="16" pos:column="21">Dispose</name><parameter_list pos:line="16" pos:column="28">()</parameter_list>
        <block pos:line="17" pos:column="9">{
        }</block></function>

        <function><type><specifier pos:line="20" pos:column="9">public</specifier> <name pos:line="20" pos:column="16">string</name></type> <name pos:line="20" pos:column="23">GetReasonToDispose</name><parameter_list pos:line="20" pos:column="41">()</parameter_list>
        <block pos:line="21" pos:column="9">{
            <return pos:line="22" pos:column="13">return <expr><lit:literal type="string" pos:line="22" pos:column="20">"I'm open"</lit:literal></expr>;</return>
        }</block></function>
    }</block></class>

    <class><attribute pos:line="26" pos:column="5">[<expr><call><name pos:line="26" pos:column="6">SuppressMessage</name><argument_list pos:line="26" pos:column="21">(<argument><expr><lit:literal type="string" pos:line="26" pos:column="22">"StyleCop.CSharp.MaintainabilityRules"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="26" pos:column="62">"SA1402:FileMayOnlyContainASingleClass"</lit:literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="103">Justification</name> <op:operator pos:line="26" pos:column="117">=</op:operator> <lit:literal type="string" pos:line="26" pos:column="119">"This class is only used to setup inheritance chains only used in these tests."</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    <specifier pos:line="27" pos:column="5">public</specifier> class <name pos:line="27" pos:column="18">CrazyConstructorSpecialDisposable</name> <super pos:line="27" pos:column="52">: <name pos:line="27" pos:column="54">ISpecialDisposable</name></super>
    <block pos:line="28" pos:column="5">{
        <constructor><specifier pos:line="29" pos:column="9">public</specifier> <name pos:line="29" pos:column="16">CrazyConstructorSpecialDisposable</name><parameter_list pos:line="29" pos:column="49">(<param><decl><type><name pos:line="29" pos:column="50">string</name></type> <name pos:line="29" pos:column="57">a</name></decl></param>, <param><decl><type><name pos:line="29" pos:column="60">string</name></type> <name pos:line="29" pos:column="67">b</name></decl></param>)</parameter_list>
        <block pos:line="30" pos:column="9">{
            <expr_stmt><expr><name pos:line="31" pos:column="13">A</name> <op:operator pos:line="31" pos:column="15">=</op:operator> <name pos:line="31" pos:column="17">a</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="32" pos:column="13">B</name> <op:operator pos:line="32" pos:column="15">=</op:operator> <name pos:line="32" pos:column="17">b</name></expr>;</expr_stmt>
        }</block></constructor>

        <decl_stmt><decl><type><specifier pos:line="35" pos:column="9">public</specifier> <name pos:line="35" pos:column="16">string</name></type> <name pos:line="35" pos:column="23">B</name> <block pos:line="35" pos:column="25">{ <function_decl><name pos:line="35" pos:column="27">get</name>;</function_decl> <function_decl><name pos:line="35" pos:column="32">set</name>;</function_decl> }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="37" pos:column="9">public</specifier> <name pos:line="37" pos:column="16">string</name></type> <name pos:line="37" pos:column="23">A</name> <block pos:line="37" pos:column="25">{ <function_decl><name pos:line="37" pos:column="27">get</name>;</function_decl> <function_decl><name pos:line="37" pos:column="32">set</name>;</function_decl> }</block></decl></decl_stmt>

        <function><type><specifier pos:line="39" pos:column="9">public</specifier> <name pos:line="39" pos:column="16">void</name></type> <name pos:line="39" pos:column="21">Dispose</name><parameter_list pos:line="39" pos:column="28">()</parameter_list>
        <block pos:line="40" pos:column="9">{
        }</block></function>

        <function><type><specifier pos:line="43" pos:column="9">public</specifier> <name pos:line="43" pos:column="16">string</name></type> <name pos:line="43" pos:column="23">GetReasonToDispose</name><parameter_list pos:line="43" pos:column="41">()</parameter_list>
        <block pos:line="44" pos:column="9">{
            <return pos:line="45" pos:column="13">return <expr><lit:literal type="string" pos:line="45" pos:column="20">"I'm open"</lit:literal></expr>;</return>
        }</block></function>
    }</block></class>

    <class><specifier pos:line="49" pos:column="5">public</specifier> class <name pos:line="49" pos:column="18">ReallyCrazyConstructorSpecialDisposable</name> <super pos:line="49" pos:column="58">: <name pos:line="49" pos:column="60">CrazyConstructorSpecialDisposable</name></super>
    <block pos:line="50" pos:column="5">{
        <constructor><specifier pos:line="51" pos:column="9">public</specifier> <name pos:line="51" pos:column="16">ReallyCrazyConstructorSpecialDisposable</name><parameter_list pos:line="51" pos:column="55">(<param><decl><type><name pos:line="51" pos:column="56">string</name></type> <name pos:line="51" pos:column="63">a</name></decl></param>)</parameter_list> <member_list pos:line="51" pos:column="66">: <call><name pos:line="51" pos:column="68">base</name><argument_list pos:line="51" pos:column="72">(<argument><expr><name pos:line="51" pos:column="73">a</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="51" pos:column="76">"derived-b"</lit:literal></expr></argument>)</argument_list></call>
        </member_list><block pos:line="52" pos:column="9">{
        }</block></constructor>
    }</block></class>

    <class><specifier pos:line="56" pos:column="5">public</specifier> <specifier pos:line="56" pos:column="12">sealed</specifier> class <name pos:line="56" pos:column="25">SealedSpecialDisposable</name> <super pos:line="56" pos:column="49">: <name pos:line="56" pos:column="51">ISpecialDisposable</name></super>
    <block pos:line="57" pos:column="5">{
        <function><type><specifier pos:line="58" pos:column="9">public</specifier> <name pos:line="58" pos:column="16">void</name></type> <name pos:line="58" pos:column="21">Dispose</name><parameter_list pos:line="58" pos:column="28">()</parameter_list>
        <block pos:line="59" pos:column="9">{
        }</block></function>

        <function><type><specifier pos:line="62" pos:column="9">public</specifier> <name pos:line="62" pos:column="16">string</name></type> <name pos:line="62" pos:column="23">GetReasonToDispose</name><parameter_list pos:line="62" pos:column="41">()</parameter_list>
        <block pos:line="63" pos:column="9">{
            <return pos:line="64" pos:column="13">return <expr><lit:literal type="string" pos:line="64" pos:column="20">"I'm sealed"</lit:literal></expr>;</return>
        }</block></function>
    }</block></class>

    <comment type="line" pos:line="68" pos:column="5">// These tests are more of a sanity check/documentation of Castle than acctual tests.</comment>
    <class><specifier pos:line="69" pos:column="5">public</specifier> class <name pos:line="69" pos:column="18">CastleShould</name>
    <block pos:line="70" pos:column="5">{
        <function><type><attribute pos:line="71" pos:column="9">[<expr><name pos:line="71" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="72" pos:column="9">public</specifier> <name pos:line="72" pos:column="16">void</name></type> <name pos:line="72" pos:column="21">CastleTestInterfaces</name><parameter_list pos:line="72" pos:column="41">()</parameter_list>
        <block pos:line="73" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="74" pos:column="13">var</name></type> <name pos:line="74" pos:column="17">proxyGenerator</name> <init pos:line="74" pos:column="32">= <expr><op:operator pos:line="74" pos:column="34">new</op:operator> <call><name pos:line="74" pos:column="38">ProxyGenerator</name><argument_list pos:line="74" pos:column="52">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="76" pos:column="13">var</name></type> <name pos:line="76" pos:column="17">originalObj</name> <init pos:line="76" pos:column="29">= <expr><op:operator pos:line="76" pos:column="31">new</op:operator> <call><name pos:line="76" pos:column="35">SimpleSpecialDisposable</name><argument_list pos:line="76" pos:column="58">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="78" pos:column="13">var</name></type> <name pos:line="78" pos:column="17">newObj</name> <init pos:line="78" pos:column="24">= <expr><call><name><name pos:line="78" pos:column="26">proxyGenerator</name><op:operator pos:line="78" pos:column="40">.</op:operator><name pos:line="78" pos:column="41">CreateInterfaceProxyWithTarget</name></name><argument_list pos:line="78" pos:column="71">(<argument><expr><call><name pos:line="78" pos:column="72">typeof</name><argument_list pos:line="78" pos:column="78">(<argument><expr><name pos:line="78" pos:column="79">IDisposable</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="78" pos:column="93">originalObj</name></expr></argument>, <argument><expr><call><name><name pos:line="78" pos:column="106">Enumerable</name><op:operator pos:line="78" pos:column="116">.</op:operator><name><name pos:line="78" pos:column="117">Empty</name><argument_list pos:line="78" pos:column="122">&lt;<argument><name pos:line="78" pos:column="123">IInterceptor</name></argument>&gt;</argument_list></name></name><argument_list pos:line="78" pos:column="136">()</argument_list></call><op:operator pos:line="78" pos:column="138">.</op:operator><call><name pos:line="78" pos:column="139">ToArray</name><argument_list pos:line="78" pos:column="146">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="80" pos:column="13">Assert</name><op:operator pos:line="80" pos:column="19">.</op:operator><name><name pos:line="80" pos:column="20">IsAssignableFrom</name><argument_list pos:line="80" pos:column="36">&lt;<argument><name pos:line="80" pos:column="37">IDisposable</name></argument>&gt;</argument_list></name></name><argument_list pos:line="80" pos:column="49">(<argument><expr><name pos:line="80" pos:column="50">newObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="81" pos:column="13">Assert</name><op:operator pos:line="81" pos:column="19">.</op:operator><name><name pos:line="81" pos:column="20">Throws</name><argument_list pos:line="81" pos:column="26">&lt;<argument><name pos:line="81" pos:column="27">InvalidCastException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="81" pos:column="48">(<argument><expr><lambda><parameter_list pos:line="81" pos:column="49">()</parameter_list> <op:operator pos:line="81" pos:column="52">=&gt;</op:operator> <op:operator pos:line="81" pos:column="55">(</op:operator><name pos:line="81" pos:column="56">ISpecialDisposable</name><op:operator pos:line="81" pos:column="74">)</op:operator><name pos:line="81" pos:column="75">newObj</name></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="82" pos:column="13">Assert</name><op:operator pos:line="82" pos:column="19">.</op:operator><name><name pos:line="82" pos:column="20">Throws</name><argument_list pos:line="82" pos:column="26">&lt;<argument><name pos:line="82" pos:column="27">InvalidCastException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="82" pos:column="48">(<argument><expr><lambda><parameter_list pos:line="82" pos:column="49">()</parameter_list> <op:operator pos:line="82" pos:column="52">=&gt;</op:operator> <op:operator pos:line="82" pos:column="55">(</op:operator><name pos:line="82" pos:column="56">SimpleSpecialDisposable</name><op:operator pos:line="82" pos:column="79">)</op:operator><name pos:line="82" pos:column="80">newObj</name></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        
        <function><type><attribute pos:line="85" pos:column="9">[<expr><name pos:line="85" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="86" pos:column="9">public</specifier> <name pos:line="86" pos:column="16">void</name></type> <name pos:line="86" pos:column="21">CastleTestClass1</name><parameter_list pos:line="86" pos:column="37">()</parameter_list>
        <block pos:line="87" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="88" pos:column="13">var</name></type> <name pos:line="88" pos:column="17">proxyGenerator</name> <init pos:line="88" pos:column="32">= <expr><op:operator pos:line="88" pos:column="34">new</op:operator> <call><name pos:line="88" pos:column="38">ProxyGenerator</name><argument_list pos:line="88" pos:column="52">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="90" pos:column="13">var</name></type> <name pos:line="90" pos:column="17">originalObj</name> <init pos:line="90" pos:column="29">= <expr><op:operator pos:line="90" pos:column="31">new</op:operator> <call><name pos:line="90" pos:column="35">SimpleSpecialDisposable</name><argument_list pos:line="90" pos:column="58">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="92" pos:column="13">var</name></type> <name pos:line="92" pos:column="17">newObj</name> <init pos:line="92" pos:column="24">= <expr><call><name><name pos:line="92" pos:column="26">proxyGenerator</name><op:operator pos:line="92" pos:column="40">.</op:operator><name pos:line="92" pos:column="41">CreateClassProxyWithTarget</name></name><argument_list pos:line="92" pos:column="67">(<argument><expr><name pos:line="92" pos:column="68">originalObj</name></expr></argument>, <argument><expr><call><name><name pos:line="92" pos:column="81">Enumerable</name><op:operator pos:line="92" pos:column="91">.</op:operator><name><name pos:line="92" pos:column="92">Empty</name><argument_list pos:line="92" pos:column="97">&lt;<argument><name pos:line="92" pos:column="98">IInterceptor</name></argument>&gt;</argument_list></name></name><argument_list pos:line="92" pos:column="111">()</argument_list></call><op:operator pos:line="92" pos:column="113">.</op:operator><call><name pos:line="92" pos:column="114">ToArray</name><argument_list pos:line="92" pos:column="121">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="94" pos:column="13">Assert</name><op:operator pos:line="94" pos:column="19">.</op:operator><name><name pos:line="94" pos:column="20">IsAssignableFrom</name><argument_list pos:line="94" pos:column="36">&lt;<argument><name pos:line="94" pos:column="37">IDisposable</name></argument>&gt;</argument_list></name></name><argument_list pos:line="94" pos:column="49">(<argument><expr><name pos:line="94" pos:column="50">newObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="95" pos:column="13">Assert</name><op:operator pos:line="95" pos:column="19">.</op:operator><name><name pos:line="95" pos:column="20">IsAssignableFrom</name><argument_list pos:line="95" pos:column="36">&lt;<argument><name pos:line="95" pos:column="37">ISpecialDisposable</name></argument>&gt;</argument_list></name></name><argument_list pos:line="95" pos:column="56">(<argument><expr><name pos:line="95" pos:column="57">newObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="96" pos:column="13">Assert</name><op:operator pos:line="96" pos:column="19">.</op:operator><name><name pos:line="96" pos:column="20">IsAssignableFrom</name><argument_list pos:line="96" pos:column="36">&lt;<argument><name pos:line="96" pos:column="37">SimpleSpecialDisposable</name></argument>&gt;</argument_list></name></name><argument_list pos:line="96" pos:column="61">(<argument><expr><name pos:line="96" pos:column="62">newObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="99" pos:column="9">[<expr><name pos:line="99" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="100" pos:column="9">public</specifier> <name pos:line="100" pos:column="16">void</name></type> <name pos:line="100" pos:column="21">CastleTestSealedClass</name><parameter_list pos:line="100" pos:column="42">()</parameter_list>
        <block pos:line="101" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="102" pos:column="13">var</name></type> <name pos:line="102" pos:column="17">proxyGenerator</name> <init pos:line="102" pos:column="32">= <expr><op:operator pos:line="102" pos:column="34">new</op:operator> <call><name pos:line="102" pos:column="38">ProxyGenerator</name><argument_list pos:line="102" pos:column="52">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="104" pos:column="13">var</name></type> <name pos:line="104" pos:column="17">originalObj</name> <init pos:line="104" pos:column="29">= <expr><op:operator pos:line="104" pos:column="31">new</op:operator> <call><name pos:line="104" pos:column="35">SealedSpecialDisposable</name><argument_list pos:line="104" pos:column="58">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="106" pos:column="13">Assert</name><op:operator pos:line="106" pos:column="19">.</op:operator><name><name pos:line="106" pos:column="20">Throws</name><argument_list pos:line="106" pos:column="26">&lt;<argument><name pos:line="106" pos:column="27">TypeLoadException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="106" pos:column="45">(<argument><expr><lambda><parameter_list pos:line="106" pos:column="46">()</parameter_list> <op:operator pos:line="106" pos:column="49">=&gt;</op:operator> <call><name><name pos:line="106" pos:column="52">proxyGenerator</name><op:operator pos:line="106" pos:column="66">.</op:operator><name pos:line="106" pos:column="67">CreateClassProxyWithTarget</name></name><argument_list pos:line="106" pos:column="93">(<argument><expr><name pos:line="106" pos:column="94">originalObj</name></expr></argument>, <argument><expr><call><name><name pos:line="106" pos:column="107">Enumerable</name><op:operator pos:line="106" pos:column="117">.</op:operator><name><name pos:line="106" pos:column="118">Empty</name><argument_list pos:line="106" pos:column="123">&lt;<argument><name pos:line="106" pos:column="124">IInterceptor</name></argument>&gt;</argument_list></name></name><argument_list pos:line="106" pos:column="137">()</argument_list></call><op:operator pos:line="106" pos:column="139">.</op:operator><call><name pos:line="106" pos:column="140">ToArray</name><argument_list pos:line="106" pos:column="147">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="109" pos:column="9">[<expr><name pos:line="109" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="110" pos:column="9">public</specifier> <name pos:line="110" pos:column="16">void</name></type> <name pos:line="110" pos:column="21">CastleTestConstructorClass</name><parameter_list pos:line="110" pos:column="47">()</parameter_list>
        <block pos:line="111" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="112" pos:column="13">var</name></type> <name pos:line="112" pos:column="17">proxyGenerator</name> <init pos:line="112" pos:column="32">= <expr><op:operator pos:line="112" pos:column="34">new</op:operator> <call><name pos:line="112" pos:column="38">ProxyGenerator</name><argument_list pos:line="112" pos:column="52">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="114" pos:column="13">var</name></type> <name pos:line="114" pos:column="17">originalObj</name> <init pos:line="114" pos:column="29">= <expr><op:operator pos:line="114" pos:column="31">new</op:operator> <call><name pos:line="114" pos:column="35">CrazyConstructorSpecialDisposable</name><argument_list pos:line="114" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="114" pos:column="69">"test"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="114" pos:column="77">"test2"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="116" pos:column="13">var</name></type> <name pos:line="116" pos:column="17">newObj</name> <init pos:line="116" pos:column="24">= <expr><op:operator pos:line="116" pos:column="26">(</op:operator><name pos:line="116" pos:column="27">CrazyConstructorSpecialDisposable</name><op:operator pos:line="116" pos:column="60">)</op:operator><call><name><name pos:line="116" pos:column="61">proxyGenerator</name><op:operator pos:line="116" pos:column="75">.</op:operator><name pos:line="116" pos:column="76">CreateClassProxyWithTarget</name></name><argument_list pos:line="116" pos:column="102">(<argument><expr><call><name><name pos:line="116" pos:column="103">originalObj</name><op:operator pos:line="116" pos:column="114">.</op:operator><name pos:line="116" pos:column="115">GetType</name></name><argument_list pos:line="116" pos:column="122">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="116" pos:column="126">originalObj</name></expr></argument>, <argument><expr><op:operator pos:line="116" pos:column="139">new</op:operator> <name><name pos:line="116" pos:column="143">object</name><index pos:line="116" pos:column="149">[]</index></name> <block pos:line="116" pos:column="152">{ <expr><lit:literal type="string" pos:line="116" pos:column="154">"a"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="116" pos:column="159">"b"</lit:literal></expr> }</block></expr></argument>, <argument><expr><call><name><name pos:line="116" pos:column="166">Enumerable</name><op:operator pos:line="116" pos:column="176">.</op:operator><name><name pos:line="116" pos:column="177">Empty</name><argument_list pos:line="116" pos:column="182">&lt;<argument><name pos:line="116" pos:column="183">IInterceptor</name></argument>&gt;</argument_list></name></name><argument_list pos:line="116" pos:column="196">()</argument_list></call><op:operator pos:line="116" pos:column="198">.</op:operator><call><name pos:line="116" pos:column="199">ToArray</name><argument_list pos:line="116" pos:column="206">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="118" pos:column="13">Assert</name><op:operator pos:line="118" pos:column="19">.</op:operator><name><name pos:line="118" pos:column="20">IsAssignableFrom</name><argument_list pos:line="118" pos:column="36">&lt;<argument><name pos:line="118" pos:column="37">IDisposable</name></argument>&gt;</argument_list></name></name><argument_list pos:line="118" pos:column="49">(<argument><expr><name pos:line="118" pos:column="50">newObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="119" pos:column="13">Assert</name><op:operator pos:line="119" pos:column="19">.</op:operator><name><name pos:line="119" pos:column="20">IsAssignableFrom</name><argument_list pos:line="119" pos:column="36">&lt;<argument><name pos:line="119" pos:column="37">ISpecialDisposable</name></argument>&gt;</argument_list></name></name><argument_list pos:line="119" pos:column="56">(<argument><expr><name pos:line="119" pos:column="57">newObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="120" pos:column="13">Assert</name><op:operator pos:line="120" pos:column="19">.</op:operator><name><name pos:line="120" pos:column="20">IsAssignableFrom</name><argument_list pos:line="120" pos:column="36">&lt;<argument><name pos:line="120" pos:column="37">CrazyConstructorSpecialDisposable</name></argument>&gt;</argument_list></name></name><argument_list pos:line="120" pos:column="71">(<argument><expr><name pos:line="120" pos:column="72">newObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="121" pos:column="13">Assert</name><op:operator pos:line="121" pos:column="19">.</op:operator><name pos:line="121" pos:column="20">Equal</name></name><argument_list pos:line="121" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="121" pos:column="26">"a"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="121" pos:column="31">newObj</name><op:operator pos:line="121" pos:column="37">.</op:operator><name pos:line="121" pos:column="38">A</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="122" pos:column="13">Assert</name><op:operator pos:line="122" pos:column="19">.</op:operator><name pos:line="122" pos:column="20">Equal</name></name><argument_list pos:line="122" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="122" pos:column="26">"b"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="122" pos:column="31">newObj</name><op:operator pos:line="122" pos:column="37">.</op:operator><name pos:line="122" pos:column="38">B</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="125" pos:column="9">[<expr><name pos:line="125" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="126" pos:column="9">public</specifier> <name pos:line="126" pos:column="16">void</name></type> <name pos:line="126" pos:column="21">CastleTestReallyCrazyConstructorClass</name><parameter_list pos:line="126" pos:column="58">()</parameter_list>
        <block pos:line="127" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="128" pos:column="13">var</name></type> <name pos:line="128" pos:column="17">proxyGenerator</name> <init pos:line="128" pos:column="32">= <expr><op:operator pos:line="128" pos:column="34">new</op:operator> <call><name pos:line="128" pos:column="38">ProxyGenerator</name><argument_list pos:line="128" pos:column="52">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="130" pos:column="13">var</name></type> <name pos:line="130" pos:column="17">originalObj</name> <init pos:line="130" pos:column="29">= <expr><op:operator pos:line="130" pos:column="31">new</op:operator> <call><name pos:line="130" pos:column="35">ReallyCrazyConstructorSpecialDisposable</name><argument_list pos:line="130" pos:column="74">(<argument><expr><lit:literal type="string" pos:line="130" pos:column="75">"3"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="132" pos:column="13">Assert</name><op:operator pos:line="132" pos:column="19">.</op:operator><name><name pos:line="132" pos:column="20">Throws</name><argument_list pos:line="132" pos:column="26">&lt;<argument><name pos:line="132" pos:column="27">InvalidProxyConstructorArgumentsException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="132" pos:column="69">(
                <argument><expr><lambda><parameter_list pos:line="133" pos:column="17">()</parameter_list> <op:operator pos:line="133" pos:column="20">=&gt;</op:operator> <call><name><name pos:line="133" pos:column="23">proxyGenerator</name><op:operator pos:line="133" pos:column="37">.</op:operator><name pos:line="133" pos:column="38">CreateClassProxyWithTarget</name></name><argument_list pos:line="133" pos:column="64">(<argument><expr><call><name><name pos:line="133" pos:column="65">originalObj</name><op:operator pos:line="133" pos:column="76">.</op:operator><name pos:line="133" pos:column="77">GetType</name></name><argument_list pos:line="133" pos:column="84">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="133" pos:column="88">originalObj</name></expr></argument>, <argument><expr><op:operator pos:line="133" pos:column="101">new</op:operator> <name><name pos:line="133" pos:column="105">object</name><index pos:line="133" pos:column="111">[]</index></name> <block pos:line="133" pos:column="114">{ <expr><lit:literal type="string" pos:line="133" pos:column="116">"a"</lit:literal></expr><op:operator pos:line="133" pos:column="119">,</op:operator> <expr><lit:literal type="string" pos:line="133" pos:column="121">"b"</lit:literal></expr> }</block></expr></argument>, <argument><expr><call><name><name pos:line="133" pos:column="128">Enumerable</name><op:operator pos:line="133" pos:column="138">.</op:operator><name><name pos:line="133" pos:column="139">Empty</name><argument_list pos:line="133" pos:column="144">&lt;<argument><name pos:line="133" pos:column="145">IInterceptor</name></argument>&gt;</argument_list></name></name><argument_list pos:line="133" pos:column="158">()</argument_list></call><op:operator pos:line="133" pos:column="160">.</op:operator><call><name pos:line="133" pos:column="161">ToArray</name><argument_list pos:line="133" pos:column="168">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
