<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Core\StatusCodeResourceResultShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">Glimpse</name><op:operator pos:line="1" pos:column="14">.</op:operator><name pos:line="1" pos:column="15">Core</name><op:operator pos:line="1" pos:column="19">.</op:operator><name pos:line="1" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">Glimpse</name><op:operator pos:line="2" pos:column="14">.</op:operator><name pos:line="2" pos:column="15">Core</name><op:operator pos:line="2" pos:column="19">.</op:operator><name pos:line="2" pos:column="20">Framework</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Glimpse</name><op:operator pos:line="3" pos:column="14">.</op:operator><name pos:line="3" pos:column="15">Core</name><op:operator pos:line="3" pos:column="19">.</op:operator><name pos:line="3" pos:column="20">ResourceResult</name></name>;</using>
<using pos:line="4" pos:column="1">using <name pos:line="4" pos:column="7">Moq</name>;</using>
<using pos:line="5" pos:column="1">using <name pos:line="5" pos:column="7">Xunit</name>;</using>

<namespace pos:line="7" pos:column="1">namespace <name><name pos:line="7" pos:column="11">Glimpse</name><op:operator pos:line="7" pos:column="18">.</op:operator><name pos:line="7" pos:column="19">Test</name><op:operator pos:line="7" pos:column="23">.</op:operator><name pos:line="7" pos:column="24">Core</name></name>
<block pos:line="8" pos:column="1">{
    <class><specifier pos:line="9" pos:column="5">public</specifier> class <name pos:line="9" pos:column="18">StatusCodeResourceResultShould</name>
    <block pos:line="10" pos:column="5">{
        <function><type><attribute pos:line="11" pos:column="9">[<expr><name pos:line="11" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="12" pos:column="9">public</specifier> <name pos:line="12" pos:column="16">void</name></type> <name pos:line="12" pos:column="21">ConstructWithStatusCode</name><parameter_list pos:line="12" pos:column="44">()</parameter_list>
        <block pos:line="13" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="14" pos:column="13">var</name></type> <name pos:line="14" pos:column="17">expectedMessage</name> <init pos:line="14" pos:column="33">= <expr><lit:literal type="string" pos:line="14" pos:column="35">"any message"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="15" pos:column="13">var</name></type> <name pos:line="15" pos:column="17">result</name> <init pos:line="15" pos:column="24">= <expr><op:operator pos:line="15" pos:column="26">new</op:operator> <call><name pos:line="15" pos:column="30">StatusCodeResourceResult</name><argument_list pos:line="15" pos:column="54">(<argument><expr><lit:literal type="number" pos:line="15" pos:column="55">101</lit:literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="60">expectedMessage</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="16" pos:column="13">Assert</name><op:operator pos:line="16" pos:column="19">.</op:operator><name pos:line="16" pos:column="20">Equal</name></name><argument_list pos:line="16" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="16" pos:column="26">101</lit:literal></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="31">result</name><op:operator pos:line="16" pos:column="37">.</op:operator><name pos:line="16" pos:column="38">StatusCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="17" pos:column="13">Assert</name><op:operator pos:line="17" pos:column="19">.</op:operator><name pos:line="17" pos:column="20">Equal</name></name><argument_list pos:line="17" pos:column="25">(<argument><expr><name pos:line="17" pos:column="26">expectedMessage</name></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="43">result</name><op:operator pos:line="17" pos:column="49">.</op:operator><name pos:line="17" pos:column="50">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="20" pos:column="9">[<expr><name pos:line="20" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="21" pos:column="9">public</specifier> <name pos:line="21" pos:column="16">void</name></type> <name pos:line="21" pos:column="21">Execute</name><parameter_list pos:line="21" pos:column="28">()</parameter_list>
        <block pos:line="22" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="23" pos:column="13">var</name></type> <name pos:line="23" pos:column="17">frameworkProviderMock</name> <init pos:line="23" pos:column="39">= <expr><op:operator pos:line="23" pos:column="41">new</op:operator> <call><name><name pos:line="23" pos:column="45">Mock</name><argument_list pos:line="23" pos:column="49">&lt;<argument><name pos:line="23" pos:column="50">IFrameworkProvider</name></argument>&gt;</argument_list></name><argument_list pos:line="23" pos:column="69">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="24" pos:column="13">var</name></type> <name pos:line="24" pos:column="17">contextMock</name> <init pos:line="24" pos:column="29">= <expr><op:operator pos:line="24" pos:column="31">new</op:operator> <call><name><name pos:line="24" pos:column="35">Mock</name><argument_list pos:line="24" pos:column="39">&lt;<argument><name pos:line="24" pos:column="40">IResourceResultContext</name></argument>&gt;</argument_list></name><argument_list pos:line="24" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="25" pos:column="13">contextMock</name><op:operator pos:line="25" pos:column="24">.</op:operator><name pos:line="25" pos:column="25">Setup</name></name><argument_list pos:line="25" pos:column="30">(<argument><expr><lambda><name pos:line="25" pos:column="31">c</name> <op:operator pos:line="25" pos:column="33">=&gt;</op:operator> <name><name pos:line="25" pos:column="36">c</name><op:operator pos:line="25" pos:column="37">.</op:operator><name pos:line="25" pos:column="38">FrameworkProvider</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="25" pos:column="56">.</op:operator><call><name pos:line="25" pos:column="57">Returns</name><argument_list pos:line="25" pos:column="64">(<argument><expr><name><name pos:line="25" pos:column="65">frameworkProviderMock</name><op:operator pos:line="25" pos:column="86">.</op:operator><name pos:line="25" pos:column="87">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="27" pos:column="13">var</name></type> <name pos:line="27" pos:column="17">result</name> <init pos:line="27" pos:column="24">= <expr><op:operator pos:line="27" pos:column="26">new</op:operator> <call><name pos:line="27" pos:column="30">StatusCodeResourceResult</name><argument_list pos:line="27" pos:column="54">(<argument><expr><lit:literal type="number" pos:line="27" pos:column="55">101</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="27" pos:column="60">"Message"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="29" pos:column="13">result</name><op:operator pos:line="29" pos:column="19">.</op:operator><name pos:line="29" pos:column="20">Execute</name></name><argument_list pos:line="29" pos:column="27">(<argument><expr><name><name pos:line="29" pos:column="28">contextMock</name><op:operator pos:line="29" pos:column="39">.</op:operator><name pos:line="29" pos:column="40">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="31" pos:column="13">frameworkProviderMock</name><op:operator pos:line="31" pos:column="34">.</op:operator><name pos:line="31" pos:column="35">Verify</name></name><argument_list pos:line="31" pos:column="41">(<argument><expr><lambda><name pos:line="31" pos:column="42">fp</name><op:operator pos:line="31" pos:column="44">=&gt;</op:operator><call><name><name pos:line="31" pos:column="46">fp</name><op:operator pos:line="31" pos:column="48">.</op:operator><name pos:line="31" pos:column="49">SetHttpResponseStatusCode</name></name><argument_list pos:line="31" pos:column="74">(<argument><expr><lit:literal type="number" pos:line="31" pos:column="75">101</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="31" pos:column="81">Times</name><op:operator pos:line="31" pos:column="86">.</op:operator><name pos:line="31" pos:column="87">Once</name></name><argument_list pos:line="31" pos:column="91">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
