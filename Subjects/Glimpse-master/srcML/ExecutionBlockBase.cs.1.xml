<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Core\Framework\Support\ExecutionBlockBase.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">System</name><op:operator pos:line="1" pos:column="13">.</op:operator><name pos:line="1" pos:column="14">Collections</name><op:operator pos:line="1" pos:column="25">.</op:operator><name pos:line="1" pos:column="26">Generic</name></name>;</using> 
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">Glimpse</name><op:operator pos:line="2" pos:column="14">.</op:operator><name pos:line="2" pos:column="15">Core</name><op:operator pos:line="2" pos:column="19">.</op:operator><name pos:line="2" pos:column="20">Extensibility</name></name>;</using>

<namespace pos:line="4" pos:column="1">namespace <name><name pos:line="4" pos:column="11">Glimpse</name><op:operator pos:line="4" pos:column="18">.</op:operator><name pos:line="4" pos:column="19">Core</name><op:operator pos:line="4" pos:column="23">.</op:operator><name pos:line="4" pos:column="24">Framework</name><op:operator pos:line="4" pos:column="33">.</op:operator><name pos:line="4" pos:column="34">Support</name></name>
<block pos:line="5" pos:column="1">{
    <comment type="line" pos:line="6" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="7" pos:column="5">/// Base class which encapsulates the logic to ensure that </comment>
    <comment type="line" pos:line="8" pos:column="5">/// a given block of code is only executed once.</comment>
    <comment type="line" pos:line="9" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="10" pos:column="5">public</specifier> <specifier pos:line="10" pos:column="12">abstract</specifier> class <name pos:line="10" pos:column="27">ExecutionBlockBase</name>
    <block pos:line="11" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="12" pos:column="9">private</specifier> <specifier pos:line="12" pos:column="17">readonly</specifier> <name pos:line="12" pos:column="26">object</name></type> <name pos:line="12" pos:column="33">hasInitalizedLock</name> <init pos:line="12" pos:column="51">= <expr><op:operator pos:line="12" pos:column="53">new</op:operator> <call><name pos:line="12" pos:column="57">object</name><argument_list pos:line="12" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="13" pos:column="9">private</specifier> <name pos:line="13" pos:column="17">bool</name></type> <name pos:line="13" pos:column="22">hasInitalized</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="14" pos:column="9">private</specifier> <name pos:line="14" pos:column="17">ILogger</name></type> <name pos:line="14" pos:column="25">logger</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="15" pos:column="9">private</specifier> <specifier pos:line="15" pos:column="17">readonly</specifier> <name><name pos:line="15" pos:column="26">IList</name><argument_list pos:line="15" pos:column="31">&lt;<argument><name pos:line="15" pos:column="32">IExecutionTask</name></argument>&gt;</argument_list></name></type> <name pos:line="15" pos:column="48">tasks</name> <init pos:line="15" pos:column="54">= <expr><op:operator pos:line="15" pos:column="56">new</op:operator> <call><name><name pos:line="15" pos:column="60">List</name><argument_list pos:line="15" pos:column="64">&lt;<argument><name pos:line="15" pos:column="65">IExecutionTask</name></argument>&gt;</argument_list></name><argument_list pos:line="15" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="17" pos:column="9">protected</specifier> <name pos:line="17" pos:column="19">ILogger</name></type> <name pos:line="17" pos:column="27">Logger</name>
        <block pos:line="18" pos:column="9">{
            <function><name pos:line="19" pos:column="13">get</name>
            <block pos:line="20" pos:column="13">{
                <return pos:line="21" pos:column="17">return <expr><name><name pos:line="21" pos:column="24">this</name><op:operator pos:line="21" pos:column="28">.</op:operator><name pos:line="21" pos:column="29">logger</name></name> <op:operator pos:line="21" pos:column="36">??</op:operator> <op:operator pos:line="21" pos:column="39">(</op:operator><name><name pos:line="21" pos:column="40">this</name><op:operator pos:line="21" pos:column="44">.</op:operator><name pos:line="21" pos:column="45">logger</name></name> <op:operator pos:line="21" pos:column="52">=</op:operator> <call><name><name pos:line="21" pos:column="54">GlimpseConfiguration</name><op:operator pos:line="21" pos:column="74">.</op:operator><name pos:line="21" pos:column="75">GetLogger</name></name><argument_list pos:line="21" pos:column="84">()</argument_list></call> <op:operator pos:line="21" pos:column="87">??</op:operator> <op:operator pos:line="21" pos:column="90">new</op:operator> <call><name pos:line="21" pos:column="94">NullLogger</name><argument_list pos:line="21" pos:column="104">()</argument_list></call><op:operator pos:line="21" pos:column="106">)</op:operator></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="25" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="26" pos:column="9">/// Allows tasks to be added which will be executed when the Block</comment>
        <comment type="line" pos:line="27" pos:column="9">/// is executed.</comment>
        <comment type="line" pos:line="28" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="29" pos:column="9">/// &lt;param name="task"&gt;Task to be executed&lt;/param&gt;</comment>
        <function><type><specifier pos:line="30" pos:column="9">public</specifier> <name pos:line="30" pos:column="16">void</name></type> <name pos:line="30" pos:column="21">RegisterProvider</name><parameter_list pos:line="30" pos:column="37">(<param><decl><type><name pos:line="30" pos:column="38">IExecutionTask</name></type> <name pos:line="30" pos:column="53">task</name></decl></param>)</parameter_list>
        <block pos:line="31" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="32" pos:column="13">tasks</name><op:operator pos:line="32" pos:column="18">.</op:operator><name pos:line="32" pos:column="19">Add</name></name><argument_list pos:line="32" pos:column="22">(<argument><expr><name pos:line="32" pos:column="23">task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="35" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="36" pos:column="9">/// Execute any </comment>
        <comment type="line" pos:line="37" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="38" pos:column="9">public</specifier> <name pos:line="38" pos:column="16">void</name></type> <name pos:line="38" pos:column="21">Execute</name><parameter_list pos:line="38" pos:column="28">()</parameter_list>
        <block pos:line="39" pos:column="9">{
            <if pos:line="40" pos:column="13">if <condition pos:line="40" pos:column="16">(<expr><op:operator pos:line="40" pos:column="17">!</op:operator><name pos:line="40" pos:column="18">hasInitalized</name></expr>)</condition><then pos:line="40" pos:column="32">
            <block pos:line="41" pos:column="13">{
                <lock pos:line="42" pos:column="17">lock (<expr><name pos:line="42" pos:column="23">hasInitalizedLock</name></expr>)
                <block pos:line="43" pos:column="17">{
                    <if pos:line="44" pos:column="21">if <condition pos:line="44" pos:column="24">(<expr><op:operator pos:line="44" pos:column="25">!</op:operator><name pos:line="44" pos:column="26">hasInitalized</name></expr>)</condition><then pos:line="44" pos:column="40">
                    <block pos:line="45" pos:column="21">{
                        <foreach pos:line="46" pos:column="25">foreach (<init><decl><type><name pos:line="46" pos:column="34">var</name></type> <name pos:line="46" pos:column="38">task</name> <range pos:line="46" pos:column="43">in <expr><name pos:line="46" pos:column="46">tasks</name></expr></range></decl></init>)
                        <block pos:line="47" pos:column="25">{
                            <expr_stmt><expr><call><name><name pos:line="48" pos:column="29">task</name><op:operator pos:line="48" pos:column="33">.</op:operator><name pos:line="48" pos:column="34">Execute</name></name><argument_list pos:line="48" pos:column="41">()</argument_list></call></expr>;</expr_stmt>
                        }</block></foreach>

                        <expr_stmt><expr><name pos:line="51" pos:column="25">hasInitalized</name> <op:operator pos:line="51" pos:column="39">=</op:operator> <lit:literal type="boolean" pos:line="51" pos:column="41">true</lit:literal></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></lock>
            }</block></then></if>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
