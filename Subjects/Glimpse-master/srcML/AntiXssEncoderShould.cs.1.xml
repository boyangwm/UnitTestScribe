<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Core\AntiXssEncoderShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">Glimpse</name><op:operator pos:line="1" pos:column="14">.</op:operator><name pos:line="1" pos:column="15">Core</name><op:operator pos:line="1" pos:column="19">.</op:operator><name pos:line="1" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="2" pos:column="1">using <name pos:line="2" pos:column="7">Xunit</name>;</using>

<namespace pos:line="4" pos:column="1">namespace <name><name pos:line="4" pos:column="11">Glimpse</name><op:operator pos:line="4" pos:column="18">.</op:operator><name pos:line="4" pos:column="19">Test</name><op:operator pos:line="4" pos:column="23">.</op:operator><name pos:line="4" pos:column="24">Core</name></name>
<block pos:line="5" pos:column="1">{
    <class><specifier pos:line="6" pos:column="5">public</specifier> class <name pos:line="6" pos:column="18">AntiXssEncoderShould</name>
    <block pos:line="7" pos:column="5">{
        <function><type><attribute pos:line="8" pos:column="9">[<expr><name pos:line="8" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="9" pos:column="9">public</specifier> <name pos:line="9" pos:column="16">void</name></type> <name pos:line="9" pos:column="21">HtmlAttributeEncode</name><parameter_list pos:line="9" pos:column="40">()</parameter_list>
        <block pos:line="10" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="11" pos:column="13">IHtmlEncoder</name></type> <name pos:line="11" pos:column="26">encoder</name> <init pos:line="11" pos:column="34">= <expr><op:operator pos:line="11" pos:column="36">new</op:operator> <call><name pos:line="11" pos:column="40">AntiXssEncoder</name><argument_list pos:line="11" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="13" pos:column="13">var</name></type> <name pos:line="13" pos:column="17">input</name> <init pos:line="13" pos:column="23">= <expr><lit:literal type="string" pos:line="13" pos:column="25">"This is &lt; an ? Html string"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="15" pos:column="13">string</name></type> <name pos:line="15" pos:column="20">output</name> <init pos:line="15" pos:column="27">= <expr><call><name><name pos:line="15" pos:column="29">encoder</name><op:operator pos:line="15" pos:column="36">.</op:operator><name pos:line="15" pos:column="37">HtmlAttributeEncode</name></name><argument_list pos:line="15" pos:column="56">(<argument><expr><name pos:line="15" pos:column="57">input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="17" pos:column="13">Assert</name><op:operator pos:line="17" pos:column="19">.</op:operator><name pos:line="17" pos:column="20">Equal</name></name><argument_list pos:line="17" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="17" pos:column="26">"This&amp;#32;is&amp;#32;&amp;lt;&amp;#32;an&amp;#32;?&amp;#32;Html&amp;#32;string"</lit:literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="83">output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
        }</block></function>
    }</block></class>
}</block></namespace></unit>
