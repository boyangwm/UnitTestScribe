<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Core\Framework\Crc32.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Security</name><op:operator pos:line="2" pos:column="22">.</op:operator><name pos:line="2" pos:column="23">Cryptography</name></name>;</using>

<namespace pos:line="4" pos:column="1">namespace <name><name pos:line="4" pos:column="11">Glimpse</name><op:operator pos:line="4" pos:column="18">.</op:operator><name pos:line="4" pos:column="19">Core</name><op:operator pos:line="4" pos:column="23">.</op:operator><name pos:line="4" pos:column="24">Framework</name></name>
<block pos:line="5" pos:column="1">{
    <comment type="line" pos:line="6" pos:column="5">// Implementation provided by Damien Guard from http://damieng.com/blog/2006/08/08/calculating_crc32_in_c_and_net</comment>
    <class><specifier pos:line="7" pos:column="5">internal</specifier> class <name pos:line="7" pos:column="20">Crc32</name> <super pos:line="7" pos:column="26">: <name pos:line="7" pos:column="28">HashAlgorithm</name></super>
    <block pos:line="8" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="9" pos:column="9">public</specifier> <specifier pos:line="9" pos:column="16">const</specifier> <name pos:line="9" pos:column="22">uint</name></type> <name pos:line="9" pos:column="27">DefaultPolynomial</name> <init pos:line="9" pos:column="45">= <expr><lit:literal type="number" pos:line="9" pos:column="47">0xedb88320</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="10" pos:column="9">public</specifier> <specifier pos:line="10" pos:column="16">const</specifier> <name pos:line="10" pos:column="22">uint</name></type> <name pos:line="10" pos:column="27">DefaultSeed</name> <init pos:line="10" pos:column="39">= <expr><lit:literal type="number" pos:line="10" pos:column="41">0xffffffff</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="11" pos:column="9">private</specifier> <specifier pos:line="11" pos:column="17">static</specifier> <name pos:line="11" pos:column="24">uint</name><index pos:line="11" pos:column="28">[]</index></type> <name pos:line="11" pos:column="31">defaultTable</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="12" pos:column="9">private</specifier> <name pos:line="12" pos:column="17">uint</name></type> <name pos:line="12" pos:column="22">hash</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="13" pos:column="9">private</specifier> <name pos:line="13" pos:column="17">uint</name></type> <name pos:line="13" pos:column="22">seed</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="14" pos:column="9">private</specifier> <name pos:line="14" pos:column="17">uint</name><index pos:line="14" pos:column="21">[]</index></type> <name pos:line="14" pos:column="24">table</name></decl>;</decl_stmt>

        <constructor><specifier pos:line="16" pos:column="9">public</specifier> <name pos:line="16" pos:column="16">Crc32</name><parameter_list pos:line="16" pos:column="21">()</parameter_list>
        <block pos:line="17" pos:column="9">{
            <expr_stmt><expr><name pos:line="18" pos:column="13">table</name> <op:operator pos:line="18" pos:column="19">=</op:operator> <call><name pos:line="18" pos:column="21">InitializeTable</name><argument_list pos:line="18" pos:column="36">(<argument><expr><name pos:line="18" pos:column="37">DefaultPolynomial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="19" pos:column="13">seed</name> <op:operator pos:line="19" pos:column="18">=</op:operator> <name pos:line="19" pos:column="20">DefaultSeed</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="20" pos:column="13">Initialize</name><argument_list pos:line="20" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <constructor><specifier pos:line="23" pos:column="9">public</specifier> <name pos:line="23" pos:column="16">Crc32</name><parameter_list pos:line="23" pos:column="21">(<param><decl><type><name pos:line="23" pos:column="22">uint</name></type> <name pos:line="23" pos:column="27">polynomial</name></decl></param>, <param><decl><type><name pos:line="23" pos:column="39">uint</name></type> <name pos:line="23" pos:column="44">seed</name></decl></param>)</parameter_list>
        <block pos:line="24" pos:column="9">{
            <expr_stmt><expr><name pos:line="25" pos:column="13">table</name> <op:operator pos:line="25" pos:column="19">=</op:operator> <call><name pos:line="25" pos:column="21">InitializeTable</name><argument_list pos:line="25" pos:column="36">(<argument><expr><name pos:line="25" pos:column="37">polynomial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="26" pos:column="13">this</name><op:operator pos:line="26" pos:column="17">.</op:operator><name pos:line="26" pos:column="18">seed</name></name> <op:operator pos:line="26" pos:column="23">=</op:operator> <name pos:line="26" pos:column="25">seed</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="27" pos:column="13">Initialize</name><argument_list pos:line="27" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier pos:line="30" pos:column="9">public</specifier> <specifier pos:line="30" pos:column="16">override</specifier> <name pos:line="30" pos:column="25">void</name></type> <name pos:line="30" pos:column="30">Initialize</name><parameter_list pos:line="30" pos:column="40">()</parameter_list>
        <block pos:line="31" pos:column="9">{
            <expr_stmt><expr><name pos:line="32" pos:column="13">hash</name> <op:operator pos:line="32" pos:column="18">=</op:operator> <name pos:line="32" pos:column="20">seed</name></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="35" pos:column="9">protected</specifier> <specifier pos:line="35" pos:column="19">override</specifier> <name pos:line="35" pos:column="28">void</name></type> <name pos:line="35" pos:column="33">HashCore</name><parameter_list pos:line="35" pos:column="41">(<param><decl><type><name><name pos:line="35" pos:column="42">byte</name><index pos:line="35" pos:column="46">[]</index></name></type> <name pos:line="35" pos:column="49">buffer</name></decl></param>, <param><decl><type><name pos:line="35" pos:column="57">int</name></type> <name pos:line="35" pos:column="61">start</name></decl></param>, <param><decl><type><name pos:line="35" pos:column="68">int</name></type> <name pos:line="35" pos:column="72">length</name></decl></param>)</parameter_list>
        <block pos:line="36" pos:column="9">{
            <expr_stmt><expr><name pos:line="37" pos:column="13">hash</name> <op:operator pos:line="37" pos:column="18">=</op:operator> <call><name pos:line="37" pos:column="20">CalculateHash</name><argument_list pos:line="37" pos:column="33">(<argument><expr><name pos:line="37" pos:column="34">table</name></expr></argument>, <argument><expr><name pos:line="37" pos:column="41">hash</name></expr></argument>, <argument><expr><name pos:line="37" pos:column="47">buffer</name></expr></argument>, <argument><expr><name pos:line="37" pos:column="55">start</name></expr></argument>, <argument><expr><name pos:line="37" pos:column="62">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="40" pos:column="9">protected</specifier> <specifier pos:line="40" pos:column="19">override</specifier> <name pos:line="40" pos:column="28">byte</name><index pos:line="40" pos:column="32">[]</index></type> <name pos:line="40" pos:column="35">HashFinal</name><parameter_list pos:line="40" pos:column="44">()</parameter_list>
        <block pos:line="41" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="42" pos:column="13">byte</name><index pos:line="42" pos:column="17">[]</index></type> <name pos:line="42" pos:column="20">hashBuffer</name> <init pos:line="42" pos:column="31">= <expr><call><name pos:line="42" pos:column="33">UInt32ToBigEndianBytes</name><argument_list pos:line="42" pos:column="55">(<argument><expr><op:operator pos:line="42" pos:column="56">~</op:operator><name pos:line="42" pos:column="57">hash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="43" pos:column="13">this</name><op:operator pos:line="43" pos:column="17">.</op:operator><name pos:line="43" pos:column="18">HashValue</name></name> <op:operator pos:line="43" pos:column="28">=</op:operator> <name pos:line="43" pos:column="30">hashBuffer</name></expr>;</expr_stmt>
            <return pos:line="44" pos:column="13">return <expr><name pos:line="44" pos:column="20">hashBuffer</name></expr>;</return>
        }</block></function>

        <decl_stmt><decl><type><specifier pos:line="47" pos:column="9">public</specifier> <specifier pos:line="47" pos:column="16">override</specifier> <name pos:line="47" pos:column="25">int</name></type> <name pos:line="47" pos:column="29">HashSize</name>
        <block pos:line="48" pos:column="9">{
            <function><name pos:line="49" pos:column="13">get</name> <block pos:line="49" pos:column="17">{ <return pos:line="49" pos:column="19">return <expr><lit:literal type="number" pos:line="49" pos:column="26">32</lit:literal></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <function><type><specifier pos:line="52" pos:column="9">public</specifier> <specifier pos:line="52" pos:column="16">static</specifier> <name pos:line="52" pos:column="23">uint</name></type> <name pos:line="52" pos:column="28">Compute</name><parameter_list pos:line="52" pos:column="35">(<param><decl><type><name><name pos:line="52" pos:column="36">byte</name><index pos:line="52" pos:column="40">[]</index></name></type> <name pos:line="52" pos:column="43">buffer</name></decl></param>)</parameter_list>
        <block pos:line="53" pos:column="9">{
            <return pos:line="54" pos:column="13">return <expr><call><name pos:line="54" pos:column="20">~<name pos:line="54" pos:column="21">CalculateHash</name></name><argument_list pos:line="54" pos:column="34">(<argument><expr><call><name pos:line="54" pos:column="35">InitializeTable</name><argument_list pos:line="54" pos:column="50">(<argument><expr><name pos:line="54" pos:column="51">DefaultPolynomial</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="54" pos:column="71">DefaultSeed</name></expr></argument>, <argument><expr><name pos:line="54" pos:column="84">buffer</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="54" pos:column="92">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="54" pos:column="95">buffer</name><op:operator pos:line="54" pos:column="101">.</op:operator><name pos:line="54" pos:column="102">Length</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="57" pos:column="9">public</specifier> <specifier pos:line="57" pos:column="16">static</specifier> <name pos:line="57" pos:column="23">uint</name></type> <name pos:line="57" pos:column="28">Compute</name><parameter_list pos:line="57" pos:column="35">(<param><decl><type><name pos:line="57" pos:column="36">uint</name></type> <name pos:line="57" pos:column="41">seed</name></decl></param>, <param><decl><type><name><name pos:line="57" pos:column="47">byte</name><index pos:line="57" pos:column="51">[]</index></name></type> <name pos:line="57" pos:column="54">buffer</name></decl></param>)</parameter_list>
        <block pos:line="58" pos:column="9">{
            <return pos:line="59" pos:column="13">return <expr><call><name pos:line="59" pos:column="20">~<name pos:line="59" pos:column="21">CalculateHash</name></name><argument_list pos:line="59" pos:column="34">(<argument><expr><call><name pos:line="59" pos:column="35">InitializeTable</name><argument_list pos:line="59" pos:column="50">(<argument><expr><name pos:line="59" pos:column="51">DefaultPolynomial</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="59" pos:column="71">seed</name></expr></argument>, <argument><expr><name pos:line="59" pos:column="77">buffer</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="59" pos:column="85">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="59" pos:column="88">buffer</name><op:operator pos:line="59" pos:column="94">.</op:operator><name pos:line="59" pos:column="95">Length</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="62" pos:column="9">public</specifier> <specifier pos:line="62" pos:column="16">static</specifier> <name pos:line="62" pos:column="23">uint</name></type> <name pos:line="62" pos:column="28">Compute</name><parameter_list pos:line="62" pos:column="35">(<param><decl><type><name pos:line="62" pos:column="36">uint</name></type> <name pos:line="62" pos:column="41">polynomial</name></decl></param>, <param><decl><type><name pos:line="62" pos:column="53">uint</name></type> <name pos:line="62" pos:column="58">seed</name></decl></param>, <param><decl><type><name><name pos:line="62" pos:column="64">byte</name><index pos:line="62" pos:column="68">[]</index></name></type> <name pos:line="62" pos:column="71">buffer</name></decl></param>)</parameter_list>
        <block pos:line="63" pos:column="9">{
            <return pos:line="64" pos:column="13">return <expr><call><name pos:line="64" pos:column="20">~<name pos:line="64" pos:column="21">CalculateHash</name></name><argument_list pos:line="64" pos:column="34">(<argument><expr><call><name pos:line="64" pos:column="35">InitializeTable</name><argument_list pos:line="64" pos:column="50">(<argument><expr><name pos:line="64" pos:column="51">polynomial</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="64" pos:column="64">seed</name></expr></argument>, <argument><expr><name pos:line="64" pos:column="70">buffer</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="64" pos:column="78">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="64" pos:column="81">buffer</name><op:operator pos:line="64" pos:column="87">.</op:operator><name pos:line="64" pos:column="88">Length</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="67" pos:column="9">private</specifier> <specifier pos:line="67" pos:column="17">static</specifier> <name pos:line="67" pos:column="24">uint</name><index pos:line="67" pos:column="28">[]</index></type> <name pos:line="67" pos:column="31">InitializeTable</name><parameter_list pos:line="67" pos:column="46">(<param><decl><type><name pos:line="67" pos:column="47">uint</name></type> <name pos:line="67" pos:column="52">polynomial</name></decl></param>)</parameter_list>
        <block pos:line="68" pos:column="9">{
            <if pos:line="69" pos:column="13">if <condition pos:line="69" pos:column="16">(<expr><name pos:line="69" pos:column="17">polynomial</name> <op:operator pos:line="69" pos:column="28">==</op:operator> <name pos:line="69" pos:column="31">DefaultPolynomial</name> <op:operator pos:line="69" pos:column="49">&amp;&amp;</op:operator> <name pos:line="69" pos:column="52">defaultTable</name> <op:operator pos:line="69" pos:column="65">!=</op:operator> <name pos:line="69" pos:column="68">null</name></expr>)</condition><then pos:line="69" pos:column="73">
            <block pos:line="70" pos:column="13">{
                <return pos:line="71" pos:column="17">return <expr><name pos:line="71" pos:column="24">defaultTable</name></expr>;</return>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="74" pos:column="13">uint</name><index pos:line="74" pos:column="17">[]</index></type> <name pos:line="74" pos:column="20">createTable</name> <init pos:line="74" pos:column="32">= <expr><op:operator pos:line="74" pos:column="34">new</op:operator> <name><name pos:line="74" pos:column="38">uint</name><index pos:line="74" pos:column="42">[<expr><lit:literal type="number" pos:line="74" pos:column="43">256</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <for pos:line="75" pos:column="13">for (<init><decl><type><name pos:line="75" pos:column="18">int</name></type> <name pos:line="75" pos:column="22">i</name> <init pos:line="75" pos:column="24">= <expr><lit:literal type="number" pos:line="75" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="75" pos:column="29">i</name> <op:operator pos:line="75" pos:column="31">&lt;</op:operator> <lit:literal type="number" pos:line="75" pos:column="33">256</lit:literal></expr>;</condition> <incr><expr><name pos:line="75" pos:column="38">i</name><op:operator pos:line="75" pos:column="39">++</op:operator></expr></incr>)
            <block pos:line="76" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="77" pos:column="17">uint</name></type> <name pos:line="77" pos:column="22">entry</name> <init pos:line="77" pos:column="28">= <expr><op:operator pos:line="77" pos:column="30">(</op:operator><name pos:line="77" pos:column="31">uint</name><op:operator pos:line="77" pos:column="35">)</op:operator><name pos:line="77" pos:column="36">i</name></expr></init></decl>;</decl_stmt>
                <for pos:line="78" pos:column="17">for (<init><decl><type><name pos:line="78" pos:column="22">int</name></type> <name pos:line="78" pos:column="26">j</name> <init pos:line="78" pos:column="28">= <expr><lit:literal type="number" pos:line="78" pos:column="30">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="78" pos:column="33">j</name> <op:operator pos:line="78" pos:column="35">&lt;</op:operator> <lit:literal type="number" pos:line="78" pos:column="37">8</lit:literal></expr>;</condition> <incr><expr><name pos:line="78" pos:column="40">j</name><op:operator pos:line="78" pos:column="41">++</op:operator></expr></incr>)
                <block pos:line="79" pos:column="17">{
                    <if pos:line="80" pos:column="21">if <condition pos:line="80" pos:column="24">(<expr><op:operator pos:line="80" pos:column="25">(</op:operator><name pos:line="80" pos:column="26">entry</name> <op:operator pos:line="80" pos:column="32">&amp;</op:operator> <lit:literal type="number" pos:line="80" pos:column="34">1</lit:literal><op:operator pos:line="80" pos:column="35">)</op:operator> <op:operator pos:line="80" pos:column="37">==</op:operator> <lit:literal type="number" pos:line="80" pos:column="40">1</lit:literal></expr>)</condition><then pos:line="80" pos:column="42">
                    <block pos:line="81" pos:column="21">{
                        <expr_stmt><expr><name pos:line="82" pos:column="25">entry</name> <op:operator pos:line="82" pos:column="31">=</op:operator> <op:operator pos:line="82" pos:column="33">(</op:operator><name pos:line="82" pos:column="34">entry</name> <op:operator pos:line="82" pos:column="40">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="82" pos:column="43">1</lit:literal><op:operator pos:line="82" pos:column="44">)</op:operator> <op:operator pos:line="82" pos:column="46">^</op:operator> <name pos:line="82" pos:column="48">polynomial</name></expr>;</expr_stmt>
                    }</block></then>
                    <else pos:line="84" pos:column="21">else
                    <block pos:line="85" pos:column="21">{
                        <expr_stmt><expr><name pos:line="86" pos:column="25">entry</name> <op:operator pos:line="86" pos:column="31">=</op:operator> <name pos:line="86" pos:column="33">entry</name> <op:operator pos:line="86" pos:column="39">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="86" pos:column="42">1</lit:literal></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></for>

                <expr_stmt><expr><name><name pos:line="90" pos:column="17">createTable</name><index pos:line="90" pos:column="28">[<expr><name pos:line="90" pos:column="29">i</name></expr>]</index></name> <op:operator pos:line="90" pos:column="32">=</op:operator> <name pos:line="90" pos:column="34">entry</name></expr>;</expr_stmt>
            }</block></for>

            <if pos:line="93" pos:column="13">if <condition pos:line="93" pos:column="16">(<expr><name pos:line="93" pos:column="17">polynomial</name> <op:operator pos:line="93" pos:column="28">==</op:operator> <name pos:line="93" pos:column="31">DefaultPolynomial</name></expr>)</condition><then pos:line="93" pos:column="49">
            <block pos:line="94" pos:column="13">{
                <expr_stmt><expr><name pos:line="95" pos:column="17">defaultTable</name> <op:operator pos:line="95" pos:column="30">=</op:operator> <name pos:line="95" pos:column="32">createTable</name></expr>;</expr_stmt>
            }</block></then></if>

            <return pos:line="98" pos:column="13">return <expr><name pos:line="98" pos:column="20">createTable</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="101" pos:column="9">private</specifier> <specifier pos:line="101" pos:column="17">static</specifier> <name pos:line="101" pos:column="24">uint</name></type> <name pos:line="101" pos:column="29">CalculateHash</name><parameter_list pos:line="101" pos:column="42">(<param><decl><type><name><name pos:line="101" pos:column="43">uint</name><index pos:line="101" pos:column="47">[]</index></name></type> <name pos:line="101" pos:column="50">table</name></decl></param>, <param><decl><type><name pos:line="101" pos:column="57">uint</name></type> <name pos:line="101" pos:column="62">seed</name></decl></param>, <param><decl><type><name><name pos:line="101" pos:column="68">byte</name><index pos:line="101" pos:column="72">[]</index></name></type> <name pos:line="101" pos:column="75">buffer</name></decl></param>, <param><decl><type><name pos:line="101" pos:column="83">int</name></type> <name pos:line="101" pos:column="87">start</name></decl></param>, <param><decl><type><name pos:line="101" pos:column="94">int</name></type> <name pos:line="101" pos:column="98">size</name></decl></param>)</parameter_list>
        <block pos:line="102" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="103" pos:column="13">uint</name></type> <name pos:line="103" pos:column="18">crc</name> <init pos:line="103" pos:column="22">= <expr><name pos:line="103" pos:column="24">seed</name></expr></init></decl>;</decl_stmt>
            <for pos:line="104" pos:column="13">for (<init><decl><type><name pos:line="104" pos:column="18">int</name></type> <name pos:line="104" pos:column="22">i</name> <init pos:line="104" pos:column="24">= <expr><name pos:line="104" pos:column="26">start</name></expr></init></decl>;</init> <condition><expr><name pos:line="104" pos:column="33">i</name> <op:operator pos:line="104" pos:column="35">&lt;</op:operator> <name pos:line="104" pos:column="37">size</name></expr>;</condition> <incr><expr><name pos:line="104" pos:column="43">i</name><op:operator pos:line="104" pos:column="44">++</op:operator></expr></incr>)
            <block pos:line="105" pos:column="13">{
                <unchecked pos:line="106" pos:column="17">unchecked
                <block pos:line="107" pos:column="17">{
                    <expr_stmt><expr><name pos:line="108" pos:column="21">crc</name> <op:operator pos:line="108" pos:column="25">=</op:operator> <op:operator pos:line="108" pos:column="27">(</op:operator><name pos:line="108" pos:column="28">crc</name> <op:operator pos:line="108" pos:column="32">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="108" pos:column="35">8</lit:literal><op:operator pos:line="108" pos:column="36">)</op:operator> <op:operator pos:line="108" pos:column="38">^</op:operator> <name><name pos:line="108" pos:column="40">table</name><index pos:line="108" pos:column="45">[<expr><name><name pos:line="108" pos:column="46">buffer</name><index pos:line="108" pos:column="52">[<expr><name pos:line="108" pos:column="53">i</name></expr>]</index></name> <op:operator pos:line="108" pos:column="56">^</op:operator> <name pos:line="108" pos:column="58">crc</name> <op:operator pos:line="108" pos:column="62">&amp;</op:operator> <lit:literal type="number" pos:line="108" pos:column="64">0xff</lit:literal></expr>]</index></name></expr>;</expr_stmt>
                }</block></unchecked>
            }</block></for>

            <return pos:line="112" pos:column="13">return <expr><name pos:line="112" pos:column="20">crc</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="115" pos:column="9">private</specifier> <name pos:line="115" pos:column="17">byte</name><index pos:line="115" pos:column="21">[]</index></type> <name pos:line="115" pos:column="24">UInt32ToBigEndianBytes</name><parameter_list pos:line="115" pos:column="46">(<param><decl><type><name pos:line="115" pos:column="47">uint</name></type> <name pos:line="115" pos:column="52">x</name></decl></param>)</parameter_list>
        <block pos:line="116" pos:column="9">{
            <return pos:line="117" pos:column="13">return <expr><op:operator pos:line="117" pos:column="20">new</op:operator><index pos:line="117" pos:column="23">[]</index>
                <block pos:line="118" pos:column="17">{
                    <expr><call pos:line="119" pos:column="21">(<name pos:line="119" pos:column="22">byte</name>)<argument_list pos:line="119" pos:column="27">(<argument><expr><op:operator pos:line="119" pos:column="28">(</op:operator><name pos:line="119" pos:column="29">x</name> <op:operator pos:line="119" pos:column="31">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="119" pos:column="34">24</lit:literal><op:operator pos:line="119" pos:column="36">)</op:operator> <op:operator pos:line="119" pos:column="38">&amp;</op:operator> <lit:literal type="number" pos:line="119" pos:column="40">0xff</lit:literal></expr></argument>)</argument_list></call></expr><op:operator pos:line="119" pos:column="45">,</op:operator> 
                    <expr><call pos:line="120" pos:column="21">(<name pos:line="120" pos:column="22">byte</name>)<argument_list pos:line="120" pos:column="27">(<argument><expr><op:operator pos:line="120" pos:column="28">(</op:operator><name pos:line="120" pos:column="29">x</name> <op:operator pos:line="120" pos:column="31">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="120" pos:column="34">16</lit:literal><op:operator pos:line="120" pos:column="36">)</op:operator> <op:operator pos:line="120" pos:column="38">&amp;</op:operator> <lit:literal type="number" pos:line="120" pos:column="40">0xff</lit:literal></expr></argument>)</argument_list></call></expr><op:operator pos:line="120" pos:column="45">,</op:operator> 
                    <expr><call pos:line="121" pos:column="21">(<name pos:line="121" pos:column="22">byte</name>)<argument_list pos:line="121" pos:column="27">(<argument><expr><op:operator pos:line="121" pos:column="28">(</op:operator><name pos:line="121" pos:column="29">x</name> <op:operator pos:line="121" pos:column="31">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="121" pos:column="34">8</lit:literal><op:operator pos:line="121" pos:column="35">)</op:operator> <op:operator pos:line="121" pos:column="37">&amp;</op:operator> <lit:literal type="number" pos:line="121" pos:column="39">0xff</lit:literal></expr></argument>)</argument_list></call></expr><op:operator pos:line="121" pos:column="44">,</op:operator> 
                    <expr><call pos:line="122" pos:column="21">(<name pos:line="122" pos:column="22">byte</name>)<argument_list pos:line="122" pos:column="27">(<argument><expr><name pos:line="122" pos:column="28">x</name> <op:operator pos:line="122" pos:column="30">&amp;</op:operator> <lit:literal type="number" pos:line="122" pos:column="32">0xff</lit:literal></expr></argument>)</argument_list></call></expr>
                }</block></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
