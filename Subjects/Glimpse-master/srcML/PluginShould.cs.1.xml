<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Core\Plugin\Assist\PluginShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Core</name><op:operator pos:line="4" pos:column="19">.</op:operator><name pos:line="4" pos:column="20">Tab</name><op:operator pos:line="4" pos:column="23">.</op:operator><name pos:line="4" pos:column="24">Assist</name></name>;</using>
<using pos:line="5" pos:column="1">using <name pos:line="5" pos:column="7">Xunit</name>;</using>

<namespace pos:line="7" pos:column="1">namespace <name><name pos:line="7" pos:column="11">Glimpse</name><op:operator pos:line="7" pos:column="18">.</op:operator><name pos:line="7" pos:column="19">Test</name><op:operator pos:line="7" pos:column="23">.</op:operator><name pos:line="7" pos:column="24">Core</name><op:operator pos:line="7" pos:column="28">.</op:operator><name pos:line="7" pos:column="29">Plugin</name><op:operator pos:line="7" pos:column="35">.</op:operator><name pos:line="7" pos:column="36">Assist</name></name>
<block pos:line="8" pos:column="1">{
	<class><specifier pos:line="9" pos:column="9">public</specifier> class <name pos:line="9" pos:column="22">PluginShould</name>
	<block pos:line="10" pos:column="9">{
		<function><type><attribute pos:line="11" pos:column="17">[<expr><name pos:line="11" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="12" pos:column="17">public</specifier> <name pos:line="12" pos:column="24">void</name></type> <name pos:line="12" pos:column="29">ReturnNewSectionWithNoRows</name><parameter_list pos:line="12" pos:column="55">()</parameter_list>
		<block pos:line="13" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="14" pos:column="25">var</name></type> <name pos:line="14" pos:column="29">section</name> <init pos:line="14" pos:column="37">= <expr><call><name><name pos:line="14" pos:column="39">Glimpse</name><op:operator pos:line="14" pos:column="46">.</op:operator><name pos:line="14" pos:column="47">Core</name><op:operator pos:line="14" pos:column="51">.</op:operator><name pos:line="14" pos:column="52">Tab</name><op:operator pos:line="14" pos:column="55">.</op:operator><name pos:line="14" pos:column="56">Assist</name><op:operator pos:line="14" pos:column="62">.</op:operator><name pos:line="14" pos:column="63">Plugin</name><op:operator pos:line="14" pos:column="69">.</op:operator><name pos:line="14" pos:column="70">Create</name></name><argument_list pos:line="14" pos:column="76">()</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name><name pos:line="16" pos:column="25">Assert</name><op:operator pos:line="16" pos:column="31">.</op:operator><name pos:line="16" pos:column="32">Equal</name></name><argument_list pos:line="16" pos:column="37">(<argument><expr><lit:literal type="number" pos:line="16" pos:column="38">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="16" pos:column="41">section</name><op:operator pos:line="16" pos:column="48">.</op:operator><name pos:line="16" pos:column="49">Rows</name><op:operator pos:line="16" pos:column="53">.</op:operator><name pos:line="16" pos:column="54">Count</name></name><argument_list pos:line="16" pos:column="59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="19" pos:column="17">[<expr><name pos:line="19" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="20" pos:column="17">public</specifier> <name pos:line="20" pos:column="24">void</name></type> <name pos:line="20" pos:column="29">ReturnNewSectionWithRowsAndColumns</name><parameter_list pos:line="20" pos:column="63">()</parameter_list>
		<block pos:line="21" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="22" pos:column="25">var</name></type> <name pos:line="22" pos:column="29">section</name> <init pos:line="22" pos:column="37">= <expr><call><name><name pos:line="22" pos:column="39">Glimpse</name><op:operator pos:line="22" pos:column="46">.</op:operator><name pos:line="22" pos:column="47">Core</name><op:operator pos:line="22" pos:column="51">.</op:operator><name pos:line="22" pos:column="52">Tab</name><op:operator pos:line="22" pos:column="55">.</op:operator><name pos:line="22" pos:column="56">Assist</name><op:operator pos:line="22" pos:column="62">.</op:operator><name pos:line="22" pos:column="63">Plugin</name><op:operator pos:line="22" pos:column="69">.</op:operator><name pos:line="22" pos:column="70">Create</name></name><argument_list pos:line="22" pos:column="76">(<argument><expr><lit:literal type="string" pos:line="22" pos:column="77">"Header1"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="22" pos:column="88">"Header2"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<expr_stmt><expr><call><name><name pos:line="24" pos:column="25">Assert</name><op:operator pos:line="24" pos:column="31">.</op:operator><name pos:line="24" pos:column="32">Equal</name></name><argument_list pos:line="24" pos:column="37">(<argument><expr><lit:literal type="number" pos:line="24" pos:column="38">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="24" pos:column="41">section</name><op:operator pos:line="24" pos:column="48">.</op:operator><name pos:line="24" pos:column="49">Rows</name><op:operator pos:line="24" pos:column="53">.</op:operator><name pos:line="24" pos:column="54">Count</name></name><argument_list pos:line="24" pos:column="59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="25" pos:column="25">Assert</name><op:operator pos:line="25" pos:column="31">.</op:operator><name pos:line="25" pos:column="32">Equal</name></name><argument_list pos:line="25" pos:column="37">(<argument><expr><lit:literal type="number" pos:line="25" pos:column="38">2</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="25" pos:column="41">section</name><op:operator pos:line="25" pos:column="48">.</op:operator><name pos:line="25" pos:column="49">Rows</name><op:operator pos:line="25" pos:column="53">.</op:operator><name pos:line="25" pos:column="54">Single</name></name><argument_list pos:line="25" pos:column="60">()</argument_list></call><op:operator pos:line="25" pos:column="62">.</op:operator><call><name><name pos:line="25" pos:column="63">Columns</name><op:operator pos:line="25" pos:column="70">.</op:operator><name pos:line="25" pos:column="71">Count</name></name><argument_list pos:line="25" pos:column="76">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="26" pos:column="25">Assert</name><op:operator pos:line="26" pos:column="31">.</op:operator><name pos:line="26" pos:column="32">Equal</name></name><argument_list pos:line="26" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="26" pos:column="38">"Header1"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="26" pos:column="49">section</name><op:operator pos:line="26" pos:column="56">.</op:operator><name pos:line="26" pos:column="57">Rows</name><op:operator pos:line="26" pos:column="61">.</op:operator><name pos:line="26" pos:column="62">Single</name></name><argument_list pos:line="26" pos:column="68">()</argument_list></call><op:operator pos:line="26" pos:column="70">.</op:operator><call><name><name pos:line="26" pos:column="71">Columns</name><op:operator pos:line="26" pos:column="78">.</op:operator><name pos:line="26" pos:column="79">First</name></name><argument_list pos:line="26" pos:column="84">()</argument_list></call><op:operator pos:line="26" pos:column="86">.</op:operator><name pos:line="26" pos:column="87">Data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="27" pos:column="25">Assert</name><op:operator pos:line="27" pos:column="31">.</op:operator><name pos:line="27" pos:column="32">Equal</name></name><argument_list pos:line="27" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="27" pos:column="38">"Header2"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="27" pos:column="49">section</name><op:operator pos:line="27" pos:column="56">.</op:operator><name pos:line="27" pos:column="57">Rows</name><op:operator pos:line="27" pos:column="61">.</op:operator><name pos:line="27" pos:column="62">Single</name></name><argument_list pos:line="27" pos:column="68">()</argument_list></call><op:operator pos:line="27" pos:column="70">.</op:operator><call><name><name pos:line="27" pos:column="71">Columns</name><op:operator pos:line="27" pos:column="78">.</op:operator><name pos:line="27" pos:column="79">Last</name></name><argument_list pos:line="27" pos:column="83">()</argument_list></call><op:operator pos:line="27" pos:column="85">.</op:operator><name pos:line="27" pos:column="86">Data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="30" pos:column="17">[<expr><name pos:line="30" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="31" pos:column="17">public</specifier> <name pos:line="31" pos:column="24">void</name></type> <name pos:line="31" pos:column="29">ReturnSelf</name><parameter_list pos:line="31" pos:column="39">()</parameter_list>
		<block pos:line="32" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="33" pos:column="25">var</name></type> <name pos:line="33" pos:column="29">section1</name> <init pos:line="33" pos:column="38">= <expr><call><name><name pos:line="33" pos:column="40">Plugin</name><op:operator pos:line="33" pos:column="46">.</op:operator><name pos:line="33" pos:column="47">Section</name></name><argument_list pos:line="33" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="33" pos:column="55">"SectionName"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="33" pos:column="70">new</op:operator> <call><name pos:line="33" pos:column="74">TabSection</name><argument_list pos:line="33" pos:column="84">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="34" pos:column="25">var</name></type> <name pos:line="34" pos:column="29">section2</name> <init pos:line="34" pos:column="38">= <expr><call><name><name pos:line="34" pos:column="40">Plugin</name><op:operator pos:line="34" pos:column="46">.</op:operator><name pos:line="34" pos:column="47">Section</name></name><argument_list pos:line="34" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="34" pos:column="55">"SectionName"</lit:literal></expr></argument>, <argument><expr><lambda><name pos:line="34" pos:column="70">section</name> <op:operator pos:line="34" pos:column="78">=&gt;</op:operator> <block pos:line="34" pos:column="81">{}</block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name><name pos:line="36" pos:column="25">Assert</name><op:operator pos:line="36" pos:column="31">.</op:operator><name pos:line="36" pos:column="32">Equal</name></name><argument_list pos:line="36" pos:column="37">(<argument><expr><name pos:line="36" pos:column="38">section1</name></expr></argument>, <argument><expr><name pos:line="36" pos:column="48">Plugin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="37" pos:column="25">Assert</name><op:operator pos:line="37" pos:column="31">.</op:operator><name pos:line="37" pos:column="32">Equal</name></name><argument_list pos:line="37" pos:column="37">(<argument><expr><name pos:line="37" pos:column="38">section2</name></expr></argument>, <argument><expr><name pos:line="37" pos:column="48">Plugin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="40" pos:column="17">[<expr><name pos:line="40" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="41" pos:column="17">public</specifier> <name pos:line="41" pos:column="24">void</name></type> <name pos:line="41" pos:column="29">ThrowWhenSectionNameIsNullOrEmpty</name><parameter_list pos:line="41" pos:column="62">()</parameter_list>
		<block pos:line="42" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="43" pos:column="25">var</name></type> <name pos:line="43" pos:column="29">validSection</name> <init pos:line="43" pos:column="42">= <expr><op:operator pos:line="43" pos:column="44">new</op:operator> <call><name pos:line="43" pos:column="48">TabSection</name><argument_list pos:line="43" pos:column="58">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name pos:line="44" pos:column="25">Action</name><argument_list pos:line="44" pos:column="31">&lt;<argument><name pos:line="44" pos:column="32">TabSection</name></argument>&gt;</argument_list></name></type> <name pos:line="44" pos:column="44">validSectionAction</name> <init pos:line="44" pos:column="63">= <expr><lambda><name pos:line="44" pos:column="65">section</name> <op:operator pos:line="44" pos:column="73">=&gt;</op:operator> <block pos:line="44" pos:column="76">{}</block></lambda></expr></init></decl>;</decl_stmt>
			
			<expr_stmt><expr><call><name><name pos:line="46" pos:column="25">Assert</name><op:operator pos:line="46" pos:column="31">.</op:operator><name><name pos:line="46" pos:column="32">Throws</name><argument_list pos:line="46" pos:column="38">&lt;<argument><name pos:line="46" pos:column="39">ArgumentException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="46" pos:column="57">(<argument><expr><lambda><parameter_list pos:line="46" pos:column="58">()</parameter_list> <op:operator pos:line="46" pos:column="61">=&gt;</op:operator> <call><name><name pos:line="46" pos:column="64">Plugin</name><op:operator pos:line="46" pos:column="70">.</op:operator><name pos:line="46" pos:column="71">Section</name></name><argument_list pos:line="46" pos:column="78">(<argument><expr><name pos:line="46" pos:column="79">null</name></expr></argument>, <argument><expr><name pos:line="46" pos:column="85">validSection</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="47" pos:column="25">Assert</name><op:operator pos:line="47" pos:column="31">.</op:operator><name><name pos:line="47" pos:column="32">Throws</name><argument_list pos:line="47" pos:column="38">&lt;<argument><name pos:line="47" pos:column="39">ArgumentException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="47" pos:column="57">(<argument><expr><lambda><parameter_list pos:line="47" pos:column="58">()</parameter_list> <op:operator pos:line="47" pos:column="61">=&gt;</op:operator> <call><name><name pos:line="47" pos:column="64">Plugin</name><op:operator pos:line="47" pos:column="70">.</op:operator><name pos:line="47" pos:column="71">Section</name></name><argument_list pos:line="47" pos:column="78">(<argument><expr><lit:literal type="string" pos:line="47" pos:column="79">""</lit:literal></expr></argument>, <argument><expr><name pos:line="47" pos:column="83">validSection</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name pos:line="49" pos:column="25">Assert</name><op:operator pos:line="49" pos:column="31">.</op:operator><name><name pos:line="49" pos:column="32">Throws</name><argument_list pos:line="49" pos:column="38">&lt;<argument><name pos:line="49" pos:column="39">ArgumentException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="49" pos:column="57">(<argument><expr><lambda><parameter_list pos:line="49" pos:column="58">()</parameter_list> <op:operator pos:line="49" pos:column="61">=&gt;</op:operator> <call><name><name pos:line="49" pos:column="64">Plugin</name><op:operator pos:line="49" pos:column="70">.</op:operator><name pos:line="49" pos:column="71">Section</name></name><argument_list pos:line="49" pos:column="78">(<argument><expr><name pos:line="49" pos:column="79">null</name></expr></argument>, <argument><expr><name pos:line="49" pos:column="85">validSectionAction</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="50" pos:column="25">Assert</name><op:operator pos:line="50" pos:column="31">.</op:operator><name><name pos:line="50" pos:column="32">Throws</name><argument_list pos:line="50" pos:column="38">&lt;<argument><name pos:line="50" pos:column="39">ArgumentException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="50" pos:column="57">(<argument><expr><lambda><parameter_list pos:line="50" pos:column="58">()</parameter_list> <op:operator pos:line="50" pos:column="61">=&gt;</op:operator> <call><name><name pos:line="50" pos:column="64">Plugin</name><op:operator pos:line="50" pos:column="70">.</op:operator><name pos:line="50" pos:column="71">Section</name></name><argument_list pos:line="50" pos:column="78">(<argument><expr><lit:literal type="string" pos:line="50" pos:column="79">""</lit:literal></expr></argument>, <argument><expr><name pos:line="50" pos:column="83">validSectionAction</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="53" pos:column="17">[<expr><name pos:line="53" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="54" pos:column="17">public</specifier> <name pos:line="54" pos:column="24">void</name></type> <name pos:line="54" pos:column="29">ThrowWhenSectionIsNull</name><parameter_list pos:line="54" pos:column="51">()</parameter_list>
		<block pos:line="55" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="56" pos:column="25">TabSection</name></type> <name pos:line="56" pos:column="36">section</name> <init pos:line="56" pos:column="44">= <expr><name pos:line="56" pos:column="46">null</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name pos:line="57" pos:column="25">Action</name><argument_list pos:line="57" pos:column="31">&lt;<argument><name pos:line="57" pos:column="32">TabSection</name></argument>&gt;</argument_list></name></type> <name pos:line="57" pos:column="44">sectionAction</name> <init pos:line="57" pos:column="58">= <expr><name pos:line="57" pos:column="60">null</name></expr></init></decl>;</decl_stmt>
			
			<expr_stmt><expr><call><name><name pos:line="59" pos:column="25">Assert</name><op:operator pos:line="59" pos:column="31">.</op:operator><name><name pos:line="59" pos:column="32">Throws</name><argument_list pos:line="59" pos:column="38">&lt;<argument><name pos:line="59" pos:column="39">ArgumentNullException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="59" pos:column="61">(<argument><expr><lambda><parameter_list pos:line="59" pos:column="62">()</parameter_list> <op:operator pos:line="59" pos:column="65">=&gt;</op:operator> <call><name><name pos:line="59" pos:column="68">Plugin</name><op:operator pos:line="59" pos:column="74">.</op:operator><name pos:line="59" pos:column="75">Section</name></name><argument_list pos:line="59" pos:column="82">(<argument><expr><lit:literal type="string" pos:line="59" pos:column="83">"SectionName"</lit:literal></expr></argument>, <argument><expr><name pos:line="59" pos:column="98">section</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="60" pos:column="25">Assert</name><op:operator pos:line="60" pos:column="31">.</op:operator><name><name pos:line="60" pos:column="32">Throws</name><argument_list pos:line="60" pos:column="38">&lt;<argument><name pos:line="60" pos:column="39">ArgumentNullException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="60" pos:column="61">(<argument><expr><lambda><parameter_list pos:line="60" pos:column="62">()</parameter_list> <op:operator pos:line="60" pos:column="65">=&gt;</op:operator> <call><name><name pos:line="60" pos:column="68">Plugin</name><op:operator pos:line="60" pos:column="74">.</op:operator><name pos:line="60" pos:column="75">Section</name></name><argument_list pos:line="60" pos:column="82">(<argument><expr><lit:literal type="string" pos:line="60" pos:column="83">"SectionName"</lit:literal></expr></argument>, <argument><expr><name pos:line="60" pos:column="98">sectionAction</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="63" pos:column="17">[<expr><name pos:line="63" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="64" pos:column="17">public</specifier> <name pos:line="64" pos:column="24">void</name></type> <name pos:line="64" pos:column="29">AddNewSection</name><parameter_list pos:line="64" pos:column="42">()</parameter_list>
		<block pos:line="65" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="66" pos:column="25">var</name></type> <name pos:line="66" pos:column="29">innerSection</name> <init pos:line="66" pos:column="42">= <expr><op:operator pos:line="66" pos:column="44">new</op:operator> <call><name pos:line="66" pos:column="48">TabSection</name><argument_list pos:line="66" pos:column="58">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="67" pos:column="25">Plugin</name><op:operator pos:line="67" pos:column="31">.</op:operator><name pos:line="67" pos:column="32">Section</name></name><argument_list pos:line="67" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="67" pos:column="40">"SectionName1"</lit:literal></expr></argument>, <argument><expr><name pos:line="67" pos:column="56">innerSection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name pos:line="69" pos:column="25">Assert</name><op:operator pos:line="69" pos:column="31">.</op:operator><name pos:line="69" pos:column="32">Equal</name></name><argument_list pos:line="69" pos:column="37">(<argument><expr><lit:literal type="number" pos:line="69" pos:column="38">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="69" pos:column="41">Plugin</name><op:operator pos:line="69" pos:column="47">.</op:operator><name pos:line="69" pos:column="48">Rows</name><op:operator pos:line="69" pos:column="52">.</op:operator><name pos:line="69" pos:column="53">Count</name></name><argument_list pos:line="69" pos:column="58">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="70" pos:column="25">Assert</name><op:operator pos:line="70" pos:column="31">.</op:operator><name pos:line="70" pos:column="32">Equal</name></name><argument_list pos:line="70" pos:column="37">(<argument><expr><lit:literal type="number" pos:line="70" pos:column="38">2</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="70" pos:column="41">Plugin</name><op:operator pos:line="70" pos:column="47">.</op:operator><name pos:line="70" pos:column="48">Rows</name><op:operator pos:line="70" pos:column="52">.</op:operator><name pos:line="70" pos:column="53">Single</name></name><argument_list pos:line="70" pos:column="59">()</argument_list></call><op:operator pos:line="70" pos:column="61">.</op:operator><call><name><name pos:line="70" pos:column="62">Columns</name><op:operator pos:line="70" pos:column="69">.</op:operator><name pos:line="70" pos:column="70">Count</name></name><argument_list pos:line="70" pos:column="75">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="71" pos:column="25">Assert</name><op:operator pos:line="71" pos:column="31">.</op:operator><name pos:line="71" pos:column="32">Equal</name></name><argument_list pos:line="71" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="71" pos:column="38">"*SectionName1*"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="71" pos:column="56">Plugin</name><op:operator pos:line="71" pos:column="62">.</op:operator><name pos:line="71" pos:column="63">Rows</name><op:operator pos:line="71" pos:column="67">.</op:operator><name pos:line="71" pos:column="68">Single</name></name><argument_list pos:line="71" pos:column="74">()</argument_list></call><op:operator pos:line="71" pos:column="76">.</op:operator><call><name><name pos:line="71" pos:column="77">Columns</name><op:operator pos:line="71" pos:column="84">.</op:operator><name pos:line="71" pos:column="85">First</name></name><argument_list pos:line="71" pos:column="90">()</argument_list></call><op:operator pos:line="71" pos:column="92">.</op:operator><name pos:line="71" pos:column="93">Data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="73" pos:column="13">var</name></type> <name pos:line="73" pos:column="17">buildResult</name> <init pos:line="73" pos:column="29">= <expr><call><name><name pos:line="73" pos:column="31">innerSection</name><op:operator pos:line="73" pos:column="43">.</op:operator><name pos:line="73" pos:column="44">Build</name></name><argument_list pos:line="73" pos:column="49">()</argument_list></call> <op:operator pos:line="73" pos:column="52">as</op:operator> <name><name pos:line="73" pos:column="55">IEnumerable</name><argument_list pos:line="73" pos:column="66">&lt;<argument><name pos:line="73" pos:column="67">object</name></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="74" pos:column="13">Assert</name><op:operator pos:line="74" pos:column="19">.</op:operator><name pos:line="74" pos:column="20">Equal</name></name><argument_list pos:line="74" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="74" pos:column="26">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="74" pos:column="29">buildResult</name><op:operator pos:line="74" pos:column="40">.</op:operator><name pos:line="74" pos:column="41">Count</name></name><argument_list pos:line="74" pos:column="46">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="77" pos:column="17">[<expr><name pos:line="77" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="78" pos:column="17">public</specifier> <name pos:line="78" pos:column="24">void</name></type> <name pos:line="78" pos:column="29">AddSectionWithThreeRows</name><parameter_list pos:line="78" pos:column="52">()</parameter_list>
		<block pos:line="79" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="80" pos:column="25">object</name></type> <name pos:line="80" pos:column="32">rows</name> <init pos:line="80" pos:column="37">= <expr><name pos:line="80" pos:column="39">null</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="81" pos:column="25">Plugin</name><op:operator pos:line="81" pos:column="31">.</op:operator><name pos:line="81" pos:column="32">Section</name></name><argument_list pos:line="81" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="81" pos:column="40">"SectionName2"</lit:literal></expr></argument>, <argument><expr><lambda><name pos:line="81" pos:column="56">innerSection</name> <op:operator pos:line="81" pos:column="69">=&gt;</op:operator>
			<block pos:line="82" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="83" pos:column="33">innerSection</name><op:operator pos:line="83" pos:column="45">.</op:operator><name pos:line="83" pos:column="46">AddRow</name></name><argument_list pos:line="83" pos:column="52">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="84" pos:column="33">innerSection</name><op:operator pos:line="84" pos:column="45">.</op:operator><name pos:line="84" pos:column="46">AddRow</name></name><argument_list pos:line="84" pos:column="52">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="85" pos:column="33">innerSection</name><op:operator pos:line="85" pos:column="45">.</op:operator><name pos:line="85" pos:column="46">AddRow</name></name><argument_list pos:line="85" pos:column="52">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="86" pos:column="33">rows</name> <op:operator pos:line="86" pos:column="38">=</op:operator> <call><name><name pos:line="86" pos:column="40">innerSection</name><op:operator pos:line="86" pos:column="52">.</op:operator><name pos:line="86" pos:column="53">Build</name></name><argument_list pos:line="86" pos:column="58">()</argument_list></call></expr>;</expr_stmt>
			}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name pos:line="89" pos:column="25">Assert</name><op:operator pos:line="89" pos:column="31">.</op:operator><name pos:line="89" pos:column="32">Equal</name></name><argument_list pos:line="89" pos:column="37">(<argument><expr><lit:literal type="number" pos:line="89" pos:column="38">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="89" pos:column="41">Plugin</name><op:operator pos:line="89" pos:column="47">.</op:operator><name pos:line="89" pos:column="48">Rows</name><op:operator pos:line="89" pos:column="52">.</op:operator><name pos:line="89" pos:column="53">Count</name></name><argument_list pos:line="89" pos:column="58">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="90" pos:column="25">Assert</name><op:operator pos:line="90" pos:column="31">.</op:operator><name pos:line="90" pos:column="32">Equal</name></name><argument_list pos:line="90" pos:column="37">(<argument><expr><lit:literal type="number" pos:line="90" pos:column="38">2</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="90" pos:column="41">Plugin</name><op:operator pos:line="90" pos:column="47">.</op:operator><name pos:line="90" pos:column="48">Rows</name><op:operator pos:line="90" pos:column="52">.</op:operator><name pos:line="90" pos:column="53">Single</name></name><argument_list pos:line="90" pos:column="59">()</argument_list></call><op:operator pos:line="90" pos:column="61">.</op:operator><call><name><name pos:line="90" pos:column="62">Columns</name><op:operator pos:line="90" pos:column="69">.</op:operator><name pos:line="90" pos:column="70">Count</name></name><argument_list pos:line="90" pos:column="75">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="91" pos:column="25">Assert</name><op:operator pos:line="91" pos:column="31">.</op:operator><name pos:line="91" pos:column="32">Equal</name></name><argument_list pos:line="91" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="91" pos:column="38">"*SectionName2*"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="91" pos:column="56">Plugin</name><op:operator pos:line="91" pos:column="62">.</op:operator><name pos:line="91" pos:column="63">Rows</name><op:operator pos:line="91" pos:column="67">.</op:operator><name pos:line="91" pos:column="68">Single</name></name><argument_list pos:line="91" pos:column="74">()</argument_list></call><op:operator pos:line="91" pos:column="76">.</op:operator><call><name><name pos:line="91" pos:column="77">Columns</name><op:operator pos:line="91" pos:column="84">.</op:operator><name pos:line="91" pos:column="85">First</name></name><argument_list pos:line="91" pos:column="90">()</argument_list></call><op:operator pos:line="91" pos:column="92">.</op:operator><name pos:line="91" pos:column="93">Data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="93" pos:column="13">var</name></type> <name pos:line="93" pos:column="17">buildResult</name> <init pos:line="93" pos:column="29">= <expr><name pos:line="93" pos:column="31">rows</name> <op:operator pos:line="93" pos:column="36">as</op:operator> <name><name pos:line="93" pos:column="39">IEnumerable</name><argument_list pos:line="93" pos:column="50">&lt;<argument><name pos:line="93" pos:column="51">object</name></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="94" pos:column="13">Assert</name><op:operator pos:line="94" pos:column="19">.</op:operator><name pos:line="94" pos:column="20">Equal</name></name><argument_list pos:line="94" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="94" pos:column="26">3</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="94" pos:column="29">buildResult</name><op:operator pos:line="94" pos:column="40">.</op:operator><name pos:line="94" pos:column="41">Count</name></name><argument_list pos:line="94" pos:column="46">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<decl_stmt><decl><type><specifier pos:line="97" pos:column="17">private</specifier> <name pos:line="97" pos:column="25">TabSection</name></type> <name pos:line="97" pos:column="36">Plugin</name> <block pos:line="97" pos:column="43">{ <function_decl><name pos:line="97" pos:column="45">get</name>;</function_decl> <function_decl><name pos:line="97" pos:column="50">set</name>;</function_decl> }</block></decl></decl_stmt>

		<constructor><specifier pos:line="99" pos:column="17">public</specifier> <name pos:line="99" pos:column="24">PluginShould</name><parameter_list pos:line="99" pos:column="36">()</parameter_list>
		<block pos:line="100" pos:column="17">{
			<expr_stmt><expr><name pos:line="101" pos:column="25">Plugin</name> <op:operator pos:line="101" pos:column="32">=</op:operator> <call><name><name pos:line="101" pos:column="34">Glimpse</name><op:operator pos:line="101" pos:column="41">.</op:operator><name pos:line="101" pos:column="42">Core</name><op:operator pos:line="101" pos:column="46">.</op:operator><name pos:line="101" pos:column="47">Tab</name><op:operator pos:line="101" pos:column="50">.</op:operator><name pos:line="101" pos:column="51">Assist</name><op:operator pos:line="101" pos:column="57">.</op:operator><name pos:line="101" pos:column="58">Plugin</name><op:operator pos:line="101" pos:column="64">.</op:operator><name pos:line="101" pos:column="65">Create</name></name><argument_list pos:line="101" pos:column="71">()</argument_list></call></expr>;</expr_stmt>
		}</block></constructor>
	}</block></class>
}</block></namespace></unit>
