<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Core\Framework\ResourceParametersShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Glimpse</name><op:operator pos:line="3" pos:column="14">.</op:operator><name pos:line="3" pos:column="15">Test</name><op:operator pos:line="3" pos:column="19">.</op:operator><name pos:line="3" pos:column="20">Core</name><op:operator pos:line="3" pos:column="24">.</op:operator><name pos:line="3" pos:column="25">Tester</name></name>;</using>
<using pos:line="4" pos:column="1">using <name pos:line="4" pos:column="7">Xunit</name>;</using>

<namespace pos:line="6" pos:column="1">namespace <name><name pos:line="6" pos:column="11">Glimpse</name><op:operator pos:line="6" pos:column="18">.</op:operator><name pos:line="6" pos:column="19">Test</name><op:operator pos:line="6" pos:column="23">.</op:operator><name pos:line="6" pos:column="24">Core</name><op:operator pos:line="6" pos:column="28">.</op:operator><name pos:line="6" pos:column="29">Framework</name></name>
<block pos:line="7" pos:column="1">{
    <class><specifier pos:line="8" pos:column="5">public</specifier> class <name pos:line="8" pos:column="18">ResourceParametersShould</name><super pos:line="8" pos:column="42">:<name pos:line="8" pos:column="43">IDisposable</name></super>
    <block pos:line="9" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="10" pos:column="9">private</specifier> <name pos:line="10" pos:column="17">ResourceParametersTester</name></type> <name pos:line="10" pos:column="42">tester</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="12" pos:column="9">public</specifier> <name pos:line="12" pos:column="16">ResourceParametersTester</name></type> <name pos:line="12" pos:column="41">ResourceParameters</name>
        <block pos:line="13" pos:column="9">{
            <function><name pos:line="14" pos:column="13">get</name> <block pos:line="14" pos:column="17">{ <return pos:line="14" pos:column="19">return <expr><name pos:line="14" pos:column="26">tester</name> <op:operator pos:line="14" pos:column="33">??</op:operator> <op:operator pos:line="14" pos:column="36">(</op:operator><name pos:line="14" pos:column="37">tester</name> <op:operator pos:line="14" pos:column="44">=</op:operator> <call><name><name pos:line="14" pos:column="46">ResourceParametersTester</name><op:operator pos:line="14" pos:column="70">.</op:operator><name pos:line="14" pos:column="71">Create</name></name><argument_list pos:line="14" pos:column="77">()</argument_list></call><op:operator pos:line="14" pos:column="79">)</op:operator></expr>;</return> }</block></function>
            <function><name pos:line="15" pos:column="13">set</name> <block pos:line="15" pos:column="17">{ <expr_stmt><expr><name pos:line="15" pos:column="19">tester</name> <op:operator pos:line="15" pos:column="26">=</op:operator> <name pos:line="15" pos:column="28">value</name></expr>;</expr_stmt> }</block></function>
        }</block></decl></decl_stmt>

        <function><type><specifier pos:line="18" pos:column="9">public</specifier> <name pos:line="18" pos:column="16">void</name></type> <name pos:line="18" pos:column="21">Dispose</name><parameter_list pos:line="18" pos:column="28">()</parameter_list>
        <block pos:line="19" pos:column="9">{
            <expr_stmt><expr><name pos:line="20" pos:column="13">ResourceParameters</name> <op:operator pos:line="20" pos:column="32">=</op:operator> <name pos:line="20" pos:column="34">null</name></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="23" pos:column="9">[<expr><name pos:line="23" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="24" pos:column="9">public</specifier> <name pos:line="24" pos:column="16">void</name></type> <name pos:line="24" pos:column="21">ShouldLeverageNamedParamsFirst</name><parameter_list pos:line="24" pos:column="51">()</parameter_list>
        <block pos:line="25" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="26" pos:column="13">var</name></type> <name pos:line="26" pos:column="17">namedParams</name> <init pos:line="26" pos:column="29">= <expr><op:operator pos:line="26" pos:column="31">new</op:operator> <name><name pos:line="26" pos:column="35">Dictionary</name><argument_list pos:line="26" pos:column="45">&lt;<argument><name pos:line="26" pos:column="46">string</name></argument>, <argument><name pos:line="26" pos:column="54">string</name></argument>&gt;</argument_list></name>
                                  <block pos:line="27" pos:column="35">{
                                      <expr><block pos:line="28" pos:column="39">{<expr><lit:literal type="string" pos:line="28" pos:column="40">"key"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="28" pos:column="47">"value"</lit:literal></expr>}</block></expr>
                                  }</block></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name><name pos:line="31" pos:column="13">ResourceParameters</name><op:operator pos:line="31" pos:column="31">.</op:operator><name pos:line="31" pos:column="32">NamedParameters</name></name> <op:operator pos:line="31" pos:column="48">=</op:operator> <name pos:line="31" pos:column="50">namedParams</name></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="33" pos:column="13">Assert</name><op:operator pos:line="33" pos:column="19">.</op:operator><name pos:line="33" pos:column="20">Equal</name></name><argument_list pos:line="33" pos:column="25">(<argument><expr><name pos:line="33" pos:column="26">namedParams</name></expr></argument>, <argument><expr><call><name><name pos:line="33" pos:column="39">ResourceParameters</name><op:operator pos:line="33" pos:column="57">.</op:operator><name pos:line="33" pos:column="58">GetParametersFor</name></name><argument_list pos:line="33" pos:column="74">(<argument><expr><name><name pos:line="33" pos:column="75">ResourceParameters</name><op:operator pos:line="33" pos:column="93">.</op:operator><name pos:line="33" pos:column="94">ResourceMock</name><op:operator pos:line="33" pos:column="106">.</op:operator><name pos:line="33" pos:column="107">Object</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="36" pos:column="9">[<expr><name pos:line="36" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="37" pos:column="9">public</specifier> <name pos:line="37" pos:column="16">void</name></type> <name pos:line="37" pos:column="21">ShouldLeverageOrderedParamsSecond</name><parameter_list pos:line="37" pos:column="54">()</parameter_list>
        <block pos:line="38" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="39" pos:column="13">var</name></type> <name pos:line="39" pos:column="17">orderedParams</name> <init pos:line="39" pos:column="31">= <expr><op:operator pos:line="39" pos:column="33">new</op:operator><index pos:line="39" pos:column="36">[]</index> <block pos:line="39" pos:column="39">{<expr><lit:literal type="string" pos:line="39" pos:column="40">"1"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="39" pos:column="45">"2"</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name><name pos:line="41" pos:column="13">ResourceParameters</name><op:operator pos:line="41" pos:column="31">.</op:operator><name pos:line="41" pos:column="32">OrderedParameters</name></name> <op:operator pos:line="41" pos:column="50">=</op:operator> <name pos:line="41" pos:column="52">orderedParams</name></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="43" pos:column="13">var</name></type> <name pos:line="43" pos:column="17">result</name> <init pos:line="43" pos:column="24">= <expr><call><name><name pos:line="43" pos:column="26">ResourceParameters</name><op:operator pos:line="43" pos:column="44">.</op:operator><name pos:line="43" pos:column="45">GetParametersFor</name></name><argument_list pos:line="43" pos:column="61">(<argument><expr><name><name pos:line="43" pos:column="62">ResourceParameters</name><op:operator pos:line="43" pos:column="80">.</op:operator><name pos:line="43" pos:column="81">ResourceMock</name><op:operator pos:line="43" pos:column="93">.</op:operator><name pos:line="43" pos:column="94">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="45" pos:column="13">Assert</name><op:operator pos:line="45" pos:column="19">.</op:operator><name pos:line="45" pos:column="20">Equal</name></name><argument_list pos:line="45" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="45" pos:column="26">"1"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="45" pos:column="31">result</name><index pos:line="45" pos:column="37">[<expr><lit:literal type="string" pos:line="45" pos:column="38">"One"</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="46" pos:column="13">Assert</name><op:operator pos:line="46" pos:column="19">.</op:operator><name pos:line="46" pos:column="20">Equal</name></name><argument_list pos:line="46" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="46" pos:column="26">"2"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="31">result</name><index pos:line="46" pos:column="37">[<expr><lit:literal type="string" pos:line="46" pos:column="38">"Two"</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="47" pos:column="13">Assert</name><op:operator pos:line="47" pos:column="19">.</op:operator><name pos:line="47" pos:column="20">Equal</name></name><argument_list pos:line="47" pos:column="25">(<argument><expr><name pos:line="47" pos:column="26">null</name></expr></argument>, <argument><expr><name><name pos:line="47" pos:column="32">result</name><index pos:line="47" pos:column="38">[<expr><lit:literal type="string" pos:line="47" pos:column="39">"Three"</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="48" pos:column="13">Assert</name><op:operator pos:line="48" pos:column="19">.</op:operator><name pos:line="48" pos:column="20">Equal</name></name><argument_list pos:line="48" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="48" pos:column="26">3</lit:literal></expr></argument>, <argument><expr><name><name pos:line="48" pos:column="29">result</name><op:operator pos:line="48" pos:column="35">.</op:operator><name pos:line="48" pos:column="36">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="51" pos:column="9">[<expr><name pos:line="51" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="52" pos:column="9">public</specifier> <name pos:line="52" pos:column="16">void</name></type> <name pos:line="52" pos:column="21">ShouldReturnEmptyDictionaryWithNoInputParams</name><parameter_list pos:line="52" pos:column="65">()</parameter_list>
        <block pos:line="53" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="54" pos:column="13">var</name></type> <name pos:line="54" pos:column="17">result</name> <init pos:line="54" pos:column="24">= <expr><call><name><name pos:line="54" pos:column="26">ResourceParameters</name><op:operator pos:line="54" pos:column="44">.</op:operator><name pos:line="54" pos:column="45">GetParametersFor</name></name><argument_list pos:line="54" pos:column="61">(<argument><expr><name><name pos:line="54" pos:column="62">ResourceParameters</name><op:operator pos:line="54" pos:column="80">.</op:operator><name pos:line="54" pos:column="81">ResourceMock</name><op:operator pos:line="54" pos:column="93">.</op:operator><name pos:line="54" pos:column="94">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="56" pos:column="13">Assert</name><op:operator pos:line="56" pos:column="19">.</op:operator><name pos:line="56" pos:column="20">Equal</name></name><argument_list pos:line="56" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="56" pos:column="26">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="56" pos:column="29">result</name><op:operator pos:line="56" pos:column="35">.</op:operator><name pos:line="56" pos:column="36">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
