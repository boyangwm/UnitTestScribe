<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Core\Extensibility\ResourceEndpointConfigurationShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Glimpse</name><op:operator pos:line="3" pos:column="14">.</op:operator><name pos:line="3" pos:column="15">Core</name><op:operator pos:line="3" pos:column="19">.</op:operator><name pos:line="3" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Core</name><op:operator pos:line="4" pos:column="19">.</op:operator><name pos:line="4" pos:column="20">Framework</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Glimpse</name><op:operator pos:line="5" pos:column="14">.</op:operator><name pos:line="5" pos:column="15">Test</name><op:operator pos:line="5" pos:column="19">.</op:operator><name pos:line="5" pos:column="20">Core</name><op:operator pos:line="5" pos:column="24">.</op:operator><name pos:line="5" pos:column="25">TestDoubles</name></name>;</using>
<using pos:line="6" pos:column="1">using <name pos:line="6" pos:column="7">Moq</name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Moq</name><op:operator pos:line="7" pos:column="10">.</op:operator><name pos:line="7" pos:column="11">Protected</name></name>;</using>
<using pos:line="8" pos:column="1">using <name pos:line="8" pos:column="7">Xunit</name>;</using>

<namespace pos:line="10" pos:column="1">namespace <name><name pos:line="10" pos:column="11">Glimpse</name><op:operator pos:line="10" pos:column="18">.</op:operator><name pos:line="10" pos:column="19">Test</name><op:operator pos:line="10" pos:column="23">.</op:operator><name pos:line="10" pos:column="24">Core</name><op:operator pos:line="10" pos:column="28">.</op:operator><name pos:line="10" pos:column="29">Extensibility</name></name>
<block pos:line="11" pos:column="1">{
    <class><specifier pos:line="12" pos:column="5">public</specifier> class <name pos:line="12" pos:column="18">ResourceEndpointConfigurationShould</name> <super pos:line="12" pos:column="54">: <name pos:line="12" pos:column="56">IDisposable</name></super>
    <block pos:line="13" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="14" pos:column="9">private</specifier> <name pos:line="14" pos:column="17">ResourceEndpointConfiguration</name></type> <name pos:line="14" pos:column="47">endpointConfig</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="16" pos:column="9">public</specifier> <name pos:line="16" pos:column="16">ResourceEndpointConfiguration</name></type> <name pos:line="16" pos:column="46">EndpointConfig</name>
        <block pos:line="17" pos:column="9">{
            <function><name pos:line="18" pos:column="13">get</name> <block pos:line="18" pos:column="17">{ <return pos:line="18" pos:column="19">return <expr><name pos:line="18" pos:column="26">endpointConfig</name> <op:operator pos:line="18" pos:column="41">??</op:operator> <op:operator pos:line="18" pos:column="44">(</op:operator><name pos:line="18" pos:column="45">endpointConfig</name> <op:operator pos:line="18" pos:column="60">=</op:operator> <name><name pos:line="18" pos:column="62">EndpointConfigMock</name><op:operator pos:line="18" pos:column="80">.</op:operator><name pos:line="18" pos:column="81">Object</name></name><op:operator pos:line="18" pos:column="87">)</op:operator></expr>;</return> }</block></function>
            <function><name pos:line="19" pos:column="13">set</name> <block pos:line="19" pos:column="17">{ <expr_stmt><expr><name pos:line="19" pos:column="19">endpointConfig</name> <op:operator pos:line="19" pos:column="34">=</op:operator> <name pos:line="19" pos:column="36">value</name></expr>;</expr_stmt> }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="22" pos:column="9">private</specifier> <name><name pos:line="22" pos:column="17">Mock</name><argument_list pos:line="22" pos:column="21">&lt;<argument><name pos:line="22" pos:column="22">ResourceEndpointConfiguration</name></argument>&gt;</argument_list></name></type> <name pos:line="22" pos:column="53">endpointConfigMock</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="24" pos:column="9">public</specifier> <name><name pos:line="24" pos:column="16">Mock</name><argument_list pos:line="24" pos:column="20">&lt;<argument><name pos:line="24" pos:column="21">ResourceEndpointConfiguration</name></argument>&gt;</argument_list></name></type> <name pos:line="24" pos:column="52">EndpointConfigMock</name>
        <block pos:line="25" pos:column="9">{
            <function><name pos:line="26" pos:column="13">get</name>
            <block pos:line="27" pos:column="13">{
                <if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><name pos:line="28" pos:column="21">endpointConfigMock</name> <op:operator pos:line="28" pos:column="40">!=</op:operator> <name pos:line="28" pos:column="43">null</name></expr>)</condition><then pos:line="28" pos:column="48">
                    <return pos:line="29" pos:column="21">return <expr><name pos:line="29" pos:column="28">endpointConfigMock</name></expr>;</return></then></if>

                <decl_stmt><decl><type><name pos:line="31" pos:column="17">var</name></type> <name pos:line="31" pos:column="21">configMock</name> <init pos:line="31" pos:column="32">= <expr><op:operator pos:line="31" pos:column="34">new</op:operator> <call><name><name pos:line="31" pos:column="38">Mock</name><argument_list pos:line="31" pos:column="42">&lt;<argument><name pos:line="31" pos:column="43">ResourceEndpointConfiguration</name></argument>&gt;</argument_list></name><argument_list pos:line="31" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="32" pos:column="17">configMock</name><op:operator pos:line="32" pos:column="27">.</op:operator><name pos:line="32" pos:column="28">Protected</name></name><argument_list pos:line="32" pos:column="37">()</argument_list></call><op:operator pos:line="32" pos:column="39">.</op:operator><call><name><name pos:line="32" pos:column="40">Setup</name><argument_list pos:line="32" pos:column="45">&lt;<argument><name pos:line="32" pos:column="46">string</name></argument>&gt;</argument_list></name><argument_list pos:line="32" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="32" pos:column="54">"GenerateUriTemplate"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="32" pos:column="77">"resourceName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="32" pos:column="93">"~/Glimpse.axd"</lit:literal></expr></argument>,
                                                     <argument><expr><call><name><name pos:line="33" pos:column="54">ItExpr</name><op:operator pos:line="33" pos:column="60">.</op:operator><name><name pos:line="33" pos:column="61">IsAny</name><argument_list pos:line="33" pos:column="66">&lt;<argument><name><name pos:line="33" pos:column="67">IEnumerable</name><argument_list pos:line="33" pos:column="78">&lt;<argument><name pos:line="33" pos:column="79">ResourceParameterMetadata</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name><argument_list pos:line="33" pos:column="106">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="33" pos:column="110">ItExpr</name><op:operator pos:line="33" pos:column="116">.</op:operator><name><name pos:line="33" pos:column="117">IsAny</name><argument_list pos:line="33" pos:column="122">&lt;<argument><name pos:line="33" pos:column="123">ILogger</name></argument>&gt;</argument_list></name></name><argument_list pos:line="33" pos:column="131">()</argument_list></call></expr></argument>)</argument_list></call>
                    <op:operator pos:line="34" pos:column="21">.</op:operator><call><name pos:line="34" pos:column="22">Returns</name><argument_list pos:line="34" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="34" pos:column="30">"http://localhost/"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name pos:line="36" pos:column="17">endpointConfigMock</name> <op:operator pos:line="36" pos:column="36">=</op:operator> <name pos:line="36" pos:column="38">configMock</name></expr>;</expr_stmt>

                <return pos:line="38" pos:column="17">return <expr><name pos:line="38" pos:column="24">endpointConfigMock</name></expr>;</return>
            }</block></function>
            <function><name pos:line="40" pos:column="13">set</name> <block pos:line="40" pos:column="17">{ <expr_stmt><expr><name pos:line="40" pos:column="19">endpointConfigMock</name> <op:operator pos:line="40" pos:column="38">=</op:operator> <name pos:line="40" pos:column="40">value</name></expr>;</expr_stmt> }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="43" pos:column="9">private</specifier> <name><name pos:line="43" pos:column="17">Mock</name><argument_list pos:line="43" pos:column="21">&lt;<argument><name pos:line="43" pos:column="22">IResource</name></argument>&gt;</argument_list></name></type> <name pos:line="43" pos:column="33">resourceMock</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="45" pos:column="9">public</specifier> <name><name pos:line="45" pos:column="16">Mock</name><argument_list pos:line="45" pos:column="20">&lt;<argument><name pos:line="45" pos:column="21">IResource</name></argument>&gt;</argument_list></name></type> <name pos:line="45" pos:column="32">ResourceMock</name>
        <block pos:line="46" pos:column="9">{
            <function><name pos:line="47" pos:column="13">get</name>
            <block pos:line="48" pos:column="13">{
                <if pos:line="49" pos:column="17">if <condition pos:line="49" pos:column="20">(<expr><name pos:line="49" pos:column="21">resourceMock</name> <op:operator pos:line="49" pos:column="34">!=</op:operator> <name pos:line="49" pos:column="37">null</name></expr>)</condition><then pos:line="49" pos:column="42">
                    <return pos:line="50" pos:column="21">return <expr><name pos:line="50" pos:column="28">resourceMock</name></expr>;</return></then></if>

                <decl_stmt><decl><type><name pos:line="52" pos:column="17">var</name></type> <name pos:line="52" pos:column="21">rm</name> <init pos:line="52" pos:column="24">= <expr><op:operator pos:line="52" pos:column="26">new</op:operator> <call><name><name pos:line="52" pos:column="30">Mock</name><argument_list pos:line="52" pos:column="34">&lt;<argument><name pos:line="52" pos:column="35">IResource</name></argument>&gt;</argument_list></name><argument_list pos:line="52" pos:column="45">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="53" pos:column="17">rm</name><op:operator pos:line="53" pos:column="19">.</op:operator><name pos:line="53" pos:column="20">Setup</name></name><argument_list pos:line="53" pos:column="25">(<argument><expr><lambda><name pos:line="53" pos:column="26">r</name> <op:operator pos:line="53" pos:column="28">=&gt;</op:operator> <name><name pos:line="53" pos:column="31">r</name><op:operator pos:line="53" pos:column="32">.</op:operator><name pos:line="53" pos:column="33">Parameters</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="53" pos:column="44">.</op:operator><call><name pos:line="53" pos:column="45">Returns</name><argument_list pos:line="53" pos:column="52">(<argument><expr><op:operator pos:line="53" pos:column="53">new</op:operator> <name><name pos:line="53" pos:column="57">List</name><argument_list pos:line="53" pos:column="61">&lt;<argument><name pos:line="53" pos:column="62">ResourceParameterMetadata</name></argument>&gt;</argument_list></name> <block pos:line="53" pos:column="89">{<expr><op:operator pos:line="53" pos:column="90">new</op:operator> <call><name pos:line="53" pos:column="94">ResourceParameterMetadata</name><argument_list pos:line="53" pos:column="119">(<argument><expr><lit:literal type="string" pos:line="53" pos:column="120">"One"</lit:literal></expr></argument>)</argument_list></call></expr><op:operator pos:line="53" pos:column="126">,</op:operator> <expr><op:operator pos:line="53" pos:column="128">new</op:operator> <call><name pos:line="53" pos:column="132">ResourceParameterMetadata</name><argument_list pos:line="53" pos:column="157">(<argument><expr><lit:literal type="string" pos:line="53" pos:column="158">"Two"</lit:literal></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="54" pos:column="17">rm</name><op:operator pos:line="54" pos:column="19">.</op:operator><name pos:line="54" pos:column="20">Setup</name></name><argument_list pos:line="54" pos:column="25">(<argument><expr><lambda><name pos:line="54" pos:column="26">r</name> <op:operator pos:line="54" pos:column="28">=&gt;</op:operator> <name><name pos:line="54" pos:column="31">r</name><op:operator pos:line="54" pos:column="32">.</op:operator><name pos:line="54" pos:column="33">Name</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="54" pos:column="38">.</op:operator><call><name pos:line="54" pos:column="39">Returns</name><argument_list pos:line="54" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="54" pos:column="47">"resourceName"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name pos:line="56" pos:column="17">resourceMock</name> <op:operator pos:line="56" pos:column="30">=</op:operator> <name pos:line="56" pos:column="32">rm</name></expr>;</expr_stmt>
                <return pos:line="57" pos:column="17">return <expr><name pos:line="57" pos:column="24">resourceMock</name></expr>;</return>
            }</block></function>
            <function><name pos:line="59" pos:column="13">set</name> <block pos:line="59" pos:column="17">{ <expr_stmt><expr><name pos:line="59" pos:column="19">resourceMock</name> <op:operator pos:line="59" pos:column="32">=</op:operator> <name pos:line="59" pos:column="34">value</name></expr>;</expr_stmt> }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="62" pos:column="9">private</specifier> <name><name pos:line="62" pos:column="17">Mock</name><argument_list pos:line="62" pos:column="21">&lt;<argument><name pos:line="62" pos:column="22">ILogger</name></argument>&gt;</argument_list></name></type> <name pos:line="62" pos:column="31">loggerMock</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="64" pos:column="9">public</specifier> <name><name pos:line="64" pos:column="16">Mock</name><argument_list pos:line="64" pos:column="20">&lt;<argument><name pos:line="64" pos:column="21">ILogger</name></argument>&gt;</argument_list></name></type> <name pos:line="64" pos:column="30">LoggerMock</name>
        <block pos:line="65" pos:column="9">{
            <function><name pos:line="66" pos:column="13">get</name>
            <block pos:line="67" pos:column="13">{
                <if pos:line="68" pos:column="17">if <condition pos:line="68" pos:column="20">(<expr><name pos:line="68" pos:column="21">loggerMock</name> <op:operator pos:line="68" pos:column="32">!=</op:operator> <name pos:line="68" pos:column="35">null</name></expr>)</condition><then pos:line="68" pos:column="40">
                    <return pos:line="69" pos:column="21">return <expr><name pos:line="69" pos:column="28">loggerMock</name></expr>;</return></then></if>

                <expr_stmt><expr><name pos:line="71" pos:column="17">loggerMock</name> <op:operator pos:line="71" pos:column="28">=</op:operator> <op:operator pos:line="71" pos:column="30">new</op:operator> <call><name><name pos:line="71" pos:column="34">Mock</name><argument_list pos:line="71" pos:column="38">&lt;<argument><name pos:line="71" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="71" pos:column="47">()</argument_list></call></expr>;</expr_stmt>

                <return pos:line="73" pos:column="17">return <expr><name pos:line="73" pos:column="24">loggerMock</name></expr>;</return>
            }</block></function>
            <function><name pos:line="75" pos:column="13">set</name> <block pos:line="75" pos:column="17">{ <expr_stmt><expr><name pos:line="75" pos:column="19">loggerMock</name> <op:operator pos:line="75" pos:column="30">=</op:operator> <name pos:line="75" pos:column="32">value</name></expr>;</expr_stmt> }</block></function>
        }</block></decl></decl_stmt>

        <function><type><specifier pos:line="78" pos:column="9">public</specifier> <name pos:line="78" pos:column="16">void</name></type> <name pos:line="78" pos:column="21">Dispose</name><parameter_list pos:line="78" pos:column="28">()</parameter_list>
        <block pos:line="79" pos:column="9">{
            <expr_stmt><expr><name pos:line="80" pos:column="13">EndpointConfig</name> <op:operator pos:line="80" pos:column="28">=</op:operator> <name pos:line="80" pos:column="30">null</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="81" pos:column="13">EndpointConfigMock</name> <op:operator pos:line="81" pos:column="32">=</op:operator> <name pos:line="81" pos:column="34">null</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="82" pos:column="13">ResourceMock</name> <op:operator pos:line="82" pos:column="26">=</op:operator> <name pos:line="82" pos:column="28">null</name></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="85" pos:column="9">[<expr><name pos:line="85" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="86" pos:column="9">public</specifier> <name pos:line="86" pos:column="16">void</name></type> <name pos:line="86" pos:column="21">GenerateAUri</name><parameter_list pos:line="86" pos:column="33">()</parameter_list>
        <block pos:line="87" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="88" pos:column="13">Assert</name><op:operator pos:line="88" pos:column="19">.</op:operator><name pos:line="88" pos:column="20">Equal</name></name><argument_list pos:line="88" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="88" pos:column="26">""</lit:literal></expr></argument>,
                         <argument><expr><call><name><name pos:line="89" pos:column="26">EndpointConfig</name><op:operator pos:line="89" pos:column="40">.</op:operator><name pos:line="89" pos:column="41">GenerateUriTemplate</name></name><argument_list pos:line="89" pos:column="60">(<argument><expr><name><name pos:line="89" pos:column="61">ResourceMock</name><op:operator pos:line="89" pos:column="73">.</op:operator><name pos:line="89" pos:column="74">Object</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="89" pos:column="82">""</lit:literal></expr></argument>, <argument><expr><name><name pos:line="89" pos:column="86">LoggerMock</name><op:operator pos:line="89" pos:column="96">.</op:operator><name pos:line="89" pos:column="97">Object</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="92" pos:column="9">[<expr><name pos:line="92" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="93" pos:column="9">public</specifier> <name pos:line="93" pos:column="16">void</name></type> <name pos:line="93" pos:column="21">ReturnEmptyStringWithNullChildResult</name><parameter_list pos:line="93" pos:column="57">()</parameter_list>
        <block pos:line="94" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="95" pos:column="13">EndpointConfigMock</name><op:operator pos:line="95" pos:column="31">.</op:operator><name pos:line="95" pos:column="32">Protected</name></name><argument_list pos:line="95" pos:column="41">()</argument_list></call><op:operator pos:line="95" pos:column="43">.</op:operator><call><name><name pos:line="95" pos:column="44">Setup</name><argument_list pos:line="95" pos:column="49">&lt;<argument><name pos:line="95" pos:column="50">string</name></argument>&gt;</argument_list></name><argument_list pos:line="95" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="95" pos:column="58">"GenerateUriTemplate"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="95" pos:column="81">"resourceName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="95" pos:column="97">"~/Glimpse.axd"</lit:literal></expr></argument>,
                                                         <argument><expr><call><name><name pos:line="96" pos:column="58">ItExpr</name><op:operator pos:line="96" pos:column="64">.</op:operator><name><name pos:line="96" pos:column="65">IsAny</name><argument_list pos:line="96" pos:column="70">&lt;<argument><name><name pos:line="96" pos:column="71">IEnumerable</name><argument_list pos:line="96" pos:column="82">&lt;<argument><name pos:line="96" pos:column="83">ResourceParameterMetadata</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name><argument_list pos:line="96" pos:column="110">()</argument_list></call></expr></argument>,
                                                         <argument><expr><call><name><name pos:line="97" pos:column="58">ItExpr</name><op:operator pos:line="97" pos:column="64">.</op:operator><name><name pos:line="97" pos:column="65">IsAny</name><argument_list pos:line="97" pos:column="70">&lt;<argument><name pos:line="97" pos:column="71">ILogger</name></argument>&gt;</argument_list></name></name><argument_list pos:line="97" pos:column="79">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="97" pos:column="82">.</op:operator><call><name><name pos:line="97" pos:column="83">Returns</name><argument_list pos:line="97" pos:column="90">&lt;<argument><name pos:line="97" pos:column="91">string</name></argument>&gt;</argument_list></name><argument_list pos:line="97" pos:column="98">(<argument><expr><name pos:line="97" pos:column="99">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="99" pos:column="13">Assert</name><op:operator pos:line="99" pos:column="19">.</op:operator><name pos:line="99" pos:column="20">Equal</name></name><argument_list pos:line="99" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="99" pos:column="26">""</lit:literal></expr></argument>,
                         <argument><expr><call><name><name pos:line="100" pos:column="26">EndpointConfig</name><op:operator pos:line="100" pos:column="40">.</op:operator><name pos:line="100" pos:column="41">GenerateUriTemplate</name></name><argument_list pos:line="100" pos:column="60">(<argument><expr><name><name pos:line="100" pos:column="61">ResourceMock</name><op:operator pos:line="100" pos:column="73">.</op:operator><name pos:line="100" pos:column="74">Object</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="100" pos:column="82">""</lit:literal></expr></argument>, <argument><expr><name><name pos:line="100" pos:column="86">LoggerMock</name><op:operator pos:line="100" pos:column="96">.</op:operator><name pos:line="100" pos:column="97">Object</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="103" pos:column="9">[<expr><name pos:line="103" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="104" pos:column="9">public</specifier> <name pos:line="104" pos:column="16">void</name></type> <name pos:line="104" pos:column="21">PassesPlaceholderValuesWithoutMatches</name><parameter_list pos:line="104" pos:column="58">()</parameter_list>
        <block pos:line="105" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="106" pos:column="13">EndpointConfig</name><op:operator pos:line="106" pos:column="27">.</op:operator><name pos:line="106" pos:column="28">GenerateUriTemplate</name></name><argument_list pos:line="106" pos:column="47">(<argument><expr><name><name pos:line="106" pos:column="48">ResourceMock</name><op:operator pos:line="106" pos:column="60">.</op:operator><name pos:line="106" pos:column="61">Object</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="106" pos:column="69">"~/Glimpse.axd"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="106" pos:column="86">LoggerMock</name><op:operator pos:line="106" pos:column="96">.</op:operator><name pos:line="106" pos:column="97">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="108" pos:column="13">EndpointConfigMock</name><op:operator pos:line="108" pos:column="31">.</op:operator><name pos:line="108" pos:column="32">Protected</name></name><argument_list pos:line="108" pos:column="41">()</argument_list></call><op:operator pos:line="108" pos:column="43">.</op:operator><call><name><name pos:line="108" pos:column="44">Verify</name><argument_list pos:line="108" pos:column="50">&lt;<argument><name pos:line="108" pos:column="51">string</name></argument>&gt;</argument_list></name><argument_list pos:line="108" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="108" pos:column="59">"GenerateUriTemplate"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="108" pos:column="82">Times</name><op:operator pos:line="108" pos:column="87">.</op:operator><name pos:line="108" pos:column="88">Once</name></name><argument_list pos:line="108" pos:column="92">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="108" pos:column="96">"resourceName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="108" pos:column="112">"~/Glimpse.axd"</lit:literal></expr></argument>,
                                                          <argument><expr><call><name><name pos:line="109" pos:column="59">ItExpr</name><op:operator pos:line="109" pos:column="65">.</op:operator><name><name pos:line="109" pos:column="66">IsAny</name><argument_list pos:line="109" pos:column="71">&lt;<argument><name><name pos:line="109" pos:column="72">IEnumerable</name><argument_list pos:line="109" pos:column="83">&lt;<argument><name pos:line="109" pos:column="84">ResourceParameterMetadata</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name><argument_list pos:line="109" pos:column="111">()</argument_list></call></expr></argument>,
                                                          <argument><expr><call><name><name pos:line="110" pos:column="59">ItExpr</name><op:operator pos:line="110" pos:column="65">.</op:operator><name><name pos:line="110" pos:column="66">IsAny</name><argument_list pos:line="110" pos:column="71">&lt;<argument><name pos:line="110" pos:column="72">ILogger</name></argument>&gt;</argument_list></name></name><argument_list pos:line="110" pos:column="80">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="113" pos:column="9">[<expr><name pos:line="113" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="114" pos:column="9">public</specifier> <name pos:line="114" pos:column="16">void</name></type> <name pos:line="114" pos:column="21">PassesValuesWithMatches</name><parameter_list pos:line="114" pos:column="44">()</parameter_list>
        <block pos:line="115" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="116" pos:column="13">EndpointConfig</name><op:operator pos:line="116" pos:column="27">.</op:operator><name pos:line="116" pos:column="28">GenerateUriTemplate</name></name><argument_list pos:line="116" pos:column="47">(<argument><expr><name><name pos:line="116" pos:column="48">ResourceMock</name><op:operator pos:line="116" pos:column="60">.</op:operator><name pos:line="116" pos:column="61">Object</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="116" pos:column="69">"~/Glimpse.axd"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="116" pos:column="86">LoggerMock</name><op:operator pos:line="116" pos:column="96">.</op:operator><name pos:line="116" pos:column="97">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="118" pos:column="13">EndpointConfigMock</name><op:operator pos:line="118" pos:column="31">.</op:operator><name pos:line="118" pos:column="32">Protected</name></name><argument_list pos:line="118" pos:column="41">()</argument_list></call><op:operator pos:line="118" pos:column="43">.</op:operator><call><name><name pos:line="118" pos:column="44">Verify</name><argument_list pos:line="118" pos:column="50">&lt;<argument><name pos:line="118" pos:column="51">string</name></argument>&gt;</argument_list></name><argument_list pos:line="118" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="118" pos:column="59">"GenerateUriTemplate"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="118" pos:column="82">Times</name><op:operator pos:line="118" pos:column="87">.</op:operator><name pos:line="118" pos:column="88">Once</name></name><argument_list pos:line="118" pos:column="92">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="118" pos:column="96">"resourceName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="118" pos:column="112">"~/Glimpse.axd"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="118" pos:column="129">ItExpr</name><op:operator pos:line="118" pos:column="135">.</op:operator><name><name pos:line="118" pos:column="136">IsAny</name><argument_list pos:line="118" pos:column="141">&lt;<argument><name><name pos:line="118" pos:column="142">IEnumerable</name><argument_list pos:line="118" pos:column="153">&lt;<argument><name pos:line="118" pos:column="154">ResourceParameterMetadata</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name><argument_list pos:line="118" pos:column="181">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="118" pos:column="185">ItExpr</name><op:operator pos:line="118" pos:column="191">.</op:operator><name><name pos:line="118" pos:column="192">IsAny</name><argument_list pos:line="118" pos:column="197">&lt;<argument><name pos:line="118" pos:column="198">ILogger</name></argument>&gt;</argument_list></name></name><argument_list pos:line="118" pos:column="206">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="121" pos:column="9">[<expr><name pos:line="121" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="122" pos:column="9">public</specifier> <name pos:line="122" pos:column="16">void</name></type> <name pos:line="122" pos:column="21">ReturnEmptyStringWithChildGenerateUriException</name><parameter_list pos:line="122" pos:column="67">()</parameter_list>
        <block pos:line="123" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="124" pos:column="13">EndpointConfigMock</name><op:operator pos:line="124" pos:column="31">.</op:operator><name pos:line="124" pos:column="32">Protected</name></name><argument_list pos:line="124" pos:column="41">()</argument_list></call><op:operator pos:line="124" pos:column="43">.</op:operator><call><name><name pos:line="124" pos:column="44">Setup</name><argument_list pos:line="124" pos:column="49">&lt;<argument><name pos:line="124" pos:column="50">string</name></argument>&gt;</argument_list></name><argument_list pos:line="124" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="124" pos:column="58">"GenerateUriTemplate"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="124" pos:column="81">ItExpr</name><op:operator pos:line="124" pos:column="87">.</op:operator><name><name pos:line="124" pos:column="88">IsAny</name><argument_list pos:line="124" pos:column="93">&lt;<argument><name pos:line="124" pos:column="94">string</name></argument>&gt;</argument_list></name></name><argument_list pos:line="124" pos:column="101">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="124" pos:column="105">"~/Glimpse.axd"</lit:literal></expr></argument>,
                                                         <argument><expr><call><name><name pos:line="125" pos:column="58">ItExpr</name><op:operator pos:line="125" pos:column="64">.</op:operator><name><name pos:line="125" pos:column="65">IsAny</name><argument_list pos:line="125" pos:column="70">&lt;<argument><name><name pos:line="125" pos:column="71">IEnumerable</name><argument_list pos:line="125" pos:column="82">&lt;<argument><name pos:line="125" pos:column="83">ResourceParameterMetadata</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name><argument_list pos:line="125" pos:column="110">()</argument_list></call></expr></argument>,
                                                         <argument><expr><call><name><name pos:line="126" pos:column="58">ItExpr</name><op:operator pos:line="126" pos:column="64">.</op:operator><name><name pos:line="126" pos:column="65">IsAny</name><argument_list pos:line="126" pos:column="70">&lt;<argument><name pos:line="126" pos:column="71">ILogger</name></argument>&gt;</argument_list></name></name><argument_list pos:line="126" pos:column="79">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="126" pos:column="82">.</op:operator><call><name><name pos:line="126" pos:column="83">Throws</name><argument_list pos:line="126" pos:column="89">&lt;<argument><name pos:line="126" pos:column="90">DummyException</name></argument>&gt;</argument_list></name><argument_list pos:line="126" pos:column="105">()</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="128" pos:column="13">var</name></type> <name pos:line="128" pos:column="17">result</name> <init pos:line="128" pos:column="24">= <expr><call><name><name pos:line="128" pos:column="26">EndpointConfig</name><op:operator pos:line="128" pos:column="40">.</op:operator><name pos:line="128" pos:column="41">GenerateUriTemplate</name></name><argument_list pos:line="128" pos:column="60">(<argument><expr><name><name pos:line="128" pos:column="61">ResourceMock</name><op:operator pos:line="128" pos:column="73">.</op:operator><name pos:line="128" pos:column="74">Object</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="128" pos:column="82">"~/Glimpse.axd"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="128" pos:column="99">LoggerMock</name><op:operator pos:line="128" pos:column="109">.</op:operator><name pos:line="128" pos:column="110">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="130" pos:column="13">EndpointConfigMock</name><op:operator pos:line="130" pos:column="31">.</op:operator><name pos:line="130" pos:column="32">Protected</name></name><argument_list pos:line="130" pos:column="41">()</argument_list></call><op:operator pos:line="130" pos:column="43">.</op:operator><call><name><name pos:line="130" pos:column="44">Verify</name><argument_list pos:line="130" pos:column="50">&lt;<argument><name pos:line="130" pos:column="51">string</name></argument>&gt;</argument_list></name><argument_list pos:line="130" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="130" pos:column="59">"GenerateUriTemplate"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="130" pos:column="82">Times</name><op:operator pos:line="130" pos:column="87">.</op:operator><name pos:line="130" pos:column="88">Once</name></name><argument_list pos:line="130" pos:column="92">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="130" pos:column="96">"resourceName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="130" pos:column="112">"~/Glimpse.axd"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="130" pos:column="129">ItExpr</name><op:operator pos:line="130" pos:column="135">.</op:operator><name><name pos:line="130" pos:column="136">IsAny</name><argument_list pos:line="130" pos:column="141">&lt;<argument><name><name pos:line="130" pos:column="142">IEnumerable</name><argument_list pos:line="130" pos:column="153">&lt;<argument><name pos:line="130" pos:column="154">ResourceParameterMetadata</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name><argument_list pos:line="130" pos:column="181">()</argument_list></call></expr></argument>,
                                                          <argument><expr><call><name><name pos:line="131" pos:column="59">ItExpr</name><op:operator pos:line="131" pos:column="65">.</op:operator><name><name pos:line="131" pos:column="66">IsAny</name><argument_list pos:line="131" pos:column="71">&lt;<argument><name pos:line="131" pos:column="72">ILogger</name></argument>&gt;</argument_list></name></name><argument_list pos:line="131" pos:column="80">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="132" pos:column="13">LoggerMock</name><op:operator pos:line="132" pos:column="23">.</op:operator><name pos:line="132" pos:column="24">Verify</name></name><argument_list pos:line="132" pos:column="30">(<argument><expr><lambda><name pos:line="132" pos:column="31">l</name> <op:operator pos:line="132" pos:column="33">=&gt;</op:operator> <call><name><name pos:line="132" pos:column="36">l</name><op:operator pos:line="132" pos:column="37">.</op:operator><name pos:line="132" pos:column="38">Error</name></name><argument_list pos:line="132" pos:column="43">(<argument><expr><call><name><name pos:line="132" pos:column="44">It</name><op:operator pos:line="132" pos:column="46">.</op:operator><name><name pos:line="132" pos:column="47">IsAny</name><argument_list pos:line="132" pos:column="52">&lt;<argument><name pos:line="132" pos:column="53">string</name></argument>&gt;</argument_list></name></name><argument_list pos:line="132" pos:column="60">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="132" pos:column="64">It</name><op:operator pos:line="132" pos:column="66">.</op:operator><name><name pos:line="132" pos:column="67">IsAny</name><argument_list pos:line="132" pos:column="72">&lt;<argument><name pos:line="132" pos:column="73">DummyException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="132" pos:column="88">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="132" pos:column="92">It</name><op:operator pos:line="132" pos:column="94">.</op:operator><name><name pos:line="132" pos:column="95">IsAny</name><argument_list pos:line="132" pos:column="100">&lt;<argument><name><name pos:line="132" pos:column="101">object</name><index pos:line="132" pos:column="107">[]</index></name></argument>&gt;</argument_list></name></name><argument_list pos:line="132" pos:column="110">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="133" pos:column="13">Assert</name><op:operator pos:line="133" pos:column="19">.</op:operator><name pos:line="133" pos:column="20">Equal</name></name><argument_list pos:line="133" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="133" pos:column="26">""</lit:literal></expr></argument>, <argument><expr><name pos:line="133" pos:column="30">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="136" pos:column="9">[<expr><name pos:line="136" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="137" pos:column="9">public</specifier> <name pos:line="137" pos:column="16">void</name></type> <name pos:line="137" pos:column="21">ThrowsExceptionWithNullResource</name><parameter_list pos:line="137" pos:column="52">()</parameter_list>
        <block pos:line="138" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="139" pos:column="13">Assert</name><op:operator pos:line="139" pos:column="19">.</op:operator><name><name pos:line="139" pos:column="20">Throws</name><argument_list pos:line="139" pos:column="26">&lt;<argument><name pos:line="139" pos:column="27">ArgumentNullException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="139" pos:column="49">(
                <argument><expr><lambda><parameter_list pos:line="140" pos:column="17">()</parameter_list> <op:operator pos:line="140" pos:column="20">=&gt;</op:operator> <call><name><name pos:line="140" pos:column="23">EndpointConfig</name><op:operator pos:line="140" pos:column="37">.</op:operator><name pos:line="140" pos:column="38">GenerateUriTemplate</name></name><argument_list pos:line="140" pos:column="57">(<argument><expr><name pos:line="140" pos:column="58">null</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="140" pos:column="64">""</lit:literal></expr></argument>, <argument><expr><name><name pos:line="140" pos:column="68">LoggerMock</name><op:operator pos:line="140" pos:column="78">.</op:operator><name pos:line="140" pos:column="79">Object</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="143" pos:column="9">[<expr><name pos:line="143" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="144" pos:column="9">public</specifier> <name pos:line="144" pos:column="16">void</name></type> <name pos:line="144" pos:column="21">ThrowsExceptionWithNullLogger</name><parameter_list pos:line="144" pos:column="50">()</parameter_list>
        <block pos:line="145" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="146" pos:column="13">Assert</name><op:operator pos:line="146" pos:column="19">.</op:operator><name><name pos:line="146" pos:column="20">Throws</name><argument_list pos:line="146" pos:column="26">&lt;<argument><name pos:line="146" pos:column="27">ArgumentNullException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="146" pos:column="49">(
                <argument><expr><lambda><parameter_list pos:line="147" pos:column="17">()</parameter_list> <op:operator pos:line="147" pos:column="20">=&gt;</op:operator> <call><name><name pos:line="147" pos:column="23">EndpointConfig</name><op:operator pos:line="147" pos:column="37">.</op:operator><name pos:line="147" pos:column="38">GenerateUriTemplate</name></name><argument_list pos:line="147" pos:column="57">(<argument><expr><name><name pos:line="147" pos:column="58">ResourceMock</name><op:operator pos:line="147" pos:column="70">.</op:operator><name pos:line="147" pos:column="71">Object</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="147" pos:column="79">""</lit:literal></expr></argument>, <argument><expr><name pos:line="147" pos:column="83">null</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
