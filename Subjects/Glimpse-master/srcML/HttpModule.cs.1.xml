<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.AspNet\HttpModule.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Threading</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Web</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Web</name><op:operator pos:line="4" pos:column="17">.</op:operator><name pos:line="4" pos:column="18">Compilation</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Glimpse</name><op:operator pos:line="5" pos:column="14">.</op:operator><name pos:line="5" pos:column="15">AspNet</name><op:operator pos:line="5" pos:column="21">.</op:operator><name pos:line="5" pos:column="22">Extensions</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Glimpse</name><op:operator pos:line="6" pos:column="14">.</op:operator><name pos:line="6" pos:column="15">Core</name><op:operator pos:line="6" pos:column="19">.</op:operator><name pos:line="6" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Glimpse</name><op:operator pos:line="7" pos:column="14">.</op:operator><name pos:line="7" pos:column="15">Core</name><op:operator pos:line="7" pos:column="19">.</op:operator><name pos:line="7" pos:column="20">Framework</name></name>;</using>

<namespace pos:line="9" pos:column="1">namespace <name><name pos:line="9" pos:column="11">Glimpse</name><op:operator pos:line="9" pos:column="18">.</op:operator><name pos:line="9" pos:column="19">AspNet</name></name>
<block pos:line="10" pos:column="1">{
    <class><specifier pos:line="11" pos:column="5">public</specifier> class <name pos:line="11" pos:column="18">HttpModule</name> <super pos:line="11" pos:column="29">: <name pos:line="11" pos:column="31">IHttpModule</name></super>  
    <block pos:line="12" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="13" pos:column="9">private</specifier> <specifier pos:line="13" pos:column="17">static</specifier> <specifier pos:line="13" pos:column="24">readonly</specifier> <name pos:line="13" pos:column="33">object</name></type> <name pos:line="13" pos:column="40">LockObj</name> <init pos:line="13" pos:column="48">= <expr><op:operator pos:line="13" pos:column="50">new</op:operator> <call><name pos:line="13" pos:column="54">object</name><argument_list pos:line="13" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="14" pos:column="9">private</specifier> <specifier pos:line="14" pos:column="17">static</specifier> <specifier pos:line="14" pos:column="24">readonly</specifier> <name pos:line="14" pos:column="33">Factory</name></type> <name pos:line="14" pos:column="41">Factory</name></decl>;</decl_stmt>

        <constructor><specifier pos:line="16" pos:column="9">static</specifier> <name pos:line="16" pos:column="16">HttpModule</name><parameter_list pos:line="16" pos:column="26">()</parameter_list>
        <block pos:line="17" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="18" pos:column="13">var</name></type> <name pos:line="18" pos:column="17">serviceLocator</name> <init pos:line="18" pos:column="32">= <expr><op:operator pos:line="18" pos:column="34">new</op:operator> <call><name pos:line="18" pos:column="38">AspNetServiceLocator</name><argument_list pos:line="18" pos:column="58">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="19" pos:column="13">Factory</name> <op:operator pos:line="19" pos:column="21">=</op:operator> <op:operator pos:line="19" pos:column="23">new</op:operator> <call><name pos:line="19" pos:column="27">Factory</name><argument_list pos:line="19" pos:column="34">(<argument><expr><name pos:line="19" pos:column="35">serviceLocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="20" pos:column="13">ILogger</name></type> <name pos:line="20" pos:column="21">logger</name> <init pos:line="20" pos:column="28">= <expr><call><name><name pos:line="20" pos:column="30">Factory</name><op:operator pos:line="20" pos:column="37">.</op:operator><name pos:line="20" pos:column="38">InstantiateLogger</name></name><argument_list pos:line="20" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="21" pos:column="13">serviceLocator</name><op:operator pos:line="21" pos:column="27">.</op:operator><name pos:line="21" pos:column="28">Logger</name></name> <op:operator pos:line="21" pos:column="35">=</op:operator> <name pos:line="21" pos:column="37">logger</name></expr>;</expr_stmt>

            <try pos:line="23" pos:column="13">try
            <block pos:line="24" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="25" pos:column="17">BuildManager</name><op:operator pos:line="25" pos:column="29">.</op:operator><name pos:line="25" pos:column="30">GetReferencedAssemblies</name></name><argument_list pos:line="25" pos:column="53">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="26" pos:column="17">serviceLocator</name><op:operator pos:line="26" pos:column="31">.</op:operator><name pos:line="26" pos:column="32">Logger</name><op:operator pos:line="26" pos:column="38">.</op:operator><name pos:line="26" pos:column="39">Debug</name></name><argument_list pos:line="26" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="26" pos:column="45">"Preloaded all referenced assemblies with System.Web.Compilation.BuildManager.GetReferencedAssemblies()"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch pos:line="28" pos:column="13">catch <parameter_list pos:line="28" pos:column="19">(<param><decl><type><name pos:line="28" pos:column="20">Exception</name></type> <name pos:line="28" pos:column="30">exception</name></decl></param>)</parameter_list>
            <block pos:line="29" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="30" pos:column="17">serviceLocator</name><op:operator pos:line="30" pos:column="31">.</op:operator><name pos:line="30" pos:column="32">Logger</name><op:operator pos:line="30" pos:column="38">.</op:operator><name pos:line="30" pos:column="39">Error</name></name><argument_list pos:line="30" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="30" pos:column="45">"Call to System.Web.Compilation.BuildManager.GetReferencedAssemblies() failed."</lit:literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="126">exception</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>

            <expr_stmt><expr><call><name><name pos:line="33" pos:column="13">AppDomain</name><op:operator pos:line="33" pos:column="22">.</op:operator><name pos:line="33" pos:column="23">CurrentDomain</name><op:operator pos:line="33" pos:column="36">.</op:operator><name pos:line="33" pos:column="37">SetData</name></name><argument_list pos:line="33" pos:column="44">(<argument><expr><name><name pos:line="33" pos:column="45">Constants</name><op:operator pos:line="33" pos:column="54">.</op:operator><name pos:line="33" pos:column="55">LoggerKey</name></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="66">logger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="34" pos:column="13">AppDomain</name><op:operator pos:line="34" pos:column="22">.</op:operator><name pos:line="34" pos:column="23">CurrentDomain</name><op:operator pos:line="34" pos:column="36">.</op:operator><name pos:line="34" pos:column="37">DomainUnload</name></name> <op:operator pos:line="34" pos:column="50">+=</op:operator> <lambda><parameter_list pos:line="34" pos:column="53">(<param><decl><name pos:line="34" pos:column="54">sender</name></decl></param>, <param><decl><name pos:line="34" pos:column="62">e</name></decl></param>)</parameter_list> <op:operator pos:line="34" pos:column="65">=&gt;</op:operator> <call><name pos:line="34" pos:column="68">OnAppDomainUnload</name><argument_list pos:line="34" pos:column="85">(<argument><expr><op:operator pos:line="34" pos:column="86">(</op:operator><name pos:line="34" pos:column="87">AppDomain</name><op:operator pos:line="34" pos:column="96">)</op:operator><name pos:line="34" pos:column="97">sender</name></expr></argument>)</argument_list></call></lambda></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier pos:line="37" pos:column="9">private</specifier> <specifier pos:line="37" pos:column="17">static</specifier> <name pos:line="37" pos:column="24">void</name></type> <name pos:line="37" pos:column="29">OnAppDomainUnload</name><parameter_list pos:line="37" pos:column="46">(<param><decl><type><name pos:line="37" pos:column="47">AppDomain</name></type> <name pos:line="37" pos:column="57">appDomain</name></decl></param>)</parameter_list>
        <block pos:line="38" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="39" pos:column="13">ILogger</name></type> <name pos:line="39" pos:column="21">logger</name> <init pos:line="39" pos:column="28">= <expr><call><name><name pos:line="39" pos:column="30">appDomain</name><op:operator pos:line="39" pos:column="39">.</op:operator><name pos:line="39" pos:column="40">GetData</name></name><argument_list pos:line="39" pos:column="47">(<argument><expr><name><name pos:line="39" pos:column="48">Constants</name><op:operator pos:line="39" pos:column="57">.</op:operator><name pos:line="39" pos:column="58">LoggerKey</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="39" pos:column="69">as</op:operator> <name pos:line="39" pos:column="72">ILogger</name></expr></init></decl>;</decl_stmt>

            <if pos:line="41" pos:column="13">if <condition pos:line="41" pos:column="16">(<expr><name pos:line="41" pos:column="17">logger</name> <op:operator pos:line="41" pos:column="24">==</op:operator> <name pos:line="41" pos:column="27">null</name></expr>)</condition><then pos:line="41" pos:column="32">
            <block pos:line="42" pos:column="13">{
                <return pos:line="43" pos:column="17">return;</return>
            }</block></then></if>

            <expr_stmt><expr><call><name><name pos:line="46" pos:column="13">logger</name><op:operator pos:line="46" pos:column="19">.</op:operator><name pos:line="46" pos:column="20">Fatal</name></name><argument_list pos:line="46" pos:column="25">(
                <argument><expr><lit:literal type="string" pos:line="47" pos:column="17">"AppDomain with Id: '{0}' and BaseDirectory: '{1}' has been unloaded. Any in memory data stores have been lost. {2}"</lit:literal></expr></argument>,
                <argument><expr><name><name pos:line="48" pos:column="17">appDomain</name><op:operator pos:line="48" pos:column="26">.</op:operator><name pos:line="48" pos:column="27">Id</name></name></expr></argument>,
                <argument><expr><name><name pos:line="49" pos:column="17">appDomain</name><op:operator pos:line="49" pos:column="26">.</op:operator><name pos:line="49" pos:column="27">BaseDirectory</name></name></expr></argument>,
                <argument><expr><call><name><name pos:line="50" pos:column="17">HttpRuntimeShutdownMessageResolver</name><op:operator pos:line="50" pos:column="51">.</op:operator><name pos:line="50" pos:column="52">ResolveShutdownMessage</name></name><argument_list pos:line="50" pos:column="74">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="52" pos:column="13">// NLog writes its logs asynchronously, which means that if we don't wait, chances are the log will not be written </comment>
            <comment type="line" pos:line="53" pos:column="13">// before the appdomain is actually shut down, so we sleep for 100ms and hopefully that is enough for NLog to do its thing</comment>
            <expr_stmt><expr><call><name><name pos:line="54" pos:column="13">Thread</name><op:operator pos:line="54" pos:column="19">.</op:operator><name pos:line="54" pos:column="20">Sleep</name></name><argument_list pos:line="54" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="54" pos:column="26">100</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="57" pos:column="9">public</specifier> <name pos:line="57" pos:column="16">void</name></type> <name pos:line="57" pos:column="21">Init</name><parameter_list pos:line="57" pos:column="25">(<param><decl><type><name pos:line="57" pos:column="26">HttpApplication</name></type> <name pos:line="57" pos:column="42">httpApplication</name></decl></param>)</parameter_list>
        <block pos:line="58" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="59" pos:column="13">Init</name><argument_list pos:line="59" pos:column="17">(<argument><expr><call><name pos:line="59" pos:column="18">WithTestable</name><argument_list pos:line="59" pos:column="30">(<argument><expr><name pos:line="59" pos:column="31">httpApplication</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="62" pos:column="9">public</specifier> <name pos:line="62" pos:column="16">void</name></type> <name pos:line="62" pos:column="21">Dispose</name><parameter_list pos:line="62" pos:column="28">()</parameter_list>
        <block pos:line="63" pos:column="9">{
            <comment type="line" pos:line="64" pos:column="13">// Nothing to dispose</comment>
        }</block></function>

        <function><type><specifier pos:line="67" pos:column="9">internal</specifier> <name pos:line="67" pos:column="18">void</name></type> <name pos:line="67" pos:column="23">Init</name><parameter_list pos:line="67" pos:column="27">(<param><decl><type><name pos:line="67" pos:column="28">HttpApplicationBase</name></type> <name pos:line="67" pos:column="48">httpApplication</name></decl></param>)</parameter_list>
        <block pos:line="68" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="69" pos:column="13">var</name></type> <name pos:line="69" pos:column="17">runtime</name> <init pos:line="69" pos:column="25">= <expr><call><name pos:line="69" pos:column="27">GetRuntime</name><argument_list pos:line="69" pos:column="37">(<argument><expr><name><name pos:line="69" pos:column="38">httpApplication</name><op:operator pos:line="69" pos:column="53">.</op:operator><name pos:line="69" pos:column="54">Application</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if pos:line="71" pos:column="13">if <condition pos:line="71" pos:column="16">(<expr><name><name pos:line="71" pos:column="17">runtime</name><op:operator pos:line="71" pos:column="24">.</op:operator><name pos:line="71" pos:column="25">IsInitialized</name></name> <op:operator pos:line="71" pos:column="39">||</op:operator> <call><name><name pos:line="71" pos:column="42">runtime</name><op:operator pos:line="71" pos:column="49">.</op:operator><name pos:line="71" pos:column="50">Initialize</name></name><argument_list pos:line="71" pos:column="60">()</argument_list></call></expr>)</condition><then pos:line="71" pos:column="63">
            <block pos:line="72" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="73" pos:column="17">httpApplication</name><op:operator pos:line="73" pos:column="32">.</op:operator><name pos:line="73" pos:column="33">BeginRequest</name></name> <op:operator pos:line="73" pos:column="46">+=</op:operator> <lambda><parameter_list pos:line="73" pos:column="49">(<param><decl><name pos:line="73" pos:column="50">context</name></decl></param>, <param><decl><name pos:line="73" pos:column="59">e</name></decl></param>)</parameter_list> <op:operator pos:line="73" pos:column="62">=&gt;</op:operator> <call><name pos:line="73" pos:column="65">BeginRequest</name><argument_list pos:line="73" pos:column="77">(<argument><expr><call><name pos:line="73" pos:column="78">WithTestable</name><argument_list pos:line="73" pos:column="90">(<argument><expr><name pos:line="73" pos:column="91">context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></lambda></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="74" pos:column="17">httpApplication</name><op:operator pos:line="74" pos:column="32">.</op:operator><name pos:line="74" pos:column="33">PostAcquireRequestState</name></name> <op:operator pos:line="74" pos:column="57">+=</op:operator> <lambda><parameter_list pos:line="74" pos:column="60">(<param><decl><name pos:line="74" pos:column="61">context</name></decl></param>, <param><decl><name pos:line="74" pos:column="70">e</name></decl></param>)</parameter_list> <op:operator pos:line="74" pos:column="73">=&gt;</op:operator> <call><name pos:line="74" pos:column="76">BeginSessionAccess</name><argument_list pos:line="74" pos:column="94">(<argument><expr><call><name pos:line="74" pos:column="95">WithTestable</name><argument_list pos:line="74" pos:column="107">(<argument><expr><name pos:line="74" pos:column="108">context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></lambda></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="75" pos:column="17">httpApplication</name><op:operator pos:line="75" pos:column="32">.</op:operator><name pos:line="75" pos:column="33">PostRequestHandlerExecute</name></name> <op:operator pos:line="75" pos:column="59">+=</op:operator> <lambda><parameter_list pos:line="75" pos:column="62">(<param><decl><name pos:line="75" pos:column="63">context</name></decl></param>, <param><decl><name pos:line="75" pos:column="72">e</name></decl></param>)</parameter_list> <op:operator pos:line="75" pos:column="75">=&gt;</op:operator> <call><name pos:line="75" pos:column="78">EndSessionAccess</name><argument_list pos:line="75" pos:column="94">(<argument><expr><call><name pos:line="75" pos:column="95">WithTestable</name><argument_list pos:line="75" pos:column="107">(<argument><expr><name pos:line="75" pos:column="108">context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></lambda></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="76" pos:column="17">httpApplication</name><op:operator pos:line="76" pos:column="32">.</op:operator><name pos:line="76" pos:column="33">PostReleaseRequestState</name></name> <op:operator pos:line="76" pos:column="57">+=</op:operator> <lambda><parameter_list pos:line="76" pos:column="60">(<param><decl><name pos:line="76" pos:column="61">context</name></decl></param>, <param><decl><name pos:line="76" pos:column="70">e</name></decl></param>)</parameter_list> <op:operator pos:line="76" pos:column="73">=&gt;</op:operator> <call><name pos:line="76" pos:column="76">EndRequest</name><argument_list pos:line="76" pos:column="86">(<argument><expr><call><name pos:line="76" pos:column="87">WithTestable</name><argument_list pos:line="76" pos:column="99">(<argument><expr><name pos:line="76" pos:column="100">context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></lambda></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="80" pos:column="9">internal</specifier> <name pos:line="80" pos:column="18">IGlimpseRuntime</name></type> <name pos:line="80" pos:column="34">GetRuntime</name><parameter_list pos:line="80" pos:column="44">(<param><decl><type><name pos:line="80" pos:column="45">HttpApplicationStateBase</name></type> <name pos:line="80" pos:column="70">applicationState</name></decl></param>)</parameter_list>
        <block pos:line="81" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="82" pos:column="13">var</name></type> <name pos:line="82" pos:column="17">runtime</name> <init pos:line="82" pos:column="25">= <expr><name><name pos:line="82" pos:column="27">applicationState</name><index pos:line="82" pos:column="43">[<expr><name><name pos:line="82" pos:column="44">Constants</name><op:operator pos:line="82" pos:column="53">.</op:operator><name pos:line="82" pos:column="54">RuntimeKey</name></name></expr>]</index></name> <op:operator pos:line="82" pos:column="66">as</op:operator> <name pos:line="82" pos:column="69">IGlimpseRuntime</name></expr></init></decl>;</decl_stmt>

            <if pos:line="84" pos:column="13">if <condition pos:line="84" pos:column="16">(<expr><name pos:line="84" pos:column="17">runtime</name> <op:operator pos:line="84" pos:column="25">==</op:operator> <name pos:line="84" pos:column="28">null</name></expr>)</condition><then pos:line="84" pos:column="33">
            <block pos:line="85" pos:column="13">{
                <lock pos:line="86" pos:column="17">lock (<expr><name pos:line="86" pos:column="23">LockObj</name></expr>)
                <block pos:line="87" pos:column="17">{
                    <expr_stmt><expr><name pos:line="88" pos:column="21">runtime</name> <op:operator pos:line="88" pos:column="29">=</op:operator> <name><name pos:line="88" pos:column="31">applicationState</name><index pos:line="88" pos:column="47">[<expr><name><name pos:line="88" pos:column="48">Constants</name><op:operator pos:line="88" pos:column="57">.</op:operator><name pos:line="88" pos:column="58">RuntimeKey</name></name></expr>]</index></name> <op:operator pos:line="88" pos:column="70">as</op:operator> <name pos:line="88" pos:column="73">IGlimpseRuntime</name></expr>;</expr_stmt>

                    <if pos:line="90" pos:column="21">if <condition pos:line="90" pos:column="24">(<expr><name pos:line="90" pos:column="25">runtime</name> <op:operator pos:line="90" pos:column="33">==</op:operator> <name pos:line="90" pos:column="36">null</name></expr>)</condition><then pos:line="90" pos:column="41">
                    <block pos:line="91" pos:column="21">{
                        <expr_stmt><expr><name pos:line="92" pos:column="25">runtime</name> <op:operator pos:line="92" pos:column="33">=</op:operator> <call><name><name pos:line="92" pos:column="35">Factory</name><op:operator pos:line="92" pos:column="42">.</op:operator><name pos:line="92" pos:column="43">InstantiateRuntime</name></name><argument_list pos:line="92" pos:column="61">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt><expr><call><name><name pos:line="94" pos:column="25">applicationState</name><op:operator pos:line="94" pos:column="41">.</op:operator><name pos:line="94" pos:column="42">Add</name></name><argument_list pos:line="94" pos:column="45">(<argument><expr><name><name pos:line="94" pos:column="46">Constants</name><op:operator pos:line="94" pos:column="55">.</op:operator><name pos:line="94" pos:column="56">RuntimeKey</name></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="68">runtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></lock>
            }</block></then></if>

            <return pos:line="99" pos:column="13">return <expr><name pos:line="99" pos:column="20">runtime</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="102" pos:column="9">internal</specifier> <name pos:line="102" pos:column="18">void</name></type> <name pos:line="102" pos:column="23">BeginRequest</name><parameter_list pos:line="102" pos:column="35">(<param><decl><type><name pos:line="102" pos:column="36">HttpContextBase</name></type> <name pos:line="102" pos:column="52">httpContext</name></decl></param>)</parameter_list>
        <block pos:line="103" pos:column="9">{
            <comment type="line" pos:line="104" pos:column="13">// TODO: Add Logging to either methods here or in Runtime</comment>
            <decl_stmt><decl><type><name pos:line="105" pos:column="13">var</name></type> <name pos:line="105" pos:column="17">runtime</name> <init pos:line="105" pos:column="25">= <expr><call><name pos:line="105" pos:column="27">GetRuntime</name><argument_list pos:line="105" pos:column="37">(<argument><expr><name><name pos:line="105" pos:column="38">httpContext</name><op:operator pos:line="105" pos:column="49">.</op:operator><name pos:line="105" pos:column="50">Application</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="107" pos:column="13">runtime</name><op:operator pos:line="107" pos:column="20">.</op:operator><name pos:line="107" pos:column="21">BeginRequest</name></name><argument_list pos:line="107" pos:column="33">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="110" pos:column="9">internal</specifier> <name pos:line="110" pos:column="18">void</name></type> <name pos:line="110" pos:column="23">EndRequest</name><parameter_list pos:line="110" pos:column="33">(<param><decl><type><name pos:line="110" pos:column="34">HttpContextBase</name></type> <name pos:line="110" pos:column="50">httpContext</name></decl></param>)</parameter_list>
        <block pos:line="111" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="112" pos:column="13">var</name></type> <name pos:line="112" pos:column="17">runtime</name> <init pos:line="112" pos:column="25">= <expr><call><name pos:line="112" pos:column="27">GetRuntime</name><argument_list pos:line="112" pos:column="37">(<argument><expr><name><name pos:line="112" pos:column="38">httpContext</name><op:operator pos:line="112" pos:column="49">.</op:operator><name pos:line="112" pos:column="50">Application</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="114" pos:column="13">runtime</name><op:operator pos:line="114" pos:column="20">.</op:operator><name pos:line="114" pos:column="21">EndRequest</name></name><argument_list pos:line="114" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="117" pos:column="9">private</specifier> <specifier pos:line="117" pos:column="17">static</specifier> <name pos:line="117" pos:column="24">HttpContextBase</name></type> <name pos:line="117" pos:column="40">WithTestable</name><parameter_list pos:line="117" pos:column="52">(<param><decl><type><name pos:line="117" pos:column="53">object</name></type> <name pos:line="117" pos:column="60">sender</name></decl></param>)</parameter_list>
        <block pos:line="118" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="119" pos:column="13">var</name></type> <name pos:line="119" pos:column="17">httpApplication</name> <init pos:line="119" pos:column="33">= <expr><name pos:line="119" pos:column="35">sender</name> <op:operator pos:line="119" pos:column="42">as</op:operator> <name pos:line="119" pos:column="45">HttpApplication</name></expr></init></decl>;</decl_stmt>

            <return pos:line="121" pos:column="13">return <expr><op:operator pos:line="121" pos:column="20">new</op:operator> <call><name pos:line="121" pos:column="24">HttpContextWrapper</name><argument_list pos:line="121" pos:column="42">(<argument><expr><name><name pos:line="121" pos:column="43">httpApplication</name><op:operator pos:line="121" pos:column="58">.</op:operator><name pos:line="121" pos:column="59">Context</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="124" pos:column="9">private</specifier> <specifier pos:line="124" pos:column="17">static</specifier> <name pos:line="124" pos:column="24">HttpApplicationBase</name></type> <name pos:line="124" pos:column="44">WithTestable</name><parameter_list pos:line="124" pos:column="56">(<param><decl><type><name pos:line="124" pos:column="57">HttpApplication</name></type> <name pos:line="124" pos:column="73">httpApplication</name></decl></param>)</parameter_list>
        <block pos:line="125" pos:column="9">{
            <return pos:line="126" pos:column="13">return <expr><op:operator pos:line="126" pos:column="20">new</op:operator> <call><name pos:line="126" pos:column="24">HttpApplicationWrapper</name><argument_list pos:line="126" pos:column="46">(<argument><expr><name pos:line="126" pos:column="47">httpApplication</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="129" pos:column="9">private</specifier> <name pos:line="129" pos:column="17">void</name></type> <name pos:line="129" pos:column="22">BeginSessionAccess</name><parameter_list pos:line="129" pos:column="40">(<param><decl><type><name pos:line="129" pos:column="41">HttpContextBase</name></type> <name pos:line="129" pos:column="57">httpContext</name></decl></param>)</parameter_list>
        <block pos:line="130" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="131" pos:column="13">var</name></type> <name pos:line="131" pos:column="17">runtime</name> <init pos:line="131" pos:column="25">= <expr><call><name pos:line="131" pos:column="27">GetRuntime</name><argument_list pos:line="131" pos:column="37">(<argument><expr><name><name pos:line="131" pos:column="38">httpContext</name><op:operator pos:line="131" pos:column="49">.</op:operator><name pos:line="131" pos:column="50">Application</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="133" pos:column="13">runtime</name><op:operator pos:line="133" pos:column="20">.</op:operator><name pos:line="133" pos:column="21">BeginSessionAccess</name></name><argument_list pos:line="133" pos:column="39">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="136" pos:column="9">private</specifier> <name pos:line="136" pos:column="17">void</name></type> <name pos:line="136" pos:column="22">EndSessionAccess</name><parameter_list pos:line="136" pos:column="38">(<param><decl><type><name pos:line="136" pos:column="39">HttpContextBase</name></type> <name pos:line="136" pos:column="55">httpContext</name></decl></param>)</parameter_list>
        <block pos:line="137" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="138" pos:column="13">var</name></type> <name pos:line="138" pos:column="17">runtime</name> <init pos:line="138" pos:column="25">= <expr><call><name pos:line="138" pos:column="27">GetRuntime</name><argument_list pos:line="138" pos:column="37">(<argument><expr><name><name pos:line="138" pos:column="38">httpContext</name><op:operator pos:line="138" pos:column="49">.</op:operator><name pos:line="138" pos:column="50">Application</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="140" pos:column="13">runtime</name><op:operator pos:line="140" pos:column="20">.</op:operator><name pos:line="140" pos:column="21">EndSessionAccess</name></name><argument_list pos:line="140" pos:column="37">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
