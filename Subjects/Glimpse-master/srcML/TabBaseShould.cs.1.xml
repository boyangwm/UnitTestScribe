<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Core\Extensibility\TabBaseShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">Glimpse</name><op:operator pos:line="1" pos:column="14">.</op:operator><name pos:line="1" pos:column="15">Core</name><op:operator pos:line="1" pos:column="19">.</op:operator><name pos:line="1" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">Glimpse</name><op:operator pos:line="2" pos:column="14">.</op:operator><name pos:line="2" pos:column="15">Test</name><op:operator pos:line="2" pos:column="19">.</op:operator><name pos:line="2" pos:column="20">Core</name><op:operator pos:line="2" pos:column="24">.</op:operator><name pos:line="2" pos:column="25">TestDoubles</name></name>;</using>
<using pos:line="3" pos:column="1">using <name pos:line="3" pos:column="7">Xunit</name>;</using>

<namespace pos:line="5" pos:column="1">namespace <name><name pos:line="5" pos:column="11">Glimpse</name><op:operator pos:line="5" pos:column="18">.</op:operator><name pos:line="5" pos:column="19">Test</name><op:operator pos:line="5" pos:column="23">.</op:operator><name pos:line="5" pos:column="24">Core</name><op:operator pos:line="5" pos:column="28">.</op:operator><name pos:line="5" pos:column="29">Extensibility</name></name>
<block pos:line="6" pos:column="1">{
    <class><specifier pos:line="7" pos:column="5">public</specifier> class <name pos:line="7" pos:column="18">TabBaseShould</name>
    <block pos:line="8" pos:column="5">{
        <function><type><attribute pos:line="9" pos:column="9">[<expr><name pos:line="9" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="10" pos:column="9">public</specifier> <name pos:line="10" pos:column="16">void</name></type> <name pos:line="10" pos:column="21">DefaultToNullLifeCycleSupportNonGeneric</name><parameter_list pos:line="10" pos:column="60">()</parameter_list>
        <block pos:line="11" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="12" pos:column="13">var</name></type> <name pos:line="12" pos:column="17">tab</name> <init pos:line="12" pos:column="21">= <expr><op:operator pos:line="12" pos:column="23">new</op:operator> <call><name pos:line="12" pos:column="27">TestingTab</name><argument_list pos:line="12" pos:column="37">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="14" pos:column="13">Assert</name><op:operator pos:line="14" pos:column="19">.</op:operator><name pos:line="14" pos:column="20">Null</name></name><argument_list pos:line="14" pos:column="24">(<argument><expr><name><name pos:line="14" pos:column="25">tab</name><op:operator pos:line="14" pos:column="28">.</op:operator><name pos:line="14" pos:column="29">RequestContextType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="17" pos:column="9">[<expr><name pos:line="17" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="18" pos:column="9">public</specifier> <name pos:line="18" pos:column="16">void</name></type> <name pos:line="18" pos:column="21">DefaultLifecycleSupportToEndRequestNonGeneric</name><parameter_list pos:line="18" pos:column="66">()</parameter_list>
        <block pos:line="19" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="20" pos:column="13">var</name></type> <name pos:line="20" pos:column="17">tab</name> <init pos:line="20" pos:column="21">= <expr><op:operator pos:line="20" pos:column="23">new</op:operator> <call><name pos:line="20" pos:column="27">TestingTab</name><argument_list pos:line="20" pos:column="37">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="22" pos:column="13">Assert</name><op:operator pos:line="22" pos:column="19">.</op:operator><name pos:line="22" pos:column="20">Equal</name></name><argument_list pos:line="22" pos:column="25">(<argument><expr><name><name pos:line="22" pos:column="26">RuntimeEvent</name><op:operator pos:line="22" pos:column="38">.</op:operator><name pos:line="22" pos:column="39">EndRequest</name></name></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="51">tab</name><op:operator pos:line="22" pos:column="54">.</op:operator><name pos:line="22" pos:column="55">ExecuteOn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="25" pos:column="9">[<expr><name pos:line="25" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="26" pos:column="9">public</specifier> <name pos:line="26" pos:column="16">void</name></type> <name pos:line="26" pos:column="21">DefaultToNullLifeCycleSupportGeneric</name><parameter_list pos:line="26" pos:column="57">()</parameter_list>
        <block pos:line="27" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="28" pos:column="13">var</name></type> <name pos:line="28" pos:column="17">tab</name> <init pos:line="28" pos:column="21">= <expr><op:operator pos:line="28" pos:column="23">new</op:operator> <call><name pos:line="28" pos:column="27">GenericTab</name><argument_list pos:line="28" pos:column="37">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="30" pos:column="13">Assert</name><op:operator pos:line="30" pos:column="19">.</op:operator><name pos:line="30" pos:column="20">Equal</name></name><argument_list pos:line="30" pos:column="25">(<argument><expr><call><name pos:line="30" pos:column="26">typeof</name><argument_list pos:line="30" pos:column="32">(<argument><expr><name pos:line="30" pos:column="33">DummyObjectContext</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="54">tab</name><op:operator pos:line="30" pos:column="57">.</op:operator><name pos:line="30" pos:column="58">RequestContextType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="33" pos:column="9">[<expr><name pos:line="33" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="34" pos:column="9">public</specifier> <name pos:line="34" pos:column="16">void</name></type> <name pos:line="34" pos:column="21">DefaultLifecycleSupportToEndRequestGeneric</name><parameter_list pos:line="34" pos:column="63">()</parameter_list>
        <block pos:line="35" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="36" pos:column="13">var</name></type> <name pos:line="36" pos:column="17">tab</name> <init pos:line="36" pos:column="21">= <expr><op:operator pos:line="36" pos:column="23">new</op:operator> <call><name pos:line="36" pos:column="27">GenericTab</name><argument_list pos:line="36" pos:column="37">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="38" pos:column="13">Assert</name><op:operator pos:line="38" pos:column="19">.</op:operator><name pos:line="38" pos:column="20">Equal</name></name><argument_list pos:line="38" pos:column="25">(<argument><expr><name><name pos:line="38" pos:column="26">RuntimeEvent</name><op:operator pos:line="38" pos:column="38">.</op:operator><name pos:line="38" pos:column="39">EndRequest</name></name></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="51">tab</name><op:operator pos:line="38" pos:column="54">.</op:operator><name pos:line="38" pos:column="55">ExecuteOn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <class><specifier pos:line="41" pos:column="9">private</specifier> class <name pos:line="41" pos:column="23">GenericTab</name> <super pos:line="41" pos:column="34">: <name><name pos:line="41" pos:column="36">TabBase</name><argument_list pos:line="41" pos:column="43">&lt;<argument><name pos:line="41" pos:column="44">DummyObjectContext</name></argument>&gt;</argument_list></name></super>
        <block pos:line="42" pos:column="9">{
            <function><type><specifier pos:line="43" pos:column="13">public</specifier> <specifier pos:line="43" pos:column="20">override</specifier> <name pos:line="43" pos:column="29">object</name></type> <name pos:line="43" pos:column="36">GetData</name><parameter_list pos:line="43" pos:column="43">(<param><decl><type><name pos:line="43" pos:column="44">ITabContext</name></type> <name pos:line="43" pos:column="56">context</name></decl></param>)</parameter_list>
            <block pos:line="44" pos:column="13">{
                <throw pos:line="45" pos:column="17">throw <expr><op:operator pos:line="45" pos:column="23">new</op:operator> <call><name><name pos:line="45" pos:column="27">System</name><op:operator pos:line="45" pos:column="33">.</op:operator><name pos:line="45" pos:column="34">NotSupportedException</name></name><argument_list pos:line="45" pos:column="55">()</argument_list></call></expr>;</throw>
            }</block></function>

            <decl_stmt><decl><type><specifier pos:line="48" pos:column="13">public</specifier> <specifier pos:line="48" pos:column="20">override</specifier> <name pos:line="48" pos:column="29">string</name></type> <name pos:line="48" pos:column="36">Name</name>
            <block pos:line="49" pos:column="13">{
                <function><name pos:line="50" pos:column="17">get</name> <block pos:line="50" pos:column="21">{ <throw pos:line="50" pos:column="23">throw <expr><op:operator pos:line="50" pos:column="29">new</op:operator> <call><name><name pos:line="50" pos:column="33">System</name><op:operator pos:line="50" pos:column="39">.</op:operator><name pos:line="50" pos:column="40">NotSupportedException</name></name><argument_list pos:line="50" pos:column="61">()</argument_list></call></expr>;</throw> }</block></function>
            }</block></decl></decl_stmt>
        }</block></class>

        <class><specifier pos:line="54" pos:column="9">private</specifier> class <name pos:line="54" pos:column="23">TestingTab</name> <super pos:line="54" pos:column="34">: <name pos:line="54" pos:column="36">TabBase</name></super>
        <block pos:line="55" pos:column="9">{
            <function><type><specifier pos:line="56" pos:column="13">public</specifier> <specifier pos:line="56" pos:column="20">override</specifier> <name pos:line="56" pos:column="29">object</name></type> <name pos:line="56" pos:column="36">GetData</name><parameter_list pos:line="56" pos:column="43">(<param><decl><type><name pos:line="56" pos:column="44">ITabContext</name></type> <name pos:line="56" pos:column="56">context</name></decl></param>)</parameter_list>
            <block pos:line="57" pos:column="13">{
                <throw pos:line="58" pos:column="17">throw <expr><op:operator pos:line="58" pos:column="23">new</op:operator> <call><name><name pos:line="58" pos:column="27">System</name><op:operator pos:line="58" pos:column="33">.</op:operator><name pos:line="58" pos:column="34">NotSupportedException</name></name><argument_list pos:line="58" pos:column="55">()</argument_list></call></expr>;</throw>
            }</block></function>

            <decl_stmt><decl><type><specifier pos:line="61" pos:column="13">public</specifier> <specifier pos:line="61" pos:column="20">override</specifier> <name pos:line="61" pos:column="29">string</name></type> <name pos:line="61" pos:column="36">Name</name>
            <block pos:line="62" pos:column="13">{
                <function><name pos:line="63" pos:column="17">get</name> <block pos:line="63" pos:column="21">{ <throw pos:line="63" pos:column="23">throw <expr><op:operator pos:line="63" pos:column="29">new</op:operator> <call><name><name pos:line="63" pos:column="33">System</name><op:operator pos:line="63" pos:column="39">.</op:operator><name pos:line="63" pos:column="40">NotSupportedException</name></name><argument_list pos:line="63" pos:column="61">()</argument_list></call></expr>;</throw> }</block></function>
            }</block></decl></decl_stmt>
        }</block></class>
    }</block></class>
}</block></namespace></unit>
