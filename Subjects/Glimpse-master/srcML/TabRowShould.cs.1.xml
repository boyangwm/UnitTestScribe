<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Core\Plugin\Assist\TabRowShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Core</name><op:operator pos:line="4" pos:column="19">.</op:operator><name pos:line="4" pos:column="20">Tab</name><op:operator pos:line="4" pos:column="23">.</op:operator><name pos:line="4" pos:column="24">Assist</name></name>;</using>
<using pos:line="5" pos:column="1">using <name pos:line="5" pos:column="7">Xunit</name>;</using>

<namespace pos:line="7" pos:column="1">namespace <name><name pos:line="7" pos:column="11">Glimpse</name><op:operator pos:line="7" pos:column="18">.</op:operator><name pos:line="7" pos:column="19">Test</name><op:operator pos:line="7" pos:column="23">.</op:operator><name pos:line="7" pos:column="24">Core</name><op:operator pos:line="7" pos:column="28">.</op:operator><name pos:line="7" pos:column="29">Plugin</name><op:operator pos:line="7" pos:column="35">.</op:operator><name pos:line="7" pos:column="36">Assist</name></name>
<block pos:line="8" pos:column="1">{
	<class><specifier pos:line="9" pos:column="9">public</specifier> class <name pos:line="9" pos:column="22">TabRowShould</name>
	<block pos:line="10" pos:column="9">{
		<function><type><attribute pos:line="11" pos:column="17">[<expr><name pos:line="11" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="12" pos:column="17">public</specifier> <name pos:line="12" pos:column="24">void</name></type> <name pos:line="12" pos:column="29">HaveNoColumns</name><parameter_list pos:line="12" pos:column="42">()</parameter_list>
		<block pos:line="13" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="14" pos:column="25">var</name></type> <name pos:line="14" pos:column="29">columns</name> <init pos:line="14" pos:column="37">= <expr><name><name pos:line="14" pos:column="39">SectionRow</name><op:operator pos:line="14" pos:column="49">.</op:operator><name pos:line="14" pos:column="50">Columns</name></name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name><name pos:line="16" pos:column="25">Assert</name><op:operator pos:line="16" pos:column="31">.</op:operator><name pos:line="16" pos:column="32">Equal</name></name><argument_list pos:line="16" pos:column="37">(<argument><expr><lit:literal type="number" pos:line="16" pos:column="38">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="16" pos:column="41">columns</name><op:operator pos:line="16" pos:column="48">.</op:operator><name pos:line="16" pos:column="49">Count</name></name><argument_list pos:line="16" pos:column="54">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="19" pos:column="17">[<expr><name pos:line="19" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="20" pos:column="17">public</specifier> <name pos:line="20" pos:column="24">void</name></type> <name pos:line="20" pos:column="29">AcceptNullValue</name><parameter_list pos:line="20" pos:column="44">()</parameter_list>
		<block pos:line="21" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="22" pos:column="25">object</name></type> <name pos:line="22" pos:column="32">columnObject</name> <init pos:line="22" pos:column="45">= <expr><name pos:line="22" pos:column="47">null</name></expr></init></decl>;</decl_stmt>
			
			<expr_stmt><expr><call><name><name pos:line="24" pos:column="25">SectionRow</name><op:operator pos:line="24" pos:column="35">.</op:operator><name pos:line="24" pos:column="36">Column</name></name><argument_list pos:line="24" pos:column="42">(<argument><expr><name pos:line="24" pos:column="43">columnObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="27" pos:column="17">[<expr><name pos:line="27" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="28" pos:column="17">public</specifier> <name pos:line="28" pos:column="24">void</name></type> <name pos:line="28" pos:column="29">AddColumnAndReturnsSelf</name><parameter_list pos:line="28" pos:column="52">()</parameter_list>
		<block pos:line="29" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="30" pos:column="25">var</name></type> <name pos:line="30" pos:column="29">columnObject</name> <init pos:line="30" pos:column="42">= <expr><op:operator pos:line="30" pos:column="44">new</op:operator> <block pos:line="30" pos:column="48">{ }</block></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="31" pos:column="25">var</name></type> <name pos:line="31" pos:column="29">row</name> <init pos:line="31" pos:column="33">= <expr><call><name><name pos:line="31" pos:column="35">SectionRow</name><op:operator pos:line="31" pos:column="45">.</op:operator><name pos:line="31" pos:column="46">Column</name></name><argument_list pos:line="31" pos:column="52">(<argument><expr><name pos:line="31" pos:column="53">columnObject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name><name pos:line="33" pos:column="25">Assert</name><op:operator pos:line="33" pos:column="31">.</op:operator><name pos:line="33" pos:column="32">Equal</name></name><argument_list pos:line="33" pos:column="37">(<argument><expr><name pos:line="33" pos:column="38">SectionRow</name></expr></argument>, <argument><expr><name pos:line="33" pos:column="50">row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="34" pos:column="25">Assert</name><op:operator pos:line="34" pos:column="31">.</op:operator><name pos:line="34" pos:column="32">Equal</name></name><argument_list pos:line="34" pos:column="37">(<argument><expr><lit:literal type="number" pos:line="34" pos:column="38">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="34" pos:column="41">SectionRow</name><op:operator pos:line="34" pos:column="51">.</op:operator><name pos:line="34" pos:column="52">Columns</name><op:operator pos:line="34" pos:column="59">.</op:operator><name pos:line="34" pos:column="60">Count</name></name><argument_list pos:line="34" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="37" pos:column="17">[<expr><name pos:line="37" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="38" pos:column="17">public</specifier> <name pos:line="38" pos:column="24">void</name></type> <name pos:line="38" pos:column="29">ReturnObjectArrayOfColumnData</name><parameter_list pos:line="38" pos:column="58">()</parameter_list>
		<block pos:line="39" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="40" pos:column="25">var</name></type> <name pos:line="40" pos:column="29">columnObject1</name> <init pos:line="40" pos:column="43">= <expr><op:operator pos:line="40" pos:column="45">new</op:operator> <block pos:line="40" pos:column="49">{ <expr><name pos:line="40" pos:column="51">Id</name> <op:operator pos:line="40" pos:column="54">=</op:operator> <lit:literal type="string" pos:line="40" pos:column="56">"obj1"</lit:literal></expr> }</block></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="41" pos:column="25">var</name></type> <name pos:line="41" pos:column="29">columnObject2</name> <init pos:line="41" pos:column="43">= <expr><op:operator pos:line="41" pos:column="45">new</op:operator> <block pos:line="41" pos:column="49">{ <expr><name pos:line="41" pos:column="51">Id</name> <op:operator pos:line="41" pos:column="54">=</op:operator> <lit:literal type="string" pos:line="41" pos:column="56">"obj2"</lit:literal></expr> }</block></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name><name pos:line="43" pos:column="25">SectionRow</name><op:operator pos:line="43" pos:column="35">.</op:operator><name pos:line="43" pos:column="36">Column</name></name><argument_list pos:line="43" pos:column="42">(<argument><expr><name pos:line="43" pos:column="43">columnObject1</name></expr></argument>)</argument_list></call><op:operator pos:line="43" pos:column="57">.</op:operator><call><name pos:line="43" pos:column="58">Column</name><argument_list pos:line="43" pos:column="64">(<argument><expr><name pos:line="43" pos:column="65">columnObject2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name pos:line="45" pos:column="25">SectionRow</name><op:operator pos:line="45" pos:column="35">.</op:operator><name pos:line="45" pos:column="36">Build</name></name><argument_list pos:line="45" pos:column="41">()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="46" pos:column="13">var</name></type> <name pos:line="46" pos:column="17">columnData</name> <init pos:line="46" pos:column="28">= <expr><op:operator pos:line="46" pos:column="30">(</op:operator><name><name pos:line="46" pos:column="31">IEnumerable</name><argument_list pos:line="46" pos:column="42">&lt;<argument><name pos:line="46" pos:column="43">object</name></argument>&gt;</argument_list></name><op:operator pos:line="46" pos:column="50">)</op:operator><call><name><name pos:line="46" pos:column="51">SectionRow</name><op:operator pos:line="46" pos:column="61">.</op:operator><name pos:line="46" pos:column="62">Build</name></name><argument_list pos:line="46" pos:column="67">()</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name><name pos:line="48" pos:column="25">Assert</name><op:operator pos:line="48" pos:column="31">.</op:operator><name pos:line="48" pos:column="32">Equal</name></name><argument_list pos:line="48" pos:column="37">(<argument><expr><lit:literal type="number" pos:line="48" pos:column="38">2</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="48" pos:column="41">SectionRow</name><op:operator pos:line="48" pos:column="51">.</op:operator><name pos:line="48" pos:column="52">Columns</name><op:operator pos:line="48" pos:column="59">.</op:operator><name pos:line="48" pos:column="60">Count</name></name><argument_list pos:line="48" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="49" pos:column="25">Assert</name><op:operator pos:line="49" pos:column="31">.</op:operator><name pos:line="49" pos:column="32">Equal</name></name><argument_list pos:line="49" pos:column="37">(<argument><expr><name pos:line="49" pos:column="38">columnObject1</name></expr></argument>, <argument><expr><call><name><name pos:line="49" pos:column="53">columnData</name><op:operator pos:line="49" pos:column="63">.</op:operator><name pos:line="49" pos:column="64">ElementAt</name></name><argument_list pos:line="49" pos:column="73">(<argument><expr><lit:literal type="number" pos:line="49" pos:column="74">0</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="50" pos:column="25">Assert</name><op:operator pos:line="50" pos:column="31">.</op:operator><name pos:line="50" pos:column="32">Equal</name></name><argument_list pos:line="50" pos:column="37">(<argument><expr><name pos:line="50" pos:column="38">columnObject2</name></expr></argument>, <argument><expr><call><name><name pos:line="50" pos:column="53">columnData</name><op:operator pos:line="50" pos:column="63">.</op:operator><name pos:line="50" pos:column="64">ElementAt</name></name><argument_list pos:line="50" pos:column="73">(<argument><expr><lit:literal type="number" pos:line="50" pos:column="74">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<decl_stmt><decl><type><specifier pos:line="53" pos:column="17">private</specifier> <name pos:line="53" pos:column="25">TabSectionRow</name></type> <name pos:line="53" pos:column="39">SectionRow</name> <block pos:line="53" pos:column="50">{ <function_decl><name pos:line="53" pos:column="52">get</name>;</function_decl> <function_decl><name pos:line="53" pos:column="57">set</name>;</function_decl> }</block></decl></decl_stmt>

		<constructor><specifier pos:line="55" pos:column="17">public</specifier> <name pos:line="55" pos:column="24">TabRowShould</name><parameter_list pos:line="55" pos:column="36">()</parameter_list>
		<block pos:line="56" pos:column="17">{
			<expr_stmt><expr><name pos:line="57" pos:column="25">SectionRow</name> <op:operator pos:line="57" pos:column="36">=</op:operator> <op:operator pos:line="57" pos:column="38">new</op:operator> <call><name pos:line="57" pos:column="42">TabSectionRow</name><argument_list pos:line="57" pos:column="55">()</argument_list></call></expr>;</expr_stmt>
		}</block></constructor>
	}</block></class>
}</block></namespace>
</unit>
