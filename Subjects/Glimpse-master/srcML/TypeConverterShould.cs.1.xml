<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Core\Configuration\TypeConverterShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">ComponentModel</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Threading</name></name>;</using>
<using pos:line="4" pos:column="1">using <name pos:line="4" pos:column="7">Moq</name>;</using>
<using pos:line="5" pos:column="1">using <name pos:line="5" pos:column="7">Xunit</name>;</using>
<using pos:line="6" pos:column="1">using <name pos:line="6" pos:column="7">TypeConverter</name> <init pos:line="6" pos:column="21">= <expr><name><name pos:line="6" pos:column="23">Glimpse</name><op:operator pos:line="6" pos:column="30">.</op:operator><name pos:line="6" pos:column="31">Core</name><op:operator pos:line="6" pos:column="35">.</op:operator><name pos:line="6" pos:column="36">Configuration</name><op:operator pos:line="6" pos:column="49">.</op:operator><name pos:line="6" pos:column="50">TypeConverter</name></name></expr></init>;</using>

<namespace pos:line="8" pos:column="1">namespace <name><name pos:line="8" pos:column="11">Glimpse</name><op:operator pos:line="8" pos:column="18">.</op:operator><name pos:line="8" pos:column="19">Test</name><op:operator pos:line="8" pos:column="23">.</op:operator><name pos:line="8" pos:column="24">Core</name><op:operator pos:line="8" pos:column="28">.</op:operator><name pos:line="8" pos:column="29">Configuration</name></name>
<block pos:line="9" pos:column="1">{
    <class><specifier pos:line="10" pos:column="5">public</specifier> class <name pos:line="10" pos:column="18">TypeConverterShould</name>
    <block pos:line="11" pos:column="5">{
        <function><type><attribute pos:line="12" pos:column="9">[<expr><name pos:line="12" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="13" pos:column="9">public</specifier> <name pos:line="13" pos:column="16">void</name></type> <name pos:line="13" pos:column="21">ConvertToType</name><parameter_list pos:line="13" pos:column="34">()</parameter_list>
        <block pos:line="14" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="15" pos:column="13">var</name></type> <name pos:line="15" pos:column="17">converter</name> <init pos:line="15" pos:column="27">= <expr><op:operator pos:line="15" pos:column="29">new</op:operator> <call><name pos:line="15" pos:column="33">TypeConverter</name><argument_list pos:line="15" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="16" pos:column="13">var</name></type> <name pos:line="16" pos:column="17">name</name> <init pos:line="16" pos:column="22">= <expr><call><name pos:line="16" pos:column="24">GetType</name><argument_list pos:line="16" pos:column="31">()</argument_list></call><op:operator pos:line="16" pos:column="33">.</op:operator><name pos:line="16" pos:column="34">AssemblyQualifiedName</name></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="17" pos:column="13">//Case insensitive type matching</comment>
            <decl_stmt><decl><type><name pos:line="18" pos:column="13">var</name></type> <name pos:line="18" pos:column="17">result</name> <init pos:line="18" pos:column="24">= <expr><call><name><name pos:line="18" pos:column="26">converter</name><op:operator pos:line="18" pos:column="35">.</op:operator><name pos:line="18" pos:column="36">ConvertFrom</name></name><argument_list pos:line="18" pos:column="47">(<argument><expr><call><name><name pos:line="18" pos:column="48">name</name><op:operator pos:line="18" pos:column="52">.</op:operator><name pos:line="18" pos:column="53">ToLower</name></name><argument_list pos:line="18" pos:column="60">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="20" pos:column="13">var</name></type> <name pos:line="20" pos:column="17">type</name> <init pos:line="20" pos:column="22">= <expr><name pos:line="20" pos:column="24">result</name> <op:operator pos:line="20" pos:column="31">as</op:operator> <name pos:line="20" pos:column="34">Type</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="21" pos:column="13">Assert</name><op:operator pos:line="21" pos:column="19">.</op:operator><name pos:line="21" pos:column="20">NotNull</name></name><argument_list pos:line="21" pos:column="27">(<argument><expr><name pos:line="21" pos:column="28">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="22" pos:column="13">Assert</name><op:operator pos:line="22" pos:column="19">.</op:operator><name pos:line="22" pos:column="20">Equal</name></name><argument_list pos:line="22" pos:column="25">(<argument><expr><call><name pos:line="22" pos:column="26">typeof</name><argument_list pos:line="22" pos:column="32">(<argument><expr><name pos:line="22" pos:column="33">TypeConverterShould</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="22" pos:column="55">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="25" pos:column="9">[<expr><name pos:line="25" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="26" pos:column="9">public</specifier> <name pos:line="26" pos:column="16">void</name></type> <name pos:line="26" pos:column="21">ThrowTypeLoadExceptionWithBadTypeString</name><parameter_list pos:line="26" pos:column="60">()</parameter_list>
        <block pos:line="27" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="28" pos:column="13">var</name></type> <name pos:line="28" pos:column="17">converter</name> <init pos:line="28" pos:column="27">= <expr><op:operator pos:line="28" pos:column="29">new</op:operator> <call><name pos:line="28" pos:column="33">TypeConverter</name><argument_list pos:line="28" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="30" pos:column="13">Assert</name><op:operator pos:line="30" pos:column="19">.</op:operator><name><name pos:line="30" pos:column="20">Throws</name><argument_list pos:line="30" pos:column="26">&lt;<argument><name pos:line="30" pos:column="27">TypeLoadException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="30" pos:column="45">(<argument><expr><lambda><parameter_list pos:line="30" pos:column="46">()</parameter_list> <op:operator pos:line="30" pos:column="49">=&gt;</op:operator> <call><name><name pos:line="30" pos:column="52">converter</name><op:operator pos:line="30" pos:column="61">.</op:operator><name pos:line="30" pos:column="62">ConvertFrom</name></name><argument_list pos:line="30" pos:column="73">(<argument><expr><lit:literal type="string" pos:line="30" pos:column="74">"bad string"</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="33" pos:column="9">[<expr><name pos:line="33" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="34" pos:column="9">public</specifier> <name pos:line="34" pos:column="16">void</name></type> <name pos:line="34" pos:column="21">ThrowArgumentExceptionWithMissingTypeString</name><parameter_list pos:line="34" pos:column="64">()</parameter_list>
        <block pos:line="35" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="36" pos:column="13">var</name></type> <name pos:line="36" pos:column="17">converter</name> <init pos:line="36" pos:column="27">= <expr><op:operator pos:line="36" pos:column="29">new</op:operator> <call><name pos:line="36" pos:column="33">TypeConverter</name><argument_list pos:line="36" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="38" pos:column="13">Assert</name><op:operator pos:line="38" pos:column="19">.</op:operator><name><name pos:line="38" pos:column="20">Throws</name><argument_list pos:line="38" pos:column="26">&lt;<argument><name pos:line="38" pos:column="27">ArgumentException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="38" pos:column="45">(<argument><expr><lambda><parameter_list pos:line="38" pos:column="46">()</parameter_list> <op:operator pos:line="38" pos:column="49">=&gt;</op:operator> <call><name><name pos:line="38" pos:column="52">converter</name><op:operator pos:line="38" pos:column="61">.</op:operator><name pos:line="38" pos:column="62">ConvertFrom</name></name><argument_list pos:line="38" pos:column="73">(<argument><expr><lit:literal type="string" pos:line="38" pos:column="74">""</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="39" pos:column="13">Assert</name><op:operator pos:line="39" pos:column="19">.</op:operator><name><name pos:line="39" pos:column="20">Throws</name><argument_list pos:line="39" pos:column="26">&lt;<argument><name pos:line="39" pos:column="27">ArgumentException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="39" pos:column="45">(<argument><expr><lambda><parameter_list pos:line="39" pos:column="46">()</parameter_list> <op:operator pos:line="39" pos:column="49">=&gt;</op:operator> <call><name><name pos:line="39" pos:column="52">converter</name><op:operator pos:line="39" pos:column="61">.</op:operator><name pos:line="39" pos:column="62">ConvertFrom</name></name><argument_list pos:line="39" pos:column="73">(<argument><expr><name pos:line="39" pos:column="74">null</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="42" pos:column="9">[<expr><name pos:line="42" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="43" pos:column="9">public</specifier> <name pos:line="43" pos:column="16">void</name></type> <name pos:line="43" pos:column="21">ConvertTo</name><parameter_list pos:line="43" pos:column="30">()</parameter_list>
        <block pos:line="44" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="45" pos:column="13">var</name></type> <name pos:line="45" pos:column="17">contextMock</name> <init pos:line="45" pos:column="29">= <expr><op:operator pos:line="45" pos:column="31">new</op:operator> <call><name><name pos:line="45" pos:column="35">Mock</name><argument_list pos:line="45" pos:column="39">&lt;<argument><name pos:line="45" pos:column="40">ITypeDescriptorContext</name></argument>&gt;</argument_list></name><argument_list pos:line="45" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="47" pos:column="13">var</name></type> <name pos:line="47" pos:column="17">converter</name> <init pos:line="47" pos:column="27">= <expr><op:operator pos:line="47" pos:column="29">new</op:operator> <call><name pos:line="47" pos:column="33">TypeConverter</name><argument_list pos:line="47" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="49" pos:column="13">var</name></type> <name pos:line="49" pos:column="17">result</name> <init pos:line="49" pos:column="24">= <expr><call><name><name pos:line="49" pos:column="26">converter</name><op:operator pos:line="49" pos:column="35">.</op:operator><name pos:line="49" pos:column="36">ConvertTo</name></name><argument_list pos:line="49" pos:column="45">(<argument><expr><name><name pos:line="49" pos:column="46">contextMock</name><op:operator pos:line="49" pos:column="57">.</op:operator><name pos:line="49" pos:column="58">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="66">Thread</name><op:operator pos:line="49" pos:column="72">.</op:operator><name pos:line="49" pos:column="73">CurrentThread</name><op:operator pos:line="49" pos:column="86">.</op:operator><name pos:line="49" pos:column="87">CurrentCulture</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="49" pos:column="103">"any object"</lit:literal></expr></argument>, <argument><expr><call><name pos:line="49" pos:column="117">typeof</name> <argument_list pos:line="49" pos:column="124">(<argument><expr><name pos:line="49" pos:column="125">string</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
