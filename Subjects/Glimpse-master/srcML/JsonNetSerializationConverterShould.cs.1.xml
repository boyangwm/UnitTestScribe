<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Core\Extensibility\JsonNetSerializationConverterShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">IO</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Text</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Core</name><op:operator pos:line="4" pos:column="19">.</op:operator><name pos:line="4" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Glimpse</name><op:operator pos:line="5" pos:column="14">.</op:operator><name pos:line="5" pos:column="15">Test</name><op:operator pos:line="5" pos:column="19">.</op:operator><name pos:line="5" pos:column="20">Core</name><op:operator pos:line="5" pos:column="24">.</op:operator><name pos:line="5" pos:column="25">TestDoubles</name></name>;</using>
<using pos:line="6" pos:column="1">using <name pos:line="6" pos:column="7">Moq</name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Newtonsoft</name><op:operator pos:line="7" pos:column="17">.</op:operator><name pos:line="7" pos:column="18">Json</name></name>;</using>
<using pos:line="8" pos:column="1">using <name pos:line="8" pos:column="7">Xunit</name>;</using>

<namespace pos:line="10" pos:column="1">namespace <name><name pos:line="10" pos:column="11">Glimpse</name><op:operator pos:line="10" pos:column="18">.</op:operator><name pos:line="10" pos:column="19">Test</name><op:operator pos:line="10" pos:column="23">.</op:operator><name pos:line="10" pos:column="24">Core</name><op:operator pos:line="10" pos:column="28">.</op:operator><name pos:line="10" pos:column="29">Extensibility</name></name>
<block pos:line="11" pos:column="1">{
    <class><specifier pos:line="12" pos:column="5">public</specifier> class <name pos:line="12" pos:column="18">JsonNetSerializationConverterShould</name>
    <block pos:line="13" pos:column="5">{
        <function><type><attribute pos:line="14" pos:column="9">[<expr><name pos:line="14" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="15" pos:column="9">public</specifier> <name pos:line="15" pos:column="16">void</name></type> <name pos:line="15" pos:column="21">Construct</name><parameter_list pos:line="15" pos:column="30">()</parameter_list>
        <block pos:line="16" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="17" pos:column="13">var</name></type> <name pos:line="17" pos:column="17">converterMock</name> <init pos:line="17" pos:column="31">= <expr><op:operator pos:line="17" pos:column="33">new</op:operator> <call><name><name pos:line="17" pos:column="37">Mock</name><argument_list pos:line="17" pos:column="41">&lt;<argument><name pos:line="17" pos:column="42">ISerializationConverter</name></argument>&gt;</argument_list></name><argument_list pos:line="17" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="19" pos:column="13">Assert</name><op:operator pos:line="19" pos:column="19">.</op:operator><name pos:line="19" pos:column="20">NotNull</name></name><argument_list pos:line="19" pos:column="27">(<argument><expr><op:operator pos:line="19" pos:column="28">new</op:operator> <call><name pos:line="19" pos:column="32">JsonNetSerializationConverterAdapter</name><argument_list pos:line="19" pos:column="68">(<argument><expr><name><name pos:line="19" pos:column="69">converterMock</name><op:operator pos:line="19" pos:column="82">.</op:operator><name pos:line="19" pos:column="83">Object</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="22" pos:column="9">[<expr><name pos:line="22" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="23" pos:column="9">public</specifier> <name pos:line="23" pos:column="16">void</name></type> <name pos:line="23" pos:column="21">WriteJson</name><parameter_list pos:line="23" pos:column="30">()</parameter_list>
        <block pos:line="24" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="25" pos:column="13">var</name></type> <name pos:line="25" pos:column="17">converterMock</name> <init pos:line="25" pos:column="31">= <expr><op:operator pos:line="25" pos:column="33">new</op:operator> <call><name><name pos:line="25" pos:column="37">Mock</name><argument_list pos:line="25" pos:column="41">&lt;<argument><name pos:line="25" pos:column="42">ISerializationConverter</name></argument>&gt;</argument_list></name><argument_list pos:line="25" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="27" pos:column="13">var</name></type> <name pos:line="27" pos:column="17">adapter</name> <init pos:line="27" pos:column="25">= <expr><op:operator pos:line="27" pos:column="27">new</op:operator> <call><name pos:line="27" pos:column="31">JsonNetSerializationConverterAdapter</name><argument_list pos:line="27" pos:column="67">(<argument><expr><name><name pos:line="27" pos:column="68">converterMock</name><op:operator pos:line="27" pos:column="81">.</op:operator><name pos:line="27" pos:column="82">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="29" pos:column="13">var</name></type> <name pos:line="29" pos:column="17">jsonTextWriter</name> <init pos:line="29" pos:column="32">= <expr><op:operator pos:line="29" pos:column="34">new</op:operator> <call><name pos:line="29" pos:column="38">JsonTextWriter</name><argument_list pos:line="29" pos:column="52">(<argument><expr><op:operator pos:line="29" pos:column="53">new</op:operator> <call><name pos:line="29" pos:column="57">StringWriter</name><argument_list pos:line="29" pos:column="69">(<argument><expr><op:operator pos:line="29" pos:column="70">new</op:operator> <call><name pos:line="29" pos:column="74">StringBuilder</name><argument_list pos:line="29" pos:column="87">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="30" pos:column="13">var</name></type> <name pos:line="30" pos:column="17">obj</name> <init pos:line="30" pos:column="21">= <expr><op:operator pos:line="30" pos:column="23">new</op:operator> <block pos:line="30" pos:column="27">{<expr><name pos:line="30" pos:column="28">It</name> <op:operator pos:line="30" pos:column="31">=</op:operator> <lit:literal type="string" pos:line="30" pos:column="33">"Any"</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="31" pos:column="13">var</name></type> <name pos:line="31" pos:column="17">jsonSerializer</name> <init pos:line="31" pos:column="32">= <expr><call><name><name pos:line="31" pos:column="34">JsonSerializer</name><op:operator pos:line="31" pos:column="48">.</op:operator><name pos:line="31" pos:column="49">Create</name></name><argument_list pos:line="31" pos:column="55">(<argument><expr><op:operator pos:line="31" pos:column="56">new</op:operator> <call><name pos:line="31" pos:column="60">JsonSerializerSettings</name><argument_list pos:line="31" pos:column="82">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="32" pos:column="13">adapter</name><op:operator pos:line="32" pos:column="20">.</op:operator><name pos:line="32" pos:column="21">WriteJson</name></name><argument_list pos:line="32" pos:column="30">(<argument><expr><name pos:line="32" pos:column="31">jsonTextWriter</name></expr></argument>,  <argument><expr><name pos:line="32" pos:column="48">obj</name></expr></argument>, <argument><expr><name pos:line="32" pos:column="53">jsonSerializer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="34" pos:column="13">converterMock</name><op:operator pos:line="34" pos:column="26">.</op:operator><name pos:line="34" pos:column="27">Verify</name></name><argument_list pos:line="34" pos:column="33">(<argument><expr><lambda><name pos:line="34" pos:column="34">c</name><op:operator pos:line="34" pos:column="35">=&gt;</op:operator><call><name><name pos:line="34" pos:column="37">c</name><op:operator pos:line="34" pos:column="38">.</op:operator><name pos:line="34" pos:column="39">Convert</name></name><argument_list pos:line="34" pos:column="46">(<argument><expr><name pos:line="34" pos:column="47">obj</name></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="34" pos:column="53">Times</name><op:operator pos:line="34" pos:column="58">.</op:operator><name pos:line="34" pos:column="59">Once</name></name><argument_list pos:line="34" pos:column="63">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="37" pos:column="9">[<expr><name pos:line="37" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="38" pos:column="9">public</specifier> <name pos:line="38" pos:column="16">void</name></type> <name pos:line="38" pos:column="21">ReadJson</name><parameter_list pos:line="38" pos:column="29">()</parameter_list>
        <block pos:line="39" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="40" pos:column="13">var</name></type> <name pos:line="40" pos:column="17">converterMock</name> <init pos:line="40" pos:column="31">= <expr><op:operator pos:line="40" pos:column="33">new</op:operator> <call><name><name pos:line="40" pos:column="37">Mock</name><argument_list pos:line="40" pos:column="41">&lt;<argument><name pos:line="40" pos:column="42">ISerializationConverter</name></argument>&gt;</argument_list></name><argument_list pos:line="40" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="42" pos:column="13">var</name></type> <name pos:line="42" pos:column="17">adapter</name> <init pos:line="42" pos:column="25">= <expr><op:operator pos:line="42" pos:column="27">new</op:operator> <call><name pos:line="42" pos:column="31">JsonNetSerializationConverterAdapter</name><argument_list pos:line="42" pos:column="67">(<argument><expr><name><name pos:line="42" pos:column="68">converterMock</name><op:operator pos:line="42" pos:column="81">.</op:operator><name pos:line="42" pos:column="82">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="44" pos:column="13">Assert</name><op:operator pos:line="44" pos:column="19">.</op:operator><name><name pos:line="44" pos:column="20">Throws</name><argument_list pos:line="44" pos:column="26">&lt;<argument><name pos:line="44" pos:column="27">NotSupportedException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="44" pos:column="49">(<argument><expr><lambda><parameter_list pos:line="44" pos:column="50">()</parameter_list><op:operator pos:line="44" pos:column="52">=&gt;</op:operator><call><name><name pos:line="44" pos:column="54">adapter</name><op:operator pos:line="44" pos:column="61">.</op:operator><name pos:line="44" pos:column="62">ReadJson</name></name><argument_list pos:line="44" pos:column="70">(<argument><expr><name pos:line="44" pos:column="71">null</name></expr></argument>, <argument><expr><name pos:line="44" pos:column="77">null</name></expr></argument>, <argument><expr><name pos:line="44" pos:column="83">null</name></expr></argument>, <argument><expr><name pos:line="44" pos:column="89">null</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="47" pos:column="9">[<expr><name pos:line="47" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="48" pos:column="9">public</specifier> <name pos:line="48" pos:column="16">void</name></type> <name pos:line="48" pos:column="21">CanConvertWithMatch</name><parameter_list pos:line="48" pos:column="40">()</parameter_list>
        <block pos:line="49" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="50" pos:column="13">var</name></type> <name pos:line="50" pos:column="17">converterMock</name> <init pos:line="50" pos:column="31">= <expr><op:operator pos:line="50" pos:column="33">new</op:operator> <call><name><name pos:line="50" pos:column="37">Mock</name><argument_list pos:line="50" pos:column="41">&lt;<argument><name pos:line="50" pos:column="42">ISerializationConverter</name></argument>&gt;</argument_list></name><argument_list pos:line="50" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="51" pos:column="13">converterMock</name><op:operator pos:line="51" pos:column="26">.</op:operator><name pos:line="51" pos:column="27">Setup</name></name><argument_list pos:line="51" pos:column="32">(<argument><expr><lambda><name pos:line="51" pos:column="33">c</name> <op:operator pos:line="51" pos:column="35">=&gt;</op:operator> <name><name pos:line="51" pos:column="38">c</name><op:operator pos:line="51" pos:column="39">.</op:operator><name pos:line="51" pos:column="40">SupportedTypes</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="51" pos:column="55">.</op:operator><call><name pos:line="51" pos:column="56">Returns</name><argument_list pos:line="51" pos:column="63">(<argument><expr><op:operator pos:line="51" pos:column="64">new</op:operator><index pos:line="51" pos:column="67">[]</index> <block pos:line="51" pos:column="70">{ <expr><call><name pos:line="51" pos:column="72">typeof</name><argument_list pos:line="51" pos:column="78">(<argument><expr><name pos:line="51" pos:column="79">DummyObjectContext</name></expr></argument>)</argument_list></call></expr><op:operator pos:line="51" pos:column="98">,</op:operator> <expr><call><name pos:line="51" pos:column="100">typeof</name><argument_list pos:line="51" pos:column="106">(<argument><expr><name pos:line="51" pos:column="107">string</name></expr></argument>)</argument_list></call></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="53" pos:column="13">var</name></type> <name pos:line="53" pos:column="17">adapter</name> <init pos:line="53" pos:column="25">= <expr><op:operator pos:line="53" pos:column="27">new</op:operator> <call><name pos:line="53" pos:column="31">JsonNetSerializationConverterAdapter</name><argument_list pos:line="53" pos:column="67">(<argument><expr><name><name pos:line="53" pos:column="68">converterMock</name><op:operator pos:line="53" pos:column="81">.</op:operator><name pos:line="53" pos:column="82">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="55" pos:column="13">Assert</name><op:operator pos:line="55" pos:column="19">.</op:operator><name pos:line="55" pos:column="20">True</name></name><argument_list pos:line="55" pos:column="24">(<argument><expr><call><name><name pos:line="55" pos:column="25">adapter</name><op:operator pos:line="55" pos:column="32">.</op:operator><name pos:line="55" pos:column="33">CanConvert</name></name><argument_list pos:line="55" pos:column="43">(<argument><expr><call><name pos:line="55" pos:column="44">typeof</name><argument_list pos:line="55" pos:column="50">(<argument><expr><name pos:line="55" pos:column="51">DummyObjectContext</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="58" pos:column="9">[<expr><name pos:line="58" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="59" pos:column="9">public</specifier> <name pos:line="59" pos:column="16">void</name></type> <name pos:line="59" pos:column="21">CanConvertWithoutMatch</name><parameter_list pos:line="59" pos:column="43">()</parameter_list>
        <block pos:line="60" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="61" pos:column="13">var</name></type> <name pos:line="61" pos:column="17">converterMock</name> <init pos:line="61" pos:column="31">= <expr><op:operator pos:line="61" pos:column="33">new</op:operator> <call><name><name pos:line="61" pos:column="37">Mock</name><argument_list pos:line="61" pos:column="41">&lt;<argument><name pos:line="61" pos:column="42">ISerializationConverter</name></argument>&gt;</argument_list></name><argument_list pos:line="61" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="62" pos:column="13">converterMock</name><op:operator pos:line="62" pos:column="26">.</op:operator><name pos:line="62" pos:column="27">Setup</name></name><argument_list pos:line="62" pos:column="32">(<argument><expr><lambda><name pos:line="62" pos:column="33">c</name> <op:operator pos:line="62" pos:column="35">=&gt;</op:operator> <name><name pos:line="62" pos:column="38">c</name><op:operator pos:line="62" pos:column="39">.</op:operator><name pos:line="62" pos:column="40">SupportedTypes</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="62" pos:column="55">.</op:operator><call><name pos:line="62" pos:column="56">Returns</name><argument_list pos:line="62" pos:column="63">(<argument><expr><op:operator pos:line="62" pos:column="64">new</op:operator><index pos:line="62" pos:column="67">[]</index> <block pos:line="62" pos:column="70">{ <expr><call><name pos:line="62" pos:column="72">typeof</name><argument_list pos:line="62" pos:column="78">(<argument><expr><name pos:line="62" pos:column="79">DummyObjectContext</name></expr></argument>)</argument_list></call></expr><op:operator pos:line="62" pos:column="98">,</op:operator> <expr><call><name pos:line="62" pos:column="100">typeof</name><argument_list pos:line="62" pos:column="106">(<argument><expr><name pos:line="62" pos:column="107">string</name></expr></argument>)</argument_list></call></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="64" pos:column="13">var</name></type> <name pos:line="64" pos:column="17">adapter</name> <init pos:line="64" pos:column="25">= <expr><op:operator pos:line="64" pos:column="27">new</op:operator> <call><name pos:line="64" pos:column="31">JsonNetSerializationConverterAdapter</name><argument_list pos:line="64" pos:column="67">(<argument><expr><name><name pos:line="64" pos:column="68">converterMock</name><op:operator pos:line="64" pos:column="81">.</op:operator><name pos:line="64" pos:column="82">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="66" pos:column="13">Assert</name><op:operator pos:line="66" pos:column="19">.</op:operator><name pos:line="66" pos:column="20">False</name></name><argument_list pos:line="66" pos:column="25">(<argument><expr><call><name><name pos:line="66" pos:column="26">adapter</name><op:operator pos:line="66" pos:column="33">.</op:operator><name pos:line="66" pos:column="34">CanConvert</name></name><argument_list pos:line="66" pos:column="44">(<argument><expr><call><name pos:line="66" pos:column="45">typeof</name><argument_list pos:line="66" pos:column="51">(<argument><expr><name pos:line="66" pos:column="52">int</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
