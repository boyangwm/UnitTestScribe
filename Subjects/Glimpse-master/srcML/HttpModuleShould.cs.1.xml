<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.AspNet\HttpModuleShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Reflection</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Glimpse</name><op:operator pos:line="3" pos:column="14">.</op:operator><name pos:line="3" pos:column="15">AspNet</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Test</name><op:operator pos:line="4" pos:column="19">.</op:operator><name pos:line="4" pos:column="20">AspNet</name><op:operator pos:line="4" pos:column="26">.</op:operator><name pos:line="4" pos:column="27">Tester</name></name>;</using>
<using pos:line="5" pos:column="1">using <name pos:line="5" pos:column="7">Xunit</name>;</using>
<using pos:line="6" pos:column="1">using <name pos:line="6" pos:column="7">Moq</name>;</using>

<namespace pos:line="8" pos:column="1">namespace <name><name pos:line="8" pos:column="11">Glimpse</name><op:operator pos:line="8" pos:column="18">.</op:operator><name pos:line="8" pos:column="19">Test</name><op:operator pos:line="8" pos:column="23">.</op:operator><name pos:line="8" pos:column="24">AspNet</name></name>
<block pos:line="9" pos:column="1">{
    <class><specifier pos:line="10" pos:column="5">public</specifier> class <name pos:line="10" pos:column="18">HttpModuleShould</name><super pos:line="10" pos:column="34">:<name pos:line="10" pos:column="35">IDisposable</name></super>
    <block pos:line="11" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="12" pos:column="9">private</specifier> <name pos:line="12" pos:column="17">HttpModuleTester</name></type> <name pos:line="12" pos:column="34">tester</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="14" pos:column="9">private</specifier> <name pos:line="14" pos:column="17">HttpModuleTester</name></type> <name pos:line="14" pos:column="34">HttpModule</name>
        <block pos:line="15" pos:column="9">{
            <function><name pos:line="16" pos:column="13">get</name> <block pos:line="16" pos:column="17">{ <return pos:line="16" pos:column="19">return <expr><name pos:line="16" pos:column="26">tester</name> <op:operator pos:line="16" pos:column="33">??</op:operator> <op:operator pos:line="16" pos:column="36">(</op:operator><name pos:line="16" pos:column="37">tester</name> <op:operator pos:line="16" pos:column="44">=</op:operator> <call><name><name pos:line="16" pos:column="46">HttpModuleTester</name><op:operator pos:line="16" pos:column="62">.</op:operator><name pos:line="16" pos:column="63">Create</name></name><argument_list pos:line="16" pos:column="69">()</argument_list></call><op:operator pos:line="16" pos:column="71">)</op:operator></expr>;</return> }</block></function>
            <function><name pos:line="17" pos:column="13">set</name> <block pos:line="17" pos:column="17">{ <expr_stmt><expr><name pos:line="17" pos:column="19">tester</name> <op:operator pos:line="17" pos:column="26">=</op:operator> <name pos:line="17" pos:column="28">value</name></expr>;</expr_stmt> }</block></function>
        }</block></decl></decl_stmt>

        <function><type><specifier pos:line="20" pos:column="9">public</specifier> <name pos:line="20" pos:column="16">void</name></type> <name pos:line="20" pos:column="21">Dispose</name><parameter_list pos:line="20" pos:column="28">()</parameter_list>
        <block pos:line="21" pos:column="9">{
            <expr_stmt><expr><name pos:line="22" pos:column="13">HttpModule</name> <op:operator pos:line="22" pos:column="24">=</op:operator> <name pos:line="22" pos:column="26">null</name></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="25" pos:column="9">[<expr><name pos:line="25" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="26" pos:column="9">public</specifier> <name pos:line="26" pos:column="16">void</name></type> <name pos:line="26" pos:column="21">GetGlimpseRuntimeFromAppState</name><parameter_list pos:line="26" pos:column="50">()</parameter_list>
        <block pos:line="27" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="28" pos:column="13">var</name></type> <name pos:line="28" pos:column="17">runtime</name> <init pos:line="28" pos:column="25">= <expr><call><name><name pos:line="28" pos:column="27">HttpModule</name><op:operator pos:line="28" pos:column="37">.</op:operator><name pos:line="28" pos:column="38">GetRuntime</name></name><argument_list pos:line="28" pos:column="48">(<argument><expr><name><name pos:line="28" pos:column="49">HttpModule</name><op:operator pos:line="28" pos:column="59">.</op:operator><name pos:line="28" pos:column="60">AppStateMock</name><op:operator pos:line="28" pos:column="72">.</op:operator><name pos:line="28" pos:column="73">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="30" pos:column="13">Assert</name><op:operator pos:line="30" pos:column="19">.</op:operator><name pos:line="30" pos:column="20">Equal</name></name><argument_list pos:line="30" pos:column="25">(<argument><expr><name><name pos:line="30" pos:column="26">HttpModule</name><op:operator pos:line="30" pos:column="36">.</op:operator><name pos:line="30" pos:column="37">RuntimeMock</name><op:operator pos:line="30" pos:column="48">.</op:operator><name pos:line="30" pos:column="49">Object</name></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="57">runtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="33" pos:column="9">[<expr><name pos:line="33" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="34" pos:column="9">public</specifier> <name pos:line="34" pos:column="16">void</name></type> <name pos:line="34" pos:column="21">CallGlimpseRuntimeBeginRequestOnBeginRequest</name><parameter_list pos:line="34" pos:column="65">()</parameter_list>
        <block pos:line="35" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="36" pos:column="13">HttpModule</name><op:operator pos:line="36" pos:column="23">.</op:operator><name pos:line="36" pos:column="24">BeginRequest</name></name><argument_list pos:line="36" pos:column="36">(<argument><expr><name><name pos:line="36" pos:column="37">HttpModule</name><op:operator pos:line="36" pos:column="47">.</op:operator><name pos:line="36" pos:column="48">ContextMock</name><op:operator pos:line="36" pos:column="59">.</op:operator><name pos:line="36" pos:column="60">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="38" pos:column="13">HttpModule</name><op:operator pos:line="38" pos:column="23">.</op:operator><name pos:line="38" pos:column="24">RuntimeMock</name><op:operator pos:line="38" pos:column="35">.</op:operator><name pos:line="38" pos:column="36">Verify</name></name><argument_list pos:line="38" pos:column="42">(<argument><expr><lambda><name pos:line="38" pos:column="43">r</name><op:operator pos:line="38" pos:column="44">=&gt;</op:operator><call><name><name pos:line="38" pos:column="46">r</name><op:operator pos:line="38" pos:column="47">.</op:operator><name pos:line="38" pos:column="48">BeginRequest</name></name><argument_list pos:line="38" pos:column="60">()</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="38" pos:column="64">Times</name><op:operator pos:line="38" pos:column="69">.</op:operator><name pos:line="38" pos:column="70">Once</name></name><argument_list pos:line="38" pos:column="74">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="41" pos:column="9">[<expr><name pos:line="41" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="42" pos:column="9">public</specifier> <name pos:line="42" pos:column="16">void</name></type> <name pos:line="42" pos:column="21">DisposeNothing</name><parameter_list pos:line="42" pos:column="35">()</parameter_list>
        <block pos:line="43" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="44" pos:column="13">HttpModule</name><op:operator pos:line="44" pos:column="23">.</op:operator><name pos:line="44" pos:column="24">Dispose</name></name><argument_list pos:line="44" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="47" pos:column="9">[<expr><name pos:line="47" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="48" pos:column="9">public</specifier> <name pos:line="48" pos:column="16">void</name></type> <name pos:line="48" pos:column="21">HaveLoggedAppDomainUnloadMessage</name><parameter_list pos:line="48" pos:column="53">()</parameter_list>
        <block pos:line="49" pos:column="9">{
            <comment type="line" pos:line="50" pos:column="13">// to make sure the HttpModule's type constructor has been run, otherwise the previous logger will have a value of null, which will be </comment>
            <comment type="line" pos:line="51" pos:column="13">// restored after the test, making other tests fail, because the HttpModule's type constructor will eventually be run by calling the </comment>
            <comment type="line" pos:line="52" pos:column="13">// OnAppDomainUnload method, which will set the correct logger, but that will be undone by setting the null value back.</comment>
            <expr_stmt><expr><call><name><name pos:line="53" pos:column="13">Assert</name><op:operator pos:line="53" pos:column="19">.</op:operator><name pos:line="53" pos:column="20">NotNull</name></name><argument_list pos:line="53" pos:column="27">(<argument><expr><name><name pos:line="53" pos:column="28">this</name><op:operator pos:line="53" pos:column="32">.</op:operator><name pos:line="53" pos:column="33">HttpModule</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="55" pos:column="13">var</name></type> <name pos:line="55" pos:column="17">currentDomain</name> <init pos:line="55" pos:column="31">= <expr><name><name pos:line="55" pos:column="33">AppDomain</name><op:operator pos:line="55" pos:column="42">.</op:operator><name pos:line="55" pos:column="43">CurrentDomain</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="57" pos:column="13">object</name></type> <name pos:line="57" pos:column="20">previousLoggerKeyValue</name> <init pos:line="57" pos:column="43">= <expr><call><name><name pos:line="57" pos:column="45">currentDomain</name><op:operator pos:line="57" pos:column="58">.</op:operator><name pos:line="57" pos:column="59">GetData</name></name><argument_list pos:line="57" pos:column="66">(<argument><expr><name><name pos:line="57" pos:column="67">Constants</name><op:operator pos:line="57" pos:column="76">.</op:operator><name pos:line="57" pos:column="77">LoggerKey</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <try pos:line="58" pos:column="13">try
            <block pos:line="59" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="60" pos:column="17">currentDomain</name><op:operator pos:line="60" pos:column="30">.</op:operator><name pos:line="60" pos:column="31">SetData</name></name><argument_list pos:line="60" pos:column="38">(<argument><expr><name><name pos:line="60" pos:column="39">Constants</name><op:operator pos:line="60" pos:column="48">.</op:operator><name pos:line="60" pos:column="49">LoggerKey</name></name></expr></argument>, <argument><expr><name><name pos:line="60" pos:column="60">HttpModule</name><op:operator pos:line="60" pos:column="70">.</op:operator><name pos:line="60" pos:column="71">LoggerMock</name><op:operator pos:line="60" pos:column="81">.</op:operator><name pos:line="60" pos:column="82">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="61" pos:column="17">typeof</name><argument_list pos:line="61" pos:column="23">(<argument><expr><name pos:line="61" pos:column="24">HttpModule</name></expr></argument>)</argument_list></call><op:operator pos:line="61" pos:column="35">.</op:operator><call><name pos:line="61" pos:column="36">GetMethod</name><argument_list pos:line="61" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="61" pos:column="46">"OnAppDomainUnload"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="61" pos:column="67">BindingFlags</name><op:operator pos:line="61" pos:column="79">.</op:operator><name pos:line="61" pos:column="80">NonPublic</name></name> <op:operator pos:line="61" pos:column="90">|</op:operator> <name><name pos:line="61" pos:column="92">BindingFlags</name><op:operator pos:line="61" pos:column="104">.</op:operator><name pos:line="61" pos:column="105">Static</name></name></expr></argument>)</argument_list></call><op:operator pos:line="61" pos:column="112">.</op:operator><call><name pos:line="61" pos:column="113">Invoke</name><argument_list pos:line="61" pos:column="119">(<argument><expr><name pos:line="61" pos:column="120">HttpModule</name></expr></argument>, <argument><expr><op:operator pos:line="61" pos:column="132">new</op:operator> <name><name pos:line="61" pos:column="136">object</name><index pos:line="61" pos:column="142">[]</index></name> <block pos:line="61" pos:column="145">{ <expr><name pos:line="61" pos:column="147">currentDomain</name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="62" pos:column="17">HttpModule</name><op:operator pos:line="62" pos:column="27">.</op:operator><name pos:line="62" pos:column="28">LoggerMock</name><op:operator pos:line="62" pos:column="38">.</op:operator><name pos:line="62" pos:column="39">Verify</name></name><argument_list pos:line="62" pos:column="45">(<argument><expr><lambda><name pos:line="62" pos:column="46">l</name> <op:operator pos:line="62" pos:column="48">=&gt;</op:operator> <call><name><name pos:line="62" pos:column="51">l</name><op:operator pos:line="62" pos:column="52">.</op:operator><name pos:line="62" pos:column="53">Fatal</name></name><argument_list pos:line="62" pos:column="58">(<argument><expr><call><name><name pos:line="62" pos:column="59">It</name><op:operator pos:line="62" pos:column="61">.</op:operator><name><name pos:line="62" pos:column="62">IsAny</name><argument_list pos:line="62" pos:column="67">&lt;<argument><name pos:line="62" pos:column="68">string</name></argument>&gt;</argument_list></name></name><argument_list pos:line="62" pos:column="75">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="62" pos:column="79">It</name><op:operator pos:line="62" pos:column="81">.</op:operator><name><name pos:line="62" pos:column="82">IsAny</name><argument_list pos:line="62" pos:column="87">&lt;<argument><name><name pos:line="62" pos:column="88">object</name><index pos:line="62" pos:column="94">[]</index></name></argument>&gt;</argument_list></name></name><argument_list pos:line="62" pos:column="97">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <finally pos:line="64" pos:column="13">finally
            <block pos:line="65" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="66" pos:column="17">currentDomain</name><op:operator pos:line="66" pos:column="30">.</op:operator><name pos:line="66" pos:column="31">SetData</name></name><argument_list pos:line="66" pos:column="38">(<argument><expr><name><name pos:line="66" pos:column="39">Constants</name><op:operator pos:line="66" pos:column="48">.</op:operator><name pos:line="66" pos:column="49">LoggerKey</name></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="60">previousLoggerKeyValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>
        }</block></function>

        <function><type><attribute pos:line="70" pos:column="9">[<expr><name pos:line="70" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="71" pos:column="9">public</specifier> <name pos:line="71" pos:column="16">void</name></type> <name pos:line="71" pos:column="21">HaveStoredLoggerInAppDomainData</name><parameter_list pos:line="71" pos:column="52">()</parameter_list>
        <block pos:line="72" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="73" pos:column="13">Assert</name><op:operator pos:line="73" pos:column="19">.</op:operator><name pos:line="73" pos:column="20">NotNull</name></name><argument_list pos:line="73" pos:column="27">(<argument><expr><name><name pos:line="73" pos:column="28">this</name><op:operator pos:line="73" pos:column="32">.</op:operator><name pos:line="73" pos:column="33">HttpModule</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="73" pos:column="46">// triggering the call of the HttpModule's type constructor (if not already called)</comment>
            <expr_stmt><expr><call><name><name pos:line="74" pos:column="13">Assert</name><op:operator pos:line="74" pos:column="19">.</op:operator><name pos:line="74" pos:column="20">NotNull</name></name><argument_list pos:line="74" pos:column="27">(<argument><expr><call><name><name pos:line="74" pos:column="28">AppDomain</name><op:operator pos:line="74" pos:column="37">.</op:operator><name pos:line="74" pos:column="38">CurrentDomain</name><op:operator pos:line="74" pos:column="51">.</op:operator><name pos:line="74" pos:column="52">GetData</name></name><argument_list pos:line="74" pos:column="59">(<argument><expr><name><name pos:line="74" pos:column="60">Constants</name><op:operator pos:line="74" pos:column="69">.</op:operator><name pos:line="74" pos:column="70">LoggerKey</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
