<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Mvc\Inspector\ViewEngineShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Web</name><op:operator pos:line="4" pos:column="17">.</op:operator><name pos:line="4" pos:column="18">Mvc</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Glimpse</name><op:operator pos:line="5" pos:column="14">.</op:operator><name pos:line="5" pos:column="15">Core</name><op:operator pos:line="5" pos:column="19">.</op:operator><name pos:line="5" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Glimpse</name><op:operator pos:line="6" pos:column="14">.</op:operator><name pos:line="6" pos:column="15">Mvc</name><op:operator pos:line="6" pos:column="18">.</op:operator><name pos:line="6" pos:column="19">Inspector</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Glimpse</name><op:operator pos:line="7" pos:column="14">.</op:operator><name pos:line="7" pos:column="15">Test</name><op:operator pos:line="7" pos:column="19">.</op:operator><name pos:line="7" pos:column="20">Common</name></name>;</using>
<using pos:line="8" pos:column="1">using <name pos:line="8" pos:column="7">Moq</name>;</using>
<using pos:line="9" pos:column="1">using <name pos:line="9" pos:column="7">Xunit</name>;</using>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">Xunit</name><op:operator pos:line="10" pos:column="12">.</op:operator><name pos:line="10" pos:column="13">Extensions</name></name>;</using>

<namespace pos:line="12" pos:column="1">namespace <name><name pos:line="12" pos:column="11">Glimpse</name><op:operator pos:line="12" pos:column="18">.</op:operator><name pos:line="12" pos:column="19">Test</name><op:operator pos:line="12" pos:column="23">.</op:operator><name pos:line="12" pos:column="24">Mvc</name><op:operator pos:line="12" pos:column="27">.</op:operator><name pos:line="12" pos:column="28">Inspector</name></name>
<block pos:line="13" pos:column="1">{
    <class><specifier pos:line="14" pos:column="5">public</specifier> class <name pos:line="14" pos:column="18">ViewEngineShould</name>
    <block pos:line="15" pos:column="5">{
        <constructor><specifier pos:line="16" pos:column="9">public</specifier> <name pos:line="16" pos:column="16">ViewEngineShould</name><parameter_list pos:line="16" pos:column="32">()</parameter_list>
        <block pos:line="17" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="18" pos:column="13">ViewEngines</name><op:operator pos:line="18" pos:column="24">.</op:operator><name pos:line="18" pos:column="25">Engines</name><op:operator pos:line="18" pos:column="32">.</op:operator><name pos:line="18" pos:column="33">Clear</name></name><argument_list pos:line="18" pos:column="38">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="19" pos:column="13">ViewEngines</name><op:operator pos:line="19" pos:column="24">.</op:operator><name pos:line="19" pos:column="25">Engines</name><op:operator pos:line="19" pos:column="32">.</op:operator><name pos:line="19" pos:column="33">Add</name></name><argument_list pos:line="19" pos:column="36">(<argument><expr><op:operator pos:line="19" pos:column="37">new</op:operator> <call><name pos:line="19" pos:column="41">WebFormViewEngine</name><argument_list pos:line="19" pos:column="58">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="20" pos:column="13">ViewEngines</name><op:operator pos:line="20" pos:column="24">.</op:operator><name pos:line="20" pos:column="25">Engines</name><op:operator pos:line="20" pos:column="32">.</op:operator><name pos:line="20" pos:column="33">Add</name></name><argument_list pos:line="20" pos:column="36">(<argument><expr><op:operator pos:line="20" pos:column="37">new</op:operator> <call><name pos:line="20" pos:column="41">RazorViewEngine</name><argument_list pos:line="20" pos:column="56">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><attribute pos:line="23" pos:column="9">[<expr><name pos:line="23" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="24" pos:column="9">public</specifier> <name pos:line="24" pos:column="16">void</name></type> <name pos:line="24" pos:column="21">Construct</name><parameter_list pos:line="24" pos:column="30">()</parameter_list>
        <block pos:line="25" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="26" pos:column="13">var</name></type> <name pos:line="26" pos:column="17">sut</name> <init pos:line="26" pos:column="21">= <expr><op:operator pos:line="26" pos:column="23">new</op:operator> <call><name pos:line="26" pos:column="27">ViewEngineInspector</name><argument_list pos:line="26" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="28" pos:column="13">Assert</name><op:operator pos:line="28" pos:column="19">.</op:operator><name pos:line="28" pos:column="20">NotNull</name></name><argument_list pos:line="28" pos:column="27">(<argument><expr><name pos:line="28" pos:column="28">sut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="29" pos:column="13">Assert</name><op:operator pos:line="29" pos:column="19">.</op:operator><name><name pos:line="29" pos:column="20">IsAssignableFrom</name><argument_list pos:line="29" pos:column="36">&lt;<argument><name pos:line="29" pos:column="37">IInspector</name></argument>&gt;</argument_list></name></name><argument_list pos:line="29" pos:column="48">(<argument><expr><name pos:line="29" pos:column="49">sut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="32" pos:column="9">[<expr><name pos:line="32" pos:column="10">Theory</name></expr><op:operator pos:line="32" pos:column="16">,</op:operator> <expr><name pos:line="32" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="33" pos:column="9">public</specifier> <name pos:line="33" pos:column="16">void</name></type> <name pos:line="33" pos:column="21">Setup</name><parameter_list pos:line="33" pos:column="26">(<param><decl><type><name pos:line="33" pos:column="27">ViewEngineInspector</name></type> <name pos:line="33" pos:column="47">sut</name></decl></param>, <param><decl><type><name pos:line="33" pos:column="52">IInspectorContext</name></type> <name pos:line="33" pos:column="70">context</name></decl></param>, <param><decl><type><name pos:line="33" pos:column="79">IViewEngine</name></type> <name pos:line="33" pos:column="91">viewEngine</name></decl></param>)</parameter_list>
        <block pos:line="34" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="35" pos:column="13">context</name><op:operator pos:line="35" pos:column="20">.</op:operator><name pos:line="35" pos:column="21">ProxyFactory</name><op:operator pos:line="35" pos:column="33">.</op:operator><name pos:line="35" pos:column="34">Setup</name></name><argument_list pos:line="35" pos:column="39">(<argument><expr><lambda><name pos:line="35" pos:column="40">pf</name> <op:operator pos:line="35" pos:column="43">=&gt;</op:operator> <call><name><name pos:line="35" pos:column="46">pf</name><op:operator pos:line="35" pos:column="48">.</op:operator><name><name pos:line="35" pos:column="49">IsWrapInterfaceEligible</name><argument_list pos:line="35" pos:column="72">&lt;<argument><name pos:line="35" pos:column="73">IViewEngine</name></argument>&gt;</argument_list></name></name><argument_list pos:line="35" pos:column="85">(<argument><expr><call><name><name pos:line="35" pos:column="86">It</name><op:operator pos:line="35" pos:column="88">.</op:operator><name><name pos:line="35" pos:column="89">IsAny</name><argument_list pos:line="35" pos:column="94">&lt;<argument><name pos:line="35" pos:column="95">Type</name></argument>&gt;</argument_list></name></name><argument_list pos:line="35" pos:column="100">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="35" pos:column="104">.</op:operator><call><name pos:line="35" pos:column="105">Returns</name><argument_list pos:line="35" pos:column="112">(<argument><expr><lit:literal type="boolean" pos:line="35" pos:column="113">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="36" pos:column="13">context</name><op:operator pos:line="36" pos:column="20">.</op:operator><name pos:line="36" pos:column="21">ProxyFactory</name><op:operator pos:line="36" pos:column="33">.</op:operator><name pos:line="36" pos:column="34">Setup</name></name><argument_list pos:line="36" pos:column="39">(<argument><expr><lambda><name pos:line="36" pos:column="40">pf</name> <op:operator pos:line="36" pos:column="43">=&gt;</op:operator> <call><name><name pos:line="36" pos:column="46">pf</name><op:operator pos:line="36" pos:column="48">.</op:operator><name pos:line="36" pos:column="49">WrapInterface</name></name><argument_list pos:line="36" pos:column="62">(<argument><expr><call><name><name pos:line="36" pos:column="63">It</name><op:operator pos:line="36" pos:column="65">.</op:operator><name><name pos:line="36" pos:column="66">IsAny</name><argument_list pos:line="36" pos:column="71">&lt;<argument><name pos:line="36" pos:column="72">IViewEngine</name></argument>&gt;</argument_list></name></name><argument_list pos:line="36" pos:column="84">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="36" pos:column="88">It</name><op:operator pos:line="36" pos:column="90">.</op:operator><name><name pos:line="36" pos:column="91">IsAny</name><argument_list pos:line="36" pos:column="96">&lt;<argument><name><name pos:line="36" pos:column="97">IEnumerable</name><argument_list pos:line="36" pos:column="108">&lt;<argument><name pos:line="36" pos:column="109">IAlternateMethod</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name><argument_list pos:line="36" pos:column="127">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="36" pos:column="131">Enumerable</name><op:operator pos:line="36" pos:column="141">.</op:operator><name><name pos:line="36" pos:column="142">Empty</name><argument_list pos:line="36" pos:column="147">&lt;<argument><name pos:line="36" pos:column="148">object</name></argument>&gt;</argument_list></name></name><argument_list pos:line="36" pos:column="155">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="36" pos:column="159">.</op:operator><call><name pos:line="36" pos:column="160">Returns</name><argument_list pos:line="36" pos:column="167">(<argument><expr><name pos:line="36" pos:column="168">viewEngine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="38" pos:column="13">sut</name><op:operator pos:line="38" pos:column="16">.</op:operator><name pos:line="38" pos:column="17">Setup</name></name><argument_list pos:line="38" pos:column="22">(<argument><expr><name pos:line="38" pos:column="23">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="40" pos:column="13">context</name><op:operator pos:line="40" pos:column="20">.</op:operator><name pos:line="40" pos:column="21">ProxyFactory</name><op:operator pos:line="40" pos:column="33">.</op:operator><name pos:line="40" pos:column="34">Verify</name></name><argument_list pos:line="40" pos:column="40">(<argument><expr><lambda><name pos:line="40" pos:column="41">pf</name> <op:operator pos:line="40" pos:column="44">=&gt;</op:operator> <call><name><name pos:line="40" pos:column="47">pf</name><op:operator pos:line="40" pos:column="49">.</op:operator><name pos:line="40" pos:column="50">WrapInterface</name></name><argument_list pos:line="40" pos:column="63">(<argument><expr><call><name><name pos:line="40" pos:column="64">It</name><op:operator pos:line="40" pos:column="66">.</op:operator><name><name pos:line="40" pos:column="67">IsAny</name><argument_list pos:line="40" pos:column="72">&lt;<argument><name pos:line="40" pos:column="73">IViewEngine</name></argument>&gt;</argument_list></name></name><argument_list pos:line="40" pos:column="85">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="40" pos:column="89">It</name><op:operator pos:line="40" pos:column="91">.</op:operator><name><name pos:line="40" pos:column="92">IsAny</name><argument_list pos:line="40" pos:column="97">&lt;<argument><name><name pos:line="40" pos:column="98">IEnumerable</name><argument_list pos:line="40" pos:column="109">&lt;<argument><name pos:line="40" pos:column="110">IAlternateMethod</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name><argument_list pos:line="40" pos:column="128">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="40" pos:column="132">Enumerable</name><op:operator pos:line="40" pos:column="142">.</op:operator><name><name pos:line="40" pos:column="143">Empty</name><argument_list pos:line="40" pos:column="148">&lt;<argument><name pos:line="40" pos:column="149">object</name></argument>&gt;</argument_list></name></name><argument_list pos:line="40" pos:column="156">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="40" pos:column="161">Times</name><op:operator pos:line="40" pos:column="166">.</op:operator><name pos:line="40" pos:column="167">AtLeastOnce</name></name><argument_list pos:line="40" pos:column="178">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
