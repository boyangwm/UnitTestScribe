<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Core\Resource\MetadataShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">Glimpse</name><op:operator pos:line="1" pos:column="14">.</op:operator><name pos:line="1" pos:column="15">Core</name><op:operator pos:line="1" pos:column="19">.</op:operator><name pos:line="1" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">Glimpse</name><op:operator pos:line="2" pos:column="14">.</op:operator><name pos:line="2" pos:column="15">Core</name><op:operator pos:line="2" pos:column="19">.</op:operator><name pos:line="2" pos:column="20">Framework</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Glimpse</name><op:operator pos:line="3" pos:column="14">.</op:operator><name pos:line="3" pos:column="15">Core</name><op:operator pos:line="3" pos:column="19">.</op:operator><name pos:line="3" pos:column="20">Resource</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Core</name><op:operator pos:line="4" pos:column="19">.</op:operator><name pos:line="4" pos:column="20">ResourceResult</name></name>;</using>
<using pos:line="5" pos:column="1">using <name pos:line="5" pos:column="7">Moq</name>;</using>
<using pos:line="6" pos:column="1">using <name pos:line="6" pos:column="7">Xunit</name>;</using>

<namespace pos:line="8" pos:column="1">namespace <name><name pos:line="8" pos:column="11">Glimpse</name><op:operator pos:line="8" pos:column="18">.</op:operator><name pos:line="8" pos:column="19">Test</name><op:operator pos:line="8" pos:column="23">.</op:operator><name pos:line="8" pos:column="24">Core</name><op:operator pos:line="8" pos:column="28">.</op:operator><name pos:line="8" pos:column="29">Resource</name></name>
<block pos:line="9" pos:column="1">{
    <class><specifier pos:line="10" pos:column="5">public</specifier> class <name pos:line="10" pos:column="18">MetadataShould</name>
    <block pos:line="11" pos:column="5">{
        <function><type><attribute pos:line="12" pos:column="9">[<expr><name pos:line="12" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="13" pos:column="9">public</specifier> <name pos:line="13" pos:column="16">void</name></type> <name pos:line="13" pos:column="21">Construct</name><parameter_list pos:line="13" pos:column="30">()</parameter_list>
        <block pos:line="14" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="15" pos:column="13">IResource</name></type> <name pos:line="15" pos:column="23">metadata</name> <init pos:line="15" pos:column="32">= <expr><op:operator pos:line="15" pos:column="34">new</op:operator> <call><name pos:line="15" pos:column="38">MetadataResource</name><argument_list pos:line="15" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="17" pos:column="13">Assert</name><op:operator pos:line="17" pos:column="19">.</op:operator><name pos:line="17" pos:column="20">NotNull</name></name><argument_list pos:line="17" pos:column="27">(<argument><expr><name pos:line="17" pos:column="28">metadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="20" pos:column="9">[<expr><name pos:line="20" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="21" pos:column="9">public</specifier> <name pos:line="21" pos:column="16">void</name></type> <name pos:line="21" pos:column="21">HaveProperName</name><parameter_list pos:line="21" pos:column="35">()</parameter_list>
        <block pos:line="22" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="23" pos:column="13">var</name></type> <name pos:line="23" pos:column="17">metadata</name> <init pos:line="23" pos:column="26">= <expr><op:operator pos:line="23" pos:column="28">new</op:operator> <call><name pos:line="23" pos:column="32">MetadataResource</name><argument_list pos:line="23" pos:column="48">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="24" pos:column="13">Assert</name><op:operator pos:line="24" pos:column="19">.</op:operator><name pos:line="24" pos:column="20">Equal</name></name><argument_list pos:line="24" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="24" pos:column="26">"glimpse_metadata"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="46">metadata</name><op:operator pos:line="24" pos:column="54">.</op:operator><name pos:line="24" pos:column="55">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="27" pos:column="9">[<expr><name pos:line="27" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="28" pos:column="9">public</specifier> <name pos:line="28" pos:column="16">void</name></type> <name pos:line="28" pos:column="21">RequireParameterKeys</name><parameter_list pos:line="28" pos:column="41">()</parameter_list>
        <block pos:line="29" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="30" pos:column="13">var</name></type> <name pos:line="30" pos:column="17">metadata</name> <init pos:line="30" pos:column="26">= <expr><op:operator pos:line="30" pos:column="28">new</op:operator> <call><name pos:line="30" pos:column="32">MetadataResource</name><argument_list pos:line="30" pos:column="48">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="31" pos:column="13">Assert</name><op:operator pos:line="31" pos:column="19">.</op:operator><name pos:line="31" pos:column="20">NotEmpty</name></name><argument_list pos:line="31" pos:column="28">(<argument><expr><name><name pos:line="31" pos:column="29">metadata</name><op:operator pos:line="31" pos:column="37">.</op:operator><name pos:line="31" pos:column="38">Parameters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="34" pos:column="9">[<expr><name pos:line="34" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="35" pos:column="9">public</specifier> <name pos:line="35" pos:column="16">void</name></type> <name pos:line="35" pos:column="21">ReturnResourceResult</name><parameter_list pos:line="35" pos:column="41">()</parameter_list>
        <block pos:line="36" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="37" pos:column="13">var</name></type> <name pos:line="37" pos:column="17">metadata</name> <init pos:line="37" pos:column="26">= <expr><op:operator pos:line="37" pos:column="28">new</op:operator> <call><name pos:line="37" pos:column="32">GlimpseMetadata</name><argument_list pos:line="37" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="39" pos:column="13">var</name></type> <name pos:line="39" pos:column="17">storeMock</name> <init pos:line="39" pos:column="27">= <expr><op:operator pos:line="39" pos:column="29">new</op:operator> <call><name><name pos:line="39" pos:column="33">Mock</name><argument_list pos:line="39" pos:column="37">&lt;<argument><name pos:line="39" pos:column="38">IReadOnlyPersistenceStore</name></argument>&gt;</argument_list></name><argument_list pos:line="39" pos:column="64">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="40" pos:column="13">storeMock</name><op:operator pos:line="40" pos:column="22">.</op:operator><name pos:line="40" pos:column="23">Setup</name></name><argument_list pos:line="40" pos:column="28">(<argument><expr><lambda><name pos:line="40" pos:column="29">s</name> <op:operator pos:line="40" pos:column="31">=&gt;</op:operator> <call><name><name pos:line="40" pos:column="34">s</name><op:operator pos:line="40" pos:column="35">.</op:operator><name pos:line="40" pos:column="36">GetMetadata</name></name><argument_list pos:line="40" pos:column="47">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="40" pos:column="50">.</op:operator><call><name pos:line="40" pos:column="51">Returns</name><argument_list pos:line="40" pos:column="58">(<argument><expr><name pos:line="40" pos:column="59">metadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="42" pos:column="13">var</name></type> <name pos:line="42" pos:column="17">contextMock</name> <init pos:line="42" pos:column="29">= <expr><op:operator pos:line="42" pos:column="31">new</op:operator> <call><name><name pos:line="42" pos:column="35">Mock</name><argument_list pos:line="42" pos:column="39">&lt;<argument><name pos:line="42" pos:column="40">IResourceContext</name></argument>&gt;</argument_list></name><argument_list pos:line="42" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="43" pos:column="13">contextMock</name><op:operator pos:line="43" pos:column="24">.</op:operator><name pos:line="43" pos:column="25">Setup</name></name><argument_list pos:line="43" pos:column="30">(<argument><expr><lambda><name pos:line="43" pos:column="31">c</name> <op:operator pos:line="43" pos:column="33">=&gt;</op:operator> <name><name pos:line="43" pos:column="36">c</name><op:operator pos:line="43" pos:column="37">.</op:operator><name pos:line="43" pos:column="38">PersistenceStore</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="43" pos:column="55">.</op:operator><call><name pos:line="43" pos:column="56">Returns</name><argument_list pos:line="43" pos:column="63">(<argument><expr><name><name pos:line="43" pos:column="64">storeMock</name><op:operator pos:line="43" pos:column="73">.</op:operator><name pos:line="43" pos:column="74">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="44" pos:column="13">contextMock</name><op:operator pos:line="44" pos:column="24">.</op:operator><name pos:line="44" pos:column="25">Setup</name></name><argument_list pos:line="44" pos:column="30">(<argument><expr><lambda><name pos:line="44" pos:column="31">c</name> <op:operator pos:line="44" pos:column="33">=&gt;</op:operator> <name><name pos:line="44" pos:column="36">c</name><op:operator pos:line="44" pos:column="37">.</op:operator><name pos:line="44" pos:column="38">Parameters</name><index pos:line="44" pos:column="48">[<expr><name><name pos:line="44" pos:column="49">ResourceParameter</name><op:operator pos:line="44" pos:column="66">.</op:operator><name pos:line="44" pos:column="67">Callback</name><op:operator pos:line="44" pos:column="75">.</op:operator><name pos:line="44" pos:column="76">Name</name></name></expr>]</index></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="44" pos:column="82">.</op:operator><call><name pos:line="44" pos:column="83">Returns</name><argument_list pos:line="44" pos:column="90">(<argument><expr><lit:literal type="string" pos:line="44" pos:column="91">"a string"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="46" pos:column="13">var</name></type> <name pos:line="46" pos:column="17">resource</name> <init pos:line="46" pos:column="26">= <expr><op:operator pos:line="46" pos:column="28">new</op:operator> <call><name pos:line="46" pos:column="32">MetadataResource</name><argument_list pos:line="46" pos:column="48">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="48" pos:column="13">var</name></type> <name pos:line="48" pos:column="17">result</name> <init pos:line="48" pos:column="24">= <expr><call><name><name pos:line="48" pos:column="26">resource</name><op:operator pos:line="48" pos:column="34">.</op:operator><name pos:line="48" pos:column="35">Execute</name></name><argument_list pos:line="48" pos:column="42">(<argument><expr><name><name pos:line="48" pos:column="43">contextMock</name><op:operator pos:line="48" pos:column="54">.</op:operator><name pos:line="48" pos:column="55">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="50" pos:column="13">Assert</name><op:operator pos:line="50" pos:column="19">.</op:operator><name pos:line="50" pos:column="20">NotNull</name></name><argument_list pos:line="50" pos:column="27">(<argument><expr><name pos:line="50" pos:column="28">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="53" pos:column="9">[<expr><name pos:line="53" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="54" pos:column="9">public</specifier> <name pos:line="54" pos:column="16">void</name></type> <name pos:line="54" pos:column="21">Return404ResultIfDataIsMissing</name><parameter_list pos:line="54" pos:column="51">()</parameter_list>
        <block pos:line="55" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="56" pos:column="13">var</name></type> <name pos:line="56" pos:column="17">storeMock</name> <init pos:line="56" pos:column="27">= <expr><op:operator pos:line="56" pos:column="29">new</op:operator> <call><name><name pos:line="56" pos:column="33">Mock</name><argument_list pos:line="56" pos:column="37">&lt;<argument><name pos:line="56" pos:column="38">IReadOnlyPersistenceStore</name></argument>&gt;</argument_list></name><argument_list pos:line="56" pos:column="64">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="57" pos:column="13">storeMock</name><op:operator pos:line="57" pos:column="22">.</op:operator><name pos:line="57" pos:column="23">Setup</name></name><argument_list pos:line="57" pos:column="28">(<argument><expr><lambda><name pos:line="57" pos:column="29">s</name> <op:operator pos:line="57" pos:column="31">=&gt;</op:operator> <call><name><name pos:line="57" pos:column="34">s</name><op:operator pos:line="57" pos:column="35">.</op:operator><name pos:line="57" pos:column="36">GetMetadata</name></name><argument_list pos:line="57" pos:column="47">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="57" pos:column="50">.</op:operator><call><name><name pos:line="57" pos:column="51">Returns</name><argument_list pos:line="57" pos:column="58">&lt;<argument><name pos:line="57" pos:column="59">GlimpseMetadata</name></argument>&gt;</argument_list></name><argument_list pos:line="57" pos:column="75">(<argument><expr><name pos:line="57" pos:column="76">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="59" pos:column="13">var</name></type> <name pos:line="59" pos:column="17">contextMock</name> <init pos:line="59" pos:column="29">= <expr><op:operator pos:line="59" pos:column="31">new</op:operator> <call><name><name pos:line="59" pos:column="35">Mock</name><argument_list pos:line="59" pos:column="39">&lt;<argument><name pos:line="59" pos:column="40">IResourceContext</name></argument>&gt;</argument_list></name><argument_list pos:line="59" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="60" pos:column="13">contextMock</name><op:operator pos:line="60" pos:column="24">.</op:operator><name pos:line="60" pos:column="25">Setup</name></name><argument_list pos:line="60" pos:column="30">(<argument><expr><lambda><name pos:line="60" pos:column="31">c</name> <op:operator pos:line="60" pos:column="33">=&gt;</op:operator> <name><name pos:line="60" pos:column="36">c</name><op:operator pos:line="60" pos:column="37">.</op:operator><name pos:line="60" pos:column="38">PersistenceStore</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="60" pos:column="55">.</op:operator><call><name pos:line="60" pos:column="56">Returns</name><argument_list pos:line="60" pos:column="63">(<argument><expr><name><name pos:line="60" pos:column="64">storeMock</name><op:operator pos:line="60" pos:column="73">.</op:operator><name pos:line="60" pos:column="74">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="62" pos:column="13">var</name></type> <name pos:line="62" pos:column="17">resource</name> <init pos:line="62" pos:column="26">= <expr><op:operator pos:line="62" pos:column="28">new</op:operator> <call><name pos:line="62" pos:column="32">MetadataResource</name><argument_list pos:line="62" pos:column="48">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="64" pos:column="13">var</name></type> <name pos:line="64" pos:column="17">result</name> <init pos:line="64" pos:column="24">= <expr><call><name><name pos:line="64" pos:column="26">resource</name><op:operator pos:line="64" pos:column="34">.</op:operator><name pos:line="64" pos:column="35">Execute</name></name><argument_list pos:line="64" pos:column="42">(<argument><expr><name><name pos:line="64" pos:column="43">contextMock</name><op:operator pos:line="64" pos:column="54">.</op:operator><name pos:line="64" pos:column="55">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="66" pos:column="13">Assert</name><op:operator pos:line="66" pos:column="19">.</op:operator><name pos:line="66" pos:column="20">NotNull</name></name><argument_list pos:line="66" pos:column="27">(<argument><expr><name pos:line="66" pos:column="28">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="68" pos:column="13">var</name></type> <name pos:line="68" pos:column="17">statusCodeResult</name> <init pos:line="68" pos:column="34">= <expr><name pos:line="68" pos:column="36">result</name> <op:operator pos:line="68" pos:column="43">as</op:operator> <name pos:line="68" pos:column="46">StatusCodeResourceResult</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="69" pos:column="13">Assert</name><op:operator pos:line="69" pos:column="19">.</op:operator><name pos:line="69" pos:column="20">NotNull</name></name><argument_list pos:line="69" pos:column="27">(<argument><expr><name pos:line="69" pos:column="28">statusCodeResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="70" pos:column="13">Assert</name><op:operator pos:line="70" pos:column="19">.</op:operator><name pos:line="70" pos:column="20">Equal</name></name><argument_list pos:line="70" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="70" pos:column="26">404</lit:literal></expr></argument>, <argument><expr><name><name pos:line="70" pos:column="31">statusCodeResult</name><op:operator pos:line="70" pos:column="47">.</op:operator><name pos:line="70" pos:column="48">StatusCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
