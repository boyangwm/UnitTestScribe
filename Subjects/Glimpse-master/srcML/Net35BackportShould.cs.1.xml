<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Core.Net35\Net35BackportShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">Glimpse</name><op:operator pos:line="2" pos:column="14">.</op:operator><name pos:line="2" pos:column="15">Core</name><op:operator pos:line="2" pos:column="19">.</op:operator><name pos:line="2" pos:column="20">Backport</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Glimpse</name><op:operator pos:line="3" pos:column="14">.</op:operator><name pos:line="3" pos:column="15">Core</name><op:operator pos:line="3" pos:column="19">.</op:operator><name pos:line="3" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="4" pos:column="1">using <name pos:line="4" pos:column="7">Xunit</name>;</using>

<namespace pos:line="6" pos:column="1">namespace <name><name pos:line="6" pos:column="11">Glimpse</name><op:operator pos:line="6" pos:column="18">.</op:operator><name pos:line="6" pos:column="19">Test</name><op:operator pos:line="6" pos:column="23">.</op:operator><name pos:line="6" pos:column="24">Core</name><op:operator pos:line="6" pos:column="28">.</op:operator><name pos:line="6" pos:column="29">Net35</name></name>
<block pos:line="7" pos:column="1">{
    <class><specifier pos:line="8" pos:column="5">public</specifier> class <name pos:line="8" pos:column="18">Net35BackportShould</name>
    <block pos:line="9" pos:column="5">{
        <function><type><attribute pos:line="10" pos:column="9">[<expr><name pos:line="10" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="11" pos:column="9">public</specifier> <name pos:line="11" pos:column="16">void</name></type> <name pos:line="11" pos:column="21">ParseCorrectGuidStrings</name><parameter_list pos:line="11" pos:column="44">()</parameter_list>
        <block pos:line="12" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="13" pos:column="13">var</name></type> <name pos:line="13" pos:column="17">guid</name> <init pos:line="13" pos:column="22">= <expr><call><name><name pos:line="13" pos:column="24">Guid</name><op:operator pos:line="13" pos:column="28">.</op:operator><name pos:line="13" pos:column="29">NewGuid</name></name><argument_list pos:line="13" pos:column="36">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="14" pos:column="13">Guid</name></type> <name pos:line="14" pos:column="18">output</name></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="16" pos:column="13">Assert</name><op:operator pos:line="16" pos:column="19">.</op:operator><name pos:line="16" pos:column="20">True</name></name><argument_list pos:line="16" pos:column="24">(<argument><expr><call><name><name pos:line="16" pos:column="25">Net35Backport</name><op:operator pos:line="16" pos:column="38">.</op:operator><name pos:line="16" pos:column="39">TryParseGuid</name></name><argument_list pos:line="16" pos:column="51">(<argument><expr><call><name><name pos:line="16" pos:column="52">guid</name><op:operator pos:line="16" pos:column="56">.</op:operator><name pos:line="16" pos:column="57">ToString</name></name><argument_list pos:line="16" pos:column="65">()</argument_list></call></expr></argument>, <argument><expr pos:line="16" pos:column="69">out <name pos:line="16" pos:column="73">output</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="17" pos:column="13">Assert</name><op:operator pos:line="17" pos:column="19">.</op:operator><name pos:line="17" pos:column="20">Equal</name></name><argument_list pos:line="17" pos:column="25">(<argument><expr><name pos:line="17" pos:column="26">guid</name></expr></argument>, <argument><expr><name pos:line="17" pos:column="32">output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="20" pos:column="9">[<expr><name pos:line="20" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="21" pos:column="9">public</specifier> <name pos:line="21" pos:column="16">void</name></type> <name pos:line="21" pos:column="21">NotParseIncorrectGuidStrings</name><parameter_list pos:line="21" pos:column="49">()</parameter_list>
        <block pos:line="22" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="23" pos:column="13">var</name></type> <name pos:line="23" pos:column="17">guid</name> <init pos:line="23" pos:column="22">= <expr><lit:literal type="string" pos:line="23" pos:column="24">"crap"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="24" pos:column="13">Guid</name></type> <name pos:line="24" pos:column="18">output</name></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="26" pos:column="13">Assert</name><op:operator pos:line="26" pos:column="19">.</op:operator><name pos:line="26" pos:column="20">False</name></name><argument_list pos:line="26" pos:column="25">(<argument><expr><call><name><name pos:line="26" pos:column="26">Net35Backport</name><op:operator pos:line="26" pos:column="39">.</op:operator><name pos:line="26" pos:column="40">TryParseGuid</name></name><argument_list pos:line="26" pos:column="52">(<argument><expr><name pos:line="26" pos:column="53">guid</name></expr></argument>, <argument><expr pos:line="26" pos:column="59">out <name pos:line="26" pos:column="63">output</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <macro><name pos:line="27" pos:column="13">Assert</name></macro><expr_stmt><expr><op:operator pos:line="27" pos:column="19">.</op:operator><macro><name pos:line="27" pos:column="20">Equal</name><argument_list pos:line="27" pos:column="25">(<argument pos:line="27" pos:column="26">default(Guid)</argument>, <argument pos:line="27" pos:column="41">output</argument>)</argument_list></macro></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="30" pos:column="9">[<expr><name pos:line="30" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="31" pos:column="9">public</specifier> <name pos:line="31" pos:column="16">void</name></type> <name pos:line="31" pos:column="21">ReturnTrueIfFlagIsContained</name><parameter_list pos:line="31" pos:column="48">()</parameter_list>
        <block pos:line="32" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="33" pos:column="13">var</name></type> <name pos:line="33" pos:column="17">input</name> <init pos:line="33" pos:column="23">= <expr><name><name pos:line="33" pos:column="25">RuntimePolicy</name><op:operator pos:line="33" pos:column="38">.</op:operator><name pos:line="33" pos:column="39">On</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="35" pos:column="13">Assert</name><op:operator pos:line="35" pos:column="19">.</op:operator><name pos:line="35" pos:column="20">True</name></name><argument_list pos:line="35" pos:column="24">(<argument><expr><call><name><name pos:line="35" pos:column="25">input</name><op:operator pos:line="35" pos:column="30">.</op:operator><name pos:line="35" pos:column="31">HasFlag</name></name><argument_list pos:line="35" pos:column="38">(<argument><expr><name><name pos:line="35" pos:column="39">RuntimePolicy</name><op:operator pos:line="35" pos:column="52">.</op:operator><name pos:line="35" pos:column="53">ModifyResponseHeaders</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="38" pos:column="9">[<expr><name pos:line="38" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="39" pos:column="9">public</specifier> <name pos:line="39" pos:column="16">void</name></type> <name pos:line="39" pos:column="21">ReturnFalseIfFlagIsNotContained</name><parameter_list pos:line="39" pos:column="52">()</parameter_list>
        <block pos:line="40" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="41" pos:column="13">var</name></type> <name pos:line="41" pos:column="17">input</name> <init pos:line="41" pos:column="23">= <expr><name><name pos:line="41" pos:column="25">RuntimePolicy</name><op:operator pos:line="41" pos:column="38">.</op:operator><name pos:line="41" pos:column="39">Off</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="43" pos:column="13">Assert</name><op:operator pos:line="43" pos:column="19">.</op:operator><name pos:line="43" pos:column="20">False</name></name><argument_list pos:line="43" pos:column="25">(<argument><expr><call><name><name pos:line="43" pos:column="26">input</name><op:operator pos:line="43" pos:column="31">.</op:operator><name pos:line="43" pos:column="32">HasFlag</name></name><argument_list pos:line="43" pos:column="39">(<argument><expr><name><name pos:line="43" pos:column="40">RuntimePolicy</name><op:operator pos:line="43" pos:column="53">.</op:operator><name pos:line="43" pos:column="54">ModifyResponseHeaders</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="46" pos:column="9">[<expr><name pos:line="46" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="47" pos:column="9">public</specifier> <name pos:line="47" pos:column="16">void</name></type> <name pos:line="47" pos:column="21">ParseCorrectEnumValue</name><parameter_list pos:line="47" pos:column="42">()</parameter_list>
        <block pos:line="48" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="49" pos:column="13">RuntimePolicy</name></type> <name pos:line="49" pos:column="27">result</name></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="51" pos:column="13">Assert</name><op:operator pos:line="51" pos:column="19">.</op:operator><name pos:line="51" pos:column="20">True</name></name><argument_list pos:line="51" pos:column="24">(<argument><expr><call><name><name pos:line="51" pos:column="25">Net35Backport</name><op:operator pos:line="51" pos:column="38">.</op:operator><name pos:line="51" pos:column="39">TryParseEnum</name></name><argument_list pos:line="51" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="51" pos:column="52">"on"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="51" pos:column="58">true</lit:literal></expr></argument>, <argument><expr pos:line="51" pos:column="64">out <name pos:line="51" pos:column="68">result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="52" pos:column="13">Assert</name><op:operator pos:line="52" pos:column="19">.</op:operator><name pos:line="52" pos:column="20">Equal</name></name><argument_list pos:line="52" pos:column="25">(<argument><expr><name><name pos:line="52" pos:column="26">RuntimePolicy</name><op:operator pos:line="52" pos:column="39">.</op:operator><name pos:line="52" pos:column="40">On</name></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="44">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="55" pos:column="9">[<expr><name pos:line="55" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="56" pos:column="9">public</specifier> <name pos:line="56" pos:column="16">void</name></type> <name pos:line="56" pos:column="21">NotParseIncorrectEnumValue</name><parameter_list pos:line="56" pos:column="47">()</parameter_list>
        <block pos:line="57" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="58" pos:column="13">RuntimePolicy</name></type> <name pos:line="58" pos:column="27">result</name></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="60" pos:column="13">Assert</name><op:operator pos:line="60" pos:column="19">.</op:operator><name pos:line="60" pos:column="20">False</name></name><argument_list pos:line="60" pos:column="25">(<argument><expr><call><name><name pos:line="60" pos:column="26">Net35Backport</name><op:operator pos:line="60" pos:column="39">.</op:operator><name pos:line="60" pos:column="40">TryParseEnum</name></name><argument_list pos:line="60" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="60" pos:column="53">"bad string"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="60" pos:column="67">true</lit:literal></expr></argument>, <argument><expr pos:line="60" pos:column="73">out <name pos:line="60" pos:column="77">result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <macro><name pos:line="61" pos:column="13">Assert</name></macro><expr_stmt><expr><op:operator pos:line="61" pos:column="19">.</op:operator><macro><name pos:line="61" pos:column="20">Equal</name><argument_list pos:line="61" pos:column="25">(<argument pos:line="61" pos:column="26">default(RuntimePolicy)</argument>, <argument pos:line="61" pos:column="50">result</argument>)</argument_list></macro></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
