<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Mvc3.MusicStore.Sample\Framework\SqlMapper.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/*
 License: http://www.apache.org/licenses/LICENSE-2.0 
 Home page: http://code.google.com/p/dapper-dot-net/

 Note: to build on C# 3.0 + .NET 3.5, include the CSHARP30 compiler symbol (and yes,
 I know the difference between language and runtime versions; this is a compromise).
 */</comment>

<using pos:line="9" pos:column="1">using <name pos:line="9" pos:column="7">System</name>;</using>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">System</name><op:operator pos:line="10" pos:column="13">.</op:operator><name pos:line="10" pos:column="14">Collections</name></name>;</using>
<using pos:line="11" pos:column="1">using <name><name pos:line="11" pos:column="7">System</name><op:operator pos:line="11" pos:column="13">.</op:operator><name pos:line="11" pos:column="14">Collections</name><op:operator pos:line="11" pos:column="25">.</op:operator><name pos:line="11" pos:column="26">Generic</name></name>;</using>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">System</name><op:operator pos:line="12" pos:column="13">.</op:operator><name pos:line="12" pos:column="14">ComponentModel</name></name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Data</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Linq</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Reflection</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Reflection</name><op:operator pos:line="16" pos:column="24">.</op:operator><name pos:line="16" pos:column="25">Emit</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Text</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Threading</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">System</name><op:operator pos:line="19" pos:column="13">.</op:operator><name pos:line="19" pos:column="14">Text</name><op:operator pos:line="19" pos:column="18">.</op:operator><name pos:line="19" pos:column="19">RegularExpressions</name></name>;</using>
<using pos:line="20" pos:column="1">using <name><name pos:line="20" pos:column="7">System</name><op:operator pos:line="20" pos:column="13">.</op:operator><name pos:line="20" pos:column="14">Diagnostics</name></name>;</using>


<namespace pos:line="23" pos:column="1">namespace <name pos:line="23" pos:column="11">Dapper</name>
<block pos:line="24" pos:column="1">{
    <comment type="line" pos:line="25" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="26" pos:column="5">/// Dapper, a light weight object mapper for ADO.NET</comment>
    <comment type="line" pos:line="27" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="28" pos:column="5">static</specifier> <specifier pos:line="28" pos:column="12">partial</specifier> class <name pos:line="28" pos:column="26">SqlMapper</name>
    <block pos:line="29" pos:column="5">{
        <comment type="line" pos:line="30" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="31" pos:column="9">/// Implement this interface to pass an arbitrary db specific set of parameters to Dapper</comment>
        <comment type="line" pos:line="32" pos:column="9">/// &lt;/summary&gt;</comment>
        <class type="interface"><specifier pos:line="33" pos:column="9">public</specifier> <specifier pos:line="33" pos:column="16">partial</specifier> interface <name pos:line="33" pos:column="34">IDynamicParameters</name>
        <block pos:line="34" pos:column="9">{
            <comment type="line" pos:line="35" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="36" pos:column="13">/// Add all the parameters needed to the command just before it executes</comment>
            <comment type="line" pos:line="37" pos:column="13">/// &lt;/summary&gt;</comment>
            <comment type="line" pos:line="38" pos:column="13">/// &lt;param name="command"&gt;The raw command prior to execution&lt;/param&gt;</comment>
            <comment type="line" pos:line="39" pos:column="13">/// &lt;param name="identity"&gt;Information about the query&lt;/param&gt;</comment>
            <function_decl><type><name pos:line="40" pos:column="13">void</name></type> <name pos:line="40" pos:column="18">AddParameters</name><parameter_list pos:line="40" pos:column="31">(<param><decl><type><name pos:line="40" pos:column="32">IDbCommand</name></type> <name pos:line="40" pos:column="43">command</name></decl></param>, <param><decl><type><name pos:line="40" pos:column="52">Identity</name></type> <name pos:line="40" pos:column="61">identity</name></decl></param>)</parameter_list>;</function_decl>
        }</block></class>

        <comment type="line" pos:line="43" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="44" pos:column="9">/// Implement this interface to change default mapping of reader columns to type memebers</comment>
        <comment type="line" pos:line="45" pos:column="9">/// &lt;/summary&gt;</comment>
        <class type="interface"><specifier pos:line="46" pos:column="9">public</specifier> interface <name pos:line="46" pos:column="26">ITypeMap</name>
        <block pos:line="47" pos:column="9">{
            <comment type="line" pos:line="48" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="49" pos:column="13">/// Finds best constructor</comment>
            <comment type="line" pos:line="50" pos:column="13">/// &lt;/summary&gt;</comment>
            <comment type="line" pos:line="51" pos:column="13">/// &lt;param name="names"&gt;DataReader column names&lt;/param&gt;</comment>
            <comment type="line" pos:line="52" pos:column="13">/// &lt;param name="types"&gt;DataReader column types&lt;/param&gt;</comment>
            <comment type="line" pos:line="53" pos:column="13">/// &lt;returns&gt;Matching constructor or default one&lt;/returns&gt;</comment>
            <function_decl><type><name pos:line="54" pos:column="13">ConstructorInfo</name></type> <name pos:line="54" pos:column="29">FindConstructor</name><parameter_list pos:line="54" pos:column="44">(<param><decl><type><name><name pos:line="54" pos:column="45">string</name><index pos:line="54" pos:column="51">[]</index></name></type> <name pos:line="54" pos:column="54">names</name></decl></param>, <param><decl><type><name><name pos:line="54" pos:column="61">Type</name><index pos:line="54" pos:column="65">[]</index></name></type> <name pos:line="54" pos:column="68">types</name></decl></param>)</parameter_list>;</function_decl>

            <comment type="line" pos:line="56" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="57" pos:column="13">/// Gets mapping for constructor parameter</comment>
            <comment type="line" pos:line="58" pos:column="13">/// &lt;/summary&gt;</comment>
            <comment type="line" pos:line="59" pos:column="13">/// &lt;param name="constructor"&gt;Constructor to resolve&lt;/param&gt;</comment>
            <comment type="line" pos:line="60" pos:column="13">/// &lt;param name="columnName"&gt;DataReader column name&lt;/param&gt;</comment>
            <comment type="line" pos:line="61" pos:column="13">/// &lt;returns&gt;Mapping implementation&lt;/returns&gt;</comment>
            <function_decl><type><name pos:line="62" pos:column="13">IMemberMap</name></type> <name pos:line="62" pos:column="24">GetConstructorParameter</name><parameter_list pos:line="62" pos:column="47">(<param><decl><type><name pos:line="62" pos:column="48">ConstructorInfo</name></type> <name pos:line="62" pos:column="64">constructor</name></decl></param>, <param><decl><type><name pos:line="62" pos:column="77">string</name></type> <name pos:line="62" pos:column="84">columnName</name></decl></param>)</parameter_list>;</function_decl>

            <comment type="line" pos:line="64" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="65" pos:column="13">/// Gets member mapping for column</comment>
            <comment type="line" pos:line="66" pos:column="13">/// &lt;/summary&gt;</comment>
            <comment type="line" pos:line="67" pos:column="13">/// &lt;param name="columnName"&gt;DataReader column name&lt;/param&gt;</comment>
            <comment type="line" pos:line="68" pos:column="13">/// &lt;returns&gt;Mapping implementation&lt;/returns&gt;</comment>
            <function_decl><type><name pos:line="69" pos:column="13">IMemberMap</name></type> <name pos:line="69" pos:column="24">GetMember</name><parameter_list pos:line="69" pos:column="33">(<param><decl><type><name pos:line="69" pos:column="34">string</name></type> <name pos:line="69" pos:column="41">columnName</name></decl></param>)</parameter_list>;</function_decl>
        }</block></class>

        <comment type="line" pos:line="72" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="73" pos:column="9">/// Implements this interface to provide custom member mapping</comment>
        <comment type="line" pos:line="74" pos:column="9">/// &lt;/summary&gt;</comment>
        <class type="interface"><specifier pos:line="75" pos:column="9">public</specifier> interface <name pos:line="75" pos:column="26">IMemberMap</name>
        <block pos:line="76" pos:column="9">{
            <comment type="line" pos:line="77" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="78" pos:column="13">/// Source DataReader column name</comment>
            <comment type="line" pos:line="79" pos:column="13">/// &lt;/summary&gt;</comment>
            <decl_stmt><decl><type><name pos:line="80" pos:column="13">string</name></type> <name pos:line="80" pos:column="20">ColumnName</name> <block pos:line="80" pos:column="31">{ <function_decl><name pos:line="80" pos:column="33">get</name>;</function_decl> }</block></decl></decl_stmt>

            <comment type="line" pos:line="82" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="83" pos:column="13">///  Target member type</comment>
            <comment type="line" pos:line="84" pos:column="13">/// &lt;/summary&gt;</comment>
            <decl_stmt><decl><type><name pos:line="85" pos:column="13">Type</name></type> <name pos:line="85" pos:column="18">MemberType</name> <block pos:line="85" pos:column="29">{ <function_decl><name pos:line="85" pos:column="31">get</name>;</function_decl> }</block></decl></decl_stmt>

            <comment type="line" pos:line="87" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="88" pos:column="13">/// Target property</comment>
            <comment type="line" pos:line="89" pos:column="13">/// &lt;/summary&gt;</comment>
            <decl_stmt><decl><type><name pos:line="90" pos:column="13">PropertyInfo</name></type> <name pos:line="90" pos:column="26">Property</name> <block pos:line="90" pos:column="35">{ <function_decl><name pos:line="90" pos:column="37">get</name>;</function_decl> }</block></decl></decl_stmt>

            <comment type="line" pos:line="92" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="93" pos:column="13">/// Target field</comment>
            <comment type="line" pos:line="94" pos:column="13">/// &lt;/summary&gt;</comment>
            <decl_stmt><decl><type><name pos:line="95" pos:column="13">FieldInfo</name></type> <name pos:line="95" pos:column="23">Field</name> <block pos:line="95" pos:column="29">{ <function_decl><name pos:line="95" pos:column="31">get</name>;</function_decl> }</block></decl></decl_stmt>

            <comment type="line" pos:line="97" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="98" pos:column="13">/// Target constructor parameter</comment>
            <comment type="line" pos:line="99" pos:column="13">/// &lt;/summary&gt;</comment>
            <decl_stmt><decl><type><name pos:line="100" pos:column="13">ParameterInfo</name></type> <name pos:line="100" pos:column="27">Parameter</name> <block pos:line="100" pos:column="37">{ <function_decl><name pos:line="100" pos:column="39">get</name>;</function_decl> }</block></decl></decl_stmt>
        }</block></class>

        <decl_stmt><decl><type><specifier pos:line="103" pos:column="9">static</specifier> <name><name pos:line="103" pos:column="16">Link</name><argument_list pos:line="103" pos:column="20">&lt;<argument><name pos:line="103" pos:column="21">Type</name></argument>, <argument><name><name pos:line="103" pos:column="27">Action</name><argument_list pos:line="103" pos:column="33">&lt;<argument><name pos:line="103" pos:column="34">IDbCommand</name></argument>, <argument><name pos:line="103" pos:column="46">bool</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="103" pos:column="53">bindByNameCache</name></decl>;</decl_stmt>
        <function><type><specifier pos:line="104" pos:column="9">static</specifier> <name><name pos:line="104" pos:column="16">Action</name><argument_list pos:line="104" pos:column="22">&lt;<argument><name pos:line="104" pos:column="23">IDbCommand</name></argument>, <argument><name pos:line="104" pos:column="35">bool</name></argument>&gt;</argument_list></name></type> <name pos:line="104" pos:column="41">GetBindByName</name><parameter_list pos:line="104" pos:column="54">(<param><decl><type><name pos:line="104" pos:column="55">Type</name></type> <name pos:line="104" pos:column="60">commandType</name></decl></param>)</parameter_list>
        <block pos:line="105" pos:column="9">{
            <if pos:line="106" pos:column="13">if <condition pos:line="106" pos:column="16">(<expr><name pos:line="106" pos:column="17">commandType</name> <op:operator pos:line="106" pos:column="29">==</op:operator> <name pos:line="106" pos:column="32">null</name></expr>)</condition><then pos:line="106" pos:column="37"> <return pos:line="106" pos:column="38">return <expr><name pos:line="106" pos:column="45">null</name></expr>;</return></then></if> <comment type="line" pos:line="106" pos:column="51">// GIGO</comment>
            <decl_stmt><decl><type><name><name pos:line="107" pos:column="13">Action</name><argument_list pos:line="107" pos:column="19">&lt;<argument><name pos:line="107" pos:column="20">IDbCommand</name></argument>, <argument><name pos:line="107" pos:column="32">bool</name></argument>&gt;</argument_list></name></type> <name pos:line="107" pos:column="38">action</name></decl>;</decl_stmt>
            <if pos:line="108" pos:column="13">if <condition pos:line="108" pos:column="16">(<expr><call><name><name><name pos:line="108" pos:column="17">Link</name><argument_list pos:line="108" pos:column="21">&lt;<argument><name pos:line="108" pos:column="22">Type</name></argument>, <argument><name><name pos:line="108" pos:column="28">Action</name><argument_list pos:line="108" pos:column="34">&lt;<argument><name pos:line="108" pos:column="35">IDbCommand</name></argument>, <argument><name pos:line="108" pos:column="47">bool</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><op:operator pos:line="108" pos:column="53">.</op:operator><name pos:line="108" pos:column="54">TryGet</name></name><argument_list pos:line="108" pos:column="60">(<argument><expr><name pos:line="108" pos:column="61">bindByNameCache</name></expr></argument>, <argument><expr><name pos:line="108" pos:column="78">commandType</name></expr></argument>, <argument><expr pos:line="108" pos:column="91">out <name pos:line="108" pos:column="95">action</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="108" pos:column="103">
            <block pos:line="109" pos:column="13">{
                <return pos:line="110" pos:column="17">return <expr><name pos:line="110" pos:column="24">action</name></expr>;</return>
            }</block></then></if>
            <decl_stmt><decl><type><name pos:line="112" pos:column="13">var</name></type> <name pos:line="112" pos:column="17">prop</name> <init pos:line="112" pos:column="22">= <expr><call><name><name pos:line="112" pos:column="24">commandType</name><op:operator pos:line="112" pos:column="35">.</op:operator><name pos:line="112" pos:column="36">GetProperty</name></name><argument_list pos:line="112" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="112" pos:column="48">"BindByName"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="112" pos:column="62">BindingFlags</name><op:operator pos:line="112" pos:column="74">.</op:operator><name pos:line="112" pos:column="75">Public</name></name> <op:operator pos:line="112" pos:column="82">|</op:operator> <name><name pos:line="112" pos:column="84">BindingFlags</name><op:operator pos:line="112" pos:column="96">.</op:operator><name pos:line="112" pos:column="97">Instance</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="113" pos:column="13">action</name> <op:operator pos:line="113" pos:column="20">=</op:operator> <name pos:line="113" pos:column="22">null</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="114" pos:column="13">ParameterInfo</name><index pos:line="114" pos:column="26">[]</index></type> <name pos:line="114" pos:column="29">indexers</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="115" pos:column="13">MethodInfo</name></type> <name pos:line="115" pos:column="24">setter</name></decl>;</decl_stmt>
            <if pos:line="116" pos:column="13">if <condition pos:line="116" pos:column="16">(<expr><name pos:line="116" pos:column="17">prop</name> <op:operator pos:line="116" pos:column="22">!=</op:operator> <name pos:line="116" pos:column="25">null</name> <op:operator pos:line="116" pos:column="30">&amp;&amp;</op:operator> <name><name pos:line="116" pos:column="33">prop</name><op:operator pos:line="116" pos:column="37">.</op:operator><name pos:line="116" pos:column="38">CanWrite</name> <type:modifier pos:line="116" pos:column="47">&amp;&amp;</type:modifier></name> <name><name pos:line="116" pos:column="50">prop</name><op:operator pos:line="116" pos:column="54">.</op:operator><name pos:line="116" pos:column="55">PropertyType</name></name> <op:operator pos:line="116" pos:column="68">==</op:operator> <call><name pos:line="116" pos:column="71">typeof</name><argument_list pos:line="116" pos:column="77">(<argument><expr><name pos:line="116" pos:column="78">bool</name></expr></argument>)</argument_list></call>
                <op:operator pos:line="117" pos:column="17">&amp;&amp;</op:operator> <op:operator pos:line="117" pos:column="20">(</op:operator><op:operator pos:line="117" pos:column="21">(</op:operator><name pos:line="117" pos:column="22">indexers</name> <op:operator pos:line="117" pos:column="31">=</op:operator> <call><name><name pos:line="117" pos:column="33">prop</name><op:operator pos:line="117" pos:column="37">.</op:operator><name pos:line="117" pos:column="38">GetIndexParameters</name></name><argument_list pos:line="117" pos:column="56">()</argument_list></call><op:operator pos:line="117" pos:column="58">)</op:operator> <op:operator pos:line="117" pos:column="60">==</op:operator> <name pos:line="117" pos:column="63">null</name> <op:operator pos:line="117" pos:column="68">||</op:operator> <name><name pos:line="117" pos:column="71">indexers</name><op:operator pos:line="117" pos:column="79">.</op:operator><name pos:line="117" pos:column="80">Length</name></name> <op:operator pos:line="117" pos:column="87">==</op:operator> <lit:literal type="number" pos:line="117" pos:column="90">0</lit:literal><op:operator pos:line="117" pos:column="91">)</op:operator>
                <op:operator pos:line="118" pos:column="17">&amp;&amp;</op:operator> <op:operator pos:line="118" pos:column="20">(</op:operator><name pos:line="118" pos:column="21">setter</name> <op:operator pos:line="118" pos:column="28">=</op:operator> <call><name><name pos:line="118" pos:column="30">prop</name><op:operator pos:line="118" pos:column="34">.</op:operator><name pos:line="118" pos:column="35">GetSetMethod</name></name><argument_list pos:line="118" pos:column="47">()</argument_list></call><op:operator pos:line="118" pos:column="49">)</op:operator> <op:operator pos:line="118" pos:column="51">!=</op:operator> <name pos:line="118" pos:column="54">null</name></expr>
                )</condition><then pos:line="119" pos:column="18">
            <block pos:line="120" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="121" pos:column="17">var</name></type> <name pos:line="121" pos:column="21">method</name> <init pos:line="121" pos:column="28">= <expr><op:operator pos:line="121" pos:column="30">new</op:operator> <call><name pos:line="121" pos:column="34">DynamicMethod</name><argument_list pos:line="121" pos:column="47">(<argument><expr><name><name pos:line="121" pos:column="48">commandType</name><op:operator pos:line="121" pos:column="59">.</op:operator><name pos:line="121" pos:column="60">Name</name></name> <op:operator pos:line="121" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="121" pos:column="67">"_BindByName"</lit:literal></expr></argument>, <argument><expr><name pos:line="121" pos:column="82">null</name></expr></argument>, <argument><expr><op:operator pos:line="121" pos:column="88">new</op:operator> <name><name pos:line="121" pos:column="92">Type</name><index pos:line="121" pos:column="96">[]</index></name> <block pos:line="121" pos:column="99">{ <expr><call><name pos:line="121" pos:column="101">typeof</name><argument_list pos:line="121" pos:column="107">(<argument><expr><name pos:line="121" pos:column="108">IDbCommand</name></expr></argument>)</argument_list></call></expr>, <expr><call><name pos:line="121" pos:column="121">typeof</name><argument_list pos:line="121" pos:column="127">(<argument><expr><name pos:line="121" pos:column="128">bool</name></expr></argument>)</argument_list></call></expr> }</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="122" pos:column="17">var</name></type> <name pos:line="122" pos:column="21">il</name> <init pos:line="122" pos:column="24">= <expr><call><name><name pos:line="122" pos:column="26">method</name><op:operator pos:line="122" pos:column="32">.</op:operator><name pos:line="122" pos:column="33">GetILGenerator</name></name><argument_list pos:line="122" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="123" pos:column="17">il</name><op:operator pos:line="123" pos:column="19">.</op:operator><name pos:line="123" pos:column="20">Emit</name></name><argument_list pos:line="123" pos:column="24">(<argument><expr><name><name pos:line="123" pos:column="25">OpCodes</name><op:operator pos:line="123" pos:column="32">.</op:operator><name pos:line="123" pos:column="33">Ldarg_0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="124" pos:column="17">il</name><op:operator pos:line="124" pos:column="19">.</op:operator><name pos:line="124" pos:column="20">Emit</name></name><argument_list pos:line="124" pos:column="24">(<argument><expr><name><name pos:line="124" pos:column="25">OpCodes</name><op:operator pos:line="124" pos:column="32">.</op:operator><name pos:line="124" pos:column="33">Castclass</name></name></expr></argument>, <argument><expr><name pos:line="124" pos:column="44">commandType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="125" pos:column="17">il</name><op:operator pos:line="125" pos:column="19">.</op:operator><name pos:line="125" pos:column="20">Emit</name></name><argument_list pos:line="125" pos:column="24">(<argument><expr><name><name pos:line="125" pos:column="25">OpCodes</name><op:operator pos:line="125" pos:column="32">.</op:operator><name pos:line="125" pos:column="33">Ldarg_1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="126" pos:column="17">il</name><op:operator pos:line="126" pos:column="19">.</op:operator><name pos:line="126" pos:column="20">EmitCall</name></name><argument_list pos:line="126" pos:column="28">(<argument><expr><name><name pos:line="126" pos:column="29">OpCodes</name><op:operator pos:line="126" pos:column="36">.</op:operator><name pos:line="126" pos:column="37">Callvirt</name></name></expr></argument>, <argument><expr><name pos:line="126" pos:column="47">setter</name></expr></argument>, <argument><expr><name pos:line="126" pos:column="55">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="127" pos:column="17">il</name><op:operator pos:line="127" pos:column="19">.</op:operator><name pos:line="127" pos:column="20">Emit</name></name><argument_list pos:line="127" pos:column="24">(<argument><expr><name><name pos:line="127" pos:column="25">OpCodes</name><op:operator pos:line="127" pos:column="32">.</op:operator><name pos:line="127" pos:column="33">Ret</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="128" pos:column="17">action</name> <op:operator pos:line="128" pos:column="24">=</op:operator> <op:operator pos:line="128" pos:column="26">(</op:operator><name><name pos:line="128" pos:column="27">Action</name><argument_list pos:line="128" pos:column="33">&lt;<argument><name pos:line="128" pos:column="34">IDbCommand</name></argument>, <argument><name pos:line="128" pos:column="46">bool</name></argument>&gt;</argument_list></name><op:operator pos:line="128" pos:column="51">)</op:operator><call><name><name pos:line="128" pos:column="52">method</name><op:operator pos:line="128" pos:column="58">.</op:operator><name pos:line="128" pos:column="59">CreateDelegate</name></name><argument_list pos:line="128" pos:column="73">(<argument><expr><call><name pos:line="128" pos:column="74">typeof</name><argument_list pos:line="128" pos:column="80">(<argument><expr><name><name pos:line="128" pos:column="81">Action</name><argument_list pos:line="128" pos:column="87">&lt;<argument><name pos:line="128" pos:column="88">IDbCommand</name></argument>, <argument><name pos:line="128" pos:column="100">bool</name></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <comment type="line" pos:line="130" pos:column="13">// cache it            </comment>
            <expr_stmt><expr><call><name><name><name pos:line="131" pos:column="13">Link</name><argument_list pos:line="131" pos:column="17">&lt;<argument><name pos:line="131" pos:column="18">Type</name></argument>, <argument><name><name pos:line="131" pos:column="24">Action</name><argument_list pos:line="131" pos:column="30">&lt;<argument><name pos:line="131" pos:column="31">IDbCommand</name></argument>, <argument><name pos:line="131" pos:column="43">bool</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><op:operator pos:line="131" pos:column="49">.</op:operator><name pos:line="131" pos:column="50">TryAdd</name></name><argument_list pos:line="131" pos:column="56">(<argument><expr pos:line="131" pos:column="57">ref <name pos:line="131" pos:column="61">bindByNameCache</name></expr></argument>, <argument><expr><name pos:line="131" pos:column="78">commandType</name></expr></argument>, <argument><expr pos:line="131" pos:column="91">ref <name pos:line="131" pos:column="95">action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="132" pos:column="13">return <expr><name pos:line="132" pos:column="20">action</name></expr>;</return>
        }</block></function>
        <comment type="line" pos:line="134" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="135" pos:column="9">/// This is a micro-cache; suitable when the number of terms is controllable (a few hundred, for example),</comment>
        <comment type="line" pos:line="136" pos:column="9">/// and strictly append-only; you cannot change existing values. All key matches are on **REFERENCE**</comment>
        <comment type="line" pos:line="137" pos:column="9">/// equality. The type is fully thread-safe.</comment>
        <comment type="line" pos:line="138" pos:column="9">/// &lt;/summary&gt;</comment>
        <class><specifier pos:line="139" pos:column="9">partial</specifier> class <name><name pos:line="139" pos:column="23">Link</name><argument_list pos:line="139" pos:column="27">&lt;<argument><name pos:line="139" pos:column="28">TKey</name></argument>, <argument><name pos:line="139" pos:column="34">TValue</name></argument>&gt; <where pos:line="139" pos:column="42">where <name pos:line="139" pos:column="48">TKey</name> : class</where></argument_list></name>
        <block pos:line="140" pos:column="9">{
            <function><type><specifier pos:line="141" pos:column="13">public</specifier> <specifier pos:line="141" pos:column="20">static</specifier> <name pos:line="141" pos:column="27">bool</name></type> <name pos:line="141" pos:column="32">TryGet</name><parameter_list pos:line="141" pos:column="38">(<param><decl><type><name><name pos:line="141" pos:column="39">Link</name><argument_list pos:line="141" pos:column="43">&lt;<argument><name pos:line="141" pos:column="44">TKey</name></argument>, <argument><name pos:line="141" pos:column="50">TValue</name></argument>&gt;</argument_list></name></type> <name pos:line="141" pos:column="58">link</name></decl></param>, <param><decl><type><name pos:line="141" pos:column="64">TKey</name></type> <name pos:line="141" pos:column="69">key</name></decl></param>, <param><decl><type><specifier pos:line="141" pos:column="74">out</specifier> <name pos:line="141" pos:column="78">TValue</name></type> <name pos:line="141" pos:column="85">value</name></decl></param>)</parameter_list>
            <block pos:line="142" pos:column="13">{
                <while pos:line="143" pos:column="17">while <condition pos:line="143" pos:column="23">(<expr><name pos:line="143" pos:column="24">link</name> <op:operator pos:line="143" pos:column="29">!=</op:operator> <name pos:line="143" pos:column="32">null</name></expr>)</condition>
                <block pos:line="144" pos:column="17">{
                    <if pos:line="145" pos:column="21">if <condition pos:line="145" pos:column="24">(<expr><op:operator pos:line="145" pos:column="25">(</op:operator><name pos:line="145" pos:column="26">object</name><op:operator pos:line="145" pos:column="32">)</op:operator><name pos:line="145" pos:column="33">key</name> <op:operator pos:line="145" pos:column="37">==</op:operator> <op:operator pos:line="145" pos:column="40">(</op:operator><name pos:line="145" pos:column="41">object</name><op:operator pos:line="145" pos:column="47">)</op:operator><name><name pos:line="145" pos:column="48">link</name><op:operator pos:line="145" pos:column="52">.</op:operator><name pos:line="145" pos:column="53">Key</name></name></expr>)</condition><then pos:line="145" pos:column="57">
                    <block pos:line="146" pos:column="21">{
                        <expr_stmt><expr><name pos:line="147" pos:column="25">value</name> <op:operator pos:line="147" pos:column="31">=</op:operator> <name><name pos:line="147" pos:column="33">link</name><op:operator pos:line="147" pos:column="37">.</op:operator><name pos:line="147" pos:column="38">Value</name></name></expr>;</expr_stmt>
                        <return pos:line="148" pos:column="25">return <expr><lit:literal type="boolean" pos:line="148" pos:column="32">true</lit:literal></expr>;</return>
                    }</block></then></if>
                    <expr_stmt><expr><name pos:line="150" pos:column="21">link</name> <op:operator pos:line="150" pos:column="26">=</op:operator> <name><name pos:line="150" pos:column="28">link</name><op:operator pos:line="150" pos:column="32">.</op:operator><name pos:line="150" pos:column="33">Tail</name></name></expr>;</expr_stmt>
                }</block></while>
                <expr_stmt><expr><name pos:line="152" pos:column="17">value</name> <op:operator pos:line="152" pos:column="23">=</op:operator> <call><name pos:line="152" pos:column="25">default</name><argument_list pos:line="152" pos:column="32">(<argument><expr><name pos:line="152" pos:column="33">TValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="153" pos:column="17">return <expr><lit:literal type="boolean" pos:line="153" pos:column="24">false</lit:literal></expr>;</return>
            }</block></function>
            <function><type><specifier pos:line="155" pos:column="13">public</specifier> <specifier pos:line="155" pos:column="20">static</specifier> <name pos:line="155" pos:column="27">bool</name></type> <name pos:line="155" pos:column="32">TryAdd</name><parameter_list pos:line="155" pos:column="38">(<param><decl><type><specifier pos:line="155" pos:column="39">ref</specifier> <name><name pos:line="155" pos:column="43">Link</name><argument_list pos:line="155" pos:column="47">&lt;<argument><name pos:line="155" pos:column="48">TKey</name></argument>, <argument><name pos:line="155" pos:column="54">TValue</name></argument>&gt;</argument_list></name></type> <name pos:line="155" pos:column="62">head</name></decl></param>, <param><decl><type><name pos:line="155" pos:column="68">TKey</name></type> <name pos:line="155" pos:column="73">key</name></decl></param>, <param><decl><type><specifier pos:line="155" pos:column="78">ref</specifier> <name pos:line="155" pos:column="82">TValue</name></type> <name pos:line="155" pos:column="89">value</name></decl></param>)</parameter_list>
            <block pos:line="156" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="157" pos:column="17">bool</name></type> <name pos:line="157" pos:column="22">tryAgain</name></decl>;</decl_stmt>
                <do pos:line="158" pos:column="17">do
                <block pos:line="159" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="160" pos:column="21">var</name></type> <name pos:line="160" pos:column="25">snapshot</name> <init pos:line="160" pos:column="34">= <expr><call><name><name pos:line="160" pos:column="36">Interlocked</name><op:operator pos:line="160" pos:column="47">.</op:operator><name pos:line="160" pos:column="48">CompareExchange</name></name><argument_list pos:line="160" pos:column="63">(<argument><expr pos:line="160" pos:column="64">ref <name pos:line="160" pos:column="68">head</name></expr></argument>, <argument><expr><name pos:line="160" pos:column="74">null</name></expr></argument>, <argument><expr><name pos:line="160" pos:column="80">null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="161" pos:column="21">TValue</name></type> <name pos:line="161" pos:column="28">found</name></decl>;</decl_stmt>
                    <if pos:line="162" pos:column="21">if <condition pos:line="162" pos:column="24">(<expr><call><name pos:line="162" pos:column="25">TryGet</name><argument_list pos:line="162" pos:column="31">(<argument><expr><name pos:line="162" pos:column="32">snapshot</name></expr></argument>, <argument><expr><name pos:line="162" pos:column="42">key</name></expr></argument>, <argument><expr pos:line="162" pos:column="47">out <name pos:line="162" pos:column="51">found</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="162" pos:column="58">
                    <block pos:line="163" pos:column="21">{ <comment type="line" pos:line="163" pos:column="23">// existing match; report the existing value instead</comment>
                        <expr_stmt><expr><name pos:line="164" pos:column="25">value</name> <op:operator pos:line="164" pos:column="31">=</op:operator> <name pos:line="164" pos:column="33">found</name></expr>;</expr_stmt>
                        <return pos:line="165" pos:column="25">return <expr><lit:literal type="boolean" pos:line="165" pos:column="32">false</lit:literal></expr>;</return>
                    }</block></then></if>
                    <decl_stmt><decl><type><name pos:line="167" pos:column="21">var</name></type> <name pos:line="167" pos:column="25">newNode</name> <init pos:line="167" pos:column="33">= <expr><op:operator pos:line="167" pos:column="35">new</op:operator> <call><name><name pos:line="167" pos:column="39">Link</name><argument_list pos:line="167" pos:column="43">&lt;<argument><name pos:line="167" pos:column="44">TKey</name></argument>, <argument><name pos:line="167" pos:column="50">TValue</name></argument>&gt;</argument_list></name><argument_list pos:line="167" pos:column="57">(<argument><expr><name pos:line="167" pos:column="58">key</name></expr></argument>, <argument><expr><name pos:line="167" pos:column="63">value</name></expr></argument>, <argument><expr><name pos:line="167" pos:column="70">snapshot</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <comment type="line" pos:line="168" pos:column="21">// did somebody move our cheese?</comment>
                    <expr_stmt><expr><name pos:line="169" pos:column="21">tryAgain</name> <op:operator pos:line="169" pos:column="30">=</op:operator> <call><name><name pos:line="169" pos:column="32">Interlocked</name><op:operator pos:line="169" pos:column="43">.</op:operator><name pos:line="169" pos:column="44">CompareExchange</name></name><argument_list pos:line="169" pos:column="59">(<argument><expr pos:line="169" pos:column="60">ref <name pos:line="169" pos:column="64">head</name></expr></argument>, <argument><expr><name pos:line="169" pos:column="70">newNode</name></expr></argument>, <argument><expr><name pos:line="169" pos:column="79">snapshot</name></expr></argument>)</argument_list></call> <op:operator pos:line="169" pos:column="89">!=</op:operator> <name pos:line="169" pos:column="92">snapshot</name></expr>;</expr_stmt>
                }</block> while <condition pos:line="170" pos:column="25">(<expr><name pos:line="170" pos:column="26">tryAgain</name></expr>)</condition>;</do>
                <return pos:line="171" pos:column="17">return <expr><lit:literal type="boolean" pos:line="171" pos:column="24">true</lit:literal></expr>;</return>
            }</block></function>
            <constructor><specifier pos:line="173" pos:column="13">private</specifier> <name pos:line="173" pos:column="21">Link</name><parameter_list pos:line="173" pos:column="25">(<param><decl><type><name pos:line="173" pos:column="26">TKey</name></type> <name pos:line="173" pos:column="31">key</name></decl></param>, <param><decl><type><name pos:line="173" pos:column="36">TValue</name></type> <name pos:line="173" pos:column="43">value</name></decl></param>, <param><decl><type><name><name pos:line="173" pos:column="50">Link</name><argument_list pos:line="173" pos:column="54">&lt;<argument><name pos:line="173" pos:column="55">TKey</name></argument>, <argument><name pos:line="173" pos:column="61">TValue</name></argument>&gt;</argument_list></name></type> <name pos:line="173" pos:column="69">tail</name></decl></param>)</parameter_list>
            <block pos:line="174" pos:column="13">{
                <expr_stmt><expr><name pos:line="175" pos:column="17">Key</name> <op:operator pos:line="175" pos:column="21">=</op:operator> <name pos:line="175" pos:column="23">key</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="176" pos:column="17">Value</name> <op:operator pos:line="176" pos:column="23">=</op:operator> <name pos:line="176" pos:column="25">value</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="177" pos:column="17">Tail</name> <op:operator pos:line="177" pos:column="22">=</op:operator> <name pos:line="177" pos:column="24">tail</name></expr>;</expr_stmt>
            }</block></constructor>
            <decl_stmt><decl><type><specifier pos:line="179" pos:column="13">public</specifier> <name pos:line="179" pos:column="20">TKey</name></type> <name pos:line="179" pos:column="25">Key</name> <block pos:line="179" pos:column="29">{ <function_decl><name pos:line="179" pos:column="31">get</name>;</function_decl> <function_decl><specifier pos:line="179" pos:column="36">private</specifier> <name pos:line="179" pos:column="44">set</name>;</function_decl> }</block></decl></decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="180" pos:column="13">public</specifier> <name pos:line="180" pos:column="20">TValue</name></type> <name pos:line="180" pos:column="27">Value</name> <block pos:line="180" pos:column="33">{ <function_decl><name pos:line="180" pos:column="35">get</name>;</function_decl> <function_decl><specifier pos:line="180" pos:column="40">private</specifier> <name pos:line="180" pos:column="48">set</name>;</function_decl> }</block></decl></decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="181" pos:column="13">public</specifier> <name><name pos:line="181" pos:column="20">Link</name><argument_list pos:line="181" pos:column="24">&lt;<argument><name pos:line="181" pos:column="25">TKey</name></argument>, <argument><name pos:line="181" pos:column="31">TValue</name></argument>&gt;</argument_list></name></type> <name pos:line="181" pos:column="39">Tail</name> <block pos:line="181" pos:column="44">{ <function_decl><name pos:line="181" pos:column="46">get</name>;</function_decl> <function_decl><specifier pos:line="181" pos:column="51">private</specifier> <name pos:line="181" pos:column="59">set</name>;</function_decl> }</block></decl></decl_stmt>
        }</block></class>
        <class><specifier pos:line="183" pos:column="9">partial</specifier> class <name pos:line="183" pos:column="23">CacheInfo</name>
        <block pos:line="184" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="185" pos:column="13">public</specifier> <name pos:line="185" pos:column="20">DeserializerState</name></type> <name pos:line="185" pos:column="38">Deserializer</name> <block pos:line="185" pos:column="51">{ <function_decl><name pos:line="185" pos:column="53">get</name>;</function_decl> <function_decl><name pos:line="185" pos:column="58">set</name>;</function_decl> }</block></decl></decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="186" pos:column="13">public</specifier> <name><name pos:line="186" pos:column="20">Func</name><argument_list pos:line="186" pos:column="24">&lt;<argument><name pos:line="186" pos:column="25">IDataReader</name></argument>, <argument><name pos:line="186" pos:column="38">object</name></argument>&gt;</argument_list></name><index pos:line="186" pos:column="45">[]</index></type> <name pos:line="186" pos:column="48">OtherDeserializers</name> <block pos:line="186" pos:column="67">{ <function_decl><name pos:line="186" pos:column="69">get</name>;</function_decl> <function_decl><name pos:line="186" pos:column="74">set</name>;</function_decl> }</block></decl></decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="187" pos:column="13">public</specifier> <name><name pos:line="187" pos:column="20">Action</name><argument_list pos:line="187" pos:column="26">&lt;<argument><name pos:line="187" pos:column="27">IDbCommand</name></argument>, <argument><name pos:line="187" pos:column="39">object</name></argument>&gt;</argument_list></name></type> <name pos:line="187" pos:column="47">ParamReader</name> <block pos:line="187" pos:column="59">{ <function_decl><name pos:line="187" pos:column="61">get</name>;</function_decl> <function_decl><name pos:line="187" pos:column="66">set</name>;</function_decl> }</block></decl></decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="188" pos:column="13">private</specifier> <name pos:line="188" pos:column="21">int</name></type> <name pos:line="188" pos:column="25">hitCount</name></decl>;</decl_stmt>
            <function><type><specifier pos:line="189" pos:column="13">public</specifier> <name pos:line="189" pos:column="20">int</name></type> <name pos:line="189" pos:column="24">GetHitCount</name><parameter_list pos:line="189" pos:column="35">()</parameter_list> <block pos:line="189" pos:column="38">{ <return pos:line="189" pos:column="40">return <expr><call><name><name pos:line="189" pos:column="47">Interlocked</name><op:operator pos:line="189" pos:column="58">.</op:operator><name pos:line="189" pos:column="59">CompareExchange</name></name><argument_list pos:line="189" pos:column="74">(<argument><expr pos:line="189" pos:column="75">ref <name pos:line="189" pos:column="79">hitCount</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="189" pos:column="89">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="189" pos:column="92">0</lit:literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
            <function><type><specifier pos:line="190" pos:column="13">public</specifier> <name pos:line="190" pos:column="20">void</name></type> <name pos:line="190" pos:column="25">RecordHit</name><parameter_list pos:line="190" pos:column="34">()</parameter_list> <block pos:line="190" pos:column="37">{ <expr_stmt><expr><call><name><name pos:line="190" pos:column="39">Interlocked</name><op:operator pos:line="190" pos:column="50">.</op:operator><name pos:line="190" pos:column="51">Increment</name></name><argument_list pos:line="190" pos:column="60">(<argument><expr pos:line="190" pos:column="61">ref <name pos:line="190" pos:column="65">hitCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
        }</block></class>
        <function><type><specifier pos:line="192" pos:column="9">static</specifier> <name pos:line="192" pos:column="16">int</name></type> <name pos:line="192" pos:column="20">GetColumnHash</name><parameter_list pos:line="192" pos:column="33">(<param><decl><type><name pos:line="192" pos:column="34">IDataReader</name></type> <name pos:line="192" pos:column="46">reader</name></decl></param>)</parameter_list>
        <block pos:line="193" pos:column="9">{
            <unchecked pos:line="194" pos:column="13">unchecked
            <block pos:line="195" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="196" pos:column="17">int</name></type> <name pos:line="196" pos:column="21">colCount</name> <init pos:line="196" pos:column="30">= <expr><name><name pos:line="196" pos:column="32">reader</name><op:operator pos:line="196" pos:column="38">.</op:operator><name pos:line="196" pos:column="39">FieldCount</name></name></expr></init><op:operator pos:line="196" pos:column="49">,</op:operator> <name pos:line="196" pos:column="51">hash</name> <init pos:line="196" pos:column="56">= <expr><name pos:line="196" pos:column="58">colCount</name></expr></init></decl>;</decl_stmt>
                <for pos:line="197" pos:column="17">for (<init><decl><type><name pos:line="197" pos:column="22">int</name></type> <name pos:line="197" pos:column="26">i</name> <init pos:line="197" pos:column="28">= <expr><lit:literal type="number" pos:line="197" pos:column="30">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="197" pos:column="33">i</name> <op:operator pos:line="197" pos:column="35">&lt;</op:operator> <name pos:line="197" pos:column="37">colCount</name></expr>;</condition> <incr><expr><name pos:line="197" pos:column="47">i</name><op:operator pos:line="197" pos:column="48">++</op:operator></expr></incr>)
                <block pos:line="198" pos:column="17">{   <comment type="line" pos:line="198" pos:column="21">// binding code is only interested in names - not types</comment>
                    <decl_stmt><decl><type><name pos:line="199" pos:column="21">object</name></type> <name pos:line="199" pos:column="28">tmp</name> <init pos:line="199" pos:column="32">= <expr><call><name><name pos:line="199" pos:column="34">reader</name><op:operator pos:line="199" pos:column="40">.</op:operator><name pos:line="199" pos:column="41">GetName</name></name><argument_list pos:line="199" pos:column="48">(<argument><expr><name pos:line="199" pos:column="49">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name pos:line="200" pos:column="21">hash</name> <op:operator pos:line="200" pos:column="26">=</op:operator> <op:operator pos:line="200" pos:column="28">(</op:operator><name pos:line="200" pos:column="29">hash</name> <op:operator pos:line="200" pos:column="34">*</op:operator> <lit:literal type="number" pos:line="200" pos:column="36">31</lit:literal><op:operator pos:line="200" pos:column="38">)</op:operator> <op:operator pos:line="200" pos:column="40">+</op:operator> <op:operator pos:line="200" pos:column="42">(</op:operator><name pos:line="200" pos:column="43">tmp</name> <op:operator pos:line="200" pos:column="47">==</op:operator> <name pos:line="200" pos:column="50">null</name> <op:operator pos:line="200" pos:column="55">?</op:operator> <lit:literal type="number" pos:line="200" pos:column="57">0</lit:literal> <op:operator pos:line="200" pos:column="59">:</op:operator> <call><name><name pos:line="200" pos:column="61">tmp</name><op:operator pos:line="200" pos:column="64">.</op:operator><name pos:line="200" pos:column="65">GetHashCode</name></name><argument_list pos:line="200" pos:column="76">()</argument_list></call><op:operator pos:line="200" pos:column="78">)</op:operator></expr>;</expr_stmt>
                }</block></for>
                <return pos:line="202" pos:column="17">return <expr><name pos:line="202" pos:column="24">hash</name></expr>;</return>
            }</block></unchecked>
        }</block></function>
        <struct pos:line="205" pos:column="9">struct <name pos:line="205" pos:column="16">DeserializerState</name>
        <block pos:line="206" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="207" pos:column="13">public</specifier> <specifier pos:line="207" pos:column="20">readonly</specifier> <name pos:line="207" pos:column="29">int</name></type> <name pos:line="207" pos:column="33">Hash</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="208" pos:column="13">public</specifier> <specifier pos:line="208" pos:column="20">readonly</specifier> <name><name pos:line="208" pos:column="29">Func</name><argument_list pos:line="208" pos:column="33">&lt;<argument><name pos:line="208" pos:column="34">IDataReader</name></argument>, <argument><name pos:line="208" pos:column="47">object</name></argument>&gt;</argument_list></name></type> <name pos:line="208" pos:column="55">Func</name></decl>;</decl_stmt>

            <constructor><specifier pos:line="210" pos:column="13">public</specifier> <name pos:line="210" pos:column="20">DeserializerState</name><parameter_list pos:line="210" pos:column="37">(<param><decl><type><name pos:line="210" pos:column="38">int</name></type> <name pos:line="210" pos:column="42">hash</name></decl></param>, <param><decl><type><name><name pos:line="210" pos:column="48">Func</name><argument_list pos:line="210" pos:column="52">&lt;<argument><name pos:line="210" pos:column="53">IDataReader</name></argument>, <argument><name pos:line="210" pos:column="66">object</name></argument>&gt;</argument_list></name></type> <name pos:line="210" pos:column="74">func</name></decl></param>)</parameter_list>
            <block pos:line="211" pos:column="13">{
                <expr_stmt><expr><name pos:line="212" pos:column="17">Hash</name> <op:operator pos:line="212" pos:column="22">=</op:operator> <name pos:line="212" pos:column="24">hash</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="213" pos:column="17">Func</name> <op:operator pos:line="213" pos:column="22">=</op:operator> <name pos:line="213" pos:column="24">func</name></expr>;</expr_stmt>
            }</block></constructor>
        }</block></struct>

        <comment type="line" pos:line="217" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="218" pos:column="9">/// Called if the query cache is purged via PurgeQueryCache</comment>
        <comment type="line" pos:line="219" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="220" pos:column="9">public</specifier> <specifier pos:line="220" pos:column="16">static</specifier> <specifier pos:line="220" pos:column="23">event</specifier> <name pos:line="220" pos:column="29">EventHandler</name></type> <name pos:line="220" pos:column="42">QueryCachePurged</name></decl>;</decl_stmt>
        <function><type><specifier pos:line="221" pos:column="9">private</specifier> <specifier pos:line="221" pos:column="17">static</specifier> <name pos:line="221" pos:column="24">void</name></type> <name pos:line="221" pos:column="29">OnQueryCachePurged</name><parameter_list pos:line="221" pos:column="47">()</parameter_list>
        <block pos:line="222" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="223" pos:column="13">var</name></type> <name pos:line="223" pos:column="17">handler</name> <init pos:line="223" pos:column="25">= <expr><name pos:line="223" pos:column="27">QueryCachePurged</name></expr></init></decl>;</decl_stmt>
            <if pos:line="224" pos:column="13">if <condition pos:line="224" pos:column="16">(<expr><name pos:line="224" pos:column="17">handler</name> <op:operator pos:line="224" pos:column="25">!=</op:operator> <name pos:line="224" pos:column="28">null</name></expr>)</condition><then pos:line="224" pos:column="33"> <expr_stmt><expr><call><name pos:line="224" pos:column="34">handler</name><argument_list pos:line="224" pos:column="41">(<argument><expr><name pos:line="224" pos:column="42">null</name></expr></argument>, <argument><expr><name><name pos:line="224" pos:column="48">EventArgs</name><op:operator pos:line="224" pos:column="57">.</op:operator><name pos:line="224" pos:column="58">Empty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></function>
<cpp:if pos:line="226" pos:column="1">#<cpp:directive pos:line="226" pos:column="2">if</cpp:directive> <expr><name pos:line="226" pos:column="5">CSHARP30</name></expr></cpp:if>
        <decl_stmt><decl><type><specifier pos:line="227" pos:column="9">private</specifier> <specifier pos:line="227" pos:column="17">static</specifier> <specifier pos:line="227" pos:column="24">readonly</specifier> <name><name pos:line="227" pos:column="33">Dictionary</name><argument_list pos:line="227" pos:column="43">&lt;<argument><name pos:line="227" pos:column="44">Identity</name></argument>, <argument><name pos:line="227" pos:column="54">CacheInfo</name></argument>&gt;</argument_list></name></type> <name pos:line="227" pos:column="65">_queryCache</name> <init pos:line="227" pos:column="77">= <expr><op:operator pos:line="227" pos:column="79">new</op:operator> <call><name><name pos:line="227" pos:column="83">Dictionary</name><argument_list pos:line="227" pos:column="93">&lt;<argument><name pos:line="227" pos:column="94">Identity</name></argument>, <argument><name pos:line="227" pos:column="104">CacheInfo</name></argument>&gt;</argument_list></name><argument_list pos:line="227" pos:column="114">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line" pos:line="228" pos:column="9">// note: conflicts between readers and writers are so short-lived that it isn't worth the overhead of</comment>
        <comment type="line" pos:line="229" pos:column="9">// ReaderWriterLockSlim etc; a simple lock is faster</comment>
        <function><type><specifier pos:line="230" pos:column="9">private</specifier> <specifier pos:line="230" pos:column="17">static</specifier> <name pos:line="230" pos:column="24">void</name></type> <name pos:line="230" pos:column="29">SetQueryCache</name><parameter_list pos:line="230" pos:column="42">(<param><decl><type><name pos:line="230" pos:column="43">Identity</name></type> <name pos:line="230" pos:column="52">key</name></decl></param>, <param><decl><type><name pos:line="230" pos:column="57">CacheInfo</name></type> <name pos:line="230" pos:column="67">value</name></decl></param>)</parameter_list>
        <block pos:line="231" pos:column="9">{
            <lock pos:line="232" pos:column="13">lock (<expr><name pos:line="232" pos:column="19">_queryCache</name></expr>) <block pos:line="232" pos:column="32">{ <expr_stmt><expr><name><name pos:line="232" pos:column="34">_queryCache</name><index pos:line="232" pos:column="45">[<expr><name pos:line="232" pos:column="46">key</name></expr>]</index></name> <op:operator pos:line="232" pos:column="51">=</op:operator> <name pos:line="232" pos:column="53">value</name></expr>;</expr_stmt> }</block></lock>
        }</block></function>
        <function><type><specifier pos:line="234" pos:column="9">private</specifier> <specifier pos:line="234" pos:column="17">static</specifier> <name pos:line="234" pos:column="24">bool</name></type> <name pos:line="234" pos:column="29">TryGetQueryCache</name><parameter_list pos:line="234" pos:column="45">(<param><decl><type><name pos:line="234" pos:column="46">Identity</name></type> <name pos:line="234" pos:column="55">key</name></decl></param>, <param><decl><type><specifier pos:line="234" pos:column="60">out</specifier> <name pos:line="234" pos:column="64">CacheInfo</name></type> <name pos:line="234" pos:column="74">value</name></decl></param>)</parameter_list>
        <block pos:line="235" pos:column="9">{
            <lock pos:line="236" pos:column="13">lock (<expr><name pos:line="236" pos:column="19">_queryCache</name></expr>) <block pos:line="236" pos:column="32">{ <return pos:line="236" pos:column="34">return <expr><call><name><name pos:line="236" pos:column="41">_queryCache</name><op:operator pos:line="236" pos:column="52">.</op:operator><name pos:line="236" pos:column="53">TryGetValue</name></name><argument_list pos:line="236" pos:column="64">(<argument><expr><name pos:line="236" pos:column="65">key</name></expr></argument>, <argument><expr pos:line="236" pos:column="70">out <name pos:line="236" pos:column="74">value</name></expr></argument>)</argument_list></call></expr>;</return> }</block></lock>
        }</block></function>
        <function><type><specifier pos:line="238" pos:column="9">private</specifier> <specifier pos:line="238" pos:column="17">static</specifier> <name pos:line="238" pos:column="24">void</name></type> <name pos:line="238" pos:column="29">PurgeQueryCacheByType</name><parameter_list pos:line="238" pos:column="50">(<param><decl><type><name pos:line="238" pos:column="51">Type</name></type> <name pos:line="238" pos:column="56">type</name></decl></param>)</parameter_list>
        <block pos:line="239" pos:column="9">{
            <lock pos:line="240" pos:column="13">lock (<expr><name pos:line="240" pos:column="19">_queryCache</name></expr>)
            <block pos:line="241" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="242" pos:column="17">var</name></type> <name pos:line="242" pos:column="21">toRemove</name> <init pos:line="242" pos:column="30">= <expr><call><name><name pos:line="242" pos:column="32">_queryCache</name><op:operator pos:line="242" pos:column="43">.</op:operator><name pos:line="242" pos:column="44">Keys</name><op:operator pos:line="242" pos:column="48">.</op:operator><name pos:line="242" pos:column="49">Where</name></name><argument_list pos:line="242" pos:column="54">(<argument><expr><lambda><name pos:line="242" pos:column="55">id</name> <op:operator pos:line="242" pos:column="58">=&gt;</op:operator> <name><name pos:line="242" pos:column="61">id</name><op:operator pos:line="242" pos:column="63">.</op:operator><name pos:line="242" pos:column="64">type</name></name> <op:operator pos:line="242" pos:column="69">==</op:operator> <name pos:line="242" pos:column="72">type</name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="242" pos:column="77">.</op:operator><call><name pos:line="242" pos:column="78">ToArray</name><argument_list pos:line="242" pos:column="85">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <foreach pos:line="243" pos:column="17">foreach (<init><decl><type><name pos:line="243" pos:column="26">var</name></type> <name pos:line="243" pos:column="30">key</name> <range pos:line="243" pos:column="34">in <expr><name pos:line="243" pos:column="37">toRemove</name></expr></range></decl></init>)
                    <expr_stmt><expr><call><name><name pos:line="244" pos:column="21">_queryCache</name><op:operator pos:line="244" pos:column="32">.</op:operator><name pos:line="244" pos:column="33">Remove</name></name><argument_list pos:line="244" pos:column="39">(<argument><expr><name pos:line="244" pos:column="40">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></foreach>
            }</block></lock>
        }</block></function>
        <comment type="line" pos:line="247" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="248" pos:column="9">/// Purge the query cache </comment>
        <comment type="line" pos:line="249" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="250" pos:column="9">public</specifier> <specifier pos:line="250" pos:column="16">static</specifier> <name pos:line="250" pos:column="23">void</name></type> <name pos:line="250" pos:column="28">PurgeQueryCache</name><parameter_list pos:line="250" pos:column="43">()</parameter_list>
        <block pos:line="251" pos:column="9">{
            <lock pos:line="252" pos:column="13">lock (<expr><name pos:line="252" pos:column="19">_queryCache</name></expr>)
            <block pos:line="253" pos:column="13">{
                 <expr_stmt><expr><call><name><name pos:line="254" pos:column="18">_queryCache</name><op:operator pos:line="254" pos:column="29">.</op:operator><name pos:line="254" pos:column="30">Clear</name></name><argument_list pos:line="254" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
            }</block></lock>
            <expr_stmt><expr><call><name pos:line="256" pos:column="13">OnQueryCachePurged</name><argument_list pos:line="256" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>
<cpp:else pos:line="258" pos:column="1">#<cpp:directive pos:line="258" pos:column="2">else</cpp:directive></cpp:else>
        <decl_stmt><decl><type><specifier pos:line="259" pos:column="9">static</specifier> <specifier pos:line="259" pos:column="16">readonly</specifier> <name><name pos:line="259" pos:column="25">System</name><op:operator pos:line="259" pos:column="31">.</op:operator><name pos:line="259" pos:column="32">Collections</name><op:operator pos:line="259" pos:column="43">.</op:operator><name pos:line="259" pos:column="44">Concurrent</name><op:operator pos:line="259" pos:column="54">.</op:operator><name><name pos:line="259" pos:column="55">ConcurrentDictionary</name><argument_list pos:line="259" pos:column="75">&lt;<argument><name pos:line="259" pos:column="76">Identity</name></argument>, <argument><name pos:line="259" pos:column="86">CacheInfo</name></argument>&gt;</argument_list></name></name></type> <name pos:line="259" pos:column="97">_queryCache</name> <init pos:line="259" pos:column="109">= <expr><op:operator pos:line="259" pos:column="111">new</op:operator> <call><name><name pos:line="259" pos:column="115">System</name><op:operator pos:line="259" pos:column="121">.</op:operator><name pos:line="259" pos:column="122">Collections</name><op:operator pos:line="259" pos:column="133">.</op:operator><name pos:line="259" pos:column="134">Concurrent</name><op:operator pos:line="259" pos:column="144">.</op:operator><name><name pos:line="259" pos:column="145">ConcurrentDictionary</name><argument_list pos:line="259" pos:column="165">&lt;<argument><name pos:line="259" pos:column="166">Identity</name></argument>, <argument><name pos:line="259" pos:column="176">CacheInfo</name></argument>&gt;</argument_list></name></name><argument_list pos:line="259" pos:column="186">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <function><type><specifier pos:line="260" pos:column="9">private</specifier> <specifier pos:line="260" pos:column="17">static</specifier> <name pos:line="260" pos:column="24">void</name></type> <name pos:line="260" pos:column="29">SetQueryCache</name><parameter_list pos:line="260" pos:column="42">(<param><decl><type><name pos:line="260" pos:column="43">Identity</name></type> <name pos:line="260" pos:column="52">key</name></decl></param>, <param><decl><type><name pos:line="260" pos:column="57">CacheInfo</name></type> <name pos:line="260" pos:column="67">value</name></decl></param>)</parameter_list>
        <block pos:line="261" pos:column="9">{
            <if pos:line="262" pos:column="13">if <condition pos:line="262" pos:column="16">(<expr><call><name><name pos:line="262" pos:column="17">Interlocked</name><op:operator pos:line="262" pos:column="28">.</op:operator><name pos:line="262" pos:column="29">Increment</name></name><argument_list pos:line="262" pos:column="38">(<argument><expr pos:line="262" pos:column="39">ref <name pos:line="262" pos:column="43">collect</name></expr></argument>)</argument_list></call> <op:operator pos:line="262" pos:column="52">==</op:operator> <name pos:line="262" pos:column="55">COLLECT_PER_ITEMS</name></expr>)</condition><then pos:line="262" pos:column="73">
            <block pos:line="263" pos:column="13">{
                <expr_stmt><expr><call><name pos:line="264" pos:column="17">CollectCacheGarbage</name><argument_list pos:line="264" pos:column="36">()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name><name pos:line="266" pos:column="13">_queryCache</name><index pos:line="266" pos:column="24">[<expr><name pos:line="266" pos:column="25">key</name></expr>]</index></name> <op:operator pos:line="266" pos:column="30">=</op:operator> <name pos:line="266" pos:column="32">value</name></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="269" pos:column="9">private</specifier> <specifier pos:line="269" pos:column="17">static</specifier> <name pos:line="269" pos:column="24">void</name></type> <name pos:line="269" pos:column="29">CollectCacheGarbage</name><parameter_list pos:line="269" pos:column="48">()</parameter_list>
        <block pos:line="270" pos:column="9">{
            <try pos:line="271" pos:column="13">try
            <block pos:line="272" pos:column="13">{
                <foreach pos:line="273" pos:column="17">foreach (<init><decl><type><name pos:line="273" pos:column="26">var</name></type> <name pos:line="273" pos:column="30">pair</name> <range pos:line="273" pos:column="35">in <expr><name pos:line="273" pos:column="38">_queryCache</name></expr></range></decl></init>)
                <block pos:line="274" pos:column="17">{
                    <if pos:line="275" pos:column="21">if <condition pos:line="275" pos:column="24">(<expr><call><name><name pos:line="275" pos:column="25">pair</name><op:operator pos:line="275" pos:column="29">.</op:operator><name pos:line="275" pos:column="30">Value</name><op:operator pos:line="275" pos:column="35">.</op:operator><name pos:line="275" pos:column="36">GetHitCount</name></name><argument_list pos:line="275" pos:column="47">()</argument_list></call> <op:operator pos:line="275" pos:column="50">&lt;=</op:operator> <name pos:line="275" pos:column="53">COLLECT_HIT_COUNT_MIN</name></expr>)</condition><then pos:line="275" pos:column="75">
                    <block pos:line="276" pos:column="21">{
                        <decl_stmt><decl><type><name pos:line="277" pos:column="25">CacheInfo</name></type> <name pos:line="277" pos:column="35">cache</name></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name pos:line="278" pos:column="25">_queryCache</name><op:operator pos:line="278" pos:column="36">.</op:operator><name pos:line="278" pos:column="37">TryRemove</name></name><argument_list pos:line="278" pos:column="46">(<argument><expr><name><name pos:line="278" pos:column="47">pair</name><op:operator pos:line="278" pos:column="51">.</op:operator><name pos:line="278" pos:column="52">Key</name></name></expr></argument>, <argument><expr pos:line="278" pos:column="57">out <name pos:line="278" pos:column="61">cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></foreach>
            }</block>

            <finally pos:line="283" pos:column="13">finally
            <block pos:line="284" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="285" pos:column="17">Interlocked</name><op:operator pos:line="285" pos:column="28">.</op:operator><name pos:line="285" pos:column="29">Exchange</name></name><argument_list pos:line="285" pos:column="37">(<argument><expr pos:line="285" pos:column="38">ref <name pos:line="285" pos:column="42">collect</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="285" pos:column="51">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>
        }</block></function>

        <decl_stmt><decl><type><specifier pos:line="289" pos:column="9">private</specifier> <specifier pos:line="289" pos:column="17">const</specifier> <name pos:line="289" pos:column="23">int</name></type> <name pos:line="289" pos:column="27">COLLECT_PER_ITEMS</name> <init pos:line="289" pos:column="45">= <expr><lit:literal type="number" pos:line="289" pos:column="47">1000</lit:literal></expr></init><op:operator pos:line="289" pos:column="51">,</op:operator> <name pos:line="289" pos:column="53">COLLECT_HIT_COUNT_MIN</name> <init pos:line="289" pos:column="75">= <expr><lit:literal type="number" pos:line="289" pos:column="77">0</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="290" pos:column="9">private</specifier> <specifier pos:line="290" pos:column="17">static</specifier> <name pos:line="290" pos:column="24">int</name></type> <name pos:line="290" pos:column="28">collect</name></decl>;</decl_stmt>
        <function><type><specifier pos:line="291" pos:column="9">private</specifier> <specifier pos:line="291" pos:column="17">static</specifier> <name pos:line="291" pos:column="24">bool</name></type> <name pos:line="291" pos:column="29">TryGetQueryCache</name><parameter_list pos:line="291" pos:column="45">(<param><decl><type><name pos:line="291" pos:column="46">Identity</name></type> <name pos:line="291" pos:column="55">key</name></decl></param>, <param><decl><type><specifier pos:line="291" pos:column="60">out</specifier> <name pos:line="291" pos:column="64">CacheInfo</name></type> <name pos:line="291" pos:column="74">value</name></decl></param>)</parameter_list>
        <block pos:line="292" pos:column="9">{
            <if pos:line="293" pos:column="13">if <condition pos:line="293" pos:column="16">(<expr><call><name><name pos:line="293" pos:column="17">_queryCache</name><op:operator pos:line="293" pos:column="28">.</op:operator><name pos:line="293" pos:column="29">TryGetValue</name></name><argument_list pos:line="293" pos:column="40">(<argument><expr><name pos:line="293" pos:column="41">key</name></expr></argument>, <argument><expr pos:line="293" pos:column="46">out <name pos:line="293" pos:column="50">value</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="293" pos:column="57">
            <block pos:line="294" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="295" pos:column="17">value</name><op:operator pos:line="295" pos:column="22">.</op:operator><name pos:line="295" pos:column="23">RecordHit</name></name><argument_list pos:line="295" pos:column="32">()</argument_list></call></expr>;</expr_stmt>
                <return pos:line="296" pos:column="17">return <expr><lit:literal type="boolean" pos:line="296" pos:column="24">true</lit:literal></expr>;</return>
            }</block></then></if>
            <expr_stmt><expr><name pos:line="298" pos:column="13">value</name> <op:operator pos:line="298" pos:column="19">=</op:operator> <name pos:line="298" pos:column="21">null</name></expr>;</expr_stmt>
            <return pos:line="299" pos:column="13">return <expr><lit:literal type="boolean" pos:line="299" pos:column="20">false</lit:literal></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="302" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="303" pos:column="9">/// Purge the query cache </comment>
        <comment type="line" pos:line="304" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="305" pos:column="9">public</specifier> <specifier pos:line="305" pos:column="16">static</specifier> <name pos:line="305" pos:column="23">void</name></type> <name pos:line="305" pos:column="28">PurgeQueryCache</name><parameter_list pos:line="305" pos:column="43">()</parameter_list>
        <block pos:line="306" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="307" pos:column="13">_queryCache</name><op:operator pos:line="307" pos:column="24">.</op:operator><name pos:line="307" pos:column="25">Clear</name></name><argument_list pos:line="307" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="308" pos:column="13">OnQueryCachePurged</name><argument_list pos:line="308" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="311" pos:column="9">private</specifier> <specifier pos:line="311" pos:column="17">static</specifier> <name pos:line="311" pos:column="24">void</name></type> <name pos:line="311" pos:column="29">PurgeQueryCacheByType</name><parameter_list pos:line="311" pos:column="50">(<param><decl><type><name pos:line="311" pos:column="51">Type</name></type> <name pos:line="311" pos:column="56">type</name></decl></param>)</parameter_list>
        <block pos:line="312" pos:column="9">{
            <foreach pos:line="313" pos:column="13">foreach (<init><decl><type><name pos:line="313" pos:column="22">var</name></type> <name pos:line="313" pos:column="26">entry</name> <range pos:line="313" pos:column="32">in <expr><name pos:line="313" pos:column="35">_queryCache</name></expr></range></decl></init>)
            <block pos:line="314" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="315" pos:column="17">CacheInfo</name></type> <name pos:line="315" pos:column="27">cache</name></decl>;</decl_stmt>
                <if pos:line="316" pos:column="17">if <condition pos:line="316" pos:column="20">(<expr><name><name pos:line="316" pos:column="21">entry</name><op:operator pos:line="316" pos:column="26">.</op:operator><name pos:line="316" pos:column="27">Key</name><op:operator pos:line="316" pos:column="30">.</op:operator><name pos:line="316" pos:column="31">type</name></name> <op:operator pos:line="316" pos:column="36">==</op:operator> <name pos:line="316" pos:column="39">type</name></expr>)</condition><then pos:line="316" pos:column="44">
                    <expr_stmt><expr><call><name><name pos:line="317" pos:column="21">_queryCache</name><op:operator pos:line="317" pos:column="32">.</op:operator><name pos:line="317" pos:column="33">TryRemove</name></name><argument_list pos:line="317" pos:column="42">(<argument><expr><name><name pos:line="317" pos:column="43">entry</name><op:operator pos:line="317" pos:column="48">.</op:operator><name pos:line="317" pos:column="49">Key</name></name></expr></argument>, <argument><expr pos:line="317" pos:column="54">out <name pos:line="317" pos:column="58">cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></foreach>
        }</block></function>

        <comment type="line" pos:line="321" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="322" pos:column="9">/// Return a count of all the cached queries by dapper</comment>
        <comment type="line" pos:line="323" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="324" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="325" pos:column="9">public</specifier> <specifier pos:line="325" pos:column="16">static</specifier> <name pos:line="325" pos:column="23">int</name></type> <name pos:line="325" pos:column="27">GetCachedSQLCount</name><parameter_list pos:line="325" pos:column="44">()</parameter_list>
        <block pos:line="326" pos:column="9">{
            <return pos:line="327" pos:column="13">return <expr><name><name pos:line="327" pos:column="20">_queryCache</name><op:operator pos:line="327" pos:column="31">.</op:operator><name pos:line="327" pos:column="32">Count</name></name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="330" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="331" pos:column="9">/// Return a list of all the queries cached by dapper</comment>
        <comment type="line" pos:line="332" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="333" pos:column="9">/// &lt;param name="ignoreHitCountAbove"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="334" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="335" pos:column="9">public</specifier> <specifier pos:line="335" pos:column="16">static</specifier> <name><name pos:line="335" pos:column="23">IEnumerable</name><argument_list pos:line="335" pos:column="34">&lt;<argument><name><name pos:line="335" pos:column="35">Tuple</name><argument_list pos:line="335" pos:column="40">&lt;<argument><name pos:line="335" pos:column="41">string</name></argument>, <argument><name pos:line="335" pos:column="49">string</name></argument>, <argument><name pos:line="335" pos:column="57">int</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="335" pos:column="63">GetCachedSQL</name><parameter_list pos:line="335" pos:column="75">(<param><decl><type><name pos:line="335" pos:column="76">int</name></type> <name pos:line="335" pos:column="80">ignoreHitCountAbove</name> <init pos:line="335" pos:column="100">= <expr><name><name pos:line="335" pos:column="102">int</name><op:operator pos:line="335" pos:column="105">.</op:operator><name pos:line="335" pos:column="106">MaxValue</name></name></expr></init></decl></param>)</parameter_list>
        <block pos:line="336" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="337" pos:column="13">var</name></type> <name pos:line="337" pos:column="17">data</name> <init pos:line="337" pos:column="22">= <expr><call><name><name pos:line="337" pos:column="24">_queryCache</name><op:operator pos:line="337" pos:column="35">.</op:operator><name pos:line="337" pos:column="36">Select</name></name><argument_list pos:line="337" pos:column="42">(<argument><expr><lambda><name pos:line="337" pos:column="43">pair</name> <op:operator pos:line="337" pos:column="48">=&gt;</op:operator> <call><name><name pos:line="337" pos:column="51">Tuple</name><op:operator pos:line="337" pos:column="56">.</op:operator><name pos:line="337" pos:column="57">Create</name></name><argument_list pos:line="337" pos:column="63">(<argument><expr><name><name pos:line="337" pos:column="64">pair</name><op:operator pos:line="337" pos:column="68">.</op:operator><name pos:line="337" pos:column="69">Key</name><op:operator pos:line="337" pos:column="72">.</op:operator><name pos:line="337" pos:column="73">connectionString</name></name></expr></argument>, <argument><expr><name><name pos:line="337" pos:column="91">pair</name><op:operator pos:line="337" pos:column="95">.</op:operator><name pos:line="337" pos:column="96">Key</name><op:operator pos:line="337" pos:column="99">.</op:operator><name pos:line="337" pos:column="100">sql</name></name></expr></argument>, <argument><expr><call><name><name pos:line="337" pos:column="105">pair</name><op:operator pos:line="337" pos:column="109">.</op:operator><name pos:line="337" pos:column="110">Value</name><op:operator pos:line="337" pos:column="115">.</op:operator><name pos:line="337" pos:column="116">GetHitCount</name></name><argument_list pos:line="337" pos:column="127">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="338" pos:column="13">if <condition pos:line="338" pos:column="16">(<expr><name pos:line="338" pos:column="17">ignoreHitCountAbove</name> <op:operator pos:line="338" pos:column="37">&lt;</op:operator> <name><name pos:line="338" pos:column="39">int</name><op:operator pos:line="338" pos:column="42">.</op:operator><name pos:line="338" pos:column="43">MaxValue</name></name></expr>)</condition><then pos:line="338" pos:column="52"> <expr_stmt><expr><name pos:line="338" pos:column="53">data</name> <op:operator pos:line="338" pos:column="58">=</op:operator> <call><name><name pos:line="338" pos:column="60">data</name><op:operator pos:line="338" pos:column="64">.</op:operator><name pos:line="338" pos:column="65">Where</name></name><argument_list pos:line="338" pos:column="70">(<argument><expr><lambda><name pos:line="338" pos:column="71">tuple</name> <op:operator pos:line="338" pos:column="77">=&gt;</op:operator> <name><name pos:line="338" pos:column="80">tuple</name><op:operator pos:line="338" pos:column="85">.</op:operator><name pos:line="338" pos:column="86">Item3</name></name> <op:operator pos:line="338" pos:column="92">&lt;=</op:operator> <name pos:line="338" pos:column="95">ignoreHitCountAbove</name></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            <return pos:line="339" pos:column="13">return <expr><name pos:line="339" pos:column="20">data</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="342" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="343" pos:column="9">/// Deep diagnostics only: find any hash collisions in the cache</comment>
        <comment type="line" pos:line="344" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="345" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="346" pos:column="9">public</specifier> <specifier pos:line="346" pos:column="16">static</specifier> <name><name pos:line="346" pos:column="23">IEnumerable</name><argument_list pos:line="346" pos:column="34">&lt;<argument><name><name pos:line="346" pos:column="35">Tuple</name><argument_list pos:line="346" pos:column="40">&lt;<argument><name pos:line="346" pos:column="41">int</name></argument>, <argument><name pos:line="346" pos:column="46">int</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="346" pos:column="52">GetHashCollissions</name><parameter_list pos:line="346" pos:column="70">()</parameter_list>
        <block pos:line="347" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="348" pos:column="13">var</name></type> <name pos:line="348" pos:column="17">counts</name> <init pos:line="348" pos:column="24">= <expr><op:operator pos:line="348" pos:column="26">new</op:operator> <call><name><name pos:line="348" pos:column="30">Dictionary</name><argument_list pos:line="348" pos:column="40">&lt;<argument><name pos:line="348" pos:column="41">int</name></argument>, <argument><name pos:line="348" pos:column="46">int</name></argument>&gt;</argument_list></name><argument_list pos:line="348" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="349" pos:column="13">foreach (<init><decl><type><name pos:line="349" pos:column="22">var</name></type> <name pos:line="349" pos:column="26">key</name> <range pos:line="349" pos:column="30">in <expr><name><name pos:line="349" pos:column="33">_queryCache</name><op:operator pos:line="349" pos:column="44">.</op:operator><name pos:line="349" pos:column="45">Keys</name></name></expr></range></decl></init>)
            <block pos:line="350" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="351" pos:column="17">int</name></type> <name pos:line="351" pos:column="21">count</name></decl>;</decl_stmt>
                <if pos:line="352" pos:column="17">if <condition pos:line="352" pos:column="20">(<expr><op:operator pos:line="352" pos:column="21">!</op:operator><call><name><name pos:line="352" pos:column="22">counts</name><op:operator pos:line="352" pos:column="28">.</op:operator><name pos:line="352" pos:column="29">TryGetValue</name></name><argument_list pos:line="352" pos:column="40">(<argument><expr><name><name pos:line="352" pos:column="41">key</name><op:operator pos:line="352" pos:column="44">.</op:operator><name pos:line="352" pos:column="45">hashCode</name></name></expr></argument>, <argument><expr pos:line="352" pos:column="55">out <name pos:line="352" pos:column="59">count</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="352" pos:column="66">
                <block pos:line="353" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="354" pos:column="21">counts</name><op:operator pos:line="354" pos:column="27">.</op:operator><name pos:line="354" pos:column="28">Add</name></name><argument_list pos:line="354" pos:column="31">(<argument><expr><name><name pos:line="354" pos:column="32">key</name><op:operator pos:line="354" pos:column="35">.</op:operator><name pos:line="354" pos:column="36">hashCode</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="354" pos:column="46">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="356" pos:column="17">else
                <block pos:line="357" pos:column="17">{
                    <expr_stmt><expr><name><name pos:line="358" pos:column="21">counts</name><index pos:line="358" pos:column="27">[<expr><name><name pos:line="358" pos:column="28">key</name><op:operator pos:line="358" pos:column="31">.</op:operator><name pos:line="358" pos:column="32">hashCode</name></name></expr>]</index></name> <op:operator pos:line="358" pos:column="42">=</op:operator> <name pos:line="358" pos:column="44">count</name> <op:operator pos:line="358" pos:column="50">+</op:operator> <lit:literal type="number" pos:line="358" pos:column="52">1</lit:literal></expr>;</expr_stmt>
                }</block></else></if>
            }</block></foreach>
            <return pos:line="361" pos:column="13">return <expr><linq><from pos:line="361" pos:column="20">from <expr><name pos:line="361" pos:column="25">pair</name></expr> <in pos:line="361" pos:column="30">in <expr><name pos:line="361" pos:column="33">counts</name></expr></in></from>
                   <where pos:line="362" pos:column="20">where <expr><name><name pos:line="362" pos:column="26">pair</name><op:operator pos:line="362" pos:column="30">.</op:operator><name pos:line="362" pos:column="31">Value</name></name> <op:operator pos:line="362" pos:column="37">&gt;</op:operator> <lit:literal type="number" pos:line="362" pos:column="39">1</lit:literal></expr></where>
                   <select pos:line="363" pos:column="20">select <expr><call><name><name pos:line="363" pos:column="27">Tuple</name><op:operator pos:line="363" pos:column="32">.</op:operator><name pos:line="363" pos:column="33">Create</name></name><argument_list pos:line="363" pos:column="39">(<argument><expr><name><name pos:line="363" pos:column="40">pair</name><op:operator pos:line="363" pos:column="44">.</op:operator><name pos:line="363" pos:column="45">Key</name></name></expr></argument>, <argument><expr><name><name pos:line="363" pos:column="50">pair</name><op:operator pos:line="363" pos:column="54">.</op:operator><name pos:line="363" pos:column="55">Value</name></name></expr></argument>)</argument_list></call></expr></select></linq></expr>;</return>

        }</block></function>
<cpp:endif pos:line="366" pos:column="1">#<cpp:directive pos:line="366" pos:column="2">endif</cpp:directive></cpp:endif>


        <decl_stmt><decl><type><specifier pos:line="369" pos:column="9">static</specifier> <specifier pos:line="369" pos:column="16">readonly</specifier> <name><name pos:line="369" pos:column="25">Dictionary</name><argument_list pos:line="369" pos:column="35">&lt;<argument><name pos:line="369" pos:column="36">Type</name></argument>, <argument><name pos:line="369" pos:column="42">DbType</name></argument>&gt;</argument_list></name></type> <name pos:line="369" pos:column="50">typeMap</name></decl>;</decl_stmt>

        <constructor><specifier pos:line="371" pos:column="9">static</specifier> <name pos:line="371" pos:column="16">SqlMapper</name><parameter_list pos:line="371" pos:column="25">()</parameter_list>
        <block pos:line="372" pos:column="9">{
            <expr_stmt><expr><name pos:line="373" pos:column="13">typeMap</name> <op:operator pos:line="373" pos:column="21">=</op:operator> <op:operator pos:line="373" pos:column="23">new</op:operator> <call><name><name pos:line="373" pos:column="27">Dictionary</name><argument_list pos:line="373" pos:column="37">&lt;<argument><name pos:line="373" pos:column="38">Type</name></argument>, <argument><name pos:line="373" pos:column="44">DbType</name></argument>&gt;</argument_list></name><argument_list pos:line="373" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="374" pos:column="13">typeMap</name><index pos:line="374" pos:column="20">[<expr><call><name pos:line="374" pos:column="21">typeof</name><argument_list pos:line="374" pos:column="27">(<argument><expr><name pos:line="374" pos:column="28">byte</name></expr></argument>)</argument_list></call></expr>]</index></name> <op:operator pos:line="374" pos:column="35">=</op:operator> <name><name pos:line="374" pos:column="37">DbType</name><op:operator pos:line="374" pos:column="43">.</op:operator><name pos:line="374" pos:column="44">Byte</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="375" pos:column="13">typeMap</name><index pos:line="375" pos:column="20">[<expr><call><name pos:line="375" pos:column="21">typeof</name><argument_list pos:line="375" pos:column="27">(<argument><expr><name pos:line="375" pos:column="28">sbyte</name></expr></argument>)</argument_list></call></expr>]</index></name> <op:operator pos:line="375" pos:column="36">=</op:operator> <name><name pos:line="375" pos:column="38">DbType</name><op:operator pos:line="375" pos:column="44">.</op:operator><name pos:line="375" pos:column="45">SByte</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="376" pos:column="13">typeMap</name><index pos:line="376" pos:column="20">[<expr><call><name pos:line="376" pos:column="21">typeof</name><argument_list pos:line="376" pos:column="27">(<argument><expr><name pos:line="376" pos:column="28">short</name></expr></argument>)</argument_list></call></expr>]</index></name> <op:operator pos:line="376" pos:column="36">=</op:operator> <name><name pos:line="376" pos:column="38">DbType</name><op:operator pos:line="376" pos:column="44">.</op:operator><name pos:line="376" pos:column="45">Int16</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="377" pos:column="13">typeMap</name><index pos:line="377" pos:column="20">[<expr><call><name pos:line="377" pos:column="21">typeof</name><argument_list pos:line="377" pos:column="27">(<argument><expr><name pos:line="377" pos:column="28">ushort</name></expr></argument>)</argument_list></call></expr>]</index></name> <op:operator pos:line="377" pos:column="37">=</op:operator> <name><name pos:line="377" pos:column="39">DbType</name><op:operator pos:line="377" pos:column="45">.</op:operator><name pos:line="377" pos:column="46">UInt16</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="378" pos:column="13">typeMap</name><index pos:line="378" pos:column="20">[<expr><call><name pos:line="378" pos:column="21">typeof</name><argument_list pos:line="378" pos:column="27">(<argument><expr><name pos:line="378" pos:column="28">int</name></expr></argument>)</argument_list></call></expr>]</index></name> <op:operator pos:line="378" pos:column="34">=</op:operator> <name><name pos:line="378" pos:column="36">DbType</name><op:operator pos:line="378" pos:column="42">.</op:operator><name pos:line="378" pos:column="43">Int32</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="379" pos:column="13">typeMap</name><index pos:line="379" pos:column="20">[<expr><call><name pos:line="379" pos:column="21">typeof</name><argument_list pos:line="379" pos:column="27">(<argument><expr><name pos:line="379" pos:column="28">uint</name></expr></argument>)</argument_list></call></expr>]</index></name> <op:operator pos:line="379" pos:column="35">=</op:operator> <name><name pos:line="379" pos:column="37">DbType</name><op:operator pos:line="379" pos:column="43">.</op:operator><name pos:line="379" pos:column="44">UInt32</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="380" pos:column="13">typeMap</name><index pos:line="380" pos:column="20">[<expr><call><name pos:line="380" pos:column="21">typeof</name><argument_list pos:line="380" pos:column="27">(<argument><expr><name pos:line="380" pos:column="28">long</name></expr></argument>)</argument_list></call></expr>]</index></name> <op:operator pos:line="380" pos:column="35">=</op:operator> <name><name pos:line="380" pos:column="37">DbType</name><op:operator pos:line="380" pos:column="43">.</op:operator><name pos:line="380" pos:column="44">Int64</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="381" pos:column="13">typeMap</name><index pos:line="381" pos:column="20">[<expr><call><name pos:line="381" pos:column="21">typeof</name><argument_list pos:line="381" pos:column="27">(<argument><expr><name pos:line="381" pos:column="28">ulong</name></expr></argument>)</argument_list></call></expr>]</index></name> <op:operator pos:line="381" pos:column="36">=</op:operator> <name><name pos:line="381" pos:column="38">DbType</name><op:operator pos:line="381" pos:column="44">.</op:operator><name pos:line="381" pos:column="45">UInt64</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="382" pos:column="13">typeMap</name><index pos:line="382" pos:column="20">[<expr><call><name pos:line="382" pos:column="21">typeof</name><argument_list pos:line="382" pos:column="27">(<argument><expr><name pos:line="382" pos:column="28">float</name></expr></argument>)</argument_list></call></expr>]</index></name> <op:operator pos:line="382" pos:column="36">=</op:operator> <name><name pos:line="382" pos:column="38">DbType</name><op:operator pos:line="382" pos:column="44">.</op:operator><name pos:line="382" pos:column="45">Single</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="383" pos:column="13">typeMap</name><index pos:line="383" pos:column="20">[<expr><call><name pos:line="383" pos:column="21">typeof</name><argument_list pos:line="383" pos:column="27">(<argument><expr><name pos:line="383" pos:column="28">double</name></expr></argument>)</argument_list></call></expr>]</index></name> <op:operator pos:line="383" pos:column="37">=</op:operator> <name><name pos:line="383" pos:column="39">DbType</name><op:operator pos:line="383" pos:column="45">.</op:operator><name pos:line="383" pos:column="46">Double</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="384" pos:column="13">typeMap</name><index pos:line="384" pos:column="20">[<expr><call><name pos:line="384" pos:column="21">typeof</name><argument_list pos:line="384" pos:column="27">(<argument><expr><name pos:line="384" pos:column="28">decimal</name></expr></argument>)</argument_list></call></expr>]</index></name> <op:operator pos:line="384" pos:column="38">=</op:operator> <name><name pos:line="384" pos:column="40">DbType</name><op:operator pos:line="384" pos:column="46">.</op:operator><name pos:line="384" pos:column="47">Decimal</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="385" pos:column="13">typeMap</name><index pos:line="385" pos:column="20">[<expr><call><name pos:line="385" pos:column="21">typeof</name><argument_list pos:line="385" pos:column="27">(<argument><expr><name pos:line="385" pos:column="28">bool</name></expr></argument>)</argument_list></call></expr>]</index></name> <op:operator pos:line="385" pos:column="35">=</op:operator> <name><name pos:line="385" pos:column="37">DbType</name><op:operator pos:line="385" pos:column="43">.</op:operator><name pos:line="385" pos:column="44">Boolean</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="386" pos:column="13">typeMap</name><index pos:line="386" pos:column="20">[<expr><call><name pos:line="386" pos:column="21">typeof</name><argument_list pos:line="386" pos:column="27">(<argument><expr><name pos:line="386" pos:column="28">string</name></expr></argument>)</argument_list></call></expr>]</index></name> <op:operator pos:line="386" pos:column="37">=</op:operator> <name><name pos:line="386" pos:column="39">DbType</name><op:operator pos:line="386" pos:column="45">.</op:operator><name pos:line="386" pos:column="46">String</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="387" pos:column="13">typeMap</name><index pos:line="387" pos:column="20">[<expr><call><name pos:line="387" pos:column="21">typeof</name><argument_list pos:line="387" pos:column="27">(<argument><expr><name pos:line="387" pos:column="28">char</name></expr></argument>)</argument_list></call></expr>]</index></name> <op:operator pos:line="387" pos:column="35">=</op:operator> <name><name pos:line="387" pos:column="37">DbType</name><op:operator pos:line="387" pos:column="43">.</op:operator><name pos:line="387" pos:column="44">StringFixedLength</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="388" pos:column="13">typeMap</name><index pos:line="388" pos:column="20">[<expr><call><name pos:line="388" pos:column="21">typeof</name><argument_list pos:line="388" pos:column="27">(<argument><expr><name pos:line="388" pos:column="28">Guid</name></expr></argument>)</argument_list></call></expr>]</index></name> <op:operator pos:line="388" pos:column="35">=</op:operator> <name><name pos:line="388" pos:column="37">DbType</name><op:operator pos:line="388" pos:column="43">.</op:operator><name pos:line="388" pos:column="44">Guid</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="389" pos:column="13">typeMap</name><index pos:line="389" pos:column="20">[<expr><call><name pos:line="389" pos:column="21">typeof</name><argument_list pos:line="389" pos:column="27">(<argument><expr><name pos:line="389" pos:column="28">DateTime</name></expr></argument>)</argument_list></call></expr>]</index></name> <op:operator pos:line="389" pos:column="39">=</op:operator> <name><name pos:line="389" pos:column="41">DbType</name><op:operator pos:line="389" pos:column="47">.</op:operator><name pos:line="389" pos:column="48">DateTime</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="390" pos:column="13">typeMap</name><index pos:line="390" pos:column="20">[<expr><call><name pos:line="390" pos:column="21">typeof</name><argument_list pos:line="390" pos:column="27">(<argument><expr><name pos:line="390" pos:column="28">DateTimeOffset</name></expr></argument>)</argument_list></call></expr>]</index></name> <op:operator pos:line="390" pos:column="45">=</op:operator> <name><name pos:line="390" pos:column="47">DbType</name><op:operator pos:line="390" pos:column="53">.</op:operator><name pos:line="390" pos:column="54">DateTimeOffset</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="391" pos:column="13">typeMap</name><index pos:line="391" pos:column="20">[<expr><call><name pos:line="391" pos:column="21">typeof</name><argument_list pos:line="391" pos:column="27">(<argument><expr><name pos:line="391" pos:column="28">TimeSpan</name></expr></argument>)</argument_list></call></expr>]</index></name> <op:operator pos:line="391" pos:column="39">=</op:operator> <name><name pos:line="391" pos:column="41">DbType</name><op:operator pos:line="391" pos:column="47">.</op:operator><name pos:line="391" pos:column="48">Time</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="392" pos:column="13">typeMap</name><index pos:line="392" pos:column="20">[<expr><call><name pos:line="392" pos:column="21">typeof</name><argument_list pos:line="392" pos:column="27">(<argument><expr><name><name pos:line="392" pos:column="28">byte</name><index pos:line="392" pos:column="32">[]</index></name></expr></argument>)</argument_list></call></expr>]</index></name> <op:operator pos:line="392" pos:column="37">=</op:operator> <name><name pos:line="392" pos:column="39">DbType</name><op:operator pos:line="392" pos:column="45">.</op:operator><name pos:line="392" pos:column="46">Binary</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="393" pos:column="13">typeMap</name><index pos:line="393" pos:column="20">[<expr><call><name pos:line="393" pos:column="21">typeof</name><argument_list pos:line="393" pos:column="27">(<argument><expr><name pos:line="393" pos:column="28">byte</name><op:operator pos:line="393" pos:column="32">?</op:operator></expr></argument>)</argument_list></call></expr>]</index></name> <op:operator pos:line="393" pos:column="36">=</op:operator> <name><name pos:line="393" pos:column="38">DbType</name><op:operator pos:line="393" pos:column="44">.</op:operator><name pos:line="393" pos:column="45">Byte</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="394" pos:column="13">typeMap</name><index pos:line="394" pos:column="20">[<expr><call><name pos:line="394" pos:column="21">typeof</name><argument_list pos:line="394" pos:column="27">(<argument><expr><name pos:line="394" pos:column="28">sbyte</name><op:operator pos:line="394" pos:column="33">?</op:operator></expr></argument>)</argument_list></call></expr>]</index></name> <op:operator pos:line="394" pos:column="37">=</op:operator> <name><name pos:line="394" pos:column="39">DbType</name><op:operator pos:line="394" pos:column="45">.</op:operator><name pos:line="394" pos:column="46">SByte</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="395" pos:column="13">typeMap</name><index pos:line="395" pos:column="20">[<expr><call><name pos:line="395" pos:column="21">typeof</name><argument_list pos:line="395" pos:column="27">(<argument><expr><name pos:line="395" pos:column="28">short</name><op:operator pos:line="395" pos:column="33">?</op:operator></expr></argument>)</argument_list></call></expr>]</index></name> <op:operator pos:line="395" pos:column="37">=</op:operator> <name><name pos:line="395" pos:column="39">DbType</name><op:operator pos:line="395" pos:column="45">.</op:operator><name pos:line="395" pos:column="46">Int16</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="396" pos:column="13">typeMap</name><index pos:line="396" pos:column="20">[<expr><call><name pos:line="396" pos:column="21">typeof</name><argument_list pos:line="396" pos:column="27">(<argument><expr><name pos:line="396" pos:column="28">ushort</name><op:operator pos:line="396" pos:column="34">?</op:operator></expr></argument>)</argument_list></call></expr>]</index></name> <op:operator pos:line="396" pos:column="38">=</op:operator> <name><name pos:line="396" pos:column="40">DbType</name><op:operator pos:line="396" pos:column="46">.</op:operator><name pos:line="396" pos:column="47">UInt16</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="397" pos:column="13">typeMap</name><index pos:line="397" pos:column="20">[<expr><call><name pos:line="397" pos:column="21">typeof</name><argument_list pos:line="397" pos:column="27">(<argument><expr><name pos:line="397" pos:column="28">int</name><op:operator pos:line="397" pos:column="31">?</op:operator></expr></argument>)</argument_list></call></expr>]</index></name> <op:operator pos:line="397" pos:column="35">=</op:operator> <name><name pos:line="397" pos:column="37">DbType</name><op:operator pos:line="397" pos:column="43">.</op:operator><name pos:line="397" pos:column="44">Int32</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="398" pos:column="13">typeMap</name><index pos:line="398" pos:column="20">[<expr><call><name pos:line="398" pos:column="21">typeof</name><argument_list pos:line="398" pos:column="27">(<argument><expr><name pos:line="398" pos:column="28">uint</name><op:operator pos:line="398" pos:column="32">?</op:operator></expr></argument>)</argument_list></call></expr>]</index></name> <op:operator pos:line="398" pos:column="36">=</op:operator> <name><name pos:line="398" pos:column="38">DbType</name><op:operator pos:line="398" pos:column="44">.</op:operator><name pos:line="398" pos:column="45">UInt32</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="399" pos:column="13">typeMap</name><index pos:line="399" pos:column="20">[<expr><call><name pos:line="399" pos:column="21">typeof</name><argument_list pos:line="399" pos:column="27">(<argument><expr><name pos:line="399" pos:column="28">long</name><op:operator pos:line="399" pos:column="32">?</op:operator></expr></argument>)</argument_list></call></expr>]</index></name> <op:operator pos:line="399" pos:column="36">=</op:operator> <name><name pos:line="399" pos:column="38">DbType</name><op:operator pos:line="399" pos:column="44">.</op:operator><name pos:line="399" pos:column="45">Int64</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="400" pos:column="13">typeMap</name><index pos:line="400" pos:column="20">[<expr><call><name pos:line="400" pos:column="21">typeof</name><argument_list pos:line="400" pos:column="27">(<argument><expr><name pos:line="400" pos:column="28">ulong</name><op:operator pos:line="400" pos:column="33">?</op:operator></expr></argument>)</argument_list></call></expr>]</index></name> <op:operator pos:line="400" pos:column="37">=</op:operator> <name><name pos:line="400" pos:column="39">DbType</name><op:operator pos:line="400" pos:column="45">.</op:operator><name pos:line="400" pos:column="46">UInt64</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="401" pos:column="13">typeMap</name><index pos:line="401" pos:column="20">[<expr><call><name pos:line="401" pos:column="21">typeof</name><argument_list pos:line="401" pos:column="27">(<argument><expr><name pos:line="401" pos:column="28">float</name><op:operator pos:line="401" pos:column="33">?</op:operator></expr></argument>)</argument_list></call></expr>]</index></name> <op:operator pos:line="401" pos:column="37">=</op:operator> <name><name pos:line="401" pos:column="39">DbType</name><op:operator pos:line="401" pos:column="45">.</op:operator><name pos:line="401" pos:column="46">Single</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="402" pos:column="13">typeMap</name><index pos:line="402" pos:column="20">[<expr><call><name pos:line="402" pos:column="21">typeof</name><argument_list pos:line="402" pos:column="27">(<argument><expr><name pos:line="402" pos:column="28">double</name><op:operator pos:line="402" pos:column="34">?</op:operator></expr></argument>)</argument_list></call></expr>]</index></name> <op:operator pos:line="402" pos:column="38">=</op:operator> <name><name pos:line="402" pos:column="40">DbType</name><op:operator pos:line="402" pos:column="46">.</op:operator><name pos:line="402" pos:column="47">Double</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="403" pos:column="13">typeMap</name><index pos:line="403" pos:column="20">[<expr><call><name pos:line="403" pos:column="21">typeof</name><argument_list pos:line="403" pos:column="27">(<argument><expr><name pos:line="403" pos:column="28">decimal</name><op:operator pos:line="403" pos:column="35">?</op:operator></expr></argument>)</argument_list></call></expr>]</index></name> <op:operator pos:line="403" pos:column="39">=</op:operator> <name><name pos:line="403" pos:column="41">DbType</name><op:operator pos:line="403" pos:column="47">.</op:operator><name pos:line="403" pos:column="48">Decimal</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="404" pos:column="13">typeMap</name><index pos:line="404" pos:column="20">[<expr><call><name pos:line="404" pos:column="21">typeof</name><argument_list pos:line="404" pos:column="27">(<argument><expr><name pos:line="404" pos:column="28">bool</name><op:operator pos:line="404" pos:column="32">?</op:operator></expr></argument>)</argument_list></call></expr>]</index></name> <op:operator pos:line="404" pos:column="36">=</op:operator> <name><name pos:line="404" pos:column="38">DbType</name><op:operator pos:line="404" pos:column="44">.</op:operator><name pos:line="404" pos:column="45">Boolean</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="405" pos:column="13">typeMap</name><index pos:line="405" pos:column="20">[<expr><call><name pos:line="405" pos:column="21">typeof</name><argument_list pos:line="405" pos:column="27">(<argument><expr><name pos:line="405" pos:column="28">char</name><op:operator pos:line="405" pos:column="32">?</op:operator></expr></argument>)</argument_list></call></expr>]</index></name> <op:operator pos:line="405" pos:column="36">=</op:operator> <name><name pos:line="405" pos:column="38">DbType</name><op:operator pos:line="405" pos:column="44">.</op:operator><name pos:line="405" pos:column="45">StringFixedLength</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="406" pos:column="13">typeMap</name><index pos:line="406" pos:column="20">[<expr><call><name pos:line="406" pos:column="21">typeof</name><argument_list pos:line="406" pos:column="27">(<argument><expr><name pos:line="406" pos:column="28">Guid</name><op:operator pos:line="406" pos:column="32">?</op:operator></expr></argument>)</argument_list></call></expr>]</index></name> <op:operator pos:line="406" pos:column="36">=</op:operator> <name><name pos:line="406" pos:column="38">DbType</name><op:operator pos:line="406" pos:column="44">.</op:operator><name pos:line="406" pos:column="45">Guid</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="407" pos:column="13">typeMap</name><index pos:line="407" pos:column="20">[<expr><call><name pos:line="407" pos:column="21">typeof</name><argument_list pos:line="407" pos:column="27">(<argument><expr><name pos:line="407" pos:column="28">DateTime</name><op:operator pos:line="407" pos:column="36">?</op:operator></expr></argument>)</argument_list></call></expr>]</index></name> <op:operator pos:line="407" pos:column="40">=</op:operator> <name><name pos:line="407" pos:column="42">DbType</name><op:operator pos:line="407" pos:column="48">.</op:operator><name pos:line="407" pos:column="49">DateTime</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="408" pos:column="13">typeMap</name><index pos:line="408" pos:column="20">[<expr><call><name pos:line="408" pos:column="21">typeof</name><argument_list pos:line="408" pos:column="27">(<argument><expr><name pos:line="408" pos:column="28">DateTimeOffset</name><op:operator pos:line="408" pos:column="42">?</op:operator></expr></argument>)</argument_list></call></expr>]</index></name> <op:operator pos:line="408" pos:column="46">=</op:operator> <name><name pos:line="408" pos:column="48">DbType</name><op:operator pos:line="408" pos:column="54">.</op:operator><name pos:line="408" pos:column="55">DateTimeOffset</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="409" pos:column="13">typeMap</name><index pos:line="409" pos:column="20">[<expr><call><name pos:line="409" pos:column="21">typeof</name><argument_list pos:line="409" pos:column="27">(<argument><expr><name pos:line="409" pos:column="28">TimeSpan</name><op:operator pos:line="409" pos:column="36">?</op:operator></expr></argument>)</argument_list></call></expr>]</index></name> <op:operator pos:line="409" pos:column="40">=</op:operator> <name><name pos:line="409" pos:column="42">DbType</name><op:operator pos:line="409" pos:column="48">.</op:operator><name pos:line="409" pos:column="49">Time</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="410" pos:column="13">typeMap</name><index pos:line="410" pos:column="20">[<expr><call><name pos:line="410" pos:column="21">typeof</name><argument_list pos:line="410" pos:column="27">(<argument><expr><name pos:line="410" pos:column="28">Object</name></expr></argument>)</argument_list></call></expr>]</index></name> <op:operator pos:line="410" pos:column="37">=</op:operator> <name><name pos:line="410" pos:column="39">DbType</name><op:operator pos:line="410" pos:column="45">.</op:operator><name pos:line="410" pos:column="46">Object</name></name></expr>;</expr_stmt>
        }</block></constructor>
        <comment type="line" pos:line="412" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="413" pos:column="9">/// Configire the specified type to be mapped to a given db-type</comment>
        <comment type="line" pos:line="414" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="415" pos:column="9">public</specifier> <specifier pos:line="415" pos:column="16">static</specifier> <name pos:line="415" pos:column="23">void</name></type> <name pos:line="415" pos:column="28">AddTypeMap</name><parameter_list pos:line="415" pos:column="38">(<param><decl><type><name pos:line="415" pos:column="39">Type</name></type> <name pos:line="415" pos:column="44">type</name></decl></param>, <param><decl><type><name pos:line="415" pos:column="50">DbType</name></type> <name pos:line="415" pos:column="57">dbType</name></decl></param>)</parameter_list>
        <block pos:line="416" pos:column="9">{
            <expr_stmt><expr><name><name pos:line="417" pos:column="13">typeMap</name><index pos:line="417" pos:column="20">[<expr><name pos:line="417" pos:column="21">type</name></expr>]</index></name> <op:operator pos:line="417" pos:column="27">=</op:operator> <name pos:line="417" pos:column="29">dbType</name></expr>;</expr_stmt>
        }</block></function>

        <decl_stmt><decl><type><specifier pos:line="420" pos:column="9">internal</specifier> <specifier pos:line="420" pos:column="18">const</specifier> <name pos:line="420" pos:column="24">string</name></type> <name pos:line="420" pos:column="31">LinqBinary</name> <init pos:line="420" pos:column="42">= <expr><lit:literal type="string" pos:line="420" pos:column="44">"System.Data.Linq.Binary"</lit:literal></expr></init></decl>;</decl_stmt>
        <function><type><specifier pos:line="421" pos:column="9">internal</specifier> <specifier pos:line="421" pos:column="18">static</specifier> <name pos:line="421" pos:column="25">DbType</name></type> <name pos:line="421" pos:column="32">LookupDbType</name><parameter_list pos:line="421" pos:column="44">(<param><decl><type><name pos:line="421" pos:column="45">Type</name></type> <name pos:line="421" pos:column="50">type</name></decl></param>, <param><decl><type><name pos:line="421" pos:column="56">string</name></type> <name pos:line="421" pos:column="63">name</name></decl></param>)</parameter_list>
        <block pos:line="422" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="423" pos:column="13">DbType</name></type> <name pos:line="423" pos:column="20">dbType</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="424" pos:column="13">var</name></type> <name pos:line="424" pos:column="17">nullUnderlyingType</name> <init pos:line="424" pos:column="36">= <expr><call><name><name pos:line="424" pos:column="38">Nullable</name><op:operator pos:line="424" pos:column="46">.</op:operator><name pos:line="424" pos:column="47">GetUnderlyingType</name></name><argument_list pos:line="424" pos:column="64">(<argument><expr><name pos:line="424" pos:column="65">type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="425" pos:column="13">if <condition pos:line="425" pos:column="16">(<expr><name pos:line="425" pos:column="17">nullUnderlyingType</name> <op:operator pos:line="425" pos:column="36">!=</op:operator> <name pos:line="425" pos:column="39">null</name></expr>)</condition><then pos:line="425" pos:column="44"> <expr_stmt><expr><name pos:line="425" pos:column="45">type</name> <op:operator pos:line="425" pos:column="50">=</op:operator> <name pos:line="425" pos:column="52">nullUnderlyingType</name></expr>;</expr_stmt></then></if>
            <if pos:line="426" pos:column="13">if <condition pos:line="426" pos:column="16">(<expr><name><name pos:line="426" pos:column="17">type</name><op:operator pos:line="426" pos:column="21">.</op:operator><name pos:line="426" pos:column="22">IsEnum</name> <type:modifier pos:line="426" pos:column="29">&amp;&amp;</type:modifier></name> <op:operator pos:line="426" pos:column="32">!</op:operator><call><name><name pos:line="426" pos:column="33">typeMap</name><op:operator pos:line="426" pos:column="40">.</op:operator><name pos:line="426" pos:column="41">ContainsKey</name></name><argument_list pos:line="426" pos:column="52">(<argument><expr><name pos:line="426" pos:column="53">type</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="426" pos:column="59">
            <block pos:line="427" pos:column="13">{
                <expr_stmt><expr><name pos:line="428" pos:column="17">type</name> <op:operator pos:line="428" pos:column="22">=</op:operator> <call><name><name pos:line="428" pos:column="24">Enum</name><op:operator pos:line="428" pos:column="28">.</op:operator><name pos:line="428" pos:column="29">GetUnderlyingType</name></name><argument_list pos:line="428" pos:column="46">(<argument><expr><name pos:line="428" pos:column="47">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if pos:line="430" pos:column="13">if <condition pos:line="430" pos:column="16">(<expr><call><name><name pos:line="430" pos:column="17">typeMap</name><op:operator pos:line="430" pos:column="24">.</op:operator><name pos:line="430" pos:column="25">TryGetValue</name></name><argument_list pos:line="430" pos:column="36">(<argument><expr><name pos:line="430" pos:column="37">type</name></expr></argument>, <argument><expr pos:line="430" pos:column="43">out <name pos:line="430" pos:column="47">dbType</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="430" pos:column="55">
            <block pos:line="431" pos:column="13">{
                <return pos:line="432" pos:column="17">return <expr><name pos:line="432" pos:column="24">dbType</name></expr>;</return>
            }</block></then></if>
            <if pos:line="434" pos:column="13">if <condition pos:line="434" pos:column="16">(<expr><name><name pos:line="434" pos:column="17">type</name><op:operator pos:line="434" pos:column="21">.</op:operator><name pos:line="434" pos:column="22">FullName</name></name> <op:operator pos:line="434" pos:column="31">==</op:operator> <name pos:line="434" pos:column="34">LinqBinary</name></expr>)</condition><then pos:line="434" pos:column="45">
            <block pos:line="435" pos:column="13">{
                <return pos:line="436" pos:column="17">return <expr><name><name pos:line="436" pos:column="24">DbType</name><op:operator pos:line="436" pos:column="30">.</op:operator><name pos:line="436" pos:column="31">Binary</name></name></expr>;</return>
            }</block></then></if>
            <if pos:line="438" pos:column="13">if <condition pos:line="438" pos:column="16">(<expr><call><name pos:line="438" pos:column="17">typeof</name><argument_list pos:line="438" pos:column="23">(<argument><expr><name pos:line="438" pos:column="24">IEnumerable</name></expr></argument>)</argument_list></call><op:operator pos:line="438" pos:column="36">.</op:operator><call><name pos:line="438" pos:column="37">IsAssignableFrom</name><argument_list pos:line="438" pos:column="53">(<argument><expr><name pos:line="438" pos:column="54">type</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="438" pos:column="60">
            <block pos:line="439" pos:column="13">{
                <return pos:line="440" pos:column="17">return <expr><name><name pos:line="440" pos:column="24">DynamicParameters</name><op:operator pos:line="440" pos:column="41">.</op:operator><name pos:line="440" pos:column="42">EnumerableMultiParameter</name></name></expr>;</return>
            }</block></then></if>


            <throw pos:line="444" pos:column="13">throw <expr><op:operator pos:line="444" pos:column="19">new</op:operator> <call><name pos:line="444" pos:column="23">NotSupportedException</name><argument_list pos:line="444" pos:column="44">(<argument><expr><call><name><name pos:line="444" pos:column="45">string</name><op:operator pos:line="444" pos:column="51">.</op:operator><name pos:line="444" pos:column="52">Format</name></name><argument_list pos:line="444" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="444" pos:column="59">"The member {0} of type {1} cannot be used as a parameter value"</lit:literal></expr></argument>, <argument><expr><name pos:line="444" pos:column="125">name</name></expr></argument>, <argument><expr><name pos:line="444" pos:column="131">type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></function>


        <comment type="line" pos:line="448" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="449" pos:column="9">/// Identity of a cached query in Dapper, used for extensability</comment>
        <comment type="line" pos:line="450" pos:column="9">/// &lt;/summary&gt;</comment>
        <class><specifier pos:line="451" pos:column="9">public</specifier> <specifier pos:line="451" pos:column="16">partial</specifier> class <name pos:line="451" pos:column="30">Identity</name> <super pos:line="451" pos:column="39">: <name><name pos:line="451" pos:column="41">IEquatable</name><argument_list pos:line="451" pos:column="51">&lt;<argument><name pos:line="451" pos:column="52">Identity</name></argument>&gt;</argument_list></name></super>
        <block pos:line="452" pos:column="9">{
            <function><type><specifier pos:line="453" pos:column="13">internal</specifier> <name pos:line="453" pos:column="22">Identity</name></type> <name pos:line="453" pos:column="31">ForGrid</name><parameter_list pos:line="453" pos:column="38">(<param><decl><type><name pos:line="453" pos:column="39">Type</name></type> <name pos:line="453" pos:column="44">primaryType</name></decl></param>, <param><decl><type><name pos:line="453" pos:column="57">int</name></type> <name pos:line="453" pos:column="61">gridIndex</name></decl></param>)</parameter_list>
            <block pos:line="454" pos:column="13">{
                <return pos:line="455" pos:column="17">return <expr><op:operator pos:line="455" pos:column="24">new</op:operator> <call><name pos:line="455" pos:column="28">Identity</name><argument_list pos:line="455" pos:column="36">(<argument><expr><name pos:line="455" pos:column="37">sql</name></expr></argument>, <argument><expr><name pos:line="455" pos:column="42">commandType</name></expr></argument>, <argument><expr><name pos:line="455" pos:column="55">connectionString</name></expr></argument>, <argument><expr><name pos:line="455" pos:column="73">primaryType</name></expr></argument>, <argument><expr><name pos:line="455" pos:column="86">parametersType</name></expr></argument>, <argument><expr><name pos:line="455" pos:column="102">null</name></expr></argument>, <argument><expr><name pos:line="455" pos:column="108">gridIndex</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>

            <function><type><specifier pos:line="458" pos:column="13">internal</specifier> <name pos:line="458" pos:column="22">Identity</name></type> <name pos:line="458" pos:column="31">ForGrid</name><parameter_list pos:line="458" pos:column="38">(<param><decl><type><name pos:line="458" pos:column="39">Type</name></type> <name pos:line="458" pos:column="44">primaryType</name></decl></param>, <param><decl><type><name><name pos:line="458" pos:column="57">Type</name><index pos:line="458" pos:column="61">[]</index></name></type> <name pos:line="458" pos:column="64">otherTypes</name></decl></param>, <param><decl><type><name pos:line="458" pos:column="76">int</name></type> <name pos:line="458" pos:column="80">gridIndex</name></decl></param>)</parameter_list>
            <block pos:line="459" pos:column="13">{
                <return pos:line="460" pos:column="17">return <expr><op:operator pos:line="460" pos:column="24">new</op:operator> <call><name pos:line="460" pos:column="28">Identity</name><argument_list pos:line="460" pos:column="36">(<argument><expr><name pos:line="460" pos:column="37">sql</name></expr></argument>, <argument><expr><name pos:line="460" pos:column="42">commandType</name></expr></argument>, <argument><expr><name pos:line="460" pos:column="55">connectionString</name></expr></argument>, <argument><expr><name pos:line="460" pos:column="73">primaryType</name></expr></argument>, <argument><expr><name pos:line="460" pos:column="86">parametersType</name></expr></argument>, <argument><expr><name pos:line="460" pos:column="102">otherTypes</name></expr></argument>, <argument><expr><name pos:line="460" pos:column="114">gridIndex</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
            <comment type="line" pos:line="462" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="463" pos:column="13">/// Create an identity for use with DynamicParameters, internal use only</comment>
            <comment type="line" pos:line="464" pos:column="13">/// &lt;/summary&gt;</comment>
            <comment type="line" pos:line="465" pos:column="13">/// &lt;param name="type"&gt;&lt;/param&gt;</comment>
            <comment type="line" pos:line="466" pos:column="13">/// &lt;returns&gt;&lt;/returns&gt;</comment>
            <function><type><specifier pos:line="467" pos:column="13">public</specifier> <name pos:line="467" pos:column="20">Identity</name></type> <name pos:line="467" pos:column="29">ForDynamicParameters</name><parameter_list pos:line="467" pos:column="49">(<param><decl><type><name pos:line="467" pos:column="50">Type</name></type> <name pos:line="467" pos:column="55">type</name></decl></param>)</parameter_list>
            <block pos:line="468" pos:column="13">{
                <return pos:line="469" pos:column="17">return <expr><op:operator pos:line="469" pos:column="24">new</op:operator> <call><name pos:line="469" pos:column="28">Identity</name><argument_list pos:line="469" pos:column="36">(<argument><expr><name pos:line="469" pos:column="37">sql</name></expr></argument>, <argument><expr><name pos:line="469" pos:column="42">commandType</name></expr></argument>, <argument><expr><name pos:line="469" pos:column="55">connectionString</name></expr></argument>, <argument><expr><name><name pos:line="469" pos:column="73">this</name><op:operator pos:line="469" pos:column="77">.</op:operator><name pos:line="469" pos:column="78">type</name></name></expr></argument>, <argument><expr><name pos:line="469" pos:column="84">type</name></expr></argument>, <argument><expr><name pos:line="469" pos:column="90">null</name></expr></argument>, <argument><expr><op:operator pos:line="469" pos:column="96">-</op:operator><lit:literal type="number" pos:line="469" pos:column="97">1</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>

            <constructor><specifier pos:line="472" pos:column="13">internal</specifier> <name pos:line="472" pos:column="22">Identity</name><parameter_list pos:line="472" pos:column="30">(<param><decl><type><name pos:line="472" pos:column="31">string</name></type> <name pos:line="472" pos:column="38">sql</name></decl></param>, <param><decl><type><name pos:line="472" pos:column="43">CommandType</name><type:modifier pos:line="472" pos:column="54">?</type:modifier></type> <name pos:line="472" pos:column="56">commandType</name></decl></param>, <param><decl><type><name pos:line="472" pos:column="69">IDbConnection</name></type> <name pos:line="472" pos:column="83">connection</name></decl></param>, <param><decl><type><name pos:line="472" pos:column="95">Type</name></type> <name pos:line="472" pos:column="100">type</name></decl></param>, <param><decl><type><name pos:line="472" pos:column="106">Type</name></type> <name pos:line="472" pos:column="111">parametersType</name></decl></param>, <param><decl><type><name><name pos:line="472" pos:column="127">Type</name><index pos:line="472" pos:column="131">[]</index></name></type> <name pos:line="472" pos:column="134">otherTypes</name></decl></param>)</parameter_list>
                <member_list pos:line="473" pos:column="17">: <call><name pos:line="473" pos:column="19">this</name><argument_list pos:line="473" pos:column="23">(<argument><expr><name pos:line="473" pos:column="24">sql</name></expr></argument>, <argument><expr><name pos:line="473" pos:column="29">commandType</name></expr></argument>, <argument><expr><name><name pos:line="473" pos:column="42">connection</name><op:operator pos:line="473" pos:column="52">.</op:operator><name pos:line="473" pos:column="53">ConnectionString</name></name></expr></argument>, <argument><expr><name pos:line="473" pos:column="71">type</name></expr></argument>, <argument><expr><name pos:line="473" pos:column="77">parametersType</name></expr></argument>, <argument><expr><name pos:line="473" pos:column="93">otherTypes</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="473" pos:column="105">0</lit:literal></expr></argument>)</argument_list></call>
            </member_list><block pos:line="474" pos:column="13">{ }</block></constructor>
            <constructor><specifier pos:line="475" pos:column="13">private</specifier> <name pos:line="475" pos:column="21">Identity</name><parameter_list pos:line="475" pos:column="29">(<param><decl><type><name pos:line="475" pos:column="30">string</name></type> <name pos:line="475" pos:column="37">sql</name></decl></param>, <param><decl><type><name pos:line="475" pos:column="42">CommandType</name><type:modifier pos:line="475" pos:column="53">?</type:modifier></type> <name pos:line="475" pos:column="55">commandType</name></decl></param>, <param><decl><type><name pos:line="475" pos:column="68">string</name></type> <name pos:line="475" pos:column="75">connectionString</name></decl></param>, <param><decl><type><name pos:line="475" pos:column="93">Type</name></type> <name pos:line="475" pos:column="98">type</name></decl></param>, <param><decl><type><name pos:line="475" pos:column="104">Type</name></type> <name pos:line="475" pos:column="109">parametersType</name></decl></param>, <param><decl><type><name><name pos:line="475" pos:column="125">Type</name><index pos:line="475" pos:column="129">[]</index></name></type> <name pos:line="475" pos:column="132">otherTypes</name></decl></param>, <param><decl><type><name pos:line="475" pos:column="144">int</name></type> <name pos:line="475" pos:column="148">gridIndex</name></decl></param>)</parameter_list>
            <block pos:line="476" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="477" pos:column="17">this</name><op:operator pos:line="477" pos:column="21">.</op:operator><name pos:line="477" pos:column="22">sql</name></name> <op:operator pos:line="477" pos:column="26">=</op:operator> <name pos:line="477" pos:column="28">sql</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="478" pos:column="17">this</name><op:operator pos:line="478" pos:column="21">.</op:operator><name pos:line="478" pos:column="22">commandType</name></name> <op:operator pos:line="478" pos:column="34">=</op:operator> <name pos:line="478" pos:column="36">commandType</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="479" pos:column="17">this</name><op:operator pos:line="479" pos:column="21">.</op:operator><name pos:line="479" pos:column="22">connectionString</name></name> <op:operator pos:line="479" pos:column="39">=</op:operator> <name pos:line="479" pos:column="41">connectionString</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="480" pos:column="17">this</name><op:operator pos:line="480" pos:column="21">.</op:operator><name pos:line="480" pos:column="22">type</name></name> <op:operator pos:line="480" pos:column="27">=</op:operator> <name pos:line="480" pos:column="29">type</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="481" pos:column="17">this</name><op:operator pos:line="481" pos:column="21">.</op:operator><name pos:line="481" pos:column="22">parametersType</name></name> <op:operator pos:line="481" pos:column="37">=</op:operator> <name pos:line="481" pos:column="39">parametersType</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="482" pos:column="17">this</name><op:operator pos:line="482" pos:column="21">.</op:operator><name pos:line="482" pos:column="22">gridIndex</name></name> <op:operator pos:line="482" pos:column="32">=</op:operator> <name pos:line="482" pos:column="34">gridIndex</name></expr>;</expr_stmt>
                <unchecked pos:line="483" pos:column="17">unchecked
                <block pos:line="484" pos:column="17">{
                    <expr_stmt><expr><name pos:line="485" pos:column="21">hashCode</name> <op:operator pos:line="485" pos:column="30">=</op:operator> <lit:literal type="number" pos:line="485" pos:column="32">17</lit:literal></expr>;</expr_stmt> <comment type="line" pos:line="485" pos:column="36">// we *know* we are using this in a dictionary, so pre-compute this</comment>
                    <expr_stmt><expr><name pos:line="486" pos:column="21">hashCode</name> <op:operator pos:line="486" pos:column="30">=</op:operator> <name pos:line="486" pos:column="32">hashCode</name> <op:operator pos:line="486" pos:column="41">*</op:operator> <lit:literal type="number" pos:line="486" pos:column="43">23</lit:literal> <op:operator pos:line="486" pos:column="46">+</op:operator> <call><name><name pos:line="486" pos:column="48">commandType</name><op:operator pos:line="486" pos:column="59">.</op:operator><name pos:line="486" pos:column="60">GetHashCode</name></name><argument_list pos:line="486" pos:column="71">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="487" pos:column="21">hashCode</name> <op:operator pos:line="487" pos:column="30">=</op:operator> <name pos:line="487" pos:column="32">hashCode</name> <op:operator pos:line="487" pos:column="41">*</op:operator> <lit:literal type="number" pos:line="487" pos:column="43">23</lit:literal> <op:operator pos:line="487" pos:column="46">+</op:operator> <call><name><name pos:line="487" pos:column="48">gridIndex</name><op:operator pos:line="487" pos:column="57">.</op:operator><name pos:line="487" pos:column="58">GetHashCode</name></name><argument_list pos:line="487" pos:column="69">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="488" pos:column="21">hashCode</name> <op:operator pos:line="488" pos:column="30">=</op:operator> <name pos:line="488" pos:column="32">hashCode</name> <op:operator pos:line="488" pos:column="41">*</op:operator> <lit:literal type="number" pos:line="488" pos:column="43">23</lit:literal> <op:operator pos:line="488" pos:column="46">+</op:operator> <op:operator pos:line="488" pos:column="48">(</op:operator><name pos:line="488" pos:column="49">sql</name> <op:operator pos:line="488" pos:column="53">==</op:operator> <name pos:line="488" pos:column="56">null</name> <op:operator pos:line="488" pos:column="61">?</op:operator> <lit:literal type="number" pos:line="488" pos:column="63">0</lit:literal> <op:operator pos:line="488" pos:column="65">:</op:operator> <call><name><name pos:line="488" pos:column="67">sql</name><op:operator pos:line="488" pos:column="70">.</op:operator><name pos:line="488" pos:column="71">GetHashCode</name></name><argument_list pos:line="488" pos:column="82">()</argument_list></call><op:operator pos:line="488" pos:column="84">)</op:operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="489" pos:column="21">hashCode</name> <op:operator pos:line="489" pos:column="30">=</op:operator> <name pos:line="489" pos:column="32">hashCode</name> <op:operator pos:line="489" pos:column="41">*</op:operator> <lit:literal type="number" pos:line="489" pos:column="43">23</lit:literal> <op:operator pos:line="489" pos:column="46">+</op:operator> <op:operator pos:line="489" pos:column="48">(</op:operator><name pos:line="489" pos:column="49">type</name> <op:operator pos:line="489" pos:column="54">==</op:operator> <name pos:line="489" pos:column="57">null</name> <op:operator pos:line="489" pos:column="62">?</op:operator> <lit:literal type="number" pos:line="489" pos:column="64">0</lit:literal> <op:operator pos:line="489" pos:column="66">:</op:operator> <call><name><name pos:line="489" pos:column="68">type</name><op:operator pos:line="489" pos:column="72">.</op:operator><name pos:line="489" pos:column="73">GetHashCode</name></name><argument_list pos:line="489" pos:column="84">()</argument_list></call><op:operator pos:line="489" pos:column="86">)</op:operator></expr>;</expr_stmt>
                    <if pos:line="490" pos:column="21">if <condition pos:line="490" pos:column="24">(<expr><name pos:line="490" pos:column="25">otherTypes</name> <op:operator pos:line="490" pos:column="36">!=</op:operator> <name pos:line="490" pos:column="39">null</name></expr>)</condition><then pos:line="490" pos:column="44">
                    <block pos:line="491" pos:column="21">{
                        <foreach pos:line="492" pos:column="25">foreach (<init><decl><type><name pos:line="492" pos:column="34">var</name></type> <name pos:line="492" pos:column="38">t</name> <range pos:line="492" pos:column="40">in <expr><name pos:line="492" pos:column="43">otherTypes</name></expr></range></decl></init>)
                        <block pos:line="493" pos:column="25">{
                            <expr_stmt><expr><name pos:line="494" pos:column="29">hashCode</name> <op:operator pos:line="494" pos:column="38">=</op:operator> <name pos:line="494" pos:column="40">hashCode</name> <op:operator pos:line="494" pos:column="49">*</op:operator> <lit:literal type="number" pos:line="494" pos:column="51">23</lit:literal> <op:operator pos:line="494" pos:column="54">+</op:operator> <op:operator pos:line="494" pos:column="56">(</op:operator><name pos:line="494" pos:column="57">t</name> <op:operator pos:line="494" pos:column="59">==</op:operator> <name pos:line="494" pos:column="62">null</name> <op:operator pos:line="494" pos:column="67">?</op:operator> <lit:literal type="number" pos:line="494" pos:column="69">0</lit:literal> <op:operator pos:line="494" pos:column="71">:</op:operator> <call><name><name pos:line="494" pos:column="73">t</name><op:operator pos:line="494" pos:column="74">.</op:operator><name pos:line="494" pos:column="75">GetHashCode</name></name><argument_list pos:line="494" pos:column="86">()</argument_list></call><op:operator pos:line="494" pos:column="88">)</op:operator></expr>;</expr_stmt>
                        }</block></foreach>
                    }</block></then></if>
                    <expr_stmt><expr><name pos:line="497" pos:column="21">hashCode</name> <op:operator pos:line="497" pos:column="30">=</op:operator> <name pos:line="497" pos:column="32">hashCode</name> <op:operator pos:line="497" pos:column="41">*</op:operator> <lit:literal type="number" pos:line="497" pos:column="43">23</lit:literal> <op:operator pos:line="497" pos:column="46">+</op:operator> <op:operator pos:line="497" pos:column="48">(</op:operator><name pos:line="497" pos:column="49">connectionString</name> <op:operator pos:line="497" pos:column="66">==</op:operator> <name pos:line="497" pos:column="69">null</name> <op:operator pos:line="497" pos:column="74">?</op:operator> <lit:literal type="number" pos:line="497" pos:column="76">0</lit:literal> <op:operator pos:line="497" pos:column="78">:</op:operator> <call><name><name pos:line="497" pos:column="80">connectionString</name><op:operator pos:line="497" pos:column="96">.</op:operator><name pos:line="497" pos:column="97">GetHashCode</name></name><argument_list pos:line="497" pos:column="108">()</argument_list></call><op:operator pos:line="497" pos:column="110">)</op:operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="498" pos:column="21">hashCode</name> <op:operator pos:line="498" pos:column="30">=</op:operator> <name pos:line="498" pos:column="32">hashCode</name> <op:operator pos:line="498" pos:column="41">*</op:operator> <lit:literal type="number" pos:line="498" pos:column="43">23</lit:literal> <op:operator pos:line="498" pos:column="46">+</op:operator> <op:operator pos:line="498" pos:column="48">(</op:operator><name pos:line="498" pos:column="49">parametersType</name> <op:operator pos:line="498" pos:column="64">==</op:operator> <name pos:line="498" pos:column="67">null</name> <op:operator pos:line="498" pos:column="72">?</op:operator> <lit:literal type="number" pos:line="498" pos:column="74">0</lit:literal> <op:operator pos:line="498" pos:column="76">:</op:operator> <call><name><name pos:line="498" pos:column="78">parametersType</name><op:operator pos:line="498" pos:column="92">.</op:operator><name pos:line="498" pos:column="93">GetHashCode</name></name><argument_list pos:line="498" pos:column="104">()</argument_list></call><op:operator pos:line="498" pos:column="106">)</op:operator></expr>;</expr_stmt>
                }</block></unchecked>
            }</block></constructor>

            <comment type="line" pos:line="502" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="503" pos:column="13">/// </comment>
            <comment type="line" pos:line="504" pos:column="13">/// &lt;/summary&gt;</comment>
            <comment type="line" pos:line="505" pos:column="13">/// &lt;param name="obj"&gt;&lt;/param&gt;</comment>
            <comment type="line" pos:line="506" pos:column="13">/// &lt;returns&gt;&lt;/returns&gt;</comment>
            <function><type><specifier pos:line="507" pos:column="13">public</specifier> <specifier pos:line="507" pos:column="20">override</specifier> <name pos:line="507" pos:column="29">bool</name></type> <name pos:line="507" pos:column="34">Equals</name><parameter_list pos:line="507" pos:column="40">(<param><decl><type><name pos:line="507" pos:column="41">object</name></type> <name pos:line="507" pos:column="48">obj</name></decl></param>)</parameter_list>
            <block pos:line="508" pos:column="13">{
                <return pos:line="509" pos:column="17">return <expr><call><name pos:line="509" pos:column="24">Equals</name><argument_list pos:line="509" pos:column="30">(<argument><expr><name pos:line="509" pos:column="31">obj</name> <op:operator pos:line="509" pos:column="35">as</op:operator> <name pos:line="509" pos:column="38">Identity</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
            <comment type="line" pos:line="511" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="512" pos:column="13">/// The sql</comment>
            <comment type="line" pos:line="513" pos:column="13">/// &lt;/summary&gt;</comment>
            <decl_stmt><decl><type><specifier pos:line="514" pos:column="13">public</specifier> <specifier pos:line="514" pos:column="20">readonly</specifier> <name pos:line="514" pos:column="29">string</name></type> <name pos:line="514" pos:column="36">sql</name></decl>;</decl_stmt>
            <comment type="line" pos:line="515" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="516" pos:column="13">/// The command type </comment>
            <comment type="line" pos:line="517" pos:column="13">/// &lt;/summary&gt;</comment>
            <decl_stmt><decl><type><specifier pos:line="518" pos:column="13">public</specifier> <specifier pos:line="518" pos:column="20">readonly</specifier> <name pos:line="518" pos:column="29">CommandType</name><type:modifier pos:line="518" pos:column="40">?</type:modifier></type> <name pos:line="518" pos:column="42">commandType</name></decl>;</decl_stmt>

            <comment type="line" pos:line="520" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="521" pos:column="13">/// </comment>
            <comment type="line" pos:line="522" pos:column="13">/// &lt;/summary&gt;</comment>
            <decl_stmt><decl><type><specifier pos:line="523" pos:column="13">public</specifier> <specifier pos:line="523" pos:column="20">readonly</specifier> <name pos:line="523" pos:column="29">int</name></type> <name pos:line="523" pos:column="33">hashCode</name></decl><op:operator pos:line="523" pos:column="41">,</op:operator> <decl><type ref="prev"/><name pos:line="523" pos:column="43">gridIndex</name></decl>;</decl_stmt>
            <comment type="line" pos:line="524" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="525" pos:column="13">/// </comment>
            <comment type="line" pos:line="526" pos:column="13">/// &lt;/summary&gt;</comment>
            <decl_stmt><decl><type><specifier pos:line="527" pos:column="13">public</specifier> <specifier pos:line="527" pos:column="20">readonly</specifier> <name pos:line="527" pos:column="29">Type</name></type> <name pos:line="527" pos:column="34">type</name></decl>;</decl_stmt>
            <comment type="line" pos:line="528" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="529" pos:column="13">/// </comment>
            <comment type="line" pos:line="530" pos:column="13">/// &lt;/summary&gt;</comment>
            <decl_stmt><decl><type><specifier pos:line="531" pos:column="13">public</specifier> <specifier pos:line="531" pos:column="20">readonly</specifier> <name pos:line="531" pos:column="29">string</name></type> <name pos:line="531" pos:column="36">connectionString</name></decl>;</decl_stmt>
            <comment type="line" pos:line="532" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="533" pos:column="13">/// </comment>
            <comment type="line" pos:line="534" pos:column="13">/// &lt;/summary&gt;</comment>
            <decl_stmt><decl><type><specifier pos:line="535" pos:column="13">public</specifier> <specifier pos:line="535" pos:column="20">readonly</specifier> <name pos:line="535" pos:column="29">Type</name></type> <name pos:line="535" pos:column="34">parametersType</name></decl>;</decl_stmt>
            <comment type="line" pos:line="536" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="537" pos:column="13">/// </comment>
            <comment type="line" pos:line="538" pos:column="13">/// &lt;/summary&gt;</comment>
            <comment type="line" pos:line="539" pos:column="13">/// &lt;returns&gt;&lt;/returns&gt;</comment>
            <function><type><specifier pos:line="540" pos:column="13">public</specifier> <specifier pos:line="540" pos:column="20">override</specifier> <name pos:line="540" pos:column="29">int</name></type> <name pos:line="540" pos:column="33">GetHashCode</name><parameter_list pos:line="540" pos:column="44">()</parameter_list>
            <block pos:line="541" pos:column="13">{
                <return pos:line="542" pos:column="17">return <expr><name pos:line="542" pos:column="24">hashCode</name></expr>;</return>
            }</block></function>
            <comment type="line" pos:line="544" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="545" pos:column="13">/// Compare 2 Identity objects</comment>
            <comment type="line" pos:line="546" pos:column="13">/// &lt;/summary&gt;</comment>
            <comment type="line" pos:line="547" pos:column="13">/// &lt;param name="other"&gt;&lt;/param&gt;</comment>
            <comment type="line" pos:line="548" pos:column="13">/// &lt;returns&gt;&lt;/returns&gt;</comment>
            <function><type><specifier pos:line="549" pos:column="13">public</specifier> <name pos:line="549" pos:column="20">bool</name></type> <name pos:line="549" pos:column="25">Equals</name><parameter_list pos:line="549" pos:column="31">(<param><decl><type><name pos:line="549" pos:column="32">Identity</name></type> <name pos:line="549" pos:column="41">other</name></decl></param>)</parameter_list>
            <block pos:line="550" pos:column="13">{
                <return pos:line="551" pos:column="17">return
                    <expr><name pos:line="552" pos:column="21">other</name> <op:operator pos:line="552" pos:column="27">!=</op:operator> <name pos:line="552" pos:column="30">null</name> <op:operator pos:line="552" pos:column="35">&amp;&amp;</op:operator>
                    <name pos:line="553" pos:column="21">gridIndex</name> <op:operator pos:line="553" pos:column="31">==</op:operator> <name><name pos:line="553" pos:column="34">other</name><op:operator pos:line="553" pos:column="39">.</op:operator><name pos:line="553" pos:column="40">gridIndex</name> <type:modifier pos:line="553" pos:column="50">&amp;&amp;</type:modifier></name>
                    <name pos:line="554" pos:column="21">type</name> <op:operator pos:line="554" pos:column="26">==</op:operator> <name><name pos:line="554" pos:column="29">other</name><op:operator pos:line="554" pos:column="34">.</op:operator><name pos:line="554" pos:column="35">type</name> <type:modifier pos:line="554" pos:column="40">&amp;&amp;</type:modifier></name>
                    <name pos:line="555" pos:column="21">sql</name> <op:operator pos:line="555" pos:column="25">==</op:operator> <name><name pos:line="555" pos:column="28">other</name><op:operator pos:line="555" pos:column="33">.</op:operator><name pos:line="555" pos:column="34">sql</name> <type:modifier pos:line="555" pos:column="38">&amp;&amp;</type:modifier></name>
                    <name pos:line="556" pos:column="21">commandType</name> <op:operator pos:line="556" pos:column="33">==</op:operator> <name><name pos:line="556" pos:column="36">other</name><op:operator pos:line="556" pos:column="41">.</op:operator><name pos:line="556" pos:column="42">commandType</name> <type:modifier pos:line="556" pos:column="54">&amp;&amp;</type:modifier></name>
                    <name pos:line="557" pos:column="21">connectionString</name> <op:operator pos:line="557" pos:column="38">==</op:operator> <name><name pos:line="557" pos:column="41">other</name><op:operator pos:line="557" pos:column="46">.</op:operator><name pos:line="557" pos:column="47">connectionString</name> <type:modifier pos:line="557" pos:column="64">&amp;&amp;</type:modifier></name>
                    <name pos:line="558" pos:column="21">parametersType</name> <op:operator pos:line="558" pos:column="36">==</op:operator> <name><name pos:line="558" pos:column="39">other</name><op:operator pos:line="558" pos:column="44">.</op:operator><name pos:line="558" pos:column="45">parametersType</name></name></expr>;</return>
            }</block></function>
        }</block></class>

<cpp:if pos:line="562" pos:column="1">#<cpp:directive pos:line="562" pos:column="2">if</cpp:directive> <expr><name pos:line="562" pos:column="5">CSHARP30</name></expr></cpp:if>
        <comment type="line" pos:line="563" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="564" pos:column="9">/// Execute parameterized SQL  </comment>
        <comment type="line" pos:line="565" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="566" pos:column="9">/// &lt;returns&gt;Number of rows affected&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="567" pos:column="9">public</specifier> <specifier pos:line="567" pos:column="16">static</specifier> <name pos:line="567" pos:column="23">int</name></type> <name pos:line="567" pos:column="27">Execute</name><parameter_list pos:line="567" pos:column="34">(<param><decl><type><name pos:line="567" pos:column="35">this</name> <name pos:line="567" pos:column="40">IDbConnection</name></type> <name pos:line="567" pos:column="54">cnn</name></decl></param>, <param><decl><type><name pos:line="567" pos:column="59">string</name></type> <name pos:line="567" pos:column="66">sql</name></decl></param>, <param><decl><type><name pos:line="567" pos:column="71">object</name></type> <name pos:line="567" pos:column="78">param</name></decl></param>)</parameter_list>
        <block pos:line="568" pos:column="9">{
            <return pos:line="569" pos:column="13">return <expr><call><name pos:line="569" pos:column="20">Execute</name><argument_list pos:line="569" pos:column="27">(<argument><expr><name pos:line="569" pos:column="28">cnn</name></expr></argument>, <argument><expr><name pos:line="569" pos:column="33">sql</name></expr></argument>, <argument><expr><name pos:line="569" pos:column="38">param</name></expr></argument>, <argument><expr><name pos:line="569" pos:column="45">null</name></expr></argument>, <argument><expr><name pos:line="569" pos:column="51">null</name></expr></argument>, <argument><expr><name pos:line="569" pos:column="57">null</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="572" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="573" pos:column="9">/// Execute parameterized SQL</comment>
        <comment type="line" pos:line="574" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="575" pos:column="9">/// &lt;returns&gt;Number of rows affected&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="576" pos:column="9">public</specifier> <specifier pos:line="576" pos:column="16">static</specifier> <name pos:line="576" pos:column="23">int</name></type> <name pos:line="576" pos:column="27">Execute</name><parameter_list pos:line="576" pos:column="34">(<param><decl><type><name pos:line="576" pos:column="35">this</name> <name pos:line="576" pos:column="40">IDbConnection</name></type> <name pos:line="576" pos:column="54">cnn</name></decl></param>, <param><decl><type><name pos:line="576" pos:column="59">string</name></type> <name pos:line="576" pos:column="66">sql</name></decl></param>, <param><decl><type><name pos:line="576" pos:column="71">object</name></type> <name pos:line="576" pos:column="78">param</name></decl></param>, <param><decl><type><name pos:line="576" pos:column="85">IDbTransaction</name></type> <name pos:line="576" pos:column="100">transaction</name></decl></param>)</parameter_list>
        <block pos:line="577" pos:column="9">{
            <return pos:line="578" pos:column="13">return <expr><call><name pos:line="578" pos:column="20">Execute</name><argument_list pos:line="578" pos:column="27">(<argument><expr><name pos:line="578" pos:column="28">cnn</name></expr></argument>, <argument><expr><name pos:line="578" pos:column="33">sql</name></expr></argument>, <argument><expr><name pos:line="578" pos:column="38">param</name></expr></argument>, <argument><expr><name pos:line="578" pos:column="45">transaction</name></expr></argument>, <argument><expr><name pos:line="578" pos:column="58">null</name></expr></argument>, <argument><expr><name pos:line="578" pos:column="64">null</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="581" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="582" pos:column="9">/// Execute parameterized SQL</comment>
        <comment type="line" pos:line="583" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="584" pos:column="9">/// &lt;returns&gt;Number of rows affected&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="585" pos:column="9">public</specifier> <specifier pos:line="585" pos:column="16">static</specifier> <name pos:line="585" pos:column="23">int</name></type> <name pos:line="585" pos:column="27">Execute</name><parameter_list pos:line="585" pos:column="34">(<param><decl><type><name pos:line="585" pos:column="35">this</name> <name pos:line="585" pos:column="40">IDbConnection</name></type> <name pos:line="585" pos:column="54">cnn</name></decl></param>, <param><decl><type><name pos:line="585" pos:column="59">string</name></type> <name pos:line="585" pos:column="66">sql</name></decl></param>, <param><decl><type><name pos:line="585" pos:column="71">object</name></type> <name pos:line="585" pos:column="78">param</name></decl></param>, <param><decl><type><name pos:line="585" pos:column="85">CommandType</name></type> <name pos:line="585" pos:column="97">commandType</name></decl></param>)</parameter_list>
        <block pos:line="586" pos:column="9">{
            <return pos:line="587" pos:column="13">return <expr><call><name pos:line="587" pos:column="20">Execute</name><argument_list pos:line="587" pos:column="27">(<argument><expr><name pos:line="587" pos:column="28">cnn</name></expr></argument>, <argument><expr><name pos:line="587" pos:column="33">sql</name></expr></argument>, <argument><expr><name pos:line="587" pos:column="38">param</name></expr></argument>, <argument><expr><name pos:line="587" pos:column="45">null</name></expr></argument>, <argument><expr><name pos:line="587" pos:column="51">null</name></expr></argument>, <argument><expr><name pos:line="587" pos:column="57">commandType</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="590" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="591" pos:column="9">/// Execute parameterized SQL</comment>
        <comment type="line" pos:line="592" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="593" pos:column="9">/// &lt;returns&gt;Number of rows affected&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="594" pos:column="9">public</specifier> <specifier pos:line="594" pos:column="16">static</specifier> <name pos:line="594" pos:column="23">int</name></type> <name pos:line="594" pos:column="27">Execute</name><parameter_list pos:line="594" pos:column="34">(<param><decl><type><name pos:line="594" pos:column="35">this</name> <name pos:line="594" pos:column="40">IDbConnection</name></type> <name pos:line="594" pos:column="54">cnn</name></decl></param>, <param><decl><type><name pos:line="594" pos:column="59">string</name></type> <name pos:line="594" pos:column="66">sql</name></decl></param>, <param><decl><type><name pos:line="594" pos:column="71">object</name></type> <name pos:line="594" pos:column="78">param</name></decl></param>, <param><decl><type><name pos:line="594" pos:column="85">IDbTransaction</name></type> <name pos:line="594" pos:column="100">transaction</name></decl></param>, <param><decl><type><name pos:line="594" pos:column="113">CommandType</name></type> <name pos:line="594" pos:column="125">commandType</name></decl></param>)</parameter_list>
        <block pos:line="595" pos:column="9">{
            <return pos:line="596" pos:column="13">return <expr><call><name pos:line="596" pos:column="20">Execute</name><argument_list pos:line="596" pos:column="27">(<argument><expr><name pos:line="596" pos:column="28">cnn</name></expr></argument>, <argument><expr><name pos:line="596" pos:column="33">sql</name></expr></argument>, <argument><expr><name pos:line="596" pos:column="38">param</name></expr></argument>, <argument><expr><name pos:line="596" pos:column="45">transaction</name></expr></argument>, <argument><expr><name pos:line="596" pos:column="58">null</name></expr></argument>, <argument><expr><name pos:line="596" pos:column="64">commandType</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="599" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="600" pos:column="9">/// Executes a query, returning the data typed as per T</comment>
        <comment type="line" pos:line="601" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="602" pos:column="9">/// &lt;returns&gt;A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is</comment>
        <comment type="line" pos:line="603" pos:column="9">/// created per row, and a direct column-name===member-name mapping is assumed (case insensitive).</comment>
        <comment type="line" pos:line="604" pos:column="9">/// &lt;/returns&gt;</comment>
        <function><type><specifier pos:line="605" pos:column="9">public</specifier> <specifier pos:line="605" pos:column="16">static</specifier> <name><name pos:line="605" pos:column="23">IEnumerable</name><argument_list pos:line="605" pos:column="34">&lt;<argument><name pos:line="605" pos:column="35">T</name></argument>&gt;</argument_list></name></type> <name><name pos:line="605" pos:column="38">Query</name><argument_list pos:line="605" pos:column="43">&lt;<argument><name pos:line="605" pos:column="44">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="605" pos:column="46">(<param><decl><type><name pos:line="605" pos:column="47">this</name> <name pos:line="605" pos:column="52">IDbConnection</name></type> <name pos:line="605" pos:column="66">cnn</name></decl></param>, <param><decl><type><name pos:line="605" pos:column="71">string</name></type> <name pos:line="605" pos:column="78">sql</name></decl></param>, <param><decl><type><name pos:line="605" pos:column="83">object</name></type> <name pos:line="605" pos:column="90">param</name></decl></param>)</parameter_list>
        <block pos:line="606" pos:column="9">{
            <return pos:line="607" pos:column="13">return <expr><call><name><name pos:line="607" pos:column="20">Query</name><argument_list pos:line="607" pos:column="25">&lt;<argument><name pos:line="607" pos:column="26">T</name></argument>&gt;</argument_list></name><argument_list pos:line="607" pos:column="28">(<argument><expr><name pos:line="607" pos:column="29">cnn</name></expr></argument>, <argument><expr><name pos:line="607" pos:column="34">sql</name></expr></argument>, <argument><expr><name pos:line="607" pos:column="39">param</name></expr></argument>, <argument><expr><name pos:line="607" pos:column="46">null</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="607" pos:column="52">true</lit:literal></expr></argument>, <argument><expr><name pos:line="607" pos:column="58">null</name></expr></argument>, <argument><expr><name pos:line="607" pos:column="64">null</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="610" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="611" pos:column="9">/// Executes a query, returning the data typed as per T</comment>
        <comment type="line" pos:line="612" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="613" pos:column="9">/// &lt;returns&gt;A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is</comment>
        <comment type="line" pos:line="614" pos:column="9">/// created per row, and a direct column-name===member-name mapping is assumed (case insensitive).</comment>
        <comment type="line" pos:line="615" pos:column="9">/// &lt;/returns&gt;</comment>
        <function><type><specifier pos:line="616" pos:column="9">public</specifier> <specifier pos:line="616" pos:column="16">static</specifier> <name><name pos:line="616" pos:column="23">IEnumerable</name><argument_list pos:line="616" pos:column="34">&lt;<argument><name pos:line="616" pos:column="35">T</name></argument>&gt;</argument_list></name></type> <name><name pos:line="616" pos:column="38">Query</name><argument_list pos:line="616" pos:column="43">&lt;<argument><name pos:line="616" pos:column="44">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="616" pos:column="46">(<param><decl><type><name pos:line="616" pos:column="47">this</name> <name pos:line="616" pos:column="52">IDbConnection</name></type> <name pos:line="616" pos:column="66">cnn</name></decl></param>, <param><decl><type><name pos:line="616" pos:column="71">string</name></type> <name pos:line="616" pos:column="78">sql</name></decl></param>, <param><decl><type><name pos:line="616" pos:column="83">object</name></type> <name pos:line="616" pos:column="90">param</name></decl></param>, <param><decl><type><name pos:line="616" pos:column="97">IDbTransaction</name></type> <name pos:line="616" pos:column="112">transaction</name></decl></param>)</parameter_list>
        <block pos:line="617" pos:column="9">{
            <return pos:line="618" pos:column="13">return <expr><call><name><name pos:line="618" pos:column="20">Query</name><argument_list pos:line="618" pos:column="25">&lt;<argument><name pos:line="618" pos:column="26">T</name></argument>&gt;</argument_list></name><argument_list pos:line="618" pos:column="28">(<argument><expr><name pos:line="618" pos:column="29">cnn</name></expr></argument>, <argument><expr><name pos:line="618" pos:column="34">sql</name></expr></argument>, <argument><expr><name pos:line="618" pos:column="39">param</name></expr></argument>, <argument><expr><name pos:line="618" pos:column="46">transaction</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="618" pos:column="59">true</lit:literal></expr></argument>, <argument><expr><name pos:line="618" pos:column="65">null</name></expr></argument>, <argument><expr><name pos:line="618" pos:column="71">null</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="621" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="622" pos:column="9">/// Executes a query, returning the data typed as per T</comment>
        <comment type="line" pos:line="623" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="624" pos:column="9">/// &lt;returns&gt;A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is</comment>
        <comment type="line" pos:line="625" pos:column="9">/// created per row, and a direct column-name===member-name mapping is assumed (case insensitive).</comment>
        <comment type="line" pos:line="626" pos:column="9">/// &lt;/returns&gt;</comment>
        <function><type><specifier pos:line="627" pos:column="9">public</specifier> <specifier pos:line="627" pos:column="16">static</specifier> <name><name pos:line="627" pos:column="23">IEnumerable</name><argument_list pos:line="627" pos:column="34">&lt;<argument><name pos:line="627" pos:column="35">T</name></argument>&gt;</argument_list></name></type> <name><name pos:line="627" pos:column="38">Query</name><argument_list pos:line="627" pos:column="43">&lt;<argument><name pos:line="627" pos:column="44">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="627" pos:column="46">(<param><decl><type><name pos:line="627" pos:column="47">this</name> <name pos:line="627" pos:column="52">IDbConnection</name></type> <name pos:line="627" pos:column="66">cnn</name></decl></param>, <param><decl><type><name pos:line="627" pos:column="71">string</name></type> <name pos:line="627" pos:column="78">sql</name></decl></param>, <param><decl><type><name pos:line="627" pos:column="83">object</name></type> <name pos:line="627" pos:column="90">param</name></decl></param>, <param><decl><type><name pos:line="627" pos:column="97">CommandType</name></type> <name pos:line="627" pos:column="109">commandType</name></decl></param>)</parameter_list>
        <block pos:line="628" pos:column="9">{
            <return pos:line="629" pos:column="13">return <expr><call><name><name pos:line="629" pos:column="20">Query</name><argument_list pos:line="629" pos:column="25">&lt;<argument><name pos:line="629" pos:column="26">T</name></argument>&gt;</argument_list></name><argument_list pos:line="629" pos:column="28">(<argument><expr><name pos:line="629" pos:column="29">cnn</name></expr></argument>, <argument><expr><name pos:line="629" pos:column="34">sql</name></expr></argument>, <argument><expr><name pos:line="629" pos:column="39">param</name></expr></argument>, <argument><expr><name pos:line="629" pos:column="46">null</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="629" pos:column="52">true</lit:literal></expr></argument>, <argument><expr><name pos:line="629" pos:column="58">null</name></expr></argument>, <argument><expr><name pos:line="629" pos:column="64">commandType</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="632" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="633" pos:column="9">/// Executes a query, returning the data typed as per T</comment>
        <comment type="line" pos:line="634" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="635" pos:column="9">/// &lt;returns&gt;A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is</comment>
        <comment type="line" pos:line="636" pos:column="9">/// created per row, and a direct column-name===member-name mapping is assumed (case insensitive).</comment>
        <comment type="line" pos:line="637" pos:column="9">/// &lt;/returns&gt;</comment>
        <function><type><specifier pos:line="638" pos:column="9">public</specifier> <specifier pos:line="638" pos:column="16">static</specifier> <name><name pos:line="638" pos:column="23">IEnumerable</name><argument_list pos:line="638" pos:column="34">&lt;<argument><name pos:line="638" pos:column="35">T</name></argument>&gt;</argument_list></name></type> <name><name pos:line="638" pos:column="38">Query</name><argument_list pos:line="638" pos:column="43">&lt;<argument><name pos:line="638" pos:column="44">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="638" pos:column="46">(<param><decl><type><name pos:line="638" pos:column="47">this</name> <name pos:line="638" pos:column="52">IDbConnection</name></type> <name pos:line="638" pos:column="66">cnn</name></decl></param>, <param><decl><type><name pos:line="638" pos:column="71">string</name></type> <name pos:line="638" pos:column="78">sql</name></decl></param>, <param><decl><type><name pos:line="638" pos:column="83">object</name></type> <name pos:line="638" pos:column="90">param</name></decl></param>, <param><decl><type><name pos:line="638" pos:column="97">IDbTransaction</name></type> <name pos:line="638" pos:column="112">transaction</name></decl></param>, <param><decl><type><name pos:line="638" pos:column="125">CommandType</name></type> <name pos:line="638" pos:column="137">commandType</name></decl></param>)</parameter_list>
        <block pos:line="639" pos:column="9">{
            <return pos:line="640" pos:column="13">return <expr><call><name><name pos:line="640" pos:column="20">Query</name><argument_list pos:line="640" pos:column="25">&lt;<argument><name pos:line="640" pos:column="26">T</name></argument>&gt;</argument_list></name><argument_list pos:line="640" pos:column="28">(<argument><expr><name pos:line="640" pos:column="29">cnn</name></expr></argument>, <argument><expr><name pos:line="640" pos:column="34">sql</name></expr></argument>, <argument><expr><name pos:line="640" pos:column="39">param</name></expr></argument>, <argument><expr><name pos:line="640" pos:column="46">transaction</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="640" pos:column="59">true</lit:literal></expr></argument>, <argument><expr><name pos:line="640" pos:column="65">null</name></expr></argument>, <argument><expr><name pos:line="640" pos:column="71">commandType</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="643" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="644" pos:column="9">/// Execute a command that returns multiple result sets, and access each in turn</comment>
        <comment type="line" pos:line="645" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="646" pos:column="9">public</specifier> <specifier pos:line="646" pos:column="16">static</specifier> <name pos:line="646" pos:column="23">GridReader</name></type> <name pos:line="646" pos:column="34">QueryMultiple</name><parameter_list pos:line="646" pos:column="47">(<param><decl><type><name pos:line="646" pos:column="48">this</name> <name pos:line="646" pos:column="53">IDbConnection</name></type> <name pos:line="646" pos:column="67">cnn</name></decl></param>, <param><decl><type><name pos:line="646" pos:column="72">string</name></type> <name pos:line="646" pos:column="79">sql</name></decl></param>, <param><decl><type><name pos:line="646" pos:column="84">object</name></type> <name pos:line="646" pos:column="91">param</name></decl></param>, <param><decl><type><name pos:line="646" pos:column="98">IDbTransaction</name></type> <name pos:line="646" pos:column="113">transaction</name></decl></param>)</parameter_list> 
        <block pos:line="647" pos:column="9">{
            <return pos:line="648" pos:column="13">return <expr><call><name pos:line="648" pos:column="20">QueryMultiple</name><argument_list pos:line="648" pos:column="33">(<argument><expr><name pos:line="648" pos:column="34">cnn</name></expr></argument>, <argument><expr><name pos:line="648" pos:column="39">sql</name></expr></argument>, <argument><expr><name pos:line="648" pos:column="44">param</name></expr></argument>, <argument><expr><name pos:line="648" pos:column="51">transaction</name></expr></argument>, <argument><expr><name pos:line="648" pos:column="64">null</name></expr></argument>, <argument><expr><name pos:line="648" pos:column="70">null</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="651" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="652" pos:column="9">/// Execute a command that returns multiple result sets, and access each in turn</comment>
        <comment type="line" pos:line="653" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="654" pos:column="9">public</specifier> <specifier pos:line="654" pos:column="16">static</specifier> <name pos:line="654" pos:column="23">GridReader</name></type> <name pos:line="654" pos:column="34">QueryMultiple</name><parameter_list pos:line="654" pos:column="47">(<param><decl><type><name pos:line="654" pos:column="48">this</name> <name pos:line="654" pos:column="53">IDbConnection</name></type> <name pos:line="654" pos:column="67">cnn</name></decl></param>, <param><decl><type><name pos:line="654" pos:column="72">string</name></type> <name pos:line="654" pos:column="79">sql</name></decl></param>, <param><decl><type><name pos:line="654" pos:column="84">object</name></type> <name pos:line="654" pos:column="91">param</name></decl></param>, <param><decl><type><name pos:line="654" pos:column="98">CommandType</name></type> <name pos:line="654" pos:column="110">commandType</name></decl></param>)</parameter_list> 
        <block pos:line="655" pos:column="9">{
            <return pos:line="656" pos:column="13">return <expr><call><name pos:line="656" pos:column="20">QueryMultiple</name><argument_list pos:line="656" pos:column="33">(<argument><expr><name pos:line="656" pos:column="34">cnn</name></expr></argument>, <argument><expr><name pos:line="656" pos:column="39">sql</name></expr></argument>, <argument><expr><name pos:line="656" pos:column="44">param</name></expr></argument>, <argument><expr><name pos:line="656" pos:column="51">null</name></expr></argument>, <argument><expr><name pos:line="656" pos:column="57">null</name></expr></argument>, <argument><expr><name pos:line="656" pos:column="63">commandType</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="659" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="660" pos:column="9">/// Execute a command that returns multiple result sets, and access each in turn</comment>
        <comment type="line" pos:line="661" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="662" pos:column="9">public</specifier> <specifier pos:line="662" pos:column="16">static</specifier> <name pos:line="662" pos:column="23">GridReader</name></type> <name pos:line="662" pos:column="34">QueryMultiple</name><parameter_list pos:line="662" pos:column="47">(<param><decl><type><name pos:line="662" pos:column="48">this</name> <name pos:line="662" pos:column="53">IDbConnection</name></type> <name pos:line="662" pos:column="67">cnn</name></decl></param>, <param><decl><type><name pos:line="662" pos:column="72">string</name></type> <name pos:line="662" pos:column="79">sql</name></decl></param>, <param><decl><type><name pos:line="662" pos:column="84">object</name></type> <name pos:line="662" pos:column="91">param</name></decl></param>, <param><decl><type><name pos:line="662" pos:column="98">IDbTransaction</name></type> <name pos:line="662" pos:column="113">transaction</name></decl></param>, <param><decl><type><name pos:line="662" pos:column="126">CommandType</name></type> <name pos:line="662" pos:column="138">commandType</name></decl></param>)</parameter_list>
        <block pos:line="663" pos:column="9">{
            <return pos:line="664" pos:column="13">return <expr><call><name pos:line="664" pos:column="20">QueryMultiple</name><argument_list pos:line="664" pos:column="33">(<argument><expr><name pos:line="664" pos:column="34">cnn</name></expr></argument>, <argument><expr><name pos:line="664" pos:column="39">sql</name></expr></argument>, <argument><expr><name pos:line="664" pos:column="44">param</name></expr></argument>, <argument><expr><name pos:line="664" pos:column="51">transaction</name></expr></argument>, <argument><expr><name pos:line="664" pos:column="64">null</name></expr></argument>, <argument><expr><name pos:line="664" pos:column="70">commandType</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
<cpp:endif pos:line="666" pos:column="1">#<cpp:directive pos:line="666" pos:column="2">endif</cpp:directive></cpp:endif>
        <comment type="line" pos:line="667" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="668" pos:column="9">/// Execute parameterized SQL  </comment>
        <comment type="line" pos:line="669" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="670" pos:column="9">/// &lt;returns&gt;Number of rows affected&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="671" pos:column="9">public</specifier> <specifier pos:line="671" pos:column="16">static</specifier> <name pos:line="671" pos:column="23">int</name></type> <name pos:line="671" pos:column="27">Execute</name><parameter_list pos:line="671" pos:column="34">(
<cpp:if pos:line="672" pos:column="1">#<cpp:directive pos:line="672" pos:column="2">if</cpp:directive> <expr><name pos:line="672" pos:column="5">CSHARP30</name></expr></cpp:if>
            <param><decl><type><name pos:line="673" pos:column="13">this</name> <name pos:line="673" pos:column="18">IDbConnection</name></type> <name pos:line="673" pos:column="32">cnn</name></decl></param>, <param><decl><type><name pos:line="673" pos:column="37">string</name></type> <name pos:line="673" pos:column="44">sql</name></decl></param>, <param><decl><type><name pos:line="673" pos:column="49">object</name></type> <name pos:line="673" pos:column="56">param</name></decl></param>, <param><decl><type><name pos:line="673" pos:column="63">IDbTransaction</name></type> <name pos:line="673" pos:column="78">transaction</name></decl></param>, <param><decl><type><name pos:line="673" pos:column="91">int</name><type:modifier pos:line="673" pos:column="94">?</type:modifier></type> <name pos:line="673" pos:column="96">commandTimeout</name></decl></param>, <param><decl><type><name pos:line="673" pos:column="112">CommandType</name><type:modifier pos:line="673" pos:column="123">?</type:modifier></type> <name pos:line="673" pos:column="125">commandType</name>
<cpp:else pos:line="674" pos:column="1">#<cpp:directive pos:line="674" pos:column="2">else</cpp:directive></cpp:else>
<name pos:line="675" pos:column="1">this</name> <name pos:line="675" pos:column="6">IDbConnection</name> <name pos:line="675" pos:column="20">cnn</name></decl></param>, <param><decl><type><name pos:line="675" pos:column="25">string</name></type> <name pos:line="675" pos:column="32">sql</name></decl></param>, <param><decl><type><name pos:line="675" pos:column="37">dynamic</name></type> <name pos:line="675" pos:column="45">param</name> <init pos:line="675" pos:column="51">= <expr><name pos:line="675" pos:column="53">null</name></expr></init></decl></param>, <name pos:line="675" pos:column="59">IDbTransaction</name> <name pos:line="675" pos:column="74">transaction</name> <op:operator pos:line="675" pos:column="86">=</op:operator> <name pos:line="675" pos:column="88">null</name>, <name pos:line="675" pos:column="94">int</name><type:modifier pos:line="675" pos:column="97">?</type:modifier> <name pos:line="675" pos:column="99">commandTimeout</name> <op:operator pos:line="675" pos:column="114">=</op:operator> <name pos:line="675" pos:column="116">null</name>, <name pos:line="675" pos:column="122">CommandType</name><type:modifier pos:line="675" pos:column="133">?</type:modifier> <name pos:line="675" pos:column="135">commandType</name> <op:operator pos:line="675" pos:column="147">=</op:operator> <name pos:line="675" pos:column="149">null</name>
<cpp:endif pos:line="676" pos:column="1">#<cpp:directive pos:line="676" pos:column="2">endif</cpp:directive></cpp:endif>
)</parameter_list>
        <block pos:line="678" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="679" pos:column="13">IEnumerable</name></type> <name pos:line="679" pos:column="25">multiExec</name> <init pos:line="679" pos:column="35">= <expr><op:operator pos:line="679" pos:column="37">(</op:operator><name pos:line="679" pos:column="38">object</name><op:operator pos:line="679" pos:column="44">)</op:operator><name pos:line="679" pos:column="45">param</name> <op:operator pos:line="679" pos:column="51">as</op:operator> <name pos:line="679" pos:column="54">IEnumerable</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="680" pos:column="13">Identity</name></type> <name pos:line="680" pos:column="22">identity</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="681" pos:column="13">CacheInfo</name></type> <name pos:line="681" pos:column="23">info</name> <init pos:line="681" pos:column="28">= <expr><name pos:line="681" pos:column="30">null</name></expr></init></decl>;</decl_stmt>
            <if pos:line="682" pos:column="13">if <condition pos:line="682" pos:column="16">(<expr><name pos:line="682" pos:column="17">multiExec</name> <op:operator pos:line="682" pos:column="27">!=</op:operator> <name pos:line="682" pos:column="30">null</name> <op:operator pos:line="682" pos:column="35">&amp;&amp;</op:operator> <op:operator pos:line="682" pos:column="38">!</op:operator><op:operator pos:line="682" pos:column="39">(</op:operator><name pos:line="682" pos:column="40">multiExec</name> <op:operator pos:line="682" pos:column="50">is</op:operator> <name pos:line="682" pos:column="53">string</name><op:operator pos:line="682" pos:column="59">)</op:operator></expr>)</condition><then pos:line="682" pos:column="61">
            <block pos:line="683" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="684" pos:column="17">bool</name></type> <name pos:line="684" pos:column="22">isFirst</name> <init pos:line="684" pos:column="30">= <expr><lit:literal type="boolean" pos:line="684" pos:column="32">true</lit:literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="685" pos:column="17">int</name></type> <name pos:line="685" pos:column="21">total</name> <init pos:line="685" pos:column="27">= <expr><lit:literal type="number" pos:line="685" pos:column="29">0</lit:literal></expr></init></decl>;</decl_stmt>
                <using pos:line="686" pos:column="17">using (<decl><type><name pos:line="686" pos:column="24">var</name></type> <name pos:line="686" pos:column="28">cmd</name> <init pos:line="686" pos:column="32">= <expr><call><name pos:line="686" pos:column="34">SetupCommand</name><argument_list pos:line="686" pos:column="46">(<argument><expr><name pos:line="686" pos:column="47">cnn</name></expr></argument>, <argument><expr><name pos:line="686" pos:column="52">transaction</name></expr></argument>, <argument><expr><name pos:line="686" pos:column="65">sql</name></expr></argument>, <argument><expr><name pos:line="686" pos:column="70">null</name></expr></argument>, <argument><expr><name pos:line="686" pos:column="76">null</name></expr></argument>, <argument><expr><name pos:line="686" pos:column="82">commandTimeout</name></expr></argument>, <argument><expr><name pos:line="686" pos:column="98">commandType</name></expr></argument>)</argument_list></call></expr></init></decl>)
                <block pos:line="687" pos:column="17">{

                    <decl_stmt><decl><type><name pos:line="689" pos:column="21">string</name></type> <name pos:line="689" pos:column="28">masterSql</name> <init pos:line="689" pos:column="38">= <expr><name pos:line="689" pos:column="40">null</name></expr></init></decl>;</decl_stmt>
                    <foreach pos:line="690" pos:column="21">foreach (<init><decl><type><name pos:line="690" pos:column="30">var</name></type> <name pos:line="690" pos:column="34">obj</name> <range pos:line="690" pos:column="38">in <expr><name pos:line="690" pos:column="41">multiExec</name></expr></range></decl></init>)
                    <block pos:line="691" pos:column="21">{
                        <if pos:line="692" pos:column="25">if <condition pos:line="692" pos:column="28">(<expr><name pos:line="692" pos:column="29">isFirst</name></expr>)</condition><then pos:line="692" pos:column="37">
                        <block pos:line="693" pos:column="25">{
                            <expr_stmt><expr><name pos:line="694" pos:column="29">masterSql</name> <op:operator pos:line="694" pos:column="39">=</op:operator> <name><name pos:line="694" pos:column="41">cmd</name><op:operator pos:line="694" pos:column="44">.</op:operator><name pos:line="694" pos:column="45">CommandText</name></name></expr>;</expr_stmt>
                            <expr_stmt><expr><name pos:line="695" pos:column="29">isFirst</name> <op:operator pos:line="695" pos:column="37">=</op:operator> <lit:literal type="boolean" pos:line="695" pos:column="39">false</lit:literal></expr>;</expr_stmt>
                            <expr_stmt><expr><name pos:line="696" pos:column="29">identity</name> <op:operator pos:line="696" pos:column="38">=</op:operator> <op:operator pos:line="696" pos:column="40">new</op:operator> <call><name pos:line="696" pos:column="44">Identity</name><argument_list pos:line="696" pos:column="52">(<argument><expr><name pos:line="696" pos:column="53">sql</name></expr></argument>, <argument><expr><name><name pos:line="696" pos:column="58">cmd</name><op:operator pos:line="696" pos:column="61">.</op:operator><name pos:line="696" pos:column="62">CommandType</name></name></expr></argument>, <argument><expr><name pos:line="696" pos:column="75">cnn</name></expr></argument>, <argument><expr><name pos:line="696" pos:column="80">null</name></expr></argument>, <argument><expr><call><name><name pos:line="696" pos:column="86">obj</name><op:operator pos:line="696" pos:column="89">.</op:operator><name pos:line="696" pos:column="90">GetType</name></name><argument_list pos:line="696" pos:column="97">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="696" pos:column="101">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name pos:line="697" pos:column="29">info</name> <op:operator pos:line="697" pos:column="34">=</op:operator> <call><name pos:line="697" pos:column="36">GetCacheInfo</name><argument_list pos:line="697" pos:column="48">(<argument><expr><name pos:line="697" pos:column="49">identity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then>
                        <else pos:line="699" pos:column="25">else
                        <block pos:line="700" pos:column="25">{
                            <expr_stmt><expr><name><name pos:line="701" pos:column="29">cmd</name><op:operator pos:line="701" pos:column="32">.</op:operator><name pos:line="701" pos:column="33">CommandText</name></name> <op:operator pos:line="701" pos:column="45">=</op:operator> <name pos:line="701" pos:column="47">masterSql</name></expr>;</expr_stmt> <comment type="line" pos:line="701" pos:column="58">// because we do magic replaces on "in" etc</comment>
                            <expr_stmt><expr><call><name><name pos:line="702" pos:column="29">cmd</name><op:operator pos:line="702" pos:column="32">.</op:operator><name pos:line="702" pos:column="33">Parameters</name><op:operator pos:line="702" pos:column="43">.</op:operator><name pos:line="702" pos:column="44">Clear</name></name><argument_list pos:line="702" pos:column="49">()</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="702" pos:column="53">// current code is Add-tastic</comment>
                        }</block></else></if>
                        <expr_stmt><expr><call><name><name pos:line="704" pos:column="25">info</name><op:operator pos:line="704" pos:column="29">.</op:operator><name pos:line="704" pos:column="30">ParamReader</name></name><argument_list pos:line="704" pos:column="41">(<argument><expr><name pos:line="704" pos:column="42">cmd</name></expr></argument>, <argument><expr><name pos:line="704" pos:column="47">obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="705" pos:column="25">total</name> <op:operator pos:line="705" pos:column="31">+=</op:operator> <call><name><name pos:line="705" pos:column="34">cmd</name><op:operator pos:line="705" pos:column="37">.</op:operator><name pos:line="705" pos:column="38">ExecuteNonQuery</name></name><argument_list pos:line="705" pos:column="53">()</argument_list></call></expr>;</expr_stmt>
                    }</block></foreach>
                }</block></using>
                <return pos:line="708" pos:column="17">return <expr><name pos:line="708" pos:column="24">total</name></expr>;</return>
            }</block></then></if>

            <comment type="line" pos:line="711" pos:column="13">// nice and simple</comment>
            <if pos:line="712" pos:column="13">if <condition pos:line="712" pos:column="16">(<expr><op:operator pos:line="712" pos:column="17">(</op:operator><name pos:line="712" pos:column="18">object</name><op:operator pos:line="712" pos:column="24">)</op:operator><name pos:line="712" pos:column="25">param</name> <op:operator pos:line="712" pos:column="31">!=</op:operator> <name pos:line="712" pos:column="34">null</name></expr>)</condition><then pos:line="712" pos:column="39">
            <block pos:line="713" pos:column="13">{
                <expr_stmt><expr><name pos:line="714" pos:column="17">identity</name> <op:operator pos:line="714" pos:column="26">=</op:operator> <op:operator pos:line="714" pos:column="28">new</op:operator> <call><name pos:line="714" pos:column="32">Identity</name><argument_list pos:line="714" pos:column="40">(<argument><expr><name pos:line="714" pos:column="41">sql</name></expr></argument>, <argument><expr><name pos:line="714" pos:column="46">commandType</name></expr></argument>, <argument><expr><name pos:line="714" pos:column="59">cnn</name></expr></argument>, <argument><expr><name pos:line="714" pos:column="64">null</name></expr></argument>, <argument><expr><op:operator pos:line="714" pos:column="70">(</op:operator><name pos:line="714" pos:column="71">object</name><op:operator pos:line="714" pos:column="77">)</op:operator><name pos:line="714" pos:column="78">param</name> <op:operator pos:line="714" pos:column="84">==</op:operator> <name pos:line="714" pos:column="87">null</name> <op:operator pos:line="714" pos:column="92">?</op:operator> <name pos:line="714" pos:column="94">null</name> <op:operator pos:line="714" pos:column="99">:</op:operator> <op:operator pos:line="714" pos:column="101">(</op:operator><op:operator pos:line="714" pos:column="102">(</op:operator><name pos:line="714" pos:column="103">object</name><op:operator pos:line="714" pos:column="109">)</op:operator><name pos:line="714" pos:column="110">param</name><op:operator pos:line="714" pos:column="115">)</op:operator><op:operator pos:line="714" pos:column="116">.</op:operator><call><name pos:line="714" pos:column="117">GetType</name><argument_list pos:line="714" pos:column="124">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="714" pos:column="128">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="715" pos:column="17">info</name> <op:operator pos:line="715" pos:column="22">=</op:operator> <call><name pos:line="715" pos:column="24">GetCacheInfo</name><argument_list pos:line="715" pos:column="36">(<argument><expr><name pos:line="715" pos:column="37">identity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <return pos:line="717" pos:column="13">return <expr><call><name pos:line="717" pos:column="20">ExecuteCommand</name><argument_list pos:line="717" pos:column="34">(<argument><expr><name pos:line="717" pos:column="35">cnn</name></expr></argument>, <argument><expr><name pos:line="717" pos:column="40">transaction</name></expr></argument>, <argument><expr><name pos:line="717" pos:column="53">sql</name></expr></argument>, <argument><expr><op:operator pos:line="717" pos:column="58">(</op:operator><name pos:line="717" pos:column="59">object</name><op:operator pos:line="717" pos:column="65">)</op:operator><name pos:line="717" pos:column="66">param</name> <op:operator pos:line="717" pos:column="72">==</op:operator> <name pos:line="717" pos:column="75">null</name> <op:operator pos:line="717" pos:column="80">?</op:operator> <name pos:line="717" pos:column="82">null</name> <op:operator pos:line="717" pos:column="87">:</op:operator> <name><name pos:line="717" pos:column="89">info</name><op:operator pos:line="717" pos:column="93">.</op:operator><name pos:line="717" pos:column="94">ParamReader</name></name></expr></argument>, <argument><expr><op:operator pos:line="717" pos:column="107">(</op:operator><name pos:line="717" pos:column="108">object</name><op:operator pos:line="717" pos:column="114">)</op:operator><name pos:line="717" pos:column="115">param</name></expr></argument>, <argument><expr><name pos:line="717" pos:column="122">commandTimeout</name></expr></argument>, <argument><expr><name pos:line="717" pos:column="138">commandType</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
<cpp:if pos:line="719" pos:column="1">#<cpp:directive pos:line="719" pos:column="2">if</cpp:directive> <expr><op:operator pos:line="719" pos:column="5">!</op:operator><name pos:line="719" pos:column="6">CSHARP30</name></expr></cpp:if>
        <comment type="line" pos:line="720" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="721" pos:column="9">/// Return a list of dynamic objects, reader is closed after the call</comment>
        <comment type="line" pos:line="722" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="723" pos:column="9">public</specifier> <specifier pos:line="723" pos:column="16">static</specifier> <name><name pos:line="723" pos:column="23">IEnumerable</name><argument_list pos:line="723" pos:column="34">&lt;<argument><name pos:line="723" pos:column="35">dynamic</name></argument>&gt;</argument_list></name></type> <name pos:line="723" pos:column="44">Query</name><parameter_list pos:line="723" pos:column="49">(<param><decl><type><name pos:line="723" pos:column="50">this</name> <name pos:line="723" pos:column="55">IDbConnection</name></type> <name pos:line="723" pos:column="69">cnn</name></decl></param>, <param><decl><type><name pos:line="723" pos:column="74">string</name></type> <name pos:line="723" pos:column="81">sql</name></decl></param>, <param><decl><type><name pos:line="723" pos:column="86">dynamic</name></type> <name pos:line="723" pos:column="94">param</name> <init pos:line="723" pos:column="100">= <expr><name pos:line="723" pos:column="102">null</name></expr></init></decl></param>, <name pos:line="723" pos:column="108">IDbTransaction</name> <name pos:line="723" pos:column="123">transaction</name> <op:operator pos:line="723" pos:column="135">=</op:operator> <name pos:line="723" pos:column="137">null</name>, <name pos:line="723" pos:column="143">bool</name> <name pos:line="723" pos:column="148">buffered</name> <op:operator pos:line="723" pos:column="157">=</op:operator> <lit:literal type="boolean" pos:line="723" pos:column="159">true</lit:literal>, <name pos:line="723" pos:column="165">int</name><type:modifier pos:line="723" pos:column="168">?</type:modifier> <name pos:line="723" pos:column="170">commandTimeout</name> <op:operator pos:line="723" pos:column="185">=</op:operator> <name pos:line="723" pos:column="187">null</name>, <name pos:line="723" pos:column="193">CommandType</name><type:modifier pos:line="723" pos:column="204">?</type:modifier> <name pos:line="723" pos:column="206">commandType</name> <op:operator pos:line="723" pos:column="218">=</op:operator> <name pos:line="723" pos:column="220">null</name>)</parameter_list>
        <block pos:line="724" pos:column="9">{
            <return pos:line="725" pos:column="13">return <expr><call><name><name pos:line="725" pos:column="20">Query</name><argument_list pos:line="725" pos:column="25">&lt;<argument><name pos:line="725" pos:column="26">DapperRow</name></argument>&gt;</argument_list></name><argument_list pos:line="725" pos:column="36">(<argument><expr><name pos:line="725" pos:column="37">cnn</name></expr></argument>, <argument><expr><name pos:line="725" pos:column="42">sql</name></expr></argument>, <argument><expr><name pos:line="725" pos:column="47">param</name> <op:operator pos:line="725" pos:column="53">as</op:operator> <name pos:line="725" pos:column="56">object</name></expr></argument>, <argument><expr><name pos:line="725" pos:column="64">transaction</name></expr></argument>, <argument><expr><name pos:line="725" pos:column="77">buffered</name></expr></argument>, <argument><expr><name pos:line="725" pos:column="87">commandTimeout</name></expr></argument>, <argument><expr><name pos:line="725" pos:column="103">commandType</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
<cpp:else pos:line="727" pos:column="1">#<cpp:directive pos:line="727" pos:column="2">else</cpp:directive></cpp:else>
        <comment type="line" pos:line="728" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="729" pos:column="9">/// Return a list of dynamic objects, reader is closed after the call</comment>
        <comment type="line" pos:line="730" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="731" pos:column="9">public</specifier> <specifier pos:line="731" pos:column="16">static</specifier> <name><name pos:line="731" pos:column="23">IEnumerable</name><argument_list pos:line="731" pos:column="34">&lt;<argument><name><name pos:line="731" pos:column="35">IDictionary</name><argument_list pos:line="731" pos:column="46">&lt;<argument><name pos:line="731" pos:column="47">string</name></argument>, <argument><name pos:line="731" pos:column="55">object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="731" pos:column="64">Query</name><parameter_list pos:line="731" pos:column="69">(<param><decl><type><name pos:line="731" pos:column="70">this</name> <name pos:line="731" pos:column="75">IDbConnection</name></type> <name pos:line="731" pos:column="89">cnn</name></decl></param>, <param><decl><type><name pos:line="731" pos:column="94">string</name></type> <name pos:line="731" pos:column="101">sql</name></decl></param>, <param><decl><type><name pos:line="731" pos:column="106">object</name></type> <name pos:line="731" pos:column="113">param</name></decl></param>)</parameter_list> <block pos:line="731" pos:column="120">{
            <return pos:line="732" pos:column="13">return <expr><call><name pos:line="732" pos:column="20">Query</name><argument_list pos:line="732" pos:column="25">(<argument><expr><name pos:line="732" pos:column="26">cnn</name></expr></argument>, <argument><expr><name pos:line="732" pos:column="31">sql</name></expr></argument>, <argument><expr><name pos:line="732" pos:column="36">param</name></expr></argument>, <argument><expr><name pos:line="732" pos:column="43">null</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="732" pos:column="49">true</lit:literal></expr></argument>, <argument><expr><name pos:line="732" pos:column="55">null</name></expr></argument>, <argument><expr><name pos:line="732" pos:column="61">null</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="735" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="736" pos:column="9">/// Return a list of dynamic objects, reader is closed after the call</comment>
        <comment type="line" pos:line="737" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="738" pos:column="9">public</specifier> <specifier pos:line="738" pos:column="16">static</specifier> <name><name pos:line="738" pos:column="23">IEnumerable</name><argument_list pos:line="738" pos:column="34">&lt;<argument><name><name pos:line="738" pos:column="35">IDictionary</name><argument_list pos:line="738" pos:column="46">&lt;<argument><name pos:line="738" pos:column="47">string</name></argument>, <argument><name pos:line="738" pos:column="55">object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="738" pos:column="64">Query</name><parameter_list pos:line="738" pos:column="69">(<param><decl><type><name pos:line="738" pos:column="70">this</name> <name pos:line="738" pos:column="75">IDbConnection</name></type> <name pos:line="738" pos:column="89">cnn</name></decl></param>, <param><decl><type><name pos:line="738" pos:column="94">string</name></type> <name pos:line="738" pos:column="101">sql</name></decl></param>, <param><decl><type><name pos:line="738" pos:column="106">object</name></type> <name pos:line="738" pos:column="113">param</name></decl></param>, <param><decl><type><name pos:line="738" pos:column="120">IDbTransaction</name></type> <name pos:line="738" pos:column="135">transaction</name></decl></param>)</parameter_list> <block pos:line="738" pos:column="148">{
            <return pos:line="739" pos:column="13">return <expr><call><name pos:line="739" pos:column="20">Query</name><argument_list pos:line="739" pos:column="25">(<argument><expr><name pos:line="739" pos:column="26">cnn</name></expr></argument>, <argument><expr><name pos:line="739" pos:column="31">sql</name></expr></argument>, <argument><expr><name pos:line="739" pos:column="36">param</name></expr></argument>, <argument><expr><name pos:line="739" pos:column="43">transaction</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="739" pos:column="56">true</lit:literal></expr></argument>, <argument><expr><name pos:line="739" pos:column="62">null</name></expr></argument>, <argument><expr><name pos:line="739" pos:column="68">null</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="742" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="743" pos:column="9">/// Return a list of dynamic objects, reader is closed after the call</comment>
        <comment type="line" pos:line="744" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="745" pos:column="9">public</specifier> <specifier pos:line="745" pos:column="16">static</specifier> <name><name pos:line="745" pos:column="23">IEnumerable</name><argument_list pos:line="745" pos:column="34">&lt;<argument><name><name pos:line="745" pos:column="35">IDictionary</name><argument_list pos:line="745" pos:column="46">&lt;<argument><name pos:line="745" pos:column="47">string</name></argument>, <argument><name pos:line="745" pos:column="55">object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="745" pos:column="64">Query</name><parameter_list pos:line="745" pos:column="69">(<param><decl><type><name pos:line="745" pos:column="70">this</name> <name pos:line="745" pos:column="75">IDbConnection</name></type> <name pos:line="745" pos:column="89">cnn</name></decl></param>, <param><decl><type><name pos:line="745" pos:column="94">string</name></type> <name pos:line="745" pos:column="101">sql</name></decl></param>, <param><decl><type><name pos:line="745" pos:column="106">object</name></type> <name pos:line="745" pos:column="113">param</name></decl></param>, <param><decl><type><name pos:line="745" pos:column="120">CommandType</name><type:modifier pos:line="745" pos:column="131">?</type:modifier></type> <name pos:line="745" pos:column="133">commandType</name></decl></param>)</parameter_list> <block pos:line="745" pos:column="146">{
            <return pos:line="746" pos:column="13">return <expr><call><name pos:line="746" pos:column="20">Query</name><argument_list pos:line="746" pos:column="25">(<argument><expr><name pos:line="746" pos:column="26">cnn</name></expr></argument>, <argument><expr><name pos:line="746" pos:column="31">sql</name></expr></argument>, <argument><expr><name pos:line="746" pos:column="36">param</name></expr></argument>, <argument><expr><name pos:line="746" pos:column="43">null</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="746" pos:column="49">true</lit:literal></expr></argument>, <argument><expr><name pos:line="746" pos:column="55">null</name></expr></argument>, <argument><expr><name pos:line="746" pos:column="61">commandType</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="749" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="750" pos:column="9">/// Return a list of dynamic objects, reader is closed after the call</comment>
        <comment type="line" pos:line="751" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="752" pos:column="9">public</specifier> <specifier pos:line="752" pos:column="16">static</specifier> <name><name pos:line="752" pos:column="23">IEnumerable</name><argument_list pos:line="752" pos:column="34">&lt;<argument><name><name pos:line="752" pos:column="35">IDictionary</name><argument_list pos:line="752" pos:column="46">&lt;<argument><name pos:line="752" pos:column="47">string</name></argument>, <argument><name pos:line="752" pos:column="55">object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="752" pos:column="64">Query</name><parameter_list pos:line="752" pos:column="69">(<param><decl><type><name pos:line="752" pos:column="70">this</name> <name pos:line="752" pos:column="75">IDbConnection</name></type> <name pos:line="752" pos:column="89">cnn</name></decl></param>, <param><decl><type><name pos:line="752" pos:column="94">string</name></type> <name pos:line="752" pos:column="101">sql</name></decl></param>, <param><decl><type><name pos:line="752" pos:column="106">object</name></type> <name pos:line="752" pos:column="113">param</name></decl></param>, <param><decl><type><name pos:line="752" pos:column="120">IDbTransaction</name></type> <name pos:line="752" pos:column="135">transaction</name></decl></param>, <param><decl><type><name pos:line="752" pos:column="148">CommandType</name><type:modifier pos:line="752" pos:column="159">?</type:modifier></type> <name pos:line="752" pos:column="161">commandType</name></decl></param>)</parameter_list> <block pos:line="752" pos:column="174">{
            <return pos:line="753" pos:column="13">return <expr><call><name pos:line="753" pos:column="20">Query</name><argument_list pos:line="753" pos:column="25">(<argument><expr><name pos:line="753" pos:column="26">cnn</name></expr></argument>, <argument><expr><name pos:line="753" pos:column="31">sql</name></expr></argument>, <argument><expr><name pos:line="753" pos:column="36">param</name></expr></argument>, <argument><expr><name pos:line="753" pos:column="43">transaction</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="753" pos:column="56">true</lit:literal></expr></argument>, <argument><expr><name pos:line="753" pos:column="62">null</name></expr></argument>, <argument><expr><name pos:line="753" pos:column="68">commandType</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="756" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="757" pos:column="9">/// Return a list of dynamic objects, reader is closed after the call</comment>
        <comment type="line" pos:line="758" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="759" pos:column="9">public</specifier> <specifier pos:line="759" pos:column="16">static</specifier> <name><name pos:line="759" pos:column="23">IEnumerable</name><argument_list pos:line="759" pos:column="34">&lt;<argument><name><name pos:line="759" pos:column="35">IDictionary</name><argument_list pos:line="759" pos:column="46">&lt;<argument><name pos:line="759" pos:column="47">string</name></argument>,<argument><name pos:line="759" pos:column="54">object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="759" pos:column="63">Query</name><parameter_list pos:line="759" pos:column="68">(<param><decl><type><name pos:line="759" pos:column="69">this</name> <name pos:line="759" pos:column="74">IDbConnection</name></type> <name pos:line="759" pos:column="88">cnn</name></decl></param>, <param><decl><type><name pos:line="759" pos:column="93">string</name></type> <name pos:line="759" pos:column="100">sql</name></decl></param>, <param><decl><type><name pos:line="759" pos:column="105">object</name></type> <name pos:line="759" pos:column="112">param</name></decl></param>, <param><decl><type><name pos:line="759" pos:column="119">IDbTransaction</name></type> <name pos:line="759" pos:column="134">transaction</name></decl></param>, <param><decl><type><name pos:line="759" pos:column="147">bool</name></type> <name pos:line="759" pos:column="152">buffered</name></decl></param>, <param><decl><type><name pos:line="759" pos:column="162">int</name><type:modifier pos:line="759" pos:column="165">?</type:modifier></type> <name pos:line="759" pos:column="167">commandTimeout</name></decl></param>, <param><decl><type><name pos:line="759" pos:column="183">CommandType</name><type:modifier pos:line="759" pos:column="194">?</type:modifier></type> <name pos:line="759" pos:column="196">commandType</name></decl></param>)</parameter_list> <block pos:line="759" pos:column="209">{
            <return pos:line="760" pos:column="13">return <expr><call><name><name pos:line="760" pos:column="20">Query</name><argument_list pos:line="760" pos:column="25">&lt;<argument><name><name pos:line="760" pos:column="26">IDictionary</name><argument_list pos:line="760" pos:column="37">&lt;<argument><name pos:line="760" pos:column="38">string</name></argument>, <argument><name pos:line="760" pos:column="46">object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list pos:line="760" pos:column="54">(<argument><expr><name pos:line="760" pos:column="55">cnn</name></expr></argument>, <argument><expr><name pos:line="760" pos:column="60">sql</name></expr></argument>, <argument><expr><name pos:line="760" pos:column="65">param</name></expr></argument>, <argument><expr><name pos:line="760" pos:column="72">transaction</name></expr></argument>, <argument><expr><name pos:line="760" pos:column="85">buffered</name></expr></argument>, <argument><expr><name pos:line="760" pos:column="95">commandTimeout</name></expr></argument>, <argument><expr><name pos:line="760" pos:column="111">commandType</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
<cpp:endif pos:line="762" pos:column="1">#<cpp:directive pos:line="762" pos:column="2">endif</cpp:directive></cpp:endif>

        <comment type="line" pos:line="764" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="765" pos:column="9">/// Executes a query, returning the data typed as per T</comment>
        <comment type="line" pos:line="766" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="767" pos:column="9">/// &lt;remarks&gt;the dynamic param may seem a bit odd, but this works around a major usability issue in vs, if it is Object vs completion gets annoying. Eg type new [space] get new object&lt;/remarks&gt;</comment>
        <comment type="line" pos:line="768" pos:column="9">/// &lt;returns&gt;A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is</comment>
        <comment type="line" pos:line="769" pos:column="9">/// created per row, and a direct column-name===member-name mapping is assumed (case insensitive).</comment>
        <comment type="line" pos:line="770" pos:column="9">/// &lt;/returns&gt;</comment>
        <function><type><specifier pos:line="771" pos:column="9">public</specifier> <specifier pos:line="771" pos:column="16">static</specifier> <name><name pos:line="771" pos:column="23">IEnumerable</name><argument_list pos:line="771" pos:column="34">&lt;<argument><name pos:line="771" pos:column="35">T</name></argument>&gt;</argument_list></name></type> <name><name pos:line="771" pos:column="38">Query</name><argument_list pos:line="771" pos:column="43">&lt;<argument><name pos:line="771" pos:column="44">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="771" pos:column="46">(
<cpp:if pos:line="772" pos:column="1">#<cpp:directive pos:line="772" pos:column="2">if</cpp:directive> <expr><name pos:line="772" pos:column="5">CSHARP30</name></expr></cpp:if>
            <param><decl><type><name pos:line="773" pos:column="13">this</name> <name pos:line="773" pos:column="18">IDbConnection</name></type> <name pos:line="773" pos:column="32">cnn</name></decl></param>, <param><decl><type><name pos:line="773" pos:column="37">string</name></type> <name pos:line="773" pos:column="44">sql</name></decl></param>, <param><decl><type><name pos:line="773" pos:column="49">object</name></type> <name pos:line="773" pos:column="56">param</name></decl></param>, <param><decl><type><name pos:line="773" pos:column="63">IDbTransaction</name></type> <name pos:line="773" pos:column="78">transaction</name></decl></param>, <param><decl><type><name pos:line="773" pos:column="91">bool</name></type> <name pos:line="773" pos:column="96">buffered</name></decl></param>, <param><decl><type><name pos:line="773" pos:column="106">int</name><type:modifier pos:line="773" pos:column="109">?</type:modifier></type> <name pos:line="773" pos:column="111">commandTimeout</name></decl></param>, <param><decl><type><name pos:line="773" pos:column="127">CommandType</name><type:modifier pos:line="773" pos:column="138">?</type:modifier></type> <name pos:line="773" pos:column="140">commandType</name>
<cpp:else pos:line="774" pos:column="1">#<cpp:directive pos:line="774" pos:column="2">else</cpp:directive></cpp:else>
<name pos:line="775" pos:column="1">this</name> <name pos:line="775" pos:column="6">IDbConnection</name> <name pos:line="775" pos:column="20">cnn</name></decl></param>, <param><decl><type><name pos:line="775" pos:column="25">string</name></type> <name pos:line="775" pos:column="32">sql</name></decl></param>, <param><decl><type><name pos:line="775" pos:column="37">dynamic</name></type> <name pos:line="775" pos:column="45">param</name> <init pos:line="775" pos:column="51">= <expr><name pos:line="775" pos:column="53">null</name></expr></init></decl></param>, <name pos:line="775" pos:column="59">IDbTransaction</name> <name pos:line="775" pos:column="74">transaction</name> <op:operator pos:line="775" pos:column="86">=</op:operator> <name pos:line="775" pos:column="88">null</name>, <name pos:line="775" pos:column="94">bool</name> <name pos:line="775" pos:column="99">buffered</name> <op:operator pos:line="775" pos:column="108">=</op:operator> <lit:literal type="boolean" pos:line="775" pos:column="110">true</lit:literal>, <name pos:line="775" pos:column="116">int</name><type:modifier pos:line="775" pos:column="119">?</type:modifier> <name pos:line="775" pos:column="121">commandTimeout</name> <op:operator pos:line="775" pos:column="136">=</op:operator> <name pos:line="775" pos:column="138">null</name>, <name pos:line="775" pos:column="144">CommandType</name><type:modifier pos:line="775" pos:column="155">?</type:modifier> <name pos:line="775" pos:column="157">commandType</name> <op:operator pos:line="775" pos:column="169">=</op:operator> <name pos:line="775" pos:column="171">null</name>
<cpp:endif pos:line="776" pos:column="1">#<cpp:directive pos:line="776" pos:column="2">endif</cpp:directive></cpp:endif>
)</parameter_list>
        <block pos:line="778" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="779" pos:column="13">var</name></type> <name pos:line="779" pos:column="17">data</name> <init pos:line="779" pos:column="22">= <expr><call><name><name pos:line="779" pos:column="24">QueryInternal</name><argument_list pos:line="779" pos:column="37">&lt;<argument><name pos:line="779" pos:column="38">T</name></argument>&gt;</argument_list></name><argument_list pos:line="779" pos:column="40">(<argument><expr><name pos:line="779" pos:column="41">cnn</name></expr></argument>, <argument><expr><name pos:line="779" pos:column="46">sql</name></expr></argument>, <argument><expr><name pos:line="779" pos:column="51">param</name> <op:operator pos:line="779" pos:column="57">as</op:operator> <name pos:line="779" pos:column="60">object</name></expr></argument>, <argument><expr><name pos:line="779" pos:column="68">transaction</name></expr></argument>, <argument><expr><name pos:line="779" pos:column="81">commandTimeout</name></expr></argument>, <argument><expr><name pos:line="779" pos:column="97">commandType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="780" pos:column="13">return <expr><name pos:line="780" pos:column="20">buffered</name> <op:operator pos:line="780" pos:column="29">?</op:operator> <call><name><name pos:line="780" pos:column="31">data</name><op:operator pos:line="780" pos:column="35">.</op:operator><name pos:line="780" pos:column="36">ToList</name></name><argument_list pos:line="780" pos:column="42">()</argument_list></call> <op:operator pos:line="780" pos:column="45">:</op:operator> <name pos:line="780" pos:column="47">data</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="783" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="784" pos:column="9">/// Execute a command that returns multiple result sets, and access each in turn</comment>
        <comment type="line" pos:line="785" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="786" pos:column="9">public</specifier> <specifier pos:line="786" pos:column="16">static</specifier> <name pos:line="786" pos:column="23">GridReader</name></type> <name pos:line="786" pos:column="34">QueryMultiple</name><parameter_list pos:line="786" pos:column="47">(
<cpp:if pos:line="787" pos:column="1">#<cpp:directive pos:line="787" pos:column="2">if</cpp:directive> <expr><name pos:line="787" pos:column="5">CSHARP30</name></expr></cpp:if>  
            <param><decl><type><name pos:line="788" pos:column="13">this</name> <name pos:line="788" pos:column="18">IDbConnection</name></type> <name pos:line="788" pos:column="32">cnn</name></decl></param>, <param><decl><type><name pos:line="788" pos:column="37">string</name></type> <name pos:line="788" pos:column="44">sql</name></decl></param>, <param><decl><type><name pos:line="788" pos:column="49">object</name></type> <name pos:line="788" pos:column="56">param</name></decl></param>, <param><decl><type><name pos:line="788" pos:column="63">IDbTransaction</name></type> <name pos:line="788" pos:column="78">transaction</name></decl></param>, <param><decl><type><name pos:line="788" pos:column="91">int</name><type:modifier pos:line="788" pos:column="94">?</type:modifier></type> <name pos:line="788" pos:column="96">commandTimeout</name></decl></param>, <param><decl><type><name pos:line="788" pos:column="112">CommandType</name><type:modifier pos:line="788" pos:column="123">?</type:modifier></type> <name pos:line="788" pos:column="125">commandType</name>
<cpp:else pos:line="789" pos:column="1">#<cpp:directive pos:line="789" pos:column="2">else</cpp:directive></cpp:else>
<name pos:line="790" pos:column="1">this</name> <name pos:line="790" pos:column="6">IDbConnection</name> <name pos:line="790" pos:column="20">cnn</name></decl></param>, <param><decl><type><name pos:line="790" pos:column="25">string</name></type> <name pos:line="790" pos:column="32">sql</name></decl></param>, <param><decl><type><name pos:line="790" pos:column="37">dynamic</name></type> <name pos:line="790" pos:column="45">param</name> <init pos:line="790" pos:column="51">= <expr><name pos:line="790" pos:column="53">null</name></expr></init></decl></param>, <name pos:line="790" pos:column="59">IDbTransaction</name> <name pos:line="790" pos:column="74">transaction</name> <op:operator pos:line="790" pos:column="86">=</op:operator> <name pos:line="790" pos:column="88">null</name>, <name pos:line="790" pos:column="94">int</name><type:modifier pos:line="790" pos:column="97">?</type:modifier> <name pos:line="790" pos:column="99">commandTimeout</name> <op:operator pos:line="790" pos:column="114">=</op:operator> <name pos:line="790" pos:column="116">null</name>, <name pos:line="790" pos:column="122">CommandType</name><type:modifier pos:line="790" pos:column="133">?</type:modifier> <name pos:line="790" pos:column="135">commandType</name> <op:operator pos:line="790" pos:column="147">=</op:operator> <name pos:line="790" pos:column="149">null</name>
<cpp:endif pos:line="791" pos:column="1">#<cpp:directive pos:line="791" pos:column="2">endif</cpp:directive></cpp:endif>
)</parameter_list>
        <block pos:line="793" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="794" pos:column="13">Identity</name></type> <name pos:line="794" pos:column="22">identity</name> <init pos:line="794" pos:column="31">= <expr><op:operator pos:line="794" pos:column="33">new</op:operator> <call><name pos:line="794" pos:column="37">Identity</name><argument_list pos:line="794" pos:column="45">(<argument><expr><name pos:line="794" pos:column="46">sql</name></expr></argument>, <argument><expr><name pos:line="794" pos:column="51">commandType</name></expr></argument>, <argument><expr><name pos:line="794" pos:column="64">cnn</name></expr></argument>, <argument><expr><call><name pos:line="794" pos:column="69">typeof</name><argument_list pos:line="794" pos:column="75">(<argument><expr><name pos:line="794" pos:column="76">GridReader</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="794" pos:column="89">(</op:operator><name pos:line="794" pos:column="90">object</name><op:operator pos:line="794" pos:column="96">)</op:operator><name pos:line="794" pos:column="97">param</name> <op:operator pos:line="794" pos:column="103">==</op:operator> <name pos:line="794" pos:column="106">null</name> <op:operator pos:line="794" pos:column="111">?</op:operator> <name pos:line="794" pos:column="113">null</name> <op:operator pos:line="794" pos:column="118">:</op:operator> <op:operator pos:line="794" pos:column="120">(</op:operator><op:operator pos:line="794" pos:column="121">(</op:operator><name pos:line="794" pos:column="122">object</name><op:operator pos:line="794" pos:column="128">)</op:operator><name pos:line="794" pos:column="129">param</name><op:operator pos:line="794" pos:column="134">)</op:operator><op:operator pos:line="794" pos:column="135">.</op:operator><call><name pos:line="794" pos:column="136">GetType</name><argument_list pos:line="794" pos:column="143">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="794" pos:column="147">null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="795" pos:column="13">CacheInfo</name></type> <name pos:line="795" pos:column="23">info</name> <init pos:line="795" pos:column="28">= <expr><call><name pos:line="795" pos:column="30">GetCacheInfo</name><argument_list pos:line="795" pos:column="42">(<argument><expr><name pos:line="795" pos:column="43">identity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="797" pos:column="13">IDbCommand</name></type> <name pos:line="797" pos:column="24">cmd</name> <init pos:line="797" pos:column="28">= <expr><name pos:line="797" pos:column="30">null</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="798" pos:column="13">IDataReader</name></type> <name pos:line="798" pos:column="25">reader</name> <init pos:line="798" pos:column="32">= <expr><name pos:line="798" pos:column="34">null</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="799" pos:column="13">bool</name></type> <name pos:line="799" pos:column="18">wasClosed</name> <init pos:line="799" pos:column="28">= <expr><name><name pos:line="799" pos:column="30">cnn</name><op:operator pos:line="799" pos:column="33">.</op:operator><name pos:line="799" pos:column="34">State</name></name> <op:operator pos:line="799" pos:column="40">==</op:operator> <name><name pos:line="799" pos:column="43">ConnectionState</name><op:operator pos:line="799" pos:column="58">.</op:operator><name pos:line="799" pos:column="59">Closed</name></name></expr></init></decl>;</decl_stmt>
            <try pos:line="800" pos:column="13">try
            <block pos:line="801" pos:column="13">{
                <if pos:line="802" pos:column="17">if <condition pos:line="802" pos:column="20">(<expr><name pos:line="802" pos:column="21">wasClosed</name></expr>)</condition><then pos:line="802" pos:column="31"> <expr_stmt><expr><call><name><name pos:line="802" pos:column="32">cnn</name><op:operator pos:line="802" pos:column="35">.</op:operator><name pos:line="802" pos:column="36">Open</name></name><argument_list pos:line="802" pos:column="40">()</argument_list></call></expr>;</expr_stmt></then></if>
                <expr_stmt><expr><name pos:line="803" pos:column="17">cmd</name> <op:operator pos:line="803" pos:column="21">=</op:operator> <call><name pos:line="803" pos:column="23">SetupCommand</name><argument_list pos:line="803" pos:column="35">(<argument><expr><name pos:line="803" pos:column="36">cnn</name></expr></argument>, <argument><expr><name pos:line="803" pos:column="41">transaction</name></expr></argument>, <argument><expr><name pos:line="803" pos:column="54">sql</name></expr></argument>, <argument><expr><name><name pos:line="803" pos:column="59">info</name><op:operator pos:line="803" pos:column="63">.</op:operator><name pos:line="803" pos:column="64">ParamReader</name></name></expr></argument>, <argument><expr><op:operator pos:line="803" pos:column="77">(</op:operator><name pos:line="803" pos:column="78">object</name><op:operator pos:line="803" pos:column="84">)</op:operator><name pos:line="803" pos:column="85">param</name></expr></argument>, <argument><expr><name pos:line="803" pos:column="92">commandTimeout</name></expr></argument>, <argument><expr><name pos:line="803" pos:column="108">commandType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="804" pos:column="17">reader</name> <op:operator pos:line="804" pos:column="24">=</op:operator> <call><name><name pos:line="804" pos:column="26">cmd</name><op:operator pos:line="804" pos:column="29">.</op:operator><name pos:line="804" pos:column="30">ExecuteReader</name></name><argument_list pos:line="804" pos:column="43">(<argument><expr><name pos:line="804" pos:column="44">wasClosed</name> <op:operator pos:line="804" pos:column="54">?</op:operator> <name><name pos:line="804" pos:column="56">CommandBehavior</name><op:operator pos:line="804" pos:column="71">.</op:operator><name pos:line="804" pos:column="72">CloseConnection</name></name> <op:operator pos:line="804" pos:column="88">:</op:operator> <name><name pos:line="804" pos:column="90">CommandBehavior</name><op:operator pos:line="804" pos:column="105">.</op:operator><name pos:line="804" pos:column="106">Default</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name pos:line="806" pos:column="17">var</name></type> <name pos:line="806" pos:column="21">result</name> <init pos:line="806" pos:column="28">= <expr><op:operator pos:line="806" pos:column="30">new</op:operator> <call><name pos:line="806" pos:column="34">GridReader</name><argument_list pos:line="806" pos:column="44">(<argument><expr><name pos:line="806" pos:column="45">cmd</name></expr></argument>, <argument><expr><name pos:line="806" pos:column="50">reader</name></expr></argument>, <argument><expr><name pos:line="806" pos:column="58">identity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name pos:line="807" pos:column="17">wasClosed</name> <op:operator pos:line="807" pos:column="27">=</op:operator> <lit:literal type="boolean" pos:line="807" pos:column="29">false</lit:literal></expr>;</expr_stmt> <comment type="line" pos:line="807" pos:column="36">// *if* the connection was closed and we got this far, then we now have a reader</comment>
                <comment type="line" pos:line="808" pos:column="17">// with the CloseConnection flag, so the reader will deal with the connection; we</comment>
                <comment type="line" pos:line="809" pos:column="17">// still need something in the "finally" to ensure that broken SQL still results</comment>
                <comment type="line" pos:line="810" pos:column="17">// in the connection closing itself</comment>
                <return pos:line="811" pos:column="17">return <expr><name pos:line="811" pos:column="24">result</name></expr>;</return>
            }</block>
            <catch pos:line="813" pos:column="13">catch
            <block pos:line="814" pos:column="13">{
                <if pos:line="815" pos:column="17">if <condition pos:line="815" pos:column="20">(<expr><name pos:line="815" pos:column="21">reader</name> <op:operator pos:line="815" pos:column="28">!=</op:operator> <name pos:line="815" pos:column="31">null</name></expr>)</condition><then pos:line="815" pos:column="36">
                <block pos:line="816" pos:column="17">{
                    <if pos:line="817" pos:column="21">if <condition pos:line="817" pos:column="24">(<expr><op:operator pos:line="817" pos:column="25">!</op:operator><name><name pos:line="817" pos:column="26">reader</name><op:operator pos:line="817" pos:column="32">.</op:operator><name pos:line="817" pos:column="33">IsClosed</name></name></expr>)</condition><then pos:line="817" pos:column="42"> <try pos:line="817" pos:column="43">try <block pos:line="817" pos:column="47">{ <expr_stmt><expr><call><name><name pos:line="817" pos:column="49">cmd</name><op:operator pos:line="817" pos:column="52">.</op:operator><name pos:line="817" pos:column="53">Cancel</name></name><argument_list pos:line="817" pos:column="59">()</argument_list></call></expr>;</expr_stmt> }</block>
                        <catch pos:line="818" pos:column="25">catch <block pos:line="818" pos:column="31">{ <comment type="block" pos:line="818" pos:column="33">/* don't spoil the existing exception */</comment> }</block></catch></try></then></if>
                    <expr_stmt><expr><call><name><name pos:line="819" pos:column="21">reader</name><op:operator pos:line="819" pos:column="27">.</op:operator><name pos:line="819" pos:column="28">Dispose</name></name><argument_list pos:line="819" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <if pos:line="821" pos:column="17">if <condition pos:line="821" pos:column="20">(<expr><name pos:line="821" pos:column="21">cmd</name> <op:operator pos:line="821" pos:column="25">!=</op:operator> <name pos:line="821" pos:column="28">null</name></expr>)</condition><then pos:line="821" pos:column="33"> <expr_stmt><expr><call><name><name pos:line="821" pos:column="34">cmd</name><op:operator pos:line="821" pos:column="37">.</op:operator><name pos:line="821" pos:column="38">Dispose</name></name><argument_list pos:line="821" pos:column="45">()</argument_list></call></expr>;</expr_stmt></then></if>
                <if pos:line="822" pos:column="17">if <condition pos:line="822" pos:column="20">(<expr><name pos:line="822" pos:column="21">wasClosed</name></expr>)</condition><then pos:line="822" pos:column="31"> <expr_stmt><expr><call><name><name pos:line="822" pos:column="32">cnn</name><op:operator pos:line="822" pos:column="35">.</op:operator><name pos:line="822" pos:column="36">Close</name></name><argument_list pos:line="822" pos:column="41">()</argument_list></call></expr>;</expr_stmt></then></if>
                <throw pos:line="823" pos:column="17">throw;</throw>
            }</block></catch></try>
        }</block></function>

        <comment type="line" pos:line="827" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="828" pos:column="9">/// Return a typed list of objects, reader is closed after the call</comment>
        <comment type="line" pos:line="829" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="830" pos:column="9">private</specifier> <specifier pos:line="830" pos:column="17">static</specifier> <name><name pos:line="830" pos:column="24">IEnumerable</name><argument_list pos:line="830" pos:column="35">&lt;<argument><name pos:line="830" pos:column="36">T</name></argument>&gt;</argument_list></name></type> <name><name pos:line="830" pos:column="39">QueryInternal</name><argument_list pos:line="830" pos:column="52">&lt;<argument><name pos:line="830" pos:column="53">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="830" pos:column="55">(<param><decl><type><name pos:line="830" pos:column="56">this</name> <name pos:line="830" pos:column="61">IDbConnection</name></type> <name pos:line="830" pos:column="75">cnn</name></decl></param>, <param><decl><type><name pos:line="830" pos:column="80">string</name></type> <name pos:line="830" pos:column="87">sql</name></decl></param>, <param><decl><type><name pos:line="830" pos:column="92">object</name></type> <name pos:line="830" pos:column="99">param</name></decl></param>, <param><decl><type><name pos:line="830" pos:column="106">IDbTransaction</name></type> <name pos:line="830" pos:column="121">transaction</name></decl></param>, <param><decl><type><name pos:line="830" pos:column="134">int</name><type:modifier pos:line="830" pos:column="137">?</type:modifier></type> <name pos:line="830" pos:column="139">commandTimeout</name></decl></param>, <param><decl><type><name pos:line="830" pos:column="155">CommandType</name><type:modifier pos:line="830" pos:column="166">?</type:modifier></type> <name pos:line="830" pos:column="168">commandType</name></decl></param>)</parameter_list>
        <block pos:line="831" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="832" pos:column="13">var</name></type> <name pos:line="832" pos:column="17">identity</name> <init pos:line="832" pos:column="26">= <expr><op:operator pos:line="832" pos:column="28">new</op:operator> <call><name pos:line="832" pos:column="32">Identity</name><argument_list pos:line="832" pos:column="40">(<argument><expr><name pos:line="832" pos:column="41">sql</name></expr></argument>, <argument><expr><name pos:line="832" pos:column="46">commandType</name></expr></argument>, <argument><expr><name pos:line="832" pos:column="59">cnn</name></expr></argument>, <argument><expr><call><name pos:line="832" pos:column="64">typeof</name><argument_list pos:line="832" pos:column="70">(<argument><expr><name pos:line="832" pos:column="71">T</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="832" pos:column="75">param</name> <op:operator pos:line="832" pos:column="81">==</op:operator> <name pos:line="832" pos:column="84">null</name> <op:operator pos:line="832" pos:column="89">?</op:operator> <name pos:line="832" pos:column="91">null</name> <op:operator pos:line="832" pos:column="96">:</op:operator> <call><name><name pos:line="832" pos:column="98">param</name><op:operator pos:line="832" pos:column="103">.</op:operator><name pos:line="832" pos:column="104">GetType</name></name><argument_list pos:line="832" pos:column="111">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="832" pos:column="115">null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="833" pos:column="13">var</name></type> <name pos:line="833" pos:column="17">info</name> <init pos:line="833" pos:column="22">= <expr><call><name pos:line="833" pos:column="24">GetCacheInfo</name><argument_list pos:line="833" pos:column="36">(<argument><expr><name pos:line="833" pos:column="37">identity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="835" pos:column="13">IDbCommand</name></type> <name pos:line="835" pos:column="24">cmd</name> <init pos:line="835" pos:column="28">= <expr><name pos:line="835" pos:column="30">null</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="836" pos:column="13">IDataReader</name></type> <name pos:line="836" pos:column="25">reader</name> <init pos:line="836" pos:column="32">= <expr><name pos:line="836" pos:column="34">null</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="838" pos:column="13">bool</name></type> <name pos:line="838" pos:column="18">wasClosed</name> <init pos:line="838" pos:column="28">= <expr><name><name pos:line="838" pos:column="30">cnn</name><op:operator pos:line="838" pos:column="33">.</op:operator><name pos:line="838" pos:column="34">State</name></name> <op:operator pos:line="838" pos:column="40">==</op:operator> <name><name pos:line="838" pos:column="43">ConnectionState</name><op:operator pos:line="838" pos:column="58">.</op:operator><name pos:line="838" pos:column="59">Closed</name></name></expr></init></decl>;</decl_stmt>
            <try pos:line="839" pos:column="13">try
            <block pos:line="840" pos:column="13">{
                <expr_stmt><expr><name pos:line="841" pos:column="17">cmd</name> <op:operator pos:line="841" pos:column="21">=</op:operator> <call><name pos:line="841" pos:column="23">SetupCommand</name><argument_list pos:line="841" pos:column="35">(<argument><expr><name pos:line="841" pos:column="36">cnn</name></expr></argument>, <argument><expr><name pos:line="841" pos:column="41">transaction</name></expr></argument>, <argument><expr><name pos:line="841" pos:column="54">sql</name></expr></argument>, <argument><expr><name><name pos:line="841" pos:column="59">info</name><op:operator pos:line="841" pos:column="63">.</op:operator><name pos:line="841" pos:column="64">ParamReader</name></name></expr></argument>, <argument><expr><name pos:line="841" pos:column="77">param</name></expr></argument>, <argument><expr><name pos:line="841" pos:column="84">commandTimeout</name></expr></argument>, <argument><expr><name pos:line="841" pos:column="100">commandType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if pos:line="843" pos:column="17">if <condition pos:line="843" pos:column="20">(<expr><name pos:line="843" pos:column="21">wasClosed</name></expr>)</condition><then pos:line="843" pos:column="31"> <expr_stmt><expr><call><name><name pos:line="843" pos:column="32">cnn</name><op:operator pos:line="843" pos:column="35">.</op:operator><name pos:line="843" pos:column="36">Open</name></name><argument_list pos:line="843" pos:column="40">()</argument_list></call></expr>;</expr_stmt></then></if>
                <expr_stmt><expr><name pos:line="844" pos:column="17">reader</name> <op:operator pos:line="844" pos:column="24">=</op:operator> <call><name><name pos:line="844" pos:column="26">cmd</name><op:operator pos:line="844" pos:column="29">.</op:operator><name pos:line="844" pos:column="30">ExecuteReader</name></name><argument_list pos:line="844" pos:column="43">(<argument><expr><name pos:line="844" pos:column="44">wasClosed</name> <op:operator pos:line="844" pos:column="54">?</op:operator> <name><name pos:line="844" pos:column="56">CommandBehavior</name><op:operator pos:line="844" pos:column="71">.</op:operator><name pos:line="844" pos:column="72">CloseConnection</name></name> <op:operator pos:line="844" pos:column="88">:</op:operator> <name><name pos:line="844" pos:column="90">CommandBehavior</name><op:operator pos:line="844" pos:column="105">.</op:operator><name pos:line="844" pos:column="106">Default</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="845" pos:column="17">wasClosed</name> <op:operator pos:line="845" pos:column="27">=</op:operator> <lit:literal type="boolean" pos:line="845" pos:column="29">false</lit:literal></expr>;</expr_stmt> <comment type="line" pos:line="845" pos:column="36">// *if* the connection was closed and we got this far, then we now have a reader</comment>
                <comment type="line" pos:line="846" pos:column="17">// with the CloseConnection flag, so the reader will deal with the connection; we</comment>
                <comment type="line" pos:line="847" pos:column="17">// still need something in the "finally" to ensure that broken SQL still results</comment>
                <comment type="line" pos:line="848" pos:column="17">// in the connection closing itself</comment>
                <decl_stmt><decl><type><name pos:line="849" pos:column="17">var</name></type> <name pos:line="849" pos:column="21">tuple</name> <init pos:line="849" pos:column="27">= <expr><name><name pos:line="849" pos:column="29">info</name><op:operator pos:line="849" pos:column="33">.</op:operator><name pos:line="849" pos:column="34">Deserializer</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="850" pos:column="17">int</name></type> <name pos:line="850" pos:column="21">hash</name> <init pos:line="850" pos:column="26">= <expr><call><name pos:line="850" pos:column="28">GetColumnHash</name><argument_list pos:line="850" pos:column="41">(<argument><expr><name pos:line="850" pos:column="42">reader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="851" pos:column="17">if <condition pos:line="851" pos:column="20">(<expr><name><name pos:line="851" pos:column="21">tuple</name><op:operator pos:line="851" pos:column="26">.</op:operator><name pos:line="851" pos:column="27">Func</name></name> <op:operator pos:line="851" pos:column="32">==</op:operator> <name pos:line="851" pos:column="35">null</name> <op:operator pos:line="851" pos:column="40">||</op:operator> <name><name pos:line="851" pos:column="43">tuple</name><op:operator pos:line="851" pos:column="48">.</op:operator><name pos:line="851" pos:column="49">Hash</name></name> <op:operator pos:line="851" pos:column="54">!=</op:operator> <name pos:line="851" pos:column="57">hash</name></expr>)</condition><then pos:line="851" pos:column="62">
                <block pos:line="852" pos:column="17">{
                    <expr_stmt><expr><name pos:line="853" pos:column="21">tuple</name> <op:operator pos:line="853" pos:column="27">=</op:operator> <name><name pos:line="853" pos:column="29">info</name><op:operator pos:line="853" pos:column="33">.</op:operator><name pos:line="853" pos:column="34">Deserializer</name></name> <op:operator pos:line="853" pos:column="47">=</op:operator> <op:operator pos:line="853" pos:column="49">new</op:operator> <call><name pos:line="853" pos:column="53">DeserializerState</name><argument_list pos:line="853" pos:column="70">(<argument><expr><name pos:line="853" pos:column="71">hash</name></expr></argument>, <argument><expr><call><name pos:line="853" pos:column="77">GetDeserializer</name><argument_list pos:line="853" pos:column="92">(<argument><expr><call><name pos:line="853" pos:column="93">typeof</name><argument_list pos:line="853" pos:column="99">(<argument><expr><name pos:line="853" pos:column="100">T</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="853" pos:column="104">reader</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="853" pos:column="112">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="853" pos:column="115">-</op:operator><lit:literal type="number" pos:line="853" pos:column="116">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="853" pos:column="119">false</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="854" pos:column="21">SetQueryCache</name><argument_list pos:line="854" pos:column="34">(<argument><expr><name pos:line="854" pos:column="35">identity</name></expr></argument>, <argument><expr><name pos:line="854" pos:column="45">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <decl_stmt><decl><type><name pos:line="857" pos:column="17">var</name></type> <name pos:line="857" pos:column="21">func</name> <init pos:line="857" pos:column="26">= <expr><name><name pos:line="857" pos:column="28">tuple</name><op:operator pos:line="857" pos:column="33">.</op:operator><name pos:line="857" pos:column="34">Func</name></name></expr></init></decl>;</decl_stmt>

                <while pos:line="859" pos:column="17">while <condition pos:line="859" pos:column="23">(<expr><call><name><name pos:line="859" pos:column="24">reader</name><op:operator pos:line="859" pos:column="30">.</op:operator><name pos:line="859" pos:column="31">Read</name></name><argument_list pos:line="859" pos:column="35">()</argument_list></call></expr>)</condition>
                <block pos:line="860" pos:column="17">{
                    <return><specifier pos:line="861" pos:column="21">yield</specifier> return <expr><op:operator pos:line="861" pos:column="34">(</op:operator><name pos:line="861" pos:column="35">T</name><op:operator pos:line="861" pos:column="36">)</op:operator><call><name pos:line="861" pos:column="37">func</name><argument_list pos:line="861" pos:column="41">(<argument><expr><name pos:line="861" pos:column="42">reader</name></expr></argument>)</argument_list></call></expr>;</return>
                }</block></while>
                <comment type="line" pos:line="863" pos:column="17">// happy path; close the reader cleanly - no</comment>
                <comment type="line" pos:line="864" pos:column="17">// need for "Cancel" etc</comment>
                <expr_stmt><expr><call><name><name pos:line="865" pos:column="17">reader</name><op:operator pos:line="865" pos:column="23">.</op:operator><name pos:line="865" pos:column="24">Dispose</name></name><argument_list pos:line="865" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="866" pos:column="17">reader</name> <op:operator pos:line="866" pos:column="24">=</op:operator> <name pos:line="866" pos:column="26">null</name></expr>;</expr_stmt>
            }</block>
            <finally pos:line="868" pos:column="13">finally
            <block pos:line="869" pos:column="13">{
                <if pos:line="870" pos:column="17">if <condition pos:line="870" pos:column="20">(<expr><name pos:line="870" pos:column="21">reader</name> <op:operator pos:line="870" pos:column="28">!=</op:operator> <name pos:line="870" pos:column="31">null</name></expr>)</condition><then pos:line="870" pos:column="36">
                <block pos:line="871" pos:column="17">{
                    <if pos:line="872" pos:column="21">if <condition pos:line="872" pos:column="24">(<expr><op:operator pos:line="872" pos:column="25">!</op:operator><name><name pos:line="872" pos:column="26">reader</name><op:operator pos:line="872" pos:column="32">.</op:operator><name pos:line="872" pos:column="33">IsClosed</name></name></expr>)</condition><then pos:line="872" pos:column="42"> <try pos:line="872" pos:column="43">try <block pos:line="872" pos:column="47">{ <expr_stmt><expr><call><name><name pos:line="872" pos:column="49">cmd</name><op:operator pos:line="872" pos:column="52">.</op:operator><name pos:line="872" pos:column="53">Cancel</name></name><argument_list pos:line="872" pos:column="59">()</argument_list></call></expr>;</expr_stmt> }</block>
                        <catch pos:line="873" pos:column="25">catch <block pos:line="873" pos:column="31">{ <comment type="block" pos:line="873" pos:column="33">/* don't spoil the existing exception */</comment> }</block></catch></try></then></if>
                    <expr_stmt><expr><call><name><name pos:line="874" pos:column="21">reader</name><op:operator pos:line="874" pos:column="27">.</op:operator><name pos:line="874" pos:column="28">Dispose</name></name><argument_list pos:line="874" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <if pos:line="876" pos:column="17">if <condition pos:line="876" pos:column="20">(<expr><name pos:line="876" pos:column="21">wasClosed</name></expr>)</condition><then pos:line="876" pos:column="31"> <expr_stmt><expr><call><name><name pos:line="876" pos:column="32">cnn</name><op:operator pos:line="876" pos:column="35">.</op:operator><name pos:line="876" pos:column="36">Close</name></name><argument_list pos:line="876" pos:column="41">()</argument_list></call></expr>;</expr_stmt></then></if>
                <if pos:line="877" pos:column="17">if <condition pos:line="877" pos:column="20">(<expr><name pos:line="877" pos:column="21">cmd</name> <op:operator pos:line="877" pos:column="25">!=</op:operator> <name pos:line="877" pos:column="28">null</name></expr>)</condition><then pos:line="877" pos:column="33"> <expr_stmt><expr><call><name><name pos:line="877" pos:column="34">cmd</name><op:operator pos:line="877" pos:column="37">.</op:operator><name pos:line="877" pos:column="38">Dispose</name></name><argument_list pos:line="877" pos:column="45">()</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></finally></try>
        }</block></function>

        <comment type="line" pos:line="881" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="882" pos:column="9">/// Maps a query to objects</comment>
        <comment type="line" pos:line="883" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="884" pos:column="9">/// &lt;typeparam name="TFirst"&gt;The first type in the recordset&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="885" pos:column="9">/// &lt;typeparam name="TSecond"&gt;The second type in the recordset&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="886" pos:column="9">/// &lt;typeparam name="TReturn"&gt;The return type&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="887" pos:column="9">/// &lt;param name="cnn"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="888" pos:column="9">/// &lt;param name="sql"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="889" pos:column="9">/// &lt;param name="map"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="890" pos:column="9">/// &lt;param name="param"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="891" pos:column="9">/// &lt;param name="transaction"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="892" pos:column="9">/// &lt;param name="buffered"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="893" pos:column="9">/// &lt;param name="splitOn"&gt;The Field we should split and read the second object from (default: id)&lt;/param&gt;</comment>
        <comment type="line" pos:line="894" pos:column="9">/// &lt;param name="commandTimeout"&gt;Number of seconds before command execution timeout&lt;/param&gt;</comment>
        <comment type="line" pos:line="895" pos:column="9">/// &lt;param name="commandType"&gt;Is it a stored proc or a batch?&lt;/param&gt;</comment>
        <comment type="line" pos:line="896" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="897" pos:column="9">public</specifier> <specifier pos:line="897" pos:column="16">static</specifier> <name><name pos:line="897" pos:column="23">IEnumerable</name><argument_list pos:line="897" pos:column="34">&lt;<argument><name pos:line="897" pos:column="35">TReturn</name></argument>&gt;</argument_list></name></type> <name><name pos:line="897" pos:column="44">Query</name><argument_list pos:line="897" pos:column="49">&lt;<argument><name pos:line="897" pos:column="50">TFirst</name></argument>, <argument><name pos:line="897" pos:column="58">TSecond</name></argument>, <argument><name pos:line="897" pos:column="67">TReturn</name></argument>&gt;</argument_list></name><parameter_list pos:line="897" pos:column="75">(
<cpp:if pos:line="898" pos:column="1">#<cpp:directive pos:line="898" pos:column="2">if</cpp:directive> <expr><name pos:line="898" pos:column="5">CSHARP30</name></expr></cpp:if>  
            <param><decl><type><name pos:line="899" pos:column="13">this</name> <name pos:line="899" pos:column="18">IDbConnection</name></type> <name pos:line="899" pos:column="32">cnn</name></decl></param>, <param><decl><type><name pos:line="899" pos:column="37">string</name></type> <name pos:line="899" pos:column="44">sql</name></decl></param>, <param><decl><type><name><name pos:line="899" pos:column="49">Func</name><argument_list pos:line="899" pos:column="53">&lt;<argument><name pos:line="899" pos:column="54">TFirst</name></argument>, <argument><name pos:line="899" pos:column="62">TSecond</name></argument>, <argument><name pos:line="899" pos:column="71">TReturn</name></argument>&gt;</argument_list></name></type> <name pos:line="899" pos:column="80">map</name></decl></param>, <param><decl><type><name pos:line="899" pos:column="85">object</name></type> <name pos:line="899" pos:column="92">param</name></decl></param>, <param><decl><type><name pos:line="899" pos:column="99">IDbTransaction</name></type> <name pos:line="899" pos:column="114">transaction</name></decl></param>, <param><decl><type><name pos:line="899" pos:column="127">bool</name></type> <name pos:line="899" pos:column="132">buffered</name></decl></param>, <param><decl><type><name pos:line="899" pos:column="142">string</name></type> <name pos:line="899" pos:column="149">splitOn</name></decl></param>, <param><decl><type><name pos:line="899" pos:column="158">int</name><type:modifier pos:line="899" pos:column="161">?</type:modifier></type> <name pos:line="899" pos:column="163">commandTimeout</name></decl></param>, <param><decl><type><name pos:line="899" pos:column="179">CommandType</name><type:modifier pos:line="899" pos:column="190">?</type:modifier></type> <name pos:line="899" pos:column="192">commandType</name>
<cpp:else pos:line="900" pos:column="1">#<cpp:directive pos:line="900" pos:column="2">else</cpp:directive></cpp:else>
<name pos:line="901" pos:column="1">this</name> <name pos:line="901" pos:column="6">IDbConnection</name> <name pos:line="901" pos:column="20">cnn</name></decl></param>, <param><decl><type><name pos:line="901" pos:column="25">string</name></type> <name pos:line="901" pos:column="32">sql</name></decl></param>, <param><decl><type><name><name pos:line="901" pos:column="37">Func</name><argument_list pos:line="901" pos:column="41">&lt;<argument><name pos:line="901" pos:column="42">TFirst</name></argument>, <argument><name pos:line="901" pos:column="50">TSecond</name></argument>, <argument><name pos:line="901" pos:column="59">TReturn</name></argument>&gt;</argument_list></name></type> <name pos:line="901" pos:column="68">map</name></decl></param>, <param><decl><type><name pos:line="901" pos:column="73">dynamic</name></type> <name pos:line="901" pos:column="81">param</name> <init pos:line="901" pos:column="87">= <expr><name pos:line="901" pos:column="89">null</name></expr></init></decl></param>, <name pos:line="901" pos:column="95">IDbTransaction</name> <name pos:line="901" pos:column="110">transaction</name> <op:operator pos:line="901" pos:column="122">=</op:operator> <name pos:line="901" pos:column="124">null</name>, <name pos:line="901" pos:column="130">bool</name> <name pos:line="901" pos:column="135">buffered</name> <op:operator pos:line="901" pos:column="144">=</op:operator> <lit:literal type="boolean" pos:line="901" pos:column="146">true</lit:literal>, <name pos:line="901" pos:column="152">string</name> <name pos:line="901" pos:column="159">splitOn</name> <op:operator pos:line="901" pos:column="167">=</op:operator> <lit:literal type="string" pos:line="901" pos:column="169">"Id"</lit:literal>, <name pos:line="901" pos:column="175">int</name><type:modifier pos:line="901" pos:column="178">?</type:modifier> <name pos:line="901" pos:column="180">commandTimeout</name> <op:operator pos:line="901" pos:column="195">=</op:operator> <name pos:line="901" pos:column="197">null</name>, <name pos:line="901" pos:column="203">CommandType</name><type:modifier pos:line="901" pos:column="214">?</type:modifier> <name pos:line="901" pos:column="216">commandType</name> <op:operator pos:line="901" pos:column="228">=</op:operator> <name pos:line="901" pos:column="230">null</name>
<cpp:endif pos:line="902" pos:column="1">#<cpp:directive pos:line="902" pos:column="2">endif</cpp:directive></cpp:endif>
)</parameter_list>
        <block pos:line="904" pos:column="9">{
            <return pos:line="905" pos:column="13">return <expr><call><name><name pos:line="905" pos:column="20">MultiMap</name><argument_list pos:line="905" pos:column="28">&lt;<argument><name pos:line="905" pos:column="29">TFirst</name></argument>, <argument><name pos:line="905" pos:column="37">TSecond</name></argument>, <argument><name pos:line="905" pos:column="46">DontMap</name></argument>, <argument><name pos:line="905" pos:column="55">DontMap</name></argument>, <argument><name pos:line="905" pos:column="64">DontMap</name></argument>, <argument><name pos:line="905" pos:column="73">TReturn</name></argument>&gt;</argument_list></name><argument_list pos:line="905" pos:column="81">(<argument><expr><name pos:line="905" pos:column="82">cnn</name></expr></argument>, <argument><expr><name pos:line="905" pos:column="87">sql</name></expr></argument>, <argument><expr><name pos:line="905" pos:column="92">map</name></expr></argument>, <argument><expr><name pos:line="905" pos:column="97">param</name> <op:operator pos:line="905" pos:column="103">as</op:operator> <name pos:line="905" pos:column="106">object</name></expr></argument>, <argument><expr><name pos:line="905" pos:column="114">transaction</name></expr></argument>, <argument><expr><name pos:line="905" pos:column="127">buffered</name></expr></argument>, <argument><expr><name pos:line="905" pos:column="137">splitOn</name></expr></argument>, <argument><expr><name pos:line="905" pos:column="146">commandTimeout</name></expr></argument>, <argument><expr><name pos:line="905" pos:column="162">commandType</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="908" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="909" pos:column="9">/// Maps a query to objects</comment>
        <comment type="line" pos:line="910" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="911" pos:column="9">/// &lt;typeparam name="TFirst"&gt;&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="912" pos:column="9">/// &lt;typeparam name="TSecond"&gt;&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="913" pos:column="9">/// &lt;typeparam name="TThird"&gt;&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="914" pos:column="9">/// &lt;typeparam name="TReturn"&gt;&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="915" pos:column="9">/// &lt;param name="cnn"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="916" pos:column="9">/// &lt;param name="sql"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="917" pos:column="9">/// &lt;param name="map"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="918" pos:column="9">/// &lt;param name="param"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="919" pos:column="9">/// &lt;param name="transaction"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="920" pos:column="9">/// &lt;param name="buffered"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="921" pos:column="9">/// &lt;param name="splitOn"&gt;The Field we should split and read the second object from (default: id)&lt;/param&gt;</comment>
        <comment type="line" pos:line="922" pos:column="9">/// &lt;param name="commandTimeout"&gt;Number of seconds before command execution timeout&lt;/param&gt;</comment>
        <comment type="line" pos:line="923" pos:column="9">/// &lt;param name="commandType"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="924" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="925" pos:column="9">public</specifier> <specifier pos:line="925" pos:column="16">static</specifier> <name><name pos:line="925" pos:column="23">IEnumerable</name><argument_list pos:line="925" pos:column="34">&lt;<argument><name pos:line="925" pos:column="35">TReturn</name></argument>&gt;</argument_list></name></type> <name><name pos:line="925" pos:column="44">Query</name><argument_list pos:line="925" pos:column="49">&lt;<argument><name pos:line="925" pos:column="50">TFirst</name></argument>, <argument><name pos:line="925" pos:column="58">TSecond</name></argument>, <argument><name pos:line="925" pos:column="67">TThird</name></argument>, <argument><name pos:line="925" pos:column="75">TReturn</name></argument>&gt;</argument_list></name><parameter_list pos:line="925" pos:column="83">(
<cpp:if pos:line="926" pos:column="1">#<cpp:directive pos:line="926" pos:column="2">if</cpp:directive> <expr><name pos:line="926" pos:column="5">CSHARP30</name></expr></cpp:if>
            <param><decl><type><name pos:line="927" pos:column="13">this</name> <name pos:line="927" pos:column="18">IDbConnection</name></type> <name pos:line="927" pos:column="32">cnn</name></decl></param>, <param><decl><type><name pos:line="927" pos:column="37">string</name></type> <name pos:line="927" pos:column="44">sql</name></decl></param>, <param><decl><type><name><name pos:line="927" pos:column="49">Func</name><argument_list pos:line="927" pos:column="53">&lt;<argument><name pos:line="927" pos:column="54">TFirst</name></argument>, <argument><name pos:line="927" pos:column="62">TSecond</name></argument>, <argument><name pos:line="927" pos:column="71">TThird</name></argument>, <argument><name pos:line="927" pos:column="79">TReturn</name></argument>&gt;</argument_list></name></type> <name pos:line="927" pos:column="88">map</name></decl></param>, <param><decl><type><name pos:line="927" pos:column="93">object</name></type> <name pos:line="927" pos:column="100">param</name></decl></param>, <param><decl><type><name pos:line="927" pos:column="107">IDbTransaction</name></type> <name pos:line="927" pos:column="122">transaction</name></decl></param>, <param><decl><type><name pos:line="927" pos:column="135">bool</name></type> <name pos:line="927" pos:column="140">buffered</name></decl></param>, <param><decl><type><name pos:line="927" pos:column="150">string</name></type> <name pos:line="927" pos:column="157">splitOn</name></decl></param>, <param><decl><type><name pos:line="927" pos:column="166">int</name><type:modifier pos:line="927" pos:column="169">?</type:modifier></type> <name pos:line="927" pos:column="171">commandTimeout</name></decl></param>, <param><decl><type><name pos:line="927" pos:column="187">CommandType</name><type:modifier pos:line="927" pos:column="198">?</type:modifier></type> <name pos:line="927" pos:column="200">commandType</name>
<cpp:else pos:line="928" pos:column="1">#<cpp:directive pos:line="928" pos:column="2">else</cpp:directive></cpp:else>
<name pos:line="929" pos:column="1">this</name> <name pos:line="929" pos:column="6">IDbConnection</name> <name pos:line="929" pos:column="20">cnn</name></decl></param>, <param><decl><type><name pos:line="929" pos:column="25">string</name></type> <name pos:line="929" pos:column="32">sql</name></decl></param>, <param><decl><type><name><name pos:line="929" pos:column="37">Func</name><argument_list pos:line="929" pos:column="41">&lt;<argument><name pos:line="929" pos:column="42">TFirst</name></argument>, <argument><name pos:line="929" pos:column="50">TSecond</name></argument>, <argument><name pos:line="929" pos:column="59">TThird</name></argument>, <argument><name pos:line="929" pos:column="67">TReturn</name></argument>&gt;</argument_list></name></type> <name pos:line="929" pos:column="76">map</name></decl></param>, <param><decl><type><name pos:line="929" pos:column="81">dynamic</name></type> <name pos:line="929" pos:column="89">param</name> <init pos:line="929" pos:column="95">= <expr><name pos:line="929" pos:column="97">null</name></expr></init></decl></param>, <name pos:line="929" pos:column="103">IDbTransaction</name> <name pos:line="929" pos:column="118">transaction</name> <op:operator pos:line="929" pos:column="130">=</op:operator> <name pos:line="929" pos:column="132">null</name>, <name pos:line="929" pos:column="138">bool</name> <name pos:line="929" pos:column="143">buffered</name> <op:operator pos:line="929" pos:column="152">=</op:operator> <lit:literal type="boolean" pos:line="929" pos:column="154">true</lit:literal>, <name pos:line="929" pos:column="160">string</name> <name pos:line="929" pos:column="167">splitOn</name> <op:operator pos:line="929" pos:column="175">=</op:operator> <lit:literal type="string" pos:line="929" pos:column="177">"Id"</lit:literal>, <name pos:line="929" pos:column="183">int</name><type:modifier pos:line="929" pos:column="186">?</type:modifier> <name pos:line="929" pos:column="188">commandTimeout</name> <op:operator pos:line="929" pos:column="203">=</op:operator> <name pos:line="929" pos:column="205">null</name>, <name pos:line="929" pos:column="211">CommandType</name><type:modifier pos:line="929" pos:column="222">?</type:modifier> <name pos:line="929" pos:column="224">commandType</name> <op:operator pos:line="929" pos:column="236">=</op:operator> <name pos:line="929" pos:column="238">null</name>
<cpp:endif pos:line="930" pos:column="1">#<cpp:directive pos:line="930" pos:column="2">endif</cpp:directive></cpp:endif>
)</parameter_list>
        <block pos:line="932" pos:column="9">{
            <return pos:line="933" pos:column="13">return <expr><call><name><name pos:line="933" pos:column="20">MultiMap</name><argument_list pos:line="933" pos:column="28">&lt;<argument><name pos:line="933" pos:column="29">TFirst</name></argument>, <argument><name pos:line="933" pos:column="37">TSecond</name></argument>, <argument><name pos:line="933" pos:column="46">TThird</name></argument>, <argument><name pos:line="933" pos:column="54">DontMap</name></argument>, <argument><name pos:line="933" pos:column="63">DontMap</name></argument>, <argument><name pos:line="933" pos:column="72">TReturn</name></argument>&gt;</argument_list></name><argument_list pos:line="933" pos:column="80">(<argument><expr><name pos:line="933" pos:column="81">cnn</name></expr></argument>, <argument><expr><name pos:line="933" pos:column="86">sql</name></expr></argument>, <argument><expr><name pos:line="933" pos:column="91">map</name></expr></argument>, <argument><expr><name pos:line="933" pos:column="96">param</name> <op:operator pos:line="933" pos:column="102">as</op:operator> <name pos:line="933" pos:column="105">object</name></expr></argument>, <argument><expr><name pos:line="933" pos:column="113">transaction</name></expr></argument>, <argument><expr><name pos:line="933" pos:column="126">buffered</name></expr></argument>, <argument><expr><name pos:line="933" pos:column="136">splitOn</name></expr></argument>, <argument><expr><name pos:line="933" pos:column="145">commandTimeout</name></expr></argument>, <argument><expr><name pos:line="933" pos:column="161">commandType</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="936" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="937" pos:column="9">/// Perform a multi mapping query with 4 input parameters</comment>
        <comment type="line" pos:line="938" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="939" pos:column="9">/// &lt;typeparam name="TFirst"&gt;&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="940" pos:column="9">/// &lt;typeparam name="TSecond"&gt;&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="941" pos:column="9">/// &lt;typeparam name="TThird"&gt;&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="942" pos:column="9">/// &lt;typeparam name="TFourth"&gt;&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="943" pos:column="9">/// &lt;typeparam name="TReturn"&gt;&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="944" pos:column="9">/// &lt;param name="cnn"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="945" pos:column="9">/// &lt;param name="sql"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="946" pos:column="9">/// &lt;param name="map"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="947" pos:column="9">/// &lt;param name="param"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="948" pos:column="9">/// &lt;param name="transaction"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="949" pos:column="9">/// &lt;param name="buffered"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="950" pos:column="9">/// &lt;param name="splitOn"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="951" pos:column="9">/// &lt;param name="commandTimeout"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="952" pos:column="9">/// &lt;param name="commandType"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="953" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="954" pos:column="9">public</specifier> <specifier pos:line="954" pos:column="16">static</specifier> <name><name pos:line="954" pos:column="23">IEnumerable</name><argument_list pos:line="954" pos:column="34">&lt;<argument><name pos:line="954" pos:column="35">TReturn</name></argument>&gt;</argument_list></name></type> <name><name pos:line="954" pos:column="44">Query</name><argument_list pos:line="954" pos:column="49">&lt;<argument><name pos:line="954" pos:column="50">TFirst</name></argument>, <argument><name pos:line="954" pos:column="58">TSecond</name></argument>, <argument><name pos:line="954" pos:column="67">TThird</name></argument>, <argument><name pos:line="954" pos:column="75">TFourth</name></argument>, <argument><name pos:line="954" pos:column="84">TReturn</name></argument>&gt;</argument_list></name><parameter_list pos:line="954" pos:column="92">(
<cpp:if pos:line="955" pos:column="1">#<cpp:directive pos:line="955" pos:column="2">if</cpp:directive> <expr><name pos:line="955" pos:column="5">CSHARP30</name></expr></cpp:if>
            <param><decl><type><name pos:line="956" pos:column="13">this</name> <name pos:line="956" pos:column="18">IDbConnection</name></type> <name pos:line="956" pos:column="32">cnn</name></decl></param>, <param><decl><type><name pos:line="956" pos:column="37">string</name></type> <name pos:line="956" pos:column="44">sql</name></decl></param>, <param><decl><type><name><name pos:line="956" pos:column="49">Func</name><argument_list pos:line="956" pos:column="53">&lt;<argument><name pos:line="956" pos:column="54">TFirst</name></argument>, <argument><name pos:line="956" pos:column="62">TSecond</name></argument>, <argument><name pos:line="956" pos:column="71">TThird</name></argument>, <argument><name pos:line="956" pos:column="79">TFourth</name></argument>, <argument><name pos:line="956" pos:column="88">TReturn</name></argument>&gt;</argument_list></name></type> <name pos:line="956" pos:column="97">map</name></decl></param>, <param><decl><type><name pos:line="956" pos:column="102">object</name></type> <name pos:line="956" pos:column="109">param</name></decl></param>, <param><decl><type><name pos:line="956" pos:column="116">IDbTransaction</name></type> <name pos:line="956" pos:column="131">transaction</name></decl></param>, <param><decl><type><name pos:line="956" pos:column="144">bool</name></type> <name pos:line="956" pos:column="149">buffered</name></decl></param>, <param><decl><type><name pos:line="956" pos:column="159">string</name></type> <name pos:line="956" pos:column="166">splitOn</name></decl></param>, <param><decl><type><name pos:line="956" pos:column="175">int</name><type:modifier pos:line="956" pos:column="178">?</type:modifier></type> <name pos:line="956" pos:column="180">commandTimeout</name></decl></param>, <param><decl><type><name pos:line="956" pos:column="196">CommandType</name><type:modifier pos:line="956" pos:column="207">?</type:modifier></type> <name pos:line="956" pos:column="209">commandType</name>
<cpp:else pos:line="957" pos:column="1">#<cpp:directive pos:line="957" pos:column="2">else</cpp:directive></cpp:else>
<name pos:line="958" pos:column="1">this</name> <name pos:line="958" pos:column="6">IDbConnection</name> <name pos:line="958" pos:column="20">cnn</name></decl></param>, <param><decl><type><name pos:line="958" pos:column="25">string</name></type> <name pos:line="958" pos:column="32">sql</name></decl></param>, <param><decl><type><name><name pos:line="958" pos:column="37">Func</name><argument_list pos:line="958" pos:column="41">&lt;<argument><name pos:line="958" pos:column="42">TFirst</name></argument>, <argument><name pos:line="958" pos:column="50">TSecond</name></argument>, <argument><name pos:line="958" pos:column="59">TThird</name></argument>, <argument><name pos:line="958" pos:column="67">TFourth</name></argument>, <argument><name pos:line="958" pos:column="76">TReturn</name></argument>&gt;</argument_list></name></type> <name pos:line="958" pos:column="85">map</name></decl></param>, <param><decl><type><name pos:line="958" pos:column="90">dynamic</name></type> <name pos:line="958" pos:column="98">param</name> <init pos:line="958" pos:column="104">= <expr><name pos:line="958" pos:column="106">null</name></expr></init></decl></param>, <name pos:line="958" pos:column="112">IDbTransaction</name> <name pos:line="958" pos:column="127">transaction</name> <op:operator pos:line="958" pos:column="139">=</op:operator> <name pos:line="958" pos:column="141">null</name>, <name pos:line="958" pos:column="147">bool</name> <name pos:line="958" pos:column="152">buffered</name> <op:operator pos:line="958" pos:column="161">=</op:operator> <lit:literal type="boolean" pos:line="958" pos:column="163">true</lit:literal>, <name pos:line="958" pos:column="169">string</name> <name pos:line="958" pos:column="176">splitOn</name> <op:operator pos:line="958" pos:column="184">=</op:operator> <lit:literal type="string" pos:line="958" pos:column="186">"Id"</lit:literal>, <name pos:line="958" pos:column="192">int</name><type:modifier pos:line="958" pos:column="195">?</type:modifier> <name pos:line="958" pos:column="197">commandTimeout</name> <op:operator pos:line="958" pos:column="212">=</op:operator> <name pos:line="958" pos:column="214">null</name>, <name pos:line="958" pos:column="220">CommandType</name><type:modifier pos:line="958" pos:column="231">?</type:modifier> <name pos:line="958" pos:column="233">commandType</name> <op:operator pos:line="958" pos:column="245">=</op:operator> <name pos:line="958" pos:column="247">null</name>
<cpp:endif pos:line="959" pos:column="1">#<cpp:directive pos:line="959" pos:column="2">endif</cpp:directive></cpp:endif>
)</parameter_list>
        <block pos:line="961" pos:column="9">{
            <return pos:line="962" pos:column="13">return <expr><call><name><name pos:line="962" pos:column="20">MultiMap</name><argument_list pos:line="962" pos:column="28">&lt;<argument><name pos:line="962" pos:column="29">TFirst</name></argument>, <argument><name pos:line="962" pos:column="37">TSecond</name></argument>, <argument><name pos:line="962" pos:column="46">TThird</name></argument>, <argument><name pos:line="962" pos:column="54">TFourth</name></argument>, <argument><name pos:line="962" pos:column="63">DontMap</name></argument>, <argument><name pos:line="962" pos:column="72">TReturn</name></argument>&gt;</argument_list></name><argument_list pos:line="962" pos:column="80">(<argument><expr><name pos:line="962" pos:column="81">cnn</name></expr></argument>, <argument><expr><name pos:line="962" pos:column="86">sql</name></expr></argument>, <argument><expr><name pos:line="962" pos:column="91">map</name></expr></argument>, <argument><expr><name pos:line="962" pos:column="96">param</name> <op:operator pos:line="962" pos:column="102">as</op:operator> <name pos:line="962" pos:column="105">object</name></expr></argument>, <argument><expr><name pos:line="962" pos:column="113">transaction</name></expr></argument>, <argument><expr><name pos:line="962" pos:column="126">buffered</name></expr></argument>, <argument><expr><name pos:line="962" pos:column="136">splitOn</name></expr></argument>, <argument><expr><name pos:line="962" pos:column="145">commandTimeout</name></expr></argument>, <argument><expr><name pos:line="962" pos:column="161">commandType</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
<cpp:if pos:line="964" pos:column="1">#<cpp:directive pos:line="964" pos:column="2">if</cpp:directive> <expr><op:operator pos:line="964" pos:column="5">!</op:operator><name pos:line="964" pos:column="6">CSHARP30</name></expr></cpp:if>
        <comment type="line" pos:line="965" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="966" pos:column="9">/// Perform a multi mapping query with 5 input parameters</comment>
        <comment type="line" pos:line="967" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="968" pos:column="9">/// &lt;typeparam name="TFirst"&gt;&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="969" pos:column="9">/// &lt;typeparam name="TSecond"&gt;&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="970" pos:column="9">/// &lt;typeparam name="TThird"&gt;&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="971" pos:column="9">/// &lt;typeparam name="TFourth"&gt;&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="972" pos:column="9">/// &lt;typeparam name="TFifth"&gt;&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="973" pos:column="9">/// &lt;typeparam name="TReturn"&gt;&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="974" pos:column="9">/// &lt;param name="cnn"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="975" pos:column="9">/// &lt;param name="sql"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="976" pos:column="9">/// &lt;param name="map"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="977" pos:column="9">/// &lt;param name="param"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="978" pos:column="9">/// &lt;param name="transaction"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="979" pos:column="9">/// &lt;param name="buffered"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="980" pos:column="9">/// &lt;param name="splitOn"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="981" pos:column="9">/// &lt;param name="commandTimeout"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="982" pos:column="9">/// &lt;param name="commandType"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="983" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="984" pos:column="9">public</specifier> <specifier pos:line="984" pos:column="16">static</specifier> <name><name pos:line="984" pos:column="23">IEnumerable</name><argument_list pos:line="984" pos:column="34">&lt;<argument><name pos:line="984" pos:column="35">TReturn</name></argument>&gt;</argument_list></name></type> <name><name pos:line="984" pos:column="44">Query</name><argument_list pos:line="984" pos:column="49">&lt;<argument><name pos:line="984" pos:column="50">TFirst</name></argument>, <argument><name pos:line="984" pos:column="58">TSecond</name></argument>, <argument><name pos:line="984" pos:column="67">TThird</name></argument>, <argument><name pos:line="984" pos:column="75">TFourth</name></argument>, <argument><name pos:line="984" pos:column="84">TFifth</name></argument>, <argument><name pos:line="984" pos:column="92">TReturn</name></argument>&gt;</argument_list></name><parameter_list pos:line="984" pos:column="100">(<param><decl><type><name pos:line="984" pos:column="101">this</name> <name pos:line="984" pos:column="106">IDbConnection</name></type> <name pos:line="984" pos:column="120">cnn</name></decl></param>, <param><decl><type><name pos:line="984" pos:column="125">string</name></type> <name pos:line="984" pos:column="132">sql</name></decl></param>, <param><decl><type><name><name pos:line="984" pos:column="137">Func</name><argument_list pos:line="984" pos:column="141">&lt;<argument><name pos:line="984" pos:column="142">TFirst</name></argument>, <argument><name pos:line="984" pos:column="150">TSecond</name></argument>, <argument><name pos:line="984" pos:column="159">TThird</name></argument>, <argument><name pos:line="984" pos:column="167">TFourth</name></argument>, <argument><name pos:line="984" pos:column="176">TFifth</name></argument>, <argument><name pos:line="984" pos:column="184">TReturn</name></argument>&gt;</argument_list></name></type> <name pos:line="984" pos:column="193">map</name></decl></param>, <param><decl><type><name pos:line="984" pos:column="198">dynamic</name></type> <name pos:line="984" pos:column="206">param</name> <init pos:line="984" pos:column="212">= <expr><name pos:line="984" pos:column="214">null</name></expr></init></decl></param>, <name pos:line="984" pos:column="220">IDbTransaction</name> <name pos:line="984" pos:column="235">transaction</name> <op:operator pos:line="984" pos:column="247">=</op:operator> <name pos:line="984" pos:column="249">null</name>, <name pos:line="984" pos:column="255">bool</name> <name pos:line="984" pos:column="260">buffered</name> <op:operator pos:line="984" pos:column="269">=</op:operator> <lit:literal type="boolean" pos:line="984" pos:column="271">true</lit:literal>, <name pos:line="984" pos:column="277">string</name> <name pos:line="984" pos:column="284">splitOn</name> <op:operator pos:line="984" pos:column="292">=</op:operator> <lit:literal type="string" pos:line="984" pos:column="294">"Id"</lit:literal>, <name pos:line="984" pos:column="300">int</name><type:modifier pos:line="984" pos:column="303">?</type:modifier> <name pos:line="984" pos:column="305">commandTimeout</name> <op:operator pos:line="984" pos:column="320">=</op:operator> <name pos:line="984" pos:column="322">null</name>, <name pos:line="984" pos:column="328">CommandType</name><type:modifier pos:line="984" pos:column="339">?</type:modifier> <name pos:line="984" pos:column="341">commandType</name> <op:operator pos:line="984" pos:column="353">=</op:operator> <name pos:line="984" pos:column="355">null</name>)</parameter_list>
        <block pos:line="985" pos:column="9">{
            <return pos:line="986" pos:column="13">return <expr><call><name><name pos:line="986" pos:column="20">MultiMap</name><argument_list pos:line="986" pos:column="28">&lt;<argument><name pos:line="986" pos:column="29">TFirst</name></argument>, <argument><name pos:line="986" pos:column="37">TSecond</name></argument>, <argument><name pos:line="986" pos:column="46">TThird</name></argument>, <argument><name pos:line="986" pos:column="54">TFourth</name></argument>, <argument><name pos:line="986" pos:column="63">TFifth</name></argument>, <argument><name pos:line="986" pos:column="71">TReturn</name></argument>&gt;</argument_list></name><argument_list pos:line="986" pos:column="79">(<argument><expr><name pos:line="986" pos:column="80">cnn</name></expr></argument>, <argument><expr><name pos:line="986" pos:column="85">sql</name></expr></argument>, <argument><expr><name pos:line="986" pos:column="90">map</name></expr></argument>, <argument><expr><name pos:line="986" pos:column="95">param</name> <op:operator pos:line="986" pos:column="101">as</op:operator> <name pos:line="986" pos:column="104">object</name></expr></argument>, <argument><expr><name pos:line="986" pos:column="112">transaction</name></expr></argument>, <argument><expr><name pos:line="986" pos:column="125">buffered</name></expr></argument>, <argument><expr><name pos:line="986" pos:column="135">splitOn</name></expr></argument>, <argument><expr><name pos:line="986" pos:column="144">commandTimeout</name></expr></argument>, <argument><expr><name pos:line="986" pos:column="160">commandType</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
<cpp:endif pos:line="988" pos:column="1">#<cpp:directive pos:line="988" pos:column="2">endif</cpp:directive></cpp:endif>
        <class><specifier pos:line="989" pos:column="9">partial</specifier> class <name pos:line="989" pos:column="23">DontMap</name> <block pos:line="989" pos:column="31">{ }</block></class>
        <function><type><specifier pos:line="990" pos:column="9">static</specifier> <name><name pos:line="990" pos:column="16">IEnumerable</name><argument_list pos:line="990" pos:column="27">&lt;<argument><name pos:line="990" pos:column="28">TReturn</name></argument>&gt;</argument_list></name></type> <name><name pos:line="990" pos:column="37">MultiMap</name><argument_list pos:line="990" pos:column="45">&lt;<argument><name pos:line="990" pos:column="46">TFirst</name></argument>, <argument><name pos:line="990" pos:column="54">TSecond</name></argument>, <argument><name pos:line="990" pos:column="63">TThird</name></argument>, <argument><name pos:line="990" pos:column="71">TFourth</name></argument>, <argument><name pos:line="990" pos:column="80">TFifth</name></argument>, <argument><name pos:line="990" pos:column="88">TReturn</name></argument>&gt;</argument_list></name><parameter_list pos:line="990" pos:column="96">(
            <param><decl><type><name pos:line="991" pos:column="13">this</name> <name pos:line="991" pos:column="18">IDbConnection</name></type> <name pos:line="991" pos:column="32">cnn</name></decl></param>, <param><decl><type><name pos:line="991" pos:column="37">string</name></type> <name pos:line="991" pos:column="44">sql</name></decl></param>, <param><decl><type><name pos:line="991" pos:column="49">object</name></type> <name pos:line="991" pos:column="56">map</name></decl></param>, <param><decl><type><name pos:line="991" pos:column="61">object</name></type> <name pos:line="991" pos:column="68">param</name></decl></param>, <param><decl><type><name pos:line="991" pos:column="75">IDbTransaction</name></type> <name pos:line="991" pos:column="90">transaction</name></decl></param>, <param><decl><type><name pos:line="991" pos:column="103">bool</name></type> <name pos:line="991" pos:column="108">buffered</name></decl></param>, <param><decl><type><name pos:line="991" pos:column="118">string</name></type> <name pos:line="991" pos:column="125">splitOn</name></decl></param>, <param><decl><type><name pos:line="991" pos:column="134">int</name><type:modifier pos:line="991" pos:column="137">?</type:modifier></type> <name pos:line="991" pos:column="139">commandTimeout</name></decl></param>, <param><decl><type><name pos:line="991" pos:column="155">CommandType</name><type:modifier pos:line="991" pos:column="166">?</type:modifier></type> <name pos:line="991" pos:column="168">commandType</name></decl></param>)</parameter_list>
        <block pos:line="992" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="993" pos:column="13">var</name></type> <name pos:line="993" pos:column="17">results</name> <init pos:line="993" pos:column="25">= <expr><call><name><name pos:line="993" pos:column="27">MultiMapImpl</name><argument_list pos:line="993" pos:column="39">&lt;<argument><name pos:line="993" pos:column="40">TFirst</name></argument>, <argument><name pos:line="993" pos:column="48">TSecond</name></argument>, <argument><name pos:line="993" pos:column="57">TThird</name></argument>, <argument><name pos:line="993" pos:column="65">TFourth</name></argument>, <argument><name pos:line="993" pos:column="74">TFifth</name></argument>, <argument><name pos:line="993" pos:column="82">TReturn</name></argument>&gt;</argument_list></name><argument_list pos:line="993" pos:column="90">(<argument><expr><name pos:line="993" pos:column="91">cnn</name></expr></argument>, <argument><expr><name pos:line="993" pos:column="96">sql</name></expr></argument>, <argument><expr><name pos:line="993" pos:column="101">map</name></expr></argument>, <argument><expr><name pos:line="993" pos:column="106">param</name></expr></argument>, <argument><expr><name pos:line="993" pos:column="113">transaction</name></expr></argument>, <argument><expr><name pos:line="993" pos:column="126">splitOn</name></expr></argument>, <argument><expr><name pos:line="993" pos:column="135">commandTimeout</name></expr></argument>, <argument><expr><name pos:line="993" pos:column="151">commandType</name></expr></argument>, <argument><expr><name pos:line="993" pos:column="164">null</name></expr></argument>, <argument><expr><name pos:line="993" pos:column="170">null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="994" pos:column="13">return <expr><name pos:line="994" pos:column="20">buffered</name> <op:operator pos:line="994" pos:column="29">?</op:operator> <call><name><name pos:line="994" pos:column="31">results</name><op:operator pos:line="994" pos:column="38">.</op:operator><name pos:line="994" pos:column="39">ToList</name></name><argument_list pos:line="994" pos:column="45">()</argument_list></call> <op:operator pos:line="994" pos:column="48">:</op:operator> <name pos:line="994" pos:column="50">results</name></expr>;</return>
        }</block></function>


        <function><type><specifier pos:line="998" pos:column="9">static</specifier> <name><name pos:line="998" pos:column="16">IEnumerable</name><argument_list pos:line="998" pos:column="27">&lt;<argument><name pos:line="998" pos:column="28">TReturn</name></argument>&gt;</argument_list></name></type> <name><name pos:line="998" pos:column="37">MultiMapImpl</name><argument_list pos:line="998" pos:column="49">&lt;<argument><name pos:line="998" pos:column="50">TFirst</name></argument>, <argument><name pos:line="998" pos:column="58">TSecond</name></argument>, <argument><name pos:line="998" pos:column="67">TThird</name></argument>, <argument><name pos:line="998" pos:column="75">TFourth</name></argument>, <argument><name pos:line="998" pos:column="84">TFifth</name></argument>, <argument><name pos:line="998" pos:column="92">TReturn</name></argument>&gt;</argument_list></name><parameter_list pos:line="998" pos:column="100">(<param><decl><type><name pos:line="998" pos:column="101">this</name> <name pos:line="998" pos:column="106">IDbConnection</name></type> <name pos:line="998" pos:column="120">cnn</name></decl></param>, <param><decl><type><name pos:line="998" pos:column="125">string</name></type> <name pos:line="998" pos:column="132">sql</name></decl></param>, <param><decl><type><name pos:line="998" pos:column="137">object</name></type> <name pos:line="998" pos:column="144">map</name></decl></param>, <param><decl><type><name pos:line="998" pos:column="149">object</name></type> <name pos:line="998" pos:column="156">param</name></decl></param>, <param><decl><type><name pos:line="998" pos:column="163">IDbTransaction</name></type> <name pos:line="998" pos:column="178">transaction</name></decl></param>, <param><decl><type><name pos:line="998" pos:column="191">string</name></type> <name pos:line="998" pos:column="198">splitOn</name></decl></param>, <param><decl><type><name pos:line="998" pos:column="207">int</name><type:modifier pos:line="998" pos:column="210">?</type:modifier></type> <name pos:line="998" pos:column="212">commandTimeout</name></decl></param>, <param><decl><type><name pos:line="998" pos:column="228">CommandType</name><type:modifier pos:line="998" pos:column="239">?</type:modifier></type> <name pos:line="998" pos:column="241">commandType</name></decl></param>, <param><decl><type><name pos:line="998" pos:column="254">IDataReader</name></type> <name pos:line="998" pos:column="266">reader</name></decl></param>, <param><decl><type><name pos:line="998" pos:column="274">Identity</name></type> <name pos:line="998" pos:column="283">identity</name></decl></param>)</parameter_list>
        <block pos:line="999" pos:column="9">{
            <expr_stmt><expr><name pos:line="1000" pos:column="13">identity</name> <op:operator pos:line="1000" pos:column="22">=</op:operator> <name pos:line="1000" pos:column="24">identity</name> <op:operator pos:line="1000" pos:column="33">??</op:operator> <op:operator pos:line="1000" pos:column="36">new</op:operator> <call><name pos:line="1000" pos:column="40">Identity</name><argument_list pos:line="1000" pos:column="48">(<argument><expr><name pos:line="1000" pos:column="49">sql</name></expr></argument>, <argument><expr><name pos:line="1000" pos:column="54">commandType</name></expr></argument>, <argument><expr><name pos:line="1000" pos:column="67">cnn</name></expr></argument>, <argument><expr><call><name pos:line="1000" pos:column="72">typeof</name><argument_list pos:line="1000" pos:column="78">(<argument><expr><name pos:line="1000" pos:column="79">TFirst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="1000" pos:column="88">(</op:operator><name pos:line="1000" pos:column="89">object</name><op:operator pos:line="1000" pos:column="95">)</op:operator><name pos:line="1000" pos:column="96">param</name> <op:operator pos:line="1000" pos:column="102">==</op:operator> <name pos:line="1000" pos:column="105">null</name> <op:operator pos:line="1000" pos:column="110">?</op:operator> <name pos:line="1000" pos:column="112">null</name> <op:operator pos:line="1000" pos:column="117">:</op:operator> <op:operator pos:line="1000" pos:column="119">(</op:operator><op:operator pos:line="1000" pos:column="120">(</op:operator><name pos:line="1000" pos:column="121">object</name><op:operator pos:line="1000" pos:column="127">)</op:operator><name pos:line="1000" pos:column="128">param</name><op:operator pos:line="1000" pos:column="133">)</op:operator><op:operator pos:line="1000" pos:column="134">.</op:operator><call><name pos:line="1000" pos:column="135">GetType</name><argument_list pos:line="1000" pos:column="142">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="1000" pos:column="146">new</op:operator><index pos:line="1000" pos:column="149">[]</index> <block pos:line="1000" pos:column="152">{ <expr><call><name pos:line="1000" pos:column="154">typeof</name><argument_list pos:line="1000" pos:column="160">(<argument><expr><name pos:line="1000" pos:column="161">TFirst</name></expr></argument>)</argument_list></call></expr><op:operator pos:line="1000" pos:column="168">,</op:operator> <expr><call><name pos:line="1000" pos:column="170">typeof</name><argument_list pos:line="1000" pos:column="176">(<argument><expr><name pos:line="1000" pos:column="177">TSecond</name></expr></argument>)</argument_list></call></expr><op:operator pos:line="1000" pos:column="185">,</op:operator> <expr><call><name pos:line="1000" pos:column="187">typeof</name><argument_list pos:line="1000" pos:column="193">(<argument><expr><name pos:line="1000" pos:column="194">TThird</name></expr></argument>)</argument_list></call></expr><op:operator pos:line="1000" pos:column="201">,</op:operator> <expr><call><name pos:line="1000" pos:column="203">typeof</name><argument_list pos:line="1000" pos:column="209">(<argument><expr><name pos:line="1000" pos:column="210">TFourth</name></expr></argument>)</argument_list></call></expr><op:operator pos:line="1000" pos:column="218">,</op:operator> <expr><call><name pos:line="1000" pos:column="220">typeof</name><argument_list pos:line="1000" pos:column="226">(<argument><expr><name pos:line="1000" pos:column="227">TFifth</name></expr></argument>)</argument_list></call></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="1001" pos:column="13">CacheInfo</name></type> <name pos:line="1001" pos:column="23">cinfo</name> <init pos:line="1001" pos:column="29">= <expr><call><name pos:line="1001" pos:column="31">GetCacheInfo</name><argument_list pos:line="1001" pos:column="43">(<argument><expr><name pos:line="1001" pos:column="44">identity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1003" pos:column="13">IDbCommand</name></type> <name pos:line="1003" pos:column="24">ownedCommand</name> <init pos:line="1003" pos:column="37">= <expr><name pos:line="1003" pos:column="39">null</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1004" pos:column="13">IDataReader</name></type> <name pos:line="1004" pos:column="25">ownedReader</name> <init pos:line="1004" pos:column="37">= <expr><name pos:line="1004" pos:column="39">null</name></expr></init></decl>;</decl_stmt>

            <try pos:line="1006" pos:column="13">try
            <block pos:line="1007" pos:column="13">{
                <if pos:line="1008" pos:column="17">if <condition pos:line="1008" pos:column="20">(<expr><name pos:line="1008" pos:column="21">reader</name> <op:operator pos:line="1008" pos:column="28">==</op:operator> <name pos:line="1008" pos:column="31">null</name></expr>)</condition><then pos:line="1008" pos:column="36">
                <block pos:line="1009" pos:column="17">{
                    <expr_stmt><expr><name pos:line="1010" pos:column="21">ownedCommand</name> <op:operator pos:line="1010" pos:column="34">=</op:operator> <call><name pos:line="1010" pos:column="36">SetupCommand</name><argument_list pos:line="1010" pos:column="48">(<argument><expr><name pos:line="1010" pos:column="49">cnn</name></expr></argument>, <argument><expr><name pos:line="1010" pos:column="54">transaction</name></expr></argument>, <argument><expr><name pos:line="1010" pos:column="67">sql</name></expr></argument>, <argument><expr><name><name pos:line="1010" pos:column="72">cinfo</name><op:operator pos:line="1010" pos:column="77">.</op:operator><name pos:line="1010" pos:column="78">ParamReader</name></name></expr></argument>, <argument><expr><op:operator pos:line="1010" pos:column="91">(</op:operator><name pos:line="1010" pos:column="92">object</name><op:operator pos:line="1010" pos:column="98">)</op:operator><name pos:line="1010" pos:column="99">param</name></expr></argument>, <argument><expr><name pos:line="1010" pos:column="106">commandTimeout</name></expr></argument>, <argument><expr><name pos:line="1010" pos:column="122">commandType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="1011" pos:column="21">ownedReader</name> <op:operator pos:line="1011" pos:column="33">=</op:operator> <call><name><name pos:line="1011" pos:column="35">ownedCommand</name><op:operator pos:line="1011" pos:column="47">.</op:operator><name pos:line="1011" pos:column="48">ExecuteReader</name></name><argument_list pos:line="1011" pos:column="61">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="1012" pos:column="21">reader</name> <op:operator pos:line="1012" pos:column="28">=</op:operator> <name pos:line="1012" pos:column="30">ownedReader</name></expr>;</expr_stmt>
                }</block></then></if>
                <decl_stmt><decl><type><name pos:line="1014" pos:column="17">DeserializerState</name></type> <name pos:line="1014" pos:column="35">deserializer</name> <init pos:line="1014" pos:column="48">= <expr><call><name pos:line="1014" pos:column="50">default</name><argument_list pos:line="1014" pos:column="57">(<argument><expr><name pos:line="1014" pos:column="58">DeserializerState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name pos:line="1015" pos:column="17">Func</name><argument_list pos:line="1015" pos:column="21">&lt;<argument><name pos:line="1015" pos:column="22">IDataReader</name></argument>, <argument><name pos:line="1015" pos:column="35">object</name></argument>&gt;</argument_list></name><index pos:line="1015" pos:column="42">[]</index></type> <name pos:line="1015" pos:column="45">otherDeserializers</name> <init pos:line="1015" pos:column="64">= <expr><name pos:line="1015" pos:column="66">null</name></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name pos:line="1017" pos:column="17">int</name></type> <name pos:line="1017" pos:column="21">hash</name> <init pos:line="1017" pos:column="26">= <expr><call><name pos:line="1017" pos:column="28">GetColumnHash</name><argument_list pos:line="1017" pos:column="41">(<argument><expr><name pos:line="1017" pos:column="42">reader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="1018" pos:column="17">if <condition pos:line="1018" pos:column="20">(<expr><op:operator pos:line="1018" pos:column="21">(</op:operator><name pos:line="1018" pos:column="22">deserializer</name> <op:operator pos:line="1018" pos:column="35">=</op:operator> <name><name pos:line="1018" pos:column="37">cinfo</name><op:operator pos:line="1018" pos:column="42">.</op:operator><name pos:line="1018" pos:column="43">Deserializer</name></name><op:operator pos:line="1018" pos:column="55">)</op:operator><op:operator pos:line="1018" pos:column="56">.</op:operator><name pos:line="1018" pos:column="57">Func</name> <op:operator pos:line="1018" pos:column="62">==</op:operator> <name pos:line="1018" pos:column="65">null</name> <op:operator pos:line="1018" pos:column="70">||</op:operator> <op:operator pos:line="1018" pos:column="73">(</op:operator><name pos:line="1018" pos:column="74">otherDeserializers</name> <op:operator pos:line="1018" pos:column="93">=</op:operator> <name><name pos:line="1018" pos:column="95">cinfo</name><op:operator pos:line="1018" pos:column="100">.</op:operator><name pos:line="1018" pos:column="101">OtherDeserializers</name></name><op:operator pos:line="1018" pos:column="119">)</op:operator> <op:operator pos:line="1018" pos:column="121">==</op:operator> <name pos:line="1018" pos:column="124">null</name> <op:operator pos:line="1018" pos:column="129">||</op:operator> <name pos:line="1018" pos:column="132">hash</name> <op:operator pos:line="1018" pos:column="137">!=</op:operator> <name><name pos:line="1018" pos:column="140">deserializer</name><op:operator pos:line="1018" pos:column="152">.</op:operator><name pos:line="1018" pos:column="153">Hash</name></name></expr>)</condition><then pos:line="1018" pos:column="158">
                <block pos:line="1019" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="1020" pos:column="21">var</name></type> <name pos:line="1020" pos:column="25">deserializers</name> <init pos:line="1020" pos:column="39">= <expr><call><name pos:line="1020" pos:column="41">GenerateDeserializers</name><argument_list pos:line="1020" pos:column="62">(<argument><expr><op:operator pos:line="1020" pos:column="63">new</op:operator> <name><name pos:line="1020" pos:column="67">Type</name><index pos:line="1020" pos:column="71">[]</index></name> <block pos:line="1020" pos:column="74">{ <expr><call><name pos:line="1020" pos:column="76">typeof</name><argument_list pos:line="1020" pos:column="82">(<argument><expr><name pos:line="1020" pos:column="83">TFirst</name></expr></argument>)</argument_list></call></expr>, <expr><call><name pos:line="1020" pos:column="92">typeof</name><argument_list pos:line="1020" pos:column="98">(<argument><expr><name pos:line="1020" pos:column="99">TSecond</name></expr></argument>)</argument_list></call></expr>, <expr><call><name pos:line="1020" pos:column="109">typeof</name><argument_list pos:line="1020" pos:column="115">(<argument><expr><name pos:line="1020" pos:column="116">TThird</name></expr></argument>)</argument_list></call></expr>, <expr><call><name pos:line="1020" pos:column="125">typeof</name><argument_list pos:line="1020" pos:column="131">(<argument><expr><name pos:line="1020" pos:column="132">TFourth</name></expr></argument>)</argument_list></call></expr>, <expr><call><name pos:line="1020" pos:column="142">typeof</name><argument_list pos:line="1020" pos:column="148">(<argument><expr><name pos:line="1020" pos:column="149">TFifth</name></expr></argument>)</argument_list></call></expr> }</block></expr></argument>, <argument><expr><name pos:line="1020" pos:column="160">splitOn</name></expr></argument>, <argument><expr><name pos:line="1020" pos:column="169">reader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name pos:line="1021" pos:column="21">deserializer</name> <op:operator pos:line="1021" pos:column="34">=</op:operator> <name><name pos:line="1021" pos:column="36">cinfo</name><op:operator pos:line="1021" pos:column="41">.</op:operator><name pos:line="1021" pos:column="42">Deserializer</name></name> <op:operator pos:line="1021" pos:column="55">=</op:operator> <op:operator pos:line="1021" pos:column="57">new</op:operator> <call><name pos:line="1021" pos:column="61">DeserializerState</name><argument_list pos:line="1021" pos:column="78">(<argument><expr><name pos:line="1021" pos:column="79">hash</name></expr></argument>, <argument><expr><name><name pos:line="1021" pos:column="85">deserializers</name><index pos:line="1021" pos:column="98">[<expr><lit:literal type="number" pos:line="1021" pos:column="99">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="1022" pos:column="21">otherDeserializers</name> <op:operator pos:line="1022" pos:column="40">=</op:operator> <name><name pos:line="1022" pos:column="42">cinfo</name><op:operator pos:line="1022" pos:column="47">.</op:operator><name pos:line="1022" pos:column="48">OtherDeserializers</name></name> <op:operator pos:line="1022" pos:column="67">=</op:operator> <call><name><name pos:line="1022" pos:column="69">deserializers</name><op:operator pos:line="1022" pos:column="82">.</op:operator><name pos:line="1022" pos:column="83">Skip</name></name><argument_list pos:line="1022" pos:column="87">(<argument><expr><lit:literal type="number" pos:line="1022" pos:column="88">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1022" pos:column="90">.</op:operator><call><name pos:line="1022" pos:column="91">ToArray</name><argument_list pos:line="1022" pos:column="98">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="1023" pos:column="21">SetQueryCache</name><argument_list pos:line="1023" pos:column="34">(<argument><expr><name pos:line="1023" pos:column="35">identity</name></expr></argument>, <argument><expr><name pos:line="1023" pos:column="45">cinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <decl_stmt><decl><type><name><name pos:line="1026" pos:column="17">Func</name><argument_list pos:line="1026" pos:column="21">&lt;<argument><name pos:line="1026" pos:column="22">IDataReader</name></argument>, <argument><name pos:line="1026" pos:column="35">TReturn</name></argument>&gt;</argument_list></name></type> <name pos:line="1026" pos:column="44">mapIt</name> <init pos:line="1026" pos:column="50">= <expr><call><name><name pos:line="1026" pos:column="52">GenerateMapper</name><argument_list pos:line="1026" pos:column="66">&lt;<argument><name pos:line="1026" pos:column="67">TFirst</name></argument>, <argument><name pos:line="1026" pos:column="75">TSecond</name></argument>, <argument><name pos:line="1026" pos:column="84">TThird</name></argument>, <argument><name pos:line="1026" pos:column="92">TFourth</name></argument>, <argument><name pos:line="1026" pos:column="101">TFifth</name></argument>, <argument><name pos:line="1026" pos:column="109">TReturn</name></argument>&gt;</argument_list></name><argument_list pos:line="1026" pos:column="117">(<argument><expr><name><name pos:line="1026" pos:column="118">deserializer</name><op:operator pos:line="1026" pos:column="130">.</op:operator><name pos:line="1026" pos:column="131">Func</name></name></expr></argument>, <argument><expr><name pos:line="1026" pos:column="137">otherDeserializers</name></expr></argument>, <argument><expr><name pos:line="1026" pos:column="157">map</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if pos:line="1028" pos:column="17">if <condition pos:line="1028" pos:column="20">(<expr><name pos:line="1028" pos:column="21">mapIt</name> <op:operator pos:line="1028" pos:column="27">!=</op:operator> <name pos:line="1028" pos:column="30">null</name></expr>)</condition><then pos:line="1028" pos:column="35">
                <block pos:line="1029" pos:column="17">{
                    <while pos:line="1030" pos:column="21">while <condition pos:line="1030" pos:column="27">(<expr><call><name><name pos:line="1030" pos:column="28">reader</name><op:operator pos:line="1030" pos:column="34">.</op:operator><name pos:line="1030" pos:column="35">Read</name></name><argument_list pos:line="1030" pos:column="39">()</argument_list></call></expr>)</condition>
                    <block pos:line="1031" pos:column="21">{
                        <return><specifier pos:line="1032" pos:column="25">yield</specifier> return <expr><call><name pos:line="1032" pos:column="38">mapIt</name><argument_list pos:line="1032" pos:column="43">(<argument><expr><name pos:line="1032" pos:column="44">reader</name></expr></argument>)</argument_list></call></expr>;</return>
                    }</block></while>
                }</block></then></if>
            }</block>
            <finally pos:line="1036" pos:column="13">finally
            <block pos:line="1037" pos:column="13">{
                <try pos:line="1038" pos:column="17">try
                <block pos:line="1039" pos:column="17">{
                    <if pos:line="1040" pos:column="21">if <condition pos:line="1040" pos:column="24">(<expr><name pos:line="1040" pos:column="25">ownedReader</name> <op:operator pos:line="1040" pos:column="37">!=</op:operator> <name pos:line="1040" pos:column="40">null</name></expr>)</condition><then pos:line="1040" pos:column="45">
                    <block pos:line="1041" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="1042" pos:column="25">ownedReader</name><op:operator pos:line="1042" pos:column="36">.</op:operator><name pos:line="1042" pos:column="37">Dispose</name></name><argument_list pos:line="1042" pos:column="44">()</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block>
                <finally pos:line="1045" pos:column="17">finally
                <block pos:line="1046" pos:column="17">{
                    <if pos:line="1047" pos:column="21">if <condition pos:line="1047" pos:column="24">(<expr><name pos:line="1047" pos:column="25">ownedCommand</name> <op:operator pos:line="1047" pos:column="38">!=</op:operator> <name pos:line="1047" pos:column="41">null</name></expr>)</condition><then pos:line="1047" pos:column="46">
                    <block pos:line="1048" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="1049" pos:column="25">ownedCommand</name><op:operator pos:line="1049" pos:column="37">.</op:operator><name pos:line="1049" pos:column="38">Dispose</name></name><argument_list pos:line="1049" pos:column="45">()</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></finally></try>
            }</block></finally></try>
        }</block></function>

        <function><type><specifier pos:line="1055" pos:column="9">private</specifier> <specifier pos:line="1055" pos:column="17">static</specifier> <name><name pos:line="1055" pos:column="24">Func</name><argument_list pos:line="1055" pos:column="28">&lt;<argument><name pos:line="1055" pos:column="29">IDataReader</name></argument>, <argument><name pos:line="1055" pos:column="42">TReturn</name></argument>&gt;</argument_list></name></type> <name><name pos:line="1055" pos:column="51">GenerateMapper</name><argument_list pos:line="1055" pos:column="65">&lt;<argument><name pos:line="1055" pos:column="66">TFirst</name></argument>, <argument><name pos:line="1055" pos:column="74">TSecond</name></argument>, <argument><name pos:line="1055" pos:column="83">TThird</name></argument>, <argument><name pos:line="1055" pos:column="91">TFourth</name></argument>, <argument><name pos:line="1055" pos:column="100">TFifth</name></argument>, <argument><name pos:line="1055" pos:column="108">TReturn</name></argument>&gt;</argument_list></name><parameter_list pos:line="1055" pos:column="116">(<param><decl><type><name><name pos:line="1055" pos:column="117">Func</name><argument_list pos:line="1055" pos:column="121">&lt;<argument><name pos:line="1055" pos:column="122">IDataReader</name></argument>, <argument><name pos:line="1055" pos:column="135">object</name></argument>&gt;</argument_list></name></type> <name pos:line="1055" pos:column="143">deserializer</name></decl></param>, <param><decl><type><name><name><name pos:line="1055" pos:column="157">Func</name><argument_list pos:line="1055" pos:column="161">&lt;<argument><name pos:line="1055" pos:column="162">IDataReader</name></argument>, <argument><name pos:line="1055" pos:column="175">object</name></argument>&gt;</argument_list></name><index pos:line="1055" pos:column="182">[]</index></name></type> <name pos:line="1055" pos:column="185">otherDeserializers</name></decl></param>, <param><decl><type><name pos:line="1055" pos:column="205">object</name></type> <name pos:line="1055" pos:column="212">map</name></decl></param>)</parameter_list>
        <block pos:line="1056" pos:column="9">{
            <switch pos:line="1057" pos:column="13">switch <condition pos:line="1057" pos:column="20">(<expr><name><name pos:line="1057" pos:column="21">otherDeserializers</name><op:operator pos:line="1057" pos:column="39">.</op:operator><name pos:line="1057" pos:column="40">Length</name></name></expr>)</condition>
            <block pos:line="1058" pos:column="13">{
                <case pos:line="1059" pos:column="17">case <expr><lit:literal type="number" pos:line="1059" pos:column="22">1</lit:literal></expr>:
                    <return pos:line="1060" pos:column="21">return <expr><lambda><name pos:line="1060" pos:column="28">r</name> <op:operator pos:line="1060" pos:column="30">=&gt;</op:operator> <op:operator pos:line="1060" pos:column="33">(</op:operator><op:operator pos:line="1060" pos:column="34">(</op:operator><name><name pos:line="1060" pos:column="35">Func</name><argument_list pos:line="1060" pos:column="39">&lt;<argument><name pos:line="1060" pos:column="40">TFirst</name></argument>, <argument><name pos:line="1060" pos:column="48">TSecond</name></argument>, <argument><name pos:line="1060" pos:column="57">TReturn</name></argument>&gt;</argument_list></name><op:operator pos:line="1060" pos:column="65">)</op:operator><name pos:line="1060" pos:column="66">map</name><op:operator pos:line="1060" pos:column="69">)</op:operator><op:operator pos:line="1060" pos:column="70">(</op:operator><op:operator pos:line="1060" pos:column="71">(</op:operator><name pos:line="1060" pos:column="72">TFirst</name><op:operator pos:line="1060" pos:column="78">)</op:operator><call><name pos:line="1060" pos:column="79">deserializer</name><argument_list pos:line="1060" pos:column="91">(<argument><expr><name pos:line="1060" pos:column="92">r</name></expr></argument>)</argument_list></call><op:operator pos:line="1060" pos:column="94">,</op:operator> <op:operator pos:line="1060" pos:column="96">(</op:operator><name pos:line="1060" pos:column="97">TSecond</name><op:operator pos:line="1060" pos:column="104">)</op:operator><name><name pos:line="1060" pos:column="105">otherDeserializers</name><index pos:line="1060" pos:column="123">[<expr><lit:literal type="number" pos:line="1060" pos:column="124">0</lit:literal></expr>]</index></name><op:operator pos:line="1060" pos:column="126">(</op:operator><name pos:line="1060" pos:column="127">r</name><op:operator pos:line="1060" pos:column="128">)</op:operator><op:operator pos:line="1060" pos:column="129">)</op:operator></lambda></expr>;</return>
                </case><case pos:line="1061" pos:column="17">case <expr><lit:literal type="number" pos:line="1061" pos:column="22">2</lit:literal></expr>:
                    <return pos:line="1062" pos:column="21">return <expr><lambda><name pos:line="1062" pos:column="28">r</name> <op:operator pos:line="1062" pos:column="30">=&gt;</op:operator> <op:operator pos:line="1062" pos:column="33">(</op:operator><op:operator pos:line="1062" pos:column="34">(</op:operator><name><name pos:line="1062" pos:column="35">Func</name><argument_list pos:line="1062" pos:column="39">&lt;<argument><name pos:line="1062" pos:column="40">TFirst</name></argument>, <argument><name pos:line="1062" pos:column="48">TSecond</name></argument>, <argument><name pos:line="1062" pos:column="57">TThird</name></argument>, <argument><name pos:line="1062" pos:column="65">TReturn</name></argument>&gt;</argument_list></name><op:operator pos:line="1062" pos:column="73">)</op:operator><name pos:line="1062" pos:column="74">map</name><op:operator pos:line="1062" pos:column="77">)</op:operator><op:operator pos:line="1062" pos:column="78">(</op:operator><op:operator pos:line="1062" pos:column="79">(</op:operator><name pos:line="1062" pos:column="80">TFirst</name><op:operator pos:line="1062" pos:column="86">)</op:operator><call><name pos:line="1062" pos:column="87">deserializer</name><argument_list pos:line="1062" pos:column="99">(<argument><expr><name pos:line="1062" pos:column="100">r</name></expr></argument>)</argument_list></call><op:operator pos:line="1062" pos:column="102">,</op:operator> <op:operator pos:line="1062" pos:column="104">(</op:operator><name pos:line="1062" pos:column="105">TSecond</name><op:operator pos:line="1062" pos:column="112">)</op:operator><name><name pos:line="1062" pos:column="113">otherDeserializers</name><index pos:line="1062" pos:column="131">[<expr><lit:literal type="number" pos:line="1062" pos:column="132">0</lit:literal></expr>]</index></name><op:operator pos:line="1062" pos:column="134">(</op:operator><name pos:line="1062" pos:column="135">r</name><op:operator pos:line="1062" pos:column="136">)</op:operator><op:operator pos:line="1062" pos:column="137">,</op:operator> <op:operator pos:line="1062" pos:column="139">(</op:operator><name pos:line="1062" pos:column="140">TThird</name><op:operator pos:line="1062" pos:column="146">)</op:operator><name><name pos:line="1062" pos:column="147">otherDeserializers</name><index pos:line="1062" pos:column="165">[<expr><lit:literal type="number" pos:line="1062" pos:column="166">1</lit:literal></expr>]</index></name><op:operator pos:line="1062" pos:column="168">(</op:operator><name pos:line="1062" pos:column="169">r</name><op:operator pos:line="1062" pos:column="170">)</op:operator><op:operator pos:line="1062" pos:column="171">)</op:operator></lambda></expr>;</return>
                </case><case pos:line="1063" pos:column="17">case <expr><lit:literal type="number" pos:line="1063" pos:column="22">3</lit:literal></expr>:
                    <return pos:line="1064" pos:column="21">return <expr><lambda><name pos:line="1064" pos:column="28">r</name> <op:operator pos:line="1064" pos:column="30">=&gt;</op:operator> <op:operator pos:line="1064" pos:column="33">(</op:operator><op:operator pos:line="1064" pos:column="34">(</op:operator><name><name pos:line="1064" pos:column="35">Func</name><argument_list pos:line="1064" pos:column="39">&lt;<argument><name pos:line="1064" pos:column="40">TFirst</name></argument>, <argument><name pos:line="1064" pos:column="48">TSecond</name></argument>, <argument><name pos:line="1064" pos:column="57">TThird</name></argument>, <argument><name pos:line="1064" pos:column="65">TFourth</name></argument>, <argument><name pos:line="1064" pos:column="74">TReturn</name></argument>&gt;</argument_list></name><op:operator pos:line="1064" pos:column="82">)</op:operator><name pos:line="1064" pos:column="83">map</name><op:operator pos:line="1064" pos:column="86">)</op:operator><op:operator pos:line="1064" pos:column="87">(</op:operator><op:operator pos:line="1064" pos:column="88">(</op:operator><name pos:line="1064" pos:column="89">TFirst</name><op:operator pos:line="1064" pos:column="95">)</op:operator><call><name pos:line="1064" pos:column="96">deserializer</name><argument_list pos:line="1064" pos:column="108">(<argument><expr><name pos:line="1064" pos:column="109">r</name></expr></argument>)</argument_list></call><op:operator pos:line="1064" pos:column="111">,</op:operator> <op:operator pos:line="1064" pos:column="113">(</op:operator><name pos:line="1064" pos:column="114">TSecond</name><op:operator pos:line="1064" pos:column="121">)</op:operator><name><name pos:line="1064" pos:column="122">otherDeserializers</name><index pos:line="1064" pos:column="140">[<expr><lit:literal type="number" pos:line="1064" pos:column="141">0</lit:literal></expr>]</index></name><op:operator pos:line="1064" pos:column="143">(</op:operator><name pos:line="1064" pos:column="144">r</name><op:operator pos:line="1064" pos:column="145">)</op:operator><op:operator pos:line="1064" pos:column="146">,</op:operator> <op:operator pos:line="1064" pos:column="148">(</op:operator><name pos:line="1064" pos:column="149">TThird</name><op:operator pos:line="1064" pos:column="155">)</op:operator><name><name pos:line="1064" pos:column="156">otherDeserializers</name><index pos:line="1064" pos:column="174">[<expr><lit:literal type="number" pos:line="1064" pos:column="175">1</lit:literal></expr>]</index></name><op:operator pos:line="1064" pos:column="177">(</op:operator><name pos:line="1064" pos:column="178">r</name><op:operator pos:line="1064" pos:column="179">)</op:operator><op:operator pos:line="1064" pos:column="180">,</op:operator> <op:operator pos:line="1064" pos:column="182">(</op:operator><name pos:line="1064" pos:column="183">TFourth</name><op:operator pos:line="1064" pos:column="190">)</op:operator><name><name pos:line="1064" pos:column="191">otherDeserializers</name><index pos:line="1064" pos:column="209">[<expr><lit:literal type="number" pos:line="1064" pos:column="210">2</lit:literal></expr>]</index></name><op:operator pos:line="1064" pos:column="212">(</op:operator><name pos:line="1064" pos:column="213">r</name><op:operator pos:line="1064" pos:column="214">)</op:operator><op:operator pos:line="1064" pos:column="215">)</op:operator></lambda></expr>;</return>
<cpp:if pos:line="1065" pos:column="1">#<cpp:directive pos:line="1065" pos:column="2">if</cpp:directive> <expr><op:operator pos:line="1065" pos:column="5">!</op:operator><name pos:line="1065" pos:column="6">CSHARP30</name></expr></cpp:if>
                </case><case pos:line="1066" pos:column="17">case <expr><lit:literal type="number" pos:line="1066" pos:column="22">4</lit:literal></expr>:
                    <return pos:line="1067" pos:column="21">return <expr><lambda><name pos:line="1067" pos:column="28">r</name> <op:operator pos:line="1067" pos:column="30">=&gt;</op:operator> <op:operator pos:line="1067" pos:column="33">(</op:operator><op:operator pos:line="1067" pos:column="34">(</op:operator><name><name pos:line="1067" pos:column="35">Func</name><argument_list pos:line="1067" pos:column="39">&lt;<argument><name pos:line="1067" pos:column="40">TFirst</name></argument>, <argument><name pos:line="1067" pos:column="48">TSecond</name></argument>, <argument><name pos:line="1067" pos:column="57">TThird</name></argument>, <argument><name pos:line="1067" pos:column="65">TFourth</name></argument>, <argument><name pos:line="1067" pos:column="74">TFifth</name></argument>, <argument><name pos:line="1067" pos:column="82">TReturn</name></argument>&gt;</argument_list></name><op:operator pos:line="1067" pos:column="90">)</op:operator><name pos:line="1067" pos:column="91">map</name><op:operator pos:line="1067" pos:column="94">)</op:operator><op:operator pos:line="1067" pos:column="95">(</op:operator><op:operator pos:line="1067" pos:column="96">(</op:operator><name pos:line="1067" pos:column="97">TFirst</name><op:operator pos:line="1067" pos:column="103">)</op:operator><call><name pos:line="1067" pos:column="104">deserializer</name><argument_list pos:line="1067" pos:column="116">(<argument><expr><name pos:line="1067" pos:column="117">r</name></expr></argument>)</argument_list></call><op:operator pos:line="1067" pos:column="119">,</op:operator> <op:operator pos:line="1067" pos:column="121">(</op:operator><name pos:line="1067" pos:column="122">TSecond</name><op:operator pos:line="1067" pos:column="129">)</op:operator><name><name pos:line="1067" pos:column="130">otherDeserializers</name><index pos:line="1067" pos:column="148">[<expr><lit:literal type="number" pos:line="1067" pos:column="149">0</lit:literal></expr>]</index></name><op:operator pos:line="1067" pos:column="151">(</op:operator><name pos:line="1067" pos:column="152">r</name><op:operator pos:line="1067" pos:column="153">)</op:operator><op:operator pos:line="1067" pos:column="154">,</op:operator> <op:operator pos:line="1067" pos:column="156">(</op:operator><name pos:line="1067" pos:column="157">TThird</name><op:operator pos:line="1067" pos:column="163">)</op:operator><name><name pos:line="1067" pos:column="164">otherDeserializers</name><index pos:line="1067" pos:column="182">[<expr><lit:literal type="number" pos:line="1067" pos:column="183">1</lit:literal></expr>]</index></name><op:operator pos:line="1067" pos:column="185">(</op:operator><name pos:line="1067" pos:column="186">r</name><op:operator pos:line="1067" pos:column="187">)</op:operator><op:operator pos:line="1067" pos:column="188">,</op:operator> <op:operator pos:line="1067" pos:column="190">(</op:operator><name pos:line="1067" pos:column="191">TFourth</name><op:operator pos:line="1067" pos:column="198">)</op:operator><name><name pos:line="1067" pos:column="199">otherDeserializers</name><index pos:line="1067" pos:column="217">[<expr><lit:literal type="number" pos:line="1067" pos:column="218">2</lit:literal></expr>]</index></name><op:operator pos:line="1067" pos:column="220">(</op:operator><name pos:line="1067" pos:column="221">r</name><op:operator pos:line="1067" pos:column="222">)</op:operator><op:operator pos:line="1067" pos:column="223">,</op:operator> <op:operator pos:line="1067" pos:column="225">(</op:operator><name pos:line="1067" pos:column="226">TFifth</name><op:operator pos:line="1067" pos:column="232">)</op:operator><name><name pos:line="1067" pos:column="233">otherDeserializers</name><index pos:line="1067" pos:column="251">[<expr><lit:literal type="number" pos:line="1067" pos:column="252">3</lit:literal></expr>]</index></name><op:operator pos:line="1067" pos:column="254">(</op:operator><name pos:line="1067" pos:column="255">r</name><op:operator pos:line="1067" pos:column="256">)</op:operator><op:operator pos:line="1067" pos:column="257">)</op:operator></lambda></expr>;</return>
<cpp:endif pos:line="1068" pos:column="1">#<cpp:directive pos:line="1068" pos:column="2">endif</cpp:directive></cpp:endif>
                </case><default pos:line="1069" pos:column="17">default:
                    <throw pos:line="1070" pos:column="21">throw <expr><op:operator pos:line="1070" pos:column="27">new</op:operator> <call><name pos:line="1070" pos:column="31">NotSupportedException</name><argument_list pos:line="1070" pos:column="52">()</argument_list></call></expr>;</throw>
            </default>}</block></switch>
        }</block></function>

        <function><type><specifier pos:line="1074" pos:column="9">private</specifier> <specifier pos:line="1074" pos:column="17">static</specifier> <name><name pos:line="1074" pos:column="24">Func</name><argument_list pos:line="1074" pos:column="28">&lt;<argument><name pos:line="1074" pos:column="29">IDataReader</name></argument>, <argument><name pos:line="1074" pos:column="42">object</name></argument>&gt;</argument_list></name><index pos:line="1074" pos:column="49">[]</index></type> <name pos:line="1074" pos:column="52">GenerateDeserializers</name><parameter_list pos:line="1074" pos:column="73">(<param><decl><type><name><name pos:line="1074" pos:column="74">Type</name><index pos:line="1074" pos:column="78">[]</index></name></type> <name pos:line="1074" pos:column="81">types</name></decl></param>, <param><decl><type><name pos:line="1074" pos:column="88">string</name></type> <name pos:line="1074" pos:column="95">splitOn</name></decl></param>, <param><decl><type><name pos:line="1074" pos:column="104">IDataReader</name></type> <name pos:line="1074" pos:column="116">reader</name></decl></param>)</parameter_list>
        <block pos:line="1075" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="1076" pos:column="13">int</name></type> <name pos:line="1076" pos:column="17">current</name> <init pos:line="1076" pos:column="25">= <expr><lit:literal type="number" pos:line="1076" pos:column="27">0</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1077" pos:column="13">var</name></type> <name pos:line="1077" pos:column="17">splits</name> <init pos:line="1077" pos:column="24">= <expr><call><name><name pos:line="1077" pos:column="26">splitOn</name><op:operator pos:line="1077" pos:column="33">.</op:operator><name pos:line="1077" pos:column="34">Split</name></name><argument_list pos:line="1077" pos:column="39">(<argument><expr><lit:literal type="char" pos:line="1077" pos:column="40">','</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1077" pos:column="44">.</op:operator><call><name pos:line="1077" pos:column="45">ToArray</name><argument_list pos:line="1077" pos:column="52">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1078" pos:column="13">var</name></type> <name pos:line="1078" pos:column="17">splitIndex</name> <init pos:line="1078" pos:column="28">= <expr><lit:literal type="number" pos:line="1078" pos:column="30">0</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name><name pos:line="1080" pos:column="13">Func</name><argument_list pos:line="1080" pos:column="17">&lt;<argument><name pos:line="1080" pos:column="18">Type</name></argument>, <argument><name pos:line="1080" pos:column="24">int</name></argument>&gt;</argument_list></name></type> <name pos:line="1080" pos:column="29">nextSplit</name> <init pos:line="1080" pos:column="39">= <expr><lambda><name pos:line="1080" pos:column="41">type</name> <op:operator pos:line="1080" pos:column="46">=&gt;</op:operator>
            <block pos:line="1081" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="1082" pos:column="17">var</name></type> <name pos:line="1082" pos:column="21">currentSplit</name> <init pos:line="1082" pos:column="34">= <expr><name><name pos:line="1082" pos:column="36">splits</name><index pos:line="1082" pos:column="42">[<expr><name pos:line="1082" pos:column="43">splitIndex</name></expr>]</index></name><op:operator pos:line="1082" pos:column="54">.</op:operator><call><name pos:line="1082" pos:column="55">Trim</name><argument_list pos:line="1082" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="1083" pos:column="17">if <condition pos:line="1083" pos:column="20">(<expr><name><name pos:line="1083" pos:column="21">splits</name><op:operator pos:line="1083" pos:column="27">.</op:operator><name pos:line="1083" pos:column="28">Length</name></name> <op:operator pos:line="1083" pos:column="35">&gt;</op:operator> <name pos:line="1083" pos:column="37">splitIndex</name> <op:operator pos:line="1083" pos:column="48">+</op:operator> <lit:literal type="number" pos:line="1083" pos:column="50">1</lit:literal></expr>)</condition><then pos:line="1083" pos:column="52">
                <block pos:line="1084" pos:column="17">{
                    <expr_stmt><expr><name pos:line="1085" pos:column="21">splitIndex</name><op:operator pos:line="1085" pos:column="31">++</op:operator></expr>;</expr_stmt>
                }</block></then></if>

                <decl_stmt><decl><type><name pos:line="1088" pos:column="17">bool</name></type> <name pos:line="1088" pos:column="22">skipFirst</name> <init pos:line="1088" pos:column="32">= <expr><lit:literal type="boolean" pos:line="1088" pos:column="34">false</lit:literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="1089" pos:column="17">int</name></type> <name pos:line="1089" pos:column="21">startingPos</name> <init pos:line="1089" pos:column="33">= <expr><name pos:line="1089" pos:column="35">current</name> <op:operator pos:line="1089" pos:column="43">+</op:operator> <lit:literal type="number" pos:line="1089" pos:column="45">1</lit:literal></expr></init></decl>;</decl_stmt>
                <comment type="line" pos:line="1090" pos:column="17">// if our current type has the split, skip the first time you see it. </comment>
                <if pos:line="1091" pos:column="17">if <condition pos:line="1091" pos:column="20">(<expr><name pos:line="1091" pos:column="21">type</name> <op:operator pos:line="1091" pos:column="26">!=</op:operator> <call><name pos:line="1091" pos:column="29">typeof</name><argument_list pos:line="1091" pos:column="35">(<argument><expr><name pos:line="1091" pos:column="36">Object</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1091" pos:column="44">
                <block pos:line="1092" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="1093" pos:column="21">var</name></type> <name pos:line="1093" pos:column="25">props</name> <init pos:line="1093" pos:column="31">= <expr><call><name><name pos:line="1093" pos:column="33">DefaultTypeMap</name><op:operator pos:line="1093" pos:column="47">.</op:operator><name pos:line="1093" pos:column="48">GetSettableProps</name></name><argument_list pos:line="1093" pos:column="64">(<argument><expr><name pos:line="1093" pos:column="65">type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="1094" pos:column="21">var</name></type> <name pos:line="1094" pos:column="25">fields</name> <init pos:line="1094" pos:column="32">= <expr><call><name><name pos:line="1094" pos:column="34">DefaultTypeMap</name><op:operator pos:line="1094" pos:column="48">.</op:operator><name pos:line="1094" pos:column="49">GetSettableFields</name></name><argument_list pos:line="1094" pos:column="66">(<argument><expr><name pos:line="1094" pos:column="67">type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <foreach pos:line="1096" pos:column="21">foreach (<init><decl><type><name pos:line="1096" pos:column="30">var</name></type> <name pos:line="1096" pos:column="34">name</name> <range pos:line="1096" pos:column="39">in <expr><call><name><name pos:line="1096" pos:column="42">props</name><op:operator pos:line="1096" pos:column="47">.</op:operator><name pos:line="1096" pos:column="48">Select</name></name><argument_list pos:line="1096" pos:column="54">(<argument><expr><lambda><name pos:line="1096" pos:column="55">p</name> <op:operator pos:line="1096" pos:column="57">=&gt;</op:operator> <name><name pos:line="1096" pos:column="60">p</name><op:operator pos:line="1096" pos:column="61">.</op:operator><name pos:line="1096" pos:column="62">Name</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="1096" pos:column="67">.</op:operator><call><name pos:line="1096" pos:column="68">Concat</name><argument_list pos:line="1096" pos:column="74">(<argument><expr><call><name><name pos:line="1096" pos:column="75">fields</name><op:operator pos:line="1096" pos:column="81">.</op:operator><name pos:line="1096" pos:column="82">Select</name></name><argument_list pos:line="1096" pos:column="88">(<argument><expr><lambda><name pos:line="1096" pos:column="89">f</name> <op:operator pos:line="1096" pos:column="91">=&gt;</op:operator> <name><name pos:line="1096" pos:column="94">f</name><op:operator pos:line="1096" pos:column="95">.</op:operator><name pos:line="1096" pos:column="96">Name</name></name></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></range></decl></init>)
                    <block pos:line="1097" pos:column="21">{
                        <if pos:line="1098" pos:column="25">if <condition pos:line="1098" pos:column="28">(<expr><call><name><name pos:line="1098" pos:column="29">string</name><op:operator pos:line="1098" pos:column="35">.</op:operator><name pos:line="1098" pos:column="36">Equals</name></name><argument_list pos:line="1098" pos:column="42">(<argument><expr><name pos:line="1098" pos:column="43">name</name></expr></argument>, <argument><expr><name pos:line="1098" pos:column="49">currentSplit</name></expr></argument>, <argument><expr><name><name pos:line="1098" pos:column="63">StringComparison</name><op:operator pos:line="1098" pos:column="79">.</op:operator><name pos:line="1098" pos:column="80">OrdinalIgnoreCase</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1098" pos:column="99">
                        <block pos:line="1099" pos:column="25">{
                            <expr_stmt><expr><name pos:line="1100" pos:column="29">skipFirst</name> <op:operator pos:line="1100" pos:column="39">=</op:operator> <lit:literal type="boolean" pos:line="1100" pos:column="41">true</lit:literal></expr>;</expr_stmt>
                            <expr_stmt><expr><name pos:line="1101" pos:column="29">startingPos</name> <op:operator pos:line="1101" pos:column="41">=</op:operator> <name pos:line="1101" pos:column="43">current</name></expr>;</expr_stmt>
                            <break pos:line="1102" pos:column="29">break;</break>
                        }</block></then></if>
                    }</block></foreach>

                }</block></then></if>

                <decl_stmt><decl><type><name pos:line="1108" pos:column="17">int</name></type> <name pos:line="1108" pos:column="21">pos</name></decl>;</decl_stmt>
                <for pos:line="1109" pos:column="17">for (<init><expr><name pos:line="1109" pos:column="22">pos</name> <op:operator pos:line="1109" pos:column="26">=</op:operator> <name pos:line="1109" pos:column="28">startingPos</name></expr>;</init> <condition><expr><name pos:line="1109" pos:column="41">pos</name> <op:operator pos:line="1109" pos:column="45">&lt;</op:operator> <name><name pos:line="1109" pos:column="47">reader</name><op:operator pos:line="1109" pos:column="53">.</op:operator><name pos:line="1109" pos:column="54">FieldCount</name></name></expr>;</condition> <incr><expr><name pos:line="1109" pos:column="66">pos</name><op:operator pos:line="1109" pos:column="69">++</op:operator></expr></incr>)
                <block pos:line="1110" pos:column="17">{
                    <comment type="line" pos:line="1111" pos:column="21">// some people like ID some id ... assuming case insensitive splits for now</comment>
                    <if pos:line="1112" pos:column="21">if <condition pos:line="1112" pos:column="24">(<expr><name pos:line="1112" pos:column="25">splitOn</name> <op:operator pos:line="1112" pos:column="33">==</op:operator> <lit:literal type="string" pos:line="1112" pos:column="36">"*"</lit:literal></expr>)</condition><then pos:line="1112" pos:column="40">
                    <block pos:line="1113" pos:column="21">{
                        <break pos:line="1114" pos:column="25">break;</break>
                    }</block></then></if>
                    <if pos:line="1116" pos:column="21">if <condition pos:line="1116" pos:column="24">(<expr><call><name><name pos:line="1116" pos:column="25">string</name><op:operator pos:line="1116" pos:column="31">.</op:operator><name pos:line="1116" pos:column="32">Equals</name></name><argument_list pos:line="1116" pos:column="38">(<argument><expr><call><name><name pos:line="1116" pos:column="39">reader</name><op:operator pos:line="1116" pos:column="45">.</op:operator><name pos:line="1116" pos:column="46">GetName</name></name><argument_list pos:line="1116" pos:column="53">(<argument><expr><name pos:line="1116" pos:column="54">pos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="1116" pos:column="60">currentSplit</name></expr></argument>, <argument><expr><name><name pos:line="1116" pos:column="74">StringComparison</name><op:operator pos:line="1116" pos:column="90">.</op:operator><name pos:line="1116" pos:column="91">OrdinalIgnoreCase</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1116" pos:column="110">
                    <block pos:line="1117" pos:column="21">{
                        <if pos:line="1118" pos:column="25">if <condition pos:line="1118" pos:column="28">(<expr><name pos:line="1118" pos:column="29">skipFirst</name></expr>)</condition><then pos:line="1118" pos:column="39">
                        <block pos:line="1119" pos:column="25">{
                            <expr_stmt><expr><name pos:line="1120" pos:column="29">skipFirst</name> <op:operator pos:line="1120" pos:column="39">=</op:operator> <lit:literal type="boolean" pos:line="1120" pos:column="41">false</lit:literal></expr>;</expr_stmt>
                        }</block></then>
                        <else pos:line="1122" pos:column="25">else
                        <block pos:line="1123" pos:column="25">{
                            <break pos:line="1124" pos:column="29">break;</break>
                        }</block></else></if>
                    }</block></then></if>
                }</block></for>
                <expr_stmt><expr><name pos:line="1128" pos:column="17">current</name> <op:operator pos:line="1128" pos:column="25">=</op:operator> <name pos:line="1128" pos:column="27">pos</name></expr>;</expr_stmt>
                <return pos:line="1129" pos:column="17">return <expr><name pos:line="1129" pos:column="24">pos</name></expr>;</return>
            }</block></lambda></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1132" pos:column="13">var</name></type> <name pos:line="1132" pos:column="17">deserializers</name> <init pos:line="1132" pos:column="31">= <expr><op:operator pos:line="1132" pos:column="33">new</op:operator> <call><name><name pos:line="1132" pos:column="37">List</name><argument_list pos:line="1132" pos:column="41">&lt;<argument><name><name pos:line="1132" pos:column="42">Func</name><argument_list pos:line="1132" pos:column="46">&lt;<argument><name pos:line="1132" pos:column="47">IDataReader</name></argument>, <argument><name pos:line="1132" pos:column="60">object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list pos:line="1132" pos:column="68">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1133" pos:column="13">int</name></type> <name pos:line="1133" pos:column="17">split</name> <init pos:line="1133" pos:column="23">= <expr><lit:literal type="number" pos:line="1133" pos:column="25">0</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1134" pos:column="13">bool</name></type> <name pos:line="1134" pos:column="18">first</name> <init pos:line="1134" pos:column="24">= <expr><lit:literal type="boolean" pos:line="1134" pos:column="26">true</lit:literal></expr></init></decl>;</decl_stmt>
            <foreach pos:line="1135" pos:column="13">foreach (<init><decl><type><name pos:line="1135" pos:column="22">var</name></type> <name pos:line="1135" pos:column="26">type</name> <range pos:line="1135" pos:column="31">in <expr><name pos:line="1135" pos:column="34">types</name></expr></range></decl></init>)
            <block pos:line="1136" pos:column="13">{
                <if pos:line="1137" pos:column="17">if <condition pos:line="1137" pos:column="20">(<expr><name pos:line="1137" pos:column="21">type</name> <op:operator pos:line="1137" pos:column="26">!=</op:operator> <call><name pos:line="1137" pos:column="29">typeof</name><argument_list pos:line="1137" pos:column="35">(<argument><expr><name pos:line="1137" pos:column="36">DontMap</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1137" pos:column="45">
                <block pos:line="1138" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="1139" pos:column="21">int</name></type> <name pos:line="1139" pos:column="25">next</name> <init pos:line="1139" pos:column="30">= <expr><call><name pos:line="1139" pos:column="32">nextSplit</name><argument_list pos:line="1139" pos:column="41">(<argument><expr><name pos:line="1139" pos:column="42">type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="1140" pos:column="21">deserializers</name><op:operator pos:line="1140" pos:column="34">.</op:operator><name pos:line="1140" pos:column="35">Add</name></name><argument_list pos:line="1140" pos:column="38">(<argument><expr><call><name pos:line="1140" pos:column="39">GetDeserializer</name><argument_list pos:line="1140" pos:column="54">(<argument><expr><name pos:line="1140" pos:column="55">type</name></expr></argument>, <argument><expr><name pos:line="1140" pos:column="61">reader</name></expr></argument>, <argument><expr><name pos:line="1140" pos:column="69">split</name></expr></argument>, <argument><expr><name pos:line="1140" pos:column="76">next</name> <op:operator pos:line="1140" pos:column="81">-</op:operator> <name pos:line="1140" pos:column="83">split</name></expr></argument>, <comment type="block" pos:line="1140" pos:column="90">/* returnNullIfFirstMissing: */</comment> <argument><expr><op:operator pos:line="1140" pos:column="122">!</op:operator><name pos:line="1140" pos:column="123">first</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="1141" pos:column="21">first</name> <op:operator pos:line="1141" pos:column="27">=</op:operator> <lit:literal type="boolean" pos:line="1141" pos:column="29">false</lit:literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="1142" pos:column="21">split</name> <op:operator pos:line="1142" pos:column="27">=</op:operator> <name pos:line="1142" pos:column="29">next</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></foreach>

            <return pos:line="1146" pos:column="13">return <expr><call><name><name pos:line="1146" pos:column="20">deserializers</name><op:operator pos:line="1146" pos:column="33">.</op:operator><name pos:line="1146" pos:column="34">ToArray</name></name><argument_list pos:line="1146" pos:column="41">()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="1149" pos:column="9">private</specifier> <specifier pos:line="1149" pos:column="17">static</specifier> <name pos:line="1149" pos:column="24">CacheInfo</name></type> <name pos:line="1149" pos:column="34">GetCacheInfo</name><parameter_list pos:line="1149" pos:column="46">(<param><decl><type><name pos:line="1149" pos:column="47">Identity</name></type> <name pos:line="1149" pos:column="56">identity</name></decl></param>)</parameter_list>
        <block pos:line="1150" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="1151" pos:column="13">CacheInfo</name></type> <name pos:line="1151" pos:column="23">info</name></decl>;</decl_stmt>
            <if pos:line="1152" pos:column="13">if <condition pos:line="1152" pos:column="16">(<expr><op:operator pos:line="1152" pos:column="17">!</op:operator><call><name pos:line="1152" pos:column="18">TryGetQueryCache</name><argument_list pos:line="1152" pos:column="34">(<argument><expr><name pos:line="1152" pos:column="35">identity</name></expr></argument>, <argument><expr pos:line="1152" pos:column="45">out <name pos:line="1152" pos:column="49">info</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1152" pos:column="55">
            <block pos:line="1153" pos:column="13">{
                <expr_stmt><expr><name pos:line="1154" pos:column="17">info</name> <op:operator pos:line="1154" pos:column="22">=</op:operator> <op:operator pos:line="1154" pos:column="24">new</op:operator> <call><name pos:line="1154" pos:column="28">CacheInfo</name><argument_list pos:line="1154" pos:column="37">()</argument_list></call></expr>;</expr_stmt>
                <if pos:line="1155" pos:column="17">if <condition pos:line="1155" pos:column="20">(<expr><name><name pos:line="1155" pos:column="21">identity</name><op:operator pos:line="1155" pos:column="29">.</op:operator><name pos:line="1155" pos:column="30">parametersType</name></name> <op:operator pos:line="1155" pos:column="45">!=</op:operator> <name pos:line="1155" pos:column="48">null</name></expr>)</condition><then pos:line="1155" pos:column="53">
                <block pos:line="1156" pos:column="17">{
                    <if pos:line="1157" pos:column="21">if <condition pos:line="1157" pos:column="24">(<expr><call><name pos:line="1157" pos:column="25">typeof</name><argument_list pos:line="1157" pos:column="31">(<argument><expr><name pos:line="1157" pos:column="32">IDynamicParameters</name></expr></argument>)</argument_list></call><op:operator pos:line="1157" pos:column="51">.</op:operator><call><name pos:line="1157" pos:column="52">IsAssignableFrom</name><argument_list pos:line="1157" pos:column="68">(<argument><expr><name><name pos:line="1157" pos:column="69">identity</name><op:operator pos:line="1157" pos:column="77">.</op:operator><name pos:line="1157" pos:column="78">parametersType</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1157" pos:column="94">
                    <block pos:line="1158" pos:column="21">{
                        <expr_stmt><expr><name><name pos:line="1159" pos:column="25">info</name><op:operator pos:line="1159" pos:column="29">.</op:operator><name pos:line="1159" pos:column="30">ParamReader</name></name> <op:operator pos:line="1159" pos:column="42">=</op:operator> <lambda><parameter_list pos:line="1159" pos:column="44">(<param><decl><name pos:line="1159" pos:column="45">cmd</name></decl></param>, <param><decl><name pos:line="1159" pos:column="50">obj</name></decl></param>)</parameter_list> <op:operator pos:line="1159" pos:column="55">=&gt;</op:operator> <block pos:line="1159" pos:column="58">{ <expr_stmt><expr><op:operator pos:line="1159" pos:column="60">(</op:operator><name pos:line="1159" pos:column="61">obj</name> <op:operator pos:line="1159" pos:column="65">as</op:operator> <name pos:line="1159" pos:column="68">IDynamicParameters</name><op:operator pos:line="1159" pos:column="86">)</op:operator><op:operator pos:line="1159" pos:column="87">.</op:operator><call><name pos:line="1159" pos:column="88">AddParameters</name><argument_list pos:line="1159" pos:column="101">(<argument><expr><name pos:line="1159" pos:column="102">cmd</name></expr></argument>, <argument><expr><name pos:line="1159" pos:column="107">identity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></lambda></expr>;</expr_stmt>
                    }</block></then>
<cpp:if pos:line="1161" pos:column="1">#<cpp:directive pos:line="1161" pos:column="2">if</cpp:directive> <expr><op:operator pos:line="1161" pos:column="5">!</op:operator><name pos:line="1161" pos:column="6">CSHARP30</name></expr></cpp:if>
                    <else pos:line="1162" pos:column="21">else <if pos:line="1162" pos:column="26">if <condition pos:line="1162" pos:column="29">(<expr><call><name pos:line="1162" pos:column="30">typeof</name><argument_list pos:line="1162" pos:column="36">(<argument><expr><name><name pos:line="1162" pos:column="37">IEnumerable</name><argument_list pos:line="1162" pos:column="48">&lt;<argument><name><name pos:line="1162" pos:column="49">KeyValuePair</name><argument_list pos:line="1162" pos:column="61">&lt;<argument><name pos:line="1162" pos:column="62">string</name></argument>, <argument><name pos:line="1162" pos:column="70">object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call><op:operator pos:line="1162" pos:column="79">.</op:operator><call><name pos:line="1162" pos:column="80">IsAssignableFrom</name><argument_list pos:line="1162" pos:column="96">(<argument><expr><name><name pos:line="1162" pos:column="97">identity</name><op:operator pos:line="1162" pos:column="105">.</op:operator><name pos:line="1162" pos:column="106">parametersType</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="1162" pos:column="122">&amp;&amp;</op:operator> <call><name pos:line="1162" pos:column="125">typeof</name><argument_list pos:line="1162" pos:column="131">(<argument><expr><name><name pos:line="1162" pos:column="132">System</name><op:operator pos:line="1162" pos:column="138">.</op:operator><name pos:line="1162" pos:column="139">Dynamic</name><op:operator pos:line="1162" pos:column="146">.</op:operator><name pos:line="1162" pos:column="147">IDynamicMetaObjectProvider</name></name></expr></argument>)</argument_list></call><op:operator pos:line="1162" pos:column="174">.</op:operator><call><name pos:line="1162" pos:column="175">IsAssignableFrom</name><argument_list pos:line="1162" pos:column="191">(<argument><expr><name><name pos:line="1162" pos:column="192">identity</name><op:operator pos:line="1162" pos:column="200">.</op:operator><name pos:line="1162" pos:column="201">parametersType</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1162" pos:column="217">
                    <block pos:line="1163" pos:column="21">{
                        <expr_stmt><expr><name><name pos:line="1164" pos:column="25">info</name><op:operator pos:line="1164" pos:column="29">.</op:operator><name pos:line="1164" pos:column="30">ParamReader</name></name> <op:operator pos:line="1164" pos:column="42">=</op:operator> <lambda><parameter_list pos:line="1164" pos:column="44">(<param><decl><name pos:line="1164" pos:column="45">cmd</name></decl></param>, <param><decl><name pos:line="1164" pos:column="50">obj</name></decl></param>)</parameter_list> <op:operator pos:line="1164" pos:column="55">=&gt;</op:operator>
                        <block pos:line="1165" pos:column="25">{
                            <decl_stmt><decl><type><name pos:line="1166" pos:column="29">IDynamicParameters</name></type> <name pos:line="1166" pos:column="48">mapped</name> <init pos:line="1166" pos:column="55">= <expr><op:operator pos:line="1166" pos:column="57">new</op:operator> <call><name pos:line="1166" pos:column="61">DynamicParameters</name><argument_list pos:line="1166" pos:column="78">(<argument><expr><name pos:line="1166" pos:column="79">obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><call><name><name pos:line="1167" pos:column="29">mapped</name><op:operator pos:line="1167" pos:column="35">.</op:operator><name pos:line="1167" pos:column="36">AddParameters</name></name><argument_list pos:line="1167" pos:column="49">(<argument><expr><name pos:line="1167" pos:column="50">cmd</name></expr></argument>, <argument><expr><name pos:line="1167" pos:column="55">identity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></lambda></expr>;</expr_stmt>
                    }</block></then>
<cpp:endif pos:line="1170" pos:column="1">#<cpp:directive pos:line="1170" pos:column="2">endif</cpp:directive></cpp:endif>
                    <else pos:line="1171" pos:column="21">else
                    <block pos:line="1172" pos:column="21">{
                        <expr_stmt><expr><name><name pos:line="1173" pos:column="25">info</name><op:operator pos:line="1173" pos:column="29">.</op:operator><name pos:line="1173" pos:column="30">ParamReader</name></name> <op:operator pos:line="1173" pos:column="42">=</op:operator> <call><name pos:line="1173" pos:column="44">CreateParamInfoGenerator</name><argument_list pos:line="1173" pos:column="68">(<argument><expr><name pos:line="1173" pos:column="69">identity</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1173" pos:column="79">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if></else></if>
                }</block></then></if>
                <expr_stmt><expr><call><name pos:line="1176" pos:column="17">SetQueryCache</name><argument_list pos:line="1176" pos:column="30">(<argument><expr><name pos:line="1176" pos:column="31">identity</name></expr></argument>, <argument><expr><name pos:line="1176" pos:column="41">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <return pos:line="1178" pos:column="13">return <expr><name pos:line="1178" pos:column="20">info</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="1181" pos:column="9">private</specifier> <specifier pos:line="1181" pos:column="17">static</specifier> <name><name pos:line="1181" pos:column="24">Func</name><argument_list pos:line="1181" pos:column="28">&lt;<argument><name pos:line="1181" pos:column="29">IDataReader</name></argument>, <argument><name pos:line="1181" pos:column="42">object</name></argument>&gt;</argument_list></name></type> <name pos:line="1181" pos:column="50">GetDeserializer</name><parameter_list pos:line="1181" pos:column="65">(<param><decl><type><name pos:line="1181" pos:column="66">Type</name></type> <name pos:line="1181" pos:column="71">type</name></decl></param>, <param><decl><type><name pos:line="1181" pos:column="77">IDataReader</name></type> <name pos:line="1181" pos:column="89">reader</name></decl></param>, <param><decl><type><name pos:line="1181" pos:column="97">int</name></type> <name pos:line="1181" pos:column="101">startBound</name></decl></param>, <param><decl><type><name pos:line="1181" pos:column="113">int</name></type> <name pos:line="1181" pos:column="117">length</name></decl></param>, <param><decl><type><name pos:line="1181" pos:column="125">bool</name></type> <name pos:line="1181" pos:column="130">returnNullIfFirstMissing</name></decl></param>)</parameter_list>
        <block pos:line="1182" pos:column="9">{
<cpp:if pos:line="1183" pos:column="1">#<cpp:directive pos:line="1183" pos:column="2">if</cpp:directive> <expr><op:operator pos:line="1183" pos:column="5">!</op:operator><name pos:line="1183" pos:column="6">CSHARP30</name></expr></cpp:if>
            <comment type="line" pos:line="1184" pos:column="13">// dynamic is passed in as Object ... by c# design</comment>
            <if pos:line="1185" pos:column="13">if <condition pos:line="1185" pos:column="16">(<expr><name pos:line="1185" pos:column="17">type</name> <op:operator pos:line="1185" pos:column="22">==</op:operator> <call><name pos:line="1185" pos:column="25">typeof</name><argument_list pos:line="1185" pos:column="31">(<argument><expr><name pos:line="1185" pos:column="32">object</name></expr></argument>)</argument_list></call>
                <op:operator pos:line="1186" pos:column="17">||</op:operator> <name pos:line="1186" pos:column="20">type</name> <op:operator pos:line="1186" pos:column="25">==</op:operator> <call><name pos:line="1186" pos:column="28">typeof</name><argument_list pos:line="1186" pos:column="34">(<argument><expr><name pos:line="1186" pos:column="35">DapperRow</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1186" pos:column="46">
            <block pos:line="1187" pos:column="13">{
                <return pos:line="1188" pos:column="17">return <expr><call><name pos:line="1188" pos:column="24">GetDapperRowDeserializer</name><argument_list pos:line="1188" pos:column="48">(<argument><expr><name pos:line="1188" pos:column="49">reader</name></expr></argument>, <argument><expr><name pos:line="1188" pos:column="57">startBound</name></expr></argument>, <argument><expr><name pos:line="1188" pos:column="69">length</name></expr></argument>, <argument><expr><name pos:line="1188" pos:column="77">returnNullIfFirstMissing</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
<cpp:else pos:line="1190" pos:column="1">#<cpp:directive pos:line="1190" pos:column="2">else</cpp:directive></cpp:else>
            <if pos:line="1191" pos:column="13">if<condition pos:line="1191" pos:column="15">(<expr><call><name><name pos:line="1191" pos:column="16">type</name><op:operator pos:line="1191" pos:column="20">.</op:operator><name pos:line="1191" pos:column="21">IsAssignableFrom</name></name><argument_list pos:line="1191" pos:column="37">(<argument><expr><call><name pos:line="1191" pos:column="38">typeof</name><argument_list pos:line="1191" pos:column="44">(<argument><expr><name><name pos:line="1191" pos:column="45">Dictionary</name><argument_list pos:line="1191" pos:column="55">&lt;<argument><name pos:line="1191" pos:column="56">string</name></argument>,<argument><name pos:line="1191" pos:column="63">object</name></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1191" pos:column="73">
            <block pos:line="1192" pos:column="13">{
                <return pos:line="1193" pos:column="17">return <expr><call><name pos:line="1193" pos:column="24">GetDictionaryDeserializer</name><argument_list pos:line="1193" pos:column="49">(<argument><expr><name pos:line="1193" pos:column="50">reader</name></expr></argument>, <argument><expr><name pos:line="1193" pos:column="58">startBound</name></expr></argument>, <argument><expr><name pos:line="1193" pos:column="70">length</name></expr></argument>, <argument><expr><name pos:line="1193" pos:column="78">returnNullIfFirstMissing</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
<cpp:endif pos:line="1195" pos:column="1">#<cpp:directive pos:line="1195" pos:column="2">endif</cpp:directive></cpp:endif>
            <decl_stmt><decl><type><name pos:line="1196" pos:column="13">Type</name></type> <name pos:line="1196" pos:column="18">underlyingType</name> <init pos:line="1196" pos:column="33">= <expr><name pos:line="1196" pos:column="35">null</name></expr></init></decl>;</decl_stmt>
            <if pos:line="1197" pos:column="13">if <condition pos:line="1197" pos:column="16">(<expr><op:operator pos:line="1197" pos:column="17">!</op:operator><op:operator pos:line="1197" pos:column="18">(</op:operator><call><name><name pos:line="1197" pos:column="19">typeMap</name><op:operator pos:line="1197" pos:column="26">.</op:operator><name pos:line="1197" pos:column="27">ContainsKey</name></name><argument_list pos:line="1197" pos:column="38">(<argument><expr><name pos:line="1197" pos:column="39">type</name></expr></argument>)</argument_list></call> <op:operator pos:line="1197" pos:column="45">||</op:operator> <name><name pos:line="1197" pos:column="48">type</name><op:operator pos:line="1197" pos:column="52">.</op:operator><name pos:line="1197" pos:column="53">IsEnum</name></name> <op:operator pos:line="1197" pos:column="60">||</op:operator> <name><name pos:line="1197" pos:column="63">type</name><op:operator pos:line="1197" pos:column="67">.</op:operator><name pos:line="1197" pos:column="68">FullName</name></name> <op:operator pos:line="1197" pos:column="77">==</op:operator> <name pos:line="1197" pos:column="80">LinqBinary</name> <op:operator pos:line="1197" pos:column="91">||</op:operator>
                <op:operator pos:line="1198" pos:column="17">(</op:operator><call><name><name pos:line="1198" pos:column="18">type</name><op:operator pos:line="1198" pos:column="22">.</op:operator><name pos:line="1198" pos:column="23">IsValueType</name> <type:modifier pos:line="1198" pos:column="35">&amp;&amp;</type:modifier></name> <argument_list pos:line="1198" pos:column="38">(<argument><expr><name pos:line="1198" pos:column="39">underlyingType</name> <op:operator pos:line="1198" pos:column="54">=</op:operator> <call><name><name pos:line="1198" pos:column="56">Nullable</name><op:operator pos:line="1198" pos:column="64">.</op:operator><name pos:line="1198" pos:column="65">GetUnderlyingType</name></name><argument_list pos:line="1198" pos:column="82">(<argument><expr><name pos:line="1198" pos:column="83">type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="1198" pos:column="90">!=</op:operator> <name pos:line="1198" pos:column="93">null</name> <op:operator pos:line="1198" pos:column="98">&amp;&amp;</op:operator> <name><name pos:line="1198" pos:column="101">underlyingType</name><op:operator pos:line="1198" pos:column="115">.</op:operator><name pos:line="1198" pos:column="116">IsEnum</name></name><op:operator pos:line="1198" pos:column="122">)</op:operator><op:operator pos:line="1198" pos:column="123">)</op:operator></expr>)</condition><then pos:line="1198" pos:column="125">
            <block pos:line="1199" pos:column="13">{
                <return pos:line="1200" pos:column="17">return <expr><call><name pos:line="1200" pos:column="24">GetTypeDeserializer</name><argument_list pos:line="1200" pos:column="43">(<argument><expr><name pos:line="1200" pos:column="44">type</name></expr></argument>, <argument><expr><name pos:line="1200" pos:column="50">reader</name></expr></argument>, <argument><expr><name pos:line="1200" pos:column="58">startBound</name></expr></argument>, <argument><expr><name pos:line="1200" pos:column="70">length</name></expr></argument>, <argument><expr><name pos:line="1200" pos:column="78">returnNullIfFirstMissing</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
            <return pos:line="1202" pos:column="13">return <expr><call><name pos:line="1202" pos:column="20">GetStructDeserializer</name><argument_list pos:line="1202" pos:column="41">(<argument><expr><name pos:line="1202" pos:column="42">type</name></expr></argument>, <argument><expr><name pos:line="1202" pos:column="48">underlyingType</name> <op:operator pos:line="1202" pos:column="63">??</op:operator> <name pos:line="1202" pos:column="66">type</name></expr></argument>, <argument><expr><name pos:line="1202" pos:column="72">startBound</name></expr></argument>)</argument_list></call></expr>;</return>

        }</block></function>

<cpp:if pos:line="1206" pos:column="1">#<cpp:directive pos:line="1206" pos:column="2">if</cpp:directive> <expr><op:operator pos:line="1206" pos:column="5">!</op:operator><name pos:line="1206" pos:column="6">CSHARP30</name></expr></cpp:if>
        <class><specifier pos:line="1207" pos:column="9">sealed</specifier> <specifier pos:line="1207" pos:column="16">partial</specifier> class <name pos:line="1207" pos:column="30">DapperTable</name>
        <block pos:line="1208" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="1209" pos:column="13">string</name><index pos:line="1209" pos:column="19">[]</index></type> <name pos:line="1209" pos:column="22">fieldNames</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="1210" pos:column="13">readonly</specifier> <name><name pos:line="1210" pos:column="22">Dictionary</name><argument_list pos:line="1210" pos:column="32">&lt;<argument><name pos:line="1210" pos:column="33">string</name></argument>, <argument><name pos:line="1210" pos:column="41">int</name></argument>&gt;</argument_list></name></type> <name pos:line="1210" pos:column="46">fieldNameLookup</name></decl>;</decl_stmt>

            <decl_stmt><decl><type><specifier pos:line="1212" pos:column="13">internal</specifier> <name pos:line="1212" pos:column="22">string</name><index pos:line="1212" pos:column="28">[]</index></type> <name pos:line="1212" pos:column="31">FieldNames</name> <block pos:line="1212" pos:column="42">{ <function><name pos:line="1212" pos:column="44">get</name> <block pos:line="1212" pos:column="48">{ <return pos:line="1212" pos:column="50">return <expr><name pos:line="1212" pos:column="57">fieldNames</name></expr>;</return> }</block></function> }</block></decl></decl_stmt>

            <constructor><specifier pos:line="1214" pos:column="13">public</specifier> <name pos:line="1214" pos:column="20">DapperTable</name><parameter_list pos:line="1214" pos:column="31">(<param><decl><type><name><name pos:line="1214" pos:column="32">string</name><index pos:line="1214" pos:column="38">[]</index></name></type> <name pos:line="1214" pos:column="41">fieldNames</name></decl></param>)</parameter_list>
            <block pos:line="1215" pos:column="13">{
                <if pos:line="1216" pos:column="17">if <condition pos:line="1216" pos:column="20">(<expr><name pos:line="1216" pos:column="21">fieldNames</name> <op:operator pos:line="1216" pos:column="32">==</op:operator> <name pos:line="1216" pos:column="35">null</name></expr>)</condition><then pos:line="1216" pos:column="40"> <throw pos:line="1216" pos:column="41">throw <expr><op:operator pos:line="1216" pos:column="47">new</op:operator> <call><name pos:line="1216" pos:column="51">ArgumentNullException</name><argument_list pos:line="1216" pos:column="72">(<argument><expr><lit:literal type="string" pos:line="1216" pos:column="73">"fieldNames"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
                <expr_stmt><expr><name><name pos:line="1217" pos:column="17">this</name><op:operator pos:line="1217" pos:column="21">.</op:operator><name pos:line="1217" pos:column="22">fieldNames</name></name> <op:operator pos:line="1217" pos:column="33">=</op:operator> <name pos:line="1217" pos:column="35">fieldNames</name></expr>;</expr_stmt>

                <expr_stmt><expr><name pos:line="1219" pos:column="17">fieldNameLookup</name> <op:operator pos:line="1219" pos:column="33">=</op:operator> <op:operator pos:line="1219" pos:column="35">new</op:operator> <call><name><name pos:line="1219" pos:column="39">Dictionary</name><argument_list pos:line="1219" pos:column="49">&lt;<argument><name pos:line="1219" pos:column="50">string</name></argument>, <argument><name pos:line="1219" pos:column="58">int</name></argument>&gt;</argument_list></name><argument_list pos:line="1219" pos:column="62">(<argument><expr><name><name pos:line="1219" pos:column="63">fieldNames</name><op:operator pos:line="1219" pos:column="73">.</op:operator><name pos:line="1219" pos:column="74">Length</name></name></expr></argument>, <argument><expr><name><name pos:line="1219" pos:column="82">StringComparer</name><op:operator pos:line="1219" pos:column="96">.</op:operator><name pos:line="1219" pos:column="97">Ordinal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line" pos:line="1220" pos:column="17">// if there are dups, we want the **first** key to be the "winner" - so iterate backwards</comment>
                <for pos:line="1221" pos:column="17">for (<init><decl><type><name pos:line="1221" pos:column="22">int</name></type> <name pos:line="1221" pos:column="26">i</name> <init pos:line="1221" pos:column="28">= <expr><name><name pos:line="1221" pos:column="30">fieldNames</name><op:operator pos:line="1221" pos:column="40">.</op:operator><name pos:line="1221" pos:column="41">Length</name></name> <op:operator pos:line="1221" pos:column="48">-</op:operator> <lit:literal type="number" pos:line="1221" pos:column="50">1</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1221" pos:column="53">i</name> <op:operator pos:line="1221" pos:column="55">&gt;=</op:operator> <lit:literal type="number" pos:line="1221" pos:column="58">0</lit:literal></expr>;</condition> <incr><expr><name pos:line="1221" pos:column="61">i</name><op:operator pos:line="1221" pos:column="62">--</op:operator></expr></incr>)
                <block pos:line="1222" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="1223" pos:column="21">string</name></type> <name pos:line="1223" pos:column="28">key</name> <init pos:line="1223" pos:column="32">= <expr><name><name pos:line="1223" pos:column="34">fieldNames</name><index pos:line="1223" pos:column="44">[<expr><name pos:line="1223" pos:column="45">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <if pos:line="1224" pos:column="21">if <condition pos:line="1224" pos:column="24">(<expr><name pos:line="1224" pos:column="25">key</name> <op:operator pos:line="1224" pos:column="29">!=</op:operator> <name pos:line="1224" pos:column="32">null</name></expr>)</condition><then pos:line="1224" pos:column="37"> <expr_stmt><expr><name><name pos:line="1224" pos:column="38">fieldNameLookup</name><index pos:line="1224" pos:column="53">[<expr><name pos:line="1224" pos:column="54">key</name></expr>]</index></name> <op:operator pos:line="1224" pos:column="59">=</op:operator> <name pos:line="1224" pos:column="61">i</name></expr>;</expr_stmt></then></if>
                }</block></for>
            }</block></constructor>

            <function><type><specifier pos:line="1228" pos:column="13">internal</specifier> <name pos:line="1228" pos:column="22">int</name></type> <name pos:line="1228" pos:column="26">IndexOfName</name><parameter_list pos:line="1228" pos:column="37">(<param><decl><type><name pos:line="1228" pos:column="38">string</name></type> <name pos:line="1228" pos:column="45">name</name></decl></param>)</parameter_list>
            <block pos:line="1229" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="1230" pos:column="17">int</name></type> <name pos:line="1230" pos:column="21">result</name></decl>;</decl_stmt>
                <return pos:line="1231" pos:column="17">return <expr><op:operator pos:line="1231" pos:column="24">(</op:operator><name pos:line="1231" pos:column="25">name</name> <op:operator pos:line="1231" pos:column="30">!=</op:operator> <name pos:line="1231" pos:column="33">null</name> <op:operator pos:line="1231" pos:column="38">&amp;&amp;</op:operator> <call><name><name pos:line="1231" pos:column="41">fieldNameLookup</name><op:operator pos:line="1231" pos:column="56">.</op:operator><name pos:line="1231" pos:column="57">TryGetValue</name></name><argument_list pos:line="1231" pos:column="68">(<argument><expr><name pos:line="1231" pos:column="69">name</name></expr></argument>, <argument><expr pos:line="1231" pos:column="75">out <name pos:line="1231" pos:column="79">result</name></expr></argument>)</argument_list></call><op:operator pos:line="1231" pos:column="86">)</op:operator> <op:operator pos:line="1231" pos:column="88">?</op:operator> <name pos:line="1231" pos:column="90">result</name> <op:operator pos:line="1231" pos:column="97">:</op:operator> <op:operator pos:line="1231" pos:column="99">-</op:operator><lit:literal type="number" pos:line="1231" pos:column="100">1</lit:literal></expr>;</return>
            }</block></function>
            <function><type><specifier pos:line="1233" pos:column="13">internal</specifier> <name pos:line="1233" pos:column="22">int</name></type> <name pos:line="1233" pos:column="26">AddField</name><parameter_list pos:line="1233" pos:column="34">(<param><decl><type><name pos:line="1233" pos:column="35">string</name></type> <name pos:line="1233" pos:column="42">name</name></decl></param>)</parameter_list>
            <block pos:line="1234" pos:column="13">{
                <if pos:line="1235" pos:column="17">if <condition pos:line="1235" pos:column="20">(<expr><name pos:line="1235" pos:column="21">name</name> <op:operator pos:line="1235" pos:column="26">==</op:operator> <name pos:line="1235" pos:column="29">null</name></expr>)</condition><then pos:line="1235" pos:column="34"> <throw pos:line="1235" pos:column="35">throw <expr><op:operator pos:line="1235" pos:column="41">new</op:operator> <call><name pos:line="1235" pos:column="45">ArgumentNullException</name><argument_list pos:line="1235" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="1235" pos:column="67">"name"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
                <if pos:line="1236" pos:column="17">if <condition pos:line="1236" pos:column="20">(<expr><call><name><name pos:line="1236" pos:column="21">fieldNameLookup</name><op:operator pos:line="1236" pos:column="36">.</op:operator><name pos:line="1236" pos:column="37">ContainsKey</name></name><argument_list pos:line="1236" pos:column="48">(<argument><expr><name pos:line="1236" pos:column="49">name</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1236" pos:column="55"> <throw pos:line="1236" pos:column="56">throw <expr><op:operator pos:line="1236" pos:column="62">new</op:operator> <call><name pos:line="1236" pos:column="66">InvalidOperationException</name><argument_list pos:line="1236" pos:column="91">(<argument><expr><lit:literal type="string" pos:line="1236" pos:column="92">"Field already exists: "</lit:literal> <op:operator pos:line="1236" pos:column="117">+</op:operator> <name pos:line="1236" pos:column="119">name</name></expr></argument>)</argument_list></call></expr>;</throw></then></if>
                <decl_stmt><decl><type><name pos:line="1237" pos:column="17">int</name></type> <name pos:line="1237" pos:column="21">oldLen</name> <init pos:line="1237" pos:column="28">= <expr><name><name pos:line="1237" pos:column="30">fieldNames</name><op:operator pos:line="1237" pos:column="40">.</op:operator><name pos:line="1237" pos:column="41">Length</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="1238" pos:column="17">Array</name><op:operator pos:line="1238" pos:column="22">.</op:operator><name pos:line="1238" pos:column="23">Resize</name></name><argument_list pos:line="1238" pos:column="29">(<argument><expr pos:line="1238" pos:column="30">ref <name pos:line="1238" pos:column="34">fieldNames</name></expr></argument>, <argument><expr><name pos:line="1238" pos:column="46">oldLen</name> <op:operator pos:line="1238" pos:column="53">+</op:operator> <lit:literal type="number" pos:line="1238" pos:column="55">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1238" pos:column="59">// yes, this is sub-optimal, but this is not the expected common case</comment>
                <expr_stmt><expr><name><name pos:line="1239" pos:column="17">fieldNameLookup</name><index pos:line="1239" pos:column="32">[<expr><name pos:line="1239" pos:column="33">name</name></expr>]</index></name> <op:operator pos:line="1239" pos:column="39">=</op:operator> <name pos:line="1239" pos:column="41">oldLen</name></expr>;</expr_stmt>
                <return pos:line="1240" pos:column="17">return <expr><name pos:line="1240" pos:column="24">oldLen</name></expr>;</return>
            }</block></function>


            <function><type><specifier pos:line="1244" pos:column="13">internal</specifier> <name pos:line="1244" pos:column="22">bool</name></type> <name pos:line="1244" pos:column="27">FieldExists</name><parameter_list pos:line="1244" pos:column="38">(<param><decl><type><name pos:line="1244" pos:column="39">string</name></type> <name pos:line="1244" pos:column="46">key</name></decl></param>)</parameter_list>
            <block pos:line="1245" pos:column="13">{
                <return pos:line="1246" pos:column="17">return <expr><name pos:line="1246" pos:column="24">key</name> <op:operator pos:line="1246" pos:column="28">!=</op:operator> <name pos:line="1246" pos:column="31">null</name> <op:operator pos:line="1246" pos:column="36">&amp;&amp;</op:operator> <call><name><name pos:line="1246" pos:column="39">fieldNameLookup</name><op:operator pos:line="1246" pos:column="54">.</op:operator><name pos:line="1246" pos:column="55">ContainsKey</name></name><argument_list pos:line="1246" pos:column="66">(<argument><expr><name pos:line="1246" pos:column="67">key</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>

            <decl_stmt><decl><type><specifier pos:line="1249" pos:column="13">public</specifier> <name pos:line="1249" pos:column="20">int</name></type> <name pos:line="1249" pos:column="24">FieldCount</name> <block pos:line="1249" pos:column="35">{ <function><name pos:line="1249" pos:column="37">get</name> <block pos:line="1249" pos:column="41">{ <return pos:line="1249" pos:column="43">return <expr><name><name pos:line="1249" pos:column="50">fieldNames</name><op:operator pos:line="1249" pos:column="60">.</op:operator><name pos:line="1249" pos:column="61">Length</name></name></expr>;</return> }</block></function> }</block></decl></decl_stmt>
        }</block></class>

        <class><specifier pos:line="1252" pos:column="9">sealed</specifier> <specifier pos:line="1252" pos:column="16">partial</specifier> class <name pos:line="1252" pos:column="30">DapperRowMetaObject</name> <super pos:line="1252" pos:column="50">: <name><name pos:line="1252" pos:column="52">System</name><op:operator pos:line="1252" pos:column="58">.</op:operator><name pos:line="1252" pos:column="59">Dynamic</name><op:operator pos:line="1252" pos:column="66">.</op:operator><name pos:line="1252" pos:column="67">DynamicMetaObject</name></name></super>
        <block pos:line="1253" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="1254" pos:column="13">static</specifier> <specifier pos:line="1254" pos:column="20">readonly</specifier> <name pos:line="1254" pos:column="29">MethodInfo</name></type> <name pos:line="1254" pos:column="40">getValueMethod</name> <init pos:line="1254" pos:column="55">= <expr><call><name pos:line="1254" pos:column="57">typeof</name><argument_list pos:line="1254" pos:column="63">(<argument><expr><name><name pos:line="1254" pos:column="64">IDictionary</name><argument_list pos:line="1254" pos:column="75">&lt;<argument><name pos:line="1254" pos:column="76">string</name></argument>, <argument><name pos:line="1254" pos:column="84">object</name></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call><op:operator pos:line="1254" pos:column="92">.</op:operator><call><name pos:line="1254" pos:column="93">GetProperty</name><argument_list pos:line="1254" pos:column="104">(<argument><expr><lit:literal type="string" pos:line="1254" pos:column="105">"Item"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1254" pos:column="112">.</op:operator><call><name pos:line="1254" pos:column="113">GetGetMethod</name><argument_list pos:line="1254" pos:column="125">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="1255" pos:column="13">static</specifier> <specifier pos:line="1255" pos:column="20">readonly</specifier> <name pos:line="1255" pos:column="29">MethodInfo</name></type> <name pos:line="1255" pos:column="40">setValueMethod</name> <init pos:line="1255" pos:column="55">= <expr><call><name pos:line="1255" pos:column="57">typeof</name><argument_list pos:line="1255" pos:column="63">(<argument><expr><name pos:line="1255" pos:column="64">DapperRow</name></expr></argument>)</argument_list></call><op:operator pos:line="1255" pos:column="74">.</op:operator><call><name pos:line="1255" pos:column="75">GetMethod</name><argument_list pos:line="1255" pos:column="84">(<argument><expr><lit:literal type="string" pos:line="1255" pos:column="85">"SetValue"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <constructor><specifier pos:line="1257" pos:column="13">public</specifier> <name pos:line="1257" pos:column="20">DapperRowMetaObject</name><parameter_list pos:line="1257" pos:column="39">(
                <param><decl><type><name><name pos:line="1258" pos:column="17">System</name><op:operator pos:line="1258" pos:column="23">.</op:operator><name pos:line="1258" pos:column="24">Linq</name><op:operator pos:line="1258" pos:column="28">.</op:operator><name pos:line="1258" pos:column="29">Expressions</name><op:operator pos:line="1258" pos:column="40">.</op:operator><name pos:line="1258" pos:column="41">Expression</name></name></type> <name pos:line="1258" pos:column="52">expression</name></decl></param>,
                <param><decl><type><name><name pos:line="1259" pos:column="17">System</name><op:operator pos:line="1259" pos:column="23">.</op:operator><name pos:line="1259" pos:column="24">Dynamic</name><op:operator pos:line="1259" pos:column="31">.</op:operator><name pos:line="1259" pos:column="32">BindingRestrictions</name></name></type> <name pos:line="1259" pos:column="52">restrictions</name></decl></param>
                )</parameter_list>
                <member_list pos:line="1261" pos:column="17">: <call><name pos:line="1261" pos:column="19">base</name><argument_list pos:line="1261" pos:column="23">(<argument><expr><name pos:line="1261" pos:column="24">expression</name></expr></argument>, <argument><expr><name pos:line="1261" pos:column="36">restrictions</name></expr></argument>)</argument_list></call>
            </member_list><block pos:line="1262" pos:column="13">{
            }</block></constructor>

            <constructor><specifier pos:line="1265" pos:column="13">public</specifier> <name pos:line="1265" pos:column="20">DapperRowMetaObject</name><parameter_list pos:line="1265" pos:column="39">(
                <param><decl><type><name><name pos:line="1266" pos:column="17">System</name><op:operator pos:line="1266" pos:column="23">.</op:operator><name pos:line="1266" pos:column="24">Linq</name><op:operator pos:line="1266" pos:column="28">.</op:operator><name pos:line="1266" pos:column="29">Expressions</name><op:operator pos:line="1266" pos:column="40">.</op:operator><name pos:line="1266" pos:column="41">Expression</name></name></type> <name pos:line="1266" pos:column="52">expression</name></decl></param>,
                <param><decl><type><name><name pos:line="1267" pos:column="17">System</name><op:operator pos:line="1267" pos:column="23">.</op:operator><name pos:line="1267" pos:column="24">Dynamic</name><op:operator pos:line="1267" pos:column="31">.</op:operator><name pos:line="1267" pos:column="32">BindingRestrictions</name></name></type> <name pos:line="1267" pos:column="52">restrictions</name></decl></param>,
                <param><decl><type><name pos:line="1268" pos:column="17">object</name></type> <name pos:line="1268" pos:column="24">value</name></decl></param>
                )</parameter_list>
                <member_list pos:line="1270" pos:column="17">: <call><name pos:line="1270" pos:column="19">base</name><argument_list pos:line="1270" pos:column="23">(<argument><expr><name pos:line="1270" pos:column="24">expression</name></expr></argument>, <argument><expr><name pos:line="1270" pos:column="36">restrictions</name></expr></argument>, <argument><expr><name pos:line="1270" pos:column="50">value</name></expr></argument>)</argument_list></call>
            </member_list><block pos:line="1271" pos:column="13">{
            }</block></constructor>

            <function><type><name><name pos:line="1274" pos:column="13">System</name><op:operator pos:line="1274" pos:column="19">.</op:operator><name pos:line="1274" pos:column="20">Dynamic</name><op:operator pos:line="1274" pos:column="27">.</op:operator><name pos:line="1274" pos:column="28">DynamicMetaObject</name></name></type> <name pos:line="1274" pos:column="46">CallMethod</name><parameter_list pos:line="1274" pos:column="56">(
                <param><decl><type><name pos:line="1275" pos:column="17">MethodInfo</name></type> <name pos:line="1275" pos:column="28">method</name></decl></param>,
                <param><decl><type><name><name pos:line="1276" pos:column="17">System</name><op:operator pos:line="1276" pos:column="23">.</op:operator><name pos:line="1276" pos:column="24">Linq</name><op:operator pos:line="1276" pos:column="28">.</op:operator><name pos:line="1276" pos:column="29">Expressions</name><op:operator pos:line="1276" pos:column="40">.</op:operator><name pos:line="1276" pos:column="41">Expression</name><index pos:line="1276" pos:column="51">[]</index></name></type> <name pos:line="1276" pos:column="54">parameters</name></decl></param>
                )</parameter_list>
            <block pos:line="1278" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="1279" pos:column="17">var</name></type> <name pos:line="1279" pos:column="21">callMethod</name> <init pos:line="1279" pos:column="32">= <expr><op:operator pos:line="1279" pos:column="34">new</op:operator> <call><name><name pos:line="1279" pos:column="38">System</name><op:operator pos:line="1279" pos:column="44">.</op:operator><name pos:line="1279" pos:column="45">Dynamic</name><op:operator pos:line="1279" pos:column="52">.</op:operator><name pos:line="1279" pos:column="53">DynamicMetaObject</name></name><argument_list pos:line="1279" pos:column="70">(
                    <argument><expr><call><name><name pos:line="1280" pos:column="21">System</name><op:operator pos:line="1280" pos:column="27">.</op:operator><name pos:line="1280" pos:column="28">Linq</name><op:operator pos:line="1280" pos:column="32">.</op:operator><name pos:line="1280" pos:column="33">Expressions</name><op:operator pos:line="1280" pos:column="44">.</op:operator><name pos:line="1280" pos:column="45">Expression</name><op:operator pos:line="1280" pos:column="55">.</op:operator><name pos:line="1280" pos:column="56">Call</name></name><argument_list pos:line="1280" pos:column="60">(
                        <argument><expr><call><name><name pos:line="1281" pos:column="25">System</name><op:operator pos:line="1281" pos:column="31">.</op:operator><name pos:line="1281" pos:column="32">Linq</name><op:operator pos:line="1281" pos:column="36">.</op:operator><name pos:line="1281" pos:column="37">Expressions</name><op:operator pos:line="1281" pos:column="48">.</op:operator><name pos:line="1281" pos:column="49">Expression</name><op:operator pos:line="1281" pos:column="59">.</op:operator><name pos:line="1281" pos:column="60">Convert</name></name><argument_list pos:line="1281" pos:column="67">(<argument><expr><name pos:line="1281" pos:column="68">Expression</name></expr></argument>, <argument><expr><name pos:line="1281" pos:column="80">LimitType</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name pos:line="1282" pos:column="25">method</name></expr></argument>,
                        <argument><expr><name pos:line="1283" pos:column="25">parameters</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name><name pos:line="1284" pos:column="21">System</name><op:operator pos:line="1284" pos:column="27">.</op:operator><name pos:line="1284" pos:column="28">Dynamic</name><op:operator pos:line="1284" pos:column="35">.</op:operator><name pos:line="1284" pos:column="36">BindingRestrictions</name><op:operator pos:line="1284" pos:column="55">.</op:operator><name pos:line="1284" pos:column="56">GetTypeRestriction</name></name><argument_list pos:line="1284" pos:column="74">(<argument><expr><name pos:line="1284" pos:column="75">Expression</name></expr></argument>, <argument><expr><name pos:line="1284" pos:column="87">LimitType</name></expr></argument>)</argument_list></call></expr></argument>
                    )</argument_list></call></expr></init></decl>;</decl_stmt>
                <return pos:line="1286" pos:column="17">return <expr><name pos:line="1286" pos:column="24">callMethod</name></expr>;</return>
            }</block></function>

            <function><type><specifier pos:line="1289" pos:column="13">public</specifier> <specifier pos:line="1289" pos:column="20">override</specifier> <name><name pos:line="1289" pos:column="29">System</name><op:operator pos:line="1289" pos:column="35">.</op:operator><name pos:line="1289" pos:column="36">Dynamic</name><op:operator pos:line="1289" pos:column="43">.</op:operator><name pos:line="1289" pos:column="44">DynamicMetaObject</name></name></type> <name pos:line="1289" pos:column="62">BindGetMember</name><parameter_list pos:line="1289" pos:column="75">(<param><decl><type><name><name pos:line="1289" pos:column="76">System</name><op:operator pos:line="1289" pos:column="82">.</op:operator><name pos:line="1289" pos:column="83">Dynamic</name><op:operator pos:line="1289" pos:column="90">.</op:operator><name pos:line="1289" pos:column="91">GetMemberBinder</name></name></type> <name pos:line="1289" pos:column="107">binder</name></decl></param>)</parameter_list>
            <block pos:line="1290" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="1291" pos:column="17">var</name></type> <name pos:line="1291" pos:column="21">parameters</name> <init pos:line="1291" pos:column="32">= <expr><op:operator pos:line="1291" pos:column="34">new</op:operator> <name><name pos:line="1291" pos:column="38">System</name><op:operator pos:line="1291" pos:column="44">.</op:operator><name pos:line="1291" pos:column="45">Linq</name><op:operator pos:line="1291" pos:column="49">.</op:operator><name pos:line="1291" pos:column="50">Expressions</name><op:operator pos:line="1291" pos:column="61">.</op:operator><name pos:line="1291" pos:column="62">Expression</name><index pos:line="1291" pos:column="72">[]</index></name>
                                     <block pos:line="1292" pos:column="38">{
                                         <expr><call><name><name pos:line="1293" pos:column="42">System</name><op:operator pos:line="1293" pos:column="48">.</op:operator><name pos:line="1293" pos:column="49">Linq</name><op:operator pos:line="1293" pos:column="53">.</op:operator><name pos:line="1293" pos:column="54">Expressions</name><op:operator pos:line="1293" pos:column="65">.</op:operator><name pos:line="1293" pos:column="66">Expression</name><op:operator pos:line="1293" pos:column="76">.</op:operator><name pos:line="1293" pos:column="77">Constant</name></name><argument_list pos:line="1293" pos:column="85">(<argument><expr><name><name pos:line="1293" pos:column="86">binder</name><op:operator pos:line="1293" pos:column="92">.</op:operator><name pos:line="1293" pos:column="93">Name</name></name></expr></argument>)</argument_list></call></expr>
                                     }</block></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name pos:line="1296" pos:column="17">var</name></type> <name pos:line="1296" pos:column="21">callMethod</name> <init pos:line="1296" pos:column="32">= <expr><call><name pos:line="1296" pos:column="34">CallMethod</name><argument_list pos:line="1296" pos:column="44">(<argument><expr><name pos:line="1296" pos:column="45">getValueMethod</name></expr></argument>, <argument><expr><name pos:line="1296" pos:column="61">parameters</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <return pos:line="1298" pos:column="17">return <expr><name pos:line="1298" pos:column="24">callMethod</name></expr>;</return>
            }</block></function>

            <function><type><specifier pos:line="1301" pos:column="13">public</specifier> <specifier pos:line="1301" pos:column="20">override</specifier> <name><name pos:line="1301" pos:column="29">System</name><op:operator pos:line="1301" pos:column="35">.</op:operator><name pos:line="1301" pos:column="36">Dynamic</name><op:operator pos:line="1301" pos:column="43">.</op:operator><name pos:line="1301" pos:column="44">DynamicMetaObject</name></name></type> <name pos:line="1301" pos:column="62">BindSetMember</name><parameter_list pos:line="1301" pos:column="75">(<param><decl><type><name><name pos:line="1301" pos:column="76">System</name><op:operator pos:line="1301" pos:column="82">.</op:operator><name pos:line="1301" pos:column="83">Dynamic</name><op:operator pos:line="1301" pos:column="90">.</op:operator><name pos:line="1301" pos:column="91">SetMemberBinder</name></name></type> <name pos:line="1301" pos:column="107">binder</name></decl></param>, <param><decl><type><name><name pos:line="1301" pos:column="115">System</name><op:operator pos:line="1301" pos:column="121">.</op:operator><name pos:line="1301" pos:column="122">Dynamic</name><op:operator pos:line="1301" pos:column="129">.</op:operator><name pos:line="1301" pos:column="130">DynamicMetaObject</name></name></type> <name pos:line="1301" pos:column="148">value</name></decl></param>)</parameter_list>
            <block pos:line="1302" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="1303" pos:column="17">var</name></type> <name pos:line="1303" pos:column="21">parameters</name> <init pos:line="1303" pos:column="32">= <expr><op:operator pos:line="1303" pos:column="34">new</op:operator> <name><name pos:line="1303" pos:column="38">System</name><op:operator pos:line="1303" pos:column="44">.</op:operator><name pos:line="1303" pos:column="45">Linq</name><op:operator pos:line="1303" pos:column="49">.</op:operator><name pos:line="1303" pos:column="50">Expressions</name><op:operator pos:line="1303" pos:column="61">.</op:operator><name pos:line="1303" pos:column="62">Expression</name><index pos:line="1303" pos:column="72">[]</index></name>
                                     <block pos:line="1304" pos:column="38">{
                                         <expr><call><name><name pos:line="1305" pos:column="42">System</name><op:operator pos:line="1305" pos:column="48">.</op:operator><name pos:line="1305" pos:column="49">Linq</name><op:operator pos:line="1305" pos:column="53">.</op:operator><name pos:line="1305" pos:column="54">Expressions</name><op:operator pos:line="1305" pos:column="65">.</op:operator><name pos:line="1305" pos:column="66">Expression</name><op:operator pos:line="1305" pos:column="76">.</op:operator><name pos:line="1305" pos:column="77">Constant</name></name><argument_list pos:line="1305" pos:column="85">(<argument><expr><name><name pos:line="1305" pos:column="86">binder</name><op:operator pos:line="1305" pos:column="92">.</op:operator><name pos:line="1305" pos:column="93">Name</name></name></expr></argument>)</argument_list></call></expr>,
                                         <expr><name><name pos:line="1306" pos:column="42">value</name><op:operator pos:line="1306" pos:column="47">.</op:operator><name pos:line="1306" pos:column="48">Expression</name></name></expr>,
                                     }</block></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name pos:line="1309" pos:column="17">var</name></type> <name pos:line="1309" pos:column="21">callMethod</name> <init pos:line="1309" pos:column="32">= <expr><call><name pos:line="1309" pos:column="34">CallMethod</name><argument_list pos:line="1309" pos:column="44">(<argument><expr><name pos:line="1309" pos:column="45">setValueMethod</name></expr></argument>, <argument><expr><name pos:line="1309" pos:column="61">parameters</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <return pos:line="1311" pos:column="17">return <expr><name pos:line="1311" pos:column="24">callMethod</name></expr>;</return>
            }</block></function>
        }</block></class>

        <class><specifier pos:line="1315" pos:column="9">sealed</specifier> <specifier pos:line="1315" pos:column="16">partial</specifier> class <name pos:line="1315" pos:column="30">DapperRow</name>
            <super pos:line="1316" pos:column="13">: <name><name pos:line="1316" pos:column="15">System</name><op:operator pos:line="1316" pos:column="21">.</op:operator><name pos:line="1316" pos:column="22">Dynamic</name><op:operator pos:line="1316" pos:column="29">.</op:operator><name pos:line="1316" pos:column="30">IDynamicMetaObjectProvider</name></name>
            , <name><name pos:line="1317" pos:column="15">IDictionary</name><argument_list pos:line="1317" pos:column="26">&lt;<argument><name pos:line="1317" pos:column="27">string</name></argument>, <argument><name pos:line="1317" pos:column="35">object</name></argument>&gt;</argument_list></name></super>
        <block pos:line="1318" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="1319" pos:column="13">readonly</specifier> <name pos:line="1319" pos:column="22">DapperTable</name></type> <name pos:line="1319" pos:column="34">table</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1320" pos:column="13">object</name><index pos:line="1320" pos:column="19">[]</index></type> <name pos:line="1320" pos:column="22">values</name></decl>;</decl_stmt>

            <constructor><specifier pos:line="1322" pos:column="13">public</specifier> <name pos:line="1322" pos:column="20">DapperRow</name><parameter_list pos:line="1322" pos:column="29">(<param><decl><type><name pos:line="1322" pos:column="30">DapperTable</name></type> <name pos:line="1322" pos:column="42">table</name></decl></param>, <param><decl><type><name><name pos:line="1322" pos:column="49">object</name><index pos:line="1322" pos:column="55">[]</index></name></type> <name pos:line="1322" pos:column="58">values</name></decl></param>)</parameter_list>
            <block pos:line="1323" pos:column="13">{
                <if pos:line="1324" pos:column="17">if <condition pos:line="1324" pos:column="20">(<expr><name pos:line="1324" pos:column="21">table</name> <op:operator pos:line="1324" pos:column="27">==</op:operator> <name pos:line="1324" pos:column="30">null</name></expr>)</condition><then pos:line="1324" pos:column="35"> <throw pos:line="1324" pos:column="36">throw <expr><op:operator pos:line="1324" pos:column="42">new</op:operator> <call><name pos:line="1324" pos:column="46">ArgumentNullException</name><argument_list pos:line="1324" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="1324" pos:column="68">"table"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
                <if pos:line="1325" pos:column="17">if <condition pos:line="1325" pos:column="20">(<expr><name pos:line="1325" pos:column="21">values</name> <op:operator pos:line="1325" pos:column="28">==</op:operator> <name pos:line="1325" pos:column="31">null</name></expr>)</condition><then pos:line="1325" pos:column="36"> <throw pos:line="1325" pos:column="37">throw <expr><op:operator pos:line="1325" pos:column="43">new</op:operator> <call><name pos:line="1325" pos:column="47">ArgumentNullException</name><argument_list pos:line="1325" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="1325" pos:column="69">"values"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
                <expr_stmt><expr><name><name pos:line="1326" pos:column="17">this</name><op:operator pos:line="1326" pos:column="21">.</op:operator><name pos:line="1326" pos:column="22">table</name></name> <op:operator pos:line="1326" pos:column="28">=</op:operator> <name pos:line="1326" pos:column="30">table</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="1327" pos:column="17">this</name><op:operator pos:line="1327" pos:column="21">.</op:operator><name pos:line="1327" pos:column="22">values</name></name> <op:operator pos:line="1327" pos:column="29">=</op:operator> <name pos:line="1327" pos:column="31">values</name></expr>;</expr_stmt>
            }</block></constructor>
            <class><specifier pos:line="1329" pos:column="13">private</specifier> <specifier pos:line="1329" pos:column="21">sealed</specifier> class <name pos:line="1329" pos:column="34">DeadValue</name>
            <block pos:line="1330" pos:column="13">{
                <decl_stmt><decl><type><specifier pos:line="1331" pos:column="17">public</specifier> <specifier pos:line="1331" pos:column="24">static</specifier> <specifier pos:line="1331" pos:column="31">readonly</specifier> <name pos:line="1331" pos:column="40">DeadValue</name></type> <name pos:line="1331" pos:column="50">Default</name> <init pos:line="1331" pos:column="58">= <expr><op:operator pos:line="1331" pos:column="60">new</op:operator> <call><name pos:line="1331" pos:column="64">DeadValue</name><argument_list pos:line="1331" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <constructor><specifier pos:line="1332" pos:column="17">private</specifier> <name pos:line="1332" pos:column="25">DeadValue</name><parameter_list pos:line="1332" pos:column="34">()</parameter_list> <block pos:line="1332" pos:column="37">{ }</block></constructor>
            }</block></class>
            <decl_stmt><decl><type><name pos:line="1334" pos:column="13">int</name></type> <name><name><name pos:line="1334" pos:column="17">ICollection</name><argument_list pos:line="1334" pos:column="28">&lt;<argument><name><name pos:line="1334" pos:column="29">KeyValuePair</name><argument_list pos:line="1334" pos:column="41">&lt;<argument><name pos:line="1334" pos:column="42">string</name></argument>, <argument><name pos:line="1334" pos:column="50">object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><op:operator pos:line="1334" pos:column="58">.</op:operator><name pos:line="1334" pos:column="59">Count</name></name>
            <block pos:line="1335" pos:column="13">{
                <function><name pos:line="1336" pos:column="17">get</name>
                <block pos:line="1337" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="1338" pos:column="21">int</name></type> <name pos:line="1338" pos:column="25">count</name> <init pos:line="1338" pos:column="31">= <expr><lit:literal type="number" pos:line="1338" pos:column="33">0</lit:literal></expr></init></decl>;</decl_stmt>
                    <for pos:line="1339" pos:column="21">for (<init><decl><type><name pos:line="1339" pos:column="26">int</name></type> <name pos:line="1339" pos:column="30">i</name> <init pos:line="1339" pos:column="32">= <expr><lit:literal type="number" pos:line="1339" pos:column="34">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1339" pos:column="37">i</name> <op:operator pos:line="1339" pos:column="39">&lt;</op:operator> <name><name pos:line="1339" pos:column="41">values</name><op:operator pos:line="1339" pos:column="47">.</op:operator><name pos:line="1339" pos:column="48">Length</name></name></expr>;</condition> <incr><expr><name pos:line="1339" pos:column="56">i</name><op:operator pos:line="1339" pos:column="57">++</op:operator></expr></incr>)
                    <block pos:line="1340" pos:column="21">{
                        <if pos:line="1341" pos:column="25">if <condition pos:line="1341" pos:column="28">(<expr><op:operator pos:line="1341" pos:column="29">!</op:operator><op:operator pos:line="1341" pos:column="30">(</op:operator><name><name pos:line="1341" pos:column="31">values</name><index pos:line="1341" pos:column="37">[<expr><name pos:line="1341" pos:column="38">i</name></expr>]</index></name> <op:operator pos:line="1341" pos:column="41">is</op:operator> <name pos:line="1341" pos:column="44">DeadValue</name><op:operator pos:line="1341" pos:column="53">)</op:operator></expr>)</condition><then pos:line="1341" pos:column="55"> <expr_stmt><expr><name pos:line="1341" pos:column="56">count</name><op:operator pos:line="1341" pos:column="61">++</op:operator></expr>;</expr_stmt></then></if>
                    }</block></for>
                    <return pos:line="1343" pos:column="21">return <expr><name pos:line="1343" pos:column="28">count</name></expr>;</return>
                }</block></function>
            }</block></decl></decl_stmt>

            <function><type><specifier pos:line="1347" pos:column="13">public</specifier> <name pos:line="1347" pos:column="20">bool</name></type> <name pos:line="1347" pos:column="25">TryGetValue</name><parameter_list pos:line="1347" pos:column="36">(<param><decl><type><name pos:line="1347" pos:column="37">string</name></type> <name pos:line="1347" pos:column="44">name</name></decl></param>, <param><decl><type><specifier pos:line="1347" pos:column="50">out</specifier> <name pos:line="1347" pos:column="54">object</name></type> <name pos:line="1347" pos:column="61">value</name></decl></param>)</parameter_list>
            <block pos:line="1348" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="1349" pos:column="17">var</name></type> <name pos:line="1349" pos:column="21">index</name> <init pos:line="1349" pos:column="27">= <expr><call><name><name pos:line="1349" pos:column="29">table</name><op:operator pos:line="1349" pos:column="34">.</op:operator><name pos:line="1349" pos:column="35">IndexOfName</name></name><argument_list pos:line="1349" pos:column="46">(<argument><expr><name pos:line="1349" pos:column="47">name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="1350" pos:column="17">if <condition pos:line="1350" pos:column="20">(<expr><name pos:line="1350" pos:column="21">index</name> <op:operator pos:line="1350" pos:column="27">&lt;</op:operator> <lit:literal type="number" pos:line="1350" pos:column="29">0</lit:literal></expr>)</condition><then pos:line="1350" pos:column="31">
                <block pos:line="1351" pos:column="17">{ <comment type="line" pos:line="1351" pos:column="19">// doesn't exist</comment>
                    <expr_stmt><expr><name pos:line="1352" pos:column="21">value</name> <op:operator pos:line="1352" pos:column="27">=</op:operator> <name pos:line="1352" pos:column="29">null</name></expr>;</expr_stmt>
                    <return pos:line="1353" pos:column="21">return <expr><lit:literal type="boolean" pos:line="1353" pos:column="28">false</lit:literal></expr>;</return>
                }</block></then></if>
                <comment type="line" pos:line="1355" pos:column="17">// exists, **even if** we don't have a value; consider table rows heterogeneous</comment>
                <expr_stmt><expr><name pos:line="1356" pos:column="17">value</name> <op:operator pos:line="1356" pos:column="23">=</op:operator> <name pos:line="1356" pos:column="25">index</name> <op:operator pos:line="1356" pos:column="31">&lt;</op:operator> <name><name pos:line="1356" pos:column="33">values</name><op:operator pos:line="1356" pos:column="39">.</op:operator><name pos:line="1356" pos:column="40">Length</name> <type:modifier pos:line="1356" pos:column="47">?</type:modifier></name> <name><name pos:line="1356" pos:column="49">values</name><index pos:line="1356" pos:column="55">[<expr><name pos:line="1356" pos:column="56">index</name></expr>]</index></name> <op:operator pos:line="1356" pos:column="63">:</op:operator> <name pos:line="1356" pos:column="65">null</name></expr>;</expr_stmt>
                <if pos:line="1357" pos:column="17">if <condition pos:line="1357" pos:column="20">(<expr><name pos:line="1357" pos:column="21">value</name> <op:operator pos:line="1357" pos:column="27">is</op:operator> <name pos:line="1357" pos:column="30">DeadValue</name></expr>)</condition><then pos:line="1357" pos:column="40">
                <block pos:line="1358" pos:column="17">{ <comment type="line" pos:line="1358" pos:column="19">// pretend it isn't here</comment>
                    <expr_stmt><expr><name pos:line="1359" pos:column="21">value</name> <op:operator pos:line="1359" pos:column="27">=</op:operator> <name pos:line="1359" pos:column="29">null</name></expr>;</expr_stmt>
                    <return pos:line="1360" pos:column="21">return <expr><lit:literal type="boolean" pos:line="1360" pos:column="28">false</lit:literal></expr>;</return>
                }</block></then></if>
                <return pos:line="1362" pos:column="17">return <expr><lit:literal type="boolean" pos:line="1362" pos:column="24">true</lit:literal></expr>;</return>
            }</block></function>

            <function><type><specifier pos:line="1365" pos:column="13">public</specifier> <specifier pos:line="1365" pos:column="20">override</specifier> <name pos:line="1365" pos:column="29">string</name></type> <name pos:line="1365" pos:column="36">ToString</name><parameter_list pos:line="1365" pos:column="44">()</parameter_list>
            <block pos:line="1366" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="1367" pos:column="17">var</name></type> <name pos:line="1367" pos:column="21">sb</name> <init pos:line="1367" pos:column="24">= <expr><op:operator pos:line="1367" pos:column="26">new</op:operator> <call><name pos:line="1367" pos:column="30">StringBuilder</name><argument_list pos:line="1367" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="1367" pos:column="44">"{DapperRow"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <foreach pos:line="1368" pos:column="17">foreach (<init><decl><type><name pos:line="1368" pos:column="26">var</name></type> <name pos:line="1368" pos:column="30">kv</name> <range pos:line="1368" pos:column="33">in <expr><name pos:line="1368" pos:column="36">this</name></expr></range></decl></init>)
                <block pos:line="1369" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="1370" pos:column="21">var</name></type> <name pos:line="1370" pos:column="25">value</name> <init pos:line="1370" pos:column="31">= <expr><name><name pos:line="1370" pos:column="33">kv</name><op:operator pos:line="1370" pos:column="35">.</op:operator><name pos:line="1370" pos:column="36">Value</name></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="1371" pos:column="21">sb</name><op:operator pos:line="1371" pos:column="23">.</op:operator><name pos:line="1371" pos:column="24">Append</name></name><argument_list pos:line="1371" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="1371" pos:column="31">", "</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1371" pos:column="36">.</op:operator><call><name pos:line="1371" pos:column="37">Append</name><argument_list pos:line="1371" pos:column="43">(<argument><expr><name><name pos:line="1371" pos:column="44">kv</name><op:operator pos:line="1371" pos:column="46">.</op:operator><name pos:line="1371" pos:column="47">Key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if pos:line="1372" pos:column="21">if <condition pos:line="1372" pos:column="24">(<expr><name pos:line="1372" pos:column="25">value</name> <op:operator pos:line="1372" pos:column="31">!=</op:operator> <name pos:line="1372" pos:column="34">null</name></expr>)</condition><then pos:line="1372" pos:column="39">
                    <block pos:line="1373" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="1374" pos:column="25">sb</name><op:operator pos:line="1374" pos:column="27">.</op:operator><name pos:line="1374" pos:column="28">Append</name></name><argument_list pos:line="1374" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="1374" pos:column="35">" = '"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1374" pos:column="42">.</op:operator><call><name pos:line="1374" pos:column="43">Append</name><argument_list pos:line="1374" pos:column="49">(<argument><expr><name><name pos:line="1374" pos:column="50">kv</name><op:operator pos:line="1374" pos:column="52">.</op:operator><name pos:line="1374" pos:column="53">Value</name></name></expr></argument>)</argument_list></call><op:operator pos:line="1374" pos:column="59">.</op:operator><call><name pos:line="1374" pos:column="60">Append</name><argument_list pos:line="1374" pos:column="66">(<argument><expr><lit:literal type="char" pos:line="1374" pos:column="67">'\''</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else pos:line="1376" pos:column="21">else
                    <block pos:line="1377" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="1378" pos:column="25">sb</name><op:operator pos:line="1378" pos:column="27">.</op:operator><name pos:line="1378" pos:column="28">Append</name></name><argument_list pos:line="1378" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="1378" pos:column="35">" = NULL"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></foreach>

                <return pos:line="1382" pos:column="17">return <expr><call><name><name pos:line="1382" pos:column="24">sb</name><op:operator pos:line="1382" pos:column="26">.</op:operator><name pos:line="1382" pos:column="27">Append</name></name><argument_list pos:line="1382" pos:column="33">(<argument><expr><lit:literal type="char" pos:line="1382" pos:column="34">'}'</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1382" pos:column="38">.</op:operator><call><name pos:line="1382" pos:column="39">ToString</name><argument_list pos:line="1382" pos:column="47">()</argument_list></call></expr>;</return>
            }</block></function>

            <function><type><name><name pos:line="1385" pos:column="13">System</name><op:operator pos:line="1385" pos:column="19">.</op:operator><name pos:line="1385" pos:column="20">Dynamic</name><op:operator pos:line="1385" pos:column="27">.</op:operator><name pos:line="1385" pos:column="28">DynamicMetaObject</name></name></type> <name><name pos:line="1385" pos:column="46">System</name><op:operator pos:line="1385" pos:column="52">.</op:operator><name pos:line="1385" pos:column="53">Dynamic</name><op:operator pos:line="1385" pos:column="60">.</op:operator><name pos:line="1385" pos:column="61">IDynamicMetaObjectProvider</name><op:operator pos:line="1385" pos:column="87">.</op:operator><name pos:line="1385" pos:column="88">GetMetaObject</name></name><parameter_list pos:line="1385" pos:column="101">(
                <param><decl><type><name><name pos:line="1386" pos:column="17">System</name><op:operator pos:line="1386" pos:column="23">.</op:operator><name pos:line="1386" pos:column="24">Linq</name><op:operator pos:line="1386" pos:column="28">.</op:operator><name pos:line="1386" pos:column="29">Expressions</name><op:operator pos:line="1386" pos:column="40">.</op:operator><name pos:line="1386" pos:column="41">Expression</name></name></type> <name pos:line="1386" pos:column="52">parameter</name></decl></param>)</parameter_list>
            <block pos:line="1387" pos:column="13">{
                <return pos:line="1388" pos:column="17">return <expr><op:operator pos:line="1388" pos:column="24">new</op:operator> <call><name pos:line="1388" pos:column="28">DapperRowMetaObject</name><argument_list pos:line="1388" pos:column="47">(<argument><expr><name pos:line="1388" pos:column="48">parameter</name></expr></argument>, <argument><expr><name><name pos:line="1388" pos:column="59">System</name><op:operator pos:line="1388" pos:column="65">.</op:operator><name pos:line="1388" pos:column="66">Dynamic</name><op:operator pos:line="1388" pos:column="73">.</op:operator><name pos:line="1388" pos:column="74">BindingRestrictions</name><op:operator pos:line="1388" pos:column="93">.</op:operator><name pos:line="1388" pos:column="94">Empty</name></name></expr></argument>, <argument><expr><name pos:line="1388" pos:column="101">this</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>

            <function><type><specifier pos:line="1391" pos:column="13">public</specifier> <name><name pos:line="1391" pos:column="20">IEnumerator</name><argument_list pos:line="1391" pos:column="31">&lt;<argument><name><name pos:line="1391" pos:column="32">KeyValuePair</name><argument_list pos:line="1391" pos:column="44">&lt;<argument><name pos:line="1391" pos:column="45">string</name></argument>, <argument><name pos:line="1391" pos:column="53">object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="1391" pos:column="62">GetEnumerator</name><parameter_list pos:line="1391" pos:column="75">()</parameter_list>
            <block pos:line="1392" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="1393" pos:column="17">var</name></type> <name pos:line="1393" pos:column="21">names</name> <init pos:line="1393" pos:column="27">= <expr><name><name pos:line="1393" pos:column="29">table</name><op:operator pos:line="1393" pos:column="34">.</op:operator><name pos:line="1393" pos:column="35">FieldNames</name></name></expr></init></decl>;</decl_stmt>
                <for pos:line="1394" pos:column="17">for (<init><decl><type><name pos:line="1394" pos:column="22">var</name></type> <name pos:line="1394" pos:column="26">i</name> <init pos:line="1394" pos:column="28">= <expr><lit:literal type="number" pos:line="1394" pos:column="30">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1394" pos:column="33">i</name> <op:operator pos:line="1394" pos:column="35">&lt;</op:operator> <name><name pos:line="1394" pos:column="37">names</name><op:operator pos:line="1394" pos:column="42">.</op:operator><name pos:line="1394" pos:column="43">Length</name></name></expr>;</condition> <incr><expr><name pos:line="1394" pos:column="51">i</name><op:operator pos:line="1394" pos:column="52">++</op:operator></expr></incr>)
                <block pos:line="1395" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="1396" pos:column="21">object</name></type> <name pos:line="1396" pos:column="28">value</name> <init pos:line="1396" pos:column="34">= <expr><name pos:line="1396" pos:column="36">i</name> <op:operator pos:line="1396" pos:column="38">&lt;</op:operator> <name><name pos:line="1396" pos:column="40">values</name><op:operator pos:line="1396" pos:column="46">.</op:operator><name pos:line="1396" pos:column="47">Length</name> <type:modifier pos:line="1396" pos:column="54">?</type:modifier></name> <name><name pos:line="1396" pos:column="56">values</name><index pos:line="1396" pos:column="62">[<expr><name pos:line="1396" pos:column="63">i</name></expr>]</index></name> <op:operator pos:line="1396" pos:column="66">:</op:operator> <name pos:line="1396" pos:column="68">null</name></expr></init></decl>;</decl_stmt>
                    <if pos:line="1397" pos:column="21">if <condition pos:line="1397" pos:column="24">(<expr><op:operator pos:line="1397" pos:column="25">!</op:operator><op:operator pos:line="1397" pos:column="26">(</op:operator><name pos:line="1397" pos:column="27">value</name> <op:operator pos:line="1397" pos:column="33">is</op:operator> <name pos:line="1397" pos:column="36">DeadValue</name><op:operator pos:line="1397" pos:column="45">)</op:operator></expr>)</condition><then pos:line="1397" pos:column="47">
                    <block pos:line="1398" pos:column="21">{
                        <return><specifier pos:line="1399" pos:column="25">yield</specifier> return <expr><op:operator pos:line="1399" pos:column="38">new</op:operator> <call><name><name pos:line="1399" pos:column="42">KeyValuePair</name><argument_list pos:line="1399" pos:column="54">&lt;<argument><name pos:line="1399" pos:column="55">string</name></argument>, <argument><name pos:line="1399" pos:column="63">object</name></argument>&gt;</argument_list></name><argument_list pos:line="1399" pos:column="70">(<argument><expr><name><name pos:line="1399" pos:column="71">names</name><index pos:line="1399" pos:column="76">[<expr><name pos:line="1399" pos:column="77">i</name></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="1399" pos:column="81">value</name></expr></argument>)</argument_list></call></expr>;</return>
                    }</block></then></if>
                }</block></for>
            }</block></function>

            <function><type><name pos:line="1404" pos:column="13">IEnumerator</name></type> <name><name pos:line="1404" pos:column="25">IEnumerable</name><op:operator pos:line="1404" pos:column="36">.</op:operator><name pos:line="1404" pos:column="37">GetEnumerator</name></name><parameter_list pos:line="1404" pos:column="50">()</parameter_list>
            <block pos:line="1405" pos:column="13">{
                <return pos:line="1406" pos:column="17">return <expr><call><name pos:line="1406" pos:column="24">GetEnumerator</name><argument_list pos:line="1406" pos:column="37">()</argument_list></call></expr>;</return>
            }</block></function>

            <cpp:region pos:line="1409" pos:column="13">#<cpp:directive pos:line="1409" pos:column="14">region</cpp:directive> Implementation of ICollection&lt;KeyValuePair&lt;string,object&gt;&gt;</cpp:region>

            <function><type><name pos:line="1411" pos:column="13">void</name></type> <name><name><name pos:line="1411" pos:column="18">ICollection</name><argument_list pos:line="1411" pos:column="29">&lt;<argument><name><name pos:line="1411" pos:column="30">KeyValuePair</name><argument_list pos:line="1411" pos:column="42">&lt;<argument><name pos:line="1411" pos:column="43">string</name></argument>, <argument><name pos:line="1411" pos:column="51">object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><op:operator pos:line="1411" pos:column="59">.</op:operator><name pos:line="1411" pos:column="60">Add</name></name><parameter_list pos:line="1411" pos:column="63">(<param><decl><type><name><name pos:line="1411" pos:column="64">KeyValuePair</name><argument_list pos:line="1411" pos:column="76">&lt;<argument><name pos:line="1411" pos:column="77">string</name></argument>, <argument><name pos:line="1411" pos:column="85">object</name></argument>&gt;</argument_list></name></type> <name pos:line="1411" pos:column="93">item</name></decl></param>)</parameter_list>
            <block pos:line="1412" pos:column="13">{
                <decl_stmt><decl><type><name><name pos:line="1413" pos:column="17">IDictionary</name><argument_list pos:line="1413" pos:column="28">&lt;<argument><name pos:line="1413" pos:column="29">string</name></argument>, <argument><name pos:line="1413" pos:column="37">object</name></argument>&gt;</argument_list></name></type> <name pos:line="1413" pos:column="45">dic</name> <init pos:line="1413" pos:column="49">= <expr><name pos:line="1413" pos:column="51">this</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="1414" pos:column="17">dic</name><op:operator pos:line="1414" pos:column="20">.</op:operator><name pos:line="1414" pos:column="21">Add</name></name><argument_list pos:line="1414" pos:column="24">(<argument><expr><name><name pos:line="1414" pos:column="25">item</name><op:operator pos:line="1414" pos:column="29">.</op:operator><name pos:line="1414" pos:column="30">Key</name></name></expr></argument>, <argument><expr><name><name pos:line="1414" pos:column="35">item</name><op:operator pos:line="1414" pos:column="39">.</op:operator><name pos:line="1414" pos:column="40">Value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <function><type><name pos:line="1417" pos:column="13">void</name></type> <name><name><name pos:line="1417" pos:column="18">ICollection</name><argument_list pos:line="1417" pos:column="29">&lt;<argument><name><name pos:line="1417" pos:column="30">KeyValuePair</name><argument_list pos:line="1417" pos:column="42">&lt;<argument><name pos:line="1417" pos:column="43">string</name></argument>, <argument><name pos:line="1417" pos:column="51">object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><op:operator pos:line="1417" pos:column="59">.</op:operator><name pos:line="1417" pos:column="60">Clear</name></name><parameter_list pos:line="1417" pos:column="65">()</parameter_list>
            <block pos:line="1418" pos:column="13">{ <comment type="line" pos:line="1418" pos:column="15">// removes values for **this row**, but doesn't change the fundamental table</comment>
                <for pos:line="1419" pos:column="17">for (<init><decl><type><name pos:line="1419" pos:column="22">int</name></type> <name pos:line="1419" pos:column="26">i</name> <init pos:line="1419" pos:column="28">= <expr><lit:literal type="number" pos:line="1419" pos:column="30">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1419" pos:column="33">i</name> <op:operator pos:line="1419" pos:column="35">&lt;</op:operator> <name><name pos:line="1419" pos:column="37">values</name><op:operator pos:line="1419" pos:column="43">.</op:operator><name pos:line="1419" pos:column="44">Length</name></name></expr>;</condition> <incr><expr><name pos:line="1419" pos:column="52">i</name><op:operator pos:line="1419" pos:column="53">++</op:operator></expr></incr>)
                    <expr_stmt><expr><name><name pos:line="1420" pos:column="21">values</name><index pos:line="1420" pos:column="27">[<expr><name pos:line="1420" pos:column="28">i</name></expr>]</index></name> <op:operator pos:line="1420" pos:column="31">=</op:operator> <name><name pos:line="1420" pos:column="33">DeadValue</name><op:operator pos:line="1420" pos:column="42">.</op:operator><name pos:line="1420" pos:column="43">Default</name></name></expr>;</expr_stmt></for>
            }</block></function>

            <function><type><name pos:line="1423" pos:column="13">bool</name></type> <name><name><name pos:line="1423" pos:column="18">ICollection</name><argument_list pos:line="1423" pos:column="29">&lt;<argument><name><name pos:line="1423" pos:column="30">KeyValuePair</name><argument_list pos:line="1423" pos:column="42">&lt;<argument><name pos:line="1423" pos:column="43">string</name></argument>, <argument><name pos:line="1423" pos:column="51">object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><op:operator pos:line="1423" pos:column="59">.</op:operator><name pos:line="1423" pos:column="60">Contains</name></name><parameter_list pos:line="1423" pos:column="68">(<param><decl><type><name><name pos:line="1423" pos:column="69">KeyValuePair</name><argument_list pos:line="1423" pos:column="81">&lt;<argument><name pos:line="1423" pos:column="82">string</name></argument>, <argument><name pos:line="1423" pos:column="90">object</name></argument>&gt;</argument_list></name></type> <name pos:line="1423" pos:column="98">item</name></decl></param>)</parameter_list>
            <block pos:line="1424" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="1425" pos:column="17">object</name></type> <name pos:line="1425" pos:column="24">value</name></decl>;</decl_stmt>
                <return pos:line="1426" pos:column="17">return <expr><call><name pos:line="1426" pos:column="24">TryGetValue</name><argument_list pos:line="1426" pos:column="35">(<argument><expr><name><name pos:line="1426" pos:column="36">item</name><op:operator pos:line="1426" pos:column="40">.</op:operator><name pos:line="1426" pos:column="41">Key</name></name></expr></argument>, <argument><expr pos:line="1426" pos:column="46">out <name pos:line="1426" pos:column="50">value</name></expr></argument>)</argument_list></call> <op:operator pos:line="1426" pos:column="57">&amp;&amp;</op:operator> <call><name pos:line="1426" pos:column="60">Equals</name><argument_list pos:line="1426" pos:column="66">(<argument><expr><name pos:line="1426" pos:column="67">value</name></expr></argument>, <argument><expr><name><name pos:line="1426" pos:column="74">item</name><op:operator pos:line="1426" pos:column="78">.</op:operator><name pos:line="1426" pos:column="79">Value</name></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>

            <function><type><name pos:line="1429" pos:column="13">void</name></type> <name><name><name pos:line="1429" pos:column="18">ICollection</name><argument_list pos:line="1429" pos:column="29">&lt;<argument><name><name pos:line="1429" pos:column="30">KeyValuePair</name><argument_list pos:line="1429" pos:column="42">&lt;<argument><name pos:line="1429" pos:column="43">string</name></argument>, <argument><name pos:line="1429" pos:column="51">object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><op:operator pos:line="1429" pos:column="59">.</op:operator><name pos:line="1429" pos:column="60">CopyTo</name></name><parameter_list pos:line="1429" pos:column="66">(<param><decl><type><name><name><name pos:line="1429" pos:column="67">KeyValuePair</name><argument_list pos:line="1429" pos:column="79">&lt;<argument><name pos:line="1429" pos:column="80">string</name></argument>, <argument><name pos:line="1429" pos:column="88">object</name></argument>&gt;</argument_list></name><index pos:line="1429" pos:column="95">[]</index></name></type> <name pos:line="1429" pos:column="98">array</name></decl></param>, <param><decl><type><name pos:line="1429" pos:column="105">int</name></type> <name pos:line="1429" pos:column="109">arrayIndex</name></decl></param>)</parameter_list>
            <block pos:line="1430" pos:column="13">{
                <foreach pos:line="1431" pos:column="17">foreach (<init><decl><type><name pos:line="1431" pos:column="26">var</name></type> <name pos:line="1431" pos:column="30">kv</name> <range pos:line="1431" pos:column="33">in <expr><name pos:line="1431" pos:column="36">this</name></expr></range></decl></init>)
                <block pos:line="1432" pos:column="17">{
                    <expr_stmt><expr><name><name pos:line="1433" pos:column="21">array</name><index pos:line="1433" pos:column="26">[<expr><name pos:line="1433" pos:column="27">arrayIndex</name><op:operator pos:line="1433" pos:column="37">++</op:operator></expr>]</index></name> <op:operator pos:line="1433" pos:column="41">=</op:operator> <name pos:line="1433" pos:column="43">kv</name></expr>;</expr_stmt> <comment type="line" pos:line="1433" pos:column="47">// if they didn't leave enough space; not our fault</comment>
                }</block></foreach>
            }</block></function>

            <function><type><name pos:line="1437" pos:column="13">bool</name></type> <name><name><name pos:line="1437" pos:column="18">ICollection</name><argument_list pos:line="1437" pos:column="29">&lt;<argument><name><name pos:line="1437" pos:column="30">KeyValuePair</name><argument_list pos:line="1437" pos:column="42">&lt;<argument><name pos:line="1437" pos:column="43">string</name></argument>, <argument><name pos:line="1437" pos:column="51">object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><op:operator pos:line="1437" pos:column="59">.</op:operator><name pos:line="1437" pos:column="60">Remove</name></name><parameter_list pos:line="1437" pos:column="66">(<param><decl><type><name><name pos:line="1437" pos:column="67">KeyValuePair</name><argument_list pos:line="1437" pos:column="79">&lt;<argument><name pos:line="1437" pos:column="80">string</name></argument>, <argument><name pos:line="1437" pos:column="88">object</name></argument>&gt;</argument_list></name></type> <name pos:line="1437" pos:column="96">item</name></decl></param>)</parameter_list>
            <block pos:line="1438" pos:column="13">{
                <decl_stmt><decl><type><name><name pos:line="1439" pos:column="17">IDictionary</name><argument_list pos:line="1439" pos:column="28">&lt;<argument><name pos:line="1439" pos:column="29">string</name></argument>, <argument><name pos:line="1439" pos:column="37">object</name></argument>&gt;</argument_list></name></type> <name pos:line="1439" pos:column="45">dic</name> <init pos:line="1439" pos:column="49">= <expr><name pos:line="1439" pos:column="51">this</name></expr></init></decl>;</decl_stmt>
                <return pos:line="1440" pos:column="17">return <expr><call><name><name pos:line="1440" pos:column="24">dic</name><op:operator pos:line="1440" pos:column="27">.</op:operator><name pos:line="1440" pos:column="28">Remove</name></name><argument_list pos:line="1440" pos:column="34">(<argument><expr><name><name pos:line="1440" pos:column="35">item</name><op:operator pos:line="1440" pos:column="39">.</op:operator><name pos:line="1440" pos:column="40">Key</name></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>

            <decl_stmt><decl><type><name pos:line="1443" pos:column="13">bool</name></type> <name><name><name pos:line="1443" pos:column="18">ICollection</name><argument_list pos:line="1443" pos:column="29">&lt;<argument><name><name pos:line="1443" pos:column="30">KeyValuePair</name><argument_list pos:line="1443" pos:column="42">&lt;<argument><name pos:line="1443" pos:column="43">string</name></argument>, <argument><name pos:line="1443" pos:column="51">object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><op:operator pos:line="1443" pos:column="59">.</op:operator><name pos:line="1443" pos:column="60">IsReadOnly</name></name>
            <block pos:line="1444" pos:column="13">{
                <function><name pos:line="1445" pos:column="17">get</name> <block pos:line="1445" pos:column="21">{ <return pos:line="1445" pos:column="23">return <expr><lit:literal type="boolean" pos:line="1445" pos:column="30">false</lit:literal></expr>;</return> }</block></function>
            }</block></decl></decl_stmt>

            <cpp:endregion pos:line="1448" pos:column="13">#<cpp:directive pos:line="1448" pos:column="14">endregion</cpp:directive></cpp:endregion>

            <cpp:region pos:line="1450" pos:column="13">#<cpp:directive pos:line="1450" pos:column="14">region</cpp:directive> Implementation of IDictionary&lt;string,object&gt;</cpp:region>

            <function><type><name pos:line="1452" pos:column="13">bool</name></type> <name><name><name pos:line="1452" pos:column="18">IDictionary</name><argument_list pos:line="1452" pos:column="29">&lt;<argument><name pos:line="1452" pos:column="30">string</name></argument>, <argument><name pos:line="1452" pos:column="38">object</name></argument>&gt;</argument_list></name><op:operator pos:line="1452" pos:column="45">.</op:operator><name pos:line="1452" pos:column="46">ContainsKey</name></name><parameter_list pos:line="1452" pos:column="57">(<param><decl><type><name pos:line="1452" pos:column="58">string</name></type> <name pos:line="1452" pos:column="65">key</name></decl></param>)</parameter_list>
            <block pos:line="1453" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="1454" pos:column="17">int</name></type> <name pos:line="1454" pos:column="21">index</name> <init pos:line="1454" pos:column="27">= <expr><call><name><name pos:line="1454" pos:column="29">table</name><op:operator pos:line="1454" pos:column="34">.</op:operator><name pos:line="1454" pos:column="35">IndexOfName</name></name><argument_list pos:line="1454" pos:column="46">(<argument><expr><name pos:line="1454" pos:column="47">key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="1455" pos:column="17">if <condition pos:line="1455" pos:column="20">(<expr><name><name pos:line="1455" pos:column="21">index</name> <argument_list pos:line="1455" pos:column="27">&lt; <argument><lit:literal type="number" pos:line="1455" pos:column="29">0</lit:literal> <op:operator pos:line="1455" pos:column="31">||</op:operator> <name pos:line="1455" pos:column="34">index</name></argument> &gt;</argument_list></name><op:operator pos:line="1455" pos:column="41">=</op:operator> <name><name pos:line="1455" pos:column="43">values</name><op:operator pos:line="1455" pos:column="49">.</op:operator><name pos:line="1455" pos:column="50">Length</name></name> <op:operator pos:line="1455" pos:column="57">||</op:operator> <name><name pos:line="1455" pos:column="60">values</name><index pos:line="1455" pos:column="66">[<expr><name pos:line="1455" pos:column="67">index</name></expr>]</index></name> <op:operator pos:line="1455" pos:column="74">is</op:operator> <name pos:line="1455" pos:column="77">DeadValue</name></expr>)</condition><then pos:line="1455" pos:column="87"> <return pos:line="1455" pos:column="88">return <expr><lit:literal type="boolean" pos:line="1455" pos:column="95">false</lit:literal></expr>;</return></then></if>
                <return pos:line="1456" pos:column="17">return <expr><lit:literal type="boolean" pos:line="1456" pos:column="24">true</lit:literal></expr>;</return>
            }</block></function>

            <function><type><name pos:line="1459" pos:column="13">void</name></type> <name><name><name pos:line="1459" pos:column="18">IDictionary</name><argument_list pos:line="1459" pos:column="29">&lt;<argument><name pos:line="1459" pos:column="30">string</name></argument>, <argument><name pos:line="1459" pos:column="38">object</name></argument>&gt;</argument_list></name><op:operator pos:line="1459" pos:column="45">.</op:operator><name pos:line="1459" pos:column="46">Add</name></name><parameter_list pos:line="1459" pos:column="49">(<param><decl><type><name pos:line="1459" pos:column="50">string</name></type> <name pos:line="1459" pos:column="57">key</name></decl></param>, <param><decl><type><name pos:line="1459" pos:column="62">object</name></type> <name pos:line="1459" pos:column="69">value</name></decl></param>)</parameter_list>
            <block pos:line="1460" pos:column="13">{
                <decl_stmt><decl><type><name><name pos:line="1461" pos:column="17">IDictionary</name><argument_list pos:line="1461" pos:column="28">&lt;<argument><name pos:line="1461" pos:column="29">string</name></argument>, <argument><name pos:line="1461" pos:column="37">object</name></argument>&gt;</argument_list></name></type> <name pos:line="1461" pos:column="45">dic</name> <init pos:line="1461" pos:column="49">= <expr><name pos:line="1461" pos:column="51">this</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name pos:line="1462" pos:column="17">dic</name><index pos:line="1462" pos:column="20">[<expr><name pos:line="1462" pos:column="21">key</name></expr>]</index></name> <op:operator pos:line="1462" pos:column="26">=</op:operator> <name pos:line="1462" pos:column="28">value</name></expr>;</expr_stmt>
            }</block></function>

            <function><type><name pos:line="1465" pos:column="13">bool</name></type> <name><name><name pos:line="1465" pos:column="18">IDictionary</name><argument_list pos:line="1465" pos:column="29">&lt;<argument><name pos:line="1465" pos:column="30">string</name></argument>, <argument><name pos:line="1465" pos:column="38">object</name></argument>&gt;</argument_list></name><op:operator pos:line="1465" pos:column="45">.</op:operator><name pos:line="1465" pos:column="46">Remove</name></name><parameter_list pos:line="1465" pos:column="52">(<param><decl><type><name pos:line="1465" pos:column="53">string</name></type> <name pos:line="1465" pos:column="60">key</name></decl></param>)</parameter_list>
            <block pos:line="1466" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="1467" pos:column="17">int</name></type> <name pos:line="1467" pos:column="21">index</name> <init pos:line="1467" pos:column="27">= <expr><call><name><name pos:line="1467" pos:column="29">table</name><op:operator pos:line="1467" pos:column="34">.</op:operator><name pos:line="1467" pos:column="35">IndexOfName</name></name><argument_list pos:line="1467" pos:column="46">(<argument><expr><name pos:line="1467" pos:column="47">key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="1468" pos:column="17">if <condition pos:line="1468" pos:column="20">(<expr><name><name pos:line="1468" pos:column="21">index</name> <argument_list pos:line="1468" pos:column="27">&lt; <argument><lit:literal type="number" pos:line="1468" pos:column="29">0</lit:literal> <op:operator pos:line="1468" pos:column="31">||</op:operator> <name pos:line="1468" pos:column="34">index</name></argument> &gt;</argument_list></name><op:operator pos:line="1468" pos:column="41">=</op:operator> <name><name pos:line="1468" pos:column="43">values</name><op:operator pos:line="1468" pos:column="49">.</op:operator><name pos:line="1468" pos:column="50">Length</name></name> <op:operator pos:line="1468" pos:column="57">||</op:operator> <name><name pos:line="1468" pos:column="60">values</name><index pos:line="1468" pos:column="66">[<expr><name pos:line="1468" pos:column="67">index</name></expr>]</index></name> <op:operator pos:line="1468" pos:column="74">is</op:operator> <name pos:line="1468" pos:column="77">DeadValue</name></expr>)</condition><then pos:line="1468" pos:column="87"> <return pos:line="1468" pos:column="88">return <expr><lit:literal type="boolean" pos:line="1468" pos:column="95">false</lit:literal></expr>;</return></then></if>
                <expr_stmt><expr><name><name pos:line="1469" pos:column="17">values</name><index pos:line="1469" pos:column="23">[<expr><name pos:line="1469" pos:column="24">index</name></expr>]</index></name> <op:operator pos:line="1469" pos:column="31">=</op:operator> <name><name pos:line="1469" pos:column="33">DeadValue</name><op:operator pos:line="1469" pos:column="42">.</op:operator><name pos:line="1469" pos:column="43">Default</name></name></expr>;</expr_stmt>
                <return pos:line="1470" pos:column="17">return <expr><lit:literal type="boolean" pos:line="1470" pos:column="24">true</lit:literal></expr>;</return>
            }</block></function>

            <decl_stmt><decl><type><name pos:line="1473" pos:column="13">object</name></type> <name><name><name pos:line="1473" pos:column="20">IDictionary</name><argument_list pos:line="1473" pos:column="31">&lt;<argument><name pos:line="1473" pos:column="32">string</name></argument>, <argument><name pos:line="1473" pos:column="40">object</name></argument>&gt;</argument_list></name><op:operator pos:line="1473" pos:column="47">.</op:operator><name pos:line="1473" pos:column="48">this</name></name>[<name pos:line="1473" pos:column="53">string</name> <name pos:line="1473" pos:column="60">key</name>]
            <block pos:line="1474" pos:column="13">{
                <function><name pos:line="1475" pos:column="17">get</name> <block pos:line="1475" pos:column="21">{ <decl_stmt><decl><type><name pos:line="1475" pos:column="23">object</name></type> <name pos:line="1475" pos:column="30">val</name></decl>;</decl_stmt> <expr_stmt><expr><call><name pos:line="1475" pos:column="35">TryGetValue</name><argument_list pos:line="1475" pos:column="46">(<argument><expr><name pos:line="1475" pos:column="47">key</name></expr></argument>, <argument><expr pos:line="1475" pos:column="52">out <name pos:line="1475" pos:column="56">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return pos:line="1475" pos:column="62">return <expr><name pos:line="1475" pos:column="69">val</name></expr>;</return> }</block></function>
                <function><name pos:line="1476" pos:column="17">set</name> <block pos:line="1476" pos:column="21">{ <expr_stmt><expr><call><name pos:line="1476" pos:column="23">SetValue</name><argument_list pos:line="1476" pos:column="31">(<argument><expr><name pos:line="1476" pos:column="32">key</name></expr></argument>, <argument><expr><name pos:line="1476" pos:column="37">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
            }</block></decl></decl_stmt>
            <function><type><specifier pos:line="1478" pos:column="13">public</specifier> <name pos:line="1478" pos:column="20">object</name></type> <name pos:line="1478" pos:column="27">SetValue</name><parameter_list pos:line="1478" pos:column="35">(<param><decl><type><name pos:line="1478" pos:column="36">string</name></type> <name pos:line="1478" pos:column="43">key</name></decl></param>, <param><decl><type><name pos:line="1478" pos:column="48">object</name></type> <name pos:line="1478" pos:column="55">value</name></decl></param>)</parameter_list>
            <block pos:line="1479" pos:column="13">{
                <if pos:line="1480" pos:column="17">if <condition pos:line="1480" pos:column="20">(<expr><name pos:line="1480" pos:column="21">key</name> <op:operator pos:line="1480" pos:column="25">==</op:operator> <name pos:line="1480" pos:column="28">null</name></expr>)</condition><then pos:line="1480" pos:column="33"> <throw pos:line="1480" pos:column="34">throw <expr><op:operator pos:line="1480" pos:column="40">new</op:operator> <call><name pos:line="1480" pos:column="44">ArgumentNullException</name><argument_list pos:line="1480" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="1480" pos:column="66">"key"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
                <decl_stmt><decl><type><name pos:line="1481" pos:column="17">int</name></type> <name pos:line="1481" pos:column="21">index</name> <init pos:line="1481" pos:column="27">= <expr><call><name><name pos:line="1481" pos:column="29">table</name><op:operator pos:line="1481" pos:column="34">.</op:operator><name pos:line="1481" pos:column="35">IndexOfName</name></name><argument_list pos:line="1481" pos:column="46">(<argument><expr><name pos:line="1481" pos:column="47">key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="1482" pos:column="17">if <condition pos:line="1482" pos:column="20">(<expr><name pos:line="1482" pos:column="21">index</name> <op:operator pos:line="1482" pos:column="27">&lt;</op:operator> <lit:literal type="number" pos:line="1482" pos:column="29">0</lit:literal></expr>)</condition><then pos:line="1482" pos:column="31">
                <block pos:line="1483" pos:column="17">{
                    <expr_stmt><expr><name pos:line="1484" pos:column="21">index</name> <op:operator pos:line="1484" pos:column="27">=</op:operator> <call><name><name pos:line="1484" pos:column="29">table</name><op:operator pos:line="1484" pos:column="34">.</op:operator><name pos:line="1484" pos:column="35">AddField</name></name><argument_list pos:line="1484" pos:column="43">(<argument><expr><name pos:line="1484" pos:column="44">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <if pos:line="1486" pos:column="17">if <condition pos:line="1486" pos:column="20">(<expr><name><name pos:line="1486" pos:column="21">values</name><op:operator pos:line="1486" pos:column="27">.</op:operator><name pos:line="1486" pos:column="28">Length</name></name> <op:operator pos:line="1486" pos:column="35">&lt;=</op:operator> <name pos:line="1486" pos:column="38">index</name></expr>)</condition><then pos:line="1486" pos:column="44">
                <block pos:line="1487" pos:column="17">{   <comment type="line" pos:line="1487" pos:column="21">// we'll assume they're doing lots of things, and</comment>
                    <comment type="line" pos:line="1488" pos:column="21">// grow it to the full width of the table</comment>
                    <expr_stmt><expr><call><name><name pos:line="1489" pos:column="21">Array</name><op:operator pos:line="1489" pos:column="26">.</op:operator><name pos:line="1489" pos:column="27">Resize</name></name><argument_list pos:line="1489" pos:column="33">(<argument><expr pos:line="1489" pos:column="34">ref <name pos:line="1489" pos:column="38">values</name></expr></argument>, <argument><expr><name><name pos:line="1489" pos:column="46">table</name><op:operator pos:line="1489" pos:column="51">.</op:operator><name pos:line="1489" pos:column="52">FieldCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <return pos:line="1491" pos:column="17">return <expr><name><name pos:line="1491" pos:column="24">values</name><index pos:line="1491" pos:column="30">[<expr><name pos:line="1491" pos:column="31">index</name></expr>]</index></name> <op:operator pos:line="1491" pos:column="38">=</op:operator> <name pos:line="1491" pos:column="40">value</name></expr>;</return>
            }</block></function>

            <decl_stmt><decl><type><name><name pos:line="1494" pos:column="13">ICollection</name><argument_list pos:line="1494" pos:column="24">&lt;<argument><name pos:line="1494" pos:column="25">string</name></argument>&gt;</argument_list></name></type> <name><name><name pos:line="1494" pos:column="33">IDictionary</name><argument_list pos:line="1494" pos:column="44">&lt;<argument><name pos:line="1494" pos:column="45">string</name></argument>, <argument><name pos:line="1494" pos:column="53">object</name></argument>&gt;</argument_list></name><op:operator pos:line="1494" pos:column="60">.</op:operator><name pos:line="1494" pos:column="61">Keys</name></name>
            <block pos:line="1495" pos:column="13">{
                <function><name pos:line="1496" pos:column="17">get</name> <block pos:line="1496" pos:column="21">{ <return pos:line="1496" pos:column="23">return <expr><call><name><name pos:line="1496" pos:column="30">this</name><op:operator pos:line="1496" pos:column="34">.</op:operator><name pos:line="1496" pos:column="35">Select</name></name><argument_list pos:line="1496" pos:column="41">(<argument><expr><lambda><name pos:line="1496" pos:column="42">kv</name> <op:operator pos:line="1496" pos:column="45">=&gt;</op:operator> <name><name pos:line="1496" pos:column="48">kv</name><op:operator pos:line="1496" pos:column="50">.</op:operator><name pos:line="1496" pos:column="51">Key</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="1496" pos:column="55">.</op:operator><call><name pos:line="1496" pos:column="56">ToArray</name><argument_list pos:line="1496" pos:column="63">()</argument_list></call></expr>;</return> }</block></function>
            }</block></decl></decl_stmt>

            <decl_stmt><decl><type><name><name pos:line="1499" pos:column="13">ICollection</name><argument_list pos:line="1499" pos:column="24">&lt;<argument><name pos:line="1499" pos:column="25">object</name></argument>&gt;</argument_list></name></type> <name><name><name pos:line="1499" pos:column="33">IDictionary</name><argument_list pos:line="1499" pos:column="44">&lt;<argument><name pos:line="1499" pos:column="45">string</name></argument>, <argument><name pos:line="1499" pos:column="53">object</name></argument>&gt;</argument_list></name><op:operator pos:line="1499" pos:column="60">.</op:operator><name pos:line="1499" pos:column="61">Values</name></name>
            <block pos:line="1500" pos:column="13">{
                <function><name pos:line="1501" pos:column="17">get</name> <block pos:line="1501" pos:column="21">{ <return pos:line="1501" pos:column="23">return <expr><call><name><name pos:line="1501" pos:column="30">this</name><op:operator pos:line="1501" pos:column="34">.</op:operator><name pos:line="1501" pos:column="35">Select</name></name><argument_list pos:line="1501" pos:column="41">(<argument><expr><lambda><name pos:line="1501" pos:column="42">kv</name> <op:operator pos:line="1501" pos:column="45">=&gt;</op:operator> <name><name pos:line="1501" pos:column="48">kv</name><op:operator pos:line="1501" pos:column="50">.</op:operator><name pos:line="1501" pos:column="51">Value</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="1501" pos:column="57">.</op:operator><call><name pos:line="1501" pos:column="58">ToArray</name><argument_list pos:line="1501" pos:column="65">()</argument_list></call></expr>;</return> }</block></function>
            }</block></decl></decl_stmt>

            <cpp:endregion pos:line="1504" pos:column="13">#<cpp:directive pos:line="1504" pos:column="14">endregion</cpp:directive></cpp:endregion>
        }</block></class>
<cpp:endif pos:line="1506" pos:column="1">#<cpp:directive pos:line="1506" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:if pos:line="1508" pos:column="1">#<cpp:directive pos:line="1508" pos:column="2">if</cpp:directive> <expr><op:operator pos:line="1508" pos:column="5">!</op:operator><name pos:line="1508" pos:column="6">CSHARP30</name></expr></cpp:if>
        <function><type><specifier pos:line="1509" pos:column="9">internal</specifier> <specifier pos:line="1509" pos:column="18">static</specifier> <name><name pos:line="1509" pos:column="25">Func</name><argument_list pos:line="1509" pos:column="29">&lt;<argument><name pos:line="1509" pos:column="30">IDataReader</name></argument>, <argument><name pos:line="1509" pos:column="43">object</name></argument>&gt;</argument_list></name></type> <name pos:line="1509" pos:column="51">GetDapperRowDeserializer</name><parameter_list pos:line="1509" pos:column="75">(<param><decl><type><name pos:line="1509" pos:column="76">IDataRecord</name></type> <name pos:line="1509" pos:column="88">reader</name></decl></param>, <param><decl><type><name pos:line="1509" pos:column="96">int</name></type> <name pos:line="1509" pos:column="100">startBound</name></decl></param>, <param><decl><type><name pos:line="1509" pos:column="112">int</name></type> <name pos:line="1509" pos:column="116">length</name></decl></param>, <param><decl><type><name pos:line="1509" pos:column="124">bool</name></type> <name pos:line="1509" pos:column="129">returnNullIfFirstMissing</name></decl></param>)</parameter_list>
        <block pos:line="1510" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="1511" pos:column="13">var</name></type> <name pos:line="1511" pos:column="17">fieldCount</name> <init pos:line="1511" pos:column="28">= <expr><name><name pos:line="1511" pos:column="30">reader</name><op:operator pos:line="1511" pos:column="36">.</op:operator><name pos:line="1511" pos:column="37">FieldCount</name></name></expr></init></decl>;</decl_stmt>
            <if pos:line="1512" pos:column="13">if <condition pos:line="1512" pos:column="16">(<expr><name pos:line="1512" pos:column="17">length</name> <op:operator pos:line="1512" pos:column="24">==</op:operator> <op:operator pos:line="1512" pos:column="27">-</op:operator><lit:literal type="number" pos:line="1512" pos:column="28">1</lit:literal></expr>)</condition><then pos:line="1512" pos:column="30">
            <block pos:line="1513" pos:column="13">{
                <expr_stmt><expr><name pos:line="1514" pos:column="17">length</name> <op:operator pos:line="1514" pos:column="24">=</op:operator> <name pos:line="1514" pos:column="26">fieldCount</name> <op:operator pos:line="1514" pos:column="37">-</op:operator> <name pos:line="1514" pos:column="39">startBound</name></expr>;</expr_stmt>
            }</block></then></if>

            <if pos:line="1517" pos:column="13">if <condition pos:line="1517" pos:column="16">(<expr><name pos:line="1517" pos:column="17">fieldCount</name> <op:operator pos:line="1517" pos:column="28">&lt;=</op:operator> <name pos:line="1517" pos:column="31">startBound</name></expr>)</condition><then pos:line="1517" pos:column="42">
            <block pos:line="1518" pos:column="13">{
                <throw pos:line="1519" pos:column="17">throw <expr><op:operator pos:line="1519" pos:column="23">new</op:operator> <call><name pos:line="1519" pos:column="27">ArgumentException</name><argument_list pos:line="1519" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="1519" pos:column="45">"When using the multi-mapping APIs ensure you set the splitOn param if you have keys other than Id"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1519" pos:column="146">"splitOn"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="1522" pos:column="13">var</name></type> <name pos:line="1522" pos:column="17">effectiveFieldCount</name> <init pos:line="1522" pos:column="37">= <expr><name pos:line="1522" pos:column="39">fieldCount</name> <op:operator pos:line="1522" pos:column="50">-</op:operator> <name pos:line="1522" pos:column="52">startBound</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1524" pos:column="13">DapperTable</name></type> <name pos:line="1524" pos:column="25">table</name> <init pos:line="1524" pos:column="31">= <expr><name pos:line="1524" pos:column="33">null</name></expr></init></decl>;</decl_stmt>

            <return pos:line="1526" pos:column="13">return
                <expr><lambda><name pos:line="1527" pos:column="17">r</name> <op:operator pos:line="1527" pos:column="19">=&gt;</op:operator>
                <block pos:line="1528" pos:column="17">{
                    <if pos:line="1529" pos:column="21">if <condition pos:line="1529" pos:column="24">(<expr><name pos:line="1529" pos:column="25">table</name> <op:operator pos:line="1529" pos:column="31">==</op:operator> <name pos:line="1529" pos:column="34">null</name></expr>)</condition><then pos:line="1529" pos:column="39">
                    <block pos:line="1530" pos:column="21">{
                        <decl_stmt><decl><type><name pos:line="1531" pos:column="25">string</name><index pos:line="1531" pos:column="31">[]</index></type> <name pos:line="1531" pos:column="34">names</name> <init pos:line="1531" pos:column="40">= <expr><op:operator pos:line="1531" pos:column="42">new</op:operator> <name><name pos:line="1531" pos:column="46">string</name><index pos:line="1531" pos:column="52">[<expr><name pos:line="1531" pos:column="53">effectiveFieldCount</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                        <for pos:line="1532" pos:column="25">for (<init><decl><type><name pos:line="1532" pos:column="30">int</name></type> <name pos:line="1532" pos:column="34">i</name> <init pos:line="1532" pos:column="36">= <expr><lit:literal type="number" pos:line="1532" pos:column="38">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1532" pos:column="41">i</name> <op:operator pos:line="1532" pos:column="43">&lt;</op:operator> <name pos:line="1532" pos:column="45">effectiveFieldCount</name></expr>;</condition> <incr><expr><name pos:line="1532" pos:column="66">i</name><op:operator pos:line="1532" pos:column="67">++</op:operator></expr></incr>)
                        <block pos:line="1533" pos:column="25">{
                            <expr_stmt><expr><name><name pos:line="1534" pos:column="29">names</name><index pos:line="1534" pos:column="34">[<expr><name pos:line="1534" pos:column="35">i</name></expr>]</index></name> <op:operator pos:line="1534" pos:column="38">=</op:operator> <call><name><name pos:line="1534" pos:column="40">r</name><op:operator pos:line="1534" pos:column="41">.</op:operator><name pos:line="1534" pos:column="42">GetName</name></name><argument_list pos:line="1534" pos:column="49">(<argument><expr><name pos:line="1534" pos:column="50">i</name> <op:operator pos:line="1534" pos:column="52">+</op:operator> <name pos:line="1534" pos:column="54">startBound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></for>
                        <expr_stmt><expr><name pos:line="1536" pos:column="25">table</name> <op:operator pos:line="1536" pos:column="31">=</op:operator> <op:operator pos:line="1536" pos:column="33">new</op:operator> <call><name pos:line="1536" pos:column="37">DapperTable</name><argument_list pos:line="1536" pos:column="48">(<argument><expr><name pos:line="1536" pos:column="49">names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>

                    <decl_stmt><decl><type><name pos:line="1539" pos:column="21">var</name></type> <name pos:line="1539" pos:column="25">values</name> <init pos:line="1539" pos:column="32">= <expr><op:operator pos:line="1539" pos:column="34">new</op:operator> <name><name pos:line="1539" pos:column="38">object</name><index pos:line="1539" pos:column="44">[<expr><name pos:line="1539" pos:column="45">effectiveFieldCount</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                    <if pos:line="1541" pos:column="21">if <condition pos:line="1541" pos:column="24">(<expr><name pos:line="1541" pos:column="25">returnNullIfFirstMissing</name></expr>)</condition><then pos:line="1541" pos:column="50">
                    <block pos:line="1542" pos:column="21">{
                        <expr_stmt><expr><name><name pos:line="1543" pos:column="25">values</name><index pos:line="1543" pos:column="31">[<expr><lit:literal type="number" pos:line="1543" pos:column="32">0</lit:literal></expr>]</index></name> <op:operator pos:line="1543" pos:column="35">=</op:operator> <call><name><name pos:line="1543" pos:column="37">r</name><op:operator pos:line="1543" pos:column="38">.</op:operator><name pos:line="1543" pos:column="39">GetValue</name></name><argument_list pos:line="1543" pos:column="47">(<argument><expr><name pos:line="1543" pos:column="48">startBound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if pos:line="1544" pos:column="25">if <condition pos:line="1544" pos:column="28">(<expr><name><name pos:line="1544" pos:column="29">values</name><index pos:line="1544" pos:column="35">[<expr><lit:literal type="number" pos:line="1544" pos:column="36">0</lit:literal></expr>]</index></name> <op:operator pos:line="1544" pos:column="39">is</op:operator> <name pos:line="1544" pos:column="42">DBNull</name></expr>)</condition><then pos:line="1544" pos:column="49">
                        <block pos:line="1545" pos:column="25">{
                            <return pos:line="1546" pos:column="29">return <expr><name pos:line="1546" pos:column="36">null</name></expr>;</return>
                        }</block></then></if>
                    }</block></then></if>

                    <if pos:line="1550" pos:column="21">if <condition pos:line="1550" pos:column="24">(<expr><name pos:line="1550" pos:column="25">startBound</name> <op:operator pos:line="1550" pos:column="36">==</op:operator> <lit:literal type="number" pos:line="1550" pos:column="39">0</lit:literal></expr>)</condition><then pos:line="1550" pos:column="41">
                    <block pos:line="1551" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="1552" pos:column="25">r</name><op:operator pos:line="1552" pos:column="26">.</op:operator><name pos:line="1552" pos:column="27">GetValues</name></name><argument_list pos:line="1552" pos:column="36">(<argument><expr><name pos:line="1552" pos:column="37">values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else pos:line="1554" pos:column="21">else
                    <block pos:line="1555" pos:column="21">{
                        <decl_stmt><decl><type><name pos:line="1556" pos:column="25">var</name></type> <name pos:line="1556" pos:column="29">begin</name> <init pos:line="1556" pos:column="35">= <expr><name pos:line="1556" pos:column="37">returnNullIfFirstMissing</name> <op:operator pos:line="1556" pos:column="62">?</op:operator> <lit:literal type="number" pos:line="1556" pos:column="64">1</lit:literal> <op:operator pos:line="1556" pos:column="66">:</op:operator> <lit:literal type="number" pos:line="1556" pos:column="68">0</lit:literal></expr></init></decl>;</decl_stmt>
                        <for pos:line="1557" pos:column="25">for (<init><decl><type><name pos:line="1557" pos:column="30">var</name></type> <name pos:line="1557" pos:column="34">iter</name> <init pos:line="1557" pos:column="39">= <expr><name pos:line="1557" pos:column="41">begin</name></expr></init></decl>;</init> <condition><expr><name pos:line="1557" pos:column="48">iter</name> <op:operator pos:line="1557" pos:column="53">&lt;</op:operator> <name pos:line="1557" pos:column="55">effectiveFieldCount</name></expr>;</condition> <incr><expr><op:operator pos:line="1557" pos:column="76">++</op:operator><name pos:line="1557" pos:column="78">iter</name></expr></incr>)
                        <block pos:line="1558" pos:column="25">{
                            <expr_stmt><expr><name><name pos:line="1559" pos:column="29">values</name><index pos:line="1559" pos:column="35">[<expr><name pos:line="1559" pos:column="36">iter</name></expr>]</index></name> <op:operator pos:line="1559" pos:column="42">=</op:operator> <call><name><name pos:line="1559" pos:column="44">r</name><op:operator pos:line="1559" pos:column="45">.</op:operator><name pos:line="1559" pos:column="46">GetValue</name></name><argument_list pos:line="1559" pos:column="54">(<argument><expr><name pos:line="1559" pos:column="55">iter</name> <op:operator pos:line="1559" pos:column="60">+</op:operator> <name pos:line="1559" pos:column="62">startBound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></for>
                    }</block></else></if>
                    <return pos:line="1562" pos:column="21">return <expr><op:operator pos:line="1562" pos:column="28">new</op:operator> <call><name pos:line="1562" pos:column="32">DapperRow</name><argument_list pos:line="1562" pos:column="41">(<argument><expr><name pos:line="1562" pos:column="42">table</name></expr></argument>, <argument><expr><name pos:line="1562" pos:column="49">values</name></expr></argument>)</argument_list></call></expr>;</return>
                }</block></lambda></expr>;</return>
        }</block></function>
<cpp:else pos:line="1565" pos:column="1">#<cpp:directive pos:line="1565" pos:column="2">else</cpp:directive></cpp:else>
        <function><type><specifier pos:line="1566" pos:column="9">internal</specifier> <specifier pos:line="1566" pos:column="18">static</specifier> <name><name pos:line="1566" pos:column="25">Func</name><argument_list pos:line="1566" pos:column="29">&lt;<argument><name pos:line="1566" pos:column="30">IDataReader</name></argument>, <argument><name pos:line="1566" pos:column="43">object</name></argument>&gt;</argument_list></name></type> <name pos:line="1566" pos:column="51">GetDictionaryDeserializer</name><parameter_list pos:line="1566" pos:column="76">(<param><decl><type><name pos:line="1566" pos:column="77">IDataRecord</name></type> <name pos:line="1566" pos:column="89">reader</name></decl></param>, <param><decl><type><name pos:line="1566" pos:column="97">int</name></type> <name pos:line="1566" pos:column="101">startBound</name></decl></param>, <param><decl><type><name pos:line="1566" pos:column="113">int</name></type> <name pos:line="1566" pos:column="117">length</name></decl></param>, <param><decl><type><name pos:line="1566" pos:column="125">bool</name></type> <name pos:line="1566" pos:column="130">returnNullIfFirstMissing</name></decl></param>)</parameter_list>
        <block pos:line="1567" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="1568" pos:column="13">var</name></type> <name pos:line="1568" pos:column="17">fieldCount</name> <init pos:line="1568" pos:column="28">= <expr><name><name pos:line="1568" pos:column="30">reader</name><op:operator pos:line="1568" pos:column="36">.</op:operator><name pos:line="1568" pos:column="37">FieldCount</name></name></expr></init></decl>;</decl_stmt>
            <if pos:line="1569" pos:column="13">if <condition pos:line="1569" pos:column="16">(<expr><name pos:line="1569" pos:column="17">length</name> <op:operator pos:line="1569" pos:column="24">==</op:operator> <op:operator pos:line="1569" pos:column="27">-</op:operator><lit:literal type="number" pos:line="1569" pos:column="28">1</lit:literal></expr>)</condition><then pos:line="1569" pos:column="30">
            <block pos:line="1570" pos:column="13">{
                <expr_stmt><expr><name pos:line="1571" pos:column="17">length</name> <op:operator pos:line="1571" pos:column="24">=</op:operator> <name pos:line="1571" pos:column="26">fieldCount</name> <op:operator pos:line="1571" pos:column="37">-</op:operator> <name pos:line="1571" pos:column="39">startBound</name></expr>;</expr_stmt>
            }</block></then></if>

            <if pos:line="1574" pos:column="13">if <condition pos:line="1574" pos:column="16">(<expr><name pos:line="1574" pos:column="17">fieldCount</name> <op:operator pos:line="1574" pos:column="28">&lt;=</op:operator> <name pos:line="1574" pos:column="31">startBound</name></expr>)</condition><then pos:line="1574" pos:column="42">
            <block pos:line="1575" pos:column="13">{
                <throw pos:line="1576" pos:column="17">throw <expr><op:operator pos:line="1576" pos:column="23">new</op:operator> <call><name pos:line="1576" pos:column="27">ArgumentException</name><argument_list pos:line="1576" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="1576" pos:column="45">"When using the multi-mapping APIs ensure you set the splitOn param if you have keys other than Id"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1576" pos:column="146">"splitOn"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <return pos:line="1579" pos:column="13">return
                 <expr><lambda><name pos:line="1580" pos:column="18">r</name> <op:operator pos:line="1580" pos:column="20">=&gt;</op:operator>
                 <block pos:line="1581" pos:column="18">{
                     <decl_stmt><decl><type><name><name pos:line="1582" pos:column="22">IDictionary</name><argument_list pos:line="1582" pos:column="33">&lt;<argument><name pos:line="1582" pos:column="34">string</name></argument>, <argument><name pos:line="1582" pos:column="42">object</name></argument>&gt;</argument_list></name></type> <name pos:line="1582" pos:column="50">row</name> <init pos:line="1582" pos:column="54">= <expr><op:operator pos:line="1582" pos:column="56">new</op:operator> <call><name><name pos:line="1582" pos:column="60">Dictionary</name><argument_list pos:line="1582" pos:column="70">&lt;<argument><name pos:line="1582" pos:column="71">string</name></argument>, <argument><name pos:line="1582" pos:column="79">object</name></argument>&gt;</argument_list></name><argument_list pos:line="1582" pos:column="86">(<argument><expr><name pos:line="1582" pos:column="87">length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                     <for pos:line="1583" pos:column="22">for (<init><decl><type><name pos:line="1583" pos:column="27">var</name></type> <name pos:line="1583" pos:column="31">i</name> <init pos:line="1583" pos:column="33">= <expr><name pos:line="1583" pos:column="35">startBound</name></expr></init></decl>;</init> <condition><expr><name pos:line="1583" pos:column="47">i</name> <op:operator pos:line="1583" pos:column="49">&lt;</op:operator> <name pos:line="1583" pos:column="51">startBound</name> <op:operator pos:line="1583" pos:column="62">+</op:operator> <name pos:line="1583" pos:column="64">length</name></expr>;</condition> <incr><expr><name pos:line="1583" pos:column="72">i</name><op:operator pos:line="1583" pos:column="73">++</op:operator></expr></incr>)
                     <block pos:line="1584" pos:column="22">{
                         <decl_stmt><decl><type><name pos:line="1585" pos:column="26">var</name></type> <name pos:line="1585" pos:column="30">tmp</name> <init pos:line="1585" pos:column="34">= <expr><call><name><name pos:line="1585" pos:column="36">r</name><op:operator pos:line="1585" pos:column="37">.</op:operator><name pos:line="1585" pos:column="38">GetValue</name></name><argument_list pos:line="1585" pos:column="46">(<argument><expr><name pos:line="1585" pos:column="47">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                         <expr_stmt><expr><name pos:line="1586" pos:column="26">tmp</name> <op:operator pos:line="1586" pos:column="30">=</op:operator> <name pos:line="1586" pos:column="32">tmp</name> <op:operator pos:line="1586" pos:column="36">==</op:operator> <name><name pos:line="1586" pos:column="39">DBNull</name><op:operator pos:line="1586" pos:column="45">.</op:operator><name pos:line="1586" pos:column="46">Value</name> <type:modifier pos:line="1586" pos:column="52">?</type:modifier></name> <name pos:line="1586" pos:column="54">null</name> <op:operator pos:line="1586" pos:column="59">:</op:operator> <name pos:line="1586" pos:column="61">tmp</name></expr>;</expr_stmt>
                         <expr_stmt><expr><name><name pos:line="1587" pos:column="26">row</name><index pos:line="1587" pos:column="29">[<expr><call><name><name pos:line="1587" pos:column="30">r</name><op:operator pos:line="1587" pos:column="31">.</op:operator><name pos:line="1587" pos:column="32">GetName</name></name><argument_list pos:line="1587" pos:column="39">(<argument><expr><name pos:line="1587" pos:column="40">i</name></expr></argument>)</argument_list></call></expr>]</index></name> <op:operator pos:line="1587" pos:column="44">=</op:operator> <name pos:line="1587" pos:column="46">tmp</name></expr>;</expr_stmt>
                         <if pos:line="1588" pos:column="26">if <condition pos:line="1588" pos:column="29">(<expr><name pos:line="1588" pos:column="30">returnNullIfFirstMissing</name> <op:operator pos:line="1588" pos:column="55">&amp;&amp;</op:operator> <name pos:line="1588" pos:column="58">i</name> <op:operator pos:line="1588" pos:column="60">==</op:operator> <name pos:line="1588" pos:column="63">startBound</name> <op:operator pos:line="1588" pos:column="74">&amp;&amp;</op:operator> <name pos:line="1588" pos:column="77">tmp</name> <op:operator pos:line="1588" pos:column="81">==</op:operator> <name pos:line="1588" pos:column="84">null</name></expr>)</condition><then pos:line="1588" pos:column="89">
                         <block pos:line="1589" pos:column="26">{
                             <return pos:line="1590" pos:column="30">return <expr><name pos:line="1590" pos:column="37">null</name></expr>;</return>
                         }</block></then></if>
                     }</block></for>
                     <return pos:line="1593" pos:column="22">return <expr><name pos:line="1593" pos:column="29">row</name></expr>;</return>
                 }</block></lambda></expr>;</return>
        }</block></function>
<cpp:endif pos:line="1596" pos:column="1">#<cpp:directive pos:line="1596" pos:column="2">endif</cpp:directive></cpp:endif>
        <comment type="line" pos:line="1597" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="1598" pos:column="9">/// Internal use only</comment>
        <comment type="line" pos:line="1599" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="1600" pos:column="9">/// &lt;param name="value"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="1601" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><attribute pos:line="1602" pos:column="9">[<expr><call><name pos:line="1602" pos:column="10">Browsable</name><argument_list pos:line="1602" pos:column="19">(<argument><expr><lit:literal type="boolean" pos:line="1602" pos:column="20">false</lit:literal></expr></argument>)</argument_list></call></expr><op:operator pos:line="1602" pos:column="26">,</op:operator> <expr><call><name pos:line="1602" pos:column="28">EditorBrowsable</name><argument_list pos:line="1602" pos:column="43">(<argument><expr><name><name pos:line="1602" pos:column="44">EditorBrowsableState</name><op:operator pos:line="1602" pos:column="64">.</op:operator><name pos:line="1602" pos:column="65">Never</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        <attribute pos:line="1603" pos:column="9">[<expr><call><name pos:line="1603" pos:column="10">Obsolete</name><argument_list pos:line="1603" pos:column="18">(<argument><expr><lit:literal type="string" pos:line="1603" pos:column="19">"This method is for internal usage only"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1603" pos:column="61">false</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="1604" pos:column="9">public</specifier> <specifier pos:line="1604" pos:column="16">static</specifier> <name pos:line="1604" pos:column="23">char</name></type> <name pos:line="1604" pos:column="28">ReadChar</name><parameter_list pos:line="1604" pos:column="36">(<param><decl><type><name pos:line="1604" pos:column="37">object</name></type> <name pos:line="1604" pos:column="44">value</name></decl></param>)</parameter_list>
        <block pos:line="1605" pos:column="9">{
            <if pos:line="1606" pos:column="13">if <condition pos:line="1606" pos:column="16">(<expr><name pos:line="1606" pos:column="17">value</name> <op:operator pos:line="1606" pos:column="23">==</op:operator> <name pos:line="1606" pos:column="26">null</name> <op:operator pos:line="1606" pos:column="31">||</op:operator> <name pos:line="1606" pos:column="34">value</name> <op:operator pos:line="1606" pos:column="40">is</op:operator> <name pos:line="1606" pos:column="43">DBNull</name></expr>)</condition><then pos:line="1606" pos:column="50"> <throw pos:line="1606" pos:column="51">throw <expr><op:operator pos:line="1606" pos:column="57">new</op:operator> <call><name pos:line="1606" pos:column="61">ArgumentNullException</name><argument_list pos:line="1606" pos:column="82">(<argument><expr><lit:literal type="string" pos:line="1606" pos:column="83">"value"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <decl_stmt><decl><type><name pos:line="1607" pos:column="13">string</name></type> <name pos:line="1607" pos:column="20">s</name> <init pos:line="1607" pos:column="22">= <expr><name pos:line="1607" pos:column="24">value</name> <op:operator pos:line="1607" pos:column="30">as</op:operator> <name pos:line="1607" pos:column="33">string</name></expr></init></decl>;</decl_stmt>
            <if pos:line="1608" pos:column="13">if <condition pos:line="1608" pos:column="16">(<expr><name pos:line="1608" pos:column="17">s</name> <op:operator pos:line="1608" pos:column="19">==</op:operator> <name pos:line="1608" pos:column="22">null</name> <op:operator pos:line="1608" pos:column="27">||</op:operator> <name><name pos:line="1608" pos:column="30">s</name><op:operator pos:line="1608" pos:column="31">.</op:operator><name pos:line="1608" pos:column="32">Length</name></name> <op:operator pos:line="1608" pos:column="39">!=</op:operator> <lit:literal type="number" pos:line="1608" pos:column="42">1</lit:literal></expr>)</condition><then pos:line="1608" pos:column="44"> <throw pos:line="1608" pos:column="45">throw <expr><op:operator pos:line="1608" pos:column="51">new</op:operator> <call><name pos:line="1608" pos:column="55">ArgumentException</name><argument_list pos:line="1608" pos:column="72">(<argument><expr><lit:literal type="string" pos:line="1608" pos:column="73">"A single-character was expected"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1608" pos:column="108">"value"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <return pos:line="1609" pos:column="13">return <expr><name><name pos:line="1609" pos:column="20">s</name><index pos:line="1609" pos:column="21">[<expr><lit:literal type="number" pos:line="1609" pos:column="22">0</lit:literal></expr>]</index></name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="1612" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="1613" pos:column="9">/// Internal use only</comment>
        <comment type="line" pos:line="1614" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><attribute pos:line="1615" pos:column="9">[<expr><call><name pos:line="1615" pos:column="10">Browsable</name><argument_list pos:line="1615" pos:column="19">(<argument><expr><lit:literal type="boolean" pos:line="1615" pos:column="20">false</lit:literal></expr></argument>)</argument_list></call></expr><op:operator pos:line="1615" pos:column="26">,</op:operator> <expr><call><name pos:line="1615" pos:column="28">EditorBrowsable</name><argument_list pos:line="1615" pos:column="43">(<argument><expr><name><name pos:line="1615" pos:column="44">EditorBrowsableState</name><op:operator pos:line="1615" pos:column="64">.</op:operator><name pos:line="1615" pos:column="65">Never</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        <attribute pos:line="1616" pos:column="9">[<expr><call><name pos:line="1616" pos:column="10">Obsolete</name><argument_list pos:line="1616" pos:column="18">(<argument><expr><lit:literal type="string" pos:line="1616" pos:column="19">"This method is for internal usage only"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1616" pos:column="61">false</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="1617" pos:column="9">public</specifier> <specifier pos:line="1617" pos:column="16">static</specifier> <name pos:line="1617" pos:column="23">char</name><type:modifier pos:line="1617" pos:column="27">?</type:modifier></type> <name pos:line="1617" pos:column="29">ReadNullableChar</name><parameter_list pos:line="1617" pos:column="45">(<param><decl><type><name pos:line="1617" pos:column="46">object</name></type> <name pos:line="1617" pos:column="53">value</name></decl></param>)</parameter_list>
        <block pos:line="1618" pos:column="9">{
            <if pos:line="1619" pos:column="13">if <condition pos:line="1619" pos:column="16">(<expr><name pos:line="1619" pos:column="17">value</name> <op:operator pos:line="1619" pos:column="23">==</op:operator> <name pos:line="1619" pos:column="26">null</name> <op:operator pos:line="1619" pos:column="31">||</op:operator> <name pos:line="1619" pos:column="34">value</name> <op:operator pos:line="1619" pos:column="40">is</op:operator> <name pos:line="1619" pos:column="43">DBNull</name></expr>)</condition><then pos:line="1619" pos:column="50"> <return pos:line="1619" pos:column="51">return <expr><name pos:line="1619" pos:column="58">null</name></expr>;</return></then></if>
            <decl_stmt><decl><type><name pos:line="1620" pos:column="13">string</name></type> <name pos:line="1620" pos:column="20">s</name> <init pos:line="1620" pos:column="22">= <expr><name pos:line="1620" pos:column="24">value</name> <op:operator pos:line="1620" pos:column="30">as</op:operator> <name pos:line="1620" pos:column="33">string</name></expr></init></decl>;</decl_stmt>
            <if pos:line="1621" pos:column="13">if <condition pos:line="1621" pos:column="16">(<expr><name pos:line="1621" pos:column="17">s</name> <op:operator pos:line="1621" pos:column="19">==</op:operator> <name pos:line="1621" pos:column="22">null</name> <op:operator pos:line="1621" pos:column="27">||</op:operator> <name><name pos:line="1621" pos:column="30">s</name><op:operator pos:line="1621" pos:column="31">.</op:operator><name pos:line="1621" pos:column="32">Length</name></name> <op:operator pos:line="1621" pos:column="39">!=</op:operator> <lit:literal type="number" pos:line="1621" pos:column="42">1</lit:literal></expr>)</condition><then pos:line="1621" pos:column="44"> <throw pos:line="1621" pos:column="45">throw <expr><op:operator pos:line="1621" pos:column="51">new</op:operator> <call><name pos:line="1621" pos:column="55">ArgumentException</name><argument_list pos:line="1621" pos:column="72">(<argument><expr><lit:literal type="string" pos:line="1621" pos:column="73">"A single-character was expected"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1621" pos:column="108">"value"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <return pos:line="1622" pos:column="13">return <expr><name><name pos:line="1622" pos:column="20">s</name><index pos:line="1622" pos:column="21">[<expr><lit:literal type="number" pos:line="1622" pos:column="22">0</lit:literal></expr>]</index></name></expr>;</return>
        }</block></function>


        <comment type="line" pos:line="1626" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="1627" pos:column="9">/// Internal use only</comment>
        <comment type="line" pos:line="1628" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><attribute pos:line="1629" pos:column="9">[<expr><call><name pos:line="1629" pos:column="10">Browsable</name><argument_list pos:line="1629" pos:column="19">(<argument><expr><lit:literal type="boolean" pos:line="1629" pos:column="20">false</lit:literal></expr></argument>)</argument_list></call></expr><op:operator pos:line="1629" pos:column="26">,</op:operator> <expr><call><name pos:line="1629" pos:column="28">EditorBrowsable</name><argument_list pos:line="1629" pos:column="43">(<argument><expr><name><name pos:line="1629" pos:column="44">EditorBrowsableState</name><op:operator pos:line="1629" pos:column="64">.</op:operator><name pos:line="1629" pos:column="65">Never</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        <attribute pos:line="1630" pos:column="9">[<expr><call><name pos:line="1630" pos:column="10">Obsolete</name><argument_list pos:line="1630" pos:column="18">(<argument><expr><lit:literal type="string" pos:line="1630" pos:column="19">"This method is for internal usage only"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1630" pos:column="61">true</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="1631" pos:column="9">public</specifier> <specifier pos:line="1631" pos:column="16">static</specifier> <name pos:line="1631" pos:column="23">IDbDataParameter</name></type> <name pos:line="1631" pos:column="40">FindOrAddParameter</name><parameter_list pos:line="1631" pos:column="58">(<param><decl><type><name pos:line="1631" pos:column="59">IDataParameterCollection</name></type> <name pos:line="1631" pos:column="84">parameters</name></decl></param>, <param><decl><type><name pos:line="1631" pos:column="96">IDbCommand</name></type> <name pos:line="1631" pos:column="107">command</name></decl></param>, <param><decl><type><name pos:line="1631" pos:column="116">string</name></type> <name pos:line="1631" pos:column="123">name</name></decl></param>)</parameter_list>
        <block pos:line="1632" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="1633" pos:column="13">IDbDataParameter</name></type> <name pos:line="1633" pos:column="30">result</name></decl>;</decl_stmt>
            <if pos:line="1634" pos:column="13">if <condition pos:line="1634" pos:column="16">(<expr><call><name><name pos:line="1634" pos:column="17">parameters</name><op:operator pos:line="1634" pos:column="27">.</op:operator><name pos:line="1634" pos:column="28">Contains</name></name><argument_list pos:line="1634" pos:column="36">(<argument><expr><name pos:line="1634" pos:column="37">name</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1634" pos:column="43">
            <block pos:line="1635" pos:column="13">{
                <expr_stmt><expr><name pos:line="1636" pos:column="17">result</name> <op:operator pos:line="1636" pos:column="24">=</op:operator> <op:operator pos:line="1636" pos:column="26">(</op:operator><name pos:line="1636" pos:column="27">IDbDataParameter</name><op:operator pos:line="1636" pos:column="43">)</op:operator><name><name pos:line="1636" pos:column="44">parameters</name><index pos:line="1636" pos:column="54">[<expr><name pos:line="1636" pos:column="55">name</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></then>
            <else pos:line="1638" pos:column="13">else
            <block pos:line="1639" pos:column="13">{
                <expr_stmt><expr><name pos:line="1640" pos:column="17">result</name> <op:operator pos:line="1640" pos:column="24">=</op:operator> <call><name><name pos:line="1640" pos:column="26">command</name><op:operator pos:line="1640" pos:column="33">.</op:operator><name pos:line="1640" pos:column="34">CreateParameter</name></name><argument_list pos:line="1640" pos:column="49">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="1641" pos:column="17">result</name><op:operator pos:line="1641" pos:column="23">.</op:operator><name pos:line="1641" pos:column="24">ParameterName</name></name> <op:operator pos:line="1641" pos:column="38">=</op:operator> <name pos:line="1641" pos:column="40">name</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="1642" pos:column="17">parameters</name><op:operator pos:line="1642" pos:column="27">.</op:operator><name pos:line="1642" pos:column="28">Add</name></name><argument_list pos:line="1642" pos:column="31">(<argument><expr><name pos:line="1642" pos:column="32">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <return pos:line="1644" pos:column="13">return <expr><name pos:line="1644" pos:column="20">result</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="1647" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="1648" pos:column="9">/// Internal use only</comment>
        <comment type="line" pos:line="1649" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><attribute pos:line="1650" pos:column="9">[<expr><call><name pos:line="1650" pos:column="10">Browsable</name><argument_list pos:line="1650" pos:column="19">(<argument><expr><lit:literal type="boolean" pos:line="1650" pos:column="20">false</lit:literal></expr></argument>)</argument_list></call></expr><op:operator pos:line="1650" pos:column="26">,</op:operator> <expr><call><name pos:line="1650" pos:column="28">EditorBrowsable</name><argument_list pos:line="1650" pos:column="43">(<argument><expr><name><name pos:line="1650" pos:column="44">EditorBrowsableState</name><op:operator pos:line="1650" pos:column="64">.</op:operator><name pos:line="1650" pos:column="65">Never</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        <attribute pos:line="1651" pos:column="9">[<expr><call><name pos:line="1651" pos:column="10">Obsolete</name><argument_list pos:line="1651" pos:column="18">(<argument><expr><lit:literal type="string" pos:line="1651" pos:column="19">"This method is for internal usage only"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1651" pos:column="61">false</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="1652" pos:column="9">public</specifier> <specifier pos:line="1652" pos:column="16">static</specifier> <name pos:line="1652" pos:column="23">void</name></type> <name pos:line="1652" pos:column="28">PackListParameters</name><parameter_list pos:line="1652" pos:column="46">(<param><decl><type><name pos:line="1652" pos:column="47">IDbCommand</name></type> <name pos:line="1652" pos:column="58">command</name></decl></param>, <param><decl><type><name pos:line="1652" pos:column="67">string</name></type> <name pos:line="1652" pos:column="74">namePrefix</name></decl></param>, <param><decl><type><name pos:line="1652" pos:column="86">object</name></type> <name pos:line="1652" pos:column="93">value</name></decl></param>)</parameter_list>
        <block pos:line="1653" pos:column="9">{
            <comment type="line" pos:line="1654" pos:column="13">// initially we tried TVP, however it performs quite poorly.</comment>
            <comment type="line" pos:line="1655" pos:column="13">// keep in mind SQL support up to 2000 params easily in sp_executesql, needing more is rare</comment>

            <decl_stmt><decl><type><name pos:line="1657" pos:column="13">var</name></type> <name pos:line="1657" pos:column="17">list</name> <init pos:line="1657" pos:column="22">= <expr><name pos:line="1657" pos:column="24">value</name> <op:operator pos:line="1657" pos:column="30">as</op:operator> <name pos:line="1657" pos:column="33">IEnumerable</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1658" pos:column="13">var</name></type> <name pos:line="1658" pos:column="17">count</name> <init pos:line="1658" pos:column="23">= <expr><lit:literal type="number" pos:line="1658" pos:column="25">0</lit:literal></expr></init></decl>;</decl_stmt>

            <if pos:line="1660" pos:column="13">if <condition pos:line="1660" pos:column="16">(<expr><name pos:line="1660" pos:column="17">list</name> <op:operator pos:line="1660" pos:column="22">!=</op:operator> <name pos:line="1660" pos:column="25">null</name></expr>)</condition><then pos:line="1660" pos:column="30">
            <block pos:line="1661" pos:column="13">{
                <if pos:line="1662" pos:column="17">if <condition pos:line="1662" pos:column="20">(<expr><call><name><name pos:line="1662" pos:column="21">FeatureSupport</name><op:operator pos:line="1662" pos:column="35">.</op:operator><name pos:line="1662" pos:column="36">Get</name></name><argument_list pos:line="1662" pos:column="39">(<argument><expr><name><name pos:line="1662" pos:column="40">command</name><op:operator pos:line="1662" pos:column="47">.</op:operator><name pos:line="1662" pos:column="48">Connection</name></name></expr></argument>)</argument_list></call><op:operator pos:line="1662" pos:column="59">.</op:operator><name pos:line="1662" pos:column="60">Arrays</name></expr>)</condition><then pos:line="1662" pos:column="67">
                <block pos:line="1663" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="1664" pos:column="21">var</name></type> <name pos:line="1664" pos:column="25">arrayParm</name> <init pos:line="1664" pos:column="35">= <expr><call><name><name pos:line="1664" pos:column="37">command</name><op:operator pos:line="1664" pos:column="44">.</op:operator><name pos:line="1664" pos:column="45">CreateParameter</name></name><argument_list pos:line="1664" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name><name pos:line="1665" pos:column="21">arrayParm</name><op:operator pos:line="1665" pos:column="30">.</op:operator><name pos:line="1665" pos:column="31">Value</name></name> <op:operator pos:line="1665" pos:column="37">=</op:operator> <name pos:line="1665" pos:column="39">list</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="1666" pos:column="21">arrayParm</name><op:operator pos:line="1666" pos:column="30">.</op:operator><name pos:line="1666" pos:column="31">ParameterName</name></name> <op:operator pos:line="1666" pos:column="45">=</op:operator> <name pos:line="1666" pos:column="47">namePrefix</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="1667" pos:column="21">command</name><op:operator pos:line="1667" pos:column="28">.</op:operator><name pos:line="1667" pos:column="29">Parameters</name><op:operator pos:line="1667" pos:column="39">.</op:operator><name pos:line="1667" pos:column="40">Add</name></name><argument_list pos:line="1667" pos:column="43">(<argument><expr><name pos:line="1667" pos:column="44">arrayParm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="1669" pos:column="17">else
                <block pos:line="1670" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="1671" pos:column="21">bool</name></type> <name pos:line="1671" pos:column="26">isString</name> <init pos:line="1671" pos:column="35">= <expr><name pos:line="1671" pos:column="37">value</name> <op:operator pos:line="1671" pos:column="43">is</op:operator> <name><name pos:line="1671" pos:column="46">IEnumerable</name><argument_list pos:line="1671" pos:column="57">&lt;<argument><name pos:line="1671" pos:column="58">string</name></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="1672" pos:column="21">bool</name></type> <name pos:line="1672" pos:column="26">isDbString</name> <init pos:line="1672" pos:column="37">= <expr><name pos:line="1672" pos:column="39">value</name> <op:operator pos:line="1672" pos:column="45">is</op:operator> <name><name pos:line="1672" pos:column="48">IEnumerable</name><argument_list pos:line="1672" pos:column="59">&lt;<argument><name pos:line="1672" pos:column="60">DbString</name></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
                    <foreach pos:line="1673" pos:column="21">foreach (<init><decl><type><name pos:line="1673" pos:column="30">var</name></type> <name pos:line="1673" pos:column="34">item</name> <range pos:line="1673" pos:column="39">in <expr><name pos:line="1673" pos:column="42">list</name></expr></range></decl></init>)
                    <block pos:line="1674" pos:column="21">{
                        <expr_stmt><expr><name pos:line="1675" pos:column="25">count</name><op:operator pos:line="1675" pos:column="30">++</op:operator></expr>;</expr_stmt>
                        <decl_stmt><decl><type><name pos:line="1676" pos:column="25">var</name></type> <name pos:line="1676" pos:column="29">listParam</name> <init pos:line="1676" pos:column="39">= <expr><call><name><name pos:line="1676" pos:column="41">command</name><op:operator pos:line="1676" pos:column="48">.</op:operator><name pos:line="1676" pos:column="49">CreateParameter</name></name><argument_list pos:line="1676" pos:column="64">()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name><name pos:line="1677" pos:column="25">listParam</name><op:operator pos:line="1677" pos:column="34">.</op:operator><name pos:line="1677" pos:column="35">ParameterName</name></name> <op:operator pos:line="1677" pos:column="49">=</op:operator> <name pos:line="1677" pos:column="51">namePrefix</name> <op:operator pos:line="1677" pos:column="62">+</op:operator> <name pos:line="1677" pos:column="64">count</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name pos:line="1678" pos:column="25">listParam</name><op:operator pos:line="1678" pos:column="34">.</op:operator><name pos:line="1678" pos:column="35">Value</name></name> <op:operator pos:line="1678" pos:column="41">=</op:operator> <name pos:line="1678" pos:column="43">item</name> <op:operator pos:line="1678" pos:column="48">??</op:operator> <name><name pos:line="1678" pos:column="51">DBNull</name><op:operator pos:line="1678" pos:column="57">.</op:operator><name pos:line="1678" pos:column="58">Value</name></name></expr>;</expr_stmt>
                        <if pos:line="1679" pos:column="25">if <condition pos:line="1679" pos:column="28">(<expr><name pos:line="1679" pos:column="29">isString</name></expr>)</condition><then pos:line="1679" pos:column="38">
                        <block pos:line="1680" pos:column="25">{
                            <expr_stmt><expr><name><name pos:line="1681" pos:column="29">listParam</name><op:operator pos:line="1681" pos:column="38">.</op:operator><name pos:line="1681" pos:column="39">Size</name></name> <op:operator pos:line="1681" pos:column="44">=</op:operator> <lit:literal type="number" pos:line="1681" pos:column="46">4000</lit:literal></expr>;</expr_stmt>
                            <if pos:line="1682" pos:column="29">if <condition pos:line="1682" pos:column="32">(<expr><name pos:line="1682" pos:column="33">item</name> <op:operator pos:line="1682" pos:column="38">!=</op:operator> <name pos:line="1682" pos:column="41">null</name> <op:operator pos:line="1682" pos:column="46">&amp;&amp;</op:operator> <op:operator pos:line="1682" pos:column="49">(</op:operator><op:operator pos:line="1682" pos:column="50">(</op:operator><name pos:line="1682" pos:column="51">string</name><op:operator pos:line="1682" pos:column="57">)</op:operator><name pos:line="1682" pos:column="58">item</name><op:operator pos:line="1682" pos:column="62">)</op:operator><op:operator pos:line="1682" pos:column="63">.</op:operator><name pos:line="1682" pos:column="64">Length</name> <op:operator pos:line="1682" pos:column="71">&gt;</op:operator> <lit:literal type="number" pos:line="1682" pos:column="73">4000</lit:literal></expr>)</condition><then pos:line="1682" pos:column="78">
                            <block pos:line="1683" pos:column="29">{
                                <expr_stmt><expr><name><name pos:line="1684" pos:column="33">listParam</name><op:operator pos:line="1684" pos:column="42">.</op:operator><name pos:line="1684" pos:column="43">Size</name></name> <op:operator pos:line="1684" pos:column="48">=</op:operator> <op:operator pos:line="1684" pos:column="50">-</op:operator><lit:literal type="number" pos:line="1684" pos:column="51">1</lit:literal></expr>;</expr_stmt>
                            }</block></then></if>
                        }</block></then></if>
                        <if pos:line="1687" pos:column="25">if <condition pos:line="1687" pos:column="28">(<expr><name pos:line="1687" pos:column="29">isDbString</name> <op:operator pos:line="1687" pos:column="40">&amp;&amp;</op:operator> <name pos:line="1687" pos:column="43">item</name> <op:operator pos:line="1687" pos:column="48">as</op:operator> <name pos:line="1687" pos:column="51">DbString</name> <op:operator pos:line="1687" pos:column="60">!=</op:operator> <name pos:line="1687" pos:column="63">null</name></expr>)</condition><then pos:line="1687" pos:column="68">
                        <block pos:line="1688" pos:column="25">{
                            <decl_stmt><decl><type><name pos:line="1689" pos:column="29">var</name></type> <name pos:line="1689" pos:column="33">str</name> <init pos:line="1689" pos:column="37">= <expr><name pos:line="1689" pos:column="39">item</name> <op:operator pos:line="1689" pos:column="44">as</op:operator> <name pos:line="1689" pos:column="47">DbString</name></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><call><name><name pos:line="1690" pos:column="29">str</name><op:operator pos:line="1690" pos:column="32">.</op:operator><name pos:line="1690" pos:column="33">AddParameter</name></name><argument_list pos:line="1690" pos:column="45">(<argument><expr><name pos:line="1690" pos:column="46">command</name></expr></argument>, <argument><expr><name><name pos:line="1690" pos:column="55">listParam</name><op:operator pos:line="1690" pos:column="64">.</op:operator><name pos:line="1690" pos:column="65">ParameterName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then>
                        <else pos:line="1692" pos:column="25">else
                        <block pos:line="1693" pos:column="25">{
                            <expr_stmt><expr><call><name><name pos:line="1694" pos:column="29">command</name><op:operator pos:line="1694" pos:column="36">.</op:operator><name pos:line="1694" pos:column="37">Parameters</name><op:operator pos:line="1694" pos:column="47">.</op:operator><name pos:line="1694" pos:column="48">Add</name></name><argument_list pos:line="1694" pos:column="51">(<argument><expr><name pos:line="1694" pos:column="52">listParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></else></if>
                    }</block></foreach>

                    <if pos:line="1698" pos:column="21">if <condition pos:line="1698" pos:column="24">(<expr><name pos:line="1698" pos:column="25">count</name> <op:operator pos:line="1698" pos:column="31">==</op:operator> <lit:literal type="number" pos:line="1698" pos:column="34">0</lit:literal></expr>)</condition><then pos:line="1698" pos:column="36">
                    <block pos:line="1699" pos:column="21">{
                        <expr_stmt><expr><name><name pos:line="1700" pos:column="25">command</name><op:operator pos:line="1700" pos:column="32">.</op:operator><name pos:line="1700" pos:column="33">CommandText</name></name> <op:operator pos:line="1700" pos:column="45">=</op:operator> <call><name><name pos:line="1700" pos:column="47">Regex</name><op:operator pos:line="1700" pos:column="52">.</op:operator><name pos:line="1700" pos:column="53">Replace</name></name><argument_list pos:line="1700" pos:column="60">(<argument><expr><name><name pos:line="1700" pos:column="61">command</name><op:operator pos:line="1700" pos:column="68">.</op:operator><name pos:line="1700" pos:column="69">CommandText</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1700" pos:column="82">@"[?@:]"</lit:literal> <op:operator pos:line="1700" pos:column="91">+</op:operator> <call><name><name pos:line="1700" pos:column="93">Regex</name><op:operator pos:line="1700" pos:column="98">.</op:operator><name pos:line="1700" pos:column="99">Escape</name></name><argument_list pos:line="1700" pos:column="105">(<argument><expr><name pos:line="1700" pos:column="106">namePrefix</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1700" pos:column="119">"(SELECT NULL WHERE 1 = 0)"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else pos:line="1702" pos:column="21">else
                    <block pos:line="1703" pos:column="21">{
                        <expr_stmt><expr><name><name pos:line="1704" pos:column="25">command</name><op:operator pos:line="1704" pos:column="32">.</op:operator><name pos:line="1704" pos:column="33">CommandText</name></name> <op:operator pos:line="1704" pos:column="45">=</op:operator> <call><name><name pos:line="1704" pos:column="47">Regex</name><op:operator pos:line="1704" pos:column="52">.</op:operator><name pos:line="1704" pos:column="53">Replace</name></name><argument_list pos:line="1704" pos:column="60">(<argument><expr><name><name pos:line="1704" pos:column="61">command</name><op:operator pos:line="1704" pos:column="68">.</op:operator><name pos:line="1704" pos:column="69">CommandText</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1704" pos:column="82">@"[?@:]"</lit:literal> <op:operator pos:line="1704" pos:column="91">+</op:operator> <call><name><name pos:line="1704" pos:column="93">Regex</name><op:operator pos:line="1704" pos:column="98">.</op:operator><name pos:line="1704" pos:column="99">Escape</name></name><argument_list pos:line="1704" pos:column="105">(<argument><expr><name pos:line="1704" pos:column="106">namePrefix</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lambda><name pos:line="1704" pos:column="119">match</name> <op:operator pos:line="1704" pos:column="125">=&gt;</op:operator>
                        <block pos:line="1705" pos:column="25">{
                            <decl_stmt><decl><type><name pos:line="1706" pos:column="29">var</name></type> <name pos:line="1706" pos:column="33">grp</name> <init pos:line="1706" pos:column="37">= <expr><name><name pos:line="1706" pos:column="39">match</name><op:operator pos:line="1706" pos:column="44">.</op:operator><name pos:line="1706" pos:column="45">Value</name></name></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name pos:line="1707" pos:column="29">var</name></type> <name pos:line="1707" pos:column="33">sb</name> <init pos:line="1707" pos:column="36">= <expr><op:operator pos:line="1707" pos:column="38">new</op:operator> <call><name pos:line="1707" pos:column="42">StringBuilder</name><argument_list pos:line="1707" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="1707" pos:column="56">"("</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1707" pos:column="60">.</op:operator><call><name pos:line="1707" pos:column="61">Append</name><argument_list pos:line="1707" pos:column="67">(<argument><expr><name pos:line="1707" pos:column="68">grp</name></expr></argument>)</argument_list></call><op:operator pos:line="1707" pos:column="72">.</op:operator><call><name pos:line="1707" pos:column="73">Append</name><argument_list pos:line="1707" pos:column="79">(<argument><expr><lit:literal type="number" pos:line="1707" pos:column="80">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <for pos:line="1708" pos:column="29">for (<init><decl><type><name pos:line="1708" pos:column="34">int</name></type> <name pos:line="1708" pos:column="38">i</name> <init pos:line="1708" pos:column="40">= <expr><lit:literal type="number" pos:line="1708" pos:column="42">2</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1708" pos:column="45">i</name> <op:operator pos:line="1708" pos:column="47">&lt;=</op:operator> <name pos:line="1708" pos:column="50">count</name></expr>;</condition> <incr><expr><name pos:line="1708" pos:column="57">i</name><op:operator pos:line="1708" pos:column="58">++</op:operator></expr></incr>)
                            <block pos:line="1709" pos:column="29">{
                                <expr_stmt><expr><call><name><name pos:line="1710" pos:column="33">sb</name><op:operator pos:line="1710" pos:column="35">.</op:operator><name pos:line="1710" pos:column="36">Append</name></name><argument_list pos:line="1710" pos:column="42">(<argument><expr><lit:literal type="char" pos:line="1710" pos:column="43">','</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1710" pos:column="47">.</op:operator><call><name pos:line="1710" pos:column="48">Append</name><argument_list pos:line="1710" pos:column="54">(<argument><expr><name pos:line="1710" pos:column="55">grp</name></expr></argument>)</argument_list></call><op:operator pos:line="1710" pos:column="59">.</op:operator><call><name pos:line="1710" pos:column="60">Append</name><argument_list pos:line="1710" pos:column="66">(<argument><expr><name pos:line="1710" pos:column="67">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></for>
                            <return pos:line="1712" pos:column="29">return <expr><call><name><name pos:line="1712" pos:column="36">sb</name><op:operator pos:line="1712" pos:column="38">.</op:operator><name pos:line="1712" pos:column="39">Append</name></name><argument_list pos:line="1712" pos:column="45">(<argument><expr><lit:literal type="char" pos:line="1712" pos:column="46">')'</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1712" pos:column="50">.</op:operator><call><name pos:line="1712" pos:column="51">ToString</name><argument_list pos:line="1712" pos:column="59">()</argument_list></call></expr>;</return>
                        }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></else></if>
            }</block></then></if>

        }</block></function>

        <function><type><specifier pos:line="1720" pos:column="9">private</specifier> <specifier pos:line="1720" pos:column="17">static</specifier> <name><name pos:line="1720" pos:column="24">IEnumerable</name><argument_list pos:line="1720" pos:column="35">&lt;<argument><name pos:line="1720" pos:column="36">PropertyInfo</name></argument>&gt;</argument_list></name></type> <name pos:line="1720" pos:column="50">FilterParameters</name><parameter_list pos:line="1720" pos:column="66">(<param><decl><type><name><name pos:line="1720" pos:column="67">IEnumerable</name><argument_list pos:line="1720" pos:column="78">&lt;<argument><name pos:line="1720" pos:column="79">PropertyInfo</name></argument>&gt;</argument_list></name></type> <name pos:line="1720" pos:column="93">parameters</name></decl></param>, <param><decl><type><name pos:line="1720" pos:column="105">string</name></type> <name pos:line="1720" pos:column="112">sql</name></decl></param>)</parameter_list>
        <block pos:line="1721" pos:column="9">{
            <return pos:line="1722" pos:column="13">return <expr><call><name><name pos:line="1722" pos:column="20">parameters</name><op:operator pos:line="1722" pos:column="30">.</op:operator><name pos:line="1722" pos:column="31">Where</name></name><argument_list pos:line="1722" pos:column="36">(<argument><expr><lambda><name pos:line="1722" pos:column="37">p</name> <op:operator pos:line="1722" pos:column="39">=&gt;</op:operator> <call><name><name pos:line="1722" pos:column="42">Regex</name><op:operator pos:line="1722" pos:column="47">.</op:operator><name pos:line="1722" pos:column="48">IsMatch</name></name><argument_list pos:line="1722" pos:column="55">(<argument><expr><name pos:line="1722" pos:column="56">sql</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1722" pos:column="61">"[@:]"</lit:literal> <op:operator pos:line="1722" pos:column="68">+</op:operator> <name><name pos:line="1722" pos:column="70">p</name><op:operator pos:line="1722" pos:column="71">.</op:operator><name pos:line="1722" pos:column="72">Name</name></name> <op:operator pos:line="1722" pos:column="77">+</op:operator> <lit:literal type="string" pos:line="1722" pos:column="79">"([^a-zA-Z0-9_]+|$)"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1722" pos:column="101">RegexOptions</name><op:operator pos:line="1722" pos:column="113">.</op:operator><name pos:line="1722" pos:column="114">IgnoreCase</name></name> <op:operator pos:line="1722" pos:column="125">|</op:operator> <name><name pos:line="1722" pos:column="127">RegexOptions</name><op:operator pos:line="1722" pos:column="139">.</op:operator><name pos:line="1722" pos:column="140">Multiline</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="1725" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="1726" pos:column="9">/// Internal use only</comment>
        <comment type="line" pos:line="1727" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="1728" pos:column="9">public</specifier> <specifier pos:line="1728" pos:column="16">static</specifier> <name><name pos:line="1728" pos:column="23">Action</name><argument_list pos:line="1728" pos:column="29">&lt;<argument><name pos:line="1728" pos:column="30">IDbCommand</name></argument>, <argument><name pos:line="1728" pos:column="42">object</name></argument>&gt;</argument_list></name></type> <name pos:line="1728" pos:column="50">CreateParamInfoGenerator</name><parameter_list pos:line="1728" pos:column="74">(<param><decl><type><name pos:line="1728" pos:column="75">Identity</name></type> <name pos:line="1728" pos:column="84">identity</name></decl></param>, <param><decl><type><name pos:line="1728" pos:column="94">bool</name></type> <name pos:line="1728" pos:column="99">checkForDuplicates</name></decl></param>)</parameter_list>
        <block pos:line="1729" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="1730" pos:column="13">Type</name></type> <name pos:line="1730" pos:column="18">type</name> <init pos:line="1730" pos:column="23">= <expr><name><name pos:line="1730" pos:column="25">identity</name><op:operator pos:line="1730" pos:column="33">.</op:operator><name pos:line="1730" pos:column="34">parametersType</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1731" pos:column="13">bool</name></type> <name pos:line="1731" pos:column="18">filterParams</name> <init pos:line="1731" pos:column="31">= <expr><call><name><name pos:line="1731" pos:column="33">identity</name><op:operator pos:line="1731" pos:column="41">.</op:operator><name pos:line="1731" pos:column="42">commandType</name><op:operator pos:line="1731" pos:column="53">.</op:operator><name pos:line="1731" pos:column="54">GetValueOrDefault</name></name><argument_list pos:line="1731" pos:column="71">(<argument><expr><name><name pos:line="1731" pos:column="72">CommandType</name><op:operator pos:line="1731" pos:column="83">.</op:operator><name pos:line="1731" pos:column="84">Text</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="1731" pos:column="90">==</op:operator> <name><name pos:line="1731" pos:column="93">CommandType</name><op:operator pos:line="1731" pos:column="104">.</op:operator><name pos:line="1731" pos:column="105">Text</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1732" pos:column="13">var</name></type> <name pos:line="1732" pos:column="17">dm</name> <init pos:line="1732" pos:column="20">= <expr><op:operator pos:line="1732" pos:column="22">new</op:operator> <call><name pos:line="1732" pos:column="26">DynamicMethod</name><argument_list pos:line="1732" pos:column="39">(<argument><expr><call><name><name pos:line="1732" pos:column="40">string</name><op:operator pos:line="1732" pos:column="46">.</op:operator><name pos:line="1732" pos:column="47">Format</name></name><argument_list pos:line="1732" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="1732" pos:column="54">"ParamInfo{0}"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="1732" pos:column="70">Guid</name><op:operator pos:line="1732" pos:column="74">.</op:operator><name pos:line="1732" pos:column="75">NewGuid</name></name><argument_list pos:line="1732" pos:column="82">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="1732" pos:column="87">null</name></expr></argument>, <argument><expr><op:operator pos:line="1732" pos:column="93">new</op:operator><index pos:line="1732" pos:column="96">[]</index> <block pos:line="1732" pos:column="99">{ <expr><call><name pos:line="1732" pos:column="101">typeof</name><argument_list pos:line="1732" pos:column="107">(<argument><expr><name pos:line="1732" pos:column="108">IDbCommand</name></expr></argument>)</argument_list></call></expr>, <expr><call><name pos:line="1732" pos:column="121">typeof</name><argument_list pos:line="1732" pos:column="127">(<argument><expr><name pos:line="1732" pos:column="128">object</name></expr></argument>)</argument_list></call></expr> }</block></expr></argument>, <argument><expr><name pos:line="1732" pos:column="139">type</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1732" pos:column="145">true</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1734" pos:column="13">var</name></type> <name pos:line="1734" pos:column="17">il</name> <init pos:line="1734" pos:column="20">= <expr><call><name><name pos:line="1734" pos:column="22">dm</name><op:operator pos:line="1734" pos:column="24">.</op:operator><name pos:line="1734" pos:column="25">GetILGenerator</name></name><argument_list pos:line="1734" pos:column="39">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="1736" pos:column="13">il</name><op:operator pos:line="1736" pos:column="15">.</op:operator><name pos:line="1736" pos:column="16">DeclareLocal</name></name><argument_list pos:line="1736" pos:column="28">(<argument><expr><name pos:line="1736" pos:column="29">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1736" pos:column="36">// 0</comment>
            <decl_stmt><decl><type><name pos:line="1737" pos:column="13">bool</name></type> <name pos:line="1737" pos:column="18">haveInt32Arg1</name> <init pos:line="1737" pos:column="32">= <expr><lit:literal type="boolean" pos:line="1737" pos:column="34">false</lit:literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1738" pos:column="13">il</name><op:operator pos:line="1738" pos:column="15">.</op:operator><name pos:line="1738" pos:column="16">Emit</name></name><argument_list pos:line="1738" pos:column="20">(<argument><expr><name><name pos:line="1738" pos:column="21">OpCodes</name><op:operator pos:line="1738" pos:column="28">.</op:operator><name pos:line="1738" pos:column="29">Ldarg_1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1738" pos:column="39">// stack is now [untyped-param]</comment>
            <expr_stmt><expr><call><name><name pos:line="1739" pos:column="13">il</name><op:operator pos:line="1739" pos:column="15">.</op:operator><name pos:line="1739" pos:column="16">Emit</name></name><argument_list pos:line="1739" pos:column="20">(<argument><expr><name><name pos:line="1739" pos:column="21">OpCodes</name><op:operator pos:line="1739" pos:column="28">.</op:operator><name pos:line="1739" pos:column="29">Unbox_Any</name></name></expr></argument>, <argument><expr><name pos:line="1739" pos:column="40">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1739" pos:column="47">// stack is now [typed-param]</comment>
            <expr_stmt><expr><call><name><name pos:line="1740" pos:column="13">il</name><op:operator pos:line="1740" pos:column="15">.</op:operator><name pos:line="1740" pos:column="16">Emit</name></name><argument_list pos:line="1740" pos:column="20">(<argument><expr><name><name pos:line="1740" pos:column="21">OpCodes</name><op:operator pos:line="1740" pos:column="28">.</op:operator><name pos:line="1740" pos:column="29">Stloc_0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="1740" pos:column="38">// stack is now empty</comment>

            <expr_stmt><expr><call><name><name pos:line="1742" pos:column="13">il</name><op:operator pos:line="1742" pos:column="15">.</op:operator><name pos:line="1742" pos:column="16">Emit</name></name><argument_list pos:line="1742" pos:column="20">(<argument><expr><name><name pos:line="1742" pos:column="21">OpCodes</name><op:operator pos:line="1742" pos:column="28">.</op:operator><name pos:line="1742" pos:column="29">Ldarg_0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1742" pos:column="39">// stack is now [command]</comment>
            <expr_stmt><expr><call><name><name pos:line="1743" pos:column="13">il</name><op:operator pos:line="1743" pos:column="15">.</op:operator><name pos:line="1743" pos:column="16">EmitCall</name></name><argument_list pos:line="1743" pos:column="24">(<argument><expr><name><name pos:line="1743" pos:column="25">OpCodes</name><op:operator pos:line="1743" pos:column="32">.</op:operator><name pos:line="1743" pos:column="33">Callvirt</name></name></expr></argument>, <argument><expr><call><name pos:line="1743" pos:column="43">typeof</name><argument_list pos:line="1743" pos:column="49">(<argument><expr><name pos:line="1743" pos:column="50">IDbCommand</name></expr></argument>)</argument_list></call><op:operator pos:line="1743" pos:column="61">.</op:operator><call><name pos:line="1743" pos:column="62">GetProperty</name><argument_list pos:line="1743" pos:column="73">(<argument><expr><lit:literal type="string" pos:line="1743" pos:column="74">"Parameters"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1743" pos:column="87">.</op:operator><call><name pos:line="1743" pos:column="88">GetGetMethod</name><argument_list pos:line="1743" pos:column="100">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1743" pos:column="104">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1743" pos:column="111">// stack is now [parameters]</comment>

            <decl_stmt><decl><type><name><name pos:line="1745" pos:column="13">IEnumerable</name><argument_list pos:line="1745" pos:column="24">&lt;<argument><name pos:line="1745" pos:column="25">PropertyInfo</name></argument>&gt;</argument_list></name></type> <name pos:line="1745" pos:column="39">props</name> <init pos:line="1745" pos:column="45">= <expr><call><name><name pos:line="1745" pos:column="47">type</name><op:operator pos:line="1745" pos:column="51">.</op:operator><name pos:line="1745" pos:column="52">GetProperties</name></name><argument_list pos:line="1745" pos:column="65">()</argument_list></call><op:operator pos:line="1745" pos:column="67">.</op:operator><call><name pos:line="1745" pos:column="68">Where</name><argument_list pos:line="1745" pos:column="73">(<argument><expr><lambda><name pos:line="1745" pos:column="74">p</name> <op:operator pos:line="1745" pos:column="76">=&gt;</op:operator> <call><name><name pos:line="1745" pos:column="79">p</name><op:operator pos:line="1745" pos:column="80">.</op:operator><name pos:line="1745" pos:column="81">GetIndexParameters</name></name><argument_list pos:line="1745" pos:column="99">()</argument_list></call><op:operator pos:line="1745" pos:column="101">.</op:operator><name pos:line="1745" pos:column="102">Length</name> <op:operator pos:line="1745" pos:column="109">==</op:operator> <lit:literal type="number" pos:line="1745" pos:column="112">0</lit:literal></lambda></expr></argument>)</argument_list></call><op:operator pos:line="1745" pos:column="114">.</op:operator><call><name pos:line="1745" pos:column="115">OrderBy</name><argument_list pos:line="1745" pos:column="122">(<argument><expr><lambda><name pos:line="1745" pos:column="123">p</name> <op:operator pos:line="1745" pos:column="125">=&gt;</op:operator> <name><name pos:line="1745" pos:column="128">p</name><op:operator pos:line="1745" pos:column="129">.</op:operator><name pos:line="1745" pos:column="130">Name</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="1746" pos:column="13">if <condition pos:line="1746" pos:column="16">(<expr><name pos:line="1746" pos:column="17">filterParams</name></expr>)</condition><then pos:line="1746" pos:column="30">
            <block pos:line="1747" pos:column="13">{
                <expr_stmt><expr><name pos:line="1748" pos:column="17">props</name> <op:operator pos:line="1748" pos:column="23">=</op:operator> <call><name pos:line="1748" pos:column="25">FilterParameters</name><argument_list pos:line="1748" pos:column="41">(<argument><expr><name pos:line="1748" pos:column="42">props</name></expr></argument>, <argument><expr><name><name pos:line="1748" pos:column="49">identity</name><op:operator pos:line="1748" pos:column="57">.</op:operator><name pos:line="1748" pos:column="58">sql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <foreach pos:line="1750" pos:column="13">foreach (<init><decl><type><name pos:line="1750" pos:column="22">var</name></type> <name pos:line="1750" pos:column="26">prop</name> <range pos:line="1750" pos:column="31">in <expr><name pos:line="1750" pos:column="34">props</name></expr></range></decl></init>)
            <block pos:line="1751" pos:column="13">{
                <if pos:line="1752" pos:column="17">if <condition pos:line="1752" pos:column="20">(<expr><name pos:line="1752" pos:column="21">filterParams</name></expr>)</condition><then pos:line="1752" pos:column="34">
                <block pos:line="1753" pos:column="17">{
                    <if pos:line="1754" pos:column="21">if <condition pos:line="1754" pos:column="24">(<expr><call><name><name pos:line="1754" pos:column="25">identity</name><op:operator pos:line="1754" pos:column="33">.</op:operator><name pos:line="1754" pos:column="34">sql</name><op:operator pos:line="1754" pos:column="37">.</op:operator><name pos:line="1754" pos:column="38">IndexOf</name></name><argument_list pos:line="1754" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="1754" pos:column="46">"@"</lit:literal> <op:operator pos:line="1754" pos:column="50">+</op:operator> <name><name pos:line="1754" pos:column="52">prop</name><op:operator pos:line="1754" pos:column="56">.</op:operator><name pos:line="1754" pos:column="57">Name</name></name></expr></argument>, <argument><expr><name><name pos:line="1754" pos:column="63">StringComparison</name><op:operator pos:line="1754" pos:column="79">.</op:operator><name pos:line="1754" pos:column="80">InvariantCultureIgnoreCase</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="1754" pos:column="108">&lt;</op:operator> <lit:literal type="number" pos:line="1754" pos:column="110">0</lit:literal>
                        <op:operator pos:line="1755" pos:column="25">&amp;&amp;</op:operator> <call><name><name pos:line="1755" pos:column="28">identity</name><op:operator pos:line="1755" pos:column="36">.</op:operator><name pos:line="1755" pos:column="37">sql</name><op:operator pos:line="1755" pos:column="40">.</op:operator><name pos:line="1755" pos:column="41">IndexOf</name></name><argument_list pos:line="1755" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="1755" pos:column="49">":"</lit:literal> <op:operator pos:line="1755" pos:column="53">+</op:operator> <name><name pos:line="1755" pos:column="55">prop</name><op:operator pos:line="1755" pos:column="59">.</op:operator><name pos:line="1755" pos:column="60">Name</name></name></expr></argument>, <argument><expr><name><name pos:line="1755" pos:column="66">StringComparison</name><op:operator pos:line="1755" pos:column="82">.</op:operator><name pos:line="1755" pos:column="83">InvariantCultureIgnoreCase</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="1755" pos:column="111">&lt;</op:operator> <lit:literal type="number" pos:line="1755" pos:column="113">0</lit:literal></expr>)</condition><then pos:line="1755" pos:column="115">
                    <block pos:line="1756" pos:column="21">{ <comment type="line" pos:line="1756" pos:column="23">// can't see the parameter in the text (even in a comment, etc) - burn it with fire</comment>
                        <continue pos:line="1757" pos:column="25">continue;</continue>
                    }</block></then></if>
                }</block></then></if>
                <if pos:line="1760" pos:column="17">if <condition pos:line="1760" pos:column="20">(<expr><name><name pos:line="1760" pos:column="21">prop</name><op:operator pos:line="1760" pos:column="25">.</op:operator><name pos:line="1760" pos:column="26">PropertyType</name></name> <op:operator pos:line="1760" pos:column="39">==</op:operator> <call><name pos:line="1760" pos:column="42">typeof</name><argument_list pos:line="1760" pos:column="48">(<argument><expr><name pos:line="1760" pos:column="49">DbString</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1760" pos:column="59">
                <block pos:line="1761" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="1762" pos:column="21">il</name><op:operator pos:line="1762" pos:column="23">.</op:operator><name pos:line="1762" pos:column="24">Emit</name></name><argument_list pos:line="1762" pos:column="28">(<argument><expr><name><name pos:line="1762" pos:column="29">OpCodes</name><op:operator pos:line="1762" pos:column="36">.</op:operator><name pos:line="1762" pos:column="37">Ldloc_0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1762" pos:column="47">// stack is now [parameters] [typed-param]</comment>
                    <expr_stmt><expr><call><name><name pos:line="1763" pos:column="21">il</name><op:operator pos:line="1763" pos:column="23">.</op:operator><name pos:line="1763" pos:column="24">Emit</name></name><argument_list pos:line="1763" pos:column="28">(<argument><expr><name><name pos:line="1763" pos:column="29">OpCodes</name><op:operator pos:line="1763" pos:column="36">.</op:operator><name pos:line="1763" pos:column="37">Callvirt</name></name></expr></argument>, <argument><expr><call><name><name pos:line="1763" pos:column="47">prop</name><op:operator pos:line="1763" pos:column="51">.</op:operator><name pos:line="1763" pos:column="52">GetGetMethod</name></name><argument_list pos:line="1763" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1763" pos:column="69">// stack is [parameters] [dbstring]</comment>
                    <expr_stmt><expr><call><name><name pos:line="1764" pos:column="21">il</name><op:operator pos:line="1764" pos:column="23">.</op:operator><name pos:line="1764" pos:column="24">Emit</name></name><argument_list pos:line="1764" pos:column="28">(<argument><expr><name><name pos:line="1764" pos:column="29">OpCodes</name><op:operator pos:line="1764" pos:column="36">.</op:operator><name pos:line="1764" pos:column="37">Ldarg_0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1764" pos:column="47">// stack is now [parameters] [dbstring] [command]</comment>
                    <expr_stmt><expr><call><name><name pos:line="1765" pos:column="21">il</name><op:operator pos:line="1765" pos:column="23">.</op:operator><name pos:line="1765" pos:column="24">Emit</name></name><argument_list pos:line="1765" pos:column="28">(<argument><expr><name><name pos:line="1765" pos:column="29">OpCodes</name><op:operator pos:line="1765" pos:column="36">.</op:operator><name pos:line="1765" pos:column="37">Ldstr</name></name></expr></argument>, <argument><expr><name><name pos:line="1765" pos:column="44">prop</name><op:operator pos:line="1765" pos:column="48">.</op:operator><name pos:line="1765" pos:column="49">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1765" pos:column="56">// stack is now [parameters] [dbstring] [command] [name]</comment>
                    <expr_stmt><expr><call><name><name pos:line="1766" pos:column="21">il</name><op:operator pos:line="1766" pos:column="23">.</op:operator><name pos:line="1766" pos:column="24">EmitCall</name></name><argument_list pos:line="1766" pos:column="32">(<argument><expr><name><name pos:line="1766" pos:column="33">OpCodes</name><op:operator pos:line="1766" pos:column="40">.</op:operator><name pos:line="1766" pos:column="41">Callvirt</name></name></expr></argument>, <argument><expr><call><name pos:line="1766" pos:column="51">typeof</name><argument_list pos:line="1766" pos:column="57">(<argument><expr><name pos:line="1766" pos:column="58">DbString</name></expr></argument>)</argument_list></call><op:operator pos:line="1766" pos:column="67">.</op:operator><call><name pos:line="1766" pos:column="68">GetMethod</name><argument_list pos:line="1766" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="1766" pos:column="78">"AddParameter"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="1766" pos:column="95">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1766" pos:column="102">// stack is now [parameters]</comment>
                    <continue pos:line="1767" pos:column="21">continue;</continue>
                }</block></then></if>
                <decl_stmt><decl><type><name pos:line="1769" pos:column="17">DbType</name></type> <name pos:line="1769" pos:column="24">dbType</name> <init pos:line="1769" pos:column="31">= <expr><call><name pos:line="1769" pos:column="33">LookupDbType</name><argument_list pos:line="1769" pos:column="45">(<argument><expr><name><name pos:line="1769" pos:column="46">prop</name><op:operator pos:line="1769" pos:column="50">.</op:operator><name pos:line="1769" pos:column="51">PropertyType</name></name></expr></argument>, <argument><expr><name><name pos:line="1769" pos:column="65">prop</name><op:operator pos:line="1769" pos:column="69">.</op:operator><name pos:line="1769" pos:column="70">Name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="1770" pos:column="17">if <condition pos:line="1770" pos:column="20">(<expr><name pos:line="1770" pos:column="21">dbType</name> <op:operator pos:line="1770" pos:column="28">==</op:operator> <name><name pos:line="1770" pos:column="31">DynamicParameters</name><op:operator pos:line="1770" pos:column="48">.</op:operator><name pos:line="1770" pos:column="49">EnumerableMultiParameter</name></name></expr>)</condition><then pos:line="1770" pos:column="74">
                <block pos:line="1771" pos:column="17">{
                    <comment type="line" pos:line="1772" pos:column="21">// this actually represents special handling for list types;</comment>
                    <expr_stmt><expr><call><name><name pos:line="1773" pos:column="21">il</name><op:operator pos:line="1773" pos:column="23">.</op:operator><name pos:line="1773" pos:column="24">Emit</name></name><argument_list pos:line="1773" pos:column="28">(<argument><expr><name><name pos:line="1773" pos:column="29">OpCodes</name><op:operator pos:line="1773" pos:column="36">.</op:operator><name pos:line="1773" pos:column="37">Ldarg_0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1773" pos:column="47">// stack is now [parameters] [command]</comment>
                    <expr_stmt><expr><call><name><name pos:line="1774" pos:column="21">il</name><op:operator pos:line="1774" pos:column="23">.</op:operator><name pos:line="1774" pos:column="24">Emit</name></name><argument_list pos:line="1774" pos:column="28">(<argument><expr><name><name pos:line="1774" pos:column="29">OpCodes</name><op:operator pos:line="1774" pos:column="36">.</op:operator><name pos:line="1774" pos:column="37">Ldstr</name></name></expr></argument>, <argument><expr><name><name pos:line="1774" pos:column="44">prop</name><op:operator pos:line="1774" pos:column="48">.</op:operator><name pos:line="1774" pos:column="49">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1774" pos:column="56">// stack is now [parameters] [command] [name]</comment>
                    <expr_stmt><expr><call><name><name pos:line="1775" pos:column="21">il</name><op:operator pos:line="1775" pos:column="23">.</op:operator><name pos:line="1775" pos:column="24">Emit</name></name><argument_list pos:line="1775" pos:column="28">(<argument><expr><name><name pos:line="1775" pos:column="29">OpCodes</name><op:operator pos:line="1775" pos:column="36">.</op:operator><name pos:line="1775" pos:column="37">Ldloc_0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1775" pos:column="47">// stack is now [parameters] [command] [name] [typed-param]</comment>
                    <expr_stmt><expr><call><name><name pos:line="1776" pos:column="21">il</name><op:operator pos:line="1776" pos:column="23">.</op:operator><name pos:line="1776" pos:column="24">Emit</name></name><argument_list pos:line="1776" pos:column="28">(<argument><expr><name><name pos:line="1776" pos:column="29">OpCodes</name><op:operator pos:line="1776" pos:column="36">.</op:operator><name pos:line="1776" pos:column="37">Callvirt</name></name></expr></argument>, <argument><expr><call><name><name pos:line="1776" pos:column="47">prop</name><op:operator pos:line="1776" pos:column="51">.</op:operator><name pos:line="1776" pos:column="52">GetGetMethod</name></name><argument_list pos:line="1776" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1776" pos:column="69">// stack is [parameters] [command] [name] [typed-value]</comment>
                    <if pos:line="1777" pos:column="21">if <condition pos:line="1777" pos:column="24">(<expr><name><name pos:line="1777" pos:column="25">prop</name><op:operator pos:line="1777" pos:column="29">.</op:operator><name pos:line="1777" pos:column="30">PropertyType</name><op:operator pos:line="1777" pos:column="42">.</op:operator><name pos:line="1777" pos:column="43">IsValueType</name></name></expr>)</condition><then pos:line="1777" pos:column="55">
                    <block pos:line="1778" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="1779" pos:column="25">il</name><op:operator pos:line="1779" pos:column="27">.</op:operator><name pos:line="1779" pos:column="28">Emit</name></name><argument_list pos:line="1779" pos:column="32">(<argument><expr><name><name pos:line="1779" pos:column="33">OpCodes</name><op:operator pos:line="1779" pos:column="40">.</op:operator><name pos:line="1779" pos:column="41">Box</name></name></expr></argument>, <argument><expr><name><name pos:line="1779" pos:column="46">prop</name><op:operator pos:line="1779" pos:column="50">.</op:operator><name pos:line="1779" pos:column="51">PropertyType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1779" pos:column="66">// stack is [parameters] [command] [name] [boxed-value]</comment>
                    }</block></then></if>
                    <expr_stmt><expr><call><name><name pos:line="1781" pos:column="21">il</name><op:operator pos:line="1781" pos:column="23">.</op:operator><name pos:line="1781" pos:column="24">EmitCall</name></name><argument_list pos:line="1781" pos:column="32">(<argument><expr><name><name pos:line="1781" pos:column="33">OpCodes</name><op:operator pos:line="1781" pos:column="40">.</op:operator><name pos:line="1781" pos:column="41">Call</name></name></expr></argument>, <argument><expr><call><name pos:line="1781" pos:column="47">typeof</name><argument_list pos:line="1781" pos:column="53">(<argument><expr><name pos:line="1781" pos:column="54">SqlMapper</name></expr></argument>)</argument_list></call><op:operator pos:line="1781" pos:column="64">.</op:operator><call><name pos:line="1781" pos:column="65">GetMethod</name><argument_list pos:line="1781" pos:column="74">(<argument><expr><lit:literal type="string" pos:line="1781" pos:column="75">"PackListParameters"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="1781" pos:column="98">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1781" pos:column="105">// stack is [parameters]</comment>
                    <continue pos:line="1782" pos:column="21">continue;</continue>
                }</block></then></if>
                <expr_stmt><expr><call><name><name pos:line="1784" pos:column="17">il</name><op:operator pos:line="1784" pos:column="19">.</op:operator><name pos:line="1784" pos:column="20">Emit</name></name><argument_list pos:line="1784" pos:column="24">(<argument><expr><name><name pos:line="1784" pos:column="25">OpCodes</name><op:operator pos:line="1784" pos:column="32">.</op:operator><name pos:line="1784" pos:column="33">Dup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1784" pos:column="39">// stack is now [parameters] [parameters]</comment>

                <expr_stmt><expr><call><name><name pos:line="1786" pos:column="17">il</name><op:operator pos:line="1786" pos:column="19">.</op:operator><name pos:line="1786" pos:column="20">Emit</name></name><argument_list pos:line="1786" pos:column="24">(<argument><expr><name><name pos:line="1786" pos:column="25">OpCodes</name><op:operator pos:line="1786" pos:column="32">.</op:operator><name pos:line="1786" pos:column="33">Ldarg_0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1786" pos:column="43">// stack is now [parameters] [parameters] [command]</comment>

                <if pos:line="1788" pos:column="17">if <condition pos:line="1788" pos:column="20">(<expr><name pos:line="1788" pos:column="21">checkForDuplicates</name></expr>)</condition><then pos:line="1788" pos:column="40">
                <block pos:line="1789" pos:column="17">{
                    <comment type="line" pos:line="1790" pos:column="21">// need to be a little careful about adding; use a utility method</comment>
                    <expr_stmt><expr><call><name><name pos:line="1791" pos:column="21">il</name><op:operator pos:line="1791" pos:column="23">.</op:operator><name pos:line="1791" pos:column="24">Emit</name></name><argument_list pos:line="1791" pos:column="28">(<argument><expr><name><name pos:line="1791" pos:column="29">OpCodes</name><op:operator pos:line="1791" pos:column="36">.</op:operator><name pos:line="1791" pos:column="37">Ldstr</name></name></expr></argument>, <argument><expr><name><name pos:line="1791" pos:column="44">prop</name><op:operator pos:line="1791" pos:column="48">.</op:operator><name pos:line="1791" pos:column="49">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1791" pos:column="56">// stack is now [parameters] [parameters] [command] [name]</comment>
                    <expr_stmt><expr><call><name><name pos:line="1792" pos:column="21">il</name><op:operator pos:line="1792" pos:column="23">.</op:operator><name pos:line="1792" pos:column="24">EmitCall</name></name><argument_list pos:line="1792" pos:column="32">(<argument><expr><name><name pos:line="1792" pos:column="33">OpCodes</name><op:operator pos:line="1792" pos:column="40">.</op:operator><name pos:line="1792" pos:column="41">Call</name></name></expr></argument>, <argument><expr><call><name pos:line="1792" pos:column="47">typeof</name><argument_list pos:line="1792" pos:column="53">(<argument><expr><name pos:line="1792" pos:column="54">SqlMapper</name></expr></argument>)</argument_list></call><op:operator pos:line="1792" pos:column="64">.</op:operator><call><name pos:line="1792" pos:column="65">GetMethod</name><argument_list pos:line="1792" pos:column="74">(<argument><expr><lit:literal type="string" pos:line="1792" pos:column="75">"FindOrAddParameter"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="1792" pos:column="98">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1792" pos:column="105">// stack is [parameters] [parameter]</comment>
                }</block></then>
                <else pos:line="1794" pos:column="17">else
                <block pos:line="1795" pos:column="17">{
                    <comment type="line" pos:line="1796" pos:column="21">// no risk of duplicates; just blindly add</comment>
                    <expr_stmt><expr><call><name><name pos:line="1797" pos:column="21">il</name><op:operator pos:line="1797" pos:column="23">.</op:operator><name pos:line="1797" pos:column="24">EmitCall</name></name><argument_list pos:line="1797" pos:column="32">(<argument><expr><name><name pos:line="1797" pos:column="33">OpCodes</name><op:operator pos:line="1797" pos:column="40">.</op:operator><name pos:line="1797" pos:column="41">Callvirt</name></name></expr></argument>, <argument><expr><call><name pos:line="1797" pos:column="51">typeof</name><argument_list pos:line="1797" pos:column="57">(<argument><expr><name pos:line="1797" pos:column="58">IDbCommand</name></expr></argument>)</argument_list></call><op:operator pos:line="1797" pos:column="69">.</op:operator><call><name pos:line="1797" pos:column="70">GetMethod</name><argument_list pos:line="1797" pos:column="79">(<argument><expr><lit:literal type="string" pos:line="1797" pos:column="80">"CreateParameter"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="1797" pos:column="100">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="1797" pos:column="106">// stack is now [parameters] [parameters] [parameter]</comment>

                    <expr_stmt><expr><call><name><name pos:line="1799" pos:column="21">il</name><op:operator pos:line="1799" pos:column="23">.</op:operator><name pos:line="1799" pos:column="24">Emit</name></name><argument_list pos:line="1799" pos:column="28">(<argument><expr><name><name pos:line="1799" pos:column="29">OpCodes</name><op:operator pos:line="1799" pos:column="36">.</op:operator><name pos:line="1799" pos:column="37">Dup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="1799" pos:column="42">// stack is now [parameters] [parameters] [parameter] [parameter]</comment>
                    <expr_stmt><expr><call><name><name pos:line="1800" pos:column="21">il</name><op:operator pos:line="1800" pos:column="23">.</op:operator><name pos:line="1800" pos:column="24">Emit</name></name><argument_list pos:line="1800" pos:column="28">(<argument><expr><name><name pos:line="1800" pos:column="29">OpCodes</name><op:operator pos:line="1800" pos:column="36">.</op:operator><name pos:line="1800" pos:column="37">Ldstr</name></name></expr></argument>, <argument><expr><name><name pos:line="1800" pos:column="44">prop</name><op:operator pos:line="1800" pos:column="48">.</op:operator><name pos:line="1800" pos:column="49">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1800" pos:column="56">// stack is now [parameters] [parameters] [parameter] [parameter] [name]</comment>
                    <expr_stmt><expr><call><name><name pos:line="1801" pos:column="21">il</name><op:operator pos:line="1801" pos:column="23">.</op:operator><name pos:line="1801" pos:column="24">EmitCall</name></name><argument_list pos:line="1801" pos:column="32">(<argument><expr><name><name pos:line="1801" pos:column="33">OpCodes</name><op:operator pos:line="1801" pos:column="40">.</op:operator><name pos:line="1801" pos:column="41">Callvirt</name></name></expr></argument>, <argument><expr><call><name pos:line="1801" pos:column="51">typeof</name><argument_list pos:line="1801" pos:column="57">(<argument><expr><name pos:line="1801" pos:column="58">IDataParameter</name></expr></argument>)</argument_list></call><op:operator pos:line="1801" pos:column="73">.</op:operator><call><name pos:line="1801" pos:column="74">GetProperty</name><argument_list pos:line="1801" pos:column="85">(<argument><expr><lit:literal type="string" pos:line="1801" pos:column="86">"ParameterName"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1801" pos:column="102">.</op:operator><call><name pos:line="1801" pos:column="103">GetSetMethod</name><argument_list pos:line="1801" pos:column="115">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1801" pos:column="119">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="1801" pos:column="125">// stack is now [parameters] [parameters] [parameter]</comment>
                }</block></else></if>
                <if pos:line="1803" pos:column="17">if <condition pos:line="1803" pos:column="20">(<expr><name pos:line="1803" pos:column="21">dbType</name> <op:operator pos:line="1803" pos:column="28">!=</op:operator> <name><name pos:line="1803" pos:column="31">DbType</name><op:operator pos:line="1803" pos:column="37">.</op:operator><name pos:line="1803" pos:column="38">Time</name></name></expr>)</condition><then pos:line="1803" pos:column="43"> <comment type="line" pos:line="1803" pos:column="44">// https://connect.microsoft.com/VisualStudio/feedback/details/381934/sqlparameter-dbtype-dbtype-time-sets-the-parameter-to-sqldbtype-datetime-instead-of-sqldbtype-time</comment>
                <block pos:line="1804" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="1805" pos:column="21">il</name><op:operator pos:line="1805" pos:column="23">.</op:operator><name pos:line="1805" pos:column="24">Emit</name></name><argument_list pos:line="1805" pos:column="28">(<argument><expr><name><name pos:line="1805" pos:column="29">OpCodes</name><op:operator pos:line="1805" pos:column="36">.</op:operator><name pos:line="1805" pos:column="37">Dup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="1805" pos:column="42">// stack is now [parameters] [[parameters]] [parameter] [parameter]</comment>
                    <expr_stmt><expr><call><name pos:line="1806" pos:column="21">EmitInt32</name><argument_list pos:line="1806" pos:column="30">(<argument><expr><name pos:line="1806" pos:column="31">il</name></expr></argument>, <argument><expr><op:operator pos:line="1806" pos:column="35">(</op:operator><name pos:line="1806" pos:column="36">int</name><op:operator pos:line="1806" pos:column="39">)</op:operator><name pos:line="1806" pos:column="40">dbType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="1806" pos:column="48">// stack is now [parameters] [[parameters]] [parameter] [parameter] [db-type]</comment>

                    <expr_stmt><expr><call><name><name pos:line="1808" pos:column="21">il</name><op:operator pos:line="1808" pos:column="23">.</op:operator><name pos:line="1808" pos:column="24">EmitCall</name></name><argument_list pos:line="1808" pos:column="32">(<argument><expr><name><name pos:line="1808" pos:column="33">OpCodes</name><op:operator pos:line="1808" pos:column="40">.</op:operator><name pos:line="1808" pos:column="41">Callvirt</name></name></expr></argument>, <argument><expr><call><name pos:line="1808" pos:column="51">typeof</name><argument_list pos:line="1808" pos:column="57">(<argument><expr><name pos:line="1808" pos:column="58">IDataParameter</name></expr></argument>)</argument_list></call><op:operator pos:line="1808" pos:column="73">.</op:operator><call><name pos:line="1808" pos:column="74">GetProperty</name><argument_list pos:line="1808" pos:column="85">(<argument><expr><lit:literal type="string" pos:line="1808" pos:column="86">"DbType"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1808" pos:column="95">.</op:operator><call><name pos:line="1808" pos:column="96">GetSetMethod</name><argument_list pos:line="1808" pos:column="108">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1808" pos:column="112">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="1808" pos:column="118">// stack is now [parameters] [[parameters]] [parameter]</comment>
                }</block></then></if>

                <expr_stmt><expr><call><name><name pos:line="1811" pos:column="17">il</name><op:operator pos:line="1811" pos:column="19">.</op:operator><name pos:line="1811" pos:column="20">Emit</name></name><argument_list pos:line="1811" pos:column="24">(<argument><expr><name><name pos:line="1811" pos:column="25">OpCodes</name><op:operator pos:line="1811" pos:column="32">.</op:operator><name pos:line="1811" pos:column="33">Dup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="1811" pos:column="38">// stack is now [parameters] [[parameters]] [parameter] [parameter]</comment>
                <expr_stmt><expr><call><name pos:line="1812" pos:column="17">EmitInt32</name><argument_list pos:line="1812" pos:column="26">(<argument><expr><name pos:line="1812" pos:column="27">il</name></expr></argument>, <argument><expr><op:operator pos:line="1812" pos:column="31">(</op:operator><name pos:line="1812" pos:column="32">int</name><op:operator pos:line="1812" pos:column="35">)</op:operator><name><name pos:line="1812" pos:column="36">ParameterDirection</name><op:operator pos:line="1812" pos:column="54">.</op:operator><name pos:line="1812" pos:column="55">Input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="1812" pos:column="62">// stack is now [parameters] [[parameters]] [parameter] [parameter] [dir]</comment>
                <expr_stmt><expr><call><name><name pos:line="1813" pos:column="17">il</name><op:operator pos:line="1813" pos:column="19">.</op:operator><name pos:line="1813" pos:column="20">EmitCall</name></name><argument_list pos:line="1813" pos:column="28">(<argument><expr><name><name pos:line="1813" pos:column="29">OpCodes</name><op:operator pos:line="1813" pos:column="36">.</op:operator><name pos:line="1813" pos:column="37">Callvirt</name></name></expr></argument>, <argument><expr><call><name pos:line="1813" pos:column="47">typeof</name><argument_list pos:line="1813" pos:column="53">(<argument><expr><name pos:line="1813" pos:column="54">IDataParameter</name></expr></argument>)</argument_list></call><op:operator pos:line="1813" pos:column="69">.</op:operator><call><name pos:line="1813" pos:column="70">GetProperty</name><argument_list pos:line="1813" pos:column="81">(<argument><expr><lit:literal type="string" pos:line="1813" pos:column="82">"Direction"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1813" pos:column="94">.</op:operator><call><name pos:line="1813" pos:column="95">GetSetMethod</name><argument_list pos:line="1813" pos:column="107">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1813" pos:column="111">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="1813" pos:column="117">// stack is now [parameters] [[parameters]] [parameter]</comment>

                <expr_stmt><expr><call><name><name pos:line="1815" pos:column="17">il</name><op:operator pos:line="1815" pos:column="19">.</op:operator><name pos:line="1815" pos:column="20">Emit</name></name><argument_list pos:line="1815" pos:column="24">(<argument><expr><name><name pos:line="1815" pos:column="25">OpCodes</name><op:operator pos:line="1815" pos:column="32">.</op:operator><name pos:line="1815" pos:column="33">Dup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="1815" pos:column="38">// stack is now [parameters] [[parameters]] [parameter] [parameter]</comment>
                <expr_stmt><expr><call><name><name pos:line="1816" pos:column="17">il</name><op:operator pos:line="1816" pos:column="19">.</op:operator><name pos:line="1816" pos:column="20">Emit</name></name><argument_list pos:line="1816" pos:column="24">(<argument><expr><name><name pos:line="1816" pos:column="25">OpCodes</name><op:operator pos:line="1816" pos:column="32">.</op:operator><name pos:line="1816" pos:column="33">Ldloc_0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1816" pos:column="43">// stack is now [parameters] [[parameters]] [parameter] [parameter] [typed-param]</comment>
                <expr_stmt><expr><call><name><name pos:line="1817" pos:column="17">il</name><op:operator pos:line="1817" pos:column="19">.</op:operator><name pos:line="1817" pos:column="20">Emit</name></name><argument_list pos:line="1817" pos:column="24">(<argument><expr><name><name pos:line="1817" pos:column="25">OpCodes</name><op:operator pos:line="1817" pos:column="32">.</op:operator><name pos:line="1817" pos:column="33">Callvirt</name></name></expr></argument>, <argument><expr><call><name><name pos:line="1817" pos:column="43">prop</name><op:operator pos:line="1817" pos:column="47">.</op:operator><name pos:line="1817" pos:column="48">GetGetMethod</name></name><argument_list pos:line="1817" pos:column="60">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1817" pos:column="65">// stack is [parameters] [[parameters]] [parameter] [parameter] [typed-value]</comment>
                <decl_stmt><decl><type><name pos:line="1818" pos:column="17">bool</name></type> <name pos:line="1818" pos:column="22">checkForNull</name> <init pos:line="1818" pos:column="35">= <expr><lit:literal type="boolean" pos:line="1818" pos:column="37">true</lit:literal></expr></init></decl>;</decl_stmt>
                <if pos:line="1819" pos:column="17">if <condition pos:line="1819" pos:column="20">(<expr><name><name pos:line="1819" pos:column="21">prop</name><op:operator pos:line="1819" pos:column="25">.</op:operator><name pos:line="1819" pos:column="26">PropertyType</name><op:operator pos:line="1819" pos:column="38">.</op:operator><name pos:line="1819" pos:column="39">IsValueType</name></name></expr>)</condition><then pos:line="1819" pos:column="51">
                <block pos:line="1820" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="1821" pos:column="21">il</name><op:operator pos:line="1821" pos:column="23">.</op:operator><name pos:line="1821" pos:column="24">Emit</name></name><argument_list pos:line="1821" pos:column="28">(<argument><expr><name><name pos:line="1821" pos:column="29">OpCodes</name><op:operator pos:line="1821" pos:column="36">.</op:operator><name pos:line="1821" pos:column="37">Box</name></name></expr></argument>, <argument><expr><name><name pos:line="1821" pos:column="42">prop</name><op:operator pos:line="1821" pos:column="46">.</op:operator><name pos:line="1821" pos:column="47">PropertyType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1821" pos:column="62">// stack is [parameters] [[parameters]] [parameter] [parameter] [boxed-value]</comment>
                    <if pos:line="1822" pos:column="21">if <condition pos:line="1822" pos:column="24">(<expr><call><name><name pos:line="1822" pos:column="25">Nullable</name><op:operator pos:line="1822" pos:column="33">.</op:operator><name pos:line="1822" pos:column="34">GetUnderlyingType</name></name><argument_list pos:line="1822" pos:column="51">(<argument><expr><name><name pos:line="1822" pos:column="52">prop</name><op:operator pos:line="1822" pos:column="56">.</op:operator><name pos:line="1822" pos:column="57">PropertyType</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="1822" pos:column="71">==</op:operator> <name pos:line="1822" pos:column="74">null</name></expr>)</condition><then pos:line="1822" pos:column="79">
                    <block pos:line="1823" pos:column="21">{   <comment type="line" pos:line="1823" pos:column="25">// struct but not Nullable&lt;T&gt;; boxed value cannot be null</comment>
                        <expr_stmt><expr><name pos:line="1824" pos:column="25">checkForNull</name> <op:operator pos:line="1824" pos:column="38">=</op:operator> <lit:literal type="boolean" pos:line="1824" pos:column="40">false</lit:literal></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>
                <if pos:line="1827" pos:column="17">if <condition pos:line="1827" pos:column="20">(<expr><name pos:line="1827" pos:column="21">checkForNull</name></expr>)</condition><then pos:line="1827" pos:column="34">
                <block pos:line="1828" pos:column="17">{
                    <if pos:line="1829" pos:column="21">if <condition pos:line="1829" pos:column="24">(<expr><name pos:line="1829" pos:column="25">dbType</name> <op:operator pos:line="1829" pos:column="32">==</op:operator> <name><name pos:line="1829" pos:column="35">DbType</name><op:operator pos:line="1829" pos:column="41">.</op:operator><name pos:line="1829" pos:column="42">String</name> <type:modifier pos:line="1829" pos:column="49">&amp;&amp;</type:modifier></name> <op:operator pos:line="1829" pos:column="52">!</op:operator><name pos:line="1829" pos:column="53">haveInt32Arg1</name></expr>)</condition><then pos:line="1829" pos:column="67">
                    <block pos:line="1830" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="1831" pos:column="25">il</name><op:operator pos:line="1831" pos:column="27">.</op:operator><name pos:line="1831" pos:column="28">DeclareLocal</name></name><argument_list pos:line="1831" pos:column="40">(<argument><expr><call><name pos:line="1831" pos:column="41">typeof</name><argument_list pos:line="1831" pos:column="47">(<argument><expr><name pos:line="1831" pos:column="48">int</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="1832" pos:column="25">haveInt32Arg1</name> <op:operator pos:line="1832" pos:column="39">=</op:operator> <lit:literal type="boolean" pos:line="1832" pos:column="41">true</lit:literal></expr>;</expr_stmt>
                    }</block></then></if>
                    <comment type="line" pos:line="1834" pos:column="21">// relative stack: [boxed value]</comment>
                    <expr_stmt><expr><call><name><name pos:line="1835" pos:column="21">il</name><op:operator pos:line="1835" pos:column="23">.</op:operator><name pos:line="1835" pos:column="24">Emit</name></name><argument_list pos:line="1835" pos:column="28">(<argument><expr><name><name pos:line="1835" pos:column="29">OpCodes</name><op:operator pos:line="1835" pos:column="36">.</op:operator><name pos:line="1835" pos:column="37">Dup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="1835" pos:column="42">// relative stack: [boxed value] [boxed value]</comment>
                    <decl_stmt><decl><type><name pos:line="1836" pos:column="21">Label</name></type> <name pos:line="1836" pos:column="27">notNull</name> <init pos:line="1836" pos:column="35">= <expr><call><name><name pos:line="1836" pos:column="37">il</name><op:operator pos:line="1836" pos:column="39">.</op:operator><name pos:line="1836" pos:column="40">DefineLabel</name></name><argument_list pos:line="1836" pos:column="51">()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="1837" pos:column="21">Label</name><type:modifier pos:line="1837" pos:column="26">?</type:modifier></type> <name pos:line="1837" pos:column="28">allDone</name> <init pos:line="1837" pos:column="36">= <expr><name pos:line="1837" pos:column="38">dbType</name> <op:operator pos:line="1837" pos:column="45">==</op:operator> <name><name pos:line="1837" pos:column="48">DbType</name><op:operator pos:line="1837" pos:column="54">.</op:operator><name pos:line="1837" pos:column="55">String</name> <type:modifier pos:line="1837" pos:column="62">?</type:modifier></name> <call><name><name pos:line="1837" pos:column="64">il</name><op:operator pos:line="1837" pos:column="66">.</op:operator><name pos:line="1837" pos:column="67">DefineLabel</name></name><argument_list pos:line="1837" pos:column="78">()</argument_list></call> <op:operator pos:line="1837" pos:column="81">:</op:operator> <op:operator pos:line="1837" pos:column="83">(</op:operator><name pos:line="1837" pos:column="84">Label</name><op:operator pos:line="1837" pos:column="89">?</op:operator><op:operator pos:line="1837" pos:column="90">)</op:operator><name pos:line="1837" pos:column="91">null</name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="1838" pos:column="21">il</name><op:operator pos:line="1838" pos:column="23">.</op:operator><name pos:line="1838" pos:column="24">Emit</name></name><argument_list pos:line="1838" pos:column="28">(<argument><expr><name><name pos:line="1838" pos:column="29">OpCodes</name><op:operator pos:line="1838" pos:column="36">.</op:operator><name pos:line="1838" pos:column="37">Brtrue_S</name></name></expr></argument>, <argument><expr><name pos:line="1838" pos:column="47">notNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="line" pos:line="1839" pos:column="21">// relative stack [boxed value = null]</comment>
                    <expr_stmt><expr><call><name><name pos:line="1840" pos:column="21">il</name><op:operator pos:line="1840" pos:column="23">.</op:operator><name pos:line="1840" pos:column="24">Emit</name></name><argument_list pos:line="1840" pos:column="28">(<argument><expr><name><name pos:line="1840" pos:column="29">OpCodes</name><op:operator pos:line="1840" pos:column="36">.</op:operator><name pos:line="1840" pos:column="37">Pop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1840" pos:column="43">// relative stack empty</comment>
                    <expr_stmt><expr><call><name><name pos:line="1841" pos:column="21">il</name><op:operator pos:line="1841" pos:column="23">.</op:operator><name pos:line="1841" pos:column="24">Emit</name></name><argument_list pos:line="1841" pos:column="28">(<argument><expr><name><name pos:line="1841" pos:column="29">OpCodes</name><op:operator pos:line="1841" pos:column="36">.</op:operator><name pos:line="1841" pos:column="37">Ldsfld</name></name></expr></argument>, <argument><expr><call><name pos:line="1841" pos:column="45">typeof</name><argument_list pos:line="1841" pos:column="51">(<argument><expr><name pos:line="1841" pos:column="52">DBNull</name></expr></argument>)</argument_list></call><op:operator pos:line="1841" pos:column="59">.</op:operator><call><name pos:line="1841" pos:column="60">GetField</name><argument_list pos:line="1841" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="1841" pos:column="69">"Value"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1841" pos:column="80">// relative stack [DBNull]</comment>
                    <if pos:line="1842" pos:column="21">if <condition pos:line="1842" pos:column="24">(<expr><name pos:line="1842" pos:column="25">dbType</name> <op:operator pos:line="1842" pos:column="32">==</op:operator> <name><name pos:line="1842" pos:column="35">DbType</name><op:operator pos:line="1842" pos:column="41">.</op:operator><name pos:line="1842" pos:column="42">String</name></name></expr>)</condition><then pos:line="1842" pos:column="49">
                    <block pos:line="1843" pos:column="21">{
                        <expr_stmt><expr><call><name pos:line="1844" pos:column="25">EmitInt32</name><argument_list pos:line="1844" pos:column="34">(<argument><expr><name pos:line="1844" pos:column="35">il</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1844" pos:column="39">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="1845" pos:column="25">il</name><op:operator pos:line="1845" pos:column="27">.</op:operator><name pos:line="1845" pos:column="28">Emit</name></name><argument_list pos:line="1845" pos:column="32">(<argument><expr><name><name pos:line="1845" pos:column="33">OpCodes</name><op:operator pos:line="1845" pos:column="40">.</op:operator><name pos:line="1845" pos:column="41">Stloc_1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <if pos:line="1847" pos:column="21">if <condition pos:line="1847" pos:column="24">(<expr><name pos:line="1847" pos:column="25">allDone</name> <op:operator pos:line="1847" pos:column="33">!=</op:operator> <name pos:line="1847" pos:column="36">null</name></expr>)</condition><then pos:line="1847" pos:column="41"> <expr_stmt><expr><call><name><name pos:line="1847" pos:column="42">il</name><op:operator pos:line="1847" pos:column="44">.</op:operator><name pos:line="1847" pos:column="45">Emit</name></name><argument_list pos:line="1847" pos:column="49">(<argument><expr><name><name pos:line="1847" pos:column="50">OpCodes</name><op:operator pos:line="1847" pos:column="57">.</op:operator><name pos:line="1847" pos:column="58">Br_S</name></name></expr></argument>, <argument><expr><name><name pos:line="1847" pos:column="64">allDone</name><op:operator pos:line="1847" pos:column="71">.</op:operator><name pos:line="1847" pos:column="72">Value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                    <expr_stmt><expr><call><name><name pos:line="1848" pos:column="21">il</name><op:operator pos:line="1848" pos:column="23">.</op:operator><name pos:line="1848" pos:column="24">MarkLabel</name></name><argument_list pos:line="1848" pos:column="33">(<argument><expr><name pos:line="1848" pos:column="34">notNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if pos:line="1849" pos:column="21">if <condition pos:line="1849" pos:column="24">(<expr><name><name pos:line="1849" pos:column="25">prop</name><op:operator pos:line="1849" pos:column="29">.</op:operator><name pos:line="1849" pos:column="30">PropertyType</name></name> <op:operator pos:line="1849" pos:column="43">==</op:operator> <call><name pos:line="1849" pos:column="46">typeof</name><argument_list pos:line="1849" pos:column="52">(<argument><expr><name pos:line="1849" pos:column="53">string</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1849" pos:column="61">
                    <block pos:line="1850" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="1851" pos:column="25">il</name><op:operator pos:line="1851" pos:column="27">.</op:operator><name pos:line="1851" pos:column="28">Emit</name></name><argument_list pos:line="1851" pos:column="32">(<argument><expr><name><name pos:line="1851" pos:column="33">OpCodes</name><op:operator pos:line="1851" pos:column="40">.</op:operator><name pos:line="1851" pos:column="41">Dup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1851" pos:column="47">// [string] [string]</comment>
                        <expr_stmt><expr><call><name><name pos:line="1852" pos:column="25">il</name><op:operator pos:line="1852" pos:column="27">.</op:operator><name pos:line="1852" pos:column="28">EmitCall</name></name><argument_list pos:line="1852" pos:column="36">(<argument><expr><name><name pos:line="1852" pos:column="37">OpCodes</name><op:operator pos:line="1852" pos:column="44">.</op:operator><name pos:line="1852" pos:column="45">Callvirt</name></name></expr></argument>, <argument><expr><call><name pos:line="1852" pos:column="55">typeof</name><argument_list pos:line="1852" pos:column="61">(<argument><expr><name pos:line="1852" pos:column="62">string</name></expr></argument>)</argument_list></call><op:operator pos:line="1852" pos:column="69">.</op:operator><call><name pos:line="1852" pos:column="70">GetProperty</name><argument_list pos:line="1852" pos:column="81">(<argument><expr><lit:literal type="string" pos:line="1852" pos:column="82">"Length"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1852" pos:column="91">.</op:operator><call><name pos:line="1852" pos:column="92">GetGetMethod</name><argument_list pos:line="1852" pos:column="104">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1852" pos:column="108">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1852" pos:column="115">// [string] [length]</comment>
                        <expr_stmt><expr><call><name pos:line="1853" pos:column="25">EmitInt32</name><argument_list pos:line="1853" pos:column="34">(<argument><expr><name pos:line="1853" pos:column="35">il</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1853" pos:column="39">4000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1853" pos:column="46">// [string] [length] [4000]</comment>
                        <expr_stmt><expr><call><name><name pos:line="1854" pos:column="25">il</name><op:operator pos:line="1854" pos:column="27">.</op:operator><name pos:line="1854" pos:column="28">Emit</name></name><argument_list pos:line="1854" pos:column="32">(<argument><expr><name><name pos:line="1854" pos:column="33">OpCodes</name><op:operator pos:line="1854" pos:column="40">.</op:operator><name pos:line="1854" pos:column="41">Cgt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1854" pos:column="47">// [string] [0 or 1]</comment>
                        <decl_stmt><decl><type><name pos:line="1855" pos:column="25">Label</name></type> <name pos:line="1855" pos:column="31">isLong</name> <init pos:line="1855" pos:column="38">= <expr><call><name><name pos:line="1855" pos:column="40">il</name><op:operator pos:line="1855" pos:column="42">.</op:operator><name pos:line="1855" pos:column="43">DefineLabel</name></name><argument_list pos:line="1855" pos:column="54">()</argument_list></call></expr></init><op:operator pos:line="1855" pos:column="56">,</op:operator> <name pos:line="1855" pos:column="58">lenDone</name> <init pos:line="1855" pos:column="66">= <expr><call><name><name pos:line="1855" pos:column="68">il</name><op:operator pos:line="1855" pos:column="70">.</op:operator><name pos:line="1855" pos:column="71">DefineLabel</name></name><argument_list pos:line="1855" pos:column="82">()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name pos:line="1856" pos:column="25">il</name><op:operator pos:line="1856" pos:column="27">.</op:operator><name pos:line="1856" pos:column="28">Emit</name></name><argument_list pos:line="1856" pos:column="32">(<argument><expr><name><name pos:line="1856" pos:column="33">OpCodes</name><op:operator pos:line="1856" pos:column="40">.</op:operator><name pos:line="1856" pos:column="41">Brtrue_S</name></name></expr></argument>, <argument><expr><name pos:line="1856" pos:column="51">isLong</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name pos:line="1857" pos:column="25">EmitInt32</name><argument_list pos:line="1857" pos:column="34">(<argument><expr><name pos:line="1857" pos:column="35">il</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1857" pos:column="39">4000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1857" pos:column="46">// [string] [4000]</comment>
                        <expr_stmt><expr><call><name><name pos:line="1858" pos:column="25">il</name><op:operator pos:line="1858" pos:column="27">.</op:operator><name pos:line="1858" pos:column="28">Emit</name></name><argument_list pos:line="1858" pos:column="32">(<argument><expr><name><name pos:line="1858" pos:column="33">OpCodes</name><op:operator pos:line="1858" pos:column="40">.</op:operator><name pos:line="1858" pos:column="41">Br_S</name></name></expr></argument>, <argument><expr><name pos:line="1858" pos:column="47">lenDone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="1859" pos:column="25">il</name><op:operator pos:line="1859" pos:column="27">.</op:operator><name pos:line="1859" pos:column="28">MarkLabel</name></name><argument_list pos:line="1859" pos:column="37">(<argument><expr><name pos:line="1859" pos:column="38">isLong</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name pos:line="1860" pos:column="25">EmitInt32</name><argument_list pos:line="1860" pos:column="34">(<argument><expr><name pos:line="1860" pos:column="35">il</name></expr></argument>, <argument><expr><op:operator pos:line="1860" pos:column="39">-</op:operator><lit:literal type="number" pos:line="1860" pos:column="40">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1860" pos:column="44">// [string] [-1]</comment>
                        <expr_stmt><expr><call><name><name pos:line="1861" pos:column="25">il</name><op:operator pos:line="1861" pos:column="27">.</op:operator><name pos:line="1861" pos:column="28">MarkLabel</name></name><argument_list pos:line="1861" pos:column="37">(<argument><expr><name pos:line="1861" pos:column="38">lenDone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="1862" pos:column="25">il</name><op:operator pos:line="1862" pos:column="27">.</op:operator><name pos:line="1862" pos:column="28">Emit</name></name><argument_list pos:line="1862" pos:column="32">(<argument><expr><name><name pos:line="1862" pos:column="33">OpCodes</name><op:operator pos:line="1862" pos:column="40">.</op:operator><name pos:line="1862" pos:column="41">Stloc_1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1862" pos:column="51">// [string] </comment>
                    }</block></then></if>
                    <if pos:line="1864" pos:column="21">if <condition pos:line="1864" pos:column="24">(<expr><name><name pos:line="1864" pos:column="25">prop</name><op:operator pos:line="1864" pos:column="29">.</op:operator><name pos:line="1864" pos:column="30">PropertyType</name><op:operator pos:line="1864" pos:column="42">.</op:operator><name pos:line="1864" pos:column="43">FullName</name></name> <op:operator pos:line="1864" pos:column="52">==</op:operator> <name pos:line="1864" pos:column="55">LinqBinary</name></expr>)</condition><then pos:line="1864" pos:column="66">
                    <block pos:line="1865" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="1866" pos:column="25">il</name><op:operator pos:line="1866" pos:column="27">.</op:operator><name pos:line="1866" pos:column="28">EmitCall</name></name><argument_list pos:line="1866" pos:column="36">(<argument><expr><name><name pos:line="1866" pos:column="37">OpCodes</name><op:operator pos:line="1866" pos:column="44">.</op:operator><name pos:line="1866" pos:column="45">Callvirt</name></name></expr></argument>, <argument><expr><call><name><name pos:line="1866" pos:column="55">prop</name><op:operator pos:line="1866" pos:column="59">.</op:operator><name pos:line="1866" pos:column="60">PropertyType</name><op:operator pos:line="1866" pos:column="72">.</op:operator><name pos:line="1866" pos:column="73">GetMethod</name></name><argument_list pos:line="1866" pos:column="82">(<argument><expr><lit:literal type="string" pos:line="1866" pos:column="83">"ToArray"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1866" pos:column="94">BindingFlags</name><op:operator pos:line="1866" pos:column="106">.</op:operator><name pos:line="1866" pos:column="107">Public</name></name> <op:operator pos:line="1866" pos:column="114">|</op:operator> <name><name pos:line="1866" pos:column="116">BindingFlags</name><op:operator pos:line="1866" pos:column="128">.</op:operator><name pos:line="1866" pos:column="129">Instance</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="1866" pos:column="140">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <if pos:line="1868" pos:column="21">if <condition pos:line="1868" pos:column="24">(<expr><name pos:line="1868" pos:column="25">allDone</name> <op:operator pos:line="1868" pos:column="33">!=</op:operator> <name pos:line="1868" pos:column="36">null</name></expr>)</condition><then pos:line="1868" pos:column="41"> <expr_stmt><expr><call><name><name pos:line="1868" pos:column="42">il</name><op:operator pos:line="1868" pos:column="44">.</op:operator><name pos:line="1868" pos:column="45">MarkLabel</name></name><argument_list pos:line="1868" pos:column="54">(<argument><expr><name><name pos:line="1868" pos:column="55">allDone</name><op:operator pos:line="1868" pos:column="62">.</op:operator><name pos:line="1868" pos:column="63">Value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                    <comment type="line" pos:line="1869" pos:column="21">// relative stack [boxed value or DBNull]</comment>
                }</block></then></if>
                <expr_stmt><expr><call><name><name pos:line="1871" pos:column="17">il</name><op:operator pos:line="1871" pos:column="19">.</op:operator><name pos:line="1871" pos:column="20">EmitCall</name></name><argument_list pos:line="1871" pos:column="28">(<argument><expr><name><name pos:line="1871" pos:column="29">OpCodes</name><op:operator pos:line="1871" pos:column="36">.</op:operator><name pos:line="1871" pos:column="37">Callvirt</name></name></expr></argument>, <argument><expr><call><name pos:line="1871" pos:column="47">typeof</name><argument_list pos:line="1871" pos:column="53">(<argument><expr><name pos:line="1871" pos:column="54">IDataParameter</name></expr></argument>)</argument_list></call><op:operator pos:line="1871" pos:column="69">.</op:operator><call><name pos:line="1871" pos:column="70">GetProperty</name><argument_list pos:line="1871" pos:column="81">(<argument><expr><lit:literal type="string" pos:line="1871" pos:column="82">"Value"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1871" pos:column="90">.</op:operator><call><name pos:line="1871" pos:column="91">GetSetMethod</name><argument_list pos:line="1871" pos:column="103">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1871" pos:column="107">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="1871" pos:column="113">// stack is now [parameters] [[parameters]] [parameter]</comment>

                <if pos:line="1873" pos:column="17">if <condition pos:line="1873" pos:column="20">(<expr><name><name pos:line="1873" pos:column="21">prop</name><op:operator pos:line="1873" pos:column="25">.</op:operator><name pos:line="1873" pos:column="26">PropertyType</name></name> <op:operator pos:line="1873" pos:column="39">==</op:operator> <call><name pos:line="1873" pos:column="42">typeof</name><argument_list pos:line="1873" pos:column="48">(<argument><expr><name pos:line="1873" pos:column="49">string</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1873" pos:column="57">
                <block pos:line="1874" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="1875" pos:column="21">var</name></type> <name pos:line="1875" pos:column="25">endOfSize</name> <init pos:line="1875" pos:column="35">= <expr><call><name><name pos:line="1875" pos:column="37">il</name><op:operator pos:line="1875" pos:column="39">.</op:operator><name pos:line="1875" pos:column="40">DefineLabel</name></name><argument_list pos:line="1875" pos:column="51">()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <comment type="line" pos:line="1876" pos:column="21">// don't set if 0</comment>
                    <expr_stmt><expr><call><name><name pos:line="1877" pos:column="21">il</name><op:operator pos:line="1877" pos:column="23">.</op:operator><name pos:line="1877" pos:column="24">Emit</name></name><argument_list pos:line="1877" pos:column="28">(<argument><expr><name><name pos:line="1877" pos:column="29">OpCodes</name><op:operator pos:line="1877" pos:column="36">.</op:operator><name pos:line="1877" pos:column="37">Ldloc_1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1877" pos:column="47">// [parameters] [[parameters]] [parameter] [size]</comment>
                    <expr_stmt><expr><call><name><name pos:line="1878" pos:column="21">il</name><op:operator pos:line="1878" pos:column="23">.</op:operator><name pos:line="1878" pos:column="24">Emit</name></name><argument_list pos:line="1878" pos:column="28">(<argument><expr><name><name pos:line="1878" pos:column="29">OpCodes</name><op:operator pos:line="1878" pos:column="36">.</op:operator><name pos:line="1878" pos:column="37">Brfalse_S</name></name></expr></argument>, <argument><expr><name pos:line="1878" pos:column="48">endOfSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1878" pos:column="60">// [parameters] [[parameters]] [parameter]</comment>

                    <expr_stmt><expr><call><name><name pos:line="1880" pos:column="21">il</name><op:operator pos:line="1880" pos:column="23">.</op:operator><name pos:line="1880" pos:column="24">Emit</name></name><argument_list pos:line="1880" pos:column="28">(<argument><expr><name><name pos:line="1880" pos:column="29">OpCodes</name><op:operator pos:line="1880" pos:column="36">.</op:operator><name pos:line="1880" pos:column="37">Dup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="1880" pos:column="42">// stack is now [parameters] [[parameters]] [parameter] [parameter]</comment>
                    <expr_stmt><expr><call><name><name pos:line="1881" pos:column="21">il</name><op:operator pos:line="1881" pos:column="23">.</op:operator><name pos:line="1881" pos:column="24">Emit</name></name><argument_list pos:line="1881" pos:column="28">(<argument><expr><name><name pos:line="1881" pos:column="29">OpCodes</name><op:operator pos:line="1881" pos:column="36">.</op:operator><name pos:line="1881" pos:column="37">Ldloc_1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1881" pos:column="47">// stack is now [parameters] [[parameters]] [parameter] [parameter] [size]</comment>
                    <expr_stmt><expr><call><name><name pos:line="1882" pos:column="21">il</name><op:operator pos:line="1882" pos:column="23">.</op:operator><name pos:line="1882" pos:column="24">EmitCall</name></name><argument_list pos:line="1882" pos:column="32">(<argument><expr><name><name pos:line="1882" pos:column="33">OpCodes</name><op:operator pos:line="1882" pos:column="40">.</op:operator><name pos:line="1882" pos:column="41">Callvirt</name></name></expr></argument>, <argument><expr><call><name pos:line="1882" pos:column="51">typeof</name><argument_list pos:line="1882" pos:column="57">(<argument><expr><name pos:line="1882" pos:column="58">IDbDataParameter</name></expr></argument>)</argument_list></call><op:operator pos:line="1882" pos:column="75">.</op:operator><call><name pos:line="1882" pos:column="76">GetProperty</name><argument_list pos:line="1882" pos:column="87">(<argument><expr><lit:literal type="string" pos:line="1882" pos:column="88">"Size"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1882" pos:column="95">.</op:operator><call><name pos:line="1882" pos:column="96">GetSetMethod</name><argument_list pos:line="1882" pos:column="108">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1882" pos:column="112">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1882" pos:column="119">// stack is now [parameters] [[parameters]] [parameter]</comment>

                    <expr_stmt><expr><call><name><name pos:line="1884" pos:column="21">il</name><op:operator pos:line="1884" pos:column="23">.</op:operator><name pos:line="1884" pos:column="24">MarkLabel</name></name><argument_list pos:line="1884" pos:column="33">(<argument><expr><name pos:line="1884" pos:column="34">endOfSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <if pos:line="1886" pos:column="17">if <condition pos:line="1886" pos:column="20">(<expr><name pos:line="1886" pos:column="21">checkForDuplicates</name></expr>)</condition><then pos:line="1886" pos:column="40">
                <block pos:line="1887" pos:column="17">{
                    <comment type="line" pos:line="1888" pos:column="21">// stack is now [parameters] [parameter]</comment>
                    <expr_stmt><expr><call><name><name pos:line="1889" pos:column="21">il</name><op:operator pos:line="1889" pos:column="23">.</op:operator><name pos:line="1889" pos:column="24">Emit</name></name><argument_list pos:line="1889" pos:column="28">(<argument><expr><name><name pos:line="1889" pos:column="29">OpCodes</name><op:operator pos:line="1889" pos:column="36">.</op:operator><name pos:line="1889" pos:column="37">Pop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1889" pos:column="43">// don't need parameter any more</comment>
                }</block></then>
                <else pos:line="1891" pos:column="17">else
                <block pos:line="1892" pos:column="17">{
                    <comment type="line" pos:line="1893" pos:column="21">// stack is now [parameters] [parameters] [parameter]</comment>
                    <comment type="line" pos:line="1894" pos:column="21">// blindly add</comment>
                    <expr_stmt><expr><call><name><name pos:line="1895" pos:column="21">il</name><op:operator pos:line="1895" pos:column="23">.</op:operator><name pos:line="1895" pos:column="24">EmitCall</name></name><argument_list pos:line="1895" pos:column="32">(<argument><expr><name><name pos:line="1895" pos:column="33">OpCodes</name><op:operator pos:line="1895" pos:column="40">.</op:operator><name pos:line="1895" pos:column="41">Callvirt</name></name></expr></argument>, <argument><expr><call><name pos:line="1895" pos:column="51">typeof</name><argument_list pos:line="1895" pos:column="57">(<argument><expr><name pos:line="1895" pos:column="58">IList</name></expr></argument>)</argument_list></call><op:operator pos:line="1895" pos:column="64">.</op:operator><call><name pos:line="1895" pos:column="65">GetMethod</name><argument_list pos:line="1895" pos:column="74">(<argument><expr><lit:literal type="string" pos:line="1895" pos:column="75">"Add"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="1895" pos:column="83">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1895" pos:column="90">// stack is now [parameters]</comment>
                    <expr_stmt><expr><call><name><name pos:line="1896" pos:column="21">il</name><op:operator pos:line="1896" pos:column="23">.</op:operator><name pos:line="1896" pos:column="24">Emit</name></name><argument_list pos:line="1896" pos:column="28">(<argument><expr><name><name pos:line="1896" pos:column="29">OpCodes</name><op:operator pos:line="1896" pos:column="36">.</op:operator><name pos:line="1896" pos:column="37">Pop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1896" pos:column="43">// IList.Add returns the new index (int); we don't care</comment>
                }</block></else></if>
            }</block></foreach>
            <comment type="line" pos:line="1899" pos:column="13">// stack is currently [parameters]</comment>
            <expr_stmt><expr><call><name><name pos:line="1900" pos:column="13">il</name><op:operator pos:line="1900" pos:column="15">.</op:operator><name pos:line="1900" pos:column="16">Emit</name></name><argument_list pos:line="1900" pos:column="20">(<argument><expr><name><name pos:line="1900" pos:column="21">OpCodes</name><op:operator pos:line="1900" pos:column="28">.</op:operator><name pos:line="1900" pos:column="29">Pop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1900" pos:column="35">// stack is now empty</comment>
            <expr_stmt><expr><call><name><name pos:line="1901" pos:column="13">il</name><op:operator pos:line="1901" pos:column="15">.</op:operator><name pos:line="1901" pos:column="16">Emit</name></name><argument_list pos:line="1901" pos:column="20">(<argument><expr><name><name pos:line="1901" pos:column="21">OpCodes</name><op:operator pos:line="1901" pos:column="28">.</op:operator><name pos:line="1901" pos:column="29">Ret</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="1902" pos:column="13">return <expr><op:operator pos:line="1902" pos:column="20">(</op:operator><name><name pos:line="1902" pos:column="21">Action</name><argument_list pos:line="1902" pos:column="27">&lt;<argument><name pos:line="1902" pos:column="28">IDbCommand</name></argument>, <argument><name pos:line="1902" pos:column="40">object</name></argument>&gt;</argument_list></name><op:operator pos:line="1902" pos:column="47">)</op:operator><call><name><name pos:line="1902" pos:column="48">dm</name><op:operator pos:line="1902" pos:column="50">.</op:operator><name pos:line="1902" pos:column="51">CreateDelegate</name></name><argument_list pos:line="1902" pos:column="65">(<argument><expr><call><name pos:line="1902" pos:column="66">typeof</name><argument_list pos:line="1902" pos:column="72">(<argument><expr><name><name pos:line="1902" pos:column="73">Action</name><argument_list pos:line="1902" pos:column="79">&lt;<argument><name pos:line="1902" pos:column="80">IDbCommand</name></argument>, <argument><name pos:line="1902" pos:column="92">object</name></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="1905" pos:column="9">private</specifier> <specifier pos:line="1905" pos:column="17">static</specifier> <name pos:line="1905" pos:column="24">IDbCommand</name></type> <name pos:line="1905" pos:column="35">SetupCommand</name><parameter_list pos:line="1905" pos:column="47">(<param><decl><type><name pos:line="1905" pos:column="48">IDbConnection</name></type> <name pos:line="1905" pos:column="62">cnn</name></decl></param>, <param><decl><type><name pos:line="1905" pos:column="67">IDbTransaction</name></type> <name pos:line="1905" pos:column="82">transaction</name></decl></param>, <param><decl><type><name pos:line="1905" pos:column="95">string</name></type> <name pos:line="1905" pos:column="102">sql</name></decl></param>, <param><decl><type><name><name pos:line="1905" pos:column="107">Action</name><argument_list pos:line="1905" pos:column="113">&lt;<argument><name pos:line="1905" pos:column="114">IDbCommand</name></argument>, <argument><name pos:line="1905" pos:column="126">object</name></argument>&gt;</argument_list></name></type> <name pos:line="1905" pos:column="134">paramReader</name></decl></param>, <param><decl><type><name pos:line="1905" pos:column="147">object</name></type> <name pos:line="1905" pos:column="154">obj</name></decl></param>, <param><decl><type><name pos:line="1905" pos:column="159">int</name><type:modifier pos:line="1905" pos:column="162">?</type:modifier></type> <name pos:line="1905" pos:column="164">commandTimeout</name></decl></param>, <param><decl><type><name pos:line="1905" pos:column="180">CommandType</name><type:modifier pos:line="1905" pos:column="191">?</type:modifier></type> <name pos:line="1905" pos:column="193">commandType</name></decl></param>)</parameter_list>
        <block pos:line="1906" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="1907" pos:column="13">var</name></type> <name pos:line="1907" pos:column="17">cmd</name> <init pos:line="1907" pos:column="21">= <expr><call><name><name pos:line="1907" pos:column="23">cnn</name><op:operator pos:line="1907" pos:column="26">.</op:operator><name pos:line="1907" pos:column="27">CreateCommand</name></name><argument_list pos:line="1907" pos:column="40">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1908" pos:column="13">var</name></type> <name pos:line="1908" pos:column="17">bindByName</name> <init pos:line="1908" pos:column="28">= <expr><call><name pos:line="1908" pos:column="30">GetBindByName</name><argument_list pos:line="1908" pos:column="43">(<argument><expr><call><name><name pos:line="1908" pos:column="44">cmd</name><op:operator pos:line="1908" pos:column="47">.</op:operator><name pos:line="1908" pos:column="48">GetType</name></name><argument_list pos:line="1908" pos:column="55">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="1909" pos:column="13">if <condition pos:line="1909" pos:column="16">(<expr><name pos:line="1909" pos:column="17">bindByName</name> <op:operator pos:line="1909" pos:column="28">!=</op:operator> <name pos:line="1909" pos:column="31">null</name></expr>)</condition><then pos:line="1909" pos:column="36"> <expr_stmt><expr><call><name pos:line="1909" pos:column="37">bindByName</name><argument_list pos:line="1909" pos:column="47">(<argument><expr><name pos:line="1909" pos:column="48">cmd</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1909" pos:column="53">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            <if pos:line="1910" pos:column="13">if <condition pos:line="1910" pos:column="16">(<expr><name pos:line="1910" pos:column="17">transaction</name> <op:operator pos:line="1910" pos:column="29">!=</op:operator> <name pos:line="1910" pos:column="32">null</name></expr>)</condition><then pos:line="1910" pos:column="37">
                <expr_stmt><expr><name><name pos:line="1911" pos:column="17">cmd</name><op:operator pos:line="1911" pos:column="20">.</op:operator><name pos:line="1911" pos:column="21">Transaction</name></name> <op:operator pos:line="1911" pos:column="33">=</op:operator> <name pos:line="1911" pos:column="35">transaction</name></expr>;</expr_stmt></then></if>
            <expr_stmt><expr><name><name pos:line="1912" pos:column="13">cmd</name><op:operator pos:line="1912" pos:column="16">.</op:operator><name pos:line="1912" pos:column="17">CommandText</name></name> <op:operator pos:line="1912" pos:column="29">=</op:operator> <name pos:line="1912" pos:column="31">sql</name></expr>;</expr_stmt>
            <if pos:line="1913" pos:column="13">if <condition pos:line="1913" pos:column="16">(<expr><name><name pos:line="1913" pos:column="17">commandTimeout</name><op:operator pos:line="1913" pos:column="31">.</op:operator><name pos:line="1913" pos:column="32">HasValue</name></name></expr>)</condition><then pos:line="1913" pos:column="41">
                <expr_stmt><expr><name><name pos:line="1914" pos:column="17">cmd</name><op:operator pos:line="1914" pos:column="20">.</op:operator><name pos:line="1914" pos:column="21">CommandTimeout</name></name> <op:operator pos:line="1914" pos:column="36">=</op:operator> <name><name pos:line="1914" pos:column="38">commandTimeout</name><op:operator pos:line="1914" pos:column="52">.</op:operator><name pos:line="1914" pos:column="53">Value</name></name></expr>;</expr_stmt></then></if>
            <if pos:line="1915" pos:column="13">if <condition pos:line="1915" pos:column="16">(<expr><name><name pos:line="1915" pos:column="17">commandType</name><op:operator pos:line="1915" pos:column="28">.</op:operator><name pos:line="1915" pos:column="29">HasValue</name></name></expr>)</condition><then pos:line="1915" pos:column="38">
                <expr_stmt><expr><name><name pos:line="1916" pos:column="17">cmd</name><op:operator pos:line="1916" pos:column="20">.</op:operator><name pos:line="1916" pos:column="21">CommandType</name></name> <op:operator pos:line="1916" pos:column="33">=</op:operator> <name><name pos:line="1916" pos:column="35">commandType</name><op:operator pos:line="1916" pos:column="46">.</op:operator><name pos:line="1916" pos:column="47">Value</name></name></expr>;</expr_stmt></then></if>
            <if pos:line="1917" pos:column="13">if <condition pos:line="1917" pos:column="16">(<expr><name pos:line="1917" pos:column="17">paramReader</name> <op:operator pos:line="1917" pos:column="29">!=</op:operator> <name pos:line="1917" pos:column="32">null</name></expr>)</condition><then pos:line="1917" pos:column="37">
            <block pos:line="1918" pos:column="13">{
                <expr_stmt><expr><call><name pos:line="1919" pos:column="17">paramReader</name><argument_list pos:line="1919" pos:column="28">(<argument><expr><name pos:line="1919" pos:column="29">cmd</name></expr></argument>, <argument><expr><name pos:line="1919" pos:column="34">obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <return pos:line="1921" pos:column="13">return <expr><name pos:line="1921" pos:column="20">cmd</name></expr>;</return>
        }</block></function>


        <function><type><specifier pos:line="1925" pos:column="9">private</specifier> <specifier pos:line="1925" pos:column="17">static</specifier> <name pos:line="1925" pos:column="24">int</name></type> <name pos:line="1925" pos:column="28">ExecuteCommand</name><parameter_list pos:line="1925" pos:column="42">(<param><decl><type><name pos:line="1925" pos:column="43">IDbConnection</name></type> <name pos:line="1925" pos:column="57">cnn</name></decl></param>, <param><decl><type><name pos:line="1925" pos:column="62">IDbTransaction</name></type> <name pos:line="1925" pos:column="77">transaction</name></decl></param>, <param><decl><type><name pos:line="1925" pos:column="90">string</name></type> <name pos:line="1925" pos:column="97">sql</name></decl></param>, <param><decl><type><name><name pos:line="1925" pos:column="102">Action</name><argument_list pos:line="1925" pos:column="108">&lt;<argument><name pos:line="1925" pos:column="109">IDbCommand</name></argument>, <argument><name pos:line="1925" pos:column="121">object</name></argument>&gt;</argument_list></name></type> <name pos:line="1925" pos:column="129">paramReader</name></decl></param>, <param><decl><type><name pos:line="1925" pos:column="142">object</name></type> <name pos:line="1925" pos:column="149">obj</name></decl></param>, <param><decl><type><name pos:line="1925" pos:column="154">int</name><type:modifier pos:line="1925" pos:column="157">?</type:modifier></type> <name pos:line="1925" pos:column="159">commandTimeout</name></decl></param>, <param><decl><type><name pos:line="1925" pos:column="175">CommandType</name><type:modifier pos:line="1925" pos:column="186">?</type:modifier></type> <name pos:line="1925" pos:column="188">commandType</name></decl></param>)</parameter_list>
        <block pos:line="1926" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="1927" pos:column="13">IDbCommand</name></type> <name pos:line="1927" pos:column="24">cmd</name> <init pos:line="1927" pos:column="28">= <expr><name pos:line="1927" pos:column="30">null</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1928" pos:column="13">bool</name></type> <name pos:line="1928" pos:column="18">wasClosed</name> <init pos:line="1928" pos:column="28">= <expr><name><name pos:line="1928" pos:column="30">cnn</name><op:operator pos:line="1928" pos:column="33">.</op:operator><name pos:line="1928" pos:column="34">State</name></name> <op:operator pos:line="1928" pos:column="40">==</op:operator> <name><name pos:line="1928" pos:column="43">ConnectionState</name><op:operator pos:line="1928" pos:column="58">.</op:operator><name pos:line="1928" pos:column="59">Closed</name></name></expr></init></decl>;</decl_stmt>
            <try pos:line="1929" pos:column="13">try
            <block pos:line="1930" pos:column="13">{
                <expr_stmt><expr><name pos:line="1931" pos:column="17">cmd</name> <op:operator pos:line="1931" pos:column="21">=</op:operator> <call><name pos:line="1931" pos:column="23">SetupCommand</name><argument_list pos:line="1931" pos:column="35">(<argument><expr><name pos:line="1931" pos:column="36">cnn</name></expr></argument>, <argument><expr><name pos:line="1931" pos:column="41">transaction</name></expr></argument>, <argument><expr><name pos:line="1931" pos:column="54">sql</name></expr></argument>, <argument><expr><name pos:line="1931" pos:column="59">paramReader</name></expr></argument>, <argument><expr><name pos:line="1931" pos:column="72">obj</name></expr></argument>, <argument><expr><name pos:line="1931" pos:column="77">commandTimeout</name></expr></argument>, <argument><expr><name pos:line="1931" pos:column="93">commandType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="1932" pos:column="17">if <condition pos:line="1932" pos:column="20">(<expr><name pos:line="1932" pos:column="21">wasClosed</name></expr>)</condition><then pos:line="1932" pos:column="31"> <expr_stmt><expr><call><name><name pos:line="1932" pos:column="32">cnn</name><op:operator pos:line="1932" pos:column="35">.</op:operator><name pos:line="1932" pos:column="36">Open</name></name><argument_list pos:line="1932" pos:column="40">()</argument_list></call></expr>;</expr_stmt></then></if>
                <return pos:line="1933" pos:column="17">return <expr><call><name><name pos:line="1933" pos:column="24">cmd</name><op:operator pos:line="1933" pos:column="27">.</op:operator><name pos:line="1933" pos:column="28">ExecuteNonQuery</name></name><argument_list pos:line="1933" pos:column="43">()</argument_list></call></expr>;</return>
            }</block>
            <finally pos:line="1935" pos:column="13">finally
            <block pos:line="1936" pos:column="13">{
                <if pos:line="1937" pos:column="17">if <condition pos:line="1937" pos:column="20">(<expr><name pos:line="1937" pos:column="21">wasClosed</name></expr>)</condition><then pos:line="1937" pos:column="31"> <expr_stmt><expr><call><name><name pos:line="1937" pos:column="32">cnn</name><op:operator pos:line="1937" pos:column="35">.</op:operator><name pos:line="1937" pos:column="36">Close</name></name><argument_list pos:line="1937" pos:column="41">()</argument_list></call></expr>;</expr_stmt></then></if>
                <if pos:line="1938" pos:column="17">if <condition pos:line="1938" pos:column="20">(<expr><name pos:line="1938" pos:column="21">cmd</name> <op:operator pos:line="1938" pos:column="25">!=</op:operator> <name pos:line="1938" pos:column="28">null</name></expr>)</condition><then pos:line="1938" pos:column="33"> <expr_stmt><expr><call><name><name pos:line="1938" pos:column="34">cmd</name><op:operator pos:line="1938" pos:column="37">.</op:operator><name pos:line="1938" pos:column="38">Dispose</name></name><argument_list pos:line="1938" pos:column="45">()</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></finally></try>
        }</block></function>

        <function><type><specifier pos:line="1942" pos:column="9">private</specifier> <specifier pos:line="1942" pos:column="17">static</specifier> <name><name pos:line="1942" pos:column="24">Func</name><argument_list pos:line="1942" pos:column="28">&lt;<argument><name pos:line="1942" pos:column="29">IDataReader</name></argument>, <argument><name pos:line="1942" pos:column="42">object</name></argument>&gt;</argument_list></name></type> <name pos:line="1942" pos:column="50">GetStructDeserializer</name><parameter_list pos:line="1942" pos:column="71">(<param><decl><type><name pos:line="1942" pos:column="72">Type</name></type> <name pos:line="1942" pos:column="77">type</name></decl></param>, <param><decl><type><name pos:line="1942" pos:column="83">Type</name></type> <name pos:line="1942" pos:column="88">effectiveType</name></decl></param>, <param><decl><type><name pos:line="1942" pos:column="103">int</name></type> <name pos:line="1942" pos:column="107">index</name></decl></param>)</parameter_list>
        <block pos:line="1943" pos:column="9">{
            <comment type="line" pos:line="1944" pos:column="13">// no point using special per-type handling here; it boils down to the same, plus not all are supported anyway (see: SqlDataReader.GetChar - not supported!)</comment>
<cpp:pragma pos:line="1945" pos:column="1">#<cpp:directive pos:line="1945" pos:column="2">pragma</cpp:directive> warning disable 618</cpp:pragma>
            <if pos:line="1946" pos:column="13">if <condition pos:line="1946" pos:column="16">(<expr><name pos:line="1946" pos:column="17">type</name> <op:operator pos:line="1946" pos:column="22">==</op:operator> <call><name pos:line="1946" pos:column="25">typeof</name><argument_list pos:line="1946" pos:column="31">(<argument><expr><name pos:line="1946" pos:column="32">char</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1946" pos:column="38">
            <block pos:line="1947" pos:column="13">{ <comment type="line" pos:line="1947" pos:column="15">// this *does* need special handling, though</comment>
                <return pos:line="1948" pos:column="17">return <expr><lambda><name pos:line="1948" pos:column="24">r</name> <op:operator pos:line="1948" pos:column="26">=&gt;</op:operator> <call><name><name pos:line="1948" pos:column="29">SqlMapper</name><op:operator pos:line="1948" pos:column="38">.</op:operator><name pos:line="1948" pos:column="39">ReadChar</name></name><argument_list pos:line="1948" pos:column="47">(<argument><expr><call><name><name pos:line="1948" pos:column="48">r</name><op:operator pos:line="1948" pos:column="49">.</op:operator><name pos:line="1948" pos:column="50">GetValue</name></name><argument_list pos:line="1948" pos:column="58">(<argument><expr><name pos:line="1948" pos:column="59">index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></lambda></expr>;</return>
            }</block></then></if>
            <if pos:line="1950" pos:column="13">if <condition pos:line="1950" pos:column="16">(<expr><name pos:line="1950" pos:column="17">type</name> <op:operator pos:line="1950" pos:column="22">==</op:operator> <call><name pos:line="1950" pos:column="25">typeof</name><argument_list pos:line="1950" pos:column="31">(<argument><expr><name pos:line="1950" pos:column="32">char</name><op:operator pos:line="1950" pos:column="36">?</op:operator></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1950" pos:column="39">
            <block pos:line="1951" pos:column="13">{
                <return pos:line="1952" pos:column="17">return <expr><lambda><name pos:line="1952" pos:column="24">r</name> <op:operator pos:line="1952" pos:column="26">=&gt;</op:operator> <call><name><name pos:line="1952" pos:column="29">SqlMapper</name><op:operator pos:line="1952" pos:column="38">.</op:operator><name pos:line="1952" pos:column="39">ReadNullableChar</name></name><argument_list pos:line="1952" pos:column="55">(<argument><expr><call><name><name pos:line="1952" pos:column="56">r</name><op:operator pos:line="1952" pos:column="57">.</op:operator><name pos:line="1952" pos:column="58">GetValue</name></name><argument_list pos:line="1952" pos:column="66">(<argument><expr><name pos:line="1952" pos:column="67">index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></lambda></expr>;</return>
            }</block></then></if>
            <if pos:line="1954" pos:column="13">if <condition pos:line="1954" pos:column="16">(<expr><name><name pos:line="1954" pos:column="17">type</name><op:operator pos:line="1954" pos:column="21">.</op:operator><name pos:line="1954" pos:column="22">FullName</name></name> <op:operator pos:line="1954" pos:column="31">==</op:operator> <name pos:line="1954" pos:column="34">LinqBinary</name></expr>)</condition><then pos:line="1954" pos:column="45">
            <block pos:line="1955" pos:column="13">{
                <return pos:line="1956" pos:column="17">return <expr><lambda><name pos:line="1956" pos:column="24">r</name> <op:operator pos:line="1956" pos:column="26">=&gt;</op:operator> <call><name><name pos:line="1956" pos:column="29">Activator</name><op:operator pos:line="1956" pos:column="38">.</op:operator><name pos:line="1956" pos:column="39">CreateInstance</name></name><argument_list pos:line="1956" pos:column="53">(<argument><expr><name pos:line="1956" pos:column="54">type</name></expr></argument>, <argument><expr><call><name><name pos:line="1956" pos:column="60">r</name><op:operator pos:line="1956" pos:column="61">.</op:operator><name pos:line="1956" pos:column="62">GetValue</name></name><argument_list pos:line="1956" pos:column="70">(<argument><expr><name pos:line="1956" pos:column="71">index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></lambda></expr>;</return>
            }</block></then></if>
<cpp:pragma pos:line="1958" pos:column="1">#<cpp:directive pos:line="1958" pos:column="2">pragma</cpp:directive> warning restore 618</cpp:pragma>

            <if pos:line="1960" pos:column="13">if <condition pos:line="1960" pos:column="16">(<expr><name><name pos:line="1960" pos:column="17">effectiveType</name><op:operator pos:line="1960" pos:column="30">.</op:operator><name pos:line="1960" pos:column="31">IsEnum</name></name></expr>)</condition><then pos:line="1960" pos:column="38">
            <block pos:line="1961" pos:column="13">{   <comment type="line" pos:line="1961" pos:column="17">// assume the value is returned as the correct type (int/byte/etc), but box back to the typed enum</comment>
                <return pos:line="1962" pos:column="17">return <expr><lambda><name pos:line="1962" pos:column="24">r</name> <op:operator pos:line="1962" pos:column="26">=&gt;</op:operator>
                <block pos:line="1963" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="1964" pos:column="21">var</name></type> <name pos:line="1964" pos:column="25">val</name> <init pos:line="1964" pos:column="29">= <expr><call><name><name pos:line="1964" pos:column="31">r</name><op:operator pos:line="1964" pos:column="32">.</op:operator><name pos:line="1964" pos:column="33">GetValue</name></name><argument_list pos:line="1964" pos:column="41">(<argument><expr><name pos:line="1964" pos:column="42">index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <return pos:line="1965" pos:column="21">return <expr><name pos:line="1965" pos:column="28">val</name> <op:operator pos:line="1965" pos:column="32">is</op:operator> <name pos:line="1965" pos:column="35">DBNull</name> <op:operator pos:line="1965" pos:column="42">?</op:operator> <name pos:line="1965" pos:column="44">null</name> <op:operator pos:line="1965" pos:column="49">:</op:operator> <call><name><name pos:line="1965" pos:column="51">Enum</name><op:operator pos:line="1965" pos:column="55">.</op:operator><name pos:line="1965" pos:column="56">ToObject</name></name><argument_list pos:line="1965" pos:column="64">(<argument><expr><name pos:line="1965" pos:column="65">effectiveType</name></expr></argument>, <argument><expr><name pos:line="1965" pos:column="80">val</name></expr></argument>)</argument_list></call></expr>;</return>
                }</block></lambda></expr>;</return>
            }</block></then></if>
            <return pos:line="1968" pos:column="13">return <expr><lambda><name pos:line="1968" pos:column="20">r</name> <op:operator pos:line="1968" pos:column="22">=&gt;</op:operator>
            <block pos:line="1969" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="1970" pos:column="17">var</name></type> <name pos:line="1970" pos:column="21">val</name> <init pos:line="1970" pos:column="25">= <expr><call><name><name pos:line="1970" pos:column="27">r</name><op:operator pos:line="1970" pos:column="28">.</op:operator><name pos:line="1970" pos:column="29">GetValue</name></name><argument_list pos:line="1970" pos:column="37">(<argument><expr><name pos:line="1970" pos:column="38">index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return pos:line="1971" pos:column="17">return <expr><name pos:line="1971" pos:column="24">val</name> <op:operator pos:line="1971" pos:column="28">is</op:operator> <name pos:line="1971" pos:column="31">DBNull</name> <op:operator pos:line="1971" pos:column="38">?</op:operator> <name pos:line="1971" pos:column="40">null</name> <op:operator pos:line="1971" pos:column="45">:</op:operator> <name pos:line="1971" pos:column="47">val</name></expr>;</return>
            }</block></lambda></expr>;</return>
        }</block></function>

        <decl_stmt><decl><type><specifier pos:line="1975" pos:column="9">static</specifier> <specifier pos:line="1975" pos:column="16">readonly</specifier> <name pos:line="1975" pos:column="25">MethodInfo</name></type>
                    <name pos:line="1976" pos:column="21">enumParse</name> <init pos:line="1976" pos:column="31">= <expr><call><name pos:line="1976" pos:column="33">typeof</name><argument_list pos:line="1976" pos:column="39">(<argument><expr><name pos:line="1976" pos:column="40">Enum</name></expr></argument>)</argument_list></call><op:operator pos:line="1976" pos:column="45">.</op:operator><call><name pos:line="1976" pos:column="46">GetMethod</name><argument_list pos:line="1976" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="1976" pos:column="56">"Parse"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="1976" pos:column="65">new</op:operator> <name><name pos:line="1976" pos:column="69">Type</name><index pos:line="1976" pos:column="73">[]</index></name> <block pos:line="1976" pos:column="76">{ <expr><call><name pos:line="1976" pos:column="78">typeof</name><argument_list pos:line="1976" pos:column="84">(<argument><expr><name pos:line="1976" pos:column="85">Type</name></expr></argument>)</argument_list></call></expr>, <expr><call><name pos:line="1976" pos:column="92">typeof</name><argument_list pos:line="1976" pos:column="98">(<argument><expr><name pos:line="1976" pos:column="99">string</name></expr></argument>)</argument_list></call></expr>, <expr><call><name pos:line="1976" pos:column="108">typeof</name><argument_list pos:line="1976" pos:column="114">(<argument><expr><name pos:line="1976" pos:column="115">bool</name></expr></argument>)</argument_list></call></expr> }</block></expr></argument>)</argument_list></call></expr></init><op:operator pos:line="1976" pos:column="123">,</op:operator>
                    <name pos:line="1977" pos:column="21">getItem</name> <init pos:line="1977" pos:column="29">= <expr><call><name pos:line="1977" pos:column="31">typeof</name><argument_list pos:line="1977" pos:column="37">(<argument><expr><name pos:line="1977" pos:column="38">IDataRecord</name></expr></argument>)</argument_list></call><op:operator pos:line="1977" pos:column="50">.</op:operator><call><name pos:line="1977" pos:column="51">GetProperties</name><argument_list pos:line="1977" pos:column="64">(<argument><expr><name><name pos:line="1977" pos:column="65">BindingFlags</name><op:operator pos:line="1977" pos:column="77">.</op:operator><name pos:line="1977" pos:column="78">Instance</name></name> <op:operator pos:line="1977" pos:column="87">|</op:operator> <name><name pos:line="1977" pos:column="89">BindingFlags</name><op:operator pos:line="1977" pos:column="101">.</op:operator><name pos:line="1977" pos:column="102">Public</name></name></expr></argument>)</argument_list></call>
                        <op:operator pos:line="1978" pos:column="25">.</op:operator><call><name pos:line="1978" pos:column="26">Where</name><argument_list pos:line="1978" pos:column="31">(<argument><expr><lambda><name pos:line="1978" pos:column="32">p</name> <op:operator pos:line="1978" pos:column="34">=&gt;</op:operator> <call><name><name pos:line="1978" pos:column="37">p</name><op:operator pos:line="1978" pos:column="38">.</op:operator><name pos:line="1978" pos:column="39">GetIndexParameters</name></name><argument_list pos:line="1978" pos:column="57">()</argument_list></call><op:operator pos:line="1978" pos:column="59">.</op:operator><call><name pos:line="1978" pos:column="60">Any</name><argument_list pos:line="1978" pos:column="63">()</argument_list></call> <op:operator pos:line="1978" pos:column="66">&amp;&amp;</op:operator> <call><name><name pos:line="1978" pos:column="69">p</name><op:operator pos:line="1978" pos:column="70">.</op:operator><name pos:line="1978" pos:column="71">GetIndexParameters</name></name><argument_list pos:line="1978" pos:column="89">()</argument_list></call><index pos:line="1978" pos:column="91">[<expr><lit:literal type="number" pos:line="1978" pos:column="92">0</lit:literal></expr>]</index><op:operator pos:line="1978" pos:column="94">.</op:operator><name pos:line="1978" pos:column="95">ParameterType</name> <op:operator pos:line="1978" pos:column="109">==</op:operator> <call><name pos:line="1978" pos:column="112">typeof</name><argument_list pos:line="1978" pos:column="118">(<argument><expr><name pos:line="1978" pos:column="119">int</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call>
                        <op:operator pos:line="1979" pos:column="25">.</op:operator><call><name pos:line="1979" pos:column="26">Select</name><argument_list pos:line="1979" pos:column="32">(<argument><expr><lambda><name pos:line="1979" pos:column="33">p</name> <op:operator pos:line="1979" pos:column="35">=&gt;</op:operator> <call><name><name pos:line="1979" pos:column="38">p</name><op:operator pos:line="1979" pos:column="39">.</op:operator><name pos:line="1979" pos:column="40">GetGetMethod</name></name><argument_list pos:line="1979" pos:column="52">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="1979" pos:column="55">.</op:operator><call><name pos:line="1979" pos:column="56">First</name><argument_list pos:line="1979" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="1981" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="1982" pos:column="9">/// Gets type-map for the given type</comment>
        <comment type="line" pos:line="1983" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="1984" pos:column="9">/// &lt;returns&gt;Type map implementation, DefaultTypeMap instance if no override present&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="1985" pos:column="9">public</specifier> <specifier pos:line="1985" pos:column="16">static</specifier> <name pos:line="1985" pos:column="23">ITypeMap</name></type> <name pos:line="1985" pos:column="32">GetTypeMap</name><parameter_list pos:line="1985" pos:column="42">(<param><decl><type><name pos:line="1985" pos:column="43">Type</name></type> <name pos:line="1985" pos:column="48">type</name></decl></param>)</parameter_list>
        <block pos:line="1986" pos:column="9">{
            <if pos:line="1987" pos:column="13">if <condition pos:line="1987" pos:column="16">(<expr><name pos:line="1987" pos:column="17">type</name> <op:operator pos:line="1987" pos:column="22">==</op:operator> <name pos:line="1987" pos:column="25">null</name></expr>)</condition><then pos:line="1987" pos:column="30"> <throw pos:line="1987" pos:column="31">throw <expr><op:operator pos:line="1987" pos:column="37">new</op:operator> <call><name pos:line="1987" pos:column="41">ArgumentNullException</name><argument_list pos:line="1987" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="1987" pos:column="63">"type"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <decl_stmt><decl><type><name pos:line="1988" pos:column="13">var</name></type> <name pos:line="1988" pos:column="17">map</name> <init pos:line="1988" pos:column="21">= <expr><op:operator pos:line="1988" pos:column="23">(</op:operator><name pos:line="1988" pos:column="24">ITypeMap</name><op:operator pos:line="1988" pos:column="32">)</op:operator><name><name pos:line="1988" pos:column="33">_typeMaps</name><index pos:line="1988" pos:column="42">[<expr><name pos:line="1988" pos:column="43">type</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if pos:line="1989" pos:column="13">if <condition pos:line="1989" pos:column="16">(<expr><name pos:line="1989" pos:column="17">map</name> <op:operator pos:line="1989" pos:column="21">==</op:operator> <name pos:line="1989" pos:column="24">null</name></expr>)</condition><then pos:line="1989" pos:column="29">
            <block pos:line="1990" pos:column="13">{
                <lock pos:line="1991" pos:column="17">lock (<expr><name pos:line="1991" pos:column="23">_typeMaps</name></expr>)
                <block pos:line="1992" pos:column="17">{   <comment type="line" pos:line="1992" pos:column="21">// double-checked; store this to avoid reflection next time we see this type</comment>
                    <comment type="line" pos:line="1993" pos:column="21">// since multiple queries commonly use the same domain-entity/DTO/view-model type</comment>
                    <expr_stmt><expr><name pos:line="1994" pos:column="21">map</name> <op:operator pos:line="1994" pos:column="25">=</op:operator> <op:operator pos:line="1994" pos:column="27">(</op:operator><name pos:line="1994" pos:column="28">ITypeMap</name><op:operator pos:line="1994" pos:column="36">)</op:operator><name><name pos:line="1994" pos:column="37">_typeMaps</name><index pos:line="1994" pos:column="46">[<expr><name pos:line="1994" pos:column="47">type</name></expr>]</index></name></expr>;</expr_stmt>
                    <if pos:line="1995" pos:column="21">if <condition pos:line="1995" pos:column="24">(<expr><name pos:line="1995" pos:column="25">map</name> <op:operator pos:line="1995" pos:column="29">==</op:operator> <name pos:line="1995" pos:column="32">null</name></expr>)</condition><then pos:line="1995" pos:column="37">
                    <block pos:line="1996" pos:column="21">{
                        <expr_stmt><expr><name pos:line="1997" pos:column="25">map</name> <op:operator pos:line="1997" pos:column="29">=</op:operator> <op:operator pos:line="1997" pos:column="31">new</op:operator> <call><name pos:line="1997" pos:column="35">DefaultTypeMap</name><argument_list pos:line="1997" pos:column="49">(<argument><expr><name pos:line="1997" pos:column="50">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name pos:line="1998" pos:column="25">_typeMaps</name><index pos:line="1998" pos:column="34">[<expr><name pos:line="1998" pos:column="35">type</name></expr>]</index></name> <op:operator pos:line="1998" pos:column="41">=</op:operator> <name pos:line="1998" pos:column="43">map</name></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></lock>
            }</block></then></if>
            <return pos:line="2002" pos:column="13">return <expr><name pos:line="2002" pos:column="20">map</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="2005" pos:column="9">// use Hashtable to get free lockless reading</comment>
        <decl_stmt><decl><type><specifier pos:line="2006" pos:column="9">private</specifier> <specifier pos:line="2006" pos:column="17">static</specifier> <specifier pos:line="2006" pos:column="24">readonly</specifier> <name pos:line="2006" pos:column="33">Hashtable</name></type> <name pos:line="2006" pos:column="43">_typeMaps</name> <init pos:line="2006" pos:column="53">= <expr><op:operator pos:line="2006" pos:column="55">new</op:operator> <call><name pos:line="2006" pos:column="59">Hashtable</name><argument_list pos:line="2006" pos:column="68">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="2008" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="2009" pos:column="9">/// Set custom mapping for type deserializers</comment>
        <comment type="line" pos:line="2010" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="2011" pos:column="9">/// &lt;param name="type"&gt;Entity type to override&lt;/param&gt;</comment>
        <comment type="line" pos:line="2012" pos:column="9">/// &lt;param name="map"&gt;Mapping rules impementation, null to remove custom map&lt;/param&gt;</comment>
        <function><type><specifier pos:line="2013" pos:column="9">public</specifier> <specifier pos:line="2013" pos:column="16">static</specifier> <name pos:line="2013" pos:column="23">void</name></type> <name pos:line="2013" pos:column="28">SetTypeMap</name><parameter_list pos:line="2013" pos:column="38">(<param><decl><type><name pos:line="2013" pos:column="39">Type</name></type> <name pos:line="2013" pos:column="44">type</name></decl></param>, <param><decl><type><name pos:line="2013" pos:column="50">ITypeMap</name></type> <name pos:line="2013" pos:column="59">map</name></decl></param>)</parameter_list>
        <block pos:line="2014" pos:column="9">{
            <if pos:line="2015" pos:column="13">if <condition pos:line="2015" pos:column="16">(<expr><name pos:line="2015" pos:column="17">type</name> <op:operator pos:line="2015" pos:column="22">==</op:operator> <name pos:line="2015" pos:column="25">null</name></expr>)</condition><then pos:line="2015" pos:column="30">
                <throw pos:line="2016" pos:column="17">throw <expr><op:operator pos:line="2016" pos:column="23">new</op:operator> <call><name pos:line="2016" pos:column="27">ArgumentNullException</name><argument_list pos:line="2016" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="2016" pos:column="49">"type"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <if pos:line="2018" pos:column="13">if <condition pos:line="2018" pos:column="16">(<expr><name pos:line="2018" pos:column="17">map</name> <op:operator pos:line="2018" pos:column="21">==</op:operator> <name pos:line="2018" pos:column="24">null</name> <op:operator pos:line="2018" pos:column="29">||</op:operator> <name pos:line="2018" pos:column="32">map</name> <op:operator pos:line="2018" pos:column="36">is</op:operator> <name pos:line="2018" pos:column="39">DefaultTypeMap</name></expr>)</condition><then pos:line="2018" pos:column="54">
            <block pos:line="2019" pos:column="13">{
                <lock pos:line="2020" pos:column="17">lock (<expr><name pos:line="2020" pos:column="23">_typeMaps</name></expr>)
                <block pos:line="2021" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="2022" pos:column="21">_typeMaps</name><op:operator pos:line="2022" pos:column="30">.</op:operator><name pos:line="2022" pos:column="31">Remove</name></name><argument_list pos:line="2022" pos:column="37">(<argument><expr><name pos:line="2022" pos:column="38">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></lock>
            }</block></then>
            <else pos:line="2025" pos:column="13">else
            <block pos:line="2026" pos:column="13">{
                <lock pos:line="2027" pos:column="17">lock (<expr><name pos:line="2027" pos:column="23">_typeMaps</name></expr>)
                <block pos:line="2028" pos:column="17">{
                    <expr_stmt><expr><name><name pos:line="2029" pos:column="21">_typeMaps</name><index pos:line="2029" pos:column="30">[<expr><name pos:line="2029" pos:column="31">type</name></expr>]</index></name> <op:operator pos:line="2029" pos:column="37">=</op:operator> <name pos:line="2029" pos:column="39">map</name></expr>;</expr_stmt>
                }</block></lock>
            }</block></else></if>

            <expr_stmt><expr><call><name pos:line="2033" pos:column="13">PurgeQueryCacheByType</name><argument_list pos:line="2033" pos:column="34">(<argument><expr><name pos:line="2033" pos:column="35">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="2036" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="2037" pos:column="9">/// Internal use only</comment>
        <comment type="line" pos:line="2038" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="2039" pos:column="9">/// &lt;param name="type"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="2040" pos:column="9">/// &lt;param name="reader"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="2041" pos:column="9">/// &lt;param name="startBound"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="2042" pos:column="9">/// &lt;param name="length"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="2043" pos:column="9">/// &lt;param name="returnNullIfFirstMissing"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="2044" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="2045" pos:column="9">public</specifier> <specifier pos:line="2045" pos:column="16">static</specifier> <name><name pos:line="2045" pos:column="23">Func</name><argument_list pos:line="2045" pos:column="27">&lt;<argument><name pos:line="2045" pos:column="28">IDataReader</name></argument>, <argument><name pos:line="2045" pos:column="41">object</name></argument>&gt;</argument_list></name></type> <name pos:line="2045" pos:column="49">GetTypeDeserializer</name><parameter_list pos:line="2045" pos:column="68">(
<cpp:if pos:line="2046" pos:column="1">#<cpp:directive pos:line="2046" pos:column="2">if</cpp:directive> <expr><name pos:line="2046" pos:column="5">CSHARP30</name></expr></cpp:if>
            <param><decl><type><name pos:line="2047" pos:column="13">Type</name></type> <name pos:line="2047" pos:column="18">type</name></decl></param>, <param><decl><type><name pos:line="2047" pos:column="24">IDataReader</name></type> <name pos:line="2047" pos:column="36">reader</name></decl></param>, <param><decl><type><name pos:line="2047" pos:column="44">int</name></type> <name pos:line="2047" pos:column="48">startBound</name></decl></param>, <param><decl><type><name pos:line="2047" pos:column="60">int</name></type> <name pos:line="2047" pos:column="64">length</name></decl></param>, <param><decl><type><name pos:line="2047" pos:column="72">bool</name></type> <name pos:line="2047" pos:column="77">returnNullIfFirstMissing</name>
<cpp:else pos:line="2048" pos:column="1">#<cpp:directive pos:line="2048" pos:column="2">else</cpp:directive></cpp:else>
<name pos:line="2049" pos:column="1">Type</name> <name pos:line="2049" pos:column="6">type</name></decl></param>, <param><decl><type><name pos:line="2049" pos:column="12">IDataReader</name></type> <name pos:line="2049" pos:column="24">reader</name></decl></param>, <param><decl><type><name pos:line="2049" pos:column="32">int</name></type> <name pos:line="2049" pos:column="36">startBound</name> <init pos:line="2049" pos:column="47">= <expr><lit:literal type="number" pos:line="2049" pos:column="49">0</lit:literal></expr></init></decl></param>, <name pos:line="2049" pos:column="52">int</name> <name pos:line="2049" pos:column="56">length</name> <op:operator pos:line="2049" pos:column="63">=</op:operator> <op:operator pos:line="2049" pos:column="65">-</op:operator><lit:literal type="number" pos:line="2049" pos:column="66">1</lit:literal>, <name pos:line="2049" pos:column="69">bool</name> <name pos:line="2049" pos:column="74">returnNullIfFirstMissing</name> <op:operator pos:line="2049" pos:column="99">=</op:operator> <lit:literal type="boolean" pos:line="2049" pos:column="101">false</lit:literal>
<cpp:endif pos:line="2050" pos:column="1">#<cpp:directive pos:line="2050" pos:column="2">endif</cpp:directive></cpp:endif>
)</parameter_list>
        <block pos:line="2052" pos:column="9">{

            <decl_stmt><decl><type><name pos:line="2054" pos:column="13">var</name></type> <name pos:line="2054" pos:column="17">dm</name> <init pos:line="2054" pos:column="20">= <expr><op:operator pos:line="2054" pos:column="22">new</op:operator> <call><name pos:line="2054" pos:column="26">DynamicMethod</name><argument_list pos:line="2054" pos:column="39">(<argument><expr><call><name><name pos:line="2054" pos:column="40">string</name><op:operator pos:line="2054" pos:column="46">.</op:operator><name pos:line="2054" pos:column="47">Format</name></name><argument_list pos:line="2054" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="2054" pos:column="54">"Deserialize{0}"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="2054" pos:column="72">Guid</name><op:operator pos:line="2054" pos:column="76">.</op:operator><name pos:line="2054" pos:column="77">NewGuid</name></name><argument_list pos:line="2054" pos:column="84">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="2054" pos:column="89">typeof</name><argument_list pos:line="2054" pos:column="95">(<argument><expr><name pos:line="2054" pos:column="96">object</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="2054" pos:column="105">new</op:operator><index pos:line="2054" pos:column="108">[]</index> <block pos:line="2054" pos:column="111">{ <expr><call><name pos:line="2054" pos:column="113">typeof</name><argument_list pos:line="2054" pos:column="119">(<argument><expr><name pos:line="2054" pos:column="120">IDataReader</name></expr></argument>)</argument_list></call></expr> }</block></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="2054" pos:column="136">true</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="2055" pos:column="13">var</name></type> <name pos:line="2055" pos:column="17">il</name> <init pos:line="2055" pos:column="20">= <expr><call><name><name pos:line="2055" pos:column="22">dm</name><op:operator pos:line="2055" pos:column="24">.</op:operator><name pos:line="2055" pos:column="25">GetILGenerator</name></name><argument_list pos:line="2055" pos:column="39">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="2056" pos:column="13">il</name><op:operator pos:line="2056" pos:column="15">.</op:operator><name pos:line="2056" pos:column="16">DeclareLocal</name></name><argument_list pos:line="2056" pos:column="28">(<argument><expr><call><name pos:line="2056" pos:column="29">typeof</name><argument_list pos:line="2056" pos:column="35">(<argument><expr><name pos:line="2056" pos:column="36">int</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="2057" pos:column="13">il</name><op:operator pos:line="2057" pos:column="15">.</op:operator><name pos:line="2057" pos:column="16">DeclareLocal</name></name><argument_list pos:line="2057" pos:column="28">(<argument><expr><name pos:line="2057" pos:column="29">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="2058" pos:column="13">il</name><op:operator pos:line="2058" pos:column="15">.</op:operator><name pos:line="2058" pos:column="16">Emit</name></name><argument_list pos:line="2058" pos:column="20">(<argument><expr><name><name pos:line="2058" pos:column="21">OpCodes</name><op:operator pos:line="2058" pos:column="28">.</op:operator><name pos:line="2058" pos:column="29">Ldc_I4_0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="2059" pos:column="13">il</name><op:operator pos:line="2059" pos:column="15">.</op:operator><name pos:line="2059" pos:column="16">Emit</name></name><argument_list pos:line="2059" pos:column="20">(<argument><expr><name><name pos:line="2059" pos:column="21">OpCodes</name><op:operator pos:line="2059" pos:column="28">.</op:operator><name pos:line="2059" pos:column="29">Stloc_0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if pos:line="2061" pos:column="13">if <condition pos:line="2061" pos:column="16">(<expr><name pos:line="2061" pos:column="17">length</name> <op:operator pos:line="2061" pos:column="24">==</op:operator> <op:operator pos:line="2061" pos:column="27">-</op:operator><lit:literal type="number" pos:line="2061" pos:column="28">1</lit:literal></expr>)</condition><then pos:line="2061" pos:column="30">
            <block pos:line="2062" pos:column="13">{
                <expr_stmt><expr><name pos:line="2063" pos:column="17">length</name> <op:operator pos:line="2063" pos:column="24">=</op:operator> <name><name pos:line="2063" pos:column="26">reader</name><op:operator pos:line="2063" pos:column="32">.</op:operator><name pos:line="2063" pos:column="33">FieldCount</name></name> <op:operator pos:line="2063" pos:column="44">-</op:operator> <name pos:line="2063" pos:column="46">startBound</name></expr>;</expr_stmt>
            }</block></then></if>

            <if pos:line="2066" pos:column="13">if <condition pos:line="2066" pos:column="16">(<expr><name><name pos:line="2066" pos:column="17">reader</name><op:operator pos:line="2066" pos:column="23">.</op:operator><name pos:line="2066" pos:column="24">FieldCount</name></name> <op:operator pos:line="2066" pos:column="35">&lt;=</op:operator> <name pos:line="2066" pos:column="38">startBound</name></expr>)</condition><then pos:line="2066" pos:column="49">
            <block pos:line="2067" pos:column="13">{
                <throw pos:line="2068" pos:column="17">throw <expr><op:operator pos:line="2068" pos:column="23">new</op:operator> <call><name pos:line="2068" pos:column="27">ArgumentException</name><argument_list pos:line="2068" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="2068" pos:column="45">"When using the multi-mapping APIs ensure you set the splitOn param if you have keys other than Id"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="2068" pos:column="146">"splitOn"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="2071" pos:column="13">var</name></type> <name pos:line="2071" pos:column="17">names</name> <init pos:line="2071" pos:column="23">= <expr><call><name><name pos:line="2071" pos:column="25">Enumerable</name><op:operator pos:line="2071" pos:column="35">.</op:operator><name pos:line="2071" pos:column="36">Range</name></name><argument_list pos:line="2071" pos:column="41">(<argument><expr><name pos:line="2071" pos:column="42">startBound</name></expr></argument>, <argument><expr><name pos:line="2071" pos:column="54">length</name></expr></argument>)</argument_list></call><op:operator pos:line="2071" pos:column="61">.</op:operator><call><name pos:line="2071" pos:column="62">Select</name><argument_list pos:line="2071" pos:column="68">(<argument><expr><lambda><name pos:line="2071" pos:column="69">i</name> <op:operator pos:line="2071" pos:column="71">=&gt;</op:operator> <call><name><name pos:line="2071" pos:column="74">reader</name><op:operator pos:line="2071" pos:column="80">.</op:operator><name pos:line="2071" pos:column="81">GetName</name></name><argument_list pos:line="2071" pos:column="88">(<argument><expr><name pos:line="2071" pos:column="89">i</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="2071" pos:column="92">.</op:operator><call><name pos:line="2071" pos:column="93">ToArray</name><argument_list pos:line="2071" pos:column="100">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="2073" pos:column="13">ITypeMap</name></type> <name pos:line="2073" pos:column="22">typeMap</name> <init pos:line="2073" pos:column="30">= <expr><call><name pos:line="2073" pos:column="32">GetTypeMap</name><argument_list pos:line="2073" pos:column="42">(<argument><expr><name pos:line="2073" pos:column="43">type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="2075" pos:column="13">int</name></type> <name pos:line="2075" pos:column="17">index</name> <init pos:line="2075" pos:column="23">= <expr><name pos:line="2075" pos:column="25">startBound</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="2077" pos:column="13">ConstructorInfo</name></type> <name pos:line="2077" pos:column="29">specializedConstructor</name> <init pos:line="2077" pos:column="52">= <expr><name pos:line="2077" pos:column="54">null</name></expr></init></decl>;</decl_stmt>

            <if pos:line="2079" pos:column="13">if <condition pos:line="2079" pos:column="16">(<expr><name><name pos:line="2079" pos:column="17">type</name><op:operator pos:line="2079" pos:column="21">.</op:operator><name pos:line="2079" pos:column="22">IsValueType</name></name></expr>)</condition><then pos:line="2079" pos:column="34">
            <block pos:line="2080" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="2081" pos:column="17">il</name><op:operator pos:line="2081" pos:column="19">.</op:operator><name pos:line="2081" pos:column="20">Emit</name></name><argument_list pos:line="2081" pos:column="24">(<argument><expr><name><name pos:line="2081" pos:column="25">OpCodes</name><op:operator pos:line="2081" pos:column="32">.</op:operator><name pos:line="2081" pos:column="33">Ldloca_S</name></name></expr></argument>, <argument><expr><op:operator pos:line="2081" pos:column="43">(</op:operator><name pos:line="2081" pos:column="44">byte</name><op:operator pos:line="2081" pos:column="48">)</op:operator><lit:literal type="number" pos:line="2081" pos:column="49">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="2082" pos:column="17">il</name><op:operator pos:line="2082" pos:column="19">.</op:operator><name pos:line="2082" pos:column="20">Emit</name></name><argument_list pos:line="2082" pos:column="24">(<argument><expr><name><name pos:line="2082" pos:column="25">OpCodes</name><op:operator pos:line="2082" pos:column="32">.</op:operator><name pos:line="2082" pos:column="33">Initobj</name></name></expr></argument>, <argument><expr><name pos:line="2082" pos:column="42">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else pos:line="2084" pos:column="13">else
            <block pos:line="2085" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="2086" pos:column="17">var</name></type> <name pos:line="2086" pos:column="21">types</name> <init pos:line="2086" pos:column="27">= <expr><op:operator pos:line="2086" pos:column="29">new</op:operator> <name><name pos:line="2086" pos:column="33">Type</name><index pos:line="2086" pos:column="37">[<expr><name pos:line="2086" pos:column="38">length</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <for pos:line="2087" pos:column="17">for (<init><decl><type><name pos:line="2087" pos:column="22">int</name></type> <name pos:line="2087" pos:column="26">i</name> <init pos:line="2087" pos:column="28">= <expr><name pos:line="2087" pos:column="30">startBound</name></expr></init></decl>;</init> <condition><expr><name pos:line="2087" pos:column="42">i</name> <op:operator pos:line="2087" pos:column="44">&lt;</op:operator> <name pos:line="2087" pos:column="46">startBound</name> <op:operator pos:line="2087" pos:column="57">+</op:operator> <name pos:line="2087" pos:column="59">length</name></expr>;</condition> <incr><expr><name pos:line="2087" pos:column="67">i</name><op:operator pos:line="2087" pos:column="68">++</op:operator></expr></incr>)
                <block pos:line="2088" pos:column="17">{
                    <expr_stmt><expr><name><name pos:line="2089" pos:column="21">types</name><index pos:line="2089" pos:column="26">[<expr><name pos:line="2089" pos:column="27">i</name> <op:operator pos:line="2089" pos:column="29">-</op:operator> <name pos:line="2089" pos:column="31">startBound</name></expr>]</index></name> <op:operator pos:line="2089" pos:column="43">=</op:operator> <call><name><name pos:line="2089" pos:column="45">reader</name><op:operator pos:line="2089" pos:column="51">.</op:operator><name pos:line="2089" pos:column="52">GetFieldType</name></name><argument_list pos:line="2089" pos:column="64">(<argument><expr><name pos:line="2089" pos:column="65">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>

                <if pos:line="2092" pos:column="17">if <condition pos:line="2092" pos:column="20">(<expr><name><name pos:line="2092" pos:column="21">type</name><op:operator pos:line="2092" pos:column="25">.</op:operator><name pos:line="2092" pos:column="26">IsValueType</name></name></expr>)</condition><then pos:line="2092" pos:column="38">
                <block pos:line="2093" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="2094" pos:column="21">il</name><op:operator pos:line="2094" pos:column="23">.</op:operator><name pos:line="2094" pos:column="24">Emit</name></name><argument_list pos:line="2094" pos:column="28">(<argument><expr><name><name pos:line="2094" pos:column="29">OpCodes</name><op:operator pos:line="2094" pos:column="36">.</op:operator><name pos:line="2094" pos:column="37">Ldloca_S</name></name></expr></argument>, <argument><expr><op:operator pos:line="2094" pos:column="47">(</op:operator><name pos:line="2094" pos:column="48">byte</name><op:operator pos:line="2094" pos:column="52">)</op:operator><lit:literal type="number" pos:line="2094" pos:column="53">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="2095" pos:column="21">il</name><op:operator pos:line="2095" pos:column="23">.</op:operator><name pos:line="2095" pos:column="24">Emit</name></name><argument_list pos:line="2095" pos:column="28">(<argument><expr><name><name pos:line="2095" pos:column="29">OpCodes</name><op:operator pos:line="2095" pos:column="36">.</op:operator><name pos:line="2095" pos:column="37">Initobj</name></name></expr></argument>, <argument><expr><name pos:line="2095" pos:column="46">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="2097" pos:column="17">else
                <block pos:line="2098" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="2099" pos:column="21">var</name></type> <name pos:line="2099" pos:column="25">ctor</name> <init pos:line="2099" pos:column="30">= <expr><call><name><name pos:line="2099" pos:column="32">typeMap</name><op:operator pos:line="2099" pos:column="39">.</op:operator><name pos:line="2099" pos:column="40">FindConstructor</name></name><argument_list pos:line="2099" pos:column="55">(<argument><expr><name pos:line="2099" pos:column="56">names</name></expr></argument>, <argument><expr><name pos:line="2099" pos:column="63">types</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if pos:line="2100" pos:column="21">if <condition pos:line="2100" pos:column="24">(<expr><name pos:line="2100" pos:column="25">ctor</name> <op:operator pos:line="2100" pos:column="30">==</op:operator> <name pos:line="2100" pos:column="33">null</name></expr>)</condition><then pos:line="2100" pos:column="38">
                    <block pos:line="2101" pos:column="21">{
                        <decl_stmt><decl><type><name pos:line="2102" pos:column="25">string</name></type> <name pos:line="2102" pos:column="32">proposedTypes</name> <init pos:line="2102" pos:column="46">= <expr><lit:literal type="string" pos:line="2102" pos:column="48">"("</lit:literal> <op:operator pos:line="2102" pos:column="52">+</op:operator> <call><name><name pos:line="2102" pos:column="54">String</name><op:operator pos:line="2102" pos:column="60">.</op:operator><name pos:line="2102" pos:column="61">Join</name></name><argument_list pos:line="2102" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="2102" pos:column="66">", "</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="2102" pos:column="72">types</name><op:operator pos:line="2102" pos:column="77">.</op:operator><name pos:line="2102" pos:column="78">Select</name></name><argument_list pos:line="2102" pos:column="84">(<argument><expr><lambda><parameter_list pos:line="2102" pos:column="85">(<param><decl><name pos:line="2102" pos:column="86">t</name></decl></param>, <param><decl><name pos:line="2102" pos:column="89">i</name></decl></param>)</parameter_list> <op:operator pos:line="2102" pos:column="92">=&gt;</op:operator> <name><name pos:line="2102" pos:column="95">t</name><op:operator pos:line="2102" pos:column="96">.</op:operator><name pos:line="2102" pos:column="97">FullName</name></name> <op:operator pos:line="2102" pos:column="106">+</op:operator> <lit:literal type="string" pos:line="2102" pos:column="108">" "</lit:literal> <op:operator pos:line="2102" pos:column="112">+</op:operator> <name><name pos:line="2102" pos:column="114">names</name><index pos:line="2102" pos:column="119">[<expr><name pos:line="2102" pos:column="120">i</name></expr>]</index></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="2102" pos:column="123">.</op:operator><call><name pos:line="2102" pos:column="124">ToArray</name><argument_list pos:line="2102" pos:column="131">()</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="2102" pos:column="135">+</op:operator> <lit:literal type="string" pos:line="2102" pos:column="137">")"</lit:literal></expr></init></decl>;</decl_stmt>
                        <throw pos:line="2103" pos:column="25">throw <expr><op:operator pos:line="2103" pos:column="31">new</op:operator> <call><name pos:line="2103" pos:column="35">InvalidOperationException</name><argument_list pos:line="2103" pos:column="60">(<argument><expr><call><name><name pos:line="2103" pos:column="61">String</name><op:operator pos:line="2103" pos:column="67">.</op:operator><name pos:line="2103" pos:column="68">Format</name></name><argument_list pos:line="2103" pos:column="74">(<argument><expr><lit:literal type="string" pos:line="2103" pos:column="75">"A parameterless default constructor or one matching signature {0} is required for {1} materialization"</lit:literal></expr></argument>, <argument><expr><name pos:line="2103" pos:column="180">proposedTypes</name></expr></argument>, <argument><expr><name><name pos:line="2103" pos:column="195">type</name><op:operator pos:line="2103" pos:column="199">.</op:operator><name pos:line="2103" pos:column="200">FullName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                    }</block></then></if>

                    <if pos:line="2106" pos:column="21">if <condition pos:line="2106" pos:column="24">(<expr><call><name><name pos:line="2106" pos:column="25">ctor</name><op:operator pos:line="2106" pos:column="29">.</op:operator><name pos:line="2106" pos:column="30">GetParameters</name></name><argument_list pos:line="2106" pos:column="43">()</argument_list></call><op:operator pos:line="2106" pos:column="45">.</op:operator><name pos:line="2106" pos:column="46">Length</name> <op:operator pos:line="2106" pos:column="53">==</op:operator> <lit:literal type="number" pos:line="2106" pos:column="56">0</lit:literal></expr>)</condition><then pos:line="2106" pos:column="58">
                    <block pos:line="2107" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="2108" pos:column="25">il</name><op:operator pos:line="2108" pos:column="27">.</op:operator><name pos:line="2108" pos:column="28">Emit</name></name><argument_list pos:line="2108" pos:column="32">(<argument><expr><name><name pos:line="2108" pos:column="33">OpCodes</name><op:operator pos:line="2108" pos:column="40">.</op:operator><name pos:line="2108" pos:column="41">Newobj</name></name></expr></argument>, <argument><expr><name pos:line="2108" pos:column="49">ctor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="2109" pos:column="25">il</name><op:operator pos:line="2109" pos:column="27">.</op:operator><name pos:line="2109" pos:column="28">Emit</name></name><argument_list pos:line="2109" pos:column="32">(<argument><expr><name><name pos:line="2109" pos:column="33">OpCodes</name><op:operator pos:line="2109" pos:column="40">.</op:operator><name pos:line="2109" pos:column="41">Stloc_1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else pos:line="2111" pos:column="21">else
                        <expr_stmt><expr><name pos:line="2112" pos:column="25">specializedConstructor</name> <op:operator pos:line="2112" pos:column="48">=</op:operator> <name pos:line="2112" pos:column="50">ctor</name></expr>;</expr_stmt></else></if>
                }</block></else></if>
            }</block></else></if>

            <expr_stmt><expr><call><name><name pos:line="2116" pos:column="13">il</name><op:operator pos:line="2116" pos:column="15">.</op:operator><name pos:line="2116" pos:column="16">BeginExceptionBlock</name></name><argument_list pos:line="2116" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
            <if pos:line="2117" pos:column="13">if <condition pos:line="2117" pos:column="16">(<expr><name><name pos:line="2117" pos:column="17">type</name><op:operator pos:line="2117" pos:column="21">.</op:operator><name pos:line="2117" pos:column="22">IsValueType</name></name></expr>)</condition><then pos:line="2117" pos:column="34">
            <block pos:line="2118" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="2119" pos:column="17">il</name><op:operator pos:line="2119" pos:column="19">.</op:operator><name pos:line="2119" pos:column="20">Emit</name></name><argument_list pos:line="2119" pos:column="24">(<argument><expr><name><name pos:line="2119" pos:column="25">OpCodes</name><op:operator pos:line="2119" pos:column="32">.</op:operator><name pos:line="2119" pos:column="33">Ldloca_S</name></name></expr></argument>, <argument><expr><op:operator pos:line="2119" pos:column="43">(</op:operator><name pos:line="2119" pos:column="44">byte</name><op:operator pos:line="2119" pos:column="48">)</op:operator><lit:literal type="number" pos:line="2119" pos:column="49">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="2119" pos:column="52">// [target]</comment>
            }</block></then>
            <else pos:line="2121" pos:column="13">else <if pos:line="2121" pos:column="18">if <condition pos:line="2121" pos:column="21">(<expr><name pos:line="2121" pos:column="22">specializedConstructor</name> <op:operator pos:line="2121" pos:column="45">==</op:operator> <name pos:line="2121" pos:column="48">null</name></expr>)</condition><then pos:line="2121" pos:column="53">
            <block pos:line="2122" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="2123" pos:column="17">il</name><op:operator pos:line="2123" pos:column="19">.</op:operator><name pos:line="2123" pos:column="20">Emit</name></name><argument_list pos:line="2123" pos:column="24">(<argument><expr><name><name pos:line="2123" pos:column="25">OpCodes</name><op:operator pos:line="2123" pos:column="32">.</op:operator><name pos:line="2123" pos:column="33">Ldloc_1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="2123" pos:column="42">// [target]</comment>
            }</block></then></if></else></if>

            <decl_stmt><decl><type><name pos:line="2126" pos:column="13">var</name></type> <name pos:line="2126" pos:column="17">members</name> <init pos:line="2126" pos:column="25">= <expr><op:operator pos:line="2126" pos:column="27">(</op:operator><name pos:line="2126" pos:column="28">specializedConstructor</name> <op:operator pos:line="2126" pos:column="51">!=</op:operator> <name pos:line="2126" pos:column="54">null</name>
                <op:operator pos:line="2127" pos:column="17">?</op:operator> <call><name><name pos:line="2127" pos:column="19">names</name><op:operator pos:line="2127" pos:column="24">.</op:operator><name pos:line="2127" pos:column="25">Select</name></name><argument_list pos:line="2127" pos:column="31">(<argument><expr><lambda><name pos:line="2127" pos:column="32">n</name> <op:operator pos:line="2127" pos:column="34">=&gt;</op:operator> <call><name><name pos:line="2127" pos:column="37">typeMap</name><op:operator pos:line="2127" pos:column="44">.</op:operator><name pos:line="2127" pos:column="45">GetConstructorParameter</name></name><argument_list pos:line="2127" pos:column="68">(<argument><expr><name pos:line="2127" pos:column="69">specializedConstructor</name></expr></argument>, <argument><expr><name pos:line="2127" pos:column="93">n</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call>
                <op:operator pos:line="2128" pos:column="17">:</op:operator> <call><name><name pos:line="2128" pos:column="19">names</name><op:operator pos:line="2128" pos:column="24">.</op:operator><name pos:line="2128" pos:column="25">Select</name></name><argument_list pos:line="2128" pos:column="31">(<argument><expr><lambda><name pos:line="2128" pos:column="32">n</name> <op:operator pos:line="2128" pos:column="34">=&gt;</op:operator> <call><name><name pos:line="2128" pos:column="37">typeMap</name><op:operator pos:line="2128" pos:column="44">.</op:operator><name pos:line="2128" pos:column="45">GetMember</name></name><argument_list pos:line="2128" pos:column="54">(<argument><expr><name pos:line="2128" pos:column="55">n</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="2128" pos:column="58">)</op:operator><op:operator pos:line="2128" pos:column="59">.</op:operator><call><name pos:line="2128" pos:column="60">ToList</name><argument_list pos:line="2128" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="2130" pos:column="13">// stack is now [target]</comment>

            <decl_stmt><decl><type><name pos:line="2132" pos:column="13">bool</name></type> <name pos:line="2132" pos:column="18">first</name> <init pos:line="2132" pos:column="24">= <expr><lit:literal type="boolean" pos:line="2132" pos:column="26">true</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="2133" pos:column="13">var</name></type> <name pos:line="2133" pos:column="17">allDone</name> <init pos:line="2133" pos:column="25">= <expr><call><name><name pos:line="2133" pos:column="27">il</name><op:operator pos:line="2133" pos:column="29">.</op:operator><name pos:line="2133" pos:column="30">DefineLabel</name></name><argument_list pos:line="2133" pos:column="41">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="2134" pos:column="13">int</name></type> <name pos:line="2134" pos:column="17">enumDeclareLocal</name> <init pos:line="2134" pos:column="34">= <expr><op:operator pos:line="2134" pos:column="36">-</op:operator><lit:literal type="number" pos:line="2134" pos:column="37">1</lit:literal></expr></init></decl>;</decl_stmt>
            <foreach pos:line="2135" pos:column="13">foreach (<init><decl><type><name pos:line="2135" pos:column="22">var</name></type> <name pos:line="2135" pos:column="26">item</name> <range pos:line="2135" pos:column="31">in <expr><name pos:line="2135" pos:column="34">members</name></expr></range></decl></init>)
            <block pos:line="2136" pos:column="13">{
                <if pos:line="2137" pos:column="17">if <condition pos:line="2137" pos:column="20">(<expr><name pos:line="2137" pos:column="21">item</name> <op:operator pos:line="2137" pos:column="26">!=</op:operator> <name pos:line="2137" pos:column="29">null</name></expr>)</condition><then pos:line="2137" pos:column="34">
                <block pos:line="2138" pos:column="17">{
                    <if pos:line="2139" pos:column="21">if <condition pos:line="2139" pos:column="24">(<expr><name pos:line="2139" pos:column="25">specializedConstructor</name> <op:operator pos:line="2139" pos:column="48">==</op:operator> <name pos:line="2139" pos:column="51">null</name></expr>)</condition><then pos:line="2139" pos:column="56">
                        <expr_stmt><expr><call><name><name pos:line="2140" pos:column="25">il</name><op:operator pos:line="2140" pos:column="27">.</op:operator><name pos:line="2140" pos:column="28">Emit</name></name><argument_list pos:line="2140" pos:column="32">(<argument><expr><name><name pos:line="2140" pos:column="33">OpCodes</name><op:operator pos:line="2140" pos:column="40">.</op:operator><name pos:line="2140" pos:column="41">Dup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if> <comment type="line" pos:line="2140" pos:column="47">// stack is now [target][target]</comment>
                    <decl_stmt><decl><type><name pos:line="2141" pos:column="21">Label</name></type> <name pos:line="2141" pos:column="27">isDbNullLabel</name> <init pos:line="2141" pos:column="41">= <expr><call><name><name pos:line="2141" pos:column="43">il</name><op:operator pos:line="2141" pos:column="45">.</op:operator><name pos:line="2141" pos:column="46">DefineLabel</name></name><argument_list pos:line="2141" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="2142" pos:column="21">Label</name></type> <name pos:line="2142" pos:column="27">finishLabel</name> <init pos:line="2142" pos:column="39">= <expr><call><name><name pos:line="2142" pos:column="41">il</name><op:operator pos:line="2142" pos:column="43">.</op:operator><name pos:line="2142" pos:column="44">DefineLabel</name></name><argument_list pos:line="2142" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><call><name><name pos:line="2144" pos:column="21">il</name><op:operator pos:line="2144" pos:column="23">.</op:operator><name pos:line="2144" pos:column="24">Emit</name></name><argument_list pos:line="2144" pos:column="28">(<argument><expr><name><name pos:line="2144" pos:column="29">OpCodes</name><op:operator pos:line="2144" pos:column="36">.</op:operator><name pos:line="2144" pos:column="37">Ldarg_0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="2144" pos:column="47">// stack is now [target][target][reader]</comment>
                    <expr_stmt><expr><call><name pos:line="2145" pos:column="21">EmitInt32</name><argument_list pos:line="2145" pos:column="30">(<argument><expr><name pos:line="2145" pos:column="31">il</name></expr></argument>, <argument><expr><name pos:line="2145" pos:column="35">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="2145" pos:column="43">// stack is now [target][target][reader][index]</comment>
                    <expr_stmt><expr><call><name><name pos:line="2146" pos:column="21">il</name><op:operator pos:line="2146" pos:column="23">.</op:operator><name pos:line="2146" pos:column="24">Emit</name></name><argument_list pos:line="2146" pos:column="28">(<argument><expr><name><name pos:line="2146" pos:column="29">OpCodes</name><op:operator pos:line="2146" pos:column="36">.</op:operator><name pos:line="2146" pos:column="37">Dup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="2146" pos:column="42">// stack is now [target][target][reader][index][index]</comment>
                    <expr_stmt><expr><call><name><name pos:line="2147" pos:column="21">il</name><op:operator pos:line="2147" pos:column="23">.</op:operator><name pos:line="2147" pos:column="24">Emit</name></name><argument_list pos:line="2147" pos:column="28">(<argument><expr><name><name pos:line="2147" pos:column="29">OpCodes</name><op:operator pos:line="2147" pos:column="36">.</op:operator><name pos:line="2147" pos:column="37">Stloc_0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="2147" pos:column="46">// stack is now [target][target][reader][index]</comment>
                    <expr_stmt><expr><call><name><name pos:line="2148" pos:column="21">il</name><op:operator pos:line="2148" pos:column="23">.</op:operator><name pos:line="2148" pos:column="24">Emit</name></name><argument_list pos:line="2148" pos:column="28">(<argument><expr><name><name pos:line="2148" pos:column="29">OpCodes</name><op:operator pos:line="2148" pos:column="36">.</op:operator><name pos:line="2148" pos:column="37">Callvirt</name></name></expr></argument>, <argument><expr><name pos:line="2148" pos:column="47">getItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="2148" pos:column="57">// stack is now [target][target][value-as-object]</comment>

                    <decl_stmt><decl><type><name pos:line="2150" pos:column="21">Type</name></type> <name pos:line="2150" pos:column="26">memberType</name> <init pos:line="2150" pos:column="37">= <expr><name><name pos:line="2150" pos:column="39">item</name><op:operator pos:line="2150" pos:column="43">.</op:operator><name pos:line="2150" pos:column="44">MemberType</name></name></expr></init></decl>;</decl_stmt>

                    <if pos:line="2152" pos:column="21">if <condition pos:line="2152" pos:column="24">(<expr><name pos:line="2152" pos:column="25">memberType</name> <op:operator pos:line="2152" pos:column="36">==</op:operator> <call><name pos:line="2152" pos:column="39">typeof</name><argument_list pos:line="2152" pos:column="45">(<argument><expr><name pos:line="2152" pos:column="46">char</name></expr></argument>)</argument_list></call> <op:operator pos:line="2152" pos:column="52">||</op:operator> <name pos:line="2152" pos:column="55">memberType</name> <op:operator pos:line="2152" pos:column="66">==</op:operator> <call><name pos:line="2152" pos:column="69">typeof</name><argument_list pos:line="2152" pos:column="75">(<argument><expr><name pos:line="2152" pos:column="76">char</name><op:operator pos:line="2152" pos:column="80">?</op:operator></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="2152" pos:column="83">
                    <block pos:line="2153" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="2154" pos:column="25">il</name><op:operator pos:line="2154" pos:column="27">.</op:operator><name pos:line="2154" pos:column="28">EmitCall</name></name><argument_list pos:line="2154" pos:column="36">(<argument><expr><name><name pos:line="2154" pos:column="37">OpCodes</name><op:operator pos:line="2154" pos:column="44">.</op:operator><name pos:line="2154" pos:column="45">Call</name></name></expr></argument>, <argument><expr><call><name pos:line="2154" pos:column="51">typeof</name><argument_list pos:line="2154" pos:column="57">(<argument><expr><name pos:line="2154" pos:column="58">SqlMapper</name></expr></argument>)</argument_list></call><op:operator pos:line="2154" pos:column="68">.</op:operator><call><name pos:line="2154" pos:column="69">GetMethod</name><argument_list pos:line="2154" pos:column="78">(
                            <argument><expr><name pos:line="2155" pos:column="29">memberType</name> <op:operator pos:line="2155" pos:column="40">==</op:operator> <call><name pos:line="2155" pos:column="43">typeof</name><argument_list pos:line="2155" pos:column="49">(<argument><expr><name pos:line="2155" pos:column="50">char</name></expr></argument>)</argument_list></call> <op:operator pos:line="2155" pos:column="56">?</op:operator> <lit:literal type="string" pos:line="2155" pos:column="58">"ReadChar"</lit:literal> <op:operator pos:line="2155" pos:column="69">:</op:operator> <lit:literal type="string" pos:line="2155" pos:column="71">"ReadNullableChar"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="2155" pos:column="91">BindingFlags</name><op:operator pos:line="2155" pos:column="103">.</op:operator><name pos:line="2155" pos:column="104">Static</name></name> <op:operator pos:line="2155" pos:column="111">|</op:operator> <name><name pos:line="2155" pos:column="113">BindingFlags</name><op:operator pos:line="2155" pos:column="125">.</op:operator><name pos:line="2155" pos:column="126">Public</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="2155" pos:column="135">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="2155" pos:column="142">// stack is now [target][target][typed-value]</comment>
                    }</block></then>
                    <else pos:line="2157" pos:column="21">else
                    <block pos:line="2158" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="2159" pos:column="25">il</name><op:operator pos:line="2159" pos:column="27">.</op:operator><name pos:line="2159" pos:column="28">Emit</name></name><argument_list pos:line="2159" pos:column="32">(<argument><expr><name><name pos:line="2159" pos:column="33">OpCodes</name><op:operator pos:line="2159" pos:column="40">.</op:operator><name pos:line="2159" pos:column="41">Dup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="2159" pos:column="47">// stack is now [target][target][value][value]</comment>
                        <expr_stmt><expr><call><name><name pos:line="2160" pos:column="25">il</name><op:operator pos:line="2160" pos:column="27">.</op:operator><name pos:line="2160" pos:column="28">Emit</name></name><argument_list pos:line="2160" pos:column="32">(<argument><expr><name><name pos:line="2160" pos:column="33">OpCodes</name><op:operator pos:line="2160" pos:column="40">.</op:operator><name pos:line="2160" pos:column="41">Isinst</name></name></expr></argument>, <argument><expr><call><name pos:line="2160" pos:column="49">typeof</name><argument_list pos:line="2160" pos:column="55">(<argument><expr><name pos:line="2160" pos:column="56">DBNull</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="2160" pos:column="66">// stack is now [target][target][value-as-object][DBNull or null]</comment>
                        <expr_stmt><expr><call><name><name pos:line="2161" pos:column="25">il</name><op:operator pos:line="2161" pos:column="27">.</op:operator><name pos:line="2161" pos:column="28">Emit</name></name><argument_list pos:line="2161" pos:column="32">(<argument><expr><name><name pos:line="2161" pos:column="33">OpCodes</name><op:operator pos:line="2161" pos:column="40">.</op:operator><name pos:line="2161" pos:column="41">Brtrue_S</name></name></expr></argument>, <argument><expr><name pos:line="2161" pos:column="51">isDbNullLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="2161" pos:column="67">// stack is now [target][target][value-as-object]</comment>

                        <comment type="line" pos:line="2163" pos:column="25">// unbox nullable enums as the primitive, i.e. byte etc</comment>

                        <decl_stmt><decl><type><name pos:line="2165" pos:column="25">var</name></type> <name pos:line="2165" pos:column="29">nullUnderlyingType</name> <init pos:line="2165" pos:column="48">= <expr><call><name><name pos:line="2165" pos:column="50">Nullable</name><op:operator pos:line="2165" pos:column="58">.</op:operator><name pos:line="2165" pos:column="59">GetUnderlyingType</name></name><argument_list pos:line="2165" pos:column="76">(<argument><expr><name pos:line="2165" pos:column="77">memberType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name pos:line="2166" pos:column="25">var</name></type> <name pos:line="2166" pos:column="29">unboxType</name> <init pos:line="2166" pos:column="39">= <expr><name pos:line="2166" pos:column="41">nullUnderlyingType</name> <op:operator pos:line="2166" pos:column="60">!=</op:operator> <name pos:line="2166" pos:column="63">null</name> <op:operator pos:line="2166" pos:column="68">&amp;&amp;</op:operator> <name><name pos:line="2166" pos:column="71">nullUnderlyingType</name><op:operator pos:line="2166" pos:column="89">.</op:operator><name pos:line="2166" pos:column="90">IsEnum</name> <type:modifier pos:line="2166" pos:column="97">?</type:modifier></name> <name pos:line="2166" pos:column="99">nullUnderlyingType</name> <op:operator pos:line="2166" pos:column="118">:</op:operator> <name pos:line="2166" pos:column="120">memberType</name></expr></init></decl>;</decl_stmt>

                        <if pos:line="2168" pos:column="25">if <condition pos:line="2168" pos:column="28">(<expr><name><name pos:line="2168" pos:column="29">unboxType</name><op:operator pos:line="2168" pos:column="38">.</op:operator><name pos:line="2168" pos:column="39">IsEnum</name></name></expr>)</condition><then pos:line="2168" pos:column="46">
                        <block pos:line="2169" pos:column="25">{
                            <if pos:line="2170" pos:column="29">if <condition pos:line="2170" pos:column="32">(<expr><name pos:line="2170" pos:column="33">enumDeclareLocal</name> <op:operator pos:line="2170" pos:column="50">==</op:operator> <op:operator pos:line="2170" pos:column="53">-</op:operator><lit:literal type="number" pos:line="2170" pos:column="54">1</lit:literal></expr>)</condition><then pos:line="2170" pos:column="56">
                            <block pos:line="2171" pos:column="29">{
                                <expr_stmt><expr><name pos:line="2172" pos:column="33">enumDeclareLocal</name> <op:operator pos:line="2172" pos:column="50">=</op:operator> <call><name><name pos:line="2172" pos:column="52">il</name><op:operator pos:line="2172" pos:column="54">.</op:operator><name pos:line="2172" pos:column="55">DeclareLocal</name></name><argument_list pos:line="2172" pos:column="67">(<argument><expr><call><name pos:line="2172" pos:column="68">typeof</name><argument_list pos:line="2172" pos:column="74">(<argument><expr><name pos:line="2172" pos:column="75">string</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="2172" pos:column="83">.</op:operator><name pos:line="2172" pos:column="84">LocalIndex</name></expr>;</expr_stmt>
                            }</block></then></if>

                            <decl_stmt><decl><type><name pos:line="2175" pos:column="29">Label</name></type> <name pos:line="2175" pos:column="35">isNotString</name> <init pos:line="2175" pos:column="47">= <expr><call><name><name pos:line="2175" pos:column="49">il</name><op:operator pos:line="2175" pos:column="51">.</op:operator><name pos:line="2175" pos:column="52">DefineLabel</name></name><argument_list pos:line="2175" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><call><name><name pos:line="2176" pos:column="29">il</name><op:operator pos:line="2176" pos:column="31">.</op:operator><name pos:line="2176" pos:column="32">Emit</name></name><argument_list pos:line="2176" pos:column="36">(<argument><expr><name><name pos:line="2176" pos:column="37">OpCodes</name><op:operator pos:line="2176" pos:column="44">.</op:operator><name pos:line="2176" pos:column="45">Dup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="2176" pos:column="51">// stack is now [target][target][value][value]</comment>
                            <expr_stmt><expr><call><name><name pos:line="2177" pos:column="29">il</name><op:operator pos:line="2177" pos:column="31">.</op:operator><name pos:line="2177" pos:column="32">Emit</name></name><argument_list pos:line="2177" pos:column="36">(<argument><expr><name><name pos:line="2177" pos:column="37">OpCodes</name><op:operator pos:line="2177" pos:column="44">.</op:operator><name pos:line="2177" pos:column="45">Isinst</name></name></expr></argument>, <argument><expr><call><name pos:line="2177" pos:column="53">typeof</name><argument_list pos:line="2177" pos:column="59">(<argument><expr><name pos:line="2177" pos:column="60">string</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="2177" pos:column="70">// stack is now [target][target][value-as-object][string or null]</comment>
                            <expr_stmt><expr><call><name><name pos:line="2178" pos:column="29">il</name><op:operator pos:line="2178" pos:column="31">.</op:operator><name pos:line="2178" pos:column="32">Emit</name></name><argument_list pos:line="2178" pos:column="36">(<argument><expr><name><name pos:line="2178" pos:column="37">OpCodes</name><op:operator pos:line="2178" pos:column="44">.</op:operator><name pos:line="2178" pos:column="45">Dup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="2178" pos:column="50">// stack is now [target][target][value-as-object][string or null][string or null]</comment>
                            <expr_stmt><expr><call><name pos:line="2179" pos:column="29">StoreLocal</name><argument_list pos:line="2179" pos:column="39">(<argument><expr><name pos:line="2179" pos:column="40">il</name></expr></argument>, <argument><expr><name pos:line="2179" pos:column="44">enumDeclareLocal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="2179" pos:column="63">// stack is now [target][target][value-as-object][string or null]</comment>
                            <expr_stmt><expr><call><name><name pos:line="2180" pos:column="29">il</name><op:operator pos:line="2180" pos:column="31">.</op:operator><name pos:line="2180" pos:column="32">Emit</name></name><argument_list pos:line="2180" pos:column="36">(<argument><expr><name><name pos:line="2180" pos:column="37">OpCodes</name><op:operator pos:line="2180" pos:column="44">.</op:operator><name pos:line="2180" pos:column="45">Brfalse_S</name></name></expr></argument>, <argument><expr><name pos:line="2180" pos:column="56">isNotString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="2180" pos:column="70">// stack is now [target][target][value-as-object]</comment>

                            <expr_stmt><expr><call><name><name pos:line="2182" pos:column="29">il</name><op:operator pos:line="2182" pos:column="31">.</op:operator><name pos:line="2182" pos:column="32">Emit</name></name><argument_list pos:line="2182" pos:column="36">(<argument><expr><name><name pos:line="2182" pos:column="37">OpCodes</name><op:operator pos:line="2182" pos:column="44">.</op:operator><name pos:line="2182" pos:column="45">Pop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="2182" pos:column="51">// stack is now [target][target]</comment>

                            <expr_stmt><expr><call><name><name pos:line="2184" pos:column="29">il</name><op:operator pos:line="2184" pos:column="31">.</op:operator><name pos:line="2184" pos:column="32">Emit</name></name><argument_list pos:line="2184" pos:column="36">(<argument><expr><name><name pos:line="2184" pos:column="37">OpCodes</name><op:operator pos:line="2184" pos:column="44">.</op:operator><name pos:line="2184" pos:column="45">Ldtoken</name></name></expr></argument>, <argument><expr><name pos:line="2184" pos:column="54">unboxType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="2184" pos:column="66">// stack is now [target][target][enum-type-token]</comment>
                            <expr_stmt><expr><call><name><name pos:line="2185" pos:column="29">il</name><op:operator pos:line="2185" pos:column="31">.</op:operator><name pos:line="2185" pos:column="32">EmitCall</name></name><argument_list pos:line="2185" pos:column="40">(<argument><expr><name><name pos:line="2185" pos:column="41">OpCodes</name><op:operator pos:line="2185" pos:column="48">.</op:operator><name pos:line="2185" pos:column="49">Call</name></name></expr></argument>, <argument><expr><call><name pos:line="2185" pos:column="55">typeof</name><argument_list pos:line="2185" pos:column="61">(<argument><expr><name pos:line="2185" pos:column="62">Type</name></expr></argument>)</argument_list></call><op:operator pos:line="2185" pos:column="67">.</op:operator><call><name pos:line="2185" pos:column="68">GetMethod</name><argument_list pos:line="2185" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="2185" pos:column="78">"GetTypeFromHandle"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="2185" pos:column="100">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="2185" pos:column="106">// stack is now [target][target][enum-type]</comment>
                            <expr_stmt><expr><call><name><name pos:line="2186" pos:column="29">il</name><op:operator pos:line="2186" pos:column="31">.</op:operator><name pos:line="2186" pos:column="32">Emit</name></name><argument_list pos:line="2186" pos:column="36">(<argument><expr><name><name pos:line="2186" pos:column="37">OpCodes</name><op:operator pos:line="2186" pos:column="44">.</op:operator><name pos:line="2186" pos:column="45">Ldloc_2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="2186" pos:column="55">// stack is now [target][target][enum-type][string]</comment>
                            <expr_stmt><expr><call><name><name pos:line="2187" pos:column="29">il</name><op:operator pos:line="2187" pos:column="31">.</op:operator><name pos:line="2187" pos:column="32">Emit</name></name><argument_list pos:line="2187" pos:column="36">(<argument><expr><name><name pos:line="2187" pos:column="37">OpCodes</name><op:operator pos:line="2187" pos:column="44">.</op:operator><name pos:line="2187" pos:column="45">Ldc_I4_1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="2187" pos:column="56">// stack is now [target][target][enum-type][string][true]</comment>
                            <expr_stmt><expr><call><name><name pos:line="2188" pos:column="29">il</name><op:operator pos:line="2188" pos:column="31">.</op:operator><name pos:line="2188" pos:column="32">EmitCall</name></name><argument_list pos:line="2188" pos:column="40">(<argument><expr><name><name pos:line="2188" pos:column="41">OpCodes</name><op:operator pos:line="2188" pos:column="48">.</op:operator><name pos:line="2188" pos:column="49">Call</name></name></expr></argument>, <argument><expr><name pos:line="2188" pos:column="55">enumParse</name></expr></argument>, <argument><expr><name pos:line="2188" pos:column="66">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="2188" pos:column="73">// stack is now [target][target][enum-as-object]</comment>

                            <expr_stmt><expr><call><name><name pos:line="2190" pos:column="29">il</name><op:operator pos:line="2190" pos:column="31">.</op:operator><name pos:line="2190" pos:column="32">MarkLabel</name></name><argument_list pos:line="2190" pos:column="41">(<argument><expr><name pos:line="2190" pos:column="42">isNotString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt><expr><call><name><name pos:line="2192" pos:column="29">il</name><op:operator pos:line="2192" pos:column="31">.</op:operator><name pos:line="2192" pos:column="32">Emit</name></name><argument_list pos:line="2192" pos:column="36">(<argument><expr><name><name pos:line="2192" pos:column="37">OpCodes</name><op:operator pos:line="2192" pos:column="44">.</op:operator><name pos:line="2192" pos:column="45">Unbox_Any</name></name></expr></argument>, <argument><expr><name pos:line="2192" pos:column="56">unboxType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="2192" pos:column="68">// stack is now [target][target][typed-value]</comment>

                            <if pos:line="2194" pos:column="29">if <condition pos:line="2194" pos:column="32">(<expr><name pos:line="2194" pos:column="33">nullUnderlyingType</name> <op:operator pos:line="2194" pos:column="52">!=</op:operator> <name pos:line="2194" pos:column="55">null</name></expr>)</condition><then pos:line="2194" pos:column="60">
                            <block pos:line="2195" pos:column="29">{
                                <expr_stmt><expr><call><name><name pos:line="2196" pos:column="33">il</name><op:operator pos:line="2196" pos:column="35">.</op:operator><name pos:line="2196" pos:column="36">Emit</name></name><argument_list pos:line="2196" pos:column="40">(<argument><expr><name><name pos:line="2196" pos:column="41">OpCodes</name><op:operator pos:line="2196" pos:column="48">.</op:operator><name pos:line="2196" pos:column="49">Newobj</name></name></expr></argument>, <argument><expr><call><name><name pos:line="2196" pos:column="57">memberType</name><op:operator pos:line="2196" pos:column="67">.</op:operator><name pos:line="2196" pos:column="68">GetConstructor</name></name><argument_list pos:line="2196" pos:column="82">(<argument><expr><op:operator pos:line="2196" pos:column="83">new</op:operator><index pos:line="2196" pos:column="86">[]</index> <block pos:line="2196" pos:column="89">{ <expr><name pos:line="2196" pos:column="91">nullUnderlyingType</name></expr> }</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="2196" pos:column="115">// stack is now [target][target][enum-value]</comment>
                            }</block></then></if>
                        }</block></then>
                        <else pos:line="2199" pos:column="25">else <if pos:line="2199" pos:column="30">if <condition pos:line="2199" pos:column="33">(<expr><name><name pos:line="2199" pos:column="34">memberType</name><op:operator pos:line="2199" pos:column="44">.</op:operator><name pos:line="2199" pos:column="45">FullName</name></name> <op:operator pos:line="2199" pos:column="54">==</op:operator> <name pos:line="2199" pos:column="57">LinqBinary</name></expr>)</condition><then pos:line="2199" pos:column="68">
                        <block pos:line="2200" pos:column="25">{
                            <expr_stmt><expr><call><name><name pos:line="2201" pos:column="29">il</name><op:operator pos:line="2201" pos:column="31">.</op:operator><name pos:line="2201" pos:column="32">Emit</name></name><argument_list pos:line="2201" pos:column="36">(<argument><expr><name><name pos:line="2201" pos:column="37">OpCodes</name><op:operator pos:line="2201" pos:column="44">.</op:operator><name pos:line="2201" pos:column="45">Unbox_Any</name></name></expr></argument>, <argument><expr><call><name pos:line="2201" pos:column="56">typeof</name><argument_list pos:line="2201" pos:column="62">(<argument><expr><name><name pos:line="2201" pos:column="63">byte</name><index pos:line="2201" pos:column="67">[]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="2201" pos:column="73">// stack is now [target][target][byte-array]</comment>
                            <expr_stmt><expr><call><name><name pos:line="2202" pos:column="29">il</name><op:operator pos:line="2202" pos:column="31">.</op:operator><name pos:line="2202" pos:column="32">Emit</name></name><argument_list pos:line="2202" pos:column="36">(<argument><expr><name><name pos:line="2202" pos:column="37">OpCodes</name><op:operator pos:line="2202" pos:column="44">.</op:operator><name pos:line="2202" pos:column="45">Newobj</name></name></expr></argument>, <argument><expr><call><name><name pos:line="2202" pos:column="53">memberType</name><op:operator pos:line="2202" pos:column="63">.</op:operator><name pos:line="2202" pos:column="64">GetConstructor</name></name><argument_list pos:line="2202" pos:column="78">(<argument><expr><op:operator pos:line="2202" pos:column="79">new</op:operator> <name><name pos:line="2202" pos:column="83">Type</name><index pos:line="2202" pos:column="87">[]</index></name> <block pos:line="2202" pos:column="90">{ <expr><call><name pos:line="2202" pos:column="92">typeof</name><argument_list pos:line="2202" pos:column="98">(<argument><expr><name><name pos:line="2202" pos:column="99">byte</name><index pos:line="2202" pos:column="103">[]</index></name></expr></argument>)</argument_list></call></expr> }</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="2202" pos:column="111">// stack is now [target][target][binary]</comment>
                        }</block></then>
                        <else pos:line="2204" pos:column="25">else
                        <block pos:line="2205" pos:column="25">{
                            <decl_stmt><decl><type><name pos:line="2206" pos:column="29">Type</name></type> <name pos:line="2206" pos:column="34">dataType</name> <init pos:line="2206" pos:column="43">= <expr><call><name><name pos:line="2206" pos:column="45">reader</name><op:operator pos:line="2206" pos:column="51">.</op:operator><name pos:line="2206" pos:column="52">GetFieldType</name></name><argument_list pos:line="2206" pos:column="64">(<argument><expr><name pos:line="2206" pos:column="65">index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name pos:line="2207" pos:column="29">TypeCode</name></type> <name pos:line="2207" pos:column="38">dataTypeCode</name> <init pos:line="2207" pos:column="51">= <expr><call><name><name pos:line="2207" pos:column="53">Type</name><op:operator pos:line="2207" pos:column="57">.</op:operator><name pos:line="2207" pos:column="58">GetTypeCode</name></name><argument_list pos:line="2207" pos:column="69">(<argument><expr><name pos:line="2207" pos:column="70">dataType</name></expr></argument>)</argument_list></call></expr></init><op:operator pos:line="2207" pos:column="79">,</op:operator> <name pos:line="2207" pos:column="81">unboxTypeCode</name> <init pos:line="2207" pos:column="95">= <expr><call><name><name pos:line="2207" pos:column="97">Type</name><op:operator pos:line="2207" pos:column="101">.</op:operator><name pos:line="2207" pos:column="102">GetTypeCode</name></name><argument_list pos:line="2207" pos:column="113">(<argument><expr><name pos:line="2207" pos:column="114">unboxType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <if pos:line="2208" pos:column="29">if <condition pos:line="2208" pos:column="32">(<expr><name pos:line="2208" pos:column="33">dataType</name> <op:operator pos:line="2208" pos:column="42">==</op:operator> <name pos:line="2208" pos:column="45">unboxType</name> <op:operator pos:line="2208" pos:column="55">||</op:operator> <name pos:line="2208" pos:column="58">dataTypeCode</name> <op:operator pos:line="2208" pos:column="71">==</op:operator> <name pos:line="2208" pos:column="74">unboxTypeCode</name> <op:operator pos:line="2208" pos:column="88">||</op:operator> <name pos:line="2208" pos:column="91">dataTypeCode</name> <op:operator pos:line="2208" pos:column="104">==</op:operator> <call><name><name pos:line="2208" pos:column="107">Type</name><op:operator pos:line="2208" pos:column="111">.</op:operator><name pos:line="2208" pos:column="112">GetTypeCode</name></name><argument_list pos:line="2208" pos:column="123">(<argument><expr><name pos:line="2208" pos:column="124">nullUnderlyingType</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="2208" pos:column="144">
                            <block pos:line="2209" pos:column="29">{
                                <expr_stmt><expr><call><name><name pos:line="2210" pos:column="33">il</name><op:operator pos:line="2210" pos:column="35">.</op:operator><name pos:line="2210" pos:column="36">Emit</name></name><argument_list pos:line="2210" pos:column="40">(<argument><expr><name><name pos:line="2210" pos:column="41">OpCodes</name><op:operator pos:line="2210" pos:column="48">.</op:operator><name pos:line="2210" pos:column="49">Unbox_Any</name></name></expr></argument>, <argument><expr><name pos:line="2210" pos:column="60">unboxType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="2210" pos:column="72">// stack is now [target][target][typed-value]</comment>
                            }</block></then>
                            <else pos:line="2212" pos:column="29">else
                            <block pos:line="2213" pos:column="29">{
                                <comment type="line" pos:line="2214" pos:column="33">// not a direct match; need to tweak the unbox</comment>
                                <decl_stmt><decl><type><name pos:line="2215" pos:column="33">bool</name></type> <name pos:line="2215" pos:column="38">handled</name> <init pos:line="2215" pos:column="46">= <expr><lit:literal type="boolean" pos:line="2215" pos:column="48">true</lit:literal></expr></init></decl>;</decl_stmt>
                                <decl_stmt><decl><type><name pos:line="2216" pos:column="33">OpCode</name></type> <name pos:line="2216" pos:column="40">opCode</name> <init pos:line="2216" pos:column="47">= <expr><call><name pos:line="2216" pos:column="49">default</name><argument_list pos:line="2216" pos:column="56">(<argument><expr><name pos:line="2216" pos:column="57">OpCode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                <if pos:line="2217" pos:column="33">if <condition pos:line="2217" pos:column="36">(<expr><name pos:line="2217" pos:column="37">dataTypeCode</name> <op:operator pos:line="2217" pos:column="50">==</op:operator> <name><name pos:line="2217" pos:column="53">TypeCode</name><op:operator pos:line="2217" pos:column="61">.</op:operator><name pos:line="2217" pos:column="62">Decimal</name></name> <op:operator pos:line="2217" pos:column="70">||</op:operator> <name pos:line="2217" pos:column="73">unboxTypeCode</name> <op:operator pos:line="2217" pos:column="87">==</op:operator> <name><name pos:line="2217" pos:column="90">TypeCode</name><op:operator pos:line="2217" pos:column="98">.</op:operator><name pos:line="2217" pos:column="99">Decimal</name></name></expr>)</condition><then pos:line="2217" pos:column="107">
                                <block pos:line="2218" pos:column="33">{   <comment type="line" pos:line="2218" pos:column="37">// no IL level conversions to/from decimal; I guess we could use the static operators, but</comment>
                                    <comment type="line" pos:line="2219" pos:column="37">// this feels an edge-case</comment>
                                    <expr_stmt><expr><name pos:line="2220" pos:column="37">handled</name> <op:operator pos:line="2220" pos:column="45">=</op:operator> <lit:literal type="boolean" pos:line="2220" pos:column="47">false</lit:literal></expr>;</expr_stmt>
                                }</block></then>
                                <else pos:line="2222" pos:column="33">else
                                <block pos:line="2223" pos:column="33">{
                                    <switch pos:line="2224" pos:column="37">switch <condition pos:line="2224" pos:column="44">(<expr><name pos:line="2224" pos:column="45">unboxTypeCode</name></expr>)</condition>
                                    <block pos:line="2225" pos:column="37">{
                                        <case pos:line="2226" pos:column="41">case <expr><name><name pos:line="2226" pos:column="46">TypeCode</name><op:operator pos:line="2226" pos:column="54">.</op:operator><name pos:line="2226" pos:column="55">Byte</name></name></expr>:
                                            <expr_stmt><expr><name pos:line="2227" pos:column="45">opCode</name> <op:operator pos:line="2227" pos:column="52">=</op:operator> <name><name pos:line="2227" pos:column="54">OpCodes</name><op:operator pos:line="2227" pos:column="61">.</op:operator><name pos:line="2227" pos:column="62">Conv_Ovf_I1_Un</name></name></expr>;</expr_stmt> <break pos:line="2227" pos:column="78">break;</break>
                                        </case><case pos:line="2228" pos:column="41">case <expr><name><name pos:line="2228" pos:column="46">TypeCode</name><op:operator pos:line="2228" pos:column="54">.</op:operator><name pos:line="2228" pos:column="55">SByte</name></name></expr>:
                                            <expr_stmt><expr><name pos:line="2229" pos:column="45">opCode</name> <op:operator pos:line="2229" pos:column="52">=</op:operator> <name><name pos:line="2229" pos:column="54">OpCodes</name><op:operator pos:line="2229" pos:column="61">.</op:operator><name pos:line="2229" pos:column="62">Conv_Ovf_I1</name></name></expr>;</expr_stmt> <break pos:line="2229" pos:column="75">break;</break>
                                        </case><case pos:line="2230" pos:column="41">case <expr><name><name pos:line="2230" pos:column="46">TypeCode</name><op:operator pos:line="2230" pos:column="54">.</op:operator><name pos:line="2230" pos:column="55">UInt16</name></name></expr>:
                                            <expr_stmt><expr><name pos:line="2231" pos:column="45">opCode</name> <op:operator pos:line="2231" pos:column="52">=</op:operator> <name><name pos:line="2231" pos:column="54">OpCodes</name><op:operator pos:line="2231" pos:column="61">.</op:operator><name pos:line="2231" pos:column="62">Conv_Ovf_I2_Un</name></name></expr>;</expr_stmt> <break pos:line="2231" pos:column="78">break;</break>
                                        </case><case pos:line="2232" pos:column="41">case <expr><name><name pos:line="2232" pos:column="46">TypeCode</name><op:operator pos:line="2232" pos:column="54">.</op:operator><name pos:line="2232" pos:column="55">Int16</name></name></expr>:
                                            <expr_stmt><expr><name pos:line="2233" pos:column="45">opCode</name> <op:operator pos:line="2233" pos:column="52">=</op:operator> <name><name pos:line="2233" pos:column="54">OpCodes</name><op:operator pos:line="2233" pos:column="61">.</op:operator><name pos:line="2233" pos:column="62">Conv_Ovf_I2</name></name></expr>;</expr_stmt> <break pos:line="2233" pos:column="75">break;</break>
                                        </case><case pos:line="2234" pos:column="41">case <expr><name><name pos:line="2234" pos:column="46">TypeCode</name><op:operator pos:line="2234" pos:column="54">.</op:operator><name pos:line="2234" pos:column="55">UInt32</name></name></expr>:
                                            <expr_stmt><expr><name pos:line="2235" pos:column="45">opCode</name> <op:operator pos:line="2235" pos:column="52">=</op:operator> <name><name pos:line="2235" pos:column="54">OpCodes</name><op:operator pos:line="2235" pos:column="61">.</op:operator><name pos:line="2235" pos:column="62">Conv_Ovf_I4_Un</name></name></expr>;</expr_stmt> <break pos:line="2235" pos:column="78">break;</break>
                                        </case><case pos:line="2236" pos:column="41">case <expr><name><name pos:line="2236" pos:column="46">TypeCode</name><op:operator pos:line="2236" pos:column="54">.</op:operator><name pos:line="2236" pos:column="55">Boolean</name></name></expr>: <comment type="line" pos:line="2236" pos:column="64">// boolean is basically an int, at least at this level</comment>
                                        </case><case pos:line="2237" pos:column="41">case <expr><name><name pos:line="2237" pos:column="46">TypeCode</name><op:operator pos:line="2237" pos:column="54">.</op:operator><name pos:line="2237" pos:column="55">Int32</name></name></expr>:
                                            <expr_stmt><expr><name pos:line="2238" pos:column="45">opCode</name> <op:operator pos:line="2238" pos:column="52">=</op:operator> <name><name pos:line="2238" pos:column="54">OpCodes</name><op:operator pos:line="2238" pos:column="61">.</op:operator><name pos:line="2238" pos:column="62">Conv_Ovf_I4</name></name></expr>;</expr_stmt> <break pos:line="2238" pos:column="75">break;</break>
                                        </case><case pos:line="2239" pos:column="41">case <expr><name><name pos:line="2239" pos:column="46">TypeCode</name><op:operator pos:line="2239" pos:column="54">.</op:operator><name pos:line="2239" pos:column="55">UInt64</name></name></expr>:
                                            <expr_stmt><expr><name pos:line="2240" pos:column="45">opCode</name> <op:operator pos:line="2240" pos:column="52">=</op:operator> <name><name pos:line="2240" pos:column="54">OpCodes</name><op:operator pos:line="2240" pos:column="61">.</op:operator><name pos:line="2240" pos:column="62">Conv_Ovf_I8_Un</name></name></expr>;</expr_stmt> <break pos:line="2240" pos:column="78">break;</break>
                                        </case><case pos:line="2241" pos:column="41">case <expr><name><name pos:line="2241" pos:column="46">TypeCode</name><op:operator pos:line="2241" pos:column="54">.</op:operator><name pos:line="2241" pos:column="55">Int64</name></name></expr>:
                                            <expr_stmt><expr><name pos:line="2242" pos:column="45">opCode</name> <op:operator pos:line="2242" pos:column="52">=</op:operator> <name><name pos:line="2242" pos:column="54">OpCodes</name><op:operator pos:line="2242" pos:column="61">.</op:operator><name pos:line="2242" pos:column="62">Conv_Ovf_I8</name></name></expr>;</expr_stmt> <break pos:line="2242" pos:column="75">break;</break>
                                        </case><case pos:line="2243" pos:column="41">case <expr><name><name pos:line="2243" pos:column="46">TypeCode</name><op:operator pos:line="2243" pos:column="54">.</op:operator><name pos:line="2243" pos:column="55">Single</name></name></expr>:
                                            <expr_stmt><expr><name pos:line="2244" pos:column="45">opCode</name> <op:operator pos:line="2244" pos:column="52">=</op:operator> <name><name pos:line="2244" pos:column="54">OpCodes</name><op:operator pos:line="2244" pos:column="61">.</op:operator><name pos:line="2244" pos:column="62">Conv_R4</name></name></expr>;</expr_stmt> <break pos:line="2244" pos:column="71">break;</break>
                                        </case><case pos:line="2245" pos:column="41">case <expr><name><name pos:line="2245" pos:column="46">TypeCode</name><op:operator pos:line="2245" pos:column="54">.</op:operator><name pos:line="2245" pos:column="55">Double</name></name></expr>:
                                            <expr_stmt><expr><name pos:line="2246" pos:column="45">opCode</name> <op:operator pos:line="2246" pos:column="52">=</op:operator> <name><name pos:line="2246" pos:column="54">OpCodes</name><op:operator pos:line="2246" pos:column="61">.</op:operator><name pos:line="2246" pos:column="62">Conv_R8</name></name></expr>;</expr_stmt> <break pos:line="2246" pos:column="71">break;</break>
                                        </case><default pos:line="2247" pos:column="41">default:
                                            <expr_stmt><expr><name pos:line="2248" pos:column="45">handled</name> <op:operator pos:line="2248" pos:column="53">=</op:operator> <lit:literal type="boolean" pos:line="2248" pos:column="55">false</lit:literal></expr>;</expr_stmt>
                                            <break pos:line="2249" pos:column="45">break;</break>
                                    </default>}</block></switch>
                                }</block></else></if>
                                <if pos:line="2252" pos:column="33">if <condition pos:line="2252" pos:column="36">(<expr><name pos:line="2252" pos:column="37">handled</name></expr>)</condition><then pos:line="2252" pos:column="45">
                                <block pos:line="2253" pos:column="33">{ <comment type="line" pos:line="2253" pos:column="35">// unbox as the data-type, then use IL-level convert</comment>
                                    <expr_stmt><expr><call><name><name pos:line="2254" pos:column="37">il</name><op:operator pos:line="2254" pos:column="39">.</op:operator><name pos:line="2254" pos:column="40">Emit</name></name><argument_list pos:line="2254" pos:column="44">(<argument><expr><name><name pos:line="2254" pos:column="45">OpCodes</name><op:operator pos:line="2254" pos:column="52">.</op:operator><name pos:line="2254" pos:column="53">Unbox_Any</name></name></expr></argument>, <argument><expr><name pos:line="2254" pos:column="64">dataType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="2254" pos:column="75">// stack is now [target][target][data-typed-value]</comment>
                                    <expr_stmt><expr><call><name><name pos:line="2255" pos:column="37">il</name><op:operator pos:line="2255" pos:column="39">.</op:operator><name pos:line="2255" pos:column="40">Emit</name></name><argument_list pos:line="2255" pos:column="44">(<argument><expr><name pos:line="2255" pos:column="45">opCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="2255" pos:column="54">// stack is now [target][target][typed-value]</comment>
                                    <if pos:line="2256" pos:column="37">if <condition pos:line="2256" pos:column="40">(<expr><name pos:line="2256" pos:column="41">unboxTypeCode</name> <op:operator pos:line="2256" pos:column="55">==</op:operator> <name><name pos:line="2256" pos:column="58">TypeCode</name><op:operator pos:line="2256" pos:column="66">.</op:operator><name pos:line="2256" pos:column="67">Boolean</name></name></expr>)</condition><then pos:line="2256" pos:column="75">
                                    <block pos:line="2257" pos:column="37">{ <comment type="line" pos:line="2257" pos:column="39">// compare to zero; I checked "csc" - this is the trick it uses; nice</comment>
                                        <expr_stmt><expr><call><name><name pos:line="2258" pos:column="41">il</name><op:operator pos:line="2258" pos:column="43">.</op:operator><name pos:line="2258" pos:column="44">Emit</name></name><argument_list pos:line="2258" pos:column="48">(<argument><expr><name><name pos:line="2258" pos:column="49">OpCodes</name><op:operator pos:line="2258" pos:column="56">.</op:operator><name pos:line="2258" pos:column="57">Ldc_I4_0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <expr_stmt><expr><call><name><name pos:line="2259" pos:column="41">il</name><op:operator pos:line="2259" pos:column="43">.</op:operator><name pos:line="2259" pos:column="44">Emit</name></name><argument_list pos:line="2259" pos:column="48">(<argument><expr><name><name pos:line="2259" pos:column="49">OpCodes</name><op:operator pos:line="2259" pos:column="56">.</op:operator><name pos:line="2259" pos:column="57">Ceq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <expr_stmt><expr><call><name><name pos:line="2260" pos:column="41">il</name><op:operator pos:line="2260" pos:column="43">.</op:operator><name pos:line="2260" pos:column="44">Emit</name></name><argument_list pos:line="2260" pos:column="48">(<argument><expr><name><name pos:line="2260" pos:column="49">OpCodes</name><op:operator pos:line="2260" pos:column="56">.</op:operator><name pos:line="2260" pos:column="57">Ldc_I4_0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <expr_stmt><expr><call><name><name pos:line="2261" pos:column="41">il</name><op:operator pos:line="2261" pos:column="43">.</op:operator><name pos:line="2261" pos:column="44">Emit</name></name><argument_list pos:line="2261" pos:column="48">(<argument><expr><name><name pos:line="2261" pos:column="49">OpCodes</name><op:operator pos:line="2261" pos:column="56">.</op:operator><name pos:line="2261" pos:column="57">Ceq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    }</block></then></if>
                                }</block></then>
                                <else pos:line="2264" pos:column="33">else
                                <block pos:line="2265" pos:column="33">{ <comment type="line" pos:line="2265" pos:column="35">// use flexible conversion</comment>
                                    <expr_stmt><expr><call><name><name pos:line="2266" pos:column="37">il</name><op:operator pos:line="2266" pos:column="39">.</op:operator><name pos:line="2266" pos:column="40">Emit</name></name><argument_list pos:line="2266" pos:column="44">(<argument><expr><name><name pos:line="2266" pos:column="45">OpCodes</name><op:operator pos:line="2266" pos:column="52">.</op:operator><name pos:line="2266" pos:column="53">Ldtoken</name></name></expr></argument>, <argument><expr><name pos:line="2266" pos:column="62">unboxType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="2266" pos:column="74">// stack is now [target][target][value][member-type-token]</comment>
                                    <expr_stmt><expr><call><name><name pos:line="2267" pos:column="37">il</name><op:operator pos:line="2267" pos:column="39">.</op:operator><name pos:line="2267" pos:column="40">EmitCall</name></name><argument_list pos:line="2267" pos:column="48">(<argument><expr><name><name pos:line="2267" pos:column="49">OpCodes</name><op:operator pos:line="2267" pos:column="56">.</op:operator><name pos:line="2267" pos:column="57">Call</name></name></expr></argument>, <argument><expr><call><name pos:line="2267" pos:column="63">typeof</name><argument_list pos:line="2267" pos:column="69">(<argument><expr><name pos:line="2267" pos:column="70">Type</name></expr></argument>)</argument_list></call><op:operator pos:line="2267" pos:column="75">.</op:operator><call><name pos:line="2267" pos:column="76">GetMethod</name><argument_list pos:line="2267" pos:column="85">(<argument><expr><lit:literal type="string" pos:line="2267" pos:column="86">"GetTypeFromHandle"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="2267" pos:column="108">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="2267" pos:column="115">// stack is now [target][target][value][member-type]</comment>
                                    <expr_stmt><expr><call><name><name pos:line="2268" pos:column="37">il</name><op:operator pos:line="2268" pos:column="39">.</op:operator><name pos:line="2268" pos:column="40">EmitCall</name></name><argument_list pos:line="2268" pos:column="48">(<argument><expr><name><name pos:line="2268" pos:column="49">OpCodes</name><op:operator pos:line="2268" pos:column="56">.</op:operator><name pos:line="2268" pos:column="57">Call</name></name></expr></argument>, <argument><expr><call><name pos:line="2268" pos:column="63">typeof</name><argument_list pos:line="2268" pos:column="69">(<argument><expr><name pos:line="2268" pos:column="70">Convert</name></expr></argument>)</argument_list></call><op:operator pos:line="2268" pos:column="78">.</op:operator><call><name pos:line="2268" pos:column="79">GetMethod</name><argument_list pos:line="2268" pos:column="88">(<argument><expr><lit:literal type="string" pos:line="2268" pos:column="89">"ChangeType"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="2268" pos:column="103">new</op:operator> <name><name pos:line="2268" pos:column="107">Type</name><index pos:line="2268" pos:column="111">[]</index></name> <block pos:line="2268" pos:column="114">{ <expr><call><name pos:line="2268" pos:column="116">typeof</name><argument_list pos:line="2268" pos:column="122">(<argument><expr><name pos:line="2268" pos:column="123">object</name></expr></argument>)</argument_list></call></expr><op:operator pos:line="2268" pos:column="130">,</op:operator> <expr><call><name pos:line="2268" pos:column="132">typeof</name><argument_list pos:line="2268" pos:column="138">(<argument><expr><name pos:line="2268" pos:column="139">Type</name></expr></argument>)</argument_list></call></expr> }</block></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="2268" pos:column="149">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="2268" pos:column="156">// stack is now [target][target][boxed-member-type-value]</comment>
                                    <expr_stmt><expr><call><name><name pos:line="2269" pos:column="37">il</name><op:operator pos:line="2269" pos:column="39">.</op:operator><name pos:line="2269" pos:column="40">Emit</name></name><argument_list pos:line="2269" pos:column="44">(<argument><expr><name><name pos:line="2269" pos:column="45">OpCodes</name><op:operator pos:line="2269" pos:column="52">.</op:operator><name pos:line="2269" pos:column="53">Unbox_Any</name></name></expr></argument>, <argument><expr><name pos:line="2269" pos:column="64">unboxType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="2269" pos:column="76">// stack is now [target][target][typed-value]</comment>
                                }</block></else></if>

                            }</block></else></if>

                        }</block></else></if></else></if>
                    }</block></else></if>
                    <if pos:line="2276" pos:column="21">if <condition pos:line="2276" pos:column="24">(<expr><name pos:line="2276" pos:column="25">specializedConstructor</name> <op:operator pos:line="2276" pos:column="48">==</op:operator> <name pos:line="2276" pos:column="51">null</name></expr>)</condition><then pos:line="2276" pos:column="56">
                    <block pos:line="2277" pos:column="21">{
                        <comment type="line" pos:line="2278" pos:column="25">// Store the value in the property/field</comment>
                        <if pos:line="2279" pos:column="25">if <condition pos:line="2279" pos:column="28">(<expr><name><name pos:line="2279" pos:column="29">item</name><op:operator pos:line="2279" pos:column="33">.</op:operator><name pos:line="2279" pos:column="34">Property</name></name> <op:operator pos:line="2279" pos:column="43">!=</op:operator> <name pos:line="2279" pos:column="46">null</name></expr>)</condition><then pos:line="2279" pos:column="51">
                        <block pos:line="2280" pos:column="25">{
                            <if pos:line="2281" pos:column="29">if <condition pos:line="2281" pos:column="32">(<expr><name><name pos:line="2281" pos:column="33">type</name><op:operator pos:line="2281" pos:column="37">.</op:operator><name pos:line="2281" pos:column="38">IsValueType</name></name></expr>)</condition><then pos:line="2281" pos:column="50">
                            <block pos:line="2282" pos:column="29">{
                                <expr_stmt><expr><call><name><name pos:line="2283" pos:column="33">il</name><op:operator pos:line="2283" pos:column="35">.</op:operator><name pos:line="2283" pos:column="36">Emit</name></name><argument_list pos:line="2283" pos:column="40">(<argument><expr><name><name pos:line="2283" pos:column="41">OpCodes</name><op:operator pos:line="2283" pos:column="48">.</op:operator><name pos:line="2283" pos:column="49">Call</name></name></expr></argument>, <argument><expr><call><name><name pos:line="2283" pos:column="55">DefaultTypeMap</name><op:operator pos:line="2283" pos:column="69">.</op:operator><name pos:line="2283" pos:column="70">GetPropertySetter</name></name><argument_list pos:line="2283" pos:column="87">(<argument><expr><name><name pos:line="2283" pos:column="88">item</name><op:operator pos:line="2283" pos:column="92">.</op:operator><name pos:line="2283" pos:column="93">Property</name></name></expr></argument>, <argument><expr><name pos:line="2283" pos:column="103">type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="2283" pos:column="111">// stack is now [target]</comment>
                            }</block></then>
                            <else pos:line="2285" pos:column="29">else
                            <block pos:line="2286" pos:column="29">{
                                <expr_stmt><expr><call><name><name pos:line="2287" pos:column="33">il</name><op:operator pos:line="2287" pos:column="35">.</op:operator><name pos:line="2287" pos:column="36">Emit</name></name><argument_list pos:line="2287" pos:column="40">(<argument><expr><name><name pos:line="2287" pos:column="41">OpCodes</name><op:operator pos:line="2287" pos:column="48">.</op:operator><name pos:line="2287" pos:column="49">Callvirt</name></name></expr></argument>, <argument><expr><call><name><name pos:line="2287" pos:column="59">DefaultTypeMap</name><op:operator pos:line="2287" pos:column="73">.</op:operator><name pos:line="2287" pos:column="74">GetPropertySetter</name></name><argument_list pos:line="2287" pos:column="91">(<argument><expr><name><name pos:line="2287" pos:column="92">item</name><op:operator pos:line="2287" pos:column="96">.</op:operator><name pos:line="2287" pos:column="97">Property</name></name></expr></argument>, <argument><expr><name pos:line="2287" pos:column="107">type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="2287" pos:column="115">// stack is now [target]</comment>
                            }</block></else></if>
                        }</block></then>
                        <else pos:line="2290" pos:column="25">else
                        <block pos:line="2291" pos:column="25">{
                            <expr_stmt><expr><call><name><name pos:line="2292" pos:column="29">il</name><op:operator pos:line="2292" pos:column="31">.</op:operator><name pos:line="2292" pos:column="32">Emit</name></name><argument_list pos:line="2292" pos:column="36">(<argument><expr><name><name pos:line="2292" pos:column="37">OpCodes</name><op:operator pos:line="2292" pos:column="44">.</op:operator><name pos:line="2292" pos:column="45">Stfld</name></name></expr></argument>, <argument><expr><name><name pos:line="2292" pos:column="52">item</name><op:operator pos:line="2292" pos:column="56">.</op:operator><name pos:line="2292" pos:column="57">Field</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="2292" pos:column="65">// stack is now [target]</comment>
                        }</block></else></if>
                    }</block></then></if>

                    <expr_stmt><expr><call><name><name pos:line="2296" pos:column="21">il</name><op:operator pos:line="2296" pos:column="23">.</op:operator><name pos:line="2296" pos:column="24">Emit</name></name><argument_list pos:line="2296" pos:column="28">(<argument><expr><name><name pos:line="2296" pos:column="29">OpCodes</name><op:operator pos:line="2296" pos:column="36">.</op:operator><name pos:line="2296" pos:column="37">Br_S</name></name></expr></argument>, <argument><expr><name pos:line="2296" pos:column="43">finishLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="2296" pos:column="57">// stack is now [target]</comment>

                    <expr_stmt><expr><call><name><name pos:line="2298" pos:column="21">il</name><op:operator pos:line="2298" pos:column="23">.</op:operator><name pos:line="2298" pos:column="24">MarkLabel</name></name><argument_list pos:line="2298" pos:column="33">(<argument><expr><name pos:line="2298" pos:column="34">isDbNullLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="2298" pos:column="50">// incoming stack: [target][target][value]</comment>
                    <if pos:line="2299" pos:column="21">if <condition pos:line="2299" pos:column="24">(<expr><name pos:line="2299" pos:column="25">specializedConstructor</name> <op:operator pos:line="2299" pos:column="48">!=</op:operator> <name pos:line="2299" pos:column="51">null</name></expr>)</condition><then pos:line="2299" pos:column="56">
                    <block pos:line="2300" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="2301" pos:column="25">il</name><op:operator pos:line="2301" pos:column="27">.</op:operator><name pos:line="2301" pos:column="28">Emit</name></name><argument_list pos:line="2301" pos:column="32">(<argument><expr><name><name pos:line="2301" pos:column="33">OpCodes</name><op:operator pos:line="2301" pos:column="40">.</op:operator><name pos:line="2301" pos:column="41">Pop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if pos:line="2302" pos:column="25">if <condition pos:line="2302" pos:column="28">(<expr><name><name pos:line="2302" pos:column="29">item</name><op:operator pos:line="2302" pos:column="33">.</op:operator><name pos:line="2302" pos:column="34">MemberType</name><op:operator pos:line="2302" pos:column="44">.</op:operator><name pos:line="2302" pos:column="45">IsValueType</name></name></expr>)</condition><then pos:line="2302" pos:column="57">
                        <block pos:line="2303" pos:column="25">{
                            <decl_stmt><decl><type><name pos:line="2304" pos:column="29">int</name></type> <name pos:line="2304" pos:column="33">localIndex</name> <init pos:line="2304" pos:column="44">= <expr><call><name><name pos:line="2304" pos:column="46">il</name><op:operator pos:line="2304" pos:column="48">.</op:operator><name pos:line="2304" pos:column="49">DeclareLocal</name></name><argument_list pos:line="2304" pos:column="61">(<argument><expr><name><name pos:line="2304" pos:column="62">item</name><op:operator pos:line="2304" pos:column="66">.</op:operator><name pos:line="2304" pos:column="67">MemberType</name></name></expr></argument>)</argument_list></call><op:operator pos:line="2304" pos:column="78">.</op:operator><name pos:line="2304" pos:column="79">LocalIndex</name></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><call><name pos:line="2305" pos:column="29">LoadLocalAddress</name><argument_list pos:line="2305" pos:column="45">(<argument><expr><name pos:line="2305" pos:column="46">il</name></expr></argument>, <argument><expr><name pos:line="2305" pos:column="50">localIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name pos:line="2306" pos:column="29">il</name><op:operator pos:line="2306" pos:column="31">.</op:operator><name pos:line="2306" pos:column="32">Emit</name></name><argument_list pos:line="2306" pos:column="36">(<argument><expr><name><name pos:line="2306" pos:column="37">OpCodes</name><op:operator pos:line="2306" pos:column="44">.</op:operator><name pos:line="2306" pos:column="45">Initobj</name></name></expr></argument>, <argument><expr><name><name pos:line="2306" pos:column="54">item</name><op:operator pos:line="2306" pos:column="58">.</op:operator><name pos:line="2306" pos:column="59">MemberType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name pos:line="2307" pos:column="29">LoadLocal</name><argument_list pos:line="2307" pos:column="38">(<argument><expr><name pos:line="2307" pos:column="39">il</name></expr></argument>, <argument><expr><name pos:line="2307" pos:column="43">localIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then>
                        <else pos:line="2309" pos:column="25">else
                        <block pos:line="2310" pos:column="25">{
                            <expr_stmt><expr><call><name><name pos:line="2311" pos:column="29">il</name><op:operator pos:line="2311" pos:column="31">.</op:operator><name pos:line="2311" pos:column="32">Emit</name></name><argument_list pos:line="2311" pos:column="36">(<argument><expr><name><name pos:line="2311" pos:column="37">OpCodes</name><op:operator pos:line="2311" pos:column="44">.</op:operator><name pos:line="2311" pos:column="45">Ldnull</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></else></if>
                    }</block></then>
                    <else pos:line="2314" pos:column="21">else
                    <block pos:line="2315" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="2316" pos:column="25">il</name><op:operator pos:line="2316" pos:column="27">.</op:operator><name pos:line="2316" pos:column="28">Emit</name></name><argument_list pos:line="2316" pos:column="32">(<argument><expr><name><name pos:line="2316" pos:column="33">OpCodes</name><op:operator pos:line="2316" pos:column="40">.</op:operator><name pos:line="2316" pos:column="41">Pop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="2316" pos:column="47">// stack is now [target][target]</comment>
                        <expr_stmt><expr><call><name><name pos:line="2317" pos:column="25">il</name><op:operator pos:line="2317" pos:column="27">.</op:operator><name pos:line="2317" pos:column="28">Emit</name></name><argument_list pos:line="2317" pos:column="32">(<argument><expr><name><name pos:line="2317" pos:column="33">OpCodes</name><op:operator pos:line="2317" pos:column="40">.</op:operator><name pos:line="2317" pos:column="41">Pop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="2317" pos:column="47">// stack is now [target]</comment>
                    }</block></else></if>

                    <if pos:line="2320" pos:column="21">if <condition pos:line="2320" pos:column="24">(<expr><name pos:line="2320" pos:column="25">first</name> <op:operator pos:line="2320" pos:column="31">&amp;&amp;</op:operator> <name pos:line="2320" pos:column="34">returnNullIfFirstMissing</name></expr>)</condition><then pos:line="2320" pos:column="59">
                    <block pos:line="2321" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="2322" pos:column="25">il</name><op:operator pos:line="2322" pos:column="27">.</op:operator><name pos:line="2322" pos:column="28">Emit</name></name><argument_list pos:line="2322" pos:column="32">(<argument><expr><name><name pos:line="2322" pos:column="33">OpCodes</name><op:operator pos:line="2322" pos:column="40">.</op:operator><name pos:line="2322" pos:column="41">Pop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="2323" pos:column="25">il</name><op:operator pos:line="2323" pos:column="27">.</op:operator><name pos:line="2323" pos:column="28">Emit</name></name><argument_list pos:line="2323" pos:column="32">(<argument><expr><name><name pos:line="2323" pos:column="33">OpCodes</name><op:operator pos:line="2323" pos:column="40">.</op:operator><name pos:line="2323" pos:column="41">Ldnull</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="2323" pos:column="50">// stack is now [null]</comment>
                        <expr_stmt><expr><call><name><name pos:line="2324" pos:column="25">il</name><op:operator pos:line="2324" pos:column="27">.</op:operator><name pos:line="2324" pos:column="28">Emit</name></name><argument_list pos:line="2324" pos:column="32">(<argument><expr><name><name pos:line="2324" pos:column="33">OpCodes</name><op:operator pos:line="2324" pos:column="40">.</op:operator><name pos:line="2324" pos:column="41">Stloc_1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="2325" pos:column="25">il</name><op:operator pos:line="2325" pos:column="27">.</op:operator><name pos:line="2325" pos:column="28">Emit</name></name><argument_list pos:line="2325" pos:column="32">(<argument><expr><name><name pos:line="2325" pos:column="33">OpCodes</name><op:operator pos:line="2325" pos:column="40">.</op:operator><name pos:line="2325" pos:column="41">Br</name></name></expr></argument>, <argument><expr><name pos:line="2325" pos:column="45">allDone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>

                    <expr_stmt><expr><call><name><name pos:line="2328" pos:column="21">il</name><op:operator pos:line="2328" pos:column="23">.</op:operator><name pos:line="2328" pos:column="24">MarkLabel</name></name><argument_list pos:line="2328" pos:column="33">(<argument><expr><name pos:line="2328" pos:column="34">finishLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name pos:line="2330" pos:column="17">first</name> <op:operator pos:line="2330" pos:column="23">=</op:operator> <lit:literal type="boolean" pos:line="2330" pos:column="25">false</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="2331" pos:column="17">index</name> <op:operator pos:line="2331" pos:column="23">+=</op:operator> <lit:literal type="number" pos:line="2331" pos:column="26">1</lit:literal></expr>;</expr_stmt>
            }</block></foreach>
            <if pos:line="2333" pos:column="13">if <condition pos:line="2333" pos:column="16">(<expr><name><name pos:line="2333" pos:column="17">type</name><op:operator pos:line="2333" pos:column="21">.</op:operator><name pos:line="2333" pos:column="22">IsValueType</name></name></expr>)</condition><then pos:line="2333" pos:column="34">
            <block pos:line="2334" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="2335" pos:column="17">il</name><op:operator pos:line="2335" pos:column="19">.</op:operator><name pos:line="2335" pos:column="20">Emit</name></name><argument_list pos:line="2335" pos:column="24">(<argument><expr><name><name pos:line="2335" pos:column="25">OpCodes</name><op:operator pos:line="2335" pos:column="32">.</op:operator><name pos:line="2335" pos:column="33">Pop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else pos:line="2337" pos:column="13">else
            <block pos:line="2338" pos:column="13">{
                <if pos:line="2339" pos:column="17">if <condition pos:line="2339" pos:column="20">(<expr><name pos:line="2339" pos:column="21">specializedConstructor</name> <op:operator pos:line="2339" pos:column="44">!=</op:operator> <name pos:line="2339" pos:column="47">null</name></expr>)</condition><then pos:line="2339" pos:column="52">
                <block pos:line="2340" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="2341" pos:column="21">il</name><op:operator pos:line="2341" pos:column="23">.</op:operator><name pos:line="2341" pos:column="24">Emit</name></name><argument_list pos:line="2341" pos:column="28">(<argument><expr><name><name pos:line="2341" pos:column="29">OpCodes</name><op:operator pos:line="2341" pos:column="36">.</op:operator><name pos:line="2341" pos:column="37">Newobj</name></name></expr></argument>, <argument><expr><name pos:line="2341" pos:column="45">specializedConstructor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><call><name><name pos:line="2343" pos:column="17">il</name><op:operator pos:line="2343" pos:column="19">.</op:operator><name pos:line="2343" pos:column="20">Emit</name></name><argument_list pos:line="2343" pos:column="24">(<argument><expr><name><name pos:line="2343" pos:column="25">OpCodes</name><op:operator pos:line="2343" pos:column="32">.</op:operator><name pos:line="2343" pos:column="33">Stloc_1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="2343" pos:column="43">// stack is empty</comment>
            }</block></else></if>
            <expr_stmt><expr><call><name><name pos:line="2345" pos:column="13">il</name><op:operator pos:line="2345" pos:column="15">.</op:operator><name pos:line="2345" pos:column="16">MarkLabel</name></name><argument_list pos:line="2345" pos:column="25">(<argument><expr><name pos:line="2345" pos:column="26">allDone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="2346" pos:column="13">il</name><op:operator pos:line="2346" pos:column="15">.</op:operator><name pos:line="2346" pos:column="16">BeginCatchBlock</name></name><argument_list pos:line="2346" pos:column="31">(<argument><expr><call><name pos:line="2346" pos:column="32">typeof</name><argument_list pos:line="2346" pos:column="38">(<argument><expr><name pos:line="2346" pos:column="39">Exception</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="2346" pos:column="52">// stack is Exception</comment>
            <expr_stmt><expr><call><name><name pos:line="2347" pos:column="13">il</name><op:operator pos:line="2347" pos:column="15">.</op:operator><name pos:line="2347" pos:column="16">Emit</name></name><argument_list pos:line="2347" pos:column="20">(<argument><expr><name><name pos:line="2347" pos:column="21">OpCodes</name><op:operator pos:line="2347" pos:column="28">.</op:operator><name pos:line="2347" pos:column="29">Ldloc_0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="2347" pos:column="39">// stack is Exception, index</comment>
            <expr_stmt><expr><call><name><name pos:line="2348" pos:column="13">il</name><op:operator pos:line="2348" pos:column="15">.</op:operator><name pos:line="2348" pos:column="16">Emit</name></name><argument_list pos:line="2348" pos:column="20">(<argument><expr><name><name pos:line="2348" pos:column="21">OpCodes</name><op:operator pos:line="2348" pos:column="28">.</op:operator><name pos:line="2348" pos:column="29">Ldarg_0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="2348" pos:column="39">// stack is Exception, index, reader</comment>
            <expr_stmt><expr><call><name><name pos:line="2349" pos:column="13">il</name><op:operator pos:line="2349" pos:column="15">.</op:operator><name pos:line="2349" pos:column="16">EmitCall</name></name><argument_list pos:line="2349" pos:column="24">(<argument><expr><name><name pos:line="2349" pos:column="25">OpCodes</name><op:operator pos:line="2349" pos:column="32">.</op:operator><name pos:line="2349" pos:column="33">Call</name></name></expr></argument>, <argument><expr><call><name pos:line="2349" pos:column="39">typeof</name><argument_list pos:line="2349" pos:column="45">(<argument><expr><name pos:line="2349" pos:column="46">SqlMapper</name></expr></argument>)</argument_list></call><op:operator pos:line="2349" pos:column="56">.</op:operator><call><name pos:line="2349" pos:column="57">GetMethod</name><argument_list pos:line="2349" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="2349" pos:column="67">"ThrowDataException"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="2349" pos:column="90">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="2350" pos:column="13">il</name><op:operator pos:line="2350" pos:column="15">.</op:operator><name pos:line="2350" pos:column="16">EndExceptionBlock</name></name><argument_list pos:line="2350" pos:column="33">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="2352" pos:column="13">il</name><op:operator pos:line="2352" pos:column="15">.</op:operator><name pos:line="2352" pos:column="16">Emit</name></name><argument_list pos:line="2352" pos:column="20">(<argument><expr><name><name pos:line="2352" pos:column="21">OpCodes</name><op:operator pos:line="2352" pos:column="28">.</op:operator><name pos:line="2352" pos:column="29">Ldloc_1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="2352" pos:column="39">// stack is [rval]</comment>
            <if pos:line="2353" pos:column="13">if <condition pos:line="2353" pos:column="16">(<expr><name><name pos:line="2353" pos:column="17">type</name><op:operator pos:line="2353" pos:column="21">.</op:operator><name pos:line="2353" pos:column="22">IsValueType</name></name></expr>)</condition><then pos:line="2353" pos:column="34">
            <block pos:line="2354" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="2355" pos:column="17">il</name><op:operator pos:line="2355" pos:column="19">.</op:operator><name pos:line="2355" pos:column="20">Emit</name></name><argument_list pos:line="2355" pos:column="24">(<argument><expr><name><name pos:line="2355" pos:column="25">OpCodes</name><op:operator pos:line="2355" pos:column="32">.</op:operator><name pos:line="2355" pos:column="33">Box</name></name></expr></argument>, <argument><expr><name pos:line="2355" pos:column="38">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name pos:line="2357" pos:column="13">il</name><op:operator pos:line="2357" pos:column="15">.</op:operator><name pos:line="2357" pos:column="16">Emit</name></name><argument_list pos:line="2357" pos:column="20">(<argument><expr><name><name pos:line="2357" pos:column="21">OpCodes</name><op:operator pos:line="2357" pos:column="28">.</op:operator><name pos:line="2357" pos:column="29">Ret</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:line="2359" pos:column="13">return <expr><op:operator pos:line="2359" pos:column="20">(</op:operator><name><name pos:line="2359" pos:column="21">Func</name><argument_list pos:line="2359" pos:column="25">&lt;<argument><name pos:line="2359" pos:column="26">IDataReader</name></argument>, <argument><name pos:line="2359" pos:column="39">object</name></argument>&gt;</argument_list></name><op:operator pos:line="2359" pos:column="46">)</op:operator><call><name><name pos:line="2359" pos:column="47">dm</name><op:operator pos:line="2359" pos:column="49">.</op:operator><name pos:line="2359" pos:column="50">CreateDelegate</name></name><argument_list pos:line="2359" pos:column="64">(<argument><expr><call><name pos:line="2359" pos:column="65">typeof</name><argument_list pos:line="2359" pos:column="71">(<argument><expr><name><name pos:line="2359" pos:column="72">Func</name><argument_list pos:line="2359" pos:column="76">&lt;<argument><name pos:line="2359" pos:column="77">IDataReader</name></argument>, <argument><name pos:line="2359" pos:column="90">object</name></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="2362" pos:column="9">private</specifier> <specifier pos:line="2362" pos:column="17">static</specifier> <name pos:line="2362" pos:column="24">void</name></type> <name pos:line="2362" pos:column="29">LoadLocal</name><parameter_list pos:line="2362" pos:column="38">(<param><decl><type><name pos:line="2362" pos:column="39">ILGenerator</name></type> <name pos:line="2362" pos:column="51">il</name></decl></param>, <param><decl><type><name pos:line="2362" pos:column="55">int</name></type> <name pos:line="2362" pos:column="59">index</name></decl></param>)</parameter_list>
        <block pos:line="2363" pos:column="9">{
            <if pos:line="2364" pos:column="13">if <condition pos:line="2364" pos:column="16">(<expr><name><name pos:line="2364" pos:column="17">index</name> <argument_list pos:line="2364" pos:column="23">&lt; <argument><lit:literal type="number" pos:line="2364" pos:column="25">0</lit:literal> <op:operator pos:line="2364" pos:column="27">||</op:operator> <name pos:line="2364" pos:column="30">index</name></argument> &gt;</argument_list></name><op:operator pos:line="2364" pos:column="37">=</op:operator> <name><name pos:line="2364" pos:column="39">short</name><op:operator pos:line="2364" pos:column="44">.</op:operator><name pos:line="2364" pos:column="45">MaxValue</name></name></expr>)</condition><then pos:line="2364" pos:column="54"> <throw pos:line="2364" pos:column="55">throw <expr><op:operator pos:line="2364" pos:column="61">new</op:operator> <call><name pos:line="2364" pos:column="65">ArgumentNullException</name><argument_list pos:line="2364" pos:column="86">(<argument><expr><lit:literal type="string" pos:line="2364" pos:column="87">"index"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <switch pos:line="2365" pos:column="13">switch <condition pos:line="2365" pos:column="20">(<expr><name pos:line="2365" pos:column="21">index</name></expr>)</condition>
            <block pos:line="2366" pos:column="13">{
                <case pos:line="2367" pos:column="17">case <expr><lit:literal type="number" pos:line="2367" pos:column="22">0</lit:literal></expr>: <expr_stmt><expr><call><name><name pos:line="2367" pos:column="25">il</name><op:operator pos:line="2367" pos:column="27">.</op:operator><name pos:line="2367" pos:column="28">Emit</name></name><argument_list pos:line="2367" pos:column="32">(<argument><expr><name><name pos:line="2367" pos:column="33">OpCodes</name><op:operator pos:line="2367" pos:column="40">.</op:operator><name pos:line="2367" pos:column="41">Ldloc_0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:line="2367" pos:column="51">break;</break>
                </case><case pos:line="2368" pos:column="17">case <expr><lit:literal type="number" pos:line="2368" pos:column="22">1</lit:literal></expr>: <expr_stmt><expr><call><name><name pos:line="2368" pos:column="25">il</name><op:operator pos:line="2368" pos:column="27">.</op:operator><name pos:line="2368" pos:column="28">Emit</name></name><argument_list pos:line="2368" pos:column="32">(<argument><expr><name><name pos:line="2368" pos:column="33">OpCodes</name><op:operator pos:line="2368" pos:column="40">.</op:operator><name pos:line="2368" pos:column="41">Ldloc_1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:line="2368" pos:column="51">break;</break>
                </case><case pos:line="2369" pos:column="17">case <expr><lit:literal type="number" pos:line="2369" pos:column="22">2</lit:literal></expr>: <expr_stmt><expr><call><name><name pos:line="2369" pos:column="25">il</name><op:operator pos:line="2369" pos:column="27">.</op:operator><name pos:line="2369" pos:column="28">Emit</name></name><argument_list pos:line="2369" pos:column="32">(<argument><expr><name><name pos:line="2369" pos:column="33">OpCodes</name><op:operator pos:line="2369" pos:column="40">.</op:operator><name pos:line="2369" pos:column="41">Ldloc_2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:line="2369" pos:column="51">break;</break>
                </case><case pos:line="2370" pos:column="17">case <expr><lit:literal type="number" pos:line="2370" pos:column="22">3</lit:literal></expr>: <expr_stmt><expr><call><name><name pos:line="2370" pos:column="25">il</name><op:operator pos:line="2370" pos:column="27">.</op:operator><name pos:line="2370" pos:column="28">Emit</name></name><argument_list pos:line="2370" pos:column="32">(<argument><expr><name><name pos:line="2370" pos:column="33">OpCodes</name><op:operator pos:line="2370" pos:column="40">.</op:operator><name pos:line="2370" pos:column="41">Ldloc_3</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:line="2370" pos:column="51">break;</break>
                </case><default pos:line="2371" pos:column="17">default:
                    <if pos:line="2372" pos:column="21">if <condition pos:line="2372" pos:column="24">(<expr><name pos:line="2372" pos:column="25">index</name> <op:operator pos:line="2372" pos:column="31">&lt;=</op:operator> <lit:literal type="number" pos:line="2372" pos:column="34">255</lit:literal></expr>)</condition><then pos:line="2372" pos:column="38">
                    <block pos:line="2373" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="2374" pos:column="25">il</name><op:operator pos:line="2374" pos:column="27">.</op:operator><name pos:line="2374" pos:column="28">Emit</name></name><argument_list pos:line="2374" pos:column="32">(<argument><expr><name><name pos:line="2374" pos:column="33">OpCodes</name><op:operator pos:line="2374" pos:column="40">.</op:operator><name pos:line="2374" pos:column="41">Ldloc_S</name></name></expr></argument>, <argument><expr><op:operator pos:line="2374" pos:column="50">(</op:operator><name pos:line="2374" pos:column="51">byte</name><op:operator pos:line="2374" pos:column="55">)</op:operator><name pos:line="2374" pos:column="56">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else pos:line="2376" pos:column="21">else
                    <block pos:line="2377" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="2378" pos:column="25">il</name><op:operator pos:line="2378" pos:column="27">.</op:operator><name pos:line="2378" pos:column="28">Emit</name></name><argument_list pos:line="2378" pos:column="32">(<argument><expr><name><name pos:line="2378" pos:column="33">OpCodes</name><op:operator pos:line="2378" pos:column="40">.</op:operator><name pos:line="2378" pos:column="41">Ldloc</name></name></expr></argument>, <argument><expr><op:operator pos:line="2378" pos:column="48">(</op:operator><name pos:line="2378" pos:column="49">short</name><op:operator pos:line="2378" pos:column="54">)</op:operator><name pos:line="2378" pos:column="55">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                    <break pos:line="2380" pos:column="21">break;</break>
            </default>}</block></switch>
        }</block></function>
        <function><type><specifier pos:line="2383" pos:column="9">private</specifier> <specifier pos:line="2383" pos:column="17">static</specifier> <name pos:line="2383" pos:column="24">void</name></type> <name pos:line="2383" pos:column="29">StoreLocal</name><parameter_list pos:line="2383" pos:column="39">(<param><decl><type><name pos:line="2383" pos:column="40">ILGenerator</name></type> <name pos:line="2383" pos:column="52">il</name></decl></param>, <param><decl><type><name pos:line="2383" pos:column="56">int</name></type> <name pos:line="2383" pos:column="60">index</name></decl></param>)</parameter_list>
        <block pos:line="2384" pos:column="9">{
            <if pos:line="2385" pos:column="13">if <condition pos:line="2385" pos:column="16">(<expr><name><name pos:line="2385" pos:column="17">index</name> <argument_list pos:line="2385" pos:column="23">&lt; <argument><lit:literal type="number" pos:line="2385" pos:column="25">0</lit:literal> <op:operator pos:line="2385" pos:column="27">||</op:operator> <name pos:line="2385" pos:column="30">index</name></argument> &gt;</argument_list></name><op:operator pos:line="2385" pos:column="37">=</op:operator> <name><name pos:line="2385" pos:column="39">short</name><op:operator pos:line="2385" pos:column="44">.</op:operator><name pos:line="2385" pos:column="45">MaxValue</name></name></expr>)</condition><then pos:line="2385" pos:column="54"> <throw pos:line="2385" pos:column="55">throw <expr><op:operator pos:line="2385" pos:column="61">new</op:operator> <call><name pos:line="2385" pos:column="65">ArgumentNullException</name><argument_list pos:line="2385" pos:column="86">(<argument><expr><lit:literal type="string" pos:line="2385" pos:column="87">"index"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <switch pos:line="2386" pos:column="13">switch <condition pos:line="2386" pos:column="20">(<expr><name pos:line="2386" pos:column="21">index</name></expr>)</condition>
            <block pos:line="2387" pos:column="13">{
                <case pos:line="2388" pos:column="17">case <expr><lit:literal type="number" pos:line="2388" pos:column="22">0</lit:literal></expr>: <expr_stmt><expr><call><name><name pos:line="2388" pos:column="25">il</name><op:operator pos:line="2388" pos:column="27">.</op:operator><name pos:line="2388" pos:column="28">Emit</name></name><argument_list pos:line="2388" pos:column="32">(<argument><expr><name><name pos:line="2388" pos:column="33">OpCodes</name><op:operator pos:line="2388" pos:column="40">.</op:operator><name pos:line="2388" pos:column="41">Stloc_0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:line="2388" pos:column="51">break;</break>
                </case><case pos:line="2389" pos:column="17">case <expr><lit:literal type="number" pos:line="2389" pos:column="22">1</lit:literal></expr>: <expr_stmt><expr><call><name><name pos:line="2389" pos:column="25">il</name><op:operator pos:line="2389" pos:column="27">.</op:operator><name pos:line="2389" pos:column="28">Emit</name></name><argument_list pos:line="2389" pos:column="32">(<argument><expr><name><name pos:line="2389" pos:column="33">OpCodes</name><op:operator pos:line="2389" pos:column="40">.</op:operator><name pos:line="2389" pos:column="41">Stloc_1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:line="2389" pos:column="51">break;</break>
                </case><case pos:line="2390" pos:column="17">case <expr><lit:literal type="number" pos:line="2390" pos:column="22">2</lit:literal></expr>: <expr_stmt><expr><call><name><name pos:line="2390" pos:column="25">il</name><op:operator pos:line="2390" pos:column="27">.</op:operator><name pos:line="2390" pos:column="28">Emit</name></name><argument_list pos:line="2390" pos:column="32">(<argument><expr><name><name pos:line="2390" pos:column="33">OpCodes</name><op:operator pos:line="2390" pos:column="40">.</op:operator><name pos:line="2390" pos:column="41">Stloc_2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:line="2390" pos:column="51">break;</break>
                </case><case pos:line="2391" pos:column="17">case <expr><lit:literal type="number" pos:line="2391" pos:column="22">3</lit:literal></expr>: <expr_stmt><expr><call><name><name pos:line="2391" pos:column="25">il</name><op:operator pos:line="2391" pos:column="27">.</op:operator><name pos:line="2391" pos:column="28">Emit</name></name><argument_list pos:line="2391" pos:column="32">(<argument><expr><name><name pos:line="2391" pos:column="33">OpCodes</name><op:operator pos:line="2391" pos:column="40">.</op:operator><name pos:line="2391" pos:column="41">Stloc_3</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:line="2391" pos:column="51">break;</break>
                </case><default pos:line="2392" pos:column="17">default:
                    <if pos:line="2393" pos:column="21">if <condition pos:line="2393" pos:column="24">(<expr><name pos:line="2393" pos:column="25">index</name> <op:operator pos:line="2393" pos:column="31">&lt;=</op:operator> <lit:literal type="number" pos:line="2393" pos:column="34">255</lit:literal></expr>)</condition><then pos:line="2393" pos:column="38">
                    <block pos:line="2394" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="2395" pos:column="25">il</name><op:operator pos:line="2395" pos:column="27">.</op:operator><name pos:line="2395" pos:column="28">Emit</name></name><argument_list pos:line="2395" pos:column="32">(<argument><expr><name><name pos:line="2395" pos:column="33">OpCodes</name><op:operator pos:line="2395" pos:column="40">.</op:operator><name pos:line="2395" pos:column="41">Stloc_S</name></name></expr></argument>, <argument><expr><op:operator pos:line="2395" pos:column="50">(</op:operator><name pos:line="2395" pos:column="51">byte</name><op:operator pos:line="2395" pos:column="55">)</op:operator><name pos:line="2395" pos:column="56">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else pos:line="2397" pos:column="21">else
                    <block pos:line="2398" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="2399" pos:column="25">il</name><op:operator pos:line="2399" pos:column="27">.</op:operator><name pos:line="2399" pos:column="28">Emit</name></name><argument_list pos:line="2399" pos:column="32">(<argument><expr><name><name pos:line="2399" pos:column="33">OpCodes</name><op:operator pos:line="2399" pos:column="40">.</op:operator><name pos:line="2399" pos:column="41">Stloc</name></name></expr></argument>, <argument><expr><op:operator pos:line="2399" pos:column="48">(</op:operator><name pos:line="2399" pos:column="49">short</name><op:operator pos:line="2399" pos:column="54">)</op:operator><name pos:line="2399" pos:column="55">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                    <break pos:line="2401" pos:column="21">break;</break>
            </default>}</block></switch>
        }</block></function>
        <function><type><specifier pos:line="2404" pos:column="9">private</specifier> <specifier pos:line="2404" pos:column="17">static</specifier> <name pos:line="2404" pos:column="24">void</name></type> <name pos:line="2404" pos:column="29">LoadLocalAddress</name><parameter_list pos:line="2404" pos:column="45">(<param><decl><type><name pos:line="2404" pos:column="46">ILGenerator</name></type> <name pos:line="2404" pos:column="58">il</name></decl></param>, <param><decl><type><name pos:line="2404" pos:column="62">int</name></type> <name pos:line="2404" pos:column="66">index</name></decl></param>)</parameter_list>
        <block pos:line="2405" pos:column="9">{
            <if pos:line="2406" pos:column="13">if <condition pos:line="2406" pos:column="16">(<expr><name><name pos:line="2406" pos:column="17">index</name> <argument_list pos:line="2406" pos:column="23">&lt; <argument><lit:literal type="number" pos:line="2406" pos:column="25">0</lit:literal> <op:operator pos:line="2406" pos:column="27">||</op:operator> <name pos:line="2406" pos:column="30">index</name></argument> &gt;</argument_list></name><op:operator pos:line="2406" pos:column="37">=</op:operator> <name><name pos:line="2406" pos:column="39">short</name><op:operator pos:line="2406" pos:column="44">.</op:operator><name pos:line="2406" pos:column="45">MaxValue</name></name></expr>)</condition><then pos:line="2406" pos:column="54"> <throw pos:line="2406" pos:column="55">throw <expr><op:operator pos:line="2406" pos:column="61">new</op:operator> <call><name pos:line="2406" pos:column="65">ArgumentNullException</name><argument_list pos:line="2406" pos:column="86">(<argument><expr><lit:literal type="string" pos:line="2406" pos:column="87">"index"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <if pos:line="2408" pos:column="13">if <condition pos:line="2408" pos:column="16">(<expr><name pos:line="2408" pos:column="17">index</name> <op:operator pos:line="2408" pos:column="23">&lt;=</op:operator> <lit:literal type="number" pos:line="2408" pos:column="26">255</lit:literal></expr>)</condition><then pos:line="2408" pos:column="30">
            <block pos:line="2409" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="2410" pos:column="17">il</name><op:operator pos:line="2410" pos:column="19">.</op:operator><name pos:line="2410" pos:column="20">Emit</name></name><argument_list pos:line="2410" pos:column="24">(<argument><expr><name><name pos:line="2410" pos:column="25">OpCodes</name><op:operator pos:line="2410" pos:column="32">.</op:operator><name pos:line="2410" pos:column="33">Ldloca_S</name></name></expr></argument>, <argument><expr><op:operator pos:line="2410" pos:column="43">(</op:operator><name pos:line="2410" pos:column="44">byte</name><op:operator pos:line="2410" pos:column="48">)</op:operator><name pos:line="2410" pos:column="49">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else pos:line="2412" pos:column="13">else
            <block pos:line="2413" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="2414" pos:column="17">il</name><op:operator pos:line="2414" pos:column="19">.</op:operator><name pos:line="2414" pos:column="20">Emit</name></name><argument_list pos:line="2414" pos:column="24">(<argument><expr><name><name pos:line="2414" pos:column="25">OpCodes</name><op:operator pos:line="2414" pos:column="32">.</op:operator><name pos:line="2414" pos:column="33">Ldloca</name></name></expr></argument>, <argument><expr><op:operator pos:line="2414" pos:column="41">(</op:operator><name pos:line="2414" pos:column="42">short</name><op:operator pos:line="2414" pos:column="47">)</op:operator><name pos:line="2414" pos:column="48">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></function>
        <comment type="line" pos:line="2417" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="2418" pos:column="9">/// Throws a data exception, only used internally</comment>
        <comment type="line" pos:line="2419" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="2420" pos:column="9">/// &lt;param name="ex"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="2421" pos:column="9">/// &lt;param name="index"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="2422" pos:column="9">/// &lt;param name="reader"&gt;&lt;/param&gt;</comment>
        <function><type><specifier pos:line="2423" pos:column="9">public</specifier> <specifier pos:line="2423" pos:column="16">static</specifier> <name pos:line="2423" pos:column="23">void</name></type> <name pos:line="2423" pos:column="28">ThrowDataException</name><parameter_list pos:line="2423" pos:column="46">(<param><decl><type><name pos:line="2423" pos:column="47">Exception</name></type> <name pos:line="2423" pos:column="57">ex</name></decl></param>, <param><decl><type><name pos:line="2423" pos:column="61">int</name></type> <name pos:line="2423" pos:column="65">index</name></decl></param>, <param><decl><type><name pos:line="2423" pos:column="72">IDataReader</name></type> <name pos:line="2423" pos:column="84">reader</name></decl></param>)</parameter_list>
        <block pos:line="2424" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="2425" pos:column="13">Exception</name></type> <name pos:line="2425" pos:column="23">toThrow</name></decl>;</decl_stmt>
            <try pos:line="2426" pos:column="13">try
            <block pos:line="2427" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="2428" pos:column="17">string</name></type> <name pos:line="2428" pos:column="24">name</name> <init pos:line="2428" pos:column="29">= <expr><lit:literal type="string" pos:line="2428" pos:column="31">"(n/a)"</lit:literal></expr></init><op:operator pos:line="2428" pos:column="38">,</op:operator> <name pos:line="2428" pos:column="40">value</name> <init pos:line="2428" pos:column="46">= <expr><lit:literal type="string" pos:line="2428" pos:column="48">"(n/a)"</lit:literal></expr></init></decl>;</decl_stmt>
                <if pos:line="2429" pos:column="17">if <condition pos:line="2429" pos:column="20">(<expr><name pos:line="2429" pos:column="21">reader</name> <op:operator pos:line="2429" pos:column="28">!=</op:operator> <name pos:line="2429" pos:column="31">null</name> <op:operator pos:line="2429" pos:column="36">&amp;&amp;</op:operator> <name pos:line="2429" pos:column="39">index</name> <op:operator pos:line="2429" pos:column="45">&gt;=</op:operator> <lit:literal type="number" pos:line="2429" pos:column="48">0</lit:literal> <op:operator pos:line="2429" pos:column="50">&amp;&amp;</op:operator> <name pos:line="2429" pos:column="53">index</name> <op:operator pos:line="2429" pos:column="59">&lt;</op:operator> <name><name pos:line="2429" pos:column="61">reader</name><op:operator pos:line="2429" pos:column="67">.</op:operator><name pos:line="2429" pos:column="68">FieldCount</name></name></expr>)</condition><then pos:line="2429" pos:column="79">
                <block pos:line="2430" pos:column="17">{
                    <expr_stmt><expr><name pos:line="2431" pos:column="21">name</name> <op:operator pos:line="2431" pos:column="26">=</op:operator> <call><name><name pos:line="2431" pos:column="28">reader</name><op:operator pos:line="2431" pos:column="34">.</op:operator><name pos:line="2431" pos:column="35">GetName</name></name><argument_list pos:line="2431" pos:column="42">(<argument><expr><name pos:line="2431" pos:column="43">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name pos:line="2432" pos:column="21">object</name></type> <name pos:line="2432" pos:column="28">val</name> <init pos:line="2432" pos:column="32">= <expr><call><name><name pos:line="2432" pos:column="34">reader</name><op:operator pos:line="2432" pos:column="40">.</op:operator><name pos:line="2432" pos:column="41">GetValue</name></name><argument_list pos:line="2432" pos:column="49">(<argument><expr><name pos:line="2432" pos:column="50">index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if pos:line="2433" pos:column="21">if <condition pos:line="2433" pos:column="24">(<expr><name pos:line="2433" pos:column="25">val</name> <op:operator pos:line="2433" pos:column="29">==</op:operator> <name pos:line="2433" pos:column="32">null</name> <op:operator pos:line="2433" pos:column="37">||</op:operator> <name pos:line="2433" pos:column="40">val</name> <op:operator pos:line="2433" pos:column="44">is</op:operator> <name pos:line="2433" pos:column="47">DBNull</name></expr>)</condition><then pos:line="2433" pos:column="54">
                    <block pos:line="2434" pos:column="21">{
                        <expr_stmt><expr><name pos:line="2435" pos:column="25">value</name> <op:operator pos:line="2435" pos:column="31">=</op:operator> <lit:literal type="string" pos:line="2435" pos:column="33">"&lt;null&gt;"</lit:literal></expr>;</expr_stmt>
                    }</block></then>
                    <else pos:line="2437" pos:column="21">else
                    <block pos:line="2438" pos:column="21">{
                        <expr_stmt><expr><name pos:line="2439" pos:column="25">value</name> <op:operator pos:line="2439" pos:column="31">=</op:operator> <call><name><name pos:line="2439" pos:column="33">Convert</name><op:operator pos:line="2439" pos:column="40">.</op:operator><name pos:line="2439" pos:column="41">ToString</name></name><argument_list pos:line="2439" pos:column="49">(<argument><expr><name pos:line="2439" pos:column="50">val</name></expr></argument>)</argument_list></call> <op:operator pos:line="2439" pos:column="55">+</op:operator> <lit:literal type="string" pos:line="2439" pos:column="57">" - "</lit:literal> <op:operator pos:line="2439" pos:column="63">+</op:operator> <call><name><name pos:line="2439" pos:column="65">Type</name><op:operator pos:line="2439" pos:column="69">.</op:operator><name pos:line="2439" pos:column="70">GetTypeCode</name></name><argument_list pos:line="2439" pos:column="81">(<argument><expr><call><name><name pos:line="2439" pos:column="82">val</name><op:operator pos:line="2439" pos:column="85">.</op:operator><name pos:line="2439" pos:column="86">GetType</name></name><argument_list pos:line="2439" pos:column="93">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then></if>
                <expr_stmt><expr><name pos:line="2442" pos:column="17">toThrow</name> <op:operator pos:line="2442" pos:column="25">=</op:operator> <op:operator pos:line="2442" pos:column="27">new</op:operator> <call><name pos:line="2442" pos:column="31">DataException</name><argument_list pos:line="2442" pos:column="44">(<argument><expr><call><name><name pos:line="2442" pos:column="45">string</name><op:operator pos:line="2442" pos:column="51">.</op:operator><name pos:line="2442" pos:column="52">Format</name></name><argument_list pos:line="2442" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="2442" pos:column="59">"Error parsing column {0} ({1}={2})"</lit:literal></expr></argument>, <argument><expr><name pos:line="2442" pos:column="97">index</name></expr></argument>, <argument><expr><name pos:line="2442" pos:column="104">name</name></expr></argument>, <argument><expr><name pos:line="2442" pos:column="110">value</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="2442" pos:column="118">ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch pos:line="2444" pos:column="13">catch
            <block pos:line="2445" pos:column="13">{ <comment type="line" pos:line="2445" pos:column="15">// throw the **original** exception, wrapped as DataException</comment>
                <expr_stmt><expr><name pos:line="2446" pos:column="17">toThrow</name> <op:operator pos:line="2446" pos:column="25">=</op:operator> <op:operator pos:line="2446" pos:column="27">new</op:operator> <call><name pos:line="2446" pos:column="31">DataException</name><argument_list pos:line="2446" pos:column="44">(<argument><expr><name><name pos:line="2446" pos:column="45">ex</name><op:operator pos:line="2446" pos:column="47">.</op:operator><name pos:line="2446" pos:column="48">Message</name></name></expr></argument>, <argument><expr><name pos:line="2446" pos:column="57">ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
            <throw pos:line="2448" pos:column="13">throw <expr><name pos:line="2448" pos:column="19">toThrow</name></expr>;</throw>
        }</block></function>
        <function><type><specifier pos:line="2450" pos:column="9">private</specifier> <specifier pos:line="2450" pos:column="17">static</specifier> <name pos:line="2450" pos:column="24">void</name></type> <name pos:line="2450" pos:column="29">EmitInt32</name><parameter_list pos:line="2450" pos:column="38">(<param><decl><type><name pos:line="2450" pos:column="39">ILGenerator</name></type> <name pos:line="2450" pos:column="51">il</name></decl></param>, <param><decl><type><name pos:line="2450" pos:column="55">int</name></type> <name pos:line="2450" pos:column="59">value</name></decl></param>)</parameter_list>
        <block pos:line="2451" pos:column="9">{
            <switch pos:line="2452" pos:column="13">switch <condition pos:line="2452" pos:column="20">(<expr><name pos:line="2452" pos:column="21">value</name></expr>)</condition>
            <block pos:line="2453" pos:column="13">{
                <case pos:line="2454" pos:column="17">case <expr><op:operator pos:line="2454" pos:column="22">-</op:operator><lit:literal type="number" pos:line="2454" pos:column="23">1</lit:literal></expr>: <expr_stmt><expr><call><name><name pos:line="2454" pos:column="26">il</name><op:operator pos:line="2454" pos:column="28">.</op:operator><name pos:line="2454" pos:column="29">Emit</name></name><argument_list pos:line="2454" pos:column="33">(<argument><expr><name><name pos:line="2454" pos:column="34">OpCodes</name><op:operator pos:line="2454" pos:column="41">.</op:operator><name pos:line="2454" pos:column="42">Ldc_I4_M1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:line="2454" pos:column="54">break;</break>
                </case><case pos:line="2455" pos:column="17">case <expr><lit:literal type="number" pos:line="2455" pos:column="22">0</lit:literal></expr>: <expr_stmt><expr><call><name><name pos:line="2455" pos:column="25">il</name><op:operator pos:line="2455" pos:column="27">.</op:operator><name pos:line="2455" pos:column="28">Emit</name></name><argument_list pos:line="2455" pos:column="32">(<argument><expr><name><name pos:line="2455" pos:column="33">OpCodes</name><op:operator pos:line="2455" pos:column="40">.</op:operator><name pos:line="2455" pos:column="41">Ldc_I4_0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:line="2455" pos:column="52">break;</break>
                </case><case pos:line="2456" pos:column="17">case <expr><lit:literal type="number" pos:line="2456" pos:column="22">1</lit:literal></expr>: <expr_stmt><expr><call><name><name pos:line="2456" pos:column="25">il</name><op:operator pos:line="2456" pos:column="27">.</op:operator><name pos:line="2456" pos:column="28">Emit</name></name><argument_list pos:line="2456" pos:column="32">(<argument><expr><name><name pos:line="2456" pos:column="33">OpCodes</name><op:operator pos:line="2456" pos:column="40">.</op:operator><name pos:line="2456" pos:column="41">Ldc_I4_1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:line="2456" pos:column="52">break;</break>
                </case><case pos:line="2457" pos:column="17">case <expr><lit:literal type="number" pos:line="2457" pos:column="22">2</lit:literal></expr>: <expr_stmt><expr><call><name><name pos:line="2457" pos:column="25">il</name><op:operator pos:line="2457" pos:column="27">.</op:operator><name pos:line="2457" pos:column="28">Emit</name></name><argument_list pos:line="2457" pos:column="32">(<argument><expr><name><name pos:line="2457" pos:column="33">OpCodes</name><op:operator pos:line="2457" pos:column="40">.</op:operator><name pos:line="2457" pos:column="41">Ldc_I4_2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:line="2457" pos:column="52">break;</break>
                </case><case pos:line="2458" pos:column="17">case <expr><lit:literal type="number" pos:line="2458" pos:column="22">3</lit:literal></expr>: <expr_stmt><expr><call><name><name pos:line="2458" pos:column="25">il</name><op:operator pos:line="2458" pos:column="27">.</op:operator><name pos:line="2458" pos:column="28">Emit</name></name><argument_list pos:line="2458" pos:column="32">(<argument><expr><name><name pos:line="2458" pos:column="33">OpCodes</name><op:operator pos:line="2458" pos:column="40">.</op:operator><name pos:line="2458" pos:column="41">Ldc_I4_3</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:line="2458" pos:column="52">break;</break>
                </case><case pos:line="2459" pos:column="17">case <expr><lit:literal type="number" pos:line="2459" pos:column="22">4</lit:literal></expr>: <expr_stmt><expr><call><name><name pos:line="2459" pos:column="25">il</name><op:operator pos:line="2459" pos:column="27">.</op:operator><name pos:line="2459" pos:column="28">Emit</name></name><argument_list pos:line="2459" pos:column="32">(<argument><expr><name><name pos:line="2459" pos:column="33">OpCodes</name><op:operator pos:line="2459" pos:column="40">.</op:operator><name pos:line="2459" pos:column="41">Ldc_I4_4</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:line="2459" pos:column="52">break;</break>
                </case><case pos:line="2460" pos:column="17">case <expr><lit:literal type="number" pos:line="2460" pos:column="22">5</lit:literal></expr>: <expr_stmt><expr><call><name><name pos:line="2460" pos:column="25">il</name><op:operator pos:line="2460" pos:column="27">.</op:operator><name pos:line="2460" pos:column="28">Emit</name></name><argument_list pos:line="2460" pos:column="32">(<argument><expr><name><name pos:line="2460" pos:column="33">OpCodes</name><op:operator pos:line="2460" pos:column="40">.</op:operator><name pos:line="2460" pos:column="41">Ldc_I4_5</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:line="2460" pos:column="52">break;</break>
                </case><case pos:line="2461" pos:column="17">case <expr><lit:literal type="number" pos:line="2461" pos:column="22">6</lit:literal></expr>: <expr_stmt><expr><call><name><name pos:line="2461" pos:column="25">il</name><op:operator pos:line="2461" pos:column="27">.</op:operator><name pos:line="2461" pos:column="28">Emit</name></name><argument_list pos:line="2461" pos:column="32">(<argument><expr><name><name pos:line="2461" pos:column="33">OpCodes</name><op:operator pos:line="2461" pos:column="40">.</op:operator><name pos:line="2461" pos:column="41">Ldc_I4_6</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:line="2461" pos:column="52">break;</break>
                </case><case pos:line="2462" pos:column="17">case <expr><lit:literal type="number" pos:line="2462" pos:column="22">7</lit:literal></expr>: <expr_stmt><expr><call><name><name pos:line="2462" pos:column="25">il</name><op:operator pos:line="2462" pos:column="27">.</op:operator><name pos:line="2462" pos:column="28">Emit</name></name><argument_list pos:line="2462" pos:column="32">(<argument><expr><name><name pos:line="2462" pos:column="33">OpCodes</name><op:operator pos:line="2462" pos:column="40">.</op:operator><name pos:line="2462" pos:column="41">Ldc_I4_7</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:line="2462" pos:column="52">break;</break>
                </case><case pos:line="2463" pos:column="17">case <expr><lit:literal type="number" pos:line="2463" pos:column="22">8</lit:literal></expr>: <expr_stmt><expr><call><name><name pos:line="2463" pos:column="25">il</name><op:operator pos:line="2463" pos:column="27">.</op:operator><name pos:line="2463" pos:column="28">Emit</name></name><argument_list pos:line="2463" pos:column="32">(<argument><expr><name><name pos:line="2463" pos:column="33">OpCodes</name><op:operator pos:line="2463" pos:column="40">.</op:operator><name pos:line="2463" pos:column="41">Ldc_I4_8</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:line="2463" pos:column="52">break;</break>
                </case><default pos:line="2464" pos:column="17">default:
                    <if pos:line="2465" pos:column="21">if <condition pos:line="2465" pos:column="24">(<expr><name pos:line="2465" pos:column="25">value</name> <op:operator pos:line="2465" pos:column="31">&gt;=</op:operator> <op:operator pos:line="2465" pos:column="34">-</op:operator><lit:literal type="number" pos:line="2465" pos:column="35">128</lit:literal> <op:operator pos:line="2465" pos:column="39">&amp;&amp;</op:operator> <name pos:line="2465" pos:column="42">value</name> <op:operator pos:line="2465" pos:column="48">&lt;=</op:operator> <lit:literal type="number" pos:line="2465" pos:column="51">127</lit:literal></expr>)</condition><then pos:line="2465" pos:column="55">
                    <block pos:line="2466" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="2467" pos:column="25">il</name><op:operator pos:line="2467" pos:column="27">.</op:operator><name pos:line="2467" pos:column="28">Emit</name></name><argument_list pos:line="2467" pos:column="32">(<argument><expr><name><name pos:line="2467" pos:column="33">OpCodes</name><op:operator pos:line="2467" pos:column="40">.</op:operator><name pos:line="2467" pos:column="41">Ldc_I4_S</name></name></expr></argument>, <argument><expr><op:operator pos:line="2467" pos:column="51">(</op:operator><name pos:line="2467" pos:column="52">sbyte</name><op:operator pos:line="2467" pos:column="57">)</op:operator><name pos:line="2467" pos:column="58">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else pos:line="2469" pos:column="21">else
                    <block pos:line="2470" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="2471" pos:column="25">il</name><op:operator pos:line="2471" pos:column="27">.</op:operator><name pos:line="2471" pos:column="28">Emit</name></name><argument_list pos:line="2471" pos:column="32">(<argument><expr><name><name pos:line="2471" pos:column="33">OpCodes</name><op:operator pos:line="2471" pos:column="40">.</op:operator><name pos:line="2471" pos:column="41">Ldc_I4</name></name></expr></argument>, <argument><expr><name pos:line="2471" pos:column="49">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                    <break pos:line="2473" pos:column="21">break;</break>
            </default>}</block></switch>
        }</block></function>

        <comment type="line" pos:line="2477" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="2478" pos:column="9">/// The grid reader provides interfaces for reading multiple result sets from a Dapper query </comment>
        <comment type="line" pos:line="2479" pos:column="9">/// &lt;/summary&gt;</comment>
        <class><specifier pos:line="2480" pos:column="9">public</specifier> <specifier pos:line="2480" pos:column="16">partial</specifier> class <name pos:line="2480" pos:column="30">GridReader</name> <super pos:line="2480" pos:column="41">: <name pos:line="2480" pos:column="43">IDisposable</name></super>
        <block pos:line="2481" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="2482" pos:column="13">private</specifier> <name pos:line="2482" pos:column="21">IDataReader</name></type> <name pos:line="2482" pos:column="33">reader</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="2483" pos:column="13">private</specifier> <name pos:line="2483" pos:column="21">IDbCommand</name></type> <name pos:line="2483" pos:column="32">command</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="2484" pos:column="13">private</specifier> <name pos:line="2484" pos:column="21">Identity</name></type> <name pos:line="2484" pos:column="30">identity</name></decl>;</decl_stmt>

            <constructor><specifier pos:line="2486" pos:column="13">internal</specifier> <name pos:line="2486" pos:column="22">GridReader</name><parameter_list pos:line="2486" pos:column="32">(<param><decl><type><name pos:line="2486" pos:column="33">IDbCommand</name></type> <name pos:line="2486" pos:column="44">command</name></decl></param>, <param><decl><type><name pos:line="2486" pos:column="53">IDataReader</name></type> <name pos:line="2486" pos:column="65">reader</name></decl></param>, <param><decl><type><name pos:line="2486" pos:column="73">Identity</name></type> <name pos:line="2486" pos:column="82">identity</name></decl></param>)</parameter_list>
            <block pos:line="2487" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="2488" pos:column="17">this</name><op:operator pos:line="2488" pos:column="21">.</op:operator><name pos:line="2488" pos:column="22">command</name></name> <op:operator pos:line="2488" pos:column="30">=</op:operator> <name pos:line="2488" pos:column="32">command</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="2489" pos:column="17">this</name><op:operator pos:line="2489" pos:column="21">.</op:operator><name pos:line="2489" pos:column="22">reader</name></name> <op:operator pos:line="2489" pos:column="29">=</op:operator> <name pos:line="2489" pos:column="31">reader</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="2490" pos:column="17">this</name><op:operator pos:line="2490" pos:column="21">.</op:operator><name pos:line="2490" pos:column="22">identity</name></name> <op:operator pos:line="2490" pos:column="31">=</op:operator> <name pos:line="2490" pos:column="33">identity</name></expr>;</expr_stmt>
            }</block></constructor>

<cpp:if pos:line="2493" pos:column="1">#<cpp:directive pos:line="2493" pos:column="2">if</cpp:directive> <expr><op:operator pos:line="2493" pos:column="5">!</op:operator><name pos:line="2493" pos:column="6">CSHARP30</name></expr></cpp:if>

            <comment type="line" pos:line="2495" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="2496" pos:column="13">/// Read the next grid of results, returned as a dynamic object</comment>
            <comment type="line" pos:line="2497" pos:column="13">/// &lt;/summary&gt;</comment>
            <function><type><specifier pos:line="2498" pos:column="13">public</specifier> <name><name pos:line="2498" pos:column="20">IEnumerable</name><argument_list pos:line="2498" pos:column="31">&lt;<argument><name pos:line="2498" pos:column="32">dynamic</name></argument>&gt;</argument_list></name></type> <name pos:line="2498" pos:column="41">Read</name><parameter_list pos:line="2498" pos:column="45">(<param><decl><type><name pos:line="2498" pos:column="46">bool</name></type> <name pos:line="2498" pos:column="51">buffered</name> <init pos:line="2498" pos:column="60">= <expr><lit:literal type="boolean" pos:line="2498" pos:column="62">true</lit:literal></expr></init></decl></param>)</parameter_list>
            <block pos:line="2499" pos:column="13">{
                <return pos:line="2500" pos:column="17">return <expr><call><name><name pos:line="2500" pos:column="24">Read</name><argument_list pos:line="2500" pos:column="28">&lt;<argument><name pos:line="2500" pos:column="29">DapperRow</name></argument>&gt;</argument_list></name><argument_list pos:line="2500" pos:column="39">(<argument><expr><name pos:line="2500" pos:column="40">buffered</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
<cpp:endif pos:line="2502" pos:column="1">#<cpp:directive pos:line="2502" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:if pos:line="2504" pos:column="1">#<cpp:directive pos:line="2504" pos:column="2">if</cpp:directive> <expr><name pos:line="2504" pos:column="5">CSHARP30</name></expr></cpp:if>
            <comment type="line" pos:line="2505" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="2506" pos:column="13">/// Read the next grid of results</comment>
            <comment type="line" pos:line="2507" pos:column="13">/// &lt;/summary&gt;</comment>
            <function><type><specifier pos:line="2508" pos:column="13">public</specifier> <name><name pos:line="2508" pos:column="20">IEnumerable</name><argument_list pos:line="2508" pos:column="31">&lt;<argument><name pos:line="2508" pos:column="32">T</name></argument>&gt;</argument_list></name></type> <name><name pos:line="2508" pos:column="35">Read</name><argument_list pos:line="2508" pos:column="39">&lt;<argument><name pos:line="2508" pos:column="40">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="2508" pos:column="42">()</parameter_list>
            <block pos:line="2509" pos:column="13">{
                <return pos:line="2510" pos:column="17">return <expr><call><name><name pos:line="2510" pos:column="24">Read</name><argument_list pos:line="2510" pos:column="28">&lt;<argument><name pos:line="2510" pos:column="29">T</name></argument>&gt;</argument_list></name><argument_list pos:line="2510" pos:column="31">(<argument><expr><lit:literal type="boolean" pos:line="2510" pos:column="32">true</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
<cpp:endif pos:line="2512" pos:column="1">#<cpp:directive pos:line="2512" pos:column="2">endif</cpp:directive></cpp:endif>
            <comment type="line" pos:line="2513" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="2514" pos:column="13">/// Read the next grid of results</comment>
            <comment type="line" pos:line="2515" pos:column="13">/// &lt;/summary&gt;</comment>
<cpp:if pos:line="2516" pos:column="1">#<cpp:directive pos:line="2516" pos:column="2">if</cpp:directive> <expr><name pos:line="2516" pos:column="5">CSHARP30</name></expr></cpp:if>
            <function><type><specifier pos:line="2517" pos:column="13">public</specifier> <name><name pos:line="2517" pos:column="20">IEnumerable</name><argument_list pos:line="2517" pos:column="31">&lt;<argument><name pos:line="2517" pos:column="32">T</name></argument>&gt;</argument_list></name></type> <name><name pos:line="2517" pos:column="35">Read</name><argument_list pos:line="2517" pos:column="39">&lt;<argument><name pos:line="2517" pos:column="40">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="2517" pos:column="42">(<param><decl><type><name pos:line="2517" pos:column="43">bool</name></type> <name pos:line="2517" pos:column="48">buffered</name></decl></param>)</parameter_list>
<cpp:else pos:line="2518" pos:column="1">#<cpp:directive pos:line="2518" pos:column="2">else</cpp:directive></cpp:else>
            <specifier pos:line="2519" pos:column="13">public</specifier> <name><name pos:line="2519" pos:column="20">IEnumerable</name><argument_list pos:line="2519" pos:column="31">&lt;<argument><name pos:line="2519" pos:column="32">T</name></argument>&gt;</argument_list></name> <name><name pos:line="2519" pos:column="35">Read</name><argument_list pos:line="2519" pos:column="39">&lt;<argument><name pos:line="2519" pos:column="40">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="2519" pos:column="42">(<param><decl><type><name pos:line="2519" pos:column="43">bool</name></type> <name pos:line="2519" pos:column="48">buffered</name> <init pos:line="2519" pos:column="57">= <expr><lit:literal type="boolean" pos:line="2519" pos:column="59">true</lit:literal></expr></init></decl></param>)</parameter_list>
<cpp:endif pos:line="2520" pos:column="1">#<cpp:directive pos:line="2520" pos:column="2">endif</cpp:directive></cpp:endif>
            <block pos:line="2521" pos:column="13">{
                <if pos:line="2522" pos:column="17">if <condition pos:line="2522" pos:column="20">(<expr><name pos:line="2522" pos:column="21">reader</name> <op:operator pos:line="2522" pos:column="28">==</op:operator> <name pos:line="2522" pos:column="31">null</name></expr>)</condition><then pos:line="2522" pos:column="36"> <throw pos:line="2522" pos:column="37">throw <expr><op:operator pos:line="2522" pos:column="43">new</op:operator> <call><name pos:line="2522" pos:column="47">ObjectDisposedException</name><argument_list pos:line="2522" pos:column="70">(<argument><expr><call><name pos:line="2522" pos:column="71">GetType</name><argument_list pos:line="2522" pos:column="78">()</argument_list></call><op:operator pos:line="2522" pos:column="80">.</op:operator><name pos:line="2522" pos:column="81">FullName</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="2522" pos:column="91">"The reader has been disposed; this can happen after all data has been consumed"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
                <if pos:line="2523" pos:column="17">if <condition pos:line="2523" pos:column="20">(<expr><name pos:line="2523" pos:column="21">consumed</name></expr>)</condition><then pos:line="2523" pos:column="30"> <throw pos:line="2523" pos:column="31">throw <expr><op:operator pos:line="2523" pos:column="37">new</op:operator> <call><name pos:line="2523" pos:column="41">InvalidOperationException</name><argument_list pos:line="2523" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="2523" pos:column="67">"Query results must be consumed in the correct order, and each result can only be consumed once"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
                <decl_stmt><decl><type><name pos:line="2524" pos:column="17">var</name></type> <name pos:line="2524" pos:column="21">typedIdentity</name> <init pos:line="2524" pos:column="35">= <expr><call><name><name pos:line="2524" pos:column="37">identity</name><op:operator pos:line="2524" pos:column="45">.</op:operator><name pos:line="2524" pos:column="46">ForGrid</name></name><argument_list pos:line="2524" pos:column="53">(<argument><expr><call><name pos:line="2524" pos:column="54">typeof</name><argument_list pos:line="2524" pos:column="60">(<argument><expr><name pos:line="2524" pos:column="61">T</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="2524" pos:column="65">gridIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="2525" pos:column="17">CacheInfo</name></type> <name pos:line="2525" pos:column="27">cache</name> <init pos:line="2525" pos:column="33">= <expr><call><name pos:line="2525" pos:column="35">GetCacheInfo</name><argument_list pos:line="2525" pos:column="47">(<argument><expr><name pos:line="2525" pos:column="48">typedIdentity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="2526" pos:column="17">var</name></type> <name pos:line="2526" pos:column="21">deserializer</name> <init pos:line="2526" pos:column="34">= <expr><name><name pos:line="2526" pos:column="36">cache</name><op:operator pos:line="2526" pos:column="41">.</op:operator><name pos:line="2526" pos:column="42">Deserializer</name></name></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name pos:line="2528" pos:column="17">int</name></type> <name pos:line="2528" pos:column="21">hash</name> <init pos:line="2528" pos:column="26">= <expr><call><name pos:line="2528" pos:column="28">GetColumnHash</name><argument_list pos:line="2528" pos:column="41">(<argument><expr><name pos:line="2528" pos:column="42">reader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="2529" pos:column="17">if <condition pos:line="2529" pos:column="20">(<expr><name><name pos:line="2529" pos:column="21">deserializer</name><op:operator pos:line="2529" pos:column="33">.</op:operator><name pos:line="2529" pos:column="34">Func</name></name> <op:operator pos:line="2529" pos:column="39">==</op:operator> <name pos:line="2529" pos:column="42">null</name> <op:operator pos:line="2529" pos:column="47">||</op:operator> <name><name pos:line="2529" pos:column="50">deserializer</name><op:operator pos:line="2529" pos:column="62">.</op:operator><name pos:line="2529" pos:column="63">Hash</name></name> <op:operator pos:line="2529" pos:column="68">!=</op:operator> <name pos:line="2529" pos:column="71">hash</name></expr>)</condition><then pos:line="2529" pos:column="76">
                <block pos:line="2530" pos:column="17">{
                    <expr_stmt><expr><name pos:line="2531" pos:column="21">deserializer</name> <op:operator pos:line="2531" pos:column="34">=</op:operator> <op:operator pos:line="2531" pos:column="36">new</op:operator> <call><name pos:line="2531" pos:column="40">DeserializerState</name><argument_list pos:line="2531" pos:column="57">(<argument><expr><name pos:line="2531" pos:column="58">hash</name></expr></argument>, <argument><expr><call><name pos:line="2531" pos:column="64">GetDeserializer</name><argument_list pos:line="2531" pos:column="79">(<argument><expr><call><name pos:line="2531" pos:column="80">typeof</name><argument_list pos:line="2531" pos:column="86">(<argument><expr><name pos:line="2531" pos:column="87">T</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="2531" pos:column="91">reader</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2531" pos:column="99">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="2531" pos:column="102">-</op:operator><lit:literal type="number" pos:line="2531" pos:column="103">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="2531" pos:column="106">false</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="2532" pos:column="21">cache</name><op:operator pos:line="2532" pos:column="26">.</op:operator><name pos:line="2532" pos:column="27">Deserializer</name></name> <op:operator pos:line="2532" pos:column="40">=</op:operator> <name pos:line="2532" pos:column="42">deserializer</name></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name pos:line="2534" pos:column="17">consumed</name> <op:operator pos:line="2534" pos:column="26">=</op:operator> <lit:literal type="boolean" pos:line="2534" pos:column="28">true</lit:literal></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="2535" pos:column="17">var</name></type> <name pos:line="2535" pos:column="21">result</name> <init pos:line="2535" pos:column="28">= <expr><call><name><name pos:line="2535" pos:column="30">ReadDeferred</name><argument_list pos:line="2535" pos:column="42">&lt;<argument><name pos:line="2535" pos:column="43">T</name></argument>&gt;</argument_list></name><argument_list pos:line="2535" pos:column="45">(<argument><expr><name pos:line="2535" pos:column="46">gridIndex</name></expr></argument>, <argument><expr><name><name pos:line="2535" pos:column="57">deserializer</name><op:operator pos:line="2535" pos:column="69">.</op:operator><name pos:line="2535" pos:column="70">Func</name></name></expr></argument>, <argument><expr><name pos:line="2535" pos:column="76">typedIdentity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return pos:line="2536" pos:column="17">return <expr><name pos:line="2536" pos:column="24">buffered</name> <op:operator pos:line="2536" pos:column="33">?</op:operator> <call><name><name pos:line="2536" pos:column="35">result</name><op:operator pos:line="2536" pos:column="41">.</op:operator><name pos:line="2536" pos:column="42">ToList</name></name><argument_list pos:line="2536" pos:column="48">()</argument_list></call> <op:operator pos:line="2536" pos:column="51">:</op:operator> <name pos:line="2536" pos:column="53">result</name></expr>;</return>
            }</block></function>

            <function><type><specifier pos:line="2539" pos:column="13">private</specifier> <name><name pos:line="2539" pos:column="21">IEnumerable</name><argument_list pos:line="2539" pos:column="32">&lt;<argument><name pos:line="2539" pos:column="33">TReturn</name></argument>&gt;</argument_list></name></type> <name><name pos:line="2539" pos:column="42">MultiReadInternal</name><argument_list pos:line="2539" pos:column="59">&lt;<argument><name pos:line="2539" pos:column="60">TFirst</name></argument>, <argument><name pos:line="2539" pos:column="68">TSecond</name></argument>, <argument><name pos:line="2539" pos:column="77">TThird</name></argument>, <argument><name pos:line="2539" pos:column="85">TFourth</name></argument>, <argument><name pos:line="2539" pos:column="94">TFifth</name></argument>, <argument><name pos:line="2539" pos:column="102">TReturn</name></argument>&gt;</argument_list></name><parameter_list pos:line="2539" pos:column="110">(<param><decl><type><name pos:line="2539" pos:column="111">object</name></type> <name pos:line="2539" pos:column="118">func</name></decl></param>, <param><decl><type><name pos:line="2539" pos:column="124">string</name></type> <name pos:line="2539" pos:column="131">splitOn</name></decl></param>)</parameter_list>
            <block pos:line="2540" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="2541" pos:column="17">var</name></type> <name pos:line="2541" pos:column="21">identity</name> <init pos:line="2541" pos:column="30">= <expr><call><name><name pos:line="2541" pos:column="32">this</name><op:operator pos:line="2541" pos:column="36">.</op:operator><name pos:line="2541" pos:column="37">identity</name><op:operator pos:line="2541" pos:column="45">.</op:operator><name pos:line="2541" pos:column="46">ForGrid</name></name><argument_list pos:line="2541" pos:column="53">(<argument><expr><call><name pos:line="2541" pos:column="54">typeof</name><argument_list pos:line="2541" pos:column="60">(<argument><expr><name pos:line="2541" pos:column="61">TReturn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="2541" pos:column="71">new</op:operator> <name><name pos:line="2541" pos:column="75">Type</name><index pos:line="2541" pos:column="79">[]</index></name> <block pos:line="2541" pos:column="82">{ 
                    <expr><call><name pos:line="2542" pos:column="21">typeof</name><argument_list pos:line="2542" pos:column="27">(<argument><expr><name pos:line="2542" pos:column="28">TFirst</name></expr></argument>)</argument_list></call></expr>, 
                    <expr><call><name pos:line="2543" pos:column="21">typeof</name><argument_list pos:line="2543" pos:column="27">(<argument><expr><name pos:line="2543" pos:column="28">TSecond</name></expr></argument>)</argument_list></call></expr>,
                    <expr><call><name pos:line="2544" pos:column="21">typeof</name><argument_list pos:line="2544" pos:column="27">(<argument><expr><name pos:line="2544" pos:column="28">TThird</name></expr></argument>)</argument_list></call></expr>,
                    <expr><call><name pos:line="2545" pos:column="21">typeof</name><argument_list pos:line="2545" pos:column="27">(<argument><expr><name pos:line="2545" pos:column="28">TFourth</name></expr></argument>)</argument_list></call></expr>,
                    <expr><call><name pos:line="2546" pos:column="21">typeof</name><argument_list pos:line="2546" pos:column="27">(<argument><expr><name pos:line="2546" pos:column="28">TFifth</name></expr></argument>)</argument_list></call></expr>
                }</block></expr></argument>, <argument><expr><name pos:line="2547" pos:column="20">gridIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <try pos:line="2548" pos:column="17">try
                <block pos:line="2549" pos:column="17">{
                    <foreach pos:line="2550" pos:column="21">foreach (<init><decl><type><name pos:line="2550" pos:column="30">var</name></type> <name pos:line="2550" pos:column="34">r</name> <range pos:line="2550" pos:column="36">in <expr><call><name><name pos:line="2550" pos:column="39">SqlMapper</name><op:operator pos:line="2550" pos:column="48">.</op:operator><name><name pos:line="2550" pos:column="49">MultiMapImpl</name><argument_list pos:line="2550" pos:column="61">&lt;<argument><name pos:line="2550" pos:column="62">TFirst</name></argument>, <argument><name pos:line="2550" pos:column="70">TSecond</name></argument>, <argument><name pos:line="2550" pos:column="79">TThird</name></argument>, <argument><name pos:line="2550" pos:column="87">TFourth</name></argument>, <argument><name pos:line="2550" pos:column="96">TFifth</name></argument>, <argument><name pos:line="2550" pos:column="104">TReturn</name></argument>&gt;</argument_list></name></name><argument_list pos:line="2550" pos:column="112">(<argument><expr><name pos:line="2550" pos:column="113">null</name></expr></argument>, <argument><expr><name pos:line="2550" pos:column="119">null</name></expr></argument>, <argument><expr><name pos:line="2550" pos:column="125">func</name></expr></argument>, <argument><expr><name pos:line="2550" pos:column="131">null</name></expr></argument>, <argument><expr><name pos:line="2550" pos:column="137">null</name></expr></argument>, <argument><expr><name pos:line="2550" pos:column="143">splitOn</name></expr></argument>, <argument><expr><name pos:line="2550" pos:column="152">null</name></expr></argument>, <argument><expr><name pos:line="2550" pos:column="158">null</name></expr></argument>, <argument><expr><name pos:line="2550" pos:column="164">reader</name></expr></argument>, <argument><expr><name pos:line="2550" pos:column="172">identity</name></expr></argument>)</argument_list></call></expr></range></decl></init>)
                    <block pos:line="2551" pos:column="21">{
                        <return><specifier pos:line="2552" pos:column="25">yield</specifier> return <expr><name pos:line="2552" pos:column="38">r</name></expr>;</return>
                    }</block></foreach>
                }</block>
                <finally pos:line="2555" pos:column="17">finally
                <block pos:line="2556" pos:column="17">{
                    <expr_stmt><expr><call><name pos:line="2557" pos:column="21">NextResult</name><argument_list pos:line="2557" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
                }</block></finally></try>
            }</block></function>

<cpp:if pos:line="2561" pos:column="1">#<cpp:directive pos:line="2561" pos:column="2">if</cpp:directive> <expr><name pos:line="2561" pos:column="5">CSHARP30</name></expr></cpp:if>
            <comment type="line" pos:line="2562" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="2563" pos:column="13">/// Read multiple objects from a single recordset on the grid</comment>
            <comment type="line" pos:line="2564" pos:column="13">/// &lt;/summary&gt;</comment>
            <function><type><specifier pos:line="2565" pos:column="13">public</specifier> <name><name pos:line="2565" pos:column="20">IEnumerable</name><argument_list pos:line="2565" pos:column="31">&lt;<argument><name pos:line="2565" pos:column="32">TReturn</name></argument>&gt;</argument_list></name></type> <name><name pos:line="2565" pos:column="41">Read</name><argument_list pos:line="2565" pos:column="45">&lt;<argument><name pos:line="2565" pos:column="46">TFirst</name></argument>, <argument><name pos:line="2565" pos:column="54">TSecond</name></argument>, <argument><name pos:line="2565" pos:column="63">TReturn</name></argument>&gt;</argument_list></name><parameter_list pos:line="2565" pos:column="71">(<param><decl><type><name><name pos:line="2565" pos:column="72">Func</name><argument_list pos:line="2565" pos:column="76">&lt;<argument><name pos:line="2565" pos:column="77">TFirst</name></argument>, <argument><name pos:line="2565" pos:column="85">TSecond</name></argument>, <argument><name pos:line="2565" pos:column="94">TReturn</name></argument>&gt;</argument_list></name></type> <name pos:line="2565" pos:column="103">func</name></decl></param>, <param><decl><type><name pos:line="2565" pos:column="109">string</name></type> <name pos:line="2565" pos:column="116">splitOn</name></decl></param>)</parameter_list>
            <block pos:line="2566" pos:column="13">{
                <return pos:line="2567" pos:column="17">return <expr><call><name><name pos:line="2567" pos:column="24">Read</name><argument_list pos:line="2567" pos:column="28">&lt;<argument><name pos:line="2567" pos:column="29">TFirst</name></argument>, <argument><name pos:line="2567" pos:column="37">TSecond</name></argument>, <argument><name pos:line="2567" pos:column="46">TReturn</name></argument>&gt;</argument_list></name><argument_list pos:line="2567" pos:column="54">(<argument><expr><name pos:line="2567" pos:column="55">func</name></expr></argument>, <argument><expr><name pos:line="2567" pos:column="61">splitOn</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="2567" pos:column="70">true</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
<cpp:endif pos:line="2569" pos:column="1">#<cpp:directive pos:line="2569" pos:column="2">endif</cpp:directive></cpp:endif>
            <comment type="line" pos:line="2570" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="2571" pos:column="13">/// Read multiple objects from a single recordset on the grid</comment>
            <comment type="line" pos:line="2572" pos:column="13">/// &lt;/summary&gt;</comment>
<cpp:if pos:line="2573" pos:column="1">#<cpp:directive pos:line="2573" pos:column="2">if</cpp:directive> <expr><name pos:line="2573" pos:column="5">CSHARP30</name></expr></cpp:if>  
            <function><type><specifier pos:line="2574" pos:column="13">public</specifier> <name><name pos:line="2574" pos:column="20">IEnumerable</name><argument_list pos:line="2574" pos:column="31">&lt;<argument><name pos:line="2574" pos:column="32">TReturn</name></argument>&gt;</argument_list></name></type> <name><name pos:line="2574" pos:column="41">Read</name><argument_list pos:line="2574" pos:column="45">&lt;<argument><name pos:line="2574" pos:column="46">TFirst</name></argument>, <argument><name pos:line="2574" pos:column="54">TSecond</name></argument>, <argument><name pos:line="2574" pos:column="63">TReturn</name></argument>&gt;</argument_list></name><parameter_list pos:line="2574" pos:column="71">(<param><decl><type><name><name pos:line="2574" pos:column="72">Func</name><argument_list pos:line="2574" pos:column="76">&lt;<argument><name pos:line="2574" pos:column="77">TFirst</name></argument>, <argument><name pos:line="2574" pos:column="85">TSecond</name></argument>, <argument><name pos:line="2574" pos:column="94">TReturn</name></argument>&gt;</argument_list></name></type> <name pos:line="2574" pos:column="103">func</name></decl></param>, <param><decl><type><name pos:line="2574" pos:column="109">string</name></type> <name pos:line="2574" pos:column="116">splitOn</name></decl></param>, <param><decl><type><name pos:line="2574" pos:column="125">bool</name></type> <name pos:line="2574" pos:column="130">buffered</name></decl></param>)</parameter_list>
<cpp:else pos:line="2575" pos:column="1">#<cpp:directive pos:line="2575" pos:column="2">else</cpp:directive></cpp:else>
            <specifier pos:line="2576" pos:column="13">public</specifier> <name><name pos:line="2576" pos:column="20">IEnumerable</name><argument_list pos:line="2576" pos:column="31">&lt;<argument><name pos:line="2576" pos:column="32">TReturn</name></argument>&gt;</argument_list></name> <name><name pos:line="2576" pos:column="41">Read</name><argument_list pos:line="2576" pos:column="45">&lt;<argument><name pos:line="2576" pos:column="46">TFirst</name></argument>, <argument><name pos:line="2576" pos:column="54">TSecond</name></argument>, <argument><name pos:line="2576" pos:column="63">TReturn</name></argument>&gt;</argument_list></name><parameter_list pos:line="2576" pos:column="71">(<param><decl><type><name><name pos:line="2576" pos:column="72">Func</name><argument_list pos:line="2576" pos:column="76">&lt;<argument><name pos:line="2576" pos:column="77">TFirst</name></argument>, <argument><name pos:line="2576" pos:column="85">TSecond</name></argument>, <argument><name pos:line="2576" pos:column="94">TReturn</name></argument>&gt;</argument_list></name></type> <name pos:line="2576" pos:column="103">func</name></decl></param>, <param><decl><type><name pos:line="2576" pos:column="109">string</name></type> <name pos:line="2576" pos:column="116">splitOn</name> <init pos:line="2576" pos:column="124">= <expr><lit:literal type="string" pos:line="2576" pos:column="126">"id"</lit:literal></expr></init></decl></param>, <name pos:line="2576" pos:column="132">bool</name> <name pos:line="2576" pos:column="137">buffered</name> <op:operator pos:line="2576" pos:column="146">=</op:operator> <lit:literal type="boolean" pos:line="2576" pos:column="148">true</lit:literal>)</parameter_list>
<cpp:endif pos:line="2577" pos:column="1">#<cpp:directive pos:line="2577" pos:column="2">endif</cpp:directive></cpp:endif>
            <block pos:line="2578" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="2579" pos:column="17">var</name></type> <name pos:line="2579" pos:column="21">result</name> <init pos:line="2579" pos:column="28">= <expr><call><name><name pos:line="2579" pos:column="30">MultiReadInternal</name><argument_list pos:line="2579" pos:column="47">&lt;<argument><name pos:line="2579" pos:column="48">TFirst</name></argument>, <argument><name pos:line="2579" pos:column="56">TSecond</name></argument>, <argument><name pos:line="2579" pos:column="65">DontMap</name></argument>, <argument><name pos:line="2579" pos:column="74">DontMap</name></argument>, <argument><name pos:line="2579" pos:column="83">DontMap</name></argument>, <argument><name pos:line="2579" pos:column="92">TReturn</name></argument>&gt;</argument_list></name><argument_list pos:line="2579" pos:column="100">(<argument><expr><name pos:line="2579" pos:column="101">func</name></expr></argument>, <argument><expr><name pos:line="2579" pos:column="107">splitOn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return pos:line="2580" pos:column="17">return <expr><name pos:line="2580" pos:column="24">buffered</name> <op:operator pos:line="2580" pos:column="33">?</op:operator> <call><name><name pos:line="2580" pos:column="35">result</name><op:operator pos:line="2580" pos:column="41">.</op:operator><name pos:line="2580" pos:column="42">ToList</name></name><argument_list pos:line="2580" pos:column="48">()</argument_list></call> <op:operator pos:line="2580" pos:column="51">:</op:operator> <name pos:line="2580" pos:column="53">result</name></expr>;</return>
            }</block></function>

<cpp:if pos:line="2583" pos:column="1">#<cpp:directive pos:line="2583" pos:column="2">if</cpp:directive> <expr><name pos:line="2583" pos:column="5">CSHARP30</name></expr></cpp:if>
            <comment type="line" pos:line="2584" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="2585" pos:column="13">/// Read multiple objects from a single recordset on the grid</comment>
            <comment type="line" pos:line="2586" pos:column="13">/// &lt;/summary&gt;</comment>
            <function><type><specifier pos:line="2587" pos:column="13">public</specifier> <name><name pos:line="2587" pos:column="20">IEnumerable</name><argument_list pos:line="2587" pos:column="31">&lt;<argument><name pos:line="2587" pos:column="32">TReturn</name></argument>&gt;</argument_list></name></type> <name><name pos:line="2587" pos:column="41">Read</name><argument_list pos:line="2587" pos:column="45">&lt;<argument><name pos:line="2587" pos:column="46">TFirst</name></argument>, <argument><name pos:line="2587" pos:column="54">TSecond</name></argument>, <argument><name pos:line="2587" pos:column="63">TThird</name></argument>, <argument><name pos:line="2587" pos:column="71">TReturn</name></argument>&gt;</argument_list></name><parameter_list pos:line="2587" pos:column="79">(<param><decl><type><name><name pos:line="2587" pos:column="80">Func</name><argument_list pos:line="2587" pos:column="84">&lt;<argument><name pos:line="2587" pos:column="85">TFirst</name></argument>, <argument><name pos:line="2587" pos:column="93">TSecond</name></argument>, <argument><name pos:line="2587" pos:column="102">TThird</name></argument>, <argument><name pos:line="2587" pos:column="110">TReturn</name></argument>&gt;</argument_list></name></type> <name pos:line="2587" pos:column="119">func</name></decl></param>, <param><decl><type><name pos:line="2587" pos:column="125">string</name></type> <name pos:line="2587" pos:column="132">splitOn</name></decl></param>)</parameter_list>
            <block pos:line="2588" pos:column="13">{
                <return pos:line="2589" pos:column="17">return <expr><call><name><name pos:line="2589" pos:column="24">Read</name><argument_list pos:line="2589" pos:column="28">&lt;<argument><name pos:line="2589" pos:column="29">TFirst</name></argument>, <argument><name pos:line="2589" pos:column="37">TSecond</name></argument>, <argument><name pos:line="2589" pos:column="46">TThird</name></argument>, <argument><name pos:line="2589" pos:column="54">TReturn</name></argument>&gt;</argument_list></name><argument_list pos:line="2589" pos:column="62">(<argument><expr><name pos:line="2589" pos:column="63">func</name></expr></argument>, <argument><expr><name pos:line="2589" pos:column="69">splitOn</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="2589" pos:column="78">true</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
<cpp:endif pos:line="2591" pos:column="1">#<cpp:directive pos:line="2591" pos:column="2">endif</cpp:directive></cpp:endif>
            <comment type="line" pos:line="2592" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="2593" pos:column="13">/// Read multiple objects from a single recordset on the grid</comment>
            <comment type="line" pos:line="2594" pos:column="13">/// &lt;/summary&gt;</comment>
<cpp:if pos:line="2595" pos:column="1">#<cpp:directive pos:line="2595" pos:column="2">if</cpp:directive> <expr><name pos:line="2595" pos:column="5">CSHARP30</name></expr></cpp:if>  
            <function><type><specifier pos:line="2596" pos:column="13">public</specifier> <name><name pos:line="2596" pos:column="20">IEnumerable</name><argument_list pos:line="2596" pos:column="31">&lt;<argument><name pos:line="2596" pos:column="32">TReturn</name></argument>&gt;</argument_list></name></type> <name><name pos:line="2596" pos:column="41">Read</name><argument_list pos:line="2596" pos:column="45">&lt;<argument><name pos:line="2596" pos:column="46">TFirst</name></argument>, <argument><name pos:line="2596" pos:column="54">TSecond</name></argument>, <argument><name pos:line="2596" pos:column="63">TThird</name></argument>, <argument><name pos:line="2596" pos:column="71">TReturn</name></argument>&gt;</argument_list></name><parameter_list pos:line="2596" pos:column="79">(<param><decl><type><name><name pos:line="2596" pos:column="80">Func</name><argument_list pos:line="2596" pos:column="84">&lt;<argument><name pos:line="2596" pos:column="85">TFirst</name></argument>, <argument><name pos:line="2596" pos:column="93">TSecond</name></argument>, <argument><name pos:line="2596" pos:column="102">TThird</name></argument>, <argument><name pos:line="2596" pos:column="110">TReturn</name></argument>&gt;</argument_list></name></type> <name pos:line="2596" pos:column="119">func</name></decl></param>, <param><decl><type><name pos:line="2596" pos:column="125">string</name></type> <name pos:line="2596" pos:column="132">splitOn</name></decl></param>, <param><decl><type><name pos:line="2596" pos:column="141">bool</name></type> <name pos:line="2596" pos:column="146">buffered</name></decl></param>)</parameter_list>
<cpp:else pos:line="2597" pos:column="1">#<cpp:directive pos:line="2597" pos:column="2">else</cpp:directive></cpp:else>
            <specifier pos:line="2598" pos:column="13">public</specifier> <name><name pos:line="2598" pos:column="20">IEnumerable</name><argument_list pos:line="2598" pos:column="31">&lt;<argument><name pos:line="2598" pos:column="32">TReturn</name></argument>&gt;</argument_list></name> <name><name pos:line="2598" pos:column="41">Read</name><argument_list pos:line="2598" pos:column="45">&lt;<argument><name pos:line="2598" pos:column="46">TFirst</name></argument>, <argument><name pos:line="2598" pos:column="54">TSecond</name></argument>, <argument><name pos:line="2598" pos:column="63">TThird</name></argument>, <argument><name pos:line="2598" pos:column="71">TReturn</name></argument>&gt;</argument_list></name><parameter_list pos:line="2598" pos:column="79">(<param><decl><type><name><name pos:line="2598" pos:column="80">Func</name><argument_list pos:line="2598" pos:column="84">&lt;<argument><name pos:line="2598" pos:column="85">TFirst</name></argument>, <argument><name pos:line="2598" pos:column="93">TSecond</name></argument>, <argument><name pos:line="2598" pos:column="102">TThird</name></argument>, <argument><name pos:line="2598" pos:column="110">TReturn</name></argument>&gt;</argument_list></name></type> <name pos:line="2598" pos:column="119">func</name></decl></param>, <param><decl><type><name pos:line="2598" pos:column="125">string</name></type> <name pos:line="2598" pos:column="132">splitOn</name> <init pos:line="2598" pos:column="140">= <expr><lit:literal type="string" pos:line="2598" pos:column="142">"id"</lit:literal></expr></init></decl></param>, <name pos:line="2598" pos:column="148">bool</name> <name pos:line="2598" pos:column="153">buffered</name> <op:operator pos:line="2598" pos:column="162">=</op:operator> <lit:literal type="boolean" pos:line="2598" pos:column="164">true</lit:literal>)</parameter_list>
<cpp:endif pos:line="2599" pos:column="1">#<cpp:directive pos:line="2599" pos:column="2">endif</cpp:directive></cpp:endif>
            <block pos:line="2600" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="2601" pos:column="17">var</name></type> <name pos:line="2601" pos:column="21">result</name> <init pos:line="2601" pos:column="28">= <expr><call><name><name pos:line="2601" pos:column="30">MultiReadInternal</name><argument_list pos:line="2601" pos:column="47">&lt;<argument><name pos:line="2601" pos:column="48">TFirst</name></argument>, <argument><name pos:line="2601" pos:column="56">TSecond</name></argument>, <argument><name pos:line="2601" pos:column="65">TThird</name></argument>, <argument><name pos:line="2601" pos:column="73">DontMap</name></argument>, <argument><name pos:line="2601" pos:column="82">DontMap</name></argument>, <argument><name pos:line="2601" pos:column="91">TReturn</name></argument>&gt;</argument_list></name><argument_list pos:line="2601" pos:column="99">(<argument><expr><name pos:line="2601" pos:column="100">func</name></expr></argument>, <argument><expr><name pos:line="2601" pos:column="106">splitOn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return pos:line="2602" pos:column="17">return <expr><name pos:line="2602" pos:column="24">buffered</name> <op:operator pos:line="2602" pos:column="33">?</op:operator> <call><name><name pos:line="2602" pos:column="35">result</name><op:operator pos:line="2602" pos:column="41">.</op:operator><name pos:line="2602" pos:column="42">ToList</name></name><argument_list pos:line="2602" pos:column="48">()</argument_list></call> <op:operator pos:line="2602" pos:column="51">:</op:operator> <name pos:line="2602" pos:column="53">result</name></expr>;</return>
            }</block></function>

<cpp:if pos:line="2605" pos:column="1">#<cpp:directive pos:line="2605" pos:column="2">if</cpp:directive> <expr><name pos:line="2605" pos:column="5">CSHARP30</name></expr></cpp:if>
            <comment type="line" pos:line="2606" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="2607" pos:column="13">/// Read multiple objects from a single record set on the grid</comment>
            <comment type="line" pos:line="2608" pos:column="13">/// &lt;/summary&gt;</comment>
            <function><type><specifier pos:line="2609" pos:column="13">public</specifier> <name><name pos:line="2609" pos:column="20">IEnumerable</name><argument_list pos:line="2609" pos:column="31">&lt;<argument><name pos:line="2609" pos:column="32">TReturn</name></argument>&gt;</argument_list></name></type> <name><name pos:line="2609" pos:column="41">Read</name><argument_list pos:line="2609" pos:column="45">&lt;<argument><name pos:line="2609" pos:column="46">TFirst</name></argument>, <argument><name pos:line="2609" pos:column="54">TSecond</name></argument>, <argument><name pos:line="2609" pos:column="63">TThird</name></argument>, <argument><name pos:line="2609" pos:column="71">TFourth</name></argument>, <argument><name pos:line="2609" pos:column="80">TReturn</name></argument>&gt;</argument_list></name><parameter_list pos:line="2609" pos:column="88">(<param><decl><type><name><name pos:line="2609" pos:column="89">Func</name><argument_list pos:line="2609" pos:column="93">&lt;<argument><name pos:line="2609" pos:column="94">TFirst</name></argument>, <argument><name pos:line="2609" pos:column="102">TSecond</name></argument>, <argument><name pos:line="2609" pos:column="111">TThird</name></argument>, <argument><name pos:line="2609" pos:column="119">TFourth</name></argument>, <argument><name pos:line="2609" pos:column="128">TReturn</name></argument>&gt;</argument_list></name></type> <name pos:line="2609" pos:column="137">func</name></decl></param>, <param><decl><type><name pos:line="2609" pos:column="143">string</name></type> <name pos:line="2609" pos:column="150">splitOn</name></decl></param>)</parameter_list>
            <block pos:line="2610" pos:column="13">{
                <return pos:line="2611" pos:column="17">return <expr><call><name><name pos:line="2611" pos:column="24">Read</name><argument_list pos:line="2611" pos:column="28">&lt;<argument><name pos:line="2611" pos:column="29">TFirst</name></argument>, <argument><name pos:line="2611" pos:column="37">TSecond</name></argument>, <argument><name pos:line="2611" pos:column="46">TThird</name></argument>, <argument><name pos:line="2611" pos:column="54">TFourth</name></argument>, <argument><name pos:line="2611" pos:column="63">TReturn</name></argument>&gt;</argument_list></name><argument_list pos:line="2611" pos:column="71">(<argument><expr><name pos:line="2611" pos:column="72">func</name></expr></argument>, <argument><expr><name pos:line="2611" pos:column="78">splitOn</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="2611" pos:column="87">true</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
<cpp:endif pos:line="2613" pos:column="1">#<cpp:directive pos:line="2613" pos:column="2">endif</cpp:directive></cpp:endif>

            <comment type="line" pos:line="2615" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="2616" pos:column="13">/// Read multiple objects from a single record set on the grid</comment>
            <comment type="line" pos:line="2617" pos:column="13">/// &lt;/summary&gt;</comment>
<cpp:if pos:line="2618" pos:column="1">#<cpp:directive pos:line="2618" pos:column="2">if</cpp:directive> <expr><name pos:line="2618" pos:column="5">CSHARP30</name></expr></cpp:if>  
            <function><type><specifier pos:line="2619" pos:column="13">public</specifier> <name><name pos:line="2619" pos:column="20">IEnumerable</name><argument_list pos:line="2619" pos:column="31">&lt;<argument><name pos:line="2619" pos:column="32">TReturn</name></argument>&gt;</argument_list></name></type> <name><name pos:line="2619" pos:column="41">Read</name><argument_list pos:line="2619" pos:column="45">&lt;<argument><name pos:line="2619" pos:column="46">TFirst</name></argument>, <argument><name pos:line="2619" pos:column="54">TSecond</name></argument>, <argument><name pos:line="2619" pos:column="63">TThird</name></argument>, <argument><name pos:line="2619" pos:column="71">TFourth</name></argument>, <argument><name pos:line="2619" pos:column="80">TReturn</name></argument>&gt;</argument_list></name><parameter_list pos:line="2619" pos:column="88">(<param><decl><type><name><name pos:line="2619" pos:column="89">Func</name><argument_list pos:line="2619" pos:column="93">&lt;<argument><name pos:line="2619" pos:column="94">TFirst</name></argument>, <argument><name pos:line="2619" pos:column="102">TSecond</name></argument>, <argument><name pos:line="2619" pos:column="111">TThird</name></argument>, <argument><name pos:line="2619" pos:column="119">TFourth</name></argument>, <argument><name pos:line="2619" pos:column="128">TReturn</name></argument>&gt;</argument_list></name></type> <name pos:line="2619" pos:column="137">func</name></decl></param>, <param><decl><type><name pos:line="2619" pos:column="143">string</name></type> <name pos:line="2619" pos:column="150">splitOn</name></decl></param>, <param><decl><type><name pos:line="2619" pos:column="159">bool</name></type> <name pos:line="2619" pos:column="164">buffered</name></decl></param>)</parameter_list>
<cpp:else pos:line="2620" pos:column="1">#<cpp:directive pos:line="2620" pos:column="2">else</cpp:directive></cpp:else>
            <specifier pos:line="2621" pos:column="13">public</specifier> <name><name pos:line="2621" pos:column="20">IEnumerable</name><argument_list pos:line="2621" pos:column="31">&lt;<argument><name pos:line="2621" pos:column="32">TReturn</name></argument>&gt;</argument_list></name> <name><name pos:line="2621" pos:column="41">Read</name><argument_list pos:line="2621" pos:column="45">&lt;<argument><name pos:line="2621" pos:column="46">TFirst</name></argument>, <argument><name pos:line="2621" pos:column="54">TSecond</name></argument>, <argument><name pos:line="2621" pos:column="63">TThird</name></argument>, <argument><name pos:line="2621" pos:column="71">TFourth</name></argument>, <argument><name pos:line="2621" pos:column="80">TReturn</name></argument>&gt;</argument_list></name><parameter_list pos:line="2621" pos:column="88">(<param><decl><type><name><name pos:line="2621" pos:column="89">Func</name><argument_list pos:line="2621" pos:column="93">&lt;<argument><name pos:line="2621" pos:column="94">TFirst</name></argument>, <argument><name pos:line="2621" pos:column="102">TSecond</name></argument>, <argument><name pos:line="2621" pos:column="111">TThird</name></argument>, <argument><name pos:line="2621" pos:column="119">TFourth</name></argument>, <argument><name pos:line="2621" pos:column="128">TReturn</name></argument>&gt;</argument_list></name></type> <name pos:line="2621" pos:column="137">func</name></decl></param>, <param><decl><type><name pos:line="2621" pos:column="143">string</name></type> <name pos:line="2621" pos:column="150">splitOn</name> <init pos:line="2621" pos:column="158">= <expr><lit:literal type="string" pos:line="2621" pos:column="160">"id"</lit:literal></expr></init></decl></param>, <name pos:line="2621" pos:column="166">bool</name> <name pos:line="2621" pos:column="171">buffered</name> <op:operator pos:line="2621" pos:column="180">=</op:operator> <lit:literal type="boolean" pos:line="2621" pos:column="182">true</lit:literal>)</parameter_list>
<cpp:endif pos:line="2622" pos:column="1">#<cpp:directive pos:line="2622" pos:column="2">endif</cpp:directive></cpp:endif>
            <block pos:line="2623" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="2624" pos:column="17">var</name></type> <name pos:line="2624" pos:column="21">result</name> <init pos:line="2624" pos:column="28">= <expr><call><name><name pos:line="2624" pos:column="30">MultiReadInternal</name><argument_list pos:line="2624" pos:column="47">&lt;<argument><name pos:line="2624" pos:column="48">TFirst</name></argument>, <argument><name pos:line="2624" pos:column="56">TSecond</name></argument>, <argument><name pos:line="2624" pos:column="65">TThird</name></argument>, <argument><name pos:line="2624" pos:column="73">TFourth</name></argument>, <argument><name pos:line="2624" pos:column="82">DontMap</name></argument>, <argument><name pos:line="2624" pos:column="91">TReturn</name></argument>&gt;</argument_list></name><argument_list pos:line="2624" pos:column="99">(<argument><expr><name pos:line="2624" pos:column="100">func</name></expr></argument>, <argument><expr><name pos:line="2624" pos:column="106">splitOn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return pos:line="2625" pos:column="17">return <expr><name pos:line="2625" pos:column="24">buffered</name> <op:operator pos:line="2625" pos:column="33">?</op:operator> <call><name><name pos:line="2625" pos:column="35">result</name><op:operator pos:line="2625" pos:column="41">.</op:operator><name pos:line="2625" pos:column="42">ToList</name></name><argument_list pos:line="2625" pos:column="48">()</argument_list></call> <op:operator pos:line="2625" pos:column="51">:</op:operator> <name pos:line="2625" pos:column="53">result</name></expr>;</return>
            }</block></function>



<cpp:if pos:line="2630" pos:column="1">#<cpp:directive pos:line="2630" pos:column="2">if</cpp:directive> <expr><op:operator pos:line="2630" pos:column="5">!</op:operator><name pos:line="2630" pos:column="6">CSHARP30</name></expr></cpp:if>
            <comment type="line" pos:line="2631" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="2632" pos:column="13">/// Read multiple objects from a single record set on the grid</comment>
            <comment type="line" pos:line="2633" pos:column="13">/// &lt;/summary&gt;</comment>
            <function><type><specifier pos:line="2634" pos:column="13">public</specifier> <name><name pos:line="2634" pos:column="20">IEnumerable</name><argument_list pos:line="2634" pos:column="31">&lt;<argument><name pos:line="2634" pos:column="32">TReturn</name></argument>&gt;</argument_list></name></type> <name><name pos:line="2634" pos:column="41">Read</name><argument_list pos:line="2634" pos:column="45">&lt;<argument><name pos:line="2634" pos:column="46">TFirst</name></argument>, <argument><name pos:line="2634" pos:column="54">TSecond</name></argument>, <argument><name pos:line="2634" pos:column="63">TThird</name></argument>, <argument><name pos:line="2634" pos:column="71">TFourth</name></argument>, <argument><name pos:line="2634" pos:column="80">TFifth</name></argument>, <argument><name pos:line="2634" pos:column="88">TReturn</name></argument>&gt;</argument_list></name><parameter_list pos:line="2634" pos:column="96">(<param><decl><type><name><name pos:line="2634" pos:column="97">Func</name><argument_list pos:line="2634" pos:column="101">&lt;<argument><name pos:line="2634" pos:column="102">TFirst</name></argument>, <argument><name pos:line="2634" pos:column="110">TSecond</name></argument>, <argument><name pos:line="2634" pos:column="119">TThird</name></argument>, <argument><name pos:line="2634" pos:column="127">TFourth</name></argument>, <argument><name pos:line="2634" pos:column="136">TFifth</name></argument>, <argument><name pos:line="2634" pos:column="144">TReturn</name></argument>&gt;</argument_list></name></type> <name pos:line="2634" pos:column="153">func</name></decl></param>, <param><decl><type><name pos:line="2634" pos:column="159">string</name></type> <name pos:line="2634" pos:column="166">splitOn</name> <init pos:line="2634" pos:column="174">= <expr><lit:literal type="string" pos:line="2634" pos:column="176">"id"</lit:literal></expr></init></decl></param>, <name pos:line="2634" pos:column="182">bool</name> <name pos:line="2634" pos:column="187">buffered</name> <op:operator pos:line="2634" pos:column="196">=</op:operator> <lit:literal type="boolean" pos:line="2634" pos:column="198">true</lit:literal>)</parameter_list>
            <block pos:line="2635" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="2636" pos:column="17">var</name></type> <name pos:line="2636" pos:column="21">result</name> <init pos:line="2636" pos:column="28">= <expr><call><name><name pos:line="2636" pos:column="30">MultiReadInternal</name><argument_list pos:line="2636" pos:column="47">&lt;<argument><name pos:line="2636" pos:column="48">TFirst</name></argument>, <argument><name pos:line="2636" pos:column="56">TSecond</name></argument>, <argument><name pos:line="2636" pos:column="65">TThird</name></argument>, <argument><name pos:line="2636" pos:column="73">TFourth</name></argument>, <argument><name pos:line="2636" pos:column="82">TFifth</name></argument>, <argument><name pos:line="2636" pos:column="90">TReturn</name></argument>&gt;</argument_list></name><argument_list pos:line="2636" pos:column="98">(<argument><expr><name pos:line="2636" pos:column="99">func</name></expr></argument>, <argument><expr><name pos:line="2636" pos:column="105">splitOn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return pos:line="2637" pos:column="17">return <expr><name pos:line="2637" pos:column="24">buffered</name> <op:operator pos:line="2637" pos:column="33">?</op:operator> <call><name><name pos:line="2637" pos:column="35">result</name><op:operator pos:line="2637" pos:column="41">.</op:operator><name pos:line="2637" pos:column="42">ToList</name></name><argument_list pos:line="2637" pos:column="48">()</argument_list></call> <op:operator pos:line="2637" pos:column="51">:</op:operator> <name pos:line="2637" pos:column="53">result</name></expr>;</return>
            }</block></function>
<cpp:endif pos:line="2639" pos:column="1">#<cpp:directive pos:line="2639" pos:column="2">endif</cpp:directive></cpp:endif>

            <function><type><specifier pos:line="2641" pos:column="13">private</specifier> <name><name pos:line="2641" pos:column="21">IEnumerable</name><argument_list pos:line="2641" pos:column="32">&lt;<argument><name pos:line="2641" pos:column="33">T</name></argument>&gt;</argument_list></name></type> <name><name pos:line="2641" pos:column="36">ReadDeferred</name><argument_list pos:line="2641" pos:column="48">&lt;<argument><name pos:line="2641" pos:column="49">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="2641" pos:column="51">(<param><decl><type><name pos:line="2641" pos:column="52">int</name></type> <name pos:line="2641" pos:column="56">index</name></decl></param>, <param><decl><type><name><name pos:line="2641" pos:column="63">Func</name><argument_list pos:line="2641" pos:column="67">&lt;<argument><name pos:line="2641" pos:column="68">IDataReader</name></argument>, <argument><name pos:line="2641" pos:column="81">object</name></argument>&gt;</argument_list></name></type> <name pos:line="2641" pos:column="89">deserializer</name></decl></param>, <param><decl><type><name pos:line="2641" pos:column="103">Identity</name></type> <name pos:line="2641" pos:column="112">typedIdentity</name></decl></param>)</parameter_list>
            <block pos:line="2642" pos:column="13">{
                <try pos:line="2643" pos:column="17">try
                <block pos:line="2644" pos:column="17">{
                    <while pos:line="2645" pos:column="21">while <condition pos:line="2645" pos:column="27">(<expr><name pos:line="2645" pos:column="28">index</name> <op:operator pos:line="2645" pos:column="34">==</op:operator> <name pos:line="2645" pos:column="37">gridIndex</name> <op:operator pos:line="2645" pos:column="47">&amp;&amp;</op:operator> <call><name><name pos:line="2645" pos:column="50">reader</name><op:operator pos:line="2645" pos:column="56">.</op:operator><name pos:line="2645" pos:column="57">Read</name></name><argument_list pos:line="2645" pos:column="61">()</argument_list></call></expr>)</condition>
                    <block pos:line="2646" pos:column="21">{
                        <return><specifier pos:line="2647" pos:column="25">yield</specifier> return <expr><op:operator pos:line="2647" pos:column="38">(</op:operator><name pos:line="2647" pos:column="39">T</name><op:operator pos:line="2647" pos:column="40">)</op:operator><call><name pos:line="2647" pos:column="41">deserializer</name><argument_list pos:line="2647" pos:column="53">(<argument><expr><name pos:line="2647" pos:column="54">reader</name></expr></argument>)</argument_list></call></expr>;</return>
                    }</block></while>
                }</block>
                <finally pos:line="2650" pos:column="17">finally <comment type="line" pos:line="2650" pos:column="25">// finally so that First etc progresses things even when multiple rows</comment>
                <block pos:line="2651" pos:column="17">{
                    <if pos:line="2652" pos:column="21">if <condition pos:line="2652" pos:column="24">(<expr><name pos:line="2652" pos:column="25">index</name> <op:operator pos:line="2652" pos:column="31">==</op:operator> <name pos:line="2652" pos:column="34">gridIndex</name></expr>)</condition><then pos:line="2652" pos:column="44">
                    <block pos:line="2653" pos:column="21">{
                        <expr_stmt><expr><call><name pos:line="2654" pos:column="25">NextResult</name><argument_list pos:line="2654" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></finally></try>
            }</block></function>
            <decl_stmt><decl><type><specifier pos:line="2658" pos:column="13">private</specifier> <name pos:line="2658" pos:column="21">int</name></type> <name pos:line="2658" pos:column="25">gridIndex</name></decl><op:operator pos:line="2658" pos:column="34">,</op:operator> <decl><type ref="prev"/><name pos:line="2658" pos:column="36">readCount</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="2659" pos:column="13">private</specifier> <name pos:line="2659" pos:column="21">bool</name></type> <name pos:line="2659" pos:column="26">consumed</name></decl>;</decl_stmt>
            <function><type><specifier pos:line="2660" pos:column="13">private</specifier> <name pos:line="2660" pos:column="21">void</name></type> <name pos:line="2660" pos:column="26">NextResult</name><parameter_list pos:line="2660" pos:column="36">()</parameter_list>
            <block pos:line="2661" pos:column="13">{
                <if pos:line="2662" pos:column="17">if <condition pos:line="2662" pos:column="20">(<expr><call><name><name pos:line="2662" pos:column="21">reader</name><op:operator pos:line="2662" pos:column="27">.</op:operator><name pos:line="2662" pos:column="28">NextResult</name></name><argument_list pos:line="2662" pos:column="38">()</argument_list></call></expr>)</condition><then pos:line="2662" pos:column="41">
                <block pos:line="2663" pos:column="17">{
                    <expr_stmt><expr><name pos:line="2664" pos:column="21">readCount</name><op:operator pos:line="2664" pos:column="30">++</op:operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="2665" pos:column="21">gridIndex</name><op:operator pos:line="2665" pos:column="30">++</op:operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="2666" pos:column="21">consumed</name> <op:operator pos:line="2666" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="2666" pos:column="32">false</lit:literal></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="2668" pos:column="17">else
                <block pos:line="2669" pos:column="17">{
                    <comment type="line" pos:line="2670" pos:column="21">// happy path; close the reader cleanly - no</comment>
                    <comment type="line" pos:line="2671" pos:column="21">// need for "Cancel" etc</comment>
                    <expr_stmt><expr><call><name><name pos:line="2672" pos:column="21">reader</name><op:operator pos:line="2672" pos:column="27">.</op:operator><name pos:line="2672" pos:column="28">Dispose</name></name><argument_list pos:line="2672" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="2673" pos:column="21">reader</name> <op:operator pos:line="2673" pos:column="28">=</op:operator> <name pos:line="2673" pos:column="30">null</name></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name pos:line="2675" pos:column="21">Dispose</name><argument_list pos:line="2675" pos:column="28">()</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>

            }</block></function>
            <comment type="line" pos:line="2679" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="2680" pos:column="13">/// Dispose the grid, closing and disposing both the underlying reader and command.</comment>
            <comment type="line" pos:line="2681" pos:column="13">/// &lt;/summary&gt;</comment>
            <function><type><specifier pos:line="2682" pos:column="13">public</specifier> <name pos:line="2682" pos:column="20">void</name></type> <name pos:line="2682" pos:column="25">Dispose</name><parameter_list pos:line="2682" pos:column="32">()</parameter_list>
            <block pos:line="2683" pos:column="13">{
                <if pos:line="2684" pos:column="17">if <condition pos:line="2684" pos:column="20">(<expr><name pos:line="2684" pos:column="21">reader</name> <op:operator pos:line="2684" pos:column="28">!=</op:operator> <name pos:line="2684" pos:column="31">null</name></expr>)</condition><then pos:line="2684" pos:column="36">
                <block pos:line="2685" pos:column="17">{
                    <if pos:line="2686" pos:column="21">if <condition pos:line="2686" pos:column="24">(<expr><op:operator pos:line="2686" pos:column="25">!</op:operator><name><name pos:line="2686" pos:column="26">reader</name><op:operator pos:line="2686" pos:column="32">.</op:operator><name pos:line="2686" pos:column="33">IsClosed</name> <type:modifier pos:line="2686" pos:column="42">&amp;&amp;</type:modifier></name> <name pos:line="2686" pos:column="45">command</name> <op:operator pos:line="2686" pos:column="53">!=</op:operator> <name pos:line="2686" pos:column="56">null</name></expr>)</condition><then pos:line="2686" pos:column="61"> <expr_stmt><expr><call><name><name pos:line="2686" pos:column="62">command</name><op:operator pos:line="2686" pos:column="69">.</op:operator><name pos:line="2686" pos:column="70">Cancel</name></name><argument_list pos:line="2686" pos:column="76">()</argument_list></call></expr>;</expr_stmt></then></if>
                    <expr_stmt><expr><call><name><name pos:line="2687" pos:column="21">reader</name><op:operator pos:line="2687" pos:column="27">.</op:operator><name pos:line="2687" pos:column="28">Dispose</name></name><argument_list pos:line="2687" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="2688" pos:column="21">reader</name> <op:operator pos:line="2688" pos:column="28">=</op:operator> <name pos:line="2688" pos:column="30">null</name></expr>;</expr_stmt>
                }</block></then></if>
                <if pos:line="2690" pos:column="17">if <condition pos:line="2690" pos:column="20">(<expr><name pos:line="2690" pos:column="21">command</name> <op:operator pos:line="2690" pos:column="29">!=</op:operator> <name pos:line="2690" pos:column="32">null</name></expr>)</condition><then pos:line="2690" pos:column="37">
                <block pos:line="2691" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="2692" pos:column="21">command</name><op:operator pos:line="2692" pos:column="28">.</op:operator><name pos:line="2692" pos:column="29">Dispose</name></name><argument_list pos:line="2692" pos:column="36">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="2693" pos:column="21">command</name> <op:operator pos:line="2693" pos:column="29">=</op:operator> <name pos:line="2693" pos:column="31">null</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></function>
        }</block></class>
    }</block></class>

    <comment type="line" pos:line="2699" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="2700" pos:column="5">/// A bag of parameters that can be passed to the Dapper Query and Execute methods</comment>
    <comment type="line" pos:line="2701" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="2702" pos:column="5">partial</specifier> class <name pos:line="2702" pos:column="19">DynamicParameters</name> <super pos:line="2702" pos:column="37">: <name><name pos:line="2702" pos:column="39">SqlMapper</name><op:operator pos:line="2702" pos:column="48">.</op:operator><name pos:line="2702" pos:column="49">IDynamicParameters</name></name></super>
    <block pos:line="2703" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="2704" pos:column="9">internal</specifier> <specifier pos:line="2704" pos:column="18">const</specifier> <name pos:line="2704" pos:column="24">DbType</name></type> <name pos:line="2704" pos:column="31">EnumerableMultiParameter</name> <init pos:line="2704" pos:column="56">= <expr><call pos:line="2704" pos:column="58">(<name pos:line="2704" pos:column="59">DbType</name>)<argument_list pos:line="2704" pos:column="66">(<argument><expr><op:operator pos:line="2704" pos:column="67">-</op:operator><lit:literal type="number" pos:line="2704" pos:column="68">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="2705" pos:column="9">static</specifier> <name><name pos:line="2705" pos:column="16">Dictionary</name><argument_list pos:line="2705" pos:column="26">&lt;<argument><name><name pos:line="2705" pos:column="27">SqlMapper</name><op:operator pos:line="2705" pos:column="36">.</op:operator><name pos:line="2705" pos:column="37">Identity</name></name></argument>, <argument><name><name pos:line="2705" pos:column="47">Action</name><argument_list pos:line="2705" pos:column="53">&lt;<argument><name pos:line="2705" pos:column="54">IDbCommand</name></argument>, <argument><name pos:line="2705" pos:column="66">object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="2705" pos:column="75">paramReaderCache</name> <init pos:line="2705" pos:column="92">= <expr><op:operator pos:line="2705" pos:column="94">new</op:operator> <call><name><name pos:line="2705" pos:column="98">Dictionary</name><argument_list pos:line="2705" pos:column="108">&lt;<argument><name><name pos:line="2705" pos:column="109">SqlMapper</name><op:operator pos:line="2705" pos:column="118">.</op:operator><name pos:line="2705" pos:column="119">Identity</name></name></argument>, <argument><name><name pos:line="2705" pos:column="129">Action</name><argument_list pos:line="2705" pos:column="135">&lt;<argument><name pos:line="2705" pos:column="136">IDbCommand</name></argument>, <argument><name pos:line="2705" pos:column="148">object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list pos:line="2705" pos:column="156">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name pos:line="2707" pos:column="9">Dictionary</name><argument_list pos:line="2707" pos:column="19">&lt;<argument><name pos:line="2707" pos:column="20">string</name></argument>, <argument><name pos:line="2707" pos:column="28">ParamInfo</name></argument>&gt;</argument_list></name></type> <name pos:line="2707" pos:column="39">parameters</name> <init pos:line="2707" pos:column="50">= <expr><op:operator pos:line="2707" pos:column="52">new</op:operator> <call><name><name pos:line="2707" pos:column="56">Dictionary</name><argument_list pos:line="2707" pos:column="66">&lt;<argument><name pos:line="2707" pos:column="67">string</name></argument>, <argument><name pos:line="2707" pos:column="75">ParamInfo</name></argument>&gt;</argument_list></name><argument_list pos:line="2707" pos:column="85">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name pos:line="2708" pos:column="9">List</name><argument_list pos:line="2708" pos:column="13">&lt;<argument><name pos:line="2708" pos:column="14">object</name></argument>&gt;</argument_list></name></type> <name pos:line="2708" pos:column="22">templates</name></decl>;</decl_stmt>

        <class><specifier pos:line="2710" pos:column="9">partial</specifier> class <name pos:line="2710" pos:column="23">ParamInfo</name>
        <block pos:line="2711" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="2712" pos:column="13">public</specifier> <name pos:line="2712" pos:column="20">string</name></type> <name pos:line="2712" pos:column="27">Name</name> <block pos:line="2712" pos:column="32">{ <function_decl><name pos:line="2712" pos:column="34">get</name>;</function_decl> <function_decl><name pos:line="2712" pos:column="39">set</name>;</function_decl> }</block></decl></decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="2713" pos:column="13">public</specifier> <name pos:line="2713" pos:column="20">object</name></type> <name pos:line="2713" pos:column="27">Value</name> <block pos:line="2713" pos:column="33">{ <function_decl><name pos:line="2713" pos:column="35">get</name>;</function_decl> <function_decl><name pos:line="2713" pos:column="40">set</name>;</function_decl> }</block></decl></decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="2714" pos:column="13">public</specifier> <name pos:line="2714" pos:column="20">ParameterDirection</name></type> <name pos:line="2714" pos:column="39">ParameterDirection</name> <block pos:line="2714" pos:column="58">{ <function_decl><name pos:line="2714" pos:column="60">get</name>;</function_decl> <function_decl><name pos:line="2714" pos:column="65">set</name>;</function_decl> }</block></decl></decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="2715" pos:column="13">public</specifier> <name pos:line="2715" pos:column="20">DbType</name><type:modifier pos:line="2715" pos:column="26">?</type:modifier></type> <name pos:line="2715" pos:column="28">DbType</name> <block pos:line="2715" pos:column="35">{ <function_decl><name pos:line="2715" pos:column="37">get</name>;</function_decl> <function_decl><name pos:line="2715" pos:column="42">set</name>;</function_decl> }</block></decl></decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="2716" pos:column="13">public</specifier> <name pos:line="2716" pos:column="20">int</name><type:modifier pos:line="2716" pos:column="23">?</type:modifier></type> <name pos:line="2716" pos:column="25">Size</name> <block pos:line="2716" pos:column="30">{ <function_decl><name pos:line="2716" pos:column="32">get</name>;</function_decl> <function_decl><name pos:line="2716" pos:column="37">set</name>;</function_decl> }</block></decl></decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="2717" pos:column="13">public</specifier> <name pos:line="2717" pos:column="20">IDbDataParameter</name></type> <name pos:line="2717" pos:column="37">AttachedParam</name> <block pos:line="2717" pos:column="51">{ <function_decl><name pos:line="2717" pos:column="53">get</name>;</function_decl> <function_decl><name pos:line="2717" pos:column="58">set</name>;</function_decl> }</block></decl></decl_stmt>
        }</block></class>

        <comment type="line" pos:line="2720" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="2721" pos:column="9">/// construct a dynamic parameter bag</comment>
        <comment type="line" pos:line="2722" pos:column="9">/// &lt;/summary&gt;</comment>
        <constructor><specifier pos:line="2723" pos:column="9">public</specifier> <name pos:line="2723" pos:column="16">DynamicParameters</name><parameter_list pos:line="2723" pos:column="33">()</parameter_list> <block pos:line="2723" pos:column="36">{ }</block></constructor>

        <comment type="line" pos:line="2725" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="2726" pos:column="9">/// construct a dynamic parameter bag</comment>
        <comment type="line" pos:line="2727" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="2728" pos:column="9">/// &lt;param name="template"&gt;can be an anonymous type or a DynamicParameters bag&lt;/param&gt;</comment>
        <constructor><specifier pos:line="2729" pos:column="9">public</specifier> <name pos:line="2729" pos:column="16">DynamicParameters</name><parameter_list pos:line="2729" pos:column="33">(<param><decl><type><name pos:line="2729" pos:column="34">object</name></type> <param><decl><type><specifier pos:line="2729" pos:column="41">template</specifier></type></decl></param></decl></param>)</parameter_list>
        <block pos:line="2730" pos:column="9">{
            <macro><name pos:line="2731" pos:column="13">AddDynamicParams</name><argument_list pos:line="2731" pos:column="29">(<argument pos:line="2731" pos:column="30">template</argument>)</argument_list></macro><empty_stmt pos:line="2731" pos:column="39">;</empty_stmt>
        }</block></constructor>

        <comment type="line" pos:line="2734" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="2735" pos:column="9">/// Append a whole object full of params to the dynamic</comment>
        <comment type="line" pos:line="2736" pos:column="9">/// EG: AddDynamicParams(new {A = 1, B = 2}) // will add property A and B to the dynamic</comment>
        <comment type="line" pos:line="2737" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="2738" pos:column="9">/// &lt;param name="param"&gt;&lt;/param&gt;</comment>
        <function><type><specifier pos:line="2739" pos:column="9">public</specifier> <name pos:line="2739" pos:column="16">void</name></type> <name pos:line="2739" pos:column="21">AddDynamicParams</name><parameter_list pos:line="2739" pos:column="37">(
<cpp:if pos:line="2740" pos:column="1">#<cpp:directive pos:line="2740" pos:column="2">if</cpp:directive> <expr><name pos:line="2740" pos:column="5">CSHARP30</name></expr></cpp:if>
            <param><decl><type><name pos:line="2741" pos:column="13">object</name></type> <name pos:line="2741" pos:column="20">param</name>
<cpp:else pos:line="2742" pos:column="1">#<cpp:directive pos:line="2742" pos:column="2">else</cpp:directive></cpp:else>
<name pos:line="2743" pos:column="1">dynamic</name> <name pos:line="2743" pos:column="9">param</name></decl></param>
<cpp:endif pos:line="2744" pos:column="1">#<cpp:directive pos:line="2744" pos:column="2">endif</cpp:directive></cpp:endif>
)</parameter_list>
        <block pos:line="2746" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="2747" pos:column="13">var</name></type> <name pos:line="2747" pos:column="17">obj</name> <init pos:line="2747" pos:column="21">= <expr><name pos:line="2747" pos:column="23">param</name> <op:operator pos:line="2747" pos:column="29">as</op:operator> <name pos:line="2747" pos:column="32">object</name></expr></init></decl>;</decl_stmt>
            <if pos:line="2748" pos:column="13">if <condition pos:line="2748" pos:column="16">(<expr><name pos:line="2748" pos:column="17">obj</name> <op:operator pos:line="2748" pos:column="21">!=</op:operator> <name pos:line="2748" pos:column="24">null</name></expr>)</condition><then pos:line="2748" pos:column="29">
            <block pos:line="2749" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="2750" pos:column="17">var</name></type> <name pos:line="2750" pos:column="21">subDynamic</name> <init pos:line="2750" pos:column="32">= <expr><name pos:line="2750" pos:column="34">obj</name> <op:operator pos:line="2750" pos:column="38">as</op:operator> <name pos:line="2750" pos:column="41">DynamicParameters</name></expr></init></decl>;</decl_stmt>
                <if pos:line="2751" pos:column="17">if <condition pos:line="2751" pos:column="20">(<expr><name pos:line="2751" pos:column="21">subDynamic</name> <op:operator pos:line="2751" pos:column="32">==</op:operator> <name pos:line="2751" pos:column="35">null</name></expr>)</condition><then pos:line="2751" pos:column="40">
                <block pos:line="2752" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="2753" pos:column="21">var</name></type> <name pos:line="2753" pos:column="25">dictionary</name> <init pos:line="2753" pos:column="36">= <expr><name pos:line="2753" pos:column="38">obj</name> <op:operator pos:line="2753" pos:column="42">as</op:operator> <name><name pos:line="2753" pos:column="45">IEnumerable</name><argument_list pos:line="2753" pos:column="56">&lt;<argument><name><name pos:line="2753" pos:column="57">KeyValuePair</name><argument_list pos:line="2753" pos:column="69">&lt;<argument><name pos:line="2753" pos:column="70">string</name></argument>, <argument><name pos:line="2753" pos:column="78">object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
                    <if pos:line="2754" pos:column="21">if <condition pos:line="2754" pos:column="24">(<expr><name pos:line="2754" pos:column="25">dictionary</name> <op:operator pos:line="2754" pos:column="36">==</op:operator> <name pos:line="2754" pos:column="39">null</name></expr>)</condition><then pos:line="2754" pos:column="44">
                    <block pos:line="2755" pos:column="21">{
                        <expr_stmt><expr><name pos:line="2756" pos:column="25">templates</name> <op:operator pos:line="2756" pos:column="35">=</op:operator> <name pos:line="2756" pos:column="37">templates</name> <op:operator pos:line="2756" pos:column="47">??</op:operator> <op:operator pos:line="2756" pos:column="50">new</op:operator> <call><name><name pos:line="2756" pos:column="54">List</name><argument_list pos:line="2756" pos:column="58">&lt;<argument><name pos:line="2756" pos:column="59">object</name></argument>&gt;</argument_list></name><argument_list pos:line="2756" pos:column="66">()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="2757" pos:column="25">templates</name><op:operator pos:line="2757" pos:column="34">.</op:operator><name pos:line="2757" pos:column="35">Add</name></name><argument_list pos:line="2757" pos:column="38">(<argument><expr><name pos:line="2757" pos:column="39">obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else pos:line="2759" pos:column="21">else
                    <block pos:line="2760" pos:column="21">{
                        <foreach pos:line="2761" pos:column="25">foreach (<init><decl><type><name pos:line="2761" pos:column="34">var</name></type> <name pos:line="2761" pos:column="38">kvp</name> <range pos:line="2761" pos:column="42">in <expr><name pos:line="2761" pos:column="45">dictionary</name></expr></range></decl></init>)
                        <block pos:line="2762" pos:column="25">{
<cpp:if pos:line="2763" pos:column="1">#<cpp:directive pos:line="2763" pos:column="2">if</cpp:directive> <expr><name pos:line="2763" pos:column="5">CSHARP30</name></expr></cpp:if>
                            <expr_stmt><expr><call><name pos:line="2764" pos:column="29">Add</name><argument_list pos:line="2764" pos:column="32">(<argument><expr><name><name pos:line="2764" pos:column="33">kvp</name><op:operator pos:line="2764" pos:column="36">.</op:operator><name pos:line="2764" pos:column="37">Key</name></name></expr></argument>, <argument><expr><name><name pos:line="2764" pos:column="42">kvp</name><op:operator pos:line="2764" pos:column="45">.</op:operator><name pos:line="2764" pos:column="46">Value</name></name></expr></argument>, <argument><expr><name pos:line="2764" pos:column="53">null</name></expr></argument>, <argument><expr><name pos:line="2764" pos:column="59">null</name></expr></argument>, <argument><expr><name pos:line="2764" pos:column="65">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="2765" pos:column="1">#<cpp:directive pos:line="2765" pos:column="2">else</cpp:directive></cpp:else>
                            <expr_stmt><expr><call><name pos:line="2766" pos:column="29">Add</name><argument_list pos:line="2766" pos:column="32">(<argument><expr><name><name pos:line="2766" pos:column="33">kvp</name><op:operator pos:line="2766" pos:column="36">.</op:operator><name pos:line="2766" pos:column="37">Key</name></name></expr></argument>, <argument><expr><name><name pos:line="2766" pos:column="42">kvp</name><op:operator pos:line="2766" pos:column="45">.</op:operator><name pos:line="2766" pos:column="46">Value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="2767" pos:column="1">#<cpp:directive pos:line="2767" pos:column="2">endif</cpp:directive></cpp:endif>
                        }</block></foreach>
                    }</block></else></if>
                }</block></then>
                <else pos:line="2771" pos:column="17">else
                <block pos:line="2772" pos:column="17">{
                    <if pos:line="2773" pos:column="21">if <condition pos:line="2773" pos:column="24">(<expr><name><name pos:line="2773" pos:column="25">subDynamic</name><op:operator pos:line="2773" pos:column="35">.</op:operator><name pos:line="2773" pos:column="36">parameters</name></name> <op:operator pos:line="2773" pos:column="47">!=</op:operator> <name pos:line="2773" pos:column="50">null</name></expr>)</condition><then pos:line="2773" pos:column="55">
                    <block pos:line="2774" pos:column="21">{
                        <foreach pos:line="2775" pos:column="25">foreach (<init><decl><type><name pos:line="2775" pos:column="34">var</name></type> <name pos:line="2775" pos:column="38">kvp</name> <range pos:line="2775" pos:column="42">in <expr><name><name pos:line="2775" pos:column="45">subDynamic</name><op:operator pos:line="2775" pos:column="55">.</op:operator><name pos:line="2775" pos:column="56">parameters</name></name></expr></range></decl></init>)
                        <block pos:line="2776" pos:column="25">{
                            <expr_stmt><expr><call><name><name pos:line="2777" pos:column="29">parameters</name><op:operator pos:line="2777" pos:column="39">.</op:operator><name pos:line="2777" pos:column="40">Add</name></name><argument_list pos:line="2777" pos:column="43">(<argument><expr><name><name pos:line="2777" pos:column="44">kvp</name><op:operator pos:line="2777" pos:column="47">.</op:operator><name pos:line="2777" pos:column="48">Key</name></name></expr></argument>, <argument><expr><name><name pos:line="2777" pos:column="53">kvp</name><op:operator pos:line="2777" pos:column="56">.</op:operator><name pos:line="2777" pos:column="57">Value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></foreach>
                    }</block></then></if>

                    <if pos:line="2781" pos:column="21">if <condition pos:line="2781" pos:column="24">(<expr><name><name pos:line="2781" pos:column="25">subDynamic</name><op:operator pos:line="2781" pos:column="35">.</op:operator><name pos:line="2781" pos:column="36">templates</name></name> <op:operator pos:line="2781" pos:column="46">!=</op:operator> <name pos:line="2781" pos:column="49">null</name></expr>)</condition><then pos:line="2781" pos:column="54">
                    <block pos:line="2782" pos:column="21">{
                        <expr_stmt><expr><name pos:line="2783" pos:column="25">templates</name> <op:operator pos:line="2783" pos:column="35">=</op:operator> <name pos:line="2783" pos:column="37">templates</name> <op:operator pos:line="2783" pos:column="47">??</op:operator> <op:operator pos:line="2783" pos:column="50">new</op:operator> <call><name><name pos:line="2783" pos:column="54">List</name><argument_list pos:line="2783" pos:column="58">&lt;<argument><name pos:line="2783" pos:column="59">object</name></argument>&gt;</argument_list></name><argument_list pos:line="2783" pos:column="66">()</argument_list></call></expr>;</expr_stmt>
                        <foreach pos:line="2784" pos:column="25">foreach (<init><decl><type><name pos:line="2784" pos:column="34">var</name></type> <name pos:line="2784" pos:column="38">t</name> <range pos:line="2784" pos:column="40">in <expr><name><name pos:line="2784" pos:column="43">subDynamic</name><op:operator pos:line="2784" pos:column="53">.</op:operator><name pos:line="2784" pos:column="54">templates</name></name></expr></range></decl></init>)
                        <block pos:line="2785" pos:column="25">{
                            <expr_stmt><expr><call><name><name pos:line="2786" pos:column="29">templates</name><op:operator pos:line="2786" pos:column="38">.</op:operator><name pos:line="2786" pos:column="39">Add</name></name><argument_list pos:line="2786" pos:column="42">(<argument><expr><name pos:line="2786" pos:column="43">t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></foreach>
                    }</block></then></if>
                }</block></else></if>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="2793" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="2794" pos:column="9">/// Add a parameter to this dynamic parameter list</comment>
        <comment type="line" pos:line="2795" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="2796" pos:column="9">/// &lt;param name="name"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="2797" pos:column="9">/// &lt;param name="value"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="2798" pos:column="9">/// &lt;param name="dbType"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="2799" pos:column="9">/// &lt;param name="direction"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="2800" pos:column="9">/// &lt;param name="size"&gt;&lt;/param&gt;</comment>
        <function><type><specifier pos:line="2801" pos:column="9">public</specifier> <name pos:line="2801" pos:column="16">void</name></type> <name pos:line="2801" pos:column="21">Add</name><parameter_list pos:line="2801" pos:column="24">(
<cpp:if pos:line="2802" pos:column="1">#<cpp:directive pos:line="2802" pos:column="2">if</cpp:directive> <expr><name pos:line="2802" pos:column="5">CSHARP30</name></expr></cpp:if>
            <param><decl><type><name pos:line="2803" pos:column="13">string</name></type> <name pos:line="2803" pos:column="20">name</name></decl></param>, <param><decl><type><name pos:line="2803" pos:column="26">object</name></type> <name pos:line="2803" pos:column="33">value</name></decl></param>, <param><decl><type><name pos:line="2803" pos:column="40">DbType</name><type:modifier pos:line="2803" pos:column="46">?</type:modifier></type> <name pos:line="2803" pos:column="48">dbType</name></decl></param>, <param><decl><type><name pos:line="2803" pos:column="56">ParameterDirection</name><type:modifier pos:line="2803" pos:column="74">?</type:modifier></type> <name pos:line="2803" pos:column="76">direction</name></decl></param>, <param><decl><type><name pos:line="2803" pos:column="87">int</name><type:modifier pos:line="2803" pos:column="90">?</type:modifier></type> <name pos:line="2803" pos:column="92">size</name>
<cpp:else pos:line="2804" pos:column="1">#<cpp:directive pos:line="2804" pos:column="2">else</cpp:directive></cpp:else>
<name pos:line="2805" pos:column="1">string</name> <name pos:line="2805" pos:column="8">name</name></decl></param>, <param><decl><type><name pos:line="2805" pos:column="14">object</name></type> <name pos:line="2805" pos:column="21">value</name> <init pos:line="2805" pos:column="27">= <expr><name pos:line="2805" pos:column="29">null</name></expr></init></decl></param>, <name pos:line="2805" pos:column="35">DbType</name><type:modifier pos:line="2805" pos:column="41">?</type:modifier> <name pos:line="2805" pos:column="43">dbType</name> <op:operator pos:line="2805" pos:column="50">=</op:operator> <name pos:line="2805" pos:column="52">null</name>, <name pos:line="2805" pos:column="58">ParameterDirection</name><type:modifier pos:line="2805" pos:column="76">?</type:modifier> <name pos:line="2805" pos:column="78">direction</name> <op:operator pos:line="2805" pos:column="88">=</op:operator> <name pos:line="2805" pos:column="90">null</name>, <name pos:line="2805" pos:column="96">int</name><type:modifier pos:line="2805" pos:column="99">?</type:modifier> <name pos:line="2805" pos:column="101">size</name> <op:operator pos:line="2805" pos:column="106">=</op:operator> <name pos:line="2805" pos:column="108">null</name>
<cpp:endif pos:line="2806" pos:column="1">#<cpp:directive pos:line="2806" pos:column="2">endif</cpp:directive></cpp:endif>
)</parameter_list>
        <block pos:line="2808" pos:column="9">{
            <expr_stmt><expr><name><name pos:line="2809" pos:column="13">parameters</name><index pos:line="2809" pos:column="23">[<expr><call><name pos:line="2809" pos:column="24">Clean</name><argument_list pos:line="2809" pos:column="29">(<argument><expr><name pos:line="2809" pos:column="30">name</name></expr></argument>)</argument_list></call></expr>]</index></name> <op:operator pos:line="2809" pos:column="37">=</op:operator> <op:operator pos:line="2809" pos:column="39">new</op:operator> <call><name pos:line="2809" pos:column="43">ParamInfo</name><argument_list pos:line="2809" pos:column="52">()</argument_list></call> <block pos:line="2809" pos:column="55">{ <expr><name pos:line="2809" pos:column="57">Name</name> <op:operator pos:line="2809" pos:column="62">=</op:operator> <name pos:line="2809" pos:column="64">name</name></expr><op:operator pos:line="2809" pos:column="68">,</op:operator> <expr><name pos:line="2809" pos:column="70">Value</name> <op:operator pos:line="2809" pos:column="76">=</op:operator> <name pos:line="2809" pos:column="78">value</name></expr><op:operator pos:line="2809" pos:column="83">,</op:operator> <expr><name pos:line="2809" pos:column="85">ParameterDirection</name> <op:operator pos:line="2809" pos:column="104">=</op:operator> <name pos:line="2809" pos:column="106">direction</name> <op:operator pos:line="2809" pos:column="116">??</op:operator> <name><name pos:line="2809" pos:column="119">ParameterDirection</name><op:operator pos:line="2809" pos:column="137">.</op:operator><name pos:line="2809" pos:column="138">Input</name></name></expr><op:operator pos:line="2809" pos:column="143">,</op:operator> <expr><name pos:line="2809" pos:column="145">DbType</name> <op:operator pos:line="2809" pos:column="152">=</op:operator> <name pos:line="2809" pos:column="154">dbType</name></expr><op:operator pos:line="2809" pos:column="160">,</op:operator> <expr><name pos:line="2809" pos:column="162">Size</name> <op:operator pos:line="2809" pos:column="167">=</op:operator> <name pos:line="2809" pos:column="169">size</name></expr> }</block></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="2812" pos:column="9">static</specifier> <name pos:line="2812" pos:column="16">string</name></type> <name pos:line="2812" pos:column="23">Clean</name><parameter_list pos:line="2812" pos:column="28">(<param><decl><type><name pos:line="2812" pos:column="29">string</name></type> <name pos:line="2812" pos:column="36">name</name></decl></param>)</parameter_list>
        <block pos:line="2813" pos:column="9">{
            <if pos:line="2814" pos:column="13">if <condition pos:line="2814" pos:column="16">(<expr><op:operator pos:line="2814" pos:column="17">!</op:operator><call><name><name pos:line="2814" pos:column="18">string</name><op:operator pos:line="2814" pos:column="24">.</op:operator><name pos:line="2814" pos:column="25">IsNullOrEmpty</name></name><argument_list pos:line="2814" pos:column="38">(<argument><expr><name pos:line="2814" pos:column="39">name</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="2814" pos:column="45">
            <block pos:line="2815" pos:column="13">{
                <switch pos:line="2816" pos:column="17">switch <condition pos:line="2816" pos:column="24">(<expr><name><name pos:line="2816" pos:column="25">name</name><index pos:line="2816" pos:column="29">[<expr><lit:literal type="number" pos:line="2816" pos:column="30">0</lit:literal></expr>]</index></name></expr>)</condition>
                <block pos:line="2817" pos:column="17">{
                    <case pos:line="2818" pos:column="21">case <expr><lit:literal type="char" pos:line="2818" pos:column="26">'@'</lit:literal></expr>:
                    </case><case pos:line="2819" pos:column="21">case <expr><lit:literal type="char" pos:line="2819" pos:column="26">':'</lit:literal></expr>:
                    </case><case pos:line="2820" pos:column="21">case <expr><lit:literal type="char" pos:line="2820" pos:column="26">'?'</lit:literal></expr>:
                        <return pos:line="2821" pos:column="25">return <expr><call><name><name pos:line="2821" pos:column="32">name</name><op:operator pos:line="2821" pos:column="36">.</op:operator><name pos:line="2821" pos:column="37">Substring</name></name><argument_list pos:line="2821" pos:column="46">(<argument><expr><lit:literal type="number" pos:line="2821" pos:column="47">1</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
                </case>}</block></switch>
            }</block></then></if>
            <return pos:line="2824" pos:column="13">return <expr><name pos:line="2824" pos:column="20">name</name></expr>;</return>
        }</block></function>

        <function><type><name pos:line="2827" pos:column="9">void</name></type> <name><name pos:line="2827" pos:column="14">SqlMapper</name><op:operator pos:line="2827" pos:column="23">.</op:operator><name pos:line="2827" pos:column="24">IDynamicParameters</name><op:operator pos:line="2827" pos:column="42">.</op:operator><name pos:line="2827" pos:column="43">AddParameters</name></name><parameter_list pos:line="2827" pos:column="56">(<param><decl><type><name pos:line="2827" pos:column="57">IDbCommand</name></type> <name pos:line="2827" pos:column="68">command</name></decl></param>, <param><decl><type><name><name pos:line="2827" pos:column="77">SqlMapper</name><op:operator pos:line="2827" pos:column="86">.</op:operator><name pos:line="2827" pos:column="87">Identity</name></name></type> <name pos:line="2827" pos:column="96">identity</name></decl></param>)</parameter_list>
        <block pos:line="2828" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="2829" pos:column="13">AddParameters</name><argument_list pos:line="2829" pos:column="26">(<argument><expr><name pos:line="2829" pos:column="27">command</name></expr></argument>, <argument><expr><name pos:line="2829" pos:column="36">identity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="2832" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="2833" pos:column="9">/// Add all the parameters needed to the command just before it executes</comment>
        <comment type="line" pos:line="2834" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="2835" pos:column="9">/// &lt;param name="command"&gt;The raw command prior to execution&lt;/param&gt;</comment>
        <comment type="line" pos:line="2836" pos:column="9">/// &lt;param name="identity"&gt;Information about the query&lt;/param&gt;</comment>
        <function><type><specifier pos:line="2837" pos:column="9">protected</specifier> <name pos:line="2837" pos:column="19">void</name></type> <name pos:line="2837" pos:column="24">AddParameters</name><parameter_list pos:line="2837" pos:column="37">(<param><decl><type><name pos:line="2837" pos:column="38">IDbCommand</name></type> <name pos:line="2837" pos:column="49">command</name></decl></param>, <param><decl><type><name><name pos:line="2837" pos:column="58">SqlMapper</name><op:operator pos:line="2837" pos:column="67">.</op:operator><name pos:line="2837" pos:column="68">Identity</name></name></type> <name pos:line="2837" pos:column="77">identity</name></decl></param>)</parameter_list>
        <block pos:line="2838" pos:column="9">{
            <if pos:line="2839" pos:column="13">if <condition pos:line="2839" pos:column="16">(<expr><name pos:line="2839" pos:column="17">templates</name> <op:operator pos:line="2839" pos:column="27">!=</op:operator> <name pos:line="2839" pos:column="30">null</name></expr>)</condition><then pos:line="2839" pos:column="35">
            <block pos:line="2840" pos:column="13">{
                <foreach pos:line="2841" pos:column="17">foreach (<init><decl><type><name pos:line="2841" pos:column="26">var</name></type> template <range pos:line="2841" pos:column="39">in <expr><name pos:line="2841" pos:column="42">templates</name></expr></range></decl></init>)
                <block pos:line="2842" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="2843" pos:column="21">var</name></type> <name pos:line="2843" pos:column="25">newIdent</name> <init pos:line="2843" pos:column="34">= <macro><name pos:line="2843" pos:column="36">identity</name></macro><expr><op:operator pos:line="2843" pos:column="44">.</op:operator><macro><name pos:line="2843" pos:column="45">ForDynamicParameters</name><argument_list pos:line="2843" pos:column="65">(<argument pos:line="2843" pos:column="66">template.GetType()</argument>)</argument_list></macro></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name pos:line="2844" pos:column="21">Action</name><argument_list pos:line="2844" pos:column="27">&lt;<argument><name pos:line="2844" pos:column="28">IDbCommand</name></argument>, <argument><name pos:line="2844" pos:column="40">object</name></argument>&gt;</argument_list></name></type> <name pos:line="2844" pos:column="48">appender</name></decl>;</decl_stmt>

                    <lock pos:line="2846" pos:column="21">lock (<expr><name pos:line="2846" pos:column="27">paramReaderCache</name></expr>)
                    <block pos:line="2847" pos:column="21">{
                        <if pos:line="2848" pos:column="25">if <condition pos:line="2848" pos:column="28">(<expr><op:operator pos:line="2848" pos:column="29">!</op:operator><call><name><name pos:line="2848" pos:column="30">paramReaderCache</name><op:operator pos:line="2848" pos:column="46">.</op:operator><name pos:line="2848" pos:column="47">TryGetValue</name></name><argument_list pos:line="2848" pos:column="58">(<argument><expr><name pos:line="2848" pos:column="59">newIdent</name></expr></argument>, <argument><expr pos:line="2848" pos:column="69">out <name pos:line="2848" pos:column="73">appender</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="2848" pos:column="83">
                        <block pos:line="2849" pos:column="25">{
                            <expr_stmt><expr><name pos:line="2850" pos:column="29">appender</name> <op:operator pos:line="2850" pos:column="38">=</op:operator> <call><name><name pos:line="2850" pos:column="40">SqlMapper</name><op:operator pos:line="2850" pos:column="49">.</op:operator><name pos:line="2850" pos:column="50">CreateParamInfoGenerator</name></name><argument_list pos:line="2850" pos:column="74">(<argument><expr><name pos:line="2850" pos:column="75">newIdent</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="2850" pos:column="85">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name pos:line="2851" pos:column="29">paramReaderCache</name><index pos:line="2851" pos:column="45">[<expr><name pos:line="2851" pos:column="46">newIdent</name></expr>]</index></name> <op:operator pos:line="2851" pos:column="56">=</op:operator> <name pos:line="2851" pos:column="58">appender</name></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></lock>

                    <macro><name pos:line="2855" pos:column="21">appender</name><argument_list pos:line="2855" pos:column="29">(<argument pos:line="2855" pos:column="30">command</argument>, <argument pos:line="2855" pos:column="39">template</argument>)</argument_list></macro><empty_stmt pos:line="2855" pos:column="48">;</empty_stmt>
                }</block></foreach>
            }</block></then></if>

            <foreach pos:line="2859" pos:column="13">foreach (<init><decl><type><name pos:line="2859" pos:column="22">var</name></type> <name pos:line="2859" pos:column="26">param</name> <range pos:line="2859" pos:column="32">in <expr><name><name pos:line="2859" pos:column="35">parameters</name><op:operator pos:line="2859" pos:column="45">.</op:operator><name pos:line="2859" pos:column="46">Values</name></name></expr></range></decl></init>)
            <block pos:line="2860" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="2861" pos:column="17">var</name></type> <name pos:line="2861" pos:column="21">dbType</name> <init pos:line="2861" pos:column="28">= <expr><name><name pos:line="2861" pos:column="30">param</name><op:operator pos:line="2861" pos:column="35">.</op:operator><name pos:line="2861" pos:column="36">DbType</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="2862" pos:column="17">var</name></type> <name pos:line="2862" pos:column="21">val</name> <init pos:line="2862" pos:column="25">= <expr><name><name pos:line="2862" pos:column="27">param</name><op:operator pos:line="2862" pos:column="32">.</op:operator><name pos:line="2862" pos:column="33">Value</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="2863" pos:column="17">string</name></type> <name pos:line="2863" pos:column="24">name</name> <init pos:line="2863" pos:column="29">= <expr><call><name pos:line="2863" pos:column="31">Clean</name><argument_list pos:line="2863" pos:column="36">(<argument><expr><name><name pos:line="2863" pos:column="37">param</name><op:operator pos:line="2863" pos:column="42">.</op:operator><name pos:line="2863" pos:column="43">Name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if pos:line="2865" pos:column="17">if <condition pos:line="2865" pos:column="20">(<expr><name pos:line="2865" pos:column="21">dbType</name> <op:operator pos:line="2865" pos:column="28">==</op:operator> <name pos:line="2865" pos:column="31">null</name> <op:operator pos:line="2865" pos:column="36">&amp;&amp;</op:operator> <name pos:line="2865" pos:column="39">val</name> <op:operator pos:line="2865" pos:column="43">!=</op:operator> <name pos:line="2865" pos:column="46">null</name></expr>)</condition><then pos:line="2865" pos:column="51"> <expr_stmt><expr><name pos:line="2865" pos:column="52">dbType</name> <op:operator pos:line="2865" pos:column="59">=</op:operator> <call><name><name pos:line="2865" pos:column="61">SqlMapper</name><op:operator pos:line="2865" pos:column="70">.</op:operator><name pos:line="2865" pos:column="71">LookupDbType</name></name><argument_list pos:line="2865" pos:column="83">(<argument><expr><call><name><name pos:line="2865" pos:column="84">val</name><op:operator pos:line="2865" pos:column="87">.</op:operator><name pos:line="2865" pos:column="88">GetType</name></name><argument_list pos:line="2865" pos:column="95">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="2865" pos:column="99">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

                <if pos:line="2867" pos:column="17">if <condition pos:line="2867" pos:column="20">(<expr><name pos:line="2867" pos:column="21">dbType</name> <op:operator pos:line="2867" pos:column="28">==</op:operator> <name><name pos:line="2867" pos:column="31">DynamicParameters</name><op:operator pos:line="2867" pos:column="48">.</op:operator><name pos:line="2867" pos:column="49">EnumerableMultiParameter</name></name></expr>)</condition><then pos:line="2867" pos:column="74">
                <block pos:line="2868" pos:column="17">{
<cpp:pragma pos:line="2869" pos:column="1">#<cpp:directive pos:line="2869" pos:column="2">pragma</cpp:directive> warning disable 612, 618</cpp:pragma>
                    <expr_stmt><expr><call><name><name pos:line="2870" pos:column="21">SqlMapper</name><op:operator pos:line="2870" pos:column="30">.</op:operator><name pos:line="2870" pos:column="31">PackListParameters</name></name><argument_list pos:line="2870" pos:column="49">(<argument><expr><name pos:line="2870" pos:column="50">command</name></expr></argument>, <argument><expr><name pos:line="2870" pos:column="59">name</name></expr></argument>, <argument><expr><name pos:line="2870" pos:column="65">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:pragma pos:line="2871" pos:column="1">#<cpp:directive pos:line="2871" pos:column="2">pragma</cpp:directive> warning restore 612, 618</cpp:pragma>
                }</block></then>
                <else pos:line="2873" pos:column="17">else
                <block pos:line="2874" pos:column="17">{

                    <decl_stmt><decl><type><name pos:line="2876" pos:column="21">bool</name></type> <name pos:line="2876" pos:column="26">add</name> <init pos:line="2876" pos:column="30">= <expr><op:operator pos:line="2876" pos:column="32">!</op:operator><call><name><name pos:line="2876" pos:column="33">command</name><op:operator pos:line="2876" pos:column="40">.</op:operator><name pos:line="2876" pos:column="41">Parameters</name><op:operator pos:line="2876" pos:column="51">.</op:operator><name pos:line="2876" pos:column="52">Contains</name></name><argument_list pos:line="2876" pos:column="60">(<argument><expr><name pos:line="2876" pos:column="61">name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="2877" pos:column="21">IDbDataParameter</name></type> <name pos:line="2877" pos:column="38">p</name></decl>;</decl_stmt>
                    <if pos:line="2878" pos:column="21">if <condition pos:line="2878" pos:column="24">(<expr><name pos:line="2878" pos:column="25">add</name></expr>)</condition><then pos:line="2878" pos:column="29">
                    <block pos:line="2879" pos:column="21">{
                        <expr_stmt><expr><name pos:line="2880" pos:column="25">p</name> <op:operator pos:line="2880" pos:column="27">=</op:operator> <call><name><name pos:line="2880" pos:column="29">command</name><op:operator pos:line="2880" pos:column="36">.</op:operator><name pos:line="2880" pos:column="37">CreateParameter</name></name><argument_list pos:line="2880" pos:column="52">()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name pos:line="2881" pos:column="25">p</name><op:operator pos:line="2881" pos:column="26">.</op:operator><name pos:line="2881" pos:column="27">ParameterName</name></name> <op:operator pos:line="2881" pos:column="41">=</op:operator> <name pos:line="2881" pos:column="43">name</name></expr>;</expr_stmt>
                    }</block></then>
                    <else pos:line="2883" pos:column="21">else
                    <block pos:line="2884" pos:column="21">{
                        <expr_stmt><expr><name pos:line="2885" pos:column="25">p</name> <op:operator pos:line="2885" pos:column="27">=</op:operator> <op:operator pos:line="2885" pos:column="29">(</op:operator><name pos:line="2885" pos:column="30">IDbDataParameter</name><op:operator pos:line="2885" pos:column="46">)</op:operator><name><name pos:line="2885" pos:column="47">command</name><op:operator pos:line="2885" pos:column="54">.</op:operator><name pos:line="2885" pos:column="55">Parameters</name><index pos:line="2885" pos:column="65">[<expr><name pos:line="2885" pos:column="66">name</name></expr>]</index></name></expr>;</expr_stmt>
                    }</block></else></if>

                    <expr_stmt><expr><name><name pos:line="2888" pos:column="21">p</name><op:operator pos:line="2888" pos:column="22">.</op:operator><name pos:line="2888" pos:column="23">Value</name></name> <op:operator pos:line="2888" pos:column="29">=</op:operator> <name pos:line="2888" pos:column="31">val</name> <op:operator pos:line="2888" pos:column="35">??</op:operator> <name><name pos:line="2888" pos:column="38">DBNull</name><op:operator pos:line="2888" pos:column="44">.</op:operator><name pos:line="2888" pos:column="45">Value</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="2889" pos:column="21">p</name><op:operator pos:line="2889" pos:column="22">.</op:operator><name pos:line="2889" pos:column="23">Direction</name></name> <op:operator pos:line="2889" pos:column="33">=</op:operator> <name><name pos:line="2889" pos:column="35">param</name><op:operator pos:line="2889" pos:column="40">.</op:operator><name pos:line="2889" pos:column="41">ParameterDirection</name></name></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name pos:line="2890" pos:column="21">var</name></type> <name pos:line="2890" pos:column="25">s</name> <init pos:line="2890" pos:column="27">= <expr><name pos:line="2890" pos:column="29">val</name> <op:operator pos:line="2890" pos:column="33">as</op:operator> <name pos:line="2890" pos:column="36">string</name></expr></init></decl>;</decl_stmt>
                    <if pos:line="2891" pos:column="21">if <condition pos:line="2891" pos:column="24">(<expr><name pos:line="2891" pos:column="25">s</name> <op:operator pos:line="2891" pos:column="27">!=</op:operator> <name pos:line="2891" pos:column="30">null</name></expr>)</condition><then pos:line="2891" pos:column="35">
                    <block pos:line="2892" pos:column="21">{
                        <if pos:line="2893" pos:column="25">if <condition pos:line="2893" pos:column="28">(<expr><name><name pos:line="2893" pos:column="29">s</name><op:operator pos:line="2893" pos:column="30">.</op:operator><name pos:line="2893" pos:column="31">Length</name></name> <op:operator pos:line="2893" pos:column="38">&lt;=</op:operator> <lit:literal type="number" pos:line="2893" pos:column="41">4000</lit:literal></expr>)</condition><then pos:line="2893" pos:column="46">
                        <block pos:line="2894" pos:column="25">{
                            <expr_stmt><expr><name><name pos:line="2895" pos:column="29">p</name><op:operator pos:line="2895" pos:column="30">.</op:operator><name pos:line="2895" pos:column="31">Size</name></name> <op:operator pos:line="2895" pos:column="36">=</op:operator> <lit:literal type="number" pos:line="2895" pos:column="38">4000</lit:literal></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></then></if>
                    <if pos:line="2898" pos:column="21">if <condition pos:line="2898" pos:column="24">(<expr><name><name pos:line="2898" pos:column="25">param</name><op:operator pos:line="2898" pos:column="30">.</op:operator><name pos:line="2898" pos:column="31">Size</name></name> <op:operator pos:line="2898" pos:column="36">!=</op:operator> <name pos:line="2898" pos:column="39">null</name></expr>)</condition><then pos:line="2898" pos:column="44">
                    <block pos:line="2899" pos:column="21">{
                        <expr_stmt><expr><name><name pos:line="2900" pos:column="25">p</name><op:operator pos:line="2900" pos:column="26">.</op:operator><name pos:line="2900" pos:column="27">Size</name></name> <op:operator pos:line="2900" pos:column="32">=</op:operator> <name><name pos:line="2900" pos:column="34">param</name><op:operator pos:line="2900" pos:column="39">.</op:operator><name pos:line="2900" pos:column="40">Size</name><op:operator pos:line="2900" pos:column="44">.</op:operator><name pos:line="2900" pos:column="45">Value</name></name></expr>;</expr_stmt>
                    }</block></then></if>
                    <if pos:line="2902" pos:column="21">if <condition pos:line="2902" pos:column="24">(<expr><name pos:line="2902" pos:column="25">dbType</name> <op:operator pos:line="2902" pos:column="32">!=</op:operator> <name pos:line="2902" pos:column="35">null</name></expr>)</condition><then pos:line="2902" pos:column="40">
                    <block pos:line="2903" pos:column="21">{
                        <expr_stmt><expr><name><name pos:line="2904" pos:column="25">p</name><op:operator pos:line="2904" pos:column="26">.</op:operator><name pos:line="2904" pos:column="27">DbType</name></name> <op:operator pos:line="2904" pos:column="34">=</op:operator> <name><name pos:line="2904" pos:column="36">dbType</name><op:operator pos:line="2904" pos:column="42">.</op:operator><name pos:line="2904" pos:column="43">Value</name></name></expr>;</expr_stmt>
                    }</block></then></if>
                    <if pos:line="2906" pos:column="21">if <condition pos:line="2906" pos:column="24">(<expr><name pos:line="2906" pos:column="25">add</name></expr>)</condition><then pos:line="2906" pos:column="29">
                    <block pos:line="2907" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="2908" pos:column="25">command</name><op:operator pos:line="2908" pos:column="32">.</op:operator><name pos:line="2908" pos:column="33">Parameters</name><op:operator pos:line="2908" pos:column="43">.</op:operator><name pos:line="2908" pos:column="44">Add</name></name><argument_list pos:line="2908" pos:column="47">(<argument><expr><name pos:line="2908" pos:column="48">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <expr_stmt><expr><name><name pos:line="2910" pos:column="21">param</name><op:operator pos:line="2910" pos:column="26">.</op:operator><name pos:line="2910" pos:column="27">AttachedParam</name></name> <op:operator pos:line="2910" pos:column="41">=</op:operator> <name pos:line="2910" pos:column="43">p</name></expr>;</expr_stmt>
                }</block></else></if>

            }</block></foreach>
        }</block></function>

        <comment type="line" pos:line="2916" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="2917" pos:column="9">/// All the names of the param in the bag, use Get to yank them out</comment>
        <comment type="line" pos:line="2918" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="2919" pos:column="9">public</specifier> <name><name pos:line="2919" pos:column="16">IEnumerable</name><argument_list pos:line="2919" pos:column="27">&lt;<argument><name pos:line="2919" pos:column="28">string</name></argument>&gt;</argument_list></name></type> <name pos:line="2919" pos:column="36">ParameterNames</name>
        <block pos:line="2920" pos:column="9">{
            <function><name pos:line="2921" pos:column="13">get</name>
            <block pos:line="2922" pos:column="13">{
                <return pos:line="2923" pos:column="17">return <expr><call><name><name pos:line="2923" pos:column="24">parameters</name><op:operator pos:line="2923" pos:column="34">.</op:operator><name pos:line="2923" pos:column="35">Select</name></name><argument_list pos:line="2923" pos:column="41">(<argument><expr><lambda><name pos:line="2923" pos:column="42">p</name> <op:operator pos:line="2923" pos:column="44">=&gt;</op:operator> <name><name pos:line="2923" pos:column="47">p</name><op:operator pos:line="2923" pos:column="48">.</op:operator><name pos:line="2923" pos:column="49">Key</name></name></lambda></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>


        <comment type="line" pos:line="2928" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="2929" pos:column="9">/// Get the value of a parameter</comment>
        <comment type="line" pos:line="2930" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="2931" pos:column="9">/// &lt;typeparam name="T"&gt;&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="2932" pos:column="9">/// &lt;param name="name"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="2933" pos:column="9">/// &lt;returns&gt;The value, note DBNull.Value is not returned, instead the value is returned as null&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="2934" pos:column="9">public</specifier> <name pos:line="2934" pos:column="16">T</name></type> <name><name pos:line="2934" pos:column="18">Get</name><argument_list pos:line="2934" pos:column="21">&lt;<argument><name pos:line="2934" pos:column="22">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="2934" pos:column="24">(<param><decl><type><name pos:line="2934" pos:column="25">string</name></type> <name pos:line="2934" pos:column="32">name</name></decl></param>)</parameter_list>
        <block pos:line="2935" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="2936" pos:column="13">var</name></type> <name pos:line="2936" pos:column="17">val</name> <init pos:line="2936" pos:column="21">= <expr><name><name pos:line="2936" pos:column="23">parameters</name><index pos:line="2936" pos:column="33">[<expr><call><name pos:line="2936" pos:column="34">Clean</name><argument_list pos:line="2936" pos:column="39">(<argument><expr><name pos:line="2936" pos:column="40">name</name></expr></argument>)</argument_list></call></expr>]</index></name><op:operator pos:line="2936" pos:column="46">.</op:operator><name><name pos:line="2936" pos:column="47">AttachedParam</name><op:operator pos:line="2936" pos:column="60">.</op:operator><name pos:line="2936" pos:column="61">Value</name></name></expr></init></decl>;</decl_stmt>
            <if pos:line="2937" pos:column="13">if <condition pos:line="2937" pos:column="16">(<expr><name pos:line="2937" pos:column="17">val</name> <op:operator pos:line="2937" pos:column="21">==</op:operator> <name><name pos:line="2937" pos:column="24">DBNull</name><op:operator pos:line="2937" pos:column="30">.</op:operator><name pos:line="2937" pos:column="31">Value</name></name></expr>)</condition><then pos:line="2937" pos:column="37">
            <block pos:line="2938" pos:column="13">{
                <if pos:line="2939" pos:column="17">if <condition pos:line="2939" pos:column="20">(<expr><call><name pos:line="2939" pos:column="21">default</name><argument_list pos:line="2939" pos:column="28">(<argument><expr><name pos:line="2939" pos:column="29">T</name></expr></argument>)</argument_list></call> <op:operator pos:line="2939" pos:column="32">!=</op:operator> <name pos:line="2939" pos:column="35">null</name></expr>)</condition><then pos:line="2939" pos:column="40">
                <block pos:line="2940" pos:column="17">{
                    <throw pos:line="2941" pos:column="21">throw <expr><op:operator pos:line="2941" pos:column="27">new</op:operator> <call><name pos:line="2941" pos:column="31">ApplicationException</name><argument_list pos:line="2941" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="2941" pos:column="52">"Attempting to cast a DBNull to a non nullable type!"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
                <return pos:line="2943" pos:column="17">return <expr><call><name pos:line="2943" pos:column="24">default</name><argument_list pos:line="2943" pos:column="31">(<argument><expr><name pos:line="2943" pos:column="32">T</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
            <return pos:line="2945" pos:column="13">return <expr><op:operator pos:line="2945" pos:column="20">(</op:operator><name pos:line="2945" pos:column="21">T</name><op:operator pos:line="2945" pos:column="22">)</op:operator><name pos:line="2945" pos:column="23">val</name></expr>;</return>
        }</block></function>
    }</block></class>

    <comment type="line" pos:line="2949" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="2950" pos:column="5">/// This class represents a SQL string, it can be used if you need to denote your parameter is a Char vs VarChar vs nVarChar vs nChar</comment>
    <comment type="line" pos:line="2951" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="2952" pos:column="5">sealed</specifier> <specifier pos:line="2952" pos:column="12">partial</specifier> class <name pos:line="2952" pos:column="26">DbString</name>
    <block pos:line="2953" pos:column="5">{
        <comment type="line" pos:line="2954" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="2955" pos:column="9">/// Create a new DbString</comment>
        <comment type="line" pos:line="2956" pos:column="9">/// &lt;/summary&gt;</comment>
        <constructor><specifier pos:line="2957" pos:column="9">public</specifier> <name pos:line="2957" pos:column="16">DbString</name><parameter_list pos:line="2957" pos:column="24">()</parameter_list> <block pos:line="2957" pos:column="27">{ <expr_stmt><expr><name pos:line="2957" pos:column="29">Length</name> <op:operator pos:line="2957" pos:column="36">=</op:operator> <op:operator pos:line="2957" pos:column="38">-</op:operator><lit:literal type="number" pos:line="2957" pos:column="39">1</lit:literal></expr>;</expr_stmt> }</block></constructor>
        <comment type="line" pos:line="2958" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="2959" pos:column="9">/// Ansi vs Unicode </comment>
        <comment type="line" pos:line="2960" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="2961" pos:column="9">public</specifier> <name pos:line="2961" pos:column="16">bool</name></type> <name pos:line="2961" pos:column="21">IsAnsi</name> <block pos:line="2961" pos:column="28">{ <function_decl><name pos:line="2961" pos:column="30">get</name>;</function_decl> <function_decl><name pos:line="2961" pos:column="35">set</name>;</function_decl> }</block></decl></decl_stmt>
        <comment type="line" pos:line="2962" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="2963" pos:column="9">/// Fixed length </comment>
        <comment type="line" pos:line="2964" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="2965" pos:column="9">public</specifier> <name pos:line="2965" pos:column="16">bool</name></type> <name pos:line="2965" pos:column="21">IsFixedLength</name> <block pos:line="2965" pos:column="35">{ <function_decl><name pos:line="2965" pos:column="37">get</name>;</function_decl> <function_decl><name pos:line="2965" pos:column="42">set</name>;</function_decl> }</block></decl></decl_stmt>
        <comment type="line" pos:line="2966" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="2967" pos:column="9">/// Length of the string -1 for max</comment>
        <comment type="line" pos:line="2968" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="2969" pos:column="9">public</specifier> <name pos:line="2969" pos:column="16">int</name></type> <name pos:line="2969" pos:column="20">Length</name> <block pos:line="2969" pos:column="27">{ <function_decl><name pos:line="2969" pos:column="29">get</name>;</function_decl> <function_decl><name pos:line="2969" pos:column="34">set</name>;</function_decl> }</block></decl></decl_stmt>
        <comment type="line" pos:line="2970" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="2971" pos:column="9">/// The value of the string</comment>
        <comment type="line" pos:line="2972" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="2973" pos:column="9">public</specifier> <name pos:line="2973" pos:column="16">string</name></type> <name pos:line="2973" pos:column="23">Value</name> <block pos:line="2973" pos:column="29">{ <function_decl><name pos:line="2973" pos:column="31">get</name>;</function_decl> <function_decl><name pos:line="2973" pos:column="36">set</name>;</function_decl> }</block></decl></decl_stmt>
        <comment type="line" pos:line="2974" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="2975" pos:column="9">/// Add the parameter to the command... internal use only</comment>
        <comment type="line" pos:line="2976" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="2977" pos:column="9">/// &lt;param name="command"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="2978" pos:column="9">/// &lt;param name="name"&gt;&lt;/param&gt;</comment>
        <function><type><specifier pos:line="2979" pos:column="9">public</specifier> <name pos:line="2979" pos:column="16">void</name></type> <name pos:line="2979" pos:column="21">AddParameter</name><parameter_list pos:line="2979" pos:column="33">(<param><decl><type><name pos:line="2979" pos:column="34">IDbCommand</name></type> <name pos:line="2979" pos:column="45">command</name></decl></param>, <param><decl><type><name pos:line="2979" pos:column="54">string</name></type> <name pos:line="2979" pos:column="61">name</name></decl></param>)</parameter_list>
        <block pos:line="2980" pos:column="9">{
            <if pos:line="2981" pos:column="13">if <condition pos:line="2981" pos:column="16">(<expr><name pos:line="2981" pos:column="17">IsFixedLength</name> <op:operator pos:line="2981" pos:column="31">&amp;&amp;</op:operator> <name pos:line="2981" pos:column="34">Length</name> <op:operator pos:line="2981" pos:column="41">==</op:operator> <op:operator pos:line="2981" pos:column="44">-</op:operator><lit:literal type="number" pos:line="2981" pos:column="45">1</lit:literal></expr>)</condition><then pos:line="2981" pos:column="47">
            <block pos:line="2982" pos:column="13">{
                <throw pos:line="2983" pos:column="17">throw <expr><op:operator pos:line="2983" pos:column="23">new</op:operator> <call><name pos:line="2983" pos:column="27">InvalidOperationException</name><argument_list pos:line="2983" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="2983" pos:column="53">"If specifying IsFixedLength,  a Length must also be specified"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <decl_stmt><decl><type><name pos:line="2985" pos:column="13">var</name></type> <name pos:line="2985" pos:column="17">param</name> <init pos:line="2985" pos:column="23">= <expr><call><name><name pos:line="2985" pos:column="25">command</name><op:operator pos:line="2985" pos:column="32">.</op:operator><name pos:line="2985" pos:column="33">CreateParameter</name></name><argument_list pos:line="2985" pos:column="48">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="2986" pos:column="13">param</name><op:operator pos:line="2986" pos:column="18">.</op:operator><name pos:line="2986" pos:column="19">ParameterName</name></name> <op:operator pos:line="2986" pos:column="33">=</op:operator> <name pos:line="2986" pos:column="35">name</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="2987" pos:column="13">param</name><op:operator pos:line="2987" pos:column="18">.</op:operator><name pos:line="2987" pos:column="19">Value</name></name> <op:operator pos:line="2987" pos:column="25">=</op:operator> <op:operator pos:line="2987" pos:column="27">(</op:operator><name pos:line="2987" pos:column="28">object</name><op:operator pos:line="2987" pos:column="34">)</op:operator><name pos:line="2987" pos:column="35">Value</name> <op:operator pos:line="2987" pos:column="41">??</op:operator> <name><name pos:line="2987" pos:column="44">DBNull</name><op:operator pos:line="2987" pos:column="50">.</op:operator><name pos:line="2987" pos:column="51">Value</name></name></expr>;</expr_stmt>
            <if pos:line="2988" pos:column="13">if <condition pos:line="2988" pos:column="16">(<expr><name pos:line="2988" pos:column="17">Length</name> <op:operator pos:line="2988" pos:column="24">==</op:operator> <op:operator pos:line="2988" pos:column="27">-</op:operator><lit:literal type="number" pos:line="2988" pos:column="28">1</lit:literal> <op:operator pos:line="2988" pos:column="30">&amp;&amp;</op:operator> <name pos:line="2988" pos:column="33">Value</name> <op:operator pos:line="2988" pos:column="39">!=</op:operator> <name pos:line="2988" pos:column="42">null</name> <op:operator pos:line="2988" pos:column="47">&amp;&amp;</op:operator> <name><name pos:line="2988" pos:column="50">Value</name><op:operator pos:line="2988" pos:column="55">.</op:operator><name pos:line="2988" pos:column="56">Length</name></name> <op:operator pos:line="2988" pos:column="63">&lt;=</op:operator> <lit:literal type="number" pos:line="2988" pos:column="66">4000</lit:literal></expr>)</condition><then pos:line="2988" pos:column="71">
            <block pos:line="2989" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="2990" pos:column="17">param</name><op:operator pos:line="2990" pos:column="22">.</op:operator><name pos:line="2990" pos:column="23">Size</name></name> <op:operator pos:line="2990" pos:column="28">=</op:operator> <lit:literal type="number" pos:line="2990" pos:column="30">4000</lit:literal></expr>;</expr_stmt>
            }</block></then>
            <else pos:line="2992" pos:column="13">else
            <block pos:line="2993" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="2994" pos:column="17">param</name><op:operator pos:line="2994" pos:column="22">.</op:operator><name pos:line="2994" pos:column="23">Size</name></name> <op:operator pos:line="2994" pos:column="28">=</op:operator> <name pos:line="2994" pos:column="30">Length</name></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><name><name pos:line="2996" pos:column="13">param</name><op:operator pos:line="2996" pos:column="18">.</op:operator><name pos:line="2996" pos:column="19">DbType</name></name> <op:operator pos:line="2996" pos:column="26">=</op:operator> <name pos:line="2996" pos:column="28">IsAnsi</name> <op:operator pos:line="2996" pos:column="35">?</op:operator> <op:operator pos:line="2996" pos:column="37">(</op:operator><name pos:line="2996" pos:column="38">IsFixedLength</name> <op:operator pos:line="2996" pos:column="52">?</op:operator> <name><name pos:line="2996" pos:column="54">DbType</name><op:operator pos:line="2996" pos:column="60">.</op:operator><name pos:line="2996" pos:column="61">AnsiStringFixedLength</name></name> <op:operator pos:line="2996" pos:column="83">:</op:operator> <name><name pos:line="2996" pos:column="85">DbType</name><op:operator pos:line="2996" pos:column="91">.</op:operator><name pos:line="2996" pos:column="92">AnsiString</name></name><op:operator pos:line="2996" pos:column="102">)</op:operator> <op:operator pos:line="2996" pos:column="104">:</op:operator> <op:operator pos:line="2996" pos:column="106">(</op:operator><name pos:line="2996" pos:column="107">IsFixedLength</name> <op:operator pos:line="2996" pos:column="121">?</op:operator> <name><name pos:line="2996" pos:column="123">DbType</name><op:operator pos:line="2996" pos:column="129">.</op:operator><name pos:line="2996" pos:column="130">StringFixedLength</name></name> <op:operator pos:line="2996" pos:column="148">:</op:operator> <name><name pos:line="2996" pos:column="150">DbType</name><op:operator pos:line="2996" pos:column="156">.</op:operator><name pos:line="2996" pos:column="157">String</name></name><op:operator pos:line="2996" pos:column="163">)</op:operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="2997" pos:column="13">command</name><op:operator pos:line="2997" pos:column="20">.</op:operator><name pos:line="2997" pos:column="21">Parameters</name><op:operator pos:line="2997" pos:column="31">.</op:operator><name pos:line="2997" pos:column="32">Add</name></name><argument_list pos:line="2997" pos:column="35">(<argument><expr><name pos:line="2997" pos:column="36">param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

    <comment type="line" pos:line="3001" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="3002" pos:column="5">/// Handles variances in features per DBMS</comment>
    <comment type="line" pos:line="3003" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="3004" pos:column="5">partial</specifier> class <name pos:line="3004" pos:column="19">FeatureSupport</name>
    <block pos:line="3005" pos:column="5">{
        <comment type="line" pos:line="3006" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="3007" pos:column="9">/// Dictionary of supported features index by connection type name</comment>
        <comment type="line" pos:line="3008" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="3009" pos:column="9">private</specifier> <specifier pos:line="3009" pos:column="17">static</specifier> <specifier pos:line="3009" pos:column="24">readonly</specifier> <name><name pos:line="3009" pos:column="33">Dictionary</name><argument_list pos:line="3009" pos:column="43">&lt;<argument><name pos:line="3009" pos:column="44">string</name></argument>, <argument><name pos:line="3009" pos:column="52">FeatureSupport</name></argument>&gt;</argument_list></name></type> <name pos:line="3009" pos:column="68">FeatureList</name> <init pos:line="3009" pos:column="80">= <expr><op:operator pos:line="3009" pos:column="82">new</op:operator> <call><name><name pos:line="3009" pos:column="86">Dictionary</name><argument_list pos:line="3009" pos:column="96">&lt;<argument><name pos:line="3009" pos:column="97">string</name></argument>, <argument><name pos:line="3009" pos:column="105">FeatureSupport</name></argument>&gt;</argument_list></name><argument_list pos:line="3009" pos:column="120">(<argument><expr><name><name pos:line="3009" pos:column="121">StringComparer</name><op:operator pos:line="3009" pos:column="135">.</op:operator><name pos:line="3009" pos:column="136">InvariantCultureIgnoreCase</name></name></expr></argument>)</argument_list></call> <block pos:line="3009" pos:column="164">{
				<expr><block pos:line="3010" pos:column="33">{<expr><lit:literal type="string" pos:line="3010" pos:column="34">"sqlserverconnection"</lit:literal></expr>, <expr><op:operator pos:line="3010" pos:column="57">new</op:operator> <name pos:line="3010" pos:column="61">FeatureSupport</name> <block pos:line="3010" pos:column="76">{ <expr><name pos:line="3010" pos:column="78">Arrays</name> <op:operator pos:line="3010" pos:column="85">=</op:operator> <lit:literal type="boolean" pos:line="3010" pos:column="87">false</lit:literal></expr>}</block></expr>}</block></expr>,
				<expr><block pos:line="3011" pos:column="33">{<expr><lit:literal type="string" pos:line="3011" pos:column="34">"npgsqlconnection"</lit:literal></expr>, <expr><op:operator pos:line="3011" pos:column="54">new</op:operator> <name pos:line="3011" pos:column="58">FeatureSupport</name> <block pos:line="3011" pos:column="73">{<expr><name pos:line="3011" pos:column="74">Arrays</name> <op:operator pos:line="3011" pos:column="81">=</op:operator> <lit:literal type="boolean" pos:line="3011" pos:column="83">true</lit:literal></expr>}</block></expr>}</block></expr>
		}</block></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="3014" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="3015" pos:column="9">/// Gets the featureset based on the passed connection</comment>
        <comment type="line" pos:line="3016" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="3017" pos:column="9">public</specifier> <specifier pos:line="3017" pos:column="16">static</specifier> <name pos:line="3017" pos:column="23">FeatureSupport</name></type> <name pos:line="3017" pos:column="38">Get</name><parameter_list pos:line="3017" pos:column="41">(<param><decl><type><name pos:line="3017" pos:column="42">IDbConnection</name></type> <name pos:line="3017" pos:column="56">connection</name></decl></param>)</parameter_list>
        <block pos:line="3018" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="3019" pos:column="13">string</name></type> <name pos:line="3019" pos:column="20">name</name> <init pos:line="3019" pos:column="25">= <expr><call><name><name pos:line="3019" pos:column="27">connection</name><op:operator pos:line="3019" pos:column="37">.</op:operator><name pos:line="3019" pos:column="38">GetType</name></name><argument_list pos:line="3019" pos:column="45">()</argument_list></call><op:operator pos:line="3019" pos:column="47">.</op:operator><name pos:line="3019" pos:column="48">Name</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="3020" pos:column="13">FeatureSupport</name></type> <name pos:line="3020" pos:column="28">features</name></decl>;</decl_stmt>
            <return pos:line="3021" pos:column="13">return <expr><call><name><name pos:line="3021" pos:column="20">FeatureList</name><op:operator pos:line="3021" pos:column="31">.</op:operator><name pos:line="3021" pos:column="32">TryGetValue</name></name><argument_list pos:line="3021" pos:column="43">(<argument><expr><name pos:line="3021" pos:column="44">name</name></expr></argument>, <argument><expr pos:line="3021" pos:column="50">out <name pos:line="3021" pos:column="54">features</name></expr></argument>)</argument_list></call> <op:operator pos:line="3021" pos:column="64">?</op:operator> <name pos:line="3021" pos:column="66">features</name> <op:operator pos:line="3021" pos:column="75">:</op:operator> <call><name><name pos:line="3021" pos:column="77">FeatureList</name><op:operator pos:line="3021" pos:column="88">.</op:operator><name pos:line="3021" pos:column="89">Values</name><op:operator pos:line="3021" pos:column="95">.</op:operator><name pos:line="3021" pos:column="96">First</name></name><argument_list pos:line="3021" pos:column="101">()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="3024" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="3025" pos:column="9">/// True if the db supports array columns e.g. Postgresql</comment>
        <comment type="line" pos:line="3026" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="3027" pos:column="9">public</specifier> <name pos:line="3027" pos:column="16">bool</name></type> <name pos:line="3027" pos:column="21">Arrays</name> <block pos:line="3027" pos:column="28">{ <function_decl><name pos:line="3027" pos:column="30">get</name>;</function_decl> <function_decl><name pos:line="3027" pos:column="35">set</name>;</function_decl> }</block></decl></decl_stmt>
    }</block></class>

    <comment type="line" pos:line="3030" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="3031" pos:column="5">/// Represents simple memeber map for one of target parameter or property or field to source DataReader column</comment>
    <comment type="line" pos:line="3032" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="3033" pos:column="5">sealed</specifier> <specifier pos:line="3033" pos:column="12">partial</specifier> class <name pos:line="3033" pos:column="26">SimpleMemberMap</name> <super pos:line="3033" pos:column="42">: <name><name pos:line="3033" pos:column="44">SqlMapper</name><op:operator pos:line="3033" pos:column="53">.</op:operator><name pos:line="3033" pos:column="54">IMemberMap</name></name></super>
    <block pos:line="3034" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="3035" pos:column="9">private</specifier> <specifier pos:line="3035" pos:column="17">readonly</specifier> <name pos:line="3035" pos:column="26">string</name></type> <name pos:line="3035" pos:column="33">_columnName</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="3036" pos:column="9">private</specifier> <specifier pos:line="3036" pos:column="17">readonly</specifier> <name pos:line="3036" pos:column="26">PropertyInfo</name></type> <name pos:line="3036" pos:column="39">_property</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="3037" pos:column="9">private</specifier> <specifier pos:line="3037" pos:column="17">readonly</specifier> <name pos:line="3037" pos:column="26">FieldInfo</name></type> <name pos:line="3037" pos:column="36">_field</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="3038" pos:column="9">private</specifier> <specifier pos:line="3038" pos:column="17">readonly</specifier> <name pos:line="3038" pos:column="26">ParameterInfo</name></type> <name pos:line="3038" pos:column="40">_parameter</name></decl>;</decl_stmt>

        <comment type="line" pos:line="3040" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="3041" pos:column="9">/// Creates instance for simple property mapping</comment>
        <comment type="line" pos:line="3042" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="3043" pos:column="9">/// &lt;param name="columnName"&gt;DataReader column name&lt;/param&gt;</comment>
        <comment type="line" pos:line="3044" pos:column="9">/// &lt;param name="property"&gt;Target property&lt;/param&gt;</comment>
        <constructor><specifier pos:line="3045" pos:column="9">public</specifier> <name pos:line="3045" pos:column="16">SimpleMemberMap</name><parameter_list pos:line="3045" pos:column="31">(<param><decl><type><name pos:line="3045" pos:column="32">string</name></type> <name pos:line="3045" pos:column="39">columnName</name></decl></param>, <param><decl><type><name pos:line="3045" pos:column="51">PropertyInfo</name></type> <name pos:line="3045" pos:column="64">property</name></decl></param>)</parameter_list>
        <block pos:line="3046" pos:column="9">{
            <if pos:line="3047" pos:column="13">if <condition pos:line="3047" pos:column="16">(<expr><name pos:line="3047" pos:column="17">columnName</name> <op:operator pos:line="3047" pos:column="28">==</op:operator> <name pos:line="3047" pos:column="31">null</name></expr>)</condition><then pos:line="3047" pos:column="36">
                <throw pos:line="3048" pos:column="17">throw <expr><op:operator pos:line="3048" pos:column="23">new</op:operator> <call><name pos:line="3048" pos:column="27">ArgumentNullException</name><argument_list pos:line="3048" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="3048" pos:column="49">"columnName"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <if pos:line="3050" pos:column="13">if <condition pos:line="3050" pos:column="16">(<expr><name pos:line="3050" pos:column="17">property</name> <op:operator pos:line="3050" pos:column="26">==</op:operator> <name pos:line="3050" pos:column="29">null</name></expr>)</condition><then pos:line="3050" pos:column="34">
                <throw pos:line="3051" pos:column="17">throw <expr><op:operator pos:line="3051" pos:column="23">new</op:operator> <call><name pos:line="3051" pos:column="27">ArgumentNullException</name><argument_list pos:line="3051" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="3051" pos:column="49">"property"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <expr_stmt><expr><name pos:line="3053" pos:column="13">_columnName</name> <op:operator pos:line="3053" pos:column="25">=</op:operator> <name pos:line="3053" pos:column="27">columnName</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="3054" pos:column="13">_property</name> <op:operator pos:line="3054" pos:column="23">=</op:operator> <name pos:line="3054" pos:column="25">property</name></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="3057" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="3058" pos:column="9">/// Creates instance for simple field mapping</comment>
        <comment type="line" pos:line="3059" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="3060" pos:column="9">/// &lt;param name="columnName"&gt;DataReader column name&lt;/param&gt;</comment>
        <comment type="line" pos:line="3061" pos:column="9">/// &lt;param name="field"&gt;Target property&lt;/param&gt;</comment>
        <constructor><specifier pos:line="3062" pos:column="9">public</specifier> <name pos:line="3062" pos:column="16">SimpleMemberMap</name><parameter_list pos:line="3062" pos:column="31">(<param><decl><type><name pos:line="3062" pos:column="32">string</name></type> <name pos:line="3062" pos:column="39">columnName</name></decl></param>, <param><decl><type><name pos:line="3062" pos:column="51">FieldInfo</name></type> <name pos:line="3062" pos:column="61">field</name></decl></param>)</parameter_list>
        <block pos:line="3063" pos:column="9">{
            <if pos:line="3064" pos:column="13">if <condition pos:line="3064" pos:column="16">(<expr><name pos:line="3064" pos:column="17">columnName</name> <op:operator pos:line="3064" pos:column="28">==</op:operator> <name pos:line="3064" pos:column="31">null</name></expr>)</condition><then pos:line="3064" pos:column="36">
                <throw pos:line="3065" pos:column="17">throw <expr><op:operator pos:line="3065" pos:column="23">new</op:operator> <call><name pos:line="3065" pos:column="27">ArgumentNullException</name><argument_list pos:line="3065" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="3065" pos:column="49">"columnName"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <if pos:line="3067" pos:column="13">if <condition pos:line="3067" pos:column="16">(<expr><name pos:line="3067" pos:column="17">field</name> <op:operator pos:line="3067" pos:column="23">==</op:operator> <name pos:line="3067" pos:column="26">null</name></expr>)</condition><then pos:line="3067" pos:column="31">
                <throw pos:line="3068" pos:column="17">throw <expr><op:operator pos:line="3068" pos:column="23">new</op:operator> <call><name pos:line="3068" pos:column="27">ArgumentNullException</name><argument_list pos:line="3068" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="3068" pos:column="49">"field"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <expr_stmt><expr><name pos:line="3070" pos:column="13">_columnName</name> <op:operator pos:line="3070" pos:column="25">=</op:operator> <name pos:line="3070" pos:column="27">columnName</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="3071" pos:column="13">_field</name> <op:operator pos:line="3071" pos:column="20">=</op:operator> <name pos:line="3071" pos:column="22">field</name></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="3074" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="3075" pos:column="9">/// Creates instance for simple constructor parameter mapping</comment>
        <comment type="line" pos:line="3076" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="3077" pos:column="9">/// &lt;param name="columnName"&gt;DataReader column name&lt;/param&gt;</comment>
        <comment type="line" pos:line="3078" pos:column="9">/// &lt;param name="parameter"&gt;Target constructor parameter&lt;/param&gt;</comment>
        <constructor><specifier pos:line="3079" pos:column="9">public</specifier> <name pos:line="3079" pos:column="16">SimpleMemberMap</name><parameter_list pos:line="3079" pos:column="31">(<param><decl><type><name pos:line="3079" pos:column="32">string</name></type> <name pos:line="3079" pos:column="39">columnName</name></decl></param>, <param><decl><type><name pos:line="3079" pos:column="51">ParameterInfo</name></type> <name pos:line="3079" pos:column="65">parameter</name></decl></param>)</parameter_list>
        <block pos:line="3080" pos:column="9">{
            <if pos:line="3081" pos:column="13">if <condition pos:line="3081" pos:column="16">(<expr><name pos:line="3081" pos:column="17">columnName</name> <op:operator pos:line="3081" pos:column="28">==</op:operator> <name pos:line="3081" pos:column="31">null</name></expr>)</condition><then pos:line="3081" pos:column="36">
                <throw pos:line="3082" pos:column="17">throw <expr><op:operator pos:line="3082" pos:column="23">new</op:operator> <call><name pos:line="3082" pos:column="27">ArgumentNullException</name><argument_list pos:line="3082" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="3082" pos:column="49">"columnName"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <if pos:line="3084" pos:column="13">if <condition pos:line="3084" pos:column="16">(<expr><name pos:line="3084" pos:column="17">parameter</name> <op:operator pos:line="3084" pos:column="27">==</op:operator> <name pos:line="3084" pos:column="30">null</name></expr>)</condition><then pos:line="3084" pos:column="35">
                <throw pos:line="3085" pos:column="17">throw <expr><op:operator pos:line="3085" pos:column="23">new</op:operator> <call><name pos:line="3085" pos:column="27">ArgumentNullException</name><argument_list pos:line="3085" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="3085" pos:column="49">"parameter"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <expr_stmt><expr><name pos:line="3087" pos:column="13">_columnName</name> <op:operator pos:line="3087" pos:column="25">=</op:operator> <name pos:line="3087" pos:column="27">columnName</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="3088" pos:column="13">_parameter</name> <op:operator pos:line="3088" pos:column="24">=</op:operator> <name pos:line="3088" pos:column="26">parameter</name></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="3091" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="3092" pos:column="9">/// DataReader column name</comment>
        <comment type="line" pos:line="3093" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="3094" pos:column="9">public</specifier> <name pos:line="3094" pos:column="16">string</name></type> <name pos:line="3094" pos:column="23">ColumnName</name>
        <block pos:line="3095" pos:column="9">{
            <function><name pos:line="3096" pos:column="13">get</name> <block pos:line="3096" pos:column="17">{ <return pos:line="3096" pos:column="19">return <expr><name pos:line="3096" pos:column="26">_columnName</name></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="3099" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="3100" pos:column="9">/// Target member type</comment>
        <comment type="line" pos:line="3101" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="3102" pos:column="9">public</specifier> <name pos:line="3102" pos:column="16">Type</name></type> <name pos:line="3102" pos:column="21">MemberType</name>
        <block pos:line="3103" pos:column="9">{
            <function><name pos:line="3104" pos:column="13">get</name>
            <block pos:line="3105" pos:column="13">{
                <if pos:line="3106" pos:column="17">if <condition pos:line="3106" pos:column="20">(<expr><name pos:line="3106" pos:column="21">_field</name> <op:operator pos:line="3106" pos:column="28">!=</op:operator> <name pos:line="3106" pos:column="31">null</name></expr>)</condition><then pos:line="3106" pos:column="36">
                    <return pos:line="3107" pos:column="21">return <expr><name><name pos:line="3107" pos:column="28">_field</name><op:operator pos:line="3107" pos:column="34">.</op:operator><name pos:line="3107" pos:column="35">FieldType</name></name></expr>;</return></then></if>

                <if pos:line="3109" pos:column="17">if <condition pos:line="3109" pos:column="20">(<expr><name pos:line="3109" pos:column="21">_property</name> <op:operator pos:line="3109" pos:column="31">!=</op:operator> <name pos:line="3109" pos:column="34">null</name></expr>)</condition><then pos:line="3109" pos:column="39">
                    <return pos:line="3110" pos:column="21">return <expr><name><name pos:line="3110" pos:column="28">_property</name><op:operator pos:line="3110" pos:column="37">.</op:operator><name pos:line="3110" pos:column="38">PropertyType</name></name></expr>;</return></then></if>

                <if pos:line="3112" pos:column="17">if <condition pos:line="3112" pos:column="20">(<expr><name pos:line="3112" pos:column="21">_parameter</name> <op:operator pos:line="3112" pos:column="32">!=</op:operator> <name pos:line="3112" pos:column="35">null</name></expr>)</condition><then pos:line="3112" pos:column="40">
                    <return pos:line="3113" pos:column="21">return <expr><name><name pos:line="3113" pos:column="28">_parameter</name><op:operator pos:line="3113" pos:column="38">.</op:operator><name pos:line="3113" pos:column="39">ParameterType</name></name></expr>;</return></then></if>

                <return pos:line="3115" pos:column="17">return <expr><name pos:line="3115" pos:column="24">null</name></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="3119" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="3120" pos:column="9">/// Target property</comment>
        <comment type="line" pos:line="3121" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="3122" pos:column="9">public</specifier> <name pos:line="3122" pos:column="16">PropertyInfo</name></type> <name pos:line="3122" pos:column="29">Property</name>
        <block pos:line="3123" pos:column="9">{
            <function><name pos:line="3124" pos:column="13">get</name> <block pos:line="3124" pos:column="17">{ <return pos:line="3124" pos:column="19">return <expr><name pos:line="3124" pos:column="26">_property</name></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="3127" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="3128" pos:column="9">/// Target field</comment>
        <comment type="line" pos:line="3129" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="3130" pos:column="9">public</specifier> <name pos:line="3130" pos:column="16">FieldInfo</name></type> <name pos:line="3130" pos:column="26">Field</name>
        <block pos:line="3131" pos:column="9">{
            <function><name pos:line="3132" pos:column="13">get</name> <block pos:line="3132" pos:column="17">{ <return pos:line="3132" pos:column="19">return <expr><name pos:line="3132" pos:column="26">_field</name></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="3135" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="3136" pos:column="9">/// Target constructor parameter</comment>
        <comment type="line" pos:line="3137" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="3138" pos:column="9">public</specifier> <name pos:line="3138" pos:column="16">ParameterInfo</name></type> <name pos:line="3138" pos:column="30">Parameter</name>
        <block pos:line="3139" pos:column="9">{
            <function><name pos:line="3140" pos:column="13">get</name> <block pos:line="3140" pos:column="17">{ <return pos:line="3140" pos:column="19">return <expr><name pos:line="3140" pos:column="26">_parameter</name></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>
    }</block></class>

    <comment type="line" pos:line="3144" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="3145" pos:column="5">/// Represents default type mapping strategy used by Dapper</comment>
    <comment type="line" pos:line="3146" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="3147" pos:column="5">sealed</specifier> <specifier pos:line="3147" pos:column="12">partial</specifier> class <name pos:line="3147" pos:column="26">DefaultTypeMap</name> <super pos:line="3147" pos:column="41">: <name><name pos:line="3147" pos:column="43">SqlMapper</name><op:operator pos:line="3147" pos:column="52">.</op:operator><name pos:line="3147" pos:column="53">ITypeMap</name></name></super>
    <block pos:line="3148" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="3149" pos:column="9">private</specifier> <specifier pos:line="3149" pos:column="17">readonly</specifier> <name><name pos:line="3149" pos:column="26">List</name><argument_list pos:line="3149" pos:column="30">&lt;<argument><name pos:line="3149" pos:column="31">FieldInfo</name></argument>&gt;</argument_list></name></type> <name pos:line="3149" pos:column="42">_fields</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="3150" pos:column="9">private</specifier> <specifier pos:line="3150" pos:column="17">readonly</specifier> <name><name pos:line="3150" pos:column="26">List</name><argument_list pos:line="3150" pos:column="30">&lt;<argument><name pos:line="3150" pos:column="31">PropertyInfo</name></argument>&gt;</argument_list></name></type> <name pos:line="3150" pos:column="45">_properties</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="3151" pos:column="9">private</specifier> <specifier pos:line="3151" pos:column="17">readonly</specifier> <name pos:line="3151" pos:column="26">Type</name></type> <name pos:line="3151" pos:column="31">_type</name></decl>;</decl_stmt>

        <comment type="line" pos:line="3153" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="3154" pos:column="9">/// Creates default type map</comment>
        <comment type="line" pos:line="3155" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="3156" pos:column="9">/// &lt;param name="type"&gt;Entity type&lt;/param&gt;</comment>
        <constructor><specifier pos:line="3157" pos:column="9">public</specifier> <name pos:line="3157" pos:column="16">DefaultTypeMap</name><parameter_list pos:line="3157" pos:column="30">(<param><decl><type><name pos:line="3157" pos:column="31">Type</name></type> <name pos:line="3157" pos:column="36">type</name></decl></param>)</parameter_list>
        <block pos:line="3158" pos:column="9">{
            <if pos:line="3159" pos:column="13">if <condition pos:line="3159" pos:column="16">(<expr><name pos:line="3159" pos:column="17">type</name> <op:operator pos:line="3159" pos:column="22">==</op:operator> <name pos:line="3159" pos:column="25">null</name></expr>)</condition><then pos:line="3159" pos:column="30">
                <throw pos:line="3160" pos:column="17">throw <expr><op:operator pos:line="3160" pos:column="23">new</op:operator> <call><name pos:line="3160" pos:column="27">ArgumentNullException</name><argument_list pos:line="3160" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="3160" pos:column="49">"type"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <expr_stmt><expr><name pos:line="3162" pos:column="13">_fields</name> <op:operator pos:line="3162" pos:column="21">=</op:operator> <call><name pos:line="3162" pos:column="23">GetSettableFields</name><argument_list pos:line="3162" pos:column="40">(<argument><expr><name pos:line="3162" pos:column="41">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="3163" pos:column="13">_properties</name> <op:operator pos:line="3163" pos:column="25">=</op:operator> <call><name pos:line="3163" pos:column="27">GetSettableProps</name><argument_list pos:line="3163" pos:column="43">(<argument><expr><name pos:line="3163" pos:column="44">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="3164" pos:column="13">_type</name> <op:operator pos:line="3164" pos:column="19">=</op:operator> <name pos:line="3164" pos:column="21">type</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier pos:line="3167" pos:column="9">internal</specifier> <specifier pos:line="3167" pos:column="18">static</specifier> <name pos:line="3167" pos:column="25">MethodInfo</name></type> <name pos:line="3167" pos:column="36">GetPropertySetter</name><parameter_list pos:line="3167" pos:column="53">(<param><decl><type><name pos:line="3167" pos:column="54">PropertyInfo</name></type> <name pos:line="3167" pos:column="67">propertyInfo</name></decl></param>, <param><decl><type><name pos:line="3167" pos:column="81">Type</name></type> <name pos:line="3167" pos:column="86">type</name></decl></param>)</parameter_list>
        <block pos:line="3168" pos:column="9">{
            <return pos:line="3169" pos:column="13">return <expr><name><name pos:line="3169" pos:column="20">propertyInfo</name><op:operator pos:line="3169" pos:column="32">.</op:operator><name pos:line="3169" pos:column="33">DeclaringType</name></name> <op:operator pos:line="3169" pos:column="47">==</op:operator> <name pos:line="3169" pos:column="50">type</name> <op:operator pos:line="3169" pos:column="55">?</op:operator>
                <call><name><name pos:line="3170" pos:column="17">propertyInfo</name><op:operator pos:line="3170" pos:column="29">.</op:operator><name pos:line="3170" pos:column="30">GetSetMethod</name></name><argument_list pos:line="3170" pos:column="42">(<argument><expr><lit:literal type="boolean" pos:line="3170" pos:column="43">true</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="3170" pos:column="49">:</op:operator>
                <call><name><name pos:line="3171" pos:column="17">propertyInfo</name><op:operator pos:line="3171" pos:column="29">.</op:operator><name pos:line="3171" pos:column="30">DeclaringType</name><op:operator pos:line="3171" pos:column="43">.</op:operator><name pos:line="3171" pos:column="44">GetProperty</name></name><argument_list pos:line="3171" pos:column="55">(<argument><expr><name><name pos:line="3171" pos:column="56">propertyInfo</name><op:operator pos:line="3171" pos:column="68">.</op:operator><name pos:line="3171" pos:column="69">Name</name></name></expr></argument>, <argument><expr><name><name pos:line="3171" pos:column="75">BindingFlags</name><op:operator pos:line="3171" pos:column="87">.</op:operator><name pos:line="3171" pos:column="88">Public</name></name> <op:operator pos:line="3171" pos:column="95">|</op:operator> <name><name pos:line="3171" pos:column="97">BindingFlags</name><op:operator pos:line="3171" pos:column="109">.</op:operator><name pos:line="3171" pos:column="110">NonPublic</name></name> <op:operator pos:line="3171" pos:column="120">|</op:operator> <name><name pos:line="3171" pos:column="122">BindingFlags</name><op:operator pos:line="3171" pos:column="134">.</op:operator><name pos:line="3171" pos:column="135">Instance</name></name></expr></argument>)</argument_list></call><op:operator pos:line="3171" pos:column="144">.</op:operator><call><name pos:line="3171" pos:column="145">GetSetMethod</name><argument_list pos:line="3171" pos:column="157">(<argument><expr><lit:literal type="boolean" pos:line="3171" pos:column="158">true</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="3174" pos:column="9">internal</specifier> <specifier pos:line="3174" pos:column="18">static</specifier> <name><name pos:line="3174" pos:column="25">List</name><argument_list pos:line="3174" pos:column="29">&lt;<argument><name pos:line="3174" pos:column="30">PropertyInfo</name></argument>&gt;</argument_list></name></type> <name pos:line="3174" pos:column="44">GetSettableProps</name><parameter_list pos:line="3174" pos:column="60">(<param><decl><type><name pos:line="3174" pos:column="61">Type</name></type> <name pos:line="3174" pos:column="66">t</name></decl></param>)</parameter_list>
        <block pos:line="3175" pos:column="9">{
            <return pos:line="3176" pos:column="13">return <expr><call><name><name pos:line="3176" pos:column="20">t</name>
                  <op:operator pos:line="3177" pos:column="19">.</op:operator><name pos:line="3177" pos:column="20">GetProperties</name></name><argument_list pos:line="3177" pos:column="33">(<argument><expr><name><name pos:line="3177" pos:column="34">BindingFlags</name><op:operator pos:line="3177" pos:column="46">.</op:operator><name pos:line="3177" pos:column="47">Public</name></name> <op:operator pos:line="3177" pos:column="54">|</op:operator> <name><name pos:line="3177" pos:column="56">BindingFlags</name><op:operator pos:line="3177" pos:column="68">.</op:operator><name pos:line="3177" pos:column="69">NonPublic</name></name> <op:operator pos:line="3177" pos:column="79">|</op:operator> <name><name pos:line="3177" pos:column="81">BindingFlags</name><op:operator pos:line="3177" pos:column="93">.</op:operator><name pos:line="3177" pos:column="94">Instance</name></name></expr></argument>)</argument_list></call>
                  <op:operator pos:line="3178" pos:column="19">.</op:operator><call><name pos:line="3178" pos:column="20">Where</name><argument_list pos:line="3178" pos:column="25">(<argument><expr><lambda><name pos:line="3178" pos:column="26">p</name> <op:operator pos:line="3178" pos:column="28">=&gt;</op:operator> <call><name pos:line="3178" pos:column="31">GetPropertySetter</name><argument_list pos:line="3178" pos:column="48">(<argument><expr><name pos:line="3178" pos:column="49">p</name></expr></argument>, <argument><expr><name pos:line="3178" pos:column="52">t</name></expr></argument>)</argument_list></call> <op:operator pos:line="3178" pos:column="55">!=</op:operator> <name pos:line="3178" pos:column="58">null</name></lambda></expr></argument>)</argument_list></call>
                  <op:operator pos:line="3179" pos:column="19">.</op:operator><call><name pos:line="3179" pos:column="20">ToList</name><argument_list pos:line="3179" pos:column="26">()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="3182" pos:column="9">internal</specifier> <specifier pos:line="3182" pos:column="18">static</specifier> <name><name pos:line="3182" pos:column="25">List</name><argument_list pos:line="3182" pos:column="29">&lt;<argument><name pos:line="3182" pos:column="30">FieldInfo</name></argument>&gt;</argument_list></name></type> <name pos:line="3182" pos:column="41">GetSettableFields</name><parameter_list pos:line="3182" pos:column="58">(<param><decl><type><name pos:line="3182" pos:column="59">Type</name></type> <name pos:line="3182" pos:column="64">t</name></decl></param>)</parameter_list>
        <block pos:line="3183" pos:column="9">{
            <return pos:line="3184" pos:column="13">return <expr><call><name><name pos:line="3184" pos:column="20">t</name><op:operator pos:line="3184" pos:column="21">.</op:operator><name pos:line="3184" pos:column="22">GetFields</name></name><argument_list pos:line="3184" pos:column="31">(<argument><expr><name><name pos:line="3184" pos:column="32">BindingFlags</name><op:operator pos:line="3184" pos:column="44">.</op:operator><name pos:line="3184" pos:column="45">Public</name></name> <op:operator pos:line="3184" pos:column="52">|</op:operator> <name><name pos:line="3184" pos:column="54">BindingFlags</name><op:operator pos:line="3184" pos:column="66">.</op:operator><name pos:line="3184" pos:column="67">NonPublic</name></name> <op:operator pos:line="3184" pos:column="77">|</op:operator> <name><name pos:line="3184" pos:column="79">BindingFlags</name><op:operator pos:line="3184" pos:column="91">.</op:operator><name pos:line="3184" pos:column="92">Instance</name></name></expr></argument>)</argument_list></call><op:operator pos:line="3184" pos:column="101">.</op:operator><call><name pos:line="3184" pos:column="102">ToList</name><argument_list pos:line="3184" pos:column="108">()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="3187" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="3188" pos:column="9">/// Finds best constructor</comment>
        <comment type="line" pos:line="3189" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="3190" pos:column="9">/// &lt;param name="names"&gt;DataReader column names&lt;/param&gt;</comment>
        <comment type="line" pos:line="3191" pos:column="9">/// &lt;param name="types"&gt;DataReader column types&lt;/param&gt;</comment>
        <comment type="line" pos:line="3192" pos:column="9">/// &lt;returns&gt;Matching constructor or default one&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="3193" pos:column="9">public</specifier> <name pos:line="3193" pos:column="16">ConstructorInfo</name></type> <name pos:line="3193" pos:column="32">FindConstructor</name><parameter_list pos:line="3193" pos:column="47">(<param><decl><type><name><name pos:line="3193" pos:column="48">string</name><index pos:line="3193" pos:column="54">[]</index></name></type> <name pos:line="3193" pos:column="57">names</name></decl></param>, <param><decl><type><name><name pos:line="3193" pos:column="64">Type</name><index pos:line="3193" pos:column="68">[]</index></name></type> <name pos:line="3193" pos:column="71">types</name></decl></param>)</parameter_list>
        <block pos:line="3194" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="3195" pos:column="13">var</name></type> <name pos:line="3195" pos:column="17">constructors</name> <init pos:line="3195" pos:column="30">= <expr><call><name><name pos:line="3195" pos:column="32">_type</name><op:operator pos:line="3195" pos:column="37">.</op:operator><name pos:line="3195" pos:column="38">GetConstructors</name></name><argument_list pos:line="3195" pos:column="53">(<argument><expr><name><name pos:line="3195" pos:column="54">BindingFlags</name><op:operator pos:line="3195" pos:column="66">.</op:operator><name pos:line="3195" pos:column="67">Instance</name></name> <op:operator pos:line="3195" pos:column="76">|</op:operator> <name><name pos:line="3195" pos:column="78">BindingFlags</name><op:operator pos:line="3195" pos:column="90">.</op:operator><name pos:line="3195" pos:column="91">Public</name></name> <op:operator pos:line="3195" pos:column="98">|</op:operator> <name><name pos:line="3195" pos:column="100">BindingFlags</name><op:operator pos:line="3195" pos:column="112">.</op:operator><name pos:line="3195" pos:column="113">NonPublic</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="3196" pos:column="13">foreach (<init><decl><type><name pos:line="3196" pos:column="22">ConstructorInfo</name></type> <name pos:line="3196" pos:column="38">ctor</name> <range pos:line="3196" pos:column="43">in <expr><call><name><name pos:line="3196" pos:column="46">constructors</name><op:operator pos:line="3196" pos:column="58">.</op:operator><name pos:line="3196" pos:column="59">OrderBy</name></name><argument_list pos:line="3196" pos:column="66">(<argument><expr><lambda><name pos:line="3196" pos:column="67">c</name> <op:operator pos:line="3196" pos:column="69">=&gt;</op:operator> <name><name pos:line="3196" pos:column="72">c</name><op:operator pos:line="3196" pos:column="73">.</op:operator><name pos:line="3196" pos:column="74">IsPublic</name> <type:modifier pos:line="3196" pos:column="83">?</type:modifier></name> <lit:literal type="number" pos:line="3196" pos:column="85">0</lit:literal> <op:operator pos:line="3196" pos:column="87">:</op:operator> <op:operator pos:line="3196" pos:column="89">(</op:operator><name><name pos:line="3196" pos:column="90">c</name><op:operator pos:line="3196" pos:column="91">.</op:operator><name pos:line="3196" pos:column="92">IsPrivate</name> <type:modifier pos:line="3196" pos:column="102">?</type:modifier></name> <lit:literal type="number" pos:line="3196" pos:column="104">2</lit:literal> <op:operator pos:line="3196" pos:column="106">:</op:operator> <lit:literal type="number" pos:line="3196" pos:column="108">1</lit:literal><op:operator pos:line="3196" pos:column="109">)</op:operator></lambda></expr></argument>)</argument_list></call><op:operator pos:line="3196" pos:column="111">.</op:operator><call><name pos:line="3196" pos:column="112">ThenBy</name><argument_list pos:line="3196" pos:column="118">(<argument><expr><lambda><name pos:line="3196" pos:column="119">c</name> <op:operator pos:line="3196" pos:column="121">=&gt;</op:operator> <call><name><name pos:line="3196" pos:column="124">c</name><op:operator pos:line="3196" pos:column="125">.</op:operator><name pos:line="3196" pos:column="126">GetParameters</name></name><argument_list pos:line="3196" pos:column="139">()</argument_list></call><op:operator pos:line="3196" pos:column="141">.</op:operator><name pos:line="3196" pos:column="142">Length</name></lambda></expr></argument>)</argument_list></call></expr></range></decl></init>)
            <block pos:line="3197" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="3198" pos:column="17">ParameterInfo</name><index pos:line="3198" pos:column="30">[]</index></type> <name pos:line="3198" pos:column="33">ctorParameters</name> <init pos:line="3198" pos:column="48">= <expr><call><name><name pos:line="3198" pos:column="50">ctor</name><op:operator pos:line="3198" pos:column="54">.</op:operator><name pos:line="3198" pos:column="55">GetParameters</name></name><argument_list pos:line="3198" pos:column="68">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="3199" pos:column="17">if <condition pos:line="3199" pos:column="20">(<expr><name><name pos:line="3199" pos:column="21">ctorParameters</name><op:operator pos:line="3199" pos:column="35">.</op:operator><name pos:line="3199" pos:column="36">Length</name></name> <op:operator pos:line="3199" pos:column="43">==</op:operator> <lit:literal type="number" pos:line="3199" pos:column="46">0</lit:literal></expr>)</condition><then pos:line="3199" pos:column="48">
                    <return pos:line="3200" pos:column="21">return <expr><name pos:line="3200" pos:column="28">ctor</name></expr>;</return></then></if>

                <if pos:line="3202" pos:column="17">if <condition pos:line="3202" pos:column="20">(<expr><name><name pos:line="3202" pos:column="21">ctorParameters</name><op:operator pos:line="3202" pos:column="35">.</op:operator><name pos:line="3202" pos:column="36">Length</name></name> <op:operator pos:line="3202" pos:column="43">!=</op:operator> <name><name pos:line="3202" pos:column="46">types</name><op:operator pos:line="3202" pos:column="51">.</op:operator><name pos:line="3202" pos:column="52">Length</name></name></expr>)</condition><then pos:line="3202" pos:column="59">
                    <continue pos:line="3203" pos:column="21">continue;</continue></then></if>

                <decl_stmt><decl><type><name pos:line="3205" pos:column="17">int</name></type> <name pos:line="3205" pos:column="21">i</name> <init pos:line="3205" pos:column="23">= <expr><lit:literal type="number" pos:line="3205" pos:column="25">0</lit:literal></expr></init></decl>;</decl_stmt>
                <for pos:line="3206" pos:column="17">for (<init pos:line="3206" pos:column="22">;</init> <condition><expr><name pos:line="3206" pos:column="24">i</name> <op:operator pos:line="3206" pos:column="26">&lt;</op:operator> <name><name pos:line="3206" pos:column="28">ctorParameters</name><op:operator pos:line="3206" pos:column="42">.</op:operator><name pos:line="3206" pos:column="43">Length</name></name></expr>;</condition> <incr><expr><name pos:line="3206" pos:column="51">i</name><op:operator pos:line="3206" pos:column="52">++</op:operator></expr></incr>)
                <block pos:line="3207" pos:column="17">{
                    <if pos:line="3208" pos:column="21">if <condition pos:line="3208" pos:column="24">(<expr><op:operator pos:line="3208" pos:column="25">!</op:operator><call><name><name pos:line="3208" pos:column="26">String</name><op:operator pos:line="3208" pos:column="32">.</op:operator><name pos:line="3208" pos:column="33">Equals</name></name><argument_list pos:line="3208" pos:column="39">(<argument><expr><name><name pos:line="3208" pos:column="40">ctorParameters</name><index pos:line="3208" pos:column="54">[<expr><name pos:line="3208" pos:column="55">i</name></expr>]</index></name><op:operator pos:line="3208" pos:column="57">.</op:operator><name pos:line="3208" pos:column="58">Name</name></expr></argument>, <argument><expr><name><name pos:line="3208" pos:column="64">names</name><index pos:line="3208" pos:column="69">[<expr><name pos:line="3208" pos:column="70">i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name pos:line="3208" pos:column="74">StringComparison</name><op:operator pos:line="3208" pos:column="90">.</op:operator><name pos:line="3208" pos:column="91">OrdinalIgnoreCase</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="3208" pos:column="110">
                        <break pos:line="3209" pos:column="25">break;</break></then></if>
                    <if pos:line="3210" pos:column="21">if <condition pos:line="3210" pos:column="24">(<expr><name><name pos:line="3210" pos:column="25">types</name><index pos:line="3210" pos:column="30">[<expr><name pos:line="3210" pos:column="31">i</name></expr>]</index></name> <op:operator pos:line="3210" pos:column="34">==</op:operator> <call><name pos:line="3210" pos:column="37">typeof</name><argument_list pos:line="3210" pos:column="43">(<argument><expr><name><name pos:line="3210" pos:column="44">byte</name><index pos:line="3210" pos:column="48">[]</index></name></expr></argument>)</argument_list></call> <op:operator pos:line="3210" pos:column="52">&amp;&amp;</op:operator> <name><name pos:line="3210" pos:column="55">ctorParameters</name><index pos:line="3210" pos:column="69">[<expr><name pos:line="3210" pos:column="70">i</name></expr>]</index></name><op:operator pos:line="3210" pos:column="72">.</op:operator><name><name pos:line="3210" pos:column="73">ParameterType</name><op:operator pos:line="3210" pos:column="86">.</op:operator><name pos:line="3210" pos:column="87">FullName</name></name> <op:operator pos:line="3210" pos:column="96">==</op:operator> <name><name pos:line="3210" pos:column="99">SqlMapper</name><op:operator pos:line="3210" pos:column="108">.</op:operator><name pos:line="3210" pos:column="109">LinqBinary</name></name></expr>)</condition><then pos:line="3210" pos:column="120">
                        <continue pos:line="3211" pos:column="25">continue;</continue></then></if>
                    <decl_stmt><decl><type><name pos:line="3212" pos:column="21">var</name></type> <name pos:line="3212" pos:column="25">unboxedType</name> <init pos:line="3212" pos:column="37">= <expr><call><name><name pos:line="3212" pos:column="39">Nullable</name><op:operator pos:line="3212" pos:column="47">.</op:operator><name pos:line="3212" pos:column="48">GetUnderlyingType</name></name><argument_list pos:line="3212" pos:column="65">(<argument><expr><name><name pos:line="3212" pos:column="66">ctorParameters</name><index pos:line="3212" pos:column="80">[<expr><name pos:line="3212" pos:column="81">i</name></expr>]</index></name><op:operator pos:line="3212" pos:column="83">.</op:operator><name pos:line="3212" pos:column="84">ParameterType</name></expr></argument>)</argument_list></call> <op:operator pos:line="3212" pos:column="99">??</op:operator> <name><name pos:line="3212" pos:column="102">ctorParameters</name><index pos:line="3212" pos:column="116">[<expr><name pos:line="3212" pos:column="117">i</name></expr>]</index></name><op:operator pos:line="3212" pos:column="119">.</op:operator><name pos:line="3212" pos:column="120">ParameterType</name></expr></init></decl>;</decl_stmt>
                    <if pos:line="3213" pos:column="21">if <condition pos:line="3213" pos:column="24">(<expr><name pos:line="3213" pos:column="25">unboxedType</name> <op:operator pos:line="3213" pos:column="37">!=</op:operator> <name><name pos:line="3213" pos:column="40">types</name><index pos:line="3213" pos:column="45">[<expr><name pos:line="3213" pos:column="46">i</name></expr>]</index></name>
                        <op:operator pos:line="3214" pos:column="25">&amp;&amp;</op:operator> <op:operator pos:line="3214" pos:column="28">!</op:operator><op:operator pos:line="3214" pos:column="29">(</op:operator><name><name pos:line="3214" pos:column="30">unboxedType</name><op:operator pos:line="3214" pos:column="41">.</op:operator><name pos:line="3214" pos:column="42">IsEnum</name> <type:modifier pos:line="3214" pos:column="49">&amp;&amp;</type:modifier></name> <call><name><name pos:line="3214" pos:column="52">Enum</name><op:operator pos:line="3214" pos:column="56">.</op:operator><name pos:line="3214" pos:column="57">GetUnderlyingType</name></name><argument_list pos:line="3214" pos:column="74">(<argument><expr><name pos:line="3214" pos:column="75">unboxedType</name></expr></argument>)</argument_list></call> <op:operator pos:line="3214" pos:column="88">==</op:operator> <name><name pos:line="3214" pos:column="91">types</name><index pos:line="3214" pos:column="96">[<expr><name pos:line="3214" pos:column="97">i</name></expr>]</index></name><op:operator pos:line="3214" pos:column="99">)</op:operator>
                        <op:operator pos:line="3215" pos:column="25">&amp;&amp;</op:operator> <op:operator pos:line="3215" pos:column="28">!</op:operator><op:operator pos:line="3215" pos:column="29">(</op:operator><name pos:line="3215" pos:column="30">unboxedType</name> <op:operator pos:line="3215" pos:column="42">==</op:operator> <call><name pos:line="3215" pos:column="45">typeof</name><argument_list pos:line="3215" pos:column="51">(<argument><expr><name pos:line="3215" pos:column="52">char</name></expr></argument>)</argument_list></call> <op:operator pos:line="3215" pos:column="58">&amp;&amp;</op:operator> <name><name pos:line="3215" pos:column="61">types</name><index pos:line="3215" pos:column="66">[<expr><name pos:line="3215" pos:column="67">i</name></expr>]</index></name> <op:operator pos:line="3215" pos:column="70">==</op:operator> <call><name pos:line="3215" pos:column="73">typeof</name><argument_list pos:line="3215" pos:column="79">(<argument><expr><name pos:line="3215" pos:column="80">string</name></expr></argument>)</argument_list></call><op:operator pos:line="3215" pos:column="87">)</op:operator></expr>)</condition><then pos:line="3215" pos:column="89">
                        <break pos:line="3216" pos:column="25">break;</break></then></if>
                }</block></for>

                <if pos:line="3219" pos:column="17">if <condition pos:line="3219" pos:column="20">(<expr><name pos:line="3219" pos:column="21">i</name> <op:operator pos:line="3219" pos:column="23">==</op:operator> <name><name pos:line="3219" pos:column="26">ctorParameters</name><op:operator pos:line="3219" pos:column="40">.</op:operator><name pos:line="3219" pos:column="41">Length</name></name></expr>)</condition><then pos:line="3219" pos:column="48">
                    <return pos:line="3220" pos:column="21">return <expr><name pos:line="3220" pos:column="28">ctor</name></expr>;</return></then></if>
            }</block></foreach>

            <return pos:line="3223" pos:column="13">return <expr><name pos:line="3223" pos:column="20">null</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="3226" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="3227" pos:column="9">/// Gets mapping for constructor parameter</comment>
        <comment type="line" pos:line="3228" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="3229" pos:column="9">/// &lt;param name="constructor"&gt;Constructor to resolve&lt;/param&gt;</comment>
        <comment type="line" pos:line="3230" pos:column="9">/// &lt;param name="columnName"&gt;DataReader column name&lt;/param&gt;</comment>
        <comment type="line" pos:line="3231" pos:column="9">/// &lt;returns&gt;Mapping implementation&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="3232" pos:column="9">public</specifier> <name><name pos:line="3232" pos:column="16">SqlMapper</name><op:operator pos:line="3232" pos:column="25">.</op:operator><name pos:line="3232" pos:column="26">IMemberMap</name></name></type> <name pos:line="3232" pos:column="37">GetConstructorParameter</name><parameter_list pos:line="3232" pos:column="60">(<param><decl><type><name pos:line="3232" pos:column="61">ConstructorInfo</name></type> <name pos:line="3232" pos:column="77">constructor</name></decl></param>, <param><decl><type><name pos:line="3232" pos:column="90">string</name></type> <name pos:line="3232" pos:column="97">columnName</name></decl></param>)</parameter_list>
        <block pos:line="3233" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="3234" pos:column="13">var</name></type> <name pos:line="3234" pos:column="17">parameters</name> <init pos:line="3234" pos:column="28">= <expr><call><name><name pos:line="3234" pos:column="30">constructor</name><op:operator pos:line="3234" pos:column="41">.</op:operator><name pos:line="3234" pos:column="42">GetParameters</name></name><argument_list pos:line="3234" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <return pos:line="3236" pos:column="13">return <expr><op:operator pos:line="3236" pos:column="20">new</op:operator> <call><name pos:line="3236" pos:column="24">SimpleMemberMap</name><argument_list pos:line="3236" pos:column="39">(<argument><expr><name pos:line="3236" pos:column="40">columnName</name></expr></argument>, <argument><expr><call><name><name pos:line="3236" pos:column="52">parameters</name><op:operator pos:line="3236" pos:column="62">.</op:operator><name pos:line="3236" pos:column="63">FirstOrDefault</name></name><argument_list pos:line="3236" pos:column="77">(<argument><expr><lambda><name pos:line="3236" pos:column="78">p</name> <op:operator pos:line="3236" pos:column="80">=&gt;</op:operator> <call><name><name pos:line="3236" pos:column="83">string</name><op:operator pos:line="3236" pos:column="89">.</op:operator><name pos:line="3236" pos:column="90">Equals</name></name><argument_list pos:line="3236" pos:column="96">(<argument><expr><name><name pos:line="3236" pos:column="97">p</name><op:operator pos:line="3236" pos:column="98">.</op:operator><name pos:line="3236" pos:column="99">Name</name></name></expr></argument>, <argument><expr><name pos:line="3236" pos:column="105">columnName</name></expr></argument>, <argument><expr><name><name pos:line="3236" pos:column="117">StringComparison</name><op:operator pos:line="3236" pos:column="133">.</op:operator><name pos:line="3236" pos:column="134">OrdinalIgnoreCase</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="3239" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="3240" pos:column="9">/// Gets member mapping for column</comment>
        <comment type="line" pos:line="3241" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="3242" pos:column="9">/// &lt;param name="columnName"&gt;DataReader column name&lt;/param&gt;</comment>
        <comment type="line" pos:line="3243" pos:column="9">/// &lt;returns&gt;Mapping implementation&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="3244" pos:column="9">public</specifier> <name><name pos:line="3244" pos:column="16">SqlMapper</name><op:operator pos:line="3244" pos:column="25">.</op:operator><name pos:line="3244" pos:column="26">IMemberMap</name></name></type> <name pos:line="3244" pos:column="37">GetMember</name><parameter_list pos:line="3244" pos:column="46">(<param><decl><type><name pos:line="3244" pos:column="47">string</name></type> <name pos:line="3244" pos:column="54">columnName</name></decl></param>)</parameter_list>
        <block pos:line="3245" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="3246" pos:column="13">var</name></type> <name pos:line="3246" pos:column="17">property</name> <init pos:line="3246" pos:column="26">= <expr><call><name><name pos:line="3246" pos:column="28">_properties</name><op:operator pos:line="3246" pos:column="39">.</op:operator><name pos:line="3246" pos:column="40">FirstOrDefault</name></name><argument_list pos:line="3246" pos:column="54">(<argument><expr><lambda><name pos:line="3246" pos:column="55">p</name> <op:operator pos:line="3246" pos:column="57">=&gt;</op:operator> <call><name><name pos:line="3246" pos:column="60">string</name><op:operator pos:line="3246" pos:column="66">.</op:operator><name pos:line="3246" pos:column="67">Equals</name></name><argument_list pos:line="3246" pos:column="73">(<argument><expr><name><name pos:line="3246" pos:column="74">p</name><op:operator pos:line="3246" pos:column="75">.</op:operator><name pos:line="3246" pos:column="76">Name</name></name></expr></argument>, <argument><expr><name pos:line="3246" pos:column="82">columnName</name></expr></argument>, <argument><expr><name><name pos:line="3246" pos:column="94">StringComparison</name><op:operator pos:line="3246" pos:column="110">.</op:operator><name pos:line="3246" pos:column="111">Ordinal</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call>
               <op:operator pos:line="3247" pos:column="16">??</op:operator> <call><name><name pos:line="3247" pos:column="19">_properties</name><op:operator pos:line="3247" pos:column="30">.</op:operator><name pos:line="3247" pos:column="31">FirstOrDefault</name></name><argument_list pos:line="3247" pos:column="45">(<argument><expr><lambda><name pos:line="3247" pos:column="46">p</name> <op:operator pos:line="3247" pos:column="48">=&gt;</op:operator> <call><name><name pos:line="3247" pos:column="51">string</name><op:operator pos:line="3247" pos:column="57">.</op:operator><name pos:line="3247" pos:column="58">Equals</name></name><argument_list pos:line="3247" pos:column="64">(<argument><expr><name><name pos:line="3247" pos:column="65">p</name><op:operator pos:line="3247" pos:column="66">.</op:operator><name pos:line="3247" pos:column="67">Name</name></name></expr></argument>, <argument><expr><name pos:line="3247" pos:column="73">columnName</name></expr></argument>, <argument><expr><name><name pos:line="3247" pos:column="85">StringComparison</name><op:operator pos:line="3247" pos:column="101">.</op:operator><name pos:line="3247" pos:column="102">OrdinalIgnoreCase</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if pos:line="3249" pos:column="13">if <condition pos:line="3249" pos:column="16">(<expr><name pos:line="3249" pos:column="17">property</name> <op:operator pos:line="3249" pos:column="26">!=</op:operator> <name pos:line="3249" pos:column="29">null</name></expr>)</condition><then pos:line="3249" pos:column="34">
                <return pos:line="3250" pos:column="17">return <expr><op:operator pos:line="3250" pos:column="24">new</op:operator> <call><name pos:line="3250" pos:column="28">SimpleMemberMap</name><argument_list pos:line="3250" pos:column="43">(<argument><expr><name pos:line="3250" pos:column="44">columnName</name></expr></argument>, <argument><expr><name pos:line="3250" pos:column="56">property</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

            <decl_stmt><decl><type><name pos:line="3252" pos:column="13">var</name></type> <name pos:line="3252" pos:column="17">field</name> <init pos:line="3252" pos:column="23">= <expr><call><name><name pos:line="3252" pos:column="25">_fields</name><op:operator pos:line="3252" pos:column="32">.</op:operator><name pos:line="3252" pos:column="33">FirstOrDefault</name></name><argument_list pos:line="3252" pos:column="47">(<argument><expr><lambda><name pos:line="3252" pos:column="48">p</name> <op:operator pos:line="3252" pos:column="50">=&gt;</op:operator> <call><name><name pos:line="3252" pos:column="53">string</name><op:operator pos:line="3252" pos:column="59">.</op:operator><name pos:line="3252" pos:column="60">Equals</name></name><argument_list pos:line="3252" pos:column="66">(<argument><expr><name><name pos:line="3252" pos:column="67">p</name><op:operator pos:line="3252" pos:column="68">.</op:operator><name pos:line="3252" pos:column="69">Name</name></name></expr></argument>, <argument><expr><name pos:line="3252" pos:column="75">columnName</name></expr></argument>, <argument><expr><name><name pos:line="3252" pos:column="87">StringComparison</name><op:operator pos:line="3252" pos:column="103">.</op:operator><name pos:line="3252" pos:column="104">Ordinal</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call>
               <op:operator pos:line="3253" pos:column="16">??</op:operator> <call><name><name pos:line="3253" pos:column="19">_fields</name><op:operator pos:line="3253" pos:column="26">.</op:operator><name pos:line="3253" pos:column="27">FirstOrDefault</name></name><argument_list pos:line="3253" pos:column="41">(<argument><expr><lambda><name pos:line="3253" pos:column="42">p</name> <op:operator pos:line="3253" pos:column="44">=&gt;</op:operator> <call><name><name pos:line="3253" pos:column="47">string</name><op:operator pos:line="3253" pos:column="53">.</op:operator><name pos:line="3253" pos:column="54">Equals</name></name><argument_list pos:line="3253" pos:column="60">(<argument><expr><name><name pos:line="3253" pos:column="61">p</name><op:operator pos:line="3253" pos:column="62">.</op:operator><name pos:line="3253" pos:column="63">Name</name></name></expr></argument>, <argument><expr><name pos:line="3253" pos:column="69">columnName</name></expr></argument>, <argument><expr><name><name pos:line="3253" pos:column="81">StringComparison</name><op:operator pos:line="3253" pos:column="97">.</op:operator><name pos:line="3253" pos:column="98">OrdinalIgnoreCase</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if pos:line="3255" pos:column="13">if <condition pos:line="3255" pos:column="16">(<expr><name pos:line="3255" pos:column="17">field</name> <op:operator pos:line="3255" pos:column="23">!=</op:operator> <name pos:line="3255" pos:column="26">null</name></expr>)</condition><then pos:line="3255" pos:column="31">
                <return pos:line="3256" pos:column="17">return <expr><op:operator pos:line="3256" pos:column="24">new</op:operator> <call><name pos:line="3256" pos:column="28">SimpleMemberMap</name><argument_list pos:line="3256" pos:column="43">(<argument><expr><name pos:line="3256" pos:column="44">columnName</name></expr></argument>, <argument><expr><name pos:line="3256" pos:column="56">field</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

            <return pos:line="3258" pos:column="13">return <expr><name pos:line="3258" pos:column="20">null</name></expr>;</return>
        }</block></function>
    }</block></class>

    <comment type="line" pos:line="3262" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="3263" pos:column="5">/// Implements custom property mapping by user provided criteria (usually presence of some custom attribute with column to member mapping)</comment>
    <comment type="line" pos:line="3264" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="3265" pos:column="5">sealed</specifier> <specifier pos:line="3265" pos:column="12">partial</specifier> class <name pos:line="3265" pos:column="26">CustomPropertyTypeMap</name> <super pos:line="3265" pos:column="48">: <name><name pos:line="3265" pos:column="50">SqlMapper</name><op:operator pos:line="3265" pos:column="59">.</op:operator><name pos:line="3265" pos:column="60">ITypeMap</name></name></super>
    <block pos:line="3266" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="3267" pos:column="9">private</specifier> <specifier pos:line="3267" pos:column="17">readonly</specifier> <name pos:line="3267" pos:column="26">Type</name></type> <name pos:line="3267" pos:column="31">_type</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="3268" pos:column="9">private</specifier> <specifier pos:line="3268" pos:column="17">readonly</specifier> <name><name pos:line="3268" pos:column="26">Func</name><argument_list pos:line="3268" pos:column="30">&lt;<argument><name pos:line="3268" pos:column="31">Type</name></argument>, <argument><name pos:line="3268" pos:column="37">string</name></argument>, <argument><name pos:line="3268" pos:column="45">PropertyInfo</name></argument>&gt;</argument_list></name></type> <name pos:line="3268" pos:column="59">_propertySelector</name></decl>;</decl_stmt>

        <comment type="line" pos:line="3270" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="3271" pos:column="9">/// Creates custom property mapping</comment>
        <comment type="line" pos:line="3272" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="3273" pos:column="9">/// &lt;param name="type"&gt;Target entity type&lt;/param&gt;</comment>
        <comment type="line" pos:line="3274" pos:column="9">/// &lt;param name="propertySelector"&gt;Property selector based on target type and DataReader column name&lt;/param&gt;</comment>
        <constructor><specifier pos:line="3275" pos:column="9">public</specifier> <name pos:line="3275" pos:column="16">CustomPropertyTypeMap</name><parameter_list pos:line="3275" pos:column="37">(<param><decl><type><name pos:line="3275" pos:column="38">Type</name></type> <name pos:line="3275" pos:column="43">type</name></decl></param>, <param><decl><type><name><name pos:line="3275" pos:column="49">Func</name><argument_list pos:line="3275" pos:column="53">&lt;<argument><name pos:line="3275" pos:column="54">Type</name></argument>, <argument><name pos:line="3275" pos:column="60">string</name></argument>, <argument><name pos:line="3275" pos:column="68">PropertyInfo</name></argument>&gt;</argument_list></name></type> <name pos:line="3275" pos:column="82">propertySelector</name></decl></param>)</parameter_list>
        <block pos:line="3276" pos:column="9">{
            <if pos:line="3277" pos:column="13">if <condition pos:line="3277" pos:column="16">(<expr><name pos:line="3277" pos:column="17">type</name> <op:operator pos:line="3277" pos:column="22">==</op:operator> <name pos:line="3277" pos:column="25">null</name></expr>)</condition><then pos:line="3277" pos:column="30">
                <throw pos:line="3278" pos:column="17">throw <expr><op:operator pos:line="3278" pos:column="23">new</op:operator> <call><name pos:line="3278" pos:column="27">ArgumentNullException</name><argument_list pos:line="3278" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="3278" pos:column="49">"type"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <if pos:line="3280" pos:column="13">if <condition pos:line="3280" pos:column="16">(<expr><name pos:line="3280" pos:column="17">propertySelector</name> <op:operator pos:line="3280" pos:column="34">==</op:operator> <name pos:line="3280" pos:column="37">null</name></expr>)</condition><then pos:line="3280" pos:column="42">
                <throw pos:line="3281" pos:column="17">throw <expr><op:operator pos:line="3281" pos:column="23">new</op:operator> <call><name pos:line="3281" pos:column="27">ArgumentNullException</name><argument_list pos:line="3281" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="3281" pos:column="49">"propertySelector"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <expr_stmt><expr><name pos:line="3283" pos:column="13">_type</name> <op:operator pos:line="3283" pos:column="19">=</op:operator> <name pos:line="3283" pos:column="21">type</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="3284" pos:column="13">_propertySelector</name> <op:operator pos:line="3284" pos:column="31">=</op:operator> <name pos:line="3284" pos:column="33">propertySelector</name></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="3287" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="3288" pos:column="9">/// Always returns default constructor</comment>
        <comment type="line" pos:line="3289" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="3290" pos:column="9">/// &lt;param name="names"&gt;DataReader column names&lt;/param&gt;</comment>
        <comment type="line" pos:line="3291" pos:column="9">/// &lt;param name="types"&gt;DataReader column types&lt;/param&gt;</comment>
        <comment type="line" pos:line="3292" pos:column="9">/// &lt;returns&gt;Default constructor&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="3293" pos:column="9">public</specifier> <name pos:line="3293" pos:column="16">ConstructorInfo</name></type> <name pos:line="3293" pos:column="32">FindConstructor</name><parameter_list pos:line="3293" pos:column="47">(<param><decl><type><name><name pos:line="3293" pos:column="48">string</name><index pos:line="3293" pos:column="54">[]</index></name></type> <name pos:line="3293" pos:column="57">names</name></decl></param>, <param><decl><type><name><name pos:line="3293" pos:column="64">Type</name><index pos:line="3293" pos:column="68">[]</index></name></type> <name pos:line="3293" pos:column="71">types</name></decl></param>)</parameter_list>
        <block pos:line="3294" pos:column="9">{
            <return pos:line="3295" pos:column="13">return <expr><call><name><name pos:line="3295" pos:column="20">_type</name><op:operator pos:line="3295" pos:column="25">.</op:operator><name pos:line="3295" pos:column="26">GetConstructor</name></name><argument_list pos:line="3295" pos:column="40">(<argument><expr><op:operator pos:line="3295" pos:column="41">new</op:operator> <name><name pos:line="3295" pos:column="45">Type</name><index pos:line="3295" pos:column="49">[<expr><lit:literal type="number" pos:line="3295" pos:column="50">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="3298" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="3299" pos:column="9">/// Not impelmeneted as far as default constructor used for all cases</comment>
        <comment type="line" pos:line="3300" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="3301" pos:column="9">/// &lt;param name="constructor"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="3302" pos:column="9">/// &lt;param name="columnName"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="3303" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="3304" pos:column="9">public</specifier> <name><name pos:line="3304" pos:column="16">SqlMapper</name><op:operator pos:line="3304" pos:column="25">.</op:operator><name pos:line="3304" pos:column="26">IMemberMap</name></name></type> <name pos:line="3304" pos:column="37">GetConstructorParameter</name><parameter_list pos:line="3304" pos:column="60">(<param><decl><type><name pos:line="3304" pos:column="61">ConstructorInfo</name></type> <name pos:line="3304" pos:column="77">constructor</name></decl></param>, <param><decl><type><name pos:line="3304" pos:column="90">string</name></type> <name pos:line="3304" pos:column="97">columnName</name></decl></param>)</parameter_list>
        <block pos:line="3305" pos:column="9">{
            <throw pos:line="3306" pos:column="13">throw <expr><op:operator pos:line="3306" pos:column="19">new</op:operator> <call><name pos:line="3306" pos:column="23">NotSupportedException</name><argument_list pos:line="3306" pos:column="44">()</argument_list></call></expr>;</throw>
        }</block></function>

        <comment type="line" pos:line="3309" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="3310" pos:column="9">/// Returns property based on selector strategy</comment>
        <comment type="line" pos:line="3311" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="3312" pos:column="9">/// &lt;param name="columnName"&gt;DataReader column name&lt;/param&gt;</comment>
        <comment type="line" pos:line="3313" pos:column="9">/// &lt;returns&gt;Poperty member map&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="3314" pos:column="9">public</specifier> <name><name pos:line="3314" pos:column="16">SqlMapper</name><op:operator pos:line="3314" pos:column="25">.</op:operator><name pos:line="3314" pos:column="26">IMemberMap</name></name></type> <name pos:line="3314" pos:column="37">GetMember</name><parameter_list pos:line="3314" pos:column="46">(<param><decl><type><name pos:line="3314" pos:column="47">string</name></type> <name pos:line="3314" pos:column="54">columnName</name></decl></param>)</parameter_list>
        <block pos:line="3315" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="3316" pos:column="13">var</name></type> <name pos:line="3316" pos:column="17">prop</name> <init pos:line="3316" pos:column="22">= <expr><call><name pos:line="3316" pos:column="24">_propertySelector</name><argument_list pos:line="3316" pos:column="41">(<argument><expr><name pos:line="3316" pos:column="42">_type</name></expr></argument>, <argument><expr><name pos:line="3316" pos:column="49">columnName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="3317" pos:column="13">return <expr><name pos:line="3317" pos:column="20">prop</name> <op:operator pos:line="3317" pos:column="25">!=</op:operator> <name pos:line="3317" pos:column="28">null</name> <op:operator pos:line="3317" pos:column="33">?</op:operator> <op:operator pos:line="3317" pos:column="35">new</op:operator> <call><name pos:line="3317" pos:column="39">SimpleMemberMap</name><argument_list pos:line="3317" pos:column="54">(<argument><expr><name pos:line="3317" pos:column="55">columnName</name></expr></argument>, <argument><expr><name pos:line="3317" pos:column="67">prop</name></expr></argument>)</argument_list></call> <op:operator pos:line="3317" pos:column="73">:</op:operator> <name pos:line="3317" pos:column="75">null</name></expr>;</return>
        }</block></function>
    }</block></class>

    <comment type="line" pos:line="3321" pos:column="5">// Define DAPPER_MAKE_PRIVATE if you reference Dapper by source</comment>
    <comment type="line" pos:line="3322" pos:column="5">// and you like to make the Dapper types private (in order to avoid</comment>
    <comment type="line" pos:line="3323" pos:column="5">// conflicts with other projects that also reference Dapper by source)</comment>
<cpp:if pos:line="3324" pos:column="1">#<cpp:directive pos:line="3324" pos:column="2">if</cpp:directive> <expr><op:operator pos:line="3324" pos:column="5">!</op:operator><name pos:line="3324" pos:column="6">DAPPER_MAKE_PRIVATE</name></expr></cpp:if>

    <class><specifier pos:line="3326" pos:column="5">public</specifier> <specifier pos:line="3326" pos:column="12">partial</specifier> class <name pos:line="3326" pos:column="26">SqlMapper</name>
    <block pos:line="3327" pos:column="5">{
    }</block></class>

    <class><specifier pos:line="3330" pos:column="5">public</specifier> <specifier pos:line="3330" pos:column="12">partial</specifier> class <name pos:line="3330" pos:column="26">DynamicParameters</name>
    <block pos:line="3331" pos:column="5">{

    }</block></class>

    <class><specifier pos:line="3335" pos:column="5">public</specifier> <specifier pos:line="3335" pos:column="12">partial</specifier> class <name pos:line="3335" pos:column="26">DbString</name>
    <block pos:line="3336" pos:column="5">{

    }</block></class>

    <class><specifier pos:line="3340" pos:column="5">public</specifier> <specifier pos:line="3340" pos:column="12">partial</specifier> class <name pos:line="3340" pos:column="26">SimpleMemberMap</name>
    <block pos:line="3341" pos:column="5">{

    }</block></class>

    <class><specifier pos:line="3345" pos:column="5">public</specifier> <specifier pos:line="3345" pos:column="12">partial</specifier> class <name pos:line="3345" pos:column="26">DefaultTypeMap</name>
    <block pos:line="3346" pos:column="5">{

    }</block></class>

    <class><specifier pos:line="3350" pos:column="5">public</specifier> <specifier pos:line="3350" pos:column="12">partial</specifier> class <name pos:line="3350" pos:column="26">CustomPropertyTypeMap</name>
    <block pos:line="3351" pos:column="5">{

    }</block></class>

    <class><specifier pos:line="3355" pos:column="5">public</specifier> <specifier pos:line="3355" pos:column="12">partial</specifier> class <name pos:line="3355" pos:column="26">FeatureSupport</name>
    <block pos:line="3356" pos:column="5">{

    }</block></class>

<cpp:endif pos:line="3360" pos:column="1">#<cpp:directive pos:line="3360" pos:column="2">endif</cpp:directive></cpp:endif>

}</block></namespace></unit>
