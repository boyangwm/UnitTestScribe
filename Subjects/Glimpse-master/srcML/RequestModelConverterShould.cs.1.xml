<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.AspNet\SerializationConverter\RequestModelConverterShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Collections</name><op:operator pos:line="3" pos:column="25">.</op:operator><name pos:line="3" pos:column="26">Specialized</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Web</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Glimpse</name><op:operator pos:line="5" pos:column="14">.</op:operator><name pos:line="5" pos:column="15">AspNet</name><op:operator pos:line="5" pos:column="21">.</op:operator><name pos:line="5" pos:column="22">Model</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Glimpse</name><op:operator pos:line="6" pos:column="14">.</op:operator><name pos:line="6" pos:column="15">AspNet</name><op:operator pos:line="6" pos:column="21">.</op:operator><name pos:line="6" pos:column="22">SerializationConverter</name></name>;</using>
<using pos:line="7" pos:column="1">using <name pos:line="7" pos:column="7">Moq</name>;</using>
<using pos:line="8" pos:column="1">using <name pos:line="8" pos:column="7">Xunit</name>;</using>

<namespace pos:line="10" pos:column="1">namespace <name><name pos:line="10" pos:column="11">Glimpse</name><op:operator pos:line="10" pos:column="18">.</op:operator><name pos:line="10" pos:column="19">Test</name><op:operator pos:line="10" pos:column="23">.</op:operator><name pos:line="10" pos:column="24">AspNet</name><op:operator pos:line="10" pos:column="30">.</op:operator><name pos:line="10" pos:column="31">SerializationConverter</name></name>
<block pos:line="11" pos:column="1">{
    <class><specifier pos:line="12" pos:column="5">public</specifier> class <name pos:line="12" pos:column="18">RequestModelConverterShould</name>
    <block pos:line="13" pos:column="5">{
        <function><type><attribute pos:line="14" pos:column="9">[<expr><name pos:line="14" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="15" pos:column="9">public</specifier> <name pos:line="15" pos:column="16">void</name></type> <name pos:line="15" pos:column="21">ConvertToDictionary</name><parameter_list pos:line="15" pos:column="40">()</parameter_list>
        <block pos:line="16" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="17" pos:column="13">var</name></type> <name pos:line="17" pos:column="17">serverUtilMock</name> <init pos:line="17" pos:column="32">= <expr><op:operator pos:line="17" pos:column="34">new</op:operator> <call><name><name pos:line="17" pos:column="38">Mock</name><argument_list pos:line="17" pos:column="42">&lt;<argument><name pos:line="17" pos:column="43">HttpServerUtilityBase</name></argument>&gt;</argument_list></name><argument_list pos:line="17" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="18" pos:column="13">serverUtilMock</name><op:operator pos:line="18" pos:column="27">.</op:operator><name pos:line="18" pos:column="28">Setup</name></name><argument_list pos:line="18" pos:column="33">(<argument><expr><lambda><name pos:line="18" pos:column="34">s</name> <op:operator pos:line="18" pos:column="36">=&gt;</op:operator> <call><name><name pos:line="18" pos:column="39">s</name><op:operator pos:line="18" pos:column="40">.</op:operator><name pos:line="18" pos:column="41">UrlDecode</name></name><argument_list pos:line="18" pos:column="50">(<argument><expr><call><name><name pos:line="18" pos:column="51">It</name><op:operator pos:line="18" pos:column="53">.</op:operator><name><name pos:line="18" pos:column="54">IsAny</name><argument_list pos:line="18" pos:column="59">&lt;<argument><name pos:line="18" pos:column="60">string</name></argument>&gt;</argument_list></name></name><argument_list pos:line="18" pos:column="67">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="18" pos:column="71">.</op:operator><call><name pos:line="18" pos:column="72">Returns</name><argument_list pos:line="18" pos:column="79">(<argument><expr><lit:literal type="string" pos:line="18" pos:column="80">"decoded"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="20" pos:column="13">var</name></type> <name pos:line="20" pos:column="17">requestMock</name> <init pos:line="20" pos:column="29">= <expr><op:operator pos:line="20" pos:column="31">new</op:operator> <call><name><name pos:line="20" pos:column="35">Mock</name><argument_list pos:line="20" pos:column="39">&lt;<argument><name pos:line="20" pos:column="40">HttpRequestBase</name></argument>&gt;</argument_list></name><argument_list pos:line="20" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="21" pos:column="13">var</name></type> <name pos:line="21" pos:column="17">applicationPath</name> <init pos:line="21" pos:column="33">= <expr><lit:literal type="string" pos:line="21" pos:column="35">"/"</lit:literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="22" pos:column="13">requestMock</name><op:operator pos:line="22" pos:column="24">.</op:operator><name pos:line="22" pos:column="25">Setup</name></name><argument_list pos:line="22" pos:column="30">(<argument><expr><lambda><name pos:line="22" pos:column="31">r</name> <op:operator pos:line="22" pos:column="33">=&gt;</op:operator> <name><name pos:line="22" pos:column="36">r</name><op:operator pos:line="22" pos:column="37">.</op:operator><name pos:line="22" pos:column="38">ApplicationPath</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="22" pos:column="54">.</op:operator><call><name pos:line="22" pos:column="55">Returns</name><argument_list pos:line="22" pos:column="62">(<argument><expr><name pos:line="22" pos:column="63">applicationPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="23" pos:column="13">var</name></type> <name pos:line="23" pos:column="17">appRelativeCurrentExeFilePath</name> <init pos:line="23" pos:column="47">= <expr><lit:literal type="string" pos:line="23" pos:column="49">"/"</lit:literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="24" pos:column="13">requestMock</name><op:operator pos:line="24" pos:column="24">.</op:operator><name pos:line="24" pos:column="25">Setup</name></name><argument_list pos:line="24" pos:column="30">(<argument><expr><lambda><name pos:line="24" pos:column="31">r</name> <op:operator pos:line="24" pos:column="33">=&gt;</op:operator> <name><name pos:line="24" pos:column="36">r</name><op:operator pos:line="24" pos:column="37">.</op:operator><name pos:line="24" pos:column="38">AppRelativeCurrentExecutionFilePath</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="24" pos:column="74">.</op:operator><call><name pos:line="24" pos:column="75">Returns</name><argument_list pos:line="24" pos:column="82">(<argument><expr><name pos:line="24" pos:column="83">appRelativeCurrentExeFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="25" pos:column="13">var</name></type> <name pos:line="25" pos:column="17">currentExeFilePath</name> <init pos:line="25" pos:column="36">= <expr><lit:literal type="string" pos:line="25" pos:column="38">"/"</lit:literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="26" pos:column="13">requestMock</name><op:operator pos:line="26" pos:column="24">.</op:operator><name pos:line="26" pos:column="25">Setup</name></name><argument_list pos:line="26" pos:column="30">(<argument><expr><lambda><name pos:line="26" pos:column="31">r</name> <op:operator pos:line="26" pos:column="33">=&gt;</op:operator> <name><name pos:line="26" pos:column="36">r</name><op:operator pos:line="26" pos:column="37">.</op:operator><name pos:line="26" pos:column="38">CurrentExecutionFilePath</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="26" pos:column="63">.</op:operator><call><name pos:line="26" pos:column="64">Returns</name><argument_list pos:line="26" pos:column="71">(<argument><expr><name pos:line="26" pos:column="72">currentExeFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="27" pos:column="13">var</name></type> <name pos:line="27" pos:column="17">filePath</name> <init pos:line="27" pos:column="26">= <expr><lit:literal type="string" pos:line="27" pos:column="28">"/"</lit:literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="28" pos:column="13">requestMock</name><op:operator pos:line="28" pos:column="24">.</op:operator><name pos:line="28" pos:column="25">Setup</name></name><argument_list pos:line="28" pos:column="30">(<argument><expr><lambda><name pos:line="28" pos:column="31">r</name> <op:operator pos:line="28" pos:column="33">=&gt;</op:operator> <name><name pos:line="28" pos:column="36">r</name><op:operator pos:line="28" pos:column="37">.</op:operator><name pos:line="28" pos:column="38">FilePath</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="28" pos:column="47">.</op:operator><call><name pos:line="28" pos:column="48">Returns</name><argument_list pos:line="28" pos:column="55">(<argument><expr><name pos:line="28" pos:column="56">filePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="29" pos:column="13">var</name></type> <name pos:line="29" pos:column="17">path</name> <init pos:line="29" pos:column="22">= <expr><lit:literal type="string" pos:line="29" pos:column="24">"/"</lit:literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="30" pos:column="13">requestMock</name><op:operator pos:line="30" pos:column="24">.</op:operator><name pos:line="30" pos:column="25">Setup</name></name><argument_list pos:line="30" pos:column="30">(<argument><expr><lambda><name pos:line="30" pos:column="31">r</name> <op:operator pos:line="30" pos:column="33">=&gt;</op:operator> <name><name pos:line="30" pos:column="36">r</name><op:operator pos:line="30" pos:column="37">.</op:operator><name pos:line="30" pos:column="38">Path</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="30" pos:column="43">.</op:operator><call><name pos:line="30" pos:column="44">Returns</name><argument_list pos:line="30" pos:column="51">(<argument><expr><name pos:line="30" pos:column="52">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="31" pos:column="13">var</name></type> <name pos:line="31" pos:column="17">pathInfo</name> <init pos:line="31" pos:column="26">= <expr><lit:literal type="string" pos:line="31" pos:column="28">"/"</lit:literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="32" pos:column="13">requestMock</name><op:operator pos:line="32" pos:column="24">.</op:operator><name pos:line="32" pos:column="25">Setup</name></name><argument_list pos:line="32" pos:column="30">(<argument><expr><lambda><name pos:line="32" pos:column="31">r</name> <op:operator pos:line="32" pos:column="33">=&gt;</op:operator> <name><name pos:line="32" pos:column="36">r</name><op:operator pos:line="32" pos:column="37">.</op:operator><name pos:line="32" pos:column="38">PathInfo</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="32" pos:column="47">.</op:operator><call><name pos:line="32" pos:column="48">Returns</name><argument_list pos:line="32" pos:column="55">(<argument><expr><name pos:line="32" pos:column="56">pathInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="33" pos:column="13">var</name></type> <name pos:line="33" pos:column="17">physicalApplicationPath</name> <init pos:line="33" pos:column="41">= <expr><lit:literal type="string" pos:line="33" pos:column="43">"/"</lit:literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="34" pos:column="13">requestMock</name><op:operator pos:line="34" pos:column="24">.</op:operator><name pos:line="34" pos:column="25">Setup</name></name><argument_list pos:line="34" pos:column="30">(<argument><expr><lambda><name pos:line="34" pos:column="31">r</name> <op:operator pos:line="34" pos:column="33">=&gt;</op:operator> <name><name pos:line="34" pos:column="36">r</name><op:operator pos:line="34" pos:column="37">.</op:operator><name pos:line="34" pos:column="38">PhysicalApplicationPath</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="34" pos:column="62">.</op:operator><call><name pos:line="34" pos:column="63">Returns</name><argument_list pos:line="34" pos:column="70">(<argument><expr><name pos:line="34" pos:column="71">physicalApplicationPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="35" pos:column="13">var</name></type> <name pos:line="35" pos:column="17">physicalPath</name> <init pos:line="35" pos:column="30">= <expr><lit:literal type="string" pos:line="35" pos:column="32">"/"</lit:literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="36" pos:column="13">requestMock</name><op:operator pos:line="36" pos:column="24">.</op:operator><name pos:line="36" pos:column="25">Setup</name></name><argument_list pos:line="36" pos:column="30">(<argument><expr><lambda><name pos:line="36" pos:column="31">r</name> <op:operator pos:line="36" pos:column="33">=&gt;</op:operator> <name><name pos:line="36" pos:column="36">r</name><op:operator pos:line="36" pos:column="37">.</op:operator><name pos:line="36" pos:column="38">PhysicalPath</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="36" pos:column="51">.</op:operator><call><name pos:line="36" pos:column="52">Returns</name><argument_list pos:line="36" pos:column="59">(<argument><expr><name pos:line="36" pos:column="60">physicalPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="37" pos:column="13">var</name></type> <name pos:line="37" pos:column="17">rawUrl</name> <init pos:line="37" pos:column="24">= <expr><lit:literal type="string" pos:line="37" pos:column="26">"/"</lit:literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="38" pos:column="13">requestMock</name><op:operator pos:line="38" pos:column="24">.</op:operator><name pos:line="38" pos:column="25">Setup</name></name><argument_list pos:line="38" pos:column="30">(<argument><expr><lambda><name pos:line="38" pos:column="31">r</name> <op:operator pos:line="38" pos:column="33">=&gt;</op:operator> <name><name pos:line="38" pos:column="36">r</name><op:operator pos:line="38" pos:column="37">.</op:operator><name pos:line="38" pos:column="38">RawUrl</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="38" pos:column="45">.</op:operator><call><name pos:line="38" pos:column="46">Returns</name><argument_list pos:line="38" pos:column="53">(<argument><expr><name pos:line="38" pos:column="54">rawUrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="39" pos:column="13">var</name></type> <name pos:line="39" pos:column="17">url</name> <init pos:line="39" pos:column="21">= <expr><op:operator pos:line="39" pos:column="23">new</op:operator> <call><name pos:line="39" pos:column="27">Uri</name><argument_list pos:line="39" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="39" pos:column="31">"http://localhost/"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="40" pos:column="13">requestMock</name><op:operator pos:line="40" pos:column="24">.</op:operator><name pos:line="40" pos:column="25">Setup</name></name><argument_list pos:line="40" pos:column="30">(<argument><expr><lambda><name pos:line="40" pos:column="31">r</name> <op:operator pos:line="40" pos:column="33">=&gt;</op:operator> <name><name pos:line="40" pos:column="36">r</name><op:operator pos:line="40" pos:column="37">.</op:operator><name pos:line="40" pos:column="38">Url</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="40" pos:column="42">.</op:operator><call><name pos:line="40" pos:column="43">Returns</name><argument_list pos:line="40" pos:column="50">(<argument><expr><name pos:line="40" pos:column="51">url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="41" pos:column="13">var</name></type> <name pos:line="41" pos:column="17">urlReferrer</name> <init pos:line="41" pos:column="29">= <expr><op:operator pos:line="41" pos:column="31">new</op:operator> <call><name pos:line="41" pos:column="35">Uri</name><argument_list pos:line="41" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="41" pos:column="39">"http://localhost/"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="42" pos:column="13">requestMock</name><op:operator pos:line="42" pos:column="24">.</op:operator><name pos:line="42" pos:column="25">Setup</name></name><argument_list pos:line="42" pos:column="30">(<argument><expr><lambda><name pos:line="42" pos:column="31">r</name> <op:operator pos:line="42" pos:column="33">=&gt;</op:operator> <name><name pos:line="42" pos:column="36">r</name><op:operator pos:line="42" pos:column="37">.</op:operator><name pos:line="42" pos:column="38">UrlReferrer</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="42" pos:column="50">.</op:operator><call><name pos:line="42" pos:column="51">Returns</name><argument_list pos:line="42" pos:column="58">(<argument><expr><name pos:line="42" pos:column="59">urlReferrer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="43" pos:column="13">var</name></type> <name pos:line="43" pos:column="17">userAgent</name> <init pos:line="43" pos:column="27">= <expr><lit:literal type="string" pos:line="43" pos:column="29">"agent"</lit:literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="44" pos:column="13">requestMock</name><op:operator pos:line="44" pos:column="24">.</op:operator><name pos:line="44" pos:column="25">Setup</name></name><argument_list pos:line="44" pos:column="30">(<argument><expr><lambda><name pos:line="44" pos:column="31">r</name> <op:operator pos:line="44" pos:column="33">=&gt;</op:operator> <name><name pos:line="44" pos:column="36">r</name><op:operator pos:line="44" pos:column="37">.</op:operator><name pos:line="44" pos:column="38">UserAgent</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="44" pos:column="48">.</op:operator><call><name pos:line="44" pos:column="49">Returns</name><argument_list pos:line="44" pos:column="56">(<argument><expr><name pos:line="44" pos:column="57">userAgent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="45" pos:column="13">var</name></type> <name pos:line="45" pos:column="17">userHostAddress</name> <init pos:line="45" pos:column="33">= <expr><lit:literal type="string" pos:line="45" pos:column="35">"127.0.0.1"</lit:literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="46" pos:column="13">requestMock</name><op:operator pos:line="46" pos:column="24">.</op:operator><name pos:line="46" pos:column="25">Setup</name></name><argument_list pos:line="46" pos:column="30">(<argument><expr><lambda><name pos:line="46" pos:column="31">r</name> <op:operator pos:line="46" pos:column="33">=&gt;</op:operator> <name><name pos:line="46" pos:column="36">r</name><op:operator pos:line="46" pos:column="37">.</op:operator><name pos:line="46" pos:column="38">UserHostAddress</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="46" pos:column="54">.</op:operator><call><name pos:line="46" pos:column="55">Returns</name><argument_list pos:line="46" pos:column="62">(<argument><expr><name pos:line="46" pos:column="63">userHostAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="47" pos:column="13">var</name></type> <name pos:line="47" pos:column="17">userHostName</name> <init pos:line="47" pos:column="30">= <expr><lit:literal type="string" pos:line="47" pos:column="32">"host name"</lit:literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="48" pos:column="13">requestMock</name><op:operator pos:line="48" pos:column="24">.</op:operator><name pos:line="48" pos:column="25">Setup</name></name><argument_list pos:line="48" pos:column="30">(<argument><expr><lambda><name pos:line="48" pos:column="31">r</name> <op:operator pos:line="48" pos:column="33">=&gt;</op:operator> <name><name pos:line="48" pos:column="36">r</name><op:operator pos:line="48" pos:column="37">.</op:operator><name pos:line="48" pos:column="38">UserHostName</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="48" pos:column="51">.</op:operator><call><name pos:line="48" pos:column="52">Returns</name><argument_list pos:line="48" pos:column="59">(<argument><expr><name pos:line="48" pos:column="60">userHostName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="50" pos:column="13">var</name></type> <name pos:line="50" pos:column="17">cookies</name> <init pos:line="50" pos:column="25">= <expr><op:operator pos:line="50" pos:column="27">new</op:operator> <name pos:line="50" pos:column="31">HttpCookieCollection</name> <block pos:line="50" pos:column="52">{ <expr><op:operator pos:line="50" pos:column="54">new</op:operator> <call><name pos:line="50" pos:column="58">HttpCookie</name><argument_list pos:line="50" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="50" pos:column="69">"TestKey"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="50" pos:column="80">"TestValue"</lit:literal></expr></argument>)</argument_list></call></expr> }</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="51" pos:column="13">requestMock</name><op:operator pos:line="51" pos:column="24">.</op:operator><name pos:line="51" pos:column="25">Setup</name></name><argument_list pos:line="51" pos:column="30">(<argument><expr><lambda><name pos:line="51" pos:column="31">r</name> <op:operator pos:line="51" pos:column="33">=&gt;</op:operator> <name><name pos:line="51" pos:column="36">r</name><op:operator pos:line="51" pos:column="37">.</op:operator><name pos:line="51" pos:column="38">Cookies</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="51" pos:column="46">.</op:operator><call><name pos:line="51" pos:column="47">Returns</name><argument_list pos:line="51" pos:column="54">(<argument><expr><name pos:line="51" pos:column="55">cookies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="53" pos:column="13">var</name></type> <name pos:line="53" pos:column="17">queryString</name> <init pos:line="53" pos:column="29">= <expr><op:operator pos:line="53" pos:column="31">new</op:operator> <name pos:line="53" pos:column="35">NameValueCollection</name> <block pos:line="53" pos:column="55">{ <expr><block pos:line="53" pos:column="57">{ <expr><lit:literal type="string" pos:line="53" pos:column="59">"TestKey"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="53" pos:column="70">"TestValue"</lit:literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="54" pos:column="13">requestMock</name><op:operator pos:line="54" pos:column="24">.</op:operator><name pos:line="54" pos:column="25">Setup</name></name><argument_list pos:line="54" pos:column="30">(<argument><expr><lambda><name pos:line="54" pos:column="31">r</name> <op:operator pos:line="54" pos:column="33">=&gt;</op:operator> <name><name pos:line="54" pos:column="36">r</name><op:operator pos:line="54" pos:column="37">.</op:operator><name pos:line="54" pos:column="38">QueryString</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="54" pos:column="50">.</op:operator><call><name pos:line="54" pos:column="51">Returns</name><argument_list pos:line="54" pos:column="58">(<argument><expr><name pos:line="54" pos:column="59">queryString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="56" pos:column="13">var</name></type> <name pos:line="56" pos:column="17">contextMock</name> <init pos:line="56" pos:column="29">= <expr><op:operator pos:line="56" pos:column="31">new</op:operator> <call><name><name pos:line="56" pos:column="35">Mock</name><argument_list pos:line="56" pos:column="39">&lt;<argument><name pos:line="56" pos:column="40">HttpContextBase</name></argument>&gt;</argument_list></name><argument_list pos:line="56" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="57" pos:column="13">contextMock</name><op:operator pos:line="57" pos:column="24">.</op:operator><name pos:line="57" pos:column="25">Setup</name></name><argument_list pos:line="57" pos:column="30">(<argument><expr><lambda><name pos:line="57" pos:column="31">c</name> <op:operator pos:line="57" pos:column="33">=&gt;</op:operator> <name><name pos:line="57" pos:column="36">c</name><op:operator pos:line="57" pos:column="37">.</op:operator><name pos:line="57" pos:column="38">Request</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="57" pos:column="46">.</op:operator><call><name pos:line="57" pos:column="47">Returns</name><argument_list pos:line="57" pos:column="54">(<argument><expr><name><name pos:line="57" pos:column="55">requestMock</name><op:operator pos:line="57" pos:column="66">.</op:operator><name pos:line="57" pos:column="67">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="58" pos:column="13">contextMock</name><op:operator pos:line="58" pos:column="24">.</op:operator><name pos:line="58" pos:column="25">Setup</name></name><argument_list pos:line="58" pos:column="30">(<argument><expr><lambda><name pos:line="58" pos:column="31">c</name> <op:operator pos:line="58" pos:column="33">=&gt;</op:operator> <name><name pos:line="58" pos:column="36">c</name><op:operator pos:line="58" pos:column="37">.</op:operator><name pos:line="58" pos:column="38">Server</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="58" pos:column="45">.</op:operator><call><name pos:line="58" pos:column="46">Returns</name><argument_list pos:line="58" pos:column="53">(<argument><expr><name><name pos:line="58" pos:column="54">serverUtilMock</name><op:operator pos:line="58" pos:column="68">.</op:operator><name pos:line="58" pos:column="69">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


            <decl_stmt><decl><type><name pos:line="61" pos:column="13">var</name></type> <name pos:line="61" pos:column="17">model</name> <init pos:line="61" pos:column="23">= <expr><op:operator pos:line="61" pos:column="25">new</op:operator> <call><name pos:line="61" pos:column="29">RequestModel</name><argument_list pos:line="61" pos:column="41">(<argument><expr><name><name pos:line="61" pos:column="42">contextMock</name><op:operator pos:line="61" pos:column="53">.</op:operator><name pos:line="61" pos:column="54">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="63" pos:column="13">var</name></type> <name pos:line="63" pos:column="17">converter</name> <init pos:line="63" pos:column="27">= <expr><op:operator pos:line="63" pos:column="29">new</op:operator> <call><name pos:line="63" pos:column="33">RequestModelConverter</name><argument_list pos:line="63" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="64" pos:column="13">var</name></type> <name pos:line="64" pos:column="17">obj</name> <init pos:line="64" pos:column="21">= <expr><call><name><name pos:line="64" pos:column="23">converter</name><op:operator pos:line="64" pos:column="32">.</op:operator><name pos:line="64" pos:column="33">Convert</name></name><argument_list pos:line="64" pos:column="40">(<argument><expr><name pos:line="64" pos:column="41">model</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="66" pos:column="13">var</name></type> <name pos:line="66" pos:column="17">result</name> <init pos:line="66" pos:column="24">= <expr><name pos:line="66" pos:column="26">obj</name> <op:operator pos:line="66" pos:column="30">as</op:operator> <name><name pos:line="66" pos:column="33">IDictionary</name><argument_list pos:line="66" pos:column="44">&lt;<argument><name pos:line="66" pos:column="45">object</name></argument>, <argument><name pos:line="66" pos:column="53">object</name></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="68" pos:column="13">Assert</name><op:operator pos:line="68" pos:column="19">.</op:operator><name pos:line="68" pos:column="20">NotNull</name></name><argument_list pos:line="68" pos:column="27">(<argument><expr><name pos:line="68" pos:column="28">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="69" pos:column="13">Assert</name><op:operator pos:line="69" pos:column="19">.</op:operator><name pos:line="69" pos:column="20">True</name></name><argument_list pos:line="69" pos:column="24">(<argument><expr><name><name pos:line="69" pos:column="25">result</name><op:operator pos:line="69" pos:column="31">.</op:operator><name pos:line="69" pos:column="32">Keys</name><op:operator pos:line="69" pos:column="36">.</op:operator><name pos:line="69" pos:column="37">Count</name></name> <op:operator pos:line="69" pos:column="43">&gt;</op:operator> <lit:literal type="number" pos:line="69" pos:column="45">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="70" pos:column="13">Assert</name><op:operator pos:line="70" pos:column="19">.</op:operator><name pos:line="70" pos:column="20">Contains</name></name><argument_list pos:line="70" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="70" pos:column="29">"Url"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="70" pos:column="36">result</name><op:operator pos:line="70" pos:column="42">.</op:operator><name pos:line="70" pos:column="43">Keys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="71" pos:column="13">Assert</name><op:operator pos:line="71" pos:column="19">.</op:operator><name pos:line="71" pos:column="20">Equal</name></name><argument_list pos:line="71" pos:column="25">(<argument><expr><name pos:line="71" pos:column="26">userHostName</name></expr></argument>, <argument><expr><name><name pos:line="71" pos:column="40">result</name><index pos:line="71" pos:column="46">[<expr><lit:literal type="string" pos:line="71" pos:column="47">"User Host Name"</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
