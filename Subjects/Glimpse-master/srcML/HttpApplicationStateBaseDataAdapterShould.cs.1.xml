<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.AspNet\HttpApplicationStateBaseDataAdapterShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">System</name><op:operator pos:line="1" pos:column="13">.</op:operator><name pos:line="1" pos:column="14">Web</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">Glimpse</name><op:operator pos:line="2" pos:column="14">.</op:operator><name pos:line="2" pos:column="15">Core</name><op:operator pos:line="2" pos:column="19">.</op:operator><name pos:line="2" pos:column="20">Extensions</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Glimpse</name><op:operator pos:line="3" pos:column="14">.</op:operator><name pos:line="3" pos:column="15">AspNet</name></name>;</using>
<using pos:line="4" pos:column="1">using <name pos:line="4" pos:column="7">Moq</name>;</using>
<using pos:line="5" pos:column="1">using <name pos:line="5" pos:column="7">Xunit</name>;</using>

<namespace pos:line="7" pos:column="1">namespace <name><name pos:line="7" pos:column="11">Glimpse</name><op:operator pos:line="7" pos:column="18">.</op:operator><name pos:line="7" pos:column="19">Test</name><op:operator pos:line="7" pos:column="23">.</op:operator><name pos:line="7" pos:column="24">AspNet</name></name>
<block pos:line="8" pos:column="1">{
    <class><specifier pos:line="9" pos:column="5">public</specifier> class <name pos:line="9" pos:column="18">HttpApplicationStateBaseDataAdapterShould</name>
    <block pos:line="10" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="11" pos:column="9">public</specifier> <name><name pos:line="11" pos:column="16">Mock</name><argument_list pos:line="11" pos:column="20">&lt;<argument><name pos:line="11" pos:column="21">HttpApplicationStateBase</name></argument>&gt;</argument_list></name></type> <name pos:line="11" pos:column="47">ApplicationStateMock</name> <block pos:line="11" pos:column="68">{ <function_decl><name pos:line="11" pos:column="70">get</name>;</function_decl> <function_decl><name pos:line="11" pos:column="75">set</name>;</function_decl> }</block></decl></decl_stmt>

        <constructor><specifier pos:line="13" pos:column="9">public</specifier> <name pos:line="13" pos:column="16">HttpApplicationStateBaseDataAdapterShould</name><parameter_list pos:line="13" pos:column="57">()</parameter_list>
        <block pos:line="14" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="15" pos:column="13">var</name></type> <name pos:line="15" pos:column="17">applicationStateMock</name> <init pos:line="15" pos:column="38">= <expr><op:operator pos:line="15" pos:column="40">new</op:operator> <call><name><name pos:line="15" pos:column="44">Mock</name><argument_list pos:line="15" pos:column="48">&lt;<argument><name pos:line="15" pos:column="49">HttpApplicationStateBase</name></argument>&gt;</argument_list></name><argument_list pos:line="15" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="16" pos:column="13">applicationStateMock</name><op:operator pos:line="16" pos:column="33">.</op:operator><name pos:line="16" pos:column="34">Setup</name></name><argument_list pos:line="16" pos:column="39">(<argument><expr><lambda><name pos:line="16" pos:column="40">st</name> <op:operator pos:line="16" pos:column="43">=&gt;</op:operator> <call><name><name pos:line="16" pos:column="46">st</name><op:operator pos:line="16" pos:column="48">.</op:operator><name pos:line="16" pos:column="49">Set</name></name><argument_list pos:line="16" pos:column="52">(<argument><expr><call><name><name pos:line="16" pos:column="53">It</name><op:operator pos:line="16" pos:column="55">.</op:operator><name><name pos:line="16" pos:column="56">IsAny</name><argument_list pos:line="16" pos:column="61">&lt;<argument><name pos:line="16" pos:column="62">string</name></argument>&gt;</argument_list></name></name><argument_list pos:line="16" pos:column="69">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="16" pos:column="73">It</name><op:operator pos:line="16" pos:column="75">.</op:operator><name><name pos:line="16" pos:column="76">IsAny</name><argument_list pos:line="16" pos:column="81">&lt;<argument><name pos:line="16" pos:column="82">object</name></argument>&gt;</argument_list></name></name><argument_list pos:line="16" pos:column="89">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="17" pos:column="13">applicationStateMock</name><op:operator pos:line="17" pos:column="33">.</op:operator><name pos:line="17" pos:column="34">Setup</name></name><argument_list pos:line="17" pos:column="39">(<argument><expr><lambda><name pos:line="17" pos:column="40">st</name> <op:operator pos:line="17" pos:column="43">=&gt;</op:operator> <call><name><name pos:line="17" pos:column="46">st</name><op:operator pos:line="17" pos:column="48">.</op:operator><name pos:line="17" pos:column="49">Get</name></name><argument_list pos:line="17" pos:column="52">(<argument><expr><call><name pos:line="17" pos:column="53">typeof</name><argument_list pos:line="17" pos:column="59">(<argument><expr><name pos:line="17" pos:column="60">int</name></expr></argument>)</argument_list></call><op:operator pos:line="17" pos:column="64">.</op:operator><name pos:line="17" pos:column="65">AssemblyQualifiedName</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="17" pos:column="88">.</op:operator><call><name pos:line="17" pos:column="89">Returns</name><argument_list pos:line="17" pos:column="96">(<argument><expr><lit:literal type="number" pos:line="17" pos:column="97">5</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="18" pos:column="13">ApplicationStateMock</name> <op:operator pos:line="18" pos:column="34">=</op:operator> <name pos:line="18" pos:column="36">applicationStateMock</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><attribute pos:line="21" pos:column="9">[<expr><name pos:line="21" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="22" pos:column="9">public</specifier> <name pos:line="22" pos:column="16">void</name></type> <name pos:line="22" pos:column="21">ContainItems</name><parameter_list pos:line="22" pos:column="33">()</parameter_list>
        <block pos:line="23" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="24" pos:column="13">var</name></type> <name pos:line="24" pos:column="17">dataStore</name> <init pos:line="24" pos:column="27">= <expr><op:operator pos:line="24" pos:column="29">new</op:operator> <call><name pos:line="24" pos:column="33">HttpApplicationStateBaseDataStoreAdapter</name><argument_list pos:line="24" pos:column="73">(<argument><expr><name><name pos:line="24" pos:column="74">ApplicationStateMock</name><op:operator pos:line="24" pos:column="94">.</op:operator><name pos:line="24" pos:column="95">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="26" pos:column="13">Assert</name><op:operator pos:line="26" pos:column="19">.</op:operator><name pos:line="26" pos:column="20">True</name></name><argument_list pos:line="26" pos:column="24">(<argument><expr><call><name><name pos:line="26" pos:column="25">dataStore</name><op:operator pos:line="26" pos:column="34">.</op:operator><name pos:line="26" pos:column="35">Contains</name></name><argument_list pos:line="26" pos:column="43">(<argument><expr><call><name pos:line="26" pos:column="44">typeof</name><argument_list pos:line="26" pos:column="50">(<argument><expr><name pos:line="26" pos:column="51">int</name></expr></argument>)</argument_list></call><op:operator pos:line="26" pos:column="55">.</op:operator><name pos:line="26" pos:column="56">AssemblyQualifiedName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="29" pos:column="9">[<expr><name pos:line="29" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="30" pos:column="9">public</specifier> <name pos:line="30" pos:column="16">void</name></type> <name pos:line="30" pos:column="21">NotContainItems</name><parameter_list pos:line="30" pos:column="36">()</parameter_list>
        <block pos:line="31" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="32" pos:column="13">var</name></type> <name pos:line="32" pos:column="17">dataStore</name> <init pos:line="32" pos:column="27">= <expr><op:operator pos:line="32" pos:column="29">new</op:operator> <call><name pos:line="32" pos:column="33">HttpApplicationStateBaseDataStoreAdapter</name><argument_list pos:line="32" pos:column="73">(<argument><expr><name><name pos:line="32" pos:column="74">ApplicationStateMock</name><op:operator pos:line="32" pos:column="94">.</op:operator><name pos:line="32" pos:column="95">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="34" pos:column="13">Assert</name><op:operator pos:line="34" pos:column="19">.</op:operator><name pos:line="34" pos:column="20">False</name></name><argument_list pos:line="34" pos:column="25">(<argument><expr><call><name><name pos:line="34" pos:column="26">dataStore</name><op:operator pos:line="34" pos:column="35">.</op:operator><name pos:line="34" pos:column="36">Contains</name></name><argument_list pos:line="34" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="34" pos:column="45">"random key"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="37" pos:column="9">[<expr><name pos:line="37" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="38" pos:column="9">public</specifier> <name pos:line="38" pos:column="16">void</name></type> <name pos:line="38" pos:column="21">ConstructWithAnHttpApplicationStateBase</name><parameter_list pos:line="38" pos:column="60">()</parameter_list>
        <block pos:line="39" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="40" pos:column="13">var</name></type> <name pos:line="40" pos:column="17">dataStore</name> <init pos:line="40" pos:column="27">= <expr><op:operator pos:line="40" pos:column="29">new</op:operator> <call><name pos:line="40" pos:column="33">HttpApplicationStateBaseDataStoreAdapter</name><argument_list pos:line="40" pos:column="73">(<argument><expr><name><name pos:line="40" pos:column="74">ApplicationStateMock</name><op:operator pos:line="40" pos:column="94">.</op:operator><name pos:line="40" pos:column="95">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="42" pos:column="13">Assert</name><op:operator pos:line="42" pos:column="19">.</op:operator><name pos:line="42" pos:column="20">NotNull</name></name><argument_list pos:line="42" pos:column="27">(<argument><expr><name pos:line="42" pos:column="28">dataStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="45" pos:column="9">[<expr><name pos:line="45" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="46" pos:column="9">public</specifier> <name pos:line="46" pos:column="16">void</name></type> <name pos:line="46" pos:column="21">GetViaGenerics</name><parameter_list pos:line="46" pos:column="35">()</parameter_list>
        <block pos:line="47" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="48" pos:column="13">var</name></type> <name pos:line="48" pos:column="17">dataStore</name> <init pos:line="48" pos:column="27">= <expr><op:operator pos:line="48" pos:column="29">new</op:operator> <call><name pos:line="48" pos:column="33">HttpApplicationStateBaseDataStoreAdapter</name><argument_list pos:line="48" pos:column="73">(<argument><expr><name><name pos:line="48" pos:column="74">ApplicationStateMock</name><op:operator pos:line="48" pos:column="94">.</op:operator><name pos:line="48" pos:column="95">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="50" pos:column="13">Assert</name><op:operator pos:line="50" pos:column="19">.</op:operator><name pos:line="50" pos:column="20">Equal</name></name><argument_list pos:line="50" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="50" pos:column="26">5</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="50" pos:column="29">dataStore</name><op:operator pos:line="50" pos:column="38">.</op:operator><name><name pos:line="50" pos:column="39">Get</name><argument_list pos:line="50" pos:column="42">&lt;<argument><name pos:line="50" pos:column="43">int</name></argument>&gt;</argument_list></name></name><argument_list pos:line="50" pos:column="47">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="51" pos:column="13">ApplicationStateMock</name><op:operator pos:line="51" pos:column="33">.</op:operator><name pos:line="51" pos:column="34">Verify</name></name><argument_list pos:line="51" pos:column="40">(<argument><expr><lambda><name pos:line="51" pos:column="41">st</name> <op:operator pos:line="51" pos:column="44">=&gt;</op:operator> <call><name><name pos:line="51" pos:column="47">st</name><op:operator pos:line="51" pos:column="49">.</op:operator><name pos:line="51" pos:column="50">Get</name></name><argument_list pos:line="51" pos:column="53">(<argument><expr><call><name pos:line="51" pos:column="54">typeof</name><argument_list pos:line="51" pos:column="60">(<argument><expr><name pos:line="51" pos:column="61">int</name></expr></argument>)</argument_list></call><op:operator pos:line="51" pos:column="65">.</op:operator><name pos:line="51" pos:column="66">AssemblyQualifiedName</name></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="51" pos:column="90">Times</name><op:operator pos:line="51" pos:column="95">.</op:operator><name pos:line="51" pos:column="96">Once</name></name><argument_list pos:line="51" pos:column="100">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="54" pos:column="9">[<expr><name pos:line="54" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="55" pos:column="9">public</specifier> <name pos:line="55" pos:column="16">void</name></type> <name pos:line="55" pos:column="21">GetViaGenericsWithKey</name><parameter_list pos:line="55" pos:column="42">()</parameter_list>
        <block pos:line="56" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="57" pos:column="13">var</name></type> <name pos:line="57" pos:column="17">dataStore</name> <init pos:line="57" pos:column="27">= <expr><op:operator pos:line="57" pos:column="29">new</op:operator> <call><name pos:line="57" pos:column="33">HttpApplicationStateBaseDataStoreAdapter</name><argument_list pos:line="57" pos:column="73">(<argument><expr><name><name pos:line="57" pos:column="74">ApplicationStateMock</name><op:operator pos:line="57" pos:column="94">.</op:operator><name pos:line="57" pos:column="95">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="59" pos:column="13">var</name></type> <name pos:line="59" pos:column="17">result</name> <init pos:line="59" pos:column="24">= <expr><call><name><name pos:line="59" pos:column="26">dataStore</name><op:operator pos:line="59" pos:column="35">.</op:operator><name><name pos:line="59" pos:column="36">Get</name><argument_list pos:line="59" pos:column="39">&lt;<argument><name pos:line="59" pos:column="40">int</name></argument>&gt;</argument_list></name></name><argument_list pos:line="59" pos:column="44">(<argument><expr><call><name pos:line="59" pos:column="45">typeof</name><argument_list pos:line="59" pos:column="51">(<argument><expr><name pos:line="59" pos:column="52">int</name></expr></argument>)</argument_list></call><op:operator pos:line="59" pos:column="56">.</op:operator><name pos:line="59" pos:column="57">AssemblyQualifiedName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="60" pos:column="13">Assert</name><op:operator pos:line="60" pos:column="19">.</op:operator><name pos:line="60" pos:column="20">Equal</name></name><argument_list pos:line="60" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="60" pos:column="26">5</lit:literal></expr></argument>, <argument><expr><name pos:line="60" pos:column="29">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="61" pos:column="13">Assert</name><op:operator pos:line="61" pos:column="19">.</op:operator><name><name pos:line="61" pos:column="20">IsType</name><argument_list pos:line="61" pos:column="26">&lt;<argument><name pos:line="61" pos:column="27">int</name></argument>&gt;</argument_list></name></name><argument_list pos:line="61" pos:column="31">(<argument><expr><name pos:line="61" pos:column="32">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="62" pos:column="13">ApplicationStateMock</name><op:operator pos:line="62" pos:column="33">.</op:operator><name pos:line="62" pos:column="34">Verify</name></name><argument_list pos:line="62" pos:column="40">(<argument><expr><lambda><name pos:line="62" pos:column="41">st</name> <op:operator pos:line="62" pos:column="44">=&gt;</op:operator> <call><name><name pos:line="62" pos:column="47">st</name><op:operator pos:line="62" pos:column="49">.</op:operator><name pos:line="62" pos:column="50">Get</name></name><argument_list pos:line="62" pos:column="53">(<argument><expr><call><name pos:line="62" pos:column="54">typeof</name><argument_list pos:line="62" pos:column="60">(<argument><expr><name pos:line="62" pos:column="61">int</name></expr></argument>)</argument_list></call><op:operator pos:line="62" pos:column="65">.</op:operator><name pos:line="62" pos:column="66">AssemblyQualifiedName</name></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="62" pos:column="90">Times</name><op:operator pos:line="62" pos:column="95">.</op:operator><name pos:line="62" pos:column="96">Once</name></name><argument_list pos:line="62" pos:column="100">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="65" pos:column="9">[<expr><name pos:line="65" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="66" pos:column="9">public</specifier> <name pos:line="66" pos:column="16">void</name></type> <name pos:line="66" pos:column="21">GetViaKey</name><parameter_list pos:line="66" pos:column="30">()</parameter_list>
        <block pos:line="67" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="68" pos:column="13">var</name></type> <name pos:line="68" pos:column="17">dataStore</name> <init pos:line="68" pos:column="27">= <expr><op:operator pos:line="68" pos:column="29">new</op:operator> <call><name pos:line="68" pos:column="33">HttpApplicationStateBaseDataStoreAdapter</name><argument_list pos:line="68" pos:column="73">(<argument><expr><name><name pos:line="68" pos:column="74">ApplicationStateMock</name><op:operator pos:line="68" pos:column="94">.</op:operator><name pos:line="68" pos:column="95">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="70" pos:column="13">Assert</name><op:operator pos:line="70" pos:column="19">.</op:operator><name pos:line="70" pos:column="20">Equal</name></name><argument_list pos:line="70" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="70" pos:column="26">5</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="70" pos:column="29">dataStore</name><op:operator pos:line="70" pos:column="38">.</op:operator><name pos:line="70" pos:column="39">Get</name></name><argument_list pos:line="70" pos:column="42">(<argument><expr><call><name pos:line="70" pos:column="43">typeof</name><argument_list pos:line="70" pos:column="49">(<argument><expr><name pos:line="70" pos:column="50">int</name></expr></argument>)</argument_list></call><op:operator pos:line="70" pos:column="54">.</op:operator><name pos:line="70" pos:column="55">AssemblyQualifiedName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="71" pos:column="13">ApplicationStateMock</name><op:operator pos:line="71" pos:column="33">.</op:operator><name pos:line="71" pos:column="34">Verify</name></name><argument_list pos:line="71" pos:column="40">(<argument><expr><lambda><name pos:line="71" pos:column="41">st</name> <op:operator pos:line="71" pos:column="44">=&gt;</op:operator> <call><name><name pos:line="71" pos:column="47">st</name><op:operator pos:line="71" pos:column="49">.</op:operator><name pos:line="71" pos:column="50">Get</name></name><argument_list pos:line="71" pos:column="53">(<argument><expr><call><name pos:line="71" pos:column="54">typeof</name><argument_list pos:line="71" pos:column="60">(<argument><expr><name pos:line="71" pos:column="61">int</name></expr></argument>)</argument_list></call><op:operator pos:line="71" pos:column="65">.</op:operator><name pos:line="71" pos:column="66">AssemblyQualifiedName</name></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="71" pos:column="90">Times</name><op:operator pos:line="71" pos:column="95">.</op:operator><name pos:line="71" pos:column="96">Once</name></name><argument_list pos:line="71" pos:column="100">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="74" pos:column="9">[<expr><name pos:line="74" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="75" pos:column="9">public</specifier> <name pos:line="75" pos:column="16">void</name></type> <name pos:line="75" pos:column="21">SetViaGenerics</name><parameter_list pos:line="75" pos:column="35">()</parameter_list>
        <block pos:line="76" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="77" pos:column="13">var</name></type> <name pos:line="77" pos:column="17">dataStore</name> <init pos:line="77" pos:column="27">= <expr><op:operator pos:line="77" pos:column="29">new</op:operator> <call><name pos:line="77" pos:column="33">HttpApplicationStateBaseDataStoreAdapter</name><argument_list pos:line="77" pos:column="73">(<argument><expr><name><name pos:line="77" pos:column="74">ApplicationStateMock</name><op:operator pos:line="77" pos:column="94">.</op:operator><name pos:line="77" pos:column="95">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <expr_stmt><expr><call><name><name pos:line="79" pos:column="13">dataStore</name><op:operator pos:line="79" pos:column="22">.</op:operator><name><name pos:line="79" pos:column="23">Set</name><argument_list pos:line="79" pos:column="26">&lt;<argument><name pos:line="79" pos:column="27">int</name></argument>&gt;</argument_list></name></name><argument_list pos:line="79" pos:column="31">(<argument><expr><lit:literal type="number" pos:line="79" pos:column="32">5</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="81" pos:column="13">Assert</name><op:operator pos:line="81" pos:column="19">.</op:operator><name pos:line="81" pos:column="20">Equal</name></name><argument_list pos:line="81" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="81" pos:column="26">5</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="81" pos:column="29">dataStore</name><op:operator pos:line="81" pos:column="38">.</op:operator><name><name pos:line="81" pos:column="39">Get</name><argument_list pos:line="81" pos:column="42">&lt;<argument><name pos:line="81" pos:column="43">int</name></argument>&gt;</argument_list></name></name><argument_list pos:line="81" pos:column="47">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="82" pos:column="13">ApplicationStateMock</name><op:operator pos:line="82" pos:column="33">.</op:operator><name pos:line="82" pos:column="34">Verify</name></name><argument_list pos:line="82" pos:column="40">(<argument><expr><lambda><name pos:line="82" pos:column="41">st</name> <op:operator pos:line="82" pos:column="44">=&gt;</op:operator> <call><name><name pos:line="82" pos:column="47">st</name><op:operator pos:line="82" pos:column="49">.</op:operator><name pos:line="82" pos:column="50">Set</name></name><argument_list pos:line="82" pos:column="53">(<argument><expr><call><name pos:line="82" pos:column="54">typeof</name><argument_list pos:line="82" pos:column="60">(<argument><expr><name pos:line="82" pos:column="61">int</name></expr></argument>)</argument_list></call><op:operator pos:line="82" pos:column="65">.</op:operator><name pos:line="82" pos:column="66">AssemblyQualifiedName</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="82" pos:column="89">5</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="82" pos:column="93">Times</name><op:operator pos:line="82" pos:column="98">.</op:operator><name pos:line="82" pos:column="99">Once</name></name><argument_list pos:line="82" pos:column="103">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block></function>

        <function><type><attribute pos:line="86" pos:column="9">[<expr><name pos:line="86" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="87" pos:column="9">public</specifier> <name pos:line="87" pos:column="16">void</name></type> <name pos:line="87" pos:column="21">SetViaKey</name><parameter_list pos:line="87" pos:column="30">()</parameter_list>
        <block pos:line="88" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="89" pos:column="13">var</name></type> <name pos:line="89" pos:column="17">dataStore</name> <init pos:line="89" pos:column="27">= <expr><op:operator pos:line="89" pos:column="29">new</op:operator> <call><name pos:line="89" pos:column="33">HttpApplicationStateBaseDataStoreAdapter</name><argument_list pos:line="89" pos:column="73">(<argument><expr><name><name pos:line="89" pos:column="74">ApplicationStateMock</name><op:operator pos:line="89" pos:column="94">.</op:operator><name pos:line="89" pos:column="95">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <expr_stmt><expr><call><name><name pos:line="91" pos:column="13">dataStore</name><op:operator pos:line="91" pos:column="22">.</op:operator><name pos:line="91" pos:column="23">Set</name></name><argument_list pos:line="91" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="91" pos:column="27">"aKey"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="91" pos:column="35">"thing"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="92" pos:column="13">ApplicationStateMock</name><op:operator pos:line="92" pos:column="33">.</op:operator><name pos:line="92" pos:column="34">Verify</name></name><argument_list pos:line="92" pos:column="40">(<argument><expr><lambda><name pos:line="92" pos:column="41">st</name> <op:operator pos:line="92" pos:column="44">=&gt;</op:operator> <call><name><name pos:line="92" pos:column="47">st</name><op:operator pos:line="92" pos:column="49">.</op:operator><name pos:line="92" pos:column="50">Set</name></name><argument_list pos:line="92" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="92" pos:column="54">"aKey"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="92" pos:column="62">"thing"</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="92" pos:column="72">Times</name><op:operator pos:line="92" pos:column="77">.</op:operator><name pos:line="92" pos:column="78">Once</name></name><argument_list pos:line="92" pos:column="82">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
