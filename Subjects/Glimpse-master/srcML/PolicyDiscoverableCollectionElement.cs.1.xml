<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Core\Configuration\PolicyDiscoverableCollectionElement.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">System</name><op:operator pos:line="1" pos:column="13">.</op:operator><name pos:line="1" pos:column="14">Configuration</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">Glimpse</name><op:operator pos:line="2" pos:column="14">.</op:operator><name pos:line="2" pos:column="15">Core</name><op:operator pos:line="2" pos:column="19">.</op:operator><name pos:line="2" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Glimpse</name><op:operator pos:line="3" pos:column="14">.</op:operator><name pos:line="3" pos:column="15">Core</name><op:operator pos:line="3" pos:column="19">.</op:operator><name pos:line="3" pos:column="20">Policy</name></name>;</using>

<namespace pos:line="5" pos:column="1">namespace <name><name pos:line="5" pos:column="11">Glimpse</name><op:operator pos:line="5" pos:column="18">.</op:operator><name pos:line="5" pos:column="19">Core</name><op:operator pos:line="5" pos:column="23">.</op:operator><name pos:line="5" pos:column="24">Configuration</name></name>
<block pos:line="6" pos:column="1">{
    <comment type="line" pos:line="7" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="8" pos:column="5">/// The Glimpse configuration node is a specialized &lt;see cref="DiscoverableCollectionElement"/&gt; used by &lt;see cref="IRuntimePolicy"/&gt;s and &lt;see cref="IConfigurable"/&gt;s to allow for end user configuration of runtime policies.</comment>
    <comment type="line" pos:line="9" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="10" pos:column="5">public</specifier> class <name pos:line="10" pos:column="18">PolicyDiscoverableCollectionElement</name> <super pos:line="10" pos:column="54">: <name pos:line="10" pos:column="56">DiscoverableCollectionElement</name></super>
    <block pos:line="11" pos:column="5">{
        <comment type="line" pos:line="12" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="13" pos:column="9">/// Gets or sets a list of content types (aka media types or mime types).</comment>
        <comment type="line" pos:line="14" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="15" pos:column="9">/// &lt;remarks&gt;</comment>
        <comment type="line" pos:line="16" pos:column="9">/// Valid content type syntax is defined in &lt;see href="http://www.ietf.org/rfc/rfc2046.txt"&gt;RFC 2046&lt;/see&gt;. A &lt;see href="http://www.iana.org/assignments/media-types"&gt;list of commonly used content types is available from IANA&lt;/see&gt;.</comment>
        <comment type="line" pos:line="17" pos:column="9">/// &lt;/remarks&gt;</comment>
        <comment type="line" pos:line="18" pos:column="9">/// &lt;value&gt;</comment>
        <comment type="line" pos:line="19" pos:column="9">/// The &lt;c&gt;ContentTypes&lt;/c&gt; list is used by &lt;see cref="ContentTypePolicy"/&gt; to filter invalid Glimpse responses.</comment>
        <comment type="line" pos:line="20" pos:column="9">/// &lt;/value&gt;</comment>
        <decl_stmt><decl><type><attribute pos:line="21" pos:column="9">[<expr><call><name pos:line="21" pos:column="10">ConfigurationProperty</name><argument_list pos:line="21" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="21" pos:column="32">"contentTypes"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="22" pos:column="9">public</specifier> <name pos:line="22" pos:column="16">ContentTypeElementCollection</name></type> <name pos:line="22" pos:column="45">ContentTypes</name>
        <block pos:line="23" pos:column="9">{
            <function><name pos:line="24" pos:column="13">get</name> <block pos:line="24" pos:column="17">{ <return pos:line="24" pos:column="19">return <expr><op:operator pos:line="24" pos:column="26">(</op:operator><name pos:line="24" pos:column="27">ContentTypeElementCollection</name><op:operator pos:line="24" pos:column="55">)</op:operator><name><name pos:line="24" pos:column="56">base</name><index pos:line="24" pos:column="60">[<expr><lit:literal type="string" pos:line="24" pos:column="61">"contentTypes"</lit:literal></expr>]</index></name></expr>;</return> }</block></function>
            <function><name pos:line="25" pos:column="13">set</name> <block pos:line="25" pos:column="17">{ <expr_stmt><expr><name><name pos:line="25" pos:column="19">base</name><index pos:line="25" pos:column="23">[<expr><lit:literal type="string" pos:line="25" pos:column="24">"contentTypes"</lit:literal></expr>]</index></name> <op:operator pos:line="25" pos:column="40">=</op:operator> <name pos:line="25" pos:column="42">value</name></expr>;</expr_stmt> }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="28" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="29" pos:column="9">/// Gets or sets a list of Http status codes.</comment>
        <comment type="line" pos:line="30" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="31" pos:column="9">/// &lt;remarks&gt;</comment>
        <comment type="line" pos:line="32" pos:column="9">/// A list of ratified Http status codes is available in &lt;see href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html"&gt;Section 10 of RFC 2616&lt;/see&gt;, the Http version 1.1 specification.</comment>
        <comment type="line" pos:line="33" pos:column="9">/// &lt;/remarks&gt;</comment>
        <comment type="line" pos:line="34" pos:column="9">/// &lt;value&gt;</comment>
        <comment type="line" pos:line="35" pos:column="9">/// The &lt;c&gt;StatusCodes&lt;/c&gt; list is used by &lt;see cref="StatusCodePolicy"/&gt; to filter invalid Glimpse responses.</comment>
        <comment type="line" pos:line="36" pos:column="9">/// &lt;/value&gt;</comment>
        <decl_stmt><decl><type><attribute pos:line="37" pos:column="9">[<expr><call><name pos:line="37" pos:column="10">ConfigurationProperty</name><argument_list pos:line="37" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="37" pos:column="32">"statusCodes"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="38" pos:column="9">public</specifier> <name pos:line="38" pos:column="16">StatusCodeElementCollection</name></type> <name pos:line="38" pos:column="44">StatusCodes</name>
        <block pos:line="39" pos:column="9">{
            <function><name pos:line="40" pos:column="13">get</name> <block pos:line="40" pos:column="17">{ <return pos:line="40" pos:column="19">return <expr><op:operator pos:line="40" pos:column="26">(</op:operator><name pos:line="40" pos:column="27">StatusCodeElementCollection</name><op:operator pos:line="40" pos:column="54">)</op:operator><name><name pos:line="40" pos:column="55">base</name><index pos:line="40" pos:column="59">[<expr><lit:literal type="string" pos:line="40" pos:column="60">"statusCodes"</lit:literal></expr>]</index></name></expr>;</return> }</block></function>
            <function><name pos:line="41" pos:column="13">set</name> <block pos:line="41" pos:column="17">{ <expr_stmt><expr><name><name pos:line="41" pos:column="19">base</name><index pos:line="41" pos:column="23">[<expr><lit:literal type="string" pos:line="41" pos:column="24">"statusCodes"</lit:literal></expr>]</index></name> <op:operator pos:line="41" pos:column="39">=</op:operator> <name pos:line="41" pos:column="41">value</name></expr>;</expr_stmt> }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="44" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="45" pos:column="9">/// Gets or sets a list of Uris.</comment>
        <comment type="line" pos:line="46" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="47" pos:column="9">/// &lt;remarks&gt;</comment>
        <comment type="line" pos:line="48" pos:column="9">/// Each Uri in the &lt;c&gt;Uris&lt;/c&gt; list must be a valid Uniform Resource Identifier, as defined by &lt;see href="http://tools.ietf.org/html/rfc3986"&gt;RFC 3986&lt;/see&gt;.</comment>
        <comment type="line" pos:line="49" pos:column="9">/// In addition, "wildcard" &lt;c&gt;Uris&lt;/c&gt; are supported via .NET regular expression syntax.</comment>
        <comment type="line" pos:line="50" pos:column="9">/// &lt;/remarks&gt;</comment>
        <comment type="line" pos:line="51" pos:column="9">/// &lt;value&gt;</comment>
        <comment type="line" pos:line="52" pos:column="9">/// The &lt;c&gt;Uris&lt;/c&gt; list is used by &lt;see cref="UriPolicy"/&gt; to filter invalid Glimpse responses.</comment>
        <comment type="line" pos:line="53" pos:column="9">/// &lt;/value&gt;</comment>
        <decl_stmt><decl><type><attribute pos:line="54" pos:column="9">[<expr><call><name pos:line="54" pos:column="10">ConfigurationProperty</name><argument_list pos:line="54" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="54" pos:column="32">"uris"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="55" pos:column="9">public</specifier> <name pos:line="55" pos:column="16">RegexElementCollection</name></type> <name pos:line="55" pos:column="39">Uris</name>
        <block pos:line="56" pos:column="9">{
            <function><name pos:line="57" pos:column="13">get</name> <block pos:line="57" pos:column="17">{ <return pos:line="57" pos:column="19">return <expr><op:operator pos:line="57" pos:column="26">(</op:operator><name pos:line="57" pos:column="27">RegexElementCollection</name><op:operator pos:line="57" pos:column="49">)</op:operator><name><name pos:line="57" pos:column="50">base</name><index pos:line="57" pos:column="54">[<expr><lit:literal type="string" pos:line="57" pos:column="55">"uris"</lit:literal></expr>]</index></name></expr>;</return> }</block></function>
            <function><name pos:line="58" pos:column="13">set</name> <block pos:line="58" pos:column="17">{ <expr_stmt><expr><name><name pos:line="58" pos:column="19">base</name><index pos:line="58" pos:column="23">[<expr><lit:literal type="string" pos:line="58" pos:column="24">"uris"</lit:literal></expr>]</index></name> <op:operator pos:line="58" pos:column="32">=</op:operator> <name pos:line="58" pos:column="34">value</name></expr>;</expr_stmt> }</block></function>
        }</block></decl></decl_stmt>
    }</block></class>
}</block></namespace></unit>
