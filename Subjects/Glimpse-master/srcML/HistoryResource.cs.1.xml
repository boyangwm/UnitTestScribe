<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Core\Resource\HistoryResource.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Core</name><op:operator pos:line="4" pos:column="19">.</op:operator><name pos:line="4" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Glimpse</name><op:operator pos:line="5" pos:column="14">.</op:operator><name pos:line="5" pos:column="15">Core</name><op:operator pos:line="5" pos:column="19">.</op:operator><name pos:line="5" pos:column="20">Extensions</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Glimpse</name><op:operator pos:line="6" pos:column="14">.</op:operator><name pos:line="6" pos:column="15">Core</name><op:operator pos:line="6" pos:column="19">.</op:operator><name pos:line="6" pos:column="20">Framework</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Glimpse</name><op:operator pos:line="7" pos:column="14">.</op:operator><name pos:line="7" pos:column="15">Core</name><op:operator pos:line="7" pos:column="19">.</op:operator><name pos:line="7" pos:column="20">ResourceResult</name></name>;</using>

<namespace pos:line="9" pos:column="1">namespace <name><name pos:line="9" pos:column="11">Glimpse</name><op:operator pos:line="9" pos:column="18">.</op:operator><name pos:line="9" pos:column="19">Core</name><op:operator pos:line="9" pos:column="23">.</op:operator><name pos:line="9" pos:column="24">Resource</name></name>
<block pos:line="10" pos:column="1">{
    <comment type="line" pos:line="11" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="12" pos:column="5">/// The &lt;see cref="IResource"/&gt; implementation responsible for providing the Glimpse client a listing of historical requests, grouped by client.</comment>
    <comment type="line" pos:line="13" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="14" pos:column="5">public</specifier> class <name pos:line="14" pos:column="18">HistoryResource</name> <super pos:line="14" pos:column="34">: <name pos:line="14" pos:column="36">IResource</name>, <name pos:line="14" pos:column="47">IKey</name></super>
    <block pos:line="15" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="16" pos:column="9">internal</specifier> <specifier pos:line="16" pos:column="18">const</specifier> <name pos:line="16" pos:column="24">string</name></type> <name pos:line="16" pos:column="31">InternalName</name> <init pos:line="16" pos:column="44">= <expr><lit:literal type="string" pos:line="16" pos:column="46">"glimpse_history"</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="17" pos:column="9">internal</specifier> <specifier pos:line="17" pos:column="18">const</specifier> <name pos:line="17" pos:column="24">string</name></type> <name pos:line="17" pos:column="31">TopKey</name> <init pos:line="17" pos:column="38">= <expr><lit:literal type="string" pos:line="17" pos:column="40">"top"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="19" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="20" pos:column="9">/// Gets the name of the resource.</comment>
        <comment type="line" pos:line="21" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="22" pos:column="9">/// &lt;value&gt;</comment>
        <comment type="line" pos:line="23" pos:column="9">/// The name.</comment>
        <comment type="line" pos:line="24" pos:column="9">/// &lt;/value&gt;</comment>
        <comment type="line" pos:line="25" pos:column="9">/// &lt;remarks&gt;</comment>
        <comment type="line" pos:line="26" pos:column="9">/// Resource name's should be unique across a given web application. If multiple &lt;see cref="IResource" /&gt; implementations contain the same name, Glimpse may throw an exception resulting in an Http 500 Server Error.</comment>
        <comment type="line" pos:line="27" pos:column="9">/// &lt;/remarks&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="28" pos:column="9">public</specifier> <name pos:line="28" pos:column="16">string</name></type> <name pos:line="28" pos:column="23">Name</name> 
        <block pos:line="29" pos:column="9">{
            <function><name pos:line="30" pos:column="13">get</name> <block pos:line="30" pos:column="17">{ <return pos:line="30" pos:column="19">return <expr><name pos:line="30" pos:column="26">InternalName</name></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="33" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="34" pos:column="9">/// Gets the key.</comment>
        <comment type="line" pos:line="35" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="36" pos:column="9">/// &lt;value&gt;</comment>
        <comment type="line" pos:line="37" pos:column="9">/// The key. Only valid JavaScript identifiers should be used for future compatibility.</comment>
        <comment type="line" pos:line="38" pos:column="9">/// &lt;/value&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="39" pos:column="9">public</specifier> <name pos:line="39" pos:column="16">string</name></type> <name pos:line="39" pos:column="23">Key</name>
        <block pos:line="40" pos:column="9">{
            <function><name pos:line="41" pos:column="13">get</name> <block pos:line="41" pos:column="17">{ <return pos:line="41" pos:column="19">return <expr><name pos:line="41" pos:column="26">Name</name></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="44" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="45" pos:column="9">/// Gets the required or optional parameters that a resource needs as processing input.</comment>
        <comment type="line" pos:line="46" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="47" pos:column="9">/// &lt;value&gt;</comment>
        <comment type="line" pos:line="48" pos:column="9">/// The parameters.</comment>
        <comment type="line" pos:line="49" pos:column="9">/// &lt;/value&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="50" pos:column="9">public</specifier> <name><name pos:line="50" pos:column="16">IEnumerable</name><argument_list pos:line="50" pos:column="27">&lt;<argument><name pos:line="50" pos:column="28">ResourceParameterMetadata</name></argument>&gt;</argument_list></name></type> <name pos:line="50" pos:column="55">Parameters</name> 
        <block pos:line="51" pos:column="9">{
            <function><name pos:line="52" pos:column="13">get</name> <block pos:line="52" pos:column="17">{ <return pos:line="52" pos:column="19">return <expr><op:operator pos:line="52" pos:column="26">new</op:operator><index pos:line="52" pos:column="29">[]</index> <block pos:line="52" pos:column="32">{ <expr><op:operator pos:line="52" pos:column="34">new</op:operator> <call><name pos:line="52" pos:column="38">ResourceParameterMetadata</name><argument_list pos:line="52" pos:column="63">(<argument><expr><name pos:line="52" pos:column="64">TopKey</name></expr></argument>, <argument><expr><name pos:line="52" pos:column="72">isRequired</name><op:operator pos:line="52" pos:column="82">:</op:operator> <lit:literal type="boolean" pos:line="52" pos:column="84">false</lit:literal></expr></argument>)</argument_list></call></expr><op:operator pos:line="52" pos:column="90">,</op:operator> <expr><name><name pos:line="52" pos:column="92">ResourceParameter</name><op:operator pos:line="52" pos:column="109">.</op:operator><name pos:line="52" pos:column="110">Hash</name></name></expr> }</block></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="55" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="56" pos:column="9">/// Executes the specified resource with the specific context.</comment>
        <comment type="line" pos:line="57" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="58" pos:column="9">/// &lt;param name="context"&gt;The context.&lt;/param&gt;</comment>
        <comment type="line" pos:line="59" pos:column="9">/// &lt;returns&gt;</comment>
        <comment type="line" pos:line="60" pos:column="9">///   &lt;see cref="IResourceResult" /&gt; that can be executed when the Http response is ready to be returned.</comment>
        <comment type="line" pos:line="61" pos:column="9">/// &lt;/returns&gt;</comment>
        <comment type="line" pos:line="62" pos:column="9">/// &lt;exception cref="System.ArgumentNullException"&gt;Exception thrown if &lt;paramref name="context"/&gt; is &lt;c&gt;null&lt;/c&gt;.&lt;/exception&gt;</comment>
        <function><type><specifier pos:line="63" pos:column="9">public</specifier> <name pos:line="63" pos:column="16">IResourceResult</name></type> <name pos:line="63" pos:column="32">Execute</name><parameter_list pos:line="63" pos:column="39">(<param><decl><type><name pos:line="63" pos:column="40">IResourceContext</name></type> <name pos:line="63" pos:column="57">context</name></decl></param>)</parameter_list>
        <block pos:line="64" pos:column="9">{
            <if pos:line="65" pos:column="13">if <condition pos:line="65" pos:column="16">(<expr><name pos:line="65" pos:column="17">context</name> <op:operator pos:line="65" pos:column="25">==</op:operator> <name pos:line="65" pos:column="28">null</name></expr>)</condition><then pos:line="65" pos:column="33">
            <block pos:line="66" pos:column="13">{
                <throw pos:line="67" pos:column="17">throw <expr><op:operator pos:line="67" pos:column="23">new</op:operator> <call><name pos:line="67" pos:column="27">ArgumentNullException</name><argument_list pos:line="67" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="67" pos:column="49">"context"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="70" pos:column="13">int</name></type> <name pos:line="70" pos:column="17">top</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="71" pos:column="13">int</name><op:operator pos:line="71" pos:column="16">.</op:operator><name pos:line="71" pos:column="17">TryParse</name></name><argument_list pos:line="71" pos:column="25">(<argument><expr><call><name><name pos:line="71" pos:column="26">context</name><op:operator pos:line="71" pos:column="33">.</op:operator><name pos:line="71" pos:column="34">Parameters</name><op:operator pos:line="71" pos:column="44">.</op:operator><name pos:line="71" pos:column="45">GetValueOrDefault</name></name><argument_list pos:line="71" pos:column="62">(<argument><expr><name pos:line="71" pos:column="63">TopKey</name></expr></argument>, <argument><expr><name pos:line="71" pos:column="71">ifNotFound</name><op:operator pos:line="71" pos:column="81">:</op:operator> <lit:literal type="string" pos:line="71" pos:column="83">"50"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr pos:line="71" pos:column="90">out <name pos:line="71" pos:column="94">top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="73" pos:column="13">var</name></type> <name pos:line="73" pos:column="17">data</name> <init pos:line="73" pos:column="22">= <expr><call><name><name pos:line="73" pos:column="24">context</name><op:operator pos:line="73" pos:column="31">.</op:operator><name pos:line="73" pos:column="32">PersistenceStore</name><op:operator pos:line="73" pos:column="48">.</op:operator><name pos:line="73" pos:column="49">GetTop</name></name><argument_list pos:line="73" pos:column="55">(<argument><expr><name pos:line="73" pos:column="56">top</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if pos:line="75" pos:column="13">if <condition pos:line="75" pos:column="16">(<expr><name pos:line="75" pos:column="17">data</name> <op:operator pos:line="75" pos:column="22">==</op:operator> <name pos:line="75" pos:column="25">null</name></expr>)</condition><then pos:line="75" pos:column="30">
            <block pos:line="76" pos:column="13">{
                <return pos:line="77" pos:column="17">return <expr><op:operator pos:line="77" pos:column="24">new</op:operator> <call><name pos:line="77" pos:column="28">StatusCodeResourceResult</name><argument_list pos:line="77" pos:column="52">(<argument><expr><lit:literal type="number" pos:line="77" pos:column="53">404</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="77" pos:column="58">string</name><op:operator pos:line="77" pos:column="64">.</op:operator><name pos:line="77" pos:column="65">Format</name></name><argument_list pos:line="77" pos:column="71">(<argument><expr><lit:literal type="string" pos:line="77" pos:column="72">"No data found in top {0}."</lit:literal></expr></argument>, <argument><expr><name pos:line="77" pos:column="101">top</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="80" pos:column="13">var</name></type> <name pos:line="80" pos:column="17">requests</name> <init pos:line="80" pos:column="26">= <expr><call><name><name pos:line="80" pos:column="28">data</name><op:operator pos:line="80" pos:column="32">.</op:operator><name pos:line="80" pos:column="33">GroupBy</name></name><argument_list pos:line="80" pos:column="40">(<argument><expr><lambda><name pos:line="80" pos:column="41">d</name> <op:operator pos:line="80" pos:column="43">=&gt;</op:operator> <name><name pos:line="80" pos:column="46">d</name><op:operator pos:line="80" pos:column="47">.</op:operator><name pos:line="80" pos:column="48">ClientId</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="80" pos:column="57">.</op:operator><call><name pos:line="80" pos:column="58">ToDictionary</name><argument_list pos:line="80" pos:column="70">(<argument><expr><lambda><name pos:line="80" pos:column="71">group</name> <op:operator pos:line="80" pos:column="77">=&gt;</op:operator> <linq><group pos:line="80" pos:column="80">group<expr><op:operator pos:line="80" pos:column="85">.</op:operator><name pos:line="80" pos:column="86">Key</name></expr></group></linq></lambda></expr></argument>, <argument><expr><lambda><name pos:line="80" pos:column="91">group</name> <op:operator pos:line="80" pos:column="97">=&gt;</op:operator> <group pos:line="80" pos:column="100">group<expr><op:operator pos:line="80" pos:column="105">.</op:operator><call><name pos:line="80" pos:column="106">Select</name><argument_list pos:line="80" pos:column="112">(<argument><expr><lambda><name pos:line="80" pos:column="113">g</name> <op:operator pos:line="80" pos:column="115">=&gt;</op:operator> <op:operator pos:line="80" pos:column="118">new</op:operator> <call><name pos:line="80" pos:column="122">GlimpseRequestHeaders</name><argument_list pos:line="80" pos:column="143">(<argument><expr><name pos:line="80" pos:column="144">g</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></group></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="81" pos:column="13">return <expr><op:operator pos:line="81" pos:column="20">new</op:operator> <call><name pos:line="81" pos:column="24">CacheControlDecorator</name><argument_list pos:line="81" pos:column="45">(<argument><expr><lit:literal type="number" pos:line="81" pos:column="46">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="81" pos:column="49">CacheSetting</name><op:operator pos:line="81" pos:column="61">.</op:operator><name pos:line="81" pos:column="62">NoCache</name></name></expr></argument>, <argument><expr><op:operator pos:line="81" pos:column="71">new</op:operator> <call><name pos:line="81" pos:column="75">JsonResourceResult</name><argument_list pos:line="81" pos:column="93">(<argument><expr><name pos:line="81" pos:column="94">requests</name></expr></argument>, <argument><expr><call><name><name pos:line="81" pos:column="104">context</name><op:operator pos:line="81" pos:column="111">.</op:operator><name pos:line="81" pos:column="112">Parameters</name><op:operator pos:line="81" pos:column="122">.</op:operator><name pos:line="81" pos:column="123">GetValueOrDefault</name></name><argument_list pos:line="81" pos:column="140">(<argument><expr><name><name pos:line="81" pos:column="141">ResourceParameter</name><op:operator pos:line="81" pos:column="158">.</op:operator><name pos:line="81" pos:column="159">Callback</name><op:operator pos:line="81" pos:column="167">.</op:operator><name pos:line="81" pos:column="168">Name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
