<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.AspNet\AlternateType\RouteGetRouteDataShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Diagnostics</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">CodeAnalysis</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Glimpse</name><op:operator pos:line="3" pos:column="14">.</op:operator><name pos:line="3" pos:column="15">AspNet</name><op:operator pos:line="3" pos:column="21">.</op:operator><name pos:line="3" pos:column="22">AlternateType</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Core</name><op:operator pos:line="4" pos:column="19">.</op:operator><name pos:line="4" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Glimpse</name><op:operator pos:line="5" pos:column="14">.</op:operator><name pos:line="5" pos:column="15">Test</name><op:operator pos:line="5" pos:column="19">.</op:operator><name pos:line="5" pos:column="20">Common</name></name>;</using>
<using pos:line="6" pos:column="1">using <name pos:line="6" pos:column="7">Moq</name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Ploeh</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">AutoFixture</name><op:operator pos:line="7" pos:column="24">.</op:operator><name pos:line="7" pos:column="25">Xunit</name></name>;</using>
<using pos:line="8" pos:column="1">using <name pos:line="8" pos:column="7">Xunit</name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">Xunit</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">Extensions</name></name>;</using>

<namespace pos:line="11" pos:column="1">namespace <name><name pos:line="11" pos:column="11">Glimpse</name><op:operator pos:line="11" pos:column="18">.</op:operator><name pos:line="11" pos:column="19">Test</name><op:operator pos:line="11" pos:column="23">.</op:operator><name pos:line="11" pos:column="24">AspNet</name><op:operator pos:line="11" pos:column="30">.</op:operator><name pos:line="11" pos:column="31">AlternateType</name></name>
<block pos:line="12" pos:column="1">{
    <class><attribute pos:line="13" pos:column="5">[<expr><call><name pos:line="13" pos:column="6">SuppressMessage</name><argument_list pos:line="13" pos:column="21">(<argument><expr><lit:literal type="string" pos:line="13" pos:column="22">"StyleCop.CSharp.MaintainabilityRules"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="13" pos:column="62">"SA1402:FileMayOnlyContainASingleClass"</lit:literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="103">Justification</name> <op:operator pos:line="13" pos:column="117">=</op:operator> <lit:literal type="string" pos:line="13" pos:column="119">"Reviewed. Class is okay because it only changes the generic T parameter for the abstract class below."</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    <specifier pos:line="14" pos:column="5">public</specifier> class <name pos:line="14" pos:column="18">RouteBaseGetRouteDataRouteBaseShould</name> <super pos:line="14" pos:column="55">: <name><name pos:line="14" pos:column="57">GetRouteDataRouteBaseShould</name><argument_list pos:line="14" pos:column="84">&lt;<argument><name><name pos:line="14" pos:column="85">System</name><op:operator pos:line="14" pos:column="91">.</op:operator><name pos:line="14" pos:column="92">Web</name><op:operator pos:line="14" pos:column="95">.</op:operator><name pos:line="14" pos:column="96">Routing</name><op:operator pos:line="14" pos:column="103">.</op:operator><name pos:line="14" pos:column="104">RouteBase</name></name></argument>&gt;</argument_list></name></super>
    <block pos:line="15" pos:column="5">{
    }</block></class>

    <class><attribute pos:line="18" pos:column="5">[<expr><call><name pos:line="18" pos:column="6">SuppressMessage</name><argument_list pos:line="18" pos:column="21">(<argument><expr><lit:literal type="string" pos:line="18" pos:column="22">"StyleCop.CSharp.MaintainabilityRules"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="18" pos:column="62">"SA1402:FileMayOnlyContainASingleClass"</lit:literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="103">Justification</name> <op:operator pos:line="18" pos:column="117">=</op:operator> <lit:literal type="string" pos:line="18" pos:column="119">"Reviewed. Class is okay because it only changes the generic T parameter for the abstract class below."</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    <specifier pos:line="19" pos:column="5">public</specifier> class <name pos:line="19" pos:column="18">RouteGetRouteDataRouteBaseShould</name> <super pos:line="19" pos:column="51">: <name><name pos:line="19" pos:column="53">GetRouteDataRouteBaseShould</name><argument_list pos:line="19" pos:column="80">&lt;<argument><name><name pos:line="19" pos:column="81">System</name><op:operator pos:line="19" pos:column="87">.</op:operator><name pos:line="19" pos:column="88">Web</name><op:operator pos:line="19" pos:column="91">.</op:operator><name pos:line="19" pos:column="92">Routing</name><op:operator pos:line="19" pos:column="99">.</op:operator><name pos:line="19" pos:column="100">Route</name></name></argument>&gt;</argument_list></name></super>
    <block pos:line="20" pos:column="5">{
    }</block></class>

    <class><attribute pos:line="23" pos:column="5">[<expr><call><name pos:line="23" pos:column="6">SuppressMessage</name><argument_list pos:line="23" pos:column="21">(<argument><expr><lit:literal type="string" pos:line="23" pos:column="22">"StyleCop.CSharp.MaintainabilityRules"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="23" pos:column="62">"SA1402:FileMayOnlyContainASingleClass"</lit:literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="103">Justification</name> <op:operator pos:line="23" pos:column="117">=</op:operator> <lit:literal type="string" pos:line="23" pos:column="119">"Reviewed. Class is okay because it only changes the generic T parameter for the abstract class below."</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    <specifier pos:line="24" pos:column="5">public</specifier> class <name pos:line="24" pos:column="18">RouteGetRouteDataRouteShould</name> <super pos:line="24" pos:column="47">: <name><name pos:line="24" pos:column="49">GetRouteDataRouteShould</name><argument_list pos:line="24" pos:column="72">&lt;<argument><name><name pos:line="24" pos:column="73">System</name><op:operator pos:line="24" pos:column="79">.</op:operator><name pos:line="24" pos:column="80">Web</name><op:operator pos:line="24" pos:column="83">.</op:operator><name pos:line="24" pos:column="84">Routing</name><op:operator pos:line="24" pos:column="91">.</op:operator><name pos:line="24" pos:column="92">Route</name></name></argument>&gt;</argument_list></name></super>
    <block pos:line="25" pos:column="5">{
    }</block></class>

    <class><specifier pos:line="28" pos:column="5">public</specifier> <specifier pos:line="28" pos:column="12">abstract</specifier> class <name><name pos:line="28" pos:column="27">GetRouteDataRouteBaseShould</name><argument_list pos:line="28" pos:column="54">&lt;<argument><name pos:line="28" pos:column="55">T</name></argument>&gt;
        <where pos:line="29" pos:column="9">where <name pos:line="29" pos:column="15">T</name> : <name><name pos:line="29" pos:column="19">System</name><op:operator pos:line="29" pos:column="25">.</op:operator><name pos:line="29" pos:column="26">Web</name><op:operator pos:line="29" pos:column="29">.</op:operator><name pos:line="29" pos:column="30">Routing</name><op:operator pos:line="29" pos:column="37">.</op:operator><name pos:line="29" pos:column="38">RouteBase</name></name></where></argument_list></name>
    <block pos:line="30" pos:column="5">{
        <function><type><attribute pos:line="31" pos:column="9">[<expr><name pos:line="31" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="32" pos:column="9">public</specifier> <name pos:line="32" pos:column="16">void</name></type> <name pos:line="32" pos:column="21">ReturnProperMethodToImplement</name><parameter_list pos:line="32" pos:column="50">()</parameter_list>
        <block pos:line="33" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="34" pos:column="13">var</name></type> <name pos:line="34" pos:column="17">impl</name> <init pos:line="34" pos:column="22">= <expr><op:operator pos:line="34" pos:column="24">new</op:operator> <call><name><name pos:line="34" pos:column="28">RouteBase</name><op:operator pos:line="34" pos:column="37">.</op:operator><name pos:line="34" pos:column="38">GetRouteData</name></name><argument_list pos:line="34" pos:column="50">(<argument><expr><call><name pos:line="34" pos:column="51">typeof</name><argument_list pos:line="34" pos:column="57">(<argument><expr><name pos:line="34" pos:column="58">T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="36" pos:column="13">Assert</name><op:operator pos:line="36" pos:column="19">.</op:operator><name pos:line="36" pos:column="20">Equal</name></name><argument_list pos:line="36" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="36" pos:column="26">"GetRouteData"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="42">impl</name><op:operator pos:line="36" pos:column="46">.</op:operator><name pos:line="36" pos:column="47">MethodToImplement</name><op:operator pos:line="36" pos:column="64">.</op:operator><name pos:line="36" pos:column="65">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="39" pos:column="9">[<expr><name pos:line="39" pos:column="10">Theory</name></expr><op:operator pos:line="39" pos:column="16">,</op:operator> <expr><name pos:line="39" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="40" pos:column="9">public</specifier> <name pos:line="40" pos:column="16">void</name></type> <name pos:line="40" pos:column="21">ReturnWhenRuntimePolicyIsOff</name><parameter_list pos:line="40" pos:column="49">(<param><decl><type><name pos:line="40" pos:column="50">IAlternateMethodContext</name></type> <name pos:line="40" pos:column="74">context</name></decl></param>)</parameter_list>
        <block pos:line="41" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="42" pos:column="13">context</name><op:operator pos:line="42" pos:column="20">.</op:operator><name pos:line="42" pos:column="21">Setup</name></name><argument_list pos:line="42" pos:column="26">(<argument><expr><lambda><name pos:line="42" pos:column="27">c</name> <op:operator pos:line="42" pos:column="29">=&gt;</op:operator> <name><name pos:line="42" pos:column="32">c</name><op:operator pos:line="42" pos:column="33">.</op:operator><name pos:line="42" pos:column="34">RuntimePolicyStrategy</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="42" pos:column="56">.</op:operator><call><name pos:line="42" pos:column="57">Returns</name><argument_list pos:line="42" pos:column="64">(<argument><expr><lambda><parameter_list pos:line="42" pos:column="65">()</parameter_list> <op:operator pos:line="42" pos:column="68">=&gt;</op:operator> <name><name pos:line="42" pos:column="71">RuntimePolicy</name><op:operator pos:line="42" pos:column="84">.</op:operator><name pos:line="42" pos:column="85">Off</name></name></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="44" pos:column="13">var</name></type> <name pos:line="44" pos:column="17">impl</name> <init pos:line="44" pos:column="22">= <expr><op:operator pos:line="44" pos:column="24">new</op:operator> <call><name><name pos:line="44" pos:column="28">RouteBase</name><op:operator pos:line="44" pos:column="37">.</op:operator><name pos:line="44" pos:column="38">GetRouteData</name></name><argument_list pos:line="44" pos:column="50">(<argument><expr><call><name pos:line="44" pos:column="51">typeof</name><argument_list pos:line="44" pos:column="57">(<argument><expr><name pos:line="44" pos:column="58">T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="46" pos:column="13">impl</name><op:operator pos:line="46" pos:column="17">.</op:operator><name pos:line="46" pos:column="18">NewImplementation</name></name><argument_list pos:line="46" pos:column="35">(<argument><expr><name pos:line="46" pos:column="36">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="48" pos:column="13">context</name><op:operator pos:line="48" pos:column="20">.</op:operator><name pos:line="48" pos:column="21">Verify</name></name><argument_list pos:line="48" pos:column="27">(<argument><expr><lambda><name pos:line="48" pos:column="28">c</name> <op:operator pos:line="48" pos:column="30">=&gt;</op:operator> <call><name><name pos:line="48" pos:column="33">c</name><op:operator pos:line="48" pos:column="34">.</op:operator><name pos:line="48" pos:column="35">Proceed</name></name><argument_list pos:line="48" pos:column="42">()</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="51" pos:column="9">[<expr><name pos:line="51" pos:column="10">Theory</name></expr><op:operator pos:line="51" pos:column="16">,</op:operator> <expr><name pos:line="51" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="52" pos:column="9">public</specifier> <name pos:line="52" pos:column="16">void</name></type> <name pos:line="52" pos:column="21">PublishMessageWhenExecuted</name><parameter_list pos:line="52" pos:column="47">(<param><decl><type><attribute pos:line="52" pos:column="48">[<expr><name pos:line="52" pos:column="49">Frozen</name></expr>]</attribute> <name pos:line="52" pos:column="57">IExecutionTimer</name></type> <name pos:line="52" pos:column="73">timer</name></decl></param>, <param><decl><type><name pos:line="52" pos:column="80">IAlternateMethodContext</name></type> <name pos:line="52" pos:column="104">context</name></decl></param>, <param><decl><type><name pos:line="52" pos:column="113">IRouteNameMixin</name></type> <name pos:line="52" pos:column="129">mixin</name></decl></param>)</parameter_list>
        <block pos:line="53" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="54" pos:column="13">context</name><op:operator pos:line="54" pos:column="20">.</op:operator><name pos:line="54" pos:column="21">Setup</name></name><argument_list pos:line="54" pos:column="26">(<argument><expr><lambda><name pos:line="54" pos:column="27">c</name> <op:operator pos:line="54" pos:column="29">=&gt;</op:operator> <name><name pos:line="54" pos:column="32">c</name><op:operator pos:line="54" pos:column="33">.</op:operator><name pos:line="54" pos:column="34">Arguments</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="54" pos:column="44">.</op:operator><call><name pos:line="54" pos:column="45">Returns</name><argument_list pos:line="54" pos:column="52">(<argument><expr><op:operator pos:line="54" pos:column="53">new</op:operator> <name><name pos:line="54" pos:column="57">object</name><index pos:line="54" pos:column="63">[<expr><lit:literal type="number" pos:line="54" pos:column="64">5</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="55" pos:column="13">context</name><op:operator pos:line="55" pos:column="20">.</op:operator><name pos:line="55" pos:column="21">Setup</name></name><argument_list pos:line="55" pos:column="26">(<argument><expr><lambda><name pos:line="55" pos:column="27">c</name> <op:operator pos:line="55" pos:column="29">=&gt;</op:operator> <name><name pos:line="55" pos:column="32">c</name><op:operator pos:line="55" pos:column="33">.</op:operator><name pos:line="55" pos:column="34">ReturnValue</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="55" pos:column="46">.</op:operator><call><name pos:line="55" pos:column="47">Returns</name><argument_list pos:line="55" pos:column="54">(<argument><expr><op:operator pos:line="55" pos:column="55">new</op:operator> <call><name><name pos:line="55" pos:column="59">System</name><op:operator pos:line="55" pos:column="65">.</op:operator><name pos:line="55" pos:column="66">Web</name><op:operator pos:line="55" pos:column="69">.</op:operator><name pos:line="55" pos:column="70">Routing</name><op:operator pos:line="55" pos:column="77">.</op:operator><name pos:line="55" pos:column="78">RouteData</name></name><argument_list pos:line="55" pos:column="87">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="56" pos:column="13">context</name><op:operator pos:line="56" pos:column="20">.</op:operator><name pos:line="56" pos:column="21">Setup</name></name><argument_list pos:line="56" pos:column="26">(<argument><expr><lambda><name pos:line="56" pos:column="27">c</name> <op:operator pos:line="56" pos:column="29">=&gt;</op:operator> <name><name pos:line="56" pos:column="32">c</name><op:operator pos:line="56" pos:column="33">.</op:operator><name pos:line="56" pos:column="34">InvocationTarget</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="56" pos:column="51">.</op:operator><call><name pos:line="56" pos:column="52">Returns</name><argument_list pos:line="56" pos:column="59">(<argument><expr><op:operator pos:line="56" pos:column="60">new</op:operator> <call><name><name pos:line="56" pos:column="64">System</name><op:operator pos:line="56" pos:column="70">.</op:operator><name pos:line="56" pos:column="71">Web</name><op:operator pos:line="56" pos:column="74">.</op:operator><name pos:line="56" pos:column="75">Routing</name><op:operator pos:line="56" pos:column="82">.</op:operator><name pos:line="56" pos:column="83">Route</name></name><argument_list pos:line="56" pos:column="88">(<argument><expr><lit:literal type="string" pos:line="56" pos:column="89">"Test"</lit:literal></expr></argument>, <argument><expr><name pos:line="56" pos:column="97">null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="57" pos:column="13">context</name><op:operator pos:line="57" pos:column="20">.</op:operator><name pos:line="57" pos:column="21">Setup</name></name><argument_list pos:line="57" pos:column="26">(<argument><expr><lambda><name pos:line="57" pos:column="27">c</name> <op:operator pos:line="57" pos:column="29">=&gt;</op:operator> <name><name pos:line="57" pos:column="32">c</name><op:operator pos:line="57" pos:column="33">.</op:operator><name pos:line="57" pos:column="34">Proxy</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="57" pos:column="40">.</op:operator><call><name pos:line="57" pos:column="41">Returns</name><argument_list pos:line="57" pos:column="48">(<argument><expr><name pos:line="57" pos:column="49">mixin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="59" pos:column="13">var</name></type> <name pos:line="59" pos:column="17">impl</name> <init pos:line="59" pos:column="22">= <expr><op:operator pos:line="59" pos:column="24">new</op:operator> <call><name><name pos:line="59" pos:column="28">RouteBase</name><op:operator pos:line="59" pos:column="37">.</op:operator><name pos:line="59" pos:column="38">GetRouteData</name></name><argument_list pos:line="59" pos:column="50">(<argument><expr><call><name pos:line="59" pos:column="51">typeof</name><argument_list pos:line="59" pos:column="57">(<argument><expr><name pos:line="59" pos:column="58">T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="61" pos:column="13">impl</name><op:operator pos:line="61" pos:column="17">.</op:operator><name pos:line="61" pos:column="18">NewImplementation</name></name><argument_list pos:line="61" pos:column="35">(<argument><expr><name pos:line="61" pos:column="36">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="63" pos:column="13">timer</name><op:operator pos:line="63" pos:column="18">.</op:operator><name pos:line="63" pos:column="19">Verify</name></name><argument_list pos:line="63" pos:column="25">(<argument><expr><lambda><name pos:line="63" pos:column="26">t</name> <op:operator pos:line="63" pos:column="28">=&gt;</op:operator> <call><name><name pos:line="63" pos:column="31">t</name><op:operator pos:line="63" pos:column="32">.</op:operator><name pos:line="63" pos:column="33">Time</name></name><argument_list pos:line="63" pos:column="37">(<argument><expr><call><name><name pos:line="63" pos:column="38">It</name><op:operator pos:line="63" pos:column="40">.</op:operator><name><name pos:line="63" pos:column="41">IsAny</name><argument_list pos:line="63" pos:column="46">&lt;<argument><name pos:line="63" pos:column="47">Action</name></argument>&gt;</argument_list></name></name><argument_list pos:line="63" pos:column="54">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="64" pos:column="13">context</name><op:operator pos:line="64" pos:column="20">.</op:operator><name pos:line="64" pos:column="21">MessageBroker</name><op:operator pos:line="64" pos:column="34">.</op:operator><name pos:line="64" pos:column="35">Verify</name></name><argument_list pos:line="64" pos:column="41">(<argument><expr><lambda><name pos:line="64" pos:column="42">mb</name> <op:operator pos:line="64" pos:column="45">=&gt;</op:operator> <call><name><name pos:line="64" pos:column="48">mb</name><op:operator pos:line="64" pos:column="50">.</op:operator><name pos:line="64" pos:column="51">Publish</name></name><argument_list pos:line="64" pos:column="58">(<argument><expr><call><name><name pos:line="64" pos:column="59">It</name><op:operator pos:line="64" pos:column="61">.</op:operator><name><name pos:line="64" pos:column="62">IsAny</name><argument_list pos:line="64" pos:column="67">&lt;<argument><name><name pos:line="64" pos:column="68">RouteBase</name><op:operator pos:line="64" pos:column="77">.</op:operator><name pos:line="64" pos:column="78">GetRouteData</name><op:operator pos:line="64" pos:column="90">.</op:operator><name pos:line="64" pos:column="91">Message</name></name></argument>&gt;</argument_list></name></name><argument_list pos:line="64" pos:column="99">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

    <class><specifier pos:line="68" pos:column="5">public</specifier> <specifier pos:line="68" pos:column="12">abstract</specifier> class <name><name pos:line="68" pos:column="27">GetRouteDataRouteShould</name><argument_list pos:line="68" pos:column="50">&lt;<argument><name pos:line="68" pos:column="51">T</name></argument>&gt;
    <where pos:line="69" pos:column="5">where <name pos:line="69" pos:column="11">T</name> : <name><name pos:line="69" pos:column="15">System</name><op:operator pos:line="69" pos:column="21">.</op:operator><name pos:line="69" pos:column="22">Web</name><op:operator pos:line="69" pos:column="25">.</op:operator><name pos:line="69" pos:column="26">Routing</name><op:operator pos:line="69" pos:column="33">.</op:operator><name pos:line="69" pos:column="34">Route</name></name></where></argument_list></name>
    <block pos:line="70" pos:column="5">{
        <function><type><attribute pos:line="71" pos:column="9">[<expr><name pos:line="71" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="72" pos:column="9">public</specifier> <name pos:line="72" pos:column="16">void</name></type> <name pos:line="72" pos:column="21">ReturnProperMethodToImplement</name><parameter_list pos:line="72" pos:column="50">()</parameter_list>
        <block pos:line="73" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="74" pos:column="13">var</name></type> <name pos:line="74" pos:column="17">impl</name> <init pos:line="74" pos:column="22">= <expr><op:operator pos:line="74" pos:column="24">new</op:operator> <call><name><name pos:line="74" pos:column="28">Route</name><op:operator pos:line="74" pos:column="33">.</op:operator><name pos:line="74" pos:column="34">GetRouteData</name></name><argument_list pos:line="74" pos:column="46">(<argument><expr><call><name pos:line="74" pos:column="47">typeof</name><argument_list pos:line="74" pos:column="53">(<argument><expr><name pos:line="74" pos:column="54">T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="76" pos:column="13">Assert</name><op:operator pos:line="76" pos:column="19">.</op:operator><name pos:line="76" pos:column="20">Equal</name></name><argument_list pos:line="76" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="76" pos:column="26">"GetRouteData"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="76" pos:column="42">impl</name><op:operator pos:line="76" pos:column="46">.</op:operator><name pos:line="76" pos:column="47">MethodToImplement</name><op:operator pos:line="76" pos:column="64">.</op:operator><name pos:line="76" pos:column="65">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="79" pos:column="9">[<expr><name pos:line="79" pos:column="10">Theory</name></expr><op:operator pos:line="79" pos:column="16">,</op:operator> <expr><name pos:line="79" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="80" pos:column="9">public</specifier> <name pos:line="80" pos:column="16">void</name></type> <name pos:line="80" pos:column="21">ReturnWhenRuntimePolicyIsOff</name><parameter_list pos:line="80" pos:column="49">(<param><decl><type><name pos:line="80" pos:column="50">IAlternateMethodContext</name></type> <name pos:line="80" pos:column="74">context</name></decl></param>)</parameter_list>
        <block pos:line="81" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="82" pos:column="13">context</name><op:operator pos:line="82" pos:column="20">.</op:operator><name pos:line="82" pos:column="21">Setup</name></name><argument_list pos:line="82" pos:column="26">(<argument><expr><lambda><name pos:line="82" pos:column="27">c</name> <op:operator pos:line="82" pos:column="29">=&gt;</op:operator> <name><name pos:line="82" pos:column="32">c</name><op:operator pos:line="82" pos:column="33">.</op:operator><name pos:line="82" pos:column="34">RuntimePolicyStrategy</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="82" pos:column="56">.</op:operator><call><name pos:line="82" pos:column="57">Returns</name><argument_list pos:line="82" pos:column="64">(<argument><expr><lambda><parameter_list pos:line="82" pos:column="65">()</parameter_list> <op:operator pos:line="82" pos:column="68">=&gt;</op:operator> <name><name pos:line="82" pos:column="71">RuntimePolicy</name><op:operator pos:line="82" pos:column="84">.</op:operator><name pos:line="82" pos:column="85">Off</name></name></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="84" pos:column="13">var</name></type> <name pos:line="84" pos:column="17">impl</name> <init pos:line="84" pos:column="22">= <expr><op:operator pos:line="84" pos:column="24">new</op:operator> <call><name><name pos:line="84" pos:column="28">Route</name><op:operator pos:line="84" pos:column="33">.</op:operator><name pos:line="84" pos:column="34">GetRouteData</name></name><argument_list pos:line="84" pos:column="46">(<argument><expr><call><name pos:line="84" pos:column="47">typeof</name><argument_list pos:line="84" pos:column="53">(<argument><expr><name pos:line="84" pos:column="54">T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="86" pos:column="13">impl</name><op:operator pos:line="86" pos:column="17">.</op:operator><name pos:line="86" pos:column="18">NewImplementation</name></name><argument_list pos:line="86" pos:column="35">(<argument><expr><name pos:line="86" pos:column="36">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="88" pos:column="13">context</name><op:operator pos:line="88" pos:column="20">.</op:operator><name pos:line="88" pos:column="21">Verify</name></name><argument_list pos:line="88" pos:column="27">(<argument><expr><lambda><name pos:line="88" pos:column="28">c</name> <op:operator pos:line="88" pos:column="30">=&gt;</op:operator> <call><name><name pos:line="88" pos:column="33">c</name><op:operator pos:line="88" pos:column="34">.</op:operator><name pos:line="88" pos:column="35">Proceed</name></name><argument_list pos:line="88" pos:column="42">()</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="91" pos:column="9">[<expr><name pos:line="91" pos:column="10">Theory</name></expr><op:operator pos:line="91" pos:column="16">,</op:operator> <expr><name pos:line="91" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="92" pos:column="9">public</specifier> <name pos:line="92" pos:column="16">void</name></type> <name pos:line="92" pos:column="21">PublishMessageWhenExecuted</name><parameter_list pos:line="92" pos:column="47">(<param><decl><type><attribute pos:line="92" pos:column="48">[<expr><name pos:line="92" pos:column="49">Frozen</name></expr>]</attribute> <name pos:line="92" pos:column="57">IExecutionTimer</name></type> <name pos:line="92" pos:column="73">timer</name></decl></param>, <param><decl><type><name pos:line="92" pos:column="80">IAlternateMethodContext</name></type> <name pos:line="92" pos:column="104">context</name></decl></param>, <param><decl><type><name pos:line="92" pos:column="113">IRouteNameMixin</name></type> <name pos:line="92" pos:column="129">mixin</name></decl></param>)</parameter_list>
        <block pos:line="93" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="94" pos:column="13">context</name><op:operator pos:line="94" pos:column="20">.</op:operator><name pos:line="94" pos:column="21">Setup</name></name><argument_list pos:line="94" pos:column="26">(<argument><expr><lambda><name pos:line="94" pos:column="27">c</name> <op:operator pos:line="94" pos:column="29">=&gt;</op:operator> <name><name pos:line="94" pos:column="32">c</name><op:operator pos:line="94" pos:column="33">.</op:operator><name pos:line="94" pos:column="34">Arguments</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="94" pos:column="44">.</op:operator><call><name pos:line="94" pos:column="45">Returns</name><argument_list pos:line="94" pos:column="52">(<argument><expr><op:operator pos:line="94" pos:column="53">new</op:operator> <name><name pos:line="94" pos:column="57">object</name><index pos:line="94" pos:column="63">[<expr><lit:literal type="number" pos:line="94" pos:column="64">5</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="95" pos:column="13">context</name><op:operator pos:line="95" pos:column="20">.</op:operator><name pos:line="95" pos:column="21">Setup</name></name><argument_list pos:line="95" pos:column="26">(<argument><expr><lambda><name pos:line="95" pos:column="27">c</name> <op:operator pos:line="95" pos:column="29">=&gt;</op:operator> <name><name pos:line="95" pos:column="32">c</name><op:operator pos:line="95" pos:column="33">.</op:operator><name pos:line="95" pos:column="34">ReturnValue</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="95" pos:column="46">.</op:operator><call><name pos:line="95" pos:column="47">Returns</name><argument_list pos:line="95" pos:column="54">(<argument><expr><op:operator pos:line="95" pos:column="55">new</op:operator> <call><name><name pos:line="95" pos:column="59">System</name><op:operator pos:line="95" pos:column="65">.</op:operator><name pos:line="95" pos:column="66">Web</name><op:operator pos:line="95" pos:column="69">.</op:operator><name pos:line="95" pos:column="70">Routing</name><op:operator pos:line="95" pos:column="77">.</op:operator><name pos:line="95" pos:column="78">RouteData</name></name><argument_list pos:line="95" pos:column="87">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="96" pos:column="13">context</name><op:operator pos:line="96" pos:column="20">.</op:operator><name pos:line="96" pos:column="21">Setup</name></name><argument_list pos:line="96" pos:column="26">(<argument><expr><lambda><name pos:line="96" pos:column="27">c</name> <op:operator pos:line="96" pos:column="29">=&gt;</op:operator> <name><name pos:line="96" pos:column="32">c</name><op:operator pos:line="96" pos:column="33">.</op:operator><name pos:line="96" pos:column="34">InvocationTarget</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="96" pos:column="51">.</op:operator><call><name pos:line="96" pos:column="52">Returns</name><argument_list pos:line="96" pos:column="59">(<argument><expr><op:operator pos:line="96" pos:column="60">new</op:operator> <call><name><name pos:line="96" pos:column="64">System</name><op:operator pos:line="96" pos:column="70">.</op:operator><name pos:line="96" pos:column="71">Web</name><op:operator pos:line="96" pos:column="74">.</op:operator><name pos:line="96" pos:column="75">Routing</name><op:operator pos:line="96" pos:column="82">.</op:operator><name pos:line="96" pos:column="83">Route</name></name><argument_list pos:line="96" pos:column="88">(<argument><expr><lit:literal type="string" pos:line="96" pos:column="89">"Test"</lit:literal></expr></argument>, <argument><expr><name pos:line="96" pos:column="97">null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="97" pos:column="13">context</name><op:operator pos:line="97" pos:column="20">.</op:operator><name pos:line="97" pos:column="21">Setup</name></name><argument_list pos:line="97" pos:column="26">(<argument><expr><lambda><name pos:line="97" pos:column="27">c</name> <op:operator pos:line="97" pos:column="29">=&gt;</op:operator> <name><name pos:line="97" pos:column="32">c</name><op:operator pos:line="97" pos:column="33">.</op:operator><name pos:line="97" pos:column="34">Proxy</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="97" pos:column="40">.</op:operator><call><name pos:line="97" pos:column="41">Returns</name><argument_list pos:line="97" pos:column="48">(<argument><expr><name pos:line="97" pos:column="49">mixin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="99" pos:column="13">var</name></type> <name pos:line="99" pos:column="17">impl</name> <init pos:line="99" pos:column="22">= <expr><op:operator pos:line="99" pos:column="24">new</op:operator> <call><name><name pos:line="99" pos:column="28">Route</name><op:operator pos:line="99" pos:column="33">.</op:operator><name pos:line="99" pos:column="34">GetRouteData</name></name><argument_list pos:line="99" pos:column="46">(<argument><expr><call><name pos:line="99" pos:column="47">typeof</name><argument_list pos:line="99" pos:column="53">(<argument><expr><name pos:line="99" pos:column="54">T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="101" pos:column="13">impl</name><op:operator pos:line="101" pos:column="17">.</op:operator><name pos:line="101" pos:column="18">NewImplementation</name></name><argument_list pos:line="101" pos:column="35">(<argument><expr><name pos:line="101" pos:column="36">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="103" pos:column="13">timer</name><op:operator pos:line="103" pos:column="18">.</op:operator><name pos:line="103" pos:column="19">Verify</name></name><argument_list pos:line="103" pos:column="25">(<argument><expr><lambda><name pos:line="103" pos:column="26">t</name> <op:operator pos:line="103" pos:column="28">=&gt;</op:operator> <call><name><name pos:line="103" pos:column="31">t</name><op:operator pos:line="103" pos:column="32">.</op:operator><name pos:line="103" pos:column="33">Time</name></name><argument_list pos:line="103" pos:column="37">(<argument><expr><call><name><name pos:line="103" pos:column="38">It</name><op:operator pos:line="103" pos:column="40">.</op:operator><name><name pos:line="103" pos:column="41">IsAny</name><argument_list pos:line="103" pos:column="46">&lt;<argument><name pos:line="103" pos:column="47">Action</name></argument>&gt;</argument_list></name></name><argument_list pos:line="103" pos:column="54">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="104" pos:column="13">context</name><op:operator pos:line="104" pos:column="20">.</op:operator><name pos:line="104" pos:column="21">MessageBroker</name><op:operator pos:line="104" pos:column="34">.</op:operator><name pos:line="104" pos:column="35">Verify</name></name><argument_list pos:line="104" pos:column="41">(<argument><expr><lambda><name pos:line="104" pos:column="42">mb</name> <op:operator pos:line="104" pos:column="45">=&gt;</op:operator> <call><name><name pos:line="104" pos:column="48">mb</name><op:operator pos:line="104" pos:column="50">.</op:operator><name pos:line="104" pos:column="51">Publish</name></name><argument_list pos:line="104" pos:column="58">(<argument><expr><call><name><name pos:line="104" pos:column="59">It</name><op:operator pos:line="104" pos:column="61">.</op:operator><name><name pos:line="104" pos:column="62">IsAny</name><argument_list pos:line="104" pos:column="67">&lt;<argument><name><name pos:line="104" pos:column="68">Route</name><op:operator pos:line="104" pos:column="73">.</op:operator><name pos:line="104" pos:column="74">GetRouteData</name><op:operator pos:line="104" pos:column="86">.</op:operator><name pos:line="104" pos:column="87">Message</name></name></argument>&gt;</argument_list></name></name><argument_list pos:line="104" pos:column="95">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
