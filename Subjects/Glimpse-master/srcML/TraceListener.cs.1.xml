<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Core\TraceListener.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Diagnostics</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Globalization</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Text</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Glimpse</name><op:operator pos:line="5" pos:column="14">.</op:operator><name pos:line="5" pos:column="15">Core</name><op:operator pos:line="5" pos:column="19">.</op:operator><name pos:line="5" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Glimpse</name><op:operator pos:line="6" pos:column="14">.</op:operator><name pos:line="6" pos:column="15">Core</name><op:operator pos:line="6" pos:column="19">.</op:operator><name pos:line="6" pos:column="20">Framework</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Glimpse</name><op:operator pos:line="7" pos:column="14">.</op:operator><name pos:line="7" pos:column="15">Core</name><op:operator pos:line="7" pos:column="19">.</op:operator><name pos:line="7" pos:column="20">Message</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Glimpse</name><op:operator pos:line="8" pos:column="14">.</op:operator><name pos:line="8" pos:column="15">Core</name><op:operator pos:line="8" pos:column="19">.</op:operator><name pos:line="8" pos:column="20">Tab</name><op:operator pos:line="8" pos:column="23">.</op:operator><name pos:line="8" pos:column="24">Assist</name></name>;</using>

<namespace pos:line="10" pos:column="1">namespace <name><name pos:line="10" pos:column="11">Glimpse</name><op:operator pos:line="10" pos:column="18">.</op:operator><name pos:line="10" pos:column="19">Core</name></name>
<block pos:line="11" pos:column="1">{
    <comment type="line" pos:line="12" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="13" pos:column="5">/// Listener that Glimpse can use to tap into triggered events.</comment>
    <comment type="line" pos:line="14" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="15" pos:column="5">public</specifier> class <name pos:line="15" pos:column="18">TraceListener</name> <super pos:line="15" pos:column="32">: <name><name pos:line="15" pos:column="34">System</name><op:operator pos:line="15" pos:column="40">.</op:operator><name pos:line="15" pos:column="41">Diagnostics</name><op:operator pos:line="15" pos:column="52">.</op:operator><name pos:line="15" pos:column="53">TraceListener</name></name></super>
    <block pos:line="16" pos:column="5">{
        <decl_stmt><decl><type><attribute pos:line="17" pos:column="9">[<expr><name pos:line="17" pos:column="10">ThreadStatic</name></expr>]</attribute>
        <specifier pos:line="18" pos:column="9">private</specifier> <specifier pos:line="18" pos:column="17">static</specifier> <name pos:line="18" pos:column="24">Stopwatch</name></type> <name pos:line="18" pos:column="34">fromLastWatch</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="19" pos:column="9">private</specifier> <name pos:line="19" pos:column="17">IMessageBroker</name></type> <name pos:line="19" pos:column="32">messageBroker</name></decl>;</decl_stmt>

        <comment type="line" pos:line="21" pos:column="9">// ReSharper disable UnusedMember.Global </comment>

        <comment type="line" pos:line="23" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="24" pos:column="9">/// These constructors used by .NET when TraceListener is set via web.config</comment>
        <comment type="line" pos:line="25" pos:column="9">/// &lt;/summary&gt;</comment>
        <constructor><specifier pos:line="26" pos:column="9">public</specifier> <name pos:line="26" pos:column="16">TraceListener</name><parameter_list pos:line="26" pos:column="29">()</parameter_list> 
        <block pos:line="27" pos:column="9">{
            <expr_stmt><expr><name pos:line="28" pos:column="13">MessageBroker</name> <op:operator pos:line="28" pos:column="27">=</op:operator> <call><name><name pos:line="28" pos:column="29">GlimpseConfiguration</name><op:operator pos:line="28" pos:column="49">.</op:operator><name pos:line="28" pos:column="50">GetConfiguredMessageBroker</name></name><argument_list pos:line="28" pos:column="76">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="29" pos:column="13">TimerStrategy</name> <op:operator pos:line="29" pos:column="27">=</op:operator> <call><name><name pos:line="29" pos:column="29">GlimpseConfiguration</name><op:operator pos:line="29" pos:column="49">.</op:operator><name pos:line="29" pos:column="50">GetConfiguredTimerStrategy</name></name><argument_list pos:line="29" pos:column="76">()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor> 

        <comment type="line" pos:line="32" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="33" pos:column="9">/// This constructor is needed for users who configure web.config with &lt;add name="myListener" type="Glimpse.AspNet.TraceListener" initializeData="XYZ"/&gt;</comment>
        <comment type="line" pos:line="34" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="35" pos:column="9">/// &lt;param name="initializeData"&gt;Initialize data string&lt;/param&gt;</comment>
        <constructor><specifier pos:line="36" pos:column="9">public</specifier> <name pos:line="36" pos:column="16">TraceListener</name><parameter_list pos:line="36" pos:column="29">(<param><decl><type><name pos:line="36" pos:column="30">string</name></type> <name pos:line="36" pos:column="37">initializeData</name></decl></param>)</parameter_list> 
        <block pos:line="37" pos:column="9">{
            <expr_stmt><expr><name pos:line="38" pos:column="13">MessageBroker</name> <op:operator pos:line="38" pos:column="27">=</op:operator> <call><name><name pos:line="38" pos:column="29">GlimpseConfiguration</name><op:operator pos:line="38" pos:column="49">.</op:operator><name pos:line="38" pos:column="50">GetConfiguredMessageBroker</name></name><argument_list pos:line="38" pos:column="76">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="39" pos:column="13">TimerStrategy</name> <op:operator pos:line="39" pos:column="27">=</op:operator> <call><name><name pos:line="39" pos:column="29">GlimpseConfiguration</name><op:operator pos:line="39" pos:column="49">.</op:operator><name pos:line="39" pos:column="50">GetConfiguredTimerStrategy</name></name><argument_list pos:line="39" pos:column="76">()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="42" pos:column="9">//// ReSharper restore UnusedMember.Global</comment>

        <comment type="line" pos:line="44" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="45" pos:column="9">/// Initializes a new instance of the &lt;see cref="TraceListener"/&gt; class.</comment>
        <comment type="line" pos:line="46" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="47" pos:column="9">/// &lt;param name="messageBroker"&gt;The message broker.&lt;/param&gt;</comment>
        <comment type="line" pos:line="48" pos:column="9">/// &lt;param name="timerStrategy"&gt;The timer strategy.&lt;/param&gt;</comment>
        <constructor><specifier pos:line="49" pos:column="9">public</specifier> <name pos:line="49" pos:column="16">TraceListener</name><parameter_list pos:line="49" pos:column="29">(<param><decl><type><name pos:line="49" pos:column="30">IMessageBroker</name></type> <name pos:line="49" pos:column="45">messageBroker</name></decl></param>, <param><decl><type><name><name pos:line="49" pos:column="60">Func</name><argument_list pos:line="49" pos:column="64">&lt;<argument><name pos:line="49" pos:column="65">IExecutionTimer</name></argument>&gt;</argument_list></name></type> <name pos:line="49" pos:column="82">timerStrategy</name></decl></param>)</parameter_list>
        <block pos:line="50" pos:column="9">{
            <expr_stmt><expr><name pos:line="51" pos:column="13">MessageBroker</name> <op:operator pos:line="51" pos:column="27">=</op:operator> <name pos:line="51" pos:column="29">messageBroker</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="52" pos:column="13">TimerStrategy</name> <op:operator pos:line="52" pos:column="27">=</op:operator> <lambda><parameter_list pos:line="52" pos:column="29">()</parameter_list> <op:operator pos:line="52" pos:column="32">=&gt;</op:operator>
            <block pos:line="53" pos:column="13">{
                <try pos:line="54" pos:column="17">try
                <block pos:line="55" pos:column="17">{
                    <return pos:line="56" pos:column="21">return <expr><call><name pos:line="56" pos:column="28">timerStrategy</name><argument_list pos:line="56" pos:column="41">()</argument_list></call></expr>;</return>
                }</block>
                <catch pos:line="58" pos:column="17">catch
                <block pos:line="59" pos:column="17">{
                    <comment type="line" pos:line="60" pos:column="21">// Avoid exception being thrown from threads without access to request store</comment>
                    <return pos:line="61" pos:column="21">return <expr><name pos:line="61" pos:column="28">null</name></expr>;</return>
                }</block></catch></try>
            }</block></lambda></expr>;</expr_stmt>
        }</block></constructor>

        <decl_stmt><decl><type><specifier pos:line="66" pos:column="9">internal</specifier> <name pos:line="66" pos:column="18">IMessageBroker</name></type> <name pos:line="66" pos:column="33">MessageBroker</name> 
        <block pos:line="67" pos:column="9">{
            <function><name pos:line="68" pos:column="13">get</name> <block pos:line="68" pos:column="17">{ <return pos:line="68" pos:column="19">return <expr><name pos:line="68" pos:column="26">messageBroker</name> <op:operator pos:line="68" pos:column="40">??</op:operator> <op:operator pos:line="68" pos:column="43">(</op:operator><name pos:line="68" pos:column="44">messageBroker</name> <op:operator pos:line="68" pos:column="58">=</op:operator> <call><name><name pos:line="68" pos:column="60">GlimpseConfiguration</name><op:operator pos:line="68" pos:column="80">.</op:operator><name pos:line="68" pos:column="81">GetConfiguredMessageBroker</name></name><argument_list pos:line="68" pos:column="107">()</argument_list></call><op:operator pos:line="68" pos:column="109">)</op:operator></expr>;</return> }</block></function>
            <function><name pos:line="69" pos:column="13">set</name> <block pos:line="69" pos:column="17">{ <expr_stmt><expr><name pos:line="69" pos:column="19">messageBroker</name> <op:operator pos:line="69" pos:column="33">=</op:operator> <name pos:line="69" pos:column="35">value</name></expr>;</expr_stmt> }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="72" pos:column="9">internal</specifier> <name><name pos:line="72" pos:column="18">Func</name><argument_list pos:line="72" pos:column="22">&lt;<argument><name pos:line="72" pos:column="23">IExecutionTimer</name></argument>&gt;</argument_list></name></type> <name pos:line="72" pos:column="40">TimerStrategy</name> <block pos:line="72" pos:column="54">{ <function_decl><name pos:line="72" pos:column="56">get</name>;</function_decl> <function_decl><name pos:line="72" pos:column="61">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="74" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="75" pos:column="9">/// Writes the value of the object's &lt;see cref="M:System.Object.ToString" /&gt; method to the listener you create when you implement the &lt;see cref="T:System.Diagnostics.TraceListener" /&gt; class.</comment>
        <comment type="line" pos:line="76" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="77" pos:column="9">/// &lt;param name="o"&gt;An &lt;see cref="T:System.Object" /&gt; whose fully qualified class name you want to write.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="78" pos:column="9">public</specifier> <specifier pos:line="78" pos:column="16">override</specifier> <name pos:line="78" pos:column="25">void</name></type> <name pos:line="78" pos:column="30">Write</name><parameter_list pos:line="78" pos:column="35">(<param><decl><type><name pos:line="78" pos:column="36">object</name></type> <name pos:line="78" pos:column="43">o</name></decl></param>)</parameter_list>
        <block pos:line="79" pos:column="9">{ 
            <if pos:line="80" pos:column="13">if <condition pos:line="80" pos:column="16">(<expr><name pos:line="80" pos:column="17">o</name> <op:operator pos:line="80" pos:column="19">==</op:operator> <name pos:line="80" pos:column="22">null</name></expr>)</condition><then pos:line="80" pos:column="27">
            <block pos:line="81" pos:column="13">{
                <return pos:line="82" pos:column="17">return;</return>
            }</block></then></if> 

            <expr_stmt><expr><call><name pos:line="85" pos:column="13">Write</name><argument_list pos:line="85" pos:column="18">(<argument><expr><call><name><name pos:line="85" pos:column="19">o</name><op:operator pos:line="85" pos:column="20">.</op:operator><name pos:line="85" pos:column="21">ToString</name></name><argument_list pos:line="85" pos:column="29">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="88" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="89" pos:column="9">/// When overridden in a derived class, writes the specified message to the listener you create in the derived class.</comment>
        <comment type="line" pos:line="90" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="91" pos:column="9">/// &lt;param name="message"&gt;A message to write.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="92" pos:column="9">public</specifier> <specifier pos:line="92" pos:column="16">override</specifier> <name pos:line="92" pos:column="25">void</name></type> <name pos:line="92" pos:column="30">Write</name><parameter_list pos:line="92" pos:column="35">(<param><decl><type><name pos:line="92" pos:column="36">string</name></type> <name pos:line="92" pos:column="43">message</name></decl></param>)</parameter_list>
        <block pos:line="93" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="94" pos:column="13">WriteLine</name><argument_list pos:line="94" pos:column="22">(<argument><expr><name pos:line="94" pos:column="23">message</name></expr></argument>, <argument><expr><name pos:line="94" pos:column="32">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="97" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="98" pos:column="9">/// Writes a category name and the value of the object's &lt;see cref="M:System.Object.ToString" /&gt; method to the listener you create when you implement the &lt;see cref="T:System.Diagnostics.TraceListener" /&gt; class.</comment>
        <comment type="line" pos:line="99" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="100" pos:column="9">/// &lt;param name="o"&gt;An &lt;see cref="T:System.Object" /&gt; whose fully qualified class name you want to write.&lt;/param&gt;</comment>
        <comment type="line" pos:line="101" pos:column="9">/// &lt;param name="category"&gt;A category name used to organize the output.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="102" pos:column="9">public</specifier> <specifier pos:line="102" pos:column="16">override</specifier> <name pos:line="102" pos:column="25">void</name></type> <name pos:line="102" pos:column="30">Write</name><parameter_list pos:line="102" pos:column="35">(<param><decl><type><name pos:line="102" pos:column="36">object</name></type> <name pos:line="102" pos:column="43">o</name></decl></param>, <param><decl><type><name pos:line="102" pos:column="46">string</name></type> <name pos:line="102" pos:column="53">category</name></decl></param>)</parameter_list>
        <block pos:line="103" pos:column="9">{
            <if pos:line="104" pos:column="13">if <condition pos:line="104" pos:column="16">(<expr><name pos:line="104" pos:column="17">category</name> <op:operator pos:line="104" pos:column="26">==</op:operator> <name pos:line="104" pos:column="29">null</name></expr>)</condition><then pos:line="104" pos:column="34">
            <block pos:line="105" pos:column="13">{
                <expr_stmt><expr><call><name pos:line="106" pos:column="17">Write</name><argument_list pos:line="106" pos:column="22">(<argument><expr><name pos:line="106" pos:column="23">o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else pos:line="108" pos:column="13">else
            <block pos:line="109" pos:column="13">{
                <expr_stmt><expr><call><name pos:line="110" pos:column="17">Write</name><argument_list pos:line="110" pos:column="22">(<argument><expr><name pos:line="110" pos:column="23">o</name> <op:operator pos:line="110" pos:column="25">==</op:operator> <name pos:line="110" pos:column="28">null</name> <op:operator pos:line="110" pos:column="33">?</op:operator> <name><name pos:line="110" pos:column="35">string</name><op:operator pos:line="110" pos:column="41">.</op:operator><name pos:line="110" pos:column="42">Empty</name></name> <op:operator pos:line="110" pos:column="48">:</op:operator> <call><name><name pos:line="110" pos:column="50">o</name><op:operator pos:line="110" pos:column="51">.</op:operator><name pos:line="110" pos:column="52">ToString</name></name><argument_list pos:line="110" pos:column="60">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="110" pos:column="64">category</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></function>

        <comment type="line" pos:line="114" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="115" pos:column="9">/// Writes a category name and a message to the listener you create when you implement the &lt;see cref="T:System.Diagnostics.TraceListener" /&gt; class.</comment>
        <comment type="line" pos:line="116" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="117" pos:column="9">/// &lt;param name="message"&gt;A message to write.&lt;/param&gt;</comment>
        <comment type="line" pos:line="118" pos:column="9">/// &lt;param name="category"&gt;A category name used to organize the output.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="119" pos:column="9">public</specifier> <specifier pos:line="119" pos:column="16">override</specifier> <name pos:line="119" pos:column="25">void</name></type> <name pos:line="119" pos:column="30">Write</name><parameter_list pos:line="119" pos:column="35">(<param><decl><type><name pos:line="119" pos:column="36">string</name></type> <name pos:line="119" pos:column="43">message</name></decl></param>, <param><decl><type><name pos:line="119" pos:column="52">string</name></type> <name pos:line="119" pos:column="59">category</name></decl></param>)</parameter_list>
        <block pos:line="120" pos:column="9">{ 
            <if pos:line="121" pos:column="13">if <condition pos:line="121" pos:column="16">(<expr><name pos:line="121" pos:column="17">category</name> <op:operator pos:line="121" pos:column="26">==</op:operator> <name pos:line="121" pos:column="29">null</name></expr>)</condition><then pos:line="121" pos:column="34">
            <block pos:line="122" pos:column="13">{
                <expr_stmt><expr><call><name pos:line="123" pos:column="17">Write</name><argument_list pos:line="123" pos:column="22">(<argument><expr><name pos:line="123" pos:column="23">message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
            }</block></then>
            <else pos:line="125" pos:column="13">else
            <block pos:line="126" pos:column="13">{
                <expr_stmt><expr><call><name pos:line="127" pos:column="17">WriteLine</name><argument_list pos:line="127" pos:column="26">(<argument><expr><name pos:line="127" pos:column="27">message</name></expr></argument>, <argument><expr><name pos:line="127" pos:column="36">category</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></function>

        <comment type="line" pos:line="131" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="132" pos:column="9">/// Writes the value of the object's &lt;see cref="M:System.Object.ToString" /&gt; method to the listener you create when you implement the &lt;see cref="T:System.Diagnostics.TraceListener" /&gt; class, followed by a line terminator.</comment>
        <comment type="line" pos:line="133" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="134" pos:column="9">/// &lt;param name="o"&gt;An &lt;see cref="T:System.Object" /&gt; whose fully qualified class name you want to write.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="135" pos:column="9">public</specifier> <specifier pos:line="135" pos:column="16">override</specifier> <name pos:line="135" pos:column="25">void</name></type> <name pos:line="135" pos:column="30">WriteLine</name><parameter_list pos:line="135" pos:column="39">(<param><decl><type><name pos:line="135" pos:column="40">object</name></type> <name pos:line="135" pos:column="47">o</name></decl></param>)</parameter_list>
        <block pos:line="136" pos:column="9">{ 
            <expr_stmt><expr><call><name pos:line="137" pos:column="13">WriteLine</name><argument_list pos:line="137" pos:column="22">(<argument><expr><name pos:line="137" pos:column="23">o</name> <op:operator pos:line="137" pos:column="25">==</op:operator> <name pos:line="137" pos:column="28">null</name> <op:operator pos:line="137" pos:column="33">?</op:operator> <name><name pos:line="137" pos:column="35">string</name><op:operator pos:line="137" pos:column="41">.</op:operator><name pos:line="137" pos:column="42">Empty</name></name> <op:operator pos:line="137" pos:column="48">:</op:operator> <call><name><name pos:line="137" pos:column="50">o</name><op:operator pos:line="137" pos:column="51">.</op:operator><name pos:line="137" pos:column="52">ToString</name></name><argument_list pos:line="137" pos:column="60">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="140" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="141" pos:column="9">/// When overridden in a derived class, writes a message to the listener you create in the derived class, followed by a line terminator.</comment>
        <comment type="line" pos:line="142" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="143" pos:column="9">/// &lt;param name="message"&gt;A message to write.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="144" pos:column="9">public</specifier> <specifier pos:line="144" pos:column="16">override</specifier> <name pos:line="144" pos:column="25">void</name></type> <name pos:line="144" pos:column="30">WriteLine</name><parameter_list pos:line="144" pos:column="39">(<param><decl><type><name pos:line="144" pos:column="40">string</name></type> <name pos:line="144" pos:column="47">message</name></decl></param>)</parameter_list>
        <block pos:line="145" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="146" pos:column="13">WriteLine</name><argument_list pos:line="146" pos:column="22">(<argument><expr><name pos:line="146" pos:column="23">message</name></expr></argument>, <argument><expr><name pos:line="146" pos:column="32">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="149" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="150" pos:column="9">/// Writes a category name and the value of the object's &lt;see cref="M:System.Object.ToString" /&gt; method to the listener you create when you implement the &lt;see cref="T:System.Diagnostics.TraceListener" /&gt; class, followed by a line terminator.</comment>
        <comment type="line" pos:line="151" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="152" pos:column="9">/// &lt;param name="o"&gt;An &lt;see cref="T:System.Object" /&gt; whose fully qualified class name you want to write.&lt;/param&gt;</comment>
        <comment type="line" pos:line="153" pos:column="9">/// &lt;param name="category"&gt;A category name used to organize the output.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="154" pos:column="9">public</specifier> <specifier pos:line="154" pos:column="16">override</specifier> <name pos:line="154" pos:column="25">void</name></type> <name pos:line="154" pos:column="30">WriteLine</name><parameter_list pos:line="154" pos:column="39">(<param><decl><type><name pos:line="154" pos:column="40">object</name></type> <name pos:line="154" pos:column="47">o</name></decl></param>, <param><decl><type><name pos:line="154" pos:column="50">string</name></type> <name pos:line="154" pos:column="57">category</name></decl></param>)</parameter_list>
        <block pos:line="155" pos:column="9">{ 
            <expr_stmt><expr><call><name pos:line="156" pos:column="13">WriteLine</name><argument_list pos:line="156" pos:column="22">(<argument><expr><name pos:line="156" pos:column="23">o</name> <op:operator pos:line="156" pos:column="25">==</op:operator> <name pos:line="156" pos:column="28">null</name> <op:operator pos:line="156" pos:column="33">?</op:operator> <name><name pos:line="156" pos:column="35">string</name><op:operator pos:line="156" pos:column="41">.</op:operator><name pos:line="156" pos:column="42">Empty</name></name> <op:operator pos:line="156" pos:column="48">:</op:operator> <call><name><name pos:line="156" pos:column="50">o</name><op:operator pos:line="156" pos:column="51">.</op:operator><name pos:line="156" pos:column="52">ToString</name></name><argument_list pos:line="156" pos:column="60">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="156" pos:column="64">category</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="159" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="160" pos:column="9">/// Writes a category name and a message to the listener you create when you implement the &lt;see cref="T:System.Diagnostics.TraceListener" /&gt; class, followed by a line terminator.</comment>
        <comment type="line" pos:line="161" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="162" pos:column="9">/// &lt;param name="message"&gt;A message to write.&lt;/param&gt;</comment>
        <comment type="line" pos:line="163" pos:column="9">/// &lt;param name="category"&gt;A category name used to organize the output.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="164" pos:column="9">public</specifier> <specifier pos:line="164" pos:column="16">override</specifier> <name pos:line="164" pos:column="25">void</name></type> <name pos:line="164" pos:column="30">WriteLine</name><parameter_list pos:line="164" pos:column="39">(<param><decl><type><name pos:line="164" pos:column="40">string</name></type> <name pos:line="164" pos:column="47">message</name></decl></param>, <param><decl><type><name pos:line="164" pos:column="56">string</name></type> <name pos:line="164" pos:column="63">category</name></decl></param>)</parameter_list>
        <block pos:line="165" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="166" pos:column="13">var</name></type> <name pos:line="166" pos:column="17">derivedCategory</name> <init pos:line="166" pos:column="33">= <expr><call><name pos:line="166" pos:column="35">DeriveCategory</name><argument_list pos:line="166" pos:column="49">(<argument><expr><name pos:line="166" pos:column="50">category</name></expr></argument>)</argument_list></call> <op:operator pos:line="166" pos:column="60">??</op:operator> <name pos:line="166" pos:column="63">category</name></expr></init></decl>;</decl_stmt>
            <if pos:line="167" pos:column="13">if <condition pos:line="167" pos:column="16">(<expr><op:operator pos:line="167" pos:column="17">!</op:operator><call><name><name pos:line="167" pos:column="18">string</name><op:operator pos:line="167" pos:column="24">.</op:operator><name pos:line="167" pos:column="25">IsNullOrEmpty</name></name><argument_list pos:line="167" pos:column="38">(<argument><expr><name pos:line="167" pos:column="39">derivedCategory</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="167" pos:column="56">
            <block pos:line="168" pos:column="13">{
                <expr_stmt><expr><name pos:line="169" pos:column="17">message</name> <op:operator pos:line="169" pos:column="25">=</op:operator> <name pos:line="169" pos:column="27">category</name> <op:operator pos:line="169" pos:column="36">+</op:operator> <lit:literal type="string" pos:line="169" pos:column="38">": "</lit:literal> <op:operator pos:line="169" pos:column="43">+</op:operator> <name pos:line="169" pos:column="45">message</name></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><call><name pos:line="172" pos:column="13">InternalWrite</name><argument_list pos:line="172" pos:column="26">(<argument><expr><name pos:line="172" pos:column="27">message</name></expr></argument>, <argument><expr><name pos:line="172" pos:column="36">derivedCategory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="175" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="176" pos:column="9">/// Emits an error message to the listener you create when you implement the &lt;see cref="T:System.Diagnostics.TraceListener" /&gt; class.</comment>
        <comment type="line" pos:line="177" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="178" pos:column="9">/// &lt;param name="message"&gt;A message to emit.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="179" pos:column="9">public</specifier> <specifier pos:line="179" pos:column="16">override</specifier> <name pos:line="179" pos:column="25">void</name></type> <name pos:line="179" pos:column="30">Fail</name><parameter_list pos:line="179" pos:column="34">(<param><decl><type><name pos:line="179" pos:column="35">string</name></type> <name pos:line="179" pos:column="42">message</name></decl></param>)</parameter_list>
        <block pos:line="180" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="181" pos:column="13">Fail</name><argument_list pos:line="181" pos:column="17">(<argument><expr><name pos:line="181" pos:column="18">message</name></expr></argument>, <argument><expr><name><name pos:line="181" pos:column="27">string</name><op:operator pos:line="181" pos:column="33">.</op:operator><name pos:line="181" pos:column="34">Empty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="184" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="185" pos:column="9">/// Emits an error message and a detailed error message to the listener you create when you implement the &lt;see cref="T:System.Diagnostics.TraceListener" /&gt; class.</comment>
        <comment type="line" pos:line="186" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="187" pos:column="9">/// &lt;param name="message"&gt;A message to emit.&lt;/param&gt;</comment>
        <comment type="line" pos:line="188" pos:column="9">/// &lt;param name="detailMessage"&gt;A detailed message to emit.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="189" pos:column="9">public</specifier> <specifier pos:line="189" pos:column="16">override</specifier> <name pos:line="189" pos:column="25">void</name></type> <name pos:line="189" pos:column="30">Fail</name><parameter_list pos:line="189" pos:column="34">(<param><decl><type><name pos:line="189" pos:column="35">string</name></type> <name pos:line="189" pos:column="42">message</name></decl></param>, <param><decl><type><name pos:line="189" pos:column="51">string</name></type> <name pos:line="189" pos:column="58">detailMessage</name></decl></param>)</parameter_list>
        <block pos:line="190" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="191" pos:column="13">var</name></type> <name pos:line="191" pos:column="17">failMessage</name> <init pos:line="191" pos:column="29">= <expr><op:operator pos:line="191" pos:column="31">new</op:operator> <call><name pos:line="191" pos:column="35">StringBuilder</name><argument_list pos:line="191" pos:column="48">()</argument_list></call></expr></init></decl>;</decl_stmt> 
            <expr_stmt><expr><call><name><name pos:line="192" pos:column="13">failMessage</name><op:operator pos:line="192" pos:column="24">.</op:operator><name pos:line="192" pos:column="25">Append</name></name><argument_list pos:line="192" pos:column="31">(<argument><expr><name pos:line="192" pos:column="32">message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if pos:line="193" pos:column="13">if <condition pos:line="193" pos:column="16">(<expr><op:operator pos:line="193" pos:column="17">!</op:operator><call><name><name pos:line="193" pos:column="18">string</name><op:operator pos:line="193" pos:column="24">.</op:operator><name pos:line="193" pos:column="25">IsNullOrEmpty</name></name><argument_list pos:line="193" pos:column="38">(<argument><expr><name pos:line="193" pos:column="39">detailMessage</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="193" pos:column="54">
            <block pos:line="194" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="195" pos:column="17">failMessage</name><op:operator pos:line="195" pos:column="28">.</op:operator><name pos:line="195" pos:column="29">Append</name></name><argument_list pos:line="195" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="195" pos:column="36">" "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="196" pos:column="17">failMessage</name><op:operator pos:line="196" pos:column="28">.</op:operator><name pos:line="196" pos:column="29">Append</name></name><argument_list pos:line="196" pos:column="35">(<argument><expr><name pos:line="196" pos:column="36">detailMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><call><name pos:line="199" pos:column="13">InternalWrite</name><argument_list pos:line="199" pos:column="26">(<argument><expr><call><name><name pos:line="199" pos:column="27">failMessage</name><op:operator pos:line="199" pos:column="38">.</op:operator><name pos:line="199" pos:column="39">ToString</name></name><argument_list pos:line="199" pos:column="47">()</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="199" pos:column="51">FormattingKeywords</name><op:operator pos:line="199" pos:column="69">.</op:operator><name pos:line="199" pos:column="70">Fail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="202" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="203" pos:column="9">/// Writes trace information, a data object and event information to the listener specific output.</comment>
        <comment type="line" pos:line="204" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="205" pos:column="9">/// &lt;param name="eventCache"&gt;A &lt;see cref="T:System.Diagnostics.TraceEventCache" /&gt; object that contains the current process ID, thread ID, and stack trace information.&lt;/param&gt;</comment>
        <comment type="line" pos:line="206" pos:column="9">/// &lt;param name="source"&gt;A name used to identify the output, typically the name of the application that generated the trace event.&lt;/param&gt;</comment>
        <comment type="line" pos:line="207" pos:column="9">/// &lt;param name="eventType"&gt;One of the &lt;see cref="T:System.Diagnostics.TraceEventType" /&gt; values specifying the type of event that has caused the trace.&lt;/param&gt;</comment>
        <comment type="line" pos:line="208" pos:column="9">/// &lt;param name="id"&gt;A numeric identifier for the event.&lt;/param&gt;</comment>
        <comment type="line" pos:line="209" pos:column="9">/// &lt;param name="data"&gt;The trace data to emit.&lt;/param&gt; </comment>
        <function><type><specifier pos:line="210" pos:column="9">public</specifier> <specifier pos:line="210" pos:column="16">override</specifier> <name pos:line="210" pos:column="25">void</name></type> <name pos:line="210" pos:column="30">TraceData</name><parameter_list pos:line="210" pos:column="39">(<param><decl><type><name pos:line="210" pos:column="40">TraceEventCache</name></type> <name pos:line="210" pos:column="56">eventCache</name></decl></param>, <param><decl><type><name pos:line="210" pos:column="68">string</name></type> <name pos:line="210" pos:column="75">source</name></decl></param>, <param><decl><type><name pos:line="210" pos:column="83">TraceEventType</name></type> <name pos:line="210" pos:column="98">eventType</name></decl></param>, <param><decl><type><name pos:line="210" pos:column="109">int</name></type> <name pos:line="210" pos:column="113">id</name></decl></param>, <param><decl><type><name pos:line="210" pos:column="117">object</name></type> <name pos:line="210" pos:column="124">data</name></decl></param>)</parameter_list>
        <block pos:line="211" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="212" pos:column="13">var</name></type> <name pos:line="212" pos:column="17">message</name> <init pos:line="212" pos:column="25">= <expr><op:operator pos:line="212" pos:column="27">new</op:operator> <call><name pos:line="212" pos:column="31">StringBuilder</name><argument_list pos:line="212" pos:column="44">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="213" pos:column="13">message</name><op:operator pos:line="213" pos:column="20">.</op:operator><name pos:line="213" pos:column="21">Append</name></name><argument_list pos:line="213" pos:column="27">(<argument><expr><call><name pos:line="213" pos:column="28">WriteHeader</name><argument_list pos:line="213" pos:column="39">(<argument><expr><name pos:line="213" pos:column="40">source</name></expr></argument>, <argument><expr><name pos:line="213" pos:column="48">id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                
            <if pos:line="215" pos:column="13">if <condition pos:line="215" pos:column="16">(<expr><name pos:line="215" pos:column="17">data</name> <op:operator pos:line="215" pos:column="22">!=</op:operator> <name pos:line="215" pos:column="25">null</name></expr>)</condition><then pos:line="215" pos:column="30">
            <block pos:line="216" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="217" pos:column="17">message</name><op:operator pos:line="217" pos:column="24">.</op:operator><name pos:line="217" pos:column="25">AppendLine</name></name><argument_list pos:line="217" pos:column="35">(<argument><expr><call><name><name pos:line="217" pos:column="36">data</name><op:operator pos:line="217" pos:column="40">.</op:operator><name pos:line="217" pos:column="41">ToString</name></name><argument_list pos:line="217" pos:column="49">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
             
            <expr_stmt><expr><call><name><name pos:line="220" pos:column="13">message</name><op:operator pos:line="220" pos:column="20">.</op:operator><name pos:line="220" pos:column="21">Append</name></name><argument_list pos:line="220" pos:column="27">(<argument><expr><call><name pos:line="220" pos:column="28">WriteFooter</name><argument_list pos:line="220" pos:column="39">(<argument><expr><name pos:line="220" pos:column="40">eventCache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name pos:line="222" pos:column="13">InternalWrite</name><argument_list pos:line="222" pos:column="26">(<argument><expr><call><name><name pos:line="222" pos:column="27">message</name><op:operator pos:line="222" pos:column="34">.</op:operator><name pos:line="222" pos:column="35">ToString</name></name><argument_list pos:line="222" pos:column="43">()</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="222" pos:column="47">DeriveCategory</name><argument_list pos:line="222" pos:column="61">(<argument><expr><name pos:line="222" pos:column="62">eventType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="225" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="226" pos:column="9">/// Writes trace information, an array of data objects and event information to the listener specific output.</comment>
        <comment type="line" pos:line="227" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="228" pos:column="9">/// &lt;param name="eventCache"&gt;A &lt;see cref="T:System.Diagnostics.TraceEventCache" /&gt; object that contains the current process ID, thread ID, and stack trace information.&lt;/param&gt;</comment>
        <comment type="line" pos:line="229" pos:column="9">/// &lt;param name="source"&gt;A name used to identify the output, typically the name of the application that generated the trace event.&lt;/param&gt;</comment>
        <comment type="line" pos:line="230" pos:column="9">/// &lt;param name="eventType"&gt;One of the &lt;see cref="T:System.Diagnostics.TraceEventType" /&gt; values specifying the type of event that has caused the trace.&lt;/param&gt;</comment>
        <comment type="line" pos:line="231" pos:column="9">/// &lt;param name="id"&gt;A numeric identifier for the event.&lt;/param&gt;</comment>
        <comment type="line" pos:line="232" pos:column="9">/// &lt;param name="data"&gt;An array of objects to emit as data.&lt;/param&gt; </comment>
        <function><type><specifier pos:line="233" pos:column="9">public</specifier> <specifier pos:line="233" pos:column="16">override</specifier> <name pos:line="233" pos:column="25">void</name></type> <name pos:line="233" pos:column="30">TraceData</name><parameter_list pos:line="233" pos:column="39">(<param><decl><type><name pos:line="233" pos:column="40">TraceEventCache</name></type> <name pos:line="233" pos:column="56">eventCache</name></decl></param>, <param><decl><type><name pos:line="233" pos:column="68">string</name></type> <name pos:line="233" pos:column="75">source</name></decl></param>, <param><decl><type><name pos:line="233" pos:column="83">TraceEventType</name></type> <name pos:line="233" pos:column="98">eventType</name></decl></param>, <param><decl><type><name pos:line="233" pos:column="109">int</name></type> <name pos:line="233" pos:column="113">id</name></decl></param>, <param><decl><type><specifier pos:line="233" pos:column="117">params</specifier> <name><name pos:line="233" pos:column="124">object</name><index pos:line="233" pos:column="130">[]</index></name></type> <name pos:line="233" pos:column="133">data</name></decl></param>)</parameter_list>
        <block pos:line="234" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="235" pos:column="13">var</name></type> <name pos:line="235" pos:column="17">message</name> <init pos:line="235" pos:column="25">= <expr><op:operator pos:line="235" pos:column="27">new</op:operator> <call><name pos:line="235" pos:column="31">StringBuilder</name><argument_list pos:line="235" pos:column="44">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="236" pos:column="13">message</name><op:operator pos:line="236" pos:column="20">.</op:operator><name pos:line="236" pos:column="21">Append</name></name><argument_list pos:line="236" pos:column="27">(<argument><expr><call><name pos:line="236" pos:column="28">WriteHeader</name><argument_list pos:line="236" pos:column="39">(<argument><expr><name pos:line="236" pos:column="40">source</name></expr></argument>, <argument><expr><name pos:line="236" pos:column="48">id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="238" pos:column="13">var</name></type> <name pos:line="238" pos:column="17">dataMessage</name> <init pos:line="238" pos:column="29">= <expr><op:operator pos:line="238" pos:column="31">new</op:operator> <call><name pos:line="238" pos:column="35">StringBuilder</name><argument_list pos:line="238" pos:column="48">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="239" pos:column="13">if <condition pos:line="239" pos:column="16">(<expr><name pos:line="239" pos:column="17">data</name> <op:operator pos:line="239" pos:column="22">!=</op:operator> <name pos:line="239" pos:column="25">null</name></expr>)</condition><then pos:line="239" pos:column="30">
            <block pos:line="240" pos:column="13">{
                <for pos:line="241" pos:column="17">for (<init><decl><type><name pos:line="241" pos:column="22">var</name></type> <name pos:line="241" pos:column="26">i</name> <init pos:line="241" pos:column="28">= <expr><lit:literal type="number" pos:line="241" pos:column="30">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="241" pos:column="33">i</name> <op:operator pos:line="241" pos:column="35">&lt;</op:operator> <name><name pos:line="241" pos:column="37">data</name><op:operator pos:line="241" pos:column="41">.</op:operator><name pos:line="241" pos:column="42">Length</name></name></expr>;</condition> <incr><expr><name pos:line="241" pos:column="50">i</name><op:operator pos:line="241" pos:column="51">++</op:operator></expr></incr>)
                <block pos:line="242" pos:column="17">{
                    <if pos:line="243" pos:column="21">if <condition pos:line="243" pos:column="24">(<expr><name pos:line="243" pos:column="25">i</name> <op:operator pos:line="243" pos:column="27">!=</op:operator> <lit:literal type="number" pos:line="243" pos:column="30">0</lit:literal></expr>)</condition><then pos:line="243" pos:column="32">
                    <block pos:line="244" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="245" pos:column="25">dataMessage</name><op:operator pos:line="245" pos:column="36">.</op:operator><name pos:line="245" pos:column="37">Append</name></name><argument_list pos:line="245" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="245" pos:column="44">", "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>

                    <if pos:line="248" pos:column="21">if <condition pos:line="248" pos:column="24">(<expr><name><name pos:line="248" pos:column="25">data</name><index pos:line="248" pos:column="29">[<expr><name pos:line="248" pos:column="30">i</name></expr>]</index></name> <op:operator pos:line="248" pos:column="33">!=</op:operator> <name pos:line="248" pos:column="36">null</name></expr>)</condition><then pos:line="248" pos:column="41">
                    <block pos:line="249" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="250" pos:column="25">dataMessage</name><op:operator pos:line="250" pos:column="36">.</op:operator><name pos:line="250" pos:column="37">Append</name></name><argument_list pos:line="250" pos:column="43">(<argument><expr><name><name pos:line="250" pos:column="44">data</name><index pos:line="250" pos:column="48">[<expr><name pos:line="250" pos:column="49">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></for>
            }</block></then></if>

            <expr_stmt><expr><call><name><name pos:line="255" pos:column="13">message</name><op:operator pos:line="255" pos:column="20">.</op:operator><name pos:line="255" pos:column="21">AppendLine</name></name><argument_list pos:line="255" pos:column="31">(<argument><expr><call><name><name pos:line="255" pos:column="32">dataMessage</name><op:operator pos:line="255" pos:column="43">.</op:operator><name pos:line="255" pos:column="44">ToString</name></name><argument_list pos:line="255" pos:column="52">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="256" pos:column="13">message</name><op:operator pos:line="256" pos:column="20">.</op:operator><name pos:line="256" pos:column="21">Append</name></name><argument_list pos:line="256" pos:column="27">(<argument><expr><call><name pos:line="256" pos:column="28">WriteFooter</name><argument_list pos:line="256" pos:column="39">(<argument><expr><name pos:line="256" pos:column="40">eventCache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name pos:line="258" pos:column="13">InternalWrite</name><argument_list pos:line="258" pos:column="26">(<argument><expr><call><name><name pos:line="258" pos:column="27">message</name><op:operator pos:line="258" pos:column="34">.</op:operator><name pos:line="258" pos:column="35">ToString</name></name><argument_list pos:line="258" pos:column="43">()</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="258" pos:column="47">DeriveCategory</name><argument_list pos:line="258" pos:column="61">(<argument><expr><name pos:line="258" pos:column="62">eventType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="261" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="262" pos:column="9">/// Traces the event.</comment>
        <comment type="line" pos:line="263" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="264" pos:column="9">/// &lt;param name="eventCache"&gt;The event cache.&lt;/param&gt;</comment>
        <comment type="line" pos:line="265" pos:column="9">/// &lt;param name="source"&gt;The source.&lt;/param&gt;</comment>
        <comment type="line" pos:line="266" pos:column="9">/// &lt;param name="eventType"&gt;Type of the event.&lt;/param&gt;</comment>
        <comment type="line" pos:line="267" pos:column="9">/// &lt;param name="id"&gt;The id.&lt;/param&gt;</comment>
        <comment type="line" pos:line="268" pos:column="9">/// &lt;param name="data"&gt;The data.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="269" pos:column="9">public</specifier> <specifier pos:line="269" pos:column="16">override</specifier> <name pos:line="269" pos:column="25">void</name></type> <name pos:line="269" pos:column="30">TraceEvent</name><parameter_list pos:line="269" pos:column="40">(<param><decl><type><name pos:line="269" pos:column="41">TraceEventCache</name></type> <name pos:line="269" pos:column="57">eventCache</name></decl></param>, <param><decl><type><name pos:line="269" pos:column="69">string</name></type> <name pos:line="269" pos:column="76">source</name></decl></param>, <param><decl><type><name pos:line="269" pos:column="84">TraceEventType</name></type> <name pos:line="269" pos:column="99">eventType</name></decl></param>, <param><decl><type><name pos:line="269" pos:column="110">int</name></type> <name pos:line="269" pos:column="114">id</name></decl></param>, <param><decl><type><name pos:line="269" pos:column="118">string</name></type> <name pos:line="269" pos:column="125">data</name></decl></param>)</parameter_list>
        <block pos:line="270" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="271" pos:column="13">var</name></type> <name pos:line="271" pos:column="17">message</name> <init pos:line="271" pos:column="25">= <expr><op:operator pos:line="271" pos:column="27">new</op:operator> <call><name pos:line="271" pos:column="31">StringBuilder</name><argument_list pos:line="271" pos:column="44">()</argument_list></call></expr></init></decl>;</decl_stmt> 
            <expr_stmt><expr><call><name><name pos:line="272" pos:column="13">message</name><op:operator pos:line="272" pos:column="20">.</op:operator><name pos:line="272" pos:column="21">Append</name></name><argument_list pos:line="272" pos:column="27">(<argument><expr><call><name pos:line="272" pos:column="28">WriteHeader</name><argument_list pos:line="272" pos:column="39">(<argument><expr><name pos:line="272" pos:column="40">source</name></expr></argument>, <argument><expr><name pos:line="272" pos:column="48">id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="273" pos:column="13">message</name><op:operator pos:line="273" pos:column="20">.</op:operator><name pos:line="273" pos:column="21">AppendLine</name></name><argument_list pos:line="273" pos:column="31">(<argument><expr><name pos:line="273" pos:column="32">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="274" pos:column="13">message</name><op:operator pos:line="274" pos:column="20">.</op:operator><name pos:line="274" pos:column="21">Append</name></name><argument_list pos:line="274" pos:column="27">(<argument><expr><call><name pos:line="274" pos:column="28">WriteFooter</name><argument_list pos:line="274" pos:column="39">(<argument><expr><name pos:line="274" pos:column="40">eventCache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name pos:line="276" pos:column="13">InternalWrite</name><argument_list pos:line="276" pos:column="26">(<argument><expr><call><name><name pos:line="276" pos:column="27">message</name><op:operator pos:line="276" pos:column="34">.</op:operator><name pos:line="276" pos:column="35">ToString</name></name><argument_list pos:line="276" pos:column="43">()</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="276" pos:column="47">DeriveCategory</name><argument_list pos:line="276" pos:column="61">(<argument><expr><name pos:line="276" pos:column="62">eventType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="279" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="280" pos:column="9">/// Writes trace information, a formatted array of objects and event information to the listener specific output.</comment>
        <comment type="line" pos:line="281" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="282" pos:column="9">/// &lt;param name="eventCache"&gt;A &lt;see cref="T:System.Diagnostics.TraceEventCache" /&gt; object that contains the current process ID, thread ID, and stack trace information.&lt;/param&gt;</comment>
        <comment type="line" pos:line="283" pos:column="9">/// &lt;param name="source"&gt;A name used to identify the output, typically the name of the application that generated the trace event.&lt;/param&gt;</comment>
        <comment type="line" pos:line="284" pos:column="9">/// &lt;param name="eventType"&gt;One of the &lt;see cref="T:System.Diagnostics.TraceEventType" /&gt; values specifying the type of event that has caused the trace.&lt;/param&gt;</comment>
        <comment type="line" pos:line="285" pos:column="9">/// &lt;param name="id"&gt;A numeric identifier for the event.&lt;/param&gt;</comment>
        <comment type="line" pos:line="286" pos:column="9">/// &lt;param name="format"&gt;A format string that contains zero or more format items, which correspond to objects in the &lt;paramref name="args" /&gt; array.&lt;/param&gt;</comment>
        <comment type="line" pos:line="287" pos:column="9">/// &lt;param name="args"&gt;An object array containing zero or more objects to format.&lt;/param&gt; </comment>
        <function><type><specifier pos:line="288" pos:column="9">public</specifier> <specifier pos:line="288" pos:column="16">override</specifier> <name pos:line="288" pos:column="25">void</name></type> <name pos:line="288" pos:column="30">TraceEvent</name><parameter_list pos:line="288" pos:column="40">(<param><decl><type><name pos:line="288" pos:column="41">TraceEventCache</name></type> <name pos:line="288" pos:column="57">eventCache</name></decl></param>, <param><decl><type><name pos:line="288" pos:column="69">string</name></type> <name pos:line="288" pos:column="76">source</name></decl></param>, <param><decl><type><name pos:line="288" pos:column="84">TraceEventType</name></type> <name pos:line="288" pos:column="99">eventType</name></decl></param>, <param><decl><type><name pos:line="288" pos:column="110">int</name></type> <name pos:line="288" pos:column="114">id</name></decl></param>, <param><decl><type><name pos:line="288" pos:column="118">string</name></type> <name pos:line="288" pos:column="125">format</name></decl></param>, <param><decl><type><specifier pos:line="288" pos:column="133">params</specifier> <name><name pos:line="288" pos:column="140">object</name><index pos:line="288" pos:column="146">[]</index></name></type> <name pos:line="288" pos:column="149">args</name></decl></param>)</parameter_list>
        <block pos:line="289" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="290" pos:column="13">var</name></type> <name pos:line="290" pos:column="17">message</name> <init pos:line="290" pos:column="25">= <expr><op:operator pos:line="290" pos:column="27">new</op:operator> <call><name pos:line="290" pos:column="31">StringBuilder</name><argument_list pos:line="290" pos:column="44">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="291" pos:column="13">message</name><op:operator pos:line="291" pos:column="20">.</op:operator><name pos:line="291" pos:column="21">Append</name></name><argument_list pos:line="291" pos:column="27">(<argument><expr><call><name pos:line="291" pos:column="28">WriteHeader</name><argument_list pos:line="291" pos:column="39">(<argument><expr><name pos:line="291" pos:column="40">source</name></expr></argument>, <argument><expr><name pos:line="291" pos:column="48">id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="292" pos:column="13">message</name><op:operator pos:line="292" pos:column="20">.</op:operator><name pos:line="292" pos:column="21">AppendLine</name></name><argument_list pos:line="292" pos:column="31">(<argument><expr><name pos:line="292" pos:column="32">args</name> <op:operator pos:line="292" pos:column="37">!=</op:operator> <name pos:line="292" pos:column="40">null</name> <op:operator pos:line="292" pos:column="45">?</op:operator> <call><name><name pos:line="292" pos:column="47">string</name><op:operator pos:line="292" pos:column="53">.</op:operator><name pos:line="292" pos:column="54">Format</name></name><argument_list pos:line="292" pos:column="60">(<argument><expr><name><name pos:line="292" pos:column="61">CultureInfo</name><op:operator pos:line="292" pos:column="72">.</op:operator><name pos:line="292" pos:column="73">InvariantCulture</name></name></expr></argument>, <argument><expr><name pos:line="292" pos:column="91">format</name></expr></argument>, <argument><expr><name pos:line="292" pos:column="99">args</name></expr></argument>)</argument_list></call> <op:operator pos:line="292" pos:column="105">:</op:operator> <name pos:line="292" pos:column="107">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="293" pos:column="13">message</name><op:operator pos:line="293" pos:column="20">.</op:operator><name pos:line="293" pos:column="21">Append</name></name><argument_list pos:line="293" pos:column="27">(<argument><expr><call><name pos:line="293" pos:column="28">WriteFooter</name><argument_list pos:line="293" pos:column="39">(<argument><expr><name pos:line="293" pos:column="40">eventCache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name pos:line="295" pos:column="13">InternalWrite</name><argument_list pos:line="295" pos:column="26">(<argument><expr><call><name><name pos:line="295" pos:column="27">message</name><op:operator pos:line="295" pos:column="34">.</op:operator><name pos:line="295" pos:column="35">ToString</name></name><argument_list pos:line="295" pos:column="43">()</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="295" pos:column="47">DeriveCategory</name><argument_list pos:line="295" pos:column="61">(<argument><expr><name pos:line="295" pos:column="62">eventType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
         
        <function><type><specifier pos:line="298" pos:column="9">private</specifier> <name pos:line="298" pos:column="17">TimeSpan</name></type> <name pos:line="298" pos:column="26">CalculateFromLast</name><parameter_list pos:line="298" pos:column="43">(<param><decl><type><name pos:line="298" pos:column="44">IExecutionTimer</name></type> <name pos:line="298" pos:column="60">timer</name></decl></param>)</parameter_list>
        <block pos:line="299" pos:column="9">{
            <if pos:line="300" pos:column="13">if <condition pos:line="300" pos:column="16">(<expr><name pos:line="300" pos:column="17">fromLastWatch</name> <op:operator pos:line="300" pos:column="31">==</op:operator> <name pos:line="300" pos:column="34">null</name></expr>)</condition><then pos:line="300" pos:column="39">
            <block pos:line="301" pos:column="13">{
                <expr_stmt><expr><name pos:line="302" pos:column="17">fromLastWatch</name> <op:operator pos:line="302" pos:column="31">=</op:operator> <call><name><name pos:line="302" pos:column="33">Stopwatch</name><op:operator pos:line="302" pos:column="42">.</op:operator><name pos:line="302" pos:column="43">StartNew</name></name><argument_list pos:line="302" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
                <return pos:line="303" pos:column="17">return <expr><call><name><name pos:line="303" pos:column="24">TimeSpan</name><op:operator pos:line="303" pos:column="32">.</op:operator><name pos:line="303" pos:column="33">FromMilliseconds</name></name><argument_list pos:line="303" pos:column="49">(<argument><expr><lit:literal type="number" pos:line="303" pos:column="50">0</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>

            <comment type="line" pos:line="306" pos:column="13">// Timer started before this request, reset it</comment>
            <if pos:line="307" pos:column="13">if <condition pos:line="307" pos:column="16">(<expr><name><name pos:line="307" pos:column="17">DateTime</name><op:operator pos:line="307" pos:column="25">.</op:operator><name pos:line="307" pos:column="26">Now</name></name> <op:operator pos:line="307" pos:column="30">-</op:operator> <name><name pos:line="307" pos:column="32">fromLastWatch</name><op:operator pos:line="307" pos:column="45">.</op:operator><name pos:line="307" pos:column="46">Elapsed</name></name> <op:operator pos:line="307" pos:column="54">&lt;</op:operator> <name><name pos:line="307" pos:column="56">timer</name><op:operator pos:line="307" pos:column="61">.</op:operator><name pos:line="307" pos:column="62">RequestStart</name></name></expr>)</condition><then pos:line="307" pos:column="75">
            <block pos:line="308" pos:column="13">{
                <expr_stmt><expr><name pos:line="309" pos:column="17">fromLastWatch</name> <op:operator pos:line="309" pos:column="31">=</op:operator> <call><name><name pos:line="309" pos:column="33">Stopwatch</name><op:operator pos:line="309" pos:column="42">.</op:operator><name pos:line="309" pos:column="43">StartNew</name></name><argument_list pos:line="309" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
                <return pos:line="310" pos:column="17">return <expr><call><name><name pos:line="310" pos:column="24">TimeSpan</name><op:operator pos:line="310" pos:column="32">.</op:operator><name pos:line="310" pos:column="33">FromMilliseconds</name></name><argument_list pos:line="310" pos:column="49">(<argument><expr><lit:literal type="number" pos:line="310" pos:column="50">0</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="313" pos:column="13">var</name></type> <name pos:line="313" pos:column="17">result</name> <init pos:line="313" pos:column="24">= <expr><name><name pos:line="313" pos:column="26">fromLastWatch</name><op:operator pos:line="313" pos:column="39">.</op:operator><name pos:line="313" pos:column="40">Elapsed</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="314" pos:column="13">fromLastWatch</name> <op:operator pos:line="314" pos:column="27">=</op:operator> <call><name><name pos:line="314" pos:column="29">Stopwatch</name><op:operator pos:line="314" pos:column="38">.</op:operator><name pos:line="314" pos:column="39">StartNew</name></name><argument_list pos:line="314" pos:column="47">()</argument_list></call></expr>;</expr_stmt>
            <return pos:line="315" pos:column="13">return <expr><name pos:line="315" pos:column="20">result</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="318" pos:column="9">private</specifier> <name pos:line="318" pos:column="17">void</name></type> <name pos:line="318" pos:column="22">InternalWrite</name><parameter_list pos:line="318" pos:column="35">(<param><decl><type><name pos:line="318" pos:column="36">string</name></type> <name pos:line="318" pos:column="43">message</name></decl></param>, <param><decl><type><name pos:line="318" pos:column="52">string</name></type> <name pos:line="318" pos:column="59">category</name></decl></param>)</parameter_list>
        <block pos:line="319" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="320" pos:column="13">var</name></type> <name pos:line="320" pos:column="17">timer</name> <init pos:line="320" pos:column="23">= <expr><call><name pos:line="320" pos:column="25">TimerStrategy</name><argument_list pos:line="320" pos:column="38">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="322" pos:column="13">// Execution in on thread without access to RequestStore</comment>
            <if pos:line="323" pos:column="13">if <condition pos:line="323" pos:column="16">(<expr><name pos:line="323" pos:column="17">timer</name> <op:operator pos:line="323" pos:column="23">==</op:operator> <name pos:line="323" pos:column="26">null</name> <op:operator pos:line="323" pos:column="31">||</op:operator> <name pos:line="323" pos:column="34">MessageBroker</name> <op:operator pos:line="323" pos:column="48">==</op:operator> <name pos:line="323" pos:column="51">null</name></expr>)</condition><then pos:line="323" pos:column="56"> 
            <block pos:line="324" pos:column="13">{
                <return pos:line="325" pos:column="17">return;</return>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="328" pos:column="13">var</name></type> <name pos:line="328" pos:column="17">model</name> <init pos:line="328" pos:column="23">= <expr><op:operator pos:line="328" pos:column="25">new</op:operator> <name pos:line="328" pos:column="29">TraceMessage</name>
                <block pos:line="329" pos:column="17">{
                    <expr><name pos:line="330" pos:column="21">Category</name> <op:operator pos:line="330" pos:column="30">=</op:operator> <name pos:line="330" pos:column="32">category</name></expr>,
                    <expr><name pos:line="331" pos:column="21">Message</name> <op:operator pos:line="331" pos:column="29">=</op:operator> <name pos:line="331" pos:column="31">message</name></expr>,
                    <expr><name pos:line="332" pos:column="21">FromFirst</name> <op:operator pos:line="332" pos:column="31">=</op:operator> <call><name><name pos:line="332" pos:column="33">timer</name><op:operator pos:line="332" pos:column="38">.</op:operator><name pos:line="332" pos:column="39">Point</name></name><argument_list pos:line="332" pos:column="44">()</argument_list></call><op:operator pos:line="332" pos:column="46">.</op:operator><name pos:line="332" pos:column="47">Offset</name></expr>,
                    <expr><name pos:line="333" pos:column="21">FromLast</name> <op:operator pos:line="333" pos:column="30">=</op:operator> <call><name pos:line="333" pos:column="32">CalculateFromLast</name><argument_list pos:line="333" pos:column="49">(<argument><expr><name pos:line="333" pos:column="50">timer</name></expr></argument>)</argument_list></call></expr>,
                    <expr><name pos:line="334" pos:column="21">IndentLevel</name> <op:operator pos:line="334" pos:column="33">=</op:operator> <name pos:line="334" pos:column="35">IndentLevel</name></expr>
                }</block></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="337" pos:column="13">MessageBroker</name><op:operator pos:line="337" pos:column="26">.</op:operator><name pos:line="337" pos:column="27">Publish</name></name><argument_list pos:line="337" pos:column="34">(<argument><expr><name pos:line="337" pos:column="35">model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="340" pos:column="9">private</specifier> <name pos:line="340" pos:column="17">string</name></type> <name pos:line="340" pos:column="24">WriteHeader</name><parameter_list pos:line="340" pos:column="35">(<param><decl><type><name pos:line="340" pos:column="36">string</name></type> <name pos:line="340" pos:column="43">source</name></decl></param>, <param><decl><type><name pos:line="340" pos:column="51">int</name></type> <name pos:line="340" pos:column="55">id</name></decl></param>)</parameter_list>
        <block pos:line="341" pos:column="9">{
            <return pos:line="342" pos:column="13">return <expr><call><name><name pos:line="342" pos:column="20">string</name><op:operator pos:line="342" pos:column="26">.</op:operator><name pos:line="342" pos:column="27">Format</name></name><argument_list pos:line="342" pos:column="33">(<argument><expr><name><name pos:line="342" pos:column="34">CultureInfo</name><op:operator pos:line="342" pos:column="45">.</op:operator><name pos:line="342" pos:column="46">InvariantCulture</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="342" pos:column="64">"{0}: {1}: "</lit:literal></expr></argument>, <argument><expr><name pos:line="342" pos:column="78">source</name></expr></argument>, <argument><expr><call><name><name pos:line="342" pos:column="86">id</name><op:operator pos:line="342" pos:column="88">.</op:operator><name pos:line="342" pos:column="89">ToString</name></name><argument_list pos:line="342" pos:column="97">(<argument><expr><name><name pos:line="342" pos:column="98">CultureInfo</name><op:operator pos:line="342" pos:column="109">.</op:operator><name pos:line="342" pos:column="110">InvariantCulture</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="345" pos:column="9">private</specifier> <name pos:line="345" pos:column="17">string</name></type> <name pos:line="345" pos:column="24">WriteFooter</name><parameter_list pos:line="345" pos:column="35">(<param><decl><type><name pos:line="345" pos:column="36">TraceEventCache</name></type> <name pos:line="345" pos:column="52">eventCache</name></decl></param>)</parameter_list>
        <block pos:line="346" pos:column="9">{
            <if pos:line="347" pos:column="13">if <condition pos:line="347" pos:column="16">(<expr><name pos:line="347" pos:column="17">eventCache</name> <op:operator pos:line="347" pos:column="28">==</op:operator> <name pos:line="347" pos:column="31">null</name></expr>)</condition><then pos:line="347" pos:column="36">
            <block pos:line="348" pos:column="13">{
                <return pos:line="349" pos:column="17">return <expr><name><name pos:line="349" pos:column="24">string</name><op:operator pos:line="349" pos:column="30">.</op:operator><name pos:line="349" pos:column="31">Empty</name></name></expr>;</return>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="352" pos:column="13">var</name></type> <name pos:line="352" pos:column="17">message</name> <init pos:line="352" pos:column="25">= <expr><op:operator pos:line="352" pos:column="27">new</op:operator> <call><name pos:line="352" pos:column="31">StringBuilder</name><argument_list pos:line="352" pos:column="44">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="353" pos:column="13">if <condition pos:line="353" pos:column="16">(<expr><call><name pos:line="353" pos:column="17">IsEnabled</name><argument_list pos:line="353" pos:column="26">(<argument><expr><name><name pos:line="353" pos:column="27">TraceOptions</name><op:operator pos:line="353" pos:column="39">.</op:operator><name pos:line="353" pos:column="40">ProcessId</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="353" pos:column="51">
            <block pos:line="354" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="355" pos:column="17">message</name><op:operator pos:line="355" pos:column="24">.</op:operator><name pos:line="355" pos:column="25">AppendLine</name></name><argument_list pos:line="355" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="355" pos:column="36">"ProcessId="</lit:literal> <op:operator pos:line="355" pos:column="49">+</op:operator> <name><name pos:line="355" pos:column="51">eventCache</name><op:operator pos:line="355" pos:column="61">.</op:operator><name pos:line="355" pos:column="62">ProcessId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if pos:line="358" pos:column="13">if <condition pos:line="358" pos:column="16">(<expr><call><name pos:line="358" pos:column="17">IsEnabled</name><argument_list pos:line="358" pos:column="26">(<argument><expr><name><name pos:line="358" pos:column="27">TraceOptions</name><op:operator pos:line="358" pos:column="39">.</op:operator><name pos:line="358" pos:column="40">LogicalOperationStack</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="358" pos:column="63">
            <block pos:line="359" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="360" pos:column="17">message</name><op:operator pos:line="360" pos:column="24">.</op:operator><name pos:line="360" pos:column="25">Append</name></name><argument_list pos:line="360" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="360" pos:column="32">"LogicalOperationStack="</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="361" pos:column="17">var</name></type> <name pos:line="361" pos:column="21">operationStack</name> <init pos:line="361" pos:column="36">= <expr><name><name pos:line="361" pos:column="38">eventCache</name><op:operator pos:line="361" pos:column="48">.</op:operator><name pos:line="361" pos:column="49">LogicalOperationStack</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="362" pos:column="17">var</name></type> <name pos:line="362" pos:column="21">first</name> <init pos:line="362" pos:column="27">= <expr><lit:literal type="boolean" pos:line="362" pos:column="29">true</lit:literal></expr></init></decl>;</decl_stmt>
                <foreach pos:line="363" pos:column="17">foreach (<init><decl><type><name pos:line="363" pos:column="26">var</name></type> <name pos:line="363" pos:column="30">obj</name> <range pos:line="363" pos:column="34">in <expr><name pos:line="363" pos:column="37">operationStack</name></expr></range></decl></init>)
                <block pos:line="364" pos:column="17">{
                    <if pos:line="365" pos:column="21">if <condition pos:line="365" pos:column="24">(<expr><op:operator pos:line="365" pos:column="25">!</op:operator><name pos:line="365" pos:column="26">first</name></expr>)</condition><then pos:line="365" pos:column="32">
                    <block pos:line="366" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="367" pos:column="25">message</name><op:operator pos:line="367" pos:column="32">.</op:operator><name pos:line="367" pos:column="33">Append</name></name><argument_list pos:line="367" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="367" pos:column="40">", "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else pos:line="369" pos:column="21">else
                    <block pos:line="370" pos:column="21">{
                        <expr_stmt><expr><name pos:line="371" pos:column="25">first</name> <op:operator pos:line="371" pos:column="31">=</op:operator> <lit:literal type="boolean" pos:line="371" pos:column="33">false</lit:literal></expr>;</expr_stmt>
                    }</block></else></if>

                    <expr_stmt><expr><call><name><name pos:line="374" pos:column="21">message</name><op:operator pos:line="374" pos:column="28">.</op:operator><name pos:line="374" pos:column="29">Append</name></name><argument_list pos:line="374" pos:column="35">(<argument><expr><name pos:line="374" pos:column="36">obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>

                <expr_stmt><expr><call><name><name pos:line="377" pos:column="17">message</name><op:operator pos:line="377" pos:column="24">.</op:operator><name pos:line="377" pos:column="25">AppendLine</name></name><argument_list pos:line="377" pos:column="35">(<argument><expr><name><name pos:line="377" pos:column="36">string</name><op:operator pos:line="377" pos:column="42">.</op:operator><name pos:line="377" pos:column="43">Empty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if pos:line="380" pos:column="13">if <condition pos:line="380" pos:column="16">(<expr><call><name pos:line="380" pos:column="17">IsEnabled</name><argument_list pos:line="380" pos:column="26">(<argument><expr><name><name pos:line="380" pos:column="27">TraceOptions</name><op:operator pos:line="380" pos:column="39">.</op:operator><name pos:line="380" pos:column="40">ThreadId</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="380" pos:column="50">
            <block pos:line="381" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="382" pos:column="17">message</name><op:operator pos:line="382" pos:column="24">.</op:operator><name pos:line="382" pos:column="25">AppendLine</name></name><argument_list pos:line="382" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="382" pos:column="36">"ThreadId="</lit:literal> <op:operator pos:line="382" pos:column="48">+</op:operator> <name><name pos:line="382" pos:column="50">eventCache</name><op:operator pos:line="382" pos:column="60">.</op:operator><name pos:line="382" pos:column="61">ThreadId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if pos:line="385" pos:column="13">if <condition pos:line="385" pos:column="16">(<expr><call><name pos:line="385" pos:column="17">IsEnabled</name><argument_list pos:line="385" pos:column="26">(<argument><expr><name><name pos:line="385" pos:column="27">TraceOptions</name><op:operator pos:line="385" pos:column="39">.</op:operator><name pos:line="385" pos:column="40">DateTime</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="385" pos:column="50">
            <block pos:line="386" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="387" pos:column="17">message</name><op:operator pos:line="387" pos:column="24">.</op:operator><name pos:line="387" pos:column="25">AppendLine</name></name><argument_list pos:line="387" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="387" pos:column="36">"DateTime="</lit:literal> <op:operator pos:line="387" pos:column="48">+</op:operator> <call><name><name pos:line="387" pos:column="50">eventCache</name><op:operator pos:line="387" pos:column="60">.</op:operator><name pos:line="387" pos:column="61">DateTime</name><op:operator pos:line="387" pos:column="69">.</op:operator><name pos:line="387" pos:column="70">ToString</name></name><argument_list pos:line="387" pos:column="78">(<argument><expr><lit:literal type="string" pos:line="387" pos:column="79">"o"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="387" pos:column="84">CultureInfo</name><op:operator pos:line="387" pos:column="95">.</op:operator><name pos:line="387" pos:column="96">InvariantCulture</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if pos:line="390" pos:column="13">if <condition pos:line="390" pos:column="16">(<expr><call><name pos:line="390" pos:column="17">IsEnabled</name><argument_list pos:line="390" pos:column="26">(<argument><expr><name><name pos:line="390" pos:column="27">TraceOptions</name><op:operator pos:line="390" pos:column="39">.</op:operator><name pos:line="390" pos:column="40">Timestamp</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="390" pos:column="51">
            <block pos:line="391" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="392" pos:column="17">message</name><op:operator pos:line="392" pos:column="24">.</op:operator><name pos:line="392" pos:column="25">AppendLine</name></name><argument_list pos:line="392" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="392" pos:column="36">"Timestamp="</lit:literal> <op:operator pos:line="392" pos:column="49">+</op:operator> <name><name pos:line="392" pos:column="51">eventCache</name><op:operator pos:line="392" pos:column="61">.</op:operator><name pos:line="392" pos:column="62">Timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if pos:line="395" pos:column="13">if <condition pos:line="395" pos:column="16">(<expr><call><name pos:line="395" pos:column="17">IsEnabled</name><argument_list pos:line="395" pos:column="26">(<argument><expr><name><name pos:line="395" pos:column="27">TraceOptions</name><op:operator pos:line="395" pos:column="39">.</op:operator><name pos:line="395" pos:column="40">Callstack</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="395" pos:column="51">
            <block pos:line="396" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="397" pos:column="17">message</name><op:operator pos:line="397" pos:column="24">.</op:operator><name pos:line="397" pos:column="25">AppendLine</name></name><argument_list pos:line="397" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="397" pos:column="36">"Callstack="</lit:literal> <op:operator pos:line="397" pos:column="49">+</op:operator> <name><name pos:line="397" pos:column="51">eventCache</name><op:operator pos:line="397" pos:column="61">.</op:operator><name pos:line="397" pos:column="62">Callstack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <return pos:line="400" pos:column="13">return <expr><call><name><name pos:line="400" pos:column="20">message</name><op:operator pos:line="400" pos:column="27">.</op:operator><name pos:line="400" pos:column="28">ToString</name></name><argument_list pos:line="400" pos:column="36">()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="403" pos:column="9">private</specifier> <name pos:line="403" pos:column="17">bool</name></type> <name pos:line="403" pos:column="22">IsEnabled</name><parameter_list pos:line="403" pos:column="31">(<param><decl><type><name pos:line="403" pos:column="32">TraceOptions</name></type> <name pos:line="403" pos:column="45">opts</name></decl></param>)</parameter_list>
        <block pos:line="404" pos:column="9">{
            <return pos:line="405" pos:column="13">return <expr><op:operator pos:line="405" pos:column="20">(</op:operator><name pos:line="405" pos:column="21">opts</name> <op:operator pos:line="405" pos:column="26">&amp;</op:operator> <name pos:line="405" pos:column="28">TraceOutputOptions</name><op:operator pos:line="405" pos:column="46">)</op:operator> <op:operator pos:line="405" pos:column="48">!=</op:operator> <lit:literal type="number" pos:line="405" pos:column="51">0</lit:literal></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="408" pos:column="9">private</specifier> <name pos:line="408" pos:column="17">string</name></type> <name pos:line="408" pos:column="24">DeriveCategory</name><parameter_list pos:line="408" pos:column="38">(<param><decl><type><name pos:line="408" pos:column="39">string</name></type> <name pos:line="408" pos:column="46">category</name></decl></param>)</parameter_list>
        <block pos:line="409" pos:column="9">{
            <if pos:line="410" pos:column="13">if <condition pos:line="410" pos:column="16">(<expr><op:operator pos:line="410" pos:column="17">!</op:operator><call><name><name pos:line="410" pos:column="18">string</name><op:operator pos:line="410" pos:column="24">.</op:operator><name pos:line="410" pos:column="25">IsNullOrEmpty</name></name><argument_list pos:line="410" pos:column="38">(<argument><expr><name pos:line="410" pos:column="39">category</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="410" pos:column="49">
            <block pos:line="411" pos:column="13">{
                <switch pos:line="412" pos:column="17">switch <condition pos:line="412" pos:column="24">(<expr><call><name><name pos:line="412" pos:column="25">category</name><op:operator pos:line="412" pos:column="33">.</op:operator><name pos:line="412" pos:column="34">ToLower</name></name><argument_list pos:line="412" pos:column="41">()</argument_list></call></expr>)</condition>
                <block pos:line="413" pos:column="17">{
                    <case pos:line="414" pos:column="21">case <expr><lit:literal type="string" pos:line="414" pos:column="26">"warning"</lit:literal></expr>:
                    </case><case pos:line="415" pos:column="21">case <expr><lit:literal type="string" pos:line="415" pos:column="26">"warn"</lit:literal></expr>:
                        <return pos:line="416" pos:column="25">return <expr><name><name pos:line="416" pos:column="32">FormattingKeywords</name><op:operator pos:line="416" pos:column="50">.</op:operator><name pos:line="416" pos:column="51">Warn</name></name></expr>;</return>
                    </case><case pos:line="417" pos:column="21">case <expr><lit:literal type="string" pos:line="417" pos:column="26">"information"</lit:literal></expr>:
                    </case><case pos:line="418" pos:column="21">case <expr><lit:literal type="string" pos:line="418" pos:column="26">"info"</lit:literal></expr>:
                        <return pos:line="419" pos:column="25">return <expr><name><name pos:line="419" pos:column="32">FormattingKeywords</name><op:operator pos:line="419" pos:column="50">.</op:operator><name pos:line="419" pos:column="51">Info</name></name></expr>;</return>
                    </case><case pos:line="420" pos:column="21">case <expr><lit:literal type="string" pos:line="420" pos:column="26">"error"</lit:literal></expr>:
                        <return pos:line="421" pos:column="25">return <expr><name><name pos:line="421" pos:column="32">FormattingKeywords</name><op:operator pos:line="421" pos:column="50">.</op:operator><name pos:line="421" pos:column="51">Error</name></name></expr>;</return>
                    </case><case pos:line="422" pos:column="21">case <expr><lit:literal type="string" pos:line="422" pos:column="26">"fail"</lit:literal></expr>:
                        <return pos:line="423" pos:column="25">return <expr><name><name pos:line="423" pos:column="32">FormattingKeywords</name><op:operator pos:line="423" pos:column="50">.</op:operator><name pos:line="423" pos:column="51">Fail</name></name></expr>;</return>
                    </case><case pos:line="424" pos:column="21">case <expr><lit:literal type="string" pos:line="424" pos:column="26">"quiet"</lit:literal></expr>:
                        <return pos:line="425" pos:column="25">return <expr><name><name pos:line="425" pos:column="32">FormattingKeywords</name><op:operator pos:line="425" pos:column="50">.</op:operator><name pos:line="425" pos:column="51">Quiet</name></name></expr>;</return>
                    </case><case pos:line="426" pos:column="21">case <expr><lit:literal type="string" pos:line="426" pos:column="26">"timing"</lit:literal></expr>:
                    </case><case pos:line="427" pos:column="21">case <expr><lit:literal type="string" pos:line="427" pos:column="26">"loading"</lit:literal></expr>:
                        <return pos:line="428" pos:column="25">return <expr><name><name pos:line="428" pos:column="32">FormattingKeywords</name><op:operator pos:line="428" pos:column="50">.</op:operator><name pos:line="428" pos:column="51">Loading</name></name></expr>;</return>
                    </case><case pos:line="429" pos:column="21">case <expr><lit:literal type="string" pos:line="429" pos:column="26">"selected"</lit:literal></expr>:
                        <return pos:line="430" pos:column="25">return <expr><name><name pos:line="430" pos:column="32">FormattingKeywords</name><op:operator pos:line="430" pos:column="50">.</op:operator><name pos:line="430" pos:column="51">Selected</name></name></expr>;</return>
                    </case><case pos:line="431" pos:column="21">case <expr><lit:literal type="string" pos:line="431" pos:column="26">"aspx.page"</lit:literal></expr>:
                    </case><case pos:line="432" pos:column="21">case <expr><lit:literal type="string" pos:line="432" pos:column="26">"system"</lit:literal></expr>:
                    </case><case pos:line="433" pos:column="21">case <expr><lit:literal type="string" pos:line="433" pos:column="26">"ms"</lit:literal></expr>:
                        <return pos:line="434" pos:column="25">return <expr><name><name pos:line="434" pos:column="32">FormattingKeywords</name><op:operator pos:line="434" pos:column="50">.</op:operator><name pos:line="434" pos:column="51">Ms</name></name></expr>;</return>
                </case>}</block></switch> 
            }</block></then></if>

            <return pos:line="438" pos:column="13">return <expr><name pos:line="438" pos:column="20">null</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="441" pos:column="9">private</specifier> <name pos:line="441" pos:column="17">string</name></type> <name pos:line="441" pos:column="24">DeriveCategory</name><parameter_list pos:line="441" pos:column="38">(<param><decl><type><name pos:line="441" pos:column="39">TraceEventType</name></type> <name pos:line="441" pos:column="54">type</name></decl></param>)</parameter_list>
        <block pos:line="442" pos:column="9">{
            <switch pos:line="443" pos:column="13">switch <condition pos:line="443" pos:column="20">(<expr><name pos:line="443" pos:column="21">type</name></expr>)</condition>
            <block pos:line="444" pos:column="13">{
                <case pos:line="445" pos:column="17">case <expr><name><name pos:line="445" pos:column="22">TraceEventType</name><op:operator pos:line="445" pos:column="36">.</op:operator><name pos:line="445" pos:column="37">Error</name></name></expr>:
                    <return pos:line="446" pos:column="21">return <expr><name><name pos:line="446" pos:column="28">FormattingKeywords</name><op:operator pos:line="446" pos:column="46">.</op:operator><name pos:line="446" pos:column="47">Error</name></name></expr>;</return>
                </case><case pos:line="447" pos:column="17">case <expr><name><name pos:line="447" pos:column="22">TraceEventType</name><op:operator pos:line="447" pos:column="36">.</op:operator><name pos:line="447" pos:column="37">Critical</name></name></expr>:
                    <return pos:line="448" pos:column="21">return <expr><name><name pos:line="448" pos:column="28">FormattingKeywords</name><op:operator pos:line="448" pos:column="46">.</op:operator><name pos:line="448" pos:column="47">Fail</name></name></expr>;</return>
                </case><case pos:line="449" pos:column="17">case <expr><name><name pos:line="449" pos:column="22">TraceEventType</name><op:operator pos:line="449" pos:column="36">.</op:operator><name pos:line="449" pos:column="37">Warning</name></name></expr>:
                    <return pos:line="450" pos:column="21">return <expr><name><name pos:line="450" pos:column="28">FormattingKeywords</name><op:operator pos:line="450" pos:column="46">.</op:operator><name pos:line="450" pos:column="47">Warn</name></name></expr>;</return>
                </case><case pos:line="451" pos:column="17">case <expr><name><name pos:line="451" pos:column="22">TraceEventType</name><op:operator pos:line="451" pos:column="36">.</op:operator><name pos:line="451" pos:column="37">Information</name></name></expr>:
                    <return pos:line="452" pos:column="21">return <expr><name><name pos:line="452" pos:column="28">FormattingKeywords</name><op:operator pos:line="452" pos:column="46">.</op:operator><name pos:line="452" pos:column="47">Info</name></name></expr>;</return>
            </case>}</block></switch>

            <return pos:line="455" pos:column="13">return <expr><name pos:line="455" pos:column="20">null</name></expr>;</return>
        }</block></function> 
    }</block></class>
}</block></namespace>
</unit>
