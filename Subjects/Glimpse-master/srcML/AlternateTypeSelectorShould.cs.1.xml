<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Core\Extensibility\AlternateTypeSelectorShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Diagnostics</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Castle</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">DynamicProxy</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Core</name><op:operator pos:line="4" pos:column="19">.</op:operator><name pos:line="4" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="5" pos:column="1">using <name pos:line="5" pos:column="7">Moq</name>;</using>
<using pos:line="6" pos:column="1">using <name pos:line="6" pos:column="7">Xunit</name>;</using>

<namespace pos:line="8" pos:column="1">namespace <name><name pos:line="8" pos:column="11">Glimpse</name><op:operator pos:line="8" pos:column="18">.</op:operator><name pos:line="8" pos:column="19">Test</name><op:operator pos:line="8" pos:column="23">.</op:operator><name pos:line="8" pos:column="24">Core</name><op:operator pos:line="8" pos:column="28">.</op:operator><name pos:line="8" pos:column="29">Extensibility</name></name>
<block pos:line="9" pos:column="1">{
    <class><specifier pos:line="10" pos:column="5">public</specifier> class <name pos:line="10" pos:column="18">AlternateTypeSelectorShould</name>
    <block pos:line="11" pos:column="5">{
        <function><type><attribute pos:line="12" pos:column="9">[<expr><name pos:line="12" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="13" pos:column="9">public</specifier> <name pos:line="13" pos:column="16">void</name></type> <name pos:line="13" pos:column="21">ReturnMatchingInterceptors</name><parameter_list pos:line="13" pos:column="47">()</parameter_list>
        <block pos:line="14" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="15" pos:column="13">var</name></type> <name pos:line="15" pos:column="17">loggerMock</name> <init pos:line="15" pos:column="28">= <expr><op:operator pos:line="15" pos:column="30">new</op:operator> <call><name><name pos:line="15" pos:column="34">Mock</name><argument_list pos:line="15" pos:column="38">&lt;<argument><name pos:line="15" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="15" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="16" pos:column="13">var</name></type> <name pos:line="16" pos:column="17">alternateMock1</name> <init pos:line="16" pos:column="32">= <expr><op:operator pos:line="16" pos:column="34">new</op:operator> <call><name><name pos:line="16" pos:column="38">Mock</name><argument_list pos:line="16" pos:column="42">&lt;<argument><name pos:line="16" pos:column="43">IAlternateMethod</name></argument>&gt;</argument_list></name><argument_list pos:line="16" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="17" pos:column="13">alternateMock1</name><op:operator pos:line="17" pos:column="27">.</op:operator><name pos:line="17" pos:column="28">Setup</name></name><argument_list pos:line="17" pos:column="33">(<argument><expr><lambda><name pos:line="17" pos:column="34">a</name> <op:operator pos:line="17" pos:column="36">=&gt;</op:operator> <name><name pos:line="17" pos:column="39">a</name><op:operator pos:line="17" pos:column="40">.</op:operator><name pos:line="17" pos:column="41">MethodToImplement</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="17" pos:column="59">.</op:operator><call><name pos:line="17" pos:column="60">Returns</name><argument_list pos:line="17" pos:column="67">(<argument><expr><call><name pos:line="17" pos:column="68">typeof</name><argument_list pos:line="17" pos:column="74">(<argument><expr><name pos:line="17" pos:column="75">IDisposable</name></expr></argument>)</argument_list></call><op:operator pos:line="17" pos:column="87">.</op:operator><call><name pos:line="17" pos:column="88">GetMethod</name><argument_list pos:line="17" pos:column="97">(<argument><expr><lit:literal type="string" pos:line="17" pos:column="98">"Dispose"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="19" pos:column="13">var</name></type> <name pos:line="19" pos:column="17">alternateMock2</name> <init pos:line="19" pos:column="32">= <expr><op:operator pos:line="19" pos:column="34">new</op:operator> <call><name><name pos:line="19" pos:column="38">Mock</name><argument_list pos:line="19" pos:column="42">&lt;<argument><name pos:line="19" pos:column="43">IAlternateMethod</name></argument>&gt;</argument_list></name><argument_list pos:line="19" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="20" pos:column="13">alternateMock2</name><op:operator pos:line="20" pos:column="27">.</op:operator><name pos:line="20" pos:column="28">Setup</name></name><argument_list pos:line="20" pos:column="33">(<argument><expr><lambda><name pos:line="20" pos:column="34">a</name> <op:operator pos:line="20" pos:column="36">=&gt;</op:operator> <name><name pos:line="20" pos:column="39">a</name><op:operator pos:line="20" pos:column="40">.</op:operator><name pos:line="20" pos:column="41">MethodToImplement</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="20" pos:column="59">.</op:operator><call><name pos:line="20" pos:column="60">Returns</name><argument_list pos:line="20" pos:column="67">(<argument><expr><call><name pos:line="20" pos:column="68">typeof</name><argument_list pos:line="20" pos:column="74">(<argument><expr><name pos:line="20" pos:column="75">AlternateTypeSelectorShould</name></expr></argument>)</argument_list></call><op:operator pos:line="20" pos:column="103">.</op:operator><call><name pos:line="20" pos:column="104">GetMethod</name><argument_list pos:line="20" pos:column="113">(<argument><expr><lit:literal type="string" pos:line="20" pos:column="114">"ReturnMatchingInterceptors"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="22" pos:column="13">var</name></type> <name pos:line="22" pos:column="17">selector</name> <init pos:line="22" pos:column="26">= <expr><op:operator pos:line="22" pos:column="28">new</op:operator> <call><name pos:line="22" pos:column="32">AlternateTypeSelector</name><argument_list pos:line="22" pos:column="53">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="23" pos:column="13">var</name></type> <name pos:line="23" pos:column="17">interceptors</name> <init pos:line="23" pos:column="30">= <expr><op:operator pos:line="23" pos:column="32">new</op:operator> <name><name pos:line="23" pos:column="36">IInterceptor</name><index pos:line="23" pos:column="48">[]</index></name>
                                   <block pos:line="24" pos:column="36">{
                                       <expr><op:operator pos:line="25" pos:column="40">new</op:operator> <call><name pos:line="25" pos:column="44">AlternateTypeToCastleInterceptorAdapter</name><argument_list pos:line="25" pos:column="83">(<argument><expr><name><name pos:line="25" pos:column="84">alternateMock1</name><op:operator pos:line="25" pos:column="98">.</op:operator><name pos:line="25" pos:column="99">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="107">loggerMock</name><op:operator pos:line="25" pos:column="117">.</op:operator><name pos:line="25" pos:column="118">Object</name></name></expr></argument>, <argument><expr><op:operator pos:line="25" pos:column="126">new</op:operator> <call><name><name pos:line="25" pos:column="130">Mock</name><argument_list pos:line="25" pos:column="134">&lt;<argument><name pos:line="25" pos:column="135">IMessageBroker</name></argument>&gt;</argument_list></name><argument_list pos:line="25" pos:column="150">()</argument_list></call><op:operator pos:line="25" pos:column="152">.</op:operator><name pos:line="25" pos:column="153">Object</name></expr></argument>, <argument><expr><op:operator pos:line="25" pos:column="161">new</op:operator> <call><name><name pos:line="25" pos:column="165">Mock</name><argument_list pos:line="25" pos:column="169">&lt;<argument><name pos:line="25" pos:column="170">IProxyFactory</name></argument>&gt;</argument_list></name><argument_list pos:line="25" pos:column="184">()</argument_list></call><op:operator pos:line="25" pos:column="186">.</op:operator><name pos:line="25" pos:column="187">Object</name></expr></argument>, <argument><expr><lambda><parameter_list pos:line="25" pos:column="195">()</parameter_list> <op:operator pos:line="25" pos:column="198">=&gt;</op:operator> <op:operator pos:line="25" pos:column="201">new</op:operator> <call><name pos:line="25" pos:column="205">ExecutionTimer</name><argument_list pos:line="25" pos:column="219">(<argument><expr><call><name><name pos:line="25" pos:column="220">Stopwatch</name><op:operator pos:line="25" pos:column="229">.</op:operator><name pos:line="25" pos:column="230">StartNew</name></name><argument_list pos:line="25" pos:column="238">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><lambda><parameter_list pos:line="25" pos:column="243">()</parameter_list> <op:operator pos:line="25" pos:column="246">=&gt;</op:operator> <name><name pos:line="25" pos:column="249">RuntimePolicy</name><op:operator pos:line="25" pos:column="262">.</op:operator><name pos:line="25" pos:column="263">On</name></name></lambda></expr></argument>)</argument_list></call></expr>,
                                       <expr><op:operator pos:line="26" pos:column="40">new</op:operator> <call><name pos:line="26" pos:column="44">AlternateTypeToCastleInterceptorAdapter</name><argument_list pos:line="26" pos:column="83">(<argument><expr><name><name pos:line="26" pos:column="84">alternateMock2</name><op:operator pos:line="26" pos:column="98">.</op:operator><name pos:line="26" pos:column="99">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="107">loggerMock</name><op:operator pos:line="26" pos:column="117">.</op:operator><name pos:line="26" pos:column="118">Object</name></name></expr></argument>, <argument><expr><op:operator pos:line="26" pos:column="126">new</op:operator> <call><name><name pos:line="26" pos:column="130">Mock</name><argument_list pos:line="26" pos:column="134">&lt;<argument><name pos:line="26" pos:column="135">IMessageBroker</name></argument>&gt;</argument_list></name><argument_list pos:line="26" pos:column="150">()</argument_list></call><op:operator pos:line="26" pos:column="152">.</op:operator><name pos:line="26" pos:column="153">Object</name></expr></argument>, <argument><expr><op:operator pos:line="26" pos:column="161">new</op:operator> <call><name><name pos:line="26" pos:column="165">Mock</name><argument_list pos:line="26" pos:column="169">&lt;<argument><name pos:line="26" pos:column="170">IProxyFactory</name></argument>&gt;</argument_list></name><argument_list pos:line="26" pos:column="184">()</argument_list></call><op:operator pos:line="26" pos:column="186">.</op:operator><name pos:line="26" pos:column="187">Object</name></expr></argument>, <argument><expr><lambda><parameter_list pos:line="26" pos:column="195">()</parameter_list> <op:operator pos:line="26" pos:column="198">=&gt;</op:operator> <op:operator pos:line="26" pos:column="201">new</op:operator> <call><name pos:line="26" pos:column="205">ExecutionTimer</name><argument_list pos:line="26" pos:column="219">(<argument><expr><call><name><name pos:line="26" pos:column="220">Stopwatch</name><op:operator pos:line="26" pos:column="229">.</op:operator><name pos:line="26" pos:column="230">StartNew</name></name><argument_list pos:line="26" pos:column="238">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><lambda><parameter_list pos:line="26" pos:column="243">()</parameter_list> <op:operator pos:line="26" pos:column="246">=&gt;</op:operator> <name><name pos:line="26" pos:column="249">RuntimePolicy</name><op:operator pos:line="26" pos:column="262">.</op:operator><name pos:line="26" pos:column="263">On</name></name></lambda></expr></argument>)</argument_list></call></expr>
                                   }</block></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="29" pos:column="13">var</name></type> <name pos:line="29" pos:column="17">result</name> <init pos:line="29" pos:column="24">= <expr><call><name><name pos:line="29" pos:column="26">selector</name><op:operator pos:line="29" pos:column="34">.</op:operator><name pos:line="29" pos:column="35">SelectInterceptors</name></name><argument_list pos:line="29" pos:column="53">(<argument><expr><name pos:line="29" pos:column="54">null</name></expr></argument>, <argument><expr><call><name pos:line="29" pos:column="60">typeof</name><argument_list pos:line="29" pos:column="66">(<argument><expr><name pos:line="29" pos:column="67">IDisposable</name></expr></argument>)</argument_list></call><op:operator pos:line="29" pos:column="79">.</op:operator><call><name pos:line="29" pos:column="80">GetMethod</name><argument_list pos:line="29" pos:column="89">(<argument><expr><lit:literal type="string" pos:line="29" pos:column="90">"Dispose"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="29" pos:column="102">interceptors</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="31" pos:column="13">Assert</name><op:operator pos:line="31" pos:column="19">.</op:operator><name pos:line="31" pos:column="20">Equal</name></name><argument_list pos:line="31" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="31" pos:column="26">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="29">result</name><op:operator pos:line="31" pos:column="35">.</op:operator><name pos:line="31" pos:column="36">Length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="34" pos:column="9">[<expr><name pos:line="34" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="35" pos:column="9">public</specifier> <name pos:line="35" pos:column="16">void</name></type> <name pos:line="35" pos:column="21">ReturnEmptyArrayWithoutMatch</name><parameter_list pos:line="35" pos:column="49">()</parameter_list>
        <block pos:line="36" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="37" pos:column="13">var</name></type> <name pos:line="37" pos:column="17">loggerMock</name> <init pos:line="37" pos:column="28">= <expr><op:operator pos:line="37" pos:column="30">new</op:operator> <call><name><name pos:line="37" pos:column="34">Mock</name><argument_list pos:line="37" pos:column="38">&lt;<argument><name pos:line="37" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="37" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="38" pos:column="13">var</name></type> <name pos:line="38" pos:column="17">alternateMock1</name> <init pos:line="38" pos:column="32">= <expr><op:operator pos:line="38" pos:column="34">new</op:operator> <call><name><name pos:line="38" pos:column="38">Mock</name><argument_list pos:line="38" pos:column="42">&lt;<argument><name pos:line="38" pos:column="43">IAlternateMethod</name></argument>&gt;</argument_list></name><argument_list pos:line="38" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="39" pos:column="13">alternateMock1</name><op:operator pos:line="39" pos:column="27">.</op:operator><name pos:line="39" pos:column="28">Setup</name></name><argument_list pos:line="39" pos:column="33">(<argument><expr><lambda><name pos:line="39" pos:column="34">a</name> <op:operator pos:line="39" pos:column="36">=&gt;</op:operator> <name><name pos:line="39" pos:column="39">a</name><op:operator pos:line="39" pos:column="40">.</op:operator><name pos:line="39" pos:column="41">MethodToImplement</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="39" pos:column="59">.</op:operator><call><name pos:line="39" pos:column="60">Returns</name><argument_list pos:line="39" pos:column="67">(<argument><expr><call><name pos:line="39" pos:column="68">typeof</name><argument_list pos:line="39" pos:column="74">(<argument><expr><name pos:line="39" pos:column="75">IDisposable</name></expr></argument>)</argument_list></call><op:operator pos:line="39" pos:column="87">.</op:operator><call><name pos:line="39" pos:column="88">GetMethod</name><argument_list pos:line="39" pos:column="97">(<argument><expr><lit:literal type="string" pos:line="39" pos:column="98">"Dispose"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="41" pos:column="13">var</name></type> <name pos:line="41" pos:column="17">alternateMock2</name> <init pos:line="41" pos:column="32">= <expr><op:operator pos:line="41" pos:column="34">new</op:operator> <call><name><name pos:line="41" pos:column="38">Mock</name><argument_list pos:line="41" pos:column="42">&lt;<argument><name pos:line="41" pos:column="43">IAlternateMethod</name></argument>&gt;</argument_list></name><argument_list pos:line="41" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="42" pos:column="13">alternateMock2</name><op:operator pos:line="42" pos:column="27">.</op:operator><name pos:line="42" pos:column="28">Setup</name></name><argument_list pos:line="42" pos:column="33">(<argument><expr><lambda><name pos:line="42" pos:column="34">a</name> <op:operator pos:line="42" pos:column="36">=&gt;</op:operator> <name><name pos:line="42" pos:column="39">a</name><op:operator pos:line="42" pos:column="40">.</op:operator><name pos:line="42" pos:column="41">MethodToImplement</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="42" pos:column="59">.</op:operator><call><name pos:line="42" pos:column="60">Returns</name><argument_list pos:line="42" pos:column="67">(<argument><expr><call><name pos:line="42" pos:column="68">typeof</name><argument_list pos:line="42" pos:column="74">(<argument><expr><name pos:line="42" pos:column="75">AlternateTypeSelectorShould</name></expr></argument>)</argument_list></call><op:operator pos:line="42" pos:column="103">.</op:operator><call><name pos:line="42" pos:column="104">GetMethod</name><argument_list pos:line="42" pos:column="113">(<argument><expr><lit:literal type="string" pos:line="42" pos:column="114">"ReturnMatchingInterceptors"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="44" pos:column="13">var</name></type> <name pos:line="44" pos:column="17">interceptors</name> <init pos:line="44" pos:column="30">= <expr><op:operator pos:line="44" pos:column="32">new</op:operator> <name><name pos:line="44" pos:column="36">IInterceptor</name><index pos:line="44" pos:column="48">[]</index></name>
                                    <block pos:line="45" pos:column="37">{
                                        <expr><op:operator pos:line="46" pos:column="41">new</op:operator> <call><name pos:line="46" pos:column="45">AlternateTypeToCastleInterceptorAdapter</name><argument_list pos:line="46" pos:column="84">(<argument><expr><name><name pos:line="46" pos:column="85">alternateMock1</name><op:operator pos:line="46" pos:column="99">.</op:operator><name pos:line="46" pos:column="100">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="108">loggerMock</name><op:operator pos:line="46" pos:column="118">.</op:operator><name pos:line="46" pos:column="119">Object</name></name></expr></argument>, <argument><expr><op:operator pos:line="46" pos:column="127">new</op:operator> <call><name><name pos:line="46" pos:column="131">Mock</name><argument_list pos:line="46" pos:column="135">&lt;<argument><name pos:line="46" pos:column="136">IMessageBroker</name></argument>&gt;</argument_list></name><argument_list pos:line="46" pos:column="151">()</argument_list></call><op:operator pos:line="46" pos:column="153">.</op:operator><name pos:line="46" pos:column="154">Object</name></expr></argument>, <argument><expr><op:operator pos:line="46" pos:column="162">new</op:operator> <call><name><name pos:line="46" pos:column="166">Mock</name><argument_list pos:line="46" pos:column="170">&lt;<argument><name pos:line="46" pos:column="171">IProxyFactory</name></argument>&gt;</argument_list></name><argument_list pos:line="46" pos:column="185">()</argument_list></call><op:operator pos:line="46" pos:column="187">.</op:operator><name pos:line="46" pos:column="188">Object</name></expr></argument>, <argument><expr><lambda><parameter_list pos:line="46" pos:column="196">()</parameter_list> <op:operator pos:line="46" pos:column="199">=&gt;</op:operator> <op:operator pos:line="46" pos:column="202">new</op:operator> <call><name pos:line="46" pos:column="206">ExecutionTimer</name><argument_list pos:line="46" pos:column="220">(<argument><expr><call><name><name pos:line="46" pos:column="221">Stopwatch</name><op:operator pos:line="46" pos:column="230">.</op:operator><name pos:line="46" pos:column="231">StartNew</name></name><argument_list pos:line="46" pos:column="239">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><lambda><parameter_list pos:line="46" pos:column="244">()</parameter_list> <op:operator pos:line="46" pos:column="247">=&gt;</op:operator> <name><name pos:line="46" pos:column="250">RuntimePolicy</name><op:operator pos:line="46" pos:column="263">.</op:operator><name pos:line="46" pos:column="264">On</name></name></lambda></expr></argument>)</argument_list></call></expr>, <expr><op:operator pos:line="46" pos:column="269">new</op:operator> <call><name pos:line="46" pos:column="273">AlternateTypeToCastleInterceptorAdapter</name><argument_list pos:line="46" pos:column="312">(<argument><expr><name><name pos:line="46" pos:column="313">alternateMock2</name><op:operator pos:line="46" pos:column="327">.</op:operator><name pos:line="46" pos:column="328">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="336">loggerMock</name><op:operator pos:line="46" pos:column="346">.</op:operator><name pos:line="46" pos:column="347">Object</name></name></expr></argument>, <argument><expr><op:operator pos:line="46" pos:column="355">new</op:operator> <call><name><name pos:line="46" pos:column="359">Mock</name><argument_list pos:line="46" pos:column="363">&lt;<argument><name pos:line="46" pos:column="364">IMessageBroker</name></argument>&gt;</argument_list></name><argument_list pos:line="46" pos:column="379">()</argument_list></call><op:operator pos:line="46" pos:column="381">.</op:operator><name pos:line="46" pos:column="382">Object</name></expr></argument>, <argument><expr><op:operator pos:line="46" pos:column="390">new</op:operator> <call><name><name pos:line="46" pos:column="394">Mock</name><argument_list pos:line="46" pos:column="398">&lt;<argument><name pos:line="46" pos:column="399">IProxyFactory</name></argument>&gt;</argument_list></name><argument_list pos:line="46" pos:column="413">()</argument_list></call><op:operator pos:line="46" pos:column="415">.</op:operator><name pos:line="46" pos:column="416">Object</name></expr></argument>, <argument><expr><lambda><parameter_list pos:line="46" pos:column="424">()</parameter_list> <op:operator pos:line="46" pos:column="427">=&gt;</op:operator> <op:operator pos:line="46" pos:column="430">new</op:operator> <call><name pos:line="46" pos:column="434">ExecutionTimer</name><argument_list pos:line="46" pos:column="448">(<argument><expr><call><name><name pos:line="46" pos:column="449">Stopwatch</name><op:operator pos:line="46" pos:column="458">.</op:operator><name pos:line="46" pos:column="459">StartNew</name></name><argument_list pos:line="46" pos:column="467">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><lambda><parameter_list pos:line="46" pos:column="472">()</parameter_list> <op:operator pos:line="46" pos:column="475">=&gt;</op:operator> <name><name pos:line="46" pos:column="478">RuntimePolicy</name><op:operator pos:line="46" pos:column="491">.</op:operator><name pos:line="46" pos:column="492">On</name></name></lambda></expr></argument>)</argument_list></call></expr>
                                    }</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="48" pos:column="13">var</name></type> <name pos:line="48" pos:column="17">selector</name> <init pos:line="48" pos:column="26">= <expr><op:operator pos:line="48" pos:column="28">new</op:operator> <call><name pos:line="48" pos:column="32">AlternateTypeSelector</name><argument_list pos:line="48" pos:column="53">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="50" pos:column="13">var</name></type> <name pos:line="50" pos:column="17">result</name> <init pos:line="50" pos:column="24">= <expr><call><name><name pos:line="50" pos:column="26">selector</name><op:operator pos:line="50" pos:column="34">.</op:operator><name pos:line="50" pos:column="35">SelectInterceptors</name></name><argument_list pos:line="50" pos:column="53">(<argument><expr><name pos:line="50" pos:column="54">null</name></expr></argument>, <argument><expr><call><name pos:line="50" pos:column="60">typeof</name><argument_list pos:line="50" pos:column="66">(<argument><expr><name pos:line="50" pos:column="67">AlternateTypeSelectorShould</name></expr></argument>)</argument_list></call><op:operator pos:line="50" pos:column="95">.</op:operator><call><name pos:line="50" pos:column="96">GetMethod</name><argument_list pos:line="50" pos:column="105">(<argument><expr><lit:literal type="string" pos:line="50" pos:column="106">"ReturnEmptyArrayWithoutMatch"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="50" pos:column="139">interceptors</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="52" pos:column="13">Assert</name><op:operator pos:line="52" pos:column="19">.</op:operator><name pos:line="52" pos:column="20">Empty</name></name><argument_list pos:line="52" pos:column="25">(<argument><expr><name pos:line="52" pos:column="26">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
