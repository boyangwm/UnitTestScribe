<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Core\Resource\PopupResourceShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Linq</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Glimpse</name><op:operator pos:line="3" pos:column="14">.</op:operator><name pos:line="3" pos:column="15">Core</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Core</name><op:operator pos:line="4" pos:column="19">.</op:operator><name pos:line="4" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Glimpse</name><op:operator pos:line="5" pos:column="14">.</op:operator><name pos:line="5" pos:column="15">Core</name><op:operator pos:line="5" pos:column="19">.</op:operator><name pos:line="5" pos:column="20">Framework</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Glimpse</name><op:operator pos:line="6" pos:column="14">.</op:operator><name pos:line="6" pos:column="15">Core</name><op:operator pos:line="6" pos:column="19">.</op:operator><name pos:line="6" pos:column="20">Resource</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Glimpse</name><op:operator pos:line="7" pos:column="14">.</op:operator><name pos:line="7" pos:column="15">Core</name><op:operator pos:line="7" pos:column="19">.</op:operator><name pos:line="7" pos:column="20">ResourceResult</name></name>;</using>
<using pos:line="8" pos:column="1">using <name pos:line="8" pos:column="7">Moq</name>;</using>
<using pos:line="9" pos:column="1">using <name pos:line="9" pos:column="7">Xunit</name>;</using>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">Xunit</name><op:operator pos:line="10" pos:column="12">.</op:operator><name pos:line="10" pos:column="13">Extensions</name></name>;</using>

<namespace pos:line="12" pos:column="1">namespace <name><name pos:line="12" pos:column="11">Glimpse</name><op:operator pos:line="12" pos:column="18">.</op:operator><name pos:line="12" pos:column="19">Test</name><op:operator pos:line="12" pos:column="23">.</op:operator><name pos:line="12" pos:column="24">Core</name><op:operator pos:line="12" pos:column="28">.</op:operator><name pos:line="12" pos:column="29">Resource</name></name>
<block pos:line="13" pos:column="1">{
    <class><specifier pos:line="14" pos:column="5">public</specifier> class <name pos:line="14" pos:column="18">PopupResourceShould</name>
    <block pos:line="15" pos:column="5">{
        <function><type><attribute pos:line="16" pos:column="9">[<expr><name pos:line="16" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="17" pos:column="9">public</specifier> <name pos:line="17" pos:column="16">void</name></type> <name pos:line="17" pos:column="21">BeNamedProperly</name><parameter_list pos:line="17" pos:column="36">()</parameter_list>
        <block pos:line="18" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="19" pos:column="13">var</name></type> <name pos:line="19" pos:column="17">resource</name> <init pos:line="19" pos:column="26">= <expr><op:operator pos:line="19" pos:column="28">new</op:operator> <call><name pos:line="19" pos:column="32">PopupResource</name><argument_list pos:line="19" pos:column="45">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="21" pos:column="13">Assert</name><op:operator pos:line="21" pos:column="19">.</op:operator><name pos:line="21" pos:column="20">Equal</name></name><argument_list pos:line="21" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="21" pos:column="26">"glimpse_popup"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="43">resource</name><op:operator pos:line="21" pos:column="51">.</op:operator><name pos:line="21" pos:column="52">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="24" pos:column="9">[<expr><name pos:line="24" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="25" pos:column="9">public</specifier> <name pos:line="25" pos:column="16">void</name></type> <name pos:line="25" pos:column="21">ContainRequiredRequestIdParameter</name><parameter_list pos:line="25" pos:column="54">()</parameter_list>
        <block pos:line="26" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="27" pos:column="13">var</name></type> <name pos:line="27" pos:column="17">resource</name> <init pos:line="27" pos:column="26">= <expr><op:operator pos:line="27" pos:column="28">new</op:operator> <call><name pos:line="27" pos:column="32">PopupResource</name><argument_list pos:line="27" pos:column="45">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="29" pos:column="13">Assert</name><op:operator pos:line="29" pos:column="19">.</op:operator><name pos:line="29" pos:column="20">Contains</name></name><argument_list pos:line="29" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="29" pos:column="29">"requestId"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="29" pos:column="42">resource</name><op:operator pos:line="29" pos:column="50">.</op:operator><name pos:line="29" pos:column="51">Parameters</name><op:operator pos:line="29" pos:column="61">.</op:operator><name pos:line="29" pos:column="62">Where</name></name><argument_list pos:line="29" pos:column="67">(<argument><expr><lambda><name pos:line="29" pos:column="68">p</name> <op:operator pos:line="29" pos:column="70">=&gt;</op:operator> <name><name pos:line="29" pos:column="73">p</name><op:operator pos:line="29" pos:column="74">.</op:operator><name pos:line="29" pos:column="75">IsRequired</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="29" pos:column="86">.</op:operator><call><name pos:line="29" pos:column="87">Select</name><argument_list pos:line="29" pos:column="93">(<argument><expr><lambda><name pos:line="29" pos:column="94">p</name> <op:operator pos:line="29" pos:column="96">=&gt;</op:operator> <name><name pos:line="29" pos:column="99">p</name><op:operator pos:line="29" pos:column="100">.</op:operator><name pos:line="29" pos:column="101">Name</name></name></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="32" pos:column="9">[<expr><name pos:line="32" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="33" pos:column="9">public</specifier> <name pos:line="33" pos:column="16">void</name></type> <name pos:line="33" pos:column="21">ContainOptionalHashParameter</name><parameter_list pos:line="33" pos:column="49">()</parameter_list>
        <block pos:line="34" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="35" pos:column="13">var</name></type> <name pos:line="35" pos:column="17">resource</name> <init pos:line="35" pos:column="26">= <expr><op:operator pos:line="35" pos:column="28">new</op:operator> <call><name pos:line="35" pos:column="32">PopupResource</name><argument_list pos:line="35" pos:column="45">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="37" pos:column="13">Assert</name><op:operator pos:line="37" pos:column="19">.</op:operator><name pos:line="37" pos:column="20">Contains</name></name><argument_list pos:line="37" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="37" pos:column="29">"hash"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="37" pos:column="37">resource</name><op:operator pos:line="37" pos:column="45">.</op:operator><name pos:line="37" pos:column="46">Parameters</name><op:operator pos:line="37" pos:column="56">.</op:operator><name pos:line="37" pos:column="57">Select</name></name><argument_list pos:line="37" pos:column="63">(<argument><expr><lambda><name pos:line="37" pos:column="64">p</name> <op:operator pos:line="37" pos:column="66">=&gt;</op:operator> <name><name pos:line="37" pos:column="69">p</name><op:operator pos:line="37" pos:column="70">.</op:operator><name pos:line="37" pos:column="71">Name</name></name></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="40" pos:column="9">[<expr><name pos:line="40" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="41" pos:column="9">public</specifier> <name pos:line="41" pos:column="16">void</name></type> <name pos:line="41" pos:column="21">NotSupportNonPrivilegedExecution</name><parameter_list pos:line="41" pos:column="53">()</parameter_list>
        <block pos:line="42" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="43" pos:column="13">var</name></type> <name pos:line="43" pos:column="17">resource</name> <init pos:line="43" pos:column="26">= <expr><op:operator pos:line="43" pos:column="28">new</op:operator> <call><name pos:line="43" pos:column="32">PopupResource</name><argument_list pos:line="43" pos:column="45">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="44" pos:column="13">var</name></type> <name pos:line="44" pos:column="17">contextMock</name> <init pos:line="44" pos:column="29">= <expr><op:operator pos:line="44" pos:column="31">new</op:operator> <call><name><name pos:line="44" pos:column="35">Mock</name><argument_list pos:line="44" pos:column="39">&lt;<argument><name pos:line="44" pos:column="40">IResourceContext</name></argument>&gt;</argument_list></name><argument_list pos:line="44" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="46" pos:column="13">Assert</name><op:operator pos:line="46" pos:column="19">.</op:operator><name><name pos:line="46" pos:column="20">Throws</name><argument_list pos:line="46" pos:column="26">&lt;<argument><name pos:line="46" pos:column="27">NotSupportedException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="46" pos:column="49">(<argument><expr><lambda><parameter_list pos:line="46" pos:column="50">()</parameter_list> <op:operator pos:line="46" pos:column="53">=&gt;</op:operator> <call><name><name pos:line="46" pos:column="56">resource</name><op:operator pos:line="46" pos:column="64">.</op:operator><name pos:line="46" pos:column="65">Execute</name></name><argument_list pos:line="46" pos:column="72">(<argument><expr><name><name pos:line="46" pos:column="73">contextMock</name><op:operator pos:line="46" pos:column="84">.</op:operator><name pos:line="46" pos:column="85">Object</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="49" pos:column="9">[<expr><name pos:line="49" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="50" pos:column="9">public</specifier> <name pos:line="50" pos:column="16">void</name></type> <name pos:line="50" pos:column="21">ThrowWithInvalidContextParameter</name><parameter_list pos:line="50" pos:column="53">()</parameter_list>
        <block pos:line="51" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="52" pos:column="13">var</name></type> <name pos:line="52" pos:column="17">resource</name> <init pos:line="52" pos:column="26">= <expr><op:operator pos:line="52" pos:column="28">new</op:operator> <call><name pos:line="52" pos:column="32">PopupResource</name><argument_list pos:line="52" pos:column="45">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="53" pos:column="13">var</name></type> <name pos:line="53" pos:column="17">configMock</name> <init pos:line="53" pos:column="28">= <expr><op:operator pos:line="53" pos:column="30">new</op:operator> <call><name><name pos:line="53" pos:column="34">Mock</name><argument_list pos:line="53" pos:column="38">&lt;<argument><name pos:line="53" pos:column="39">IGlimpseConfiguration</name></argument>&gt;</argument_list></name><argument_list pos:line="53" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="55" pos:column="13">Assert</name><op:operator pos:line="55" pos:column="19">.</op:operator><name><name pos:line="55" pos:column="20">Throws</name><argument_list pos:line="55" pos:column="26">&lt;<argument><name pos:line="55" pos:column="27">ArgumentNullException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="55" pos:column="49">(<argument><expr><lambda><parameter_list pos:line="55" pos:column="50">()</parameter_list> <op:operator pos:line="55" pos:column="53">=&gt;</op:operator> <call><name><name pos:line="55" pos:column="56">resource</name><op:operator pos:line="55" pos:column="64">.</op:operator><name pos:line="55" pos:column="65">Execute</name></name><argument_list pos:line="55" pos:column="72">(<argument><expr><name pos:line="55" pos:column="73">null</name></expr></argument>, <argument><expr><name><name pos:line="55" pos:column="79">configMock</name><op:operator pos:line="55" pos:column="89">.</op:operator><name pos:line="55" pos:column="90">Object</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="58" pos:column="9">[<expr><name pos:line="58" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="59" pos:column="9">public</specifier> <name pos:line="59" pos:column="16">void</name></type> <name pos:line="59" pos:column="21">ThrowWithInvalidConfigParameter</name><parameter_list pos:line="59" pos:column="52">()</parameter_list>
        <block pos:line="60" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="61" pos:column="13">var</name></type> <name pos:line="61" pos:column="17">resource</name> <init pos:line="61" pos:column="26">= <expr><op:operator pos:line="61" pos:column="28">new</op:operator> <call><name pos:line="61" pos:column="32">PopupResource</name><argument_list pos:line="61" pos:column="45">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="62" pos:column="13">var</name></type> <name pos:line="62" pos:column="17">contextMock</name> <init pos:line="62" pos:column="29">= <expr><op:operator pos:line="62" pos:column="31">new</op:operator> <call><name><name pos:line="62" pos:column="35">Mock</name><argument_list pos:line="62" pos:column="39">&lt;<argument><name pos:line="62" pos:column="40">IResourceContext</name></argument>&gt;</argument_list></name><argument_list pos:line="62" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="64" pos:column="13">Assert</name><op:operator pos:line="64" pos:column="19">.</op:operator><name><name pos:line="64" pos:column="20">Throws</name><argument_list pos:line="64" pos:column="26">&lt;<argument><name pos:line="64" pos:column="27">ArgumentNullException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="64" pos:column="49">(<argument><expr><lambda><parameter_list pos:line="64" pos:column="50">()</parameter_list> <op:operator pos:line="64" pos:column="53">=&gt;</op:operator> <call><name><name pos:line="64" pos:column="56">resource</name><op:operator pos:line="64" pos:column="64">.</op:operator><name pos:line="64" pos:column="65">Execute</name></name><argument_list pos:line="64" pos:column="72">(<argument><expr><name><name pos:line="64" pos:column="73">contextMock</name><op:operator pos:line="64" pos:column="84">.</op:operator><name pos:line="64" pos:column="85">Object</name></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="93">null</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="67" pos:column="9">[<expr><name pos:line="67" pos:column="10">Theory</name></expr>]</attribute>
        <attribute pos:line="68" pos:column="9">[<expr><call><name pos:line="68" pos:column="10">InlineData</name><argument_list pos:line="68" pos:column="20">(<argument><expr><lit:literal type="string" pos:line="68" pos:column="21">"invalid guid"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="68" pos:column="37">true</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <attribute pos:line="69" pos:column="9">[<expr><call><name pos:line="69" pos:column="10">InlineData</name><argument_list pos:line="69" pos:column="20">(<argument><expr><name pos:line="69" pos:column="21">null</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="69" pos:column="27">true</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <attribute pos:line="70" pos:column="9">[<expr><call><name pos:line="70" pos:column="10">InlineData</name><argument_list pos:line="70" pos:column="20">(<argument><expr><lit:literal type="string" pos:line="70" pos:column="21">"no value"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="70" pos:column="33">false</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="71" pos:column="9">public</specifier> <name pos:line="71" pos:column="16">void</name></type> <name pos:line="71" pos:column="21">RejectInvalidRequestIdParameters</name><parameter_list pos:line="71" pos:column="53">(<param><decl><type><name pos:line="71" pos:column="54">string</name></type> <name pos:line="71" pos:column="61">value</name></decl></param>, <param><decl><type><name pos:line="71" pos:column="68">bool</name></type> <name pos:line="71" pos:column="73">hasValue</name></decl></param>)</parameter_list>
        <block pos:line="72" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="73" pos:column="13">var</name></type> <name pos:line="73" pos:column="17">resource</name> <init pos:line="73" pos:column="26">= <expr><op:operator pos:line="73" pos:column="28">new</op:operator> <call><name pos:line="73" pos:column="32">PopupResource</name><argument_list pos:line="73" pos:column="45">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="74" pos:column="13">var</name></type> <name pos:line="74" pos:column="17">contextMock</name> <init pos:line="74" pos:column="29">= <expr><op:operator pos:line="74" pos:column="31">new</op:operator> <call><name><name pos:line="74" pos:column="35">Mock</name><argument_list pos:line="74" pos:column="39">&lt;<argument><name pos:line="74" pos:column="40">IResourceContext</name></argument>&gt;</argument_list></name><argument_list pos:line="74" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="75" pos:column="13">contextMock</name><op:operator pos:line="75" pos:column="24">.</op:operator><name pos:line="75" pos:column="25">Setup</name></name><argument_list pos:line="75" pos:column="30">(<argument><expr><lambda><name pos:line="75" pos:column="31">c</name> <op:operator pos:line="75" pos:column="33">=&gt;</op:operator> <call><name><name pos:line="75" pos:column="36">c</name><op:operator pos:line="75" pos:column="37">.</op:operator><name pos:line="75" pos:column="38">Parameters</name><op:operator pos:line="75" pos:column="48">.</op:operator><name pos:line="75" pos:column="49">TryGetValue</name></name><argument_list pos:line="75" pos:column="60">(<argument><expr><lit:literal type="string" pos:line="75" pos:column="61">"requestId"</lit:literal></expr></argument>, <argument><expr pos:line="75" pos:column="74">out <name pos:line="75" pos:column="78">value</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="75" pos:column="85">.</op:operator><call><name pos:line="75" pos:column="86">Returns</name><argument_list pos:line="75" pos:column="93">(<argument><expr><name pos:line="75" pos:column="94">hasValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="76" pos:column="13">var</name></type> <name pos:line="76" pos:column="17">configMock</name> <init pos:line="76" pos:column="28">= <expr><op:operator pos:line="76" pos:column="30">new</op:operator> <call><name><name pos:line="76" pos:column="34">Mock</name><argument_list pos:line="76" pos:column="38">&lt;<argument><name pos:line="76" pos:column="39">IGlimpseConfiguration</name></argument>&gt;</argument_list></name><argument_list pos:line="76" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="78" pos:column="13">var</name></type> <name pos:line="78" pos:column="17">result</name> <init pos:line="78" pos:column="24">= <expr><call><name><name pos:line="78" pos:column="26">resource</name><op:operator pos:line="78" pos:column="34">.</op:operator><name pos:line="78" pos:column="35">Execute</name></name><argument_list pos:line="78" pos:column="42">(<argument><expr><name><name pos:line="78" pos:column="43">contextMock</name><op:operator pos:line="78" pos:column="54">.</op:operator><name pos:line="78" pos:column="55">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="78" pos:column="63">configMock</name><op:operator pos:line="78" pos:column="73">.</op:operator><name pos:line="78" pos:column="74">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="80" pos:column="13">var</name></type> <name pos:line="80" pos:column="17">statusCodeResult</name> <init pos:line="80" pos:column="34">= <expr><name pos:line="80" pos:column="36">result</name> <op:operator pos:line="80" pos:column="43">as</op:operator> <name pos:line="80" pos:column="46">StatusCodeResourceResult</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="82" pos:column="13">Assert</name><op:operator pos:line="82" pos:column="19">.</op:operator><name pos:line="82" pos:column="20">NotNull</name></name><argument_list pos:line="82" pos:column="27">(<argument><expr><name pos:line="82" pos:column="28">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="83" pos:column="13">Assert</name><op:operator pos:line="83" pos:column="19">.</op:operator><name pos:line="83" pos:column="20">Equal</name></name><argument_list pos:line="83" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="83" pos:column="26">404</lit:literal></expr></argument>, <argument><expr><name><name pos:line="83" pos:column="31">statusCodeResult</name><op:operator pos:line="83" pos:column="47">.</op:operator><name pos:line="83" pos:column="48">StatusCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function> 

        <function><type><attribute pos:line="86" pos:column="9">[<expr><name pos:line="86" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="87" pos:column="9">public</specifier> <name pos:line="87" pos:column="16">void</name></type> <name pos:line="87" pos:column="21">ReturnHtmlResourceResult</name><parameter_list pos:line="87" pos:column="45">()</parameter_list>
        <block pos:line="88" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="89" pos:column="13">var</name></type> <name pos:line="89" pos:column="17">resource</name> <init pos:line="89" pos:column="26">= <expr><op:operator pos:line="89" pos:column="28">new</op:operator> <call><name pos:line="89" pos:column="32">PopupResource</name><argument_list pos:line="89" pos:column="45">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="90" pos:column="13">var</name></type> <name pos:line="90" pos:column="17">contextMock</name> <init pos:line="90" pos:column="29">= <expr><op:operator pos:line="90" pos:column="31">new</op:operator> <call><name><name pos:line="90" pos:column="35">Mock</name><argument_list pos:line="90" pos:column="39">&lt;<argument><name pos:line="90" pos:column="40">IResourceContext</name></argument>&gt;</argument_list></name><argument_list pos:line="90" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="91" pos:column="13">var</name></type> <name pos:line="91" pos:column="17">guid</name> <init pos:line="91" pos:column="22">= <expr><call><name><name pos:line="91" pos:column="24">Guid</name><op:operator pos:line="91" pos:column="28">.</op:operator><name pos:line="91" pos:column="29">NewGuid</name></name><argument_list pos:line="91" pos:column="36">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="92" pos:column="13">string</name></type> <name pos:line="92" pos:column="20">requestId</name> <init pos:line="92" pos:column="30">= <expr><call><name><name pos:line="92" pos:column="32">guid</name><op:operator pos:line="92" pos:column="36">.</op:operator><name pos:line="92" pos:column="37">ToString</name></name><argument_list pos:line="92" pos:column="45">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="93" pos:column="13">contextMock</name><op:operator pos:line="93" pos:column="24">.</op:operator><name pos:line="93" pos:column="25">Setup</name></name><argument_list pos:line="93" pos:column="30">(<argument><expr><lambda><name pos:line="93" pos:column="31">c</name> <op:operator pos:line="93" pos:column="33">=&gt;</op:operator> <call><name><name pos:line="93" pos:column="36">c</name><op:operator pos:line="93" pos:column="37">.</op:operator><name pos:line="93" pos:column="38">Parameters</name><op:operator pos:line="93" pos:column="48">.</op:operator><name pos:line="93" pos:column="49">TryGetValue</name></name><argument_list pos:line="93" pos:column="60">(<argument><expr><lit:literal type="string" pos:line="93" pos:column="61">"requestId"</lit:literal></expr></argument>, <argument><expr pos:line="93" pos:column="74">out <name pos:line="93" pos:column="78">requestId</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="93" pos:column="89">.</op:operator><call><name pos:line="93" pos:column="90">Returns</name><argument_list pos:line="93" pos:column="97">(<argument><expr><lit:literal type="boolean" pos:line="93" pos:column="98">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="94" pos:column="13">var</name></type> <name pos:line="94" pos:column="17">version</name> <init pos:line="94" pos:column="25">= <expr><lit:literal type="string" pos:line="94" pos:column="27">"1.X.Y"</lit:literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="95" pos:column="13">contextMock</name><op:operator pos:line="95" pos:column="24">.</op:operator><name pos:line="95" pos:column="25">Setup</name></name><argument_list pos:line="95" pos:column="30">(<argument><expr><lambda><name pos:line="95" pos:column="31">c</name> <op:operator pos:line="95" pos:column="33">=&gt;</op:operator> <call><name><name pos:line="95" pos:column="36">c</name><op:operator pos:line="95" pos:column="37">.</op:operator><name pos:line="95" pos:column="38">Parameters</name><op:operator pos:line="95" pos:column="48">.</op:operator><name pos:line="95" pos:column="49">TryGetValue</name></name><argument_list pos:line="95" pos:column="60">(<argument><expr><lit:literal type="string" pos:line="95" pos:column="61">"version"</lit:literal></expr></argument>, <argument><expr pos:line="95" pos:column="72">out <name pos:line="95" pos:column="76">version</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="95" pos:column="85">.</op:operator><call><name pos:line="95" pos:column="86">Returns</name><argument_list pos:line="95" pos:column="93">(<argument><expr><lit:literal type="boolean" pos:line="95" pos:column="94">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name><name pos:line="97" pos:column="13">Func</name><argument_list pos:line="97" pos:column="17">&lt;<argument><name pos:line="97" pos:column="18">Guid</name><type:modifier pos:line="97" pos:column="22">?</type:modifier></argument>, <argument><name pos:line="97" pos:column="25">string</name></argument>&gt;</argument_list></name></type> <name pos:line="97" pos:column="33">strategy</name> <init pos:line="97" pos:column="42">= <expr><lambda><parameter_list pos:line="97" pos:column="44">(<param><decl><name pos:line="97" pos:column="45">id</name></decl></param>)</parameter_list> <op:operator pos:line="97" pos:column="49">=&gt;</op:operator> <name pos:line="97" pos:column="52">requestId</name> <op:operator pos:line="97" pos:column="62">+</op:operator> <name pos:line="97" pos:column="64">version</name></lambda></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="98" pos:column="13">var</name></type> <name pos:line="98" pos:column="17">configMock</name> <init pos:line="98" pos:column="28">= <expr><op:operator pos:line="98" pos:column="30">new</op:operator> <call><name><name pos:line="98" pos:column="34">Mock</name><argument_list pos:line="98" pos:column="38">&lt;<argument><name pos:line="98" pos:column="39">IGlimpseConfiguration</name></argument>&gt;</argument_list></name><argument_list pos:line="98" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <expr_stmt><expr><call><name><name pos:line="100" pos:column="13">configMock</name><op:operator pos:line="100" pos:column="23">.</op:operator><name pos:line="100" pos:column="24">Setup</name></name><argument_list pos:line="100" pos:column="29">(<argument><expr><lambda><name pos:line="100" pos:column="30">c</name> <op:operator pos:line="100" pos:column="32">=&gt;</op:operator> <call><name><name pos:line="100" pos:column="35">c</name><op:operator pos:line="100" pos:column="36">.</op:operator><name pos:line="100" pos:column="37">FrameworkProvider</name><op:operator pos:line="100" pos:column="54">.</op:operator><name pos:line="100" pos:column="55">HttpRequestStore</name><op:operator pos:line="100" pos:column="71">.</op:operator><name pos:line="100" pos:column="72">Get</name></name><argument_list pos:line="100" pos:column="75">(<argument><expr><name><name pos:line="100" pos:column="76">Constants</name><op:operator pos:line="100" pos:column="85">.</op:operator><name pos:line="100" pos:column="86">ClientScriptsStrategy</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="100" pos:column="109">.</op:operator><call><name pos:line="100" pos:column="110">Returns</name><argument_list pos:line="100" pos:column="117">(<argument><expr><lambda><parameter_list pos:line="100" pos:column="118">()</parameter_list> <op:operator pos:line="100" pos:column="121">=&gt;</op:operator> <name pos:line="100" pos:column="124">strategy</name></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="101" pos:column="13">var</name></type> <name pos:line="101" pos:column="17">result</name> <init pos:line="101" pos:column="24">= <expr><call><name><name pos:line="101" pos:column="26">resource</name><op:operator pos:line="101" pos:column="34">.</op:operator><name pos:line="101" pos:column="35">Execute</name></name><argument_list pos:line="101" pos:column="42">(<argument><expr><name><name pos:line="101" pos:column="43">contextMock</name><op:operator pos:line="101" pos:column="54">.</op:operator><name pos:line="101" pos:column="55">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="101" pos:column="63">configMock</name><op:operator pos:line="101" pos:column="73">.</op:operator><name pos:line="101" pos:column="74">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="103" pos:column="13">var</name></type> <name pos:line="103" pos:column="17">htmlResourceResult</name> <init pos:line="103" pos:column="36">= <expr><name pos:line="103" pos:column="38">result</name> <op:operator pos:line="103" pos:column="45">as</op:operator> <name pos:line="103" pos:column="48">HtmlResourceResult</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="105" pos:column="13">Assert</name><op:operator pos:line="105" pos:column="19">.</op:operator><name pos:line="105" pos:column="20">NotNull</name></name><argument_list pos:line="105" pos:column="27">(<argument><expr><name pos:line="105" pos:column="28">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="106" pos:column="13">Assert</name><op:operator pos:line="106" pos:column="19">.</op:operator><name pos:line="106" pos:column="20">Contains</name></name><argument_list pos:line="106" pos:column="28">(<argument><expr><name pos:line="106" pos:column="29">requestId</name></expr></argument>, <argument><expr><name><name pos:line="106" pos:column="40">htmlResourceResult</name><op:operator pos:line="106" pos:column="58">.</op:operator><name pos:line="106" pos:column="59">Html</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="107" pos:column="13">Assert</name><op:operator pos:line="107" pos:column="19">.</op:operator><name pos:line="107" pos:column="20">Contains</name></name><argument_list pos:line="107" pos:column="28">(<argument><expr><name pos:line="107" pos:column="29">version</name></expr></argument>, <argument><expr><name><name pos:line="107" pos:column="38">htmlResourceResult</name><op:operator pos:line="107" pos:column="56">.</op:operator><name pos:line="107" pos:column="57">Html</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
