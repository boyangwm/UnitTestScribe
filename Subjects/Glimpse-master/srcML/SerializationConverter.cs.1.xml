<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Core\Extensibility\SerializationConverter.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>

<namespace pos:line="4" pos:column="1">namespace <name><name pos:line="4" pos:column="11">Glimpse</name><op:operator pos:line="4" pos:column="18">.</op:operator><name pos:line="4" pos:column="19">Core</name><op:operator pos:line="4" pos:column="23">.</op:operator><name pos:line="4" pos:column="24">Extensibility</name></name>
<block pos:line="5" pos:column="1">{
    <comment type="line" pos:line="6" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="7" pos:column="5">/// The &lt;see cref="ISerializationConverter"/&gt; abstraction which makes creating converters that deal with one type easier.</comment>
    <comment type="line" pos:line="8" pos:column="5">/// &lt;/summary&gt;</comment>
    <comment type="line" pos:line="9" pos:column="5">/// &lt;typeparam name="T"&gt;</comment>
    <comment type="line" pos:line="10" pos:column="5">/// The type supported to convert.</comment>
    <comment type="line" pos:line="11" pos:column="5">/// &lt;/typeparam&gt;</comment>
    <class><specifier pos:line="12" pos:column="5">public</specifier> <specifier pos:line="12" pos:column="12">abstract</specifier> class <name><name pos:line="12" pos:column="27">SerializationConverter</name><argument_list pos:line="12" pos:column="49">&lt;<argument><name pos:line="12" pos:column="50">T</name></argument>&gt;</argument_list></name> <super pos:line="12" pos:column="53">: <name pos:line="12" pos:column="55">ISerializationConverter</name></super>
    <block pos:line="13" pos:column="5">{
        <comment type="line" pos:line="14" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="15" pos:column="9">/// Gets the supported types the converter will be invoked for.</comment>
        <comment type="line" pos:line="16" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="17" pos:column="9">/// &lt;value&gt;</comment>
        <comment type="line" pos:line="18" pos:column="9">/// The supported types.</comment>
        <comment type="line" pos:line="19" pos:column="9">/// &lt;/value&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="20" pos:column="9">public</specifier> <name><name pos:line="20" pos:column="16">IEnumerable</name><argument_list pos:line="20" pos:column="27">&lt;<argument><name pos:line="20" pos:column="28">Type</name></argument>&gt;</argument_list></name></type> <name pos:line="20" pos:column="34">SupportedTypes</name>
        <block pos:line="21" pos:column="9">{
            <function><name pos:line="22" pos:column="13">get</name> <block pos:line="22" pos:column="17">{ <return pos:line="22" pos:column="19">return <expr><op:operator pos:line="22" pos:column="26">new</op:operator><index pos:line="22" pos:column="29">[]</index> <block pos:line="22" pos:column="32">{ <expr><call><name pos:line="22" pos:column="34">typeof</name><argument_list pos:line="22" pos:column="40">(<argument><expr><name pos:line="22" pos:column="41">T</name></expr></argument>)</argument_list></call></expr> }</block></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="25" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="26" pos:column="9">/// Converts the specified object.</comment>
        <comment type="line" pos:line="27" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="28" pos:column="9">/// &lt;param name="obj"&gt;The object to transform.&lt;/param&gt;</comment>
        <comment type="line" pos:line="29" pos:column="9">/// &lt;returns&gt;The new object representation.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="30" pos:column="9">public</specifier> <name pos:line="30" pos:column="16">object</name></type> <name pos:line="30" pos:column="23">Convert</name><parameter_list pos:line="30" pos:column="30">(<param><decl><type><name pos:line="30" pos:column="31">object</name></type> <name pos:line="30" pos:column="38">obj</name></decl></param>)</parameter_list>
        <block pos:line="31" pos:column="9">{
            <return pos:line="32" pos:column="13">return <expr><call><name pos:line="32" pos:column="20">Convert</name><argument_list pos:line="32" pos:column="27">(<argument><expr><op:operator pos:line="32" pos:column="28">(</op:operator><name pos:line="32" pos:column="29">T</name><op:operator pos:line="32" pos:column="30">)</op:operator><name pos:line="32" pos:column="31">obj</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="35" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="36" pos:column="9">/// Converts the specified object.</comment>
        <comment type="line" pos:line="37" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="38" pos:column="9">/// &lt;param name="obj"&gt;The object to transform.&lt;/param&gt;</comment>
        <comment type="line" pos:line="39" pos:column="9">/// &lt;returns&gt;The new object representation.&lt;/returns&gt;</comment>
        <function_decl><type><specifier pos:line="40" pos:column="9">public</specifier> <specifier pos:line="40" pos:column="16">abstract</specifier> <name pos:line="40" pos:column="25">object</name></type> <name pos:line="40" pos:column="32">Convert</name><parameter_list pos:line="40" pos:column="39">(<param><decl><type><name pos:line="40" pos:column="40">T</name></type> <name pos:line="40" pos:column="42">obj</name></decl></param>)</parameter_list>;</function_decl>
    }</block></class>
}</block></namespace></unit>
