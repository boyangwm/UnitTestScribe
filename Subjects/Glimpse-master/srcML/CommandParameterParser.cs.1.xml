<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Ado\Tab\Support\CommandParameterParser.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">System</name><op:operator pos:line="1" pos:column="13">.</op:operator><name pos:line="1" pos:column="14">Text</name><op:operator pos:line="1" pos:column="18">.</op:operator><name pos:line="1" pos:column="19">RegularExpressions</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">Glimpse</name><op:operator pos:line="2" pos:column="14">.</op:operator><name pos:line="2" pos:column="15">Ado</name><op:operator pos:line="2" pos:column="18">.</op:operator><name pos:line="2" pos:column="19">Extensibility</name></name>;</using>

<namespace pos:line="4" pos:column="1">namespace <name><name pos:line="4" pos:column="11">Glimpse</name><op:operator pos:line="4" pos:column="18">.</op:operator><name pos:line="4" pos:column="19">Ado</name><op:operator pos:line="4" pos:column="22">.</op:operator><name pos:line="4" pos:column="23">Tab</name><op:operator pos:line="4" pos:column="26">.</op:operator><name pos:line="4" pos:column="27">Support</name></name>
<block pos:line="5" pos:column="1">{
    <class><specifier pos:line="6" pos:column="5">internal</specifier> class <name pos:line="6" pos:column="20">CommandParameterParser</name> <super pos:line="6" pos:column="43">: <name pos:line="6" pos:column="45">ICommandParameterParser</name></super>
    <block pos:line="7" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="8" pos:column="9">private</specifier> <specifier pos:line="8" pos:column="17">const</specifier> <name pos:line="8" pos:column="23">string</name></type> <name pos:line="8" pos:column="30">RegexFormat</name> <init pos:line="8" pos:column="42">= <expr><lit:literal type="string" pos:line="8" pos:column="44">"(?&lt;preDelimiter&gt;[^@]){0}(?&lt;postDelimiter&gt;[^a-zA-Z0-9]|$)"</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="9" pos:column="9">private</specifier> <specifier pos:line="9" pos:column="17">const</specifier> <name pos:line="9" pos:column="23">string</name></type> <name pos:line="9" pos:column="30">ReplacementFormat</name> <init pos:line="9" pos:column="48">= <expr><lit:literal type="string" pos:line="9" pos:column="50">"${{preDelimiter}}{0}${{postDelimiter}}"</lit:literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="11" pos:column="9">internal</specifier> <specifier pos:line="11" pos:column="18">const</specifier> <name pos:line="11" pos:column="24">string</name></type> <name pos:line="11" pos:column="31">QuotedFormat</name> <init pos:line="11" pos:column="44">= <expr><lit:literal type="string" pos:line="11" pos:column="46">"'{0}' /* {1} */"</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="12" pos:column="9">internal</specifier> <specifier pos:line="12" pos:column="18">const</specifier> <name pos:line="12" pos:column="24">string</name></type> <name pos:line="12" pos:column="31">UnquotedFormat</name> <init pos:line="12" pos:column="46">= <expr><lit:literal type="string" pos:line="12" pos:column="48">"{0} /* {1} */"</lit:literal></expr></init></decl>;</decl_stmt>

        <constructor><specifier pos:line="14" pos:column="9">public</specifier> <name pos:line="14" pos:column="16">CommandParameterParser</name><parameter_list pos:line="14" pos:column="38">(<param><decl><type><name pos:line="14" pos:column="39">bool</name></type> <name pos:line="14" pos:column="44">useQuotes</name></decl></param>)</parameter_list>
        <block pos:line="15" pos:column="9">{ 
            <expr_stmt><expr><name pos:line="16" pos:column="13">UseQuotes</name> <op:operator pos:line="16" pos:column="23">=</op:operator> <name pos:line="16" pos:column="25">useQuotes</name></expr>;</expr_stmt>
        }</block></constructor> 

        <decl_stmt><decl><type><specifier pos:line="19" pos:column="9">private</specifier> <name pos:line="19" pos:column="17">bool</name></type> <name pos:line="19" pos:column="22">UseQuotes</name> <block pos:line="19" pos:column="32">{ <function_decl><name pos:line="19" pos:column="34">get</name>;</function_decl> <function_decl><name pos:line="19" pos:column="39">set</name>;</function_decl> }</block></decl></decl_stmt>

        <function><type><specifier pos:line="21" pos:column="9">public</specifier> <name pos:line="21" pos:column="16">string</name></type> <name pos:line="21" pos:column="23">Parse</name><parameter_list pos:line="21" pos:column="28">(<param><decl><type><name pos:line="21" pos:column="29">string</name></type> <name pos:line="21" pos:column="36">command</name></decl></param>, <param><decl><type><name pos:line="21" pos:column="45">string</name></type> <name pos:line="21" pos:column="52">parameterName</name></decl></param>, <param><decl><type><name pos:line="21" pos:column="67">object</name></type> <name pos:line="21" pos:column="74">parameterValue</name></decl></param>, <param><decl><type><name pos:line="21" pos:column="90">string</name></type> <name pos:line="21" pos:column="97">parameterType</name></decl></param>, <param><decl><type><name pos:line="21" pos:column="112">int</name></type> <name pos:line="21" pos:column="116">parameterSize</name></decl></param>)</parameter_list>
        <block pos:line="22" pos:column="9">{
            <if pos:line="23" pos:column="13">if <condition pos:line="23" pos:column="16">(<expr><name pos:line="23" pos:column="17">parameterValue</name> <op:operator pos:line="23" pos:column="32">==</op:operator> <name pos:line="23" pos:column="35">null</name> <op:operator pos:line="23" pos:column="40">||</op:operator> <call><name><name pos:line="23" pos:column="43">parameterValue</name><op:operator pos:line="23" pos:column="57">.</op:operator><name pos:line="23" pos:column="58">ToString</name></name><argument_list pos:line="23" pos:column="66">()</argument_list></call><op:operator pos:line="23" pos:column="68">.</op:operator><name pos:line="23" pos:column="69">Length</name> <op:operator pos:line="23" pos:column="76">&gt;</op:operator> <lit:literal type="number" pos:line="23" pos:column="78">50</lit:literal></expr>)</condition><then pos:line="23" pos:column="81">
            <block pos:line="24" pos:column="13">{
                <return pos:line="25" pos:column="17">return <expr><name pos:line="25" pos:column="24">command</name></expr>;</return>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="28" pos:column="13">var</name></type> <name pos:line="28" pos:column="17">formatter</name> <init pos:line="28" pos:column="27">= <expr><name pos:line="28" pos:column="29">UseQuotes</name> <op:operator pos:line="28" pos:column="39">?</op:operator> <name pos:line="28" pos:column="41">QuotedFormat</name> <op:operator pos:line="28" pos:column="54">:</op:operator> <name pos:line="28" pos:column="56">UnquotedFormat</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="30" pos:column="13">var</name></type> <name pos:line="30" pos:column="17">regex</name> <init pos:line="30" pos:column="23">= <expr><op:operator pos:line="30" pos:column="25">new</op:operator> <call><name pos:line="30" pos:column="29">Regex</name><argument_list pos:line="30" pos:column="34">(<argument><expr><call><name><name pos:line="30" pos:column="35">string</name><op:operator pos:line="30" pos:column="41">.</op:operator><name pos:line="30" pos:column="42">Format</name></name><argument_list pos:line="30" pos:column="48">(<argument><expr><name pos:line="30" pos:column="49">RegexFormat</name></expr></argument>, <argument><expr><call><name><name pos:line="30" pos:column="62">Regex</name><op:operator pos:line="30" pos:column="67">.</op:operator><name pos:line="30" pos:column="68">Escape</name></name><argument_list pos:line="30" pos:column="74">(<argument><expr><name pos:line="30" pos:column="75">parameterName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <return pos:line="32" pos:column="13">return <expr><call><name><name pos:line="32" pos:column="20">regex</name><op:operator pos:line="32" pos:column="25">.</op:operator><name pos:line="32" pos:column="26">Replace</name></name><argument_list pos:line="32" pos:column="33">(<argument><expr><name pos:line="32" pos:column="34">command</name></expr></argument>, <argument><expr><call><name><name pos:line="32" pos:column="43">string</name><op:operator pos:line="32" pos:column="49">.</op:operator><name pos:line="32" pos:column="50">Format</name></name><argument_list pos:line="32" pos:column="56">(<argument><expr><name pos:line="32" pos:column="57">ReplacementFormat</name></expr></argument>, <argument><expr><call><name><name pos:line="32" pos:column="76">string</name><op:operator pos:line="32" pos:column="82">.</op:operator><name pos:line="32" pos:column="83">Format</name></name><argument_list pos:line="32" pos:column="89">(<argument><expr><name pos:line="32" pos:column="90">formatter</name></expr></argument>, <argument><expr><name pos:line="32" pos:column="101">parameterValue</name></expr></argument>, <argument><expr><name pos:line="32" pos:column="117">parameterName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
