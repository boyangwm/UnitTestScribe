<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Core\Tab\TraceShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">System</name><op:operator pos:line="1" pos:column="13">.</op:operator><name pos:line="1" pos:column="14">Collections</name><op:operator pos:line="1" pos:column="25">.</op:operator><name pos:line="1" pos:column="26">Generic</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">Glimpse</name><op:operator pos:line="2" pos:column="14">.</op:operator><name pos:line="2" pos:column="15">Core</name><op:operator pos:line="2" pos:column="19">.</op:operator><name pos:line="2" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Glimpse</name><op:operator pos:line="3" pos:column="14">.</op:operator><name pos:line="3" pos:column="15">Core</name><op:operator pos:line="3" pos:column="19">.</op:operator><name pos:line="3" pos:column="20">Message</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Core</name><op:operator pos:line="4" pos:column="19">.</op:operator><name pos:line="4" pos:column="20">Tab</name></name>;</using>
<using pos:line="5" pos:column="1">using <name pos:line="5" pos:column="7">Moq</name>;</using>
<using pos:line="6" pos:column="1">using <name pos:line="6" pos:column="7">Xunit</name>;</using>

<namespace pos:line="8" pos:column="1">namespace <name><name pos:line="8" pos:column="11">Glimpse</name><op:operator pos:line="8" pos:column="18">.</op:operator><name pos:line="8" pos:column="19">Test</name><op:operator pos:line="8" pos:column="23">.</op:operator><name pos:line="8" pos:column="24">Core</name><op:operator pos:line="8" pos:column="28">.</op:operator><name pos:line="8" pos:column="29">Tab</name></name>
<block pos:line="9" pos:column="1">{
    <class><specifier pos:line="10" pos:column="5">public</specifier> class <name pos:line="10" pos:column="18">TraceShould</name>
    <block pos:line="11" pos:column="5">{
        <function><type><attribute pos:line="12" pos:column="9">[<expr><name pos:line="12" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="13" pos:column="9">public</specifier> <name pos:line="13" pos:column="16">void</name></type> <name pos:line="13" pos:column="21">HaveProperContextObjectType</name><parameter_list pos:line="13" pos:column="48">()</parameter_list>
        <block pos:line="14" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="15" pos:column="13">var</name></type> <name pos:line="15" pos:column="17">trace</name> <init pos:line="15" pos:column="23">= <expr><op:operator pos:line="15" pos:column="25">new</op:operator> <call><name pos:line="15" pos:column="29">Trace</name><argument_list pos:line="15" pos:column="34">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="17" pos:column="13">Assert</name><op:operator pos:line="17" pos:column="19">.</op:operator><name pos:line="17" pos:column="20">Null</name></name><argument_list pos:line="17" pos:column="24">(<argument><expr><name><name pos:line="17" pos:column="25">trace</name><op:operator pos:line="17" pos:column="30">.</op:operator><name pos:line="17" pos:column="31">RequestContextType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="20" pos:column="9">[<expr><name pos:line="20" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="21" pos:column="9">public</specifier> <name pos:line="21" pos:column="16">void</name></type> <name pos:line="21" pos:column="21">UseDefaultLifeCycleSupport</name><parameter_list pos:line="21" pos:column="47">()</parameter_list>
        <block pos:line="22" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="23" pos:column="13">var</name></type> <name pos:line="23" pos:column="17">trace</name> <init pos:line="23" pos:column="23">= <expr><op:operator pos:line="23" pos:column="25">new</op:operator> <call><name pos:line="23" pos:column="29">Trace</name><argument_list pos:line="23" pos:column="34">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="24" pos:column="13">Assert</name><op:operator pos:line="24" pos:column="19">.</op:operator><name pos:line="24" pos:column="20">Equal</name></name><argument_list pos:line="24" pos:column="25">(<argument><expr><name><name pos:line="24" pos:column="26">RuntimeEvent</name><op:operator pos:line="24" pos:column="38">.</op:operator><name pos:line="24" pos:column="39">EndRequest</name></name></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="51">trace</name><op:operator pos:line="24" pos:column="56">.</op:operator><name pos:line="24" pos:column="57">ExecuteOn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="27" pos:column="9">[<expr><name pos:line="27" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="28" pos:column="9">public</specifier> <name pos:line="28" pos:column="16">void</name></type> <name pos:line="28" pos:column="21">BeNamedTrace</name><parameter_list pos:line="28" pos:column="33">()</parameter_list>
        <block pos:line="29" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="30" pos:column="13">var</name></type> <name pos:line="30" pos:column="17">trace</name> <init pos:line="30" pos:column="23">= <expr><op:operator pos:line="30" pos:column="25">new</op:operator> <call><name pos:line="30" pos:column="29">Trace</name><argument_list pos:line="30" pos:column="34">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="31" pos:column="13">Assert</name><op:operator pos:line="31" pos:column="19">.</op:operator><name pos:line="31" pos:column="20">Equal</name></name><argument_list pos:line="31" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="31" pos:column="26">"Trace"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="35">trace</name><op:operator pos:line="31" pos:column="40">.</op:operator><name pos:line="31" pos:column="41">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="34" pos:column="9">[<expr><name pos:line="34" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="35" pos:column="9">public</specifier> <name pos:line="35" pos:column="16">void</name></type> <name pos:line="35" pos:column="21">HaveADocumentationUri</name><parameter_list pos:line="35" pos:column="42">()</parameter_list>
        <block pos:line="36" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="37" pos:column="13">var</name></type> <name pos:line="37" pos:column="17">trace</name> <init pos:line="37" pos:column="23">= <expr><op:operator pos:line="37" pos:column="25">new</op:operator> <call><name pos:line="37" pos:column="29">Trace</name><argument_list pos:line="37" pos:column="34">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="39" pos:column="13">Assert</name><op:operator pos:line="39" pos:column="19">.</op:operator><name pos:line="39" pos:column="20">False</name></name><argument_list pos:line="39" pos:column="25">(<argument><expr><call><name><name pos:line="39" pos:column="26">string</name><op:operator pos:line="39" pos:column="32">.</op:operator><name pos:line="39" pos:column="33">IsNullOrWhiteSpace</name></name><argument_list pos:line="39" pos:column="51">(<argument><expr><name><name pos:line="39" pos:column="52">trace</name><op:operator pos:line="39" pos:column="57">.</op:operator><name pos:line="39" pos:column="58">DocumentationUri</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
         
        <function><type><attribute pos:line="42" pos:column="9">[<expr><name pos:line="42" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="43" pos:column="9">public</specifier> <name pos:line="43" pos:column="16">void</name></type> <name pos:line="43" pos:column="21">ReturnData</name><parameter_list pos:line="43" pos:column="31">()</parameter_list>
        <block pos:line="44" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="45" pos:column="13">var</name></type> <name pos:line="45" pos:column="17">model</name> <init pos:line="45" pos:column="23">= <expr><op:operator pos:line="45" pos:column="25">new</op:operator> <call><name><name pos:line="45" pos:column="29">List</name><argument_list pos:line="45" pos:column="33">&lt;<argument><name pos:line="45" pos:column="34">ITraceMessage</name></argument>&gt;</argument_list></name><argument_list pos:line="45" pos:column="48">(<argument><expr><lit:literal type="number" pos:line="45" pos:column="49">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="46" pos:column="13">var</name></type> <name pos:line="46" pos:column="17">dataStoreMock</name> <init pos:line="46" pos:column="31">= <expr><op:operator pos:line="46" pos:column="33">new</op:operator> <call><name><name pos:line="46" pos:column="37">Mock</name><argument_list pos:line="46" pos:column="41">&lt;<argument><name pos:line="46" pos:column="42">IDataStore</name></argument>&gt;</argument_list></name><argument_list pos:line="46" pos:column="53">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="47" pos:column="13">dataStoreMock</name><op:operator pos:line="47" pos:column="26">.</op:operator><name pos:line="47" pos:column="27">Setup</name></name><argument_list pos:line="47" pos:column="32">(<argument><expr><lambda><name pos:line="47" pos:column="33">c</name> <op:operator pos:line="47" pos:column="35">=&gt;</op:operator> <call><name><name pos:line="47" pos:column="38">c</name><op:operator pos:line="47" pos:column="39">.</op:operator><name pos:line="47" pos:column="40">Get</name></name><argument_list pos:line="47" pos:column="43">(<argument><expr><call><name pos:line="47" pos:column="44">typeof</name><argument_list pos:line="47" pos:column="50">(<argument><expr><name><name pos:line="47" pos:column="51">IList</name><argument_list pos:line="47" pos:column="56">&lt;<argument><name pos:line="47" pos:column="57">ITraceMessage</name></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call><op:operator pos:line="47" pos:column="72">.</op:operator><name pos:line="47" pos:column="73">AssemblyQualifiedName</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="47" pos:column="96">.</op:operator><call><name pos:line="47" pos:column="97">Returns</name><argument_list pos:line="47" pos:column="104">(<argument><expr><name pos:line="47" pos:column="105">model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="48" pos:column="13">var</name></type> <name pos:line="48" pos:column="17">contextMock</name> <init pos:line="48" pos:column="29">= <expr><op:operator pos:line="48" pos:column="31">new</op:operator> <call><name><name pos:line="48" pos:column="35">Mock</name><argument_list pos:line="48" pos:column="39">&lt;<argument><name pos:line="48" pos:column="40">ITabContext</name></argument>&gt;</argument_list></name><argument_list pos:line="48" pos:column="52">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="49" pos:column="13">contextMock</name><op:operator pos:line="49" pos:column="24">.</op:operator><name pos:line="49" pos:column="25">SetupGet</name></name><argument_list pos:line="49" pos:column="33">(<argument><expr><lambda><name pos:line="49" pos:column="34">c</name> <op:operator pos:line="49" pos:column="36">=&gt;</op:operator> <name><name pos:line="49" pos:column="39">c</name><op:operator pos:line="49" pos:column="40">.</op:operator><name pos:line="49" pos:column="41">TabStore</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="49" pos:column="50">.</op:operator><call><name pos:line="49" pos:column="51">Returns</name><argument_list pos:line="49" pos:column="58">(<argument><expr><name><name pos:line="49" pos:column="59">dataStoreMock</name><op:operator pos:line="49" pos:column="72">.</op:operator><name pos:line="49" pos:column="73">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="51" pos:column="13">var</name></type> <name pos:line="51" pos:column="17">trace</name> <init pos:line="51" pos:column="23">= <expr><op:operator pos:line="51" pos:column="25">new</op:operator> <call><name pos:line="51" pos:column="29">Trace</name><argument_list pos:line="51" pos:column="34">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="52" pos:column="13">var</name></type> <name pos:line="52" pos:column="17">result</name> <init pos:line="52" pos:column="24">= <expr><call><name><name pos:line="52" pos:column="26">trace</name><op:operator pos:line="52" pos:column="31">.</op:operator><name pos:line="52" pos:column="32">GetData</name></name><argument_list pos:line="52" pos:column="39">(<argument><expr><name><name pos:line="52" pos:column="40">contextMock</name><op:operator pos:line="52" pos:column="51">.</op:operator><name pos:line="52" pos:column="52">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="54" pos:column="13">Assert</name><op:operator pos:line="54" pos:column="19">.</op:operator><name pos:line="54" pos:column="20">NotNull</name></name><argument_list pos:line="54" pos:column="27">(<argument><expr><name pos:line="54" pos:column="28">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="55" pos:column="13">Assert</name><op:operator pos:line="55" pos:column="19">.</op:operator><name pos:line="55" pos:column="20">Equal</name></name><argument_list pos:line="55" pos:column="25">(<argument><expr><name pos:line="55" pos:column="26">model</name></expr></argument>, <argument><expr><name pos:line="55" pos:column="33">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
