<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Core\Extensibility\LoggerBaseShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">Glimpse</name><op:operator pos:line="1" pos:column="14">.</op:operator><name pos:line="1" pos:column="15">Core</name><op:operator pos:line="1" pos:column="19">.</op:operator><name pos:line="1" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">Glimpse</name><op:operator pos:line="2" pos:column="14">.</op:operator><name pos:line="2" pos:column="15">Test</name><op:operator pos:line="2" pos:column="19">.</op:operator><name pos:line="2" pos:column="20">Core</name><op:operator pos:line="2" pos:column="24">.</op:operator><name pos:line="2" pos:column="25">TestDoubles</name></name>;</using>
<using pos:line="3" pos:column="1">using <name pos:line="3" pos:column="7">Moq</name>;</using>
<using pos:line="4" pos:column="1">using <name pos:line="4" pos:column="7">Xunit</name>;</using>

<namespace pos:line="6" pos:column="1">namespace <name><name pos:line="6" pos:column="11">Glimpse</name><op:operator pos:line="6" pos:column="18">.</op:operator><name pos:line="6" pos:column="19">Test</name><op:operator pos:line="6" pos:column="23">.</op:operator><name pos:line="6" pos:column="24">Core</name><op:operator pos:line="6" pos:column="28">.</op:operator><name pos:line="6" pos:column="29">Extensibility</name></name>
<block pos:line="7" pos:column="1">{
    <class><specifier pos:line="8" pos:column="5">public</specifier> class <name pos:line="8" pos:column="18">LoggerBaseShould</name>
    <block pos:line="9" pos:column="5">{
        <function><type><attribute pos:line="10" pos:column="9">[<expr><name pos:line="10" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="11" pos:column="9">public</specifier> <name pos:line="11" pos:column="16">void</name></type> <name pos:line="11" pos:column="21">CallAbstractTrace</name><parameter_list pos:line="11" pos:column="38">()</parameter_list>
        <block pos:line="12" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="13" pos:column="13">var</name></type> <name pos:line="13" pos:column="17">loggerMock</name> <init pos:line="13" pos:column="28">= <expr><op:operator pos:line="13" pos:column="30">new</op:operator> <call><name><name pos:line="13" pos:column="34">Mock</name><argument_list pos:line="13" pos:column="38">&lt;<argument><name pos:line="13" pos:column="39">LoggerBase</name></argument>&gt;</argument_list></name><argument_list pos:line="13" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="15" pos:column="13">loggerMock</name><op:operator pos:line="15" pos:column="23">.</op:operator><name pos:line="15" pos:column="24">Object</name><op:operator pos:line="15" pos:column="30">.</op:operator><name pos:line="15" pos:column="31">Trace</name></name><argument_list pos:line="15" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="15" pos:column="37">"message Format"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="15" pos:column="55">new</op:operator> <name><name pos:line="15" pos:column="59">object</name><index pos:line="15" pos:column="65">[]</index></name><block pos:line="15" pos:column="67">{<expr><lit:literal type="string" pos:line="15" pos:column="68">"One"</lit:literal></expr><op:operator pos:line="15" pos:column="73">,</op:operator> <expr><lit:literal type="number" pos:line="15" pos:column="75">2</lit:literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="17" pos:column="13">loggerMock</name><op:operator pos:line="17" pos:column="23">.</op:operator><name pos:line="17" pos:column="24">Verify</name></name><argument_list pos:line="17" pos:column="30">(<argument><expr><lambda><name pos:line="17" pos:column="31">l</name><op:operator pos:line="17" pos:column="32">=&gt;</op:operator><call><name><name pos:line="17" pos:column="34">l</name><op:operator pos:line="17" pos:column="35">.</op:operator><name pos:line="17" pos:column="36">Trace</name></name><argument_list pos:line="17" pos:column="41">(<argument><expr><call><name><name pos:line="17" pos:column="42">It</name><op:operator pos:line="17" pos:column="44">.</op:operator><name><name pos:line="17" pos:column="45">IsAny</name><argument_list pos:line="17" pos:column="50">&lt;<argument><name pos:line="17" pos:column="51">string</name></argument>&gt;</argument_list></name></name><argument_list pos:line="17" pos:column="58">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="17" pos:column="63">Times</name><op:operator pos:line="17" pos:column="68">.</op:operator><name pos:line="17" pos:column="69">Once</name></name><argument_list pos:line="17" pos:column="73">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="20" pos:column="9">[<expr><name pos:line="20" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="21" pos:column="9">public</specifier> <name pos:line="21" pos:column="16">void</name></type> <name pos:line="21" pos:column="21">CallAbstractTraceWithException</name><parameter_list pos:line="21" pos:column="51">()</parameter_list>
        <block pos:line="22" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="23" pos:column="13">var</name></type> <name pos:line="23" pos:column="17">loggerMock</name> <init pos:line="23" pos:column="28">= <expr><op:operator pos:line="23" pos:column="30">new</op:operator> <call><name><name pos:line="23" pos:column="34">Mock</name><argument_list pos:line="23" pos:column="38">&lt;<argument><name pos:line="23" pos:column="39">LoggerBase</name></argument>&gt;</argument_list></name><argument_list pos:line="23" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="24" pos:column="13">var</name></type> <name pos:line="24" pos:column="17">exception</name> <init pos:line="24" pos:column="27">= <expr><op:operator pos:line="24" pos:column="29">new</op:operator> <call><name pos:line="24" pos:column="33">DummyException</name><argument_list pos:line="24" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="26" pos:column="13">loggerMock</name><op:operator pos:line="26" pos:column="23">.</op:operator><name pos:line="26" pos:column="24">Object</name><op:operator pos:line="26" pos:column="30">.</op:operator><name pos:line="26" pos:column="31">Trace</name></name><argument_list pos:line="26" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="26" pos:column="37">"message Format"</lit:literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="55">exception</name></expr></argument>, <argument><expr><op:operator pos:line="26" pos:column="66">new</op:operator> <name><name pos:line="26" pos:column="70">object</name><index pos:line="26" pos:column="76">[]</index></name> <block pos:line="26" pos:column="79">{ <expr><lit:literal type="string" pos:line="26" pos:column="81">"One"</lit:literal></expr><op:operator pos:line="26" pos:column="86">,</op:operator> <expr><lit:literal type="number" pos:line="26" pos:column="88">2</lit:literal></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="28" pos:column="13">loggerMock</name><op:operator pos:line="28" pos:column="23">.</op:operator><name pos:line="28" pos:column="24">Verify</name></name><argument_list pos:line="28" pos:column="30">(<argument><expr><lambda><name pos:line="28" pos:column="31">l</name> <op:operator pos:line="28" pos:column="33">=&gt;</op:operator> <call><name><name pos:line="28" pos:column="36">l</name><op:operator pos:line="28" pos:column="37">.</op:operator><name pos:line="28" pos:column="38">Trace</name></name><argument_list pos:line="28" pos:column="43">(<argument><expr><call><name><name pos:line="28" pos:column="44">It</name><op:operator pos:line="28" pos:column="46">.</op:operator><name><name pos:line="28" pos:column="47">IsAny</name><argument_list pos:line="28" pos:column="52">&lt;<argument><name pos:line="28" pos:column="53">string</name></argument>&gt;</argument_list></name></name><argument_list pos:line="28" pos:column="60">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="28" pos:column="64">exception</name></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="28" pos:column="76">Times</name><op:operator pos:line="28" pos:column="81">.</op:operator><name pos:line="28" pos:column="82">Once</name></name><argument_list pos:line="28" pos:column="86">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="31" pos:column="9">[<expr><name pos:line="31" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="32" pos:column="9">public</specifier> <name pos:line="32" pos:column="16">void</name></type> <name pos:line="32" pos:column="21">CallAbstractDebug</name><parameter_list pos:line="32" pos:column="38">()</parameter_list>
        <block pos:line="33" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="34" pos:column="13">var</name></type> <name pos:line="34" pos:column="17">loggerMock</name> <init pos:line="34" pos:column="28">= <expr><op:operator pos:line="34" pos:column="30">new</op:operator> <call><name><name pos:line="34" pos:column="34">Mock</name><argument_list pos:line="34" pos:column="38">&lt;<argument><name pos:line="34" pos:column="39">LoggerBase</name></argument>&gt;</argument_list></name><argument_list pos:line="34" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="36" pos:column="13">loggerMock</name><op:operator pos:line="36" pos:column="23">.</op:operator><name pos:line="36" pos:column="24">Object</name><op:operator pos:line="36" pos:column="30">.</op:operator><name pos:line="36" pos:column="31">Debug</name></name><argument_list pos:line="36" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="36" pos:column="37">"message Format"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="36" pos:column="55">new</op:operator> <name><name pos:line="36" pos:column="59">object</name><index pos:line="36" pos:column="65">[]</index></name> <block pos:line="36" pos:column="68">{ <expr><lit:literal type="string" pos:line="36" pos:column="70">"One"</lit:literal></expr><op:operator pos:line="36" pos:column="75">,</op:operator> <expr><lit:literal type="number" pos:line="36" pos:column="77">2</lit:literal></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="38" pos:column="13">loggerMock</name><op:operator pos:line="38" pos:column="23">.</op:operator><name pos:line="38" pos:column="24">Verify</name></name><argument_list pos:line="38" pos:column="30">(<argument><expr><lambda><name pos:line="38" pos:column="31">l</name> <op:operator pos:line="38" pos:column="33">=&gt;</op:operator> <call><name><name pos:line="38" pos:column="36">l</name><op:operator pos:line="38" pos:column="37">.</op:operator><name pos:line="38" pos:column="38">Debug</name></name><argument_list pos:line="38" pos:column="43">(<argument><expr><call><name><name pos:line="38" pos:column="44">It</name><op:operator pos:line="38" pos:column="46">.</op:operator><name><name pos:line="38" pos:column="47">IsAny</name><argument_list pos:line="38" pos:column="52">&lt;<argument><name pos:line="38" pos:column="53">string</name></argument>&gt;</argument_list></name></name><argument_list pos:line="38" pos:column="60">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="38" pos:column="65">Times</name><op:operator pos:line="38" pos:column="70">.</op:operator><name pos:line="38" pos:column="71">Once</name></name><argument_list pos:line="38" pos:column="75">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="41" pos:column="9">[<expr><name pos:line="41" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="42" pos:column="9">public</specifier> <name pos:line="42" pos:column="16">void</name></type> <name pos:line="42" pos:column="21">CallAbstractDebugWithException</name><parameter_list pos:line="42" pos:column="51">()</parameter_list>
        <block pos:line="43" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="44" pos:column="13">var</name></type> <name pos:line="44" pos:column="17">loggerMock</name> <init pos:line="44" pos:column="28">= <expr><op:operator pos:line="44" pos:column="30">new</op:operator> <call><name><name pos:line="44" pos:column="34">Mock</name><argument_list pos:line="44" pos:column="38">&lt;<argument><name pos:line="44" pos:column="39">LoggerBase</name></argument>&gt;</argument_list></name><argument_list pos:line="44" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="45" pos:column="13">var</name></type> <name pos:line="45" pos:column="17">exception</name> <init pos:line="45" pos:column="27">= <expr><op:operator pos:line="45" pos:column="29">new</op:operator> <call><name pos:line="45" pos:column="33">DummyException</name><argument_list pos:line="45" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="47" pos:column="13">loggerMock</name><op:operator pos:line="47" pos:column="23">.</op:operator><name pos:line="47" pos:column="24">Object</name><op:operator pos:line="47" pos:column="30">.</op:operator><name pos:line="47" pos:column="31">Debug</name></name><argument_list pos:line="47" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="47" pos:column="37">"message Format"</lit:literal></expr></argument>, <argument><expr><name pos:line="47" pos:column="55">exception</name></expr></argument>, <argument><expr><op:operator pos:line="47" pos:column="66">new</op:operator> <name><name pos:line="47" pos:column="70">object</name><index pos:line="47" pos:column="76">[]</index></name> <block pos:line="47" pos:column="79">{ <expr><lit:literal type="string" pos:line="47" pos:column="81">"One"</lit:literal></expr><op:operator pos:line="47" pos:column="86">,</op:operator> <expr><lit:literal type="number" pos:line="47" pos:column="88">2</lit:literal></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="49" pos:column="13">loggerMock</name><op:operator pos:line="49" pos:column="23">.</op:operator><name pos:line="49" pos:column="24">Verify</name></name><argument_list pos:line="49" pos:column="30">(<argument><expr><lambda><name pos:line="49" pos:column="31">l</name> <op:operator pos:line="49" pos:column="33">=&gt;</op:operator> <call><name><name pos:line="49" pos:column="36">l</name><op:operator pos:line="49" pos:column="37">.</op:operator><name pos:line="49" pos:column="38">Debug</name></name><argument_list pos:line="49" pos:column="43">(<argument><expr><call><name><name pos:line="49" pos:column="44">It</name><op:operator pos:line="49" pos:column="46">.</op:operator><name><name pos:line="49" pos:column="47">IsAny</name><argument_list pos:line="49" pos:column="52">&lt;<argument><name pos:line="49" pos:column="53">string</name></argument>&gt;</argument_list></name></name><argument_list pos:line="49" pos:column="60">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="49" pos:column="64">exception</name></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="49" pos:column="76">Times</name><op:operator pos:line="49" pos:column="81">.</op:operator><name pos:line="49" pos:column="82">Once</name></name><argument_list pos:line="49" pos:column="86">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="52" pos:column="9">[<expr><name pos:line="52" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="53" pos:column="9">public</specifier> <name pos:line="53" pos:column="16">void</name></type> <name pos:line="53" pos:column="21">CallAbstractInfo</name><parameter_list pos:line="53" pos:column="37">()</parameter_list>
        <block pos:line="54" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="55" pos:column="13">var</name></type> <name pos:line="55" pos:column="17">loggerMock</name> <init pos:line="55" pos:column="28">= <expr><op:operator pos:line="55" pos:column="30">new</op:operator> <call><name><name pos:line="55" pos:column="34">Mock</name><argument_list pos:line="55" pos:column="38">&lt;<argument><name pos:line="55" pos:column="39">LoggerBase</name></argument>&gt;</argument_list></name><argument_list pos:line="55" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="57" pos:column="13">loggerMock</name><op:operator pos:line="57" pos:column="23">.</op:operator><name pos:line="57" pos:column="24">Object</name><op:operator pos:line="57" pos:column="30">.</op:operator><name pos:line="57" pos:column="31">Info</name></name><argument_list pos:line="57" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="57" pos:column="36">"message Format"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="57" pos:column="54">new</op:operator> <name><name pos:line="57" pos:column="58">object</name><index pos:line="57" pos:column="64">[]</index></name> <block pos:line="57" pos:column="67">{ <expr><lit:literal type="string" pos:line="57" pos:column="69">"One"</lit:literal></expr><op:operator pos:line="57" pos:column="74">,</op:operator> <expr><lit:literal type="number" pos:line="57" pos:column="76">2</lit:literal></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="59" pos:column="13">loggerMock</name><op:operator pos:line="59" pos:column="23">.</op:operator><name pos:line="59" pos:column="24">Verify</name></name><argument_list pos:line="59" pos:column="30">(<argument><expr><lambda><name pos:line="59" pos:column="31">l</name> <op:operator pos:line="59" pos:column="33">=&gt;</op:operator> <call><name><name pos:line="59" pos:column="36">l</name><op:operator pos:line="59" pos:column="37">.</op:operator><name pos:line="59" pos:column="38">Info</name></name><argument_list pos:line="59" pos:column="42">(<argument><expr><call><name><name pos:line="59" pos:column="43">It</name><op:operator pos:line="59" pos:column="45">.</op:operator><name><name pos:line="59" pos:column="46">IsAny</name><argument_list pos:line="59" pos:column="51">&lt;<argument><name pos:line="59" pos:column="52">string</name></argument>&gt;</argument_list></name></name><argument_list pos:line="59" pos:column="59">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="59" pos:column="64">Times</name><op:operator pos:line="59" pos:column="69">.</op:operator><name pos:line="59" pos:column="70">Once</name></name><argument_list pos:line="59" pos:column="74">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="62" pos:column="9">[<expr><name pos:line="62" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="63" pos:column="9">public</specifier> <name pos:line="63" pos:column="16">void</name></type> <name pos:line="63" pos:column="21">CallAbstractInfoWithException</name><parameter_list pos:line="63" pos:column="50">()</parameter_list>
        <block pos:line="64" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="65" pos:column="13">var</name></type> <name pos:line="65" pos:column="17">loggerMock</name> <init pos:line="65" pos:column="28">= <expr><op:operator pos:line="65" pos:column="30">new</op:operator> <call><name><name pos:line="65" pos:column="34">Mock</name><argument_list pos:line="65" pos:column="38">&lt;<argument><name pos:line="65" pos:column="39">LoggerBase</name></argument>&gt;</argument_list></name><argument_list pos:line="65" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="66" pos:column="13">var</name></type> <name pos:line="66" pos:column="17">exception</name> <init pos:line="66" pos:column="27">= <expr><op:operator pos:line="66" pos:column="29">new</op:operator> <call><name pos:line="66" pos:column="33">DummyException</name><argument_list pos:line="66" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="68" pos:column="13">loggerMock</name><op:operator pos:line="68" pos:column="23">.</op:operator><name pos:line="68" pos:column="24">Object</name><op:operator pos:line="68" pos:column="30">.</op:operator><name pos:line="68" pos:column="31">Info</name></name><argument_list pos:line="68" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="68" pos:column="36">"message Format"</lit:literal></expr></argument>, <argument><expr><name pos:line="68" pos:column="54">exception</name></expr></argument>, <argument><expr><op:operator pos:line="68" pos:column="65">new</op:operator> <name><name pos:line="68" pos:column="69">object</name><index pos:line="68" pos:column="75">[]</index></name> <block pos:line="68" pos:column="78">{ <expr><lit:literal type="string" pos:line="68" pos:column="80">"One"</lit:literal></expr><op:operator pos:line="68" pos:column="85">,</op:operator> <expr><lit:literal type="number" pos:line="68" pos:column="87">2</lit:literal></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="70" pos:column="13">loggerMock</name><op:operator pos:line="70" pos:column="23">.</op:operator><name pos:line="70" pos:column="24">Verify</name></name><argument_list pos:line="70" pos:column="30">(<argument><expr><lambda><name pos:line="70" pos:column="31">l</name> <op:operator pos:line="70" pos:column="33">=&gt;</op:operator> <call><name><name pos:line="70" pos:column="36">l</name><op:operator pos:line="70" pos:column="37">.</op:operator><name pos:line="70" pos:column="38">Info</name></name><argument_list pos:line="70" pos:column="42">(<argument><expr><call><name><name pos:line="70" pos:column="43">It</name><op:operator pos:line="70" pos:column="45">.</op:operator><name><name pos:line="70" pos:column="46">IsAny</name><argument_list pos:line="70" pos:column="51">&lt;<argument><name pos:line="70" pos:column="52">string</name></argument>&gt;</argument_list></name></name><argument_list pos:line="70" pos:column="59">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="70" pos:column="63">exception</name></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="70" pos:column="75">Times</name><op:operator pos:line="70" pos:column="80">.</op:operator><name pos:line="70" pos:column="81">Once</name></name><argument_list pos:line="70" pos:column="85">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="73" pos:column="9">[<expr><name pos:line="73" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="74" pos:column="9">public</specifier> <name pos:line="74" pos:column="16">void</name></type> <name pos:line="74" pos:column="21">CallAbstractWarn</name><parameter_list pos:line="74" pos:column="37">()</parameter_list>
        <block pos:line="75" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="76" pos:column="13">var</name></type> <name pos:line="76" pos:column="17">loggerMock</name> <init pos:line="76" pos:column="28">= <expr><op:operator pos:line="76" pos:column="30">new</op:operator> <call><name><name pos:line="76" pos:column="34">Mock</name><argument_list pos:line="76" pos:column="38">&lt;<argument><name pos:line="76" pos:column="39">LoggerBase</name></argument>&gt;</argument_list></name><argument_list pos:line="76" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="78" pos:column="13">loggerMock</name><op:operator pos:line="78" pos:column="23">.</op:operator><name pos:line="78" pos:column="24">Object</name><op:operator pos:line="78" pos:column="30">.</op:operator><name pos:line="78" pos:column="31">Warn</name></name><argument_list pos:line="78" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="78" pos:column="36">"message Format"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="78" pos:column="54">new</op:operator> <name><name pos:line="78" pos:column="58">object</name><index pos:line="78" pos:column="64">[]</index></name> <block pos:line="78" pos:column="67">{ <expr><lit:literal type="string" pos:line="78" pos:column="69">"One"</lit:literal></expr><op:operator pos:line="78" pos:column="74">,</op:operator> <expr><lit:literal type="number" pos:line="78" pos:column="76">2</lit:literal></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="80" pos:column="13">loggerMock</name><op:operator pos:line="80" pos:column="23">.</op:operator><name pos:line="80" pos:column="24">Verify</name></name><argument_list pos:line="80" pos:column="30">(<argument><expr><lambda><name pos:line="80" pos:column="31">l</name> <op:operator pos:line="80" pos:column="33">=&gt;</op:operator> <call><name><name pos:line="80" pos:column="36">l</name><op:operator pos:line="80" pos:column="37">.</op:operator><name pos:line="80" pos:column="38">Warn</name></name><argument_list pos:line="80" pos:column="42">(<argument><expr><call><name><name pos:line="80" pos:column="43">It</name><op:operator pos:line="80" pos:column="45">.</op:operator><name><name pos:line="80" pos:column="46">IsAny</name><argument_list pos:line="80" pos:column="51">&lt;<argument><name pos:line="80" pos:column="52">string</name></argument>&gt;</argument_list></name></name><argument_list pos:line="80" pos:column="59">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="80" pos:column="64">Times</name><op:operator pos:line="80" pos:column="69">.</op:operator><name pos:line="80" pos:column="70">Once</name></name><argument_list pos:line="80" pos:column="74">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="83" pos:column="9">[<expr><name pos:line="83" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="84" pos:column="9">public</specifier> <name pos:line="84" pos:column="16">void</name></type> <name pos:line="84" pos:column="21">CallAbstractWarnWithException</name><parameter_list pos:line="84" pos:column="50">()</parameter_list>
        <block pos:line="85" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="86" pos:column="13">var</name></type> <name pos:line="86" pos:column="17">loggerMock</name> <init pos:line="86" pos:column="28">= <expr><op:operator pos:line="86" pos:column="30">new</op:operator> <call><name><name pos:line="86" pos:column="34">Mock</name><argument_list pos:line="86" pos:column="38">&lt;<argument><name pos:line="86" pos:column="39">LoggerBase</name></argument>&gt;</argument_list></name><argument_list pos:line="86" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="87" pos:column="13">var</name></type> <name pos:line="87" pos:column="17">exception</name> <init pos:line="87" pos:column="27">= <expr><op:operator pos:line="87" pos:column="29">new</op:operator> <call><name pos:line="87" pos:column="33">DummyException</name><argument_list pos:line="87" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="89" pos:column="13">loggerMock</name><op:operator pos:line="89" pos:column="23">.</op:operator><name pos:line="89" pos:column="24">Object</name><op:operator pos:line="89" pos:column="30">.</op:operator><name pos:line="89" pos:column="31">Warn</name></name><argument_list pos:line="89" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="89" pos:column="36">"message Format"</lit:literal></expr></argument>, <argument><expr><name pos:line="89" pos:column="54">exception</name></expr></argument>, <argument><expr><op:operator pos:line="89" pos:column="65">new</op:operator> <name><name pos:line="89" pos:column="69">object</name><index pos:line="89" pos:column="75">[]</index></name> <block pos:line="89" pos:column="78">{ <expr><lit:literal type="string" pos:line="89" pos:column="80">"One"</lit:literal></expr><op:operator pos:line="89" pos:column="85">,</op:operator> <expr><lit:literal type="number" pos:line="89" pos:column="87">2</lit:literal></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="91" pos:column="13">loggerMock</name><op:operator pos:line="91" pos:column="23">.</op:operator><name pos:line="91" pos:column="24">Verify</name></name><argument_list pos:line="91" pos:column="30">(<argument><expr><lambda><name pos:line="91" pos:column="31">l</name> <op:operator pos:line="91" pos:column="33">=&gt;</op:operator> <call><name><name pos:line="91" pos:column="36">l</name><op:operator pos:line="91" pos:column="37">.</op:operator><name pos:line="91" pos:column="38">Warn</name></name><argument_list pos:line="91" pos:column="42">(<argument><expr><call><name><name pos:line="91" pos:column="43">It</name><op:operator pos:line="91" pos:column="45">.</op:operator><name><name pos:line="91" pos:column="46">IsAny</name><argument_list pos:line="91" pos:column="51">&lt;<argument><name pos:line="91" pos:column="52">string</name></argument>&gt;</argument_list></name></name><argument_list pos:line="91" pos:column="59">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="91" pos:column="63">exception</name></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="91" pos:column="75">Times</name><op:operator pos:line="91" pos:column="80">.</op:operator><name pos:line="91" pos:column="81">Once</name></name><argument_list pos:line="91" pos:column="85">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="94" pos:column="9">[<expr><name pos:line="94" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="95" pos:column="9">public</specifier> <name pos:line="95" pos:column="16">void</name></type> <name pos:line="95" pos:column="21">CallAbstractError</name><parameter_list pos:line="95" pos:column="38">()</parameter_list>
        <block pos:line="96" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="97" pos:column="13">var</name></type> <name pos:line="97" pos:column="17">loggerMock</name> <init pos:line="97" pos:column="28">= <expr><op:operator pos:line="97" pos:column="30">new</op:operator> <call><name><name pos:line="97" pos:column="34">Mock</name><argument_list pos:line="97" pos:column="38">&lt;<argument><name pos:line="97" pos:column="39">LoggerBase</name></argument>&gt;</argument_list></name><argument_list pos:line="97" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="99" pos:column="13">loggerMock</name><op:operator pos:line="99" pos:column="23">.</op:operator><name pos:line="99" pos:column="24">Object</name><op:operator pos:line="99" pos:column="30">.</op:operator><name pos:line="99" pos:column="31">Error</name></name><argument_list pos:line="99" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="99" pos:column="37">"message Format"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="99" pos:column="55">new</op:operator> <name><name pos:line="99" pos:column="59">object</name><index pos:line="99" pos:column="65">[]</index></name> <block pos:line="99" pos:column="68">{ <expr><lit:literal type="string" pos:line="99" pos:column="70">"One"</lit:literal></expr><op:operator pos:line="99" pos:column="75">,</op:operator> <expr><lit:literal type="number" pos:line="99" pos:column="77">2</lit:literal></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="101" pos:column="13">loggerMock</name><op:operator pos:line="101" pos:column="23">.</op:operator><name pos:line="101" pos:column="24">Verify</name></name><argument_list pos:line="101" pos:column="30">(<argument><expr><lambda><name pos:line="101" pos:column="31">l</name> <op:operator pos:line="101" pos:column="33">=&gt;</op:operator> <call><name><name pos:line="101" pos:column="36">l</name><op:operator pos:line="101" pos:column="37">.</op:operator><name pos:line="101" pos:column="38">Error</name></name><argument_list pos:line="101" pos:column="43">(<argument><expr><call><name><name pos:line="101" pos:column="44">It</name><op:operator pos:line="101" pos:column="46">.</op:operator><name><name pos:line="101" pos:column="47">IsAny</name><argument_list pos:line="101" pos:column="52">&lt;<argument><name pos:line="101" pos:column="53">string</name></argument>&gt;</argument_list></name></name><argument_list pos:line="101" pos:column="60">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="101" pos:column="65">Times</name><op:operator pos:line="101" pos:column="70">.</op:operator><name pos:line="101" pos:column="71">Once</name></name><argument_list pos:line="101" pos:column="75">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="104" pos:column="9">[<expr><name pos:line="104" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="105" pos:column="9">public</specifier> <name pos:line="105" pos:column="16">void</name></type> <name pos:line="105" pos:column="21">CallAbstractErrorWithException</name><parameter_list pos:line="105" pos:column="51">()</parameter_list>
        <block pos:line="106" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="107" pos:column="13">var</name></type> <name pos:line="107" pos:column="17">loggerMock</name> <init pos:line="107" pos:column="28">= <expr><op:operator pos:line="107" pos:column="30">new</op:operator> <call><name><name pos:line="107" pos:column="34">Mock</name><argument_list pos:line="107" pos:column="38">&lt;<argument><name pos:line="107" pos:column="39">LoggerBase</name></argument>&gt;</argument_list></name><argument_list pos:line="107" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="108" pos:column="13">var</name></type> <name pos:line="108" pos:column="17">exception</name> <init pos:line="108" pos:column="27">= <expr><op:operator pos:line="108" pos:column="29">new</op:operator> <call><name pos:line="108" pos:column="33">DummyException</name><argument_list pos:line="108" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="110" pos:column="13">loggerMock</name><op:operator pos:line="110" pos:column="23">.</op:operator><name pos:line="110" pos:column="24">Object</name><op:operator pos:line="110" pos:column="30">.</op:operator><name pos:line="110" pos:column="31">Error</name></name><argument_list pos:line="110" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="110" pos:column="37">"message Format"</lit:literal></expr></argument>, <argument><expr><name pos:line="110" pos:column="55">exception</name></expr></argument>, <argument><expr><op:operator pos:line="110" pos:column="66">new</op:operator> <name><name pos:line="110" pos:column="70">object</name><index pos:line="110" pos:column="76">[]</index></name> <block pos:line="110" pos:column="79">{ <expr><lit:literal type="string" pos:line="110" pos:column="81">"One"</lit:literal></expr><op:operator pos:line="110" pos:column="86">,</op:operator> <expr><lit:literal type="number" pos:line="110" pos:column="88">2</lit:literal></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="112" pos:column="13">loggerMock</name><op:operator pos:line="112" pos:column="23">.</op:operator><name pos:line="112" pos:column="24">Verify</name></name><argument_list pos:line="112" pos:column="30">(<argument><expr><lambda><name pos:line="112" pos:column="31">l</name> <op:operator pos:line="112" pos:column="33">=&gt;</op:operator> <call><name><name pos:line="112" pos:column="36">l</name><op:operator pos:line="112" pos:column="37">.</op:operator><name pos:line="112" pos:column="38">Error</name></name><argument_list pos:line="112" pos:column="43">(<argument><expr><call><name><name pos:line="112" pos:column="44">It</name><op:operator pos:line="112" pos:column="46">.</op:operator><name><name pos:line="112" pos:column="47">IsAny</name><argument_list pos:line="112" pos:column="52">&lt;<argument><name pos:line="112" pos:column="53">string</name></argument>&gt;</argument_list></name></name><argument_list pos:line="112" pos:column="60">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="112" pos:column="64">exception</name></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="112" pos:column="76">Times</name><op:operator pos:line="112" pos:column="81">.</op:operator><name pos:line="112" pos:column="82">Once</name></name><argument_list pos:line="112" pos:column="86">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="115" pos:column="9">[<expr><name pos:line="115" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="116" pos:column="9">public</specifier> <name pos:line="116" pos:column="16">void</name></type> <name pos:line="116" pos:column="21">CallAbstractFatal</name><parameter_list pos:line="116" pos:column="38">()</parameter_list>
        <block pos:line="117" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="118" pos:column="13">var</name></type> <name pos:line="118" pos:column="17">loggerMock</name> <init pos:line="118" pos:column="28">= <expr><op:operator pos:line="118" pos:column="30">new</op:operator> <call><name><name pos:line="118" pos:column="34">Mock</name><argument_list pos:line="118" pos:column="38">&lt;<argument><name pos:line="118" pos:column="39">LoggerBase</name></argument>&gt;</argument_list></name><argument_list pos:line="118" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="120" pos:column="13">loggerMock</name><op:operator pos:line="120" pos:column="23">.</op:operator><name pos:line="120" pos:column="24">Object</name><op:operator pos:line="120" pos:column="30">.</op:operator><name pos:line="120" pos:column="31">Fatal</name></name><argument_list pos:line="120" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="120" pos:column="37">"message Format"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="120" pos:column="55">new</op:operator> <name><name pos:line="120" pos:column="59">object</name><index pos:line="120" pos:column="65">[]</index></name> <block pos:line="120" pos:column="68">{ <expr><lit:literal type="string" pos:line="120" pos:column="70">"One"</lit:literal></expr><op:operator pos:line="120" pos:column="75">,</op:operator> <expr><lit:literal type="number" pos:line="120" pos:column="77">2</lit:literal></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="122" pos:column="13">loggerMock</name><op:operator pos:line="122" pos:column="23">.</op:operator><name pos:line="122" pos:column="24">Verify</name></name><argument_list pos:line="122" pos:column="30">(<argument><expr><lambda><name pos:line="122" pos:column="31">l</name> <op:operator pos:line="122" pos:column="33">=&gt;</op:operator> <call><name><name pos:line="122" pos:column="36">l</name><op:operator pos:line="122" pos:column="37">.</op:operator><name pos:line="122" pos:column="38">Fatal</name></name><argument_list pos:line="122" pos:column="43">(<argument><expr><call><name><name pos:line="122" pos:column="44">It</name><op:operator pos:line="122" pos:column="46">.</op:operator><name><name pos:line="122" pos:column="47">IsAny</name><argument_list pos:line="122" pos:column="52">&lt;<argument><name pos:line="122" pos:column="53">string</name></argument>&gt;</argument_list></name></name><argument_list pos:line="122" pos:column="60">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="122" pos:column="65">Times</name><op:operator pos:line="122" pos:column="70">.</op:operator><name pos:line="122" pos:column="71">Once</name></name><argument_list pos:line="122" pos:column="75">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="125" pos:column="9">[<expr><name pos:line="125" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="126" pos:column="9">public</specifier> <name pos:line="126" pos:column="16">void</name></type> <name pos:line="126" pos:column="21">CallAbstractFatalWithException</name><parameter_list pos:line="126" pos:column="51">()</parameter_list>
        <block pos:line="127" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="128" pos:column="13">var</name></type> <name pos:line="128" pos:column="17">loggerMock</name> <init pos:line="128" pos:column="28">= <expr><op:operator pos:line="128" pos:column="30">new</op:operator> <call><name><name pos:line="128" pos:column="34">Mock</name><argument_list pos:line="128" pos:column="38">&lt;<argument><name pos:line="128" pos:column="39">LoggerBase</name></argument>&gt;</argument_list></name><argument_list pos:line="128" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="129" pos:column="13">var</name></type> <name pos:line="129" pos:column="17">exception</name> <init pos:line="129" pos:column="27">= <expr><op:operator pos:line="129" pos:column="29">new</op:operator> <call><name pos:line="129" pos:column="33">DummyException</name><argument_list pos:line="129" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="131" pos:column="13">loggerMock</name><op:operator pos:line="131" pos:column="23">.</op:operator><name pos:line="131" pos:column="24">Object</name><op:operator pos:line="131" pos:column="30">.</op:operator><name pos:line="131" pos:column="31">Fatal</name></name><argument_list pos:line="131" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="131" pos:column="37">"message Format"</lit:literal></expr></argument>, <argument><expr><name pos:line="131" pos:column="55">exception</name></expr></argument>, <argument><expr><op:operator pos:line="131" pos:column="66">new</op:operator> <name><name pos:line="131" pos:column="70">object</name><index pos:line="131" pos:column="76">[]</index></name> <block pos:line="131" pos:column="79">{ <expr><lit:literal type="string" pos:line="131" pos:column="81">"One"</lit:literal></expr><op:operator pos:line="131" pos:column="86">,</op:operator> <expr><lit:literal type="number" pos:line="131" pos:column="88">2</lit:literal></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="133" pos:column="13">loggerMock</name><op:operator pos:line="133" pos:column="23">.</op:operator><name pos:line="133" pos:column="24">Verify</name></name><argument_list pos:line="133" pos:column="30">(<argument><expr><lambda><name pos:line="133" pos:column="31">l</name> <op:operator pos:line="133" pos:column="33">=&gt;</op:operator> <call><name><name pos:line="133" pos:column="36">l</name><op:operator pos:line="133" pos:column="37">.</op:operator><name pos:line="133" pos:column="38">Fatal</name></name><argument_list pos:line="133" pos:column="43">(<argument><expr><call><name><name pos:line="133" pos:column="44">It</name><op:operator pos:line="133" pos:column="46">.</op:operator><name><name pos:line="133" pos:column="47">IsAny</name><argument_list pos:line="133" pos:column="52">&lt;<argument><name pos:line="133" pos:column="53">string</name></argument>&gt;</argument_list></name></name><argument_list pos:line="133" pos:column="60">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="133" pos:column="64">exception</name></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="133" pos:column="76">Times</name><op:operator pos:line="133" pos:column="81">.</op:operator><name pos:line="133" pos:column="82">Once</name></name><argument_list pos:line="133" pos:column="86">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
