<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Mvc\Inspector\ExecutionShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Web</name><op:operator pos:line="4" pos:column="17">.</op:operator><name pos:line="4" pos:column="18">Mvc</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Glimpse</name><op:operator pos:line="5" pos:column="14">.</op:operator><name pos:line="5" pos:column="15">Core</name><op:operator pos:line="5" pos:column="19">.</op:operator><name pos:line="5" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Glimpse</name><op:operator pos:line="6" pos:column="14">.</op:operator><name pos:line="6" pos:column="15">Mvc</name><op:operator pos:line="6" pos:column="18">.</op:operator><name pos:line="6" pos:column="19">Inspector</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Glimpse</name><op:operator pos:line="7" pos:column="14">.</op:operator><name pos:line="7" pos:column="15">Test</name><op:operator pos:line="7" pos:column="19">.</op:operator><name pos:line="7" pos:column="20">Common</name></name>;</using>
<using pos:line="8" pos:column="1">using <name pos:line="8" pos:column="7">Moq</name>;</using>
<using pos:line="9" pos:column="1">using <name pos:line="9" pos:column="7">Xunit</name>;</using>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">Xunit</name><op:operator pos:line="10" pos:column="12">.</op:operator><name pos:line="10" pos:column="13">Extensions</name></name>;</using>

<namespace pos:line="12" pos:column="1">namespace <name><name pos:line="12" pos:column="11">Glimpse</name><op:operator pos:line="12" pos:column="18">.</op:operator><name pos:line="12" pos:column="19">Test</name><op:operator pos:line="12" pos:column="23">.</op:operator><name pos:line="12" pos:column="24">Mvc</name><op:operator pos:line="12" pos:column="27">.</op:operator><name pos:line="12" pos:column="28">Inspector</name></name>
<block pos:line="13" pos:column="1">{
    <class><specifier pos:line="14" pos:column="5">public</specifier> class <name pos:line="14" pos:column="18">ExecutionShould</name> <super pos:line="14" pos:column="34">: <name pos:line="14" pos:column="36">IDisposable</name></super>
    <block pos:line="15" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="16" pos:column="9">private</specifier> <specifier pos:line="16" pos:column="17">readonly</specifier> <name pos:line="16" pos:column="26">IControllerFactory</name></type> <name pos:line="16" pos:column="45">controllerFactory</name></decl>;</decl_stmt>

        <constructor><specifier pos:line="18" pos:column="9">public</specifier> <name pos:line="18" pos:column="16">ExecutionShould</name><parameter_list pos:line="18" pos:column="31">()</parameter_list>
        <block pos:line="19" pos:column="9">{
            <expr_stmt><expr><name pos:line="20" pos:column="13">controllerFactory</name> <op:operator pos:line="20" pos:column="31">=</op:operator> <call><name><name pos:line="20" pos:column="33">ControllerBuilder</name><op:operator pos:line="20" pos:column="50">.</op:operator><name pos:line="20" pos:column="51">Current</name><op:operator pos:line="20" pos:column="58">.</op:operator><name pos:line="20" pos:column="59">GetControllerFactory</name></name><argument_list pos:line="20" pos:column="79">()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><attribute pos:line="23" pos:column="9">[<expr><name pos:line="23" pos:column="10">Theory</name></expr><op:operator pos:line="23" pos:column="16">,</op:operator> <expr><name pos:line="23" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="24" pos:column="9">public</specifier> <name pos:line="24" pos:column="16">void</name></type> <name pos:line="24" pos:column="21">ContinueIfUnableToProxyControllerFactory</name><parameter_list pos:line="24" pos:column="61">(<param><decl><type><name pos:line="24" pos:column="62">ExecutionInspector</name></type> <name pos:line="24" pos:column="81">sut</name></decl></param>, <param><decl><type><name pos:line="24" pos:column="86">IInspectorContext</name></type> <name pos:line="24" pos:column="104">context</name></decl></param>)</parameter_list>
        <block pos:line="25" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="26" pos:column="13">context</name><op:operator pos:line="26" pos:column="20">.</op:operator><name pos:line="26" pos:column="21">ProxyFactory</name><op:operator pos:line="26" pos:column="33">.</op:operator><name pos:line="26" pos:column="34">Setup</name></name><argument_list pos:line="26" pos:column="39">(<argument><expr><lambda><name pos:line="26" pos:column="40">f</name> <op:operator pos:line="26" pos:column="42">=&gt;</op:operator> <call><name><name pos:line="26" pos:column="45">f</name><op:operator pos:line="26" pos:column="46">.</op:operator><name pos:line="26" pos:column="47">IsWrapClassEligible</name></name><argument_list pos:line="26" pos:column="66">(<argument><expr><call><name><name pos:line="26" pos:column="67">It</name><op:operator pos:line="26" pos:column="69">.</op:operator><name><name pos:line="26" pos:column="70">IsAny</name><argument_list pos:line="26" pos:column="75">&lt;<argument><name pos:line="26" pos:column="76">Type</name></argument>&gt;</argument_list></name></name><argument_list pos:line="26" pos:column="81">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="26" pos:column="85">.</op:operator><call><name pos:line="26" pos:column="86">Returns</name><argument_list pos:line="26" pos:column="93">(<argument><expr><lit:literal type="boolean" pos:line="26" pos:column="94">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="28" pos:column="13">sut</name><op:operator pos:line="28" pos:column="16">.</op:operator><name pos:line="28" pos:column="17">Setup</name></name><argument_list pos:line="28" pos:column="22">(<argument><expr><name pos:line="28" pos:column="23">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="30" pos:column="13">Assert</name><op:operator pos:line="30" pos:column="19">.</op:operator><name><name pos:line="30" pos:column="20">IsType</name><argument_list pos:line="30" pos:column="26">&lt;<argument><name pos:line="30" pos:column="27">DefaultControllerFactory</name></argument>&gt;</argument_list></name></name><argument_list pos:line="30" pos:column="52">(<argument><expr><call><name><name pos:line="30" pos:column="53">ControllerBuilder</name><op:operator pos:line="30" pos:column="70">.</op:operator><name pos:line="30" pos:column="71">Current</name><op:operator pos:line="30" pos:column="78">.</op:operator><name pos:line="30" pos:column="79">GetControllerFactory</name></name><argument_list pos:line="30" pos:column="99">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="33" pos:column="9">[<expr><name pos:line="33" pos:column="10">Theory</name></expr><op:operator pos:line="33" pos:column="16">,</op:operator> <expr><name pos:line="33" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="34" pos:column="9">public</specifier> <name pos:line="34" pos:column="16">void</name></type> <name pos:line="34" pos:column="21">ProxyControllerFactory</name><parameter_list pos:line="34" pos:column="43">(<param><decl><type><name pos:line="34" pos:column="44">ExecutionInspector</name></type> <name pos:line="34" pos:column="63">sut</name></decl></param>, <param><decl><type><name pos:line="34" pos:column="68">IInspectorContext</name></type> <name pos:line="34" pos:column="86">context</name></decl></param>, <param><decl><type><name pos:line="34" pos:column="95">IControllerFactory</name></type> <name pos:line="34" pos:column="114">controllerFactory</name></decl></param>)</parameter_list>
        <block pos:line="35" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="36" pos:column="13">context</name><op:operator pos:line="36" pos:column="20">.</op:operator><name pos:line="36" pos:column="21">ProxyFactory</name><op:operator pos:line="36" pos:column="33">.</op:operator><name pos:line="36" pos:column="34">Setup</name></name><argument_list pos:line="36" pos:column="39">(<argument><expr><lambda><name pos:line="36" pos:column="40">f</name> <op:operator pos:line="36" pos:column="42">=&gt;</op:operator> <call><name><name pos:line="36" pos:column="45">f</name><op:operator pos:line="36" pos:column="46">.</op:operator><name><name pos:line="36" pos:column="47">IsWrapInterfaceEligible</name><argument_list pos:line="36" pos:column="70">&lt;<argument><name pos:line="36" pos:column="71">IControllerFactory</name></argument>&gt;</argument_list></name></name><argument_list pos:line="36" pos:column="90">(<argument><expr><call><name><name pos:line="36" pos:column="91">It</name><op:operator pos:line="36" pos:column="93">.</op:operator><name><name pos:line="36" pos:column="94">IsAny</name><argument_list pos:line="36" pos:column="99">&lt;<argument><name pos:line="36" pos:column="100">Type</name></argument>&gt;</argument_list></name></name><argument_list pos:line="36" pos:column="105">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="36" pos:column="109">.</op:operator><call><name pos:line="36" pos:column="110">Returns</name><argument_list pos:line="36" pos:column="117">(<argument><expr><lit:literal type="boolean" pos:line="36" pos:column="118">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="37" pos:column="13">context</name><op:operator pos:line="37" pos:column="20">.</op:operator><name pos:line="37" pos:column="21">ProxyFactory</name><op:operator pos:line="37" pos:column="33">.</op:operator><name pos:line="37" pos:column="34">Setup</name></name><argument_list pos:line="37" pos:column="39">(<argument><expr><lambda><name pos:line="37" pos:column="40">f</name> <op:operator pos:line="37" pos:column="42">=&gt;</op:operator> <call><name><name pos:line="37" pos:column="45">f</name><op:operator pos:line="37" pos:column="46">.</op:operator><name pos:line="37" pos:column="47">WrapInterface</name></name><argument_list pos:line="37" pos:column="60">(<argument><expr><call><name><name pos:line="37" pos:column="61">It</name><op:operator pos:line="37" pos:column="63">.</op:operator><name><name pos:line="37" pos:column="64">IsAny</name><argument_list pos:line="37" pos:column="69">&lt;<argument><name pos:line="37" pos:column="70">IControllerFactory</name></argument>&gt;</argument_list></name></name><argument_list pos:line="37" pos:column="89">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="37" pos:column="93">It</name><op:operator pos:line="37" pos:column="95">.</op:operator><name><name pos:line="37" pos:column="96">IsAny</name><argument_list pos:line="37" pos:column="101">&lt;<argument><name><name pos:line="37" pos:column="102">IEnumerable</name><argument_list pos:line="37" pos:column="113">&lt;<argument><name pos:line="37" pos:column="114">IAlternateMethod</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name><argument_list pos:line="37" pos:column="132">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="37" pos:column="136">Enumerable</name><op:operator pos:line="37" pos:column="146">.</op:operator><name><name pos:line="37" pos:column="147">Empty</name><argument_list pos:line="37" pos:column="152">&lt;<argument><name pos:line="37" pos:column="153">object</name></argument>&gt;</argument_list></name></name><argument_list pos:line="37" pos:column="160">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="37" pos:column="164">.</op:operator><call><name pos:line="37" pos:column="165">Returns</name><argument_list pos:line="37" pos:column="172">(<argument><expr><name pos:line="37" pos:column="173">controllerFactory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="39" pos:column="13">sut</name><op:operator pos:line="39" pos:column="16">.</op:operator><name pos:line="39" pos:column="17">Setup</name></name><argument_list pos:line="39" pos:column="22">(<argument><expr><name pos:line="39" pos:column="23">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="41" pos:column="13">Assert</name><op:operator pos:line="41" pos:column="19">.</op:operator><name pos:line="41" pos:column="20">Equal</name></name><argument_list pos:line="41" pos:column="25">(<argument><expr><call><name><name pos:line="41" pos:column="26">ControllerBuilder</name><op:operator pos:line="41" pos:column="43">.</op:operator><name pos:line="41" pos:column="44">Current</name><op:operator pos:line="41" pos:column="51">.</op:operator><name pos:line="41" pos:column="52">GetControllerFactory</name></name><argument_list pos:line="41" pos:column="72">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="41" pos:column="76">controllerFactory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="42" pos:column="13">context</name><op:operator pos:line="42" pos:column="20">.</op:operator><name pos:line="42" pos:column="21">Logger</name><op:operator pos:line="42" pos:column="27">.</op:operator><name pos:line="42" pos:column="28">Verify</name></name><argument_list pos:line="42" pos:column="34">(<argument><expr><lambda><name pos:line="42" pos:column="35">l</name> <op:operator pos:line="42" pos:column="37">=&gt;</op:operator> <call><name><name pos:line="42" pos:column="40">l</name><op:operator pos:line="42" pos:column="41">.</op:operator><name pos:line="42" pos:column="42">Debug</name></name><argument_list pos:line="42" pos:column="47">(<argument><expr><call><name><name pos:line="42" pos:column="48">It</name><op:operator pos:line="42" pos:column="50">.</op:operator><name><name pos:line="42" pos:column="51">Is</name><argument_list pos:line="42" pos:column="53">&lt;<argument><name pos:line="42" pos:column="54">string</name></argument>&gt;</argument_list></name></name><argument_list pos:line="42" pos:column="61">(<argument><expr><lambda><name pos:line="42" pos:column="62">s</name> <op:operator pos:line="42" pos:column="64">=&gt;</op:operator> <call><name><name pos:line="42" pos:column="67">s</name><op:operator pos:line="42" pos:column="68">.</op:operator><name pos:line="42" pos:column="69">Contains</name></name><argument_list pos:line="42" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="42" pos:column="78">"IControllerFactory"</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="42" pos:column="102">It</name><op:operator pos:line="42" pos:column="104">.</op:operator><name><name pos:line="42" pos:column="105">IsAny</name><argument_list pos:line="42" pos:column="110">&lt;<argument><name><name pos:line="42" pos:column="111">object</name><index pos:line="42" pos:column="117">[]</index></name></argument>&gt;</argument_list></name></name><argument_list pos:line="42" pos:column="120">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="45" pos:column="9">public</specifier> <name pos:line="45" pos:column="16">void</name></type> <name pos:line="45" pos:column="21">Dispose</name><parameter_list pos:line="45" pos:column="28">()</parameter_list>
        <block pos:line="46" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="47" pos:column="13">ControllerBuilder</name><op:operator pos:line="47" pos:column="30">.</op:operator><name pos:line="47" pos:column="31">Current</name><op:operator pos:line="47" pos:column="38">.</op:operator><name pos:line="47" pos:column="39">SetControllerFactory</name></name><argument_list pos:line="47" pos:column="59">(<argument><expr><name pos:line="47" pos:column="60">controllerFactory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
