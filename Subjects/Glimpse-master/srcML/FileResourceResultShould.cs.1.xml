<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Core\Extensibility\FileResourceResultShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">Glimpse</name><op:operator pos:line="2" pos:column="14">.</op:operator><name pos:line="2" pos:column="15">Core</name><op:operator pos:line="2" pos:column="19">.</op:operator><name pos:line="2" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Glimpse</name><op:operator pos:line="3" pos:column="14">.</op:operator><name pos:line="3" pos:column="15">Core</name><op:operator pos:line="3" pos:column="19">.</op:operator><name pos:line="3" pos:column="20">Framework</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Core</name><op:operator pos:line="4" pos:column="19">.</op:operator><name pos:line="4" pos:column="20">ResourceResult</name></name>;</using>
<using pos:line="5" pos:column="1">using <name pos:line="5" pos:column="7">Moq</name>;</using>
<using pos:line="6" pos:column="1">using <name pos:line="6" pos:column="7">Xunit</name>;</using>

<namespace pos:line="8" pos:column="1">namespace <name><name pos:line="8" pos:column="11">Glimpse</name><op:operator pos:line="8" pos:column="18">.</op:operator><name pos:line="8" pos:column="19">Test</name><op:operator pos:line="8" pos:column="23">.</op:operator><name pos:line="8" pos:column="24">Core</name><op:operator pos:line="8" pos:column="28">.</op:operator><name pos:line="8" pos:column="29">Extensibility</name></name>
<block pos:line="9" pos:column="1">{
    <class><specifier pos:line="10" pos:column="5">public</specifier> class <name pos:line="10" pos:column="18">FileResourceResultShould</name>
    <block pos:line="11" pos:column="5">{
        <function><type><attribute pos:line="12" pos:column="9">[<expr><name pos:line="12" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="13" pos:column="9">public</specifier> <name pos:line="13" pos:column="16">void</name></type> <name pos:line="13" pos:column="21">Consturct</name><parameter_list pos:line="13" pos:column="30">()</parameter_list>
        <block pos:line="14" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="15" pos:column="13">var</name></type> <name pos:line="15" pos:column="17">array</name> <init pos:line="15" pos:column="23">= <expr><op:operator pos:line="15" pos:column="25">new</op:operator> <name><name pos:line="15" pos:column="29">byte</name><index pos:line="15" pos:column="33">[<expr><lit:literal type="number" pos:line="15" pos:column="34">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="16" pos:column="13">var</name></type> <name pos:line="16" pos:column="17">contentType</name> <init pos:line="16" pos:column="29">= <expr><lit:literal type="string" pos:line="16" pos:column="31">"content/type"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="18" pos:column="13">var</name></type> <name pos:line="18" pos:column="17">result</name> <init pos:line="18" pos:column="24">= <expr><op:operator pos:line="18" pos:column="26">new</op:operator> <call><name pos:line="18" pos:column="30">FileResourceResult</name><argument_list pos:line="18" pos:column="48">(<argument><expr><name pos:line="18" pos:column="49">array</name></expr></argument>, <argument><expr><name pos:line="18" pos:column="56">contentType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="20" pos:column="13">Assert</name><op:operator pos:line="20" pos:column="19">.</op:operator><name pos:line="20" pos:column="20">Equal</name></name><argument_list pos:line="20" pos:column="25">(<argument><expr><name pos:line="20" pos:column="26">array</name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="33">result</name><op:operator pos:line="20" pos:column="39">.</op:operator><name pos:line="20" pos:column="40">Content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="21" pos:column="13">Assert</name><op:operator pos:line="21" pos:column="19">.</op:operator><name pos:line="21" pos:column="20">Equal</name></name><argument_list pos:line="21" pos:column="25">(<argument><expr><name pos:line="21" pos:column="26">contentType</name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="39">result</name><op:operator pos:line="21" pos:column="45">.</op:operator><name pos:line="21" pos:column="46">ContentType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="24" pos:column="9">[<expr><name pos:line="24" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="25" pos:column="9">public</specifier> <name pos:line="25" pos:column="16">void</name></type> <name pos:line="25" pos:column="21">ThrowExceptionWithNullContent</name><parameter_list pos:line="25" pos:column="50">()</parameter_list>
        <block pos:line="26" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="27" pos:column="13">Assert</name><op:operator pos:line="27" pos:column="19">.</op:operator><name><name pos:line="27" pos:column="20">Throws</name><argument_list pos:line="27" pos:column="26">&lt;<argument><name pos:line="27" pos:column="27">ArgumentNullException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="27" pos:column="49">(<argument><expr><lambda><parameter_list pos:line="27" pos:column="50">()</parameter_list> <op:operator pos:line="27" pos:column="53">=&gt;</op:operator> <op:operator pos:line="27" pos:column="56">new</op:operator> <call><name pos:line="27" pos:column="60">FileResourceResult</name><argument_list pos:line="27" pos:column="78">(<argument><expr><name pos:line="27" pos:column="79">null</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="27" pos:column="85">"contentType"</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="30" pos:column="9">[<expr><name pos:line="30" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="31" pos:column="9">public</specifier> <name pos:line="31" pos:column="16">void</name></type> <name pos:line="31" pos:column="21">ThrowExceptionWithNullContentType</name><parameter_list pos:line="31" pos:column="54">()</parameter_list>
        <block pos:line="32" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="33" pos:column="13">Assert</name><op:operator pos:line="33" pos:column="19">.</op:operator><name><name pos:line="33" pos:column="20">Throws</name><argument_list pos:line="33" pos:column="26">&lt;<argument><name pos:line="33" pos:column="27">ArgumentNullException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="33" pos:column="49">(<argument><expr><lambda><parameter_list pos:line="33" pos:column="50">()</parameter_list> <op:operator pos:line="33" pos:column="53">=&gt;</op:operator> <op:operator pos:line="33" pos:column="56">new</op:operator> <call><name pos:line="33" pos:column="60">FileResourceResult</name><argument_list pos:line="33" pos:column="78">(<argument><expr><op:operator pos:line="33" pos:column="79">new</op:operator> <name><name pos:line="33" pos:column="83">byte</name><index pos:line="33" pos:column="87">[<expr><lit:literal type="number" pos:line="33" pos:column="88">1</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="92">null</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="36" pos:column="9">[<expr><name pos:line="36" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="37" pos:column="9">public</specifier> <name pos:line="37" pos:column="16">void</name></type> <name pos:line="37" pos:column="21">Execute</name><parameter_list pos:line="37" pos:column="28">()</parameter_list>
        <block pos:line="38" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="39" pos:column="13">var</name></type> <name pos:line="39" pos:column="17">frameworkProviderMock</name> <init pos:line="39" pos:column="39">= <expr><op:operator pos:line="39" pos:column="41">new</op:operator> <call><name><name pos:line="39" pos:column="45">Mock</name><argument_list pos:line="39" pos:column="49">&lt;<argument><name pos:line="39" pos:column="50">IFrameworkProvider</name></argument>&gt;</argument_list></name><argument_list pos:line="39" pos:column="69">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="40" pos:column="13">var</name></type> <name pos:line="40" pos:column="17">contextMock</name> <init pos:line="40" pos:column="29">= <expr><op:operator pos:line="40" pos:column="31">new</op:operator> <call><name><name pos:line="40" pos:column="35">Mock</name><argument_list pos:line="40" pos:column="39">&lt;<argument><name pos:line="40" pos:column="40">IResourceResultContext</name></argument>&gt;</argument_list></name><argument_list pos:line="40" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="41" pos:column="13">contextMock</name><op:operator pos:line="41" pos:column="24">.</op:operator><name pos:line="41" pos:column="25">Setup</name></name><argument_list pos:line="41" pos:column="30">(<argument><expr><lambda><name pos:line="41" pos:column="31">c</name> <op:operator pos:line="41" pos:column="33">=&gt;</op:operator> <name><name pos:line="41" pos:column="36">c</name><op:operator pos:line="41" pos:column="37">.</op:operator><name pos:line="41" pos:column="38">FrameworkProvider</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="41" pos:column="56">.</op:operator><call><name pos:line="41" pos:column="57">Returns</name><argument_list pos:line="41" pos:column="64">(<argument><expr><name><name pos:line="41" pos:column="65">frameworkProviderMock</name><op:operator pos:line="41" pos:column="86">.</op:operator><name pos:line="41" pos:column="87">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="43" pos:column="13">var</name></type> <name pos:line="43" pos:column="17">array</name> <init pos:line="43" pos:column="23">= <expr><op:operator pos:line="43" pos:column="25">new</op:operator> <name><name pos:line="43" pos:column="29">byte</name><index pos:line="43" pos:column="33">[<expr><lit:literal type="number" pos:line="43" pos:column="34">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="44" pos:column="13">var</name></type> <name pos:line="44" pos:column="17">contentType</name> <init pos:line="44" pos:column="29">= <expr><lit:literal type="string" pos:line="44" pos:column="31">"content/type"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="46" pos:column="13">var</name></type> <name pos:line="46" pos:column="17">result</name> <init pos:line="46" pos:column="24">= <expr><op:operator pos:line="46" pos:column="26">new</op:operator> <call><name pos:line="46" pos:column="30">FileResourceResult</name><argument_list pos:line="46" pos:column="48">(<argument><expr><name pos:line="46" pos:column="49">array</name></expr></argument>, <argument><expr><name pos:line="46" pos:column="56">contentType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="48" pos:column="13">result</name><op:operator pos:line="48" pos:column="19">.</op:operator><name pos:line="48" pos:column="20">Execute</name></name><argument_list pos:line="48" pos:column="27">(<argument><expr><name><name pos:line="48" pos:column="28">contextMock</name><op:operator pos:line="48" pos:column="39">.</op:operator><name pos:line="48" pos:column="40">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="50" pos:column="13">frameworkProviderMock</name><op:operator pos:line="50" pos:column="34">.</op:operator><name pos:line="50" pos:column="35">Verify</name></name><argument_list pos:line="50" pos:column="41">(<argument><expr><lambda><name pos:line="50" pos:column="42">fp</name> <op:operator pos:line="50" pos:column="45">=&gt;</op:operator> <call><name><name pos:line="50" pos:column="48">fp</name><op:operator pos:line="50" pos:column="50">.</op:operator><name pos:line="50" pos:column="51">SetHttpResponseHeader</name></name><argument_list pos:line="50" pos:column="72">(<argument><expr><lit:literal type="string" pos:line="50" pos:column="73">"Content-Type"</lit:literal></expr></argument>, <argument><expr><name pos:line="50" pos:column="89">contentType</name></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="50" pos:column="103">Times</name><op:operator pos:line="50" pos:column="108">.</op:operator><name pos:line="50" pos:column="109">Once</name></name><argument_list pos:line="50" pos:column="113">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="51" pos:column="13">frameworkProviderMock</name><op:operator pos:line="51" pos:column="34">.</op:operator><name pos:line="51" pos:column="35">Verify</name></name><argument_list pos:line="51" pos:column="41">(<argument><expr><lambda><name pos:line="51" pos:column="42">fp</name> <op:operator pos:line="51" pos:column="45">=&gt;</op:operator> <call><name><name pos:line="51" pos:column="48">fp</name><op:operator pos:line="51" pos:column="50">.</op:operator><name pos:line="51" pos:column="51">WriteHttpResponse</name></name><argument_list pos:line="51" pos:column="68">(<argument><expr><name pos:line="51" pos:column="69">array</name></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="51" pos:column="77">Times</name><op:operator pos:line="51" pos:column="82">.</op:operator><name pos:line="51" pos:column="83">Once</name></name><argument_list pos:line="51" pos:column="87">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
