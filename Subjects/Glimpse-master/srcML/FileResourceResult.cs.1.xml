<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Core\ResourceResult\FileResourceResult.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">Glimpse</name><op:operator pos:line="2" pos:column="14">.</op:operator><name pos:line="2" pos:column="15">Core</name><op:operator pos:line="2" pos:column="19">.</op:operator><name pos:line="2" pos:column="20">Extensibility</name></name>;</using>

<namespace pos:line="4" pos:column="1">namespace <name><name pos:line="4" pos:column="11">Glimpse</name><op:operator pos:line="4" pos:column="18">.</op:operator><name pos:line="4" pos:column="19">Core</name><op:operator pos:line="4" pos:column="23">.</op:operator><name pos:line="4" pos:column="24">ResourceResult</name></name>
<block pos:line="5" pos:column="1">{
    <comment type="line" pos:line="6" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="7" pos:column="5">/// The &lt;see cref="IResourceResult"/&gt; implementation responsible returning binary files to a client.</comment>
    <comment type="line" pos:line="8" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="9" pos:column="5">public</specifier> class <name pos:line="9" pos:column="18">FileResourceResult</name> <super pos:line="9" pos:column="37">: <name pos:line="9" pos:column="39">IResourceResult</name></super>
    <block pos:line="10" pos:column="5">{
        <comment type="line" pos:line="11" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="12" pos:column="9">/// Initializes a new instance of the &lt;see cref="FileResourceResult" /&gt; class.</comment>
        <comment type="line" pos:line="13" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="14" pos:column="9">/// &lt;param name="content"&gt;The content.&lt;/param&gt;</comment>
        <comment type="line" pos:line="15" pos:column="9">/// &lt;param name="contentType"&gt;Type of the content.&lt;/param&gt;</comment>
        <comment type="line" pos:line="16" pos:column="9">/// &lt;exception cref="System.ArgumentNullException"&gt;Exception thrown if either &lt;paramref name="content"/&gt; or &lt;paramref name="contentType"/&gt; are &lt;c&gt;null&lt;/c&gt;.&lt;/exception&gt;</comment>
        <constructor><specifier pos:line="17" pos:column="9">public</specifier> <name pos:line="17" pos:column="16">FileResourceResult</name><parameter_list pos:line="17" pos:column="34">(<param><decl><type><name><name pos:line="17" pos:column="35">byte</name><index pos:line="17" pos:column="39">[]</index></name></type> <name pos:line="17" pos:column="42">content</name></decl></param>, <param><decl><type><name pos:line="17" pos:column="51">string</name></type> <name pos:line="17" pos:column="58">contentType</name></decl></param>)</parameter_list>
        <block pos:line="18" pos:column="9">{
            <if pos:line="19" pos:column="13">if <condition pos:line="19" pos:column="16">(<expr><name pos:line="19" pos:column="17">content</name> <op:operator pos:line="19" pos:column="25">==</op:operator> <name pos:line="19" pos:column="28">null</name></expr>)</condition><then pos:line="19" pos:column="33">
            <block pos:line="20" pos:column="13">{
                <throw pos:line="21" pos:column="17">throw <expr><op:operator pos:line="21" pos:column="23">new</op:operator> <call><name pos:line="21" pos:column="27">ArgumentNullException</name><argument_list pos:line="21" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="21" pos:column="49">"content"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <if pos:line="24" pos:column="13">if <condition pos:line="24" pos:column="16">(<expr><call><name><name pos:line="24" pos:column="17">string</name><op:operator pos:line="24" pos:column="23">.</op:operator><name pos:line="24" pos:column="24">IsNullOrEmpty</name></name><argument_list pos:line="24" pos:column="37">(<argument><expr><name pos:line="24" pos:column="38">contentType</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="24" pos:column="51">
            <block pos:line="25" pos:column="13">{
                <throw pos:line="26" pos:column="17">throw <expr><op:operator pos:line="26" pos:column="23">new</op:operator> <call><name pos:line="26" pos:column="27">ArgumentNullException</name><argument_list pos:line="26" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="26" pos:column="49">"contentType"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <expr_stmt><expr><name pos:line="29" pos:column="13">Content</name> <op:operator pos:line="29" pos:column="21">=</op:operator> <name pos:line="29" pos:column="23">content</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="30" pos:column="13">ContentType</name> <op:operator pos:line="30" pos:column="25">=</op:operator> <name pos:line="30" pos:column="27">contentType</name></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="33" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="34" pos:column="9">/// Gets or sets the content to send to the client.</comment>
        <comment type="line" pos:line="35" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="36" pos:column="9">/// &lt;value&gt;</comment>
        <comment type="line" pos:line="37" pos:column="9">/// The content.</comment>
        <comment type="line" pos:line="38" pos:column="9">/// &lt;/value&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="39" pos:column="9">public</specifier> <name pos:line="39" pos:column="16">byte</name><index pos:line="39" pos:column="20">[]</index></type> <name pos:line="39" pos:column="23">Content</name> <block pos:line="39" pos:column="31">{ <function_decl><name pos:line="39" pos:column="33">get</name>;</function_decl> <function_decl><name pos:line="39" pos:column="38">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="41" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="42" pos:column="9">/// Gets or sets the content type of the Content.</comment>
        <comment type="line" pos:line="43" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="44" pos:column="9">/// &lt;value&gt;</comment>
        <comment type="line" pos:line="45" pos:column="9">/// The content type.</comment>
        <comment type="line" pos:line="46" pos:column="9">/// &lt;/value&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="47" pos:column="9">public</specifier> <name pos:line="47" pos:column="16">string</name></type> <name pos:line="47" pos:column="23">ContentType</name> <block pos:line="47" pos:column="35">{ <function_decl><name pos:line="47" pos:column="37">get</name>;</function_decl> <function_decl><name pos:line="47" pos:column="42">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="49" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="50" pos:column="9">/// Executes the resource result with the specified context.</comment>
        <comment type="line" pos:line="51" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="52" pos:column="9">/// &lt;param name="context"&gt;The context.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="53" pos:column="9">public</specifier> <name pos:line="53" pos:column="16">void</name></type> <name pos:line="53" pos:column="21">Execute</name><parameter_list pos:line="53" pos:column="28">(<param><decl><type><name pos:line="53" pos:column="29">IResourceResultContext</name></type> <name pos:line="53" pos:column="52">context</name></decl></param>)</parameter_list>
        <block pos:line="54" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="55" pos:column="13">var</name></type> <name pos:line="55" pos:column="17">frameworkProvider</name> <init pos:line="55" pos:column="35">= <expr><name><name pos:line="55" pos:column="37">context</name><op:operator pos:line="55" pos:column="44">.</op:operator><name pos:line="55" pos:column="45">FrameworkProvider</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="57" pos:column="13">frameworkProvider</name><op:operator pos:line="57" pos:column="30">.</op:operator><name pos:line="57" pos:column="31">SetHttpResponseHeader</name></name><argument_list pos:line="57" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="57" pos:column="53">"Content-Type"</lit:literal></expr></argument>, <argument><expr><name pos:line="57" pos:column="69">ContentType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="59" pos:column="13">frameworkProvider</name><op:operator pos:line="59" pos:column="30">.</op:operator><name pos:line="59" pos:column="31">WriteHttpResponse</name></name><argument_list pos:line="59" pos:column="48">(<argument><expr><name pos:line="59" pos:column="49">Content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
