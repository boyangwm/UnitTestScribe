<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\tools\ManualBuild\ManualBuild\Program.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Text</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">IO</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">System</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">Text</name><op:operator pos:line="6" pos:column="18">.</op:operator><name pos:line="6" pos:column="19">RegularExpressions</name></name>;</using>

<namespace pos:line="8" pos:column="1">namespace <name pos:line="8" pos:column="11">ManualBuild</name>
<block pos:line="9" pos:column="1">{
    <class pos:line="10" pos:column="5">class <name pos:line="10" pos:column="11">Program</name>
    <block pos:line="11" pos:column="5">{
        <function><type><specifier pos:line="12" pos:column="9">static</specifier> <name pos:line="12" pos:column="16">void</name></type> <name pos:line="12" pos:column="21">Main</name><parameter_list pos:line="12" pos:column="25">(<param><decl><type><name><name pos:line="12" pos:column="26">string</name><index pos:line="12" pos:column="32">[]</index></name></type> <name pos:line="12" pos:column="35">args</name></decl></param>)</parameter_list>
        <block pos:line="13" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="14" pos:column="13">var</name></type> <name pos:line="14" pos:column="17">assets</name> <init pos:line="14" pos:column="24">= <expr><op:operator pos:line="14" pos:column="26">new</op:operator> <call><name pos:line="14" pos:column="30">Assets</name><argument_list pos:line="14" pos:column="36">(<argument><expr><name><name pos:line="14" pos:column="37">args</name><index pos:line="14" pos:column="41">[<expr><lit:literal type="number" pos:line="14" pos:column="42">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="15" pos:column="13">var</name></type> <name pos:line="15" pos:column="17">assetsTest</name> <init pos:line="15" pos:column="28">= <expr><op:operator pos:line="15" pos:column="30">new</op:operator> <call><name pos:line="15" pos:column="34">Assets</name><argument_list pos:line="15" pos:column="40">(<argument><expr><name><name pos:line="15" pos:column="41">args</name><index pos:line="15" pos:column="45">[<expr><lit:literal type="number" pos:line="15" pos:column="46">0</lit:literal></expr>]</index></name> <op:operator pos:line="15" pos:column="49">+</op:operator> <lit:literal type="string" pos:line="15" pos:column="51">"\\test\\mock"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

            <decl_stmt><decl><type><name pos:line="17" pos:column="13">var</name></type> <name pos:line="17" pos:column="17">coreContent</name> <init pos:line="17" pos:column="29">= <expr><call><name><name pos:line="17" pos:column="31">File</name><op:operator pos:line="17" pos:column="35">.</op:operator><name pos:line="17" pos:column="36">ReadAllText</name></name><argument_list pos:line="17" pos:column="47">(<argument><expr><call><name><name pos:line="17" pos:column="48">assets</name><op:operator pos:line="17" pos:column="54">.</op:operator><name pos:line="17" pos:column="55">BuildPath</name></name><argument_list pos:line="17" pos:column="64">(<argument><expr><lit:literal type="string" pos:line="17" pos:column="65">"_build.js"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="18" pos:column="13">coreContent</name> <op:operator pos:line="18" pos:column="25">=</op:operator> <call><name pos:line="18" pos:column="27">ProcessFile</name><argument_list pos:line="18" pos:column="38">(<argument><expr><name pos:line="18" pos:column="39">coreContent</name></expr></argument>, <argument><expr><name pos:line="18" pos:column="52">assets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="20" pos:column="13">var</name></type> <name pos:line="20" pos:column="17">testContent</name> <init pos:line="20" pos:column="29">= <expr><call><name><name pos:line="20" pos:column="31">File</name><op:operator pos:line="20" pos:column="35">.</op:operator><name pos:line="20" pos:column="36">ReadAllText</name></name><argument_list pos:line="20" pos:column="47">(<argument><expr><call><name><name pos:line="20" pos:column="48">assetsTest</name><op:operator pos:line="20" pos:column="58">.</op:operator><name pos:line="20" pos:column="59">BuildPath</name></name><argument_list pos:line="20" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="20" pos:column="69">"test.glimpse.ajax.js"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="21" pos:column="13">testContent</name> <op:operator pos:line="21" pos:column="25">=</op:operator> <call><name pos:line="21" pos:column="27">ProcessFile</name><argument_list pos:line="21" pos:column="38">(<argument><expr><name pos:line="21" pos:column="39">testContent</name></expr></argument>, <argument><expr><name pos:line="21" pos:column="52">assetsTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

            <expr_stmt><expr><call><name><name pos:line="23" pos:column="13">File</name><op:operator pos:line="23" pos:column="17">.</op:operator><name pos:line="23" pos:column="18">WriteAllText</name></name><argument_list pos:line="23" pos:column="30">(<argument><expr><call><name><name pos:line="23" pos:column="31">assets</name><op:operator pos:line="23" pos:column="37">.</op:operator><name pos:line="23" pos:column="38">BuildPath</name></name><argument_list pos:line="23" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="23" pos:column="48">"glimpse.js"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="23" pos:column="63">coreContent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="24" pos:column="13">File</name><op:operator pos:line="24" pos:column="17">.</op:operator><name pos:line="24" pos:column="18">WriteAllText</name></name><argument_list pos:line="24" pos:column="30">(<argument><expr><call><name><name pos:line="24" pos:column="31">assetsTest</name><op:operator pos:line="24" pos:column="41">.</op:operator><name pos:line="24" pos:column="42">BuildPath</name></name><argument_list pos:line="24" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="24" pos:column="52">"glimpseTest.js"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="24" pos:column="71">testContent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        }</block></function>

        <function><type><specifier pos:line="27" pos:column="9">static</specifier> <name pos:line="27" pos:column="16">string</name></type> <name pos:line="27" pos:column="23">ProcessFile</name><parameter_list pos:line="27" pos:column="34">(<param><decl><type><name pos:line="27" pos:column="35">string</name></type> <name pos:line="27" pos:column="42">fileContent</name></decl></param>, <param><decl><type><name pos:line="27" pos:column="55">Assets</name></type> <name pos:line="27" pos:column="62">assets</name></decl></param>)</parameter_list>
        <block pos:line="28" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="29" pos:column="13">var</name></type> <name pos:line="29" pos:column="17">matches</name> <init pos:line="29" pos:column="25">= <expr><call><name><name pos:line="29" pos:column="27">Regex</name><op:operator pos:line="29" pos:column="32">.</op:operator><name pos:line="29" pos:column="33">Matches</name></name><argument_list pos:line="29" pos:column="40">(<argument><expr><name pos:line="29" pos:column="41">fileContent</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="29" pos:column="54">@"\/\*\(import:\S*\)\*\/"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="81">RegexOptions</name><op:operator pos:line="29" pos:column="93">.</op:operator><name pos:line="29" pos:column="94">Multiline</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="30" pos:column="13">foreach (<init><decl><type><name pos:line="30" pos:column="22">Match</name></type> <name pos:line="30" pos:column="28">match</name> <range pos:line="30" pos:column="34">in <expr><name pos:line="30" pos:column="37">matches</name></expr></range></decl></init>)
            <block pos:line="31" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="32" pos:column="17">var</name></type> <name pos:line="32" pos:column="21">matchIdentifier</name> <init pos:line="32" pos:column="37">= <expr><call><name><name pos:line="32" pos:column="39">match</name><op:operator pos:line="32" pos:column="44">.</op:operator><name pos:line="32" pos:column="45">Value</name><op:operator pos:line="32" pos:column="50">.</op:operator><name pos:line="32" pos:column="51">Substring</name></name><argument_list pos:line="32" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="32" pos:column="61">10</lit:literal></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="65">match</name><op:operator pos:line="32" pos:column="70">.</op:operator><name pos:line="32" pos:column="71">Value</name><op:operator pos:line="32" pos:column="76">.</op:operator><name pos:line="32" pos:column="77">Length</name></name> <op:operator pos:line="32" pos:column="84">-</op:operator> <lit:literal type="number" pos:line="32" pos:column="86">13</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="33" pos:column="17">var</name></type> <name pos:line="33" pos:column="21">matchFileName</name> <init pos:line="33" pos:column="35">= <expr><name pos:line="33" pos:column="37">matchIdentifier</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="34" pos:column="17">var</name></type> <name pos:line="34" pos:column="21">tabIndex</name> <init pos:line="34" pos:column="30">= <expr><lit:literal type="number" pos:line="34" pos:column="32">0</lit:literal></expr></init></decl>;</decl_stmt>
                <if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><call><name><name pos:line="35" pos:column="21">matchFileName</name><op:operator pos:line="35" pos:column="34">.</op:operator><name pos:line="35" pos:column="35">IndexOf</name></name><argument_list pos:line="35" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="35" pos:column="43">"|"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="35" pos:column="48">&gt;</op:operator> <op:operator pos:line="35" pos:column="50">-</op:operator><lit:literal type="number" pos:line="35" pos:column="51">1</lit:literal></expr>)</condition><then pos:line="35" pos:column="53"> 
                <block pos:line="36" pos:column="17">{
                    <expr_stmt><expr><name pos:line="37" pos:column="21">tabIndex</name> <op:operator pos:line="37" pos:column="30">=</op:operator> <call><name><name pos:line="37" pos:column="32">Convert</name><op:operator pos:line="37" pos:column="39">.</op:operator><name pos:line="37" pos:column="40">ToInt32</name></name><argument_list pos:line="37" pos:column="47">(<argument><expr><call><name><name pos:line="37" pos:column="48">matchFileName</name><op:operator pos:line="37" pos:column="61">.</op:operator><name pos:line="37" pos:column="62">Substring</name></name><argument_list pos:line="37" pos:column="71">(<argument><expr><call><name><name pos:line="37" pos:column="72">matchFileName</name><op:operator pos:line="37" pos:column="85">.</op:operator><name pos:line="37" pos:column="86">IndexOf</name></name><argument_list pos:line="37" pos:column="93">(<argument><expr><lit:literal type="string" pos:line="37" pos:column="94">"|"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="37" pos:column="99">+</op:operator> <lit:literal type="number" pos:line="37" pos:column="101">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="104">matchFileName</name><op:operator pos:line="37" pos:column="117">.</op:operator><name pos:line="37" pos:column="118">Length</name></name> <op:operator pos:line="37" pos:column="125">-</op:operator> <call><name><name pos:line="37" pos:column="127">matchFileName</name><op:operator pos:line="37" pos:column="140">.</op:operator><name pos:line="37" pos:column="141">IndexOf</name></name><argument_list pos:line="37" pos:column="148">(<argument><expr><lit:literal type="string" pos:line="37" pos:column="149">"|"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="37" pos:column="154">-</op:operator> <lit:literal type="number" pos:line="37" pos:column="156">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="38" pos:column="21">matchFileName</name> <op:operator pos:line="38" pos:column="35">=</op:operator> <call><name><name pos:line="38" pos:column="37">matchFileName</name><op:operator pos:line="38" pos:column="50">.</op:operator><name pos:line="38" pos:column="51">Substring</name></name><argument_list pos:line="38" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="38" pos:column="61">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="38" pos:column="64">matchFileName</name><op:operator pos:line="38" pos:column="77">.</op:operator><name pos:line="38" pos:column="78">IndexOf</name></name><argument_list pos:line="38" pos:column="85">(<argument><expr><lit:literal type="string" pos:line="38" pos:column="86">"|"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <decl_stmt><decl><type><name pos:line="40" pos:column="17">var</name></type> <name pos:line="40" pos:column="21">tabs</name> <init pos:line="40" pos:column="26">= <expr><lit:literal type="string" pos:line="40" pos:column="28">""</lit:literal></expr></init></decl>;</decl_stmt>
                <for pos:line="41" pos:column="17">for (<init><decl><type><name pos:line="41" pos:column="22">var</name></type> <name pos:line="41" pos:column="26">i</name> <init pos:line="41" pos:column="28">= <expr><lit:literal type="number" pos:line="41" pos:column="30">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="41" pos:column="33">i</name> <op:operator pos:line="41" pos:column="35">&lt;</op:operator> <name pos:line="41" pos:column="37">tabIndex</name></expr>;</condition> <incr><expr><name pos:line="41" pos:column="47">i</name><op:operator pos:line="41" pos:column="48">++</op:operator></expr></incr>)
                    <expr_stmt><expr><name pos:line="42" pos:column="21">tabs</name> <op:operator pos:line="42" pos:column="26">+=</op:operator> <lit:literal type="string" pos:line="42" pos:column="29">"    "</lit:literal></expr>;</expr_stmt></for>
                <decl_stmt><decl><type><name pos:line="43" pos:column="17">var</name></type> <name pos:line="43" pos:column="21">matchContent</name> <init pos:line="43" pos:column="34">= <expr><call><name><name pos:line="43" pos:column="36">File</name><op:operator pos:line="43" pos:column="40">.</op:operator><name pos:line="43" pos:column="41">ReadAllText</name></name><argument_list pos:line="43" pos:column="52">(<argument><expr><call><name><name pos:line="43" pos:column="53">assets</name><op:operator pos:line="43" pos:column="59">.</op:operator><name pos:line="43" pos:column="60">BuildPath</name></name><argument_list pos:line="43" pos:column="69">(<argument><expr><name pos:line="43" pos:column="70">matchFileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name pos:line="44" pos:column="17">matchContent</name> <op:operator pos:line="44" pos:column="30">=</op:operator> <call><name pos:line="44" pos:column="32">ProcessFile</name><argument_list pos:line="44" pos:column="43">(<argument><expr><call><name pos:line="44" pos:column="44">PostProcessContent</name><argument_list pos:line="44" pos:column="62">(<argument><expr><name pos:line="44" pos:column="63">matchFileName</name></expr></argument>, <argument><expr><name pos:line="44" pos:column="78">matchContent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="44" pos:column="93">assets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="45" pos:column="17">if <condition pos:line="45" pos:column="20">(<expr><name pos:line="45" pos:column="21">tabIndex</name> <op:operator pos:line="45" pos:column="30">&gt;</op:operator> <lit:literal type="number" pos:line="45" pos:column="32">0</lit:literal></expr>)</condition><then pos:line="45" pos:column="34">
                    <expr_stmt><expr><name pos:line="46" pos:column="21">matchContent</name> <op:operator pos:line="46" pos:column="34">=</op:operator> <name pos:line="46" pos:column="36">tabs</name> <op:operator pos:line="46" pos:column="41">+</op:operator> <call><name><name pos:line="46" pos:column="43">Regex</name><op:operator pos:line="46" pos:column="48">.</op:operator><name pos:line="46" pos:column="49">Replace</name></name><argument_list pos:line="46" pos:column="56">(<argument><expr><name pos:line="46" pos:column="57">matchContent</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="46" pos:column="71">"\n"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="46" pos:column="77">"\n"</lit:literal> <op:operator pos:line="46" pos:column="82">+</op:operator> <name pos:line="46" pos:column="84">tabs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if> 

                <expr_stmt><expr><name pos:line="48" pos:column="17">fileContent</name> <op:operator pos:line="48" pos:column="29">=</op:operator> <call><name><name pos:line="48" pos:column="31">fileContent</name><op:operator pos:line="48" pos:column="42">.</op:operator><name pos:line="48" pos:column="43">Replace</name></name><argument_list pos:line="48" pos:column="50">(<argument><expr><call><name><name pos:line="48" pos:column="51">String</name><op:operator pos:line="48" pos:column="57">.</op:operator><name pos:line="48" pos:column="58">Format</name></name><argument_list pos:line="48" pos:column="64">(<argument><expr><lit:literal type="string" pos:line="48" pos:column="65">"/*(import:{0})*/"</lit:literal></expr></argument>, <argument><expr><name pos:line="48" pos:column="85">matchIdentifier</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="48" pos:column="103">matchContent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>

            <return pos:line="51" pos:column="13">return <expr><name pos:line="51" pos:column="20">fileContent</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="54" pos:column="9">static</specifier> <name pos:line="54" pos:column="16">string</name></type> <name pos:line="54" pos:column="23">PostProcessContent</name><parameter_list pos:line="54" pos:column="41">(<param><decl><type><name pos:line="54" pos:column="42">string</name></type> <name pos:line="54" pos:column="49">fileName</name></decl></param>, <param><decl><type><name pos:line="54" pos:column="59">string</name></type> <name pos:line="54" pos:column="66">fileContent</name></decl></param>)</parameter_list>
        <block pos:line="55" pos:column="9">{
            <if pos:line="56" pos:column="13">if <condition pos:line="56" pos:column="16">(<expr><call><name><name pos:line="56" pos:column="17">Regex</name><op:operator pos:line="56" pos:column="22">.</op:operator><name pos:line="56" pos:column="23">Match</name></name><argument_list pos:line="56" pos:column="28">(<argument><expr><name pos:line="56" pos:column="29">fileName</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="56" pos:column="39">@"(.htm|.css)"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="56" pos:column="54">.</op:operator><name pos:line="56" pos:column="55">Success</name></expr>)</condition><then pos:line="56" pos:column="63">
            <block pos:line="57" pos:column="13">{
                <expr_stmt><expr><name pos:line="58" pos:column="17">fileContent</name> <op:operator pos:line="58" pos:column="29">=</op:operator> <call><name><name pos:line="58" pos:column="31">Regex</name><op:operator pos:line="58" pos:column="36">.</op:operator><name pos:line="58" pos:column="37">Replace</name></name><argument_list pos:line="58" pos:column="44">(<argument><expr><name pos:line="58" pos:column="45">fileContent</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="58" pos:column="58">@"[\r|\n|\r\n|\t]"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="58" pos:column="78">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="59" pos:column="17">fileContent</name> <op:operator pos:line="59" pos:column="29">=</op:operator> <call><name><name pos:line="59" pos:column="31">Regex</name><op:operator pos:line="59" pos:column="36">.</op:operator><name pos:line="59" pos:column="37">Replace</name></name><argument_list pos:line="59" pos:column="44">(<argument><expr><name pos:line="59" pos:column="45">fileContent</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="59" pos:column="58">@"\s{2,}"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="59" pos:column="69">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
            }</block></then></if>
            <return pos:line="61" pos:column="13">return <expr><name pos:line="61" pos:column="20">fileContent</name></expr>;</return>
        }</block></function> 
    }</block></class>

    <class><specifier pos:line="65" pos:column="5">public</specifier> class <name pos:line="65" pos:column="18">Assets</name>
    <block pos:line="66" pos:column="5">{
        <constructor><specifier pos:line="67" pos:column="9">public</specifier> <name pos:line="67" pos:column="16">Assets</name><parameter_list pos:line="67" pos:column="22">(<param><decl><type><name pos:line="67" pos:column="23">string</name></type> <name pos:line="67" pos:column="30">basePath</name></decl></param>)</parameter_list>
        <block pos:line="68" pos:column="9">{
            <expr_stmt><expr><name pos:line="69" pos:column="13">BasePath</name> <op:operator pos:line="69" pos:column="22">=</op:operator> <name pos:line="69" pos:column="24">basePath</name></expr>;</expr_stmt>
        }</block></constructor>

        <decl_stmt><decl><type><specifier pos:line="72" pos:column="9">public</specifier> <name pos:line="72" pos:column="16">string</name></type> <name pos:line="72" pos:column="23">BasePath</name> <block pos:line="72" pos:column="32">{ <function_decl><name pos:line="72" pos:column="34">get</name>;</function_decl> <function_decl><name pos:line="72" pos:column="39">set</name>;</function_decl> }</block></decl></decl_stmt>
         
        <function><type><specifier pos:line="74" pos:column="9">public</specifier> <name pos:line="74" pos:column="16">string</name></type> <name pos:line="74" pos:column="23">BuildPath</name><parameter_list pos:line="74" pos:column="32">(<param><decl><type><name pos:line="74" pos:column="33">string</name></type> <name pos:line="74" pos:column="40">relativeFilePath</name></decl></param>)</parameter_list>
        <block pos:line="75" pos:column="9">{
            <return pos:line="76" pos:column="13">return <expr><call><name><name pos:line="76" pos:column="20">Path</name><op:operator pos:line="76" pos:column="24">.</op:operator><name pos:line="76" pos:column="25">Combine</name></name><argument_list pos:line="76" pos:column="32">(<argument><expr><name pos:line="76" pos:column="33">BasePath</name></expr></argument>, <argument><expr><name pos:line="76" pos:column="43">relativeFilePath</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
