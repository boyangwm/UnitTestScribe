<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Core\Plugin\Assist\TabLayoutCellShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Glimpse</name><op:operator pos:line="3" pos:column="14">.</op:operator><name pos:line="3" pos:column="15">Core</name><op:operator pos:line="3" pos:column="19">.</op:operator><name pos:line="3" pos:column="20">Tab</name><op:operator pos:line="3" pos:column="23">.</op:operator><name pos:line="3" pos:column="24">Assist</name></name>;</using>
<using pos:line="4" pos:column="1">using <name pos:line="4" pos:column="7">Xunit</name>;</using>

<namespace pos:line="6" pos:column="1">namespace <name><name pos:line="6" pos:column="11">Glimpse</name><op:operator pos:line="6" pos:column="18">.</op:operator><name pos:line="6" pos:column="19">Test</name><op:operator pos:line="6" pos:column="23">.</op:operator><name pos:line="6" pos:column="24">Core</name><op:operator pos:line="6" pos:column="28">.</op:operator><name pos:line="6" pos:column="29">Plugin</name><op:operator pos:line="6" pos:column="35">.</op:operator><name pos:line="6" pos:column="36">Assist</name></name>
<block pos:line="7" pos:column="1">{
	<class><specifier pos:line="8" pos:column="9">public</specifier> class <name pos:line="8" pos:column="22">TabLayoutCellShould</name>
	<block pos:line="9" pos:column="9">{
		<function><type><attribute pos:line="10" pos:column="17">[<expr><name pos:line="10" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="11" pos:column="17">public</specifier> <name pos:line="11" pos:column="24">void</name></type> <name pos:line="11" pos:column="29">SetDataId</name><parameter_list pos:line="11" pos:column="38">()</parameter_list>
		<block pos:line="12" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="13" pos:column="25">var</name></type> <name pos:line="13" pos:column="29">cell</name> <init pos:line="13" pos:column="34">= <expr><op:operator pos:line="13" pos:column="36">new</op:operator> <call><name pos:line="13" pos:column="40">TabLayoutCell</name><argument_list pos:line="13" pos:column="53">(<argument><expr><lit:literal type="number" pos:line="13" pos:column="54">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<expr_stmt><expr><call><name><name pos:line="15" pos:column="25">Assert</name><op:operator pos:line="15" pos:column="31">.</op:operator><name pos:line="15" pos:column="32">Equal</name></name><argument_list pos:line="15" pos:column="37">(<argument><expr><lit:literal type="number" pos:line="15" pos:column="38">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="41">cell</name><op:operator pos:line="15" pos:column="45">.</op:operator><name pos:line="15" pos:column="46">Data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="18" pos:column="17">[<expr><name pos:line="18" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="19" pos:column="17">public</specifier> <name pos:line="19" pos:column="24">void</name></type> <name pos:line="19" pos:column="29">ThrowForNegativeValue</name><parameter_list pos:line="19" pos:column="50">()</parameter_list>
		<block pos:line="20" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="21" pos:column="25">Assert</name><op:operator pos:line="21" pos:column="31">.</op:operator><name><name pos:line="21" pos:column="32">Throws</name><argument_list pos:line="21" pos:column="38">&lt;<argument><name pos:line="21" pos:column="39">ArgumentException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="21" pos:column="57">(<argument><expr><lambda><parameter_list pos:line="21" pos:column="58">()</parameter_list> <op:operator pos:line="21" pos:column="61">=&gt;</op:operator> <op:operator pos:line="21" pos:column="64">new</op:operator> <call><name pos:line="21" pos:column="68">TabLayoutCell</name><argument_list pos:line="21" pos:column="81">(<argument><expr><op:operator pos:line="21" pos:column="82">-</op:operator><lit:literal type="number" pos:line="21" pos:column="83">1</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="24" pos:column="17">[<expr><name pos:line="24" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="25" pos:column="17">public</specifier> <name pos:line="25" pos:column="24">void</name></type> <name pos:line="25" pos:column="29">SetDataFormatOnConstruction</name><parameter_list pos:line="25" pos:column="56">()</parameter_list>
		<block pos:line="26" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="27" pos:column="25">var</name></type> <name pos:line="27" pos:column="29">cell</name> <init pos:line="27" pos:column="34">= <expr><op:operator pos:line="27" pos:column="36">new</op:operator> <call><name pos:line="27" pos:column="40">TabLayoutCell</name><argument_list pos:line="27" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="27" pos:column="54">"{0} - {1}"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name><name pos:line="29" pos:column="25">Assert</name><op:operator pos:line="29" pos:column="31">.</op:operator><name pos:line="29" pos:column="32">Equal</name></name><argument_list pos:line="29" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="29" pos:column="38">"{0} - {1}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="51">cell</name><op:operator pos:line="29" pos:column="55">.</op:operator><name pos:line="29" pos:column="56">Data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="32" pos:column="17">[<expr><name pos:line="32" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="33" pos:column="17">public</specifier> <name pos:line="33" pos:column="24">void</name></type> <name pos:line="33" pos:column="29">ThrowForNullOrEmptyConstruction</name><parameter_list pos:line="33" pos:column="60">()</parameter_list>
		<block pos:line="34" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="35" pos:column="25">Assert</name><op:operator pos:line="35" pos:column="31">.</op:operator><name><name pos:line="35" pos:column="32">Throws</name><argument_list pos:line="35" pos:column="38">&lt;<argument><name pos:line="35" pos:column="39">ArgumentException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="35" pos:column="57">(<argument><expr><lambda><parameter_list pos:line="35" pos:column="58">()</parameter_list> <op:operator pos:line="35" pos:column="61">=&gt;</op:operator> <op:operator pos:line="35" pos:column="64">new</op:operator> <call><name pos:line="35" pos:column="68">TabLayoutCell</name><argument_list pos:line="35" pos:column="81">(<argument><expr><name pos:line="35" pos:column="82">null</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="36" pos:column="25">Assert</name><op:operator pos:line="36" pos:column="31">.</op:operator><name><name pos:line="36" pos:column="32">Throws</name><argument_list pos:line="36" pos:column="38">&lt;<argument><name pos:line="36" pos:column="39">ArgumentException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="36" pos:column="57">(<argument><expr><lambda><parameter_list pos:line="36" pos:column="58">()</parameter_list> <op:operator pos:line="36" pos:column="61">=&gt;</op:operator> <op:operator pos:line="36" pos:column="64">new</op:operator> <call><name pos:line="36" pos:column="68">TabLayoutCell</name><argument_list pos:line="36" pos:column="81">(<argument><expr><lit:literal type="string" pos:line="36" pos:column="82">""</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="39" pos:column="17">[<expr><name pos:line="39" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="40" pos:column="17">public</specifier> <name pos:line="40" pos:column="24">void</name></type> <name pos:line="40" pos:column="29">ThrowWhenNullOrEmpty</name><parameter_list pos:line="40" pos:column="49">()</parameter_list>
		<block pos:line="41" pos:column="17">{
		    <expr_stmt><expr><call><name><name pos:line="42" pos:column="21">Assert</name><op:operator pos:line="42" pos:column="27">.</op:operator><name><name pos:line="42" pos:column="28">Throws</name><argument_list pos:line="42" pos:column="34">&lt;<argument><name pos:line="42" pos:column="35">ArgumentException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="42" pos:column="53">(<argument><expr><lambda><parameter_list pos:line="42" pos:column="54">()</parameter_list> <op:operator pos:line="42" pos:column="57">=&gt;</op:operator> <call><name><name pos:line="42" pos:column="60">Cell</name><op:operator pos:line="42" pos:column="64">.</op:operator><name pos:line="42" pos:column="65">Format</name></name><argument_list pos:line="42" pos:column="71">(<argument><expr><lit:literal type="string" pos:line="42" pos:column="72">""</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name><name pos:line="43" pos:column="21">Assert</name><op:operator pos:line="43" pos:column="27">.</op:operator><name><name pos:line="43" pos:column="28">Throws</name><argument_list pos:line="43" pos:column="34">&lt;<argument><name pos:line="43" pos:column="35">ArgumentException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="43" pos:column="53">(<argument><expr><lambda><parameter_list pos:line="43" pos:column="54">()</parameter_list> <op:operator pos:line="43" pos:column="57">=&gt;</op:operator> <call><name><name pos:line="43" pos:column="60">Cell</name><op:operator pos:line="43" pos:column="64">.</op:operator><name pos:line="43" pos:column="65">Format</name></name><argument_list pos:line="43" pos:column="71">(<argument><expr><name pos:line="43" pos:column="72">null</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="46" pos:column="17">[<expr><name pos:line="46" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="47" pos:column="17">public</specifier> <name pos:line="47" pos:column="24">void</name></type> <name pos:line="47" pos:column="29">SetDataFormat</name><parameter_list pos:line="47" pos:column="42">()</parameter_list>
		<block pos:line="48" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="49" pos:column="25">Cell</name><op:operator pos:line="49" pos:column="29">.</op:operator><name pos:line="49" pos:column="30">Format</name></name><argument_list pos:line="49" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="49" pos:column="37">"{0} -&gt; {1} &lt;- {2}"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name pos:line="51" pos:column="25">Assert</name><op:operator pos:line="51" pos:column="31">.</op:operator><name pos:line="51" pos:column="32">Equal</name></name><argument_list pos:line="51" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="51" pos:column="38">"{0} -&gt; {1} &lt;- {2}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="51" pos:column="59">Cell</name><op:operator pos:line="51" pos:column="63">.</op:operator><name pos:line="51" pos:column="64">Data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="54" pos:column="17">[<expr><name pos:line="54" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="55" pos:column="17">public</specifier> <name pos:line="55" pos:column="24">void</name></type> <name pos:line="55" pos:column="29">SetStructureToRows</name><parameter_list pos:line="55" pos:column="47">()</parameter_list>
		<block pos:line="56" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="57" pos:column="25">var</name></type> <name pos:line="57" pos:column="29">layout</name> <init pos:line="57" pos:column="36">= <expr><call><name><name pos:line="57" pos:column="38">TabLayout</name><op:operator pos:line="57" pos:column="47">.</op:operator><name pos:line="57" pos:column="48">Create</name></name><argument_list pos:line="57" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="58" pos:column="25">layout</name><op:operator pos:line="58" pos:column="31">.</op:operator><name pos:line="58" pos:column="32">Row</name></name><argument_list pos:line="58" pos:column="35">(<argument><expr><lambda><name pos:line="58" pos:column="36">r</name> <op:operator pos:line="58" pos:column="38">=&gt;</op:operator> <block pos:line="58" pos:column="41">{ }</block></lambda></expr></argument>)</argument_list></call><op:operator pos:line="58" pos:column="45">.</op:operator><call><name pos:line="58" pos:column="46">Row</name><argument_list pos:line="58" pos:column="49">(<argument><expr><lambda><name pos:line="58" pos:column="50">r</name> <op:operator pos:line="58" pos:column="52">=&gt;</op:operator> <block pos:line="58" pos:column="55">{}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name pos:line="60" pos:column="25">Cell</name><op:operator pos:line="60" pos:column="29">.</op:operator><name pos:line="60" pos:column="30">SetLayout</name></name><argument_list pos:line="60" pos:column="39">(<argument><expr><name pos:line="60" pos:column="40">layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name pos:line="62" pos:column="25">Assert</name><op:operator pos:line="62" pos:column="31">.</op:operator><name pos:line="62" pos:column="32">NotEqual</name></name><argument_list pos:line="62" pos:column="40">(<argument><expr><name><name pos:line="62" pos:column="41">layout</name><op:operator pos:line="62" pos:column="47">.</op:operator><name pos:line="62" pos:column="48">Rows</name></name></expr></argument>, <argument><expr><name><name pos:line="62" pos:column="54">Cell</name><op:operator pos:line="62" pos:column="58">.</op:operator><name pos:line="62" pos:column="59">Layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="65" pos:column="17">[<expr><name pos:line="65" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="66" pos:column="17">public</specifier> <name pos:line="66" pos:column="24">void</name></type> <name pos:line="66" pos:column="29">AddRowsToStructure</name><parameter_list pos:line="66" pos:column="47">()</parameter_list>
		<block pos:line="67" pos:column="17">{
			<decl_stmt><decl><type><name><name pos:line="68" pos:column="25">IEnumerable</name><argument_list pos:line="68" pos:column="36">&lt;<argument><name pos:line="68" pos:column="37">TabLayoutRow</name></argument>&gt;</argument_list></name></type> <name pos:line="68" pos:column="51">rows</name> <init pos:line="68" pos:column="56">= <expr><name pos:line="68" pos:column="58">null</name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name><name pos:line="70" pos:column="25">Cell</name><op:operator pos:line="70" pos:column="29">.</op:operator><name pos:line="70" pos:column="30">SetLayout</name></name><argument_list pos:line="70" pos:column="39">(<argument><expr><lambda><name pos:line="70" pos:column="40">layout</name> <op:operator pos:line="70" pos:column="47">=&gt;</op:operator>
			<block pos:line="71" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="72" pos:column="33">layout</name><op:operator pos:line="72" pos:column="39">.</op:operator><name pos:line="72" pos:column="40">Row</name></name><argument_list pos:line="72" pos:column="43">(<argument><expr><lambda><name pos:line="72" pos:column="44">r</name> <op:operator pos:line="72" pos:column="46">=&gt;</op:operator> <block pos:line="72" pos:column="49">{ }</block></lambda></expr></argument>)</argument_list></call><op:operator pos:line="72" pos:column="53">.</op:operator><call><name pos:line="72" pos:column="54">Row</name><argument_list pos:line="72" pos:column="57">(<argument><expr><lambda><name pos:line="72" pos:column="58">r</name> <op:operator pos:line="72" pos:column="60">=&gt;</op:operator> <block pos:line="72" pos:column="63">{ }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name pos:line="74" pos:column="33">rows</name> <op:operator pos:line="74" pos:column="38">=</op:operator> <name><name pos:line="74" pos:column="40">layout</name><op:operator pos:line="74" pos:column="46">.</op:operator><name pos:line="74" pos:column="47">Rows</name></name></expr>;</expr_stmt>
			}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name pos:line="77" pos:column="25">Assert</name><op:operator pos:line="77" pos:column="31">.</op:operator><name pos:line="77" pos:column="32">Equal</name></name><argument_list pos:line="77" pos:column="37">(<argument><expr><name pos:line="77" pos:column="38">rows</name></expr></argument>, <argument><expr><name><name pos:line="77" pos:column="44">Cell</name><op:operator pos:line="77" pos:column="48">.</op:operator><name pos:line="77" pos:column="49">Layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="80" pos:column="17">[<expr><name pos:line="80" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="81" pos:column="17">public</specifier> <name pos:line="81" pos:column="24">void</name></type> <name pos:line="81" pos:column="29">SetIsKey</name><parameter_list pos:line="81" pos:column="37">()</parameter_list>
		<block pos:line="82" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="83" pos:column="25">Cell</name><op:operator pos:line="83" pos:column="29">.</op:operator><name pos:line="83" pos:column="30">AsKey</name></name><argument_list pos:line="83" pos:column="35">()</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name pos:line="85" pos:column="25">Assert</name><op:operator pos:line="85" pos:column="31">.</op:operator><name pos:line="85" pos:column="32">Equal</name></name><argument_list pos:line="85" pos:column="37">(<argument><expr><lit:literal type="boolean" pos:line="85" pos:column="38">true</lit:literal></expr></argument>, <argument><expr><name><name pos:line="85" pos:column="44">Cell</name><op:operator pos:line="85" pos:column="48">.</op:operator><name pos:line="85" pos:column="49">Key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="88" pos:column="17">[<expr><name pos:line="88" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="89" pos:column="17">public</specifier> <name pos:line="89" pos:column="24">void</name></type> <name pos:line="89" pos:column="29">SetIsCodeAndCodeType</name><parameter_list pos:line="89" pos:column="49">()</parameter_list>
		<block pos:line="90" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="91" pos:column="25">Cell</name><op:operator pos:line="91" pos:column="29">.</op:operator><name pos:line="91" pos:column="30">AsCode</name></name><argument_list pos:line="91" pos:column="36">(<argument><expr><name><name pos:line="91" pos:column="37">CodeType</name><op:operator pos:line="91" pos:column="45">.</op:operator><name pos:line="91" pos:column="46">Sql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name pos:line="93" pos:column="25">Assert</name><op:operator pos:line="93" pos:column="31">.</op:operator><name pos:line="93" pos:column="32">Equal</name></name><argument_list pos:line="93" pos:column="37">(<argument><expr><lit:literal type="boolean" pos:line="93" pos:column="38">true</lit:literal></expr></argument>, <argument><expr><name><name pos:line="93" pos:column="44">Cell</name><op:operator pos:line="93" pos:column="48">.</op:operator><name pos:line="93" pos:column="49">IsCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="94" pos:column="25">Assert</name><op:operator pos:line="94" pos:column="31">.</op:operator><name pos:line="94" pos:column="32">Equal</name></name><argument_list pos:line="94" pos:column="37">(<argument><expr><call><name><name pos:line="94" pos:column="38">CodeType</name><op:operator pos:line="94" pos:column="46">.</op:operator><name pos:line="94" pos:column="47">Sql</name><op:operator pos:line="94" pos:column="50">.</op:operator><name pos:line="94" pos:column="51">ToString</name></name><argument_list pos:line="94" pos:column="59">()</argument_list></call><op:operator pos:line="94" pos:column="61">.</op:operator><call><name pos:line="94" pos:column="62">ToLower</name><argument_list pos:line="94" pos:column="69">()</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="94" pos:column="73">Cell</name><op:operator pos:line="94" pos:column="77">.</op:operator><name pos:line="94" pos:column="78">CodeType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="97" pos:column="17">[<expr><name pos:line="97" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="98" pos:column="17">public</specifier> <name pos:line="98" pos:column="24">void</name></type> <name pos:line="98" pos:column="29">SetAlign</name><parameter_list pos:line="98" pos:column="37">()</parameter_list>
		<block pos:line="99" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="100" pos:column="25">Cell</name><op:operator pos:line="100" pos:column="29">.</op:operator><name pos:line="100" pos:column="30">AlignRight</name></name><argument_list pos:line="100" pos:column="40">()</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name pos:line="102" pos:column="25">Assert</name><op:operator pos:line="102" pos:column="31">.</op:operator><name pos:line="102" pos:column="32">Equal</name></name><argument_list pos:line="102" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="102" pos:column="38">"Right"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="102" pos:column="47">Cell</name><op:operator pos:line="102" pos:column="51">.</op:operator><name pos:line="102" pos:column="52">Align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="105" pos:column="17">[<expr><name pos:line="105" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="106" pos:column="17">public</specifier> <name pos:line="106" pos:column="24">void</name></type> <name pos:line="106" pos:column="29">ThrowForNegativeValuePixelValue</name><parameter_list pos:line="106" pos:column="60">()</parameter_list>
		<block pos:line="107" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="108" pos:column="25">Assert</name><op:operator pos:line="108" pos:column="31">.</op:operator><name><name pos:line="108" pos:column="32">Throws</name><argument_list pos:line="108" pos:column="38">&lt;<argument><name pos:line="108" pos:column="39">ArgumentException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="108" pos:column="57">(<argument><expr><lambda><parameter_list pos:line="108" pos:column="58">()</parameter_list> <op:operator pos:line="108" pos:column="61">=&gt;</op:operator> <call><name><name pos:line="108" pos:column="64">Cell</name><op:operator pos:line="108" pos:column="68">.</op:operator><name pos:line="108" pos:column="69">WidthInPixels</name></name><argument_list pos:line="108" pos:column="82">(<argument><expr><op:operator pos:line="108" pos:column="83">-</op:operator><lit:literal type="number" pos:line="108" pos:column="84">1</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="111" pos:column="17">[<expr><name pos:line="111" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="112" pos:column="17">public</specifier> <name pos:line="112" pos:column="24">void</name></type> <name pos:line="112" pos:column="29">SetWidthInPixels</name><parameter_list pos:line="112" pos:column="45">()</parameter_list>
		<block pos:line="113" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="114" pos:column="25">Cell</name><op:operator pos:line="114" pos:column="29">.</op:operator><name pos:line="114" pos:column="30">WidthInPixels</name></name><argument_list pos:line="114" pos:column="43">(<argument><expr><lit:literal type="number" pos:line="114" pos:column="44">123</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name pos:line="116" pos:column="25">Assert</name><op:operator pos:line="116" pos:column="31">.</op:operator><name pos:line="116" pos:column="32">Equal</name></name><argument_list pos:line="116" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="116" pos:column="38">"123px"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="116" pos:column="47">Cell</name><op:operator pos:line="116" pos:column="51">.</op:operator><name pos:line="116" pos:column="52">Width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="119" pos:column="17">[<expr><name pos:line="119" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="120" pos:column="17">public</specifier> <name pos:line="120" pos:column="24">void</name></type> <name pos:line="120" pos:column="29">ThrowForNegativePercentValue</name><parameter_list pos:line="120" pos:column="57">()</parameter_list>
		<block pos:line="121" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="122" pos:column="25">Assert</name><op:operator pos:line="122" pos:column="31">.</op:operator><name><name pos:line="122" pos:column="32">Throws</name><argument_list pos:line="122" pos:column="38">&lt;<argument><name pos:line="122" pos:column="39">ArgumentException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="122" pos:column="57">(<argument><expr><lambda><parameter_list pos:line="122" pos:column="58">()</parameter_list> <op:operator pos:line="122" pos:column="61">=&gt;</op:operator> <call><name><name pos:line="122" pos:column="64">Cell</name><op:operator pos:line="122" pos:column="68">.</op:operator><name pos:line="122" pos:column="69">WidthInPercent</name></name><argument_list pos:line="122" pos:column="83">(<argument><expr><op:operator pos:line="122" pos:column="84">-</op:operator><lit:literal type="number" pos:line="122" pos:column="85">1</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="125" pos:column="17">[<expr><name pos:line="125" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="126" pos:column="17">public</specifier> <name pos:line="126" pos:column="24">void</name></type> <name pos:line="126" pos:column="29">SetWidthInPecent</name><parameter_list pos:line="126" pos:column="45">()</parameter_list>
		<block pos:line="127" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="128" pos:column="25">Cell</name><op:operator pos:line="128" pos:column="29">.</op:operator><name pos:line="128" pos:column="30">WidthInPercent</name></name><argument_list pos:line="128" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="128" pos:column="45">123</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name pos:line="130" pos:column="25">Assert</name><op:operator pos:line="130" pos:column="31">.</op:operator><name pos:line="130" pos:column="32">Equal</name></name><argument_list pos:line="130" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="130" pos:column="38">"123%"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="130" pos:column="46">Cell</name><op:operator pos:line="130" pos:column="50">.</op:operator><name pos:line="130" pos:column="51">Width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="133" pos:column="17">[<expr><name pos:line="133" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="134" pos:column="17">public</specifier> <name pos:line="134" pos:column="24">void</name></type> <name pos:line="134" pos:column="29">ThrowForValueLessThenOne</name><parameter_list pos:line="134" pos:column="53">()</parameter_list>
		<block pos:line="135" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="136" pos:column="25">Assert</name><op:operator pos:line="136" pos:column="31">.</op:operator><name><name pos:line="136" pos:column="32">Throws</name><argument_list pos:line="136" pos:column="38">&lt;<argument><name pos:line="136" pos:column="39">ArgumentException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="136" pos:column="57">(<argument><expr><lambda><parameter_list pos:line="136" pos:column="58">()</parameter_list> <op:operator pos:line="136" pos:column="61">=&gt;</op:operator> <call><name><name pos:line="136" pos:column="64">Cell</name><op:operator pos:line="136" pos:column="68">.</op:operator><name pos:line="136" pos:column="69">SpanColumns</name></name><argument_list pos:line="136" pos:column="80">(<argument><expr><op:operator pos:line="136" pos:column="81">-</op:operator><lit:literal type="number" pos:line="136" pos:column="82">1</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="137" pos:column="25">Assert</name><op:operator pos:line="137" pos:column="31">.</op:operator><name><name pos:line="137" pos:column="32">Throws</name><argument_list pos:line="137" pos:column="38">&lt;<argument><name pos:line="137" pos:column="39">ArgumentException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="137" pos:column="57">(<argument><expr><lambda><parameter_list pos:line="137" pos:column="58">()</parameter_list> <op:operator pos:line="137" pos:column="61">=&gt;</op:operator> <call><name><name pos:line="137" pos:column="64">Cell</name><op:operator pos:line="137" pos:column="68">.</op:operator><name pos:line="137" pos:column="69">SpanColumns</name></name><argument_list pos:line="137" pos:column="80">(<argument><expr><lit:literal type="number" pos:line="137" pos:column="81">0</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="140" pos:column="17">[<expr><name pos:line="140" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="141" pos:column="17">public</specifier> <name pos:line="141" pos:column="24">void</name></type> <name pos:line="141" pos:column="29">SetRowSpan</name><parameter_list pos:line="141" pos:column="39">()</parameter_list>
		<block pos:line="142" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="143" pos:column="25">Cell</name><op:operator pos:line="143" pos:column="29">.</op:operator><name pos:line="143" pos:column="30">SpanColumns</name></name><argument_list pos:line="143" pos:column="41">(<argument><expr><lit:literal type="number" pos:line="143" pos:column="42">3</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name pos:line="145" pos:column="25">Assert</name><op:operator pos:line="145" pos:column="31">.</op:operator><name pos:line="145" pos:column="32">Equal</name></name><argument_list pos:line="145" pos:column="37">(<argument><expr><lit:literal type="number" pos:line="145" pos:column="38">3</lit:literal></expr></argument>, <argument><expr><name><name pos:line="145" pos:column="41">Cell</name><op:operator pos:line="145" pos:column="45">.</op:operator><name pos:line="145" pos:column="46">Span</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="148" pos:column="17">[<expr><name pos:line="148" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="149" pos:column="17">public</specifier> <name pos:line="149" pos:column="24">void</name></type> <name pos:line="149" pos:column="29">ThrowForNullOrEmptyClass</name><parameter_list pos:line="149" pos:column="53">()</parameter_list>
		<block pos:line="150" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="151" pos:column="25">Assert</name><op:operator pos:line="151" pos:column="31">.</op:operator><name><name pos:line="151" pos:column="32">Throws</name><argument_list pos:line="151" pos:column="38">&lt;<argument><name pos:line="151" pos:column="39">ArgumentException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="151" pos:column="57">(<argument><expr><lambda><parameter_list pos:line="151" pos:column="58">()</parameter_list> <op:operator pos:line="151" pos:column="61">=&gt;</op:operator> <call><name><name pos:line="151" pos:column="64">Cell</name><op:operator pos:line="151" pos:column="68">.</op:operator><name pos:line="151" pos:column="69">Class</name></name><argument_list pos:line="151" pos:column="74">(<argument><expr><name pos:line="151" pos:column="75">null</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="152" pos:column="25">Assert</name><op:operator pos:line="152" pos:column="31">.</op:operator><name><name pos:line="152" pos:column="32">Throws</name><argument_list pos:line="152" pos:column="38">&lt;<argument><name pos:line="152" pos:column="39">ArgumentException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="152" pos:column="57">(<argument><expr><lambda><parameter_list pos:line="152" pos:column="58">()</parameter_list> <op:operator pos:line="152" pos:column="61">=&gt;</op:operator> <call><name><name pos:line="152" pos:column="64">Cell</name><op:operator pos:line="152" pos:column="68">.</op:operator><name pos:line="152" pos:column="69">Class</name></name><argument_list pos:line="152" pos:column="74">(<argument><expr><lit:literal type="string" pos:line="152" pos:column="75">""</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="155" pos:column="17">[<expr><name pos:line="155" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="156" pos:column="17">public</specifier> <name pos:line="156" pos:column="24">void</name></type> <name pos:line="156" pos:column="29">SetClassName</name><parameter_list pos:line="156" pos:column="41">()</parameter_list>
		<block pos:line="157" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="158" pos:column="25">Cell</name><op:operator pos:line="158" pos:column="29">.</op:operator><name pos:line="158" pos:column="30">Class</name></name><argument_list pos:line="158" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="158" pos:column="36">"mono"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name pos:line="160" pos:column="25">Assert</name><op:operator pos:line="160" pos:column="31">.</op:operator><name pos:line="160" pos:column="32">Equal</name></name><argument_list pos:line="160" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="160" pos:column="38">"mono"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="160" pos:column="46">Cell</name><op:operator pos:line="160" pos:column="50">.</op:operator><name pos:line="160" pos:column="51">ClassName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="163" pos:column="17">[<expr><name pos:line="163" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="164" pos:column="17">public</specifier> <name pos:line="164" pos:column="24">void</name></type> <name pos:line="164" pos:column="29">SetSuppressAutoPreview</name><parameter_list pos:line="164" pos:column="51">()</parameter_list>
		<block pos:line="165" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="166" pos:column="25">Cell</name><op:operator pos:line="166" pos:column="29">.</op:operator><name pos:line="166" pos:column="30">DisablePreview</name></name><argument_list pos:line="166" pos:column="44">()</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name pos:line="168" pos:column="25">Assert</name><op:operator pos:line="168" pos:column="31">.</op:operator><name pos:line="168" pos:column="32">Equal</name></name><argument_list pos:line="168" pos:column="37">(<argument><expr><lit:literal type="boolean" pos:line="168" pos:column="38">true</lit:literal></expr></argument>, <argument><expr><name><name pos:line="168" pos:column="44">Cell</name><op:operator pos:line="168" pos:column="48">.</op:operator><name pos:line="168" pos:column="49">ForceFull</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="171" pos:column="17">[<expr><name pos:line="171" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="172" pos:column="17">public</specifier> <name pos:line="172" pos:column="24">void</name></type> <name pos:line="172" pos:column="29">ThrowForValueLessThenOneLimitTo</name><parameter_list pos:line="172" pos:column="60">()</parameter_list>
		<block pos:line="173" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="174" pos:column="25">Assert</name><op:operator pos:line="174" pos:column="31">.</op:operator><name><name pos:line="174" pos:column="32">Throws</name><argument_list pos:line="174" pos:column="38">&lt;<argument><name pos:line="174" pos:column="39">ArgumentException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="174" pos:column="57">(<argument><expr><lambda><parameter_list pos:line="174" pos:column="58">()</parameter_list> <op:operator pos:line="174" pos:column="61">=&gt;</op:operator> <call><name><name pos:line="174" pos:column="64">Cell</name><op:operator pos:line="174" pos:column="68">.</op:operator><name pos:line="174" pos:column="69">LimitTo</name></name><argument_list pos:line="174" pos:column="76">(<argument><expr><op:operator pos:line="174" pos:column="77">-</op:operator><lit:literal type="number" pos:line="174" pos:column="78">1</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="175" pos:column="25">Assert</name><op:operator pos:line="175" pos:column="31">.</op:operator><name><name pos:line="175" pos:column="32">Throws</name><argument_list pos:line="175" pos:column="38">&lt;<argument><name pos:line="175" pos:column="39">ArgumentException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="175" pos:column="57">(<argument><expr><lambda><parameter_list pos:line="175" pos:column="58">()</parameter_list> <op:operator pos:line="175" pos:column="61">=&gt;</op:operator> <call><name><name pos:line="175" pos:column="64">Cell</name><op:operator pos:line="175" pos:column="68">.</op:operator><name pos:line="175" pos:column="69">LimitTo</name></name><argument_list pos:line="175" pos:column="76">(<argument><expr><lit:literal type="number" pos:line="175" pos:column="77">0</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="178" pos:column="17">[<expr><name pos:line="178" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="179" pos:column="17">public</specifier> <name pos:line="179" pos:column="24">void</name></type> <name pos:line="179" pos:column="29">SetLimit</name><parameter_list pos:line="179" pos:column="37">()</parameter_list>
		<block pos:line="180" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="181" pos:column="25">Cell</name><op:operator pos:line="181" pos:column="29">.</op:operator><name pos:line="181" pos:column="30">LimitTo</name></name><argument_list pos:line="181" pos:column="37">(<argument><expr><lit:literal type="number" pos:line="181" pos:column="38">10</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name pos:line="183" pos:column="25">Assert</name><op:operator pos:line="183" pos:column="31">.</op:operator><name pos:line="183" pos:column="32">Equal</name></name><argument_list pos:line="183" pos:column="37">(<argument><expr><lit:literal type="number" pos:line="183" pos:column="38">10</lit:literal></expr></argument>, <argument><expr><name><name pos:line="183" pos:column="42">Cell</name><op:operator pos:line="183" pos:column="46">.</op:operator><name pos:line="183" pos:column="47">Limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="186" pos:column="17">[<expr><name pos:line="186" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="187" pos:column="17">public</specifier> <name pos:line="187" pos:column="24">void</name></type> <name pos:line="187" pos:column="29">ThrowForNullOrEmptyPrefix</name><parameter_list pos:line="187" pos:column="54">()</parameter_list>
		<block pos:line="188" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="189" pos:column="25">Assert</name><op:operator pos:line="189" pos:column="31">.</op:operator><name><name pos:line="189" pos:column="32">Throws</name><argument_list pos:line="189" pos:column="38">&lt;<argument><name pos:line="189" pos:column="39">ArgumentException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="189" pos:column="57">(<argument><expr><lambda><parameter_list pos:line="189" pos:column="58">()</parameter_list> <op:operator pos:line="189" pos:column="61">=&gt;</op:operator> <call><name><name pos:line="189" pos:column="64">Cell</name><op:operator pos:line="189" pos:column="68">.</op:operator><name pos:line="189" pos:column="69">Prefix</name></name><argument_list pos:line="189" pos:column="75">(<argument><expr><name pos:line="189" pos:column="76">null</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="190" pos:column="25">Assert</name><op:operator pos:line="190" pos:column="31">.</op:operator><name><name pos:line="190" pos:column="32">Throws</name><argument_list pos:line="190" pos:column="38">&lt;<argument><name pos:line="190" pos:column="39">ArgumentException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="190" pos:column="57">(<argument><expr><lambda><parameter_list pos:line="190" pos:column="58">()</parameter_list> <op:operator pos:line="190" pos:column="61">=&gt;</op:operator> <call><name><name pos:line="190" pos:column="64">Cell</name><op:operator pos:line="190" pos:column="68">.</op:operator><name pos:line="190" pos:column="69">Prefix</name></name><argument_list pos:line="190" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="190" pos:column="76">""</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="193" pos:column="17">[<expr><name pos:line="193" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="194" pos:column="17">public</specifier> <name pos:line="194" pos:column="24">void</name></type> <name pos:line="194" pos:column="29">SetPre</name><parameter_list pos:line="194" pos:column="35">()</parameter_list>
		<block pos:line="195" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="196" pos:column="25">Cell</name><op:operator pos:line="196" pos:column="29">.</op:operator><name pos:line="196" pos:column="30">Prefix</name></name><argument_list pos:line="196" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="196" pos:column="37">"T+ "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name pos:line="198" pos:column="25">Assert</name><op:operator pos:line="198" pos:column="31">.</op:operator><name pos:line="198" pos:column="32">Equal</name></name><argument_list pos:line="198" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="198" pos:column="38">"T+ "</lit:literal></expr></argument>, <argument><expr><name><name pos:line="198" pos:column="45">Cell</name><op:operator pos:line="198" pos:column="49">.</op:operator><name pos:line="198" pos:column="50">Pre</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="201" pos:column="17">[<expr><name pos:line="201" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="202" pos:column="17">public</specifier> <name pos:line="202" pos:column="24">void</name></type> <name pos:line="202" pos:column="29">ThrowForNullOrEmptySuffix</name><parameter_list pos:line="202" pos:column="54">()</parameter_list>
		<block pos:line="203" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="204" pos:column="25">Assert</name><op:operator pos:line="204" pos:column="31">.</op:operator><name><name pos:line="204" pos:column="32">Throws</name><argument_list pos:line="204" pos:column="38">&lt;<argument><name pos:line="204" pos:column="39">ArgumentException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="204" pos:column="57">(<argument><expr><lambda><parameter_list pos:line="204" pos:column="58">()</parameter_list> <op:operator pos:line="204" pos:column="61">=&gt;</op:operator> <call><name><name pos:line="204" pos:column="64">Cell</name><op:operator pos:line="204" pos:column="68">.</op:operator><name pos:line="204" pos:column="69">Suffix</name></name><argument_list pos:line="204" pos:column="75">(<argument><expr><name pos:line="204" pos:column="76">null</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="205" pos:column="25">Assert</name><op:operator pos:line="205" pos:column="31">.</op:operator><name><name pos:line="205" pos:column="32">Throws</name><argument_list pos:line="205" pos:column="38">&lt;<argument><name pos:line="205" pos:column="39">ArgumentException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="205" pos:column="57">(<argument><expr><lambda><parameter_list pos:line="205" pos:column="58">()</parameter_list> <op:operator pos:line="205" pos:column="61">=&gt;</op:operator> <call><name><name pos:line="205" pos:column="64">Cell</name><op:operator pos:line="205" pos:column="68">.</op:operator><name pos:line="205" pos:column="69">Suffix</name></name><argument_list pos:line="205" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="205" pos:column="76">""</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="208" pos:column="17">[<expr><name pos:line="208" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="209" pos:column="17">public</specifier> <name pos:line="209" pos:column="24">void</name></type> <name pos:line="209" pos:column="29">SetPost</name><parameter_list pos:line="209" pos:column="36">()</parameter_list>
		<block pos:line="210" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="211" pos:column="25">Cell</name><op:operator pos:line="211" pos:column="29">.</op:operator><name pos:line="211" pos:column="30">Suffix</name></name><argument_list pos:line="211" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="211" pos:column="37">" ms"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name pos:line="213" pos:column="25">Assert</name><op:operator pos:line="213" pos:column="31">.</op:operator><name pos:line="213" pos:column="32">Equal</name></name><argument_list pos:line="213" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="213" pos:column="38">" ms"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="213" pos:column="45">Cell</name><op:operator pos:line="213" pos:column="49">.</op:operator><name pos:line="213" pos:column="50">Post</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<decl_stmt><decl><type><specifier pos:line="216" pos:column="17">private</specifier> <name pos:line="216" pos:column="25">TabLayoutCell</name></type> <name pos:line="216" pos:column="39">Cell</name> <block pos:line="216" pos:column="44">{ <function_decl><name pos:line="216" pos:column="46">get</name>;</function_decl> <function_decl><name pos:line="216" pos:column="51">set</name>;</function_decl> }</block></decl></decl_stmt>

		<constructor><specifier pos:line="218" pos:column="17">public</specifier> <name pos:line="218" pos:column="24">TabLayoutCellShould</name><parameter_list pos:line="218" pos:column="43">()</parameter_list>
		<block pos:line="219" pos:column="17">{
			<expr_stmt><expr><name pos:line="220" pos:column="25">Cell</name> <op:operator pos:line="220" pos:column="30">=</op:operator> <op:operator pos:line="220" pos:column="32">new</op:operator> <call><name pos:line="220" pos:column="36">TabLayoutCell</name><argument_list pos:line="220" pos:column="49">(<argument><expr><lit:literal type="number" pos:line="220" pos:column="50">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></constructor>
	}</block></class>
}</block></namespace></unit>
