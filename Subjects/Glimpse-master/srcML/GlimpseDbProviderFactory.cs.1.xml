<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Ado\AlternateType\GlimpseDbProviderFactory.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Data</name><op:operator pos:line="2" pos:column="18">.</op:operator><name pos:line="2" pos:column="19">Common</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Reflection</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Core</name><op:operator pos:line="4" pos:column="19">.</op:operator><name pos:line="4" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Glimpse</name><op:operator pos:line="5" pos:column="14">.</op:operator><name pos:line="5" pos:column="15">Core</name><op:operator pos:line="5" pos:column="19">.</op:operator><name pos:line="5" pos:column="20">Framework</name></name>;</using>

<namespace pos:line="7" pos:column="1">namespace <name><name pos:line="7" pos:column="11">Glimpse</name><op:operator pos:line="7" pos:column="18">.</op:operator><name pos:line="7" pos:column="19">Ado</name><op:operator pos:line="7" pos:column="22">.</op:operator><name pos:line="7" pos:column="23">AlternateType</name></name>
<block pos:line="8" pos:column="1">{
    <class><specifier pos:line="9" pos:column="5">public</specifier> <specifier pos:line="9" pos:column="12">abstract</specifier> class <name pos:line="9" pos:column="27">GlimpseDbProviderFactory</name> <super pos:line="9" pos:column="52">: <name pos:line="9" pos:column="54">DbProviderFactory</name></super>
    <block pos:line="10" pos:column="5">{
    }</block></class>

    <class><specifier pos:line="13" pos:column="5">public</specifier> class <name><name pos:line="13" pos:column="18">GlimpseDbProviderFactory</name><argument_list pos:line="13" pos:column="42">&lt;<argument><name pos:line="13" pos:column="43">TProviderFactory</name></argument>&gt;</argument_list></name> <super pos:line="13" pos:column="61">: <name pos:line="13" pos:column="63">GlimpseDbProviderFactory</name>, <name pos:line="13" pos:column="89">IServiceProvider</name></super>
        <where pos:line="14" pos:column="9">where <name pos:line="14" pos:column="15">TProviderFactory</name> : <name pos:line="14" pos:column="34">DbProviderFactory</name></where>
    <block pos:line="15" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="16" pos:column="9">public</specifier> <specifier pos:line="16" pos:column="16">static</specifier> <specifier pos:line="16" pos:column="23">readonly</specifier> <name><name pos:line="16" pos:column="32">GlimpseDbProviderFactory</name><argument_list pos:line="16" pos:column="56">&lt;<argument><name pos:line="16" pos:column="57">TProviderFactory</name></argument>&gt;</argument_list></name></type> <name pos:line="16" pos:column="75">Instance</name> <init pos:line="16" pos:column="84">= <expr><op:operator pos:line="16" pos:column="86">new</op:operator> <call><name><name pos:line="16" pos:column="90">GlimpseDbProviderFactory</name><argument_list pos:line="16" pos:column="114">&lt;<argument><name pos:line="16" pos:column="115">TProviderFactory</name></argument>&gt;</argument_list></name><argument_list pos:line="16" pos:column="132">()</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <constructor><specifier pos:line="18" pos:column="9">public</specifier> <name pos:line="18" pos:column="16">GlimpseDbProviderFactory</name><parameter_list pos:line="18" pos:column="40">()</parameter_list>
        <block pos:line="19" pos:column="9">{            
            <decl_stmt><decl><type><name pos:line="20" pos:column="13">var</name></type> <name pos:line="20" pos:column="17">field</name> <init pos:line="20" pos:column="23">= <expr><call><name pos:line="20" pos:column="25">typeof</name><argument_list pos:line="20" pos:column="31">(<argument><expr><name pos:line="20" pos:column="32">TProviderFactory</name></expr></argument>)</argument_list></call><op:operator pos:line="20" pos:column="49">.</op:operator><call><name pos:line="20" pos:column="50">GetField</name><argument_list pos:line="20" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="20" pos:column="59">"Instance"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="71">BindingFlags</name><op:operator pos:line="20" pos:column="83">.</op:operator><name pos:line="20" pos:column="84">Public</name></name> <op:operator pos:line="20" pos:column="91">|</op:operator> <name><name pos:line="20" pos:column="93">BindingFlags</name><op:operator pos:line="20" pos:column="105">.</op:operator><name pos:line="20" pos:column="106">Static</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="21" pos:column="13">if <condition pos:line="21" pos:column="16">(<expr><name pos:line="21" pos:column="17">field</name> <op:operator pos:line="21" pos:column="23">==</op:operator> <name pos:line="21" pos:column="26">null</name></expr>)</condition><then pos:line="21" pos:column="31">
            <block pos:line="22" pos:column="13">{
                <throw pos:line="23" pos:column="17">throw <expr><op:operator pos:line="23" pos:column="23">new</op:operator> <call><name pos:line="23" pos:column="27">NotSupportedException</name><argument_list pos:line="23" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="23" pos:column="49">"Provider doesn't have Instance property."</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <expr_stmt><expr><name pos:line="26" pos:column="13">InnerFactory</name> <op:operator pos:line="26" pos:column="26">=</op:operator> <op:operator pos:line="26" pos:column="28">(</op:operator><name pos:line="26" pos:column="29">TProviderFactory</name><op:operator pos:line="26" pos:column="45">)</op:operator><call><name><name pos:line="26" pos:column="46">field</name><op:operator pos:line="26" pos:column="51">.</op:operator><name pos:line="26" pos:column="52">GetValue</name></name><argument_list pos:line="26" pos:column="60">(<argument><expr><name pos:line="26" pos:column="61">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>           
        }</block></constructor>

        <decl_stmt><decl><type><specifier pos:line="29" pos:column="9">public</specifier> <specifier pos:line="29" pos:column="16">override</specifier> <name pos:line="29" pos:column="25">bool</name></type> <name pos:line="29" pos:column="30">CanCreateDataSourceEnumerator</name>
        <block pos:line="30" pos:column="9">{
            <function><name pos:line="31" pos:column="13">get</name> <block pos:line="31" pos:column="17">{ <return pos:line="31" pos:column="19">return <expr><name><name pos:line="31" pos:column="26">InnerFactory</name><op:operator pos:line="31" pos:column="38">.</op:operator><name pos:line="31" pos:column="39">CanCreateDataSourceEnumerator</name></name></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="34" pos:column="9">private</specifier> <name pos:line="34" pos:column="17">TProviderFactory</name></type> <name pos:line="34" pos:column="34">InnerFactory</name> <block pos:line="34" pos:column="47">{ <function_decl><name pos:line="34" pos:column="49">get</name>;</function_decl> <function_decl><name pos:line="34" pos:column="54">set</name>;</function_decl> }</block></decl></decl_stmt>

        <function><type><specifier pos:line="36" pos:column="9">public</specifier> <specifier pos:line="36" pos:column="16">override</specifier> <name pos:line="36" pos:column="25">DbCommand</name></type> <name pos:line="36" pos:column="35">CreateCommand</name><parameter_list pos:line="36" pos:column="48">()</parameter_list>
        <block pos:line="37" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="38" pos:column="13">var</name></type> <name pos:line="38" pos:column="17">command</name> <init pos:line="38" pos:column="25">= <expr><call><name><name pos:line="38" pos:column="27">InnerFactory</name><op:operator pos:line="38" pos:column="39">.</op:operator><name pos:line="38" pos:column="40">CreateCommand</name></name><argument_list pos:line="38" pos:column="53">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="39" pos:column="13">if <condition pos:line="39" pos:column="16">(<expr><call><name pos:line="39" pos:column="17">IsAdoMonitoringNeeded</name><argument_list pos:line="39" pos:column="38">()</argument_list></call></expr>)</condition><then pos:line="39" pos:column="41"> 
            <block pos:line="40" pos:column="13">{
                <return pos:line="41" pos:column="17">return <expr><op:operator pos:line="41" pos:column="24">new</op:operator> <call><name pos:line="41" pos:column="28">GlimpseDbCommand</name><argument_list pos:line="41" pos:column="44">(<argument><expr><name pos:line="41" pos:column="45">command</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
            <return pos:line="43" pos:column="13">return <expr><name pos:line="43" pos:column="20">command</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="46" pos:column="9">public</specifier> <specifier pos:line="46" pos:column="16">override</specifier> <name pos:line="46" pos:column="25">DbCommandBuilder</name></type> <name pos:line="46" pos:column="42">CreateCommandBuilder</name><parameter_list pos:line="46" pos:column="62">()</parameter_list>
        <block pos:line="47" pos:column="9">{
            <return pos:line="48" pos:column="13">return <expr><call><name><name pos:line="48" pos:column="20">InnerFactory</name><op:operator pos:line="48" pos:column="32">.</op:operator><name pos:line="48" pos:column="33">CreateCommandBuilder</name></name><argument_list pos:line="48" pos:column="53">()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="51" pos:column="9">public</specifier> <specifier pos:line="51" pos:column="16">override</specifier> <name pos:line="51" pos:column="25">DbConnection</name></type> <name pos:line="51" pos:column="38">CreateConnection</name><parameter_list pos:line="51" pos:column="54">()</parameter_list>
        <block pos:line="52" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="53" pos:column="13">var</name></type> <name pos:line="53" pos:column="17">connection</name> <init pos:line="53" pos:column="28">= <expr><call><name><name pos:line="53" pos:column="30">InnerFactory</name><op:operator pos:line="53" pos:column="42">.</op:operator><name pos:line="53" pos:column="43">CreateConnection</name></name><argument_list pos:line="53" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="54" pos:column="13">if <condition pos:line="54" pos:column="16">(<expr><call><name pos:line="54" pos:column="17">IsAdoMonitoringNeeded</name><argument_list pos:line="54" pos:column="38">()</argument_list></call></expr>)</condition><then pos:line="54" pos:column="41"> 
            <block pos:line="55" pos:column="13">{
                <return pos:line="56" pos:column="17">return <expr><op:operator pos:line="56" pos:column="24">new</op:operator> <call><name pos:line="56" pos:column="28">GlimpseDbConnection</name><argument_list pos:line="56" pos:column="47">(<argument><expr><name pos:line="56" pos:column="48">connection</name></expr></argument>, <argument><expr><name pos:line="56" pos:column="60">this</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
            <return pos:line="58" pos:column="13">return <expr><name pos:line="58" pos:column="20">connection</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="61" pos:column="9">public</specifier> <specifier pos:line="61" pos:column="16">override</specifier> <name pos:line="61" pos:column="25">DbConnectionStringBuilder</name></type> <name pos:line="61" pos:column="51">CreateConnectionStringBuilder</name><parameter_list pos:line="61" pos:column="80">()</parameter_list>
        <block pos:line="62" pos:column="9">{
            <return pos:line="63" pos:column="13">return <expr><call><name><name pos:line="63" pos:column="20">InnerFactory</name><op:operator pos:line="63" pos:column="32">.</op:operator><name pos:line="63" pos:column="33">CreateConnectionStringBuilder</name></name><argument_list pos:line="63" pos:column="62">()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="66" pos:column="9">public</specifier> <specifier pos:line="66" pos:column="16">override</specifier> <name pos:line="66" pos:column="25">DbDataAdapter</name></type> <name pos:line="66" pos:column="39">CreateDataAdapter</name><parameter_list pos:line="66" pos:column="56">()</parameter_list>
        <block pos:line="67" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="68" pos:column="13">var</name></type> <name pos:line="68" pos:column="17">adapter</name> <init pos:line="68" pos:column="25">= <expr><call><name><name pos:line="68" pos:column="27">InnerFactory</name><op:operator pos:line="68" pos:column="39">.</op:operator><name pos:line="68" pos:column="40">CreateDataAdapter</name></name><argument_list pos:line="68" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="69" pos:column="13">if <condition pos:line="69" pos:column="16">(<expr><call><name pos:line="69" pos:column="17">IsAdoMonitoringNeeded</name><argument_list pos:line="69" pos:column="38">()</argument_list></call></expr>)</condition><then pos:line="69" pos:column="41"> 
            <block pos:line="70" pos:column="13">{
                <return pos:line="71" pos:column="17">return <expr><op:operator pos:line="71" pos:column="24">new</op:operator> <call><name pos:line="71" pos:column="28">GlimpseDbDataAdapter</name><argument_list pos:line="71" pos:column="48">(<argument><expr><name pos:line="71" pos:column="49">adapter</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
            <return pos:line="73" pos:column="13">return <expr><name pos:line="73" pos:column="20">adapter</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="76" pos:column="9">public</specifier> <specifier pos:line="76" pos:column="16">override</specifier> <name pos:line="76" pos:column="25">DbDataSourceEnumerator</name></type> <name pos:line="76" pos:column="48">CreateDataSourceEnumerator</name><parameter_list pos:line="76" pos:column="74">()</parameter_list>
        <block pos:line="77" pos:column="9">{
            <return pos:line="78" pos:column="13">return <expr><call><name><name pos:line="78" pos:column="20">InnerFactory</name><op:operator pos:line="78" pos:column="32">.</op:operator><name pos:line="78" pos:column="33">CreateDataSourceEnumerator</name></name><argument_list pos:line="78" pos:column="59">()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="81" pos:column="9">public</specifier> <specifier pos:line="81" pos:column="16">override</specifier> <name pos:line="81" pos:column="25">DbParameter</name></type> <name pos:line="81" pos:column="37">CreateParameter</name><parameter_list pos:line="81" pos:column="52">()</parameter_list>
        <block pos:line="82" pos:column="9">{
            <return pos:line="83" pos:column="13">return <expr><call><name><name pos:line="83" pos:column="20">InnerFactory</name><op:operator pos:line="83" pos:column="32">.</op:operator><name pos:line="83" pos:column="33">CreateParameter</name></name><argument_list pos:line="83" pos:column="48">()</argument_list></call></expr>;</return>
        }</block></function>
         
        <function><type><specifier pos:line="86" pos:column="9">public</specifier> <name pos:line="86" pos:column="16">object</name></type> <name pos:line="86" pos:column="23">GetService</name><parameter_list pos:line="86" pos:column="33">(<param><decl><type><name pos:line="86" pos:column="34">Type</name></type> <name pos:line="86" pos:column="39">serviceType</name></decl></param>)</parameter_list>
        <block pos:line="87" pos:column="9">{
            <if pos:line="88" pos:column="13">if <condition pos:line="88" pos:column="16">(<expr><name pos:line="88" pos:column="17">serviceType</name> <op:operator pos:line="88" pos:column="29">==</op:operator> <call><name pos:line="88" pos:column="32">GetType</name><argument_list pos:line="88" pos:column="39">()</argument_list></call></expr>)</condition><then pos:line="88" pos:column="42">
            <block pos:line="89" pos:column="13">{
                <return pos:line="90" pos:column="17">return <expr><name pos:line="90" pos:column="24">InnerFactory</name></expr>;</return>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="93" pos:column="13">var</name></type> <name pos:line="93" pos:column="17">service</name> <init pos:line="93" pos:column="25">= <expr><op:operator pos:line="93" pos:column="27">(</op:operator><op:operator pos:line="93" pos:column="28">(</op:operator><name pos:line="93" pos:column="29">IServiceProvider</name><op:operator pos:line="93" pos:column="45">)</op:operator><name pos:line="93" pos:column="46">InnerFactory</name><op:operator pos:line="93" pos:column="58">)</op:operator><op:operator pos:line="93" pos:column="59">.</op:operator><call><name pos:line="93" pos:column="60">GetService</name><argument_list pos:line="93" pos:column="70">(<argument><expr><name pos:line="93" pos:column="71">serviceType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="95" pos:column="13">// HACK: To make things easier on ourselves we are going to try and see</comment>
            <comment type="line" pos:line="96" pos:column="13">// what we can do for people using EF. If they are using EF but don't have</comment>
            <comment type="line" pos:line="97" pos:column="13">// Glimpse.EF then we throw because the exception that will be caused down </comment>
            <comment type="line" pos:line="98" pos:column="13">// the track by EF isn't obvious as to whats going on. When it gets to </comment>
            <comment type="line" pos:line="99" pos:column="13">// requesting DbProviderServices, if we don't return the profiled version, </comment>
            <comment type="line" pos:line="100" pos:column="13">// when GetDbProviderManifestToken is called, it passes in a GlimpseDbConnection rather than the inner connection. This is a problem because the GetDbProviderManifestToken trys to cast the connection to its concreat type</comment>
            <if pos:line="101" pos:column="13">if <condition pos:line="101" pos:column="16">(<expr><name><name pos:line="101" pos:column="17">serviceType</name><op:operator pos:line="101" pos:column="28">.</op:operator><name pos:line="101" pos:column="29">FullName</name></name> <op:operator pos:line="101" pos:column="38">==</op:operator> <lit:literal type="string" pos:line="101" pos:column="41">"System.Data.Common.DbProviderServices"</lit:literal></expr>)</condition><then pos:line="101" pos:column="81">
            <block pos:line="102" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="103" pos:column="17">var</name></type> <name pos:line="103" pos:column="21">type</name> <init pos:line="103" pos:column="26">= <expr><call><name><name pos:line="103" pos:column="28">Type</name><op:operator pos:line="103" pos:column="32">.</op:operator><name pos:line="103" pos:column="33">GetType</name></name><argument_list pos:line="103" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="103" pos:column="41">"Glimpse.EF.AlternateType.GlimpseDbProviderServices, Glimpse.EF43"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="103" pos:column="109">false</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="104" pos:column="17">if <condition pos:line="104" pos:column="20">(<expr><name pos:line="104" pos:column="21">type</name> <op:operator pos:line="104" pos:column="26">==</op:operator> <name pos:line="104" pos:column="29">null</name></expr>)</condition><then pos:line="104" pos:column="34">
                <block pos:line="105" pos:column="17">{
                    <expr_stmt><expr><name pos:line="106" pos:column="21">type</name> <op:operator pos:line="106" pos:column="26">=</op:operator> <call><name><name pos:line="106" pos:column="28">Type</name><op:operator pos:line="106" pos:column="32">.</op:operator><name pos:line="106" pos:column="33">GetType</name></name><argument_list pos:line="106" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="106" pos:column="41">"Glimpse.EF.AlternateType.GlimpseDbProviderServices, Glimpse.EF5"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="106" pos:column="108">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <if pos:line="109" pos:column="17">if <condition pos:line="109" pos:column="20">(<expr><name pos:line="109" pos:column="21">type</name> <op:operator pos:line="109" pos:column="26">==</op:operator> <name pos:line="109" pos:column="29">null</name></expr>)</condition><then pos:line="109" pos:column="34">
                <block pos:line="110" pos:column="17">{
                    <expr_stmt><expr><name pos:line="111" pos:column="21">type</name> <op:operator pos:line="111" pos:column="26">=</op:operator> <call><name><name pos:line="111" pos:column="28">Type</name><op:operator pos:line="111" pos:column="32">.</op:operator><name pos:line="111" pos:column="33">GetType</name></name><argument_list pos:line="111" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="111" pos:column="41">"Glimpse.EF.AlternateType.GlimpseDbProviderServices, Glimpse.EF6"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="111" pos:column="108">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <if pos:line="114" pos:column="17">if <condition pos:line="114" pos:column="20">(<expr><name pos:line="114" pos:column="21">type</name> <op:operator pos:line="114" pos:column="26">!=</op:operator> <name pos:line="114" pos:column="29">null</name></expr>)</condition><then pos:line="114" pos:column="34">
                <block pos:line="115" pos:column="17">{
                    <return pos:line="116" pos:column="21">return <expr><call><name><name pos:line="116" pos:column="28">Activator</name><op:operator pos:line="116" pos:column="37">.</op:operator><name pos:line="116" pos:column="38">CreateInstance</name></name><argument_list pos:line="116" pos:column="52">(<argument><expr><name pos:line="116" pos:column="53">type</name></expr></argument>, <argument><expr><name pos:line="116" pos:column="59">service</name></expr></argument>)</argument_list></call></expr>;</return>
                }</block></then></if> 
                
                <throw pos:line="119" pos:column="17">throw <expr><op:operator pos:line="119" pos:column="23">new</op:operator> <call><name pos:line="119" pos:column="27">NotSupportedException</name><argument_list pos:line="119" pos:column="48">(<argument><expr><name><name pos:line="119" pos:column="49">Resources</name><op:operator pos:line="119" pos:column="58">.</op:operator><name pos:line="119" pos:column="59">GlimpseEFNotPresent</name></name></expr></argument>)</argument_list></call></expr>;</throw>  
            }</block></then></if>

            <return pos:line="122" pos:column="13">return <expr><name pos:line="122" pos:column="20">service</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="125" pos:column="9">private</specifier> <specifier pos:line="125" pos:column="17">static</specifier> <name pos:line="125" pos:column="24">bool</name></type> <name pos:line="125" pos:column="29">IsAdoMonitoringNeeded</name><parameter_list pos:line="125" pos:column="50">()</parameter_list>
        <block pos:line="126" pos:column="9">{
            <return pos:line="127" pos:column="13">return <expr><call><name><name pos:line="127" pos:column="20">GlimpseConfiguration</name><op:operator pos:line="127" pos:column="40">.</op:operator><name pos:line="127" pos:column="41">GetConfiguredMessageBroker</name></name><argument_list pos:line="127" pos:column="67">()</argument_list></call> <op:operator pos:line="127" pos:column="70">!=</op:operator> <name pos:line="127" pos:column="73">null</name> <op:operator pos:line="127" pos:column="78">&amp;&amp;</op:operator>
                   <call><name><name pos:line="128" pos:column="20">GlimpseConfiguration</name><op:operator pos:line="128" pos:column="40">.</op:operator><name pos:line="128" pos:column="41">GetDefaultRuntimePolicy</name></name><argument_list pos:line="128" pos:column="64">()</argument_list></call> <op:operator pos:line="128" pos:column="67">!=</op:operator> <name><name pos:line="128" pos:column="70">RuntimePolicy</name><op:operator pos:line="128" pos:column="83">.</op:operator><name pos:line="128" pos:column="84">Off</name> <type:modifier pos:line="128" pos:column="88">&amp;&amp;</type:modifier></name>
                   <call><call><name><name pos:line="129" pos:column="20">GlimpseConfiguration</name><op:operator pos:line="129" pos:column="40">.</op:operator><name pos:line="129" pos:column="41">GetRuntimePolicyStategy</name></name><argument_list pos:line="129" pos:column="64">()</argument_list></call><argument_list pos:line="129" pos:column="66">()</argument_list></call> <op:operator pos:line="129" pos:column="69">!=</op:operator> <name><name pos:line="129" pos:column="72">RuntimePolicy</name><op:operator pos:line="129" pos:column="85">.</op:operator><name pos:line="129" pos:column="86">Off</name></name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
