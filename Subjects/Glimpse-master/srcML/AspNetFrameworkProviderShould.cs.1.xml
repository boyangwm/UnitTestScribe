<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.AspNet\AspNetFrameworkProviderShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">IO</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Web</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Core</name><op:operator pos:line="4" pos:column="19">.</op:operator><name pos:line="4" pos:column="20">Extensions</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Glimpse</name><op:operator pos:line="5" pos:column="14">.</op:operator><name pos:line="5" pos:column="15">Test</name><op:operator pos:line="5" pos:column="19">.</op:operator><name pos:line="5" pos:column="20">AspNet</name><op:operator pos:line="5" pos:column="26">.</op:operator><name pos:line="5" pos:column="27">Tester</name></name>;</using>
<using pos:line="6" pos:column="1">using <name pos:line="6" pos:column="7">Moq</name>;</using>
<using pos:line="7" pos:column="1">using <name pos:line="7" pos:column="7">Xunit</name>;</using>

<namespace pos:line="9" pos:column="1">namespace <name><name pos:line="9" pos:column="11">Glimpse</name><op:operator pos:line="9" pos:column="18">.</op:operator><name pos:line="9" pos:column="19">Test</name><op:operator pos:line="9" pos:column="23">.</op:operator><name pos:line="9" pos:column="24">AspNet</name></name>
<block pos:line="10" pos:column="1">{
    <class><specifier pos:line="11" pos:column="5">public</specifier> class <name pos:line="11" pos:column="18">AspNetFrameworkProviderShould</name> <super pos:line="11" pos:column="48">: <name pos:line="11" pos:column="50">IDisposable</name></super>
    <block pos:line="12" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="13" pos:column="9">private</specifier> <name pos:line="13" pos:column="17">AspNetFrameworkProviderTester</name></type> <name pos:line="13" pos:column="47">tester</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="15" pos:column="9">public</specifier> <name pos:line="15" pos:column="16">AspNetFrameworkProviderTester</name></type> <name pos:line="15" pos:column="46">FrameworkProvider</name>
        <block pos:line="16" pos:column="9">{
            <function><name pos:line="17" pos:column="13">get</name> <block pos:line="17" pos:column="17">{ <return pos:line="17" pos:column="19">return <expr><name pos:line="17" pos:column="26">tester</name> <op:operator pos:line="17" pos:column="33">??</op:operator> <op:operator pos:line="17" pos:column="36">(</op:operator><name pos:line="17" pos:column="37">tester</name> <op:operator pos:line="17" pos:column="44">=</op:operator> <call><name><name pos:line="17" pos:column="46">AspNetFrameworkProviderTester</name><op:operator pos:line="17" pos:column="75">.</op:operator><name pos:line="17" pos:column="76">Create</name></name><argument_list pos:line="17" pos:column="82">()</argument_list></call><op:operator pos:line="17" pos:column="84">)</op:operator></expr>;</return> }</block></function>
            <function><name pos:line="18" pos:column="13">set</name> <block pos:line="18" pos:column="17">{ <expr_stmt><expr><name pos:line="18" pos:column="19">tester</name> <op:operator pos:line="18" pos:column="26">=</op:operator> <name pos:line="18" pos:column="28">value</name></expr>;</expr_stmt> }</block></function>
        }</block></decl></decl_stmt>

        <function><type><specifier pos:line="21" pos:column="9">public</specifier> <name pos:line="21" pos:column="16">void</name></type> <name pos:line="21" pos:column="21">Dispose</name><parameter_list pos:line="21" pos:column="28">()</parameter_list>
        <block pos:line="22" pos:column="9">{
            <expr_stmt><expr><name pos:line="23" pos:column="13">FrameworkProvider</name> <op:operator pos:line="23" pos:column="31">=</op:operator> <name pos:line="23" pos:column="33">null</name></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="26" pos:column="9">[<expr><name pos:line="26" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="27" pos:column="9">public</specifier> <name pos:line="27" pos:column="16">void</name></type> <name pos:line="27" pos:column="21">HaveARuntimeContextTypeOfHttpContextBase</name><parameter_list pos:line="27" pos:column="61">()</parameter_list>
        <block pos:line="28" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="29" pos:column="13">Assert</name><op:operator pos:line="29" pos:column="19">.</op:operator><name pos:line="29" pos:column="20">True</name></name><argument_list pos:line="29" pos:column="24">(<argument><expr><call><name><name pos:line="29" pos:column="25">FrameworkProvider</name><op:operator pos:line="29" pos:column="42">.</op:operator><name pos:line="29" pos:column="43">RuntimeContext</name><op:operator pos:line="29" pos:column="57">.</op:operator><name pos:line="29" pos:column="58">GetType</name></name><argument_list pos:line="29" pos:column="65">()</argument_list></call><op:operator pos:line="29" pos:column="67">.</op:operator><call><name pos:line="29" pos:column="68">IsSubclassOf</name><argument_list pos:line="29" pos:column="80">(<argument><expr><call><name pos:line="29" pos:column="81">typeof</name> <argument_list pos:line="29" pos:column="88">(<argument><expr><name pos:line="29" pos:column="89">HttpContextBase</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="32" pos:column="9">[<expr><name pos:line="32" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="33" pos:column="9">public</specifier> <name pos:line="33" pos:column="16">void</name></type> <name pos:line="33" pos:column="21">HaveARuntimeContext</name><parameter_list pos:line="33" pos:column="40">()</parameter_list>
        <block pos:line="34" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="35" pos:column="13">Assert</name><op:operator pos:line="35" pos:column="19">.</op:operator><name pos:line="35" pos:column="20">NotNull</name></name><argument_list pos:line="35" pos:column="27">(<argument><expr><name><name pos:line="35" pos:column="28">FrameworkProvider</name><op:operator pos:line="35" pos:column="45">.</op:operator><name pos:line="35" pos:column="46">RuntimeContext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="36" pos:column="13">Assert</name><op:operator pos:line="36" pos:column="19">.</op:operator><name pos:line="36" pos:column="20">True</name></name><argument_list pos:line="36" pos:column="24">(<argument><expr><name><name pos:line="36" pos:column="25">FrameworkProvider</name><op:operator pos:line="36" pos:column="42">.</op:operator><name pos:line="36" pos:column="43">RuntimeContext</name></name> <op:operator pos:line="36" pos:column="58">is</op:operator> <name pos:line="36" pos:column="61">HttpContextBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="39" pos:column="9">[<expr><name pos:line="39" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="40" pos:column="9">public</specifier> <name pos:line="40" pos:column="16">void</name></type> <name pos:line="40" pos:column="21">HaveHttpRequestStore</name><parameter_list pos:line="40" pos:column="41">()</parameter_list>
        <block pos:line="41" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="42" pos:column="13">Assert</name><op:operator pos:line="42" pos:column="19">.</op:operator><name pos:line="42" pos:column="20">NotNull</name></name><argument_list pos:line="42" pos:column="27">(<argument><expr><name><name pos:line="42" pos:column="28">FrameworkProvider</name><op:operator pos:line="42" pos:column="45">.</op:operator><name pos:line="42" pos:column="46">HttpRequestStore</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="43" pos:column="13">Assert</name><op:operator pos:line="43" pos:column="19">.</op:operator><name pos:line="43" pos:column="20">Equal</name></name><argument_list pos:line="43" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="43" pos:column="26">5</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="43" pos:column="29">FrameworkProvider</name><op:operator pos:line="43" pos:column="46">.</op:operator><name pos:line="43" pos:column="47">HttpRequestStore</name><op:operator pos:line="43" pos:column="63">.</op:operator><name><name pos:line="43" pos:column="64">Get</name><argument_list pos:line="43" pos:column="67">&lt;<argument><name pos:line="43" pos:column="68">int</name></argument>&gt;</argument_list></name></name><argument_list pos:line="43" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="44" pos:column="13">Assert</name><op:operator pos:line="44" pos:column="19">.</op:operator><name pos:line="44" pos:column="20">Equal</name></name><argument_list pos:line="44" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="44" pos:column="26">"TestString"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="44" pos:column="40">FrameworkProvider</name><op:operator pos:line="44" pos:column="57">.</op:operator><name pos:line="44" pos:column="58">HttpRequestStore</name><op:operator pos:line="44" pos:column="74">.</op:operator><name><name pos:line="44" pos:column="75">Get</name><argument_list pos:line="44" pos:column="78">&lt;<argument><name pos:line="44" pos:column="79">string</name></argument>&gt;</argument_list></name></name><argument_list pos:line="44" pos:column="86">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="47" pos:column="9">[<expr><name pos:line="47" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="48" pos:column="9">public</specifier> <name pos:line="48" pos:column="16">void</name></type> <name pos:line="48" pos:column="21">HaveHttpServerStore</name><parameter_list pos:line="48" pos:column="40">()</parameter_list>
        <block pos:line="49" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="50" pos:column="13">Assert</name><op:operator pos:line="50" pos:column="19">.</op:operator><name pos:line="50" pos:column="20">NotNull</name></name><argument_list pos:line="50" pos:column="27">(<argument><expr><name><name pos:line="50" pos:column="28">FrameworkProvider</name><op:operator pos:line="50" pos:column="45">.</op:operator><name pos:line="50" pos:column="46">HttpServerStore</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="51" pos:column="13">Assert</name><op:operator pos:line="51" pos:column="19">.</op:operator><name pos:line="51" pos:column="20">Equal</name></name><argument_list pos:line="51" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="51" pos:column="26">"testValue"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="51" pos:column="39">FrameworkProvider</name><op:operator pos:line="51" pos:column="56">.</op:operator><name pos:line="51" pos:column="57">HttpServerStore</name><op:operator pos:line="51" pos:column="72">.</op:operator><name pos:line="51" pos:column="73">Get</name></name><argument_list pos:line="51" pos:column="76">(<argument><expr><lit:literal type="string" pos:line="51" pos:column="77">"testKey"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="53" pos:column="13">FrameworkProvider</name><op:operator pos:line="53" pos:column="30">.</op:operator><name pos:line="53" pos:column="31">HttpApplicationStateMock</name><op:operator pos:line="53" pos:column="55">.</op:operator><name pos:line="53" pos:column="56">Verify</name></name><argument_list pos:line="53" pos:column="62">(<argument><expr><lambda><name pos:line="53" pos:column="63">st</name> <op:operator pos:line="53" pos:column="66">=&gt;</op:operator> <call><name><name pos:line="53" pos:column="69">st</name><op:operator pos:line="53" pos:column="71">.</op:operator><name pos:line="53" pos:column="72">Get</name></name><argument_list pos:line="53" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="53" pos:column="76">"testKey"</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="53" pos:column="88">Times</name><op:operator pos:line="53" pos:column="93">.</op:operator><name pos:line="53" pos:column="94">Once</name></name><argument_list pos:line="53" pos:column="98">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

 
        <function><type><attribute pos:line="57" pos:column="9">[<expr><name pos:line="57" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="58" pos:column="9">public</specifier> <name pos:line="58" pos:column="16">void</name></type> <name pos:line="58" pos:column="21">SetHttpResponseHeader</name><parameter_list pos:line="58" pos:column="42">()</parameter_list>
        <block pos:line="59" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="60" pos:column="13">var</name></type> <name pos:line="60" pos:column="17">headerName</name> <init pos:line="60" pos:column="28">= <expr><lit:literal type="string" pos:line="60" pos:column="30">"testKey"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="61" pos:column="13">var</name></type> <name pos:line="61" pos:column="17">headerValue</name> <init pos:line="61" pos:column="29">= <expr><lit:literal type="string" pos:line="61" pos:column="31">"testValue"</lit:literal></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="63" pos:column="13">FrameworkProvider</name><op:operator pos:line="63" pos:column="30">.</op:operator><name pos:line="63" pos:column="31">SetHttpResponseHeader</name></name><argument_list pos:line="63" pos:column="52">(<argument><expr><name pos:line="63" pos:column="53">headerName</name></expr></argument>, <argument><expr><name pos:line="63" pos:column="65">headerValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="65" pos:column="13">FrameworkProvider</name><op:operator pos:line="65" pos:column="30">.</op:operator><name pos:line="65" pos:column="31">HttpResponseMock</name><op:operator pos:line="65" pos:column="47">.</op:operator><name pos:line="65" pos:column="48">Verify</name></name><argument_list pos:line="65" pos:column="54">(<argument><expr><lambda><name pos:line="65" pos:column="55">r</name><op:operator pos:line="65" pos:column="56">=&gt;</op:operator><call><name><name pos:line="65" pos:column="58">r</name><op:operator pos:line="65" pos:column="59">.</op:operator><name pos:line="65" pos:column="60">AppendHeader</name></name><argument_list pos:line="65" pos:column="72">(<argument><expr><name pos:line="65" pos:column="73">headerName</name></expr></argument>, <argument><expr><name pos:line="65" pos:column="85">headerValue</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="68" pos:column="9">[<expr><name pos:line="68" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="69" pos:column="9">public</specifier> <name pos:line="69" pos:column="16">void</name></type> <name pos:line="69" pos:column="21">InjectHttpResponseBody</name><parameter_list pos:line="69" pos:column="43">()</parameter_list>
        <block pos:line="70" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="71" pos:column="13">var</name></type> <name pos:line="71" pos:column="17">outputString</name> <init pos:line="71" pos:column="30">= <expr><lit:literal type="string" pos:line="71" pos:column="32">"&lt;script src=\"test.js\"&gt;&lt;/script&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="73" pos:column="13">FrameworkProvider</name><op:operator pos:line="73" pos:column="30">.</op:operator><name pos:line="73" pos:column="31">InjectHttpResponseBody</name></name><argument_list pos:line="73" pos:column="53">(<argument><expr><name pos:line="73" pos:column="54">outputString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="75" pos:column="13">FrameworkProvider</name><op:operator pos:line="75" pos:column="30">.</op:operator><name pos:line="75" pos:column="31">HttpContextMock</name><op:operator pos:line="75" pos:column="46">.</op:operator><name pos:line="75" pos:column="47">VerifyGet</name></name><argument_list pos:line="75" pos:column="56">(<argument><expr><lambda><name pos:line="75" pos:column="57">ctx</name> <op:operator pos:line="75" pos:column="61">=&gt;</op:operator> <name><name pos:line="75" pos:column="64">ctx</name><op:operator pos:line="75" pos:column="67">.</op:operator><name pos:line="75" pos:column="68">Response</name></name></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="76" pos:column="13">FrameworkProvider</name><op:operator pos:line="76" pos:column="30">.</op:operator><name pos:line="76" pos:column="31">HttpResponseMock</name><op:operator pos:line="76" pos:column="47">.</op:operator><name pos:line="76" pos:column="48">VerifyGet</name></name><argument_list pos:line="76" pos:column="57">(<argument><expr><lambda><name pos:line="76" pos:column="58">r</name> <op:operator pos:line="76" pos:column="60">=&gt;</op:operator> <name><name pos:line="76" pos:column="63">r</name><op:operator pos:line="76" pos:column="64">.</op:operator><name pos:line="76" pos:column="65">Filter</name></name></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="77" pos:column="13">FrameworkProvider</name><op:operator pos:line="77" pos:column="30">.</op:operator><name pos:line="77" pos:column="31">HttpResponseMock</name><op:operator pos:line="77" pos:column="47">.</op:operator><name pos:line="77" pos:column="48">VerifySet</name></name><argument_list pos:line="77" pos:column="57">(<argument><expr><lambda><name pos:line="77" pos:column="58">r</name> <op:operator pos:line="77" pos:column="60">=&gt;</op:operator> <name><name pos:line="77" pos:column="63">r</name><op:operator pos:line="77" pos:column="64">.</op:operator><name pos:line="77" pos:column="65">Filter</name></name> <op:operator pos:line="77" pos:column="72">=</op:operator> <call><name><name pos:line="77" pos:column="74">It</name><op:operator pos:line="77" pos:column="76">.</op:operator><name><name pos:line="77" pos:column="77">IsAny</name><argument_list pos:line="77" pos:column="82">&lt;<argument><name pos:line="77" pos:column="83">Stream</name></argument>&gt;</argument_list></name></name><argument_list pos:line="77" pos:column="90">()</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="80" pos:column="9">[<expr><name pos:line="80" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="81" pos:column="9">public</specifier> <name pos:line="81" pos:column="16">void</name></type> <name pos:line="81" pos:column="21">SetHttpResponseStatusCode</name><parameter_list pos:line="81" pos:column="46">()</parameter_list>
        <block pos:line="82" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="83" pos:column="13">var</name></type> <name pos:line="83" pos:column="17">statusCode</name> <init pos:line="83" pos:column="28">= <expr><lit:literal type="number" pos:line="83" pos:column="30">200</lit:literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="84" pos:column="13">FrameworkProvider</name><op:operator pos:line="84" pos:column="30">.</op:operator><name pos:line="84" pos:column="31">SetHttpResponseStatusCode</name></name><argument_list pos:line="84" pos:column="56">(<argument><expr><name pos:line="84" pos:column="57">statusCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="86" pos:column="13">FrameworkProvider</name><op:operator pos:line="86" pos:column="30">.</op:operator><name pos:line="86" pos:column="31">HttpResponseMock</name><op:operator pos:line="86" pos:column="47">.</op:operator><name pos:line="86" pos:column="48">VerifySet</name></name><argument_list pos:line="86" pos:column="57">(<argument><expr><lambda><name pos:line="86" pos:column="58">r</name> <op:operator pos:line="86" pos:column="60">=&gt;</op:operator> <name><name pos:line="86" pos:column="63">r</name><op:operator pos:line="86" pos:column="64">.</op:operator><name pos:line="86" pos:column="65">StatusCode</name></name> <op:operator pos:line="86" pos:column="76">=</op:operator> <name pos:line="86" pos:column="78">statusCode</name></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="87" pos:column="13">FrameworkProvider</name><op:operator pos:line="87" pos:column="30">.</op:operator><name pos:line="87" pos:column="31">HttpResponseMock</name><op:operator pos:line="87" pos:column="47">.</op:operator><name pos:line="87" pos:column="48">VerifySet</name></name><argument_list pos:line="87" pos:column="57">(<argument><expr><lambda><name pos:line="87" pos:column="58">r</name> <op:operator pos:line="87" pos:column="60">=&gt;</op:operator> <name><name pos:line="87" pos:column="63">r</name><op:operator pos:line="87" pos:column="64">.</op:operator><name pos:line="87" pos:column="65">StatusDescription</name></name> <op:operator pos:line="87" pos:column="83">=</op:operator> <name pos:line="87" pos:column="85">null</name></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
