<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Core\Extensibility\ISerializer.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">System</name><op:operator pos:line="1" pos:column="13">.</op:operator><name pos:line="1" pos:column="14">Collections</name><op:operator pos:line="1" pos:column="25">.</op:operator><name pos:line="1" pos:column="26">Generic</name></name>;</using>

<namespace pos:line="3" pos:column="1">namespace <name><name pos:line="3" pos:column="11">Glimpse</name><op:operator pos:line="3" pos:column="18">.</op:operator><name pos:line="3" pos:column="19">Core</name><op:operator pos:line="3" pos:column="23">.</op:operator><name pos:line="3" pos:column="24">Extensibility</name></name>
<block pos:line="4" pos:column="1">{
    <comment type="line" pos:line="5" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="6" pos:column="5">/// Definition for a provider that can serialize complex objects to JSON.</comment>
    <comment type="line" pos:line="7" pos:column="5">/// &lt;/summary&gt;</comment>
    <class type="interface"><specifier pos:line="8" pos:column="5">public</specifier> interface <name pos:line="8" pos:column="22">ISerializer</name>
    <block pos:line="9" pos:column="5">{
        <comment type="line" pos:line="10" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="11" pos:column="9">/// Serializes the specified object to JSON.</comment>
        <comment type="line" pos:line="12" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="13" pos:column="9">/// &lt;param name="target"&gt;The target to be Serialized.&lt;/param&gt;</comment>
        <comment type="line" pos:line="14" pos:column="9">/// &lt;returns&gt;Serialized object.&lt;/returns&gt;</comment>
        <function_decl><type><name pos:line="15" pos:column="9">string</name></type> <name pos:line="15" pos:column="16">Serialize</name><parameter_list pos:line="15" pos:column="25">(<param><decl><type><name pos:line="15" pos:column="26">object</name></type> <name pos:line="15" pos:column="33">target</name></decl></param>)</parameter_list>;</function_decl>

        <comment type="line" pos:line="17" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="18" pos:column="9">/// Registers a collection of serialization converters which can conduct custom</comment>
        <comment type="line" pos:line="19" pos:column="9">/// transformations on given types when processed.</comment>
        <comment type="line" pos:line="20" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="21" pos:column="9">/// &lt;param name="converters"&gt;The converters.&lt;/param&gt;</comment>
        <function_decl><type><name pos:line="22" pos:column="9">void</name></type> <name pos:line="22" pos:column="14">RegisterSerializationConverters</name><parameter_list pos:line="22" pos:column="45">(<param><decl><type><name><name pos:line="22" pos:column="46">IEnumerable</name><argument_list pos:line="22" pos:column="57">&lt;<argument><name pos:line="22" pos:column="58">ISerializationConverter</name></argument>&gt;</argument_list></name></type> <name pos:line="22" pos:column="83">converters</name></decl></param>)</parameter_list>;</function_decl>
    }</block></class>
}</block></namespace></unit>
