<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Ado\Inspector\Core\DbProviderFactoriesExecutionTask.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Data</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Data</name><op:operator pos:line="4" pos:column="18">.</op:operator><name pos:line="4" pos:column="19">Common</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Linq</name></name>;</using> 
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Glimpse</name><op:operator pos:line="6" pos:column="14">.</op:operator><name pos:line="6" pos:column="15">Ado</name><op:operator pos:line="6" pos:column="18">.</op:operator><name pos:line="6" pos:column="19">AlternateType</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Glimpse</name><op:operator pos:line="7" pos:column="14">.</op:operator><name pos:line="7" pos:column="15">Core</name><op:operator pos:line="7" pos:column="19">.</op:operator><name pos:line="7" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Glimpse</name><op:operator pos:line="8" pos:column="14">.</op:operator><name pos:line="8" pos:column="15">Core</name><op:operator pos:line="8" pos:column="19">.</op:operator><name pos:line="8" pos:column="20">Framework</name><op:operator pos:line="8" pos:column="29">.</op:operator><name pos:line="8" pos:column="30">Support</name></name>;</using>

<namespace pos:line="10" pos:column="1">namespace <name><name pos:line="10" pos:column="11">Glimpse</name><op:operator pos:line="10" pos:column="18">.</op:operator><name pos:line="10" pos:column="19">Ado</name><op:operator pos:line="10" pos:column="22">.</op:operator><name pos:line="10" pos:column="23">Inspector</name><op:operator pos:line="10" pos:column="32">.</op:operator><name pos:line="10" pos:column="33">Core</name></name>
<block pos:line="11" pos:column="1">{
    <class><specifier pos:line="12" pos:column="5">public</specifier> class <name pos:line="12" pos:column="18">DbProviderFactoriesExecutionTask</name> <super pos:line="12" pos:column="51">: <name pos:line="12" pos:column="53">IExecutionTask</name></super>
    <block pos:line="13" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="14" pos:column="9">public</specifier> <specifier pos:line="14" pos:column="16">readonly</specifier> <specifier pos:line="14" pos:column="25">static</specifier> <name><name pos:line="14" pos:column="32">Dictionary</name><argument_list pos:line="14" pos:column="42">&lt;<argument><name pos:line="14" pos:column="43">string</name></argument>, <argument><name pos:line="14" pos:column="51">string</name></argument>&gt;</argument_list></name></type> <name pos:line="14" pos:column="59">Factories</name> <init pos:line="14" pos:column="69">= <expr><op:operator pos:line="14" pos:column="71">new</op:operator> <call><name><name pos:line="14" pos:column="75">Dictionary</name><argument_list pos:line="14" pos:column="85">&lt;<argument><name pos:line="14" pos:column="86">string</name></argument>, <argument><name pos:line="14" pos:column="94">string</name></argument>&gt;</argument_list></name><argument_list pos:line="14" pos:column="101">()</argument_list></call></expr></init></decl>;</decl_stmt> 

        <constructor><specifier pos:line="16" pos:column="9">public</specifier> <name pos:line="16" pos:column="16">DbProviderFactoriesExecutionTask</name><parameter_list pos:line="16" pos:column="48">(<param><decl><type><name pos:line="16" pos:column="49">ILogger</name></type> <name pos:line="16" pos:column="57">logger</name></decl></param>)</parameter_list>
        <block pos:line="17" pos:column="9">{
            <expr_stmt><expr><name pos:line="18" pos:column="13">Logger</name> <op:operator pos:line="18" pos:column="20">=</op:operator> <name pos:line="18" pos:column="22">logger</name></expr>;</expr_stmt>
        }</block></constructor>

        <decl_stmt><decl><type><specifier pos:line="21" pos:column="9">private</specifier> <name pos:line="21" pos:column="17">ILogger</name></type> <name pos:line="21" pos:column="25">Logger</name> <block pos:line="21" pos:column="32">{ <function_decl><name pos:line="21" pos:column="34">get</name>;</function_decl> <function_decl><name pos:line="21" pos:column="39">set</name>;</function_decl> }</block></decl></decl_stmt>

        <function><type><specifier pos:line="23" pos:column="9">public</specifier> <name pos:line="23" pos:column="16">void</name></type> <name pos:line="23" pos:column="21">Execute</name><parameter_list pos:line="23" pos:column="28">()</parameter_list>
        <block pos:line="24" pos:column="9">{ 
            <expr_stmt><expr><call><name><name pos:line="25" pos:column="13">Logger</name><op:operator pos:line="25" pos:column="19">.</op:operator><name pos:line="25" pos:column="20">Info</name></name><argument_list pos:line="25" pos:column="24">(<argument><expr><lit:literal type="string" pos:line="25" pos:column="25">"AdoInspector: Starting to replace DbProviderFactory"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="27" pos:column="13">// This forces the creation </comment>
            <try pos:line="28" pos:column="13">try
            <block pos:line="29" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="30" pos:column="17">DbProviderFactories</name><op:operator pos:line="30" pos:column="36">.</op:operator><name pos:line="30" pos:column="37">GetFactory</name></name><argument_list pos:line="30" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="30" pos:column="48">"Anything"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
            }</block>
            <catch pos:line="32" pos:column="13">catch <parameter_list pos:line="32" pos:column="19">(<param><decl><type><name pos:line="32" pos:column="20">ArgumentException</name></type></decl></param>)</parameter_list>
            <block pos:line="33" pos:column="13">{ 
            }</block></catch></try>

            <comment type="line" pos:line="36" pos:column="13">// Find the registered providers</comment>
            <decl_stmt><decl><type><name pos:line="37" pos:column="13">var</name></type> <name pos:line="37" pos:column="17">table</name> <init pos:line="37" pos:column="23">= <expr><call><name><name pos:line="37" pos:column="25">Support</name><op:operator pos:line="37" pos:column="32">.</op:operator><name pos:line="37" pos:column="33">FindDbProviderFactoryTable</name></name><argument_list pos:line="37" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="39" pos:column="13">// Run through and replace providers</comment>
            <foreach pos:line="40" pos:column="13">foreach (<init><decl><type><name pos:line="40" pos:column="22">var</name></type> <name pos:line="40" pos:column="26">row</name> <range pos:line="40" pos:column="30">in <expr><call><name><name pos:line="40" pos:column="33">table</name><op:operator pos:line="40" pos:column="38">.</op:operator><name pos:line="40" pos:column="39">Rows</name><op:operator pos:line="40" pos:column="43">.</op:operator><name><name pos:line="40" pos:column="44">Cast</name><argument_list pos:line="40" pos:column="48">&lt;<argument><name pos:line="40" pos:column="49">DataRow</name></argument>&gt;</argument_list></name></name><argument_list pos:line="40" pos:column="57">()</argument_list></call><op:operator pos:line="40" pos:column="59">.</op:operator><call><name pos:line="40" pos:column="60">ToList</name><argument_list pos:line="40" pos:column="66">()</argument_list></call></expr></range></decl></init>)
            <block pos:line="41" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="42" pos:column="17">DbProviderFactory</name></type> <name pos:line="42" pos:column="35">factory</name></decl>;</decl_stmt>
                <try pos:line="43" pos:column="17">try
                <block pos:line="44" pos:column="17">{
                    <expr_stmt><expr><name pos:line="45" pos:column="21">factory</name> <op:operator pos:line="45" pos:column="29">=</op:operator> <call><name><name pos:line="45" pos:column="31">DbProviderFactories</name><op:operator pos:line="45" pos:column="50">.</op:operator><name pos:line="45" pos:column="51">GetFactory</name></name><argument_list pos:line="45" pos:column="61">(<argument><expr><name pos:line="45" pos:column="62">row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name><name pos:line="47" pos:column="21">Logger</name><op:operator pos:line="47" pos:column="27">.</op:operator><name pos:line="47" pos:column="28">Info</name></name><argument_list pos:line="47" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="47" pos:column="33">"AdoInspector: Successfully retrieved factory - {0}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="47" pos:column="87">row</name><index pos:line="47" pos:column="90">[<expr><lit:literal type="string" pos:line="47" pos:column="91">"Name"</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block>
                <catch pos:line="49" pos:column="17">catch <parameter_list pos:line="49" pos:column="23">(<param><decl><type><name pos:line="49" pos:column="24">Exception</name></type></decl></param>)</parameter_list>
                <block pos:line="50" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="51" pos:column="21">Logger</name><op:operator pos:line="51" pos:column="27">.</op:operator><name pos:line="51" pos:column="28">Error</name></name><argument_list pos:line="51" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="51" pos:column="34">"AdoInspector: Failed to retrieve factory - {0}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="51" pos:column="84">row</name><index pos:line="51" pos:column="87">[<expr><lit:literal type="string" pos:line="51" pos:column="88">"Name"</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue pos:line="52" pos:column="21">continue;</continue>
                }</block></catch></try>

                <comment type="line" pos:line="55" pos:column="17">// Check that we haven't already wrapped things up </comment>
                <if pos:line="56" pos:column="17">if <condition pos:line="56" pos:column="20">(<expr><name pos:line="56" pos:column="21">factory</name> <op:operator pos:line="56" pos:column="29">is</op:operator> <name pos:line="56" pos:column="32">GlimpseDbProviderFactory</name></expr>)</condition><then pos:line="56" pos:column="57">
                <block pos:line="57" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="58" pos:column="21">Logger</name><op:operator pos:line="58" pos:column="27">.</op:operator><name pos:line="58" pos:column="28">Error</name></name><argument_list pos:line="58" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="58" pos:column="34">"AdoInspector: Factory is already wrapped - {0}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="58" pos:column="84">row</name><index pos:line="58" pos:column="87">[<expr><lit:literal type="string" pos:line="58" pos:column="88">"Name"</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue pos:line="59" pos:column="21">continue;</continue>
                }</block></then></if>

                <decl_stmt><decl><type><name pos:line="62" pos:column="17">var</name></type> <name pos:line="62" pos:column="21">proxyType</name> <init pos:line="62" pos:column="31">= <expr><call><name pos:line="62" pos:column="33">typeof</name><argument_list pos:line="62" pos:column="39">(<argument><expr><name><name pos:line="62" pos:column="40">GlimpseDbProviderFactory</name><argument_list pos:line="62" pos:column="64">&lt;&gt;</argument_list></name></expr></argument>)</argument_list></call><op:operator pos:line="62" pos:column="67">.</op:operator><call><name pos:line="62" pos:column="68">MakeGenericType</name><argument_list pos:line="62" pos:column="83">(<argument><expr><call><name><name pos:line="62" pos:column="84">factory</name><op:operator pos:line="62" pos:column="91">.</op:operator><name pos:line="62" pos:column="92">GetType</name></name><argument_list pos:line="62" pos:column="99">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name pos:line="64" pos:column="17">Factories</name><op:operator pos:line="64" pos:column="26">.</op:operator><name pos:line="64" pos:column="27">Add</name></name><argument_list pos:line="64" pos:column="30">(<argument><expr><name><name pos:line="64" pos:column="31">row</name><index pos:line="64" pos:column="34">[<expr><lit:literal type="string" pos:line="64" pos:column="35">"InvariantName"</lit:literal></expr>]</index></name><op:operator pos:line="64" pos:column="51">.</op:operator><call><name pos:line="64" pos:column="52">ToString</name><argument_list pos:line="64" pos:column="60">()</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="64" pos:column="64">row</name><index pos:line="64" pos:column="67">[<expr><lit:literal type="string" pos:line="64" pos:column="68">"AssemblyQualifiedName"</lit:literal></expr>]</index></name><op:operator pos:line="64" pos:column="92">.</op:operator><call><name pos:line="64" pos:column="93">ToString</name><argument_list pos:line="64" pos:column="101">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name pos:line="66" pos:column="17">var</name></type> <name pos:line="66" pos:column="21">newRow</name> <init pos:line="66" pos:column="28">= <expr><call><name><name pos:line="66" pos:column="30">table</name><op:operator pos:line="66" pos:column="35">.</op:operator><name pos:line="66" pos:column="36">NewRow</name></name><argument_list pos:line="66" pos:column="42">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name pos:line="67" pos:column="17">newRow</name><index pos:line="67" pos:column="23">[<expr><lit:literal type="string" pos:line="67" pos:column="24">"Name"</lit:literal></expr>]</index></name> <op:operator pos:line="67" pos:column="32">=</op:operator> <name><name pos:line="67" pos:column="34">row</name><index pos:line="67" pos:column="37">[<expr><lit:literal type="string" pos:line="67" pos:column="38">"Name"</lit:literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="68" pos:column="17">newRow</name><index pos:line="68" pos:column="23">[<expr><lit:literal type="string" pos:line="68" pos:column="24">"Description"</lit:literal></expr>]</index></name> <op:operator pos:line="68" pos:column="39">=</op:operator> <name><name pos:line="68" pos:column="41">row</name><index pos:line="68" pos:column="44">[<expr><lit:literal type="string" pos:line="68" pos:column="45">"Description"</lit:literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="69" pos:column="17">newRow</name><index pos:line="69" pos:column="23">[<expr><lit:literal type="string" pos:line="69" pos:column="24">"InvariantName"</lit:literal></expr>]</index></name> <op:operator pos:line="69" pos:column="41">=</op:operator> <name><name pos:line="69" pos:column="43">row</name><index pos:line="69" pos:column="46">[<expr><lit:literal type="string" pos:line="69" pos:column="47">"InvariantName"</lit:literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="70" pos:column="17">newRow</name><index pos:line="70" pos:column="23">[<expr><lit:literal type="string" pos:line="70" pos:column="24">"AssemblyQualifiedName"</lit:literal></expr>]</index></name> <op:operator pos:line="70" pos:column="49">=</op:operator> <name><name pos:line="70" pos:column="51">proxyType</name><op:operator pos:line="70" pos:column="60">.</op:operator><name pos:line="70" pos:column="61">AssemblyQualifiedName</name></name></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name pos:line="72" pos:column="17">table</name><op:operator pos:line="72" pos:column="22">.</op:operator><name pos:line="72" pos:column="23">Rows</name><op:operator pos:line="72" pos:column="27">.</op:operator><name pos:line="72" pos:column="28">Remove</name></name><argument_list pos:line="72" pos:column="34">(<argument><expr><name pos:line="72" pos:column="35">row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="73" pos:column="17">table</name><op:operator pos:line="73" pos:column="22">.</op:operator><name pos:line="73" pos:column="23">Rows</name><op:operator pos:line="73" pos:column="27">.</op:operator><name pos:line="73" pos:column="28">Add</name></name><argument_list pos:line="73" pos:column="31">(<argument><expr><name pos:line="73" pos:column="32">newRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name pos:line="75" pos:column="17">Logger</name><op:operator pos:line="75" pos:column="23">.</op:operator><name pos:line="75" pos:column="24">Info</name></name><argument_list pos:line="75" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="75" pos:column="29">"AdoInspector: Successfully replaced - {0}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="75" pos:column="74">newRow</name><index pos:line="75" pos:column="80">[<expr><lit:literal type="string" pos:line="75" pos:column="81">"Name"</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>

            <expr_stmt><expr><call><name><name pos:line="78" pos:column="13">Logger</name><op:operator pos:line="78" pos:column="19">.</op:operator><name pos:line="78" pos:column="20">Info</name></name><argument_list pos:line="78" pos:column="24">(<argument><expr><lit:literal type="string" pos:line="78" pos:column="25">"AdoInspector: Finished replacing DbProviderFactory"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
