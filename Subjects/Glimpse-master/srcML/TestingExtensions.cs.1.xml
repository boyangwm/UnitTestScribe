<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Core\Extensions\TestingExtensions.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">System</name><op:operator pos:line="1" pos:column="13">.</op:operator><name pos:line="1" pos:column="14">Collections</name><op:operator pos:line="1" pos:column="25">.</op:operator><name pos:line="1" pos:column="26">Generic</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">Glimpse</name><op:operator pos:line="2" pos:column="14">.</op:operator><name pos:line="2" pos:column="15">Core</name><op:operator pos:line="2" pos:column="19">.</op:operator><name pos:line="2" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Glimpse</name><op:operator pos:line="3" pos:column="14">.</op:operator><name pos:line="3" pos:column="15">Core</name><op:operator pos:line="3" pos:column="19">.</op:operator><name pos:line="3" pos:column="20">Framework</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Test</name><op:operator pos:line="4" pos:column="19">.</op:operator><name pos:line="4" pos:column="20">Core</name><op:operator pos:line="4" pos:column="24">.</op:operator><name pos:line="4" pos:column="25">TestDoubles</name></name>;</using>
<using pos:line="5" pos:column="1">using <name pos:line="5" pos:column="7">Moq</name>;</using>

<namespace pos:line="7" pos:column="1">namespace <name><name pos:line="7" pos:column="11">Glimpse</name><op:operator pos:line="7" pos:column="18">.</op:operator><name pos:line="7" pos:column="19">Test</name><op:operator pos:line="7" pos:column="23">.</op:operator><name pos:line="7" pos:column="24">Core</name><op:operator pos:line="7" pos:column="28">.</op:operator><name pos:line="7" pos:column="29">Extensions</name></name>
<block pos:line="8" pos:column="1">{
    <class><specifier pos:line="9" pos:column="5">public</specifier> <specifier pos:line="9" pos:column="12">static</specifier> class <name pos:line="9" pos:column="25">TestingExtensions</name>
    <block pos:line="10" pos:column="5">{
        <function><type><specifier pos:line="11" pos:column="9">public</specifier> <specifier pos:line="11" pos:column="16">static</specifier> <name><name pos:line="11" pos:column="23">Mock</name><argument_list pos:line="11" pos:column="27">&lt;<argument><name pos:line="11" pos:column="28">IFrameworkProvider</name></argument>&gt;</argument_list></name></type> <name pos:line="11" pos:column="48">Setup</name><parameter_list pos:line="11" pos:column="53">(<param><decl><type><name pos:line="11" pos:column="54">this</name> <name><name pos:line="11" pos:column="59">Mock</name><argument_list pos:line="11" pos:column="63">&lt;<argument><name pos:line="11" pos:column="64">IFrameworkProvider</name></argument>&gt;</argument_list></name></type> <name pos:line="11" pos:column="84">frameworkProvider</name></decl></param>)</parameter_list>
        <block pos:line="12" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="13" pos:column="13">frameworkProvider</name><op:operator pos:line="13" pos:column="30">.</op:operator><name pos:line="13" pos:column="31">Setup</name></name><argument_list pos:line="13" pos:column="36">(<argument><expr><lambda><name pos:line="13" pos:column="37">fp</name> <op:operator pos:line="13" pos:column="40">=&gt;</op:operator> <name><name pos:line="13" pos:column="43">fp</name><op:operator pos:line="13" pos:column="45">.</op:operator><name pos:line="13" pos:column="46">RuntimeContext</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="13" pos:column="61">.</op:operator><call><name pos:line="13" pos:column="62">Returns</name><argument_list pos:line="13" pos:column="69">(<argument><expr><op:operator pos:line="13" pos:column="70">new</op:operator> <call><name pos:line="13" pos:column="74">DummyObjectContext</name><argument_list pos:line="13" pos:column="92">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="14" pos:column="13">frameworkProvider</name><op:operator pos:line="14" pos:column="30">.</op:operator><name pos:line="14" pos:column="31">Setup</name></name><argument_list pos:line="14" pos:column="36">(<argument><expr><lambda><name pos:line="14" pos:column="37">fp</name> <op:operator pos:line="14" pos:column="40">=&gt;</op:operator> <name><name pos:line="14" pos:column="43">fp</name><op:operator pos:line="14" pos:column="45">.</op:operator><name pos:line="14" pos:column="46">HttpRequestStore</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="14" pos:column="63">.</op:operator><call><name pos:line="14" pos:column="64">Returns</name><argument_list pos:line="14" pos:column="71">(
                <argument><expr><op:operator pos:line="15" pos:column="17">new</op:operator> <call><name pos:line="15" pos:column="21">DictionaryDataStoreAdapter</name><argument_list pos:line="15" pos:column="47">(<argument><expr><op:operator pos:line="15" pos:column="48">new</op:operator> <call><name><name pos:line="15" pos:column="52">Dictionary</name><argument_list pos:line="15" pos:column="62">&lt;<argument><name pos:line="15" pos:column="63">string</name></argument>, <argument><name pos:line="15" pos:column="71">object</name></argument>&gt;</argument_list></name><argument_list pos:line="15" pos:column="78">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="16" pos:column="13">frameworkProvider</name><op:operator pos:line="16" pos:column="30">.</op:operator><name pos:line="16" pos:column="31">Setup</name></name><argument_list pos:line="16" pos:column="36">(<argument><expr><lambda><name pos:line="16" pos:column="37">fp</name> <op:operator pos:line="16" pos:column="40">=&gt;</op:operator> <name><name pos:line="16" pos:column="43">fp</name><op:operator pos:line="16" pos:column="45">.</op:operator><name pos:line="16" pos:column="46">HttpServerStore</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="16" pos:column="62">.</op:operator><call><name pos:line="16" pos:column="63">Returns</name><argument_list pos:line="16" pos:column="70">(<argument><expr><op:operator pos:line="16" pos:column="71">new</op:operator> <call><name pos:line="16" pos:column="75">DictionaryDataStoreAdapter</name><argument_list pos:line="16" pos:column="101">(<argument><expr><op:operator pos:line="16" pos:column="102">new</op:operator> <call><name><name pos:line="16" pos:column="106">Dictionary</name><argument_list pos:line="16" pos:column="116">&lt;<argument><name pos:line="16" pos:column="117">string</name></argument>, <argument><name pos:line="16" pos:column="125">object</name></argument>&gt;</argument_list></name><argument_list pos:line="16" pos:column="132">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:line="18" pos:column="13">return <expr><name pos:line="18" pos:column="20">frameworkProvider</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="21" pos:column="9">public</specifier> <specifier pos:line="21" pos:column="16">static</specifier> <name><name pos:line="21" pos:column="23">Mock</name><argument_list pos:line="21" pos:column="27">&lt;<argument><name pos:line="21" pos:column="28">ITab</name></argument>&gt;</argument_list></name></type> <name pos:line="21" pos:column="34">Setup</name><parameter_list pos:line="21" pos:column="39">(<param><decl><type><name pos:line="21" pos:column="40">this</name> <name><name pos:line="21" pos:column="45">Mock</name><argument_list pos:line="21" pos:column="49">&lt;<argument><name pos:line="21" pos:column="50">ITab</name></argument>&gt;</argument_list></name></type> <name pos:line="21" pos:column="56">tab</name></decl></param>)</parameter_list>
        <block pos:line="22" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="23" pos:column="13">tab</name><op:operator pos:line="23" pos:column="16">.</op:operator><name pos:line="23" pos:column="17">Setup</name></name><argument_list pos:line="23" pos:column="22">(<argument><expr><lambda><name pos:line="23" pos:column="23">p</name> <op:operator pos:line="23" pos:column="25">=&gt;</op:operator> <call><name><name pos:line="23" pos:column="28">p</name><op:operator pos:line="23" pos:column="29">.</op:operator><name pos:line="23" pos:column="30">GetData</name></name><argument_list pos:line="23" pos:column="37">(<argument><expr><call><name><name pos:line="23" pos:column="38">It</name><op:operator pos:line="23" pos:column="40">.</op:operator><name><name pos:line="23" pos:column="41">IsAny</name><argument_list pos:line="23" pos:column="46">&lt;<argument><name pos:line="23" pos:column="47">ITabContext</name></argument>&gt;</argument_list></name></name><argument_list pos:line="23" pos:column="59">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="23" pos:column="63">.</op:operator><call><name pos:line="23" pos:column="64">Returns</name><argument_list pos:line="23" pos:column="71">(<argument><expr><lit:literal type="string" pos:line="23" pos:column="72">"a result"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="24" pos:column="13">tab</name><op:operator pos:line="24" pos:column="16">.</op:operator><name pos:line="24" pos:column="17">Setup</name></name><argument_list pos:line="24" pos:column="22">(<argument><expr><lambda><name pos:line="24" pos:column="23">m</name> <op:operator pos:line="24" pos:column="25">=&gt;</op:operator> <name><name pos:line="24" pos:column="28">m</name><op:operator pos:line="24" pos:column="29">.</op:operator><name pos:line="24" pos:column="30">RequestContextType</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="24" pos:column="49">.</op:operator><call><name pos:line="24" pos:column="50">Returns</name><argument_list pos:line="24" pos:column="57">(<argument><expr><call><name pos:line="24" pos:column="58">typeof</name><argument_list pos:line="24" pos:column="64">(<argument><expr><name pos:line="24" pos:column="65">DummyObjectContext</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="25" pos:column="13">tab</name><op:operator pos:line="25" pos:column="16">.</op:operator><name pos:line="25" pos:column="17">Setup</name></name><argument_list pos:line="25" pos:column="22">(<argument><expr><lambda><name pos:line="25" pos:column="23">m</name> <op:operator pos:line="25" pos:column="25">=&gt;</op:operator> <name><name pos:line="25" pos:column="28">m</name><op:operator pos:line="25" pos:column="29">.</op:operator><name pos:line="25" pos:column="30">ExecuteOn</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="25" pos:column="40">.</op:operator><call><name pos:line="25" pos:column="41">Returns</name><argument_list pos:line="25" pos:column="48">(<argument><expr><name><name pos:line="25" pos:column="49">RuntimeEvent</name><op:operator pos:line="25" pos:column="61">.</op:operator><name pos:line="25" pos:column="62">EndRequest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:line="27" pos:column="13">return <expr><name pos:line="27" pos:column="20">tab</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
