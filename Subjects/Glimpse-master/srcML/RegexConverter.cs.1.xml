<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Core\Configuration\RegexConverter.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">ComponentModel</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Configuration</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Globalization</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Text</name><op:operator pos:line="5" pos:column="18">.</op:operator><name pos:line="5" pos:column="19">RegularExpressions</name></name>;</using>

<namespace pos:line="7" pos:column="1">namespace <name><name pos:line="7" pos:column="11">Glimpse</name><op:operator pos:line="7" pos:column="18">.</op:operator><name pos:line="7" pos:column="19">Core</name><op:operator pos:line="7" pos:column="23">.</op:operator><name pos:line="7" pos:column="24">Configuration</name></name>
<block pos:line="8" pos:column="1">{
    <comment type="line" pos:line="9" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="10" pos:column="5">/// &lt;c&gt;RegexConverter&lt;/c&gt; is a &lt;see cref="ConfigurationConverterBase"/&gt; used to convert between &lt;see cref="String"/&gt; and &lt;see cref="Regex"/&gt; instances.</comment>
    <comment type="line" pos:line="11" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="12" pos:column="5">internal</specifier> class <name pos:line="12" pos:column="20">RegexConverter</name> <super pos:line="12" pos:column="35">: <name pos:line="12" pos:column="37">ConfigurationConverterBase</name></super>
    <block pos:line="13" pos:column="5">{
        <comment type="line" pos:line="14" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="15" pos:column="9">/// Converts the given &lt;see cref="String"/&gt; to a &lt;see cref="Regex"/&gt;, using the specified context and culture information.</comment>
        <comment type="line" pos:line="16" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="17" pos:column="9">/// &lt;param name="context"&gt;An &lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt; that provides a format context.&lt;/param&gt;</comment>
        <comment type="line" pos:line="18" pos:column="9">/// &lt;param name="culture"&gt;The &lt;see cref="T:System.Globalization.CultureInfo" /&gt; to use as the current culture.&lt;/param&gt;</comment>
        <comment type="line" pos:line="19" pos:column="9">/// &lt;param name="value"&gt;The &lt;see cref="T:System.Object" /&gt; to convert.&lt;/param&gt;</comment>
        <comment type="line" pos:line="20" pos:column="9">/// &lt;returns&gt;</comment>
        <comment type="line" pos:line="21" pos:column="9">/// An &lt;see cref="Regex" /&gt; that represents the converted value.</comment>
        <comment type="line" pos:line="22" pos:column="9">/// &lt;/returns&gt;</comment>
        <function><type><specifier pos:line="23" pos:column="9">public</specifier> <specifier pos:line="23" pos:column="16">override</specifier> <name pos:line="23" pos:column="25">object</name></type> <name pos:line="23" pos:column="32">ConvertFrom</name><parameter_list pos:line="23" pos:column="43">(<param><decl><type><name pos:line="23" pos:column="44">ITypeDescriptorContext</name></type> <name pos:line="23" pos:column="67">context</name></decl></param>, <param><decl><type><name pos:line="23" pos:column="76">CultureInfo</name></type> <name pos:line="23" pos:column="88">culture</name></decl></param>, <param><decl><type><name pos:line="23" pos:column="97">object</name></type> <name pos:line="23" pos:column="104">value</name></decl></param>)</parameter_list>
        <block pos:line="24" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="25" pos:column="13">var</name></type> <name pos:line="25" pos:column="17">regex</name> <init pos:line="25" pos:column="23">= <expr><name pos:line="25" pos:column="25">value</name> <op:operator pos:line="25" pos:column="31">as</op:operator> <name pos:line="25" pos:column="34">string</name></expr></init></decl>;</decl_stmt>

            <return pos:line="27" pos:column="13">return <expr><op:operator pos:line="27" pos:column="20">new</op:operator> <call><name pos:line="27" pos:column="24">Regex</name><argument_list pos:line="27" pos:column="29">(<argument><expr><name pos:line="27" pos:column="30">regex</name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="37">RegexOptions</name><op:operator pos:line="27" pos:column="49">.</op:operator><name pos:line="27" pos:column="50">Compiled</name></name> <op:operator pos:line="27" pos:column="59">|</op:operator> <name><name pos:line="27" pos:column="61">RegexOptions</name><op:operator pos:line="27" pos:column="73">.</op:operator><name pos:line="27" pos:column="74">IgnoreCase</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="30" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="31" pos:column="9">/// Converts the given &lt;see cref="Regex"/&gt; to a &lt;see cref="String"/&gt;, using the specified context and culture information.</comment>
        <comment type="line" pos:line="32" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="33" pos:column="9">/// &lt;param name="context"&gt;An &lt;see cref="T:System.ComponentModel.ITypeDescriptorContext" /&gt; that provides a format context.&lt;/param&gt;</comment>
        <comment type="line" pos:line="34" pos:column="9">/// &lt;param name="culture"&gt;A &lt;see cref="T:System.Globalization.CultureInfo" /&gt;. If null is passed, the current culture is assumed.&lt;/param&gt;</comment>
        <comment type="line" pos:line="35" pos:column="9">/// &lt;param name="value"&gt;The &lt;see cref="T:System.Object" /&gt; to convert.&lt;/param&gt;</comment>
        <comment type="line" pos:line="36" pos:column="9">/// &lt;param name="destinationType"&gt;The &lt;see cref="T:System.Type" /&gt; to convert the &lt;paramref name="value" /&gt; parameter to.&lt;/param&gt;</comment>
        <comment type="line" pos:line="37" pos:column="9">/// &lt;returns&gt;</comment>
        <comment type="line" pos:line="38" pos:column="9">/// An &lt;see cref="String" /&gt; that represents the converted value.</comment>
        <comment type="line" pos:line="39" pos:column="9">/// &lt;/returns&gt;</comment>
        <function><type><specifier pos:line="40" pos:column="9">public</specifier> <specifier pos:line="40" pos:column="16">override</specifier> <name pos:line="40" pos:column="25">object</name></type> <name pos:line="40" pos:column="32">ConvertTo</name><parameter_list pos:line="40" pos:column="41">(<param><decl><type><name pos:line="40" pos:column="42">ITypeDescriptorContext</name></type> <name pos:line="40" pos:column="65">context</name></decl></param>, <param><decl><type><name pos:line="40" pos:column="74">CultureInfo</name></type> <name pos:line="40" pos:column="86">culture</name></decl></param>, <param><decl><type><name pos:line="40" pos:column="95">object</name></type> <name pos:line="40" pos:column="102">value</name></decl></param>, <param><decl><type><name pos:line="40" pos:column="109">Type</name></type> <name pos:line="40" pos:column="114">destinationType</name></decl></param>)</parameter_list>
        <block pos:line="41" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="42" pos:column="13">var</name></type> <name pos:line="42" pos:column="17">regex</name> <init pos:line="42" pos:column="23">= <expr><name pos:line="42" pos:column="25">value</name> <op:operator pos:line="42" pos:column="31">as</op:operator> <name pos:line="42" pos:column="34">Regex</name></expr></init></decl>;</decl_stmt>

            <if pos:line="44" pos:column="13">if <condition pos:line="44" pos:column="16">(<expr><name pos:line="44" pos:column="17">regex</name> <op:operator pos:line="44" pos:column="23">!=</op:operator> <name pos:line="44" pos:column="26">null</name></expr>)</condition><then pos:line="44" pos:column="31">
            <block pos:line="45" pos:column="13">{
                <return pos:line="46" pos:column="17">return <expr><call><name><name pos:line="46" pos:column="24">regex</name><op:operator pos:line="46" pos:column="29">.</op:operator><name pos:line="46" pos:column="30">ToString</name></name><argument_list pos:line="46" pos:column="38">()</argument_list></call></expr>;</return>
            }</block></then></if>

            <return pos:line="49" pos:column="13">return <expr><name><name pos:line="49" pos:column="20">string</name><op:operator pos:line="49" pos:column="26">.</op:operator><name pos:line="49" pos:column="27">Empty</name></name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
