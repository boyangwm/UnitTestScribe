<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\Glimpse.Test.Ado\CommandSanitizerShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Globalization</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Ado</name><op:operator pos:line="4" pos:column="18">.</op:operator><name pos:line="4" pos:column="19">Model</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Glimpse</name><op:operator pos:line="5" pos:column="14">.</op:operator><name pos:line="5" pos:column="15">Ado</name><op:operator pos:line="5" pos:column="18">.</op:operator><name pos:line="5" pos:column="19">Tab</name><op:operator pos:line="5" pos:column="22">.</op:operator><name pos:line="5" pos:column="23">Support</name></name>;</using>
<using pos:line="6" pos:column="1">using <name pos:line="6" pos:column="7">Xunit</name>;</using>

<namespace pos:line="8" pos:column="1">namespace <name><name pos:line="8" pos:column="11">Glimpse</name><op:operator pos:line="8" pos:column="18">.</op:operator><name pos:line="8" pos:column="19">Test</name><op:operator pos:line="8" pos:column="23">.</op:operator><name pos:line="8" pos:column="24">Ado</name></name>
<block pos:line="9" pos:column="1">{
    <class><specifier pos:line="10" pos:column="5">public</specifier> class <name pos:line="10" pos:column="18">CommandSanitizerShould</name>
    <block pos:line="11" pos:column="5">{
        <function><type><attribute pos:line="12" pos:column="9">[<expr><name pos:line="12" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="13" pos:column="9">public</specifier> <name pos:line="13" pos:column="16">void</name></type> <name pos:line="13" pos:column="21">ReplaceParameterPlaceholders</name><parameter_list pos:line="13" pos:column="49">()</parameter_list>
        <block pos:line="14" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="15" pos:column="13">var</name></type> <name pos:line="15" pos:column="17">sut</name> <init pos:line="15" pos:column="21">= <expr><op:operator pos:line="15" pos:column="23">new</op:operator> <call><name pos:line="15" pos:column="27">CommandSanitizer</name><argument_list pos:line="15" pos:column="43">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="17" pos:column="13">var</name></type> <name pos:line="17" pos:column="17">parameter</name> <init pos:line="17" pos:column="27">= <expr><op:operator pos:line="17" pos:column="29">new</op:operator> <name pos:line="17" pos:column="33">CommandParameterMetadata</name>
            <block pos:line="18" pos:column="13">{
                <expr><name pos:line="19" pos:column="17">Name</name> <op:operator pos:line="19" pos:column="22">=</op:operator> <lit:literal type="string" pos:line="19" pos:column="24">"@SomeParameter"</lit:literal></expr>,
                <expr><name pos:line="20" pos:column="17">Type</name> <op:operator pos:line="20" pos:column="22">=</op:operator> <call><name pos:line="20" pos:column="24">typeof</name><argument_list pos:line="20" pos:column="30">(<argument><expr><name pos:line="20" pos:column="31">int</name></expr></argument>)</argument_list></call><op:operator pos:line="20" pos:column="35">.</op:operator><name pos:line="20" pos:column="36">Name</name></expr>,
                <expr><name pos:line="21" pos:column="17">Value</name> <op:operator pos:line="21" pos:column="23">=</op:operator> <lit:literal type="number" pos:line="21" pos:column="25">1234</lit:literal></expr>
            }</block></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="24" pos:column="13">var</name></type> <name pos:line="24" pos:column="17">command</name> <init pos:line="24" pos:column="25">= <expr><call><name><name pos:line="24" pos:column="27">string</name><op:operator pos:line="24" pos:column="33">.</op:operator><name pos:line="24" pos:column="34">Format</name></name><argument_list pos:line="24" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="24" pos:column="41">"SELECT * FROM Table WHERE Id = {0}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="79">parameter</name><op:operator pos:line="24" pos:column="88">.</op:operator><name pos:line="24" pos:column="89">Name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="26" pos:column="13">var</name></type> <name pos:line="26" pos:column="17">result</name> <init pos:line="26" pos:column="24">= <expr><call><name><name pos:line="26" pos:column="26">sut</name><op:operator pos:line="26" pos:column="29">.</op:operator><name pos:line="26" pos:column="30">Process</name></name><argument_list pos:line="26" pos:column="37">(<argument><expr><name pos:line="26" pos:column="38">command</name></expr></argument>, <argument><expr><op:operator pos:line="26" pos:column="47">new</op:operator><index pos:line="26" pos:column="50">[]</index> <block pos:line="26" pos:column="53">{ <expr><name pos:line="26" pos:column="55">parameter</name></expr> }</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="28" pos:column="13">var</name></type> <name pos:line="28" pos:column="17">expected</name> <init pos:line="28" pos:column="26">= <expr><call><name><name pos:line="28" pos:column="28">string</name><op:operator pos:line="28" pos:column="34">.</op:operator><name pos:line="28" pos:column="35">Format</name></name><argument_list pos:line="28" pos:column="41">(<argument><expr><name><name pos:line="28" pos:column="42">CommandParameterParser</name><op:operator pos:line="28" pos:column="64">.</op:operator><name pos:line="28" pos:column="65">UnquotedFormat</name></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="81">parameter</name><op:operator pos:line="28" pos:column="90">.</op:operator><name pos:line="28" pos:column="91">Value</name></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="98">parameter</name><op:operator pos:line="28" pos:column="107">.</op:operator><name pos:line="28" pos:column="108">Name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="30" pos:column="13">Assert</name><op:operator pos:line="30" pos:column="19">.</op:operator><name pos:line="30" pos:column="20">Contains</name></name><argument_list pos:line="30" pos:column="28">(<argument><expr><name pos:line="30" pos:column="29">expected</name></expr></argument>, <argument><expr><name pos:line="30" pos:column="39">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="33" pos:column="9">[<expr><name pos:line="33" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="34" pos:column="9">public</specifier> <name pos:line="34" pos:column="16">void</name></type> <name pos:line="34" pos:column="21">WrapStringsInQuotes</name><parameter_list pos:line="34" pos:column="40">()</parameter_list>
        <block pos:line="35" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="36" pos:column="13">var</name></type> <name pos:line="36" pos:column="17">sut</name> <init pos:line="36" pos:column="21">= <expr><op:operator pos:line="36" pos:column="23">new</op:operator> <call><name pos:line="36" pos:column="27">CommandSanitizer</name><argument_list pos:line="36" pos:column="43">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="38" pos:column="13">var</name></type> <name pos:line="38" pos:column="17">parameter</name> <init pos:line="38" pos:column="27">= <expr><op:operator pos:line="38" pos:column="29">new</op:operator> <name pos:line="38" pos:column="33">CommandParameterMetadata</name>
            <block pos:line="39" pos:column="13">{
                <expr><name pos:line="40" pos:column="17">Name</name> <op:operator pos:line="40" pos:column="22">=</op:operator> <lit:literal type="string" pos:line="40" pos:column="24">"@StringParameter"</lit:literal></expr>,
                <expr><name pos:line="41" pos:column="17">Type</name> <op:operator pos:line="41" pos:column="22">=</op:operator> <call><name pos:line="41" pos:column="24">typeof</name><argument_list pos:line="41" pos:column="30">(<argument><expr><name pos:line="41" pos:column="31">string</name></expr></argument>)</argument_list></call><op:operator pos:line="41" pos:column="38">.</op:operator><name pos:line="41" pos:column="39">Name</name></expr>,
                <expr><name pos:line="42" pos:column="17">Value</name> <op:operator pos:line="42" pos:column="23">=</op:operator> <lit:literal type="string" pos:line="42" pos:column="25">"This is the parameter value."</lit:literal></expr>
            }</block></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="45" pos:column="13">var</name></type> <name pos:line="45" pos:column="17">command</name> <init pos:line="45" pos:column="25">= <expr><call><name><name pos:line="45" pos:column="27">string</name><op:operator pos:line="45" pos:column="33">.</op:operator><name pos:line="45" pos:column="34">Format</name></name><argument_list pos:line="45" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="45" pos:column="41">"SELECT * FROM Table WHERE StringColumn = {0}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="45" pos:column="89">parameter</name><op:operator pos:line="45" pos:column="98">.</op:operator><name pos:line="45" pos:column="99">Name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="47" pos:column="13">var</name></type> <name pos:line="47" pos:column="17">result</name> <init pos:line="47" pos:column="24">= <expr><call><name><name pos:line="47" pos:column="26">sut</name><op:operator pos:line="47" pos:column="29">.</op:operator><name pos:line="47" pos:column="30">Process</name></name><argument_list pos:line="47" pos:column="37">(<argument><expr><name pos:line="47" pos:column="38">command</name></expr></argument>, <argument><expr><op:operator pos:line="47" pos:column="47">new</op:operator><index pos:line="47" pos:column="50">[]</index> <block pos:line="47" pos:column="53">{ <expr><name pos:line="47" pos:column="55">parameter</name></expr> }</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="49" pos:column="13">var</name></type> <name pos:line="49" pos:column="17">expected</name> <init pos:line="49" pos:column="26">= <expr><call><name><name pos:line="49" pos:column="28">string</name><op:operator pos:line="49" pos:column="34">.</op:operator><name pos:line="49" pos:column="35">Format</name></name><argument_list pos:line="49" pos:column="41">(<argument><expr><name><name pos:line="49" pos:column="42">CommandParameterParser</name><op:operator pos:line="49" pos:column="64">.</op:operator><name pos:line="49" pos:column="65">QuotedFormat</name></name></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="79">parameter</name><op:operator pos:line="49" pos:column="88">.</op:operator><name pos:line="49" pos:column="89">Value</name></name></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="96">parameter</name><op:operator pos:line="49" pos:column="105">.</op:operator><name pos:line="49" pos:column="106">Name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="51" pos:column="13">Assert</name><op:operator pos:line="51" pos:column="19">.</op:operator><name pos:line="51" pos:column="20">Contains</name></name><argument_list pos:line="51" pos:column="28">(<argument><expr><name pos:line="51" pos:column="29">expected</name></expr></argument>, <argument><expr><name pos:line="51" pos:column="39">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="54" pos:column="9">[<expr><name pos:line="54" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="55" pos:column="9">public</specifier> <name pos:line="55" pos:column="16">void</name></type> <name pos:line="55" pos:column="21">NotReplacePartialMatches</name><parameter_list pos:line="55" pos:column="45">()</parameter_list>
        <block pos:line="56" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="57" pos:column="13">var</name></type> <name pos:line="57" pos:column="17">sut</name> <init pos:line="57" pos:column="21">= <expr><op:operator pos:line="57" pos:column="23">new</op:operator> <call><name pos:line="57" pos:column="27">CommandSanitizer</name><argument_list pos:line="57" pos:column="43">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="59" pos:column="13">var</name></type> <name pos:line="59" pos:column="17">parameters</name> <init pos:line="59" pos:column="28">= <expr><call><name><name pos:line="59" pos:column="30">Enumerable</name><op:operator pos:line="59" pos:column="40">.</op:operator><name pos:line="59" pos:column="41">Range</name></name><argument_list pos:line="59" pos:column="46">(<argument><expr><lit:literal type="number" pos:line="59" pos:column="47">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="59" pos:column="50">30</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="59" pos:column="53">.</op:operator><call><name pos:line="59" pos:column="54">Select</name><argument_list pos:line="59" pos:column="60">(<argument><expr><lambda><name pos:line="59" pos:column="61">x</name> <op:operator pos:line="59" pos:column="63">=&gt;</op:operator> <op:operator pos:line="59" pos:column="66">new</op:operator> <name pos:line="59" pos:column="70">CommandParameterMetadata</name>
            <block pos:line="60" pos:column="13">{
                <expr><name pos:line="61" pos:column="17">Name</name> <op:operator pos:line="61" pos:column="22">=</op:operator> <lit:literal type="string" pos:line="61" pos:column="24">"@Id"</lit:literal> <op:operator pos:line="61" pos:column="30">+</op:operator> <name pos:line="61" pos:column="32">x</name></expr>,
                <expr><name pos:line="62" pos:column="17">Type</name> <op:operator pos:line="62" pos:column="22">=</op:operator> <call><name pos:line="62" pos:column="24">typeof</name><argument_list pos:line="62" pos:column="30">(<argument><expr><name pos:line="62" pos:column="31">int</name></expr></argument>)</argument_list></call><op:operator pos:line="62" pos:column="35">.</op:operator><name pos:line="62" pos:column="36">Name</name></expr>,
                <expr><name pos:line="63" pos:column="17">Value</name> <op:operator pos:line="63" pos:column="23">=</op:operator> <name pos:line="63" pos:column="25">x</name></expr>
            }</block></lambda></expr></argument>)</argument_list></call><op:operator pos:line="64" pos:column="15">.</op:operator><call><name pos:line="64" pos:column="16">ToList</name><argument_list pos:line="64" pos:column="22">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="66" pos:column="13">var</name></type> <name pos:line="66" pos:column="17">parameterList</name> <init pos:line="66" pos:column="31">= <expr><call><name><name pos:line="66" pos:column="33">string</name><op:operator pos:line="66" pos:column="39">.</op:operator><name pos:line="66" pos:column="40">Join</name></name><argument_list pos:line="66" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="66" pos:column="45">", "</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="66" pos:column="51">parameters</name><op:operator pos:line="66" pos:column="61">.</op:operator><name pos:line="66" pos:column="62">Select</name></name><argument_list pos:line="66" pos:column="68">(<argument><expr><lambda><name pos:line="66" pos:column="69">x</name> <op:operator pos:line="66" pos:column="71">=&gt;</op:operator> <name><name pos:line="66" pos:column="74">x</name><op:operator pos:line="66" pos:column="75">.</op:operator><name pos:line="66" pos:column="76">Name</name></name></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="68" pos:column="13">var</name></type> <name pos:line="68" pos:column="17">command</name> <init pos:line="68" pos:column="25">= <expr><call><name><name pos:line="68" pos:column="27">string</name><op:operator pos:line="68" pos:column="33">.</op:operator><name pos:line="68" pos:column="34">Format</name></name><argument_list pos:line="68" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="68" pos:column="41">"SELECT * FROM Table WHERE Id IN ({0})"</lit:literal></expr></argument>, <argument><expr><name pos:line="68" pos:column="82">parameterList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="70" pos:column="13">var</name></type> <name pos:line="70" pos:column="17">result</name> <init pos:line="70" pos:column="24">= <expr><call><name><name pos:line="70" pos:column="26">sut</name><op:operator pos:line="70" pos:column="29">.</op:operator><name pos:line="70" pos:column="30">Process</name></name><argument_list pos:line="70" pos:column="37">(<argument><expr><name pos:line="70" pos:column="38">command</name></expr></argument>, <argument><expr><name pos:line="70" pos:column="47">parameters</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <foreach pos:line="72" pos:column="13">foreach (<init><decl><type><name pos:line="72" pos:column="22">var</name></type> <name pos:line="72" pos:column="26">parameter</name> <range pos:line="72" pos:column="36">in <expr><name pos:line="72" pos:column="39">parameters</name></expr></range></decl></init>)
            <block pos:line="73" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="74" pos:column="17">var</name></type> <name pos:line="74" pos:column="21">expected</name> <init pos:line="74" pos:column="30">= <expr><call><name><name pos:line="74" pos:column="32">string</name><op:operator pos:line="74" pos:column="38">.</op:operator><name pos:line="74" pos:column="39">Format</name></name><argument_list pos:line="74" pos:column="45">(<argument><expr><name><name pos:line="74" pos:column="46">CommandParameterParser</name><op:operator pos:line="74" pos:column="68">.</op:operator><name pos:line="74" pos:column="69">UnquotedFormat</name></name></expr></argument>, <argument><expr><name><name pos:line="74" pos:column="85">parameter</name><op:operator pos:line="74" pos:column="94">.</op:operator><name pos:line="74" pos:column="95">Value</name></name></expr></argument>, <argument><expr><name><name pos:line="74" pos:column="102">parameter</name><op:operator pos:line="74" pos:column="111">.</op:operator><name pos:line="74" pos:column="112">Name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name pos:line="76" pos:column="17">Assert</name><op:operator pos:line="76" pos:column="23">.</op:operator><name pos:line="76" pos:column="24">Contains</name></name><argument_list pos:line="76" pos:column="32">(<argument><expr><name pos:line="76" pos:column="33">expected</name></expr></argument>, <argument><expr><name pos:line="76" pos:column="43">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
