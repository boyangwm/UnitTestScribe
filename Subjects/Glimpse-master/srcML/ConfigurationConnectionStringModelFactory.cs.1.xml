<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.AspNet\Tab\ConfigurationConnectionStringModelFactory.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Configuration</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Data</name><op:operator pos:line="4" pos:column="18">.</op:operator><name pos:line="4" pos:column="19">Common</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Glimpse</name><op:operator pos:line="5" pos:column="14">.</op:operator><name pos:line="5" pos:column="15">AspNet</name><op:operator pos:line="5" pos:column="21">.</op:operator><name pos:line="5" pos:column="22">Model</name></name>;</using>

<namespace pos:line="7" pos:column="1">namespace <name><name pos:line="7" pos:column="11">Glimpse</name><op:operator pos:line="7" pos:column="18">.</op:operator><name pos:line="7" pos:column="19">AspNet</name><op:operator pos:line="7" pos:column="25">.</op:operator><name pos:line="7" pos:column="26">Tab</name></name>
<block pos:line="8" pos:column="1">{
    <comment type="line" pos:line="9" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="10" pos:column="5">/// Creates instances of &lt;see cref="ConfigurationConnectionStringModel"/&gt; based on a &lt;see cref="ConnectionStringSettings"/&gt; instance</comment>
    <comment type="line" pos:line="11" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="12" pos:column="5">public</specifier> <specifier pos:line="12" pos:column="12">static</specifier> class <name pos:line="12" pos:column="25">ConfigurationConnectionStringModelFactory</name>
    <block pos:line="13" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="14" pos:column="9">private</specifier> <specifier pos:line="14" pos:column="17">const</specifier> <name pos:line="14" pos:column="23">string</name></type> <name pos:line="14" pos:column="30">ObfuscatedValue</name> <init pos:line="14" pos:column="46">= <expr><lit:literal type="string" pos:line="14" pos:column="48">"########"</lit:literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="16" pos:column="9">private</specifier> <specifier pos:line="16" pos:column="17">static</specifier> <specifier pos:line="16" pos:column="24">readonly</specifier> <name><name pos:line="16" pos:column="33">IDictionary</name><argument_list pos:line="16" pos:column="44">&lt;<argument><name pos:line="16" pos:column="45">string</name></argument>, <argument><name pos:line="16" pos:column="53">string</name></argument>&gt;</argument_list></name></type> <name pos:line="16" pos:column="61">ObfuscatedConnectionStringValues</name></decl>;</decl_stmt>

        <constructor><specifier pos:line="18" pos:column="9">static</specifier> <name pos:line="18" pos:column="16">ConfigurationConnectionStringModelFactory</name><parameter_list pos:line="18" pos:column="57">()</parameter_list>
        <block pos:line="19" pos:column="9">{
            <expr_stmt><expr><name pos:line="20" pos:column="13">ObfuscatedConnectionStringValues</name> <op:operator pos:line="20" pos:column="46">=</op:operator>
                <op:operator pos:line="21" pos:column="17">new</op:operator> <call><name><name pos:line="21" pos:column="21">Dictionary</name><argument_list pos:line="21" pos:column="31">&lt;<argument><name pos:line="21" pos:column="32">string</name></argument>, <argument><name pos:line="21" pos:column="40">string</name></argument>&gt;</argument_list></name><argument_list pos:line="21" pos:column="47">(<argument><expr><name><name pos:line="21" pos:column="48">StringComparer</name><op:operator pos:line="21" pos:column="62">.</op:operator><name pos:line="21" pos:column="63">InvariantCultureIgnoreCase</name></name></expr></argument>)</argument_list></call>
                <block pos:line="22" pos:column="17">{
                    <expr><block pos:line="23" pos:column="21">{ <expr><lit:literal type="string" pos:line="23" pos:column="23">"password"</lit:literal></expr><op:operator pos:line="23" pos:column="33">,</op:operator> <expr><name pos:line="23" pos:column="35">ObfuscatedValue</name></expr> }</block></expr><op:operator pos:line="23" pos:column="52">,</op:operator>
                    <expr><block pos:line="24" pos:column="21">{ <expr><lit:literal type="string" pos:line="24" pos:column="23">"pwd"</lit:literal></expr><op:operator pos:line="24" pos:column="28">,</op:operator> <expr><name pos:line="24" pos:column="30">ObfuscatedValue</name></expr> }</block></expr><op:operator pos:line="24" pos:column="47">,</op:operator>
                    <expr><block pos:line="25" pos:column="21">{ <expr><lit:literal type="string" pos:line="25" pos:column="23">"accountkey"</lit:literal></expr><op:operator pos:line="25" pos:column="35">,</op:operator> <expr><name pos:line="25" pos:column="37">ObfuscatedValue</name></expr> }</block></expr>
                }</block></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="28" pos:column="13">var</name></type> <name pos:line="28" pos:column="17">additionalKeysToObfuscate</name> <init pos:line="28" pos:column="43">= <expr><name><name pos:line="28" pos:column="45">ConfigurationManager</name><op:operator pos:line="28" pos:column="65">.</op:operator><name pos:line="28" pos:column="66">AppSettings</name><index pos:line="28" pos:column="77">[<expr><lit:literal type="string" pos:line="28" pos:column="78">"Glimpse:ConfigurationTab:ConnectionStrings;KeysToObfuscate"</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if pos:line="29" pos:column="13">if <condition pos:line="29" pos:column="16">(<expr><op:operator pos:line="29" pos:column="17">!</op:operator><call><name><name pos:line="29" pos:column="18">string</name><op:operator pos:line="29" pos:column="24">.</op:operator><name pos:line="29" pos:column="25">IsNullOrEmpty</name></name><argument_list pos:line="29" pos:column="38">(<argument><expr><name pos:line="29" pos:column="39">additionalKeysToObfuscate</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="29" pos:column="66">
            <block pos:line="30" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="31" pos:column="17">var</name></type> <name pos:line="31" pos:column="21">additionalKeys</name> <init pos:line="31" pos:column="36">= <expr><call><name><name pos:line="31" pos:column="38">additionalKeysToObfuscate</name><op:operator pos:line="31" pos:column="63">.</op:operator><name pos:line="31" pos:column="64">Split</name></name><argument_list pos:line="31" pos:column="69">(<argument><expr><op:operator pos:line="31" pos:column="70">new</op:operator><index pos:line="31" pos:column="73">[]</index> <block pos:line="31" pos:column="76">{ <expr><lit:literal type="string" pos:line="31" pos:column="78">";"</lit:literal></expr> }</block></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="85">StringSplitOptions</name><op:operator pos:line="31" pos:column="103">.</op:operator><name pos:line="31" pos:column="104">RemoveEmptyEntries</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <foreach pos:line="32" pos:column="17">foreach (<init><decl><type><name pos:line="32" pos:column="26">var</name></type> <name pos:line="32" pos:column="30">additionalKey</name> <range pos:line="32" pos:column="44">in <expr><name pos:line="32" pos:column="47">additionalKeys</name></expr></range></decl></init>)
                <block pos:line="33" pos:column="17">{
                    <if pos:line="34" pos:column="21">if <condition pos:line="34" pos:column="24">(<expr><op:operator pos:line="34" pos:column="25">!</op:operator><call><name><name pos:line="34" pos:column="26">ObfuscatedConnectionStringValues</name><op:operator pos:line="34" pos:column="58">.</op:operator><name pos:line="34" pos:column="59">ContainsKey</name></name><argument_list pos:line="34" pos:column="70">(<argument><expr><name pos:line="34" pos:column="71">additionalKey</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="34" pos:column="86">
                    <block pos:line="35" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="36" pos:column="25">ObfuscatedConnectionStringValues</name><op:operator pos:line="36" pos:column="57">.</op:operator><name pos:line="36" pos:column="58">Add</name></name><argument_list pos:line="36" pos:column="61">(<argument><expr><name pos:line="36" pos:column="62">additionalKey</name></expr></argument>, <argument><expr><name pos:line="36" pos:column="77">ObfuscatedValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></foreach>
            }</block></then></if>
        }</block></constructor>

        <function><type><specifier pos:line="42" pos:column="9">public</specifier> <specifier pos:line="42" pos:column="16">static</specifier> <name pos:line="42" pos:column="23">ConfigurationConnectionStringModel</name></type> <name pos:line="42" pos:column="58">Create</name><parameter_list pos:line="42" pos:column="64">(<param><decl><type><name pos:line="42" pos:column="65">ConnectionStringSettings</name></type> <name pos:line="42" pos:column="90">connectionString</name></decl></param>)</parameter_list>
        <block pos:line="43" pos:column="9">{
            <if pos:line="44" pos:column="13">if <condition pos:line="44" pos:column="16">(<expr><name pos:line="44" pos:column="17">connectionString</name> <op:operator pos:line="44" pos:column="34">==</op:operator> <name pos:line="44" pos:column="37">null</name></expr>)</condition><then pos:line="44" pos:column="42">
            <block pos:line="45" pos:column="13">{
                <throw pos:line="46" pos:column="17">throw <expr><op:operator pos:line="46" pos:column="23">new</op:operator> <call><name pos:line="46" pos:column="27">ArgumentNullException</name><argument_list pos:line="46" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="46" pos:column="49">"connectionString"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="49" pos:column="13">var</name></type> <name pos:line="49" pos:column="17">resultItem</name> <init pos:line="49" pos:column="28">= <expr><op:operator pos:line="49" pos:column="30">new</op:operator> <name pos:line="49" pos:column="34">ConfigurationConnectionStringModel</name>
            <block pos:line="50" pos:column="13">{
                <expr><name pos:line="51" pos:column="17">Key</name> <op:operator pos:line="51" pos:column="21">=</op:operator> <name><name pos:line="51" pos:column="23">connectionString</name><op:operator pos:line="51" pos:column="39">.</op:operator><name pos:line="51" pos:column="40">Name</name></name></expr>,
                <expr><name pos:line="52" pos:column="17">Raw</name> <op:operator pos:line="52" pos:column="21">=</op:operator> <name><name pos:line="52" pos:column="23">connectionString</name><op:operator pos:line="52" pos:column="39">.</op:operator><name pos:line="52" pos:column="40">ConnectionString</name></name></expr>,
                <expr><name pos:line="53" pos:column="17">ProviderName</name> <op:operator pos:line="53" pos:column="30">=</op:operator> <name><name pos:line="53" pos:column="32">connectionString</name><op:operator pos:line="53" pos:column="48">.</op:operator><name pos:line="53" pos:column="49">ProviderName</name></name></expr>
            }</block></expr></init></decl>;</decl_stmt>

            <if pos:line="56" pos:column="13">if <condition pos:line="56" pos:column="16">(<expr><op:operator pos:line="56" pos:column="17">!</op:operator><call><name><name pos:line="56" pos:column="18">string</name><op:operator pos:line="56" pos:column="24">.</op:operator><name pos:line="56" pos:column="25">IsNullOrEmpty</name></name><argument_list pos:line="56" pos:column="38">(<argument><expr><name><name pos:line="56" pos:column="39">connectionString</name><op:operator pos:line="56" pos:column="55">.</op:operator><name pos:line="56" pos:column="56">ConnectionString</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="56" pos:column="74">
            <block pos:line="57" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="58" pos:column="17">resultItem</name><op:operator pos:line="58" pos:column="27">.</op:operator><name pos:line="58" pos:column="28">Details</name></name> <op:operator pos:line="58" pos:column="36">=</op:operator> <op:operator pos:line="58" pos:column="38">new</op:operator> <call><name><name pos:line="58" pos:column="42">Dictionary</name><argument_list pos:line="58" pos:column="52">&lt;<argument><name pos:line="58" pos:column="53">string</name></argument>, <argument><name pos:line="58" pos:column="61">object</name></argument>&gt;</argument_list></name><argument_list pos:line="58" pos:column="68">(<argument><expr><name><name pos:line="58" pos:column="69">StringComparer</name><op:operator pos:line="58" pos:column="83">.</op:operator><name pos:line="58" pos:column="84">InvariantCultureIgnoreCase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <try pos:line="60" pos:column="17">try
                <block pos:line="61" pos:column="17">{
                    <decl_stmt><decl><type><name><name pos:line="62" pos:column="21">IDictionary</name><argument_list pos:line="62" pos:column="32">&lt;<argument><name pos:line="62" pos:column="33">string</name></argument>, <argument><name pos:line="62" pos:column="41">object</name></argument>&gt;</argument_list></name></type> <name pos:line="62" pos:column="49">connectionStringKeyValuePairs</name> <init pos:line="62" pos:column="79">=
                        <expr><call><name pos:line="63" pos:column="25">DetermineConnectionStringKeyValuePairs</name><argument_list pos:line="63" pos:column="63">(<argument><expr><name pos:line="63" pos:column="64">connectionString</name></expr></argument>, <argument><expr><name><name pos:line="63" pos:column="82">resultItem</name><op:operator pos:line="63" pos:column="92">.</op:operator><name pos:line="63" pos:column="93">ProviderName</name></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="107">resultItem</name></expr></argument>)</argument_list></call> <op:operator pos:line="63" pos:column="119">??</op:operator>
                        <call><name pos:line="64" pos:column="25">DetermineConnectionStringKeyValuePairs</name><argument_list pos:line="64" pos:column="63">(<argument><expr><name pos:line="64" pos:column="64">connectionString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><call><name pos:line="66" pos:column="21">AddConnectionStringDetailsToResult</name><argument_list pos:line="66" pos:column="55">(<argument><expr><name pos:line="66" pos:column="56">connectionStringKeyValuePairs</name></expr></argument>, <argument><expr><name pos:line="66" pos:column="87">resultItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block>
                <catch pos:line="68" pos:column="17">catch <parameter_list pos:line="68" pos:column="23">(<param><decl><type><name pos:line="68" pos:column="24">Exception</name></type> <name pos:line="68" pos:column="34">e</name></decl></param>)</parameter_list>
                <block pos:line="69" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="70" pos:column="21">resultItem</name><op:operator pos:line="70" pos:column="31">.</op:operator><name pos:line="70" pos:column="32">Details</name><op:operator pos:line="70" pos:column="39">.</op:operator><name pos:line="70" pos:column="40">Add</name></name><argument_list pos:line="70" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="70" pos:column="44">"GENERAL FAILURE"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="70" pos:column="63">e</name><op:operator pos:line="70" pos:column="64">.</op:operator><name pos:line="70" pos:column="65">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></then></if>

            <return pos:line="74" pos:column="13">return <expr><name pos:line="74" pos:column="20">resultItem</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="77" pos:column="9">private</specifier> <specifier pos:line="77" pos:column="17">static</specifier> <name><name pos:line="77" pos:column="24">IDictionary</name><argument_list pos:line="77" pos:column="35">&lt;<argument><name pos:line="77" pos:column="36">string</name></argument>, <argument><name pos:line="77" pos:column="44">object</name></argument>&gt;</argument_list></name></type> <name pos:line="77" pos:column="52">DetermineConnectionStringKeyValuePairs</name><parameter_list pos:line="77" pos:column="90">(
            <param><decl><type><name pos:line="78" pos:column="13">ConnectionStringSettings</name></type> <name pos:line="78" pos:column="38">connectionString</name></decl></param>,
            <param><decl><type><name pos:line="79" pos:column="13">string</name></type> <name pos:line="79" pos:column="20">providerName</name></decl></param>,
            <param><decl><type><name pos:line="80" pos:column="13">ConfigurationConnectionStringModel</name></type> <name pos:line="80" pos:column="48">resultItem</name></decl></param>)</parameter_list>
        <block pos:line="81" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="82" pos:column="13">IDictionary</name><argument_list pos:line="82" pos:column="24">&lt;<argument><name pos:line="82" pos:column="25">string</name></argument>, <argument><name pos:line="82" pos:column="33">object</name></argument>&gt;</argument_list></name></type> <name pos:line="82" pos:column="41">connectionStringKeyValuePairs</name> <init pos:line="82" pos:column="71">= <expr><name pos:line="82" pos:column="73">null</name></expr></init></decl>;</decl_stmt>

            <try pos:line="84" pos:column="13">try
            <block pos:line="85" pos:column="13">{
                <if pos:line="86" pos:column="17">if <condition pos:line="86" pos:column="20">(<expr><call><name><name pos:line="86" pos:column="21">string</name><op:operator pos:line="86" pos:column="27">.</op:operator><name pos:line="86" pos:column="28">IsNullOrEmpty</name></name><argument_list pos:line="86" pos:column="41">(<argument><expr><name pos:line="86" pos:column="42">providerName</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="86" pos:column="56">
                <block pos:line="87" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="88" pos:column="21">resultItem</name><op:operator pos:line="88" pos:column="31">.</op:operator><name pos:line="88" pos:column="32">Details</name><op:operator pos:line="88" pos:column="39">.</op:operator><name pos:line="88" pos:column="40">Add</name></name><argument_list pos:line="88" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="88" pos:column="44">"WARNING"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="88" pos:column="55">"ProviderName is empty, therefore assuming ProviderName=System.Data.SqlClient"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="89" pos:column="21">providerName</name> <op:operator pos:line="89" pos:column="34">=</op:operator> <lit:literal type="string" pos:line="89" pos:column="36">"System.Data.SqlClient"</lit:literal></expr>;</expr_stmt>
                }</block></then></if>

                <decl_stmt><decl><type><name pos:line="92" pos:column="17">var</name></type> <name pos:line="92" pos:column="21">connectionFactory</name> <init pos:line="92" pos:column="39">= <expr><call><name><name pos:line="92" pos:column="41">DbProviderFactories</name><op:operator pos:line="92" pos:column="60">.</op:operator><name pos:line="92" pos:column="61">GetFactory</name></name><argument_list pos:line="92" pos:column="71">(<argument><expr><name pos:line="92" pos:column="72">providerName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="93" pos:column="17">var</name></type> <name pos:line="93" pos:column="21">connectionStringBuilder</name> <init pos:line="93" pos:column="45">= <expr><call><name><name pos:line="93" pos:column="47">connectionFactory</name><op:operator pos:line="93" pos:column="64">.</op:operator><name pos:line="93" pos:column="65">CreateConnectionStringBuilder</name></name><argument_list pos:line="93" pos:column="94">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="94" pos:column="17">if <condition pos:line="94" pos:column="20">(<expr><name pos:line="94" pos:column="21">connectionStringBuilder</name> <op:operator pos:line="94" pos:column="45">!=</op:operator> <name pos:line="94" pos:column="48">null</name></expr>)</condition><then pos:line="94" pos:column="53">
                <block pos:line="95" pos:column="17">{
                    <try pos:line="96" pos:column="21">try
                    <block pos:line="97" pos:column="21">{
                        <expr_stmt><expr><name><name pos:line="98" pos:column="25">connectionStringBuilder</name><op:operator pos:line="98" pos:column="48">.</op:operator><name pos:line="98" pos:column="49">ConnectionString</name></name> <op:operator pos:line="98" pos:column="66">=</op:operator> <name><name pos:line="98" pos:column="68">connectionString</name><op:operator pos:line="98" pos:column="84">.</op:operator><name pos:line="98" pos:column="85">ConnectionString</name></name></expr>;</expr_stmt>
                        <decl_stmt><decl><type><name pos:line="99" pos:column="25">var</name></type> <name pos:line="99" pos:column="29">keys</name> <init pos:line="99" pos:column="34">= <expr><name><name pos:line="99" pos:column="36">connectionStringBuilder</name><op:operator pos:line="99" pos:column="59">.</op:operator><name pos:line="99" pos:column="60">Keys</name></name></expr></init></decl>;</decl_stmt>
                        <if pos:line="100" pos:column="25">if <condition pos:line="100" pos:column="28">(<expr><name pos:line="100" pos:column="29">keys</name> <op:operator pos:line="100" pos:column="34">!=</op:operator> <name pos:line="100" pos:column="37">null</name></expr>)</condition><then pos:line="100" pos:column="42">
                        <block pos:line="101" pos:column="25">{
                            <expr_stmt><expr><name pos:line="102" pos:column="29">connectionStringKeyValuePairs</name> <op:operator pos:line="102" pos:column="59">=</op:operator> <op:operator pos:line="102" pos:column="61">new</op:operator> <call><name><name pos:line="102" pos:column="65">Dictionary</name><argument_list pos:line="102" pos:column="75">&lt;<argument><name pos:line="102" pos:column="76">string</name></argument>, <argument><name pos:line="102" pos:column="84">object</name></argument>&gt;</argument_list></name><argument_list pos:line="102" pos:column="91">()</argument_list></call></expr>;</expr_stmt>
                            <foreach pos:line="103" pos:column="29">foreach (<init><decl><type><name pos:line="103" pos:column="38">string</name></type> <name pos:line="103" pos:column="45">key</name> <range pos:line="103" pos:column="49">in <expr><name pos:line="103" pos:column="52">keys</name></expr></range></decl></init>)
                            <block pos:line="104" pos:column="29">{
                                <expr_stmt><expr><call><name><name pos:line="105" pos:column="33">connectionStringKeyValuePairs</name><op:operator pos:line="105" pos:column="62">.</op:operator><name pos:line="105" pos:column="63">Add</name></name><argument_list pos:line="105" pos:column="66">(<argument><expr><name pos:line="105" pos:column="67">key</name></expr></argument>, <argument><expr><name><name pos:line="105" pos:column="72">connectionStringBuilder</name><index pos:line="105" pos:column="95">[<expr><name pos:line="105" pos:column="96">key</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></foreach>
                        }</block></then></if>
                    }</block>
                    <catch pos:line="109" pos:column="21">catch <parameter_list pos:line="109" pos:column="27">(<param><decl><type><name pos:line="109" pos:column="28">ArgumentException</name></type> <name pos:line="109" pos:column="46">argumentException</name></decl></param>)</parameter_list>
                    <block pos:line="110" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="111" pos:column="25">resultItem</name><op:operator pos:line="111" pos:column="35">.</op:operator><name pos:line="111" pos:column="36">Details</name><op:operator pos:line="111" pos:column="43">.</op:operator><name pos:line="111" pos:column="44">Add</name></name><argument_list pos:line="111" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="111" pos:column="48">"ERROR"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="111" pos:column="57">"Connection string is invalid for ProviderName="</lit:literal> <op:operator pos:line="111" pos:column="106">+</op:operator> <name pos:line="111" pos:column="108">providerName</name> <op:operator pos:line="111" pos:column="121">+</op:operator> <lit:literal type="string" pos:line="111" pos:column="123">" : "</lit:literal> <op:operator pos:line="111" pos:column="129">+</op:operator> <name><name pos:line="111" pos:column="131">argumentException</name><op:operator pos:line="111" pos:column="148">.</op:operator><name pos:line="111" pos:column="149">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></catch></try>
                }</block></then>
                <else pos:line="114" pos:column="17">else
                <block pos:line="115" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="116" pos:column="21">resultItem</name><op:operator pos:line="116" pos:column="31">.</op:operator><name pos:line="116" pos:column="32">Details</name><op:operator pos:line="116" pos:column="39">.</op:operator><name pos:line="116" pos:column="40">Add</name></name><argument_list pos:line="116" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="116" pos:column="44">"ERROR"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="116" pos:column="53">"Connection string builder could not be created"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block>
            <catch pos:line="119" pos:column="13">catch <parameter_list pos:line="119" pos:column="19">(<param><decl><type><name pos:line="119" pos:column="20">Exception</name></type> <name pos:line="119" pos:column="30">exception</name></decl></param>)</parameter_list>
            <block pos:line="120" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="121" pos:column="17">resultItem</name><op:operator pos:line="121" pos:column="27">.</op:operator><name pos:line="121" pos:column="28">Details</name><op:operator pos:line="121" pos:column="35">.</op:operator><name pos:line="121" pos:column="36">Add</name></name><argument_list pos:line="121" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="121" pos:column="40">"FATAL"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="121" pos:column="49">exception</name><op:operator pos:line="121" pos:column="58">.</op:operator><name pos:line="121" pos:column="59">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>

            <return pos:line="124" pos:column="13">return <expr><name pos:line="124" pos:column="20">connectionStringKeyValuePairs</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="127" pos:column="9">private</specifier> <specifier pos:line="127" pos:column="17">static</specifier> <name><name pos:line="127" pos:column="24">IDictionary</name><argument_list pos:line="127" pos:column="35">&lt;<argument><name pos:line="127" pos:column="36">string</name></argument>, <argument><name pos:line="127" pos:column="44">object</name></argument>&gt;</argument_list></name></type> <name pos:line="127" pos:column="52">DetermineConnectionStringKeyValuePairs</name><parameter_list pos:line="127" pos:column="90">(<param><decl><type><name pos:line="127" pos:column="91">ConnectionStringSettings</name></type> <name pos:line="127" pos:column="116">connectionString</name></decl></param>)</parameter_list>
        <block pos:line="128" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="129" pos:column="13">IDictionary</name><argument_list pos:line="129" pos:column="24">&lt;<argument><name pos:line="129" pos:column="25">string</name></argument>, <argument><name pos:line="129" pos:column="33">object</name></argument>&gt;</argument_list></name></type> <name pos:line="129" pos:column="41">connectionStringKeyValues</name> <init pos:line="129" pos:column="67">= <expr><op:operator pos:line="129" pos:column="69">new</op:operator> <call><name><name pos:line="129" pos:column="73">Dictionary</name><argument_list pos:line="129" pos:column="83">&lt;<argument><name pos:line="129" pos:column="84">string</name></argument>, <argument><name pos:line="129" pos:column="92">object</name></argument>&gt;</argument_list></name><argument_list pos:line="129" pos:column="99">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="130" pos:column="13">var</name></type> <name pos:line="130" pos:column="17">keyValues</name> <init pos:line="130" pos:column="27">= <expr><call><name><name pos:line="130" pos:column="29">connectionString</name><op:operator pos:line="130" pos:column="45">.</op:operator><name pos:line="130" pos:column="46">ConnectionString</name><op:operator pos:line="130" pos:column="62">.</op:operator><name pos:line="130" pos:column="63">Split</name></name><argument_list pos:line="130" pos:column="68">(<argument><expr><op:operator pos:line="130" pos:column="69">new</op:operator><index pos:line="130" pos:column="72">[]</index> <block pos:line="130" pos:column="75">{ <expr><lit:literal type="string" pos:line="130" pos:column="77">";"</lit:literal></expr> }</block></expr></argument>, <argument><expr><name><name pos:line="130" pos:column="84">StringSplitOptions</name><op:operator pos:line="130" pos:column="102">.</op:operator><name pos:line="130" pos:column="103">RemoveEmptyEntries</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="131" pos:column="13">foreach (<init><decl><type><name pos:line="131" pos:column="22">var</name></type> <name pos:line="131" pos:column="26">keyValue</name> <range pos:line="131" pos:column="35">in <expr><name pos:line="131" pos:column="38">keyValues</name></expr></range></decl></init>)
            <block pos:line="132" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="133" pos:column="17">var</name></type> <name pos:line="133" pos:column="21">keyAndValue</name> <init pos:line="133" pos:column="33">= <expr><call><name><name pos:line="133" pos:column="35">keyValue</name><op:operator pos:line="133" pos:column="43">.</op:operator><name pos:line="133" pos:column="44">Split</name></name><argument_list pos:line="133" pos:column="49">(<argument><expr><op:operator pos:line="133" pos:column="50">new</op:operator><index pos:line="133" pos:column="53">[]</index> <block pos:line="133" pos:column="56">{ <expr><lit:literal type="string" pos:line="133" pos:column="58">"="</lit:literal></expr> }</block></expr></argument>, <argument><expr><name><name pos:line="133" pos:column="65">StringSplitOptions</name><op:operator pos:line="133" pos:column="83">.</op:operator><name pos:line="133" pos:column="84">None</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="134" pos:column="17">connectionStringKeyValues</name><op:operator pos:line="134" pos:column="42">.</op:operator><name pos:line="134" pos:column="43">Add</name></name><argument_list pos:line="134" pos:column="46">(<argument><expr><name><name pos:line="134" pos:column="47">keyAndValue</name><index pos:line="134" pos:column="58">[<expr><lit:literal type="number" pos:line="134" pos:column="59">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name><name pos:line="134" pos:column="63">keyAndValue</name><index pos:line="134" pos:column="74">[<expr><lit:literal type="number" pos:line="134" pos:column="75">1</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>

            <return pos:line="137" pos:column="13">return <expr><name pos:line="137" pos:column="20">connectionStringKeyValues</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="140" pos:column="9">private</specifier> <specifier pos:line="140" pos:column="17">static</specifier> <name pos:line="140" pos:column="24">void</name></type> <name pos:line="140" pos:column="29">AddConnectionStringDetailsToResult</name><parameter_list pos:line="140" pos:column="63">(
            <param><decl><type><name><name pos:line="141" pos:column="13">IEnumerable</name><argument_list pos:line="141" pos:column="24">&lt;<argument><name><name pos:line="141" pos:column="25">KeyValuePair</name><argument_list pos:line="141" pos:column="37">&lt;<argument><name pos:line="141" pos:column="38">string</name></argument>, <argument><name pos:line="141" pos:column="46">object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="141" pos:column="55">connectionStringKeyValuePairs</name></decl></param>,
            <param><decl><type><name pos:line="142" pos:column="13">ConfigurationConnectionStringModel</name></type> <name pos:line="142" pos:column="48">resultItem</name></decl></param>)</parameter_list>
        <block pos:line="143" pos:column="9">{
            <foreach pos:line="144" pos:column="13">foreach (<init><decl><type><name pos:line="144" pos:column="22">var</name></type> <name pos:line="144" pos:column="26">connectionStringKeyValue</name> <range pos:line="144" pos:column="51">in <expr><name pos:line="144" pos:column="54">connectionStringKeyValuePairs</name></expr></range></decl></init>)
            <block pos:line="145" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="146" pos:column="17">resultItem</name><op:operator pos:line="146" pos:column="27">.</op:operator><name pos:line="146" pos:column="28">Details</name><op:operator pos:line="146" pos:column="35">.</op:operator><name pos:line="146" pos:column="36">Add</name></name><argument_list pos:line="146" pos:column="39">(<argument><expr><name><name pos:line="146" pos:column="40">connectionStringKeyValue</name><op:operator pos:line="146" pos:column="64">.</op:operator><name pos:line="146" pos:column="65">Key</name></name></expr></argument>, <argument><expr><name><name pos:line="146" pos:column="70">connectionStringKeyValue</name><op:operator pos:line="146" pos:column="94">.</op:operator><name pos:line="146" pos:column="95">Value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if pos:line="148" pos:column="17">if <condition pos:line="148" pos:column="20">(<expr><name><name pos:line="148" pos:column="21">connectionStringKeyValue</name><op:operator pos:line="148" pos:column="45">.</op:operator><name pos:line="148" pos:column="46">Value</name></name> <op:operator pos:line="148" pos:column="52">==</op:operator> <name pos:line="148" pos:column="55">null</name></expr>)</condition><then pos:line="148" pos:column="60">
                <block pos:line="149" pos:column="17">{
                    <continue pos:line="150" pos:column="21">continue;</continue>
                }</block></then></if>

                <decl_stmt><decl><type><name pos:line="153" pos:column="17">var</name></type> <name pos:line="153" pos:column="21">currentValue</name> <init pos:line="153" pos:column="34">= <expr><call><name><name pos:line="153" pos:column="36">connectionStringKeyValue</name><op:operator pos:line="153" pos:column="60">.</op:operator><name pos:line="153" pos:column="61">Value</name><op:operator pos:line="153" pos:column="66">.</op:operator><name pos:line="153" pos:column="67">ToString</name></name><argument_list pos:line="153" pos:column="75">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="154" pos:column="17">if <condition pos:line="154" pos:column="20">(<expr><call><name><name pos:line="154" pos:column="21">string</name><op:operator pos:line="154" pos:column="27">.</op:operator><name pos:line="154" pos:column="28">IsNullOrEmpty</name></name><argument_list pos:line="154" pos:column="41">(<argument><expr><name pos:line="154" pos:column="42">currentValue</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="154" pos:column="56">
                <block pos:line="155" pos:column="17">{
                    <comment type="line" pos:line="156" pos:column="21">// no need to replace an empty value</comment>
                    <continue pos:line="157" pos:column="21">continue;</continue>
                }</block></then></if>

                <decl_stmt><decl><type><name pos:line="160" pos:column="17">string</name></type> <name pos:line="160" pos:column="24">obfuscatedValue</name></decl>;</decl_stmt>
                <if pos:line="161" pos:column="17">if <condition pos:line="161" pos:column="20">(<expr><call><name><name pos:line="161" pos:column="21">ObfuscatedConnectionStringValues</name><op:operator pos:line="161" pos:column="53">.</op:operator><name pos:line="161" pos:column="54">TryGetValue</name></name><argument_list pos:line="161" pos:column="65">(<argument><expr><name><name pos:line="161" pos:column="66">connectionStringKeyValue</name><op:operator pos:line="161" pos:column="90">.</op:operator><name pos:line="161" pos:column="91">Key</name></name></expr></argument>, <argument><expr pos:line="161" pos:column="96">out <name pos:line="161" pos:column="100">obfuscatedValue</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="161" pos:column="117">
                <block pos:line="162" pos:column="17">{
                    <comment type="line" pos:line="163" pos:column="21">// this key must be obfuscated</comment>
                    <expr_stmt><expr><name><name pos:line="164" pos:column="21">resultItem</name><op:operator pos:line="164" pos:column="31">.</op:operator><name pos:line="164" pos:column="32">Details</name><index pos:line="164" pos:column="39">[<expr><name><name pos:line="164" pos:column="40">connectionStringKeyValue</name><op:operator pos:line="164" pos:column="64">.</op:operator><name pos:line="164" pos:column="65">Key</name></name></expr>]</index></name> <op:operator pos:line="164" pos:column="70">=</op:operator> <name pos:line="164" pos:column="72">obfuscatedValue</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="165" pos:column="21">resultItem</name><op:operator pos:line="165" pos:column="31">.</op:operator><name pos:line="165" pos:column="32">Raw</name></name> <op:operator pos:line="165" pos:column="36">=</op:operator> <call><name><name pos:line="165" pos:column="38">resultItem</name><op:operator pos:line="165" pos:column="48">.</op:operator><name pos:line="165" pos:column="49">Raw</name><op:operator pos:line="165" pos:column="52">.</op:operator><name pos:line="165" pos:column="53">Replace</name></name><argument_list pos:line="165" pos:column="60">(<argument><expr><name pos:line="165" pos:column="61">currentValue</name></expr></argument>, <argument><expr><name pos:line="165" pos:column="75">obfuscatedValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></foreach>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
