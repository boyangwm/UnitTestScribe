<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.AspNet\PreBodyTagFilter.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">System</name><op:operator pos:line="1" pos:column="13">.</op:operator><name pos:line="1" pos:column="14">IO</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Text</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Text</name><op:operator pos:line="3" pos:column="18">.</op:operator><name pos:line="3" pos:column="19">RegularExpressions</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Core</name><op:operator pos:line="4" pos:column="19">.</op:operator><name pos:line="4" pos:column="20">Extensibility</name></name>;</using>

<namespace pos:line="6" pos:column="1">namespace <name><name pos:line="6" pos:column="11">Glimpse</name><op:operator pos:line="6" pos:column="18">.</op:operator><name pos:line="6" pos:column="19">AspNet</name></name>
<block pos:line="7" pos:column="1">{
    <comment type="line" pos:line="8" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="9" pos:column="5">/// This class will inject some html snippet (most likely the Glimpse Client script tags, but it can be anything) in the resulting HTML output.</comment>
    <comment type="line" pos:line="10" pos:column="5">/// It will look for the last occurrence of the &amp;lt;/body&amp;gt; tag and inject the snippet right before that tag.</comment>
    <comment type="line" pos:line="11" pos:column="5">/// An instance of this class should be assigned as a filter to the outgoing response so that the injection can be done once all the rendering is completed.</comment>
    <comment type="line" pos:line="12" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="13" pos:column="5">public</specifier> class <name pos:line="13" pos:column="18">PreBodyTagFilter</name> <super pos:line="13" pos:column="35">: <name pos:line="13" pos:column="37">Stream</name></super>
    <block pos:line="14" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="15" pos:column="9">private</specifier> <specifier pos:line="15" pos:column="17">const</specifier> <name pos:line="15" pos:column="23">string</name></type> <name pos:line="15" pos:column="30">BodyClosingTag</name> <init pos:line="15" pos:column="45">= <expr><lit:literal type="string" pos:line="15" pos:column="47">"&lt;/body&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="16" pos:column="9">private</specifier> <specifier pos:line="16" pos:column="17">const</specifier> <name pos:line="16" pos:column="23">string</name></type> <name pos:line="16" pos:column="30">TroubleshootingDocsUri</name> <init pos:line="16" pos:column="53">= <expr><lit:literal type="string" pos:line="16" pos:column="55">"http://getglimpse.com/Help/Troubleshooting"</lit:literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="18" pos:column="9">private</specifier> <name pos:line="18" pos:column="17">ILogger</name></type> <name pos:line="18" pos:column="25">Logger</name> <block pos:line="18" pos:column="32">{ <function_decl><name pos:line="18" pos:column="34">get</name>;</function_decl> <function_decl><name pos:line="18" pos:column="39">set</name>;</function_decl> }</block></decl></decl_stmt>
        
        <decl_stmt><decl><type><specifier pos:line="20" pos:column="9">private</specifier> <name pos:line="20" pos:column="17">string</name></type> <name pos:line="20" pos:column="24">HtmlSnippet</name> <block pos:line="20" pos:column="36">{ <function_decl><name pos:line="20" pos:column="38">get</name>;</function_decl> <function_decl><name pos:line="20" pos:column="43">set</name>;</function_decl> }</block></decl></decl_stmt>
        
        <decl_stmt><decl><type><specifier pos:line="22" pos:column="9">private</specifier> <name pos:line="22" pos:column="17">Stream</name></type> <name pos:line="22" pos:column="24">OutputStream</name> <block pos:line="22" pos:column="37">{ <function_decl><name pos:line="22" pos:column="39">get</name>;</function_decl> <function_decl><name pos:line="22" pos:column="44">set</name>;</function_decl> }</block></decl></decl_stmt>
        
        <decl_stmt><decl><type><specifier pos:line="24" pos:column="9">private</specifier> <name pos:line="24" pos:column="17">Encoding</name></type> <name pos:line="24" pos:column="26">ContentEncoding</name> <block pos:line="24" pos:column="42">{ <function_decl><name pos:line="24" pos:column="44">get</name>;</function_decl> <function_decl><name pos:line="24" pos:column="49">set</name>;</function_decl> }</block></decl></decl_stmt>
        
        <decl_stmt><decl><type><specifier pos:line="26" pos:column="9">private</specifier> <name pos:line="26" pos:column="17">Regex</name></type> <name pos:line="26" pos:column="23">BodyEndRegex</name> <block pos:line="26" pos:column="36">{ <function_decl><name pos:line="26" pos:column="38">get</name>;</function_decl> <function_decl><name pos:line="26" pos:column="43">set</name>;</function_decl> }</block></decl></decl_stmt>
        
        <decl_stmt><decl><type><specifier pos:line="28" pos:column="9">private</specifier> <name pos:line="28" pos:column="17">string</name></type> <name pos:line="28" pos:column="24">CurrentRequestRawUrl</name> <block pos:line="28" pos:column="45">{ <function_decl><name pos:line="28" pos:column="47">get</name>;</function_decl> <function_decl><name pos:line="28" pos:column="52">set</name>;</function_decl> }</block></decl></decl_stmt>
        
        <decl_stmt><decl><type><specifier pos:line="30" pos:column="9">private</specifier> <name pos:line="30" pos:column="17">string</name></type> <name pos:line="30" pos:column="24">UnwrittenCharactersFromPreviousCall</name> <block pos:line="30" pos:column="60">{ <function_decl><name pos:line="30" pos:column="62">get</name>;</function_decl> <function_decl><name pos:line="30" pos:column="67">set</name>;</function_decl> }</block></decl></decl_stmt>

        <constructor><specifier pos:line="32" pos:column="9">public</specifier> <name pos:line="32" pos:column="16">PreBodyTagFilter</name><parameter_list pos:line="32" pos:column="32">(<param><decl><type><name pos:line="32" pos:column="33">string</name></type> <name pos:line="32" pos:column="40">htmlSnippet</name></decl></param>, <param><decl><type><name pos:line="32" pos:column="53">Stream</name></type> <name pos:line="32" pos:column="60">outputStream</name></decl></param>, <param><decl><type><name pos:line="32" pos:column="74">Encoding</name></type> <name pos:line="32" pos:column="83">contentEncoding</name></decl></param>, <param><decl><type><name pos:line="32" pos:column="100">string</name></type> <name pos:line="32" pos:column="107">currentRequestRawUrl</name></decl></param>, <param><decl><type><name pos:line="32" pos:column="129">ILogger</name></type> <name pos:line="32" pos:column="137">logger</name></decl></param>)</parameter_list>
        <block pos:line="33" pos:column="9">{
            <expr_stmt><expr><name pos:line="34" pos:column="13">HtmlSnippet</name> <op:operator pos:line="34" pos:column="25">=</op:operator> <name pos:line="34" pos:column="27">htmlSnippet</name> <op:operator pos:line="34" pos:column="39">+</op:operator> <name pos:line="34" pos:column="41">BodyClosingTag</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="35" pos:column="13">OutputStream</name> <op:operator pos:line="35" pos:column="26">=</op:operator> <name pos:line="35" pos:column="28">outputStream</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="36" pos:column="13">ContentEncoding</name> <op:operator pos:line="36" pos:column="29">=</op:operator> <name pos:line="36" pos:column="31">contentEncoding</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="37" pos:column="13">BodyEndRegex</name> <op:operator pos:line="37" pos:column="26">=</op:operator> <op:operator pos:line="37" pos:column="28">new</op:operator> <call><name pos:line="37" pos:column="32">Regex</name><argument_list pos:line="37" pos:column="37">(<argument><expr><name pos:line="37" pos:column="38">BodyClosingTag</name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="54">RegexOptions</name><op:operator pos:line="37" pos:column="66">.</op:operator><name pos:line="37" pos:column="67">Compiled</name></name> <op:operator pos:line="37" pos:column="76">|</op:operator> <name><name pos:line="37" pos:column="78">RegexOptions</name><op:operator pos:line="37" pos:column="90">.</op:operator><name pos:line="37" pos:column="91">Multiline</name></name> <op:operator pos:line="37" pos:column="101">|</op:operator> <name><name pos:line="37" pos:column="103">RegexOptions</name><op:operator pos:line="37" pos:column="115">.</op:operator><name pos:line="37" pos:column="116">IgnoreCase</name></name> <op:operator pos:line="37" pos:column="127">|</op:operator> <name><name pos:line="37" pos:column="129">RegexOptions</name><op:operator pos:line="37" pos:column="141">.</op:operator><name pos:line="37" pos:column="142">RightToLeft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="38" pos:column="13">CurrentRequestRawUrl</name> <op:operator pos:line="38" pos:column="34">=</op:operator> <name pos:line="38" pos:column="36">currentRequestRawUrl</name> <op:operator pos:line="38" pos:column="57">??</op:operator> <lit:literal type="string" pos:line="38" pos:column="60">"unknown"</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="39" pos:column="13">Logger</name> <op:operator pos:line="39" pos:column="20">=</op:operator> <name pos:line="39" pos:column="22">logger</name></expr>;</expr_stmt>
        }</block></constructor>

        <decl_stmt><decl><type><specifier pos:line="42" pos:column="9">public</specifier> <specifier pos:line="42" pos:column="16">override</specifier> <name pos:line="42" pos:column="25">bool</name></type> <name pos:line="42" pos:column="30">CanRead</name>
        <block pos:line="43" pos:column="9">{
            <function><name pos:line="44" pos:column="13">get</name> <block pos:line="44" pos:column="17">{ <return pos:line="44" pos:column="19">return <expr><name><name pos:line="44" pos:column="26">OutputStream</name><op:operator pos:line="44" pos:column="38">.</op:operator><name pos:line="44" pos:column="39">CanRead</name></name></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="47" pos:column="9">public</specifier> <specifier pos:line="47" pos:column="16">override</specifier> <name pos:line="47" pos:column="25">bool</name></type> <name pos:line="47" pos:column="30">CanSeek</name>
        <block pos:line="48" pos:column="9">{
            <function><name pos:line="49" pos:column="13">get</name> <block pos:line="49" pos:column="17">{ <return pos:line="49" pos:column="19">return <expr><name><name pos:line="49" pos:column="26">OutputStream</name><op:operator pos:line="49" pos:column="38">.</op:operator><name pos:line="49" pos:column="39">CanSeek</name></name></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="52" pos:column="9">public</specifier> <specifier pos:line="52" pos:column="16">override</specifier> <name pos:line="52" pos:column="25">bool</name></type> <name pos:line="52" pos:column="30">CanWrite</name>
        <block pos:line="53" pos:column="9">{
            <function><name pos:line="54" pos:column="13">get</name> <block pos:line="54" pos:column="17">{ <return pos:line="54" pos:column="19">return <expr><name><name pos:line="54" pos:column="26">OutputStream</name><op:operator pos:line="54" pos:column="38">.</op:operator><name pos:line="54" pos:column="39">CanWrite</name></name></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="57" pos:column="9">public</specifier> <specifier pos:line="57" pos:column="16">override</specifier> <name pos:line="57" pos:column="25">long</name></type> <name pos:line="57" pos:column="30">Length</name>
        <block pos:line="58" pos:column="9">{
            <function><name pos:line="59" pos:column="13">get</name> <block pos:line="59" pos:column="17">{ <return pos:line="59" pos:column="19">return <expr><name><name pos:line="59" pos:column="26">OutputStream</name><op:operator pos:line="59" pos:column="38">.</op:operator><name pos:line="59" pos:column="39">Length</name></name></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="62" pos:column="9">public</specifier> <specifier pos:line="62" pos:column="16">override</specifier> <name pos:line="62" pos:column="25">long</name></type> <name pos:line="62" pos:column="30">Position</name>
        <block pos:line="63" pos:column="9">{
            <function><name pos:line="64" pos:column="13">get</name> <block pos:line="64" pos:column="17">{ <return pos:line="64" pos:column="19">return <expr><name><name pos:line="64" pos:column="26">OutputStream</name><op:operator pos:line="64" pos:column="38">.</op:operator><name pos:line="64" pos:column="39">Position</name></name></expr>;</return> }</block></function>
            <function><name pos:line="65" pos:column="13">set</name> <block pos:line="65" pos:column="17">{ <expr_stmt><expr><name><name pos:line="65" pos:column="19">OutputStream</name><op:operator pos:line="65" pos:column="31">.</op:operator><name pos:line="65" pos:column="32">Position</name></name> <op:operator pos:line="65" pos:column="41">=</op:operator> <name pos:line="65" pos:column="43">value</name></expr>;</expr_stmt> }</block></function>
        }</block></decl></decl_stmt>

        <function><type><specifier pos:line="68" pos:column="9">public</specifier> <specifier pos:line="68" pos:column="16">override</specifier> <name pos:line="68" pos:column="25">void</name></type> <name pos:line="68" pos:column="30">Close</name><parameter_list pos:line="68" pos:column="35">()</parameter_list>
        <block pos:line="69" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="70" pos:column="13">OutputStream</name><op:operator pos:line="70" pos:column="25">.</op:operator><name pos:line="70" pos:column="26">Close</name></name><argument_list pos:line="70" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="73" pos:column="9">public</specifier> <specifier pos:line="73" pos:column="16">override</specifier> <name pos:line="73" pos:column="25">long</name></type> <name pos:line="73" pos:column="30">Seek</name><parameter_list pos:line="73" pos:column="34">(<param><decl><type><name pos:line="73" pos:column="35">long</name></type> <name pos:line="73" pos:column="40">offset</name></decl></param>, <param><decl><type><name pos:line="73" pos:column="48">SeekOrigin</name></type> <name pos:line="73" pos:column="59">origin</name></decl></param>)</parameter_list>
        <block pos:line="74" pos:column="9">{
            <return pos:line="75" pos:column="13">return <expr><call><name><name pos:line="75" pos:column="20">OutputStream</name><op:operator pos:line="75" pos:column="32">.</op:operator><name pos:line="75" pos:column="33">Seek</name></name><argument_list pos:line="75" pos:column="37">(<argument><expr><name pos:line="75" pos:column="38">offset</name></expr></argument>, <argument><expr><name pos:line="75" pos:column="46">origin</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="78" pos:column="9">public</specifier> <specifier pos:line="78" pos:column="16">override</specifier> <name pos:line="78" pos:column="25">void</name></type> <name pos:line="78" pos:column="30">SetLength</name><parameter_list pos:line="78" pos:column="39">(<param><decl><type><name pos:line="78" pos:column="40">long</name></type> <name pos:line="78" pos:column="45">value</name></decl></param>)</parameter_list>
        <block pos:line="79" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="80" pos:column="13">OutputStream</name><op:operator pos:line="80" pos:column="25">.</op:operator><name pos:line="80" pos:column="26">SetLength</name></name><argument_list pos:line="80" pos:column="35">(<argument><expr><name pos:line="80" pos:column="36">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="83" pos:column="9">public</specifier> <specifier pos:line="83" pos:column="16">override</specifier> <name pos:line="83" pos:column="25">int</name></type> <name pos:line="83" pos:column="29">Read</name><parameter_list pos:line="83" pos:column="33">(<param><decl><type><name><name pos:line="83" pos:column="34">byte</name><index pos:line="83" pos:column="38">[]</index></name></type> <name pos:line="83" pos:column="41">buffer</name></decl></param>, <param><decl><type><name pos:line="83" pos:column="49">int</name></type> <name pos:line="83" pos:column="53">offset</name></decl></param>, <param><decl><type><name pos:line="83" pos:column="61">int</name></type> <name pos:line="83" pos:column="65">count</name></decl></param>)</parameter_list>
        <block pos:line="84" pos:column="9">{
            <return pos:line="85" pos:column="13">return <expr><call><name><name pos:line="85" pos:column="20">OutputStream</name><op:operator pos:line="85" pos:column="32">.</op:operator><name pos:line="85" pos:column="33">Read</name></name><argument_list pos:line="85" pos:column="37">(<argument><expr><name pos:line="85" pos:column="38">buffer</name></expr></argument>, <argument><expr><name pos:line="85" pos:column="46">offset</name></expr></argument>, <argument><expr><name pos:line="85" pos:column="54">count</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="88" pos:column="9">public</specifier> <specifier pos:line="88" pos:column="16">override</specifier> <name pos:line="88" pos:column="25">void</name></type> <name pos:line="88" pos:column="30">Write</name><parameter_list pos:line="88" pos:column="35">(<param><decl><type><name><name pos:line="88" pos:column="36">byte</name><index pos:line="88" pos:column="40">[]</index></name></type> <name pos:line="88" pos:column="43">buffer</name></decl></param>, <param><decl><type><name pos:line="88" pos:column="51">int</name></type> <name pos:line="88" pos:column="55">offset</name></decl></param>, <param><decl><type><name pos:line="88" pos:column="63">int</name></type> <name pos:line="88" pos:column="67">count</name></decl></param>)</parameter_list>
        <block pos:line="89" pos:column="9">{
            <comment type="line" pos:line="90" pos:column="13">// There are different cases we need to deal with</comment>
            <comment type="line" pos:line="91" pos:column="13">// Normally you would expect the contentInBuffer to contain the complete HTML code to return, but this is not always true because it is possible that </comment>
            <comment type="line" pos:line="92" pos:column="13">// the content that will be send back is larger than the buffer foreseen by ASP.NET (currently the buffer seems to be a little bit less than 16K)</comment>
            <comment type="line" pos:line="93" pos:column="13">// and in that case this method will be called multiple times, which might result in false positives being written to the logs for not finding a &lt;/body&gt; </comment>
            <comment type="line" pos:line="94" pos:column="13">// in the current chunk.</comment>

            <comment type="line" pos:line="96" pos:column="13">// So we need to be able to deal with the following cases without writing those false positives</comment>
            <comment type="line" pos:line="97" pos:column="13">// 1 - the &lt;/body&gt; tag is found</comment>
            <comment type="line" pos:line="98" pos:column="13">// 2 - the &lt;/body&gt; tag was not found because</comment>
            <comment type="line" pos:line="99" pos:column="13">//      2.1 - the &lt;/body&gt; tag will be available in one of the next calls because the total length of the output is larger than 16K</comment>
            <comment type="line" pos:line="100" pos:column="13">//      2.2 - the &lt;/body&gt; tag is split up between this buffer and the next e.g.: "&lt;/bo" en "dy&gt;"</comment>
            <comment type="line" pos:line="101" pos:column="13">//      2.3 - the &lt;/body&gt; tag will never be available (is missing)</comment>
            <comment type="line" pos:line="102" pos:column="13">//      2.4 - Multiple &lt;/body&gt; tags are available of which some might be part of a Javascript string or the markup is badly formatted</comment>

            <comment type="line" pos:line="104" pos:column="13">// The easiest way to deal with this is to look for the last match for the &lt;/body&gt; tag and if it is found we write everything before it to the</comment>
            <comment type="line" pos:line="105" pos:column="13">// output stream and keep that &lt;/body&gt; tag and everything that follows it (normally only a &lt;/html&gt; tag but it can also be a 2.4 case) for the next call.</comment>
            <comment type="line" pos:line="106" pos:column="13">// In case there is no match for the &lt;/body&gt; tag, then we write everything to the output stream except for the last 10 characters (normally the last 6 would suffice, but we take a little margin to reassure us somehow ;-)) which we keep until the next call.</comment>

            <comment type="line" pos:line="108" pos:column="13">// If there is a next call, then we first prepend the characters we kept from the previous call to the content inside the buffer (which might complete a chunked &lt;/body&gt; tag for instance) </comment>
            <comment type="line" pos:line="109" pos:column="13">// and start our check all over again (which might result in finding a &lt;/body&gt; tag or discarding a previously found &lt;/body&gt; tag because that one was not the last one.</comment>
            <comment type="line" pos:line="110" pos:column="13">// Anyhow, as long as we are not a the end and a &lt;/body&gt; tag has been found previously, the output will be buffered, just to make sure there is no other &lt;/body&gt; tag further down the stream.</comment>

            <comment type="line" pos:line="112" pos:column="13">// If there is no next call, then the Flush method will be called and that one will deal with the current state, which means:</comment>
            <comment type="line" pos:line="113" pos:column="13">// - in case there was a &lt;/body&gt; tag found, the replacement will be done</comment>
            <comment type="line" pos:line="114" pos:column="13">// - in case there was no &lt;/body&gt; tag found, then the warning will be written to the log, indicating something went wrong</comment>
            <comment type="line" pos:line="115" pos:column="13">// either way, the remaining unwritten characters will be sent down the output stream.</comment>
            <decl_stmt><decl><type><name pos:line="116" pos:column="13">string</name></type> <name pos:line="116" pos:column="20">contentInBuffer</name> <init pos:line="116" pos:column="36">= <expr><call><name><name pos:line="116" pos:column="38">ContentEncoding</name><op:operator pos:line="116" pos:column="53">.</op:operator><name pos:line="116" pos:column="54">GetString</name></name><argument_list pos:line="116" pos:column="63">(<argument><expr><name pos:line="116" pos:column="64">buffer</name></expr></argument>, <argument><expr><name pos:line="116" pos:column="72">offset</name></expr></argument>, <argument><expr><name pos:line="116" pos:column="80">count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="118" pos:column="13">// Prepend remaining characters from the previous call, if any</comment>
            <if pos:line="119" pos:column="13">if <condition pos:line="119" pos:column="16">(<expr><op:operator pos:line="119" pos:column="17">!</op:operator><call><name><name pos:line="119" pos:column="18">string</name><op:operator pos:line="119" pos:column="24">.</op:operator><name pos:line="119" pos:column="25">IsNullOrEmpty</name></name><argument_list pos:line="119" pos:column="38">(<argument><expr><name pos:line="119" pos:column="39">UnwrittenCharactersFromPreviousCall</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="119" pos:column="76">
            <block pos:line="120" pos:column="13">{
                <expr_stmt><expr><name pos:line="121" pos:column="17">contentInBuffer</name> <op:operator pos:line="121" pos:column="33">=</op:operator> <name pos:line="121" pos:column="35">UnwrittenCharactersFromPreviousCall</name> <op:operator pos:line="121" pos:column="71">+</op:operator> <name pos:line="121" pos:column="73">contentInBuffer</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="122" pos:column="17">UnwrittenCharactersFromPreviousCall</name> <op:operator pos:line="122" pos:column="53">=</op:operator> <name pos:line="122" pos:column="55">null</name></expr>;</expr_stmt>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="125" pos:column="13">Match</name></type> <name pos:line="125" pos:column="19">closingBodyTagMatch</name> <init pos:line="125" pos:column="39">= <expr><call><name><name pos:line="125" pos:column="41">BodyEndRegex</name><op:operator pos:line="125" pos:column="53">.</op:operator><name pos:line="125" pos:column="54">Match</name></name><argument_list pos:line="125" pos:column="59">(<argument><expr><name pos:line="125" pos:column="60">contentInBuffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="126" pos:column="13">if <condition pos:line="126" pos:column="16">(<expr><name><name pos:line="126" pos:column="17">closingBodyTagMatch</name><op:operator pos:line="126" pos:column="36">.</op:operator><name pos:line="126" pos:column="37">Success</name></name></expr>)</condition><then pos:line="126" pos:column="45">
            <block pos:line="127" pos:column="13">{
                <comment type="line" pos:line="128" pos:column="17">// Hooray, we found "a" &lt;/body&gt; tag, but that doesn't mean that this is "the" last &lt;/body&gt; tag we are looking for</comment>

                <comment type="line" pos:line="130" pos:column="17">// so we write everything before that match to the output stream</comment>
                <expr_stmt><expr><call><name pos:line="131" pos:column="17">WriteToOutputStream</name><argument_list pos:line="131" pos:column="36">(<argument><expr><call><name><name pos:line="131" pos:column="37">contentInBuffer</name><op:operator pos:line="131" pos:column="52">.</op:operator><name pos:line="131" pos:column="53">Substring</name></name><argument_list pos:line="131" pos:column="62">(<argument><expr><lit:literal type="number" pos:line="131" pos:column="63">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="131" pos:column="66">closingBodyTagMatch</name><op:operator pos:line="131" pos:column="85">.</op:operator><name pos:line="131" pos:column="86">Index</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line" pos:line="133" pos:column="17">// and keep the remainder for the next call or the Flush if there is no next call</comment>
                <expr_stmt><expr><name pos:line="134" pos:column="17">UnwrittenCharactersFromPreviousCall</name> <op:operator pos:line="134" pos:column="53">=</op:operator> <call><name><name pos:line="134" pos:column="55">contentInBuffer</name><op:operator pos:line="134" pos:column="70">.</op:operator><name pos:line="134" pos:column="71">Substring</name></name><argument_list pos:line="134" pos:column="80">(<argument><expr><name><name pos:line="134" pos:column="81">closingBodyTagMatch</name><op:operator pos:line="134" pos:column="100">.</op:operator><name pos:line="134" pos:column="101">Index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else pos:line="136" pos:column="13">else
            <block pos:line="137" pos:column="13">{
                <comment type="line" pos:line="138" pos:column="17">// there is no match found for &lt;/body&gt; which could have different reasons like case 2.2 for instance</comment>
                <comment type="line" pos:line="139" pos:column="17">// therefor we'll write everything except the last 10 characters to the output stream and we'll keep the last 10 characters for the next call or the Flush method</comment>
                <if pos:line="140" pos:column="17">if <condition pos:line="140" pos:column="20">(<expr><name><name pos:line="140" pos:column="21">contentInBuffer</name><op:operator pos:line="140" pos:column="36">.</op:operator><name pos:line="140" pos:column="37">Length</name></name> <op:operator pos:line="140" pos:column="44">&lt;=</op:operator> <lit:literal type="number" pos:line="140" pos:column="47">10</lit:literal></expr>)</condition><then pos:line="140" pos:column="50">
                <block pos:line="141" pos:column="17">{
                    <comment type="line" pos:line="142" pos:column="21">// the content has a maximum length of 10 characters, so we don't need to write anything to the output stream and we'll keep those </comment>
                    <comment type="line" pos:line="143" pos:column="21">// characters for the next call (most likely the Flush)</comment>
                    <expr_stmt><expr><name pos:line="144" pos:column="21">UnwrittenCharactersFromPreviousCall</name> <op:operator pos:line="144" pos:column="57">=</op:operator> <name pos:line="144" pos:column="59">contentInBuffer</name></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="146" pos:column="17">else
                <block pos:line="147" pos:column="17">{
                    <expr_stmt><expr><call><name pos:line="148" pos:column="21">WriteToOutputStream</name><argument_list pos:line="148" pos:column="40">(<argument><expr><call><name><name pos:line="148" pos:column="41">contentInBuffer</name><op:operator pos:line="148" pos:column="56">.</op:operator><name pos:line="148" pos:column="57">Substring</name></name><argument_list pos:line="148" pos:column="66">(<argument><expr><lit:literal type="number" pos:line="148" pos:column="67">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="148" pos:column="70">contentInBuffer</name><op:operator pos:line="148" pos:column="85">.</op:operator><name pos:line="148" pos:column="86">Length</name></name> <op:operator pos:line="148" pos:column="93">-</op:operator> <lit:literal type="number" pos:line="148" pos:column="95">10</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="149" pos:column="21">UnwrittenCharactersFromPreviousCall</name> <op:operator pos:line="149" pos:column="57">=</op:operator> <call><name><name pos:line="149" pos:column="59">contentInBuffer</name><op:operator pos:line="149" pos:column="74">.</op:operator><name pos:line="149" pos:column="75">Substring</name></name><argument_list pos:line="149" pos:column="84">(<argument><expr><name><name pos:line="149" pos:column="85">contentInBuffer</name><op:operator pos:line="149" pos:column="100">.</op:operator><name pos:line="149" pos:column="101">Length</name></name> <op:operator pos:line="149" pos:column="108">-</op:operator> <lit:literal type="number" pos:line="149" pos:column="110">10</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></else></if>
        }</block></function>

        <function><type><specifier pos:line="154" pos:column="9">public</specifier> <specifier pos:line="154" pos:column="16">override</specifier> <name pos:line="154" pos:column="25">void</name></type> <name pos:line="154" pos:column="30">Flush</name><parameter_list pos:line="154" pos:column="35">()</parameter_list>
        <block pos:line="155" pos:column="9">{
            <if pos:line="156" pos:column="13">if <condition pos:line="156" pos:column="16">(<expr><op:operator pos:line="156" pos:column="17">!</op:operator><call><name><name pos:line="156" pos:column="18">string</name><op:operator pos:line="156" pos:column="24">.</op:operator><name pos:line="156" pos:column="25">IsNullOrEmpty</name></name><argument_list pos:line="156" pos:column="38">(<argument><expr><name pos:line="156" pos:column="39">UnwrittenCharactersFromPreviousCall</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="156" pos:column="76">
            <block pos:line="157" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="158" pos:column="17">string</name></type> <name pos:line="158" pos:column="24">finalContentToWrite</name> <init pos:line="158" pos:column="44">= <expr><name pos:line="158" pos:column="46">UnwrittenCharactersFromPreviousCall</name></expr></init></decl>;</decl_stmt>

                <if pos:line="160" pos:column="17">if <condition pos:line="160" pos:column="20">(<expr><call><name><name pos:line="160" pos:column="21">BodyEndRegex</name><op:operator pos:line="160" pos:column="33">.</op:operator><name pos:line="160" pos:column="34">IsMatch</name></name><argument_list pos:line="160" pos:column="41">(<argument><expr><name pos:line="160" pos:column="42">UnwrittenCharactersFromPreviousCall</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="160" pos:column="79">
                <block pos:line="161" pos:column="17">{
                    <comment type="line" pos:line="162" pos:column="21">// apparently we did seem to match a &lt;/body&gt; tag, which means we can replace the last match with our HTML snippet</comment>
                    <expr_stmt><expr><name pos:line="163" pos:column="21">finalContentToWrite</name> <op:operator pos:line="163" pos:column="41">=</op:operator> <call><name><name pos:line="163" pos:column="43">BodyEndRegex</name><op:operator pos:line="163" pos:column="55">.</op:operator><name pos:line="163" pos:column="56">Replace</name></name><argument_list pos:line="163" pos:column="63">(<argument><expr><name pos:line="163" pos:column="64">UnwrittenCharactersFromPreviousCall</name></expr></argument>, <argument><expr><name pos:line="163" pos:column="101">HtmlSnippet</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="163" pos:column="114">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="165" pos:column="17">else
                <block pos:line="166" pos:column="17">{
                    <comment type="line" pos:line="167" pos:column="21">// there was no &lt;/body&gt; tag found, so we write down a warning to the log</comment>
                    <expr_stmt><expr><call><name><name pos:line="168" pos:column="21">Logger</name><op:operator pos:line="168" pos:column="27">.</op:operator><name pos:line="168" pos:column="28">Warn</name></name><argument_list pos:line="168" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="168" pos:column="33">"Unable to locate '&lt;/body&gt;' with content encoding '{0}' for request '{1}'. The response may be compressed or the markup may actually be missing a '&lt;/body&gt;' tag. See {2} for information on troubleshooting this issue."</lit:literal></expr></argument>, <argument><expr><name><name pos:line="168" pos:column="251">ContentEncoding</name><op:operator pos:line="168" pos:column="266">.</op:operator><name pos:line="168" pos:column="267">EncodingName</name></name></expr></argument>, <argument><expr><name pos:line="168" pos:column="281">CurrentRequestRawUrl</name></expr></argument>, <argument><expr><name pos:line="168" pos:column="303">TroubleshootingDocsUri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>

                <comment type="line" pos:line="171" pos:column="17">// either way, if a replacement has been done or a warning has been written to the logs, the remaining unwritten characters must be written to the output stream</comment>
                <expr_stmt><expr><call><name pos:line="172" pos:column="17">WriteToOutputStream</name><argument_list pos:line="172" pos:column="36">(<argument><expr><name pos:line="172" pos:column="37">finalContentToWrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><call><name><name pos:line="175" pos:column="13">OutputStream</name><op:operator pos:line="175" pos:column="25">.</op:operator><name pos:line="175" pos:column="26">Flush</name></name><argument_list pos:line="175" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="178" pos:column="9">private</specifier> <name pos:line="178" pos:column="17">void</name></type> <name pos:line="178" pos:column="22">WriteToOutputStream</name><parameter_list pos:line="178" pos:column="41">(<param><decl><type><name pos:line="178" pos:column="42">string</name></type> <name pos:line="178" pos:column="49">content</name></decl></param>)</parameter_list>
        <block pos:line="179" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="180" pos:column="13">byte</name><index pos:line="180" pos:column="17">[]</index></type> <name pos:line="180" pos:column="20">outputBuffer</name> <init pos:line="180" pos:column="33">= <expr><call><name><name pos:line="180" pos:column="35">ContentEncoding</name><op:operator pos:line="180" pos:column="50">.</op:operator><name pos:line="180" pos:column="51">GetBytes</name></name><argument_list pos:line="180" pos:column="59">(<argument><expr><name pos:line="180" pos:column="60">content</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="181" pos:column="13">OutputStream</name><op:operator pos:line="181" pos:column="25">.</op:operator><name pos:line="181" pos:column="26">Write</name></name><argument_list pos:line="181" pos:column="31">(<argument><expr><name pos:line="181" pos:column="32">outputBuffer</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="181" pos:column="46">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="181" pos:column="49">outputBuffer</name><op:operator pos:line="181" pos:column="61">.</op:operator><name pos:line="181" pos:column="62">Length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
