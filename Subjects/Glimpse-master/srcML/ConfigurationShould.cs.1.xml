<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.AspNet\Tab\ConfigurationShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Text</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Web</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Glimpse</name><op:operator pos:line="6" pos:column="14">.</op:operator><name pos:line="6" pos:column="15">AspNet</name><op:operator pos:line="6" pos:column="21">.</op:operator><name pos:line="6" pos:column="22">Model</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Glimpse</name><op:operator pos:line="7" pos:column="14">.</op:operator><name pos:line="7" pos:column="15">Core</name><op:operator pos:line="7" pos:column="19">.</op:operator><name pos:line="7" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="8" pos:column="1">using <name pos:line="8" pos:column="7">Moq</name>;</using>
<using pos:line="9" pos:column="1">using <name pos:line="9" pos:column="7">Xunit</name>;</using>

<namespace pos:line="11" pos:column="1">namespace <name><name pos:line="11" pos:column="11">Glimpse</name><op:operator pos:line="11" pos:column="18">.</op:operator><name pos:line="11" pos:column="19">Test</name><op:operator pos:line="11" pos:column="23">.</op:operator><name pos:line="11" pos:column="24">AspNet</name><op:operator pos:line="11" pos:column="30">.</op:operator><name pos:line="11" pos:column="31">Tab</name></name>
<block pos:line="12" pos:column="1">{
    <class><specifier pos:line="13" pos:column="5">public</specifier> class <name pos:line="13" pos:column="18">ConfigurationShould</name>
    <block pos:line="14" pos:column="5">{ 
        <function><type><attribute pos:line="15" pos:column="9">[<expr><name pos:line="15" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="16" pos:column="9">public</specifier> <name pos:line="16" pos:column="16">void</name></type> <name pos:line="16" pos:column="21">HaveProperContextObjectType</name><parameter_list pos:line="16" pos:column="48">()</parameter_list>
        <block pos:line="17" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="18" pos:column="13">var</name></type> <name pos:line="18" pos:column="17">request</name> <init pos:line="18" pos:column="25">= <expr><op:operator pos:line="18" pos:column="27">new</op:operator> <call><name><name pos:line="18" pos:column="31">Glimpse</name><op:operator pos:line="18" pos:column="38">.</op:operator><name pos:line="18" pos:column="39">AspNet</name><op:operator pos:line="18" pos:column="45">.</op:operator><name pos:line="18" pos:column="46">Tab</name><op:operator pos:line="18" pos:column="49">.</op:operator><name pos:line="18" pos:column="50">Configuration</name></name><argument_list pos:line="18" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="20" pos:column="13">Assert</name><op:operator pos:line="20" pos:column="19">.</op:operator><name pos:line="20" pos:column="20">Equal</name></name><argument_list pos:line="20" pos:column="25">(<argument><expr><call><name pos:line="20" pos:column="26">typeof</name><argument_list pos:line="20" pos:column="32">(<argument><expr><name pos:line="20" pos:column="33">HttpContextBase</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="51">request</name><op:operator pos:line="20" pos:column="58">.</op:operator><name pos:line="20" pos:column="59">RequestContextType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="23" pos:column="9">[<expr><name pos:line="23" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="24" pos:column="9">public</specifier> <name pos:line="24" pos:column="16">void</name></type> <name pos:line="24" pos:column="21">UseDefaultLifeCycleSupport</name><parameter_list pos:line="24" pos:column="47">()</parameter_list>
        <block pos:line="25" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="26" pos:column="13">var</name></type> <name pos:line="26" pos:column="17">request</name> <init pos:line="26" pos:column="25">= <expr><op:operator pos:line="26" pos:column="27">new</op:operator> <call><name><name pos:line="26" pos:column="31">Glimpse</name><op:operator pos:line="26" pos:column="38">.</op:operator><name pos:line="26" pos:column="39">AspNet</name><op:operator pos:line="26" pos:column="45">.</op:operator><name pos:line="26" pos:column="46">Tab</name><op:operator pos:line="26" pos:column="49">.</op:operator><name pos:line="26" pos:column="50">Configuration</name></name><argument_list pos:line="26" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="27" pos:column="13">Assert</name><op:operator pos:line="27" pos:column="19">.</op:operator><name pos:line="27" pos:column="20">Equal</name></name><argument_list pos:line="27" pos:column="25">(<argument><expr><name><name pos:line="27" pos:column="26">RuntimeEvent</name><op:operator pos:line="27" pos:column="38">.</op:operator><name pos:line="27" pos:column="39">EndRequest</name></name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="51">request</name><op:operator pos:line="27" pos:column="58">.</op:operator><name pos:line="27" pos:column="59">ExecuteOn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="30" pos:column="9">[<expr><name pos:line="30" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="31" pos:column="9">public</specifier> <name pos:line="31" pos:column="16">void</name></type> <name pos:line="31" pos:column="21">BeNamedConfiguration</name><parameter_list pos:line="31" pos:column="41">()</parameter_list>
        <block pos:line="32" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="33" pos:column="13">var</name></type> <name pos:line="33" pos:column="17">request</name> <init pos:line="33" pos:column="25">= <expr><op:operator pos:line="33" pos:column="27">new</op:operator> <call><name><name pos:line="33" pos:column="31">Glimpse</name><op:operator pos:line="33" pos:column="38">.</op:operator><name pos:line="33" pos:column="39">AspNet</name><op:operator pos:line="33" pos:column="45">.</op:operator><name pos:line="33" pos:column="46">Tab</name><op:operator pos:line="33" pos:column="49">.</op:operator><name pos:line="33" pos:column="50">Configuration</name></name><argument_list pos:line="33" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="34" pos:column="13">Assert</name><op:operator pos:line="34" pos:column="19">.</op:operator><name pos:line="34" pos:column="20">Equal</name></name><argument_list pos:line="34" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="34" pos:column="26">"Configuration"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="43">request</name><op:operator pos:line="34" pos:column="50">.</op:operator><name pos:line="34" pos:column="51">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="37" pos:column="9">[<expr><name pos:line="37" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="38" pos:column="9">public</specifier> <name pos:line="38" pos:column="16">void</name></type> <name pos:line="38" pos:column="21">HaveADocumentationUri</name><parameter_list pos:line="38" pos:column="42">()</parameter_list>
        <block pos:line="39" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="40" pos:column="13">var</name></type> <name pos:line="40" pos:column="17">request</name> <init pos:line="40" pos:column="25">= <expr><op:operator pos:line="40" pos:column="27">new</op:operator> <call><name><name pos:line="40" pos:column="31">Glimpse</name><op:operator pos:line="40" pos:column="38">.</op:operator><name pos:line="40" pos:column="39">AspNet</name><op:operator pos:line="40" pos:column="45">.</op:operator><name pos:line="40" pos:column="46">Tab</name><op:operator pos:line="40" pos:column="49">.</op:operator><name pos:line="40" pos:column="50">Configuration</name></name><argument_list pos:line="40" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="42" pos:column="13">Assert</name><op:operator pos:line="42" pos:column="19">.</op:operator><name pos:line="42" pos:column="20">False</name></name><argument_list pos:line="42" pos:column="25">(<argument><expr><call><name><name pos:line="42" pos:column="26">string</name><op:operator pos:line="42" pos:column="32">.</op:operator><name pos:line="42" pos:column="33">IsNullOrWhiteSpace</name></name><argument_list pos:line="42" pos:column="51">(<argument><expr><name><name pos:line="42" pos:column="52">request</name><op:operator pos:line="42" pos:column="59">.</op:operator><name pos:line="42" pos:column="60">DocumentationUri</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="45" pos:column="9">[<expr><name pos:line="45" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="46" pos:column="9">public</specifier> <name pos:line="46" pos:column="16">void</name></type> <name pos:line="46" pos:column="21">ReturnData</name><parameter_list pos:line="46" pos:column="31">()</parameter_list>
        <block pos:line="47" pos:column="9">{  
            <decl_stmt><decl><type><name pos:line="48" pos:column="13">var</name></type> <name pos:line="48" pos:column="17">contextMock</name> <init pos:line="48" pos:column="29">= <expr><op:operator pos:line="48" pos:column="31">new</op:operator> <call><name><name pos:line="48" pos:column="35">Mock</name><argument_list pos:line="48" pos:column="39">&lt;<argument><name pos:line="48" pos:column="40">ITabContext</name></argument>&gt;</argument_list></name><argument_list pos:line="48" pos:column="52">()</argument_list></call></expr></init></decl>;</decl_stmt> 

            <decl_stmt><decl><type><name pos:line="50" pos:column="13">var</name></type> <name pos:line="50" pos:column="17">request</name> <init pos:line="50" pos:column="25">= <expr><op:operator pos:line="50" pos:column="27">new</op:operator> <call><name><name pos:line="50" pos:column="31">Glimpse</name><op:operator pos:line="50" pos:column="38">.</op:operator><name pos:line="50" pos:column="39">AspNet</name><op:operator pos:line="50" pos:column="45">.</op:operator><name pos:line="50" pos:column="46">Tab</name><op:operator pos:line="50" pos:column="49">.</op:operator><name pos:line="50" pos:column="50">Configuration</name></name><argument_list pos:line="50" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="51" pos:column="13">var</name></type> <name pos:line="51" pos:column="17">result</name> <init pos:line="51" pos:column="24">= <expr><call><name><name pos:line="51" pos:column="26">request</name><op:operator pos:line="51" pos:column="33">.</op:operator><name pos:line="51" pos:column="34">GetData</name></name><argument_list pos:line="51" pos:column="41">(<argument><expr><name><name pos:line="51" pos:column="42">contextMock</name><op:operator pos:line="51" pos:column="53">.</op:operator><name pos:line="51" pos:column="54">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="53" pos:column="13">//TODO: Test checks that the code runs but it doesn't check that its doing its job</comment>

            <expr_stmt><expr><call><name><name pos:line="55" pos:column="13">Assert</name><op:operator pos:line="55" pos:column="19">.</op:operator><name pos:line="55" pos:column="20">NotNull</name></name><argument_list pos:line="55" pos:column="27">(<argument><expr><name pos:line="55" pos:column="28">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="56" pos:column="13">Assert</name><op:operator pos:line="56" pos:column="19">.</op:operator><name pos:line="56" pos:column="20">NotNull</name></name><argument_list pos:line="56" pos:column="27">(<argument><expr><name pos:line="56" pos:column="28">result</name> <op:operator pos:line="56" pos:column="35">as</op:operator> <name pos:line="56" pos:column="38">ConfigurationModel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function> 
    }</block></class>
}</block></namespace>
</unit>
