<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Mvc\AlternateType\AsyncActionInvokerBeginInvokerActionMethodShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Web</name><op:operator pos:line="3" pos:column="17">.</op:operator><name pos:line="3" pos:column="18">Mvc</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Core</name><op:operator pos:line="4" pos:column="19">.</op:operator><name pos:line="4" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Glimpse</name><op:operator pos:line="5" pos:column="14">.</op:operator><name pos:line="5" pos:column="15">Mvc</name><op:operator pos:line="5" pos:column="18">.</op:operator><name pos:line="5" pos:column="19">AlternateType</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Glimpse</name><op:operator pos:line="6" pos:column="14">.</op:operator><name pos:line="6" pos:column="15">Test</name><op:operator pos:line="6" pos:column="19">.</op:operator><name pos:line="6" pos:column="20">Common</name></name>;</using>
<using pos:line="7" pos:column="1">using <name pos:line="7" pos:column="7">Moq</name>;</using>
<using pos:line="8" pos:column="1">using <name pos:line="8" pos:column="7">Xunit</name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">Xunit</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">Extensions</name></name>;</using>

<namespace pos:line="11" pos:column="1">namespace <name><name pos:line="11" pos:column="11">Glimpse</name><op:operator pos:line="11" pos:column="18">.</op:operator><name pos:line="11" pos:column="19">Test</name><op:operator pos:line="11" pos:column="23">.</op:operator><name pos:line="11" pos:column="24">Mvc</name><op:operator pos:line="11" pos:column="27">.</op:operator><name pos:line="11" pos:column="28">AlternateType</name></name>
<block pos:line="12" pos:column="1">{
    <class><specifier pos:line="13" pos:column="5">public</specifier> class <name pos:line="13" pos:column="18">AsyncActionInvokerBeginInvokerActionMethodShould</name>
    <block pos:line="14" pos:column="5">{
        <function><type><attribute pos:line="15" pos:column="9">[<expr><name pos:line="15" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="16" pos:column="9">public</specifier> <name pos:line="16" pos:column="16">void</name></type> <name pos:line="16" pos:column="21">ImplementProperMethod</name><parameter_list pos:line="16" pos:column="42">()</parameter_list>
        <block pos:line="17" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="18" pos:column="13">IAlternateMethod</name></type> <name pos:line="18" pos:column="30">sut</name> <init pos:line="18" pos:column="34">= <expr><op:operator pos:line="18" pos:column="36">new</op:operator> <call><name><name pos:line="18" pos:column="40">AsyncActionInvoker</name><op:operator pos:line="18" pos:column="58">.</op:operator><name pos:line="18" pos:column="59">BeginInvokeActionMethod</name></name><argument_list pos:line="18" pos:column="82">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="20" pos:column="13">Assert</name><op:operator pos:line="20" pos:column="19">.</op:operator><name pos:line="20" pos:column="20">Equal</name></name><argument_list pos:line="20" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="20" pos:column="26">"BeginInvokeActionMethod"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="53">sut</name><op:operator pos:line="20" pos:column="56">.</op:operator><name pos:line="20" pos:column="57">MethodToImplement</name><op:operator pos:line="20" pos:column="74">.</op:operator><name pos:line="20" pos:column="75">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="23" pos:column="9">[<expr><name pos:line="23" pos:column="10">Theory</name></expr><op:operator pos:line="23" pos:column="16">,</op:operator> <expr><name pos:line="23" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="24" pos:column="9">public</specifier> <name pos:line="24" pos:column="16">void</name></type> <name pos:line="24" pos:column="21">ProceedAndReturnWithRuntimePolicyOff</name><parameter_list pos:line="24" pos:column="57">(<param><decl><type><name><name pos:line="24" pos:column="58">AsyncActionInvoker</name><op:operator pos:line="24" pos:column="76">.</op:operator><name pos:line="24" pos:column="77">BeginInvokeActionMethod</name></name></type> <name pos:line="24" pos:column="101">sut</name></decl></param>, <param><decl><type><name pos:line="24" pos:column="106">IAlternateMethodContext</name></type> <name pos:line="24" pos:column="130">context</name></decl></param>)</parameter_list>
        <block pos:line="25" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="26" pos:column="13">context</name><op:operator pos:line="26" pos:column="20">.</op:operator><name pos:line="26" pos:column="21">Setup</name></name><argument_list pos:line="26" pos:column="26">(<argument><expr><lambda><name pos:line="26" pos:column="27">c</name> <op:operator pos:line="26" pos:column="29">=&gt;</op:operator> <name><name pos:line="26" pos:column="32">c</name><op:operator pos:line="26" pos:column="33">.</op:operator><name pos:line="26" pos:column="34">RuntimePolicyStrategy</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="26" pos:column="56">.</op:operator><call><name pos:line="26" pos:column="57">Returns</name><argument_list pos:line="26" pos:column="64">(<argument><expr><lambda><parameter_list pos:line="26" pos:column="65">()</parameter_list> <op:operator pos:line="26" pos:column="68">=&gt;</op:operator> <name><name pos:line="26" pos:column="71">RuntimePolicy</name><op:operator pos:line="26" pos:column="84">.</op:operator><name pos:line="26" pos:column="85">Off</name></name></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="28" pos:column="13">sut</name><op:operator pos:line="28" pos:column="16">.</op:operator><name pos:line="28" pos:column="17">NewImplementation</name></name><argument_list pos:line="28" pos:column="34">(<argument><expr><name pos:line="28" pos:column="35">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="30" pos:column="13">context</name><op:operator pos:line="30" pos:column="20">.</op:operator><name pos:line="30" pos:column="21">Verify</name></name><argument_list pos:line="30" pos:column="27">(<argument><expr><lambda><name pos:line="30" pos:column="28">c</name> <op:operator pos:line="30" pos:column="30">=&gt;</op:operator> <call><name><name pos:line="30" pos:column="33">c</name><op:operator pos:line="30" pos:column="34">.</op:operator><name pos:line="30" pos:column="35">Proceed</name></name><argument_list pos:line="30" pos:column="42">()</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="31" pos:column="13">context</name><op:operator pos:line="31" pos:column="20">.</op:operator><name pos:line="31" pos:column="21">Verify</name></name><argument_list pos:line="31" pos:column="27">(<argument><expr><lambda><name pos:line="31" pos:column="28">c</name> <op:operator pos:line="31" pos:column="30">=&gt;</op:operator> <name><name pos:line="31" pos:column="33">c</name><op:operator pos:line="31" pos:column="34">.</op:operator><name pos:line="31" pos:column="35">Proxy</name></name></lambda></expr></argument>, <argument><expr><call><name><name pos:line="31" pos:column="42">Times</name><op:operator pos:line="31" pos:column="47">.</op:operator><name pos:line="31" pos:column="48">Never</name></name><argument_list pos:line="31" pos:column="53">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="34" pos:column="9">[<expr><name pos:line="34" pos:column="10">Theory</name></expr><op:operator pos:line="34" pos:column="16">,</op:operator> <expr><name pos:line="34" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="35" pos:column="9">public</specifier> <name pos:line="35" pos:column="16">void</name></type> <name pos:line="35" pos:column="21">StartTimingExecution</name><parameter_list pos:line="35" pos:column="41">(<param><decl><type><name><name pos:line="35" pos:column="42">AsyncActionInvoker</name><op:operator pos:line="35" pos:column="60">.</op:operator><name pos:line="35" pos:column="61">BeginInvokeActionMethod</name></name></type> <name pos:line="35" pos:column="85">sut</name></decl></param>, <param><decl><type><name pos:line="35" pos:column="90">IAlternateMethodContext</name></type> <name pos:line="35" pos:column="114">context</name></decl></param>, <param><decl><type><name pos:line="35" pos:column="123">IActionInvokerStateMixin</name></type> <name pos:line="35" pos:column="148">mixin</name></decl></param>)</parameter_list>
        <block pos:line="36" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="37" pos:column="13">context</name><op:operator pos:line="37" pos:column="20">.</op:operator><name pos:line="37" pos:column="21">Setup</name></name><argument_list pos:line="37" pos:column="26">(<argument><expr><lambda><name pos:line="37" pos:column="27">c</name> <op:operator pos:line="37" pos:column="29">=&gt;</op:operator> <name><name pos:line="37" pos:column="32">c</name><op:operator pos:line="37" pos:column="33">.</op:operator><name pos:line="37" pos:column="34">Proxy</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="37" pos:column="40">.</op:operator><call><name pos:line="37" pos:column="41">Returns</name><argument_list pos:line="37" pos:column="48">(<argument><expr><name pos:line="37" pos:column="49">mixin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="38" pos:column="13">context</name><op:operator pos:line="38" pos:column="20">.</op:operator><name pos:line="38" pos:column="21">Setup</name></name><argument_list pos:line="38" pos:column="26">(<argument><expr><lambda><name pos:line="38" pos:column="27">c</name> <op:operator pos:line="38" pos:column="29">=&gt;</op:operator> <name><name pos:line="38" pos:column="32">c</name><op:operator pos:line="38" pos:column="33">.</op:operator><name pos:line="38" pos:column="34">Arguments</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="38" pos:column="44">.</op:operator><call><name pos:line="38" pos:column="45">Returns</name><argument_list pos:line="38" pos:column="52">(<argument><expr><op:operator pos:line="38" pos:column="53">new</op:operator> <name><name pos:line="38" pos:column="57">object</name><index pos:line="38" pos:column="63">[]</index></name>
                                                            <block pos:line="39" pos:column="61">{
                                                                <expr><op:operator pos:line="40" pos:column="65">new</op:operator> <call><name pos:line="40" pos:column="69">ControllerContext</name><argument_list pos:line="40" pos:column="86">()</argument_list></call></expr><op:operator pos:line="40" pos:column="88">,</op:operator>
                                                                <expr><op:operator pos:line="41" pos:column="65">new</op:operator> <call><name><name pos:line="41" pos:column="69">Mock</name><argument_list pos:line="41" pos:column="73">&lt;<argument><name pos:line="41" pos:column="74">ActionDescriptor</name></argument>&gt;</argument_list></name><argument_list pos:line="41" pos:column="91">()</argument_list></call><op:operator pos:line="41" pos:column="93">.</op:operator><name pos:line="41" pos:column="94">Object</name></expr><op:operator pos:line="41" pos:column="100">,</op:operator>
                                                                <expr><op:operator pos:line="42" pos:column="65">new</op:operator> <call><name><name pos:line="42" pos:column="69">Dictionary</name><argument_list pos:line="42" pos:column="79">&lt;<argument><name pos:line="42" pos:column="80">string</name></argument>, <argument><name pos:line="42" pos:column="88">object</name></argument>&gt;</argument_list></name><argument_list pos:line="42" pos:column="95">()</argument_list></call></expr><op:operator pos:line="42" pos:column="97">,</op:operator>
                                                                <expr><op:operator pos:line="43" pos:column="65">new</op:operator> <call><name pos:line="43" pos:column="69">AsyncCallback</name><argument_list pos:line="43" pos:column="82">(<argument><expr pos:line="43" pos:column="83">delegate <block pos:line="43" pos:column="92">{ }</block></expr></argument>)</argument_list></call></expr><op:operator pos:line="43" pos:column="96">,</op:operator>
                                                                <expr><lit:literal type="string" pos:line="44" pos:column="65">"state"</lit:literal></expr>
                                                            }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="47" pos:column="13">sut</name><op:operator pos:line="47" pos:column="16">.</op:operator><name pos:line="47" pos:column="17">NewImplementation</name></name><argument_list pos:line="47" pos:column="34">(<argument><expr><name pos:line="47" pos:column="35">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="49" pos:column="13">context</name><op:operator pos:line="49" pos:column="20">.</op:operator><name pos:line="49" pos:column="21">Verify</name></name><argument_list pos:line="49" pos:column="27">(<argument><expr><lambda><name pos:line="49" pos:column="28">c</name> <op:operator pos:line="49" pos:column="30">=&gt;</op:operator> <call><name><name pos:line="49" pos:column="33">c</name><op:operator pos:line="49" pos:column="34">.</op:operator><name pos:line="49" pos:column="35">Proceed</name></name><argument_list pos:line="49" pos:column="42">()</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="50" pos:column="13">context</name><op:operator pos:line="50" pos:column="20">.</op:operator><name pos:line="50" pos:column="21">Verify</name></name><argument_list pos:line="50" pos:column="27">(<argument><expr><lambda><name pos:line="50" pos:column="28">c</name> <op:operator pos:line="50" pos:column="30">=&gt;</op:operator> <name><name pos:line="50" pos:column="33">c</name><op:operator pos:line="50" pos:column="34">.</op:operator><name pos:line="50" pos:column="35">Proxy</name></name></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="51" pos:column="13">mixin</name><op:operator pos:line="51" pos:column="18">.</op:operator><name pos:line="51" pos:column="19">VerifySet</name></name><argument_list pos:line="51" pos:column="28">(<argument><expr><lambda><name pos:line="51" pos:column="29">m</name> <op:operator pos:line="51" pos:column="31">=&gt;</op:operator> <name><name pos:line="51" pos:column="34">m</name><op:operator pos:line="51" pos:column="35">.</op:operator><name pos:line="51" pos:column="36">Offset</name></name> <op:operator pos:line="51" pos:column="43">=</op:operator> <call><name><name pos:line="51" pos:column="45">It</name><op:operator pos:line="51" pos:column="47">.</op:operator><name><name pos:line="51" pos:column="48">IsAny</name><argument_list pos:line="51" pos:column="53">&lt;<argument><name pos:line="51" pos:column="54">TimeSpan</name></argument>&gt;</argument_list></name></name><argument_list pos:line="51" pos:column="63">()</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
