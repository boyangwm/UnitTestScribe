<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Core\SerializationConverter\PluginMetadataConverterShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Glimpse</name><op:operator pos:line="3" pos:column="14">.</op:operator><name pos:line="3" pos:column="15">Core</name><op:operator pos:line="3" pos:column="19">.</op:operator><name pos:line="3" pos:column="20">Framework</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Core</name><op:operator pos:line="4" pos:column="19">.</op:operator><name pos:line="4" pos:column="20">SerializationConverter</name></name>;</using>
<using pos:line="5" pos:column="1">using <name pos:line="5" pos:column="7">Xunit</name>;</using>

<namespace pos:line="7" pos:column="1">namespace <name><name pos:line="7" pos:column="11">Glimpse</name><op:operator pos:line="7" pos:column="18">.</op:operator><name pos:line="7" pos:column="19">Test</name><op:operator pos:line="7" pos:column="23">.</op:operator><name pos:line="7" pos:column="24">Core</name><op:operator pos:line="7" pos:column="28">.</op:operator><name pos:line="7" pos:column="29">SerializationConverter</name></name>
<block pos:line="8" pos:column="1">{
    <class><specifier pos:line="9" pos:column="5">public</specifier> class <name pos:line="9" pos:column="18">PluginMetadataConverterShould</name>
    <block pos:line="10" pos:column="5">{
        <function><type><attribute pos:line="11" pos:column="9">[<expr><name pos:line="11" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="12" pos:column="9">public</specifier> <name pos:line="12" pos:column="16">void</name></type> <name pos:line="12" pos:column="21">ConvertAPluginMetadataObject</name><parameter_list pos:line="12" pos:column="49">()</parameter_list>
        <block pos:line="13" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="14" pos:column="13">var</name></type> <name pos:line="14" pos:column="17">metadata</name> <init pos:line="14" pos:column="26">= <expr><op:operator pos:line="14" pos:column="28">new</op:operator> <name pos:line="14" pos:column="32">TabMetadata</name><block pos:line="14" pos:column="43">{<expr><name pos:line="14" pos:column="44">DocumentationUri</name> <op:operator pos:line="14" pos:column="61">=</op:operator> <lit:literal type="string" pos:line="14" pos:column="63">"anything"</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="16" pos:column="13">var</name></type> <name pos:line="16" pos:column="17">converter</name> <init pos:line="16" pos:column="27">= <expr><op:operator pos:line="16" pos:column="29">new</op:operator> <call><name pos:line="16" pos:column="33">TabMetadataConverter</name><argument_list pos:line="16" pos:column="53">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="18" pos:column="13">var</name></type> <name pos:line="18" pos:column="17">obj</name> <init pos:line="18" pos:column="21">= <expr><call><name><name pos:line="18" pos:column="23">converter</name><op:operator pos:line="18" pos:column="32">.</op:operator><name pos:line="18" pos:column="33">Convert</name></name><argument_list pos:line="18" pos:column="40">(<argument><expr><name pos:line="18" pos:column="41">metadata</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="20" pos:column="13">var</name></type> <name pos:line="20" pos:column="17">result</name> <init pos:line="20" pos:column="24">= <expr><name pos:line="20" pos:column="26">obj</name> <op:operator pos:line="20" pos:column="30">as</op:operator> <name><name pos:line="20" pos:column="33">IDictionary</name><argument_list pos:line="20" pos:column="44">&lt;<argument><name pos:line="20" pos:column="45">string</name></argument>, <argument><name pos:line="20" pos:column="53">object</name></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="22" pos:column="13">Assert</name><op:operator pos:line="22" pos:column="19">.</op:operator><name pos:line="22" pos:column="20">NotNull</name></name><argument_list pos:line="22" pos:column="27">(<argument><expr><name pos:line="22" pos:column="28">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="23" pos:column="13">Assert</name><op:operator pos:line="23" pos:column="19">.</op:operator><name pos:line="23" pos:column="20">True</name></name><argument_list pos:line="23" pos:column="24">(<argument><expr><call><name><name pos:line="23" pos:column="25">result</name><op:operator pos:line="23" pos:column="31">.</op:operator><name pos:line="23" pos:column="32">ContainsKey</name></name><argument_list pos:line="23" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="23" pos:column="44">"documentationUri"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="24" pos:column="13">Assert</name><op:operator pos:line="24" pos:column="19">.</op:operator><name pos:line="24" pos:column="20">False</name></name><argument_list pos:line="24" pos:column="25">(<argument><expr><call><name><name pos:line="24" pos:column="26">result</name><op:operator pos:line="24" pos:column="32">.</op:operator><name pos:line="24" pos:column="33">ContainsKey</name></name><argument_list pos:line="24" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="24" pos:column="45">"hasMetadata"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="27" pos:column="9">[<expr><name pos:line="27" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="28" pos:column="9">public</specifier> <name pos:line="28" pos:column="16">void</name></type> <name pos:line="28" pos:column="21">ThrowExceptionWithInvalidInput</name><parameter_list pos:line="28" pos:column="51">()</parameter_list>
        <block pos:line="29" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="30" pos:column="13">var</name></type> <name pos:line="30" pos:column="17">converter</name> <init pos:line="30" pos:column="27">= <expr><op:operator pos:line="30" pos:column="29">new</op:operator> <call><name pos:line="30" pos:column="33">TabMetadataConverter</name><argument_list pos:line="30" pos:column="53">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="32" pos:column="13">Assert</name><op:operator pos:line="32" pos:column="19">.</op:operator><name><name pos:line="32" pos:column="20">Throws</name><argument_list pos:line="32" pos:column="26">&lt;<argument><name pos:line="32" pos:column="27">InvalidCastException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="32" pos:column="48">(<argument><expr><lambda><parameter_list pos:line="32" pos:column="49">()</parameter_list><op:operator pos:line="32" pos:column="51">=&gt;</op:operator> <call><name><name pos:line="32" pos:column="54">converter</name><op:operator pos:line="32" pos:column="63">.</op:operator><name pos:line="32" pos:column="64">Convert</name></name><argument_list pos:line="32" pos:column="71">(<argument><expr><lit:literal type="string" pos:line="32" pos:column="72">"bad input"</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
