<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Mvc\AlternateType\ValueProviderFactoryGetValueProviderShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Web</name><op:operator pos:line="3" pos:column="17">.</op:operator><name pos:line="3" pos:column="18">Mvc</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Core</name><op:operator pos:line="4" pos:column="19">.</op:operator><name pos:line="4" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Glimpse</name><op:operator pos:line="5" pos:column="14">.</op:operator><name pos:line="5" pos:column="15">Test</name><op:operator pos:line="5" pos:column="19">.</op:operator><name pos:line="5" pos:column="20">Common</name></name>;</using>
<using pos:line="6" pos:column="1">using <name pos:line="6" pos:column="7">Moq</name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Ploeh</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">AutoFixture</name><op:operator pos:line="7" pos:column="24">.</op:operator><name pos:line="7" pos:column="25">Xunit</name></name>;</using>
<using pos:line="8" pos:column="1">using <name pos:line="8" pos:column="7">Xunit</name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">Xunit</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">Extensions</name></name>;</using>
<using pos:line="10" pos:column="1">using <name pos:line="10" pos:column="7">ValueProviderFactory</name> <init pos:line="10" pos:column="28">= <expr><name><name pos:line="10" pos:column="30">Glimpse</name><op:operator pos:line="10" pos:column="37">.</op:operator><name pos:line="10" pos:column="38">Mvc</name><op:operator pos:line="10" pos:column="41">.</op:operator><name pos:line="10" pos:column="42">AlternateType</name><op:operator pos:line="10" pos:column="55">.</op:operator><name pos:line="10" pos:column="56">ValueProviderFactory</name></name></expr></init>;</using>

<namespace pos:line="12" pos:column="1">namespace <name><name pos:line="12" pos:column="11">Glimpse</name><op:operator pos:line="12" pos:column="18">.</op:operator><name pos:line="12" pos:column="19">Test</name><op:operator pos:line="12" pos:column="23">.</op:operator><name pos:line="12" pos:column="24">Mvc</name><op:operator pos:line="12" pos:column="27">.</op:operator><name pos:line="12" pos:column="28">AlternateType</name></name>
<block pos:line="13" pos:column="1">{
    <class><specifier pos:line="14" pos:column="5">public</specifier> class <name pos:line="14" pos:column="18">ValueProviderFactoryGetValueProviderShould</name>
    <block pos:line="15" pos:column="5">{
        <function><type><attribute pos:line="16" pos:column="9">[<expr><name pos:line="16" pos:column="10">Theory</name></expr><op:operator pos:line="16" pos:column="16">,</op:operator> <expr><name pos:line="16" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="17" pos:column="9">public</specifier> <name pos:line="17" pos:column="16">void</name></type> <name pos:line="17" pos:column="21">ImplementProperMethod</name><parameter_list pos:line="17" pos:column="42">(<param><decl><type><name><name pos:line="17" pos:column="43">ValueProviderFactory</name><op:operator pos:line="17" pos:column="63">.</op:operator><name pos:line="17" pos:column="64">GetValueProvider</name></name></type> <name pos:line="17" pos:column="81">sut</name></decl></param>)</parameter_list>
        <block pos:line="18" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="19" pos:column="13">Assert</name><op:operator pos:line="19" pos:column="19">.</op:operator><name pos:line="19" pos:column="20">Equal</name></name><argument_list pos:line="19" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="19" pos:column="26">"GetValueProvider"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="46">sut</name><op:operator pos:line="19" pos:column="49">.</op:operator><name pos:line="19" pos:column="50">MethodToImplement</name><op:operator pos:line="19" pos:column="67">.</op:operator><name pos:line="19" pos:column="68">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="22" pos:column="9">[<expr><name pos:line="22" pos:column="10">Theory</name></expr><op:operator pos:line="22" pos:column="16">,</op:operator> <expr><name pos:line="22" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="23" pos:column="9">public</specifier> <name pos:line="23" pos:column="16">void</name></type> <name pos:line="23" pos:column="21">ProceedAndReturnWithRuntimePolicyOff</name><parameter_list pos:line="23" pos:column="57">(<param><decl><type><name><name pos:line="23" pos:column="58">ValueProviderFactory</name><op:operator pos:line="23" pos:column="78">.</op:operator><name pos:line="23" pos:column="79">GetValueProvider</name></name></type> <name pos:line="23" pos:column="96">sut</name></decl></param>, <param><decl><type><name pos:line="23" pos:column="101">IAlternateMethodContext</name></type> <name pos:line="23" pos:column="125">context</name></decl></param>)</parameter_list>
        <block pos:line="24" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="25" pos:column="13">context</name><op:operator pos:line="25" pos:column="20">.</op:operator><name pos:line="25" pos:column="21">Setup</name></name><argument_list pos:line="25" pos:column="26">(<argument><expr><lambda><name pos:line="25" pos:column="27">c</name> <op:operator pos:line="25" pos:column="29">=&gt;</op:operator> <name><name pos:line="25" pos:column="32">c</name><op:operator pos:line="25" pos:column="33">.</op:operator><name pos:line="25" pos:column="34">RuntimePolicyStrategy</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="25" pos:column="56">.</op:operator><call><name pos:line="25" pos:column="57">Returns</name><argument_list pos:line="25" pos:column="64">(<argument><expr><lambda><parameter_list pos:line="25" pos:column="65">()</parameter_list> <op:operator pos:line="25" pos:column="68">=&gt;</op:operator> <name><name pos:line="25" pos:column="71">RuntimePolicy</name><op:operator pos:line="25" pos:column="84">.</op:operator><name pos:line="25" pos:column="85">Off</name></name></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="27" pos:column="13">sut</name><op:operator pos:line="27" pos:column="16">.</op:operator><name pos:line="27" pos:column="17">NewImplementation</name></name><argument_list pos:line="27" pos:column="34">(<argument><expr><name pos:line="27" pos:column="35">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="29" pos:column="13">context</name><op:operator pos:line="29" pos:column="20">.</op:operator><name pos:line="29" pos:column="21">Verify</name></name><argument_list pos:line="29" pos:column="27">(<argument><expr><lambda><name pos:line="29" pos:column="28">c</name> <op:operator pos:line="29" pos:column="30">=&gt;</op:operator> <call><name><name pos:line="29" pos:column="33">c</name><op:operator pos:line="29" pos:column="34">.</op:operator><name pos:line="29" pos:column="35">Proceed</name></name><argument_list pos:line="29" pos:column="42">()</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="30" pos:column="13">context</name><op:operator pos:line="30" pos:column="20">.</op:operator><name pos:line="30" pos:column="21">MessageBroker</name><op:operator pos:line="30" pos:column="34">.</op:operator><name pos:line="30" pos:column="35">Verify</name></name><argument_list pos:line="30" pos:column="41">(<argument><expr><lambda><name pos:line="30" pos:column="42">mb</name> <op:operator pos:line="30" pos:column="45">=&gt;</op:operator> <call><name><name pos:line="30" pos:column="48">mb</name><op:operator pos:line="30" pos:column="50">.</op:operator><name pos:line="30" pos:column="51">Publish</name></name><argument_list pos:line="30" pos:column="58">(<argument><expr><call><name><name pos:line="30" pos:column="59">It</name><op:operator pos:line="30" pos:column="61">.</op:operator><name><name pos:line="30" pos:column="62">IsAny</name><argument_list pos:line="30" pos:column="67">&lt;<argument><name pos:line="30" pos:column="68">object</name></argument>&gt;</argument_list></name></name><argument_list pos:line="30" pos:column="75">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="30" pos:column="80">Times</name><op:operator pos:line="30" pos:column="85">.</op:operator><name pos:line="30" pos:column="86">Never</name></name><argument_list pos:line="30" pos:column="91">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="33" pos:column="9">[<expr><name pos:line="33" pos:column="10">Theory</name></expr><op:operator pos:line="33" pos:column="16">,</op:operator> <expr><name pos:line="33" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="34" pos:column="9">public</specifier> <name pos:line="34" pos:column="16">void</name></type> <name pos:line="34" pos:column="21">ProceedWithTimerWithNullReturnValue</name><parameter_list pos:line="34" pos:column="56">(<param><decl><type><name><name pos:line="34" pos:column="57">ValueProviderFactory</name><op:operator pos:line="34" pos:column="77">.</op:operator><name pos:line="34" pos:column="78">GetValueProvider</name></name></type> <name pos:line="34" pos:column="95">sut</name></decl></param>, <param><decl><type><name pos:line="34" pos:column="100">IAlternateMethodContext</name></type> <name pos:line="34" pos:column="124">context</name></decl></param>, <param><decl><type><name pos:line="34" pos:column="133">ControllerContext</name></type> <name pos:line="34" pos:column="151">arg1</name></decl></param>)</parameter_list>
        <block pos:line="35" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="36" pos:column="13">context</name><op:operator pos:line="36" pos:column="20">.</op:operator><name pos:line="36" pos:column="21">Setup</name></name><argument_list pos:line="36" pos:column="26">(<argument><expr><lambda><name pos:line="36" pos:column="27">c</name> <op:operator pos:line="36" pos:column="29">=&gt;</op:operator> <name><name pos:line="36" pos:column="32">c</name><op:operator pos:line="36" pos:column="33">.</op:operator><name pos:line="36" pos:column="34">Arguments</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="36" pos:column="44">.</op:operator><call><name pos:line="36" pos:column="45">Returns</name><argument_list pos:line="36" pos:column="52">(<argument><expr><op:operator pos:line="36" pos:column="53">new</op:operator> <name><name pos:line="36" pos:column="57">object</name><index pos:line="36" pos:column="63">[]</index></name> <block pos:line="36" pos:column="66">{ <expr><name pos:line="36" pos:column="68">arg1</name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="37" pos:column="13">context</name><op:operator pos:line="37" pos:column="20">.</op:operator><name pos:line="37" pos:column="21">Setup</name></name><argument_list pos:line="37" pos:column="26">(<argument><expr><lambda><name pos:line="37" pos:column="27">c</name> <op:operator pos:line="37" pos:column="29">=&gt;</op:operator> <name><name pos:line="37" pos:column="32">c</name><op:operator pos:line="37" pos:column="33">.</op:operator><name pos:line="37" pos:column="34">ReturnValue</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="37" pos:column="46">.</op:operator><call><name pos:line="37" pos:column="47">Returns</name><argument_list pos:line="37" pos:column="54">(<argument><expr><name pos:line="37" pos:column="55">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="39" pos:column="13">sut</name><op:operator pos:line="39" pos:column="16">.</op:operator><name pos:line="39" pos:column="17">NewImplementation</name></name><argument_list pos:line="39" pos:column="34">(<argument><expr><name pos:line="39" pos:column="35">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="41" pos:column="13">context</name><op:operator pos:line="41" pos:column="20">.</op:operator><name pos:line="41" pos:column="21">TimerStrategy</name></name><argument_list pos:line="41" pos:column="34">()</argument_list></call><op:operator pos:line="41" pos:column="36">.</op:operator><call><name pos:line="41" pos:column="37">Verify</name><argument_list pos:line="41" pos:column="43">(<argument><expr><lambda><name pos:line="41" pos:column="44">c</name> <op:operator pos:line="41" pos:column="46">=&gt;</op:operator> <call><name><name pos:line="41" pos:column="49">c</name><op:operator pos:line="41" pos:column="50">.</op:operator><name pos:line="41" pos:column="51">Time</name></name><argument_list pos:line="41" pos:column="55">(<argument><expr><call><name><name pos:line="41" pos:column="56">It</name><op:operator pos:line="41" pos:column="58">.</op:operator><name><name pos:line="41" pos:column="59">IsAny</name><argument_list pos:line="41" pos:column="64">&lt;<argument><name pos:line="41" pos:column="65">Action</name></argument>&gt;</argument_list></name></name><argument_list pos:line="41" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="42" pos:column="13">context</name><op:operator pos:line="42" pos:column="20">.</op:operator><name pos:line="42" pos:column="21">Verify</name></name><argument_list pos:line="42" pos:column="27">(<argument><expr><lambda><name pos:line="42" pos:column="28">c</name> <op:operator pos:line="42" pos:column="30">=&gt;</op:operator> <name><name pos:line="42" pos:column="33">c</name><op:operator pos:line="42" pos:column="34">.</op:operator><name pos:line="42" pos:column="35">ReturnValue</name></name></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>            
        }</block></function>

        <function><type><attribute pos:line="45" pos:column="9">[<expr><name pos:line="45" pos:column="10">Theory</name></expr><op:operator pos:line="45" pos:column="16">,</op:operator> <expr><name pos:line="45" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="46" pos:column="9">public</specifier> <name pos:line="46" pos:column="16">void</name></type> <name pos:line="46" pos:column="21">ProceedWithTimerWithIUnvalidatedValueProviderReturnValue</name><parameter_list pos:line="46" pos:column="77">(<param><decl><type><attribute pos:line="46" pos:column="78">[<expr><name pos:line="46" pos:column="79">Frozen</name></expr>]</attribute> <name pos:line="46" pos:column="87">IProxyFactory</name></type> <name pos:line="46" pos:column="101">proxyFactory</name></decl></param>, <param><decl><type><name><name pos:line="46" pos:column="115">ValueProviderFactory</name><op:operator pos:line="46" pos:column="135">.</op:operator><name pos:line="46" pos:column="136">GetValueProvider</name></name></type> <name pos:line="46" pos:column="153">sut</name></decl></param>, <param><decl><type><name pos:line="46" pos:column="158">IAlternateMethodContext</name></type> <name pos:line="46" pos:column="182">context</name></decl></param>, <param><decl><type><name pos:line="46" pos:column="191">ControllerContext</name></type> <name pos:line="46" pos:column="209">arg1</name></decl></param>, <param><decl><type><name pos:line="46" pos:column="215">IUnvalidatedValueProvider</name></type> <name pos:line="46" pos:column="241">returnValue</name></decl></param>)</parameter_list>
        <block pos:line="47" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="48" pos:column="13">context</name><op:operator pos:line="48" pos:column="20">.</op:operator><name pos:line="48" pos:column="21">Setup</name></name><argument_list pos:line="48" pos:column="26">(<argument><expr><lambda><name pos:line="48" pos:column="27">c</name> <op:operator pos:line="48" pos:column="29">=&gt;</op:operator> <name><name pos:line="48" pos:column="32">c</name><op:operator pos:line="48" pos:column="33">.</op:operator><name pos:line="48" pos:column="34">Arguments</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="48" pos:column="44">.</op:operator><call><name pos:line="48" pos:column="45">Returns</name><argument_list pos:line="48" pos:column="52">(<argument><expr><op:operator pos:line="48" pos:column="53">new</op:operator> <name><name pos:line="48" pos:column="57">object</name><index pos:line="48" pos:column="63">[]</index></name> <block pos:line="48" pos:column="66">{ <expr><name pos:line="48" pos:column="68">arg1</name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="49" pos:column="13">context</name><op:operator pos:line="49" pos:column="20">.</op:operator><name pos:line="49" pos:column="21">Setup</name></name><argument_list pos:line="49" pos:column="26">(<argument><expr><lambda><name pos:line="49" pos:column="27">c</name> <op:operator pos:line="49" pos:column="29">=&gt;</op:operator> <name><name pos:line="49" pos:column="32">c</name><op:operator pos:line="49" pos:column="33">.</op:operator><name pos:line="49" pos:column="34">ReturnValue</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="49" pos:column="46">.</op:operator><call><name pos:line="49" pos:column="47">Returns</name><argument_list pos:line="49" pos:column="54">(<argument><expr><name pos:line="49" pos:column="55">returnValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="50" pos:column="13">proxyFactory</name><op:operator pos:line="50" pos:column="25">.</op:operator><name pos:line="50" pos:column="26">Setup</name></name><argument_list pos:line="50" pos:column="31">(<argument><expr><lambda><name pos:line="50" pos:column="32">pf</name> <op:operator pos:line="50" pos:column="35">=&gt;</op:operator> <call><name><name pos:line="50" pos:column="38">pf</name><op:operator pos:line="50" pos:column="40">.</op:operator><name><name pos:line="50" pos:column="41">IsWrapInterfaceEligible</name><argument_list pos:line="50" pos:column="64">&lt;<argument><name pos:line="50" pos:column="65">IUnvalidatedValueProvider</name></argument>&gt;</argument_list></name></name><argument_list pos:line="50" pos:column="91">(<argument><expr><call><name pos:line="50" pos:column="92">typeof</name><argument_list pos:line="50" pos:column="98">(<argument><expr><name pos:line="50" pos:column="99">IUnvalidatedValueProvider</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="50" pos:column="127">.</op:operator><call><name pos:line="50" pos:column="128">Returns</name><argument_list pos:line="50" pos:column="135">(<argument><expr><lit:literal type="boolean" pos:line="50" pos:column="136">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="51" pos:column="13">proxyFactory</name><op:operator pos:line="51" pos:column="25">.</op:operator><name pos:line="51" pos:column="26">Setup</name></name><argument_list pos:line="51" pos:column="31">(<argument><expr><lambda><name pos:line="51" pos:column="32">pf</name> <op:operator pos:line="51" pos:column="35">=&gt;</op:operator> <call><name><name pos:line="51" pos:column="38">pf</name><op:operator pos:line="51" pos:column="40">.</op:operator><name pos:line="51" pos:column="41">WrapInterface</name></name><argument_list pos:line="51" pos:column="54">(<argument><expr><call><name><name pos:line="51" pos:column="55">It</name><op:operator pos:line="51" pos:column="57">.</op:operator><name><name pos:line="51" pos:column="58">IsAny</name><argument_list pos:line="51" pos:column="63">&lt;<argument><name pos:line="51" pos:column="64">IUnvalidatedValueProvider</name></argument>&gt;</argument_list></name></name><argument_list pos:line="51" pos:column="90">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="51" pos:column="94">It</name><op:operator pos:line="51" pos:column="96">.</op:operator><name><name pos:line="51" pos:column="97">IsAny</name><argument_list pos:line="51" pos:column="102">&lt;<argument><name><name pos:line="51" pos:column="103">IEnumerable</name><argument_list pos:line="51" pos:column="114">&lt;<argument><name pos:line="51" pos:column="115">IAlternateMethod</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name><argument_list pos:line="51" pos:column="133">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="51" pos:column="137">.</op:operator><call><name pos:line="51" pos:column="138">Returns</name><argument_list pos:line="51" pos:column="145">(<argument><expr><name pos:line="51" pos:column="146">returnValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="53" pos:column="13">sut</name><op:operator pos:line="53" pos:column="16">.</op:operator><name pos:line="53" pos:column="17">NewImplementation</name></name><argument_list pos:line="53" pos:column="34">(<argument><expr><name pos:line="53" pos:column="35">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="55" pos:column="13">context</name><op:operator pos:line="55" pos:column="20">.</op:operator><name pos:line="55" pos:column="21">TimerStrategy</name></name><argument_list pos:line="55" pos:column="34">()</argument_list></call><op:operator pos:line="55" pos:column="36">.</op:operator><call><name pos:line="55" pos:column="37">Verify</name><argument_list pos:line="55" pos:column="43">(<argument><expr><lambda><name pos:line="55" pos:column="44">c</name> <op:operator pos:line="55" pos:column="46">=&gt;</op:operator> <call><name><name pos:line="55" pos:column="49">c</name><op:operator pos:line="55" pos:column="50">.</op:operator><name pos:line="55" pos:column="51">Time</name></name><argument_list pos:line="55" pos:column="55">(<argument><expr><call><name><name pos:line="55" pos:column="56">It</name><op:operator pos:line="55" pos:column="58">.</op:operator><name><name pos:line="55" pos:column="59">IsAny</name><argument_list pos:line="55" pos:column="64">&lt;<argument><name pos:line="55" pos:column="65">Action</name></argument>&gt;</argument_list></name></name><argument_list pos:line="55" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="56" pos:column="13">context</name><op:operator pos:line="56" pos:column="20">.</op:operator><name pos:line="56" pos:column="21">Verify</name></name><argument_list pos:line="56" pos:column="27">(<argument><expr><lambda><name pos:line="56" pos:column="28">c</name> <op:operator pos:line="56" pos:column="30">=&gt;</op:operator> <name><name pos:line="56" pos:column="33">c</name><op:operator pos:line="56" pos:column="34">.</op:operator><name pos:line="56" pos:column="35">ReturnValue</name></name></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="57" pos:column="13">context</name><op:operator pos:line="57" pos:column="20">.</op:operator><name pos:line="57" pos:column="21">VerifySet</name></name><argument_list pos:line="57" pos:column="30">(<argument><expr><lambda><name pos:line="57" pos:column="31">c</name> <op:operator pos:line="57" pos:column="33">=&gt;</op:operator> <name><name pos:line="57" pos:column="36">c</name><op:operator pos:line="57" pos:column="37">.</op:operator><name pos:line="57" pos:column="38">ReturnValue</name></name> <op:operator pos:line="57" pos:column="50">=</op:operator> <call><name><name pos:line="57" pos:column="52">It</name><op:operator pos:line="57" pos:column="54">.</op:operator><name><name pos:line="57" pos:column="55">IsAny</name><argument_list pos:line="57" pos:column="60">&lt;<argument><name pos:line="57" pos:column="61">IUnvalidatedValueProvider</name></argument>&gt;</argument_list></name></name><argument_list pos:line="57" pos:column="87">()</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="60" pos:column="9">[<expr><name pos:line="60" pos:column="10">Theory</name></expr><op:operator pos:line="60" pos:column="16">,</op:operator> <expr><name pos:line="60" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="61" pos:column="9">public</specifier> <name pos:line="61" pos:column="16">void</name></type> <name pos:line="61" pos:column="21">ProceedWithTimerWithIValueProviderReturnValue</name><parameter_list pos:line="61" pos:column="66">(<param><decl><type><attribute pos:line="61" pos:column="67">[<expr><name pos:line="61" pos:column="68">Frozen</name></expr>]</attribute> <name pos:line="61" pos:column="76">IProxyFactory</name></type> <name pos:line="61" pos:column="90">proxyFactory</name></decl></param>, <param><decl><type><name><name pos:line="61" pos:column="104">ValueProviderFactory</name><op:operator pos:line="61" pos:column="124">.</op:operator><name pos:line="61" pos:column="125">GetValueProvider</name></name></type> <name pos:line="61" pos:column="142">sut</name></decl></param>, <param><decl><type><name pos:line="61" pos:column="147">IAlternateMethodContext</name></type> <name pos:line="61" pos:column="171">context</name></decl></param>, <param><decl><type><name pos:line="61" pos:column="180">ControllerContext</name></type> <name pos:line="61" pos:column="198">arg1</name></decl></param>, <param><decl><type><name pos:line="61" pos:column="204">IValueProvider</name></type> <name pos:line="61" pos:column="219">returnValue</name></decl></param>)</parameter_list>
        <block pos:line="62" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="63" pos:column="13">context</name><op:operator pos:line="63" pos:column="20">.</op:operator><name pos:line="63" pos:column="21">Setup</name></name><argument_list pos:line="63" pos:column="26">(<argument><expr><lambda><name pos:line="63" pos:column="27">c</name> <op:operator pos:line="63" pos:column="29">=&gt;</op:operator> <name><name pos:line="63" pos:column="32">c</name><op:operator pos:line="63" pos:column="33">.</op:operator><name pos:line="63" pos:column="34">Arguments</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="63" pos:column="44">.</op:operator><call><name pos:line="63" pos:column="45">Returns</name><argument_list pos:line="63" pos:column="52">(<argument><expr><op:operator pos:line="63" pos:column="53">new</op:operator> <name><name pos:line="63" pos:column="57">object</name><index pos:line="63" pos:column="63">[]</index></name> <block pos:line="63" pos:column="66">{ <expr><name pos:line="63" pos:column="68">arg1</name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="64" pos:column="13">context</name><op:operator pos:line="64" pos:column="20">.</op:operator><name pos:line="64" pos:column="21">Setup</name></name><argument_list pos:line="64" pos:column="26">(<argument><expr><lambda><name pos:line="64" pos:column="27">c</name> <op:operator pos:line="64" pos:column="29">=&gt;</op:operator> <name><name pos:line="64" pos:column="32">c</name><op:operator pos:line="64" pos:column="33">.</op:operator><name pos:line="64" pos:column="34">ReturnValue</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="64" pos:column="46">.</op:operator><call><name pos:line="64" pos:column="47">Returns</name><argument_list pos:line="64" pos:column="54">(<argument><expr><name pos:line="64" pos:column="55">returnValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="65" pos:column="13">proxyFactory</name><op:operator pos:line="65" pos:column="25">.</op:operator><name pos:line="65" pos:column="26">Setup</name></name><argument_list pos:line="65" pos:column="31">(<argument><expr><lambda><name pos:line="65" pos:column="32">pf</name> <op:operator pos:line="65" pos:column="35">=&gt;</op:operator> <call><name><name pos:line="65" pos:column="38">pf</name><op:operator pos:line="65" pos:column="40">.</op:operator><name><name pos:line="65" pos:column="41">IsWrapInterfaceEligible</name><argument_list pos:line="65" pos:column="64">&lt;<argument><name pos:line="65" pos:column="65">IValueProvider</name></argument>&gt;</argument_list></name></name><argument_list pos:line="65" pos:column="80">(<argument><expr><call><name pos:line="65" pos:column="81">typeof</name><argument_list pos:line="65" pos:column="87">(<argument><expr><name pos:line="65" pos:column="88">IValueProvider</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="65" pos:column="105">.</op:operator><call><name pos:line="65" pos:column="106">Returns</name><argument_list pos:line="65" pos:column="113">(<argument><expr><lit:literal type="boolean" pos:line="65" pos:column="114">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="66" pos:column="13">proxyFactory</name><op:operator pos:line="66" pos:column="25">.</op:operator><name pos:line="66" pos:column="26">Setup</name></name><argument_list pos:line="66" pos:column="31">(<argument><expr><lambda><name pos:line="66" pos:column="32">pf</name> <op:operator pos:line="66" pos:column="35">=&gt;</op:operator> <call><name><name pos:line="66" pos:column="38">pf</name><op:operator pos:line="66" pos:column="40">.</op:operator><name pos:line="66" pos:column="41">WrapInterface</name></name><argument_list pos:line="66" pos:column="54">(<argument><expr><call><name><name pos:line="66" pos:column="55">It</name><op:operator pos:line="66" pos:column="57">.</op:operator><name><name pos:line="66" pos:column="58">IsAny</name><argument_list pos:line="66" pos:column="63">&lt;<argument><name pos:line="66" pos:column="64">IValueProvider</name></argument>&gt;</argument_list></name></name><argument_list pos:line="66" pos:column="79">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="66" pos:column="83">It</name><op:operator pos:line="66" pos:column="85">.</op:operator><name><name pos:line="66" pos:column="86">IsAny</name><argument_list pos:line="66" pos:column="91">&lt;<argument><name><name pos:line="66" pos:column="92">IEnumerable</name><argument_list pos:line="66" pos:column="103">&lt;<argument><name pos:line="66" pos:column="104">IAlternateMethod</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name><argument_list pos:line="66" pos:column="122">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="66" pos:column="126">.</op:operator><call><name pos:line="66" pos:column="127">Returns</name><argument_list pos:line="66" pos:column="134">(<argument><expr><name pos:line="66" pos:column="135">returnValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="68" pos:column="13">sut</name><op:operator pos:line="68" pos:column="16">.</op:operator><name pos:line="68" pos:column="17">NewImplementation</name></name><argument_list pos:line="68" pos:column="34">(<argument><expr><name pos:line="68" pos:column="35">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="70" pos:column="13">context</name><op:operator pos:line="70" pos:column="20">.</op:operator><name pos:line="70" pos:column="21">TimerStrategy</name></name><argument_list pos:line="70" pos:column="34">()</argument_list></call><op:operator pos:line="70" pos:column="36">.</op:operator><call><name pos:line="70" pos:column="37">Verify</name><argument_list pos:line="70" pos:column="43">(<argument><expr><lambda><name pos:line="70" pos:column="44">c</name> <op:operator pos:line="70" pos:column="46">=&gt;</op:operator> <call><name><name pos:line="70" pos:column="49">c</name><op:operator pos:line="70" pos:column="50">.</op:operator><name pos:line="70" pos:column="51">Time</name></name><argument_list pos:line="70" pos:column="55">(<argument><expr><call><name><name pos:line="70" pos:column="56">It</name><op:operator pos:line="70" pos:column="58">.</op:operator><name><name pos:line="70" pos:column="59">IsAny</name><argument_list pos:line="70" pos:column="64">&lt;<argument><name pos:line="70" pos:column="65">Action</name></argument>&gt;</argument_list></name></name><argument_list pos:line="70" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="71" pos:column="13">context</name><op:operator pos:line="71" pos:column="20">.</op:operator><name pos:line="71" pos:column="21">Verify</name></name><argument_list pos:line="71" pos:column="27">(<argument><expr><lambda><name pos:line="71" pos:column="28">c</name> <op:operator pos:line="71" pos:column="30">=&gt;</op:operator> <name><name pos:line="71" pos:column="33">c</name><op:operator pos:line="71" pos:column="34">.</op:operator><name pos:line="71" pos:column="35">ReturnValue</name></name></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="72" pos:column="13">context</name><op:operator pos:line="72" pos:column="20">.</op:operator><name pos:line="72" pos:column="21">VerifySet</name></name><argument_list pos:line="72" pos:column="30">(<argument><expr><lambda><name pos:line="72" pos:column="31">c</name> <op:operator pos:line="72" pos:column="33">=&gt;</op:operator> <name><name pos:line="72" pos:column="36">c</name><op:operator pos:line="72" pos:column="37">.</op:operator><name pos:line="72" pos:column="38">ReturnValue</name></name> <op:operator pos:line="72" pos:column="50">=</op:operator> <call><name><name pos:line="72" pos:column="52">It</name><op:operator pos:line="72" pos:column="54">.</op:operator><name><name pos:line="72" pos:column="55">IsAny</name><argument_list pos:line="72" pos:column="60">&lt;<argument><name pos:line="72" pos:column="61">IValueProvider</name></argument>&gt;</argument_list></name></name><argument_list pos:line="72" pos:column="76">()</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
