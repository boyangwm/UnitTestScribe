<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Core\Framework\CastleDynamicProxyFactoryShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Diagnostics</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Linq</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Reflection</name></name>;</using>

<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Glimpse</name><op:operator pos:line="7" pos:column="14">.</op:operator><name pos:line="7" pos:column="15">Core</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Glimpse</name><op:operator pos:line="8" pos:column="14">.</op:operator><name pos:line="8" pos:column="15">Core</name><op:operator pos:line="8" pos:column="19">.</op:operator><name pos:line="8" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">Glimpse</name><op:operator pos:line="9" pos:column="14">.</op:operator><name pos:line="9" pos:column="15">Core</name><op:operator pos:line="9" pos:column="19">.</op:operator><name pos:line="9" pos:column="20">Framework</name></name>;</using>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">Glimpse</name><op:operator pos:line="10" pos:column="14">.</op:operator><name pos:line="10" pos:column="15">Test</name><op:operator pos:line="10" pos:column="19">.</op:operator><name pos:line="10" pos:column="20">Common</name></name>;</using>
<using pos:line="11" pos:column="1">using <name><name pos:line="11" pos:column="7">Glimpse</name><op:operator pos:line="11" pos:column="14">.</op:operator><name pos:line="11" pos:column="15">Test</name><op:operator pos:line="11" pos:column="19">.</op:operator><name pos:line="11" pos:column="20">Core</name><op:operator pos:line="11" pos:column="24">.</op:operator><name pos:line="11" pos:column="25">TestDoubles</name></name>;</using>
<using pos:line="12" pos:column="1">using <name pos:line="12" pos:column="7">Moq</name>;</using>
<using pos:line="13" pos:column="1">using <name pos:line="13" pos:column="7">Xunit</name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">Xunit</name><op:operator pos:line="14" pos:column="12">.</op:operator><name pos:line="14" pos:column="13">Extensions</name></name>;</using>

<namespace pos:line="16" pos:column="1">namespace <name><name pos:line="16" pos:column="11">Glimpse</name><op:operator pos:line="16" pos:column="18">.</op:operator><name pos:line="16" pos:column="19">Test</name><op:operator pos:line="16" pos:column="23">.</op:operator><name pos:line="16" pos:column="24">Core</name><op:operator pos:line="16" pos:column="28">.</op:operator><name pos:line="16" pos:column="29">Framework</name></name>
<block pos:line="17" pos:column="1">{
    <class><specifier pos:line="18" pos:column="5">public</specifier> class <name pos:line="18" pos:column="18">CastleDynamicProxyFactoryShould</name>
    <block pos:line="19" pos:column="5">{
        <function><type><attribute pos:line="20" pos:column="9">[<expr><name pos:line="20" pos:column="10">Theory</name></expr><op:operator pos:line="20" pos:column="16">,</op:operator> <expr><name pos:line="20" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="21" pos:column="9">public</specifier> <name pos:line="21" pos:column="16">void</name></type> <name pos:line="21" pos:column="21">ImplementIWrapper</name><parameter_list pos:line="21" pos:column="38">(<param><decl><type><name pos:line="21" pos:column="39">CastleDynamicProxyFactory</name></type> <name pos:line="21" pos:column="65">sut</name></decl></param>, <param><decl><type><name pos:line="21" pos:column="70">IDisposable</name></type> <name pos:line="21" pos:column="82">instance</name></decl></param>, <param><decl><type><name><name pos:line="21" pos:column="92">IEnumerable</name><argument_list pos:line="21" pos:column="103">&lt;<argument><name pos:line="21" pos:column="104">IAlternateMethod</name></argument>&gt;</argument_list></name></type> <name pos:line="21" pos:column="122">methodInvocations</name></decl></param>)</parameter_list>
        <block pos:line="22" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="23" pos:column="13">var</name></type> <name pos:line="23" pos:column="17">result</name> <init pos:line="23" pos:column="24">= <expr><call><name><name pos:line="23" pos:column="26">sut</name><op:operator pos:line="23" pos:column="29">.</op:operator><name pos:line="23" pos:column="30">WrapInterface</name></name><argument_list pos:line="23" pos:column="43">(<argument><expr><name pos:line="23" pos:column="44">instance</name></expr></argument>, <argument><expr><name pos:line="23" pos:column="54">methodInvocations</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="25" pos:column="13">var</name></type> <name pos:line="25" pos:column="17">resultAsWrapper</name> <init pos:line="25" pos:column="33">= <expr><name pos:line="25" pos:column="35">result</name> <op:operator pos:line="25" pos:column="42">as</op:operator> <name><name pos:line="25" pos:column="45">IWrapper</name><argument_list pos:line="25" pos:column="53">&lt;<argument><name pos:line="25" pos:column="54">IDisposable</name></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="27" pos:column="13">Assert</name><op:operator pos:line="27" pos:column="19">.</op:operator><name pos:line="27" pos:column="20">NotNull</name></name><argument_list pos:line="27" pos:column="27">(<argument><expr><name pos:line="27" pos:column="28">resultAsWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="28" pos:column="13">Assert</name><op:operator pos:line="28" pos:column="19">.</op:operator><name pos:line="28" pos:column="20">Equal</name></name><argument_list pos:line="28" pos:column="25">(<argument><expr><name pos:line="28" pos:column="26">instance</name></expr></argument>, <argument><expr><call><name><name pos:line="28" pos:column="36">resultAsWrapper</name><op:operator pos:line="28" pos:column="51">.</op:operator><name pos:line="28" pos:column="52">GetWrappedObject</name></name><argument_list pos:line="28" pos:column="68">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="31" pos:column="9">[<expr><name pos:line="31" pos:column="10">Theory</name></expr><op:operator pos:line="31" pos:column="16">,</op:operator> <expr><name pos:line="31" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="32" pos:column="9">public</specifier> <name pos:line="32" pos:column="16">void</name></type> <name pos:line="32" pos:column="21">ExtendClassDoesNotImplementIWrapper</name><parameter_list pos:line="32" pos:column="56">(<param><decl><type><name pos:line="32" pos:column="57">CastleDynamicProxyFactory</name></type> <name pos:line="32" pos:column="83">sut</name></decl></param>, <param><decl><type><name><name pos:line="32" pos:column="88">IEnumerable</name><argument_list pos:line="32" pos:column="99">&lt;<argument><name pos:line="32" pos:column="100">IAlternateMethod</name></argument>&gt;</argument_list></name></type> <name pos:line="32" pos:column="118">methodInvocations</name></decl></param>)</parameter_list>
        <block pos:line="33" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="34" pos:column="13">var</name></type> <name pos:line="34" pos:column="17">result</name> <init pos:line="34" pos:column="24">= <expr><call><name><name pos:line="34" pos:column="26">sut</name><op:operator pos:line="34" pos:column="29">.</op:operator><name><name pos:line="34" pos:column="30">ExtendClass</name><argument_list pos:line="34" pos:column="41">&lt;<argument><name pos:line="34" pos:column="42">TestProxy</name></argument>&gt;</argument_list></name></name><argument_list pos:line="34" pos:column="52">(<argument><expr><name pos:line="34" pos:column="53">methodInvocations</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="36" pos:column="13">var</name></type> <name pos:line="36" pos:column="17">resultAsWrapper</name> <init pos:line="36" pos:column="33">= <expr><name pos:line="36" pos:column="35">result</name> <op:operator pos:line="36" pos:column="42">as</op:operator> <name><name pos:line="36" pos:column="45">IWrapper</name><argument_list pos:line="36" pos:column="53">&lt;<argument><name pos:line="36" pos:column="54">TestProxy</name></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="38" pos:column="13">Assert</name><op:operator pos:line="38" pos:column="19">.</op:operator><name pos:line="38" pos:column="20">Null</name></name><argument_list pos:line="38" pos:column="24">(<argument><expr><name pos:line="38" pos:column="25">resultAsWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="41" pos:column="9">[<expr><name pos:line="41" pos:column="10">Theory</name></expr><op:operator pos:line="41" pos:column="16">,</op:operator> <expr><name pos:line="41" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="42" pos:column="9">public</specifier> <name pos:line="42" pos:column="16">void</name></type> <name pos:line="42" pos:column="21">WrapClassDoesImplementIWrapper</name><parameter_list pos:line="42" pos:column="51">(<param><decl><type><name pos:line="42" pos:column="52">CastleDynamicProxyFactory</name></type> <name pos:line="42" pos:column="78">sut</name></decl></param>, <param><decl><type><name><name pos:line="42" pos:column="83">IEnumerable</name><argument_list pos:line="42" pos:column="94">&lt;<argument><name pos:line="42" pos:column="95">IAlternateMethod</name></argument>&gt;</argument_list></name></type> <name pos:line="42" pos:column="113">methodInvocations</name></decl></param>)</parameter_list>
        <block pos:line="43" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="44" pos:column="13">var</name></type> <name pos:line="44" pos:column="17">result</name> <init pos:line="44" pos:column="24">= <expr><call><name><name pos:line="44" pos:column="26">sut</name><op:operator pos:line="44" pos:column="29">.</op:operator><name pos:line="44" pos:column="30">WrapClass</name></name><argument_list pos:line="44" pos:column="39">(<argument><expr><op:operator pos:line="44" pos:column="40">new</op:operator> <call><name pos:line="44" pos:column="44">TestProxy</name><argument_list pos:line="44" pos:column="53">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="44" pos:column="57">methodInvocations</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="46" pos:column="13">var</name></type> <name pos:line="46" pos:column="17">resultAsWrapper</name> <init pos:line="46" pos:column="33">= <expr><name pos:line="46" pos:column="35">result</name> <op:operator pos:line="46" pos:column="42">as</op:operator> <name><name pos:line="46" pos:column="45">IWrapper</name><argument_list pos:line="46" pos:column="53">&lt;<argument><name pos:line="46" pos:column="54">TestProxy</name></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="48" pos:column="13">Assert</name><op:operator pos:line="48" pos:column="19">.</op:operator><name pos:line="48" pos:column="20">NotNull</name></name><argument_list pos:line="48" pos:column="27">(<argument><expr><name pos:line="48" pos:column="28">resultAsWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="51" pos:column="9">[<expr><name pos:line="51" pos:column="10">Theory</name></expr><op:operator pos:line="51" pos:column="16">,</op:operator> <expr><name pos:line="51" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="52" pos:column="9">public</specifier> <name pos:line="52" pos:column="16">void</name></type> <name pos:line="52" pos:column="21">WrapInterfaceDoesImplementIWrapper</name><parameter_list pos:line="52" pos:column="55">(<param><decl><type><name pos:line="52" pos:column="56">CastleDynamicProxyFactory</name></type> <name pos:line="52" pos:column="82">sut</name></decl></param>, <param><decl><type><name><name pos:line="52" pos:column="87">IEnumerable</name><argument_list pos:line="52" pos:column="98">&lt;<argument><name pos:line="52" pos:column="99">IAlternateMethod</name></argument>&gt;</argument_list></name></type> <name pos:line="52" pos:column="117">methodInvocations</name></decl></param>)</parameter_list>
        <block pos:line="53" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="54" pos:column="13">var</name></type> <name pos:line="54" pos:column="17">result</name> <init pos:line="54" pos:column="24">= <expr><call><name><name pos:line="54" pos:column="26">sut</name><op:operator pos:line="54" pos:column="29">.</op:operator><name><name pos:line="54" pos:column="30">WrapInterface</name><argument_list pos:line="54" pos:column="43">&lt;<argument><name pos:line="54" pos:column="44">ITestProxy</name></argument>&gt;</argument_list></name></name><argument_list pos:line="54" pos:column="55">(<argument><expr><op:operator pos:line="54" pos:column="56">new</op:operator> <call><name pos:line="54" pos:column="60">TestProxy</name><argument_list pos:line="54" pos:column="69">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="54" pos:column="73">methodInvocations</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="56" pos:column="13">var</name></type> <name pos:line="56" pos:column="17">resultAsWrapper</name> <init pos:line="56" pos:column="33">= <expr><name pos:line="56" pos:column="35">result</name> <op:operator pos:line="56" pos:column="42">as</op:operator> <name><name pos:line="56" pos:column="45">IWrapper</name><argument_list pos:line="56" pos:column="53">&lt;<argument><name pos:line="56" pos:column="54">ITestProxy</name></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="58" pos:column="13">Assert</name><op:operator pos:line="58" pos:column="19">.</op:operator><name pos:line="58" pos:column="20">NotNull</name></name><argument_list pos:line="58" pos:column="27">(<argument><expr><name pos:line="58" pos:column="28">resultAsWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="61" pos:column="9">[<expr><name pos:line="61" pos:column="10">Theory</name></expr><op:operator pos:line="61" pos:column="16">,</op:operator> <expr><name pos:line="61" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="62" pos:column="9">public</specifier> <name pos:line="62" pos:column="16">void</name></type> <name pos:line="62" pos:column="21">IsWrapInterfaceEligibleOnlyAcceptsInterfaces</name><parameter_list pos:line="62" pos:column="65">(<param><decl><type><name pos:line="62" pos:column="66">CastleDynamicProxyFactory</name></type> <name pos:line="62" pos:column="92">sut</name></decl></param>)</parameter_list>
        <block pos:line="63" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="64" pos:column="13">var</name></type> <name pos:line="64" pos:column="17">result</name> <init pos:line="64" pos:column="24">= <expr><call><name><name pos:line="64" pos:column="26">sut</name><op:operator pos:line="64" pos:column="29">.</op:operator><name><name pos:line="64" pos:column="30">IsWrapInterfaceEligible</name><argument_list pos:line="64" pos:column="53">&lt;<argument><name pos:line="64" pos:column="54">ITestProxy</name></argument>&gt;</argument_list></name></name><argument_list pos:line="64" pos:column="65">(<argument><expr><call><name pos:line="64" pos:column="66">typeof</name><argument_list pos:line="64" pos:column="72">(<argument><expr><name pos:line="64" pos:column="73">ITestProxy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
            <expr_stmt><expr><call><name><name pos:line="65" pos:column="13">Assert</name><op:operator pos:line="65" pos:column="19">.</op:operator><name pos:line="65" pos:column="20">True</name></name><argument_list pos:line="65" pos:column="24">(<argument><expr><name pos:line="65" pos:column="25">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="67" pos:column="13">result</name> <op:operator pos:line="67" pos:column="20">=</op:operator> <call><name><name pos:line="67" pos:column="22">sut</name><op:operator pos:line="67" pos:column="25">.</op:operator><name><name pos:line="67" pos:column="26">IsWrapInterfaceEligible</name><argument_list pos:line="67" pos:column="49">&lt;<argument><name pos:line="67" pos:column="50">ITestProxy</name></argument>&gt;</argument_list></name></name><argument_list pos:line="67" pos:column="61">(<argument><expr><call><name pos:line="67" pos:column="62">typeof</name><argument_list pos:line="67" pos:column="68">(<argument><expr><name pos:line="67" pos:column="69">TestProxy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="68" pos:column="13">Assert</name><op:operator pos:line="68" pos:column="19">.</op:operator><name pos:line="68" pos:column="20">True</name></name><argument_list pos:line="68" pos:column="24">(<argument><expr><name pos:line="68" pos:column="25">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="71" pos:column="9">[<expr><name pos:line="71" pos:column="10">Theory</name></expr><op:operator pos:line="71" pos:column="16">,</op:operator> <expr><name pos:line="71" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="72" pos:column="9">public</specifier> <name pos:line="72" pos:column="16">void</name></type> <name pos:line="72" pos:column="21">IsWrapClassEligibleAcceptsNonSealedClasses</name><parameter_list pos:line="72" pos:column="63">(<param><decl><type><name pos:line="72" pos:column="64">CastleDynamicProxyFactory</name></type> <name pos:line="72" pos:column="90">sut</name></decl></param>)</parameter_list>
        <block pos:line="73" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="74" pos:column="13">var</name></type> <name pos:line="74" pos:column="17">result</name> <init pos:line="74" pos:column="24">= <expr><call><name><name pos:line="74" pos:column="26">sut</name><op:operator pos:line="74" pos:column="29">.</op:operator><name pos:line="74" pos:column="30">IsWrapClassEligible</name></name><argument_list pos:line="74" pos:column="49">(<argument><expr><call><name pos:line="74" pos:column="50">typeof</name><argument_list pos:line="74" pos:column="56">(<argument><expr><name pos:line="74" pos:column="57">TestProxy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
            <expr_stmt><expr><call><name><name pos:line="75" pos:column="13">Assert</name><op:operator pos:line="75" pos:column="19">.</op:operator><name pos:line="75" pos:column="20">True</name></name><argument_list pos:line="75" pos:column="24">(<argument><expr><name pos:line="75" pos:column="25">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="77" pos:column="13">result</name> <op:operator pos:line="77" pos:column="20">=</op:operator> <call><name><name pos:line="77" pos:column="22">sut</name><op:operator pos:line="77" pos:column="25">.</op:operator><name pos:line="77" pos:column="26">IsWrapClassEligible</name></name><argument_list pos:line="77" pos:column="45">(<argument><expr><call><name pos:line="77" pos:column="46">typeof</name><argument_list pos:line="77" pos:column="52">(<argument><expr><name pos:line="77" pos:column="53">SealedTestProxy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="78" pos:column="13">Assert</name><op:operator pos:line="78" pos:column="19">.</op:operator><name pos:line="78" pos:column="20">False</name></name><argument_list pos:line="78" pos:column="25">(<argument><expr><name pos:line="78" pos:column="26">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="81" pos:column="9">[<expr><name pos:line="81" pos:column="10">Theory</name></expr><op:operator pos:line="81" pos:column="16">,</op:operator> <expr><name pos:line="81" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="82" pos:column="9">public</specifier> <name pos:line="82" pos:column="16">void</name></type> <name pos:line="82" pos:column="21">IsExtendClassEligibleAcceptsNonSealedClasses</name><parameter_list pos:line="82" pos:column="65">(<param><decl><type><name pos:line="82" pos:column="66">CastleDynamicProxyFactory</name></type> <name pos:line="82" pos:column="92">sut</name></decl></param>)</parameter_list>
        <block pos:line="83" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="84" pos:column="13">var</name></type> <name pos:line="84" pos:column="17">result</name> <init pos:line="84" pos:column="24">= <expr><call><name><name pos:line="84" pos:column="26">sut</name><op:operator pos:line="84" pos:column="29">.</op:operator><name pos:line="84" pos:column="30">IsExtendClassEligible</name></name><argument_list pos:line="84" pos:column="51">(<argument><expr><call><name pos:line="84" pos:column="52">typeof</name><argument_list pos:line="84" pos:column="58">(<argument><expr><name pos:line="84" pos:column="59">TestProxy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="85" pos:column="13">Assert</name><op:operator pos:line="85" pos:column="19">.</op:operator><name pos:line="85" pos:column="20">True</name></name><argument_list pos:line="85" pos:column="24">(<argument><expr><name pos:line="85" pos:column="25">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="87" pos:column="13">result</name> <op:operator pos:line="87" pos:column="20">=</op:operator> <call><name><name pos:line="87" pos:column="22">sut</name><op:operator pos:line="87" pos:column="25">.</op:operator><name pos:line="87" pos:column="26">IsExtendClassEligible</name></name><argument_list pos:line="87" pos:column="47">(<argument><expr><call><name pos:line="87" pos:column="48">typeof</name><argument_list pos:line="87" pos:column="54">(<argument><expr><name pos:line="87" pos:column="55">SealedTestProxy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="88" pos:column="13">Assert</name><op:operator pos:line="88" pos:column="19">.</op:operator><name pos:line="88" pos:column="20">False</name></name><argument_list pos:line="88" pos:column="25">(<argument><expr><name pos:line="88" pos:column="26">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="91" pos:column="9">[<expr><name pos:line="91" pos:column="10">Theory</name></expr><op:operator pos:line="91" pos:column="16">,</op:operator> <expr><name pos:line="91" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="92" pos:column="9">public</specifier> <name pos:line="92" pos:column="16">void</name></type> <name pos:line="92" pos:column="21">IsExtendClassEligibleAcceptsOnlyClasses</name><parameter_list pos:line="92" pos:column="60">(<param><decl><type><name pos:line="92" pos:column="61">CastleDynamicProxyFactory</name></type> <name pos:line="92" pos:column="87">sut</name></decl></param>)</parameter_list>
        <block pos:line="93" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="94" pos:column="13">var</name></type> <name pos:line="94" pos:column="17">result</name> <init pos:line="94" pos:column="24">= <expr><call><name><name pos:line="94" pos:column="26">sut</name><op:operator pos:line="94" pos:column="29">.</op:operator><name pos:line="94" pos:column="30">IsExtendClassEligible</name></name><argument_list pos:line="94" pos:column="51">(<argument><expr><call><name pos:line="94" pos:column="52">typeof</name><argument_list pos:line="94" pos:column="58">(<argument><expr><name pos:line="94" pos:column="59">TestProxy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="95" pos:column="13">Assert</name><op:operator pos:line="95" pos:column="19">.</op:operator><name pos:line="95" pos:column="20">True</name></name><argument_list pos:line="95" pos:column="24">(<argument><expr><name pos:line="95" pos:column="25">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="97" pos:column="13">result</name> <op:operator pos:line="97" pos:column="20">=</op:operator> <call><name><name pos:line="97" pos:column="22">sut</name><op:operator pos:line="97" pos:column="25">.</op:operator><name pos:line="97" pos:column="26">IsExtendClassEligible</name></name><argument_list pos:line="97" pos:column="47">(<argument><expr><call><name pos:line="97" pos:column="48">typeof</name><argument_list pos:line="97" pos:column="54">(<argument><expr><name pos:line="97" pos:column="55">ITestProxy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="98" pos:column="13">Assert</name><op:operator pos:line="98" pos:column="19">.</op:operator><name pos:line="98" pos:column="20">False</name></name><argument_list pos:line="98" pos:column="25">(<argument><expr><name pos:line="98" pos:column="26">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="101" pos:column="9">[<expr><name pos:line="101" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="102" pos:column="9">public</specifier> <name pos:line="102" pos:column="16">void</name></type> <name pos:line="102" pos:column="21">ThrowsWithNullLogger</name><parameter_list pos:line="102" pos:column="41">()</parameter_list>
        <block pos:line="103" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="104" pos:column="13">Assert</name><op:operator pos:line="104" pos:column="19">.</op:operator><name><name pos:line="104" pos:column="20">Throws</name><argument_list pos:line="104" pos:column="26">&lt;<argument><name pos:line="104" pos:column="27">ArgumentNullException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="104" pos:column="49">(<argument><expr><lambda><parameter_list pos:line="104" pos:column="50">()</parameter_list> <op:operator pos:line="104" pos:column="53">=&gt;</op:operator> <op:operator pos:line="104" pos:column="56">new</op:operator> <call><name pos:line="104" pos:column="60">CastleDynamicProxyFactory</name><argument_list pos:line="104" pos:column="85">(<argument><expr><name pos:line="104" pos:column="86">null</name></expr></argument>, <argument><expr><op:operator pos:line="104" pos:column="92">new</op:operator> <call><name><name pos:line="104" pos:column="96">Mock</name><argument_list pos:line="104" pos:column="100">&lt;<argument><name pos:line="104" pos:column="101">IMessageBroker</name></argument>&gt;</argument_list></name><argument_list pos:line="104" pos:column="116">()</argument_list></call><op:operator pos:line="104" pos:column="118">.</op:operator><name pos:line="104" pos:column="119">Object</name></expr></argument>, <argument><expr><lambda><parameter_list pos:line="104" pos:column="127">()</parameter_list> <op:operator pos:line="104" pos:column="130">=&gt;</op:operator> <op:operator pos:line="104" pos:column="133">new</op:operator> <call><name pos:line="104" pos:column="137">ExecutionTimer</name><argument_list pos:line="104" pos:column="151">(<argument><expr><call><name><name pos:line="104" pos:column="152">Stopwatch</name><op:operator pos:line="104" pos:column="161">.</op:operator><name pos:line="104" pos:column="162">StartNew</name></name><argument_list pos:line="104" pos:column="170">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><lambda><parameter_list pos:line="104" pos:column="175">()</parameter_list> <op:operator pos:line="104" pos:column="178">=&gt;</op:operator> <name><name pos:line="104" pos:column="181">RuntimePolicy</name><op:operator pos:line="104" pos:column="194">.</op:operator><name pos:line="104" pos:column="195">On</name></name></lambda></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="107" pos:column="9">[<expr><name pos:line="107" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="108" pos:column="9">public</specifier> <name pos:line="108" pos:column="16">void</name></type> <name pos:line="108" pos:column="21">ThrowsWithNullMessageBroker</name><parameter_list pos:line="108" pos:column="48">()</parameter_list>
        <block pos:line="109" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="110" pos:column="13">Assert</name><op:operator pos:line="110" pos:column="19">.</op:operator><name><name pos:line="110" pos:column="20">Throws</name><argument_list pos:line="110" pos:column="26">&lt;<argument><name pos:line="110" pos:column="27">ArgumentNullException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="110" pos:column="49">(<argument><expr><lambda><parameter_list pos:line="110" pos:column="50">()</parameter_list> <op:operator pos:line="110" pos:column="53">=&gt;</op:operator> <op:operator pos:line="110" pos:column="56">new</op:operator> <call><name pos:line="110" pos:column="60">CastleDynamicProxyFactory</name><argument_list pos:line="110" pos:column="85">(<argument><expr><op:operator pos:line="110" pos:column="86">new</op:operator> <call><name><name pos:line="110" pos:column="90">Mock</name><argument_list pos:line="110" pos:column="94">&lt;<argument><name pos:line="110" pos:column="95">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="110" pos:column="103">()</argument_list></call><op:operator pos:line="110" pos:column="105">.</op:operator><name pos:line="110" pos:column="106">Object</name></expr></argument>, <argument><expr><name pos:line="110" pos:column="114">null</name></expr></argument>, <argument><expr><lambda><parameter_list pos:line="110" pos:column="120">()</parameter_list> <op:operator pos:line="110" pos:column="123">=&gt;</op:operator> <op:operator pos:line="110" pos:column="126">new</op:operator> <call><name pos:line="110" pos:column="130">ExecutionTimer</name><argument_list pos:line="110" pos:column="144">(<argument><expr><call><name><name pos:line="110" pos:column="145">Stopwatch</name><op:operator pos:line="110" pos:column="154">.</op:operator><name pos:line="110" pos:column="155">StartNew</name></name><argument_list pos:line="110" pos:column="163">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><lambda><parameter_list pos:line="110" pos:column="168">()</parameter_list> <op:operator pos:line="110" pos:column="171">=&gt;</op:operator> <name><name pos:line="110" pos:column="174">RuntimePolicy</name><op:operator pos:line="110" pos:column="187">.</op:operator><name pos:line="110" pos:column="188">On</name></name></lambda></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="113" pos:column="9">[<expr><name pos:line="113" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="114" pos:column="9">public</specifier> <name pos:line="114" pos:column="16">void</name></type> <name pos:line="114" pos:column="21">ThrowsWithNullTimerStrategy</name><parameter_list pos:line="114" pos:column="48">()</parameter_list>
        <block pos:line="115" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="116" pos:column="13">Assert</name><op:operator pos:line="116" pos:column="19">.</op:operator><name><name pos:line="116" pos:column="20">Throws</name><argument_list pos:line="116" pos:column="26">&lt;<argument><name pos:line="116" pos:column="27">ArgumentNullException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="116" pos:column="49">(<argument><expr><lambda><parameter_list pos:line="116" pos:column="50">()</parameter_list> <op:operator pos:line="116" pos:column="53">=&gt;</op:operator> <op:operator pos:line="116" pos:column="56">new</op:operator> <call><name pos:line="116" pos:column="60">CastleDynamicProxyFactory</name><argument_list pos:line="116" pos:column="85">(<argument><expr><op:operator pos:line="116" pos:column="86">new</op:operator> <call><name><name pos:line="116" pos:column="90">Mock</name><argument_list pos:line="116" pos:column="94">&lt;<argument><name pos:line="116" pos:column="95">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="116" pos:column="103">()</argument_list></call><op:operator pos:line="116" pos:column="105">.</op:operator><name pos:line="116" pos:column="106">Object</name></expr></argument>, <argument><expr><op:operator pos:line="116" pos:column="114">new</op:operator> <call><name><name pos:line="116" pos:column="118">Mock</name><argument_list pos:line="116" pos:column="122">&lt;<argument><name pos:line="116" pos:column="123">IMessageBroker</name></argument>&gt;</argument_list></name><argument_list pos:line="116" pos:column="138">()</argument_list></call><op:operator pos:line="116" pos:column="140">.</op:operator><name pos:line="116" pos:column="141">Object</name></expr></argument>, <argument><expr><name pos:line="116" pos:column="149">null</name></expr></argument>, <argument><expr><lambda><parameter_list pos:line="116" pos:column="155">()</parameter_list> <op:operator pos:line="116" pos:column="158">=&gt;</op:operator> <name><name pos:line="116" pos:column="161">RuntimePolicy</name><op:operator pos:line="116" pos:column="174">.</op:operator><name pos:line="116" pos:column="175">On</name></name></lambda></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="119" pos:column="9">[<expr><name pos:line="119" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="120" pos:column="9">public</specifier> <name pos:line="120" pos:column="16">void</name></type> <name pos:line="120" pos:column="21">ThrowsWithNullRuntimePolicyStrategy</name><parameter_list pos:line="120" pos:column="56">()</parameter_list>
        <block pos:line="121" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="122" pos:column="13">Assert</name><op:operator pos:line="122" pos:column="19">.</op:operator><name><name pos:line="122" pos:column="20">Throws</name><argument_list pos:line="122" pos:column="26">&lt;<argument><name pos:line="122" pos:column="27">ArgumentNullException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="122" pos:column="49">(<argument><expr><lambda><parameter_list pos:line="122" pos:column="50">()</parameter_list> <op:operator pos:line="122" pos:column="53">=&gt;</op:operator> <op:operator pos:line="122" pos:column="56">new</op:operator> <call><name pos:line="122" pos:column="60">CastleDynamicProxyFactory</name><argument_list pos:line="122" pos:column="85">(<argument><expr><op:operator pos:line="122" pos:column="86">new</op:operator> <call><name><name pos:line="122" pos:column="90">Mock</name><argument_list pos:line="122" pos:column="94">&lt;<argument><name pos:line="122" pos:column="95">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="122" pos:column="103">()</argument_list></call><op:operator pos:line="122" pos:column="105">.</op:operator><name pos:line="122" pos:column="106">Object</name></expr></argument>, <argument><expr><op:operator pos:line="122" pos:column="114">new</op:operator> <call><name><name pos:line="122" pos:column="118">Mock</name><argument_list pos:line="122" pos:column="122">&lt;<argument><name pos:line="122" pos:column="123">IMessageBroker</name></argument>&gt;</argument_list></name><argument_list pos:line="122" pos:column="138">()</argument_list></call><op:operator pos:line="122" pos:column="140">.</op:operator><name pos:line="122" pos:column="141">Object</name></expr></argument>, <argument><expr><lambda><parameter_list pos:line="122" pos:column="149">()</parameter_list> <op:operator pos:line="122" pos:column="152">=&gt;</op:operator> <op:operator pos:line="122" pos:column="155">new</op:operator> <call><name pos:line="122" pos:column="159">ExecutionTimer</name><argument_list pos:line="122" pos:column="173">(<argument><expr><call><name><name pos:line="122" pos:column="174">Stopwatch</name><op:operator pos:line="122" pos:column="183">.</op:operator><name pos:line="122" pos:column="184">StartNew</name></name><argument_list pos:line="122" pos:column="192">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><name pos:line="122" pos:column="197">null</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="125" pos:column="9">[<expr><name pos:line="125" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="126" pos:column="9">public</specifier> <name pos:line="126" pos:column="16">void</name></type> <name pos:line="126" pos:column="21">ConstructWithLogger</name><parameter_list pos:line="126" pos:column="40">()</parameter_list>
        <block pos:line="127" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="128" pos:column="13">var</name></type> <name pos:line="128" pos:column="17">loggerMock</name> <init pos:line="128" pos:column="28">= <expr><op:operator pos:line="128" pos:column="30">new</op:operator> <call><name><name pos:line="128" pos:column="34">Mock</name><argument_list pos:line="128" pos:column="38">&lt;<argument><name pos:line="128" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="128" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="130" pos:column="13">var</name></type> <name pos:line="130" pos:column="17">factory</name> <init pos:line="130" pos:column="25">= <expr><op:operator pos:line="130" pos:column="27">new</op:operator> <call><name pos:line="130" pos:column="31">CastleDynamicProxyFactory</name><argument_list pos:line="130" pos:column="56">(<argument><expr><name><name pos:line="130" pos:column="57">loggerMock</name><op:operator pos:line="130" pos:column="67">.</op:operator><name pos:line="130" pos:column="68">Object</name></name></expr></argument>, <argument><expr><op:operator pos:line="130" pos:column="76">new</op:operator> <call><name><name pos:line="130" pos:column="80">Mock</name><argument_list pos:line="130" pos:column="84">&lt;<argument><name pos:line="130" pos:column="85">IMessageBroker</name></argument>&gt;</argument_list></name><argument_list pos:line="130" pos:column="100">()</argument_list></call><op:operator pos:line="130" pos:column="102">.</op:operator><name pos:line="130" pos:column="103">Object</name></expr></argument>, <argument><expr><lambda><parameter_list pos:line="130" pos:column="111">()</parameter_list> <op:operator pos:line="130" pos:column="114">=&gt;</op:operator> <op:operator pos:line="130" pos:column="117">new</op:operator> <call><name pos:line="130" pos:column="121">ExecutionTimer</name><argument_list pos:line="130" pos:column="135">(<argument><expr><call><name><name pos:line="130" pos:column="136">Stopwatch</name><op:operator pos:line="130" pos:column="145">.</op:operator><name pos:line="130" pos:column="146">StartNew</name></name><argument_list pos:line="130" pos:column="154">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><lambda><parameter_list pos:line="130" pos:column="159">()</parameter_list> <op:operator pos:line="130" pos:column="162">=&gt;</op:operator> <name><name pos:line="130" pos:column="165">RuntimePolicy</name><op:operator pos:line="130" pos:column="178">.</op:operator><name pos:line="130" pos:column="179">On</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="132" pos:column="13">Assert</name><op:operator pos:line="132" pos:column="19">.</op:operator><name pos:line="132" pos:column="20">Equal</name></name><argument_list pos:line="132" pos:column="25">(<argument><expr><name><name pos:line="132" pos:column="26">loggerMock</name><op:operator pos:line="132" pos:column="36">.</op:operator><name pos:line="132" pos:column="37">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="132" pos:column="45">factory</name><op:operator pos:line="132" pos:column="52">.</op:operator><name pos:line="132" pos:column="53">Logger</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="133" pos:column="13">Assert</name><op:operator pos:line="133" pos:column="19">.</op:operator><name pos:line="133" pos:column="20">NotNull</name></name><argument_list pos:line="133" pos:column="27">(<argument><expr><name><name pos:line="133" pos:column="28">factory</name><op:operator pos:line="133" pos:column="35">.</op:operator><name pos:line="133" pos:column="36">ProxyGenerator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="136" pos:column="9">[<expr><call><name pos:line="136" pos:column="10">Theory</name><argument_list pos:line="136" pos:column="16">(<argument><expr><name pos:line="136" pos:column="17">Skip</name> <op:operator pos:line="136" pos:column="22">=</op:operator> <lit:literal type="string" pos:line="136" pos:column="24">"Doesn't work because Moq and Glimpse both use Castle."</lit:literal></expr></argument>)</argument_list></call></expr><op:operator pos:line="136" pos:column="80">,</op:operator> <expr><name pos:line="136" pos:column="82">AutoMock</name></expr>]</attribute>
        <specifier pos:line="137" pos:column="9">public</specifier> <name pos:line="137" pos:column="16">void</name></type> <name pos:line="137" pos:column="21">ReturnFalseForAlreadyProxiedObjectsOnIsProxyable</name><parameter_list pos:line="137" pos:column="69">(<param><decl><type><name pos:line="137" pos:column="70">CastleDynamicProxyFactory</name></type> <name pos:line="137" pos:column="96">sut</name></decl></param>, <param><decl><type><name><name pos:line="137" pos:column="101">List</name><argument_list pos:line="137" pos:column="105">&lt;<argument><name pos:line="137" pos:column="106">IAlternateMethod</name></argument>&gt;</argument_list></name></type> <name pos:line="137" pos:column="124">methodInvocations</name></decl></param>)</parameter_list>
        <block pos:line="138" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="139" pos:column="13">var</name></type> <name pos:line="139" pos:column="17">result</name> <init pos:line="139" pos:column="24">= <expr><call><name><name pos:line="139" pos:column="26">sut</name><op:operator pos:line="139" pos:column="29">.</op:operator><name><name pos:line="139" pos:column="30">ExtendClass</name><argument_list pos:line="139" pos:column="41">&lt;<argument><name pos:line="139" pos:column="42">TestProxy</name></argument>&gt;</argument_list></name></name><argument_list pos:line="139" pos:column="52">(<argument><expr><name pos:line="139" pos:column="53">methodInvocations</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="141" pos:column="13">Assert</name><op:operator pos:line="141" pos:column="19">.</op:operator><name pos:line="141" pos:column="20">False</name></name><argument_list pos:line="141" pos:column="25">(<argument><expr><call><name><name pos:line="141" pos:column="26">sut</name><op:operator pos:line="141" pos:column="29">.</op:operator><name pos:line="141" pos:column="30">IsExtendClassEligible</name></name><argument_list pos:line="141" pos:column="51">(<argument><expr><call><name><name pos:line="141" pos:column="52">result</name><op:operator pos:line="141" pos:column="58">.</op:operator><name pos:line="141" pos:column="59">GetType</name></name><argument_list pos:line="141" pos:column="66">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="142" pos:column="13">Assert</name><op:operator pos:line="142" pos:column="19">.</op:operator><name pos:line="142" pos:column="20">False</name></name><argument_list pos:line="142" pos:column="25">(<argument><expr><call><name><name pos:line="142" pos:column="26">sut</name><op:operator pos:line="142" pos:column="29">.</op:operator><name pos:line="142" pos:column="30">IsWrapClassEligible</name></name><argument_list pos:line="142" pos:column="49">(<argument><expr><call><name><name pos:line="142" pos:column="50">result</name><op:operator pos:line="142" pos:column="56">.</op:operator><name pos:line="142" pos:column="57">GetType</name></name><argument_list pos:line="142" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="145" pos:column="9">[<expr><name pos:line="145" pos:column="10">Theory</name></expr><op:operator pos:line="145" pos:column="16">,</op:operator> <expr><name pos:line="145" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="146" pos:column="9">public</specifier> <name pos:line="146" pos:column="16">void</name></type> <name pos:line="146" pos:column="21">ExtendClassCreatesTrueProxy</name><parameter_list pos:line="146" pos:column="48">(<param><decl><type><name pos:line="146" pos:column="49">ILogger</name></type> <name pos:line="146" pos:column="57">logger</name></decl></param>, <param><decl><type><name pos:line="146" pos:column="65">IMessageBroker</name></type> <name pos:line="146" pos:column="80">messageBroker</name></decl></param>)</parameter_list>
        <block pos:line="147" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="148" pos:column="13">var</name></type> <name pos:line="148" pos:column="17">timer</name> <init pos:line="148" pos:column="23">= <expr><op:operator pos:line="148" pos:column="25">new</op:operator> <call><name pos:line="148" pos:column="29">ExecutionTimer</name><argument_list pos:line="148" pos:column="43">(<argument><expr><call><name><name pos:line="148" pos:column="44">Stopwatch</name><op:operator pos:line="148" pos:column="53">.</op:operator><name pos:line="148" pos:column="54">StartNew</name></name><argument_list pos:line="148" pos:column="62">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="150" pos:column="13">var</name></type> <name pos:line="150" pos:column="17">sut</name> <init pos:line="150" pos:column="21">= <expr><op:operator pos:line="150" pos:column="23">new</op:operator> <call><name pos:line="150" pos:column="27">CastleDynamicProxyFactory</name><argument_list pos:line="150" pos:column="52">(<argument><expr><name pos:line="150" pos:column="53">logger</name></expr></argument>, <argument><expr><name pos:line="150" pos:column="61">messageBroker</name></expr></argument>, <argument><expr><lambda><parameter_list pos:line="150" pos:column="76">()</parameter_list> <op:operator pos:line="150" pos:column="79">=&gt;</op:operator> <name pos:line="150" pos:column="82">timer</name></lambda></expr></argument>, <argument><expr><lambda><parameter_list pos:line="150" pos:column="89">()</parameter_list> <op:operator pos:line="150" pos:column="92">=&gt;</op:operator> <name><name pos:line="150" pos:column="95">RuntimePolicy</name><op:operator pos:line="150" pos:column="108">.</op:operator><name pos:line="150" pos:column="109">On</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="152" pos:column="13">var</name></type> <name pos:line="152" pos:column="17">overrideMeAlternate</name> <init pos:line="152" pos:column="37">= <expr><op:operator pos:line="152" pos:column="39">new</op:operator> <call><name><name pos:line="152" pos:column="43">OverrideMeAlternateMethod</name><argument_list pos:line="152" pos:column="68">&lt;<argument><name pos:line="152" pos:column="69">TestProxy</name></argument>&gt;</argument_list></name><argument_list pos:line="152" pos:column="79">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="153" pos:column="13">var</name></type> <name pos:line="153" pos:column="17">protectedOverrideMeAlternate</name> <init pos:line="153" pos:column="46">= <expr><op:operator pos:line="153" pos:column="48">new</op:operator> <call><name><name pos:line="153" pos:column="52">ProtectedOverrideMeAlternateMethod</name><argument_list pos:line="153" pos:column="86">&lt;<argument><name pos:line="153" pos:column="87">TestProxy</name></argument>&gt;</argument_list></name><argument_list pos:line="153" pos:column="97">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="155" pos:column="13">var</name></type> <name pos:line="155" pos:column="17">methodInvocations</name> <init pos:line="155" pos:column="35">= <expr><op:operator pos:line="155" pos:column="37">new</op:operator> <name><name pos:line="155" pos:column="41">List</name><argument_list pos:line="155" pos:column="45">&lt;<argument><name pos:line="155" pos:column="46">IAlternateMethod</name></argument>&gt;</argument_list></name> <block pos:line="155" pos:column="64">{ <expr><name pos:line="155" pos:column="66">overrideMeAlternate</name></expr>, <expr><name pos:line="155" pos:column="87">protectedOverrideMeAlternate</name></expr> }</block></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="157" pos:column="13">var</name></type> <name pos:line="157" pos:column="17">result</name> <init pos:line="157" pos:column="24">= <expr><call><name><name pos:line="157" pos:column="26">sut</name><op:operator pos:line="157" pos:column="29">.</op:operator><name><name pos:line="157" pos:column="30">ExtendClass</name><argument_list pos:line="157" pos:column="41">&lt;<argument><name pos:line="157" pos:column="42">TestProxy</name></argument>&gt;</argument_list></name></name><argument_list pos:line="157" pos:column="52">(<argument><expr><name pos:line="157" pos:column="53">methodInvocations</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="158" pos:column="13">result</name><op:operator pos:line="158" pos:column="19">.</op:operator><name pos:line="158" pos:column="20">OverrideMe</name></name><argument_list pos:line="158" pos:column="30">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="160" pos:column="13">Assert</name><op:operator pos:line="160" pos:column="19">.</op:operator><name pos:line="160" pos:column="20">Equal</name></name><argument_list pos:line="160" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="160" pos:column="26">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="160" pos:column="29">overrideMeAlternate</name><op:operator pos:line="160" pos:column="48">.</op:operator><name pos:line="160" pos:column="49">HitCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="161" pos:column="13">Assert</name><op:operator pos:line="161" pos:column="19">.</op:operator><name pos:line="161" pos:column="20">Equal</name></name><argument_list pos:line="161" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="161" pos:column="26">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="161" pos:column="29">protectedOverrideMeAlternate</name><op:operator pos:line="161" pos:column="57">.</op:operator><name pos:line="161" pos:column="58">HitCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="162" pos:column="13">Assert</name><op:operator pos:line="162" pos:column="19">.</op:operator><name pos:line="162" pos:column="20">Equal</name></name><argument_list pos:line="162" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="162" pos:column="26">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="162" pos:column="29">result</name><op:operator pos:line="162" pos:column="35">.</op:operator><name pos:line="162" pos:column="36">HitCountOverrideMe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="163" pos:column="13">Assert</name><op:operator pos:line="163" pos:column="19">.</op:operator><name pos:line="163" pos:column="20">Equal</name></name><argument_list pos:line="163" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="163" pos:column="26">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="163" pos:column="29">result</name><op:operator pos:line="163" pos:column="35">.</op:operator><name pos:line="163" pos:column="36">HitCountProtectedOverrideMe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="166" pos:column="9">[<expr><name pos:line="166" pos:column="10">Theory</name></expr><op:operator pos:line="166" pos:column="16">,</op:operator> <expr><name pos:line="166" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="167" pos:column="9">public</specifier> <name pos:line="167" pos:column="16">void</name></type> <name pos:line="167" pos:column="21">WrapClassCreatesWrappingProxy</name><parameter_list pos:line="167" pos:column="50">(<param><decl><type><name pos:line="167" pos:column="51">ILogger</name></type> <name pos:line="167" pos:column="59">logger</name></decl></param>, <param><decl><type><name pos:line="167" pos:column="67">IMessageBroker</name></type> <name pos:line="167" pos:column="82">messageBroker</name></decl></param>)</parameter_list>
        <block pos:line="168" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="169" pos:column="13">var</name></type> <name pos:line="169" pos:column="17">timer</name> <init pos:line="169" pos:column="23">= <expr><op:operator pos:line="169" pos:column="25">new</op:operator> <call><name pos:line="169" pos:column="29">ExecutionTimer</name><argument_list pos:line="169" pos:column="43">(<argument><expr><call><name><name pos:line="169" pos:column="44">Stopwatch</name><op:operator pos:line="169" pos:column="53">.</op:operator><name pos:line="169" pos:column="54">StartNew</name></name><argument_list pos:line="169" pos:column="62">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="171" pos:column="13">var</name></type> <name pos:line="171" pos:column="17">sut</name> <init pos:line="171" pos:column="21">= <expr><op:operator pos:line="171" pos:column="23">new</op:operator> <call><name pos:line="171" pos:column="27">CastleDynamicProxyFactory</name><argument_list pos:line="171" pos:column="52">(<argument><expr><name pos:line="171" pos:column="53">logger</name></expr></argument>, <argument><expr><name pos:line="171" pos:column="61">messageBroker</name></expr></argument>, <argument><expr><lambda><parameter_list pos:line="171" pos:column="76">()</parameter_list> <op:operator pos:line="171" pos:column="79">=&gt;</op:operator> <name pos:line="171" pos:column="82">timer</name></lambda></expr></argument>, <argument><expr><lambda><parameter_list pos:line="171" pos:column="89">()</parameter_list> <op:operator pos:line="171" pos:column="92">=&gt;</op:operator> <name><name pos:line="171" pos:column="95">RuntimePolicy</name><op:operator pos:line="171" pos:column="108">.</op:operator><name pos:line="171" pos:column="109">On</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="173" pos:column="13">var</name></type> <name pos:line="173" pos:column="17">overrideMeAlternate</name> <init pos:line="173" pos:column="37">= <expr><op:operator pos:line="173" pos:column="39">new</op:operator> <call><name><name pos:line="173" pos:column="43">OverrideMeAlternateMethod</name><argument_list pos:line="173" pos:column="68">&lt;<argument><name pos:line="173" pos:column="69">TestProxy</name></argument>&gt;</argument_list></name><argument_list pos:line="173" pos:column="79">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="174" pos:column="13">var</name></type> <name pos:line="174" pos:column="17">protectedOverrideMeAlternate</name> <init pos:line="174" pos:column="46">= <expr><op:operator pos:line="174" pos:column="48">new</op:operator> <call><name><name pos:line="174" pos:column="52">ProtectedOverrideMeAlternateMethod</name><argument_list pos:line="174" pos:column="86">&lt;<argument><name pos:line="174" pos:column="87">TestProxy</name></argument>&gt;</argument_list></name><argument_list pos:line="174" pos:column="97">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="176" pos:column="13">var</name></type> <name pos:line="176" pos:column="17">methodInvocations</name> <init pos:line="176" pos:column="35">= <expr><op:operator pos:line="176" pos:column="37">new</op:operator> <name><name pos:line="176" pos:column="41">List</name><argument_list pos:line="176" pos:column="45">&lt;<argument><name pos:line="176" pos:column="46">IAlternateMethod</name></argument>&gt;</argument_list></name> <block pos:line="176" pos:column="64">{ <expr><name pos:line="176" pos:column="66">overrideMeAlternate</name></expr>, <expr><name pos:line="176" pos:column="87">protectedOverrideMeAlternate</name></expr> }</block></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="178" pos:column="13">var</name></type> <name pos:line="178" pos:column="17">target</name> <init pos:line="178" pos:column="24">= <expr><op:operator pos:line="178" pos:column="26">new</op:operator> <call><name pos:line="178" pos:column="30">TestProxy</name><argument_list pos:line="178" pos:column="39">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="179" pos:column="13">var</name></type> <name pos:line="179" pos:column="17">result</name> <init pos:line="179" pos:column="24">= <expr><call><name><name pos:line="179" pos:column="26">sut</name><op:operator pos:line="179" pos:column="29">.</op:operator><name pos:line="179" pos:column="30">WrapClass</name></name><argument_list pos:line="179" pos:column="39">(<argument><expr><name pos:line="179" pos:column="40">target</name></expr></argument>, <argument><expr><name pos:line="179" pos:column="48">methodInvocations</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="180" pos:column="13">result</name><op:operator pos:line="180" pos:column="19">.</op:operator><name pos:line="180" pos:column="20">OverrideMe</name></name><argument_list pos:line="180" pos:column="30">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="182" pos:column="13">Assert</name><op:operator pos:line="182" pos:column="19">.</op:operator><name pos:line="182" pos:column="20">Equal</name></name><argument_list pos:line="182" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="182" pos:column="26">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="182" pos:column="29">overrideMeAlternate</name><op:operator pos:line="182" pos:column="48">.</op:operator><name pos:line="182" pos:column="49">HitCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="183" pos:column="13">Assert</name><op:operator pos:line="183" pos:column="19">.</op:operator><name pos:line="183" pos:column="20">Equal</name></name><argument_list pos:line="183" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="183" pos:column="26">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="183" pos:column="29">protectedOverrideMeAlternate</name><op:operator pos:line="183" pos:column="57">.</op:operator><name pos:line="183" pos:column="58">HitCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="184" pos:column="13">Assert</name><op:operator pos:line="184" pos:column="19">.</op:operator><name pos:line="184" pos:column="20">Equal</name></name><argument_list pos:line="184" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="184" pos:column="26">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="184" pos:column="29">result</name><op:operator pos:line="184" pos:column="35">.</op:operator><name pos:line="184" pos:column="36">HitCountOverrideMe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="185" pos:column="13">Assert</name><op:operator pos:line="185" pos:column="19">.</op:operator><name pos:line="185" pos:column="20">Equal</name></name><argument_list pos:line="185" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="185" pos:column="26">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="185" pos:column="29">result</name><op:operator pos:line="185" pos:column="35">.</op:operator><name pos:line="185" pos:column="36">HitCountProtectedOverrideMe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="186" pos:column="13">Assert</name><op:operator pos:line="186" pos:column="19">.</op:operator><name pos:line="186" pos:column="20">Equal</name></name><argument_list pos:line="186" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="186" pos:column="26">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="186" pos:column="29">target</name><op:operator pos:line="186" pos:column="35">.</op:operator><name pos:line="186" pos:column="36">HitCountOverrideMe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="187" pos:column="13">Assert</name><op:operator pos:line="187" pos:column="19">.</op:operator><name pos:line="187" pos:column="20">Equal</name></name><argument_list pos:line="187" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="187" pos:column="26">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="187" pos:column="29">target</name><op:operator pos:line="187" pos:column="35">.</op:operator><name pos:line="187" pos:column="36">HitCountProtectedOverrideMe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="190" pos:column="9">[<expr><name pos:line="190" pos:column="10">Theory</name></expr><op:operator pos:line="190" pos:column="16">,</op:operator> <expr><name pos:line="190" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="191" pos:column="9">public</specifier> <name pos:line="191" pos:column="16">void</name></type> <name pos:line="191" pos:column="21">WrapInterfaceCreatesWrappingProxy</name><parameter_list pos:line="191" pos:column="54">(<param><decl><type><name pos:line="191" pos:column="55">ILogger</name></type> <name pos:line="191" pos:column="63">logger</name></decl></param>, <param><decl><type><name pos:line="191" pos:column="71">IMessageBroker</name></type> <name pos:line="191" pos:column="86">messageBroker</name></decl></param>)</parameter_list>
        <block pos:line="192" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="193" pos:column="13">var</name></type> <name pos:line="193" pos:column="17">timer</name> <init pos:line="193" pos:column="23">= <expr><op:operator pos:line="193" pos:column="25">new</op:operator> <call><name pos:line="193" pos:column="29">ExecutionTimer</name><argument_list pos:line="193" pos:column="43">(<argument><expr><call><name><name pos:line="193" pos:column="44">Stopwatch</name><op:operator pos:line="193" pos:column="53">.</op:operator><name pos:line="193" pos:column="54">StartNew</name></name><argument_list pos:line="193" pos:column="62">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="195" pos:column="13">var</name></type> <name pos:line="195" pos:column="17">sut</name> <init pos:line="195" pos:column="21">= <expr><op:operator pos:line="195" pos:column="23">new</op:operator> <call><name pos:line="195" pos:column="27">CastleDynamicProxyFactory</name><argument_list pos:line="195" pos:column="52">(<argument><expr><name pos:line="195" pos:column="53">logger</name></expr></argument>, <argument><expr><name pos:line="195" pos:column="61">messageBroker</name></expr></argument>, <argument><expr><lambda><parameter_list pos:line="195" pos:column="76">()</parameter_list> <op:operator pos:line="195" pos:column="79">=&gt;</op:operator> <name pos:line="195" pos:column="82">timer</name></lambda></expr></argument>, <argument><expr><lambda><parameter_list pos:line="195" pos:column="89">()</parameter_list> <op:operator pos:line="195" pos:column="92">=&gt;</op:operator> <name><name pos:line="195" pos:column="95">RuntimePolicy</name><op:operator pos:line="195" pos:column="108">.</op:operator><name pos:line="195" pos:column="109">On</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="197" pos:column="13">var</name></type> <name pos:line="197" pos:column="17">overrideMeAlternate</name> <init pos:line="197" pos:column="37">= <expr><op:operator pos:line="197" pos:column="39">new</op:operator> <call><name><name pos:line="197" pos:column="43">OverrideMeAlternateMethod</name><argument_list pos:line="197" pos:column="68">&lt;<argument><name pos:line="197" pos:column="69">ITestProxy</name></argument>&gt;</argument_list></name><argument_list pos:line="197" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt> 

            <decl_stmt><decl><type><name pos:line="199" pos:column="13">var</name></type> <name pos:line="199" pos:column="17">methodInvocations</name> <init pos:line="199" pos:column="35">= <expr><op:operator pos:line="199" pos:column="37">new</op:operator> <name><name pos:line="199" pos:column="41">List</name><argument_list pos:line="199" pos:column="45">&lt;<argument><name pos:line="199" pos:column="46">IAlternateMethod</name></argument>&gt;</argument_list></name> <block pos:line="199" pos:column="64">{ <expr><name pos:line="199" pos:column="66">overrideMeAlternate</name></expr> }</block></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="201" pos:column="13">var</name></type> <name pos:line="201" pos:column="17">target</name> <init pos:line="201" pos:column="24">= <expr><op:operator pos:line="201" pos:column="26">new</op:operator> <call><name pos:line="201" pos:column="30">TestProxy</name><argument_list pos:line="201" pos:column="39">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="202" pos:column="13">var</name></type> <name pos:line="202" pos:column="17">result</name> <init pos:line="202" pos:column="24">= <expr><call><name><name pos:line="202" pos:column="26">sut</name><op:operator pos:line="202" pos:column="29">.</op:operator><name><name pos:line="202" pos:column="30">WrapInterface</name><argument_list pos:line="202" pos:column="43">&lt;<argument><name pos:line="202" pos:column="44">ITestProxy</name></argument>&gt;</argument_list></name></name><argument_list pos:line="202" pos:column="55">(<argument><expr><name pos:line="202" pos:column="56">target</name></expr></argument>, <argument><expr><name pos:line="202" pos:column="64">methodInvocations</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="203" pos:column="13">result</name><op:operator pos:line="203" pos:column="19">.</op:operator><name pos:line="203" pos:column="20">OverrideMe</name></name><argument_list pos:line="203" pos:column="30">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="205" pos:column="13">Assert</name><op:operator pos:line="205" pos:column="19">.</op:operator><name pos:line="205" pos:column="20">Equal</name></name><argument_list pos:line="205" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="205" pos:column="26">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="205" pos:column="29">overrideMeAlternate</name><op:operator pos:line="205" pos:column="48">.</op:operator><name pos:line="205" pos:column="49">HitCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
            <expr_stmt><expr><call><name><name pos:line="206" pos:column="13">Assert</name><op:operator pos:line="206" pos:column="19">.</op:operator><name pos:line="206" pos:column="20">Equal</name></name><argument_list pos:line="206" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="206" pos:column="26">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="206" pos:column="29">result</name><op:operator pos:line="206" pos:column="35">.</op:operator><name pos:line="206" pos:column="36">HitCountOverrideMe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="207" pos:column="13">Assert</name><op:operator pos:line="207" pos:column="19">.</op:operator><name pos:line="207" pos:column="20">Equal</name></name><argument_list pos:line="207" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="207" pos:column="26">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="207" pos:column="29">result</name><op:operator pos:line="207" pos:column="35">.</op:operator><name pos:line="207" pos:column="36">HitCountProtectedOverrideMe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="208" pos:column="13">Assert</name><op:operator pos:line="208" pos:column="19">.</op:operator><name pos:line="208" pos:column="20">Equal</name></name><argument_list pos:line="208" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="208" pos:column="26">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="208" pos:column="29">target</name><op:operator pos:line="208" pos:column="35">.</op:operator><name pos:line="208" pos:column="36">HitCountOverrideMe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="209" pos:column="13">Assert</name><op:operator pos:line="209" pos:column="19">.</op:operator><name pos:line="209" pos:column="20">Equal</name></name><argument_list pos:line="209" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="209" pos:column="26">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="209" pos:column="29">target</name><op:operator pos:line="209" pos:column="35">.</op:operator><name pos:line="209" pos:column="36">HitCountProtectedOverrideMe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="212" pos:column="9">[<expr><name pos:line="212" pos:column="10">Theory</name></expr><op:operator pos:line="212" pos:column="16">,</op:operator> <expr><name pos:line="212" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="213" pos:column="9">public</specifier> <name pos:line="213" pos:column="16">void</name></type> <name pos:line="213" pos:column="21">SupportMixins</name><parameter_list pos:line="213" pos:column="34">(<param><decl><type><name pos:line="213" pos:column="35">CastleDynamicProxyFactory</name></type> <name pos:line="213" pos:column="61">factory</name></decl></param>)</parameter_list>
        <block pos:line="214" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="215" pos:column="13">const</specifier> <name pos:line="215" pos:column="19">string</name></type> <name pos:line="215" pos:column="26">expectedName</name> <init pos:line="215" pos:column="39">= <expr><lit:literal type="string" pos:line="215" pos:column="41">"any string"</lit:literal></expr></init></decl>;</decl_stmt> 
            <decl_stmt><decl><type><name pos:line="216" pos:column="13">var</name></type> <name pos:line="216" pos:column="17">dummyMixin</name> <init pos:line="216" pos:column="28">= <expr><op:operator pos:line="216" pos:column="30">new</op:operator> <name><name pos:line="216" pos:column="34">List</name><argument_list pos:line="216" pos:column="38">&lt;<argument><name pos:line="216" pos:column="39">object</name></argument>&gt;</argument_list></name> <block pos:line="216" pos:column="47">{ <expr><op:operator pos:line="216" pos:column="49">new</op:operator> <name pos:line="216" pos:column="53">DummyMixin</name> <block pos:line="216" pos:column="64">{ <expr><name pos:line="216" pos:column="66">Name</name> <op:operator pos:line="216" pos:column="71">=</op:operator> <name pos:line="216" pos:column="73">expectedName</name></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="218" pos:column="13">var</name></type> <name pos:line="218" pos:column="17">proxy</name> <init pos:line="218" pos:column="23">= <expr><call><name><name pos:line="218" pos:column="25">factory</name><op:operator pos:line="218" pos:column="32">.</op:operator><name><name pos:line="218" pos:column="33">ExtendClass</name><argument_list pos:line="218" pos:column="44">&lt;<argument><name pos:line="218" pos:column="45">DummyTab</name></argument>&gt;</argument_list></name></name><argument_list pos:line="218" pos:column="54">(<argument><expr><call><name><name pos:line="218" pos:column="55">Enumerable</name><op:operator pos:line="218" pos:column="65">.</op:operator><name><name pos:line="218" pos:column="66">Empty</name><argument_list pos:line="218" pos:column="71">&lt;<argument><name pos:line="218" pos:column="72">IAlternateMethod</name></argument>&gt;</argument_list></name></name><argument_list pos:line="218" pos:column="89">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="218" pos:column="93">dummyMixin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="220" pos:column="13">Assert</name><op:operator pos:line="220" pos:column="19">.</op:operator><name pos:line="220" pos:column="20">NotNull</name></name><argument_list pos:line="220" pos:column="27">(<argument><expr><name pos:line="220" pos:column="28">proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="221" pos:column="13">Assert</name><op:operator pos:line="221" pos:column="19">.</op:operator><name pos:line="221" pos:column="20">NotNull</name></name><argument_list pos:line="221" pos:column="27">(<argument><expr><name pos:line="221" pos:column="28">proxy</name> <op:operator pos:line="221" pos:column="34">as</op:operator> <name pos:line="221" pos:column="37">ITab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="223" pos:column="13">var</name></type> <name pos:line="223" pos:column="17">mixin</name> <init pos:line="223" pos:column="23">= <expr><name pos:line="223" pos:column="25">proxy</name> <op:operator pos:line="223" pos:column="31">as</op:operator> <name pos:line="223" pos:column="34">IDummyMixin</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="225" pos:column="13">Assert</name><op:operator pos:line="225" pos:column="19">.</op:operator><name pos:line="225" pos:column="20">NotNull</name></name><argument_list pos:line="225" pos:column="27">(<argument><expr><name pos:line="225" pos:column="28">mixin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="226" pos:column="13">Assert</name><op:operator pos:line="226" pos:column="19">.</op:operator><name pos:line="226" pos:column="20">Equal</name></name><argument_list pos:line="226" pos:column="25">(<argument><expr><name pos:line="226" pos:column="26">expectedName</name></expr></argument>, <argument><expr><name><name pos:line="226" pos:column="40">mixin</name><op:operator pos:line="226" pos:column="45">.</op:operator><name pos:line="226" pos:column="46">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <class type="interface"><specifier pos:line="229" pos:column="9">public</specifier> interface <name pos:line="229" pos:column="26">ITestProxy</name>
        <block pos:line="230" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="231" pos:column="13">int</name></type> <name pos:line="231" pos:column="17">HitCountOverrideMe</name> <block pos:line="231" pos:column="36">{ <function_decl><name pos:line="231" pos:column="38">get</name>;</function_decl> <function_decl><name pos:line="231" pos:column="43">set</name>;</function_decl> }</block></decl></decl_stmt>

            <decl_stmt><decl><type><name pos:line="233" pos:column="13">int</name></type> <name pos:line="233" pos:column="17">HitCountProtectedOverrideMe</name> <block pos:line="233" pos:column="45">{ <function_decl><name pos:line="233" pos:column="47">get</name>;</function_decl> <function_decl><name pos:line="233" pos:column="52">set</name>;</function_decl> }</block></decl></decl_stmt>

            <function_decl><type><name pos:line="235" pos:column="13">void</name></type> <name pos:line="235" pos:column="18">OverrideMe</name><parameter_list pos:line="235" pos:column="28">()</parameter_list>;</function_decl>
        }</block></class>

        <class><specifier pos:line="238" pos:column="9">public</specifier> class <name pos:line="238" pos:column="22">TestProxy</name> <super pos:line="238" pos:column="32">: <name pos:line="238" pos:column="34">ITestProxy</name></super>
        <block pos:line="239" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="240" pos:column="13">public</specifier> <name pos:line="240" pos:column="20">int</name></type> <name pos:line="240" pos:column="24">HitCountOverrideMe</name> <block pos:line="240" pos:column="43">{ <function_decl><name pos:line="240" pos:column="45">get</name>;</function_decl> <function_decl><name pos:line="240" pos:column="50">set</name>;</function_decl> }</block></decl></decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="241" pos:column="13">public</specifier> <name pos:line="241" pos:column="20">int</name></type> <name pos:line="241" pos:column="24">HitCountProtectedOverrideMe</name> <block pos:line="241" pos:column="52">{ <function_decl><name pos:line="241" pos:column="54">get</name>;</function_decl> <function_decl><name pos:line="241" pos:column="59">set</name>;</function_decl> }</block></decl></decl_stmt>

            <function><type><specifier pos:line="243" pos:column="13">public</specifier> <specifier pos:line="243" pos:column="20">virtual</specifier> <name pos:line="243" pos:column="28">void</name></type> <name pos:line="243" pos:column="33">OverrideMe</name><parameter_list pos:line="243" pos:column="43">()</parameter_list>
            <block pos:line="244" pos:column="13">{
                <expr_stmt><expr><name pos:line="245" pos:column="17">HitCountOverrideMe</name><op:operator pos:line="245" pos:column="35">++</op:operator></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="246" pos:column="17">ProtectedOverrideMe</name><argument_list pos:line="246" pos:column="36">()</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <function><type><specifier pos:line="249" pos:column="13">protected</specifier> <specifier pos:line="249" pos:column="23">virtual</specifier> <name pos:line="249" pos:column="31">void</name></type> <name pos:line="249" pos:column="36">ProtectedOverrideMe</name><parameter_list pos:line="249" pos:column="55">()</parameter_list>
            <block pos:line="250" pos:column="13">{
                <expr_stmt><expr><name pos:line="251" pos:column="17">HitCountProtectedOverrideMe</name><op:operator pos:line="251" pos:column="44">++</op:operator></expr>;</expr_stmt>
            }</block></function>
        }</block></class>

        <class><specifier pos:line="255" pos:column="9">public</specifier> <specifier pos:line="255" pos:column="16">sealed</specifier> class <name pos:line="255" pos:column="29">SealedTestProxy</name> <super pos:line="255" pos:column="45">: <name pos:line="255" pos:column="47">ITestProxy</name></super>
        <block pos:line="256" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="257" pos:column="13">public</specifier> <name pos:line="257" pos:column="20">int</name></type> <name pos:line="257" pos:column="24">HitCountOverrideMe</name> <block pos:line="257" pos:column="43">{ <function_decl><name pos:line="257" pos:column="45">get</name>;</function_decl> <function_decl><name pos:line="257" pos:column="50">set</name>;</function_decl> }</block></decl></decl_stmt>

            <decl_stmt><decl><type><specifier pos:line="259" pos:column="13">public</specifier> <name pos:line="259" pos:column="20">int</name></type> <name pos:line="259" pos:column="24">HitCountProtectedOverrideMe</name> <block pos:line="259" pos:column="52">{ <function_decl><name pos:line="259" pos:column="54">get</name>;</function_decl> <function_decl><name pos:line="259" pos:column="59">set</name>;</function_decl> }</block></decl></decl_stmt>

            <function><type><specifier pos:line="261" pos:column="13">public</specifier> <name pos:line="261" pos:column="20">void</name></type> <name pos:line="261" pos:column="25">OverrideMe</name><parameter_list pos:line="261" pos:column="35">()</parameter_list>
            <block pos:line="262" pos:column="13">{
            }</block></function>
        }</block></class>

        <class><specifier pos:line="266" pos:column="9">public</specifier> class <name><name pos:line="266" pos:column="22">OverrideMeAlternateMethod</name><argument_list pos:line="266" pos:column="47">&lt;<argument><name pos:line="266" pos:column="48">T</name></argument>&gt;</argument_list></name> <super pos:line="266" pos:column="51">: <name pos:line="266" pos:column="53">AlternateMethod</name></super>
        <block pos:line="267" pos:column="9">{
            <constructor><specifier pos:line="268" pos:column="13">public</specifier> <name pos:line="268" pos:column="20">OverrideMeAlternateMethod</name><parameter_list pos:line="268" pos:column="45">()</parameter_list>
                <member_list pos:line="269" pos:column="17">: <call><name pos:line="269" pos:column="19">base</name><argument_list pos:line="269" pos:column="23">(<argument><expr><call><name pos:line="269" pos:column="24">typeof</name><argument_list pos:line="269" pos:column="30">(<argument><expr><name pos:line="269" pos:column="31">T</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="269" pos:column="35">"OverrideMe"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="269" pos:column="49">BindingFlags</name><op:operator pos:line="269" pos:column="61">.</op:operator><name pos:line="269" pos:column="62">Public</name></name> <op:operator pos:line="269" pos:column="69">|</op:operator> <name><name pos:line="269" pos:column="71">BindingFlags</name><op:operator pos:line="269" pos:column="83">.</op:operator><name pos:line="269" pos:column="84">Instance</name></name></expr></argument>)</argument_list></call>
            </member_list><block pos:line="270" pos:column="13">{
            }</block></constructor>

            <decl_stmt><decl><type><specifier pos:line="273" pos:column="13">public</specifier> <name pos:line="273" pos:column="20">int</name></type> <name pos:line="273" pos:column="24">HitCount</name> <block pos:line="273" pos:column="33">{ <function_decl><name pos:line="273" pos:column="35">get</name>;</function_decl> <function_decl><name pos:line="273" pos:column="40">set</name>;</function_decl> }</block></decl></decl_stmt>

            <function><type><specifier pos:line="275" pos:column="13">public</specifier> <specifier pos:line="275" pos:column="20">override</specifier> <name pos:line="275" pos:column="29">void</name></type> <name pos:line="275" pos:column="34">PostImplementation</name><parameter_list pos:line="275" pos:column="52">(<param><decl><type><name pos:line="275" pos:column="53">IAlternateMethodContext</name></type> <name pos:line="275" pos:column="77">context</name></decl></param>, <param><decl><type><name pos:line="275" pos:column="86">TimerResult</name></type> <name pos:line="275" pos:column="98">timerResult</name></decl></param>)</parameter_list>
            <block pos:line="276" pos:column="13">{
                <expr_stmt><expr><name pos:line="277" pos:column="17">HitCount</name><op:operator pos:line="277" pos:column="25">++</op:operator></expr>;</expr_stmt>
            }</block></function>
        }</block></class>

        <class><specifier pos:line="281" pos:column="9">public</specifier> class <name><name pos:line="281" pos:column="22">ProtectedOverrideMeAlternateMethod</name><argument_list pos:line="281" pos:column="56">&lt;<argument><name pos:line="281" pos:column="57">T</name></argument>&gt;</argument_list></name> <super pos:line="281" pos:column="60">: <name pos:line="281" pos:column="62">AlternateMethod</name></super>
        <block pos:line="282" pos:column="9">{
            <constructor><specifier pos:line="283" pos:column="13">public</specifier> <name pos:line="283" pos:column="20">ProtectedOverrideMeAlternateMethod</name><parameter_list pos:line="283" pos:column="54">()</parameter_list>
                <member_list pos:line="284" pos:column="17">: <call><name pos:line="284" pos:column="19">base</name><argument_list pos:line="284" pos:column="23">(<argument><expr><call><name pos:line="284" pos:column="24">typeof</name><argument_list pos:line="284" pos:column="30">(<argument><expr><name pos:line="284" pos:column="31">T</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="284" pos:column="35">"ProtectedOverrideMe"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="284" pos:column="58">BindingFlags</name><op:operator pos:line="284" pos:column="70">.</op:operator><name pos:line="284" pos:column="71">NonPublic</name></name> <op:operator pos:line="284" pos:column="81">|</op:operator> <name><name pos:line="284" pos:column="83">BindingFlags</name><op:operator pos:line="284" pos:column="95">.</op:operator><name pos:line="284" pos:column="96">Instance</name></name></expr></argument>)</argument_list></call>
            </member_list><block pos:line="285" pos:column="13">{
            }</block></constructor>

            <decl_stmt><decl><type><specifier pos:line="288" pos:column="13">public</specifier> <name pos:line="288" pos:column="20">int</name></type> <name pos:line="288" pos:column="24">HitCount</name> <block pos:line="288" pos:column="33">{ <function_decl><name pos:line="288" pos:column="35">get</name>;</function_decl> <function_decl><name pos:line="288" pos:column="40">set</name>;</function_decl> }</block></decl></decl_stmt>

            <function><type><specifier pos:line="290" pos:column="13">public</specifier> <specifier pos:line="290" pos:column="20">override</specifier> <name pos:line="290" pos:column="29">void</name></type> <name pos:line="290" pos:column="34">PostImplementation</name><parameter_list pos:line="290" pos:column="52">(<param><decl><type><name pos:line="290" pos:column="53">IAlternateMethodContext</name></type> <name pos:line="290" pos:column="77">context</name></decl></param>, <param><decl><type><name pos:line="290" pos:column="86">TimerResult</name></type> <name pos:line="290" pos:column="98">timerResult</name></decl></param>)</parameter_list>
            <block pos:line="291" pos:column="13">{
                <expr_stmt><expr><name pos:line="292" pos:column="17">HitCount</name><op:operator pos:line="292" pos:column="25">++</op:operator></expr>;</expr_stmt>
            }</block></function>
        }</block></class>
    }</block></class>
}</block></namespace></unit>
