<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Core\ResourcesShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Globalization</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Glimpse</name><op:operator pos:line="3" pos:column="14">.</op:operator><name pos:line="3" pos:column="15">Core</name></name>;</using>
<using pos:line="4" pos:column="1">using <name pos:line="4" pos:column="7">Xunit</name>;</using>

<namespace pos:line="6" pos:column="1">namespace <name><name pos:line="6" pos:column="11">Glimpse</name><op:operator pos:line="6" pos:column="18">.</op:operator><name pos:line="6" pos:column="19">Test</name><op:operator pos:line="6" pos:column="23">.</op:operator><name pos:line="6" pos:column="24">Core</name></name>
<block pos:line="7" pos:column="1">{
    <class><specifier pos:line="8" pos:column="5">public</specifier> class <name pos:line="8" pos:column="18">ResourcesShould</name><super pos:line="8" pos:column="33">:<name pos:line="8" pos:column="34">IDisposable</name></super>
    <block pos:line="9" pos:column="5">{
        <comment type="line" pos:line="10" pos:column="9">//These tests aren't really needed. I was just being a tad anal when combing through coverage percentages.</comment>

        <function><type><attribute pos:line="12" pos:column="9">[<expr><name pos:line="12" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="13" pos:column="9">public</specifier> <name pos:line="13" pos:column="16">void</name></type> <name pos:line="13" pos:column="21">ChangeCulture</name><parameter_list pos:line="13" pos:column="34">()</parameter_list>
        <block pos:line="14" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="15" pos:column="13">Assert</name><op:operator pos:line="15" pos:column="19">.</op:operator><name pos:line="15" pos:column="20">Null</name></name><argument_list pos:line="15" pos:column="24">(<argument><expr><name><name pos:line="15" pos:column="25">Resources</name><op:operator pos:line="15" pos:column="34">.</op:operator><name pos:line="15" pos:column="35">Culture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="17" pos:column="13">var</name></type> <name pos:line="17" pos:column="17">us</name> <init pos:line="17" pos:column="20">= <expr><op:operator pos:line="17" pos:column="22">new</op:operator> <call><name pos:line="17" pos:column="26">CultureInfo</name><argument_list pos:line="17" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="17" pos:column="38">"en-US"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name><name pos:line="19" pos:column="13">Resources</name><op:operator pos:line="19" pos:column="22">.</op:operator><name pos:line="19" pos:column="23">Culture</name></name> <op:operator pos:line="19" pos:column="31">=</op:operator> <name pos:line="19" pos:column="33">us</name></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="21" pos:column="13">Assert</name><op:operator pos:line="21" pos:column="19">.</op:operator><name pos:line="21" pos:column="20">Equal</name></name><argument_list pos:line="21" pos:column="25">(<argument><expr><name pos:line="21" pos:column="26">us</name></expr></argument>,  <argument><expr><name><name pos:line="21" pos:column="31">Resources</name><op:operator pos:line="21" pos:column="40">.</op:operator><name pos:line="21" pos:column="41">Culture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="24" pos:column="9">[<expr><name pos:line="24" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="25" pos:column="9">public</specifier> <name pos:line="25" pos:column="16">void</name></type> <name pos:line="25" pos:column="21">GetResourceManager</name><parameter_list pos:line="25" pos:column="39">()</parameter_list>
        <block pos:line="26" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="27" pos:column="13">Assert</name><op:operator pos:line="27" pos:column="19">.</op:operator><name pos:line="27" pos:column="20">NotNull</name></name><argument_list pos:line="27" pos:column="27">(<argument><expr><name><name pos:line="27" pos:column="28">Resources</name><op:operator pos:line="27" pos:column="37">.</op:operator><name pos:line="27" pos:column="38">ResourceManager</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="30" pos:column="9">[<expr><name pos:line="30" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="31" pos:column="9">public</specifier> <name pos:line="31" pos:column="16">void</name></type> <name pos:line="31" pos:column="21">ResourcesHaveValues</name><parameter_list pos:line="31" pos:column="40">()</parameter_list>
        <block pos:line="32" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="33" pos:column="13">Assert</name><op:operator pos:line="33" pos:column="19">.</op:operator><name pos:line="33" pos:column="20">NotNull</name></name><argument_list pos:line="33" pos:column="27">(<argument><expr><name><name pos:line="33" pos:column="28">Resources</name><op:operator pos:line="33" pos:column="37">.</op:operator><name pos:line="33" pos:column="38">ExecutePolicyWarning</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="34" pos:column="13">Assert</name><op:operator pos:line="34" pos:column="19">.</op:operator><name pos:line="34" pos:column="20">NotNull</name></name><argument_list pos:line="34" pos:column="27">(<argument><expr><name><name pos:line="34" pos:column="28">Resources</name><op:operator pos:line="34" pos:column="37">.</op:operator><name pos:line="34" pos:column="38">ExecuteResourceDuplicateError</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="35" pos:column="13">Assert</name><op:operator pos:line="35" pos:column="19">.</op:operator><name pos:line="35" pos:column="20">NotNull</name></name><argument_list pos:line="35" pos:column="27">(<argument><expr><name><name pos:line="35" pos:column="28">Resources</name><op:operator pos:line="35" pos:column="37">.</op:operator><name pos:line="35" pos:column="38">ExecuteResourceMissingError</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="36" pos:column="13">Assert</name><op:operator pos:line="36" pos:column="19">.</op:operator><name pos:line="36" pos:column="20">NotNull</name></name><argument_list pos:line="36" pos:column="27">(<argument><expr><name><name pos:line="36" pos:column="28">Resources</name><op:operator pos:line="36" pos:column="37">.</op:operator><name pos:line="36" pos:column="38">ExecuteTabError</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="37" pos:column="13">Assert</name><op:operator pos:line="37" pos:column="19">.</op:operator><name pos:line="37" pos:column="20">NotNull</name></name><argument_list pos:line="37" pos:column="27">(<argument><expr><name><name pos:line="37" pos:column="28">Resources</name><op:operator pos:line="37" pos:column="37">.</op:operator><name pos:line="37" pos:column="38">InitializeInspectorError</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="38" pos:column="13">Assert</name><op:operator pos:line="38" pos:column="19">.</op:operator><name pos:line="38" pos:column="20">NotNull</name></name><argument_list pos:line="38" pos:column="27">(<argument><expr><name><name pos:line="38" pos:column="28">Resources</name><op:operator pos:line="38" pos:column="37">.</op:operator><name pos:line="38" pos:column="38">InitializeTabError</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="39" pos:column="13">Assert</name><op:operator pos:line="39" pos:column="19">.</op:operator><name pos:line="39" pos:column="20">NotNull</name></name><argument_list pos:line="39" pos:column="27">(<argument><expr><name><name pos:line="39" pos:column="28">Resources</name><op:operator pos:line="39" pos:column="37">.</op:operator><name pos:line="39" pos:column="38">EndRequestOutOfOrderRuntimeMethodCall</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="40" pos:column="13">Assert</name><op:operator pos:line="40" pos:column="19">.</op:operator><name pos:line="40" pos:column="20">NotNull</name></name><argument_list pos:line="40" pos:column="27">(<argument><expr><name><name pos:line="40" pos:column="28">Resources</name><op:operator pos:line="40" pos:column="37">.</op:operator><name pos:line="40" pos:column="38">RenderClientScriptImproperImplementationWarning</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="41" pos:column="13">Assert</name><op:operator pos:line="41" pos:column="19">.</op:operator><name pos:line="41" pos:column="20">NotNull</name></name><argument_list pos:line="41" pos:column="27">(<argument><expr><name><name pos:line="41" pos:column="28">Resources</name><op:operator pos:line="41" pos:column="37">.</op:operator><name pos:line="41" pos:column="38">RenderClientScriptMissingResourceWarning</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="42" pos:column="13">Assert</name><op:operator pos:line="42" pos:column="19">.</op:operator><name pos:line="42" pos:column="20">NotNull</name></name><argument_list pos:line="42" pos:column="27">(<argument><expr><name><name pos:line="42" pos:column="28">Resources</name><op:operator pos:line="42" pos:column="37">.</op:operator><name pos:line="42" pos:column="38">GenerateUriParameterKeysWarning</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="45" pos:column="9">[<expr><name pos:line="45" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="46" pos:column="9">public</specifier> <name pos:line="46" pos:column="16">void</name></type> <name pos:line="46" pos:column="21">ResourceRemainTheSameAcrossCultures</name><parameter_list pos:line="46" pos:column="56">()</parameter_list>
        <block pos:line="47" pos:column="9">{
            <expr_stmt><expr><name><name pos:line="48" pos:column="13">Resources</name><op:operator pos:line="48" pos:column="22">.</op:operator><name pos:line="48" pos:column="23">Culture</name></name> <op:operator pos:line="48" pos:column="31">=</op:operator> <op:operator pos:line="48" pos:column="33">new</op:operator> <call><name pos:line="48" pos:column="37">CultureInfo</name><argument_list pos:line="48" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="48" pos:column="49">"en-US"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="49" pos:column="13">var</name></type> <name pos:line="49" pos:column="17">enWarn</name> <init pos:line="49" pos:column="24">= <expr><name><name pos:line="49" pos:column="26">Resources</name><op:operator pos:line="49" pos:column="35">.</op:operator><name pos:line="49" pos:column="36">ExecutePolicyWarning</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name><name pos:line="51" pos:column="13">Resources</name><op:operator pos:line="51" pos:column="22">.</op:operator><name pos:line="51" pos:column="23">Culture</name></name> <op:operator pos:line="51" pos:column="31">=</op:operator> <op:operator pos:line="51" pos:column="33">new</op:operator> <call><name pos:line="51" pos:column="37">CultureInfo</name><argument_list pos:line="51" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="51" pos:column="49">"ja-JP"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="52" pos:column="13">var</name></type> <name pos:line="52" pos:column="17">jpWarn</name> <init pos:line="52" pos:column="24">= <expr><name><name pos:line="52" pos:column="26">Resources</name><op:operator pos:line="52" pos:column="35">.</op:operator><name pos:line="52" pos:column="36">ExecutePolicyWarning</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="54" pos:column="13">Assert</name><op:operator pos:line="54" pos:column="19">.</op:operator><name pos:line="54" pos:column="20">Equal</name></name><argument_list pos:line="54" pos:column="25">(<argument><expr><name pos:line="54" pos:column="26">enWarn</name></expr></argument>, <argument><expr><name pos:line="54" pos:column="34">jpWarn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="57" pos:column="9">[<expr><name pos:line="57" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="58" pos:column="9">public</specifier> <name pos:line="58" pos:column="16">void</name></type> <name pos:line="58" pos:column="21">Construct</name><parameter_list pos:line="58" pos:column="30">()</parameter_list>
        <block pos:line="59" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="60" pos:column="13">Assert</name><op:operator pos:line="60" pos:column="19">.</op:operator><name pos:line="60" pos:column="20">NotNull</name></name><argument_list pos:line="60" pos:column="27">(<argument><expr><op:operator pos:line="60" pos:column="28">new</op:operator> <call><name pos:line="60" pos:column="32">Resources</name><argument_list pos:line="60" pos:column="41">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="63" pos:column="9">public</specifier> <name pos:line="63" pos:column="16">void</name></type> <name pos:line="63" pos:column="21">Dispose</name><parameter_list pos:line="63" pos:column="28">()</parameter_list>
        <block pos:line="64" pos:column="9">{
            <expr_stmt><expr><name><name pos:line="65" pos:column="13">Resources</name><op:operator pos:line="65" pos:column="22">.</op:operator><name pos:line="65" pos:column="23">Culture</name></name> <op:operator pos:line="65" pos:column="31">=</op:operator> <name pos:line="65" pos:column="33">null</name></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
