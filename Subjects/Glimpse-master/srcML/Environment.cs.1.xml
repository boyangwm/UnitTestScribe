<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.AspNet\Tab\Environment.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Diagnostics</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Linq</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Reflection</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">System</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">Threading</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">System</name><op:operator pos:line="7" pos:column="13">.</op:operator><name pos:line="7" pos:column="14">Web</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">System</name><op:operator pos:line="8" pos:column="13">.</op:operator><name pos:line="8" pos:column="14">Web</name><op:operator pos:line="8" pos:column="17">.</op:operator><name pos:line="8" pos:column="18">Compilation</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">Glimpse</name><op:operator pos:line="9" pos:column="14">.</op:operator><name pos:line="9" pos:column="15">AspNet</name><op:operator pos:line="9" pos:column="21">.</op:operator><name pos:line="9" pos:column="22">Extensibility</name></name>;</using>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">Glimpse</name><op:operator pos:line="10" pos:column="14">.</op:operator><name pos:line="10" pos:column="15">AspNet</name><op:operator pos:line="10" pos:column="21">.</op:operator><name pos:line="10" pos:column="22">Extensions</name></name>;</using>
<using pos:line="11" pos:column="1">using <name><name pos:line="11" pos:column="7">Glimpse</name><op:operator pos:line="11" pos:column="14">.</op:operator><name pos:line="11" pos:column="15">AspNet</name><op:operator pos:line="11" pos:column="21">.</op:operator><name pos:line="11" pos:column="22">Model</name></name>;</using>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">Glimpse</name><op:operator pos:line="12" pos:column="14">.</op:operator><name pos:line="12" pos:column="15">Core</name><op:operator pos:line="12" pos:column="19">.</op:operator><name pos:line="12" pos:column="20">Extensibility</name></name>;</using>

<namespace pos:line="14" pos:column="1">namespace <name><name pos:line="14" pos:column="11">Glimpse</name><op:operator pos:line="14" pos:column="18">.</op:operator><name pos:line="14" pos:column="19">AspNet</name><op:operator pos:line="14" pos:column="25">.</op:operator><name pos:line="14" pos:column="26">Tab</name></name>
<block pos:line="15" pos:column="1">{
    <class><specifier pos:line="16" pos:column="5">public</specifier> class <name pos:line="16" pos:column="18">Environment</name> <super pos:line="16" pos:column="30">: <name pos:line="16" pos:column="32">AspNetTab</name>, <name pos:line="16" pos:column="43">IDocumentation</name>, <name pos:line="16" pos:column="59">IKey</name>, <name pos:line="16" pos:column="65">ILayoutControl</name></super>
    <block pos:line="17" pos:column="5">{ 
        <decl_stmt><decl><type><specifier pos:line="18" pos:column="9">private</specifier> <specifier pos:line="18" pos:column="17">readonly</specifier> <name><name pos:line="18" pos:column="26">IEnumerable</name><argument_list pos:line="18" pos:column="37">&lt;<argument><name pos:line="18" pos:column="38">string</name></argument>&gt;</argument_list></name></type> <name pos:line="18" pos:column="46">systemNamspaces</name> <init pos:line="18" pos:column="62">= <expr><op:operator pos:line="18" pos:column="64">new</op:operator> <name><name pos:line="18" pos:column="68">List</name><argument_list pos:line="18" pos:column="72">&lt;<argument><name pos:line="18" pos:column="73">string</name></argument>&gt;</argument_list></name> <block pos:line="18" pos:column="81">{ <expr><lit:literal type="string" pos:line="18" pos:column="83">"System"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="18" pos:column="93">"Microsoft"</lit:literal></expr> }</block></expr></init></decl>;</decl_stmt> 

        <decl_stmt><decl><type><specifier pos:line="20" pos:column="9">public</specifier> <specifier pos:line="20" pos:column="16">override</specifier> <name pos:line="20" pos:column="25">string</name></type> <name pos:line="20" pos:column="32">Name</name>
        <block pos:line="21" pos:column="9">{
            <function><name pos:line="22" pos:column="13">get</name> <block pos:line="22" pos:column="17">{ <return pos:line="22" pos:column="19">return <expr><lit:literal type="string" pos:line="22" pos:column="26">"Environment"</lit:literal></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="25" pos:column="9">public</specifier> <name pos:line="25" pos:column="16">string</name></type> <name pos:line="25" pos:column="23">Key</name> 
        <block pos:line="26" pos:column="9">{
            <function><name pos:line="27" pos:column="13">get</name> <block pos:line="27" pos:column="17">{ <return pos:line="27" pos:column="19">return <expr><lit:literal type="string" pos:line="27" pos:column="26">"glimpse_environment"</lit:literal></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="30" pos:column="9">public</specifier> <name pos:line="30" pos:column="16">string</name></type> <name pos:line="30" pos:column="23">DocumentationUri</name>
        <block pos:line="31" pos:column="9">{
            <function><name pos:line="32" pos:column="13">get</name> <block pos:line="32" pos:column="17">{ <return pos:line="32" pos:column="19">return <expr><lit:literal type="string" pos:line="32" pos:column="26">"http://getglimpse.com/Help/Environment-Tab"</lit:literal></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="35" pos:column="9">public</specifier> <name pos:line="35" pos:column="16">bool</name></type> <name pos:line="35" pos:column="21">KeysHeadings</name>
        <block pos:line="36" pos:column="9">{
            <function><name pos:line="37" pos:column="13">get</name> <block pos:line="37" pos:column="17">{ <return pos:line="37" pos:column="19">return <expr><lit:literal type="boolean" pos:line="37" pos:column="26">true</lit:literal></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <function><type><specifier pos:line="40" pos:column="9">public</specifier> <specifier pos:line="40" pos:column="16">override</specifier> <name pos:line="40" pos:column="25">object</name></type> <name pos:line="40" pos:column="32">GetData</name><parameter_list pos:line="40" pos:column="39">(<param><decl><type><name pos:line="40" pos:column="40">ITabContext</name></type> <name pos:line="40" pos:column="52">context</name></decl></param>)</parameter_list>
        <block pos:line="41" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="42" pos:column="13">var</name></type> <name pos:line="42" pos:column="17">httpContext</name> <init pos:line="42" pos:column="29">= <expr><call><name><name pos:line="42" pos:column="31">context</name><op:operator pos:line="42" pos:column="38">.</op:operator><name pos:line="42" pos:column="39">GetHttpContext</name></name><argument_list pos:line="42" pos:column="53">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="44" pos:column="13">var</name></type> <name pos:line="44" pos:column="17">result</name> <init pos:line="44" pos:column="24">= <expr><name><name pos:line="44" pos:column="26">httpContext</name><op:operator pos:line="44" pos:column="37">.</op:operator><name pos:line="44" pos:column="38">Application</name><index pos:line="44" pos:column="49">[<expr><lit:literal type="string" pos:line="44" pos:column="50">"Glimpse.AspNet.Environment"</lit:literal></expr>]</index></name> <op:operator pos:line="44" pos:column="80">as</op:operator> <name pos:line="44" pos:column="83">EnvironmentModel</name></expr></init></decl>;</decl_stmt>
            <if pos:line="45" pos:column="13">if <condition pos:line="45" pos:column="16">(<expr><name pos:line="45" pos:column="17">result</name> <op:operator pos:line="45" pos:column="24">==</op:operator> <name pos:line="45" pos:column="27">null</name></expr>)</condition><then pos:line="45" pos:column="32">
            <block pos:line="46" pos:column="13">{
                <expr_stmt><expr><name pos:line="47" pos:column="17">result</name> <op:operator pos:line="47" pos:column="24">=</op:operator> <op:operator pos:line="47" pos:column="26">new</op:operator> <name pos:line="47" pos:column="30">EnvironmentModel</name>
                    <block pos:line="48" pos:column="21">{
                        <expr><name pos:line="49" pos:column="25">WebServer</name> <op:operator pos:line="49" pos:column="35">=</op:operator> <call><name pos:line="49" pos:column="37">BuildWebServerDetails</name><argument_list pos:line="49" pos:column="58">(<argument><expr><name pos:line="49" pos:column="59">httpContext</name></expr></argument>)</argument_list></call></expr><op:operator pos:line="49" pos:column="71">,</op:operator>
                        <expr><name pos:line="50" pos:column="25">Framework</name> <op:operator pos:line="50" pos:column="35">=</op:operator> <call><name pos:line="50" pos:column="37">BuildFrameworkDetails</name><argument_list pos:line="50" pos:column="58">(<argument><expr><name pos:line="50" pos:column="59">httpContext</name></expr></argument>)</argument_list></call></expr><op:operator pos:line="50" pos:column="71">,</op:operator>
                        <expr><name pos:line="51" pos:column="25">Machine</name> <op:operator pos:line="51" pos:column="33">=</op:operator> <call><name pos:line="51" pos:column="35">BuildMachineDetails</name><argument_list pos:line="51" pos:column="54">()</argument_list></call></expr><op:operator pos:line="51" pos:column="56">,</op:operator>
                        <expr><name pos:line="52" pos:column="25">TimeZone</name> <op:operator pos:line="52" pos:column="34">=</op:operator> <call><name pos:line="52" pos:column="36">BuildTimeZoneDetails</name><argument_list pos:line="52" pos:column="56">()</argument_list></call></expr><op:operator pos:line="52" pos:column="58">,</op:operator>
                        <expr><name pos:line="53" pos:column="25">Process</name> <op:operator pos:line="53" pos:column="33">=</op:operator> <call><name pos:line="53" pos:column="35">BuildProcessDetails</name><argument_list pos:line="53" pos:column="54">()</argument_list></call></expr>
                    }</block></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="55" pos:column="17">FindAssemblies</name><argument_list pos:line="55" pos:column="31">(<argument><expr><name pos:line="55" pos:column="32">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name><name pos:line="57" pos:column="17">httpContext</name><op:operator pos:line="57" pos:column="28">.</op:operator><name pos:line="57" pos:column="29">Application</name><index pos:line="57" pos:column="40">[<expr><lit:literal type="string" pos:line="57" pos:column="41">"Glimpse.AspNet.Environment"</lit:literal></expr>]</index></name> <op:operator pos:line="57" pos:column="71">=</op:operator> <name pos:line="57" pos:column="73">result</name></expr>;</expr_stmt>
            }</block></then></if>

            <return pos:line="60" pos:column="13">return <expr><name pos:line="60" pos:column="20">result</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="63" pos:column="9">protected</specifier> <specifier pos:line="63" pos:column="19">virtual</specifier> <name><name pos:line="63" pos:column="27">IEnumerable</name><argument_list pos:line="63" pos:column="38">&lt;<argument><name pos:line="63" pos:column="39">Assembly</name></argument>&gt;</argument_list></name></type> <name pos:line="63" pos:column="49">FindAllAssemblies</name><parameter_list pos:line="63" pos:column="66">()</parameter_list>
        <block pos:line="64" pos:column="9">{
            <return pos:line="65" pos:column="13">return <expr><call><name><name pos:line="65" pos:column="20">BuildManager</name><op:operator pos:line="65" pos:column="32">.</op:operator><name pos:line="65" pos:column="33">GetReferencedAssemblies</name></name><argument_list pos:line="65" pos:column="56">()</argument_list></call><op:operator pos:line="65" pos:column="58">.</op:operator><call><name><name pos:line="65" pos:column="59">OfType</name><argument_list pos:line="65" pos:column="65">&lt;<argument><name pos:line="65" pos:column="66">Assembly</name></argument>&gt;</argument_list></name><argument_list pos:line="65" pos:column="75">()</argument_list></call><op:operator pos:line="65" pos:column="77">.</op:operator><call><name pos:line="65" pos:column="78">Concat</name><argument_list pos:line="65" pos:column="84">(<argument><expr><call><name><name pos:line="65" pos:column="85">AppDomain</name><op:operator pos:line="65" pos:column="94">.</op:operator><name pos:line="65" pos:column="95">CurrentDomain</name><op:operator pos:line="65" pos:column="108">.</op:operator><name pos:line="65" pos:column="109">GetAssemblies</name></name><argument_list pos:line="65" pos:column="122">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="65" pos:column="125">.</op:operator><call><name pos:line="65" pos:column="126">Distinct</name><argument_list pos:line="65" pos:column="134">()</argument_list></call><op:operator pos:line="65" pos:column="136">.</op:operator><call><name pos:line="65" pos:column="137">OrderBy</name><argument_list pos:line="65" pos:column="144">(<argument><expr><lambda><name pos:line="65" pos:column="145">o</name> <op:operator pos:line="65" pos:column="147">=&gt;</op:operator> <name><name pos:line="65" pos:column="150">o</name><op:operator pos:line="65" pos:column="151">.</op:operator><name pos:line="65" pos:column="152">FullName</name></name></lambda></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="68" pos:column="9">private</specifier> <specifier pos:line="68" pos:column="17">static</specifier> <name pos:line="68" pos:column="24">EnvironmentWebServerModel</name></type> <name pos:line="68" pos:column="50">BuildWebServerDetails</name><parameter_list pos:line="68" pos:column="71">(<param><decl><type><name pos:line="68" pos:column="72">HttpContextBase</name></type> <name pos:line="68" pos:column="88">context</name></decl></param>)</parameter_list>
        <block pos:line="69" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="70" pos:column="13">var</name></type> <name pos:line="70" pos:column="17">serverSoftware</name> <init pos:line="70" pos:column="32">= <expr><name><name pos:line="70" pos:column="34">context</name><op:operator pos:line="70" pos:column="41">.</op:operator><name pos:line="70" pos:column="42">Request</name><op:operator pos:line="70" pos:column="49">.</op:operator><name pos:line="70" pos:column="50">ServerVariables</name><index pos:line="70" pos:column="65">[<expr><lit:literal type="string" pos:line="70" pos:column="66">"SERVER_SOFTWARE"</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="71" pos:column="13">var</name></type> <name pos:line="71" pos:column="17">serverType</name> <init pos:line="71" pos:column="28">= <expr><lit:literal type="string" pos:line="71" pos:column="30">"Unknown"</lit:literal></expr></init></decl>;</decl_stmt>

            <try pos:line="73" pos:column="13">try
            <block pos:line="74" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="75" pos:column="17">var</name></type> <name pos:line="75" pos:column="21">processName</name> <init pos:line="75" pos:column="33">= <expr><call><name><name pos:line="75" pos:column="35">Process</name><op:operator pos:line="75" pos:column="42">.</op:operator><name pos:line="75" pos:column="43">GetCurrentProcess</name></name><argument_list pos:line="75" pos:column="60">()</argument_list></call><op:operator pos:line="75" pos:column="62">.</op:operator><name><name pos:line="75" pos:column="63">MainModule</name><op:operator pos:line="75" pos:column="73">.</op:operator><name pos:line="75" pos:column="74">ModuleName</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name pos:line="76" pos:column="17">serverType</name> <op:operator pos:line="76" pos:column="28">=</op:operator> <op:operator pos:line="76" pos:column="30">!</op:operator><call><name><name pos:line="76" pos:column="31">string</name><op:operator pos:line="76" pos:column="37">.</op:operator><name pos:line="76" pos:column="38">IsNullOrEmpty</name></name><argument_list pos:line="76" pos:column="51">(<argument><expr><name pos:line="76" pos:column="52">serverSoftware</name></expr></argument>)</argument_list></call> <op:operator pos:line="76" pos:column="68">?</op:operator> <name pos:line="76" pos:column="70">serverSoftware</name> <op:operator pos:line="76" pos:column="85">:</op:operator> <call><name><name pos:line="76" pos:column="87">processName</name><op:operator pos:line="76" pos:column="98">.</op:operator><name pos:line="76" pos:column="99">StartsWith</name></name><argument_list pos:line="76" pos:column="109">(<argument><expr><lit:literal type="string" pos:line="76" pos:column="110">"WebDev.WebServer"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="76" pos:column="130">StringComparison</name><op:operator pos:line="76" pos:column="146">.</op:operator><name pos:line="76" pos:column="147">InvariantCultureIgnoreCase</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="76" pos:column="175">?</op:operator> <lit:literal type="string" pos:line="76" pos:column="177">"Visual Studio Web Development Server"</lit:literal> <op:operator pos:line="76" pos:column="216">:</op:operator> <lit:literal type="string" pos:line="76" pos:column="218">"Unknown"</lit:literal></expr>;</expr_stmt>
            }</block>
            <catch pos:line="78" pos:column="13">catch
            <block pos:line="79" pos:column="13">{
                <comment type="line" pos:line="80" pos:column="17">// In event of exceptions, serverType will rename as unknown.</comment>
            }</block></catch></try>

            <decl_stmt><decl><type><name pos:line="83" pos:column="13">var</name></type> <name pos:line="83" pos:column="17">integratedPipeline</name> <init pos:line="83" pos:column="36">= <expr><name><name pos:line="83" pos:column="38">HttpRuntime</name><op:operator pos:line="83" pos:column="49">.</op:operator><name pos:line="83" pos:column="50">UsingIntegratedPipeline</name></name></expr></init></decl>;</decl_stmt>

            <return pos:line="85" pos:column="13">return <expr><op:operator pos:line="85" pos:column="20">new</op:operator> <name pos:line="85" pos:column="24">EnvironmentWebServerModel</name> <block pos:line="85" pos:column="50">{ <expr><name pos:line="85" pos:column="52">ServerType</name> <op:operator pos:line="85" pos:column="63">=</op:operator> <name pos:line="85" pos:column="65">serverType</name></expr><op:operator pos:line="85" pos:column="75">,</op:operator> <expr><name pos:line="85" pos:column="77">IntegratedPipeline</name> <op:operator pos:line="85" pos:column="96">=</op:operator> <name pos:line="85" pos:column="98">integratedPipeline</name></expr> }</block></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="88" pos:column="9">private</specifier> <name pos:line="88" pos:column="17">EnvironmentFrameworkModel</name></type> <name pos:line="88" pos:column="43">BuildFrameworkDetails</name><parameter_list pos:line="88" pos:column="64">(<param><decl><type><name pos:line="88" pos:column="65">HttpContextBase</name></type> <name pos:line="88" pos:column="81">context</name></decl></param>)</parameter_list>
        <block pos:line="89" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="90" pos:column="13">var</name></type> <name pos:line="90" pos:column="17">dotnetFramework</name> <init pos:line="90" pos:column="33">= <expr><call><name><name pos:line="90" pos:column="35">string</name><op:operator pos:line="90" pos:column="41">.</op:operator><name pos:line="90" pos:column="42">Format</name></name><argument_list pos:line="90" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="90" pos:column="49">".NET {0} ({1} bit)"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="90" pos:column="71">System</name><op:operator pos:line="90" pos:column="77">.</op:operator><name pos:line="90" pos:column="78">Environment</name><op:operator pos:line="90" pos:column="89">.</op:operator><name pos:line="90" pos:column="90">Version</name></name></expr></argument>, <argument><expr><name><name pos:line="90" pos:column="99">IntPtr</name><op:operator pos:line="90" pos:column="105">.</op:operator><name pos:line="90" pos:column="106">Size</name> <type:modifier pos:line="90" pos:column="111">*</type:modifier></name> <lit:literal type="number" pos:line="90" pos:column="113">8</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="91" pos:column="13">var</name></type> <name pos:line="91" pos:column="17">debugging</name> <init pos:line="91" pos:column="27">= <expr><name><name pos:line="91" pos:column="29">context</name><op:operator pos:line="91" pos:column="36">.</op:operator><name pos:line="91" pos:column="37">IsDebuggingEnabled</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="92" pos:column="13">var</name></type> <name pos:line="92" pos:column="17">serverCulture</name> <init pos:line="92" pos:column="31">= <expr><name><name pos:line="92" pos:column="33">Thread</name><op:operator pos:line="92" pos:column="39">.</op:operator><name pos:line="92" pos:column="40">CurrentThread</name><op:operator pos:line="92" pos:column="53">.</op:operator><name pos:line="92" pos:column="54">CurrentCulture</name><op:operator pos:line="92" pos:column="68">.</op:operator><name pos:line="92" pos:column="69">DisplayName</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="93" pos:column="13">var</name></type> <name pos:line="93" pos:column="17">currentTrustLevel</name> <init pos:line="93" pos:column="35">= <expr><call><name pos:line="93" pos:column="37">GetCurrentTrustLevel</name><argument_list pos:line="93" pos:column="57">()</argument_list></call><op:operator pos:line="93" pos:column="59">.</op:operator><call><name pos:line="93" pos:column="60">ToString</name><argument_list pos:line="93" pos:column="68">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <return pos:line="95" pos:column="13">return <expr><op:operator pos:line="95" pos:column="20">new</op:operator> <name pos:line="95" pos:column="24">EnvironmentFrameworkModel</name> <block pos:line="95" pos:column="50">{ <expr><name pos:line="95" pos:column="52">DotnetFramework</name> <op:operator pos:line="95" pos:column="68">=</op:operator> <name pos:line="95" pos:column="70">dotnetFramework</name></expr><op:operator pos:line="95" pos:column="85">,</op:operator> <expr><name pos:line="95" pos:column="87">Debugging</name> <op:operator pos:line="95" pos:column="97">=</op:operator> <name pos:line="95" pos:column="99">debugging</name></expr><op:operator pos:line="95" pos:column="108">,</op:operator> <expr><name pos:line="95" pos:column="110">ServerCulture</name> <op:operator pos:line="95" pos:column="124">=</op:operator> <name pos:line="95" pos:column="126">serverCulture</name></expr><op:operator pos:line="95" pos:column="139">,</op:operator> <expr><name pos:line="95" pos:column="141">CurrentTrustLevel</name> <op:operator pos:line="95" pos:column="159">=</op:operator> <name pos:line="95" pos:column="161">currentTrustLevel</name></expr> }</block></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="98" pos:column="9">private</specifier> <name pos:line="98" pos:column="17">EnvironmentMachineModel</name></type> <name pos:line="98" pos:column="41">BuildMachineDetails</name><parameter_list pos:line="98" pos:column="60">()</parameter_list>
        <block pos:line="99" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="100" pos:column="13">var</name></type> <name pos:line="100" pos:column="17">is64BitOperatingSystem</name> <init pos:line="100" pos:column="40">= <expr><call><name pos:line="100" pos:column="42">Is64BitOperatingSystem</name><argument_list pos:line="100" pos:column="64">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="101" pos:column="13">var</name></type> <name pos:line="101" pos:column="17">name</name> <init pos:line="101" pos:column="22">= <expr><call><name><name pos:line="101" pos:column="24">string</name><op:operator pos:line="101" pos:column="30">.</op:operator><name pos:line="101" pos:column="31">Format</name></name><argument_list pos:line="101" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="101" pos:column="38">"{0} ({1} processors)"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="101" pos:column="62">System</name><op:operator pos:line="101" pos:column="68">.</op:operator><name pos:line="101" pos:column="69">Environment</name><op:operator pos:line="101" pos:column="80">.</op:operator><name pos:line="101" pos:column="81">MachineName</name></name></expr></argument>, <argument><expr><name><name pos:line="101" pos:column="94">System</name><op:operator pos:line="101" pos:column="100">.</op:operator><name pos:line="101" pos:column="101">Environment</name><op:operator pos:line="101" pos:column="112">.</op:operator><name pos:line="101" pos:column="113">ProcessorCount</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="102" pos:column="13">var</name></type> <name pos:line="102" pos:column="17">operatingSystem</name> <init pos:line="102" pos:column="33">= <expr><call><name><name pos:line="102" pos:column="35">string</name><op:operator pos:line="102" pos:column="41">.</op:operator><name pos:line="102" pos:column="42">Format</name></name><argument_list pos:line="102" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="102" pos:column="49">"{0} ({1} bit)"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="102" pos:column="66">System</name><op:operator pos:line="102" pos:column="72">.</op:operator><name pos:line="102" pos:column="73">Environment</name><op:operator pos:line="102" pos:column="84">.</op:operator><name pos:line="102" pos:column="85">OSVersion</name><op:operator pos:line="102" pos:column="94">.</op:operator><name pos:line="102" pos:column="95">VersionString</name></name></expr></argument>, <argument><expr><name pos:line="102" pos:column="110">is64BitOperatingSystem</name> <op:operator pos:line="102" pos:column="133">==</op:operator> <name pos:line="102" pos:column="136">null</name> <op:operator pos:line="102" pos:column="141">?</op:operator> <lit:literal type="string" pos:line="102" pos:column="143">"?"</lit:literal> <op:operator pos:line="102" pos:column="147">:</op:operator> <name><name pos:line="102" pos:column="149">is64BitOperatingSystem</name><op:operator pos:line="102" pos:column="171">.</op:operator><name pos:line="102" pos:column="172">Value</name> <type:modifier pos:line="102" pos:column="178">?</type:modifier></name> <lit:literal type="string" pos:line="102" pos:column="180">"64"</lit:literal> <op:operator pos:line="102" pos:column="185">:</op:operator> <lit:literal type="string" pos:line="102" pos:column="187">"32"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  
            <decl_stmt><decl><type><name pos:line="103" pos:column="13">var</name></type> <name pos:line="103" pos:column="17">startTime</name> <init pos:line="103" pos:column="27">= <expr><call><name><name pos:line="103" pos:column="29">DateTime</name><op:operator pos:line="103" pos:column="37">.</op:operator><name pos:line="103" pos:column="38">Now</name><op:operator pos:line="103" pos:column="41">.</op:operator><name pos:line="103" pos:column="42">AddMilliseconds</name></name><argument_list pos:line="103" pos:column="57">(<argument><expr><name><name pos:line="103" pos:column="58">System</name><op:operator pos:line="103" pos:column="64">.</op:operator><name pos:line="103" pos:column="65">Environment</name><op:operator pos:line="103" pos:column="76">.</op:operator><name pos:line="103" pos:column="77">TickCount</name> <type:modifier pos:line="103" pos:column="87">*</type:modifier></name> <op:operator pos:line="103" pos:column="89">-</op:operator><lit:literal type="number" pos:line="103" pos:column="90">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <return pos:line="105" pos:column="13">return <expr><op:operator pos:line="105" pos:column="20">new</op:operator> <name pos:line="105" pos:column="24">EnvironmentMachineModel</name> <block pos:line="105" pos:column="48">{ <expr><name pos:line="105" pos:column="50">Name</name> <op:operator pos:line="105" pos:column="55">=</op:operator> <name pos:line="105" pos:column="57">name</name></expr><op:operator pos:line="105" pos:column="61">,</op:operator> <expr><name pos:line="105" pos:column="63">OperatingSystem</name> <op:operator pos:line="105" pos:column="79">=</op:operator> <name pos:line="105" pos:column="81">operatingSystem</name></expr><op:operator pos:line="105" pos:column="96">,</op:operator> <expr><name pos:line="105" pos:column="98">StartTime</name> <op:operator pos:line="105" pos:column="108">=</op:operator> <name pos:line="105" pos:column="110">startTime</name></expr> }</block></expr>;</return>
        }</block></function>
        
        <function><type><specifier pos:line="108" pos:column="9">private</specifier> <name pos:line="108" pos:column="17">EnvironmentTimeZoneModel</name></type> <name pos:line="108" pos:column="42">BuildTimeZoneDetails</name><parameter_list pos:line="108" pos:column="62">()</parameter_list>
        <block pos:line="109" pos:column="9">{ 
            <decl_stmt><decl><type><name pos:line="110" pos:column="13">var</name></type> <name pos:line="110" pos:column="17">timeZoneInfo</name> <init pos:line="110" pos:column="30">= <expr><name><name pos:line="110" pos:column="32">TimeZoneInfo</name><op:operator pos:line="110" pos:column="44">.</op:operator><name pos:line="110" pos:column="45">Local</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="112" pos:column="13">var</name></type> <name pos:line="112" pos:column="17">name</name> <init pos:line="112" pos:column="22">= <expr><name><name pos:line="112" pos:column="24">timeZoneInfo</name><op:operator pos:line="112" pos:column="36">.</op:operator><name pos:line="112" pos:column="37">DaylightName</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="113" pos:column="13">var</name></type> <name pos:line="113" pos:column="17">utcOffset</name> <init pos:line="113" pos:column="27">= <expr><name><name pos:line="113" pos:column="29">timeZoneInfo</name><op:operator pos:line="113" pos:column="41">.</op:operator><name pos:line="113" pos:column="42">BaseUtcOffset</name><op:operator pos:line="113" pos:column="55">.</op:operator><name pos:line="113" pos:column="56">Hours</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="114" pos:column="13">var</name></type> <name pos:line="114" pos:column="17">utcOffsetWithDls</name> <init pos:line="114" pos:column="34">= <expr><name><name pos:line="114" pos:column="36">timeZoneInfo</name><op:operator pos:line="114" pos:column="48">.</op:operator><name pos:line="114" pos:column="49">BaseUtcOffset</name><op:operator pos:line="114" pos:column="62">.</op:operator><name pos:line="114" pos:column="63">Hours</name></name></expr></init></decl>;</decl_stmt> 
            <decl_stmt><decl><type><name pos:line="115" pos:column="13">var</name></type> <name pos:line="115" pos:column="17">isDaylightSavingTime</name> <init pos:line="115" pos:column="38">= <expr><lit:literal type="boolean" pos:line="115" pos:column="40">false</lit:literal></expr></init></decl>;</decl_stmt>
            <if pos:line="116" pos:column="13">if <condition pos:line="116" pos:column="16">(<expr><call><name><name pos:line="116" pos:column="17">timeZoneInfo</name><op:operator pos:line="116" pos:column="29">.</op:operator><name pos:line="116" pos:column="30">IsDaylightSavingTime</name></name><argument_list pos:line="116" pos:column="50">(<argument><expr><name><name pos:line="116" pos:column="51">DateTime</name><op:operator pos:line="116" pos:column="59">.</op:operator><name pos:line="116" pos:column="60">Now</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="116" pos:column="65">
            <block pos:line="117" pos:column="13">{
                <expr_stmt><expr><name pos:line="118" pos:column="17">utcOffsetWithDls</name><op:operator pos:line="118" pos:column="33">++</op:operator></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="119" pos:column="17">isDaylightSavingTime</name> <op:operator pos:line="119" pos:column="38">=</op:operator> <lit:literal type="boolean" pos:line="119" pos:column="40">true</lit:literal></expr>;</expr_stmt>
            }</block></then></if>

            <return pos:line="122" pos:column="13">return <expr><op:operator pos:line="122" pos:column="20">new</op:operator> <name pos:line="122" pos:column="24">EnvironmentTimeZoneModel</name> <block pos:line="122" pos:column="49">{ <expr><name pos:line="122" pos:column="51">Name</name> <op:operator pos:line="122" pos:column="56">=</op:operator> <name pos:line="122" pos:column="58">name</name></expr><op:operator pos:line="122" pos:column="62">,</op:operator> <expr><name pos:line="122" pos:column="64">IsDaylightSavingTime</name> <op:operator pos:line="122" pos:column="85">=</op:operator> <name pos:line="122" pos:column="87">isDaylightSavingTime</name></expr><op:operator pos:line="122" pos:column="107">,</op:operator> <expr><name pos:line="122" pos:column="109">UtcOffset</name> <op:operator pos:line="122" pos:column="119">=</op:operator> <name pos:line="122" pos:column="121">utcOffset</name></expr><op:operator pos:line="122" pos:column="130">,</op:operator> <expr><name pos:line="122" pos:column="132">UtcOffsetWithDls</name> <op:operator pos:line="122" pos:column="149">=</op:operator> <name pos:line="122" pos:column="151">utcOffsetWithDls</name></expr> }</block></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="125" pos:column="9">private</specifier> <name pos:line="125" pos:column="17">EnvironmentProcessModel</name></type> <name pos:line="125" pos:column="41">BuildProcessDetails</name><parameter_list pos:line="125" pos:column="60">()</parameter_list>
        <block pos:line="126" pos:column="9">{
            <try pos:line="127" pos:column="13">try
            <block pos:line="128" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="129" pos:column="17">var</name></type> <name pos:line="129" pos:column="21">process</name> <init pos:line="129" pos:column="29">= <expr><call><name><name pos:line="129" pos:column="31">Process</name><op:operator pos:line="129" pos:column="38">.</op:operator><name pos:line="129" pos:column="39">GetCurrentProcess</name></name><argument_list pos:line="129" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name pos:line="131" pos:column="17">var</name></type> <name pos:line="131" pos:column="21">processId</name> <init pos:line="131" pos:column="31">= <expr><name><name pos:line="131" pos:column="33">process</name><op:operator pos:line="131" pos:column="40">.</op:operator><name pos:line="131" pos:column="41">Id</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="132" pos:column="17">var</name></type> <name pos:line="132" pos:column="21">processName</name> <init pos:line="132" pos:column="33">= <expr><name><name pos:line="132" pos:column="35">process</name><op:operator pos:line="132" pos:column="42">.</op:operator><name pos:line="132" pos:column="43">MainModule</name><op:operator pos:line="132" pos:column="53">.</op:operator><name pos:line="132" pos:column="54">ModuleName</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="133" pos:column="17">var</name></type> <name pos:line="133" pos:column="21">startTime</name> <init pos:line="133" pos:column="31">= <expr><name><name pos:line="133" pos:column="33">process</name><op:operator pos:line="133" pos:column="40">.</op:operator><name pos:line="133" pos:column="41">StartTime</name></name></expr></init></decl>;</decl_stmt>

                <return pos:line="135" pos:column="17">return <expr><op:operator pos:line="135" pos:column="24">new</op:operator> <name pos:line="135" pos:column="28">EnvironmentProcessModel</name>
                    <block pos:line="136" pos:column="21">{
                        <expr><name pos:line="137" pos:column="25">ProcessId</name> <op:operator pos:line="137" pos:column="35">=</op:operator> <name pos:line="137" pos:column="37">processId</name></expr><op:operator pos:line="137" pos:column="46">,</op:operator>
                        <expr><name pos:line="138" pos:column="25">WorkerProcess</name> <op:operator pos:line="138" pos:column="39">=</op:operator> <name pos:line="138" pos:column="41">processName</name></expr><op:operator pos:line="138" pos:column="52">,</op:operator>
                        <expr><name pos:line="139" pos:column="25">StartTime</name> <op:operator pos:line="139" pos:column="35">=</op:operator> <name pos:line="139" pos:column="37">startTime</name></expr>
                    }</block></expr>;</return>
            }</block>
            <catch pos:line="142" pos:column="13">catch
            <block pos:line="143" pos:column="13">{
                <return pos:line="144" pos:column="17">return <expr><op:operator pos:line="144" pos:column="24">new</op:operator> <call><name pos:line="144" pos:column="28">EnvironmentProcessModel</name><argument_list pos:line="144" pos:column="51">()</argument_list></call></expr>;</return>
            }</block></catch></try>
        }</block></function>

        <function><type><specifier pos:line="148" pos:column="9">private</specifier> <name pos:line="148" pos:column="17">void</name></type> <name pos:line="148" pos:column="22">FindAssemblies</name><parameter_list pos:line="148" pos:column="36">(<param><decl><type><name pos:line="148" pos:column="37">EnvironmentModel</name></type> <name pos:line="148" pos:column="54">model</name></decl></param>)</parameter_list>
        <block pos:line="149" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="150" pos:column="13">var</name></type> <name pos:line="150" pos:column="17">allAssemblies</name> <init pos:line="150" pos:column="31">= <expr><call><name pos:line="150" pos:column="33">FindAllAssemblies</name><argument_list pos:line="150" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="152" pos:column="13">var</name></type> <name pos:line="152" pos:column="17">sysAssemblies</name> <init pos:line="152" pos:column="31">= <expr><op:operator pos:line="152" pos:column="33">new</op:operator> <call><name><name pos:line="152" pos:column="37">List</name><argument_list pos:line="152" pos:column="41">&lt;<argument><name pos:line="152" pos:column="42">EnvironmentAssemblyModel</name></argument>&gt;</argument_list></name><argument_list pos:line="152" pos:column="67">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="153" pos:column="13">var</name></type> <name pos:line="153" pos:column="17">appAssemblies</name> <init pos:line="153" pos:column="31">= <expr><op:operator pos:line="153" pos:column="33">new</op:operator> <call><name><name pos:line="153" pos:column="37">List</name><argument_list pos:line="153" pos:column="41">&lt;<argument><name pos:line="153" pos:column="42">EnvironmentAssemblyModel</name></argument>&gt;</argument_list></name><argument_list pos:line="153" pos:column="67">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <foreach pos:line="155" pos:column="13">foreach (<init><decl><type><name pos:line="155" pos:column="22">var</name></type> <name pos:line="155" pos:column="26">assembly</name> <range pos:line="155" pos:column="35">in <expr><name pos:line="155" pos:column="38">allAssemblies</name></expr></range></decl></init>)
            <block pos:line="156" pos:column="13">{ 
                <decl_stmt><decl><type><name pos:line="157" pos:column="17">var</name></type> <name pos:line="157" pos:column="21">assemblyName</name> <init pos:line="157" pos:column="34">= <expr><call><name><name pos:line="157" pos:column="36">assembly</name><op:operator pos:line="157" pos:column="44">.</op:operator><name pos:line="157" pos:column="45">GetName</name></name><argument_list pos:line="157" pos:column="52">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="158" pos:column="17">var</name></type> <name pos:line="158" pos:column="21">name</name> <init pos:line="158" pos:column="26">= <expr><name><name pos:line="158" pos:column="28">assemblyName</name><op:operator pos:line="158" pos:column="40">.</op:operator><name pos:line="158" pos:column="41">Name</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="159" pos:column="17">var</name></type> <name pos:line="159" pos:column="21">version</name> <init pos:line="159" pos:column="29">= <expr><call><name><name pos:line="159" pos:column="31">assemblyName</name><op:operator pos:line="159" pos:column="43">.</op:operator><name pos:line="159" pos:column="44">Version</name><op:operator pos:line="159" pos:column="51">.</op:operator><name pos:line="159" pos:column="52">ToString</name></name><argument_list pos:line="159" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="160" pos:column="17">var</name></type> <name pos:line="160" pos:column="21">versionInfo</name> <init pos:line="160" pos:column="33">= <expr><call><name pos:line="160" pos:column="35">GetVersionNumber</name><argument_list pos:line="160" pos:column="51">(<argument><expr><name pos:line="160" pos:column="52">assembly</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="161" pos:column="17">var</name></type> <name pos:line="161" pos:column="21">culture</name> <init pos:line="161" pos:column="29">= <expr><call><name><name pos:line="161" pos:column="31">string</name><op:operator pos:line="161" pos:column="37">.</op:operator><name pos:line="161" pos:column="38">IsNullOrEmpty</name></name><argument_list pos:line="161" pos:column="51">(<argument><expr><name><name pos:line="161" pos:column="52">assemblyName</name><op:operator pos:line="161" pos:column="64">.</op:operator><name pos:line="161" pos:column="65">CultureInfo</name><op:operator pos:line="161" pos:column="76">.</op:operator><name pos:line="161" pos:column="77">Name</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="161" pos:column="83">?</op:operator> <lit:literal type="string" pos:line="161" pos:column="85">"neutral"</lit:literal> <op:operator pos:line="161" pos:column="95">:</op:operator> <name><name pos:line="161" pos:column="97">assemblyName</name><op:operator pos:line="161" pos:column="109">.</op:operator><name pos:line="161" pos:column="110">CultureInfo</name><op:operator pos:line="161" pos:column="121">.</op:operator><name pos:line="161" pos:column="122">Name</name></name></expr></init></decl>;</decl_stmt> 
                <decl_stmt><decl><type><name pos:line="162" pos:column="17">var</name></type> <name pos:line="162" pos:column="21">fromGac</name> <init pos:line="162" pos:column="29">= <expr><name><name pos:line="162" pos:column="31">assembly</name><op:operator pos:line="162" pos:column="39">.</op:operator><name pos:line="162" pos:column="40">GlobalAssemblyCache</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="163" pos:column="17">var</name></type> <name pos:line="163" pos:column="21">fullTrust</name> <init pos:line="163" pos:column="31">= <expr><call><name pos:line="163" pos:column="33">IsFullyTrusted</name><argument_list pos:line="163" pos:column="47">(<argument><expr><name pos:line="163" pos:column="48">assembly</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="164" pos:column="17">var</name></type> <name pos:line="164" pos:column="21">buildMode</name> <init pos:line="164" pos:column="31">= <expr><call><name pos:line="164" pos:column="33">IsAssemblyDebugBuild</name><argument_list pos:line="164" pos:column="53">(<argument><expr><name pos:line="164" pos:column="54">assembly</name></expr></argument>)</argument_list></call> <op:operator pos:line="164" pos:column="64">==</op:operator> <lit:literal type="boolean" pos:line="164" pos:column="67">true</lit:literal> <op:operator pos:line="164" pos:column="72">?</op:operator> <lit:literal type="string" pos:line="164" pos:column="74">"Debug"</lit:literal> <op:operator pos:line="164" pos:column="82">:</op:operator> <lit:literal type="string" pos:line="164" pos:column="84">"Release"</lit:literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="165" pos:column="17">var</name></type> <name pos:line="165" pos:column="21">result</name> <init pos:line="165" pos:column="28">= <expr><op:operator pos:line="165" pos:column="30">new</op:operator> <name pos:line="165" pos:column="34">EnvironmentAssemblyModel</name> <block pos:line="165" pos:column="59">{ <expr><name pos:line="165" pos:column="61">Name</name> <op:operator pos:line="165" pos:column="66">=</op:operator> <name pos:line="165" pos:column="68">name</name></expr>, <expr><name pos:line="165" pos:column="74">Version</name> <op:operator pos:line="165" pos:column="82">=</op:operator> <name pos:line="165" pos:column="84">version</name></expr>, <expr><name pos:line="165" pos:column="93">VersionInfo</name> <op:operator pos:line="165" pos:column="105">=</op:operator> <name pos:line="165" pos:column="107">versionInfo</name></expr>, <expr><name pos:line="165" pos:column="120">Culture</name> <op:operator pos:line="165" pos:column="128">=</op:operator> <name pos:line="165" pos:column="130">culture</name></expr>, <expr><name pos:line="165" pos:column="139">FromGac</name> <op:operator pos:line="165" pos:column="147">=</op:operator> <name pos:line="165" pos:column="149">fromGac</name></expr>, <expr><name pos:line="165" pos:column="158">FullTrust</name> <op:operator pos:line="165" pos:column="168">=</op:operator> <name pos:line="165" pos:column="170">fullTrust</name></expr>, <expr><name pos:line="165" pos:column="181">BuildMode</name><op:operator pos:line="165" pos:column="190">=</op:operator><name pos:line="165" pos:column="191">buildMode</name></expr> }</block></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name pos:line="167" pos:column="17">var</name></type> <name pos:line="167" pos:column="21">isSystem</name> <init pos:line="167" pos:column="30">= <expr><call><name><name pos:line="167" pos:column="32">systemNamspaces</name><op:operator pos:line="167" pos:column="47">.</op:operator><name pos:line="167" pos:column="48">Any</name></name><argument_list pos:line="167" pos:column="51">(<argument><expr><lambda><name pos:line="167" pos:column="52">systemNamspace</name> <op:operator pos:line="167" pos:column="67">=&gt;</op:operator> <call><name><name pos:line="167" pos:column="70">assembly</name><op:operator pos:line="167" pos:column="78">.</op:operator><name pos:line="167" pos:column="79">FullName</name><op:operator pos:line="167" pos:column="87">.</op:operator><name pos:line="167" pos:column="88">StartsWith</name></name><argument_list pos:line="167" pos:column="98">(<argument><expr><name pos:line="167" pos:column="99">systemNamspace</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
                <if pos:line="168" pos:column="17">if <condition pos:line="168" pos:column="20">(<expr><name pos:line="168" pos:column="21">isSystem</name></expr>)</condition><then pos:line="168" pos:column="30">
                <block pos:line="169" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="170" pos:column="21">sysAssemblies</name><op:operator pos:line="170" pos:column="34">.</op:operator><name pos:line="170" pos:column="35">Add</name></name><argument_list pos:line="170" pos:column="38">(<argument><expr><name pos:line="170" pos:column="39">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="172" pos:column="17">else
                <block pos:line="173" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="174" pos:column="21">appAssemblies</name><op:operator pos:line="174" pos:column="34">.</op:operator><name pos:line="174" pos:column="35">Add</name></name><argument_list pos:line="174" pos:column="38">(<argument><expr><name pos:line="174" pos:column="39">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if> 
            }</block></foreach>

            <if pos:line="178" pos:column="13">if <condition pos:line="178" pos:column="16">(<expr><name><name pos:line="178" pos:column="17">appAssemblies</name><op:operator pos:line="178" pos:column="30">.</op:operator><name pos:line="178" pos:column="31">Count</name></name> <op:operator pos:line="178" pos:column="37">&gt;</op:operator> <lit:literal type="number" pos:line="178" pos:column="39">0</lit:literal></expr>)</condition><then pos:line="178" pos:column="41">
            <block pos:line="179" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="180" pos:column="17">model</name><op:operator pos:line="180" pos:column="22">.</op:operator><name pos:line="180" pos:column="23">ApplicationAssemblies</name></name> <op:operator pos:line="180" pos:column="45">=</op:operator> <name pos:line="180" pos:column="47">appAssemblies</name></expr>;</expr_stmt>
            }</block></then></if>

            <if pos:line="183" pos:column="13">if <condition pos:line="183" pos:column="16">(<expr><name><name pos:line="183" pos:column="17">sysAssemblies</name><op:operator pos:line="183" pos:column="30">.</op:operator><name pos:line="183" pos:column="31">Count</name></name> <op:operator pos:line="183" pos:column="37">&gt;</op:operator> <lit:literal type="number" pos:line="183" pos:column="39">0</lit:literal></expr>)</condition><then pos:line="183" pos:column="41">
            <block pos:line="184" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="185" pos:column="17">model</name><op:operator pos:line="185" pos:column="22">.</op:operator><name pos:line="185" pos:column="23">SystemAssemblies</name></name> <op:operator pos:line="185" pos:column="40">=</op:operator> <name pos:line="185" pos:column="42">sysAssemblies</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="189" pos:column="9">private</specifier> <name pos:line="189" pos:column="17">AspNetHostingPermissionLevel</name></type> <name pos:line="189" pos:column="46">GetCurrentTrustLevel</name><parameter_list pos:line="189" pos:column="66">()</parameter_list>
        <block pos:line="190" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="191" pos:column="13">var</name></type> <name pos:line="191" pos:column="17">levels</name> <init pos:line="191" pos:column="24">= <expr><op:operator pos:line="191" pos:column="26">new</op:operator><index pos:line="191" pos:column="29">[]</index> <block pos:line="191" pos:column="32">{ <expr><name><name pos:line="191" pos:column="34">AspNetHostingPermissionLevel</name><op:operator pos:line="191" pos:column="62">.</op:operator><name pos:line="191" pos:column="63">Unrestricted</name></name></expr>, <expr><name><name pos:line="191" pos:column="77">AspNetHostingPermissionLevel</name><op:operator pos:line="191" pos:column="105">.</op:operator><name pos:line="191" pos:column="106">High</name></name></expr>, <expr><name><name pos:line="191" pos:column="112">AspNetHostingPermissionLevel</name><op:operator pos:line="191" pos:column="140">.</op:operator><name pos:line="191" pos:column="141">Medium</name></name></expr>, <expr><name><name pos:line="191" pos:column="149">AspNetHostingPermissionLevel</name><op:operator pos:line="191" pos:column="177">.</op:operator><name pos:line="191" pos:column="178">Low</name></name></expr>, <expr><name><name pos:line="191" pos:column="183">AspNetHostingPermissionLevel</name><op:operator pos:line="191" pos:column="211">.</op:operator><name pos:line="191" pos:column="212">Minimal</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
            <foreach pos:line="192" pos:column="13">foreach (<init><decl><type><name pos:line="192" pos:column="22">var</name></type> <name pos:line="192" pos:column="26">trustLevel</name> <range pos:line="192" pos:column="37">in <expr><name pos:line="192" pos:column="40">levels</name></expr></range></decl></init>)
            <block pos:line="193" pos:column="13">{
                <try pos:line="194" pos:column="17">try
                <block pos:line="195" pos:column="17">{
                    <expr_stmt><expr><op:operator pos:line="196" pos:column="21">new</op:operator> <call><name pos:line="196" pos:column="25">AspNetHostingPermission</name><argument_list pos:line="196" pos:column="48">(<argument><expr><name pos:line="196" pos:column="49">trustLevel</name></expr></argument>)</argument_list></call><op:operator pos:line="196" pos:column="60">.</op:operator><call><name pos:line="196" pos:column="61">Demand</name><argument_list pos:line="196" pos:column="67">()</argument_list></call></expr>;</expr_stmt>
                }</block>
                <catch pos:line="198" pos:column="17">catch <parameter_list pos:line="198" pos:column="23">(<param><decl><type><name><name pos:line="198" pos:column="24">System</name><op:operator pos:line="198" pos:column="30">.</op:operator><name pos:line="198" pos:column="31">Security</name><op:operator pos:line="198" pos:column="39">.</op:operator><name pos:line="198" pos:column="40">SecurityException</name></name></type></decl></param>)</parameter_list>
                <block pos:line="199" pos:column="17">{
                    <continue pos:line="200" pos:column="21">continue;</continue>
                }</block></catch></try>

                <return pos:line="203" pos:column="17">return <expr><name pos:line="203" pos:column="24">trustLevel</name></expr>;</return>
            }</block></foreach>

            <return pos:line="206" pos:column="13">return <expr><name><name pos:line="206" pos:column="20">AspNetHostingPermissionLevel</name><op:operator pos:line="206" pos:column="48">.</op:operator><name pos:line="206" pos:column="49">None</name></name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="209" pos:column="9">private</specifier> <name pos:line="209" pos:column="17">bool</name><type:modifier pos:line="209" pos:column="21">?</type:modifier></type> <name pos:line="209" pos:column="23">Is64BitOperatingSystem</name><parameter_list pos:line="209" pos:column="45">()</parameter_list>
        <block pos:line="210" pos:column="9">{
<cpp:if pos:line="211" pos:column="1">#<cpp:directive pos:line="211" pos:column="2">if</cpp:directive> <expr><name pos:line="211" pos:column="5">NET35</name></expr></cpp:if>
            <return pos:line="212" pos:column="13">return <expr><name pos:line="212" pos:column="20">null</name></expr>;</return>      
<cpp:else pos:line="213" pos:column="1">#<cpp:directive pos:line="213" pos:column="2">else</cpp:directive></cpp:else>
            <return pos:line="214" pos:column="13">return <expr><name><name pos:line="214" pos:column="20">System</name><op:operator pos:line="214" pos:column="26">.</op:operator><name pos:line="214" pos:column="27">Environment</name><op:operator pos:line="214" pos:column="38">.</op:operator><name pos:line="214" pos:column="39">Is64BitOperatingSystem</name></name></expr>;</return>
<cpp:endif pos:line="215" pos:column="1">#<cpp:directive pos:line="215" pos:column="2">endif</cpp:directive></cpp:endif>
        }</block></function>

        <function><type><specifier pos:line="218" pos:column="9">private</specifier> <name pos:line="218" pos:column="17">bool</name><type:modifier pos:line="218" pos:column="21">?</type:modifier></type> <name pos:line="218" pos:column="23">IsFullyTrusted</name><parameter_list pos:line="218" pos:column="37">(<param><decl><type><name pos:line="218" pos:column="38">Assembly</name></type> <name pos:line="218" pos:column="47">assembly</name></decl></param>)</parameter_list>
        <block pos:line="219" pos:column="9">{
<cpp:if pos:line="220" pos:column="1">#<cpp:directive pos:line="220" pos:column="2">if</cpp:directive> <expr><name pos:line="220" pos:column="5">NET35</name></expr></cpp:if>
            <return pos:line="221" pos:column="13">return <expr><name pos:line="221" pos:column="20">null</name></expr>;</return>      
<cpp:else pos:line="222" pos:column="1">#<cpp:directive pos:line="222" pos:column="2">else</cpp:directive></cpp:else>
            <return pos:line="223" pos:column="13">return <expr><name><name pos:line="223" pos:column="20">assembly</name><op:operator pos:line="223" pos:column="28">.</op:operator><name pos:line="223" pos:column="29">IsFullyTrusted</name></name></expr>;</return>
<cpp:endif pos:line="224" pos:column="1">#<cpp:directive pos:line="224" pos:column="2">endif</cpp:directive></cpp:endif>
        }</block></function>

        <function><type><specifier pos:line="227" pos:column="9">private</specifier> <name pos:line="227" pos:column="17">string</name></type> <name pos:line="227" pos:column="24">GetVersionNumber</name><parameter_list pos:line="227" pos:column="40">(<param><decl><type><name pos:line="227" pos:column="41">Assembly</name></type> <name pos:line="227" pos:column="50">assembly</name></decl></param>)</parameter_list>
        <block pos:line="228" pos:column="9">{ 
            <decl_stmt><decl><type><name pos:line="229" pos:column="13">var</name></type> <name pos:line="229" pos:column="17">infoVersion</name> <init pos:line="229" pos:column="29">= <expr><call><name><name pos:line="229" pos:column="31">assembly</name><op:operator pos:line="229" pos:column="39">.</op:operator><name pos:line="229" pos:column="40">GetCustomAttributes</name></name><argument_list pos:line="229" pos:column="59">(<argument><expr><call><name pos:line="229" pos:column="60">typeof</name><argument_list pos:line="229" pos:column="66">(<argument><expr><name pos:line="229" pos:column="67">AssemblyInformationalVersionAttribute</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="229" pos:column="107">false</lit:literal></expr></argument>)</argument_list></call>
                                            <op:operator pos:line="230" pos:column="45">.</op:operator><call><name><name pos:line="230" pos:column="46">Cast</name><argument_list pos:line="230" pos:column="50">&lt;<argument><name pos:line="230" pos:column="51">AssemblyInformationalVersionAttribute</name></argument>&gt;</argument_list></name><argument_list pos:line="230" pos:column="89">()</argument_list></call>
                                            <op:operator pos:line="231" pos:column="45">.</op:operator><call><name pos:line="231" pos:column="46">SingleOrDefault</name><argument_list pos:line="231" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <return pos:line="233" pos:column="13">return <expr><name pos:line="233" pos:column="20">infoVersion</name> <op:operator pos:line="233" pos:column="32">!=</op:operator> <name pos:line="233" pos:column="35">null</name> <op:operator pos:line="233" pos:column="40">?</op:operator> <name><name pos:line="233" pos:column="42">infoVersion</name><op:operator pos:line="233" pos:column="53">.</op:operator><name pos:line="233" pos:column="54">InformationalVersion</name></name> <op:operator pos:line="233" pos:column="75">:</op:operator> <name pos:line="233" pos:column="77">null</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="236" pos:column="9">private</specifier> <name pos:line="236" pos:column="17">bool</name></type> <name pos:line="236" pos:column="22">IsAssemblyDebugBuild</name><parameter_list pos:line="236" pos:column="42">(<param><decl><type><name pos:line="236" pos:column="43">Assembly</name></type> <name pos:line="236" pos:column="52">assembly</name></decl></param>)</parameter_list>
        <block pos:line="237" pos:column="9">{
            <foreach pos:line="238" pos:column="13">foreach (<init><decl><type><name pos:line="238" pos:column="22">var</name></type> <name pos:line="238" pos:column="26">attribute</name> <range pos:line="238" pos:column="36">in <expr><call><name><name pos:line="238" pos:column="39">assembly</name><op:operator pos:line="238" pos:column="47">.</op:operator><name pos:line="238" pos:column="48">GetCustomAttributes</name></name><argument_list pos:line="238" pos:column="67">(<argument><expr><call><name pos:line="238" pos:column="68">typeof</name><argument_list pos:line="238" pos:column="74">(<argument><expr><name pos:line="238" pos:column="75">DebuggableAttribute</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><lit:literal type="boolean" pos:line="238" pos:column="96">false</lit:literal></expr></argument>)</argument_list></call></expr></range></decl></init>)
            <block pos:line="239" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="240" pos:column="17">var</name></type> <name pos:line="240" pos:column="21">debuggableAttribute</name> <init pos:line="240" pos:column="41">= <expr><name pos:line="240" pos:column="43">attribute</name> <op:operator pos:line="240" pos:column="53">as</op:operator> <name pos:line="240" pos:column="56">DebuggableAttribute</name></expr></init></decl>;</decl_stmt>
                <if pos:line="241" pos:column="17">if <condition pos:line="241" pos:column="20">(<expr><name pos:line="241" pos:column="21">debuggableAttribute</name> <op:operator pos:line="241" pos:column="41">!=</op:operator> <name pos:line="241" pos:column="44">null</name></expr>)</condition><then pos:line="241" pos:column="49">
                <block pos:line="242" pos:column="17">{
                    <return pos:line="243" pos:column="21">return <expr><name><name pos:line="243" pos:column="28">debuggableAttribute</name><op:operator pos:line="243" pos:column="47">.</op:operator><name pos:line="243" pos:column="48">IsJITTrackingEnabled</name></name></expr>;</return>
                }</block></then></if>
            }</block></foreach>
            <return pos:line="246" pos:column="13">return <expr><lit:literal type="boolean" pos:line="246" pos:column="20">false</lit:literal></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
