<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Core\SerializationConverter\CSharpTypeConverterShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Glimpse</name><op:operator pos:line="3" pos:column="14">.</op:operator><name pos:line="3" pos:column="15">Core</name><op:operator pos:line="3" pos:column="19">.</op:operator><name pos:line="3" pos:column="20">SerializationConverter</name></name>;</using>
<using pos:line="4" pos:column="1">using <name pos:line="4" pos:column="7">Xunit</name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Xunit</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">Extensions</name></name>;</using>

<namespace pos:line="7" pos:column="1">namespace <name><name pos:line="7" pos:column="11">Glimpse</name><op:operator pos:line="7" pos:column="18">.</op:operator><name pos:line="7" pos:column="19">Test</name><op:operator pos:line="7" pos:column="23">.</op:operator><name pos:line="7" pos:column="24">Core</name><op:operator pos:line="7" pos:column="28">.</op:operator><name pos:line="7" pos:column="29">SerializationConverter</name></name>
<block pos:line="8" pos:column="1">{
    <class><specifier pos:line="9" pos:column="5">public</specifier> class <name pos:line="9" pos:column="18">CSharpTypeConverterShould</name>
    <block pos:line="10" pos:column="5">{
        <expr_stmt><expr><index pos:line="11" pos:column="9">[<expr><name pos:line="11" pos:column="10">Theory</name></expr>]</index>
        <index pos:line="12" pos:column="9">[<expr><call><name pos:line="12" pos:column="10">InlineData</name><argument_list pos:line="12" pos:column="20">(<argument><expr><call><name pos:line="12" pos:column="21">typeof</name><argument_list pos:line="12" pos:column="27">(<argument><expr><name pos:line="12" pos:column="28">int</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="12" pos:column="34">"int"</lit:literal></expr></argument>)</argument_list></call></expr>]</index>
        <index pos:line="13" pos:column="9">[<expr><call><name pos:line="13" pos:column="10">InlineData</name><argument_list pos:line="13" pos:column="20">(<argument><expr><call><name pos:line="13" pos:column="21">typeof</name><argument_list pos:line="13" pos:column="27">(<argument><expr><name pos:line="13" pos:column="28">uint</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="13" pos:column="35">"uint"</lit:literal></expr></argument>)</argument_list></call></expr>]</index>
        <index pos:line="14" pos:column="9">[<expr><call><name pos:line="14" pos:column="10">InlineData</name><argument_list pos:line="14" pos:column="20">(<argument><expr><call><name pos:line="14" pos:column="21">typeof</name><argument_list pos:line="14" pos:column="27">(<argument><expr><name pos:line="14" pos:column="28">bool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="14" pos:column="35">"bool"</lit:literal></expr></argument>)</argument_list></call></expr>]</index>
        <index pos:line="15" pos:column="9">[<expr><call><name pos:line="15" pos:column="10">InlineData</name><argument_list pos:line="15" pos:column="20">(<argument><expr><call><name pos:line="15" pos:column="21">typeof</name><argument_list pos:line="15" pos:column="27">(<argument><expr><name pos:line="15" pos:column="28">float</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="15" pos:column="36">"float"</lit:literal></expr></argument>)</argument_list></call></expr>]</index>
        <index pos:line="16" pos:column="9">[<expr><call><name pos:line="16" pos:column="10">InlineData</name><argument_list pos:line="16" pos:column="20">(<argument><expr><call><name pos:line="16" pos:column="21">typeof</name><argument_list pos:line="16" pos:column="27">(<argument><expr><name pos:line="16" pos:column="28">string</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="16" pos:column="37">"string"</lit:literal></expr></argument>)</argument_list></call></expr>]</index>
        <index pos:line="17" pos:column="9">[<expr><call><name pos:line="17" pos:column="10">InlineData</name><argument_list pos:line="17" pos:column="20">(<argument><expr><call><name pos:line="17" pos:column="21">typeof</name><argument_list pos:line="17" pos:column="27">(<argument><expr><name pos:line="17" pos:column="28">object</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="17" pos:column="37">"object"</lit:literal></expr></argument>)</argument_list></call></expr>]</index>
        <index pos:line="18" pos:column="9">[<expr><call><name pos:line="18" pos:column="10">InlineData</name><argument_list pos:line="18" pos:column="20">(<argument><expr><call><name pos:line="18" pos:column="21">typeof</name><argument_list pos:line="18" pos:column="27">(<argument><expr><name pos:line="18" pos:column="28">double</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="18" pos:column="37">"double"</lit:literal></expr></argument>)</argument_list></call></expr>]</index>
        <index pos:line="19" pos:column="9">[<expr><call><name pos:line="19" pos:column="10">InlineData</name><argument_list pos:line="19" pos:column="20">(<argument><expr><call><name pos:line="19" pos:column="21">typeof</name><argument_list pos:line="19" pos:column="27">(<argument><expr><name pos:line="19" pos:column="28">decimal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="19" pos:column="38">"decimal"</lit:literal></expr></argument>)</argument_list></call></expr>]</index>
        <index pos:line="20" pos:column="9">[<expr><call><name pos:line="20" pos:column="10">InlineData</name><argument_list pos:line="20" pos:column="20">(<argument><expr><call><name pos:line="20" pos:column="21">typeof</name><argument_list pos:line="20" pos:column="27">(<argument><expr><name pos:line="20" pos:column="28">long</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="20" pos:column="35">"long"</lit:literal></expr></argument>)</argument_list></call></expr>]</index>
        <index pos:line="21" pos:column="9">[<expr><call><name pos:line="21" pos:column="10">InlineData</name><argument_list pos:line="21" pos:column="20">(<argument><expr><call><name pos:line="21" pos:column="21">typeof</name><argument_list pos:line="21" pos:column="27">(<argument><expr><name pos:line="21" pos:column="28">char</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="21" pos:column="35">"char"</lit:literal></expr></argument>)</argument_list></call></expr>]</index>
        <index pos:line="22" pos:column="9">[<expr><call><name pos:line="22" pos:column="10">InlineData</name><argument_list pos:line="22" pos:column="20">(<argument><expr><call><name pos:line="22" pos:column="21">typeof</name><argument_list pos:line="22" pos:column="27">(<argument><expr><name pos:line="22" pos:column="28">sbyte</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="22" pos:column="36">"sbyte"</lit:literal></expr></argument>)</argument_list></call></expr>]</index>
        <index pos:line="23" pos:column="9">[<expr><call><name pos:line="23" pos:column="10">InlineData</name><argument_list pos:line="23" pos:column="20">(<argument><expr><call><name pos:line="23" pos:column="21">typeof</name><argument_list pos:line="23" pos:column="27">(<argument><expr><name pos:line="23" pos:column="28">byte</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="23" pos:column="35">"byte"</lit:literal></expr></argument>)</argument_list></call></expr>]</index>
        <index pos:line="24" pos:column="9">[<expr><call><name pos:line="24" pos:column="10">InlineData</name><argument_list pos:line="24" pos:column="20">(<argument><expr><call><name pos:line="24" pos:column="21">typeof</name><argument_list pos:line="24" pos:column="27">(<argument><expr><name pos:line="24" pos:column="28">long</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="24" pos:column="35">"long"</lit:literal></expr></argument>)</argument_list></call></expr>]</index>
        <index pos:line="25" pos:column="9">[<expr><call><name pos:line="25" pos:column="10">InlineData</name><argument_list pos:line="25" pos:column="20">(<argument><expr><call><name pos:line="25" pos:column="21">typeof</name><argument_list pos:line="25" pos:column="27">(<argument><expr><name pos:line="25" pos:column="28">ulong</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="25" pos:column="36">"ulong"</lit:literal></expr></argument>)</argument_list></call></expr>]</index>
        <index pos:line="26" pos:column="9">[<expr><call><name pos:line="26" pos:column="10">InlineData</name><argument_list pos:line="26" pos:column="20">(<argument><expr><call><name pos:line="26" pos:column="21">typeof</name><argument_list pos:line="26" pos:column="27">(<argument><expr><name pos:line="26" pos:column="28">short</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="26" pos:column="36">"short"</lit:literal></expr></argument>)</argument_list></call></expr>]</index>
        <index pos:line="27" pos:column="9">[<expr><call><name pos:line="27" pos:column="10">InlineData</name><argument_list pos:line="27" pos:column="20">(<argument><expr><call><name pos:line="27" pos:column="21">typeof</name><argument_list pos:line="27" pos:column="27">(<argument><expr><name pos:line="27" pos:column="28">ushort</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="27" pos:column="37">"ushort"</lit:literal></expr></argument>)</argument_list></call></expr>]</index>
        <index pos:line="28" pos:column="9">[<expr><call><name pos:line="28" pos:column="10">InlineData</name><argument_list pos:line="28" pos:column="20">(<argument><expr><call><name pos:line="28" pos:column="21">typeof</name><argument_list pos:line="28" pos:column="27">(<argument><expr><name pos:line="28" pos:column="28">DateTime</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="28" pos:column="39">"DateTime"</lit:literal></expr></argument>)</argument_list></call></expr>]</index>
        <index pos:line="29" pos:column="9">[<expr><call><name pos:line="29" pos:column="10">InlineData</name><argument_list pos:line="29" pos:column="20">(<argument><expr><call><name pos:line="29" pos:column="21">typeof</name><argument_list pos:line="29" pos:column="27">(<argument><expr><name pos:line="29" pos:column="28">CSharpTypeConverterShould</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="29" pos:column="56">"CSharpTypeConverterShould"</lit:literal></expr></argument>)</argument_list></call></expr>]</index>

        <comment type="line" pos:line="31" pos:column="9">// Converter supports N levels of generics</comment>
        <index pos:line="32" pos:column="9">[<expr><call><name pos:line="32" pos:column="10">InlineData</name><argument_list pos:line="32" pos:column="20">(<argument><expr><call><name pos:line="32" pos:column="21">typeof</name><argument_list pos:line="32" pos:column="27">(<argument><expr><name><name pos:line="32" pos:column="28">IDictionary</name><argument_list pos:line="32" pos:column="39">&lt;<argument><name pos:line="32" pos:column="40">string</name></argument>, <argument><name pos:line="32" pos:column="48">object</name></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="32" pos:column="58">"IDictionary&lt;string, object&gt;"</lit:literal></expr></argument>)</argument_list></call></expr>]</index>
        <index pos:line="33" pos:column="9">[<expr><call><name pos:line="33" pos:column="10">InlineData</name><argument_list pos:line="33" pos:column="20">(<argument><expr><call><name pos:line="33" pos:column="21">typeof</name><argument_list pos:line="33" pos:column="27">(<argument><expr><name><name pos:line="33" pos:column="28">IDictionary</name><argument_list pos:line="33" pos:column="39">&lt;<argument><name pos:line="33" pos:column="40">string</name></argument>, <argument><name><name pos:line="33" pos:column="48">List</name><argument_list pos:line="33" pos:column="52">&lt;<argument><name pos:line="33" pos:column="53">int</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="33" pos:column="61">"IDictionary&lt;string, List&lt;int&gt;&gt;"</lit:literal></expr></argument>)</argument_list></call></expr>]</index>
        <index pos:line="34" pos:column="9">[<expr><call><name pos:line="34" pos:column="10">InlineData</name><argument_list pos:line="34" pos:column="20">(<argument><expr><call><name pos:line="34" pos:column="21">typeof</name><argument_list pos:line="34" pos:column="27">(<argument><expr><name><name pos:line="34" pos:column="28">IDictionary</name><argument_list pos:line="34" pos:column="39">&lt;<argument><name pos:line="34" pos:column="40">string</name></argument>, <argument><name><name pos:line="34" pos:column="48">IDictionary</name><argument_list pos:line="34" pos:column="59">&lt;<argument><name pos:line="34" pos:column="60">int</name></argument>, <argument><name><name pos:line="34" pos:column="65">IEnumerable</name><argument_list pos:line="34" pos:column="76">&lt;<argument><name pos:line="34" pos:column="77">CSharpTypeConverterShould</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="34" pos:column="108">"IDictionary&lt;string, IDictionary&lt;int, IEnumerable&lt;CSharpTypeConverterShould&gt;&gt;&gt;"</lit:literal></expr></argument>)</argument_list></call></expr>]</index>

        <comment type="line" pos:line="36" pos:column="9">// Converter supports arrays</comment>
        <index pos:line="37" pos:column="9">[<expr><call><name pos:line="37" pos:column="10">InlineData</name><argument_list pos:line="37" pos:column="20">(<argument><expr><call><name pos:line="37" pos:column="21">typeof</name><argument_list pos:line="37" pos:column="27">(<argument><expr><name><name pos:line="37" pos:column="28">int</name><index pos:line="37" pos:column="31">[]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="37" pos:column="36">"int[]"</lit:literal></expr></argument>)</argument_list></call></expr>]</index>
        <index pos:line="38" pos:column="9">[<expr><call><name pos:line="38" pos:column="10">InlineData</name><argument_list pos:line="38" pos:column="20">(<argument><expr><call><name pos:line="38" pos:column="21">typeof</name><argument_list pos:line="38" pos:column="27">(<argument><expr><name><name pos:line="38" pos:column="28">Test</name><index pos:line="38" pos:column="32">[]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="38" pos:column="37">"Test[]"</lit:literal></expr></argument>)</argument_list></call></expr>]</index>
        <index pos:line="39" pos:column="9">[<expr><call><name pos:line="39" pos:column="10">InlineData</name><argument_list pos:line="39" pos:column="20">(<argument><expr><call><name pos:line="39" pos:column="21">typeof</name><argument_list pos:line="39" pos:column="27">(<argument><expr><name><name><name pos:line="39" pos:column="28">IEnumerable</name><argument_list pos:line="39" pos:column="39">&lt;<argument><name><name pos:line="39" pos:column="40">int</name><index pos:line="39" pos:column="43">[]</index></name></argument>&gt;</argument_list></name><index pos:line="39" pos:column="46">[]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="39" pos:column="51">"IEnumerable&lt;int[]&gt;[]"</lit:literal></expr></argument>)</argument_list></call></expr>]</index>
        <index pos:line="40" pos:column="9">[<expr><call><name pos:line="40" pos:column="10">InlineData</name><argument_list pos:line="40" pos:column="20">(<argument><expr><call><name pos:line="40" pos:column="21">typeof</name><argument_list pos:line="40" pos:column="27">(<argument><expr><name><name pos:line="40" pos:column="28">int</name><index pos:line="40" pos:column="31">[]</index><index pos:line="40" pos:column="33">[]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="40" pos:column="38">"int[][]"</lit:literal></expr></argument>)</argument_list></call></expr>]</index>

        <comment type="line" pos:line="42" pos:column="9">// Converter supports nullable type</comment>
        <index pos:line="43" pos:column="9">[<expr><call><name pos:line="43" pos:column="10">InlineData</name><argument_list pos:line="43" pos:column="20">(<argument><expr><call><name pos:line="43" pos:column="21">typeof</name><argument_list pos:line="43" pos:column="27">(<argument><expr><name pos:line="43" pos:column="28">int</name><op:operator pos:line="43" pos:column="31">?</op:operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="43" pos:column="35">"int?"</lit:literal></expr></argument>)</argument_list></call></expr>]</index>
        <index pos:line="44" pos:column="9">[<expr><call><name pos:line="44" pos:column="10">InlineData</name><argument_list pos:line="44" pos:column="20">(<argument><expr><call><name pos:line="44" pos:column="21">typeof</name><argument_list pos:line="44" pos:column="27">(<argument><expr><name pos:line="44" pos:column="28">DateTime</name><op:operator pos:line="44" pos:column="36">?</op:operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="44" pos:column="40">"DateTime?"</lit:literal></expr></argument>)</argument_list></call></expr>]</index>
        <index pos:line="45" pos:column="9">[<expr><call><name pos:line="45" pos:column="10">InlineData</name><argument_list pos:line="45" pos:column="20">(<argument><expr><call><name pos:line="45" pos:column="21">typeof</name><argument_list pos:line="45" pos:column="27">(<argument><expr><name pos:line="45" pos:column="28">Test</name><op:operator pos:line="45" pos:column="32">?</op:operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="45" pos:column="36">"Test?"</lit:literal></expr></argument>)</argument_list></call></expr>]</index>
        <index pos:line="46" pos:column="9">[<expr><call><name pos:line="46" pos:column="10">InlineData</name><argument_list pos:line="46" pos:column="20">(<argument><expr><call><name pos:line="46" pos:column="21">typeof</name><argument_list pos:line="46" pos:column="27">(<argument><expr><name pos:line="46" pos:column="28">int</name><op:operator pos:line="46" pos:column="31">?</op:operator><index pos:line="46" pos:column="32">[]</index></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="46" pos:column="37">"int?[]"</lit:literal></expr></argument>)</argument_list></call></expr>]</index>

        <comment type="line" pos:line="48" pos:column="9">// Converter supports nested types</comment>
        <index pos:line="49" pos:column="9">[<expr><call><name pos:line="49" pos:column="10">InlineData</name><argument_list pos:line="49" pos:column="20">(<argument><expr><call><name pos:line="49" pos:column="21">typeof</name><argument_list pos:line="49" pos:column="27">(<argument><expr><name><name><name pos:line="49" pos:column="28">Dictionary</name><argument_list pos:line="49" pos:column="38">&lt;<argument><name pos:line="49" pos:column="39">string</name></argument>, <argument><name pos:line="49" pos:column="47">object</name></argument>&gt;</argument_list></name><op:operator pos:line="49" pos:column="54">.</op:operator><name pos:line="49" pos:column="55">ValueCollection</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="49" pos:column="73">"Dictionary&lt;string, object&gt;.ValueCollection"</lit:literal></expr></argument>)</argument_list></call></expr>]</index>
        <index pos:line="50" pos:column="9">[<expr><call><name pos:line="50" pos:column="10">InlineData</name><argument_list pos:line="50" pos:column="20">(<argument><expr><call><name pos:line="50" pos:column="21">typeof</name><argument_list pos:line="50" pos:column="27">(<argument><expr><name><name pos:line="50" pos:column="28">CSharpTypeConverterShould</name><op:operator pos:line="50" pos:column="53">.</op:operator><name pos:line="50" pos:column="54">DummyClass</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="50" pos:column="67">"CSharpTypeConverterShould.DummyClass"</lit:literal></expr></argument>)</argument_list></call></expr>]</index>
        <index pos:line="51" pos:column="9">[<expr><call><name pos:line="51" pos:column="10">InlineData</name><argument_list pos:line="51" pos:column="20">(<argument><expr><call><name pos:line="51" pos:column="21">typeof</name><argument_list pos:line="51" pos:column="27">(<argument><expr><name><name pos:line="51" pos:column="28">CSharpTypeConverterShould</name><op:operator pos:line="51" pos:column="53">.</op:operator><name pos:line="51" pos:column="54">DummyClass</name><op:operator pos:line="51" pos:column="64">.</op:operator><name pos:line="51" pos:column="65">StandardNestedClass</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="51" pos:column="87">"CSharpTypeConverterShould.DummyClass.StandardNestedClass"</lit:literal></expr></argument>)</argument_list></call></expr>]</index>
        <index pos:line="52" pos:column="9">[<expr><call><name pos:line="52" pos:column="10">InlineData</name><argument_list pos:line="52" pos:column="20">(<argument><expr><call><name pos:line="52" pos:column="21">typeof</name><argument_list pos:line="52" pos:column="27">(<argument><expr><name><name pos:line="52" pos:column="28">CSharpTypeConverterShould</name><op:operator pos:line="52" pos:column="53">.</op:operator><name pos:line="52" pos:column="54">DummyClass</name><op:operator pos:line="52" pos:column="64">.</op:operator><name><name pos:line="52" pos:column="65">GenericNestedClass</name><argument_list pos:line="52" pos:column="83">&lt;<argument><name pos:line="52" pos:column="84">string</name></argument>, <argument><name pos:line="52" pos:column="92">object</name></argument>&gt;</argument_list></name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="52" pos:column="102">"CSharpTypeConverterShould.DummyClass.GenericNestedClass&lt;string, object&gt;"</lit:literal></expr></argument>)</argument_list></call></expr>]</index>
        <index pos:line="53" pos:column="9">[<expr><call><name pos:line="53" pos:column="10">InlineData</name><argument_list pos:line="53" pos:column="20">(<argument><expr><call><name pos:line="53" pos:column="21">typeof</name><argument_list pos:line="53" pos:column="27">(<argument><expr><name><name pos:line="53" pos:column="28">CSharpTypeConverterShould</name><op:operator pos:line="53" pos:column="53">.</op:operator><name pos:line="53" pos:column="54">DummyClass</name><op:operator pos:line="53" pos:column="64">.</op:operator><name><name pos:line="53" pos:column="65">GenericNestedClass</name><argument_list pos:line="53" pos:column="83">&lt;<argument><name pos:line="53" pos:column="84">string</name></argument>, <argument><name pos:line="53" pos:column="92">object</name></argument>&gt;</argument_list></name><op:operator pos:line="53" pos:column="99">.</op:operator><name><name pos:line="53" pos:column="100">InnerClass</name><argument_list pos:line="53" pos:column="110">&lt;<argument><name pos:line="53" pos:column="111">int</name></argument>, <argument><name pos:line="53" pos:column="116">DateTime</name></argument>&gt;</argument_list></name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="53" pos:column="128">"CSharpTypeConverterShould.DummyClass.GenericNestedClass&lt;string, object&gt;.InnerClass&lt;int, DateTime&gt;"</lit:literal></expr></argument>)</argument_list></call></expr>]</index>
        <index pos:line="54" pos:column="9">[<expr><call><name pos:line="54" pos:column="10">InlineData</name><argument_list pos:line="54" pos:column="20">(<argument><expr><call><name pos:line="54" pos:column="21">typeof</name><argument_list pos:line="54" pos:column="27">(<argument><expr><name><name pos:line="54" pos:column="28">CSharpTypeConverterShould</name><op:operator pos:line="54" pos:column="53">.</op:operator><name pos:line="54" pos:column="54">DummyClass</name><op:operator pos:line="54" pos:column="64">.</op:operator><name><name pos:line="54" pos:column="65">GenericNestedClass</name><argument_list pos:line="54" pos:column="83">&lt;<argument><name pos:line="54" pos:column="84">string</name></argument>, <argument><name pos:line="54" pos:column="92">object</name></argument>&gt;</argument_list></name><op:operator pos:line="54" pos:column="99">.</op:operator><name><name pos:line="54" pos:column="100">InnerClass</name><argument_list pos:line="54" pos:column="110">&lt;<argument><name pos:line="54" pos:column="111">int</name></argument>, <argument><name pos:line="54" pos:column="116">DateTime</name></argument>&gt;</argument_list></name><op:operator pos:line="54" pos:column="125">.</op:operator><name pos:line="54" pos:column="126">DeepClass</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="54" pos:column="138">"CSharpTypeConverterShould.DummyClass.GenericNestedClass&lt;string, object&gt;.InnerClass&lt;int, DateTime&gt;.DeepClass"</lit:literal></expr></argument>)</argument_list></call></expr>]</index>
        <index pos:line="55" pos:column="9">[<expr><call><name pos:line="55" pos:column="10">InlineData</name><argument_list pos:line="55" pos:column="20">(<argument><expr><call><name pos:line="55" pos:column="21">typeof</name><argument_list pos:line="55" pos:column="27">(<argument><expr><name><name pos:line="55" pos:column="28">CSharpTypeConverterShould</name><op:operator pos:line="55" pos:column="53">.</op:operator><name pos:line="55" pos:column="54">DummyClass</name><op:operator pos:line="55" pos:column="64">.</op:operator><name><name pos:line="55" pos:column="65">GenericNestedClass</name><argument_list pos:line="55" pos:column="83">&lt;<argument><name pos:line="55" pos:column="84">string</name></argument>, <argument><name><name pos:line="55" pos:column="92">CSharpTypeConverterShould</name><op:operator pos:line="55" pos:column="117">.</op:operator><name pos:line="55" pos:column="118">DummyClass</name><op:operator pos:line="55" pos:column="128">.</op:operator><name><name pos:line="55" pos:column="129">GenericNestedClass</name><argument_list pos:line="55" pos:column="147">&lt;<argument><name pos:line="55" pos:column="148">string</name></argument>, <argument><name pos:line="55" pos:column="156">object</name></argument>&gt;</argument_list></name></name></argument>&gt;</argument_list></name><op:operator pos:line="55" pos:column="164">.</op:operator><name pos:line="55" pos:column="165">InnerClass</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="55" pos:column="178">"CSharpTypeConverterShould.DummyClass.GenericNestedClass&lt;string, CSharpTypeConverterShould.DummyClass.GenericNestedClass&lt;string, object&gt;&gt;.InnerClass"</lit:literal></expr></argument>)</argument_list></call></expr>]</index>
        <index pos:line="56" pos:column="9">[<expr><call><name pos:line="56" pos:column="10">InlineData</name><argument_list pos:line="56" pos:column="20">(<argument><expr><call><name pos:line="56" pos:column="21">typeof</name><argument_list pos:line="56" pos:column="27">(<argument><expr><name><name pos:line="56" pos:column="28">CSharpTypeConverterShould</name><op:operator pos:line="56" pos:column="53">.</op:operator><name pos:line="56" pos:column="54">DummyClass</name><op:operator pos:line="56" pos:column="64">.</op:operator><name><name pos:line="56" pos:column="65">GenericNestedClass</name><argument_list pos:line="56" pos:column="83">&lt;<argument><name pos:line="56" pos:column="84">string</name></argument>, <argument><name><name pos:line="56" pos:column="92">CSharpTypeConverterShould</name><op:operator pos:line="56" pos:column="117">.</op:operator><name pos:line="56" pos:column="118">DummyClass</name></name></argument>&gt;</argument_list></name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="56" pos:column="132">"CSharpTypeConverterShould.DummyClass.GenericNestedClass&lt;string, CSharpTypeConverterShould.DummyClass&gt;"</lit:literal></expr></argument>)</argument_list></call></expr>]</index>
        <index pos:line="57" pos:column="9">[<expr><call><name pos:line="57" pos:column="10">InlineData</name><argument_list pos:line="57" pos:column="20">(<argument><expr><call><name pos:line="57" pos:column="21">typeof</name><argument_list pos:line="57" pos:column="27">(<argument><expr><name><name pos:line="57" pos:column="28">CSharpTypeConverterShould</name><op:operator pos:line="57" pos:column="53">.</op:operator><name pos:line="57" pos:column="54">DummyClass</name><op:operator pos:line="57" pos:column="64">.</op:operator><name><name pos:line="57" pos:column="65">GenericNestedClass</name><argument_list pos:line="57" pos:column="83">&lt;<argument><name pos:line="57" pos:column="84">string</name></argument>, <argument><name><name><name pos:line="57" pos:column="92">Dictionary</name><argument_list pos:line="57" pos:column="102">&lt;<argument><name><name pos:line="57" pos:column="103">CSharpTypeConverterShould</name><op:operator pos:line="57" pos:column="128">.</op:operator><name pos:line="57" pos:column="129">DummyClass</name></name></argument>, <argument><name pos:line="57" pos:column="141">object</name></argument>&gt;</argument_list></name><op:operator pos:line="57" pos:column="148">.</op:operator><name pos:line="57" pos:column="149">ValueCollection</name></name></argument>&gt;</argument_list></name><op:operator pos:line="57" pos:column="165">.</op:operator><name pos:line="57" pos:column="166">InnerClass</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="57" pos:column="179">"CSharpTypeConverterShould.DummyClass.GenericNestedClass&lt;string, Dictionary&lt;CSharpTypeConverterShould.DummyClass, object&gt;.ValueCollection&gt;.InnerClass"</lit:literal></expr></argument>)</argument_list></call></expr>]</index>

        <comment type="line" pos:line="59" pos:column="9">// Converter - everything together</comment>
        <index pos:line="60" pos:column="9">[<expr><call><name pos:line="60" pos:column="10">InlineData</name><argument_list pos:line="60" pos:column="20">(<argument><expr><call><name pos:line="60" pos:column="21">typeof</name><argument_list pos:line="60" pos:column="27">(<argument><expr><name><name pos:line="60" pos:column="28">Tuple</name><argument_list pos:line="60" pos:column="33">&lt;<argument><name><name pos:line="60" pos:column="34">IDictionary</name><argument_list pos:line="60" pos:column="45">&lt;<argument><name pos:line="60" pos:column="46">int</name><op:operator pos:line="60" pos:column="49">?</op:operator></argument>, <argument><name><name pos:line="60" pos:column="52">string</name><index pos:line="60" pos:column="58">[]</index></name></argument>&gt;</argument_list></name></argument>, <argument><name pos:line="60" pos:column="63">char</name></argument>, <argument><name pos:line="60" pos:column="69">Test</name></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="60" pos:column="77">"Tuple&lt;IDictionary&lt;int?, string[]&gt;, char, Test&gt;"</lit:literal></expr></argument>)</argument_list></call></expr>]</index>
        public <name pos:line="61" pos:column="16">void</name> <macro><name pos:line="61" pos:column="21">ConvertToDisplayString</name><argument_list pos:line="61" pos:column="43">(<argument pos:line="61" pos:column="44">Type input</argument>, <argument pos:line="61" pos:column="56">string output</argument>)</argument_list></macro>
        <block pos:line="62" pos:column="9">{
            <expr><name pos:line="63" pos:column="13">var</name> <name pos:line="63" pos:column="17">converter</name> <op:operator pos:line="63" pos:column="27">=</op:operator> <op:operator pos:line="63" pos:column="29">new</op:operator> <call><name pos:line="63" pos:column="33">CSharpTypeConverter</name><argument_list pos:line="63" pos:column="52">()</argument_list></call></expr>;
            <expr><name pos:line="64" pos:column="13">var</name> <name pos:line="64" pos:column="17">result</name> <op:operator pos:line="64" pos:column="24">=</op:operator> <call><name><name pos:line="64" pos:column="26">converter</name><op:operator pos:line="64" pos:column="35">.</op:operator><name pos:line="64" pos:column="36">Convert</name></name><argument_list pos:line="64" pos:column="43">(<argument><expr><name pos:line="64" pos:column="44">input</name></expr></argument>)</argument_list></call></expr>;

            <expr><call><name><name pos:line="66" pos:column="13">Assert</name><op:operator pos:line="66" pos:column="19">.</op:operator><name pos:line="66" pos:column="20">Equal</name></name><argument_list pos:line="66" pos:column="25">(<argument><expr><name pos:line="66" pos:column="26">output</name></expr></argument>, <argument><expr><name pos:line="66" pos:column="34">result</name></expr></argument>)</argument_list></call></expr>;
        }</block>

        private <name pos:line="69" pos:column="17">class</name> <name pos:line="69" pos:column="23">DummyClass</name>
        <block pos:line="70" pos:column="9">{
            <expr pos:line="71" pos:column="13">public <name pos:line="71" pos:column="20">class</name> <name><name pos:line="71" pos:column="26">GenericNestedClass</name><argument_list pos:line="71" pos:column="44">&lt;<argument><name pos:line="71" pos:column="45">TA</name></argument>, <argument><name pos:line="71" pos:column="49">TB</name></argument>&gt;</argument_list></name>
            <block pos:line="72" pos:column="13">{
                <expr pos:line="73" pos:column="17">public <name pos:line="73" pos:column="24">class</name> <name><name pos:line="73" pos:column="30">InnerClass</name><argument_list pos:line="73" pos:column="40">&lt;<argument><name pos:line="73" pos:column="41">TC</name></argument>, <argument><name pos:line="73" pos:column="45">TD</name></argument>&gt;</argument_list></name>
                <block pos:line="74" pos:column="17">{
                    <expr pos:line="75" pos:column="21">public <name pos:line="75" pos:column="28">class</name> <name pos:line="75" pos:column="34">DeepClass</name>
                    <block pos:line="76" pos:column="21">{
                    }</block></expr>
                }</block>

                public <name pos:line="80" pos:column="24">class</name> <name pos:line="80" pos:column="30">InnerClass</name>
                <block pos:line="81" pos:column="17">{
                }</block></expr>
            }</block>

            public <name pos:line="85" pos:column="20">class</name> <name pos:line="85" pos:column="26">StandardNestedClass</name>
            <block pos:line="86" pos:column="13">{
            }</block></expr>
        }</block></expr></expr_stmt>
    }</block></class>

    <enum><specifier pos:line="91" pos:column="5">internal</specifier> enum <macro><name pos:line="91" pos:column="19">Test</name></macro>
    <block pos:line="92" pos:column="5">{
        <decl><name pos:line="93" pos:column="9">A</name> <init pos:line="93" pos:column="11">= <expr><lit:literal type="number" pos:line="93" pos:column="13">1</lit:literal></expr></init></decl><op:operator pos:line="93" pos:column="14">,</op:operator>
        <decl><name pos:line="94" pos:column="9">B</name> <init pos:line="94" pos:column="11">= <expr><lit:literal type="number" pos:line="94" pos:column="13">2</lit:literal></expr></init></decl><op:operator pos:line="94" pos:column="14">,</op:operator>
        <decl><name pos:line="95" pos:column="9">C</name> <init pos:line="95" pos:column="11">= <expr><lit:literal type="number" pos:line="95" pos:column="13">3</lit:literal></expr></init></decl><op:operator pos:line="95" pos:column="14">,</op:operator>
    }</block>
<decl/></enum>}</block></namespace></unit>
