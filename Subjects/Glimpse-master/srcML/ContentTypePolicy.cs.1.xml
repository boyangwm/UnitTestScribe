<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Core\Policy\ContentTypePolicy.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Core</name><op:operator pos:line="4" pos:column="19">.</op:operator><name pos:line="4" pos:column="20">Configuration</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Glimpse</name><op:operator pos:line="5" pos:column="14">.</op:operator><name pos:line="5" pos:column="15">Core</name><op:operator pos:line="5" pos:column="19">.</op:operator><name pos:line="5" pos:column="20">Extensibility</name></name>;</using>

<namespace pos:line="7" pos:column="1">namespace <name><name pos:line="7" pos:column="11">Glimpse</name><op:operator pos:line="7" pos:column="18">.</op:operator><name pos:line="7" pos:column="19">Core</name><op:operator pos:line="7" pos:column="23">.</op:operator><name pos:line="7" pos:column="24">Policy</name></name>
<block pos:line="8" pos:column="1">{
    <comment type="line" pos:line="9" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="10" pos:column="5">/// Policy which will set Glimpse's runtime policy to &lt;c&gt;Off&lt;/c&gt; if a Http response's content type is not on the white list.</comment>
    <comment type="line" pos:line="11" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="12" pos:column="5">public</specifier> class <name pos:line="12" pos:column="18">ContentTypePolicy</name> <super pos:line="12" pos:column="36">: <name pos:line="12" pos:column="38">IRuntimePolicy</name>, <name pos:line="12" pos:column="54">IConfigurable</name></super>
    <block pos:line="13" pos:column="5">{
        <comment type="line" pos:line="14" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="15" pos:column="9">/// Initializes a new instance of the &lt;see cref="ContentTypePolicy" /&gt; class with an empty white list.</comment>
        <comment type="line" pos:line="16" pos:column="9">/// &lt;/summary&gt;</comment>
        <constructor><specifier pos:line="17" pos:column="9">public</specifier> <name pos:line="17" pos:column="16">ContentTypePolicy</name><parameter_list pos:line="17" pos:column="33">()</parameter_list>
            <member_list pos:line="18" pos:column="13">: <call><name pos:line="18" pos:column="15">this</name><argument_list pos:line="18" pos:column="19">(<argument><expr><op:operator pos:line="18" pos:column="20">new</op:operator> <call><name><name pos:line="18" pos:column="24">List</name><argument_list pos:line="18" pos:column="28">&lt;<argument><name><name pos:line="18" pos:column="29">Tuple</name><argument_list pos:line="18" pos:column="34">&lt;<argument><name pos:line="18" pos:column="35">string</name></argument>, <argument><name pos:line="18" pos:column="43">RuntimePolicy</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list pos:line="18" pos:column="58">()</argument_list></call></expr></argument>)</argument_list></call>
        </member_list><block pos:line="19" pos:column="9">{
        }</block></constructor>

        <comment type="line" pos:line="22" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="23" pos:column="9">/// Initializes a new instance of the &lt;see cref="ContentTypePolicy" /&gt; class with the provided &lt;paramref name="contentTypeWhiteList"/&gt;.</comment>
        <comment type="line" pos:line="24" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="25" pos:column="9">/// &lt;param name="contentTypeWhiteList"&gt;The content type white list to validate against.&lt;/param&gt;</comment>
        <comment type="line" pos:line="26" pos:column="9">/// &lt;exception cref="System.ArgumentNullException"&gt;Exception thrown if &lt;paramref name="contentTypeWhiteList"/&gt; is &lt;c&gt;null&lt;/c&gt;.&lt;/exception&gt;</comment>
        <constructor><specifier pos:line="27" pos:column="9">public</specifier> <name pos:line="27" pos:column="16">ContentTypePolicy</name><parameter_list pos:line="27" pos:column="33">(<param><decl><type><name><name pos:line="27" pos:column="34">IList</name><argument_list pos:line="27" pos:column="39">&lt;<argument><name><name pos:line="27" pos:column="40">Tuple</name><argument_list pos:line="27" pos:column="45">&lt;<argument><name pos:line="27" pos:column="46">string</name></argument>, <argument><name pos:line="27" pos:column="54">RuntimePolicy</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="27" pos:column="70">contentTypeWhiteList</name></decl></param>)</parameter_list>
        <block pos:line="28" pos:column="9">{
            <if pos:line="29" pos:column="13">if <condition pos:line="29" pos:column="16">(<expr><name pos:line="29" pos:column="17">contentTypeWhiteList</name> <op:operator pos:line="29" pos:column="38">==</op:operator> <name pos:line="29" pos:column="41">null</name></expr>)</condition><then pos:line="29" pos:column="46">
            <block pos:line="30" pos:column="13">{
                <throw pos:line="31" pos:column="17">throw <expr><op:operator pos:line="31" pos:column="23">new</op:operator> <call><name pos:line="31" pos:column="27">ArgumentNullException</name><argument_list pos:line="31" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="31" pos:column="49">"contentTypeWhiteList"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <expr_stmt><expr><name pos:line="34" pos:column="13">ContentTypeWhiteList</name> <op:operator pos:line="34" pos:column="34">=</op:operator> <name pos:line="34" pos:column="36">contentTypeWhiteList</name></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="37" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="38" pos:column="9">/// Gets or sets the content type white list.</comment>
        <comment type="line" pos:line="39" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="40" pos:column="9">/// &lt;value&gt;</comment>
        <comment type="line" pos:line="41" pos:column="9">/// The content type white list to validate against.</comment>
        <comment type="line" pos:line="42" pos:column="9">/// &lt;/value&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="43" pos:column="9">public</specifier> <name><name pos:line="43" pos:column="16">IList</name><argument_list pos:line="43" pos:column="21">&lt;<argument><name><name pos:line="43" pos:column="22">Tuple</name><argument_list pos:line="43" pos:column="27">&lt;<argument><name pos:line="43" pos:column="28">string</name></argument>, <argument><name pos:line="43" pos:column="36">RuntimePolicy</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="43" pos:column="52">ContentTypeWhiteList</name> <block pos:line="43" pos:column="73">{ <function_decl><name pos:line="43" pos:column="75">get</name>;</function_decl> <function_decl><name pos:line="43" pos:column="80">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="45" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="46" pos:column="9">/// Gets the point in an Http request lifecycle that a policy should execute.</comment>
        <comment type="line" pos:line="47" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="48" pos:column="9">/// &lt;value&gt;</comment>
        <comment type="line" pos:line="49" pos:column="9">/// The moment to execute, &lt;see cref="AjaxPolicy"/&gt; uses &lt;c&gt;EndRequest&lt;/c&gt;.</comment>
        <comment type="line" pos:line="50" pos:column="9">/// &lt;/value&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="51" pos:column="9">public</specifier> <name pos:line="51" pos:column="16">RuntimeEvent</name></type> <name pos:line="51" pos:column="29">ExecuteOn</name>
        <block pos:line="52" pos:column="9">{
            <function><name pos:line="53" pos:column="13">get</name> <block pos:line="53" pos:column="17">{ <return pos:line="53" pos:column="19">return <expr><name><name pos:line="53" pos:column="26">RuntimeEvent</name><op:operator pos:line="53" pos:column="38">.</op:operator><name pos:line="53" pos:column="39">EndRequest</name></name></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="56" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="57" pos:column="9">/// Executes the specified policy with the given context.</comment>
        <comment type="line" pos:line="58" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="59" pos:column="9">/// &lt;param name="policyContext"&gt;The policy context.&lt;/param&gt;</comment>
        <comment type="line" pos:line="60" pos:column="9">/// &lt;returns&gt;</comment>
        <comment type="line" pos:line="61" pos:column="9">/// &lt;c&gt;On&lt;/c&gt; if the response content type is contained on the white list, otherwise &lt;c&gt;Off&lt;/c&gt;.</comment>
        <comment type="line" pos:line="62" pos:column="9">/// &lt;/returns&gt;</comment>
        <comment type="line" pos:line="63" pos:column="9">/// &lt;exception cref="System.ArgumentNullException"&gt;Exception thrown if &lt;paramref name="policyContext"/&gt; is &lt;c&gt;null&lt;/c&gt;.&lt;/exception&gt;</comment>
        <function><type><specifier pos:line="64" pos:column="9">public</specifier> <name pos:line="64" pos:column="16">RuntimePolicy</name></type> <name pos:line="64" pos:column="30">Execute</name><parameter_list pos:line="64" pos:column="37">(<param><decl><type><name pos:line="64" pos:column="38">IRuntimePolicyContext</name></type> <name pos:line="64" pos:column="60">policyContext</name></decl></param>)</parameter_list>
        <block pos:line="65" pos:column="9">{
            <try pos:line="66" pos:column="13">try
            <block pos:line="67" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="68" pos:column="17">var</name></type> <name pos:line="68" pos:column="21">contentType</name> <init pos:line="68" pos:column="33">= <expr><call><name><name pos:line="68" pos:column="35">policyContext</name><op:operator pos:line="68" pos:column="48">.</op:operator><name pos:line="68" pos:column="49">RequestMetadata</name><op:operator pos:line="68" pos:column="64">.</op:operator><name pos:line="68" pos:column="65">ResponseContentType</name><op:operator pos:line="68" pos:column="84">.</op:operator><name pos:line="68" pos:column="85">ToLowerInvariant</name></name><argument_list pos:line="68" pos:column="101">()</argument_list></call></expr></init></decl>;</decl_stmt>
                
                <comment type="line" pos:line="70" pos:column="17">// support for the following content type strings: "text/html" &amp; "text/html; charset=utf-8"</comment>
                <decl_stmt><decl><type><name pos:line="71" pos:column="17">var</name></type> <name pos:line="71" pos:column="21">match</name> <init pos:line="71" pos:column="27">= <expr><call><name><name pos:line="71" pos:column="29">ContentTypeWhiteList</name><op:operator pos:line="71" pos:column="49">.</op:operator><name pos:line="71" pos:column="50">FirstOrDefault</name></name><argument_list pos:line="71" pos:column="64">(<argument><expr><lambda><name pos:line="71" pos:column="65">ct</name> <op:operator pos:line="71" pos:column="68">=&gt;</op:operator> <call><name><name pos:line="71" pos:column="71">contentType</name><op:operator pos:line="71" pos:column="82">.</op:operator><name pos:line="71" pos:column="83">Contains</name></name><argument_list pos:line="71" pos:column="91">(<argument><expr><call><name><name pos:line="71" pos:column="92">ct</name><op:operator pos:line="71" pos:column="94">.</op:operator><name pos:line="71" pos:column="95">Item1</name><op:operator pos:line="71" pos:column="100">.</op:operator><name pos:line="71" pos:column="101">ToLowerInvariant</name></name><argument_list pos:line="71" pos:column="117">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <return pos:line="73" pos:column="17">return <expr><name pos:line="73" pos:column="24">match</name> <op:operator pos:line="73" pos:column="30">!=</op:operator> <name pos:line="73" pos:column="33">null</name> <op:operator pos:line="73" pos:column="38">?</op:operator> <name><name pos:line="73" pos:column="40">match</name><op:operator pos:line="73" pos:column="45">.</op:operator><name pos:line="73" pos:column="46">Item2</name></name> <op:operator pos:line="73" pos:column="52">:</op:operator> <name><name pos:line="73" pos:column="54">RuntimePolicy</name><op:operator pos:line="73" pos:column="67">.</op:operator><name pos:line="73" pos:column="68">Off</name></name></expr>;</return>
            }</block>
            <catch pos:line="75" pos:column="13">catch <parameter_list pos:line="75" pos:column="19">(<param><decl><type><name pos:line="75" pos:column="20">Exception</name></type> <name pos:line="75" pos:column="30">exception</name></decl></param>)</parameter_list>
            <block pos:line="76" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="77" pos:column="17">policyContext</name><op:operator pos:line="77" pos:column="30">.</op:operator><name pos:line="77" pos:column="31">Logger</name><op:operator pos:line="77" pos:column="37">.</op:operator><name pos:line="77" pos:column="38">Warn</name></name><argument_list pos:line="77" pos:column="42">(<argument><expr><name><name pos:line="77" pos:column="43">Resources</name><op:operator pos:line="77" pos:column="52">.</op:operator><name pos:line="77" pos:column="53">ExecutePolicyWarning</name></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="75">exception</name></expr></argument>, <argument><expr><call><name pos:line="77" pos:column="86">GetType</name><argument_list pos:line="77" pos:column="93">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="78" pos:column="17">return <expr><name><name pos:line="78" pos:column="24">RuntimePolicy</name><op:operator pos:line="78" pos:column="37">.</op:operator><name pos:line="78" pos:column="38">Off</name></name></expr>;</return>
            }</block></catch></try>
        }</block></function>

        <comment type="line" pos:line="82" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="83" pos:column="9">/// Provides implementations an instance of &lt;see cref="Section" /&gt; to self populate any end user configuration options.</comment>
        <comment type="line" pos:line="84" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="85" pos:column="9">/// &lt;param name="section"&gt;The configuration section, &lt;c&gt;&amp;lt;glimpse&amp;gt;&lt;/c&gt; from &lt;c&gt;web.config&lt;/c&gt;.&lt;/param&gt;</comment>
        <comment type="line" pos:line="86" pos:column="9">/// &lt;remarks&gt;</comment>
        <comment type="line" pos:line="87" pos:column="9">/// Populates the content type white list with values from &lt;c&gt;web.config&lt;/c&gt;.</comment>
        <comment type="line" pos:line="88" pos:column="9">/// A list of ratified Http status codes is available in &lt;see href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html"&gt;Section 10 of RFC 2616&lt;/see&gt;, the Http version 1.1 specification.</comment>
        <comment type="line" pos:line="89" pos:column="9">/// &lt;/remarks&gt;</comment>
        <comment type="line" pos:line="90" pos:column="9">/// &lt;example&gt;</comment>
        <comment type="line" pos:line="91" pos:column="9">/// Configure the content type white list in &lt;c&gt;web.config&lt;/c&gt; with the following entries:</comment>
        <comment type="line" pos:line="92" pos:column="9">/// &lt;code&gt;</comment>
        <comment type="line" pos:line="93" pos:column="9">/// &lt;![CDATA[</comment>
        <comment type="line" pos:line="94" pos:column="9">/// &lt;glimpse defaultRuntimePolicy="On" endpointBaseUri="~/Glimpse.axd"&gt;</comment>
        <comment type="line" pos:line="95" pos:column="9">///     &lt;runtimePolicies&gt;</comment>
        <comment type="line" pos:line="96" pos:column="9">///         &lt;contentTypes&gt;</comment>
        <comment type="line" pos:line="97" pos:column="9">///             &lt;!-- &lt;clear /&gt; clear to reset defaults --&gt;</comment>
        <comment type="line" pos:line="98" pos:column="9">///             &lt;add contentType="{media\type}" runtimePolicy="on" /&gt;</comment>
        <comment type="line" pos:line="99" pos:column="9">///         &lt;/contentTypes&gt;</comment>
        <comment type="line" pos:line="100" pos:column="9">///     &lt;/runtimePolicies&gt;</comment>
        <comment type="line" pos:line="101" pos:column="9">/// &lt;/glimpse&gt;</comment>
        <comment type="line" pos:line="102" pos:column="9">/// ]]&gt;</comment>
        <comment type="line" pos:line="103" pos:column="9">/// &lt;/code&gt;</comment>
        <comment type="line" pos:line="104" pos:column="9">/// &lt;/example&gt;</comment>
        <function><type><specifier pos:line="105" pos:column="9">public</specifier> <name pos:line="105" pos:column="16">void</name></type> <name pos:line="105" pos:column="21">Configure</name><parameter_list pos:line="105" pos:column="30">(<param><decl><type><name pos:line="105" pos:column="31">Section</name></type> <name pos:line="105" pos:column="39">section</name></decl></param>)</parameter_list>
        <block pos:line="106" pos:column="9">{
            <foreach pos:line="107" pos:column="13">foreach (<init><decl><type><name pos:line="107" pos:column="22">ContentTypeElement</name></type> <name pos:line="107" pos:column="41">item</name> <range pos:line="107" pos:column="46">in <expr><name><name pos:line="107" pos:column="49">section</name><op:operator pos:line="107" pos:column="56">.</op:operator><name pos:line="107" pos:column="57">RuntimePolicies</name><op:operator pos:line="107" pos:column="72">.</op:operator><name pos:line="107" pos:column="73">ContentTypes</name></name></expr></range></decl></init>)
            <block pos:line="108" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="109" pos:column="17">ContentTypeWhiteList</name><op:operator pos:line="109" pos:column="37">.</op:operator><name pos:line="109" pos:column="38">Add</name></name><argument_list pos:line="109" pos:column="41">(<argument><expr><op:operator pos:line="109" pos:column="42">new</op:operator> <call><name><name pos:line="109" pos:column="46">Tuple</name><argument_list pos:line="109" pos:column="51">&lt;<argument><name pos:line="109" pos:column="52">string</name></argument>, <argument><name pos:line="109" pos:column="60">RuntimePolicy</name></argument>&gt;</argument_list></name><argument_list pos:line="109" pos:column="74">(<argument><expr><name><name pos:line="109" pos:column="75">item</name><op:operator pos:line="109" pos:column="79">.</op:operator><name pos:line="109" pos:column="80">ContentType</name></name></expr></argument>, <argument><expr><name><name pos:line="109" pos:column="93">item</name><op:operator pos:line="109" pos:column="97">.</op:operator><name pos:line="109" pos:column="98">RuntimePolicy</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
