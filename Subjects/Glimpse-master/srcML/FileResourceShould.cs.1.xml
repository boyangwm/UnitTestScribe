<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Core\Resource\FileResourceShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">System</name><op:operator pos:line="1" pos:column="13">.</op:operator><name pos:line="1" pos:column="14">Linq</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Text</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Glimpse</name><op:operator pos:line="3" pos:column="14">.</op:operator><name pos:line="3" pos:column="15">Core</name><op:operator pos:line="3" pos:column="19">.</op:operator><name pos:line="3" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Core</name><op:operator pos:line="4" pos:column="19">.</op:operator><name pos:line="4" pos:column="20">Framework</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Glimpse</name><op:operator pos:line="5" pos:column="14">.</op:operator><name pos:line="5" pos:column="15">Core</name><op:operator pos:line="5" pos:column="19">.</op:operator><name pos:line="5" pos:column="20">Resource</name></name>;</using>
<using pos:line="6" pos:column="1">using <name pos:line="6" pos:column="7">Moq</name>;</using>
<using pos:line="7" pos:column="1">using <name pos:line="7" pos:column="7">Xunit</name>;</using>

<namespace pos:line="9" pos:column="1">namespace <name><name pos:line="9" pos:column="11">Glimpse</name><op:operator pos:line="9" pos:column="18">.</op:operator><name pos:line="9" pos:column="19">Test</name><op:operator pos:line="9" pos:column="23">.</op:operator><name pos:line="9" pos:column="24">Core</name><op:operator pos:line="9" pos:column="28">.</op:operator><name pos:line="9" pos:column="29">Resource</name></name>
<block pos:line="10" pos:column="1">{
    <class><specifier pos:line="11" pos:column="5">public</specifier> class <name pos:line="11" pos:column="18">FileResourceShould</name>
    <block pos:line="12" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="13" pos:column="9">private</specifier> <specifier pos:line="13" pos:column="17">readonly</specifier> <name><name pos:line="13" pos:column="26">Mock</name><argument_list pos:line="13" pos:column="30">&lt;<argument><name pos:line="13" pos:column="31">IFrameworkProvider</name></argument>&gt;</argument_list></name></type> <name pos:line="13" pos:column="51">mockFrameworkProvider</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="14" pos:column="9">private</specifier> <specifier pos:line="14" pos:column="17">readonly</specifier> <name><name pos:line="14" pos:column="26">Mock</name><argument_list pos:line="14" pos:column="30">&lt;<argument><name pos:line="14" pos:column="31">IResourceContext</name></argument>&gt;</argument_list></name></type> <name pos:line="14" pos:column="49">mockResourceContext</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="15" pos:column="9">private</specifier> <specifier pos:line="15" pos:column="17">readonly</specifier> <name><name pos:line="15" pos:column="26">Mock</name><argument_list pos:line="15" pos:column="30">&lt;<argument><name pos:line="15" pos:column="31">IResourceResultContext</name></argument>&gt;</argument_list></name></type> <name pos:line="15" pos:column="55">mockResourceResultContext</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="16" pos:column="9">private</specifier> <name pos:line="16" pos:column="17">byte</name><index pos:line="16" pos:column="21">[]</index></type> <name pos:line="16" pos:column="24">returnedContent</name></decl>;</decl_stmt>

        <constructor><specifier pos:line="18" pos:column="9">public</specifier> <name pos:line="18" pos:column="16">FileResourceShould</name><parameter_list pos:line="18" pos:column="34">()</parameter_list> <block pos:line="18" pos:column="37">{
            <expr_stmt><expr><name pos:line="19" pos:column="13">mockResourceContext</name> <op:operator pos:line="19" pos:column="33">=</op:operator> <op:operator pos:line="19" pos:column="35">new</op:operator> <call><name><name pos:line="19" pos:column="39">Mock</name><argument_list pos:line="19" pos:column="43">&lt;<argument><name pos:line="19" pos:column="44">IResourceContext</name></argument>&gt;</argument_list></name><argument_list pos:line="19" pos:column="61">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="20" pos:column="13">mockResourceResultContext</name> <op:operator pos:line="20" pos:column="39">=</op:operator> <op:operator pos:line="20" pos:column="41">new</op:operator> <call><name><name pos:line="20" pos:column="45">Mock</name><argument_list pos:line="20" pos:column="49">&lt;<argument><name pos:line="20" pos:column="50">IResourceResultContext</name></argument>&gt;</argument_list></name><argument_list pos:line="20" pos:column="73">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="21" pos:column="13">mockFrameworkProvider</name> <op:operator pos:line="21" pos:column="35">=</op:operator> <op:operator pos:line="21" pos:column="37">new</op:operator> <call><name><name pos:line="21" pos:column="41">Mock</name><argument_list pos:line="21" pos:column="45">&lt;<argument><name pos:line="21" pos:column="46">IFrameworkProvider</name></argument>&gt;</argument_list></name><argument_list pos:line="21" pos:column="65">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="23" pos:column="13">mockResourceResultContext</name><op:operator pos:line="23" pos:column="38">.</op:operator><name pos:line="23" pos:column="39">SetupGet</name></name><argument_list pos:line="23" pos:column="47">(<argument><expr><lambda><name pos:line="23" pos:column="48">c</name> <op:operator pos:line="23" pos:column="50">=&gt;</op:operator> <name><name pos:line="23" pos:column="53">c</name><op:operator pos:line="23" pos:column="54">.</op:operator><name pos:line="23" pos:column="55">FrameworkProvider</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="23" pos:column="73">.</op:operator><call><name pos:line="23" pos:column="74">Returns</name><argument_list pos:line="23" pos:column="81">(<argument><expr><name><name pos:line="23" pos:column="82">mockFrameworkProvider</name><op:operator pos:line="23" pos:column="103">.</op:operator><name pos:line="23" pos:column="104">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="25" pos:column="13">mockFrameworkProvider</name><op:operator pos:line="25" pos:column="34">.</op:operator><name pos:line="25" pos:column="35">Setup</name></name><argument_list pos:line="25" pos:column="40">(<argument><expr><lambda><name pos:line="25" pos:column="41">p</name> <op:operator pos:line="25" pos:column="43">=&gt;</op:operator> <call><name><name pos:line="25" pos:column="46">p</name><op:operator pos:line="25" pos:column="47">.</op:operator><name pos:line="25" pos:column="48">WriteHttpResponse</name></name><argument_list pos:line="25" pos:column="65">(<argument><expr><call><name><name pos:line="25" pos:column="66">It</name><op:operator pos:line="25" pos:column="68">.</op:operator><name><name pos:line="25" pos:column="69">IsAny</name><argument_list pos:line="25" pos:column="74">&lt;<argument><name><name pos:line="25" pos:column="75">byte</name><index pos:line="25" pos:column="79">[]</index></name></argument>&gt;</argument_list></name></name><argument_list pos:line="25" pos:column="82">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="25" pos:column="86">.</op:operator><call><name><name pos:line="25" pos:column="87">Callback</name><argument_list pos:line="25" pos:column="95">&lt;<argument><name><name pos:line="25" pos:column="96">byte</name><index pos:line="25" pos:column="100">[]</index></name></argument>&gt;</argument_list></name><argument_list pos:line="25" pos:column="103">(<argument><expr><lambda><name pos:line="25" pos:column="104">content</name> <op:operator pos:line="25" pos:column="112">=&gt;</op:operator> <name pos:line="25" pos:column="115">returnedContent</name> <op:operator pos:line="25" pos:column="131">=</op:operator> <name pos:line="25" pos:column="133">content</name></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><attribute pos:line="28" pos:column="9">[<expr><name pos:line="28" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="29" pos:column="9">public</specifier> <name pos:line="29" pos:column="16">void</name></type> <name pos:line="29" pos:column="21">BeUsableFromSeperateAssembly</name><parameter_list pos:line="29" pos:column="49">()</parameter_list> <block pos:line="29" pos:column="52">{
            <decl_stmt><decl><type><name pos:line="30" pos:column="13">var</name></type> <name pos:line="30" pos:column="17">tester</name> <init pos:line="30" pos:column="24">= <expr><op:operator pos:line="30" pos:column="26">new</op:operator> <call><name pos:line="30" pos:column="30">FileResourceTester</name><argument_list pos:line="30" pos:column="48">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="32" pos:column="13">var</name></type> <name pos:line="32" pos:column="17">result</name> <init pos:line="32" pos:column="24">= <expr><call><name><name pos:line="32" pos:column="26">tester</name><op:operator pos:line="32" pos:column="32">.</op:operator><name pos:line="32" pos:column="33">Execute</name></name><argument_list pos:line="32" pos:column="40">(<argument><expr><name><name pos:line="32" pos:column="41">mockResourceContext</name><op:operator pos:line="32" pos:column="60">.</op:operator><name pos:line="32" pos:column="61">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="33" pos:column="13">result</name><op:operator pos:line="33" pos:column="19">.</op:operator><name pos:line="33" pos:column="20">Execute</name></name><argument_list pos:line="33" pos:column="27">(<argument><expr><name><name pos:line="33" pos:column="28">mockResourceResultContext</name><op:operator pos:line="33" pos:column="53">.</op:operator><name pos:line="33" pos:column="54">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="35" pos:column="13">var</name></type> <name pos:line="35" pos:column="17">temp</name> <init pos:line="35" pos:column="22">= <expr><call><name><name pos:line="35" pos:column="24">Encoding</name><op:operator pos:line="35" pos:column="32">.</op:operator><name pos:line="35" pos:column="33">UTF8</name><op:operator pos:line="35" pos:column="37">.</op:operator><name pos:line="35" pos:column="38">GetString</name></name><argument_list pos:line="35" pos:column="47">(<argument><expr><call><name><name pos:line="35" pos:column="48">returnedContent</name><op:operator pos:line="35" pos:column="63">.</op:operator><name pos:line="35" pos:column="64">Skip</name></name><argument_list pos:line="35" pos:column="68">(<argument><expr><lit:literal type="number" pos:line="35" pos:column="69">3</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="35" pos:column="71">.</op:operator><call><name pos:line="35" pos:column="72">ToArray</name><argument_list pos:line="35" pos:column="79">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="36" pos:column="13">Assert</name><op:operator pos:line="36" pos:column="19">.</op:operator><name pos:line="36" pos:column="20">Equal</name></name><argument_list pos:line="36" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="36" pos:column="26">"alert('FileResourceTester');"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="36" pos:column="58">temp</name><op:operator pos:line="36" pos:column="62">.</op:operator><name pos:line="36" pos:column="63">TrimStart</name></name><argument_list pos:line="36" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <cpp:region pos:line="39" pos:column="9">#<cpp:directive pos:line="39" pos:column="10">region</cpp:directive> Nested type: FileResourceTester</cpp:region>

        <class><specifier pos:line="41" pos:column="9">private</specifier> class <name pos:line="41" pos:column="23">FileResourceTester</name> <super pos:line="41" pos:column="42">: <name pos:line="41" pos:column="44">FileResource</name></super>
        <block pos:line="42" pos:column="9">{
            <constructor><specifier pos:line="43" pos:column="13">public</specifier> <name pos:line="43" pos:column="20">FileResourceTester</name><parameter_list pos:line="43" pos:column="38">()</parameter_list> <block pos:line="43" pos:column="41">{
                <expr_stmt><expr><name pos:line="44" pos:column="17">Name</name> <op:operator pos:line="44" pos:column="22">=</op:operator> <lit:literal type="string" pos:line="44" pos:column="24">"FileResourceTester_js"</lit:literal></expr>;</expr_stmt>
            }</block></constructor>

            <function><type><specifier pos:line="47" pos:column="13">protected</specifier> <specifier pos:line="47" pos:column="23">override</specifier> <name pos:line="47" pos:column="32">EmbeddedResourceInfo</name></type> <name pos:line="47" pos:column="53">GetEmbeddedResourceInfo</name><parameter_list pos:line="47" pos:column="76">(<param><decl><type><name pos:line="47" pos:column="77">IResourceContext</name></type> <name pos:line="47" pos:column="94">context</name></decl></param>)</parameter_list>
            <block pos:line="48" pos:column="13">{
                <return pos:line="49" pos:column="17">return <expr><op:operator pos:line="49" pos:column="24">new</op:operator> <call><name pos:line="49" pos:column="28">EmbeddedResourceInfo</name><argument_list pos:line="49" pos:column="48">(
                    <argument><expr><call><name><name pos:line="50" pos:column="21">this</name><op:operator pos:line="50" pos:column="25">.</op:operator><name pos:line="50" pos:column="26">GetType</name></name><argument_list pos:line="50" pos:column="33">()</argument_list></call><op:operator pos:line="50" pos:column="35">.</op:operator><name pos:line="50" pos:column="36">Assembly</name></expr></argument>, 
                    <argument><expr><lit:literal type="string" pos:line="51" pos:column="21">"Glimpse.Test.Core.Resource.FileResourceTester.js"</lit:literal></expr></argument>, 
                    <argument><expr><lit:literal type="string" pos:line="52" pos:column="21">"application/x-javascript"</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class>

        <cpp:endregion pos:line="56" pos:column="9">#<cpp:directive pos:line="56" pos:column="10">endregion</cpp:directive></cpp:endregion>
    }</block></class>
}</block></namespace></unit>
