<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.AspNet\AspNetServiceLocator.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">System</name><op:operator pos:line="1" pos:column="13">.</op:operator><name pos:line="1" pos:column="14">Collections</name><op:operator pos:line="1" pos:column="25">.</op:operator><name pos:line="1" pos:column="26">Generic</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">Glimpse</name><op:operator pos:line="2" pos:column="14">.</op:operator><name pos:line="2" pos:column="15">Core</name><op:operator pos:line="2" pos:column="19">.</op:operator><name pos:line="2" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Glimpse</name><op:operator pos:line="3" pos:column="14">.</op:operator><name pos:line="3" pos:column="15">Core</name><op:operator pos:line="3" pos:column="19">.</op:operator><name pos:line="3" pos:column="20">Framework</name></name>;</using>

<namespace pos:line="5" pos:column="1">namespace <name><name pos:line="5" pos:column="11">Glimpse</name><op:operator pos:line="5" pos:column="18">.</op:operator><name pos:line="5" pos:column="19">AspNet</name></name>
<block pos:line="6" pos:column="1">{
    <class><specifier pos:line="7" pos:column="5">public</specifier> class <name pos:line="7" pos:column="18">AspNetServiceLocator</name> <super pos:line="7" pos:column="39">: <name pos:line="7" pos:column="41">IServiceLocator</name></super>
    <block pos:line="8" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="9" pos:column="9">private</specifier> <name pos:line="9" pos:column="17">ILogger</name></type> <name pos:line="9" pos:column="25">logger</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="11" pos:column="9">internal</specifier> <name pos:line="11" pos:column="18">ILogger</name></type> <name pos:line="11" pos:column="26">Logger</name>
        <block pos:line="12" pos:column="9">{
            <function><name pos:line="13" pos:column="13">get</name> <block pos:line="13" pos:column="17">{ <return pos:line="13" pos:column="19">return <expr><name pos:line="13" pos:column="26">logger</name> <op:operator pos:line="13" pos:column="33">??</op:operator> <op:operator pos:line="13" pos:column="36">(</op:operator><name pos:line="13" pos:column="37">logger</name> <op:operator pos:line="13" pos:column="44">=</op:operator> <op:operator pos:line="13" pos:column="46">new</op:operator> <call><name pos:line="13" pos:column="50">NullLogger</name><argument_list pos:line="13" pos:column="60">()</argument_list></call><op:operator pos:line="13" pos:column="62">)</op:operator></expr>;</return> }</block></function>
            <function><name pos:line="14" pos:column="13">set</name> <block pos:line="14" pos:column="17">{ <expr_stmt><expr><name pos:line="14" pos:column="19">logger</name> <op:operator pos:line="14" pos:column="26">=</op:operator> <name pos:line="14" pos:column="28">value</name></expr>;</expr_stmt> }</block></function>
        }</block></decl></decl_stmt>

        <function><type><specifier pos:line="17" pos:column="9">public</specifier> <name pos:line="17" pos:column="16">T</name></type> <name><name pos:line="17" pos:column="18">GetInstance</name><argument_list pos:line="17" pos:column="29">&lt;<argument><name pos:line="17" pos:column="30">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="17" pos:column="32">()</parameter_list> <where pos:line="17" pos:column="35">where <name pos:line="17" pos:column="41">T</name> : class</where>
        <block pos:line="18" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="19" pos:column="13">var</name></type> <name pos:line="19" pos:column="17">type</name> <init pos:line="19" pos:column="22">= <expr><call><name pos:line="19" pos:column="24">typeof</name><argument_list pos:line="19" pos:column="30">(<argument><expr><name pos:line="19" pos:column="31">T</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="20" pos:column="13">if <condition pos:line="20" pos:column="16">(<expr><name pos:line="20" pos:column="17">type</name> <op:operator pos:line="20" pos:column="22">==</op:operator> <call><name pos:line="20" pos:column="25">typeof</name><argument_list pos:line="20" pos:column="31">(<argument><expr><name pos:line="20" pos:column="32">IFrameworkProvider</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="20" pos:column="52">
            <block pos:line="21" pos:column="13">{
                <return pos:line="22" pos:column="17">return <expr><op:operator pos:line="22" pos:column="24">new</op:operator> <call><name pos:line="22" pos:column="28">AspNetFrameworkProvider</name><argument_list pos:line="22" pos:column="51">(<argument><expr><name pos:line="22" pos:column="52">Logger</name></expr></argument>)</argument_list></call> <op:operator pos:line="22" pos:column="60">as</op:operator> <name pos:line="22" pos:column="63">T</name></expr>;</return>
            }</block></then></if>

            <if pos:line="25" pos:column="13">if <condition pos:line="25" pos:column="16">(<expr><name pos:line="25" pos:column="17">type</name> <op:operator pos:line="25" pos:column="22">==</op:operator> <call><name pos:line="25" pos:column="25">typeof</name><argument_list pos:line="25" pos:column="31">(<argument><expr><name pos:line="25" pos:column="32">ResourceEndpointConfiguration</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="25" pos:column="63">
            <block pos:line="26" pos:column="13">{
                <return pos:line="27" pos:column="17">return <expr><op:operator pos:line="27" pos:column="24">new</op:operator> <call><name pos:line="27" pos:column="28">HttpHandlerEndpointConfiguration</name><argument_list pos:line="27" pos:column="60">()</argument_list></call> <op:operator pos:line="27" pos:column="63">as</op:operator> <name pos:line="27" pos:column="66">T</name></expr>;</return>
            }</block></then></if>

            <return pos:line="30" pos:column="13">return <expr><name pos:line="30" pos:column="20">null</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="33" pos:column="9">public</specifier> <name><name pos:line="33" pos:column="16">ICollection</name><argument_list pos:line="33" pos:column="27">&lt;<argument><name pos:line="33" pos:column="28">T</name></argument>&gt;</argument_list></name></type> <name><name pos:line="33" pos:column="31">GetAllInstances</name><argument_list pos:line="33" pos:column="46">&lt;<argument><name pos:line="33" pos:column="47">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="33" pos:column="49">()</parameter_list> <where pos:line="33" pos:column="52">where <name pos:line="33" pos:column="58">T</name> : class</where>
        <block pos:line="34" pos:column="9">{
            <return pos:line="35" pos:column="13">return <expr><name pos:line="35" pos:column="20">null</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
