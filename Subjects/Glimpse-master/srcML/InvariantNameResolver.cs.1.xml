<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.EF\AlternateType\InvariantNameResolver.cs" pos:tabs="8"><cpp:if pos:line="1" pos:column="1">#<cpp:directive pos:line="1" pos:column="2">if</cpp:directive> <expr><name pos:line="1" pos:column="5">EF6Plus</name></expr></cpp:if>
<using pos:line="2" pos:column="1">using <name pos:line="2" pos:column="7">System</name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Collections</name><op:operator pos:line="3" pos:column="25">.</op:operator><name pos:line="3" pos:column="26">Generic</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Data</name><op:operator pos:line="4" pos:column="18">.</op:operator><name pos:line="4" pos:column="19">Entity</name><op:operator pos:line="4" pos:column="25">.</op:operator><name pos:line="4" pos:column="26">Infrastructure</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Data</name><op:operator pos:line="5" pos:column="18">.</op:operator><name pos:line="5" pos:column="19">Entity</name><op:operator pos:line="5" pos:column="25">.</op:operator><name pos:line="5" pos:column="26">Infrastructure</name><op:operator pos:line="5" pos:column="40">.</op:operator><name pos:line="5" pos:column="41">DependencyResolution</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">System</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">Linq</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Glimpse</name><op:operator pos:line="7" pos:column="14">.</op:operator><name pos:line="7" pos:column="15">Ado</name><op:operator pos:line="7" pos:column="18">.</op:operator><name pos:line="7" pos:column="19">Inspector</name><op:operator pos:line="7" pos:column="28">.</op:operator><name pos:line="7" pos:column="29">Core</name></name>;</using>

<namespace pos:line="9" pos:column="1">namespace <name><name pos:line="9" pos:column="11">Glimpse</name><op:operator pos:line="9" pos:column="18">.</op:operator><name pos:line="9" pos:column="19">EF</name><op:operator pos:line="9" pos:column="21">.</op:operator><name pos:line="9" pos:column="22">AlternateType</name></name>
<block pos:line="10" pos:column="1">{
    <class><specifier pos:line="11" pos:column="5">public</specifier> class <name pos:line="11" pos:column="18">InvariantNameResolver</name> <super pos:line="11" pos:column="40">: <name pos:line="11" pos:column="42">IDbDependencyResolver</name></super>
    <block pos:line="12" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="13" pos:column="9">private</specifier> <specifier pos:line="13" pos:column="17">readonly</specifier> <name pos:line="13" pos:column="26">object</name></type> <name pos:line="13" pos:column="33">registeredFactoriesLock</name> <init pos:line="13" pos:column="57">= <expr><op:operator pos:line="13" pos:column="59">new</op:operator> <call><name pos:line="13" pos:column="63">object</name><argument_list pos:line="13" pos:column="69">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="14" pos:column="9">private</specifier> <name><name pos:line="14" pos:column="17">Dictionary</name><argument_list pos:line="14" pos:column="27">&lt;<argument><name pos:line="14" pos:column="28">string</name></argument>, <argument><name pos:line="14" pos:column="36">string</name></argument>&gt;</argument_list></name></type> <name pos:line="14" pos:column="44">registeredFactories</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="16" pos:column="9">private</specifier> <name><name pos:line="16" pos:column="17">Dictionary</name><argument_list pos:line="16" pos:column="27">&lt;<argument><name pos:line="16" pos:column="28">string</name></argument>, <argument><name pos:line="16" pos:column="36">string</name></argument>&gt;</argument_list></name></type> <name pos:line="16" pos:column="44">RegisteredFactories</name>
        <block pos:line="17" pos:column="9">{
            <function><name pos:line="18" pos:column="13">get</name>
            <block pos:line="19" pos:column="13">{
                <if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><name pos:line="20" pos:column="21">registeredFactories</name> <op:operator pos:line="20" pos:column="41">==</op:operator> <name pos:line="20" pos:column="44">null</name></expr>)</condition><then pos:line="20" pos:column="49">
                <block pos:line="21" pos:column="17">{
                    <lock pos:line="22" pos:column="21">lock (<expr><name pos:line="22" pos:column="27">registeredFactoriesLock</name></expr>)
                    <block pos:line="23" pos:column="21">{
                        <if pos:line="24" pos:column="25">if <condition pos:line="24" pos:column="28">(<expr><name pos:line="24" pos:column="29">registeredFactories</name> <op:operator pos:line="24" pos:column="49">==</op:operator> <name pos:line="24" pos:column="52">null</name></expr>)</condition><then pos:line="24" pos:column="57">
                        <block pos:line="25" pos:column="25">{
                            <expr_stmt><expr><name pos:line="26" pos:column="29">registeredFactories</name> <op:operator pos:line="26" pos:column="49">=</op:operator> <call><name><name pos:line="26" pos:column="51">DbProviderFactoriesExecutionTask</name><op:operator pos:line="26" pos:column="83">.</op:operator><name pos:line="26" pos:column="84">Factories</name>
                                <op:operator pos:line="27" pos:column="33">.</op:operator><name pos:line="27" pos:column="34">ToDictionary</name></name><argument_list pos:line="27" pos:column="46">(<argument><expr><lambda><name pos:line="27" pos:column="47">x</name> <op:operator pos:line="27" pos:column="49">=&gt;</op:operator> <name><name pos:line="27" pos:column="52">x</name><op:operator pos:line="27" pos:column="53">.</op:operator><name pos:line="27" pos:column="54">Value</name></name></lambda></expr></argument>, <argument><expr><lambda><name pos:line="27" pos:column="61">x</name> <op:operator pos:line="27" pos:column="63">=&gt;</op:operator> <name><name pos:line="27" pos:column="66">x</name><op:operator pos:line="27" pos:column="67">.</op:operator><name pos:line="27" pos:column="68">Key</name></name></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></lock>
                }</block></then></if>

                <return pos:line="32" pos:column="17">return <expr><name pos:line="32" pos:column="24">registeredFactories</name></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt> 

        <function><type><specifier pos:line="36" pos:column="9">public</specifier> <specifier pos:line="36" pos:column="16">virtual</specifier> <name pos:line="36" pos:column="24">object</name></type> <name pos:line="36" pos:column="31">GetService</name><parameter_list pos:line="36" pos:column="41">(<param><decl><type><name pos:line="36" pos:column="42">Type</name></type> <name pos:line="36" pos:column="47">type</name></decl></param>, <param><decl><type><name pos:line="36" pos:column="53">object</name></type> <name pos:line="36" pos:column="60">key</name></decl></param>)</parameter_list>
        <block pos:line="37" pos:column="9">{
            <if pos:line="38" pos:column="13">if <condition pos:line="38" pos:column="16">(<expr><name pos:line="38" pos:column="17">type</name> <op:operator pos:line="38" pos:column="22">==</op:operator> <call><name pos:line="38" pos:column="25">typeof</name><argument_list pos:line="38" pos:column="31">(<argument><expr><name pos:line="38" pos:column="32">IProviderInvariantName</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="38" pos:column="56">
            <block pos:line="39" pos:column="13">{ 
                <decl_stmt><decl><type><name pos:line="40" pos:column="17">var</name></type> <name pos:line="40" pos:column="21">factoryType</name> <init pos:line="40" pos:column="33">= <expr><call><name><name pos:line="40" pos:column="35">key</name><op:operator pos:line="40" pos:column="38">.</op:operator><name pos:line="40" pos:column="39">GetType</name></name><argument_list pos:line="40" pos:column="46">()</argument_list></call><op:operator pos:line="40" pos:column="48">.</op:operator><name pos:line="40" pos:column="49">AssemblyQualifiedName</name></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name pos:line="42" pos:column="17">var</name></type> <name pos:line="42" pos:column="21">factoryName</name> <init pos:line="42" pos:column="33">= <expr><op:operator pos:line="42" pos:column="35">(</op:operator><name pos:line="42" pos:column="36">string</name><op:operator pos:line="42" pos:column="42">)</op:operator><name pos:line="42" pos:column="43">null</name></expr></init></decl>;</decl_stmt>
                <if pos:line="43" pos:column="17">if <condition pos:line="43" pos:column="20">(<expr><call><name><name pos:line="43" pos:column="21">RegisteredFactories</name><op:operator pos:line="43" pos:column="40">.</op:operator><name pos:line="43" pos:column="41">TryGetValue</name></name><argument_list pos:line="43" pos:column="52">(<argument><expr><name pos:line="43" pos:column="53">factoryType</name></expr></argument>, <argument><expr pos:line="43" pos:column="66">out <name pos:line="43" pos:column="70">factoryName</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="43" pos:column="83">
                <block pos:line="44" pos:column="17">{
                    <return pos:line="45" pos:column="21">return <expr><op:operator pos:line="45" pos:column="28">new</op:operator> <call><name pos:line="45" pos:column="32">ProviderInvariantName</name><argument_list pos:line="45" pos:column="53">(<argument><expr><name pos:line="45" pos:column="54">factoryName</name></expr></argument>)</argument_list></call></expr>;</return>
                }</block></then></if>  
            }</block></then></if>

            <return pos:line="49" pos:column="13">return <expr><name pos:line="49" pos:column="20">null</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="52" pos:column="9">public</specifier> <name><name pos:line="52" pos:column="16">IEnumerable</name><argument_list pos:line="52" pos:column="27">&lt;<argument><name pos:line="52" pos:column="28">object</name></argument>&gt;</argument_list></name></type> <name pos:line="52" pos:column="36">GetServices</name><parameter_list pos:line="52" pos:column="47">(<param><decl><type><name pos:line="52" pos:column="48">Type</name></type> <name pos:line="52" pos:column="53">type</name></decl></param>, <param><decl><type><name pos:line="52" pos:column="59">object</name></type> <name pos:line="52" pos:column="66">key</name></decl></param>)</parameter_list>
        <block pos:line="53" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="54" pos:column="13">var</name></type> <name pos:line="54" pos:column="17">service</name> <init pos:line="54" pos:column="25">= <expr><call><name pos:line="54" pos:column="27">GetService</name><argument_list pos:line="54" pos:column="37">(<argument><expr><name pos:line="54" pos:column="38">type</name></expr></argument>, <argument><expr><name pos:line="54" pos:column="44">key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <return pos:line="56" pos:column="13">return <expr><name pos:line="56" pos:column="20">service</name> <op:operator pos:line="56" pos:column="28">==</op:operator> <name pos:line="56" pos:column="31">null</name> <op:operator pos:line="56" pos:column="36">?</op:operator> <call><name><name pos:line="56" pos:column="38">Enumerable</name><op:operator pos:line="56" pos:column="48">.</op:operator><name><name pos:line="56" pos:column="49">Empty</name><argument_list pos:line="56" pos:column="54">&lt;<argument><name pos:line="56" pos:column="55">object</name></argument>&gt;</argument_list></name></name><argument_list pos:line="56" pos:column="62">()</argument_list></call> <op:operator pos:line="56" pos:column="65">:</op:operator> <op:operator pos:line="56" pos:column="67">new</op:operator><index pos:line="56" pos:column="70">[]</index> <block pos:line="56" pos:column="73">{<expr><name pos:line="56" pos:column="74">service</name></expr>}</block></expr>;</return>
        }</block></function>

        <class><specifier pos:line="59" pos:column="9">private</specifier> class <name pos:line="59" pos:column="23">ProviderInvariantName</name> <super pos:line="59" pos:column="45">: <name pos:line="59" pos:column="47">IProviderInvariantName</name></super>
        <block pos:line="60" pos:column="9">{
            <constructor><specifier pos:line="61" pos:column="13">public</specifier> <name pos:line="61" pos:column="20">ProviderInvariantName</name><parameter_list pos:line="61" pos:column="41">(<param><decl><type><name pos:line="61" pos:column="42">string</name></type> <name pos:line="61" pos:column="49">name</name></decl></param>)</parameter_list>
            <block pos:line="62" pos:column="13">{
                <expr_stmt><expr><name pos:line="63" pos:column="17">Name</name> <op:operator pos:line="63" pos:column="22">=</op:operator> <name pos:line="63" pos:column="24">name</name></expr>;</expr_stmt>
            }</block></constructor>

            <decl_stmt><decl><type><specifier pos:line="66" pos:column="13">public</specifier> <name pos:line="66" pos:column="20">string</name></type> <name pos:line="66" pos:column="27">Name</name> <block pos:line="66" pos:column="32">{ <function_decl><name pos:line="66" pos:column="34">get</name>;</function_decl> <function_decl><specifier pos:line="66" pos:column="39">private</specifier> <name pos:line="66" pos:column="47">set</name>;</function_decl> }</block></decl></decl_stmt>
        }</block></class>
    }</block></class>
}
<cpp:endif pos:line="70" pos:column="1">#<cpp:directive pos:line="70" pos:column="2">endif</cpp:directive></cpp:endif></block></namespace></unit>
