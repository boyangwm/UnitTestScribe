<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Core\Extensibility\CastleInvocationToAlternateMethodContextAdapterShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Diagnostics</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Castle</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">DynamicProxy</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Glimpse</name><op:operator pos:line="5" pos:column="14">.</op:operator><name pos:line="5" pos:column="15">Core</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Glimpse</name><op:operator pos:line="6" pos:column="14">.</op:operator><name pos:line="6" pos:column="15">Core</name><op:operator pos:line="6" pos:column="19">.</op:operator><name pos:line="6" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="7" pos:column="1">using <name pos:line="7" pos:column="7">Moq</name>;</using>
<using pos:line="8" pos:column="1">using <name pos:line="8" pos:column="7">Xunit</name>;</using>

<namespace pos:line="10" pos:column="1">namespace <name><name pos:line="10" pos:column="11">Glimpse</name><op:operator pos:line="10" pos:column="18">.</op:operator><name pos:line="10" pos:column="19">Test</name><op:operator pos:line="10" pos:column="23">.</op:operator><name pos:line="10" pos:column="24">Core</name><op:operator pos:line="10" pos:column="28">.</op:operator><name pos:line="10" pos:column="29">Extensibility</name></name>
<block pos:line="11" pos:column="1">{
    <class><specifier pos:line="12" pos:column="5">public</specifier> class <name pos:line="12" pos:column="18">CastleInvocationToAlternateMethodContextAdapterShould</name>
    <block pos:line="13" pos:column="5">{
        <function><type><attribute pos:line="14" pos:column="9">[<expr><name pos:line="14" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="15" pos:column="9">public</specifier> <name pos:line="15" pos:column="16">void</name></type> <name pos:line="15" pos:column="21">Construct</name><parameter_list pos:line="15" pos:column="30">()</parameter_list>
        <block pos:line="16" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="17" pos:column="13">var</name></type> <name pos:line="17" pos:column="17">invocationMock</name> <init pos:line="17" pos:column="32">= <expr><op:operator pos:line="17" pos:column="34">new</op:operator> <call><name><name pos:line="17" pos:column="38">Mock</name><argument_list pos:line="17" pos:column="42">&lt;<argument><name pos:line="17" pos:column="43">IInvocation</name></argument>&gt;</argument_list></name><argument_list pos:line="17" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="18" pos:column="13">var</name></type> <name pos:line="18" pos:column="17">loggerMock</name> <init pos:line="18" pos:column="28">= <expr><op:operator pos:line="18" pos:column="30">new</op:operator> <call><name><name pos:line="18" pos:column="34">Mock</name><argument_list pos:line="18" pos:column="38">&lt;<argument><name pos:line="18" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="18" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="20" pos:column="13">var</name></type> <name pos:line="20" pos:column="17">adapter</name> <init pos:line="20" pos:column="25">= <expr><op:operator pos:line="20" pos:column="27">new</op:operator> <call><name pos:line="20" pos:column="31">CastleInvocationToAlternateMethodContextAdapter</name><argument_list pos:line="20" pos:column="78">(<argument><expr><name><name pos:line="20" pos:column="79">invocationMock</name><op:operator pos:line="20" pos:column="93">.</op:operator><name pos:line="20" pos:column="94">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="102">loggerMock</name><op:operator pos:line="20" pos:column="112">.</op:operator><name pos:line="20" pos:column="113">Object</name></name></expr></argument>, <argument><expr><op:operator pos:line="20" pos:column="121">new</op:operator> <call><name><name pos:line="20" pos:column="125">Mock</name><argument_list pos:line="20" pos:column="129">&lt;<argument><name pos:line="20" pos:column="130">IMessageBroker</name></argument>&gt;</argument_list></name><argument_list pos:line="20" pos:column="145">()</argument_list></call><op:operator pos:line="20" pos:column="147">.</op:operator><name pos:line="20" pos:column="148">Object</name></expr></argument>, <argument><expr><op:operator pos:line="20" pos:column="156">new</op:operator> <call><name><name pos:line="20" pos:column="160">Mock</name><argument_list pos:line="20" pos:column="164">&lt;<argument><name pos:line="20" pos:column="165">IProxyFactory</name></argument>&gt;</argument_list></name><argument_list pos:line="20" pos:column="179">()</argument_list></call><op:operator pos:line="20" pos:column="181">.</op:operator><name pos:line="20" pos:column="182">Object</name></expr></argument>, <argument><expr><lambda><parameter_list pos:line="20" pos:column="190">()</parameter_list> <op:operator pos:line="20" pos:column="193">=&gt;</op:operator> <op:operator pos:line="20" pos:column="196">new</op:operator> <call><name pos:line="20" pos:column="200">ExecutionTimer</name><argument_list pos:line="20" pos:column="214">(<argument><expr><call><name><name pos:line="20" pos:column="215">Stopwatch</name><op:operator pos:line="20" pos:column="224">.</op:operator><name pos:line="20" pos:column="225">StartNew</name></name><argument_list pos:line="20" pos:column="233">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><lambda><parameter_list pos:line="20" pos:column="238">()</parameter_list> <op:operator pos:line="20" pos:column="241">=&gt;</op:operator> <name><name pos:line="20" pos:column="244">RuntimePolicy</name><op:operator pos:line="20" pos:column="257">.</op:operator><name pos:line="20" pos:column="258">On</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="22" pos:column="13">Assert</name><op:operator pos:line="22" pos:column="19">.</op:operator><name pos:line="22" pos:column="20">Equal</name></name><argument_list pos:line="22" pos:column="25">(<argument><expr><name><name pos:line="22" pos:column="26">invocationMock</name><op:operator pos:line="22" pos:column="40">.</op:operator><name pos:line="22" pos:column="41">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="49">adapter</name><op:operator pos:line="22" pos:column="56">.</op:operator><name pos:line="22" pos:column="57">Invocation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="23" pos:column="13">Assert</name><op:operator pos:line="23" pos:column="19">.</op:operator><name pos:line="23" pos:column="20">Equal</name></name><argument_list pos:line="23" pos:column="25">(<argument><expr><name><name pos:line="23" pos:column="26">loggerMock</name><op:operator pos:line="23" pos:column="36">.</op:operator><name pos:line="23" pos:column="37">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="45">adapter</name><op:operator pos:line="23" pos:column="52">.</op:operator><name pos:line="23" pos:column="53">Logger</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="26" pos:column="9">[<expr><name pos:line="26" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="27" pos:column="9">public</specifier> <name pos:line="27" pos:column="16">void</name></type> <name pos:line="27" pos:column="21">ThrowExceptionWithNullConstructorParameters</name><parameter_list pos:line="27" pos:column="64">()</parameter_list>
        <block pos:line="28" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="29" pos:column="13">var</name></type> <name pos:line="29" pos:column="17">invocationMock</name> <init pos:line="29" pos:column="32">= <expr><op:operator pos:line="29" pos:column="34">new</op:operator> <call><name><name pos:line="29" pos:column="38">Mock</name><argument_list pos:line="29" pos:column="42">&lt;<argument><name pos:line="29" pos:column="43">IInvocation</name></argument>&gt;</argument_list></name><argument_list pos:line="29" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="30" pos:column="13">var</name></type> <name pos:line="30" pos:column="17">loggerMock</name> <init pos:line="30" pos:column="28">= <expr><op:operator pos:line="30" pos:column="30">new</op:operator> <call><name><name pos:line="30" pos:column="34">Mock</name><argument_list pos:line="30" pos:column="38">&lt;<argument><name pos:line="30" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="30" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="32" pos:column="13">Assert</name><op:operator pos:line="32" pos:column="19">.</op:operator><name><name pos:line="32" pos:column="20">Throws</name><argument_list pos:line="32" pos:column="26">&lt;<argument><name pos:line="32" pos:column="27">ArgumentNullException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="32" pos:column="49">(<argument><expr><lambda><parameter_list pos:line="32" pos:column="50">()</parameter_list> <op:operator pos:line="32" pos:column="53">=&gt;</op:operator> <op:operator pos:line="32" pos:column="56">new</op:operator> <call><name pos:line="32" pos:column="60">CastleInvocationToAlternateMethodContextAdapter</name><argument_list pos:line="32" pos:column="107">(<argument><expr><name pos:line="32" pos:column="108">null</name></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="114">loggerMock</name><op:operator pos:line="32" pos:column="124">.</op:operator><name pos:line="32" pos:column="125">Object</name></name></expr></argument>, <argument><expr><op:operator pos:line="32" pos:column="133">new</op:operator> <call><name><name pos:line="32" pos:column="137">Mock</name><argument_list pos:line="32" pos:column="141">&lt;<argument><name pos:line="32" pos:column="142">IMessageBroker</name></argument>&gt;</argument_list></name><argument_list pos:line="32" pos:column="157">()</argument_list></call><op:operator pos:line="32" pos:column="159">.</op:operator><name pos:line="32" pos:column="160">Object</name></expr></argument>, <argument><expr><op:operator pos:line="32" pos:column="168">new</op:operator> <call><name><name pos:line="32" pos:column="172">Mock</name><argument_list pos:line="32" pos:column="176">&lt;<argument><name pos:line="32" pos:column="177">IProxyFactory</name></argument>&gt;</argument_list></name><argument_list pos:line="32" pos:column="191">()</argument_list></call><op:operator pos:line="32" pos:column="193">.</op:operator><name pos:line="32" pos:column="194">Object</name></expr></argument>, <argument><expr><lambda><parameter_list pos:line="32" pos:column="202">()</parameter_list> <op:operator pos:line="32" pos:column="205">=&gt;</op:operator> <op:operator pos:line="32" pos:column="208">new</op:operator> <call><name pos:line="32" pos:column="212">ExecutionTimer</name><argument_list pos:line="32" pos:column="226">(<argument><expr><call><name><name pos:line="32" pos:column="227">Stopwatch</name><op:operator pos:line="32" pos:column="236">.</op:operator><name pos:line="32" pos:column="237">StartNew</name></name><argument_list pos:line="32" pos:column="245">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><lambda><parameter_list pos:line="32" pos:column="250">()</parameter_list> <op:operator pos:line="32" pos:column="253">=&gt;</op:operator> <name><name pos:line="32" pos:column="256">RuntimePolicy</name><op:operator pos:line="32" pos:column="269">.</op:operator><name pos:line="32" pos:column="270">On</name></name></lambda></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="33" pos:column="13">Assert</name><op:operator pos:line="33" pos:column="19">.</op:operator><name><name pos:line="33" pos:column="20">Throws</name><argument_list pos:line="33" pos:column="26">&lt;<argument><name pos:line="33" pos:column="27">ArgumentNullException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="33" pos:column="49">(<argument><expr><lambda><parameter_list pos:line="33" pos:column="50">()</parameter_list> <op:operator pos:line="33" pos:column="53">=&gt;</op:operator> <op:operator pos:line="33" pos:column="56">new</op:operator> <call><name pos:line="33" pos:column="60">CastleInvocationToAlternateMethodContextAdapter</name><argument_list pos:line="33" pos:column="107">(<argument><expr><name><name pos:line="33" pos:column="108">invocationMock</name><op:operator pos:line="33" pos:column="122">.</op:operator><name pos:line="33" pos:column="123">Object</name></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="131">null</name></expr></argument>, <argument><expr><op:operator pos:line="33" pos:column="137">new</op:operator> <call><name><name pos:line="33" pos:column="141">Mock</name><argument_list pos:line="33" pos:column="145">&lt;<argument><name pos:line="33" pos:column="146">IMessageBroker</name></argument>&gt;</argument_list></name><argument_list pos:line="33" pos:column="161">()</argument_list></call><op:operator pos:line="33" pos:column="163">.</op:operator><name pos:line="33" pos:column="164">Object</name></expr></argument>, <argument><expr><op:operator pos:line="33" pos:column="172">new</op:operator> <call><name><name pos:line="33" pos:column="176">Mock</name><argument_list pos:line="33" pos:column="180">&lt;<argument><name pos:line="33" pos:column="181">IProxyFactory</name></argument>&gt;</argument_list></name><argument_list pos:line="33" pos:column="195">()</argument_list></call><op:operator pos:line="33" pos:column="197">.</op:operator><name pos:line="33" pos:column="198">Object</name></expr></argument>, <argument><expr><lambda><parameter_list pos:line="33" pos:column="206">()</parameter_list> <op:operator pos:line="33" pos:column="209">=&gt;</op:operator> <op:operator pos:line="33" pos:column="212">new</op:operator> <call><name pos:line="33" pos:column="216">ExecutionTimer</name><argument_list pos:line="33" pos:column="230">(<argument><expr><call><name><name pos:line="33" pos:column="231">Stopwatch</name><op:operator pos:line="33" pos:column="240">.</op:operator><name pos:line="33" pos:column="241">StartNew</name></name><argument_list pos:line="33" pos:column="249">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><lambda><parameter_list pos:line="33" pos:column="254">()</parameter_list> <op:operator pos:line="33" pos:column="257">=&gt;</op:operator> <name><name pos:line="33" pos:column="260">RuntimePolicy</name><op:operator pos:line="33" pos:column="273">.</op:operator><name pos:line="33" pos:column="274">On</name></name></lambda></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="36" pos:column="9">[<expr><name pos:line="36" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="37" pos:column="9">public</specifier> <name pos:line="37" pos:column="16">void</name></type> <name pos:line="37" pos:column="21">ReturnProxyFromInvocation</name><parameter_list pos:line="37" pos:column="46">()</parameter_list>
        <block pos:line="38" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="39" pos:column="13">var</name></type> <name pos:line="39" pos:column="17">expected</name> <init pos:line="39" pos:column="26">= <expr><op:operator pos:line="39" pos:column="28">new</op:operator> <block pos:line="39" pos:column="32">{<expr><name pos:line="39" pos:column="33">Any</name> <op:operator pos:line="39" pos:column="37">=</op:operator> <lit:literal type="string" pos:line="39" pos:column="39">"Object"</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="40" pos:column="13">var</name></type> <name pos:line="40" pos:column="17">invocationMock</name> <init pos:line="40" pos:column="32">= <expr><op:operator pos:line="40" pos:column="34">new</op:operator> <call><name><name pos:line="40" pos:column="38">Mock</name><argument_list pos:line="40" pos:column="42">&lt;<argument><name pos:line="40" pos:column="43">IInvocation</name></argument>&gt;</argument_list></name><argument_list pos:line="40" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="41" pos:column="13">invocationMock</name><op:operator pos:line="41" pos:column="27">.</op:operator><name pos:line="41" pos:column="28">Setup</name></name><argument_list pos:line="41" pos:column="33">(<argument><expr><lambda><name pos:line="41" pos:column="34">i</name> <op:operator pos:line="41" pos:column="36">=&gt;</op:operator> <name><name pos:line="41" pos:column="39">i</name><op:operator pos:line="41" pos:column="40">.</op:operator><name pos:line="41" pos:column="41">Proxy</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="41" pos:column="47">.</op:operator><call><name pos:line="41" pos:column="48">Returns</name><argument_list pos:line="41" pos:column="55">(<argument><expr><name pos:line="41" pos:column="56">expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="42" pos:column="13">var</name></type> <name pos:line="42" pos:column="17">loggerMock</name> <init pos:line="42" pos:column="28">= <expr><op:operator pos:line="42" pos:column="30">new</op:operator> <call><name><name pos:line="42" pos:column="34">Mock</name><argument_list pos:line="42" pos:column="38">&lt;<argument><name pos:line="42" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="42" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="44" pos:column="13">var</name></type> <name pos:line="44" pos:column="17">adapter</name> <init pos:line="44" pos:column="25">= <expr><op:operator pos:line="44" pos:column="27">new</op:operator> <call><name pos:line="44" pos:column="31">CastleInvocationToAlternateMethodContextAdapter</name><argument_list pos:line="44" pos:column="78">(<argument><expr><name><name pos:line="44" pos:column="79">invocationMock</name><op:operator pos:line="44" pos:column="93">.</op:operator><name pos:line="44" pos:column="94">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="44" pos:column="102">loggerMock</name><op:operator pos:line="44" pos:column="112">.</op:operator><name pos:line="44" pos:column="113">Object</name></name></expr></argument>, <argument><expr><op:operator pos:line="44" pos:column="121">new</op:operator> <call><name><name pos:line="44" pos:column="125">Mock</name><argument_list pos:line="44" pos:column="129">&lt;<argument><name pos:line="44" pos:column="130">IMessageBroker</name></argument>&gt;</argument_list></name><argument_list pos:line="44" pos:column="145">()</argument_list></call><op:operator pos:line="44" pos:column="147">.</op:operator><name pos:line="44" pos:column="148">Object</name></expr></argument>, <argument><expr><op:operator pos:line="44" pos:column="156">new</op:operator> <call><name><name pos:line="44" pos:column="160">Mock</name><argument_list pos:line="44" pos:column="164">&lt;<argument><name pos:line="44" pos:column="165">IProxyFactory</name></argument>&gt;</argument_list></name><argument_list pos:line="44" pos:column="179">()</argument_list></call><op:operator pos:line="44" pos:column="181">.</op:operator><name pos:line="44" pos:column="182">Object</name></expr></argument>, <argument><expr><lambda><parameter_list pos:line="44" pos:column="190">()</parameter_list> <op:operator pos:line="44" pos:column="193">=&gt;</op:operator> <op:operator pos:line="44" pos:column="196">new</op:operator> <call><name pos:line="44" pos:column="200">ExecutionTimer</name><argument_list pos:line="44" pos:column="214">(<argument><expr><call><name><name pos:line="44" pos:column="215">Stopwatch</name><op:operator pos:line="44" pos:column="224">.</op:operator><name pos:line="44" pos:column="225">StartNew</name></name><argument_list pos:line="44" pos:column="233">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><lambda><parameter_list pos:line="44" pos:column="238">()</parameter_list> <op:operator pos:line="44" pos:column="241">=&gt;</op:operator> <name><name pos:line="44" pos:column="244">RuntimePolicy</name><op:operator pos:line="44" pos:column="257">.</op:operator><name pos:line="44" pos:column="258">On</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="46" pos:column="13">Assert</name><op:operator pos:line="46" pos:column="19">.</op:operator><name pos:line="46" pos:column="20">Equal</name></name><argument_list pos:line="46" pos:column="25">(<argument><expr><name pos:line="46" pos:column="26">expected</name></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="36">adapter</name><op:operator pos:line="46" pos:column="43">.</op:operator><name pos:line="46" pos:column="44">Proxy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="47" pos:column="13">invocationMock</name><op:operator pos:line="47" pos:column="27">.</op:operator><name pos:line="47" pos:column="28">Verify</name></name><argument_list pos:line="47" pos:column="34">(<argument><expr><lambda><name pos:line="47" pos:column="35">i</name><op:operator pos:line="47" pos:column="36">=&gt;</op:operator><name><name pos:line="47" pos:column="38">i</name><op:operator pos:line="47" pos:column="39">.</op:operator><name pos:line="47" pos:column="40">Proxy</name></name></lambda></expr></argument>, <argument><expr><call><name><name pos:line="47" pos:column="47">Times</name><op:operator pos:line="47" pos:column="52">.</op:operator><name pos:line="47" pos:column="53">Once</name></name><argument_list pos:line="47" pos:column="57">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="50" pos:column="9">[<expr><name pos:line="50" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="51" pos:column="9">public</specifier> <name pos:line="51" pos:column="16">void</name></type> <name pos:line="51" pos:column="21">ReturnReturnValueFromInvocation</name><parameter_list pos:line="51" pos:column="52">()</parameter_list>
        <block pos:line="52" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="53" pos:column="13">var</name></type> <name pos:line="53" pos:column="17">expected</name> <init pos:line="53" pos:column="26">= <expr><op:operator pos:line="53" pos:column="28">new</op:operator> <block pos:line="53" pos:column="32">{ <expr><name pos:line="53" pos:column="34">Any</name> <op:operator pos:line="53" pos:column="38">=</op:operator> <lit:literal type="string" pos:line="53" pos:column="40">"Object"</lit:literal></expr> }</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="54" pos:column="13">var</name></type> <name pos:line="54" pos:column="17">invocationMock</name> <init pos:line="54" pos:column="32">= <expr><op:operator pos:line="54" pos:column="34">new</op:operator> <call><name><name pos:line="54" pos:column="38">Mock</name><argument_list pos:line="54" pos:column="42">&lt;<argument><name pos:line="54" pos:column="43">IInvocation</name></argument>&gt;</argument_list></name><argument_list pos:line="54" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="55" pos:column="13">invocationMock</name><op:operator pos:line="55" pos:column="27">.</op:operator><name pos:line="55" pos:column="28">Setup</name></name><argument_list pos:line="55" pos:column="33">(<argument><expr><lambda><name pos:line="55" pos:column="34">i</name> <op:operator pos:line="55" pos:column="36">=&gt;</op:operator> <name><name pos:line="55" pos:column="39">i</name><op:operator pos:line="55" pos:column="40">.</op:operator><name pos:line="55" pos:column="41">ReturnValue</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="55" pos:column="53">.</op:operator><call><name pos:line="55" pos:column="54">Returns</name><argument_list pos:line="55" pos:column="61">(<argument><expr><name pos:line="55" pos:column="62">expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="56" pos:column="13">var</name></type> <name pos:line="56" pos:column="17">loggerMock</name> <init pos:line="56" pos:column="28">= <expr><op:operator pos:line="56" pos:column="30">new</op:operator> <call><name><name pos:line="56" pos:column="34">Mock</name><argument_list pos:line="56" pos:column="38">&lt;<argument><name pos:line="56" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="56" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="58" pos:column="13">var</name></type> <name pos:line="58" pos:column="17">adapter</name> <init pos:line="58" pos:column="25">= <expr><op:operator pos:line="58" pos:column="27">new</op:operator> <call><name pos:line="58" pos:column="31">CastleInvocationToAlternateMethodContextAdapter</name><argument_list pos:line="58" pos:column="78">(<argument><expr><name><name pos:line="58" pos:column="79">invocationMock</name><op:operator pos:line="58" pos:column="93">.</op:operator><name pos:line="58" pos:column="94">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="58" pos:column="102">loggerMock</name><op:operator pos:line="58" pos:column="112">.</op:operator><name pos:line="58" pos:column="113">Object</name></name></expr></argument>, <argument><expr><op:operator pos:line="58" pos:column="121">new</op:operator> <call><name><name pos:line="58" pos:column="125">Mock</name><argument_list pos:line="58" pos:column="129">&lt;<argument><name pos:line="58" pos:column="130">IMessageBroker</name></argument>&gt;</argument_list></name><argument_list pos:line="58" pos:column="145">()</argument_list></call><op:operator pos:line="58" pos:column="147">.</op:operator><name pos:line="58" pos:column="148">Object</name></expr></argument>, <argument><expr><op:operator pos:line="58" pos:column="156">new</op:operator> <call><name><name pos:line="58" pos:column="160">Mock</name><argument_list pos:line="58" pos:column="164">&lt;<argument><name pos:line="58" pos:column="165">IProxyFactory</name></argument>&gt;</argument_list></name><argument_list pos:line="58" pos:column="179">()</argument_list></call><op:operator pos:line="58" pos:column="181">.</op:operator><name pos:line="58" pos:column="182">Object</name></expr></argument>, <argument><expr><lambda><parameter_list pos:line="58" pos:column="190">()</parameter_list> <op:operator pos:line="58" pos:column="193">=&gt;</op:operator> <op:operator pos:line="58" pos:column="196">new</op:operator> <call><name pos:line="58" pos:column="200">ExecutionTimer</name><argument_list pos:line="58" pos:column="214">(<argument><expr><call><name><name pos:line="58" pos:column="215">Stopwatch</name><op:operator pos:line="58" pos:column="224">.</op:operator><name pos:line="58" pos:column="225">StartNew</name></name><argument_list pos:line="58" pos:column="233">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><lambda><parameter_list pos:line="58" pos:column="238">()</parameter_list> <op:operator pos:line="58" pos:column="241">=&gt;</op:operator> <name><name pos:line="58" pos:column="244">RuntimePolicy</name><op:operator pos:line="58" pos:column="257">.</op:operator><name pos:line="58" pos:column="258">On</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="60" pos:column="13">Assert</name><op:operator pos:line="60" pos:column="19">.</op:operator><name pos:line="60" pos:column="20">Equal</name></name><argument_list pos:line="60" pos:column="25">(<argument><expr><name pos:line="60" pos:column="26">expected</name></expr></argument>, <argument><expr><name><name pos:line="60" pos:column="36">adapter</name><op:operator pos:line="60" pos:column="43">.</op:operator><name pos:line="60" pos:column="44">ReturnValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="61" pos:column="13">invocationMock</name><op:operator pos:line="61" pos:column="27">.</op:operator><name pos:line="61" pos:column="28">Verify</name></name><argument_list pos:line="61" pos:column="34">(<argument><expr><lambda><name pos:line="61" pos:column="35">i</name> <op:operator pos:line="61" pos:column="37">=&gt;</op:operator> <name><name pos:line="61" pos:column="40">i</name><op:operator pos:line="61" pos:column="41">.</op:operator><name pos:line="61" pos:column="42">ReturnValue</name></name></lambda></expr></argument>, <argument><expr><call><name><name pos:line="61" pos:column="55">Times</name><op:operator pos:line="61" pos:column="60">.</op:operator><name pos:line="61" pos:column="61">Once</name></name><argument_list pos:line="61" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="64" pos:column="9">[<expr><name pos:line="64" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="65" pos:column="9">public</specifier> <name pos:line="65" pos:column="16">void</name></type> <name pos:line="65" pos:column="21">SetReturnValueOnInvocation</name><parameter_list pos:line="65" pos:column="47">()</parameter_list>
        <block pos:line="66" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="67" pos:column="13">var</name></type> <name pos:line="67" pos:column="17">expected</name> <init pos:line="67" pos:column="26">= <expr><op:operator pos:line="67" pos:column="28">new</op:operator> <block pos:line="67" pos:column="32">{ <expr><name pos:line="67" pos:column="34">Any</name> <op:operator pos:line="67" pos:column="38">=</op:operator> <lit:literal type="string" pos:line="67" pos:column="40">"Object"</lit:literal></expr> }</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="68" pos:column="13">var</name></type> <name pos:line="68" pos:column="17">invocationMock</name> <init pos:line="68" pos:column="32">= <expr><op:operator pos:line="68" pos:column="34">new</op:operator> <call><name><name pos:line="68" pos:column="38">Mock</name><argument_list pos:line="68" pos:column="42">&lt;<argument><name pos:line="68" pos:column="43">IInvocation</name></argument>&gt;</argument_list></name><argument_list pos:line="68" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="69" pos:column="13">var</name></type> <name pos:line="69" pos:column="17">loggerMock</name> <init pos:line="69" pos:column="28">= <expr><op:operator pos:line="69" pos:column="30">new</op:operator> <call><name><name pos:line="69" pos:column="34">Mock</name><argument_list pos:line="69" pos:column="38">&lt;<argument><name pos:line="69" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="69" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="71" pos:column="13">var</name></type> <name pos:line="71" pos:column="17">adapter</name> <init pos:line="71" pos:column="25">= <expr><op:operator pos:line="71" pos:column="27">new</op:operator> <call><name pos:line="71" pos:column="31">CastleInvocationToAlternateMethodContextAdapter</name><argument_list pos:line="71" pos:column="78">(<argument><expr><name><name pos:line="71" pos:column="79">invocationMock</name><op:operator pos:line="71" pos:column="93">.</op:operator><name pos:line="71" pos:column="94">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="71" pos:column="102">loggerMock</name><op:operator pos:line="71" pos:column="112">.</op:operator><name pos:line="71" pos:column="113">Object</name></name></expr></argument>, <argument><expr><op:operator pos:line="71" pos:column="121">new</op:operator> <call><name><name pos:line="71" pos:column="125">Mock</name><argument_list pos:line="71" pos:column="129">&lt;<argument><name pos:line="71" pos:column="130">IMessageBroker</name></argument>&gt;</argument_list></name><argument_list pos:line="71" pos:column="145">()</argument_list></call><op:operator pos:line="71" pos:column="147">.</op:operator><name pos:line="71" pos:column="148">Object</name></expr></argument>, <argument><expr><op:operator pos:line="71" pos:column="156">new</op:operator> <call><name><name pos:line="71" pos:column="160">Mock</name><argument_list pos:line="71" pos:column="164">&lt;<argument><name pos:line="71" pos:column="165">IProxyFactory</name></argument>&gt;</argument_list></name><argument_list pos:line="71" pos:column="179">()</argument_list></call><op:operator pos:line="71" pos:column="181">.</op:operator><name pos:line="71" pos:column="182">Object</name></expr></argument>, <argument><expr><lambda><parameter_list pos:line="71" pos:column="190">()</parameter_list> <op:operator pos:line="71" pos:column="193">=&gt;</op:operator> <op:operator pos:line="71" pos:column="196">new</op:operator> <call><name pos:line="71" pos:column="200">ExecutionTimer</name><argument_list pos:line="71" pos:column="214">(<argument><expr><call><name><name pos:line="71" pos:column="215">Stopwatch</name><op:operator pos:line="71" pos:column="224">.</op:operator><name pos:line="71" pos:column="225">StartNew</name></name><argument_list pos:line="71" pos:column="233">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><lambda><parameter_list pos:line="71" pos:column="238">()</parameter_list> <op:operator pos:line="71" pos:column="241">=&gt;</op:operator> <name><name pos:line="71" pos:column="244">RuntimePolicy</name><op:operator pos:line="71" pos:column="257">.</op:operator><name pos:line="71" pos:column="258">On</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name><name pos:line="73" pos:column="13">adapter</name><op:operator pos:line="73" pos:column="20">.</op:operator><name pos:line="73" pos:column="21">ReturnValue</name></name> <op:operator pos:line="73" pos:column="33">=</op:operator> <name pos:line="73" pos:column="35">expected</name></expr>;</expr_stmt>
            
            <expr_stmt><expr><call><name><name pos:line="75" pos:column="13">invocationMock</name><op:operator pos:line="75" pos:column="27">.</op:operator><name pos:line="75" pos:column="28">VerifySet</name></name><argument_list pos:line="75" pos:column="37">(<argument><expr><lambda><name pos:line="75" pos:column="38">i</name><op:operator pos:line="75" pos:column="39">=&gt;</op:operator><name><name pos:line="75" pos:column="41">i</name><op:operator pos:line="75" pos:column="42">.</op:operator><name pos:line="75" pos:column="43">ReturnValue</name></name> <op:operator pos:line="75" pos:column="55">=</op:operator> <name pos:line="75" pos:column="57">expected</name></lambda></expr></argument>, <argument><expr><call><name><name pos:line="75" pos:column="67">Times</name><op:operator pos:line="75" pos:column="72">.</op:operator><name pos:line="75" pos:column="73">Once</name></name><argument_list pos:line="75" pos:column="77">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="78" pos:column="9">[<expr><name pos:line="78" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="79" pos:column="9">public</specifier> <name pos:line="79" pos:column="16">void</name></type> <name pos:line="79" pos:column="21">ReturnInvocationTargetFromInvocation</name><parameter_list pos:line="79" pos:column="57">()</parameter_list>
        <block pos:line="80" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="81" pos:column="13">var</name></type> <name pos:line="81" pos:column="17">expected</name> <init pos:line="81" pos:column="26">= <expr><op:operator pos:line="81" pos:column="28">new</op:operator> <block pos:line="81" pos:column="32">{ <expr><name pos:line="81" pos:column="34">Any</name> <op:operator pos:line="81" pos:column="38">=</op:operator> <lit:literal type="string" pos:line="81" pos:column="40">"Object"</lit:literal></expr> }</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="82" pos:column="13">var</name></type> <name pos:line="82" pos:column="17">invocationMock</name> <init pos:line="82" pos:column="32">= <expr><op:operator pos:line="82" pos:column="34">new</op:operator> <call><name><name pos:line="82" pos:column="38">Mock</name><argument_list pos:line="82" pos:column="42">&lt;<argument><name pos:line="82" pos:column="43">IInvocation</name></argument>&gt;</argument_list></name><argument_list pos:line="82" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="83" pos:column="13">invocationMock</name><op:operator pos:line="83" pos:column="27">.</op:operator><name pos:line="83" pos:column="28">Setup</name></name><argument_list pos:line="83" pos:column="33">(<argument><expr><lambda><name pos:line="83" pos:column="34">i</name> <op:operator pos:line="83" pos:column="36">=&gt;</op:operator> <name><name pos:line="83" pos:column="39">i</name><op:operator pos:line="83" pos:column="40">.</op:operator><name pos:line="83" pos:column="41">InvocationTarget</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="83" pos:column="58">.</op:operator><call><name pos:line="83" pos:column="59">Returns</name><argument_list pos:line="83" pos:column="66">(<argument><expr><name pos:line="83" pos:column="67">expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="84" pos:column="13">var</name></type> <name pos:line="84" pos:column="17">loggerMock</name> <init pos:line="84" pos:column="28">= <expr><op:operator pos:line="84" pos:column="30">new</op:operator> <call><name><name pos:line="84" pos:column="34">Mock</name><argument_list pos:line="84" pos:column="38">&lt;<argument><name pos:line="84" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="84" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="86" pos:column="13">var</name></type> <name pos:line="86" pos:column="17">adapter</name> <init pos:line="86" pos:column="25">= <expr><op:operator pos:line="86" pos:column="27">new</op:operator> <call><name pos:line="86" pos:column="31">CastleInvocationToAlternateMethodContextAdapter</name><argument_list pos:line="86" pos:column="78">(<argument><expr><name><name pos:line="86" pos:column="79">invocationMock</name><op:operator pos:line="86" pos:column="93">.</op:operator><name pos:line="86" pos:column="94">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="86" pos:column="102">loggerMock</name><op:operator pos:line="86" pos:column="112">.</op:operator><name pos:line="86" pos:column="113">Object</name></name></expr></argument>, <argument><expr><op:operator pos:line="86" pos:column="121">new</op:operator> <call><name><name pos:line="86" pos:column="125">Mock</name><argument_list pos:line="86" pos:column="129">&lt;<argument><name pos:line="86" pos:column="130">IMessageBroker</name></argument>&gt;</argument_list></name><argument_list pos:line="86" pos:column="145">()</argument_list></call><op:operator pos:line="86" pos:column="147">.</op:operator><name pos:line="86" pos:column="148">Object</name></expr></argument>, <argument><expr><op:operator pos:line="86" pos:column="156">new</op:operator> <call><name><name pos:line="86" pos:column="160">Mock</name><argument_list pos:line="86" pos:column="164">&lt;<argument><name pos:line="86" pos:column="165">IProxyFactory</name></argument>&gt;</argument_list></name><argument_list pos:line="86" pos:column="179">()</argument_list></call><op:operator pos:line="86" pos:column="181">.</op:operator><name pos:line="86" pos:column="182">Object</name></expr></argument>, <argument><expr><lambda><parameter_list pos:line="86" pos:column="190">()</parameter_list> <op:operator pos:line="86" pos:column="193">=&gt;</op:operator> <op:operator pos:line="86" pos:column="196">new</op:operator> <call><name pos:line="86" pos:column="200">ExecutionTimer</name><argument_list pos:line="86" pos:column="214">(<argument><expr><call><name><name pos:line="86" pos:column="215">Stopwatch</name><op:operator pos:line="86" pos:column="224">.</op:operator><name pos:line="86" pos:column="225">StartNew</name></name><argument_list pos:line="86" pos:column="233">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><lambda><parameter_list pos:line="86" pos:column="238">()</parameter_list> <op:operator pos:line="86" pos:column="241">=&gt;</op:operator> <name><name pos:line="86" pos:column="244">RuntimePolicy</name><op:operator pos:line="86" pos:column="257">.</op:operator><name pos:line="86" pos:column="258">On</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="88" pos:column="13">Assert</name><op:operator pos:line="88" pos:column="19">.</op:operator><name pos:line="88" pos:column="20">Equal</name></name><argument_list pos:line="88" pos:column="25">(<argument><expr><name pos:line="88" pos:column="26">expected</name></expr></argument>, <argument><expr><name><name pos:line="88" pos:column="36">adapter</name><op:operator pos:line="88" pos:column="43">.</op:operator><name pos:line="88" pos:column="44">InvocationTarget</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="89" pos:column="13">invocationMock</name><op:operator pos:line="89" pos:column="27">.</op:operator><name pos:line="89" pos:column="28">Verify</name></name><argument_list pos:line="89" pos:column="34">(<argument><expr><lambda><name pos:line="89" pos:column="35">i</name> <op:operator pos:line="89" pos:column="37">=&gt;</op:operator> <name><name pos:line="89" pos:column="40">i</name><op:operator pos:line="89" pos:column="41">.</op:operator><name pos:line="89" pos:column="42">InvocationTarget</name></name></lambda></expr></argument>, <argument><expr><call><name><name pos:line="89" pos:column="60">Times</name><op:operator pos:line="89" pos:column="65">.</op:operator><name pos:line="89" pos:column="66">Once</name></name><argument_list pos:line="89" pos:column="70">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="92" pos:column="9">[<expr><name pos:line="92" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="93" pos:column="9">public</specifier> <name pos:line="93" pos:column="16">void</name></type> <name pos:line="93" pos:column="21">ReturnMethodFromInvocation</name><parameter_list pos:line="93" pos:column="47">()</parameter_list>
        <block pos:line="94" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="95" pos:column="13">var</name></type> <name pos:line="95" pos:column="17">expected</name> <init pos:line="95" pos:column="26">= <expr><call><name pos:line="95" pos:column="28">GetType</name><argument_list pos:line="95" pos:column="35">()</argument_list></call><op:operator pos:line="95" pos:column="37">.</op:operator><call><name pos:line="95" pos:column="38">GetMethods</name><argument_list pos:line="95" pos:column="48">()</argument_list></call><op:operator pos:line="95" pos:column="50">.</op:operator><call><name pos:line="95" pos:column="51">First</name><argument_list pos:line="95" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="96" pos:column="13">var</name></type> <name pos:line="96" pos:column="17">invocationMock</name> <init pos:line="96" pos:column="32">= <expr><op:operator pos:line="96" pos:column="34">new</op:operator> <call><name><name pos:line="96" pos:column="38">Mock</name><argument_list pos:line="96" pos:column="42">&lt;<argument><name pos:line="96" pos:column="43">IInvocation</name></argument>&gt;</argument_list></name><argument_list pos:line="96" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="97" pos:column="13">invocationMock</name><op:operator pos:line="97" pos:column="27">.</op:operator><name pos:line="97" pos:column="28">Setup</name></name><argument_list pos:line="97" pos:column="33">(<argument><expr><lambda><name pos:line="97" pos:column="34">i</name> <op:operator pos:line="97" pos:column="36">=&gt;</op:operator> <name><name pos:line="97" pos:column="39">i</name><op:operator pos:line="97" pos:column="40">.</op:operator><name pos:line="97" pos:column="41">Method</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="97" pos:column="48">.</op:operator><call><name pos:line="97" pos:column="49">Returns</name><argument_list pos:line="97" pos:column="56">(<argument><expr><name pos:line="97" pos:column="57">expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="98" pos:column="13">var</name></type> <name pos:line="98" pos:column="17">loggerMock</name> <init pos:line="98" pos:column="28">= <expr><op:operator pos:line="98" pos:column="30">new</op:operator> <call><name><name pos:line="98" pos:column="34">Mock</name><argument_list pos:line="98" pos:column="38">&lt;<argument><name pos:line="98" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="98" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="100" pos:column="13">var</name></type> <name pos:line="100" pos:column="17">adapter</name> <init pos:line="100" pos:column="25">= <expr><op:operator pos:line="100" pos:column="27">new</op:operator> <call><name pos:line="100" pos:column="31">CastleInvocationToAlternateMethodContextAdapter</name><argument_list pos:line="100" pos:column="78">(<argument><expr><name><name pos:line="100" pos:column="79">invocationMock</name><op:operator pos:line="100" pos:column="93">.</op:operator><name pos:line="100" pos:column="94">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="100" pos:column="102">loggerMock</name><op:operator pos:line="100" pos:column="112">.</op:operator><name pos:line="100" pos:column="113">Object</name></name></expr></argument>, <argument><expr><op:operator pos:line="100" pos:column="121">new</op:operator> <call><name><name pos:line="100" pos:column="125">Mock</name><argument_list pos:line="100" pos:column="129">&lt;<argument><name pos:line="100" pos:column="130">IMessageBroker</name></argument>&gt;</argument_list></name><argument_list pos:line="100" pos:column="145">()</argument_list></call><op:operator pos:line="100" pos:column="147">.</op:operator><name pos:line="100" pos:column="148">Object</name></expr></argument>, <argument><expr><op:operator pos:line="100" pos:column="156">new</op:operator> <call><name><name pos:line="100" pos:column="160">Mock</name><argument_list pos:line="100" pos:column="164">&lt;<argument><name pos:line="100" pos:column="165">IProxyFactory</name></argument>&gt;</argument_list></name><argument_list pos:line="100" pos:column="179">()</argument_list></call><op:operator pos:line="100" pos:column="181">.</op:operator><name pos:line="100" pos:column="182">Object</name></expr></argument>, <argument><expr><lambda><parameter_list pos:line="100" pos:column="190">()</parameter_list> <op:operator pos:line="100" pos:column="193">=&gt;</op:operator> <op:operator pos:line="100" pos:column="196">new</op:operator> <call><name pos:line="100" pos:column="200">ExecutionTimer</name><argument_list pos:line="100" pos:column="214">(<argument><expr><call><name><name pos:line="100" pos:column="215">Stopwatch</name><op:operator pos:line="100" pos:column="224">.</op:operator><name pos:line="100" pos:column="225">StartNew</name></name><argument_list pos:line="100" pos:column="233">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><lambda><parameter_list pos:line="100" pos:column="238">()</parameter_list> <op:operator pos:line="100" pos:column="241">=&gt;</op:operator> <name><name pos:line="100" pos:column="244">RuntimePolicy</name><op:operator pos:line="100" pos:column="257">.</op:operator><name pos:line="100" pos:column="258">On</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="102" pos:column="13">Assert</name><op:operator pos:line="102" pos:column="19">.</op:operator><name pos:line="102" pos:column="20">Equal</name></name><argument_list pos:line="102" pos:column="25">(<argument><expr><name pos:line="102" pos:column="26">expected</name></expr></argument>, <argument><expr><name><name pos:line="102" pos:column="36">adapter</name><op:operator pos:line="102" pos:column="43">.</op:operator><name pos:line="102" pos:column="44">Method</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="103" pos:column="13">invocationMock</name><op:operator pos:line="103" pos:column="27">.</op:operator><name pos:line="103" pos:column="28">Verify</name></name><argument_list pos:line="103" pos:column="34">(<argument><expr><lambda><name pos:line="103" pos:column="35">i</name> <op:operator pos:line="103" pos:column="37">=&gt;</op:operator> <name><name pos:line="103" pos:column="40">i</name><op:operator pos:line="103" pos:column="41">.</op:operator><name pos:line="103" pos:column="42">Method</name></name></lambda></expr></argument>, <argument><expr><call><name><name pos:line="103" pos:column="50">Times</name><op:operator pos:line="103" pos:column="55">.</op:operator><name pos:line="103" pos:column="56">Once</name></name><argument_list pos:line="103" pos:column="60">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="106" pos:column="9">[<expr><name pos:line="106" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="107" pos:column="9">public</specifier> <name pos:line="107" pos:column="16">void</name></type> <name pos:line="107" pos:column="21">ReturnMethodInvocationTargetFromInvocation</name><parameter_list pos:line="107" pos:column="63">()</parameter_list>
        <block pos:line="108" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="109" pos:column="13">var</name></type> <name pos:line="109" pos:column="17">expected</name> <init pos:line="109" pos:column="26">= <expr><call><name pos:line="109" pos:column="28">GetType</name><argument_list pos:line="109" pos:column="35">()</argument_list></call><op:operator pos:line="109" pos:column="37">.</op:operator><call><name pos:line="109" pos:column="38">GetMethods</name><argument_list pos:line="109" pos:column="48">()</argument_list></call><op:operator pos:line="109" pos:column="50">.</op:operator><call><name pos:line="109" pos:column="51">First</name><argument_list pos:line="109" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="110" pos:column="13">var</name></type> <name pos:line="110" pos:column="17">invocationMock</name> <init pos:line="110" pos:column="32">= <expr><op:operator pos:line="110" pos:column="34">new</op:operator> <call><name><name pos:line="110" pos:column="38">Mock</name><argument_list pos:line="110" pos:column="42">&lt;<argument><name pos:line="110" pos:column="43">IInvocation</name></argument>&gt;</argument_list></name><argument_list pos:line="110" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="111" pos:column="13">invocationMock</name><op:operator pos:line="111" pos:column="27">.</op:operator><name pos:line="111" pos:column="28">Setup</name></name><argument_list pos:line="111" pos:column="33">(<argument><expr><lambda><name pos:line="111" pos:column="34">i</name> <op:operator pos:line="111" pos:column="36">=&gt;</op:operator> <name><name pos:line="111" pos:column="39">i</name><op:operator pos:line="111" pos:column="40">.</op:operator><name pos:line="111" pos:column="41">MethodInvocationTarget</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="111" pos:column="64">.</op:operator><call><name pos:line="111" pos:column="65">Returns</name><argument_list pos:line="111" pos:column="72">(<argument><expr><name pos:line="111" pos:column="73">expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="112" pos:column="13">var</name></type> <name pos:line="112" pos:column="17">loggerMock</name> <init pos:line="112" pos:column="28">= <expr><op:operator pos:line="112" pos:column="30">new</op:operator> <call><name><name pos:line="112" pos:column="34">Mock</name><argument_list pos:line="112" pos:column="38">&lt;<argument><name pos:line="112" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="112" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="114" pos:column="13">var</name></type> <name pos:line="114" pos:column="17">adapter</name> <init pos:line="114" pos:column="25">= <expr><op:operator pos:line="114" pos:column="27">new</op:operator> <call><name pos:line="114" pos:column="31">CastleInvocationToAlternateMethodContextAdapter</name><argument_list pos:line="114" pos:column="78">(<argument><expr><name><name pos:line="114" pos:column="79">invocationMock</name><op:operator pos:line="114" pos:column="93">.</op:operator><name pos:line="114" pos:column="94">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="114" pos:column="102">loggerMock</name><op:operator pos:line="114" pos:column="112">.</op:operator><name pos:line="114" pos:column="113">Object</name></name></expr></argument>, <argument><expr><op:operator pos:line="114" pos:column="121">new</op:operator> <call><name><name pos:line="114" pos:column="125">Mock</name><argument_list pos:line="114" pos:column="129">&lt;<argument><name pos:line="114" pos:column="130">IMessageBroker</name></argument>&gt;</argument_list></name><argument_list pos:line="114" pos:column="145">()</argument_list></call><op:operator pos:line="114" pos:column="147">.</op:operator><name pos:line="114" pos:column="148">Object</name></expr></argument>, <argument><expr><op:operator pos:line="114" pos:column="156">new</op:operator> <call><name><name pos:line="114" pos:column="160">Mock</name><argument_list pos:line="114" pos:column="164">&lt;<argument><name pos:line="114" pos:column="165">IProxyFactory</name></argument>&gt;</argument_list></name><argument_list pos:line="114" pos:column="179">()</argument_list></call><op:operator pos:line="114" pos:column="181">.</op:operator><name pos:line="114" pos:column="182">Object</name></expr></argument>, <argument><expr><lambda><parameter_list pos:line="114" pos:column="190">()</parameter_list> <op:operator pos:line="114" pos:column="193">=&gt;</op:operator> <op:operator pos:line="114" pos:column="196">new</op:operator> <call><name pos:line="114" pos:column="200">ExecutionTimer</name><argument_list pos:line="114" pos:column="214">(<argument><expr><call><name><name pos:line="114" pos:column="215">Stopwatch</name><op:operator pos:line="114" pos:column="224">.</op:operator><name pos:line="114" pos:column="225">StartNew</name></name><argument_list pos:line="114" pos:column="233">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><lambda><parameter_list pos:line="114" pos:column="238">()</parameter_list> <op:operator pos:line="114" pos:column="241">=&gt;</op:operator> <name><name pos:line="114" pos:column="244">RuntimePolicy</name><op:operator pos:line="114" pos:column="257">.</op:operator><name pos:line="114" pos:column="258">On</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="116" pos:column="13">Assert</name><op:operator pos:line="116" pos:column="19">.</op:operator><name pos:line="116" pos:column="20">Equal</name></name><argument_list pos:line="116" pos:column="25">(<argument><expr><name pos:line="116" pos:column="26">expected</name></expr></argument>, <argument><expr><name><name pos:line="116" pos:column="36">adapter</name><op:operator pos:line="116" pos:column="43">.</op:operator><name pos:line="116" pos:column="44">MethodInvocationTarget</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="117" pos:column="13">invocationMock</name><op:operator pos:line="117" pos:column="27">.</op:operator><name pos:line="117" pos:column="28">Verify</name></name><argument_list pos:line="117" pos:column="34">(<argument><expr><lambda><name pos:line="117" pos:column="35">i</name> <op:operator pos:line="117" pos:column="37">=&gt;</op:operator> <name><name pos:line="117" pos:column="40">i</name><op:operator pos:line="117" pos:column="41">.</op:operator><name pos:line="117" pos:column="42">MethodInvocationTarget</name></name></lambda></expr></argument>, <argument><expr><call><name><name pos:line="117" pos:column="66">Times</name><op:operator pos:line="117" pos:column="71">.</op:operator><name pos:line="117" pos:column="72">Once</name></name><argument_list pos:line="117" pos:column="76">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="120" pos:column="9">[<expr><name pos:line="120" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="121" pos:column="9">public</specifier> <name pos:line="121" pos:column="16">void</name></type> <name pos:line="121" pos:column="21">ReturnTargetTypeFromInvocation</name><parameter_list pos:line="121" pos:column="51">()</parameter_list>
        <block pos:line="122" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="123" pos:column="13">var</name></type> <name pos:line="123" pos:column="17">expected</name> <init pos:line="123" pos:column="26">= <expr><call><name pos:line="123" pos:column="28">GetType</name><argument_list pos:line="123" pos:column="35">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="124" pos:column="13">var</name></type> <name pos:line="124" pos:column="17">invocationMock</name> <init pos:line="124" pos:column="32">= <expr><op:operator pos:line="124" pos:column="34">new</op:operator> <call><name><name pos:line="124" pos:column="38">Mock</name><argument_list pos:line="124" pos:column="42">&lt;<argument><name pos:line="124" pos:column="43">IInvocation</name></argument>&gt;</argument_list></name><argument_list pos:line="124" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="125" pos:column="13">invocationMock</name><op:operator pos:line="125" pos:column="27">.</op:operator><name pos:line="125" pos:column="28">Setup</name></name><argument_list pos:line="125" pos:column="33">(<argument><expr><lambda><name pos:line="125" pos:column="34">i</name> <op:operator pos:line="125" pos:column="36">=&gt;</op:operator> <name><name pos:line="125" pos:column="39">i</name><op:operator pos:line="125" pos:column="40">.</op:operator><name pos:line="125" pos:column="41">TargetType</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="125" pos:column="52">.</op:operator><call><name pos:line="125" pos:column="53">Returns</name><argument_list pos:line="125" pos:column="60">(<argument><expr><name pos:line="125" pos:column="61">expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="126" pos:column="13">var</name></type> <name pos:line="126" pos:column="17">loggerMock</name> <init pos:line="126" pos:column="28">= <expr><op:operator pos:line="126" pos:column="30">new</op:operator> <call><name><name pos:line="126" pos:column="34">Mock</name><argument_list pos:line="126" pos:column="38">&lt;<argument><name pos:line="126" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="126" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="128" pos:column="13">var</name></type> <name pos:line="128" pos:column="17">adapter</name> <init pos:line="128" pos:column="25">= <expr><op:operator pos:line="128" pos:column="27">new</op:operator> <call><name pos:line="128" pos:column="31">CastleInvocationToAlternateMethodContextAdapter</name><argument_list pos:line="128" pos:column="78">(<argument><expr><name><name pos:line="128" pos:column="79">invocationMock</name><op:operator pos:line="128" pos:column="93">.</op:operator><name pos:line="128" pos:column="94">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="128" pos:column="102">loggerMock</name><op:operator pos:line="128" pos:column="112">.</op:operator><name pos:line="128" pos:column="113">Object</name></name></expr></argument>, <argument><expr><op:operator pos:line="128" pos:column="121">new</op:operator> <call><name><name pos:line="128" pos:column="125">Mock</name><argument_list pos:line="128" pos:column="129">&lt;<argument><name pos:line="128" pos:column="130">IMessageBroker</name></argument>&gt;</argument_list></name><argument_list pos:line="128" pos:column="145">()</argument_list></call><op:operator pos:line="128" pos:column="147">.</op:operator><name pos:line="128" pos:column="148">Object</name></expr></argument>, <argument><expr><op:operator pos:line="128" pos:column="156">new</op:operator> <call><name><name pos:line="128" pos:column="160">Mock</name><argument_list pos:line="128" pos:column="164">&lt;<argument><name pos:line="128" pos:column="165">IProxyFactory</name></argument>&gt;</argument_list></name><argument_list pos:line="128" pos:column="179">()</argument_list></call><op:operator pos:line="128" pos:column="181">.</op:operator><name pos:line="128" pos:column="182">Object</name></expr></argument>, <argument><expr><lambda><parameter_list pos:line="128" pos:column="190">()</parameter_list> <op:operator pos:line="128" pos:column="193">=&gt;</op:operator> <op:operator pos:line="128" pos:column="196">new</op:operator> <call><name pos:line="128" pos:column="200">ExecutionTimer</name><argument_list pos:line="128" pos:column="214">(<argument><expr><call><name><name pos:line="128" pos:column="215">Stopwatch</name><op:operator pos:line="128" pos:column="224">.</op:operator><name pos:line="128" pos:column="225">StartNew</name></name><argument_list pos:line="128" pos:column="233">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><lambda><parameter_list pos:line="128" pos:column="238">()</parameter_list> <op:operator pos:line="128" pos:column="241">=&gt;</op:operator> <name><name pos:line="128" pos:column="244">RuntimePolicy</name><op:operator pos:line="128" pos:column="257">.</op:operator><name pos:line="128" pos:column="258">On</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="130" pos:column="13">Assert</name><op:operator pos:line="130" pos:column="19">.</op:operator><name pos:line="130" pos:column="20">Equal</name></name><argument_list pos:line="130" pos:column="25">(<argument><expr><name pos:line="130" pos:column="26">expected</name></expr></argument>, <argument><expr><name><name pos:line="130" pos:column="36">adapter</name><op:operator pos:line="130" pos:column="43">.</op:operator><name pos:line="130" pos:column="44">TargetType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="131" pos:column="13">invocationMock</name><op:operator pos:line="131" pos:column="27">.</op:operator><name pos:line="131" pos:column="28">Verify</name></name><argument_list pos:line="131" pos:column="34">(<argument><expr><lambda><name pos:line="131" pos:column="35">i</name> <op:operator pos:line="131" pos:column="37">=&gt;</op:operator> <name><name pos:line="131" pos:column="40">i</name><op:operator pos:line="131" pos:column="41">.</op:operator><name pos:line="131" pos:column="42">TargetType</name></name></lambda></expr></argument>, <argument><expr><call><name><name pos:line="131" pos:column="54">Times</name><op:operator pos:line="131" pos:column="59">.</op:operator><name pos:line="131" pos:column="60">Once</name></name><argument_list pos:line="131" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="134" pos:column="9">[<expr><name pos:line="134" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="135" pos:column="9">public</specifier> <name pos:line="135" pos:column="16">void</name></type> <name pos:line="135" pos:column="21">ReturnArgumentsFromInvocation</name><parameter_list pos:line="135" pos:column="50">()</parameter_list>
        <block pos:line="136" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="137" pos:column="13">var</name></type> <name pos:line="137" pos:column="17">expected</name> <init pos:line="137" pos:column="26">= <expr><op:operator pos:line="137" pos:column="28">new</op:operator> <name><name pos:line="137" pos:column="32">object</name><index pos:line="137" pos:column="38">[]</index></name> <block pos:line="137" pos:column="41">{<expr><lit:literal type="string" pos:line="137" pos:column="42">"One"</lit:literal></expr>, <expr><lit:literal type="number" pos:line="137" pos:column="49">2</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="138" pos:column="13">var</name></type> <name pos:line="138" pos:column="17">invocationMock</name> <init pos:line="138" pos:column="32">= <expr><op:operator pos:line="138" pos:column="34">new</op:operator> <call><name><name pos:line="138" pos:column="38">Mock</name><argument_list pos:line="138" pos:column="42">&lt;<argument><name pos:line="138" pos:column="43">IInvocation</name></argument>&gt;</argument_list></name><argument_list pos:line="138" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="139" pos:column="13">invocationMock</name><op:operator pos:line="139" pos:column="27">.</op:operator><name pos:line="139" pos:column="28">Setup</name></name><argument_list pos:line="139" pos:column="33">(<argument><expr><lambda><name pos:line="139" pos:column="34">i</name> <op:operator pos:line="139" pos:column="36">=&gt;</op:operator> <name><name pos:line="139" pos:column="39">i</name><op:operator pos:line="139" pos:column="40">.</op:operator><name pos:line="139" pos:column="41">Arguments</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="139" pos:column="51">.</op:operator><call><name pos:line="139" pos:column="52">Returns</name><argument_list pos:line="139" pos:column="59">(<argument><expr><name pos:line="139" pos:column="60">expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="140" pos:column="13">var</name></type> <name pos:line="140" pos:column="17">loggerMock</name> <init pos:line="140" pos:column="28">= <expr><op:operator pos:line="140" pos:column="30">new</op:operator> <call><name><name pos:line="140" pos:column="34">Mock</name><argument_list pos:line="140" pos:column="38">&lt;<argument><name pos:line="140" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="140" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="142" pos:column="13">var</name></type> <name pos:line="142" pos:column="17">adapter</name> <init pos:line="142" pos:column="25">= <expr><op:operator pos:line="142" pos:column="27">new</op:operator> <call><name pos:line="142" pos:column="31">CastleInvocationToAlternateMethodContextAdapter</name><argument_list pos:line="142" pos:column="78">(<argument><expr><name><name pos:line="142" pos:column="79">invocationMock</name><op:operator pos:line="142" pos:column="93">.</op:operator><name pos:line="142" pos:column="94">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="142" pos:column="102">loggerMock</name><op:operator pos:line="142" pos:column="112">.</op:operator><name pos:line="142" pos:column="113">Object</name></name></expr></argument>, <argument><expr><op:operator pos:line="142" pos:column="121">new</op:operator> <call><name><name pos:line="142" pos:column="125">Mock</name><argument_list pos:line="142" pos:column="129">&lt;<argument><name pos:line="142" pos:column="130">IMessageBroker</name></argument>&gt;</argument_list></name><argument_list pos:line="142" pos:column="145">()</argument_list></call><op:operator pos:line="142" pos:column="147">.</op:operator><name pos:line="142" pos:column="148">Object</name></expr></argument>, <argument><expr><op:operator pos:line="142" pos:column="156">new</op:operator> <call><name><name pos:line="142" pos:column="160">Mock</name><argument_list pos:line="142" pos:column="164">&lt;<argument><name pos:line="142" pos:column="165">IProxyFactory</name></argument>&gt;</argument_list></name><argument_list pos:line="142" pos:column="179">()</argument_list></call><op:operator pos:line="142" pos:column="181">.</op:operator><name pos:line="142" pos:column="182">Object</name></expr></argument>, <argument><expr><lambda><parameter_list pos:line="142" pos:column="190">()</parameter_list> <op:operator pos:line="142" pos:column="193">=&gt;</op:operator> <op:operator pos:line="142" pos:column="196">new</op:operator> <call><name pos:line="142" pos:column="200">ExecutionTimer</name><argument_list pos:line="142" pos:column="214">(<argument><expr><call><name><name pos:line="142" pos:column="215">Stopwatch</name><op:operator pos:line="142" pos:column="224">.</op:operator><name pos:line="142" pos:column="225">StartNew</name></name><argument_list pos:line="142" pos:column="233">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><lambda><parameter_list pos:line="142" pos:column="238">()</parameter_list> <op:operator pos:line="142" pos:column="241">=&gt;</op:operator> <name><name pos:line="142" pos:column="244">RuntimePolicy</name><op:operator pos:line="142" pos:column="257">.</op:operator><name pos:line="142" pos:column="258">On</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="144" pos:column="13">Assert</name><op:operator pos:line="144" pos:column="19">.</op:operator><name pos:line="144" pos:column="20">Equal</name></name><argument_list pos:line="144" pos:column="25">(<argument><expr><name pos:line="144" pos:column="26">expected</name></expr></argument>, <argument><expr><name><name pos:line="144" pos:column="36">adapter</name><op:operator pos:line="144" pos:column="43">.</op:operator><name pos:line="144" pos:column="44">Arguments</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="145" pos:column="13">invocationMock</name><op:operator pos:line="145" pos:column="27">.</op:operator><name pos:line="145" pos:column="28">Verify</name></name><argument_list pos:line="145" pos:column="34">(<argument><expr><lambda><name pos:line="145" pos:column="35">i</name> <op:operator pos:line="145" pos:column="37">=&gt;</op:operator> <name><name pos:line="145" pos:column="40">i</name><op:operator pos:line="145" pos:column="41">.</op:operator><name pos:line="145" pos:column="42">Arguments</name></name></lambda></expr></argument>, <argument><expr><call><name><name pos:line="145" pos:column="53">Times</name><op:operator pos:line="145" pos:column="58">.</op:operator><name pos:line="145" pos:column="59">Once</name></name><argument_list pos:line="145" pos:column="63">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="148" pos:column="9">[<expr><name pos:line="148" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="149" pos:column="9">public</specifier> <name pos:line="149" pos:column="16">void</name></type> <name pos:line="149" pos:column="21">ReturnGenericArgumentsFromInvocation</name><parameter_list pos:line="149" pos:column="57">()</parameter_list>
        <block pos:line="150" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="151" pos:column="13">var</name></type> <name pos:line="151" pos:column="17">expected</name> <init pos:line="151" pos:column="26">= <expr><op:operator pos:line="151" pos:column="28">new</op:operator> <name><name pos:line="151" pos:column="32">Type</name><index pos:line="151" pos:column="36">[]</index></name> <block pos:line="151" pos:column="39">{ <expr><call><name pos:line="151" pos:column="41">typeof</name><argument_list pos:line="151" pos:column="47">(<argument><expr><name pos:line="151" pos:column="48">object</name></expr></argument>)</argument_list></call></expr>, <expr><call><name pos:line="151" pos:column="57">typeof</name><argument_list pos:line="151" pos:column="63">(<argument><expr><name pos:line="151" pos:column="64">string</name></expr></argument>)</argument_list></call></expr>}</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="152" pos:column="13">var</name></type> <name pos:line="152" pos:column="17">invocationMock</name> <init pos:line="152" pos:column="32">= <expr><op:operator pos:line="152" pos:column="34">new</op:operator> <call><name><name pos:line="152" pos:column="38">Mock</name><argument_list pos:line="152" pos:column="42">&lt;<argument><name pos:line="152" pos:column="43">IInvocation</name></argument>&gt;</argument_list></name><argument_list pos:line="152" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="153" pos:column="13">invocationMock</name><op:operator pos:line="153" pos:column="27">.</op:operator><name pos:line="153" pos:column="28">Setup</name></name><argument_list pos:line="153" pos:column="33">(<argument><expr><lambda><name pos:line="153" pos:column="34">i</name> <op:operator pos:line="153" pos:column="36">=&gt;</op:operator> <name><name pos:line="153" pos:column="39">i</name><op:operator pos:line="153" pos:column="40">.</op:operator><name pos:line="153" pos:column="41">GenericArguments</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="153" pos:column="58">.</op:operator><call><name pos:line="153" pos:column="59">Returns</name><argument_list pos:line="153" pos:column="66">(<argument><expr><name pos:line="153" pos:column="67">expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="154" pos:column="13">var</name></type> <name pos:line="154" pos:column="17">loggerMock</name> <init pos:line="154" pos:column="28">= <expr><op:operator pos:line="154" pos:column="30">new</op:operator> <call><name><name pos:line="154" pos:column="34">Mock</name><argument_list pos:line="154" pos:column="38">&lt;<argument><name pos:line="154" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="154" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="156" pos:column="13">var</name></type> <name pos:line="156" pos:column="17">adapter</name> <init pos:line="156" pos:column="25">= <expr><op:operator pos:line="156" pos:column="27">new</op:operator> <call><name pos:line="156" pos:column="31">CastleInvocationToAlternateMethodContextAdapter</name><argument_list pos:line="156" pos:column="78">(<argument><expr><name><name pos:line="156" pos:column="79">invocationMock</name><op:operator pos:line="156" pos:column="93">.</op:operator><name pos:line="156" pos:column="94">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="156" pos:column="102">loggerMock</name><op:operator pos:line="156" pos:column="112">.</op:operator><name pos:line="156" pos:column="113">Object</name></name></expr></argument>, <argument><expr><op:operator pos:line="156" pos:column="121">new</op:operator> <call><name><name pos:line="156" pos:column="125">Mock</name><argument_list pos:line="156" pos:column="129">&lt;<argument><name pos:line="156" pos:column="130">IMessageBroker</name></argument>&gt;</argument_list></name><argument_list pos:line="156" pos:column="145">()</argument_list></call><op:operator pos:line="156" pos:column="147">.</op:operator><name pos:line="156" pos:column="148">Object</name></expr></argument>, <argument><expr><op:operator pos:line="156" pos:column="156">new</op:operator> <call><name><name pos:line="156" pos:column="160">Mock</name><argument_list pos:line="156" pos:column="164">&lt;<argument><name pos:line="156" pos:column="165">IProxyFactory</name></argument>&gt;</argument_list></name><argument_list pos:line="156" pos:column="179">()</argument_list></call><op:operator pos:line="156" pos:column="181">.</op:operator><name pos:line="156" pos:column="182">Object</name></expr></argument>, <argument><expr><lambda><parameter_list pos:line="156" pos:column="190">()</parameter_list> <op:operator pos:line="156" pos:column="193">=&gt;</op:operator> <op:operator pos:line="156" pos:column="196">new</op:operator> <call><name pos:line="156" pos:column="200">ExecutionTimer</name><argument_list pos:line="156" pos:column="214">(<argument><expr><call><name><name pos:line="156" pos:column="215">Stopwatch</name><op:operator pos:line="156" pos:column="224">.</op:operator><name pos:line="156" pos:column="225">StartNew</name></name><argument_list pos:line="156" pos:column="233">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><lambda><parameter_list pos:line="156" pos:column="238">()</parameter_list> <op:operator pos:line="156" pos:column="241">=&gt;</op:operator> <name><name pos:line="156" pos:column="244">RuntimePolicy</name><op:operator pos:line="156" pos:column="257">.</op:operator><name pos:line="156" pos:column="258">On</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="158" pos:column="13">Assert</name><op:operator pos:line="158" pos:column="19">.</op:operator><name pos:line="158" pos:column="20">Equal</name></name><argument_list pos:line="158" pos:column="25">(<argument><expr><name pos:line="158" pos:column="26">expected</name></expr></argument>, <argument><expr><name><name pos:line="158" pos:column="36">adapter</name><op:operator pos:line="158" pos:column="43">.</op:operator><name pos:line="158" pos:column="44">GenericArguments</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="159" pos:column="13">invocationMock</name><op:operator pos:line="159" pos:column="27">.</op:operator><name pos:line="159" pos:column="28">Verify</name></name><argument_list pos:line="159" pos:column="34">(<argument><expr><lambda><name pos:line="159" pos:column="35">i</name> <op:operator pos:line="159" pos:column="37">=&gt;</op:operator> <name><name pos:line="159" pos:column="40">i</name><op:operator pos:line="159" pos:column="41">.</op:operator><name pos:line="159" pos:column="42">GenericArguments</name></name></lambda></expr></argument>, <argument><expr><call><name><name pos:line="159" pos:column="60">Times</name><op:operator pos:line="159" pos:column="65">.</op:operator><name pos:line="159" pos:column="66">Once</name></name><argument_list pos:line="159" pos:column="70">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="162" pos:column="9">[<expr><name pos:line="162" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="163" pos:column="9">public</specifier> <name pos:line="163" pos:column="16">void</name></type> <name pos:line="163" pos:column="21">SetArgumentValueOnInvocation</name><parameter_list pos:line="163" pos:column="49">()</parameter_list>
        <block pos:line="164" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="165" pos:column="13">var</name></type> <name pos:line="165" pos:column="17">invocationMock</name> <init pos:line="165" pos:column="32">= <expr><op:operator pos:line="165" pos:column="34">new</op:operator> <call><name><name pos:line="165" pos:column="38">Mock</name><argument_list pos:line="165" pos:column="42">&lt;<argument><name pos:line="165" pos:column="43">IInvocation</name></argument>&gt;</argument_list></name><argument_list pos:line="165" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="166" pos:column="13">var</name></type> <name pos:line="166" pos:column="17">loggerMock</name> <init pos:line="166" pos:column="28">= <expr><op:operator pos:line="166" pos:column="30">new</op:operator> <call><name><name pos:line="166" pos:column="34">Mock</name><argument_list pos:line="166" pos:column="38">&lt;<argument><name pos:line="166" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="166" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="168" pos:column="13">var</name></type> <name pos:line="168" pos:column="17">adapter</name> <init pos:line="168" pos:column="25">= <expr><op:operator pos:line="168" pos:column="27">new</op:operator> <call><name pos:line="168" pos:column="31">CastleInvocationToAlternateMethodContextAdapter</name><argument_list pos:line="168" pos:column="78">(<argument><expr><name><name pos:line="168" pos:column="79">invocationMock</name><op:operator pos:line="168" pos:column="93">.</op:operator><name pos:line="168" pos:column="94">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="168" pos:column="102">loggerMock</name><op:operator pos:line="168" pos:column="112">.</op:operator><name pos:line="168" pos:column="113">Object</name></name></expr></argument>, <argument><expr><op:operator pos:line="168" pos:column="121">new</op:operator> <call><name><name pos:line="168" pos:column="125">Mock</name><argument_list pos:line="168" pos:column="129">&lt;<argument><name pos:line="168" pos:column="130">IMessageBroker</name></argument>&gt;</argument_list></name><argument_list pos:line="168" pos:column="145">()</argument_list></call><op:operator pos:line="168" pos:column="147">.</op:operator><name pos:line="168" pos:column="148">Object</name></expr></argument>, <argument><expr><op:operator pos:line="168" pos:column="156">new</op:operator> <call><name><name pos:line="168" pos:column="160">Mock</name><argument_list pos:line="168" pos:column="164">&lt;<argument><name pos:line="168" pos:column="165">IProxyFactory</name></argument>&gt;</argument_list></name><argument_list pos:line="168" pos:column="179">()</argument_list></call><op:operator pos:line="168" pos:column="181">.</op:operator><name pos:line="168" pos:column="182">Object</name></expr></argument>, <argument><expr><lambda><parameter_list pos:line="168" pos:column="190">()</parameter_list> <op:operator pos:line="168" pos:column="193">=&gt;</op:operator> <op:operator pos:line="168" pos:column="196">new</op:operator> <call><name pos:line="168" pos:column="200">ExecutionTimer</name><argument_list pos:line="168" pos:column="214">(<argument><expr><call><name><name pos:line="168" pos:column="215">Stopwatch</name><op:operator pos:line="168" pos:column="224">.</op:operator><name pos:line="168" pos:column="225">StartNew</name></name><argument_list pos:line="168" pos:column="233">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><lambda><parameter_list pos:line="168" pos:column="238">()</parameter_list> <op:operator pos:line="168" pos:column="241">=&gt;</op:operator> <name><name pos:line="168" pos:column="244">RuntimePolicy</name><op:operator pos:line="168" pos:column="257">.</op:operator><name pos:line="168" pos:column="258">On</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="169" pos:column="13">adapter</name><op:operator pos:line="169" pos:column="20">.</op:operator><name pos:line="169" pos:column="21">SetArgumentValue</name></name><argument_list pos:line="169" pos:column="37">(<argument><expr><lit:literal type="number" pos:line="169" pos:column="38">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="169" pos:column="41">"thing"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="171" pos:column="13">invocationMock</name><op:operator pos:line="171" pos:column="27">.</op:operator><name pos:line="171" pos:column="28">Verify</name></name><argument_list pos:line="171" pos:column="34">(<argument><expr><lambda><name pos:line="171" pos:column="35">i</name> <op:operator pos:line="171" pos:column="37">=&gt;</op:operator> <call><name><name pos:line="171" pos:column="40">i</name><op:operator pos:line="171" pos:column="41">.</op:operator><name pos:line="171" pos:column="42">SetArgumentValue</name></name><argument_list pos:line="171" pos:column="58">(<argument><expr><lit:literal type="number" pos:line="171" pos:column="59">0</lit:literal></expr></argument>,<argument><expr><lit:literal type="string" pos:line="171" pos:column="61">"thing"</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="171" pos:column="71">Times</name><op:operator pos:line="171" pos:column="76">.</op:operator><name pos:line="171" pos:column="77">Once</name></name><argument_list pos:line="171" pos:column="81">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="174" pos:column="9">[<expr><name pos:line="174" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="175" pos:column="9">public</specifier> <name pos:line="175" pos:column="16">void</name></type> <name pos:line="175" pos:column="21">ReturnGetArgumentValueFromInvocation</name><parameter_list pos:line="175" pos:column="57">()</parameter_list>
        <block pos:line="176" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="177" pos:column="13">var</name></type> <name pos:line="177" pos:column="17">expected</name> <init pos:line="177" pos:column="26">= <expr><op:operator pos:line="177" pos:column="28">new</op:operator> <block pos:line="177" pos:column="32">{<expr><name pos:line="177" pos:column="33">Any</name><op:operator pos:line="177" pos:column="36">=</op:operator><lit:literal type="string" pos:line="177" pos:column="37">"Object"</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="178" pos:column="13">var</name></type> <name pos:line="178" pos:column="17">invocationMock</name> <init pos:line="178" pos:column="32">= <expr><op:operator pos:line="178" pos:column="34">new</op:operator> <call><name><name pos:line="178" pos:column="38">Mock</name><argument_list pos:line="178" pos:column="42">&lt;<argument><name pos:line="178" pos:column="43">IInvocation</name></argument>&gt;</argument_list></name><argument_list pos:line="178" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="179" pos:column="13">invocationMock</name><op:operator pos:line="179" pos:column="27">.</op:operator><name pos:line="179" pos:column="28">Setup</name></name><argument_list pos:line="179" pos:column="33">(<argument><expr><lambda><name pos:line="179" pos:column="34">i</name> <op:operator pos:line="179" pos:column="36">=&gt;</op:operator> <call><name><name pos:line="179" pos:column="39">i</name><op:operator pos:line="179" pos:column="40">.</op:operator><name pos:line="179" pos:column="41">GetArgumentValue</name></name><argument_list pos:line="179" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="179" pos:column="58">0</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="179" pos:column="61">.</op:operator><call><name pos:line="179" pos:column="62">Returns</name><argument_list pos:line="179" pos:column="69">(<argument><expr><name pos:line="179" pos:column="70">expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="180" pos:column="13">var</name></type> <name pos:line="180" pos:column="17">loggerMock</name> <init pos:line="180" pos:column="28">= <expr><op:operator pos:line="180" pos:column="30">new</op:operator> <call><name><name pos:line="180" pos:column="34">Mock</name><argument_list pos:line="180" pos:column="38">&lt;<argument><name pos:line="180" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="180" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="182" pos:column="13">var</name></type> <name pos:line="182" pos:column="17">adapter</name> <init pos:line="182" pos:column="25">= <expr><op:operator pos:line="182" pos:column="27">new</op:operator> <call><name pos:line="182" pos:column="31">CastleInvocationToAlternateMethodContextAdapter</name><argument_list pos:line="182" pos:column="78">(<argument><expr><name><name pos:line="182" pos:column="79">invocationMock</name><op:operator pos:line="182" pos:column="93">.</op:operator><name pos:line="182" pos:column="94">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="182" pos:column="102">loggerMock</name><op:operator pos:line="182" pos:column="112">.</op:operator><name pos:line="182" pos:column="113">Object</name></name></expr></argument>, <argument><expr><op:operator pos:line="182" pos:column="121">new</op:operator> <call><name><name pos:line="182" pos:column="125">Mock</name><argument_list pos:line="182" pos:column="129">&lt;<argument><name pos:line="182" pos:column="130">IMessageBroker</name></argument>&gt;</argument_list></name><argument_list pos:line="182" pos:column="145">()</argument_list></call><op:operator pos:line="182" pos:column="147">.</op:operator><name pos:line="182" pos:column="148">Object</name></expr></argument>, <argument><expr><op:operator pos:line="182" pos:column="156">new</op:operator> <call><name><name pos:line="182" pos:column="160">Mock</name><argument_list pos:line="182" pos:column="164">&lt;<argument><name pos:line="182" pos:column="165">IProxyFactory</name></argument>&gt;</argument_list></name><argument_list pos:line="182" pos:column="179">()</argument_list></call><op:operator pos:line="182" pos:column="181">.</op:operator><name pos:line="182" pos:column="182">Object</name></expr></argument>, <argument><expr><lambda><parameter_list pos:line="182" pos:column="190">()</parameter_list> <op:operator pos:line="182" pos:column="193">=&gt;</op:operator> <op:operator pos:line="182" pos:column="196">new</op:operator> <call><name pos:line="182" pos:column="200">ExecutionTimer</name><argument_list pos:line="182" pos:column="214">(<argument><expr><call><name><name pos:line="182" pos:column="215">Stopwatch</name><op:operator pos:line="182" pos:column="224">.</op:operator><name pos:line="182" pos:column="225">StartNew</name></name><argument_list pos:line="182" pos:column="233">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><lambda><parameter_list pos:line="182" pos:column="238">()</parameter_list> <op:operator pos:line="182" pos:column="241">=&gt;</op:operator> <name><name pos:line="182" pos:column="244">RuntimePolicy</name><op:operator pos:line="182" pos:column="257">.</op:operator><name pos:line="182" pos:column="258">On</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="184" pos:column="13">Assert</name><op:operator pos:line="184" pos:column="19">.</op:operator><name pos:line="184" pos:column="20">Equal</name></name><argument_list pos:line="184" pos:column="25">(<argument><expr><name pos:line="184" pos:column="26">expected</name></expr></argument>, <argument><expr><call><name><name pos:line="184" pos:column="36">adapter</name><op:operator pos:line="184" pos:column="43">.</op:operator><name pos:line="184" pos:column="44">GetArgumentValue</name></name><argument_list pos:line="184" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="184" pos:column="61">0</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="185" pos:column="13">invocationMock</name><op:operator pos:line="185" pos:column="27">.</op:operator><name pos:line="185" pos:column="28">Verify</name></name><argument_list pos:line="185" pos:column="34">(<argument><expr><lambda><name pos:line="185" pos:column="35">i</name> <op:operator pos:line="185" pos:column="37">=&gt;</op:operator> <call><name><name pos:line="185" pos:column="40">i</name><op:operator pos:line="185" pos:column="41">.</op:operator><name pos:line="185" pos:column="42">GetArgumentValue</name></name><argument_list pos:line="185" pos:column="58">(<argument><expr><lit:literal type="number" pos:line="185" pos:column="59">0</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="185" pos:column="63">Times</name><op:operator pos:line="185" pos:column="68">.</op:operator><name pos:line="185" pos:column="69">Once</name></name><argument_list pos:line="185" pos:column="73">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="188" pos:column="9">[<expr><name pos:line="188" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="189" pos:column="9">public</specifier> <name pos:line="189" pos:column="16">void</name></type> <name pos:line="189" pos:column="21">ReturnGetConcreteMethodFromInvocation</name><parameter_list pos:line="189" pos:column="58">()</parameter_list>
        <block pos:line="190" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="191" pos:column="13">var</name></type> <name pos:line="191" pos:column="17">expected</name> <init pos:line="191" pos:column="26">= <expr><call><name pos:line="191" pos:column="28">GetType</name><argument_list pos:line="191" pos:column="35">()</argument_list></call><op:operator pos:line="191" pos:column="37">.</op:operator><call><name pos:line="191" pos:column="38">GetMethods</name><argument_list pos:line="191" pos:column="48">()</argument_list></call><op:operator pos:line="191" pos:column="50">.</op:operator><call><name pos:line="191" pos:column="51">First</name><argument_list pos:line="191" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="192" pos:column="13">var</name></type> <name pos:line="192" pos:column="17">invocationMock</name> <init pos:line="192" pos:column="32">= <expr><op:operator pos:line="192" pos:column="34">new</op:operator> <call><name><name pos:line="192" pos:column="38">Mock</name><argument_list pos:line="192" pos:column="42">&lt;<argument><name pos:line="192" pos:column="43">IInvocation</name></argument>&gt;</argument_list></name><argument_list pos:line="192" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="193" pos:column="13">invocationMock</name><op:operator pos:line="193" pos:column="27">.</op:operator><name pos:line="193" pos:column="28">Setup</name></name><argument_list pos:line="193" pos:column="33">(<argument><expr><lambda><name pos:line="193" pos:column="34">i</name> <op:operator pos:line="193" pos:column="36">=&gt;</op:operator> <call><name><name pos:line="193" pos:column="39">i</name><op:operator pos:line="193" pos:column="40">.</op:operator><name pos:line="193" pos:column="41">GetConcreteMethod</name></name><argument_list pos:line="193" pos:column="58">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="193" pos:column="61">.</op:operator><call><name pos:line="193" pos:column="62">Returns</name><argument_list pos:line="193" pos:column="69">(<argument><expr><name pos:line="193" pos:column="70">expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="194" pos:column="13">var</name></type> <name pos:line="194" pos:column="17">loggerMock</name> <init pos:line="194" pos:column="28">= <expr><op:operator pos:line="194" pos:column="30">new</op:operator> <call><name><name pos:line="194" pos:column="34">Mock</name><argument_list pos:line="194" pos:column="38">&lt;<argument><name pos:line="194" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="194" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="196" pos:column="13">var</name></type> <name pos:line="196" pos:column="17">adapter</name> <init pos:line="196" pos:column="25">= <expr><op:operator pos:line="196" pos:column="27">new</op:operator> <call><name pos:line="196" pos:column="31">CastleInvocationToAlternateMethodContextAdapter</name><argument_list pos:line="196" pos:column="78">(<argument><expr><name><name pos:line="196" pos:column="79">invocationMock</name><op:operator pos:line="196" pos:column="93">.</op:operator><name pos:line="196" pos:column="94">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="196" pos:column="102">loggerMock</name><op:operator pos:line="196" pos:column="112">.</op:operator><name pos:line="196" pos:column="113">Object</name></name></expr></argument>, <argument><expr><op:operator pos:line="196" pos:column="121">new</op:operator> <call><name><name pos:line="196" pos:column="125">Mock</name><argument_list pos:line="196" pos:column="129">&lt;<argument><name pos:line="196" pos:column="130">IMessageBroker</name></argument>&gt;</argument_list></name><argument_list pos:line="196" pos:column="145">()</argument_list></call><op:operator pos:line="196" pos:column="147">.</op:operator><name pos:line="196" pos:column="148">Object</name></expr></argument>, <argument><expr><op:operator pos:line="196" pos:column="156">new</op:operator> <call><name><name pos:line="196" pos:column="160">Mock</name><argument_list pos:line="196" pos:column="164">&lt;<argument><name pos:line="196" pos:column="165">IProxyFactory</name></argument>&gt;</argument_list></name><argument_list pos:line="196" pos:column="179">()</argument_list></call><op:operator pos:line="196" pos:column="181">.</op:operator><name pos:line="196" pos:column="182">Object</name></expr></argument>, <argument><expr><lambda><parameter_list pos:line="196" pos:column="190">()</parameter_list> <op:operator pos:line="196" pos:column="193">=&gt;</op:operator> <op:operator pos:line="196" pos:column="196">new</op:operator> <call><name pos:line="196" pos:column="200">ExecutionTimer</name><argument_list pos:line="196" pos:column="214">(<argument><expr><call><name><name pos:line="196" pos:column="215">Stopwatch</name><op:operator pos:line="196" pos:column="224">.</op:operator><name pos:line="196" pos:column="225">StartNew</name></name><argument_list pos:line="196" pos:column="233">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><lambda><parameter_list pos:line="196" pos:column="238">()</parameter_list> <op:operator pos:line="196" pos:column="241">=&gt;</op:operator> <name><name pos:line="196" pos:column="244">RuntimePolicy</name><op:operator pos:line="196" pos:column="257">.</op:operator><name pos:line="196" pos:column="258">On</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="198" pos:column="13">Assert</name><op:operator pos:line="198" pos:column="19">.</op:operator><name pos:line="198" pos:column="20">Equal</name></name><argument_list pos:line="198" pos:column="25">(<argument><expr><name pos:line="198" pos:column="26">expected</name></expr></argument>, <argument><expr><call><name><name pos:line="198" pos:column="36">adapter</name><op:operator pos:line="198" pos:column="43">.</op:operator><name pos:line="198" pos:column="44">GetConcreteMethod</name></name><argument_list pos:line="198" pos:column="61">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="199" pos:column="13">invocationMock</name><op:operator pos:line="199" pos:column="27">.</op:operator><name pos:line="199" pos:column="28">Verify</name></name><argument_list pos:line="199" pos:column="34">(<argument><expr><lambda><name pos:line="199" pos:column="35">i</name> <op:operator pos:line="199" pos:column="37">=&gt;</op:operator> <call><name><name pos:line="199" pos:column="40">i</name><op:operator pos:line="199" pos:column="41">.</op:operator><name pos:line="199" pos:column="42">GetConcreteMethod</name></name><argument_list pos:line="199" pos:column="59">()</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="199" pos:column="63">Times</name><op:operator pos:line="199" pos:column="68">.</op:operator><name pos:line="199" pos:column="69">Once</name></name><argument_list pos:line="199" pos:column="73">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="202" pos:column="9">[<expr><name pos:line="202" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="203" pos:column="9">public</specifier> <name pos:line="203" pos:column="16">void</name></type> <name pos:line="203" pos:column="21">ReturnGetConcreteMethodInvocatedTargetFromInvocation</name><parameter_list pos:line="203" pos:column="73">()</parameter_list>
        <block pos:line="204" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="205" pos:column="13">var</name></type> <name pos:line="205" pos:column="17">expected</name> <init pos:line="205" pos:column="26">= <expr><call><name pos:line="205" pos:column="28">GetType</name><argument_list pos:line="205" pos:column="35">()</argument_list></call><op:operator pos:line="205" pos:column="37">.</op:operator><call><name pos:line="205" pos:column="38">GetMethods</name><argument_list pos:line="205" pos:column="48">()</argument_list></call><op:operator pos:line="205" pos:column="50">.</op:operator><call><name pos:line="205" pos:column="51">First</name><argument_list pos:line="205" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="206" pos:column="13">var</name></type> <name pos:line="206" pos:column="17">invocationMock</name> <init pos:line="206" pos:column="32">= <expr><op:operator pos:line="206" pos:column="34">new</op:operator> <call><name><name pos:line="206" pos:column="38">Mock</name><argument_list pos:line="206" pos:column="42">&lt;<argument><name pos:line="206" pos:column="43">IInvocation</name></argument>&gt;</argument_list></name><argument_list pos:line="206" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="207" pos:column="13">invocationMock</name><op:operator pos:line="207" pos:column="27">.</op:operator><name pos:line="207" pos:column="28">Setup</name></name><argument_list pos:line="207" pos:column="33">(<argument><expr><lambda><name pos:line="207" pos:column="34">i</name> <op:operator pos:line="207" pos:column="36">=&gt;</op:operator> <call><name><name pos:line="207" pos:column="39">i</name><op:operator pos:line="207" pos:column="40">.</op:operator><name pos:line="207" pos:column="41">GetConcreteMethodInvocationTarget</name></name><argument_list pos:line="207" pos:column="74">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="207" pos:column="77">.</op:operator><call><name pos:line="207" pos:column="78">Returns</name><argument_list pos:line="207" pos:column="85">(<argument><expr><name pos:line="207" pos:column="86">expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="208" pos:column="13">var</name></type> <name pos:line="208" pos:column="17">loggerMock</name> <init pos:line="208" pos:column="28">= <expr><op:operator pos:line="208" pos:column="30">new</op:operator> <call><name><name pos:line="208" pos:column="34">Mock</name><argument_list pos:line="208" pos:column="38">&lt;<argument><name pos:line="208" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="208" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="210" pos:column="13">var</name></type> <name pos:line="210" pos:column="17">adapter</name> <init pos:line="210" pos:column="25">= <expr><op:operator pos:line="210" pos:column="27">new</op:operator> <call><name pos:line="210" pos:column="31">CastleInvocationToAlternateMethodContextAdapter</name><argument_list pos:line="210" pos:column="78">(<argument><expr><name><name pos:line="210" pos:column="79">invocationMock</name><op:operator pos:line="210" pos:column="93">.</op:operator><name pos:line="210" pos:column="94">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="210" pos:column="102">loggerMock</name><op:operator pos:line="210" pos:column="112">.</op:operator><name pos:line="210" pos:column="113">Object</name></name></expr></argument>, <argument><expr><op:operator pos:line="210" pos:column="121">new</op:operator> <call><name><name pos:line="210" pos:column="125">Mock</name><argument_list pos:line="210" pos:column="129">&lt;<argument><name pos:line="210" pos:column="130">IMessageBroker</name></argument>&gt;</argument_list></name><argument_list pos:line="210" pos:column="145">()</argument_list></call><op:operator pos:line="210" pos:column="147">.</op:operator><name pos:line="210" pos:column="148">Object</name></expr></argument>, <argument><expr><op:operator pos:line="210" pos:column="156">new</op:operator> <call><name><name pos:line="210" pos:column="160">Mock</name><argument_list pos:line="210" pos:column="164">&lt;<argument><name pos:line="210" pos:column="165">IProxyFactory</name></argument>&gt;</argument_list></name><argument_list pos:line="210" pos:column="179">()</argument_list></call><op:operator pos:line="210" pos:column="181">.</op:operator><name pos:line="210" pos:column="182">Object</name></expr></argument>, <argument><expr><lambda><parameter_list pos:line="210" pos:column="190">()</parameter_list> <op:operator pos:line="210" pos:column="193">=&gt;</op:operator> <op:operator pos:line="210" pos:column="196">new</op:operator> <call><name pos:line="210" pos:column="200">ExecutionTimer</name><argument_list pos:line="210" pos:column="214">(<argument><expr><call><name><name pos:line="210" pos:column="215">Stopwatch</name><op:operator pos:line="210" pos:column="224">.</op:operator><name pos:line="210" pos:column="225">StartNew</name></name><argument_list pos:line="210" pos:column="233">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><lambda><parameter_list pos:line="210" pos:column="238">()</parameter_list> <op:operator pos:line="210" pos:column="241">=&gt;</op:operator> <name><name pos:line="210" pos:column="244">RuntimePolicy</name><op:operator pos:line="210" pos:column="257">.</op:operator><name pos:line="210" pos:column="258">On</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="212" pos:column="13">Assert</name><op:operator pos:line="212" pos:column="19">.</op:operator><name pos:line="212" pos:column="20">Equal</name></name><argument_list pos:line="212" pos:column="25">(<argument><expr><name pos:line="212" pos:column="26">expected</name></expr></argument>, <argument><expr><call><name><name pos:line="212" pos:column="36">adapter</name><op:operator pos:line="212" pos:column="43">.</op:operator><name pos:line="212" pos:column="44">GetConcreteMethodInvocationTarget</name></name><argument_list pos:line="212" pos:column="77">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="213" pos:column="13">invocationMock</name><op:operator pos:line="213" pos:column="27">.</op:operator><name pos:line="213" pos:column="28">Verify</name></name><argument_list pos:line="213" pos:column="34">(<argument><expr><lambda><name pos:line="213" pos:column="35">i</name> <op:operator pos:line="213" pos:column="37">=&gt;</op:operator> <call><name><name pos:line="213" pos:column="40">i</name><op:operator pos:line="213" pos:column="41">.</op:operator><name pos:line="213" pos:column="42">GetConcreteMethodInvocationTarget</name></name><argument_list pos:line="213" pos:column="75">()</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="213" pos:column="79">Times</name><op:operator pos:line="213" pos:column="84">.</op:operator><name pos:line="213" pos:column="85">Once</name></name><argument_list pos:line="213" pos:column="89">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="216" pos:column="9">[<expr><name pos:line="216" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="217" pos:column="9">public</specifier> <name pos:line="217" pos:column="16">void</name></type> <name pos:line="217" pos:column="21">ProceedOnInvocation</name><parameter_list pos:line="217" pos:column="40">()</parameter_list>
        <block pos:line="218" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="219" pos:column="13">var</name></type> <name pos:line="219" pos:column="17">invocationMock</name> <init pos:line="219" pos:column="32">= <expr><op:operator pos:line="219" pos:column="34">new</op:operator> <call><name><name pos:line="219" pos:column="38">Mock</name><argument_list pos:line="219" pos:column="42">&lt;<argument><name pos:line="219" pos:column="43">IInvocation</name></argument>&gt;</argument_list></name><argument_list pos:line="219" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="220" pos:column="13">var</name></type> <name pos:line="220" pos:column="17">loggerMock</name> <init pos:line="220" pos:column="28">= <expr><op:operator pos:line="220" pos:column="30">new</op:operator> <call><name><name pos:line="220" pos:column="34">Mock</name><argument_list pos:line="220" pos:column="38">&lt;<argument><name pos:line="220" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="220" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="222" pos:column="13">var</name></type> <name pos:line="222" pos:column="17">adapter</name> <init pos:line="222" pos:column="25">= <expr><op:operator pos:line="222" pos:column="27">new</op:operator> <call><name pos:line="222" pos:column="31">CastleInvocationToAlternateMethodContextAdapter</name><argument_list pos:line="222" pos:column="78">(<argument><expr><name><name pos:line="222" pos:column="79">invocationMock</name><op:operator pos:line="222" pos:column="93">.</op:operator><name pos:line="222" pos:column="94">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="222" pos:column="102">loggerMock</name><op:operator pos:line="222" pos:column="112">.</op:operator><name pos:line="222" pos:column="113">Object</name></name></expr></argument>, <argument><expr><op:operator pos:line="222" pos:column="121">new</op:operator> <call><name><name pos:line="222" pos:column="125">Mock</name><argument_list pos:line="222" pos:column="129">&lt;<argument><name pos:line="222" pos:column="130">IMessageBroker</name></argument>&gt;</argument_list></name><argument_list pos:line="222" pos:column="145">()</argument_list></call><op:operator pos:line="222" pos:column="147">.</op:operator><name pos:line="222" pos:column="148">Object</name></expr></argument>, <argument><expr><op:operator pos:line="222" pos:column="156">new</op:operator> <call><name><name pos:line="222" pos:column="160">Mock</name><argument_list pos:line="222" pos:column="164">&lt;<argument><name pos:line="222" pos:column="165">IProxyFactory</name></argument>&gt;</argument_list></name><argument_list pos:line="222" pos:column="179">()</argument_list></call><op:operator pos:line="222" pos:column="181">.</op:operator><name pos:line="222" pos:column="182">Object</name></expr></argument>, <argument><expr><lambda><parameter_list pos:line="222" pos:column="190">()</parameter_list> <op:operator pos:line="222" pos:column="193">=&gt;</op:operator> <op:operator pos:line="222" pos:column="196">new</op:operator> <call><name pos:line="222" pos:column="200">ExecutionTimer</name><argument_list pos:line="222" pos:column="214">(<argument><expr><call><name><name pos:line="222" pos:column="215">Stopwatch</name><op:operator pos:line="222" pos:column="224">.</op:operator><name pos:line="222" pos:column="225">StartNew</name></name><argument_list pos:line="222" pos:column="233">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><lambda><parameter_list pos:line="222" pos:column="238">()</parameter_list> <op:operator pos:line="222" pos:column="241">=&gt;</op:operator> <name><name pos:line="222" pos:column="244">RuntimePolicy</name><op:operator pos:line="222" pos:column="257">.</op:operator><name pos:line="222" pos:column="258">On</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="224" pos:column="13">adapter</name><op:operator pos:line="224" pos:column="20">.</op:operator><name pos:line="224" pos:column="21">Proceed</name></name><argument_list pos:line="224" pos:column="28">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="225" pos:column="13">invocationMock</name><op:operator pos:line="225" pos:column="27">.</op:operator><name pos:line="225" pos:column="28">Verify</name></name><argument_list pos:line="225" pos:column="34">(<argument><expr><lambda><name pos:line="225" pos:column="35">i</name> <op:operator pos:line="225" pos:column="37">=&gt;</op:operator> <call><name><name pos:line="225" pos:column="40">i</name><op:operator pos:line="225" pos:column="41">.</op:operator><name pos:line="225" pos:column="42">Proceed</name></name><argument_list pos:line="225" pos:column="49">()</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="225" pos:column="53">Times</name><op:operator pos:line="225" pos:column="58">.</op:operator><name pos:line="225" pos:column="59">Once</name></name><argument_list pos:line="225" pos:column="63">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
