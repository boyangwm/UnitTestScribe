<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Mvc\AlternateType\ModelBinderProviderGetBinderShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Web</name><op:operator pos:line="2" pos:column="17">.</op:operator><name pos:line="2" pos:column="18">Mvc</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Glimpse</name><op:operator pos:line="3" pos:column="14">.</op:operator><name pos:line="3" pos:column="15">Core</name><op:operator pos:line="3" pos:column="19">.</op:operator><name pos:line="3" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Mvc</name><op:operator pos:line="4" pos:column="18">.</op:operator><name pos:line="4" pos:column="19">AlternateType</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Glimpse</name><op:operator pos:line="5" pos:column="14">.</op:operator><name pos:line="5" pos:column="15">Test</name><op:operator pos:line="5" pos:column="19">.</op:operator><name pos:line="5" pos:column="20">Common</name></name>;</using>
<using pos:line="6" pos:column="1">using <name pos:line="6" pos:column="7">Moq</name>;</using>
<using pos:line="7" pos:column="1">using <name pos:line="7" pos:column="7">Xunit</name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Xunit</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">Extensions</name></name>;</using>

<namespace pos:line="10" pos:column="1">namespace <name><name pos:line="10" pos:column="11">Glimpse</name><op:operator pos:line="10" pos:column="18">.</op:operator><name pos:line="10" pos:column="19">Test</name><op:operator pos:line="10" pos:column="23">.</op:operator><name pos:line="10" pos:column="24">Mvc</name><op:operator pos:line="10" pos:column="27">.</op:operator><name pos:line="10" pos:column="28">AlternateType</name></name>
<block pos:line="11" pos:column="1">{
    <class><specifier pos:line="12" pos:column="5">public</specifier> class <name pos:line="12" pos:column="18">ModelBinderProviderGetBinderShould</name>
    <block pos:line="13" pos:column="5">{
        <function><type><attribute pos:line="14" pos:column="9">[<expr><name pos:line="14" pos:column="10">Theory</name></expr><op:operator pos:line="14" pos:column="16">,</op:operator> <expr><name pos:line="14" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="15" pos:column="9">public</specifier> <name pos:line="15" pos:column="16">void</name></type> <name pos:line="15" pos:column="21">Construct</name><parameter_list pos:line="15" pos:column="30">(<param><decl><type><name><name pos:line="15" pos:column="31">AlternateType</name><argument_list pos:line="15" pos:column="44">&lt;<argument><name pos:line="15" pos:column="45">IModelBinder</name></argument>&gt;</argument_list></name></type> <name pos:line="15" pos:column="59">alternateModelBinder</name></decl></param>)</parameter_list>
        <block pos:line="16" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="17" pos:column="13">var</name></type> <name pos:line="17" pos:column="17">sut</name> <init pos:line="17" pos:column="21">= <expr><op:operator pos:line="17" pos:column="23">new</op:operator> <call><name><name pos:line="17" pos:column="27">ModelBinderProvider</name><op:operator pos:line="17" pos:column="46">.</op:operator><name pos:line="17" pos:column="47">GetBinder</name></name><argument_list pos:line="17" pos:column="56">(<argument><expr><name pos:line="17" pos:column="57">alternateModelBinder</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="19" pos:column="13">Assert</name><op:operator pos:line="19" pos:column="19">.</op:operator><name pos:line="19" pos:column="20">Equal</name></name><argument_list pos:line="19" pos:column="25">(<argument><expr><name pos:line="19" pos:column="26">alternateModelBinder</name></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="48">sut</name><op:operator pos:line="19" pos:column="51">.</op:operator><name pos:line="19" pos:column="52">AlternateModelBinder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="20" pos:column="13">Assert</name><op:operator pos:line="20" pos:column="19">.</op:operator><name pos:line="20" pos:column="20">NotNull</name></name><argument_list pos:line="20" pos:column="27">(<argument><expr><name><name pos:line="20" pos:column="28">sut</name><op:operator pos:line="20" pos:column="31">.</op:operator><name pos:line="20" pos:column="32">MethodToImplement</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="23" pos:column="9">[<expr><name pos:line="23" pos:column="10">Theory</name></expr><op:operator pos:line="23" pos:column="16">,</op:operator> <expr><name pos:line="23" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="24" pos:column="9">public</specifier> <name pos:line="24" pos:column="16">void</name></type> <name pos:line="24" pos:column="21">ImplementProperMethod</name><parameter_list pos:line="24" pos:column="42">(<param><decl><type><name><name pos:line="24" pos:column="43">ModelBinderProvider</name><op:operator pos:line="24" pos:column="62">.</op:operator><name pos:line="24" pos:column="63">GetBinder</name></name></type> <name pos:line="24" pos:column="73">sut</name></decl></param>)</parameter_list>
        <block pos:line="25" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="26" pos:column="13">Assert</name><op:operator pos:line="26" pos:column="19">.</op:operator><name pos:line="26" pos:column="20">Equal</name></name><argument_list pos:line="26" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="26" pos:column="26">"GetBinder"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="39">sut</name><op:operator pos:line="26" pos:column="42">.</op:operator><name pos:line="26" pos:column="43">MethodToImplement</name><op:operator pos:line="26" pos:column="60">.</op:operator><name pos:line="26" pos:column="61">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="29" pos:column="9">[<expr><name pos:line="29" pos:column="10">Theory</name></expr><op:operator pos:line="29" pos:column="16">,</op:operator> <expr><name pos:line="29" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="30" pos:column="9">public</specifier> <name pos:line="30" pos:column="16">void</name></type> <name pos:line="30" pos:column="21">ProceedAndReturnWithRuntimePolicyOff</name><parameter_list pos:line="30" pos:column="57">(<param><decl><type><name><name pos:line="30" pos:column="58">ModelBinderProvider</name><op:operator pos:line="30" pos:column="77">.</op:operator><name pos:line="30" pos:column="78">GetBinder</name></name></type> <name pos:line="30" pos:column="88">sut</name></decl></param>, <param><decl><type><name pos:line="30" pos:column="93">IAlternateMethodContext</name></type> <name pos:line="30" pos:column="117">context</name></decl></param>)</parameter_list>
        <block pos:line="31" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="32" pos:column="13">context</name><op:operator pos:line="32" pos:column="20">.</op:operator><name pos:line="32" pos:column="21">Setup</name></name><argument_list pos:line="32" pos:column="26">(<argument><expr><lambda><name pos:line="32" pos:column="27">c</name> <op:operator pos:line="32" pos:column="29">=&gt;</op:operator> <name><name pos:line="32" pos:column="32">c</name><op:operator pos:line="32" pos:column="33">.</op:operator><name pos:line="32" pos:column="34">RuntimePolicyStrategy</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="32" pos:column="56">.</op:operator><call><name pos:line="32" pos:column="57">Returns</name><argument_list pos:line="32" pos:column="64">(<argument><expr><lambda><parameter_list pos:line="32" pos:column="65">()</parameter_list> <op:operator pos:line="32" pos:column="68">=&gt;</op:operator> <name><name pos:line="32" pos:column="71">RuntimePolicy</name><op:operator pos:line="32" pos:column="84">.</op:operator><name pos:line="32" pos:column="85">Off</name></name></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="34" pos:column="13">sut</name><op:operator pos:line="34" pos:column="16">.</op:operator><name pos:line="34" pos:column="17">NewImplementation</name></name><argument_list pos:line="34" pos:column="34">(<argument><expr><name pos:line="34" pos:column="35">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="36" pos:column="13">context</name><op:operator pos:line="36" pos:column="20">.</op:operator><name pos:line="36" pos:column="21">Verify</name></name><argument_list pos:line="36" pos:column="27">(<argument><expr><lambda><name pos:line="36" pos:column="28">c</name> <op:operator pos:line="36" pos:column="30">=&gt;</op:operator> <call><name><name pos:line="36" pos:column="33">c</name><op:operator pos:line="36" pos:column="34">.</op:operator><name pos:line="36" pos:column="35">Proceed</name></name><argument_list pos:line="36" pos:column="42">()</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="37" pos:column="13">context</name><op:operator pos:line="37" pos:column="20">.</op:operator><name pos:line="37" pos:column="21">MessageBroker</name><op:operator pos:line="37" pos:column="34">.</op:operator><name pos:line="37" pos:column="35">Verify</name></name><argument_list pos:line="37" pos:column="41">(<argument><expr><lambda><name pos:line="37" pos:column="42">mb</name> <op:operator pos:line="37" pos:column="45">=&gt;</op:operator> <call><name><name pos:line="37" pos:column="48">mb</name><op:operator pos:line="37" pos:column="50">.</op:operator><name pos:line="37" pos:column="51">Publish</name></name><argument_list pos:line="37" pos:column="58">(<argument><expr><call><name><name pos:line="37" pos:column="59">It</name><op:operator pos:line="37" pos:column="61">.</op:operator><name><name pos:line="37" pos:column="62">IsAny</name><argument_list pos:line="37" pos:column="67">&lt;<argument><name pos:line="37" pos:column="68">object</name></argument>&gt;</argument_list></name></name><argument_list pos:line="37" pos:column="75">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="37" pos:column="80">Times</name><op:operator pos:line="37" pos:column="85">.</op:operator><name pos:line="37" pos:column="86">Never</name></name><argument_list pos:line="37" pos:column="91">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="40" pos:column="9">[<expr><name pos:line="40" pos:column="10">Theory</name></expr><op:operator pos:line="40" pos:column="16">,</op:operator> <expr><name pos:line="40" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="41" pos:column="9">public</specifier> <name pos:line="41" pos:column="16">void</name></type> <name pos:line="41" pos:column="21">ProceedAndWrapResultWithRuntimePolicyOnAndDefaultModelBinder</name><parameter_list pos:line="41" pos:column="81">(<param><decl><type><name><name pos:line="41" pos:column="82">AlternateType</name><argument_list pos:line="41" pos:column="95">&lt;<argument><name pos:line="41" pos:column="96">IModelBinder</name></argument>&gt;</argument_list></name></type> <name pos:line="41" pos:column="110">alternateModelBinder</name></decl></param>, <param><decl><type><name pos:line="41" pos:column="132">IAlternateMethodContext</name></type> <name pos:line="41" pos:column="156">context</name></decl></param>, <param><decl><type><name pos:line="41" pos:column="165">Type</name></type> <name pos:line="41" pos:column="170">arg1</name></decl></param>, <param><decl><type><name pos:line="41" pos:column="176">DefaultModelBinder</name></type> <name pos:line="41" pos:column="195">returnValue</name></decl></param>, <param><decl><type><name pos:line="41" pos:column="208">IModelBinder</name></type> <name pos:line="41" pos:column="221">newModelBinder</name></decl></param>)</parameter_list>
        <block pos:line="42" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="43" pos:column="13">context</name><op:operator pos:line="43" pos:column="20">.</op:operator><name pos:line="43" pos:column="21">Setup</name></name><argument_list pos:line="43" pos:column="26">(<argument><expr><lambda><name pos:line="43" pos:column="27">c</name> <op:operator pos:line="43" pos:column="29">=&gt;</op:operator> <name><name pos:line="43" pos:column="32">c</name><op:operator pos:line="43" pos:column="33">.</op:operator><name pos:line="43" pos:column="34">Arguments</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="43" pos:column="44">.</op:operator><call><name pos:line="43" pos:column="45">Returns</name><argument_list pos:line="43" pos:column="52">(<argument><expr><op:operator pos:line="43" pos:column="53">new</op:operator> <name><name pos:line="43" pos:column="57">object</name><index pos:line="43" pos:column="63">[]</index></name> <block pos:line="43" pos:column="66">{ <expr><name pos:line="43" pos:column="68">arg1</name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="44" pos:column="13">context</name><op:operator pos:line="44" pos:column="20">.</op:operator><name pos:line="44" pos:column="21">Setup</name></name><argument_list pos:line="44" pos:column="26">(<argument><expr><lambda><name pos:line="44" pos:column="27">c</name> <op:operator pos:line="44" pos:column="29">=&gt;</op:operator> <name><name pos:line="44" pos:column="32">c</name><op:operator pos:line="44" pos:column="33">.</op:operator><name pos:line="44" pos:column="34">ReturnValue</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="44" pos:column="46">.</op:operator><call><name pos:line="44" pos:column="47">Returns</name><argument_list pos:line="44" pos:column="54">(<argument><expr><name pos:line="44" pos:column="55">returnValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="45" pos:column="13">alternateModelBinder</name><op:operator pos:line="45" pos:column="33">.</op:operator><name pos:line="45" pos:column="34">Setup</name></name><argument_list pos:line="45" pos:column="39">(<argument><expr><lambda><name pos:line="45" pos:column="40">amb</name> <op:operator pos:line="45" pos:column="44">=&gt;</op:operator> <call><name><name pos:line="45" pos:column="47">amb</name><op:operator pos:line="45" pos:column="50">.</op:operator><name pos:line="45" pos:column="51">TryCreate</name></name><argument_list pos:line="45" pos:column="60">(<argument><expr><call><name><name pos:line="45" pos:column="61">It</name><op:operator pos:line="45" pos:column="63">.</op:operator><name><name pos:line="45" pos:column="64">IsAny</name><argument_list pos:line="45" pos:column="69">&lt;<argument><name pos:line="45" pos:column="70">IModelBinder</name></argument>&gt;</argument_list></name></name><argument_list pos:line="45" pos:column="83">()</argument_list></call></expr></argument>, <argument><expr pos:line="45" pos:column="87">out <name pos:line="45" pos:column="91">newModelBinder</name></expr></argument>, <argument><expr><name pos:line="45" pos:column="107">null</name></expr></argument>, <argument><expr><name pos:line="45" pos:column="113">null</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="45" pos:column="119">.</op:operator><call><name pos:line="45" pos:column="120">Returns</name><argument_list pos:line="45" pos:column="127">(<argument><expr><lit:literal type="boolean" pos:line="45" pos:column="128">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="47" pos:column="13">var</name></type> <name pos:line="47" pos:column="17">sut</name> <init pos:line="47" pos:column="21">= <expr><op:operator pos:line="47" pos:column="23">new</op:operator> <call><name><name pos:line="47" pos:column="27">ModelBinderProvider</name><op:operator pos:line="47" pos:column="46">.</op:operator><name pos:line="47" pos:column="47">GetBinder</name></name><argument_list pos:line="47" pos:column="56">(<argument><expr><name pos:line="47" pos:column="57">alternateModelBinder</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="48" pos:column="13">sut</name><op:operator pos:line="48" pos:column="16">.</op:operator><name pos:line="48" pos:column="17">NewImplementation</name></name><argument_list pos:line="48" pos:column="34">(<argument><expr><name pos:line="48" pos:column="35">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="50" pos:column="13">context</name><op:operator pos:line="50" pos:column="20">.</op:operator><name pos:line="50" pos:column="21">TimerStrategy</name></name><argument_list pos:line="50" pos:column="34">()</argument_list></call><op:operator pos:line="50" pos:column="36">.</op:operator><call><name pos:line="50" pos:column="37">Verify</name><argument_list pos:line="50" pos:column="43">(<argument><expr><lambda><name pos:line="50" pos:column="44">t</name> <op:operator pos:line="50" pos:column="46">=&gt;</op:operator> <call><name><name pos:line="50" pos:column="49">t</name><op:operator pos:line="50" pos:column="50">.</op:operator><name pos:line="50" pos:column="51">Time</name></name><argument_list pos:line="50" pos:column="55">(<argument><expr><call><name><name pos:line="50" pos:column="56">It</name><op:operator pos:line="50" pos:column="58">.</op:operator><name><name pos:line="50" pos:column="59">IsAny</name><argument_list pos:line="50" pos:column="64">&lt;<argument><name pos:line="50" pos:column="65">Action</name></argument>&gt;</argument_list></name></name><argument_list pos:line="50" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="51" pos:column="13">context</name><op:operator pos:line="51" pos:column="20">.</op:operator><name pos:line="51" pos:column="21">Verify</name></name><argument_list pos:line="51" pos:column="27">(<argument><expr><lambda><name pos:line="51" pos:column="28">mb</name> <op:operator pos:line="51" pos:column="31">=&gt;</op:operator> <name><name pos:line="51" pos:column="34">mb</name><op:operator pos:line="51" pos:column="36">.</op:operator><name pos:line="51" pos:column="37">ReturnValue</name></name></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="52" pos:column="13">context</name><op:operator pos:line="52" pos:column="20">.</op:operator><name pos:line="52" pos:column="21">Logger</name><op:operator pos:line="52" pos:column="27">.</op:operator><name pos:line="52" pos:column="28">Verify</name></name><argument_list pos:line="52" pos:column="34">(<argument><expr><lambda><name pos:line="52" pos:column="35">l</name> <op:operator pos:line="52" pos:column="37">=&gt;</op:operator> <call><name><name pos:line="52" pos:column="40">l</name><op:operator pos:line="52" pos:column="41">.</op:operator><name pos:line="52" pos:column="42">Warn</name></name><argument_list pos:line="52" pos:column="46">(<argument><expr><call><name><name pos:line="52" pos:column="47">It</name><op:operator pos:line="52" pos:column="49">.</op:operator><name><name pos:line="52" pos:column="50">IsAny</name><argument_list pos:line="52" pos:column="55">&lt;<argument><name pos:line="52" pos:column="56">string</name></argument>&gt;</argument_list></name></name><argument_list pos:line="52" pos:column="63">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="52" pos:column="67">context</name><op:operator pos:line="52" pos:column="74">.</op:operator><name pos:line="52" pos:column="75">ReturnValue</name><op:operator pos:line="52" pos:column="86">.</op:operator><name pos:line="52" pos:column="87">GetType</name></name><argument_list pos:line="52" pos:column="94">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="52" pos:column="99">Times</name><op:operator pos:line="52" pos:column="104">.</op:operator><name pos:line="52" pos:column="105">Never</name></name><argument_list pos:line="52" pos:column="110">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="53" pos:column="13">context</name><op:operator pos:line="53" pos:column="20">.</op:operator><name pos:line="53" pos:column="21">VerifySet</name></name><argument_list pos:line="53" pos:column="30">(<argument><expr><lambda><name pos:line="53" pos:column="31">c</name> <op:operator pos:line="53" pos:column="33">=&gt;</op:operator> <name><name pos:line="53" pos:column="36">c</name><op:operator pos:line="53" pos:column="37">.</op:operator><name pos:line="53" pos:column="38">ReturnValue</name></name> <op:operator pos:line="53" pos:column="50">=</op:operator> <name pos:line="53" pos:column="52">newModelBinder</name></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="54" pos:column="13">alternateModelBinder</name><op:operator pos:line="54" pos:column="33">.</op:operator><name pos:line="54" pos:column="34">Verify</name></name><argument_list pos:line="54" pos:column="40">(<argument><expr><lambda><name pos:line="54" pos:column="41">amb</name> <op:operator pos:line="54" pos:column="45">=&gt;</op:operator> <call><name><name pos:line="54" pos:column="48">amb</name><op:operator pos:line="54" pos:column="51">.</op:operator><name pos:line="54" pos:column="52">TryCreate</name></name><argument_list pos:line="54" pos:column="61">(<argument><expr><call><name><name pos:line="54" pos:column="62">It</name><op:operator pos:line="54" pos:column="64">.</op:operator><name><name pos:line="54" pos:column="65">IsAny</name><argument_list pos:line="54" pos:column="70">&lt;<argument><name pos:line="54" pos:column="71">IModelBinder</name></argument>&gt;</argument_list></name></name><argument_list pos:line="54" pos:column="84">()</argument_list></call></expr></argument>, <argument><expr pos:line="54" pos:column="88">out <name pos:line="54" pos:column="92">newModelBinder</name></expr></argument>, <argument><expr><name pos:line="54" pos:column="108">null</name></expr></argument>, <argument><expr><name pos:line="54" pos:column="114">null</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="57" pos:column="9">[<expr><name pos:line="57" pos:column="10">Theory</name></expr><op:operator pos:line="57" pos:column="16">,</op:operator> <expr><name pos:line="57" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="58" pos:column="9">public</specifier> <name pos:line="58" pos:column="16">void</name></type> <name pos:line="58" pos:column="21">ProceedAndWarnWithRuntimePolicyOnAndIModelBinder</name><parameter_list pos:line="58" pos:column="69">(<param><decl><type><name><name pos:line="58" pos:column="70">AlternateType</name><argument_list pos:line="58" pos:column="83">&lt;<argument><name pos:line="58" pos:column="84">IModelBinder</name></argument>&gt;</argument_list></name></type> <name pos:line="58" pos:column="98">alternateModelBinder</name></decl></param>, <param><decl><type><name pos:line="58" pos:column="120">IAlternateMethodContext</name></type> <name pos:line="58" pos:column="144">context</name></decl></param>, <param><decl><type><name pos:line="58" pos:column="153">Type</name></type> <name pos:line="58" pos:column="158">arg1</name></decl></param>, <param><decl><type><name pos:line="58" pos:column="164">IModelBinder</name></type> <name pos:line="58" pos:column="177">returnValue</name></decl></param>)</parameter_list>
        <block pos:line="59" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="60" pos:column="13">context</name><op:operator pos:line="60" pos:column="20">.</op:operator><name pos:line="60" pos:column="21">Setup</name></name><argument_list pos:line="60" pos:column="26">(<argument><expr><lambda><name pos:line="60" pos:column="27">c</name> <op:operator pos:line="60" pos:column="29">=&gt;</op:operator> <name><name pos:line="60" pos:column="32">c</name><op:operator pos:line="60" pos:column="33">.</op:operator><name pos:line="60" pos:column="34">Arguments</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="60" pos:column="44">.</op:operator><call><name pos:line="60" pos:column="45">Returns</name><argument_list pos:line="60" pos:column="52">(<argument><expr><op:operator pos:line="60" pos:column="53">new</op:operator> <name><name pos:line="60" pos:column="57">object</name><index pos:line="60" pos:column="63">[]</index></name> <block pos:line="60" pos:column="66">{ <expr><name pos:line="60" pos:column="68">arg1</name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="61" pos:column="13">context</name><op:operator pos:line="61" pos:column="20">.</op:operator><name pos:line="61" pos:column="21">Setup</name></name><argument_list pos:line="61" pos:column="26">(<argument><expr><lambda><name pos:line="61" pos:column="27">c</name> <op:operator pos:line="61" pos:column="29">=&gt;</op:operator> <name><name pos:line="61" pos:column="32">c</name><op:operator pos:line="61" pos:column="33">.</op:operator><name pos:line="61" pos:column="34">ReturnValue</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="61" pos:column="46">.</op:operator><call><name pos:line="61" pos:column="47">Returns</name><argument_list pos:line="61" pos:column="54">(<argument><expr><name pos:line="61" pos:column="55">returnValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="63" pos:column="13">var</name></type> <name pos:line="63" pos:column="17">sut</name> <init pos:line="63" pos:column="21">= <expr><op:operator pos:line="63" pos:column="23">new</op:operator> <call><name><name pos:line="63" pos:column="27">ModelBinderProvider</name><op:operator pos:line="63" pos:column="46">.</op:operator><name pos:line="63" pos:column="47">GetBinder</name></name><argument_list pos:line="63" pos:column="56">(<argument><expr><name pos:line="63" pos:column="57">alternateModelBinder</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="64" pos:column="13">sut</name><op:operator pos:line="64" pos:column="16">.</op:operator><name pos:line="64" pos:column="17">NewImplementation</name></name><argument_list pos:line="64" pos:column="34">(<argument><expr><name pos:line="64" pos:column="35">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="66" pos:column="13">context</name><op:operator pos:line="66" pos:column="20">.</op:operator><name pos:line="66" pos:column="21">TimerStrategy</name></name><argument_list pos:line="66" pos:column="34">()</argument_list></call><op:operator pos:line="66" pos:column="36">.</op:operator><call><name pos:line="66" pos:column="37">Verify</name><argument_list pos:line="66" pos:column="43">(<argument><expr><lambda><name pos:line="66" pos:column="44">t</name> <op:operator pos:line="66" pos:column="46">=&gt;</op:operator> <call><name><name pos:line="66" pos:column="49">t</name><op:operator pos:line="66" pos:column="50">.</op:operator><name pos:line="66" pos:column="51">Time</name></name><argument_list pos:line="66" pos:column="55">(<argument><expr><call><name><name pos:line="66" pos:column="56">It</name><op:operator pos:line="66" pos:column="58">.</op:operator><name><name pos:line="66" pos:column="59">IsAny</name><argument_list pos:line="66" pos:column="64">&lt;<argument><name pos:line="66" pos:column="65">Action</name></argument>&gt;</argument_list></name></name><argument_list pos:line="66" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="67" pos:column="13">context</name><op:operator pos:line="67" pos:column="20">.</op:operator><name pos:line="67" pos:column="21">Verify</name></name><argument_list pos:line="67" pos:column="27">(<argument><expr><lambda><name pos:line="67" pos:column="28">mb</name> <op:operator pos:line="67" pos:column="31">=&gt;</op:operator> <name><name pos:line="67" pos:column="34">mb</name><op:operator pos:line="67" pos:column="36">.</op:operator><name pos:line="67" pos:column="37">ReturnValue</name></name></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
