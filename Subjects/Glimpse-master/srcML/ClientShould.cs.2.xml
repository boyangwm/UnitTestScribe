<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Core\Resource\ClientShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Linq</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Glimpse</name><op:operator pos:line="3" pos:column="14">.</op:operator><name pos:line="3" pos:column="15">Core</name><op:operator pos:line="3" pos:column="19">.</op:operator><name pos:line="3" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Core</name><op:operator pos:line="4" pos:column="19">.</op:operator><name pos:line="4" pos:column="20">Resource</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Glimpse</name><op:operator pos:line="5" pos:column="14">.</op:operator><name pos:line="5" pos:column="15">Core</name><op:operator pos:line="5" pos:column="19">.</op:operator><name pos:line="5" pos:column="20">ResourceResult</name></name>;</using>
<using pos:line="6" pos:column="1">using <name pos:line="6" pos:column="7">Moq</name>;</using>
<using pos:line="7" pos:column="1">using <name pos:line="7" pos:column="7">Xunit</name>;</using>

<namespace pos:line="9" pos:column="1">namespace <name><name pos:line="9" pos:column="11">Glimpse</name><op:operator pos:line="9" pos:column="18">.</op:operator><name pos:line="9" pos:column="19">Test</name><op:operator pos:line="9" pos:column="23">.</op:operator><name pos:line="9" pos:column="24">Core</name><op:operator pos:line="9" pos:column="28">.</op:operator><name pos:line="9" pos:column="29">Resource</name></name>
<block pos:line="10" pos:column="1">{
    <class><specifier pos:line="11" pos:column="5">public</specifier> class <name pos:line="11" pos:column="18">ClientShould</name>
    <block pos:line="12" pos:column="5">{
        <function><type><attribute pos:line="13" pos:column="9">[<expr><name pos:line="13" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="14" pos:column="9">public</specifier> <name pos:line="14" pos:column="16">void</name></type> <name pos:line="14" pos:column="21">ProvideProperName</name><parameter_list pos:line="14" pos:column="38">()</parameter_list>
        <block pos:line="15" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="16" pos:column="13">var</name></type> <name pos:line="16" pos:column="17">resource</name> <init pos:line="16" pos:column="26">= <expr><op:operator pos:line="16" pos:column="28">new</op:operator> <call><name pos:line="16" pos:column="32">ClientResource</name><argument_list pos:line="16" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="17" pos:column="13">Assert</name><op:operator pos:line="17" pos:column="19">.</op:operator><name pos:line="17" pos:column="20">Equal</name></name><argument_list pos:line="17" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="17" pos:column="26">"glimpse_client"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="44">resource</name><op:operator pos:line="17" pos:column="52">.</op:operator><name pos:line="17" pos:column="53">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="20" pos:column="9">[<expr><name pos:line="20" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="21" pos:column="9">public</specifier> <name pos:line="21" pos:column="16">void</name></type> <name pos:line="21" pos:column="21">ReturnOneParameterKeys</name><parameter_list pos:line="21" pos:column="43">()</parameter_list>
        <block pos:line="22" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="23" pos:column="13">var</name></type> <name pos:line="23" pos:column="17">resource</name> <init pos:line="23" pos:column="26">= <expr><op:operator pos:line="23" pos:column="28">new</op:operator> <call><name pos:line="23" pos:column="32">ClientResource</name><argument_list pos:line="23" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="24" pos:column="13">Assert</name><op:operator pos:line="24" pos:column="19">.</op:operator><name pos:line="24" pos:column="20">Equal</name></name><argument_list pos:line="24" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="24" pos:column="26">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="24" pos:column="29">resource</name><op:operator pos:line="24" pos:column="37">.</op:operator><name pos:line="24" pos:column="38">Parameters</name><op:operator pos:line="24" pos:column="48">.</op:operator><name pos:line="24" pos:column="49">Count</name></name><argument_list pos:line="24" pos:column="54">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="27" pos:column="9">[<expr><name pos:line="27" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="28" pos:column="9">public</specifier> <name pos:line="28" pos:column="16">void</name></type> <name pos:line="28" pos:column="21">ThrowExceptionWithNullParameters</name><parameter_list pos:line="28" pos:column="53">()</parameter_list>
        <block pos:line="29" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="30" pos:column="13">var</name></type> <name pos:line="30" pos:column="17">resource</name> <init pos:line="30" pos:column="26">= <expr><op:operator pos:line="30" pos:column="28">new</op:operator> <call><name pos:line="30" pos:column="32">ClientResource</name><argument_list pos:line="30" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="32" pos:column="13">Assert</name><op:operator pos:line="32" pos:column="19">.</op:operator><name><name pos:line="32" pos:column="20">Throws</name><argument_list pos:line="32" pos:column="26">&lt;<argument><name pos:line="32" pos:column="27">ArgumentNullException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="32" pos:column="49">(<argument><expr><lambda><parameter_list pos:line="32" pos:column="50">()</parameter_list> <op:operator pos:line="32" pos:column="53">=&gt;</op:operator> <call><name><name pos:line="32" pos:column="56">resource</name><op:operator pos:line="32" pos:column="64">.</op:operator><name pos:line="32" pos:column="65">Execute</name></name><argument_list pos:line="32" pos:column="72">(<argument><expr><name pos:line="32" pos:column="73">null</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="35" pos:column="9">[<expr><name pos:line="35" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="36" pos:column="9">public</specifier> <name pos:line="36" pos:column="16">void</name></type> <name pos:line="36" pos:column="21">ReturnStatusCodeResourceResultWithMissingResource</name><parameter_list pos:line="36" pos:column="70">()</parameter_list>
        <block pos:line="37" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="38" pos:column="13">var</name></type> <name pos:line="38" pos:column="17">contextMock</name> <init pos:line="38" pos:column="29">= <expr><op:operator pos:line="38" pos:column="31">new</op:operator> <call><name><name pos:line="38" pos:column="35">Mock</name><argument_list pos:line="38" pos:column="39">&lt;<argument><name pos:line="38" pos:column="40">IResourceContext</name></argument>&gt;</argument_list></name><argument_list pos:line="38" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="40" pos:column="13">var</name></type> <name pos:line="40" pos:column="17">resource</name> <init pos:line="40" pos:column="26">= <expr><op:operator pos:line="40" pos:column="28">new</op:operator> <call><name pos:line="40" pos:column="32">ClientResourceWithBadResourceName</name><argument_list pos:line="40" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="42" pos:column="13">var</name></type> <name pos:line="42" pos:column="17">result</name> <init pos:line="42" pos:column="24">= <expr><call><name><name pos:line="42" pos:column="26">resource</name><op:operator pos:line="42" pos:column="34">.</op:operator><name pos:line="42" pos:column="35">Execute</name></name><argument_list pos:line="42" pos:column="42">(<argument><expr><name><name pos:line="42" pos:column="43">contextMock</name><op:operator pos:line="42" pos:column="54">.</op:operator><name pos:line="42" pos:column="55">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="44" pos:column="13">Assert</name><op:operator pos:line="44" pos:column="19">.</op:operator><name pos:line="44" pos:column="20">NotNull</name></name><argument_list pos:line="44" pos:column="27">(<argument><expr><name pos:line="44" pos:column="28">result</name> <op:operator pos:line="44" pos:column="35">as</op:operator> <name pos:line="44" pos:column="38">StatusCodeResourceResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <class><specifier pos:line="47" pos:column="9">private</specifier> class <name pos:line="47" pos:column="23">ClientResourceWithBadResourceName</name> <super pos:line="47" pos:column="57">: <name pos:line="47" pos:column="59">ClientResource</name></super>
        <block pos:line="48" pos:column="9">{
            <function><type><specifier pos:line="49" pos:column="13">protected</specifier> <specifier pos:line="49" pos:column="23">override</specifier> <name pos:line="49" pos:column="32">EmbeddedResourceInfo</name></type> <name pos:line="49" pos:column="53">GetEmbeddedResourceInfo</name><parameter_list pos:line="49" pos:column="76">(<param><decl><type><name pos:line="49" pos:column="77">IResourceContext</name></type> <name pos:line="49" pos:column="94">context</name></decl></param>)</parameter_list>
            <block pos:line="50" pos:column="13">{
                <return pos:line="51" pos:column="17">return <expr><op:operator pos:line="51" pos:column="24">new</op:operator> <call><name pos:line="51" pos:column="28">EmbeddedResourceInfo</name><argument_list pos:line="51" pos:column="48">(<argument><expr><call><name><name pos:line="51" pos:column="49">this</name><op:operator pos:line="51" pos:column="53">.</op:operator><name pos:line="51" pos:column="54">GetType</name></name><argument_list pos:line="51" pos:column="61">()</argument_list></call><op:operator pos:line="51" pos:column="63">.</op:operator><name pos:line="51" pos:column="64">Assembly</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="51" pos:column="74">"wrong"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="51" pos:column="83">"Doesn't Matter"</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class>

        <function><type><attribute pos:line="55" pos:column="9">[<expr><name pos:line="55" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="56" pos:column="9">public</specifier> <name pos:line="56" pos:column="16">void</name></type> <name pos:line="56" pos:column="21">ReturnFileResourceResultWithResource</name><parameter_list pos:line="56" pos:column="57">()</parameter_list>
        <block pos:line="57" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="58" pos:column="13">var</name></type> <name pos:line="58" pos:column="17">contextMock</name> <init pos:line="58" pos:column="29">= <expr><op:operator pos:line="58" pos:column="31">new</op:operator> <call><name><name pos:line="58" pos:column="35">Mock</name><argument_list pos:line="58" pos:column="39">&lt;<argument><name pos:line="58" pos:column="40">IResourceContext</name></argument>&gt;</argument_list></name><argument_list pos:line="58" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="60" pos:column="13">var</name></type> <name pos:line="60" pos:column="17">resource</name> <init pos:line="60" pos:column="26">= <expr><op:operator pos:line="60" pos:column="28">new</op:operator> <call><name pos:line="60" pos:column="32">ClientResource</name><argument_list pos:line="60" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="62" pos:column="13">var</name></type> <name pos:line="62" pos:column="17">result</name> <init pos:line="62" pos:column="24">= <expr><call><name><name pos:line="62" pos:column="26">resource</name><op:operator pos:line="62" pos:column="34">.</op:operator><name pos:line="62" pos:column="35">Execute</name></name><argument_list pos:line="62" pos:column="42">(<argument><expr><name><name pos:line="62" pos:column="43">contextMock</name><op:operator pos:line="62" pos:column="54">.</op:operator><name pos:line="62" pos:column="55">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="64" pos:column="13">Assert</name><op:operator pos:line="64" pos:column="19">.</op:operator><name pos:line="64" pos:column="20">NotNull</name></name><argument_list pos:line="64" pos:column="27">(<argument><expr><name pos:line="64" pos:column="28">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
