<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Core\Policy\StatusCodePolicyShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Glimpse</name><op:operator pos:line="3" pos:column="14">.</op:operator><name pos:line="3" pos:column="15">Core</name><op:operator pos:line="3" pos:column="19">.</op:operator><name pos:line="3" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Core</name><op:operator pos:line="4" pos:column="19">.</op:operator><name pos:line="4" pos:column="20">Policy</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Glimpse</name><op:operator pos:line="5" pos:column="14">.</op:operator><name pos:line="5" pos:column="15">Core</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Glimpse</name><op:operator pos:line="6" pos:column="14">.</op:operator><name pos:line="6" pos:column="15">Test</name><op:operator pos:line="6" pos:column="19">.</op:operator><name pos:line="6" pos:column="20">Core</name><op:operator pos:line="6" pos:column="24">.</op:operator><name pos:line="6" pos:column="25">TestDoubles</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Glimpse</name><op:operator pos:line="7" pos:column="14">.</op:operator><name pos:line="7" pos:column="15">Test</name><op:operator pos:line="7" pos:column="19">.</op:operator><name pos:line="7" pos:column="20">Core</name><op:operator pos:line="7" pos:column="24">.</op:operator><name pos:line="7" pos:column="25">Tester</name></name>;</using>
<using pos:line="8" pos:column="1">using <name pos:line="8" pos:column="7">Moq</name>;</using>
<using pos:line="9" pos:column="1">using <name pos:line="9" pos:column="7">Xunit</name>;</using>

<namespace pos:line="11" pos:column="1">namespace <name><name pos:line="11" pos:column="11">Glimpse</name><op:operator pos:line="11" pos:column="18">.</op:operator><name pos:line="11" pos:column="19">Test</name><op:operator pos:line="11" pos:column="23">.</op:operator><name pos:line="11" pos:column="24">Core</name><op:operator pos:line="11" pos:column="28">.</op:operator><name pos:line="11" pos:column="29">Policy</name></name>
<block pos:line="12" pos:column="1">{
    <class><specifier pos:line="13" pos:column="5">public</specifier> class <name pos:line="13" pos:column="18">StatusCodePolicyShould</name><super pos:line="13" pos:column="40">:<name pos:line="13" pos:column="41">IDisposable</name></super>
    <block pos:line="14" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="15" pos:column="9">private</specifier> <name pos:line="15" pos:column="17">StatusCodePolicyTester</name></type> <name pos:line="15" pos:column="40">tester</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="16" pos:column="9">public</specifier> <name pos:line="16" pos:column="16">StatusCodePolicyTester</name></type> <name pos:line="16" pos:column="39">Policy</name>
        <block pos:line="17" pos:column="9">{
            <function><name pos:line="18" pos:column="13">get</name> <block pos:line="18" pos:column="17">{ <return pos:line="18" pos:column="19">return <expr><name pos:line="18" pos:column="26">tester</name> <op:operator pos:line="18" pos:column="33">??</op:operator> <op:operator pos:line="18" pos:column="36">(</op:operator><name pos:line="18" pos:column="37">tester</name> <op:operator pos:line="18" pos:column="44">=</op:operator> <call><name><name pos:line="18" pos:column="46">StatusCodePolicyTester</name><op:operator pos:line="18" pos:column="68">.</op:operator><name pos:line="18" pos:column="69">Create</name></name><argument_list pos:line="18" pos:column="75">()</argument_list></call><op:operator pos:line="18" pos:column="77">)</op:operator></expr>;</return> }</block></function>
            <function><name pos:line="19" pos:column="13">set</name> <block pos:line="19" pos:column="17">{ <expr_stmt><expr><name pos:line="19" pos:column="19">tester</name> <op:operator pos:line="19" pos:column="26">=</op:operator> <name pos:line="19" pos:column="28">value</name></expr>;</expr_stmt> }</block></function>
        }</block></decl></decl_stmt>


        <function><type><specifier pos:line="23" pos:column="9">public</specifier> <name pos:line="23" pos:column="16">void</name></type> <name pos:line="23" pos:column="21">Dispose</name><parameter_list pos:line="23" pos:column="28">()</parameter_list>
        <block pos:line="24" pos:column="9">{
            <expr_stmt><expr><name pos:line="25" pos:column="13">Policy</name> <op:operator pos:line="25" pos:column="20">=</op:operator> <name pos:line="25" pos:column="22">null</name></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="28" pos:column="9">[<expr><name pos:line="28" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="29" pos:column="9">public</specifier> <name pos:line="29" pos:column="16">void</name></type> <name pos:line="29" pos:column="21">ReducePolicyWithInvalidStatusCode</name><parameter_list pos:line="29" pos:column="54">()</parameter_list>
        <block pos:line="30" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="31" pos:column="13">Assert</name><op:operator pos:line="31" pos:column="19">.</op:operator><name pos:line="31" pos:column="20">Equal</name></name><argument_list pos:line="31" pos:column="25">(<argument><expr><name><name pos:line="31" pos:column="26">RuntimePolicy</name><op:operator pos:line="31" pos:column="39">.</op:operator><name pos:line="31" pos:column="40">Off</name></name></expr></argument>, <argument><expr><call><name><name pos:line="31" pos:column="45">Policy</name><op:operator pos:line="31" pos:column="51">.</op:operator><name pos:line="31" pos:column="52">Execute</name></name><argument_list pos:line="31" pos:column="59">(<argument><expr><name><name pos:line="31" pos:column="60">Policy</name><op:operator pos:line="31" pos:column="66">.</op:operator><name pos:line="31" pos:column="67">ContextMock</name><op:operator pos:line="31" pos:column="78">.</op:operator><name pos:line="31" pos:column="79">Object</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="34" pos:column="9">[<expr><name pos:line="34" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="35" pos:column="9">public</specifier> <name pos:line="35" pos:column="16">void</name></type> <name pos:line="35" pos:column="21">RetainPolicyWithValidStatusCode</name><parameter_list pos:line="35" pos:column="52">()</parameter_list>
        <block pos:line="36" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="37" pos:column="13">Policy</name><op:operator pos:line="37" pos:column="19">.</op:operator><name pos:line="37" pos:column="20">RequestMetadataMock</name><op:operator pos:line="37" pos:column="39">.</op:operator><name pos:line="37" pos:column="40">Setup</name></name><argument_list pos:line="37" pos:column="45">(<argument><expr><lambda><name pos:line="37" pos:column="46">rm</name> <op:operator pos:line="37" pos:column="49">=&gt;</op:operator> <name><name pos:line="37" pos:column="52">rm</name><op:operator pos:line="37" pos:column="54">.</op:operator><name pos:line="37" pos:column="55">ResponseStatusCode</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="37" pos:column="74">.</op:operator><call><name pos:line="37" pos:column="75">Returns</name><argument_list pos:line="37" pos:column="82">(<argument><expr><lit:literal type="number" pos:line="37" pos:column="83">200</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="39" pos:column="13">Assert</name><op:operator pos:line="39" pos:column="19">.</op:operator><name pos:line="39" pos:column="20">Equal</name></name><argument_list pos:line="39" pos:column="25">(<argument><expr><name><name pos:line="39" pos:column="26">RuntimePolicy</name><op:operator pos:line="39" pos:column="39">.</op:operator><name pos:line="39" pos:column="40">On</name></name></expr></argument>, <argument><expr><call><name><name pos:line="39" pos:column="44">Policy</name><op:operator pos:line="39" pos:column="50">.</op:operator><name pos:line="39" pos:column="51">Execute</name></name><argument_list pos:line="39" pos:column="58">(<argument><expr><name><name pos:line="39" pos:column="59">Policy</name><op:operator pos:line="39" pos:column="65">.</op:operator><name pos:line="39" pos:column="66">ContextMock</name><op:operator pos:line="39" pos:column="77">.</op:operator><name pos:line="39" pos:column="78">Object</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="42" pos:column="9">[<expr><name pos:line="42" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="43" pos:column="9">public</specifier> <name pos:line="43" pos:column="16">void</name></type> <name pos:line="43" pos:column="21">RespectConfigredStatusCodeList</name><parameter_list pos:line="43" pos:column="51">()</parameter_list>
        <block pos:line="44" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="45" pos:column="13">var</name></type> <name pos:line="45" pos:column="17">codes</name> <init pos:line="45" pos:column="23">= <expr><op:operator pos:line="45" pos:column="25">new</op:operator> <name><name pos:line="45" pos:column="29">List</name><argument_list pos:line="45" pos:column="33">&lt;<argument><name pos:line="45" pos:column="34">int</name></argument>&gt;</argument_list></name> <block pos:line="45" pos:column="39">{<expr><lit:literal type="number" pos:line="45" pos:column="40">5</lit:literal></expr>, <expr><lit:literal type="number" pos:line="45" pos:column="43">6</lit:literal></expr>, <expr><lit:literal type="number" pos:line="45" pos:column="46">7</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="47" pos:column="13">var</name></type> <name pos:line="47" pos:column="17">policy</name> <init pos:line="47" pos:column="24">= <expr><op:operator pos:line="47" pos:column="26">new</op:operator> <call><name pos:line="47" pos:column="30">StatusCodePolicy</name><argument_list pos:line="47" pos:column="46">(<argument><expr><name pos:line="47" pos:column="47">codes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <foreach pos:line="49" pos:column="13">foreach (<init><decl><type><name pos:line="49" pos:column="22">var</name></type> <name pos:line="49" pos:column="26">code</name> <range pos:line="49" pos:column="31">in <expr><name pos:line="49" pos:column="34">codes</name></expr></range></decl></init>)
            <block pos:line="50" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="51" pos:column="17">Policy</name><op:operator pos:line="51" pos:column="23">.</op:operator><name pos:line="51" pos:column="24">RequestMetadataMock</name><op:operator pos:line="51" pos:column="43">.</op:operator><name pos:line="51" pos:column="44">Setup</name></name><argument_list pos:line="51" pos:column="49">(<argument><expr><lambda><name pos:line="51" pos:column="50">rm</name> <op:operator pos:line="51" pos:column="53">=&gt;</op:operator> <name><name pos:line="51" pos:column="56">rm</name><op:operator pos:line="51" pos:column="58">.</op:operator><name pos:line="51" pos:column="59">ResponseStatusCode</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="51" pos:column="78">.</op:operator><call><name pos:line="51" pos:column="79">Returns</name><argument_list pos:line="51" pos:column="86">(<argument><expr><name pos:line="51" pos:column="87">code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name pos:line="53" pos:column="17">Assert</name><op:operator pos:line="53" pos:column="23">.</op:operator><name pos:line="53" pos:column="24">Equal</name></name><argument_list pos:line="53" pos:column="29">(<argument><expr><name><name pos:line="53" pos:column="30">RuntimePolicy</name><op:operator pos:line="53" pos:column="43">.</op:operator><name pos:line="53" pos:column="44">On</name></name></expr></argument>, <argument><expr><call><name><name pos:line="53" pos:column="48">policy</name><op:operator pos:line="53" pos:column="54">.</op:operator><name pos:line="53" pos:column="55">Execute</name></name><argument_list pos:line="53" pos:column="62">(<argument><expr><name><name pos:line="53" pos:column="63">Policy</name><op:operator pos:line="53" pos:column="69">.</op:operator><name pos:line="53" pos:column="70">ContextMock</name><op:operator pos:line="53" pos:column="81">.</op:operator><name pos:line="53" pos:column="82">Object</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>

        <function><type><attribute pos:line="57" pos:column="9">[<expr><name pos:line="57" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="58" pos:column="9">public</specifier> <name pos:line="58" pos:column="16">void</name></type> <name pos:line="58" pos:column="21">ReducePolicyOnError</name><parameter_list pos:line="58" pos:column="40">()</parameter_list>
        <block pos:line="59" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="60" pos:column="13">var</name></type> <name pos:line="60" pos:column="17">exception</name> <init pos:line="60" pos:column="27">= <expr><op:operator pos:line="60" pos:column="29">new</op:operator> <call><name pos:line="60" pos:column="33">DummyException</name><argument_list pos:line="60" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="60" pos:column="48">"I am a problem"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="62" pos:column="13">Policy</name><op:operator pos:line="62" pos:column="19">.</op:operator><name pos:line="62" pos:column="20">RequestMetadataMock</name><op:operator pos:line="62" pos:column="39">.</op:operator><name pos:line="62" pos:column="40">Setup</name></name><argument_list pos:line="62" pos:column="45">(<argument><expr><lambda><name pos:line="62" pos:column="46">r</name> <op:operator pos:line="62" pos:column="48">=&gt;</op:operator> <name><name pos:line="62" pos:column="51">r</name><op:operator pos:line="62" pos:column="52">.</op:operator><name pos:line="62" pos:column="53">ResponseStatusCode</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="62" pos:column="72">.</op:operator><call><name pos:line="62" pos:column="73">Throws</name><argument_list pos:line="62" pos:column="79">(<argument><expr><name pos:line="62" pos:column="80">exception</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="64" pos:column="13">Assert</name><op:operator pos:line="64" pos:column="19">.</op:operator><name pos:line="64" pos:column="20">Equal</name></name><argument_list pos:line="64" pos:column="25">(<argument><expr><name><name pos:line="64" pos:column="26">RuntimePolicy</name><op:operator pos:line="64" pos:column="39">.</op:operator><name pos:line="64" pos:column="40">Off</name></name></expr></argument>, <argument><expr><call><name><name pos:line="64" pos:column="45">Policy</name><op:operator pos:line="64" pos:column="51">.</op:operator><name pos:line="64" pos:column="52">Execute</name></name><argument_list pos:line="64" pos:column="59">(<argument><expr><name><name pos:line="64" pos:column="60">Policy</name><op:operator pos:line="64" pos:column="66">.</op:operator><name pos:line="64" pos:column="67">ContextMock</name><op:operator pos:line="64" pos:column="78">.</op:operator><name pos:line="64" pos:column="79">Object</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="66" pos:column="13">Policy</name><op:operator pos:line="66" pos:column="19">.</op:operator><name pos:line="66" pos:column="20">LoggerMock</name><op:operator pos:line="66" pos:column="30">.</op:operator><name pos:line="66" pos:column="31">Verify</name></name><argument_list pos:line="66" pos:column="37">(<argument><expr><lambda><name pos:line="66" pos:column="38">l</name> <op:operator pos:line="66" pos:column="40">=&gt;</op:operator> <call><name><name pos:line="66" pos:column="43">l</name><op:operator pos:line="66" pos:column="44">.</op:operator><name pos:line="66" pos:column="45">Warn</name></name><argument_list pos:line="66" pos:column="49">(<argument><expr><call><name><name pos:line="66" pos:column="50">It</name><op:operator pos:line="66" pos:column="52">.</op:operator><name><name pos:line="66" pos:column="53">IsAny</name><argument_list pos:line="66" pos:column="58">&lt;<argument><name pos:line="66" pos:column="59">string</name></argument>&gt;</argument_list></name></name><argument_list pos:line="66" pos:column="66">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="66" pos:column="70">exception</name></expr></argument>, <argument><expr><call><name><name pos:line="66" pos:column="81">It</name><op:operator pos:line="66" pos:column="83">.</op:operator><name><name pos:line="66" pos:column="84">IsAny</name><argument_list pos:line="66" pos:column="89">&lt;<argument><name><name pos:line="66" pos:column="90">object</name><index pos:line="66" pos:column="96">[]</index></name></argument>&gt;</argument_list></name></name><argument_list pos:line="66" pos:column="99">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="66" pos:column="104">Times</name><op:operator pos:line="66" pos:column="109">.</op:operator><name pos:line="66" pos:column="110">Once</name></name><argument_list pos:line="66" pos:column="114">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="69" pos:column="9">[<expr><name pos:line="69" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="70" pos:column="9">public</specifier> <name pos:line="70" pos:column="16">void</name></type> <name pos:line="70" pos:column="21">ThrowExceptionWhenConstructedWithNullParameter</name><parameter_list pos:line="70" pos:column="67">()</parameter_list>
        <block pos:line="71" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="72" pos:column="13">Assert</name><op:operator pos:line="72" pos:column="19">.</op:operator><name><name pos:line="72" pos:column="20">Throws</name><argument_list pos:line="72" pos:column="26">&lt;<argument><name pos:line="72" pos:column="27">ArgumentNullException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="72" pos:column="49">(<argument><expr><lambda><parameter_list pos:line="72" pos:column="50">()</parameter_list><op:operator pos:line="72" pos:column="52">=&gt;</op:operator><op:operator pos:line="72" pos:column="54">new</op:operator> <call><name pos:line="72" pos:column="58">StatusCodePolicy</name><argument_list pos:line="72" pos:column="74">(<argument><expr><name pos:line="72" pos:column="75">null</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="75" pos:column="9">[<expr><name pos:line="75" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="76" pos:column="9">public</specifier> <name pos:line="76" pos:column="16">void</name></type> <name pos:line="76" pos:column="21">ExecuteOnEndRequest</name><parameter_list pos:line="76" pos:column="40">()</parameter_list>
        <block pos:line="77" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="78" pos:column="13">Assert</name><op:operator pos:line="78" pos:column="19">.</op:operator><name pos:line="78" pos:column="20">Equal</name></name><argument_list pos:line="78" pos:column="25">(<argument><expr><name><name pos:line="78" pos:column="26">RuntimeEvent</name><op:operator pos:line="78" pos:column="38">.</op:operator><name pos:line="78" pos:column="39">EndRequest</name></name></expr></argument>, <argument><expr><name><name pos:line="78" pos:column="51">Policy</name><op:operator pos:line="78" pos:column="57">.</op:operator><name pos:line="78" pos:column="58">ExecuteOn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
