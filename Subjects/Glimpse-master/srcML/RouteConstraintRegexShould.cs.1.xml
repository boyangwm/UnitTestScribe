<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.AspNet\AlternateType\RouteConstraintRegexShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">System</name><op:operator pos:line="1" pos:column="13">.</op:operator><name pos:line="1" pos:column="14">Web</name><op:operator pos:line="1" pos:column="17">.</op:operator><name pos:line="1" pos:column="18">Routing</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">Glimpse</name><op:operator pos:line="2" pos:column="14">.</op:operator><name pos:line="2" pos:column="15">AspNet</name><op:operator pos:line="2" pos:column="21">.</op:operator><name pos:line="2" pos:column="22">AlternateType</name></name>;</using>
<using pos:line="3" pos:column="1">using <name pos:line="3" pos:column="7">Xunit</name>;</using>

<namespace pos:line="5" pos:column="1">namespace <name><name pos:line="5" pos:column="11">Glimpse</name><op:operator pos:line="5" pos:column="18">.</op:operator><name pos:line="5" pos:column="19">Test</name><op:operator pos:line="5" pos:column="23">.</op:operator><name pos:line="5" pos:column="24">AspNet</name><op:operator pos:line="5" pos:column="30">.</op:operator><name pos:line="5" pos:column="31">AlternateType</name></name>
<block pos:line="6" pos:column="1">{
    <class><specifier pos:line="7" pos:column="5">public</specifier> class <name pos:line="7" pos:column="18">RouteConstraintRegexShould</name>
    <block pos:line="8" pos:column="5">{
        <function><type><attribute pos:line="9" pos:column="9">[<expr><name pos:line="9" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="10" pos:column="9">public</specifier> <name pos:line="10" pos:column="16">void</name></type> <name pos:line="10" pos:column="21">MatchValue</name><parameter_list pos:line="10" pos:column="31">()</parameter_list>
        <block pos:line="11" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="12" pos:column="13">var</name></type> <name pos:line="12" pos:column="17">constraint</name> <init pos:line="12" pos:column="28">= <expr><op:operator pos:line="12" pos:column="30">new</op:operator> <call><name pos:line="12" pos:column="34">RouteConstraintRegex</name><argument_list pos:line="12" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="12" pos:column="55">"Test"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="13" pos:column="13">var</name></type> <name pos:line="13" pos:column="17">result</name> <init pos:line="13" pos:column="24">= <expr><call><name><name pos:line="13" pos:column="26">constraint</name><op:operator pos:line="13" pos:column="36">.</op:operator><name pos:line="13" pos:column="37">Match</name></name><argument_list pos:line="13" pos:column="42">(<argument><expr><name pos:line="13" pos:column="43">null</name></expr></argument>, <argument><expr><name pos:line="13" pos:column="49">null</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="13" pos:column="55">"Param"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="13" pos:column="64">new</op:operator> <name pos:line="13" pos:column="68">RouteValueDictionary</name> <block pos:line="13" pos:column="89">{ <expr><block pos:line="13" pos:column="91">{ <expr><lit:literal type="string" pos:line="13" pos:column="93">"Param"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="13" pos:column="102">"Test"</lit:literal></expr> }</block></expr>, <expr><block pos:line="13" pos:column="112">{ <expr><lit:literal type="string" pos:line="13" pos:column="114">"OtherParam"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="13" pos:column="128">"123"</lit:literal></expr> }</block></expr> }</block></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="139">RouteDirection</name><op:operator pos:line="13" pos:column="153">.</op:operator><name pos:line="13" pos:column="154">UrlGeneration</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="15" pos:column="13">Assert</name><op:operator pos:line="15" pos:column="19">.</op:operator><name pos:line="15" pos:column="20">True</name></name><argument_list pos:line="15" pos:column="24">(<argument><expr><name pos:line="15" pos:column="25">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        
        <function><type><attribute pos:line="18" pos:column="9">[<expr><name pos:line="18" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="19" pos:column="9">public</specifier> <name pos:line="19" pos:column="16">void</name></type> <name pos:line="19" pos:column="21">NotMatchValue</name><parameter_list pos:line="19" pos:column="34">()</parameter_list>
        <block pos:line="20" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="21" pos:column="13">var</name></type> <name pos:line="21" pos:column="17">constraint</name> <init pos:line="21" pos:column="28">= <expr><op:operator pos:line="21" pos:column="30">new</op:operator> <call><name pos:line="21" pos:column="34">RouteConstraintRegex</name><argument_list pos:line="21" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="21" pos:column="55">"Test"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="22" pos:column="13">var</name></type> <name pos:line="22" pos:column="17">result</name> <init pos:line="22" pos:column="24">= <expr><call><name><name pos:line="22" pos:column="26">constraint</name><op:operator pos:line="22" pos:column="36">.</op:operator><name pos:line="22" pos:column="37">Match</name></name><argument_list pos:line="22" pos:column="42">(<argument><expr><name pos:line="22" pos:column="43">null</name></expr></argument>, <argument><expr><name pos:line="22" pos:column="49">null</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="22" pos:column="55">"Param"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="22" pos:column="64">new</op:operator> <name pos:line="22" pos:column="68">RouteValueDictionary</name> <block pos:line="22" pos:column="89">{ <expr><block pos:line="22" pos:column="91">{ <expr><lit:literal type="string" pos:line="22" pos:column="93">"Param"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="22" pos:column="102">"Other"</lit:literal></expr> }</block></expr>, <expr><block pos:line="22" pos:column="113">{ <expr><lit:literal type="string" pos:line="22" pos:column="115">"OtherParam"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="22" pos:column="129">"123"</lit:literal></expr> }</block></expr> }</block></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="140">RouteDirection</name><op:operator pos:line="22" pos:column="154">.</op:operator><name pos:line="22" pos:column="155">UrlGeneration</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="24" pos:column="13">Assert</name><op:operator pos:line="24" pos:column="19">.</op:operator><name pos:line="24" pos:column="20">False</name></name><argument_list pos:line="24" pos:column="25">(<argument><expr><name pos:line="24" pos:column="26">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
