<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Common\MoqExtensions.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Linq</name><op:operator pos:line="2" pos:column="18">.</op:operator><name pos:line="2" pos:column="19">Expressions</name></name>;</using>
<using pos:line="3" pos:column="1">using <name pos:line="3" pos:column="7">Moq</name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Moq</name><op:operator pos:line="4" pos:column="10">.</op:operator><name pos:line="4" pos:column="11">Language</name><op:operator pos:line="4" pos:column="19">.</op:operator><name pos:line="4" pos:column="20">Flow</name></name>;</using>

<namespace pos:line="6" pos:column="1">namespace <name><name pos:line="6" pos:column="11">Glimpse</name><op:operator pos:line="6" pos:column="18">.</op:operator><name pos:line="6" pos:column="19">Test</name><op:operator pos:line="6" pos:column="23">.</op:operator><name pos:line="6" pos:column="24">Common</name></name>
<block pos:line="7" pos:column="1">{
    <class><specifier pos:line="8" pos:column="5">public</specifier> <specifier pos:line="8" pos:column="12">static</specifier> class <name pos:line="8" pos:column="25">MoqExtensions</name>
    <block pos:line="9" pos:column="5">{
        <function><type><specifier pos:line="10" pos:column="9">public</specifier> <specifier pos:line="10" pos:column="16">static</specifier> <name pos:line="10" pos:column="23">void</name></type> <name><name pos:line="10" pos:column="28">VerifyAll</name><argument_list pos:line="10" pos:column="37">&lt;<argument><name pos:line="10" pos:column="38">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="10" pos:column="40">(<param><decl><type><name pos:line="10" pos:column="41">this</name> <name pos:line="10" pos:column="46">T</name></type> <name pos:line="10" pos:column="48">obj</name></decl></param>)</parameter_list> <where pos:line="10" pos:column="53">where <name pos:line="10" pos:column="59">T</name> : class</where>
        <block pos:line="11" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="12" pos:column="13">Mock</name><op:operator pos:line="12" pos:column="17">.</op:operator><name pos:line="12" pos:column="18">Get</name></name><argument_list pos:line="12" pos:column="21">(<argument><expr><name pos:line="12" pos:column="22">obj</name></expr></argument>)</argument_list></call><op:operator pos:line="12" pos:column="26">.</op:operator><call><name pos:line="12" pos:column="27">VerifyAll</name><argument_list pos:line="12" pos:column="36">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="15" pos:column="9">public</specifier> <specifier pos:line="15" pos:column="16">static</specifier> <name pos:line="15" pos:column="23">void</name></type> <name><name pos:line="15" pos:column="28">Verify</name><argument_list pos:line="15" pos:column="34">&lt;<argument><name pos:line="15" pos:column="35">T</name></argument>, <argument><name pos:line="15" pos:column="38">TResult</name></argument>&gt;</argument_list></name><parameter_list pos:line="15" pos:column="46">(<param><decl><type><name pos:line="15" pos:column="47">this</name> <name pos:line="15" pos:column="52">T</name></type> <name pos:line="15" pos:column="54">obj</name></decl></param>, <param><decl><type><name><name pos:line="15" pos:column="59">Expression</name><argument_list pos:line="15" pos:column="69">&lt;<argument><name><name pos:line="15" pos:column="70">Func</name><argument_list pos:line="15" pos:column="74">&lt;<argument><name pos:line="15" pos:column="75">T</name></argument>, <argument><name pos:line="15" pos:column="78">TResult</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="15" pos:column="88">expression</name></decl></param>)</parameter_list> <where pos:line="15" pos:column="100">where <name pos:line="15" pos:column="106">T</name> : class</where>
        <block pos:line="16" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="17" pos:column="13">Mock</name><op:operator pos:line="17" pos:column="17">.</op:operator><name pos:line="17" pos:column="18">Get</name></name><argument_list pos:line="17" pos:column="21">(<argument><expr><name pos:line="17" pos:column="22">obj</name></expr></argument>)</argument_list></call><op:operator pos:line="17" pos:column="26">.</op:operator><call><name pos:line="17" pos:column="27">Verify</name><argument_list pos:line="17" pos:column="33">(<argument><expr><name pos:line="17" pos:column="34">expression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="20" pos:column="9">public</specifier> <specifier pos:line="20" pos:column="16">static</specifier> <name pos:line="20" pos:column="23">void</name></type> <name><name pos:line="20" pos:column="28">Verify</name><argument_list pos:line="20" pos:column="34">&lt;<argument><name pos:line="20" pos:column="35">T</name></argument>, <argument><name pos:line="20" pos:column="38">TResult</name></argument>&gt;</argument_list></name><parameter_list pos:line="20" pos:column="46">(<param><decl><type><name pos:line="20" pos:column="47">this</name> <name pos:line="20" pos:column="52">T</name></type> <name pos:line="20" pos:column="54">obj</name></decl></param>, <param><decl><type><name><name pos:line="20" pos:column="59">Expression</name><argument_list pos:line="20" pos:column="69">&lt;<argument><name><name pos:line="20" pos:column="70">Func</name><argument_list pos:line="20" pos:column="74">&lt;<argument><name pos:line="20" pos:column="75">T</name></argument>, <argument><name pos:line="20" pos:column="78">TResult</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="20" pos:column="88">expression</name></decl></param>, <param><decl><type><name pos:line="20" pos:column="100">Times</name></type> <name pos:line="20" pos:column="106">times</name></decl></param>)</parameter_list> <where pos:line="20" pos:column="113">where <name pos:line="20" pos:column="119">T</name> : class</where>
        <block pos:line="21" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="22" pos:column="13">Mock</name><op:operator pos:line="22" pos:column="17">.</op:operator><name pos:line="22" pos:column="18">Get</name></name><argument_list pos:line="22" pos:column="21">(<argument><expr><name pos:line="22" pos:column="22">obj</name></expr></argument>)</argument_list></call><op:operator pos:line="22" pos:column="26">.</op:operator><call><name pos:line="22" pos:column="27">Verify</name><argument_list pos:line="22" pos:column="33">(<argument><expr><name pos:line="22" pos:column="34">expression</name></expr></argument>, <argument><expr><name pos:line="22" pos:column="46">times</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="25" pos:column="9">public</specifier> <specifier pos:line="25" pos:column="16">static</specifier> <name pos:line="25" pos:column="23">void</name></type> <name><name pos:line="25" pos:column="28">Verify</name><argument_list pos:line="25" pos:column="34">&lt;<argument><name pos:line="25" pos:column="35">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="25" pos:column="37">(<param><decl><type><name pos:line="25" pos:column="38">this</name> <name pos:line="25" pos:column="43">T</name></type> <name pos:line="25" pos:column="45">obj</name></decl></param>, <param><decl><type><name><name pos:line="25" pos:column="50">Expression</name><argument_list pos:line="25" pos:column="60">&lt;<argument><name><name pos:line="25" pos:column="61">Action</name><argument_list pos:line="25" pos:column="67">&lt;<argument><name pos:line="25" pos:column="68">T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="25" pos:column="72">expression</name></decl></param>)</parameter_list> <where pos:line="25" pos:column="84">where <name pos:line="25" pos:column="90">T</name> : class</where>
        <block pos:line="26" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="27" pos:column="13">Mock</name><op:operator pos:line="27" pos:column="17">.</op:operator><name pos:line="27" pos:column="18">Get</name></name><argument_list pos:line="27" pos:column="21">(<argument><expr><name pos:line="27" pos:column="22">obj</name></expr></argument>)</argument_list></call><op:operator pos:line="27" pos:column="26">.</op:operator><call><name pos:line="27" pos:column="27">Verify</name><argument_list pos:line="27" pos:column="33">(<argument><expr><name pos:line="27" pos:column="34">expression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="30" pos:column="9">public</specifier> <specifier pos:line="30" pos:column="16">static</specifier> <name pos:line="30" pos:column="23">void</name></type> <name><name pos:line="30" pos:column="28">Verify</name><argument_list pos:line="30" pos:column="34">&lt;<argument><name pos:line="30" pos:column="35">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="30" pos:column="37">(<param><decl><type><name pos:line="30" pos:column="38">this</name> <name pos:line="30" pos:column="43">T</name></type> <name pos:line="30" pos:column="45">obj</name></decl></param>, <param><decl><type><name><name pos:line="30" pos:column="50">Expression</name><argument_list pos:line="30" pos:column="60">&lt;<argument><name><name pos:line="30" pos:column="61">Action</name><argument_list pos:line="30" pos:column="67">&lt;<argument><name pos:line="30" pos:column="68">T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="30" pos:column="72">expression</name></decl></param>, <param><decl><type><name pos:line="30" pos:column="84">Times</name></type> <name pos:line="30" pos:column="90">times</name></decl></param>)</parameter_list> <where pos:line="30" pos:column="97">where <name pos:line="30" pos:column="103">T</name> : class</where>
        <block pos:line="31" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="32" pos:column="13">Mock</name><op:operator pos:line="32" pos:column="17">.</op:operator><name pos:line="32" pos:column="18">Get</name></name><argument_list pos:line="32" pos:column="21">(<argument><expr><name pos:line="32" pos:column="22">obj</name></expr></argument>)</argument_list></call><op:operator pos:line="32" pos:column="26">.</op:operator><call><name pos:line="32" pos:column="27">Verify</name><argument_list pos:line="32" pos:column="33">(<argument><expr><name pos:line="32" pos:column="34">expression</name></expr></argument>, <argument><expr><name pos:line="32" pos:column="46">times</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="35" pos:column="9">public</specifier> <specifier pos:line="35" pos:column="16">static</specifier> <name><name pos:line="35" pos:column="23">ISetup</name><argument_list pos:line="35" pos:column="29">&lt;<argument><name pos:line="35" pos:column="30">T</name></argument>&gt;</argument_list></name></type> <name><name pos:line="35" pos:column="33">Setup</name><argument_list pos:line="35" pos:column="38">&lt;<argument><name pos:line="35" pos:column="39">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="35" pos:column="41">(<param><decl><type><name pos:line="35" pos:column="42">this</name> <name pos:line="35" pos:column="47">T</name></type> <name pos:line="35" pos:column="49">obj</name></decl></param>, <param><decl><type><name><name pos:line="35" pos:column="54">Expression</name><argument_list pos:line="35" pos:column="64">&lt;<argument><name><name pos:line="35" pos:column="65">Action</name><argument_list pos:line="35" pos:column="71">&lt;<argument><name pos:line="35" pos:column="72">T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="35" pos:column="76">expression</name></decl></param>)</parameter_list> <where pos:line="35" pos:column="88">where <name pos:line="35" pos:column="94">T</name> : class</where>
        <block pos:line="36" pos:column="9">{
            <return pos:line="37" pos:column="13">return <expr><call><name><name pos:line="37" pos:column="20">Mock</name><op:operator pos:line="37" pos:column="24">.</op:operator><name pos:line="37" pos:column="25">Get</name></name><argument_list pos:line="37" pos:column="28">(<argument><expr><name pos:line="37" pos:column="29">obj</name></expr></argument>)</argument_list></call><op:operator pos:line="37" pos:column="33">.</op:operator><call><name pos:line="37" pos:column="34">Setup</name><argument_list pos:line="37" pos:column="39">(<argument><expr><name pos:line="37" pos:column="40">expression</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="40" pos:column="9">public</specifier> <specifier pos:line="40" pos:column="16">static</specifier> <name><name pos:line="40" pos:column="23">ISetup</name><argument_list pos:line="40" pos:column="29">&lt;<argument><name pos:line="40" pos:column="30">T</name></argument>, <argument><name pos:line="40" pos:column="33">TResult</name></argument>&gt;</argument_list></name></type> <name><name pos:line="40" pos:column="42">Setup</name><argument_list pos:line="40" pos:column="47">&lt;<argument><name pos:line="40" pos:column="48">T</name></argument>, <argument><name pos:line="40" pos:column="51">TResult</name></argument>&gt;</argument_list></name><parameter_list pos:line="40" pos:column="59">(<param><decl><type><name pos:line="40" pos:column="60">this</name> <name pos:line="40" pos:column="65">T</name></type> <name pos:line="40" pos:column="67">obj</name></decl></param>, <param><decl><type><name><name pos:line="40" pos:column="72">Expression</name><argument_list pos:line="40" pos:column="82">&lt;<argument><name><name pos:line="40" pos:column="83">Func</name><argument_list pos:line="40" pos:column="87">&lt;<argument><name pos:line="40" pos:column="88">T</name></argument>, <argument><name pos:line="40" pos:column="91">TResult</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="40" pos:column="101">expression</name></decl></param>)</parameter_list> <where pos:line="40" pos:column="113">where <name pos:line="40" pos:column="119">T</name> : class</where>
        <block pos:line="41" pos:column="9">{
            <return pos:line="42" pos:column="13">return <expr><call><name><name pos:line="42" pos:column="20">Mock</name><op:operator pos:line="42" pos:column="24">.</op:operator><name pos:line="42" pos:column="25">Get</name></name><argument_list pos:line="42" pos:column="28">(<argument><expr><name pos:line="42" pos:column="29">obj</name></expr></argument>)</argument_list></call><op:operator pos:line="42" pos:column="33">.</op:operator><call><name pos:line="42" pos:column="34">Setup</name><argument_list pos:line="42" pos:column="39">(<argument><expr><name pos:line="42" pos:column="40">expression</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="45" pos:column="9">public</specifier> <specifier pos:line="45" pos:column="16">static</specifier> <name pos:line="45" pos:column="23">void</name></type> <name><name pos:line="45" pos:column="28">VerifySet</name><argument_list pos:line="45" pos:column="37">&lt;<argument><name pos:line="45" pos:column="38">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="45" pos:column="40">(<param><decl><type><name pos:line="45" pos:column="41">this</name> <name pos:line="45" pos:column="46">T</name></type> <name pos:line="45" pos:column="48">obj</name></decl></param>, <param><decl><type><name><name pos:line="45" pos:column="53">Action</name><argument_list pos:line="45" pos:column="59">&lt;<argument><name pos:line="45" pos:column="60">T</name></argument>&gt;</argument_list></name></type> <name pos:line="45" pos:column="63">expression</name></decl></param>)</parameter_list> <where pos:line="45" pos:column="75">where <name pos:line="45" pos:column="81">T</name> : class</where>
        <block pos:line="46" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="47" pos:column="13">Mock</name><op:operator pos:line="47" pos:column="17">.</op:operator><name pos:line="47" pos:column="18">Get</name></name><argument_list pos:line="47" pos:column="21">(<argument><expr><name pos:line="47" pos:column="22">obj</name></expr></argument>)</argument_list></call><op:operator pos:line="47" pos:column="26">.</op:operator><call><name pos:line="47" pos:column="27">VerifySet</name><argument_list pos:line="47" pos:column="36">(<argument><expr><name pos:line="47" pos:column="37">expression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
