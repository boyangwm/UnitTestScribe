<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Ado\Tab\Support\CommandSanitizer.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">System</name><op:operator pos:line="1" pos:column="13">.</op:operator><name pos:line="1" pos:column="14">Collections</name><op:operator pos:line="1" pos:column="25">.</op:operator><name pos:line="1" pos:column="26">Generic</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">Glimpse</name><op:operator pos:line="2" pos:column="14">.</op:operator><name pos:line="2" pos:column="15">Ado</name><op:operator pos:line="2" pos:column="18">.</op:operator><name pos:line="2" pos:column="19">Extensibility</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Glimpse</name><op:operator pos:line="3" pos:column="14">.</op:operator><name pos:line="3" pos:column="15">Ado</name><op:operator pos:line="3" pos:column="18">.</op:operator><name pos:line="3" pos:column="19">Model</name></name>;</using>

<namespace pos:line="5" pos:column="1">namespace <name><name pos:line="5" pos:column="11">Glimpse</name><op:operator pos:line="5" pos:column="18">.</op:operator><name pos:line="5" pos:column="19">Ado</name><op:operator pos:line="5" pos:column="22">.</op:operator><name pos:line="5" pos:column="23">Tab</name><op:operator pos:line="5" pos:column="26">.</op:operator><name pos:line="5" pos:column="27">Support</name></name>
<block pos:line="6" pos:column="1">{
    <class><specifier pos:line="7" pos:column="5">internal</specifier> class <name pos:line="7" pos:column="20">CommandSanitizer</name>
    <block pos:line="8" pos:column="5">{
        <constructor><specifier pos:line="9" pos:column="9">public</specifier> <name pos:line="9" pos:column="16">CommandSanitizer</name><parameter_list pos:line="9" pos:column="32">()</parameter_list>
        <block pos:line="10" pos:column="9">{
            <expr_stmt><expr><name pos:line="11" pos:column="13">Parsers</name> <op:operator pos:line="11" pos:column="21">=</op:operator> <op:operator pos:line="11" pos:column="23">new</op:operator> <call><name><name pos:line="11" pos:column="27">Dictionary</name><argument_list pos:line="11" pos:column="37">&lt;<argument><name pos:line="11" pos:column="38">string</name></argument>, <argument><name pos:line="11" pos:column="46">ICommandParameterParser</name></argument>&gt;</argument_list></name><argument_list pos:line="11" pos:column="70">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="12" pos:column="13">PopulateParsers</name><argument_list pos:line="12" pos:column="28">()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <decl_stmt><decl><type><specifier pos:line="15" pos:column="9">private</specifier> <name><name pos:line="15" pos:column="17">IDictionary</name><argument_list pos:line="15" pos:column="28">&lt;<argument><name pos:line="15" pos:column="29">string</name></argument>, <argument><name pos:line="15" pos:column="37">ICommandParameterParser</name></argument>&gt;</argument_list></name></type> <name pos:line="15" pos:column="62">Parsers</name> <block pos:line="15" pos:column="70">{ <function_decl><name pos:line="15" pos:column="72">get</name>;</function_decl> <function_decl><name pos:line="15" pos:column="77">set</name>;</function_decl> }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="17" pos:column="9">private</specifier> <name pos:line="17" pos:column="17">ICommandParameterParser</name></type> <name pos:line="17" pos:column="41">DefaultParser</name> <block pos:line="17" pos:column="55">{ <function_decl><name pos:line="17" pos:column="57">get</name>;</function_decl> <function_decl><name pos:line="17" pos:column="62">set</name>;</function_decl> }</block></decl></decl_stmt>

        <function><type><specifier pos:line="19" pos:column="9">public</specifier> <name pos:line="19" pos:column="16">string</name></type> <name pos:line="19" pos:column="23">Process</name><parameter_list pos:line="19" pos:column="30">(<param><decl><type><name pos:line="19" pos:column="31">string</name></type> <name pos:line="19" pos:column="38">command</name></decl></param>, <param><decl><type><name><name pos:line="19" pos:column="47">IList</name><argument_list pos:line="19" pos:column="52">&lt;<argument><name pos:line="19" pos:column="53">CommandParameterMetadata</name></argument>&gt;</argument_list></name></type> <name pos:line="19" pos:column="79">parameters</name></decl></param>)</parameter_list>
        <block pos:line="20" pos:column="9">{
            <foreach pos:line="21" pos:column="13">foreach (<init><decl><type><name pos:line="21" pos:column="22">var</name></type> <name pos:line="21" pos:column="26">parameter</name> <range pos:line="21" pos:column="36">in <expr><name pos:line="21" pos:column="39">parameters</name></expr></range></decl></init>)
            <block pos:line="22" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="23" pos:column="17">ICommandParameterParser</name></type> <name pos:line="23" pos:column="41">parser</name></decl>;</decl_stmt>
                <if pos:line="24" pos:column="17">if <condition pos:line="24" pos:column="20">(<expr><op:operator pos:line="24" pos:column="21">!</op:operator><call><name><name pos:line="24" pos:column="22">Parsers</name><op:operator pos:line="24" pos:column="29">.</op:operator><name pos:line="24" pos:column="30">TryGetValue</name></name><argument_list pos:line="24" pos:column="41">(<argument><expr><name><name pos:line="24" pos:column="42">parameter</name><op:operator pos:line="24" pos:column="51">.</op:operator><name pos:line="24" pos:column="52">Type</name></name></expr></argument>, <argument><expr pos:line="24" pos:column="58">out <name pos:line="24" pos:column="62">parser</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="24" pos:column="70">
                <block pos:line="25" pos:column="17">{
                    <expr_stmt><expr><name pos:line="26" pos:column="21">parser</name> <op:operator pos:line="26" pos:column="28">=</op:operator> <name pos:line="26" pos:column="30">DefaultParser</name></expr>;</expr_stmt>
                }</block></then></if>

                <expr_stmt><expr><name pos:line="29" pos:column="17">command</name> <op:operator pos:line="29" pos:column="25">=</op:operator> <call><name><name pos:line="29" pos:column="27">parser</name><op:operator pos:line="29" pos:column="33">.</op:operator><name pos:line="29" pos:column="34">Parse</name></name><argument_list pos:line="29" pos:column="39">(<argument><expr><name pos:line="29" pos:column="40">command</name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="49">parameter</name><op:operator pos:line="29" pos:column="58">.</op:operator><name pos:line="29" pos:column="59">Name</name></name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="65">parameter</name><op:operator pos:line="29" pos:column="74">.</op:operator><name pos:line="29" pos:column="75">Value</name></name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="82">parameter</name><op:operator pos:line="29" pos:column="91">.</op:operator><name pos:line="29" pos:column="92">Type</name></name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="98">parameter</name><op:operator pos:line="29" pos:column="107">.</op:operator><name pos:line="29" pos:column="108">Size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>

            <return pos:line="32" pos:column="13">return <expr><name pos:line="32" pos:column="20">command</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="35" pos:column="9">private</specifier> <name pos:line="35" pos:column="17">void</name></type> <name pos:line="35" pos:column="22">PopulateParsers</name><parameter_list pos:line="35" pos:column="37">()</parameter_list>
        <block pos:line="36" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="37" pos:column="13">var</name></type> <name pos:line="37" pos:column="17">quoted</name> <init pos:line="37" pos:column="24">= <expr><op:operator pos:line="37" pos:column="26">new</op:operator> <call><name pos:line="37" pos:column="30">CommandParameterParser</name><argument_list pos:line="37" pos:column="52">(<argument><expr><lit:literal type="boolean" pos:line="37" pos:column="53">true</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="38" pos:column="13">var</name></type> <name pos:line="38" pos:column="17">unquoted</name> <init pos:line="38" pos:column="26">= <expr><op:operator pos:line="38" pos:column="28">new</op:operator> <call><name pos:line="38" pos:column="32">CommandParameterParser</name><argument_list pos:line="38" pos:column="54">(<argument><expr><lit:literal type="boolean" pos:line="38" pos:column="55">false</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name pos:line="40" pos:column="13">DefaultParser</name> <op:operator pos:line="40" pos:column="27">=</op:operator> <name pos:line="40" pos:column="29">unquoted</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="41" pos:column="13">Parsers</name><op:operator pos:line="41" pos:column="20">.</op:operator><name pos:line="41" pos:column="21">Add</name></name><argument_list pos:line="41" pos:column="24">(<argument><expr><lit:literal type="string" pos:line="41" pos:column="25">"String"</lit:literal></expr></argument>, <argument><expr><name pos:line="41" pos:column="35">quoted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="42" pos:column="13">Parsers</name><op:operator pos:line="42" pos:column="20">.</op:operator><name pos:line="42" pos:column="21">Add</name></name><argument_list pos:line="42" pos:column="24">(<argument><expr><lit:literal type="string" pos:line="42" pos:column="25">"AnsiString"</lit:literal></expr></argument>, <argument><expr><name pos:line="42" pos:column="39">quoted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
