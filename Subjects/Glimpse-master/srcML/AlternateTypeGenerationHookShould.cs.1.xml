<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Core\Extensibility\AlternateTypeGenerationHookShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Core</name><op:operator pos:line="4" pos:column="19">.</op:operator><name pos:line="4" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="5" pos:column="1">using <name pos:line="5" pos:column="7">Moq</name>;</using>
<using pos:line="6" pos:column="1">using <name pos:line="6" pos:column="7">Xunit</name>;</using>

<namespace pos:line="8" pos:column="1">namespace <name><name pos:line="8" pos:column="11">Glimpse</name><op:operator pos:line="8" pos:column="18">.</op:operator><name pos:line="8" pos:column="19">Test</name><op:operator pos:line="8" pos:column="23">.</op:operator><name pos:line="8" pos:column="24">Core</name><op:operator pos:line="8" pos:column="28">.</op:operator><name pos:line="8" pos:column="29">Extensibility</name></name>
<block pos:line="9" pos:column="1">{
    <class><specifier pos:line="10" pos:column="5">public</specifier> class <name pos:line="10" pos:column="18">AlternateTypeGenerationHookShould</name>
    <block pos:line="11" pos:column="5">{
        <function><type><attribute pos:line="12" pos:column="9">[<expr><name pos:line="12" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="13" pos:column="9">public</specifier> <name pos:line="13" pos:column="16">void</name></type> <name pos:line="13" pos:column="21">ConstructWithParameters</name><parameter_list pos:line="13" pos:column="44">()</parameter_list>
        <block pos:line="14" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="15" pos:column="13">var</name></type> <name pos:line="15" pos:column="17">alternateImplementations</name> <init pos:line="15" pos:column="42">= <expr><call><name><name pos:line="15" pos:column="44">Enumerable</name><op:operator pos:line="15" pos:column="54">.</op:operator><name><name pos:line="15" pos:column="55">Empty</name><argument_list pos:line="15" pos:column="60">&lt;<argument><name pos:line="15" pos:column="61">IAlternateMethod</name></argument>&gt;</argument_list></name></name><argument_list pos:line="15" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="16" pos:column="13">var</name></type> <name pos:line="16" pos:column="17">loggerMock</name> <init pos:line="16" pos:column="28">= <expr><op:operator pos:line="16" pos:column="30">new</op:operator> <call><name><name pos:line="16" pos:column="34">Mock</name><argument_list pos:line="16" pos:column="38">&lt;<argument><name pos:line="16" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="16" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="18" pos:column="13">var</name></type> <name pos:line="18" pos:column="17">hook</name> <init pos:line="18" pos:column="22">= <expr><op:operator pos:line="18" pos:column="24">new</op:operator> <call><name><name pos:line="18" pos:column="28">AlternateTypeGenerationHook</name><argument_list pos:line="18" pos:column="55">&lt;<argument><name pos:line="18" pos:column="56">ITab</name></argument>&gt;</argument_list></name><argument_list pos:line="18" pos:column="61">(<argument><expr><name pos:line="18" pos:column="62">alternateImplementations</name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="88">loggerMock</name><op:operator pos:line="18" pos:column="98">.</op:operator><name pos:line="18" pos:column="99">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="20" pos:column="13">Assert</name><op:operator pos:line="20" pos:column="19">.</op:operator><name pos:line="20" pos:column="20">Equal</name></name><argument_list pos:line="20" pos:column="25">(<argument><expr><name pos:line="20" pos:column="26">alternateImplementations</name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="52">hook</name><op:operator pos:line="20" pos:column="56">.</op:operator><name pos:line="20" pos:column="57">MethodImplementations</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="21" pos:column="13">Assert</name><op:operator pos:line="21" pos:column="19">.</op:operator><name pos:line="21" pos:column="20">Equal</name></name><argument_list pos:line="21" pos:column="25">(<argument><expr><name><name pos:line="21" pos:column="26">loggerMock</name><op:operator pos:line="21" pos:column="36">.</op:operator><name pos:line="21" pos:column="37">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="45">hook</name><op:operator pos:line="21" pos:column="49">.</op:operator><name pos:line="21" pos:column="50">Logger</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="24" pos:column="9">[<expr><name pos:line="24" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="25" pos:column="9">public</specifier> <name pos:line="25" pos:column="16">void</name></type> <name pos:line="25" pos:column="21">ThrowWithNullMethodImplementationsParameter</name><parameter_list pos:line="25" pos:column="64">()</parameter_list>
        <block pos:line="26" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="27" pos:column="13">var</name></type> <name pos:line="27" pos:column="17">loggerMock</name> <init pos:line="27" pos:column="28">= <expr><op:operator pos:line="27" pos:column="30">new</op:operator> <call><name><name pos:line="27" pos:column="34">Mock</name><argument_list pos:line="27" pos:column="38">&lt;<argument><name pos:line="27" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="27" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="29" pos:column="13">Assert</name><op:operator pos:line="29" pos:column="19">.</op:operator><name><name pos:line="29" pos:column="20">Throws</name><argument_list pos:line="29" pos:column="26">&lt;<argument><name pos:line="29" pos:column="27">ArgumentNullException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="29" pos:column="49">(<argument><expr><lambda><parameter_list pos:line="29" pos:column="50">()</parameter_list> <op:operator pos:line="29" pos:column="53">=&gt;</op:operator> <op:operator pos:line="29" pos:column="56">new</op:operator> <call><name><name pos:line="29" pos:column="60">AlternateTypeGenerationHook</name><argument_list pos:line="29" pos:column="87">&lt;<argument><name pos:line="29" pos:column="88">ITab</name></argument>&gt;</argument_list></name><argument_list pos:line="29" pos:column="93">(<argument><expr><name pos:line="29" pos:column="94">null</name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="100">loggerMock</name><op:operator pos:line="29" pos:column="110">.</op:operator><name pos:line="29" pos:column="111">Object</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="32" pos:column="9">[<expr><name pos:line="32" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="33" pos:column="9">public</specifier> <name pos:line="33" pos:column="16">void</name></type> <name pos:line="33" pos:column="21">ThrowWithNullLoggerParameter</name><parameter_list pos:line="33" pos:column="49">()</parameter_list>
        <block pos:line="34" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="35" pos:column="13">var</name></type> <name pos:line="35" pos:column="17">alternateImplementations</name> <init pos:line="35" pos:column="42">= <expr><call><name><name pos:line="35" pos:column="44">Enumerable</name><op:operator pos:line="35" pos:column="54">.</op:operator><name><name pos:line="35" pos:column="55">Empty</name><argument_list pos:line="35" pos:column="60">&lt;<argument><name pos:line="35" pos:column="61">IAlternateMethod</name></argument>&gt;</argument_list></name></name><argument_list pos:line="35" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="37" pos:column="13">Assert</name><op:operator pos:line="37" pos:column="19">.</op:operator><name><name pos:line="37" pos:column="20">Throws</name><argument_list pos:line="37" pos:column="26">&lt;<argument><name pos:line="37" pos:column="27">ArgumentNullException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="37" pos:column="49">(<argument><expr><lambda><parameter_list pos:line="37" pos:column="50">()</parameter_list> <op:operator pos:line="37" pos:column="53">=&gt;</op:operator> <op:operator pos:line="37" pos:column="56">new</op:operator> <call><name><name pos:line="37" pos:column="60">AlternateTypeGenerationHook</name><argument_list pos:line="37" pos:column="87">&lt;<argument><name pos:line="37" pos:column="88">ITab</name></argument>&gt;</argument_list></name><argument_list pos:line="37" pos:column="93">(<argument><expr><name pos:line="37" pos:column="94">alternateImplementations</name></expr></argument>, <argument><expr><name pos:line="37" pos:column="120">null</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="40" pos:column="9">[<expr><name pos:line="40" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="41" pos:column="9">public</specifier> <name pos:line="41" pos:column="16">void</name></type> <name pos:line="41" pos:column="21">LogWhenMethodsInspected</name><parameter_list pos:line="41" pos:column="44">()</parameter_list>
        <block pos:line="42" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="43" pos:column="13">var</name></type> <name pos:line="43" pos:column="17">alternateImplementations</name> <init pos:line="43" pos:column="42">= <expr><call><name><name pos:line="43" pos:column="44">Enumerable</name><op:operator pos:line="43" pos:column="54">.</op:operator><name><name pos:line="43" pos:column="55">Empty</name><argument_list pos:line="43" pos:column="60">&lt;<argument><name pos:line="43" pos:column="61">IAlternateMethod</name></argument>&gt;</argument_list></name></name><argument_list pos:line="43" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="44" pos:column="13">var</name></type> <name pos:line="44" pos:column="17">loggerMock</name> <init pos:line="44" pos:column="28">= <expr><op:operator pos:line="44" pos:column="30">new</op:operator> <call><name><name pos:line="44" pos:column="34">Mock</name><argument_list pos:line="44" pos:column="38">&lt;<argument><name pos:line="44" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="44" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="46" pos:column="13">var</name></type> <name pos:line="46" pos:column="17">hook</name> <init pos:line="46" pos:column="22">= <expr><op:operator pos:line="46" pos:column="24">new</op:operator> <call><name><name pos:line="46" pos:column="28">AlternateTypeGenerationHook</name><argument_list pos:line="46" pos:column="55">&lt;<argument><name pos:line="46" pos:column="56">ITab</name></argument>&gt;</argument_list></name><argument_list pos:line="46" pos:column="61">(<argument><expr><name pos:line="46" pos:column="62">alternateImplementations</name></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="88">loggerMock</name><op:operator pos:line="46" pos:column="98">.</op:operator><name pos:line="46" pos:column="99">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="48" pos:column="13">hook</name><op:operator pos:line="48" pos:column="17">.</op:operator><name pos:line="48" pos:column="18">MethodsInspected</name></name><argument_list pos:line="48" pos:column="34">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="50" pos:column="13">loggerMock</name><op:operator pos:line="50" pos:column="23">.</op:operator><name pos:line="50" pos:column="24">Verify</name></name><argument_list pos:line="50" pos:column="30">(<argument><expr><lambda><name pos:line="50" pos:column="31">l</name><op:operator pos:line="50" pos:column="32">=&gt;</op:operator><call><name><name pos:line="50" pos:column="34">l</name><op:operator pos:line="50" pos:column="35">.</op:operator><name pos:line="50" pos:column="36">Debug</name></name><argument_list pos:line="50" pos:column="41">(<argument><expr><call><name><name pos:line="50" pos:column="42">It</name><op:operator pos:line="50" pos:column="44">.</op:operator><name><name pos:line="50" pos:column="45">IsAny</name><argument_list pos:line="50" pos:column="50">&lt;<argument><name pos:line="50" pos:column="51">string</name></argument>&gt;</argument_list></name></name><argument_list pos:line="50" pos:column="58">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="50" pos:column="62">It</name><op:operator pos:line="50" pos:column="64">.</op:operator><name><name pos:line="50" pos:column="65">IsAny</name><argument_list pos:line="50" pos:column="70">&lt;<argument><name pos:line="50" pos:column="71">Type</name></argument>&gt;</argument_list></name></name><argument_list pos:line="50" pos:column="76">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="50" pos:column="81">Times</name><op:operator pos:line="50" pos:column="86">.</op:operator><name pos:line="50" pos:column="87">Once</name></name><argument_list pos:line="50" pos:column="91">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="53" pos:column="9">[<expr><name pos:line="53" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="54" pos:column="9">public</specifier> <name pos:line="54" pos:column="16">void</name></type> <name pos:line="54" pos:column="21">LogWhenNonProxableMemberNotification</name><parameter_list pos:line="54" pos:column="57">()</parameter_list>
        <block pos:line="55" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="56" pos:column="13">var</name></type> <name pos:line="56" pos:column="17">alternateImplementations</name> <init pos:line="56" pos:column="42">= <expr><call><name><name pos:line="56" pos:column="44">Enumerable</name><op:operator pos:line="56" pos:column="54">.</op:operator><name><name pos:line="56" pos:column="55">Empty</name><argument_list pos:line="56" pos:column="60">&lt;<argument><name pos:line="56" pos:column="61">IAlternateMethod</name></argument>&gt;</argument_list></name></name><argument_list pos:line="56" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="57" pos:column="13">var</name></type> <name pos:line="57" pos:column="17">loggerMock</name> <init pos:line="57" pos:column="28">= <expr><op:operator pos:line="57" pos:column="30">new</op:operator> <call><name><name pos:line="57" pos:column="34">Mock</name><argument_list pos:line="57" pos:column="38">&lt;<argument><name pos:line="57" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="57" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="59" pos:column="13">var</name></type> <name pos:line="59" pos:column="17">hook</name> <init pos:line="59" pos:column="22">= <expr><op:operator pos:line="59" pos:column="24">new</op:operator> <call><name><name pos:line="59" pos:column="28">AlternateTypeGenerationHook</name><argument_list pos:line="59" pos:column="55">&lt;<argument><name pos:line="59" pos:column="56">ITab</name></argument>&gt;</argument_list></name><argument_list pos:line="59" pos:column="61">(<argument><expr><name pos:line="59" pos:column="62">alternateImplementations</name></expr></argument>, <argument><expr><name><name pos:line="59" pos:column="88">loggerMock</name><op:operator pos:line="59" pos:column="98">.</op:operator><name pos:line="59" pos:column="99">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="61" pos:column="13">var</name></type> <name pos:line="61" pos:column="17">type</name> <init pos:line="61" pos:column="22">= <expr><call><name pos:line="61" pos:column="24">typeof</name> <argument_list pos:line="61" pos:column="31">(<argument><expr><name pos:line="61" pos:column="32">AlternateTypeGenerationHookShould</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="62" pos:column="13">var</name></type> <name pos:line="62" pos:column="17">memberInfo</name> <init pos:line="62" pos:column="28">= <expr><call><name><name pos:line="62" pos:column="30">type</name><op:operator pos:line="62" pos:column="34">.</op:operator><name pos:line="62" pos:column="35">GetMember</name></name><argument_list pos:line="62" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="62" pos:column="45">"LogWhenNonProxableMemberNotification"</lit:literal></expr></argument>)</argument_list></call><index pos:line="62" pos:column="84">[<expr><lit:literal type="number" pos:line="62" pos:column="85">0</lit:literal></expr>]</index></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="64" pos:column="13">hook</name><op:operator pos:line="64" pos:column="17">.</op:operator><name pos:line="64" pos:column="18">NonProxyableMemberNotification</name></name><argument_list pos:line="64" pos:column="48">(<argument><expr><name pos:line="64" pos:column="49">type</name></expr></argument>, <argument><expr><name pos:line="64" pos:column="55">memberInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="66" pos:column="13">loggerMock</name><op:operator pos:line="66" pos:column="23">.</op:operator><name pos:line="66" pos:column="24">Verify</name></name><argument_list pos:line="66" pos:column="30">(<argument><expr><lambda><name pos:line="66" pos:column="31">l</name> <op:operator pos:line="66" pos:column="33">=&gt;</op:operator> <call><name><name pos:line="66" pos:column="36">l</name><op:operator pos:line="66" pos:column="37">.</op:operator><name pos:line="66" pos:column="38">Debug</name></name><argument_list pos:line="66" pos:column="43">(<argument><expr><call><name><name pos:line="66" pos:column="44">It</name><op:operator pos:line="66" pos:column="46">.</op:operator><name><name pos:line="66" pos:column="47">IsAny</name><argument_list pos:line="66" pos:column="52">&lt;<argument><name pos:line="66" pos:column="53">string</name></argument>&gt;</argument_list></name></name><argument_list pos:line="66" pos:column="60">()</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="66" pos:column="64">memberInfo</name><op:operator pos:line="66" pos:column="74">.</op:operator><name pos:line="66" pos:column="75">Name</name></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="81">type</name></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="66" pos:column="88">Times</name><op:operator pos:line="66" pos:column="93">.</op:operator><name pos:line="66" pos:column="94">Once</name></name><argument_list pos:line="66" pos:column="98">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="69" pos:column="9">[<expr><name pos:line="69" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="70" pos:column="9">public</specifier> <name pos:line="70" pos:column="16">void</name></type> <name pos:line="70" pos:column="21">CanInterceptMethods</name><parameter_list pos:line="70" pos:column="40">()</parameter_list>
        <block pos:line="71" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="72" pos:column="13">var</name></type> <name pos:line="72" pos:column="17">type</name> <init pos:line="72" pos:column="22">= <expr><call><name pos:line="72" pos:column="24">typeof</name> <argument_list pos:line="72" pos:column="31">(<argument><expr><name pos:line="72" pos:column="32">AlternateTypeGenerationHookShould</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="73" pos:column="13">var</name></type> <name pos:line="73" pos:column="17">methodInfo</name> <init pos:line="73" pos:column="28">= <expr><call><name><name pos:line="73" pos:column="30">type</name><op:operator pos:line="73" pos:column="34">.</op:operator><name pos:line="73" pos:column="35">GetMethod</name></name><argument_list pos:line="73" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="73" pos:column="45">"CanInterceptMethods"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="74" pos:column="13">var</name></type> <name pos:line="74" pos:column="17">implementationMock</name> <init pos:line="74" pos:column="36">= <expr><op:operator pos:line="74" pos:column="38">new</op:operator> <call><name><name pos:line="74" pos:column="42">Mock</name><argument_list pos:line="74" pos:column="46">&lt;<argument><name pos:line="74" pos:column="47">IAlternateMethod</name></argument>&gt;</argument_list></name><argument_list pos:line="74" pos:column="64">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="75" pos:column="13">implementationMock</name><op:operator pos:line="75" pos:column="31">.</op:operator><name pos:line="75" pos:column="32">Setup</name></name><argument_list pos:line="75" pos:column="37">(<argument><expr><lambda><name pos:line="75" pos:column="38">i</name> <op:operator pos:line="75" pos:column="40">=&gt;</op:operator> <name><name pos:line="75" pos:column="43">i</name><op:operator pos:line="75" pos:column="44">.</op:operator><name pos:line="75" pos:column="45">MethodToImplement</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="75" pos:column="63">.</op:operator><call><name pos:line="75" pos:column="64">Returns</name><argument_list pos:line="75" pos:column="71">(<argument><expr><name pos:line="75" pos:column="72">methodInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="77" pos:column="13">var</name></type> <name pos:line="77" pos:column="17">alternateImplementations</name> <init pos:line="77" pos:column="42">= <expr><op:operator pos:line="77" pos:column="44">new</op:operator> <call><name><name pos:line="77" pos:column="48">List</name><argument_list pos:line="77" pos:column="52">&lt;<argument><name pos:line="77" pos:column="53">IAlternateMethod</name></argument>&gt;</argument_list></name><argument_list pos:line="77" pos:column="70">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="78" pos:column="13">alternateImplementations</name><op:operator pos:line="78" pos:column="37">.</op:operator><name pos:line="78" pos:column="38">Add</name></name><argument_list pos:line="78" pos:column="41">(<argument><expr><name><name pos:line="78" pos:column="42">implementationMock</name><op:operator pos:line="78" pos:column="60">.</op:operator><name pos:line="78" pos:column="61">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <decl_stmt><decl><type><name pos:line="80" pos:column="13">var</name></type> <name pos:line="80" pos:column="17">loggerMock</name> <init pos:line="80" pos:column="28">= <expr><op:operator pos:line="80" pos:column="30">new</op:operator> <call><name><name pos:line="80" pos:column="34">Mock</name><argument_list pos:line="80" pos:column="38">&lt;<argument><name pos:line="80" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="80" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="82" pos:column="13">var</name></type> <name pos:line="82" pos:column="17">hook</name> <init pos:line="82" pos:column="22">= <expr><op:operator pos:line="82" pos:column="24">new</op:operator> <call><name><name pos:line="82" pos:column="28">AlternateTypeGenerationHook</name><argument_list pos:line="82" pos:column="55">&lt;<argument><name pos:line="82" pos:column="56">ITab</name></argument>&gt;</argument_list></name><argument_list pos:line="82" pos:column="61">(<argument><expr><name pos:line="82" pos:column="62">alternateImplementations</name></expr></argument>, <argument><expr><name><name pos:line="82" pos:column="88">loggerMock</name><op:operator pos:line="82" pos:column="98">.</op:operator><name pos:line="82" pos:column="99">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="84" pos:column="13">var</name></type> <name pos:line="84" pos:column="17">result</name> <init pos:line="84" pos:column="24">= <expr><call><name><name pos:line="84" pos:column="26">hook</name><op:operator pos:line="84" pos:column="30">.</op:operator><name pos:line="84" pos:column="31">ShouldInterceptMethod</name></name><argument_list pos:line="84" pos:column="52">(<argument><expr><name pos:line="84" pos:column="53">type</name></expr></argument>, <argument><expr><name pos:line="84" pos:column="59">methodInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="86" pos:column="13">Assert</name><op:operator pos:line="86" pos:column="19">.</op:operator><name pos:line="86" pos:column="20">True</name></name><argument_list pos:line="86" pos:column="24">(<argument><expr><name pos:line="86" pos:column="25">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="89" pos:column="9">[<expr><name pos:line="89" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="90" pos:column="9">public</specifier> <name pos:line="90" pos:column="16">void</name></type> <name pos:line="90" pos:column="21">NotInterceptMethodsWithMismatch</name><parameter_list pos:line="90" pos:column="52">()</parameter_list>
        <block pos:line="91" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="92" pos:column="13">var</name></type> <name pos:line="92" pos:column="17">type</name> <init pos:line="92" pos:column="22">= <expr><call><name pos:line="92" pos:column="24">typeof</name><argument_list pos:line="92" pos:column="30">(<argument><expr><name pos:line="92" pos:column="31">AlternateTypeGenerationHookShould</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="93" pos:column="13">var</name></type> <name pos:line="93" pos:column="17">methodInfo</name> <init pos:line="93" pos:column="28">= <expr><call><name><name pos:line="93" pos:column="30">type</name><op:operator pos:line="93" pos:column="34">.</op:operator><name pos:line="93" pos:column="35">GetMethod</name></name><argument_list pos:line="93" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="93" pos:column="45">"CanInterceptMethods"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="94" pos:column="13">var</name></type> <name pos:line="94" pos:column="17">implementationMock</name> <init pos:line="94" pos:column="36">= <expr><op:operator pos:line="94" pos:column="38">new</op:operator> <call><name><name pos:line="94" pos:column="42">Mock</name><argument_list pos:line="94" pos:column="46">&lt;<argument><name pos:line="94" pos:column="47">IAlternateMethod</name></argument>&gt;</argument_list></name><argument_list pos:line="94" pos:column="64">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="95" pos:column="13">implementationMock</name><op:operator pos:line="95" pos:column="31">.</op:operator><name pos:line="95" pos:column="32">Setup</name></name><argument_list pos:line="95" pos:column="37">(<argument><expr><lambda><name pos:line="95" pos:column="38">i</name> <op:operator pos:line="95" pos:column="40">=&gt;</op:operator> <name><name pos:line="95" pos:column="43">i</name><op:operator pos:line="95" pos:column="44">.</op:operator><name pos:line="95" pos:column="45">MethodToImplement</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="95" pos:column="63">.</op:operator><call><name pos:line="95" pos:column="64">Returns</name><argument_list pos:line="95" pos:column="71">(<argument><expr><name pos:line="95" pos:column="72">methodInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="97" pos:column="13">var</name></type> <name pos:line="97" pos:column="17">alternateImplementations</name> <init pos:line="97" pos:column="42">= <expr><op:operator pos:line="97" pos:column="44">new</op:operator> <call><name><name pos:line="97" pos:column="48">List</name><argument_list pos:line="97" pos:column="52">&lt;<argument><name pos:line="97" pos:column="53">IAlternateMethod</name></argument>&gt;</argument_list></name><argument_list pos:line="97" pos:column="70">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="98" pos:column="13">alternateImplementations</name><op:operator pos:line="98" pos:column="37">.</op:operator><name pos:line="98" pos:column="38">Add</name></name><argument_list pos:line="98" pos:column="41">(<argument><expr><name><name pos:line="98" pos:column="42">implementationMock</name><op:operator pos:line="98" pos:column="60">.</op:operator><name pos:line="98" pos:column="61">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="100" pos:column="13">var</name></type> <name pos:line="100" pos:column="17">loggerMock</name> <init pos:line="100" pos:column="28">= <expr><op:operator pos:line="100" pos:column="30">new</op:operator> <call><name><name pos:line="100" pos:column="34">Mock</name><argument_list pos:line="100" pos:column="38">&lt;<argument><name pos:line="100" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="100" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="102" pos:column="13">var</name></type> <name pos:line="102" pos:column="17">hook</name> <init pos:line="102" pos:column="22">= <expr><op:operator pos:line="102" pos:column="24">new</op:operator> <call><name><name pos:line="102" pos:column="28">AlternateTypeGenerationHook</name><argument_list pos:line="102" pos:column="55">&lt;<argument><name pos:line="102" pos:column="56">ITab</name></argument>&gt;</argument_list></name><argument_list pos:line="102" pos:column="61">(<argument><expr><name pos:line="102" pos:column="62">alternateImplementations</name></expr></argument>, <argument><expr><name><name pos:line="102" pos:column="88">loggerMock</name><op:operator pos:line="102" pos:column="98">.</op:operator><name pos:line="102" pos:column="99">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="104" pos:column="13">var</name></type> <name pos:line="104" pos:column="17">result</name> <init pos:line="104" pos:column="24">= <expr><call><name><name pos:line="104" pos:column="26">hook</name><op:operator pos:line="104" pos:column="30">.</op:operator><name pos:line="104" pos:column="31">ShouldInterceptMethod</name></name><argument_list pos:line="104" pos:column="52">(<argument><expr><name pos:line="104" pos:column="53">type</name></expr></argument>, <argument><expr><call><name><name pos:line="104" pos:column="59">type</name><op:operator pos:line="104" pos:column="63">.</op:operator><name pos:line="104" pos:column="64">GetMethod</name></name><argument_list pos:line="104" pos:column="73">(<argument><expr><lit:literal type="string" pos:line="104" pos:column="74">"NotInterceptMethodsWithMismatch"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="106" pos:column="13">Assert</name><op:operator pos:line="106" pos:column="19">.</op:operator><name pos:line="106" pos:column="20">False</name></name><argument_list pos:line="106" pos:column="25">(<argument><expr><name pos:line="106" pos:column="26">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="109" pos:column="9">[<expr><name pos:line="109" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="110" pos:column="9">public</specifier> <name pos:line="110" pos:column="16">void</name></type> <name pos:line="110" pos:column="21">ReturnNonMatchingHashCodesWithDifferentCollections</name><parameter_list pos:line="110" pos:column="71">()</parameter_list>
        <block pos:line="111" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="112" pos:column="13">var</name></type> <name pos:line="112" pos:column="17">implementationMock1</name> <init pos:line="112" pos:column="37">= <expr><op:operator pos:line="112" pos:column="39">new</op:operator> <call><name><name pos:line="112" pos:column="43">Mock</name><argument_list pos:line="112" pos:column="47">&lt;<argument><name pos:line="112" pos:column="48">IAlternateMethod</name></argument>&gt;</argument_list></name><argument_list pos:line="112" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="113" pos:column="13">var</name></type> <name pos:line="113" pos:column="17">implementationMock2</name> <init pos:line="113" pos:column="37">= <expr><op:operator pos:line="113" pos:column="39">new</op:operator> <call><name><name pos:line="113" pos:column="43">Mock</name><argument_list pos:line="113" pos:column="47">&lt;<argument><name pos:line="113" pos:column="48">IAlternateMethod</name></argument>&gt;</argument_list></name><argument_list pos:line="113" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="115" pos:column="13">var</name></type> <name pos:line="115" pos:column="17">implementations1</name> <init pos:line="115" pos:column="34">= <expr><op:operator pos:line="115" pos:column="36">new</op:operator> <name><name pos:line="115" pos:column="40">List</name><argument_list pos:line="115" pos:column="44">&lt;<argument><name pos:line="115" pos:column="45">IAlternateMethod</name></argument>&gt;</argument_list></name>
                                      <block pos:line="116" pos:column="39">{
                                          <expr><name><name pos:line="117" pos:column="43">implementationMock1</name><op:operator pos:line="117" pos:column="62">.</op:operator><name pos:line="117" pos:column="63">Object</name></name></expr>,
                                          <expr><name><name pos:line="118" pos:column="43">implementationMock2</name><op:operator pos:line="118" pos:column="62">.</op:operator><name pos:line="118" pos:column="63">Object</name></name></expr>
                                      }</block></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="121" pos:column="13">var</name></type> <name pos:line="121" pos:column="17">implementations2</name> <init pos:line="121" pos:column="34">= <expr><op:operator pos:line="121" pos:column="36">new</op:operator> <name><name pos:line="121" pos:column="40">List</name><argument_list pos:line="121" pos:column="44">&lt;<argument><name pos:line="121" pos:column="45">IAlternateMethod</name></argument>&gt;</argument_list></name> 
                                      <block pos:line="122" pos:column="39">{
                                          <expr><name><name pos:line="123" pos:column="43">implementationMock1</name><op:operator pos:line="123" pos:column="62">.</op:operator><name pos:line="123" pos:column="63">Object</name></name></expr> <comment type="line" pos:line="123" pos:column="70">//One less object</comment>
                                      }</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="125" pos:column="13">var</name></type> <name pos:line="125" pos:column="17">loggerMock</name> <init pos:line="125" pos:column="28">= <expr><op:operator pos:line="125" pos:column="30">new</op:operator> <call><name><name pos:line="125" pos:column="34">Mock</name><argument_list pos:line="125" pos:column="38">&lt;<argument><name pos:line="125" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="125" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="127" pos:column="13">var</name></type> <name pos:line="127" pos:column="17">hook1</name> <init pos:line="127" pos:column="23">= <expr><op:operator pos:line="127" pos:column="25">new</op:operator> <call><name><name pos:line="127" pos:column="29">AlternateTypeGenerationHook</name><argument_list pos:line="127" pos:column="56">&lt;<argument><name pos:line="127" pos:column="57">ITab</name></argument>&gt;</argument_list></name><argument_list pos:line="127" pos:column="62">(<argument><expr><name pos:line="127" pos:column="63">implementations1</name></expr></argument>, <argument><expr><name><name pos:line="127" pos:column="81">loggerMock</name><op:operator pos:line="127" pos:column="91">.</op:operator><name pos:line="127" pos:column="92">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="128" pos:column="13">var</name></type> <name pos:line="128" pos:column="17">hook2</name> <init pos:line="128" pos:column="23">= <expr><op:operator pos:line="128" pos:column="25">new</op:operator> <call><name><name pos:line="128" pos:column="29">AlternateTypeGenerationHook</name><argument_list pos:line="128" pos:column="56">&lt;<argument><name pos:line="128" pos:column="57">ITab</name></argument>&gt;</argument_list></name><argument_list pos:line="128" pos:column="62">(<argument><expr><name pos:line="128" pos:column="63">implementations2</name></expr></argument>, <argument><expr><name><name pos:line="128" pos:column="81">loggerMock</name><op:operator pos:line="128" pos:column="91">.</op:operator><name pos:line="128" pos:column="92">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="130" pos:column="13">Assert</name><op:operator pos:line="130" pos:column="19">.</op:operator><name pos:line="130" pos:column="20">NotEqual</name></name><argument_list pos:line="130" pos:column="28">(<argument><expr><call><name><name pos:line="130" pos:column="29">hook2</name><op:operator pos:line="130" pos:column="34">.</op:operator><name pos:line="130" pos:column="35">GetHashCode</name></name><argument_list pos:line="130" pos:column="46">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="130" pos:column="50">hook1</name><op:operator pos:line="130" pos:column="55">.</op:operator><name pos:line="130" pos:column="56">GetHashCode</name></name><argument_list pos:line="130" pos:column="67">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="131" pos:column="13">Assert</name><op:operator pos:line="131" pos:column="19">.</op:operator><name pos:line="131" pos:column="20">False</name></name><argument_list pos:line="131" pos:column="25">(<argument><expr><call><name><name pos:line="131" pos:column="26">hook2</name><op:operator pos:line="131" pos:column="31">.</op:operator><name pos:line="131" pos:column="32">Equals</name></name><argument_list pos:line="131" pos:column="38">(<argument><expr><name pos:line="131" pos:column="39">hook1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
        }</block></function>
    }</block></class>
}</block></namespace></unit>
