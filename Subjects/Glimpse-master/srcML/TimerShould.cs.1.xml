<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Core\Framework\TimerShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Diagnostics</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Threading</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Core</name><op:operator pos:line="4" pos:column="19">.</op:operator><name pos:line="4" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="5" pos:column="1">using <name pos:line="5" pos:column="7">Xunit</name>;</using>

<namespace pos:line="7" pos:column="1">namespace <name><name pos:line="7" pos:column="11">Glimpse</name><op:operator pos:line="7" pos:column="18">.</op:operator><name pos:line="7" pos:column="19">Test</name><op:operator pos:line="7" pos:column="23">.</op:operator><name pos:line="7" pos:column="24">Core</name><op:operator pos:line="7" pos:column="28">.</op:operator><name pos:line="7" pos:column="29">Framework</name></name>
<block pos:line="8" pos:column="1">{
    <class><specifier pos:line="9" pos:column="5">public</specifier> class <name pos:line="9" pos:column="18">TimerShould</name>
    <block pos:line="10" pos:column="5">{
        <function><type><attribute pos:line="11" pos:column="9">[<expr><call><name pos:line="11" pos:column="10">Fact</name><argument_list pos:line="11" pos:column="14">(<argument><expr><name pos:line="11" pos:column="15">Skip</name> <op:operator pos:line="11" pos:column="20">=</op:operator> <lit:literal type="string" pos:line="11" pos:column="22">"This test is flaky. Need to find a better way to do this..."</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="12" pos:column="9">public</specifier> <name pos:line="12" pos:column="16">void</name></type> <name pos:line="12" pos:column="21">TimeFunction</name><parameter_list pos:line="12" pos:column="33">()</parameter_list>
        <block pos:line="13" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="14" pos:column="13">var</name></type> <name pos:line="14" pos:column="17">waitTime</name> <init pos:line="14" pos:column="26">= <expr><lit:literal type="number" pos:line="14" pos:column="28">5</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="15" pos:column="13">var</name></type> <name pos:line="15" pos:column="17">timer</name> <init pos:line="15" pos:column="23">= <expr><op:operator pos:line="15" pos:column="25">new</op:operator> <call><name pos:line="15" pos:column="29">ExecutionTimer</name><argument_list pos:line="15" pos:column="43">(<argument><expr><call><name><name pos:line="15" pos:column="44">Stopwatch</name><op:operator pos:line="15" pos:column="53">.</op:operator><name pos:line="15" pos:column="54">StartNew</name></name><argument_list pos:line="15" pos:column="62">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="17" pos:column="13">var</name></type> <name pos:line="17" pos:column="17">result</name> <init pos:line="17" pos:column="24">= <expr><call><name><name pos:line="17" pos:column="26">timer</name><op:operator pos:line="17" pos:column="31">.</op:operator><name pos:line="17" pos:column="32">Time</name></name><argument_list pos:line="17" pos:column="36">(<argument><expr><lambda><parameter_list pos:line="17" pos:column="37">()</parameter_list> <op:operator pos:line="17" pos:column="40">=&gt;</op:operator> <call><name><name pos:line="17" pos:column="43">Thread</name><op:operator pos:line="17" pos:column="49">.</op:operator><name pos:line="17" pos:column="50">Sleep</name></name><argument_list pos:line="17" pos:column="55">(<argument><expr><name pos:line="17" pos:column="56">waitTime</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="19" pos:column="13">Assert</name><op:operator pos:line="19" pos:column="19">.</op:operator><name pos:line="19" pos:column="20">NotNull</name></name><argument_list pos:line="19" pos:column="27">(<argument><expr><name pos:line="19" pos:column="28">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="20" pos:column="13">var</name></type> <name pos:line="20" pos:column="17">failureMessage</name> <init pos:line="20" pos:column="32">= <expr><call><name><name pos:line="20" pos:column="34">result</name><op:operator pos:line="20" pos:column="40">.</op:operator><name pos:line="20" pos:column="41">Duration</name><op:operator pos:line="20" pos:column="49">.</op:operator><name pos:line="20" pos:column="50">ToString</name></name><argument_list pos:line="20" pos:column="58">()</argument_list></call> <op:operator pos:line="20" pos:column="61">+</op:operator> <lit:literal type="string" pos:line="20" pos:column="63">" not greater than "</lit:literal> <op:operator pos:line="20" pos:column="84">+</op:operator> <call><name><name pos:line="20" pos:column="86">waitTime</name><op:operator pos:line="20" pos:column="94">.</op:operator><name pos:line="20" pos:column="95">ToString</name></name><argument_list pos:line="20" pos:column="103">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="21" pos:column="13">Console</name><op:operator pos:line="21" pos:column="20">.</op:operator><name pos:line="21" pos:column="21">Write</name></name><argument_list pos:line="21" pos:column="26">(<argument><expr><name pos:line="21" pos:column="27">failureMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="22" pos:column="13">Assert</name><op:operator pos:line="22" pos:column="19">.</op:operator><name pos:line="22" pos:column="20">True</name></name><argument_list pos:line="22" pos:column="24">(<argument><expr><op:operator pos:line="22" pos:column="25">new</op:operator> <call><name pos:line="22" pos:column="29">DateTime</name><argument_list pos:line="22" pos:column="37">()</argument_list></call><op:operator pos:line="22" pos:column="39">.</op:operator><call><name pos:line="22" pos:column="40">AddTicks</name><argument_list pos:line="22" pos:column="48">(<argument><expr><name><name pos:line="22" pos:column="49">result</name><op:operator pos:line="22" pos:column="55">.</op:operator><name pos:line="22" pos:column="56">Duration</name><op:operator pos:line="22" pos:column="64">.</op:operator><name pos:line="22" pos:column="65">Ticks</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="22" pos:column="72">&gt;=</op:operator> <op:operator pos:line="22" pos:column="75">new</op:operator> <call><name pos:line="22" pos:column="79">DateTime</name><argument_list pos:line="22" pos:column="87">()</argument_list></call><op:operator pos:line="22" pos:column="89">.</op:operator><call><name pos:line="22" pos:column="90">AddTicks</name><argument_list pos:line="22" pos:column="98">(<argument><expr><name><name pos:line="22" pos:column="99">result</name><op:operator pos:line="22" pos:column="105">.</op:operator><name pos:line="22" pos:column="106">Duration</name><op:operator pos:line="22" pos:column="114">.</op:operator><name pos:line="22" pos:column="115">Ticks</name></name></expr></argument>)</argument_list></call><op:operator pos:line="22" pos:column="121">.</op:operator><call><name pos:line="22" pos:column="122">AddMilliseconds</name><argument_list pos:line="22" pos:column="137">(<argument><expr><name pos:line="22" pos:column="138">waitTime</name> <op:operator pos:line="22" pos:column="147">-</op:operator> <lit:literal type="number" pos:line="22" pos:column="149">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="22" pos:column="153">failureMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="22" pos:column="170">//-1 to handle issues with rounding??</comment>
        }</block></function>

        <function><type><attribute pos:line="25" pos:column="9">[<expr><call><name pos:line="25" pos:column="10">Fact</name><argument_list pos:line="25" pos:column="14">(<argument><expr><name pos:line="25" pos:column="15">Skip</name> <op:operator pos:line="25" pos:column="20">=</op:operator> <lit:literal type="string" pos:line="25" pos:column="22">"This test is flaky. Need to find a better way to do this..."</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="26" pos:column="9">public</specifier> <name pos:line="26" pos:column="16">void</name></type> <name pos:line="26" pos:column="21">TimeMethod</name><parameter_list pos:line="26" pos:column="31">()</parameter_list>
        <block pos:line="27" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="28" pos:column="13">var</name></type> <name pos:line="28" pos:column="17">waitTime</name> <init pos:line="28" pos:column="26">= <expr><lit:literal type="number" pos:line="28" pos:column="28">33</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="29" pos:column="13">var</name></type> <name pos:line="29" pos:column="17">timer</name> <init pos:line="29" pos:column="23">= <expr><op:operator pos:line="29" pos:column="25">new</op:operator> <call><name pos:line="29" pos:column="29">ExecutionTimer</name><argument_list pos:line="29" pos:column="43">(<argument><expr><call><name><name pos:line="29" pos:column="44">Stopwatch</name><op:operator pos:line="29" pos:column="53">.</op:operator><name pos:line="29" pos:column="54">StartNew</name></name><argument_list pos:line="29" pos:column="62">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="31" pos:column="13">var</name></type> <name pos:line="31" pos:column="17">result</name> <init pos:line="31" pos:column="24">= <expr><call><name><name pos:line="31" pos:column="26">timer</name><op:operator pos:line="31" pos:column="31">.</op:operator><name pos:line="31" pos:column="32">Time</name></name><argument_list pos:line="31" pos:column="36">(<argument><expr><lambda><parameter_list pos:line="31" pos:column="37">()</parameter_list> <op:operator pos:line="31" pos:column="40">=&gt;</op:operator>
                                        <block pos:line="32" pos:column="41">{
                                            <expr_stmt><expr><call><name><name pos:line="33" pos:column="45">Thread</name><op:operator pos:line="33" pos:column="51">.</op:operator><name pos:line="33" pos:column="52">Sleep</name></name><argument_list pos:line="33" pos:column="57">(<argument><expr><name pos:line="33" pos:column="58">waitTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                            <return pos:line="34" pos:column="45">return <expr><lit:literal type="string" pos:line="34" pos:column="52">"string"</lit:literal><op:operator pos:line="34" pos:column="60">.</op:operator><call><name pos:line="34" pos:column="61">ToUpper</name><argument_list pos:line="34" pos:column="68">()</argument_list></call></expr>;</return>
                                        }</block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="37" pos:column="13">Assert</name><op:operator pos:line="37" pos:column="19">.</op:operator><name pos:line="37" pos:column="20">NotNull</name></name><argument_list pos:line="37" pos:column="27">(<argument><expr><name pos:line="37" pos:column="28">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="38" pos:column="13">Assert</name><op:operator pos:line="38" pos:column="19">.</op:operator><name pos:line="38" pos:column="20">True</name></name><argument_list pos:line="38" pos:column="24">(<argument><expr><op:operator pos:line="38" pos:column="25">new</op:operator> <call><name pos:line="38" pos:column="29">DateTime</name><argument_list pos:line="38" pos:column="37">()</argument_list></call><op:operator pos:line="38" pos:column="39">.</op:operator><call><name pos:line="38" pos:column="40">AddTicks</name><argument_list pos:line="38" pos:column="48">(<argument><expr><name><name pos:line="38" pos:column="49">result</name><op:operator pos:line="38" pos:column="55">.</op:operator><name pos:line="38" pos:column="56">Duration</name><op:operator pos:line="38" pos:column="64">.</op:operator><name pos:line="38" pos:column="65">Ticks</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="38" pos:column="72">&gt;=</op:operator> <op:operator pos:line="38" pos:column="75">new</op:operator> <call><name pos:line="38" pos:column="79">DateTime</name><argument_list pos:line="38" pos:column="87">()</argument_list></call><op:operator pos:line="38" pos:column="89">.</op:operator><call><name pos:line="38" pos:column="90">AddTicks</name><argument_list pos:line="38" pos:column="98">(<argument><expr><name><name pos:line="38" pos:column="99">result</name><op:operator pos:line="38" pos:column="105">.</op:operator><name pos:line="38" pos:column="106">Duration</name><op:operator pos:line="38" pos:column="114">.</op:operator><name pos:line="38" pos:column="115">Ticks</name></name></expr></argument>)</argument_list></call><op:operator pos:line="38" pos:column="121">.</op:operator><call><name pos:line="38" pos:column="122">AddMilliseconds</name><argument_list pos:line="38" pos:column="137">(<argument><expr><name pos:line="38" pos:column="138">waitTime</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="39" pos:column="13">Assert</name><op:operator pos:line="39" pos:column="19">.</op:operator><name pos:line="39" pos:column="20">Equal</name></name><argument_list pos:line="39" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="39" pos:column="26">"STRING"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="39" pos:column="36">result</name><op:operator pos:line="39" pos:column="42">.</op:operator><name pos:line="39" pos:column="43">Result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="42" pos:column="9">[<expr><name pos:line="42" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="43" pos:column="9">public</specifier> <name pos:line="43" pos:column="16">void</name></type> <name pos:line="43" pos:column="21">ConstructWithRunningStopwatch</name><parameter_list pos:line="43" pos:column="50">()</parameter_list>
        <block pos:line="44" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="45" pos:column="13">var</name></type> <name pos:line="45" pos:column="17">stopwatch</name> <init pos:line="45" pos:column="27">= <expr><call><name><name pos:line="45" pos:column="29">Stopwatch</name><op:operator pos:line="45" pos:column="38">.</op:operator><name pos:line="45" pos:column="39">StartNew</name></name><argument_list pos:line="45" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="46" pos:column="13">var</name></type> <name pos:line="46" pos:column="17">timer</name> <init pos:line="46" pos:column="23">= <expr><op:operator pos:line="46" pos:column="25">new</op:operator> <call><name pos:line="46" pos:column="29">ExecutionTimer</name><argument_list pos:line="46" pos:column="43">(<argument><expr><name pos:line="46" pos:column="44">stopwatch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="48" pos:column="13">Assert</name><op:operator pos:line="48" pos:column="19">.</op:operator><name pos:line="48" pos:column="20">NotNull</name></name><argument_list pos:line="48" pos:column="27">(<argument><expr><name pos:line="48" pos:column="28">timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="49" pos:column="13">Assert</name><op:operator pos:line="49" pos:column="19">.</op:operator><name pos:line="49" pos:column="20">Equal</name></name><argument_list pos:line="49" pos:column="25">(<argument><expr><name pos:line="49" pos:column="26">stopwatch</name></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="37">timer</name><op:operator pos:line="49" pos:column="42">.</op:operator><name pos:line="49" pos:column="43">Stopwatch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="50" pos:column="13">Assert</name><op:operator pos:line="50" pos:column="19">.</op:operator><name pos:line="50" pos:column="20">True</name></name><argument_list pos:line="50" pos:column="24">(<argument><expr><name><name pos:line="50" pos:column="25">timer</name><op:operator pos:line="50" pos:column="30">.</op:operator><name pos:line="50" pos:column="31">Stopwatch</name><op:operator pos:line="50" pos:column="40">.</op:operator><name pos:line="50" pos:column="41">IsRunning</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="53" pos:column="9">[<expr><name pos:line="53" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="54" pos:column="9">public</specifier> <name pos:line="54" pos:column="16">void</name></type> <name pos:line="54" pos:column="21">ConstructWithNonRunningStopwatch</name><parameter_list pos:line="54" pos:column="53">()</parameter_list>
        <block pos:line="55" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="56" pos:column="13">var</name></type> <name pos:line="56" pos:column="17">stopwatch</name> <init pos:line="56" pos:column="27">= <expr><op:operator pos:line="56" pos:column="29">new</op:operator> <call><name pos:line="56" pos:column="33">Stopwatch</name><argument_list pos:line="56" pos:column="42">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="57" pos:column="13">var</name></type> <name pos:line="57" pos:column="17">timer</name> <init pos:line="57" pos:column="23">= <expr><op:operator pos:line="57" pos:column="25">new</op:operator> <call><name pos:line="57" pos:column="29">ExecutionTimer</name><argument_list pos:line="57" pos:column="43">(<argument><expr><name pos:line="57" pos:column="44">stopwatch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="59" pos:column="13">Assert</name><op:operator pos:line="59" pos:column="19">.</op:operator><name pos:line="59" pos:column="20">NotNull</name></name><argument_list pos:line="59" pos:column="27">(<argument><expr><name pos:line="59" pos:column="28">timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="60" pos:column="13">Assert</name><op:operator pos:line="60" pos:column="19">.</op:operator><name pos:line="60" pos:column="20">Equal</name></name><argument_list pos:line="60" pos:column="25">(<argument><expr><name pos:line="60" pos:column="26">stopwatch</name></expr></argument>, <argument><expr><name><name pos:line="60" pos:column="37">timer</name><op:operator pos:line="60" pos:column="42">.</op:operator><name pos:line="60" pos:column="43">Stopwatch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="61" pos:column="13">Assert</name><op:operator pos:line="61" pos:column="19">.</op:operator><name pos:line="61" pos:column="20">True</name></name><argument_list pos:line="61" pos:column="24">(<argument><expr><name><name pos:line="61" pos:column="25">timer</name><op:operator pos:line="61" pos:column="30">.</op:operator><name pos:line="61" pos:column="31">Stopwatch</name><op:operator pos:line="61" pos:column="40">.</op:operator><name pos:line="61" pos:column="41">IsRunning</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
