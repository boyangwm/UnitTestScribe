<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Core\Framework\CastleDynamicProxyWrapper.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">Castle</name><op:operator pos:line="1" pos:column="13">.</op:operator><name pos:line="1" pos:column="14">DynamicProxy</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">Glimpse</name><op:operator pos:line="2" pos:column="14">.</op:operator><name pos:line="2" pos:column="15">Core</name><op:operator pos:line="2" pos:column="19">.</op:operator><name pos:line="2" pos:column="20">Extensibility</name></name>;</using>

<namespace pos:line="4" pos:column="1">namespace <name><name pos:line="4" pos:column="11">Glimpse</name><op:operator pos:line="4" pos:column="18">.</op:operator><name pos:line="4" pos:column="19">Core</name><op:operator pos:line="4" pos:column="23">.</op:operator><name pos:line="4" pos:column="24">Framework</name></name>
<block pos:line="5" pos:column="1">{
    <comment type="line" pos:line="6" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="7" pos:column="5">/// An implementation of &lt;see cref="IWrapper{T}"/&gt; used by &lt;see cref="CastleDynamicProxyFactory"/&gt; to provide mixin support.</comment>
    <comment type="line" pos:line="8" pos:column="5">/// &lt;/summary&gt;</comment>
    <comment type="line" pos:line="9" pos:column="5">/// &lt;typeparam name="T"&gt;The type being wrapped.&lt;/typeparam&gt;</comment>
    <class><specifier pos:line="10" pos:column="5">internal</specifier> class <name><name pos:line="10" pos:column="20">CastleDynamicProxyWrapper</name><argument_list pos:line="10" pos:column="45">&lt;<argument><name pos:line="10" pos:column="46">T</name></argument>&gt;</argument_list></name> <super pos:line="10" pos:column="49">: <name><name pos:line="10" pos:column="51">IWrapper</name><argument_list pos:line="10" pos:column="59">&lt;<argument><name pos:line="10" pos:column="60">T</name></argument>&gt;</argument_list></name></super>
    <block pos:line="11" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="12" pos:column="9">internal</specifier> <name pos:line="12" pos:column="18">IProxyTargetAccessor</name></type> <name pos:line="12" pos:column="39">ProxyTargetAccessor</name> <block pos:line="12" pos:column="59">{ <function_decl><name pos:line="12" pos:column="61">get</name>;</function_decl> <function_decl><name pos:line="12" pos:column="66">set</name>;</function_decl> }</block></decl></decl_stmt>

        <function><type><specifier pos:line="14" pos:column="9">public</specifier> <name pos:line="14" pos:column="16">T</name></type> <name pos:line="14" pos:column="18">GetWrappedObject</name><parameter_list pos:line="14" pos:column="34">()</parameter_list>
        <block pos:line="15" pos:column="9">{
            <if pos:line="16" pos:column="13">if <condition pos:line="16" pos:column="16">(<expr><name pos:line="16" pos:column="17">ProxyTargetAccessor</name> <op:operator pos:line="16" pos:column="37">==</op:operator> <name pos:line="16" pos:column="40">null</name></expr>)</condition><then pos:line="16" pos:column="45">
            <block pos:line="17" pos:column="13">{
                <return pos:line="18" pos:column="17">return <expr><call><name pos:line="18" pos:column="24">default</name><argument_list pos:line="18" pos:column="31">(<argument><expr><name pos:line="18" pos:column="32">T</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>

            <return pos:line="21" pos:column="13">return <expr><op:operator pos:line="21" pos:column="20">(</op:operator><name pos:line="21" pos:column="21">T</name><op:operator pos:line="21" pos:column="22">)</op:operator><call><name><name pos:line="21" pos:column="23">ProxyTargetAccessor</name><op:operator pos:line="21" pos:column="42">.</op:operator><name pos:line="21" pos:column="43">DynProxyGetTarget</name></name><argument_list pos:line="21" pos:column="60">()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
