<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Integration.Site\Code\DomainRoute.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">System</name><op:operator pos:line="1" pos:column="13">.</op:operator><name pos:line="1" pos:column="14">Collections</name><op:operator pos:line="1" pos:column="25">.</op:operator><name pos:line="1" pos:column="26">Generic</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Text</name><op:operator pos:line="2" pos:column="18">.</op:operator><name pos:line="2" pos:column="19">RegularExpressions</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Web</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Web</name><op:operator pos:line="4" pos:column="17">.</op:operator><name pos:line="4" pos:column="18">Mvc</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Web</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">Routing</name></name>;</using>

<namespace pos:line="7" pos:column="1">namespace <name><name pos:line="7" pos:column="11">Glimpse</name><op:operator pos:line="7" pos:column="18">.</op:operator><name pos:line="7" pos:column="19">Test</name><op:operator pos:line="7" pos:column="23">.</op:operator><name pos:line="7" pos:column="24">Integration</name><op:operator pos:line="7" pos:column="35">.</op:operator><name pos:line="7" pos:column="36">Site</name><op:operator pos:line="7" pos:column="40">.</op:operator><name pos:line="7" pos:column="41">Code</name></name>
<block pos:line="8" pos:column="1">{
    <class><specifier pos:line="9" pos:column="5">public</specifier> class <name pos:line="9" pos:column="18">DomainRoute</name> <super pos:line="9" pos:column="30">: <name pos:line="9" pos:column="32">Route</name></super>
    <block pos:line="10" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="11" pos:column="9">private</specifier> <name pos:line="11" pos:column="17">Regex</name></type> <name pos:line="11" pos:column="23">domainRegex</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="12" pos:column="9">private</specifier> <name pos:line="12" pos:column="17">Regex</name></type> <name pos:line="12" pos:column="23">pathRegex</name></decl>;</decl_stmt>

        <constructor><specifier pos:line="14" pos:column="9">public</specifier> <name pos:line="14" pos:column="16">DomainRoute</name><parameter_list pos:line="14" pos:column="27">(<param><decl><type><name pos:line="14" pos:column="28">string</name></type> <name pos:line="14" pos:column="35">domain</name></decl></param>, <param><decl><type><name pos:line="14" pos:column="43">string</name></type> <name pos:line="14" pos:column="50">url</name></decl></param>, <param><decl><type><name pos:line="14" pos:column="55">RouteValueDictionary</name></type> <name pos:line="14" pos:column="76">defaults</name></decl></param>)</parameter_list> <member_list pos:line="14" pos:column="86">: <call><name pos:line="14" pos:column="88">base</name><argument_list pos:line="14" pos:column="92">(<argument><expr><name pos:line="14" pos:column="93">url</name></expr></argument>, <argument><expr><name pos:line="14" pos:column="98">defaults</name></expr></argument>, <argument><expr><op:operator pos:line="14" pos:column="108">new</op:operator> <call><name pos:line="14" pos:column="112">MvcRouteHandler</name><argument_list pos:line="14" pos:column="127">()</argument_list></call></expr></argument>)</argument_list></call>
        </member_list><block pos:line="15" pos:column="9">{
            <expr_stmt><expr><name pos:line="16" pos:column="13">Domain</name> <op:operator pos:line="16" pos:column="20">=</op:operator> <name pos:line="16" pos:column="22">domain</name></expr>;</expr_stmt>
        }</block></constructor>

        <constructor><specifier pos:line="19" pos:column="9">public</specifier> <name pos:line="19" pos:column="16">DomainRoute</name><parameter_list pos:line="19" pos:column="27">(<param><decl><type><name pos:line="19" pos:column="28">string</name></type> <name pos:line="19" pos:column="35">domain</name></decl></param>, <param><decl><type><name pos:line="19" pos:column="43">string</name></type> <name pos:line="19" pos:column="50">url</name></decl></param>, <param><decl><type><name pos:line="19" pos:column="55">RouteValueDictionary</name></type> <name pos:line="19" pos:column="76">defaults</name></decl></param>, <param><decl><type><name pos:line="19" pos:column="86">IRouteHandler</name></type> <name pos:line="19" pos:column="100">routeHandler</name></decl></param>)</parameter_list> <member_list pos:line="19" pos:column="114">: <call><name pos:line="19" pos:column="116">base</name><argument_list pos:line="19" pos:column="120">(<argument><expr><name pos:line="19" pos:column="121">url</name></expr></argument>, <argument><expr><name pos:line="19" pos:column="126">defaults</name></expr></argument>, <argument><expr><name pos:line="19" pos:column="136">routeHandler</name></expr></argument>)</argument_list></call>
        </member_list><block pos:line="20" pos:column="9">{
            <expr_stmt><expr><name pos:line="21" pos:column="13">Domain</name> <op:operator pos:line="21" pos:column="20">=</op:operator> <name pos:line="21" pos:column="22">domain</name></expr>;</expr_stmt>
        }</block></constructor>

        <constructor><specifier pos:line="24" pos:column="9">public</specifier> <name pos:line="24" pos:column="16">DomainRoute</name><parameter_list pos:line="24" pos:column="27">(<param><decl><type><name pos:line="24" pos:column="28">string</name></type> <name pos:line="24" pos:column="35">domain</name></decl></param>, <param><decl><type><name pos:line="24" pos:column="43">string</name></type> <name pos:line="24" pos:column="50">url</name></decl></param>, <param><decl><type><name pos:line="24" pos:column="55">object</name></type> <name pos:line="24" pos:column="62">defaults</name></decl></param>)</parameter_list> <member_list pos:line="24" pos:column="72">: <call><name pos:line="24" pos:column="74">base</name><argument_list pos:line="24" pos:column="78">(<argument><expr><name pos:line="24" pos:column="79">url</name></expr></argument>, <argument><expr><op:operator pos:line="24" pos:column="84">new</op:operator> <call><name pos:line="24" pos:column="88">RouteValueDictionary</name><argument_list pos:line="24" pos:column="108">(<argument><expr><name pos:line="24" pos:column="109">defaults</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="24" pos:column="120">new</op:operator> <call><name pos:line="24" pos:column="124">MvcRouteHandler</name><argument_list pos:line="24" pos:column="139">()</argument_list></call></expr></argument>)</argument_list></call>
        </member_list><block pos:line="25" pos:column="9">{
            <expr_stmt><expr><name pos:line="26" pos:column="13">Domain</name> <op:operator pos:line="26" pos:column="20">=</op:operator> <name pos:line="26" pos:column="22">domain</name></expr>;</expr_stmt>
        }</block></constructor>

        <constructor><specifier pos:line="29" pos:column="9">public</specifier> <name pos:line="29" pos:column="16">DomainRoute</name><parameter_list pos:line="29" pos:column="27">(<param><decl><type><name pos:line="29" pos:column="28">string</name></type> <name pos:line="29" pos:column="35">domain</name></decl></param>, <param><decl><type><name pos:line="29" pos:column="43">string</name></type> <name pos:line="29" pos:column="50">url</name></decl></param>, <param><decl><type><name pos:line="29" pos:column="55">object</name></type> <name pos:line="29" pos:column="62">defaults</name></decl></param>, <param><decl><type><name pos:line="29" pos:column="72">IRouteHandler</name></type> <name pos:line="29" pos:column="86">routeHandler</name></decl></param>)</parameter_list> <member_list pos:line="29" pos:column="100">: <call><name pos:line="29" pos:column="102">base</name><argument_list pos:line="29" pos:column="106">(<argument><expr><name pos:line="29" pos:column="107">url</name></expr></argument>, <argument><expr><op:operator pos:line="29" pos:column="112">new</op:operator> <call><name pos:line="29" pos:column="116">RouteValueDictionary</name><argument_list pos:line="29" pos:column="136">(<argument><expr><name pos:line="29" pos:column="137">defaults</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="29" pos:column="148">routeHandler</name></expr></argument>)</argument_list></call>
        </member_list><block pos:line="30" pos:column="9">{
            <expr_stmt><expr><name pos:line="31" pos:column="13">Domain</name> <op:operator pos:line="31" pos:column="20">=</op:operator> <name pos:line="31" pos:column="22">domain</name></expr>;</expr_stmt>
        }</block></constructor>

        <decl_stmt><decl><type><specifier pos:line="34" pos:column="9">public</specifier> <name pos:line="34" pos:column="16">string</name></type> <name pos:line="34" pos:column="23">Domain</name> <block pos:line="34" pos:column="30">{ <function_decl><name pos:line="34" pos:column="32">get</name>;</function_decl> <function_decl><name pos:line="34" pos:column="37">set</name>;</function_decl> }</block></decl></decl_stmt>

        <function><type><specifier pos:line="36" pos:column="9">public</specifier> <specifier pos:line="36" pos:column="16">override</specifier> <name pos:line="36" pos:column="25">RouteData</name></type> <name pos:line="36" pos:column="35">GetRouteData</name><parameter_list pos:line="36" pos:column="47">(<param><decl><type><name pos:line="36" pos:column="48">HttpContextBase</name></type> <name pos:line="36" pos:column="64">httpContext</name></decl></param>)</parameter_list>
        <block pos:line="37" pos:column="9">{
            <comment type="line" pos:line="38" pos:column="13">// Build regex</comment>
            <expr_stmt><expr><name pos:line="39" pos:column="13">domainRegex</name> <op:operator pos:line="39" pos:column="25">=</op:operator> <call><name pos:line="39" pos:column="27">CreateRegex</name><argument_list pos:line="39" pos:column="38">(<argument><expr><name pos:line="39" pos:column="39">Domain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="40" pos:column="13">pathRegex</name> <op:operator pos:line="40" pos:column="23">=</op:operator> <call><name pos:line="40" pos:column="25">CreateRegex</name><argument_list pos:line="40" pos:column="36">(<argument><expr><name pos:line="40" pos:column="37">Url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="42" pos:column="13">// Request information</comment>
            <decl_stmt><decl><type><name pos:line="43" pos:column="13">string</name></type> <name pos:line="43" pos:column="20">requestDomain</name> <init pos:line="43" pos:column="34">= <expr><name><name pos:line="43" pos:column="36">httpContext</name><op:operator pos:line="43" pos:column="47">.</op:operator><name pos:line="43" pos:column="48">Request</name><op:operator pos:line="43" pos:column="55">.</op:operator><name pos:line="43" pos:column="56">Headers</name><index pos:line="43" pos:column="63">[<expr><lit:literal type="string" pos:line="43" pos:column="64">"host"</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if pos:line="44" pos:column="13">if <condition pos:line="44" pos:column="16">(<expr><op:operator pos:line="44" pos:column="17">!</op:operator><call><name><name pos:line="44" pos:column="18">string</name><op:operator pos:line="44" pos:column="24">.</op:operator><name pos:line="44" pos:column="25">IsNullOrEmpty</name></name><argument_list pos:line="44" pos:column="38">(<argument><expr><name pos:line="44" pos:column="39">requestDomain</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="44" pos:column="54">
            <block pos:line="45" pos:column="13">{
                <if pos:line="46" pos:column="17">if <condition pos:line="46" pos:column="20">(<expr><call><name><name pos:line="46" pos:column="21">requestDomain</name><op:operator pos:line="46" pos:column="34">.</op:operator><name pos:line="46" pos:column="35">IndexOf</name></name><argument_list pos:line="46" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="46" pos:column="43">":"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="46" pos:column="48">&gt;</op:operator> <lit:literal type="number" pos:line="46" pos:column="50">0</lit:literal></expr>)</condition><then pos:line="46" pos:column="52">
                <block pos:line="47" pos:column="17">{
                    <expr_stmt><expr><name pos:line="48" pos:column="21">requestDomain</name> <op:operator pos:line="48" pos:column="35">=</op:operator> <call><name><name pos:line="48" pos:column="37">requestDomain</name><op:operator pos:line="48" pos:column="50">.</op:operator><name pos:line="48" pos:column="51">Substring</name></name><argument_list pos:line="48" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="48" pos:column="61">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="48" pos:column="64">requestDomain</name><op:operator pos:line="48" pos:column="77">.</op:operator><name pos:line="48" pos:column="78">IndexOf</name></name><argument_list pos:line="48" pos:column="85">(<argument><expr><lit:literal type="string" pos:line="48" pos:column="86">":"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then>
            <else pos:line="51" pos:column="13">else
            <block pos:line="52" pos:column="13">{
                <expr_stmt><expr><name pos:line="53" pos:column="17">requestDomain</name> <op:operator pos:line="53" pos:column="31">=</op:operator> <name><name pos:line="53" pos:column="33">httpContext</name><op:operator pos:line="53" pos:column="44">.</op:operator><name pos:line="53" pos:column="45">Request</name><op:operator pos:line="53" pos:column="52">.</op:operator><name pos:line="53" pos:column="53">Url</name><op:operator pos:line="53" pos:column="56">.</op:operator><name pos:line="53" pos:column="57">Host</name></name></expr>;</expr_stmt>
            }</block></else></if>
            <decl_stmt><decl><type><name pos:line="55" pos:column="13">string</name></type> <name pos:line="55" pos:column="20">requestPath</name> <init pos:line="55" pos:column="32">= <expr><call><name><name pos:line="55" pos:column="34">httpContext</name><op:operator pos:line="55" pos:column="45">.</op:operator><name pos:line="55" pos:column="46">Request</name><op:operator pos:line="55" pos:column="53">.</op:operator><name pos:line="55" pos:column="54">AppRelativeCurrentExecutionFilePath</name><op:operator pos:line="55" pos:column="89">.</op:operator><name pos:line="55" pos:column="90">Substring</name></name><argument_list pos:line="55" pos:column="99">(<argument><expr><lit:literal type="number" pos:line="55" pos:column="100">2</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="55" pos:column="103">+</op:operator> <name><name pos:line="55" pos:column="105">httpContext</name><op:operator pos:line="55" pos:column="116">.</op:operator><name pos:line="55" pos:column="117">Request</name><op:operator pos:line="55" pos:column="124">.</op:operator><name pos:line="55" pos:column="125">PathInfo</name></name></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="57" pos:column="13">// Match domain and route</comment>
            <decl_stmt><decl><type><name pos:line="58" pos:column="13">Match</name></type> <name pos:line="58" pos:column="19">domainMatch</name> <init pos:line="58" pos:column="31">= <expr><call><name><name pos:line="58" pos:column="33">domainRegex</name><op:operator pos:line="58" pos:column="44">.</op:operator><name pos:line="58" pos:column="45">Match</name></name><argument_list pos:line="58" pos:column="50">(<argument><expr><name pos:line="58" pos:column="51">requestDomain</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="59" pos:column="13">Match</name></type> <name pos:line="59" pos:column="19">pathMatch</name> <init pos:line="59" pos:column="29">= <expr><call><name><name pos:line="59" pos:column="31">pathRegex</name><op:operator pos:line="59" pos:column="40">.</op:operator><name pos:line="59" pos:column="41">Match</name></name><argument_list pos:line="59" pos:column="46">(<argument><expr><name pos:line="59" pos:column="47">requestPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="61" pos:column="13">// Route data</comment>
            <decl_stmt><decl><type><name pos:line="62" pos:column="13">RouteData</name></type> <name pos:line="62" pos:column="23">data</name> <init pos:line="62" pos:column="28">= <expr><name pos:line="62" pos:column="30">null</name></expr></init></decl>;</decl_stmt>
            <if pos:line="63" pos:column="13">if <condition pos:line="63" pos:column="16">(<expr><name><name pos:line="63" pos:column="17">domainMatch</name><op:operator pos:line="63" pos:column="28">.</op:operator><name pos:line="63" pos:column="29">Success</name> <type:modifier pos:line="63" pos:column="37">&amp;&amp;</type:modifier></name> <name><name pos:line="63" pos:column="40">pathMatch</name><op:operator pos:line="63" pos:column="49">.</op:operator><name pos:line="63" pos:column="50">Success</name></name></expr>)</condition><then pos:line="63" pos:column="58">
            <block pos:line="64" pos:column="13">{
                <expr_stmt><expr><name pos:line="65" pos:column="17">data</name> <op:operator pos:line="65" pos:column="22">=</op:operator> <op:operator pos:line="65" pos:column="24">new</op:operator> <call><name pos:line="65" pos:column="28">RouteData</name><argument_list pos:line="65" pos:column="37">(<argument><expr><name pos:line="65" pos:column="38">this</name></expr></argument>, <argument><expr><name pos:line="65" pos:column="44">RouteHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line" pos:line="67" pos:column="17">// Add defaults first</comment>
                <if pos:line="68" pos:column="17">if <condition pos:line="68" pos:column="20">(<expr><name pos:line="68" pos:column="21">Defaults</name> <op:operator pos:line="68" pos:column="30">!=</op:operator> <name pos:line="68" pos:column="33">null</name></expr>)</condition><then pos:line="68" pos:column="38">
                <block pos:line="69" pos:column="17">{
                    <foreach pos:line="70" pos:column="21">foreach (<init><decl><type><name><name pos:line="70" pos:column="30">KeyValuePair</name><argument_list pos:line="70" pos:column="42">&lt;<argument><name pos:line="70" pos:column="43">string</name></argument>, <argument><name pos:line="70" pos:column="51">object</name></argument>&gt;</argument_list></name></type> <name pos:line="70" pos:column="59">item</name> <range pos:line="70" pos:column="64">in <expr><name pos:line="70" pos:column="67">Defaults</name></expr></range></decl></init>)
                    <block pos:line="71" pos:column="21">{
                        <expr_stmt><expr><name><name pos:line="72" pos:column="25">data</name><op:operator pos:line="72" pos:column="29">.</op:operator><name pos:line="72" pos:column="30">Values</name><index pos:line="72" pos:column="36">[<expr><name><name pos:line="72" pos:column="37">item</name><op:operator pos:line="72" pos:column="41">.</op:operator><name pos:line="72" pos:column="42">Key</name></name></expr>]</index></name> <op:operator pos:line="72" pos:column="47">=</op:operator> <name><name pos:line="72" pos:column="49">item</name><op:operator pos:line="72" pos:column="53">.</op:operator><name pos:line="72" pos:column="54">Value</name></name></expr>;</expr_stmt>
                    }</block></foreach>
                }</block></then></if>

                <comment type="line" pos:line="76" pos:column="17">// Iterate matching domain groups</comment>
                <for pos:line="77" pos:column="17">for (<init><decl><type><name pos:line="77" pos:column="22">int</name></type> <name pos:line="77" pos:column="26">i</name> <init pos:line="77" pos:column="28">= <expr><lit:literal type="number" pos:line="77" pos:column="30">1</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="77" pos:column="33">i</name> <op:operator pos:line="77" pos:column="35">&lt;</op:operator> <name><name pos:line="77" pos:column="37">domainMatch</name><op:operator pos:line="77" pos:column="48">.</op:operator><name pos:line="77" pos:column="49">Groups</name><op:operator pos:line="77" pos:column="55">.</op:operator><name pos:line="77" pos:column="56">Count</name></name></expr>;</condition> <incr><expr><name pos:line="77" pos:column="63">i</name><op:operator pos:line="77" pos:column="64">++</op:operator></expr></incr>)
                <block pos:line="78" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="79" pos:column="21">Group</name></type> <name pos:line="79" pos:column="27">group</name> <init pos:line="79" pos:column="33">= <expr><name><name pos:line="79" pos:column="35">domainMatch</name><op:operator pos:line="79" pos:column="46">.</op:operator><name pos:line="79" pos:column="47">Groups</name><index pos:line="79" pos:column="53">[<expr><name pos:line="79" pos:column="54">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <if pos:line="80" pos:column="21">if <condition pos:line="80" pos:column="24">(<expr><linq><group pos:line="80" pos:column="25">group<expr><op:operator pos:line="80" pos:column="30">.</op:operator><name pos:line="80" pos:column="31">Success</name></expr></group></linq></expr>)</condition><then pos:line="80" pos:column="39">
                    <block pos:line="81" pos:column="21">{
                        <expr><name pos:line="82" pos:column="25">string</name> <name pos:line="82" pos:column="32">key</name> <op:operator pos:line="82" pos:column="36">=</op:operator> <call><name><name pos:line="82" pos:column="38">domainRegex</name><op:operator pos:line="82" pos:column="49">.</op:operator><name pos:line="82" pos:column="50">GroupNameFromNumber</name></name><argument_list pos:line="82" pos:column="69">(<argument><expr><name pos:line="82" pos:column="70">i</name></expr></argument>)</argument_list></call></expr></block><empty_stmt pos:line="82" pos:column="72">;</empty_stmt></then></if>

                        <if pos:line="84" pos:column="25">if <condition pos:line="84" pos:column="28">(<expr><op:operator pos:line="84" pos:column="29">!</op:operator><call><name><name pos:line="84" pos:column="30">string</name><op:operator pos:line="84" pos:column="36">.</op:operator><name pos:line="84" pos:column="37">IsNullOrEmpty</name></name><argument_list pos:line="84" pos:column="50">(<argument><expr><name pos:line="84" pos:column="51">key</name></expr></argument>)</argument_list></call> <op:operator pos:line="84" pos:column="56">&amp;&amp;</op:operator> <op:operator pos:line="84" pos:column="59">!</op:operator><call><name><name pos:line="84" pos:column="60">char</name><op:operator pos:line="84" pos:column="64">.</op:operator><name pos:line="84" pos:column="65">IsNumber</name></name><argument_list pos:line="84" pos:column="73">(<argument><expr><name pos:line="84" pos:column="74">key</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="84" pos:column="79">0</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="84" pos:column="82">
                        <block pos:line="85" pos:column="25">{
                            <if pos:line="86" pos:column="29">if <condition pos:line="86" pos:column="32">(<expr><op:operator pos:line="86" pos:column="33">!</op:operator><call><name><name pos:line="86" pos:column="34">string</name><op:operator pos:line="86" pos:column="40">.</op:operator><name pos:line="86" pos:column="41">IsNullOrEmpty</name></name><argument_list pos:line="86" pos:column="54">(<argument><expr><linq><group pos:line="86" pos:column="55">group<expr><op:operator pos:line="86" pos:column="60">.</op:operator><name pos:line="86" pos:column="61">Value</name></expr></group></linq></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="86" pos:column="68">
                            <block pos:line="87" pos:column="29">{
                                <expr><name><name pos:line="88" pos:column="33">data</name><op:operator pos:line="88" pos:column="37">.</op:operator><name pos:line="88" pos:column="38">Values</name><index pos:line="88" pos:column="44">[<expr><name pos:line="88" pos:column="45">key</name></expr>]</index></name> <op:operator pos:line="88" pos:column="50">=</op:operator> <group pos:line="88" pos:column="52">group<expr><op:operator pos:line="88" pos:column="57">.</op:operator><name pos:line="88" pos:column="58">Value</name></expr></group></expr>;
                            }</block></then></if>
                        }</block></then></if>
                    }</block></for>
                }</block></then></if>

                <comment type="line" pos:line="94" pos:column="17">// Iterate matching path groups</comment>
                <for pos:line="95" pos:column="17">for (<init><decl><type><name pos:line="95" pos:column="22">int</name></type> <name pos:line="95" pos:column="26">i</name> <init pos:line="95" pos:column="28">= <expr><lit:literal type="number" pos:line="95" pos:column="30">1</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="95" pos:column="33">i</name> <op:operator pos:line="95" pos:column="35">&lt;</op:operator> <name><name pos:line="95" pos:column="37">pathMatch</name><op:operator pos:line="95" pos:column="46">.</op:operator><name pos:line="95" pos:column="47">Groups</name><op:operator pos:line="95" pos:column="53">.</op:operator><name pos:line="95" pos:column="54">Count</name></name></expr>;</condition> <incr><expr><name pos:line="95" pos:column="61">i</name><op:operator pos:line="95" pos:column="62">++</op:operator></expr></incr>)
                <block pos:line="96" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="97" pos:column="21">Group</name></type> <name pos:line="97" pos:column="27">group</name> <init pos:line="97" pos:column="33">= <expr><name><name pos:line="97" pos:column="35">pathMatch</name><op:operator pos:line="97" pos:column="44">.</op:operator><name pos:line="97" pos:column="45">Groups</name><index pos:line="97" pos:column="51">[<expr><name pos:line="97" pos:column="52">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <if pos:line="98" pos:column="21">if <condition pos:line="98" pos:column="24">(<expr><linq><group pos:line="98" pos:column="25">group<expr><op:operator pos:line="98" pos:column="30">.</op:operator><name pos:line="98" pos:column="31">Success</name></expr></group></linq></expr>)</condition><then pos:line="98" pos:column="39">
                    <block pos:line="99" pos:column="21">{
                        <expr><name pos:line="100" pos:column="25">string</name> <name pos:line="100" pos:column="32">key</name> <op:operator pos:line="100" pos:column="36">=</op:operator> <call><name><name pos:line="100" pos:column="38">pathRegex</name><op:operator pos:line="100" pos:column="47">.</op:operator><name pos:line="100" pos:column="48">GroupNameFromNumber</name></name><argument_list pos:line="100" pos:column="67">(<argument><expr><name pos:line="100" pos:column="68">i</name></expr></argument>)</argument_list></call></expr></block><empty_stmt pos:line="100" pos:column="70">;</empty_stmt></then></if>

                        <if pos:line="102" pos:column="25">if <condition pos:line="102" pos:column="28">(<expr><op:operator pos:line="102" pos:column="29">!</op:operator><call><name><name pos:line="102" pos:column="30">string</name><op:operator pos:line="102" pos:column="36">.</op:operator><name pos:line="102" pos:column="37">IsNullOrEmpty</name></name><argument_list pos:line="102" pos:column="50">(<argument><expr><name pos:line="102" pos:column="51">key</name></expr></argument>)</argument_list></call> <op:operator pos:line="102" pos:column="56">&amp;&amp;</op:operator> <op:operator pos:line="102" pos:column="59">!</op:operator><call><name><name pos:line="102" pos:column="60">char</name><op:operator pos:line="102" pos:column="64">.</op:operator><name pos:line="102" pos:column="65">IsNumber</name></name><argument_list pos:line="102" pos:column="73">(<argument><expr><name pos:line="102" pos:column="74">key</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="102" pos:column="79">0</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="102" pos:column="82">
                        <block pos:line="103" pos:column="25">{
                            <if pos:line="104" pos:column="29">if <condition pos:line="104" pos:column="32">(<expr><op:operator pos:line="104" pos:column="33">!</op:operator><call><name><name pos:line="104" pos:column="34">string</name><op:operator pos:line="104" pos:column="40">.</op:operator><name pos:line="104" pos:column="41">IsNullOrEmpty</name></name><argument_list pos:line="104" pos:column="54">(<argument><expr><linq><group pos:line="104" pos:column="55">group<expr><op:operator pos:line="104" pos:column="60">.</op:operator><name pos:line="104" pos:column="61">Value</name></expr></group></linq></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="104" pos:column="68">
                            <block pos:line="105" pos:column="29">{
                                <expr><name><name pos:line="106" pos:column="33">data</name><op:operator pos:line="106" pos:column="37">.</op:operator><name pos:line="106" pos:column="38">Values</name><index pos:line="106" pos:column="44">[<expr><name pos:line="106" pos:column="45">key</name></expr>]</index></name> <op:operator pos:line="106" pos:column="50">=</op:operator> <group pos:line="106" pos:column="52">group<expr><op:operator pos:line="106" pos:column="57">.</op:operator><name pos:line="106" pos:column="58">Value</name></expr></group></expr>;
                            }</block></then></if>
                        }</block></then></if>
                    }</block></for>
                }</block></function>
            }</block></class>

            <return pos:line="113" pos:column="13">return <expr><name pos:line="113" pos:column="20">data</name></expr>;</return>
        }</block></namespace>

        <function><type><specifier pos:line="116" pos:column="9">public</specifier> <specifier pos:line="116" pos:column="16">override</specifier> <name pos:line="116" pos:column="25">VirtualPathData</name></type> <name pos:line="116" pos:column="41">GetVirtualPath</name><parameter_list pos:line="116" pos:column="55">(<param><decl><type><name pos:line="116" pos:column="56">RequestContext</name></type> <name pos:line="116" pos:column="71">requestContext</name></decl></param>, <param><decl><type><name pos:line="116" pos:column="87">RouteValueDictionary</name></type> <name pos:line="116" pos:column="108">values</name></decl></param>)</parameter_list>
        <block pos:line="117" pos:column="9">{
            <return pos:line="118" pos:column="13">return <expr><call><name><name pos:line="118" pos:column="20">base</name><op:operator pos:line="118" pos:column="24">.</op:operator><name pos:line="118" pos:column="25">GetVirtualPath</name></name><argument_list pos:line="118" pos:column="39">(<argument><expr><name pos:line="118" pos:column="40">requestContext</name></expr></argument>, <argument><expr><call><name pos:line="118" pos:column="56">RemoveDomainTokens</name><argument_list pos:line="118" pos:column="74">(<argument><expr><name pos:line="118" pos:column="75">values</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="121" pos:column="9">public</specifier> <name pos:line="121" pos:column="16">DomainData</name></type> <name pos:line="121" pos:column="27">GetDomainData</name><parameter_list pos:line="121" pos:column="40">(<param><decl><type><name pos:line="121" pos:column="41">RequestContext</name></type> <name pos:line="121" pos:column="56">requestContext</name></decl></param>, <param><decl><type><name pos:line="121" pos:column="72">RouteValueDictionary</name></type> <name pos:line="121" pos:column="93">values</name></decl></param>)</parameter_list>
        <block pos:line="122" pos:column="9">{
            <comment type="line" pos:line="123" pos:column="13">// Build hostname</comment>
            <decl_stmt><decl><type><name pos:line="124" pos:column="13">string</name></type> <name pos:line="124" pos:column="20">hostname</name> <init pos:line="124" pos:column="29">= <expr><name pos:line="124" pos:column="31">Domain</name></expr></init></decl>;</decl_stmt>
            <foreach pos:line="125" pos:column="13">foreach (<init><decl><type><name><name pos:line="125" pos:column="22">KeyValuePair</name><argument_list pos:line="125" pos:column="34">&lt;<argument><name pos:line="125" pos:column="35">string</name></argument>, <argument><name pos:line="125" pos:column="43">object</name></argument>&gt;</argument_list></name></type> <name pos:line="125" pos:column="51">pair</name> <range pos:line="125" pos:column="56">in <expr><name pos:line="125" pos:column="59">values</name></expr></range></decl></init>)
            <block pos:line="126" pos:column="13">{
                <expr_stmt><expr><name pos:line="127" pos:column="17">hostname</name> <op:operator pos:line="127" pos:column="26">=</op:operator> <call><name><name pos:line="127" pos:column="28">hostname</name><op:operator pos:line="127" pos:column="36">.</op:operator><name pos:line="127" pos:column="37">Replace</name></name><argument_list pos:line="127" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="127" pos:column="45">"{"</lit:literal> <op:operator pos:line="127" pos:column="49">+</op:operator> <name><name pos:line="127" pos:column="51">pair</name><op:operator pos:line="127" pos:column="55">.</op:operator><name pos:line="127" pos:column="56">Key</name></name> <op:operator pos:line="127" pos:column="60">+</op:operator> <lit:literal type="string" pos:line="127" pos:column="62">"}"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="127" pos:column="67">pair</name><op:operator pos:line="127" pos:column="71">.</op:operator><name pos:line="127" pos:column="72">Value</name><op:operator pos:line="127" pos:column="77">.</op:operator><name pos:line="127" pos:column="78">ToString</name></name><argument_list pos:line="127" pos:column="86">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>

            <comment type="line" pos:line="130" pos:column="13">// Return domain data</comment>
            <return pos:line="131" pos:column="13">return <expr><op:operator pos:line="131" pos:column="20">new</op:operator> <name pos:line="131" pos:column="24">DomainData</name>
            <block pos:line="132" pos:column="13">{
                <expr><name pos:line="133" pos:column="17">Protocol</name> <op:operator pos:line="133" pos:column="26">=</op:operator> <lit:literal type="string" pos:line="133" pos:column="28">"http"</lit:literal></expr><op:operator pos:line="133" pos:column="34">,</op:operator>
                <expr><name pos:line="134" pos:column="17">HostName</name> <op:operator pos:line="134" pos:column="26">=</op:operator> <name pos:line="134" pos:column="28">hostname</name></expr><op:operator pos:line="134" pos:column="36">,</op:operator>
                <expr><name pos:line="135" pos:column="17">Fragment</name> <op:operator pos:line="135" pos:column="26">=</op:operator> <lit:literal type="string" pos:line="135" pos:column="28">""</lit:literal></expr>
            }</block></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="139" pos:column="9">private</specifier> <name pos:line="139" pos:column="17">Regex</name></type> <name pos:line="139" pos:column="23">CreateRegex</name><parameter_list pos:line="139" pos:column="34">(<param><decl><type><name pos:line="139" pos:column="35">string</name></type> <name pos:line="139" pos:column="42">source</name></decl></param>)</parameter_list>
        <block pos:line="140" pos:column="9">{
            <comment type="line" pos:line="141" pos:column="13">// Perform replacements</comment>
            <expr_stmt><expr><name pos:line="142" pos:column="13">source</name> <op:operator pos:line="142" pos:column="20">=</op:operator> <call><name><name pos:line="142" pos:column="22">source</name><op:operator pos:line="142" pos:column="28">.</op:operator><name pos:line="142" pos:column="29">Replace</name></name><argument_list pos:line="142" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="142" pos:column="37">"/"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="142" pos:column="42">@"\/?"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="143" pos:column="13">source</name> <op:operator pos:line="143" pos:column="20">=</op:operator> <call><name><name pos:line="143" pos:column="22">source</name><op:operator pos:line="143" pos:column="28">.</op:operator><name pos:line="143" pos:column="29">Replace</name></name><argument_list pos:line="143" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="143" pos:column="37">"."</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="143" pos:column="42">@"\.?"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="144" pos:column="13">source</name> <op:operator pos:line="144" pos:column="20">=</op:operator> <call><name><name pos:line="144" pos:column="22">source</name><op:operator pos:line="144" pos:column="28">.</op:operator><name pos:line="144" pos:column="29">Replace</name></name><argument_list pos:line="144" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="144" pos:column="37">"-"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="144" pos:column="42">@"\-?"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="145" pos:column="13">source</name> <op:operator pos:line="145" pos:column="20">=</op:operator> <call><name><name pos:line="145" pos:column="22">source</name><op:operator pos:line="145" pos:column="28">.</op:operator><name pos:line="145" pos:column="29">Replace</name></name><argument_list pos:line="145" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="145" pos:column="37">"{"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="145" pos:column="42">@"(?&lt;"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="146" pos:column="13">source</name> <op:operator pos:line="146" pos:column="20">=</op:operator> <call><name><name pos:line="146" pos:column="22">source</name><op:operator pos:line="146" pos:column="28">.</op:operator><name pos:line="146" pos:column="29">Replace</name></name><argument_list pos:line="146" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="146" pos:column="37">"}"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="146" pos:column="42">@"&gt;([a-zA-Z0-9_]*))"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:line="148" pos:column="13">return <expr><op:operator pos:line="148" pos:column="20">new</op:operator> <call><name pos:line="148" pos:column="24">Regex</name><argument_list pos:line="148" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="148" pos:column="30">"^"</lit:literal> <op:operator pos:line="148" pos:column="34">+</op:operator> <name pos:line="148" pos:column="36">source</name> <op:operator pos:line="148" pos:column="43">+</op:operator> <lit:literal type="string" pos:line="148" pos:column="45">"$"</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="151" pos:column="9">private</specifier> <name pos:line="151" pos:column="17">RouteValueDictionary</name></type> <name pos:line="151" pos:column="38">RemoveDomainTokens</name><parameter_list pos:line="151" pos:column="56">(<param><decl><type><name pos:line="151" pos:column="57">RouteValueDictionary</name></type> <name pos:line="151" pos:column="78">values</name></decl></param>)</parameter_list>
        <block pos:line="152" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="153" pos:column="13">Regex</name></type> <name pos:line="153" pos:column="19">tokenRegex</name> <init pos:line="153" pos:column="30">= <expr><op:operator pos:line="153" pos:column="32">new</op:operator> <call><name pos:line="153" pos:column="36">Regex</name><argument_list pos:line="153" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="153" pos:column="42">@"({[a-zA-Z0-9_]*})*-?\.?\/?({[a-zA-Z0-9_]*})*-?\.?\/?({[a-zA-Z0-9_]*})*-?\.?\/?({[a-zA-Z0-9_]*})*-?\.?\/?({[a-zA-Z0-9_]*})*-?\.?\/?({[a-zA-Z0-9_]*})*-?\.?\/?({[a-zA-Z0-9_]*})*-?\.?\/?({[a-zA-Z0-9_]*})*-?\.?\/?({[a-zA-Z0-9_]*})*-?\.?\/?({[a-zA-Z0-9_]*})*-?\.?\/?({[a-zA-Z0-9_]*})*-?\.?\/?({[a-zA-Z0-9_]*})*-?\.?\/?"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="154" pos:column="13">Match</name></type> <name pos:line="154" pos:column="19">tokenMatch</name> <init pos:line="154" pos:column="30">= <expr><call><name><name pos:line="154" pos:column="32">tokenRegex</name><op:operator pos:line="154" pos:column="42">.</op:operator><name pos:line="154" pos:column="43">Match</name></name><argument_list pos:line="154" pos:column="48">(<argument><expr><name pos:line="154" pos:column="49">Domain</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for pos:line="155" pos:column="13">for (<init><decl><type><name pos:line="155" pos:column="18">int</name></type> <name pos:line="155" pos:column="22">i</name> <init pos:line="155" pos:column="24">= <expr><lit:literal type="number" pos:line="155" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="155" pos:column="29">i</name> <op:operator pos:line="155" pos:column="31">&lt;</op:operator> <name><name pos:line="155" pos:column="33">tokenMatch</name><op:operator pos:line="155" pos:column="43">.</op:operator><name pos:line="155" pos:column="44">Groups</name><op:operator pos:line="155" pos:column="50">.</op:operator><name pos:line="155" pos:column="51">Count</name></name></expr>;</condition> <incr><expr><name pos:line="155" pos:column="58">i</name><op:operator pos:line="155" pos:column="59">++</op:operator></expr></incr>)
            <block pos:line="156" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="157" pos:column="17">Group</name></type> <name pos:line="157" pos:column="23">group</name> <init pos:line="157" pos:column="29">= <expr><name><name pos:line="157" pos:column="31">tokenMatch</name><op:operator pos:line="157" pos:column="41">.</op:operator><name pos:line="157" pos:column="42">Groups</name><index pos:line="157" pos:column="48">[<expr><name pos:line="157" pos:column="49">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if pos:line="158" pos:column="17">if <condition pos:line="158" pos:column="20">(<expr><linq><group pos:line="158" pos:column="21">group<expr><op:operator pos:line="158" pos:column="26">.</op:operator><name pos:line="158" pos:column="27">Success</name></expr></group></linq></expr>)</condition><then pos:line="158" pos:column="35">
                <block pos:line="159" pos:column="17">{
                    <expr><name pos:line="160" pos:column="21">string</name> <name pos:line="160" pos:column="28">key</name> <op:operator pos:line="160" pos:column="32">=</op:operator></expr> <group pos:line="160" pos:column="34">group<expr><op:operator pos:line="160" pos:column="39">.</op:operator><call><name><name pos:line="160" pos:column="40">Value</name><op:operator pos:line="160" pos:column="45">.</op:operator><name pos:line="160" pos:column="46">Replace</name></name><argument_list pos:line="160" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="160" pos:column="54">"{"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="160" pos:column="59">""</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="160" pos:column="62">.</op:operator><call><name pos:line="160" pos:column="63">Replace</name><argument_list pos:line="160" pos:column="70">(<argument><expr><lit:literal type="string" pos:line="160" pos:column="71">"}"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="160" pos:column="76">""</lit:literal></expr></argument>)</argument_list></call></expr></group></block><empty_stmt pos:line="160" pos:column="79">;</empty_stmt></then></if>
                    <if pos:line="161" pos:column="21">if <condition pos:line="161" pos:column="24">(<expr><call><name><name pos:line="161" pos:column="25">values</name><op:operator pos:line="161" pos:column="31">.</op:operator><name pos:line="161" pos:column="32">ContainsKey</name></name><argument_list pos:line="161" pos:column="43">(<argument><expr><name pos:line="161" pos:column="44">key</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="161" pos:column="49">
                        <expr_stmt><expr><call><name><name pos:line="162" pos:column="25">values</name><op:operator pos:line="162" pos:column="31">.</op:operator><name pos:line="162" pos:column="32">Remove</name></name><argument_list pos:line="162" pos:column="38">(<argument><expr><name pos:line="162" pos:column="39">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                }</block></for>
            }</block></function>

            <return pos:line="166" pos:column="13">return <expr><name pos:line="166" pos:column="20">values</name></expr>;</return>
        }
    }
}
</unit>
