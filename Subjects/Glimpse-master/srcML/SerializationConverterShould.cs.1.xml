<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Core\Extensibility\SerializationConverterShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Linq</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Glimpse</name><op:operator pos:line="3" pos:column="14">.</op:operator><name pos:line="3" pos:column="15">Core</name><op:operator pos:line="3" pos:column="19">.</op:operator><name pos:line="3" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Test</name><op:operator pos:line="4" pos:column="19">.</op:operator><name pos:line="4" pos:column="20">Core</name><op:operator pos:line="4" pos:column="24">.</op:operator><name pos:line="4" pos:column="25">TestDoubles</name></name>;</using>
<using pos:line="5" pos:column="1">using <name pos:line="5" pos:column="7">Moq</name>;</using>
<using pos:line="6" pos:column="1">using <name pos:line="6" pos:column="7">Xunit</name>;</using>

<namespace pos:line="8" pos:column="1">namespace <name><name pos:line="8" pos:column="11">Glimpse</name><op:operator pos:line="8" pos:column="18">.</op:operator><name pos:line="8" pos:column="19">Test</name><op:operator pos:line="8" pos:column="23">.</op:operator><name pos:line="8" pos:column="24">Core</name><op:operator pos:line="8" pos:column="28">.</op:operator><name pos:line="8" pos:column="29">Extensibility</name></name>
<block pos:line="9" pos:column="1">{
    <class><specifier pos:line="10" pos:column="5">public</specifier> class <name pos:line="10" pos:column="18">SerializationConverterShould</name>
    <block pos:line="11" pos:column="5">{
        <function><type><attribute pos:line="12" pos:column="9">[<expr><name pos:line="12" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="13" pos:column="9">public</specifier> <name pos:line="13" pos:column="16">void</name></type> <name pos:line="13" pos:column="21">ReturnSupportedType</name><parameter_list pos:line="13" pos:column="40">()</parameter_list>
        <block pos:line="14" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="15" pos:column="13">var</name></type> <name pos:line="15" pos:column="17">converterMock</name> <init pos:line="15" pos:column="31">= <expr><op:operator pos:line="15" pos:column="33">new</op:operator> <call><name><name pos:line="15" pos:column="37">Mock</name><argument_list pos:line="15" pos:column="41">&lt;<argument><name><name pos:line="15" pos:column="42">SerializationConverter</name><argument_list pos:line="15" pos:column="64">&lt;<argument><name pos:line="15" pos:column="65">DummyObjectContext</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list pos:line="15" pos:column="85">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="17" pos:column="13">Assert</name><op:operator pos:line="17" pos:column="19">.</op:operator><name pos:line="17" pos:column="20">Equal</name></name><argument_list pos:line="17" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="17" pos:column="26">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="17" pos:column="29">converterMock</name><op:operator pos:line="17" pos:column="42">.</op:operator><name pos:line="17" pos:column="43">Object</name><op:operator pos:line="17" pos:column="49">.</op:operator><name pos:line="17" pos:column="50">SupportedTypes</name><op:operator pos:line="17" pos:column="64">.</op:operator><name pos:line="17" pos:column="65">Count</name></name><argument_list pos:line="17" pos:column="70">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="18" pos:column="13">Assert</name><op:operator pos:line="18" pos:column="19">.</op:operator><name pos:line="18" pos:column="20">Equal</name></name><argument_list pos:line="18" pos:column="25">(<argument><expr><call><name pos:line="18" pos:column="26">typeof</name><argument_list pos:line="18" pos:column="32">(<argument><expr><name pos:line="18" pos:column="33">DummyObjectContext</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="18" pos:column="54">converterMock</name><op:operator pos:line="18" pos:column="67">.</op:operator><name pos:line="18" pos:column="68">Object</name><op:operator pos:line="18" pos:column="74">.</op:operator><name pos:line="18" pos:column="75">SupportedTypes</name><op:operator pos:line="18" pos:column="89">.</op:operator><name pos:line="18" pos:column="90">First</name></name><argument_list pos:line="18" pos:column="95">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="21" pos:column="9">[<expr><name pos:line="21" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="22" pos:column="9">public</specifier> <name pos:line="22" pos:column="16">void</name></type> <name pos:line="22" pos:column="21">ThrowCastErrorWithTypeMisMatch</name><parameter_list pos:line="22" pos:column="51">()</parameter_list>
        <block pos:line="23" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="24" pos:column="13">var</name></type> <name pos:line="24" pos:column="17">converterMock</name> <init pos:line="24" pos:column="31">= <expr><op:operator pos:line="24" pos:column="33">new</op:operator> <call><name><name pos:line="24" pos:column="37">Mock</name><argument_list pos:line="24" pos:column="41">&lt;<argument><name><name pos:line="24" pos:column="42">SerializationConverter</name><argument_list pos:line="24" pos:column="64">&lt;<argument><name pos:line="24" pos:column="65">DummyObjectContext</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list pos:line="24" pos:column="85">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="26" pos:column="13">Assert</name><op:operator pos:line="26" pos:column="19">.</op:operator><name><name pos:line="26" pos:column="20">Throws</name><argument_list pos:line="26" pos:column="26">&lt;<argument><name pos:line="26" pos:column="27">InvalidCastException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="26" pos:column="48">(<argument><expr><lambda><parameter_list pos:line="26" pos:column="49">()</parameter_list><op:operator pos:line="26" pos:column="51">=&gt;</op:operator><call><name><name pos:line="26" pos:column="53">converterMock</name><op:operator pos:line="26" pos:column="66">.</op:operator><name pos:line="26" pos:column="67">Object</name><op:operator pos:line="26" pos:column="73">.</op:operator><name pos:line="26" pos:column="74">Convert</name></name><argument_list pos:line="26" pos:column="81">(<argument><expr><lit:literal type="string" pos:line="26" pos:column="82">"break me"</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="29" pos:column="9">[<expr><name pos:line="29" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="30" pos:column="9">public</specifier> <name pos:line="30" pos:column="16">void</name></type> <name pos:line="30" pos:column="21">CallAbstractConvert</name><parameter_list pos:line="30" pos:column="40">()</parameter_list>
        <block pos:line="31" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="32" pos:column="13">var</name></type> <name pos:line="32" pos:column="17">converterMock</name> <init pos:line="32" pos:column="31">= <expr><op:operator pos:line="32" pos:column="33">new</op:operator> <call><name><name pos:line="32" pos:column="37">Mock</name><argument_list pos:line="32" pos:column="41">&lt;<argument><name><name pos:line="32" pos:column="42">SerializationConverter</name><argument_list pos:line="32" pos:column="64">&lt;<argument><name pos:line="32" pos:column="65">DummyObjectContext</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list pos:line="32" pos:column="85">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="34" pos:column="13">var</name></type> <name pos:line="34" pos:column="17">objContext</name> <init pos:line="34" pos:column="28">= <expr><op:operator pos:line="34" pos:column="30">new</op:operator> <call><name pos:line="34" pos:column="34">DummyObjectContext</name><argument_list pos:line="34" pos:column="52">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="35" pos:column="13">converterMock</name><op:operator pos:line="35" pos:column="26">.</op:operator><name pos:line="35" pos:column="27">Object</name><op:operator pos:line="35" pos:column="33">.</op:operator><name pos:line="35" pos:column="34">Convert</name></name><argument_list pos:line="35" pos:column="41">(<argument><expr><name pos:line="35" pos:column="42">objContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="37" pos:column="13">converterMock</name><op:operator pos:line="37" pos:column="26">.</op:operator><name pos:line="37" pos:column="27">Verify</name></name><argument_list pos:line="37" pos:column="33">(<argument><expr><lambda><name pos:line="37" pos:column="34">c</name><op:operator pos:line="37" pos:column="35">=&gt;</op:operator><call><name><name pos:line="37" pos:column="37">c</name><op:operator pos:line="37" pos:column="38">.</op:operator><name pos:line="37" pos:column="39">Convert</name></name><argument_list pos:line="37" pos:column="46">(<argument><expr><name pos:line="37" pos:column="47">objContext</name></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="37" pos:column="60">Times</name><op:operator pos:line="37" pos:column="65">.</op:operator><name pos:line="37" pos:column="66">Once</name></name><argument_list pos:line="37" pos:column="70">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
