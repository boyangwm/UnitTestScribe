<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Core\JsonNetSerializerShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Runtime</name><op:operator pos:line="4" pos:column="21">.</op:operator><name pos:line="4" pos:column="22">Serialization</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Glimpse</name><op:operator pos:line="5" pos:column="14">.</op:operator><name pos:line="5" pos:column="15">Core</name><op:operator pos:line="5" pos:column="19">.</op:operator><name pos:line="5" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="6" pos:column="1">using <name pos:line="6" pos:column="7">Moq</name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Newtonsoft</name><op:operator pos:line="7" pos:column="17">.</op:operator><name pos:line="7" pos:column="18">Json</name></name>;</using>
<using pos:line="8" pos:column="1">using <name pos:line="8" pos:column="7">Xunit</name>;</using>

<namespace pos:line="10" pos:column="1">namespace <name><name pos:line="10" pos:column="11">Glimpse</name><op:operator pos:line="10" pos:column="18">.</op:operator><name pos:line="10" pos:column="19">Test</name><op:operator pos:line="10" pos:column="23">.</op:operator><name pos:line="10" pos:column="24">Core</name></name>
<block pos:line="11" pos:column="1">{
    <class><specifier pos:line="12" pos:column="5">public</specifier> class <name pos:line="12" pos:column="18">JsonNetSerializerShould</name>
    <block pos:line="13" pos:column="5">{
        <function><type><attribute pos:line="14" pos:column="9">[<expr><name pos:line="14" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="15" pos:column="9">public</specifier> <name pos:line="15" pos:column="16">void</name></type> <name pos:line="15" pos:column="21">Construct</name><parameter_list pos:line="15" pos:column="30">()</parameter_list>
        <block pos:line="16" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="17" pos:column="13">var</name></type> <name pos:line="17" pos:column="17">loggerMock</name> <init pos:line="17" pos:column="28">= <expr><op:operator pos:line="17" pos:column="30">new</op:operator> <call><name><name pos:line="17" pos:column="34">Mock</name><argument_list pos:line="17" pos:column="38">&lt;<argument><name pos:line="17" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="17" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="19" pos:column="13">ISerializer</name></type> <name pos:line="19" pos:column="25">serializer</name> <init pos:line="19" pos:column="36">= <expr><op:operator pos:line="19" pos:column="38">new</op:operator> <call><name pos:line="19" pos:column="42">JsonNetSerializer</name><argument_list pos:line="19" pos:column="59">(<argument><expr><name><name pos:line="19" pos:column="60">loggerMock</name><op:operator pos:line="19" pos:column="70">.</op:operator><name pos:line="19" pos:column="71">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="21" pos:column="13">Assert</name><op:operator pos:line="21" pos:column="19">.</op:operator><name pos:line="21" pos:column="20">NotNull</name></name><argument_list pos:line="21" pos:column="27">(<argument><expr><name pos:line="21" pos:column="28">serializer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="24" pos:column="9">[<expr><name pos:line="24" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="25" pos:column="9">public</specifier> <name pos:line="25" pos:column="16">void</name></type> <name pos:line="25" pos:column="21">SerializeObjects</name><parameter_list pos:line="25" pos:column="37">()</parameter_list>
        <block pos:line="26" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="27" pos:column="13">var</name></type> <name pos:line="27" pos:column="17">loggerMock</name> <init pos:line="27" pos:column="28">= <expr><op:operator pos:line="27" pos:column="30">new</op:operator> <call><name><name pos:line="27" pos:column="34">Mock</name><argument_list pos:line="27" pos:column="38">&lt;<argument><name pos:line="27" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="27" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="29" pos:column="13">ISerializer</name></type> <name pos:line="29" pos:column="25">serializer</name> <init pos:line="29" pos:column="36">= <expr><op:operator pos:line="29" pos:column="38">new</op:operator> <call><name pos:line="29" pos:column="42">JsonNetSerializer</name><argument_list pos:line="29" pos:column="59">(<argument><expr><name><name pos:line="29" pos:column="60">loggerMock</name><op:operator pos:line="29" pos:column="70">.</op:operator><name pos:line="29" pos:column="71">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="31" pos:column="13">var</name></type> <name pos:line="31" pos:column="17">simpleObject</name> <init pos:line="31" pos:column="30">= <expr><op:operator pos:line="31" pos:column="32">new</op:operator> <block pos:line="31" pos:column="36">{<expr><name pos:line="31" pos:column="37">String</name> <op:operator pos:line="31" pos:column="44">=</op:operator> <lit:literal type="string" pos:line="31" pos:column="46">"A string"</lit:literal></expr>, <expr><name pos:line="31" pos:column="58">Integer</name> <op:operator pos:line="31" pos:column="66">=</op:operator> <lit:literal type="number" pos:line="31" pos:column="68">5</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="33" pos:column="13">string</name></type> <name pos:line="33" pos:column="20">result</name> <init pos:line="33" pos:column="27">= <expr><call><name><name pos:line="33" pos:column="29">serializer</name><op:operator pos:line="33" pos:column="39">.</op:operator><name pos:line="33" pos:column="40">Serialize</name></name><argument_list pos:line="33" pos:column="49">(<argument><expr><name pos:line="33" pos:column="50">simpleObject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="35" pos:column="13">Assert</name><op:operator pos:line="35" pos:column="19">.</op:operator><name pos:line="35" pos:column="20">Equal</name></name><argument_list pos:line="35" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="35" pos:column="26">"{\"string\":\"A string\",\"integer\":5}"</lit:literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="69">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="38" pos:column="9">[<expr><name pos:line="38" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="39" pos:column="9">public</specifier> <name pos:line="39" pos:column="16">void</name></type> <name pos:line="39" pos:column="21">IgnorePropertiesWithErrors</name><parameter_list pos:line="39" pos:column="47">()</parameter_list>
        <block pos:line="40" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="41" pos:column="13">var</name></type> <name pos:line="41" pos:column="17">loggerMock</name> <init pos:line="41" pos:column="28">= <expr><op:operator pos:line="41" pos:column="30">new</op:operator> <call><name><name pos:line="41" pos:column="34">Mock</name><argument_list pos:line="41" pos:column="38">&lt;<argument><name pos:line="41" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="41" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="43" pos:column="13">ISerializer</name></type> <name pos:line="43" pos:column="25">serializer</name> <init pos:line="43" pos:column="36">= <expr><op:operator pos:line="43" pos:column="38">new</op:operator> <call><name pos:line="43" pos:column="42">JsonNetSerializer</name><argument_list pos:line="43" pos:column="59">(<argument><expr><name><name pos:line="43" pos:column="60">loggerMock</name><op:operator pos:line="43" pos:column="70">.</op:operator><name pos:line="43" pos:column="71">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="45" pos:column="13">var</name></type> <name pos:line="45" pos:column="17">badObject</name> <init pos:line="45" pos:column="27">= <expr><op:operator pos:line="45" pos:column="29">new</op:operator> <call><name pos:line="45" pos:column="33">TestObjectWithException</name><argument_list pos:line="45" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="47" pos:column="13">string</name></type> <name pos:line="47" pos:column="20">result</name> <init pos:line="47" pos:column="27">= <expr><call><name><name pos:line="47" pos:column="29">serializer</name><op:operator pos:line="47" pos:column="39">.</op:operator><name pos:line="47" pos:column="40">Serialize</name></name><argument_list pos:line="47" pos:column="49">(<argument><expr><name pos:line="47" pos:column="50">badObject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="49" pos:column="13">Assert</name><op:operator pos:line="49" pos:column="19">.</op:operator><name pos:line="49" pos:column="20">Equal</name></name><argument_list pos:line="49" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="49" pos:column="26">"{\"string\":\"A string\"}"</lit:literal></expr></argument>, <argument><expr><name pos:line="49" pos:column="55">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="50" pos:column="13">loggerMock</name><op:operator pos:line="50" pos:column="23">.</op:operator><name pos:line="50" pos:column="24">Verify</name></name><argument_list pos:line="50" pos:column="30">(<argument><expr><lambda><name pos:line="50" pos:column="31">l</name> <op:operator pos:line="50" pos:column="33">=&gt;</op:operator> <call><name><name pos:line="50" pos:column="36">l</name><op:operator pos:line="50" pos:column="37">.</op:operator><name pos:line="50" pos:column="38">Error</name></name><argument_list pos:line="50" pos:column="43">(<argument><expr><call><name><name pos:line="50" pos:column="44">It</name><op:operator pos:line="50" pos:column="46">.</op:operator><name><name pos:line="50" pos:column="47">IsAny</name><argument_list pos:line="50" pos:column="52">&lt;<argument><name pos:line="50" pos:column="53">string</name></argument>&gt;</argument_list></name></name><argument_list pos:line="50" pos:column="60">()</argument_list></call></expr></argument>,
                                           <argument><expr><call><name><name pos:line="51" pos:column="44">It</name><op:operator pos:line="51" pos:column="46">.</op:operator><name><name pos:line="51" pos:column="47">Is</name><argument_list pos:line="51" pos:column="49">&lt;<argument><name pos:line="51" pos:column="50">JsonException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="51" pos:column="64">(<argument><expr><lambda><name pos:line="51" pos:column="65">ex</name> <op:operator pos:line="51" pos:column="68">=&gt;</op:operator> <name><name pos:line="51" pos:column="71">ex</name><op:operator pos:line="51" pos:column="73">.</op:operator><name pos:line="51" pos:column="74">InnerException</name></name> <op:operator pos:line="51" pos:column="89">is</op:operator> <name pos:line="51" pos:column="92">NotSupportedException</name></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="54" pos:column="9">[<expr><name pos:line="54" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="55" pos:column="9">public</specifier> <name pos:line="55" pos:column="16">void</name></type> <name pos:line="55" pos:column="21">IgnoreListReferenceLoop</name><parameter_list pos:line="55" pos:column="44">()</parameter_list>
        <block pos:line="56" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="57" pos:column="13">var</name></type> <name pos:line="57" pos:column="17">loggerMock</name> <init pos:line="57" pos:column="28">= <expr><op:operator pos:line="57" pos:column="30">new</op:operator> <call><name><name pos:line="57" pos:column="34">Mock</name><argument_list pos:line="57" pos:column="38">&lt;<argument><name pos:line="57" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="57" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="59" pos:column="13">ISerializer</name></type> <name pos:line="59" pos:column="25">serializer</name> <init pos:line="59" pos:column="36">= <expr><op:operator pos:line="59" pos:column="38">new</op:operator> <call><name pos:line="59" pos:column="42">JsonNetSerializer</name><argument_list pos:line="59" pos:column="59">(<argument><expr><name><name pos:line="59" pos:column="60">loggerMock</name><op:operator pos:line="59" pos:column="70">.</op:operator><name pos:line="59" pos:column="71">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="61" pos:column="13">var</name></type> <name pos:line="61" pos:column="17">loop</name> <init pos:line="61" pos:column="22">= <expr><op:operator pos:line="61" pos:column="24">new</op:operator> <call><name pos:line="61" pos:column="28">TestObjectWithListReferenceLoop</name><argument_list pos:line="61" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="62" pos:column="13">loop</name><op:operator pos:line="62" pos:column="17">.</op:operator><name pos:line="62" pos:column="18">Add</name></name><argument_list pos:line="62" pos:column="21">(<argument><expr><name pos:line="62" pos:column="22">loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="64" pos:column="13">string</name></type> <name pos:line="64" pos:column="20">result</name> <init pos:line="64" pos:column="27">= <expr><call><name><name pos:line="64" pos:column="29">serializer</name><op:operator pos:line="64" pos:column="39">.</op:operator><name pos:line="64" pos:column="40">Serialize</name></name><argument_list pos:line="64" pos:column="49">(<argument><expr><name pos:line="64" pos:column="50">loop</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="66" pos:column="13">Assert</name><op:operator pos:line="66" pos:column="19">.</op:operator><name pos:line="66" pos:column="20">Equal</name></name><argument_list pos:line="66" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="66" pos:column="26">"[]"</lit:literal></expr></argument>, <argument><expr><name pos:line="66" pos:column="32">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="67" pos:column="13">loggerMock</name><op:operator pos:line="67" pos:column="23">.</op:operator><name pos:line="67" pos:column="24">Verify</name></name><argument_list pos:line="67" pos:column="30">(<argument><expr><lambda><name pos:line="67" pos:column="31">l</name> <op:operator pos:line="67" pos:column="33">=&gt;</op:operator> <call><name><name pos:line="67" pos:column="36">l</name><op:operator pos:line="67" pos:column="37">.</op:operator><name pos:line="67" pos:column="38">Error</name></name><argument_list pos:line="67" pos:column="43">(<argument><expr><call><name><name pos:line="67" pos:column="44">It</name><op:operator pos:line="67" pos:column="46">.</op:operator><name><name pos:line="67" pos:column="47">IsAny</name><argument_list pos:line="67" pos:column="52">&lt;<argument><name pos:line="67" pos:column="53">string</name></argument>&gt;</argument_list></name></name><argument_list pos:line="67" pos:column="60">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="67" pos:column="64">It</name><op:operator pos:line="67" pos:column="66">.</op:operator><name><name pos:line="67" pos:column="67">IsAny</name><argument_list pos:line="67" pos:column="72">&lt;<argument><name pos:line="67" pos:column="73">Exception</name></argument>&gt;</argument_list></name></name><argument_list pos:line="67" pos:column="83">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="67" pos:column="88">Times</name><op:operator pos:line="67" pos:column="93">.</op:operator><name pos:line="67" pos:column="94">Never</name></name><argument_list pos:line="67" pos:column="99">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="70" pos:column="9">[<expr><name pos:line="70" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="71" pos:column="9">public</specifier> <name pos:line="71" pos:column="16">void</name></type> <name pos:line="71" pos:column="21">IgnoreEnumerableReferenceLoop</name><parameter_list pos:line="71" pos:column="50">()</parameter_list>
        <block pos:line="72" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="73" pos:column="13">var</name></type> <name pos:line="73" pos:column="17">loggerMock</name> <init pos:line="73" pos:column="28">= <expr><op:operator pos:line="73" pos:column="30">new</op:operator> <call><name><name pos:line="73" pos:column="34">Mock</name><argument_list pos:line="73" pos:column="38">&lt;<argument><name pos:line="73" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="73" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="75" pos:column="13">ISerializer</name></type> <name pos:line="75" pos:column="25">serializer</name> <init pos:line="75" pos:column="36">= <expr><op:operator pos:line="75" pos:column="38">new</op:operator> <call><name pos:line="75" pos:column="42">JsonNetSerializer</name><argument_list pos:line="75" pos:column="59">(<argument><expr><name><name pos:line="75" pos:column="60">loggerMock</name><op:operator pos:line="75" pos:column="70">.</op:operator><name pos:line="75" pos:column="71">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="77" pos:column="13">var</name></type> <name pos:line="77" pos:column="17">loop</name> <init pos:line="77" pos:column="22">= <expr><op:operator pos:line="77" pos:column="24">new</op:operator> <call><name pos:line="77" pos:column="28">TestObjectWithEnumerableReferenceLoop</name><argument_list pos:line="77" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="79" pos:column="13">string</name></type> <name pos:line="79" pos:column="20">result</name> <init pos:line="79" pos:column="27">= <expr><call><name><name pos:line="79" pos:column="29">serializer</name><op:operator pos:line="79" pos:column="39">.</op:operator><name pos:line="79" pos:column="40">Serialize</name></name><argument_list pos:line="79" pos:column="49">(<argument><expr><name pos:line="79" pos:column="50">loop</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="81" pos:column="13">Assert</name><op:operator pos:line="81" pos:column="19">.</op:operator><name pos:line="81" pos:column="20">Equal</name></name><argument_list pos:line="81" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="81" pos:column="26">"[]"</lit:literal></expr></argument>, <argument><expr><name pos:line="81" pos:column="32">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="82" pos:column="13">loggerMock</name><op:operator pos:line="82" pos:column="23">.</op:operator><name pos:line="82" pos:column="24">Verify</name></name><argument_list pos:line="82" pos:column="30">(<argument><expr><lambda><name pos:line="82" pos:column="31">l</name> <op:operator pos:line="82" pos:column="33">=&gt;</op:operator> <call><name><name pos:line="82" pos:column="36">l</name><op:operator pos:line="82" pos:column="37">.</op:operator><name pos:line="82" pos:column="38">Error</name></name><argument_list pos:line="82" pos:column="43">(<argument><expr><call><name><name pos:line="82" pos:column="44">It</name><op:operator pos:line="82" pos:column="46">.</op:operator><name><name pos:line="82" pos:column="47">IsAny</name><argument_list pos:line="82" pos:column="52">&lt;<argument><name pos:line="82" pos:column="53">string</name></argument>&gt;</argument_list></name></name><argument_list pos:line="82" pos:column="60">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="82" pos:column="64">It</name><op:operator pos:line="82" pos:column="66">.</op:operator><name><name pos:line="82" pos:column="67">IsAny</name><argument_list pos:line="82" pos:column="72">&lt;<argument><name pos:line="82" pos:column="73">Exception</name></argument>&gt;</argument_list></name></name><argument_list pos:line="82" pos:column="83">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="82" pos:column="88">Times</name><op:operator pos:line="82" pos:column="93">.</op:operator><name pos:line="82" pos:column="94">Never</name></name><argument_list pos:line="82" pos:column="99">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="85" pos:column="9">[<expr><name pos:line="85" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="86" pos:column="9">public</specifier> <name pos:line="86" pos:column="16">void</name></type> <name pos:line="86" pos:column="21">RespectJsonPropertyOverrides</name><parameter_list pos:line="86" pos:column="49">()</parameter_list>
        <block pos:line="87" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="88" pos:column="13">var</name></type> <name pos:line="88" pos:column="17">loggerMock</name> <init pos:line="88" pos:column="28">= <expr><op:operator pos:line="88" pos:column="30">new</op:operator> <call><name><name pos:line="88" pos:column="34">Mock</name><argument_list pos:line="88" pos:column="38">&lt;<argument><name pos:line="88" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="88" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="90" pos:column="13">ISerializer</name></type> <name pos:line="90" pos:column="25">serializer</name> <init pos:line="90" pos:column="36">= <expr><op:operator pos:line="90" pos:column="38">new</op:operator> <call><name pos:line="90" pos:column="42">JsonNetSerializer</name><argument_list pos:line="90" pos:column="59">(<argument><expr><name><name pos:line="90" pos:column="60">loggerMock</name><op:operator pos:line="90" pos:column="70">.</op:operator><name pos:line="90" pos:column="71">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="92" pos:column="13">var</name></type> <name pos:line="92" pos:column="17">overrideObject</name> <init pos:line="92" pos:column="32">= <expr><op:operator pos:line="92" pos:column="34">new</op:operator> <call><name pos:line="92" pos:column="38">TestObjectWithJsonAttributes</name><argument_list pos:line="92" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="94" pos:column="13">string</name></type> <name pos:line="94" pos:column="20">result</name> <init pos:line="94" pos:column="27">= <expr><call><name><name pos:line="94" pos:column="29">serializer</name><op:operator pos:line="94" pos:column="39">.</op:operator><name pos:line="94" pos:column="40">Serialize</name></name><argument_list pos:line="94" pos:column="49">(<argument><expr><name pos:line="94" pos:column="50">overrideObject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="96" pos:column="13">Assert</name><op:operator pos:line="96" pos:column="19">.</op:operator><name pos:line="96" pos:column="20">Equal</name></name><argument_list pos:line="96" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="96" pos:column="26">"{\"meaningfullName\":\"A string\"}"</lit:literal></expr></argument>, <argument><expr><name pos:line="96" pos:column="64">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="99" pos:column="9">[<expr><name pos:line="99" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="100" pos:column="9">public</specifier> <name pos:line="100" pos:column="16">void</name></type> <name pos:line="100" pos:column="21">RespectISerializableObjects</name><parameter_list pos:line="100" pos:column="48">()</parameter_list>
        <block pos:line="101" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="102" pos:column="13">var</name></type> <name pos:line="102" pos:column="17">loggerMock</name> <init pos:line="102" pos:column="28">= <expr><op:operator pos:line="102" pos:column="30">new</op:operator> <call><name><name pos:line="102" pos:column="34">Mock</name><argument_list pos:line="102" pos:column="38">&lt;<argument><name pos:line="102" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="102" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="104" pos:column="13">ISerializer</name></type> <name pos:line="104" pos:column="25">serializer</name> <init pos:line="104" pos:column="36">= <expr><op:operator pos:line="104" pos:column="38">new</op:operator> <call><name pos:line="104" pos:column="42">JsonNetSerializer</name><argument_list pos:line="104" pos:column="59">(<argument><expr><name><name pos:line="104" pos:column="60">loggerMock</name><op:operator pos:line="104" pos:column="70">.</op:operator><name pos:line="104" pos:column="71">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="106" pos:column="13">var</name></type> <name pos:line="106" pos:column="17">iSerializableObj</name> <init pos:line="106" pos:column="34">= <expr><op:operator pos:line="106" pos:column="36">new</op:operator> <call><name pos:line="106" pos:column="40">TestObjectAsISerializable</name><argument_list pos:line="106" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="108" pos:column="13">var</name></type> <name pos:line="108" pos:column="17">result</name> <init pos:line="108" pos:column="24">= <expr><call><name><name pos:line="108" pos:column="26">serializer</name><op:operator pos:line="108" pos:column="36">.</op:operator><name pos:line="108" pos:column="37">Serialize</name></name><argument_list pos:line="108" pos:column="46">(<argument><expr><name pos:line="108" pos:column="47">iSerializableObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="110" pos:column="13">Assert</name><op:operator pos:line="110" pos:column="19">.</op:operator><name pos:line="110" pos:column="20">Equal</name></name><argument_list pos:line="110" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="110" pos:column="26">"{\"otherKey\":\"otherValue\"}"</lit:literal></expr></argument>, <argument><expr><name pos:line="110" pos:column="59">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="113" pos:column="9">[<expr><name pos:line="113" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="114" pos:column="9">public</specifier> <name pos:line="114" pos:column="16">void</name></type> <name pos:line="114" pos:column="21">RegisterISerializationConverters</name><parameter_list pos:line="114" pos:column="53">()</parameter_list>
        <block pos:line="115" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="116" pos:column="13">var</name></type> <name pos:line="116" pos:column="17">loggerMock</name> <init pos:line="116" pos:column="28">= <expr><op:operator pos:line="116" pos:column="30">new</op:operator> <call><name><name pos:line="116" pos:column="34">Mock</name><argument_list pos:line="116" pos:column="38">&lt;<argument><name pos:line="116" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="116" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="118" pos:column="13">var</name></type> <name pos:line="118" pos:column="17">converter1</name> <init pos:line="118" pos:column="28">= <expr><op:operator pos:line="118" pos:column="30">new</op:operator> <call><name><name pos:line="118" pos:column="34">Mock</name><argument_list pos:line="118" pos:column="38">&lt;<argument><name pos:line="118" pos:column="39">ISerializationConverter</name></argument>&gt;</argument_list></name><argument_list pos:line="118" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="119" pos:column="13">var</name></type> <name pos:line="119" pos:column="17">converter2</name> <init pos:line="119" pos:column="28">= <expr><op:operator pos:line="119" pos:column="30">new</op:operator> <call><name><name pos:line="119" pos:column="34">Mock</name><argument_list pos:line="119" pos:column="38">&lt;<argument><name pos:line="119" pos:column="39">ISerializationConverter</name></argument>&gt;</argument_list></name><argument_list pos:line="119" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="121" pos:column="13">var</name></type> <name pos:line="121" pos:column="17">serializer</name> <init pos:line="121" pos:column="28">= <expr><op:operator pos:line="121" pos:column="30">new</op:operator> <call><name pos:line="121" pos:column="34">JsonNetSerializer</name><argument_list pos:line="121" pos:column="51">(<argument><expr><name><name pos:line="121" pos:column="52">loggerMock</name><op:operator pos:line="121" pos:column="62">.</op:operator><name pos:line="121" pos:column="63">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="123" pos:column="13">serializer</name><op:operator pos:line="123" pos:column="23">.</op:operator><name pos:line="123" pos:column="24">RegisterSerializationConverters</name></name><argument_list pos:line="123" pos:column="55">(<argument><expr><op:operator pos:line="123" pos:column="56">new</op:operator><index pos:line="123" pos:column="59">[]</index><block pos:line="123" pos:column="61">{<expr><name><name pos:line="123" pos:column="62">converter1</name><op:operator pos:line="123" pos:column="72">.</op:operator><name pos:line="123" pos:column="73">Object</name></name></expr><op:operator pos:line="123" pos:column="79">,</op:operator> <expr><name><name pos:line="123" pos:column="81">converter2</name><op:operator pos:line="123" pos:column="91">.</op:operator><name pos:line="123" pos:column="92">Object</name></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="126" pos:column="9">[<expr><name pos:line="126" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="127" pos:column="9">public</specifier> <name pos:line="127" pos:column="16">void</name></type> <name pos:line="127" pos:column="21">RegisterEmptyCollectionOfISerializationConverters</name><parameter_list pos:line="127" pos:column="70">()</parameter_list>
        <block pos:line="128" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="129" pos:column="13">var</name></type> <name pos:line="129" pos:column="17">loggerMock</name> <init pos:line="129" pos:column="28">= <expr><op:operator pos:line="129" pos:column="30">new</op:operator> <call><name><name pos:line="129" pos:column="34">Mock</name><argument_list pos:line="129" pos:column="38">&lt;<argument><name pos:line="129" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="129" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="131" pos:column="13">var</name></type> <name pos:line="131" pos:column="17">serializer</name> <init pos:line="131" pos:column="28">= <expr><op:operator pos:line="131" pos:column="30">new</op:operator> <call><name pos:line="131" pos:column="34">JsonNetSerializer</name><argument_list pos:line="131" pos:column="51">(<argument><expr><name><name pos:line="131" pos:column="52">loggerMock</name><op:operator pos:line="131" pos:column="62">.</op:operator><name pos:line="131" pos:column="63">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="133" pos:column="13">serializer</name><op:operator pos:line="133" pos:column="23">.</op:operator><name pos:line="133" pos:column="24">RegisterSerializationConverters</name></name><argument_list pos:line="133" pos:column="55">(<argument><expr><call><name><name pos:line="133" pos:column="56">Enumerable</name><op:operator pos:line="133" pos:column="66">.</op:operator><name><name pos:line="133" pos:column="67">Empty</name><argument_list pos:line="133" pos:column="72">&lt;<argument><name pos:line="133" pos:column="73">ISerializationConverter</name></argument>&gt;</argument_list></name></name><argument_list pos:line="133" pos:column="97">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="136" pos:column="9">[<expr><name pos:line="136" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="137" pos:column="9">public</specifier> <name pos:line="137" pos:column="16">void</name></type> <name pos:line="137" pos:column="21">ThrowWhenRegisterNullCollectionOfISerializationConverters</name><parameter_list pos:line="137" pos:column="78">()</parameter_list>
        <block pos:line="138" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="139" pos:column="13">var</name></type> <name pos:line="139" pos:column="17">loggerMock</name> <init pos:line="139" pos:column="28">= <expr><op:operator pos:line="139" pos:column="30">new</op:operator> <call><name><name pos:line="139" pos:column="34">Mock</name><argument_list pos:line="139" pos:column="38">&lt;<argument><name pos:line="139" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="139" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="141" pos:column="13">var</name></type> <name pos:line="141" pos:column="17">serializer</name> <init pos:line="141" pos:column="28">= <expr><op:operator pos:line="141" pos:column="30">new</op:operator> <call><name pos:line="141" pos:column="34">JsonNetSerializer</name><argument_list pos:line="141" pos:column="51">(<argument><expr><name><name pos:line="141" pos:column="52">loggerMock</name><op:operator pos:line="141" pos:column="62">.</op:operator><name pos:line="141" pos:column="63">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="143" pos:column="13">Assert</name><op:operator pos:line="143" pos:column="19">.</op:operator><name><name pos:line="143" pos:column="20">Throws</name><argument_list pos:line="143" pos:column="26">&lt;<argument><name pos:line="143" pos:column="27">ArgumentNullException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="143" pos:column="49">(<argument><expr><lambda><parameter_list pos:line="143" pos:column="50">()</parameter_list><op:operator pos:line="143" pos:column="52">=&gt;</op:operator><call><name><name pos:line="143" pos:column="54">serializer</name><op:operator pos:line="143" pos:column="64">.</op:operator><name pos:line="143" pos:column="65">RegisterSerializationConverters</name></name><argument_list pos:line="143" pos:column="96">(<argument><expr><name pos:line="143" pos:column="97">null</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

    <cpp:region pos:line="147" pos:column="5">#<cpp:directive pos:line="147" pos:column="6">region</cpp:directive> Test Objects</cpp:region>
    <class><specifier pos:line="148" pos:column="5">internal</specifier> class <name pos:line="148" pos:column="20">TestObjectWithException</name>
    <block pos:line="149" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="150" pos:column="9">public</specifier> <name pos:line="150" pos:column="16">string</name></type> <name pos:line="150" pos:column="23">String</name>
        <block pos:line="151" pos:column="9">{
            <function><name pos:line="152" pos:column="13">get</name> <block pos:line="152" pos:column="17">{ <return pos:line="152" pos:column="19">return <expr><lit:literal type="string" pos:line="152" pos:column="26">"A string"</lit:literal></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="155" pos:column="9">public</specifier> <name pos:line="155" pos:column="16">string</name></type> <name pos:line="155" pos:column="23">Error</name>
        <block pos:line="156" pos:column="9">{
            <function><name pos:line="157" pos:column="13">get</name> <block pos:line="157" pos:column="17">{ <throw pos:line="157" pos:column="19">throw <expr><op:operator pos:line="157" pos:column="25">new</op:operator> <call><name pos:line="157" pos:column="29">NotSupportedException</name><argument_list pos:line="157" pos:column="50">()</argument_list></call></expr>;</throw> }</block></function>
        }</block></decl></decl_stmt>
    }</block></class>

    <class><specifier pos:line="161" pos:column="5">internal</specifier> class <name pos:line="161" pos:column="20">TestObjectWithJsonAttributes</name>
    <block pos:line="162" pos:column="5">{
        <decl_stmt><decl><type><attribute pos:line="163" pos:column="9">[<expr><call><name pos:line="163" pos:column="10">JsonProperty</name><argument_list pos:line="163" pos:column="22">(<argument><expr><name pos:line="163" pos:column="23">PropertyName</name> <op:operator pos:line="163" pos:column="36">=</op:operator> <lit:literal type="string" pos:line="163" pos:column="38">"meaningfullName"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="164" pos:column="9">public</specifier> <name pos:line="164" pos:column="16">string</name></type> <name pos:line="164" pos:column="23">String</name>
        <block pos:line="165" pos:column="9">{
            <function><name pos:line="166" pos:column="13">get</name> <block pos:line="166" pos:column="17">{ <return pos:line="166" pos:column="19">return <expr><lit:literal type="string" pos:line="166" pos:column="26">"A string"</lit:literal></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><attribute pos:line="169" pos:column="9">[<expr><name pos:line="169" pos:column="10">JsonIgnore</name></expr>]</attribute>
        <specifier pos:line="170" pos:column="9">public</specifier> <name pos:line="170" pos:column="16">int</name></type> <name pos:line="170" pos:column="20">NeverSeeMe</name>
        <block pos:line="171" pos:column="9">{
            <function><name pos:line="172" pos:column="13">get</name> <block pos:line="172" pos:column="17">{ <return pos:line="172" pos:column="19">return <expr><lit:literal type="number" pos:line="172" pos:column="26">5</lit:literal></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>
    }</block></class>

    <class><specifier pos:line="176" pos:column="5">internal</specifier> class <name pos:line="176" pos:column="20">TestObjectAsISerializable</name> <super pos:line="176" pos:column="46">: <name pos:line="176" pos:column="48">ISerializable</name></super>
    <block pos:line="177" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="178" pos:column="9">public</specifier> <name pos:line="178" pos:column="16">string</name></type> <name pos:line="178" pos:column="23">NeverSeeMe</name>
        <block pos:line="179" pos:column="9">{
            <function><name pos:line="180" pos:column="13">get</name> <block pos:line="180" pos:column="17">{ <return pos:line="180" pos:column="19">return <expr><lit:literal type="string" pos:line="180" pos:column="26">"A string"</lit:literal></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <function><type><specifier pos:line="183" pos:column="9">public</specifier> <name pos:line="183" pos:column="16">void</name></type> <name pos:line="183" pos:column="21">GetObjectData</name><parameter_list pos:line="183" pos:column="34">(<param><decl><type><name pos:line="183" pos:column="35">SerializationInfo</name></type> <name pos:line="183" pos:column="53">info</name></decl></param>, <param><decl><type><name pos:line="183" pos:column="59">StreamingContext</name></type> <name pos:line="183" pos:column="76">context</name></decl></param>)</parameter_list>
        <block pos:line="184" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="185" pos:column="13">info</name><op:operator pos:line="185" pos:column="17">.</op:operator><name pos:line="185" pos:column="18">AddValue</name></name><argument_list pos:line="185" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="185" pos:column="27">"otherKey"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="185" pos:column="39">"otherValue"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

    <class><specifier pos:line="189" pos:column="5">public</specifier> class <name pos:line="189" pos:column="18">TestObjectWithListReferenceLoop</name> <super pos:line="189" pos:column="50">: <name pos:line="189" pos:column="52">ArrayList</name></super>
    <block pos:line="190" pos:column="5">{
    }</block></class>

    <class><specifier pos:line="193" pos:column="5">public</specifier> class <name pos:line="193" pos:column="18">TestObjectWithEnumerableReferenceLoop</name> <super pos:line="193" pos:column="56">: <name pos:line="193" pos:column="58">IEnumerable</name></super>
    <block pos:line="194" pos:column="5">{
        <function><type><name pos:line="195" pos:column="9">IEnumerator</name></type> <name><name pos:line="195" pos:column="21">IEnumerable</name><op:operator pos:line="195" pos:column="32">.</op:operator><name pos:line="195" pos:column="33">GetEnumerator</name></name><parameter_list pos:line="195" pos:column="46">()</parameter_list>
        <block pos:line="196" pos:column="9">{
            <return><specifier pos:line="197" pos:column="13">yield</specifier> return <expr><name pos:line="197" pos:column="26">this</name></expr>;</return>
        }</block></function>
    }</block></class>
    <cpp:endregion pos:line="200" pos:column="5">#<cpp:directive pos:line="200" pos:column="6">endregion</cpp:directive> Test Objects</cpp:endregion>
}</block></namespace>
</unit>
