<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Core\Extensibility\AlternateTypeToCastleInterceptorAdapterShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Diagnostics</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Castle</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">DynamicProxy</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Glimpse</name><op:operator pos:line="5" pos:column="14">.</op:operator><name pos:line="5" pos:column="15">Core</name><op:operator pos:line="5" pos:column="19">.</op:operator><name pos:line="5" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="6" pos:column="1">using <name pos:line="6" pos:column="7">Moq</name>;</using>
<using pos:line="7" pos:column="1">using <name pos:line="7" pos:column="7">Xunit</name>;</using>

<namespace pos:line="9" pos:column="1">namespace <name><name pos:line="9" pos:column="11">Glimpse</name><op:operator pos:line="9" pos:column="18">.</op:operator><name pos:line="9" pos:column="19">Test</name><op:operator pos:line="9" pos:column="23">.</op:operator><name pos:line="9" pos:column="24">Core</name><op:operator pos:line="9" pos:column="28">.</op:operator><name pos:line="9" pos:column="29">Extensibility</name></name>
<block pos:line="10" pos:column="1">{
    <class><specifier pos:line="11" pos:column="5">public</specifier> class <name pos:line="11" pos:column="18">AlternateTypeToCastleInterceptorAdapterShould</name>
    <block pos:line="12" pos:column="5">{
        <function><type><attribute pos:line="13" pos:column="9">[<expr><name pos:line="13" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="14" pos:column="9">public</specifier> <name pos:line="14" pos:column="16">void</name></type> <name pos:line="14" pos:column="21">Construct</name><parameter_list pos:line="14" pos:column="30">()</parameter_list>
        <block pos:line="15" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="16" pos:column="13">var</name></type> <name pos:line="16" pos:column="17">implementationMock</name> <init pos:line="16" pos:column="36">= <expr><op:operator pos:line="16" pos:column="38">new</op:operator> <call><name><name pos:line="16" pos:column="42">Mock</name><argument_list pos:line="16" pos:column="46">&lt;<argument><name pos:line="16" pos:column="47">IAlternateMethod</name></argument>&gt;</argument_list></name><argument_list pos:line="16" pos:column="64">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="17" pos:column="13">var</name></type> <name pos:line="17" pos:column="17">loggerMock</name> <init pos:line="17" pos:column="28">= <expr><op:operator pos:line="17" pos:column="30">new</op:operator> <call><name><name pos:line="17" pos:column="34">Mock</name><argument_list pos:line="17" pos:column="38">&lt;<argument><name pos:line="17" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="17" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="19" pos:column="13">var</name></type> <name pos:line="19" pos:column="17">adapter</name> <init pos:line="19" pos:column="25">= <expr><op:operator pos:line="19" pos:column="27">new</op:operator> <call><name pos:line="19" pos:column="31">AlternateTypeToCastleInterceptorAdapter</name><argument_list pos:line="19" pos:column="70">(<argument><expr><name><name pos:line="19" pos:column="71">implementationMock</name><op:operator pos:line="19" pos:column="89">.</op:operator><name pos:line="19" pos:column="90">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="98">loggerMock</name><op:operator pos:line="19" pos:column="108">.</op:operator><name pos:line="19" pos:column="109">Object</name></name></expr></argument>, <argument><expr><op:operator pos:line="19" pos:column="117">new</op:operator> <call><name><name pos:line="19" pos:column="121">Mock</name><argument_list pos:line="19" pos:column="125">&lt;<argument><name pos:line="19" pos:column="126">IMessageBroker</name></argument>&gt;</argument_list></name><argument_list pos:line="19" pos:column="141">()</argument_list></call><op:operator pos:line="19" pos:column="143">.</op:operator><name pos:line="19" pos:column="144">Object</name></expr></argument>, <argument><expr><op:operator pos:line="19" pos:column="152">new</op:operator> <call><name><name pos:line="19" pos:column="156">Mock</name><argument_list pos:line="19" pos:column="160">&lt;<argument><name pos:line="19" pos:column="161">IProxyFactory</name></argument>&gt;</argument_list></name><argument_list pos:line="19" pos:column="175">()</argument_list></call><op:operator pos:line="19" pos:column="177">.</op:operator><name pos:line="19" pos:column="178">Object</name></expr></argument>, <argument><expr><lambda><parameter_list pos:line="19" pos:column="186">()</parameter_list> <op:operator pos:line="19" pos:column="189">=&gt;</op:operator> <op:operator pos:line="19" pos:column="192">new</op:operator> <call><name pos:line="19" pos:column="196">ExecutionTimer</name><argument_list pos:line="19" pos:column="210">(<argument><expr><call><name><name pos:line="19" pos:column="211">Stopwatch</name><op:operator pos:line="19" pos:column="220">.</op:operator><name pos:line="19" pos:column="221">StartNew</name></name><argument_list pos:line="19" pos:column="229">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><lambda><parameter_list pos:line="19" pos:column="234">()</parameter_list> <op:operator pos:line="19" pos:column="237">=&gt;</op:operator> <name><name pos:line="19" pos:column="240">RuntimePolicy</name><op:operator pos:line="19" pos:column="253">.</op:operator><name pos:line="19" pos:column="254">On</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="21" pos:column="13">Assert</name><op:operator pos:line="21" pos:column="19">.</op:operator><name pos:line="21" pos:column="20">Equal</name></name><argument_list pos:line="21" pos:column="25">(<argument><expr><name><name pos:line="21" pos:column="26">implementationMock</name><op:operator pos:line="21" pos:column="44">.</op:operator><name pos:line="21" pos:column="45">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="53">adapter</name><op:operator pos:line="21" pos:column="60">.</op:operator><name pos:line="21" pos:column="61">Implementation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="22" pos:column="13">Assert</name><op:operator pos:line="22" pos:column="19">.</op:operator><name pos:line="22" pos:column="20">Equal</name></name><argument_list pos:line="22" pos:column="25">(<argument><expr><name><name pos:line="22" pos:column="26">loggerMock</name><op:operator pos:line="22" pos:column="36">.</op:operator><name pos:line="22" pos:column="37">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="45">adapter</name><op:operator pos:line="22" pos:column="52">.</op:operator><name pos:line="22" pos:column="53">Logger</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="25" pos:column="9">[<expr><name pos:line="25" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="26" pos:column="9">public</specifier> <name pos:line="26" pos:column="16">void</name></type> <name pos:line="26" pos:column="21">ThrowWithNullConstructorParameters</name><parameter_list pos:line="26" pos:column="55">()</parameter_list>
        <block pos:line="27" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="28" pos:column="13">var</name></type> <name pos:line="28" pos:column="17">implementationMock</name> <init pos:line="28" pos:column="36">= <expr><op:operator pos:line="28" pos:column="38">new</op:operator> <call><name><name pos:line="28" pos:column="42">Mock</name><argument_list pos:line="28" pos:column="46">&lt;<argument><name pos:line="28" pos:column="47">IAlternateMethod</name></argument>&gt;</argument_list></name><argument_list pos:line="28" pos:column="64">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="29" pos:column="13">var</name></type> <name pos:line="29" pos:column="17">loggerMock</name> <init pos:line="29" pos:column="28">= <expr><op:operator pos:line="29" pos:column="30">new</op:operator> <call><name><name pos:line="29" pos:column="34">Mock</name><argument_list pos:line="29" pos:column="38">&lt;<argument><name pos:line="29" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="29" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="31" pos:column="13">Assert</name><op:operator pos:line="31" pos:column="19">.</op:operator><name><name pos:line="31" pos:column="20">Throws</name><argument_list pos:line="31" pos:column="26">&lt;<argument><name pos:line="31" pos:column="27">ArgumentNullException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="31" pos:column="49">(<argument><expr><lambda><parameter_list pos:line="31" pos:column="50">()</parameter_list> <op:operator pos:line="31" pos:column="53">=&gt;</op:operator> <op:operator pos:line="31" pos:column="56">new</op:operator> <call><name pos:line="31" pos:column="60">AlternateTypeToCastleInterceptorAdapter</name><argument_list pos:line="31" pos:column="99">(<argument><expr><name pos:line="31" pos:column="100">null</name></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="106">loggerMock</name><op:operator pos:line="31" pos:column="116">.</op:operator><name pos:line="31" pos:column="117">Object</name></name></expr></argument>, <argument><expr><op:operator pos:line="31" pos:column="125">new</op:operator> <call><name><name pos:line="31" pos:column="129">Mock</name><argument_list pos:line="31" pos:column="133">&lt;<argument><name pos:line="31" pos:column="134">IMessageBroker</name></argument>&gt;</argument_list></name><argument_list pos:line="31" pos:column="149">()</argument_list></call><op:operator pos:line="31" pos:column="151">.</op:operator><name pos:line="31" pos:column="152">Object</name></expr></argument>, <argument><expr><op:operator pos:line="31" pos:column="160">new</op:operator> <call><name><name pos:line="31" pos:column="164">Mock</name><argument_list pos:line="31" pos:column="168">&lt;<argument><name pos:line="31" pos:column="169">IProxyFactory</name></argument>&gt;</argument_list></name><argument_list pos:line="31" pos:column="183">()</argument_list></call><op:operator pos:line="31" pos:column="185">.</op:operator><name pos:line="31" pos:column="186">Object</name></expr></argument>, <argument><expr><lambda><parameter_list pos:line="31" pos:column="194">()</parameter_list> <op:operator pos:line="31" pos:column="197">=&gt;</op:operator> <op:operator pos:line="31" pos:column="200">new</op:operator> <call><name pos:line="31" pos:column="204">ExecutionTimer</name><argument_list pos:line="31" pos:column="218">(<argument><expr><call><name><name pos:line="31" pos:column="219">Stopwatch</name><op:operator pos:line="31" pos:column="228">.</op:operator><name pos:line="31" pos:column="229">StartNew</name></name><argument_list pos:line="31" pos:column="237">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><lambda><parameter_list pos:line="31" pos:column="242">()</parameter_list> <op:operator pos:line="31" pos:column="245">=&gt;</op:operator> <name><name pos:line="31" pos:column="248">RuntimePolicy</name><op:operator pos:line="31" pos:column="261">.</op:operator><name pos:line="31" pos:column="262">On</name></name></lambda></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="32" pos:column="13">Assert</name><op:operator pos:line="32" pos:column="19">.</op:operator><name><name pos:line="32" pos:column="20">Throws</name><argument_list pos:line="32" pos:column="26">&lt;<argument><name pos:line="32" pos:column="27">ArgumentNullException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="32" pos:column="49">(<argument><expr><lambda><parameter_list pos:line="32" pos:column="50">()</parameter_list> <op:operator pos:line="32" pos:column="53">=&gt;</op:operator> <op:operator pos:line="32" pos:column="56">new</op:operator> <call><name pos:line="32" pos:column="60">AlternateTypeToCastleInterceptorAdapter</name><argument_list pos:line="32" pos:column="99">(<argument><expr><name><name pos:line="32" pos:column="100">implementationMock</name><op:operator pos:line="32" pos:column="118">.</op:operator><name pos:line="32" pos:column="119">Object</name></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="127">null</name></expr></argument>, <argument><expr><op:operator pos:line="32" pos:column="133">new</op:operator> <call><name><name pos:line="32" pos:column="137">Mock</name><argument_list pos:line="32" pos:column="141">&lt;<argument><name pos:line="32" pos:column="142">IMessageBroker</name></argument>&gt;</argument_list></name><argument_list pos:line="32" pos:column="157">()</argument_list></call><op:operator pos:line="32" pos:column="159">.</op:operator><name pos:line="32" pos:column="160">Object</name></expr></argument>, <argument><expr><op:operator pos:line="32" pos:column="168">new</op:operator> <call><name><name pos:line="32" pos:column="172">Mock</name><argument_list pos:line="32" pos:column="176">&lt;<argument><name pos:line="32" pos:column="177">IProxyFactory</name></argument>&gt;</argument_list></name><argument_list pos:line="32" pos:column="191">()</argument_list></call><op:operator pos:line="32" pos:column="193">.</op:operator><name pos:line="32" pos:column="194">Object</name></expr></argument>, <argument><expr><lambda><parameter_list pos:line="32" pos:column="202">()</parameter_list> <op:operator pos:line="32" pos:column="205">=&gt;</op:operator> <op:operator pos:line="32" pos:column="208">new</op:operator> <call><name pos:line="32" pos:column="212">ExecutionTimer</name><argument_list pos:line="32" pos:column="226">(<argument><expr><call><name><name pos:line="32" pos:column="227">Stopwatch</name><op:operator pos:line="32" pos:column="236">.</op:operator><name pos:line="32" pos:column="237">StartNew</name></name><argument_list pos:line="32" pos:column="245">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><lambda><parameter_list pos:line="32" pos:column="250">()</parameter_list> <op:operator pos:line="32" pos:column="253">=&gt;</op:operator> <name><name pos:line="32" pos:column="256">RuntimePolicy</name><op:operator pos:line="32" pos:column="269">.</op:operator><name pos:line="32" pos:column="270">On</name></name></lambda></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="35" pos:column="9">[<expr><name pos:line="35" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="36" pos:column="9">public</specifier> <name pos:line="36" pos:column="16">void</name></type> <name pos:line="36" pos:column="21">PassThroughMethodToImplement</name><parameter_list pos:line="36" pos:column="49">()</parameter_list>
        <block pos:line="37" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="38" pos:column="13">var</name></type> <name pos:line="38" pos:column="17">expected</name> <init pos:line="38" pos:column="26">= <expr><call><name pos:line="38" pos:column="28">GetType</name><argument_list pos:line="38" pos:column="35">()</argument_list></call><op:operator pos:line="38" pos:column="37">.</op:operator><call><name pos:line="38" pos:column="38">GetMethods</name><argument_list pos:line="38" pos:column="48">()</argument_list></call><op:operator pos:line="38" pos:column="50">.</op:operator><call><name pos:line="38" pos:column="51">First</name><argument_list pos:line="38" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="39" pos:column="13">var</name></type> <name pos:line="39" pos:column="17">implementationMock</name> <init pos:line="39" pos:column="36">= <expr><op:operator pos:line="39" pos:column="38">new</op:operator> <call><name><name pos:line="39" pos:column="42">Mock</name><argument_list pos:line="39" pos:column="46">&lt;<argument><name pos:line="39" pos:column="47">IAlternateMethod</name></argument>&gt;</argument_list></name><argument_list pos:line="39" pos:column="64">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="40" pos:column="13">implementationMock</name><op:operator pos:line="40" pos:column="31">.</op:operator><name pos:line="40" pos:column="32">Setup</name></name><argument_list pos:line="40" pos:column="37">(<argument><expr><lambda><name pos:line="40" pos:column="38">i</name> <op:operator pos:line="40" pos:column="40">=&gt;</op:operator> <name><name pos:line="40" pos:column="43">i</name><op:operator pos:line="40" pos:column="44">.</op:operator><name pos:line="40" pos:column="45">MethodToImplement</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="40" pos:column="63">.</op:operator><call><name pos:line="40" pos:column="64">Returns</name><argument_list pos:line="40" pos:column="71">(<argument><expr><name pos:line="40" pos:column="72">expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="41" pos:column="13">var</name></type> <name pos:line="41" pos:column="17">loggerMock</name> <init pos:line="41" pos:column="28">= <expr><op:operator pos:line="41" pos:column="30">new</op:operator> <call><name><name pos:line="41" pos:column="34">Mock</name><argument_list pos:line="41" pos:column="38">&lt;<argument><name pos:line="41" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="41" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="43" pos:column="13">var</name></type> <name pos:line="43" pos:column="17">adapter</name> <init pos:line="43" pos:column="25">= <expr><op:operator pos:line="43" pos:column="27">new</op:operator> <call><name pos:line="43" pos:column="31">AlternateTypeToCastleInterceptorAdapter</name><argument_list pos:line="43" pos:column="70">(<argument><expr><name><name pos:line="43" pos:column="71">implementationMock</name><op:operator pos:line="43" pos:column="89">.</op:operator><name pos:line="43" pos:column="90">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="43" pos:column="98">loggerMock</name><op:operator pos:line="43" pos:column="108">.</op:operator><name pos:line="43" pos:column="109">Object</name></name></expr></argument>, <argument><expr><op:operator pos:line="43" pos:column="117">new</op:operator> <call><name><name pos:line="43" pos:column="121">Mock</name><argument_list pos:line="43" pos:column="125">&lt;<argument><name pos:line="43" pos:column="126">IMessageBroker</name></argument>&gt;</argument_list></name><argument_list pos:line="43" pos:column="141">()</argument_list></call><op:operator pos:line="43" pos:column="143">.</op:operator><name pos:line="43" pos:column="144">Object</name></expr></argument>, <argument><expr><op:operator pos:line="43" pos:column="152">new</op:operator> <call><name><name pos:line="43" pos:column="156">Mock</name><argument_list pos:line="43" pos:column="160">&lt;<argument><name pos:line="43" pos:column="161">IProxyFactory</name></argument>&gt;</argument_list></name><argument_list pos:line="43" pos:column="175">()</argument_list></call><op:operator pos:line="43" pos:column="177">.</op:operator><name pos:line="43" pos:column="178">Object</name></expr></argument>, <argument><expr><lambda><parameter_list pos:line="43" pos:column="186">()</parameter_list> <op:operator pos:line="43" pos:column="189">=&gt;</op:operator> <op:operator pos:line="43" pos:column="192">new</op:operator> <call><name pos:line="43" pos:column="196">ExecutionTimer</name><argument_list pos:line="43" pos:column="210">(<argument><expr><call><name><name pos:line="43" pos:column="211">Stopwatch</name><op:operator pos:line="43" pos:column="220">.</op:operator><name pos:line="43" pos:column="221">StartNew</name></name><argument_list pos:line="43" pos:column="229">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><lambda><parameter_list pos:line="43" pos:column="234">()</parameter_list> <op:operator pos:line="43" pos:column="237">=&gt;</op:operator> <name><name pos:line="43" pos:column="240">RuntimePolicy</name><op:operator pos:line="43" pos:column="253">.</op:operator><name pos:line="43" pos:column="254">On</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="45" pos:column="13">Assert</name><op:operator pos:line="45" pos:column="19">.</op:operator><name pos:line="45" pos:column="20">Equal</name></name><argument_list pos:line="45" pos:column="25">(<argument><expr><name pos:line="45" pos:column="26">expected</name></expr></argument>, <argument><expr><name><name pos:line="45" pos:column="36">adapter</name><op:operator pos:line="45" pos:column="43">.</op:operator><name pos:line="45" pos:column="44">MethodToImplement</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="48" pos:column="9">[<expr><name pos:line="48" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="49" pos:column="9">public</specifier> <name pos:line="49" pos:column="16">void</name></type> <name pos:line="49" pos:column="21">Intercept</name><parameter_list pos:line="49" pos:column="30">()</parameter_list>
        <block pos:line="50" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="51" pos:column="13">var</name></type> <name pos:line="51" pos:column="17">implementationMock</name> <init pos:line="51" pos:column="36">= <expr><op:operator pos:line="51" pos:column="38">new</op:operator> <call><name><name pos:line="51" pos:column="42">Mock</name><argument_list pos:line="51" pos:column="46">&lt;<argument><name pos:line="51" pos:column="47">IAlternateMethod</name></argument>&gt;</argument_list></name><argument_list pos:line="51" pos:column="64">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="52" pos:column="13">var</name></type> <name pos:line="52" pos:column="17">loggerMock</name> <init pos:line="52" pos:column="28">= <expr><op:operator pos:line="52" pos:column="30">new</op:operator> <call><name><name pos:line="52" pos:column="34">Mock</name><argument_list pos:line="52" pos:column="38">&lt;<argument><name pos:line="52" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="52" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="54" pos:column="13">var</name></type> <name pos:line="54" pos:column="17">adapter</name> <init pos:line="54" pos:column="25">= <expr><op:operator pos:line="54" pos:column="27">new</op:operator> <call><name pos:line="54" pos:column="31">AlternateTypeToCastleInterceptorAdapter</name><argument_list pos:line="54" pos:column="70">(<argument><expr><name><name pos:line="54" pos:column="71">implementationMock</name><op:operator pos:line="54" pos:column="89">.</op:operator><name pos:line="54" pos:column="90">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="54" pos:column="98">loggerMock</name><op:operator pos:line="54" pos:column="108">.</op:operator><name pos:line="54" pos:column="109">Object</name></name></expr></argument>, <argument><expr><op:operator pos:line="54" pos:column="117">new</op:operator> <call><name><name pos:line="54" pos:column="121">Mock</name><argument_list pos:line="54" pos:column="125">&lt;<argument><name pos:line="54" pos:column="126">IMessageBroker</name></argument>&gt;</argument_list></name><argument_list pos:line="54" pos:column="141">()</argument_list></call><op:operator pos:line="54" pos:column="143">.</op:operator><name pos:line="54" pos:column="144">Object</name></expr></argument>, <argument><expr><op:operator pos:line="54" pos:column="152">new</op:operator> <call><name><name pos:line="54" pos:column="156">Mock</name><argument_list pos:line="54" pos:column="160">&lt;<argument><name pos:line="54" pos:column="161">IProxyFactory</name></argument>&gt;</argument_list></name><argument_list pos:line="54" pos:column="175">()</argument_list></call><op:operator pos:line="54" pos:column="177">.</op:operator><name pos:line="54" pos:column="178">Object</name></expr></argument>, <argument><expr><lambda><parameter_list pos:line="54" pos:column="186">()</parameter_list> <op:operator pos:line="54" pos:column="189">=&gt;</op:operator> <op:operator pos:line="54" pos:column="192">new</op:operator> <call><name pos:line="54" pos:column="196">ExecutionTimer</name><argument_list pos:line="54" pos:column="210">(<argument><expr><call><name><name pos:line="54" pos:column="211">Stopwatch</name><op:operator pos:line="54" pos:column="220">.</op:operator><name pos:line="54" pos:column="221">StartNew</name></name><argument_list pos:line="54" pos:column="229">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><lambda><parameter_list pos:line="54" pos:column="234">()</parameter_list> <op:operator pos:line="54" pos:column="237">=&gt;</op:operator> <name><name pos:line="54" pos:column="240">RuntimePolicy</name><op:operator pos:line="54" pos:column="253">.</op:operator><name pos:line="54" pos:column="254">On</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="56" pos:column="13">var</name></type> <name pos:line="56" pos:column="17">invocationMock</name> <init pos:line="56" pos:column="32">= <expr><op:operator pos:line="56" pos:column="34">new</op:operator> <call><name><name pos:line="56" pos:column="38">Mock</name><argument_list pos:line="56" pos:column="42">&lt;<argument><name pos:line="56" pos:column="43">IInvocation</name></argument>&gt;</argument_list></name><argument_list pos:line="56" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="58" pos:column="13">adapter</name><op:operator pos:line="58" pos:column="20">.</op:operator><name pos:line="58" pos:column="21">Intercept</name></name><argument_list pos:line="58" pos:column="30">(<argument><expr><name><name pos:line="58" pos:column="31">invocationMock</name><op:operator pos:line="58" pos:column="45">.</op:operator><name pos:line="58" pos:column="46">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="60" pos:column="13">implementationMock</name><op:operator pos:line="60" pos:column="31">.</op:operator><name pos:line="60" pos:column="32">Verify</name></name><argument_list pos:line="60" pos:column="38">(<argument><expr><lambda><name pos:line="60" pos:column="39">i</name> <op:operator pos:line="60" pos:column="41">=&gt;</op:operator> <call><name><name pos:line="60" pos:column="44">i</name><op:operator pos:line="60" pos:column="45">.</op:operator><name pos:line="60" pos:column="46">NewImplementation</name></name><argument_list pos:line="60" pos:column="63">(<argument><expr><call><name><name pos:line="60" pos:column="64">It</name><op:operator pos:line="60" pos:column="66">.</op:operator><name><name pos:line="60" pos:column="67">IsAny</name><argument_list pos:line="60" pos:column="72">&lt;<argument><name pos:line="60" pos:column="73">IAlternateMethodContext</name></argument>&gt;</argument_list></name></name><argument_list pos:line="60" pos:column="97">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
