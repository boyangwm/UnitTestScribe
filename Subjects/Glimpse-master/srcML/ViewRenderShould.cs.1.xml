<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Mvc\AlternateType\ViewRenderShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">IO</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Web</name><op:operator pos:line="3" pos:column="17">.</op:operator><name pos:line="3" pos:column="18">Mvc</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Core</name><op:operator pos:line="4" pos:column="19">.</op:operator><name pos:line="4" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Glimpse</name><op:operator pos:line="5" pos:column="14">.</op:operator><name pos:line="5" pos:column="15">Mvc</name><op:operator pos:line="5" pos:column="18">.</op:operator><name pos:line="5" pos:column="19">AlternateType</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Glimpse</name><op:operator pos:line="6" pos:column="14">.</op:operator><name pos:line="6" pos:column="15">Test</name><op:operator pos:line="6" pos:column="19">.</op:operator><name pos:line="6" pos:column="20">Common</name></name>;</using>
<using pos:line="7" pos:column="1">using <name pos:line="7" pos:column="7">Moq</name>;</using>
<using pos:line="8" pos:column="1">using <name pos:line="8" pos:column="7">Xunit</name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">Xunit</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">Extensions</name></name>;</using>

<namespace pos:line="11" pos:column="1">namespace <name><name pos:line="11" pos:column="11">Glimpse</name><op:operator pos:line="11" pos:column="18">.</op:operator><name pos:line="11" pos:column="19">Test</name><op:operator pos:line="11" pos:column="23">.</op:operator><name pos:line="11" pos:column="24">Mvc</name><op:operator pos:line="11" pos:column="27">.</op:operator><name pos:line="11" pos:column="28">AlternateType</name></name>
<block pos:line="12" pos:column="1">{
    <class><specifier pos:line="13" pos:column="5">public</specifier> class <name pos:line="13" pos:column="18">ViewRenderShould</name>
    <block pos:line="14" pos:column="5">{
        <function><type><attribute pos:line="15" pos:column="9">[<expr><name pos:line="15" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="16" pos:column="9">public</specifier> <name pos:line="16" pos:column="16">void</name></type> <name pos:line="16" pos:column="21">SetProperties</name><parameter_list pos:line="16" pos:column="34">()</parameter_list>
        <block pos:line="17" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="18" pos:column="13">var</name></type> <name pos:line="18" pos:column="17">sut</name> <init pos:line="18" pos:column="21">= <expr><op:operator pos:line="18" pos:column="23">new</op:operator> <call><name><name pos:line="18" pos:column="27">View</name><op:operator pos:line="18" pos:column="31">.</op:operator><name pos:line="18" pos:column="32">Render</name></name><argument_list pos:line="18" pos:column="38">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="20" pos:column="13">Assert</name><op:operator pos:line="20" pos:column="19">.</op:operator><name pos:line="20" pos:column="20">NotNull</name></name><argument_list pos:line="20" pos:column="27">(<argument><expr><name><name pos:line="20" pos:column="28">sut</name><op:operator pos:line="20" pos:column="31">.</op:operator><name pos:line="20" pos:column="32">MethodToImplement</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        
        <function><type><attribute pos:line="23" pos:column="9">[<expr><name pos:line="23" pos:column="10">Theory</name></expr><op:operator pos:line="23" pos:column="16">,</op:operator> <expr><name pos:line="23" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="24" pos:column="9">public</specifier> <name pos:line="24" pos:column="16">void</name></type> <name pos:line="24" pos:column="21">PublishMessagesWithOnPolicy</name><parameter_list pos:line="24" pos:column="48">(<param><decl><type><name><name pos:line="24" pos:column="49">View</name><op:operator pos:line="24" pos:column="53">.</op:operator><name pos:line="24" pos:column="54">Render</name></name></type> <name pos:line="24" pos:column="61">sut</name></decl></param>, <param><decl><type><name pos:line="24" pos:column="66">IAlternateMethodContext</name></type> <name pos:line="24" pos:column="90">context</name></decl></param>, <param><decl><type><name pos:line="24" pos:column="99">IViewCorrelationMixin</name></type> <name pos:line="24" pos:column="121">mixin</name></decl></param>, <param><decl><type><name pos:line="24" pos:column="128">ViewContext</name></type> <name pos:line="24" pos:column="140">viewContext</name></decl></param>)</parameter_list>
        <block pos:line="25" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="26" pos:column="13">context</name><op:operator pos:line="26" pos:column="20">.</op:operator><name pos:line="26" pos:column="21">Setup</name></name><argument_list pos:line="26" pos:column="26">(<argument><expr><lambda><name pos:line="26" pos:column="27">c</name> <op:operator pos:line="26" pos:column="29">=&gt;</op:operator> <name><name pos:line="26" pos:column="32">c</name><op:operator pos:line="26" pos:column="33">.</op:operator><name pos:line="26" pos:column="34">Arguments</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="26" pos:column="44">.</op:operator><call><name pos:line="26" pos:column="45">Returns</name><argument_list pos:line="26" pos:column="52">(<argument><expr><op:operator pos:line="26" pos:column="53">new</op:operator> <name><name pos:line="26" pos:column="57">object</name><index pos:line="26" pos:column="63">[]</index></name> <block pos:line="26" pos:column="66">{ <expr><name pos:line="26" pos:column="68">viewContext</name></expr><op:operator pos:line="26" pos:column="79">,</op:operator> <expr><op:operator pos:line="26" pos:column="81">new</op:operator> <call><name pos:line="26" pos:column="85">StringWriter</name><argument_list pos:line="26" pos:column="97">()</argument_list></call></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="27" pos:column="13">context</name><op:operator pos:line="27" pos:column="20">.</op:operator><name pos:line="27" pos:column="21">Setup</name></name><argument_list pos:line="27" pos:column="26">(<argument><expr><lambda><name pos:line="27" pos:column="27">c</name> <op:operator pos:line="27" pos:column="29">=&gt;</op:operator> <name><name pos:line="27" pos:column="32">c</name><op:operator pos:line="27" pos:column="33">.</op:operator><name pos:line="27" pos:column="34">Proxy</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="27" pos:column="40">.</op:operator><call><name pos:line="27" pos:column="41">Returns</name><argument_list pos:line="27" pos:column="48">(<argument><expr><name pos:line="27" pos:column="49">mixin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="29" pos:column="13">sut</name><op:operator pos:line="29" pos:column="16">.</op:operator><name pos:line="29" pos:column="17">NewImplementation</name></name><argument_list pos:line="29" pos:column="34">(<argument><expr><name pos:line="29" pos:column="35">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="31" pos:column="13">context</name><op:operator pos:line="31" pos:column="20">.</op:operator><name pos:line="31" pos:column="21">TimerStrategy</name></name><argument_list pos:line="31" pos:column="34">()</argument_list></call><op:operator pos:line="31" pos:column="36">.</op:operator><call><name pos:line="31" pos:column="37">Verify</name><argument_list pos:line="31" pos:column="43">(<argument><expr><lambda><name pos:line="31" pos:column="44">t</name> <op:operator pos:line="31" pos:column="46">=&gt;</op:operator> <call><name><name pos:line="31" pos:column="49">t</name><op:operator pos:line="31" pos:column="50">.</op:operator><name pos:line="31" pos:column="51">Time</name></name><argument_list pos:line="31" pos:column="55">(<argument><expr><call><name><name pos:line="31" pos:column="56">It</name><op:operator pos:line="31" pos:column="58">.</op:operator><name><name pos:line="31" pos:column="59">IsAny</name><argument_list pos:line="31" pos:column="64">&lt;<argument><name pos:line="31" pos:column="65">Action</name></argument>&gt;</argument_list></name></name><argument_list pos:line="31" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="32" pos:column="13">context</name><op:operator pos:line="32" pos:column="20">.</op:operator><name pos:line="32" pos:column="21">MessageBroker</name><op:operator pos:line="32" pos:column="34">.</op:operator><name pos:line="32" pos:column="35">Verify</name></name><argument_list pos:line="32" pos:column="41">(<argument><expr><lambda><name pos:line="32" pos:column="42">b</name> <op:operator pos:line="32" pos:column="44">=&gt;</op:operator> <call><name><name pos:line="32" pos:column="47">b</name><op:operator pos:line="32" pos:column="48">.</op:operator><name pos:line="32" pos:column="49">Publish</name></name><argument_list pos:line="32" pos:column="56">(<argument><expr><call><name><name pos:line="32" pos:column="57">It</name><op:operator pos:line="32" pos:column="59">.</op:operator><name><name pos:line="32" pos:column="60">IsAny</name><argument_list pos:line="32" pos:column="65">&lt;<argument><name><name pos:line="32" pos:column="66">View</name><op:operator pos:line="32" pos:column="70">.</op:operator><name pos:line="32" pos:column="71">Render</name><op:operator pos:line="32" pos:column="77">.</op:operator><name pos:line="32" pos:column="78">Message</name></name></argument>&gt;</argument_list></name></name><argument_list pos:line="32" pos:column="86">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        }</block></function> 

        <function><type><attribute pos:line="35" pos:column="9">[<expr><name pos:line="35" pos:column="10">Theory</name></expr><op:operator pos:line="35" pos:column="16">,</op:operator> <expr><name pos:line="35" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="36" pos:column="9">public</specifier> <name pos:line="36" pos:column="16">void</name></type> <name pos:line="36" pos:column="21">ProceedWithOffPolicy</name><parameter_list pos:line="36" pos:column="41">(<param><decl><type><name><name pos:line="36" pos:column="42">View</name><op:operator pos:line="36" pos:column="46">.</op:operator><name pos:line="36" pos:column="47">Render</name></name></type> <name pos:line="36" pos:column="54">sut</name></decl></param>, <param><decl><type><name pos:line="36" pos:column="59">IAlternateMethodContext</name></type> <name pos:line="36" pos:column="83">context</name></decl></param>)</parameter_list>
        <block pos:line="37" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="38" pos:column="13">context</name><op:operator pos:line="38" pos:column="20">.</op:operator><name pos:line="38" pos:column="21">Setup</name></name><argument_list pos:line="38" pos:column="26">(<argument><expr><lambda><name pos:line="38" pos:column="27">c</name> <op:operator pos:line="38" pos:column="29">=&gt;</op:operator> <name><name pos:line="38" pos:column="32">c</name><op:operator pos:line="38" pos:column="33">.</op:operator><name pos:line="38" pos:column="34">RuntimePolicyStrategy</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="38" pos:column="56">.</op:operator><call><name pos:line="38" pos:column="57">Returns</name><argument_list pos:line="38" pos:column="64">(<argument><expr><lambda><parameter_list pos:line="38" pos:column="65">()</parameter_list> <op:operator pos:line="38" pos:column="68">=&gt;</op:operator> <name><name pos:line="38" pos:column="71">RuntimePolicy</name><op:operator pos:line="38" pos:column="84">.</op:operator><name pos:line="38" pos:column="85">Off</name></name></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="40" pos:column="13">sut</name><op:operator pos:line="40" pos:column="16">.</op:operator><name pos:line="40" pos:column="17">NewImplementation</name></name><argument_list pos:line="40" pos:column="34">(<argument><expr><name pos:line="40" pos:column="35">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="42" pos:column="13">context</name><op:operator pos:line="42" pos:column="20">.</op:operator><name pos:line="42" pos:column="21">Verify</name></name><argument_list pos:line="42" pos:column="27">(<argument><expr><lambda><name pos:line="42" pos:column="28">c</name> <op:operator pos:line="42" pos:column="30">=&gt;</op:operator> <call><name><name pos:line="42" pos:column="33">c</name><op:operator pos:line="42" pos:column="34">.</op:operator><name pos:line="42" pos:column="35">Proceed</name></name><argument_list pos:line="42" pos:column="42">()</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="43" pos:column="13">context</name><op:operator pos:line="43" pos:column="20">.</op:operator><name pos:line="43" pos:column="21">TimerStrategy</name></name><argument_list pos:line="43" pos:column="34">()</argument_list></call><op:operator pos:line="43" pos:column="36">.</op:operator><call><name pos:line="43" pos:column="37">Verify</name><argument_list pos:line="43" pos:column="43">(<argument><expr><lambda><name pos:line="43" pos:column="44">t</name> <op:operator pos:line="43" pos:column="46">=&gt;</op:operator> <call><name><name pos:line="43" pos:column="49">t</name><op:operator pos:line="43" pos:column="50">.</op:operator><name pos:line="43" pos:column="51">Time</name></name><argument_list pos:line="43" pos:column="55">(<argument><expr><call><name><name pos:line="43" pos:column="56">It</name><op:operator pos:line="43" pos:column="58">.</op:operator><name><name pos:line="43" pos:column="59">IsAny</name><argument_list pos:line="43" pos:column="64">&lt;<argument><name pos:line="43" pos:column="65">Action</name></argument>&gt;</argument_list></name></name><argument_list pos:line="43" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><call><name><name pos:line="43" pos:column="77">Times</name><op:operator pos:line="43" pos:column="82">.</op:operator><name pos:line="43" pos:column="83">Never</name></name><argument_list pos:line="43" pos:column="88">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function> 
    }</block></class>
}</block></namespace></unit>
