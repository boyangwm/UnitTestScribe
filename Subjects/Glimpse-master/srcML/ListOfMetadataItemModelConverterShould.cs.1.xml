<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Mvc\SerializationConverter\ListOfMetadataItemModelConverterShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">System</name><op:operator pos:line="1" pos:column="13">.</op:operator><name pos:line="1" pos:column="14">Collections</name><op:operator pos:line="1" pos:column="25">.</op:operator><name pos:line="1" pos:column="26">Generic</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Linq</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Glimpse</name><op:operator pos:line="3" pos:column="14">.</op:operator><name pos:line="3" pos:column="15">Mvc</name><op:operator pos:line="3" pos:column="18">.</op:operator><name pos:line="3" pos:column="19">Model</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Mvc</name><op:operator pos:line="4" pos:column="18">.</op:operator><name pos:line="4" pos:column="19">SerializationConverter</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Glimpse</name><op:operator pos:line="5" pos:column="14">.</op:operator><name pos:line="5" pos:column="15">Test</name><op:operator pos:line="5" pos:column="19">.</op:operator><name pos:line="5" pos:column="20">Common</name></name>;</using>
<using pos:line="6" pos:column="1">using <name pos:line="6" pos:column="7">Xunit</name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Xunit</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">Extensions</name></name>;</using>

<namespace pos:line="9" pos:column="1">namespace <name><name pos:line="9" pos:column="11">Glimpse</name><op:operator pos:line="9" pos:column="18">.</op:operator><name pos:line="9" pos:column="19">Test</name><op:operator pos:line="9" pos:column="23">.</op:operator><name pos:line="9" pos:column="24">Mvc</name><op:operator pos:line="9" pos:column="27">.</op:operator><name pos:line="9" pos:column="28">SerializationConverter</name></name>
<block pos:line="10" pos:column="1">{
    <class><specifier pos:line="11" pos:column="5">public</specifier> class <name pos:line="11" pos:column="18">ListOfMetadataItemModelConverterShould</name>
    <block pos:line="12" pos:column="5">{
        <function><type><attribute pos:line="13" pos:column="9">[<expr><name pos:line="13" pos:column="10">Theory</name></expr><op:operator pos:line="13" pos:column="16">,</op:operator> <expr><name pos:line="13" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="14" pos:column="9">public</specifier> <name pos:line="14" pos:column="16">void</name></type> <name pos:line="14" pos:column="21">ConvertToList</name><parameter_list pos:line="14" pos:column="34">(<param><decl><type><name pos:line="14" pos:column="35">ListOfMetadataItemModelConverter</name></type> <name pos:line="14" pos:column="68">sut</name></decl></param>)</parameter_list>
        <block pos:line="15" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="16" pos:column="13">var</name></type> <name pos:line="16" pos:column="17">model</name> <init pos:line="16" pos:column="23">= <expr><op:operator pos:line="16" pos:column="25">new</op:operator> <name><name pos:line="16" pos:column="29">List</name><argument_list pos:line="16" pos:column="33">&lt;<argument><name pos:line="16" pos:column="34">MetadataItemModel</name></argument>&gt;</argument_list></name> <block pos:line="16" pos:column="53">{ <expr><op:operator pos:line="16" pos:column="55">new</op:operator> <name pos:line="16" pos:column="59">MetadataItemModel</name> <block pos:line="16" pos:column="77">{ <expr><name pos:line="16" pos:column="79">Action</name> <op:operator pos:line="16" pos:column="86">=</op:operator> <lit:literal type="string" pos:line="16" pos:column="88">"Action"</lit:literal></expr>, <expr><name pos:line="16" pos:column="98">Controller</name> <op:operator pos:line="16" pos:column="109">=</op:operator> <lit:literal type="string" pos:line="16" pos:column="111">"Controller"</lit:literal></expr>, <expr><name pos:line="16" pos:column="125">DisplayName</name> <op:operator pos:line="16" pos:column="137">=</op:operator> <lit:literal type="string" pos:line="16" pos:column="139">"Name"</lit:literal></expr>, <expr><name pos:line="16" pos:column="147">Name</name> <op:operator pos:line="16" pos:column="152">=</op:operator> <lit:literal type="string" pos:line="16" pos:column="154">"Display"</lit:literal></expr>, <expr><name pos:line="16" pos:column="165">Type</name> <op:operator pos:line="16" pos:column="170">=</op:operator> <call><name pos:line="16" pos:column="172">typeof</name><argument_list pos:line="16" pos:column="178">(<argument><expr><name pos:line="16" pos:column="179">int</name></expr></argument>)</argument_list></call></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="18" pos:column="13">var</name></type> <name pos:line="18" pos:column="17">result</name> <init pos:line="18" pos:column="24">= <expr><call><name><name pos:line="18" pos:column="26">sut</name><op:operator pos:line="18" pos:column="29">.</op:operator><name pos:line="18" pos:column="30">Convert</name></name><argument_list pos:line="18" pos:column="37">(<argument><expr><name pos:line="18" pos:column="38">model</name></expr></argument>)</argument_list></call> <op:operator pos:line="18" pos:column="45">as</op:operator> <name><name pos:line="18" pos:column="48">IEnumerable</name><argument_list pos:line="18" pos:column="59">&lt;<argument><name pos:line="18" pos:column="60">object</name></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="20" pos:column="13">Assert</name><op:operator pos:line="20" pos:column="19">.</op:operator><name pos:line="20" pos:column="20">NotNull</name></name><argument_list pos:line="20" pos:column="27">(<argument><expr><name pos:line="20" pos:column="28">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="21" pos:column="13">Assert</name><op:operator pos:line="21" pos:column="19">.</op:operator><name pos:line="21" pos:column="20">Equal</name></name><argument_list pos:line="21" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="21" pos:column="26">2</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="21" pos:column="29">result</name><op:operator pos:line="21" pos:column="35">.</op:operator><name pos:line="21" pos:column="36">Count</name></name><argument_list pos:line="21" pos:column="41">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
