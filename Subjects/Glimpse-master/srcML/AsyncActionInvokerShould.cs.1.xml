<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Mvc\AlternateType\AsyncActionInvokerShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">Glimpse</name><op:operator pos:line="1" pos:column="14">.</op:operator><name pos:line="1" pos:column="15">Core</name><op:operator pos:line="1" pos:column="19">.</op:operator><name pos:line="1" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">Glimpse</name><op:operator pos:line="2" pos:column="14">.</op:operator><name pos:line="2" pos:column="15">Mvc</name><op:operator pos:line="2" pos:column="18">.</op:operator><name pos:line="2" pos:column="19">AlternateType</name></name>;</using>
<using pos:line="3" pos:column="1">using <name pos:line="3" pos:column="7">Moq</name>;</using>
<using pos:line="4" pos:column="1">using <name pos:line="4" pos:column="7">Xunit</name>;</using>

<namespace pos:line="6" pos:column="1">namespace <name><name pos:line="6" pos:column="11">Glimpse</name><op:operator pos:line="6" pos:column="18">.</op:operator><name pos:line="6" pos:column="19">Test</name><op:operator pos:line="6" pos:column="23">.</op:operator><name pos:line="6" pos:column="24">Mvc</name><op:operator pos:line="6" pos:column="27">.</op:operator><name pos:line="6" pos:column="28">AlternateType</name></name>
<block pos:line="7" pos:column="1">{
    <class><specifier pos:line="8" pos:column="5">public</specifier> class <name pos:line="8" pos:column="18">AsyncActionInvokerShould</name>
    <block pos:line="9" pos:column="5">{
        <function><type><attribute pos:line="10" pos:column="9">[<expr><name pos:line="10" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="11" pos:column="9">public</specifier> <name pos:line="11" pos:column="16">void</name></type> <name pos:line="11" pos:column="21">ReturnAllMethods</name><parameter_list pos:line="11" pos:column="37">()</parameter_list>
        <block pos:line="12" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="13" pos:column="13">var</name></type> <name pos:line="13" pos:column="17">sut</name> <init pos:line="13" pos:column="21">= <expr><op:operator pos:line="13" pos:column="23">new</op:operator> <call><name pos:line="13" pos:column="27">AsyncActionInvoker</name><argument_list pos:line="13" pos:column="45">(<argument><expr><op:operator pos:line="13" pos:column="46">new</op:operator> <call><name><name pos:line="13" pos:column="50">Mock</name><argument_list pos:line="13" pos:column="54">&lt;<argument><name pos:line="13" pos:column="55">IProxyFactory</name></argument>&gt;</argument_list></name><argument_list pos:line="13" pos:column="69">()</argument_list></call><op:operator pos:line="13" pos:column="71">.</op:operator><name pos:line="13" pos:column="72">Object</name></expr></argument>)</argument_list></call><op:operator pos:line="13" pos:column="79">.</op:operator><name pos:line="13" pos:column="80">AllMethods</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="15" pos:column="13">Assert</name><op:operator pos:line="15" pos:column="19">.</op:operator><name pos:line="15" pos:column="20">NotEmpty</name></name><argument_list pos:line="15" pos:column="28">(<argument><expr><name pos:line="15" pos:column="29">sut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
