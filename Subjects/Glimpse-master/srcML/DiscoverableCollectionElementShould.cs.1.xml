<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Core\Configuration\DiscoverableCollectionElementShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">Glimpse</name><op:operator pos:line="1" pos:column="14">.</op:operator><name pos:line="1" pos:column="15">Core</name><op:operator pos:line="1" pos:column="19">.</op:operator><name pos:line="1" pos:column="20">Configuration</name></name>;</using>
<using pos:line="2" pos:column="1">using <name pos:line="2" pos:column="7">Xunit</name>;</using>

<namespace pos:line="4" pos:column="1">namespace <name><name pos:line="4" pos:column="11">Glimpse</name><op:operator pos:line="4" pos:column="18">.</op:operator><name pos:line="4" pos:column="19">Test</name><op:operator pos:line="4" pos:column="23">.</op:operator><name pos:line="4" pos:column="24">Core</name><op:operator pos:line="4" pos:column="28">.</op:operator><name pos:line="4" pos:column="29">Configuration</name></name>
<block pos:line="5" pos:column="1">{
    <class><specifier pos:line="6" pos:column="5">public</specifier> class <name pos:line="6" pos:column="18">DiscoverableCollectionElementShould</name>
    <block pos:line="7" pos:column="5">{
        <function><type><attribute pos:line="8" pos:column="9">[<expr><name pos:line="8" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="9" pos:column="9">public</specifier> <name pos:line="9" pos:column="16">void</name></type> <name pos:line="9" pos:column="21">ReturnDefaultAutoDiscoverValue</name><parameter_list pos:line="9" pos:column="51">()</parameter_list>
        <block pos:line="10" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="11" pos:column="13">var</name></type> <name pos:line="11" pos:column="17">element</name> <init pos:line="11" pos:column="25">= <expr><op:operator pos:line="11" pos:column="27">new</op:operator> <call><name pos:line="11" pos:column="31">DiscoverableCollectionElement</name><argument_list pos:line="11" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="12" pos:column="13">Assert</name><op:operator pos:line="12" pos:column="19">.</op:operator><name pos:line="12" pos:column="20">True</name></name><argument_list pos:line="12" pos:column="24">(<argument><expr><name><name pos:line="12" pos:column="25">element</name><op:operator pos:line="12" pos:column="32">.</op:operator><name pos:line="12" pos:column="33">AutoDiscover</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="15" pos:column="9">[<expr><name pos:line="15" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="16" pos:column="9">public</specifier> <name pos:line="16" pos:column="16">void</name></type> <name pos:line="16" pos:column="21">GetSetAutoDiscover</name><parameter_list pos:line="16" pos:column="39">()</parameter_list>
        <block pos:line="17" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="18" pos:column="13">var</name></type> <name pos:line="18" pos:column="17">ad</name> <init pos:line="18" pos:column="20">= <expr><lit:literal type="boolean" pos:line="18" pos:column="22">false</lit:literal></expr></init></decl>;</decl_stmt>
            
            <decl_stmt><decl><type><name pos:line="20" pos:column="13">var</name></type> <name pos:line="20" pos:column="17">element</name> <init pos:line="20" pos:column="25">= <expr><op:operator pos:line="20" pos:column="27">new</op:operator> <call><name pos:line="20" pos:column="31">DiscoverableCollectionElement</name><argument_list pos:line="20" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>


            <expr_stmt><expr><name><name pos:line="23" pos:column="13">element</name><op:operator pos:line="23" pos:column="20">.</op:operator><name pos:line="23" pos:column="21">AutoDiscover</name></name> <op:operator pos:line="23" pos:column="34">=</op:operator> <name pos:line="23" pos:column="36">ad</name></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="25" pos:column="13">Assert</name><op:operator pos:line="25" pos:column="19">.</op:operator><name pos:line="25" pos:column="20">Equal</name></name><argument_list pos:line="25" pos:column="25">(<argument><expr><name pos:line="25" pos:column="26">ad</name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="30">element</name><op:operator pos:line="25" pos:column="37">.</op:operator><name pos:line="25" pos:column="38">AutoDiscover</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="28" pos:column="9">[<expr><name pos:line="28" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="29" pos:column="9">public</specifier> <name pos:line="29" pos:column="16">void</name></type> <name pos:line="29" pos:column="21">GetSetDiscoveryLocation</name><parameter_list pos:line="29" pos:column="44">()</parameter_list>
        <block pos:line="30" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="31" pos:column="13">var</name></type> <name pos:line="31" pos:column="17">location</name> <init pos:line="31" pos:column="26">= <expr><lit:literal type="string" pos:line="31" pos:column="28">"anything"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="32" pos:column="13">var</name></type> <name pos:line="32" pos:column="17">element</name> <init pos:line="32" pos:column="25">= <expr><op:operator pos:line="32" pos:column="27">new</op:operator> <call><name pos:line="32" pos:column="31">DiscoverableCollectionElement</name><argument_list pos:line="32" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="33" pos:column="13">element</name><op:operator pos:line="33" pos:column="20">.</op:operator><name pos:line="33" pos:column="21">DiscoveryLocation</name></name> <op:operator pos:line="33" pos:column="39">=</op:operator> <name pos:line="33" pos:column="41">location</name></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="35" pos:column="13">Assert</name><op:operator pos:line="35" pos:column="19">.</op:operator><name pos:line="35" pos:column="20">Equal</name></name><argument_list pos:line="35" pos:column="25">(<argument><expr><name pos:line="35" pos:column="26">location</name></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="36">element</name><op:operator pos:line="35" pos:column="43">.</op:operator><name pos:line="35" pos:column="44">DiscoveryLocation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="38" pos:column="9">[<expr><name pos:line="38" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="39" pos:column="9">public</specifier> <name pos:line="39" pos:column="16">void</name></type> <name pos:line="39" pos:column="21">ReturnDefaultDiscoveryLocation</name><parameter_list pos:line="39" pos:column="51">()</parameter_list>
        <block pos:line="40" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="41" pos:column="13">var</name></type> <name pos:line="41" pos:column="17">element</name> <init pos:line="41" pos:column="25">= <expr><op:operator pos:line="41" pos:column="27">new</op:operator> <call><name pos:line="41" pos:column="31">DiscoverableCollectionElement</name><argument_list pos:line="41" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="42" pos:column="13">Assert</name><op:operator pos:line="42" pos:column="19">.</op:operator><name pos:line="42" pos:column="20">Empty</name></name><argument_list pos:line="42" pos:column="25">(<argument><expr><name><name pos:line="42" pos:column="26">element</name><op:operator pos:line="42" pos:column="33">.</op:operator><name pos:line="42" pos:column="34">DiscoveryLocation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="45" pos:column="9">[<expr><name pos:line="45" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="46" pos:column="9">public</specifier> <name pos:line="46" pos:column="16">void</name></type> <name pos:line="46" pos:column="21">GetSetIgnoredTypes</name><parameter_list pos:line="46" pos:column="39">()</parameter_list>
        <block pos:line="47" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="48" pos:column="13">var</name></type> <name pos:line="48" pos:column="17">types</name> <init pos:line="48" pos:column="23">= <expr><op:operator pos:line="48" pos:column="25">new</op:operator> <call><name pos:line="48" pos:column="29">TypeElementCollection</name><argument_list pos:line="48" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="50" pos:column="13">var</name></type> <name pos:line="50" pos:column="17">element</name> <init pos:line="50" pos:column="25">= <expr><op:operator pos:line="50" pos:column="27">new</op:operator> <call><name pos:line="50" pos:column="31">DiscoverableCollectionElement</name><argument_list pos:line="50" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="51" pos:column="13">element</name><op:operator pos:line="51" pos:column="20">.</op:operator><name pos:line="51" pos:column="21">IgnoredTypes</name></name> <op:operator pos:line="51" pos:column="34">=</op:operator> <name pos:line="51" pos:column="36">types</name></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="53" pos:column="13">Assert</name><op:operator pos:line="53" pos:column="19">.</op:operator><name pos:line="53" pos:column="20">Equal</name></name><argument_list pos:line="53" pos:column="25">(<argument><expr><name pos:line="53" pos:column="26">types</name></expr></argument>, <argument><expr><name><name pos:line="53" pos:column="33">element</name><op:operator pos:line="53" pos:column="40">.</op:operator><name pos:line="53" pos:column="41">IgnoredTypes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="56" pos:column="9">[<expr><name pos:line="56" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="57" pos:column="9">public</specifier> <name pos:line="57" pos:column="16">void</name></type> <name pos:line="57" pos:column="21">ReturnDefaultIgnoredTypes</name><parameter_list pos:line="57" pos:column="46">()</parameter_list>
        <block pos:line="58" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="59" pos:column="13">var</name></type> <name pos:line="59" pos:column="17">element</name> <init pos:line="59" pos:column="25">= <expr><op:operator pos:line="59" pos:column="27">new</op:operator> <call><name pos:line="59" pos:column="31">DiscoverableCollectionElement</name><argument_list pos:line="59" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="60" pos:column="13">var</name></type> <name pos:line="60" pos:column="17">ignoredTypes</name> <init pos:line="60" pos:column="30">= <expr><name><name pos:line="60" pos:column="32">element</name><op:operator pos:line="60" pos:column="39">.</op:operator><name pos:line="60" pos:column="40">IgnoredTypes</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="62" pos:column="13">Assert</name><op:operator pos:line="62" pos:column="19">.</op:operator><name pos:line="62" pos:column="20">NotNull</name></name><argument_list pos:line="62" pos:column="27">(<argument><expr><name pos:line="62" pos:column="28">ignoredTypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="63" pos:column="13">Assert</name><op:operator pos:line="63" pos:column="19">.</op:operator><name pos:line="63" pos:column="20">Empty</name></name><argument_list pos:line="63" pos:column="25">(<argument><expr><name pos:line="63" pos:column="26">ignoredTypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
