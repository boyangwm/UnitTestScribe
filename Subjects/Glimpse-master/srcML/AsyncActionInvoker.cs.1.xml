<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Mvc\AlternateType\AsyncActionInvoker.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">System</name><op:operator pos:line="1" pos:column="13">.</op:operator><name pos:line="1" pos:column="14">Collections</name><op:operator pos:line="1" pos:column="25">.</op:operator><name pos:line="1" pos:column="26">Generic</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Linq</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Reflection</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Web</name><op:operator pos:line="4" pos:column="17">.</op:operator><name pos:line="4" pos:column="18">Mvc</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Web</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">Mvc</name><op:operator pos:line="5" pos:column="21">.</op:operator><name pos:line="5" pos:column="22">Async</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Glimpse</name><op:operator pos:line="6" pos:column="14">.</op:operator><name pos:line="6" pos:column="15">Core</name><op:operator pos:line="6" pos:column="19">.</op:operator><name pos:line="6" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Glimpse</name><op:operator pos:line="7" pos:column="14">.</op:operator><name pos:line="7" pos:column="15">Core</name><op:operator pos:line="7" pos:column="19">.</op:operator><name pos:line="7" pos:column="20">Message</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Glimpse</name><op:operator pos:line="8" pos:column="14">.</op:operator><name pos:line="8" pos:column="15">Mvc</name><op:operator pos:line="8" pos:column="18">.</op:operator><name pos:line="8" pos:column="19">Message</name></name>;</using>

<namespace pos:line="10" pos:column="1">namespace <name><name pos:line="10" pos:column="11">Glimpse</name><op:operator pos:line="10" pos:column="18">.</op:operator><name pos:line="10" pos:column="19">Mvc</name><op:operator pos:line="10" pos:column="22">.</op:operator><name pos:line="10" pos:column="23">AlternateType</name></name>
<block pos:line="11" pos:column="1">{
    <class><specifier pos:line="12" pos:column="5">public</specifier> class <name pos:line="12" pos:column="18">AsyncActionInvoker</name> <super pos:line="12" pos:column="37">: <name><name pos:line="12" pos:column="39">AlternateType</name><argument_list pos:line="12" pos:column="52">&lt;<argument><name pos:line="12" pos:column="53">IAsyncActionInvoker</name></argument>&gt;</argument_list></name></super>
    <block pos:line="13" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="14" pos:column="9">private</specifier> <name><name pos:line="14" pos:column="17">IEnumerable</name><argument_list pos:line="14" pos:column="28">&lt;<argument><name pos:line="14" pos:column="29">IAlternateMethod</name></argument>&gt;</argument_list></name></type> <name pos:line="14" pos:column="47">allMethods</name></decl>;</decl_stmt>

        <constructor><specifier pos:line="16" pos:column="9">public</specifier> <name pos:line="16" pos:column="16">AsyncActionInvoker</name><parameter_list pos:line="16" pos:column="34">(<param><decl><type><name pos:line="16" pos:column="35">IProxyFactory</name></type> <name pos:line="16" pos:column="49">proxyFactory</name></decl></param>)</parameter_list> <member_list pos:line="16" pos:column="63">: <call><name pos:line="16" pos:column="65">base</name><argument_list pos:line="16" pos:column="69">(<argument><expr><name pos:line="16" pos:column="70">proxyFactory</name></expr></argument>)</argument_list></call>
        </member_list><block pos:line="17" pos:column="9">{
        }</block></constructor>

        <decl_stmt><decl><type><specifier pos:line="20" pos:column="9">public</specifier> <specifier pos:line="20" pos:column="16">override</specifier> <name><name pos:line="20" pos:column="25">IEnumerable</name><argument_list pos:line="20" pos:column="36">&lt;<argument><name pos:line="20" pos:column="37">IAlternateMethod</name></argument>&gt;</argument_list></name></type> <name pos:line="20" pos:column="55">AllMethods</name>
        <block pos:line="21" pos:column="9">{
            <function><name pos:line="22" pos:column="13">get</name>
            <block pos:line="23" pos:column="13">{
                <return pos:line="24" pos:column="17">return <expr><name pos:line="24" pos:column="24">allMethods</name> <op:operator pos:line="24" pos:column="35">??</op:operator> <op:operator pos:line="24" pos:column="38">(</op:operator><name pos:line="24" pos:column="39">allMethods</name> <op:operator pos:line="24" pos:column="50">=</op:operator> <op:operator pos:line="24" pos:column="52">new</op:operator> <name><name pos:line="24" pos:column="56">List</name><argument_list pos:line="24" pos:column="60">&lt;<argument><name pos:line="24" pos:column="61">IAlternateMethod</name></argument>&gt;</argument_list></name>
                    <block pos:line="25" pos:column="21">{
                        <expr><op:operator pos:line="26" pos:column="25">new</op:operator> <call><name pos:line="26" pos:column="29">BeginInvokeActionMethod</name><argument_list pos:line="26" pos:column="52">()</argument_list></call></expr><op:operator pos:line="26" pos:column="54">,</op:operator>
                        <expr><op:operator pos:line="27" pos:column="25">new</op:operator> <call><name pos:line="27" pos:column="29">EndInvokeActionMethod</name><argument_list pos:line="27" pos:column="50">()</argument_list></call></expr><op:operator pos:line="27" pos:column="52">,</op:operator>
                        <expr><op:operator pos:line="28" pos:column="25">new</op:operator> <call><name><name pos:line="28" pos:column="29">ActionInvoker</name><op:operator pos:line="28" pos:column="42">.</op:operator><name><name pos:line="28" pos:column="43">InvokeActionResult</name><argument_list pos:line="28" pos:column="61">&lt;<argument><name pos:line="28" pos:column="62">ControllerActionInvoker</name></argument>&gt;</argument_list></name></name><argument_list pos:line="28" pos:column="86">()</argument_list></call></expr><op:operator pos:line="28" pos:column="88">,</op:operator>
                        <expr><op:operator pos:line="29" pos:column="25">new</op:operator> <call><name><name pos:line="29" pos:column="29">ActionInvoker</name><op:operator pos:line="29" pos:column="42">.</op:operator><name><name pos:line="29" pos:column="43">GetFilters</name><argument_list pos:line="29" pos:column="53">&lt;<argument><name pos:line="29" pos:column="54">ControllerActionInvoker</name></argument>&gt;</argument_list></name></name><argument_list pos:line="29" pos:column="78">(<argument><expr><op:operator pos:line="29" pos:column="79">new</op:operator> <call><name pos:line="29" pos:column="83">ActionFilter</name><argument_list pos:line="29" pos:column="95">(<argument><expr><name pos:line="29" pos:column="96">ProxyFactory</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="29" pos:column="111">new</op:operator> <call><name pos:line="29" pos:column="115">ResultFilter</name><argument_list pos:line="29" pos:column="127">(<argument><expr><name pos:line="29" pos:column="128">ProxyFactory</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="29" pos:column="143">new</op:operator> <call><name pos:line="29" pos:column="147">AuthorizationFilter</name><argument_list pos:line="29" pos:column="166">(<argument><expr><name pos:line="29" pos:column="167">ProxyFactory</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="29" pos:column="182">new</op:operator> <call><name pos:line="29" pos:column="186">ExceptionFilter</name><argument_list pos:line="29" pos:column="201">(<argument><expr><name pos:line="29" pos:column="202">ProxyFactory</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><op:operator pos:line="29" pos:column="216">,</op:operator>
                        
                        <comment type="line" pos:line="31" pos:column="25">// HACK - Leveraging InvokerActionResult and GetFilters for Async &amp; NonAsync allows for MVC 3 + MVC 4</comment>
                        <expr><op:operator pos:line="32" pos:column="25">new</op:operator> <call><name><name pos:line="32" pos:column="29">ActionInvoker</name><op:operator pos:line="32" pos:column="42">.</op:operator><name><name pos:line="32" pos:column="43">InvokeActionResult</name><argument_list pos:line="32" pos:column="61">&lt;<argument><name pos:line="32" pos:column="62">AsyncControllerActionInvoker</name></argument>&gt;</argument_list></name></name><argument_list pos:line="32" pos:column="91">()</argument_list></call></expr><op:operator pos:line="32" pos:column="93">,</op:operator>
                        <expr><op:operator pos:line="33" pos:column="25">new</op:operator> <call><name><name pos:line="33" pos:column="29">ActionInvoker</name><op:operator pos:line="33" pos:column="42">.</op:operator><name><name pos:line="33" pos:column="43">GetFilters</name><argument_list pos:line="33" pos:column="53">&lt;<argument><name pos:line="33" pos:column="54">AsyncControllerActionInvoker</name></argument>&gt;</argument_list></name></name><argument_list pos:line="33" pos:column="83">(<argument><expr><op:operator pos:line="33" pos:column="84">new</op:operator> <call><name pos:line="33" pos:column="88">ActionFilter</name><argument_list pos:line="33" pos:column="100">(<argument><expr><name pos:line="33" pos:column="101">ProxyFactory</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="33" pos:column="116">new</op:operator> <call><name pos:line="33" pos:column="120">ResultFilter</name><argument_list pos:line="33" pos:column="132">(<argument><expr><name pos:line="33" pos:column="133">ProxyFactory</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="33" pos:column="148">new</op:operator> <call><name pos:line="33" pos:column="152">AuthorizationFilter</name><argument_list pos:line="33" pos:column="171">(<argument><expr><name pos:line="33" pos:column="172">ProxyFactory</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="33" pos:column="187">new</op:operator> <call><name pos:line="33" pos:column="191">ExceptionFilter</name><argument_list pos:line="33" pos:column="206">(<argument><expr><name pos:line="33" pos:column="207">ProxyFactory</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>
                    }</block>)</expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <function><type><specifier pos:line="38" pos:column="9">public</specifier> <specifier pos:line="38" pos:column="16">override</specifier> <name pos:line="38" pos:column="25">bool</name></type> <name pos:line="38" pos:column="30">TryCreate</name><parameter_list pos:line="38" pos:column="39">(<param><decl><type><name pos:line="38" pos:column="40">IAsyncActionInvoker</name></type> <name pos:line="38" pos:column="60">originalObj</name></decl></param>, <param><decl><type><specifier pos:line="38" pos:column="73">out</specifier> <name pos:line="38" pos:column="77">IAsyncActionInvoker</name></type> <name pos:line="38" pos:column="97">newObj</name></decl></param>, <param><decl><type><name><name pos:line="38" pos:column="105">IEnumerable</name><argument_list pos:line="38" pos:column="116">&lt;<argument><name pos:line="38" pos:column="117">object</name></argument>&gt;</argument_list></name></type> <name pos:line="38" pos:column="125">mixins</name></decl></param>, <param><decl><type><name><name pos:line="38" pos:column="133">object</name><index pos:line="38" pos:column="139">[]</index></name></type> <name pos:line="38" pos:column="142">constructorArgs</name></decl></param>)</parameter_list>
        <block pos:line="39" pos:column="9">{
            <if pos:line="40" pos:column="13">if <condition pos:line="40" pos:column="16">(<expr><name pos:line="40" pos:column="17">originalObj</name> <op:operator pos:line="40" pos:column="29">==</op:operator> <name pos:line="40" pos:column="32">null</name></expr>)</condition><then pos:line="40" pos:column="37">
            <block pos:line="41" pos:column="13">{
                <expr_stmt><expr><name pos:line="42" pos:column="17">newObj</name> <op:operator pos:line="42" pos:column="24">=</op:operator> <name pos:line="42" pos:column="26">null</name></expr>;</expr_stmt>
                <return pos:line="43" pos:column="17">return <expr><lit:literal type="boolean" pos:line="43" pos:column="24">false</lit:literal></expr>;</return>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="46" pos:column="13">var</name></type> <name pos:line="46" pos:column="17">originalType</name> <init pos:line="46" pos:column="30">= <expr><call><name><name pos:line="46" pos:column="32">originalObj</name><op:operator pos:line="46" pos:column="43">.</op:operator><name pos:line="46" pos:column="44">GetType</name></name><argument_list pos:line="46" pos:column="51">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if pos:line="48" pos:column="13">if <condition pos:line="48" pos:column="16">(<expr><name pos:line="48" pos:column="17">originalType</name> <op:operator pos:line="48" pos:column="30">==</op:operator> <call><name pos:line="48" pos:column="33">typeof</name><argument_list pos:line="48" pos:column="39">(<argument><expr><name pos:line="48" pos:column="40">AsyncControllerActionInvoker</name></expr></argument>)</argument_list></call> <op:operator pos:line="48" pos:column="70">&amp;&amp;</op:operator> <call><name><name pos:line="48" pos:column="73">ProxyFactory</name><op:operator pos:line="48" pos:column="85">.</op:operator><name pos:line="48" pos:column="86">IsExtendClassEligible</name></name><argument_list pos:line="48" pos:column="107">(<argument><expr><name pos:line="48" pos:column="108">originalType</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="48" pos:column="122">
            <block pos:line="49" pos:column="13">{
                <expr_stmt><expr><name pos:line="50" pos:column="17">newObj</name> <op:operator pos:line="50" pos:column="24">=</op:operator> <call><name><name pos:line="50" pos:column="26">ProxyFactory</name><op:operator pos:line="50" pos:column="38">.</op:operator><name><name pos:line="50" pos:column="39">ExtendClass</name><argument_list pos:line="50" pos:column="50">&lt;<argument><name pos:line="50" pos:column="51">AsyncControllerActionInvoker</name></argument>&gt;</argument_list></name></name><argument_list pos:line="50" pos:column="80">(<argument><expr><name pos:line="50" pos:column="81">AllMethods</name></expr></argument>, <argument><expr><op:operator pos:line="50" pos:column="93">new</op:operator><index pos:line="50" pos:column="96">[]</index> <block pos:line="50" pos:column="99">{ <expr><op:operator pos:line="50" pos:column="101">new</op:operator> <call><name pos:line="50" pos:column="105">ActionInvokerStateMixin</name><argument_list pos:line="50" pos:column="128">()</argument_list></call></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="51" pos:column="17">return <expr><lit:literal type="boolean" pos:line="51" pos:column="24">true</lit:literal></expr>;</return>
            }</block></then></if>

            <if pos:line="54" pos:column="13">if <condition pos:line="54" pos:column="16">(<expr><name pos:line="54" pos:column="17">originalObj</name> <op:operator pos:line="54" pos:column="29">is</op:operator> <name pos:line="54" pos:column="32">AsyncControllerActionInvoker</name> <op:operator pos:line="54" pos:column="61">&amp;&amp;</op:operator> <call><name><name pos:line="54" pos:column="64">ProxyFactory</name><op:operator pos:line="54" pos:column="76">.</op:operator><name pos:line="54" pos:column="77">IsWrapClassEligible</name></name><argument_list pos:line="54" pos:column="96">(<argument><expr><name pos:line="54" pos:column="97">originalType</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="54" pos:column="111">
            <block pos:line="55" pos:column="13">{
                <expr_stmt><expr><name pos:line="56" pos:column="17">newObj</name> <op:operator pos:line="56" pos:column="24">=</op:operator> <call><name><name pos:line="56" pos:column="26">ProxyFactory</name><op:operator pos:line="56" pos:column="38">.</op:operator><name pos:line="56" pos:column="39">WrapClass</name></name><argument_list pos:line="56" pos:column="48">(<argument><expr><op:operator pos:line="56" pos:column="49">(</op:operator><name pos:line="56" pos:column="50">AsyncControllerActionInvoker</name><op:operator pos:line="56" pos:column="78">)</op:operator><name pos:line="56" pos:column="79">originalObj</name></expr></argument>, <argument><expr><name pos:line="56" pos:column="92">AllMethods</name></expr></argument>, <argument><expr><op:operator pos:line="56" pos:column="104">new</op:operator> <name><name pos:line="56" pos:column="108">object</name><index pos:line="56" pos:column="114">[]</index></name> <block pos:line="56" pos:column="117">{ <expr><op:operator pos:line="56" pos:column="119">new</op:operator> <call><name pos:line="56" pos:column="123">ActionInvokerStateMixin</name><argument_list pos:line="56" pos:column="146">()</argument_list></call></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="57" pos:column="17">return <expr><lit:literal type="boolean" pos:line="57" pos:column="24">true</lit:literal></expr>;</return>
            }</block></then></if>

            <if pos:line="60" pos:column="13">if <condition pos:line="60" pos:column="16">(<expr><call><name><name pos:line="60" pos:column="17">ProxyFactory</name><op:operator pos:line="60" pos:column="29">.</op:operator><name><name pos:line="60" pos:column="30">IsWrapInterfaceEligible</name><argument_list pos:line="60" pos:column="53">&lt;<argument><name pos:line="60" pos:column="54">IAsyncActionInvoker</name></argument>&gt;</argument_list></name></name><argument_list pos:line="60" pos:column="74">(<argument><expr><name pos:line="60" pos:column="75">originalType</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="60" pos:column="89">
            <block pos:line="61" pos:column="13">{
                <expr_stmt><expr><name pos:line="62" pos:column="17">newObj</name> <op:operator pos:line="62" pos:column="24">=</op:operator> <call><name><name pos:line="62" pos:column="26">ProxyFactory</name><op:operator pos:line="62" pos:column="38">.</op:operator><name pos:line="62" pos:column="39">WrapInterface</name></name><argument_list pos:line="62" pos:column="52">(<argument><expr><name pos:line="62" pos:column="53">originalObj</name></expr></argument>, <argument><expr><name pos:line="62" pos:column="66">AllMethods</name></expr></argument>, <argument><expr><op:operator pos:line="62" pos:column="78">new</op:operator><index pos:line="62" pos:column="81">[]</index> <block pos:line="62" pos:column="84">{ <expr><op:operator pos:line="62" pos:column="86">new</op:operator> <call><name pos:line="62" pos:column="90">ActionInvokerStateMixin</name><argument_list pos:line="62" pos:column="113">()</argument_list></call></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="63" pos:column="17">return <expr><lit:literal type="boolean" pos:line="63" pos:column="24">true</lit:literal></expr>;</return>
            }</block></then></if>

            <expr_stmt><expr><name pos:line="66" pos:column="13">newObj</name> <op:operator pos:line="66" pos:column="20">=</op:operator> <name pos:line="66" pos:column="22">null</name></expr>;</expr_stmt>
            <return pos:line="67" pos:column="13">return <expr><lit:literal type="boolean" pos:line="67" pos:column="20">false</lit:literal></expr>;</return>
        }</block></function>

        <class><specifier pos:line="70" pos:column="9">public</specifier> class <name pos:line="70" pos:column="22">BeginInvokeActionMethod</name> <super pos:line="70" pos:column="46">: <name pos:line="70" pos:column="48">IAlternateMethod</name></super>
        <block pos:line="71" pos:column="9">{
            <constructor><specifier pos:line="72" pos:column="13">public</specifier> <name pos:line="72" pos:column="20">BeginInvokeActionMethod</name><parameter_list pos:line="72" pos:column="43">()</parameter_list>
            <block pos:line="73" pos:column="13">{
                <expr_stmt><expr><name pos:line="74" pos:column="17">MethodToImplement</name> <op:operator pos:line="74" pos:column="35">=</op:operator> <call><name pos:line="74" pos:column="37">typeof</name><argument_list pos:line="74" pos:column="43">(<argument><expr><name pos:line="74" pos:column="44">AsyncControllerActionInvoker</name></expr></argument>)</argument_list></call><op:operator pos:line="74" pos:column="73">.</op:operator><call><name pos:line="74" pos:column="74">GetMethod</name><argument_list pos:line="74" pos:column="83">(<argument><expr><lit:literal type="string" pos:line="74" pos:column="84">"BeginInvokeActionMethod"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="74" pos:column="111">BindingFlags</name><op:operator pos:line="74" pos:column="123">.</op:operator><name pos:line="74" pos:column="124">Instance</name></name> <op:operator pos:line="74" pos:column="133">|</op:operator> <name><name pos:line="74" pos:column="135">BindingFlags</name><op:operator pos:line="74" pos:column="147">.</op:operator><name pos:line="74" pos:column="148">NonPublic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></constructor>

            <decl_stmt><decl><type><specifier pos:line="77" pos:column="13">public</specifier> <name pos:line="77" pos:column="20">MethodInfo</name></type> <name pos:line="77" pos:column="31">MethodToImplement</name> <block pos:line="77" pos:column="49">{ <function_decl><name pos:line="77" pos:column="51">get</name>;</function_decl> <function_decl><specifier pos:line="77" pos:column="56">private</specifier> <name pos:line="77" pos:column="64">set</name>;</function_decl> }</block></decl></decl_stmt>

            <function><type><specifier pos:line="79" pos:column="13">public</specifier> <name pos:line="79" pos:column="20">void</name></type> <name pos:line="79" pos:column="25">NewImplementation</name><parameter_list pos:line="79" pos:column="42">(<param><decl><type><name pos:line="79" pos:column="43">IAlternateMethodContext</name></type> <name pos:line="79" pos:column="67">context</name></decl></param>)</parameter_list>
            <block pos:line="80" pos:column="13">{
                <comment type="line" pos:line="81" pos:column="17">// BeginInvokeActionMethod(ControllerContext controllerContext, ActionDescriptor actionDescriptor, IDictionary&lt;string, object&gt; parameters, AsyncCallback callback, object state)</comment>
                <if pos:line="82" pos:column="17">if <condition pos:line="82" pos:column="20">(<expr><call><name><name pos:line="82" pos:column="21">context</name><op:operator pos:line="82" pos:column="28">.</op:operator><name pos:line="82" pos:column="29">RuntimePolicyStrategy</name></name><argument_list pos:line="82" pos:column="50">()</argument_list></call> <op:operator pos:line="82" pos:column="53">==</op:operator> <name><name pos:line="82" pos:column="56">RuntimePolicy</name><op:operator pos:line="82" pos:column="69">.</op:operator><name pos:line="82" pos:column="70">Off</name></name></expr>)</condition><then pos:line="82" pos:column="74">
                <block pos:line="83" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="84" pos:column="21">context</name><op:operator pos:line="84" pos:column="28">.</op:operator><name pos:line="84" pos:column="29">Proceed</name></name><argument_list pos:line="84" pos:column="36">()</argument_list></call></expr>;</expr_stmt>
                    <return pos:line="85" pos:column="21">return;</return>
                }</block></then></if>

                <decl_stmt><decl><type><name pos:line="88" pos:column="17">var</name></type> <name pos:line="88" pos:column="21">state</name> <init pos:line="88" pos:column="27">= <expr><op:operator pos:line="88" pos:column="29">(</op:operator><name pos:line="88" pos:column="30">IActionInvokerStateMixin</name><op:operator pos:line="88" pos:column="54">)</op:operator><name><name pos:line="88" pos:column="55">context</name><op:operator pos:line="88" pos:column="62">.</op:operator><name pos:line="88" pos:column="63">Proxy</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="89" pos:column="17">var</name></type> <name pos:line="89" pos:column="21">timer</name> <init pos:line="89" pos:column="27">= <expr><call><name><name pos:line="89" pos:column="29">context</name><op:operator pos:line="89" pos:column="36">.</op:operator><name pos:line="89" pos:column="37">TimerStrategy</name></name><argument_list pos:line="89" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name pos:line="90" pos:column="17">state</name><op:operator pos:line="90" pos:column="22">.</op:operator><name pos:line="90" pos:column="23">Arguments</name></name> <op:operator pos:line="90" pos:column="33">=</op:operator> <op:operator pos:line="90" pos:column="35">new</op:operator> <call><name><name pos:line="90" pos:column="39">ActionInvoker</name><op:operator pos:line="90" pos:column="52">.</op:operator><name pos:line="90" pos:column="53">InvokeActionMethod</name><op:operator pos:line="90" pos:column="71">.</op:operator><name pos:line="90" pos:column="72">Arguments</name></name><argument_list pos:line="90" pos:column="81">(<argument><expr><name><name pos:line="90" pos:column="82">context</name><op:operator pos:line="90" pos:column="89">.</op:operator><name pos:line="90" pos:column="90">Arguments</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="91" pos:column="17">state</name><op:operator pos:line="91" pos:column="22">.</op:operator><name pos:line="91" pos:column="23">Offset</name></name> <op:operator pos:line="91" pos:column="30">=</op:operator> <call><name><name pos:line="91" pos:column="32">timer</name><op:operator pos:line="91" pos:column="37">.</op:operator><name pos:line="91" pos:column="38">Start</name></name><argument_list pos:line="91" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="92" pos:column="17">context</name><op:operator pos:line="92" pos:column="24">.</op:operator><name pos:line="92" pos:column="25">Proceed</name></name><argument_list pos:line="92" pos:column="32">()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class>

        <class><specifier pos:line="96" pos:column="9">public</specifier> class <name pos:line="96" pos:column="22">EndInvokeActionMethod</name> <super pos:line="96" pos:column="44">: <name pos:line="96" pos:column="46">IAlternateMethod</name></super>
        <block pos:line="97" pos:column="9">{
            <constructor><specifier pos:line="98" pos:column="13">public</specifier> <name pos:line="98" pos:column="20">EndInvokeActionMethod</name><parameter_list pos:line="98" pos:column="41">()</parameter_list>
            <block pos:line="99" pos:column="13">{
                <expr_stmt><expr><name pos:line="100" pos:column="17">MethodToImplement</name> <op:operator pos:line="100" pos:column="35">=</op:operator> <call><name pos:line="100" pos:column="37">typeof</name><argument_list pos:line="100" pos:column="43">(<argument><expr><name pos:line="100" pos:column="44">AsyncControllerActionInvoker</name></expr></argument>)</argument_list></call><op:operator pos:line="100" pos:column="73">.</op:operator><call><name pos:line="100" pos:column="74">GetMethod</name><argument_list pos:line="100" pos:column="83">(<argument><expr><lit:literal type="string" pos:line="100" pos:column="84">"EndInvokeActionMethod"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="100" pos:column="109">BindingFlags</name><op:operator pos:line="100" pos:column="121">.</op:operator><name pos:line="100" pos:column="122">Instance</name></name> <op:operator pos:line="100" pos:column="131">|</op:operator> <name><name pos:line="100" pos:column="133">BindingFlags</name><op:operator pos:line="100" pos:column="145">.</op:operator><name pos:line="100" pos:column="146">NonPublic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></constructor>

            <decl_stmt><decl><type><specifier pos:line="103" pos:column="13">public</specifier> <name pos:line="103" pos:column="20">MethodInfo</name></type> <name pos:line="103" pos:column="31">MethodToImplement</name> <block pos:line="103" pos:column="49">{ <function_decl><name pos:line="103" pos:column="51">get</name>;</function_decl> <function_decl><specifier pos:line="103" pos:column="56">private</specifier> <name pos:line="103" pos:column="64">set</name>;</function_decl> }</block></decl></decl_stmt>

            <function><type><specifier pos:line="105" pos:column="13">public</specifier> <name pos:line="105" pos:column="20">void</name></type> <name pos:line="105" pos:column="25">NewImplementation</name><parameter_list pos:line="105" pos:column="42">(<param><decl><type><name pos:line="105" pos:column="43">IAlternateMethodContext</name></type> <name pos:line="105" pos:column="67">context</name></decl></param>)</parameter_list>
            <block pos:line="106" pos:column="13">{
                <if pos:line="107" pos:column="17">if <condition pos:line="107" pos:column="20">(<expr><call><name><name pos:line="107" pos:column="21">context</name><op:operator pos:line="107" pos:column="28">.</op:operator><name pos:line="107" pos:column="29">RuntimePolicyStrategy</name></name><argument_list pos:line="107" pos:column="50">()</argument_list></call> <op:operator pos:line="107" pos:column="53">==</op:operator> <name><name pos:line="107" pos:column="56">RuntimePolicy</name><op:operator pos:line="107" pos:column="69">.</op:operator><name pos:line="107" pos:column="70">Off</name></name></expr>)</condition><then pos:line="107" pos:column="74">
                <block pos:line="108" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="109" pos:column="21">context</name><op:operator pos:line="109" pos:column="28">.</op:operator><name pos:line="109" pos:column="29">Proceed</name></name><argument_list pos:line="109" pos:column="36">()</argument_list></call></expr>;</expr_stmt>
                    <return pos:line="110" pos:column="21">return;</return>
                }</block></then></if>

                <expr_stmt><expr><call><name><name pos:line="113" pos:column="17">context</name><op:operator pos:line="113" pos:column="24">.</op:operator><name pos:line="113" pos:column="25">Proceed</name></name><argument_list pos:line="113" pos:column="32">()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="114" pos:column="17">var</name></type> <name pos:line="114" pos:column="21">state</name> <init pos:line="114" pos:column="27">= <expr><op:operator pos:line="114" pos:column="29">(</op:operator><name pos:line="114" pos:column="30">IActionInvokerStateMixin</name><op:operator pos:line="114" pos:column="54">)</op:operator><name><name pos:line="114" pos:column="55">context</name><op:operator pos:line="114" pos:column="62">.</op:operator><name pos:line="114" pos:column="63">Proxy</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="115" pos:column="17">var</name></type> <name pos:line="115" pos:column="21">timer</name> <init pos:line="115" pos:column="27">= <expr><call><name><name pos:line="115" pos:column="29">context</name><op:operator pos:line="115" pos:column="36">.</op:operator><name pos:line="115" pos:column="37">TimerStrategy</name></name><argument_list pos:line="115" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="116" pos:column="17">var</name></type> <name pos:line="116" pos:column="21">timerResult</name> <init pos:line="116" pos:column="33">= <expr><call><name><name pos:line="116" pos:column="35">timer</name><op:operator pos:line="116" pos:column="40">.</op:operator><name pos:line="116" pos:column="41">Stop</name></name><argument_list pos:line="116" pos:column="45">(<argument><expr><name><name pos:line="116" pos:column="46">state</name><op:operator pos:line="116" pos:column="51">.</op:operator><name pos:line="116" pos:column="52">Offset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name pos:line="118" pos:column="17">var</name></type> <name pos:line="118" pos:column="21">args</name> <init pos:line="118" pos:column="26">= <expr><name><name pos:line="118" pos:column="28">state</name><op:operator pos:line="118" pos:column="33">.</op:operator><name pos:line="118" pos:column="34">Arguments</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="119" pos:column="17">var</name></type> <name pos:line="119" pos:column="21">actionDescriptor</name> <init pos:line="119" pos:column="38">= <expr><name><name pos:line="119" pos:column="40">args</name><op:operator pos:line="119" pos:column="44">.</op:operator><name pos:line="119" pos:column="45">ActionDescriptor</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="120" pos:column="17">var</name></type> <name pos:line="120" pos:column="21">controllerDescriptor</name> <init pos:line="120" pos:column="42">= <expr><name><name pos:line="120" pos:column="44">args</name><op:operator pos:line="120" pos:column="48">.</op:operator><name pos:line="120" pos:column="49">ActionDescriptor</name><op:operator pos:line="120" pos:column="65">.</op:operator><name pos:line="120" pos:column="66">ControllerDescriptor</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="121" pos:column="17">var</name></type> <name pos:line="121" pos:column="21">actionName</name> <init pos:line="121" pos:column="32">= <expr><name><name pos:line="121" pos:column="34">actionDescriptor</name><op:operator pos:line="121" pos:column="50">.</op:operator><name pos:line="121" pos:column="51">ActionName</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="122" pos:column="17">var</name></type> <name pos:line="122" pos:column="21">actionParams</name> <init pos:line="122" pos:column="34">= <expr><call><name><name pos:line="122" pos:column="36">actionDescriptor</name><op:operator pos:line="122" pos:column="52">.</op:operator><name pos:line="122" pos:column="53">GetParameters</name></name><argument_list pos:line="122" pos:column="66">()</argument_list></call><op:operator pos:line="122" pos:column="68">.</op:operator><call><name pos:line="122" pos:column="69">Select</name><argument_list pos:line="122" pos:column="75">(<argument><expr><lambda><name pos:line="122" pos:column="76">p</name> <op:operator pos:line="122" pos:column="78">=&gt;</op:operator> <name><name pos:line="122" pos:column="81">p</name><op:operator pos:line="122" pos:column="82">.</op:operator><name pos:line="122" pos:column="83">ParameterType</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="122" pos:column="97">.</op:operator><call><name pos:line="122" pos:column="98">ToArray</name><argument_list pos:line="122" pos:column="105">()</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name pos:line="124" pos:column="17">var</name></type> <name pos:line="124" pos:column="21">message</name> <init pos:line="124" pos:column="29">= <expr><op:operator pos:line="124" pos:column="31">new</op:operator> <call><name><name pos:line="124" pos:column="35">ActionInvoker</name><op:operator pos:line="124" pos:column="48">.</op:operator><name pos:line="124" pos:column="49">InvokeActionMethod</name><op:operator pos:line="124" pos:column="67">.</op:operator><name pos:line="124" pos:column="68">Message</name></name><argument_list pos:line="124" pos:column="75">(<argument><expr><call><name><name pos:line="124" pos:column="76">context</name><op:operator pos:line="124" pos:column="83">.</op:operator><name pos:line="124" pos:column="84">ReturnValue</name><op:operator pos:line="124" pos:column="95">.</op:operator><name pos:line="124" pos:column="96">GetType</name></name><argument_list pos:line="124" pos:column="103">()</argument_list></call></expr></argument>)</argument_list></call>
                    <op:operator pos:line="125" pos:column="21">.</op:operator><call><name pos:line="125" pos:column="22">AsTimedMessage</name><argument_list pos:line="125" pos:column="36">(<argument><expr><name pos:line="125" pos:column="37">timerResult</name></expr></argument>)</argument_list></call>
                    <op:operator pos:line="126" pos:column="21">.</op:operator><call><name pos:line="126" pos:column="22">AsSourceMessage</name><argument_list pos:line="126" pos:column="37">(<argument><expr><name><name pos:line="126" pos:column="38">controllerDescriptor</name><op:operator pos:line="126" pos:column="58">.</op:operator><name pos:line="126" pos:column="59">ControllerType</name></name></expr></argument>, <argument><expr><call><name><name pos:line="126" pos:column="75">controllerDescriptor</name><op:operator pos:line="126" pos:column="95">.</op:operator><name pos:line="126" pos:column="96">ControllerType</name><op:operator pos:line="126" pos:column="110">.</op:operator><name pos:line="126" pos:column="111">GetMethod</name></name><argument_list pos:line="126" pos:column="120">(<argument><expr><name pos:line="126" pos:column="121">actionName</name></expr></argument>, <argument><expr><name pos:line="126" pos:column="133">actionParams</name></expr></argument>)</argument_list></call> <op:operator pos:line="126" pos:column="147">??</op:operator> <call><name><name pos:line="126" pos:column="150">controllerDescriptor</name><op:operator pos:line="126" pos:column="170">.</op:operator><name pos:line="126" pos:column="171">ControllerType</name><op:operator pos:line="126" pos:column="185">.</op:operator><name pos:line="126" pos:column="186">GetMethod</name></name><argument_list pos:line="126" pos:column="195">(<argument><expr><name pos:line="126" pos:column="196">actionName</name> <op:operator pos:line="126" pos:column="207">+</op:operator> <lit:literal type="string" pos:line="126" pos:column="209">"Async"</lit:literal></expr></argument>, <argument><expr><name pos:line="126" pos:column="218">actionParams</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                    <op:operator pos:line="127" pos:column="21">.</op:operator><call><name pos:line="127" pos:column="22">AsChildActionMessage</name><argument_list pos:line="127" pos:column="42">(<argument><expr><name><name pos:line="127" pos:column="43">state</name><op:operator pos:line="127" pos:column="48">.</op:operator><name pos:line="127" pos:column="49">Arguments</name><op:operator pos:line="127" pos:column="58">.</op:operator><name pos:line="127" pos:column="59">ControllerContext</name></name></expr></argument>)</argument_list></call>
                    <op:operator pos:line="128" pos:column="21">.</op:operator><call><name pos:line="128" pos:column="22">AsActionMessage</name><argument_list pos:line="128" pos:column="37">(<argument><expr><name><name pos:line="128" pos:column="38">state</name><op:operator pos:line="128" pos:column="43">.</op:operator><name pos:line="128" pos:column="44">Arguments</name><op:operator pos:line="128" pos:column="53">.</op:operator><name pos:line="128" pos:column="54">ControllerContext</name></name></expr></argument>)</argument_list></call>
                    <op:operator pos:line="129" pos:column="21">.</op:operator><call><name pos:line="129" pos:column="22">AsMvcTimelineMessage</name><argument_list pos:line="129" pos:column="42">(<argument><expr><name><name pos:line="129" pos:column="43">MvcTimelineCategory</name><op:operator pos:line="129" pos:column="62">.</op:operator><name pos:line="129" pos:column="63">Controller</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name pos:line="131" pos:column="17">context</name><op:operator pos:line="131" pos:column="24">.</op:operator><name pos:line="131" pos:column="25">MessageBroker</name><op:operator pos:line="131" pos:column="38">.</op:operator><name pos:line="131" pos:column="39">Publish</name></name><argument_list pos:line="131" pos:column="46">(<argument><expr><name pos:line="131" pos:column="47">message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class>
    }</block></class>
}</block></namespace></unit>
