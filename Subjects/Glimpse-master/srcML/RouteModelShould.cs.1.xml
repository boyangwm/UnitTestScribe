<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.AspNet\Model\RouteModelShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">System</name><op:operator pos:line="1" pos:column="13">.</op:operator><name pos:line="1" pos:column="14">Web</name><op:operator pos:line="1" pos:column="17">.</op:operator><name pos:line="1" pos:column="18">Routing</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">Glimpse</name><op:operator pos:line="2" pos:column="14">.</op:operator><name pos:line="2" pos:column="15">AspNet</name><op:operator pos:line="2" pos:column="21">.</op:operator><name pos:line="2" pos:column="22">Model</name></name>;</using>
<using pos:line="3" pos:column="1">using <name pos:line="3" pos:column="7">Xunit</name>;</using>

<namespace pos:line="5" pos:column="1">namespace <name><name pos:line="5" pos:column="11">Glimpse</name><op:operator pos:line="5" pos:column="18">.</op:operator><name pos:line="5" pos:column="19">Test</name><op:operator pos:line="5" pos:column="23">.</op:operator><name pos:line="5" pos:column="24">AspNet</name><op:operator pos:line="5" pos:column="30">.</op:operator><name pos:line="5" pos:column="31">Model</name></name>
<block pos:line="6" pos:column="1">{
    <class><specifier pos:line="7" pos:column="5">public</specifier> class <name pos:line="7" pos:column="18">RouteModelShould</name>
    <block pos:line="8" pos:column="5">{
        <function><type><attribute pos:line="9" pos:column="9">[<expr><name pos:line="9" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="10" pos:column="9">public</specifier> <name pos:line="10" pos:column="16">void</name></type> <name pos:line="10" pos:column="21">SetProperties</name><parameter_list pos:line="10" pos:column="34">()</parameter_list>
        <block pos:line="11" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="12" pos:column="13">var</name></type> <name pos:line="12" pos:column="17">defaults</name> <init pos:line="12" pos:column="26">= <expr><op:operator pos:line="12" pos:column="28">new</op:operator><index pos:line="12" pos:column="31">[]</index> <block pos:line="12" pos:column="34">{ <expr><op:operator pos:line="12" pos:column="36">new</op:operator> <name pos:line="12" pos:column="40">RouteDataItemModel</name> <block pos:line="12" pos:column="59">{ <expr><name pos:line="12" pos:column="61">PlaceHolder</name> <op:operator pos:line="12" pos:column="73">=</op:operator> <lit:literal type="string" pos:line="12" pos:column="75">"controller"</lit:literal></expr>, <expr><name pos:line="12" pos:column="89">DefaultValue</name> <op:operator pos:line="12" pos:column="102">=</op:operator> <lit:literal type="string" pos:line="12" pos:column="104">"Home"</lit:literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="13" pos:column="13">var</name></type> <name pos:line="13" pos:column="17">constraints</name> <init pos:line="13" pos:column="29">= <expr><op:operator pos:line="13" pos:column="31">new</op:operator><index pos:line="13" pos:column="34">[]</index> <block pos:line="13" pos:column="37">{ <expr><op:operator pos:line="13" pos:column="39">new</op:operator> <name pos:line="13" pos:column="43">RouteConstraintModel</name> <block pos:line="13" pos:column="64">{ <expr><name pos:line="13" pos:column="66">IsMatch</name> <op:operator pos:line="13" pos:column="74">=</op:operator> <lit:literal type="boolean" pos:line="13" pos:column="76">true</lit:literal></expr>, <expr><name pos:line="13" pos:column="82">ParameterName</name> <op:operator pos:line="13" pos:column="96">=</op:operator> <lit:literal type="string" pos:line="13" pos:column="98">"action"</lit:literal></expr>, <expr><name pos:line="13" pos:column="108">Constraint</name> <op:operator pos:line="13" pos:column="119">=</op:operator> <lit:literal type="string" pos:line="13" pos:column="121">".+"</lit:literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="14" pos:column="13">var</name></type> <name pos:line="14" pos:column="17">dataTokens</name> <init pos:line="14" pos:column="28">= <expr><op:operator pos:line="14" pos:column="30">new</op:operator> <call><name pos:line="14" pos:column="34">RouteValueDictionary</name><argument_list pos:line="14" pos:column="54">(<argument><expr><op:operator pos:line="14" pos:column="55">new</op:operator> <block pos:line="14" pos:column="59">{ <expr><name pos:line="14" pos:column="61">area</name> <op:operator pos:line="14" pos:column="66">=</op:operator> <lit:literal type="string" pos:line="14" pos:column="68">"Test"</lit:literal></expr>, <expr><name pos:line="14" pos:column="76">name</name> <op:operator pos:line="14" pos:column="81">=</op:operator> <lit:literal type="string" pos:line="14" pos:column="83">"Hi"</lit:literal></expr> }</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="15" pos:column="13">var</name></type> <name pos:line="15" pos:column="17">url</name> <init pos:line="15" pos:column="21">= <expr><lit:literal type="string" pos:line="15" pos:column="23">"{controller}/{action}/{id}"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="17" pos:column="13">var</name></type> <name pos:line="17" pos:column="17">test</name> <init pos:line="17" pos:column="22">= <expr><op:operator pos:line="17" pos:column="24">new</op:operator> <call><name pos:line="17" pos:column="28">RouteModel</name><argument_list pos:line="17" pos:column="38">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="18" pos:column="13">test</name><op:operator pos:line="18" pos:column="17">.</op:operator><name pos:line="18" pos:column="18">Area</name></name> <op:operator pos:line="18" pos:column="23">=</op:operator> <lit:literal type="string" pos:line="18" pos:column="25">"Test"</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="19" pos:column="13">test</name><op:operator pos:line="19" pos:column="17">.</op:operator><name pos:line="19" pos:column="18">Url</name></name> <op:operator pos:line="19" pos:column="22">=</op:operator> <name pos:line="19" pos:column="24">url</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="20" pos:column="13">test</name><op:operator pos:line="20" pos:column="17">.</op:operator><name pos:line="20" pos:column="18">RouteData</name></name> <op:operator pos:line="20" pos:column="28">=</op:operator> <name pos:line="20" pos:column="30">defaults</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="21" pos:column="13">test</name><op:operator pos:line="21" pos:column="17">.</op:operator><name pos:line="21" pos:column="18">Constraints</name></name> <op:operator pos:line="21" pos:column="30">=</op:operator> <name pos:line="21" pos:column="32">constraints</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="22" pos:column="13">test</name><op:operator pos:line="22" pos:column="17">.</op:operator><name pos:line="22" pos:column="18">DataTokens</name></name> <op:operator pos:line="22" pos:column="29">=</op:operator> <name pos:line="22" pos:column="31">dataTokens</name></expr>;</expr_stmt>
             
            <expr_stmt><expr><call><name><name pos:line="24" pos:column="13">Assert</name><op:operator pos:line="24" pos:column="19">.</op:operator><name pos:line="24" pos:column="20">False</name></name><argument_list pos:line="24" pos:column="25">(<argument><expr><name><name pos:line="24" pos:column="26">test</name><op:operator pos:line="24" pos:column="30">.</op:operator><name pos:line="24" pos:column="31">IsMatch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="26" pos:column="13">Assert</name><op:operator pos:line="26" pos:column="19">.</op:operator><name pos:line="26" pos:column="20">Equal</name></name><argument_list pos:line="26" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="26" pos:column="26">"Test"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="34">test</name><op:operator pos:line="26" pos:column="38">.</op:operator><name pos:line="26" pos:column="39">Area</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="27" pos:column="13">Assert</name><op:operator pos:line="27" pos:column="19">.</op:operator><name pos:line="27" pos:column="20">Equal</name></name><argument_list pos:line="27" pos:column="25">(<argument><expr><name pos:line="27" pos:column="26">url</name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="31">test</name><op:operator pos:line="27" pos:column="35">.</op:operator><name pos:line="27" pos:column="36">Url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="28" pos:column="13">Assert</name><op:operator pos:line="28" pos:column="19">.</op:operator><name pos:line="28" pos:column="20">Same</name></name><argument_list pos:line="28" pos:column="24">(<argument><expr><name pos:line="28" pos:column="25">defaults</name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="35">test</name><op:operator pos:line="28" pos:column="39">.</op:operator><name pos:line="28" pos:column="40">RouteData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="29" pos:column="13">Assert</name><op:operator pos:line="29" pos:column="19">.</op:operator><name pos:line="29" pos:column="20">Same</name></name><argument_list pos:line="29" pos:column="24">(<argument><expr><name pos:line="29" pos:column="25">constraints</name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="38">test</name><op:operator pos:line="29" pos:column="42">.</op:operator><name pos:line="29" pos:column="43">Constraints</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="30" pos:column="13">Assert</name><op:operator pos:line="30" pos:column="19">.</op:operator><name pos:line="30" pos:column="20">Same</name></name><argument_list pos:line="30" pos:column="24">(<argument><expr><name pos:line="30" pos:column="25">dataTokens</name></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="37">test</name><op:operator pos:line="30" pos:column="41">.</op:operator><name pos:line="30" pos:column="42">DataTokens</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name pos:line="32" pos:column="13">test</name><op:operator pos:line="32" pos:column="17">.</op:operator><name pos:line="32" pos:column="18">IsMatch</name></name> <op:operator pos:line="32" pos:column="26">=</op:operator> <lit:literal type="boolean" pos:line="32" pos:column="28">true</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="33" pos:column="13">Assert</name><op:operator pos:line="33" pos:column="19">.</op:operator><name pos:line="33" pos:column="20">True</name></name><argument_list pos:line="33" pos:column="24">(<argument><expr><name><name pos:line="33" pos:column="25">test</name><op:operator pos:line="33" pos:column="29">.</op:operator><name pos:line="33" pos:column="30">IsMatch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        }</block></function>
    }</block></class>
}</block></namespace></unit>
