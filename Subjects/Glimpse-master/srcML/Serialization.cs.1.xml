<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.AspNet\Support\Serialization.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>

<namespace pos:line="3" pos:column="1">namespace <name><name pos:line="3" pos:column="11">Glimpse</name><op:operator pos:line="3" pos:column="18">.</op:operator><name pos:line="3" pos:column="19">AspNet</name><op:operator pos:line="3" pos:column="25">.</op:operator><name pos:line="3" pos:column="26">Support</name></name>
<block pos:line="4" pos:column="1">{
    <class><specifier pos:line="5" pos:column="5">public</specifier> <specifier pos:line="5" pos:column="12">static</specifier> class <name pos:line="5" pos:column="25">Serialization</name>
    <block pos:line="6" pos:column="5">{
        <function><type><specifier pos:line="7" pos:column="9">public</specifier> <specifier pos:line="7" pos:column="16">static</specifier> <name pos:line="7" pos:column="23">object</name></type> <name pos:line="7" pos:column="30">GetValueSafe</name><parameter_list pos:line="7" pos:column="42">(<param><decl><type><name pos:line="7" pos:column="43">object</name></type> <name pos:line="7" pos:column="50">value</name></decl></param>)</parameter_list>
        <block pos:line="8" pos:column="9">{
            <if pos:line="9" pos:column="13">if <condition pos:line="9" pos:column="16">(<expr><name pos:line="9" pos:column="17">value</name> <op:operator pos:line="9" pos:column="23">!=</op:operator> <name pos:line="9" pos:column="26">null</name></expr>)</condition><then pos:line="9" pos:column="31">
            <block pos:line="10" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="11" pos:column="17">var</name></type> <name pos:line="11" pos:column="21">type</name> <init pos:line="11" pos:column="26">= <expr><call><name><name pos:line="11" pos:column="28">value</name><op:operator pos:line="11" pos:column="33">.</op:operator><name pos:line="11" pos:column="34">GetType</name></name><argument_list pos:line="11" pos:column="41">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><op:operator pos:line="12" pos:column="21">!</op:operator><name><name pos:line="12" pos:column="22">type</name><op:operator pos:line="12" pos:column="26">.</op:operator><name pos:line="12" pos:column="27">IsSerializable</name></name></expr>)</condition><then pos:line="12" pos:column="42">
                <block pos:line="13" pos:column="17">{
                    <if pos:line="14" pos:column="21">if <condition pos:line="14" pos:column="24">(<expr><call><name><name pos:line="14" pos:column="25">type</name><op:operator pos:line="14" pos:column="29">.</op:operator><name pos:line="14" pos:column="30">GetMethod</name></name><argument_list pos:line="14" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="14" pos:column="40">"ToString"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="14" pos:column="51">.</op:operator><name pos:line="14" pos:column="52">DeclaringType</name> <op:operator pos:line="14" pos:column="66">==</op:operator> <name pos:line="14" pos:column="69">type</name></expr>)</condition><then pos:line="14" pos:column="74">
                    <block pos:line="15" pos:column="21">{
                        <expr_stmt><expr><name pos:line="16" pos:column="25">value</name> <op:operator pos:line="16" pos:column="31">=</op:operator> <call><name><name pos:line="16" pos:column="33">value</name><op:operator pos:line="16" pos:column="38">.</op:operator><name pos:line="16" pos:column="39">ToString</name></name><argument_list pos:line="16" pos:column="47">()</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else pos:line="18" pos:column="21">else
                    <block pos:line="19" pos:column="21">{
                        <expr_stmt><expr><name pos:line="20" pos:column="25">value</name> <op:operator pos:line="20" pos:column="31">=</op:operator> <lit:literal type="string" pos:line="20" pos:column="33">@"\Non serializable type :(\"</lit:literal></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then></if>
            }</block></then></if>

            <return pos:line="25" pos:column="13">return <expr><name pos:line="25" pos:column="20">value</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
