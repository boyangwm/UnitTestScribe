<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Core\Extensions\ObjectExtensions.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>

<namespace pos:line="3" pos:column="1">namespace <name><name pos:line="3" pos:column="11">Glimpse</name><op:operator pos:line="3" pos:column="18">.</op:operator><name pos:line="3" pos:column="19">Core</name><op:operator pos:line="3" pos:column="23">.</op:operator><name pos:line="3" pos:column="24">Extensions</name></name>
<block pos:line="4" pos:column="1">{
    <comment type="line" pos:line="5" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="6" pos:column="5">/// Extension methods to simplify common tasks completed with &lt;see cref="Object"/&gt;.</comment>
    <comment type="line" pos:line="7" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="8" pos:column="5">public</specifier> <specifier pos:line="8" pos:column="12">static</specifier> class <name pos:line="8" pos:column="25">ObjectExtensions</name>
    <block pos:line="9" pos:column="5">{
        <comment type="line" pos:line="10" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="11" pos:column="9">/// Returns the value of &lt;c&gt;ToString&lt;/c&gt; if &lt;paramref name="value"/&gt; is not null.</comment>
        <comment type="line" pos:line="12" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="13" pos:column="9">/// &lt;param name="value"&gt;The value.&lt;/param&gt;</comment>
        <comment type="line" pos:line="14" pos:column="9">/// &lt;returns&gt;The value of &lt;c&gt;ToString&lt;/c&gt; if &lt;paramref name="value"/&gt; is not null.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="15" pos:column="9">public</specifier> <specifier pos:line="15" pos:column="16">static</specifier> <name pos:line="15" pos:column="23">string</name></type> <name pos:line="15" pos:column="30">ToStringOrDefault</name><parameter_list pos:line="15" pos:column="47">(<param><decl><type><name pos:line="15" pos:column="48">this</name> <name pos:line="15" pos:column="53">object</name></type> <name pos:line="15" pos:column="60">value</name></decl></param>)</parameter_list>
        <block pos:line="16" pos:column="9">{
            <if pos:line="17" pos:column="13">if <condition pos:line="17" pos:column="16">(<expr><name pos:line="17" pos:column="17">value</name> <op:operator pos:line="17" pos:column="23">==</op:operator> <name pos:line="17" pos:column="26">null</name></expr>)</condition><then pos:line="17" pos:column="31">
            <block pos:line="18" pos:column="13">{
                <return pos:line="19" pos:column="17">return <expr><name pos:line="19" pos:column="24">null</name></expr>;</return>
            }</block></then></if>

            <return pos:line="22" pos:column="13">return <expr><call><name><name pos:line="22" pos:column="20">value</name><op:operator pos:line="22" pos:column="25">.</op:operator><name pos:line="22" pos:column="26">ToString</name></name><argument_list pos:line="22" pos:column="34">()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="25" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="26" pos:column="9">/// Returns the value of &lt;c&gt;GetType&lt;/c&gt; if &lt;paramref name="value"/&gt; is not null.</comment>
        <comment type="line" pos:line="27" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="28" pos:column="9">/// &lt;param name="value"&gt;The value.&lt;/param&gt;</comment>
        <comment type="line" pos:line="29" pos:column="9">/// &lt;returns&gt;The value of &lt;c&gt;GetType&lt;/c&gt; if &lt;paramref name="value"/&gt; is not null.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="30" pos:column="9">public</specifier> <specifier pos:line="30" pos:column="16">static</specifier> <name pos:line="30" pos:column="23">Type</name></type> <name pos:line="30" pos:column="28">GetTypeOrNull</name><parameter_list pos:line="30" pos:column="41">(<param><decl><type><name pos:line="30" pos:column="42">this</name> <name pos:line="30" pos:column="47">object</name></type> <name pos:line="30" pos:column="54">value</name></decl></param>)</parameter_list>
        <block pos:line="31" pos:column="9">{
            <if pos:line="32" pos:column="13">if <condition pos:line="32" pos:column="16">(<expr><name pos:line="32" pos:column="17">value</name> <op:operator pos:line="32" pos:column="23">==</op:operator> <name pos:line="32" pos:column="26">null</name></expr>)</condition><then pos:line="32" pos:column="31">
            <block pos:line="33" pos:column="13">{
                <return pos:line="34" pos:column="17">return <expr><name pos:line="34" pos:column="24">null</name></expr>;</return>
            }</block></then></if>

            <return pos:line="37" pos:column="13">return <expr><call><name><name pos:line="37" pos:column="20">value</name><op:operator pos:line="37" pos:column="25">.</op:operator><name pos:line="37" pos:column="26">GetType</name></name><argument_list pos:line="37" pos:column="33">()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="40" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="41" pos:column="9">/// Casts the value to Type of T if it is not null.</comment>
        <comment type="line" pos:line="42" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="43" pos:column="9">/// &lt;param name="value"&gt;The value.&lt;/param&gt;</comment>
        <comment type="line" pos:line="44" pos:column="9">/// &lt;returns&gt;The value of cast is not null.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="45" pos:column="9">public</specifier> <specifier pos:line="45" pos:column="16">static</specifier> <name pos:line="45" pos:column="23">T</name></type> <name><name pos:line="45" pos:column="25">CastOrDefault</name><argument_list pos:line="45" pos:column="38">&lt;<argument><name pos:line="45" pos:column="39">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="45" pos:column="41">(<param><decl><type><name pos:line="45" pos:column="42">this</name> <name pos:line="45" pos:column="47">object</name></type> <name pos:line="45" pos:column="54">value</name></decl></param>)</parameter_list>
        <block pos:line="46" pos:column="9">{
            <if pos:line="47" pos:column="13">if <condition pos:line="47" pos:column="16">(<expr><name pos:line="47" pos:column="17">value</name> <op:operator pos:line="47" pos:column="23">==</op:operator> <name pos:line="47" pos:column="26">null</name></expr>)</condition><then pos:line="47" pos:column="31">
            <block pos:line="48" pos:column="13">{
                <return pos:line="49" pos:column="17">return <expr><call><name pos:line="49" pos:column="24">default</name><argument_list pos:line="49" pos:column="31">(<argument><expr><name pos:line="49" pos:column="32">T</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>

            <return pos:line="52" pos:column="13">return <expr><op:operator pos:line="52" pos:column="20">(</op:operator><name pos:line="52" pos:column="21">T</name><op:operator pos:line="52" pos:column="22">)</op:operator><name pos:line="52" pos:column="23">value</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
