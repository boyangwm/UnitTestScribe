<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Core\Extensibility\CastleInvocationToAlternateMethodContextAdapter.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Reflection</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Castle</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">DynamicProxy</name></name>;</using>

<namespace pos:line="5" pos:column="1">namespace <name><name pos:line="5" pos:column="11">Glimpse</name><op:operator pos:line="5" pos:column="18">.</op:operator><name pos:line="5" pos:column="19">Core</name><op:operator pos:line="5" pos:column="23">.</op:operator><name pos:line="5" pos:column="24">Extensibility</name></name>
<block pos:line="6" pos:column="1">{
    <comment type="line" pos:line="7" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="8" pos:column="5">/// An adapter between Castle DynamicProxy's &lt;see cref="IInvocation"/&gt; and Glimpse's &lt;see cref="IAlternateMethodContext"/&gt;.</comment>
    <comment type="line" pos:line="9" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="10" pos:column="5">public</specifier> class <name pos:line="10" pos:column="18">CastleInvocationToAlternateMethodContextAdapter</name> <super pos:line="10" pos:column="66">: <name pos:line="10" pos:column="68">IAlternateMethodContext</name></super>
    <block pos:line="11" pos:column="5">{
        <comment type="line" pos:line="12" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="13" pos:column="9">/// Initializes a new instance of the &lt;see cref="CastleInvocationToAlternateMethodContextAdapter" /&gt; class.</comment>
        <comment type="line" pos:line="14" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="15" pos:column="9">/// &lt;param name="invocation"&gt;The invocation.&lt;/param&gt;</comment>
        <comment type="line" pos:line="16" pos:column="9">/// &lt;param name="logger"&gt;The logger.&lt;/param&gt;</comment>
        <comment type="line" pos:line="17" pos:column="9">/// &lt;param name="messageBroker"&gt;The message broker.&lt;/param&gt;</comment>
        <comment type="line" pos:line="18" pos:column="9">/// &lt;param name="proxyFactory"&gt;The proxy factory.&lt;/param&gt;</comment>
        <comment type="line" pos:line="19" pos:column="9">/// &lt;param name="timerStrategy"&gt;The timer strategy.&lt;/param&gt;</comment>
        <comment type="line" pos:line="20" pos:column="9">/// &lt;param name="runtimePolicyStrategy"&gt;The runtime policy strategy.&lt;/param&gt;</comment>
        <comment type="line" pos:line="21" pos:column="9">/// &lt;exception cref="System.ArgumentNullException"&gt;Throws an exception if any parameter is &lt;c&gt;null&lt;/c&gt;.&lt;/exception&gt;</comment>
        <constructor><specifier pos:line="22" pos:column="9">public</specifier> <name pos:line="22" pos:column="16">CastleInvocationToAlternateMethodContextAdapter</name><parameter_list pos:line="22" pos:column="63">(<param><decl><type><name pos:line="22" pos:column="64">IInvocation</name></type> <name pos:line="22" pos:column="76">invocation</name></decl></param>, <param><decl><type><name pos:line="22" pos:column="88">ILogger</name></type> <name pos:line="22" pos:column="96">logger</name></decl></param>, <param><decl><type><name pos:line="22" pos:column="104">IMessageBroker</name></type> <name pos:line="22" pos:column="119">messageBroker</name></decl></param>, <param><decl><type><name pos:line="22" pos:column="134">IProxyFactory</name></type> <name pos:line="22" pos:column="148">proxyFactory</name></decl></param>, <param><decl><type><name><name pos:line="22" pos:column="162">Func</name><argument_list pos:line="22" pos:column="166">&lt;<argument><name pos:line="22" pos:column="167">IExecutionTimer</name></argument>&gt;</argument_list></name></type> <name pos:line="22" pos:column="184">timerStrategy</name></decl></param>, <param><decl><type><name><name pos:line="22" pos:column="199">Func</name><argument_list pos:line="22" pos:column="203">&lt;<argument><name pos:line="22" pos:column="204">RuntimePolicy</name></argument>&gt;</argument_list></name></type> <name pos:line="22" pos:column="219">runtimePolicyStrategy</name></decl></param>)</parameter_list>
        <block pos:line="23" pos:column="9">{
            <if pos:line="24" pos:column="13">if <condition pos:line="24" pos:column="16">(<expr><name pos:line="24" pos:column="17">invocation</name>  <op:operator pos:line="24" pos:column="29">==</op:operator> <name pos:line="24" pos:column="32">null</name></expr>)</condition><then pos:line="24" pos:column="37">
            <block pos:line="25" pos:column="13">{
                <throw pos:line="26" pos:column="17">throw <expr><op:operator pos:line="26" pos:column="23">new</op:operator> <call><name pos:line="26" pos:column="27">ArgumentNullException</name><argument_list pos:line="26" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="26" pos:column="49">"invocation"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <if pos:line="29" pos:column="13">if <condition pos:line="29" pos:column="16">(<expr><name pos:line="29" pos:column="17">logger</name> <op:operator pos:line="29" pos:column="24">==</op:operator> <name pos:line="29" pos:column="27">null</name></expr>)</condition><then pos:line="29" pos:column="32">
            <block pos:line="30" pos:column="13">{
                <throw pos:line="31" pos:column="17">throw <expr><op:operator pos:line="31" pos:column="23">new</op:operator> <call><name pos:line="31" pos:column="27">ArgumentNullException</name><argument_list pos:line="31" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="31" pos:column="49">"logger"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <if pos:line="34" pos:column="13">if <condition pos:line="34" pos:column="16">(<expr><name pos:line="34" pos:column="17">messageBroker</name> <op:operator pos:line="34" pos:column="31">==</op:operator> <name pos:line="34" pos:column="34">null</name></expr>)</condition><then pos:line="34" pos:column="39">
            <block pos:line="35" pos:column="13">{
                <throw pos:line="36" pos:column="17">throw <expr><op:operator pos:line="36" pos:column="23">new</op:operator> <call><name pos:line="36" pos:column="27">ArgumentNullException</name><argument_list pos:line="36" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="36" pos:column="49">"messageBroker"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <if pos:line="39" pos:column="13">if <condition pos:line="39" pos:column="16">(<expr><name pos:line="39" pos:column="17">proxyFactory</name> <op:operator pos:line="39" pos:column="30">==</op:operator> <name pos:line="39" pos:column="33">null</name></expr>)</condition><then pos:line="39" pos:column="38">
            <block pos:line="40" pos:column="13">{
                <throw pos:line="41" pos:column="17">throw <expr><op:operator pos:line="41" pos:column="23">new</op:operator> <call><name pos:line="41" pos:column="27">ArgumentNullException</name><argument_list pos:line="41" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="41" pos:column="49">"proxyFactory"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <if pos:line="44" pos:column="13">if <condition pos:line="44" pos:column="16">(<expr><name pos:line="44" pos:column="17">timerStrategy</name> <op:operator pos:line="44" pos:column="31">==</op:operator> <name pos:line="44" pos:column="34">null</name></expr>)</condition><then pos:line="44" pos:column="39">
            <block pos:line="45" pos:column="13">{
                <throw pos:line="46" pos:column="17">throw <expr><op:operator pos:line="46" pos:column="23">new</op:operator> <call><name pos:line="46" pos:column="27">ArgumentNullException</name><argument_list pos:line="46" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="46" pos:column="49">"timerStrategy"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <if pos:line="49" pos:column="13">if <condition pos:line="49" pos:column="16">(<expr><name pos:line="49" pos:column="17">runtimePolicyStrategy</name> <op:operator pos:line="49" pos:column="39">==</op:operator> <name pos:line="49" pos:column="42">null</name></expr>)</condition><then pos:line="49" pos:column="47">
            <block pos:line="50" pos:column="13">{
                <throw pos:line="51" pos:column="17">throw <expr><op:operator pos:line="51" pos:column="23">new</op:operator> <call><name pos:line="51" pos:column="27">ArgumentNullException</name><argument_list pos:line="51" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="51" pos:column="49">"runtimePolicyStrategy"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <expr_stmt><expr><name pos:line="54" pos:column="13">Invocation</name> <op:operator pos:line="54" pos:column="24">=</op:operator> <name pos:line="54" pos:column="26">invocation</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="55" pos:column="13">Logger</name> <op:operator pos:line="55" pos:column="20">=</op:operator> <name pos:line="55" pos:column="22">logger</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="56" pos:column="13">MessageBroker</name> <op:operator pos:line="56" pos:column="27">=</op:operator> <name pos:line="56" pos:column="29">messageBroker</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="57" pos:column="13">ProxyFactory</name> <op:operator pos:line="57" pos:column="26">=</op:operator> <name pos:line="57" pos:column="28">proxyFactory</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="58" pos:column="13">TimerStrategy</name> <op:operator pos:line="58" pos:column="27">=</op:operator> <name pos:line="58" pos:column="29">timerStrategy</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="59" pos:column="13">RuntimePolicyStrategy</name> <op:operator pos:line="59" pos:column="35">=</op:operator> <name pos:line="59" pos:column="37">runtimePolicyStrategy</name></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="62" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="63" pos:column="9">/// Gets or sets the invocation.</comment>
        <comment type="line" pos:line="64" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="65" pos:column="9">/// &lt;value&gt;</comment>
        <comment type="line" pos:line="66" pos:column="9">/// The invocation.</comment>
        <comment type="line" pos:line="67" pos:column="9">/// &lt;/value&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="68" pos:column="9">public</specifier> <name pos:line="68" pos:column="16">IInvocation</name></type> <name pos:line="68" pos:column="28">Invocation</name> <block pos:line="68" pos:column="39">{ <function_decl><name pos:line="68" pos:column="41">get</name>;</function_decl> <function_decl><name pos:line="68" pos:column="46">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="70" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="71" pos:column="9">/// Gets or sets the logger.</comment>
        <comment type="line" pos:line="72" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="73" pos:column="9">/// &lt;value&gt;</comment>
        <comment type="line" pos:line="74" pos:column="9">/// The logger.</comment>
        <comment type="line" pos:line="75" pos:column="9">/// &lt;/value&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="76" pos:column="9">public</specifier> <name pos:line="76" pos:column="16">ILogger</name></type> <name pos:line="76" pos:column="24">Logger</name> <block pos:line="76" pos:column="31">{ <function_decl><name pos:line="76" pos:column="33">get</name>;</function_decl> <function_decl><name pos:line="76" pos:column="38">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="78" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="79" pos:column="9">/// Gets the proxy object on which the alternate implementation is invoked.</comment>
        <comment type="line" pos:line="80" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="81" pos:column="9">/// &lt;value&gt;</comment>
        <comment type="line" pos:line="82" pos:column="9">/// The proxy.</comment>
        <comment type="line" pos:line="83" pos:column="9">/// &lt;/value&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="84" pos:column="9">public</specifier> <name pos:line="84" pos:column="16">object</name></type> <name pos:line="84" pos:column="23">Proxy</name>
        <block pos:line="85" pos:column="9">{
            <function><name pos:line="86" pos:column="13">get</name> <block pos:line="86" pos:column="17">{ <return pos:line="86" pos:column="19">return <expr><name><name pos:line="86" pos:column="26">Invocation</name><op:operator pos:line="86" pos:column="36">.</op:operator><name pos:line="86" pos:column="37">Proxy</name></name></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="89" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="90" pos:column="9">/// Gets the object on which the invocation is performed. This is different from proxy object</comment>
        <comment type="line" pos:line="91" pos:column="9">/// because most of the time this will be the proxy target object.</comment>
        <comment type="line" pos:line="92" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="93" pos:column="9">/// &lt;value&gt;</comment>
        <comment type="line" pos:line="94" pos:column="9">/// The invocation target.</comment>
        <comment type="line" pos:line="95" pos:column="9">/// &lt;/value&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="96" pos:column="9">public</specifier> <name pos:line="96" pos:column="16">object</name></type> <name pos:line="96" pos:column="23">InvocationTarget</name>
        <block pos:line="97" pos:column="9">{
            <function><name pos:line="98" pos:column="13">get</name> <block pos:line="98" pos:column="17">{ <return pos:line="98" pos:column="19">return <expr><name><name pos:line="98" pos:column="26">Invocation</name><op:operator pos:line="98" pos:column="36">.</op:operator><name pos:line="98" pos:column="37">InvocationTarget</name></name></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="101" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="102" pos:column="9">/// Gets the type of the target object for the intercepted method.</comment>
        <comment type="line" pos:line="103" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="104" pos:column="9">/// &lt;value&gt;</comment>
        <comment type="line" pos:line="105" pos:column="9">/// The type of the target.</comment>
        <comment type="line" pos:line="106" pos:column="9">/// &lt;/value&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="107" pos:column="9">public</specifier> <name pos:line="107" pos:column="16">Type</name></type> <name pos:line="107" pos:column="21">TargetType</name>
        <block pos:line="108" pos:column="9">{
            <function><name pos:line="109" pos:column="13">get</name> <block pos:line="109" pos:column="17">{ <return pos:line="109" pos:column="19">return <expr><name><name pos:line="109" pos:column="26">Invocation</name><op:operator pos:line="109" pos:column="36">.</op:operator><name pos:line="109" pos:column="37">TargetType</name></name></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="112" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="113" pos:column="9">/// Gets the arguments that &lt;see cref="IAlternateMethod" /&gt; has been invoked with.</comment>
        <comment type="line" pos:line="114" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="115" pos:column="9">/// &lt;value&gt;</comment>
        <comment type="line" pos:line="116" pos:column="9">/// The arguments.</comment>
        <comment type="line" pos:line="117" pos:column="9">/// &lt;/value&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="118" pos:column="9">public</specifier> <name pos:line="118" pos:column="16">object</name><index pos:line="118" pos:column="22">[]</index></type> <name pos:line="118" pos:column="25">Arguments</name>
        <block pos:line="119" pos:column="9">{
            <function><name pos:line="120" pos:column="13">get</name> <block pos:line="120" pos:column="17">{ <return pos:line="120" pos:column="19">return <expr><name><name pos:line="120" pos:column="26">Invocation</name><op:operator pos:line="120" pos:column="36">.</op:operator><name pos:line="120" pos:column="37">Arguments</name></name></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="123" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="124" pos:column="9">/// Gets the generic arguments.</comment>
        <comment type="line" pos:line="125" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="126" pos:column="9">/// &lt;value&gt;</comment>
        <comment type="line" pos:line="127" pos:column="9">/// The generic arguments.</comment>
        <comment type="line" pos:line="128" pos:column="9">/// &lt;/value&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="129" pos:column="9">public</specifier> <name pos:line="129" pos:column="16">Type</name><index pos:line="129" pos:column="20">[]</index></type> <name pos:line="129" pos:column="23">GenericArguments</name>
        <block pos:line="130" pos:column="9">{
            <function><name pos:line="131" pos:column="13">get</name> <block pos:line="131" pos:column="17">{ <return pos:line="131" pos:column="19">return <expr><name><name pos:line="131" pos:column="26">Invocation</name><op:operator pos:line="131" pos:column="36">.</op:operator><name pos:line="131" pos:column="37">GenericArguments</name></name></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="134" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="135" pos:column="9">/// Gets the method representing the method being invoked on the proxy.</comment>
        <comment type="line" pos:line="136" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="137" pos:column="9">/// &lt;value&gt;</comment>
        <comment type="line" pos:line="138" pos:column="9">/// The method.</comment>
        <comment type="line" pos:line="139" pos:column="9">/// &lt;/value&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="140" pos:column="9">public</specifier> <name pos:line="140" pos:column="16">MethodInfo</name></type> <name pos:line="140" pos:column="27">Method</name>
        <block pos:line="141" pos:column="9">{
            <function><name pos:line="142" pos:column="13">get</name> <block pos:line="142" pos:column="17">{ <return pos:line="142" pos:column="19">return <expr><name><name pos:line="142" pos:column="26">Invocation</name><op:operator pos:line="142" pos:column="36">.</op:operator><name pos:line="142" pos:column="37">Method</name></name></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="145" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="146" pos:column="9">/// Gets the method info on the target class.</comment>
        <comment type="line" pos:line="147" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="148" pos:column="9">/// &lt;value&gt;</comment>
        <comment type="line" pos:line="149" pos:column="9">/// The method invocation target.</comment>
        <comment type="line" pos:line="150" pos:column="9">/// &lt;/value&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="151" pos:column="9">public</specifier> <name pos:line="151" pos:column="16">MethodInfo</name></type> <name pos:line="151" pos:column="27">MethodInvocationTarget</name>
        <block pos:line="152" pos:column="9">{
            <function><name pos:line="153" pos:column="13">get</name> <block pos:line="153" pos:column="17">{ <return pos:line="153" pos:column="19">return <expr><name><name pos:line="153" pos:column="26">Invocation</name><op:operator pos:line="153" pos:column="36">.</op:operator><name pos:line="153" pos:column="37">MethodInvocationTarget</name></name></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="156" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="157" pos:column="9">/// Gets or sets the return value of the method.</comment>
        <comment type="line" pos:line="158" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="159" pos:column="9">/// &lt;value&gt;</comment>
        <comment type="line" pos:line="160" pos:column="9">/// The return value.</comment>
        <comment type="line" pos:line="161" pos:column="9">/// &lt;/value&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="162" pos:column="9">public</specifier> <name pos:line="162" pos:column="16">object</name></type> <name pos:line="162" pos:column="23">ReturnValue</name>
        <block pos:line="163" pos:column="9">{
            <function><name pos:line="164" pos:column="13">get</name> <block pos:line="164" pos:column="17">{ <return pos:line="164" pos:column="19">return <expr><name><name pos:line="164" pos:column="26">Invocation</name><op:operator pos:line="164" pos:column="36">.</op:operator><name pos:line="164" pos:column="37">ReturnValue</name></name></expr>;</return> }</block></function>
            <function><name pos:line="165" pos:column="13">set</name> <block pos:line="165" pos:column="17">{ <expr_stmt><expr><name><name pos:line="165" pos:column="19">Invocation</name><op:operator pos:line="165" pos:column="29">.</op:operator><name pos:line="165" pos:column="30">ReturnValue</name></name> <op:operator pos:line="165" pos:column="42">=</op:operator> <name pos:line="165" pos:column="44">value</name></expr>;</expr_stmt> }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="168" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="169" pos:column="9">/// Gets the message broker.</comment>
        <comment type="line" pos:line="170" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="171" pos:column="9">/// &lt;value&gt;</comment>
        <comment type="line" pos:line="172" pos:column="9">/// The message broker.</comment>
        <comment type="line" pos:line="173" pos:column="9">/// &lt;/value&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="174" pos:column="9">public</specifier> <name pos:line="174" pos:column="16">IMessageBroker</name></type> <name pos:line="174" pos:column="31">MessageBroker</name> <block pos:line="174" pos:column="45">{ <function_decl><name pos:line="174" pos:column="47">get</name>;</function_decl> <function_decl><specifier pos:line="174" pos:column="52">private</specifier> <name pos:line="174" pos:column="60">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="176" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="177" pos:column="9">/// Gets the proxy factory.</comment>
        <comment type="line" pos:line="178" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="179" pos:column="9">/// &lt;value&gt;</comment>
        <comment type="line" pos:line="180" pos:column="9">/// The proxy factory.</comment>
        <comment type="line" pos:line="181" pos:column="9">/// &lt;/value&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="182" pos:column="9">public</specifier> <name pos:line="182" pos:column="16">IProxyFactory</name></type> <name pos:line="182" pos:column="30">ProxyFactory</name> <block pos:line="182" pos:column="43">{ <function_decl><name pos:line="182" pos:column="45">get</name>;</function_decl> <function_decl><specifier pos:line="182" pos:column="50">private</specifier> <name pos:line="182" pos:column="58">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="184" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="185" pos:column="9">/// Gets the timer strategy.</comment>
        <comment type="line" pos:line="186" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="187" pos:column="9">/// &lt;value&gt;</comment>
        <comment type="line" pos:line="188" pos:column="9">/// The timer strategy.</comment>
        <comment type="line" pos:line="189" pos:column="9">/// &lt;/value&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="190" pos:column="9">public</specifier> <name><name pos:line="190" pos:column="16">Func</name><argument_list pos:line="190" pos:column="20">&lt;<argument><name pos:line="190" pos:column="21">IExecutionTimer</name></argument>&gt;</argument_list></name></type> <name pos:line="190" pos:column="38">TimerStrategy</name> <block pos:line="190" pos:column="52">{ <function_decl><name pos:line="190" pos:column="54">get</name>;</function_decl> <function_decl><specifier pos:line="190" pos:column="59">private</specifier> <name pos:line="190" pos:column="67">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="192" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="193" pos:column="9">/// Gets the runtime policy strategy.</comment>
        <comment type="line" pos:line="194" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="195" pos:column="9">/// &lt;value&gt;</comment>
        <comment type="line" pos:line="196" pos:column="9">/// The runtime policy strategy.</comment>
        <comment type="line" pos:line="197" pos:column="9">/// &lt;/value&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="198" pos:column="9">public</specifier> <name><name pos:line="198" pos:column="16">Func</name><argument_list pos:line="198" pos:column="20">&lt;<argument><name pos:line="198" pos:column="21">RuntimePolicy</name></argument>&gt;</argument_list></name></type> <name pos:line="198" pos:column="36">RuntimePolicyStrategy</name> <block pos:line="198" pos:column="58">{ <function_decl><name pos:line="198" pos:column="60">get</name>;</function_decl> <function_decl><specifier pos:line="198" pos:column="65">private</specifier> <name pos:line="198" pos:column="73">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="200" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="201" pos:column="9">/// Overrides the value of an argument at the given index with the new value provided.</comment>
        <comment type="line" pos:line="202" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="203" pos:column="9">/// &lt;param name="index"&gt;The index.&lt;/param&gt;</comment>
        <comment type="line" pos:line="204" pos:column="9">/// &lt;param name="value"&gt;The value.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="205" pos:column="9">public</specifier> <name pos:line="205" pos:column="16">void</name></type> <name pos:line="205" pos:column="21">SetArgumentValue</name><parameter_list pos:line="205" pos:column="37">(<param><decl><type><name pos:line="205" pos:column="38">int</name></type> <name pos:line="205" pos:column="42">index</name></decl></param>, <param><decl><type><name pos:line="205" pos:column="49">object</name></type> <name pos:line="205" pos:column="56">value</name></decl></param>)</parameter_list>
        <block pos:line="206" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="207" pos:column="13">Invocation</name><op:operator pos:line="207" pos:column="23">.</op:operator><name pos:line="207" pos:column="24">SetArgumentValue</name></name><argument_list pos:line="207" pos:column="40">(<argument><expr><name pos:line="207" pos:column="41">index</name></expr></argument>, <argument><expr><name pos:line="207" pos:column="48">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="210" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="211" pos:column="9">/// Gets the value of the argument at the specified index.</comment>
        <comment type="line" pos:line="212" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="213" pos:column="9">/// &lt;param name="index"&gt;The index.&lt;/param&gt;</comment>
        <comment type="line" pos:line="214" pos:column="9">/// &lt;returns&gt;</comment>
        <comment type="line" pos:line="215" pos:column="9">/// Value of the argument.</comment>
        <comment type="line" pos:line="216" pos:column="9">/// &lt;/returns&gt;</comment>
        <function><type><specifier pos:line="217" pos:column="9">public</specifier> <name pos:line="217" pos:column="16">object</name></type> <name pos:line="217" pos:column="23">GetArgumentValue</name><parameter_list pos:line="217" pos:column="39">(<param><decl><type><name pos:line="217" pos:column="40">int</name></type> <name pos:line="217" pos:column="44">index</name></decl></param>)</parameter_list>
        <block pos:line="218" pos:column="9">{
            <return pos:line="219" pos:column="13">return <expr><call><name><name pos:line="219" pos:column="20">Invocation</name><op:operator pos:line="219" pos:column="30">.</op:operator><name pos:line="219" pos:column="31">GetArgumentValue</name></name><argument_list pos:line="219" pos:column="47">(<argument><expr><name pos:line="219" pos:column="48">index</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="222" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="223" pos:column="9">/// Gets the concrete method.</comment>
        <comment type="line" pos:line="224" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="225" pos:column="9">/// &lt;returns&gt;</comment>
        <comment type="line" pos:line="226" pos:column="9">/// The method info of the method that is the proxy that is the alternative implementation.</comment>
        <comment type="line" pos:line="227" pos:column="9">/// &lt;/returns&gt;</comment>
        <function><type><specifier pos:line="228" pos:column="9">public</specifier> <name pos:line="228" pos:column="16">MethodInfo</name></type> <name pos:line="228" pos:column="27">GetConcreteMethod</name><parameter_list pos:line="228" pos:column="44">()</parameter_list>
        <block pos:line="229" pos:column="9">{
            <return pos:line="230" pos:column="13">return <expr><call><name><name pos:line="230" pos:column="20">Invocation</name><op:operator pos:line="230" pos:column="30">.</op:operator><name pos:line="230" pos:column="31">GetConcreteMethod</name></name><argument_list pos:line="230" pos:column="48">()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="233" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="234" pos:column="9">/// Gets the concrete method invocation target.</comment>
        <comment type="line" pos:line="235" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="236" pos:column="9">/// &lt;returns&gt;</comment>
        <comment type="line" pos:line="237" pos:column="9">/// The method info of the method that is the target of the alternative implementation.</comment>
        <comment type="line" pos:line="238" pos:column="9">/// &lt;/returns&gt;</comment>
        <function><type><specifier pos:line="239" pos:column="9">public</specifier> <name pos:line="239" pos:column="16">MethodInfo</name></type> <name pos:line="239" pos:column="27">GetConcreteMethodInvocationTarget</name><parameter_list pos:line="239" pos:column="60">()</parameter_list>
        <block pos:line="240" pos:column="9">{
            <return pos:line="241" pos:column="13">return <expr><call><name><name pos:line="241" pos:column="20">Invocation</name><op:operator pos:line="241" pos:column="30">.</op:operator><name pos:line="241" pos:column="31">GetConcreteMethodInvocationTarget</name></name><argument_list pos:line="241" pos:column="64">()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="244" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="245" pos:column="9">/// Proceeds the call to the next implementation in line, and ultimately to the target method.</comment>
        <comment type="line" pos:line="246" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="247" pos:column="9">public</specifier> <name pos:line="247" pos:column="16">void</name></type> <name pos:line="247" pos:column="21">Proceed</name><parameter_list pos:line="247" pos:column="28">()</parameter_list>
        <block pos:line="248" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="249" pos:column="13">Invocation</name><op:operator pos:line="249" pos:column="23">.</op:operator><name pos:line="249" pos:column="24">Proceed</name></name><argument_list pos:line="249" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
