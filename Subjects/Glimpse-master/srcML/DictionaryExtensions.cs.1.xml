<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Core\Extensions\DictionaryExtensions.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">System</name><op:operator pos:line="1" pos:column="13">.</op:operator><name pos:line="1" pos:column="14">Collections</name><op:operator pos:line="1" pos:column="25">.</op:operator><name pos:line="1" pos:column="26">Generic</name></name>;</using>

<namespace pos:line="3" pos:column="1">namespace <name><name pos:line="3" pos:column="11">Glimpse</name><op:operator pos:line="3" pos:column="18">.</op:operator><name pos:line="3" pos:column="19">Core</name><op:operator pos:line="3" pos:column="23">.</op:operator><name pos:line="3" pos:column="24">Extensions</name></name>
<block pos:line="4" pos:column="1">{
    <comment type="line" pos:line="5" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="6" pos:column="5">/// Extension methods to simplify common tasks completed with &lt;see cref="IDictionary{TKey, TValue}"/&gt;.</comment>
    <comment type="line" pos:line="7" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="8" pos:column="5">public</specifier> <specifier pos:line="8" pos:column="12">static</specifier> class <name pos:line="8" pos:column="25">DictionaryExtensions</name>
    <block pos:line="9" pos:column="5">{
        <comment type="line" pos:line="10" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="11" pos:column="9">/// Gets the value, if available, or &lt;paramref name="ifNotFound"/&gt;.</comment>
        <comment type="line" pos:line="12" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="13" pos:column="9">/// &lt;typeparam name="TKey"&gt;The type of the key.&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="14" pos:column="9">/// &lt;typeparam name="TValue"&gt;The type of the value.&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="15" pos:column="9">/// &lt;param name="dictionary"&gt;The dictionary to search.&lt;/param&gt;</comment>
        <comment type="line" pos:line="16" pos:column="9">/// &lt;param name="key"&gt;The item key.&lt;/param&gt;</comment>
        <comment type="line" pos:line="17" pos:column="9">/// &lt;param name="ifNotFound"&gt;The fallback value.&lt;/param&gt;</comment>
        <comment type="line" pos:line="18" pos:column="9">/// &lt;returns&gt;</comment>
        <comment type="line" pos:line="19" pos:column="9">/// Returns the item in &lt;paramref name="dictionary"/&gt; that matches &lt;paramref name="key"/&gt;, falling back to the value of &lt;paramref name="ifNotFound"/&gt; if the item is unavailable.</comment>
        <comment type="line" pos:line="20" pos:column="9">/// &lt;/returns&gt;</comment>
        <function><type><specifier pos:line="21" pos:column="9">public</specifier> <specifier pos:line="21" pos:column="16">static</specifier> <name pos:line="21" pos:column="23">TValue</name></type> <name><name pos:line="21" pos:column="30">GetValueOrDefault</name><argument_list pos:line="21" pos:column="47">&lt;<argument><name pos:line="21" pos:column="48">TKey</name></argument>, <argument><name pos:line="21" pos:column="54">TValue</name></argument>&gt;</argument_list></name><parameter_list pos:line="21" pos:column="61">(<param><decl><type><name pos:line="21" pos:column="62">this</name> <name><name pos:line="21" pos:column="67">IDictionary</name><argument_list pos:line="21" pos:column="78">&lt;<argument><name pos:line="21" pos:column="79">TKey</name></argument>, <argument><name pos:line="21" pos:column="85">TValue</name></argument>&gt;</argument_list></name></type> <name pos:line="21" pos:column="93">dictionary</name></decl></param>, <param><decl><type><name pos:line="21" pos:column="105">TKey</name></type> <name pos:line="21" pos:column="110">key</name></decl></param>, <param><decl><type><name pos:line="21" pos:column="115">TValue</name></type> <name pos:line="21" pos:column="122">ifNotFound</name> <init pos:line="21" pos:column="133">= <expr><call><name pos:line="21" pos:column="135">default</name><argument_list pos:line="21" pos:column="142">(<argument><expr><name pos:line="21" pos:column="143">TValue</name></expr></argument>)</argument_list></call></expr></init></decl></param>)</parameter_list>
        <block pos:line="22" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="23" pos:column="13">TValue</name></type> <name pos:line="23" pos:column="20">val</name></decl>;</decl_stmt>
            <return pos:line="24" pos:column="13">return <expr><call><name><name pos:line="24" pos:column="20">dictionary</name><op:operator pos:line="24" pos:column="30">.</op:operator><name pos:line="24" pos:column="31">TryGetValue</name></name><argument_list pos:line="24" pos:column="42">(<argument><expr><name pos:line="24" pos:column="43">key</name></expr></argument>, <argument><expr pos:line="24" pos:column="48">out <name pos:line="24" pos:column="52">val</name></expr></argument>)</argument_list></call> <op:operator pos:line="24" pos:column="57">?</op:operator> <name pos:line="24" pos:column="59">val</name> <op:operator pos:line="24" pos:column="63">:</op:operator> <name pos:line="24" pos:column="65">ifNotFound</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
