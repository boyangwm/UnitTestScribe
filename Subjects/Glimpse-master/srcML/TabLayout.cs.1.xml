<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Core\Tab\Assist\TabLayout.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>

<namespace pos:line="5" pos:column="1">namespace <name><name pos:line="5" pos:column="11">Glimpse</name><op:operator pos:line="5" pos:column="18">.</op:operator><name pos:line="5" pos:column="19">Core</name><op:operator pos:line="5" pos:column="23">.</op:operator><name pos:line="5" pos:column="24">Tab</name><op:operator pos:line="5" pos:column="27">.</op:operator><name pos:line="5" pos:column="28">Assist</name></name>
<block pos:line="6" pos:column="1">{
    <class><specifier pos:line="7" pos:column="5">public</specifier> class <name pos:line="7" pos:column="18">TabLayout</name> <super pos:line="7" pos:column="28">: <name pos:line="7" pos:column="30">ITabBuild</name></super>
    <block pos:line="8" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="9" pos:column="9">private</specifier> <specifier pos:line="9" pos:column="17">readonly</specifier> <name><name pos:line="9" pos:column="26">List</name><argument_list pos:line="9" pos:column="30">&lt;<argument><name pos:line="9" pos:column="31">TabLayoutRow</name></argument>&gt;</argument_list></name></type> <name pos:line="9" pos:column="45">rows</name> <init pos:line="9" pos:column="50">= <expr><op:operator pos:line="9" pos:column="52">new</op:operator> <call><name><name pos:line="9" pos:column="56">List</name><argument_list pos:line="9" pos:column="60">&lt;<argument><name pos:line="9" pos:column="61">TabLayoutRow</name></argument>&gt;</argument_list></name><argument_list pos:line="9" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="10" pos:column="9">private</specifier> <specifier pos:line="10" pos:column="17">readonly</specifier> <name><name pos:line="10" pos:column="26">Dictionary</name><argument_list pos:line="10" pos:column="36">&lt;<argument><name pos:line="10" pos:column="37">string</name></argument>, <argument><name pos:line="10" pos:column="45">TabLayout</name></argument>&gt;</argument_list></name></type> <name pos:line="10" pos:column="56">cells</name> <init pos:line="10" pos:column="62">= <expr><op:operator pos:line="10" pos:column="64">new</op:operator> <call><name><name pos:line="10" pos:column="68">Dictionary</name><argument_list pos:line="10" pos:column="78">&lt;<argument><name pos:line="10" pos:column="79">string</name></argument>, <argument><name pos:line="10" pos:column="87">TabLayout</name></argument>&gt;</argument_list></name><argument_list pos:line="10" pos:column="97">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <constructor><specifier pos:line="12" pos:column="9">private</specifier> <name pos:line="12" pos:column="17">TabLayout</name><parameter_list pos:line="12" pos:column="26">()</parameter_list>
        <block pos:line="13" pos:column="9">{
        }</block></constructor>

        <decl_stmt><decl><type><specifier pos:line="16" pos:column="9">public</specifier> <name><name pos:line="16" pos:column="16">IEnumerable</name><argument_list pos:line="16" pos:column="27">&lt;<argument><name pos:line="16" pos:column="28">TabLayoutRow</name></argument>&gt;</argument_list></name></type> <name pos:line="16" pos:column="42">Rows</name>
        <block pos:line="17" pos:column="9">{
            <function><name pos:line="18" pos:column="13">get</name> <block pos:line="18" pos:column="17">{ <return pos:line="18" pos:column="19">return <expr><name pos:line="18" pos:column="26">rows</name></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <function><type><specifier pos:line="21" pos:column="9">public</specifier> <specifier pos:line="21" pos:column="16">static</specifier> <name pos:line="21" pos:column="23">TabLayout</name></type> <name pos:line="21" pos:column="33">Create</name><parameter_list pos:line="21" pos:column="39">()</parameter_list>
        <block pos:line="22" pos:column="9">{
            <return pos:line="23" pos:column="13">return <expr><op:operator pos:line="23" pos:column="20">new</op:operator> <call><name pos:line="23" pos:column="24">TabLayout</name><argument_list pos:line="23" pos:column="33">()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="26" pos:column="9">public</specifier> <specifier pos:line="26" pos:column="16">static</specifier> <name pos:line="26" pos:column="23">TabLayout</name></type> <name pos:line="26" pos:column="33">Create</name><parameter_list pos:line="26" pos:column="39">(<param><decl><type><name><name pos:line="26" pos:column="40">Action</name><argument_list pos:line="26" pos:column="46">&lt;<argument><name pos:line="26" pos:column="47">TabLayout</name></argument>&gt;</argument_list></name></type> <name pos:line="26" pos:column="58">layout</name></decl></param>)</parameter_list>
        <block pos:line="27" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="28" pos:column="13">var</name></type> <name pos:line="28" pos:column="17">tabLayout</name> <init pos:line="28" pos:column="27">= <expr><op:operator pos:line="28" pos:column="29">new</op:operator> <call><name pos:line="28" pos:column="33">TabLayout</name><argument_list pos:line="28" pos:column="42">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="29" pos:column="13">layout</name><op:operator pos:line="29" pos:column="19">.</op:operator><name pos:line="29" pos:column="20">Invoke</name></name><argument_list pos:line="29" pos:column="26">(<argument><expr><name pos:line="29" pos:column="27">tabLayout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="30" pos:column="13">return <expr><name pos:line="30" pos:column="20">tabLayout</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="33" pos:column="9">public</specifier> <name pos:line="33" pos:column="16">TabLayout</name></type> <name pos:line="33" pos:column="26">Row</name><parameter_list pos:line="33" pos:column="29">(<param><decl><type><name><name pos:line="33" pos:column="30">Action</name><argument_list pos:line="33" pos:column="36">&lt;<argument><name pos:line="33" pos:column="37">TabLayoutRow</name></argument>&gt;</argument_list></name></type> <name pos:line="33" pos:column="51">row</name></decl></param>)</parameter_list>
        <block pos:line="34" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="35" pos:column="13">var</name></type> <name pos:line="35" pos:column="17">layoutRow</name> <init pos:line="35" pos:column="27">= <expr><op:operator pos:line="35" pos:column="29">new</op:operator> <call><name pos:line="35" pos:column="33">TabLayoutRow</name><argument_list pos:line="35" pos:column="45">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="36" pos:column="13">row</name><op:operator pos:line="36" pos:column="16">.</op:operator><name pos:line="36" pos:column="17">Invoke</name></name><argument_list pos:line="36" pos:column="23">(<argument><expr><name pos:line="36" pos:column="24">layoutRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="37" pos:column="13">rows</name><op:operator pos:line="37" pos:column="17">.</op:operator><name pos:line="37" pos:column="18">Add</name></name><argument_list pos:line="37" pos:column="21">(<argument><expr><name pos:line="37" pos:column="22">layoutRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="38" pos:column="13">return <expr><name pos:line="38" pos:column="20">this</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="41" pos:column="9">public</specifier> <name pos:line="41" pos:column="16">TabLayout</name></type> <name pos:line="41" pos:column="26">Cell</name><parameter_list pos:line="41" pos:column="30">(<param><decl><type><name pos:line="41" pos:column="31">string</name></type> <name pos:line="41" pos:column="38">target</name></decl></param>, <param><decl><type><name pos:line="41" pos:column="46">TabLayout</name></type> <name pos:line="41" pos:column="56">layout</name></decl></param>)</parameter_list>
        <block pos:line="42" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="43" pos:column="13">cells</name><op:operator pos:line="43" pos:column="18">.</op:operator><name pos:line="43" pos:column="19">Add</name></name><argument_list pos:line="43" pos:column="22">(<argument><expr><name pos:line="43" pos:column="23">target</name></expr></argument>, <argument><expr><name pos:line="43" pos:column="31">layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="44" pos:column="13">return <expr><name pos:line="44" pos:column="20">this</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="47" pos:column="9">public</specifier> <name pos:line="47" pos:column="16">object</name></type> <name pos:line="47" pos:column="23">Build</name><parameter_list pos:line="47" pos:column="28">()</parameter_list>
        <block pos:line="48" pos:column="9">{
            <if pos:line="49" pos:column="13">if <condition pos:line="49" pos:column="16">(<expr><name><name pos:line="49" pos:column="17">cells</name><op:operator pos:line="49" pos:column="22">.</op:operator><name pos:line="49" pos:column="23">Count</name></name> <op:operator pos:line="49" pos:column="29">&gt;</op:operator> <lit:literal type="number" pos:line="49" pos:column="31">0</lit:literal></expr>)</condition><then pos:line="49" pos:column="33">
            <block pos:line="50" pos:column="13">{
                <return pos:line="51" pos:column="17">return <expr><call><name><name pos:line="51" pos:column="24">cells</name><op:operator pos:line="51" pos:column="29">.</op:operator><name pos:line="51" pos:column="30">ToDictionary</name></name><argument_list pos:line="51" pos:column="42">(<argument><expr><lambda><name pos:line="51" pos:column="43">x</name> <op:operator pos:line="51" pos:column="45">=&gt;</op:operator> <name><name pos:line="51" pos:column="48">x</name><op:operator pos:line="51" pos:column="49">.</op:operator><name pos:line="51" pos:column="50">Key</name></name></lambda></expr></argument>, <argument><expr><lambda><name pos:line="51" pos:column="55">x</name> <op:operator pos:line="51" pos:column="57">=&gt;</op:operator> <op:operator pos:line="51" pos:column="60">new</op:operator> <block pos:line="51" pos:column="64">{ <expr><name pos:line="51" pos:column="66">Layout</name> <op:operator pos:line="51" pos:column="73">=</op:operator> <call><name><name pos:line="51" pos:column="75">x</name><op:operator pos:line="51" pos:column="76">.</op:operator><name pos:line="51" pos:column="77">Value</name><op:operator pos:line="51" pos:column="82">.</op:operator><name pos:line="51" pos:column="83">Build</name></name><argument_list pos:line="51" pos:column="88">()</argument_list></call></expr> }</block></lambda></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>

            <return pos:line="54" pos:column="13">return <expr><call><name><name pos:line="54" pos:column="20">rows</name><op:operator pos:line="54" pos:column="24">.</op:operator><name pos:line="54" pos:column="25">Select</name></name><argument_list pos:line="54" pos:column="31">(<argument><expr><lambda><name pos:line="54" pos:column="32">r</name> <op:operator pos:line="54" pos:column="34">=&gt;</op:operator> <call><name><name pos:line="54" pos:column="37">r</name><op:operator pos:line="54" pos:column="38">.</op:operator><name pos:line="54" pos:column="39">Build</name></name><argument_list pos:line="54" pos:column="44">()</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
