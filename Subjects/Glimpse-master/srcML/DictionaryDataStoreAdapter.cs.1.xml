<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Core\Extensibility\DictionaryDataStoreAdapter.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name></name>;</using>

<namespace pos:line="4" pos:column="1">namespace <name><name pos:line="4" pos:column="11">Glimpse</name><op:operator pos:line="4" pos:column="18">.</op:operator><name pos:line="4" pos:column="19">Core</name><op:operator pos:line="4" pos:column="23">.</op:operator><name pos:line="4" pos:column="24">Extensibility</name></name>
<block pos:line="5" pos:column="1">{
    <comment type="line" pos:line="6" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="7" pos:column="5">/// An adapter between an &lt;see cref="IDictionary"/&gt; and &lt;see cref="IDataStore"/&gt;.</comment>
    <comment type="line" pos:line="8" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="9" pos:column="5">public</specifier> class <name pos:line="9" pos:column="18">DictionaryDataStoreAdapter</name> <super pos:line="9" pos:column="45">: <name pos:line="9" pos:column="47">IDataStore</name></super>
    <block pos:line="10" pos:column="5">{
        <comment type="line" pos:line="11" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="12" pos:column="9">/// Initializes a new instance of the &lt;see cref="DictionaryDataStoreAdapter" /&gt; class.</comment>
        <comment type="line" pos:line="13" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="14" pos:column="9">/// &lt;param name="dictionary"&gt;The dictionary.&lt;/param&gt;</comment>
        <comment type="line" pos:line="15" pos:column="9">/// &lt;exception cref="System.ArgumentException"&gt;Throws an exception if a generic dictionary does not have a value of type &lt;see cref="object"/&gt; and a key of either &lt;see cref="string"/&gt; or &lt;see cref="object"/&gt;.&lt;/exception&gt;</comment>
        <constructor><specifier pos:line="16" pos:column="9">public</specifier> <name pos:line="16" pos:column="16">DictionaryDataStoreAdapter</name><parameter_list pos:line="16" pos:column="42">(<param><decl><type><name pos:line="16" pos:column="43">IDictionary</name></type> <name pos:line="16" pos:column="55">dictionary</name></decl></param>)</parameter_list>
        <block pos:line="17" pos:column="9">{
            <if pos:line="18" pos:column="13">if <condition pos:line="18" pos:column="16">(<expr><op:operator pos:line="18" pos:column="17">!</op:operator><call><name pos:line="18" pos:column="18">IsValidDictionaryType</name><argument_list pos:line="18" pos:column="39">(<argument><expr><name pos:line="18" pos:column="40">dictionary</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="18" pos:column="52">
            <block pos:line="19" pos:column="13">{
                <throw pos:line="20" pos:column="17">throw <expr><op:operator pos:line="20" pos:column="23">new</op:operator> <call><name pos:line="20" pos:column="27">ArgumentException</name><argument_list pos:line="20" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="20" pos:column="45">"dictionary"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            
            <expr_stmt><expr><name pos:line="23" pos:column="13">Dictionary</name> <op:operator pos:line="23" pos:column="24">=</op:operator> <name pos:line="23" pos:column="26">dictionary</name></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="26" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="27" pos:column="9">/// Gets or sets the dictionary.</comment>
        <comment type="line" pos:line="28" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="29" pos:column="9">/// &lt;value&gt;</comment>
        <comment type="line" pos:line="30" pos:column="9">/// The dictionary.</comment>
        <comment type="line" pos:line="31" pos:column="9">/// &lt;/value&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="32" pos:column="9">internal</specifier> <name pos:line="32" pos:column="18">IDictionary</name></type> <name pos:line="32" pos:column="30">Dictionary</name> <block pos:line="32" pos:column="41">{ <function_decl><name pos:line="32" pos:column="43">get</name>;</function_decl> <function_decl><name pos:line="32" pos:column="48">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="34" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="35" pos:column="9">/// Gets the item with the specified key.</comment>
        <comment type="line" pos:line="36" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="37" pos:column="9">/// &lt;param name="key"&gt;The key.&lt;/param&gt;</comment>
        <comment type="line" pos:line="38" pos:column="9">/// &lt;returns&gt;</comment>
        <comment type="line" pos:line="39" pos:column="9">/// The value stored at given key.</comment>
        <comment type="line" pos:line="40" pos:column="9">/// &lt;/returns&gt;</comment>
        <function><type><specifier pos:line="41" pos:column="9">public</specifier> <name pos:line="41" pos:column="16">object</name></type> <name pos:line="41" pos:column="23">Get</name><parameter_list pos:line="41" pos:column="26">(<param><decl><type><name pos:line="41" pos:column="27">string</name></type> <name pos:line="41" pos:column="34">key</name></decl></param>)</parameter_list>
        <block pos:line="42" pos:column="9">{
            <return pos:line="43" pos:column="13">return <expr><name><name pos:line="43" pos:column="20">Dictionary</name><index pos:line="43" pos:column="30">[<expr><name pos:line="43" pos:column="31">key</name></expr>]</index></name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="46" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="47" pos:column="9">/// Sets the item with the specified key.</comment>
        <comment type="line" pos:line="48" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="49" pos:column="9">/// &lt;param name="key"&gt;The key.&lt;/param&gt;</comment>
        <comment type="line" pos:line="50" pos:column="9">/// &lt;param name="value"&gt;The value.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="51" pos:column="9">public</specifier> <name pos:line="51" pos:column="16">void</name></type> <name pos:line="51" pos:column="21">Set</name><parameter_list pos:line="51" pos:column="24">(<param><decl><type><name pos:line="51" pos:column="25">string</name></type> <name pos:line="51" pos:column="32">key</name></decl></param>, <param><decl><type><name pos:line="51" pos:column="37">object</name></type> <name pos:line="51" pos:column="44">value</name></decl></param>)</parameter_list>
        <block pos:line="52" pos:column="9">{
            <expr_stmt><expr><name><name pos:line="53" pos:column="13">Dictionary</name><index pos:line="53" pos:column="23">[<expr><name pos:line="53" pos:column="24">key</name></expr>]</index></name> <op:operator pos:line="53" pos:column="29">=</op:operator> <name pos:line="53" pos:column="31">value</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="56" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="57" pos:column="9">/// Determines whether the data store contains a definition for the specified key.</comment>
        <comment type="line" pos:line="58" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="59" pos:column="9">/// &lt;param name="key"&gt;The key.&lt;/param&gt;</comment>
        <comment type="line" pos:line="60" pos:column="9">/// &lt;returns&gt;</comment>
        <comment type="line" pos:line="61" pos:column="9">///   &lt;c&gt;true&lt;/c&gt; if it contains the specified key; otherwise, &lt;c&gt;false&lt;/c&gt;.</comment>
        <comment type="line" pos:line="62" pos:column="9">/// &lt;/returns&gt;</comment>
        <function><type><specifier pos:line="63" pos:column="9">public</specifier> <name pos:line="63" pos:column="16">bool</name></type> <name pos:line="63" pos:column="21">Contains</name><parameter_list pos:line="63" pos:column="29">(<param><decl><type><name pos:line="63" pos:column="30">string</name></type> <name pos:line="63" pos:column="37">key</name></decl></param>)</parameter_list>
        <block pos:line="64" pos:column="9">{
            <return pos:line="65" pos:column="13">return <expr><call><name><name pos:line="65" pos:column="20">Dictionary</name><op:operator pos:line="65" pos:column="30">.</op:operator><name pos:line="65" pos:column="31">Contains</name></name><argument_list pos:line="65" pos:column="39">(<argument><expr><name pos:line="65" pos:column="40">key</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="68" pos:column="9">private</specifier> <specifier pos:line="68" pos:column="17">static</specifier> <name pos:line="68" pos:column="24">bool</name></type> <name pos:line="68" pos:column="29">IsValidDictionaryType</name><parameter_list pos:line="68" pos:column="50">(<param><decl><type><name pos:line="68" pos:column="51">IDictionary</name></type> <name pos:line="68" pos:column="63">dictionary</name></decl></param>)</parameter_list>
        <block pos:line="69" pos:column="9">{
            <if pos:line="70" pos:column="13">if <condition pos:line="70" pos:column="16">(<expr><name pos:line="70" pos:column="17">dictionary</name> <op:operator pos:line="70" pos:column="28">==</op:operator> <name pos:line="70" pos:column="31">null</name></expr>)</condition><then pos:line="70" pos:column="36">
            <block pos:line="71" pos:column="13">{
                <return pos:line="72" pos:column="17">return <expr><lit:literal type="boolean" pos:line="72" pos:column="24">false</lit:literal></expr>;</return>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="75" pos:column="13">Type</name><index pos:line="75" pos:column="17">[]</index></type> <name pos:line="75" pos:column="20">genericParameters</name> <init pos:line="75" pos:column="38">= <expr><call><name><name pos:line="75" pos:column="40">dictionary</name><op:operator pos:line="75" pos:column="50">.</op:operator><name pos:line="75" pos:column="51">GetType</name></name><argument_list pos:line="75" pos:column="58">()</argument_list></call><op:operator pos:line="75" pos:column="60">.</op:operator><call><name pos:line="75" pos:column="61">GetGenericArguments</name><argument_list pos:line="75" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="77" pos:column="13">// Support non-generics IDictionary</comment>
            <if pos:line="78" pos:column="13">if <condition pos:line="78" pos:column="16">(<expr><name><name pos:line="78" pos:column="17">genericParameters</name><op:operator pos:line="78" pos:column="34">.</op:operator><name pos:line="78" pos:column="35">Length</name></name> <op:operator pos:line="78" pos:column="42">==</op:operator> <lit:literal type="number" pos:line="78" pos:column="45">0</lit:literal></expr>)</condition><then pos:line="78" pos:column="47">
            <block pos:line="79" pos:column="13">{
                <return pos:line="80" pos:column="17">return <expr><lit:literal type="boolean" pos:line="80" pos:column="24">true</lit:literal></expr>;</return>
            }</block></then></if>

            <comment type="line" pos:line="83" pos:column="13">// Only support IDictionary&lt;string|object, object&gt;</comment>
            <if pos:line="84" pos:column="13">if <condition pos:line="84" pos:column="16">(<expr><name><name pos:line="84" pos:column="17">genericParameters</name><index pos:line="84" pos:column="34">[<expr><lit:literal type="number" pos:line="84" pos:column="35">0</lit:literal></expr>]</index></name> <op:operator pos:line="84" pos:column="38">!=</op:operator> <call><name pos:line="84" pos:column="41">typeof</name><argument_list pos:line="84" pos:column="47">(<argument><expr><name pos:line="84" pos:column="48">string</name></expr></argument>)</argument_list></call> <op:operator pos:line="84" pos:column="56">&amp;&amp;</op:operator> <name><name pos:line="84" pos:column="59">genericParameters</name><index pos:line="84" pos:column="76">[<expr><lit:literal type="number" pos:line="84" pos:column="77">0</lit:literal></expr>]</index></name> <op:operator pos:line="84" pos:column="80">!=</op:operator> <call><name pos:line="84" pos:column="83">typeof</name><argument_list pos:line="84" pos:column="89">(<argument><expr><name pos:line="84" pos:column="90">object</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="84" pos:column="98">
            <block pos:line="85" pos:column="13">{
                <return pos:line="86" pos:column="17">return <expr><lit:literal type="boolean" pos:line="86" pos:column="24">false</lit:literal></expr>;</return>
            }</block></then></if>

            <if pos:line="89" pos:column="13">if <condition pos:line="89" pos:column="16">(<expr><name><name pos:line="89" pos:column="17">genericParameters</name><index pos:line="89" pos:column="34">[<expr><lit:literal type="number" pos:line="89" pos:column="35">1</lit:literal></expr>]</index></name> <op:operator pos:line="89" pos:column="38">!=</op:operator> <call><name pos:line="89" pos:column="41">typeof</name><argument_list pos:line="89" pos:column="47">(<argument><expr><name pos:line="89" pos:column="48">object</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="89" pos:column="56">
            <block pos:line="90" pos:column="13">{
                <return pos:line="91" pos:column="17">return <expr><lit:literal type="boolean" pos:line="91" pos:column="24">false</lit:literal></expr>;</return>
            }</block></then></if>

            <return pos:line="94" pos:column="13">return <expr><lit:literal type="boolean" pos:line="94" pos:column="20">true</lit:literal></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
