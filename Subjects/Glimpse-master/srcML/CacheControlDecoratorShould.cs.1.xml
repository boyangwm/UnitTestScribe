<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Core\ResourceResult\CacheControlDecoratorShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">Glimpse</name><op:operator pos:line="1" pos:column="14">.</op:operator><name pos:line="1" pos:column="15">Core</name><op:operator pos:line="1" pos:column="19">.</op:operator><name pos:line="1" pos:column="20">Extensibility</name></name>;</using>
<comment type="line" pos:line="2" pos:column="1">// ReSharper disable RedundantUsingDirective</comment>
<comment type="line" pos:line="3" pos:column="1">// Glimpse.Core.Extensions.EnumExtensions.ToDescription() is used in !DEBUG</comment>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Core</name><op:operator pos:line="4" pos:column="19">.</op:operator><name pos:line="4" pos:column="20">Extensions</name></name>;</using>
<comment type="line" pos:line="5" pos:column="1">// ReSharper restore RedundantUsingDirective</comment>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Glimpse</name><op:operator pos:line="6" pos:column="14">.</op:operator><name pos:line="6" pos:column="15">Core</name><op:operator pos:line="6" pos:column="19">.</op:operator><name pos:line="6" pos:column="20">Framework</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Glimpse</name><op:operator pos:line="7" pos:column="14">.</op:operator><name pos:line="7" pos:column="15">Core</name><op:operator pos:line="7" pos:column="19">.</op:operator><name pos:line="7" pos:column="20">ResourceResult</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Glimpse</name><op:operator pos:line="8" pos:column="14">.</op:operator><name pos:line="8" pos:column="15">Test</name><op:operator pos:line="8" pos:column="19">.</op:operator><name pos:line="8" pos:column="20">Common</name></name>;</using>
<using pos:line="9" pos:column="1">using <name pos:line="9" pos:column="7">Moq</name>;</using>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">Ploeh</name><op:operator pos:line="10" pos:column="12">.</op:operator><name pos:line="10" pos:column="13">AutoFixture</name><op:operator pos:line="10" pos:column="24">.</op:operator><name pos:line="10" pos:column="25">Xunit</name></name>;</using>
<using pos:line="11" pos:column="1">using <name pos:line="11" pos:column="7">Xunit</name>;</using>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">Xunit</name><op:operator pos:line="12" pos:column="12">.</op:operator><name pos:line="12" pos:column="13">Extensions</name></name>;</using>

<namespace pos:line="14" pos:column="1">namespace <name><name pos:line="14" pos:column="11">Glimpse</name><op:operator pos:line="14" pos:column="18">.</op:operator><name pos:line="14" pos:column="19">Test</name><op:operator pos:line="14" pos:column="23">.</op:operator><name pos:line="14" pos:column="24">Core</name><op:operator pos:line="14" pos:column="28">.</op:operator><name pos:line="14" pos:column="29">ResourceResult</name></name>
<block pos:line="15" pos:column="1">{
    <class><specifier pos:line="16" pos:column="5">public</specifier> class <name pos:line="16" pos:column="18">CacheControlDecoratorShould</name>
    <block pos:line="17" pos:column="5">{
        <function><type><attribute pos:line="18" pos:column="9">[<expr><name pos:line="18" pos:column="10">Theory</name></expr><op:operator pos:line="18" pos:column="16">,</op:operator> <expr><name pos:line="18" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="19" pos:column="9">public</specifier> <name pos:line="19" pos:column="16">void</name></type> <name pos:line="19" pos:column="21">ConstructWithDefaults</name><parameter_list pos:line="19" pos:column="42">(<param><decl><type><name pos:line="19" pos:column="43">IResourceResult</name></type> <name pos:line="19" pos:column="59">resourceResult</name></decl></param>)</parameter_list>
        <block pos:line="20" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="21" pos:column="13">var</name></type> <name pos:line="21" pos:column="17">sut</name> <init pos:line="21" pos:column="21">= <expr><op:operator pos:line="21" pos:column="23">new</op:operator> <call><name pos:line="21" pos:column="27">CacheControlDecorator</name><argument_list pos:line="21" pos:column="48">(<argument><expr><name pos:line="21" pos:column="49">resourceResult</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="23" pos:column="13">Assert</name><op:operator pos:line="23" pos:column="19">.</op:operator><name pos:line="23" pos:column="20">False</name></name><argument_list pos:line="23" pos:column="25">(<argument><expr><name><name pos:line="23" pos:column="26">sut</name><op:operator pos:line="23" pos:column="29">.</op:operator><name pos:line="23" pos:column="30">CacheSetting</name><op:operator pos:line="23" pos:column="42">.</op:operator><name pos:line="23" pos:column="43">HasValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="26" pos:column="9">[<expr><name pos:line="26" pos:column="10">Theory</name></expr><op:operator pos:line="26" pos:column="16">,</op:operator> <expr><name pos:line="26" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="27" pos:column="9">public</specifier> <name pos:line="27" pos:column="16">void</name></type> <name pos:line="27" pos:column="21">Construct</name><parameter_list pos:line="27" pos:column="30">(<param><decl><type><name pos:line="27" pos:column="31">IResourceResult</name></type> <name pos:line="27" pos:column="47">resourceResult</name></decl></param>)</parameter_list>
        <block pos:line="28" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="29" pos:column="13">var</name></type> <name pos:line="29" pos:column="17">expectedDuration</name> <init pos:line="29" pos:column="34">= <expr><lit:literal type="number" pos:line="29" pos:column="36">8</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="30" pos:column="13">var</name></type> <name pos:line="30" pos:column="17">expectedSetting</name> <init pos:line="30" pos:column="33">= <expr><name><name pos:line="30" pos:column="35">CacheSetting</name><op:operator pos:line="30" pos:column="47">.</op:operator><name pos:line="30" pos:column="48">NoStore</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="32" pos:column="13">var</name></type> <name pos:line="32" pos:column="17">sut</name> <init pos:line="32" pos:column="21">= <expr><op:operator pos:line="32" pos:column="23">new</op:operator> <call><name pos:line="32" pos:column="27">CacheControlDecorator</name><argument_list pos:line="32" pos:column="48">(<argument><expr><name pos:line="32" pos:column="49">expectedDuration</name></expr></argument>, <argument><expr><name pos:line="32" pos:column="67">expectedSetting</name></expr></argument>, <argument><expr><name pos:line="32" pos:column="84">resourceResult</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="34" pos:column="13">Assert</name><op:operator pos:line="34" pos:column="19">.</op:operator><name pos:line="34" pos:column="20">Equal</name></name><argument_list pos:line="34" pos:column="25">(<argument><expr><name pos:line="34" pos:column="26">expectedDuration</name></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="44">sut</name><op:operator pos:line="34" pos:column="47">.</op:operator><name pos:line="34" pos:column="48">CacheDuration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="35" pos:column="13">Assert</name><op:operator pos:line="35" pos:column="19">.</op:operator><name pos:line="35" pos:column="20">Equal</name></name><argument_list pos:line="35" pos:column="25">(<argument><expr><name pos:line="35" pos:column="26">expectedSetting</name></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="43">sut</name><op:operator pos:line="35" pos:column="46">.</op:operator><name pos:line="35" pos:column="47">CacheSetting</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="38" pos:column="9">[<expr><name pos:line="38" pos:column="10">Theory</name></expr><op:operator pos:line="38" pos:column="16">,</op:operator> <expr><name pos:line="38" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="39" pos:column="9">public</specifier> <name pos:line="39" pos:column="16">void</name></type> <name pos:line="39" pos:column="21">ExecuteWrappedResource</name><parameter_list pos:line="39" pos:column="43">(<param><decl><type><attribute pos:line="39" pos:column="44">[<expr><name pos:line="39" pos:column="45">Frozen</name></expr>]</attribute> <name pos:line="39" pos:column="53">IResourceResult</name></type> <name pos:line="39" pos:column="69">resourceResult</name></decl></param>, <param><decl><type><name pos:line="39" pos:column="85">CacheControlDecorator</name></type> <name pos:line="39" pos:column="107">sut</name></decl></param>, <param><decl><type><name pos:line="39" pos:column="112">IResourceResultContext</name></type> <name pos:line="39" pos:column="135">context</name></decl></param>)</parameter_list>
        <block pos:line="40" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="41" pos:column="13">sut</name><op:operator pos:line="41" pos:column="16">.</op:operator><name pos:line="41" pos:column="17">Execute</name></name><argument_list pos:line="41" pos:column="24">(<argument><expr><name pos:line="41" pos:column="25">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="43" pos:column="13">resourceResult</name><op:operator pos:line="43" pos:column="27">.</op:operator><name pos:line="43" pos:column="28">Verify</name></name><argument_list pos:line="43" pos:column="34">(<argument><expr><lambda><name pos:line="43" pos:column="35">rr</name> <op:operator pos:line="43" pos:column="38">=&gt;</op:operator> <call><name><name pos:line="43" pos:column="41">rr</name><op:operator pos:line="43" pos:column="43">.</op:operator><name pos:line="43" pos:column="44">Execute</name></name><argument_list pos:line="43" pos:column="51">(<argument><expr><call><name><name pos:line="43" pos:column="52">It</name><op:operator pos:line="43" pos:column="54">.</op:operator><name><name pos:line="43" pos:column="55">IsAny</name><argument_list pos:line="43" pos:column="60">&lt;<argument><name pos:line="43" pos:column="61">IResourceResultContext</name></argument>&gt;</argument_list></name></name><argument_list pos:line="43" pos:column="84">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="46" pos:column="9">[<expr><name pos:line="46" pos:column="10">Theory</name></expr><op:operator pos:line="46" pos:column="16">,</op:operator> <expr><name pos:line="46" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="47" pos:column="9">public</specifier> <name pos:line="47" pos:column="16">void</name></type> <name pos:line="47" pos:column="21">Execute</name><parameter_list pos:line="47" pos:column="28">(<param><decl><type><name pos:line="47" pos:column="29">IResourceResult</name></type> <name pos:line="47" pos:column="45">resourceResult</name></decl></param>, <param><decl><type><name pos:line="47" pos:column="61">IResourceResultContext</name></type> <name pos:line="47" pos:column="84">context</name></decl></param>)</parameter_list>
        <block pos:line="48" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="49" pos:column="13">var</name></type> <name pos:line="49" pos:column="17">expectedDuration</name> <init pos:line="49" pos:column="34">= <expr><lit:literal type="number" pos:line="49" pos:column="36">8</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="50" pos:column="13">var</name></type> <name pos:line="50" pos:column="17">expectedSetting</name> <init pos:line="50" pos:column="33">= <expr><name><name pos:line="50" pos:column="35">CacheSetting</name><op:operator pos:line="50" pos:column="47">.</op:operator><name pos:line="50" pos:column="48">NoStore</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="51" pos:column="13">var</name></type> <name pos:line="51" pos:column="17">sut</name> <init pos:line="51" pos:column="21">= <expr><op:operator pos:line="51" pos:column="23">new</op:operator> <call><name pos:line="51" pos:column="27">CacheControlDecorator</name><argument_list pos:line="51" pos:column="48">(<argument><expr><name pos:line="51" pos:column="49">expectedDuration</name></expr></argument>, <argument><expr><name pos:line="51" pos:column="67">expectedSetting</name></expr></argument>, <argument><expr><name pos:line="51" pos:column="84">resourceResult</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="53" pos:column="13">sut</name><op:operator pos:line="53" pos:column="16">.</op:operator><name pos:line="53" pos:column="17">Execute</name></name><argument_list pos:line="53" pos:column="24">(<argument><expr><name pos:line="53" pos:column="25">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if pos:line="54" pos:column="1">#<cpp:directive pos:line="54" pos:column="2">if</cpp:directive> <expr><op:operator pos:line="54" pos:column="5">!</op:operator><name pos:line="54" pos:column="6">DEBUG</name></expr></cpp:if>
            <decl_stmt><decl><type><name pos:line="55" pos:column="13">var</name></type> <name pos:line="55" pos:column="17">regex</name> <init pos:line="55" pos:column="23">= <expr><call><name><name pos:line="55" pos:column="25">string</name><op:operator pos:line="55" pos:column="31">.</op:operator><name pos:line="55" pos:column="32">Format</name></name><argument_list pos:line="55" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="55" pos:column="39">@"{0}.+{1}"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="55" pos:column="52">expectedSetting</name><op:operator pos:line="55" pos:column="67">.</op:operator><name pos:line="55" pos:column="68">ToDescription</name></name><argument_list pos:line="55" pos:column="81">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="55" pos:column="85">expectedDuration</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="56" pos:column="13">context</name><op:operator pos:line="56" pos:column="20">.</op:operator><name pos:line="56" pos:column="21">FrameworkProvider</name><op:operator pos:line="56" pos:column="38">.</op:operator><name pos:line="56" pos:column="39">Verify</name></name><argument_list pos:line="56" pos:column="45">(<argument><expr><lambda><name pos:line="56" pos:column="46">fp</name> <op:operator pos:line="56" pos:column="49">=&gt;</op:operator> <call><name><name pos:line="56" pos:column="52">fp</name><op:operator pos:line="56" pos:column="54">.</op:operator><name pos:line="56" pos:column="55">SetHttpResponseHeader</name></name><argument_list pos:line="56" pos:column="76">(<argument><expr><lit:literal type="string" pos:line="56" pos:column="77">"Cache-Control"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="56" pos:column="94">It</name><op:operator pos:line="56" pos:column="96">.</op:operator><name pos:line="56" pos:column="97">IsRegex</name></name><argument_list pos:line="56" pos:column="104">(<argument><expr><name pos:line="56" pos:column="105">regex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="57" pos:column="1">#<cpp:directive pos:line="57" pos:column="2">else</cpp:directive></cpp:else>
            <expr_stmt><expr><call><name><name pos:line="58" pos:column="13">context</name><op:operator pos:line="58" pos:column="20">.</op:operator><name pos:line="58" pos:column="21">FrameworkProvider</name><op:operator pos:line="58" pos:column="38">.</op:operator><name pos:line="58" pos:column="39">Verify</name></name><argument_list pos:line="58" pos:column="45">(<argument><expr><lambda><name pos:line="58" pos:column="46">fp</name> <op:operator pos:line="58" pos:column="49">=&gt;</op:operator> <call><name><name pos:line="58" pos:column="52">fp</name><op:operator pos:line="58" pos:column="54">.</op:operator><name pos:line="58" pos:column="55">SetHttpResponseHeader</name></name><argument_list pos:line="58" pos:column="76">(<argument><expr><lit:literal type="string" pos:line="58" pos:column="77">"Cache-Control"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="58" pos:column="94">"no-cache"</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="59" pos:column="1">#<cpp:directive pos:line="59" pos:column="2">endif</cpp:directive></cpp:endif>
        }</block></function>

        <function><type><attribute pos:line="62" pos:column="9">[<expr><name pos:line="62" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="63" pos:column="9">public</specifier> <name pos:line="63" pos:column="16">void</name></type> <name pos:line="63" pos:column="21">ExecuteInRelease</name><parameter_list pos:line="63" pos:column="37">()</parameter_list>
        <block pos:line="64" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="65" pos:column="13">Assert</name><op:operator pos:line="65" pos:column="19">.</op:operator><name pos:line="65" pos:column="20">True</name></name><argument_list pos:line="65" pos:column="24">(<argument><expr><lit:literal type="boolean" pos:line="65" pos:column="25">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="65" pos:column="31">"No way to test the non-debug release without rebuilding."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
