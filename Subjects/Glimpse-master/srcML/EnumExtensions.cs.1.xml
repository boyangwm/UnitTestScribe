<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Core\Extensions\EnumExtensions.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">ComponentModel</name></name>;</using>

<namespace pos:line="4" pos:column="1">namespace <name><name pos:line="4" pos:column="11">Glimpse</name><op:operator pos:line="4" pos:column="18">.</op:operator><name pos:line="4" pos:column="19">Core</name><op:operator pos:line="4" pos:column="23">.</op:operator><name pos:line="4" pos:column="24">Extensions</name></name>
<block pos:line="5" pos:column="1">{
    <comment type="line" pos:line="6" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="7" pos:column="5">/// Extension methods to simplify common tasks completed with &lt;see cref="Enum"/&gt;.</comment>
    <comment type="line" pos:line="8" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="9" pos:column="5">public</specifier> <specifier pos:line="9" pos:column="12">static</specifier> class <name pos:line="9" pos:column="25">EnumExtensions</name>
    <block pos:line="10" pos:column="5">{
        <comment type="line" pos:line="11" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="12" pos:column="9">/// Converts an &lt;see cref="Enum"/&gt; value to a string if it is annotated with a &lt;see cref="DescriptionAttribute"/&gt;.</comment>
        <comment type="line" pos:line="13" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="14" pos:column="9">/// &lt;param name="enumeration"&gt;The enumeration.&lt;/param&gt;</comment>
        <comment type="line" pos:line="15" pos:column="9">/// &lt;returns&gt;</comment>
        <comment type="line" pos:line="16" pos:column="9">/// The &lt;see cref="DescriptionAttribute"/&gt; string of the corresponding &lt;see cref="Enum"/&gt; member, or an empty string if no &lt;see cref="DescriptionAttribute"/&gt; is present.</comment>
        <comment type="line" pos:line="17" pos:column="9">/// &lt;/returns&gt;</comment>
        <function><type><specifier pos:line="18" pos:column="9">public</specifier> <specifier pos:line="18" pos:column="16">static</specifier> <name pos:line="18" pos:column="23">string</name></type> <name pos:line="18" pos:column="30">ToDescription</name><parameter_list pos:line="18" pos:column="43">(<param><decl><type><name pos:line="18" pos:column="44">this</name> <name pos:line="18" pos:column="49">Enum</name></type> <name pos:line="18" pos:column="54">enumeration</name></decl></param>)</parameter_list> <comment type="line" pos:line="18" pos:column="67">// ToDescription is used in CacheControlDecorator in Release mode.</comment>
        <block pos:line="19" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="20" pos:column="13">var</name></type> <name pos:line="20" pos:column="17">enumValue</name> <init pos:line="20" pos:column="27">= <expr><call><name><name pos:line="20" pos:column="29">enumeration</name><op:operator pos:line="20" pos:column="40">.</op:operator><name pos:line="20" pos:column="41">ToString</name></name><argument_list pos:line="20" pos:column="49">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="21" pos:column="13">var</name></type> <name pos:line="21" pos:column="17">enumType</name> <init pos:line="21" pos:column="26">= <expr><call><name><name pos:line="21" pos:column="28">enumeration</name><op:operator pos:line="21" pos:column="39">.</op:operator><name pos:line="21" pos:column="40">GetType</name></name><argument_list pos:line="21" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="23" pos:column="13">var</name></type> <name pos:line="23" pos:column="17">attribute</name> <init pos:line="23" pos:column="27">= <expr><call><name><name pos:line="23" pos:column="29">enumType</name><op:operator pos:line="23" pos:column="37">.</op:operator><name pos:line="23" pos:column="38">GetField</name></name><argument_list pos:line="23" pos:column="46">(<argument><expr><name pos:line="23" pos:column="47">enumValue</name></expr></argument>)</argument_list></call><op:operator pos:line="23" pos:column="57">.</op:operator><call><name pos:line="23" pos:column="58">GetCustomAttributes</name><argument_list pos:line="23" pos:column="77">(<argument><expr><call><name pos:line="23" pos:column="78">typeof</name><argument_list pos:line="23" pos:column="84">(<argument><expr><name pos:line="23" pos:column="85">DescriptionAttribute</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="23" pos:column="108">false</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="23" pos:column="115">as</op:operator> <name><name pos:line="23" pos:column="118">DescriptionAttribute</name><index pos:line="23" pos:column="138">[]</index></name></expr></init></decl>;</decl_stmt>

            <if pos:line="25" pos:column="13">if <condition pos:line="25" pos:column="16">(<expr><name pos:line="25" pos:column="17">attribute</name> <op:operator pos:line="25" pos:column="27">==</op:operator> <name pos:line="25" pos:column="30">null</name> <op:operator pos:line="25" pos:column="35">||</op:operator> <name><name pos:line="25" pos:column="38">attribute</name><op:operator pos:line="25" pos:column="47">.</op:operator><name pos:line="25" pos:column="48">Length</name></name> <op:operator pos:line="25" pos:column="55">==</op:operator> <lit:literal type="number" pos:line="25" pos:column="58">0</lit:literal></expr>)</condition><then pos:line="25" pos:column="60">
            <block pos:line="26" pos:column="13">{
                <return pos:line="27" pos:column="17">return <expr><name><name pos:line="27" pos:column="24">string</name><op:operator pos:line="27" pos:column="30">.</op:operator><name pos:line="27" pos:column="31">Empty</name></name></expr>;</return>
            }</block></then></if>

            <return pos:line="30" pos:column="13">return <expr><name><name pos:line="30" pos:column="20">attribute</name><index pos:line="30" pos:column="29">[<expr><lit:literal type="number" pos:line="30" pos:column="30">0</lit:literal></expr>]</index></name><op:operator pos:line="30" pos:column="32">.</op:operator><name pos:line="30" pos:column="33">Description</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
