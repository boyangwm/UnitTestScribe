<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Core\Resource\RequestResource.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Glimpse</name><op:operator pos:line="3" pos:column="14">.</op:operator><name pos:line="3" pos:column="15">Core</name><op:operator pos:line="3" pos:column="19">.</op:operator><name pos:line="3" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Core</name><op:operator pos:line="4" pos:column="19">.</op:operator><name pos:line="4" pos:column="20">Extensions</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Glimpse</name><op:operator pos:line="5" pos:column="14">.</op:operator><name pos:line="5" pos:column="15">Core</name><op:operator pos:line="5" pos:column="19">.</op:operator><name pos:line="5" pos:column="20">Framework</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Glimpse</name><op:operator pos:line="6" pos:column="14">.</op:operator><name pos:line="6" pos:column="15">Core</name><op:operator pos:line="6" pos:column="19">.</op:operator><name pos:line="6" pos:column="20">ResourceResult</name></name>;</using>

<namespace pos:line="8" pos:column="1">namespace <name><name pos:line="8" pos:column="11">Glimpse</name><op:operator pos:line="8" pos:column="18">.</op:operator><name pos:line="8" pos:column="19">Core</name><op:operator pos:line="8" pos:column="23">.</op:operator><name pos:line="8" pos:column="24">Resource</name></name>
<block pos:line="9" pos:column="1">{
    <comment type="line" pos:line="10" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="11" pos:column="5">/// The &lt;see cref="IResource"/&gt; implementation responsible for providing the Glimpse client all diagnostics information gathered by Glimpse for a specific request.</comment>
    <comment type="line" pos:line="12" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="13" pos:column="5">public</specifier> class <name pos:line="13" pos:column="18">RequestResource</name> <super pos:line="13" pos:column="34">: <name pos:line="13" pos:column="36">IResource</name>, <name pos:line="13" pos:column="47">IKey</name></super>
    <block pos:line="14" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="15" pos:column="9">internal</specifier> <specifier pos:line="15" pos:column="18">const</specifier> <name pos:line="15" pos:column="24">string</name></type> <name pos:line="15" pos:column="31">InternalName</name> <init pos:line="15" pos:column="44">= <expr><lit:literal type="string" pos:line="15" pos:column="46">"glimpse_request"</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="16" pos:column="9">private</specifier> <specifier pos:line="16" pos:column="17">const</specifier> <name pos:line="16" pos:column="23">int</name></type> <name pos:line="16" pos:column="27">CacheDuration</name> <init pos:line="16" pos:column="41">= <expr><lit:literal type="number" pos:line="16" pos:column="43">12960000</lit:literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="16" pos:column="53">// 150 days</comment>

        <comment type="line" pos:line="18" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="19" pos:column="9">/// Gets the name of the resource.</comment>
        <comment type="line" pos:line="20" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="21" pos:column="9">/// &lt;value&gt;</comment>
        <comment type="line" pos:line="22" pos:column="9">/// The name.</comment>
        <comment type="line" pos:line="23" pos:column="9">/// &lt;/value&gt;</comment>
        <comment type="line" pos:line="24" pos:column="9">/// &lt;remarks&gt;</comment>
        <comment type="line" pos:line="25" pos:column="9">/// Resource name's should be unique across a given web application. If multiple &lt;see cref="IResource" /&gt; implementations contain the same name, Glimpse may throw an exception resulting in an Http 500 Server Error.</comment>
        <comment type="line" pos:line="26" pos:column="9">/// &lt;/remarks&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="27" pos:column="9">public</specifier> <name pos:line="27" pos:column="16">string</name></type> <name pos:line="27" pos:column="23">Name</name>
        <block pos:line="28" pos:column="9">{
            <function><name pos:line="29" pos:column="13">get</name> <block pos:line="29" pos:column="17">{ <return pos:line="29" pos:column="19">return <expr><name pos:line="29" pos:column="26">InternalName</name></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="32" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="33" pos:column="9">/// Gets the key.</comment>
        <comment type="line" pos:line="34" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="35" pos:column="9">/// &lt;value&gt;</comment>
        <comment type="line" pos:line="36" pos:column="9">/// The key. Only valid JavaScript identifiers should be used for future compatibility.</comment>
        <comment type="line" pos:line="37" pos:column="9">/// &lt;/value&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="38" pos:column="9">public</specifier> <name pos:line="38" pos:column="16">string</name></type> <name pos:line="38" pos:column="23">Key</name>
        <block pos:line="39" pos:column="9">{
            <function><name pos:line="40" pos:column="13">get</name> <block pos:line="40" pos:column="17">{ <return pos:line="40" pos:column="19">return <expr><name pos:line="40" pos:column="26">Name</name></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="43" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="44" pos:column="9">/// Gets the required or optional parameters that a resource needs as processing input.</comment>
        <comment type="line" pos:line="45" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="46" pos:column="9">/// &lt;value&gt;</comment>
        <comment type="line" pos:line="47" pos:column="9">/// The parameters.</comment>
        <comment type="line" pos:line="48" pos:column="9">/// &lt;/value&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="49" pos:column="9">public</specifier> <name><name pos:line="49" pos:column="16">IEnumerable</name><argument_list pos:line="49" pos:column="27">&lt;<argument><name pos:line="49" pos:column="28">ResourceParameterMetadata</name></argument>&gt;</argument_list></name></type> <name pos:line="49" pos:column="55">Parameters</name>
        <block pos:line="50" pos:column="9">{
            <function><name pos:line="51" pos:column="13">get</name>
            <block pos:line="52" pos:column="13">{
                <return pos:line="53" pos:column="17">return <expr><op:operator pos:line="53" pos:column="24">new</op:operator><index pos:line="53" pos:column="27">[]</index> <block pos:line="53" pos:column="30">{ <expr><name><name pos:line="53" pos:column="32">ResourceParameter</name><op:operator pos:line="53" pos:column="49">.</op:operator><name pos:line="53" pos:column="50">RequestId</name></name></expr><op:operator pos:line="53" pos:column="59">,</op:operator> <expr><name><name pos:line="53" pos:column="61">ResourceParameter</name><op:operator pos:line="53" pos:column="78">.</op:operator><name pos:line="53" pos:column="79">Hash</name></name></expr><op:operator pos:line="53" pos:column="83">,</op:operator> <expr><name><name pos:line="53" pos:column="85">ResourceParameter</name><op:operator pos:line="53" pos:column="102">.</op:operator><name pos:line="53" pos:column="103">Callback</name></name></expr> }</block></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="57" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="58" pos:column="9">/// Executes the specified resource with the specific context.</comment>
        <comment type="line" pos:line="59" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="60" pos:column="9">/// &lt;param name="context"&gt;The context.&lt;/param&gt;</comment>
        <comment type="line" pos:line="61" pos:column="9">/// &lt;returns&gt;</comment>
        <comment type="line" pos:line="62" pos:column="9">///   &lt;see cref="IResourceResult" /&gt; that can be executed when the Http response is ready to be returned.</comment>
        <comment type="line" pos:line="63" pos:column="9">/// &lt;/returns&gt;</comment>
        <comment type="line" pos:line="64" pos:column="9">/// &lt;exception cref="System.ArgumentNullException"&gt;Exception thrown if &lt;paramref name="context"/&gt; is &lt;c&gt;null&lt;/c&gt;.&lt;/exception&gt;</comment>
        <function><type><specifier pos:line="65" pos:column="9">public</specifier> <name pos:line="65" pos:column="16">IResourceResult</name></type> <name pos:line="65" pos:column="32">Execute</name><parameter_list pos:line="65" pos:column="39">(<param><decl><type><name pos:line="65" pos:column="40">IResourceContext</name></type> <name pos:line="65" pos:column="57">context</name></decl></param>)</parameter_list>
        <block pos:line="66" pos:column="9">{
            <if pos:line="67" pos:column="13">if <condition pos:line="67" pos:column="16">(<expr><name pos:line="67" pos:column="17">context</name> <op:operator pos:line="67" pos:column="25">==</op:operator> <name pos:line="67" pos:column="28">null</name></expr>)</condition><then pos:line="67" pos:column="33">
            <block pos:line="68" pos:column="13">{
                <throw pos:line="69" pos:column="17">throw <expr><op:operator pos:line="69" pos:column="23">new</op:operator> <call><name pos:line="69" pos:column="27">ArgumentNullException</name><argument_list pos:line="69" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="69" pos:column="49">"context"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="72" pos:column="13">Guid</name></type> <name pos:line="72" pos:column="18">requestId</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="73" pos:column="13">var</name></type> <name pos:line="73" pos:column="17">request</name> <init pos:line="73" pos:column="25">= <expr><call><name><name pos:line="73" pos:column="27">context</name><op:operator pos:line="73" pos:column="34">.</op:operator><name pos:line="73" pos:column="35">Parameters</name><op:operator pos:line="73" pos:column="45">.</op:operator><name pos:line="73" pos:column="46">GetValueOrDefault</name></name><argument_list pos:line="73" pos:column="63">(<argument><expr><name><name pos:line="73" pos:column="64">ResourceParameter</name><op:operator pos:line="73" pos:column="81">.</op:operator><name pos:line="73" pos:column="82">RequestId</name><op:operator pos:line="73" pos:column="91">.</op:operator><name pos:line="73" pos:column="92">Name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if pos:line="75" pos:column="1">#<cpp:directive pos:line="75" pos:column="2">if</cpp:directive> <expr><name pos:line="75" pos:column="5">NET35</name></expr></cpp:if>
            <if pos:line="76" pos:column="13">if <condition pos:line="76" pos:column="16">(<expr><op:operator pos:line="76" pos:column="17">!</op:operator><call><name><name pos:line="76" pos:column="18">Glimpse</name><op:operator pos:line="76" pos:column="25">.</op:operator><name pos:line="76" pos:column="26">Core</name><op:operator pos:line="76" pos:column="30">.</op:operator><name pos:line="76" pos:column="31">Backport</name><op:operator pos:line="76" pos:column="39">.</op:operator><name pos:line="76" pos:column="40">Net35Backport</name><op:operator pos:line="76" pos:column="53">.</op:operator><name pos:line="76" pos:column="54">TryParseGuid</name></name><argument_list pos:line="76" pos:column="66">(<argument><expr><name pos:line="76" pos:column="67">request</name></expr></argument>, <argument><expr pos:line="76" pos:column="76">out <name pos:line="76" pos:column="80">requestId</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="76" pos:column="91">
            <block pos:line="77" pos:column="13">{
                <return pos:line="78" pos:column="17">return <expr><op:operator pos:line="78" pos:column="24">new</op:operator> <call><name pos:line="78" pos:column="28">StatusCodeResourceResult</name><argument_list pos:line="78" pos:column="52">(<argument><expr><lit:literal type="number" pos:line="78" pos:column="53">404</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="78" pos:column="58">string</name><op:operator pos:line="78" pos:column="64">.</op:operator><name pos:line="78" pos:column="65">Format</name></name><argument_list pos:line="78" pos:column="71">(<argument><expr><lit:literal type="string" pos:line="78" pos:column="72">"Could not parse RequestId '{0} as GUID.'"</lit:literal></expr></argument>, <argument><expr><name pos:line="78" pos:column="116">request</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
<cpp:else pos:line="80" pos:column="1">#<cpp:directive pos:line="80" pos:column="2">else</cpp:directive></cpp:else>
            <if pos:line="81" pos:column="13">if <condition pos:line="81" pos:column="16">(<expr><op:operator pos:line="81" pos:column="17">!</op:operator><call><name><name pos:line="81" pos:column="18">Guid</name><op:operator pos:line="81" pos:column="22">.</op:operator><name pos:line="81" pos:column="23">TryParse</name></name><argument_list pos:line="81" pos:column="31">(<argument><expr><name pos:line="81" pos:column="32">request</name></expr></argument>, <argument><expr pos:line="81" pos:column="41">out <name pos:line="81" pos:column="45">requestId</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="81" pos:column="56">
            <block pos:line="82" pos:column="13">{
                <return pos:line="83" pos:column="17">return <expr><op:operator pos:line="83" pos:column="24">new</op:operator> <call><name pos:line="83" pos:column="28">StatusCodeResourceResult</name><argument_list pos:line="83" pos:column="52">(<argument><expr><lit:literal type="number" pos:line="83" pos:column="53">404</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="83" pos:column="58">string</name><op:operator pos:line="83" pos:column="64">.</op:operator><name pos:line="83" pos:column="65">Format</name></name><argument_list pos:line="83" pos:column="71">(<argument><expr><lit:literal type="string" pos:line="83" pos:column="72">"Could not parse RequestId '{0} as GUID.'"</lit:literal></expr></argument>, <argument><expr><name pos:line="83" pos:column="116">request</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
<cpp:endif pos:line="85" pos:column="1">#<cpp:directive pos:line="85" pos:column="2">endif</cpp:directive></cpp:endif>

            <decl_stmt><decl><type><name pos:line="87" pos:column="13">var</name></type> <name pos:line="87" pos:column="17">data</name> <init pos:line="87" pos:column="22">= <expr><call><name><name pos:line="87" pos:column="24">context</name><op:operator pos:line="87" pos:column="31">.</op:operator><name pos:line="87" pos:column="32">PersistenceStore</name><op:operator pos:line="87" pos:column="48">.</op:operator><name pos:line="87" pos:column="49">GetByRequestId</name></name><argument_list pos:line="87" pos:column="63">(<argument><expr><name pos:line="87" pos:column="64">requestId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if pos:line="89" pos:column="13">if <condition pos:line="89" pos:column="16">(<expr><name pos:line="89" pos:column="17">data</name> <op:operator pos:line="89" pos:column="22">==</op:operator> <name pos:line="89" pos:column="25">null</name></expr>)</condition><then pos:line="89" pos:column="30">
            <block pos:line="90" pos:column="13">{
                <return pos:line="91" pos:column="17">return <expr><op:operator pos:line="91" pos:column="24">new</op:operator> <call><name pos:line="91" pos:column="28">StatusCodeResourceResult</name><argument_list pos:line="91" pos:column="52">(<argument><expr><lit:literal type="number" pos:line="91" pos:column="53">404</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="91" pos:column="58">string</name><op:operator pos:line="91" pos:column="64">.</op:operator><name pos:line="91" pos:column="65">Format</name></name><argument_list pos:line="91" pos:column="71">(<argument><expr><lit:literal type="string" pos:line="91" pos:column="72">"No data found for RequestId '{0}'."</lit:literal></expr></argument>, <argument><expr><name pos:line="91" pos:column="110">request</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>

            <return pos:line="94" pos:column="13">return <expr><op:operator pos:line="94" pos:column="20">new</op:operator> <call><name pos:line="94" pos:column="24">CacheControlDecorator</name><argument_list pos:line="94" pos:column="45">(<argument><expr><name pos:line="94" pos:column="46">CacheDuration</name></expr></argument>, <argument><expr><name><name pos:line="94" pos:column="61">CacheSetting</name><op:operator pos:line="94" pos:column="73">.</op:operator><name pos:line="94" pos:column="74">Private</name></name></expr></argument>, <argument><expr><op:operator pos:line="94" pos:column="83">new</op:operator> <call><name pos:line="94" pos:column="87">JsonResourceResult</name><argument_list pos:line="94" pos:column="105">(<argument><expr><name pos:line="94" pos:column="106">data</name></expr></argument>, <argument><expr><call><name><name pos:line="94" pos:column="112">context</name><op:operator pos:line="94" pos:column="119">.</op:operator><name pos:line="94" pos:column="120">Parameters</name><op:operator pos:line="94" pos:column="130">.</op:operator><name pos:line="94" pos:column="131">GetValueOrDefault</name></name><argument_list pos:line="94" pos:column="148">(<argument><expr><name><name pos:line="94" pos:column="149">ResourceParameter</name><op:operator pos:line="94" pos:column="166">.</op:operator><name pos:line="94" pos:column="167">Callback</name><op:operator pos:line="94" pos:column="175">.</op:operator><name pos:line="94" pos:column="176">Name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
