<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Core\Extensions\TabContextExtensions.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">System</name><op:operator pos:line="1" pos:column="13">.</op:operator><name pos:line="1" pos:column="14">Collections</name><op:operator pos:line="1" pos:column="25">.</op:operator><name pos:line="1" pos:column="26">Generic</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">Glimpse</name><op:operator pos:line="2" pos:column="14">.</op:operator><name pos:line="2" pos:column="15">Core</name><op:operator pos:line="2" pos:column="19">.</op:operator><name pos:line="2" pos:column="20">Extensibility</name></name>;</using>

<namespace pos:line="4" pos:column="1">namespace <name><name pos:line="4" pos:column="11">Glimpse</name><op:operator pos:line="4" pos:column="18">.</op:operator><name pos:line="4" pos:column="19">Core</name><op:operator pos:line="4" pos:column="23">.</op:operator><name pos:line="4" pos:column="24">Extensions</name></name>
<block pos:line="5" pos:column="1">{
    <comment type="line" pos:line="6" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="7" pos:column="5">/// Extension methods to simplify common tasks completed with &lt;see cref="ITabSetupContext"/&gt; and &lt;see cref="ITabContext"/&gt; together.</comment>
    <comment type="line" pos:line="8" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="9" pos:column="5">public</specifier> <specifier pos:line="9" pos:column="12">static</specifier> class <name pos:line="9" pos:column="25">TabContextExtensions</name>
    <block pos:line="10" pos:column="5">{
        <comment type="line" pos:line="11" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="12" pos:column="9">/// Gets all messages of type &lt;c&gt;T&lt;/c&gt; that have been persisted with &lt;c&gt;PersistMessage&amp;lt;T&amp;gt;&lt;/c&gt;.</comment>
        <comment type="line" pos:line="13" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="14" pos:column="9">/// &lt;typeparam name="T"&gt;The type of message to get.&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="15" pos:column="9">/// &lt;param name="context"&gt;The context.&lt;/param&gt;</comment>
        <comment type="line" pos:line="16" pos:column="9">/// &lt;returns&gt;</comment>
        <comment type="line" pos:line="17" pos:column="9">/// An &lt;see cref="IEnumerable{T}"/&gt; of any persisted messages. If no messages has been persisted, an empty enumerable will be returned.</comment>
        <comment type="line" pos:line="18" pos:column="9">/// &lt;/returns&gt;</comment>
        <function><type><specifier pos:line="19" pos:column="9">public</specifier> <specifier pos:line="19" pos:column="16">static</specifier> <name><name pos:line="19" pos:column="23">IEnumerable</name><argument_list pos:line="19" pos:column="34">&lt;<argument><name pos:line="19" pos:column="35">T</name></argument>&gt;</argument_list></name></type> <name><name pos:line="19" pos:column="38">GetMessages</name><argument_list pos:line="19" pos:column="49">&lt;<argument><name pos:line="19" pos:column="50">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="19" pos:column="52">(<param><decl><type><name pos:line="19" pos:column="53">this</name> <name pos:line="19" pos:column="58">ITabContext</name></type> <name pos:line="19" pos:column="70">context</name></decl></param>)</parameter_list>
        <block pos:line="20" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="21" pos:column="13">var</name></type> <name pos:line="21" pos:column="17">tabStore</name> <init pos:line="21" pos:column="26">= <expr><name><name pos:line="21" pos:column="28">context</name><op:operator pos:line="21" pos:column="35">.</op:operator><name pos:line="21" pos:column="36">TabStore</name></name></expr></init></decl>;</decl_stmt>

            <if pos:line="23" pos:column="13">if <condition pos:line="23" pos:column="16">(<expr><op:operator pos:line="23" pos:column="17">!</op:operator><call><name><name pos:line="23" pos:column="18">tabStore</name><op:operator pos:line="23" pos:column="26">.</op:operator><name><name pos:line="23" pos:column="27">Contains</name><argument_list pos:line="23" pos:column="35">&lt;<argument><name><name pos:line="23" pos:column="36">IList</name><argument_list pos:line="23" pos:column="41">&lt;<argument><name pos:line="23" pos:column="42">T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name><argument_list pos:line="23" pos:column="45">()</argument_list></call></expr>)</condition><then pos:line="23" pos:column="48">
            <block pos:line="24" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="25" pos:column="17">var</name></type> <name pos:line="25" pos:column="21">messages</name> <init pos:line="25" pos:column="30">= <expr><op:operator pos:line="25" pos:column="32">new</op:operator> <call><name><name pos:line="25" pos:column="36">List</name><argument_list pos:line="25" pos:column="40">&lt;<argument><name pos:line="25" pos:column="41">T</name></argument>&gt;</argument_list></name><argument_list pos:line="25" pos:column="43">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="26" pos:column="17">tabStore</name><op:operator pos:line="26" pos:column="25">.</op:operator><name><name pos:line="26" pos:column="26">Set</name><argument_list pos:line="26" pos:column="29">&lt;<argument><name><name pos:line="26" pos:column="30">IList</name><argument_list pos:line="26" pos:column="35">&lt;<argument><name pos:line="26" pos:column="36">T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name><argument_list pos:line="26" pos:column="39">(<argument><expr><name pos:line="26" pos:column="40">messages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="27" pos:column="17">return <expr><name pos:line="27" pos:column="24">messages</name></expr>;</return>
            }</block></then></if>

            <return pos:line="30" pos:column="13">return <expr><call><name><name pos:line="30" pos:column="20">tabStore</name><op:operator pos:line="30" pos:column="28">.</op:operator><name><name pos:line="30" pos:column="29">Get</name><argument_list pos:line="30" pos:column="32">&lt;<argument><name><name pos:line="30" pos:column="33">IList</name><argument_list pos:line="30" pos:column="38">&lt;<argument><name pos:line="30" pos:column="39">T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name><argument_list pos:line="30" pos:column="42">()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="33" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="34" pos:column="9">/// Persists all messages of type &lt;c&gt;T&lt;/c&gt; to a thread safe store. Persisted messages can be retrieved with &lt;c&gt;GetMessages&amp;lt;T&amp;gt;&lt;/c&gt;.</comment>
        <comment type="line" pos:line="35" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="36" pos:column="9">/// &lt;typeparam name="T"&gt;The type of message to persist.&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="37" pos:column="9">/// &lt;param name="context"&gt;The context.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="38" pos:column="9">public</specifier> <specifier pos:line="38" pos:column="16">static</specifier> <name pos:line="38" pos:column="23">void</name></type> <name><name pos:line="38" pos:column="28">PersistMessages</name><argument_list pos:line="38" pos:column="43">&lt;<argument><name pos:line="38" pos:column="44">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="38" pos:column="46">(<param><decl><type><name pos:line="38" pos:column="47">this</name> <name pos:line="38" pos:column="52">ITabSetupContext</name></type> <name pos:line="38" pos:column="69">context</name></decl></param>)</parameter_list>
        <block pos:line="39" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="40" pos:column="13">context</name><op:operator pos:line="40" pos:column="20">.</op:operator><name pos:line="40" pos:column="21">MessageBroker</name><op:operator pos:line="40" pos:column="34">.</op:operator><name><name pos:line="40" pos:column="35">Subscribe</name><argument_list pos:line="40" pos:column="44">&lt;<argument><name pos:line="40" pos:column="45">T</name></argument>&gt;</argument_list></name></name><argument_list pos:line="40" pos:column="47">(<argument><expr><lambda><name pos:line="40" pos:column="48">message</name> <op:operator pos:line="40" pos:column="56">=&gt;</op:operator> <call><name pos:line="40" pos:column="59">PersistMessage</name><argument_list pos:line="40" pos:column="73">(<argument><expr><name pos:line="40" pos:column="74">message</name></expr></argument>, <argument><expr><name pos:line="40" pos:column="83">context</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="43" pos:column="9">private</specifier> <specifier pos:line="43" pos:column="17">static</specifier> <name pos:line="43" pos:column="24">void</name></type> <name><name pos:line="43" pos:column="29">PersistMessage</name><argument_list pos:line="43" pos:column="43">&lt;<argument><name pos:line="43" pos:column="44">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="43" pos:column="46">(<param><decl><type><name pos:line="43" pos:column="47">T</name></type> <name pos:line="43" pos:column="49">message</name></decl></param>, <param><decl><type><name pos:line="43" pos:column="58">ITabSetupContext</name></type> <name pos:line="43" pos:column="75">context</name></decl></param>)</parameter_list>
        <block pos:line="44" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="45" pos:column="13">var</name></type> <name pos:line="45" pos:column="17">tabStore</name> <init pos:line="45" pos:column="26">= <expr><call><name><name pos:line="45" pos:column="28">context</name><op:operator pos:line="45" pos:column="35">.</op:operator><name pos:line="45" pos:column="36">GetTabStore</name></name><argument_list pos:line="45" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if pos:line="47" pos:column="13">if <condition pos:line="47" pos:column="16">(<expr><op:operator pos:line="47" pos:column="17">!</op:operator><call><name><name pos:line="47" pos:column="18">tabStore</name><op:operator pos:line="47" pos:column="26">.</op:operator><name><name pos:line="47" pos:column="27">Contains</name><argument_list pos:line="47" pos:column="35">&lt;<argument><name><name pos:line="47" pos:column="36">IList</name><argument_list pos:line="47" pos:column="41">&lt;<argument><name pos:line="47" pos:column="42">T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name><argument_list pos:line="47" pos:column="45">()</argument_list></call></expr>)</condition><then pos:line="47" pos:column="48">
            <block pos:line="48" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="49" pos:column="17">tabStore</name><op:operator pos:line="49" pos:column="25">.</op:operator><name><name pos:line="49" pos:column="26">Set</name><argument_list pos:line="49" pos:column="29">&lt;<argument><name><name pos:line="49" pos:column="30">IList</name><argument_list pos:line="49" pos:column="35">&lt;<argument><name pos:line="49" pos:column="36">T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name><argument_list pos:line="49" pos:column="39">(<argument><expr><op:operator pos:line="49" pos:column="40">new</op:operator> <call><name><name pos:line="49" pos:column="44">List</name><argument_list pos:line="49" pos:column="48">&lt;<argument><name pos:line="49" pos:column="49">T</name></argument>&gt;</argument_list></name><argument_list pos:line="49" pos:column="51">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="52" pos:column="13">var</name></type> <name pos:line="52" pos:column="17">messages</name> <init pos:line="52" pos:column="26">= <expr><call><name><name pos:line="52" pos:column="28">tabStore</name><op:operator pos:line="52" pos:column="36">.</op:operator><name><name pos:line="52" pos:column="37">Get</name><argument_list pos:line="52" pos:column="40">&lt;<argument><name><name pos:line="52" pos:column="41">IList</name><argument_list pos:line="52" pos:column="46">&lt;<argument><name pos:line="52" pos:column="47">T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name><argument_list pos:line="52" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="54" pos:column="13">messages</name><op:operator pos:line="54" pos:column="21">.</op:operator><name pos:line="54" pos:column="22">Add</name></name><argument_list pos:line="54" pos:column="25">(<argument><expr><name pos:line="54" pos:column="26">message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
