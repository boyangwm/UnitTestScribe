<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Core\Configuration\SectionShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">System</name><op:operator pos:line="1" pos:column="13">.</op:operator><name pos:line="1" pos:column="14">Configuration</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">Glimpse</name><op:operator pos:line="2" pos:column="14">.</op:operator><name pos:line="2" pos:column="15">Core</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Glimpse</name><op:operator pos:line="3" pos:column="14">.</op:operator><name pos:line="3" pos:column="15">Core</name><op:operator pos:line="3" pos:column="19">.</op:operator><name pos:line="3" pos:column="20">Configuration</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Core</name><op:operator pos:line="4" pos:column="19">.</op:operator><name pos:line="4" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Glimpse</name><op:operator pos:line="5" pos:column="14">.</op:operator><name pos:line="5" pos:column="15">Test</name><op:operator pos:line="5" pos:column="19">.</op:operator><name pos:line="5" pos:column="20">Core</name><op:operator pos:line="5" pos:column="24">.</op:operator><name pos:line="5" pos:column="25">TestDoubles</name></name>;</using>
<using pos:line="6" pos:column="1">using <name pos:line="6" pos:column="7">Xunit</name>;</using>

<namespace pos:line="8" pos:column="1">namespace <name><name pos:line="8" pos:column="11">Glimpse</name><op:operator pos:line="8" pos:column="18">.</op:operator><name pos:line="8" pos:column="19">Test</name><op:operator pos:line="8" pos:column="23">.</op:operator><name pos:line="8" pos:column="24">Core</name><op:operator pos:line="8" pos:column="28">.</op:operator><name pos:line="8" pos:column="29">Configuration</name></name>
<block pos:line="9" pos:column="1">{
    <class><specifier pos:line="10" pos:column="5">public</specifier> class <name pos:line="10" pos:column="18">SectionShould</name>
    <block pos:line="11" pos:column="5">{
        <function><type><attribute pos:line="12" pos:column="9">[<expr><name pos:line="12" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="13" pos:column="9">public</specifier> <name pos:line="13" pos:column="16">void</name></type> <name pos:line="13" pos:column="21">LoadFromConfigFile</name><parameter_list pos:line="13" pos:column="39">()</parameter_list>
        <block pos:line="14" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="15" pos:column="13">var</name></type> <name pos:line="15" pos:column="17">section</name> <init pos:line="15" pos:column="25">= <expr><call><name><name pos:line="15" pos:column="27">ConfigurationManager</name><op:operator pos:line="15" pos:column="47">.</op:operator><name pos:line="15" pos:column="48">GetSection</name></name><argument_list pos:line="15" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="15" pos:column="59">"glimpse"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="15" pos:column="70">as</op:operator> <name pos:line="15" pos:column="73">Section</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="16" pos:column="13">Assert</name><op:operator pos:line="16" pos:column="19">.</op:operator><name pos:line="16" pos:column="20">NotNull</name></name><argument_list pos:line="16" pos:column="27">(<argument><expr><name pos:line="16" pos:column="28">section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="19" pos:column="9">[<expr><name pos:line="19" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="20" pos:column="9">public</specifier> <name pos:line="20" pos:column="16">void</name></type> <name pos:line="20" pos:column="21">ReadLoggingInfoFromFile</name><parameter_list pos:line="20" pos:column="44">()</parameter_list>
        <block pos:line="21" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="22" pos:column="13">var</name></type> <name pos:line="22" pos:column="17">section</name> <init pos:line="22" pos:column="25">= <expr><call><name><name pos:line="22" pos:column="27">ConfigurationManager</name><op:operator pos:line="22" pos:column="47">.</op:operator><name pos:line="22" pos:column="48">GetSection</name></name><argument_list pos:line="22" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="22" pos:column="59">"glimpse"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="22" pos:column="70">as</op:operator> <name pos:line="22" pos:column="73">Section</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="23" pos:column="13">Assert</name><op:operator pos:line="23" pos:column="19">.</op:operator><name pos:line="23" pos:column="20">NotNull</name></name><argument_list pos:line="23" pos:column="27">(<argument><expr><name><name pos:line="23" pos:column="28">section</name><op:operator pos:line="23" pos:column="35">.</op:operator><name pos:line="23" pos:column="36">Logging</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="24" pos:column="13">Assert</name><op:operator pos:line="24" pos:column="19">.</op:operator><name pos:line="24" pos:column="20">Equal</name></name><argument_list pos:line="24" pos:column="25">(<argument><expr><name><name pos:line="24" pos:column="26">LoggingLevel</name><op:operator pos:line="24" pos:column="38">.</op:operator><name pos:line="24" pos:column="39">Warn</name></name></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="45">section</name><op:operator pos:line="24" pos:column="52">.</op:operator><name pos:line="24" pos:column="53">Logging</name><op:operator pos:line="24" pos:column="60">.</op:operator><name pos:line="24" pos:column="61">Level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="27" pos:column="9">[<expr><name pos:line="27" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="28" pos:column="9">public</specifier> <name pos:line="28" pos:column="16">void</name></type> <name pos:line="28" pos:column="21">HaveDefaultLoggingLevel</name><parameter_list pos:line="28" pos:column="44">()</parameter_list>
        <block pos:line="29" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="30" pos:column="13">var</name></type> <name pos:line="30" pos:column="17">section</name> <init pos:line="30" pos:column="25">= <expr><op:operator pos:line="30" pos:column="27">new</op:operator> <call><name pos:line="30" pos:column="31">Section</name><argument_list pos:line="30" pos:column="38">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="31" pos:column="13">Assert</name><op:operator pos:line="31" pos:column="19">.</op:operator><name pos:line="31" pos:column="20">Equal</name></name><argument_list pos:line="31" pos:column="25">(<argument><expr><name><name pos:line="31" pos:column="26">LoggingLevel</name><op:operator pos:line="31" pos:column="38">.</op:operator><name pos:line="31" pos:column="39">Off</name></name></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="44">section</name><op:operator pos:line="31" pos:column="51">.</op:operator><name pos:line="31" pos:column="52">Logging</name><op:operator pos:line="31" pos:column="59">.</op:operator><name pos:line="31" pos:column="60">Level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="34" pos:column="9">[<expr><name pos:line="34" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="35" pos:column="9">public</specifier> <name pos:line="35" pos:column="16">void</name></type> <name pos:line="35" pos:column="21">HaveDefaultClientScripts</name><parameter_list pos:line="35" pos:column="45">()</parameter_list>
        <block pos:line="36" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="37" pos:column="13">var</name></type> <name pos:line="37" pos:column="17">section</name> <init pos:line="37" pos:column="25">= <expr><op:operator pos:line="37" pos:column="27">new</op:operator> <call><name pos:line="37" pos:column="31">Section</name><argument_list pos:line="37" pos:column="38">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="38" pos:column="13">Assert</name><op:operator pos:line="38" pos:column="19">.</op:operator><name pos:line="38" pos:column="20">NotNull</name></name><argument_list pos:line="38" pos:column="27">(<argument><expr><name><name pos:line="38" pos:column="28">section</name><op:operator pos:line="38" pos:column="35">.</op:operator><name pos:line="38" pos:column="36">ClientScripts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="39" pos:column="13">Assert</name><op:operator pos:line="39" pos:column="19">.</op:operator><name pos:line="39" pos:column="20">True</name></name><argument_list pos:line="39" pos:column="24">(<argument><expr><name><name pos:line="39" pos:column="25">section</name><op:operator pos:line="39" pos:column="32">.</op:operator><name pos:line="39" pos:column="33">ClientScripts</name><op:operator pos:line="39" pos:column="46">.</op:operator><name pos:line="39" pos:column="47">AutoDiscover</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="40" pos:column="13">Assert</name><op:operator pos:line="40" pos:column="19">.</op:operator><name pos:line="40" pos:column="20">Empty</name></name><argument_list pos:line="40" pos:column="25">(<argument><expr><name><name pos:line="40" pos:column="26">section</name><op:operator pos:line="40" pos:column="33">.</op:operator><name pos:line="40" pos:column="34">ClientScripts</name><op:operator pos:line="40" pos:column="47">.</op:operator><name pos:line="40" pos:column="48">DiscoveryLocation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="41" pos:column="13">Assert</name><op:operator pos:line="41" pos:column="19">.</op:operator><name pos:line="41" pos:column="20">Empty</name></name><argument_list pos:line="41" pos:column="25">(<argument><expr><name><name pos:line="41" pos:column="26">section</name><op:operator pos:line="41" pos:column="33">.</op:operator><name pos:line="41" pos:column="34">ClientScripts</name><op:operator pos:line="41" pos:column="47">.</op:operator><name pos:line="41" pos:column="48">IgnoredTypes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="44" pos:column="9">[<expr><name pos:line="44" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="45" pos:column="9">public</specifier> <name pos:line="45" pos:column="16">void</name></type> <name pos:line="45" pos:column="21">ReadClientScriptsFromFile</name><parameter_list pos:line="45" pos:column="46">()</parameter_list>
        <block pos:line="46" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="47" pos:column="13">var</name></type> <name pos:line="47" pos:column="17">section</name> <init pos:line="47" pos:column="25">= <expr><call><name><name pos:line="47" pos:column="27">ConfigurationManager</name><op:operator pos:line="47" pos:column="47">.</op:operator><name pos:line="47" pos:column="48">GetSection</name></name><argument_list pos:line="47" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="47" pos:column="59">"glimpse"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="47" pos:column="70">as</op:operator> <name pos:line="47" pos:column="73">Section</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="49" pos:column="13">Assert</name><op:operator pos:line="49" pos:column="19">.</op:operator><name pos:line="49" pos:column="20">True</name></name><argument_list pos:line="49" pos:column="24">(<argument><expr><name><name pos:line="49" pos:column="25">section</name><op:operator pos:line="49" pos:column="32">.</op:operator><name pos:line="49" pos:column="33">ClientScripts</name><op:operator pos:line="49" pos:column="46">.</op:operator><name pos:line="49" pos:column="47">AutoDiscover</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="50" pos:column="13">Assert</name><op:operator pos:line="50" pos:column="19">.</op:operator><name pos:line="50" pos:column="20">Equal</name></name><argument_list pos:line="50" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="50" pos:column="26">""</lit:literal></expr></argument>, <argument><expr><name><name pos:line="50" pos:column="30">section</name><op:operator pos:line="50" pos:column="37">.</op:operator><name pos:line="50" pos:column="38">ClientScripts</name><op:operator pos:line="50" pos:column="51">.</op:operator><name pos:line="50" pos:column="52">DiscoveryLocation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="51" pos:column="13">Assert</name><op:operator pos:line="51" pos:column="19">.</op:operator><name pos:line="51" pos:column="20">True</name></name><argument_list pos:line="51" pos:column="24">(<argument><expr><name><name pos:line="51" pos:column="25">section</name><op:operator pos:line="51" pos:column="32">.</op:operator><name pos:line="51" pos:column="33">ClientScripts</name><op:operator pos:line="51" pos:column="46">.</op:operator><name pos:line="51" pos:column="47">IgnoredTypes</name><op:operator pos:line="51" pos:column="59">.</op:operator><name pos:line="51" pos:column="60">Count</name></name> <op:operator pos:line="51" pos:column="66">==</op:operator> <lit:literal type="number" pos:line="51" pos:column="69">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="54" pos:column="9">[<expr><name pos:line="54" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="55" pos:column="9">public</specifier> <name pos:line="55" pos:column="16">void</name></type> <name pos:line="55" pos:column="21">SetLoggingElement</name><parameter_list pos:line="55" pos:column="38">()</parameter_list>
        <block pos:line="56" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="57" pos:column="13">var</name></type> <name pos:line="57" pos:column="17">loggingElement</name> <init pos:line="57" pos:column="32">= <expr><op:operator pos:line="57" pos:column="34">new</op:operator> <call><name pos:line="57" pos:column="38">LoggingElement</name><argument_list pos:line="57" pos:column="52">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="59" pos:column="13">var</name></type> <name pos:line="59" pos:column="17">section</name> <init pos:line="59" pos:column="25">= <expr><op:operator pos:line="59" pos:column="27">new</op:operator> <call><name pos:line="59" pos:column="31">Section</name><argument_list pos:line="59" pos:column="38">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name><name pos:line="61" pos:column="13">section</name><op:operator pos:line="61" pos:column="20">.</op:operator><name pos:line="61" pos:column="21">Logging</name></name> <op:operator pos:line="61" pos:column="29">=</op:operator> <name pos:line="61" pos:column="31">loggingElement</name></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="63" pos:column="13">Assert</name><op:operator pos:line="63" pos:column="19">.</op:operator><name pos:line="63" pos:column="20">Equal</name></name><argument_list pos:line="63" pos:column="25">(<argument><expr><name pos:line="63" pos:column="26">loggingElement</name></expr></argument>, <argument><expr><name><name pos:line="63" pos:column="42">section</name><op:operator pos:line="63" pos:column="49">.</op:operator><name pos:line="63" pos:column="50">Logging</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="66" pos:column="9">[<expr><name pos:line="66" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="67" pos:column="9">public</specifier> <name pos:line="67" pos:column="16">void</name></type> <name pos:line="67" pos:column="21">SetClientScriptsElement</name><parameter_list pos:line="67" pos:column="44">()</parameter_list>
        <block pos:line="68" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="69" pos:column="13">var</name></type> <name pos:line="69" pos:column="17">scripts</name> <init pos:line="69" pos:column="25">= <expr><op:operator pos:line="69" pos:column="27">new</op:operator> <call><name pos:line="69" pos:column="31">DiscoverableCollectionElement</name><argument_list pos:line="69" pos:column="60">()</argument_list></call><block pos:line="69" pos:column="62">{<expr><name pos:line="69" pos:column="63">AutoDiscover</name> <op:operator pos:line="69" pos:column="76">=</op:operator> <lit:literal type="boolean" pos:line="69" pos:column="78">false</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="71" pos:column="13">var</name></type> <name pos:line="71" pos:column="17">section</name> <init pos:line="71" pos:column="25">= <expr><op:operator pos:line="71" pos:column="27">new</op:operator> <call><name pos:line="71" pos:column="31">Section</name><argument_list pos:line="71" pos:column="38">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name><name pos:line="73" pos:column="13">section</name><op:operator pos:line="73" pos:column="20">.</op:operator><name pos:line="73" pos:column="21">ClientScripts</name></name> <op:operator pos:line="73" pos:column="35">=</op:operator> <name pos:line="73" pos:column="37">scripts</name></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="75" pos:column="13">Assert</name><op:operator pos:line="75" pos:column="19">.</op:operator><name pos:line="75" pos:column="20">Equal</name></name><argument_list pos:line="75" pos:column="25">(<argument><expr><name pos:line="75" pos:column="26">scripts</name></expr></argument>, <argument><expr><name><name pos:line="75" pos:column="35">section</name><op:operator pos:line="75" pos:column="42">.</op:operator><name pos:line="75" pos:column="43">ClientScripts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="78" pos:column="9">[<expr><name pos:line="78" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="79" pos:column="9">public</specifier> <name pos:line="79" pos:column="16">void</name></type> <name pos:line="79" pos:column="21">ReturnDefaultBasePolicy</name><parameter_list pos:line="79" pos:column="44">()</parameter_list>
        <block pos:line="80" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="81" pos:column="13">var</name></type> <name pos:line="81" pos:column="17">section</name> <init pos:line="81" pos:column="25">= <expr><op:operator pos:line="81" pos:column="27">new</op:operator> <call><name pos:line="81" pos:column="31">Section</name><argument_list pos:line="81" pos:column="38">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="83" pos:column="13">Assert</name><op:operator pos:line="83" pos:column="19">.</op:operator><name pos:line="83" pos:column="20">Equal</name></name><argument_list pos:line="83" pos:column="25">(<argument><expr><name><name pos:line="83" pos:column="26">RuntimePolicy</name><op:operator pos:line="83" pos:column="39">.</op:operator><name pos:line="83" pos:column="40">Off</name></name></expr></argument>, <argument><expr><name><name pos:line="83" pos:column="45">section</name><op:operator pos:line="83" pos:column="52">.</op:operator><name pos:line="83" pos:column="53">DefaultRuntimePolicy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="86" pos:column="9">[<expr><name pos:line="86" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="87" pos:column="9">public</specifier> <name pos:line="87" pos:column="16">void</name></type> <name pos:line="87" pos:column="21">ReadDefaultRuntimePolicyFromFile</name><parameter_list pos:line="87" pos:column="53">()</parameter_list>
        <block pos:line="88" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="89" pos:column="13">var</name></type> <name pos:line="89" pos:column="17">section</name> <init pos:line="89" pos:column="25">= <expr><call><name><name pos:line="89" pos:column="27">ConfigurationManager</name><op:operator pos:line="89" pos:column="47">.</op:operator><name pos:line="89" pos:column="48">GetSection</name></name><argument_list pos:line="89" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="89" pos:column="59">"glimpse"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="89" pos:column="70">as</op:operator> <name pos:line="89" pos:column="73">Section</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="90" pos:column="13">Assert</name><op:operator pos:line="90" pos:column="19">.</op:operator><name pos:line="90" pos:column="20">Equal</name></name><argument_list pos:line="90" pos:column="25">(<argument><expr><name><name pos:line="90" pos:column="26">RuntimePolicy</name><op:operator pos:line="90" pos:column="39">.</op:operator><name pos:line="90" pos:column="40">On</name></name></expr></argument>, <argument><expr><name><name pos:line="90" pos:column="44">section</name><op:operator pos:line="90" pos:column="51">.</op:operator><name pos:line="90" pos:column="52">DefaultRuntimePolicy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="93" pos:column="9">[<expr><name pos:line="93" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="94" pos:column="9">public</specifier> <name pos:line="94" pos:column="16">void</name></type> <name pos:line="94" pos:column="21">GetSetBasePolicy</name><parameter_list pos:line="94" pos:column="37">()</parameter_list>
        <block pos:line="95" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="96" pos:column="13">var</name></type> <name pos:line="96" pos:column="17">basePolicy</name> <init pos:line="96" pos:column="28">= <expr><name><name pos:line="96" pos:column="30">RuntimePolicy</name><op:operator pos:line="96" pos:column="43">.</op:operator><name pos:line="96" pos:column="44">ModifyResponseBody</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="98" pos:column="13">var</name></type> <name pos:line="98" pos:column="17">section</name> <init pos:line="98" pos:column="25">= <expr><op:operator pos:line="98" pos:column="27">new</op:operator> <call><name pos:line="98" pos:column="31">Section</name><argument_list pos:line="98" pos:column="38">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name><name pos:line="100" pos:column="13">section</name><op:operator pos:line="100" pos:column="20">.</op:operator><name pos:line="100" pos:column="21">DefaultRuntimePolicy</name></name> <op:operator pos:line="100" pos:column="42">=</op:operator> <name pos:line="100" pos:column="44">basePolicy</name></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="102" pos:column="13">Assert</name><op:operator pos:line="102" pos:column="19">.</op:operator><name pos:line="102" pos:column="20">Equal</name></name><argument_list pos:line="102" pos:column="25">(<argument><expr><name pos:line="102" pos:column="26">basePolicy</name></expr></argument>, <argument><expr><name><name pos:line="102" pos:column="38">section</name><op:operator pos:line="102" pos:column="45">.</op:operator><name pos:line="102" pos:column="46">DefaultRuntimePolicy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="105" pos:column="9">[<expr><name pos:line="105" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="106" pos:column="9">public</specifier> <name pos:line="106" pos:column="16">void</name></type> <name pos:line="106" pos:column="21">ReturnDefaultInspectors</name><parameter_list pos:line="106" pos:column="44">()</parameter_list>
        <block pos:line="107" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="108" pos:column="13">var</name></type> <name pos:line="108" pos:column="17">section</name> <init pos:line="108" pos:column="25">= <expr><op:operator pos:line="108" pos:column="27">new</op:operator> <call><name pos:line="108" pos:column="31">Section</name><argument_list pos:line="108" pos:column="38">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="110" pos:column="13">var</name></type> <name pos:line="110" pos:column="17">element</name> <init pos:line="110" pos:column="25">= <expr><name><name pos:line="110" pos:column="27">section</name><op:operator pos:line="110" pos:column="34">.</op:operator><name pos:line="110" pos:column="35">Inspectors</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="112" pos:column="13">Assert</name><op:operator pos:line="112" pos:column="19">.</op:operator><name pos:line="112" pos:column="20">NotNull</name></name><argument_list pos:line="112" pos:column="27">(<argument><expr><name pos:line="112" pos:column="28">element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="113" pos:column="13">Assert</name><op:operator pos:line="113" pos:column="19">.</op:operator><name pos:line="113" pos:column="20">True</name></name><argument_list pos:line="113" pos:column="24">(<argument><expr><name><name pos:line="113" pos:column="25">element</name><op:operator pos:line="113" pos:column="32">.</op:operator><name pos:line="113" pos:column="33">AutoDiscover</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="114" pos:column="13">Assert</name><op:operator pos:line="114" pos:column="19">.</op:operator><name pos:line="114" pos:column="20">Empty</name></name><argument_list pos:line="114" pos:column="25">(<argument><expr><name><name pos:line="114" pos:column="26">element</name><op:operator pos:line="114" pos:column="33">.</op:operator><name pos:line="114" pos:column="34">IgnoredTypes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="115" pos:column="13">Assert</name><op:operator pos:line="115" pos:column="19">.</op:operator><name pos:line="115" pos:column="20">Empty</name></name><argument_list pos:line="115" pos:column="25">(<argument><expr><name><name pos:line="115" pos:column="26">element</name><op:operator pos:line="115" pos:column="33">.</op:operator><name pos:line="115" pos:column="34">DiscoveryLocation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="118" pos:column="9">[<expr><name pos:line="118" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="119" pos:column="9">public</specifier> <name pos:line="119" pos:column="16">void</name></type> <name pos:line="119" pos:column="21">GetSetInspectors</name><parameter_list pos:line="119" pos:column="37">()</parameter_list>
        <block pos:line="120" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="121" pos:column="13">var</name></type> <name pos:line="121" pos:column="17">section</name> <init pos:line="121" pos:column="25">= <expr><op:operator pos:line="121" pos:column="27">new</op:operator> <call><name pos:line="121" pos:column="31">Section</name><argument_list pos:line="121" pos:column="38">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="123" pos:column="13">var</name></type> <name pos:line="123" pos:column="17">element</name> <init pos:line="123" pos:column="25">= <expr><op:operator pos:line="123" pos:column="27">new</op:operator> <call><name pos:line="123" pos:column="31">DiscoverableCollectionElement</name><argument_list pos:line="123" pos:column="60">()</argument_list></call><block pos:line="123" pos:column="62">{<expr><name pos:line="123" pos:column="63">AutoDiscover</name> <op:operator pos:line="123" pos:column="76">=</op:operator> <lit:literal type="boolean" pos:line="123" pos:column="78">false</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name><name pos:line="125" pos:column="13">section</name><op:operator pos:line="125" pos:column="20">.</op:operator><name pos:line="125" pos:column="21">Inspectors</name></name> <op:operator pos:line="125" pos:column="32">=</op:operator> <name pos:line="125" pos:column="34">element</name></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="127" pos:column="13">Assert</name><op:operator pos:line="127" pos:column="19">.</op:operator><name pos:line="127" pos:column="20">Equal</name></name><argument_list pos:line="127" pos:column="25">(<argument><expr><name pos:line="127" pos:column="26">element</name></expr></argument>, <argument><expr><name><name pos:line="127" pos:column="35">section</name><op:operator pos:line="127" pos:column="42">.</op:operator><name pos:line="127" pos:column="43">Inspectors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="130" pos:column="9">[<expr><name pos:line="130" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="131" pos:column="9">public</specifier> <name pos:line="131" pos:column="16">void</name></type> <name pos:line="131" pos:column="21">ReturnDefaultResources</name><parameter_list pos:line="131" pos:column="43">()</parameter_list>
        <block pos:line="132" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="133" pos:column="13">var</name></type> <name pos:line="133" pos:column="17">section</name> <init pos:line="133" pos:column="25">= <expr><op:operator pos:line="133" pos:column="27">new</op:operator> <call><name pos:line="133" pos:column="31">Section</name><argument_list pos:line="133" pos:column="38">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="135" pos:column="13">var</name></type> <name pos:line="135" pos:column="17">element</name> <init pos:line="135" pos:column="25">= <expr><name><name pos:line="135" pos:column="27">section</name><op:operator pos:line="135" pos:column="34">.</op:operator><name pos:line="135" pos:column="35">Resources</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="137" pos:column="13">Assert</name><op:operator pos:line="137" pos:column="19">.</op:operator><name pos:line="137" pos:column="20">NotNull</name></name><argument_list pos:line="137" pos:column="27">(<argument><expr><name pos:line="137" pos:column="28">element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="138" pos:column="13">Assert</name><op:operator pos:line="138" pos:column="19">.</op:operator><name pos:line="138" pos:column="20">True</name></name><argument_list pos:line="138" pos:column="24">(<argument><expr><name><name pos:line="138" pos:column="25">element</name><op:operator pos:line="138" pos:column="32">.</op:operator><name pos:line="138" pos:column="33">AutoDiscover</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="139" pos:column="13">Assert</name><op:operator pos:line="139" pos:column="19">.</op:operator><name pos:line="139" pos:column="20">Empty</name></name><argument_list pos:line="139" pos:column="25">(<argument><expr><name><name pos:line="139" pos:column="26">element</name><op:operator pos:line="139" pos:column="33">.</op:operator><name pos:line="139" pos:column="34">IgnoredTypes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="140" pos:column="13">Assert</name><op:operator pos:line="140" pos:column="19">.</op:operator><name pos:line="140" pos:column="20">Empty</name></name><argument_list pos:line="140" pos:column="25">(<argument><expr><name><name pos:line="140" pos:column="26">element</name><op:operator pos:line="140" pos:column="33">.</op:operator><name pos:line="140" pos:column="34">DiscoveryLocation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="143" pos:column="9">[<expr><name pos:line="143" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="144" pos:column="9">public</specifier> <name pos:line="144" pos:column="16">void</name></type> <name pos:line="144" pos:column="21">GetSetResources</name><parameter_list pos:line="144" pos:column="36">()</parameter_list>
        <block pos:line="145" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="146" pos:column="13">var</name></type> <name pos:line="146" pos:column="17">section</name> <init pos:line="146" pos:column="25">= <expr><op:operator pos:line="146" pos:column="27">new</op:operator> <call><name pos:line="146" pos:column="31">Section</name><argument_list pos:line="146" pos:column="38">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="148" pos:column="13">var</name></type> <name pos:line="148" pos:column="17">element</name> <init pos:line="148" pos:column="25">= <expr><op:operator pos:line="148" pos:column="27">new</op:operator> <call><name pos:line="148" pos:column="31">DiscoverableCollectionElement</name><argument_list pos:line="148" pos:column="60">()</argument_list></call><block pos:line="148" pos:column="62">{<expr><name pos:line="148" pos:column="63">AutoDiscover</name> <op:operator pos:line="148" pos:column="76">=</op:operator> <lit:literal type="boolean" pos:line="148" pos:column="78">false</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name><name pos:line="150" pos:column="13">section</name><op:operator pos:line="150" pos:column="20">.</op:operator><name pos:line="150" pos:column="21">Resources</name></name> <op:operator pos:line="150" pos:column="31">=</op:operator> <name pos:line="150" pos:column="33">element</name></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="152" pos:column="13">Assert</name><op:operator pos:line="152" pos:column="19">.</op:operator><name pos:line="152" pos:column="20">Equal</name></name><argument_list pos:line="152" pos:column="25">(<argument><expr><name pos:line="152" pos:column="26">element</name></expr></argument>, <argument><expr><name><name pos:line="152" pos:column="35">section</name><op:operator pos:line="152" pos:column="42">.</op:operator><name pos:line="152" pos:column="43">Resources</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="155" pos:column="9">[<expr><name pos:line="155" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="156" pos:column="9">public</specifier> <name pos:line="156" pos:column="16">void</name></type> <name pos:line="156" pos:column="21">ReturnDefaultTabs</name><parameter_list pos:line="156" pos:column="38">()</parameter_list>
        <block pos:line="157" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="158" pos:column="13">var</name></type> <name pos:line="158" pos:column="17">section</name> <init pos:line="158" pos:column="25">= <expr><op:operator pos:line="158" pos:column="27">new</op:operator> <call><name pos:line="158" pos:column="31">Section</name><argument_list pos:line="158" pos:column="38">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="160" pos:column="13">var</name></type> <name pos:line="160" pos:column="17">element</name> <init pos:line="160" pos:column="25">= <expr><name><name pos:line="160" pos:column="27">section</name><op:operator pos:line="160" pos:column="34">.</op:operator><name pos:line="160" pos:column="35">Tabs</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="162" pos:column="13">Assert</name><op:operator pos:line="162" pos:column="19">.</op:operator><name pos:line="162" pos:column="20">NotNull</name></name><argument_list pos:line="162" pos:column="27">(<argument><expr><name pos:line="162" pos:column="28">element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="163" pos:column="13">Assert</name><op:operator pos:line="163" pos:column="19">.</op:operator><name pos:line="163" pos:column="20">True</name></name><argument_list pos:line="163" pos:column="24">(<argument><expr><name><name pos:line="163" pos:column="25">element</name><op:operator pos:line="163" pos:column="32">.</op:operator><name pos:line="163" pos:column="33">AutoDiscover</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="164" pos:column="13">Assert</name><op:operator pos:line="164" pos:column="19">.</op:operator><name pos:line="164" pos:column="20">Empty</name></name><argument_list pos:line="164" pos:column="25">(<argument><expr><name><name pos:line="164" pos:column="26">element</name><op:operator pos:line="164" pos:column="33">.</op:operator><name pos:line="164" pos:column="34">IgnoredTypes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="165" pos:column="13">Assert</name><op:operator pos:line="165" pos:column="19">.</op:operator><name pos:line="165" pos:column="20">Empty</name></name><argument_list pos:line="165" pos:column="25">(<argument><expr><name><name pos:line="165" pos:column="26">element</name><op:operator pos:line="165" pos:column="33">.</op:operator><name pos:line="165" pos:column="34">DiscoveryLocation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="168" pos:column="9">[<expr><name pos:line="168" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="169" pos:column="9">public</specifier> <name pos:line="169" pos:column="16">void</name></type> <name pos:line="169" pos:column="21">GetSetTabs</name><parameter_list pos:line="169" pos:column="31">()</parameter_list>
        <block pos:line="170" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="171" pos:column="13">var</name></type> <name pos:line="171" pos:column="17">section</name> <init pos:line="171" pos:column="25">= <expr><op:operator pos:line="171" pos:column="27">new</op:operator> <call><name pos:line="171" pos:column="31">Section</name><argument_list pos:line="171" pos:column="38">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="173" pos:column="13">var</name></type> <name pos:line="173" pos:column="17">element</name> <init pos:line="173" pos:column="25">= <expr><op:operator pos:line="173" pos:column="27">new</op:operator> <call><name pos:line="173" pos:column="31">DiscoverableCollectionElement</name><argument_list pos:line="173" pos:column="60">()</argument_list></call><block pos:line="173" pos:column="62">{<expr><name pos:line="173" pos:column="63">AutoDiscover</name> <op:operator pos:line="173" pos:column="76">=</op:operator> <lit:literal type="boolean" pos:line="173" pos:column="78">false</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name><name pos:line="175" pos:column="13">section</name><op:operator pos:line="175" pos:column="20">.</op:operator><name pos:line="175" pos:column="21">Tabs</name></name> <op:operator pos:line="175" pos:column="26">=</op:operator> <name pos:line="175" pos:column="28">element</name></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="177" pos:column="13">Assert</name><op:operator pos:line="177" pos:column="19">.</op:operator><name pos:line="177" pos:column="20">Equal</name></name><argument_list pos:line="177" pos:column="25">(<argument><expr><name pos:line="177" pos:column="26">element</name></expr></argument>, <argument><expr><name><name pos:line="177" pos:column="35">section</name><op:operator pos:line="177" pos:column="42">.</op:operator><name pos:line="177" pos:column="43">Tabs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="180" pos:column="9">[<expr><name pos:line="180" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="181" pos:column="9">public</specifier> <name pos:line="181" pos:column="16">void</name></type> <name pos:line="181" pos:column="21">ReturnDefaultRuntimePolicies</name><parameter_list pos:line="181" pos:column="49">()</parameter_list>
        <block pos:line="182" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="183" pos:column="13">var</name></type> <name pos:line="183" pos:column="17">section</name> <init pos:line="183" pos:column="25">= <expr><op:operator pos:line="183" pos:column="27">new</op:operator> <call><name pos:line="183" pos:column="31">Section</name><argument_list pos:line="183" pos:column="38">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="185" pos:column="13">var</name></type> <name pos:line="185" pos:column="17">element</name> <init pos:line="185" pos:column="25">= <expr><name><name pos:line="185" pos:column="27">section</name><op:operator pos:line="185" pos:column="34">.</op:operator><name pos:line="185" pos:column="35">RuntimePolicies</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="187" pos:column="13">Assert</name><op:operator pos:line="187" pos:column="19">.</op:operator><name pos:line="187" pos:column="20">NotNull</name></name><argument_list pos:line="187" pos:column="27">(<argument><expr><name pos:line="187" pos:column="28">element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="188" pos:column="13">Assert</name><op:operator pos:line="188" pos:column="19">.</op:operator><name pos:line="188" pos:column="20">True</name></name><argument_list pos:line="188" pos:column="24">(<argument><expr><name><name pos:line="188" pos:column="25">element</name><op:operator pos:line="188" pos:column="32">.</op:operator><name pos:line="188" pos:column="33">AutoDiscover</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="189" pos:column="13">Assert</name><op:operator pos:line="189" pos:column="19">.</op:operator><name pos:line="189" pos:column="20">Empty</name></name><argument_list pos:line="189" pos:column="25">(<argument><expr><name><name pos:line="189" pos:column="26">element</name><op:operator pos:line="189" pos:column="33">.</op:operator><name pos:line="189" pos:column="34">IgnoredTypes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="190" pos:column="13">Assert</name><op:operator pos:line="190" pos:column="19">.</op:operator><name pos:line="190" pos:column="20">Empty</name></name><argument_list pos:line="190" pos:column="25">(<argument><expr><name><name pos:line="190" pos:column="26">element</name><op:operator pos:line="190" pos:column="33">.</op:operator><name pos:line="190" pos:column="34">DiscoveryLocation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="193" pos:column="9">[<expr><name pos:line="193" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="194" pos:column="9">public</specifier> <name pos:line="194" pos:column="16">void</name></type> <name pos:line="194" pos:column="21">GetSetRuntimePolicies</name><parameter_list pos:line="194" pos:column="42">()</parameter_list>
        <block pos:line="195" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="196" pos:column="13">var</name></type> <name pos:line="196" pos:column="17">section</name> <init pos:line="196" pos:column="25">= <expr><op:operator pos:line="196" pos:column="27">new</op:operator> <call><name pos:line="196" pos:column="31">Section</name><argument_list pos:line="196" pos:column="38">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="198" pos:column="13">var</name></type> <name pos:line="198" pos:column="17">element</name> <init pos:line="198" pos:column="25">= <expr><op:operator pos:line="198" pos:column="27">new</op:operator> <name pos:line="198" pos:column="31">PolicyDiscoverableCollectionElement</name> <block pos:line="198" pos:column="67">{<expr><name pos:line="198" pos:column="68">AutoDiscover</name> <op:operator pos:line="198" pos:column="81">=</op:operator> <lit:literal type="boolean" pos:line="198" pos:column="83">false</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name><name pos:line="200" pos:column="13">section</name><op:operator pos:line="200" pos:column="20">.</op:operator><name pos:line="200" pos:column="21">RuntimePolicies</name></name> <op:operator pos:line="200" pos:column="37">=</op:operator> <name pos:line="200" pos:column="39">element</name></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="202" pos:column="13">Assert</name><op:operator pos:line="202" pos:column="19">.</op:operator><name pos:line="202" pos:column="20">Equal</name></name><argument_list pos:line="202" pos:column="25">(<argument><expr><name pos:line="202" pos:column="26">element</name></expr></argument>, <argument><expr><name><name pos:line="202" pos:column="35">section</name><op:operator pos:line="202" pos:column="42">.</op:operator><name pos:line="202" pos:column="43">RuntimePolicies</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="205" pos:column="9">[<expr><name pos:line="205" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="206" pos:column="9">public</specifier> <name pos:line="206" pos:column="16">void</name></type> <name pos:line="206" pos:column="21">ReturnDefaultSerializationConverters</name><parameter_list pos:line="206" pos:column="57">()</parameter_list>
        <block pos:line="207" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="208" pos:column="13">var</name></type> <name pos:line="208" pos:column="17">section</name> <init pos:line="208" pos:column="25">= <expr><op:operator pos:line="208" pos:column="27">new</op:operator> <call><name pos:line="208" pos:column="31">Section</name><argument_list pos:line="208" pos:column="38">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="210" pos:column="13">var</name></type> <name pos:line="210" pos:column="17">element</name> <init pos:line="210" pos:column="25">= <expr><name><name pos:line="210" pos:column="27">section</name><op:operator pos:line="210" pos:column="34">.</op:operator><name pos:line="210" pos:column="35">SerializationConverters</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="212" pos:column="13">Assert</name><op:operator pos:line="212" pos:column="19">.</op:operator><name pos:line="212" pos:column="20">NotNull</name></name><argument_list pos:line="212" pos:column="27">(<argument><expr><name pos:line="212" pos:column="28">element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="213" pos:column="13">Assert</name><op:operator pos:line="213" pos:column="19">.</op:operator><name pos:line="213" pos:column="20">True</name></name><argument_list pos:line="213" pos:column="24">(<argument><expr><name><name pos:line="213" pos:column="25">element</name><op:operator pos:line="213" pos:column="32">.</op:operator><name pos:line="213" pos:column="33">AutoDiscover</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="214" pos:column="13">Assert</name><op:operator pos:line="214" pos:column="19">.</op:operator><name pos:line="214" pos:column="20">Empty</name></name><argument_list pos:line="214" pos:column="25">(<argument><expr><name><name pos:line="214" pos:column="26">element</name><op:operator pos:line="214" pos:column="33">.</op:operator><name pos:line="214" pos:column="34">IgnoredTypes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="215" pos:column="13">Assert</name><op:operator pos:line="215" pos:column="19">.</op:operator><name pos:line="215" pos:column="20">Empty</name></name><argument_list pos:line="215" pos:column="25">(<argument><expr><name><name pos:line="215" pos:column="26">element</name><op:operator pos:line="215" pos:column="33">.</op:operator><name pos:line="215" pos:column="34">DiscoveryLocation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="218" pos:column="9">[<expr><name pos:line="218" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="219" pos:column="9">public</specifier> <name pos:line="219" pos:column="16">void</name></type> <name pos:line="219" pos:column="21">GetSetSerializationConverters</name><parameter_list pos:line="219" pos:column="50">()</parameter_list>
        <block pos:line="220" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="221" pos:column="13">var</name></type> <name pos:line="221" pos:column="17">section</name> <init pos:line="221" pos:column="25">= <expr><op:operator pos:line="221" pos:column="27">new</op:operator> <call><name pos:line="221" pos:column="31">Section</name><argument_list pos:line="221" pos:column="38">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="223" pos:column="13">var</name></type> <name pos:line="223" pos:column="17">element</name> <init pos:line="223" pos:column="25">= <expr><op:operator pos:line="223" pos:column="27">new</op:operator> <name pos:line="223" pos:column="31">DiscoverableCollectionElement</name> <block pos:line="223" pos:column="61">{ <expr><name pos:line="223" pos:column="63">AutoDiscover</name> <op:operator pos:line="223" pos:column="76">=</op:operator> <lit:literal type="boolean" pos:line="223" pos:column="78">false</lit:literal></expr> }</block></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name><name pos:line="225" pos:column="13">section</name><op:operator pos:line="225" pos:column="20">.</op:operator><name pos:line="225" pos:column="21">SerializationConverters</name></name> <op:operator pos:line="225" pos:column="45">=</op:operator> <name pos:line="225" pos:column="47">element</name></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="227" pos:column="13">Assert</name><op:operator pos:line="227" pos:column="19">.</op:operator><name pos:line="227" pos:column="20">Equal</name></name><argument_list pos:line="227" pos:column="25">(<argument><expr><name pos:line="227" pos:column="26">element</name></expr></argument>, <argument><expr><name><name pos:line="227" pos:column="35">section</name><op:operator pos:line="227" pos:column="42">.</op:operator><name pos:line="227" pos:column="43">SerializationConverters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="230" pos:column="9">[<expr><name pos:line="230" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="231" pos:column="9">public</specifier> <name pos:line="231" pos:column="16">void</name></type> <name pos:line="231" pos:column="21">LoadUserServiceLocatorWhenConfigured</name><parameter_list pos:line="231" pos:column="57">()</parameter_list>
        <block pos:line="232" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="233" pos:column="13">var</name></type> <name pos:line="233" pos:column="17">section</name> <init pos:line="233" pos:column="25">= <expr><call><name><name pos:line="233" pos:column="27">ConfigurationManager</name><op:operator pos:line="233" pos:column="47">.</op:operator><name pos:line="233" pos:column="48">GetSection</name></name><argument_list pos:line="233" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="233" pos:column="59">"glimpse"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="233" pos:column="70">as</op:operator> <name pos:line="233" pos:column="73">Section</name></expr></init></decl>;</decl_stmt>
            
            <expr_stmt><expr><call><name><name pos:line="235" pos:column="13">Assert</name><op:operator pos:line="235" pos:column="19">.</op:operator><name pos:line="235" pos:column="20">NotNull</name></name><argument_list pos:line="235" pos:column="27">(<argument><expr><name><name pos:line="235" pos:column="28">section</name><op:operator pos:line="235" pos:column="35">.</op:operator><name pos:line="235" pos:column="36">ServiceLocatorType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="236" pos:column="13">Assert</name><op:operator pos:line="236" pos:column="19">.</op:operator><name pos:line="236" pos:column="20">True</name></name><argument_list pos:line="236" pos:column="24">(<argument><expr><name><name pos:line="236" pos:column="25">section</name><op:operator pos:line="236" pos:column="32">.</op:operator><name pos:line="236" pos:column="33">ServiceLocatorType</name></name> <op:operator pos:line="236" pos:column="52">==</op:operator> <call><name pos:line="236" pos:column="55">typeof</name><argument_list pos:line="236" pos:column="61">(<argument><expr><name pos:line="236" pos:column="62">DummyServiceLocator</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="239" pos:column="9">[<expr><name pos:line="239" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="240" pos:column="9">public</specifier> <name pos:line="240" pos:column="16">void</name></type> <name pos:line="240" pos:column="21">ReturnDefaultServiceLocatorType</name><parameter_list pos:line="240" pos:column="52">()</parameter_list>
        <block pos:line="241" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="242" pos:column="13">var</name></type> <name pos:line="242" pos:column="17">section</name> <init pos:line="242" pos:column="25">= <expr><op:operator pos:line="242" pos:column="27">new</op:operator> <call><name pos:line="242" pos:column="31">Section</name><argument_list pos:line="242" pos:column="38">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="244" pos:column="13">Assert</name><op:operator pos:line="244" pos:column="19">.</op:operator><name pos:line="244" pos:column="20">Null</name></name><argument_list pos:line="244" pos:column="24">(<argument><expr><name><name pos:line="244" pos:column="25">section</name><op:operator pos:line="244" pos:column="32">.</op:operator><name pos:line="244" pos:column="33">ServiceLocatorType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="247" pos:column="9">[<expr><name pos:line="247" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="248" pos:column="9">public</specifier> <name pos:line="248" pos:column="16">void</name></type> <name pos:line="248" pos:column="21">GetSetDefaultServiceLocatorType</name><parameter_list pos:line="248" pos:column="52">()</parameter_list>
        <block pos:line="249" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="250" pos:column="13">var</name></type> <name pos:line="250" pos:column="17">section</name> <init pos:line="250" pos:column="25">= <expr><op:operator pos:line="250" pos:column="27">new</op:operator> <call><name pos:line="250" pos:column="31">Section</name><argument_list pos:line="250" pos:column="38">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="251" pos:column="13">var</name></type> <name pos:line="251" pos:column="17">type</name> <init pos:line="251" pos:column="22">= <expr><call><name pos:line="251" pos:column="24">typeof</name> <argument_list pos:line="251" pos:column="31">(<argument><expr><name pos:line="251" pos:column="32">SectionShould</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name><name pos:line="253" pos:column="13">section</name><op:operator pos:line="253" pos:column="20">.</op:operator><name pos:line="253" pos:column="21">ServiceLocatorType</name></name> <op:operator pos:line="253" pos:column="40">=</op:operator> <name pos:line="253" pos:column="42">type</name></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="255" pos:column="13">Assert</name><op:operator pos:line="255" pos:column="19">.</op:operator><name pos:line="255" pos:column="20">Equal</name></name><argument_list pos:line="255" pos:column="25">(<argument><expr><name pos:line="255" pos:column="26">type</name></expr></argument>, <argument><expr><name><name pos:line="255" pos:column="32">section</name><op:operator pos:line="255" pos:column="39">.</op:operator><name pos:line="255" pos:column="40">ServiceLocatorType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
        }</block></function>
    }</block></class>
}</block></namespace></unit>
