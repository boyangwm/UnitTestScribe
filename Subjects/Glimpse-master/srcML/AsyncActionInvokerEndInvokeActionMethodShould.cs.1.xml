<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Mvc\AlternateType\AsyncActionInvokerEndInvokeActionMethodShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Web</name><op:operator pos:line="3" pos:column="17">.</op:operator><name pos:line="3" pos:column="18">Mvc</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Core</name><op:operator pos:line="4" pos:column="19">.</op:operator><name pos:line="4" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Glimpse</name><op:operator pos:line="5" pos:column="14">.</op:operator><name pos:line="5" pos:column="15">Mvc</name><op:operator pos:line="5" pos:column="18">.</op:operator><name pos:line="5" pos:column="19">AlternateType</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Glimpse</name><op:operator pos:line="6" pos:column="14">.</op:operator><name pos:line="6" pos:column="15">Test</name><op:operator pos:line="6" pos:column="19">.</op:operator><name pos:line="6" pos:column="20">Common</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Glimpse</name><op:operator pos:line="7" pos:column="14">.</op:operator><name pos:line="7" pos:column="15">Test</name><op:operator pos:line="7" pos:column="19">.</op:operator><name pos:line="7" pos:column="20">Mvc</name><op:operator pos:line="7" pos:column="23">.</op:operator><name pos:line="7" pos:column="24">TestDoubles</name></name>;</using>

<using pos:line="9" pos:column="1">using <name pos:line="9" pos:column="7">Moq</name>;</using>
<using pos:line="10" pos:column="1">using <name pos:line="10" pos:column="7">Xunit</name>;</using>
<using pos:line="11" pos:column="1">using <name><name pos:line="11" pos:column="7">Xunit</name><op:operator pos:line="11" pos:column="12">.</op:operator><name pos:line="11" pos:column="13">Extensions</name></name>;</using>

<namespace pos:line="13" pos:column="1">namespace <name><name pos:line="13" pos:column="11">Glimpse</name><op:operator pos:line="13" pos:column="18">.</op:operator><name pos:line="13" pos:column="19">Test</name><op:operator pos:line="13" pos:column="23">.</op:operator><name pos:line="13" pos:column="24">Mvc</name><op:operator pos:line="13" pos:column="27">.</op:operator><name pos:line="13" pos:column="28">AlternateType</name></name>
<block pos:line="14" pos:column="1">{
    <class><specifier pos:line="15" pos:column="5">public</specifier> class <name pos:line="15" pos:column="18">AsyncActionInvokerEndInvokeActionMethodShould</name>
    <block pos:line="16" pos:column="5">{
        <function><type><attribute pos:line="17" pos:column="9">[<expr><name pos:line="17" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="18" pos:column="9">public</specifier> <name pos:line="18" pos:column="16">void</name></type> <name pos:line="18" pos:column="21">ImplementProperMethod</name><parameter_list pos:line="18" pos:column="42">()</parameter_list>
        <block pos:line="19" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="20" pos:column="13">var</name></type> <name pos:line="20" pos:column="17">sut</name> <init pos:line="20" pos:column="21">= <expr><op:operator pos:line="20" pos:column="23">new</op:operator> <call><name><name pos:line="20" pos:column="27">AsyncActionInvoker</name><op:operator pos:line="20" pos:column="45">.</op:operator><name pos:line="20" pos:column="46">EndInvokeActionMethod</name></name><argument_list pos:line="20" pos:column="67">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="22" pos:column="13">Assert</name><op:operator pos:line="22" pos:column="19">.</op:operator><name pos:line="22" pos:column="20">Equal</name></name><argument_list pos:line="22" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="22" pos:column="26">"EndInvokeActionMethod"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="51">sut</name><op:operator pos:line="22" pos:column="54">.</op:operator><name pos:line="22" pos:column="55">MethodToImplement</name><op:operator pos:line="22" pos:column="72">.</op:operator><name pos:line="22" pos:column="73">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="25" pos:column="9">[<expr><name pos:line="25" pos:column="10">Theory</name></expr><op:operator pos:line="25" pos:column="16">,</op:operator> <expr><name pos:line="25" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="26" pos:column="9">public</specifier> <name pos:line="26" pos:column="16">void</name></type> <name pos:line="26" pos:column="21">ProceedThenReturnWithRuntimePolicyOff</name><parameter_list pos:line="26" pos:column="58">(<param><decl><type><name><name pos:line="26" pos:column="59">AsyncActionInvoker</name><op:operator pos:line="26" pos:column="77">.</op:operator><name pos:line="26" pos:column="78">EndInvokeActionMethod</name></name></type> <name pos:line="26" pos:column="100">sut</name></decl></param>, <param><decl><type><name pos:line="26" pos:column="105">IAlternateMethodContext</name></type> <name pos:line="26" pos:column="129">context</name></decl></param>)</parameter_list>
        <block pos:line="27" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="28" pos:column="13">context</name><op:operator pos:line="28" pos:column="20">.</op:operator><name pos:line="28" pos:column="21">Setup</name></name><argument_list pos:line="28" pos:column="26">(<argument><expr><lambda><name pos:line="28" pos:column="27">c</name> <op:operator pos:line="28" pos:column="29">=&gt;</op:operator> <name><name pos:line="28" pos:column="32">c</name><op:operator pos:line="28" pos:column="33">.</op:operator><name pos:line="28" pos:column="34">RuntimePolicyStrategy</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="28" pos:column="56">.</op:operator><call><name pos:line="28" pos:column="57">Returns</name><argument_list pos:line="28" pos:column="64">(<argument><expr><lambda><parameter_list pos:line="28" pos:column="65">()</parameter_list> <op:operator pos:line="28" pos:column="68">=&gt;</op:operator> <name><name pos:line="28" pos:column="71">RuntimePolicy</name><op:operator pos:line="28" pos:column="84">.</op:operator><name pos:line="28" pos:column="85">Off</name></name></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="30" pos:column="13">sut</name><op:operator pos:line="30" pos:column="16">.</op:operator><name pos:line="30" pos:column="17">NewImplementation</name></name><argument_list pos:line="30" pos:column="34">(<argument><expr><name pos:line="30" pos:column="35">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="32" pos:column="13">context</name><op:operator pos:line="32" pos:column="20">.</op:operator><name pos:line="32" pos:column="21">Verify</name></name><argument_list pos:line="32" pos:column="27">(<argument><expr><lambda><name pos:line="32" pos:column="28">c</name> <op:operator pos:line="32" pos:column="30">=&gt;</op:operator> <call><name><name pos:line="32" pos:column="33">c</name><op:operator pos:line="32" pos:column="34">.</op:operator><name pos:line="32" pos:column="35">Proceed</name></name><argument_list pos:line="32" pos:column="42">()</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="33" pos:column="13">context</name><op:operator pos:line="33" pos:column="20">.</op:operator><name pos:line="33" pos:column="21">Verify</name></name><argument_list pos:line="33" pos:column="27">(<argument><expr><lambda><name pos:line="33" pos:column="28">c</name> <op:operator pos:line="33" pos:column="30">=&gt;</op:operator> <name><name pos:line="33" pos:column="33">c</name><op:operator pos:line="33" pos:column="34">.</op:operator><name pos:line="33" pos:column="35">Proxy</name></name></lambda></expr></argument>, <argument><expr><call><name><name pos:line="33" pos:column="42">Times</name><op:operator pos:line="33" pos:column="47">.</op:operator><name pos:line="33" pos:column="48">Never</name></name><argument_list pos:line="33" pos:column="53">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="36" pos:column="9">[<expr><name pos:line="36" pos:column="10">Theory</name></expr><op:operator pos:line="36" pos:column="16">,</op:operator> <expr><name pos:line="36" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="37" pos:column="9">public</specifier> <name pos:line="37" pos:column="16">void</name></type> <name pos:line="37" pos:column="21">PublishMessageWithRuntimePolicyOn</name><parameter_list pos:line="37" pos:column="54">(<param><decl><type><name><name pos:line="37" pos:column="55">AsyncActionInvoker</name><op:operator pos:line="37" pos:column="73">.</op:operator><name pos:line="37" pos:column="74">EndInvokeActionMethod</name></name></type> <name pos:line="37" pos:column="96">sut</name></decl></param>, <param><decl><type><name pos:line="37" pos:column="101">IAlternateMethodContext</name></type> <name pos:line="37" pos:column="125">context</name></decl></param>, <param><decl><type><name pos:line="37" pos:column="134">ActionDescriptor</name></type> <name pos:line="37" pos:column="151">actionDescriptor</name></decl></param>)</parameter_list>
        <block pos:line="38" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="39" pos:column="13">var</name></type> <name pos:line="39" pos:column="17">actionDescriptorMock</name> <init pos:line="39" pos:column="38">= <expr><op:operator pos:line="39" pos:column="40">new</op:operator> <call><name><name pos:line="39" pos:column="44">Mock</name><argument_list pos:line="39" pos:column="48">&lt;<argument><name pos:line="39" pos:column="49">ActionDescriptor</name></argument>&gt;</argument_list></name><argument_list pos:line="39" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="40" pos:column="13">actionDescriptorMock</name><op:operator pos:line="40" pos:column="33">.</op:operator><name pos:line="40" pos:column="34">Setup</name></name><argument_list pos:line="40" pos:column="39">(<argument><expr><lambda><name pos:line="40" pos:column="40">a</name> <op:operator pos:line="40" pos:column="42">=&gt;</op:operator> <name><name pos:line="40" pos:column="45">a</name><op:operator pos:line="40" pos:column="46">.</op:operator><name pos:line="40" pos:column="47">ControllerDescriptor</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="40" pos:column="68">.</op:operator><call><name pos:line="40" pos:column="69">Returns</name><argument_list pos:line="40" pos:column="76">(<argument><expr><op:operator pos:line="40" pos:column="77">new</op:operator> <call><name pos:line="40" pos:column="81">ReflectedControllerDescriptor</name><argument_list pos:line="40" pos:column="110">(<argument><expr><call><name pos:line="40" pos:column="111">typeof</name><argument_list pos:line="40" pos:column="117">(<argument><expr><name pos:line="40" pos:column="118">DummyController</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="41" pos:column="13">actionDescriptorMock</name><op:operator pos:line="41" pos:column="33">.</op:operator><name pos:line="41" pos:column="34">Setup</name></name><argument_list pos:line="41" pos:column="39">(<argument><expr><lambda><name pos:line="41" pos:column="40">a</name> <op:operator pos:line="41" pos:column="42">=&gt;</op:operator> <name><name pos:line="41" pos:column="45">a</name><op:operator pos:line="41" pos:column="46">.</op:operator><name pos:line="41" pos:column="47">ActionName</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="41" pos:column="58">.</op:operator><call><name pos:line="41" pos:column="59">Returns</name><argument_list pos:line="41" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="41" pos:column="67">"Index"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="43" pos:column="13">context</name><op:operator pos:line="43" pos:column="20">.</op:operator><name pos:line="43" pos:column="21">Setup</name></name><argument_list pos:line="43" pos:column="26">(<argument><expr><lambda><name pos:line="43" pos:column="27">c</name> <op:operator pos:line="43" pos:column="29">=&gt;</op:operator> <name><name pos:line="43" pos:column="32">c</name><op:operator pos:line="43" pos:column="33">.</op:operator><name pos:line="43" pos:column="34">ReturnValue</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="43" pos:column="46">.</op:operator><call><name pos:line="43" pos:column="47">Returns</name><argument_list pos:line="43" pos:column="54">(<argument><expr><op:operator pos:line="43" pos:column="55">new</op:operator> <call><name pos:line="43" pos:column="59">ContentResult</name><argument_list pos:line="43" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="44" pos:column="13">context</name><op:operator pos:line="44" pos:column="20">.</op:operator><name pos:line="44" pos:column="21">Setup</name></name><argument_list pos:line="44" pos:column="26">(<argument><expr><lambda><name pos:line="44" pos:column="27">c</name> <op:operator pos:line="44" pos:column="29">=&gt;</op:operator> <name><name pos:line="44" pos:column="32">c</name><op:operator pos:line="44" pos:column="33">.</op:operator><name pos:line="44" pos:column="34">Proxy</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="44" pos:column="40">.</op:operator><call><name pos:line="44" pos:column="41">Returns</name><argument_list pos:line="44" pos:column="48">(
                <argument><expr><op:operator pos:line="45" pos:column="17">new</op:operator> <name pos:line="45" pos:column="21">ActionInvokerStateMixin</name>
                <block pos:line="46" pos:column="17">{
                    <expr><name pos:line="47" pos:column="21">Offset</name> <op:operator pos:line="47" pos:column="28">=</op:operator> <name><name pos:line="47" pos:column="30">TimeSpan</name><op:operator pos:line="47" pos:column="38">.</op:operator><name pos:line="47" pos:column="39">Zero</name></name></expr><op:operator pos:line="47" pos:column="43">,</op:operator> 
                    <expr><name pos:line="48" pos:column="21">Arguments</name> <op:operator pos:line="48" pos:column="31">=</op:operator> <op:operator pos:line="48" pos:column="33">new</op:operator> <call><name><name pos:line="48" pos:column="37">ActionInvoker</name><op:operator pos:line="48" pos:column="50">.</op:operator><name pos:line="48" pos:column="51">InvokeActionMethod</name><op:operator pos:line="48" pos:column="69">.</op:operator><name pos:line="48" pos:column="70">Arguments</name></name><argument_list pos:line="48" pos:column="79">(<argument><expr><op:operator pos:line="48" pos:column="80">new</op:operator> <call><name pos:line="48" pos:column="84">ControllerContext</name><argument_list pos:line="48" pos:column="101">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="48" pos:column="105">actionDescriptor</name></expr></argument>, <argument><expr><op:operator pos:line="48" pos:column="123">new</op:operator> <call><name><name pos:line="48" pos:column="127">Dictionary</name><argument_list pos:line="48" pos:column="137">&lt;<argument><name pos:line="48" pos:column="138">string</name></argument>, <argument><name pos:line="48" pos:column="146">object</name></argument>&gt;</argument_list></name><argument_list pos:line="48" pos:column="153">()</argument_list></call></expr></argument>)</argument_list></call></expr>
                }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="50" pos:column="13">context</name><op:operator pos:line="50" pos:column="20">.</op:operator><name pos:line="50" pos:column="21">Setup</name></name><argument_list pos:line="50" pos:column="26">(<argument><expr><lambda><name pos:line="50" pos:column="27">c</name> <op:operator pos:line="50" pos:column="29">=&gt;</op:operator> <name><name pos:line="50" pos:column="32">c</name><op:operator pos:line="50" pos:column="33">.</op:operator><name pos:line="50" pos:column="34">Arguments</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="50" pos:column="44">.</op:operator><call><name pos:line="50" pos:column="45">Returns</name><argument_list pos:line="50" pos:column="52">(<argument><expr><op:operator pos:line="50" pos:column="53">new</op:operator> <name><name pos:line="50" pos:column="57">object</name><index pos:line="50" pos:column="63">[]</index></name>
                                                            <block pos:line="51" pos:column="61">{
                                                                <expr><op:operator pos:line="52" pos:column="65">new</op:operator> <call><name pos:line="52" pos:column="69">ControllerContext</name><argument_list pos:line="52" pos:column="86">()</argument_list></call></expr><op:operator pos:line="52" pos:column="88">,</op:operator>
                                                                <expr><name><name pos:line="53" pos:column="65">actionDescriptorMock</name><op:operator pos:line="53" pos:column="85">.</op:operator><name pos:line="53" pos:column="86">Object</name></name></expr><op:operator pos:line="53" pos:column="92">,</op:operator>
                                                                <expr><op:operator pos:line="54" pos:column="65">new</op:operator> <call><name><name pos:line="54" pos:column="69">Dictionary</name><argument_list pos:line="54" pos:column="79">&lt;<argument><name pos:line="54" pos:column="80">string</name></argument>, <argument><name pos:line="54" pos:column="88">object</name></argument>&gt;</argument_list></name><argument_list pos:line="54" pos:column="95">()</argument_list></call></expr>
                                                            }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="57" pos:column="13">sut</name><op:operator pos:line="57" pos:column="16">.</op:operator><name pos:line="57" pos:column="17">NewImplementation</name></name><argument_list pos:line="57" pos:column="34">(<argument><expr><name pos:line="57" pos:column="35">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="59" pos:column="13">context</name><op:operator pos:line="59" pos:column="20">.</op:operator><name pos:line="59" pos:column="21">Verify</name></name><argument_list pos:line="59" pos:column="27">(<argument><expr><lambda><name pos:line="59" pos:column="28">c</name> <op:operator pos:line="59" pos:column="30">=&gt;</op:operator> <call><name><name pos:line="59" pos:column="33">c</name><op:operator pos:line="59" pos:column="34">.</op:operator><name pos:line="59" pos:column="35">Proceed</name></name><argument_list pos:line="59" pos:column="42">()</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="60" pos:column="13">context</name><op:operator pos:line="60" pos:column="20">.</op:operator><name pos:line="60" pos:column="21">MessageBroker</name><op:operator pos:line="60" pos:column="34">.</op:operator><name pos:line="60" pos:column="35">Verify</name></name><argument_list pos:line="60" pos:column="41">(<argument><expr><lambda><name pos:line="60" pos:column="42">b</name> <op:operator pos:line="60" pos:column="44">=&gt;</op:operator> <call><name><name pos:line="60" pos:column="47">b</name><op:operator pos:line="60" pos:column="48">.</op:operator><name pos:line="60" pos:column="49">Publish</name></name><argument_list pos:line="60" pos:column="56">(<argument><expr><call><name><name pos:line="60" pos:column="57">It</name><op:operator pos:line="60" pos:column="59">.</op:operator><name><name pos:line="60" pos:column="60">IsAny</name><argument_list pos:line="60" pos:column="65">&lt;<argument><name><name pos:line="60" pos:column="66">ActionInvoker</name><op:operator pos:line="60" pos:column="79">.</op:operator><name pos:line="60" pos:column="80">InvokeActionMethod</name><op:operator pos:line="60" pos:column="98">.</op:operator><name pos:line="60" pos:column="99">Message</name></name></argument>&gt;</argument_list></name></name><argument_list pos:line="60" pos:column="107">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
