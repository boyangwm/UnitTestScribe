<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Core\Extensibility\ExceptionResourceResultShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">Glimpse</name><op:operator pos:line="1" pos:column="14">.</op:operator><name pos:line="1" pos:column="15">Core</name><op:operator pos:line="1" pos:column="19">.</op:operator><name pos:line="1" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">Glimpse</name><op:operator pos:line="2" pos:column="14">.</op:operator><name pos:line="2" pos:column="15">Core</name><op:operator pos:line="2" pos:column="19">.</op:operator><name pos:line="2" pos:column="20">Framework</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Glimpse</name><op:operator pos:line="3" pos:column="14">.</op:operator><name pos:line="3" pos:column="15">Core</name><op:operator pos:line="3" pos:column="19">.</op:operator><name pos:line="3" pos:column="20">ResourceResult</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Test</name><op:operator pos:line="4" pos:column="19">.</op:operator><name pos:line="4" pos:column="20">Core</name><op:operator pos:line="4" pos:column="24">.</op:operator><name pos:line="4" pos:column="25">TestDoubles</name></name>;</using>
<using pos:line="5" pos:column="1">using <name pos:line="5" pos:column="7">Moq</name>;</using>
<using pos:line="6" pos:column="1">using <name pos:line="6" pos:column="7">Xunit</name>;</using>

<namespace pos:line="8" pos:column="1">namespace <name><name pos:line="8" pos:column="11">Glimpse</name><op:operator pos:line="8" pos:column="18">.</op:operator><name pos:line="8" pos:column="19">Test</name><op:operator pos:line="8" pos:column="23">.</op:operator><name pos:line="8" pos:column="24">Core</name><op:operator pos:line="8" pos:column="28">.</op:operator><name pos:line="8" pos:column="29">Extensibility</name></name>
<block pos:line="9" pos:column="1">{
    <class><specifier pos:line="10" pos:column="5">public</specifier> class <name pos:line="10" pos:column="18">ExceptionResourceResultShould</name>
    <block pos:line="11" pos:column="5">{
        <function><type><attribute pos:line="12" pos:column="9">[<expr><name pos:line="12" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="13" pos:column="9">public</specifier> <name pos:line="13" pos:column="16">void</name></type> <name pos:line="13" pos:column="21">Construct</name><parameter_list pos:line="13" pos:column="30">()</parameter_list>
        <block pos:line="14" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="15" pos:column="13">var</name></type> <name pos:line="15" pos:column="17">exception</name> <init pos:line="15" pos:column="27">= <expr><op:operator pos:line="15" pos:column="29">new</op:operator> <call><name pos:line="15" pos:column="33">DummyException</name><argument_list pos:line="15" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="15" pos:column="48">"This is a dummy"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="17" pos:column="13">var</name></type> <name pos:line="17" pos:column="17">resourceResult</name> <init pos:line="17" pos:column="32">= <expr><op:operator pos:line="17" pos:column="34">new</op:operator> <call><name pos:line="17" pos:column="38">ExceptionResourceResult</name><argument_list pos:line="17" pos:column="61">(<argument><expr><name pos:line="17" pos:column="62">exception</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="19" pos:column="13">Assert</name><op:operator pos:line="19" pos:column="19">.</op:operator><name pos:line="19" pos:column="20">Equal</name></name><argument_list pos:line="19" pos:column="25">(<argument><expr><call><name><name pos:line="19" pos:column="26">exception</name><op:operator pos:line="19" pos:column="35">.</op:operator><name pos:line="19" pos:column="36">ToString</name></name><argument_list pos:line="19" pos:column="44">()</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="48">resourceResult</name><op:operator pos:line="19" pos:column="62">.</op:operator><name pos:line="19" pos:column="63">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="22" pos:column="9">[<expr><name pos:line="22" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="23" pos:column="9">public</specifier> <name pos:line="23" pos:column="16">void</name></type> <name pos:line="23" pos:column="21">Execute</name><parameter_list pos:line="23" pos:column="28">()</parameter_list>
        <block pos:line="24" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="25" pos:column="13">var</name></type> <name pos:line="25" pos:column="17">providerMock</name> <init pos:line="25" pos:column="30">= <expr><op:operator pos:line="25" pos:column="32">new</op:operator> <call><name><name pos:line="25" pos:column="36">Mock</name><argument_list pos:line="25" pos:column="40">&lt;<argument><name pos:line="25" pos:column="41">IFrameworkProvider</name></argument>&gt;</argument_list></name><argument_list pos:line="25" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="26" pos:column="13">var</name></type> <name pos:line="26" pos:column="17">contextMock</name> <init pos:line="26" pos:column="29">= <expr><op:operator pos:line="26" pos:column="31">new</op:operator> <call><name><name pos:line="26" pos:column="35">Mock</name><argument_list pos:line="26" pos:column="39">&lt;<argument><name pos:line="26" pos:column="40">IResourceResultContext</name></argument>&gt;</argument_list></name><argument_list pos:line="26" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="27" pos:column="13">contextMock</name><op:operator pos:line="27" pos:column="24">.</op:operator><name pos:line="27" pos:column="25">Setup</name></name><argument_list pos:line="27" pos:column="30">(<argument><expr><lambda><name pos:line="27" pos:column="31">c</name> <op:operator pos:line="27" pos:column="33">=&gt;</op:operator> <name><name pos:line="27" pos:column="36">c</name><op:operator pos:line="27" pos:column="37">.</op:operator><name pos:line="27" pos:column="38">FrameworkProvider</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="27" pos:column="56">.</op:operator><call><name pos:line="27" pos:column="57">Returns</name><argument_list pos:line="27" pos:column="64">(<argument><expr><name><name pos:line="27" pos:column="65">providerMock</name><op:operator pos:line="27" pos:column="77">.</op:operator><name pos:line="27" pos:column="78">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="29" pos:column="13">var</name></type> <name pos:line="29" pos:column="17">exception</name> <init pos:line="29" pos:column="27">= <expr><op:operator pos:line="29" pos:column="29">new</op:operator> <call><name pos:line="29" pos:column="33">DummyException</name><argument_list pos:line="29" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="29" pos:column="48">"This is a dummy"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="31" pos:column="13">var</name></type> <name pos:line="31" pos:column="17">resourceResult</name> <init pos:line="31" pos:column="32">= <expr><op:operator pos:line="31" pos:column="34">new</op:operator> <call><name pos:line="31" pos:column="38">ExceptionResourceResult</name><argument_list pos:line="31" pos:column="61">(<argument><expr><name pos:line="31" pos:column="62">exception</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="33" pos:column="13">resourceResult</name><op:operator pos:line="33" pos:column="27">.</op:operator><name pos:line="33" pos:column="28">Execute</name></name><argument_list pos:line="33" pos:column="35">(<argument><expr><name><name pos:line="33" pos:column="36">contextMock</name><op:operator pos:line="33" pos:column="47">.</op:operator><name pos:line="33" pos:column="48">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="35" pos:column="13">providerMock</name><op:operator pos:line="35" pos:column="25">.</op:operator><name pos:line="35" pos:column="26">Verify</name></name><argument_list pos:line="35" pos:column="32">(<argument><expr><lambda><name pos:line="35" pos:column="33">p</name><op:operator pos:line="35" pos:column="34">=&gt;</op:operator><call><name><name pos:line="35" pos:column="36">p</name><op:operator pos:line="35" pos:column="37">.</op:operator><name pos:line="35" pos:column="38">WriteHttpResponse</name></name><argument_list pos:line="35" pos:column="55">(<argument><expr><call><name><name pos:line="35" pos:column="56">exception</name><op:operator pos:line="35" pos:column="65">.</op:operator><name pos:line="35" pos:column="66">ToString</name></name><argument_list pos:line="35" pos:column="74">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="36" pos:column="13">providerMock</name><op:operator pos:line="36" pos:column="25">.</op:operator><name pos:line="36" pos:column="26">Verify</name></name><argument_list pos:line="36" pos:column="32">(<argument><expr><lambda><name pos:line="36" pos:column="33">p</name><op:operator pos:line="36" pos:column="34">=&gt;</op:operator><call><name><name pos:line="36" pos:column="36">p</name><op:operator pos:line="36" pos:column="37">.</op:operator><name pos:line="36" pos:column="38">SetHttpResponseStatusCode</name></name><argument_list pos:line="36" pos:column="63">(<argument><expr><lit:literal type="number" pos:line="36" pos:column="64">500</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
