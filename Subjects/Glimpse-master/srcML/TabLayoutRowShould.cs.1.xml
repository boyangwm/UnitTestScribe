<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Core\Plugin\Assist\TabLayoutRowShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">System</name><op:operator pos:line="1" pos:column="13">.</op:operator><name pos:line="1" pos:column="14">Collections</name><op:operator pos:line="1" pos:column="25">.</op:operator><name pos:line="1" pos:column="26">Generic</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Linq</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Glimpse</name><op:operator pos:line="3" pos:column="14">.</op:operator><name pos:line="3" pos:column="15">Core</name><op:operator pos:line="3" pos:column="19">.</op:operator><name pos:line="3" pos:column="20">Tab</name><op:operator pos:line="3" pos:column="23">.</op:operator><name pos:line="3" pos:column="24">Assist</name></name>;</using>
<using pos:line="4" pos:column="1">using <name pos:line="4" pos:column="7">Xunit</name>;</using>

<namespace pos:line="6" pos:column="1">namespace <name><name pos:line="6" pos:column="11">Glimpse</name><op:operator pos:line="6" pos:column="18">.</op:operator><name pos:line="6" pos:column="19">Test</name><op:operator pos:line="6" pos:column="23">.</op:operator><name pos:line="6" pos:column="24">Core</name><op:operator pos:line="6" pos:column="28">.</op:operator><name pos:line="6" pos:column="29">Plugin</name><op:operator pos:line="6" pos:column="35">.</op:operator><name pos:line="6" pos:column="36">Assist</name></name>
<block pos:line="7" pos:column="1">{
	<class><specifier pos:line="8" pos:column="9">public</specifier> class <name pos:line="8" pos:column="22">TabLayoutRowShould</name>
	<block pos:line="9" pos:column="9">{
		<function><type><attribute pos:line="10" pos:column="17">[<expr><name pos:line="10" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="11" pos:column="17">public</specifier> <name pos:line="11" pos:column="24">void</name></type> <name pos:line="11" pos:column="29">ConstructWithNoCells</name><parameter_list pos:line="11" pos:column="49">()</parameter_list>
		<block pos:line="12" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="13" pos:column="25">var</name></type> <name pos:line="13" pos:column="29">row</name> <init pos:line="13" pos:column="33">= <expr><op:operator pos:line="13" pos:column="35">new</op:operator> <call><name pos:line="13" pos:column="39">TabLayoutRow</name><argument_list pos:line="13" pos:column="51">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="15" pos:column="13">var</name></type> <name pos:line="15" pos:column="17">cells</name> <init pos:line="15" pos:column="23">= <expr><call><name><name pos:line="15" pos:column="25">row</name><op:operator pos:line="15" pos:column="28">.</op:operator><name pos:line="15" pos:column="29">Build</name></name><argument_list pos:line="15" pos:column="34">()</argument_list></call> <op:operator pos:line="15" pos:column="37">as</op:operator> <name><name pos:line="15" pos:column="40">IEnumerable</name><argument_list pos:line="15" pos:column="51">&lt;<argument><name pos:line="15" pos:column="52">object</name></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name><name pos:line="17" pos:column="25">Assert</name><op:operator pos:line="17" pos:column="31">.</op:operator><name pos:line="17" pos:column="32">Equal</name></name><argument_list pos:line="17" pos:column="37">(<argument><expr><lit:literal type="number" pos:line="17" pos:column="38">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="17" pos:column="41">cells</name><op:operator pos:line="17" pos:column="46">.</op:operator><name pos:line="17" pos:column="47">Count</name></name><argument_list pos:line="17" pos:column="52">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="20" pos:column="17">[<expr><name pos:line="20" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="21" pos:column="17">public</specifier> <name pos:line="21" pos:column="24">void</name></type> <name pos:line="21" pos:column="29">AddSingleCell</name><parameter_list pos:line="21" pos:column="42">()</parameter_list>
		<block pos:line="22" pos:column="17">{
			<decl_stmt><decl><type><specifier pos:line="23" pos:column="25">const</specifier> <name pos:line="23" pos:column="31">int</name></type> <name pos:line="23" pos:column="35">expectedCellId</name> <init pos:line="23" pos:column="50">= <expr><lit:literal type="number" pos:line="23" pos:column="52">1</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="24" pos:column="25">var</name></type> <name pos:line="24" pos:column="29">row</name> <init pos:line="24" pos:column="33">= <expr><op:operator pos:line="24" pos:column="35">new</op:operator> <call><name pos:line="24" pos:column="39">TabLayoutRow</name><argument_list pos:line="24" pos:column="51">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="25" pos:column="25">var</name></type> <name pos:line="25" pos:column="29">cell</name> <init pos:line="25" pos:column="34">= <expr><call><name><name pos:line="25" pos:column="36">row</name><op:operator pos:line="25" pos:column="39">.</op:operator><name pos:line="25" pos:column="40">Cell</name></name><argument_list pos:line="25" pos:column="44">(<argument><expr><name pos:line="25" pos:column="45">expectedCellId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="27" pos:column="13">var</name></type> <name pos:line="27" pos:column="17">cells</name> <init pos:line="27" pos:column="23">= <expr><call><name><name pos:line="27" pos:column="25">row</name><op:operator pos:line="27" pos:column="28">.</op:operator><name pos:line="27" pos:column="29">Build</name></name><argument_list pos:line="27" pos:column="34">()</argument_list></call> <op:operator pos:line="27" pos:column="37">as</op:operator> <name><name pos:line="27" pos:column="40">IEnumerable</name><argument_list pos:line="27" pos:column="51">&lt;<argument><name pos:line="27" pos:column="52">object</name></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name><name pos:line="29" pos:column="25">Assert</name><op:operator pos:line="29" pos:column="31">.</op:operator><name pos:line="29" pos:column="32">Equal</name></name><argument_list pos:line="29" pos:column="37">(<argument><expr><lit:literal type="number" pos:line="29" pos:column="38">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="29" pos:column="41">cells</name><op:operator pos:line="29" pos:column="46">.</op:operator><name pos:line="29" pos:column="47">Count</name></name><argument_list pos:line="29" pos:column="52">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="30" pos:column="25">Assert</name><op:operator pos:line="30" pos:column="31">.</op:operator><name pos:line="30" pos:column="32">Equal</name></name><argument_list pos:line="30" pos:column="37">(<argument><expr><name pos:line="30" pos:column="38">cell</name></expr></argument>, <argument><expr><call><name><name pos:line="30" pos:column="44">cells</name><op:operator pos:line="30" pos:column="49">.</op:operator><name pos:line="30" pos:column="50">First</name></name><argument_list pos:line="30" pos:column="55">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="31" pos:column="25">Assert</name><op:operator pos:line="31" pos:column="31">.</op:operator><name pos:line="31" pos:column="32">Equal</name></name><argument_list pos:line="31" pos:column="37">(<argument><expr><name><name pos:line="31" pos:column="38">cell</name><op:operator pos:line="31" pos:column="42">.</op:operator><name pos:line="31" pos:column="43">Data</name></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="49">expectedCellId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="34" pos:column="17">[<expr><name pos:line="34" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="35" pos:column="17">public</specifier> <name pos:line="35" pos:column="24">void</name></type> <name pos:line="35" pos:column="29">AddTwoCells</name><parameter_list pos:line="35" pos:column="40">()</parameter_list>
		<block pos:line="36" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="37" pos:column="25">var</name></type> <name pos:line="37" pos:column="29">row</name> <init pos:line="37" pos:column="33">= <expr><op:operator pos:line="37" pos:column="35">new</op:operator> <call><name pos:line="37" pos:column="39">TabLayoutRow</name><argument_list pos:line="37" pos:column="51">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="38" pos:column="25">var</name></type> <name pos:line="38" pos:column="29">cell1</name> <init pos:line="38" pos:column="35">= <expr><call><name><name pos:line="38" pos:column="37">row</name><op:operator pos:line="38" pos:column="40">.</op:operator><name pos:line="38" pos:column="41">Cell</name></name><argument_list pos:line="38" pos:column="45">(<argument><expr><lit:literal type="number" pos:line="38" pos:column="46">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="39" pos:column="25">var</name></type> <name pos:line="39" pos:column="29">cell2</name> <init pos:line="39" pos:column="35">= <expr><call><name><name pos:line="39" pos:column="37">row</name><op:operator pos:line="39" pos:column="40">.</op:operator><name pos:line="39" pos:column="41">Cell</name></name><argument_list pos:line="39" pos:column="45">(<argument><expr><lit:literal type="number" pos:line="39" pos:column="46">2</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="41" pos:column="13">var</name></type> <name pos:line="41" pos:column="17">cells</name> <init pos:line="41" pos:column="23">= <expr><call><name><name pos:line="41" pos:column="25">row</name><op:operator pos:line="41" pos:column="28">.</op:operator><name pos:line="41" pos:column="29">Build</name></name><argument_list pos:line="41" pos:column="34">()</argument_list></call> <op:operator pos:line="41" pos:column="37">as</op:operator> <name><name pos:line="41" pos:column="40">IEnumerable</name><argument_list pos:line="41" pos:column="51">&lt;<argument><name pos:line="41" pos:column="52">object</name></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name><name pos:line="43" pos:column="25">Assert</name><op:operator pos:line="43" pos:column="31">.</op:operator><name pos:line="43" pos:column="32">Equal</name></name><argument_list pos:line="43" pos:column="37">(<argument><expr><lit:literal type="number" pos:line="43" pos:column="38">2</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="43" pos:column="41">cells</name><op:operator pos:line="43" pos:column="46">.</op:operator><name pos:line="43" pos:column="47">Count</name></name><argument_list pos:line="43" pos:column="52">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="44" pos:column="25">Assert</name><op:operator pos:line="44" pos:column="31">.</op:operator><name pos:line="44" pos:column="32">Equal</name></name><argument_list pos:line="44" pos:column="37">(<argument><expr><name pos:line="44" pos:column="38">cell1</name></expr></argument>, <argument><expr><call><name><name pos:line="44" pos:column="45">cells</name><op:operator pos:line="44" pos:column="50">.</op:operator><name pos:line="44" pos:column="51">First</name></name><argument_list pos:line="44" pos:column="56">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="45" pos:column="25">Assert</name><op:operator pos:line="45" pos:column="31">.</op:operator><name pos:line="45" pos:column="32">Equal</name></name><argument_list pos:line="45" pos:column="37">(<argument><expr><name pos:line="45" pos:column="38">cell2</name></expr></argument>, <argument><expr><call><name><name pos:line="45" pos:column="45">cells</name><op:operator pos:line="45" pos:column="50">.</op:operator><name pos:line="45" pos:column="51">Last</name></name><argument_list pos:line="45" pos:column="55">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="48" pos:column="17">[<expr><name pos:line="48" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="49" pos:column="17">public</specifier> <name pos:line="49" pos:column="24">void</name></type> <name pos:line="49" pos:column="29">ReturnObjectArrayOfColumnData</name><parameter_list pos:line="49" pos:column="58">()</parameter_list>
		<block pos:line="50" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="51" pos:column="25">var</name></type> <name pos:line="51" pos:column="29">row</name> <init pos:line="51" pos:column="33">= <expr><op:operator pos:line="51" pos:column="35">new</op:operator> <call><name pos:line="51" pos:column="39">TabLayoutRow</name><argument_list pos:line="51" pos:column="51">()</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name><name pos:line="53" pos:column="25">row</name><op:operator pos:line="53" pos:column="28">.</op:operator><name pos:line="53" pos:column="29">Cell</name></name><argument_list pos:line="53" pos:column="33">(<argument><expr><lit:literal type="number" pos:line="53" pos:column="34">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="54" pos:column="25">row</name><op:operator pos:line="54" pos:column="28">.</op:operator><name pos:line="54" pos:column="29">Cell</name></name><argument_list pos:line="54" pos:column="33">(<argument><expr><lit:literal type="number" pos:line="54" pos:column="34">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="55" pos:column="25">row</name><op:operator pos:line="55" pos:column="28">.</op:operator><name pos:line="55" pos:column="29">Cell</name></name><argument_list pos:line="55" pos:column="33">(<argument><expr><lit:literal type="number" pos:line="55" pos:column="34">3</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="57" pos:column="13">var</name></type> <name pos:line="57" pos:column="17">cells</name> <init pos:line="57" pos:column="23">= <expr><call><name><name pos:line="57" pos:column="25">row</name><op:operator pos:line="57" pos:column="28">.</op:operator><name pos:line="57" pos:column="29">Build</name></name><argument_list pos:line="57" pos:column="34">()</argument_list></call> <op:operator pos:line="57" pos:column="37">as</op:operator> <name><name pos:line="57" pos:column="40">IEnumerable</name><argument_list pos:line="57" pos:column="51">&lt;<argument><name pos:line="57" pos:column="52">object</name></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name><name pos:line="59" pos:column="25">Assert</name><op:operator pos:line="59" pos:column="31">.</op:operator><name pos:line="59" pos:column="32">Equal</name></name><argument_list pos:line="59" pos:column="37">(<argument><expr><lit:literal type="number" pos:line="59" pos:column="38">3</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="59" pos:column="41">cells</name><op:operator pos:line="59" pos:column="46">.</op:operator><name pos:line="59" pos:column="47">Count</name></name><argument_list pos:line="59" pos:column="52">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="60" pos:column="25">Assert</name><op:operator pos:line="60" pos:column="31">.</op:operator><name pos:line="60" pos:column="32">Equal</name></name><argument_list pos:line="60" pos:column="37">(<argument><expr><lit:literal type="number" pos:line="60" pos:column="38">1</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="60" pos:column="41">(</op:operator><op:operator pos:line="60" pos:column="42">(</op:operator><name pos:line="60" pos:column="43">TabLayoutCell</name><op:operator pos:line="60" pos:column="56">)</op:operator><call><name><name pos:line="60" pos:column="57">cells</name><op:operator pos:line="60" pos:column="62">.</op:operator><name pos:line="60" pos:column="63">ElementAt</name></name><argument_list pos:line="60" pos:column="72">(<argument><expr><lit:literal type="number" pos:line="60" pos:column="73">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="60" pos:column="75">)</op:operator><op:operator pos:line="60" pos:column="76">.</op:operator><name pos:line="60" pos:column="77">Data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="61" pos:column="13">Assert</name><op:operator pos:line="61" pos:column="19">.</op:operator><name pos:line="61" pos:column="20">Equal</name></name><argument_list pos:line="61" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="61" pos:column="26">2</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="61" pos:column="29">(</op:operator><op:operator pos:line="61" pos:column="30">(</op:operator><name pos:line="61" pos:column="31">TabLayoutCell</name><op:operator pos:line="61" pos:column="44">)</op:operator><call><name><name pos:line="61" pos:column="45">cells</name><op:operator pos:line="61" pos:column="50">.</op:operator><name pos:line="61" pos:column="51">ElementAt</name></name><argument_list pos:line="61" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="61" pos:column="61">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="61" pos:column="63">)</op:operator><op:operator pos:line="61" pos:column="64">.</op:operator><name pos:line="61" pos:column="65">Data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="62" pos:column="13">Assert</name><op:operator pos:line="62" pos:column="19">.</op:operator><name pos:line="62" pos:column="20">Equal</name></name><argument_list pos:line="62" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="62" pos:column="26">3</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="62" pos:column="29">(</op:operator><op:operator pos:line="62" pos:column="30">(</op:operator><name pos:line="62" pos:column="31">TabLayoutCell</name><op:operator pos:line="62" pos:column="44">)</op:operator><call><name><name pos:line="62" pos:column="45">cells</name><op:operator pos:line="62" pos:column="50">.</op:operator><name pos:line="62" pos:column="51">ElementAt</name></name><argument_list pos:line="62" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="62" pos:column="61">2</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="62" pos:column="63">)</op:operator><op:operator pos:line="62" pos:column="64">.</op:operator><name pos:line="62" pos:column="65">Data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
	}</block></class>
}</block></namespace></unit>
