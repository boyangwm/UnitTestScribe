<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Common\MvcCustomizations.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Globalization</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Web</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Web</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">Mvc</name></name>;</using>
<using pos:line="6" pos:column="1">using <name pos:line="6" pos:column="7">Moq</name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Ploeh</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">AutoFixture</name></name>;</using>

<namespace pos:line="9" pos:column="1">namespace <name><name pos:line="9" pos:column="11">Glimpse</name><op:operator pos:line="9" pos:column="18">.</op:operator><name pos:line="9" pos:column="19">Test</name><op:operator pos:line="9" pos:column="23">.</op:operator><name pos:line="9" pos:column="24">Common</name></name>
<block pos:line="10" pos:column="1">{
    <class><specifier pos:line="11" pos:column="5">public</specifier> class <name pos:line="11" pos:column="18">MvcCustomizations</name> <super pos:line="11" pos:column="36">: <name pos:line="11" pos:column="38">ICustomization</name></super>
    <block pos:line="12" pos:column="5">{
        <function><type><specifier pos:line="13" pos:column="9">public</specifier> <name pos:line="13" pos:column="16">void</name></type> <name pos:line="13" pos:column="21">Customize</name><parameter_list pos:line="13" pos:column="30">(<param><decl><type><name pos:line="13" pos:column="31">IFixture</name></type> <name pos:line="13" pos:column="40">fixture</name></decl></param>)</parameter_list>
        <block pos:line="14" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="15" pos:column="13">ControllerDescriptor</name><argument_list pos:line="15" pos:column="33">(<argument><expr><name pos:line="15" pos:column="34">fixture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="16" pos:column="13">ActionDescriptor</name><argument_list pos:line="16" pos:column="29">(<argument><expr><name pos:line="16" pos:column="30">fixture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="17" pos:column="13">ActionExecutedContext</name><argument_list pos:line="17" pos:column="34">(<argument><expr><name pos:line="17" pos:column="35">fixture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="18" pos:column="13">ActionExecutingContext</name><argument_list pos:line="18" pos:column="35">(<argument><expr><name pos:line="18" pos:column="36">fixture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="19" pos:column="13">ViewEngineResult</name><argument_list pos:line="19" pos:column="29">(<argument><expr><name pos:line="19" pos:column="30">fixture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="20" pos:column="13">ViewContext</name><argument_list pos:line="20" pos:column="24">(<argument><expr><name pos:line="20" pos:column="25">fixture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="21" pos:column="13">ControllerBase</name><argument_list pos:line="21" pos:column="27">(<argument><expr><name pos:line="21" pos:column="28">fixture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="22" pos:column="13">IValueProvider</name><argument_list pos:line="22" pos:column="27">(<argument><expr><name pos:line="22" pos:column="28">fixture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="23" pos:column="13">ModelBindingContext</name><argument_list pos:line="23" pos:column="32">(<argument><expr><name pos:line="23" pos:column="33">fixture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="24" pos:column="13">ValueProviderResult</name><argument_list pos:line="24" pos:column="32">(<argument><expr><name pos:line="24" pos:column="33">fixture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="26" pos:column="13">fixture</name><op:operator pos:line="26" pos:column="20">.</op:operator><name><name pos:line="26" pos:column="21">Customize</name><argument_list pos:line="26" pos:column="30">&lt;<argument><name pos:line="26" pos:column="31">ControllerContext</name></argument>&gt;</argument_list></name></name><argument_list pos:line="26" pos:column="49">(<argument><expr><lambda><name pos:line="26" pos:column="50">cc</name> <op:operator pos:line="26" pos:column="53">=&gt;</op:operator> <call><name><name pos:line="26" pos:column="56">cc</name><op:operator pos:line="26" pos:column="58">.</op:operator><name pos:line="26" pos:column="59">Without</name></name><argument_list pos:line="26" pos:column="66">(<argument><expr><lambda><name pos:line="26" pos:column="67">c</name> <op:operator pos:line="26" pos:column="69">=&gt;</op:operator> <name><name pos:line="26" pos:column="72">c</name><op:operator pos:line="26" pos:column="73">.</op:operator><name pos:line="26" pos:column="74">DisplayMode</name></name></lambda></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="27" pos:column="13">fixture</name><op:operator pos:line="27" pos:column="20">.</op:operator><name><name pos:line="27" pos:column="21">Customize</name><argument_list pos:line="27" pos:column="30">&lt;<argument><name pos:line="27" pos:column="31">ExceptionContext</name></argument>&gt;</argument_list></name></name><argument_list pos:line="27" pos:column="48">(<argument><expr><lambda><name pos:line="27" pos:column="49">ec</name> <op:operator pos:line="27" pos:column="52">=&gt;</op:operator> <call><name><name pos:line="27" pos:column="55">ec</name><op:operator pos:line="27" pos:column="57">.</op:operator><name pos:line="27" pos:column="58">Without</name></name><argument_list pos:line="27" pos:column="65">(<argument><expr><lambda><name pos:line="27" pos:column="66">c</name> <op:operator pos:line="27" pos:column="68">=&gt;</op:operator> <name><name pos:line="27" pos:column="71">c</name><op:operator pos:line="27" pos:column="72">.</op:operator><name pos:line="27" pos:column="73">DisplayMode</name></name></lambda></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="28" pos:column="13">fixture</name><op:operator pos:line="28" pos:column="20">.</op:operator><name><name pos:line="28" pos:column="21">Customize</name><argument_list pos:line="28" pos:column="30">&lt;<argument><name pos:line="28" pos:column="31">ResultExecutedContext</name></argument>&gt;</argument_list></name></name><argument_list pos:line="28" pos:column="53">(<argument><expr><lambda><name pos:line="28" pos:column="54">rec</name> <op:operator pos:line="28" pos:column="58">=&gt;</op:operator> <call><name><name pos:line="28" pos:column="61">rec</name><op:operator pos:line="28" pos:column="64">.</op:operator><name pos:line="28" pos:column="65">Without</name></name><argument_list pos:line="28" pos:column="72">(<argument><expr><lambda><name pos:line="28" pos:column="73">c</name> <op:operator pos:line="28" pos:column="75">=&gt;</op:operator> <name><name pos:line="28" pos:column="78">c</name><op:operator pos:line="28" pos:column="79">.</op:operator><name pos:line="28" pos:column="80">DisplayMode</name></name></lambda></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="29" pos:column="13">fixture</name><op:operator pos:line="29" pos:column="20">.</op:operator><name><name pos:line="29" pos:column="21">Customize</name><argument_list pos:line="29" pos:column="30">&lt;<argument><name pos:line="29" pos:column="31">AuthorizationContext</name></argument>&gt;</argument_list></name></name><argument_list pos:line="29" pos:column="52">(<argument><expr><lambda><name pos:line="29" pos:column="53">ac</name> <op:operator pos:line="29" pos:column="56">=&gt;</op:operator> <call><name><name pos:line="29" pos:column="59">ac</name><op:operator pos:line="29" pos:column="61">.</op:operator><name pos:line="29" pos:column="62">Without</name></name><argument_list pos:line="29" pos:column="69">(<argument><expr><lambda><name pos:line="29" pos:column="70">c</name> <op:operator pos:line="29" pos:column="72">=&gt;</op:operator> <name><name pos:line="29" pos:column="75">c</name><op:operator pos:line="29" pos:column="76">.</op:operator><name pos:line="29" pos:column="77">DisplayMode</name></name></lambda></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="30" pos:column="13">fixture</name><op:operator pos:line="30" pos:column="20">.</op:operator><name><name pos:line="30" pos:column="21">Customize</name><argument_list pos:line="30" pos:column="30">&lt;<argument><name pos:line="30" pos:column="31">ResultExecutingContext</name></argument>&gt;</argument_list></name></name><argument_list pos:line="30" pos:column="54">(<argument><expr><lambda><name pos:line="30" pos:column="55">rec</name> <op:operator pos:line="30" pos:column="59">=&gt;</op:operator> <call><name><name pos:line="30" pos:column="62">rec</name><op:operator pos:line="30" pos:column="65">.</op:operator><name pos:line="30" pos:column="66">Without</name></name><argument_list pos:line="30" pos:column="73">(<argument><expr><lambda><name pos:line="30" pos:column="74">c</name> <op:operator pos:line="30" pos:column="76">=&gt;</op:operator> <name><name pos:line="30" pos:column="79">c</name><op:operator pos:line="30" pos:column="80">.</op:operator><name pos:line="30" pos:column="81">DisplayMode</name></name></lambda></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="32" pos:column="13">fixture</name><op:operator pos:line="32" pos:column="20">.</op:operator><name><name pos:line="32" pos:column="21">Register</name><argument_list pos:line="32" pos:column="29">&lt;<argument><name pos:line="32" pos:column="30">HttpContextBase</name></argument>&gt;</argument_list></name></name><argument_list pos:line="32" pos:column="46">(
                <argument><expr><lambda><parameter_list pos:line="33" pos:column="17">()</parameter_list> <op:operator pos:line="33" pos:column="20">=&gt;</op:operator> 
                <block pos:line="34" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="35" pos:column="21">var</name></type> <name pos:line="35" pos:column="25">mock</name> <init pos:line="35" pos:column="30">= <expr><op:operator pos:line="35" pos:column="32">new</op:operator> <call><name><name pos:line="35" pos:column="36">Mock</name><argument_list pos:line="35" pos:column="40">&lt;<argument><name pos:line="35" pos:column="41">HttpContextBase</name></argument>&gt;</argument_list></name><argument_list pos:line="35" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="36" pos:column="21">mock</name><op:operator pos:line="36" pos:column="25">.</op:operator><name pos:line="36" pos:column="26">Setup</name></name><argument_list pos:line="36" pos:column="31">(<argument><expr><lambda><name pos:line="36" pos:column="32">m</name> <op:operator pos:line="36" pos:column="34">=&gt;</op:operator> <name><name pos:line="36" pos:column="37">m</name><op:operator pos:line="36" pos:column="38">.</op:operator><name pos:line="36" pos:column="39">Items</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="36" pos:column="45">.</op:operator><call><name pos:line="36" pos:column="46">Returns</name><argument_list pos:line="36" pos:column="53">(<argument><expr><op:operator pos:line="36" pos:column="54">new</op:operator> <call><name><name pos:line="36" pos:column="58">Dictionary</name><argument_list pos:line="36" pos:column="68">&lt;<argument><name pos:line="36" pos:column="69">string</name></argument>, <argument><name pos:line="36" pos:column="77">object</name></argument>&gt;</argument_list></name><argument_list pos:line="36" pos:column="84">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return pos:line="37" pos:column="21">return <expr><name><name pos:line="37" pos:column="28">mock</name><op:operator pos:line="37" pos:column="32">.</op:operator><name pos:line="37" pos:column="33">Object</name></name></expr>;</return>
                }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="41" pos:column="9">private</specifier> <specifier pos:line="41" pos:column="17">static</specifier> <name pos:line="41" pos:column="24">void</name></type> <name pos:line="41" pos:column="29">ValueProviderResult</name><parameter_list pos:line="41" pos:column="48">(<param><decl><type><name pos:line="41" pos:column="49">IFixture</name></type> <name pos:line="41" pos:column="58">fixture</name></decl></param>)</parameter_list>
        <block pos:line="42" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="43" pos:column="13">fixture</name><op:operator pos:line="43" pos:column="20">.</op:operator><name><name pos:line="43" pos:column="21">Register</name><argument_list pos:line="43" pos:column="29">&lt;<argument><name pos:line="43" pos:column="30">object</name></argument>, <argument><name pos:line="43" pos:column="38">string</name></argument>, <argument><name pos:line="43" pos:column="46">CultureInfo</name></argument>, <argument><name pos:line="43" pos:column="59">ValueProviderResult</name></argument>&gt;</argument_list></name></name><argument_list pos:line="43" pos:column="79">(
                <argument><expr><lambda><parameter_list pos:line="44" pos:column="17">(<param><decl><name pos:line="44" pos:column="18">rawValue</name></decl></param>, <param><decl><name pos:line="44" pos:column="28">attemptedValue</name></decl></param>, <param><decl><name pos:line="44" pos:column="44">culture</name></decl></param>)</parameter_list> <op:operator pos:line="44" pos:column="53">=&gt;</op:operator>
                <op:operator pos:line="45" pos:column="17">new</op:operator> <call><name pos:line="45" pos:column="21">ValueProviderResult</name><argument_list pos:line="45" pos:column="40">(<argument><expr><name pos:line="45" pos:column="41">rawValue</name></expr></argument>, <argument><expr><name pos:line="45" pos:column="51">attemptedValue</name></expr></argument>, <argument><expr><name pos:line="45" pos:column="67">culture</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="48" pos:column="9">private</specifier> <specifier pos:line="48" pos:column="17">static</specifier> <name pos:line="48" pos:column="24">void</name></type> <name pos:line="48" pos:column="29">ModelBindingContext</name><parameter_list pos:line="48" pos:column="48">(<param><decl><type><name pos:line="48" pos:column="49">IFixture</name></type> <name pos:line="48" pos:column="58">fixture</name></decl></param>)</parameter_list>
        <block pos:line="49" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="50" pos:column="13">fixture</name><op:operator pos:line="50" pos:column="20">.</op:operator><name><name pos:line="50" pos:column="21">Register</name><argument_list pos:line="50" pos:column="29">&lt;<argument><name pos:line="50" pos:column="30">ModelMetadata</name></argument>, <argument><name pos:line="50" pos:column="45">string</name></argument>, <argument><name pos:line="50" pos:column="53">ModelBindingContext</name></argument>&gt;</argument_list></name></name><argument_list pos:line="50" pos:column="73">(
                <argument><expr><lambda><parameter_list pos:line="51" pos:column="17">(<param><decl><name pos:line="51" pos:column="18">modelMetadata</name></decl></param>, <param><decl><name pos:line="51" pos:column="33">modelName</name></decl></param>)</parameter_list> <op:operator pos:line="51" pos:column="44">=&gt;</op:operator> <op:operator pos:line="51" pos:column="47">new</op:operator> <name pos:line="51" pos:column="51">ModelBindingContext</name> <block pos:line="51" pos:column="71">{ <expr><name pos:line="51" pos:column="73">ModelMetadata</name> <op:operator pos:line="51" pos:column="87">=</op:operator> <name pos:line="51" pos:column="89">modelMetadata</name></expr><op:operator pos:line="51" pos:column="102">,</op:operator> <expr><name pos:line="51" pos:column="104">ModelName</name> <op:operator pos:line="51" pos:column="114">=</op:operator> <name pos:line="51" pos:column="116">modelName</name></expr> }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

<comment type="line" pos:line="54" pos:column="1">// ReSharper disable InconsistentNaming</comment>
        <function><type><specifier pos:line="55" pos:column="9">private</specifier> <specifier pos:line="55" pos:column="17">static</specifier> <name pos:line="55" pos:column="24">void</name></type> <name pos:line="55" pos:column="29">IValueProvider</name><parameter_list pos:line="55" pos:column="43">(<param><decl><type><name pos:line="55" pos:column="44">IFixture</name></type> <name pos:line="55" pos:column="53">fixture</name></decl></param>)</parameter_list>
<comment type="line" pos:line="56" pos:column="1">// ReSharper restore InconsistentNaming</comment>
        <block pos:line="57" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="58" pos:column="13">fixture</name><op:operator pos:line="58" pos:column="20">.</op:operator><name><name pos:line="58" pos:column="21">Register</name><argument_list pos:line="58" pos:column="29">&lt;<argument><name pos:line="58" pos:column="30">IValueProvider</name></argument>&gt;</argument_list></name></name><argument_list pos:line="58" pos:column="45">(<argument><expr><lambda><parameter_list pos:line="58" pos:column="46">()</parameter_list> <op:operator pos:line="58" pos:column="49">=&gt;</op:operator>
                <block pos:line="59" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="60" pos:column="21">var</name></type> <name pos:line="60" pos:column="25">mock</name> <init pos:line="60" pos:column="30">= <expr><op:operator pos:line="60" pos:column="32">new</op:operator> <call><name><name pos:line="60" pos:column="36">Mock</name><argument_list pos:line="60" pos:column="40">&lt;<argument><name pos:line="60" pos:column="41">IValueProvider</name></argument>&gt;</argument_list></name><argument_list pos:line="60" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="61" pos:column="21">mock</name><op:operator pos:line="61" pos:column="25">.</op:operator><name pos:line="61" pos:column="26">Setup</name></name><argument_list pos:line="61" pos:column="31">(<argument><expr><lambda><name pos:line="61" pos:column="32">x</name> <op:operator pos:line="61" pos:column="34">=&gt;</op:operator> <call><name><name pos:line="61" pos:column="37">x</name><op:operator pos:line="61" pos:column="38">.</op:operator><name pos:line="61" pos:column="39">GetValue</name></name><argument_list pos:line="61" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="61" pos:column="48">"action"</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="61" pos:column="58">.</op:operator><call><name pos:line="61" pos:column="59">Returns</name><argument_list pos:line="61" pos:column="66">(<argument><expr><op:operator pos:line="61" pos:column="67">new</op:operator> <call><name pos:line="61" pos:column="71">ValueProviderResult</name><argument_list pos:line="61" pos:column="90">(<argument><expr><lit:literal type="string" pos:line="61" pos:column="91">"action"</lit:literal></expr></argument>, <argument><expr><name pos:line="61" pos:column="101">null</name></expr></argument>, <argument><expr><name pos:line="61" pos:column="107">null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="62" pos:column="21">mock</name><op:operator pos:line="62" pos:column="25">.</op:operator><name pos:line="62" pos:column="26">Setup</name></name><argument_list pos:line="62" pos:column="31">(<argument><expr><lambda><name pos:line="62" pos:column="32">x</name> <op:operator pos:line="62" pos:column="34">=&gt;</op:operator> <call><name><name pos:line="62" pos:column="37">x</name><op:operator pos:line="62" pos:column="38">.</op:operator><name pos:line="62" pos:column="39">GetValue</name></name><argument_list pos:line="62" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="62" pos:column="48">"controller"</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="62" pos:column="62">.</op:operator><call><name pos:line="62" pos:column="63">Returns</name><argument_list pos:line="62" pos:column="70">(<argument><expr><op:operator pos:line="62" pos:column="71">new</op:operator> <call><name pos:line="62" pos:column="75">ValueProviderResult</name><argument_list pos:line="62" pos:column="94">(<argument><expr><lit:literal type="string" pos:line="62" pos:column="95">"controller"</lit:literal></expr></argument>, <argument><expr><name pos:line="62" pos:column="109">null</name></expr></argument>, <argument><expr><name pos:line="62" pos:column="115">null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return pos:line="63" pos:column="21">return <expr><name><name pos:line="63" pos:column="28">mock</name><op:operator pos:line="63" pos:column="32">.</op:operator><name pos:line="63" pos:column="33">Object</name></name></expr>;</return>
                }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="67" pos:column="9">private</specifier> <specifier pos:line="67" pos:column="17">static</specifier> <name pos:line="67" pos:column="24">void</name></type> <name pos:line="67" pos:column="29">ControllerBase</name><parameter_list pos:line="67" pos:column="43">(<param><decl><type><name pos:line="67" pos:column="44">IFixture</name></type> <name pos:line="67" pos:column="53">fixture</name></decl></param>)</parameter_list>
        <block pos:line="68" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="69" pos:column="13">fixture</name><op:operator pos:line="69" pos:column="20">.</op:operator><name><name pos:line="69" pos:column="21">Register</name><argument_list pos:line="69" pos:column="29">&lt;<argument><name pos:line="69" pos:column="30">IValueProvider</name></argument>, <argument><name pos:line="69" pos:column="46">ControllerBase</name></argument>&gt;</argument_list></name></name><argument_list pos:line="69" pos:column="61">(
                <argument><expr><lambda><name pos:line="70" pos:column="17">valueProvider</name> <op:operator pos:line="70" pos:column="31">=&gt;</op:operator>
                    <block pos:line="71" pos:column="21">{
                        <decl_stmt><decl><type><name pos:line="72" pos:column="25">var</name></type> <name pos:line="72" pos:column="29">mock</name> <init pos:line="72" pos:column="34">= <expr><op:operator pos:line="72" pos:column="36">new</op:operator> <call><name><name pos:line="72" pos:column="40">Mock</name><argument_list pos:line="72" pos:column="44">&lt;<argument><name pos:line="72" pos:column="45">ControllerBase</name></argument>&gt;</argument_list></name><argument_list pos:line="72" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name><name pos:line="73" pos:column="25">mock</name><op:operator pos:line="73" pos:column="29">.</op:operator><name pos:line="73" pos:column="30">Object</name><op:operator pos:line="73" pos:column="36">.</op:operator><name pos:line="73" pos:column="37">ValueProvider</name></name> <op:operator pos:line="73" pos:column="51">=</op:operator> <name pos:line="73" pos:column="53">valueProvider</name></expr>;</expr_stmt>
                        <return pos:line="74" pos:column="25">return <expr><name><name pos:line="74" pos:column="32">mock</name><op:operator pos:line="74" pos:column="36">.</op:operator><name pos:line="74" pos:column="37">Object</name></name></expr>;</return>
                    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="78" pos:column="9">private</specifier> <specifier pos:line="78" pos:column="17">static</specifier> <name pos:line="78" pos:column="24">void</name></type> <name pos:line="78" pos:column="29">ViewContext</name><parameter_list pos:line="78" pos:column="40">(<param><decl><type><name pos:line="78" pos:column="41">IFixture</name></type> <name pos:line="78" pos:column="50">fixture</name></decl></param>)</parameter_list>
        <block pos:line="79" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="80" pos:column="13">fixture</name><op:operator pos:line="80" pos:column="20">.</op:operator><name><name pos:line="80" pos:column="21">Register</name><argument_list pos:line="80" pos:column="29">&lt;<argument><name pos:line="80" pos:column="30">ControllerBase</name></argument>, <argument><name pos:line="80" pos:column="46">ViewContext</name></argument>&gt;</argument_list></name></name><argument_list pos:line="80" pos:column="58">(
                <argument><expr><lambda><name pos:line="81" pos:column="17">controllerBase</name> <op:operator pos:line="81" pos:column="32">=&gt;</op:operator>
                <op:operator pos:line="82" pos:column="17">new</op:operator> <name pos:line="82" pos:column="21">ViewContext</name>
                    <block pos:line="83" pos:column="21">{<expr><name pos:line="83" pos:column="22">TempData</name> <op:operator pos:line="83" pos:column="31">=</op:operator> <op:operator pos:line="83" pos:column="33">new</op:operator> <call><name pos:line="83" pos:column="37">TempDataDictionary</name><argument_list pos:line="83" pos:column="55">()</argument_list></call></expr><op:operator pos:line="83" pos:column="57">,</op:operator> <expr><name pos:line="83" pos:column="59">ViewData</name> <op:operator pos:line="83" pos:column="68">=</op:operator> <op:operator pos:line="83" pos:column="70">new</op:operator> <call><name pos:line="83" pos:column="74">ViewDataDictionary</name><argument_list pos:line="83" pos:column="92">()</argument_list></call></expr><op:operator pos:line="83" pos:column="94">,</op:operator> <expr><name pos:line="83" pos:column="96">Controller</name> <op:operator pos:line="83" pos:column="107">=</op:operator> <name pos:line="83" pos:column="109">controllerBase</name></expr>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="86" pos:column="9">private</specifier> <specifier pos:line="86" pos:column="17">static</specifier> <name pos:line="86" pos:column="24">void</name></type> <name pos:line="86" pos:column="29">ViewEngineResult</name><parameter_list pos:line="86" pos:column="45">(<param><decl><type><name pos:line="86" pos:column="46">IFixture</name></type> <name pos:line="86" pos:column="55">fixture</name></decl></param>)</parameter_list>
        <block pos:line="87" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="88" pos:column="13">fixture</name><op:operator pos:line="88" pos:column="20">.</op:operator><name><name pos:line="88" pos:column="21">Register</name><argument_list pos:line="88" pos:column="29">&lt;<argument><name pos:line="88" pos:column="30">IView</name></argument>, <argument><name pos:line="88" pos:column="37">IViewEngine</name></argument>, <argument><name pos:line="88" pos:column="50">ViewEngineResult</name></argument>&gt;</argument_list></name></name><argument_list pos:line="88" pos:column="67">(
                <argument><expr><lambda><parameter_list pos:line="89" pos:column="17">(<param><decl><name pos:line="89" pos:column="18">view</name></decl></param>, <param><decl><name pos:line="89" pos:column="24">viewEngine</name></decl></param>)</parameter_list> <op:operator pos:line="89" pos:column="36">=&gt;</op:operator> <op:operator pos:line="89" pos:column="39">new</op:operator> <call><name pos:line="89" pos:column="43">ViewEngineResult</name><argument_list pos:line="89" pos:column="59">(<argument><expr><name pos:line="89" pos:column="60">view</name></expr></argument>, <argument><expr><name pos:line="89" pos:column="66">viewEngine</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="92" pos:column="9">private</specifier> <specifier pos:line="92" pos:column="17">static</specifier> <name pos:line="92" pos:column="24">void</name></type> <name pos:line="92" pos:column="29">ActionExecutingContext</name><parameter_list pos:line="92" pos:column="51">(<param><decl><type><name pos:line="92" pos:column="52">IFixture</name></type> <name pos:line="92" pos:column="61">fixture</name></decl></param>)</parameter_list>
        <block pos:line="93" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="94" pos:column="13">fixture</name><op:operator pos:line="94" pos:column="20">.</op:operator><name><name pos:line="94" pos:column="21">Register</name><argument_list pos:line="94" pos:column="29">&lt;<argument><name pos:line="94" pos:column="30">ControllerContext</name></argument>, <argument><name pos:line="94" pos:column="49">ActionDescriptor</name></argument>, <argument><name pos:line="94" pos:column="67">ActionExecutingContext</name></argument>&gt;</argument_list></name></name><argument_list pos:line="94" pos:column="90">(
                <argument><expr><lambda><parameter_list pos:line="95" pos:column="17">(<param><decl><name pos:line="95" pos:column="18">controllerContext</name></decl></param>, <param><decl><name pos:line="95" pos:column="37">actionDescriptor</name></decl></param>)</parameter_list> <op:operator pos:line="95" pos:column="55">=&gt;</op:operator> <op:operator pos:line="95" pos:column="58">new</op:operator> <call><name pos:line="95" pos:column="62">ActionExecutingContext</name><argument_list pos:line="95" pos:column="84">(
                                                             <argument><expr><name pos:line="96" pos:column="62">controllerContext</name></expr></argument>,
                                                             <argument><expr><name pos:line="97" pos:column="62">actionDescriptor</name></expr></argument>,
                                                             <argument><expr><call><name><name pos:line="98" pos:column="62">fixture</name><op:operator pos:line="98" pos:column="69">.</op:operator><name><name pos:line="98" pos:column="70">CreateAnonymous</name><argument_list pos:line="98" pos:column="85">&lt;<argument><name><name pos:line="98" pos:column="86">IDictionary</name><argument_list pos:line="98" pos:column="97">&lt;<argument><name pos:line="98" pos:column="98">string</name></argument>, <argument><name pos:line="98" pos:column="106">object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name><argument_list pos:line="98" pos:column="114">()</argument_list></call></expr></argument>)</argument_list></call>
                                                             <block pos:line="99" pos:column="62">{
                                                                 <expr><name pos:line="100" pos:column="66">Result</name> <op:operator pos:line="100" pos:column="73">=</op:operator> <call><name><name pos:line="100" pos:column="75">fixture</name><op:operator pos:line="100" pos:column="82">.</op:operator><name><name pos:line="100" pos:column="83">CreateAnonymous</name><argument_list pos:line="100" pos:column="98">&lt;<argument><name pos:line="100" pos:column="99">ActionResult</name></argument>&gt;</argument_list></name></name><argument_list pos:line="100" pos:column="112">()</argument_list></call></expr>
                                                             }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="104" pos:column="9">private</specifier> <specifier pos:line="104" pos:column="17">static</specifier> <name pos:line="104" pos:column="24">void</name></type> <name pos:line="104" pos:column="29">ActionExecutedContext</name><parameter_list pos:line="104" pos:column="50">(<param><decl><type><name pos:line="104" pos:column="51">IFixture</name></type> <name pos:line="104" pos:column="60">fixture</name></decl></param>)</parameter_list>
        <block pos:line="105" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="106" pos:column="13">fixture</name><op:operator pos:line="106" pos:column="20">.</op:operator><name><name pos:line="106" pos:column="21">Register</name><argument_list pos:line="106" pos:column="29">&lt;<argument><name pos:line="106" pos:column="30">ControllerContext</name></argument>, <argument><name pos:line="106" pos:column="49">ActionDescriptor</name></argument>, <argument><name pos:line="106" pos:column="67">bool</name></argument>, <argument><name pos:line="106" pos:column="73">Exception</name></argument>, <argument><name pos:line="106" pos:column="84">ActionExecutedContext</name></argument>&gt;</argument_list></name></name><argument_list pos:line="106" pos:column="106">(
                <argument><expr><lambda><parameter_list pos:line="107" pos:column="17">(<param><decl><name pos:line="107" pos:column="18">controllerContext</name></decl></param>, <param><decl><name pos:line="107" pos:column="37">actionDescriptor</name></decl></param>, <param><decl><name pos:line="107" pos:column="55">canceled</name></decl></param>, <param><decl><name pos:line="107" pos:column="65">exception</name></decl></param>)</parameter_list> <op:operator pos:line="107" pos:column="76">=&gt;</op:operator>
                <op:operator pos:line="108" pos:column="17">new</op:operator> <call><name pos:line="108" pos:column="21">ActionExecutedContext</name><argument_list pos:line="108" pos:column="42">(<argument><expr><name pos:line="108" pos:column="43">controllerContext</name></expr></argument>, <argument><expr><name pos:line="108" pos:column="62">actionDescriptor</name></expr></argument>, <argument><expr><name pos:line="108" pos:column="80">canceled</name></expr></argument>, <argument><expr><name pos:line="108" pos:column="90">exception</name></expr></argument>)</argument_list></call>
                    <block pos:line="109" pos:column="21">{
                        <expr><name pos:line="110" pos:column="25">Result</name> <op:operator pos:line="110" pos:column="32">=</op:operator> <call><name><name pos:line="110" pos:column="34">fixture</name><op:operator pos:line="110" pos:column="41">.</op:operator><name><name pos:line="110" pos:column="42">CreateAnonymous</name><argument_list pos:line="110" pos:column="57">&lt;<argument><name pos:line="110" pos:column="58">ActionResult</name></argument>&gt;</argument_list></name></name><argument_list pos:line="110" pos:column="71">()</argument_list></call></expr>
                    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="114" pos:column="9">private</specifier> <specifier pos:line="114" pos:column="17">static</specifier> <name pos:line="114" pos:column="24">void</name></type> <name pos:line="114" pos:column="29">ControllerDescriptor</name><parameter_list pos:line="114" pos:column="49">(<param><decl><type><name pos:line="114" pos:column="50">IFixture</name></type> <name pos:line="114" pos:column="59">fixture</name></decl></param>)</parameter_list>
        <block pos:line="115" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="116" pos:column="13">fixture</name><op:operator pos:line="116" pos:column="20">.</op:operator><name><name pos:line="116" pos:column="21">Register</name><argument_list pos:line="116" pos:column="29">&lt;<argument><name pos:line="116" pos:column="30">string</name></argument>, <argument><name pos:line="116" pos:column="38">ControllerDescriptor</name></argument>&gt;</argument_list></name></name><argument_list pos:line="116" pos:column="59">(
                <argument><expr><lambda><parameter_list pos:line="117" pos:column="17">(<param><decl><name pos:line="117" pos:column="18">controllerName</name></decl></param>)</parameter_list> <op:operator pos:line="117" pos:column="34">=&gt;</op:operator>
                    <block pos:line="118" pos:column="21">{
                        <decl_stmt><decl><type><name pos:line="119" pos:column="25">var</name></type> <name pos:line="119" pos:column="29">mock</name> <init pos:line="119" pos:column="34">= <expr><op:operator pos:line="119" pos:column="36">new</op:operator> <call><name><name pos:line="119" pos:column="40">Mock</name><argument_list pos:line="119" pos:column="44">&lt;<argument><name pos:line="119" pos:column="45">ControllerDescriptor</name></argument>&gt;</argument_list></name><argument_list pos:line="119" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name pos:line="120" pos:column="25">mock</name><op:operator pos:line="120" pos:column="29">.</op:operator><name pos:line="120" pos:column="30">Setup</name></name><argument_list pos:line="120" pos:column="35">(<argument><expr><lambda><name pos:line="120" pos:column="36">m</name> <op:operator pos:line="120" pos:column="38">=&gt;</op:operator> <name><name pos:line="120" pos:column="41">m</name><op:operator pos:line="120" pos:column="42">.</op:operator><name pos:line="120" pos:column="43">ControllerName</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="120" pos:column="58">.</op:operator><call><name pos:line="120" pos:column="59">Returns</name><argument_list pos:line="120" pos:column="66">(<argument><expr><name pos:line="120" pos:column="67">controllerName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="121" pos:column="25">mock</name><op:operator pos:line="121" pos:column="29">.</op:operator><name pos:line="121" pos:column="30">Setup</name></name><argument_list pos:line="121" pos:column="35">(<argument><expr><lambda><name pos:line="121" pos:column="36">m</name> <op:operator pos:line="121" pos:column="38">=&gt;</op:operator> <name><name pos:line="121" pos:column="41">m</name><op:operator pos:line="121" pos:column="42">.</op:operator><name pos:line="121" pos:column="43">ControllerType</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="121" pos:column="58">.</op:operator><call><name pos:line="121" pos:column="59">Returns</name><argument_list pos:line="121" pos:column="66">(<argument><expr><call><name pos:line="121" pos:column="67">typeof</name><argument_list pos:line="121" pos:column="73">(<argument><expr><name pos:line="121" pos:column="74">Controller</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return pos:line="122" pos:column="25">return <expr><name><name pos:line="122" pos:column="32">mock</name><op:operator pos:line="122" pos:column="36">.</op:operator><name pos:line="122" pos:column="37">Object</name></name></expr>;</return>
                    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="126" pos:column="9">private</specifier> <specifier pos:line="126" pos:column="17">static</specifier> <name pos:line="126" pos:column="24">void</name></type> <name pos:line="126" pos:column="29">ActionDescriptor</name><parameter_list pos:line="126" pos:column="45">(<param><decl><type><name pos:line="126" pos:column="46">IFixture</name></type> <name pos:line="126" pos:column="55">fixture</name></decl></param>)</parameter_list>
        <block pos:line="127" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="128" pos:column="13">fixture</name><op:operator pos:line="128" pos:column="20">.</op:operator><name><name pos:line="128" pos:column="21">Register</name><argument_list pos:line="128" pos:column="29">&lt;<argument><name pos:line="128" pos:column="30">string</name></argument>, <argument><name pos:line="128" pos:column="38">ControllerDescriptor</name></argument>, <argument><name pos:line="128" pos:column="60">ActionDescriptor</name></argument>&gt;</argument_list></name></name><argument_list pos:line="128" pos:column="77">(
                <argument><expr><lambda><parameter_list pos:line="129" pos:column="17">(<param><decl><name pos:line="129" pos:column="18">actionName</name></decl></param>, <param><decl><name pos:line="129" pos:column="30">controllerDescriptor</name></decl></param>)</parameter_list> <op:operator pos:line="129" pos:column="52">=&gt;</op:operator>
                    <block pos:line="130" pos:column="21">{
                        <decl_stmt><decl><type><name pos:line="131" pos:column="25">var</name></type> <name pos:line="131" pos:column="29">mock</name> <init pos:line="131" pos:column="34">= <expr><op:operator pos:line="131" pos:column="36">new</op:operator> <call><name><name pos:line="131" pos:column="40">Mock</name><argument_list pos:line="131" pos:column="44">&lt;<argument><name pos:line="131" pos:column="45">ActionDescriptor</name></argument>&gt;</argument_list></name><argument_list pos:line="131" pos:column="62">()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name pos:line="132" pos:column="25">mock</name><op:operator pos:line="132" pos:column="29">.</op:operator><name pos:line="132" pos:column="30">Setup</name></name><argument_list pos:line="132" pos:column="35">(<argument><expr><lambda><name pos:line="132" pos:column="36">m</name> <op:operator pos:line="132" pos:column="38">=&gt;</op:operator> <name><name pos:line="132" pos:column="41">m</name><op:operator pos:line="132" pos:column="42">.</op:operator><name pos:line="132" pos:column="43">ActionName</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="132" pos:column="54">.</op:operator><call><name pos:line="132" pos:column="55">Returns</name><argument_list pos:line="132" pos:column="62">(<argument><expr><name pos:line="132" pos:column="63">actionName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="133" pos:column="25">mock</name><op:operator pos:line="133" pos:column="29">.</op:operator><name pos:line="133" pos:column="30">Setup</name></name><argument_list pos:line="133" pos:column="35">(<argument><expr><lambda><name pos:line="133" pos:column="36">m</name> <op:operator pos:line="133" pos:column="38">=&gt;</op:operator> <name><name pos:line="133" pos:column="41">m</name><op:operator pos:line="133" pos:column="42">.</op:operator><name pos:line="133" pos:column="43">ControllerDescriptor</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="133" pos:column="64">.</op:operator><call><name pos:line="133" pos:column="65">Returns</name><argument_list pos:line="133" pos:column="72">(<argument><expr><name pos:line="133" pos:column="73">controllerDescriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return pos:line="134" pos:column="25">return <expr><name><name pos:line="134" pos:column="32">mock</name><op:operator pos:line="134" pos:column="36">.</op:operator><name pos:line="134" pos:column="37">Object</name></name></expr>;</return>
                    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
