<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Common\SystemCustomizations.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">System</name><op:operator pos:line="1" pos:column="13">.</op:operator><name pos:line="1" pos:column="14">Globalization</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Reflection</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Ploeh</name><op:operator pos:line="3" pos:column="12">.</op:operator><name pos:line="3" pos:column="13">AutoFixture</name></name>;</using>

<namespace pos:line="5" pos:column="1">namespace <name><name pos:line="5" pos:column="11">Glimpse</name><op:operator pos:line="5" pos:column="18">.</op:operator><name pos:line="5" pos:column="19">Test</name><op:operator pos:line="5" pos:column="23">.</op:operator><name pos:line="5" pos:column="24">Common</name></name>
<block pos:line="6" pos:column="1">{
    <class><specifier pos:line="7" pos:column="5">public</specifier> class <name pos:line="7" pos:column="18">SystemCustomizations</name> <super pos:line="7" pos:column="39">: <name pos:line="7" pos:column="41">ICustomization</name></super>
    <block pos:line="8" pos:column="5">{
        <function><type><specifier pos:line="9" pos:column="9">public</specifier> <name pos:line="9" pos:column="16">void</name></type> <name pos:line="9" pos:column="21">Customize</name><parameter_list pos:line="9" pos:column="30">(<param><decl><type><name pos:line="9" pos:column="31">IFixture</name></type> <name pos:line="9" pos:column="40">fixture</name></decl></param>)</parameter_list>
        <block pos:line="10" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="11" pos:column="13">fixture</name><op:operator pos:line="11" pos:column="20">.</op:operator><name><name pos:line="11" pos:column="21">Register</name><argument_list pos:line="11" pos:column="29">&lt;<argument><name pos:line="11" pos:column="30">MethodInfo</name></argument>&gt;</argument_list></name></name><argument_list pos:line="11" pos:column="41">(<argument><expr><lambda><parameter_list pos:line="11" pos:column="42">()</parameter_list> <op:operator pos:line="11" pos:column="45">=&gt;</op:operator> <call><name pos:line="11" pos:column="48">typeof</name><argument_list pos:line="11" pos:column="54">(<argument><expr><name pos:line="11" pos:column="55">object</name></expr></argument>)</argument_list></call><op:operator pos:line="11" pos:column="62">.</op:operator><call><name pos:line="11" pos:column="63">GetMethod</name><argument_list pos:line="11" pos:column="72">(<argument><expr><lit:literal type="string" pos:line="11" pos:column="73">"ToString"</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="13" pos:column="13">fixture</name><op:operator pos:line="13" pos:column="20">.</op:operator><name pos:line="13" pos:column="21">Register</name></name><argument_list pos:line="13" pos:column="29">(<argument><expr><lambda><parameter_list pos:line="13" pos:column="30">()</parameter_list> <op:operator pos:line="13" pos:column="33">=&gt;</op:operator> <op:operator pos:line="13" pos:column="36">new</op:operator> <call><name pos:line="13" pos:column="40">CultureInfo</name><argument_list pos:line="13" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="13" pos:column="52">"en-us"</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
