<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Core\Resource\DataShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Core</name><op:operator pos:line="4" pos:column="19">.</op:operator><name pos:line="4" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Glimpse</name><op:operator pos:line="5" pos:column="14">.</op:operator><name pos:line="5" pos:column="15">Core</name><op:operator pos:line="5" pos:column="19">.</op:operator><name pos:line="5" pos:column="20">Framework</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Glimpse</name><op:operator pos:line="6" pos:column="14">.</op:operator><name pos:line="6" pos:column="15">Core</name><op:operator pos:line="6" pos:column="19">.</op:operator><name pos:line="6" pos:column="20">Resource</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Glimpse</name><op:operator pos:line="7" pos:column="14">.</op:operator><name pos:line="7" pos:column="15">Core</name><op:operator pos:line="7" pos:column="19">.</op:operator><name pos:line="7" pos:column="20">ResourceResult</name></name>;</using>
<using pos:line="8" pos:column="1">using <name pos:line="8" pos:column="7">Moq</name>;</using>
<using pos:line="9" pos:column="1">using <name pos:line="9" pos:column="7">Xunit</name>;</using>

<namespace pos:line="11" pos:column="1">namespace <name><name pos:line="11" pos:column="11">Glimpse</name><op:operator pos:line="11" pos:column="18">.</op:operator><name pos:line="11" pos:column="19">Test</name><op:operator pos:line="11" pos:column="23">.</op:operator><name pos:line="11" pos:column="24">Core</name><op:operator pos:line="11" pos:column="28">.</op:operator><name pos:line="11" pos:column="29">Resource</name></name>
<block pos:line="12" pos:column="1">{
    <class><specifier pos:line="13" pos:column="5">public</specifier> class <name pos:line="13" pos:column="18">DataShould</name>
    <block pos:line="14" pos:column="5">{
        <function><type><attribute pos:line="15" pos:column="9">[<expr><name pos:line="15" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="16" pos:column="9">public</specifier> <name pos:line="16" pos:column="16">void</name></type> <name pos:line="16" pos:column="21">ProvideProperName</name><parameter_list pos:line="16" pos:column="38">()</parameter_list>
        <block pos:line="17" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="18" pos:column="13">var</name></type> <name pos:line="18" pos:column="17">resource</name> <init pos:line="18" pos:column="26">= <expr><op:operator pos:line="18" pos:column="28">new</op:operator> <call><name pos:line="18" pos:column="32">RequestResource</name><argument_list pos:line="18" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="19" pos:column="13">Assert</name><op:operator pos:line="19" pos:column="19">.</op:operator><name pos:line="19" pos:column="20">Equal</name></name><argument_list pos:line="19" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="19" pos:column="26">"glimpse_request"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="45">resource</name><op:operator pos:line="19" pos:column="53">.</op:operator><name pos:line="19" pos:column="54">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="22" pos:column="9">[<expr><name pos:line="22" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="23" pos:column="9">public</specifier> <name pos:line="23" pos:column="16">void</name></type> <name pos:line="23" pos:column="21">ReturnThreeParameterKeys</name><parameter_list pos:line="23" pos:column="45">()</parameter_list>
        <block pos:line="24" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="25" pos:column="13">var</name></type> <name pos:line="25" pos:column="17">resource</name> <init pos:line="25" pos:column="26">= <expr><op:operator pos:line="25" pos:column="28">new</op:operator> <call><name pos:line="25" pos:column="32">RequestResource</name><argument_list pos:line="25" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="26" pos:column="13">Assert</name><op:operator pos:line="26" pos:column="19">.</op:operator><name pos:line="26" pos:column="20">Equal</name></name><argument_list pos:line="26" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="26" pos:column="26">3</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="26" pos:column="29">resource</name><op:operator pos:line="26" pos:column="37">.</op:operator><name pos:line="26" pos:column="38">Parameters</name><op:operator pos:line="26" pos:column="48">.</op:operator><name pos:line="26" pos:column="49">Count</name></name><argument_list pos:line="26" pos:column="54">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="29" pos:column="9">[<expr><name pos:line="29" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="30" pos:column="9">public</specifier> <name pos:line="30" pos:column="16">void</name></type> <name pos:line="30" pos:column="21">ThrowExceptionWithNullParameters</name><parameter_list pos:line="30" pos:column="53">()</parameter_list>
        <block pos:line="31" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="32" pos:column="13">var</name></type> <name pos:line="32" pos:column="17">resource</name> <init pos:line="32" pos:column="26">= <expr><op:operator pos:line="32" pos:column="28">new</op:operator> <call><name pos:line="32" pos:column="32">RequestResource</name><argument_list pos:line="32" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="34" pos:column="13">Assert</name><op:operator pos:line="34" pos:column="19">.</op:operator><name><name pos:line="34" pos:column="20">Throws</name><argument_list pos:line="34" pos:column="26">&lt;<argument><name pos:line="34" pos:column="27">ArgumentNullException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="34" pos:column="49">(<argument><expr><lambda><parameter_list pos:line="34" pos:column="50">()</parameter_list> <op:operator pos:line="34" pos:column="53">=&gt;</op:operator> <call><name><name pos:line="34" pos:column="56">resource</name><op:operator pos:line="34" pos:column="64">.</op:operator><name pos:line="34" pos:column="65">Execute</name></name><argument_list pos:line="34" pos:column="72">(<argument><expr><name pos:line="34" pos:column="73">null</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="37" pos:column="9">[<expr><name pos:line="37" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="38" pos:column="9">public</specifier> <name pos:line="38" pos:column="16">void</name></type> <name pos:line="38" pos:column="21">ReturnJsonResultWithProperRequestId</name><parameter_list pos:line="38" pos:column="56">()</parameter_list>
        <block pos:line="39" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="40" pos:column="13">var</name></type> <name pos:line="40" pos:column="17">guid</name> <init pos:line="40" pos:column="22">= <expr><call><name><name pos:line="40" pos:column="24">Guid</name><op:operator pos:line="40" pos:column="28">.</op:operator><name pos:line="40" pos:column="29">Parse</name></name><argument_list pos:line="40" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="40" pos:column="35">"321caff1-f442-4dbb-8c5b-3ed528cde3fd"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="41" pos:column="13">var</name></type> <name pos:line="41" pos:column="17">metadataMock</name> <init pos:line="41" pos:column="30">= <expr><op:operator pos:line="41" pos:column="32">new</op:operator> <call><name><name pos:line="41" pos:column="36">Mock</name><argument_list pos:line="41" pos:column="40">&lt;<argument><name pos:line="41" pos:column="41">IRequestMetadata</name></argument>&gt;</argument_list></name><argument_list pos:line="41" pos:column="58">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="42" pos:column="13">var</name></type> <name pos:line="42" pos:column="17">persistenceStoreMock</name> <init pos:line="42" pos:column="38">= <expr><op:operator pos:line="42" pos:column="40">new</op:operator> <call><name><name pos:line="42" pos:column="44">Mock</name><argument_list pos:line="42" pos:column="48">&lt;<argument><name pos:line="42" pos:column="49">IReadOnlyPersistenceStore</name></argument>&gt;</argument_list></name><argument_list pos:line="42" pos:column="75">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="43" pos:column="13">persistenceStoreMock</name><op:operator pos:line="43" pos:column="33">.</op:operator><name pos:line="43" pos:column="34">Setup</name></name><argument_list pos:line="43" pos:column="39">(<argument><expr><lambda><name pos:line="43" pos:column="40">ps</name> <op:operator pos:line="43" pos:column="43">=&gt;</op:operator> <call><name><name pos:line="43" pos:column="46">ps</name><op:operator pos:line="43" pos:column="48">.</op:operator><name pos:line="43" pos:column="49">GetByRequestId</name></name><argument_list pos:line="43" pos:column="63">(<argument><expr><name pos:line="43" pos:column="64">guid</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="43" pos:column="70">.</op:operator><call><name pos:line="43" pos:column="71">Returns</name><argument_list pos:line="43" pos:column="78">(<argument><expr><op:operator pos:line="43" pos:column="79">new</op:operator> <call><name pos:line="43" pos:column="83">GlimpseRequest</name><argument_list pos:line="43" pos:column="97">(<argument><expr><name pos:line="43" pos:column="98">guid</name></expr></argument>, <argument><expr><name><name pos:line="43" pos:column="104">metadataMock</name><op:operator pos:line="43" pos:column="116">.</op:operator><name pos:line="43" pos:column="117">Object</name></name></expr></argument>, <argument><expr><op:operator pos:line="43" pos:column="125">new</op:operator> <call><name><name pos:line="43" pos:column="129">Dictionary</name><argument_list pos:line="43" pos:column="139">&lt;<argument><name pos:line="43" pos:column="140">string</name></argument>, <argument><name pos:line="43" pos:column="148">TabResult</name></argument>&gt;</argument_list></name><argument_list pos:line="43" pos:column="158">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="43" pos:column="162">new</op:operator> <call><name><name pos:line="43" pos:column="166">Dictionary</name><argument_list pos:line="43" pos:column="176">&lt;<argument><name pos:line="43" pos:column="177">string</name></argument>, <argument><name pos:line="43" pos:column="185">TabResult</name></argument>&gt;</argument_list></name><argument_list pos:line="43" pos:column="195">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="43" pos:column="199">TimeSpan</name><op:operator pos:line="43" pos:column="207">.</op:operator><name pos:line="43" pos:column="208">FromMilliseconds</name></name><argument_list pos:line="43" pos:column="224">(<argument><expr><lit:literal type="number" pos:line="43" pos:column="225">0</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="44" pos:column="13">var</name></type> <name pos:line="44" pos:column="17">contextMock</name> <init pos:line="44" pos:column="29">= <expr><op:operator pos:line="44" pos:column="31">new</op:operator> <call><name><name pos:line="44" pos:column="35">Mock</name><argument_list pos:line="44" pos:column="39">&lt;<argument><name pos:line="44" pos:column="40">IResourceContext</name></argument>&gt;</argument_list></name><argument_list pos:line="44" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="45" pos:column="13">contextMock</name><op:operator pos:line="45" pos:column="24">.</op:operator><name pos:line="45" pos:column="25">Setup</name></name><argument_list pos:line="45" pos:column="30">(<argument><expr><lambda><name pos:line="45" pos:column="31">c</name> <op:operator pos:line="45" pos:column="33">=&gt;</op:operator> <name><name pos:line="45" pos:column="36">c</name><op:operator pos:line="45" pos:column="37">.</op:operator><name pos:line="45" pos:column="38">Parameters</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="45" pos:column="49">.</op:operator><call><name pos:line="45" pos:column="50">Returns</name><argument_list pos:line="45" pos:column="57">(<argument><expr><op:operator pos:line="45" pos:column="58">new</op:operator> <name><name pos:line="45" pos:column="62">Dictionary</name><argument_list pos:line="45" pos:column="72">&lt;<argument><name pos:line="45" pos:column="73">string</name></argument>, <argument><name pos:line="45" pos:column="81">string</name></argument>&gt;</argument_list></name> <block pos:line="45" pos:column="89">{ <expr><block pos:line="45" pos:column="91">{ <expr><name><name pos:line="45" pos:column="93">ResourceParameter</name><op:operator pos:line="45" pos:column="110">.</op:operator><name pos:line="45" pos:column="111">RequestId</name><op:operator pos:line="45" pos:column="120">.</op:operator><name pos:line="45" pos:column="121">Name</name></name></expr><op:operator pos:line="45" pos:column="125">,</op:operator> <expr><call><name><name pos:line="45" pos:column="127">guid</name><op:operator pos:line="45" pos:column="131">.</op:operator><name pos:line="45" pos:column="132">ToString</name></name><argument_list pos:line="45" pos:column="140">()</argument_list></call></expr> }</block></expr><op:operator pos:line="45" pos:column="144">,</op:operator> <expr><block pos:line="45" pos:column="146">{ <expr><name><name pos:line="45" pos:column="148">ResourceParameter</name><op:operator pos:line="45" pos:column="165">.</op:operator><name pos:line="45" pos:column="166">Callback</name><op:operator pos:line="45" pos:column="174">.</op:operator><name pos:line="45" pos:column="175">Name</name></name></expr><op:operator pos:line="45" pos:column="179">,</op:operator> <expr><lit:literal type="string" pos:line="45" pos:column="181">"console.log"</lit:literal></expr> }</block></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="46" pos:column="13">contextMock</name><op:operator pos:line="46" pos:column="24">.</op:operator><name pos:line="46" pos:column="25">Setup</name></name><argument_list pos:line="46" pos:column="30">(<argument><expr><lambda><name pos:line="46" pos:column="31">c</name> <op:operator pos:line="46" pos:column="33">=&gt;</op:operator> <name><name pos:line="46" pos:column="36">c</name><op:operator pos:line="46" pos:column="37">.</op:operator><name pos:line="46" pos:column="38">PersistenceStore</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="46" pos:column="55">.</op:operator><call><name pos:line="46" pos:column="56">Returns</name><argument_list pos:line="46" pos:column="63">(<argument><expr><name><name pos:line="46" pos:column="64">persistenceStoreMock</name><op:operator pos:line="46" pos:column="84">.</op:operator><name pos:line="46" pos:column="85">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="48" pos:column="13">var</name></type> <name pos:line="48" pos:column="17">resource</name> <init pos:line="48" pos:column="26">= <expr><op:operator pos:line="48" pos:column="28">new</op:operator> <call><name pos:line="48" pos:column="32">RequestResource</name><argument_list pos:line="48" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="50" pos:column="13">var</name></type> <name pos:line="50" pos:column="17">result</name> <init pos:line="50" pos:column="24">= <expr><call><name><name pos:line="50" pos:column="26">resource</name><op:operator pos:line="50" pos:column="34">.</op:operator><name pos:line="50" pos:column="35">Execute</name></name><argument_list pos:line="50" pos:column="42">(<argument><expr><name><name pos:line="50" pos:column="43">contextMock</name><op:operator pos:line="50" pos:column="54">.</op:operator><name pos:line="50" pos:column="55">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="52" pos:column="13">Assert</name><op:operator pos:line="52" pos:column="19">.</op:operator><name pos:line="52" pos:column="20">NotNull</name></name><argument_list pos:line="52" pos:column="27">(<argument><expr><name pos:line="52" pos:column="28">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="55" pos:column="9">[<expr><name pos:line="55" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="56" pos:column="9">public</specifier> <name pos:line="56" pos:column="16">void</name></type> <name pos:line="56" pos:column="21">ReturnStatusCodeResultWithImproperRequestId</name><parameter_list pos:line="56" pos:column="64">()</parameter_list>
        <block pos:line="57" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="58" pos:column="13">var</name></type> <name pos:line="58" pos:column="17">guid</name> <init pos:line="58" pos:column="22">= <expr><call><name><name pos:line="58" pos:column="24">Guid</name><op:operator pos:line="58" pos:column="28">.</op:operator><name pos:line="58" pos:column="29">Parse</name></name><argument_list pos:line="58" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="58" pos:column="35">"321caff1-f442-4dbb-8c5b-3ed528cde3fd"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="59" pos:column="13">var</name></type> <name pos:line="59" pos:column="17">metadataMock</name> <init pos:line="59" pos:column="30">= <expr><op:operator pos:line="59" pos:column="32">new</op:operator> <call><name><name pos:line="59" pos:column="36">Mock</name><argument_list pos:line="59" pos:column="40">&lt;<argument><name pos:line="59" pos:column="41">IRequestMetadata</name></argument>&gt;</argument_list></name><argument_list pos:line="59" pos:column="58">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="60" pos:column="13">var</name></type> <name pos:line="60" pos:column="17">persistenceStoreMock</name> <init pos:line="60" pos:column="38">= <expr><op:operator pos:line="60" pos:column="40">new</op:operator> <call><name><name pos:line="60" pos:column="44">Mock</name><argument_list pos:line="60" pos:column="48">&lt;<argument><name pos:line="60" pos:column="49">IReadOnlyPersistenceStore</name></argument>&gt;</argument_list></name><argument_list pos:line="60" pos:column="75">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="61" pos:column="13">persistenceStoreMock</name><op:operator pos:line="61" pos:column="33">.</op:operator><name pos:line="61" pos:column="34">Setup</name></name><argument_list pos:line="61" pos:column="39">(<argument><expr><lambda><name pos:line="61" pos:column="40">ps</name> <op:operator pos:line="61" pos:column="43">=&gt;</op:operator> <call><name><name pos:line="61" pos:column="46">ps</name><op:operator pos:line="61" pos:column="48">.</op:operator><name pos:line="61" pos:column="49">GetByRequestId</name></name><argument_list pos:line="61" pos:column="63">(<argument><expr><name pos:line="61" pos:column="64">guid</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="61" pos:column="70">.</op:operator><call><name pos:line="61" pos:column="71">Returns</name><argument_list pos:line="61" pos:column="78">(<argument><expr><op:operator pos:line="61" pos:column="79">new</op:operator> <call><name pos:line="61" pos:column="83">GlimpseRequest</name><argument_list pos:line="61" pos:column="97">(<argument><expr><name pos:line="61" pos:column="98">guid</name></expr></argument>, <argument><expr><name><name pos:line="61" pos:column="104">metadataMock</name><op:operator pos:line="61" pos:column="116">.</op:operator><name pos:line="61" pos:column="117">Object</name></name></expr></argument>, <argument><expr><op:operator pos:line="61" pos:column="125">new</op:operator> <call><name><name pos:line="61" pos:column="129">Dictionary</name><argument_list pos:line="61" pos:column="139">&lt;<argument><name pos:line="61" pos:column="140">string</name></argument>, <argument><name pos:line="61" pos:column="148">TabResult</name></argument>&gt;</argument_list></name><argument_list pos:line="61" pos:column="158">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="61" pos:column="162">new</op:operator> <call><name><name pos:line="61" pos:column="166">Dictionary</name><argument_list pos:line="61" pos:column="176">&lt;<argument><name pos:line="61" pos:column="177">string</name></argument>, <argument><name pos:line="61" pos:column="185">TabResult</name></argument>&gt;</argument_list></name><argument_list pos:line="61" pos:column="195">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="61" pos:column="199">TimeSpan</name><op:operator pos:line="61" pos:column="207">.</op:operator><name pos:line="61" pos:column="208">FromMilliseconds</name></name><argument_list pos:line="61" pos:column="224">(<argument><expr><lit:literal type="number" pos:line="61" pos:column="225">0</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="62" pos:column="13">var</name></type> <name pos:line="62" pos:column="17">contextMock</name> <init pos:line="62" pos:column="29">= <expr><op:operator pos:line="62" pos:column="31">new</op:operator> <call><name><name pos:line="62" pos:column="35">Mock</name><argument_list pos:line="62" pos:column="39">&lt;<argument><name pos:line="62" pos:column="40">IResourceContext</name></argument>&gt;</argument_list></name><argument_list pos:line="62" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="63" pos:column="13">contextMock</name><op:operator pos:line="63" pos:column="24">.</op:operator><name pos:line="63" pos:column="25">Setup</name></name><argument_list pos:line="63" pos:column="30">(<argument><expr><lambda><name pos:line="63" pos:column="31">c</name> <op:operator pos:line="63" pos:column="33">=&gt;</op:operator> <name><name pos:line="63" pos:column="36">c</name><op:operator pos:line="63" pos:column="37">.</op:operator><name pos:line="63" pos:column="38">Parameters</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="63" pos:column="49">.</op:operator><call><name pos:line="63" pos:column="50">Returns</name><argument_list pos:line="63" pos:column="57">(<argument><expr><op:operator pos:line="63" pos:column="58">new</op:operator> <name><name pos:line="63" pos:column="62">Dictionary</name><argument_list pos:line="63" pos:column="72">&lt;<argument><name pos:line="63" pos:column="73">string</name></argument>, <argument><name pos:line="63" pos:column="81">string</name></argument>&gt;</argument_list></name> <block pos:line="63" pos:column="89">{ <expr><block pos:line="63" pos:column="91">{ <expr><name><name pos:line="63" pos:column="93">ResourceParameter</name><op:operator pos:line="63" pos:column="110">.</op:operator><name pos:line="63" pos:column="111">RequestId</name><op:operator pos:line="63" pos:column="120">.</op:operator><name pos:line="63" pos:column="121">Name</name></name></expr><op:operator pos:line="63" pos:column="125">,</op:operator> <expr><lit:literal type="string" pos:line="63" pos:column="127">"Not a real guid"</lit:literal></expr> }</block></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="64" pos:column="13">contextMock</name><op:operator pos:line="64" pos:column="24">.</op:operator><name pos:line="64" pos:column="25">Setup</name></name><argument_list pos:line="64" pos:column="30">(<argument><expr><lambda><name pos:line="64" pos:column="31">c</name> <op:operator pos:line="64" pos:column="33">=&gt;</op:operator> <name><name pos:line="64" pos:column="36">c</name><op:operator pos:line="64" pos:column="37">.</op:operator><name pos:line="64" pos:column="38">PersistenceStore</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="64" pos:column="55">.</op:operator><call><name pos:line="64" pos:column="56">Returns</name><argument_list pos:line="64" pos:column="63">(<argument><expr><name><name pos:line="64" pos:column="64">persistenceStoreMock</name><op:operator pos:line="64" pos:column="84">.</op:operator><name pos:line="64" pos:column="85">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="66" pos:column="13">var</name></type> <name pos:line="66" pos:column="17">resource</name> <init pos:line="66" pos:column="26">= <expr><op:operator pos:line="66" pos:column="28">new</op:operator> <call><name pos:line="66" pos:column="32">RequestResource</name><argument_list pos:line="66" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="68" pos:column="13">var</name></type> <name pos:line="68" pos:column="17">result</name> <init pos:line="68" pos:column="24">= <expr><call><name><name pos:line="68" pos:column="26">resource</name><op:operator pos:line="68" pos:column="34">.</op:operator><name pos:line="68" pos:column="35">Execute</name></name><argument_list pos:line="68" pos:column="42">(<argument><expr><name><name pos:line="68" pos:column="43">contextMock</name><op:operator pos:line="68" pos:column="54">.</op:operator><name pos:line="68" pos:column="55">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="70" pos:column="13">Assert</name><op:operator pos:line="70" pos:column="19">.</op:operator><name pos:line="70" pos:column="20">NotNull</name></name><argument_list pos:line="70" pos:column="27">(<argument><expr><name pos:line="70" pos:column="28">result</name> <op:operator pos:line="70" pos:column="35">as</op:operator> <name pos:line="70" pos:column="38">StatusCodeResourceResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="73" pos:column="9">[<expr><name pos:line="73" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="74" pos:column="9">public</specifier> <name pos:line="74" pos:column="16">void</name></type> <name pos:line="74" pos:column="21">ReturnStatusCodeResultWithMissingData</name><parameter_list pos:line="74" pos:column="58">()</parameter_list>
        <block pos:line="75" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="76" pos:column="13">var</name></type> <name pos:line="76" pos:column="17">guid</name> <init pos:line="76" pos:column="22">= <expr><call><name><name pos:line="76" pos:column="24">Guid</name><op:operator pos:line="76" pos:column="28">.</op:operator><name pos:line="76" pos:column="29">Parse</name></name><argument_list pos:line="76" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="76" pos:column="35">"321caff1-f442-4dbb-8c5b-3ed528cde3fd"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="77" pos:column="13">var</name></type> <name pos:line="77" pos:column="17">persistenceStoreMock</name> <init pos:line="77" pos:column="38">= <expr><op:operator pos:line="77" pos:column="40">new</op:operator> <call><name><name pos:line="77" pos:column="44">Mock</name><argument_list pos:line="77" pos:column="48">&lt;<argument><name pos:line="77" pos:column="49">IReadOnlyPersistenceStore</name></argument>&gt;</argument_list></name><argument_list pos:line="77" pos:column="75">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="78" pos:column="13">persistenceStoreMock</name><op:operator pos:line="78" pos:column="33">.</op:operator><name pos:line="78" pos:column="34">Setup</name></name><argument_list pos:line="78" pos:column="39">(<argument><expr><lambda><name pos:line="78" pos:column="40">ps</name> <op:operator pos:line="78" pos:column="43">=&gt;</op:operator> <call><name><name pos:line="78" pos:column="46">ps</name><op:operator pos:line="78" pos:column="48">.</op:operator><name pos:line="78" pos:column="49">GetByRequestId</name></name><argument_list pos:line="78" pos:column="63">(<argument><expr><name pos:line="78" pos:column="64">guid</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="78" pos:column="70">.</op:operator><call><name><name pos:line="78" pos:column="71">Returns</name><argument_list pos:line="78" pos:column="78">&lt;<argument><name pos:line="78" pos:column="79">GlimpseRequest</name></argument>&gt;</argument_list></name><argument_list pos:line="78" pos:column="94">(<argument><expr><name pos:line="78" pos:column="95">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="79" pos:column="13">var</name></type> <name pos:line="79" pos:column="17">contextMock</name> <init pos:line="79" pos:column="29">= <expr><op:operator pos:line="79" pos:column="31">new</op:operator> <call><name><name pos:line="79" pos:column="35">Mock</name><argument_list pos:line="79" pos:column="39">&lt;<argument><name pos:line="79" pos:column="40">IResourceContext</name></argument>&gt;</argument_list></name><argument_list pos:line="79" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="80" pos:column="13">contextMock</name><op:operator pos:line="80" pos:column="24">.</op:operator><name pos:line="80" pos:column="25">Setup</name></name><argument_list pos:line="80" pos:column="30">(<argument><expr><lambda><name pos:line="80" pos:column="31">c</name> <op:operator pos:line="80" pos:column="33">=&gt;</op:operator> <name><name pos:line="80" pos:column="36">c</name><op:operator pos:line="80" pos:column="37">.</op:operator><name pos:line="80" pos:column="38">Parameters</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="80" pos:column="49">.</op:operator><call><name pos:line="80" pos:column="50">Returns</name><argument_list pos:line="80" pos:column="57">(<argument><expr><op:operator pos:line="80" pos:column="58">new</op:operator> <name><name pos:line="80" pos:column="62">Dictionary</name><argument_list pos:line="80" pos:column="72">&lt;<argument><name pos:line="80" pos:column="73">string</name></argument>, <argument><name pos:line="80" pos:column="81">string</name></argument>&gt;</argument_list></name> <block pos:line="80" pos:column="89">{ <expr><block pos:line="80" pos:column="91">{ <expr><name><name pos:line="80" pos:column="93">ResourceParameter</name><op:operator pos:line="80" pos:column="110">.</op:operator><name pos:line="80" pos:column="111">RequestId</name><op:operator pos:line="80" pos:column="120">.</op:operator><name pos:line="80" pos:column="121">Name</name></name></expr><op:operator pos:line="80" pos:column="125">,</op:operator> <expr><call><name><name pos:line="80" pos:column="127">guid</name><op:operator pos:line="80" pos:column="131">.</op:operator><name pos:line="80" pos:column="132">ToString</name></name><argument_list pos:line="80" pos:column="140">()</argument_list></call></expr> }</block></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="81" pos:column="13">contextMock</name><op:operator pos:line="81" pos:column="24">.</op:operator><name pos:line="81" pos:column="25">Setup</name></name><argument_list pos:line="81" pos:column="30">(<argument><expr><lambda><name pos:line="81" pos:column="31">c</name> <op:operator pos:line="81" pos:column="33">=&gt;</op:operator> <name><name pos:line="81" pos:column="36">c</name><op:operator pos:line="81" pos:column="37">.</op:operator><name pos:line="81" pos:column="38">PersistenceStore</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="81" pos:column="55">.</op:operator><call><name pos:line="81" pos:column="56">Returns</name><argument_list pos:line="81" pos:column="63">(<argument><expr><name><name pos:line="81" pos:column="64">persistenceStoreMock</name><op:operator pos:line="81" pos:column="84">.</op:operator><name pos:line="81" pos:column="85">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="83" pos:column="13">var</name></type> <name pos:line="83" pos:column="17">resource</name> <init pos:line="83" pos:column="26">= <expr><op:operator pos:line="83" pos:column="28">new</op:operator> <call><name pos:line="83" pos:column="32">RequestResource</name><argument_list pos:line="83" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="85" pos:column="13">var</name></type> <name pos:line="85" pos:column="17">result</name> <init pos:line="85" pos:column="24">= <expr><call><name><name pos:line="85" pos:column="26">resource</name><op:operator pos:line="85" pos:column="34">.</op:operator><name pos:line="85" pos:column="35">Execute</name></name><argument_list pos:line="85" pos:column="42">(<argument><expr><name><name pos:line="85" pos:column="43">contextMock</name><op:operator pos:line="85" pos:column="54">.</op:operator><name pos:line="85" pos:column="55">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="87" pos:column="13">Assert</name><op:operator pos:line="87" pos:column="19">.</op:operator><name pos:line="87" pos:column="20">NotNull</name></name><argument_list pos:line="87" pos:column="27">(<argument><expr><name pos:line="87" pos:column="28">result</name> <op:operator pos:line="87" pos:column="35">as</op:operator> <name pos:line="87" pos:column="38">StatusCodeResourceResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
