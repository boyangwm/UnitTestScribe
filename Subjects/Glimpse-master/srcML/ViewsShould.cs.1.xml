<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Mvc\Tab\ViewsShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Web</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Core</name><op:operator pos:line="4" pos:column="19">.</op:operator><name pos:line="4" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Glimpse</name><op:operator pos:line="5" pos:column="14">.</op:operator><name pos:line="5" pos:column="15">Mvc</name><op:operator pos:line="5" pos:column="18">.</op:operator><name pos:line="5" pos:column="19">AlternateType</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Glimpse</name><op:operator pos:line="6" pos:column="14">.</op:operator><name pos:line="6" pos:column="15">Mvc</name><op:operator pos:line="6" pos:column="18">.</op:operator><name pos:line="6" pos:column="19">Model</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Glimpse</name><op:operator pos:line="7" pos:column="14">.</op:operator><name pos:line="7" pos:column="15">Mvc</name><op:operator pos:line="7" pos:column="18">.</op:operator><name pos:line="7" pos:column="19">Tab</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Glimpse</name><op:operator pos:line="8" pos:column="14">.</op:operator><name pos:line="8" pos:column="15">Test</name><op:operator pos:line="8" pos:column="19">.</op:operator><name pos:line="8" pos:column="20">Common</name></name>;</using>
<using pos:line="9" pos:column="1">using <name pos:line="9" pos:column="7">Moq</name>;</using>
<using pos:line="10" pos:column="1">using <name pos:line="10" pos:column="7">Xunit</name>;</using>
<using pos:line="11" pos:column="1">using <name><name pos:line="11" pos:column="7">Xunit</name><op:operator pos:line="11" pos:column="12">.</op:operator><name pos:line="11" pos:column="13">Extensions</name></name>;</using>

<namespace pos:line="13" pos:column="1">namespace <name><name pos:line="13" pos:column="11">Glimpse</name><op:operator pos:line="13" pos:column="18">.</op:operator><name pos:line="13" pos:column="19">Test</name><op:operator pos:line="13" pos:column="23">.</op:operator><name pos:line="13" pos:column="24">Mvc</name><op:operator pos:line="13" pos:column="27">.</op:operator><name pos:line="13" pos:column="28">Tab</name></name>
<block pos:line="14" pos:column="1">{
    <class><specifier pos:line="15" pos:column="5">public</specifier> class <name pos:line="15" pos:column="18">ViewsShould</name>
    <block pos:line="16" pos:column="5">{
        <function><type><attribute pos:line="17" pos:column="9">[<expr><name pos:line="17" pos:column="10">Theory</name></expr><op:operator pos:line="17" pos:column="16">,</op:operator> <expr><name pos:line="17" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="18" pos:column="9">public</specifier> <name pos:line="18" pos:column="16">void</name></type> <name pos:line="18" pos:column="21">Construct</name><parameter_list pos:line="18" pos:column="30">(<param><decl><type><name pos:line="18" pos:column="31">Views</name></type> <name pos:line="18" pos:column="37">sut</name></decl></param>)</parameter_list>
        <block pos:line="19" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="20" pos:column="13">Assert</name><op:operator pos:line="20" pos:column="19">.</op:operator><name><name pos:line="20" pos:column="20">IsAssignableFrom</name><argument_list pos:line="20" pos:column="36">&lt;<argument><name pos:line="20" pos:column="37">ITab</name></argument>&gt;</argument_list></name></name><argument_list pos:line="20" pos:column="42">(<argument><expr><name pos:line="20" pos:column="43">sut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="21" pos:column="13">Assert</name><op:operator pos:line="21" pos:column="19">.</op:operator><name><name pos:line="21" pos:column="20">IsAssignableFrom</name><argument_list pos:line="21" pos:column="36">&lt;<argument><name pos:line="21" pos:column="37">ITabSetup</name></argument>&gt;</argument_list></name></name><argument_list pos:line="21" pos:column="47">(<argument><expr><name pos:line="21" pos:column="48">sut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="24" pos:column="9">[<expr><name pos:line="24" pos:column="10">Theory</name></expr><op:operator pos:line="24" pos:column="16">,</op:operator> <expr><name pos:line="24" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="25" pos:column="9">public</specifier> <name pos:line="25" pos:column="16">void</name></type> <name pos:line="25" pos:column="21">ExecuteOnEndRequest</name><parameter_list pos:line="25" pos:column="40">(<param><decl><type><name pos:line="25" pos:column="41">Views</name></type> <name pos:line="25" pos:column="47">sut</name></decl></param>)</parameter_list>
        <block pos:line="26" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="27" pos:column="13">Assert</name><op:operator pos:line="27" pos:column="19">.</op:operator><name pos:line="27" pos:column="20">Equal</name></name><argument_list pos:line="27" pos:column="25">(<argument><expr><name><name pos:line="27" pos:column="26">RuntimeEvent</name><op:operator pos:line="27" pos:column="38">.</op:operator><name pos:line="27" pos:column="39">EndRequest</name></name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="51">sut</name><op:operator pos:line="27" pos:column="54">.</op:operator><name pos:line="27" pos:column="55">ExecuteOn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="30" pos:column="9">[<expr><name pos:line="30" pos:column="10">Theory</name></expr><op:operator pos:line="30" pos:column="16">,</op:operator> <expr><name pos:line="30" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="31" pos:column="9">public</specifier> <name pos:line="31" pos:column="16">void</name></type> <name pos:line="31" pos:column="21">HaveHttpContextBase</name><parameter_list pos:line="31" pos:column="40">(<param><decl><type><name pos:line="31" pos:column="41">Views</name></type> <name pos:line="31" pos:column="47">sut</name></decl></param>)</parameter_list>
        <block pos:line="32" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="33" pos:column="13">Assert</name><op:operator pos:line="33" pos:column="19">.</op:operator><name pos:line="33" pos:column="20">Equal</name></name><argument_list pos:line="33" pos:column="25">(<argument><expr><call><name pos:line="33" pos:column="26">typeof</name><argument_list pos:line="33" pos:column="32">(<argument><expr><name pos:line="33" pos:column="33">HttpContextBase</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="51">sut</name><op:operator pos:line="33" pos:column="54">.</op:operator><name pos:line="33" pos:column="55">RequestContextType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="36" pos:column="9">[<expr><name pos:line="36" pos:column="10">Theory</name></expr><op:operator pos:line="36" pos:column="16">,</op:operator> <expr><name pos:line="36" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="37" pos:column="9">public</specifier> <name pos:line="37" pos:column="16">void</name></type> <name pos:line="37" pos:column="21">HaveProperName</name><parameter_list pos:line="37" pos:column="35">(<param><decl><type><name pos:line="37" pos:column="36">Views</name></type> <name pos:line="37" pos:column="42">sut</name></decl></param>)</parameter_list>
        <block pos:line="38" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="39" pos:column="13">Assert</name><op:operator pos:line="39" pos:column="19">.</op:operator><name pos:line="39" pos:column="20">Equal</name></name><argument_list pos:line="39" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="39" pos:column="26">"Views"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="39" pos:column="35">sut</name><op:operator pos:line="39" pos:column="38">.</op:operator><name pos:line="39" pos:column="39">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="42" pos:column="9">[<expr><name pos:line="42" pos:column="10">Theory</name></expr><op:operator pos:line="42" pos:column="16">,</op:operator> <expr><name pos:line="42" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="43" pos:column="9">public</specifier> <name pos:line="43" pos:column="16">void</name></type> <name pos:line="43" pos:column="21">SubscribeToViewMessageTypes</name><parameter_list pos:line="43" pos:column="48">(<param><decl><type><name pos:line="43" pos:column="49">Views</name></type> <name pos:line="43" pos:column="55">sut</name></decl></param>, <param><decl><type><name pos:line="43" pos:column="60">ITabSetupContext</name></type> <name pos:line="43" pos:column="77">context</name></decl></param>)</parameter_list>
        <block pos:line="44" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="45" pos:column="13">sut</name><op:operator pos:line="45" pos:column="16">.</op:operator><name pos:line="45" pos:column="17">Setup</name></name><argument_list pos:line="45" pos:column="22">(<argument><expr><name pos:line="45" pos:column="23">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="47" pos:column="13">context</name><op:operator pos:line="47" pos:column="20">.</op:operator><name pos:line="47" pos:column="21">MessageBroker</name><op:operator pos:line="47" pos:column="34">.</op:operator><name pos:line="47" pos:column="35">Verify</name></name><argument_list pos:line="47" pos:column="41">(<argument><expr><lambda><name pos:line="47" pos:column="42">mb</name> <op:operator pos:line="47" pos:column="45">=&gt;</op:operator> <call><name><name pos:line="47" pos:column="48">mb</name><op:operator pos:line="47" pos:column="50">.</op:operator><name pos:line="47" pos:column="51">Subscribe</name></name><argument_list pos:line="47" pos:column="60">(<argument><expr><call><name><name pos:line="47" pos:column="61">It</name><op:operator pos:line="47" pos:column="63">.</op:operator><name><name pos:line="47" pos:column="64">IsAny</name><argument_list pos:line="47" pos:column="69">&lt;<argument><name><name pos:line="47" pos:column="70">Action</name><argument_list pos:line="47" pos:column="76">&lt;<argument><name><name pos:line="47" pos:column="77">ViewEngine</name><op:operator pos:line="47" pos:column="87">.</op:operator><name pos:line="47" pos:column="88">FindViews</name><op:operator pos:line="47" pos:column="97">.</op:operator><name pos:line="47" pos:column="98">Message</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name><argument_list pos:line="47" pos:column="107">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="48" pos:column="13">context</name><op:operator pos:line="48" pos:column="20">.</op:operator><name pos:line="48" pos:column="21">MessageBroker</name><op:operator pos:line="48" pos:column="34">.</op:operator><name pos:line="48" pos:column="35">Verify</name></name><argument_list pos:line="48" pos:column="41">(<argument><expr><lambda><name pos:line="48" pos:column="42">mb</name> <op:operator pos:line="48" pos:column="45">=&gt;</op:operator> <call><name><name pos:line="48" pos:column="48">mb</name><op:operator pos:line="48" pos:column="50">.</op:operator><name pos:line="48" pos:column="51">Subscribe</name></name><argument_list pos:line="48" pos:column="60">(<argument><expr><call><name><name pos:line="48" pos:column="61">It</name><op:operator pos:line="48" pos:column="63">.</op:operator><name><name pos:line="48" pos:column="64">IsAny</name><argument_list pos:line="48" pos:column="69">&lt;<argument><name><name pos:line="48" pos:column="70">Action</name><argument_list pos:line="48" pos:column="76">&lt;<argument><name><name pos:line="48" pos:column="77">View</name><op:operator pos:line="48" pos:column="81">.</op:operator><name pos:line="48" pos:column="82">Render</name><op:operator pos:line="48" pos:column="88">.</op:operator><name pos:line="48" pos:column="89">Message</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name><argument_list pos:line="48" pos:column="98">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="51" pos:column="9">[<expr><name pos:line="51" pos:column="10">Theory</name></expr><op:operator pos:line="51" pos:column="16">,</op:operator> <expr><name pos:line="51" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="52" pos:column="9">public</specifier> <name pos:line="52" pos:column="16">void</name></type> <name pos:line="52" pos:column="21">HandleNullFindViewMessageCollection</name><parameter_list pos:line="52" pos:column="56">(<param><decl><type><name pos:line="52" pos:column="57">Views</name></type> <name pos:line="52" pos:column="63">sut</name></decl></param>, <param><decl><type><name pos:line="52" pos:column="68">ITabContext</name></type> <name pos:line="52" pos:column="80">context</name></decl></param>)</parameter_list>
        <block pos:line="53" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="54" pos:column="13">context</name><op:operator pos:line="54" pos:column="20">.</op:operator><name pos:line="54" pos:column="21">TabStore</name><op:operator pos:line="54" pos:column="29">.</op:operator><name pos:line="54" pos:column="30">Setup</name></name><argument_list pos:line="54" pos:column="35">(<argument><expr><lambda><name pos:line="54" pos:column="36">ds</name> <op:operator pos:line="54" pos:column="39">=&gt;</op:operator> <call><name><name pos:line="54" pos:column="42">ds</name><op:operator pos:line="54" pos:column="44">.</op:operator><name pos:line="54" pos:column="45">Get</name></name><argument_list pos:line="54" pos:column="48">(<argument><expr><call><name pos:line="54" pos:column="49">typeof</name><argument_list pos:line="54" pos:column="55">(<argument><expr><name><name pos:line="54" pos:column="56">IList</name><argument_list pos:line="54" pos:column="61">&lt;<argument><name><name pos:line="54" pos:column="62">ViewEngine</name><op:operator pos:line="54" pos:column="72">.</op:operator><name pos:line="54" pos:column="73">FindViews</name><op:operator pos:line="54" pos:column="82">.</op:operator><name pos:line="54" pos:column="83">Message</name></name></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call><op:operator pos:line="54" pos:column="92">.</op:operator><name pos:line="54" pos:column="93">AssemblyQualifiedName</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="54" pos:column="116">.</op:operator><call><name><name pos:line="54" pos:column="117">Returns</name><argument_list pos:line="54" pos:column="124">&lt;<argument><name><name pos:line="54" pos:column="125">List</name><argument_list pos:line="54" pos:column="129">&lt;<argument><name><name pos:line="54" pos:column="130">ViewEngine</name><op:operator pos:line="54" pos:column="140">.</op:operator><name pos:line="54" pos:column="141">FindViews</name><op:operator pos:line="54" pos:column="150">.</op:operator><name pos:line="54" pos:column="151">Message</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list pos:line="54" pos:column="160">(<argument><expr><name pos:line="54" pos:column="161">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="55" pos:column="13">context</name><op:operator pos:line="55" pos:column="20">.</op:operator><name pos:line="55" pos:column="21">TabStore</name><op:operator pos:line="55" pos:column="29">.</op:operator><name pos:line="55" pos:column="30">Setup</name></name><argument_list pos:line="55" pos:column="35">(<argument><expr><lambda><name pos:line="55" pos:column="36">ds</name> <op:operator pos:line="55" pos:column="39">=&gt;</op:operator> <call><name><name pos:line="55" pos:column="42">ds</name><op:operator pos:line="55" pos:column="44">.</op:operator><name pos:line="55" pos:column="45">Get</name></name><argument_list pos:line="55" pos:column="48">(<argument><expr><call><name pos:line="55" pos:column="49">typeof</name><argument_list pos:line="55" pos:column="55">(<argument><expr><name><name pos:line="55" pos:column="56">IList</name><argument_list pos:line="55" pos:column="61">&lt;<argument><name><name pos:line="55" pos:column="62">View</name><op:operator pos:line="55" pos:column="66">.</op:operator><name pos:line="55" pos:column="67">Render</name><op:operator pos:line="55" pos:column="73">.</op:operator><name pos:line="55" pos:column="74">Message</name></name></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call><op:operator pos:line="55" pos:column="83">.</op:operator><name pos:line="55" pos:column="84">AssemblyQualifiedName</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="55" pos:column="107">.</op:operator><call><name pos:line="55" pos:column="108">Returns</name><argument_list pos:line="55" pos:column="115">(<argument><expr><op:operator pos:line="55" pos:column="116">new</op:operator> <call><name><name pos:line="55" pos:column="120">List</name><argument_list pos:line="55" pos:column="124">&lt;<argument><name><name pos:line="55" pos:column="125">View</name><op:operator pos:line="55" pos:column="129">.</op:operator><name pos:line="55" pos:column="130">Render</name><op:operator pos:line="55" pos:column="136">.</op:operator><name pos:line="55" pos:column="137">Message</name></name></argument>&gt;</argument_list></name><argument_list pos:line="55" pos:column="145">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="57" pos:column="13">Assert</name><op:operator pos:line="57" pos:column="19">.</op:operator><name pos:line="57" pos:column="20">DoesNotThrow</name></name><argument_list pos:line="57" pos:column="32">(<argument><expr><lambda><parameter_list pos:line="57" pos:column="33">()</parameter_list> <op:operator pos:line="57" pos:column="36">=&gt;</op:operator> <call><name><name pos:line="57" pos:column="39">sut</name><op:operator pos:line="57" pos:column="42">.</op:operator><name pos:line="57" pos:column="43">GetData</name></name><argument_list pos:line="57" pos:column="50">(<argument><expr><name pos:line="57" pos:column="51">context</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="60" pos:column="9">[<expr><name pos:line="60" pos:column="10">Theory</name></expr><op:operator pos:line="60" pos:column="16">,</op:operator> <expr><name pos:line="60" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="61" pos:column="9">public</specifier> <name pos:line="61" pos:column="16">void</name></type> <name pos:line="61" pos:column="21">HandleNullViewRenderMessageCollection</name><parameter_list pos:line="61" pos:column="58">(<param><decl><type><name pos:line="61" pos:column="59">Views</name></type> <name pos:line="61" pos:column="65">sut</name></decl></param>, <param><decl><type><name pos:line="61" pos:column="70">ITabContext</name></type> <name pos:line="61" pos:column="82">context</name></decl></param>)</parameter_list>
        <block pos:line="62" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="63" pos:column="13">context</name><op:operator pos:line="63" pos:column="20">.</op:operator><name pos:line="63" pos:column="21">TabStore</name><op:operator pos:line="63" pos:column="29">.</op:operator><name pos:line="63" pos:column="30">Setup</name></name><argument_list pos:line="63" pos:column="35">(<argument><expr><lambda><name pos:line="63" pos:column="36">ds</name> <op:operator pos:line="63" pos:column="39">=&gt;</op:operator> <call><name><name pos:line="63" pos:column="42">ds</name><op:operator pos:line="63" pos:column="44">.</op:operator><name pos:line="63" pos:column="45">Get</name></name><argument_list pos:line="63" pos:column="48">(<argument><expr><call><name pos:line="63" pos:column="49">typeof</name><argument_list pos:line="63" pos:column="55">(<argument><expr><name><name pos:line="63" pos:column="56">IList</name><argument_list pos:line="63" pos:column="61">&lt;<argument><name><name pos:line="63" pos:column="62">ViewEngine</name><op:operator pos:line="63" pos:column="72">.</op:operator><name pos:line="63" pos:column="73">FindViews</name><op:operator pos:line="63" pos:column="82">.</op:operator><name pos:line="63" pos:column="83">Message</name></name></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call><op:operator pos:line="63" pos:column="92">.</op:operator><name pos:line="63" pos:column="93">AssemblyQualifiedName</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="63" pos:column="116">.</op:operator><call><name pos:line="63" pos:column="117">Returns</name><argument_list pos:line="63" pos:column="124">(<argument><expr><op:operator pos:line="63" pos:column="125">new</op:operator> <call><name><name pos:line="63" pos:column="129">List</name><argument_list pos:line="63" pos:column="133">&lt;<argument><name><name pos:line="63" pos:column="134">ViewEngine</name><op:operator pos:line="63" pos:column="144">.</op:operator><name pos:line="63" pos:column="145">FindViews</name><op:operator pos:line="63" pos:column="154">.</op:operator><name pos:line="63" pos:column="155">Message</name></name></argument>&gt;</argument_list></name><argument_list pos:line="63" pos:column="163">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="64" pos:column="13">context</name><op:operator pos:line="64" pos:column="20">.</op:operator><name pos:line="64" pos:column="21">TabStore</name><op:operator pos:line="64" pos:column="29">.</op:operator><name pos:line="64" pos:column="30">Setup</name></name><argument_list pos:line="64" pos:column="35">(<argument><expr><lambda><name pos:line="64" pos:column="36">ds</name> <op:operator pos:line="64" pos:column="39">=&gt;</op:operator> <call><name><name pos:line="64" pos:column="42">ds</name><op:operator pos:line="64" pos:column="44">.</op:operator><name pos:line="64" pos:column="45">Get</name></name><argument_list pos:line="64" pos:column="48">(<argument><expr><call><name pos:line="64" pos:column="49">typeof</name><argument_list pos:line="64" pos:column="55">(<argument><expr><name><name pos:line="64" pos:column="56">IList</name><argument_list pos:line="64" pos:column="61">&lt;<argument><name><name pos:line="64" pos:column="62">View</name><op:operator pos:line="64" pos:column="66">.</op:operator><name pos:line="64" pos:column="67">Render</name><op:operator pos:line="64" pos:column="73">.</op:operator><name pos:line="64" pos:column="74">Message</name></name></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call><op:operator pos:line="64" pos:column="83">.</op:operator><name pos:line="64" pos:column="84">AssemblyQualifiedName</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="64" pos:column="107">.</op:operator><call><name><name pos:line="64" pos:column="108">Returns</name><argument_list pos:line="64" pos:column="115">&lt;<argument><name><name pos:line="64" pos:column="116">List</name><argument_list pos:line="64" pos:column="120">&lt;<argument><name><name pos:line="64" pos:column="121">View</name><op:operator pos:line="64" pos:column="125">.</op:operator><name pos:line="64" pos:column="126">Render</name><op:operator pos:line="64" pos:column="132">.</op:operator><name pos:line="64" pos:column="133">Message</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list pos:line="64" pos:column="142">(<argument><expr><name pos:line="64" pos:column="143">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="66" pos:column="13">Assert</name><op:operator pos:line="66" pos:column="19">.</op:operator><name pos:line="66" pos:column="20">DoesNotThrow</name></name><argument_list pos:line="66" pos:column="32">(<argument><expr><lambda><parameter_list pos:line="66" pos:column="33">()</parameter_list> <op:operator pos:line="66" pos:column="36">=&gt;</op:operator> <call><name><name pos:line="66" pos:column="39">sut</name><op:operator pos:line="66" pos:column="42">.</op:operator><name pos:line="66" pos:column="43">GetData</name></name><argument_list pos:line="66" pos:column="50">(<argument><expr><name pos:line="66" pos:column="51">context</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="69" pos:column="9">[<expr><name pos:line="69" pos:column="10">Theory</name></expr><op:operator pos:line="69" pos:column="16">,</op:operator> <expr><name pos:line="69" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="70" pos:column="9">public</specifier> <name pos:line="70" pos:column="16">void</name></type> <name pos:line="70" pos:column="21">ReturnResult</name><parameter_list pos:line="70" pos:column="33">(<param><decl><type><name pos:line="70" pos:column="34">Views</name></type> <name pos:line="70" pos:column="40">sut</name></decl></param>, <param><decl><type><name pos:line="70" pos:column="45">ITabContext</name></type> <name pos:line="70" pos:column="57">context</name></decl></param>, <param><decl><type><name><name pos:line="70" pos:column="66">View</name><op:operator pos:line="70" pos:column="70">.</op:operator><name pos:line="70" pos:column="71">Render</name><op:operator pos:line="70" pos:column="77">.</op:operator><name pos:line="70" pos:column="78">Arguments</name></name></type> <name pos:line="70" pos:column="88">renderArgs</name></decl></param>, <param><decl><type><name><name pos:line="70" pos:column="100">ViewEngine</name><op:operator pos:line="70" pos:column="110">.</op:operator><name pos:line="70" pos:column="111">FindViews</name><op:operator pos:line="70" pos:column="120">.</op:operator><name pos:line="70" pos:column="121">Message</name></name></type> <name pos:line="70" pos:column="129">findViewMessage</name></decl></param>, <param><decl><type><name><name pos:line="70" pos:column="146">View</name><op:operator pos:line="70" pos:column="150">.</op:operator><name pos:line="70" pos:column="151">Render</name><op:operator pos:line="70" pos:column="157">.</op:operator><name pos:line="70" pos:column="158">Message</name></name></type> <name pos:line="70" pos:column="166">renderMessage</name></decl></param>)</parameter_list>
        <block pos:line="71" pos:column="9">{ 
            <expr_stmt><expr><call><name><name pos:line="72" pos:column="13">context</name><op:operator pos:line="72" pos:column="20">.</op:operator><name pos:line="72" pos:column="21">TabStore</name><op:operator pos:line="72" pos:column="29">.</op:operator><name pos:line="72" pos:column="30">Setup</name></name><argument_list pos:line="72" pos:column="35">(<argument><expr><lambda><name pos:line="72" pos:column="36">ds</name> <op:operator pos:line="72" pos:column="39">=&gt;</op:operator> <call><name><name pos:line="72" pos:column="42">ds</name><op:operator pos:line="72" pos:column="44">.</op:operator><name pos:line="72" pos:column="45">Contains</name></name><argument_list pos:line="72" pos:column="53">(<argument><expr><call><name pos:line="72" pos:column="54">typeof</name><argument_list pos:line="72" pos:column="60">(<argument><expr><name><name pos:line="72" pos:column="61">IList</name><argument_list pos:line="72" pos:column="66">&lt;<argument><name><name pos:line="72" pos:column="67">ViewEngine</name><op:operator pos:line="72" pos:column="77">.</op:operator><name pos:line="72" pos:column="78">FindViews</name><op:operator pos:line="72" pos:column="87">.</op:operator><name pos:line="72" pos:column="88">Message</name></name></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call><op:operator pos:line="72" pos:column="97">.</op:operator><name pos:line="72" pos:column="98">AssemblyQualifiedName</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="72" pos:column="121">.</op:operator><call><name pos:line="72" pos:column="122">Returns</name><argument_list pos:line="72" pos:column="129">(<argument><expr><lit:literal type="boolean" pos:line="72" pos:column="130">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="73" pos:column="13">context</name><op:operator pos:line="73" pos:column="20">.</op:operator><name pos:line="73" pos:column="21">TabStore</name><op:operator pos:line="73" pos:column="29">.</op:operator><name pos:line="73" pos:column="30">Setup</name></name><argument_list pos:line="73" pos:column="35">(<argument><expr><lambda><name pos:line="73" pos:column="36">ds</name> <op:operator pos:line="73" pos:column="39">=&gt;</op:operator> <call><name><name pos:line="73" pos:column="42">ds</name><op:operator pos:line="73" pos:column="44">.</op:operator><name pos:line="73" pos:column="45">Get</name></name><argument_list pos:line="73" pos:column="48">(<argument><expr><call><name pos:line="73" pos:column="49">typeof</name><argument_list pos:line="73" pos:column="55">(<argument><expr><name><name pos:line="73" pos:column="56">IList</name><argument_list pos:line="73" pos:column="61">&lt;<argument><name><name pos:line="73" pos:column="62">ViewEngine</name><op:operator pos:line="73" pos:column="72">.</op:operator><name pos:line="73" pos:column="73">FindViews</name><op:operator pos:line="73" pos:column="82">.</op:operator><name pos:line="73" pos:column="83">Message</name></name></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call><op:operator pos:line="73" pos:column="92">.</op:operator><name pos:line="73" pos:column="93">AssemblyQualifiedName</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="73" pos:column="116">.</op:operator><call><name pos:line="73" pos:column="117">Returns</name><argument_list pos:line="73" pos:column="124">(<argument><expr><op:operator pos:line="73" pos:column="125">new</op:operator> <name><name pos:line="73" pos:column="129">List</name><argument_list pos:line="73" pos:column="133">&lt;<argument><name><name pos:line="73" pos:column="134">ViewEngine</name><op:operator pos:line="73" pos:column="144">.</op:operator><name pos:line="73" pos:column="145">FindViews</name><op:operator pos:line="73" pos:column="154">.</op:operator><name pos:line="73" pos:column="155">Message</name></name></argument>&gt;</argument_list></name> <block pos:line="73" pos:column="164">{ <expr><name pos:line="73" pos:column="166">findViewMessage</name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             
            <expr_stmt><expr><call><name><name pos:line="75" pos:column="13">context</name><op:operator pos:line="75" pos:column="20">.</op:operator><name pos:line="75" pos:column="21">TabStore</name><op:operator pos:line="75" pos:column="29">.</op:operator><name pos:line="75" pos:column="30">Setup</name></name><argument_list pos:line="75" pos:column="35">(<argument><expr><lambda><name pos:line="75" pos:column="36">ds</name> <op:operator pos:line="75" pos:column="39">=&gt;</op:operator> <call><name><name pos:line="75" pos:column="42">ds</name><op:operator pos:line="75" pos:column="44">.</op:operator><name pos:line="75" pos:column="45">Contains</name></name><argument_list pos:line="75" pos:column="53">(<argument><expr><call><name pos:line="75" pos:column="54">typeof</name><argument_list pos:line="75" pos:column="60">(<argument><expr><name><name pos:line="75" pos:column="61">IList</name><argument_list pos:line="75" pos:column="66">&lt;<argument><name><name pos:line="75" pos:column="67">View</name><op:operator pos:line="75" pos:column="71">.</op:operator><name pos:line="75" pos:column="72">Render</name><op:operator pos:line="75" pos:column="78">.</op:operator><name pos:line="75" pos:column="79">Message</name></name></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call><op:operator pos:line="75" pos:column="88">.</op:operator><name pos:line="75" pos:column="89">AssemblyQualifiedName</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="75" pos:column="112">.</op:operator><call><name pos:line="75" pos:column="113">Returns</name><argument_list pos:line="75" pos:column="120">(<argument><expr><lit:literal type="boolean" pos:line="75" pos:column="121">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="76" pos:column="13">context</name><op:operator pos:line="76" pos:column="20">.</op:operator><name pos:line="76" pos:column="21">TabStore</name><op:operator pos:line="76" pos:column="29">.</op:operator><name pos:line="76" pos:column="30">Setup</name></name><argument_list pos:line="76" pos:column="35">(<argument><expr><lambda><name pos:line="76" pos:column="36">ds</name> <op:operator pos:line="76" pos:column="39">=&gt;</op:operator> <call><name><name pos:line="76" pos:column="42">ds</name><op:operator pos:line="76" pos:column="44">.</op:operator><name pos:line="76" pos:column="45">Get</name></name><argument_list pos:line="76" pos:column="48">(<argument><expr><call><name pos:line="76" pos:column="49">typeof</name><argument_list pos:line="76" pos:column="55">(<argument><expr><name><name pos:line="76" pos:column="56">IList</name><argument_list pos:line="76" pos:column="61">&lt;<argument><name><name pos:line="76" pos:column="62">View</name><op:operator pos:line="76" pos:column="66">.</op:operator><name pos:line="76" pos:column="67">Render</name><op:operator pos:line="76" pos:column="73">.</op:operator><name pos:line="76" pos:column="74">Message</name></name></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call><op:operator pos:line="76" pos:column="83">.</op:operator><name pos:line="76" pos:column="84">AssemblyQualifiedName</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="76" pos:column="107">.</op:operator><call><name pos:line="76" pos:column="108">Returns</name><argument_list pos:line="76" pos:column="115">(<argument><expr><op:operator pos:line="76" pos:column="116">new</op:operator> <name><name pos:line="76" pos:column="120">List</name><argument_list pos:line="76" pos:column="124">&lt;<argument><name><name pos:line="76" pos:column="125">View</name><op:operator pos:line="76" pos:column="129">.</op:operator><name pos:line="76" pos:column="130">Render</name><op:operator pos:line="76" pos:column="136">.</op:operator><name pos:line="76" pos:column="137">Message</name></name></argument>&gt;</argument_list></name> <block pos:line="76" pos:column="146">{ <expr><name pos:line="76" pos:column="148">renderMessage</name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="78" pos:column="13">var</name></type> <name pos:line="78" pos:column="17">result</name> <init pos:line="78" pos:column="24">= <expr><call><name><name pos:line="78" pos:column="26">sut</name><op:operator pos:line="78" pos:column="29">.</op:operator><name pos:line="78" pos:column="30">GetData</name></name><argument_list pos:line="78" pos:column="37">(<argument><expr><name pos:line="78" pos:column="38">context</name></expr></argument>)</argument_list></call> <op:operator pos:line="78" pos:column="47">as</op:operator> <name><name pos:line="78" pos:column="50">List</name><argument_list pos:line="78" pos:column="54">&lt;<argument><name pos:line="78" pos:column="55">ViewsModel</name></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="80" pos:column="13">Assert</name><op:operator pos:line="80" pos:column="19">.</op:operator><name pos:line="80" pos:column="20">NotNull</name></name><argument_list pos:line="80" pos:column="27">(<argument><expr><name pos:line="80" pos:column="28">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="81" pos:column="13">Assert</name><op:operator pos:line="81" pos:column="19">.</op:operator><name pos:line="81" pos:column="20">NotEmpty</name></name><argument_list pos:line="81" pos:column="28">(<argument><expr><name pos:line="81" pos:column="29">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
