<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Core\SerializationConverter\CSharpTypeConverter.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Text</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Glimpse</name><op:operator pos:line="5" pos:column="14">.</op:operator><name pos:line="5" pos:column="15">Core</name><op:operator pos:line="5" pos:column="19">.</op:operator><name pos:line="5" pos:column="20">Extensibility</name></name>;</using>

<namespace pos:line="7" pos:column="1">namespace <name><name pos:line="7" pos:column="11">Glimpse</name><op:operator pos:line="7" pos:column="18">.</op:operator><name pos:line="7" pos:column="19">Core</name><op:operator pos:line="7" pos:column="23">.</op:operator><name pos:line="7" pos:column="24">SerializationConverter</name></name>
<block pos:line="8" pos:column="1">{
    <comment type="line" pos:line="9" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="10" pos:column="5">/// The &lt;see cref="ISerializationConverter"/&gt; implementation responsible converting &lt;see cref="Type"/&gt; representation's into more recognizable C# syntax.</comment>
    <comment type="line" pos:line="11" pos:column="5">/// &lt;/summary&gt;</comment>
    <comment type="line" pos:line="12" pos:column="5">/// &lt;example&gt;</comment>
    <comment type="line" pos:line="13" pos:column="5">/// With &lt;see cref="CSharpTypeConverter"/&gt;, &lt;c&gt;System.Int32&lt;/c&gt; is converted to &lt;c&gt;int&lt;/c&gt; and &lt;c&gt;System.Collections.Generic.IDictionary`2[System.Double, System.String[]]&lt;/c&gt; to &lt;c&gt;IDictionary&amp;lt;double, string[]&amp;gt;&lt;/c&gt;.</comment>
    <comment type="line" pos:line="14" pos:column="5">/// &lt;/example&gt;</comment>
    <comment type="line" pos:line="15" pos:column="5">/// &lt;remarks&gt;</comment>
    <comment type="line" pos:line="16" pos:column="5">/// Users of other languages could disable &lt;see cref="CSharpTypeConverter"/&gt; and create a &lt;c&gt;SerializationConverter&amp;lt;Type&amp;gt;&lt;/c&gt; implementation for their language.</comment>
    <comment type="line" pos:line="17" pos:column="5">/// &lt;/remarks&gt;</comment>
    <class><specifier pos:line="18" pos:column="5">public</specifier> class <name pos:line="18" pos:column="18">CSharpTypeConverter</name> <super pos:line="18" pos:column="38">: <name><name pos:line="18" pos:column="40">SerializationConverter</name><argument_list pos:line="18" pos:column="62">&lt;<argument><name pos:line="18" pos:column="63">Type</name></argument>&gt;</argument_list></name></super>
    <block pos:line="19" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="20" pos:column="9">private</specifier> <specifier pos:line="20" pos:column="17">static</specifier> <specifier pos:line="20" pos:column="24">readonly</specifier> <name><name pos:line="20" pos:column="33">Dictionary</name><argument_list pos:line="20" pos:column="43">&lt;<argument><name pos:line="20" pos:column="44">Type</name></argument>, <argument><name pos:line="20" pos:column="50">string</name></argument>&gt;</argument_list></name></type> <name pos:line="20" pos:column="58">PrimitiveTypes</name> <init pos:line="20" pos:column="73">=
            <expr><op:operator pos:line="21" pos:column="13">new</op:operator> <name><name pos:line="21" pos:column="17">Dictionary</name><argument_list pos:line="21" pos:column="27">&lt;<argument><name pos:line="21" pos:column="28">Type</name></argument>, <argument><name pos:line="21" pos:column="34">string</name></argument>&gt;</argument_list></name>
                <block pos:line="22" pos:column="17">{
                    <expr><block pos:line="23" pos:column="21">{ <expr><call><name pos:line="23" pos:column="23">typeof</name><argument_list pos:line="23" pos:column="29">(<argument><expr><name pos:line="23" pos:column="30">bool</name></expr></argument>)</argument_list></call></expr>, <expr><lit:literal type="string" pos:line="23" pos:column="37">"bool"</lit:literal></expr> }</block></expr>,
                    <expr><block pos:line="24" pos:column="21">{ <expr><call><name pos:line="24" pos:column="23">typeof</name><argument_list pos:line="24" pos:column="29">(<argument><expr><name pos:line="24" pos:column="30">byte</name></expr></argument>)</argument_list></call></expr>, <expr><lit:literal type="string" pos:line="24" pos:column="37">"byte"</lit:literal></expr> }</block></expr>,
                    <expr><block pos:line="25" pos:column="21">{ <expr><call><name pos:line="25" pos:column="23">typeof</name><argument_list pos:line="25" pos:column="29">(<argument><expr><name pos:line="25" pos:column="30">char</name></expr></argument>)</argument_list></call></expr>, <expr><lit:literal type="string" pos:line="25" pos:column="37">"char"</lit:literal></expr> }</block></expr>,
                    <expr><block pos:line="26" pos:column="21">{ <expr><call><name pos:line="26" pos:column="23">typeof</name><argument_list pos:line="26" pos:column="29">(<argument><expr><name pos:line="26" pos:column="30">decimal</name></expr></argument>)</argument_list></call></expr>, <expr><lit:literal type="string" pos:line="26" pos:column="40">"decimal"</lit:literal></expr> }</block></expr>,
                    <expr><block pos:line="27" pos:column="21">{ <expr><call><name pos:line="27" pos:column="23">typeof</name><argument_list pos:line="27" pos:column="29">(<argument><expr><name pos:line="27" pos:column="30">double</name></expr></argument>)</argument_list></call></expr>, <expr><lit:literal type="string" pos:line="27" pos:column="39">"double"</lit:literal></expr> }</block></expr>,
                    <expr><block pos:line="28" pos:column="21">{ <expr><call><name pos:line="28" pos:column="23">typeof</name><argument_list pos:line="28" pos:column="29">(<argument><expr><name pos:line="28" pos:column="30">float</name></expr></argument>)</argument_list></call></expr>, <expr><lit:literal type="string" pos:line="28" pos:column="38">"float"</lit:literal></expr> }</block></expr>,
                    <expr><block pos:line="29" pos:column="21">{ <expr><call><name pos:line="29" pos:column="23">typeof</name><argument_list pos:line="29" pos:column="29">(<argument><expr><name pos:line="29" pos:column="30">int</name></expr></argument>)</argument_list></call></expr>, <expr><lit:literal type="string" pos:line="29" pos:column="36">"int"</lit:literal></expr> }</block></expr>,
                    <expr><block pos:line="30" pos:column="21">{ <expr><call><name pos:line="30" pos:column="23">typeof</name><argument_list pos:line="30" pos:column="29">(<argument><expr><name pos:line="30" pos:column="30">long</name></expr></argument>)</argument_list></call></expr>, <expr><lit:literal type="string" pos:line="30" pos:column="37">"long"</lit:literal></expr> }</block></expr>,
                    <expr><block pos:line="31" pos:column="21">{ <expr><call><name pos:line="31" pos:column="23">typeof</name><argument_list pos:line="31" pos:column="29">(<argument><expr><name pos:line="31" pos:column="30">object</name></expr></argument>)</argument_list></call></expr>, <expr><lit:literal type="string" pos:line="31" pos:column="39">"object"</lit:literal></expr> }</block></expr>,
                    <expr><block pos:line="32" pos:column="21">{ <expr><call><name pos:line="32" pos:column="23">typeof</name><argument_list pos:line="32" pos:column="29">(<argument><expr><name pos:line="32" pos:column="30">sbyte</name></expr></argument>)</argument_list></call></expr>, <expr><lit:literal type="string" pos:line="32" pos:column="38">"sbyte"</lit:literal></expr> }</block></expr>,
                    <expr><block pos:line="33" pos:column="21">{ <expr><call><name pos:line="33" pos:column="23">typeof</name><argument_list pos:line="33" pos:column="29">(<argument><expr><name pos:line="33" pos:column="30">short</name></expr></argument>)</argument_list></call></expr>, <expr><lit:literal type="string" pos:line="33" pos:column="38">"short"</lit:literal></expr> }</block></expr>,
                    <expr><block pos:line="34" pos:column="21">{ <expr><call><name pos:line="34" pos:column="23">typeof</name><argument_list pos:line="34" pos:column="29">(<argument><expr><name pos:line="34" pos:column="30">string</name></expr></argument>)</argument_list></call></expr>, <expr><lit:literal type="string" pos:line="34" pos:column="39">"string"</lit:literal></expr> }</block></expr>,
                    <expr><block pos:line="35" pos:column="21">{ <expr><call><name pos:line="35" pos:column="23">typeof</name><argument_list pos:line="35" pos:column="29">(<argument><expr><name pos:line="35" pos:column="30">uint</name></expr></argument>)</argument_list></call></expr>, <expr><lit:literal type="string" pos:line="35" pos:column="37">"uint"</lit:literal></expr> }</block></expr>,
                    <expr><block pos:line="36" pos:column="21">{ <expr><call><name pos:line="36" pos:column="23">typeof</name><argument_list pos:line="36" pos:column="29">(<argument><expr><name pos:line="36" pos:column="30">ulong</name></expr></argument>)</argument_list></call></expr>, <expr><lit:literal type="string" pos:line="36" pos:column="38">"ulong"</lit:literal></expr> }</block></expr>,
                    <expr><block pos:line="37" pos:column="21">{ <expr><call><name pos:line="37" pos:column="23">typeof</name><argument_list pos:line="37" pos:column="29">(<argument><expr><name pos:line="37" pos:column="30">ushort</name></expr></argument>)</argument_list></call></expr>, <expr><lit:literal type="string" pos:line="37" pos:column="39">"ushort"</lit:literal></expr> }</block></expr>,
                }</block></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="40" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="41" pos:column="9">/// Converts the specified type.</comment>
        <comment type="line" pos:line="42" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="43" pos:column="9">/// &lt;param name="type"&gt;The type.&lt;/param&gt;</comment>
        <comment type="line" pos:line="44" pos:column="9">/// &lt;returns&gt;An string of the C# syntax which would be used to represent &lt;paramref name="type"/&gt;.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="45" pos:column="9">public</specifier> <specifier pos:line="45" pos:column="16">override</specifier> <name pos:line="45" pos:column="25">object</name></type> <name pos:line="45" pos:column="32">Convert</name><parameter_list pos:line="45" pos:column="39">(<param><decl><type><name pos:line="45" pos:column="40">Type</name></type> <name pos:line="45" pos:column="45">type</name></decl></param>)</parameter_list>
        <block pos:line="46" pos:column="9">{
            <return pos:line="47" pos:column="13">return <expr><call><name pos:line="47" pos:column="20">GetName</name><argument_list pos:line="47" pos:column="27">(<argument><expr><name pos:line="47" pos:column="28">type</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="50" pos:column="9">private</specifier> <name pos:line="50" pos:column="17">string</name></type> <name pos:line="50" pos:column="24">GetName</name><parameter_list pos:line="50" pos:column="31">(<param><decl><type><name pos:line="50" pos:column="32">Type</name></type> <name pos:line="50" pos:column="37">type</name></decl></param>)</parameter_list>
        <block pos:line="51" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="52" pos:column="13">var</name></type> <name pos:line="52" pos:column="17">typeName</name> <init pos:line="52" pos:column="26">= <expr><op:operator pos:line="52" pos:column="28">new</op:operator> <call><name pos:line="52" pos:column="32">StringBuilder</name><argument_list pos:line="52" pos:column="45">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="53" pos:column="13">GetName</name><argument_list pos:line="53" pos:column="20">(<argument><expr><name pos:line="53" pos:column="21">type</name></expr></argument>, <argument><expr><name pos:line="53" pos:column="27">typeName</name></expr></argument>, <argument><expr><op:operator pos:line="53" pos:column="37">new</op:operator> <call><name><name pos:line="53" pos:column="41">Queue</name><argument_list pos:line="53" pos:column="46">&lt;<argument><name pos:line="53" pos:column="47">Type</name></argument>&gt;</argument_list></name><argument_list pos:line="53" pos:column="52">(<argument><expr><call><name><name pos:line="53" pos:column="53">type</name><op:operator pos:line="53" pos:column="57">.</op:operator><name pos:line="53" pos:column="58">GetGenericArguments</name></name><argument_list pos:line="53" pos:column="77">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="54" pos:column="13">return <expr><call><name><name pos:line="54" pos:column="20">typeName</name><op:operator pos:line="54" pos:column="28">.</op:operator><name pos:line="54" pos:column="29">ToString</name></name><argument_list pos:line="54" pos:column="37">()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="57" pos:column="9">private</specifier> <name pos:line="57" pos:column="17">void</name></type> <name pos:line="57" pos:column="22">GetName</name><parameter_list pos:line="57" pos:column="29">(<param><decl><type><name pos:line="57" pos:column="30">Type</name></type> <name pos:line="57" pos:column="35">type</name></decl></param>, <param><decl><type><name pos:line="57" pos:column="41">StringBuilder</name></type> <name pos:line="57" pos:column="55">output</name></decl></param>, <param><decl><type><name><name pos:line="57" pos:column="63">Queue</name><argument_list pos:line="57" pos:column="68">&lt;<argument><name pos:line="57" pos:column="69">Type</name></argument>&gt;</argument_list></name></type> <name pos:line="57" pos:column="75">genericArgsStack</name></decl></param>)</parameter_list>
        <block pos:line="58" pos:column="9">{
            <if pos:line="59" pos:column="13">if <condition pos:line="59" pos:column="16">(<expr><name><name pos:line="59" pos:column="17">type</name><op:operator pos:line="59" pos:column="21">.</op:operator><name pos:line="59" pos:column="22">IsNested</name></name></expr>)</condition><then pos:line="59" pos:column="31">
            <block pos:line="60" pos:column="13">{
                <expr_stmt><expr><call><name pos:line="61" pos:column="17">GetName</name><argument_list pos:line="61" pos:column="24">(<argument><expr><name><name pos:line="61" pos:column="25">type</name><op:operator pos:line="61" pos:column="29">.</op:operator><name pos:line="61" pos:column="30">DeclaringType</name></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="45">output</name></expr></argument>, <argument><expr><name pos:line="61" pos:column="53">genericArgsStack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="62" pos:column="17">output</name><op:operator pos:line="62" pos:column="23">.</op:operator><name pos:line="62" pos:column="24">Append</name></name><argument_list pos:line="62" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="62" pos:column="31">"."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if pos:line="65" pos:column="13">if <condition pos:line="65" pos:column="16">(<expr><name><name pos:line="65" pos:column="17">type</name><op:operator pos:line="65" pos:column="21">.</op:operator><name pos:line="65" pos:column="22">IsArray</name></name></expr>)</condition><then pos:line="65" pos:column="30"> 
            <block pos:line="66" pos:column="13">{
                <comment type="line" pos:line="67" pos:column="17">// Array</comment>
                <expr_stmt><expr><call><name pos:line="68" pos:column="17">GetName</name><argument_list pos:line="68" pos:column="24">(<argument><expr><call><name><name pos:line="68" pos:column="25">type</name><op:operator pos:line="68" pos:column="29">.</op:operator><name pos:line="68" pos:column="30">GetElementType</name></name><argument_list pos:line="68" pos:column="44">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="68" pos:column="48">output</name></expr></argument>, <argument><expr><name pos:line="68" pos:column="56">genericArgsStack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="69" pos:column="17">output</name><op:operator pos:line="69" pos:column="23">.</op:operator><name pos:line="69" pos:column="24">Append</name></name><argument_list pos:line="69" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="69" pos:column="31">"[]"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else pos:line="71" pos:column="13">else <if pos:line="71" pos:column="18">if <condition pos:line="71" pos:column="21">(<expr><op:operator pos:line="71" pos:column="22">!</op:operator><name><name pos:line="71" pos:column="23">type</name><op:operator pos:line="71" pos:column="27">.</op:operator><name pos:line="71" pos:column="28">IsGenericType</name></name></expr>)</condition><then pos:line="71" pos:column="42">
            <block pos:line="72" pos:column="13">{
                <comment type="line" pos:line="73" pos:column="17">// Non-Generics</comment>
                <expr_stmt><expr><call><name><name pos:line="74" pos:column="17">output</name><op:operator pos:line="74" pos:column="23">.</op:operator><name pos:line="74" pos:column="24">Append</name></name><argument_list pos:line="74" pos:column="30">(<argument><expr><call><name><name pos:line="74" pos:column="31">PrimitiveTypes</name><op:operator pos:line="74" pos:column="45">.</op:operator><name pos:line="74" pos:column="46">ContainsKey</name></name><argument_list pos:line="74" pos:column="57">(<argument><expr><name pos:line="74" pos:column="58">type</name></expr></argument>)</argument_list></call> <op:operator pos:line="74" pos:column="64">?</op:operator> <name><name pos:line="74" pos:column="66">PrimitiveTypes</name><index pos:line="74" pos:column="80">[<expr><name pos:line="74" pos:column="81">type</name></expr>]</index></name> <op:operator pos:line="74" pos:column="87">:</op:operator> <name><name pos:line="74" pos:column="89">type</name><op:operator pos:line="74" pos:column="93">.</op:operator><name pos:line="74" pos:column="94">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else pos:line="76" pos:column="13">else <if pos:line="76" pos:column="18">if <condition pos:line="76" pos:column="21">(<expr><call><name><name pos:line="76" pos:column="22">type</name><op:operator pos:line="76" pos:column="26">.</op:operator><name pos:line="76" pos:column="27">GetGenericTypeDefinition</name></name><argument_list pos:line="76" pos:column="51">()</argument_list></call> <op:operator pos:line="76" pos:column="54">==</op:operator> <call><name pos:line="76" pos:column="57">typeof</name><argument_list pos:line="76" pos:column="63">(<argument><expr><name><name pos:line="76" pos:column="64">Nullable</name><argument_list pos:line="76" pos:column="72">&lt;&gt;</argument_list></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="76" pos:column="76">
            <block pos:line="77" pos:column="13">{
                <comment type="line" pos:line="78" pos:column="17">// Null types</comment>
                <expr_stmt><expr><call><name pos:line="79" pos:column="17">GetName</name><argument_list pos:line="79" pos:column="24">(<argument><expr><call><name><name pos:line="79" pos:column="25">type</name><op:operator pos:line="79" pos:column="29">.</op:operator><name pos:line="79" pos:column="30">GetGenericArguments</name></name><argument_list pos:line="79" pos:column="49">()</argument_list></call><op:operator pos:line="79" pos:column="51">.</op:operator><call><name pos:line="79" pos:column="52">First</name><argument_list pos:line="79" pos:column="57">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="79" pos:column="61">output</name></expr></argument>, <argument><expr><name pos:line="79" pos:column="69">genericArgsStack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="80" pos:column="17">output</name><op:operator pos:line="80" pos:column="23">.</op:operator><name pos:line="80" pos:column="24">Append</name></name><argument_list pos:line="80" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="80" pos:column="31">"?"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else pos:line="82" pos:column="13">else
            <block pos:line="83" pos:column="13">{
                <comment type="line" pos:line="84" pos:column="17">// Generics</comment>
                <decl_stmt><decl><type><name pos:line="85" pos:column="17">var</name></type> <name pos:line="85" pos:column="21">genericBaseType</name> <init pos:line="85" pos:column="37">= <expr><call><name><name pos:line="85" pos:column="39">type</name><op:operator pos:line="85" pos:column="43">.</op:operator><name pos:line="85" pos:column="44">GetGenericTypeDefinition</name></name><argument_list pos:line="85" pos:column="68">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="86" pos:column="17">var</name></type> <name pos:line="86" pos:column="21">genericName</name> <init pos:line="86" pos:column="33">= <expr><name><name pos:line="86" pos:column="35">genericBaseType</name><op:operator pos:line="86" pos:column="50">.</op:operator><name pos:line="86" pos:column="51">Name</name></name></expr></init></decl>;</decl_stmt>

                <if pos:line="88" pos:column="17">if <condition pos:line="88" pos:column="20">(<expr><call><name><name pos:line="88" pos:column="21">genericName</name><op:operator pos:line="88" pos:column="32">.</op:operator><name pos:line="88" pos:column="33">Contains</name></name><argument_list pos:line="88" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="88" pos:column="42">"`"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="88" pos:column="47">
                <block pos:line="89" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="90" pos:column="21">output</name><op:operator pos:line="90" pos:column="27">.</op:operator><name pos:line="90" pos:column="28">Append</name></name><argument_list pos:line="90" pos:column="34">(<argument><expr><name pos:line="90" pos:column="35">genericName</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="90" pos:column="48">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="90" pos:column="51">genericName</name><op:operator pos:line="90" pos:column="62">.</op:operator><name pos:line="90" pos:column="63">LastIndexOf</name></name><argument_list pos:line="90" pos:column="74">(<argument><expr><lit:literal type="char" pos:line="90" pos:column="75">'`'</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name><name pos:line="92" pos:column="21">output</name><op:operator pos:line="92" pos:column="27">.</op:operator><name pos:line="92" pos:column="28">Append</name></name><argument_list pos:line="92" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="92" pos:column="35">"&lt;"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <decl_stmt><decl><type><name pos:line="94" pos:column="21">var</name></type> <name pos:line="94" pos:column="25">typeArgsCount</name> <init pos:line="94" pos:column="39">= <expr><call><name pos:line="94" pos:column="41">GetGenericArgumentCount</name><argument_list pos:line="94" pos:column="64">(<argument><expr><name pos:line="94" pos:column="65">type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="95" pos:column="21">var</name></type> <name pos:line="95" pos:column="25">remainingArgsCount</name> <init pos:line="95" pos:column="44">= <expr><name><name pos:line="95" pos:column="46">genericArgsStack</name><op:operator pos:line="95" pos:column="62">.</op:operator><name pos:line="95" pos:column="63">Count</name></name></expr></init></decl>;</decl_stmt>

                    <for pos:line="97" pos:column="21">for (<init><decl><type><name pos:line="97" pos:column="26">int</name></type> <name pos:line="97" pos:column="30">i</name> <init pos:line="97" pos:column="32">= <expr><lit:literal type="number" pos:line="97" pos:column="34">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="97" pos:column="37">i</name> <op:operator pos:line="97" pos:column="39">&lt;</op:operator> <call><name><name pos:line="97" pos:column="41">Math</name><op:operator pos:line="97" pos:column="45">.</op:operator><name pos:line="97" pos:column="46">Min</name></name><argument_list pos:line="97" pos:column="49">(<argument><expr><name pos:line="97" pos:column="50">typeArgsCount</name></expr></argument>, <argument><expr><name pos:line="97" pos:column="65">remainingArgsCount</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name pos:line="97" pos:column="86">i</name><op:operator pos:line="97" pos:column="87">++</op:operator></expr></incr>)
                    <block pos:line="98" pos:column="21">{
                        <if pos:line="99" pos:column="25">if <condition pos:line="99" pos:column="28">(<expr><name pos:line="99" pos:column="29">i</name> <op:operator pos:line="99" pos:column="31">&gt;</op:operator> <lit:literal type="number" pos:line="99" pos:column="33">0</lit:literal></expr>)</condition><then pos:line="99" pos:column="35">
                        <block pos:line="100" pos:column="25">{
                            <expr_stmt><expr><call><name><name pos:line="101" pos:column="29">output</name><op:operator pos:line="101" pos:column="35">.</op:operator><name pos:line="101" pos:column="36">Append</name></name><argument_list pos:line="101" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="101" pos:column="43">", "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>

                        <decl_stmt><decl><type><name pos:line="104" pos:column="25">var</name></type> <name pos:line="104" pos:column="29">arg</name> <init pos:line="104" pos:column="33">= <expr><call><name><name pos:line="104" pos:column="35">genericArgsStack</name><op:operator pos:line="104" pos:column="51">.</op:operator><name pos:line="104" pos:column="52">Dequeue</name></name><argument_list pos:line="104" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name pos:line="105" pos:column="25">GetName</name><argument_list pos:line="105" pos:column="32">(<argument><expr><name pos:line="105" pos:column="33">arg</name></expr></argument>, <argument><expr><name pos:line="105" pos:column="38">output</name></expr></argument>, <argument><expr><op:operator pos:line="105" pos:column="46">new</op:operator> <call><name><name pos:line="105" pos:column="50">Queue</name><argument_list pos:line="105" pos:column="55">&lt;<argument><name pos:line="105" pos:column="56">Type</name></argument>&gt;</argument_list></name><argument_list pos:line="105" pos:column="61">(<argument><expr><call><name><name pos:line="105" pos:column="62">arg</name><op:operator pos:line="105" pos:column="65">.</op:operator><name pos:line="105" pos:column="66">GetGenericArguments</name></name><argument_list pos:line="105" pos:column="85">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></for>

                    <expr_stmt><expr><call><name><name pos:line="108" pos:column="21">output</name><op:operator pos:line="108" pos:column="27">.</op:operator><name pos:line="108" pos:column="28">Append</name></name><argument_list pos:line="108" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="108" pos:column="35">"&gt;"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="110" pos:column="17">else
                <block pos:line="111" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="112" pos:column="21">output</name><op:operator pos:line="112" pos:column="27">.</op:operator><name pos:line="112" pos:column="28">Append</name></name><argument_list pos:line="112" pos:column="34">(<argument><expr><name pos:line="112" pos:column="35">genericName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></else></if></else></if></else></if>
        }</block></function>

        <function><type><specifier pos:line="117" pos:column="9">private</specifier> <name pos:line="117" pos:column="17">int</name></type> <name pos:line="117" pos:column="21">GetGenericArgumentCount</name><parameter_list pos:line="117" pos:column="44">(<param><decl><type><name pos:line="117" pos:column="45">Type</name></type> <name pos:line="117" pos:column="50">type</name></decl></param>)</parameter_list>
        <block pos:line="118" pos:column="9">{
            <if pos:line="119" pos:column="13">if <condition pos:line="119" pos:column="16">(<expr><name><name pos:line="119" pos:column="17">type</name><op:operator pos:line="119" pos:column="21">.</op:operator><name pos:line="119" pos:column="22">DeclaringType</name></name> <op:operator pos:line="119" pos:column="36">==</op:operator> <name pos:line="119" pos:column="39">null</name></expr>)</condition><then pos:line="119" pos:column="44">
            <block pos:line="120" pos:column="13">{
                <return pos:line="121" pos:column="17">return <expr><call><name><name pos:line="121" pos:column="24">type</name><op:operator pos:line="121" pos:column="28">.</op:operator><name pos:line="121" pos:column="29">GetGenericArguments</name></name><argument_list pos:line="121" pos:column="48">()</argument_list></call><op:operator pos:line="121" pos:column="50">.</op:operator><name pos:line="121" pos:column="51">Length</name></expr>;</return>
            }</block></then></if>

            <return pos:line="124" pos:column="13">return <expr><call><name><name pos:line="124" pos:column="20">type</name><op:operator pos:line="124" pos:column="24">.</op:operator><name pos:line="124" pos:column="25">GetGenericArguments</name></name><argument_list pos:line="124" pos:column="44">()</argument_list></call><op:operator pos:line="124" pos:column="46">.</op:operator><name pos:line="124" pos:column="47">Length</name> <op:operator pos:line="124" pos:column="54">-</op:operator> <call><name><name pos:line="124" pos:column="56">type</name><op:operator pos:line="124" pos:column="60">.</op:operator><name pos:line="124" pos:column="61">DeclaringType</name><op:operator pos:line="124" pos:column="74">.</op:operator><name pos:line="124" pos:column="75">GetGenericArguments</name></name><argument_list pos:line="124" pos:column="94">()</argument_list></call><op:operator pos:line="124" pos:column="96">.</op:operator><name pos:line="124" pos:column="97">Length</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
