<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Core\Plugin\Assist\TabRowFormattingExtensionsShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Core</name><op:operator pos:line="4" pos:column="19">.</op:operator><name pos:line="4" pos:column="20">Tab</name><op:operator pos:line="4" pos:column="23">.</op:operator><name pos:line="4" pos:column="24">Assist</name></name>;</using>
<using pos:line="5" pos:column="1">using <name pos:line="5" pos:column="7">Xunit</name>;</using>

<namespace pos:line="7" pos:column="1">namespace <name><name pos:line="7" pos:column="11">Glimpse</name><op:operator pos:line="7" pos:column="18">.</op:operator><name pos:line="7" pos:column="19">Test</name><op:operator pos:line="7" pos:column="23">.</op:operator><name pos:line="7" pos:column="24">Core</name><op:operator pos:line="7" pos:column="28">.</op:operator><name pos:line="7" pos:column="29">Plugin</name><op:operator pos:line="7" pos:column="35">.</op:operator><name pos:line="7" pos:column="36">Assist</name></name>
<block pos:line="8" pos:column="1">{
	<class><specifier pos:line="9" pos:column="9">public</specifier> class <name pos:line="9" pos:column="22">TabRowFormattingExtensionsShould</name>
	<block pos:line="10" pos:column="9">{
		<function><type><attribute pos:line="11" pos:column="17">[<expr><name pos:line="11" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="12" pos:column="17">public</specifier> <name pos:line="12" pos:column="24">void</name></type> <name pos:line="12" pos:column="29">ApplyStrongToLastColumn</name><parameter_list pos:line="12" pos:column="52">()</parameter_list>
		<block pos:line="13" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="14" pos:column="25">SectionRow</name><op:operator pos:line="14" pos:column="35">.</op:operator><name pos:line="14" pos:column="36">Strong</name></name><argument_list pos:line="14" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="15" pos:column="13">var</name></type> <name pos:line="15" pos:column="17">row</name> <init pos:line="15" pos:column="21">= <expr><op:operator pos:line="15" pos:column="23">(</op:operator><name><name pos:line="15" pos:column="24">IEnumerable</name><argument_list pos:line="15" pos:column="35">&lt;<argument><name pos:line="15" pos:column="36">object</name></argument>&gt;</argument_list></name><op:operator pos:line="15" pos:column="43">)</op:operator><call><name><name pos:line="15" pos:column="44">SectionRow</name><op:operator pos:line="15" pos:column="54">.</op:operator><name pos:line="15" pos:column="55">Build</name></name><argument_list pos:line="15" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name><name pos:line="17" pos:column="25">Assert</name><op:operator pos:line="17" pos:column="31">.</op:operator><name pos:line="17" pos:column="32">Equal</name></name><argument_list pos:line="17" pos:column="37">(<argument><expr><call><name><name pos:line="17" pos:column="38">row</name><op:operator pos:line="17" pos:column="41">.</op:operator><name pos:line="17" pos:column="42">Last</name></name><argument_list pos:line="17" pos:column="46">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="17" pos:column="50">@"*Text*"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

        <function><type><attribute pos:line="20" pos:column="9">[<expr><name pos:line="20" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="21" pos:column="9">public</specifier> <name pos:line="21" pos:column="16">void</name></type> <name pos:line="21" pos:column="21">ApplyStrongToLastColumnIf</name><parameter_list pos:line="21" pos:column="46">()</parameter_list>
        <block pos:line="22" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="23" pos:column="13">SectionRow</name><op:operator pos:line="23" pos:column="23">.</op:operator><name pos:line="23" pos:column="24">StrongIf</name></name><argument_list pos:line="23" pos:column="32">(<argument><expr><lit:literal type="boolean" pos:line="23" pos:column="33">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="24" pos:column="13">var</name></type> <name pos:line="24" pos:column="17">row</name> <init pos:line="24" pos:column="21">= <expr><op:operator pos:line="24" pos:column="23">(</op:operator><name><name pos:line="24" pos:column="24">IEnumerable</name><argument_list pos:line="24" pos:column="35">&lt;<argument><name pos:line="24" pos:column="36">object</name></argument>&gt;</argument_list></name><op:operator pos:line="24" pos:column="43">)</op:operator><call><name><name pos:line="24" pos:column="44">SectionRow</name><op:operator pos:line="24" pos:column="54">.</op:operator><name pos:line="24" pos:column="55">Build</name></name><argument_list pos:line="24" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="26" pos:column="13">Assert</name><op:operator pos:line="26" pos:column="19">.</op:operator><name pos:line="26" pos:column="20">Equal</name></name><argument_list pos:line="26" pos:column="25">(<argument><expr><call><name><name pos:line="26" pos:column="26">row</name><op:operator pos:line="26" pos:column="29">.</op:operator><name pos:line="26" pos:column="30">Last</name></name><argument_list pos:line="26" pos:column="34">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="26" pos:column="38">@"Text"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="28" pos:column="13">SectionRow</name><op:operator pos:line="28" pos:column="23">.</op:operator><name pos:line="28" pos:column="24">StrongIf</name></name><argument_list pos:line="28" pos:column="32">(<argument><expr><lit:literal type="boolean" pos:line="28" pos:column="33">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
            <expr_stmt><expr><name pos:line="29" pos:column="13">row</name> <op:operator pos:line="29" pos:column="17">=</op:operator> <op:operator pos:line="29" pos:column="19">(</op:operator><name><name pos:line="29" pos:column="20">IEnumerable</name><argument_list pos:line="29" pos:column="31">&lt;<argument><name pos:line="29" pos:column="32">object</name></argument>&gt;</argument_list></name><op:operator pos:line="29" pos:column="39">)</op:operator><call><name><name pos:line="29" pos:column="40">SectionRow</name><op:operator pos:line="29" pos:column="50">.</op:operator><name pos:line="29" pos:column="51">Build</name></name><argument_list pos:line="29" pos:column="56">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="31" pos:column="13">Assert</name><op:operator pos:line="31" pos:column="19">.</op:operator><name pos:line="31" pos:column="20">Equal</name></name><argument_list pos:line="31" pos:column="25">(<argument><expr><call><name><name pos:line="31" pos:column="26">row</name><op:operator pos:line="31" pos:column="29">.</op:operator><name pos:line="31" pos:column="30">Last</name></name><argument_list pos:line="31" pos:column="34">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="31" pos:column="38">@"*Text*"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

		<function><type><attribute pos:line="34" pos:column="17">[<expr><name pos:line="34" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="35" pos:column="17">public</specifier> <name pos:line="35" pos:column="24">void</name></type> <name pos:line="35" pos:column="29">ApplyEmphasisToLastColumn</name><parameter_list pos:line="35" pos:column="54">()</parameter_list>
		<block pos:line="36" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="37" pos:column="25">SectionRow</name><op:operator pos:line="37" pos:column="35">.</op:operator><name pos:line="37" pos:column="36">Emphasis</name></name><argument_list pos:line="37" pos:column="44">()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="38" pos:column="13">var</name></type> <name pos:line="38" pos:column="17">row</name> <init pos:line="38" pos:column="21">= <expr><op:operator pos:line="38" pos:column="23">(</op:operator><name><name pos:line="38" pos:column="24">IEnumerable</name><argument_list pos:line="38" pos:column="35">&lt;<argument><name pos:line="38" pos:column="36">object</name></argument>&gt;</argument_list></name><op:operator pos:line="38" pos:column="43">)</op:operator><call><name><name pos:line="38" pos:column="44">SectionRow</name><op:operator pos:line="38" pos:column="54">.</op:operator><name pos:line="38" pos:column="55">Build</name></name><argument_list pos:line="38" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name><name pos:line="40" pos:column="25">Assert</name><op:operator pos:line="40" pos:column="31">.</op:operator><name pos:line="40" pos:column="32">Equal</name></name><argument_list pos:line="40" pos:column="37">(<argument><expr><call><name><name pos:line="40" pos:column="38">row</name><op:operator pos:line="40" pos:column="41">.</op:operator><name pos:line="40" pos:column="42">Last</name></name><argument_list pos:line="40" pos:column="46">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="40" pos:column="50">@"\Text\"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

        <function><type><attribute pos:line="43" pos:column="9">[<expr><name pos:line="43" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="44" pos:column="9">public</specifier> <name pos:line="44" pos:column="16">void</name></type> <name pos:line="44" pos:column="21">ApplyEmphasisToLastColumnIf</name><parameter_list pos:line="44" pos:column="48">()</parameter_list>
        <block pos:line="45" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="46" pos:column="13">SectionRow</name><op:operator pos:line="46" pos:column="23">.</op:operator><name pos:line="46" pos:column="24">EmphasisIf</name></name><argument_list pos:line="46" pos:column="34">(<argument><expr><lit:literal type="boolean" pos:line="46" pos:column="35">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="47" pos:column="13">var</name></type> <name pos:line="47" pos:column="17">row</name> <init pos:line="47" pos:column="21">= <expr><op:operator pos:line="47" pos:column="23">(</op:operator><name><name pos:line="47" pos:column="24">IEnumerable</name><argument_list pos:line="47" pos:column="35">&lt;<argument><name pos:line="47" pos:column="36">object</name></argument>&gt;</argument_list></name><op:operator pos:line="47" pos:column="43">)</op:operator><call><name><name pos:line="47" pos:column="44">SectionRow</name><op:operator pos:line="47" pos:column="54">.</op:operator><name pos:line="47" pos:column="55">Build</name></name><argument_list pos:line="47" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt> 

            <expr_stmt><expr><call><name><name pos:line="49" pos:column="13">Assert</name><op:operator pos:line="49" pos:column="19">.</op:operator><name pos:line="49" pos:column="20">Equal</name></name><argument_list pos:line="49" pos:column="25">(<argument><expr><call><name><name pos:line="49" pos:column="26">row</name><op:operator pos:line="49" pos:column="29">.</op:operator><name pos:line="49" pos:column="30">Last</name></name><argument_list pos:line="49" pos:column="34">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="49" pos:column="38">@"Text"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="51" pos:column="13">SectionRow</name><op:operator pos:line="51" pos:column="23">.</op:operator><name pos:line="51" pos:column="24">EmphasisIf</name></name><argument_list pos:line="51" pos:column="34">(<argument><expr><lit:literal type="boolean" pos:line="51" pos:column="35">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="52" pos:column="13">row</name> <op:operator pos:line="52" pos:column="17">=</op:operator> <op:operator pos:line="52" pos:column="19">(</op:operator><name><name pos:line="52" pos:column="20">IEnumerable</name><argument_list pos:line="52" pos:column="31">&lt;<argument><name pos:line="52" pos:column="32">object</name></argument>&gt;</argument_list></name><op:operator pos:line="52" pos:column="39">)</op:operator><call><name><name pos:line="52" pos:column="40">SectionRow</name><op:operator pos:line="52" pos:column="50">.</op:operator><name pos:line="52" pos:column="51">Build</name></name><argument_list pos:line="52" pos:column="56">()</argument_list></call></expr>;</expr_stmt> 

            <expr_stmt><expr><call><name><name pos:line="54" pos:column="13">Assert</name><op:operator pos:line="54" pos:column="19">.</op:operator><name pos:line="54" pos:column="20">Equal</name></name><argument_list pos:line="54" pos:column="25">(<argument><expr><call><name><name pos:line="54" pos:column="26">row</name><op:operator pos:line="54" pos:column="29">.</op:operator><name pos:line="54" pos:column="30">Last</name></name><argument_list pos:line="54" pos:column="34">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="54" pos:column="38">@"\Text\"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

		<function><type><attribute pos:line="57" pos:column="17">[<expr><name pos:line="57" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="58" pos:column="17">public</specifier> <name pos:line="58" pos:column="24">void</name></type> <name pos:line="58" pos:column="29">ApplyRawToLastColumn</name><parameter_list pos:line="58" pos:column="49">()</parameter_list>
		<block pos:line="59" pos:column="17">{
            <expr_stmt><expr><call><name><name pos:line="60" pos:column="13">SectionRow</name><op:operator pos:line="60" pos:column="23">.</op:operator><name pos:line="60" pos:column="24">Raw</name></name><argument_list pos:line="60" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="61" pos:column="13">var</name></type> <name pos:line="61" pos:column="17">row</name> <init pos:line="61" pos:column="21">= <expr><op:operator pos:line="61" pos:column="23">(</op:operator><name><name pos:line="61" pos:column="24">IEnumerable</name><argument_list pos:line="61" pos:column="35">&lt;<argument><name pos:line="61" pos:column="36">object</name></argument>&gt;</argument_list></name><op:operator pos:line="61" pos:column="43">)</op:operator><call><name><name pos:line="61" pos:column="44">SectionRow</name><op:operator pos:line="61" pos:column="54">.</op:operator><name pos:line="61" pos:column="55">Build</name></name><argument_list pos:line="61" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt> 

			<expr_stmt><expr><call><name><name pos:line="63" pos:column="25">Assert</name><op:operator pos:line="63" pos:column="31">.</op:operator><name pos:line="63" pos:column="32">Equal</name></name><argument_list pos:line="63" pos:column="37">(<argument><expr><call><name><name pos:line="63" pos:column="38">row</name><op:operator pos:line="63" pos:column="41">.</op:operator><name pos:line="63" pos:column="42">Last</name></name><argument_list pos:line="63" pos:column="46">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="63" pos:column="50">@"!Text!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

        <function><type><attribute pos:line="66" pos:column="9">[<expr><name pos:line="66" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="67" pos:column="9">public</specifier> <name pos:line="67" pos:column="16">void</name></type> <name pos:line="67" pos:column="21">ApplyRawToLastColumnIf</name><parameter_list pos:line="67" pos:column="43">()</parameter_list>
        <block pos:line="68" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="69" pos:column="13">SectionRow</name><op:operator pos:line="69" pos:column="23">.</op:operator><name pos:line="69" pos:column="24">RawIf</name></name><argument_list pos:line="69" pos:column="29">(<argument><expr><lit:literal type="boolean" pos:line="69" pos:column="30">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="70" pos:column="13">var</name></type> <name pos:line="70" pos:column="17">row</name> <init pos:line="70" pos:column="21">= <expr><op:operator pos:line="70" pos:column="23">(</op:operator><name><name pos:line="70" pos:column="24">IEnumerable</name><argument_list pos:line="70" pos:column="35">&lt;<argument><name pos:line="70" pos:column="36">object</name></argument>&gt;</argument_list></name><op:operator pos:line="70" pos:column="43">)</op:operator><call><name><name pos:line="70" pos:column="44">SectionRow</name><op:operator pos:line="70" pos:column="54">.</op:operator><name pos:line="70" pos:column="55">Build</name></name><argument_list pos:line="70" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt> 

            <expr_stmt><expr><call><name><name pos:line="72" pos:column="13">Assert</name><op:operator pos:line="72" pos:column="19">.</op:operator><name pos:line="72" pos:column="20">Equal</name></name><argument_list pos:line="72" pos:column="25">(<argument><expr><call><name><name pos:line="72" pos:column="26">row</name><op:operator pos:line="72" pos:column="29">.</op:operator><name pos:line="72" pos:column="30">Last</name></name><argument_list pos:line="72" pos:column="34">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="72" pos:column="38">@"Text"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="74" pos:column="13">SectionRow</name><op:operator pos:line="74" pos:column="23">.</op:operator><name pos:line="74" pos:column="24">RawIf</name></name><argument_list pos:line="74" pos:column="29">(<argument><expr><lit:literal type="boolean" pos:line="74" pos:column="30">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="75" pos:column="13">row</name> <op:operator pos:line="75" pos:column="17">=</op:operator> <op:operator pos:line="75" pos:column="19">(</op:operator><name><name pos:line="75" pos:column="20">IEnumerable</name><argument_list pos:line="75" pos:column="31">&lt;<argument><name pos:line="75" pos:column="32">object</name></argument>&gt;</argument_list></name><op:operator pos:line="75" pos:column="39">)</op:operator><call><name><name pos:line="75" pos:column="40">SectionRow</name><op:operator pos:line="75" pos:column="50">.</op:operator><name pos:line="75" pos:column="51">Build</name></name><argument_list pos:line="75" pos:column="56">()</argument_list></call></expr>;</expr_stmt> 

            <expr_stmt><expr><call><name><name pos:line="77" pos:column="13">Assert</name><op:operator pos:line="77" pos:column="19">.</op:operator><name pos:line="77" pos:column="20">Equal</name></name><argument_list pos:line="77" pos:column="25">(<argument><expr><call><name><name pos:line="77" pos:column="26">row</name><op:operator pos:line="77" pos:column="29">.</op:operator><name pos:line="77" pos:column="30">Last</name></name><argument_list pos:line="77" pos:column="34">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="77" pos:column="38">@"!Text!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

		<function><type><attribute pos:line="80" pos:column="17">[<expr><name pos:line="80" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="81" pos:column="17">public</specifier> <name pos:line="81" pos:column="24">void</name></type> <name pos:line="81" pos:column="29">ApplySubToLastColumn</name><parameter_list pos:line="81" pos:column="49">()</parameter_list>
		<block pos:line="82" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="83" pos:column="25">SectionRow</name><op:operator pos:line="83" pos:column="35">.</op:operator><name pos:line="83" pos:column="36">Sub</name></name><argument_list pos:line="83" pos:column="39">()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="84" pos:column="13">var</name></type> <name pos:line="84" pos:column="17">row</name> <init pos:line="84" pos:column="21">= <expr><op:operator pos:line="84" pos:column="23">(</op:operator><name><name pos:line="84" pos:column="24">IEnumerable</name><argument_list pos:line="84" pos:column="35">&lt;<argument><name pos:line="84" pos:column="36">object</name></argument>&gt;</argument_list></name><op:operator pos:line="84" pos:column="43">)</op:operator><call><name><name pos:line="84" pos:column="44">SectionRow</name><op:operator pos:line="84" pos:column="54">.</op:operator><name pos:line="84" pos:column="55">Build</name></name><argument_list pos:line="84" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name><name pos:line="86" pos:column="25">Assert</name><op:operator pos:line="86" pos:column="31">.</op:operator><name pos:line="86" pos:column="32">Equal</name></name><argument_list pos:line="86" pos:column="37">(<argument><expr><call><name><name pos:line="86" pos:column="38">row</name><op:operator pos:line="86" pos:column="41">.</op:operator><name pos:line="86" pos:column="42">Last</name></name><argument_list pos:line="86" pos:column="46">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="86" pos:column="50">@"|Text|"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

        <function><type><attribute pos:line="89" pos:column="9">[<expr><name pos:line="89" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="90" pos:column="9">public</specifier> <name pos:line="90" pos:column="16">void</name></type> <name pos:line="90" pos:column="21">ApplySubToLastColumnIf</name><parameter_list pos:line="90" pos:column="43">()</parameter_list>
        <block pos:line="91" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="92" pos:column="13">SectionRow</name><op:operator pos:line="92" pos:column="23">.</op:operator><name pos:line="92" pos:column="24">SubIf</name></name><argument_list pos:line="92" pos:column="29">(<argument><expr><lit:literal type="boolean" pos:line="92" pos:column="30">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="93" pos:column="13">var</name></type> <name pos:line="93" pos:column="17">row</name> <init pos:line="93" pos:column="21">= <expr><op:operator pos:line="93" pos:column="23">(</op:operator><name><name pos:line="93" pos:column="24">IEnumerable</name><argument_list pos:line="93" pos:column="35">&lt;<argument><name pos:line="93" pos:column="36">object</name></argument>&gt;</argument_list></name><op:operator pos:line="93" pos:column="43">)</op:operator><call><name><name pos:line="93" pos:column="44">SectionRow</name><op:operator pos:line="93" pos:column="54">.</op:operator><name pos:line="93" pos:column="55">Build</name></name><argument_list pos:line="93" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt> 

            <expr_stmt><expr><call><name><name pos:line="95" pos:column="13">Assert</name><op:operator pos:line="95" pos:column="19">.</op:operator><name pos:line="95" pos:column="20">Equal</name></name><argument_list pos:line="95" pos:column="25">(<argument><expr><call><name><name pos:line="95" pos:column="26">row</name><op:operator pos:line="95" pos:column="29">.</op:operator><name pos:line="95" pos:column="30">Last</name></name><argument_list pos:line="95" pos:column="34">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="95" pos:column="38">@"Text"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="97" pos:column="13">SectionRow</name><op:operator pos:line="97" pos:column="23">.</op:operator><name pos:line="97" pos:column="24">SubIf</name></name><argument_list pos:line="97" pos:column="29">(<argument><expr><lit:literal type="boolean" pos:line="97" pos:column="30">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="98" pos:column="13">row</name> <op:operator pos:line="98" pos:column="17">=</op:operator> <op:operator pos:line="98" pos:column="19">(</op:operator><name><name pos:line="98" pos:column="20">IEnumerable</name><argument_list pos:line="98" pos:column="31">&lt;<argument><name pos:line="98" pos:column="32">object</name></argument>&gt;</argument_list></name><op:operator pos:line="98" pos:column="39">)</op:operator><call><name><name pos:line="98" pos:column="40">SectionRow</name><op:operator pos:line="98" pos:column="50">.</op:operator><name pos:line="98" pos:column="51">Build</name></name><argument_list pos:line="98" pos:column="56">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="100" pos:column="13">Assert</name><op:operator pos:line="100" pos:column="19">.</op:operator><name pos:line="100" pos:column="20">Equal</name></name><argument_list pos:line="100" pos:column="25">(<argument><expr><call><name><name pos:line="100" pos:column="26">row</name><op:operator pos:line="100" pos:column="29">.</op:operator><name pos:line="100" pos:column="30">Last</name></name><argument_list pos:line="100" pos:column="34">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="100" pos:column="38">@"|Text|"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

		<function><type><attribute pos:line="103" pos:column="17">[<expr><name pos:line="103" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="104" pos:column="17">public</specifier> <name pos:line="104" pos:column="24">void</name></type> <name pos:line="104" pos:column="29">ApplyUnderlineToLastColumn</name><parameter_list pos:line="104" pos:column="55">()</parameter_list>
		<block pos:line="105" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="106" pos:column="25">SectionRow</name><op:operator pos:line="106" pos:column="35">.</op:operator><name pos:line="106" pos:column="36">Underline</name></name><argument_list pos:line="106" pos:column="45">()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="107" pos:column="13">var</name></type> <name pos:line="107" pos:column="17">row</name> <init pos:line="107" pos:column="21">= <expr><op:operator pos:line="107" pos:column="23">(</op:operator><name><name pos:line="107" pos:column="24">IEnumerable</name><argument_list pos:line="107" pos:column="35">&lt;<argument><name pos:line="107" pos:column="36">object</name></argument>&gt;</argument_list></name><op:operator pos:line="107" pos:column="43">)</op:operator><call><name><name pos:line="107" pos:column="44">SectionRow</name><op:operator pos:line="107" pos:column="54">.</op:operator><name pos:line="107" pos:column="55">Build</name></name><argument_list pos:line="107" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name><name pos:line="109" pos:column="25">Assert</name><op:operator pos:line="109" pos:column="31">.</op:operator><name pos:line="109" pos:column="32">Equal</name></name><argument_list pos:line="109" pos:column="37">(<argument><expr><call><name><name pos:line="109" pos:column="38">row</name><op:operator pos:line="109" pos:column="41">.</op:operator><name pos:line="109" pos:column="42">Last</name></name><argument_list pos:line="109" pos:column="46">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="109" pos:column="50">"_Text_"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

        <function><type><attribute pos:line="112" pos:column="9">[<expr><name pos:line="112" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="113" pos:column="9">public</specifier> <name pos:line="113" pos:column="16">void</name></type> <name pos:line="113" pos:column="21">ApplyUnderlineToLastColumnIf</name><parameter_list pos:line="113" pos:column="49">()</parameter_list>
        <block pos:line="114" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="115" pos:column="13">SectionRow</name><op:operator pos:line="115" pos:column="23">.</op:operator><name pos:line="115" pos:column="24">UnderlineIf</name></name><argument_list pos:line="115" pos:column="35">(<argument><expr><lit:literal type="boolean" pos:line="115" pos:column="36">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="116" pos:column="13">var</name></type> <name pos:line="116" pos:column="17">row</name> <init pos:line="116" pos:column="21">= <expr><op:operator pos:line="116" pos:column="23">(</op:operator><name><name pos:line="116" pos:column="24">IEnumerable</name><argument_list pos:line="116" pos:column="35">&lt;<argument><name pos:line="116" pos:column="36">object</name></argument>&gt;</argument_list></name><op:operator pos:line="116" pos:column="43">)</op:operator><call><name><name pos:line="116" pos:column="44">SectionRow</name><op:operator pos:line="116" pos:column="54">.</op:operator><name pos:line="116" pos:column="55">Build</name></name><argument_list pos:line="116" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="118" pos:column="13">Assert</name><op:operator pos:line="118" pos:column="19">.</op:operator><name pos:line="118" pos:column="20">Equal</name></name><argument_list pos:line="118" pos:column="25">(<argument><expr><call><name><name pos:line="118" pos:column="26">row</name><op:operator pos:line="118" pos:column="29">.</op:operator><name pos:line="118" pos:column="30">Last</name></name><argument_list pos:line="118" pos:column="34">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="118" pos:column="38">@"Text"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="120" pos:column="13">SectionRow</name><op:operator pos:line="120" pos:column="23">.</op:operator><name pos:line="120" pos:column="24">UnderlineIf</name></name><argument_list pos:line="120" pos:column="35">(<argument><expr><lit:literal type="boolean" pos:line="120" pos:column="36">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="121" pos:column="13">row</name> <op:operator pos:line="121" pos:column="17">=</op:operator> <op:operator pos:line="121" pos:column="19">(</op:operator><name><name pos:line="121" pos:column="20">IEnumerable</name><argument_list pos:line="121" pos:column="31">&lt;<argument><name pos:line="121" pos:column="32">object</name></argument>&gt;</argument_list></name><op:operator pos:line="121" pos:column="39">)</op:operator><call><name><name pos:line="121" pos:column="40">SectionRow</name><op:operator pos:line="121" pos:column="50">.</op:operator><name pos:line="121" pos:column="51">Build</name></name><argument_list pos:line="121" pos:column="56">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="123" pos:column="13">Assert</name><op:operator pos:line="123" pos:column="19">.</op:operator><name pos:line="123" pos:column="20">Equal</name></name><argument_list pos:line="123" pos:column="25">(<argument><expr><call><name><name pos:line="123" pos:column="26">row</name><op:operator pos:line="123" pos:column="29">.</op:operator><name pos:line="123" pos:column="30">Last</name></name><argument_list pos:line="123" pos:column="34">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="123" pos:column="38">@"_Text_"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

		<function><type><attribute pos:line="126" pos:column="17">[<expr><name pos:line="126" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="127" pos:column="17">public</specifier> <name pos:line="127" pos:column="24">void</name></type> <name pos:line="127" pos:column="29">AddColumnWithError</name><parameter_list pos:line="127" pos:column="47">()</parameter_list>
		<block pos:line="128" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="129" pos:column="25">SectionRow</name><op:operator pos:line="129" pos:column="35">.</op:operator><name pos:line="129" pos:column="36">Error</name></name><argument_list pos:line="129" pos:column="41">()</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="131" pos:column="13">var</name></type> <name pos:line="131" pos:column="17">row</name> <init pos:line="131" pos:column="21">= <expr><op:operator pos:line="131" pos:column="23">(</op:operator><name><name pos:line="131" pos:column="24">IEnumerable</name><argument_list pos:line="131" pos:column="35">&lt;<argument><name pos:line="131" pos:column="36">object</name></argument>&gt;</argument_list></name><op:operator pos:line="131" pos:column="43">)</op:operator><call><name><name pos:line="131" pos:column="44">SectionRow</name><op:operator pos:line="131" pos:column="54">.</op:operator><name pos:line="131" pos:column="55">Build</name></name><argument_list pos:line="131" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="132" pos:column="13">Assert</name><op:operator pos:line="132" pos:column="19">.</op:operator><name pos:line="132" pos:column="20">Equal</name></name><argument_list pos:line="132" pos:column="25">(<argument><expr><call><name><name pos:line="132" pos:column="26">row</name><op:operator pos:line="132" pos:column="29">.</op:operator><name pos:line="132" pos:column="30">Last</name></name><argument_list pos:line="132" pos:column="34">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="132" pos:column="38">"error"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

        <function><type><attribute pos:line="135" pos:column="9">[<expr><name pos:line="135" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="136" pos:column="9">public</specifier> <name pos:line="136" pos:column="16">void</name></type> <name pos:line="136" pos:column="21">AddColumnWithErrorIf</name><parameter_list pos:line="136" pos:column="41">()</parameter_list>
        <block pos:line="137" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="138" pos:column="13">SectionRow</name><op:operator pos:line="138" pos:column="23">.</op:operator><name pos:line="138" pos:column="24">ErrorIf</name></name><argument_list pos:line="138" pos:column="31">(<argument><expr><lit:literal type="boolean" pos:line="138" pos:column="32">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
            <decl_stmt><decl><type><name pos:line="139" pos:column="13">var</name></type> <name pos:line="139" pos:column="17">row</name> <init pos:line="139" pos:column="21">= <expr><op:operator pos:line="139" pos:column="23">(</op:operator><name><name pos:line="139" pos:column="24">IEnumerable</name><argument_list pos:line="139" pos:column="35">&lt;<argument><name pos:line="139" pos:column="36">object</name></argument>&gt;</argument_list></name><op:operator pos:line="139" pos:column="43">)</op:operator><call><name><name pos:line="139" pos:column="44">SectionRow</name><op:operator pos:line="139" pos:column="54">.</op:operator><name pos:line="139" pos:column="55">Build</name></name><argument_list pos:line="139" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="141" pos:column="13">Assert</name><op:operator pos:line="141" pos:column="19">.</op:operator><name pos:line="141" pos:column="20">Equal</name></name><argument_list pos:line="141" pos:column="25">(<argument><expr><call><name><name pos:line="141" pos:column="26">row</name><op:operator pos:line="141" pos:column="29">.</op:operator><name pos:line="141" pos:column="30">Last</name></name><argument_list pos:line="141" pos:column="34">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="141" pos:column="38">@"Text"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="143" pos:column="13">SectionRow</name><op:operator pos:line="143" pos:column="23">.</op:operator><name pos:line="143" pos:column="24">ErrorIf</name></name><argument_list pos:line="143" pos:column="31">(<argument><expr><lit:literal type="boolean" pos:line="143" pos:column="32">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="144" pos:column="13">row</name> <op:operator pos:line="144" pos:column="17">=</op:operator> <op:operator pos:line="144" pos:column="19">(</op:operator><name><name pos:line="144" pos:column="20">IEnumerable</name><argument_list pos:line="144" pos:column="31">&lt;<argument><name pos:line="144" pos:column="32">object</name></argument>&gt;</argument_list></name><op:operator pos:line="144" pos:column="39">)</op:operator><call><name><name pos:line="144" pos:column="40">SectionRow</name><op:operator pos:line="144" pos:column="50">.</op:operator><name pos:line="144" pos:column="51">Build</name></name><argument_list pos:line="144" pos:column="56">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="146" pos:column="13">Assert</name><op:operator pos:line="146" pos:column="19">.</op:operator><name pos:line="146" pos:column="20">Equal</name></name><argument_list pos:line="146" pos:column="25">(<argument><expr><call><name><name pos:line="146" pos:column="26">row</name><op:operator pos:line="146" pos:column="29">.</op:operator><name pos:line="146" pos:column="30">Last</name></name><argument_list pos:line="146" pos:column="34">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="146" pos:column="38">@"error"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

		<function><type><attribute pos:line="149" pos:column="17">[<expr><name pos:line="149" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="150" pos:column="17">public</specifier> <name pos:line="150" pos:column="24">void</name></type> <name pos:line="150" pos:column="29">AddColumnWithFail</name><parameter_list pos:line="150" pos:column="46">()</parameter_list>
		<block pos:line="151" pos:column="17">{
            <expr_stmt><expr><call><name><name pos:line="152" pos:column="13">SectionRow</name><op:operator pos:line="152" pos:column="23">.</op:operator><name pos:line="152" pos:column="24">Fail</name></name><argument_list pos:line="152" pos:column="28">()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="153" pos:column="13">var</name></type> <name pos:line="153" pos:column="17">row</name> <init pos:line="153" pos:column="21">= <expr><op:operator pos:line="153" pos:column="23">(</op:operator><name><name pos:line="153" pos:column="24">IEnumerable</name><argument_list pos:line="153" pos:column="35">&lt;<argument><name pos:line="153" pos:column="36">object</name></argument>&gt;</argument_list></name><op:operator pos:line="153" pos:column="43">)</op:operator><call><name><name pos:line="153" pos:column="44">SectionRow</name><op:operator pos:line="153" pos:column="54">.</op:operator><name pos:line="153" pos:column="55">Build</name></name><argument_list pos:line="153" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name><name pos:line="155" pos:column="25">Assert</name><op:operator pos:line="155" pos:column="31">.</op:operator><name pos:line="155" pos:column="32">Equal</name></name><argument_list pos:line="155" pos:column="37">(<argument><expr><call><name><name pos:line="155" pos:column="38">row</name><op:operator pos:line="155" pos:column="41">.</op:operator><name pos:line="155" pos:column="42">Last</name></name><argument_list pos:line="155" pos:column="46">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="155" pos:column="50">"fail"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

        <function><type><attribute pos:line="158" pos:column="9">[<expr><name pos:line="158" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="159" pos:column="9">public</specifier> <name pos:line="159" pos:column="16">void</name></type> <name pos:line="159" pos:column="21">AddColumnWithFailIf</name><parameter_list pos:line="159" pos:column="40">()</parameter_list>
        <block pos:line="160" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="161" pos:column="13">SectionRow</name><op:operator pos:line="161" pos:column="23">.</op:operator><name pos:line="161" pos:column="24">FailIf</name></name><argument_list pos:line="161" pos:column="30">(<argument><expr><lit:literal type="boolean" pos:line="161" pos:column="31">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="162" pos:column="13">var</name></type> <name pos:line="162" pos:column="17">row</name> <init pos:line="162" pos:column="21">= <expr><op:operator pos:line="162" pos:column="23">(</op:operator><name><name pos:line="162" pos:column="24">IEnumerable</name><argument_list pos:line="162" pos:column="35">&lt;<argument><name pos:line="162" pos:column="36">object</name></argument>&gt;</argument_list></name><op:operator pos:line="162" pos:column="43">)</op:operator><call><name><name pos:line="162" pos:column="44">SectionRow</name><op:operator pos:line="162" pos:column="54">.</op:operator><name pos:line="162" pos:column="55">Build</name></name><argument_list pos:line="162" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="164" pos:column="13">Assert</name><op:operator pos:line="164" pos:column="19">.</op:operator><name pos:line="164" pos:column="20">Equal</name></name><argument_list pos:line="164" pos:column="25">(<argument><expr><call><name><name pos:line="164" pos:column="26">row</name><op:operator pos:line="164" pos:column="29">.</op:operator><name pos:line="164" pos:column="30">Last</name></name><argument_list pos:line="164" pos:column="34">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="164" pos:column="38">@"Text"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="166" pos:column="13">SectionRow</name><op:operator pos:line="166" pos:column="23">.</op:operator><name pos:line="166" pos:column="24">FailIf</name></name><argument_list pos:line="166" pos:column="30">(<argument><expr><lit:literal type="boolean" pos:line="166" pos:column="31">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="167" pos:column="13">row</name> <op:operator pos:line="167" pos:column="17">=</op:operator> <op:operator pos:line="167" pos:column="19">(</op:operator><name><name pos:line="167" pos:column="20">IEnumerable</name><argument_list pos:line="167" pos:column="31">&lt;<argument><name pos:line="167" pos:column="32">object</name></argument>&gt;</argument_list></name><op:operator pos:line="167" pos:column="39">)</op:operator><call><name><name pos:line="167" pos:column="40">SectionRow</name><op:operator pos:line="167" pos:column="50">.</op:operator><name pos:line="167" pos:column="51">Build</name></name><argument_list pos:line="167" pos:column="56">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="169" pos:column="13">Assert</name><op:operator pos:line="169" pos:column="19">.</op:operator><name pos:line="169" pos:column="20">Equal</name></name><argument_list pos:line="169" pos:column="25">(<argument><expr><call><name><name pos:line="169" pos:column="26">row</name><op:operator pos:line="169" pos:column="29">.</op:operator><name pos:line="169" pos:column="30">Last</name></name><argument_list pos:line="169" pos:column="34">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="169" pos:column="38">@"fail"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

		<function><type><attribute pos:line="172" pos:column="17">[<expr><name pos:line="172" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="173" pos:column="17">public</specifier> <name pos:line="173" pos:column="24">void</name></type> <name pos:line="173" pos:column="29">AddColumnWithInfo</name><parameter_list pos:line="173" pos:column="46">()</parameter_list>
		<block pos:line="174" pos:column="17">{
            <expr_stmt><expr><call><name><name pos:line="175" pos:column="13">SectionRow</name><op:operator pos:line="175" pos:column="23">.</op:operator><name pos:line="175" pos:column="24">Info</name></name><argument_list pos:line="175" pos:column="28">()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="176" pos:column="13">var</name></type> <name pos:line="176" pos:column="17">row</name> <init pos:line="176" pos:column="21">= <expr><op:operator pos:line="176" pos:column="23">(</op:operator><name><name pos:line="176" pos:column="24">IEnumerable</name><argument_list pos:line="176" pos:column="35">&lt;<argument><name pos:line="176" pos:column="36">object</name></argument>&gt;</argument_list></name><op:operator pos:line="176" pos:column="43">)</op:operator><call><name><name pos:line="176" pos:column="44">SectionRow</name><op:operator pos:line="176" pos:column="54">.</op:operator><name pos:line="176" pos:column="55">Build</name></name><argument_list pos:line="176" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name><name pos:line="178" pos:column="25">Assert</name><op:operator pos:line="178" pos:column="31">.</op:operator><name pos:line="178" pos:column="32">Equal</name></name><argument_list pos:line="178" pos:column="37">(<argument><expr><call><name><name pos:line="178" pos:column="38">row</name><op:operator pos:line="178" pos:column="41">.</op:operator><name pos:line="178" pos:column="42">Last</name></name><argument_list pos:line="178" pos:column="46">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="178" pos:column="50">"info"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

        <function><type><attribute pos:line="181" pos:column="9">[<expr><name pos:line="181" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="182" pos:column="9">public</specifier> <name pos:line="182" pos:column="16">void</name></type> <name pos:line="182" pos:column="21">AddColumnWithInfoIf</name><parameter_list pos:line="182" pos:column="40">()</parameter_list>
        <block pos:line="183" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="184" pos:column="13">SectionRow</name><op:operator pos:line="184" pos:column="23">.</op:operator><name pos:line="184" pos:column="24">InfoIf</name></name><argument_list pos:line="184" pos:column="30">(<argument><expr><lit:literal type="boolean" pos:line="184" pos:column="31">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="185" pos:column="13">var</name></type> <name pos:line="185" pos:column="17">row</name> <init pos:line="185" pos:column="21">= <expr><op:operator pos:line="185" pos:column="23">(</op:operator><name><name pos:line="185" pos:column="24">IEnumerable</name><argument_list pos:line="185" pos:column="35">&lt;<argument><name pos:line="185" pos:column="36">object</name></argument>&gt;</argument_list></name><op:operator pos:line="185" pos:column="43">)</op:operator><call><name><name pos:line="185" pos:column="44">SectionRow</name><op:operator pos:line="185" pos:column="54">.</op:operator><name pos:line="185" pos:column="55">Build</name></name><argument_list pos:line="185" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="187" pos:column="13">Assert</name><op:operator pos:line="187" pos:column="19">.</op:operator><name pos:line="187" pos:column="20">Equal</name></name><argument_list pos:line="187" pos:column="25">(<argument><expr><call><name><name pos:line="187" pos:column="26">row</name><op:operator pos:line="187" pos:column="29">.</op:operator><name pos:line="187" pos:column="30">Last</name></name><argument_list pos:line="187" pos:column="34">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="187" pos:column="38">@"Text"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="189" pos:column="13">SectionRow</name><op:operator pos:line="189" pos:column="23">.</op:operator><name pos:line="189" pos:column="24">InfoIf</name></name><argument_list pos:line="189" pos:column="30">(<argument><expr><lit:literal type="boolean" pos:line="189" pos:column="31">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="190" pos:column="13">row</name> <op:operator pos:line="190" pos:column="17">=</op:operator> <op:operator pos:line="190" pos:column="19">(</op:operator><name><name pos:line="190" pos:column="20">IEnumerable</name><argument_list pos:line="190" pos:column="31">&lt;<argument><name pos:line="190" pos:column="32">object</name></argument>&gt;</argument_list></name><op:operator pos:line="190" pos:column="39">)</op:operator><call><name><name pos:line="190" pos:column="40">SectionRow</name><op:operator pos:line="190" pos:column="50">.</op:operator><name pos:line="190" pos:column="51">Build</name></name><argument_list pos:line="190" pos:column="56">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="192" pos:column="13">Assert</name><op:operator pos:line="192" pos:column="19">.</op:operator><name pos:line="192" pos:column="20">Equal</name></name><argument_list pos:line="192" pos:column="25">(<argument><expr><call><name><name pos:line="192" pos:column="26">row</name><op:operator pos:line="192" pos:column="29">.</op:operator><name pos:line="192" pos:column="30">Last</name></name><argument_list pos:line="192" pos:column="34">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="192" pos:column="38">@"info"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

		<function><type><attribute pos:line="195" pos:column="17">[<expr><name pos:line="195" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="196" pos:column="17">public</specifier> <name pos:line="196" pos:column="24">void</name></type> <name pos:line="196" pos:column="29">AddColumnWithLoading</name><parameter_list pos:line="196" pos:column="49">()</parameter_list>
		<block pos:line="197" pos:column="17">{
            <expr_stmt><expr><call><name><name pos:line="198" pos:column="13">SectionRow</name><op:operator pos:line="198" pos:column="23">.</op:operator><name pos:line="198" pos:column="24">Loading</name></name><argument_list pos:line="198" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="199" pos:column="13">var</name></type> <name pos:line="199" pos:column="17">row</name> <init pos:line="199" pos:column="21">= <expr><op:operator pos:line="199" pos:column="23">(</op:operator><name><name pos:line="199" pos:column="24">IEnumerable</name><argument_list pos:line="199" pos:column="35">&lt;<argument><name pos:line="199" pos:column="36">object</name></argument>&gt;</argument_list></name><op:operator pos:line="199" pos:column="43">)</op:operator><call><name><name pos:line="199" pos:column="44">SectionRow</name><op:operator pos:line="199" pos:column="54">.</op:operator><name pos:line="199" pos:column="55">Build</name></name><argument_list pos:line="199" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name><name pos:line="201" pos:column="25">Assert</name><op:operator pos:line="201" pos:column="31">.</op:operator><name pos:line="201" pos:column="32">Equal</name></name><argument_list pos:line="201" pos:column="37">(<argument><expr><call><name><name pos:line="201" pos:column="38">row</name><op:operator pos:line="201" pos:column="41">.</op:operator><name pos:line="201" pos:column="42">Last</name></name><argument_list pos:line="201" pos:column="46">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="201" pos:column="50">"loading"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

        <function><type><attribute pos:line="204" pos:column="9">[<expr><name pos:line="204" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="205" pos:column="9">public</specifier> <name pos:line="205" pos:column="16">void</name></type> <name pos:line="205" pos:column="21">AddColumnWithLodaingIf</name><parameter_list pos:line="205" pos:column="43">()</parameter_list>
        <block pos:line="206" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="207" pos:column="13">SectionRow</name><op:operator pos:line="207" pos:column="23">.</op:operator><name pos:line="207" pos:column="24">LoadingIf</name></name><argument_list pos:line="207" pos:column="33">(<argument><expr><lit:literal type="boolean" pos:line="207" pos:column="34">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="208" pos:column="13">var</name></type> <name pos:line="208" pos:column="17">row</name> <init pos:line="208" pos:column="21">= <expr><op:operator pos:line="208" pos:column="23">(</op:operator><name><name pos:line="208" pos:column="24">IEnumerable</name><argument_list pos:line="208" pos:column="35">&lt;<argument><name pos:line="208" pos:column="36">object</name></argument>&gt;</argument_list></name><op:operator pos:line="208" pos:column="43">)</op:operator><call><name><name pos:line="208" pos:column="44">SectionRow</name><op:operator pos:line="208" pos:column="54">.</op:operator><name pos:line="208" pos:column="55">Build</name></name><argument_list pos:line="208" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="210" pos:column="13">Assert</name><op:operator pos:line="210" pos:column="19">.</op:operator><name pos:line="210" pos:column="20">Equal</name></name><argument_list pos:line="210" pos:column="25">(<argument><expr><call><name><name pos:line="210" pos:column="26">row</name><op:operator pos:line="210" pos:column="29">.</op:operator><name pos:line="210" pos:column="30">Last</name></name><argument_list pos:line="210" pos:column="34">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="210" pos:column="38">@"Text"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="212" pos:column="13">SectionRow</name><op:operator pos:line="212" pos:column="23">.</op:operator><name pos:line="212" pos:column="24">LoadingIf</name></name><argument_list pos:line="212" pos:column="33">(<argument><expr><lit:literal type="boolean" pos:line="212" pos:column="34">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="213" pos:column="13">row</name> <op:operator pos:line="213" pos:column="17">=</op:operator> <op:operator pos:line="213" pos:column="19">(</op:operator><name><name pos:line="213" pos:column="20">IEnumerable</name><argument_list pos:line="213" pos:column="31">&lt;<argument><name pos:line="213" pos:column="32">object</name></argument>&gt;</argument_list></name><op:operator pos:line="213" pos:column="39">)</op:operator><call><name><name pos:line="213" pos:column="40">SectionRow</name><op:operator pos:line="213" pos:column="50">.</op:operator><name pos:line="213" pos:column="51">Build</name></name><argument_list pos:line="213" pos:column="56">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="215" pos:column="13">Assert</name><op:operator pos:line="215" pos:column="19">.</op:operator><name pos:line="215" pos:column="20">Equal</name></name><argument_list pos:line="215" pos:column="25">(<argument><expr><call><name><name pos:line="215" pos:column="26">row</name><op:operator pos:line="215" pos:column="29">.</op:operator><name pos:line="215" pos:column="30">Last</name></name><argument_list pos:line="215" pos:column="34">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="215" pos:column="38">@"loading"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

		<function><type><attribute pos:line="218" pos:column="17">[<expr><name pos:line="218" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="219" pos:column="17">public</specifier> <name pos:line="219" pos:column="24">void</name></type> <name pos:line="219" pos:column="29">AddColumnWithMs</name><parameter_list pos:line="219" pos:column="44">()</parameter_list>
		<block pos:line="220" pos:column="17">{
            <expr_stmt><expr><call><name><name pos:line="221" pos:column="13">SectionRow</name><op:operator pos:line="221" pos:column="23">.</op:operator><name pos:line="221" pos:column="24">Ms</name></name><argument_list pos:line="221" pos:column="26">()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="222" pos:column="13">var</name></type> <name pos:line="222" pos:column="17">row</name> <init pos:line="222" pos:column="21">= <expr><op:operator pos:line="222" pos:column="23">(</op:operator><name><name pos:line="222" pos:column="24">IEnumerable</name><argument_list pos:line="222" pos:column="35">&lt;<argument><name pos:line="222" pos:column="36">object</name></argument>&gt;</argument_list></name><op:operator pos:line="222" pos:column="43">)</op:operator><call><name><name pos:line="222" pos:column="44">SectionRow</name><op:operator pos:line="222" pos:column="54">.</op:operator><name pos:line="222" pos:column="55">Build</name></name><argument_list pos:line="222" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name><name pos:line="224" pos:column="25">Assert</name><op:operator pos:line="224" pos:column="31">.</op:operator><name pos:line="224" pos:column="32">Equal</name></name><argument_list pos:line="224" pos:column="37">(<argument><expr><call><name><name pos:line="224" pos:column="38">row</name><op:operator pos:line="224" pos:column="41">.</op:operator><name pos:line="224" pos:column="42">Last</name></name><argument_list pos:line="224" pos:column="46">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="224" pos:column="50">"ms"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

        <function><type><attribute pos:line="227" pos:column="9">[<expr><name pos:line="227" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="228" pos:column="9">public</specifier> <name pos:line="228" pos:column="16">void</name></type> <name pos:line="228" pos:column="21">AddColumnWithMsIf</name><parameter_list pos:line="228" pos:column="38">()</parameter_list>
        <block pos:line="229" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="230" pos:column="13">SectionRow</name><op:operator pos:line="230" pos:column="23">.</op:operator><name pos:line="230" pos:column="24">MsIf</name></name><argument_list pos:line="230" pos:column="28">(<argument><expr><lit:literal type="boolean" pos:line="230" pos:column="29">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="231" pos:column="13">var</name></type> <name pos:line="231" pos:column="17">row</name> <init pos:line="231" pos:column="21">= <expr><op:operator pos:line="231" pos:column="23">(</op:operator><name><name pos:line="231" pos:column="24">IEnumerable</name><argument_list pos:line="231" pos:column="35">&lt;<argument><name pos:line="231" pos:column="36">object</name></argument>&gt;</argument_list></name><op:operator pos:line="231" pos:column="43">)</op:operator><call><name><name pos:line="231" pos:column="44">SectionRow</name><op:operator pos:line="231" pos:column="54">.</op:operator><name pos:line="231" pos:column="55">Build</name></name><argument_list pos:line="231" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="233" pos:column="13">Assert</name><op:operator pos:line="233" pos:column="19">.</op:operator><name pos:line="233" pos:column="20">Equal</name></name><argument_list pos:line="233" pos:column="25">(<argument><expr><call><name><name pos:line="233" pos:column="26">row</name><op:operator pos:line="233" pos:column="29">.</op:operator><name pos:line="233" pos:column="30">Last</name></name><argument_list pos:line="233" pos:column="34">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="233" pos:column="38">@"Text"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="235" pos:column="13">SectionRow</name><op:operator pos:line="235" pos:column="23">.</op:operator><name pos:line="235" pos:column="24">MsIf</name></name><argument_list pos:line="235" pos:column="28">(<argument><expr><lit:literal type="boolean" pos:line="235" pos:column="29">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="236" pos:column="13">row</name> <op:operator pos:line="236" pos:column="17">=</op:operator> <op:operator pos:line="236" pos:column="19">(</op:operator><name><name pos:line="236" pos:column="20">IEnumerable</name><argument_list pos:line="236" pos:column="31">&lt;<argument><name pos:line="236" pos:column="32">object</name></argument>&gt;</argument_list></name><op:operator pos:line="236" pos:column="39">)</op:operator><call><name><name pos:line="236" pos:column="40">SectionRow</name><op:operator pos:line="236" pos:column="50">.</op:operator><name pos:line="236" pos:column="51">Build</name></name><argument_list pos:line="236" pos:column="56">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="238" pos:column="13">Assert</name><op:operator pos:line="238" pos:column="19">.</op:operator><name pos:line="238" pos:column="20">Equal</name></name><argument_list pos:line="238" pos:column="25">(<argument><expr><call><name><name pos:line="238" pos:column="26">row</name><op:operator pos:line="238" pos:column="29">.</op:operator><name pos:line="238" pos:column="30">Last</name></name><argument_list pos:line="238" pos:column="34">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="238" pos:column="38">@"ms"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

		<function><type><attribute pos:line="241" pos:column="17">[<expr><name pos:line="241" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="242" pos:column="17">public</specifier> <name pos:line="242" pos:column="24">void</name></type> <name pos:line="242" pos:column="29">AddColumnWithQuiet</name><parameter_list pos:line="242" pos:column="47">()</parameter_list>
		<block pos:line="243" pos:column="17">{
            <expr_stmt><expr><call><name><name pos:line="244" pos:column="13">SectionRow</name><op:operator pos:line="244" pos:column="23">.</op:operator><name pos:line="244" pos:column="24">Quiet</name></name><argument_list pos:line="244" pos:column="29">()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="245" pos:column="13">var</name></type> <name pos:line="245" pos:column="17">row</name> <init pos:line="245" pos:column="21">= <expr><op:operator pos:line="245" pos:column="23">(</op:operator><name><name pos:line="245" pos:column="24">IEnumerable</name><argument_list pos:line="245" pos:column="35">&lt;<argument><name pos:line="245" pos:column="36">object</name></argument>&gt;</argument_list></name><op:operator pos:line="245" pos:column="43">)</op:operator><call><name><name pos:line="245" pos:column="44">SectionRow</name><op:operator pos:line="245" pos:column="54">.</op:operator><name pos:line="245" pos:column="55">Build</name></name><argument_list pos:line="245" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name><name pos:line="247" pos:column="25">Assert</name><op:operator pos:line="247" pos:column="31">.</op:operator><name pos:line="247" pos:column="32">Equal</name></name><argument_list pos:line="247" pos:column="37">(<argument><expr><call><name><name pos:line="247" pos:column="38">row</name><op:operator pos:line="247" pos:column="41">.</op:operator><name pos:line="247" pos:column="42">Last</name></name><argument_list pos:line="247" pos:column="46">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="247" pos:column="50">"quiet"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

        <function><type><attribute pos:line="250" pos:column="9">[<expr><name pos:line="250" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="251" pos:column="9">public</specifier> <name pos:line="251" pos:column="16">void</name></type> <name pos:line="251" pos:column="21">AddColumnWithQuietIf</name><parameter_list pos:line="251" pos:column="41">()</parameter_list>
        <block pos:line="252" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="253" pos:column="13">SectionRow</name><op:operator pos:line="253" pos:column="23">.</op:operator><name pos:line="253" pos:column="24">QuietIf</name></name><argument_list pos:line="253" pos:column="31">(<argument><expr><lit:literal type="boolean" pos:line="253" pos:column="32">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="254" pos:column="13">var</name></type> <name pos:line="254" pos:column="17">row</name> <init pos:line="254" pos:column="21">= <expr><op:operator pos:line="254" pos:column="23">(</op:operator><name><name pos:line="254" pos:column="24">IEnumerable</name><argument_list pos:line="254" pos:column="35">&lt;<argument><name pos:line="254" pos:column="36">object</name></argument>&gt;</argument_list></name><op:operator pos:line="254" pos:column="43">)</op:operator><call><name><name pos:line="254" pos:column="44">SectionRow</name><op:operator pos:line="254" pos:column="54">.</op:operator><name pos:line="254" pos:column="55">Build</name></name><argument_list pos:line="254" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt> 

            <expr_stmt><expr><call><name><name pos:line="256" pos:column="13">Assert</name><op:operator pos:line="256" pos:column="19">.</op:operator><name pos:line="256" pos:column="20">Equal</name></name><argument_list pos:line="256" pos:column="25">(<argument><expr><call><name><name pos:line="256" pos:column="26">row</name><op:operator pos:line="256" pos:column="29">.</op:operator><name pos:line="256" pos:column="30">Last</name></name><argument_list pos:line="256" pos:column="34">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="256" pos:column="38">@"Text"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="258" pos:column="13">SectionRow</name><op:operator pos:line="258" pos:column="23">.</op:operator><name pos:line="258" pos:column="24">QuietIf</name></name><argument_list pos:line="258" pos:column="31">(<argument><expr><lit:literal type="boolean" pos:line="258" pos:column="32">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="259" pos:column="13">row</name> <op:operator pos:line="259" pos:column="17">=</op:operator> <op:operator pos:line="259" pos:column="19">(</op:operator><name><name pos:line="259" pos:column="20">IEnumerable</name><argument_list pos:line="259" pos:column="31">&lt;<argument><name pos:line="259" pos:column="32">object</name></argument>&gt;</argument_list></name><op:operator pos:line="259" pos:column="39">)</op:operator><call><name><name pos:line="259" pos:column="40">SectionRow</name><op:operator pos:line="259" pos:column="50">.</op:operator><name pos:line="259" pos:column="51">Build</name></name><argument_list pos:line="259" pos:column="56">()</argument_list></call></expr>;</expr_stmt> 

            <expr_stmt><expr><call><name><name pos:line="261" pos:column="13">Assert</name><op:operator pos:line="261" pos:column="19">.</op:operator><name pos:line="261" pos:column="20">Equal</name></name><argument_list pos:line="261" pos:column="25">(<argument><expr><call><name><name pos:line="261" pos:column="26">row</name><op:operator pos:line="261" pos:column="29">.</op:operator><name pos:line="261" pos:column="30">Last</name></name><argument_list pos:line="261" pos:column="34">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="261" pos:column="38">@"quiet"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

		<function><type><attribute pos:line="264" pos:column="17">[<expr><name pos:line="264" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="265" pos:column="17">public</specifier> <name pos:line="265" pos:column="24">void</name></type> <name pos:line="265" pos:column="29">AddColumnWithSelected</name><parameter_list pos:line="265" pos:column="50">()</parameter_list>
		<block pos:line="266" pos:column="17">{
            <expr_stmt><expr><call><name><name pos:line="267" pos:column="13">SectionRow</name><op:operator pos:line="267" pos:column="23">.</op:operator><name pos:line="267" pos:column="24">Selected</name></name><argument_list pos:line="267" pos:column="32">()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="268" pos:column="13">var</name></type> <name pos:line="268" pos:column="17">row</name> <init pos:line="268" pos:column="21">= <expr><op:operator pos:line="268" pos:column="23">(</op:operator><name><name pos:line="268" pos:column="24">IEnumerable</name><argument_list pos:line="268" pos:column="35">&lt;<argument><name pos:line="268" pos:column="36">object</name></argument>&gt;</argument_list></name><op:operator pos:line="268" pos:column="43">)</op:operator><call><name><name pos:line="268" pos:column="44">SectionRow</name><op:operator pos:line="268" pos:column="54">.</op:operator><name pos:line="268" pos:column="55">Build</name></name><argument_list pos:line="268" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name><name pos:line="270" pos:column="25">Assert</name><op:operator pos:line="270" pos:column="31">.</op:operator><name pos:line="270" pos:column="32">Equal</name></name><argument_list pos:line="270" pos:column="37">(<argument><expr><call><name><name pos:line="270" pos:column="38">row</name><op:operator pos:line="270" pos:column="41">.</op:operator><name pos:line="270" pos:column="42">Last</name></name><argument_list pos:line="270" pos:column="46">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="270" pos:column="50">"selected"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

        <function><type><attribute pos:line="273" pos:column="9">[<expr><name pos:line="273" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="274" pos:column="9">public</specifier> <name pos:line="274" pos:column="16">void</name></type> <name pos:line="274" pos:column="21">AddColumnWithSelectedIf</name><parameter_list pos:line="274" pos:column="44">()</parameter_list>
        <block pos:line="275" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="276" pos:column="13">SectionRow</name><op:operator pos:line="276" pos:column="23">.</op:operator><name pos:line="276" pos:column="24">SelectedIf</name></name><argument_list pos:line="276" pos:column="34">(<argument><expr><lit:literal type="boolean" pos:line="276" pos:column="35">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="277" pos:column="13">var</name></type> <name pos:line="277" pos:column="17">row</name> <init pos:line="277" pos:column="21">= <expr><op:operator pos:line="277" pos:column="23">(</op:operator><name><name pos:line="277" pos:column="24">IEnumerable</name><argument_list pos:line="277" pos:column="35">&lt;<argument><name pos:line="277" pos:column="36">object</name></argument>&gt;</argument_list></name><op:operator pos:line="277" pos:column="43">)</op:operator><call><name><name pos:line="277" pos:column="44">SectionRow</name><op:operator pos:line="277" pos:column="54">.</op:operator><name pos:line="277" pos:column="55">Build</name></name><argument_list pos:line="277" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="279" pos:column="13">Assert</name><op:operator pos:line="279" pos:column="19">.</op:operator><name pos:line="279" pos:column="20">Equal</name></name><argument_list pos:line="279" pos:column="25">(<argument><expr><call><name><name pos:line="279" pos:column="26">row</name><op:operator pos:line="279" pos:column="29">.</op:operator><name pos:line="279" pos:column="30">Last</name></name><argument_list pos:line="279" pos:column="34">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="279" pos:column="38">@"Text"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="281" pos:column="13">SectionRow</name><op:operator pos:line="281" pos:column="23">.</op:operator><name pos:line="281" pos:column="24">SelectedIf</name></name><argument_list pos:line="281" pos:column="34">(<argument><expr><lit:literal type="boolean" pos:line="281" pos:column="35">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="282" pos:column="13">row</name> <op:operator pos:line="282" pos:column="17">=</op:operator> <op:operator pos:line="282" pos:column="19">(</op:operator><name><name pos:line="282" pos:column="20">IEnumerable</name><argument_list pos:line="282" pos:column="31">&lt;<argument><name pos:line="282" pos:column="32">object</name></argument>&gt;</argument_list></name><op:operator pos:line="282" pos:column="39">)</op:operator><call><name><name pos:line="282" pos:column="40">SectionRow</name><op:operator pos:line="282" pos:column="50">.</op:operator><name pos:line="282" pos:column="51">Build</name></name><argument_list pos:line="282" pos:column="56">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="284" pos:column="13">Assert</name><op:operator pos:line="284" pos:column="19">.</op:operator><name pos:line="284" pos:column="20">Equal</name></name><argument_list pos:line="284" pos:column="25">(<argument><expr><call><name><name pos:line="284" pos:column="26">row</name><op:operator pos:line="284" pos:column="29">.</op:operator><name pos:line="284" pos:column="30">Last</name></name><argument_list pos:line="284" pos:column="34">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="284" pos:column="38">@"selected"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>


		<function><type><attribute pos:line="288" pos:column="17">[<expr><name pos:line="288" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="289" pos:column="17">public</specifier> <name pos:line="289" pos:column="24">void</name></type> <name pos:line="289" pos:column="29">AddColumnWithWarn</name><parameter_list pos:line="289" pos:column="46">()</parameter_list>
		<block pos:line="290" pos:column="17">{
            <expr_stmt><expr><call><name><name pos:line="291" pos:column="13">SectionRow</name><op:operator pos:line="291" pos:column="23">.</op:operator><name pos:line="291" pos:column="24">Warn</name></name><argument_list pos:line="291" pos:column="28">()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="292" pos:column="13">var</name></type> <name pos:line="292" pos:column="17">row</name> <init pos:line="292" pos:column="21">= <expr><op:operator pos:line="292" pos:column="23">(</op:operator><name><name pos:line="292" pos:column="24">IEnumerable</name><argument_list pos:line="292" pos:column="35">&lt;<argument><name pos:line="292" pos:column="36">object</name></argument>&gt;</argument_list></name><op:operator pos:line="292" pos:column="43">)</op:operator><call><name><name pos:line="292" pos:column="44">SectionRow</name><op:operator pos:line="292" pos:column="54">.</op:operator><name pos:line="292" pos:column="55">Build</name></name><argument_list pos:line="292" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name><name pos:line="294" pos:column="25">Assert</name><op:operator pos:line="294" pos:column="31">.</op:operator><name pos:line="294" pos:column="32">Equal</name></name><argument_list pos:line="294" pos:column="37">(<argument><expr><call><name><name pos:line="294" pos:column="38">row</name><op:operator pos:line="294" pos:column="41">.</op:operator><name pos:line="294" pos:column="42">Last</name></name><argument_list pos:line="294" pos:column="46">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="294" pos:column="50">"warn"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

        <function><type><attribute pos:line="297" pos:column="9">[<expr><name pos:line="297" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="298" pos:column="9">public</specifier> <name pos:line="298" pos:column="16">void</name></type> <name pos:line="298" pos:column="21">AddColumnWithWarnIf</name><parameter_list pos:line="298" pos:column="40">()</parameter_list>
        <block pos:line="299" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="300" pos:column="13">SectionRow</name><op:operator pos:line="300" pos:column="23">.</op:operator><name pos:line="300" pos:column="24">WarnIf</name></name><argument_list pos:line="300" pos:column="30">(<argument><expr><lit:literal type="boolean" pos:line="300" pos:column="31">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="301" pos:column="13">var</name></type> <name pos:line="301" pos:column="17">row</name> <init pos:line="301" pos:column="21">= <expr><op:operator pos:line="301" pos:column="23">(</op:operator><name><name pos:line="301" pos:column="24">IEnumerable</name><argument_list pos:line="301" pos:column="35">&lt;<argument><name pos:line="301" pos:column="36">object</name></argument>&gt;</argument_list></name><op:operator pos:line="301" pos:column="43">)</op:operator><call><name><name pos:line="301" pos:column="44">SectionRow</name><op:operator pos:line="301" pos:column="54">.</op:operator><name pos:line="301" pos:column="55">Build</name></name><argument_list pos:line="301" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="303" pos:column="13">Assert</name><op:operator pos:line="303" pos:column="19">.</op:operator><name pos:line="303" pos:column="20">Equal</name></name><argument_list pos:line="303" pos:column="25">(<argument><expr><call><name><name pos:line="303" pos:column="26">row</name><op:operator pos:line="303" pos:column="29">.</op:operator><name pos:line="303" pos:column="30">Last</name></name><argument_list pos:line="303" pos:column="34">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="303" pos:column="38">@"Text"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="305" pos:column="13">SectionRow</name><op:operator pos:line="305" pos:column="23">.</op:operator><name pos:line="305" pos:column="24">WarnIf</name></name><argument_list pos:line="305" pos:column="30">(<argument><expr><lit:literal type="boolean" pos:line="305" pos:column="31">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="306" pos:column="13">row</name> <op:operator pos:line="306" pos:column="17">=</op:operator> <op:operator pos:line="306" pos:column="19">(</op:operator><name><name pos:line="306" pos:column="20">IEnumerable</name><argument_list pos:line="306" pos:column="31">&lt;<argument><name pos:line="306" pos:column="32">object</name></argument>&gt;</argument_list></name><op:operator pos:line="306" pos:column="39">)</op:operator><call><name><name pos:line="306" pos:column="40">SectionRow</name><op:operator pos:line="306" pos:column="50">.</op:operator><name pos:line="306" pos:column="51">Build</name></name><argument_list pos:line="306" pos:column="56">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="308" pos:column="13">Assert</name><op:operator pos:line="308" pos:column="19">.</op:operator><name pos:line="308" pos:column="20">Equal</name></name><argument_list pos:line="308" pos:column="25">(<argument><expr><call><name><name pos:line="308" pos:column="26">row</name><op:operator pos:line="308" pos:column="29">.</op:operator><name pos:line="308" pos:column="30">Last</name></name><argument_list pos:line="308" pos:column="34">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="308" pos:column="38">@"warn"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

		<decl_stmt><decl><type><specifier pos:line="311" pos:column="17">private</specifier> <name pos:line="311" pos:column="25">TabSectionRow</name></type> <name pos:line="311" pos:column="39">SectionRow</name> <block pos:line="311" pos:column="50">{ <function_decl><name pos:line="311" pos:column="52">get</name>;</function_decl> <function_decl><name pos:line="311" pos:column="57">set</name>;</function_decl> }</block></decl></decl_stmt>

		<constructor><specifier pos:line="313" pos:column="17">public</specifier> <name pos:line="313" pos:column="24">TabRowFormattingExtensionsShould</name><parameter_list pos:line="313" pos:column="56">()</parameter_list>
		<block pos:line="314" pos:column="17">{
			<expr_stmt><expr><name pos:line="315" pos:column="25">SectionRow</name> <op:operator pos:line="315" pos:column="36">=</op:operator> <op:operator pos:line="315" pos:column="38">new</op:operator> <call><name pos:line="315" pos:column="42">TabSectionRow</name><argument_list pos:line="315" pos:column="55">()</argument_list></call><op:operator pos:line="315" pos:column="57">.</op:operator><call><name pos:line="315" pos:column="58">Column</name><argument_list pos:line="315" pos:column="64">(<argument><expr><lit:literal type="string" pos:line="315" pos:column="65">"Text"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></constructor>
	}</block></class>
}</block></namespace>
</unit>
