<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Mvc\AlternateType\DependencyResolver.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Reflection</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Web</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">Mvc</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Glimpse</name><op:operator pos:line="6" pos:column="14">.</op:operator><name pos:line="6" pos:column="15">Core</name><op:operator pos:line="6" pos:column="19">.</op:operator><name pos:line="6" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Glimpse</name><op:operator pos:line="7" pos:column="14">.</op:operator><name pos:line="7" pos:column="15">Core</name><op:operator pos:line="7" pos:column="19">.</op:operator><name pos:line="7" pos:column="20">Message</name></name>;</using>

<namespace pos:line="9" pos:column="1">namespace <name><name pos:line="9" pos:column="11">Glimpse</name><op:operator pos:line="9" pos:column="18">.</op:operator><name pos:line="9" pos:column="19">Mvc</name><op:operator pos:line="9" pos:column="22">.</op:operator><name pos:line="9" pos:column="23">AlternateType</name></name>
<block pos:line="10" pos:column="1">{
    <class><specifier pos:line="11" pos:column="5">public</specifier> class <name pos:line="11" pos:column="18">DependencyResolver</name> <super pos:line="11" pos:column="37">: <name><name pos:line="11" pos:column="39">AlternateType</name><argument_list pos:line="11" pos:column="52">&lt;<argument><name pos:line="11" pos:column="53">IDependencyResolver</name></argument>&gt;</argument_list></name></super>
    <block pos:line="12" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="13" pos:column="9">private</specifier> <name><name pos:line="13" pos:column="17">IEnumerable</name><argument_list pos:line="13" pos:column="28">&lt;<argument><name pos:line="13" pos:column="29">IAlternateMethod</name></argument>&gt;</argument_list></name></type> <name pos:line="13" pos:column="47">allMethods</name></decl>;</decl_stmt>

        <constructor><specifier pos:line="15" pos:column="9">public</specifier> <name pos:line="15" pos:column="16">DependencyResolver</name><parameter_list pos:line="15" pos:column="34">(<param><decl><type><name pos:line="15" pos:column="35">IProxyFactory</name></type> <name pos:line="15" pos:column="49">proxyFactory</name></decl></param>)</parameter_list> <member_list pos:line="15" pos:column="63">: <call><name pos:line="15" pos:column="65">base</name><argument_list pos:line="15" pos:column="69">(<argument><expr><name pos:line="15" pos:column="70">proxyFactory</name></expr></argument>)</argument_list></call>
        </member_list><block pos:line="16" pos:column="9">{
        }</block></constructor>

        <decl_stmt><decl><type><specifier pos:line="19" pos:column="9">public</specifier> <specifier pos:line="19" pos:column="16">override</specifier> <name><name pos:line="19" pos:column="25">IEnumerable</name><argument_list pos:line="19" pos:column="36">&lt;<argument><name pos:line="19" pos:column="37">IAlternateMethod</name></argument>&gt;</argument_list></name></type> <name pos:line="19" pos:column="55">AllMethods</name>
        <block pos:line="20" pos:column="9">{
            <function><name pos:line="21" pos:column="13">get</name> 
            <block pos:line="22" pos:column="13">{ 
                <return pos:line="23" pos:column="17">return <expr><name pos:line="23" pos:column="24">allMethods</name> <op:operator pos:line="23" pos:column="35">??</op:operator> <op:operator pos:line="23" pos:column="38">(</op:operator><name pos:line="23" pos:column="39">allMethods</name> <op:operator pos:line="23" pos:column="50">=</op:operator> <op:operator pos:line="23" pos:column="52">new</op:operator> <name><name pos:line="23" pos:column="56">List</name><argument_list pos:line="23" pos:column="60">&lt;<argument><name pos:line="23" pos:column="61">IAlternateMethod</name></argument>&gt;</argument_list></name>
                <block pos:line="24" pos:column="17">{
                    <expr><op:operator pos:line="25" pos:column="21">new</op:operator> <call><name pos:line="25" pos:column="25">GetService</name><argument_list pos:line="25" pos:column="35">()</argument_list></call></expr><op:operator pos:line="25" pos:column="37">,</op:operator>
                    <expr><op:operator pos:line="26" pos:column="21">new</op:operator> <call><name pos:line="26" pos:column="25">GetServices</name><argument_list pos:line="26" pos:column="36">()</argument_list></call></expr><op:operator pos:line="26" pos:column="38">,</op:operator>
                }</block>)</expr>;</return> 
            }</block></function>
        }</block></decl></decl_stmt>

        <class><specifier pos:line="31" pos:column="9">public</specifier> class <name pos:line="31" pos:column="22">GetService</name> <super pos:line="31" pos:column="33">: <name pos:line="31" pos:column="35">AlternateMethod</name></super>
        <block pos:line="32" pos:column="9">{
            <constructor><specifier pos:line="33" pos:column="13">public</specifier> <name pos:line="33" pos:column="20">GetService</name><parameter_list pos:line="33" pos:column="30">()</parameter_list> <member_list pos:line="33" pos:column="33">: <call><name pos:line="33" pos:column="35">base</name><argument_list pos:line="33" pos:column="39">(<argument><expr><call><name pos:line="33" pos:column="40">typeof</name><argument_list pos:line="33" pos:column="46">(<argument><expr><name pos:line="33" pos:column="47">IDependencyResolver</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="33" pos:column="69">"GetService"</lit:literal></expr></argument>)</argument_list></call>
            </member_list><block pos:line="34" pos:column="13">{
            }</block></constructor>
            
            <function><type><specifier pos:line="37" pos:column="13">public</specifier> <specifier pos:line="37" pos:column="20">override</specifier> <name pos:line="37" pos:column="29">void</name></type> <name pos:line="37" pos:column="34">PostImplementation</name><parameter_list pos:line="37" pos:column="52">(<param><decl><type><name pos:line="37" pos:column="53">IAlternateMethodContext</name></type> <name pos:line="37" pos:column="77">context</name></decl></param>, <param><decl><type><name pos:line="37" pos:column="86">TimerResult</name></type> <name pos:line="37" pos:column="98">timerResult</name></decl></param>)</parameter_list>
            <block pos:line="38" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="39" pos:column="17">var</name></type> <name pos:line="39" pos:column="21">message</name> <init pos:line="39" pos:column="29">= <expr><op:operator pos:line="39" pos:column="31">new</op:operator> <call><name pos:line="39" pos:column="35">Message</name><argument_list pos:line="39" pos:column="42">(<argument><expr><op:operator pos:line="39" pos:column="43">(</op:operator><name pos:line="39" pos:column="44">Type</name><op:operator pos:line="39" pos:column="48">)</op:operator><name><name pos:line="39" pos:column="49">context</name><op:operator pos:line="39" pos:column="56">.</op:operator><name pos:line="39" pos:column="57">Arguments</name><index pos:line="39" pos:column="66">[<expr><lit:literal type="number" pos:line="39" pos:column="67">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name><name pos:line="39" pos:column="71">context</name><op:operator pos:line="39" pos:column="78">.</op:operator><name pos:line="39" pos:column="79">ReturnValue</name></name></expr></argument>)</argument_list></call>
                    <op:operator pos:line="40" pos:column="21">.</op:operator><call><name pos:line="40" pos:column="22">AsSourceMessage</name><argument_list pos:line="40" pos:column="37">(<argument><expr><name><name pos:line="40" pos:column="38">context</name><op:operator pos:line="40" pos:column="45">.</op:operator><name pos:line="40" pos:column="46">TargetType</name></name></expr></argument>, <argument><expr><name><name pos:line="40" pos:column="58">context</name><op:operator pos:line="40" pos:column="65">.</op:operator><name pos:line="40" pos:column="66">MethodInvocationTarget</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name pos:line="42" pos:column="17">context</name><op:operator pos:line="42" pos:column="24">.</op:operator><name pos:line="42" pos:column="25">MessageBroker</name><op:operator pos:line="42" pos:column="38">.</op:operator><name pos:line="42" pos:column="39">Publish</name></name><argument_list pos:line="42" pos:column="46">(<argument><expr><name pos:line="42" pos:column="47">message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <class><specifier pos:line="45" pos:column="13">public</specifier> class <name pos:line="45" pos:column="26">Message</name> <super pos:line="45" pos:column="34">: <name pos:line="45" pos:column="36">MessageBase</name>, <name pos:line="45" pos:column="49">ISourceMessage</name></super>
            <block pos:line="46" pos:column="13">{
                <constructor><specifier pos:line="47" pos:column="17">public</specifier> <name pos:line="47" pos:column="24">Message</name><parameter_list pos:line="47" pos:column="31">(<param><decl><type><name pos:line="47" pos:column="32">Type</name></type> <name pos:line="47" pos:column="37">serviceType</name></decl></param>, <param><decl><type><name pos:line="47" pos:column="50">object</name></type> <name pos:line="47" pos:column="57">resolvedObject</name></decl></param>)</parameter_list>
                <block pos:line="48" pos:column="17">{
                    <expr_stmt><expr><name pos:line="49" pos:column="21">ServiceType</name> <op:operator pos:line="49" pos:column="33">=</op:operator> <name pos:line="49" pos:column="35">serviceType</name></expr>;</expr_stmt>
                    
                    <if pos:line="51" pos:column="21">if <condition pos:line="51" pos:column="24">(<expr><name pos:line="51" pos:column="25">resolvedObject</name> <op:operator pos:line="51" pos:column="40">!=</op:operator> <name pos:line="51" pos:column="43">null</name></expr>)</condition><then pos:line="51" pos:column="48">
                    <block pos:line="52" pos:column="21">{
                        <expr_stmt><expr><name pos:line="53" pos:column="25">IsResolved</name> <op:operator pos:line="53" pos:column="36">=</op:operator> <lit:literal type="boolean" pos:line="53" pos:column="38">true</lit:literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="54" pos:column="25">ResolvedType</name> <op:operator pos:line="54" pos:column="38">=</op:operator> <call><name><name pos:line="54" pos:column="40">resolvedObject</name><op:operator pos:line="54" pos:column="54">.</op:operator><name pos:line="54" pos:column="55">GetType</name></name><argument_list pos:line="54" pos:column="62">()</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></constructor>

                <decl_stmt><decl><type><specifier pos:line="58" pos:column="17">public</specifier> <name pos:line="58" pos:column="24">Type</name></type> <name pos:line="58" pos:column="29">ServiceType</name> <block pos:line="58" pos:column="41">{ <function_decl><name pos:line="58" pos:column="43">get</name>;</function_decl> <function_decl><name pos:line="58" pos:column="48">set</name>;</function_decl> }</block></decl></decl_stmt>
                
                <decl_stmt><decl><type><specifier pos:line="60" pos:column="17">public</specifier> <name pos:line="60" pos:column="24">Type</name></type> <name pos:line="60" pos:column="29">ResolvedType</name> <block pos:line="60" pos:column="42">{ <function_decl><name pos:line="60" pos:column="44">get</name>;</function_decl> <function_decl><name pos:line="60" pos:column="49">set</name>;</function_decl> }</block></decl></decl_stmt>
                
                <decl_stmt><decl><type><specifier pos:line="62" pos:column="17">public</specifier> <name pos:line="62" pos:column="24">bool</name></type> <name pos:line="62" pos:column="29">IsResolved</name> <block pos:line="62" pos:column="40">{ <function_decl><name pos:line="62" pos:column="42">get</name>;</function_decl> <function_decl><name pos:line="62" pos:column="47">set</name>;</function_decl> }</block></decl></decl_stmt>

                <decl_stmt><decl><type><specifier pos:line="64" pos:column="17">public</specifier> <name pos:line="64" pos:column="24">Type</name></type> <name pos:line="64" pos:column="29">ExecutedType</name> <block pos:line="64" pos:column="42">{ <function_decl><name pos:line="64" pos:column="44">get</name>;</function_decl> <function_decl><name pos:line="64" pos:column="49">set</name>;</function_decl> }</block></decl></decl_stmt>

                <decl_stmt><decl><type><specifier pos:line="66" pos:column="17">public</specifier> <name pos:line="66" pos:column="24">MethodInfo</name></type> <name pos:line="66" pos:column="35">ExecutedMethod</name> <block pos:line="66" pos:column="50">{ <function_decl><name pos:line="66" pos:column="52">get</name>;</function_decl> <function_decl><name pos:line="66" pos:column="57">set</name>;</function_decl> }</block></decl></decl_stmt>
            }</block></class>
        }</block></class>

        <class><specifier pos:line="70" pos:column="9">public</specifier> class <name pos:line="70" pos:column="22">GetServices</name> <super pos:line="70" pos:column="34">: <name pos:line="70" pos:column="36">AlternateMethod</name></super>
        <block pos:line="71" pos:column="9">{
            <constructor><specifier pos:line="72" pos:column="13">public</specifier> <name pos:line="72" pos:column="20">GetServices</name><parameter_list pos:line="72" pos:column="31">()</parameter_list> <member_list pos:line="72" pos:column="34">: <call><name pos:line="72" pos:column="36">base</name><argument_list pos:line="72" pos:column="40">(<argument><expr><call><name pos:line="72" pos:column="41">typeof</name><argument_list pos:line="72" pos:column="47">(<argument><expr><name pos:line="72" pos:column="48">IDependencyResolver</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="72" pos:column="70">"GetServices"</lit:literal></expr></argument>)</argument_list></call>
            </member_list><block pos:line="73" pos:column="13">{
            }</block></constructor>

            <function><type><specifier pos:line="76" pos:column="13">public</specifier> <specifier pos:line="76" pos:column="20">override</specifier> <name pos:line="76" pos:column="29">void</name></type> <name pos:line="76" pos:column="34">PostImplementation</name><parameter_list pos:line="76" pos:column="52">(<param><decl><type><name pos:line="76" pos:column="53">IAlternateMethodContext</name></type> <name pos:line="76" pos:column="77">context</name></decl></param>, <param><decl><type><name pos:line="76" pos:column="86">TimerResult</name></type> <name pos:line="76" pos:column="98">timerResult</name></decl></param>)</parameter_list>
            <block pos:line="77" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="78" pos:column="17">var</name></type> <name pos:line="78" pos:column="21">message</name> <init pos:line="78" pos:column="29">= <expr><op:operator pos:line="78" pos:column="31">new</op:operator> <call><name pos:line="78" pos:column="35">Message</name><argument_list pos:line="78" pos:column="42">(<argument><expr><op:operator pos:line="78" pos:column="43">(</op:operator><name pos:line="78" pos:column="44">Type</name><op:operator pos:line="78" pos:column="48">)</op:operator><name><name pos:line="78" pos:column="49">context</name><op:operator pos:line="78" pos:column="56">.</op:operator><name pos:line="78" pos:column="57">Arguments</name><index pos:line="78" pos:column="66">[<expr><lit:literal type="number" pos:line="78" pos:column="67">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><op:operator pos:line="78" pos:column="71">(</op:operator><name><name pos:line="78" pos:column="72">IEnumerable</name><argument_list pos:line="78" pos:column="83">&lt;<argument><name pos:line="78" pos:column="84">object</name></argument>&gt;</argument_list></name><op:operator pos:line="78" pos:column="91">)</op:operator><name><name pos:line="78" pos:column="92">context</name><op:operator pos:line="78" pos:column="99">.</op:operator><name pos:line="78" pos:column="100">ReturnValue</name></name></expr></argument>)</argument_list></call>
                    <op:operator pos:line="79" pos:column="21">.</op:operator><call><name pos:line="79" pos:column="22">AsSourceMessage</name><argument_list pos:line="79" pos:column="37">(<argument><expr><name><name pos:line="79" pos:column="38">context</name><op:operator pos:line="79" pos:column="45">.</op:operator><name pos:line="79" pos:column="46">TargetType</name></name></expr></argument>, <argument><expr><name><name pos:line="79" pos:column="58">context</name><op:operator pos:line="79" pos:column="65">.</op:operator><name pos:line="79" pos:column="66">MethodInvocationTarget</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name pos:line="81" pos:column="17">context</name><op:operator pos:line="81" pos:column="24">.</op:operator><name pos:line="81" pos:column="25">MessageBroker</name><op:operator pos:line="81" pos:column="38">.</op:operator><name pos:line="81" pos:column="39">Publish</name></name><argument_list pos:line="81" pos:column="46">(<argument><expr><name pos:line="81" pos:column="47">message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <class><specifier pos:line="84" pos:column="13">public</specifier> class <name pos:line="84" pos:column="26">Message</name> <super pos:line="84" pos:column="34">: <name pos:line="84" pos:column="36">MessageBase</name>, <name pos:line="84" pos:column="49">ISourceMessage</name></super>
            <block pos:line="85" pos:column="13">{
                <constructor><specifier pos:line="86" pos:column="17">public</specifier> <name pos:line="86" pos:column="24">Message</name><parameter_list pos:line="86" pos:column="31">(<param><decl><type><name pos:line="86" pos:column="32">Type</name></type> <name pos:line="86" pos:column="37">serviceType</name></decl></param>, <param><decl><type><name><name pos:line="86" pos:column="50">IEnumerable</name><argument_list pos:line="86" pos:column="61">&lt;<argument><name pos:line="86" pos:column="62">object</name></argument>&gt;</argument_list></name></type> <name pos:line="86" pos:column="70">resolvedObjects</name></decl></param>)</parameter_list>
                <block pos:line="87" pos:column="17">{
                    <expr_stmt><expr><name pos:line="88" pos:column="21">ServiceType</name> <op:operator pos:line="88" pos:column="33">=</op:operator> <name pos:line="88" pos:column="35">serviceType</name></expr>;</expr_stmt>

                    <if pos:line="90" pos:column="21">if <condition pos:line="90" pos:column="24">(<expr><name pos:line="90" pos:column="25">resolvedObjects</name> <op:operator pos:line="90" pos:column="41">!=</op:operator> <name pos:line="90" pos:column="44">null</name> <op:operator pos:line="90" pos:column="49">&amp;&amp;</op:operator> <call><name><name pos:line="90" pos:column="52">resolvedObjects</name><op:operator pos:line="90" pos:column="67">.</op:operator><name pos:line="90" pos:column="68">Any</name></name><argument_list pos:line="90" pos:column="71">()</argument_list></call></expr>)</condition><then pos:line="90" pos:column="74">
                    <block pos:line="91" pos:column="21">{
                        <expr_stmt><expr><name pos:line="92" pos:column="25">IsResolved</name> <op:operator pos:line="92" pos:column="36">=</op:operator> <lit:literal type="boolean" pos:line="92" pos:column="38">true</lit:literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="93" pos:column="25">ResolvedTypes</name> <op:operator pos:line="93" pos:column="39">=</op:operator> <call><name><name pos:line="93" pos:column="41">resolvedObjects</name><op:operator pos:line="93" pos:column="56">.</op:operator><name pos:line="93" pos:column="57">Select</name></name><argument_list pos:line="93" pos:column="63">(<argument><expr><lambda><name pos:line="93" pos:column="64">obj</name> <op:operator pos:line="93" pos:column="68">=&gt;</op:operator> <call><name><name pos:line="93" pos:column="71">obj</name><op:operator pos:line="93" pos:column="74">.</op:operator><name pos:line="93" pos:column="75">GetType</name></name><argument_list pos:line="93" pos:column="82">()</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></constructor>

                <decl_stmt><decl><type><specifier pos:line="97" pos:column="17">public</specifier> <name pos:line="97" pos:column="24">Type</name></type> <name pos:line="97" pos:column="29">ServiceType</name> <block pos:line="97" pos:column="41">{ <function_decl><name pos:line="97" pos:column="43">get</name>;</function_decl> <function_decl><name pos:line="97" pos:column="48">set</name>;</function_decl> }</block></decl></decl_stmt>
                
                <decl_stmt><decl><type><specifier pos:line="99" pos:column="17">public</specifier> <name><name pos:line="99" pos:column="24">IEnumerable</name><argument_list pos:line="99" pos:column="35">&lt;<argument><name pos:line="99" pos:column="36">Type</name></argument>&gt;</argument_list></name></type> <name pos:line="99" pos:column="42">ResolvedTypes</name> <block pos:line="99" pos:column="56">{ <function_decl><name pos:line="99" pos:column="58">get</name>;</function_decl> <function_decl><name pos:line="99" pos:column="63">set</name>;</function_decl> }</block></decl></decl_stmt>
                
                <decl_stmt><decl><type><specifier pos:line="101" pos:column="17">public</specifier> <name pos:line="101" pos:column="24">bool</name></type> <name pos:line="101" pos:column="29">IsResolved</name> <block pos:line="101" pos:column="40">{ <function_decl><name pos:line="101" pos:column="42">get</name>;</function_decl> <function_decl><name pos:line="101" pos:column="47">set</name>;</function_decl> }</block></decl></decl_stmt>

                <decl_stmt><decl><type><specifier pos:line="103" pos:column="17">public</specifier> <name pos:line="103" pos:column="24">Type</name></type> <name pos:line="103" pos:column="29">ExecutedType</name> <block pos:line="103" pos:column="42">{ <function_decl><name pos:line="103" pos:column="44">get</name>;</function_decl> <function_decl><name pos:line="103" pos:column="49">set</name>;</function_decl> }</block></decl></decl_stmt>

                <decl_stmt><decl><type><specifier pos:line="105" pos:column="17">public</specifier> <name pos:line="105" pos:column="24">MethodInfo</name></type> <name pos:line="105" pos:column="35">ExecutedMethod</name> <block pos:line="105" pos:column="50">{ <function_decl><name pos:line="105" pos:column="52">get</name>;</function_decl> <function_decl><name pos:line="105" pos:column="57">set</name>;</function_decl> }</block></decl></decl_stmt>
            }</block></class>
        }</block></class>
    }</block></class>
}</block></namespace></unit>
