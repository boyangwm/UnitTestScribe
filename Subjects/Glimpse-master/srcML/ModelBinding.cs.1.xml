<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Mvc\Tab\ModelBinding.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">System</name><op:operator pos:line="1" pos:column="13">.</op:operator><name pos:line="1" pos:column="14">Collections</name><op:operator pos:line="1" pos:column="25">.</op:operator><name pos:line="1" pos:column="26">Generic</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Linq</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Text</name><op:operator pos:line="3" pos:column="18">.</op:operator><name pos:line="3" pos:column="19">RegularExpressions</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Web</name><op:operator pos:line="4" pos:column="17">.</op:operator><name pos:line="4" pos:column="18">Mvc</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Glimpse</name><op:operator pos:line="5" pos:column="14">.</op:operator><name pos:line="5" pos:column="15">AspNet</name><op:operator pos:line="5" pos:column="21">.</op:operator><name pos:line="5" pos:column="22">Extensibility</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Glimpse</name><op:operator pos:line="6" pos:column="14">.</op:operator><name pos:line="6" pos:column="15">Core</name><op:operator pos:line="6" pos:column="19">.</op:operator><name pos:line="6" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Glimpse</name><op:operator pos:line="7" pos:column="14">.</op:operator><name pos:line="7" pos:column="15">Core</name><op:operator pos:line="7" pos:column="19">.</op:operator><name pos:line="7" pos:column="20">Extensions</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Glimpse</name><op:operator pos:line="8" pos:column="14">.</op:operator><name pos:line="8" pos:column="15">Mvc</name><op:operator pos:line="8" pos:column="18">.</op:operator><name pos:line="8" pos:column="19">AlternateType</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">Glimpse</name><op:operator pos:line="9" pos:column="14">.</op:operator><name pos:line="9" pos:column="15">Mvc</name><op:operator pos:line="9" pos:column="18">.</op:operator><name pos:line="9" pos:column="19">Model</name></name>;</using>

<cpp:if pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">if</cpp:directive> <expr><name pos:line="11" pos:column="5">MVC2</name></expr></cpp:if>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">Glimpse</name><op:operator pos:line="12" pos:column="14">.</op:operator><name pos:line="12" pos:column="15">Mvc2</name><op:operator pos:line="12" pos:column="19">.</op:operator><name pos:line="12" pos:column="20">Backport</name></name>;</using>
<cpp:endif pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">endif</cpp:directive></cpp:endif>
<cpp:if pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">if</cpp:directive> <expr><name pos:line="14" pos:column="5">MVC3</name></expr></cpp:if>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">Glimpse</name><op:operator pos:line="15" pos:column="14">.</op:operator><name pos:line="15" pos:column="15">Mvc3</name><op:operator pos:line="15" pos:column="19">.</op:operator><name pos:line="15" pos:column="20">Backport</name></name>;</using>
<cpp:endif pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">endif</cpp:directive></cpp:endif>

<namespace pos:line="18" pos:column="1">namespace <name><name pos:line="18" pos:column="11">Glimpse</name><op:operator pos:line="18" pos:column="18">.</op:operator><name pos:line="18" pos:column="19">Mvc</name><op:operator pos:line="18" pos:column="22">.</op:operator><name pos:line="18" pos:column="23">Tab</name></name>
<block pos:line="19" pos:column="1">{
    <class><specifier pos:line="20" pos:column="5">public</specifier> class <name pos:line="20" pos:column="18">ModelBinding</name> <super pos:line="20" pos:column="31">: <name pos:line="20" pos:column="33">AspNetTab</name>, <name pos:line="20" pos:column="44">ITabSetup</name>, <name pos:line="20" pos:column="55">IKey</name>, <name pos:line="20" pos:column="61">IDocumentation</name></super>
    <block pos:line="21" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="22" pos:column="9">public</specifier> <specifier pos:line="22" pos:column="16">override</specifier> <name pos:line="22" pos:column="25">string</name></type> <name pos:line="22" pos:column="32">Name</name>
        <block pos:line="23" pos:column="9">{
            <function><name pos:line="24" pos:column="13">get</name> <block pos:line="24" pos:column="17">{ <return pos:line="24" pos:column="19">return <expr><lit:literal type="string" pos:line="24" pos:column="26">"Model Binding"</lit:literal></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="27" pos:column="9">public</specifier> <name pos:line="27" pos:column="16">string</name></type> <name pos:line="27" pos:column="23">Key</name>
        <block pos:line="28" pos:column="9">{
            <function><name pos:line="29" pos:column="13">get</name> <block pos:line="29" pos:column="17">{ <return pos:line="29" pos:column="19">return <expr><lit:literal type="string" pos:line="29" pos:column="26">"glimpse_binding"</lit:literal></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="32" pos:column="9">public</specifier> <name pos:line="32" pos:column="16">string</name></type> <name pos:line="32" pos:column="23">DocumentationUri</name>
        <block pos:line="33" pos:column="9">{
            <function><name pos:line="34" pos:column="13">get</name> <block pos:line="34" pos:column="17">{ <return pos:line="34" pos:column="19">return <expr><lit:literal type="string" pos:line="34" pos:column="26">"http://getGlimpse.com/Help/Model-Binding-Tab"</lit:literal></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <function><type><specifier pos:line="37" pos:column="9">public</specifier> <specifier pos:line="37" pos:column="16">override</specifier> <name pos:line="37" pos:column="25">object</name></type> <name pos:line="37" pos:column="32">GetData</name><parameter_list pos:line="37" pos:column="39">(<param><decl><type><name pos:line="37" pos:column="40">ITabContext</name></type> <name pos:line="37" pos:column="52">context</name></decl></param>)</parameter_list>
        <block pos:line="38" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="39" pos:column="13">var</name></type> <name pos:line="39" pos:column="17">models</name> <init pos:line="39" pos:column="24">= <expr><call><name pos:line="39" pos:column="26">GetStack</name><argument_list pos:line="39" pos:column="34">(<argument><expr><name><name pos:line="39" pos:column="35">context</name><op:operator pos:line="39" pos:column="42">.</op:operator><name pos:line="39" pos:column="43">TabStore</name></name></expr></argument>)</argument_list></call><op:operator pos:line="39" pos:column="52">.</op:operator><call><name pos:line="39" pos:column="53">Where</name><argument_list pos:line="39" pos:column="58">(<argument><expr><lambda><name pos:line="39" pos:column="59">i</name> <op:operator pos:line="39" pos:column="61">=&gt;</op:operator> <name><name pos:line="39" pos:column="64">i</name><op:operator pos:line="39" pos:column="65">.</op:operator><name pos:line="39" pos:column="66">IsBound</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="39" pos:column="74">.</op:operator><call><name pos:line="39" pos:column="75">OrderBy</name><argument_list pos:line="39" pos:column="82">(<argument><expr><lambda><name pos:line="39" pos:column="83">model</name> <op:operator pos:line="39" pos:column="89">=&gt;</op:operator> <name><name pos:line="39" pos:column="92">model</name><op:operator pos:line="39" pos:column="97">.</op:operator><name pos:line="39" pos:column="98">ParameterName</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if pos:line="41" pos:column="13">if <condition pos:line="41" pos:column="16">(<expr><op:operator pos:line="41" pos:column="17">!</op:operator><call><name><name pos:line="41" pos:column="18">models</name><op:operator pos:line="41" pos:column="24">.</op:operator><name pos:line="41" pos:column="25">Any</name></name><argument_list pos:line="41" pos:column="28">()</argument_list></call></expr>)</condition><then pos:line="41" pos:column="31">
            <block pos:line="42" pos:column="13">{
                <return pos:line="43" pos:column="17">return <expr><name pos:line="43" pos:column="24">null</name></expr>;</return>
            }</block></then></if>

            <comment type="line" pos:line="46" pos:column="13">// TODO: Move this display code over to leverage assist namespace and a serialization converter.</comment>
            <decl_stmt><decl><type><name pos:line="47" pos:column="13">var</name></type> <name pos:line="47" pos:column="17">table</name> <init pos:line="47" pos:column="23">= <expr><op:operator pos:line="47" pos:column="25">new</op:operator> <name><name pos:line="47" pos:column="29">List</name><argument_list pos:line="47" pos:column="33">&lt;<argument><name><name pos:line="47" pos:column="34">object</name><index pos:line="47" pos:column="40">[]</index></name></argument>&gt;</argument_list></name> <block pos:line="47" pos:column="44">{ <expr><op:operator pos:line="47" pos:column="46">new</op:operator> <name><name pos:line="47" pos:column="50">object</name><index pos:line="47" pos:column="56">[]</index></name> <block pos:line="47" pos:column="59">{ <expr><lit:literal type="string" pos:line="47" pos:column="61">"Ordinal"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="47" pos:column="72">"Parameter"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="47" pos:column="85">"Type"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="47" pos:column="93">"Value"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="47" pos:column="102">"Culture"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="47" pos:column="113">"Model Binder"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="47" pos:column="129">"Value Providers"</lit:literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>
            
            <expr_stmt><expr><call><name pos:line="49" pos:column="13">FormatTable</name><argument_list pos:line="49" pos:column="24">(<argument><expr><name pos:line="49" pos:column="25">table</name></expr></argument>, <argument><expr><name pos:line="49" pos:column="32">models</name></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="40">string</name><op:operator pos:line="49" pos:column="46">.</op:operator><name pos:line="49" pos:column="47">Empty</name></name></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="54">string</name><op:operator pos:line="49" pos:column="60">.</op:operator><name pos:line="49" pos:column="61">Empty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:line="51" pos:column="13">return <expr><name pos:line="51" pos:column="20">table</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="54" pos:column="9">public</specifier> <name pos:line="54" pos:column="16">void</name></type> <name pos:line="54" pos:column="21">Setup</name><parameter_list pos:line="54" pos:column="26">(<param><decl><type><name pos:line="54" pos:column="27">ITabSetupContext</name></type> <name pos:line="54" pos:column="44">context</name></decl></param>)</parameter_list>
        <block pos:line="55" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="56" pos:column="13">context</name><op:operator pos:line="56" pos:column="20">.</op:operator><name pos:line="56" pos:column="21">MessageBroker</name><op:operator pos:line="56" pos:column="34">.</op:operator><name><name pos:line="56" pos:column="35">Subscribe</name><argument_list pos:line="56" pos:column="44">&lt;<argument><name><name><name pos:line="56" pos:column="45">ValueProvider</name><argument_list pos:line="56" pos:column="58">&lt;<argument><name pos:line="56" pos:column="59">IUnvalidatedValueProvider</name></argument>&gt;</argument_list></name><op:operator pos:line="56" pos:column="85">.</op:operator><name pos:line="56" pos:column="86">ContainsPrefix</name><op:operator pos:line="56" pos:column="100">.</op:operator><name pos:line="56" pos:column="101">Message</name></name></argument>&gt;</argument_list></name></name><argument_list pos:line="56" pos:column="109">(<argument><expr><lambda><name pos:line="56" pos:column="110">message</name> <op:operator pos:line="56" pos:column="118">=&gt;</op:operator> <call><name pos:line="56" pos:column="121">UpdateModelBinding</name><argument_list pos:line="56" pos:column="139">(<argument><expr><name pos:line="56" pos:column="140">message</name></expr></argument>, <argument><expr><name pos:line="56" pos:column="149">context</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="57" pos:column="13">context</name><op:operator pos:line="57" pos:column="20">.</op:operator><name pos:line="57" pos:column="21">MessageBroker</name><op:operator pos:line="57" pos:column="34">.</op:operator><name><name pos:line="57" pos:column="35">Subscribe</name><argument_list pos:line="57" pos:column="44">&lt;<argument><name><name><name pos:line="57" pos:column="45">ValueProvider</name><argument_list pos:line="57" pos:column="58">&lt;<argument><name pos:line="57" pos:column="59">IValueProvider</name></argument>&gt;</argument_list></name><op:operator pos:line="57" pos:column="74">.</op:operator><name pos:line="57" pos:column="75">ContainsPrefix</name><op:operator pos:line="57" pos:column="89">.</op:operator><name pos:line="57" pos:column="90">Message</name></name></argument>&gt;</argument_list></name></name><argument_list pos:line="57" pos:column="98">(<argument><expr><lambda><name pos:line="57" pos:column="99">message</name> <op:operator pos:line="57" pos:column="107">=&gt;</op:operator> <call><name pos:line="57" pos:column="110">UpdateModelBinding</name><argument_list pos:line="57" pos:column="128">(<argument><expr><name pos:line="57" pos:column="129">message</name></expr></argument>, <argument><expr><name pos:line="57" pos:column="138">context</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="58" pos:column="13">context</name><op:operator pos:line="58" pos:column="20">.</op:operator><name pos:line="58" pos:column="21">MessageBroker</name><op:operator pos:line="58" pos:column="34">.</op:operator><name><name pos:line="58" pos:column="35">Subscribe</name><argument_list pos:line="58" pos:column="44">&lt;<argument><name><name><name pos:line="58" pos:column="45">ValueProvider</name><argument_list pos:line="58" pos:column="58">&lt;<argument><name pos:line="58" pos:column="59">IUnvalidatedValueProvider</name></argument>&gt;</argument_list></name><op:operator pos:line="58" pos:column="85">.</op:operator><name pos:line="58" pos:column="86">GetValue</name><op:operator pos:line="58" pos:column="94">.</op:operator><name pos:line="58" pos:column="95">Message</name></name></argument>&gt;</argument_list></name></name><argument_list pos:line="58" pos:column="103">(<argument><expr><lambda><name pos:line="58" pos:column="104">message</name> <op:operator pos:line="58" pos:column="112">=&gt;</op:operator> <call><name pos:line="58" pos:column="115">UpdateModelBinding</name><argument_list pos:line="58" pos:column="133">(<argument><expr><name pos:line="58" pos:column="134">message</name></expr></argument>, <argument><expr><name pos:line="58" pos:column="143">context</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="59" pos:column="13">context</name><op:operator pos:line="59" pos:column="20">.</op:operator><name pos:line="59" pos:column="21">MessageBroker</name><op:operator pos:line="59" pos:column="34">.</op:operator><name><name pos:line="59" pos:column="35">Subscribe</name><argument_list pos:line="59" pos:column="44">&lt;<argument><name><name><name pos:line="59" pos:column="45">ValueProvider</name><argument_list pos:line="59" pos:column="58">&lt;<argument><name pos:line="59" pos:column="59">IValueProvider</name></argument>&gt;</argument_list></name><op:operator pos:line="59" pos:column="74">.</op:operator><name pos:line="59" pos:column="75">GetValue</name><op:operator pos:line="59" pos:column="83">.</op:operator><name pos:line="59" pos:column="84">Message</name></name></argument>&gt;</argument_list></name></name><argument_list pos:line="59" pos:column="92">(<argument><expr><lambda><name pos:line="59" pos:column="93">message</name> <op:operator pos:line="59" pos:column="101">=&gt;</op:operator> <call><name pos:line="59" pos:column="104">UpdateModelBinding</name><argument_list pos:line="59" pos:column="122">(<argument><expr><name pos:line="59" pos:column="123">message</name></expr></argument>, <argument><expr><name pos:line="59" pos:column="132">context</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="60" pos:column="13">context</name><op:operator pos:line="60" pos:column="20">.</op:operator><name pos:line="60" pos:column="21">MessageBroker</name><op:operator pos:line="60" pos:column="34">.</op:operator><name><name pos:line="60" pos:column="35">Subscribe</name><argument_list pos:line="60" pos:column="44">&lt;<argument><name><name pos:line="60" pos:column="45">ModelBinder</name><op:operator pos:line="60" pos:column="56">.</op:operator><name pos:line="60" pos:column="57">BindModel</name><op:operator pos:line="60" pos:column="66">.</op:operator><name pos:line="60" pos:column="67">Message</name></name></argument>&gt;</argument_list></name></name><argument_list pos:line="60" pos:column="75">(<argument><expr><lambda><name pos:line="60" pos:column="76">message</name> <op:operator pos:line="60" pos:column="84">=&gt;</op:operator> <call><name pos:line="60" pos:column="87">UpdateModelBinding</name><argument_list pos:line="60" pos:column="105">(<argument><expr><name pos:line="60" pos:column="106">message</name></expr></argument>, <argument><expr><name pos:line="60" pos:column="115">context</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="61" pos:column="13">context</name><op:operator pos:line="61" pos:column="20">.</op:operator><name pos:line="61" pos:column="21">MessageBroker</name><op:operator pos:line="61" pos:column="34">.</op:operator><name><name pos:line="61" pos:column="35">Subscribe</name><argument_list pos:line="61" pos:column="44">&lt;<argument><name><name pos:line="61" pos:column="45">ModelBinder</name><op:operator pos:line="61" pos:column="56">.</op:operator><name pos:line="61" pos:column="57">BindProperty</name><op:operator pos:line="61" pos:column="69">.</op:operator><name pos:line="61" pos:column="70">Message</name></name></argument>&gt;</argument_list></name></name><argument_list pos:line="61" pos:column="78">(<argument><expr><lambda><name pos:line="61" pos:column="79">message</name> <op:operator pos:line="61" pos:column="87">=&gt;</op:operator> <call><name pos:line="61" pos:column="90">UpdateModelBinding</name><argument_list pos:line="61" pos:column="108">(<argument><expr><name pos:line="61" pos:column="109">message</name></expr></argument>, <argument><expr><name pos:line="61" pos:column="118">context</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="62" pos:column="13">context</name><op:operator pos:line="62" pos:column="20">.</op:operator><name pos:line="62" pos:column="21">MessageBroker</name><op:operator pos:line="62" pos:column="34">.</op:operator><name><name pos:line="62" pos:column="35">Subscribe</name><argument_list pos:line="62" pos:column="44">&lt;<argument><name><name><name pos:line="62" pos:column="45">ValueProvider</name><argument_list pos:line="62" pos:column="58">&lt;<argument><name pos:line="62" pos:column="59">IEnumerableValueProvider</name></argument>&gt;</argument_list></name><op:operator pos:line="62" pos:column="84">.</op:operator><name pos:line="62" pos:column="85">GetValue</name><op:operator pos:line="62" pos:column="93">.</op:operator><name pos:line="62" pos:column="94">Message</name></name></argument>&gt;</argument_list></name></name><argument_list pos:line="62" pos:column="102">(<argument><expr><lambda><name pos:line="62" pos:column="103">message</name> <op:operator pos:line="62" pos:column="111">=&gt;</op:operator> <call><name pos:line="62" pos:column="114">UpdateModelBinding</name><argument_list pos:line="62" pos:column="132">(<argument><expr><name pos:line="62" pos:column="133">message</name></expr></argument>, <argument><expr><name pos:line="62" pos:column="142">context</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="63" pos:column="13">context</name><op:operator pos:line="63" pos:column="20">.</op:operator><name pos:line="63" pos:column="21">MessageBroker</name><op:operator pos:line="63" pos:column="34">.</op:operator><name><name pos:line="63" pos:column="35">Subscribe</name><argument_list pos:line="63" pos:column="44">&lt;<argument><name><name><name pos:line="63" pos:column="45">ValueProvider</name><argument_list pos:line="63" pos:column="58">&lt;<argument><name pos:line="63" pos:column="59">IEnumerableValueProvider</name></argument>&gt;</argument_list></name><op:operator pos:line="63" pos:column="84">.</op:operator><name pos:line="63" pos:column="85">ContainsPrefix</name><op:operator pos:line="63" pos:column="99">.</op:operator><name pos:line="63" pos:column="100">Message</name></name></argument>&gt;</argument_list></name></name><argument_list pos:line="63" pos:column="108">(<argument><expr><lambda><name pos:line="63" pos:column="109">message</name> <op:operator pos:line="63" pos:column="117">=&gt;</op:operator> <call><name pos:line="63" pos:column="120">UpdateModelBinding</name><argument_list pos:line="63" pos:column="138">(<argument><expr><name pos:line="63" pos:column="139">message</name></expr></argument>, <argument><expr><name pos:line="63" pos:column="148">context</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="66" pos:column="9">private</specifier> <name pos:line="66" pos:column="17">void</name></type> <name pos:line="66" pos:column="22">FormatTable</name><parameter_list pos:line="66" pos:column="33">(<param><decl><type><name><name pos:line="66" pos:column="34">List</name><argument_list pos:line="66" pos:column="38">&lt;<argument><name><name pos:line="66" pos:column="39">object</name><index pos:line="66" pos:column="45">[]</index></name></argument>&gt;</argument_list></name></type> <name pos:line="66" pos:column="49">table</name></decl></param>, <param><decl><type><name><name pos:line="66" pos:column="56">IEnumerable</name><argument_list pos:line="66" pos:column="67">&lt;<argument><name pos:line="66" pos:column="68">ModelBindingModel</name></argument>&gt;</argument_list></name></type> <name pos:line="66" pos:column="87">models</name></decl></param>, <param><decl><type><name pos:line="66" pos:column="95">string</name></type> <name pos:line="66" pos:column="102">ordinalPrefix</name></decl></param>, <param><decl><type><name pos:line="66" pos:column="117">string</name></type> <name pos:line="66" pos:column="124">namePrefix</name></decl></param>)</parameter_list>
        <block pos:line="67" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="68" pos:column="13">var</name></type> <name pos:line="68" pos:column="17">innerOrdinal</name> <init pos:line="68" pos:column="30">= <expr><lit:literal type="number" pos:line="68" pos:column="32">1</lit:literal></expr></init></decl>;</decl_stmt>

            <foreach pos:line="70" pos:column="13">foreach (<init><decl><type><name pos:line="70" pos:column="22">var</name></type> <name pos:line="70" pos:column="26">model</name> <range pos:line="70" pos:column="32">in <expr><name pos:line="70" pos:column="35">models</name></expr></range></decl></init>)
            <block pos:line="71" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="72" pos:column="17">var</name></type> <name pos:line="72" pos:column="21">ordinalString</name> <init pos:line="72" pos:column="35">= <expr><name pos:line="72" pos:column="37">ordinalPrefix</name> <op:operator pos:line="72" pos:column="51">+</op:operator> <name pos:line="72" pos:column="53">innerOrdinal</name><op:operator pos:line="72" pos:column="65">++</op:operator></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="73" pos:column="17">table</name><op:operator pos:line="73" pos:column="22">.</op:operator><name pos:line="73" pos:column="23">Add</name></name><argument_list pos:line="73" pos:column="26">(
                    <argument><expr><op:operator pos:line="74" pos:column="21">new</op:operator><index pos:line="74" pos:column="24">[]</index>
                        <block pos:line="75" pos:column="25">{
                            <expr><name pos:line="76" pos:column="29">ordinalString</name></expr><op:operator pos:line="76" pos:column="42">,</op:operator>
                            <expr><name pos:line="77" pos:column="29">namePrefix</name> <op:operator pos:line="77" pos:column="40">+</op:operator> <name><name pos:line="77" pos:column="42">model</name><op:operator pos:line="77" pos:column="47">.</op:operator><name pos:line="77" pos:column="48">ParameterName</name></name></expr><op:operator pos:line="77" pos:column="61">,</op:operator>
                            <expr><name><name pos:line="78" pos:column="29">model</name><op:operator pos:line="78" pos:column="34">.</op:operator><name pos:line="78" pos:column="35">ParameterType</name></name></expr><op:operator pos:line="78" pos:column="48">,</op:operator>
                            <expr><name><name pos:line="79" pos:column="29">model</name><op:operator pos:line="79" pos:column="34">.</op:operator><name pos:line="79" pos:column="35">RawValue</name></name></expr><op:operator pos:line="79" pos:column="43">,</op:operator>
                            <expr><name><name pos:line="80" pos:column="29">model</name><op:operator pos:line="80" pos:column="34">.</op:operator><name pos:line="80" pos:column="35">Culture</name></name></expr><op:operator pos:line="80" pos:column="42">,</op:operator>
                            <expr><name><name pos:line="81" pos:column="29">model</name><op:operator pos:line="81" pos:column="34">.</op:operator><name pos:line="81" pos:column="35">ModelBinderType</name></name></expr><op:operator pos:line="81" pos:column="50">,</op:operator>
                            <expr><call><name><name pos:line="82" pos:column="29">model</name><op:operator pos:line="82" pos:column="34">.</op:operator><name pos:line="82" pos:column="35">ValueProviderActivity</name><op:operator pos:line="82" pos:column="56">.</op:operator><name pos:line="82" pos:column="57">Select</name></name><argument_list pos:line="82" pos:column="63">(<argument><expr><lambda><name pos:line="82" pos:column="64">vp</name> <op:operator pos:line="82" pos:column="67">=&gt;</op:operator> <op:operator pos:line="82" pos:column="70">new</op:operator> <block pos:line="82" pos:column="74">{ <expr><name><name pos:line="82" pos:column="76">vp</name><op:operator pos:line="82" pos:column="78">.</op:operator><name pos:line="82" pos:column="79">ValueProvider</name></name></expr><op:operator pos:line="82" pos:column="92">,</op:operator> <expr><name><name pos:line="82" pos:column="94">vp</name><op:operator pos:line="82" pos:column="96">.</op:operator><name pos:line="82" pos:column="97">IsMatch</name></name></expr> }</block></lambda></expr></argument>)</argument_list></call><op:operator pos:line="82" pos:column="107">.</op:operator><call><name pos:line="82" pos:column="108">ToArray</name><argument_list pos:line="82" pos:column="115">()</argument_list></call></expr>
                        }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if pos:line="85" pos:column="17">if <condition pos:line="85" pos:column="20">(<expr><name><name pos:line="85" pos:column="21">model</name><op:operator pos:line="85" pos:column="26">.</op:operator><name pos:line="85" pos:column="27">Properties</name><op:operator pos:line="85" pos:column="37">.</op:operator><name pos:line="85" pos:column="38">Count</name></name> <op:operator pos:line="85" pos:column="44">&gt;</op:operator> <lit:literal type="number" pos:line="85" pos:column="46">0</lit:literal></expr>)</condition><then pos:line="85" pos:column="48">
                <block pos:line="86" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="87" pos:column="21">var</name></type> <name pos:line="87" pos:column="25">namePrefixToUse</name> <init pos:line="87" pos:column="41">= <expr><name pos:line="87" pos:column="43">namePrefix</name></expr></init></decl>;</decl_stmt>
                    <if pos:line="88" pos:column="21">if <condition pos:line="88" pos:column="24">(<expr><call><name><name pos:line="88" pos:column="25">string</name><op:operator pos:line="88" pos:column="31">.</op:operator><name pos:line="88" pos:column="32">IsNullOrEmpty</name></name><argument_list pos:line="88" pos:column="45">(<argument><expr><name pos:line="88" pos:column="46">namePrefixToUse</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="88" pos:column="63">
                    <block pos:line="89" pos:column="21">{
                        <expr_stmt><expr><name pos:line="90" pos:column="25">namePrefixToUse</name> <op:operator pos:line="90" pos:column="41">=</op:operator> <name><name pos:line="90" pos:column="43">model</name><op:operator pos:line="90" pos:column="48">.</op:operator><name pos:line="90" pos:column="49">ParameterName</name></name> <op:operator pos:line="90" pos:column="63">+</op:operator> <lit:literal type="string" pos:line="90" pos:column="65">"."</lit:literal></expr>;</expr_stmt>
                    }</block></then></if>

                    <expr_stmt><expr><call><name pos:line="93" pos:column="21">FormatTable</name><argument_list pos:line="93" pos:column="32">(<argument><expr><name pos:line="93" pos:column="33">table</name></expr></argument>, <argument><expr><name><name pos:line="93" pos:column="40">model</name><op:operator pos:line="93" pos:column="45">.</op:operator><name pos:line="93" pos:column="46">Properties</name></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="58">ordinalString</name> <op:operator pos:line="93" pos:column="72">+</op:operator> <lit:literal type="string" pos:line="93" pos:column="74">"."</lit:literal></expr></argument>, <argument><expr><name pos:line="93" pos:column="79">namePrefixToUse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></foreach>
        }</block></function>

        <function><type><specifier pos:line="98" pos:column="9">private</specifier> <name pos:line="98" pos:column="17">void</name></type> <name><name pos:line="98" pos:column="22">UpdateModelBinding</name><argument_list pos:line="98" pos:column="40">&lt;<argument><name pos:line="98" pos:column="41">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="98" pos:column="43">(<param><decl><type><name><name><name pos:line="98" pos:column="44">ValueProvider</name><argument_list pos:line="98" pos:column="57">&lt;<argument><name pos:line="98" pos:column="58">T</name></argument>&gt;</argument_list></name><op:operator pos:line="98" pos:column="60">.</op:operator><name pos:line="98" pos:column="61">ContainsPrefix</name><op:operator pos:line="98" pos:column="75">.</op:operator><name pos:line="98" pos:column="76">Message</name></name></type> <name pos:line="98" pos:column="84">message</name></decl></param>, <param><decl><type><name pos:line="98" pos:column="93">ITabSetupContext</name></type> <name pos:line="98" pos:column="110">context</name></decl></param>)</parameter_list> <where pos:line="98" pos:column="119">where <name pos:line="98" pos:column="125">T</name> : class</where>
        <block pos:line="99" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="100" pos:column="13">var</name></type> <name pos:line="100" pos:column="17">model</name> <init pos:line="100" pos:column="23">= <expr><call><name pos:line="100" pos:column="25">GetModel</name><argument_list pos:line="100" pos:column="33">(<argument><expr><call><name pos:line="100" pos:column="34">GetStack</name><argument_list pos:line="100" pos:column="42">(<argument><expr><call><name><name pos:line="100" pos:column="43">context</name><op:operator pos:line="100" pos:column="50">.</op:operator><name pos:line="100" pos:column="51">GetTabStore</name></name><argument_list pos:line="100" pos:column="62">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="100" pos:column="67">message</name><op:operator pos:line="100" pos:column="74">.</op:operator><name pos:line="100" pos:column="75">Prefix</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="101" pos:column="13">model</name><op:operator pos:line="101" pos:column="18">.</op:operator><name pos:line="101" pos:column="19">Add</name></name><argument_list pos:line="101" pos:column="22">(<argument><expr><name pos:line="101" pos:column="23">message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="104" pos:column="9">private</specifier> <name pos:line="104" pos:column="17">void</name></type> <name><name pos:line="104" pos:column="22">UpdateModelBinding</name><argument_list pos:line="104" pos:column="40">&lt;<argument><name pos:line="104" pos:column="41">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="104" pos:column="43">(<param><decl><type><name><name><name pos:line="104" pos:column="44">ValueProvider</name><argument_list pos:line="104" pos:column="57">&lt;<argument><name pos:line="104" pos:column="58">T</name></argument>&gt;</argument_list></name><op:operator pos:line="104" pos:column="60">.</op:operator><name pos:line="104" pos:column="61">GetValue</name><op:operator pos:line="104" pos:column="69">.</op:operator><name pos:line="104" pos:column="70">Message</name></name></type> <name pos:line="104" pos:column="78">message</name></decl></param>, <param><decl><type><name pos:line="104" pos:column="87">ITabSetupContext</name></type> <name pos:line="104" pos:column="104">context</name></decl></param>)</parameter_list> <where pos:line="104" pos:column="113">where <name pos:line="104" pos:column="119">T</name> : class</where>
        <block pos:line="105" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="106" pos:column="13">var</name></type> <name pos:line="106" pos:column="17">model</name> <init pos:line="106" pos:column="23">= <expr><call><name pos:line="106" pos:column="25">GetModel</name><argument_list pos:line="106" pos:column="33">(<argument><expr><call><name pos:line="106" pos:column="34">GetStack</name><argument_list pos:line="106" pos:column="42">(<argument><expr><call><name><name pos:line="106" pos:column="43">context</name><op:operator pos:line="106" pos:column="50">.</op:operator><name pos:line="106" pos:column="51">GetTabStore</name></name><argument_list pos:line="106" pos:column="62">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="106" pos:column="67">message</name><op:operator pos:line="106" pos:column="74">.</op:operator><name pos:line="106" pos:column="75">Key</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="107" pos:column="13">model</name><op:operator pos:line="107" pos:column="18">.</op:operator><name pos:line="107" pos:column="19">Add</name></name><argument_list pos:line="107" pos:column="22">(<argument><expr><name pos:line="107" pos:column="23">message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="110" pos:column="9">private</specifier> <name pos:line="110" pos:column="17">void</name></type> <name pos:line="110" pos:column="22">UpdateModelBinding</name><parameter_list pos:line="110" pos:column="40">(<param><decl><type><name><name pos:line="110" pos:column="41">ModelBinder</name><op:operator pos:line="110" pos:column="52">.</op:operator><name pos:line="110" pos:column="53">BindModel</name><op:operator pos:line="110" pos:column="62">.</op:operator><name pos:line="110" pos:column="63">Message</name></name></type> <name pos:line="110" pos:column="71">message</name></decl></param>, <param><decl><type><name pos:line="110" pos:column="80">ITabSetupContext</name></type> <name pos:line="110" pos:column="97">context</name></decl></param>)</parameter_list>
        <block pos:line="111" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="112" pos:column="13">var</name></type> <name pos:line="112" pos:column="17">model</name> <init pos:line="112" pos:column="23">= <expr><call><name pos:line="112" pos:column="25">GetModel</name><argument_list pos:line="112" pos:column="33">(<argument><expr><call><name pos:line="112" pos:column="34">GetStack</name><argument_list pos:line="112" pos:column="42">(<argument><expr><call><name><name pos:line="112" pos:column="43">context</name><op:operator pos:line="112" pos:column="50">.</op:operator><name pos:line="112" pos:column="51">GetTabStore</name></name><argument_list pos:line="112" pos:column="62">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="112" pos:column="67">message</name><op:operator pos:line="112" pos:column="74">.</op:operator><name pos:line="112" pos:column="75">ModelName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="113" pos:column="13">model</name><op:operator pos:line="113" pos:column="18">.</op:operator><name pos:line="113" pos:column="19">Bound</name></name><argument_list pos:line="113" pos:column="24">(<argument><expr><name pos:line="113" pos:column="25">message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="116" pos:column="9">private</specifier> <name pos:line="116" pos:column="17">void</name></type> <name pos:line="116" pos:column="22">UpdateModelBinding</name><parameter_list pos:line="116" pos:column="40">(<param><decl><type><name><name pos:line="116" pos:column="41">ModelBinder</name><op:operator pos:line="116" pos:column="52">.</op:operator><name pos:line="116" pos:column="53">BindProperty</name><op:operator pos:line="116" pos:column="65">.</op:operator><name pos:line="116" pos:column="66">Message</name></name></type> <name pos:line="116" pos:column="74">message</name></decl></param>, <param><decl><type><name pos:line="116" pos:column="83">ITabSetupContext</name></type> <name pos:line="116" pos:column="100">context</name></decl></param>)</parameter_list>
        <block pos:line="117" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="118" pos:column="13">var</name></type> <name pos:line="118" pos:column="17">stack</name> <init pos:line="118" pos:column="23">= <expr><call><name pos:line="118" pos:column="25">GetStack</name><argument_list pos:line="118" pos:column="33">(<argument><expr><call><name><name pos:line="118" pos:column="34">context</name><op:operator pos:line="118" pos:column="41">.</op:operator><name pos:line="118" pos:column="42">GetTabStore</name></name><argument_list pos:line="118" pos:column="53">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="120" pos:column="13">var</name></type> <name pos:line="120" pos:column="17">property</name> <init pos:line="120" pos:column="26">= <expr><call><name><name pos:line="120" pos:column="28">stack</name><op:operator pos:line="120" pos:column="33">.</op:operator><name pos:line="120" pos:column="34">Pop</name></name><argument_list pos:line="120" pos:column="37">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="121" pos:column="13">var</name></type> <name pos:line="121" pos:column="17">model</name> <init pos:line="121" pos:column="23">= <expr><call><name><name pos:line="121" pos:column="25">stack</name><op:operator pos:line="121" pos:column="30">.</op:operator><name pos:line="121" pos:column="31">Peek</name></name><argument_list pos:line="121" pos:column="35">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="123" pos:column="13">model</name><op:operator pos:line="123" pos:column="18">.</op:operator><name pos:line="123" pos:column="19">Properties</name><op:operator pos:line="123" pos:column="29">.</op:operator><name pos:line="123" pos:column="30">Add</name></name><argument_list pos:line="123" pos:column="33">(<argument><expr><name pos:line="123" pos:column="34">property</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="126" pos:column="9">private</specifier> <name pos:line="126" pos:column="17">ModelBindingModel</name></type> <name pos:line="126" pos:column="35">GetModel</name><parameter_list pos:line="126" pos:column="43">(<param><decl><type><name><name pos:line="126" pos:column="44">Stack</name><argument_list pos:line="126" pos:column="49">&lt;<argument><name pos:line="126" pos:column="50">ModelBindingModel</name></argument>&gt;</argument_list></name></type> <name pos:line="126" pos:column="69">stack</name></decl></param>, <param><decl><type><name pos:line="126" pos:column="76">string</name></type> <name pos:line="126" pos:column="83">parameter</name></decl></param>)</parameter_list>
        <block pos:line="127" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="128" pos:column="13">ModelBindingModel</name></type> <name pos:line="128" pos:column="31">model</name></decl>;</decl_stmt>
            <if pos:line="129" pos:column="13">if <condition pos:line="129" pos:column="16">(<expr><call><name><name pos:line="129" pos:column="17">stack</name><op:operator pos:line="129" pos:column="22">.</op:operator><name pos:line="129" pos:column="23">Any</name></name><argument_list pos:line="129" pos:column="26">()</argument_list></call></expr>)</condition><then pos:line="129" pos:column="29">
            <block pos:line="130" pos:column="13">{
                <expr_stmt><expr><name pos:line="131" pos:column="17">model</name> <op:operator pos:line="131" pos:column="23">=</op:operator> <call><name><name pos:line="131" pos:column="25">stack</name><op:operator pos:line="131" pos:column="30">.</op:operator><name pos:line="131" pos:column="31">Peek</name></name><argument_list pos:line="131" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
                <if pos:line="132" pos:column="17">if <condition pos:line="132" pos:column="20">(<expr><call><name><name pos:line="132" pos:column="21">model</name><op:operator pos:line="132" pos:column="26">.</op:operator><name pos:line="132" pos:column="27">ParameterName</name><op:operator pos:line="132" pos:column="40">.</op:operator><name pos:line="132" pos:column="41">Equals</name></name><argument_list pos:line="132" pos:column="47">(<argument><expr><name pos:line="132" pos:column="48">parameter</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="132" pos:column="59">
                <block pos:line="133" pos:column="17">{
                    <return pos:line="134" pos:column="21">return <expr><name pos:line="134" pos:column="28">model</name></expr>;</return>
                }</block></then>
                <else pos:line="136" pos:column="17">else <if pos:line="136" pos:column="22">if <condition pos:line="136" pos:column="25">(<expr><op:operator pos:line="136" pos:column="26">(</op:operator><name><name pos:line="136" pos:column="27">model</name><op:operator pos:line="136" pos:column="32">.</op:operator><name pos:line="136" pos:column="33">ParameterName</name></name> <op:operator pos:line="136" pos:column="47">+</op:operator> <lit:literal type="string" pos:line="136" pos:column="49">"[0].key"</lit:literal><op:operator pos:line="136" pos:column="58">)</op:operator><op:operator pos:line="136" pos:column="59">.</op:operator><call><name pos:line="136" pos:column="60">Equals</name><argument_list pos:line="136" pos:column="66">(<argument><expr><name pos:line="136" pos:column="67">parameter</name></expr></argument>)</argument_list></call> <op:operator pos:line="136" pos:column="78">||</op:operator> <op:operator pos:line="136" pos:column="81">(</op:operator><name><name pos:line="136" pos:column="82">model</name><op:operator pos:line="136" pos:column="87">.</op:operator><name pos:line="136" pos:column="88">ParameterName</name></name> <op:operator pos:line="136" pos:column="102">+</op:operator> <lit:literal type="string" pos:line="136" pos:column="104">".index"</lit:literal><op:operator pos:line="136" pos:column="112">)</op:operator><op:operator pos:line="136" pos:column="113">.</op:operator><call><name pos:line="136" pos:column="114">Equals</name><argument_list pos:line="136" pos:column="120">(<argument><expr><name pos:line="136" pos:column="121">parameter</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="136" pos:column="132">
                <block pos:line="137" pos:column="17">{
                    <comment type="line" pos:line="138" pos:column="21">// we skip these special dictionary related model entries and return a "throw-away" model, meaning that we won't add it to the stack</comment>
                    <return pos:line="139" pos:column="21">return <expr><op:operator pos:line="139" pos:column="28">new</op:operator> <call><name pos:line="139" pos:column="32">ModelBindingModel</name><argument_list pos:line="139" pos:column="49">(<argument><expr><name pos:line="139" pos:column="50">parameter</name></expr></argument>)</argument_list></call></expr>;</return>
                }</block></then>
                <else pos:line="141" pos:column="17">else
                <block pos:line="142" pos:column="17">{
                    <comment type="line" pos:line="143" pos:column="21">// although the name of the last one on the stack doesn't seem to match the parameter, it's still possible</comment>
                    <comment type="line" pos:line="144" pos:column="21">// that the model we need is there. This can happen when dictionaries and arrays are involved, since adding keys to </comment>
                    <comment type="line" pos:line="145" pos:column="21">// those, will result in adding that key/index as a model and later that model is bound, but it will never be</comment>
                    <comment type="line" pos:line="146" pos:column="21">// bound as a property, since it isn't one. This means that those keys/indexes will never be popped of the stack and added</comment>
                    <comment type="line" pos:line="147" pos:column="21">// to their model being the dictionary/array. So we need to move through the stack as long as the name of the model</comment>
                    <comment type="line" pos:line="148" pos:column="21">// preceding it start with "{ParameterName}." or "{ParameterName}[digits}" in case we are dealing with an array </comment>
                    <comment type="line" pos:line="149" pos:column="21">// and adding all those intermediate models as "properties" until we reach the model we are looking for</comment>
                    <decl_stmt><decl><type><name pos:line="150" pos:column="21">string</name></type> <name pos:line="150" pos:column="28">regexPattern</name> <init pos:line="150" pos:column="41">= <expr><call><name><name pos:line="150" pos:column="43">string</name><op:operator pos:line="150" pos:column="49">.</op:operator><name pos:line="150" pos:column="50">Format</name></name><argument_list pos:line="150" pos:column="56">(<argument><expr><lit:literal type="string" pos:line="150" pos:column="57">@"^{0}\..+|^{0}\[\d+\]"</lit:literal></expr></argument>, <argument><expr><name pos:line="150" pos:column="82">parameter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="151" pos:column="21">Regex</name></type> <name pos:line="151" pos:column="27">regex</name> <init pos:line="151" pos:column="33">= <expr><op:operator pos:line="151" pos:column="35">new</op:operator> <call><name pos:line="151" pos:column="39">Regex</name><argument_list pos:line="151" pos:column="44">(<argument><expr><name pos:line="151" pos:column="45">regexPattern</name></expr></argument>, <argument><expr><name><name pos:line="151" pos:column="59">RegexOptions</name><op:operator pos:line="151" pos:column="71">.</op:operator><name pos:line="151" pos:column="72">Compiled</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if pos:line="152" pos:column="21">if <condition pos:line="152" pos:column="24">(<expr><call><name><name pos:line="152" pos:column="25">regex</name><op:operator pos:line="152" pos:column="30">.</op:operator><name pos:line="152" pos:column="31">IsMatch</name></name><argument_list pos:line="152" pos:column="38">(<argument><expr><name><name pos:line="152" pos:column="39">model</name><op:operator pos:line="152" pos:column="44">.</op:operator><name pos:line="152" pos:column="45">ParameterName</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="152" pos:column="60">
                    <block pos:line="153" pos:column="21">{
                        <decl_stmt><decl><type><name><name pos:line="154" pos:column="25">List</name><argument_list pos:line="154" pos:column="29">&lt;<argument><name pos:line="154" pos:column="30">ModelBindingModel</name></argument>&gt;</argument_list></name></type> <name pos:line="154" pos:column="49">possiblePropertiesOfRequestedModel</name> <init pos:line="154" pos:column="84">= <expr><op:operator pos:line="154" pos:column="86">new</op:operator> <call><name><name pos:line="154" pos:column="90">List</name><argument_list pos:line="154" pos:column="94">&lt;<argument><name pos:line="154" pos:column="95">ModelBindingModel</name></argument>&gt;</argument_list></name><argument_list pos:line="154" pos:column="113">()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name pos:line="155" pos:column="25">model</name> <op:operator pos:line="155" pos:column="31">=</op:operator> <call><name><name pos:line="155" pos:column="33">stack</name><op:operator pos:line="155" pos:column="38">.</op:operator><name pos:line="155" pos:column="39">Pop</name></name><argument_list pos:line="155" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
                        <while pos:line="156" pos:column="25">while <condition pos:line="156" pos:column="31">(<expr><call><name><name pos:line="156" pos:column="32">regex</name><op:operator pos:line="156" pos:column="37">.</op:operator><name pos:line="156" pos:column="38">IsMatch</name></name><argument_list pos:line="156" pos:column="45">(<argument><expr><name><name pos:line="156" pos:column="46">model</name><op:operator pos:line="156" pos:column="51">.</op:operator><name pos:line="156" pos:column="52">ParameterName</name></name></expr></argument>)</argument_list></call></expr>)</condition>
                        <block pos:line="157" pos:column="25">{
                            <expr_stmt><expr><call><name><name pos:line="158" pos:column="29">possiblePropertiesOfRequestedModel</name><op:operator pos:line="158" pos:column="63">.</op:operator><name pos:line="158" pos:column="64">Insert</name></name><argument_list pos:line="158" pos:column="70">(<argument><expr><lit:literal type="number" pos:line="158" pos:column="71">0</lit:literal></expr></argument>, <argument><expr><name pos:line="158" pos:column="74">model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
                            <expr_stmt><expr><name pos:line="159" pos:column="29">model</name> <op:operator pos:line="159" pos:column="35">=</op:operator> <call><name><name pos:line="159" pos:column="37">stack</name><op:operator pos:line="159" pos:column="42">.</op:operator><name pos:line="159" pos:column="43">Pop</name></name><argument_list pos:line="159" pos:column="46">()</argument_list></call></expr>;</expr_stmt>
                        }</block></while>

                        <comment type="line" pos:line="162" pos:column="25">// The model we have now should be the one we were looking for in the first place</comment>
                        <if pos:line="163" pos:column="25">if <condition pos:line="163" pos:column="28">(<expr><call><name><name pos:line="163" pos:column="29">model</name><op:operator pos:line="163" pos:column="34">.</op:operator><name pos:line="163" pos:column="35">ParameterName</name><op:operator pos:line="163" pos:column="48">.</op:operator><name pos:line="163" pos:column="49">Equals</name></name><argument_list pos:line="163" pos:column="55">(<argument><expr><name pos:line="163" pos:column="56">parameter</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="163" pos:column="67">
                        <block pos:line="164" pos:column="25">{
                            <foreach pos:line="165" pos:column="29">foreach (<init><decl><type><name pos:line="165" pos:column="38">var</name></type> <name pos:line="165" pos:column="42">modelProperty</name> <range pos:line="165" pos:column="56">in <expr><name pos:line="165" pos:column="59">possiblePropertiesOfRequestedModel</name></expr></range></decl></init>)
                            <block pos:line="166" pos:column="29">{
                                <expr_stmt><expr><call><name><name pos:line="167" pos:column="33">model</name><op:operator pos:line="167" pos:column="38">.</op:operator><name pos:line="167" pos:column="39">Properties</name><op:operator pos:line="167" pos:column="49">.</op:operator><name pos:line="167" pos:column="50">Add</name></name><argument_list pos:line="167" pos:column="53">(<argument><expr><name pos:line="167" pos:column="54">modelProperty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></foreach>

                            <expr_stmt><expr><call><name><name pos:line="170" pos:column="29">stack</name><op:operator pos:line="170" pos:column="34">.</op:operator><name pos:line="170" pos:column="35">Push</name></name><argument_list pos:line="170" pos:column="39">(<argument><expr><name pos:line="170" pos:column="40">model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="170" pos:column="48">// we put the requested model back on the stack as if it was found there in the first place</comment>

                            <return pos:line="172" pos:column="29">return <expr><name pos:line="172" pos:column="36">model</name></expr>;</return>
                        }</block></then>
                        <else pos:line="174" pos:column="25">else
                        <block pos:line="175" pos:column="25">{
                            <comment type="line" pos:line="176" pos:column="29">// This should not happen, but in case it does, we undo our popping above</comment>
                            <foreach pos:line="177" pos:column="29">foreach (<init><decl><type><name pos:line="177" pos:column="38">var</name></type> <name pos:line="177" pos:column="42">possiblePropertyOfRequestedModel</name> <range pos:line="177" pos:column="75">in <expr><name pos:line="177" pos:column="78">possiblePropertiesOfRequestedModel</name></expr></range></decl></init>)
                            <block pos:line="178" pos:column="29">{
                                <expr_stmt><expr><call><name><name pos:line="179" pos:column="33">stack</name><op:operator pos:line="179" pos:column="38">.</op:operator><name pos:line="179" pos:column="39">Push</name></name><argument_list pos:line="179" pos:column="43">(<argument><expr><name pos:line="179" pos:column="44">possiblePropertyOfRequestedModel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></foreach>

                            <expr_stmt><expr><call><name><name pos:line="182" pos:column="29">stack</name><op:operator pos:line="182" pos:column="34">.</op:operator><name pos:line="182" pos:column="35">Push</name></name><argument_list pos:line="182" pos:column="39">(<argument><expr><name pos:line="182" pos:column="40">model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="182" pos:column="48">// we put the requested model back on the stack as if it was found there in the first place</comment>
                        }</block></else></if>
                    }</block></then></if>
                }</block></else></if></else></if>
            }</block></then></if>

            <expr_stmt><expr><name pos:line="188" pos:column="13">model</name> <op:operator pos:line="188" pos:column="19">=</op:operator> <op:operator pos:line="188" pos:column="21">new</op:operator> <call><name pos:line="188" pos:column="25">ModelBindingModel</name><argument_list pos:line="188" pos:column="42">(<argument><expr><name pos:line="188" pos:column="43">parameter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="189" pos:column="13">stack</name><op:operator pos:line="189" pos:column="18">.</op:operator><name pos:line="189" pos:column="19">Push</name></name><argument_list pos:line="189" pos:column="23">(<argument><expr><name pos:line="189" pos:column="24">model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="190" pos:column="13">return <expr><name pos:line="190" pos:column="20">model</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="193" pos:column="9">private</specifier> <name><name pos:line="193" pos:column="17">Stack</name><argument_list pos:line="193" pos:column="22">&lt;<argument><name pos:line="193" pos:column="23">ModelBindingModel</name></argument>&gt;</argument_list></name></type> <name pos:line="193" pos:column="42">GetStack</name><parameter_list pos:line="193" pos:column="50">(<param><decl><type><name pos:line="193" pos:column="51">IDataStore</name></type> <name pos:line="193" pos:column="62">tabStore</name></decl></param>)</parameter_list>
        <block pos:line="194" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="195" pos:column="13">Stack</name><argument_list pos:line="195" pos:column="18">&lt;<argument><name pos:line="195" pos:column="19">ModelBindingModel</name></argument>&gt;</argument_list></name></type> <name pos:line="195" pos:column="38">stack</name></decl>;</decl_stmt>

            <if pos:line="197" pos:column="13">if <condition pos:line="197" pos:column="16">(<expr><call><name><name pos:line="197" pos:column="17">tabStore</name><op:operator pos:line="197" pos:column="25">.</op:operator><name><name pos:line="197" pos:column="26">Contains</name><argument_list pos:line="197" pos:column="34">&lt;<argument><name><name pos:line="197" pos:column="35">Stack</name><argument_list pos:line="197" pos:column="40">&lt;<argument><name pos:line="197" pos:column="41">ModelBindingModel</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name><argument_list pos:line="197" pos:column="60">()</argument_list></call></expr>)</condition><then pos:line="197" pos:column="63">
            <block pos:line="198" pos:column="13">{
                <expr_stmt><expr><name pos:line="199" pos:column="17">stack</name> <op:operator pos:line="199" pos:column="23">=</op:operator> <call><name><name pos:line="199" pos:column="25">tabStore</name><op:operator pos:line="199" pos:column="33">.</op:operator><name><name pos:line="199" pos:column="34">Get</name><argument_list pos:line="199" pos:column="37">&lt;<argument><name><name pos:line="199" pos:column="38">Stack</name><argument_list pos:line="199" pos:column="43">&lt;<argument><name pos:line="199" pos:column="44">ModelBindingModel</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name><argument_list pos:line="199" pos:column="63">()</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else pos:line="201" pos:column="13">else
            <block pos:line="202" pos:column="13">{
                <expr_stmt><expr><name pos:line="203" pos:column="17">stack</name> <op:operator pos:line="203" pos:column="23">=</op:operator> <op:operator pos:line="203" pos:column="25">new</op:operator> <call><name><name pos:line="203" pos:column="29">Stack</name><argument_list pos:line="203" pos:column="34">&lt;<argument><name pos:line="203" pos:column="35">ModelBindingModel</name></argument>&gt;</argument_list></name><argument_list pos:line="203" pos:column="53">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="204" pos:column="17">tabStore</name><op:operator pos:line="204" pos:column="25">.</op:operator><name pos:line="204" pos:column="26">Set</name></name><argument_list pos:line="204" pos:column="29">(<argument><expr><name pos:line="204" pos:column="30">stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <return pos:line="207" pos:column="13">return <expr><name pos:line="207" pos:column="20">stack</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
