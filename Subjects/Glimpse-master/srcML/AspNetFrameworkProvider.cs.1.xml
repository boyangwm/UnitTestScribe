<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.AspNet\AspNetFrameworkProvider.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Configuration</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Runtime</name><op:operator pos:line="3" pos:column="21">.</op:operator><name pos:line="3" pos:column="22">Remoting</name><op:operator pos:line="3" pos:column="30">.</op:operator><name pos:line="3" pos:column="31">Messaging</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Runtime</name><op:operator pos:line="4" pos:column="21">.</op:operator><name pos:line="4" pos:column="22">Serialization</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Web</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Glimpse</name><op:operator pos:line="6" pos:column="14">.</op:operator><name pos:line="6" pos:column="15">AspNet</name><op:operator pos:line="6" pos:column="21">.</op:operator><name pos:line="6" pos:column="22">Extensions</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Glimpse</name><op:operator pos:line="7" pos:column="14">.</op:operator><name pos:line="7" pos:column="15">Core</name><op:operator pos:line="7" pos:column="19">.</op:operator><name pos:line="7" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Glimpse</name><op:operator pos:line="8" pos:column="14">.</op:operator><name pos:line="8" pos:column="15">Core</name><op:operator pos:line="8" pos:column="19">.</op:operator><name pos:line="8" pos:column="20">Framework</name></name>;</using>

<namespace pos:line="10" pos:column="1">namespace <name><name pos:line="10" pos:column="11">Glimpse</name><op:operator pos:line="10" pos:column="18">.</op:operator><name pos:line="10" pos:column="19">AspNet</name></name>
<block pos:line="11" pos:column="1">{
    <class><specifier pos:line="12" pos:column="5">public</specifier> class <name pos:line="12" pos:column="18">AspNetFrameworkProvider</name> <super pos:line="12" pos:column="42">: <name pos:line="12" pos:column="44">IFrameworkProvider</name></super>
    <block pos:line="13" pos:column="5">{
        <comment type="line" pos:line="14" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="15" pos:column="9">/// Wrapper around HttpContext.Current for testing purposes. Not for public use.</comment>
        <comment type="line" pos:line="16" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="17" pos:column="9">private</specifier> <name pos:line="17" pos:column="17">HttpContextBase</name></type> <name pos:line="17" pos:column="33">context</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="19" pos:column="9">private</specifier> <specifier pos:line="19" pos:column="17">static</specifier> <specifier pos:line="19" pos:column="24">readonly</specifier> <name pos:line="19" pos:column="33">bool</name></type> <name pos:line="19" pos:column="38">AsyncSupportDisabled</name> <init pos:line="19" pos:column="59">= <expr><call><name><name pos:line="19" pos:column="61">Convert</name><op:operator pos:line="19" pos:column="68">.</op:operator><name pos:line="19" pos:column="69">ToBoolean</name></name><argument_list pos:line="19" pos:column="78">(<argument><expr><name><name pos:line="19" pos:column="79">ConfigurationManager</name><op:operator pos:line="19" pos:column="99">.</op:operator><name pos:line="19" pos:column="100">AppSettings</name><index pos:line="19" pos:column="111">[<expr><lit:literal type="string" pos:line="19" pos:column="112">"Glimpse:DisableAsyncSupport"</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <constructor><specifier pos:line="21" pos:column="9">public</specifier> <name pos:line="21" pos:column="16">AspNetFrameworkProvider</name><parameter_list pos:line="21" pos:column="39">(<param><decl><type><name pos:line="21" pos:column="40">ILogger</name></type> <name pos:line="21" pos:column="48">logger</name></decl></param>)</parameter_list>
        <block pos:line="22" pos:column="9">{
            <expr_stmt><expr><name pos:line="23" pos:column="13">Logger</name> <op:operator pos:line="23" pos:column="20">=</op:operator> <name pos:line="23" pos:column="22">logger</name></expr>;</expr_stmt>
        }</block></constructor>

        <decl_stmt><decl><type><specifier pos:line="26" pos:column="9">public</specifier> <name pos:line="26" pos:column="16">IDataStore</name></type> <name pos:line="26" pos:column="27">HttpRequestStore</name>
        <block pos:line="27" pos:column="9">{
            <function><name pos:line="28" pos:column="13">get</name> <block pos:line="28" pos:column="17">{ <return pos:line="28" pos:column="19">return <expr><op:operator pos:line="28" pos:column="26">new</op:operator> <call><name pos:line="28" pos:column="30">DictionaryDataStoreAdapter</name><argument_list pos:line="28" pos:column="56">(<argument><expr><name><name pos:line="28" pos:column="57">Context</name><op:operator pos:line="28" pos:column="64">.</op:operator><name pos:line="28" pos:column="65">Items</name></name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="31" pos:column="9">public</specifier> <name pos:line="31" pos:column="16">IDataStore</name></type> <name pos:line="31" pos:column="27">HttpServerStore</name>
        <block pos:line="32" pos:column="9">{
            <function><name pos:line="33" pos:column="13">get</name> <block pos:line="33" pos:column="17">{ <return pos:line="33" pos:column="19">return <expr><op:operator pos:line="33" pos:column="26">new</op:operator> <call><name pos:line="33" pos:column="30">HttpApplicationStateBaseDataStoreAdapter</name><argument_list pos:line="33" pos:column="70">(<argument><expr><name><name pos:line="33" pos:column="71">Context</name><op:operator pos:line="33" pos:column="78">.</op:operator><name pos:line="33" pos:column="79">Application</name></name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="36" pos:column="9">public</specifier> <name pos:line="36" pos:column="16">object</name></type> <name pos:line="36" pos:column="23">RuntimeContext</name>
        <block pos:line="37" pos:column="9">{
            <function><name pos:line="38" pos:column="13">get</name> <block pos:line="38" pos:column="17">{ <return pos:line="38" pos:column="19">return <expr><name pos:line="38" pos:column="26">Context</name></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="41" pos:column="9">public</specifier> <name pos:line="41" pos:column="16">IRequestMetadata</name></type> <name pos:line="41" pos:column="33">RequestMetadata</name>
        <block pos:line="42" pos:column="9">{
            <function><name pos:line="43" pos:column="13">get</name> <block pos:line="43" pos:column="17">{ <return pos:line="43" pos:column="19">return <expr><op:operator pos:line="43" pos:column="26">new</op:operator> <call><name pos:line="43" pos:column="30">RequestMetadata</name><argument_list pos:line="43" pos:column="45">(<argument><expr><name pos:line="43" pos:column="46">Context</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="46" pos:column="9">internal</specifier> <name pos:line="46" pos:column="18">HttpContextBase</name></type> <name pos:line="46" pos:column="34">Context</name>
        <block pos:line="47" pos:column="9">{
            <function><name pos:line="48" pos:column="13">get</name> <block pos:line="48" pos:column="17">{ <return pos:line="48" pos:column="19">return <expr><name pos:line="48" pos:column="26">context</name> <op:operator pos:line="48" pos:column="34">??</op:operator> <call><name pos:line="48" pos:column="37">TryGetOrCaptureLogicalContext</name><argument_list pos:line="48" pos:column="66">()</argument_list></call></expr>;</return> }</block></function>
            <function><name pos:line="49" pos:column="13">set</name> <block pos:line="49" pos:column="17">{ <expr_stmt><expr><name pos:line="49" pos:column="19">context</name> <op:operator pos:line="49" pos:column="27">=</op:operator> <name pos:line="49" pos:column="29">value</name></expr>;</expr_stmt> }</block></function>
        }</block></decl></decl_stmt>

        <function><type><specifier pos:line="52" pos:column="9">private</specifier> <specifier pos:line="52" pos:column="17">static</specifier> <name pos:line="52" pos:column="24">HttpContextBase</name></type> <name pos:line="52" pos:column="40">TryGetOrCaptureLogicalContext</name><parameter_list pos:line="52" pos:column="69">()</parameter_list>
        <block pos:line="53" pos:column="9">{
            <if pos:line="54" pos:column="13">if <condition pos:line="54" pos:column="16">(<expr><name pos:line="54" pos:column="17">AsyncSupportDisabled</name></expr>)</condition><then pos:line="54" pos:column="38">
            <block pos:line="55" pos:column="13">{
                <return pos:line="56" pos:column="17">return <expr><op:operator pos:line="56" pos:column="24">new</op:operator> <call><name pos:line="56" pos:column="28">HttpContextWrapper</name><argument_list pos:line="56" pos:column="46">(<argument><expr><name><name pos:line="56" pos:column="47">HttpContext</name><op:operator pos:line="56" pos:column="58">.</op:operator><name pos:line="56" pos:column="59">Current</name></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>

            <if pos:line="59" pos:column="13">if <condition pos:line="59" pos:column="16">(<expr><name><name pos:line="59" pos:column="17">HttpContext</name><op:operator pos:line="59" pos:column="28">.</op:operator><name pos:line="59" pos:column="29">Current</name></name> <op:operator pos:line="59" pos:column="37">==</op:operator> <name pos:line="59" pos:column="40">null</name></expr>)</condition><then pos:line="59" pos:column="45">
            <block pos:line="60" pos:column="13">{
                <return pos:line="61" pos:column="17">return <expr><call><name><name><name pos:line="61" pos:column="24">AntiSerializationWrapper</name><argument_list pos:line="61" pos:column="48">&lt;<argument><name pos:line="61" pos:column="49">HttpContextBase</name></argument>&gt;</argument_list></name><op:operator pos:line="61" pos:column="65">.</op:operator><name pos:line="61" pos:column="66">Unwrap</name></name><argument_list pos:line="61" pos:column="72">(<argument><expr><call><name><name pos:line="61" pos:column="73">CallContext</name><op:operator pos:line="61" pos:column="84">.</op:operator><name pos:line="61" pos:column="85">LogicalGetData</name></name><argument_list pos:line="61" pos:column="99">(<argument><expr><lit:literal type="string" pos:line="61" pos:column="100">"Glimpse.HttpContext"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="64" pos:column="13">var</name></type> <name pos:line="64" pos:column="17">context</name> <init pos:line="64" pos:column="25">= <expr><op:operator pos:line="64" pos:column="27">new</op:operator> <call><name pos:line="64" pos:column="31">HttpContextWrapper</name><argument_list pos:line="64" pos:column="49">(<argument><expr><name><name pos:line="64" pos:column="50">HttpContext</name><op:operator pos:line="64" pos:column="61">.</op:operator><name pos:line="64" pos:column="62">Current</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="65" pos:column="13">CallContext</name><op:operator pos:line="65" pos:column="24">.</op:operator><name pos:line="65" pos:column="25">LogicalSetData</name></name><argument_list pos:line="65" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="65" pos:column="40">"Glimpse.HttpContext"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="65" pos:column="63">new</op:operator> <call><name><name pos:line="65" pos:column="67">AntiSerializationWrapper</name><argument_list pos:line="65" pos:column="91">&lt;<argument><name pos:line="65" pos:column="92">HttpContextBase</name></argument>&gt;</argument_list></name><argument_list pos:line="65" pos:column="108">(<argument><expr><name pos:line="65" pos:column="109">context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:line="67" pos:column="13">return <expr><name pos:line="67" pos:column="20">context</name></expr>;</return>
        }</block></function>

        <decl_stmt><decl><type><specifier pos:line="70" pos:column="9">private</specifier> <name pos:line="70" pos:column="17">ILogger</name></type> <name pos:line="70" pos:column="25">Logger</name> <block pos:line="70" pos:column="32">{ <function_decl><name pos:line="70" pos:column="34">get</name>;</function_decl> <function_decl><name pos:line="70" pos:column="39">set</name>;</function_decl> }</block></decl></decl_stmt>

        <function><type><specifier pos:line="72" pos:column="9">public</specifier> <name pos:line="72" pos:column="16">void</name></type> <name pos:line="72" pos:column="21">SetHttpResponseHeader</name><parameter_list pos:line="72" pos:column="42">(<param><decl><type><name pos:line="72" pos:column="43">string</name></type> <name pos:line="72" pos:column="50">name</name></decl></param>, <param><decl><type><name pos:line="72" pos:column="56">string</name></type> <name pos:line="72" pos:column="63">value</name></decl></param>)</parameter_list>
        <block pos:line="73" pos:column="9">{
            <try pos:line="74" pos:column="13">try
            <block pos:line="75" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="76" pos:column="17">Context</name><op:operator pos:line="76" pos:column="24">.</op:operator><name pos:line="76" pos:column="25">Response</name><op:operator pos:line="76" pos:column="33">.</op:operator><name pos:line="76" pos:column="34">AppendHeader</name></name><argument_list pos:line="76" pos:column="46">(<argument><expr><name pos:line="76" pos:column="47">name</name></expr></argument>, <argument><expr><name pos:line="76" pos:column="53">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch pos:line="78" pos:column="13">catch <parameter_list pos:line="78" pos:column="19">(<param><decl><type><name pos:line="78" pos:column="20">Exception</name></type> <name pos:line="78" pos:column="30">exception</name></decl></param>)</parameter_list>
            <block pos:line="79" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="80" pos:column="17">Logger</name><op:operator pos:line="80" pos:column="23">.</op:operator><name pos:line="80" pos:column="24">Error</name></name><argument_list pos:line="80" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="80" pos:column="30">"Exception setting Http response header '{0}' with value '{1}'."</lit:literal></expr></argument>, <argument><expr><name pos:line="80" pos:column="96">exception</name></expr></argument>, <argument><expr><name pos:line="80" pos:column="107">name</name></expr></argument>, <argument><expr><name pos:line="80" pos:column="113">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></function>

        <function><type><specifier pos:line="84" pos:column="9">public</specifier> <name pos:line="84" pos:column="16">void</name></type> <name pos:line="84" pos:column="21">SetHttpResponseStatusCode</name><parameter_list pos:line="84" pos:column="46">(<param><decl><type><name pos:line="84" pos:column="47">int</name></type> <name pos:line="84" pos:column="51">statusCode</name></decl></param>)</parameter_list>
        <block pos:line="85" pos:column="9">{
            <try pos:line="86" pos:column="13">try
            <block pos:line="87" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="88" pos:column="17">Context</name><op:operator pos:line="88" pos:column="24">.</op:operator><name pos:line="88" pos:column="25">Response</name><op:operator pos:line="88" pos:column="33">.</op:operator><name pos:line="88" pos:column="34">StatusCode</name></name> <op:operator pos:line="88" pos:column="45">=</op:operator> <name pos:line="88" pos:column="47">statusCode</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="89" pos:column="17">Context</name><op:operator pos:line="89" pos:column="24">.</op:operator><name pos:line="89" pos:column="25">Response</name><op:operator pos:line="89" pos:column="33">.</op:operator><name pos:line="89" pos:column="34">StatusDescription</name></name> <op:operator pos:line="89" pos:column="52">=</op:operator> <name pos:line="89" pos:column="54">null</name></expr>;</expr_stmt>
            }</block>
            <catch pos:line="91" pos:column="13">catch <parameter_list pos:line="91" pos:column="19">(<param><decl><type><name pos:line="91" pos:column="20">Exception</name></type> <name pos:line="91" pos:column="30">exception</name></decl></param>)</parameter_list>
            <block pos:line="92" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="93" pos:column="17">Logger</name><op:operator pos:line="93" pos:column="23">.</op:operator><name pos:line="93" pos:column="24">Error</name></name><argument_list pos:line="93" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="93" pos:column="30">"Exception setting Http status code with value '{0}'."</lit:literal></expr></argument>, <argument><expr><name pos:line="93" pos:column="86">exception</name></expr></argument>, <argument><expr><name pos:line="93" pos:column="97">statusCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></function>

        <function><type><specifier pos:line="97" pos:column="9">public</specifier> <name pos:line="97" pos:column="16">void</name></type> <name pos:line="97" pos:column="21">SetCookie</name><parameter_list pos:line="97" pos:column="30">(<param><decl><type><name pos:line="97" pos:column="31">string</name></type> <name pos:line="97" pos:column="38">name</name></decl></param>, <param><decl><type><name pos:line="97" pos:column="44">string</name></type> <name pos:line="97" pos:column="51">value</name></decl></param>)</parameter_list>
        <block pos:line="98" pos:column="9">{
            <try pos:line="99" pos:column="13">try
            <block pos:line="100" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="101" pos:column="17">Context</name><op:operator pos:line="101" pos:column="24">.</op:operator><name pos:line="101" pos:column="25">Response</name><op:operator pos:line="101" pos:column="33">.</op:operator><name pos:line="101" pos:column="34">Cookies</name><op:operator pos:line="101" pos:column="41">.</op:operator><name pos:line="101" pos:column="42">Add</name></name><argument_list pos:line="101" pos:column="45">(<argument><expr><op:operator pos:line="101" pos:column="46">new</op:operator> <call><name pos:line="101" pos:column="50">HttpCookie</name><argument_list pos:line="101" pos:column="60">(<argument><expr><name pos:line="101" pos:column="61">name</name></expr></argument>, <argument><expr><name pos:line="101" pos:column="67">value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch pos:line="103" pos:column="13">catch <parameter_list pos:line="103" pos:column="19">(<param><decl><type><name pos:line="103" pos:column="20">Exception</name></type> <name pos:line="103" pos:column="30">exception</name></decl></param>)</parameter_list>
            <block pos:line="104" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="105" pos:column="17">Logger</name><op:operator pos:line="105" pos:column="23">.</op:operator><name pos:line="105" pos:column="24">Error</name></name><argument_list pos:line="105" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="105" pos:column="30">"Exception setting cookie '{0}' with value '{1}'."</lit:literal></expr></argument>, <argument><expr><name pos:line="105" pos:column="82">exception</name></expr></argument>, <argument><expr><name pos:line="105" pos:column="93">name</name></expr></argument>, <argument><expr><name pos:line="105" pos:column="99">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></function>

        <function><type><specifier pos:line="109" pos:column="9">public</specifier> <name pos:line="109" pos:column="16">void</name></type> <name pos:line="109" pos:column="21">InjectHttpResponseBody</name><parameter_list pos:line="109" pos:column="43">(<param><decl><type><name pos:line="109" pos:column="44">string</name></type> <name pos:line="109" pos:column="51">htmlSnippet</name></decl></param>)</parameter_list>
        <block pos:line="110" pos:column="9">{
            <try pos:line="111" pos:column="13">try
            <block pos:line="112" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="113" pos:column="17">var</name></type> <name pos:line="113" pos:column="21">response</name> <init pos:line="113" pos:column="30">= <expr><name><name pos:line="113" pos:column="32">Context</name><op:operator pos:line="113" pos:column="39">.</op:operator><name pos:line="113" pos:column="40">Response</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name pos:line="114" pos:column="17">response</name><op:operator pos:line="114" pos:column="25">.</op:operator><name pos:line="114" pos:column="26">Filter</name></name> <op:operator pos:line="114" pos:column="33">=</op:operator> <op:operator pos:line="114" pos:column="35">new</op:operator> <call><name pos:line="114" pos:column="39">PreBodyTagFilter</name><argument_list pos:line="114" pos:column="55">(<argument><expr><name pos:line="114" pos:column="56">htmlSnippet</name></expr></argument>, <argument><expr><name><name pos:line="114" pos:column="69">response</name><op:operator pos:line="114" pos:column="77">.</op:operator><name pos:line="114" pos:column="78">Filter</name></name></expr></argument>, <argument><expr><name><name pos:line="114" pos:column="86">response</name><op:operator pos:line="114" pos:column="94">.</op:operator><name pos:line="114" pos:column="95">ContentEncoding</name></name></expr></argument>, <argument><expr><name><name pos:line="114" pos:column="112">Context</name><op:operator pos:line="114" pos:column="119">.</op:operator><name pos:line="114" pos:column="120">Request</name></name> <op:operator pos:line="114" pos:column="128">!=</op:operator> <name pos:line="114" pos:column="131">null</name> <op:operator pos:line="114" pos:column="136">?</op:operator> <name><name pos:line="114" pos:column="138">Context</name><op:operator pos:line="114" pos:column="145">.</op:operator><name pos:line="114" pos:column="146">Request</name><op:operator pos:line="114" pos:column="153">.</op:operator><name pos:line="114" pos:column="154">RawUrl</name></name> <op:operator pos:line="114" pos:column="161">:</op:operator> <name pos:line="114" pos:column="163">null</name></expr></argument>, <argument><expr><name pos:line="114" pos:column="169">Logger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch pos:line="116" pos:column="13">catch <parameter_list pos:line="116" pos:column="19">(<param><decl><type><name pos:line="116" pos:column="20">Exception</name></type> <name pos:line="116" pos:column="30">exception</name></decl></param>)</parameter_list>
            <block pos:line="117" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="118" pos:column="17">Logger</name><op:operator pos:line="118" pos:column="23">.</op:operator><name pos:line="118" pos:column="24">Error</name></name><argument_list pos:line="118" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="118" pos:column="30">"Exception injecting Http response body with Html snippet '{0}'."</lit:literal></expr></argument>, <argument><expr><name pos:line="118" pos:column="97">exception</name></expr></argument>, <argument><expr><name pos:line="118" pos:column="108">htmlSnippet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></function>

        <function><type><specifier pos:line="122" pos:column="9">public</specifier> <name pos:line="122" pos:column="16">void</name></type> <name pos:line="122" pos:column="21">WriteHttpResponse</name><parameter_list pos:line="122" pos:column="38">(<param><decl><type><name><name pos:line="122" pos:column="39">byte</name><index pos:line="122" pos:column="43">[]</index></name></type> <name pos:line="122" pos:column="46">content</name></decl></param>)</parameter_list>
        <block pos:line="123" pos:column="9">{
            <try pos:line="124" pos:column="13">try
            <block pos:line="125" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="126" pos:column="17">Context</name><op:operator pos:line="126" pos:column="24">.</op:operator><name pos:line="126" pos:column="25">Response</name><op:operator pos:line="126" pos:column="33">.</op:operator><name pos:line="126" pos:column="34">BinaryWrite</name></name><argument_list pos:line="126" pos:column="45">(<argument><expr><name pos:line="126" pos:column="46">content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch pos:line="128" pos:column="13">catch <parameter_list pos:line="128" pos:column="19">(<param><decl><type><name pos:line="128" pos:column="20">Exception</name></type> <name pos:line="128" pos:column="30">exception</name></decl></param>)</parameter_list>
            <block pos:line="129" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="130" pos:column="17">Logger</name><op:operator pos:line="130" pos:column="23">.</op:operator><name pos:line="130" pos:column="24">Error</name></name><argument_list pos:line="130" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="130" pos:column="30">"Exception writing Http response."</lit:literal></expr></argument>, <argument><expr><name pos:line="130" pos:column="66">exception</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></function>

        <function><type><specifier pos:line="134" pos:column="9">public</specifier> <name pos:line="134" pos:column="16">void</name></type> <name pos:line="134" pos:column="21">WriteHttpResponse</name><parameter_list pos:line="134" pos:column="38">(<param><decl><type><name pos:line="134" pos:column="39">string</name></type> <name pos:line="134" pos:column="46">content</name></decl></param>)</parameter_list>
        <block pos:line="135" pos:column="9">{
            <try pos:line="136" pos:column="13">try
            <block pos:line="137" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="138" pos:column="17">Context</name><op:operator pos:line="138" pos:column="24">.</op:operator><name pos:line="138" pos:column="25">Response</name><op:operator pos:line="138" pos:column="33">.</op:operator><name pos:line="138" pos:column="34">Write</name></name><argument_list pos:line="138" pos:column="39">(<argument><expr><name pos:line="138" pos:column="40">content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch pos:line="140" pos:column="13">catch <parameter_list pos:line="140" pos:column="19">(<param><decl><type><name pos:line="140" pos:column="20">Exception</name></type> <name pos:line="140" pos:column="30">exception</name></decl></param>)</parameter_list>
            <block pos:line="141" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="142" pos:column="17">Logger</name><op:operator pos:line="142" pos:column="23">.</op:operator><name pos:line="142" pos:column="24">Error</name></name><argument_list pos:line="142" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="142" pos:column="30">"Exception writing Http response."</lit:literal></expr></argument>, <argument><expr><name pos:line="142" pos:column="66">exception</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></function>

        <struct><attribute pos:line="146" pos:column="9">[<expr><name pos:line="146" pos:column="10">Serializable</name></expr>]</attribute>
        <specifier pos:line="147" pos:column="9">private</specifier> struct <name><name pos:line="147" pos:column="24">AntiSerializationWrapper</name><argument_list pos:line="147" pos:column="48">&lt;<argument><name pos:line="147" pos:column="49">T</name></argument>&gt;</argument_list></name> <super pos:line="147" pos:column="52">: <name pos:line="147" pos:column="54">ISerializable</name></super>
        <block pos:line="148" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="149" pos:column="13">private</specifier> <specifier pos:line="149" pos:column="21">readonly</specifier> <name pos:line="149" pos:column="30">T</name></type> <name pos:line="149" pos:column="32">value</name></decl>;</decl_stmt>

            <constructor><specifier pos:line="151" pos:column="13">public</specifier> <name pos:line="151" pos:column="20">AntiSerializationWrapper</name><parameter_list pos:line="151" pos:column="44">(<param><decl><type><name pos:line="151" pos:column="45">T</name></type> <name pos:line="151" pos:column="47">value</name></decl></param>)</parameter_list>
            <block pos:line="152" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="153" pos:column="17">this</name><op:operator pos:line="153" pos:column="21">.</op:operator><name pos:line="153" pos:column="22">value</name></name> <op:operator pos:line="153" pos:column="28">=</op:operator> <name pos:line="153" pos:column="30">value</name></expr>;</expr_stmt>
            }</block></constructor>

            <function><type><specifier pos:line="156" pos:column="13">public</specifier> <name pos:line="156" pos:column="20">void</name></type> <name pos:line="156" pos:column="25">GetObjectData</name><parameter_list pos:line="156" pos:column="38">(<param><decl><type><name pos:line="156" pos:column="39">SerializationInfo</name></type> <name pos:line="156" pos:column="57">info</name></decl></param>, <param><decl><type><name pos:line="156" pos:column="63">StreamingContext</name></type> <name pos:line="156" pos:column="80">context</name></decl></param>)</parameter_list>
            <block pos:line="157" pos:column="13">{
                <throw pos:line="158" pos:column="17">throw <expr><op:operator pos:line="158" pos:column="23">new</op:operator> <call><name pos:line="158" pos:column="27">NotSupportedException</name><argument_list pos:line="158" pos:column="48">(
                    <argument><expr><lit:literal type="string" pos:line="159" pos:column="21">"Some environments conflict with current Glimpse async support. "</lit:literal> <op:operator pos:line="159" pos:column="87">+</op:operator>
                    <lit:literal type="string" pos:line="160" pos:column="21">"Please set Glimpse:DisableAsyncSupport = true in Web.config, or see https://github.com/Glimpse/Glimpse/issues/632 for more details."</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></function>

            <function><type><specifier pos:line="163" pos:column="13">public</specifier> <specifier pos:line="163" pos:column="20">static</specifier> <name pos:line="163" pos:column="27">T</name></type> <name pos:line="163" pos:column="29">Unwrap</name><parameter_list pos:line="163" pos:column="35">(<param><decl><type><name pos:line="163" pos:column="36">object</name></type> <name pos:line="163" pos:column="43">wrapper</name></decl></param>)</parameter_list>
            <block pos:line="164" pos:column="13">{
                <if pos:line="165" pos:column="17">if <condition pos:line="165" pos:column="20">(<expr><call><name pos:line="165" pos:column="21">ReferenceEquals</name><argument_list pos:line="165" pos:column="36">(<argument><expr><name pos:line="165" pos:column="37">wrapper</name></expr></argument>, <argument><expr><name pos:line="165" pos:column="46">null</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="165" pos:column="52">
                <block pos:line="166" pos:column="17">{
                    <return pos:line="167" pos:column="21">return <expr><call><name pos:line="167" pos:column="28">default</name><argument_list pos:line="167" pos:column="35">(<argument><expr><name pos:line="167" pos:column="36">T</name></expr></argument>)</argument_list></call></expr>;</return>
                }</block></then></if>

                <return pos:line="170" pos:column="17">return <expr><op:operator pos:line="170" pos:column="24">(</op:operator><op:operator pos:line="170" pos:column="25">(</op:operator><name><name pos:line="170" pos:column="26">AntiSerializationWrapper</name><argument_list pos:line="170" pos:column="50">&lt;<argument><name pos:line="170" pos:column="51">T</name></argument>&gt;</argument_list></name><op:operator pos:line="170" pos:column="53">)</op:operator><name pos:line="170" pos:column="54">wrapper</name><op:operator pos:line="170" pos:column="61">)</op:operator><op:operator pos:line="170" pos:column="62">.</op:operator><name pos:line="170" pos:column="63">value</name></expr>;</return>
            }</block></function>
        }</block></struct>
    }</block></class>
}</block></namespace></unit>
