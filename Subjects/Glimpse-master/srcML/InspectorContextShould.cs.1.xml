<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Core\Framework\InspectorContextShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">Glimpse</name><op:operator pos:line="2" pos:column="14">.</op:operator><name pos:line="2" pos:column="15">Core</name><op:operator pos:line="2" pos:column="19">.</op:operator><name pos:line="2" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Glimpse</name><op:operator pos:line="3" pos:column="14">.</op:operator><name pos:line="3" pos:column="15">Core</name><op:operator pos:line="3" pos:column="19">.</op:operator><name pos:line="3" pos:column="20">Framework</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Core</name></name>;</using>
<using pos:line="5" pos:column="1">using <name pos:line="5" pos:column="7">Moq</name>;</using>
<using pos:line="6" pos:column="1">using <name pos:line="6" pos:column="7">Xunit</name>;</using>

<namespace pos:line="8" pos:column="1">namespace <name><name pos:line="8" pos:column="11">Glimpse</name><op:operator pos:line="8" pos:column="18">.</op:operator><name pos:line="8" pos:column="19">Test</name><op:operator pos:line="8" pos:column="23">.</op:operator><name pos:line="8" pos:column="24">Core</name><op:operator pos:line="8" pos:column="28">.</op:operator><name pos:line="8" pos:column="29">Framework</name></name>
<block pos:line="9" pos:column="1">{
    <class><specifier pos:line="10" pos:column="5">public</specifier> class <name pos:line="10" pos:column="18">InspectorContextShould</name>
    <block pos:line="11" pos:column="5">{
        <function><type><attribute pos:line="12" pos:column="9">[<expr><name pos:line="12" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="13" pos:column="9">public</specifier> <name pos:line="13" pos:column="16">void</name></type> <name pos:line="13" pos:column="21">SetPropertiesOnConstruct</name><parameter_list pos:line="13" pos:column="45">()</parameter_list>
        <block pos:line="14" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="15" pos:column="13">var</name></type> <name pos:line="15" pos:column="17">loggerMock</name> <init pos:line="15" pos:column="28">= <expr><op:operator pos:line="15" pos:column="30">new</op:operator> <call><name><name pos:line="15" pos:column="34">Mock</name><argument_list pos:line="15" pos:column="38">&lt;<argument><name pos:line="15" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="15" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="16" pos:column="13">var</name></type> <name pos:line="16" pos:column="17">factoryMock</name> <init pos:line="16" pos:column="29">= <expr><op:operator pos:line="16" pos:column="31">new</op:operator> <call><name><name pos:line="16" pos:column="35">Mock</name><argument_list pos:line="16" pos:column="39">&lt;<argument><name pos:line="16" pos:column="40">IProxyFactory</name></argument>&gt;</argument_list></name><argument_list pos:line="16" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="17" pos:column="13">var</name></type> <name pos:line="17" pos:column="17">brokerMock</name> <init pos:line="17" pos:column="28">= <expr><op:operator pos:line="17" pos:column="30">new</op:operator> <call><name><name pos:line="17" pos:column="34">Mock</name><argument_list pos:line="17" pos:column="38">&lt;<argument><name pos:line="17" pos:column="39">IMessageBroker</name></argument>&gt;</argument_list></name><argument_list pos:line="17" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="18" pos:column="13">var</name></type> <name pos:line="18" pos:column="17">timerMock</name> <init pos:line="18" pos:column="27">= <expr><op:operator pos:line="18" pos:column="29">new</op:operator> <call><name><name pos:line="18" pos:column="33">Mock</name><argument_list pos:line="18" pos:column="37">&lt;<argument><name pos:line="18" pos:column="38">IExecutionTimer</name></argument>&gt;</argument_list></name><argument_list pos:line="18" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="20" pos:column="13">var</name></type> <name pos:line="20" pos:column="17">context</name> <init pos:line="20" pos:column="25">= <expr><op:operator pos:line="20" pos:column="27">new</op:operator> <call><name pos:line="20" pos:column="31">InspectorContext</name><argument_list pos:line="20" pos:column="47">(<argument><expr><name><name pos:line="20" pos:column="48">loggerMock</name><op:operator pos:line="20" pos:column="58">.</op:operator><name pos:line="20" pos:column="59">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="67">factoryMock</name><op:operator pos:line="20" pos:column="78">.</op:operator><name pos:line="20" pos:column="79">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="87">brokerMock</name><op:operator pos:line="20" pos:column="97">.</op:operator><name pos:line="20" pos:column="98">Object</name></name></expr></argument>, <argument><expr><lambda><parameter_list pos:line="20" pos:column="106">()</parameter_list> <op:operator pos:line="20" pos:column="109">=&gt;</op:operator> <name><name pos:line="20" pos:column="112">timerMock</name><op:operator pos:line="20" pos:column="121">.</op:operator><name pos:line="20" pos:column="122">Object</name></name></lambda></expr></argument>, <argument><expr><lambda><parameter_list pos:line="20" pos:column="130">()</parameter_list><op:operator pos:line="20" pos:column="132">=&gt;</op:operator><name><name pos:line="20" pos:column="134">RuntimePolicy</name><op:operator pos:line="20" pos:column="147">.</op:operator><name pos:line="20" pos:column="148">On</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="22" pos:column="13">Assert</name><op:operator pos:line="22" pos:column="19">.</op:operator><name pos:line="22" pos:column="20">NotNull</name></name><argument_list pos:line="22" pos:column="27">(<argument><expr><name pos:line="22" pos:column="28">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="23" pos:column="13">Assert</name><op:operator pos:line="23" pos:column="19">.</op:operator><name pos:line="23" pos:column="20">Equal</name></name><argument_list pos:line="23" pos:column="25">(<argument><expr><name><name pos:line="23" pos:column="26">loggerMock</name><op:operator pos:line="23" pos:column="36">.</op:operator><name pos:line="23" pos:column="37">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="45">context</name><op:operator pos:line="23" pos:column="52">.</op:operator><name pos:line="23" pos:column="53">Logger</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="24" pos:column="13">Assert</name><op:operator pos:line="24" pos:column="19">.</op:operator><name pos:line="24" pos:column="20">Equal</name></name><argument_list pos:line="24" pos:column="25">(<argument><expr><name><name pos:line="24" pos:column="26">factoryMock</name><op:operator pos:line="24" pos:column="37">.</op:operator><name pos:line="24" pos:column="38">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="46">context</name><op:operator pos:line="24" pos:column="53">.</op:operator><name pos:line="24" pos:column="54">ProxyFactory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="25" pos:column="13">Assert</name><op:operator pos:line="25" pos:column="19">.</op:operator><name pos:line="25" pos:column="20">Equal</name></name><argument_list pos:line="25" pos:column="25">(<argument><expr><name><name pos:line="25" pos:column="26">brokerMock</name><op:operator pos:line="25" pos:column="36">.</op:operator><name pos:line="25" pos:column="37">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="45">context</name><op:operator pos:line="25" pos:column="52">.</op:operator><name pos:line="25" pos:column="53">MessageBroker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="26" pos:column="13">Assert</name><op:operator pos:line="26" pos:column="19">.</op:operator><name pos:line="26" pos:column="20">Equal</name></name><argument_list pos:line="26" pos:column="25">(<argument><expr><name><name pos:line="26" pos:column="26">timerMock</name><op:operator pos:line="26" pos:column="35">.</op:operator><name pos:line="26" pos:column="36">Object</name></name></expr></argument>, <argument><expr><call><name><name pos:line="26" pos:column="44">context</name><op:operator pos:line="26" pos:column="51">.</op:operator><name pos:line="26" pos:column="52">TimerStrategy</name></name><argument_list pos:line="26" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="29" pos:column="9">[<expr><name pos:line="29" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="30" pos:column="9">public</specifier> <name pos:line="30" pos:column="16">void</name></type> <name pos:line="30" pos:column="21">ThrowExceptionOnConstructWithNullLogger</name><parameter_list pos:line="30" pos:column="60">()</parameter_list>
        <block pos:line="31" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="32" pos:column="13">var</name></type> <name pos:line="32" pos:column="17">loggerMock</name> <init pos:line="32" pos:column="28">= <expr><op:operator pos:line="32" pos:column="30">new</op:operator> <call><name><name pos:line="32" pos:column="34">Mock</name><argument_list pos:line="32" pos:column="38">&lt;<argument><name pos:line="32" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="32" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="33" pos:column="13">var</name></type> <name pos:line="33" pos:column="17">factoryMock</name> <init pos:line="33" pos:column="29">= <expr><op:operator pos:line="33" pos:column="31">new</op:operator> <call><name><name pos:line="33" pos:column="35">Mock</name><argument_list pos:line="33" pos:column="39">&lt;<argument><name pos:line="33" pos:column="40">IProxyFactory</name></argument>&gt;</argument_list></name><argument_list pos:line="33" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="34" pos:column="13">var</name></type> <name pos:line="34" pos:column="17">brokerMock</name> <init pos:line="34" pos:column="28">= <expr><op:operator pos:line="34" pos:column="30">new</op:operator> <call><name><name pos:line="34" pos:column="34">Mock</name><argument_list pos:line="34" pos:column="38">&lt;<argument><name pos:line="34" pos:column="39">IMessageBroker</name></argument>&gt;</argument_list></name><argument_list pos:line="34" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="35" pos:column="13">var</name></type> <name pos:line="35" pos:column="17">timerMock</name> <init pos:line="35" pos:column="27">= <expr><op:operator pos:line="35" pos:column="29">new</op:operator> <call><name><name pos:line="35" pos:column="33">Mock</name><argument_list pos:line="35" pos:column="37">&lt;<argument><name pos:line="35" pos:column="38">IExecutionTimer</name></argument>&gt;</argument_list></name><argument_list pos:line="35" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="37" pos:column="13">Assert</name><op:operator pos:line="37" pos:column="19">.</op:operator><name><name pos:line="37" pos:column="20">Throws</name><argument_list pos:line="37" pos:column="26">&lt;<argument><name pos:line="37" pos:column="27">ArgumentNullException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="37" pos:column="49">(<argument><expr><lambda><parameter_list pos:line="37" pos:column="50">()</parameter_list> <op:operator pos:line="37" pos:column="53">=&gt;</op:operator> <op:operator pos:line="37" pos:column="56">new</op:operator> <call><name pos:line="37" pos:column="60">InspectorContext</name><argument_list pos:line="37" pos:column="76">(<argument><expr><name pos:line="37" pos:column="77">null</name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="83">factoryMock</name><op:operator pos:line="37" pos:column="94">.</op:operator><name pos:line="37" pos:column="95">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="103">brokerMock</name><op:operator pos:line="37" pos:column="113">.</op:operator><name pos:line="37" pos:column="114">Object</name></name></expr></argument>, <argument><expr><lambda><parameter_list pos:line="37" pos:column="122">()</parameter_list> <op:operator pos:line="37" pos:column="125">=&gt;</op:operator> <name><name pos:line="37" pos:column="128">timerMock</name><op:operator pos:line="37" pos:column="137">.</op:operator><name pos:line="37" pos:column="138">Object</name></name></lambda></expr></argument>, <argument><expr><lambda><parameter_list pos:line="37" pos:column="146">()</parameter_list> <op:operator pos:line="37" pos:column="149">=&gt;</op:operator> <name><name pos:line="37" pos:column="152">RuntimePolicy</name><op:operator pos:line="37" pos:column="165">.</op:operator><name pos:line="37" pos:column="166">On</name></name></lambda></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="40" pos:column="9">[<expr><name pos:line="40" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="41" pos:column="9">public</specifier> <name pos:line="41" pos:column="16">void</name></type> <name pos:line="41" pos:column="21">ThrowExceptionOnConstructWithNullProxyFactory</name><parameter_list pos:line="41" pos:column="66">()</parameter_list>
        <block pos:line="42" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="43" pos:column="13">var</name></type> <name pos:line="43" pos:column="17">loggerMock</name> <init pos:line="43" pos:column="28">= <expr><op:operator pos:line="43" pos:column="30">new</op:operator> <call><name><name pos:line="43" pos:column="34">Mock</name><argument_list pos:line="43" pos:column="38">&lt;<argument><name pos:line="43" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="43" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="44" pos:column="13">var</name></type> <name pos:line="44" pos:column="17">factoryMock</name> <init pos:line="44" pos:column="29">= <expr><op:operator pos:line="44" pos:column="31">new</op:operator> <call><name><name pos:line="44" pos:column="35">Mock</name><argument_list pos:line="44" pos:column="39">&lt;<argument><name pos:line="44" pos:column="40">IProxyFactory</name></argument>&gt;</argument_list></name><argument_list pos:line="44" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="45" pos:column="13">var</name></type> <name pos:line="45" pos:column="17">brokerMock</name> <init pos:line="45" pos:column="28">= <expr><op:operator pos:line="45" pos:column="30">new</op:operator> <call><name><name pos:line="45" pos:column="34">Mock</name><argument_list pos:line="45" pos:column="38">&lt;<argument><name pos:line="45" pos:column="39">IMessageBroker</name></argument>&gt;</argument_list></name><argument_list pos:line="45" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="46" pos:column="13">var</name></type> <name pos:line="46" pos:column="17">timerMock</name> <init pos:line="46" pos:column="27">= <expr><op:operator pos:line="46" pos:column="29">new</op:operator> <call><name><name pos:line="46" pos:column="33">Mock</name><argument_list pos:line="46" pos:column="37">&lt;<argument><name pos:line="46" pos:column="38">IExecutionTimer</name></argument>&gt;</argument_list></name><argument_list pos:line="46" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="48" pos:column="13">Assert</name><op:operator pos:line="48" pos:column="19">.</op:operator><name><name pos:line="48" pos:column="20">Throws</name><argument_list pos:line="48" pos:column="26">&lt;<argument><name pos:line="48" pos:column="27">ArgumentNullException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="48" pos:column="49">(<argument><expr><lambda><parameter_list pos:line="48" pos:column="50">()</parameter_list> <op:operator pos:line="48" pos:column="53">=&gt;</op:operator> <op:operator pos:line="48" pos:column="56">new</op:operator> <call><name pos:line="48" pos:column="60">InspectorContext</name><argument_list pos:line="48" pos:column="76">(<argument><expr><name><name pos:line="48" pos:column="77">loggerMock</name><op:operator pos:line="48" pos:column="87">.</op:operator><name pos:line="48" pos:column="88">Object</name></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="96">null</name></expr></argument>, <argument><expr><name><name pos:line="48" pos:column="102">brokerMock</name><op:operator pos:line="48" pos:column="112">.</op:operator><name pos:line="48" pos:column="113">Object</name></name></expr></argument>, <argument><expr><lambda><parameter_list pos:line="48" pos:column="121">()</parameter_list> <op:operator pos:line="48" pos:column="124">=&gt;</op:operator> <name><name pos:line="48" pos:column="127">timerMock</name><op:operator pos:line="48" pos:column="136">.</op:operator><name pos:line="48" pos:column="137">Object</name></name></lambda></expr></argument>, <argument><expr><lambda><parameter_list pos:line="48" pos:column="145">()</parameter_list> <op:operator pos:line="48" pos:column="148">=&gt;</op:operator> <name><name pos:line="48" pos:column="151">RuntimePolicy</name><op:operator pos:line="48" pos:column="164">.</op:operator><name pos:line="48" pos:column="165">On</name></name></lambda></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="51" pos:column="9">[<expr><name pos:line="51" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="52" pos:column="9">public</specifier> <name pos:line="52" pos:column="16">void</name></type> <name pos:line="52" pos:column="21">ThrowExceptionOnConstructWithNullMessageBroker</name><parameter_list pos:line="52" pos:column="67">()</parameter_list>
        <block pos:line="53" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="54" pos:column="13">var</name></type> <name pos:line="54" pos:column="17">loggerMock</name> <init pos:line="54" pos:column="28">= <expr><op:operator pos:line="54" pos:column="30">new</op:operator> <call><name><name pos:line="54" pos:column="34">Mock</name><argument_list pos:line="54" pos:column="38">&lt;<argument><name pos:line="54" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="54" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="55" pos:column="13">var</name></type> <name pos:line="55" pos:column="17">factoryMock</name> <init pos:line="55" pos:column="29">= <expr><op:operator pos:line="55" pos:column="31">new</op:operator> <call><name><name pos:line="55" pos:column="35">Mock</name><argument_list pos:line="55" pos:column="39">&lt;<argument><name pos:line="55" pos:column="40">IProxyFactory</name></argument>&gt;</argument_list></name><argument_list pos:line="55" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="56" pos:column="13">var</name></type> <name pos:line="56" pos:column="17">brokerMock</name> <init pos:line="56" pos:column="28">= <expr><op:operator pos:line="56" pos:column="30">new</op:operator> <call><name><name pos:line="56" pos:column="34">Mock</name><argument_list pos:line="56" pos:column="38">&lt;<argument><name pos:line="56" pos:column="39">IMessageBroker</name></argument>&gt;</argument_list></name><argument_list pos:line="56" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="57" pos:column="13">var</name></type> <name pos:line="57" pos:column="17">timerMock</name> <init pos:line="57" pos:column="27">= <expr><op:operator pos:line="57" pos:column="29">new</op:operator> <call><name><name pos:line="57" pos:column="33">Mock</name><argument_list pos:line="57" pos:column="37">&lt;<argument><name pos:line="57" pos:column="38">IExecutionTimer</name></argument>&gt;</argument_list></name><argument_list pos:line="57" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="59" pos:column="13">Assert</name><op:operator pos:line="59" pos:column="19">.</op:operator><name><name pos:line="59" pos:column="20">Throws</name><argument_list pos:line="59" pos:column="26">&lt;<argument><name pos:line="59" pos:column="27">ArgumentNullException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="59" pos:column="49">(<argument><expr><lambda><parameter_list pos:line="59" pos:column="50">()</parameter_list> <op:operator pos:line="59" pos:column="53">=&gt;</op:operator> <op:operator pos:line="59" pos:column="56">new</op:operator> <call><name pos:line="59" pos:column="60">InspectorContext</name><argument_list pos:line="59" pos:column="76">(<argument><expr><name><name pos:line="59" pos:column="77">loggerMock</name><op:operator pos:line="59" pos:column="87">.</op:operator><name pos:line="59" pos:column="88">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="59" pos:column="96">factoryMock</name><op:operator pos:line="59" pos:column="107">.</op:operator><name pos:line="59" pos:column="108">Object</name></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="116">null</name></expr></argument>, <argument><expr><lambda><parameter_list pos:line="59" pos:column="122">()</parameter_list> <op:operator pos:line="59" pos:column="125">=&gt;</op:operator> <name><name pos:line="59" pos:column="128">timerMock</name><op:operator pos:line="59" pos:column="137">.</op:operator><name pos:line="59" pos:column="138">Object</name></name></lambda></expr></argument>, <argument><expr><lambda><parameter_list pos:line="59" pos:column="146">()</parameter_list> <op:operator pos:line="59" pos:column="149">=&gt;</op:operator> <name><name pos:line="59" pos:column="152">RuntimePolicy</name><op:operator pos:line="59" pos:column="165">.</op:operator><name pos:line="59" pos:column="166">On</name></name></lambda></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="62" pos:column="9">[<expr><name pos:line="62" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="63" pos:column="9">public</specifier> <name pos:line="63" pos:column="16">void</name></type> <name pos:line="63" pos:column="21">ThrowExceptionOnConstructWithNullTimerStrategy</name><parameter_list pos:line="63" pos:column="67">()</parameter_list>
        <block pos:line="64" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="65" pos:column="13">var</name></type> <name pos:line="65" pos:column="17">loggerMock</name> <init pos:line="65" pos:column="28">= <expr><op:operator pos:line="65" pos:column="30">new</op:operator> <call><name><name pos:line="65" pos:column="34">Mock</name><argument_list pos:line="65" pos:column="38">&lt;<argument><name pos:line="65" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="65" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="66" pos:column="13">var</name></type> <name pos:line="66" pos:column="17">factoryMock</name> <init pos:line="66" pos:column="29">= <expr><op:operator pos:line="66" pos:column="31">new</op:operator> <call><name><name pos:line="66" pos:column="35">Mock</name><argument_list pos:line="66" pos:column="39">&lt;<argument><name pos:line="66" pos:column="40">IProxyFactory</name></argument>&gt;</argument_list></name><argument_list pos:line="66" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="67" pos:column="13">var</name></type> <name pos:line="67" pos:column="17">brokerMock</name> <init pos:line="67" pos:column="28">= <expr><op:operator pos:line="67" pos:column="30">new</op:operator> <call><name><name pos:line="67" pos:column="34">Mock</name><argument_list pos:line="67" pos:column="38">&lt;<argument><name pos:line="67" pos:column="39">IMessageBroker</name></argument>&gt;</argument_list></name><argument_list pos:line="67" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="68" pos:column="13">var</name></type> <name pos:line="68" pos:column="17">timerMock</name> <init pos:line="68" pos:column="27">= <expr><op:operator pos:line="68" pos:column="29">new</op:operator> <call><name><name pos:line="68" pos:column="33">Mock</name><argument_list pos:line="68" pos:column="37">&lt;<argument><name pos:line="68" pos:column="38">IExecutionTimer</name></argument>&gt;</argument_list></name><argument_list pos:line="68" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="70" pos:column="13">Assert</name><op:operator pos:line="70" pos:column="19">.</op:operator><name><name pos:line="70" pos:column="20">Throws</name><argument_list pos:line="70" pos:column="26">&lt;<argument><name pos:line="70" pos:column="27">ArgumentNullException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="70" pos:column="49">(<argument><expr><lambda><parameter_list pos:line="70" pos:column="50">()</parameter_list> <op:operator pos:line="70" pos:column="53">=&gt;</op:operator> <op:operator pos:line="70" pos:column="56">new</op:operator> <call><name pos:line="70" pos:column="60">InspectorContext</name><argument_list pos:line="70" pos:column="76">(<argument><expr><name><name pos:line="70" pos:column="77">loggerMock</name><op:operator pos:line="70" pos:column="87">.</op:operator><name pos:line="70" pos:column="88">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="70" pos:column="96">factoryMock</name><op:operator pos:line="70" pos:column="107">.</op:operator><name pos:line="70" pos:column="108">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="70" pos:column="116">brokerMock</name><op:operator pos:line="70" pos:column="126">.</op:operator><name pos:line="70" pos:column="127">Object</name></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="135">null</name></expr></argument>, <argument><expr><lambda><parameter_list pos:line="70" pos:column="141">()</parameter_list> <op:operator pos:line="70" pos:column="144">=&gt;</op:operator> <name><name pos:line="70" pos:column="147">RuntimePolicy</name><op:operator pos:line="70" pos:column="160">.</op:operator><name pos:line="70" pos:column="161">On</name></name></lambda></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="73" pos:column="9">[<expr><name pos:line="73" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="74" pos:column="9">public</specifier> <name pos:line="74" pos:column="16">void</name></type> <name pos:line="74" pos:column="21">ThrowExceptionOnConstructWithNullRuntimePolicyStrategy</name><parameter_list pos:line="74" pos:column="75">()</parameter_list>
        <block pos:line="75" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="76" pos:column="13">var</name></type> <name pos:line="76" pos:column="17">loggerMock</name> <init pos:line="76" pos:column="28">= <expr><op:operator pos:line="76" pos:column="30">new</op:operator> <call><name><name pos:line="76" pos:column="34">Mock</name><argument_list pos:line="76" pos:column="38">&lt;<argument><name pos:line="76" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="76" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="77" pos:column="13">var</name></type> <name pos:line="77" pos:column="17">factoryMock</name> <init pos:line="77" pos:column="29">= <expr><op:operator pos:line="77" pos:column="31">new</op:operator> <call><name><name pos:line="77" pos:column="35">Mock</name><argument_list pos:line="77" pos:column="39">&lt;<argument><name pos:line="77" pos:column="40">IProxyFactory</name></argument>&gt;</argument_list></name><argument_list pos:line="77" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="78" pos:column="13">var</name></type> <name pos:line="78" pos:column="17">brokerMock</name> <init pos:line="78" pos:column="28">= <expr><op:operator pos:line="78" pos:column="30">new</op:operator> <call><name><name pos:line="78" pos:column="34">Mock</name><argument_list pos:line="78" pos:column="38">&lt;<argument><name pos:line="78" pos:column="39">IMessageBroker</name></argument>&gt;</argument_list></name><argument_list pos:line="78" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="79" pos:column="13">var</name></type> <name pos:line="79" pos:column="17">timerMock</name> <init pos:line="79" pos:column="27">= <expr><op:operator pos:line="79" pos:column="29">new</op:operator> <call><name><name pos:line="79" pos:column="33">Mock</name><argument_list pos:line="79" pos:column="37">&lt;<argument><name pos:line="79" pos:column="38">IExecutionTimer</name></argument>&gt;</argument_list></name><argument_list pos:line="79" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="81" pos:column="13">Assert</name><op:operator pos:line="81" pos:column="19">.</op:operator><name><name pos:line="81" pos:column="20">Throws</name><argument_list pos:line="81" pos:column="26">&lt;<argument><name pos:line="81" pos:column="27">ArgumentNullException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="81" pos:column="49">(<argument><expr><lambda><parameter_list pos:line="81" pos:column="50">()</parameter_list> <op:operator pos:line="81" pos:column="53">=&gt;</op:operator> <op:operator pos:line="81" pos:column="56">new</op:operator> <call><name pos:line="81" pos:column="60">InspectorContext</name><argument_list pos:line="81" pos:column="76">(<argument><expr><name><name pos:line="81" pos:column="77">loggerMock</name><op:operator pos:line="81" pos:column="87">.</op:operator><name pos:line="81" pos:column="88">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="81" pos:column="96">factoryMock</name><op:operator pos:line="81" pos:column="107">.</op:operator><name pos:line="81" pos:column="108">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="81" pos:column="116">brokerMock</name><op:operator pos:line="81" pos:column="126">.</op:operator><name pos:line="81" pos:column="127">Object</name></name></expr></argument>, <argument><expr><lambda><parameter_list pos:line="81" pos:column="135">()</parameter_list> <op:operator pos:line="81" pos:column="138">=&gt;</op:operator> <name><name pos:line="81" pos:column="141">timerMock</name><op:operator pos:line="81" pos:column="150">.</op:operator><name pos:line="81" pos:column="151">Object</name></name></lambda></expr></argument>, <argument><expr><name pos:line="81" pos:column="159">null</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
