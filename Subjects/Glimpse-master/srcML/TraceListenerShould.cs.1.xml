<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Core\TraceListenerShould.cs" pos:tabs="8"><decl_stmt><decl><type><name pos:line="1" pos:column="1">﻿using</name></type> <name><name pos:line="1" pos:column="10">System</name><op:operator pos:line="1" pos:column="16">.</op:operator><name pos:line="1" pos:column="17">Diagnostics</name></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name pos:line="2" pos:column="1">﻿using</name></type> <name><name pos:line="2" pos:column="10">Glimpse</name><op:operator pos:line="2" pos:column="17">.</op:operator><name pos:line="2" pos:column="18">Core</name><op:operator pos:line="2" pos:column="22">.</op:operator><name pos:line="2" pos:column="23">Message</name></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name pos:line="3" pos:column="1">﻿using</name></type> <name><name pos:line="3" pos:column="10">Glimpse</name><op:operator pos:line="3" pos:column="17">.</op:operator><name pos:line="3" pos:column="18">Core</name><op:operator pos:line="3" pos:column="22">.</op:operator><name pos:line="3" pos:column="23">Extensibility</name></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name pos:line="4" pos:column="1">﻿using</name></type> <name><name pos:line="4" pos:column="10">Glimpse</name><op:operator pos:line="4" pos:column="17">.</op:operator><name pos:line="4" pos:column="18">Core</name><op:operator pos:line="4" pos:column="22">.</op:operator><name pos:line="4" pos:column="23">Tab</name><op:operator pos:line="4" pos:column="26">.</op:operator><name pos:line="4" pos:column="27">Assist</name></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name pos:line="5" pos:column="1">﻿using</name></type> <name><name pos:line="5" pos:column="10">Glimpse</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">Test</name><op:operator pos:line="5" pos:column="22">.</op:operator><name pos:line="5" pos:column="23">Common</name></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name pos:line="6" pos:column="1">﻿using</name></type> <name pos:line="6" pos:column="10">Moq</name></decl>;</decl_stmt>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Xunit</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">Extensions</name></name>;</using>
<decl_stmt><decl><type><name pos:line="8" pos:column="1">﻿using</name></type> <name pos:line="8" pos:column="10">TraceListener</name> <init pos:line="8" pos:column="24">= <expr><name><name pos:line="8" pos:column="26">Glimpse</name><op:operator pos:line="8" pos:column="33">.</op:operator><name pos:line="8" pos:column="34">Core</name><op:operator pos:line="8" pos:column="38">.</op:operator><name pos:line="8" pos:column="39">TraceListener</name></name></expr></init></decl>;</decl_stmt>

<namespace pos:line="10" pos:column="1">namespace <name><name pos:line="10" pos:column="11">Glimpse</name><op:operator pos:line="10" pos:column="18">.</op:operator><name pos:line="10" pos:column="19">Test</name><op:operator pos:line="10" pos:column="23">.</op:operator><name pos:line="10" pos:column="24">Core</name></name>
<block pos:line="11" pos:column="1">{
    <class><specifier pos:line="12" pos:column="5">public</specifier> class <name pos:line="12" pos:column="18">TraceListenerShould</name>
    <block pos:line="13" pos:column="5">{
        <function><type><attribute pos:line="14" pos:column="9">[<expr><name pos:line="14" pos:column="10">Theory</name></expr><op:operator pos:line="14" pos:column="16">,</op:operator> <expr><name pos:line="14" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="15" pos:column="9">public</specifier> <name pos:line="15" pos:column="16">void</name></type> <name pos:line="15" pos:column="21">WriteObject</name><parameter_list pos:line="15" pos:column="32">(<param><decl><type><name pos:line="15" pos:column="33">TraceListener</name></type> <name pos:line="15" pos:column="47">sut</name></decl></param>, <param><decl><type><name pos:line="15" pos:column="52">ITabSetupContext</name></type> <name pos:line="15" pos:column="69">context</name></decl></param>)</parameter_list>
        <block pos:line="16" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="17" pos:column="13">sut</name><op:operator pos:line="17" pos:column="16">.</op:operator><name pos:line="17" pos:column="17">Write</name></name><argument_list pos:line="17" pos:column="22">(<argument><expr><op:operator pos:line="17" pos:column="23">new</op:operator> <call><name pos:line="17" pos:column="27">TestClass</name><argument_list pos:line="17" pos:column="36">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="19" pos:column="13">sut</name><op:operator pos:line="19" pos:column="16">.</op:operator><name pos:line="19" pos:column="17">MessageBroker</name><op:operator pos:line="19" pos:column="30">.</op:operator><name pos:line="19" pos:column="31">Verify</name></name><argument_list pos:line="19" pos:column="37">(<argument><expr><lambda><name pos:line="19" pos:column="38">mb</name> <op:operator pos:line="19" pos:column="41">=&gt;</op:operator> <call><name><name pos:line="19" pos:column="44">mb</name><op:operator pos:line="19" pos:column="46">.</op:operator><name pos:line="19" pos:column="47">Publish</name></name><argument_list pos:line="19" pos:column="54">(<argument><expr><call><name><name pos:line="19" pos:column="55">It</name><op:operator pos:line="19" pos:column="57">.</op:operator><name><name pos:line="19" pos:column="58">Is</name><argument_list pos:line="19" pos:column="60">&lt;<argument><name pos:line="19" pos:column="61">TraceMessage</name></argument>&gt;</argument_list></name></name><argument_list pos:line="19" pos:column="74">(<argument><expr><lambda><name pos:line="19" pos:column="75">m</name> <op:operator pos:line="19" pos:column="77">=&gt;</op:operator> <call><name><name pos:line="19" pos:column="80">m</name><op:operator pos:line="19" pos:column="81">.</op:operator><name pos:line="19" pos:column="82">Message</name><op:operator pos:line="19" pos:column="89">.</op:operator><name pos:line="19" pos:column="90">Equals</name></name><argument_list pos:line="19" pos:column="96">(<argument><expr><lit:literal type="string" pos:line="19" pos:column="97">"Message"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="19" pos:column="108">&amp;&amp;</op:operator> <name><name pos:line="19" pos:column="111">m</name><op:operator pos:line="19" pos:column="112">.</op:operator><name pos:line="19" pos:column="113">Category</name></name> <op:operator pos:line="19" pos:column="122">==</op:operator> <name pos:line="19" pos:column="125">null</name></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="22" pos:column="9">[<expr><name pos:line="22" pos:column="10">Theory</name></expr><op:operator pos:line="22" pos:column="16">,</op:operator> <expr><name pos:line="22" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="23" pos:column="9">public</specifier> <name pos:line="23" pos:column="16">void</name></type> <name pos:line="23" pos:column="21">WriteString</name><parameter_list pos:line="23" pos:column="32">(<param><decl><type><name pos:line="23" pos:column="33">TraceListener</name></type> <name pos:line="23" pos:column="47">sut</name></decl></param>, <param><decl><type><name pos:line="23" pos:column="52">ITabSetupContext</name></type> <name pos:line="23" pos:column="69">context</name></decl></param>)</parameter_list>
        <block pos:line="24" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="25" pos:column="13">sut</name><op:operator pos:line="25" pos:column="16">.</op:operator><name pos:line="25" pos:column="17">Write</name></name><argument_list pos:line="25" pos:column="22">(<argument><expr><lit:literal type="string" pos:line="25" pos:column="23">"Message"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="27" pos:column="13">sut</name><op:operator pos:line="27" pos:column="16">.</op:operator><name pos:line="27" pos:column="17">MessageBroker</name><op:operator pos:line="27" pos:column="30">.</op:operator><name pos:line="27" pos:column="31">Verify</name></name><argument_list pos:line="27" pos:column="37">(<argument><expr><lambda><name pos:line="27" pos:column="38">mb</name> <op:operator pos:line="27" pos:column="41">=&gt;</op:operator> <call><name><name pos:line="27" pos:column="44">mb</name><op:operator pos:line="27" pos:column="46">.</op:operator><name pos:line="27" pos:column="47">Publish</name></name><argument_list pos:line="27" pos:column="54">(<argument><expr><call><name><name pos:line="27" pos:column="55">It</name><op:operator pos:line="27" pos:column="57">.</op:operator><name><name pos:line="27" pos:column="58">Is</name><argument_list pos:line="27" pos:column="60">&lt;<argument><name pos:line="27" pos:column="61">TraceMessage</name></argument>&gt;</argument_list></name></name><argument_list pos:line="27" pos:column="74">(<argument><expr><lambda><name pos:line="27" pos:column="75">m</name> <op:operator pos:line="27" pos:column="77">=&gt;</op:operator> <call><name><name pos:line="27" pos:column="80">m</name><op:operator pos:line="27" pos:column="81">.</op:operator><name pos:line="27" pos:column="82">Message</name><op:operator pos:line="27" pos:column="89">.</op:operator><name pos:line="27" pos:column="90">Equals</name></name><argument_list pos:line="27" pos:column="96">(<argument><expr><lit:literal type="string" pos:line="27" pos:column="97">"Message"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="27" pos:column="108">&amp;&amp;</op:operator> <name><name pos:line="27" pos:column="111">m</name><op:operator pos:line="27" pos:column="112">.</op:operator><name pos:line="27" pos:column="113">Category</name></name> <op:operator pos:line="27" pos:column="122">==</op:operator> <name pos:line="27" pos:column="125">null</name></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="30" pos:column="9">[<expr><name pos:line="30" pos:column="10">Theory</name></expr><op:operator pos:line="30" pos:column="16">,</op:operator> <expr><name pos:line="30" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="31" pos:column="9">public</specifier> <name pos:line="31" pos:column="16">void</name></type> <name pos:line="31" pos:column="21">WriteObjectCategory</name><parameter_list pos:line="31" pos:column="40">(<param><decl><type><name pos:line="31" pos:column="41">TraceListener</name></type> <name pos:line="31" pos:column="55">sut</name></decl></param>, <param><decl><type><name pos:line="31" pos:column="60">ITabSetupContext</name></type> <name pos:line="31" pos:column="77">context</name></decl></param>)</parameter_list>
        <block pos:line="32" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="33" pos:column="13">sut</name><op:operator pos:line="33" pos:column="16">.</op:operator><name pos:line="33" pos:column="17">Write</name></name><argument_list pos:line="33" pos:column="22">(<argument><expr><op:operator pos:line="33" pos:column="23">new</op:operator> <call><name pos:line="33" pos:column="27">TestClass</name><argument_list pos:line="33" pos:column="36">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="33" pos:column="40">"Warn"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="35" pos:column="13">sut</name><op:operator pos:line="35" pos:column="16">.</op:operator><name pos:line="35" pos:column="17">MessageBroker</name><op:operator pos:line="35" pos:column="30">.</op:operator><name pos:line="35" pos:column="31">Verify</name></name><argument_list pos:line="35" pos:column="37">(<argument><expr><lambda><name pos:line="35" pos:column="38">mb</name> <op:operator pos:line="35" pos:column="41">=&gt;</op:operator> <call><name><name pos:line="35" pos:column="44">mb</name><op:operator pos:line="35" pos:column="46">.</op:operator><name pos:line="35" pos:column="47">Publish</name></name><argument_list pos:line="35" pos:column="54">(<argument><expr><call><name><name pos:line="35" pos:column="55">It</name><op:operator pos:line="35" pos:column="57">.</op:operator><name><name pos:line="35" pos:column="58">Is</name><argument_list pos:line="35" pos:column="60">&lt;<argument><name pos:line="35" pos:column="61">TraceMessage</name></argument>&gt;</argument_list></name></name><argument_list pos:line="35" pos:column="74">(<argument><expr><lambda><name pos:line="35" pos:column="75">m</name> <op:operator pos:line="35" pos:column="77">=&gt;</op:operator> <call><name><name pos:line="35" pos:column="80">m</name><op:operator pos:line="35" pos:column="81">.</op:operator><name pos:line="35" pos:column="82">Message</name><op:operator pos:line="35" pos:column="89">.</op:operator><name pos:line="35" pos:column="90">Equals</name></name><argument_list pos:line="35" pos:column="96">(<argument><expr><lit:literal type="string" pos:line="35" pos:column="97">"Warn: Message"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="35" pos:column="114">&amp;&amp;</op:operator> <name><name pos:line="35" pos:column="117">m</name><op:operator pos:line="35" pos:column="118">.</op:operator><name pos:line="35" pos:column="119">Category</name></name> <op:operator pos:line="35" pos:column="128">==</op:operator> <name><name pos:line="35" pos:column="131">FormattingKeywords</name><op:operator pos:line="35" pos:column="149">.</op:operator><name pos:line="35" pos:column="150">Warn</name></name></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="38" pos:column="9">[<expr><name pos:line="38" pos:column="10">Theory</name></expr><op:operator pos:line="38" pos:column="16">,</op:operator> <expr><name pos:line="38" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="39" pos:column="9">public</specifier> <name pos:line="39" pos:column="16">void</name></type> <name pos:line="39" pos:column="21">WriteStringCategory</name><parameter_list pos:line="39" pos:column="40">(<param><decl><type><name pos:line="39" pos:column="41">TraceListener</name></type> <name pos:line="39" pos:column="55">sut</name></decl></param>, <param><decl><type><name pos:line="39" pos:column="60">ITabSetupContext</name></type> <name pos:line="39" pos:column="77">context</name></decl></param>)</parameter_list>
        <block pos:line="40" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="41" pos:column="13">sut</name><op:operator pos:line="41" pos:column="16">.</op:operator><name pos:line="41" pos:column="17">Write</name></name><argument_list pos:line="41" pos:column="22">(<argument><expr><lit:literal type="string" pos:line="41" pos:column="23">"Message"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="41" pos:column="34">"Info"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="43" pos:column="13">sut</name><op:operator pos:line="43" pos:column="16">.</op:operator><name pos:line="43" pos:column="17">MessageBroker</name><op:operator pos:line="43" pos:column="30">.</op:operator><name pos:line="43" pos:column="31">Verify</name></name><argument_list pos:line="43" pos:column="37">(<argument><expr><lambda><name pos:line="43" pos:column="38">mb</name> <op:operator pos:line="43" pos:column="41">=&gt;</op:operator> <call><name><name pos:line="43" pos:column="44">mb</name><op:operator pos:line="43" pos:column="46">.</op:operator><name pos:line="43" pos:column="47">Publish</name></name><argument_list pos:line="43" pos:column="54">(<argument><expr><call><name><name pos:line="43" pos:column="55">It</name><op:operator pos:line="43" pos:column="57">.</op:operator><name><name pos:line="43" pos:column="58">Is</name><argument_list pos:line="43" pos:column="60">&lt;<argument><name pos:line="43" pos:column="61">TraceMessage</name></argument>&gt;</argument_list></name></name><argument_list pos:line="43" pos:column="74">(<argument><expr><lambda><name pos:line="43" pos:column="75">m</name> <op:operator pos:line="43" pos:column="77">=&gt;</op:operator> <call><name><name pos:line="43" pos:column="80">m</name><op:operator pos:line="43" pos:column="81">.</op:operator><name pos:line="43" pos:column="82">Message</name><op:operator pos:line="43" pos:column="89">.</op:operator><name pos:line="43" pos:column="90">Equals</name></name><argument_list pos:line="43" pos:column="96">(<argument><expr><lit:literal type="string" pos:line="43" pos:column="97">"Info: Message"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="43" pos:column="114">&amp;&amp;</op:operator> <name><name pos:line="43" pos:column="117">m</name><op:operator pos:line="43" pos:column="118">.</op:operator><name pos:line="43" pos:column="119">Category</name></name> <op:operator pos:line="43" pos:column="128">==</op:operator> <name><name pos:line="43" pos:column="131">FormattingKeywords</name><op:operator pos:line="43" pos:column="149">.</op:operator><name pos:line="43" pos:column="150">Info</name></name></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="46" pos:column="9">[<expr><name pos:line="46" pos:column="10">Theory</name></expr><op:operator pos:line="46" pos:column="16">,</op:operator> <expr><name pos:line="46" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="47" pos:column="9">public</specifier> <name pos:line="47" pos:column="16">void</name></type> <name pos:line="47" pos:column="21">WriteLineObject</name><parameter_list pos:line="47" pos:column="36">(<param><decl><type><name pos:line="47" pos:column="37">TraceListener</name></type> <name pos:line="47" pos:column="51">sut</name></decl></param>, <param><decl><type><name pos:line="47" pos:column="56">ITabSetupContext</name></type> <name pos:line="47" pos:column="73">context</name></decl></param>)</parameter_list>
        <block pos:line="48" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="49" pos:column="13">sut</name><op:operator pos:line="49" pos:column="16">.</op:operator><name pos:line="49" pos:column="17">WriteLine</name></name><argument_list pos:line="49" pos:column="26">(<argument><expr><op:operator pos:line="49" pos:column="27">new</op:operator> <call><name pos:line="49" pos:column="31">TestClass</name><argument_list pos:line="49" pos:column="40">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="51" pos:column="13">sut</name><op:operator pos:line="51" pos:column="16">.</op:operator><name pos:line="51" pos:column="17">MessageBroker</name><op:operator pos:line="51" pos:column="30">.</op:operator><name pos:line="51" pos:column="31">Verify</name></name><argument_list pos:line="51" pos:column="37">(<argument><expr><lambda><name pos:line="51" pos:column="38">mb</name> <op:operator pos:line="51" pos:column="41">=&gt;</op:operator> <call><name><name pos:line="51" pos:column="44">mb</name><op:operator pos:line="51" pos:column="46">.</op:operator><name pos:line="51" pos:column="47">Publish</name></name><argument_list pos:line="51" pos:column="54">(<argument><expr><call><name><name pos:line="51" pos:column="55">It</name><op:operator pos:line="51" pos:column="57">.</op:operator><name><name pos:line="51" pos:column="58">Is</name><argument_list pos:line="51" pos:column="60">&lt;<argument><name pos:line="51" pos:column="61">TraceMessage</name></argument>&gt;</argument_list></name></name><argument_list pos:line="51" pos:column="74">(<argument><expr><lambda><name pos:line="51" pos:column="75">m</name> <op:operator pos:line="51" pos:column="77">=&gt;</op:operator> <call><name><name pos:line="51" pos:column="80">m</name><op:operator pos:line="51" pos:column="81">.</op:operator><name pos:line="51" pos:column="82">Message</name><op:operator pos:line="51" pos:column="89">.</op:operator><name pos:line="51" pos:column="90">Equals</name></name><argument_list pos:line="51" pos:column="96">(<argument><expr><lit:literal type="string" pos:line="51" pos:column="97">"Message"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="51" pos:column="108">&amp;&amp;</op:operator> <name><name pos:line="51" pos:column="111">m</name><op:operator pos:line="51" pos:column="112">.</op:operator><name pos:line="51" pos:column="113">Category</name></name> <op:operator pos:line="51" pos:column="122">==</op:operator> <name pos:line="51" pos:column="125">null</name></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="54" pos:column="9">[<expr><name pos:line="54" pos:column="10">Theory</name></expr><op:operator pos:line="54" pos:column="16">,</op:operator> <expr><name pos:line="54" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="55" pos:column="9">public</specifier> <name pos:line="55" pos:column="16">void</name></type> <name pos:line="55" pos:column="21">WriteLineString</name><parameter_list pos:line="55" pos:column="36">(<param><decl><type><name pos:line="55" pos:column="37">TraceListener</name></type> <name pos:line="55" pos:column="51">sut</name></decl></param>, <param><decl><type><name pos:line="55" pos:column="56">ITabSetupContext</name></type> <name pos:line="55" pos:column="73">context</name></decl></param>)</parameter_list>
        <block pos:line="56" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="57" pos:column="13">sut</name><op:operator pos:line="57" pos:column="16">.</op:operator><name pos:line="57" pos:column="17">WriteLine</name></name><argument_list pos:line="57" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="57" pos:column="27">"Message"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="59" pos:column="13">sut</name><op:operator pos:line="59" pos:column="16">.</op:operator><name pos:line="59" pos:column="17">MessageBroker</name><op:operator pos:line="59" pos:column="30">.</op:operator><name pos:line="59" pos:column="31">Verify</name></name><argument_list pos:line="59" pos:column="37">(<argument><expr><lambda><name pos:line="59" pos:column="38">mb</name> <op:operator pos:line="59" pos:column="41">=&gt;</op:operator> <call><name><name pos:line="59" pos:column="44">mb</name><op:operator pos:line="59" pos:column="46">.</op:operator><name pos:line="59" pos:column="47">Publish</name></name><argument_list pos:line="59" pos:column="54">(<argument><expr><call><name><name pos:line="59" pos:column="55">It</name><op:operator pos:line="59" pos:column="57">.</op:operator><name><name pos:line="59" pos:column="58">Is</name><argument_list pos:line="59" pos:column="60">&lt;<argument><name pos:line="59" pos:column="61">TraceMessage</name></argument>&gt;</argument_list></name></name><argument_list pos:line="59" pos:column="74">(<argument><expr><lambda><name pos:line="59" pos:column="75">m</name> <op:operator pos:line="59" pos:column="77">=&gt;</op:operator> <call><name><name pos:line="59" pos:column="80">m</name><op:operator pos:line="59" pos:column="81">.</op:operator><name pos:line="59" pos:column="82">Message</name><op:operator pos:line="59" pos:column="89">.</op:operator><name pos:line="59" pos:column="90">Equals</name></name><argument_list pos:line="59" pos:column="96">(<argument><expr><lit:literal type="string" pos:line="59" pos:column="97">"Message"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="59" pos:column="108">&amp;&amp;</op:operator> <name><name pos:line="59" pos:column="111">m</name><op:operator pos:line="59" pos:column="112">.</op:operator><name pos:line="59" pos:column="113">Category</name></name> <op:operator pos:line="59" pos:column="122">==</op:operator> <name pos:line="59" pos:column="125">null</name></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="62" pos:column="9">[<expr><name pos:line="62" pos:column="10">Theory</name></expr><op:operator pos:line="62" pos:column="16">,</op:operator> <expr><name pos:line="62" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="63" pos:column="9">public</specifier> <name pos:line="63" pos:column="16">void</name></type> <name pos:line="63" pos:column="21">WriteLineObjectCategory</name><parameter_list pos:line="63" pos:column="44">(<param><decl><type><name pos:line="63" pos:column="45">TraceListener</name></type> <name pos:line="63" pos:column="59">sut</name></decl></param>, <param><decl><type><name pos:line="63" pos:column="64">ITabSetupContext</name></type> <name pos:line="63" pos:column="81">context</name></decl></param>)</parameter_list>
        <block pos:line="64" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="65" pos:column="13">sut</name><op:operator pos:line="65" pos:column="16">.</op:operator><name pos:line="65" pos:column="17">WriteLine</name></name><argument_list pos:line="65" pos:column="26">(<argument><expr><op:operator pos:line="65" pos:column="27">new</op:operator> <call><name pos:line="65" pos:column="31">TestClass</name><argument_list pos:line="65" pos:column="40">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="65" pos:column="44">"Loading"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="67" pos:column="13">sut</name><op:operator pos:line="67" pos:column="16">.</op:operator><name pos:line="67" pos:column="17">MessageBroker</name><op:operator pos:line="67" pos:column="30">.</op:operator><name pos:line="67" pos:column="31">Verify</name></name><argument_list pos:line="67" pos:column="37">(<argument><expr><lambda><name pos:line="67" pos:column="38">mb</name> <op:operator pos:line="67" pos:column="41">=&gt;</op:operator> <call><name><name pos:line="67" pos:column="44">mb</name><op:operator pos:line="67" pos:column="46">.</op:operator><name pos:line="67" pos:column="47">Publish</name></name><argument_list pos:line="67" pos:column="54">(<argument><expr><call><name><name pos:line="67" pos:column="55">It</name><op:operator pos:line="67" pos:column="57">.</op:operator><name><name pos:line="67" pos:column="58">Is</name><argument_list pos:line="67" pos:column="60">&lt;<argument><name pos:line="67" pos:column="61">TraceMessage</name></argument>&gt;</argument_list></name></name><argument_list pos:line="67" pos:column="74">(<argument><expr><lambda><name pos:line="67" pos:column="75">m</name> <op:operator pos:line="67" pos:column="77">=&gt;</op:operator> <call><name><name pos:line="67" pos:column="80">m</name><op:operator pos:line="67" pos:column="81">.</op:operator><name pos:line="67" pos:column="82">Message</name><op:operator pos:line="67" pos:column="89">.</op:operator><name pos:line="67" pos:column="90">Equals</name></name><argument_list pos:line="67" pos:column="96">(<argument><expr><lit:literal type="string" pos:line="67" pos:column="97">"Loading: Message"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="67" pos:column="117">&amp;&amp;</op:operator> <name><name pos:line="67" pos:column="120">m</name><op:operator pos:line="67" pos:column="121">.</op:operator><name pos:line="67" pos:column="122">Category</name></name> <op:operator pos:line="67" pos:column="131">==</op:operator> <name><name pos:line="67" pos:column="134">FormattingKeywords</name><op:operator pos:line="67" pos:column="152">.</op:operator><name pos:line="67" pos:column="153">Loading</name></name></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="70" pos:column="9">[<expr><name pos:line="70" pos:column="10">Theory</name></expr><op:operator pos:line="70" pos:column="16">,</op:operator> <expr><name pos:line="70" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="71" pos:column="9">public</specifier> <name pos:line="71" pos:column="16">void</name></type> <name pos:line="71" pos:column="21">WriteLineStringCategory</name><parameter_list pos:line="71" pos:column="44">(<param><decl><type><name pos:line="71" pos:column="45">TraceListener</name></type> <name pos:line="71" pos:column="59">sut</name></decl></param>, <param><decl><type><name pos:line="71" pos:column="64">ITabSetupContext</name></type> <name pos:line="71" pos:column="81">context</name></decl></param>)</parameter_list>
        <block pos:line="72" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="73" pos:column="13">sut</name><op:operator pos:line="73" pos:column="16">.</op:operator><name pos:line="73" pos:column="17">WriteLine</name></name><argument_list pos:line="73" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="73" pos:column="27">"Message"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="73" pos:column="38">"quiet"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="75" pos:column="13">sut</name><op:operator pos:line="75" pos:column="16">.</op:operator><name pos:line="75" pos:column="17">MessageBroker</name><op:operator pos:line="75" pos:column="30">.</op:operator><name pos:line="75" pos:column="31">Verify</name></name><argument_list pos:line="75" pos:column="37">(<argument><expr><lambda><name pos:line="75" pos:column="38">mb</name> <op:operator pos:line="75" pos:column="41">=&gt;</op:operator> <call><name><name pos:line="75" pos:column="44">mb</name><op:operator pos:line="75" pos:column="46">.</op:operator><name pos:line="75" pos:column="47">Publish</name></name><argument_list pos:line="75" pos:column="54">(<argument><expr><call><name><name pos:line="75" pos:column="55">It</name><op:operator pos:line="75" pos:column="57">.</op:operator><name><name pos:line="75" pos:column="58">Is</name><argument_list pos:line="75" pos:column="60">&lt;<argument><name pos:line="75" pos:column="61">TraceMessage</name></argument>&gt;</argument_list></name></name><argument_list pos:line="75" pos:column="74">(<argument><expr><lambda><name pos:line="75" pos:column="75">m</name> <op:operator pos:line="75" pos:column="77">=&gt;</op:operator> <call><name><name pos:line="75" pos:column="80">m</name><op:operator pos:line="75" pos:column="81">.</op:operator><name pos:line="75" pos:column="82">Message</name><op:operator pos:line="75" pos:column="89">.</op:operator><name pos:line="75" pos:column="90">Equals</name></name><argument_list pos:line="75" pos:column="96">(<argument><expr><lit:literal type="string" pos:line="75" pos:column="97">"quiet: Message"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="75" pos:column="115">&amp;&amp;</op:operator> <name><name pos:line="75" pos:column="118">m</name><op:operator pos:line="75" pos:column="119">.</op:operator><name pos:line="75" pos:column="120">Category</name></name> <op:operator pos:line="75" pos:column="129">==</op:operator> <name><name pos:line="75" pos:column="132">FormattingKeywords</name><op:operator pos:line="75" pos:column="150">.</op:operator><name pos:line="75" pos:column="151">Quiet</name></name></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="78" pos:column="9">[<expr><name pos:line="78" pos:column="10">Theory</name></expr><op:operator pos:line="78" pos:column="16">,</op:operator> <expr><name pos:line="78" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="79" pos:column="9">public</specifier> <name pos:line="79" pos:column="16">void</name></type> <name pos:line="79" pos:column="21">FailString</name><parameter_list pos:line="79" pos:column="31">(<param><decl><type><name pos:line="79" pos:column="32">TraceListener</name></type> <name pos:line="79" pos:column="46">sut</name></decl></param>, <param><decl><type><name pos:line="79" pos:column="51">ITabSetupContext</name></type> <name pos:line="79" pos:column="68">context</name></decl></param>)</parameter_list>
        <block pos:line="80" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="81" pos:column="13">sut</name><op:operator pos:line="81" pos:column="16">.</op:operator><name pos:line="81" pos:column="17">Fail</name></name><argument_list pos:line="81" pos:column="21">(<argument><expr><lit:literal type="string" pos:line="81" pos:column="22">"Message"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="83" pos:column="13">sut</name><op:operator pos:line="83" pos:column="16">.</op:operator><name pos:line="83" pos:column="17">MessageBroker</name><op:operator pos:line="83" pos:column="30">.</op:operator><name pos:line="83" pos:column="31">Verify</name></name><argument_list pos:line="83" pos:column="37">(<argument><expr><lambda><name pos:line="83" pos:column="38">mb</name> <op:operator pos:line="83" pos:column="41">=&gt;</op:operator> <call><name><name pos:line="83" pos:column="44">mb</name><op:operator pos:line="83" pos:column="46">.</op:operator><name pos:line="83" pos:column="47">Publish</name></name><argument_list pos:line="83" pos:column="54">(<argument><expr><call><name><name pos:line="83" pos:column="55">It</name><op:operator pos:line="83" pos:column="57">.</op:operator><name><name pos:line="83" pos:column="58">Is</name><argument_list pos:line="83" pos:column="60">&lt;<argument><name pos:line="83" pos:column="61">TraceMessage</name></argument>&gt;</argument_list></name></name><argument_list pos:line="83" pos:column="74">(<argument><expr><lambda><name pos:line="83" pos:column="75">m</name> <op:operator pos:line="83" pos:column="77">=&gt;</op:operator> <call><name><name pos:line="83" pos:column="80">m</name><op:operator pos:line="83" pos:column="81">.</op:operator><name pos:line="83" pos:column="82">Message</name><op:operator pos:line="83" pos:column="89">.</op:operator><name pos:line="83" pos:column="90">Equals</name></name><argument_list pos:line="83" pos:column="96">(<argument><expr><lit:literal type="string" pos:line="83" pos:column="97">"Message"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="83" pos:column="108">&amp;&amp;</op:operator> <name><name pos:line="83" pos:column="111">m</name><op:operator pos:line="83" pos:column="112">.</op:operator><name pos:line="83" pos:column="113">Category</name></name> <op:operator pos:line="83" pos:column="122">==</op:operator> <name><name pos:line="83" pos:column="125">FormattingKeywords</name><op:operator pos:line="83" pos:column="143">.</op:operator><name pos:line="83" pos:column="144">Fail</name></name></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="86" pos:column="9">[<expr><name pos:line="86" pos:column="10">Theory</name></expr><op:operator pos:line="86" pos:column="16">,</op:operator> <expr><name pos:line="86" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="87" pos:column="9">public</specifier> <name pos:line="87" pos:column="16">void</name></type> <name pos:line="87" pos:column="21">FailStringDetail</name><parameter_list pos:line="87" pos:column="37">(<param><decl><type><name pos:line="87" pos:column="38">TraceListener</name></type> <name pos:line="87" pos:column="52">sut</name></decl></param>, <param><decl><type><name pos:line="87" pos:column="57">ITabSetupContext</name></type> <name pos:line="87" pos:column="74">context</name></decl></param>)</parameter_list>
        <block pos:line="88" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="89" pos:column="13">sut</name><op:operator pos:line="89" pos:column="16">.</op:operator><name pos:line="89" pos:column="17">Fail</name></name><argument_list pos:line="89" pos:column="21">(<argument><expr><lit:literal type="string" pos:line="89" pos:column="22">"Message"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="89" pos:column="33">"Detail"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="91" pos:column="13">sut</name><op:operator pos:line="91" pos:column="16">.</op:operator><name pos:line="91" pos:column="17">MessageBroker</name><op:operator pos:line="91" pos:column="30">.</op:operator><name pos:line="91" pos:column="31">Verify</name></name><argument_list pos:line="91" pos:column="37">(<argument><expr><lambda><name pos:line="91" pos:column="38">mb</name> <op:operator pos:line="91" pos:column="41">=&gt;</op:operator> <call><name><name pos:line="91" pos:column="44">mb</name><op:operator pos:line="91" pos:column="46">.</op:operator><name pos:line="91" pos:column="47">Publish</name></name><argument_list pos:line="91" pos:column="54">(<argument><expr><call><name><name pos:line="91" pos:column="55">It</name><op:operator pos:line="91" pos:column="57">.</op:operator><name><name pos:line="91" pos:column="58">Is</name><argument_list pos:line="91" pos:column="60">&lt;<argument><name pos:line="91" pos:column="61">TraceMessage</name></argument>&gt;</argument_list></name></name><argument_list pos:line="91" pos:column="74">(<argument><expr><lambda><name pos:line="91" pos:column="75">m</name> <op:operator pos:line="91" pos:column="77">=&gt;</op:operator> <call><name><name pos:line="91" pos:column="80">m</name><op:operator pos:line="91" pos:column="81">.</op:operator><name pos:line="91" pos:column="82">Message</name><op:operator pos:line="91" pos:column="89">.</op:operator><name pos:line="91" pos:column="90">Equals</name></name><argument_list pos:line="91" pos:column="96">(<argument><expr><lit:literal type="string" pos:line="91" pos:column="97">"Message Detail"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="91" pos:column="115">&amp;&amp;</op:operator> <name><name pos:line="91" pos:column="118">m</name><op:operator pos:line="91" pos:column="119">.</op:operator><name pos:line="91" pos:column="120">Category</name></name> <op:operator pos:line="91" pos:column="129">==</op:operator> <name><name pos:line="91" pos:column="132">FormattingKeywords</name><op:operator pos:line="91" pos:column="150">.</op:operator><name pos:line="91" pos:column="151">Fail</name></name></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="94" pos:column="9">[<expr><name pos:line="94" pos:column="10">Theory</name></expr><op:operator pos:line="94" pos:column="16">,</op:operator> <expr><name pos:line="94" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="95" pos:column="9">public</specifier> <name pos:line="95" pos:column="16">void</name></type> <name pos:line="95" pos:column="21">TraceData</name><parameter_list pos:line="95" pos:column="30">(<param><decl><type><name pos:line="95" pos:column="31">TraceListener</name></type> <name pos:line="95" pos:column="45">sut</name></decl></param>, <param><decl><type><name pos:line="95" pos:column="50">ITabSetupContext</name></type> <name pos:line="95" pos:column="67">context</name></decl></param>)</parameter_list>
        <block pos:line="96" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="97" pos:column="13">sut</name><op:operator pos:line="97" pos:column="16">.</op:operator><name pos:line="97" pos:column="17">TraceData</name></name><argument_list pos:line="97" pos:column="26">(<argument><expr><op:operator pos:line="97" pos:column="27">new</op:operator> <call><name pos:line="97" pos:column="31">TraceEventCache</name><argument_list pos:line="97" pos:column="46">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="97" pos:column="50">"TestSource"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="97" pos:column="64">TraceEventType</name><op:operator pos:line="97" pos:column="78">.</op:operator><name pos:line="97" pos:column="79">Verbose</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="97" pos:column="88">123</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="97" pos:column="93">new</op:operator> <call><name pos:line="97" pos:column="97">TestClass</name><argument_list pos:line="97" pos:column="106">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="99" pos:column="13">sut</name><op:operator pos:line="99" pos:column="16">.</op:operator><name pos:line="99" pos:column="17">MessageBroker</name><op:operator pos:line="99" pos:column="30">.</op:operator><name pos:line="99" pos:column="31">Verify</name></name><argument_list pos:line="99" pos:column="37">(<argument><expr><lambda><name pos:line="99" pos:column="38">mb</name> <op:operator pos:line="99" pos:column="41">=&gt;</op:operator> <call><name><name pos:line="99" pos:column="44">mb</name><op:operator pos:line="99" pos:column="46">.</op:operator><name pos:line="99" pos:column="47">Publish</name></name><argument_list pos:line="99" pos:column="54">(<argument><expr><call><name><name pos:line="99" pos:column="55">It</name><op:operator pos:line="99" pos:column="57">.</op:operator><name><name pos:line="99" pos:column="58">Is</name><argument_list pos:line="99" pos:column="60">&lt;<argument><name pos:line="99" pos:column="61">TraceMessage</name></argument>&gt;</argument_list></name></name><argument_list pos:line="99" pos:column="74">(<argument><expr><lambda><name pos:line="99" pos:column="75">m</name> <op:operator pos:line="99" pos:column="77">=&gt;</op:operator> <call><name><name pos:line="99" pos:column="80">m</name><op:operator pos:line="99" pos:column="81">.</op:operator><name pos:line="99" pos:column="82">Message</name><op:operator pos:line="99" pos:column="89">.</op:operator><name pos:line="99" pos:column="90">Equals</name></name><argument_list pos:line="99" pos:column="96">(<argument><expr><lit:literal type="string" pos:line="99" pos:column="97">"TestSource: 123: Message\r\n"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="99" pos:column="129">&amp;&amp;</op:operator> <name><name pos:line="99" pos:column="132">m</name><op:operator pos:line="99" pos:column="133">.</op:operator><name pos:line="99" pos:column="134">Category</name></name> <op:operator pos:line="99" pos:column="143">==</op:operator> <name pos:line="99" pos:column="146">null</name></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="102" pos:column="9">[<expr><name pos:line="102" pos:column="10">Theory</name></expr><op:operator pos:line="102" pos:column="16">,</op:operator> <expr><name pos:line="102" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="103" pos:column="9">public</specifier> <name pos:line="103" pos:column="16">void</name></type> <name pos:line="103" pos:column="21">TraceDataCallstack</name><parameter_list pos:line="103" pos:column="39">(<param><decl><type><name pos:line="103" pos:column="40">TraceListener</name></type> <name pos:line="103" pos:column="54">sut</name></decl></param>, <param><decl><type><name pos:line="103" pos:column="59">ITabSetupContext</name></type> <name pos:line="103" pos:column="76">context</name></decl></param>)</parameter_list>
        <block pos:line="104" pos:column="9">{
            <expr_stmt><expr><name><name pos:line="105" pos:column="13">sut</name><op:operator pos:line="105" pos:column="16">.</op:operator><name pos:line="105" pos:column="17">TraceOutputOptions</name></name> <op:operator pos:line="105" pos:column="36">=</op:operator> <name><name pos:line="105" pos:column="38">TraceOptions</name><op:operator pos:line="105" pos:column="50">.</op:operator><name pos:line="105" pos:column="51">Callstack</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="106" pos:column="13">sut</name><op:operator pos:line="106" pos:column="16">.</op:operator><name pos:line="106" pos:column="17">TraceData</name></name><argument_list pos:line="106" pos:column="26">(<argument><expr><op:operator pos:line="106" pos:column="27">new</op:operator> <call><name pos:line="106" pos:column="31">TraceEventCache</name><argument_list pos:line="106" pos:column="46">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="106" pos:column="50">"TestSource"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="106" pos:column="64">TraceEventType</name><op:operator pos:line="106" pos:column="78">.</op:operator><name pos:line="106" pos:column="79">Error</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="106" pos:column="86">123</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="106" pos:column="91">new</op:operator> <call><name pos:line="106" pos:column="95">TestClass</name><argument_list pos:line="106" pos:column="104">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="108" pos:column="13">sut</name><op:operator pos:line="108" pos:column="16">.</op:operator><name pos:line="108" pos:column="17">MessageBroker</name><op:operator pos:line="108" pos:column="30">.</op:operator><name pos:line="108" pos:column="31">Verify</name></name><argument_list pos:line="108" pos:column="37">(<argument><expr><lambda><name pos:line="108" pos:column="38">mb</name> <op:operator pos:line="108" pos:column="41">=&gt;</op:operator> <call><name><name pos:line="108" pos:column="44">mb</name><op:operator pos:line="108" pos:column="46">.</op:operator><name pos:line="108" pos:column="47">Publish</name></name><argument_list pos:line="108" pos:column="54">(<argument><expr><call><name><name pos:line="108" pos:column="55">It</name><op:operator pos:line="108" pos:column="57">.</op:operator><name><name pos:line="108" pos:column="58">Is</name><argument_list pos:line="108" pos:column="60">&lt;<argument><name pos:line="108" pos:column="61">TraceMessage</name></argument>&gt;</argument_list></name></name><argument_list pos:line="108" pos:column="74">(<argument><expr><lambda><name pos:line="108" pos:column="75">m</name> <op:operator pos:line="108" pos:column="77">=&gt;</op:operator> <call><name><name pos:line="108" pos:column="80">m</name><op:operator pos:line="108" pos:column="81">.</op:operator><name pos:line="108" pos:column="82">Message</name><op:operator pos:line="108" pos:column="89">.</op:operator><name pos:line="108" pos:column="90">StartsWith</name></name><argument_list pos:line="108" pos:column="100">(<argument><expr><lit:literal type="string" pos:line="108" pos:column="101">"TestSource: 123: Message\r\nCallstack"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="108" pos:column="142">&amp;&amp;</op:operator> <name><name pos:line="108" pos:column="145">m</name><op:operator pos:line="108" pos:column="146">.</op:operator><name pos:line="108" pos:column="147">Category</name></name> <op:operator pos:line="108" pos:column="156">==</op:operator> <name><name pos:line="108" pos:column="159">FormattingKeywords</name><op:operator pos:line="108" pos:column="177">.</op:operator><name pos:line="108" pos:column="178">Error</name></name></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="111" pos:column="9">[<expr><name pos:line="111" pos:column="10">Theory</name></expr><op:operator pos:line="111" pos:column="16">,</op:operator> <expr><name pos:line="111" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="112" pos:column="9">public</specifier> <name pos:line="112" pos:column="16">void</name></type> <name pos:line="112" pos:column="21">TraceDataTimestamp</name><parameter_list pos:line="112" pos:column="39">(<param><decl><type><name pos:line="112" pos:column="40">TraceListener</name></type> <name pos:line="112" pos:column="54">sut</name></decl></param>, <param><decl><type><name pos:line="112" pos:column="59">ITabSetupContext</name></type> <name pos:line="112" pos:column="76">context</name></decl></param>)</parameter_list>
        <block pos:line="113" pos:column="9">{
            <expr_stmt><expr><name><name pos:line="114" pos:column="13">sut</name><op:operator pos:line="114" pos:column="16">.</op:operator><name pos:line="114" pos:column="17">TraceOutputOptions</name></name> <op:operator pos:line="114" pos:column="36">=</op:operator> <name><name pos:line="114" pos:column="38">TraceOptions</name><op:operator pos:line="114" pos:column="50">.</op:operator><name pos:line="114" pos:column="51">Timestamp</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="115" pos:column="13">sut</name><op:operator pos:line="115" pos:column="16">.</op:operator><name pos:line="115" pos:column="17">TraceData</name></name><argument_list pos:line="115" pos:column="26">(<argument><expr><op:operator pos:line="115" pos:column="27">new</op:operator> <call><name pos:line="115" pos:column="31">TraceEventCache</name><argument_list pos:line="115" pos:column="46">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="115" pos:column="50">"TestSource"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="115" pos:column="64">TraceEventType</name><op:operator pos:line="115" pos:column="78">.</op:operator><name pos:line="115" pos:column="79">Error</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="115" pos:column="86">123</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="115" pos:column="91">new</op:operator> <call><name pos:line="115" pos:column="95">TestClass</name><argument_list pos:line="115" pos:column="104">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="117" pos:column="13">sut</name><op:operator pos:line="117" pos:column="16">.</op:operator><name pos:line="117" pos:column="17">MessageBroker</name><op:operator pos:line="117" pos:column="30">.</op:operator><name pos:line="117" pos:column="31">Verify</name></name><argument_list pos:line="117" pos:column="37">(<argument><expr><lambda><name pos:line="117" pos:column="38">mb</name> <op:operator pos:line="117" pos:column="41">=&gt;</op:operator> <call><name><name pos:line="117" pos:column="44">mb</name><op:operator pos:line="117" pos:column="46">.</op:operator><name pos:line="117" pos:column="47">Publish</name></name><argument_list pos:line="117" pos:column="54">(<argument><expr><call><name><name pos:line="117" pos:column="55">It</name><op:operator pos:line="117" pos:column="57">.</op:operator><name><name pos:line="117" pos:column="58">Is</name><argument_list pos:line="117" pos:column="60">&lt;<argument><name pos:line="117" pos:column="61">TraceMessage</name></argument>&gt;</argument_list></name></name><argument_list pos:line="117" pos:column="74">(<argument><expr><lambda><name pos:line="117" pos:column="75">m</name> <op:operator pos:line="117" pos:column="77">=&gt;</op:operator> <call><name><name pos:line="117" pos:column="80">m</name><op:operator pos:line="117" pos:column="81">.</op:operator><name pos:line="117" pos:column="82">Message</name><op:operator pos:line="117" pos:column="89">.</op:operator><name pos:line="117" pos:column="90">StartsWith</name></name><argument_list pos:line="117" pos:column="100">(<argument><expr><lit:literal type="string" pos:line="117" pos:column="101">"TestSource: 123: Message\r\nTimestamp"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="117" pos:column="142">&amp;&amp;</op:operator> <name><name pos:line="117" pos:column="145">m</name><op:operator pos:line="117" pos:column="146">.</op:operator><name pos:line="117" pos:column="147">Category</name></name> <op:operator pos:line="117" pos:column="156">==</op:operator> <name><name pos:line="117" pos:column="159">FormattingKeywords</name><op:operator pos:line="117" pos:column="177">.</op:operator><name pos:line="117" pos:column="178">Error</name></name></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="120" pos:column="9">[<expr><name pos:line="120" pos:column="10">Theory</name></expr><op:operator pos:line="120" pos:column="16">,</op:operator> <expr><name pos:line="120" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="121" pos:column="9">public</specifier> <name pos:line="121" pos:column="16">void</name></type> <name pos:line="121" pos:column="21">TraceDataMultiple</name><parameter_list pos:line="121" pos:column="38">(<param><decl><type><name pos:line="121" pos:column="39">TraceListener</name></type> <name pos:line="121" pos:column="53">sut</name></decl></param>, <param><decl><type><name pos:line="121" pos:column="58">ITabSetupContext</name></type> <name pos:line="121" pos:column="75">context</name></decl></param>)</parameter_list>
        <block pos:line="122" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="123" pos:column="13">sut</name><op:operator pos:line="123" pos:column="16">.</op:operator><name pos:line="123" pos:column="17">TraceData</name></name><argument_list pos:line="123" pos:column="26">(<argument><expr><op:operator pos:line="123" pos:column="27">new</op:operator> <call><name pos:line="123" pos:column="31">TraceEventCache</name><argument_list pos:line="123" pos:column="46">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="123" pos:column="50">"TestSource"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="123" pos:column="64">TraceEventType</name><op:operator pos:line="123" pos:column="78">.</op:operator><name pos:line="123" pos:column="79">Critical</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="123" pos:column="89">123</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="123" pos:column="94">new</op:operator> <call><name pos:line="123" pos:column="98">TestClass</name><argument_list pos:line="123" pos:column="107">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="123" pos:column="111">new</op:operator> <call><name pos:line="123" pos:column="115">TestClass</name><argument_list pos:line="123" pos:column="124">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="125" pos:column="13">sut</name><op:operator pos:line="125" pos:column="16">.</op:operator><name pos:line="125" pos:column="17">MessageBroker</name><op:operator pos:line="125" pos:column="30">.</op:operator><name pos:line="125" pos:column="31">Verify</name></name><argument_list pos:line="125" pos:column="37">(<argument><expr><lambda><name pos:line="125" pos:column="38">mb</name> <op:operator pos:line="125" pos:column="41">=&gt;</op:operator> <call><name><name pos:line="125" pos:column="44">mb</name><op:operator pos:line="125" pos:column="46">.</op:operator><name pos:line="125" pos:column="47">Publish</name></name><argument_list pos:line="125" pos:column="54">(<argument><expr><call><name><name pos:line="125" pos:column="55">It</name><op:operator pos:line="125" pos:column="57">.</op:operator><name><name pos:line="125" pos:column="58">Is</name><argument_list pos:line="125" pos:column="60">&lt;<argument><name pos:line="125" pos:column="61">TraceMessage</name></argument>&gt;</argument_list></name></name><argument_list pos:line="125" pos:column="74">(<argument><expr><lambda><name pos:line="125" pos:column="75">m</name> <op:operator pos:line="125" pos:column="77">=&gt;</op:operator> <call><name><name pos:line="125" pos:column="80">m</name><op:operator pos:line="125" pos:column="81">.</op:operator><name pos:line="125" pos:column="82">Message</name><op:operator pos:line="125" pos:column="89">.</op:operator><name pos:line="125" pos:column="90">Equals</name></name><argument_list pos:line="125" pos:column="96">(<argument><expr><lit:literal type="string" pos:line="125" pos:column="97">"TestSource: 123: Message, Message\r\n"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="125" pos:column="138">&amp;&amp;</op:operator> <name><name pos:line="125" pos:column="141">m</name><op:operator pos:line="125" pos:column="142">.</op:operator><name pos:line="125" pos:column="143">Category</name></name> <op:operator pos:line="125" pos:column="152">==</op:operator> <name><name pos:line="125" pos:column="155">FormattingKeywords</name><op:operator pos:line="125" pos:column="173">.</op:operator><name pos:line="125" pos:column="174">Fail</name></name></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="128" pos:column="9">[<expr><name pos:line="128" pos:column="10">Theory</name></expr><op:operator pos:line="128" pos:column="16">,</op:operator> <expr><name pos:line="128" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="129" pos:column="9">public</specifier> <name pos:line="129" pos:column="16">void</name></type> <name pos:line="129" pos:column="21">TraceEvent</name><parameter_list pos:line="129" pos:column="31">(<param><decl><type><name pos:line="129" pos:column="32">TraceListener</name></type> <name pos:line="129" pos:column="46">sut</name></decl></param>, <param><decl><type><name pos:line="129" pos:column="51">ITabSetupContext</name></type> <name pos:line="129" pos:column="68">context</name></decl></param>)</parameter_list>
        <block pos:line="130" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="131" pos:column="13">sut</name><op:operator pos:line="131" pos:column="16">.</op:operator><name pos:line="131" pos:column="17">TraceEvent</name></name><argument_list pos:line="131" pos:column="27">(<argument><expr><op:operator pos:line="131" pos:column="28">new</op:operator> <call><name pos:line="131" pos:column="32">TraceEventCache</name><argument_list pos:line="131" pos:column="47">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="131" pos:column="51">"TestSource"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="131" pos:column="65">TraceEventType</name><op:operator pos:line="131" pos:column="79">.</op:operator><name pos:line="131" pos:column="80">Warning</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="131" pos:column="89">123</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="131" pos:column="94">"Message"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="133" pos:column="13">sut</name><op:operator pos:line="133" pos:column="16">.</op:operator><name pos:line="133" pos:column="17">MessageBroker</name><op:operator pos:line="133" pos:column="30">.</op:operator><name pos:line="133" pos:column="31">Verify</name></name><argument_list pos:line="133" pos:column="37">(<argument><expr><lambda><name pos:line="133" pos:column="38">mb</name> <op:operator pos:line="133" pos:column="41">=&gt;</op:operator> <call><name><name pos:line="133" pos:column="44">mb</name><op:operator pos:line="133" pos:column="46">.</op:operator><name pos:line="133" pos:column="47">Publish</name></name><argument_list pos:line="133" pos:column="54">(<argument><expr><call><name><name pos:line="133" pos:column="55">It</name><op:operator pos:line="133" pos:column="57">.</op:operator><name><name pos:line="133" pos:column="58">Is</name><argument_list pos:line="133" pos:column="60">&lt;<argument><name pos:line="133" pos:column="61">TraceMessage</name></argument>&gt;</argument_list></name></name><argument_list pos:line="133" pos:column="74">(<argument><expr><lambda><name pos:line="133" pos:column="75">m</name> <op:operator pos:line="133" pos:column="77">=&gt;</op:operator> <call><name><name pos:line="133" pos:column="80">m</name><op:operator pos:line="133" pos:column="81">.</op:operator><name pos:line="133" pos:column="82">Message</name><op:operator pos:line="133" pos:column="89">.</op:operator><name pos:line="133" pos:column="90">Equals</name></name><argument_list pos:line="133" pos:column="96">(<argument><expr><lit:literal type="string" pos:line="133" pos:column="97">"TestSource: 123: Message\r\n"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="133" pos:column="129">&amp;&amp;</op:operator> <name><name pos:line="133" pos:column="132">m</name><op:operator pos:line="133" pos:column="133">.</op:operator><name pos:line="133" pos:column="134">Category</name></name> <op:operator pos:line="133" pos:column="143">==</op:operator> <name><name pos:line="133" pos:column="146">FormattingKeywords</name><op:operator pos:line="133" pos:column="164">.</op:operator><name pos:line="133" pos:column="165">Warn</name></name></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="136" pos:column="9">[<expr><name pos:line="136" pos:column="10">Theory</name></expr><op:operator pos:line="136" pos:column="16">,</op:operator> <expr><name pos:line="136" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="137" pos:column="9">public</specifier> <name pos:line="137" pos:column="16">void</name></type> <name pos:line="137" pos:column="21">TraceEventMultiple</name><parameter_list pos:line="137" pos:column="39">(<param><decl><type><name pos:line="137" pos:column="40">TraceListener</name></type> <name pos:line="137" pos:column="54">sut</name></decl></param>, <param><decl><type><name pos:line="137" pos:column="59">ITabSetupContext</name></type> <name pos:line="137" pos:column="76">context</name></decl></param>)</parameter_list>
        <block pos:line="138" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="139" pos:column="13">sut</name><op:operator pos:line="139" pos:column="16">.</op:operator><name pos:line="139" pos:column="17">TraceEvent</name></name><argument_list pos:line="139" pos:column="27">(<argument><expr><op:operator pos:line="139" pos:column="28">new</op:operator> <call><name pos:line="139" pos:column="32">TraceEventCache</name><argument_list pos:line="139" pos:column="47">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="139" pos:column="51">"TestSource"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="139" pos:column="65">TraceEventType</name><op:operator pos:line="139" pos:column="79">.</op:operator><name pos:line="139" pos:column="80">Warning</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="139" pos:column="89">123</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="139" pos:column="94">"Test {0} {1}"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="139" pos:column="110">"Message"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="139" pos:column="121">"Test"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="141" pos:column="13">sut</name><op:operator pos:line="141" pos:column="16">.</op:operator><name pos:line="141" pos:column="17">MessageBroker</name><op:operator pos:line="141" pos:column="30">.</op:operator><name pos:line="141" pos:column="31">Verify</name></name><argument_list pos:line="141" pos:column="37">(<argument><expr><lambda><name pos:line="141" pos:column="38">mb</name> <op:operator pos:line="141" pos:column="41">=&gt;</op:operator> <call><name><name pos:line="141" pos:column="44">mb</name><op:operator pos:line="141" pos:column="46">.</op:operator><name pos:line="141" pos:column="47">Publish</name></name><argument_list pos:line="141" pos:column="54">(<argument><expr><call><name><name pos:line="141" pos:column="55">It</name><op:operator pos:line="141" pos:column="57">.</op:operator><name><name pos:line="141" pos:column="58">Is</name><argument_list pos:line="141" pos:column="60">&lt;<argument><name pos:line="141" pos:column="61">TraceMessage</name></argument>&gt;</argument_list></name></name><argument_list pos:line="141" pos:column="74">(<argument><expr><lambda><name pos:line="141" pos:column="75">m</name> <op:operator pos:line="141" pos:column="77">=&gt;</op:operator> <call><name><name pos:line="141" pos:column="80">m</name><op:operator pos:line="141" pos:column="81">.</op:operator><name pos:line="141" pos:column="82">Message</name><op:operator pos:line="141" pos:column="89">.</op:operator><name pos:line="141" pos:column="90">Equals</name></name><argument_list pos:line="141" pos:column="96">(<argument><expr><lit:literal type="string" pos:line="141" pos:column="97">"TestSource: 123: Test Message Test\r\n"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="141" pos:column="139">&amp;&amp;</op:operator> <name><name pos:line="141" pos:column="142">m</name><op:operator pos:line="141" pos:column="143">.</op:operator><name pos:line="141" pos:column="144">Category</name></name> <op:operator pos:line="141" pos:column="153">==</op:operator> <name><name pos:line="141" pos:column="156">FormattingKeywords</name><op:operator pos:line="141" pos:column="174">.</op:operator><name pos:line="141" pos:column="175">Warn</name></name></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <class><specifier pos:line="144" pos:column="9">public</specifier> class <name pos:line="144" pos:column="22">TestClass</name>
        <block pos:line="145" pos:column="9">{
            <function><type><specifier pos:line="146" pos:column="13">public</specifier> <specifier pos:line="146" pos:column="20">override</specifier> <name pos:line="146" pos:column="29">string</name></type> <name pos:line="146" pos:column="36">ToString</name><parameter_list pos:line="146" pos:column="44">()</parameter_list>
            <block pos:line="147" pos:column="13">{
                <return pos:line="148" pos:column="17">return <expr><lit:literal type="string" pos:line="148" pos:column="24">"Message"</lit:literal></expr>;</return>
            }</block></function>
        }</block></class>
    }</block></class>
}</block></namespace>
</unit>
