<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.WebForms.WingTip.Sample\Logic\ExceptionUtility.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Web</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">IO</name></name>;</using>

<namespace pos:line="7" pos:column="1">namespace <name><name pos:line="7" pos:column="11">WingtipToys</name><op:operator pos:line="7" pos:column="22">.</op:operator><name pos:line="7" pos:column="23">Logic</name></name>
<block pos:line="8" pos:column="1">{
    <comment type="line" pos:line="9" pos:column="5">// Create our own utility for exceptions</comment>
    <class><specifier pos:line="10" pos:column="5">public</specifier> <specifier pos:line="10" pos:column="12">sealed</specifier> class <name pos:line="10" pos:column="25">ExceptionUtility</name>
    <block pos:line="11" pos:column="5">{
        <comment type="line" pos:line="12" pos:column="9">// All methods are static, so this can be private</comment>
        <constructor><specifier pos:line="13" pos:column="9">private</specifier> <name pos:line="13" pos:column="17">ExceptionUtility</name><parameter_list pos:line="13" pos:column="33">()</parameter_list>
        <block pos:line="14" pos:column="9">{ }</block></constructor>

        <comment type="line" pos:line="16" pos:column="9">// Log an Exception</comment>
        <function><type><specifier pos:line="17" pos:column="9">public</specifier> <specifier pos:line="17" pos:column="16">static</specifier> <name pos:line="17" pos:column="23">void</name></type> <name pos:line="17" pos:column="28">LogException</name><parameter_list pos:line="17" pos:column="40">(<param><decl><type><name pos:line="17" pos:column="41">Exception</name></type> <name pos:line="17" pos:column="51">exc</name></decl></param>, <param><decl><type><name pos:line="17" pos:column="56">string</name></type> <name pos:line="17" pos:column="63">source</name></decl></param>)</parameter_list>
        <block pos:line="18" pos:column="9">{
            <comment type="line" pos:line="19" pos:column="13">// Include logic for logging exceptions</comment>
            <comment type="line" pos:line="20" pos:column="13">// Get the absolute path to the log file</comment>
            <decl_stmt><decl><type><name pos:line="21" pos:column="13">string</name></type> <name pos:line="21" pos:column="20">logFile</name> <init pos:line="21" pos:column="28">= <expr><lit:literal type="string" pos:line="21" pos:column="30">"~/App_Data/ErrorLog.txt"</lit:literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="22" pos:column="13">logFile</name> <op:operator pos:line="22" pos:column="21">=</op:operator> <call><name><name pos:line="22" pos:column="23">HttpContext</name><op:operator pos:line="22" pos:column="34">.</op:operator><name pos:line="22" pos:column="35">Current</name><op:operator pos:line="22" pos:column="42">.</op:operator><name pos:line="22" pos:column="43">Server</name><op:operator pos:line="22" pos:column="49">.</op:operator><name pos:line="22" pos:column="50">MapPath</name></name><argument_list pos:line="22" pos:column="57">(<argument><expr><name pos:line="22" pos:column="58">logFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="24" pos:column="13">// Open the log file for append and write the log</comment>
            <decl_stmt><decl><type><name pos:line="25" pos:column="13">StreamWriter</name></type> <name pos:line="25" pos:column="26">sw</name> <init pos:line="25" pos:column="29">= <expr><op:operator pos:line="25" pos:column="31">new</op:operator> <call><name pos:line="25" pos:column="35">StreamWriter</name><argument_list pos:line="25" pos:column="47">(<argument><expr><name pos:line="25" pos:column="48">logFile</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="25" pos:column="57">true</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="26" pos:column="13">sw</name><op:operator pos:line="26" pos:column="15">.</op:operator><name pos:line="26" pos:column="16">WriteLine</name></name><argument_list pos:line="26" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="26" pos:column="26">"********** {0} **********"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="55">DateTime</name><op:operator pos:line="26" pos:column="63">.</op:operator><name pos:line="26" pos:column="64">Now</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if pos:line="27" pos:column="13">if <condition pos:line="27" pos:column="16">(<expr><name><name pos:line="27" pos:column="17">exc</name><op:operator pos:line="27" pos:column="20">.</op:operator><name pos:line="27" pos:column="21">InnerException</name></name> <op:operator pos:line="27" pos:column="36">!=</op:operator> <name pos:line="27" pos:column="39">null</name></expr>)</condition><then pos:line="27" pos:column="44">
            <block pos:line="28" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="29" pos:column="17">sw</name><op:operator pos:line="29" pos:column="19">.</op:operator><name pos:line="29" pos:column="20">Write</name></name><argument_list pos:line="29" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="29" pos:column="26">"Inner Exception Type: "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="30" pos:column="17">sw</name><op:operator pos:line="30" pos:column="19">.</op:operator><name pos:line="30" pos:column="20">WriteLine</name></name><argument_list pos:line="30" pos:column="29">(<argument><expr><call><name><name pos:line="30" pos:column="30">exc</name><op:operator pos:line="30" pos:column="33">.</op:operator><name pos:line="30" pos:column="34">InnerException</name><op:operator pos:line="30" pos:column="48">.</op:operator><name pos:line="30" pos:column="49">GetType</name></name><argument_list pos:line="30" pos:column="56">()</argument_list></call><op:operator pos:line="30" pos:column="58">.</op:operator><call><name pos:line="30" pos:column="59">ToString</name><argument_list pos:line="30" pos:column="67">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="31" pos:column="17">sw</name><op:operator pos:line="31" pos:column="19">.</op:operator><name pos:line="31" pos:column="20">Write</name></name><argument_list pos:line="31" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="31" pos:column="26">"Inner Exception: "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="32" pos:column="17">sw</name><op:operator pos:line="32" pos:column="19">.</op:operator><name pos:line="32" pos:column="20">WriteLine</name></name><argument_list pos:line="32" pos:column="29">(<argument><expr><name><name pos:line="32" pos:column="30">exc</name><op:operator pos:line="32" pos:column="33">.</op:operator><name pos:line="32" pos:column="34">InnerException</name><op:operator pos:line="32" pos:column="48">.</op:operator><name pos:line="32" pos:column="49">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="33" pos:column="17">sw</name><op:operator pos:line="33" pos:column="19">.</op:operator><name pos:line="33" pos:column="20">Write</name></name><argument_list pos:line="33" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="33" pos:column="26">"Inner Source: "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="34" pos:column="17">sw</name><op:operator pos:line="34" pos:column="19">.</op:operator><name pos:line="34" pos:column="20">WriteLine</name></name><argument_list pos:line="34" pos:column="29">(<argument><expr><name><name pos:line="34" pos:column="30">exc</name><op:operator pos:line="34" pos:column="33">.</op:operator><name pos:line="34" pos:column="34">InnerException</name><op:operator pos:line="34" pos:column="48">.</op:operator><name pos:line="34" pos:column="49">Source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><name><name pos:line="35" pos:column="21">exc</name><op:operator pos:line="35" pos:column="24">.</op:operator><name pos:line="35" pos:column="25">InnerException</name><op:operator pos:line="35" pos:column="39">.</op:operator><name pos:line="35" pos:column="40">StackTrace</name></name> <op:operator pos:line="35" pos:column="51">!=</op:operator> <name pos:line="35" pos:column="54">null</name></expr>)</condition><then pos:line="35" pos:column="59">
                <block pos:line="36" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="37" pos:column="21">sw</name><op:operator pos:line="37" pos:column="23">.</op:operator><name pos:line="37" pos:column="24">WriteLine</name></name><argument_list pos:line="37" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="37" pos:column="34">"Inner Stack Trace: "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="38" pos:column="21">sw</name><op:operator pos:line="38" pos:column="23">.</op:operator><name pos:line="38" pos:column="24">WriteLine</name></name><argument_list pos:line="38" pos:column="33">(<argument><expr><name><name pos:line="38" pos:column="34">exc</name><op:operator pos:line="38" pos:column="37">.</op:operator><name pos:line="38" pos:column="38">InnerException</name><op:operator pos:line="38" pos:column="52">.</op:operator><name pos:line="38" pos:column="53">StackTrace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
            <expr_stmt><expr><call><name><name pos:line="41" pos:column="13">sw</name><op:operator pos:line="41" pos:column="15">.</op:operator><name pos:line="41" pos:column="16">Write</name></name><argument_list pos:line="41" pos:column="21">(<argument><expr><lit:literal type="string" pos:line="41" pos:column="22">"Exception Type: "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="42" pos:column="13">sw</name><op:operator pos:line="42" pos:column="15">.</op:operator><name pos:line="42" pos:column="16">WriteLine</name></name><argument_list pos:line="42" pos:column="25">(<argument><expr><call><name><name pos:line="42" pos:column="26">exc</name><op:operator pos:line="42" pos:column="29">.</op:operator><name pos:line="42" pos:column="30">GetType</name></name><argument_list pos:line="42" pos:column="37">()</argument_list></call><op:operator pos:line="42" pos:column="39">.</op:operator><call><name pos:line="42" pos:column="40">ToString</name><argument_list pos:line="42" pos:column="48">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="43" pos:column="13">sw</name><op:operator pos:line="43" pos:column="15">.</op:operator><name pos:line="43" pos:column="16">WriteLine</name></name><argument_list pos:line="43" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="43" pos:column="26">"Exception: "</lit:literal> <op:operator pos:line="43" pos:column="40">+</op:operator> <name><name pos:line="43" pos:column="42">exc</name><op:operator pos:line="43" pos:column="45">.</op:operator><name pos:line="43" pos:column="46">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="44" pos:column="13">sw</name><op:operator pos:line="44" pos:column="15">.</op:operator><name pos:line="44" pos:column="16">WriteLine</name></name><argument_list pos:line="44" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="44" pos:column="26">"Source: "</lit:literal> <op:operator pos:line="44" pos:column="37">+</op:operator> <name pos:line="44" pos:column="39">source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="45" pos:column="13">sw</name><op:operator pos:line="45" pos:column="15">.</op:operator><name pos:line="45" pos:column="16">WriteLine</name></name><argument_list pos:line="45" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="45" pos:column="26">"Stack Trace: "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if pos:line="46" pos:column="13">if <condition pos:line="46" pos:column="16">(<expr><name><name pos:line="46" pos:column="17">exc</name><op:operator pos:line="46" pos:column="20">.</op:operator><name pos:line="46" pos:column="21">StackTrace</name></name> <op:operator pos:line="46" pos:column="32">!=</op:operator> <name pos:line="46" pos:column="35">null</name></expr>)</condition><then pos:line="46" pos:column="40">
            <block pos:line="47" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="48" pos:column="17">sw</name><op:operator pos:line="48" pos:column="19">.</op:operator><name pos:line="48" pos:column="20">WriteLine</name></name><argument_list pos:line="48" pos:column="29">(<argument><expr><name><name pos:line="48" pos:column="30">exc</name><op:operator pos:line="48" pos:column="33">.</op:operator><name pos:line="48" pos:column="34">StackTrace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="49" pos:column="17">sw</name><op:operator pos:line="49" pos:column="19">.</op:operator><name pos:line="49" pos:column="20">WriteLine</name></name><argument_list pos:line="49" pos:column="29">()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name pos:line="51" pos:column="13">sw</name><op:operator pos:line="51" pos:column="15">.</op:operator><name pos:line="51" pos:column="16">Close</name></name><argument_list pos:line="51" pos:column="21">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace>

</unit>
