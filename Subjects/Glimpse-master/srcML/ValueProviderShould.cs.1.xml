<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Mvc\AlternateType\ValueProviderShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">System</name><op:operator pos:line="1" pos:column="13">.</op:operator><name pos:line="1" pos:column="14">Diagnostics</name><op:operator pos:line="1" pos:column="25">.</op:operator><name pos:line="1" pos:column="26">CodeAnalysis</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Linq</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Web</name><op:operator pos:line="3" pos:column="17">.</op:operator><name pos:line="3" pos:column="18">Mvc</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Core</name><op:operator pos:line="4" pos:column="19">.</op:operator><name pos:line="4" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Glimpse</name><op:operator pos:line="5" pos:column="14">.</op:operator><name pos:line="5" pos:column="15">Mvc</name><op:operator pos:line="5" pos:column="18">.</op:operator><name pos:line="5" pos:column="19">AlternateType</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Glimpse</name><op:operator pos:line="6" pos:column="14">.</op:operator><name pos:line="6" pos:column="15">Test</name><op:operator pos:line="6" pos:column="19">.</op:operator><name pos:line="6" pos:column="20">Common</name></name>;</using>
<using pos:line="7" pos:column="1">using <name pos:line="7" pos:column="7">Xunit</name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Xunit</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">Extensions</name></name>;</using>

<namespace pos:line="10" pos:column="1">namespace <name><name pos:line="10" pos:column="11">Glimpse</name><op:operator pos:line="10" pos:column="18">.</op:operator><name pos:line="10" pos:column="19">Test</name><op:operator pos:line="10" pos:column="23">.</op:operator><name pos:line="10" pos:column="24">Mvc</name><op:operator pos:line="10" pos:column="27">.</op:operator><name pos:line="10" pos:column="28">AlternateType</name></name>
<block pos:line="11" pos:column="1">{
    <class><attribute pos:line="12" pos:column="5">[<expr><call><name pos:line="12" pos:column="6">SuppressMessage</name><argument_list pos:line="12" pos:column="21">(<argument><expr><lit:literal type="string" pos:line="12" pos:column="22">"StyleCop.CSharp.MaintainabilityRules"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="12" pos:column="62">"SA1402:FileMayOnlyContainASingleClass"</lit:literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="103">Justification</name> <op:operator pos:line="12" pos:column="117">=</op:operator> <lit:literal type="string" pos:line="12" pos:column="119">"Reviewed. Class is okay because it only changes the generic T parameter for the abstract class below."</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    <specifier pos:line="13" pos:column="5">public</specifier> class <name pos:line="13" pos:column="18">ValidatedValueProviderShould</name> <super pos:line="13" pos:column="47">: <name><name pos:line="13" pos:column="49">ValueProviderShould</name><argument_list pos:line="13" pos:column="68">&lt;<argument><name pos:line="13" pos:column="69">IValueProvider</name></argument>&gt;</argument_list></name></super>
    <block pos:line="14" pos:column="5">{
    }</block></class>

    <class><attribute pos:line="17" pos:column="5">[<expr><call><name pos:line="17" pos:column="6">SuppressMessage</name><argument_list pos:line="17" pos:column="21">(<argument><expr><lit:literal type="string" pos:line="17" pos:column="22">"StyleCop.CSharp.MaintainabilityRules"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="17" pos:column="62">"SA1402:FileMayOnlyContainASingleClass"</lit:literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="103">Justification</name> <op:operator pos:line="17" pos:column="117">=</op:operator> <lit:literal type="string" pos:line="17" pos:column="119">"Reviewed. Class is okay because it only changes the generic T parameter for the abstract class below."</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    <specifier pos:line="18" pos:column="5">public</specifier> class <name pos:line="18" pos:column="18">UnvalidatedValueProviderShould</name> <super pos:line="18" pos:column="49">: <name><name pos:line="18" pos:column="51">ValueProviderShould</name><argument_list pos:line="18" pos:column="70">&lt;<argument><name pos:line="18" pos:column="71">IUnvalidatedValueProvider</name></argument>&gt;</argument_list></name></super>
    <block pos:line="19" pos:column="5">{
    }</block></class>

    <class><specifier pos:line="22" pos:column="5">public</specifier> <specifier pos:line="22" pos:column="12">abstract</specifier> class <name><name pos:line="22" pos:column="27">ValueProviderShould</name><argument_list pos:line="22" pos:column="46">&lt;<argument><name pos:line="22" pos:column="47">T</name></argument>&gt; <where pos:line="22" pos:column="50">where <name pos:line="22" pos:column="56">T</name> : class</where></argument_list></name>
    <block pos:line="23" pos:column="5">{
        <function><type><attribute pos:line="24" pos:column="9">[<expr><name pos:line="24" pos:column="10">Theory</name></expr><op:operator pos:line="24" pos:column="16">,</op:operator> <expr><name pos:line="24" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="25" pos:column="9">public</specifier> <name pos:line="25" pos:column="16">void</name></type> <name pos:line="25" pos:column="21">Construct</name><parameter_list pos:line="25" pos:column="30">(<param><decl><type><name pos:line="25" pos:column="31">IProxyFactory</name></type> <name pos:line="25" pos:column="45">proxyFactory</name></decl></param>)</parameter_list>
        <block pos:line="26" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="27" pos:column="13">AlternateType</name><argument_list pos:line="27" pos:column="26">&lt;<argument><name pos:line="27" pos:column="27">T</name></argument>&gt;</argument_list></name></type> <name pos:line="27" pos:column="30">sut</name> <init pos:line="27" pos:column="34">= <expr><op:operator pos:line="27" pos:column="36">new</op:operator> <call><name><name pos:line="27" pos:column="40">ValueProvider</name><argument_list pos:line="27" pos:column="53">&lt;<argument><name pos:line="27" pos:column="54">T</name></argument>&gt;</argument_list></name><argument_list pos:line="27" pos:column="56">(<argument><expr><name pos:line="27" pos:column="57">proxyFactory</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="29" pos:column="13">Assert</name><op:operator pos:line="29" pos:column="19">.</op:operator><name><name pos:line="29" pos:column="20">IsAssignableFrom</name><argument_list pos:line="29" pos:column="36">&lt;<argument><name><name pos:line="29" pos:column="37">AlternateType</name><argument_list pos:line="29" pos:column="50">&lt;<argument><name pos:line="29" pos:column="51">T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name><argument_list pos:line="29" pos:column="54">(<argument><expr><name pos:line="29" pos:column="55">sut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="30" pos:column="13">Assert</name><op:operator pos:line="30" pos:column="19">.</op:operator><name pos:line="30" pos:column="20">NotNull</name></name><argument_list pos:line="30" pos:column="27">(<argument><expr><name pos:line="30" pos:column="28">sut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="33" pos:column="9">[<expr><name pos:line="33" pos:column="10">Theory</name></expr><op:operator pos:line="33" pos:column="16">,</op:operator> <expr><name pos:line="33" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="34" pos:column="9">public</specifier> <name pos:line="34" pos:column="16">void</name></type> <name pos:line="34" pos:column="21">ImplementThreeMethods</name><parameter_list pos:line="34" pos:column="42">(<param><decl><type><name><name pos:line="34" pos:column="43">ValueProvider</name><argument_list pos:line="34" pos:column="56">&lt;<argument><name pos:line="34" pos:column="57">T</name></argument>&gt;</argument_list></name></type> <name pos:line="34" pos:column="60">sut</name></decl></param>)</parameter_list>
        <block pos:line="35" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="36" pos:column="13">Assert</name><op:operator pos:line="36" pos:column="19">.</op:operator><name pos:line="36" pos:column="20">Equal</name></name><argument_list pos:line="36" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="36" pos:column="26">3</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="36" pos:column="29">sut</name><op:operator pos:line="36" pos:column="32">.</op:operator><name pos:line="36" pos:column="33">AllMethods</name><op:operator pos:line="36" pos:column="43">.</op:operator><name pos:line="36" pos:column="44">Count</name></name><argument_list pos:line="36" pos:column="49">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
