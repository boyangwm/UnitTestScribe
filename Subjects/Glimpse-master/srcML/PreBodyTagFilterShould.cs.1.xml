<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.AspNet\PreBodyTagFilterShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">System</name><op:operator pos:line="1" pos:column="13">.</op:operator><name pos:line="1" pos:column="14">IO</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">IO</name><op:operator pos:line="2" pos:column="16">.</op:operator><name pos:line="2" pos:column="17">Compression</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Text</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Glimpse</name><op:operator pos:line="5" pos:column="14">.</op:operator><name pos:line="5" pos:column="15">AspNet</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Glimpse</name><op:operator pos:line="6" pos:column="14">.</op:operator><name pos:line="6" pos:column="15">Core</name><op:operator pos:line="6" pos:column="19">.</op:operator><name pos:line="6" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="7" pos:column="1">using <name pos:line="7" pos:column="7">Moq</name>;</using>
<using pos:line="8" pos:column="1">using <name pos:line="8" pos:column="7">Xunit</name>;</using>

<namespace pos:line="10" pos:column="1">namespace <name><name pos:line="10" pos:column="11">Glimpse</name><op:operator pos:line="10" pos:column="18">.</op:operator><name pos:line="10" pos:column="19">Test</name><op:operator pos:line="10" pos:column="23">.</op:operator><name pos:line="10" pos:column="24">AspNet</name></name>
<block pos:line="11" pos:column="1">{
    <class><specifier pos:line="12" pos:column="5">public</specifier> class <name pos:line="12" pos:column="18">PreBodyTagFilterShould</name>
    <block pos:line="13" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="14" pos:column="9">private</specifier> <name><name pos:line="14" pos:column="17">Mock</name><argument_list pos:line="14" pos:column="21">&lt;<argument><name pos:line="14" pos:column="22">ILogger</name></argument>&gt;</argument_list></name></type> <name pos:line="14" pos:column="31">LoggerMock</name> <block pos:line="14" pos:column="42">{ <function_decl><name pos:line="14" pos:column="44">get</name>;</function_decl> <function_decl><name pos:line="14" pos:column="49">set</name>;</function_decl> }</block></decl></decl_stmt>

        <constructor><specifier pos:line="16" pos:column="9">public</specifier> <name pos:line="16" pos:column="16">PreBodyTagFilterShould</name><parameter_list pos:line="16" pos:column="38">()</parameter_list>
        <block pos:line="17" pos:column="9">{
            <expr_stmt><expr><name pos:line="18" pos:column="13">LoggerMock</name> <op:operator pos:line="18" pos:column="24">=</op:operator> <op:operator pos:line="18" pos:column="26">new</op:operator> <call><name><name pos:line="18" pos:column="30">Mock</name><argument_list pos:line="18" pos:column="34">&lt;<argument><name pos:line="18" pos:column="35">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="18" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><attribute pos:line="21" pos:column="9">[<expr><name pos:line="21" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="22" pos:column="9">public</specifier> <name pos:line="22" pos:column="16">void</name></type> <name pos:line="22" pos:column="21">HaveReplacedTheClosingBodyTag</name><parameter_list pos:line="22" pos:column="50">()</parameter_list>
        <block pos:line="23" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="24" pos:column="13">DoHaveReplacedTheClosingBodyTag</name><argument_list pos:line="24" pos:column="44">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="27" pos:column="9">[<expr><name pos:line="27" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="28" pos:column="9">public</specifier> <name pos:line="28" pos:column="16">void</name></type> <name pos:line="28" pos:column="21">HaveReplacedTheClosingBodyTagEvenWhenInputIsChunked</name><parameter_list pos:line="28" pos:column="72">()</parameter_list>
        <block pos:line="29" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="30" pos:column="13">DoHaveReplacedTheClosingBodyTag</name><argument_list pos:line="30" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="30" pos:column="45">10</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="33" pos:column="9">private</specifier> <name pos:line="33" pos:column="17">void</name></type> <name pos:line="33" pos:column="22">DoHaveReplacedTheClosingBodyTag</name><parameter_list pos:line="33" pos:column="53">(<param><decl><type><name pos:line="33" pos:column="54">int</name><type:modifier pos:line="33" pos:column="57">?</type:modifier></type> <name pos:line="33" pos:column="59">chunkLastNumberOfCharacters</name> <init pos:line="33" pos:column="87">= <expr><name pos:line="33" pos:column="89">null</name></expr></init></decl></param>)</parameter_list>
        <block pos:line="34" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="35" pos:column="13">const</specifier> <name pos:line="35" pos:column="19">string</name></type> <name pos:line="35" pos:column="26">htmlSnippet</name> <init pos:line="35" pos:column="38">= <expr><lit:literal type="string" pos:line="35" pos:column="40">"MY HTML SNIPPET"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="36" pos:column="13">const</specifier> <name pos:line="36" pos:column="19">string</name></type> <name pos:line="36" pos:column="26">inputToProcess</name> <init pos:line="36" pos:column="41">= <expr><lit:literal type="string" pos:line="36" pos:column="43">"&lt;html&gt;&lt;body&gt;&lt;span&gt;some content&lt;/span&gt;&lt;/body&gt;&lt;/html&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="37" pos:column="13">const</specifier> <name pos:line="37" pos:column="19">string</name></type> <name pos:line="37" pos:column="26">expectedResult</name> <init pos:line="37" pos:column="41">= <expr><lit:literal type="string" pos:line="37" pos:column="43">"&lt;html&gt;&lt;body&gt;&lt;span&gt;some content&lt;/span&gt;"</lit:literal> <op:operator pos:line="37" pos:column="83">+</op:operator> <name pos:line="37" pos:column="85">htmlSnippet</name> <op:operator pos:line="37" pos:column="97">+</op:operator> <lit:literal type="string" pos:line="37" pos:column="99">"&lt;/body&gt;&lt;/html&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="38" pos:column="13">string</name></type> <name pos:line="38" pos:column="20">result</name> <init pos:line="38" pos:column="27">= <expr><call><name pos:line="38" pos:column="29">ProcessInputByPreBodyTagFilter</name><argument_list pos:line="38" pos:column="59">(<argument><expr><name pos:line="38" pos:column="60">inputToProcess</name></expr></argument>, <argument><expr><name pos:line="38" pos:column="76">htmlSnippet</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="38" pos:column="89">"REQUEST URL"</lit:literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="104">chunkLastNumberOfCharacters</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="39" pos:column="13">Assert</name><op:operator pos:line="39" pos:column="19">.</op:operator><name pos:line="39" pos:column="20">Equal</name></name><argument_list pos:line="39" pos:column="25">(<argument><expr><name pos:line="39" pos:column="26">expectedResult</name></expr></argument>, <argument><expr><name pos:line="39" pos:column="42">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="42" pos:column="9">[<expr><name pos:line="42" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="43" pos:column="9">public</specifier> <name pos:line="43" pos:column="16">void</name></type> <name pos:line="43" pos:column="21">HaveReplacedTheClosingBodyTagEvenWhenBodyTagIsBadlyCased</name><parameter_list pos:line="43" pos:column="77">()</parameter_list>
        <block pos:line="44" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="45" pos:column="13">DoHaveReplacedTheClosingBodyTagEvenWhenBodyTagIsBadlyCased</name><argument_list pos:line="45" pos:column="71">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="48" pos:column="9">[<expr><name pos:line="48" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="49" pos:column="9">public</specifier> <name pos:line="49" pos:column="16">void</name></type> <name pos:line="49" pos:column="21">HaveReplacedTheClosingBodyTagEvenWhenBodyTagIsBadlyCasedEvenWhenInputIsChunked</name><parameter_list pos:line="49" pos:column="99">()</parameter_list>
        <block pos:line="50" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="51" pos:column="13">DoHaveReplacedTheClosingBodyTagEvenWhenBodyTagIsBadlyCased</name><argument_list pos:line="51" pos:column="71">(<argument><expr><lit:literal type="number" pos:line="51" pos:column="72">10</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="54" pos:column="9">public</specifier> <name pos:line="54" pos:column="16">void</name></type> <name pos:line="54" pos:column="21">DoHaveReplacedTheClosingBodyTagEvenWhenBodyTagIsBadlyCased</name><parameter_list pos:line="54" pos:column="79">(<param><decl><type><name pos:line="54" pos:column="80">int</name><type:modifier pos:line="54" pos:column="83">?</type:modifier></type> <name pos:line="54" pos:column="85">chunkLastNumberOfCharacters</name> <init pos:line="54" pos:column="113">= <expr><name pos:line="54" pos:column="115">null</name></expr></init></decl></param>)</parameter_list>
        <block pos:line="55" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="56" pos:column="13">const</specifier> <name pos:line="56" pos:column="19">string</name></type> <name pos:line="56" pos:column="26">htmlSnippet</name> <init pos:line="56" pos:column="38">= <expr><lit:literal type="string" pos:line="56" pos:column="40">"MY HTML SNIPPET"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="57" pos:column="13">const</specifier> <name pos:line="57" pos:column="19">string</name></type> <name pos:line="57" pos:column="26">inputToProcess</name> <init pos:line="57" pos:column="41">= <expr><lit:literal type="string" pos:line="57" pos:column="43">"&lt;html&gt;&lt;body&gt;&lt;span&gt;some content&lt;/span&gt;&lt;/BoDy&gt;&lt;/html&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="58" pos:column="13">const</specifier> <name pos:line="58" pos:column="19">string</name></type> <name pos:line="58" pos:column="26">expectedResult</name> <init pos:line="58" pos:column="41">= <expr><lit:literal type="string" pos:line="58" pos:column="43">"&lt;html&gt;&lt;body&gt;&lt;span&gt;some content&lt;/span&gt;"</lit:literal> <op:operator pos:line="58" pos:column="83">+</op:operator> <name pos:line="58" pos:column="85">htmlSnippet</name> <op:operator pos:line="58" pos:column="97">+</op:operator> <lit:literal type="string" pos:line="58" pos:column="99">"&lt;/body&gt;&lt;/html&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="59" pos:column="13">string</name></type> <name pos:line="59" pos:column="20">result</name> <init pos:line="59" pos:column="27">= <expr><call><name pos:line="59" pos:column="29">ProcessInputByPreBodyTagFilter</name><argument_list pos:line="59" pos:column="59">(<argument><expr><name pos:line="59" pos:column="60">inputToProcess</name></expr></argument>, <argument><expr><name pos:line="59" pos:column="76">htmlSnippet</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="59" pos:column="89">"REQUEST URL"</lit:literal></expr></argument>, <argument><expr><name pos:line="59" pos:column="104">chunkLastNumberOfCharacters</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="60" pos:column="13">Assert</name><op:operator pos:line="60" pos:column="19">.</op:operator><name pos:line="60" pos:column="20">Equal</name></name><argument_list pos:line="60" pos:column="25">(<argument><expr><name pos:line="60" pos:column="26">expectedResult</name></expr></argument>, <argument><expr><name pos:line="60" pos:column="42">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="63" pos:column="9">[<expr><name pos:line="63" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="64" pos:column="9">public</specifier> <name pos:line="64" pos:column="16">void</name></type> <name pos:line="64" pos:column="21">HaveWrittenWarningWhenThereIsNoClosingBodyTag</name><parameter_list pos:line="64" pos:column="66">()</parameter_list>
        <block pos:line="65" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="66" pos:column="13">DoHaveWrittenWarningWhenThereIsNoClosingBodyTag</name><argument_list pos:line="66" pos:column="60">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="69" pos:column="9">[<expr><name pos:line="69" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="70" pos:column="9">public</specifier> <name pos:line="70" pos:column="16">void</name></type> <name pos:line="70" pos:column="21">HaveWrittenWarningWhenThereIsNoClosingBodyTagEvenWhenInputIsChunked</name><parameter_list pos:line="70" pos:column="88">()</parameter_list>
        <block pos:line="71" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="72" pos:column="13">DoHaveWrittenWarningWhenThereIsNoClosingBodyTag</name><argument_list pos:line="72" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="72" pos:column="61">10</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="75" pos:column="9">private</specifier> <name pos:line="75" pos:column="17">void</name></type> <name pos:line="75" pos:column="22">DoHaveWrittenWarningWhenThereIsNoClosingBodyTag</name><parameter_list pos:line="75" pos:column="69">(<param><decl><type><name pos:line="75" pos:column="70">int</name><type:modifier pos:line="75" pos:column="73">?</type:modifier></type> <name pos:line="75" pos:column="75">chunkLastNumberOfCharacters</name> <init pos:line="75" pos:column="103">= <expr><name pos:line="75" pos:column="105">null</name></expr></init></decl></param>)</parameter_list>
        <block pos:line="76" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="77" pos:column="13">LoggerMock</name><op:operator pos:line="77" pos:column="23">.</op:operator><name pos:line="77" pos:column="24">Setup</name></name><argument_list pos:line="77" pos:column="29">(<argument><expr><lambda><name pos:line="77" pos:column="30">m</name> <op:operator pos:line="77" pos:column="32">=&gt;</op:operator> <call><name><name pos:line="77" pos:column="35">m</name><op:operator pos:line="77" pos:column="36">.</op:operator><name pos:line="77" pos:column="37">Warn</name></name><argument_list pos:line="77" pos:column="41">(<argument><expr><name pos:line="77" pos:column="42">null</name></expr></argument>, <argument><expr><op:operator pos:line="77" pos:column="48">(</op:operator><name><name pos:line="77" pos:column="49">object</name><index pos:line="77" pos:column="55">[]</index></name><op:operator pos:line="77" pos:column="57">)</op:operator><name pos:line="77" pos:column="58">null</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="77" pos:column="64">.</op:operator><call><name pos:line="77" pos:column="65">Verifiable</name><argument_list pos:line="77" pos:column="75">()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier pos:line="78" pos:column="13">const</specifier> <name pos:line="78" pos:column="19">string</name></type> <name pos:line="78" pos:column="26">inputToProcess</name> <init pos:line="78" pos:column="41">= <expr><lit:literal type="string" pos:line="78" pos:column="43">"&lt;html&gt;&lt;body&gt;some content&lt;/html&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="79" pos:column="13">string</name></type> <name pos:line="79" pos:column="20">result</name> <init pos:line="79" pos:column="27">= <expr><call><name pos:line="79" pos:column="29">ProcessInputByPreBodyTagFilter</name><argument_list pos:line="79" pos:column="59">(<argument><expr><name pos:line="79" pos:column="60">inputToProcess</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="79" pos:column="76">"HTML SNIPPET"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="79" pos:column="92">"REQUEST URL"</lit:literal></expr></argument>, <argument><expr><name pos:line="79" pos:column="107">chunkLastNumberOfCharacters</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="81" pos:column="13">LoggerMock</name><op:operator pos:line="81" pos:column="23">.</op:operator><name pos:line="81" pos:column="24">Verify</name></name><argument_list pos:line="81" pos:column="30">(
                <argument><expr><lambda><name pos:line="82" pos:column="17">logger</name> <op:operator pos:line="82" pos:column="24">=&gt;</op:operator> <call><name><name pos:line="82" pos:column="27">logger</name><op:operator pos:line="82" pos:column="33">.</op:operator><name pos:line="82" pos:column="34">Warn</name></name><argument_list pos:line="82" pos:column="38">(
                            <argument><expr><lit:literal type="string" pos:line="83" pos:column="29">"Unable to locate '&lt;/body&gt;' with content encoding '{0}' for request '{1}'. The response may be compressed or the markup may actually be missing a '&lt;/body&gt;' tag. See {2} for information on troubleshooting this issue."</lit:literal></expr></argument>,
                            <argument><expr><call><name><name pos:line="84" pos:column="29">It</name><op:operator pos:line="84" pos:column="31">.</op:operator><name><name pos:line="84" pos:column="32">Is</name><argument_list pos:line="84" pos:column="34">&lt;<argument><name><name pos:line="84" pos:column="35">object</name><index pos:line="84" pos:column="41">[]</index></name></argument>&gt;</argument_list></name></name><argument_list pos:line="84" pos:column="44">(<argument><expr><lambda><name pos:line="84" pos:column="45">arguments</name> <op:operator pos:line="84" pos:column="55">=&gt;</op:operator> <name><name pos:line="84" pos:column="58">arguments</name><op:operator pos:line="84" pos:column="67">.</op:operator><name pos:line="84" pos:column="68">Length</name></name> <op:operator pos:line="84" pos:column="75">==</op:operator> <lit:literal type="number" pos:line="84" pos:column="78">3</lit:literal> <op:operator pos:line="84" pos:column="80">&amp;&amp;</op:operator> <call><name><name pos:line="84" pos:column="83">object</name><op:operator pos:line="84" pos:column="89">.</op:operator><name pos:line="84" pos:column="90">Equals</name></name><argument_list pos:line="84" pos:column="96">(<argument><expr><name><name pos:line="84" pos:column="97">arguments</name><index pos:line="84" pos:column="106">[<expr><lit:literal type="number" pos:line="84" pos:column="107">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name><name pos:line="84" pos:column="111">Encoding</name><op:operator pos:line="84" pos:column="119">.</op:operator><name pos:line="84" pos:column="120">UTF8</name><op:operator pos:line="84" pos:column="124">.</op:operator><name pos:line="84" pos:column="125">EncodingName</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="84" pos:column="139">&amp;&amp;</op:operator> <call><name><name pos:line="84" pos:column="142">object</name><op:operator pos:line="84" pos:column="148">.</op:operator><name pos:line="84" pos:column="149">Equals</name></name><argument_list pos:line="84" pos:column="155">(<argument><expr><name><name pos:line="84" pos:column="156">arguments</name><index pos:line="84" pos:column="165">[<expr><lit:literal type="number" pos:line="84" pos:column="166">1</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="84" pos:column="170">"REQUEST URL"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="84" pos:column="185">&amp;&amp;</op:operator> <call><name><name pos:line="84" pos:column="188">object</name><op:operator pos:line="84" pos:column="194">.</op:operator><name pos:line="84" pos:column="195">Equals</name></name><argument_list pos:line="84" pos:column="201">(<argument><expr><name><name pos:line="84" pos:column="202">arguments</name><index pos:line="84" pos:column="211">[<expr><lit:literal type="number" pos:line="84" pos:column="212">2</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="84" pos:column="216">"http://getglimpse.com/Help/Troubleshooting"</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>,
                <argument><expr><call><name><name pos:line="85" pos:column="17">Times</name><op:operator pos:line="85" pos:column="22">.</op:operator><name pos:line="85" pos:column="23">Once</name></name><argument_list pos:line="85" pos:column="27">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="87" pos:column="13">Assert</name><op:operator pos:line="87" pos:column="19">.</op:operator><name pos:line="87" pos:column="20">Equal</name></name><argument_list pos:line="87" pos:column="25">(<argument><expr><name pos:line="87" pos:column="26">inputToProcess</name></expr></argument>, <argument><expr><name pos:line="87" pos:column="42">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="90" pos:column="9">[<expr><name pos:line="90" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="91" pos:column="9">public</specifier> <name pos:line="91" pos:column="16">void</name></type> <name pos:line="91" pos:column="21">HaveWrittenWarningWhenThereIsNoClosingBodyTagAndSpecifiedRequestUrlIsNull</name><parameter_list pos:line="91" pos:column="94">()</parameter_list>
        <block pos:line="92" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="93" pos:column="13">DoHaveWrittenWarningWhenThereIsNoClosingBodyTagAndSpecifiedRequestUrlIsNull</name><argument_list pos:line="93" pos:column="88">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="96" pos:column="9">[<expr><name pos:line="96" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="97" pos:column="9">public</specifier> <name pos:line="97" pos:column="16">void</name></type> <name pos:line="97" pos:column="21">HaveWrittenWarningWhenThereIsNoClosingBodyTagAndSpecifiedRequestUrlIsNullEvenWhenInputIsChunked</name><parameter_list pos:line="97" pos:column="116">()</parameter_list>
        <block pos:line="98" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="99" pos:column="13">DoHaveWrittenWarningWhenThereIsNoClosingBodyTagAndSpecifiedRequestUrlIsNull</name><argument_list pos:line="99" pos:column="88">(<argument><expr><lit:literal type="number" pos:line="99" pos:column="89">10</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="102" pos:column="9">private</specifier> <name pos:line="102" pos:column="17">void</name></type> <name pos:line="102" pos:column="22">DoHaveWrittenWarningWhenThereIsNoClosingBodyTagAndSpecifiedRequestUrlIsNull</name><parameter_list pos:line="102" pos:column="97">(<param><decl><type><name pos:line="102" pos:column="98">int</name><type:modifier pos:line="102" pos:column="101">?</type:modifier></type> <name pos:line="102" pos:column="103">chunkLastNumberOfCharacters</name> <init pos:line="102" pos:column="131">= <expr><name pos:line="102" pos:column="133">null</name></expr></init></decl></param>)</parameter_list>
        <block pos:line="103" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="104" pos:column="13">LoggerMock</name><op:operator pos:line="104" pos:column="23">.</op:operator><name pos:line="104" pos:column="24">Setup</name></name><argument_list pos:line="104" pos:column="29">(<argument><expr><lambda><name pos:line="104" pos:column="30">m</name> <op:operator pos:line="104" pos:column="32">=&gt;</op:operator> <call><name><name pos:line="104" pos:column="35">m</name><op:operator pos:line="104" pos:column="36">.</op:operator><name pos:line="104" pos:column="37">Warn</name></name><argument_list pos:line="104" pos:column="41">(<argument><expr><name pos:line="104" pos:column="42">null</name></expr></argument>, <argument><expr><op:operator pos:line="104" pos:column="48">(</op:operator><name><name pos:line="104" pos:column="49">object</name><index pos:line="104" pos:column="55">[]</index></name><op:operator pos:line="104" pos:column="57">)</op:operator><name pos:line="104" pos:column="58">null</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="104" pos:column="64">.</op:operator><call><name pos:line="104" pos:column="65">Verifiable</name><argument_list pos:line="104" pos:column="75">()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier pos:line="105" pos:column="13">const</specifier> <name pos:line="105" pos:column="19">string</name></type> <name pos:line="105" pos:column="26">inputToProcess</name> <init pos:line="105" pos:column="41">= <expr><lit:literal type="string" pos:line="105" pos:column="43">"&lt;html&gt;&lt;body&gt;some content&lt;/html&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="106" pos:column="13">string</name></type> <name pos:line="106" pos:column="20">result</name> <init pos:line="106" pos:column="27">= <expr><call><name pos:line="106" pos:column="29">ProcessInputByPreBodyTagFilter</name><argument_list pos:line="106" pos:column="59">(<argument><expr><name pos:line="106" pos:column="60">inputToProcess</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="106" pos:column="76">"HTML SNIPPET"</lit:literal></expr></argument>, <argument><expr><name pos:line="106" pos:column="92">null</name></expr></argument>, <argument><expr><name pos:line="106" pos:column="98">chunkLastNumberOfCharacters</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="108" pos:column="13">LoggerMock</name><op:operator pos:line="108" pos:column="23">.</op:operator><name pos:line="108" pos:column="24">Verify</name></name><argument_list pos:line="108" pos:column="30">(
                <argument><expr><lambda><name pos:line="109" pos:column="17">logger</name> <op:operator pos:line="109" pos:column="24">=&gt;</op:operator> <call><name><name pos:line="109" pos:column="27">logger</name><op:operator pos:line="109" pos:column="33">.</op:operator><name pos:line="109" pos:column="34">Warn</name></name><argument_list pos:line="109" pos:column="38">(
                            <argument><expr><lit:literal type="string" pos:line="110" pos:column="29">"Unable to locate '&lt;/body&gt;' with content encoding '{0}' for request '{1}'. The response may be compressed or the markup may actually be missing a '&lt;/body&gt;' tag. See {2} for information on troubleshooting this issue."</lit:literal></expr></argument>,
                            <argument><expr><call><name><name pos:line="111" pos:column="29">It</name><op:operator pos:line="111" pos:column="31">.</op:operator><name><name pos:line="111" pos:column="32">Is</name><argument_list pos:line="111" pos:column="34">&lt;<argument><name><name pos:line="111" pos:column="35">object</name><index pos:line="111" pos:column="41">[]</index></name></argument>&gt;</argument_list></name></name><argument_list pos:line="111" pos:column="44">(<argument><expr><lambda><name pos:line="111" pos:column="45">arguments</name> <op:operator pos:line="111" pos:column="55">=&gt;</op:operator> <name><name pos:line="111" pos:column="58">arguments</name><op:operator pos:line="111" pos:column="67">.</op:operator><name pos:line="111" pos:column="68">Length</name></name> <op:operator pos:line="111" pos:column="75">==</op:operator> <lit:literal type="number" pos:line="111" pos:column="78">3</lit:literal> <op:operator pos:line="111" pos:column="80">&amp;&amp;</op:operator> <call><name><name pos:line="111" pos:column="83">object</name><op:operator pos:line="111" pos:column="89">.</op:operator><name pos:line="111" pos:column="90">Equals</name></name><argument_list pos:line="111" pos:column="96">(<argument><expr><name><name pos:line="111" pos:column="97">arguments</name><index pos:line="111" pos:column="106">[<expr><lit:literal type="number" pos:line="111" pos:column="107">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name><name pos:line="111" pos:column="111">Encoding</name><op:operator pos:line="111" pos:column="119">.</op:operator><name pos:line="111" pos:column="120">UTF8</name><op:operator pos:line="111" pos:column="124">.</op:operator><name pos:line="111" pos:column="125">EncodingName</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="111" pos:column="139">&amp;&amp;</op:operator> <call><name><name pos:line="111" pos:column="142">object</name><op:operator pos:line="111" pos:column="148">.</op:operator><name pos:line="111" pos:column="149">Equals</name></name><argument_list pos:line="111" pos:column="155">(<argument><expr><name><name pos:line="111" pos:column="156">arguments</name><index pos:line="111" pos:column="165">[<expr><lit:literal type="number" pos:line="111" pos:column="166">1</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="111" pos:column="170">"unknown"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="111" pos:column="181">&amp;&amp;</op:operator> <call><name><name pos:line="111" pos:column="184">object</name><op:operator pos:line="111" pos:column="190">.</op:operator><name pos:line="111" pos:column="191">Equals</name></name><argument_list pos:line="111" pos:column="197">(<argument><expr><name><name pos:line="111" pos:column="198">arguments</name><index pos:line="111" pos:column="207">[<expr><lit:literal type="number" pos:line="111" pos:column="208">2</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="111" pos:column="212">"http://getglimpse.com/Help/Troubleshooting"</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>,
                <argument><expr><call><name><name pos:line="112" pos:column="17">Times</name><op:operator pos:line="112" pos:column="22">.</op:operator><name pos:line="112" pos:column="23">Once</name></name><argument_list pos:line="112" pos:column="27">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="114" pos:column="13">Assert</name><op:operator pos:line="114" pos:column="19">.</op:operator><name pos:line="114" pos:column="20">Equal</name></name><argument_list pos:line="114" pos:column="25">(<argument><expr><name pos:line="114" pos:column="26">inputToProcess</name></expr></argument>, <argument><expr><name pos:line="114" pos:column="42">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="117" pos:column="9">[<expr><name pos:line="117" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="118" pos:column="9">public</specifier> <name pos:line="118" pos:column="16">void</name></type> <name pos:line="118" pos:column="21">HaveOnlyReplacedTheLastClosingBodyTag</name><parameter_list pos:line="118" pos:column="58">()</parameter_list>
        <block pos:line="119" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="120" pos:column="13">DoHaveOnlyReplacedTheLastClosingBodyTag</name><argument_list pos:line="120" pos:column="52">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="123" pos:column="9">[<expr><name pos:line="123" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="124" pos:column="9">public</specifier> <name pos:line="124" pos:column="16">void</name></type> <name pos:line="124" pos:column="21">HaveOnlyReplacedTheLastClosingBodyTagEvenWhenInputIsChunked</name><parameter_list pos:line="124" pos:column="80">()</parameter_list>
        <block pos:line="125" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="126" pos:column="13">DoHaveOnlyReplacedTheLastClosingBodyTag</name><argument_list pos:line="126" pos:column="52">(<argument><expr><lit:literal type="number" pos:line="126" pos:column="53">20</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="129" pos:column="9">private</specifier> <name pos:line="129" pos:column="17">void</name></type> <name pos:line="129" pos:column="22">DoHaveOnlyReplacedTheLastClosingBodyTag</name><parameter_list pos:line="129" pos:column="61">(<param><decl><type><name pos:line="129" pos:column="62">int</name><type:modifier pos:line="129" pos:column="65">?</type:modifier></type> <name pos:line="129" pos:column="67">chunkLastNumberOfCharacters</name> <init pos:line="129" pos:column="95">= <expr><name pos:line="129" pos:column="97">null</name></expr></init></decl></param>)</parameter_list>
        <block pos:line="130" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="131" pos:column="13">const</specifier> <name pos:line="131" pos:column="19">string</name></type> <name pos:line="131" pos:column="26">htmlSnippet</name> <init pos:line="131" pos:column="38">= <expr><lit:literal type="string" pos:line="131" pos:column="40">"MY HTML SNIPPET"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="132" pos:column="13">const</specifier> <name pos:line="132" pos:column="19">string</name></type> <name pos:line="132" pos:column="26">inputToProcess</name> <init pos:line="132" pos:column="41">= <expr><lit:literal type="string" pos:line="132" pos:column="43">"&lt;html&gt;&lt;body&gt;&lt;span&gt;some content&lt;/span&gt;&lt;/body&gt;&lt;p&gt;some more content&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="133" pos:column="13">const</specifier> <name pos:line="133" pos:column="19">string</name></type> <name pos:line="133" pos:column="26">expectedResult</name> <init pos:line="133" pos:column="41">= <expr><lit:literal type="string" pos:line="133" pos:column="43">"&lt;html&gt;&lt;body&gt;&lt;span&gt;some content&lt;/span&gt;&lt;/body&gt;&lt;p&gt;some more content&lt;/p&gt;"</lit:literal> <op:operator pos:line="133" pos:column="114">+</op:operator> <name pos:line="133" pos:column="116">htmlSnippet</name> <op:operator pos:line="133" pos:column="128">+</op:operator> <lit:literal type="string" pos:line="133" pos:column="130">"&lt;/body&gt;&lt;/html&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="134" pos:column="13">string</name></type> <name pos:line="134" pos:column="20">result</name> <init pos:line="134" pos:column="27">= <expr><call><name pos:line="134" pos:column="29">ProcessInputByPreBodyTagFilter</name><argument_list pos:line="134" pos:column="59">(<argument><expr><name pos:line="134" pos:column="60">inputToProcess</name></expr></argument>, <argument><expr><name pos:line="134" pos:column="76">htmlSnippet</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="134" pos:column="89">"REQUEST URL"</lit:literal></expr></argument>, <argument><expr><name pos:line="134" pos:column="104">chunkLastNumberOfCharacters</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="135" pos:column="13">Assert</name><op:operator pos:line="135" pos:column="19">.</op:operator><name pos:line="135" pos:column="20">Equal</name></name><argument_list pos:line="135" pos:column="25">(<argument><expr><name pos:line="135" pos:column="26">expectedResult</name></expr></argument>, <argument><expr><name pos:line="135" pos:column="42">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="138" pos:column="9">[<expr><name pos:line="138" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="139" pos:column="9">public</specifier> <name pos:line="139" pos:column="16">void</name></type> <name pos:line="139" pos:column="21">HaveReplacedTheLastClosingBodyTagWithOnlyAnotherClosingBodyTagWhenTheHtmlSnippetIsNullOrEmpty</name><parameter_list pos:line="139" pos:column="114">()</parameter_list>
        <block pos:line="140" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="141" pos:column="13">DoHaveReplacedTheLastClosingBodyTagWithOnlyAnotherClosingBodyTagWhenTheHtmlSnippetIsNullOrEmpty</name><argument_list pos:line="141" pos:column="108">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="144" pos:column="9">[<expr><name pos:line="144" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="145" pos:column="9">public</specifier> <name pos:line="145" pos:column="16">void</name></type> <name pos:line="145" pos:column="21">HaveReplacedTheLastClosingBodyTagWithOnlyAnotherClosingBodyTagWhenTheHtmlSnippetIsNullOrEmptyEvenWhenInputIsChunked</name><parameter_list pos:line="145" pos:column="136">()</parameter_list>
        <block pos:line="146" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="147" pos:column="13">DoHaveReplacedTheLastClosingBodyTagWithOnlyAnotherClosingBodyTagWhenTheHtmlSnippetIsNullOrEmpty</name><argument_list pos:line="147" pos:column="108">(<argument><expr><lit:literal type="number" pos:line="147" pos:column="109">10</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="150" pos:column="9">private</specifier> <name pos:line="150" pos:column="17">void</name></type> <name pos:line="150" pos:column="22">DoHaveReplacedTheLastClosingBodyTagWithOnlyAnotherClosingBodyTagWhenTheHtmlSnippetIsNullOrEmpty</name><parameter_list pos:line="150" pos:column="117">(<param><decl><type><name pos:line="150" pos:column="118">int</name><type:modifier pos:line="150" pos:column="121">?</type:modifier></type> <name pos:line="150" pos:column="123">chunkLastNumberOfCharacters</name> <init pos:line="150" pos:column="151">= <expr><name pos:line="150" pos:column="153">null</name></expr></init></decl></param>)</parameter_list>
        <block pos:line="151" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="152" pos:column="13">const</specifier> <name pos:line="152" pos:column="19">string</name></type> <name pos:line="152" pos:column="26">inputToProcess</name> <init pos:line="152" pos:column="41">= <expr><lit:literal type="string" pos:line="152" pos:column="43">"&lt;html&gt;&lt;body&gt;&lt;span&gt;some content&lt;/span&gt;&lt;/body&gt;&lt;p&gt;some more content&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="153" pos:column="13">string</name></type> <name pos:line="153" pos:column="20">result</name> <init pos:line="153" pos:column="27">= <expr><call><name pos:line="153" pos:column="29">ProcessInputByPreBodyTagFilter</name><argument_list pos:line="153" pos:column="59">(<argument><expr><name pos:line="153" pos:column="60">inputToProcess</name></expr></argument>, <argument><expr><name pos:line="153" pos:column="76">null</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="153" pos:column="82">"REQUEST URL"</lit:literal></expr></argument>, <argument><expr><name pos:line="153" pos:column="97">chunkLastNumberOfCharacters</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="154" pos:column="13">Assert</name><op:operator pos:line="154" pos:column="19">.</op:operator><name pos:line="154" pos:column="20">Equal</name></name><argument_list pos:line="154" pos:column="25">(<argument><expr><name pos:line="154" pos:column="26">inputToProcess</name></expr></argument>, <argument><expr><name pos:line="154" pos:column="42">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="156" pos:column="13">result</name> <op:operator pos:line="156" pos:column="20">=</op:operator> <call><name pos:line="156" pos:column="22">ProcessInputByPreBodyTagFilter</name><argument_list pos:line="156" pos:column="52">(<argument><expr><name pos:line="156" pos:column="53">inputToProcess</name></expr></argument>, <argument><expr><name><name pos:line="156" pos:column="69">string</name><op:operator pos:line="156" pos:column="75">.</op:operator><name pos:line="156" pos:column="76">Empty</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="156" pos:column="83">"REQUEST URL"</lit:literal></expr></argument>, <argument><expr><name pos:line="156" pos:column="98">chunkLastNumberOfCharacters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="157" pos:column="13">Assert</name><op:operator pos:line="157" pos:column="19">.</op:operator><name pos:line="157" pos:column="20">Equal</name></name><argument_list pos:line="157" pos:column="25">(<argument><expr><name pos:line="157" pos:column="26">inputToProcess</name></expr></argument>, <argument><expr><name pos:line="157" pos:column="42">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="160" pos:column="9">private</specifier> <name pos:line="160" pos:column="17">string</name></type> <name pos:line="160" pos:column="24">ProcessInputByPreBodyTagFilter</name><parameter_list pos:line="160" pos:column="54">(<param><decl><type><name pos:line="160" pos:column="55">string</name></type> <name pos:line="160" pos:column="62">inputToProcess</name></decl></param>, <param><decl><type><name pos:line="160" pos:column="78">string</name></type> <name pos:line="160" pos:column="85">htmlSnippet</name></decl></param>, <param><decl><type><name pos:line="160" pos:column="98">string</name></type> <name pos:line="160" pos:column="105">requestUrl</name></decl></param>, <param><decl><type><name pos:line="160" pos:column="117">int</name><type:modifier pos:line="160" pos:column="120">?</type:modifier></type> <name pos:line="160" pos:column="122">chunkLastNumberOfCharacters</name></decl></param>)</parameter_list>
        <block pos:line="161" pos:column="9">{
            <using pos:line="162" pos:column="13">using (<decl><type><name pos:line="162" pos:column="20">var</name></type> <name pos:line="162" pos:column="24">memoryStream</name> <init pos:line="162" pos:column="37">= <expr><op:operator pos:line="162" pos:column="39">new</op:operator> <call><name pos:line="162" pos:column="43">MemoryStream</name><argument_list pos:line="162" pos:column="55">()</argument_list></call></expr></init></decl>)
            <block pos:line="163" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="164" pos:column="17">var</name></type> <name pos:line="164" pos:column="21">preBodyTagFilter</name> <init pos:line="164" pos:column="38">= <expr><op:operator pos:line="164" pos:column="40">new</op:operator> <call><name pos:line="164" pos:column="44">PreBodyTagFilter</name><argument_list pos:line="164" pos:column="60">(<argument><expr><name pos:line="164" pos:column="61">htmlSnippet</name></expr></argument>, <argument><expr><name pos:line="164" pos:column="74">memoryStream</name></expr></argument>, <argument><expr><name><name pos:line="164" pos:column="88">Encoding</name><op:operator pos:line="164" pos:column="96">.</op:operator><name pos:line="164" pos:column="97">UTF8</name></name></expr></argument>, <argument><expr><name pos:line="164" pos:column="103">requestUrl</name></expr></argument>, <argument><expr><name><name pos:line="164" pos:column="115">LoggerMock</name><op:operator pos:line="164" pos:column="125">.</op:operator><name pos:line="164" pos:column="126">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name pos:line="166" pos:column="17">string</name><index pos:line="166" pos:column="23">[]</index></type> <name pos:line="166" pos:column="26">inputsToProcess</name> <init pos:line="166" pos:column="42">= <expr><block pos:line="166" pos:column="44">{ <expr><name pos:line="166" pos:column="46">inputToProcess</name></expr> }</block></expr></init></decl>;</decl_stmt>
                <if pos:line="167" pos:column="17">if <condition pos:line="167" pos:column="20">(<expr><name><name pos:line="167" pos:column="21">chunkLastNumberOfCharacters</name><op:operator pos:line="167" pos:column="48">.</op:operator><name pos:line="167" pos:column="49">HasValue</name></name></expr>)</condition><then pos:line="167" pos:column="58">
                <block pos:line="168" pos:column="17">{
                    <expr_stmt><expr><name pos:line="169" pos:column="21">inputsToProcess</name> <op:operator pos:line="169" pos:column="37">=</op:operator> <op:operator pos:line="169" pos:column="39">new</op:operator><index pos:line="169" pos:column="42">[]</index> <block pos:line="169" pos:column="45">{ <expr><call><name><name pos:line="169" pos:column="47">inputToProcess</name><op:operator pos:line="169" pos:column="61">.</op:operator><name pos:line="169" pos:column="62">Substring</name></name><argument_list pos:line="169" pos:column="71">(<argument><expr><lit:literal type="number" pos:line="169" pos:column="72">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="169" pos:column="75">inputToProcess</name><op:operator pos:line="169" pos:column="89">.</op:operator><name pos:line="169" pos:column="90">Length</name></name> <op:operator pos:line="169" pos:column="97">-</op:operator> <name><name pos:line="169" pos:column="99">chunkLastNumberOfCharacters</name><op:operator pos:line="169" pos:column="126">.</op:operator><name pos:line="169" pos:column="127">Value</name></name></expr></argument>)</argument_list></call></expr><op:operator pos:line="169" pos:column="133">,</op:operator> <expr><call><name><name pos:line="169" pos:column="135">inputToProcess</name><op:operator pos:line="169" pos:column="149">.</op:operator><name pos:line="169" pos:column="150">Substring</name></name><argument_list pos:line="169" pos:column="159">(<argument><expr><name><name pos:line="169" pos:column="160">inputToProcess</name><op:operator pos:line="169" pos:column="174">.</op:operator><name pos:line="169" pos:column="175">Length</name></name> <op:operator pos:line="169" pos:column="182">-</op:operator> <name><name pos:line="169" pos:column="184">chunkLastNumberOfCharacters</name><op:operator pos:line="169" pos:column="211">.</op:operator><name pos:line="169" pos:column="212">Value</name></name></expr></argument>)</argument_list></call></expr> }</block></expr>;</expr_stmt>
                }</block></then></if>

                <foreach pos:line="172" pos:column="17">foreach (<init><decl><type><name pos:line="172" pos:column="26">string</name></type> <name pos:line="172" pos:column="33">inputToProcessChunk</name> <range pos:line="172" pos:column="53">in <expr><name pos:line="172" pos:column="56">inputsToProcess</name></expr></range></decl></init>)
                <block pos:line="173" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="174" pos:column="21">byte</name><index pos:line="174" pos:column="25">[]</index></type> <name pos:line="174" pos:column="28">buffer</name> <init pos:line="174" pos:column="35">= <expr><call><name><name pos:line="174" pos:column="37">Encoding</name><op:operator pos:line="174" pos:column="45">.</op:operator><name pos:line="174" pos:column="46">UTF8</name><op:operator pos:line="174" pos:column="50">.</op:operator><name pos:line="174" pos:column="51">GetBytes</name></name><argument_list pos:line="174" pos:column="59">(<argument><expr><name pos:line="174" pos:column="60">inputToProcessChunk</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="175" pos:column="21">preBodyTagFilter</name><op:operator pos:line="175" pos:column="37">.</op:operator><name pos:line="175" pos:column="38">Write</name></name><argument_list pos:line="175" pos:column="43">(<argument><expr><name pos:line="175" pos:column="44">buffer</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="175" pos:column="52">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="175" pos:column="55">buffer</name><op:operator pos:line="175" pos:column="61">.</op:operator><name pos:line="175" pos:column="62">Length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>

                <expr_stmt><expr><call><name><name pos:line="178" pos:column="17">preBodyTagFilter</name><op:operator pos:line="178" pos:column="33">.</op:operator><name pos:line="178" pos:column="34">Flush</name></name><argument_list pos:line="178" pos:column="39">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="179" pos:column="17">preBodyTagFilter</name><op:operator pos:line="179" pos:column="33">.</op:operator><name pos:line="179" pos:column="34">Position</name></name> <op:operator pos:line="179" pos:column="43">=</op:operator> <lit:literal type="number" pos:line="179" pos:column="45">0</lit:literal></expr>;</expr_stmt>

                <return pos:line="181" pos:column="17">return <expr><call><name><name pos:line="181" pos:column="24">Encoding</name><op:operator pos:line="181" pos:column="32">.</op:operator><name pos:line="181" pos:column="33">UTF8</name><op:operator pos:line="181" pos:column="37">.</op:operator><name pos:line="181" pos:column="38">GetString</name></name><argument_list pos:line="181" pos:column="47">(<argument><expr><call><name><name pos:line="181" pos:column="48">memoryStream</name><op:operator pos:line="181" pos:column="60">.</op:operator><name pos:line="181" pos:column="61">ToArray</name></name><argument_list pos:line="181" pos:column="68">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            }</block></using>
        }</block></function>

        <function><type><attribute pos:line="185" pos:column="9">[<expr><name pos:line="185" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="186" pos:column="9">public</specifier> <name pos:line="186" pos:column="16">void</name></type> <name pos:line="186" pos:column="21">HaveLeftCompressedContentUntouched</name><parameter_list pos:line="186" pos:column="55">()</parameter_list>
        <block pos:line="187" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="188" pos:column="13">var</name></type> <name pos:line="188" pos:column="17">html</name> <init pos:line="188" pos:column="22">=
                <expr><lit:literal type="string" pos:line="189" pos:column="17">"&lt;!DOCTYPE html&gt;\r\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\r\n&lt;head&gt;\r\n    &lt;title&gt;Hello&lt;/title&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n    &lt;h1&gt;Hello&lt;/h1&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n"</lit:literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="190" pos:column="13">DoHaveLeftCompressedContentUntouched</name><argument_list pos:line="190" pos:column="49">(<argument><expr><name pos:line="190" pos:column="50">html</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="190" pos:column="56">1024</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="193" pos:column="9">private</specifier> <name pos:line="193" pos:column="17">void</name></type> <name pos:line="193" pos:column="22">DoHaveLeftCompressedContentUntouched</name><parameter_list pos:line="193" pos:column="58">(<param><decl><type><name pos:line="193" pos:column="59">string</name></type> <name pos:line="193" pos:column="66">html</name></decl></param>, <param><decl><type><name pos:line="193" pos:column="72">int</name></type> <name pos:line="193" pos:column="76">bufferLength</name></decl></param>)</parameter_list>
        <block pos:line="194" pos:column="9">{
            <using pos:line="195" pos:column="13">using (<decl><type><name pos:line="195" pos:column="20">var</name></type> <name pos:line="195" pos:column="24">htmlStream</name> <init pos:line="195" pos:column="35">= <expr><op:operator pos:line="195" pos:column="37">new</op:operator> <call><name pos:line="195" pos:column="41">MemoryStream</name><argument_list pos:line="195" pos:column="53">(<argument><expr><call><name><name pos:line="195" pos:column="54">Encoding</name><op:operator pos:line="195" pos:column="62">.</op:operator><name pos:line="195" pos:column="63">UTF8</name><op:operator pos:line="195" pos:column="67">.</op:operator><name pos:line="195" pos:column="68">GetBytes</name></name><argument_list pos:line="195" pos:column="76">(<argument><expr><name pos:line="195" pos:column="77">html</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>)
            <using pos:line="196" pos:column="13">using (<decl><type><name pos:line="196" pos:column="20">var</name></type> <name pos:line="196" pos:column="24">compressedHtmlStream</name> <init pos:line="196" pos:column="45">= <expr><op:operator pos:line="196" pos:column="47">new</op:operator> <call><name pos:line="196" pos:column="51">MemoryStream</name><argument_list pos:line="196" pos:column="63">()</argument_list></call></expr></init></decl>)
            <using pos:line="197" pos:column="13">using (<decl><type><name pos:line="197" pos:column="20">var</name></type> <name pos:line="197" pos:column="24">outputStream</name> <init pos:line="197" pos:column="37">= <expr><op:operator pos:line="197" pos:column="39">new</op:operator> <call><name pos:line="197" pos:column="43">MemoryStream</name><argument_list pos:line="197" pos:column="55">()</argument_list></call></expr></init></decl>)
            <block pos:line="198" pos:column="13">{
                <using pos:line="199" pos:column="17">using (<decl><type><name pos:line="199" pos:column="24">var</name></type> <name pos:line="199" pos:column="28">compresser</name> <init pos:line="199" pos:column="39">= <expr><op:operator pos:line="199" pos:column="41">new</op:operator> <call><name pos:line="199" pos:column="45">GZipStream</name><argument_list pos:line="199" pos:column="55">(<argument><expr><name pos:line="199" pos:column="56">compressedHtmlStream</name></expr></argument>, <argument><expr><name><name pos:line="199" pos:column="78">CompressionMode</name><op:operator pos:line="199" pos:column="93">.</op:operator><name pos:line="199" pos:column="94">Compress</name></name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="199" pos:column="104">true</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>)
                <block pos:line="200" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="201" pos:column="21">htmlStream</name><op:operator pos:line="201" pos:column="31">.</op:operator><name pos:line="201" pos:column="32">CopyTo</name></name><argument_list pos:line="201" pos:column="38">(<argument><expr><name pos:line="201" pos:column="39">compresser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></using>

                <expr_stmt><expr><name><name pos:line="204" pos:column="17">compressedHtmlStream</name><op:operator pos:line="204" pos:column="37">.</op:operator><name pos:line="204" pos:column="38">Position</name></name> <op:operator pos:line="204" pos:column="47">=</op:operator> <lit:literal type="number" pos:line="204" pos:column="49">0</lit:literal></expr>;</expr_stmt>
                
                <decl_stmt><decl><type><name pos:line="206" pos:column="17">var</name></type> <name pos:line="206" pos:column="21">preBodyTagFilter</name> <init pos:line="206" pos:column="38">= <expr><op:operator pos:line="206" pos:column="40">new</op:operator> <call><name pos:line="206" pos:column="44">PreBodyTagFilter</name><argument_list pos:line="206" pos:column="60">(<argument><expr><lit:literal type="string" pos:line="206" pos:column="61">"HTML SNIPPET"</lit:literal></expr></argument>, <argument><expr><name pos:line="206" pos:column="77">outputStream</name></expr></argument>, <argument><expr><name><name pos:line="206" pos:column="91">Encoding</name><op:operator pos:line="206" pos:column="99">.</op:operator><name pos:line="206" pos:column="100">UTF8</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="206" pos:column="106">"REQUEST URL"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="206" pos:column="121">LoggerMock</name><op:operator pos:line="206" pos:column="131">.</op:operator><name pos:line="206" pos:column="132">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><name><name pos:line="208" pos:column="17">compressedHtmlStream</name><op:operator pos:line="208" pos:column="37">.</op:operator><name pos:line="208" pos:column="38">Position</name></name> <op:operator pos:line="208" pos:column="47">=</op:operator> <lit:literal type="number" pos:line="208" pos:column="49">0</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="209" pos:column="17">compressedHtmlStream</name><op:operator pos:line="209" pos:column="37">.</op:operator><name pos:line="209" pos:column="38">CopyTo</name></name><argument_list pos:line="209" pos:column="44">(<argument><expr><name pos:line="209" pos:column="45">preBodyTagFilter</name></expr></argument>, <argument><expr><name pos:line="209" pos:column="63">bufferLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name pos:line="211" pos:column="17">preBodyTagFilter</name><op:operator pos:line="211" pos:column="33">.</op:operator><name pos:line="211" pos:column="34">Flush</name></name><argument_list pos:line="211" pos:column="39">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="212" pos:column="17">preBodyTagFilter</name><op:operator pos:line="212" pos:column="33">.</op:operator><name pos:line="212" pos:column="34">Position</name></name> <op:operator pos:line="212" pos:column="43">=</op:operator> <lit:literal type="number" pos:line="212" pos:column="45">0</lit:literal></expr>;</expr_stmt>
                
                <comment type="line" pos:line="214" pos:column="17">//Assert.True(StreamEquals(compressedHtmlStream, outputStream));</comment>
            }</block></using></using></using>
        }</block></function>

        <function><type><specifier pos:line="218" pos:column="9">static</specifier> <name pos:line="218" pos:column="16">bool</name></type> <name pos:line="218" pos:column="21">StreamEquals</name><parameter_list pos:line="218" pos:column="33">(<param><decl><type><name pos:line="218" pos:column="34">Stream</name></type> <name pos:line="218" pos:column="41">stream1</name></decl></param>, <param><decl><type><name pos:line="218" pos:column="50">Stream</name></type> <name pos:line="218" pos:column="57">stream2</name></decl></param>)</parameter_list>
        <block pos:line="219" pos:column="9">{
            <expr_stmt><expr><name><name pos:line="220" pos:column="13">stream1</name><op:operator pos:line="220" pos:column="20">.</op:operator><name pos:line="220" pos:column="21">Position</name></name> <op:operator pos:line="220" pos:column="30">=</op:operator> <lit:literal type="number" pos:line="220" pos:column="32">0</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="221" pos:column="13">stream2</name><op:operator pos:line="221" pos:column="20">.</op:operator><name pos:line="221" pos:column="21">Position</name></name> <op:operator pos:line="221" pos:column="30">=</op:operator> <lit:literal type="number" pos:line="221" pos:column="32">0</lit:literal></expr>;</expr_stmt>

            <decl_stmt><decl><type><specifier pos:line="223" pos:column="13">const</specifier> <name pos:line="223" pos:column="19">int</name></type> <name pos:line="223" pos:column="23">bufferSize</name> <init pos:line="223" pos:column="34">= <expr><lit:literal type="number" pos:line="223" pos:column="36">2048</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="224" pos:column="13">byte</name><index pos:line="224" pos:column="17">[]</index></type> <name pos:line="224" pos:column="20">buffer1</name> <init pos:line="224" pos:column="28">= <expr><op:operator pos:line="224" pos:column="30">new</op:operator> <name><name pos:line="224" pos:column="34">byte</name><index pos:line="224" pos:column="38">[<expr><name pos:line="224" pos:column="39">bufferSize</name></expr>]</index></name></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="224" pos:column="52">//buffer size</comment>
            <decl_stmt><decl><type><name pos:line="225" pos:column="13">byte</name><index pos:line="225" pos:column="17">[]</index></type> <name pos:line="225" pos:column="20">buffer2</name> <init pos:line="225" pos:column="28">= <expr><op:operator pos:line="225" pos:column="30">new</op:operator> <name><name pos:line="225" pos:column="34">byte</name><index pos:line="225" pos:column="38">[<expr><name pos:line="225" pos:column="39">bufferSize</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <while pos:line="226" pos:column="13">while <condition pos:line="226" pos:column="19">(<expr><lit:literal type="boolean" pos:line="226" pos:column="20">true</lit:literal></expr>)</condition>
            <block pos:line="227" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="228" pos:column="17">int</name></type> <name pos:line="228" pos:column="21">count1</name> <init pos:line="228" pos:column="28">= <expr><call><name><name pos:line="228" pos:column="30">stream1</name><op:operator pos:line="228" pos:column="37">.</op:operator><name pos:line="228" pos:column="38">Read</name></name><argument_list pos:line="228" pos:column="42">(<argument><expr><name pos:line="228" pos:column="43">buffer1</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="228" pos:column="52">0</lit:literal></expr></argument>, <argument><expr><name pos:line="228" pos:column="55">bufferSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="229" pos:column="17">int</name></type> <name pos:line="229" pos:column="21">count2</name> <init pos:line="229" pos:column="28">= <expr><call><name><name pos:line="229" pos:column="30">stream2</name><op:operator pos:line="229" pos:column="37">.</op:operator><name pos:line="229" pos:column="38">Read</name></name><argument_list pos:line="229" pos:column="42">(<argument><expr><name pos:line="229" pos:column="43">buffer2</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="229" pos:column="52">0</lit:literal></expr></argument>, <argument><expr><name pos:line="229" pos:column="55">bufferSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if pos:line="231" pos:column="17">if <condition pos:line="231" pos:column="20">(<expr><name pos:line="231" pos:column="21">count1</name> <op:operator pos:line="231" pos:column="28">!=</op:operator> <name pos:line="231" pos:column="31">count2</name></expr>)</condition><then pos:line="231" pos:column="38">
                    <return pos:line="232" pos:column="21">return <expr><lit:literal type="boolean" pos:line="232" pos:column="28">false</lit:literal></expr>;</return></then></if>

                <if pos:line="234" pos:column="17">if <condition pos:line="234" pos:column="20">(<expr><name pos:line="234" pos:column="21">count1</name> <op:operator pos:line="234" pos:column="28">==</op:operator> <lit:literal type="number" pos:line="234" pos:column="31">0</lit:literal></expr>)</condition><then pos:line="234" pos:column="33">
                    <return pos:line="235" pos:column="21">return <expr><lit:literal type="boolean" pos:line="235" pos:column="28">true</lit:literal></expr>;</return></then></if>

                <comment type="line" pos:line="237" pos:column="17">// You might replace the following with an efficient "memcmp"</comment>
                <if pos:line="238" pos:column="17">if <condition pos:line="238" pos:column="20">(<expr><op:operator pos:line="238" pos:column="21">!</op:operator><call><name><name pos:line="238" pos:column="22">buffer1</name><op:operator pos:line="238" pos:column="29">.</op:operator><name pos:line="238" pos:column="30">Take</name></name><argument_list pos:line="238" pos:column="34">(<argument><expr><name pos:line="238" pos:column="35">count1</name></expr></argument>)</argument_list></call><op:operator pos:line="238" pos:column="42">.</op:operator><call><name pos:line="238" pos:column="43">SequenceEqual</name><argument_list pos:line="238" pos:column="56">(<argument><expr><call><name><name pos:line="238" pos:column="57">buffer2</name><op:operator pos:line="238" pos:column="64">.</op:operator><name pos:line="238" pos:column="65">Take</name></name><argument_list pos:line="238" pos:column="69">(<argument><expr><name pos:line="238" pos:column="70">count2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="238" pos:column="79">
                    <return pos:line="239" pos:column="21">return <expr><lit:literal type="boolean" pos:line="239" pos:column="28">false</lit:literal></expr>;</return></then></if>
            }</block></while>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
