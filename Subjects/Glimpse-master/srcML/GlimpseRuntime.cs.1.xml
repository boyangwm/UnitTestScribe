<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Core\Framework\GlimpseRuntime.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Diagnostics</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Linq</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Reflection</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">System</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">Text</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Glimpse</name><op:operator pos:line="7" pos:column="14">.</op:operator><name pos:line="7" pos:column="15">Core</name><op:operator pos:line="7" pos:column="19">.</op:operator><name pos:line="7" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Glimpse</name><op:operator pos:line="8" pos:column="14">.</op:operator><name pos:line="8" pos:column="15">Core</name><op:operator pos:line="8" pos:column="19">.</op:operator><name pos:line="8" pos:column="20">Extensions</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">Glimpse</name><op:operator pos:line="9" pos:column="14">.</op:operator><name pos:line="9" pos:column="15">Core</name><op:operator pos:line="9" pos:column="19">.</op:operator><name pos:line="9" pos:column="20">Message</name></name>;</using>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">Glimpse</name><op:operator pos:line="10" pos:column="14">.</op:operator><name pos:line="10" pos:column="15">Core</name><op:operator pos:line="10" pos:column="19">.</op:operator><name pos:line="10" pos:column="20">ResourceResult</name></name>;</using>
<using pos:line="11" pos:column="1">using <name><name pos:line="11" pos:column="7">Glimpse</name><op:operator pos:line="11" pos:column="14">.</op:operator><name pos:line="11" pos:column="15">Core</name><op:operator pos:line="11" pos:column="19">.</op:operator><name pos:line="11" pos:column="20">Tab</name><op:operator pos:line="11" pos:column="23">.</op:operator><name pos:line="11" pos:column="24">Assist</name></name>;</using>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">Tavis</name><op:operator pos:line="12" pos:column="12">.</op:operator><name pos:line="12" pos:column="13">UriTemplates</name></name>;</using>

<cpp:if pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">if</cpp:directive> <expr><name pos:line="14" pos:column="5">NET35</name></expr></cpp:if>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">Glimpse</name><op:operator pos:line="15" pos:column="14">.</op:operator><name pos:line="15" pos:column="15">Core</name><op:operator pos:line="15" pos:column="19">.</op:operator><name pos:line="15" pos:column="20">Backport</name></name>;</using>
<cpp:endif pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">endif</cpp:directive></cpp:endif>

<namespace pos:line="18" pos:column="1">namespace <name><name pos:line="18" pos:column="11">Glimpse</name><op:operator pos:line="18" pos:column="18">.</op:operator><name pos:line="18" pos:column="19">Core</name><op:operator pos:line="18" pos:column="23">.</op:operator><name pos:line="18" pos:column="24">Framework</name></name>
<block pos:line="19" pos:column="1">{
    <comment type="line" pos:line="20" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="21" pos:column="5">/// The heart and soul of Glimpse. The runtime coordinate all input from a &lt;see cref="IFrameworkProvider" /&gt;, persists collected runtime information and writes responses out to the &lt;see cref="IFrameworkProvider" /&gt;.</comment>
    <comment type="line" pos:line="22" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="23" pos:column="5">public</specifier> class <name pos:line="23" pos:column="18">GlimpseRuntime</name> <super pos:line="23" pos:column="33">: <name pos:line="23" pos:column="35">IGlimpseRuntime</name></super>
    <block pos:line="24" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="25" pos:column="9">private</specifier> <specifier pos:line="25" pos:column="17">static</specifier> <specifier pos:line="25" pos:column="24">readonly</specifier> <name pos:line="25" pos:column="33">MethodInfo</name></type> <name pos:line="25" pos:column="44">MethodInfoBeginRequest</name> <init pos:line="25" pos:column="67">= <expr><call><name pos:line="25" pos:column="69">typeof</name><argument_list pos:line="25" pos:column="75">(<argument><expr><name pos:line="25" pos:column="76">GlimpseRuntime</name></expr></argument>)</argument_list></call><op:operator pos:line="25" pos:column="91">.</op:operator><call><name pos:line="25" pos:column="92">GetMethod</name><argument_list pos:line="25" pos:column="101">(<argument><expr><lit:literal type="string" pos:line="25" pos:column="102">"BeginRequest"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="118">BindingFlags</name><op:operator pos:line="25" pos:column="130">.</op:operator><name pos:line="25" pos:column="131">Public</name></name> <op:operator pos:line="25" pos:column="138">|</op:operator> <name><name pos:line="25" pos:column="140">BindingFlags</name><op:operator pos:line="25" pos:column="152">.</op:operator><name pos:line="25" pos:column="153">Instance</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="26" pos:column="9">private</specifier> <specifier pos:line="26" pos:column="17">static</specifier> <specifier pos:line="26" pos:column="24">readonly</specifier> <name pos:line="26" pos:column="33">MethodInfo</name></type> <name pos:line="26" pos:column="44">MethodInfoEndRequest</name> <init pos:line="26" pos:column="65">= <expr><call><name pos:line="26" pos:column="67">typeof</name><argument_list pos:line="26" pos:column="73">(<argument><expr><name pos:line="26" pos:column="74">GlimpseRuntime</name></expr></argument>)</argument_list></call><op:operator pos:line="26" pos:column="89">.</op:operator><call><name pos:line="26" pos:column="90">GetMethod</name><argument_list pos:line="26" pos:column="99">(<argument><expr><lit:literal type="string" pos:line="26" pos:column="100">"EndRequest"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="114">BindingFlags</name><op:operator pos:line="26" pos:column="126">.</op:operator><name pos:line="26" pos:column="127">Public</name></name> <op:operator pos:line="26" pos:column="134">|</op:operator> <name><name pos:line="26" pos:column="136">BindingFlags</name><op:operator pos:line="26" pos:column="148">.</op:operator><name pos:line="26" pos:column="149">Instance</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="27" pos:column="9">private</specifier> <specifier pos:line="27" pos:column="17">static</specifier> <specifier pos:line="27" pos:column="24">readonly</specifier> <name pos:line="27" pos:column="33">object</name></type> <name pos:line="27" pos:column="40">LockObj</name> <init pos:line="27" pos:column="48">= <expr><op:operator pos:line="27" pos:column="50">new</op:operator> <call><name pos:line="27" pos:column="54">object</name><argument_list pos:line="27" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="29" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="30" pos:column="9">/// Initializes static members of the &lt;see cref="GlimpseRuntime" /&gt; class.</comment>
        <comment type="line" pos:line="31" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="32" pos:column="9">/// &lt;exception cref="System.NullReferenceException"&gt;BeginRequest method not found&lt;/exception&gt;</comment>
        <constructor><specifier pos:line="33" pos:column="9">static</specifier> <name pos:line="33" pos:column="16">GlimpseRuntime</name><parameter_list pos:line="33" pos:column="30">()</parameter_list>
        <block pos:line="34" pos:column="9">{
            <comment type="line" pos:line="35" pos:column="13">// Version is in major.minor.build format to support http://semver.org/</comment>
            <comment type="line" pos:line="36" pos:column="13">// TODO: Consider adding configuration hash to version</comment>
            <expr_stmt><expr><name pos:line="37" pos:column="13">Version</name> <op:operator pos:line="37" pos:column="21">=</op:operator> <call><name><name pos:line="37" pos:column="23">Assembly</name><op:operator pos:line="37" pos:column="31">.</op:operator><name pos:line="37" pos:column="32">GetExecutingAssembly</name></name><argument_list pos:line="37" pos:column="52">()</argument_list></call><op:operator pos:line="37" pos:column="54">.</op:operator><call><name pos:line="37" pos:column="55">GetName</name><argument_list pos:line="37" pos:column="62">()</argument_list></call><op:operator pos:line="37" pos:column="64">.</op:operator><call><name><name pos:line="37" pos:column="65">Version</name><op:operator pos:line="37" pos:column="72">.</op:operator><name pos:line="37" pos:column="73">ToString</name></name><argument_list pos:line="37" pos:column="81">(<argument><expr><lit:literal type="number" pos:line="37" pos:column="82">3</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if pos:line="39" pos:column="13">if <condition pos:line="39" pos:column="16">(<expr><name pos:line="39" pos:column="17">MethodInfoBeginRequest</name> <op:operator pos:line="39" pos:column="40">==</op:operator> <name pos:line="39" pos:column="43">null</name></expr>)</condition><then pos:line="39" pos:column="48">
            <block pos:line="40" pos:column="13">{
                <throw pos:line="41" pos:column="17">throw <expr><op:operator pos:line="41" pos:column="23">new</op:operator> <call><name pos:line="41" pos:column="27">NullReferenceException</name><argument_list pos:line="41" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="41" pos:column="50">"BeginRequest method not found"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <if pos:line="44" pos:column="13">if <condition pos:line="44" pos:column="16">(<expr><name pos:line="44" pos:column="17">MethodInfoEndRequest</name> <op:operator pos:line="44" pos:column="38">==</op:operator> <name pos:line="44" pos:column="41">null</name></expr>)</condition><then pos:line="44" pos:column="46">
            <block pos:line="45" pos:column="13">{
                <throw pos:line="46" pos:column="17">throw <expr><op:operator pos:line="46" pos:column="23">new</op:operator> <call><name pos:line="46" pos:column="27">NullReferenceException</name><argument_list pos:line="46" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="46" pos:column="50">"EndRequest method not found"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
        }</block></constructor>

        <comment type="line" pos:line="50" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="51" pos:column="9">/// Initializes a new instance of the &lt;see cref="GlimpseRuntime" /&gt; class.</comment>
        <comment type="line" pos:line="52" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="53" pos:column="9">/// &lt;param name="configuration"&gt;The configuration.&lt;/param&gt;</comment>
        <comment type="line" pos:line="54" pos:column="9">/// &lt;exception cref="System.ArgumentNullException"&gt;Throws an exception if &lt;paramref name="configuration"/&gt; is &lt;c&gt;null&lt;/c&gt;.&lt;/exception&gt;</comment>
        <constructor><specifier pos:line="55" pos:column="9">public</specifier> <name pos:line="55" pos:column="16">GlimpseRuntime</name><parameter_list pos:line="55" pos:column="30">(<param><decl><type><name pos:line="55" pos:column="31">IGlimpseConfiguration</name></type> <name pos:line="55" pos:column="53">configuration</name></decl></param>)</parameter_list>
        <block pos:line="56" pos:column="9">{
            <if pos:line="57" pos:column="13">if <condition pos:line="57" pos:column="16">(<expr><name pos:line="57" pos:column="17">configuration</name> <op:operator pos:line="57" pos:column="31">==</op:operator> <name pos:line="57" pos:column="34">null</name></expr>)</condition><then pos:line="57" pos:column="39">
            <block pos:line="58" pos:column="13">{
                <throw pos:line="59" pos:column="17">throw <expr><op:operator pos:line="59" pos:column="23">new</op:operator> <call><name pos:line="59" pos:column="27">ArgumentNullException</name><argument_list pos:line="59" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="59" pos:column="49">"configuration"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <expr_stmt><expr><name pos:line="62" pos:column="13">Configuration</name> <op:operator pos:line="62" pos:column="27">=</op:operator> <name pos:line="62" pos:column="29">configuration</name></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="65" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="66" pos:column="9">/// Gets the executing version of Glimpse.</comment>
        <comment type="line" pos:line="67" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="68" pos:column="9">/// &lt;value&gt;</comment>
        <comment type="line" pos:line="69" pos:column="9">/// The version of Glimpse.</comment>
        <comment type="line" pos:line="70" pos:column="9">/// &lt;/value&gt;</comment>
        <comment type="line" pos:line="71" pos:column="9">/// &lt;remarks&gt;Glimpse versioning follows the rules of &lt;see href="http://semver.org/"&gt;Semantic Versioning&lt;/see&gt;.&lt;/remarks&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="72" pos:column="9">public</specifier> <specifier pos:line="72" pos:column="16">static</specifier> <name pos:line="72" pos:column="23">string</name></type> <name pos:line="72" pos:column="30">Version</name> <block pos:line="72" pos:column="38">{ <function_decl><name pos:line="72" pos:column="40">get</name>;</function_decl> <function_decl><specifier pos:line="72" pos:column="45">private</specifier> <name pos:line="72" pos:column="53">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="74" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="75" pos:column="9">/// Gets or sets the configuration.</comment>
        <comment type="line" pos:line="76" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="77" pos:column="9">/// &lt;value&gt;</comment>
        <comment type="line" pos:line="78" pos:column="9">/// The configuration.</comment>
        <comment type="line" pos:line="79" pos:column="9">/// &lt;/value&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="80" pos:column="9">public</specifier> <name pos:line="80" pos:column="16">IGlimpseConfiguration</name></type> <name pos:line="80" pos:column="38">Configuration</name> <block pos:line="80" pos:column="52">{ <function_decl><name pos:line="80" pos:column="54">get</name>;</function_decl> <function_decl><name pos:line="80" pos:column="59">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="82" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="83" pos:column="9">/// Gets a value indicating whether this instance has been initialized.</comment>
        <comment type="line" pos:line="84" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="85" pos:column="9">/// &lt;value&gt;</comment>
        <comment type="line" pos:line="86" pos:column="9">/// &lt;c&gt;true&lt;/c&gt; if this instance is initialized; otherwise, &lt;c&gt;false&lt;/c&gt;.</comment>
        <comment type="line" pos:line="87" pos:column="9">/// &lt;/value&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="88" pos:column="9">public</specifier> <name pos:line="88" pos:column="16">bool</name></type> <name pos:line="88" pos:column="21">IsInitialized</name> <block pos:line="88" pos:column="35">{ <function_decl><name pos:line="88" pos:column="37">get</name>;</function_decl> <function_decl><specifier pos:line="88" pos:column="42">private</specifier> <name pos:line="88" pos:column="50">set</name>;</function_decl> }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="90" pos:column="9">private</specifier> <name><name pos:line="90" pos:column="17">IDictionary</name><argument_list pos:line="90" pos:column="28">&lt;<argument><name pos:line="90" pos:column="29">string</name></argument>, <argument><name pos:line="90" pos:column="37">TabResult</name></argument>&gt;</argument_list></name></type> <name pos:line="90" pos:column="48">TabResultsStore</name>
        <block pos:line="91" pos:column="9">{
            <function><name pos:line="92" pos:column="13">get</name>
            <block pos:line="93" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="94" pos:column="17">var</name></type> <name pos:line="94" pos:column="21">requestStore</name> <init pos:line="94" pos:column="34">= <expr><name><name pos:line="94" pos:column="36">Configuration</name><op:operator pos:line="94" pos:column="49">.</op:operator><name pos:line="94" pos:column="50">FrameworkProvider</name><op:operator pos:line="94" pos:column="67">.</op:operator><name pos:line="94" pos:column="68">HttpRequestStore</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="95" pos:column="17">var</name></type> <name pos:line="95" pos:column="21">result</name> <init pos:line="95" pos:column="28">= <expr><call><name><name pos:line="95" pos:column="30">requestStore</name><op:operator pos:line="95" pos:column="42">.</op:operator><name><name pos:line="95" pos:column="43">Get</name><argument_list pos:line="95" pos:column="46">&lt;<argument><name><name pos:line="95" pos:column="47">IDictionary</name><argument_list pos:line="95" pos:column="58">&lt;<argument><name pos:line="95" pos:column="59">string</name></argument>, <argument><name pos:line="95" pos:column="67">TabResult</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name><argument_list pos:line="95" pos:column="78">(<argument><expr><name><name pos:line="95" pos:column="79">Constants</name><op:operator pos:line="95" pos:column="88">.</op:operator><name pos:line="95" pos:column="89">TabResultsDataStoreKey</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if pos:line="97" pos:column="17">if <condition pos:line="97" pos:column="20">(<expr><name pos:line="97" pos:column="21">result</name> <op:operator pos:line="97" pos:column="28">==</op:operator> <name pos:line="97" pos:column="31">null</name></expr>)</condition><then pos:line="97" pos:column="36">
                <block pos:line="98" pos:column="17">{
                    <expr_stmt><expr><name pos:line="99" pos:column="21">result</name> <op:operator pos:line="99" pos:column="28">=</op:operator> <op:operator pos:line="99" pos:column="30">new</op:operator> <call><name><name pos:line="99" pos:column="34">Dictionary</name><argument_list pos:line="99" pos:column="44">&lt;<argument><name pos:line="99" pos:column="45">string</name></argument>, <argument><name pos:line="99" pos:column="53">TabResult</name></argument>&gt;</argument_list></name><argument_list pos:line="99" pos:column="63">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="100" pos:column="21">requestStore</name><op:operator pos:line="100" pos:column="33">.</op:operator><name pos:line="100" pos:column="34">Set</name></name><argument_list pos:line="100" pos:column="37">(<argument><expr><name><name pos:line="100" pos:column="38">Constants</name><op:operator pos:line="100" pos:column="47">.</op:operator><name pos:line="100" pos:column="48">TabResultsDataStoreKey</name></name></expr></argument>, <argument><expr><name pos:line="100" pos:column="72">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <return pos:line="103" pos:column="17">return <expr><name pos:line="103" pos:column="24">result</name></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="107" pos:column="9">private</specifier> <name><name pos:line="107" pos:column="17">IDictionary</name><argument_list pos:line="107" pos:column="28">&lt;<argument><name pos:line="107" pos:column="29">string</name></argument>, <argument><name pos:line="107" pos:column="37">TabResult</name></argument>&gt;</argument_list></name></type> <name pos:line="107" pos:column="48">DisplayResultsStore</name>
        <block pos:line="108" pos:column="9">{
            <function><name pos:line="109" pos:column="13">get</name>
            <block pos:line="110" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="111" pos:column="17">var</name></type> <name pos:line="111" pos:column="21">requestStore</name> <init pos:line="111" pos:column="34">= <expr><name><name pos:line="111" pos:column="36">Configuration</name><op:operator pos:line="111" pos:column="49">.</op:operator><name pos:line="111" pos:column="50">FrameworkProvider</name><op:operator pos:line="111" pos:column="67">.</op:operator><name pos:line="111" pos:column="68">HttpRequestStore</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="112" pos:column="17">var</name></type> <name pos:line="112" pos:column="21">result</name> <init pos:line="112" pos:column="28">= <expr><call><name><name pos:line="112" pos:column="30">requestStore</name><op:operator pos:line="112" pos:column="42">.</op:operator><name><name pos:line="112" pos:column="43">Get</name><argument_list pos:line="112" pos:column="46">&lt;<argument><name><name pos:line="112" pos:column="47">IDictionary</name><argument_list pos:line="112" pos:column="58">&lt;<argument><name pos:line="112" pos:column="59">string</name></argument>, <argument><name pos:line="112" pos:column="67">TabResult</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name><argument_list pos:line="112" pos:column="78">(<argument><expr><name><name pos:line="112" pos:column="79">Constants</name><op:operator pos:line="112" pos:column="88">.</op:operator><name pos:line="112" pos:column="89">DisplayResultsDataStoreKey</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if pos:line="114" pos:column="17">if <condition pos:line="114" pos:column="20">(<expr><name pos:line="114" pos:column="21">result</name> <op:operator pos:line="114" pos:column="28">==</op:operator> <name pos:line="114" pos:column="31">null</name></expr>)</condition><then pos:line="114" pos:column="36">
                <block pos:line="115" pos:column="17">{
                    <expr_stmt><expr><name pos:line="116" pos:column="21">result</name> <op:operator pos:line="116" pos:column="28">=</op:operator> <op:operator pos:line="116" pos:column="30">new</op:operator> <call><name><name pos:line="116" pos:column="34">Dictionary</name><argument_list pos:line="116" pos:column="44">&lt;<argument><name pos:line="116" pos:column="45">string</name></argument>, <argument><name pos:line="116" pos:column="53">TabResult</name></argument>&gt;</argument_list></name><argument_list pos:line="116" pos:column="63">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="117" pos:column="21">requestStore</name><op:operator pos:line="117" pos:column="33">.</op:operator><name pos:line="117" pos:column="34">Set</name></name><argument_list pos:line="117" pos:column="37">(<argument><expr><name><name pos:line="117" pos:column="38">Constants</name><op:operator pos:line="117" pos:column="47">.</op:operator><name pos:line="117" pos:column="48">DisplayResultsDataStoreKey</name></name></expr></argument>, <argument><expr><name pos:line="117" pos:column="76">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <return pos:line="120" pos:column="17">return <expr><name pos:line="120" pos:column="24">result</name></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="124" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="125" pos:column="9">/// Begins Glimpse's processing of a Http request.</comment>
        <comment type="line" pos:line="126" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="127" pos:column="9">/// &lt;exception cref="Glimpse.Core.Framework.GlimpseException"&gt;Throws an exception if &lt;see cref="GlimpseRuntime"/&gt; is not yet initialized.&lt;/exception&gt;</comment>
        <function><type><specifier pos:line="128" pos:column="9">public</specifier> <name pos:line="128" pos:column="16">void</name></type> <name pos:line="128" pos:column="21">BeginRequest</name><parameter_list pos:line="128" pos:column="33">()</parameter_list>
        <block pos:line="129" pos:column="9">{
            <if pos:line="130" pos:column="13">if <condition pos:line="130" pos:column="16">(<expr><op:operator pos:line="130" pos:column="17">!</op:operator><name pos:line="130" pos:column="18">IsInitialized</name></expr>)</condition><then pos:line="130" pos:column="32">
            <block pos:line="131" pos:column="13">{
                <throw pos:line="132" pos:column="17">throw <expr><op:operator pos:line="132" pos:column="23">new</op:operator> <call><name pos:line="132" pos:column="27">GlimpseException</name><argument_list pos:line="132" pos:column="43">(<argument><expr><name><name pos:line="132" pos:column="44">Resources</name><op:operator pos:line="132" pos:column="53">.</op:operator><name pos:line="132" pos:column="54">BeginRequestOutOfOrderRuntimeMethodCall</name></name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <if pos:line="135" pos:column="13">if <condition pos:line="135" pos:column="16">(<expr><call><name pos:line="135" pos:column="17">HasOffRuntimePolicy</name><argument_list pos:line="135" pos:column="36">(<argument><expr><name><name pos:line="135" pos:column="37">RuntimeEvent</name><op:operator pos:line="135" pos:column="49">.</op:operator><name pos:line="135" pos:column="50">BeginRequest</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="135" pos:column="64">
            <block pos:line="136" pos:column="13">{
                <return pos:line="137" pos:column="17">return;</return>
            }</block></then></if>

            <expr_stmt><expr><call><name pos:line="140" pos:column="13">ExecuteTabs</name><argument_list pos:line="140" pos:column="24">(<argument><expr><name><name pos:line="140" pos:column="25">RuntimeEvent</name><op:operator pos:line="140" pos:column="37">.</op:operator><name pos:line="140" pos:column="38">BeginRequest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="142" pos:column="13">var</name></type> <name pos:line="142" pos:column="17">requestStore</name> <init pos:line="142" pos:column="30">= <expr><name><name pos:line="142" pos:column="32">Configuration</name><op:operator pos:line="142" pos:column="45">.</op:operator><name pos:line="142" pos:column="46">FrameworkProvider</name><op:operator pos:line="142" pos:column="63">.</op:operator><name pos:line="142" pos:column="64">HttpRequestStore</name></name></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="144" pos:column="13">// Give Request an ID</comment>
            <decl_stmt><decl><type><name pos:line="145" pos:column="13">var</name></type> <name pos:line="145" pos:column="17">requestId</name> <init pos:line="145" pos:column="27">= <expr><call><name><name pos:line="145" pos:column="29">Guid</name><op:operator pos:line="145" pos:column="33">.</op:operator><name pos:line="145" pos:column="34">NewGuid</name></name><argument_list pos:line="145" pos:column="41">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="146" pos:column="13">requestStore</name><op:operator pos:line="146" pos:column="25">.</op:operator><name pos:line="146" pos:column="26">Set</name></name><argument_list pos:line="146" pos:column="29">(<argument><expr><name><name pos:line="146" pos:column="30">Constants</name><op:operator pos:line="146" pos:column="39">.</op:operator><name pos:line="146" pos:column="40">RequestIdKey</name></name></expr></argument>, <argument><expr><name pos:line="146" pos:column="54">requestId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name pos:line="147" pos:column="13">Func</name><argument_list pos:line="147" pos:column="17">&lt;<argument><name pos:line="147" pos:column="18">Guid</name><type:modifier pos:line="147" pos:column="22">?</type:modifier></argument>, <argument><name pos:line="147" pos:column="25">string</name></argument>&gt;</argument_list></name></type> <name pos:line="147" pos:column="33">generateClientScripts</name> <init pos:line="147" pos:column="55">= <expr><lambda><parameter_list pos:line="147" pos:column="57">(<param><decl><name pos:line="147" pos:column="58">rId</name></decl></param>)</parameter_list> <op:operator pos:line="147" pos:column="63">=&gt;</op:operator> <name><name pos:line="147" pos:column="66">rId</name><op:operator pos:line="147" pos:column="69">.</op:operator><name pos:line="147" pos:column="70">HasValue</name> <type:modifier pos:line="147" pos:column="79">?</type:modifier></name> <call><name pos:line="147" pos:column="81">GenerateScriptTags</name><argument_list pos:line="147" pos:column="99">(<argument><expr><name><name pos:line="147" pos:column="100">rId</name><op:operator pos:line="147" pos:column="103">.</op:operator><name pos:line="147" pos:column="104">Value</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="147" pos:column="111">:</op:operator> <call><name pos:line="147" pos:column="113">GenerateScriptTags</name><argument_list pos:line="147" pos:column="131">(<argument><expr><name pos:line="147" pos:column="132">requestId</name></expr></argument>)</argument_list></call></lambda></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="148" pos:column="13">requestStore</name><op:operator pos:line="148" pos:column="25">.</op:operator><name pos:line="148" pos:column="26">Set</name></name><argument_list pos:line="148" pos:column="29">(<argument><expr><name><name pos:line="148" pos:column="30">Constants</name><op:operator pos:line="148" pos:column="39">.</op:operator><name pos:line="148" pos:column="40">ClientScriptsStrategy</name></name></expr></argument>, <argument><expr><name pos:line="148" pos:column="63">generateClientScripts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="150" pos:column="13">var</name></type> <name pos:line="150" pos:column="17">executionTimer</name> <init pos:line="150" pos:column="32">= <expr><call><name pos:line="150" pos:column="34">CreateAndStartGlobalExecutionTimer</name><argument_list pos:line="150" pos:column="68">(<argument><expr><name pos:line="150" pos:column="69">requestStore</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="152" pos:column="13">Configuration</name><op:operator pos:line="152" pos:column="26">.</op:operator><name pos:line="152" pos:column="27">MessageBroker</name><op:operator pos:line="152" pos:column="40">.</op:operator><name pos:line="152" pos:column="41">Publish</name></name><argument_list pos:line="152" pos:column="48">(<argument><expr><op:operator pos:line="152" pos:column="49">new</op:operator> <call><name pos:line="152" pos:column="53">RuntimeMessage</name><argument_list pos:line="152" pos:column="67">()</argument_list></call><op:operator pos:line="152" pos:column="69">.</op:operator><call><name pos:line="152" pos:column="70">AsSourceMessage</name><argument_list pos:line="152" pos:column="85">(<argument><expr><call><name pos:line="152" pos:column="86">typeof</name><argument_list pos:line="152" pos:column="92">(<argument><expr><name pos:line="152" pos:column="93">GlimpseRuntime</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="152" pos:column="110">MethodInfoBeginRequest</name></expr></argument>)</argument_list></call><op:operator pos:line="152" pos:column="133">.</op:operator><call><name pos:line="152" pos:column="134">AsTimelineMessage</name><argument_list pos:line="152" pos:column="151">(<argument><expr><lit:literal type="string" pos:line="152" pos:column="152">"Start Request"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="152" pos:column="169">TimelineCategory</name><op:operator pos:line="152" pos:column="185">.</op:operator><name pos:line="152" pos:column="186">Request</name></name></expr></argument>)</argument_list></call><op:operator pos:line="152" pos:column="194">.</op:operator><call><name pos:line="152" pos:column="195">AsTimedMessage</name><argument_list pos:line="152" pos:column="209">(<argument><expr><call><name><name pos:line="152" pos:column="210">executionTimer</name><op:operator pos:line="152" pos:column="224">.</op:operator><name pos:line="152" pos:column="225">Point</name></name><argument_list pos:line="152" pos:column="230">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="155" pos:column="9">private</specifier> <name pos:line="155" pos:column="17">bool</name></type> <name pos:line="155" pos:column="22">HasOffRuntimePolicy</name><parameter_list pos:line="155" pos:column="41">(<param><decl><type><name pos:line="155" pos:column="42">RuntimeEvent</name></type> <name pos:line="155" pos:column="55">policyName</name></decl></param>)</parameter_list>
        <block pos:line="156" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="157" pos:column="13">var</name></type> <name pos:line="157" pos:column="17">policy</name> <init pos:line="157" pos:column="24">= <expr><call><name pos:line="157" pos:column="26">DetermineAndStoreAccumulatedRuntimePolicy</name><argument_list pos:line="157" pos:column="67">(<argument><expr><name pos:line="157" pos:column="68">policyName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="158" pos:column="13">return <expr><call><name><name pos:line="158" pos:column="20">policy</name><op:operator pos:line="158" pos:column="26">.</op:operator><name pos:line="158" pos:column="27">HasFlag</name></name><argument_list pos:line="158" pos:column="34">(<argument><expr><name><name pos:line="158" pos:column="35">RuntimePolicy</name><op:operator pos:line="158" pos:column="48">.</op:operator><name pos:line="158" pos:column="49">Off</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="161" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="162" pos:column="9">/// Ends Glimpse's processing a Http request.</comment>
        <comment type="line" pos:line="163" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="164" pos:column="9">/// &lt;exception cref="Glimpse.Core.Framework.GlimpseException"&gt;Throws an exception if &lt;c&gt;BeginRequest&lt;/c&gt; has not yet been called on a given request.&lt;/exception&gt;</comment>
        <function><type><specifier pos:line="165" pos:column="9">public</specifier> <name pos:line="165" pos:column="16">void</name></type> <name pos:line="165" pos:column="21">EndRequest</name><parameter_list pos:line="165" pos:column="31">()</parameter_list> <comment type="line" pos:line="165" pos:column="34">// TODO: Add PRG support</comment>
        <block pos:line="166" pos:column="9">{
            <if pos:line="167" pos:column="13">if <condition pos:line="167" pos:column="16">(<expr><call><name pos:line="167" pos:column="17">HasOffRuntimePolicy</name><argument_list pos:line="167" pos:column="36">(<argument><expr><name><name pos:line="167" pos:column="37">RuntimeEvent</name><op:operator pos:line="167" pos:column="49">.</op:operator><name pos:line="167" pos:column="50">EndRequest</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="167" pos:column="62">
            <block pos:line="168" pos:column="13">{
                <return pos:line="169" pos:column="17">return;</return>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="172" pos:column="13">var</name></type> <name pos:line="172" pos:column="17">frameworkProvider</name> <init pos:line="172" pos:column="35">= <expr><name><name pos:line="172" pos:column="37">Configuration</name><op:operator pos:line="172" pos:column="50">.</op:operator><name pos:line="172" pos:column="51">FrameworkProvider</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="173" pos:column="13">var</name></type> <name pos:line="173" pos:column="17">requestStore</name> <init pos:line="173" pos:column="30">= <expr><name><name pos:line="173" pos:column="32">frameworkProvider</name><op:operator pos:line="173" pos:column="49">.</op:operator><name pos:line="173" pos:column="50">HttpRequestStore</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="175" pos:column="13">var</name></type> <name pos:line="175" pos:column="17">executionTimer</name> <init pos:line="175" pos:column="32">= <expr><call><name><name pos:line="175" pos:column="34">requestStore</name><op:operator pos:line="175" pos:column="46">.</op:operator><name><name pos:line="175" pos:column="47">Get</name><argument_list pos:line="175" pos:column="50">&lt;<argument><name pos:line="175" pos:column="51">ExecutionTimer</name></argument>&gt;</argument_list></name></name><argument_list pos:line="175" pos:column="66">(<argument><expr><name><name pos:line="175" pos:column="67">Constants</name><op:operator pos:line="175" pos:column="76">.</op:operator><name pos:line="175" pos:column="77">GlobalTimerKey</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="176" pos:column="13">if <condition pos:line="176" pos:column="16">(<expr><name pos:line="176" pos:column="17">executionTimer</name> <op:operator pos:line="176" pos:column="32">!=</op:operator> <name pos:line="176" pos:column="35">null</name></expr>)</condition><then pos:line="176" pos:column="40">
            <block pos:line="177" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="178" pos:column="17">Configuration</name><op:operator pos:line="178" pos:column="30">.</op:operator><name pos:line="178" pos:column="31">MessageBroker</name><op:operator pos:line="178" pos:column="44">.</op:operator><name pos:line="178" pos:column="45">Publish</name></name><argument_list pos:line="178" pos:column="52">(<argument><expr><op:operator pos:line="178" pos:column="53">new</op:operator> <call><name pos:line="178" pos:column="57">RuntimeMessage</name><argument_list pos:line="178" pos:column="71">()</argument_list></call><op:operator pos:line="178" pos:column="73">.</op:operator><call><name pos:line="178" pos:column="74">AsSourceMessage</name><argument_list pos:line="178" pos:column="89">(<argument><expr><call><name pos:line="178" pos:column="90">typeof</name><argument_list pos:line="178" pos:column="96">(<argument><expr><name pos:line="178" pos:column="97">GlimpseRuntime</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="178" pos:column="114">MethodInfoBeginRequest</name></expr></argument>)</argument_list></call><op:operator pos:line="178" pos:column="137">.</op:operator><call><name pos:line="178" pos:column="138">AsTimelineMessage</name><argument_list pos:line="178" pos:column="155">(<argument><expr><lit:literal type="string" pos:line="178" pos:column="156">"End Request"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="178" pos:column="171">TimelineCategory</name><op:operator pos:line="178" pos:column="187">.</op:operator><name pos:line="178" pos:column="188">Request</name></name></expr></argument>)</argument_list></call><op:operator pos:line="178" pos:column="196">.</op:operator><call><name pos:line="178" pos:column="197">AsTimedMessage</name><argument_list pos:line="178" pos:column="211">(<argument><expr><call><name><name pos:line="178" pos:column="212">executionTimer</name><op:operator pos:line="178" pos:column="226">.</op:operator><name pos:line="178" pos:column="227">Point</name></name><argument_list pos:line="178" pos:column="232">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><call><name pos:line="181" pos:column="13">ExecuteTabs</name><argument_list pos:line="181" pos:column="24">(<argument><expr><name><name pos:line="181" pos:column="25">RuntimeEvent</name><op:operator pos:line="181" pos:column="37">.</op:operator><name pos:line="181" pos:column="38">EndRequest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="182" pos:column="13">ExecuteDisplays</name><argument_list pos:line="182" pos:column="28">()</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="184" pos:column="13">Guid</name></type> <name pos:line="184" pos:column="18">requestId</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="185" pos:column="13">Stopwatch</name></type> <name pos:line="185" pos:column="23">stopwatch</name></decl>;</decl_stmt>
            <try pos:line="186" pos:column="13">try
            <block pos:line="187" pos:column="13">{
                <expr_stmt><expr><name pos:line="188" pos:column="17">requestId</name> <op:operator pos:line="188" pos:column="27">=</op:operator> <call><name><name pos:line="188" pos:column="29">requestStore</name><op:operator pos:line="188" pos:column="41">.</op:operator><name><name pos:line="188" pos:column="42">Get</name><argument_list pos:line="188" pos:column="45">&lt;<argument><name pos:line="188" pos:column="46">Guid</name></argument>&gt;</argument_list></name></name><argument_list pos:line="188" pos:column="51">(<argument><expr><name><name pos:line="188" pos:column="52">Constants</name><op:operator pos:line="188" pos:column="61">.</op:operator><name pos:line="188" pos:column="62">RequestIdKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="189" pos:column="17">stopwatch</name> <op:operator pos:line="189" pos:column="27">=</op:operator> <call><name><name pos:line="189" pos:column="29">requestStore</name><op:operator pos:line="189" pos:column="41">.</op:operator><name><name pos:line="189" pos:column="42">Get</name><argument_list pos:line="189" pos:column="45">&lt;<argument><name pos:line="189" pos:column="46">Stopwatch</name></argument>&gt;</argument_list></name></name><argument_list pos:line="189" pos:column="56">(<argument><expr><name><name pos:line="189" pos:column="57">Constants</name><op:operator pos:line="189" pos:column="66">.</op:operator><name pos:line="189" pos:column="67">GlobalStopwatchKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="190" pos:column="17">stopwatch</name><op:operator pos:line="190" pos:column="26">.</op:operator><name pos:line="190" pos:column="27">Stop</name></name><argument_list pos:line="190" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch pos:line="192" pos:column="13">catch <parameter_list pos:line="192" pos:column="19">(<param><decl><type><name pos:line="192" pos:column="20">NullReferenceException</name></type> <name pos:line="192" pos:column="43">ex</name></decl></param>)</parameter_list>
            <block pos:line="193" pos:column="13">{
                <throw pos:line="194" pos:column="17">throw <expr><op:operator pos:line="194" pos:column="23">new</op:operator> <call><name pos:line="194" pos:column="27">GlimpseException</name><argument_list pos:line="194" pos:column="43">(<argument><expr><name><name pos:line="194" pos:column="44">Resources</name><op:operator pos:line="194" pos:column="53">.</op:operator><name pos:line="194" pos:column="54">EndRequestOutOfOrderRuntimeMethodCall</name></name></expr></argument>, <argument><expr><name pos:line="194" pos:column="93">ex</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>

            <decl_stmt><decl><type><name pos:line="197" pos:column="13">var</name></type> <name pos:line="197" pos:column="17">requestMetadata</name> <init pos:line="197" pos:column="33">= <expr><name><name pos:line="197" pos:column="35">frameworkProvider</name><op:operator pos:line="197" pos:column="52">.</op:operator><name pos:line="197" pos:column="53">RequestMetadata</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="198" pos:column="13">var</name></type> <name pos:line="198" pos:column="17">policy</name> <init pos:line="198" pos:column="24">= <expr><call><name pos:line="198" pos:column="26">DetermineAndStoreAccumulatedRuntimePolicy</name><argument_list pos:line="198" pos:column="67">(<argument><expr><name><name pos:line="198" pos:column="68">RuntimeEvent</name><op:operator pos:line="198" pos:column="80">.</op:operator><name pos:line="198" pos:column="81">EndRequest</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="199" pos:column="13">if <condition pos:line="199" pos:column="16">(<expr><call><name><name pos:line="199" pos:column="17">policy</name><op:operator pos:line="199" pos:column="23">.</op:operator><name pos:line="199" pos:column="24">HasFlag</name></name><argument_list pos:line="199" pos:column="31">(<argument><expr><name><name pos:line="199" pos:column="32">RuntimePolicy</name><op:operator pos:line="199" pos:column="45">.</op:operator><name pos:line="199" pos:column="46">PersistResults</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="199" pos:column="62">
            <block pos:line="200" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="201" pos:column="17">var</name></type> <name pos:line="201" pos:column="21">persistenceStore</name> <init pos:line="201" pos:column="38">= <expr><name><name pos:line="201" pos:column="40">Configuration</name><op:operator pos:line="201" pos:column="53">.</op:operator><name pos:line="201" pos:column="54">PersistenceStore</name></name></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name pos:line="203" pos:column="17">var</name></type> <name pos:line="203" pos:column="21">metadata</name> <init pos:line="203" pos:column="30">= <expr><op:operator pos:line="203" pos:column="32">new</op:operator> <call><name pos:line="203" pos:column="36">GlimpseRequest</name><argument_list pos:line="203" pos:column="50">(<argument><expr><name pos:line="203" pos:column="51">requestId</name></expr></argument>, <argument><expr><name pos:line="203" pos:column="62">requestMetadata</name></expr></argument>, <argument><expr><name pos:line="203" pos:column="79">TabResultsStore</name></expr></argument>, <argument><expr><name pos:line="203" pos:column="96">DisplayResultsStore</name></expr></argument>, <argument><expr><name><name pos:line="203" pos:column="117">stopwatch</name><op:operator pos:line="203" pos:column="126">.</op:operator><name pos:line="203" pos:column="127">Elapsed</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <try pos:line="205" pos:column="17">try
                <block pos:line="206" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="207" pos:column="21">persistenceStore</name><op:operator pos:line="207" pos:column="37">.</op:operator><name pos:line="207" pos:column="38">Save</name></name><argument_list pos:line="207" pos:column="42">(<argument><expr><name pos:line="207" pos:column="43">metadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block>
                <catch pos:line="209" pos:column="17">catch <parameter_list pos:line="209" pos:column="23">(<param><decl><type><name pos:line="209" pos:column="24">Exception</name></type> <name pos:line="209" pos:column="34">exception</name></decl></param>)</parameter_list>
                <block pos:line="210" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="211" pos:column="21">Configuration</name><op:operator pos:line="211" pos:column="34">.</op:operator><name pos:line="211" pos:column="35">Logger</name><op:operator pos:line="211" pos:column="41">.</op:operator><name pos:line="211" pos:column="42">Error</name></name><argument_list pos:line="211" pos:column="47">(<argument><expr><name><name pos:line="211" pos:column="48">Resources</name><op:operator pos:line="211" pos:column="57">.</op:operator><name pos:line="211" pos:column="58">GlimpseRuntimeEndRequesPersistError</name></name></expr></argument>, <argument><expr><name pos:line="211" pos:column="95">exception</name></expr></argument>, <argument><expr><call><name><name pos:line="211" pos:column="106">persistenceStore</name><op:operator pos:line="211" pos:column="122">.</op:operator><name pos:line="211" pos:column="123">GetType</name></name><argument_list pos:line="211" pos:column="130">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></then></if>

            <if pos:line="215" pos:column="13">if <condition pos:line="215" pos:column="16">(<expr><call><name><name pos:line="215" pos:column="17">policy</name><op:operator pos:line="215" pos:column="23">.</op:operator><name pos:line="215" pos:column="24">HasFlag</name></name><argument_list pos:line="215" pos:column="31">(<argument><expr><name><name pos:line="215" pos:column="32">RuntimePolicy</name><op:operator pos:line="215" pos:column="45">.</op:operator><name pos:line="215" pos:column="46">ModifyResponseHeaders</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="215" pos:column="69">
            <block pos:line="216" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="217" pos:column="17">frameworkProvider</name><op:operator pos:line="217" pos:column="34">.</op:operator><name pos:line="217" pos:column="35">SetHttpResponseHeader</name></name><argument_list pos:line="217" pos:column="56">(<argument><expr><name><name pos:line="217" pos:column="57">Constants</name><op:operator pos:line="217" pos:column="66">.</op:operator><name pos:line="217" pos:column="67">HttpResponseHeader</name></name></expr></argument>, <argument><expr><call><name><name pos:line="217" pos:column="87">requestId</name><op:operator pos:line="217" pos:column="96">.</op:operator><name pos:line="217" pos:column="97">ToString</name></name><argument_list pos:line="217" pos:column="105">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if pos:line="219" pos:column="17">if <condition pos:line="219" pos:column="20">(<expr><call><name><name pos:line="219" pos:column="21">requestMetadata</name><op:operator pos:line="219" pos:column="36">.</op:operator><name pos:line="219" pos:column="37">GetCookie</name></name><argument_list pos:line="219" pos:column="46">(<argument><expr><name><name pos:line="219" pos:column="47">Constants</name><op:operator pos:line="219" pos:column="56">.</op:operator><name pos:line="219" pos:column="57">ClientIdCookieName</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="219" pos:column="77">==</op:operator> <name pos:line="219" pos:column="80">null</name></expr>)</condition><then pos:line="219" pos:column="85">
                <block pos:line="220" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="221" pos:column="21">frameworkProvider</name><op:operator pos:line="221" pos:column="38">.</op:operator><name pos:line="221" pos:column="39">SetCookie</name></name><argument_list pos:line="221" pos:column="48">(<argument><expr><name><name pos:line="221" pos:column="49">Constants</name><op:operator pos:line="221" pos:column="58">.</op:operator><name pos:line="221" pos:column="59">ClientIdCookieName</name></name></expr></argument>, <argument><expr><name><name pos:line="221" pos:column="79">requestMetadata</name><op:operator pos:line="221" pos:column="94">.</op:operator><name pos:line="221" pos:column="95">ClientId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>

            <if pos:line="225" pos:column="13">if <condition pos:line="225" pos:column="16">(<expr><call><name><name pos:line="225" pos:column="17">policy</name><op:operator pos:line="225" pos:column="23">.</op:operator><name pos:line="225" pos:column="24">HasFlag</name></name><argument_list pos:line="225" pos:column="31">(<argument><expr><name><name pos:line="225" pos:column="32">RuntimePolicy</name><op:operator pos:line="225" pos:column="45">.</op:operator><name pos:line="225" pos:column="46">DisplayGlimpseClient</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="225" pos:column="68">
            <block pos:line="226" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="227" pos:column="17">var</name></type> <name pos:line="227" pos:column="21">html</name> <init pos:line="227" pos:column="26">= <expr><call><name pos:line="227" pos:column="28">GenerateScriptTags</name><argument_list pos:line="227" pos:column="46">(<argument><expr><name pos:line="227" pos:column="47">requestId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name pos:line="229" pos:column="17">frameworkProvider</name><op:operator pos:line="229" pos:column="34">.</op:operator><name pos:line="229" pos:column="35">InjectHttpResponseBody</name></name><argument_list pos:line="229" pos:column="57">(<argument><expr><name pos:line="229" pos:column="58">html</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="233" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="234" pos:column="9">/// Executes the default resource.</comment>
        <comment type="line" pos:line="235" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="236" pos:column="9">public</specifier> <name pos:line="236" pos:column="16">void</name></type> <name pos:line="236" pos:column="21">ExecuteDefaultResource</name><parameter_list pos:line="236" pos:column="43">()</parameter_list>
        <block pos:line="237" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="238" pos:column="13">ExecuteResource</name><argument_list pos:line="238" pos:column="28">(<argument><expr><name><name pos:line="238" pos:column="29">Configuration</name><op:operator pos:line="238" pos:column="42">.</op:operator><name pos:line="238" pos:column="43">DefaultResource</name><op:operator pos:line="238" pos:column="58">.</op:operator><name pos:line="238" pos:column="59">Name</name></name></expr></argument>, <argument><expr><call><name><name pos:line="238" pos:column="65">ResourceParameters</name><op:operator pos:line="238" pos:column="83">.</op:operator><name pos:line="238" pos:column="84">None</name></name><argument_list pos:line="238" pos:column="88">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="241" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="242" pos:column="9">/// Begins access to session data.</comment>
        <comment type="line" pos:line="243" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="244" pos:column="9">public</specifier> <name pos:line="244" pos:column="16">void</name></type> <name pos:line="244" pos:column="21">BeginSessionAccess</name><parameter_list pos:line="244" pos:column="39">()</parameter_list>
        <block pos:line="245" pos:column="9">{
            <if pos:line="246" pos:column="13">if <condition pos:line="246" pos:column="16">(<expr><call><name pos:line="246" pos:column="17">HasOffRuntimePolicy</name><argument_list pos:line="246" pos:column="36">(<argument><expr><name><name pos:line="246" pos:column="37">RuntimeEvent</name><op:operator pos:line="246" pos:column="49">.</op:operator><name pos:line="246" pos:column="50">BeginSessionAccess</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="246" pos:column="70">
            <block pos:line="247" pos:column="13">{
                <return pos:line="248" pos:column="17">return;</return>
            }</block></then></if>

            <expr_stmt><expr><call><name pos:line="251" pos:column="13">ExecuteTabs</name><argument_list pos:line="251" pos:column="24">(<argument><expr><name><name pos:line="251" pos:column="25">RuntimeEvent</name><op:operator pos:line="251" pos:column="37">.</op:operator><name pos:line="251" pos:column="38">BeginSessionAccess</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="254" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="255" pos:column="9">/// Ends access to session data.</comment>
        <comment type="line" pos:line="256" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="257" pos:column="9">public</specifier> <name pos:line="257" pos:column="16">void</name></type> <name pos:line="257" pos:column="21">EndSessionAccess</name><parameter_list pos:line="257" pos:column="37">()</parameter_list>
        <block pos:line="258" pos:column="9">{
            <if pos:line="259" pos:column="13">if <condition pos:line="259" pos:column="16">(<expr><call><name pos:line="259" pos:column="17">HasOffRuntimePolicy</name><argument_list pos:line="259" pos:column="36">(<argument><expr><name><name pos:line="259" pos:column="37">RuntimeEvent</name><op:operator pos:line="259" pos:column="49">.</op:operator><name pos:line="259" pos:column="50">EndSessionAccess</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="259" pos:column="68">
            <block pos:line="260" pos:column="13">{
                <return pos:line="261" pos:column="17">return;</return>
            }</block></then></if>

            <expr_stmt><expr><call><name pos:line="264" pos:column="13">ExecuteTabs</name><argument_list pos:line="264" pos:column="24">(<argument><expr><name><name pos:line="264" pos:column="25">RuntimeEvent</name><op:operator pos:line="264" pos:column="37">.</op:operator><name pos:line="264" pos:column="38">EndSessionAccess</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="267" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="268" pos:column="9">/// Executes the resource.</comment>
        <comment type="line" pos:line="269" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="270" pos:column="9">/// &lt;param name="resourceName"&gt;Name of the resource.&lt;/param&gt;</comment>
        <comment type="line" pos:line="271" pos:column="9">/// &lt;param name="parameters"&gt;The parameters.&lt;/param&gt;</comment>
        <comment type="line" pos:line="272" pos:column="9">/// &lt;exception cref="System.ArgumentNullException"&gt;Throws an exception if either parameter is &lt;c&gt;null&lt;/c&gt;.&lt;/exception&gt;</comment>
        <function><type><specifier pos:line="273" pos:column="9">public</specifier> <name pos:line="273" pos:column="16">void</name></type> <name pos:line="273" pos:column="21">ExecuteResource</name><parameter_list pos:line="273" pos:column="36">(<param><decl><type><name pos:line="273" pos:column="37">string</name></type> <name pos:line="273" pos:column="44">resourceName</name></decl></param>, <param><decl><type><name pos:line="273" pos:column="58">ResourceParameters</name></type> <name pos:line="273" pos:column="77">parameters</name></decl></param>)</parameter_list>
        <block pos:line="274" pos:column="9">{
            <if pos:line="275" pos:column="13">if <condition pos:line="275" pos:column="16">(<expr><call><name><name pos:line="275" pos:column="17">string</name><op:operator pos:line="275" pos:column="23">.</op:operator><name pos:line="275" pos:column="24">IsNullOrEmpty</name></name><argument_list pos:line="275" pos:column="37">(<argument><expr><name pos:line="275" pos:column="38">resourceName</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="275" pos:column="52">
            <block pos:line="276" pos:column="13">{
                <throw pos:line="277" pos:column="17">throw <expr><op:operator pos:line="277" pos:column="23">new</op:operator> <call><name pos:line="277" pos:column="27">ArgumentNullException</name><argument_list pos:line="277" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="277" pos:column="49">"resourceName"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <if pos:line="280" pos:column="13">if <condition pos:line="280" pos:column="16">(<expr><name pos:line="280" pos:column="17">parameters</name> <op:operator pos:line="280" pos:column="28">==</op:operator> <name pos:line="280" pos:column="31">null</name></expr>)</condition><then pos:line="280" pos:column="36">
            <block pos:line="281" pos:column="13">{
                <throw pos:line="282" pos:column="17">throw <expr><op:operator pos:line="282" pos:column="23">new</op:operator> <call><name pos:line="282" pos:column="27">ArgumentNullException</name><argument_list pos:line="282" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="282" pos:column="49">"parameters"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="285" pos:column="13">string</name></type> <name pos:line="285" pos:column="20">message</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="286" pos:column="13">var</name></type> <name pos:line="286" pos:column="17">logger</name> <init pos:line="286" pos:column="24">= <expr><name><name pos:line="286" pos:column="26">Configuration</name><op:operator pos:line="286" pos:column="39">.</op:operator><name pos:line="286" pos:column="40">Logger</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="287" pos:column="13">var</name></type> <name pos:line="287" pos:column="17">context</name> <init pos:line="287" pos:column="25">= <expr><op:operator pos:line="287" pos:column="27">new</op:operator> <call><name pos:line="287" pos:column="31">ResourceResultContext</name><argument_list pos:line="287" pos:column="52">(<argument><expr><name pos:line="287" pos:column="53">logger</name></expr></argument>, <argument><expr><name><name pos:line="287" pos:column="61">Configuration</name><op:operator pos:line="287" pos:column="74">.</op:operator><name pos:line="287" pos:column="75">FrameworkProvider</name></name></expr></argument>, <argument><expr><name><name pos:line="287" pos:column="94">Configuration</name><op:operator pos:line="287" pos:column="107">.</op:operator><name pos:line="287" pos:column="108">Serializer</name></name></expr></argument>, <argument><expr><name><name pos:line="287" pos:column="120">Configuration</name><op:operator pos:line="287" pos:column="133">.</op:operator><name pos:line="287" pos:column="134">HtmlEncoder</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="289" pos:column="13">// First we determine the current policy as it has been processed so far</comment>
            <decl_stmt><decl><type><name pos:line="290" pos:column="13">RuntimePolicy</name></type> <name pos:line="290" pos:column="27">policy</name> <init pos:line="290" pos:column="34">= <expr><call><name pos:line="290" pos:column="36">DetermineAndStoreAccumulatedRuntimePolicy</name><argument_list pos:line="290" pos:column="77">(<argument><expr><name><name pos:line="290" pos:column="78">RuntimeEvent</name><op:operator pos:line="290" pos:column="90">.</op:operator><name pos:line="290" pos:column="91">ExecuteResource</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="292" pos:column="13">// It is possible that the policy now says Off, but if the requested resource is the default resource or one of it dependent resources, </comment>
            <comment type="line" pos:line="293" pos:column="13">// then we need to make sure there is a good reason for not executing that resource, since the default resource (or one of it dependencies)</comment>
            <comment type="line" pos:line="294" pos:column="13">// is the one we most likely need to set Glimpse On with in the first place.</comment>
            <decl_stmt><decl><type><name pos:line="295" pos:column="13">IDependOnResources</name></type> <name pos:line="295" pos:column="32">defaultResourceDependsOnResources</name> <init pos:line="295" pos:column="66">= <expr><name><name pos:line="295" pos:column="68">Configuration</name><op:operator pos:line="295" pos:column="81">.</op:operator><name pos:line="295" pos:column="82">DefaultResource</name></name> <op:operator pos:line="295" pos:column="98">as</op:operator> <name pos:line="295" pos:column="101">IDependOnResources</name></expr></init></decl>;</decl_stmt>
            <if pos:line="296" pos:column="13">if <condition pos:line="296" pos:column="16">(<expr><call><name><name pos:line="296" pos:column="17">resourceName</name><op:operator pos:line="296" pos:column="29">.</op:operator><name pos:line="296" pos:column="30">Equals</name></name><argument_list pos:line="296" pos:column="36">(<argument><expr><name><name pos:line="296" pos:column="37">Configuration</name><op:operator pos:line="296" pos:column="50">.</op:operator><name pos:line="296" pos:column="51">DefaultResource</name><op:operator pos:line="296" pos:column="66">.</op:operator><name pos:line="296" pos:column="67">Name</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="296" pos:column="73">||</op:operator> <op:operator pos:line="296" pos:column="76">(</op:operator><name pos:line="296" pos:column="77">defaultResourceDependsOnResources</name> <op:operator pos:line="296" pos:column="111">!=</op:operator> <name pos:line="296" pos:column="114">null</name> <op:operator pos:line="296" pos:column="119">&amp;&amp;</op:operator> <call><name><name pos:line="296" pos:column="122">defaultResourceDependsOnResources</name><op:operator pos:line="296" pos:column="155">.</op:operator><name pos:line="296" pos:column="156">DependsOn</name></name><argument_list pos:line="296" pos:column="165">(<argument><expr><name pos:line="296" pos:column="166">resourceName</name></expr></argument>)</argument_list></call><op:operator pos:line="296" pos:column="179">)</op:operator></expr>)</condition><then pos:line="296" pos:column="181">
            <block pos:line="297" pos:column="13">{
                <comment type="line" pos:line="298" pos:column="17">// To be clear we only do this for the default resource (or its dependencies), and we do this because it allows us to secure the default resource </comment>
                <comment type="line" pos:line="299" pos:column="17">// the same way as any other resource, but for this we only rely on runtime policies that handle ExecuteResource runtime events and we ignore</comment>
                <comment type="line" pos:line="300" pos:column="17">// ignore previously executed runtime policies (most likely during BeginRequest).</comment>
                <comment type="line" pos:line="301" pos:column="17">// Either way, the default runtime policy is still our starting point and when it says Off, it remains Off</comment>
                <expr_stmt><expr><name pos:line="302" pos:column="17">policy</name> <op:operator pos:line="302" pos:column="24">=</op:operator> <call><name pos:line="302" pos:column="26">DetermineRuntimePolicy</name><argument_list pos:line="302" pos:column="48">(<argument><expr><name><name pos:line="302" pos:column="49">RuntimeEvent</name><op:operator pos:line="302" pos:column="61">.</op:operator><name pos:line="302" pos:column="62">ExecuteResource</name></name></expr></argument>, <argument><expr><name><name pos:line="302" pos:column="79">Configuration</name><op:operator pos:line="302" pos:column="92">.</op:operator><name pos:line="302" pos:column="93">DefaultRuntimePolicy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if pos:line="305" pos:column="13">if <condition pos:line="305" pos:column="16">(<expr><name pos:line="305" pos:column="17">policy</name> <op:operator pos:line="305" pos:column="24">==</op:operator> <name><name pos:line="305" pos:column="27">RuntimePolicy</name><op:operator pos:line="305" pos:column="40">.</op:operator><name pos:line="305" pos:column="41">Off</name></name></expr>)</condition><then pos:line="305" pos:column="45">
            <block pos:line="306" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="307" pos:column="17">string</name></type> <name pos:line="307" pos:column="24">errorMessage</name> <init pos:line="307" pos:column="37">= <expr><call><name><name pos:line="307" pos:column="39">string</name><op:operator pos:line="307" pos:column="45">.</op:operator><name pos:line="307" pos:column="46">Format</name></name><argument_list pos:line="307" pos:column="52">(<argument><expr><name><name pos:line="307" pos:column="53">Resources</name><op:operator pos:line="307" pos:column="62">.</op:operator><name pos:line="307" pos:column="63">ExecuteResourceInsufficientPolicy</name></name></expr></argument>, <argument><expr><name pos:line="307" pos:column="98">resourceName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="308" pos:column="17">logger</name><op:operator pos:line="308" pos:column="23">.</op:operator><name pos:line="308" pos:column="24">Info</name></name><argument_list pos:line="308" pos:column="28">(<argument><expr><name pos:line="308" pos:column="29">errorMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><op:operator pos:line="309" pos:column="17">new</op:operator> <call><name pos:line="309" pos:column="21">StatusCodeResourceResult</name><argument_list pos:line="309" pos:column="45">(<argument><expr><lit:literal type="number" pos:line="309" pos:column="46">403</lit:literal></expr></argument>, <argument><expr><name pos:line="309" pos:column="51">errorMessage</name></expr></argument>)</argument_list></call><op:operator pos:line="309" pos:column="64">.</op:operator><call><name pos:line="309" pos:column="65">Execute</name><argument_list pos:line="309" pos:column="72">(<argument><expr><name pos:line="309" pos:column="73">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="310" pos:column="17">return;</return>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="313" pos:column="13">var</name></type> <name pos:line="313" pos:column="17">resources</name> <init pos:line="313" pos:column="27">=
                <expr><call><name><name pos:line="314" pos:column="17">Configuration</name><op:operator pos:line="314" pos:column="30">.</op:operator><name pos:line="314" pos:column="31">Resources</name><op:operator pos:line="314" pos:column="40">.</op:operator><name pos:line="314" pos:column="41">Where</name></name><argument_list pos:line="314" pos:column="46">(
                    <argument><expr><lambda><name pos:line="315" pos:column="21">r</name> <op:operator pos:line="315" pos:column="23">=&gt;</op:operator> <call><name><name pos:line="315" pos:column="26">r</name><op:operator pos:line="315" pos:column="27">.</op:operator><name pos:line="315" pos:column="28">Name</name><op:operator pos:line="315" pos:column="32">.</op:operator><name pos:line="315" pos:column="33">Equals</name></name><argument_list pos:line="315" pos:column="39">(<argument><expr><name pos:line="315" pos:column="40">resourceName</name></expr></argument>, <argument><expr><name><name pos:line="315" pos:column="54">StringComparison</name><op:operator pos:line="315" pos:column="70">.</op:operator><name pos:line="315" pos:column="71">InvariantCultureIgnoreCase</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="317" pos:column="13">IResourceResult</name></type> <name pos:line="317" pos:column="29">result</name></decl>;</decl_stmt>
            <switch pos:line="318" pos:column="13">switch <condition pos:line="318" pos:column="20">(<expr><call><name><name pos:line="318" pos:column="21">resources</name><op:operator pos:line="318" pos:column="30">.</op:operator><name pos:line="318" pos:column="31">Count</name></name><argument_list pos:line="318" pos:column="36">()</argument_list></call></expr>)</condition>
            <block pos:line="319" pos:column="13">{
                <case pos:line="320" pos:column="17">case <expr><lit:literal type="number" pos:line="320" pos:column="22">1</lit:literal></expr>: <comment type="line" pos:line="320" pos:column="25">// 200 - OK</comment>
                    <try pos:line="321" pos:column="21">try
                    <block pos:line="322" pos:column="21">{
                        <decl_stmt><decl><type><name pos:line="323" pos:column="25">var</name></type> <name pos:line="323" pos:column="29">resource</name> <init pos:line="323" pos:column="38">= <expr><call><name><name pos:line="323" pos:column="40">resources</name><op:operator pos:line="323" pos:column="49">.</op:operator><name pos:line="323" pos:column="50">First</name></name><argument_list pos:line="323" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name pos:line="324" pos:column="25">var</name></type> <name pos:line="324" pos:column="29">resourceContext</name> <init pos:line="324" pos:column="45">= <expr><op:operator pos:line="324" pos:column="47">new</op:operator> <call><name pos:line="324" pos:column="51">ResourceContext</name><argument_list pos:line="324" pos:column="66">(<argument><expr><call><name><name pos:line="324" pos:column="67">parameters</name><op:operator pos:line="324" pos:column="77">.</op:operator><name pos:line="324" pos:column="78">GetParametersFor</name></name><argument_list pos:line="324" pos:column="94">(<argument><expr><name pos:line="324" pos:column="95">resource</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="324" pos:column="106">Configuration</name><op:operator pos:line="324" pos:column="119">.</op:operator><name pos:line="324" pos:column="120">PersistenceStore</name></name></expr></argument>, <argument><expr><name pos:line="324" pos:column="138">logger</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <decl_stmt><decl><type><name pos:line="326" pos:column="25">var</name></type> <name pos:line="326" pos:column="29">privilegedResource</name> <init pos:line="326" pos:column="48">= <expr><name pos:line="326" pos:column="50">resource</name> <op:operator pos:line="326" pos:column="59">as</op:operator> <name pos:line="326" pos:column="62">IPrivilegedResource</name></expr></init></decl>;</decl_stmt>

                        <if pos:line="328" pos:column="25">if <condition pos:line="328" pos:column="28">(<expr><name pos:line="328" pos:column="29">privilegedResource</name> <op:operator pos:line="328" pos:column="48">!=</op:operator> <name pos:line="328" pos:column="51">null</name></expr>)</condition><then pos:line="328" pos:column="56">
                        <block pos:line="329" pos:column="25">{
                            <expr_stmt><expr><name pos:line="330" pos:column="29">result</name> <op:operator pos:line="330" pos:column="36">=</op:operator> <call><name><name pos:line="330" pos:column="38">privilegedResource</name><op:operator pos:line="330" pos:column="56">.</op:operator><name pos:line="330" pos:column="57">Execute</name></name><argument_list pos:line="330" pos:column="64">(<argument><expr><name pos:line="330" pos:column="65">resourceContext</name></expr></argument>, <argument><expr><name pos:line="330" pos:column="82">Configuration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then>
                        <else pos:line="332" pos:column="25">else
                        <block pos:line="333" pos:column="25">{
                            <expr_stmt><expr><name pos:line="334" pos:column="29">result</name> <op:operator pos:line="334" pos:column="36">=</op:operator> <call><name><name pos:line="334" pos:column="38">resource</name><op:operator pos:line="334" pos:column="46">.</op:operator><name pos:line="334" pos:column="47">Execute</name></name><argument_list pos:line="334" pos:column="54">(<argument><expr><name pos:line="334" pos:column="55">resourceContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></else></if>
                    }</block>
                    <catch pos:line="337" pos:column="21">catch <parameter_list pos:line="337" pos:column="27">(<param><decl><type><name pos:line="337" pos:column="28">Exception</name></type> <name pos:line="337" pos:column="38">ex</name></decl></param>)</parameter_list>
                    <block pos:line="338" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="339" pos:column="25">logger</name><op:operator pos:line="339" pos:column="31">.</op:operator><name pos:line="339" pos:column="32">Error</name></name><argument_list pos:line="339" pos:column="37">(<argument><expr><name><name pos:line="339" pos:column="38">Resources</name><op:operator pos:line="339" pos:column="47">.</op:operator><name pos:line="339" pos:column="48">GlimpseRuntimeExecuteResourceError</name></name></expr></argument>, <argument><expr><name pos:line="339" pos:column="84">ex</name></expr></argument>, <argument><expr><name pos:line="339" pos:column="88">resourceName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="340" pos:column="25">result</name> <op:operator pos:line="340" pos:column="32">=</op:operator> <op:operator pos:line="340" pos:column="34">new</op:operator> <call><name pos:line="340" pos:column="38">ExceptionResourceResult</name><argument_list pos:line="340" pos:column="61">(<argument><expr><name pos:line="340" pos:column="62">ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></catch></try>

                    <break pos:line="343" pos:column="21">break;</break>
                </case><case pos:line="344" pos:column="17">case <expr><lit:literal type="number" pos:line="344" pos:column="22">0</lit:literal></expr>: <comment type="line" pos:line="344" pos:column="25">// 404 - File Not Found</comment>
                    <expr_stmt><expr><name pos:line="345" pos:column="21">message</name> <op:operator pos:line="345" pos:column="29">=</op:operator> <call><name><name pos:line="345" pos:column="31">string</name><op:operator pos:line="345" pos:column="37">.</op:operator><name pos:line="345" pos:column="38">Format</name></name><argument_list pos:line="345" pos:column="44">(<argument><expr><name><name pos:line="345" pos:column="45">Resources</name><op:operator pos:line="345" pos:column="54">.</op:operator><name pos:line="345" pos:column="55">ExecuteResourceMissingError</name></name></expr></argument>, <argument><expr><name pos:line="345" pos:column="84">resourceName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="346" pos:column="21">logger</name><op:operator pos:line="346" pos:column="27">.</op:operator><name pos:line="346" pos:column="28">Warn</name></name><argument_list pos:line="346" pos:column="32">(<argument><expr><name pos:line="346" pos:column="33">message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="347" pos:column="21">result</name> <op:operator pos:line="347" pos:column="28">=</op:operator> <op:operator pos:line="347" pos:column="30">new</op:operator> <call><name pos:line="347" pos:column="34">StatusCodeResourceResult</name><argument_list pos:line="347" pos:column="58">(<argument><expr><lit:literal type="number" pos:line="347" pos:column="59">404</lit:literal></expr></argument>, <argument><expr><name pos:line="347" pos:column="64">message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:line="348" pos:column="21">break;</break>
                </case><default pos:line="349" pos:column="17">default: <comment type="line" pos:line="349" pos:column="26">// 500 - Server Error</comment>
                    <expr_stmt><expr><name pos:line="350" pos:column="21">message</name> <op:operator pos:line="350" pos:column="29">=</op:operator> <call><name><name pos:line="350" pos:column="31">string</name><op:operator pos:line="350" pos:column="37">.</op:operator><name pos:line="350" pos:column="38">Format</name></name><argument_list pos:line="350" pos:column="44">(<argument><expr><name><name pos:line="350" pos:column="45">Resources</name><op:operator pos:line="350" pos:column="54">.</op:operator><name pos:line="350" pos:column="55">ExecuteResourceDuplicateError</name></name></expr></argument>, <argument><expr><name pos:line="350" pos:column="86">resourceName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="351" pos:column="21">logger</name><op:operator pos:line="351" pos:column="27">.</op:operator><name pos:line="351" pos:column="28">Warn</name></name><argument_list pos:line="351" pos:column="32">(<argument><expr><name pos:line="351" pos:column="33">message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="352" pos:column="21">result</name> <op:operator pos:line="352" pos:column="28">=</op:operator> <op:operator pos:line="352" pos:column="30">new</op:operator> <call><name pos:line="352" pos:column="34">StatusCodeResourceResult</name><argument_list pos:line="352" pos:column="58">(<argument><expr><lit:literal type="number" pos:line="352" pos:column="59">500</lit:literal></expr></argument>, <argument><expr><name pos:line="352" pos:column="64">message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:line="353" pos:column="21">break;</break>
            </default>}</block></switch>

            <try pos:line="356" pos:column="13">try
            <block pos:line="357" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="358" pos:column="17">result</name><op:operator pos:line="358" pos:column="23">.</op:operator><name pos:line="358" pos:column="24">Execute</name></name><argument_list pos:line="358" pos:column="31">(<argument><expr><name pos:line="358" pos:column="32">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch pos:line="360" pos:column="13">catch <parameter_list pos:line="360" pos:column="19">(<param><decl><type><name pos:line="360" pos:column="20">Exception</name></type> <name pos:line="360" pos:column="30">exception</name></decl></param>)</parameter_list>
            <block pos:line="361" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="362" pos:column="17">logger</name><op:operator pos:line="362" pos:column="23">.</op:operator><name pos:line="362" pos:column="24">Fatal</name></name><argument_list pos:line="362" pos:column="29">(<argument><expr><name><name pos:line="362" pos:column="30">Resources</name><op:operator pos:line="362" pos:column="39">.</op:operator><name pos:line="362" pos:column="40">GlimpseRuntimeExecuteResourceResultError</name></name></expr></argument>, <argument><expr><name pos:line="362" pos:column="82">exception</name></expr></argument>, <argument><expr><call><name><name pos:line="362" pos:column="93">result</name><op:operator pos:line="362" pos:column="99">.</op:operator><name pos:line="362" pos:column="100">GetType</name></name><argument_list pos:line="362" pos:column="107">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></function>

        <comment type="line" pos:line="366" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="367" pos:column="9">/// Initializes this instance of the Glimpse runtime.</comment>
        <comment type="line" pos:line="368" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="369" pos:column="9">/// &lt;returns&gt;</comment>
        <comment type="line" pos:line="370" pos:column="9">///   &lt;c&gt;true&lt;/c&gt; if system initialized successfully, &lt;c&gt;false&lt;/c&gt; otherwise</comment>
        <comment type="line" pos:line="371" pos:column="9">/// &lt;/returns&gt;</comment>
        <function><type><specifier pos:line="372" pos:column="9">public</specifier> <name pos:line="372" pos:column="16">bool</name></type> <name pos:line="372" pos:column="21">Initialize</name><parameter_list pos:line="372" pos:column="31">()</parameter_list>
        <block pos:line="373" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="374" pos:column="13">var</name></type> <name pos:line="374" pos:column="17">policy</name> <init pos:line="374" pos:column="24">= <expr><name><name pos:line="374" pos:column="26">RuntimePolicy</name><op:operator pos:line="374" pos:column="39">.</op:operator><name pos:line="374" pos:column="40">Off</name></name></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="376" pos:column="13">// Double checked lock to ensure thread safety. http://en.wikipedia.org/wiki/Double_checked_locking_pattern</comment>
            <if pos:line="377" pos:column="13">if <condition pos:line="377" pos:column="16">(<expr><op:operator pos:line="377" pos:column="17">!</op:operator><name pos:line="377" pos:column="18">IsInitialized</name></expr>)</condition><then pos:line="377" pos:column="32">
            <block pos:line="378" pos:column="13">{
                <lock pos:line="379" pos:column="17">lock (<expr><name pos:line="379" pos:column="23">LockObj</name></expr>)
                <block pos:line="380" pos:column="17">{
                    <if pos:line="381" pos:column="21">if <condition pos:line="381" pos:column="24">(<expr><op:operator pos:line="381" pos:column="25">!</op:operator><name pos:line="381" pos:column="26">IsInitialized</name></expr>)</condition><then pos:line="381" pos:column="40">
                    <block pos:line="382" pos:column="21">{
                        <decl_stmt><decl><type><name pos:line="383" pos:column="25">var</name></type> <name pos:line="383" pos:column="29">logger</name> <init pos:line="383" pos:column="36">= <expr><name><name pos:line="383" pos:column="38">Configuration</name><op:operator pos:line="383" pos:column="51">.</op:operator><name pos:line="383" pos:column="52">Logger</name></name></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name pos:line="384" pos:column="25">policy</name> <op:operator pos:line="384" pos:column="32">=</op:operator> <call><name pos:line="384" pos:column="34">DetermineAndStoreAccumulatedRuntimePolicy</name><argument_list pos:line="384" pos:column="75">(<argument><expr><name><name pos:line="384" pos:column="76">RuntimeEvent</name><op:operator pos:line="384" pos:column="88">.</op:operator><name pos:line="384" pos:column="89">Initialize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if pos:line="386" pos:column="25">if <condition pos:line="386" pos:column="28">(<expr><name pos:line="386" pos:column="29">policy</name> <op:operator pos:line="386" pos:column="36">!=</op:operator> <name><name pos:line="386" pos:column="39">RuntimePolicy</name><op:operator pos:line="386" pos:column="52">.</op:operator><name pos:line="386" pos:column="53">Off</name></name></expr>)</condition><then pos:line="386" pos:column="57">
                        <block pos:line="387" pos:column="25">{
                            <expr_stmt><expr><call><name pos:line="388" pos:column="29">CreateAndStartGlobalExecutionTimer</name><argument_list pos:line="388" pos:column="63">(<argument><expr><name><name pos:line="388" pos:column="64">Configuration</name><op:operator pos:line="388" pos:column="77">.</op:operator><name pos:line="388" pos:column="78">FrameworkProvider</name><op:operator pos:line="388" pos:column="95">.</op:operator><name pos:line="388" pos:column="96">HttpRequestStore</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <decl_stmt><decl><type><name pos:line="390" pos:column="29">var</name></type> <name pos:line="390" pos:column="33">messageBroker</name> <init pos:line="390" pos:column="47">= <expr><name><name pos:line="390" pos:column="49">Configuration</name><op:operator pos:line="390" pos:column="62">.</op:operator><name pos:line="390" pos:column="63">MessageBroker</name></name></expr></init></decl>;</decl_stmt>

                            <comment type="line" pos:line="392" pos:column="29">// TODO: Fix this to IDisplay no longer uses I*Tab*Setup</comment>
                            <decl_stmt><decl><type><name pos:line="393" pos:column="29">var</name></type> <name pos:line="393" pos:column="33">displaysThatRequireSetup</name> <init pos:line="393" pos:column="58">= <expr><call><name><name pos:line="393" pos:column="60">Configuration</name><op:operator pos:line="393" pos:column="73">.</op:operator><name pos:line="393" pos:column="74">Displays</name><op:operator pos:line="393" pos:column="82">.</op:operator><name pos:line="393" pos:column="83">Where</name></name><argument_list pos:line="393" pos:column="88">(<argument><expr><lambda><name pos:line="393" pos:column="89">display</name> <op:operator pos:line="393" pos:column="97">=&gt;</op:operator> <name pos:line="393" pos:column="100">display</name> <op:operator pos:line="393" pos:column="108">is</op:operator> <name pos:line="393" pos:column="111">ITabSetup</name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="393" pos:column="121">.</op:operator><call><name pos:line="393" pos:column="122">Select</name><argument_list pos:line="393" pos:column="128">(<argument><expr><lambda><name pos:line="393" pos:column="129">display</name> <op:operator pos:line="393" pos:column="137">=&gt;</op:operator> <name pos:line="393" pos:column="140">display</name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <foreach pos:line="394" pos:column="29">foreach (<init><decl><type><name pos:line="394" pos:column="38">ITabSetup</name></type> <name pos:line="394" pos:column="48">display</name> <range pos:line="394" pos:column="56">in <expr><name pos:line="394" pos:column="59">displaysThatRequireSetup</name></expr></range></decl></init>)
                            <block pos:line="395" pos:column="29">{
                                <decl_stmt><decl><type><name pos:line="396" pos:column="33">var</name></type> <name pos:line="396" pos:column="37">key</name> <init pos:line="396" pos:column="41">= <expr><call><name pos:line="396" pos:column="43">CreateKey</name><argument_list pos:line="396" pos:column="52">(<argument><expr><name pos:line="396" pos:column="53">display</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                <try pos:line="397" pos:column="33">try
                                <block pos:line="398" pos:column="33">{
                                    <decl_stmt><decl><type><name pos:line="399" pos:column="37">var</name></type> <name pos:line="399" pos:column="41">setupContext</name> <init pos:line="399" pos:column="54">= <expr><op:operator pos:line="399" pos:column="56">new</op:operator> <call><name pos:line="399" pos:column="60">TabSetupContext</name><argument_list pos:line="399" pos:column="75">(<argument><expr><name pos:line="399" pos:column="76">logger</name></expr></argument>, <argument><expr><name pos:line="399" pos:column="84">messageBroker</name></expr></argument>, <argument><expr><lambda><parameter_list pos:line="399" pos:column="99">()</parameter_list> <op:operator pos:line="399" pos:column="102">=&gt;</op:operator> <call><name pos:line="399" pos:column="105">GetTabStore</name><argument_list pos:line="399" pos:column="116">(<argument><expr><name pos:line="399" pos:column="117">key</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                    <expr_stmt><expr><call><name><name pos:line="400" pos:column="37">display</name><op:operator pos:line="400" pos:column="44">.</op:operator><name pos:line="400" pos:column="45">Setup</name></name><argument_list pos:line="400" pos:column="50">(<argument><expr><name pos:line="400" pos:column="51">setupContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                }</block>
                                <catch pos:line="402" pos:column="33">catch <parameter_list pos:line="402" pos:column="39">(<param><decl><type><name pos:line="402" pos:column="40">Exception</name></type> <name pos:line="402" pos:column="50">exception</name></decl></param>)</parameter_list>
                                <block pos:line="403" pos:column="33">{
                                    <expr_stmt><expr><call><name><name pos:line="404" pos:column="37">logger</name><op:operator pos:line="404" pos:column="43">.</op:operator><name pos:line="404" pos:column="44">Error</name></name><argument_list pos:line="404" pos:column="49">(<argument><expr><name><name pos:line="404" pos:column="50">Resources</name><op:operator pos:line="404" pos:column="59">.</op:operator><name pos:line="404" pos:column="60">InitializeTabError</name></name></expr></argument>, <argument><expr><name pos:line="404" pos:column="80">exception</name></expr></argument>, <argument><expr><name pos:line="404" pos:column="91">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                }</block></catch></try>
                            }</block></foreach>

                            <decl_stmt><decl><type><name pos:line="408" pos:column="29">var</name></type> <name pos:line="408" pos:column="33">tabsThatRequireSetup</name> <init pos:line="408" pos:column="54">= <expr><call><name><name pos:line="408" pos:column="56">Configuration</name><op:operator pos:line="408" pos:column="69">.</op:operator><name pos:line="408" pos:column="70">Tabs</name><op:operator pos:line="408" pos:column="74">.</op:operator><name pos:line="408" pos:column="75">Where</name></name><argument_list pos:line="408" pos:column="80">(<argument><expr><lambda><name pos:line="408" pos:column="81">tab</name> <op:operator pos:line="408" pos:column="85">=&gt;</op:operator> <name pos:line="408" pos:column="88">tab</name> <op:operator pos:line="408" pos:column="92">is</op:operator> <name pos:line="408" pos:column="95">ITabSetup</name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="408" pos:column="105">.</op:operator><call><name pos:line="408" pos:column="106">Select</name><argument_list pos:line="408" pos:column="112">(<argument><expr><lambda><name pos:line="408" pos:column="113">tab</name> <op:operator pos:line="408" pos:column="117">=&gt;</op:operator> <name pos:line="408" pos:column="120">tab</name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <foreach pos:line="409" pos:column="29">foreach (<init><decl><type><name pos:line="409" pos:column="38">ITabSetup</name></type> <name pos:line="409" pos:column="48">tab</name> <range pos:line="409" pos:column="52">in <expr><name pos:line="409" pos:column="55">tabsThatRequireSetup</name></expr></range></decl></init>)
                            <block pos:line="410" pos:column="29">{
                                <decl_stmt><decl><type><name pos:line="411" pos:column="33">var</name></type> <name pos:line="411" pos:column="37">key</name> <init pos:line="411" pos:column="41">= <expr><call><name pos:line="411" pos:column="43">CreateKey</name><argument_list pos:line="411" pos:column="52">(<argument><expr><name pos:line="411" pos:column="53">tab</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                <try pos:line="412" pos:column="33">try
                                <block pos:line="413" pos:column="33">{
                                    <decl_stmt><decl><type><name pos:line="414" pos:column="37">var</name></type> <name pos:line="414" pos:column="41">setupContext</name> <init pos:line="414" pos:column="54">= <expr><op:operator pos:line="414" pos:column="56">new</op:operator> <call><name pos:line="414" pos:column="60">TabSetupContext</name><argument_list pos:line="414" pos:column="75">(<argument><expr><name pos:line="414" pos:column="76">logger</name></expr></argument>, <argument><expr><name pos:line="414" pos:column="84">messageBroker</name></expr></argument>, <argument><expr><lambda><parameter_list pos:line="414" pos:column="99">()</parameter_list> <op:operator pos:line="414" pos:column="102">=&gt;</op:operator> <call><name pos:line="414" pos:column="105">GetTabStore</name><argument_list pos:line="414" pos:column="116">(<argument><expr><name pos:line="414" pos:column="117">key</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                    <expr_stmt><expr><call><name><name pos:line="415" pos:column="37">tab</name><op:operator pos:line="415" pos:column="40">.</op:operator><name pos:line="415" pos:column="41">Setup</name></name><argument_list pos:line="415" pos:column="46">(<argument><expr><name pos:line="415" pos:column="47">setupContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                }</block>
                                <catch pos:line="417" pos:column="33">catch <parameter_list pos:line="417" pos:column="39">(<param><decl><type><name pos:line="417" pos:column="40">Exception</name></type> <name pos:line="417" pos:column="50">exception</name></decl></param>)</parameter_list>
                                <block pos:line="418" pos:column="33">{
                                    <expr_stmt><expr><call><name><name pos:line="419" pos:column="37">logger</name><op:operator pos:line="419" pos:column="43">.</op:operator><name pos:line="419" pos:column="44">Error</name></name><argument_list pos:line="419" pos:column="49">(<argument><expr><name><name pos:line="419" pos:column="50">Resources</name><op:operator pos:line="419" pos:column="59">.</op:operator><name pos:line="419" pos:column="60">InitializeTabError</name></name></expr></argument>, <argument><expr><name pos:line="419" pos:column="80">exception</name></expr></argument>, <argument><expr><name pos:line="419" pos:column="91">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                }</block></catch></try>
                            }</block></foreach>

                            <decl_stmt><decl><type><name pos:line="423" pos:column="29">var</name></type> <name pos:line="423" pos:column="33">inspectorContext</name> <init pos:line="423" pos:column="50">= <expr><op:operator pos:line="423" pos:column="52">new</op:operator> <call><name pos:line="423" pos:column="56">InspectorContext</name><argument_list pos:line="423" pos:column="72">(<argument><expr><name pos:line="423" pos:column="73">logger</name></expr></argument>, <argument><expr><name><name pos:line="423" pos:column="81">Configuration</name><op:operator pos:line="423" pos:column="94">.</op:operator><name pos:line="423" pos:column="95">ProxyFactory</name></name></expr></argument>, <argument><expr><name pos:line="423" pos:column="109">messageBroker</name></expr></argument>, <argument><expr><name><name pos:line="423" pos:column="124">Configuration</name><op:operator pos:line="423" pos:column="137">.</op:operator><name pos:line="423" pos:column="138">TimerStrategy</name></name></expr></argument>, <argument><expr><name><name pos:line="423" pos:column="153">Configuration</name><op:operator pos:line="423" pos:column="166">.</op:operator><name pos:line="423" pos:column="167">RuntimePolicyStrategy</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                            <foreach pos:line="425" pos:column="29">foreach (<init><decl><type><name pos:line="425" pos:column="38">var</name></type> <name pos:line="425" pos:column="42">inspector</name> <range pos:line="425" pos:column="52">in <expr><name><name pos:line="425" pos:column="55">Configuration</name><op:operator pos:line="425" pos:column="68">.</op:operator><name pos:line="425" pos:column="69">Inspectors</name></name></expr></range></decl></init>)
                            <block pos:line="426" pos:column="29">{
                                <try pos:line="427" pos:column="33">try
                                <block pos:line="428" pos:column="33">{
                                    <expr_stmt><expr><call><name><name pos:line="429" pos:column="37">inspector</name><op:operator pos:line="429" pos:column="46">.</op:operator><name pos:line="429" pos:column="47">Setup</name></name><argument_list pos:line="429" pos:column="52">(<argument><expr><name pos:line="429" pos:column="53">inspectorContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <expr_stmt><expr><call><name><name pos:line="430" pos:column="37">logger</name><op:operator pos:line="430" pos:column="43">.</op:operator><name pos:line="430" pos:column="44">Debug</name></name><argument_list pos:line="430" pos:column="49">(<argument><expr><name><name pos:line="430" pos:column="50">Resources</name><op:operator pos:line="430" pos:column="59">.</op:operator><name pos:line="430" pos:column="60">GlimpseRuntimeInitializeSetupInspector</name></name></expr></argument>, <argument><expr><call><name><name pos:line="430" pos:column="100">inspector</name><op:operator pos:line="430" pos:column="109">.</op:operator><name pos:line="430" pos:column="110">GetType</name></name><argument_list pos:line="430" pos:column="117">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                }</block>
                                <catch pos:line="432" pos:column="33">catch <parameter_list pos:line="432" pos:column="39">(<param><decl><type><name pos:line="432" pos:column="40">Exception</name></type> <name pos:line="432" pos:column="50">exception</name></decl></param>)</parameter_list>
                                <block pos:line="433" pos:column="33">{
                                    <expr_stmt><expr><call><name><name pos:line="434" pos:column="37">logger</name><op:operator pos:line="434" pos:column="43">.</op:operator><name pos:line="434" pos:column="44">Error</name></name><argument_list pos:line="434" pos:column="49">(<argument><expr><name><name pos:line="434" pos:column="50">Resources</name><op:operator pos:line="434" pos:column="59">.</op:operator><name pos:line="434" pos:column="60">InitializeInspectorError</name></name></expr></argument>, <argument><expr><name pos:line="434" pos:column="86">exception</name></expr></argument>, <argument><expr><call><name><name pos:line="434" pos:column="97">inspector</name><op:operator pos:line="434" pos:column="106">.</op:operator><name pos:line="434" pos:column="107">GetType</name></name><argument_list pos:line="434" pos:column="114">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                }</block></catch></try>
                            }</block></foreach>

                            <expr_stmt><expr><call><name pos:line="438" pos:column="29">PersistMetadata</name><argument_list pos:line="438" pos:column="44">()</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>

                        <expr_stmt><expr><name pos:line="441" pos:column="25">IsInitialized</name> <op:operator pos:line="441" pos:column="39">=</op:operator> <lit:literal type="boolean" pos:line="441" pos:column="41">true</lit:literal></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></lock>
            }</block></then></if>

            <return pos:line="446" pos:column="13">return <expr><name pos:line="446" pos:column="20">policy</name> <op:operator pos:line="446" pos:column="27">!=</op:operator> <name><name pos:line="446" pos:column="30">RuntimePolicy</name><op:operator pos:line="446" pos:column="43">.</op:operator><name pos:line="446" pos:column="44">Off</name></name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="449" pos:column="9">private</specifier> <specifier pos:line="449" pos:column="17">static</specifier> <name pos:line="449" pos:column="24">UriTemplate</name></type> <name pos:line="449" pos:column="36">SetParameters</name><parameter_list pos:line="449" pos:column="49">(<param><decl><type><name pos:line="449" pos:column="50">UriTemplate</name></type> <param><decl><type><specifier pos:line="449" pos:column="62">template</specifier></type></decl></param></decl></param>, <param><decl><type><name><name pos:line="449" pos:column="72">IEnumerable</name><argument_list pos:line="449" pos:column="83">&lt;<argument><name><name pos:line="449" pos:column="84">KeyValuePair</name><argument_list pos:line="449" pos:column="96">&lt;<argument><name pos:line="449" pos:column="97">string</name></argument>, <argument><name pos:line="449" pos:column="105">string</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="449" pos:column="114">nameValues</name></decl></param>)</parameter_list>
        <block pos:line="450" pos:column="9">{
            <if pos:line="451" pos:column="13">if <condition pos:line="451" pos:column="16">(<expr><name pos:line="451" pos:column="17">nameValues</name> <op:operator pos:line="451" pos:column="28">==</op:operator> <name pos:line="451" pos:column="31">null</name></expr>)</condition><then pos:line="451" pos:column="36">
            <block pos:line="452" pos:column="13">{
                <return pos:line="453" pos:column="17">return</return> <template pos:line="453" pos:column="24">template<empty_stmt pos:line="453" pos:column="32">;</empty_stmt></template>
            }</block></then></if>

            <foreach pos:line="456" pos:column="13">foreach (<init><decl><type><name pos:line="456" pos:column="22">var</name></type> <name pos:line="456" pos:column="26">pair</name> <range pos:line="456" pos:column="31">in <expr><name pos:line="456" pos:column="34">nameValues</name></expr></range></decl></init>)
            <block pos:line="457" pos:column="13">{
                template<expr_stmt><expr><op:operator pos:line="458" pos:column="25">.</op:operator><call><name pos:line="458" pos:column="26">SetParameter</name><argument_list pos:line="458" pos:column="38">(<argument><expr><name><name pos:line="458" pos:column="39">pair</name><op:operator pos:line="458" pos:column="43">.</op:operator><name pos:line="458" pos:column="44">Key</name></name></expr></argument>, <argument><expr><name><name pos:line="458" pos:column="49">pair</name><op:operator pos:line="458" pos:column="53">.</op:operator><name pos:line="458" pos:column="54">Value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>

            <return pos:line="461" pos:column="13">return</return> <template pos:line="461" pos:column="20">template<empty_stmt pos:line="461" pos:column="28">;</empty_stmt></template>
        }</block></function>

        <function><type><specifier pos:line="464" pos:column="9">private</specifier> <specifier pos:line="464" pos:column="17">static</specifier> <name pos:line="464" pos:column="24">ExecutionTimer</name></type> <name pos:line="464" pos:column="39">CreateAndStartGlobalExecutionTimer</name><parameter_list pos:line="464" pos:column="73">(<param><decl><type><name pos:line="464" pos:column="74">IDataStore</name></type> <name pos:line="464" pos:column="85">requestStore</name></decl></param>)</parameter_list>
        <block pos:line="465" pos:column="9">{
            <if pos:line="466" pos:column="13">if <condition pos:line="466" pos:column="16">(<expr><call><name><name pos:line="466" pos:column="17">requestStore</name><op:operator pos:line="466" pos:column="29">.</op:operator><name pos:line="466" pos:column="30">Contains</name></name><argument_list pos:line="466" pos:column="38">(<argument><expr><name><name pos:line="466" pos:column="39">Constants</name><op:operator pos:line="466" pos:column="48">.</op:operator><name pos:line="466" pos:column="49">GlobalStopwatchKey</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="466" pos:column="69">&amp;&amp;</op:operator> <call><name><name pos:line="466" pos:column="72">requestStore</name><op:operator pos:line="466" pos:column="84">.</op:operator><name pos:line="466" pos:column="85">Contains</name></name><argument_list pos:line="466" pos:column="93">(<argument><expr><name><name pos:line="466" pos:column="94">Constants</name><op:operator pos:line="466" pos:column="103">.</op:operator><name pos:line="466" pos:column="104">GlobalTimerKey</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="466" pos:column="120">
            <block pos:line="467" pos:column="13">{
                <return pos:line="468" pos:column="17">return <expr><call><name><name pos:line="468" pos:column="24">requestStore</name><op:operator pos:line="468" pos:column="36">.</op:operator><name><name pos:line="468" pos:column="37">Get</name><argument_list pos:line="468" pos:column="40">&lt;<argument><name pos:line="468" pos:column="41">ExecutionTimer</name></argument>&gt;</argument_list></name></name><argument_list pos:line="468" pos:column="56">(<argument><expr><name><name pos:line="468" pos:column="57">Constants</name><op:operator pos:line="468" pos:column="66">.</op:operator><name pos:line="468" pos:column="67">GlobalTimerKey</name></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>

            <comment type="line" pos:line="471" pos:column="13">// Create and start global stopwatch</comment>
            <decl_stmt><decl><type><name pos:line="472" pos:column="13">var</name></type> <name pos:line="472" pos:column="17">stopwatch</name> <init pos:line="472" pos:column="27">= <expr><call><name><name pos:line="472" pos:column="29">Stopwatch</name><op:operator pos:line="472" pos:column="38">.</op:operator><name pos:line="472" pos:column="39">StartNew</name></name><argument_list pos:line="472" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="473" pos:column="13">var</name></type> <name pos:line="473" pos:column="17">executionTimer</name> <init pos:line="473" pos:column="32">= <expr><op:operator pos:line="473" pos:column="34">new</op:operator> <call><name pos:line="473" pos:column="38">ExecutionTimer</name><argument_list pos:line="473" pos:column="52">(<argument><expr><name pos:line="473" pos:column="53">stopwatch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="474" pos:column="13">requestStore</name><op:operator pos:line="474" pos:column="25">.</op:operator><name pos:line="474" pos:column="26">Set</name></name><argument_list pos:line="474" pos:column="29">(<argument><expr><name><name pos:line="474" pos:column="30">Constants</name><op:operator pos:line="474" pos:column="39">.</op:operator><name pos:line="474" pos:column="40">GlobalStopwatchKey</name></name></expr></argument>, <argument><expr><name pos:line="474" pos:column="60">stopwatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="475" pos:column="13">requestStore</name><op:operator pos:line="475" pos:column="25">.</op:operator><name pos:line="475" pos:column="26">Set</name></name><argument_list pos:line="475" pos:column="29">(<argument><expr><name><name pos:line="475" pos:column="30">Constants</name><op:operator pos:line="475" pos:column="39">.</op:operator><name pos:line="475" pos:column="40">GlobalTimerKey</name></name></expr></argument>, <argument><expr><name pos:line="475" pos:column="56">executionTimer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="476" pos:column="13">return <expr><name pos:line="476" pos:column="20">executionTimer</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="479" pos:column="9">private</specifier> <specifier pos:line="479" pos:column="17">static</specifier> <name pos:line="479" pos:column="24">string</name></type> <name pos:line="479" pos:column="31">CreateKey</name><parameter_list pos:line="479" pos:column="40">(<param><decl><type><name pos:line="479" pos:column="41">object</name></type> <name pos:line="479" pos:column="48">obj</name></decl></param>)</parameter_list>
        <block pos:line="480" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="481" pos:column="13">string</name></type> <name pos:line="481" pos:column="20">result</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="482" pos:column="13">var</name></type> <name pos:line="482" pos:column="17">keyProvider</name> <init pos:line="482" pos:column="29">= <expr><name pos:line="482" pos:column="31">obj</name> <op:operator pos:line="482" pos:column="35">as</op:operator> <name pos:line="482" pos:column="38">IKey</name></expr></init></decl>;</decl_stmt>

            <if pos:line="484" pos:column="13">if <condition pos:line="484" pos:column="16">(<expr><name pos:line="484" pos:column="17">keyProvider</name> <op:operator pos:line="484" pos:column="29">!=</op:operator> <name pos:line="484" pos:column="32">null</name></expr>)</condition><then pos:line="484" pos:column="37">
            <block pos:line="485" pos:column="13">{
                <expr_stmt><expr><name pos:line="486" pos:column="17">result</name> <op:operator pos:line="486" pos:column="24">=</op:operator> <name><name pos:line="486" pos:column="26">keyProvider</name><op:operator pos:line="486" pos:column="37">.</op:operator><name pos:line="486" pos:column="38">Key</name></name></expr>;</expr_stmt>
            }</block></then>
            <else pos:line="488" pos:column="13">else
            <block pos:line="489" pos:column="13">{
                <expr_stmt><expr><name pos:line="490" pos:column="17">result</name> <op:operator pos:line="490" pos:column="24">=</op:operator> <call><name><name pos:line="490" pos:column="26">obj</name><op:operator pos:line="490" pos:column="29">.</op:operator><name pos:line="490" pos:column="30">GetType</name></name><argument_list pos:line="490" pos:column="37">()</argument_list></call><op:operator pos:line="490" pos:column="39">.</op:operator><name pos:line="490" pos:column="40">FullName</name></expr>;</expr_stmt>
            }</block></else></if>

            <return pos:line="493" pos:column="13">return <expr><call><name><name pos:line="493" pos:column="20">result</name>
                <op:operator pos:line="494" pos:column="17">.</op:operator><name pos:line="494" pos:column="18">Replace</name></name><argument_list pos:line="494" pos:column="25">(<argument><expr><lit:literal type="char" pos:line="494" pos:column="26">'.'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="494" pos:column="31">'_'</lit:literal></expr></argument>)</argument_list></call>
                <op:operator pos:line="495" pos:column="17">.</op:operator><call><name pos:line="495" pos:column="18">Replace</name><argument_list pos:line="495" pos:column="25">(<argument><expr><lit:literal type="char" pos:line="495" pos:column="26">' '</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="495" pos:column="31">'_'</lit:literal></expr></argument>)</argument_list></call>
                <op:operator pos:line="496" pos:column="17">.</op:operator><call><name pos:line="496" pos:column="18">ToLower</name><argument_list pos:line="496" pos:column="25">()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="499" pos:column="9">private</specifier> <name pos:line="499" pos:column="17">IDataStore</name></type> <name pos:line="499" pos:column="28">GetTabStore</name><parameter_list pos:line="499" pos:column="39">(<param><decl><type><name pos:line="499" pos:column="40">string</name></type> <name pos:line="499" pos:column="47">tabName</name></decl></param>)</parameter_list>
        <block pos:line="500" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="501" pos:column="13">var</name></type> <name pos:line="501" pos:column="17">requestStore</name> <init pos:line="501" pos:column="30">= <expr><name><name pos:line="501" pos:column="32">Configuration</name><op:operator pos:line="501" pos:column="45">.</op:operator><name pos:line="501" pos:column="46">FrameworkProvider</name><op:operator pos:line="501" pos:column="63">.</op:operator><name pos:line="501" pos:column="64">HttpRequestStore</name></name></expr></init></decl>;</decl_stmt>

            <if pos:line="503" pos:column="13">if <condition pos:line="503" pos:column="16">(<expr><op:operator pos:line="503" pos:column="17">!</op:operator><call><name><name pos:line="503" pos:column="18">requestStore</name><op:operator pos:line="503" pos:column="30">.</op:operator><name pos:line="503" pos:column="31">Contains</name></name><argument_list pos:line="503" pos:column="39">(<argument><expr><name><name pos:line="503" pos:column="40">Constants</name><op:operator pos:line="503" pos:column="49">.</op:operator><name pos:line="503" pos:column="50">TabStorageKey</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="503" pos:column="65">
            <block pos:line="504" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="505" pos:column="17">requestStore</name><op:operator pos:line="505" pos:column="29">.</op:operator><name pos:line="505" pos:column="30">Set</name></name><argument_list pos:line="505" pos:column="33">(<argument><expr><name><name pos:line="505" pos:column="34">Constants</name><op:operator pos:line="505" pos:column="43">.</op:operator><name pos:line="505" pos:column="44">TabStorageKey</name></name></expr></argument>, <argument><expr><op:operator pos:line="505" pos:column="59">new</op:operator> <call><name><name pos:line="505" pos:column="63">Dictionary</name><argument_list pos:line="505" pos:column="73">&lt;<argument><name pos:line="505" pos:column="74">string</name></argument>, <argument><name pos:line="505" pos:column="82">IDataStore</name></argument>&gt;</argument_list></name><argument_list pos:line="505" pos:column="93">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="508" pos:column="13">var</name></type> <name pos:line="508" pos:column="17">tabStorage</name> <init pos:line="508" pos:column="28">= <expr><call><name><name pos:line="508" pos:column="30">requestStore</name><op:operator pos:line="508" pos:column="42">.</op:operator><name><name pos:line="508" pos:column="43">Get</name><argument_list pos:line="508" pos:column="46">&lt;<argument><name><name pos:line="508" pos:column="47">IDictionary</name><argument_list pos:line="508" pos:column="58">&lt;<argument><name pos:line="508" pos:column="59">string</name></argument>, <argument><name pos:line="508" pos:column="67">IDataStore</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name><argument_list pos:line="508" pos:column="79">(<argument><expr><name><name pos:line="508" pos:column="80">Constants</name><op:operator pos:line="508" pos:column="89">.</op:operator><name pos:line="508" pos:column="90">TabStorageKey</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if pos:line="510" pos:column="13">if <condition pos:line="510" pos:column="16">(<expr><op:operator pos:line="510" pos:column="17">!</op:operator><call><name><name pos:line="510" pos:column="18">tabStorage</name><op:operator pos:line="510" pos:column="28">.</op:operator><name pos:line="510" pos:column="29">ContainsKey</name></name><argument_list pos:line="510" pos:column="40">(<argument><expr><name pos:line="510" pos:column="41">tabName</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="510" pos:column="50">
            <block pos:line="511" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="512" pos:column="17">tabStorage</name><op:operator pos:line="512" pos:column="27">.</op:operator><name pos:line="512" pos:column="28">Add</name></name><argument_list pos:line="512" pos:column="31">(<argument><expr><name pos:line="512" pos:column="32">tabName</name></expr></argument>, <argument><expr><op:operator pos:line="512" pos:column="41">new</op:operator> <call><name pos:line="512" pos:column="45">DictionaryDataStoreAdapter</name><argument_list pos:line="512" pos:column="71">(<argument><expr><op:operator pos:line="512" pos:column="72">new</op:operator> <call><name><name pos:line="512" pos:column="76">Dictionary</name><argument_list pos:line="512" pos:column="86">&lt;<argument><name pos:line="512" pos:column="87">string</name></argument>, <argument><name pos:line="512" pos:column="95">object</name></argument>&gt;</argument_list></name><argument_list pos:line="512" pos:column="102">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <return pos:line="515" pos:column="13">return <expr><name><name pos:line="515" pos:column="20">tabStorage</name><index pos:line="515" pos:column="30">[<expr><name pos:line="515" pos:column="31">tabName</name></expr>]</index></name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="518" pos:column="9">private</specifier> <name pos:line="518" pos:column="17">void</name></type> <name pos:line="518" pos:column="22">ExecuteTabs</name><parameter_list pos:line="518" pos:column="33">(<param><decl><type><name pos:line="518" pos:column="34">RuntimeEvent</name></type> <name pos:line="518" pos:column="47">runtimeEvent</name></decl></param>)</parameter_list>
        <block pos:line="519" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="520" pos:column="13">var</name></type> <name pos:line="520" pos:column="17">runtimeContext</name> <init pos:line="520" pos:column="32">= <expr><name><name pos:line="520" pos:column="34">Configuration</name><op:operator pos:line="520" pos:column="47">.</op:operator><name pos:line="520" pos:column="48">FrameworkProvider</name><op:operator pos:line="520" pos:column="65">.</op:operator><name pos:line="520" pos:column="66">RuntimeContext</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="521" pos:column="13">var</name></type> <name pos:line="521" pos:column="17">frameworkProviderRuntimeContextType</name> <init pos:line="521" pos:column="53">= <expr><call><name><name pos:line="521" pos:column="55">runtimeContext</name><op:operator pos:line="521" pos:column="69">.</op:operator><name pos:line="521" pos:column="70">GetType</name></name><argument_list pos:line="521" pos:column="77">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="522" pos:column="13">var</name></type> <name pos:line="522" pos:column="17">messageBroker</name> <init pos:line="522" pos:column="31">= <expr><name><name pos:line="522" pos:column="33">Configuration</name><op:operator pos:line="522" pos:column="46">.</op:operator><name pos:line="522" pos:column="47">MessageBroker</name></name></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="524" pos:column="13">// Only use tabs that either don't specify a specific context type, or have a context type that matches the current framework provider's.</comment>
            <decl_stmt><decl><type><name pos:line="525" pos:column="13">var</name></type> <name pos:line="525" pos:column="17">runtimeTabs</name> <init pos:line="525" pos:column="29">=
                <expr><call><name><name pos:line="526" pos:column="17">Configuration</name><op:operator pos:line="526" pos:column="30">.</op:operator><name pos:line="526" pos:column="31">Tabs</name><op:operator pos:line="526" pos:column="35">.</op:operator><name pos:line="526" pos:column="36">Where</name></name><argument_list pos:line="526" pos:column="41">(
                    <argument><expr><lambda><name pos:line="527" pos:column="21">tab</name> <op:operator pos:line="527" pos:column="25">=&gt;</op:operator>
                    <name><name pos:line="528" pos:column="21">tab</name><op:operator pos:line="528" pos:column="24">.</op:operator><name pos:line="528" pos:column="25">RequestContextType</name></name> <op:operator pos:line="528" pos:column="44">==</op:operator> <name pos:line="528" pos:column="47">null</name> <op:operator pos:line="528" pos:column="52">||</op:operator>
                    <call><name><name pos:line="529" pos:column="21">frameworkProviderRuntimeContextType</name><op:operator pos:line="529" pos:column="56">.</op:operator><name pos:line="529" pos:column="57">IsSubclassOf</name></name><argument_list pos:line="529" pos:column="69">(<argument><expr><name><name pos:line="529" pos:column="70">tab</name><op:operator pos:line="529" pos:column="73">.</op:operator><name pos:line="529" pos:column="74">RequestContextType</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="529" pos:column="94">||</op:operator>
                    <name><name pos:line="530" pos:column="21">tab</name><op:operator pos:line="530" pos:column="24">.</op:operator><name pos:line="530" pos:column="25">RequestContextType</name></name> <op:operator pos:line="530" pos:column="44">==</op:operator> <name pos:line="530" pos:column="47">frameworkProviderRuntimeContextType</name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="532" pos:column="13">var</name></type> <name pos:line="532" pos:column="17">supportedRuntimeTabs</name> <init pos:line="532" pos:column="38">= <expr><call><name><name pos:line="532" pos:column="40">runtimeTabs</name><op:operator pos:line="532" pos:column="51">.</op:operator><name pos:line="532" pos:column="52">Where</name></name><argument_list pos:line="532" pos:column="57">(<argument><expr><lambda><name pos:line="532" pos:column="58">p</name> <op:operator pos:line="532" pos:column="60">=&gt;</op:operator> <call><name><name pos:line="532" pos:column="63">p</name><op:operator pos:line="532" pos:column="64">.</op:operator><name pos:line="532" pos:column="65">ExecuteOn</name><op:operator pos:line="532" pos:column="74">.</op:operator><name pos:line="532" pos:column="75">HasFlag</name></name><argument_list pos:line="532" pos:column="82">(<argument><expr><name pos:line="532" pos:column="83">runtimeEvent</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="533" pos:column="13">var</name></type> <name pos:line="533" pos:column="17">tabResultsStore</name> <init pos:line="533" pos:column="33">= <expr><name pos:line="533" pos:column="35">TabResultsStore</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="534" pos:column="13">var</name></type> <name pos:line="534" pos:column="17">logger</name> <init pos:line="534" pos:column="24">= <expr><name><name pos:line="534" pos:column="26">Configuration</name><op:operator pos:line="534" pos:column="39">.</op:operator><name pos:line="534" pos:column="40">Logger</name></name></expr></init></decl>;</decl_stmt>

            <foreach pos:line="536" pos:column="13">foreach (<init><decl><type><name pos:line="536" pos:column="22">var</name></type> <name pos:line="536" pos:column="26">tab</name> <range pos:line="536" pos:column="30">in <expr><name pos:line="536" pos:column="33">supportedRuntimeTabs</name></expr></range></decl></init>)
            <block pos:line="537" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="538" pos:column="17">TabResult</name></type> <name pos:line="538" pos:column="27">result</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="539" pos:column="17">var</name></type> <name pos:line="539" pos:column="21">key</name> <init pos:line="539" pos:column="25">= <expr><call><name pos:line="539" pos:column="27">CreateKey</name><argument_list pos:line="539" pos:column="36">(<argument><expr><name pos:line="539" pos:column="37">tab</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <try pos:line="540" pos:column="17">try
                <block pos:line="541" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="542" pos:column="21">var</name></type> <name pos:line="542" pos:column="25">tabContext</name> <init pos:line="542" pos:column="36">= <expr><op:operator pos:line="542" pos:column="38">new</op:operator> <call><name pos:line="542" pos:column="42">TabContext</name><argument_list pos:line="542" pos:column="52">(<argument><expr><name pos:line="542" pos:column="53">runtimeContext</name></expr></argument>, <argument><expr><call><name pos:line="542" pos:column="69">GetTabStore</name><argument_list pos:line="542" pos:column="80">(<argument><expr><name pos:line="542" pos:column="81">key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="542" pos:column="87">logger</name></expr></argument>, <argument><expr><name pos:line="542" pos:column="95">messageBroker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="543" pos:column="21">var</name></type> <name pos:line="543" pos:column="25">tabData</name> <init pos:line="543" pos:column="33">= <expr><call><name><name pos:line="543" pos:column="35">tab</name><op:operator pos:line="543" pos:column="38">.</op:operator><name pos:line="543" pos:column="39">GetData</name></name><argument_list pos:line="543" pos:column="46">(<argument><expr><name pos:line="543" pos:column="47">tabContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt><decl><type><name pos:line="545" pos:column="21">var</name></type> <name pos:line="545" pos:column="25">tabSection</name> <init pos:line="545" pos:column="36">= <expr><name pos:line="545" pos:column="38">tabData</name> <op:operator pos:line="545" pos:column="46">as</op:operator> <name pos:line="545" pos:column="49">TabSection</name></expr></init></decl>;</decl_stmt>
                    <if pos:line="546" pos:column="21">if <condition pos:line="546" pos:column="24">(<expr><name pos:line="546" pos:column="25">tabSection</name> <op:operator pos:line="546" pos:column="36">!=</op:operator> <name pos:line="546" pos:column="39">null</name></expr>)</condition><then pos:line="546" pos:column="44">
                    <block pos:line="547" pos:column="21">{
                        <expr_stmt><expr><name pos:line="548" pos:column="25">tabData</name> <op:operator pos:line="548" pos:column="33">=</op:operator> <call><name><name pos:line="548" pos:column="35">tabSection</name><op:operator pos:line="548" pos:column="45">.</op:operator><name pos:line="548" pos:column="46">Build</name></name><argument_list pos:line="548" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>

                    <expr_stmt><expr><name pos:line="551" pos:column="21">result</name> <op:operator pos:line="551" pos:column="28">=</op:operator> <op:operator pos:line="551" pos:column="30">new</op:operator> <call><name pos:line="551" pos:column="34">TabResult</name><argument_list pos:line="551" pos:column="43">(<argument><expr><name><name pos:line="551" pos:column="44">tab</name><op:operator pos:line="551" pos:column="47">.</op:operator><name pos:line="551" pos:column="48">Name</name></name></expr></argument>, <argument><expr><name pos:line="551" pos:column="54">tabData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block>
                <catch pos:line="553" pos:column="17">catch <parameter_list pos:line="553" pos:column="23">(<param><decl><type><name pos:line="553" pos:column="24">Exception</name></type> <name pos:line="553" pos:column="34">exception</name></decl></param>)</parameter_list>
                <block pos:line="554" pos:column="17">{
                    <expr_stmt><expr><name pos:line="555" pos:column="21">result</name> <op:operator pos:line="555" pos:column="28">=</op:operator> <op:operator pos:line="555" pos:column="30">new</op:operator> <call><name pos:line="555" pos:column="34">TabResult</name><argument_list pos:line="555" pos:column="43">(<argument><expr><name><name pos:line="555" pos:column="44">tab</name><op:operator pos:line="555" pos:column="47">.</op:operator><name pos:line="555" pos:column="48">Name</name></name></expr></argument>, <argument><expr><call><name><name pos:line="555" pos:column="54">exception</name><op:operator pos:line="555" pos:column="63">.</op:operator><name pos:line="555" pos:column="64">ToString</name></name><argument_list pos:line="555" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="556" pos:column="21">logger</name><op:operator pos:line="556" pos:column="27">.</op:operator><name pos:line="556" pos:column="28">Error</name></name><argument_list pos:line="556" pos:column="33">(<argument><expr><name><name pos:line="556" pos:column="34">Resources</name><op:operator pos:line="556" pos:column="43">.</op:operator><name pos:line="556" pos:column="44">ExecuteTabError</name></name></expr></argument>, <argument><expr><name pos:line="556" pos:column="61">exception</name></expr></argument>, <argument><expr><name pos:line="556" pos:column="72">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>

                <if pos:line="559" pos:column="17">if <condition pos:line="559" pos:column="20">(<expr><call><name><name pos:line="559" pos:column="21">tabResultsStore</name><op:operator pos:line="559" pos:column="36">.</op:operator><name pos:line="559" pos:column="37">ContainsKey</name></name><argument_list pos:line="559" pos:column="48">(<argument><expr><name pos:line="559" pos:column="49">key</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="559" pos:column="54">
                <block pos:line="560" pos:column="17">{
                    <expr_stmt><expr><name><name pos:line="561" pos:column="21">tabResultsStore</name><index pos:line="561" pos:column="36">[<expr><name pos:line="561" pos:column="37">key</name></expr>]</index></name> <op:operator pos:line="561" pos:column="42">=</op:operator> <name pos:line="561" pos:column="44">result</name></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="563" pos:column="17">else
                <block pos:line="564" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="565" pos:column="21">tabResultsStore</name><op:operator pos:line="565" pos:column="36">.</op:operator><name pos:line="565" pos:column="37">Add</name></name><argument_list pos:line="565" pos:column="40">(<argument><expr><name pos:line="565" pos:column="41">key</name></expr></argument>, <argument><expr><name pos:line="565" pos:column="46">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></foreach>
        }</block></function>

        <function><type><specifier pos:line="570" pos:column="9">private</specifier> <name pos:line="570" pos:column="17">void</name></type> <name pos:line="570" pos:column="22">ExecuteDisplays</name><parameter_list pos:line="570" pos:column="37">()</parameter_list>
        <block pos:line="571" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="572" pos:column="13">var</name></type> <name pos:line="572" pos:column="17">runtimeContext</name> <init pos:line="572" pos:column="32">= <expr><name><name pos:line="572" pos:column="34">Configuration</name><op:operator pos:line="572" pos:column="47">.</op:operator><name pos:line="572" pos:column="48">FrameworkProvider</name><op:operator pos:line="572" pos:column="65">.</op:operator><name pos:line="572" pos:column="66">RuntimeContext</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="573" pos:column="13">var</name></type> <name pos:line="573" pos:column="17">messageBroker</name> <init pos:line="573" pos:column="31">= <expr><name><name pos:line="573" pos:column="33">Configuration</name><op:operator pos:line="573" pos:column="46">.</op:operator><name pos:line="573" pos:column="47">MessageBroker</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="575" pos:column="13">var</name></type> <name pos:line="575" pos:column="17">displayResultsStore</name> <init pos:line="575" pos:column="37">= <expr><name pos:line="575" pos:column="39">DisplayResultsStore</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="576" pos:column="13">var</name></type> <name pos:line="576" pos:column="17">logger</name> <init pos:line="576" pos:column="24">= <expr><name><name pos:line="576" pos:column="26">Configuration</name><op:operator pos:line="576" pos:column="39">.</op:operator><name pos:line="576" pos:column="40">Logger</name></name></expr></init></decl>;</decl_stmt>

            <foreach pos:line="578" pos:column="13">foreach (<init><decl><type><name pos:line="578" pos:column="22">var</name></type> <name pos:line="578" pos:column="26">display</name> <range pos:line="578" pos:column="34">in <expr><name><name pos:line="578" pos:column="37">Configuration</name><op:operator pos:line="578" pos:column="50">.</op:operator><name pos:line="578" pos:column="51">Displays</name></name></expr></range></decl></init>)
            <block pos:line="579" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="580" pos:column="17">TabResult</name></type> <name pos:line="580" pos:column="27">result</name></decl>;</decl_stmt> <comment type="line" pos:line="580" pos:column="35">// TODO: Rename now that it is no longer *just* tab results</comment>
                <decl_stmt><decl><type><name pos:line="581" pos:column="17">var</name></type> <name pos:line="581" pos:column="21">key</name> <init pos:line="581" pos:column="25">= <expr><call><name pos:line="581" pos:column="27">CreateKey</name><argument_list pos:line="581" pos:column="36">(<argument><expr><name pos:line="581" pos:column="37">display</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <try pos:line="582" pos:column="17">try
                <block pos:line="583" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="584" pos:column="21">var</name></type> <name pos:line="584" pos:column="25">displayContext</name> <init pos:line="584" pos:column="40">= <expr><op:operator pos:line="584" pos:column="42">new</op:operator> <call><name pos:line="584" pos:column="46">TabContext</name><argument_list pos:line="584" pos:column="56">(<argument><expr><name pos:line="584" pos:column="57">runtimeContext</name></expr></argument>, <argument><expr><call><name pos:line="584" pos:column="73">GetTabStore</name><argument_list pos:line="584" pos:column="84">(<argument><expr><name pos:line="584" pos:column="85">key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="584" pos:column="91">logger</name></expr></argument>, <argument><expr><name pos:line="584" pos:column="99">messageBroker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="584" pos:column="115">// TODO: Do we need a DisplayContext?</comment>
                    <decl_stmt><decl><type><name pos:line="585" pos:column="21">var</name></type> <name pos:line="585" pos:column="25">displayData</name> <init pos:line="585" pos:column="37">= <expr><call><name><name pos:line="585" pos:column="39">display</name><op:operator pos:line="585" pos:column="46">.</op:operator><name pos:line="585" pos:column="47">GetData</name></name><argument_list pos:line="585" pos:column="54">(<argument><expr><name pos:line="585" pos:column="55">displayContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><name pos:line="587" pos:column="21">result</name> <op:operator pos:line="587" pos:column="28">=</op:operator> <op:operator pos:line="587" pos:column="30">new</op:operator> <call><name pos:line="587" pos:column="34">TabResult</name><argument_list pos:line="587" pos:column="43">(<argument><expr><name><name pos:line="587" pos:column="44">display</name><op:operator pos:line="587" pos:column="51">.</op:operator><name pos:line="587" pos:column="52">Name</name></name></expr></argument>, <argument><expr><name pos:line="587" pos:column="58">displayData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block>
                <catch pos:line="589" pos:column="17">catch <parameter_list pos:line="589" pos:column="23">(<param><decl><type><name pos:line="589" pos:column="24">Exception</name></type> <name pos:line="589" pos:column="34">exception</name></decl></param>)</parameter_list>
                <block pos:line="590" pos:column="17">{
                    <expr_stmt><expr><name pos:line="591" pos:column="21">result</name> <op:operator pos:line="591" pos:column="28">=</op:operator> <op:operator pos:line="591" pos:column="30">new</op:operator> <call><name pos:line="591" pos:column="34">TabResult</name><argument_list pos:line="591" pos:column="43">(<argument><expr><name><name pos:line="591" pos:column="44">display</name><op:operator pos:line="591" pos:column="51">.</op:operator><name pos:line="591" pos:column="52">Name</name></name></expr></argument>, <argument><expr><call><name><name pos:line="591" pos:column="58">exception</name><op:operator pos:line="591" pos:column="67">.</op:operator><name pos:line="591" pos:column="68">ToString</name></name><argument_list pos:line="591" pos:column="76">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="592" pos:column="21">logger</name><op:operator pos:line="592" pos:column="27">.</op:operator><name pos:line="592" pos:column="28">Error</name></name><argument_list pos:line="592" pos:column="33">(<argument><expr><name><name pos:line="592" pos:column="34">Resources</name><op:operator pos:line="592" pos:column="43">.</op:operator><name pos:line="592" pos:column="44">ExecuteTabError</name></name></expr></argument>, <argument><expr><name pos:line="592" pos:column="61">exception</name></expr></argument>, <argument><expr><name pos:line="592" pos:column="72">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>

                <if pos:line="595" pos:column="17">if <condition pos:line="595" pos:column="20">(<expr><call><name><name pos:line="595" pos:column="21">displayResultsStore</name><op:operator pos:line="595" pos:column="40">.</op:operator><name pos:line="595" pos:column="41">ContainsKey</name></name><argument_list pos:line="595" pos:column="52">(<argument><expr><name pos:line="595" pos:column="53">key</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="595" pos:column="58">
                <block pos:line="596" pos:column="17">{
                    <expr_stmt><expr><name><name pos:line="597" pos:column="21">displayResultsStore</name><index pos:line="597" pos:column="40">[<expr><name pos:line="597" pos:column="41">key</name></expr>]</index></name> <op:operator pos:line="597" pos:column="46">=</op:operator> <name pos:line="597" pos:column="48">result</name></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="599" pos:column="17">else
                <block pos:line="600" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="601" pos:column="21">displayResultsStore</name><op:operator pos:line="601" pos:column="40">.</op:operator><name pos:line="601" pos:column="41">Add</name></name><argument_list pos:line="601" pos:column="44">(<argument><expr><name pos:line="601" pos:column="45">key</name></expr></argument>, <argument><expr><name pos:line="601" pos:column="50">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></foreach>
        }</block></function>

        <function><type><specifier pos:line="606" pos:column="9">private</specifier> <name pos:line="606" pos:column="17">void</name></type> <name pos:line="606" pos:column="22">PersistMetadata</name><parameter_list pos:line="606" pos:column="37">()</parameter_list>
        <block pos:line="607" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="608" pos:column="13">var</name></type> <name pos:line="608" pos:column="17">metadata</name> <init pos:line="608" pos:column="26">= <expr><op:operator pos:line="608" pos:column="28">new</op:operator> <name pos:line="608" pos:column="32">GlimpseMetadata</name> <block pos:line="608" pos:column="48">{ <expr><name pos:line="608" pos:column="50">Version</name> <op:operator pos:line="608" pos:column="58">=</op:operator> <name pos:line="608" pos:column="60">Version</name></expr>, <expr><name pos:line="608" pos:column="69">Hash</name> <op:operator pos:line="608" pos:column="74">=</op:operator> <name><name pos:line="608" pos:column="76">Configuration</name><op:operator pos:line="608" pos:column="89">.</op:operator><name pos:line="608" pos:column="90">Hash</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="609" pos:column="13">var</name></type> <name pos:line="609" pos:column="17">tabMetadata</name> <init pos:line="609" pos:column="29">= <expr><name><name pos:line="609" pos:column="31">metadata</name><op:operator pos:line="609" pos:column="39">.</op:operator><name pos:line="609" pos:column="40">Tabs</name></name></expr></init></decl>;</decl_stmt>

            <foreach pos:line="611" pos:column="13">foreach (<init><decl><type><name pos:line="611" pos:column="22">var</name></type> <name pos:line="611" pos:column="26">tab</name> <range pos:line="611" pos:column="30">in <expr><name><name pos:line="611" pos:column="33">Configuration</name><op:operator pos:line="611" pos:column="46">.</op:operator><name pos:line="611" pos:column="47">Tabs</name></name></expr></range></decl></init>)
            <block pos:line="612" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="613" pos:column="17">var</name></type> <name pos:line="613" pos:column="21">metadataInstance</name> <init pos:line="613" pos:column="38">= <expr><op:operator pos:line="613" pos:column="40">new</op:operator> <call><name pos:line="613" pos:column="44">TabMetadata</name><argument_list pos:line="613" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name pos:line="615" pos:column="17">var</name></type> <name pos:line="615" pos:column="21">documentationTab</name> <init pos:line="615" pos:column="38">= <expr><name pos:line="615" pos:column="40">tab</name> <op:operator pos:line="615" pos:column="44">as</op:operator> <name pos:line="615" pos:column="47">IDocumentation</name></expr></init></decl>;</decl_stmt>
                <if pos:line="616" pos:column="17">if <condition pos:line="616" pos:column="20">(<expr><name pos:line="616" pos:column="21">documentationTab</name> <op:operator pos:line="616" pos:column="38">!=</op:operator> <name pos:line="616" pos:column="41">null</name></expr>)</condition><then pos:line="616" pos:column="46">
                <block pos:line="617" pos:column="17">{
                    <expr_stmt><expr><name><name pos:line="618" pos:column="21">metadataInstance</name><op:operator pos:line="618" pos:column="37">.</op:operator><name pos:line="618" pos:column="38">DocumentationUri</name></name> <op:operator pos:line="618" pos:column="55">=</op:operator> <name><name pos:line="618" pos:column="57">documentationTab</name><op:operator pos:line="618" pos:column="73">.</op:operator><name pos:line="618" pos:column="74">DocumentationUri</name></name></expr>;</expr_stmt>
                }</block></then></if>

                <decl_stmt><decl><type><name pos:line="621" pos:column="17">var</name></type> <name pos:line="621" pos:column="21">layoutControlTab</name> <init pos:line="621" pos:column="38">= <expr><name pos:line="621" pos:column="40">tab</name> <op:operator pos:line="621" pos:column="44">as</op:operator> <name pos:line="621" pos:column="47">ILayoutControl</name></expr></init></decl>;</decl_stmt>
                <if pos:line="622" pos:column="17">if <condition pos:line="622" pos:column="20">(<expr><name pos:line="622" pos:column="21">layoutControlTab</name> <op:operator pos:line="622" pos:column="38">!=</op:operator> <name pos:line="622" pos:column="41">null</name></expr>)</condition><then pos:line="622" pos:column="46">
                <block pos:line="623" pos:column="17">{
                    <expr_stmt><expr><name><name pos:line="624" pos:column="21">metadataInstance</name><op:operator pos:line="624" pos:column="37">.</op:operator><name pos:line="624" pos:column="38">KeysHeadings</name></name> <op:operator pos:line="624" pos:column="51">=</op:operator> <name><name pos:line="624" pos:column="53">layoutControlTab</name><op:operator pos:line="624" pos:column="69">.</op:operator><name pos:line="624" pos:column="70">KeysHeadings</name></name></expr>;</expr_stmt>
                }</block></then></if>

                <decl_stmt><decl><type><name pos:line="627" pos:column="17">var</name></type> <name pos:line="627" pos:column="21">layoutTab</name> <init pos:line="627" pos:column="31">= <expr><name pos:line="627" pos:column="33">tab</name> <op:operator pos:line="627" pos:column="37">as</op:operator> <name pos:line="627" pos:column="40">ITabLayout</name></expr></init></decl>;</decl_stmt>
                <if pos:line="628" pos:column="17">if <condition pos:line="628" pos:column="20">(<expr><name pos:line="628" pos:column="21">layoutTab</name> <op:operator pos:line="628" pos:column="31">!=</op:operator> <name pos:line="628" pos:column="34">null</name></expr>)</condition><then pos:line="628" pos:column="39">
                <block pos:line="629" pos:column="17">{
                    <expr_stmt><expr><name><name pos:line="630" pos:column="21">metadataInstance</name><op:operator pos:line="630" pos:column="37">.</op:operator><name pos:line="630" pos:column="38">Layout</name></name> <op:operator pos:line="630" pos:column="45">=</op:operator> <call><name><name pos:line="630" pos:column="47">layoutTab</name><op:operator pos:line="630" pos:column="56">.</op:operator><name pos:line="630" pos:column="57">GetLayout</name></name><argument_list pos:line="630" pos:column="66">()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <if pos:line="633" pos:column="17">if <condition pos:line="633" pos:column="20">(<expr><name><name pos:line="633" pos:column="21">metadataInstance</name><op:operator pos:line="633" pos:column="37">.</op:operator><name pos:line="633" pos:column="38">HasMetadata</name></name></expr>)</condition><then pos:line="633" pos:column="50">
                <block pos:line="634" pos:column="17">{
                    <expr_stmt><expr><name><name pos:line="635" pos:column="21">tabMetadata</name><index pos:line="635" pos:column="32">[<expr><call><name pos:line="635" pos:column="33">CreateKey</name><argument_list pos:line="635" pos:column="42">(<argument><expr><name pos:line="635" pos:column="43">tab</name></expr></argument>)</argument_list></call></expr>]</index></name> <op:operator pos:line="635" pos:column="49">=</op:operator> <name pos:line="635" pos:column="51">metadataInstance</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></foreach>

            <decl_stmt><decl><type><name pos:line="639" pos:column="13">var</name></type> <name pos:line="639" pos:column="17">resources</name> <init pos:line="639" pos:column="27">= <expr><name><name pos:line="639" pos:column="29">metadata</name><op:operator pos:line="639" pos:column="37">.</op:operator><name pos:line="639" pos:column="38">Resources</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="640" pos:column="13">var</name></type> <name pos:line="640" pos:column="17">endpoint</name> <init pos:line="640" pos:column="26">= <expr><name><name pos:line="640" pos:column="28">Configuration</name><op:operator pos:line="640" pos:column="41">.</op:operator><name pos:line="640" pos:column="42">ResourceEndpoint</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="641" pos:column="13">var</name></type> <name pos:line="641" pos:column="17">logger</name> <init pos:line="641" pos:column="24">= <expr><name><name pos:line="641" pos:column="26">Configuration</name><op:operator pos:line="641" pos:column="39">.</op:operator><name pos:line="641" pos:column="40">Logger</name></name></expr></init></decl>;</decl_stmt>

            <foreach pos:line="643" pos:column="13">foreach (<init><decl><type><name pos:line="643" pos:column="22">var</name></type> <name pos:line="643" pos:column="26">resource</name> <range pos:line="643" pos:column="35">in <expr><name><name pos:line="643" pos:column="38">Configuration</name><op:operator pos:line="643" pos:column="51">.</op:operator><name pos:line="643" pos:column="52">Resources</name></name></expr></range></decl></init>)
            <block pos:line="644" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="645" pos:column="17">var</name></type> <name pos:line="645" pos:column="21">resourceKey</name> <init pos:line="645" pos:column="33">= <expr><call><name pos:line="645" pos:column="35">CreateKey</name><argument_list pos:line="645" pos:column="44">(<argument><expr><name pos:line="645" pos:column="45">resource</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="646" pos:column="17">if <condition pos:line="646" pos:column="20">(<expr><call><name><name pos:line="646" pos:column="21">resources</name><op:operator pos:line="646" pos:column="30">.</op:operator><name pos:line="646" pos:column="31">ContainsKey</name></name><argument_list pos:line="646" pos:column="42">(<argument><expr><name pos:line="646" pos:column="43">resourceKey</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="646" pos:column="56">
                <block pos:line="647" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="648" pos:column="21">logger</name><op:operator pos:line="648" pos:column="27">.</op:operator><name pos:line="648" pos:column="28">Warn</name></name><argument_list pos:line="648" pos:column="32">(<argument><expr><name><name pos:line="648" pos:column="33">Resources</name><op:operator pos:line="648" pos:column="42">.</op:operator><name pos:line="648" pos:column="43">GlimpseRuntimePersistMetadataMultipleResourceWarning</name></name></expr></argument>, <argument><expr><name><name pos:line="648" pos:column="97">resource</name><op:operator pos:line="648" pos:column="105">.</op:operator><name pos:line="648" pos:column="106">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <expr_stmt><expr><name><name pos:line="651" pos:column="17">resources</name><index pos:line="651" pos:column="26">[<expr><name pos:line="651" pos:column="27">resourceKey</name></expr>]</index></name> <op:operator pos:line="651" pos:column="40">=</op:operator> <call><name><name pos:line="651" pos:column="42">endpoint</name><op:operator pos:line="651" pos:column="50">.</op:operator><name pos:line="651" pos:column="51">GenerateUriTemplate</name></name><argument_list pos:line="651" pos:column="70">(<argument><expr><name pos:line="651" pos:column="71">resource</name></expr></argument>, <argument><expr><name><name pos:line="651" pos:column="81">Configuration</name><op:operator pos:line="651" pos:column="94">.</op:operator><name pos:line="651" pos:column="95">EndpointBaseUri</name></name></expr></argument>, <argument><expr><name pos:line="651" pos:column="112">logger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>

            <expr_stmt><expr><call><name><name pos:line="654" pos:column="13">Configuration</name><op:operator pos:line="654" pos:column="26">.</op:operator><name pos:line="654" pos:column="27">PersistenceStore</name><op:operator pos:line="654" pos:column="43">.</op:operator><name pos:line="654" pos:column="44">Save</name></name><argument_list pos:line="654" pos:column="48">(<argument><expr><name pos:line="654" pos:column="49">metadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="657" pos:column="9">private</specifier> <name pos:line="657" pos:column="17">RuntimePolicy</name></type> <name pos:line="657" pos:column="31">DetermineRuntimePolicy</name><parameter_list pos:line="657" pos:column="53">(<param><decl><type><name pos:line="657" pos:column="54">RuntimeEvent</name></type> <name pos:line="657" pos:column="67">runtimeEvent</name></decl></param>, <param><decl><type><name pos:line="657" pos:column="81">RuntimePolicy</name></type> <name pos:line="657" pos:column="95">maximumAllowedPolicy</name></decl></param>)</parameter_list>
        <block pos:line="658" pos:column="9">{
            <if pos:line="659" pos:column="13">if <condition pos:line="659" pos:column="16">(<expr><name pos:line="659" pos:column="17">maximumAllowedPolicy</name> <op:operator pos:line="659" pos:column="38">==</op:operator> <name><name pos:line="659" pos:column="41">RuntimePolicy</name><op:operator pos:line="659" pos:column="54">.</op:operator><name pos:line="659" pos:column="55">Off</name></name></expr>)</condition><then pos:line="659" pos:column="59">
            <block pos:line="660" pos:column="13">{
                <return pos:line="661" pos:column="17">return <expr><name pos:line="661" pos:column="24">maximumAllowedPolicy</name></expr>;</return>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="664" pos:column="13">var</name></type> <name pos:line="664" pos:column="17">frameworkProvider</name> <init pos:line="664" pos:column="35">= <expr><name><name pos:line="664" pos:column="37">Configuration</name><op:operator pos:line="664" pos:column="50">.</op:operator><name pos:line="664" pos:column="51">FrameworkProvider</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="665" pos:column="13">var</name></type> <name pos:line="665" pos:column="17">logger</name> <init pos:line="665" pos:column="24">= <expr><name><name pos:line="665" pos:column="26">Configuration</name><op:operator pos:line="665" pos:column="39">.</op:operator><name pos:line="665" pos:column="40">Logger</name></name></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="667" pos:column="13">// only run policies for this runtimeEvent</comment>
            <decl_stmt><decl><type><name pos:line="668" pos:column="13">var</name></type> <name pos:line="668" pos:column="17">policies</name> <init pos:line="668" pos:column="26">= 
                <expr><call><name><name pos:line="669" pos:column="17">Configuration</name><op:operator pos:line="669" pos:column="30">.</op:operator><name pos:line="669" pos:column="31">RuntimePolicies</name><op:operator pos:line="669" pos:column="46">.</op:operator><name pos:line="669" pos:column="47">Where</name></name><argument_list pos:line="669" pos:column="52">(
                    <argument><expr><lambda><name pos:line="670" pos:column="21">policy</name> <op:operator pos:line="670" pos:column="28">=&gt;</op:operator> <call><name><name pos:line="670" pos:column="31">policy</name><op:operator pos:line="670" pos:column="37">.</op:operator><name pos:line="670" pos:column="38">ExecuteOn</name><op:operator pos:line="670" pos:column="47">.</op:operator><name pos:line="670" pos:column="48">HasFlag</name></name><argument_list pos:line="670" pos:column="55">(<argument><expr><name pos:line="670" pos:column="56">runtimeEvent</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="672" pos:column="13">var</name></type> <name pos:line="672" pos:column="17">policyContext</name> <init pos:line="672" pos:column="31">= <expr><op:operator pos:line="672" pos:column="33">new</op:operator> <call><name pos:line="672" pos:column="37">RuntimePolicyContext</name><argument_list pos:line="672" pos:column="57">(<argument><expr><name><name pos:line="672" pos:column="58">frameworkProvider</name><op:operator pos:line="672" pos:column="75">.</op:operator><name pos:line="672" pos:column="76">RequestMetadata</name></name></expr></argument>, <argument><expr><name><name pos:line="672" pos:column="93">Configuration</name><op:operator pos:line="672" pos:column="106">.</op:operator><name pos:line="672" pos:column="107">Logger</name></name></expr></argument>, <argument><expr><name><name pos:line="672" pos:column="115">frameworkProvider</name><op:operator pos:line="672" pos:column="132">.</op:operator><name pos:line="672" pos:column="133">RuntimeContext</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="673" pos:column="13">foreach (<init><decl><type><name pos:line="673" pos:column="22">var</name></type> <name pos:line="673" pos:column="26">policy</name> <range pos:line="673" pos:column="33">in <expr><name pos:line="673" pos:column="36">policies</name></expr></range></decl></init>)
            <block pos:line="674" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="675" pos:column="17">var</name></type> <name pos:line="675" pos:column="21">policyResult</name> <init pos:line="675" pos:column="34">= <expr><name><name pos:line="675" pos:column="36">RuntimePolicy</name><op:operator pos:line="675" pos:column="49">.</op:operator><name pos:line="675" pos:column="50">Off</name></name></expr></init></decl>;</decl_stmt>
                <try pos:line="676" pos:column="17">try
                <block pos:line="677" pos:column="17">{
                    <expr_stmt><expr><name pos:line="678" pos:column="21">policyResult</name> <op:operator pos:line="678" pos:column="34">=</op:operator> <call><name><name pos:line="678" pos:column="36">policy</name><op:operator pos:line="678" pos:column="42">.</op:operator><name pos:line="678" pos:column="43">Execute</name></name><argument_list pos:line="678" pos:column="50">(<argument><expr><name pos:line="678" pos:column="51">policyContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if pos:line="680" pos:column="21">if <condition pos:line="680" pos:column="24">(<expr><name pos:line="680" pos:column="25">policyResult</name> <op:operator pos:line="680" pos:column="38">!=</op:operator> <name><name pos:line="680" pos:column="41">RuntimePolicy</name><op:operator pos:line="680" pos:column="54">.</op:operator><name pos:line="680" pos:column="55">On</name></name></expr>)</condition><then pos:line="680" pos:column="58">
                    <block pos:line="681" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="682" pos:column="25">logger</name><op:operator pos:line="682" pos:column="31">.</op:operator><name pos:line="682" pos:column="32">Debug</name></name><argument_list pos:line="682" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="682" pos:column="38">"RuntimePolicy set to '{0}' by IRuntimePolicy of type '{1}' during RuntimeEvent '{2}'."</lit:literal></expr></argument>, <argument><expr><name pos:line="682" pos:column="127">policyResult</name></expr></argument>, <argument><expr><call><name><name pos:line="682" pos:column="141">policy</name><op:operator pos:line="682" pos:column="147">.</op:operator><name pos:line="682" pos:column="148">GetType</name></name><argument_list pos:line="682" pos:column="155">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="682" pos:column="159">runtimeEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block>
                <catch pos:line="685" pos:column="17">catch <parameter_list pos:line="685" pos:column="23">(<param><decl><type><name pos:line="685" pos:column="24">Exception</name></type> <name pos:line="685" pos:column="34">exception</name></decl></param>)</parameter_list>
                <block pos:line="686" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="687" pos:column="21">logger</name><op:operator pos:line="687" pos:column="27">.</op:operator><name pos:line="687" pos:column="28">Warn</name></name><argument_list pos:line="687" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="687" pos:column="33">"Exception when executing IRuntimePolicy of type '{0}'. RuntimePolicy is now set to 'Off'."</lit:literal></expr></argument>, <argument><expr><name pos:line="687" pos:column="126">exception</name></expr></argument>, <argument><expr><call><name><name pos:line="687" pos:column="137">policy</name><op:operator pos:line="687" pos:column="143">.</op:operator><name pos:line="687" pos:column="144">GetType</name></name><argument_list pos:line="687" pos:column="151">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>

                <comment type="line" pos:line="690" pos:column="17">// Only use the lowest policy allowed for the request</comment>
                <if pos:line="691" pos:column="17">if <condition pos:line="691" pos:column="20">(<expr><name pos:line="691" pos:column="21">policyResult</name> <op:operator pos:line="691" pos:column="34">&lt;</op:operator> <name pos:line="691" pos:column="36">maximumAllowedPolicy</name></expr>)</condition><then pos:line="691" pos:column="57">
                <block pos:line="692" pos:column="17">{
                    <expr_stmt><expr><name pos:line="693" pos:column="21">maximumAllowedPolicy</name> <op:operator pos:line="693" pos:column="42">=</op:operator> <name pos:line="693" pos:column="44">policyResult</name></expr>;</expr_stmt>
                }</block></then></if>

                <comment type="line" pos:line="696" pos:column="17">// If the policy indicates Glimpse is Off, then we stop processing any other runtime policy</comment>
                <if pos:line="697" pos:column="17">if <condition pos:line="697" pos:column="20">(<expr><name pos:line="697" pos:column="21">maximumAllowedPolicy</name> <op:operator pos:line="697" pos:column="42">==</op:operator> <name><name pos:line="697" pos:column="45">RuntimePolicy</name><op:operator pos:line="697" pos:column="58">.</op:operator><name pos:line="697" pos:column="59">Off</name></name></expr>)</condition><then pos:line="697" pos:column="63">
                <block pos:line="698" pos:column="17">{
                    <break pos:line="699" pos:column="21">break;</break>
                }</block></then></if>
            }</block></foreach>

            <return pos:line="703" pos:column="13">return <expr><name pos:line="703" pos:column="20">maximumAllowedPolicy</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="706" pos:column="9">private</specifier> <name pos:line="706" pos:column="17">RuntimePolicy</name></type> <name pos:line="706" pos:column="31">DetermineAndStoreAccumulatedRuntimePolicy</name><parameter_list pos:line="706" pos:column="72">(<param><decl><type><name pos:line="706" pos:column="73">RuntimeEvent</name></type> <name pos:line="706" pos:column="86">runtimeEvent</name></decl></param>)</parameter_list>
        <block pos:line="707" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="708" pos:column="13">var</name></type> <name pos:line="708" pos:column="17">frameworkProvider</name> <init pos:line="708" pos:column="35">= <expr><name><name pos:line="708" pos:column="37">Configuration</name><op:operator pos:line="708" pos:column="50">.</op:operator><name pos:line="708" pos:column="51">FrameworkProvider</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="709" pos:column="13">var</name></type> <name pos:line="709" pos:column="17">requestStore</name> <init pos:line="709" pos:column="30">= <expr><name><name pos:line="709" pos:column="32">frameworkProvider</name><op:operator pos:line="709" pos:column="49">.</op:operator><name pos:line="709" pos:column="50">HttpRequestStore</name></name></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="711" pos:column="13">// First determine the maximum allowed policy to start from. This is or the current stored runtime policy for this</comment>
            <comment type="line" pos:line="712" pos:column="13">// request, or if none can be found, the default runtime policy set in the configuration</comment>
            <decl_stmt><decl><type><name pos:line="713" pos:column="13">var</name></type> <name pos:line="713" pos:column="17">maximumAllowedPolicy</name> <init pos:line="713" pos:column="38">= <expr><call><name><name pos:line="713" pos:column="40">requestStore</name><op:operator pos:line="713" pos:column="52">.</op:operator><name pos:line="713" pos:column="53">Contains</name></name><argument_list pos:line="713" pos:column="61">(<argument><expr><name><name pos:line="713" pos:column="62">Constants</name><op:operator pos:line="713" pos:column="71">.</op:operator><name pos:line="713" pos:column="72">RuntimePolicyKey</name></name></expr></argument>)</argument_list></call>
                                     <op:operator pos:line="714" pos:column="38">?</op:operator> <call><name><name pos:line="714" pos:column="40">requestStore</name><op:operator pos:line="714" pos:column="52">.</op:operator><name><name pos:line="714" pos:column="53">Get</name><argument_list pos:line="714" pos:column="56">&lt;<argument><name pos:line="714" pos:column="57">RuntimePolicy</name></argument>&gt;</argument_list></name></name><argument_list pos:line="714" pos:column="71">(<argument><expr><name><name pos:line="714" pos:column="72">Constants</name><op:operator pos:line="714" pos:column="81">.</op:operator><name pos:line="714" pos:column="82">RuntimePolicyKey</name></name></expr></argument>)</argument_list></call>
                                     <op:operator pos:line="715" pos:column="38">:</op:operator> <name><name pos:line="715" pos:column="40">Configuration</name><op:operator pos:line="715" pos:column="53">.</op:operator><name pos:line="715" pos:column="54">DefaultRuntimePolicy</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name pos:line="717" pos:column="13">maximumAllowedPolicy</name> <op:operator pos:line="717" pos:column="34">=</op:operator> <call><name pos:line="717" pos:column="36">DetermineRuntimePolicy</name><argument_list pos:line="717" pos:column="58">(<argument><expr><name pos:line="717" pos:column="59">runtimeEvent</name></expr></argument>, <argument><expr><name pos:line="717" pos:column="73">maximumAllowedPolicy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="719" pos:column="13">// store result for request</comment>
            <expr_stmt><expr><call><name><name pos:line="720" pos:column="13">requestStore</name><op:operator pos:line="720" pos:column="25">.</op:operator><name pos:line="720" pos:column="26">Set</name></name><argument_list pos:line="720" pos:column="29">(<argument><expr><name><name pos:line="720" pos:column="30">Constants</name><op:operator pos:line="720" pos:column="39">.</op:operator><name pos:line="720" pos:column="40">RuntimePolicyKey</name></name></expr></argument>, <argument><expr><name pos:line="720" pos:column="58">maximumAllowedPolicy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="721" pos:column="13">return <expr><name pos:line="721" pos:column="20">maximumAllowedPolicy</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="724" pos:column="9">private</specifier> <name pos:line="724" pos:column="17">string</name></type> <name pos:line="724" pos:column="24">GenerateScriptTags</name><parameter_list pos:line="724" pos:column="42">(<param><decl><type><name pos:line="724" pos:column="43">Guid</name></type> <name pos:line="724" pos:column="48">requestId</name></decl></param>)</parameter_list>
        <block pos:line="725" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="726" pos:column="13">var</name></type> <name pos:line="726" pos:column="17">requestStore</name> <init pos:line="726" pos:column="30">= <expr><name><name pos:line="726" pos:column="32">Configuration</name><op:operator pos:line="726" pos:column="45">.</op:operator><name pos:line="726" pos:column="46">FrameworkProvider</name><op:operator pos:line="726" pos:column="63">.</op:operator><name pos:line="726" pos:column="64">HttpRequestStore</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="727" pos:column="13">var</name></type> <name pos:line="727" pos:column="17">runtimePolicy</name> <init pos:line="727" pos:column="31">= <expr><call><name><name pos:line="727" pos:column="33">requestStore</name><op:operator pos:line="727" pos:column="45">.</op:operator><name><name pos:line="727" pos:column="46">Get</name><argument_list pos:line="727" pos:column="49">&lt;<argument><name pos:line="727" pos:column="50">RuntimePolicy</name></argument>&gt;</argument_list></name></name><argument_list pos:line="727" pos:column="64">(<argument><expr><name><name pos:line="727" pos:column="65">Constants</name><op:operator pos:line="727" pos:column="74">.</op:operator><name pos:line="727" pos:column="75">RuntimePolicyKey</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="728" pos:column="13">var</name></type> <name pos:line="728" pos:column="17">hasRendered</name> <init pos:line="728" pos:column="29">= <expr><lit:literal type="boolean" pos:line="728" pos:column="31">false</lit:literal></expr></init></decl>;</decl_stmt>

            <if pos:line="730" pos:column="13">if <condition pos:line="730" pos:column="16">(<expr><call><name><name pos:line="730" pos:column="17">requestStore</name><op:operator pos:line="730" pos:column="29">.</op:operator><name pos:line="730" pos:column="30">Contains</name></name><argument_list pos:line="730" pos:column="38">(<argument><expr><name><name pos:line="730" pos:column="39">Constants</name><op:operator pos:line="730" pos:column="48">.</op:operator><name pos:line="730" pos:column="49">ScriptsHaveRenderedKey</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="730" pos:column="73">
            <block pos:line="731" pos:column="13">{
                <expr_stmt><expr><name pos:line="732" pos:column="17">hasRendered</name> <op:operator pos:line="732" pos:column="29">=</op:operator> <call><name><name pos:line="732" pos:column="31">requestStore</name><op:operator pos:line="732" pos:column="43">.</op:operator><name><name pos:line="732" pos:column="44">Get</name><argument_list pos:line="732" pos:column="47">&lt;<argument><name pos:line="732" pos:column="48">bool</name></argument>&gt;</argument_list></name></name><argument_list pos:line="732" pos:column="53">(<argument><expr><name><name pos:line="732" pos:column="54">Constants</name><op:operator pos:line="732" pos:column="63">.</op:operator><name pos:line="732" pos:column="64">ScriptsHaveRenderedKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if pos:line="735" pos:column="13">if <condition pos:line="735" pos:column="16">(<expr><name pos:line="735" pos:column="17">hasRendered</name></expr>)</condition><then pos:line="735" pos:column="29">
            <block pos:line="736" pos:column="13">{
                <return pos:line="737" pos:column="17">return <expr><name><name pos:line="737" pos:column="24">string</name><op:operator pos:line="737" pos:column="30">.</op:operator><name pos:line="737" pos:column="31">Empty</name></name></expr>;</return>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="740" pos:column="13">var</name></type> <name pos:line="740" pos:column="17">encoder</name> <init pos:line="740" pos:column="25">= <expr><name><name pos:line="740" pos:column="27">Configuration</name><op:operator pos:line="740" pos:column="40">.</op:operator><name pos:line="740" pos:column="41">HtmlEncoder</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="741" pos:column="13">var</name></type> <name pos:line="741" pos:column="17">resourceEndpoint</name> <init pos:line="741" pos:column="34">= <expr><name><name pos:line="741" pos:column="36">Configuration</name><op:operator pos:line="741" pos:column="49">.</op:operator><name pos:line="741" pos:column="50">ResourceEndpoint</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="742" pos:column="13">var</name></type> <name pos:line="742" pos:column="17">clientScripts</name> <init pos:line="742" pos:column="31">= <expr><name><name pos:line="742" pos:column="33">Configuration</name><op:operator pos:line="742" pos:column="46">.</op:operator><name pos:line="742" pos:column="47">ClientScripts</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="743" pos:column="13">var</name></type> <name pos:line="743" pos:column="17">logger</name> <init pos:line="743" pos:column="24">= <expr><name><name pos:line="743" pos:column="26">Configuration</name><op:operator pos:line="743" pos:column="39">.</op:operator><name pos:line="743" pos:column="40">Logger</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="744" pos:column="13">var</name></type> <name pos:line="744" pos:column="17">resources</name> <init pos:line="744" pos:column="27">= <expr><name><name pos:line="744" pos:column="29">Configuration</name><op:operator pos:line="744" pos:column="42">.</op:operator><name pos:line="744" pos:column="43">Resources</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="746" pos:column="13">var</name></type> <name pos:line="746" pos:column="17">stringBuilder</name> <init pos:line="746" pos:column="31">= <expr><op:operator pos:line="746" pos:column="33">new</op:operator> <call><name pos:line="746" pos:column="37">StringBuilder</name><argument_list pos:line="746" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <foreach pos:line="748" pos:column="13">foreach (<init><decl><type><name pos:line="748" pos:column="22">var</name></type> <name pos:line="748" pos:column="26">clientScript</name> <range pos:line="748" pos:column="39">in <expr><call><name><name pos:line="748" pos:column="42">clientScripts</name><op:operator pos:line="748" pos:column="55">.</op:operator><name pos:line="748" pos:column="56">OrderBy</name></name><argument_list pos:line="748" pos:column="63">(<argument><expr><lambda><name pos:line="748" pos:column="64">cs</name> <op:operator pos:line="748" pos:column="67">=&gt;</op:operator> <name><name pos:line="748" pos:column="70">cs</name><op:operator pos:line="748" pos:column="72">.</op:operator><name pos:line="748" pos:column="73">Order</name></name></lambda></expr></argument>)</argument_list></call></expr></range></decl></init>)
            <block pos:line="749" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="750" pos:column="17">var</name></type> <name pos:line="750" pos:column="21">dynamicScript</name> <init pos:line="750" pos:column="35">= <expr><name pos:line="750" pos:column="37">clientScript</name> <op:operator pos:line="750" pos:column="50">as</op:operator> <name pos:line="750" pos:column="53">IDynamicClientScript</name></expr></init></decl>;</decl_stmt>
                <if pos:line="751" pos:column="17">if <condition pos:line="751" pos:column="20">(<expr><name pos:line="751" pos:column="21">dynamicScript</name> <op:operator pos:line="751" pos:column="35">!=</op:operator> <name pos:line="751" pos:column="38">null</name></expr>)</condition><then pos:line="751" pos:column="43">
                <block pos:line="752" pos:column="17">{
                    <try pos:line="753" pos:column="21">try
                    <block pos:line="754" pos:column="21">{
                        <decl_stmt><decl><type><name pos:line="755" pos:column="25">var</name></type> <name pos:line="755" pos:column="29">requestTokenValues</name> <init pos:line="755" pos:column="48">= <expr><op:operator pos:line="755" pos:column="50">new</op:operator> <name><name pos:line="755" pos:column="54">Dictionary</name><argument_list pos:line="755" pos:column="64">&lt;<argument><name pos:line="755" pos:column="65">string</name></argument>, <argument><name pos:line="755" pos:column="73">string</name></argument>&gt;</argument_list></name>
                                         <block pos:line="756" pos:column="42">{
                                             <expr><block pos:line="757" pos:column="46">{ <expr><name><name pos:line="757" pos:column="48">ResourceParameter</name><op:operator pos:line="757" pos:column="65">.</op:operator><name pos:line="757" pos:column="66">RequestId</name><op:operator pos:line="757" pos:column="75">.</op:operator><name pos:line="757" pos:column="76">Name</name></name></expr>, <expr><call><name><name pos:line="757" pos:column="82">requestId</name><op:operator pos:line="757" pos:column="91">.</op:operator><name pos:line="757" pos:column="92">ToString</name></name><argument_list pos:line="757" pos:column="100">()</argument_list></call></expr> }</block></expr>,
                                             <expr><block pos:line="758" pos:column="46">{ <expr><name><name pos:line="758" pos:column="48">ResourceParameter</name><op:operator pos:line="758" pos:column="65">.</op:operator><name pos:line="758" pos:column="66">VersionNumber</name><op:operator pos:line="758" pos:column="79">.</op:operator><name pos:line="758" pos:column="80">Name</name></name></expr>, <expr><name pos:line="758" pos:column="86">Version</name></expr> }</block></expr>,
                                             <expr><block pos:line="759" pos:column="46">{ <expr><name><name pos:line="759" pos:column="48">ResourceParameter</name><op:operator pos:line="759" pos:column="65">.</op:operator><name pos:line="759" pos:column="66">Hash</name><op:operator pos:line="759" pos:column="70">.</op:operator><name pos:line="759" pos:column="71">Name</name></name></expr>, <expr><name><name pos:line="759" pos:column="77">Configuration</name><op:operator pos:line="759" pos:column="90">.</op:operator><name pos:line="759" pos:column="91">Hash</name></name></expr> }</block></expr>
                                         }</block></expr></init></decl>;</decl_stmt>

                        <decl_stmt><decl><type><name pos:line="762" pos:column="25">var</name></type> <name pos:line="762" pos:column="29">resourceName</name> <init pos:line="762" pos:column="42">= <expr><call><name><name pos:line="762" pos:column="44">dynamicScript</name><op:operator pos:line="762" pos:column="57">.</op:operator><name pos:line="762" pos:column="58">GetResourceName</name></name><argument_list pos:line="762" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name pos:line="763" pos:column="25">var</name></type> <name pos:line="763" pos:column="29">resource</name> <init pos:line="763" pos:column="38">= <expr><call><name><name pos:line="763" pos:column="40">resources</name><op:operator pos:line="763" pos:column="49">.</op:operator><name pos:line="763" pos:column="50">FirstOrDefault</name></name><argument_list pos:line="763" pos:column="64">(<argument><expr><lambda><name pos:line="763" pos:column="65">r</name> <op:operator pos:line="763" pos:column="67">=&gt;</op:operator> <call><name><name pos:line="763" pos:column="70">r</name><op:operator pos:line="763" pos:column="71">.</op:operator><name pos:line="763" pos:column="72">Name</name><op:operator pos:line="763" pos:column="76">.</op:operator><name pos:line="763" pos:column="77">Equals</name></name><argument_list pos:line="763" pos:column="83">(<argument><expr><name pos:line="763" pos:column="84">resourceName</name></expr></argument>, <argument><expr><name><name pos:line="763" pos:column="98">StringComparison</name><op:operator pos:line="763" pos:column="114">.</op:operator><name pos:line="763" pos:column="115">InvariantCultureIgnoreCase</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <if pos:line="765" pos:column="25">if <condition pos:line="765" pos:column="28">(<expr><name pos:line="765" pos:column="29">resource</name> <op:operator pos:line="765" pos:column="38">==</op:operator> <name pos:line="765" pos:column="41">null</name></expr>)</condition><then pos:line="765" pos:column="46">
                        <block pos:line="766" pos:column="25">{
                            <expr_stmt><expr><call><name><name pos:line="767" pos:column="29">logger</name><op:operator pos:line="767" pos:column="35">.</op:operator><name pos:line="767" pos:column="36">Warn</name></name><argument_list pos:line="767" pos:column="40">(<argument><expr><name><name pos:line="767" pos:column="41">Resources</name><op:operator pos:line="767" pos:column="50">.</op:operator><name pos:line="767" pos:column="51">RenderClientScriptMissingResourceWarning</name></name></expr></argument>, <argument><expr><call><name><name pos:line="767" pos:column="93">clientScript</name><op:operator pos:line="767" pos:column="105">.</op:operator><name pos:line="767" pos:column="106">GetType</name></name><argument_list pos:line="767" pos:column="113">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="767" pos:column="117">resourceName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <continue pos:line="768" pos:column="29">continue;</continue>
                        }</block></then></if>

                        <decl_stmt><decl><type><name pos:line="771" pos:column="25">var</name></type> <name pos:line="771" pos:column="29">uriTemplate</name> <init pos:line="771" pos:column="41">= <expr><call><name><name pos:line="771" pos:column="43">resourceEndpoint</name><op:operator pos:line="771" pos:column="59">.</op:operator><name pos:line="771" pos:column="60">GenerateUriTemplate</name></name><argument_list pos:line="771" pos:column="79">(<argument><expr><name pos:line="771" pos:column="80">resource</name></expr></argument>, <argument><expr><name><name pos:line="771" pos:column="90">Configuration</name><op:operator pos:line="771" pos:column="103">.</op:operator><name pos:line="771" pos:column="104">EndpointBaseUri</name></name></expr></argument>, <argument><expr><name pos:line="771" pos:column="121">logger</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <decl_stmt><decl><type><name pos:line="773" pos:column="25">var</name></type> <name pos:line="773" pos:column="29">resourceParameterProvider</name> <init pos:line="773" pos:column="55">= <expr><name pos:line="773" pos:column="57">dynamicScript</name> <op:operator pos:line="773" pos:column="71">as</op:operator> <name pos:line="773" pos:column="74">IParameterValueProvider</name></expr></init></decl>;</decl_stmt>

                        <if pos:line="775" pos:column="25">if <condition pos:line="775" pos:column="28">(<expr><name pos:line="775" pos:column="29">resourceParameterProvider</name> <op:operator pos:line="775" pos:column="55">!=</op:operator> <name pos:line="775" pos:column="58">null</name></expr>)</condition><then pos:line="775" pos:column="63">
                        <block pos:line="776" pos:column="25">{
                            <expr_stmt><expr><call><name><name pos:line="777" pos:column="29">resourceParameterProvider</name><op:operator pos:line="777" pos:column="54">.</op:operator><name pos:line="777" pos:column="55">OverrideParameterValues</name></name><argument_list pos:line="777" pos:column="78">(<argument><expr><name pos:line="777" pos:column="79">requestTokenValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>

                        <macro><name pos:line="780" pos:column="25">var</name></macro> template <expr_stmt><expr><op:operator pos:line="780" pos:column="38">=</op:operator> <call><name pos:line="780" pos:column="40">SetParameters</name><argument_list pos:line="780" pos:column="53">(<argument><expr><op:operator pos:line="780" pos:column="54">new</op:operator> <call><name pos:line="780" pos:column="58">UriTemplate</name><argument_list pos:line="780" pos:column="69">(<argument><expr><name pos:line="780" pos:column="70">uriTemplate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="780" pos:column="84">requestTokenValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <decl_stmt><decl><type><name pos:line="781" pos:column="25">var</name></type> <name pos:line="781" pos:column="29">uri</name> <init pos:line="781" pos:column="33">= <macro><name pos:line="781" pos:column="35">encoder</name></macro><expr><op:operator pos:line="781" pos:column="42">.</op:operator><macro><name pos:line="781" pos:column="43">HtmlAttributeEncode</name><argument_list pos:line="781" pos:column="62">(<argument pos:line="781" pos:column="63">template.Resolve()</argument>)</argument_list></macro></expr></init></decl>;</decl_stmt>

                        <if pos:line="783" pos:column="25">if <condition pos:line="783" pos:column="28">(<expr><op:operator pos:line="783" pos:column="29">!</op:operator><call><name><name pos:line="783" pos:column="30">string</name><op:operator pos:line="783" pos:column="36">.</op:operator><name pos:line="783" pos:column="37">IsNullOrEmpty</name></name><argument_list pos:line="783" pos:column="50">(<argument><expr><name pos:line="783" pos:column="51">uri</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="783" pos:column="56">
                        <block pos:line="784" pos:column="25">{
                            <expr_stmt><expr><call><name><name pos:line="785" pos:column="29">stringBuilder</name><op:operator pos:line="785" pos:column="42">.</op:operator><name pos:line="785" pos:column="43">AppendFormat</name></name><argument_list pos:line="785" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="785" pos:column="56">@"&lt;script type='text/javascript' src='{0}'&gt;&lt;/script&gt;"</lit:literal></expr></argument>, <argument><expr><name pos:line="785" pos:column="111">uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>

                        <continue pos:line="788" pos:column="25">continue;</continue>
                    }</block>
                    <catch pos:line="790" pos:column="21">catch <parameter_list pos:line="790" pos:column="27">(<param><decl><type><name pos:line="790" pos:column="28">Exception</name></type> <name pos:line="790" pos:column="38">exception</name></decl></param>)</parameter_list>
                    <block pos:line="791" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="792" pos:column="25">logger</name><op:operator pos:line="792" pos:column="31">.</op:operator><name pos:line="792" pos:column="32">Error</name></name><argument_list pos:line="792" pos:column="37">(<argument><expr><name><name pos:line="792" pos:column="38">Core</name><op:operator pos:line="792" pos:column="42">.</op:operator><name pos:line="792" pos:column="43">Resources</name><op:operator pos:line="792" pos:column="52">.</op:operator><name pos:line="792" pos:column="53">GenerateScriptTagsDynamicException</name></name></expr></argument>, <argument><expr><name pos:line="792" pos:column="89">exception</name></expr></argument>, <argument><expr><call><name><name pos:line="792" pos:column="100">dynamicScript</name><op:operator pos:line="792" pos:column="113">.</op:operator><name pos:line="792" pos:column="114">GetType</name></name><argument_list pos:line="792" pos:column="121">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></catch></try>
                }</block></then></if>

                <decl_stmt><decl><type><name pos:line="796" pos:column="17">var</name></type> <name pos:line="796" pos:column="21">staticScript</name> <init pos:line="796" pos:column="34">= <expr><name pos:line="796" pos:column="36">clientScript</name> <op:operator pos:line="796" pos:column="49">as</op:operator> <name pos:line="796" pos:column="52">IStaticClientScript</name></expr></init></decl>;</decl_stmt>
                <if pos:line="797" pos:column="17">if <condition pos:line="797" pos:column="20">(<expr><name pos:line="797" pos:column="21">staticScript</name> <op:operator pos:line="797" pos:column="34">!=</op:operator> <name pos:line="797" pos:column="37">null</name></expr>)</condition><then pos:line="797" pos:column="42">
                <block pos:line="798" pos:column="17">{
                    <try pos:line="799" pos:column="21">try
                    <block pos:line="800" pos:column="21">{
                        <decl_stmt><decl><type><name pos:line="801" pos:column="25">var</name></type> <name pos:line="801" pos:column="29">uri</name> <init pos:line="801" pos:column="33">= <expr><call><name><name pos:line="801" pos:column="35">encoder</name><op:operator pos:line="801" pos:column="42">.</op:operator><name pos:line="801" pos:column="43">HtmlAttributeEncode</name></name><argument_list pos:line="801" pos:column="62">(<argument><expr><call><name><name pos:line="801" pos:column="63">staticScript</name><op:operator pos:line="801" pos:column="75">.</op:operator><name pos:line="801" pos:column="76">GetUri</name></name><argument_list pos:line="801" pos:column="82">(<argument><expr><name pos:line="801" pos:column="83">Version</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <if pos:line="803" pos:column="25">if <condition pos:line="803" pos:column="28">(<expr><op:operator pos:line="803" pos:column="29">!</op:operator><call><name><name pos:line="803" pos:column="30">string</name><op:operator pos:line="803" pos:column="36">.</op:operator><name pos:line="803" pos:column="37">IsNullOrEmpty</name></name><argument_list pos:line="803" pos:column="50">(<argument><expr><name pos:line="803" pos:column="51">uri</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="803" pos:column="56">
                        <block pos:line="804" pos:column="25">{
                            <expr_stmt><expr><call><name><name pos:line="805" pos:column="29">stringBuilder</name><op:operator pos:line="805" pos:column="42">.</op:operator><name pos:line="805" pos:column="43">AppendFormat</name></name><argument_list pos:line="805" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="805" pos:column="56">@"&lt;script type='text/javascript' src='{0}'&gt;&lt;/script&gt;"</lit:literal></expr></argument>, <argument><expr><name pos:line="805" pos:column="111">uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>

                        <continue pos:line="808" pos:column="25">continue;</continue>
                    }</block>
                    <catch pos:line="810" pos:column="21">catch <parameter_list pos:line="810" pos:column="27">(<param><decl><type><name pos:line="810" pos:column="28">Exception</name></type> <name pos:line="810" pos:column="38">exception</name></decl></param>)</parameter_list>
                    <block pos:line="811" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="812" pos:column="25">logger</name><op:operator pos:line="812" pos:column="31">.</op:operator><name pos:line="812" pos:column="32">Error</name></name><argument_list pos:line="812" pos:column="37">(<argument><expr><name><name pos:line="812" pos:column="38">Core</name><op:operator pos:line="812" pos:column="42">.</op:operator><name pos:line="812" pos:column="43">Resources</name><op:operator pos:line="812" pos:column="52">.</op:operator><name pos:line="812" pos:column="53">GenerateScriptTagsStaticException</name></name></expr></argument>, <argument><expr><name pos:line="812" pos:column="88">exception</name></expr></argument>, <argument><expr><call><name><name pos:line="812" pos:column="99">staticScript</name><op:operator pos:line="812" pos:column="111">.</op:operator><name pos:line="812" pos:column="112">GetType</name></name><argument_list pos:line="812" pos:column="119">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></catch></try>
                }</block></then></if>

                <expr_stmt><expr><call><name><name pos:line="816" pos:column="17">logger</name><op:operator pos:line="816" pos:column="23">.</op:operator><name pos:line="816" pos:column="24">Warn</name></name><argument_list pos:line="816" pos:column="28">(<argument><expr><name><name pos:line="816" pos:column="29">Core</name><op:operator pos:line="816" pos:column="33">.</op:operator><name pos:line="816" pos:column="34">Resources</name><op:operator pos:line="816" pos:column="43">.</op:operator><name pos:line="816" pos:column="44">RenderClientScriptImproperImplementationWarning</name></name></expr></argument>, <argument><expr><call><name><name pos:line="816" pos:column="93">clientScript</name><op:operator pos:line="816" pos:column="105">.</op:operator><name pos:line="816" pos:column="106">GetType</name></name><argument_list pos:line="816" pos:column="113">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>

            <expr_stmt><expr><call><name><name pos:line="819" pos:column="13">requestStore</name><op:operator pos:line="819" pos:column="25">.</op:operator><name pos:line="819" pos:column="26">Set</name></name><argument_list pos:line="819" pos:column="29">(<argument><expr><name><name pos:line="819" pos:column="30">Constants</name><op:operator pos:line="819" pos:column="39">.</op:operator><name pos:line="819" pos:column="40">ScriptsHaveRenderedKey</name></name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="819" pos:column="64">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="820" pos:column="13">return <expr><call><name><name pos:line="820" pos:column="20">stringBuilder</name><op:operator pos:line="820" pos:column="33">.</op:operator><name pos:line="820" pos:column="34">ToString</name></name><argument_list pos:line="820" pos:column="42">()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="823" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="824" pos:column="9">/// The message used to to track the beginning and end of Http requests.</comment>
        <comment type="line" pos:line="825" pos:column="9">/// &lt;/summary&gt;</comment>
        <class><specifier pos:line="826" pos:column="9">protected</specifier> class <name pos:line="826" pos:column="25">RuntimeMessage</name> <super pos:line="826" pos:column="40">: <name pos:line="826" pos:column="42">ITimelineMessage</name>, <name pos:line="826" pos:column="60">ISourceMessage</name></super>
        <block pos:line="827" pos:column="9">{
            <comment type="line" pos:line="828" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="829" pos:column="13">/// Gets the id of the request.</comment>
            <comment type="line" pos:line="830" pos:column="13">/// &lt;/summary&gt;</comment>
            <comment type="line" pos:line="831" pos:column="13">/// &lt;value&gt;</comment>
            <comment type="line" pos:line="832" pos:column="13">/// The id.</comment>
            <comment type="line" pos:line="833" pos:column="13">/// &lt;/value&gt;</comment>
            <decl_stmt><decl><type><specifier pos:line="834" pos:column="13">public</specifier> <name pos:line="834" pos:column="20">Guid</name></type> <name pos:line="834" pos:column="25">Id</name> <block pos:line="834" pos:column="28">{ <function_decl><name pos:line="834" pos:column="30">get</name>;</function_decl> <function_decl><specifier pos:line="834" pos:column="35">private</specifier> <name pos:line="834" pos:column="43">set</name>;</function_decl> }</block></decl></decl_stmt>

            <comment type="line" pos:line="836" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="837" pos:column="13">/// Gets or sets the name of the event.</comment>
            <comment type="line" pos:line="838" pos:column="13">/// &lt;/summary&gt;</comment>
            <comment type="line" pos:line="839" pos:column="13">/// &lt;value&gt;</comment>
            <comment type="line" pos:line="840" pos:column="13">/// The name of the event.</comment>
            <comment type="line" pos:line="841" pos:column="13">/// &lt;/value&gt;</comment>
            <decl_stmt><decl><type><specifier pos:line="842" pos:column="13">public</specifier> <name pos:line="842" pos:column="20">string</name></type> <name pos:line="842" pos:column="27">EventName</name> <block pos:line="842" pos:column="37">{ <function_decl><name pos:line="842" pos:column="39">get</name>;</function_decl> <function_decl><name pos:line="842" pos:column="44">set</name>;</function_decl> }</block></decl></decl_stmt>

            <comment type="line" pos:line="844" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="845" pos:column="13">/// Gets or sets the event category.</comment>
            <comment type="line" pos:line="846" pos:column="13">/// &lt;/summary&gt;</comment>
            <comment type="line" pos:line="847" pos:column="13">/// &lt;value&gt;</comment>
            <comment type="line" pos:line="848" pos:column="13">/// The event category.</comment>
            <comment type="line" pos:line="849" pos:column="13">/// &lt;/value&gt;</comment>
            <decl_stmt><decl><type><specifier pos:line="850" pos:column="13">public</specifier> <name pos:line="850" pos:column="20">TimelineCategoryItem</name></type> <name pos:line="850" pos:column="41">EventCategory</name> <block pos:line="850" pos:column="55">{ <function_decl><name pos:line="850" pos:column="57">get</name>;</function_decl> <function_decl><name pos:line="850" pos:column="62">set</name>;</function_decl> }</block></decl></decl_stmt>

            <comment type="line" pos:line="852" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="853" pos:column="13">/// Gets or sets the event sub text.</comment>
            <comment type="line" pos:line="854" pos:column="13">/// &lt;/summary&gt;</comment>
            <comment type="line" pos:line="855" pos:column="13">/// &lt;value&gt;</comment>
            <comment type="line" pos:line="856" pos:column="13">/// The event sub text.</comment>
            <comment type="line" pos:line="857" pos:column="13">/// &lt;/value&gt;</comment>
            <decl_stmt><decl><type><specifier pos:line="858" pos:column="13">public</specifier> <name pos:line="858" pos:column="20">string</name></type> <name pos:line="858" pos:column="27">EventSubText</name> <block pos:line="858" pos:column="40">{ <function_decl><name pos:line="858" pos:column="42">get</name>;</function_decl> <function_decl><name pos:line="858" pos:column="47">set</name>;</function_decl> }</block></decl></decl_stmt>

            <comment type="line" pos:line="860" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="861" pos:column="13">/// Gets or sets the type of the executed.</comment>
            <comment type="line" pos:line="862" pos:column="13">/// &lt;/summary&gt;</comment>
            <comment type="line" pos:line="863" pos:column="13">/// &lt;value&gt;</comment>
            <comment type="line" pos:line="864" pos:column="13">/// The type of the executed.</comment>
            <comment type="line" pos:line="865" pos:column="13">/// &lt;/value&gt;</comment>
            <decl_stmt><decl><type><specifier pos:line="866" pos:column="13">public</specifier> <name pos:line="866" pos:column="20">Type</name></type> <name pos:line="866" pos:column="25">ExecutedType</name> <block pos:line="866" pos:column="38">{ <function_decl><name pos:line="866" pos:column="40">get</name>;</function_decl> <function_decl><name pos:line="866" pos:column="45">set</name>;</function_decl> }</block></decl></decl_stmt>

            <comment type="line" pos:line="868" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="869" pos:column="13">/// Gets or sets the executed method.</comment>
            <comment type="line" pos:line="870" pos:column="13">/// &lt;/summary&gt;</comment>
            <comment type="line" pos:line="871" pos:column="13">/// &lt;value&gt;</comment>
            <comment type="line" pos:line="872" pos:column="13">/// The executed method.</comment>
            <comment type="line" pos:line="873" pos:column="13">/// &lt;/value&gt;</comment>
            <decl_stmt><decl><type><specifier pos:line="874" pos:column="13">public</specifier> <name pos:line="874" pos:column="20">MethodInfo</name></type> <name pos:line="874" pos:column="31">ExecutedMethod</name> <block pos:line="874" pos:column="46">{ <function_decl><name pos:line="874" pos:column="48">get</name>;</function_decl> <function_decl><name pos:line="874" pos:column="53">set</name>;</function_decl> }</block></decl></decl_stmt>

            <comment type="line" pos:line="876" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="877" pos:column="13">/// Gets or sets the offset.</comment>
            <comment type="line" pos:line="878" pos:column="13">/// &lt;/summary&gt;</comment>
            <comment type="line" pos:line="879" pos:column="13">/// &lt;value&gt;</comment>
            <comment type="line" pos:line="880" pos:column="13">/// The offset.</comment>
            <comment type="line" pos:line="881" pos:column="13">/// &lt;/value&gt;</comment>
            <decl_stmt><decl><type><specifier pos:line="882" pos:column="13">public</specifier> <name pos:line="882" pos:column="20">TimeSpan</name></type> <name pos:line="882" pos:column="29">Offset</name> <block pos:line="882" pos:column="36">{ <function_decl><name pos:line="882" pos:column="38">get</name>;</function_decl> <function_decl><name pos:line="882" pos:column="43">set</name>;</function_decl> }</block></decl></decl_stmt>

            <comment type="line" pos:line="884" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="885" pos:column="13">/// Gets or sets the duration.</comment>
            <comment type="line" pos:line="886" pos:column="13">/// &lt;/summary&gt;</comment>
            <comment type="line" pos:line="887" pos:column="13">/// &lt;value&gt;</comment>
            <comment type="line" pos:line="888" pos:column="13">/// The duration.</comment>
            <comment type="line" pos:line="889" pos:column="13">/// &lt;/value&gt;</comment>
            <decl_stmt><decl><type><specifier pos:line="890" pos:column="13">public</specifier> <name pos:line="890" pos:column="20">TimeSpan</name></type> <name pos:line="890" pos:column="29">Duration</name> <block pos:line="890" pos:column="38">{ <function_decl><name pos:line="890" pos:column="40">get</name>;</function_decl> <function_decl><name pos:line="890" pos:column="45">set</name>;</function_decl> }</block></decl></decl_stmt>

            <comment type="line" pos:line="892" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="893" pos:column="13">/// Gets or sets the start time.</comment>
            <comment type="line" pos:line="894" pos:column="13">/// &lt;/summary&gt;</comment>
            <comment type="line" pos:line="895" pos:column="13">/// &lt;value&gt;</comment>
            <comment type="line" pos:line="896" pos:column="13">/// The start time.</comment>
            <comment type="line" pos:line="897" pos:column="13">/// &lt;/value&gt;</comment>
            <decl_stmt><decl><type><specifier pos:line="898" pos:column="13">public</specifier> <name pos:line="898" pos:column="20">DateTime</name></type> <name pos:line="898" pos:column="29">StartTime</name> <block pos:line="898" pos:column="39">{ <function_decl><name pos:line="898" pos:column="41">get</name>;</function_decl> <function_decl><name pos:line="898" pos:column="46">set</name>;</function_decl> }</block></decl></decl_stmt>
        }</block></class>
    }</block></class>
}</block></namespace></unit>
