<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Core\Extensibility\AlternateTypeGenerationHook.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Reflection</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Castle</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">DynamicProxy</name></name>;</using>

<namespace pos:line="7" pos:column="1">namespace <name><name pos:line="7" pos:column="11">Glimpse</name><op:operator pos:line="7" pos:column="18">.</op:operator><name pos:line="7" pos:column="19">Core</name><op:operator pos:line="7" pos:column="23">.</op:operator><name pos:line="7" pos:column="24">Extensibility</name></name>
<block pos:line="8" pos:column="1">{
    <comment type="line" pos:line="9" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="10" pos:column="5">/// An implementation of Castle DynamicProxy's &lt;see cref="IProxyGenerationHook"/&gt; for Glimpse.</comment>
    <comment type="line" pos:line="11" pos:column="5">/// &lt;/summary&gt;</comment>
    <comment type="line" pos:line="12" pos:column="5">/// &lt;typeparam name="T"&gt;The type being proxied.&lt;/typeparam&gt;</comment>
    <class><specifier pos:line="13" pos:column="5">public</specifier> class <name><name pos:line="13" pos:column="18">AlternateTypeGenerationHook</name><argument_list pos:line="13" pos:column="45">&lt;<argument><name pos:line="13" pos:column="46">T</name></argument>&gt;</argument_list></name> <super pos:line="13" pos:column="49">: <name pos:line="13" pos:column="51">IProxyGenerationHook</name></super>
    <block pos:line="14" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="15" pos:column="9">private</specifier> <name><name pos:line="15" pos:column="17">IEnumerable</name><argument_list pos:line="15" pos:column="28">&lt;<argument><name pos:line="15" pos:column="29">MethodInfo</name></argument>&gt;</argument_list></name></type> <name pos:line="15" pos:column="41">methodSet</name></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><specifier pos:line="17" pos:column="9">private</specifier> <name><name pos:line="17" pos:column="17">IEnumerable</name><argument_list pos:line="17" pos:column="28">&lt;<argument><name pos:line="17" pos:column="29">IAlternateMethod</name></argument>&gt;</argument_list></name></type> <name pos:line="17" pos:column="47">methodImplementations</name></decl>;</decl_stmt>

        <comment type="line" pos:line="19" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="20" pos:column="9">/// Initializes a new instance of the &lt;see cref="AlternateTypeGenerationHook{T}" /&gt; class.</comment>
        <comment type="line" pos:line="21" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="22" pos:column="9">/// &lt;param name="methodImplementations"&gt;The method implementations.&lt;/param&gt;</comment>
        <comment type="line" pos:line="23" pos:column="9">/// &lt;param name="logger"&gt;The logger.&lt;/param&gt;</comment>
        <comment type="line" pos:line="24" pos:column="9">/// &lt;exception cref="System.ArgumentNullException"&gt;Throws an exception if either &lt;paramref name="methodImplementations"/&gt; or &lt;paramref name="logger"/&gt; are &lt;c&gt;null&lt;/c&gt;.&lt;/exception&gt;</comment>
        <constructor><specifier pos:line="25" pos:column="9">public</specifier> <name pos:line="25" pos:column="16">AlternateTypeGenerationHook</name><parameter_list pos:line="25" pos:column="43">(<param><decl><type><name><name pos:line="25" pos:column="44">IEnumerable</name><argument_list pos:line="25" pos:column="55">&lt;<argument><name pos:line="25" pos:column="56">IAlternateMethod</name></argument>&gt;</argument_list></name></type> <name pos:line="25" pos:column="74">methodImplementations</name></decl></param>, <param><decl><type><name pos:line="25" pos:column="97">ILogger</name></type> <name pos:line="25" pos:column="105">logger</name></decl></param>)</parameter_list>
        <block pos:line="26" pos:column="9">{
            <if pos:line="27" pos:column="13">if <condition pos:line="27" pos:column="16">(<expr><name pos:line="27" pos:column="17">methodImplementations</name> <op:operator pos:line="27" pos:column="39">==</op:operator> <name pos:line="27" pos:column="42">null</name></expr>)</condition><then pos:line="27" pos:column="47">
            <block pos:line="28" pos:column="13">{
                <throw pos:line="29" pos:column="17">throw <expr><op:operator pos:line="29" pos:column="23">new</op:operator> <call><name pos:line="29" pos:column="27">ArgumentNullException</name><argument_list pos:line="29" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="29" pos:column="49">"methodImplementations"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <if pos:line="32" pos:column="13">if <condition pos:line="32" pos:column="16">(<expr><name pos:line="32" pos:column="17">logger</name> <op:operator pos:line="32" pos:column="24">==</op:operator> <name pos:line="32" pos:column="27">null</name></expr>)</condition><then pos:line="32" pos:column="32">
            <block pos:line="33" pos:column="13">{
                <throw pos:line="34" pos:column="17">throw <expr><op:operator pos:line="34" pos:column="23">new</op:operator> <call><name pos:line="34" pos:column="27">ArgumentNullException</name><argument_list pos:line="34" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="34" pos:column="49">"logger"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            
            <expr_stmt><expr><name pos:line="37" pos:column="13">MethodImplementations</name> <op:operator pos:line="37" pos:column="35">=</op:operator> <name pos:line="37" pos:column="37">methodImplementations</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="38" pos:column="13">Logger</name> <op:operator pos:line="38" pos:column="20">=</op:operator> <name pos:line="38" pos:column="22">logger</name></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="41" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="42" pos:column="9">/// Gets or sets the method implementations.</comment>
        <comment type="line" pos:line="43" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="44" pos:column="9">/// &lt;value&gt;</comment>
        <comment type="line" pos:line="45" pos:column="9">/// The method implementations.</comment>
        <comment type="line" pos:line="46" pos:column="9">/// &lt;/value&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="47" pos:column="9">internal</specifier> <name><name pos:line="47" pos:column="18">IEnumerable</name><argument_list pos:line="47" pos:column="29">&lt;<argument><name pos:line="47" pos:column="30">IAlternateMethod</name></argument>&gt;</argument_list></name></type> <name pos:line="47" pos:column="48">MethodImplementations</name>
        <block pos:line="48" pos:column="9">{
            <function><name pos:line="49" pos:column="13">get</name>
            <block pos:line="50" pos:column="13">{
                <return pos:line="51" pos:column="17">return <expr><name pos:line="51" pos:column="24">methodImplementations</name></expr>;</return>
            }</block></function>

            <function><name pos:line="54" pos:column="13">set</name>
            <block pos:line="55" pos:column="13">{
                <expr_stmt><expr><name pos:line="56" pos:column="17">methodImplementations</name> <op:operator pos:line="56" pos:column="39">=</op:operator> <name pos:line="56" pos:column="41">value</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="57" pos:column="17">methodSet</name> <op:operator pos:line="57" pos:column="27">=</op:operator> <call><name><name pos:line="57" pos:column="29">value</name><op:operator pos:line="57" pos:column="34">.</op:operator><name pos:line="57" pos:column="35">Select</name></name><argument_list pos:line="57" pos:column="41">(<argument><expr><lambda><name pos:line="57" pos:column="42">m</name> <op:operator pos:line="57" pos:column="44">=&gt;</op:operator> <name><name pos:line="57" pos:column="47">m</name><op:operator pos:line="57" pos:column="48">.</op:operator><name pos:line="57" pos:column="49">MethodToImplement</name></name></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="61" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="62" pos:column="9">/// Gets or sets the logger.</comment>
        <comment type="line" pos:line="63" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="64" pos:column="9">/// &lt;value&gt;</comment>
        <comment type="line" pos:line="65" pos:column="9">/// The logger.</comment>
        <comment type="line" pos:line="66" pos:column="9">/// &lt;/value&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="67" pos:column="9">internal</specifier> <name pos:line="67" pos:column="18">ILogger</name></type> <name pos:line="67" pos:column="26">Logger</name> <block pos:line="67" pos:column="33">{ <function_decl><name pos:line="67" pos:column="35">get</name>;</function_decl> <function_decl><name pos:line="67" pos:column="40">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="69" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="70" pos:column="9">/// Determines whether the specified &lt;see cref="System.Object" /&gt; is equal to this instance.</comment>
        <comment type="line" pos:line="71" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="72" pos:column="9">/// &lt;param name="obj"&gt;The &lt;see cref="System.Object" /&gt; to compare with this instance.&lt;/param&gt;</comment>
        <comment type="line" pos:line="73" pos:column="9">/// &lt;returns&gt;</comment>
        <comment type="line" pos:line="74" pos:column="9">///   &lt;c&gt;true&lt;/c&gt; if the specified &lt;see cref="System.Object" /&gt; is equal to this instance; otherwise, &lt;c&gt;false&lt;/c&gt;.</comment>
        <comment type="line" pos:line="75" pos:column="9">/// &lt;/returns&gt;</comment>
        <function><type><specifier pos:line="76" pos:column="9">public</specifier> <specifier pos:line="76" pos:column="16">override</specifier> <name pos:line="76" pos:column="25">bool</name></type> <name pos:line="76" pos:column="30">Equals</name><parameter_list pos:line="76" pos:column="36">(<param><decl><type><name pos:line="76" pos:column="37">object</name></type> <name pos:line="76" pos:column="44">obj</name></decl></param>)</parameter_list>
        <block pos:line="77" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="78" pos:column="13">var</name></type> <name pos:line="78" pos:column="17">input</name> <init pos:line="78" pos:column="23">= <expr><name pos:line="78" pos:column="25">obj</name> <op:operator pos:line="78" pos:column="29">as</op:operator> <name><name pos:line="78" pos:column="32">AlternateTypeGenerationHook</name><argument_list pos:line="78" pos:column="59">&lt;<argument><name pos:line="78" pos:column="60">T</name></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

            <if pos:line="80" pos:column="13">if <condition pos:line="80" pos:column="16">(<expr><name pos:line="80" pos:column="17">input</name> <op:operator pos:line="80" pos:column="23">==</op:operator> <name pos:line="80" pos:column="26">null</name></expr>)</condition><then pos:line="80" pos:column="31">
            <block pos:line="81" pos:column="13">{
                <return pos:line="82" pos:column="17">return <expr><lit:literal type="boolean" pos:line="82" pos:column="24">false</lit:literal></expr>;</return>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="85" pos:column="13">var</name></type> <name pos:line="85" pos:column="17">result</name> <init pos:line="85" pos:column="24">= <expr><call><name><name pos:line="85" pos:column="26">methodSet</name><op:operator pos:line="85" pos:column="35">.</op:operator><name pos:line="85" pos:column="36">SequenceEqual</name></name><argument_list pos:line="85" pos:column="49">(<argument><expr><call><name><name pos:line="85" pos:column="50">input</name><op:operator pos:line="85" pos:column="55">.</op:operator><name pos:line="85" pos:column="56">MethodImplementations</name><op:operator pos:line="85" pos:column="77">.</op:operator><name pos:line="85" pos:column="78">Select</name></name><argument_list pos:line="85" pos:column="84">(<argument><expr><lambda><name pos:line="85" pos:column="85">m</name> <op:operator pos:line="85" pos:column="87">=&gt;</op:operator> <name><name pos:line="85" pos:column="90">m</name><op:operator pos:line="85" pos:column="91">.</op:operator><name pos:line="85" pos:column="92">MethodToImplement</name></name></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <return pos:line="87" pos:column="13">return <expr><name pos:line="87" pos:column="20">result</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="90" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="91" pos:column="9">/// Returns a hash code for this instance.</comment>
        <comment type="line" pos:line="92" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="93" pos:column="9">/// &lt;returns&gt;</comment>
        <comment type="line" pos:line="94" pos:column="9">/// A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. </comment>
        <comment type="line" pos:line="95" pos:column="9">/// &lt;/returns&gt;</comment>
        <function><type><specifier pos:line="96" pos:column="9">public</specifier> <specifier pos:line="96" pos:column="16">override</specifier> <name pos:line="96" pos:column="25">int</name></type> <name pos:line="96" pos:column="29">GetHashCode</name><parameter_list pos:line="96" pos:column="40">()</parameter_list>
        <block pos:line="97" pos:column="9">{
            <comment type="line" pos:line="98" pos:column="13">// Overflow is fine, just wrap</comment>
            <unchecked pos:line="99" pos:column="13">unchecked 
            <block pos:line="100" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="101" pos:column="17">int</name></type> <name pos:line="101" pos:column="21">hash</name> <init pos:line="101" pos:column="26">= <expr><lit:literal type="number" pos:line="101" pos:column="28">17</lit:literal></expr></init></decl>;</decl_stmt>

                <foreach pos:line="103" pos:column="17">foreach (<init><decl><type><name pos:line="103" pos:column="26">var</name></type> <name pos:line="103" pos:column="30">implementation</name> <range pos:line="103" pos:column="45">in <expr><name pos:line="103" pos:column="48">MethodImplementations</name></expr></range></decl></init>)
                <block pos:line="104" pos:column="17">{
                    <expr_stmt><expr><name pos:line="105" pos:column="21">hash</name> <op:operator pos:line="105" pos:column="26">=</op:operator> <op:operator pos:line="105" pos:column="28">(</op:operator><name pos:line="105" pos:column="29">hash</name> <op:operator pos:line="105" pos:column="34">*</op:operator> <lit:literal type="number" pos:line="105" pos:column="36">23</lit:literal><op:operator pos:line="105" pos:column="38">)</op:operator> <op:operator pos:line="105" pos:column="40">+</op:operator> <call><name><name pos:line="105" pos:column="42">implementation</name><op:operator pos:line="105" pos:column="56">.</op:operator><name pos:line="105" pos:column="57">GetType</name></name><argument_list pos:line="105" pos:column="64">()</argument_list></call><op:operator pos:line="105" pos:column="66">.</op:operator><call><name pos:line="105" pos:column="67">GetHashCode</name><argument_list pos:line="105" pos:column="78">()</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>

                <return pos:line="108" pos:column="17">return <expr><name pos:line="108" pos:column="24">hash</name></expr>;</return>
            }</block></unchecked>
        }</block></function>

        <comment type="line" pos:line="112" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="113" pos:column="9">/// Invoked by the generation process to notify that the whole process has completed.</comment>
        <comment type="line" pos:line="114" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="115" pos:column="9">public</specifier> <name pos:line="115" pos:column="16">void</name></type> <name pos:line="115" pos:column="21">MethodsInspected</name><parameter_list pos:line="115" pos:column="37">()</parameter_list>
        <block pos:line="116" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="117" pos:column="13">Logger</name><op:operator pos:line="117" pos:column="19">.</op:operator><name pos:line="117" pos:column="20">Debug</name></name><argument_list pos:line="117" pos:column="25">(<argument><expr><name><name pos:line="117" pos:column="26">Resources</name><op:operator pos:line="117" pos:column="35">.</op:operator><name pos:line="117" pos:column="36">AlternateTypeGenerationHookMethodsInspected</name></name></expr></argument>, <argument><expr><call><name pos:line="117" pos:column="81">typeof</name><argument_list pos:line="117" pos:column="87">(<argument><expr><name pos:line="117" pos:column="88">T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="120" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="121" pos:column="9">/// Invoked by the generation process to notify that a member was not marked as virtual.</comment>
        <comment type="line" pos:line="122" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="123" pos:column="9">/// &lt;param name="type"&gt;The type which declares the non-virtual member.&lt;/param&gt;</comment>
        <comment type="line" pos:line="124" pos:column="9">/// &lt;param name="memberInfo"&gt;The non-virtual member.&lt;/param&gt;</comment>
        <comment type="line" pos:line="125" pos:column="9">/// &lt;remarks&gt;</comment>
        <comment type="line" pos:line="126" pos:column="9">/// This method gives an opportunity to inspect any member which is not proxyable of a type that has</comment>
        <comment type="line" pos:line="127" pos:column="9">/// been requested to be proxied, and if appropriate - throw an exception to notify the caller.</comment>
        <comment type="line" pos:line="128" pos:column="9">/// &lt;/remarks&gt;</comment>
        <function><type><specifier pos:line="129" pos:column="9">public</specifier> <name pos:line="129" pos:column="16">void</name></type> <name pos:line="129" pos:column="21">NonProxyableMemberNotification</name><parameter_list pos:line="129" pos:column="51">(<param><decl><type><name pos:line="129" pos:column="52">Type</name></type> <name pos:line="129" pos:column="57">type</name></decl></param>, <param><decl><type><name pos:line="129" pos:column="63">MemberInfo</name></type> <name pos:line="129" pos:column="74">memberInfo</name></decl></param>)</parameter_list>
        <block pos:line="130" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="131" pos:column="13">Logger</name><op:operator pos:line="131" pos:column="19">.</op:operator><name pos:line="131" pos:column="20">Debug</name></name><argument_list pos:line="131" pos:column="25">(<argument><expr><name><name pos:line="131" pos:column="26">Resources</name><op:operator pos:line="131" pos:column="35">.</op:operator><name pos:line="131" pos:column="36">AlternateTypeGenerationHookNonProxyableMemberNotification</name></name></expr></argument>, <argument><expr><name><name pos:line="131" pos:column="95">memberInfo</name><op:operator pos:line="131" pos:column="105">.</op:operator><name pos:line="131" pos:column="106">Name</name></name></expr></argument>, <argument><expr><name pos:line="131" pos:column="112">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="134" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="135" pos:column="9">/// Invoked by the generation process to determine if the specified method should be proxied.</comment>
        <comment type="line" pos:line="136" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="137" pos:column="9">/// &lt;param name="type"&gt;The type which declares the given method.&lt;/param&gt;</comment>
        <comment type="line" pos:line="138" pos:column="9">/// &lt;param name="methodInfo"&gt;The method to inspect.&lt;/param&gt;</comment>
        <comment type="line" pos:line="139" pos:column="9">/// &lt;returns&gt;</comment>
        <comment type="line" pos:line="140" pos:column="9">/// True if the given method should be proxied; false otherwise.</comment>
        <comment type="line" pos:line="141" pos:column="9">/// &lt;/returns&gt;</comment>
        <function><type><specifier pos:line="142" pos:column="9">public</specifier> <name pos:line="142" pos:column="16">bool</name></type> <name pos:line="142" pos:column="21">ShouldInterceptMethod</name><parameter_list pos:line="142" pos:column="42">(<param><decl><type><name pos:line="142" pos:column="43">Type</name></type> <name pos:line="142" pos:column="48">type</name></decl></param>, <param><decl><type><name pos:line="142" pos:column="54">MethodInfo</name></type> <name pos:line="142" pos:column="65">methodInfo</name></decl></param>)</parameter_list>
        <block pos:line="143" pos:column="9">{
            <return pos:line="144" pos:column="13">return <expr><call><name><name pos:line="144" pos:column="20">MethodImplementations</name><op:operator pos:line="144" pos:column="41">.</op:operator><name pos:line="144" pos:column="42">Any</name></name><argument_list pos:line="144" pos:column="45">(<argument><expr><lambda><name pos:line="144" pos:column="46">i</name> <op:operator pos:line="144" pos:column="48">=&gt;</op:operator> <name><name pos:line="144" pos:column="51">i</name><op:operator pos:line="144" pos:column="52">.</op:operator><name pos:line="144" pos:column="53">MethodToImplement</name></name> <op:operator pos:line="144" pos:column="71">==</op:operator> <name pos:line="144" pos:column="74">methodInfo</name></lambda></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
