<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Core\Extensibility\IDataStore.cs" pos:tabs="8"><namespace pos:line="1" pos:column="1">namespace <name><name pos:line="1" pos:column="11">Glimpse</name><op:operator pos:line="1" pos:column="18">.</op:operator><name pos:line="1" pos:column="19">Core</name><op:operator pos:line="1" pos:column="23">.</op:operator><name pos:line="1" pos:column="24">Extensibility</name></name>
<block pos:line="2" pos:column="1">{
    <comment type="line" pos:line="3" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="4" pos:column="5">/// Definition for a data store that can be implemented as a storage strategy.</comment>
    <comment type="line" pos:line="5" pos:column="5">/// This could be used to store request data in memory, to disk or any other </comment>
    <comment type="line" pos:line="6" pos:column="5">/// source.</comment>
    <comment type="line" pos:line="7" pos:column="5">/// &lt;/summary&gt;</comment>
    <comment type="line" pos:line="8" pos:column="5">/// &lt;remarks&gt;</comment>
    <comment type="line" pos:line="9" pos:column="5">/// In the case of storing requests to disk, it would mean that the system</comment>
    <comment type="line" pos:line="10" pos:column="5">/// would still work in a multi server environment (i.e. a web farm).</comment>
    <comment type="line" pos:line="11" pos:column="5">/// &lt;/remarks&gt;</comment>
    <class type="interface"><specifier pos:line="12" pos:column="5">public</specifier> interface <name pos:line="12" pos:column="22">IDataStore</name>
    <block pos:line="13" pos:column="5">{
        <comment type="line" pos:line="14" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="15" pos:column="9">/// Gets the specified key.</comment>
        <comment type="line" pos:line="16" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="17" pos:column="9">/// &lt;param name="key"&gt;The key.&lt;/param&gt;</comment>
        <comment type="line" pos:line="18" pos:column="9">/// &lt;returns&gt;The value stored at given key.&lt;/returns&gt;</comment>
        <function_decl><type><name pos:line="19" pos:column="9">object</name></type> <name pos:line="19" pos:column="16">Get</name><parameter_list pos:line="19" pos:column="19">(<param><decl><type><name pos:line="19" pos:column="20">string</name></type> <name pos:line="19" pos:column="27">key</name></decl></param>)</parameter_list>;</function_decl>

        <comment type="line" pos:line="21" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="22" pos:column="9">/// Sets the specified key.</comment>
        <comment type="line" pos:line="23" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="24" pos:column="9">/// &lt;param name="key"&gt;The key.&lt;/param&gt;</comment>
        <comment type="line" pos:line="25" pos:column="9">/// &lt;param name="value"&gt;The value.&lt;/param&gt;</comment>
        <function_decl><type><name pos:line="26" pos:column="9">void</name></type> <name pos:line="26" pos:column="14">Set</name><parameter_list pos:line="26" pos:column="17">(<param><decl><type><name pos:line="26" pos:column="18">string</name></type> <name pos:line="26" pos:column="25">key</name></decl></param>, <param><decl><type><name pos:line="26" pos:column="30">object</name></type> <name pos:line="26" pos:column="37">value</name></decl></param>)</parameter_list>;</function_decl>

        <comment type="line" pos:line="28" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="29" pos:column="9">/// Determines whether the data store contains a definition for the specified key.</comment>
        <comment type="line" pos:line="30" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="31" pos:column="9">/// &lt;param name="key"&gt;The key.&lt;/param&gt;</comment>
        <comment type="line" pos:line="32" pos:column="9">/// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if it contains the specified key; otherwise, &lt;c&gt;false&lt;/c&gt;.&lt;/returns&gt;</comment>
        <function_decl><type><name pos:line="33" pos:column="9">bool</name></type> <name pos:line="33" pos:column="14">Contains</name><parameter_list pos:line="33" pos:column="22">(<param><decl><type><name pos:line="33" pos:column="23">string</name></type> <name pos:line="33" pos:column="30">key</name></decl></param>)</parameter_list>;</function_decl>
    }</block></class>
}</block></namespace>
</unit>
