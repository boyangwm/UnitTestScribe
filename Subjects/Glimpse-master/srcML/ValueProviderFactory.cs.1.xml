<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Mvc\AlternateType\ValueProviderFactory.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Web</name><op:operator pos:line="3" pos:column="17">.</op:operator><name pos:line="3" pos:column="18">Mvc</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Core</name><op:operator pos:line="4" pos:column="19">.</op:operator><name pos:line="4" pos:column="20">Extensibility</name></name>;</using>

<cpp:if pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">if</cpp:directive> <expr><name pos:line="6" pos:column="5">MVC2</name></expr></cpp:if>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Glimpse</name><op:operator pos:line="7" pos:column="14">.</op:operator><name pos:line="7" pos:column="15">Mvc2</name><op:operator pos:line="7" pos:column="19">.</op:operator><name pos:line="7" pos:column="20">Backport</name></name>;</using>
<cpp:endif pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">endif</cpp:directive></cpp:endif>
<cpp:if pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">if</cpp:directive> <expr><name pos:line="9" pos:column="5">MVC3</name></expr></cpp:if>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">Glimpse</name><op:operator pos:line="10" pos:column="14">.</op:operator><name pos:line="10" pos:column="15">Mvc3</name><op:operator pos:line="10" pos:column="19">.</op:operator><name pos:line="10" pos:column="20">Backport</name></name>;</using>
<cpp:endif pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">endif</cpp:directive></cpp:endif>

<namespace pos:line="13" pos:column="1">namespace <name><name pos:line="13" pos:column="11">Glimpse</name><op:operator pos:line="13" pos:column="18">.</op:operator><name pos:line="13" pos:column="19">Mvc</name><op:operator pos:line="13" pos:column="22">.</op:operator><name pos:line="13" pos:column="23">AlternateType</name></name>
<block pos:line="14" pos:column="1">{
    <class><specifier pos:line="15" pos:column="5">public</specifier> class <name pos:line="15" pos:column="18">ValueProviderFactory</name> <super pos:line="15" pos:column="39">: <name><name pos:line="15" pos:column="41">AlternateType</name><argument_list pos:line="15" pos:column="54">&lt;<argument><name><name pos:line="15" pos:column="55">System</name><op:operator pos:line="15" pos:column="61">.</op:operator><name pos:line="15" pos:column="62">Web</name><op:operator pos:line="15" pos:column="65">.</op:operator><name pos:line="15" pos:column="66">Mvc</name><op:operator pos:line="15" pos:column="69">.</op:operator><name pos:line="15" pos:column="70">ValueProviderFactory</name></name></argument>&gt;</argument_list></name></super>
    <block pos:line="16" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="17" pos:column="9">private</specifier> <name><name pos:line="17" pos:column="17">IEnumerable</name><argument_list pos:line="17" pos:column="28">&lt;<argument><name pos:line="17" pos:column="29">IAlternateMethod</name></argument>&gt;</argument_list></name></type> <name pos:line="17" pos:column="47">allMethods</name></decl>;</decl_stmt>

        <constructor><specifier pos:line="19" pos:column="9">public</specifier> <name pos:line="19" pos:column="16">ValueProviderFactory</name><parameter_list pos:line="19" pos:column="36">(<param><decl><type><name pos:line="19" pos:column="37">IProxyFactory</name></type> <name pos:line="19" pos:column="51">proxyFactory</name></decl></param>)</parameter_list> <member_list pos:line="19" pos:column="65">: <call><name pos:line="19" pos:column="67">base</name><argument_list pos:line="19" pos:column="71">(<argument><expr><name pos:line="19" pos:column="72">proxyFactory</name></expr></argument>)</argument_list></call>
        </member_list><block pos:line="20" pos:column="9">{
        }</block></constructor>

        <decl_stmt><decl><type><specifier pos:line="23" pos:column="9">public</specifier> <specifier pos:line="23" pos:column="16">override</specifier> <name><name pos:line="23" pos:column="25">IEnumerable</name><argument_list pos:line="23" pos:column="36">&lt;<argument><name pos:line="23" pos:column="37">IAlternateMethod</name></argument>&gt;</argument_list></name></type> <name pos:line="23" pos:column="55">AllMethods</name>
        <block pos:line="24" pos:column="9">{
            <function><name pos:line="25" pos:column="13">get</name>
            <block pos:line="26" pos:column="13">{
                <return pos:line="27" pos:column="17">return <expr><name pos:line="27" pos:column="24">allMethods</name> <op:operator pos:line="27" pos:column="35">??</op:operator> <op:operator pos:line="27" pos:column="38">(</op:operator><name pos:line="27" pos:column="39">allMethods</name> <op:operator pos:line="27" pos:column="50">=</op:operator> <op:operator pos:line="27" pos:column="52">new</op:operator> <name><name pos:line="27" pos:column="56">List</name><argument_list pos:line="27" pos:column="60">&lt;<argument><name pos:line="27" pos:column="61">IAlternateMethod</name></argument>&gt;</argument_list></name>
                    <block pos:line="28" pos:column="21">{
                        <expr><op:operator pos:line="29" pos:column="25">new</op:operator> <call><name pos:line="29" pos:column="29">GetValueProvider</name><argument_list pos:line="29" pos:column="45">(
                            <argument><expr><op:operator pos:line="30" pos:column="29">new</op:operator> <call><name><name pos:line="30" pos:column="33">ValueProvider</name><argument_list pos:line="30" pos:column="46">&lt;<argument><name pos:line="30" pos:column="47">IValueProvider</name></argument>&gt;</argument_list></name><argument_list pos:line="30" pos:column="62">(<argument><expr><name pos:line="30" pos:column="63">ProxyFactory</name></expr></argument>)</argument_list></call></expr></argument>, 
                            <argument><expr><op:operator pos:line="31" pos:column="29">new</op:operator> <call><name><name pos:line="31" pos:column="33">ValueProvider</name><argument_list pos:line="31" pos:column="46">&lt;<argument><name pos:line="31" pos:column="47">IUnvalidatedValueProvider</name></argument>&gt;</argument_list></name><argument_list pos:line="31" pos:column="73">(<argument><expr><name pos:line="31" pos:column="74">ProxyFactory</name></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><op:operator pos:line="32" pos:column="29">new</op:operator> <call><name><name pos:line="32" pos:column="33">ValueProvider</name><argument_list pos:line="32" pos:column="46">&lt;<argument><name pos:line="32" pos:column="47">IEnumerableValueProvider</name></argument>&gt;</argument_list></name><argument_list pos:line="32" pos:column="72">(<argument><expr><name pos:line="32" pos:column="73">ProxyFactory</name></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><op:operator pos:line="33" pos:column="29">new</op:operator> <call><name><name pos:line="33" pos:column="33">ValueProvider</name><argument_list pos:line="33" pos:column="46">&lt;<argument><name pos:line="33" pos:column="47">IUnvalidatedEnumerableValueProvider</name></argument>&gt;</argument_list></name><argument_list pos:line="33" pos:column="83">(<argument><expr><name pos:line="33" pos:column="84">ProxyFactory</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>
                    }</block>)</expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <class><specifier pos:line="38" pos:column="9">public</specifier> class <name pos:line="38" pos:column="22">GetValueProvider</name> <super pos:line="38" pos:column="39">: <name pos:line="38" pos:column="41">AlternateMethod</name></super>
        <block pos:line="39" pos:column="9">{
            <constructor><specifier pos:line="40" pos:column="13">public</specifier> <name pos:line="40" pos:column="20">GetValueProvider</name><parameter_list pos:line="40" pos:column="36">(
                <param><decl><type><name><name pos:line="41" pos:column="17">ValueProvider</name><argument_list pos:line="41" pos:column="30">&lt;<argument><name pos:line="41" pos:column="31">IValueProvider</name></argument>&gt;</argument_list></name></type> <name pos:line="41" pos:column="47">alternateValidatedValueProvider</name></decl></param>,
                <param><decl><type><name><name pos:line="42" pos:column="17">ValueProvider</name><argument_list pos:line="42" pos:column="30">&lt;<argument><name pos:line="42" pos:column="31">IUnvalidatedValueProvider</name></argument>&gt;</argument_list></name></type> <name pos:line="42" pos:column="58">alternateUnvalidatedValueProvider</name></decl></param>,
                <param><decl><type><name><name pos:line="43" pos:column="17">ValueProvider</name><argument_list pos:line="43" pos:column="30">&lt;<argument><name pos:line="43" pos:column="31">IEnumerableValueProvider</name></argument>&gt;</argument_list></name></type> <name pos:line="43" pos:column="57">alternateValidatedEnumerableValueProvider</name></decl></param>,
                <param><decl><type><name><name pos:line="44" pos:column="17">ValueProvider</name><argument_list pos:line="44" pos:column="30">&lt;<argument><name pos:line="44" pos:column="31">IUnvalidatedEnumerableValueProvider</name></argument>&gt;</argument_list></name></type> <name pos:line="44" pos:column="68">alternateUnvalidatedEnumerableValueProvider</name></decl></param>)</parameter_list>
                <member_list pos:line="45" pos:column="17">: <call><name pos:line="45" pos:column="19">base</name><argument_list pos:line="45" pos:column="23">(<argument><expr><call><name pos:line="45" pos:column="24">typeof</name><argument_list pos:line="45" pos:column="30">(<argument><expr><name><name pos:line="45" pos:column="31">System</name><op:operator pos:line="45" pos:column="37">.</op:operator><name pos:line="45" pos:column="38">Web</name><op:operator pos:line="45" pos:column="41">.</op:operator><name pos:line="45" pos:column="42">Mvc</name><op:operator pos:line="45" pos:column="45">.</op:operator><name pos:line="45" pos:column="46">ValueProviderFactory</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="45" pos:column="69">"GetValueProvider"</lit:literal></expr></argument>)</argument_list></call>
            </member_list><block pos:line="46" pos:column="13">{
                <expr_stmt><expr><name pos:line="47" pos:column="17">AlternateValidatedValueProvider</name> <op:operator pos:line="47" pos:column="49">=</op:operator> <name pos:line="47" pos:column="51">alternateValidatedValueProvider</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="48" pos:column="17">AlternateUnvalidatedValueProvider</name> <op:operator pos:line="48" pos:column="51">=</op:operator> <name pos:line="48" pos:column="53">alternateUnvalidatedValueProvider</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="49" pos:column="17">AlternateValidatedEnumerableValueProvider</name> <op:operator pos:line="49" pos:column="59">=</op:operator> <name pos:line="49" pos:column="61">alternateValidatedEnumerableValueProvider</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="50" pos:column="17">AlternateUnvalidatedEnumerableValueProvider</name> <op:operator pos:line="50" pos:column="61">=</op:operator> <name pos:line="50" pos:column="63">alternateUnvalidatedEnumerableValueProvider</name></expr>;</expr_stmt>
            }</block></constructor>

            <decl_stmt><decl><type><specifier pos:line="53" pos:column="13">private</specifier> <name><name pos:line="53" pos:column="21">ValueProvider</name><argument_list pos:line="53" pos:column="34">&lt;<argument><name pos:line="53" pos:column="35">IUnvalidatedValueProvider</name></argument>&gt;</argument_list></name></type> <name pos:line="53" pos:column="62">AlternateUnvalidatedValueProvider</name> <block pos:line="53" pos:column="96">{ <function_decl><name pos:line="53" pos:column="98">get</name>;</function_decl> <function_decl><name pos:line="53" pos:column="103">set</name>;</function_decl> }</block></decl></decl_stmt>

            <decl_stmt><decl><type><specifier pos:line="55" pos:column="13">private</specifier> <name><name pos:line="55" pos:column="21">ValueProvider</name><argument_list pos:line="55" pos:column="34">&lt;<argument><name pos:line="55" pos:column="35">IValueProvider</name></argument>&gt;</argument_list></name></type> <name pos:line="55" pos:column="51">AlternateValidatedValueProvider</name> <block pos:line="55" pos:column="83">{ <function_decl><name pos:line="55" pos:column="85">get</name>;</function_decl> <function_decl><name pos:line="55" pos:column="90">set</name>;</function_decl> }</block></decl></decl_stmt>

            <decl_stmt><decl><type><specifier pos:line="57" pos:column="13">private</specifier> <name><name pos:line="57" pos:column="21">ValueProvider</name><argument_list pos:line="57" pos:column="34">&lt;<argument><name pos:line="57" pos:column="35">IEnumerableValueProvider</name></argument>&gt;</argument_list></name></type> <name pos:line="57" pos:column="61">AlternateValidatedEnumerableValueProvider</name> <block pos:line="57" pos:column="103">{ <function_decl><name pos:line="57" pos:column="105">get</name>;</function_decl> <function_decl><name pos:line="57" pos:column="110">set</name>;</function_decl> }</block></decl></decl_stmt>

            <decl_stmt><decl><type><specifier pos:line="59" pos:column="13">private</specifier> <name><name pos:line="59" pos:column="21">ValueProvider</name><argument_list pos:line="59" pos:column="34">&lt;<argument><name pos:line="59" pos:column="35">IUnvalidatedEnumerableValueProvider</name></argument>&gt;</argument_list></name></type> <name pos:line="59" pos:column="72">AlternateUnvalidatedEnumerableValueProvider</name> <block pos:line="59" pos:column="116">{ <function_decl><name pos:line="59" pos:column="118">get</name>;</function_decl> <function_decl><name pos:line="59" pos:column="123">set</name>;</function_decl> }</block></decl></decl_stmt>

            <function><type><specifier pos:line="61" pos:column="13">public</specifier> <specifier pos:line="61" pos:column="20">override</specifier> <name pos:line="61" pos:column="29">void</name></type> <name pos:line="61" pos:column="34">PostImplementation</name><parameter_list pos:line="61" pos:column="52">(<param><decl><type><name pos:line="61" pos:column="53">IAlternateMethodContext</name></type> <name pos:line="61" pos:column="77">context</name></decl></param>, <param><decl><type><name pos:line="61" pos:column="86">TimerResult</name></type> <name pos:line="61" pos:column="98">timerResult</name></decl></param>)</parameter_list>
            <block pos:line="62" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="63" pos:column="17">var</name></type> <name pos:line="63" pos:column="21">originalUnvalidatedValueProvider</name> <init pos:line="63" pos:column="54">= <expr><name><name pos:line="63" pos:column="56">context</name><op:operator pos:line="63" pos:column="63">.</op:operator><name pos:line="63" pos:column="64">ReturnValue</name></name> <op:operator pos:line="63" pos:column="76">as</op:operator> <name pos:line="63" pos:column="79">IUnvalidatedValueProvider</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="64" pos:column="17">var</name></type> <name pos:line="64" pos:column="21">originalEnumerableValueProvider</name> <init pos:line="64" pos:column="53">= <expr><name><name pos:line="64" pos:column="55">context</name><op:operator pos:line="64" pos:column="62">.</op:operator><name pos:line="64" pos:column="63">ReturnValue</name></name> <op:operator pos:line="64" pos:column="75">as</op:operator> <name pos:line="64" pos:column="78">IEnumerableValueProvider</name></expr></init></decl>;</decl_stmt>

                <if pos:line="66" pos:column="17">if <condition pos:line="66" pos:column="20">(<expr><name pos:line="66" pos:column="21">originalUnvalidatedValueProvider</name> <op:operator pos:line="66" pos:column="54">!=</op:operator> <name pos:line="66" pos:column="57">null</name> <op:operator pos:line="66" pos:column="62">&amp;&amp;</op:operator> <name pos:line="66" pos:column="65">originalEnumerableValueProvider</name> <op:operator pos:line="66" pos:column="97">!=</op:operator> <name pos:line="66" pos:column="100">null</name></expr>)</condition><then pos:line="66" pos:column="105">
                <block pos:line="67" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="68" pos:column="21">IUnvalidatedEnumerableValueProvider</name></type> <name pos:line="68" pos:column="57">newUnvalidatedEnumerableValueProvider</name></decl>;</decl_stmt>
                    <if pos:line="69" pos:column="21">if <condition pos:line="69" pos:column="24">(<expr><call><name><name pos:line="69" pos:column="25">AlternateUnvalidatedEnumerableValueProvider</name><op:operator pos:line="69" pos:column="68">.</op:operator><name pos:line="69" pos:column="69">TryCreate</name></name><argument_list pos:line="69" pos:column="78">(<argument><expr><op:operator pos:line="69" pos:column="79">new</op:operator> <call><name pos:line="69" pos:column="83">UnvalidatedEnumerableValueProvider</name><argument_list pos:line="69" pos:column="117">(<argument><expr><name><name pos:line="69" pos:column="118">context</name><op:operator pos:line="69" pos:column="125">.</op:operator><name pos:line="69" pos:column="126">ReturnValue</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr pos:line="69" pos:column="140">out <name pos:line="69" pos:column="144">newUnvalidatedEnumerableValueProvider</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="69" pos:column="183">
                    <block pos:line="70" pos:column="21">{
                        <expr_stmt><expr><name><name pos:line="71" pos:column="25">context</name><op:operator pos:line="71" pos:column="32">.</op:operator><name pos:line="71" pos:column="33">ReturnValue</name></name> <op:operator pos:line="71" pos:column="45">=</op:operator> <name pos:line="71" pos:column="47">newUnvalidatedEnumerableValueProvider</name></expr>;</expr_stmt>
                        <return pos:line="72" pos:column="25">return;</return>
                    }</block></then></if>
                }</block></then>
                <else pos:line="75" pos:column="17">else <if pos:line="75" pos:column="22">if <condition pos:line="75" pos:column="25">(<expr><name pos:line="75" pos:column="26">originalUnvalidatedValueProvider</name> <op:operator pos:line="75" pos:column="59">!=</op:operator> <name pos:line="75" pos:column="62">null</name></expr>)</condition><then pos:line="75" pos:column="67">
                <block pos:line="76" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="77" pos:column="21">IUnvalidatedValueProvider</name></type> <name pos:line="77" pos:column="47">newUnvalidatedValueProvider</name></decl>;</decl_stmt>
                    <if pos:line="78" pos:column="21">if <condition pos:line="78" pos:column="24">(<expr><call><name><name pos:line="78" pos:column="25">AlternateUnvalidatedValueProvider</name><op:operator pos:line="78" pos:column="58">.</op:operator><name pos:line="78" pos:column="59">TryCreate</name></name><argument_list pos:line="78" pos:column="68">(<argument><expr><name pos:line="78" pos:column="69">originalUnvalidatedValueProvider</name></expr></argument>, <argument><expr pos:line="78" pos:column="103">out <name pos:line="78" pos:column="107">newUnvalidatedValueProvider</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="78" pos:column="136">
                    <block pos:line="79" pos:column="21">{
                        <expr_stmt><expr><name><name pos:line="80" pos:column="25">context</name><op:operator pos:line="80" pos:column="32">.</op:operator><name pos:line="80" pos:column="33">ReturnValue</name></name> <op:operator pos:line="80" pos:column="45">=</op:operator> <name pos:line="80" pos:column="47">newUnvalidatedValueProvider</name></expr>;</expr_stmt>
                        <return pos:line="81" pos:column="25">return;</return>
                    }</block></then></if>
                }</block></then>
                <else pos:line="84" pos:column="17">else <if pos:line="84" pos:column="22">if <condition pos:line="84" pos:column="25">(<expr><name pos:line="84" pos:column="26">originalEnumerableValueProvider</name> <op:operator pos:line="84" pos:column="58">!=</op:operator> <name pos:line="84" pos:column="61">null</name></expr>)</condition><then pos:line="84" pos:column="66">
                <block pos:line="85" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="86" pos:column="21">IEnumerableValueProvider</name></type> <name pos:line="86" pos:column="46">newEnumerableValueProvider</name></decl>;</decl_stmt>
                    <if pos:line="87" pos:column="21">if <condition pos:line="87" pos:column="24">(<expr><call><name><name pos:line="87" pos:column="25">AlternateValidatedEnumerableValueProvider</name><op:operator pos:line="87" pos:column="66">.</op:operator><name pos:line="87" pos:column="67">TryCreate</name></name><argument_list pos:line="87" pos:column="76">(<argument><expr><name pos:line="87" pos:column="77">originalEnumerableValueProvider</name></expr></argument>, <argument><expr pos:line="87" pos:column="110">out <name pos:line="87" pos:column="114">newEnumerableValueProvider</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="87" pos:column="142">
                    <block pos:line="88" pos:column="21">{
                        <expr_stmt><expr><name><name pos:line="89" pos:column="25">context</name><op:operator pos:line="89" pos:column="32">.</op:operator><name pos:line="89" pos:column="33">ReturnValue</name></name> <op:operator pos:line="89" pos:column="45">=</op:operator> <name pos:line="89" pos:column="47">newEnumerableValueProvider</name></expr>;</expr_stmt>
                        <return pos:line="90" pos:column="25">return;</return>
                    }</block></then></if>
                }</block></then></if></else></if></else></if>

                <decl_stmt><decl><type><name pos:line="94" pos:column="17">var</name></type> <name pos:line="94" pos:column="21">originalValueProvider</name> <init pos:line="94" pos:column="43">= <expr><name><name pos:line="94" pos:column="45">context</name><op:operator pos:line="94" pos:column="52">.</op:operator><name pos:line="94" pos:column="53">ReturnValue</name></name> <op:operator pos:line="94" pos:column="65">as</op:operator> <name pos:line="94" pos:column="68">IValueProvider</name></expr></init></decl>;</decl_stmt>
                <if pos:line="95" pos:column="17">if <condition pos:line="95" pos:column="20">(<expr><name pos:line="95" pos:column="21">originalValueProvider</name> <op:operator pos:line="95" pos:column="43">!=</op:operator> <name pos:line="95" pos:column="46">null</name></expr>)</condition><then pos:line="95" pos:column="51">
                <block pos:line="96" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="97" pos:column="21">IValueProvider</name></type> <name pos:line="97" pos:column="36">newValueProvider</name></decl>;</decl_stmt>
                    <if pos:line="98" pos:column="21">if <condition pos:line="98" pos:column="24">(<expr><call><name><name pos:line="98" pos:column="25">AlternateValidatedValueProvider</name><op:operator pos:line="98" pos:column="56">.</op:operator><name pos:line="98" pos:column="57">TryCreate</name></name><argument_list pos:line="98" pos:column="66">(<argument><expr><name pos:line="98" pos:column="67">originalValueProvider</name></expr></argument>, <argument><expr pos:line="98" pos:column="90">out <name pos:line="98" pos:column="94">newValueProvider</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="98" pos:column="112">
                    <block pos:line="99" pos:column="21">{
                        <expr_stmt><expr><name><name pos:line="100" pos:column="25">context</name><op:operator pos:line="100" pos:column="32">.</op:operator><name pos:line="100" pos:column="33">ReturnValue</name></name> <op:operator pos:line="100" pos:column="45">=</op:operator> <name pos:line="100" pos:column="47">newValueProvider</name></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>
            }</block></function>
        }</block></class>

        <class type="interface"><specifier pos:line="106" pos:column="9">public</specifier> interface <name pos:line="106" pos:column="26">IUnvalidatedEnumerableValueProvider</name> <super pos:line="106" pos:column="62">: <name pos:line="106" pos:column="64">IEnumerableValueProvider</name>, <name pos:line="106" pos:column="90">IUnvalidatedValueProvider</name></super>
        <block pos:line="107" pos:column="9">{
        }</block></class>

        <class><specifier pos:line="110" pos:column="9">private</specifier> class <name pos:line="110" pos:column="23">UnvalidatedEnumerableValueProvider</name> <super pos:line="110" pos:column="58">: <name pos:line="110" pos:column="60">IUnvalidatedEnumerableValueProvider</name></super>
        <block pos:line="111" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="112" pos:column="13">private</specifier> <name pos:line="112" pos:column="21">IUnvalidatedValueProvider</name></type> <name pos:line="112" pos:column="47">ValueProviderAsUnvalidatedValueProvider</name> <block pos:line="112" pos:column="87">{ <function_decl><name pos:line="112" pos:column="89">get</name>;</function_decl> <function_decl><name pos:line="112" pos:column="94">set</name>;</function_decl> }</block></decl></decl_stmt>

            <decl_stmt><decl><type><specifier pos:line="114" pos:column="13">private</specifier> <name pos:line="114" pos:column="21">IEnumerableValueProvider</name></type> <name pos:line="114" pos:column="46">ValueProviderAsEnumerableValueProvider</name> <block pos:line="114" pos:column="85">{ <function_decl><name pos:line="114" pos:column="87">get</name>;</function_decl> <function_decl><name pos:line="114" pos:column="92">set</name>;</function_decl> }</block></decl></decl_stmt>

            <constructor><specifier pos:line="116" pos:column="13">public</specifier> <name pos:line="116" pos:column="20">UnvalidatedEnumerableValueProvider</name><parameter_list pos:line="116" pos:column="54">(<param><decl><type><name pos:line="116" pos:column="55">object</name></type> <name pos:line="116" pos:column="62">valueProvider</name></decl></param>)</parameter_list>
            <block pos:line="117" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="118" pos:column="17">this</name><op:operator pos:line="118" pos:column="21">.</op:operator><name pos:line="118" pos:column="22">ValueProviderAsUnvalidatedValueProvider</name></name> <op:operator pos:line="118" pos:column="62">=</op:operator> <name pos:line="118" pos:column="64">valueProvider</name> <op:operator pos:line="118" pos:column="78">as</op:operator> <name pos:line="118" pos:column="81">IUnvalidatedValueProvider</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="119" pos:column="17">this</name><op:operator pos:line="119" pos:column="21">.</op:operator><name pos:line="119" pos:column="22">ValueProviderAsEnumerableValueProvider</name></name> <op:operator pos:line="119" pos:column="61">=</op:operator> <name pos:line="119" pos:column="63">valueProvider</name> <op:operator pos:line="119" pos:column="77">as</op:operator> <name pos:line="119" pos:column="80">IEnumerableValueProvider</name></expr>;</expr_stmt>

                <if pos:line="121" pos:column="17">if <condition pos:line="121" pos:column="20">(<expr><name><name pos:line="121" pos:column="21">this</name><op:operator pos:line="121" pos:column="25">.</op:operator><name pos:line="121" pos:column="26">ValueProviderAsUnvalidatedValueProvider</name></name> <op:operator pos:line="121" pos:column="66">==</op:operator> <name pos:line="121" pos:column="69">null</name></expr>)</condition><then pos:line="121" pos:column="74">
                <block pos:line="122" pos:column="17">{
                    <throw pos:line="123" pos:column="21">throw <expr><op:operator pos:line="123" pos:column="27">new</op:operator> <call><name pos:line="123" pos:column="31">ArgumentException</name><argument_list pos:line="123" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="123" pos:column="49">"The valueProvider must be a '"</lit:literal> <op:operator pos:line="123" pos:column="81">+</op:operator> <call><name pos:line="123" pos:column="83">typeof</name><argument_list pos:line="123" pos:column="89">(<argument><expr><name pos:line="123" pos:column="90">IUnvalidatedValueProvider</name></expr></argument>)</argument_list></call><op:operator pos:line="123" pos:column="116">.</op:operator><name pos:line="123" pos:column="117">FullName</name> <op:operator pos:line="123" pos:column="126">+</op:operator> <lit:literal type="string" pos:line="123" pos:column="128">"'."</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>

                <if pos:line="126" pos:column="17">if <condition pos:line="126" pos:column="20">(<expr><name><name pos:line="126" pos:column="21">this</name><op:operator pos:line="126" pos:column="25">.</op:operator><name pos:line="126" pos:column="26">ValueProviderAsEnumerableValueProvider</name></name> <op:operator pos:line="126" pos:column="65">==</op:operator> <name pos:line="126" pos:column="68">null</name></expr>)</condition><then pos:line="126" pos:column="73">
                <block pos:line="127" pos:column="17">{
                    <throw pos:line="128" pos:column="21">throw <expr><op:operator pos:line="128" pos:column="27">new</op:operator> <call><name pos:line="128" pos:column="31">ArgumentException</name><argument_list pos:line="128" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="128" pos:column="49">"The valueProvider must be a '"</lit:literal> <op:operator pos:line="128" pos:column="81">+</op:operator> <call><name pos:line="128" pos:column="83">typeof</name><argument_list pos:line="128" pos:column="89">(<argument><expr><name pos:line="128" pos:column="90">IEnumerableValueProvider</name></expr></argument>)</argument_list></call><op:operator pos:line="128" pos:column="115">.</op:operator><name pos:line="128" pos:column="116">FullName</name> <op:operator pos:line="128" pos:column="125">+</op:operator> <lit:literal type="string" pos:line="128" pos:column="127">"'."</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
            }</block></constructor>

            <function><type><specifier pos:line="132" pos:column="13">public</specifier> <name pos:line="132" pos:column="20">bool</name></type> <name pos:line="132" pos:column="25">ContainsPrefix</name><parameter_list pos:line="132" pos:column="39">(<param><decl><type><name pos:line="132" pos:column="40">string</name></type> <name pos:line="132" pos:column="47">prefix</name></decl></param>)</parameter_list>
            <block pos:line="133" pos:column="13">{
                <return pos:line="134" pos:column="17">return <expr><call><name><name pos:line="134" pos:column="24">this</name><op:operator pos:line="134" pos:column="28">.</op:operator><name pos:line="134" pos:column="29">ValueProviderAsUnvalidatedValueProvider</name><op:operator pos:line="134" pos:column="68">.</op:operator><name pos:line="134" pos:column="69">ContainsPrefix</name></name><argument_list pos:line="134" pos:column="83">(<argument><expr><name pos:line="134" pos:column="84">prefix</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>

            <function><type><specifier pos:line="137" pos:column="13">public</specifier> <name pos:line="137" pos:column="20">ValueProviderResult</name></type> <name pos:line="137" pos:column="40">GetValue</name><parameter_list pos:line="137" pos:column="48">(<param><decl><type><name pos:line="137" pos:column="49">string</name></type> <name pos:line="137" pos:column="56">key</name></decl></param>)</parameter_list>
            <block pos:line="138" pos:column="13">{
                <return pos:line="139" pos:column="17">return <expr><call><name><name pos:line="139" pos:column="24">this</name><op:operator pos:line="139" pos:column="28">.</op:operator><name pos:line="139" pos:column="29">ValueProviderAsUnvalidatedValueProvider</name><op:operator pos:line="139" pos:column="68">.</op:operator><name pos:line="139" pos:column="69">GetValue</name></name><argument_list pos:line="139" pos:column="77">(<argument><expr><name pos:line="139" pos:column="78">key</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>

            <function><type><specifier pos:line="142" pos:column="13">public</specifier> <name pos:line="142" pos:column="20">ValueProviderResult</name></type> <name pos:line="142" pos:column="40">GetValue</name><parameter_list pos:line="142" pos:column="48">(<param><decl><type><name pos:line="142" pos:column="49">string</name></type> <name pos:line="142" pos:column="56">key</name></decl></param>, <param><decl><type><name pos:line="142" pos:column="61">bool</name></type> <name pos:line="142" pos:column="66">skipValidation</name></decl></param>)</parameter_list>
            <block pos:line="143" pos:column="13">{
                <return pos:line="144" pos:column="17">return <expr><call><name><name pos:line="144" pos:column="24">this</name><op:operator pos:line="144" pos:column="28">.</op:operator><name pos:line="144" pos:column="29">ValueProviderAsUnvalidatedValueProvider</name><op:operator pos:line="144" pos:column="68">.</op:operator><name pos:line="144" pos:column="69">GetValue</name></name><argument_list pos:line="144" pos:column="77">(<argument><expr><name pos:line="144" pos:column="78">key</name></expr></argument>, <argument><expr><name pos:line="144" pos:column="83">skipValidation</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>

            <function><type><specifier pos:line="147" pos:column="13">public</specifier> <name><name pos:line="147" pos:column="20">IDictionary</name><argument_list pos:line="147" pos:column="31">&lt;<argument><name pos:line="147" pos:column="32">string</name></argument>, <argument><name pos:line="147" pos:column="40">string</name></argument>&gt;</argument_list></name></type> <name pos:line="147" pos:column="48">GetKeysFromPrefix</name><parameter_list pos:line="147" pos:column="65">(<param><decl><type><name pos:line="147" pos:column="66">string</name></type> <name pos:line="147" pos:column="73">prefix</name></decl></param>)</parameter_list>
            <block pos:line="148" pos:column="13">{
                <return pos:line="149" pos:column="17">return <expr><call><name><name pos:line="149" pos:column="24">this</name><op:operator pos:line="149" pos:column="28">.</op:operator><name pos:line="149" pos:column="29">ValueProviderAsEnumerableValueProvider</name><op:operator pos:line="149" pos:column="67">.</op:operator><name pos:line="149" pos:column="68">GetKeysFromPrefix</name></name><argument_list pos:line="149" pos:column="85">(<argument><expr><name pos:line="149" pos:column="86">prefix</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class>
    }</block></class>
}</block></namespace></unit>
