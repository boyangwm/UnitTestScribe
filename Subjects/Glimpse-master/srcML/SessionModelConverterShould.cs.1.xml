<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.AspNet\SerializationConverter\SessionModelConverterShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Runtime</name><op:operator pos:line="4" pos:column="21">.</op:operator><name pos:line="4" pos:column="22">Serialization</name></name>;</using>

<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Glimpse</name><op:operator pos:line="6" pos:column="14">.</op:operator><name pos:line="6" pos:column="15">AspNet</name><op:operator pos:line="6" pos:column="21">.</op:operator><name pos:line="6" pos:column="22">Model</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Glimpse</name><op:operator pos:line="7" pos:column="14">.</op:operator><name pos:line="7" pos:column="15">AspNet</name><op:operator pos:line="7" pos:column="21">.</op:operator><name pos:line="7" pos:column="22">SerializationConverter</name></name>;</using>

<using pos:line="9" pos:column="1">using <name pos:line="9" pos:column="7">Xunit</name>;</using>

<namespace pos:line="11" pos:column="1">namespace <name><name pos:line="11" pos:column="11">Glimpse</name><op:operator pos:line="11" pos:column="18">.</op:operator><name pos:line="11" pos:column="19">Test</name><op:operator pos:line="11" pos:column="23">.</op:operator><name pos:line="11" pos:column="24">AspNet</name><op:operator pos:line="11" pos:column="30">.</op:operator><name pos:line="11" pos:column="31">SerializationConverter</name></name>
<block pos:line="12" pos:column="1">{
    <class><specifier pos:line="13" pos:column="5">public</specifier> class <name pos:line="13" pos:column="18">SessionModelConverterShould</name>
    <block pos:line="14" pos:column="5">{
        <function><type><attribute pos:line="15" pos:column="9">[<expr><name pos:line="15" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="16" pos:column="9">public</specifier> <name pos:line="16" pos:column="16">void</name></type> <name pos:line="16" pos:column="21">ConvertItemsWithNullType</name><parameter_list pos:line="16" pos:column="45">()</parameter_list>
        <block pos:line="17" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="18" pos:column="13">List</name><argument_list pos:line="18" pos:column="17">&lt;<argument><name pos:line="18" pos:column="18">SessionModel</name></argument>&gt;</argument_list></name></type> <name pos:line="18" pos:column="32">sessionModels</name> <init pos:line="18" pos:column="46">= <expr><op:operator pos:line="18" pos:column="48">new</op:operator> <name><name pos:line="18" pos:column="52">List</name><argument_list pos:line="18" pos:column="56">&lt;<argument><name pos:line="18" pos:column="57">SessionModel</name></argument>&gt;</argument_list></name>
                <block pos:line="19" pos:column="17">{
                    <expr><op:operator pos:line="20" pos:column="21">new</op:operator> <name pos:line="20" pos:column="25">SessionModel</name>
                        <block pos:line="21" pos:column="25">{
                            <expr><name pos:line="22" pos:column="29">Key</name> <op:operator pos:line="22" pos:column="33">=</op:operator> <lit:literal type="string" pos:line="22" pos:column="35">"Key1"</lit:literal></expr>,
                            <expr><name pos:line="23" pos:column="29">Value</name> <op:operator pos:line="23" pos:column="35">=</op:operator> <lit:literal type="string" pos:line="23" pos:column="37">"Test Value"</lit:literal></expr>
                        }</block></expr>
                }</block></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="27" pos:column="13">object</name></type> <name pos:line="27" pos:column="20">rows</name> <init pos:line="27" pos:column="25">= <expr><op:operator pos:line="27" pos:column="27">new</op:operator> <call><name pos:line="27" pos:column="31">SessionModelConverter</name><argument_list pos:line="27" pos:column="52">()</argument_list></call><op:operator pos:line="27" pos:column="54">.</op:operator><call><name pos:line="27" pos:column="55">Convert</name><argument_list pos:line="27" pos:column="62">(<argument><expr><name pos:line="27" pos:column="63">sessionModels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="28" pos:column="13">List</name><argument_list pos:line="28" pos:column="17">&lt;<argument><name pos:line="28" pos:column="18">object</name></argument>&gt;</argument_list></name></type> <name pos:line="28" pos:column="26">columns</name> <init pos:line="28" pos:column="34">= <expr><call><name pos:line="28" pos:column="36">GetFirstValueRowFromConvertedSessionModel</name><argument_list pos:line="28" pos:column="77">(<argument><expr><name pos:line="28" pos:column="78">rows</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="30" pos:column="13">Assert</name><op:operator pos:line="30" pos:column="19">.</op:operator><name pos:line="30" pos:column="20">Equal</name></name><argument_list pos:line="30" pos:column="25">(<argument><expr><name><name pos:line="30" pos:column="26">columns</name><index pos:line="30" pos:column="33">[<expr><lit:literal type="number" pos:line="30" pos:column="34">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="30" pos:column="38">"Key1"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="31" pos:column="13">Assert</name><op:operator pos:line="31" pos:column="19">.</op:operator><name pos:line="31" pos:column="20">Equal</name></name><argument_list pos:line="31" pos:column="25">(<argument><expr><name><name pos:line="31" pos:column="26">columns</name><index pos:line="31" pos:column="33">[<expr><lit:literal type="number" pos:line="31" pos:column="34">1</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="31" pos:column="38">"Test Value"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="32" pos:column="13">Assert</name><op:operator pos:line="32" pos:column="19">.</op:operator><name pos:line="32" pos:column="20">Equal</name></name><argument_list pos:line="32" pos:column="25">(<argument><expr><name><name pos:line="32" pos:column="26">columns</name><index pos:line="32" pos:column="33">[<expr><lit:literal type="number" pos:line="32" pos:column="34">2</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="38">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="35" pos:column="9">[<expr><name pos:line="35" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="36" pos:column="9">public</specifier> <name pos:line="36" pos:column="16">void</name></type> <name pos:line="36" pos:column="21">ConvertSerializableItems</name><parameter_list pos:line="36" pos:column="45">()</parameter_list>
        <block pos:line="37" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="38" pos:column="13">SerializableTestObject</name></type> <name pos:line="38" pos:column="36">testObject</name> <init pos:line="38" pos:column="47">= <expr><op:operator pos:line="38" pos:column="49">new</op:operator> <name pos:line="38" pos:column="53">SerializableTestObject</name> <block pos:line="38" pos:column="76">{ <expr><name pos:line="38" pos:column="78">TestProperty</name> <op:operator pos:line="38" pos:column="91">=</op:operator> <lit:literal type="string" pos:line="38" pos:column="93">"Test Value"</lit:literal></expr> }</block></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name><name pos:line="40" pos:column="13">List</name><argument_list pos:line="40" pos:column="17">&lt;<argument><name pos:line="40" pos:column="18">SessionModel</name></argument>&gt;</argument_list></name></type> <name pos:line="40" pos:column="32">sessionModels</name> <init pos:line="40" pos:column="46">= <expr><op:operator pos:line="40" pos:column="48">new</op:operator> <name><name pos:line="40" pos:column="52">List</name><argument_list pos:line="40" pos:column="56">&lt;<argument><name pos:line="40" pos:column="57">SessionModel</name></argument>&gt;</argument_list></name>
                <block pos:line="41" pos:column="17">{
                    <expr><op:operator pos:line="42" pos:column="21">new</op:operator> <name pos:line="42" pos:column="25">SessionModel</name>
                        <block pos:line="43" pos:column="25">{
                            <expr><name pos:line="44" pos:column="29">Key</name> <op:operator pos:line="44" pos:column="33">=</op:operator> <lit:literal type="string" pos:line="44" pos:column="35">"Key1"</lit:literal></expr>,
                            <expr><name pos:line="45" pos:column="29">Value</name> <op:operator pos:line="45" pos:column="35">=</op:operator> <name pos:line="45" pos:column="37">testObject</name></expr>,
                            <expr><name pos:line="46" pos:column="29">Type</name> <op:operator pos:line="46" pos:column="34">=</op:operator> <call><name><name pos:line="46" pos:column="36">testObject</name><op:operator pos:line="46" pos:column="46">.</op:operator><name pos:line="46" pos:column="47">GetType</name></name><argument_list pos:line="46" pos:column="54">()</argument_list></call></expr>
                        }</block></expr>
                }</block></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="50" pos:column="13">object</name></type> <name pos:line="50" pos:column="20">rows</name> <init pos:line="50" pos:column="25">= <expr><op:operator pos:line="50" pos:column="27">new</op:operator> <call><name pos:line="50" pos:column="31">SessionModelConverter</name><argument_list pos:line="50" pos:column="52">()</argument_list></call><op:operator pos:line="50" pos:column="54">.</op:operator><call><name pos:line="50" pos:column="55">Convert</name><argument_list pos:line="50" pos:column="62">(<argument><expr><name pos:line="50" pos:column="63">sessionModels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="51" pos:column="13">List</name><argument_list pos:line="51" pos:column="17">&lt;<argument><name pos:line="51" pos:column="18">object</name></argument>&gt;</argument_list></name></type> <name pos:line="51" pos:column="26">columns</name> <init pos:line="51" pos:column="34">= <expr><call><name pos:line="51" pos:column="36">GetFirstValueRowFromConvertedSessionModel</name><argument_list pos:line="51" pos:column="77">(<argument><expr><name pos:line="51" pos:column="78">rows</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="53" pos:column="13">Assert</name><op:operator pos:line="53" pos:column="19">.</op:operator><name pos:line="53" pos:column="20">Equal</name></name><argument_list pos:line="53" pos:column="25">(<argument><expr><name><name pos:line="53" pos:column="26">columns</name><index pos:line="53" pos:column="33">[<expr><lit:literal type="number" pos:line="53" pos:column="34">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="53" pos:column="38">"Key1"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="54" pos:column="13">Assert</name><op:operator pos:line="54" pos:column="19">.</op:operator><name pos:line="54" pos:column="20">Equal</name></name><argument_list pos:line="54" pos:column="25">(<argument><expr><name><name pos:line="54" pos:column="26">columns</name><index pos:line="54" pos:column="33">[<expr><lit:literal type="number" pos:line="54" pos:column="34">1</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="38">testObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="55" pos:column="13">Assert</name><op:operator pos:line="55" pos:column="19">.</op:operator><name pos:line="55" pos:column="20">Equal</name></name><argument_list pos:line="55" pos:column="25">(<argument><expr><name><name pos:line="55" pos:column="26">columns</name><index pos:line="55" pos:column="33">[<expr><lit:literal type="number" pos:line="55" pos:column="34">2</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><call><name pos:line="55" pos:column="38">typeof</name><argument_list pos:line="55" pos:column="44">(<argument><expr><name pos:line="55" pos:column="45">SerializableTestObject</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="58" pos:column="9">[<expr><name pos:line="58" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="59" pos:column="9">public</specifier> <name pos:line="59" pos:column="16">void</name></type> <name pos:line="59" pos:column="21">ConvertNonSerializableItemsWithToStringMethod</name><parameter_list pos:line="59" pos:column="66">()</parameter_list>
        <block pos:line="60" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="61" pos:column="13">NonSerializableTestObjectWithToString</name></type> <name pos:line="61" pos:column="51">testObject</name> <init pos:line="61" pos:column="62">= <expr><op:operator pos:line="61" pos:column="64">new</op:operator> <name pos:line="61" pos:column="68">NonSerializableTestObjectWithToString</name> <block pos:line="61" pos:column="106">{ <expr><name pos:line="61" pos:column="108">TestProperty</name> <op:operator pos:line="61" pos:column="121">=</op:operator> <lit:literal type="string" pos:line="61" pos:column="123">"Test Value"</lit:literal></expr> }</block></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name><name pos:line="63" pos:column="13">List</name><argument_list pos:line="63" pos:column="17">&lt;<argument><name pos:line="63" pos:column="18">SessionModel</name></argument>&gt;</argument_list></name></type> <name pos:line="63" pos:column="32">sessionModels</name> <init pos:line="63" pos:column="46">= <expr><op:operator pos:line="63" pos:column="48">new</op:operator> <name><name pos:line="63" pos:column="52">List</name><argument_list pos:line="63" pos:column="56">&lt;<argument><name pos:line="63" pos:column="57">SessionModel</name></argument>&gt;</argument_list></name>
                <block pos:line="64" pos:column="17">{
                    <expr><op:operator pos:line="65" pos:column="21">new</op:operator> <name pos:line="65" pos:column="25">SessionModel</name>
                        <block pos:line="66" pos:column="25">{
                            <expr><name pos:line="67" pos:column="29">Key</name> <op:operator pos:line="67" pos:column="33">=</op:operator> <lit:literal type="string" pos:line="67" pos:column="35">"Key1"</lit:literal></expr>,
                            <expr><name pos:line="68" pos:column="29">Value</name> <op:operator pos:line="68" pos:column="35">=</op:operator> <name pos:line="68" pos:column="37">testObject</name></expr>,
                            <expr><name pos:line="69" pos:column="29">Type</name> <op:operator pos:line="69" pos:column="34">=</op:operator> <call><name><name pos:line="69" pos:column="36">testObject</name><op:operator pos:line="69" pos:column="46">.</op:operator><name pos:line="69" pos:column="47">GetType</name></name><argument_list pos:line="69" pos:column="54">()</argument_list></call></expr>
                        }</block></expr>
                }</block></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="73" pos:column="13">object</name></type> <name pos:line="73" pos:column="20">rows</name> <init pos:line="73" pos:column="25">= <expr><op:operator pos:line="73" pos:column="27">new</op:operator> <call><name pos:line="73" pos:column="31">SessionModelConverter</name><argument_list pos:line="73" pos:column="52">()</argument_list></call><op:operator pos:line="73" pos:column="54">.</op:operator><call><name pos:line="73" pos:column="55">Convert</name><argument_list pos:line="73" pos:column="62">(<argument><expr><name pos:line="73" pos:column="63">sessionModels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="74" pos:column="13">List</name><argument_list pos:line="74" pos:column="17">&lt;<argument><name pos:line="74" pos:column="18">object</name></argument>&gt;</argument_list></name></type> <name pos:line="74" pos:column="26">columns</name> <init pos:line="74" pos:column="34">= <expr><call><name pos:line="74" pos:column="36">GetFirstValueRowFromConvertedSessionModel</name><argument_list pos:line="74" pos:column="77">(<argument><expr><name pos:line="74" pos:column="78">rows</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="76" pos:column="13">Assert</name><op:operator pos:line="76" pos:column="19">.</op:operator><name pos:line="76" pos:column="20">Equal</name></name><argument_list pos:line="76" pos:column="25">(<argument><expr><name><name pos:line="76" pos:column="26">columns</name><index pos:line="76" pos:column="33">[<expr><lit:literal type="number" pos:line="76" pos:column="34">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="76" pos:column="38">"Key1"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="77" pos:column="13">Assert</name><op:operator pos:line="77" pos:column="19">.</op:operator><name pos:line="77" pos:column="20">Equal</name></name><argument_list pos:line="77" pos:column="25">(<argument><expr><name><name pos:line="77" pos:column="26">columns</name><index pos:line="77" pos:column="33">[<expr><lit:literal type="number" pos:line="77" pos:column="34">1</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name><name pos:line="77" pos:column="38">testObject</name><op:operator pos:line="77" pos:column="48">.</op:operator><name pos:line="77" pos:column="49">TestProperty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="78" pos:column="13">Assert</name><op:operator pos:line="78" pos:column="19">.</op:operator><name pos:line="78" pos:column="20">Equal</name></name><argument_list pos:line="78" pos:column="25">(<argument><expr><name><name pos:line="78" pos:column="26">columns</name><index pos:line="78" pos:column="33">[<expr><lit:literal type="number" pos:line="78" pos:column="34">2</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><call><name pos:line="78" pos:column="38">typeof</name><argument_list pos:line="78" pos:column="44">(<argument><expr><name pos:line="78" pos:column="45">NonSerializableTestObjectWithToString</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="81" pos:column="9">[<expr><name pos:line="81" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="82" pos:column="9">public</specifier> <name pos:line="82" pos:column="16">void</name></type> <name pos:line="82" pos:column="21">FailToConvertNonSerializableItems</name><parameter_list pos:line="82" pos:column="54">()</parameter_list>
        <block pos:line="83" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="84" pos:column="13">NonSerializableTestObject</name></type> <name pos:line="84" pos:column="39">testObject</name> <init pos:line="84" pos:column="50">= <expr><op:operator pos:line="84" pos:column="52">new</op:operator> <name pos:line="84" pos:column="56">NonSerializableTestObject</name> <block pos:line="84" pos:column="82">{ <expr><name pos:line="84" pos:column="84">TestProperty</name> <op:operator pos:line="84" pos:column="97">=</op:operator> <lit:literal type="string" pos:line="84" pos:column="99">"Test Value"</lit:literal></expr> }</block></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name><name pos:line="86" pos:column="13">List</name><argument_list pos:line="86" pos:column="17">&lt;<argument><name pos:line="86" pos:column="18">SessionModel</name></argument>&gt;</argument_list></name></type> <name pos:line="86" pos:column="32">sessionModels</name> <init pos:line="86" pos:column="46">= <expr><op:operator pos:line="86" pos:column="48">new</op:operator> <name><name pos:line="86" pos:column="52">List</name><argument_list pos:line="86" pos:column="56">&lt;<argument><name pos:line="86" pos:column="57">SessionModel</name></argument>&gt;</argument_list></name>
                <block pos:line="87" pos:column="17">{
                    <expr><op:operator pos:line="88" pos:column="21">new</op:operator> <name pos:line="88" pos:column="25">SessionModel</name>
                        <block pos:line="89" pos:column="25">{
                            <expr><name pos:line="90" pos:column="29">Key</name> <op:operator pos:line="90" pos:column="33">=</op:operator> <lit:literal type="string" pos:line="90" pos:column="35">"Key1"</lit:literal></expr>,
                            <expr><name pos:line="91" pos:column="29">Value</name> <op:operator pos:line="91" pos:column="35">=</op:operator> <name pos:line="91" pos:column="37">testObject</name></expr>,
                            <expr><name pos:line="92" pos:column="29">Type</name> <op:operator pos:line="92" pos:column="34">=</op:operator> <call><name><name pos:line="92" pos:column="36">testObject</name><op:operator pos:line="92" pos:column="46">.</op:operator><name pos:line="92" pos:column="47">GetType</name></name><argument_list pos:line="92" pos:column="54">()</argument_list></call></expr>
                        }</block></expr>
                }</block></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="96" pos:column="13">object</name></type> <name pos:line="96" pos:column="20">rows</name> <init pos:line="96" pos:column="25">= <expr><op:operator pos:line="96" pos:column="27">new</op:operator> <call><name pos:line="96" pos:column="31">SessionModelConverter</name><argument_list pos:line="96" pos:column="52">()</argument_list></call><op:operator pos:line="96" pos:column="54">.</op:operator><call><name pos:line="96" pos:column="55">Convert</name><argument_list pos:line="96" pos:column="62">(<argument><expr><name pos:line="96" pos:column="63">sessionModels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="97" pos:column="13">List</name><argument_list pos:line="97" pos:column="17">&lt;<argument><name pos:line="97" pos:column="18">object</name></argument>&gt;</argument_list></name></type> <name pos:line="97" pos:column="26">columns</name> <init pos:line="97" pos:column="34">= <expr><call><name pos:line="97" pos:column="36">GetFirstValueRowFromConvertedSessionModel</name><argument_list pos:line="97" pos:column="77">(<argument><expr><name pos:line="97" pos:column="78">rows</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="99" pos:column="13">Assert</name><op:operator pos:line="99" pos:column="19">.</op:operator><name pos:line="99" pos:column="20">Equal</name></name><argument_list pos:line="99" pos:column="25">(<argument><expr><name><name pos:line="99" pos:column="26">columns</name><index pos:line="99" pos:column="33">[<expr><lit:literal type="number" pos:line="99" pos:column="34">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="99" pos:column="38">"Key1"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="100" pos:column="13">Assert</name><op:operator pos:line="100" pos:column="19">.</op:operator><name pos:line="100" pos:column="20">Equal</name></name><argument_list pos:line="100" pos:column="25">(<argument><expr><name><name pos:line="100" pos:column="26">columns</name><index pos:line="100" pos:column="33">[<expr><lit:literal type="number" pos:line="100" pos:column="34">1</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="100" pos:column="38">"\\Non serializable type :(\\"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="101" pos:column="13">Assert</name><op:operator pos:line="101" pos:column="19">.</op:operator><name pos:line="101" pos:column="20">Equal</name></name><argument_list pos:line="101" pos:column="25">(<argument><expr><name><name pos:line="101" pos:column="26">columns</name><index pos:line="101" pos:column="33">[<expr><lit:literal type="number" pos:line="101" pos:column="34">2</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><call><name pos:line="101" pos:column="38">typeof</name><argument_list pos:line="101" pos:column="44">(<argument><expr><name pos:line="101" pos:column="45">NonSerializableTestObject</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="104" pos:column="9">private</specifier> <specifier pos:line="104" pos:column="17">static</specifier> <name><name pos:line="104" pos:column="24">List</name><argument_list pos:line="104" pos:column="28">&lt;<argument><name pos:line="104" pos:column="29">object</name></argument>&gt;</argument_list></name></type> <name pos:line="104" pos:column="37">GetFirstValueRowFromConvertedSessionModel</name><parameter_list pos:line="104" pos:column="78">(<param><decl><type><name pos:line="104" pos:column="79">object</name></type> <name pos:line="104" pos:column="86">rows</name></decl></param>)</parameter_list>
        <block pos:line="105" pos:column="9">{
            <return pos:line="106" pos:column="13">return <expr><op:operator pos:line="106" pos:column="20">(</op:operator><call pos:line="106" pos:column="21">(<name><name pos:line="106" pos:column="22">IEnumerable</name><argument_list pos:line="106" pos:column="33">&lt;<argument><name pos:line="106" pos:column="34">object</name></argument>&gt;</argument_list></name>)<argument_list pos:line="106" pos:column="42">(<argument><expr><op:operator pos:line="106" pos:column="43">(</op:operator><name><name pos:line="106" pos:column="44">IEnumerable</name><argument_list pos:line="106" pos:column="55">&lt;<argument><name pos:line="106" pos:column="56">object</name></argument>&gt;</argument_list></name><op:operator pos:line="106" pos:column="63">)</op:operator><name pos:line="106" pos:column="64">rows</name></expr></argument>)</argument_list></call><op:operator pos:line="106" pos:column="69">.</op:operator><call><name pos:line="106" pos:column="70">ToList</name><argument_list pos:line="106" pos:column="76">()</argument_list></call><op:operator pos:line="106" pos:column="78">.</op:operator><call><name pos:line="106" pos:column="79">Skip</name><argument_list pos:line="106" pos:column="83">(<argument><expr><lit:literal type="number" pos:line="106" pos:column="84">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="106" pos:column="86">.</op:operator><call><name pos:line="106" pos:column="87">First</name><argument_list pos:line="106" pos:column="92">()</argument_list></call><op:operator pos:line="106" pos:column="94">)</op:operator><op:operator pos:line="106" pos:column="95">.</op:operator><call><name pos:line="106" pos:column="96">ToList</name><argument_list pos:line="106" pos:column="102">()</argument_list></call></expr>;</return> <comment type="line" pos:line="106" pos:column="106">// skip first row since it only contains column names</comment>
        }</block></function>
    }</block></class>

    <class><attribute pos:line="110" pos:column="5">[<expr><name pos:line="110" pos:column="6">Serializable</name></expr>]</attribute>
    <specifier pos:line="111" pos:column="5">internal</specifier> class <name pos:line="111" pos:column="20">SerializableTestObject</name> <super pos:line="111" pos:column="43">: <name pos:line="111" pos:column="45">ISerializable</name></super>
    <block pos:line="112" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="113" pos:column="9">public</specifier> <name pos:line="113" pos:column="16">string</name></type> <name pos:line="113" pos:column="23">TestProperty</name> <block pos:line="113" pos:column="36">{ <function_decl><name pos:line="113" pos:column="38">get</name>;</function_decl> <function_decl><name pos:line="113" pos:column="43">set</name>;</function_decl> }</block></decl></decl_stmt>

        <function><type><specifier pos:line="115" pos:column="9">public</specifier> <name pos:line="115" pos:column="16">void</name></type> <name pos:line="115" pos:column="21">GetObjectData</name><parameter_list pos:line="115" pos:column="34">(<param><decl><type><name pos:line="115" pos:column="35">SerializationInfo</name></type> <name pos:line="115" pos:column="53">info</name></decl></param>, <param><decl><type><name pos:line="115" pos:column="59">StreamingContext</name></type> <name pos:line="115" pos:column="76">context</name></decl></param>)</parameter_list>
        <block pos:line="116" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="117" pos:column="13">info</name><op:operator pos:line="117" pos:column="17">.</op:operator><name pos:line="117" pos:column="18">AddValue</name></name><argument_list pos:line="117" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="117" pos:column="27">"TestProperty"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="117" pos:column="43">this</name><op:operator pos:line="117" pos:column="47">.</op:operator><name pos:line="117" pos:column="48">TestProperty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

    <class><specifier pos:line="121" pos:column="5">internal</specifier> class <name pos:line="121" pos:column="20">NonSerializableTestObject</name>
    <block pos:line="122" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="123" pos:column="9">public</specifier> <name pos:line="123" pos:column="16">string</name></type> <name pos:line="123" pos:column="23">TestProperty</name> <block pos:line="123" pos:column="36">{ <function_decl><name pos:line="123" pos:column="38">get</name>;</function_decl> <function_decl><name pos:line="123" pos:column="43">set</name>;</function_decl> }</block></decl></decl_stmt>
    }</block></class>

    <class><specifier pos:line="126" pos:column="5">internal</specifier> class <name pos:line="126" pos:column="20">NonSerializableTestObjectWithToString</name> <super pos:line="126" pos:column="58">: <name pos:line="126" pos:column="60">NonSerializableTestObject</name></super>
    <block pos:line="127" pos:column="5">{
        <function><type><specifier pos:line="128" pos:column="9">public</specifier> <specifier pos:line="128" pos:column="16">override</specifier> <name pos:line="128" pos:column="25">string</name></type> <name pos:line="128" pos:column="32">ToString</name><parameter_list pos:line="128" pos:column="40">()</parameter_list>
        <block pos:line="129" pos:column="9">{
            <return pos:line="130" pos:column="13">return <expr><name><name pos:line="130" pos:column="20">this</name><op:operator pos:line="130" pos:column="24">.</op:operator><name pos:line="130" pos:column="25">TestProperty</name></name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
