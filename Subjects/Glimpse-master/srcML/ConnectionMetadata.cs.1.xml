<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Ado\Model\ConnectionMetadata.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>

<namespace pos:line="5" pos:column="1">namespace <name><name pos:line="5" pos:column="11">Glimpse</name><op:operator pos:line="5" pos:column="18">.</op:operator><name pos:line="5" pos:column="19">Ado</name><op:operator pos:line="5" pos:column="22">.</op:operator><name pos:line="5" pos:column="23">Model</name></name>
<block pos:line="6" pos:column="1">{
    <class><specifier pos:line="7" pos:column="5">public</specifier> class <name pos:line="7" pos:column="18">ConnectionMetadata</name>
    <block pos:line="8" pos:column="5">{ 
        <constructor><specifier pos:line="9" pos:column="9">public</specifier> <name pos:line="9" pos:column="16">ConnectionMetadata</name><parameter_list pos:line="9" pos:column="34">(<param><decl><type><name pos:line="9" pos:column="35">string</name></type> <name pos:line="9" pos:column="42">id</name></decl></param>)</parameter_list>
        <block pos:line="10" pos:column="9">{
            <expr_stmt><expr><name pos:line="11" pos:column="13">Id</name> <op:operator pos:line="11" pos:column="16">=</op:operator> <name pos:line="11" pos:column="18">id</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="12" pos:column="13">Commands</name> <op:operator pos:line="12" pos:column="22">=</op:operator> <op:operator pos:line="12" pos:column="24">new</op:operator> <call><name><name pos:line="12" pos:column="28">Dictionary</name><argument_list pos:line="12" pos:column="38">&lt;<argument><name pos:line="12" pos:column="39">string</name></argument>, <argument><name pos:line="12" pos:column="47">CommandMetadata</name></argument>&gt;</argument_list></name><argument_list pos:line="12" pos:column="63">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="13" pos:column="13">Transactions</name> <op:operator pos:line="13" pos:column="26">=</op:operator> <op:operator pos:line="13" pos:column="28">new</op:operator> <call><name><name pos:line="13" pos:column="32">Dictionary</name><argument_list pos:line="13" pos:column="42">&lt;<argument><name pos:line="13" pos:column="43">string</name></argument>, <argument><name pos:line="13" pos:column="51">TransactionMetadata</name></argument>&gt;</argument_list></name><argument_list pos:line="13" pos:column="71">()</argument_list></call></expr>;</expr_stmt> 
        }</block></constructor>

        <decl_stmt><decl><type><specifier pos:line="16" pos:column="9">public</specifier> <name pos:line="16" pos:column="16">string</name></type> <name pos:line="16" pos:column="23">Id</name> <block pos:line="16" pos:column="26">{ <function_decl><name pos:line="16" pos:column="28">get</name>;</function_decl> <function_decl><specifier pos:line="16" pos:column="33">private</specifier> <name pos:line="16" pos:column="41">set</name>;</function_decl> }</block></decl></decl_stmt> 

        <decl_stmt><decl><type><specifier pos:line="18" pos:column="9">public</specifier> <name pos:line="18" pos:column="16">DateTime</name><type:modifier pos:line="18" pos:column="24">?</type:modifier></type> <name pos:line="18" pos:column="26">StartDateTime</name> <block pos:line="18" pos:column="40">{ <function_decl><name pos:line="18" pos:column="42">get</name>;</function_decl> <function_decl><name pos:line="18" pos:column="47">set</name>;</function_decl> }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="20" pos:column="9">public</specifier> <name pos:line="20" pos:column="16">int</name></type> <name pos:line="20" pos:column="20">StartCount</name> <block pos:line="20" pos:column="31">{ <function_decl><name pos:line="20" pos:column="33">get</name>;</function_decl> <function_decl><specifier pos:line="20" pos:column="38">private</specifier> <name pos:line="20" pos:column="46">set</name>;</function_decl> }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="22" pos:column="9">public</specifier> <name pos:line="22" pos:column="16">DateTime</name><type:modifier pos:line="22" pos:column="24">?</type:modifier></type> <name pos:line="22" pos:column="26">EndDateTime</name> <block pos:line="22" pos:column="38">{ <function_decl><name pos:line="22" pos:column="40">get</name>;</function_decl> <function_decl><name pos:line="22" pos:column="45">set</name>;</function_decl> }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="24" pos:column="9">public</specifier> <name pos:line="24" pos:column="16">int</name></type> <name pos:line="24" pos:column="20">EndCount</name> <block pos:line="24" pos:column="29">{ <function_decl><name pos:line="24" pos:column="31">get</name>;</function_decl> <function_decl><specifier pos:line="24" pos:column="36">private</specifier> <name pos:line="24" pos:column="44">set</name>;</function_decl> }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="26" pos:column="9">public</specifier> <name><name pos:line="26" pos:column="16">IDictionary</name><argument_list pos:line="26" pos:column="27">&lt;<argument><name pos:line="26" pos:column="28">string</name></argument>, <argument><name pos:line="26" pos:column="36">CommandMetadata</name></argument>&gt;</argument_list></name></type> <name pos:line="26" pos:column="53">Commands</name> <block pos:line="26" pos:column="62">{ <function_decl><name pos:line="26" pos:column="64">get</name>;</function_decl> <function_decl><specifier pos:line="26" pos:column="69">private</specifier> <name pos:line="26" pos:column="77">set</name>;</function_decl> }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="28" pos:column="9">public</specifier> <name><name pos:line="28" pos:column="16">IDictionary</name><argument_list pos:line="28" pos:column="27">&lt;<argument><name pos:line="28" pos:column="28">string</name></argument>, <argument><name pos:line="28" pos:column="36">TransactionMetadata</name></argument>&gt;</argument_list></name></type> <name pos:line="28" pos:column="57">Transactions</name> <block pos:line="28" pos:column="70">{ <function_decl><name pos:line="28" pos:column="72">get</name>;</function_decl> <function_decl><specifier pos:line="28" pos:column="77">private</specifier> <name pos:line="28" pos:column="85">set</name>;</function_decl> }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="30" pos:column="9">public</specifier> <name pos:line="30" pos:column="16">TimeSpan</name><type:modifier pos:line="30" pos:column="24">?</type:modifier></type> <name pos:line="30" pos:column="26">Duration</name> <block pos:line="30" pos:column="35">{ <function_decl><name pos:line="30" pos:column="37">get</name>;</function_decl> <function_decl><name pos:line="30" pos:column="42">set</name>;</function_decl> }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="32" pos:column="9">public</specifier> <name pos:line="32" pos:column="16">TimeSpan</name><type:modifier pos:line="32" pos:column="24">?</type:modifier></type> <name pos:line="32" pos:column="26">Offset</name> <block pos:line="32" pos:column="33">{ <function_decl><name pos:line="32" pos:column="35">get</name>;</function_decl> <function_decl><name pos:line="32" pos:column="40">set</name>;</function_decl> }</block></decl></decl_stmt>

        <function><type><specifier pos:line="34" pos:column="9">public</specifier> <name pos:line="34" pos:column="16">void</name></type> <name pos:line="34" pos:column="21">RegisterStart</name><parameter_list pos:line="34" pos:column="34">()</parameter_list>
        <block pos:line="35" pos:column="9">{
            <expr_stmt><expr><name pos:line="36" pos:column="13">StartCount</name><op:operator pos:line="36" pos:column="23">++</op:operator></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="39" pos:column="9">public</specifier> <name pos:line="39" pos:column="16">void</name></type> <name pos:line="39" pos:column="21">RegisterEnd</name><parameter_list pos:line="39" pos:column="32">()</parameter_list>
        <block pos:line="40" pos:column="9">{
            <expr_stmt><expr><name pos:line="41" pos:column="13">EndCount</name><op:operator pos:line="41" pos:column="21">++</op:operator></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="44" pos:column="9">public</specifier> <name pos:line="44" pos:column="16">void</name></type> <name pos:line="44" pos:column="21">RegiserCommand</name><parameter_list pos:line="44" pos:column="35">(<param><decl><type><name pos:line="44" pos:column="36">CommandMetadata</name></type> <name pos:line="44" pos:column="52">command</name></decl></param>)</parameter_list>
        <block pos:line="45" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="46" pos:column="13">Commands</name><op:operator pos:line="46" pos:column="21">.</op:operator><name pos:line="46" pos:column="22">Add</name></name><argument_list pos:line="46" pos:column="25">(<argument><expr><name><name pos:line="46" pos:column="26">command</name><op:operator pos:line="46" pos:column="33">.</op:operator><name pos:line="46" pos:column="34">Id</name></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="38">command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="49" pos:column="9">public</specifier> <name pos:line="49" pos:column="16">void</name></type> <name pos:line="49" pos:column="21">RegiserTransactionStart</name><parameter_list pos:line="49" pos:column="44">(<param><decl><type><name pos:line="49" pos:column="45">TransactionMetadata</name></type> <name pos:line="49" pos:column="65">transaction</name></decl></param>)</parameter_list>
        <block pos:line="50" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="51" pos:column="13">Transactions</name><op:operator pos:line="51" pos:column="25">.</op:operator><name pos:line="51" pos:column="26">Add</name></name><argument_list pos:line="51" pos:column="29">(<argument><expr><name><name pos:line="51" pos:column="30">transaction</name><op:operator pos:line="51" pos:column="41">.</op:operator><name pos:line="51" pos:column="42">Id</name></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="46">transaction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="53" pos:column="13">var</name></type> <name pos:line="53" pos:column="17">command</name> <init pos:line="53" pos:column="25">= <expr><call><name><name pos:line="53" pos:column="27">Commands</name><op:operator pos:line="53" pos:column="35">.</op:operator><name pos:line="53" pos:column="36">FirstOrDefault</name></name><argument_list pos:line="53" pos:column="50">(<argument><expr><lambda><name pos:line="53" pos:column="51">x</name> <op:operator pos:line="53" pos:column="53">=&gt;</op:operator> <name><name pos:line="53" pos:column="56">x</name><op:operator pos:line="53" pos:column="57">.</op:operator><name pos:line="53" pos:column="58">Value</name><op:operator pos:line="53" pos:column="63">.</op:operator><name pos:line="53" pos:column="64">Offset</name></name> <op:operator pos:line="53" pos:column="71">&gt;=</op:operator> <name><name pos:line="53" pos:column="74">transaction</name><op:operator pos:line="53" pos:column="85">.</op:operator><name pos:line="53" pos:column="86">Offset</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="54" pos:column="13">if<condition pos:line="54" pos:column="15">(<expr><name><name pos:line="54" pos:column="16">command</name><op:operator pos:line="54" pos:column="23">.</op:operator><name pos:line="54" pos:column="24">Value</name></name> <op:operator pos:line="54" pos:column="30">!=</op:operator> <name pos:line="54" pos:column="33">null</name></expr>)</condition><then pos:line="54" pos:column="38">
                <expr_stmt><expr><name><name pos:line="55" pos:column="17">command</name><op:operator pos:line="55" pos:column="24">.</op:operator><name pos:line="55" pos:column="25">Value</name><op:operator pos:line="55" pos:column="30">.</op:operator><name pos:line="55" pos:column="31">HeadTransaction</name></name> <op:operator pos:line="55" pos:column="47">=</op:operator> <name pos:line="55" pos:column="49">transaction</name></expr>;</expr_stmt></then></if>
        }</block></function>

        <function><type><specifier pos:line="58" pos:column="9">public</specifier> <name pos:line="58" pos:column="16">void</name></type> <name pos:line="58" pos:column="21">RegiserTransactionEnd</name><parameter_list pos:line="58" pos:column="42">(<param><decl><type><name pos:line="58" pos:column="43">TransactionMetadata</name></type> <name pos:line="58" pos:column="63">transaction</name></decl></param>)</parameter_list>
        <block pos:line="59" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="60" pos:column="13">var</name></type> <name pos:line="60" pos:column="17">command</name> <init pos:line="60" pos:column="25">= <expr><call><name><name pos:line="60" pos:column="27">Commands</name><op:operator pos:line="60" pos:column="35">.</op:operator><name pos:line="60" pos:column="36">LastOrDefault</name></name><argument_list pos:line="60" pos:column="49">(<argument><expr><lambda><name pos:line="60" pos:column="50">x</name> <op:operator pos:line="60" pos:column="52">=&gt;</op:operator> <name><name pos:line="60" pos:column="55">x</name><op:operator pos:line="60" pos:column="56">.</op:operator><name pos:line="60" pos:column="57">Value</name><op:operator pos:line="60" pos:column="62">.</op:operator><name pos:line="60" pos:column="63">Offset</name></name> <op:operator pos:line="60" pos:column="70">&lt;=</op:operator> <name><name pos:line="60" pos:column="73">transaction</name><op:operator pos:line="60" pos:column="84">.</op:operator><name pos:line="60" pos:column="85">Offset</name></name> <op:operator pos:line="60" pos:column="92">+</op:operator> <name><name pos:line="60" pos:column="94">transaction</name><op:operator pos:line="60" pos:column="105">.</op:operator><name pos:line="60" pos:column="106">Duration</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="61" pos:column="13">if<condition pos:line="61" pos:column="15">(<expr><name><name pos:line="61" pos:column="16">command</name><op:operator pos:line="61" pos:column="23">.</op:operator><name pos:line="61" pos:column="24">Value</name></name> <op:operator pos:line="61" pos:column="30">!=</op:operator> <name pos:line="61" pos:column="33">null</name></expr>)</condition><then pos:line="61" pos:column="38">
                <expr_stmt><expr><name><name pos:line="62" pos:column="17">command</name><op:operator pos:line="62" pos:column="24">.</op:operator><name pos:line="62" pos:column="25">Value</name><op:operator pos:line="62" pos:column="30">.</op:operator><name pos:line="62" pos:column="31">TailTransaction</name></name> <op:operator pos:line="62" pos:column="47">=</op:operator> <name pos:line="62" pos:column="49">transaction</name></expr>;</expr_stmt></then></if>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
