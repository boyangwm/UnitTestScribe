<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Core\Extensibility\RuntimePolicyContextShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">Glimpse</name><op:operator pos:line="2" pos:column="14">.</op:operator><name pos:line="2" pos:column="15">Core</name><op:operator pos:line="2" pos:column="19">.</op:operator><name pos:line="2" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Glimpse</name><op:operator pos:line="3" pos:column="14">.</op:operator><name pos:line="3" pos:column="15">Core</name><op:operator pos:line="3" pos:column="19">.</op:operator><name pos:line="3" pos:column="20">Framework</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Test</name><op:operator pos:line="4" pos:column="19">.</op:operator><name pos:line="4" pos:column="20">Core</name><op:operator pos:line="4" pos:column="24">.</op:operator><name pos:line="4" pos:column="25">TestDoubles</name></name>;</using>
<using pos:line="5" pos:column="1">using <name pos:line="5" pos:column="7">Moq</name>;</using>
<using pos:line="6" pos:column="1">using <name pos:line="6" pos:column="7">Xunit</name>;</using>

<namespace pos:line="8" pos:column="1">namespace <name><name pos:line="8" pos:column="11">Glimpse</name><op:operator pos:line="8" pos:column="18">.</op:operator><name pos:line="8" pos:column="19">Test</name><op:operator pos:line="8" pos:column="23">.</op:operator><name pos:line="8" pos:column="24">Core</name><op:operator pos:line="8" pos:column="28">.</op:operator><name pos:line="8" pos:column="29">Extensibility</name></name>
<block pos:line="9" pos:column="1">{
    <class><specifier pos:line="10" pos:column="5">public</specifier> class <name pos:line="10" pos:column="18">RuntimePolicyContextShould</name>
    <block pos:line="11" pos:column="5">{
        <function><type><attribute pos:line="12" pos:column="9">[<expr><name pos:line="12" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="13" pos:column="9">public</specifier> <name pos:line="13" pos:column="16">void</name></type> <name pos:line="13" pos:column="21">Constuct</name><parameter_list pos:line="13" pos:column="29">()</parameter_list>
        <block pos:line="14" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="15" pos:column="13">var</name></type> <name pos:line="15" pos:column="17">metadataMock</name> <init pos:line="15" pos:column="30">= <expr><op:operator pos:line="15" pos:column="32">new</op:operator> <call><name><name pos:line="15" pos:column="36">Mock</name><argument_list pos:line="15" pos:column="40">&lt;<argument><name pos:line="15" pos:column="41">IRequestMetadata</name></argument>&gt;</argument_list></name><argument_list pos:line="15" pos:column="58">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="16" pos:column="13">var</name></type> <name pos:line="16" pos:column="17">loggerMock</name> <init pos:line="16" pos:column="28">= <expr><op:operator pos:line="16" pos:column="30">new</op:operator> <call><name><name pos:line="16" pos:column="34">Mock</name><argument_list pos:line="16" pos:column="38">&lt;<argument><name pos:line="16" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="16" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="17" pos:column="13">var</name></type> <name pos:line="17" pos:column="17">requestContext</name> <init pos:line="17" pos:column="32">= <expr><op:operator pos:line="17" pos:column="34">new</op:operator> <call><name pos:line="17" pos:column="38">DummyObjectContext</name><argument_list pos:line="17" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="19" pos:column="13">var</name></type> <name pos:line="19" pos:column="17">context</name> <init pos:line="19" pos:column="25">= <expr><op:operator pos:line="19" pos:column="27">new</op:operator> <call><name pos:line="19" pos:column="31">RuntimePolicyContext</name><argument_list pos:line="19" pos:column="51">(<argument><expr><name><name pos:line="19" pos:column="52">metadataMock</name><op:operator pos:line="19" pos:column="64">.</op:operator><name pos:line="19" pos:column="65">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="73">loggerMock</name><op:operator pos:line="19" pos:column="83">.</op:operator><name pos:line="19" pos:column="84">Object</name></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="92">requestContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="21" pos:column="13">Assert</name><op:operator pos:line="21" pos:column="19">.</op:operator><name pos:line="21" pos:column="20">Equal</name></name><argument_list pos:line="21" pos:column="25">(<argument><expr><name><name pos:line="21" pos:column="26">metadataMock</name><op:operator pos:line="21" pos:column="38">.</op:operator><name pos:line="21" pos:column="39">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="47">context</name><op:operator pos:line="21" pos:column="54">.</op:operator><name pos:line="21" pos:column="55">RequestMetadata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="22" pos:column="13">Assert</name><op:operator pos:line="22" pos:column="19">.</op:operator><name pos:line="22" pos:column="20">Equal</name></name><argument_list pos:line="22" pos:column="25">(<argument><expr><name><name pos:line="22" pos:column="26">loggerMock</name><op:operator pos:line="22" pos:column="36">.</op:operator><name pos:line="22" pos:column="37">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="45">context</name><op:operator pos:line="22" pos:column="52">.</op:operator><name pos:line="22" pos:column="53">Logger</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="23" pos:column="13">Assert</name><op:operator pos:line="23" pos:column="19">.</op:operator><name pos:line="23" pos:column="20">Equal</name></name><argument_list pos:line="23" pos:column="25">(<argument><expr><name pos:line="23" pos:column="26">requestContext</name></expr></argument>, <argument><expr><call><name><name pos:line="23" pos:column="42">context</name><op:operator pos:line="23" pos:column="49">.</op:operator><name><name pos:line="23" pos:column="50">GetRequestContext</name><argument_list pos:line="23" pos:column="67">&lt;<argument><name pos:line="23" pos:column="68">DummyObjectContext</name></argument>&gt;</argument_list></name></name><argument_list pos:line="23" pos:column="87">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="26" pos:column="9">[<expr><name pos:line="26" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="27" pos:column="9">public</specifier> <name pos:line="27" pos:column="16">void</name></type> <name pos:line="27" pos:column="21">ThrowExceptionWithNullRequestMetadata</name><parameter_list pos:line="27" pos:column="58">()</parameter_list>
        <block pos:line="28" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="29" pos:column="13">var</name></type> <name pos:line="29" pos:column="17">loggerMock</name> <init pos:line="29" pos:column="28">= <expr><op:operator pos:line="29" pos:column="30">new</op:operator> <call><name><name pos:line="29" pos:column="34">Mock</name><argument_list pos:line="29" pos:column="38">&lt;<argument><name pos:line="29" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="29" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="30" pos:column="13">var</name></type> <name pos:line="30" pos:column="17">requestContext</name> <init pos:line="30" pos:column="32">= <expr><op:operator pos:line="30" pos:column="34">new</op:operator> <call><name pos:line="30" pos:column="38">DummyObjectContext</name><argument_list pos:line="30" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="32" pos:column="13">Assert</name><op:operator pos:line="32" pos:column="19">.</op:operator><name><name pos:line="32" pos:column="20">Throws</name><argument_list pos:line="32" pos:column="26">&lt;<argument><name pos:line="32" pos:column="27">ArgumentNullException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="32" pos:column="49">(<argument><expr><lambda><parameter_list pos:line="32" pos:column="50">()</parameter_list> <op:operator pos:line="32" pos:column="53">=&gt;</op:operator> <op:operator pos:line="32" pos:column="56">new</op:operator> <call><name pos:line="32" pos:column="60">RuntimePolicyContext</name><argument_list pos:line="32" pos:column="80">(<argument><expr><name pos:line="32" pos:column="81">null</name></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="87">loggerMock</name><op:operator pos:line="32" pos:column="97">.</op:operator><name pos:line="32" pos:column="98">Object</name></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="106">requestContext</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="35" pos:column="9">[<expr><name pos:line="35" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="36" pos:column="9">public</specifier> <name pos:line="36" pos:column="16">void</name></type> <name pos:line="36" pos:column="21">ThrowExceptionWithNullLogger</name><parameter_list pos:line="36" pos:column="49">()</parameter_list>
        <block pos:line="37" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="38" pos:column="13">var</name></type> <name pos:line="38" pos:column="17">metadataMock</name> <init pos:line="38" pos:column="30">= <expr><op:operator pos:line="38" pos:column="32">new</op:operator> <call><name><name pos:line="38" pos:column="36">Mock</name><argument_list pos:line="38" pos:column="40">&lt;<argument><name pos:line="38" pos:column="41">IRequestMetadata</name></argument>&gt;</argument_list></name><argument_list pos:line="38" pos:column="58">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="39" pos:column="13">var</name></type> <name pos:line="39" pos:column="17">requestContext</name> <init pos:line="39" pos:column="32">= <expr><op:operator pos:line="39" pos:column="34">new</op:operator> <call><name pos:line="39" pos:column="38">DummyObjectContext</name><argument_list pos:line="39" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="41" pos:column="13">Assert</name><op:operator pos:line="41" pos:column="19">.</op:operator><name><name pos:line="41" pos:column="20">Throws</name><argument_list pos:line="41" pos:column="26">&lt;<argument><name pos:line="41" pos:column="27">ArgumentNullException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="41" pos:column="49">(<argument><expr><lambda><parameter_list pos:line="41" pos:column="50">()</parameter_list> <op:operator pos:line="41" pos:column="53">=&gt;</op:operator> <op:operator pos:line="41" pos:column="56">new</op:operator> <call><name pos:line="41" pos:column="60">RuntimePolicyContext</name><argument_list pos:line="41" pos:column="80">(<argument><expr><name><name pos:line="41" pos:column="81">metadataMock</name><op:operator pos:line="41" pos:column="93">.</op:operator><name pos:line="41" pos:column="94">Object</name></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="102">null</name></expr></argument>, <argument><expr><name pos:line="41" pos:column="108">requestContext</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="44" pos:column="9">[<expr><name pos:line="44" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="45" pos:column="9">public</specifier> <name pos:line="45" pos:column="16">void</name></type> <name pos:line="45" pos:column="21">ThrowExceptionWithNullRequestContext</name><parameter_list pos:line="45" pos:column="57">()</parameter_list>
        <block pos:line="46" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="47" pos:column="13">var</name></type> <name pos:line="47" pos:column="17">metadataMock</name> <init pos:line="47" pos:column="30">= <expr><op:operator pos:line="47" pos:column="32">new</op:operator> <call><name><name pos:line="47" pos:column="36">Mock</name><argument_list pos:line="47" pos:column="40">&lt;<argument><name pos:line="47" pos:column="41">IRequestMetadata</name></argument>&gt;</argument_list></name><argument_list pos:line="47" pos:column="58">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="48" pos:column="13">var</name></type> <name pos:line="48" pos:column="17">loggerMock</name> <init pos:line="48" pos:column="28">= <expr><op:operator pos:line="48" pos:column="30">new</op:operator> <call><name><name pos:line="48" pos:column="34">Mock</name><argument_list pos:line="48" pos:column="38">&lt;<argument><name pos:line="48" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="48" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="50" pos:column="13">Assert</name><op:operator pos:line="50" pos:column="19">.</op:operator><name><name pos:line="50" pos:column="20">Throws</name><argument_list pos:line="50" pos:column="26">&lt;<argument><name pos:line="50" pos:column="27">ArgumentNullException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="50" pos:column="49">(<argument><expr><lambda><parameter_list pos:line="50" pos:column="50">()</parameter_list> <op:operator pos:line="50" pos:column="53">=&gt;</op:operator> <op:operator pos:line="50" pos:column="56">new</op:operator> <call><name pos:line="50" pos:column="60">RuntimePolicyContext</name><argument_list pos:line="50" pos:column="80">(<argument><expr><name><name pos:line="50" pos:column="81">metadataMock</name><op:operator pos:line="50" pos:column="93">.</op:operator><name pos:line="50" pos:column="94">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="50" pos:column="102">loggerMock</name><op:operator pos:line="50" pos:column="112">.</op:operator><name pos:line="50" pos:column="113">Object</name></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="121">null</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="53" pos:column="9">[<expr><name pos:line="53" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="54" pos:column="9">public</specifier> <name pos:line="54" pos:column="16">void</name></type> <name pos:line="54" pos:column="21">ReturnNullContextWithInvalidType</name><parameter_list pos:line="54" pos:column="53">()</parameter_list>
        <block pos:line="55" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="56" pos:column="13">var</name></type> <name pos:line="56" pos:column="17">metadataMock</name> <init pos:line="56" pos:column="30">= <expr><op:operator pos:line="56" pos:column="32">new</op:operator> <call><name><name pos:line="56" pos:column="36">Mock</name><argument_list pos:line="56" pos:column="40">&lt;<argument><name pos:line="56" pos:column="41">IRequestMetadata</name></argument>&gt;</argument_list></name><argument_list pos:line="56" pos:column="58">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="57" pos:column="13">var</name></type> <name pos:line="57" pos:column="17">loggerMock</name> <init pos:line="57" pos:column="28">= <expr><op:operator pos:line="57" pos:column="30">new</op:operator> <call><name><name pos:line="57" pos:column="34">Mock</name><argument_list pos:line="57" pos:column="38">&lt;<argument><name pos:line="57" pos:column="39">ILogger</name></argument>&gt;</argument_list></name><argument_list pos:line="57" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="59" pos:column="13">var</name></type> <name pos:line="59" pos:column="17">context</name> <init pos:line="59" pos:column="25">= <expr><op:operator pos:line="59" pos:column="27">new</op:operator> <call><name pos:line="59" pos:column="31">RuntimePolicyContext</name><argument_list pos:line="59" pos:column="51">(<argument><expr><name><name pos:line="59" pos:column="52">metadataMock</name><op:operator pos:line="59" pos:column="64">.</op:operator><name pos:line="59" pos:column="65">Object</name></name></expr></argument>, <argument><expr><name><name pos:line="59" pos:column="73">loggerMock</name><op:operator pos:line="59" pos:column="83">.</op:operator><name pos:line="59" pos:column="84">Object</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="59" pos:column="92">"not a good context"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="61" pos:column="13">Assert</name><op:operator pos:line="61" pos:column="19">.</op:operator><name pos:line="61" pos:column="20">Null</name></name><argument_list pos:line="61" pos:column="24">(<argument><expr><call><name><name pos:line="61" pos:column="25">context</name><op:operator pos:line="61" pos:column="32">.</op:operator><name><name pos:line="61" pos:column="33">GetRequestContext</name><argument_list pos:line="61" pos:column="50">&lt;<argument><name pos:line="61" pos:column="51">DummyObjectContext</name></argument>&gt;</argument_list></name></name><argument_list pos:line="61" pos:column="70">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
