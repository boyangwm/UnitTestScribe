<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.WebForms\Tab\ControlTree.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Collections</name><op:operator pos:line="3" pos:column="25">.</op:operator><name pos:line="3" pos:column="26">Generic</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Data</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Reflection</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">System</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">Web</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">System</name><op:operator pos:line="7" pos:column="13">.</op:operator><name pos:line="7" pos:column="14">Web</name><op:operator pos:line="7" pos:column="17">.</op:operator><name pos:line="7" pos:column="18">UI</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">System</name><op:operator pos:line="8" pos:column="13">.</op:operator><name pos:line="8" pos:column="14">Web</name><op:operator pos:line="8" pos:column="17">.</op:operator><name pos:line="8" pos:column="18">UI</name><op:operator pos:line="8" pos:column="20">.</op:operator><name pos:line="8" pos:column="21">WebControls</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">Glimpse</name><op:operator pos:line="9" pos:column="14">.</op:operator><name pos:line="9" pos:column="15">AspNet</name><op:operator pos:line="9" pos:column="21">.</op:operator><name pos:line="9" pos:column="22">Extensibility</name></name>;</using>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">Glimpse</name><op:operator pos:line="10" pos:column="14">.</op:operator><name pos:line="10" pos:column="15">Core</name><op:operator pos:line="10" pos:column="19">.</op:operator><name pos:line="10" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="11" pos:column="1">using <name><name pos:line="11" pos:column="7">Glimpse</name><op:operator pos:line="11" pos:column="14">.</op:operator><name pos:line="11" pos:column="15">Core</name><op:operator pos:line="11" pos:column="19">.</op:operator><name pos:line="11" pos:column="20">Extensions</name></name>;</using>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">Glimpse</name><op:operator pos:line="12" pos:column="14">.</op:operator><name pos:line="12" pos:column="15">Core</name><op:operator pos:line="12" pos:column="19">.</op:operator><name pos:line="12" pos:column="20">Tab</name><op:operator pos:line="12" pos:column="23">.</op:operator><name pos:line="12" pos:column="24">Assist</name></name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">Glimpse</name><op:operator pos:line="13" pos:column="14">.</op:operator><name pos:line="13" pos:column="15">WebForms</name><op:operator pos:line="13" pos:column="23">.</op:operator><name pos:line="13" pos:column="24">Inspector</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">Glimpse</name><op:operator pos:line="14" pos:column="14">.</op:operator><name pos:line="14" pos:column="15">WebForms</name><op:operator pos:line="14" pos:column="23">.</op:operator><name pos:line="14" pos:column="24">Model</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">Glimpse</name><op:operator pos:line="15" pos:column="14">.</op:operator><name pos:line="15" pos:column="15">WebForms</name><op:operator pos:line="15" pos:column="23">.</op:operator><name pos:line="15" pos:column="24">Support</name></name>;</using>

<namespace pos:line="17" pos:column="1">namespace <name><name pos:line="17" pos:column="11">Glimpse</name><op:operator pos:line="17" pos:column="18">.</op:operator><name pos:line="17" pos:column="19">WebForms</name><op:operator pos:line="17" pos:column="27">.</op:operator><name pos:line="17" pos:column="28">Tab</name></name>
<block pos:line="18" pos:column="1">{
    <class><specifier pos:line="19" pos:column="5">public</specifier> class <name pos:line="19" pos:column="18">ControlTree</name> <super pos:line="19" pos:column="30">: <name pos:line="19" pos:column="32">AspNetTab</name>, <name pos:line="19" pos:column="43">ITabSetup</name>, <name pos:line="19" pos:column="54">ITabLayout</name>, <name pos:line="19" pos:column="66">IKey</name></super>
    <block pos:line="20" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="21" pos:column="9">private</specifier> <specifier pos:line="21" pos:column="17">static</specifier> <specifier pos:line="21" pos:column="24">readonly</specifier> <name pos:line="21" pos:column="33">MethodInfo</name></type> <name pos:line="21" pos:column="44">traceContextVerifyStartMethod</name> <init pos:line="21" pos:column="74">= <expr><call><name pos:line="21" pos:column="76">typeof</name><argument_list pos:line="21" pos:column="82">(<argument><expr><name pos:line="21" pos:column="83">TraceContext</name></expr></argument>)</argument_list></call><op:operator pos:line="21" pos:column="96">.</op:operator><call><name pos:line="21" pos:column="97">GetMethod</name><argument_list pos:line="21" pos:column="106">(<argument><expr><lit:literal type="string" pos:line="21" pos:column="107">"VerifyStart"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="122">BindingFlags</name><op:operator pos:line="21" pos:column="134">.</op:operator><name pos:line="21" pos:column="135">Instance</name></name> <op:operator pos:line="21" pos:column="144">|</op:operator> <name><name pos:line="21" pos:column="146">BindingFlags</name><op:operator pos:line="21" pos:column="158">.</op:operator><name pos:line="21" pos:column="159">NonPublic</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="22" pos:column="9">private</specifier> <specifier pos:line="22" pos:column="17">static</specifier> <specifier pos:line="22" pos:column="24">readonly</specifier> <name pos:line="22" pos:column="33">FieldInfo</name></type> <name pos:line="22" pos:column="43">requestDataField</name> <init pos:line="22" pos:column="60">= <expr><call><name pos:line="22" pos:column="62">typeof</name><argument_list pos:line="22" pos:column="68">(<argument><expr><name pos:line="22" pos:column="69">TraceContext</name></expr></argument>)</argument_list></call><op:operator pos:line="22" pos:column="82">.</op:operator><call><name pos:line="22" pos:column="83">GetField</name><argument_list pos:line="22" pos:column="91">(<argument><expr><lit:literal type="string" pos:line="22" pos:column="92">"_requestData"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="108">BindingFlags</name><op:operator pos:line="22" pos:column="120">.</op:operator><name pos:line="22" pos:column="121">Instance</name></name> <op:operator pos:line="22" pos:column="130">|</op:operator> <name><name pos:line="22" pos:column="132">BindingFlags</name><op:operator pos:line="22" pos:column="144">.</op:operator><name pos:line="22" pos:column="145">NonPublic</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="23" pos:column="9">private</specifier> <specifier pos:line="23" pos:column="17">static</specifier> <specifier pos:line="23" pos:column="24">readonly</specifier> <name pos:line="23" pos:column="33">ViewStateFormatter</name></type> <name pos:line="23" pos:column="52">viewStateFormatter</name> <init pos:line="23" pos:column="71">= <expr><op:operator pos:line="23" pos:column="73">new</op:operator> <call><name pos:line="23" pos:column="77">ViewStateFormatter</name><argument_list pos:line="23" pos:column="95">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="24" pos:column="9">private</specifier> <specifier pos:line="24" pos:column="17">static</specifier> <specifier pos:line="24" pos:column="24">readonly</specifier> <name pos:line="24" pos:column="33">DataBindFormatter</name></type> <name pos:line="24" pos:column="51">dataBindFormatter</name> <init pos:line="24" pos:column="69">= <expr><op:operator pos:line="24" pos:column="71">new</op:operator> <call><name pos:line="24" pos:column="75">DataBindFormatter</name><argument_list pos:line="24" pos:column="92">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="26" pos:column="9">private</specifier> <specifier pos:line="26" pos:column="17">static</specifier> <specifier pos:line="26" pos:column="24">readonly</specifier> <name pos:line="26" pos:column="33">object</name></type> <name pos:line="26" pos:column="40">Layout</name> <init pos:line="26" pos:column="47">= <expr><call><name><name pos:line="26" pos:column="49">TabLayout</name><op:operator pos:line="26" pos:column="58">.</op:operator><name pos:line="26" pos:column="59">Create</name></name><argument_list pos:line="26" pos:column="65">()</argument_list></call>
            <op:operator pos:line="27" pos:column="13">.</op:operator><call><name pos:line="27" pos:column="14">Row</name><argument_list pos:line="27" pos:column="17">(<argument><expr><lambda><name pos:line="27" pos:column="18">r</name> <op:operator pos:line="27" pos:column="20">=&gt;</op:operator>
            <block pos:line="28" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="29" pos:column="17">r</name><op:operator pos:line="29" pos:column="18">.</op:operator><name pos:line="29" pos:column="19">Cell</name></name><argument_list pos:line="29" pos:column="23">(<argument><expr><lit:literal type="string" pos:line="29" pos:column="24">"controlId"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="29" pos:column="36">.</op:operator><call><name pos:line="29" pos:column="37">AsKey</name><argument_list pos:line="29" pos:column="42">()</argument_list></call><op:operator pos:line="29" pos:column="44">.</op:operator><call><name pos:line="29" pos:column="45">WithTitle</name><argument_list pos:line="29" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="29" pos:column="55">"Control ID"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="30" pos:column="17">r</name><op:operator pos:line="30" pos:column="18">.</op:operator><name pos:line="30" pos:column="19">Cell</name></name><argument_list pos:line="30" pos:column="23">(<argument><expr><lit:literal type="string" pos:line="30" pos:column="24">"type"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="30" pos:column="31">.</op:operator><call><name pos:line="30" pos:column="32">WithTitle</name><argument_list pos:line="30" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="30" pos:column="42">"Type"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="31" pos:column="17">r</name><op:operator pos:line="31" pos:column="18">.</op:operator><name pos:line="31" pos:column="19">Cell</name></name><argument_list pos:line="31" pos:column="23">(<argument><expr><lit:literal type="string" pos:line="31" pos:column="24">"renderSize"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="31" pos:column="37">.</op:operator><call><name pos:line="31" pos:column="38">Class</name><argument_list pos:line="31" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="31" pos:column="44">"mono"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="31" pos:column="51">.</op:operator><call><name pos:line="31" pos:column="52">AlignRight</name><argument_list pos:line="31" pos:column="62">()</argument_list></call><op:operator pos:line="31" pos:column="64">.</op:operator><call><name pos:line="31" pos:column="65">WidthInPixels</name><argument_list pos:line="31" pos:column="78">(<argument><expr><lit:literal type="number" pos:line="31" pos:column="79">150</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="31" pos:column="83">.</op:operator><call><name pos:line="31" pos:column="84">WithTitle</name><argument_list pos:line="31" pos:column="93">(<argument><expr><lit:literal type="string" pos:line="31" pos:column="94">"Render (w/ children)"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="31" pos:column="117">.</op:operator><call><name pos:line="31" pos:column="118">Suffix</name><argument_list pos:line="31" pos:column="124">(<argument><expr><lit:literal type="string" pos:line="31" pos:column="125">" Bytes"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="32" pos:column="17">r</name><op:operator pos:line="32" pos:column="18">.</op:operator><name pos:line="32" pos:column="19">Cell</name></name><argument_list pos:line="32" pos:column="23">(<argument><expr><lit:literal type="string" pos:line="32" pos:column="24">"viewstateSize"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="32" pos:column="40">.</op:operator><call><name pos:line="32" pos:column="41">Class</name><argument_list pos:line="32" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="32" pos:column="47">"mono"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="32" pos:column="54">.</op:operator><call><name pos:line="32" pos:column="55">AlignRight</name><argument_list pos:line="32" pos:column="65">()</argument_list></call><op:operator pos:line="32" pos:column="67">.</op:operator><call><name pos:line="32" pos:column="68">WidthInPixels</name><argument_list pos:line="32" pos:column="81">(<argument><expr><lit:literal type="number" pos:line="32" pos:column="82">125</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="32" pos:column="86">.</op:operator><call><name pos:line="32" pos:column="87">WithTitle</name><argument_list pos:line="32" pos:column="96">(<argument><expr><lit:literal type="string" pos:line="32" pos:column="97">"ViewState"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="32" pos:column="109">.</op:operator><call><name pos:line="32" pos:column="110">Suffix</name><argument_list pos:line="32" pos:column="116">(<argument><expr><lit:literal type="string" pos:line="32" pos:column="117">" Bytes"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="33" pos:column="17">r</name><op:operator pos:line="33" pos:column="18">.</op:operator><name pos:line="33" pos:column="19">Cell</name></name><argument_list pos:line="33" pos:column="23">(<argument><expr><lit:literal type="string" pos:line="33" pos:column="24">"controlstateSize"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="33" pos:column="43">.</op:operator><call><name pos:line="33" pos:column="44">Class</name><argument_list pos:line="33" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="33" pos:column="50">"mono"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="33" pos:column="57">.</op:operator><call><name pos:line="33" pos:column="58">AlignRight</name><argument_list pos:line="33" pos:column="68">()</argument_list></call><op:operator pos:line="33" pos:column="70">.</op:operator><call><name pos:line="33" pos:column="71">WidthInPixels</name><argument_list pos:line="33" pos:column="84">(<argument><expr><lit:literal type="number" pos:line="33" pos:column="85">125</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="33" pos:column="89">.</op:operator><call><name pos:line="33" pos:column="90">WithTitle</name><argument_list pos:line="33" pos:column="99">(<argument><expr><lit:literal type="string" pos:line="33" pos:column="100">"ControlState"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="33" pos:column="115">.</op:operator><call><name pos:line="33" pos:column="116">Suffix</name><argument_list pos:line="33" pos:column="122">(<argument><expr><lit:literal type="string" pos:line="33" pos:column="123">" Bytes"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></lambda></expr></argument>)</argument_list></call><op:operator pos:line="34" pos:column="15">.</op:operator><call><name pos:line="34" pos:column="16">Row</name><argument_list pos:line="34" pos:column="19">(<argument><expr><lambda><name pos:line="34" pos:column="20">r</name> <op:operator pos:line="34" pos:column="22">=&gt;</op:operator>
            <block pos:line="35" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="36" pos:column="17">r</name><op:operator pos:line="36" pos:column="18">.</op:operator><name pos:line="36" pos:column="19">Cell</name></name><argument_list pos:line="36" pos:column="23">(<argument><expr><lit:literal type="string" pos:line="36" pos:column="24">"viewstateTitle"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="36" pos:column="41">.</op:operator><call><name pos:line="36" pos:column="42">WithTitle</name><argument_list pos:line="36" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="36" pos:column="52">"Title"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="36" pos:column="60">.</op:operator><call><name pos:line="36" pos:column="61">AsMinimalDisplay</name><argument_list pos:line="36" pos:column="77">()</argument_list></call><op:operator pos:line="36" pos:column="79">.</op:operator><call><name pos:line="36" pos:column="80">AlignRight</name><argument_list pos:line="36" pos:column="90">()</argument_list></call><op:operator pos:line="36" pos:column="92">.</op:operator><call><name pos:line="36" pos:column="93">AsKey</name><argument_list pos:line="36" pos:column="98">()</argument_list></call><op:operator pos:line="36" pos:column="100">.</op:operator><call><name pos:line="36" pos:column="101">Class</name><argument_list pos:line="36" pos:column="106">(<argument><expr><lit:literal type="string" pos:line="36" pos:column="107">"glimpse-sub-heading"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="36" pos:column="129">.</op:operator><call><name pos:line="36" pos:column="130">PaddingRightInPercent</name><argument_list pos:line="36" pos:column="151">(<argument><expr><lit:literal type="number" pos:line="36" pos:column="152">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="37" pos:column="17">r</name><op:operator pos:line="37" pos:column="18">.</op:operator><name pos:line="37" pos:column="19">Cell</name></name><argument_list pos:line="37" pos:column="23">(<argument><expr><lit:literal type="string" pos:line="37" pos:column="24">"viewstate"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="37" pos:column="36">.</op:operator><call><name pos:line="37" pos:column="37">WithTitle</name><argument_list pos:line="37" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="37" pos:column="47">"ViewState"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="37" pos:column="59">.</op:operator><call><name pos:line="37" pos:column="60">SpanColumns</name><argument_list pos:line="37" pos:column="71">(<argument><expr><lit:literal type="number" pos:line="37" pos:column="72">4</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="37" pos:column="74">.</op:operator><call><name pos:line="37" pos:column="75">AsMinimalDisplay</name><argument_list pos:line="37" pos:column="91">()</argument_list></call></expr>;</expr_stmt>
            }</block></lambda></expr></argument>)</argument_list></call><op:operator pos:line="38" pos:column="15">.</op:operator><call><name pos:line="38" pos:column="16">Row</name><argument_list pos:line="38" pos:column="19">(<argument><expr><lambda><name pos:line="38" pos:column="20">r</name> <op:operator pos:line="38" pos:column="22">=&gt;</op:operator>
            <block pos:line="39" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="40" pos:column="17">r</name><op:operator pos:line="40" pos:column="18">.</op:operator><name pos:line="40" pos:column="19">Cell</name></name><argument_list pos:line="40" pos:column="23">(<argument><expr><lit:literal type="string" pos:line="40" pos:column="24">"dataBindParametersTitle"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="40" pos:column="50">.</op:operator><call><name pos:line="40" pos:column="51">WithTitle</name><argument_list pos:line="40" pos:column="60">(<argument><expr><lit:literal type="string" pos:line="40" pos:column="61">"Title"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="40" pos:column="69">.</op:operator><call><name pos:line="40" pos:column="70">AsMinimalDisplay</name><argument_list pos:line="40" pos:column="86">()</argument_list></call><op:operator pos:line="40" pos:column="88">.</op:operator><call><name pos:line="40" pos:column="89">AlignRight</name><argument_list pos:line="40" pos:column="99">()</argument_list></call><op:operator pos:line="40" pos:column="101">.</op:operator><call><name pos:line="40" pos:column="102">AsKey</name><argument_list pos:line="40" pos:column="107">()</argument_list></call><op:operator pos:line="40" pos:column="109">.</op:operator><call><name pos:line="40" pos:column="110">Class</name><argument_list pos:line="40" pos:column="115">(<argument><expr><lit:literal type="string" pos:line="40" pos:column="116">"glimpse-sub-heading"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="40" pos:column="138">.</op:operator><call><name pos:line="40" pos:column="139">PaddingRightInPercent</name><argument_list pos:line="40" pos:column="160">(<argument><expr><lit:literal type="number" pos:line="40" pos:column="161">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="41" pos:column="17">r</name><op:operator pos:line="41" pos:column="18">.</op:operator><name pos:line="41" pos:column="19">Cell</name></name><argument_list pos:line="41" pos:column="23">(<argument><expr><lit:literal type="string" pos:line="41" pos:column="24">"dataBindParameters"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="41" pos:column="45">.</op:operator><call><name pos:line="41" pos:column="46">WithTitle</name><argument_list pos:line="41" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="41" pos:column="56">"DataBindParameters"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="41" pos:column="77">.</op:operator><call><name pos:line="41" pos:column="78">SpanColumns</name><argument_list pos:line="41" pos:column="89">(<argument><expr><lit:literal type="number" pos:line="41" pos:column="90">4</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="41" pos:column="92">.</op:operator><call><name pos:line="41" pos:column="93">AsMinimalDisplay</name><argument_list pos:line="41" pos:column="109">()</argument_list></call></expr>;</expr_stmt>
            }</block></lambda></expr></argument>)</argument_list></call><op:operator pos:line="42" pos:column="15">.</op:operator><call><name pos:line="42" pos:column="16">Build</name><argument_list pos:line="42" pos:column="21">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="44" pos:column="9">public</specifier> <specifier pos:line="44" pos:column="16">override</specifier> <name pos:line="44" pos:column="25">string</name></type> <name pos:line="44" pos:column="32">Name</name>
        <block pos:line="45" pos:column="9">{
            <function><name pos:line="46" pos:column="13">get</name> <block pos:line="46" pos:column="17">{ <return pos:line="46" pos:column="19">return <expr><lit:literal type="string" pos:line="46" pos:column="26">"Control Tree"</lit:literal></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="49" pos:column="9">public</specifier> <name pos:line="49" pos:column="16">string</name></type> <name pos:line="49" pos:column="23">Key</name>
        <block pos:line="50" pos:column="9">{
            <function><name pos:line="51" pos:column="13">get</name> <block pos:line="51" pos:column="17">{ <return pos:line="51" pos:column="19">return <expr><lit:literal type="string" pos:line="51" pos:column="26">"glimpse_webforms_controltree"</lit:literal></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="54" pos:column="9">public</specifier> <specifier pos:line="54" pos:column="16">override</specifier> <name pos:line="54" pos:column="25">RuntimeEvent</name></type> <name pos:line="54" pos:column="38">ExecuteOn</name>
        <block pos:line="55" pos:column="9">{
            <function><name pos:line="56" pos:column="13">get</name> <block pos:line="56" pos:column="17">{ <return pos:line="56" pos:column="19">return <expr><name><name pos:line="56" pos:column="26">RuntimeEvent</name><op:operator pos:line="56" pos:column="38">.</op:operator><name pos:line="56" pos:column="39">BeginSessionAccess</name></name> <op:operator pos:line="56" pos:column="58">|</op:operator> <name><name pos:line="56" pos:column="60">RuntimeEvent</name><op:operator pos:line="56" pos:column="72">.</op:operator><name pos:line="56" pos:column="73">EndRequest</name></name></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <function><type><specifier pos:line="59" pos:column="9">public</specifier> <name pos:line="59" pos:column="16">object</name></type> <name pos:line="59" pos:column="23">GetLayout</name><parameter_list pos:line="59" pos:column="32">()</parameter_list>
        <block pos:line="60" pos:column="9">{
            <return pos:line="61" pos:column="13">return <expr><name pos:line="61" pos:column="20">Layout</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="64" pos:column="9">public</specifier> <name pos:line="64" pos:column="16">void</name></type> <name pos:line="64" pos:column="21">Setup</name><parameter_list pos:line="64" pos:column="26">(<param><decl><type><name pos:line="64" pos:column="27">ITabSetupContext</name></type> <name pos:line="64" pos:column="44">context</name></decl></param>)</parameter_list>
        <block pos:line="65" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="66" pos:column="13">context</name><op:operator pos:line="66" pos:column="20">.</op:operator><name><name pos:line="66" pos:column="21">PersistMessages</name><argument_list pos:line="66" pos:column="36">&lt;<argument><name pos:line="66" pos:column="37">PageLifeCycleMessage</name></argument>&gt;</argument_list></name></name><argument_list pos:line="66" pos:column="58">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="69" pos:column="9">public</specifier> <specifier pos:line="69" pos:column="16">override</specifier> <name pos:line="69" pos:column="25">object</name></type> <name pos:line="69" pos:column="32">GetData</name><parameter_list pos:line="69" pos:column="39">(<param><decl><type><name pos:line="69" pos:column="40">ITabContext</name></type> <name pos:line="69" pos:column="52">context</name></decl></param>)</parameter_list>
        <block pos:line="70" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="71" pos:column="13">var</name></type> <name pos:line="71" pos:column="17">trace</name> <init pos:line="71" pos:column="23">= <expr><name><name pos:line="71" pos:column="25">HttpContext</name><op:operator pos:line="71" pos:column="36">.</op:operator><name pos:line="71" pos:column="37">Current</name><op:operator pos:line="71" pos:column="44">.</op:operator><name pos:line="71" pos:column="45">Trace</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="73" pos:column="13">var</name></type> <name pos:line="73" pos:column="17">hasRun</name> <init pos:line="73" pos:column="24">= <expr><call><name><name pos:line="73" pos:column="26">context</name><op:operator pos:line="73" pos:column="33">.</op:operator><name pos:line="73" pos:column="34">TabStore</name><op:operator pos:line="73" pos:column="42">.</op:operator><name pos:line="73" pos:column="43">Get</name></name><argument_list pos:line="73" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="73" pos:column="47">"hasRun"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="74" pos:column="13">if <condition pos:line="74" pos:column="16">(<expr><name pos:line="74" pos:column="17">hasRun</name> <op:operator pos:line="74" pos:column="24">==</op:operator> <name pos:line="74" pos:column="27">null</name></expr>)</condition><then pos:line="74" pos:column="32">
            <block pos:line="75" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="76" pos:column="17">context</name><op:operator pos:line="76" pos:column="24">.</op:operator><name pos:line="76" pos:column="25">Logger</name><op:operator pos:line="76" pos:column="31">.</op:operator><name pos:line="76" pos:column="32">Debug</name></name><argument_list pos:line="76" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="76" pos:column="38">"ControlTree Tab Initial Run - {0}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="76" pos:column="75">HttpContext</name><op:operator pos:line="76" pos:column="86">.</op:operator><name pos:line="76" pos:column="87">Current</name><op:operator pos:line="76" pos:column="94">.</op:operator><name pos:line="76" pos:column="95">Request</name><op:operator pos:line="76" pos:column="102">.</op:operator><name pos:line="76" pos:column="103">RawUrl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name pos:line="78" pos:column="17">context</name><op:operator pos:line="78" pos:column="24">.</op:operator><name pos:line="78" pos:column="25">TabStore</name><op:operator pos:line="78" pos:column="33">.</op:operator><name pos:line="78" pos:column="34">Set</name></name><argument_list pos:line="78" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="78" pos:column="38">"hasRun"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="78" pos:column="48">"true"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line" pos:line="80" pos:column="17">// Remember the previous state, turn tracing on at the begining of the request,</comment>
                <comment type="line" pos:line="81" pos:column="17">// set things up so that when request is finished, lets put things back to the </comment>
                <comment type="line" pos:line="82" pos:column="17">// way they where. Lastly, make sure sate of trace is setup</comment>
                <expr_stmt><expr><call><name><name pos:line="83" pos:column="17">context</name><op:operator pos:line="83" pos:column="24">.</op:operator><name pos:line="83" pos:column="25">Logger</name><op:operator pos:line="83" pos:column="31">.</op:operator><name pos:line="83" pos:column="32">Debug</name></name><argument_list pos:line="83" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="83" pos:column="38">"Setting logger infrastructure - previouslyEnabled = {0}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="83" pos:column="97">trace</name><op:operator pos:line="83" pos:column="102">.</op:operator><name pos:line="83" pos:column="103">IsEnabled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name pos:line="85" pos:column="17">var</name></type> <name pos:line="85" pos:column="21">previouslyEnabled</name> <init pos:line="85" pos:column="39">= <expr><name><name pos:line="85" pos:column="41">trace</name><op:operator pos:line="85" pos:column="46">.</op:operator><name pos:line="85" pos:column="47">IsEnabled</name></name></expr></init></decl>;</decl_stmt>
                <if pos:line="86" pos:column="17">if <condition pos:line="86" pos:column="20">(<expr><op:operator pos:line="86" pos:column="21">!</op:operator><name pos:line="86" pos:column="22">previouslyEnabled</name></expr>)</condition><then pos:line="86" pos:column="40">
                <block pos:line="87" pos:column="17">{
                    <expr_stmt><expr><name><name pos:line="88" pos:column="21">trace</name><op:operator pos:line="88" pos:column="26">.</op:operator><name pos:line="88" pos:column="27">IsEnabled</name></name> <op:operator pos:line="88" pos:column="37">=</op:operator> <lit:literal type="boolean" pos:line="88" pos:column="39">true</lit:literal></expr>;</expr_stmt>
                }</block></then></if>

                <expr_stmt><expr><name><name pos:line="91" pos:column="17">trace</name><op:operator pos:line="91" pos:column="22">.</op:operator><name pos:line="91" pos:column="23">TraceFinished</name></name> <op:operator pos:line="91" pos:column="37">+=</op:operator> <lambda><parameter_list pos:line="91" pos:column="40">(<param><decl><name pos:line="91" pos:column="41">sender</name></decl></param>, <param><decl><name pos:line="91" pos:column="49">args</name></decl></param>)</parameter_list> <op:operator pos:line="91" pos:column="55">=&gt;</op:operator>
                <block pos:line="92" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="93" pos:column="21">context</name><op:operator pos:line="93" pos:column="28">.</op:operator><name pos:line="93" pos:column="29">Logger</name><op:operator pos:line="93" pos:column="35">.</op:operator><name pos:line="93" pos:column="36">Debug</name></name><argument_list pos:line="93" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="93" pos:column="42">"Resetting logger infrastructure - previouslyEnabled = {0}"</lit:literal></expr></argument>, <argument><expr><name pos:line="93" pos:column="103">previouslyEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if pos:line="94" pos:column="21">if <condition pos:line="94" pos:column="24">(<expr><op:operator pos:line="94" pos:column="25">!</op:operator><name pos:line="94" pos:column="26">previouslyEnabled</name></expr>)</condition><then pos:line="94" pos:column="44">
                    <block pos:line="95" pos:column="21">{
                        <expr_stmt><expr><name><name pos:line="96" pos:column="25">trace</name><op:operator pos:line="96" pos:column="30">.</op:operator><name pos:line="96" pos:column="31">IsEnabled</name></name> <op:operator pos:line="96" pos:column="41">=</op:operator> <lit:literal type="boolean" pos:line="96" pos:column="43">false</lit:literal></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></lambda></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name pos:line="100" pos:column="17">traceContextVerifyStartMethod</name><op:operator pos:line="100" pos:column="46">.</op:operator><name pos:line="100" pos:column="47">Invoke</name></name><argument_list pos:line="100" pos:column="53">(<argument><expr><name pos:line="100" pos:column="54">trace</name></expr></argument>, <argument><expr><name pos:line="100" pos:column="61">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name pos:line="102" pos:column="17">RegisterAdapters</name><argument_list pos:line="102" pos:column="33">(<argument><expr><name pos:line="102" pos:column="34">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:line="104" pos:column="17">return <expr><name pos:line="104" pos:column="24">null</name></expr>;</return>
            }</block></then></if>

            <expr_stmt><expr><call><name><name pos:line="107" pos:column="13">context</name><op:operator pos:line="107" pos:column="20">.</op:operator><name pos:line="107" pos:column="21">Logger</name><op:operator pos:line="107" pos:column="27">.</op:operator><name pos:line="107" pos:column="28">Debug</name></name><argument_list pos:line="107" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="107" pos:column="34">"ControlTree Tab Final Run - {0}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="107" pos:column="69">HttpContext</name><op:operator pos:line="107" pos:column="80">.</op:operator><name pos:line="107" pos:column="81">Current</name><op:operator pos:line="107" pos:column="88">.</op:operator><name pos:line="107" pos:column="89">Request</name><op:operator pos:line="107" pos:column="96">.</op:operator><name pos:line="107" pos:column="97">RawUrl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if pos:line="109" pos:column="13">if <condition pos:line="109" pos:column="16">(<expr><name pos:line="109" pos:column="17">requestDataField</name> <op:operator pos:line="109" pos:column="34">!=</op:operator> <name pos:line="109" pos:column="37">null</name></expr>)</condition><then pos:line="109" pos:column="42">
            <block pos:line="110" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="111" pos:column="17">var</name></type> <name pos:line="111" pos:column="21">requestData</name> <init pos:line="111" pos:column="33">= <expr><call><name><name pos:line="111" pos:column="35">requestDataField</name><op:operator pos:line="111" pos:column="51">.</op:operator><name pos:line="111" pos:column="52">GetValue</name></name><argument_list pos:line="111" pos:column="60">(<argument><expr><name pos:line="111" pos:column="61">trace</name></expr></argument>)</argument_list></call> <op:operator pos:line="111" pos:column="68">as</op:operator> <name pos:line="111" pos:column="71">DataSet</name></expr></init></decl>;</decl_stmt>
                <if pos:line="112" pos:column="17">if <condition pos:line="112" pos:column="20">(<expr><name pos:line="112" pos:column="21">requestData</name> <op:operator pos:line="112" pos:column="33">!=</op:operator> <name pos:line="112" pos:column="36">null</name></expr>)</condition><then pos:line="112" pos:column="41">
                <block pos:line="113" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="114" pos:column="21">context</name><op:operator pos:line="114" pos:column="28">.</op:operator><name pos:line="114" pos:column="29">Logger</name><op:operator pos:line="114" pos:column="35">.</op:operator><name pos:line="114" pos:column="36">Debug</name></name><argument_list pos:line="114" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="114" pos:column="42">"Pulling out the `Trace_Control_Tree` from internal logging infrastructure"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <decl_stmt><decl><type><name pos:line="116" pos:column="21">var</name></type> <name pos:line="116" pos:column="25">treeData</name> <init pos:line="116" pos:column="34">= <expr><call><name pos:line="116" pos:column="36">ProcessData</name><argument_list pos:line="116" pos:column="47">(<argument><expr><name><name pos:line="116" pos:column="48">requestData</name><op:operator pos:line="116" pos:column="59">.</op:operator><name pos:line="116" pos:column="60">Tables</name><index pos:line="116" pos:column="66">[<expr><lit:literal type="string" pos:line="116" pos:column="67">"Trace_Control_Tree"</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name><name pos:line="116" pos:column="90">context</name><op:operator pos:line="116" pos:column="97">.</op:operator><name pos:line="116" pos:column="98">Logger</name></name></expr></argument>, <argument><expr><call><name><name pos:line="116" pos:column="106">context</name><op:operator pos:line="116" pos:column="113">.</op:operator><name><name pos:line="116" pos:column="114">GetMessages</name><argument_list pos:line="116" pos:column="125">&lt;<argument><name pos:line="116" pos:column="126">PageLifeCycleMessage</name></argument>&gt;</argument_list></name></name><argument_list pos:line="116" pos:column="147">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <return pos:line="117" pos:column="21">return <expr><name pos:line="117" pos:column="28">treeData</name></expr>;</return>
                }</block></then></if>
            }</block></then></if>

            <return pos:line="121" pos:column="13">return <expr><name pos:line="121" pos:column="20">null</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="124" pos:column="9">private</specifier> <name pos:line="124" pos:column="17">void</name></type> <name pos:line="124" pos:column="22">RegisterAdapters</name><parameter_list pos:line="124" pos:column="38">(<param><decl><type><name pos:line="124" pos:column="39">ITabContext</name></type> <name pos:line="124" pos:column="51">context</name></decl></param>)</parameter_list>
        <block pos:line="125" pos:column="9">{
            <comment type="line" pos:line="126" pos:column="13">// Add adapter to the pipeline as a ViewStatePageAdapter </comment>
            <expr_stmt><expr><call><name><name pos:line="127" pos:column="13">context</name><op:operator pos:line="127" pos:column="20">.</op:operator><name pos:line="127" pos:column="21">Logger</name><op:operator pos:line="127" pos:column="27">.</op:operator><name pos:line="127" pos:column="28">Debug</name></name><argument_list pos:line="127" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="127" pos:column="34">"Setting up view state page adapter"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="129" pos:column="13">var</name></type> <name pos:line="129" pos:column="17">adapters</name> <init pos:line="129" pos:column="26">= <expr><name><name pos:line="129" pos:column="28">HttpContext</name><op:operator pos:line="129" pos:column="39">.</op:operator><name pos:line="129" pos:column="40">Current</name><op:operator pos:line="129" pos:column="47">.</op:operator><name pos:line="129" pos:column="48">Request</name><op:operator pos:line="129" pos:column="55">.</op:operator><name pos:line="129" pos:column="56">Browser</name><op:operator pos:line="129" pos:column="63">.</op:operator><name pos:line="129" pos:column="64">Adapters</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="130" pos:column="13">var</name></type> <name pos:line="130" pos:column="17">keyType</name> <init pos:line="130" pos:column="25">= <expr><call><name pos:line="130" pos:column="27">typeof</name><argument_list pos:line="130" pos:column="33">(<argument><expr><name pos:line="130" pos:column="34">Page</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="131" pos:column="13">var</name></type> <name pos:line="131" pos:column="17">adapterType</name> <init pos:line="131" pos:column="29">= <expr><call><name pos:line="131" pos:column="31">typeof</name><argument_list pos:line="131" pos:column="37">(<argument><expr><name pos:line="131" pos:column="38">ViewStatePageAdapter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="132" pos:column="13">if <condition pos:line="132" pos:column="16">(<expr><op:operator pos:line="132" pos:column="17">!</op:operator><call><name><name pos:line="132" pos:column="18">adapters</name><op:operator pos:line="132" pos:column="26">.</op:operator><name pos:line="132" pos:column="27">Contains</name></name><argument_list pos:line="132" pos:column="35">(<argument><expr><name><name pos:line="132" pos:column="36">keyType</name><op:operator pos:line="132" pos:column="43">.</op:operator><name pos:line="132" pos:column="44">AssemblyQualifiedName</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="132" pos:column="67">
            <block pos:line="133" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="134" pos:column="17">adapters</name><op:operator pos:line="134" pos:column="25">.</op:operator><name pos:line="134" pos:column="26">Add</name></name><argument_list pos:line="134" pos:column="29">(<argument><expr><name><name pos:line="134" pos:column="30">keyType</name><op:operator pos:line="134" pos:column="37">.</op:operator><name pos:line="134" pos:column="38">AssemblyQualifiedName</name></name></expr></argument>, <argument><expr><name><name pos:line="134" pos:column="61">adapterType</name><op:operator pos:line="134" pos:column="72">.</op:operator><name pos:line="134" pos:column="73">AssemblyQualifiedName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else pos:line="136" pos:column="13">else
            <block pos:line="137" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="138" pos:column="17">var</name></type> <name pos:line="138" pos:column="21">existingTypeString</name> <init pos:line="138" pos:column="40">= <expr><op:operator pos:line="138" pos:column="42">(</op:operator><name pos:line="138" pos:column="43">string</name><op:operator pos:line="138" pos:column="49">)</op:operator><name><name pos:line="138" pos:column="50">adapters</name><index pos:line="138" pos:column="58">[<expr><name><name pos:line="138" pos:column="59">keyType</name><op:operator pos:line="138" pos:column="66">.</op:operator><name pos:line="138" pos:column="67">AssemblyQualifiedName</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="139" pos:column="17">var</name></type> <name pos:line="139" pos:column="21">existingType</name> <init pos:line="139" pos:column="34">= <expr><call><name><name pos:line="139" pos:column="36">Type</name><op:operator pos:line="139" pos:column="40">.</op:operator><name pos:line="139" pos:column="41">GetType</name></name><argument_list pos:line="139" pos:column="48">(<argument><expr><name pos:line="139" pos:column="49">existingTypeString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="140" pos:column="17">if <condition pos:line="140" pos:column="20">(<expr><name pos:line="140" pos:column="21">existingType</name> <op:operator pos:line="140" pos:column="34">==</op:operator> <name pos:line="140" pos:column="37">null</name></expr>)</condition><then pos:line="140" pos:column="42">
                <block pos:line="141" pos:column="17">{
                    <comment type="line" pos:line="142" pos:column="21">// Try resolving type against primary web application assembly (eg. if adapter configuration was not assembly qualified)</comment>
                    <decl_stmt><decl><type><name pos:line="143" pos:column="21">var</name></type> <name pos:line="143" pos:column="25">instance</name> <init pos:line="143" pos:column="34">= <expr><name><name pos:line="143" pos:column="36">HttpContext</name><op:operator pos:line="143" pos:column="47">.</op:operator><name pos:line="143" pos:column="48">Current</name><op:operator pos:line="143" pos:column="55">.</op:operator><name pos:line="143" pos:column="56">ApplicationInstance</name></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="144" pos:column="21">var</name></type> <name pos:line="144" pos:column="25">baseType</name> <init pos:line="144" pos:column="34">= <expr><call><name><name pos:line="144" pos:column="36">instance</name><op:operator pos:line="144" pos:column="44">.</op:operator><name pos:line="144" pos:column="45">GetType</name></name><argument_list pos:line="144" pos:column="52">()</argument_list></call><op:operator pos:line="144" pos:column="54">.</op:operator><name pos:line="144" pos:column="55">BaseType</name></expr></init></decl>;</decl_stmt>
                    <if pos:line="145" pos:column="21">if <condition pos:line="145" pos:column="24">(<expr><name pos:line="145" pos:column="25">baseType</name> <op:operator pos:line="145" pos:column="34">!=</op:operator> <name pos:line="145" pos:column="37">null</name></expr>)</condition><then pos:line="145" pos:column="42">
                    <block pos:line="146" pos:column="21">{
                        <decl_stmt><decl><type><name pos:line="147" pos:column="25">var</name></type> <name pos:line="147" pos:column="29">rootAssembly</name> <init pos:line="147" pos:column="42">= <expr><name><name pos:line="147" pos:column="44">baseType</name><op:operator pos:line="147" pos:column="52">.</op:operator><name pos:line="147" pos:column="53">Assembly</name></name></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name pos:line="148" pos:column="25">existingType</name> <op:operator pos:line="148" pos:column="38">=</op:operator> <call><name><name pos:line="148" pos:column="40">rootAssembly</name><op:operator pos:line="148" pos:column="52">.</op:operator><name pos:line="148" pos:column="53">GetType</name></name><argument_list pos:line="148" pos:column="60">(<argument><expr><name pos:line="148" pos:column="61">existingTypeString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>

                <if pos:line="152" pos:column="17">if <condition pos:line="152" pos:column="20">(<expr><name pos:line="152" pos:column="21">existingType</name> <op:operator pos:line="152" pos:column="34">!=</op:operator> <name pos:line="152" pos:column="37">null</name></expr>)</condition><then pos:line="152" pos:column="42">
                <block pos:line="153" pos:column="17">{
                    <if pos:line="154" pos:column="21">if <condition pos:line="154" pos:column="24">(<expr><op:operator pos:line="154" pos:column="25">(</op:operator><op:operator pos:line="154" pos:column="26">!</op:operator><name><name pos:line="154" pos:column="27">existingType</name><op:operator pos:line="154" pos:column="39">.</op:operator><name pos:line="154" pos:column="40">IsGenericType</name> <type:modifier pos:line="154" pos:column="54">&amp;&amp;</type:modifier></name> <name pos:line="154" pos:column="57">existingType</name> <op:operator pos:line="154" pos:column="70">!=</op:operator> <call><name pos:line="154" pos:column="73">typeof</name><argument_list pos:line="154" pos:column="79">(<argument><expr><name pos:line="154" pos:column="80">ViewStatePageAdapter</name></expr></argument>)</argument_list></call><op:operator pos:line="154" pos:column="101">)</op:operator> <op:operator pos:line="154" pos:column="103">||</op:operator>
                        <op:operator pos:line="155" pos:column="25">(</op:operator><name><name pos:line="155" pos:column="26">existingType</name><op:operator pos:line="155" pos:column="38">.</op:operator><name pos:line="155" pos:column="39">IsGenericType</name> <type:modifier pos:line="155" pos:column="53">&amp;&amp;</type:modifier></name>
                         <call><name><name pos:line="156" pos:column="26">existingType</name><op:operator pos:line="156" pos:column="38">.</op:operator><name pos:line="156" pos:column="39">GetGenericTypeDefinition</name></name><argument_list pos:line="156" pos:column="63">()</argument_list></call> <op:operator pos:line="156" pos:column="66">!=</op:operator> <call><name pos:line="156" pos:column="69">typeof</name><argument_list pos:line="156" pos:column="75">(<argument><expr><name><name pos:line="156" pos:column="76">ViewStatePageAdapter</name><argument_list pos:line="156" pos:column="96">&lt;&gt;</argument_list></name></expr></argument>)</argument_list></call><op:operator pos:line="156" pos:column="99">)</op:operator></expr>)</condition><then pos:line="156" pos:column="101">
                    <block pos:line="157" pos:column="21">{
                        <decl_stmt><decl><type><name pos:line="158" pos:column="25">var</name></type> <name pos:line="158" pos:column="29">newAdapterType</name> <init pos:line="158" pos:column="44">= <expr><call><name pos:line="158" pos:column="46">typeof</name><argument_list pos:line="158" pos:column="52">(<argument><expr><name><name pos:line="158" pos:column="53">ViewStatePageAdapter</name><argument_list pos:line="158" pos:column="73">&lt;&gt;</argument_list></name></expr></argument>)</argument_list></call><op:operator pos:line="158" pos:column="76">.</op:operator><call><name pos:line="158" pos:column="77">MakeGenericType</name><argument_list pos:line="158" pos:column="92">(<argument><expr><name pos:line="158" pos:column="93">existingType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name><name pos:line="159" pos:column="25">adapters</name><index pos:line="159" pos:column="33">[<expr><name><name pos:line="159" pos:column="34">keyType</name><op:operator pos:line="159" pos:column="41">.</op:operator><name pos:line="159" pos:column="42">AssemblyQualifiedName</name></name></expr>]</index></name> <op:operator pos:line="159" pos:column="65">=</op:operator> <name><name pos:line="159" pos:column="67">newAdapterType</name><op:operator pos:line="159" pos:column="81">.</op:operator><name pos:line="159" pos:column="82">AssemblyQualifiedName</name></name></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then>
                <else pos:line="162" pos:column="17">else
                <block pos:line="163" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="164" pos:column="21">context</name><op:operator pos:line="164" pos:column="28">.</op:operator><name pos:line="164" pos:column="29">Logger</name><op:operator pos:line="164" pos:column="35">.</op:operator><name pos:line="164" pos:column="36">Error</name></name><argument_list pos:line="164" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="164" pos:column="42">"Failed to resolve type {0}"</lit:literal></expr></argument>, <argument><expr><name pos:line="164" pos:column="72">existingTypeString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></else></if>

            <decl_stmt><decl><type><name pos:line="168" pos:column="13">var</name></type> <name pos:line="168" pos:column="17">dataBoundControlType</name> <init pos:line="168" pos:column="38">= <expr><call><name pos:line="168" pos:column="40">typeof</name><argument_list pos:line="168" pos:column="46">(<argument><expr><name pos:line="168" pos:column="47">DataBoundControl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="169" pos:column="13">var</name></type> <name pos:line="169" pos:column="17">dataBoundControlAdapterType</name> <init pos:line="169" pos:column="45">= <expr><call><name pos:line="169" pos:column="47">typeof</name><argument_list pos:line="169" pos:column="53">(<argument><expr><name pos:line="169" pos:column="54">DataBoundControlAdapter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="170" pos:column="13">if <condition pos:line="170" pos:column="16">(<expr><name><name pos:line="170" pos:column="17">HttpContext</name><op:operator pos:line="170" pos:column="28">.</op:operator><name pos:line="170" pos:column="29">Current</name><op:operator pos:line="170" pos:column="36">.</op:operator><name pos:line="170" pos:column="37">Items</name><index pos:line="170" pos:column="42">[<expr><lit:literal type="string" pos:line="170" pos:column="43">"_GlimpseWebFormDataBinding"</lit:literal></expr>]</index></name> <op:operator pos:line="170" pos:column="73">==</op:operator> <name pos:line="170" pos:column="76">null</name></expr>)</condition><then pos:line="170" pos:column="81">
            <block pos:line="171" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="172" pos:column="17">HttpContext</name><op:operator pos:line="172" pos:column="28">.</op:operator><name pos:line="172" pos:column="29">Current</name><op:operator pos:line="172" pos:column="36">.</op:operator><name pos:line="172" pos:column="37">Items</name><index pos:line="172" pos:column="42">[<expr><lit:literal type="string" pos:line="172" pos:column="43">"_GlimpseWebFormDataBinding"</lit:literal></expr>]</index></name> <op:operator pos:line="172" pos:column="73">=</op:operator> <op:operator pos:line="172" pos:column="75">new</op:operator> <call><name><name pos:line="172" pos:column="79">Dictionary</name><argument_list pos:line="172" pos:column="89">&lt;<argument><name pos:line="172" pos:column="90">string</name></argument>, <argument><name><name pos:line="172" pos:column="98">List</name><argument_list pos:line="172" pos:column="102">&lt;<argument><name pos:line="172" pos:column="103">DataBindParameterModel</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list pos:line="172" pos:column="127">()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <foreach pos:line="175" pos:column="13">foreach (<init><decl><type><name pos:line="175" pos:column="22">DictionaryEntry</name></type> <name pos:line="175" pos:column="38">adapter</name> <range pos:line="175" pos:column="46">in <expr><name pos:line="175" pos:column="49">adapters</name></expr></range></decl></init>)
            <block pos:line="176" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="177" pos:column="17">var</name></type> <name pos:line="177" pos:column="21">controlType</name> <init pos:line="177" pos:column="33">= <expr><call><name><name pos:line="177" pos:column="35">Type</name><op:operator pos:line="177" pos:column="39">.</op:operator><name pos:line="177" pos:column="40">GetType</name></name><argument_list pos:line="177" pos:column="47">(<argument><expr><op:operator pos:line="177" pos:column="48">(</op:operator><name pos:line="177" pos:column="49">string</name><op:operator pos:line="177" pos:column="55">)</op:operator><name><name pos:line="177" pos:column="56">adapter</name><op:operator pos:line="177" pos:column="63">.</op:operator><name pos:line="177" pos:column="64">Key</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="178" pos:column="17">if <condition pos:line="178" pos:column="20">(<expr><call><name pos:line="178" pos:column="21">typeof</name><argument_list pos:line="178" pos:column="27">(<argument><expr><name pos:line="178" pos:column="28">DataBoundControl</name></expr></argument>)</argument_list></call><op:operator pos:line="178" pos:column="45">.</op:operator><call><name pos:line="178" pos:column="46">IsAssignableFrom</name><argument_list pos:line="178" pos:column="62">(<argument><expr><name pos:line="178" pos:column="63">controlType</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="178" pos:column="76">
                <block pos:line="179" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="180" pos:column="21">var</name></type> <name pos:line="180" pos:column="25">existingType</name> <init pos:line="180" pos:column="38">= <expr><call><name><name pos:line="180" pos:column="40">Type</name><op:operator pos:line="180" pos:column="44">.</op:operator><name pos:line="180" pos:column="45">GetType</name></name><argument_list pos:line="180" pos:column="52">(<argument><expr><op:operator pos:line="180" pos:column="53">(</op:operator><name pos:line="180" pos:column="54">string</name><op:operator pos:line="180" pos:column="60">)</op:operator><name><name pos:line="180" pos:column="61">adapter</name><op:operator pos:line="180" pos:column="68">.</op:operator><name pos:line="180" pos:column="69">Value</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if pos:line="181" pos:column="21">if <condition pos:line="181" pos:column="24">(<expr><op:operator pos:line="181" pos:column="25">(</op:operator><op:operator pos:line="181" pos:column="26">!</op:operator><name><name pos:line="181" pos:column="27">existingType</name><op:operator pos:line="181" pos:column="39">.</op:operator><name pos:line="181" pos:column="40">IsGenericType</name> <type:modifier pos:line="181" pos:column="54">&amp;&amp;</type:modifier></name> <name pos:line="181" pos:column="57">existingType</name> <op:operator pos:line="181" pos:column="70">!=</op:operator> <call><name pos:line="181" pos:column="73">typeof</name><argument_list pos:line="181" pos:column="79">(<argument><expr><name pos:line="181" pos:column="80">DataBoundControlAdapter</name></expr></argument>)</argument_list></call><op:operator pos:line="181" pos:column="104">)</op:operator> <op:operator pos:line="181" pos:column="106">||</op:operator> <op:operator pos:line="181" pos:column="109">(</op:operator><name><name pos:line="181" pos:column="110">existingType</name><op:operator pos:line="181" pos:column="122">.</op:operator><name pos:line="181" pos:column="123">IsGenericType</name> <type:modifier pos:line="181" pos:column="137">&amp;&amp;</type:modifier></name> <call><name><name pos:line="181" pos:column="140">existingType</name><op:operator pos:line="181" pos:column="152">.</op:operator><name pos:line="181" pos:column="153">GetGenericTypeDefinition</name></name><argument_list pos:line="181" pos:column="177">()</argument_list></call> <op:operator pos:line="181" pos:column="180">!=</op:operator> <call><name pos:line="181" pos:column="183">typeof</name><argument_list pos:line="181" pos:column="189">(<argument><expr><name><name pos:line="181" pos:column="190">DataBoundControlAdapter</name><argument_list pos:line="181" pos:column="213">&lt;&gt;</argument_list></name></expr></argument>)</argument_list></call><op:operator pos:line="181" pos:column="216">)</op:operator></expr>)</condition><then pos:line="181" pos:column="218">
                    <block pos:line="182" pos:column="21">{
                        <decl_stmt><decl><type><name pos:line="183" pos:column="25">var</name></type> <name pos:line="183" pos:column="29">newAdapterType</name> <init pos:line="183" pos:column="44">= <expr><call><name pos:line="183" pos:column="46">typeof</name><argument_list pos:line="183" pos:column="52">(<argument><expr><name><name pos:line="183" pos:column="53">DataBoundControlAdapter</name><argument_list pos:line="183" pos:column="76">&lt;&gt;</argument_list></name></expr></argument>)</argument_list></call><op:operator pos:line="183" pos:column="79">.</op:operator><call><name pos:line="183" pos:column="80">MakeGenericType</name><argument_list pos:line="183" pos:column="95">(<argument><expr><name pos:line="183" pos:column="96">existingType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name><name pos:line="184" pos:column="25">adapters</name><index pos:line="184" pos:column="33">[<expr><name><name pos:line="184" pos:column="34">adapter</name><op:operator pos:line="184" pos:column="41">.</op:operator><name pos:line="184" pos:column="42">Key</name></name></expr>]</index></name> <op:operator pos:line="184" pos:column="47">=</op:operator> <name><name pos:line="184" pos:column="49">newAdapterType</name><op:operator pos:line="184" pos:column="63">.</op:operator><name pos:line="184" pos:column="64">AssemblyQualifiedName</name></name></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>
            }</block></foreach>

            <if pos:line="189" pos:column="13">if <condition pos:line="189" pos:column="16">(<expr><op:operator pos:line="189" pos:column="17">!</op:operator><call><name><name pos:line="189" pos:column="18">adapters</name><op:operator pos:line="189" pos:column="26">.</op:operator><name pos:line="189" pos:column="27">Contains</name></name><argument_list pos:line="189" pos:column="35">(<argument><expr><name><name pos:line="189" pos:column="36">dataBoundControlType</name><op:operator pos:line="189" pos:column="56">.</op:operator><name pos:line="189" pos:column="57">AssemblyQualifiedName</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="189" pos:column="80">
            <block pos:line="190" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="191" pos:column="17">adapters</name><op:operator pos:line="191" pos:column="25">.</op:operator><name pos:line="191" pos:column="26">Add</name></name><argument_list pos:line="191" pos:column="29">(<argument><expr><name><name pos:line="191" pos:column="30">dataBoundControlType</name><op:operator pos:line="191" pos:column="50">.</op:operator><name pos:line="191" pos:column="51">AssemblyQualifiedName</name></name></expr></argument>, <argument><expr><name><name pos:line="191" pos:column="74">dataBoundControlAdapterType</name><op:operator pos:line="191" pos:column="101">.</op:operator><name pos:line="191" pos:column="102">AssemblyQualifiedName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="195" pos:column="9">private</specifier> <name pos:line="195" pos:column="17">object</name></type> <name pos:line="195" pos:column="24">ProcessData</name><parameter_list pos:line="195" pos:column="35">(<param><decl><type><name pos:line="195" pos:column="36">DataTable</name></type> <name pos:line="195" pos:column="46">dataTable</name></decl></param>, <param><decl><type><name pos:line="195" pos:column="57">ILogger</name></type> <name pos:line="195" pos:column="65">logger</name></decl></param>, <param><decl><type><name><name pos:line="195" pos:column="73">IEnumerable</name><argument_list pos:line="195" pos:column="84">&lt;<argument><name pos:line="195" pos:column="85">PageLifeCycleMessage</name></argument>&gt;</argument_list></name></type> <name pos:line="195" pos:column="107">pageLifeCycleMessages</name></decl></param>)</parameter_list>
        <block pos:line="196" pos:column="9">{
            <if pos:line="197" pos:column="13">if <condition pos:line="197" pos:column="16">(<expr><name pos:line="197" pos:column="17">dataTable</name> <op:operator pos:line="197" pos:column="27">!=</op:operator> <name pos:line="197" pos:column="30">null</name></expr>)</condition><then pos:line="197" pos:column="35">
            <block pos:line="198" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="199" pos:column="17">var</name></type> <name pos:line="199" pos:column="21">controlList</name> <init pos:line="199" pos:column="33">= <expr><op:operator pos:line="199" pos:column="35">new</op:operator> <call><name><name pos:line="199" pos:column="39">List</name><argument_list pos:line="199" pos:column="43">&lt;<argument><name pos:line="199" pos:column="44">ControlTreeItemModel</name></argument>&gt;</argument_list></name><argument_list pos:line="199" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="200" pos:column="17">var</name></type> <name pos:line="200" pos:column="21">nodeGraph</name> <init pos:line="200" pos:column="31">= <expr><op:operator pos:line="200" pos:column="33">new</op:operator> <name pos:line="200" pos:column="37">ControlTreeItemTrackModel</name> <block pos:line="200" pos:column="63">{ <expr><name pos:line="200" pos:column="65">ControlId</name> <op:operator pos:line="200" pos:column="75">=</op:operator> <lit:literal type="string" pos:line="200" pos:column="77">"ROOT"</lit:literal></expr>, <expr><name pos:line="200" pos:column="85">Indent</name> <op:operator pos:line="200" pos:column="92">=</op:operator> <op:operator pos:line="200" pos:column="94">-</op:operator><lit:literal type="number" pos:line="200" pos:column="95">1</lit:literal></expr> }</block></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="201" pos:column="17">var</name></type> <name pos:line="201" pos:column="21">nodeList</name> <init pos:line="201" pos:column="30">= <expr><op:operator pos:line="201" pos:column="32">new</op:operator> <name><name pos:line="201" pos:column="36">Dictionary</name><argument_list pos:line="201" pos:column="46">&lt;<argument><name pos:line="201" pos:column="47">string</name></argument>, <argument><name pos:line="201" pos:column="55">ControlTreeItemTrackModel</name></argument>&gt;</argument_list></name> <block pos:line="201" pos:column="82">{ <expr><block pos:line="201" pos:column="84">{ <expr><lit:literal type="string" pos:line="201" pos:column="86">"ROOT"</lit:literal></expr>, <expr><name pos:line="201" pos:column="94">nodeGraph</name></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name pos:line="203" pos:column="17">logger</name><op:operator pos:line="203" pos:column="23">.</op:operator><name pos:line="203" pos:column="24">Debug</name></name><argument_list pos:line="203" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="203" pos:column="30">"Start processing `Trace_Control_Tree`"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name pos:line="205" pos:column="17">var</name></type> <name pos:line="205" pos:column="21">enumerator</name> <init pos:line="205" pos:column="32">= <expr><call><name><name pos:line="205" pos:column="34">dataTable</name><op:operator pos:line="205" pos:column="43">.</op:operator><name pos:line="205" pos:column="44">Rows</name><op:operator pos:line="205" pos:column="48">.</op:operator><name pos:line="205" pos:column="49">GetEnumerator</name></name><argument_list pos:line="205" pos:column="62">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <while pos:line="206" pos:column="17">while <condition pos:line="206" pos:column="23">(<expr><call><name><name pos:line="206" pos:column="24">enumerator</name><op:operator pos:line="206" pos:column="34">.</op:operator><name pos:line="206" pos:column="35">MoveNext</name></name><argument_list pos:line="206" pos:column="43">()</argument_list></call></expr>)</condition>
                <block pos:line="207" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="208" pos:column="21">var</name></type> <name pos:line="208" pos:column="25">item</name> <init pos:line="208" pos:column="30">= <expr><op:operator pos:line="208" pos:column="32">new</op:operator> <call><name pos:line="208" pos:column="36">ControlTreeItemModel</name><argument_list pos:line="208" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="209" pos:column="21">var</name></type> <name pos:line="209" pos:column="25">current</name> <init pos:line="209" pos:column="33">= <expr><name><name pos:line="209" pos:column="35">enumerator</name><op:operator pos:line="209" pos:column="45">.</op:operator><name pos:line="209" pos:column="46">Current</name></name> <op:operator pos:line="209" pos:column="54">as</op:operator> <name pos:line="209" pos:column="57">DataRow</name></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><name><name pos:line="211" pos:column="21">item</name><op:operator pos:line="211" pos:column="25">.</op:operator><name pos:line="211" pos:column="26">ParentControlId</name></name> <op:operator pos:line="211" pos:column="42">=</op:operator> <name><name pos:line="211" pos:column="44">current</name><index pos:line="211" pos:column="51">[<expr><lit:literal type="string" pos:line="211" pos:column="52">"Trace_Parent_Id"</lit:literal></expr>]</index></name><op:operator pos:line="211" pos:column="70">.</op:operator><call><name><name pos:line="211" pos:column="71">CastOrDefault</name><argument_list pos:line="211" pos:column="84">&lt;<argument><name pos:line="211" pos:column="85">string</name></argument>&gt;</argument_list></name><argument_list pos:line="211" pos:column="92">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="212" pos:column="21">item</name><op:operator pos:line="212" pos:column="25">.</op:operator><name pos:line="212" pos:column="26">ControlId</name></name> <op:operator pos:line="212" pos:column="36">=</op:operator> <name><name pos:line="212" pos:column="38">current</name><index pos:line="212" pos:column="45">[<expr><lit:literal type="string" pos:line="212" pos:column="46">"Trace_Control_Id"</lit:literal></expr>]</index></name><op:operator pos:line="212" pos:column="65">.</op:operator><call><name><name pos:line="212" pos:column="66">CastOrDefault</name><argument_list pos:line="212" pos:column="79">&lt;<argument><name pos:line="212" pos:column="80">string</name></argument>&gt;</argument_list></name><argument_list pos:line="212" pos:column="87">()</argument_list></call></expr>;</expr_stmt>

                    <decl_stmt><decl><type><name pos:line="214" pos:column="21">var</name></type> <name pos:line="214" pos:column="25">num</name> <init pos:line="214" pos:column="29">= <expr><name><name pos:line="214" pos:column="31">nodeList</name><index pos:line="214" pos:column="39">[<expr><name><name pos:line="214" pos:column="40">item</name><op:operator pos:line="214" pos:column="44">.</op:operator><name pos:line="214" pos:column="45">ParentControlId</name></name></expr>]</index></name><op:operator pos:line="214" pos:column="61">.</op:operator><name pos:line="214" pos:column="62">Indent</name> <op:operator pos:line="214" pos:column="69">+</op:operator> <lit:literal type="number" pos:line="214" pos:column="71">1</lit:literal></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name><name pos:line="215" pos:column="21">nodeList</name><index pos:line="215" pos:column="29">[<expr><name><name pos:line="215" pos:column="30">item</name><op:operator pos:line="215" pos:column="34">.</op:operator><name pos:line="215" pos:column="35">ControlId</name></name></expr>]</index></name> <op:operator pos:line="215" pos:column="46">=</op:operator> <op:operator pos:line="215" pos:column="48">new</op:operator> <name pos:line="215" pos:column="52">ControlTreeItemTrackModel</name>
                    <block pos:line="216" pos:column="21">{
                        <expr><name pos:line="217" pos:column="25">ParentControlId</name> <op:operator pos:line="217" pos:column="41">=</op:operator> <name><name pos:line="217" pos:column="43">item</name><op:operator pos:line="217" pos:column="47">.</op:operator><name pos:line="217" pos:column="48">ParentControlId</name></name></expr><op:operator pos:line="217" pos:column="63">,</op:operator>
                        <expr><name pos:line="218" pos:column="25">ControlId</name> <op:operator pos:line="218" pos:column="35">=</op:operator> <name><name pos:line="218" pos:column="37">item</name><op:operator pos:line="218" pos:column="41">.</op:operator><name pos:line="218" pos:column="42">ControlId</name></name></expr><op:operator pos:line="218" pos:column="51">,</op:operator>
                        <expr><name pos:line="219" pos:column="25">Indent</name> <op:operator pos:line="219" pos:column="32">=</op:operator> <name pos:line="219" pos:column="34">num</name></expr><op:operator pos:line="219" pos:column="37">,</op:operator>
                        <expr><name pos:line="220" pos:column="25">Record</name> <op:operator pos:line="220" pos:column="32">=</op:operator> <name pos:line="220" pos:column="34">item</name></expr>
                    }</block></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="222" pos:column="21">nodeList</name><index pos:line="222" pos:column="29">[<expr><name><name pos:line="222" pos:column="30">item</name><op:operator pos:line="222" pos:column="34">.</op:operator><name pos:line="222" pos:column="35">ParentControlId</name></name></expr>]</index></name><op:operator pos:line="222" pos:column="51">.</op:operator><call><name><name pos:line="222" pos:column="52">Children</name><op:operator pos:line="222" pos:column="60">.</op:operator><name pos:line="222" pos:column="61">Add</name></name><argument_list pos:line="222" pos:column="64">(<argument><expr><name><name pos:line="222" pos:column="65">nodeList</name><index pos:line="222" pos:column="73">[<expr><name><name pos:line="222" pos:column="74">item</name><op:operator pos:line="222" pos:column="78">.</op:operator><name pos:line="222" pos:column="79">ControlId</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="line" pos:line="224" pos:column="21">// This logic shouldn't be here</comment>
                    <for pos:line="225" pos:column="21">for (<init><decl><type><name pos:line="225" pos:column="26">var</name></type> <name pos:line="225" pos:column="30">index</name> <init pos:line="225" pos:column="36">= <expr><lit:literal type="number" pos:line="225" pos:column="38">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="225" pos:column="41">index</name> <op:operator pos:line="225" pos:column="47">&lt;</op:operator> <name pos:line="225" pos:column="49">num</name></expr>;</condition> <incr><expr><op:operator pos:line="225" pos:column="54">++</op:operator><name pos:line="225" pos:column="56">index</name></expr></incr>)
                    <block pos:line="226" pos:column="21">{
                        <expr_stmt><expr><name><name pos:line="227" pos:column="25">item</name><op:operator pos:line="227" pos:column="29">.</op:operator><name pos:line="227" pos:column="30">ControlId</name></name> <op:operator pos:line="227" pos:column="40">=</op:operator> <lit:literal type="string" pos:line="227" pos:column="42">"\t"</lit:literal> <op:operator pos:line="227" pos:column="47">+</op:operator> <name><name pos:line="227" pos:column="49">item</name><op:operator pos:line="227" pos:column="53">.</op:operator><name pos:line="227" pos:column="54">ControlId</name></name></expr>;</expr_stmt>
                    }</block></for>

                    <expr_stmt><expr><name><name pos:line="230" pos:column="21">item</name><op:operator pos:line="230" pos:column="25">.</op:operator><name pos:line="230" pos:column="26">Level</name></name> <op:operator pos:line="230" pos:column="32">=</op:operator> <name pos:line="230" pos:column="34">num</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="231" pos:column="21">item</name><op:operator pos:line="231" pos:column="25">.</op:operator><name pos:line="231" pos:column="26">Type</name></name> <op:operator pos:line="231" pos:column="31">=</op:operator> <name><name pos:line="231" pos:column="33">current</name><index pos:line="231" pos:column="40">[<expr><lit:literal type="string" pos:line="231" pos:column="41">"Trace_Type"</lit:literal></expr>]</index></name><op:operator pos:line="231" pos:column="54">.</op:operator><call><name><name pos:line="231" pos:column="55">CastOrDefault</name><argument_list pos:line="231" pos:column="68">&lt;<argument><name pos:line="231" pos:column="69">string</name></argument>&gt;</argument_list></name><argument_list pos:line="231" pos:column="76">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="232" pos:column="21">item</name><op:operator pos:line="232" pos:column="25">.</op:operator><name pos:line="232" pos:column="26">RenderSize</name></name> <op:operator pos:line="232" pos:column="37">=</op:operator> <name><name pos:line="232" pos:column="39">current</name><index pos:line="232" pos:column="46">[<expr><lit:literal type="string" pos:line="232" pos:column="47">"Trace_Render_Size"</lit:literal></expr>]</index></name><op:operator pos:line="232" pos:column="67">.</op:operator><call><name><name pos:line="232" pos:column="68">CastOrDefault</name><argument_list pos:line="232" pos:column="81">&lt;<argument><name pos:line="232" pos:column="82">int</name></argument>&gt;</argument_list></name><argument_list pos:line="232" pos:column="86">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="233" pos:column="21">item</name><op:operator pos:line="233" pos:column="25">.</op:operator><name pos:line="233" pos:column="26">ViewstateSize</name></name> <op:operator pos:line="233" pos:column="40">=</op:operator> <name><name pos:line="233" pos:column="42">current</name><index pos:line="233" pos:column="49">[<expr><lit:literal type="string" pos:line="233" pos:column="50">"Trace_Viewstate_Size"</lit:literal></expr>]</index></name><op:operator pos:line="233" pos:column="73">.</op:operator><call><name><name pos:line="233" pos:column="74">CastOrDefault</name><argument_list pos:line="233" pos:column="87">&lt;<argument><name pos:line="233" pos:column="88">int</name></argument>&gt;</argument_list></name><argument_list pos:line="233" pos:column="92">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="234" pos:column="21">item</name><op:operator pos:line="234" pos:column="25">.</op:operator><name pos:line="234" pos:column="26">ControlstateSize</name></name> <op:operator pos:line="234" pos:column="43">=</op:operator> <name><name pos:line="234" pos:column="45">current</name><index pos:line="234" pos:column="52">[<expr><lit:literal type="string" pos:line="234" pos:column="53">"Trace_Controlstate_Size"</lit:literal></expr>]</index></name><op:operator pos:line="234" pos:column="79">.</op:operator><call><name><name pos:line="234" pos:column="80">CastOrDefault</name><argument_list pos:line="234" pos:column="93">&lt;<argument><name pos:line="234" pos:column="94">int</name></argument>&gt;</argument_list></name><argument_list pos:line="234" pos:column="98">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name><name pos:line="236" pos:column="21">controlList</name><op:operator pos:line="236" pos:column="32">.</op:operator><name pos:line="236" pos:column="33">Add</name></name><argument_list pos:line="236" pos:column="36">(<argument><expr><name pos:line="236" pos:column="37">item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></while>

                <expr_stmt><expr><call><name><name pos:line="239" pos:column="17">logger</name><op:operator pos:line="239" pos:column="23">.</op:operator><name pos:line="239" pos:column="24">Debug</name></name><argument_list pos:line="239" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="239" pos:column="30">"Finish processing `Trace_Control_Tree` - Count {0}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="239" pos:column="84">nodeList</name><op:operator pos:line="239" pos:column="92">.</op:operator><name pos:line="239" pos:column="93">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name pos:line="241" pos:column="17">viewStateFormatter</name><op:operator pos:line="241" pos:column="35">.</op:operator><name pos:line="241" pos:column="36">Process</name></name><argument_list pos:line="241" pos:column="43">(<argument><expr><name pos:line="241" pos:column="44">nodeGraph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="242" pos:column="17">dataBindFormatter</name><op:operator pos:line="242" pos:column="34">.</op:operator><name pos:line="242" pos:column="35">Process</name></name><argument_list pos:line="242" pos:column="42">(<argument><expr><name pos:line="242" pos:column="43">nodeGraph</name></expr></argument>, <argument><expr><name pos:line="242" pos:column="54">pageLifeCycleMessages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:line="244" pos:column="17">return <expr><name pos:line="244" pos:column="24">controlList</name></expr>;</return>
            }</block></then></if>

            <return pos:line="247" pos:column="13">return <expr><name pos:line="247" pos:column="20">null</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
