<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Common\GlimpseCustomizations.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">System</name><op:operator pos:line="1" pos:column="13">.</op:operator><name pos:line="1" pos:column="14">ComponentModel</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">IO</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Web</name><op:operator pos:line="3" pos:column="17">.</op:operator><name pos:line="3" pos:column="18">Mvc</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Core</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Glimpse</name><op:operator pos:line="5" pos:column="14">.</op:operator><name pos:line="5" pos:column="15">Core</name><op:operator pos:line="5" pos:column="19">.</op:operator><name pos:line="5" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Glimpse</name><op:operator pos:line="6" pos:column="14">.</op:operator><name pos:line="6" pos:column="15">Mvc</name><op:operator pos:line="6" pos:column="18">.</op:operator><name pos:line="6" pos:column="19">AlternateType</name></name>;</using>
<using pos:line="7" pos:column="1">using <name pos:line="7" pos:column="7">Moq</name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Ploeh</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">AutoFixture</name></name>;</using>

<namespace pos:line="10" pos:column="1">namespace <name><name pos:line="10" pos:column="11">Glimpse</name><op:operator pos:line="10" pos:column="18">.</op:operator><name pos:line="10" pos:column="19">Test</name><op:operator pos:line="10" pos:column="23">.</op:operator><name pos:line="10" pos:column="24">Common</name></name>
<block pos:line="11" pos:column="1">{
    <class><specifier pos:line="12" pos:column="5">public</specifier> class <name pos:line="12" pos:column="18">GlimpseCustomizations</name> <super pos:line="12" pos:column="40">: <name pos:line="12" pos:column="42">ICustomization</name></super>
    <block pos:line="13" pos:column="5">{
        <function><type><specifier pos:line="14" pos:column="9">public</specifier> <name pos:line="14" pos:column="16">void</name></type> <name pos:line="14" pos:column="21">Customize</name><parameter_list pos:line="14" pos:column="30">(<param><decl><type><name pos:line="14" pos:column="31">IFixture</name></type> <name pos:line="14" pos:column="40">fixture</name></decl></param>)</parameter_list>
        <block pos:line="15" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="16" pos:column="13">IAlternateMethodContext</name><argument_list pos:line="16" pos:column="36">(<argument><expr><name pos:line="16" pos:column="37">fixture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name pos:line="18" pos:column="13">ViewEngineFindViewArguments</name><argument_list pos:line="18" pos:column="40">(<argument><expr><name pos:line="18" pos:column="41">fixture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name pos:line="20" pos:column="13">ViewRenderArguments</name><argument_list pos:line="20" pos:column="32">(<argument><expr><name pos:line="20" pos:column="33">fixture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name pos:line="22" pos:column="13">ModelBindBindModelArguments</name><argument_list pos:line="22" pos:column="40">(<argument><expr><name pos:line="22" pos:column="41">fixture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name pos:line="24" pos:column="13">ModelBinderBindPropertyArguments</name><argument_list pos:line="24" pos:column="45">(<argument><expr><name pos:line="24" pos:column="46">fixture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name pos:line="26" pos:column="13">ValueProviderGetValueArguments</name><argument_list pos:line="26" pos:column="43">(<argument><expr><name pos:line="26" pos:column="44">fixture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name pos:line="28" pos:column="13">ControllerFactoryCreateController</name><argument_list pos:line="28" pos:column="46">(<argument><expr><name pos:line="28" pos:column="47">fixture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name pos:line="30" pos:column="13">TraceListener</name><argument_list pos:line="30" pos:column="26">(<argument><expr><name pos:line="30" pos:column="27">fixture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="33" pos:column="9">private</specifier> <specifier pos:line="33" pos:column="17">static</specifier> <name pos:line="33" pos:column="24">void</name></type> <name pos:line="33" pos:column="29">TraceListener</name><parameter_list pos:line="33" pos:column="42">(<param><decl><type><name pos:line="33" pos:column="43">IFixture</name></type> <name pos:line="33" pos:column="52">fixture</name></decl></param>)</parameter_list>
        <block pos:line="34" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="35" pos:column="13">fixture</name><op:operator pos:line="35" pos:column="20">.</op:operator><name><name pos:line="35" pos:column="21">Register</name><argument_list pos:line="35" pos:column="29">&lt;<argument><name pos:line="35" pos:column="30">IMessageBroker</name></argument>, <argument><name pos:line="35" pos:column="46">IExecutionTimer</name></argument>, <argument><name pos:line="35" pos:column="63">TraceListener</name></argument>&gt;</argument_list></name></name><argument_list pos:line="35" pos:column="77">(
                <argument><expr><lambda><parameter_list pos:line="36" pos:column="17">(<param><decl><name pos:line="36" pos:column="18">messageBroker</name></decl></param>, <param><decl><name pos:line="36" pos:column="33">executionTimer</name></decl></param>)</parameter_list> <op:operator pos:line="36" pos:column="49">=&gt;</op:operator>
                <op:operator pos:line="37" pos:column="17">new</op:operator> <call><name pos:line="37" pos:column="21">TraceListener</name><argument_list pos:line="37" pos:column="34">(<argument><expr><name pos:line="37" pos:column="35">messageBroker</name></expr></argument>, <argument><expr><lambda><parameter_list pos:line="37" pos:column="50">()</parameter_list> <op:operator pos:line="37" pos:column="53">=&gt;</op:operator> <name pos:line="37" pos:column="56">executionTimer</name></lambda></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="40" pos:column="9">private</specifier> <specifier pos:line="40" pos:column="17">static</specifier> <name pos:line="40" pos:column="24">void</name></type> <name pos:line="40" pos:column="29">ControllerFactoryCreateController</name><parameter_list pos:line="40" pos:column="62">(<param><decl><type><name pos:line="40" pos:column="63">IFixture</name></type> <name pos:line="40" pos:column="72">fixture</name></decl></param>)</parameter_list>
        <block pos:line="41" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="42" pos:column="13">fixture</name><op:operator pos:line="42" pos:column="20">.</op:operator><name><name pos:line="42" pos:column="21">Register</name><argument_list pos:line="42" pos:column="29">&lt;<argument><name pos:line="42" pos:column="30">IProxyFactory</name></argument>, <argument><name><name pos:line="42" pos:column="45">ControllerFactory</name><op:operator pos:line="42" pos:column="62">.</op:operator><name pos:line="42" pos:column="63">CreateController</name></name></argument>&gt;</argument_list></name></name><argument_list pos:line="42" pos:column="80">(
                <argument><expr><lambda><parameter_list pos:line="43" pos:column="17">(<param><decl><name pos:line="43" pos:column="18">proxyFactory</name></decl></param>)</parameter_list> <op:operator pos:line="43" pos:column="32">=&gt;</op:operator>
                <op:operator pos:line="44" pos:column="17">new</op:operator> <call><name><name pos:line="44" pos:column="21">ControllerFactory</name><op:operator pos:line="44" pos:column="38">.</op:operator><name pos:line="44" pos:column="39">CreateController</name></name><argument_list pos:line="44" pos:column="55">(<argument><expr><op:operator pos:line="44" pos:column="56">new</op:operator> <call><name pos:line="44" pos:column="60">ActionInvoker</name><argument_list pos:line="44" pos:column="73">(<argument><expr><name pos:line="44" pos:column="74">proxyFactory</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="44" pos:column="89">new</op:operator> <call><name pos:line="44" pos:column="93">AsyncActionInvoker</name><argument_list pos:line="44" pos:column="111">(<argument><expr><name pos:line="44" pos:column="112">proxyFactory</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="47" pos:column="9">private</specifier> <specifier pos:line="47" pos:column="17">static</specifier> <name pos:line="47" pos:column="24">void</name></type> <name pos:line="47" pos:column="29">ValueProviderGetValueArguments</name><parameter_list pos:line="47" pos:column="59">(<param><decl><type><name pos:line="47" pos:column="60">IFixture</name></type> <name pos:line="47" pos:column="69">fixture</name></decl></param>)</parameter_list>
        <block pos:line="48" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="49" pos:column="13">fixture</name><op:operator pos:line="49" pos:column="20">.</op:operator><name><name pos:line="49" pos:column="21">Register</name><argument_list pos:line="49" pos:column="29">&lt;<argument><name pos:line="49" pos:column="30">string</name></argument>, <argument><name><name><name pos:line="49" pos:column="38">ValueProvider</name><argument_list pos:line="49" pos:column="51">&lt;<argument><name pos:line="49" pos:column="52">IValueProvider</name></argument>&gt;</argument_list></name><op:operator pos:line="49" pos:column="67">.</op:operator><name pos:line="49" pos:column="68">GetValue</name><op:operator pos:line="49" pos:column="76">.</op:operator><name pos:line="49" pos:column="77">Arguments</name></name></argument>&gt;</argument_list></name></name><argument_list pos:line="49" pos:column="87">(
                <argument><expr><lambda><name pos:line="50" pos:column="17">key</name> <op:operator pos:line="50" pos:column="21">=&gt;</op:operator>
                <op:operator pos:line="51" pos:column="17">new</op:operator> <call><name><name><name pos:line="51" pos:column="21">ValueProvider</name><argument_list pos:line="51" pos:column="34">&lt;<argument><name pos:line="51" pos:column="35">IValueProvider</name></argument>&gt;</argument_list></name><op:operator pos:line="51" pos:column="50">.</op:operator><name pos:line="51" pos:column="51">GetValue</name><op:operator pos:line="51" pos:column="59">.</op:operator><name pos:line="51" pos:column="60">Arguments</name></name><argument_list pos:line="51" pos:column="69">(<argument><expr><name pos:line="51" pos:column="70">key</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="52" pos:column="13">fixture</name><op:operator pos:line="52" pos:column="20">.</op:operator><name><name pos:line="52" pos:column="21">Register</name><argument_list pos:line="52" pos:column="29">&lt;<argument><name pos:line="52" pos:column="30">string</name></argument>, <argument><name pos:line="52" pos:column="38">bool</name></argument>, <argument><name><name><name pos:line="52" pos:column="44">ValueProvider</name><argument_list pos:line="52" pos:column="57">&lt;<argument><name pos:line="52" pos:column="58">IUnvalidatedValueProvider</name></argument>&gt;</argument_list></name><op:operator pos:line="52" pos:column="84">.</op:operator><name pos:line="52" pos:column="85">GetValue</name><op:operator pos:line="52" pos:column="93">.</op:operator><name pos:line="52" pos:column="94">Arguments</name></name></argument>&gt;</argument_list></name></name><argument_list pos:line="52" pos:column="104">(
                <argument><expr><lambda><parameter_list pos:line="53" pos:column="17">(<param><decl><name pos:line="53" pos:column="18">key</name></decl></param>, <param><decl><name pos:line="53" pos:column="23">skipValidation</name></decl></param>)</parameter_list> <op:operator pos:line="53" pos:column="39">=&gt;</op:operator>
                <op:operator pos:line="54" pos:column="17">new</op:operator> <call><name><name><name pos:line="54" pos:column="21">ValueProvider</name><argument_list pos:line="54" pos:column="34">&lt;<argument><name pos:line="54" pos:column="35">IUnvalidatedValueProvider</name></argument>&gt;</argument_list></name><op:operator pos:line="54" pos:column="61">.</op:operator><name pos:line="54" pos:column="62">GetValue</name><op:operator pos:line="54" pos:column="70">.</op:operator><name pos:line="54" pos:column="71">Arguments</name></name><argument_list pos:line="54" pos:column="80">(<argument><expr><name pos:line="54" pos:column="81">key</name></expr></argument>, <argument><expr><name pos:line="54" pos:column="86">skipValidation</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="57" pos:column="9">private</specifier> <specifier pos:line="57" pos:column="17">static</specifier> <name pos:line="57" pos:column="24">void</name></type> <name pos:line="57" pos:column="29">ModelBinderBindPropertyArguments</name><parameter_list pos:line="57" pos:column="61">(<param><decl><type><name pos:line="57" pos:column="62">IFixture</name></type> <name pos:line="57" pos:column="71">fixture</name></decl></param>)</parameter_list>
        <block pos:line="58" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="59" pos:column="13">fixture</name><op:operator pos:line="59" pos:column="20">.</op:operator><name><name pos:line="59" pos:column="21">Register</name><argument_list pos:line="59" pos:column="29">&lt;<argument><name pos:line="59" pos:column="30">ControllerContext</name></argument>, <argument><name pos:line="59" pos:column="49">ModelBindingContext</name></argument>, <argument><name pos:line="59" pos:column="70">PropertyDescriptor</name></argument>, <argument><name><name pos:line="59" pos:column="90">ModelBinder</name><op:operator pos:line="59" pos:column="101">.</op:operator><name pos:line="59" pos:column="102">BindProperty</name><op:operator pos:line="59" pos:column="114">.</op:operator><name pos:line="59" pos:column="115">Arguments</name></name></argument>&gt;</argument_list></name></name><argument_list pos:line="59" pos:column="125">(
                <argument><expr><lambda><parameter_list pos:line="60" pos:column="17">(<param><decl><name pos:line="60" pos:column="18">controllerContext</name></decl></param>, <param><decl><name pos:line="60" pos:column="37">modelBindingContext</name></decl></param>, <param><decl><name pos:line="60" pos:column="58">propertyDescriptor</name></decl></param>)</parameter_list> <op:operator pos:line="60" pos:column="78">=&gt;</op:operator>
                <op:operator pos:line="61" pos:column="17">new</op:operator> <call><name><name pos:line="61" pos:column="21">ModelBinder</name><op:operator pos:line="61" pos:column="32">.</op:operator><name pos:line="61" pos:column="33">BindProperty</name><op:operator pos:line="61" pos:column="45">.</op:operator><name pos:line="61" pos:column="46">Arguments</name></name><argument_list pos:line="61" pos:column="55">(<argument><expr><name pos:line="61" pos:column="56">controllerContext</name></expr></argument>, <argument><expr><name pos:line="61" pos:column="75">modelBindingContext</name></expr></argument>, <argument><expr><name pos:line="61" pos:column="96">propertyDescriptor</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="64" pos:column="9">private</specifier> <specifier pos:line="64" pos:column="17">static</specifier> <name pos:line="64" pos:column="24">void</name></type> <name pos:line="64" pos:column="29">ModelBindBindModelArguments</name><parameter_list pos:line="64" pos:column="56">(<param><decl><type><name pos:line="64" pos:column="57">IFixture</name></type> <name pos:line="64" pos:column="66">fixture</name></decl></param>)</parameter_list>
        <block pos:line="65" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="66" pos:column="13">fixture</name><op:operator pos:line="66" pos:column="20">.</op:operator><name><name pos:line="66" pos:column="21">Register</name><argument_list pos:line="66" pos:column="29">&lt;<argument><name pos:line="66" pos:column="30">ControllerContext</name></argument>, <argument><name pos:line="66" pos:column="49">ModelBindingContext</name></argument>, <argument><name><name pos:line="66" pos:column="70">ModelBinder</name><op:operator pos:line="66" pos:column="81">.</op:operator><name pos:line="66" pos:column="82">BindModel</name><op:operator pos:line="66" pos:column="91">.</op:operator><name pos:line="66" pos:column="92">Arguments</name></name></argument>&gt;</argument_list></name></name><argument_list pos:line="66" pos:column="102">(
                <argument><expr><lambda><parameter_list pos:line="67" pos:column="17">(<param><decl><name pos:line="67" pos:column="18">controllerContext</name></decl></param>, <param><decl><name pos:line="67" pos:column="37">modelBindingContext</name></decl></param>)</parameter_list> <op:operator pos:line="67" pos:column="58">=&gt;</op:operator>
                <op:operator pos:line="68" pos:column="17">new</op:operator> <call><name><name pos:line="68" pos:column="21">ModelBinder</name><op:operator pos:line="68" pos:column="32">.</op:operator><name pos:line="68" pos:column="33">BindModel</name><op:operator pos:line="68" pos:column="42">.</op:operator><name pos:line="68" pos:column="43">Arguments</name></name><argument_list pos:line="68" pos:column="52">(<argument><expr><name pos:line="68" pos:column="53">controllerContext</name></expr></argument>, <argument><expr><name pos:line="68" pos:column="72">modelBindingContext</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="71" pos:column="9">private</specifier> <specifier pos:line="71" pos:column="17">static</specifier> <name pos:line="71" pos:column="24">void</name></type> <name pos:line="71" pos:column="29">ViewRenderArguments</name><parameter_list pos:line="71" pos:column="48">(<param><decl><type><name pos:line="71" pos:column="49">IFixture</name></type> <name pos:line="71" pos:column="58">fixture</name></decl></param>)</parameter_list>
        <block pos:line="72" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="73" pos:column="13">fixture</name><op:operator pos:line="73" pos:column="20">.</op:operator><name><name pos:line="73" pos:column="21">Register</name><argument_list pos:line="73" pos:column="29">&lt;<argument><name pos:line="73" pos:column="30">ViewContext</name></argument>, <argument><name><name pos:line="73" pos:column="43">View</name><op:operator pos:line="73" pos:column="47">.</op:operator><name pos:line="73" pos:column="48">Render</name><op:operator pos:line="73" pos:column="54">.</op:operator><name pos:line="73" pos:column="55">Arguments</name></name></argument>&gt;</argument_list></name></name><argument_list pos:line="73" pos:column="65">(
                <argument><expr><lambda><name pos:line="74" pos:column="17">viewContext</name> <op:operator pos:line="74" pos:column="29">=&gt;</op:operator>
                <op:operator pos:line="75" pos:column="17">new</op:operator> <call><name><name pos:line="75" pos:column="21">View</name><op:operator pos:line="75" pos:column="25">.</op:operator><name pos:line="75" pos:column="26">Render</name><op:operator pos:line="75" pos:column="32">.</op:operator><name pos:line="75" pos:column="33">Arguments</name></name><argument_list pos:line="75" pos:column="42">(<argument><expr><name pos:line="75" pos:column="43">viewContext</name></expr></argument>, <argument><expr><op:operator pos:line="75" pos:column="56">new</op:operator> <call><name pos:line="75" pos:column="60">StringWriter</name><argument_list pos:line="75" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="78" pos:column="9">private</specifier> <specifier pos:line="78" pos:column="17">static</specifier> <name pos:line="78" pos:column="24">void</name></type> <name pos:line="78" pos:column="29">ViewEngineFindViewArguments</name><parameter_list pos:line="78" pos:column="56">(<param><decl><type><name pos:line="78" pos:column="57">IFixture</name></type> <name pos:line="78" pos:column="66">fixture</name></decl></param>)</parameter_list>
        <block pos:line="79" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="80" pos:column="13">fixture</name><op:operator pos:line="80" pos:column="20">.</op:operator><name><name pos:line="80" pos:column="21">Register</name><argument_list pos:line="80" pos:column="29">&lt;<argument><name pos:line="80" pos:column="30">string</name></argument>, <argument><name pos:line="80" pos:column="38">bool</name></argument>, <argument><name><name pos:line="80" pos:column="44">ViewEngine</name><op:operator pos:line="80" pos:column="54">.</op:operator><name pos:line="80" pos:column="55">FindViews</name><op:operator pos:line="80" pos:column="64">.</op:operator><name pos:line="80" pos:column="65">Arguments</name></name></argument>&gt;</argument_list></name></name><argument_list pos:line="80" pos:column="75">(
                <argument><expr><lambda><parameter_list pos:line="81" pos:column="17">(<param><decl><name pos:line="81" pos:column="18">viewName</name></decl></param>, <param><decl><name pos:line="81" pos:column="28">isPartial</name></decl></param>)</parameter_list> <op:operator pos:line="81" pos:column="39">=&gt;</op:operator>
                <op:operator pos:line="82" pos:column="17">new</op:operator> <call><name><name pos:line="82" pos:column="21">ViewEngine</name><op:operator pos:line="82" pos:column="31">.</op:operator><name pos:line="82" pos:column="32">FindViews</name><op:operator pos:line="82" pos:column="41">.</op:operator><name pos:line="82" pos:column="42">Arguments</name></name><argument_list pos:line="82" pos:column="51">(<argument><expr><name pos:line="82" pos:column="52">isPartial</name></expr></argument>, <argument><expr><op:operator pos:line="82" pos:column="63">new</op:operator> <call><name pos:line="82" pos:column="67">ControllerContext</name><argument_list pos:line="82" pos:column="84">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="82" pos:column="88">viewName</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="82" pos:column="98">true</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

<comment type="line" pos:line="85" pos:column="1">// ReSharper disable InconsistentNaming</comment>
        <function><type><specifier pos:line="86" pos:column="9">private</specifier> <specifier pos:line="86" pos:column="17">static</specifier> <name pos:line="86" pos:column="24">void</name></type> <name pos:line="86" pos:column="29">IAlternateMethodContext</name><parameter_list pos:line="86" pos:column="52">(<param><decl><type><name pos:line="86" pos:column="53">IFixture</name></type> <name pos:line="86" pos:column="62">fixture</name></decl></param>)</parameter_list>
<comment type="line" pos:line="87" pos:column="1">// ReSharper restore InconsistentNaming</comment>
        <block pos:line="88" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="89" pos:column="13">fixture</name><op:operator pos:line="89" pos:column="20">.</op:operator><name><name pos:line="89" pos:column="21">Register</name><argument_list pos:line="89" pos:column="29">&lt;<argument><name pos:line="89" pos:column="30">IMessageBroker</name></argument>, <argument><name pos:line="89" pos:column="46">IProxyFactory</name></argument>, <argument><name pos:line="89" pos:column="61">IExecutionTimer</name></argument>, <argument><name pos:line="89" pos:column="78">ILogger</name></argument>, <argument><name pos:line="89" pos:column="87">IAlternateMethodContext</name></argument>&gt;</argument_list></name></name><argument_list pos:line="89" pos:column="111">(
                <argument><expr><lambda><parameter_list pos:line="90" pos:column="17">(<param><decl><name pos:line="90" pos:column="18">broker</name></decl></param>, <param><decl><name pos:line="90" pos:column="26">proxy</name></decl></param>, <param><decl><name pos:line="90" pos:column="33">timer</name></decl></param>, <param><decl><name pos:line="90" pos:column="40">logger</name></decl></param>)</parameter_list> <op:operator pos:line="90" pos:column="48">=&gt;</op:operator>
                    <block pos:line="91" pos:column="21">{
                        <decl_stmt><decl><type><name pos:line="92" pos:column="25">var</name></type> <name pos:line="92" pos:column="29">mock</name> <init pos:line="92" pos:column="34">= <expr><op:operator pos:line="92" pos:column="36">new</op:operator> <call><name><name pos:line="92" pos:column="40">Mock</name><argument_list pos:line="92" pos:column="44">&lt;<argument><name pos:line="92" pos:column="45">IAlternateMethodContext</name></argument>&gt;</argument_list></name><argument_list pos:line="92" pos:column="69">()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name pos:line="93" pos:column="25">mock</name><op:operator pos:line="93" pos:column="29">.</op:operator><name pos:line="93" pos:column="30">Setup</name></name><argument_list pos:line="93" pos:column="35">(<argument><expr><lambda><name pos:line="93" pos:column="36">m</name> <op:operator pos:line="93" pos:column="38">=&gt;</op:operator> <name><name pos:line="93" pos:column="41">m</name><op:operator pos:line="93" pos:column="42">.</op:operator><name pos:line="93" pos:column="43">MessageBroker</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="93" pos:column="57">.</op:operator><call><name pos:line="93" pos:column="58">Returns</name><argument_list pos:line="93" pos:column="65">(<argument><expr><name pos:line="93" pos:column="66">broker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="94" pos:column="25">mock</name><op:operator pos:line="94" pos:column="29">.</op:operator><name pos:line="94" pos:column="30">Setup</name></name><argument_list pos:line="94" pos:column="35">(<argument><expr><lambda><name pos:line="94" pos:column="36">m</name> <op:operator pos:line="94" pos:column="38">=&gt;</op:operator> <name><name pos:line="94" pos:column="41">m</name><op:operator pos:line="94" pos:column="42">.</op:operator><name pos:line="94" pos:column="43">ProxyFactory</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="94" pos:column="56">.</op:operator><call><name pos:line="94" pos:column="57">Returns</name><argument_list pos:line="94" pos:column="64">(<argument><expr><name pos:line="94" pos:column="65">proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="95" pos:column="25">mock</name><op:operator pos:line="95" pos:column="29">.</op:operator><name pos:line="95" pos:column="30">Setup</name></name><argument_list pos:line="95" pos:column="35">(<argument><expr><lambda><name pos:line="95" pos:column="36">m</name> <op:operator pos:line="95" pos:column="38">=&gt;</op:operator> <name><name pos:line="95" pos:column="41">m</name><op:operator pos:line="95" pos:column="42">.</op:operator><name pos:line="95" pos:column="43">RuntimePolicyStrategy</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="95" pos:column="65">.</op:operator><call><name pos:line="95" pos:column="66">Returns</name><argument_list pos:line="95" pos:column="73">(<argument><expr><lambda><parameter_list pos:line="95" pos:column="74">()</parameter_list> <op:operator pos:line="95" pos:column="77">=&gt;</op:operator> <name><name pos:line="95" pos:column="80">RuntimePolicy</name><op:operator pos:line="95" pos:column="93">.</op:operator><name pos:line="95" pos:column="94">On</name></name></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="96" pos:column="25">mock</name><op:operator pos:line="96" pos:column="29">.</op:operator><name pos:line="96" pos:column="30">Setup</name></name><argument_list pos:line="96" pos:column="35">(<argument><expr><lambda><name pos:line="96" pos:column="36">m</name> <op:operator pos:line="96" pos:column="38">=&gt;</op:operator> <name><name pos:line="96" pos:column="41">m</name><op:operator pos:line="96" pos:column="42">.</op:operator><name pos:line="96" pos:column="43">TimerStrategy</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="96" pos:column="57">.</op:operator><call><name pos:line="96" pos:column="58">Returns</name><argument_list pos:line="96" pos:column="65">(<argument><expr><lambda><parameter_list pos:line="96" pos:column="66">()</parameter_list> <op:operator pos:line="96" pos:column="69">=&gt;</op:operator> <name pos:line="96" pos:column="72">timer</name></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="97" pos:column="25">mock</name><op:operator pos:line="97" pos:column="29">.</op:operator><name pos:line="97" pos:column="30">Setup</name></name><argument_list pos:line="97" pos:column="35">(<argument><expr><lambda><name pos:line="97" pos:column="36">m</name> <op:operator pos:line="97" pos:column="38">=&gt;</op:operator> <name><name pos:line="97" pos:column="41">m</name><op:operator pos:line="97" pos:column="42">.</op:operator><name pos:line="97" pos:column="43">InvocationTarget</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="97" pos:column="60">.</op:operator><call><name pos:line="97" pos:column="61">Returns</name><argument_list pos:line="97" pos:column="68">(<argument><expr><op:operator pos:line="97" pos:column="69">new</op:operator> <call><name pos:line="97" pos:column="73">object</name><argument_list pos:line="97" pos:column="79">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="98" pos:column="25">mock</name><op:operator pos:line="98" pos:column="29">.</op:operator><name pos:line="98" pos:column="30">Setup</name></name><argument_list pos:line="98" pos:column="35">(<argument><expr><lambda><name pos:line="98" pos:column="36">m</name> <op:operator pos:line="98" pos:column="38">=&gt;</op:operator> <name><name pos:line="98" pos:column="41">m</name><op:operator pos:line="98" pos:column="42">.</op:operator><name pos:line="98" pos:column="43">MethodInvocationTarget</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="98" pos:column="66">.</op:operator><call><name pos:line="98" pos:column="67">Returns</name><argument_list pos:line="98" pos:column="74">(<argument><expr><call><name pos:line="98" pos:column="75">typeof</name><argument_list pos:line="98" pos:column="81">(<argument><expr><name pos:line="98" pos:column="82">object</name></expr></argument>)</argument_list></call><op:operator pos:line="98" pos:column="89">.</op:operator><call><name pos:line="98" pos:column="90">GetMethod</name><argument_list pos:line="98" pos:column="99">(<argument><expr><lit:literal type="string" pos:line="98" pos:column="100">"ToString"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="99" pos:column="25">mock</name><op:operator pos:line="99" pos:column="29">.</op:operator><name pos:line="99" pos:column="30">Setup</name></name><argument_list pos:line="99" pos:column="35">(<argument><expr><lambda><name pos:line="99" pos:column="36">m</name> <op:operator pos:line="99" pos:column="38">=&gt;</op:operator> <name><name pos:line="99" pos:column="41">m</name><op:operator pos:line="99" pos:column="42">.</op:operator><name pos:line="99" pos:column="43">Logger</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="99" pos:column="50">.</op:operator><call><name pos:line="99" pos:column="51">Returns</name><argument_list pos:line="99" pos:column="58">(<argument><expr><name pos:line="99" pos:column="59">logger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return pos:line="100" pos:column="25">return <expr><name><name pos:line="100" pos:column="32">mock</name><op:operator pos:line="100" pos:column="36">.</op:operator><name pos:line="100" pos:column="37">Object</name></name></expr>;</return>
                    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
