<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Mvc\AlternateType\ViewEngineFindViewsShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Web</name><op:operator pos:line="4" pos:column="17">.</op:operator><name pos:line="4" pos:column="18">Mvc</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Glimpse</name><op:operator pos:line="5" pos:column="14">.</op:operator><name pos:line="5" pos:column="15">Core</name><op:operator pos:line="5" pos:column="19">.</op:operator><name pos:line="5" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Glimpse</name><op:operator pos:line="6" pos:column="14">.</op:operator><name pos:line="6" pos:column="15">Mvc</name><op:operator pos:line="6" pos:column="18">.</op:operator><name pos:line="6" pos:column="19">AlternateType</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Glimpse</name><op:operator pos:line="7" pos:column="14">.</op:operator><name pos:line="7" pos:column="15">Test</name><op:operator pos:line="7" pos:column="19">.</op:operator><name pos:line="7" pos:column="20">Common</name></name>;</using>
<using pos:line="8" pos:column="1">using <name pos:line="8" pos:column="7">Moq</name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">Ploeh</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">AutoFixture</name></name>;</using>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">Ploeh</name><op:operator pos:line="10" pos:column="12">.</op:operator><name pos:line="10" pos:column="13">AutoFixture</name><op:operator pos:line="10" pos:column="24">.</op:operator><name pos:line="10" pos:column="25">Xunit</name></name>;</using>
<using pos:line="11" pos:column="1">using <name pos:line="11" pos:column="7">Xunit</name>;</using>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">Xunit</name><op:operator pos:line="12" pos:column="12">.</op:operator><name pos:line="12" pos:column="13">Extensions</name></name>;</using>

<namespace pos:line="14" pos:column="1">namespace <name><name pos:line="14" pos:column="11">Glimpse</name><op:operator pos:line="14" pos:column="18">.</op:operator><name pos:line="14" pos:column="19">Test</name><op:operator pos:line="14" pos:column="23">.</op:operator><name pos:line="14" pos:column="24">Mvc</name><op:operator pos:line="14" pos:column="27">.</op:operator><name pos:line="14" pos:column="28">AlternateType</name></name>
<block pos:line="15" pos:column="1">{
    <class><specifier pos:line="16" pos:column="5">public</specifier> class <name pos:line="16" pos:column="18">ViewEngineFindViewsShould</name>
    <block pos:line="17" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="18" pos:column="9">private</specifier> <specifier pos:line="18" pos:column="17">readonly</specifier> <name pos:line="18" pos:column="26">IFixture</name></type> <name pos:line="18" pos:column="35">fixture</name> <init pos:line="18" pos:column="43">= <expr><op:operator pos:line="18" pos:column="45">new</op:operator> <call><name pos:line="18" pos:column="49">Fixture</name><argument_list pos:line="18" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <function><type><attribute pos:line="20" pos:column="9">[<expr><name pos:line="20" pos:column="10">Theory</name></expr><op:operator pos:line="20" pos:column="16">,</op:operator> <expr><name pos:line="20" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="21" pos:column="9">public</specifier> <name pos:line="21" pos:column="16">void</name></type> <name pos:line="21" pos:column="21">ReturnAllMethodImplementationsWithAllMethods</name><parameter_list pos:line="21" pos:column="65">(<param><decl><type><name pos:line="21" pos:column="66">ViewEngine</name></type> <name pos:line="21" pos:column="77">sut</name></decl></param>)</parameter_list>
        <block pos:line="22" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="23" pos:column="13">var</name></type> <name pos:line="23" pos:column="17">allMethods</name> <init pos:line="23" pos:column="28">= <expr><name><name pos:line="23" pos:column="30">sut</name><op:operator pos:line="23" pos:column="33">.</op:operator><name pos:line="23" pos:column="34">AllMethods</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="25" pos:column="13">Assert</name><op:operator pos:line="25" pos:column="19">.</op:operator><name pos:line="25" pos:column="20">Equal</name></name><argument_list pos:line="25" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="25" pos:column="26">2</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="25" pos:column="29">allMethods</name><op:operator pos:line="25" pos:column="39">.</op:operator><name pos:line="25" pos:column="40">Count</name></name><argument_list pos:line="25" pos:column="45">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="28" pos:column="9">[<expr><name pos:line="28" pos:column="10">Theory</name></expr><op:operator pos:line="28" pos:column="16">,</op:operator> <expr><name pos:line="28" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="29" pos:column="9">public</specifier> <name pos:line="29" pos:column="16">void</name></type> <name pos:line="29" pos:column="21">Construct</name><parameter_list pos:line="29" pos:column="30">(<param><decl><type><name><name pos:line="29" pos:column="31">AlternateType</name><argument_list pos:line="29" pos:column="44">&lt;<argument><name pos:line="29" pos:column="45">IView</name></argument>&gt;</argument_list></name></type> <name pos:line="29" pos:column="52">alternateView</name></decl></param>)</parameter_list>
        <block pos:line="30" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="31" pos:column="13">var</name></type> <name pos:line="31" pos:column="17">sut</name> <init pos:line="31" pos:column="21">= <expr><op:operator pos:line="31" pos:column="23">new</op:operator> <call><name><name pos:line="31" pos:column="27">ViewEngine</name><op:operator pos:line="31" pos:column="37">.</op:operator><name pos:line="31" pos:column="38">FindViews</name></name><argument_list pos:line="31" pos:column="47">(<argument><expr><lit:literal type="boolean" pos:line="31" pos:column="48">false</lit:literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="55">alternateView</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="33" pos:column="13">Assert</name><op:operator pos:line="33" pos:column="19">.</op:operator><name pos:line="33" pos:column="20">NotNull</name></name><argument_list pos:line="33" pos:column="27">(<argument><expr><name pos:line="33" pos:column="28">sut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="34" pos:column="13">Assert</name><op:operator pos:line="34" pos:column="19">.</op:operator><name><name pos:line="34" pos:column="20">IsAssignableFrom</name><argument_list pos:line="34" pos:column="36">&lt;<argument><name pos:line="34" pos:column="37">IAlternateMethod</name></argument>&gt;</argument_list></name></name><argument_list pos:line="34" pos:column="54">(<argument><expr><name pos:line="34" pos:column="55">sut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="37" pos:column="9">[<expr><name pos:line="37" pos:column="10">Theory</name></expr><op:operator pos:line="37" pos:column="16">,</op:operator> <expr><name pos:line="37" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="38" pos:column="9">public</specifier> <name pos:line="38" pos:column="16">void</name></type> <name pos:line="38" pos:column="21">MethodToImplementIsRight</name><parameter_list pos:line="38" pos:column="45">(<param><decl><type><name><name pos:line="38" pos:column="46">AlternateType</name><argument_list pos:line="38" pos:column="59">&lt;<argument><name pos:line="38" pos:column="60">IView</name></argument>&gt;</argument_list></name></type> <name pos:line="38" pos:column="67">alternateView</name></decl></param>)</parameter_list>
        <block pos:line="39" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="40" pos:column="13">var</name></type> <name pos:line="40" pos:column="17">sut1</name> <init pos:line="40" pos:column="22">= <expr><op:operator pos:line="40" pos:column="24">new</op:operator> <call><name><name pos:line="40" pos:column="28">ViewEngine</name><op:operator pos:line="40" pos:column="38">.</op:operator><name pos:line="40" pos:column="39">FindViews</name></name><argument_list pos:line="40" pos:column="48">(<argument><expr><lit:literal type="boolean" pos:line="40" pos:column="49">false</lit:literal></expr></argument>, <argument><expr><name pos:line="40" pos:column="56">alternateView</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="41" pos:column="13">Assert</name><op:operator pos:line="41" pos:column="19">.</op:operator><name pos:line="41" pos:column="20">Equal</name></name><argument_list pos:line="41" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="41" pos:column="26">"FindView"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="38">sut1</name><op:operator pos:line="41" pos:column="42">.</op:operator><name pos:line="41" pos:column="43">MethodToImplement</name><op:operator pos:line="41" pos:column="60">.</op:operator><name pos:line="41" pos:column="61">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="43" pos:column="13">var</name></type> <name pos:line="43" pos:column="17">sut2</name> <init pos:line="43" pos:column="22">= <expr><op:operator pos:line="43" pos:column="24">new</op:operator> <call><name><name pos:line="43" pos:column="28">ViewEngine</name><op:operator pos:line="43" pos:column="38">.</op:operator><name pos:line="43" pos:column="39">FindViews</name></name><argument_list pos:line="43" pos:column="48">(<argument><expr><lit:literal type="boolean" pos:line="43" pos:column="49">true</lit:literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="55">alternateView</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="44" pos:column="13">Assert</name><op:operator pos:line="44" pos:column="19">.</op:operator><name pos:line="44" pos:column="20">Equal</name></name><argument_list pos:line="44" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="44" pos:column="26">"FindPartialView"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="44" pos:column="45">sut2</name><op:operator pos:line="44" pos:column="49">.</op:operator><name pos:line="44" pos:column="50">MethodToImplement</name><op:operator pos:line="44" pos:column="67">.</op:operator><name pos:line="44" pos:column="68">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="47" pos:column="9">[<expr><name pos:line="47" pos:column="10">Theory</name></expr><op:operator pos:line="47" pos:column="16">,</op:operator> <expr><name pos:line="47" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="48" pos:column="9">public</specifier> <name pos:line="48" pos:column="16">void</name></type> <name pos:line="48" pos:column="21">ProceedIfRuntimePolicyIsOff</name><parameter_list pos:line="48" pos:column="48">(<param><decl><type><name><name pos:line="48" pos:column="49">ViewEngine</name><op:operator pos:line="48" pos:column="59">.</op:operator><name pos:line="48" pos:column="60">FindViews</name></name></type> <name pos:line="48" pos:column="70">sut</name></decl></param>, <param><decl><type><name pos:line="48" pos:column="75">IAlternateMethodContext</name></type> <name pos:line="48" pos:column="99">context</name></decl></param>)</parameter_list>
        <block pos:line="49" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="50" pos:column="13">context</name><op:operator pos:line="50" pos:column="20">.</op:operator><name pos:line="50" pos:column="21">Setup</name></name><argument_list pos:line="50" pos:column="26">(<argument><expr><lambda><name pos:line="50" pos:column="27">c</name> <op:operator pos:line="50" pos:column="29">=&gt;</op:operator> <name><name pos:line="50" pos:column="32">c</name><op:operator pos:line="50" pos:column="33">.</op:operator><name pos:line="50" pos:column="34">RuntimePolicyStrategy</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="50" pos:column="56">.</op:operator><call><name pos:line="50" pos:column="57">Returns</name><argument_list pos:line="50" pos:column="64">(<argument><expr><lambda><parameter_list pos:line="50" pos:column="65">()</parameter_list> <op:operator pos:line="50" pos:column="68">=&gt;</op:operator> <name><name pos:line="50" pos:column="71">RuntimePolicy</name><op:operator pos:line="50" pos:column="84">.</op:operator><name pos:line="50" pos:column="85">Off</name></name></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="52" pos:column="13">sut</name><op:operator pos:line="52" pos:column="16">.</op:operator><name pos:line="52" pos:column="17">NewImplementation</name></name><argument_list pos:line="52" pos:column="34">(<argument><expr><name pos:line="52" pos:column="35">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="54" pos:column="13">context</name><op:operator pos:line="54" pos:column="20">.</op:operator><name pos:line="54" pos:column="21">Verify</name></name><argument_list pos:line="54" pos:column="27">(<argument><expr><lambda><name pos:line="54" pos:column="28">c</name> <op:operator pos:line="54" pos:column="30">=&gt;</op:operator> <call><name><name pos:line="54" pos:column="33">c</name><op:operator pos:line="54" pos:column="34">.</op:operator><name pos:line="54" pos:column="35">Proceed</name></name><argument_list pos:line="54" pos:column="42">()</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="57" pos:column="9">[<expr><name pos:line="57" pos:column="10">Theory</name></expr><op:operator pos:line="57" pos:column="16">,</op:operator> <expr><name pos:line="57" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="58" pos:column="9">public</specifier> <name pos:line="58" pos:column="16">void</name></type> <name pos:line="58" pos:column="21">PublishMessagesIfRuntimePolicyIsOnAndViewNotFound</name><parameter_list pos:line="58" pos:column="70">(<param><decl><type><name><name pos:line="58" pos:column="71">ViewEngine</name><op:operator pos:line="58" pos:column="81">.</op:operator><name pos:line="58" pos:column="82">FindViews</name></name></type> <name pos:line="58" pos:column="92">sut</name></decl></param>, <param><decl><type><name pos:line="58" pos:column="97">IAlternateMethodContext</name></type> <name pos:line="58" pos:column="121">context</name></decl></param>, <param><decl><type><name pos:line="58" pos:column="130">ControllerContext</name></type> <name pos:line="58" pos:column="148">controllerContext</name></decl></param>)</parameter_list>
        <block pos:line="59" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="60" pos:column="13">context</name><op:operator pos:line="60" pos:column="20">.</op:operator><name pos:line="60" pos:column="21">Setup</name></name><argument_list pos:line="60" pos:column="26">(<argument><expr><lambda><name pos:line="60" pos:column="27">c</name> <op:operator pos:line="60" pos:column="29">=&gt;</op:operator> <name><name pos:line="60" pos:column="32">c</name><op:operator pos:line="60" pos:column="33">.</op:operator><name pos:line="60" pos:column="34">Arguments</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="60" pos:column="44">.</op:operator><call><name pos:line="60" pos:column="45">Returns</name><argument_list pos:line="60" pos:column="52">(<argument><expr><call><name pos:line="60" pos:column="53">GetArguments</name><argument_list pos:line="60" pos:column="65">(<argument><expr><name pos:line="60" pos:column="66">controllerContext</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="61" pos:column="13">context</name><op:operator pos:line="61" pos:column="20">.</op:operator><name pos:line="61" pos:column="21">Setup</name></name><argument_list pos:line="61" pos:column="26">(<argument><expr><lambda><name pos:line="61" pos:column="27">c</name> <op:operator pos:line="61" pos:column="29">=&gt;</op:operator> <name><name pos:line="61" pos:column="32">c</name><op:operator pos:line="61" pos:column="33">.</op:operator><name pos:line="61" pos:column="34">TargetType</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="61" pos:column="45">.</op:operator><call><name pos:line="61" pos:column="46">Returns</name><argument_list pos:line="61" pos:column="53">(<argument><expr><call><name pos:line="61" pos:column="54">typeof</name><argument_list pos:line="61" pos:column="60">(<argument><expr><name pos:line="61" pos:column="61">int</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="62" pos:column="13">context</name><op:operator pos:line="62" pos:column="20">.</op:operator><name pos:line="62" pos:column="21">Setup</name></name><argument_list pos:line="62" pos:column="26">(<argument><expr><lambda><name pos:line="62" pos:column="27">c</name> <op:operator pos:line="62" pos:column="29">=&gt;</op:operator> <name><name pos:line="62" pos:column="32">c</name><op:operator pos:line="62" pos:column="33">.</op:operator><name pos:line="62" pos:column="34">ReturnValue</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="62" pos:column="46">.</op:operator><call><name pos:line="62" pos:column="47">Returns</name><argument_list pos:line="62" pos:column="54">(<argument><expr><op:operator pos:line="62" pos:column="55">new</op:operator> <call><name pos:line="62" pos:column="59">ViewEngineResult</name><argument_list pos:line="62" pos:column="75">(<argument><expr><call><name><name pos:line="62" pos:column="76">Enumerable</name><op:operator pos:line="62" pos:column="86">.</op:operator><name><name pos:line="62" pos:column="87">Empty</name><argument_list pos:line="62" pos:column="92">&lt;<argument><name pos:line="62" pos:column="93">string</name></argument>&gt;</argument_list></name></name><argument_list pos:line="62" pos:column="100">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="64" pos:column="13">sut</name><op:operator pos:line="64" pos:column="16">.</op:operator><name pos:line="64" pos:column="17">NewImplementation</name></name><argument_list pos:line="64" pos:column="34">(<argument><expr><name pos:line="64" pos:column="35">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="66" pos:column="13">context</name><op:operator pos:line="66" pos:column="20">.</op:operator><name pos:line="66" pos:column="21">MessageBroker</name><op:operator pos:line="66" pos:column="34">.</op:operator><name pos:line="66" pos:column="35">Verify</name></name><argument_list pos:line="66" pos:column="41">(<argument><expr><lambda><name pos:line="66" pos:column="42">b</name> <op:operator pos:line="66" pos:column="44">=&gt;</op:operator> <call><name><name pos:line="66" pos:column="47">b</name><op:operator pos:line="66" pos:column="48">.</op:operator><name pos:line="66" pos:column="49">Publish</name></name><argument_list pos:line="66" pos:column="56">(<argument><expr><call><name><name pos:line="66" pos:column="57">It</name><op:operator pos:line="66" pos:column="59">.</op:operator><name><name pos:line="66" pos:column="60">IsAny</name><argument_list pos:line="66" pos:column="65">&lt;<argument><name><name pos:line="66" pos:column="66">ViewEngine</name><op:operator pos:line="66" pos:column="76">.</op:operator><name pos:line="66" pos:column="77">FindViews</name><op:operator pos:line="66" pos:column="86">.</op:operator><name pos:line="66" pos:column="87">Message</name></name></argument>&gt;</argument_list></name></name><argument_list pos:line="66" pos:column="95">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        }</block></function>

        <function><type><attribute pos:line="69" pos:column="9">[<expr><name pos:line="69" pos:column="10">Theory</name></expr><op:operator pos:line="69" pos:column="16">,</op:operator> <expr><name pos:line="69" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="70" pos:column="9">public</specifier> <name pos:line="70" pos:column="16">void</name></type> <name pos:line="70" pos:column="21">PublishMessagesIfRuntimePolicyIsOnAndViewIsFound</name><parameter_list pos:line="70" pos:column="69">(<param><decl><type><attribute pos:line="70" pos:column="70">[<expr><name pos:line="70" pos:column="71">Frozen</name></expr>]</attribute> <name pos:line="70" pos:column="79">IProxyFactory</name></type> <name pos:line="70" pos:column="93">proxyFactory</name></decl></param>, <param><decl><type><name><name pos:line="70" pos:column="107">ViewEngine</name><op:operator pos:line="70" pos:column="117">.</op:operator><name pos:line="70" pos:column="118">FindViews</name></name></type> <name pos:line="70" pos:column="128">sut</name></decl></param>, <param><decl><type><name pos:line="70" pos:column="133">IAlternateMethodContext</name></type> <name pos:line="70" pos:column="157">context</name></decl></param>, <param><decl><type><name pos:line="70" pos:column="166">IView</name></type> <name pos:line="70" pos:column="172">view</name></decl></param>, <param><decl><type><name pos:line="70" pos:column="178">IViewEngine</name></type> <name pos:line="70" pos:column="190">engine</name></decl></param>, <param><decl><type><name pos:line="70" pos:column="198">ControllerContext</name></type> <name pos:line="70" pos:column="216">controllerContext</name></decl></param>)</parameter_list>
        <block pos:line="71" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="72" pos:column="13">context</name><op:operator pos:line="72" pos:column="20">.</op:operator><name pos:line="72" pos:column="21">Setup</name></name><argument_list pos:line="72" pos:column="26">(<argument><expr><lambda><name pos:line="72" pos:column="27">c</name> <op:operator pos:line="72" pos:column="29">=&gt;</op:operator> <name><name pos:line="72" pos:column="32">c</name><op:operator pos:line="72" pos:column="33">.</op:operator><name pos:line="72" pos:column="34">Arguments</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="72" pos:column="44">.</op:operator><call><name pos:line="72" pos:column="45">Returns</name><argument_list pos:line="72" pos:column="52">(<argument><expr><call><name pos:line="72" pos:column="53">GetArguments</name><argument_list pos:line="72" pos:column="65">(<argument><expr><name pos:line="72" pos:column="66">controllerContext</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="73" pos:column="13">context</name><op:operator pos:line="73" pos:column="20">.</op:operator><name pos:line="73" pos:column="21">Setup</name></name><argument_list pos:line="73" pos:column="26">(<argument><expr><lambda><name pos:line="73" pos:column="27">c</name> <op:operator pos:line="73" pos:column="29">=&gt;</op:operator> <name><name pos:line="73" pos:column="32">c</name><op:operator pos:line="73" pos:column="33">.</op:operator><name pos:line="73" pos:column="34">ReturnValue</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="73" pos:column="46">.</op:operator><call><name pos:line="73" pos:column="47">Returns</name><argument_list pos:line="73" pos:column="54">(<argument><expr><op:operator pos:line="73" pos:column="55">new</op:operator> <call><name pos:line="73" pos:column="59">ViewEngineResult</name><argument_list pos:line="73" pos:column="75">(<argument><expr><name pos:line="73" pos:column="76">view</name></expr></argument>, <argument><expr><name pos:line="73" pos:column="82">engine</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="74" pos:column="13">context</name><op:operator pos:line="74" pos:column="20">.</op:operator><name pos:line="74" pos:column="21">Setup</name></name><argument_list pos:line="74" pos:column="26">(<argument><expr><lambda><name pos:line="74" pos:column="27">c</name> <op:operator pos:line="74" pos:column="29">=&gt;</op:operator> <name><name pos:line="74" pos:column="32">c</name><op:operator pos:line="74" pos:column="33">.</op:operator><name pos:line="74" pos:column="34">TargetType</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="74" pos:column="45">.</op:operator><call><name pos:line="74" pos:column="46">Returns</name><argument_list pos:line="74" pos:column="53">(<argument><expr><call><name pos:line="74" pos:column="54">typeof</name><argument_list pos:line="74" pos:column="60">(<argument><expr><name pos:line="74" pos:column="61">int</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="75" pos:column="13">proxyFactory</name><op:operator pos:line="75" pos:column="25">.</op:operator><name pos:line="75" pos:column="26">Setup</name></name><argument_list pos:line="75" pos:column="31">(<argument><expr><lambda><name pos:line="75" pos:column="32">p</name> <op:operator pos:line="75" pos:column="34">=&gt;</op:operator> <call><name><name pos:line="75" pos:column="37">p</name><op:operator pos:line="75" pos:column="38">.</op:operator><name><name pos:line="75" pos:column="39">IsWrapInterfaceEligible</name><argument_list pos:line="75" pos:column="62">&lt;<argument><name pos:line="75" pos:column="63">IView</name></argument>&gt;</argument_list></name></name><argument_list pos:line="75" pos:column="69">(<argument><expr><call><name><name pos:line="75" pos:column="70">It</name><op:operator pos:line="75" pos:column="72">.</op:operator><name><name pos:line="75" pos:column="73">IsAny</name><argument_list pos:line="75" pos:column="78">&lt;<argument><name pos:line="75" pos:column="79">Type</name></argument>&gt;</argument_list></name></name><argument_list pos:line="75" pos:column="84">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="75" pos:column="88">.</op:operator><call><name pos:line="75" pos:column="89">Returns</name><argument_list pos:line="75" pos:column="96">(<argument><expr><lit:literal type="boolean" pos:line="75" pos:column="97">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="76" pos:column="13">proxyFactory</name><op:operator pos:line="76" pos:column="25">.</op:operator><name pos:line="76" pos:column="26">Setup</name></name><argument_list pos:line="76" pos:column="31">(<argument><expr><lambda><name pos:line="76" pos:column="32">p</name> <op:operator pos:line="76" pos:column="34">=&gt;</op:operator> 
                    <call><name><name pos:line="77" pos:column="21">p</name><op:operator pos:line="77" pos:column="22">.</op:operator><name pos:line="77" pos:column="23">WrapInterface</name></name><argument_list pos:line="77" pos:column="36">(
                        <argument><expr><call><name><name pos:line="78" pos:column="25">It</name><op:operator pos:line="78" pos:column="27">.</op:operator><name><name pos:line="78" pos:column="28">IsAny</name><argument_list pos:line="78" pos:column="33">&lt;<argument><name pos:line="78" pos:column="34">IView</name></argument>&gt;</argument_list></name></name><argument_list pos:line="78" pos:column="40">()</argument_list></call></expr></argument>, 
                        <argument><expr><call><name><name pos:line="79" pos:column="25">It</name><op:operator pos:line="79" pos:column="27">.</op:operator><name><name pos:line="79" pos:column="28">IsAny</name><argument_list pos:line="79" pos:column="33">&lt;<argument><name><name pos:line="79" pos:column="34">IEnumerable</name><argument_list pos:line="79" pos:column="45">&lt;<argument><name pos:line="79" pos:column="46">IAlternateMethod</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name><argument_list pos:line="79" pos:column="64">()</argument_list></call></expr></argument>,
                        <argument><expr><call><name><name pos:line="80" pos:column="25">It</name><op:operator pos:line="80" pos:column="27">.</op:operator><name><name pos:line="80" pos:column="28">IsAny</name><argument_list pos:line="80" pos:column="33">&lt;<argument><name><name pos:line="80" pos:column="34">IEnumerable</name><argument_list pos:line="80" pos:column="45">&lt;<argument><name pos:line="80" pos:column="46">object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name><argument_list pos:line="80" pos:column="54">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call>
                    <op:operator pos:line="81" pos:column="21">.</op:operator><call><name pos:line="81" pos:column="22">Returns</name><argument_list pos:line="81" pos:column="29">(<argument><expr><name pos:line="81" pos:column="30">view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="83" pos:column="13">sut</name><op:operator pos:line="83" pos:column="16">.</op:operator><name pos:line="83" pos:column="17">NewImplementation</name></name><argument_list pos:line="83" pos:column="34">(<argument><expr><name pos:line="83" pos:column="35">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="85" pos:column="13">proxyFactory</name><op:operator pos:line="85" pos:column="25">.</op:operator><name pos:line="85" pos:column="26">Verify</name></name><argument_list pos:line="85" pos:column="32">(<argument><expr><lambda><name pos:line="85" pos:column="33">p</name> <op:operator pos:line="85" pos:column="35">=&gt;</op:operator> <call><name><name pos:line="85" pos:column="38">p</name><op:operator pos:line="85" pos:column="39">.</op:operator><name><name pos:line="85" pos:column="40">IsWrapInterfaceEligible</name><argument_list pos:line="85" pos:column="63">&lt;<argument><name pos:line="85" pos:column="64">IView</name></argument>&gt;</argument_list></name></name><argument_list pos:line="85" pos:column="70">(<argument><expr><call><name><name pos:line="85" pos:column="71">It</name><op:operator pos:line="85" pos:column="73">.</op:operator><name><name pos:line="85" pos:column="74">IsAny</name><argument_list pos:line="85" pos:column="79">&lt;<argument><name pos:line="85" pos:column="80">Type</name></argument>&gt;</argument_list></name></name><argument_list pos:line="85" pos:column="85">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="86" pos:column="13">context</name><op:operator pos:line="86" pos:column="20">.</op:operator><name pos:line="86" pos:column="21">Logger</name><op:operator pos:line="86" pos:column="27">.</op:operator><name pos:line="86" pos:column="28">Verify</name></name><argument_list pos:line="86" pos:column="34">(<argument><expr><lambda><name pos:line="86" pos:column="35">l</name> <op:operator pos:line="86" pos:column="37">=&gt;</op:operator> <call><name><name pos:line="86" pos:column="40">l</name><op:operator pos:line="86" pos:column="41">.</op:operator><name pos:line="86" pos:column="42">Info</name></name><argument_list pos:line="86" pos:column="46">(<argument><expr><call><name><name pos:line="86" pos:column="47">It</name><op:operator pos:line="86" pos:column="49">.</op:operator><name><name pos:line="86" pos:column="50">IsAny</name><argument_list pos:line="86" pos:column="55">&lt;<argument><name pos:line="86" pos:column="56">string</name></argument>&gt;</argument_list></name></name><argument_list pos:line="86" pos:column="63">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="86" pos:column="67">It</name><op:operator pos:line="86" pos:column="69">.</op:operator><name><name pos:line="86" pos:column="70">IsAny</name><argument_list pos:line="86" pos:column="75">&lt;<argument><name><name pos:line="86" pos:column="76">object</name><index pos:line="86" pos:column="82">[]</index></name></argument>&gt;</argument_list></name></name><argument_list pos:line="86" pos:column="85">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="87" pos:column="13">context</name><op:operator pos:line="87" pos:column="20">.</op:operator><name pos:line="87" pos:column="21">VerifySet</name></name><argument_list pos:line="87" pos:column="30">(<argument><expr><lambda><name pos:line="87" pos:column="31">c</name> <op:operator pos:line="87" pos:column="33">=&gt;</op:operator> <name><name pos:line="87" pos:column="36">c</name><op:operator pos:line="87" pos:column="37">.</op:operator><name pos:line="87" pos:column="38">ReturnValue</name></name> <op:operator pos:line="87" pos:column="50">=</op:operator> <call><name><name pos:line="87" pos:column="52">It</name><op:operator pos:line="87" pos:column="54">.</op:operator><name><name pos:line="87" pos:column="55">IsAny</name><argument_list pos:line="87" pos:column="60">&lt;<argument><name pos:line="87" pos:column="61">ViewEngineResult</name></argument>&gt;</argument_list></name></name><argument_list pos:line="87" pos:column="78">()</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="88" pos:column="13">context</name><op:operator pos:line="88" pos:column="20">.</op:operator><name pos:line="88" pos:column="21">MessageBroker</name><op:operator pos:line="88" pos:column="34">.</op:operator><name pos:line="88" pos:column="35">Verify</name></name><argument_list pos:line="88" pos:column="41">(<argument><expr><lambda><name pos:line="88" pos:column="42">b</name> <op:operator pos:line="88" pos:column="44">=&gt;</op:operator> <call><name><name pos:line="88" pos:column="47">b</name><op:operator pos:line="88" pos:column="48">.</op:operator><name pos:line="88" pos:column="49">Publish</name></name><argument_list pos:line="88" pos:column="56">(<argument><expr><call><name><name pos:line="88" pos:column="57">It</name><op:operator pos:line="88" pos:column="59">.</op:operator><name><name pos:line="88" pos:column="60">IsAny</name><argument_list pos:line="88" pos:column="65">&lt;<argument><name><name pos:line="88" pos:column="66">ViewEngine</name><op:operator pos:line="88" pos:column="76">.</op:operator><name pos:line="88" pos:column="77">FindViews</name><op:operator pos:line="88" pos:column="86">.</op:operator><name pos:line="88" pos:column="87">Message</name></name></argument>&gt;</argument_list></name></name><argument_list pos:line="88" pos:column="95">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        }</block></function>

        <function><type><specifier pos:line="91" pos:column="9">private</specifier> <name pos:line="91" pos:column="17">object</name><index pos:line="91" pos:column="23">[]</index></type> <name pos:line="91" pos:column="26">GetArguments</name><parameter_list pos:line="91" pos:column="38">(<param><decl><type><name pos:line="91" pos:column="39">ControllerContext</name></type> <name pos:line="91" pos:column="57">controllerContext</name></decl></param>)</parameter_list>
        <block pos:line="92" pos:column="9">{
            <return pos:line="93" pos:column="13">return <expr><op:operator pos:line="93" pos:column="20">new</op:operator> <name><name pos:line="93" pos:column="24">object</name><index pos:line="93" pos:column="30">[]</index></name>
                <block pos:line="94" pos:column="17">{
                    <expr><name pos:line="95" pos:column="21">controllerContext</name></expr><op:operator pos:line="95" pos:column="38">,</op:operator> 
                    <expr><call><name><name pos:line="96" pos:column="21">fixture</name><op:operator pos:line="96" pos:column="28">.</op:operator><name pos:line="96" pos:column="29">CreateAnonymous</name></name><argument_list pos:line="96" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="96" pos:column="45">"ViewName"</lit:literal></expr></argument>)</argument_list></call></expr><op:operator pos:line="96" pos:column="56">,</op:operator> 
                    <expr><call><name><name pos:line="97" pos:column="21">fixture</name><op:operator pos:line="97" pos:column="28">.</op:operator><name pos:line="97" pos:column="29">CreateAnonymous</name></name><argument_list pos:line="97" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="97" pos:column="45">"MasterName"</lit:literal></expr></argument>)</argument_list></call></expr><op:operator pos:line="97" pos:column="58">,</op:operator> 
                    <expr><call><name><name pos:line="98" pos:column="21">fixture</name><op:operator pos:line="98" pos:column="28">.</op:operator><name><name pos:line="98" pos:column="29">CreateAnonymous</name><argument_list pos:line="98" pos:column="44">&lt;<argument><name pos:line="98" pos:column="45">bool</name></argument>&gt;</argument_list></name></name><argument_list pos:line="98" pos:column="50">()</argument_list></call></expr>
                }</block></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
