<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Core\Framework\AssemblyTypesResolver.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Reflection</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Glimpse</name><op:operator pos:line="5" pos:column="14">.</op:operator><name pos:line="5" pos:column="15">Core</name><op:operator pos:line="5" pos:column="19">.</op:operator><name pos:line="5" pos:column="20">Extensibility</name></name>;</using>

<namespace pos:line="7" pos:column="1">namespace <name><name pos:line="7" pos:column="11">Glimpse</name><op:operator pos:line="7" pos:column="18">.</op:operator><name pos:line="7" pos:column="19">Core</name><op:operator pos:line="7" pos:column="23">.</op:operator><name pos:line="7" pos:column="24">Framework</name></name>
<block pos:line="8" pos:column="1">{
    <comment type="line" pos:line="9" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="10" pos:column="5">/// Resolves type for requested assemblies and caches the results for later use</comment>
    <comment type="line" pos:line="11" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="12" pos:column="5">public</specifier> <specifier pos:line="12" pos:column="12">static</specifier> class <name pos:line="12" pos:column="25">AssemblyTypesResolver</name>
    <block pos:line="13" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="14" pos:column="9">private</specifier> <specifier pos:line="14" pos:column="17">static</specifier> <specifier pos:line="14" pos:column="24">readonly</specifier> <name><name pos:line="14" pos:column="33">Dictionary</name><argument_list pos:line="14" pos:column="43">&lt;<argument><name pos:line="14" pos:column="44">Assembly</name></argument>, <argument><name pos:line="14" pos:column="54">Type</name><index pos:line="14" pos:column="58">[]</index></argument>&gt;</argument_list></name></type> <name pos:line="14" pos:column="62">typesByAssembly</name> <init pos:line="14" pos:column="78">= <expr><op:operator pos:line="14" pos:column="80">new</op:operator> <call><name><name pos:line="14" pos:column="84">Dictionary</name><argument_list pos:line="14" pos:column="94">&lt;<argument><name pos:line="14" pos:column="95">Assembly</name></argument>, <argument><name><name pos:line="14" pos:column="105">Type</name><index pos:line="14" pos:column="109">[]</index></name></argument>&gt;</argument_list></name><argument_list pos:line="14" pos:column="112">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="16" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="17" pos:column="9">/// Resolves the types for the given assembly</comment>
        <comment type="line" pos:line="18" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="19" pos:column="9">/// &lt;remarks&gt;</comment>
        <comment type="line" pos:line="20" pos:column="9">/// The resolver will first check its cache. If the types were previously resolved for the given assembly, then those are returned</comment>
        <comment type="line" pos:line="21" pos:column="9">/// If nothing has been cached before, then the types are being resolved and added to the cache before being returned.</comment>
        <comment type="line" pos:line="22" pos:column="9">/// &lt;/remarks&gt;</comment>
        <comment type="line" pos:line="23" pos:column="9">/// &lt;param name="assembly"&gt;The assembly for which the types should be resolved&lt;/param&gt;</comment>
        <comment type="line" pos:line="24" pos:column="9">/// &lt;param name="logger"&gt;The logger to use in case an exception should occur when resolving the types&lt;/param&gt;</comment>
        <comment type="line" pos:line="25" pos:column="9">/// &lt;returns&gt;List of types resolved for the given assembly&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="26" pos:column="9">public</specifier> <specifier pos:line="26" pos:column="16">static</specifier> <name pos:line="26" pos:column="23">Type</name><index pos:line="26" pos:column="27">[]</index></type> <name pos:line="26" pos:column="30">ResolveTypes</name><parameter_list pos:line="26" pos:column="42">(<param><decl><type><name pos:line="26" pos:column="43">Assembly</name></type> <name pos:line="26" pos:column="52">assembly</name></decl></param>, <param><decl><type><name pos:line="26" pos:column="62">ILogger</name></type> <name pos:line="26" pos:column="70">logger</name></decl></param>)</parameter_list>
        <block pos:line="27" pos:column="9">{
            <comment type="line" pos:line="28" pos:column="13">// GetTypes potentially throws an exception. Defensive coding as per http://haacked.com/archive/2012/07/23/get-all-types-in-an-assembly.aspx</comment>
            <decl_stmt><decl><type><name pos:line="29" pos:column="13">Type</name><index pos:line="29" pos:column="17">[]</index></type> <name pos:line="29" pos:column="20">allTypes</name></decl>;</decl_stmt>
            <lock pos:line="30" pos:column="13">lock (<expr><name pos:line="30" pos:column="19">typesByAssembly</name></expr>)
            <block pos:line="31" pos:column="13">{
                <try pos:line="32" pos:column="17">try
                <block pos:line="33" pos:column="17">{
                    <if pos:line="34" pos:column="21">if <condition pos:line="34" pos:column="24">(<expr><op:operator pos:line="34" pos:column="25">!</op:operator><call><name><name pos:line="34" pos:column="26">typesByAssembly</name><op:operator pos:line="34" pos:column="41">.</op:operator><name pos:line="34" pos:column="42">TryGetValue</name></name><argument_list pos:line="34" pos:column="53">(<argument><expr><name pos:line="34" pos:column="54">assembly</name></expr></argument>, <argument><expr pos:line="34" pos:column="64">out <name pos:line="34" pos:column="68">allTypes</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="34" pos:column="78">
                    <block pos:line="35" pos:column="21">{
                        <expr_stmt><expr><name pos:line="36" pos:column="25">allTypes</name> <op:operator pos:line="36" pos:column="34">=</op:operator> <call><name><name pos:line="36" pos:column="36">assembly</name><op:operator pos:line="36" pos:column="44">.</op:operator><name pos:line="36" pos:column="45">GetTypes</name></name><argument_list pos:line="36" pos:column="53">()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="37" pos:column="25">typesByAssembly</name><op:operator pos:line="37" pos:column="40">.</op:operator><name pos:line="37" pos:column="41">Add</name></name><argument_list pos:line="37" pos:column="44">(<argument><expr><name pos:line="37" pos:column="45">assembly</name></expr></argument>, <argument><expr><name pos:line="37" pos:column="55">allTypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block>
                <catch pos:line="40" pos:column="17">catch <parameter_list pos:line="40" pos:column="23">(<param><decl><type><name pos:line="40" pos:column="24">ReflectionTypeLoadException</name></type> <name pos:line="40" pos:column="52">ex</name></decl></param>)</parameter_list>
                <block pos:line="41" pos:column="17">{
                    <expr_stmt><expr><name pos:line="42" pos:column="21">allTypes</name> <op:operator pos:line="42" pos:column="30">=</op:operator> <call><name><name pos:line="42" pos:column="32">ex</name><op:operator pos:line="42" pos:column="34">.</op:operator><name pos:line="42" pos:column="35">Types</name><op:operator pos:line="42" pos:column="40">.</op:operator><name pos:line="42" pos:column="41">Where</name></name><argument_list pos:line="42" pos:column="46">(<argument><expr><lambda><name pos:line="42" pos:column="47">t</name> <op:operator pos:line="42" pos:column="49">=&gt;</op:operator> <name pos:line="42" pos:column="52">t</name> <op:operator pos:line="42" pos:column="54">!=</op:operator> <name pos:line="42" pos:column="57">null</name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="42" pos:column="62">.</op:operator><call><name pos:line="42" pos:column="63">ToArray</name><argument_list pos:line="42" pos:column="70">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="43" pos:column="21">typesByAssembly</name><op:operator pos:line="43" pos:column="36">.</op:operator><name pos:line="43" pos:column="37">Add</name></name><argument_list pos:line="43" pos:column="40">(<argument><expr><name pos:line="43" pos:column="41">assembly</name></expr></argument>, <argument><expr><name pos:line="43" pos:column="51">allTypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <foreach pos:line="45" pos:column="21">foreach (<init><decl><type><name pos:line="45" pos:column="30">var</name></type> <name pos:line="45" pos:column="34">exception</name> <range pos:line="45" pos:column="44">in <expr><name><name pos:line="45" pos:column="47">ex</name><op:operator pos:line="45" pos:column="49">.</op:operator><name pos:line="45" pos:column="50">LoaderExceptions</name></name></expr></range></decl></init>)
                    <block pos:line="46" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="47" pos:column="25">logger</name><op:operator pos:line="47" pos:column="31">.</op:operator><name pos:line="47" pos:column="32">Warn</name></name><argument_list pos:line="47" pos:column="36">(<argument><expr><call><name><name pos:line="47" pos:column="37">string</name><op:operator pos:line="47" pos:column="43">.</op:operator><name pos:line="47" pos:column="44">Format</name></name><argument_list pos:line="47" pos:column="50">(<argument><expr><name><name pos:line="47" pos:column="51">Resources</name><op:operator pos:line="47" pos:column="60">.</op:operator><name pos:line="47" pos:column="61">DiscoverGetType</name></name></expr></argument>, <argument><expr><name><name pos:line="47" pos:column="78">assembly</name><op:operator pos:line="47" pos:column="86">.</op:operator><name pos:line="47" pos:column="87">FullName</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="47" pos:column="98">exception</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></foreach>
                }</block></catch></try>
            }</block></lock>

            <return pos:line="52" pos:column="13">return <expr><name pos:line="52" pos:column="20">allTypes</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
