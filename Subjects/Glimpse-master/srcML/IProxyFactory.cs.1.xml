<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Core\Extensibility\IProxyFactory.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>

<namespace pos:line="4" pos:column="1">namespace <name><name pos:line="4" pos:column="11">Glimpse</name><op:operator pos:line="4" pos:column="18">.</op:operator><name pos:line="4" pos:column="19">Core</name><op:operator pos:line="4" pos:column="23">.</op:operator><name pos:line="4" pos:column="24">Extensibility</name></name>
<block pos:line="5" pos:column="1">{
    <comment type="line" pos:line="6" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="7" pos:column="5">/// &lt;para&gt;</comment>
    <comment type="line" pos:line="8" pos:column="5">/// Definition of a factory that can create proxies of given objects/types. Factory </comment>
    <comment type="line" pos:line="9" pos:column="5">/// supports wrapping a interfaces, wrapping a class or extending a class. </comment>
    <comment type="line" pos:line="10" pos:column="5">/// &lt;/para&gt;</comment>
    <comment type="line" pos:line="11" pos:column="5">/// &lt;para&gt;</comment>
    <comment type="line" pos:line="12" pos:column="5">/// Wrapping takes a target instance, generates a new type that extends the input </comment>
    <comment type="line" pos:line="13" pos:column="5">/// types and injects the target object within the new instance. Extends takes a </comment>
    <comment type="line" pos:line="14" pos:column="5">/// type and generates a new type that extends it.</comment>
    <comment type="line" pos:line="15" pos:column="5">/// &lt;/para&gt;</comment>
    <comment type="line" pos:line="16" pos:column="5">/// &lt;/summary&gt;</comment>
    <comment type="line" pos:line="17" pos:column="5">/// &lt;remarks&gt;</comment>
    <comment type="line" pos:line="18" pos:column="5">/// &lt;para&gt;</comment>
    <comment type="line" pos:line="19" pos:column="5">/// When selecting a class to wrap or extend, it is important to know what constructors</comment>
    <comment type="line" pos:line="20" pos:column="5">/// you have and whether a default constructor is available.</comment>
    <comment type="line" pos:line="21" pos:column="5">/// &lt;/para&gt;</comment>
    <comment type="line" pos:line="22" pos:column="5">/// &lt;para&gt;</comment>
    <comment type="line" pos:line="23" pos:column="5">/// When a method is called on a wrapped target, it is important to note that once the </comment>
    <comment type="line" pos:line="24" pos:column="5">/// targets version of that method is called, no other method on the proxy will be called.</comment>
    <comment type="line" pos:line="25" pos:column="5">/// This can become important if you are try to wrap multiple methods where one calls the </comment>
    <comment type="line" pos:line="26" pos:column="5">/// other.</comment>
    <comment type="line" pos:line="27" pos:column="5">/// &lt;/para&gt;</comment>
    <comment type="line" pos:line="28" pos:column="5">/// &lt;para&gt;</comment>
    <comment type="line" pos:line="29" pos:column="5">/// When a method is called on a extended class, it is important to note that the new </comment>
    <comment type="line" pos:line="30" pos:column="5">/// class will behave differently to that of a wrapped classes. Meaning that if you have </comment>
    <comment type="line" pos:line="31" pos:column="5">/// multiple methods that you are providing alternates for, if one calls the other, the </comment>
    <comment type="line" pos:line="32" pos:column="5">/// alternate will be called on both methods.</comment>
    <comment type="line" pos:line="33" pos:column="5">/// &lt;/para&gt;</comment>
    <comment type="line" pos:line="34" pos:column="5">/// &lt;/remarks&gt;</comment>
    <class type="interface"><specifier pos:line="35" pos:column="5">public</specifier> interface <name pos:line="35" pos:column="22">IProxyFactory</name>
    <block pos:line="36" pos:column="5">{
        <comment type="line" pos:line="37" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="38" pos:column="9">/// Determines whether the specified type is wrap interface eligible. </comment>
        <comment type="line" pos:line="39" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="40" pos:column="9">/// &lt;typeparam name="TToWrap"&gt;The type of the T to wrap.&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="41" pos:column="9">/// &lt;param name="type"&gt;The type.&lt;/param&gt;</comment>
        <comment type="line" pos:line="42" pos:column="9">/// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if [is wrap interface eligible] [the specified type]; otherwise, &lt;c&gt;false&lt;/c&gt;.&lt;/returns&gt;</comment>
        <comment type="line" pos:line="43" pos:column="9">/// &lt;remarks&gt;</comment>
        <comment type="line" pos:line="44" pos:column="9">/// Wrapping takes a target instance, generates a new type that extends</comment>
        <comment type="line" pos:line="45" pos:column="9">/// the input types and injects the target object within the new instance.</comment>
        <comment type="line" pos:line="46" pos:column="9">/// &lt;/remarks&gt;</comment>
        <function_decl><type><name pos:line="47" pos:column="9">bool</name></type> <name><name pos:line="47" pos:column="14">IsWrapInterfaceEligible</name><argument_list pos:line="47" pos:column="37">&lt;<argument><name pos:line="47" pos:column="38">TToWrap</name></argument>&gt;</argument_list></name><parameter_list pos:line="47" pos:column="46">(<param><decl><type><name pos:line="47" pos:column="47">Type</name></type> <name pos:line="47" pos:column="52">type</name></decl></param>)</parameter_list>;</function_decl>

        <comment type="line" pos:line="49" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="50" pos:column="9">/// Wraps the interface. </comment>
        <comment type="line" pos:line="51" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="52" pos:column="9">/// &lt;typeparam name="T"&gt;Instance type&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="53" pos:column="9">/// &lt;param name="instance"&gt;The instance.&lt;/param&gt;</comment>
        <comment type="line" pos:line="54" pos:column="9">/// &lt;param name="methodImplementations"&gt;The method implementations.&lt;/param&gt;</comment>
        <comment type="line" pos:line="55" pos:column="9">/// &lt;returns&gt;Wrapped instance.&lt;/returns&gt;</comment>
        <comment type="line" pos:line="56" pos:column="9">/// &lt;remarks&gt;</comment>
        <comment type="line" pos:line="57" pos:column="9">/// Wrapping takes a target instance, generates a new type that extends</comment>
        <comment type="line" pos:line="58" pos:column="9">/// the input types and injects the target object within the new instance.</comment>
        <comment type="line" pos:line="59" pos:column="9">/// &lt;/remarks&gt;</comment>
        <function_decl><type><name pos:line="60" pos:column="9">T</name></type> <name><name pos:line="60" pos:column="11">WrapInterface</name><argument_list pos:line="60" pos:column="24">&lt;<argument><name pos:line="60" pos:column="25">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="60" pos:column="27">(<param><decl><type><name pos:line="60" pos:column="28">T</name></type> <name pos:line="60" pos:column="30">instance</name></decl></param>, <param><decl><type><name><name pos:line="60" pos:column="40">IEnumerable</name><argument_list pos:line="60" pos:column="51">&lt;<argument><name pos:line="60" pos:column="52">IAlternateMethod</name></argument>&gt;</argument_list></name></type> <name pos:line="60" pos:column="70">methodImplementations</name></decl></param>)</parameter_list> <where pos:line="60" pos:column="93">where <name pos:line="60" pos:column="99">T</name> : class</where>;</function_decl>

        <comment type="line" pos:line="62" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="63" pos:column="9">/// Wraps the interface.</comment>
        <comment type="line" pos:line="64" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="65" pos:column="9">/// &lt;typeparam name="T"&gt;Instance type&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="66" pos:column="9">/// &lt;param name="instance"&gt;The instance.&lt;/param&gt;</comment>
        <comment type="line" pos:line="67" pos:column="9">/// &lt;param name="methodImplementations"&gt;The method implementations.&lt;/param&gt;</comment>
        <comment type="line" pos:line="68" pos:column="9">/// &lt;param name="mixins"&gt;The mixins.&lt;/param&gt;</comment>
        <comment type="line" pos:line="69" pos:column="9">/// &lt;returns&gt;Wrapped instance.&lt;/returns&gt;</comment>
        <comment type="line" pos:line="70" pos:column="9">/// &lt;remarks&gt;</comment>
        <comment type="line" pos:line="71" pos:column="9">/// Wrapping takes a target instance, generates a new type that extends</comment>
        <comment type="line" pos:line="72" pos:column="9">/// the input types and injects the target object within the new instance.</comment>
        <comment type="line" pos:line="73" pos:column="9">/// &lt;/remarks&gt;</comment>
        <function_decl><type><name pos:line="74" pos:column="9">T</name></type> <name><name pos:line="74" pos:column="11">WrapInterface</name><argument_list pos:line="74" pos:column="24">&lt;<argument><name pos:line="74" pos:column="25">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="74" pos:column="27">(<param><decl><type><name pos:line="74" pos:column="28">T</name></type> <name pos:line="74" pos:column="30">instance</name></decl></param>, <param><decl><type><name><name pos:line="74" pos:column="40">IEnumerable</name><argument_list pos:line="74" pos:column="51">&lt;<argument><name pos:line="74" pos:column="52">IAlternateMethod</name></argument>&gt;</argument_list></name></type> <name pos:line="74" pos:column="70">methodImplementations</name></decl></param>, <param><decl><type><name><name pos:line="74" pos:column="93">IEnumerable</name><argument_list pos:line="74" pos:column="104">&lt;<argument><name pos:line="74" pos:column="105">object</name></argument>&gt;</argument_list></name></type> <name pos:line="74" pos:column="113">mixins</name></decl></param>)</parameter_list> <where pos:line="74" pos:column="121">where <name pos:line="74" pos:column="127">T</name> : class</where>;</function_decl>

        <comment type="line" pos:line="76" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="77" pos:column="9">/// Determines whether the specified type is wrap class eligible.</comment>
        <comment type="line" pos:line="78" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="79" pos:column="9">/// &lt;param name="type"&gt;The type.&lt;/param&gt;</comment>
        <comment type="line" pos:line="80" pos:column="9">/// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if [is wrap class eligible] [the specified type]; otherwise, &lt;c&gt;false&lt;/c&gt;.&lt;/returns&gt;</comment>
        <comment type="line" pos:line="81" pos:column="9">/// &lt;remarks&gt;</comment>
        <comment type="line" pos:line="82" pos:column="9">/// Wrapping takes a target instance, generates a new type that extends</comment>
        <comment type="line" pos:line="83" pos:column="9">/// the input types and injects the target object within the new instance.</comment>
        <comment type="line" pos:line="84" pos:column="9">/// &lt;/remarks&gt;</comment>
        <function_decl><type><name pos:line="85" pos:column="9">bool</name></type> <name pos:line="85" pos:column="14">IsWrapClassEligible</name><parameter_list pos:line="85" pos:column="33">(<param><decl><type><name pos:line="85" pos:column="34">Type</name></type> <name pos:line="85" pos:column="39">type</name></decl></param>)</parameter_list>;</function_decl>

        <comment type="line" pos:line="87" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="88" pos:column="9">/// Wraps the class.</comment>
        <comment type="line" pos:line="89" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="90" pos:column="9">/// &lt;typeparam name="T"&gt;Instance type&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="91" pos:column="9">/// &lt;param name="instance"&gt;The instance.&lt;/param&gt;</comment>
        <comment type="line" pos:line="92" pos:column="9">/// &lt;param name="methodImplementations"&gt;The method implementations.&lt;/param&gt;</comment>
        <comment type="line" pos:line="93" pos:column="9">/// &lt;returns&gt;Wrapped instance.&lt;/returns&gt;</comment>
        <comment type="line" pos:line="94" pos:column="9">/// &lt;remarks&gt;</comment>
        <comment type="line" pos:line="95" pos:column="9">/// Wrapping takes a target instance, generates a new type that extends</comment>
        <comment type="line" pos:line="96" pos:column="9">/// the input types and injects the target object within the new instance.</comment>
        <comment type="line" pos:line="97" pos:column="9">/// &lt;/remarks&gt;</comment>
        <function_decl><type><name pos:line="98" pos:column="9">T</name></type> <name><name pos:line="98" pos:column="11">WrapClass</name><argument_list pos:line="98" pos:column="20">&lt;<argument><name pos:line="98" pos:column="21">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="98" pos:column="23">(<param><decl><type><name pos:line="98" pos:column="24">T</name></type> <name pos:line="98" pos:column="26">instance</name></decl></param>, <param><decl><type><name><name pos:line="98" pos:column="36">IEnumerable</name><argument_list pos:line="98" pos:column="47">&lt;<argument><name pos:line="98" pos:column="48">IAlternateMethod</name></argument>&gt;</argument_list></name></type> <name pos:line="98" pos:column="66">methodImplementations</name></decl></param>)</parameter_list> <where pos:line="98" pos:column="89">where <name pos:line="98" pos:column="95">T</name> : class</where>;</function_decl>

        <comment type="line" pos:line="100" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="101" pos:column="9">/// Wraps the class.</comment>
        <comment type="line" pos:line="102" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="103" pos:column="9">/// &lt;typeparam name="T"&gt;Instance type&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="104" pos:column="9">/// &lt;param name="instance"&gt;The instance.&lt;/param&gt;</comment>
        <comment type="line" pos:line="105" pos:column="9">/// &lt;param name="methodImplementations"&gt;The method implementations.&lt;/param&gt;</comment>
        <comment type="line" pos:line="106" pos:column="9">/// &lt;param name="mixins"&gt;The mixins.&lt;/param&gt;</comment>
        <comment type="line" pos:line="107" pos:column="9">/// &lt;returns&gt;Wrapped instance.&lt;/returns&gt;</comment>
        <comment type="line" pos:line="108" pos:column="9">/// &lt;remarks&gt;</comment>
        <comment type="line" pos:line="109" pos:column="9">/// Wrapping takes a target instance, generates a new type that extends</comment>
        <comment type="line" pos:line="110" pos:column="9">/// the input types and injects the target object within the new instance.</comment>
        <comment type="line" pos:line="111" pos:column="9">/// &lt;/remarks&gt;</comment>
        <function_decl><type><name pos:line="112" pos:column="9">T</name></type> <name><name pos:line="112" pos:column="11">WrapClass</name><argument_list pos:line="112" pos:column="20">&lt;<argument><name pos:line="112" pos:column="21">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="112" pos:column="23">(<param><decl><type><name pos:line="112" pos:column="24">T</name></type> <name pos:line="112" pos:column="26">instance</name></decl></param>, <param><decl><type><name><name pos:line="112" pos:column="36">IEnumerable</name><argument_list pos:line="112" pos:column="47">&lt;<argument><name pos:line="112" pos:column="48">IAlternateMethod</name></argument>&gt;</argument_list></name></type> <name pos:line="112" pos:column="66">methodImplementations</name></decl></param>, <param><decl><type><name><name pos:line="112" pos:column="89">IEnumerable</name><argument_list pos:line="112" pos:column="100">&lt;<argument><name pos:line="112" pos:column="101">object</name></argument>&gt;</argument_list></name></type> <name pos:line="112" pos:column="109">mixins</name></decl></param>)</parameter_list> <where pos:line="112" pos:column="117">where <name pos:line="112" pos:column="123">T</name> : class</where>;</function_decl>

        <comment type="line" pos:line="114" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="115" pos:column="9">/// Wraps the class.</comment>
        <comment type="line" pos:line="116" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="117" pos:column="9">/// &lt;typeparam name="T"&gt;Instance type&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="118" pos:column="9">/// &lt;param name="instance"&gt;The instance.&lt;/param&gt;</comment>
        <comment type="line" pos:line="119" pos:column="9">/// &lt;param name="methodImplementations"&gt;The method implementations.&lt;/param&gt;</comment>
        <comment type="line" pos:line="120" pos:column="9">/// &lt;param name="mixins"&gt;The mixins.&lt;/param&gt;</comment>
        <comment type="line" pos:line="121" pos:column="9">/// &lt;param name="constructorArguments"&gt;The constructor arguments.&lt;/param&gt;</comment>
        <comment type="line" pos:line="122" pos:column="9">/// &lt;returns&gt;Wrapped instance.&lt;/returns&gt;</comment>
        <comment type="line" pos:line="123" pos:column="9">/// &lt;remarks&gt;</comment>
        <comment type="line" pos:line="124" pos:column="9">/// Wrapping takes a target instance, generates a new type that extends</comment>
        <comment type="line" pos:line="125" pos:column="9">/// the input types and injects the target object within the new instance.</comment>
        <comment type="line" pos:line="126" pos:column="9">/// &lt;/remarks&gt;</comment>
        <function_decl><type><name pos:line="127" pos:column="9">T</name></type> <name><name pos:line="127" pos:column="11">WrapClass</name><argument_list pos:line="127" pos:column="20">&lt;<argument><name pos:line="127" pos:column="21">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="127" pos:column="23">(<param><decl><type><name pos:line="127" pos:column="24">T</name></type> <name pos:line="127" pos:column="26">instance</name></decl></param>, <param><decl><type><name><name pos:line="127" pos:column="36">IEnumerable</name><argument_list pos:line="127" pos:column="47">&lt;<argument><name pos:line="127" pos:column="48">IAlternateMethod</name></argument>&gt;</argument_list></name></type> <name pos:line="127" pos:column="66">methodImplementations</name></decl></param>, <param><decl><type><name><name pos:line="127" pos:column="89">IEnumerable</name><argument_list pos:line="127" pos:column="100">&lt;<argument><name pos:line="127" pos:column="101">object</name></argument>&gt;</argument_list></name></type> <name pos:line="127" pos:column="109">mixins</name></decl></param>, <param><decl><type><name><name pos:line="127" pos:column="117">IEnumerable</name><argument_list pos:line="127" pos:column="128">&lt;<argument><name pos:line="127" pos:column="129">object</name></argument>&gt;</argument_list></name></type> <name pos:line="127" pos:column="137">constructorArguments</name></decl></param>)</parameter_list> <where pos:line="127" pos:column="159">where <name pos:line="127" pos:column="165">T</name> : class</where>;</function_decl>

        <comment type="line" pos:line="129" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="130" pos:column="9">/// Determines whether the specified type is extend class eligible.</comment>
        <comment type="line" pos:line="131" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="132" pos:column="9">/// &lt;param name="type"&gt;The type.&lt;/param&gt;</comment>
        <comment type="line" pos:line="133" pos:column="9">/// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if [is extend class eligible] [the specified type]; otherwise, &lt;c&gt;false&lt;/c&gt;.&lt;/returns&gt;</comment>
        <function_decl><type><name pos:line="134" pos:column="9">bool</name></type> <name pos:line="134" pos:column="14">IsExtendClassEligible</name><parameter_list pos:line="134" pos:column="35">(<param><decl><type><name pos:line="134" pos:column="36">Type</name></type> <name pos:line="134" pos:column="41">type</name></decl></param>)</parameter_list>;</function_decl>

        <comment type="line" pos:line="136" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="137" pos:column="9">/// Extends the class.</comment>
        <comment type="line" pos:line="138" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="139" pos:column="9">/// &lt;typeparam name="T"&gt;Instance type&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="140" pos:column="9">/// &lt;param name="methodImplementations"&gt;The method implementations.&lt;/param&gt;</comment>
        <comment type="line" pos:line="141" pos:column="9">/// &lt;returns&gt;Extended instance.&lt;/returns&gt;</comment>
        <function_decl><type><name pos:line="142" pos:column="9">T</name></type> <name><name pos:line="142" pos:column="11">ExtendClass</name><argument_list pos:line="142" pos:column="22">&lt;<argument><name pos:line="142" pos:column="23">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="142" pos:column="25">(<param><decl><type><name><name pos:line="142" pos:column="26">IEnumerable</name><argument_list pos:line="142" pos:column="37">&lt;<argument><name pos:line="142" pos:column="38">IAlternateMethod</name></argument>&gt;</argument_list></name></type> <name pos:line="142" pos:column="56">methodImplementations</name></decl></param>)</parameter_list> <where pos:line="142" pos:column="79">where <name pos:line="142" pos:column="85">T</name> : class</where>;</function_decl>

        <comment type="line" pos:line="144" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="145" pos:column="9">/// Extends the class.</comment>
        <comment type="line" pos:line="146" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="147" pos:column="9">/// &lt;typeparam name="T"&gt;Instance type&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="148" pos:column="9">/// &lt;param name="methodImplementations"&gt;The method implementations.&lt;/param&gt;</comment>
        <comment type="line" pos:line="149" pos:column="9">/// &lt;param name="mixins"&gt;The mixins.&lt;/param&gt;</comment>
        <comment type="line" pos:line="150" pos:column="9">/// &lt;returns&gt;Extended instance.&lt;/returns&gt;</comment>
        <function_decl><type><name pos:line="151" pos:column="9">T</name></type> <name><name pos:line="151" pos:column="11">ExtendClass</name><argument_list pos:line="151" pos:column="22">&lt;<argument><name pos:line="151" pos:column="23">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="151" pos:column="25">(<param><decl><type><name><name pos:line="151" pos:column="26">IEnumerable</name><argument_list pos:line="151" pos:column="37">&lt;<argument><name pos:line="151" pos:column="38">IAlternateMethod</name></argument>&gt;</argument_list></name></type> <name pos:line="151" pos:column="56">methodImplementations</name></decl></param>, <param><decl><type><name><name pos:line="151" pos:column="79">IEnumerable</name><argument_list pos:line="151" pos:column="90">&lt;<argument><name pos:line="151" pos:column="91">object</name></argument>&gt;</argument_list></name></type> <name pos:line="151" pos:column="99">mixins</name></decl></param>)</parameter_list> <where pos:line="151" pos:column="107">where <name pos:line="151" pos:column="113">T</name> : class</where>;</function_decl>

        <comment type="line" pos:line="153" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="154" pos:column="9">/// Extends the class.</comment>
        <comment type="line" pos:line="155" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="156" pos:column="9">/// &lt;typeparam name="T"&gt;Instance type&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="157" pos:column="9">/// &lt;param name="methodImplementations"&gt;The method implementations.&lt;/param&gt;</comment>
        <comment type="line" pos:line="158" pos:column="9">/// &lt;param name="mixins"&gt;The mixins.&lt;/param&gt;</comment>
        <comment type="line" pos:line="159" pos:column="9">/// &lt;param name="constructorArguments"&gt;The constructor arguments.&lt;/param&gt;</comment>
        <comment type="line" pos:line="160" pos:column="9">/// &lt;returns&gt;Extended instance.&lt;/returns&gt;</comment>
        <function_decl><type><name pos:line="161" pos:column="9">T</name></type> <name><name pos:line="161" pos:column="11">ExtendClass</name><argument_list pos:line="161" pos:column="22">&lt;<argument><name pos:line="161" pos:column="23">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="161" pos:column="25">(<param><decl><type><name><name pos:line="161" pos:column="26">IEnumerable</name><argument_list pos:line="161" pos:column="37">&lt;<argument><name pos:line="161" pos:column="38">IAlternateMethod</name></argument>&gt;</argument_list></name></type> <name pos:line="161" pos:column="56">methodImplementations</name></decl></param>, <param><decl><type><name><name pos:line="161" pos:column="79">IEnumerable</name><argument_list pos:line="161" pos:column="90">&lt;<argument><name pos:line="161" pos:column="91">object</name></argument>&gt;</argument_list></name></type> <name pos:line="161" pos:column="99">mixins</name></decl></param>, <param><decl><type><name><name pos:line="161" pos:column="107">IEnumerable</name><argument_list pos:line="161" pos:column="118">&lt;<argument><name pos:line="161" pos:column="119">object</name></argument>&gt;</argument_list></name></type> <name pos:line="161" pos:column="127">constructorArguments</name></decl></param>)</parameter_list> <where pos:line="161" pos:column="149">where <name pos:line="161" pos:column="155">T</name> : class</where>;</function_decl>
    }</block></class>
}</block></namespace></unit>
