<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.WebForms\SerializationConverter\IndexedStringListConverter.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Collections</name><op:operator pos:line="3" pos:column="25">.</op:operator><name pos:line="3" pos:column="26">Generic</name></name>;</using> 
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Web</name><op:operator pos:line="4" pos:column="17">.</op:operator><name pos:line="4" pos:column="18">UI</name></name>;</using> 
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Glimpse</name><op:operator pos:line="5" pos:column="14">.</op:operator><name pos:line="5" pos:column="15">Core</name><op:operator pos:line="5" pos:column="19">.</op:operator><name pos:line="5" pos:column="20">Extensibility</name></name>;</using>

<namespace pos:line="7" pos:column="1">namespace <name><name pos:line="7" pos:column="11">Glimpse</name><op:operator pos:line="7" pos:column="18">.</op:operator><name pos:line="7" pos:column="19">WebForms</name><op:operator pos:line="7" pos:column="27">.</op:operator><name pos:line="7" pos:column="28">SerializationConverter</name></name>
<block pos:line="8" pos:column="1">{
    <class><specifier pos:line="9" pos:column="5">public</specifier> class <name pos:line="9" pos:column="18">IndexedStringListConverter</name> <super pos:line="9" pos:column="45">: <name pos:line="9" pos:column="47">ISerializationConverter</name></super>
    <block pos:line="10" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="11" pos:column="9">public</specifier> <name><name pos:line="11" pos:column="16">IEnumerable</name><argument_list pos:line="11" pos:column="27">&lt;<argument><name pos:line="11" pos:column="28">Type</name></argument>&gt;</argument_list></name></type> <name pos:line="11" pos:column="34">SupportedTypes</name>
        <block pos:line="12" pos:column="9">{
            <function><name pos:line="13" pos:column="13">get</name> <block pos:line="13" pos:column="17">{ <return pos:line="13" pos:column="19">return <expr><op:operator pos:line="13" pos:column="26">new</op:operator> <name><name pos:line="13" pos:column="30">List</name><argument_list pos:line="13" pos:column="34">&lt;<argument><name pos:line="13" pos:column="35">Type</name></argument>&gt;</argument_list></name> <block pos:line="13" pos:column="41">{ <expr><call><name pos:line="13" pos:column="43">typeof</name><argument_list pos:line="13" pos:column="49">(<argument><expr><name pos:line="13" pos:column="50">Pair</name></expr></argument>)</argument_list></call></expr><op:operator pos:line="13" pos:column="55">,</op:operator> <expr><call><name pos:line="13" pos:column="57">typeof</name><argument_list pos:line="13" pos:column="63">(<argument><expr><name pos:line="13" pos:column="64">Triplet</name></expr></argument>)</argument_list></call></expr><op:operator pos:line="13" pos:column="72">,</op:operator> <expr><call><name pos:line="13" pos:column="74">typeof</name><argument_list pos:line="13" pos:column="80">(<argument><expr><name pos:line="13" pos:column="81">IndexedStringListConverterTarget</name></expr></argument>)</argument_list></call></expr> }</block></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <function><type><specifier pos:line="16" pos:column="9">public</specifier> <name pos:line="16" pos:column="16">object</name></type> <name pos:line="16" pos:column="23">Convert</name><parameter_list pos:line="16" pos:column="30">(<param><decl><type><name pos:line="16" pos:column="31">object</name></type> <name pos:line="16" pos:column="38">target</name></decl></param>)</parameter_list>
        <block pos:line="17" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="18" pos:column="13">var</name></type> <name pos:line="18" pos:column="17">pair</name> <init pos:line="18" pos:column="22">= <expr><name pos:line="18" pos:column="24">target</name> <op:operator pos:line="18" pos:column="31">as</op:operator> <name pos:line="18" pos:column="34">Pair</name></expr></init></decl>;</decl_stmt>
            <if pos:line="19" pos:column="13">if <condition pos:line="19" pos:column="16">(<expr><name pos:line="19" pos:column="17">pair</name> <op:operator pos:line="19" pos:column="22">!=</op:operator> <name pos:line="19" pos:column="25">null</name></expr>)</condition><then pos:line="19" pos:column="30">
            <block pos:line="20" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="21" pos:column="17">var</name></type> <name pos:line="21" pos:column="21">result</name> <init pos:line="21" pos:column="28">= <expr><op:operator pos:line="21" pos:column="30">new</op:operator> <call><name><name pos:line="21" pos:column="34">Dictionary</name><argument_list pos:line="21" pos:column="44">&lt;<argument><name pos:line="21" pos:column="45">string</name></argument>, <argument><name pos:line="21" pos:column="53">object</name></argument>&gt;</argument_list></name><argument_list pos:line="21" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="22" pos:column="17">result</name><op:operator pos:line="22" pos:column="23">.</op:operator><name pos:line="22" pos:column="24">Add</name></name><argument_list pos:line="22" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="22" pos:column="28">"first"</lit:literal></expr></argument>, <argument><expr><call><name pos:line="22" pos:column="37">ProcessValue</name><argument_list pos:line="22" pos:column="49">(<argument><expr><name><name pos:line="22" pos:column="50">pair</name><op:operator pos:line="22" pos:column="54">.</op:operator><name pos:line="22" pos:column="55">First</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="23" pos:column="17">result</name><op:operator pos:line="23" pos:column="23">.</op:operator><name pos:line="23" pos:column="24">Add</name></name><argument_list pos:line="23" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="23" pos:column="28">"second"</lit:literal></expr></argument>, <argument><expr><call><name pos:line="23" pos:column="38">ProcessValue</name><argument_list pos:line="23" pos:column="50">(<argument><expr><name><name pos:line="23" pos:column="51">pair</name><op:operator pos:line="23" pos:column="55">.</op:operator><name pos:line="23" pos:column="56">Second</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:line="25" pos:column="17">return <expr><name pos:line="25" pos:column="24">result</name></expr>;</return>
            }</block></then></if>
            
            <decl_stmt><decl><type><name pos:line="28" pos:column="13">var</name></type> <name pos:line="28" pos:column="17">triplet</name> <init pos:line="28" pos:column="25">= <expr><name pos:line="28" pos:column="27">target</name> <op:operator pos:line="28" pos:column="34">as</op:operator> <name pos:line="28" pos:column="37">Triplet</name></expr></init></decl>;</decl_stmt>
            <if pos:line="29" pos:column="13">if <condition pos:line="29" pos:column="16">(<expr><name pos:line="29" pos:column="17">triplet</name> <op:operator pos:line="29" pos:column="25">!=</op:operator> <name pos:line="29" pos:column="28">null</name></expr>)</condition><then pos:line="29" pos:column="33">
            <block pos:line="30" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="31" pos:column="17">var</name></type> <name pos:line="31" pos:column="21">result</name> <init pos:line="31" pos:column="28">= <expr><op:operator pos:line="31" pos:column="30">new</op:operator> <call><name><name pos:line="31" pos:column="34">Dictionary</name><argument_list pos:line="31" pos:column="44">&lt;<argument><name pos:line="31" pos:column="45">string</name></argument>, <argument><name pos:line="31" pos:column="53">object</name></argument>&gt;</argument_list></name><argument_list pos:line="31" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="32" pos:column="17">result</name><op:operator pos:line="32" pos:column="23">.</op:operator><name pos:line="32" pos:column="24">Add</name></name><argument_list pos:line="32" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="32" pos:column="28">"first"</lit:literal></expr></argument>, <argument><expr><call><name pos:line="32" pos:column="37">ProcessValue</name><argument_list pos:line="32" pos:column="49">(<argument><expr><name><name pos:line="32" pos:column="50">triplet</name><op:operator pos:line="32" pos:column="57">.</op:operator><name pos:line="32" pos:column="58">First</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="33" pos:column="17">result</name><op:operator pos:line="33" pos:column="23">.</op:operator><name pos:line="33" pos:column="24">Add</name></name><argument_list pos:line="33" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="33" pos:column="28">"second"</lit:literal></expr></argument>, <argument><expr><call><name pos:line="33" pos:column="38">ProcessValue</name><argument_list pos:line="33" pos:column="50">(<argument><expr><name><name pos:line="33" pos:column="51">triplet</name><op:operator pos:line="33" pos:column="58">.</op:operator><name pos:line="33" pos:column="59">Second</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="34" pos:column="17">result</name><op:operator pos:line="34" pos:column="23">.</op:operator><name pos:line="34" pos:column="24">Add</name></name><argument_list pos:line="34" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="34" pos:column="28">"third"</lit:literal></expr></argument>, <argument><expr><call><name pos:line="34" pos:column="37">ProcessValue</name><argument_list pos:line="34" pos:column="49">(<argument><expr><name><name pos:line="34" pos:column="50">triplet</name><op:operator pos:line="34" pos:column="57">.</op:operator><name pos:line="34" pos:column="58">Third</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:line="36" pos:column="17">return <expr><name pos:line="36" pos:column="24">result</name></expr>;</return>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="39" pos:column="13">var</name></type> <name pos:line="39" pos:column="17">store</name> <init pos:line="39" pos:column="23">= <expr><name pos:line="39" pos:column="25">target</name> <op:operator pos:line="39" pos:column="32">as</op:operator> <name pos:line="39" pos:column="35">IndexedStringListConverterTarget</name></expr></init></decl>;</decl_stmt>
            <if pos:line="40" pos:column="13">if <condition pos:line="40" pos:column="16">(<expr><name pos:line="40" pos:column="17">store</name> <op:operator pos:line="40" pos:column="23">!=</op:operator> <name pos:line="40" pos:column="26">null</name></expr>)</condition><then pos:line="40" pos:column="31">
            <block pos:line="41" pos:column="13">{
                <return pos:line="42" pos:column="17">return <expr><call><name pos:line="42" pos:column="24">ProcessValue</name><argument_list pos:line="42" pos:column="36">(<argument><expr><name><name pos:line="42" pos:column="37">store</name><op:operator pos:line="42" pos:column="42">.</op:operator><name pos:line="42" pos:column="43">Data</name></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>

            <return pos:line="45" pos:column="13">return <expr><name pos:line="45" pos:column="20">target</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="48" pos:column="9">private</specifier> <name pos:line="48" pos:column="17">object</name></type> <name pos:line="48" pos:column="24">ProcessValue</name><parameter_list pos:line="48" pos:column="36">(<param><decl><type><name pos:line="48" pos:column="37">object</name></type> <name pos:line="48" pos:column="44">data</name></decl></param>)</parameter_list>
        <block pos:line="49" pos:column="9">{
            <if pos:line="50" pos:column="13">if <condition pos:line="50" pos:column="16">(<expr><name pos:line="50" pos:column="17">data</name> <op:operator pos:line="50" pos:column="22">!=</op:operator> <name pos:line="50" pos:column="25">null</name></expr>)</condition><then pos:line="50" pos:column="30">
            <block pos:line="51" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="52" pos:column="17">var</name></type> <name pos:line="52" pos:column="21">list</name> <init pos:line="52" pos:column="26">= <expr><name pos:line="52" pos:column="28">data</name> <op:operator pos:line="52" pos:column="33">as</op:operator> <name pos:line="52" pos:column="36">IList</name></expr></init></decl>;</decl_stmt>
                <if pos:line="53" pos:column="17">if <condition pos:line="53" pos:column="20">(<expr><name pos:line="53" pos:column="21">list</name> <op:operator pos:line="53" pos:column="26">!=</op:operator> <name pos:line="53" pos:column="29">null</name> <op:operator pos:line="53" pos:column="34">&amp;&amp;</op:operator> <name><name pos:line="53" pos:column="37">list</name><op:operator pos:line="53" pos:column="41">.</op:operator><name pos:line="53" pos:column="42">Count</name></name> <op:operator pos:line="53" pos:column="48">&gt;</op:operator> <lit:literal type="number" pos:line="53" pos:column="50">0</lit:literal></expr>)</condition><then pos:line="53" pos:column="52">
                <block pos:line="54" pos:column="17">{
                    <if pos:line="55" pos:column="21">if <condition pos:line="55" pos:column="24">(<expr><name><name pos:line="55" pos:column="25">list</name><op:operator pos:line="55" pos:column="29">.</op:operator><name pos:line="55" pos:column="30">Count</name></name> <op:operator pos:line="55" pos:column="36">%</op:operator> <lit:literal type="number" pos:line="55" pos:column="38">2</lit:literal> <op:operator pos:line="55" pos:column="40">==</op:operator> <lit:literal type="number" pos:line="55" pos:column="43">0</lit:literal> <op:operator pos:line="55" pos:column="45">&amp;&amp;</op:operator> <name><name pos:line="55" pos:column="48">list</name><index pos:line="55" pos:column="52">[<expr><lit:literal type="number" pos:line="55" pos:column="53">0</lit:literal></expr>]</index></name> <op:operator pos:line="55" pos:column="56">is</op:operator> <name pos:line="55" pos:column="59">IndexedString</name></expr>)</condition><then pos:line="55" pos:column="73">
                    <block pos:line="56" pos:column="21">{
                        <decl_stmt><decl><type><name pos:line="57" pos:column="25">var</name></type> <name pos:line="57" pos:column="29">result</name> <init pos:line="57" pos:column="36">= <expr><op:operator pos:line="57" pos:column="38">new</op:operator> <call><name><name pos:line="57" pos:column="42">Dictionary</name><argument_list pos:line="57" pos:column="52">&lt;<argument><name pos:line="57" pos:column="53">object</name></argument>, <argument><name pos:line="57" pos:column="61">object</name></argument>&gt;</argument_list></name><argument_list pos:line="57" pos:column="68">()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <for pos:line="58" pos:column="25">for (<init><decl><type><name pos:line="58" pos:column="30">int</name></type> <name pos:line="58" pos:column="34">i</name> <init pos:line="58" pos:column="36">= <expr><lit:literal type="number" pos:line="58" pos:column="38">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="58" pos:column="41">i</name> <op:operator pos:line="58" pos:column="43">&lt;</op:operator> <name><name pos:line="58" pos:column="45">list</name><op:operator pos:line="58" pos:column="49">.</op:operator><name pos:line="58" pos:column="50">Count</name></name></expr>;</condition> <incr><expr><name pos:line="58" pos:column="57">i</name> <op:operator pos:line="58" pos:column="59">=</op:operator> <name pos:line="58" pos:column="61">i</name> <op:operator pos:line="58" pos:column="63">+</op:operator> <lit:literal type="number" pos:line="58" pos:column="65">2</lit:literal></expr></incr>)
                        <block pos:line="59" pos:column="25">{
                            <decl_stmt><decl><type><name pos:line="60" pos:column="29">var</name></type> <name pos:line="60" pos:column="33">key</name> <init pos:line="60" pos:column="37">= <expr><name><name pos:line="60" pos:column="39">list</name><index pos:line="60" pos:column="43">[<expr><name pos:line="60" pos:column="44">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                            <if pos:line="61" pos:column="29">if <condition pos:line="61" pos:column="32">(<expr><name pos:line="61" pos:column="33">key</name> <op:operator pos:line="61" pos:column="37">is</op:operator> <name pos:line="61" pos:column="40">IndexedString</name></expr>)</condition><then pos:line="61" pos:column="54">
                            <block pos:line="62" pos:column="29">{
                                <expr_stmt><expr><name pos:line="63" pos:column="33">key</name> <op:operator pos:line="63" pos:column="37">=</op:operator> <op:operator pos:line="63" pos:column="39">(</op:operator><op:operator pos:line="63" pos:column="40">(</op:operator><name pos:line="63" pos:column="41">IndexedString</name><op:operator pos:line="63" pos:column="54">)</op:operator><name pos:line="63" pos:column="55">key</name><op:operator pos:line="63" pos:column="58">)</op:operator><op:operator pos:line="63" pos:column="59">.</op:operator><name pos:line="63" pos:column="60">Value</name></expr>;</expr_stmt>
                            }</block></then></if>

                            <expr_stmt><expr><call><name><name pos:line="66" pos:column="29">result</name><op:operator pos:line="66" pos:column="35">.</op:operator><name pos:line="66" pos:column="36">Add</name></name><argument_list pos:line="66" pos:column="39">(<argument><expr><name pos:line="66" pos:column="40">key</name></expr></argument>, <argument><expr><name><name pos:line="66" pos:column="45">list</name><index pos:line="66" pos:column="49">[<expr><name pos:line="66" pos:column="50">i</name> <op:operator pos:line="66" pos:column="52">+</op:operator> <lit:literal type="number" pos:line="66" pos:column="54">1</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></for>

                        <expr_stmt><expr><name pos:line="69" pos:column="25">data</name> <op:operator pos:line="69" pos:column="30">=</op:operator> <name pos:line="69" pos:column="32">result</name></expr>;</expr_stmt>
                    }</block></then>
                    <else pos:line="71" pos:column="21">else
                    <block pos:line="72" pos:column="21">{
                        <decl_stmt><decl><type><name pos:line="73" pos:column="25">var</name></type> <name pos:line="73" pos:column="29">temp</name> <init pos:line="73" pos:column="34">= <expr><call><name pos:line="73" pos:column="36">ProcessValue</name><argument_list pos:line="73" pos:column="48">(<argument><expr><name><name pos:line="73" pos:column="49">list</name><index pos:line="73" pos:column="53">[<expr><lit:literal type="number" pos:line="73" pos:column="54">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if pos:line="74" pos:column="25">if <condition pos:line="74" pos:column="28">(<expr><name pos:line="74" pos:column="29">temp</name> <op:operator pos:line="74" pos:column="34">!=</op:operator> <name><name pos:line="74" pos:column="37">list</name><index pos:line="74" pos:column="41">[<expr><lit:literal type="number" pos:line="74" pos:column="42">0</lit:literal></expr>]</index></name></expr>)</condition><then pos:line="74" pos:column="45">
                        <block pos:line="75" pos:column="25">{
                            <decl_stmt><decl><type><name pos:line="76" pos:column="29">var</name></type> <name pos:line="76" pos:column="33">result</name> <init pos:line="76" pos:column="40">= <expr><op:operator pos:line="76" pos:column="42">new</op:operator> <name><name pos:line="76" pos:column="46">Dictionary</name><argument_list pos:line="76" pos:column="56">&lt;<argument><name pos:line="76" pos:column="57">int</name></argument>, <argument><name pos:line="76" pos:column="62">object</name></argument>&gt;</argument_list></name> <block pos:line="76" pos:column="70">{ <expr><block pos:line="76" pos:column="72">{ <expr><lit:literal type="number" pos:line="76" pos:column="74">0</lit:literal></expr>, <expr><name pos:line="76" pos:column="77">temp</name></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt> 
                            <for pos:line="77" pos:column="29">for (<init><decl><type><name pos:line="77" pos:column="34">int</name></type> <name pos:line="77" pos:column="38">i</name> <init pos:line="77" pos:column="40">= <expr><lit:literal type="number" pos:line="77" pos:column="42">1</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="77" pos:column="45">i</name> <op:operator pos:line="77" pos:column="47">&lt;</op:operator> <name><name pos:line="77" pos:column="49">list</name><op:operator pos:line="77" pos:column="53">.</op:operator><name pos:line="77" pos:column="54">Count</name></name></expr>;</condition> <incr><expr><name pos:line="77" pos:column="61">i</name><op:operator pos:line="77" pos:column="62">++</op:operator></expr></incr>)
                            <block pos:line="78" pos:column="29">{
                                <expr_stmt><expr><call><name><name pos:line="79" pos:column="33">result</name><op:operator pos:line="79" pos:column="39">.</op:operator><name pos:line="79" pos:column="40">Add</name></name><argument_list pos:line="79" pos:column="43">(<argument><expr><name pos:line="79" pos:column="44">i</name></expr></argument>, <argument><expr><call><name pos:line="79" pos:column="47">ProcessValue</name><argument_list pos:line="79" pos:column="59">(<argument><expr><name><name pos:line="79" pos:column="60">list</name><index pos:line="79" pos:column="64">[<expr><name pos:line="79" pos:column="65">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></for>

                            <expr_stmt><expr><name pos:line="82" pos:column="29">data</name> <op:operator pos:line="82" pos:column="34">=</op:operator> <name pos:line="82" pos:column="36">result</name></expr>;</expr_stmt> 
                        }</block></then></if>
                    }</block></else></if>
                }</block></then></if>
            }</block></then></if>

            <return pos:line="88" pos:column="13">return <expr><name pos:line="88" pos:column="20">data</name></expr>;</return>
        }</block></function> 
    }</block></class>
}</block></namespace></unit>
