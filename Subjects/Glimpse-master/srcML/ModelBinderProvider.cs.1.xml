<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Mvc\AlternateType\ModelBinderProvider.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">System</name><op:operator pos:line="1" pos:column="13">.</op:operator><name pos:line="1" pos:column="14">Collections</name><op:operator pos:line="1" pos:column="25">.</op:operator><name pos:line="1" pos:column="26">Generic</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Web</name><op:operator pos:line="2" pos:column="17">.</op:operator><name pos:line="2" pos:column="18">Mvc</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Glimpse</name><op:operator pos:line="3" pos:column="14">.</op:operator><name pos:line="3" pos:column="15">Core</name><op:operator pos:line="3" pos:column="19">.</op:operator><name pos:line="3" pos:column="20">Extensibility</name></name>;</using>

<namespace pos:line="5" pos:column="1">namespace <name><name pos:line="5" pos:column="11">Glimpse</name><op:operator pos:line="5" pos:column="18">.</op:operator><name pos:line="5" pos:column="19">Mvc</name><op:operator pos:line="5" pos:column="22">.</op:operator><name pos:line="5" pos:column="23">AlternateType</name></name>
<block pos:line="6" pos:column="1">{
    <class><specifier pos:line="7" pos:column="5">public</specifier> class <name pos:line="7" pos:column="18">ModelBinderProvider</name> <super pos:line="7" pos:column="38">: <name><name pos:line="7" pos:column="40">AlternateType</name><argument_list pos:line="7" pos:column="53">&lt;<argument><name pos:line="7" pos:column="54">IModelBinderProvider</name></argument>&gt;</argument_list></name></super>
    <block pos:line="8" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="9" pos:column="9">private</specifier> <name><name pos:line="9" pos:column="17">IEnumerable</name><argument_list pos:line="9" pos:column="28">&lt;<argument><name pos:line="9" pos:column="29">IAlternateMethod</name></argument>&gt;</argument_list></name></type> <name pos:line="9" pos:column="47">allMethods</name></decl>;</decl_stmt>

        <constructor><specifier pos:line="11" pos:column="9">public</specifier> <name pos:line="11" pos:column="16">ModelBinderProvider</name><parameter_list pos:line="11" pos:column="35">(<param><decl><type><name pos:line="11" pos:column="36">IProxyFactory</name></type> <name pos:line="11" pos:column="50">proxyFactory</name></decl></param>)</parameter_list> <member_list pos:line="11" pos:column="64">: <call><name pos:line="11" pos:column="66">base</name><argument_list pos:line="11" pos:column="70">(<argument><expr><name pos:line="11" pos:column="71">proxyFactory</name></expr></argument>)</argument_list></call>
        </member_list><block pos:line="12" pos:column="9">{
        }</block></constructor>

        <decl_stmt><decl><type><specifier pos:line="15" pos:column="9">public</specifier> <specifier pos:line="15" pos:column="16">override</specifier> <name><name pos:line="15" pos:column="25">IEnumerable</name><argument_list pos:line="15" pos:column="36">&lt;<argument><name pos:line="15" pos:column="37">IAlternateMethod</name></argument>&gt;</argument_list></name></type> <name pos:line="15" pos:column="55">AllMethods</name>
        <block pos:line="16" pos:column="9">{
            <function><name pos:line="17" pos:column="13">get</name>
            <block pos:line="18" pos:column="13">{
                <return pos:line="19" pos:column="17">return <expr><name pos:line="19" pos:column="24">allMethods</name> <op:operator pos:line="19" pos:column="35">??</op:operator> <op:operator pos:line="19" pos:column="38">(</op:operator><name pos:line="19" pos:column="39">allMethods</name> <op:operator pos:line="19" pos:column="50">=</op:operator> <op:operator pos:line="19" pos:column="52">new</op:operator> <name><name pos:line="19" pos:column="56">List</name><argument_list pos:line="19" pos:column="60">&lt;<argument><name pos:line="19" pos:column="61">IAlternateMethod</name></argument>&gt;</argument_list></name>
                    <block pos:line="20" pos:column="21">{
                        <expr><op:operator pos:line="21" pos:column="25">new</op:operator> <call><name pos:line="21" pos:column="29">GetBinder</name><argument_list pos:line="21" pos:column="38">(<argument><expr><op:operator pos:line="21" pos:column="39">new</op:operator> <call><name pos:line="21" pos:column="43">ModelBinder</name><argument_list pos:line="21" pos:column="54">(<argument><expr><name pos:line="21" pos:column="55">ProxyFactory</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>
                    }</block>)</expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <class><specifier pos:line="26" pos:column="9">public</specifier> class <name pos:line="26" pos:column="22">GetBinder</name> <super pos:line="26" pos:column="32">: <name pos:line="26" pos:column="34">AlternateMethod</name></super>
        <block pos:line="27" pos:column="9">{
            <constructor><specifier pos:line="28" pos:column="13">public</specifier> <name pos:line="28" pos:column="20">GetBinder</name><parameter_list pos:line="28" pos:column="29">(<param><decl><type><name><name pos:line="28" pos:column="30">AlternateType</name><argument_list pos:line="28" pos:column="43">&lt;<argument><name pos:line="28" pos:column="44">IModelBinder</name></argument>&gt;</argument_list></name></type> <name pos:line="28" pos:column="58">alternateModelBinder</name></decl></param>)</parameter_list> <member_list pos:line="28" pos:column="80">: <call><name pos:line="28" pos:column="82">base</name><argument_list pos:line="28" pos:column="86">(<argument><expr><call><name pos:line="28" pos:column="87">typeof</name><argument_list pos:line="28" pos:column="93">(<argument><expr><name pos:line="28" pos:column="94">IModelBinderProvider</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="28" pos:column="117">"GetBinder"</lit:literal></expr></argument>)</argument_list></call>
            </member_list><block pos:line="29" pos:column="13">{
                <expr_stmt><expr><name pos:line="30" pos:column="17">AlternateModelBinder</name> <op:operator pos:line="30" pos:column="38">=</op:operator> <name pos:line="30" pos:column="40">alternateModelBinder</name></expr>;</expr_stmt>
            }</block></constructor>

            <decl_stmt><decl><type><specifier pos:line="33" pos:column="13">public</specifier> <name><name pos:line="33" pos:column="20">AlternateType</name><argument_list pos:line="33" pos:column="33">&lt;<argument><name pos:line="33" pos:column="34">IModelBinder</name></argument>&gt;</argument_list></name></type> <name pos:line="33" pos:column="48">AlternateModelBinder</name> <block pos:line="33" pos:column="69">{ <function_decl><name pos:line="33" pos:column="71">get</name>;</function_decl> <function_decl><name pos:line="33" pos:column="76">set</name>;</function_decl> }</block></decl></decl_stmt>

            <function><type><specifier pos:line="35" pos:column="13">public</specifier> <specifier pos:line="35" pos:column="20">override</specifier> <name pos:line="35" pos:column="29">void</name></type> <name pos:line="35" pos:column="34">PostImplementation</name><parameter_list pos:line="35" pos:column="52">(<param><decl><type><name pos:line="35" pos:column="53">IAlternateMethodContext</name></type> <name pos:line="35" pos:column="77">context</name></decl></param>, <param><decl><type><name pos:line="35" pos:column="86">TimerResult</name></type> <name pos:line="35" pos:column="98">timerResult</name></decl></param>)</parameter_list>
            <block pos:line="36" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="37" pos:column="17">IModelBinder</name></type> <name pos:line="37" pos:column="30">newModelBinder</name></decl>;</decl_stmt>
                <if pos:line="38" pos:column="17">if <condition pos:line="38" pos:column="20">(<expr><call><name><name pos:line="38" pos:column="21">AlternateModelBinder</name><op:operator pos:line="38" pos:column="41">.</op:operator><name pos:line="38" pos:column="42">TryCreate</name></name><argument_list pos:line="38" pos:column="51">(<argument><expr><name><name pos:line="38" pos:column="52">context</name><op:operator pos:line="38" pos:column="59">.</op:operator><name pos:line="38" pos:column="60">ReturnValue</name></name> <op:operator pos:line="38" pos:column="72">as</op:operator> <name pos:line="38" pos:column="75">IModelBinder</name></expr></argument>, <argument><expr pos:line="38" pos:column="89">out <name pos:line="38" pos:column="93">newModelBinder</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="38" pos:column="109">
                <block pos:line="39" pos:column="17">{
                    <expr_stmt><expr><name><name pos:line="40" pos:column="21">context</name><op:operator pos:line="40" pos:column="28">.</op:operator><name pos:line="40" pos:column="29">ReturnValue</name></name> <op:operator pos:line="40" pos:column="41">=</op:operator> <name pos:line="40" pos:column="43">newModelBinder</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></function>
        }</block></class>
    }</block></class>
}</block></namespace></unit>
