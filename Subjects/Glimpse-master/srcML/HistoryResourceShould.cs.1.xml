<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Core\Resource\HistoryResourceShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Core</name><op:operator pos:line="4" pos:column="19">.</op:operator><name pos:line="4" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Glimpse</name><op:operator pos:line="5" pos:column="14">.</op:operator><name pos:line="5" pos:column="15">Core</name><op:operator pos:line="5" pos:column="19">.</op:operator><name pos:line="5" pos:column="20">Framework</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Glimpse</name><op:operator pos:line="6" pos:column="14">.</op:operator><name pos:line="6" pos:column="15">Core</name><op:operator pos:line="6" pos:column="19">.</op:operator><name pos:line="6" pos:column="20">Resource</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Glimpse</name><op:operator pos:line="7" pos:column="14">.</op:operator><name pos:line="7" pos:column="15">Core</name><op:operator pos:line="7" pos:column="19">.</op:operator><name pos:line="7" pos:column="20">ResourceResult</name></name>;</using>
<using pos:line="8" pos:column="1">using <name pos:line="8" pos:column="7">Moq</name>;</using>
<using pos:line="9" pos:column="1">using <name pos:line="9" pos:column="7">Xunit</name>;</using>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">Xunit</name><op:operator pos:line="10" pos:column="12">.</op:operator><name pos:line="10" pos:column="13">Extensions</name></name>;</using>

<namespace pos:line="12" pos:column="1">namespace <name><name pos:line="12" pos:column="11">Glimpse</name><op:operator pos:line="12" pos:column="18">.</op:operator><name pos:line="12" pos:column="19">Test</name><op:operator pos:line="12" pos:column="23">.</op:operator><name pos:line="12" pos:column="24">Core</name><op:operator pos:line="12" pos:column="28">.</op:operator><name pos:line="12" pos:column="29">Resource</name></name>
<block pos:line="13" pos:column="1">{
    <class><specifier pos:line="14" pos:column="5">public</specifier> class <name pos:line="14" pos:column="18">HistoryResourceShould</name>
    <block pos:line="15" pos:column="5">{
        <function><type><attribute pos:line="16" pos:column="9">[<expr><name pos:line="16" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="17" pos:column="9">public</specifier> <name pos:line="17" pos:column="16">void</name></type> <name pos:line="17" pos:column="21">ContainATopParameter</name><parameter_list pos:line="17" pos:column="41">()</parameter_list>
        <block pos:line="18" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="19" pos:column="13">var</name></type> <name pos:line="19" pos:column="17">resource</name> <init pos:line="19" pos:column="26">= <expr><op:operator pos:line="19" pos:column="28">new</op:operator> <call><name pos:line="19" pos:column="32">HistoryResource</name><argument_list pos:line="19" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="21" pos:column="13">Assert</name><op:operator pos:line="21" pos:column="19">.</op:operator><name pos:line="21" pos:column="20">Equal</name></name><argument_list pos:line="21" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="21" pos:column="26">"top"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="21" pos:column="33">resource</name><op:operator pos:line="21" pos:column="41">.</op:operator><name pos:line="21" pos:column="42">Parameters</name><op:operator pos:line="21" pos:column="52">.</op:operator><name pos:line="21" pos:column="53">First</name></name><argument_list pos:line="21" pos:column="58">()</argument_list></call><op:operator pos:line="21" pos:column="60">.</op:operator><name pos:line="21" pos:column="61">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="24" pos:column="9">[<expr><name pos:line="24" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="25" pos:column="9">public</specifier> <name pos:line="25" pos:column="16">void</name></type> <name pos:line="25" pos:column="21">ShouldHaveProperName</name><parameter_list pos:line="25" pos:column="41">()</parameter_list>
        <block pos:line="26" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="27" pos:column="13">var</name></type> <name pos:line="27" pos:column="17">resource</name> <init pos:line="27" pos:column="26">= <expr><op:operator pos:line="27" pos:column="28">new</op:operator> <call><name pos:line="27" pos:column="32">HistoryResource</name><argument_list pos:line="27" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="29" pos:column="13">Assert</name><op:operator pos:line="29" pos:column="19">.</op:operator><name pos:line="29" pos:column="20">Equal</name></name><argument_list pos:line="29" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="29" pos:column="26">"glimpse_history"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="45">resource</name><op:operator pos:line="29" pos:column="53">.</op:operator><name pos:line="29" pos:column="54">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="32" pos:column="9">[<expr><name pos:line="32" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="33" pos:column="9">public</specifier> <name pos:line="33" pos:column="16">void</name></type> <name pos:line="33" pos:column="21">ThrowExceptionWithNullContext</name><parameter_list pos:line="33" pos:column="50">()</parameter_list>
        <block pos:line="34" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="35" pos:column="13">var</name></type> <name pos:line="35" pos:column="17">resource</name> <init pos:line="35" pos:column="26">= <expr><op:operator pos:line="35" pos:column="28">new</op:operator> <call><name pos:line="35" pos:column="32">HistoryResource</name><argument_list pos:line="35" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="37" pos:column="13">Assert</name><op:operator pos:line="37" pos:column="19">.</op:operator><name><name pos:line="37" pos:column="20">Throws</name><argument_list pos:line="37" pos:column="26">&lt;<argument><name pos:line="37" pos:column="27">ArgumentNullException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="37" pos:column="49">(<argument><expr><lambda><parameter_list pos:line="37" pos:column="50">()</parameter_list><op:operator pos:line="37" pos:column="52">=&gt;</op:operator><call><name><name pos:line="37" pos:column="54">resource</name><op:operator pos:line="37" pos:column="62">.</op:operator><name pos:line="37" pos:column="63">Execute</name></name><argument_list pos:line="37" pos:column="70">(<argument><expr><name pos:line="37" pos:column="71">null</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="40" pos:column="9">[<expr><name pos:line="40" pos:column="10">Theory</name></expr>]</attribute>
        <attribute pos:line="41" pos:column="9">[<expr><call><name pos:line="41" pos:column="10">InlineData</name><argument_list pos:line="41" pos:column="20">(<argument><expr><lit:literal type="string" pos:line="41" pos:column="21">"top"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="41" pos:column="28">"non-integer"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="41" pos:column="43">false</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="41" pos:column="50">50</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <attribute pos:line="42" pos:column="9">[<expr><call><name pos:line="42" pos:column="10">InlineData</name><argument_list pos:line="42" pos:column="20">(<argument><expr><lit:literal type="string" pos:line="42" pos:column="21">"top"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="42" pos:column="28">"10"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="42" pos:column="34">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="42" pos:column="40">10</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <attribute pos:line="43" pos:column="9">[<expr><call><name pos:line="43" pos:column="10">InlineData</name><argument_list pos:line="43" pos:column="20">(<argument><expr><lit:literal type="string" pos:line="43" pos:column="21">"wrong-key"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="43" pos:column="34">"non-integer"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="43" pos:column="49">false</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="43" pos:column="56">50</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <attribute pos:line="44" pos:column="9">[<expr><call><name pos:line="44" pos:column="10">InlineData</name><argument_list pos:line="44" pos:column="20">(<argument><expr><lit:literal type="string" pos:line="44" pos:column="21">"wrong-key"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="44" pos:column="34">"10"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="44" pos:column="40">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="44" pos:column="46">50</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="45" pos:column="9">public</specifier> <name pos:line="45" pos:column="16">void</name></type> <name pos:line="45" pos:column="21">AcquireTopParameter</name><parameter_list pos:line="45" pos:column="40">(<param><decl><type><name pos:line="45" pos:column="41">string</name></type> <name pos:line="45" pos:column="48">parameterName</name></decl></param>, <param><decl><type><name pos:line="45" pos:column="63">string</name></type> <name pos:line="45" pos:column="70">parameterValue</name></decl></param>, <param><decl><type><name pos:line="45" pos:column="86">bool</name></type> <name pos:line="45" pos:column="91">parameterValueIsInt</name></decl></param>, <param><decl><type><name pos:line="45" pos:column="112">int</name></type> <name pos:line="45" pos:column="116">expectedResult</name></decl></param>)</parameter_list>
        <block pos:line="46" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="47" pos:column="13">var</name></type> <name pos:line="47" pos:column="17">resource</name> <init pos:line="47" pos:column="26">= <expr><op:operator pos:line="47" pos:column="28">new</op:operator> <call><name pos:line="47" pos:column="32">HistoryResource</name><argument_list pos:line="47" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="49" pos:column="13">var</name></type> <name pos:line="49" pos:column="17">storeMock</name> <init pos:line="49" pos:column="27">= <expr><op:operator pos:line="49" pos:column="29">new</op:operator> <call><name><name pos:line="49" pos:column="33">Mock</name><argument_list pos:line="49" pos:column="37">&lt;<argument><name pos:line="49" pos:column="38">IReadOnlyPersistenceStore</name></argument>&gt;</argument_list></name><argument_list pos:line="49" pos:column="64">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="50" pos:column="13">var</name></type> <name pos:line="50" pos:column="17">contextMock</name> <init pos:line="50" pos:column="29">= <expr><op:operator pos:line="50" pos:column="31">new</op:operator> <call><name><name pos:line="50" pos:column="35">Mock</name><argument_list pos:line="50" pos:column="39">&lt;<argument><name pos:line="50" pos:column="40">IResourceContext</name></argument>&gt;</argument_list></name><argument_list pos:line="50" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="51" pos:column="13">string</name></type> <name pos:line="51" pos:column="20">output</name> <init pos:line="51" pos:column="27">= <expr><name pos:line="51" pos:column="29">parameterValue</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="52" pos:column="13">contextMock</name><op:operator pos:line="52" pos:column="24">.</op:operator><name pos:line="52" pos:column="25">Setup</name></name><argument_list pos:line="52" pos:column="30">(<argument><expr><lambda><name pos:line="52" pos:column="31">c</name> <op:operator pos:line="52" pos:column="33">=&gt;</op:operator> <call><name><name pos:line="52" pos:column="36">c</name><op:operator pos:line="52" pos:column="37">.</op:operator><name pos:line="52" pos:column="38">Parameters</name><op:operator pos:line="52" pos:column="48">.</op:operator><name pos:line="52" pos:column="49">TryGetValue</name></name><argument_list pos:line="52" pos:column="60">(<argument><expr><name pos:line="52" pos:column="61">parameterName</name></expr></argument>, <argument><expr pos:line="52" pos:column="76">out <name pos:line="52" pos:column="80">output</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="52" pos:column="88">.</op:operator><call><name pos:line="52" pos:column="89">Returns</name><argument_list pos:line="52" pos:column="96">(<argument><expr><name pos:line="52" pos:column="97">parameterValueIsInt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="53" pos:column="13">contextMock</name><op:operator pos:line="53" pos:column="24">.</op:operator><name pos:line="53" pos:column="25">Setup</name></name><argument_list pos:line="53" pos:column="30">(<argument><expr><lambda><name pos:line="53" pos:column="31">c</name> <op:operator pos:line="53" pos:column="33">=&gt;</op:operator> <name><name pos:line="53" pos:column="36">c</name><op:operator pos:line="53" pos:column="37">.</op:operator><name pos:line="53" pos:column="38">PersistenceStore</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="53" pos:column="55">.</op:operator><call><name pos:line="53" pos:column="56">Returns</name><argument_list pos:line="53" pos:column="63">(<argument><expr><name><name pos:line="53" pos:column="64">storeMock</name><op:operator pos:line="53" pos:column="73">.</op:operator><name pos:line="53" pos:column="74">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="55" pos:column="13">resource</name><op:operator pos:line="55" pos:column="21">.</op:operator><name pos:line="55" pos:column="22">Execute</name></name><argument_list pos:line="55" pos:column="29">(<argument><expr><name><name pos:line="55" pos:column="30">contextMock</name><op:operator pos:line="55" pos:column="41">.</op:operator><name pos:line="55" pos:column="42">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="57" pos:column="13">storeMock</name><op:operator pos:line="57" pos:column="22">.</op:operator><name pos:line="57" pos:column="23">Verify</name></name><argument_list pos:line="57" pos:column="29">(<argument><expr><lambda><name pos:line="57" pos:column="30">s</name><op:operator pos:line="57" pos:column="31">=&gt;</op:operator><call><name><name pos:line="57" pos:column="33">s</name><op:operator pos:line="57" pos:column="34">.</op:operator><name pos:line="57" pos:column="35">GetTop</name></name><argument_list pos:line="57" pos:column="41">(<argument><expr><name pos:line="57" pos:column="42">expectedResult</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="60" pos:column="9">[<expr><name pos:line="60" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="61" pos:column="9">public</specifier> <name pos:line="61" pos:column="16">void</name></type> <name pos:line="61" pos:column="21">Return404StatusCodeWithoutData</name><parameter_list pos:line="61" pos:column="51">()</parameter_list>
        <block pos:line="62" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="63" pos:column="13">var</name></type> <name pos:line="63" pos:column="17">resource</name> <init pos:line="63" pos:column="26">= <expr><op:operator pos:line="63" pos:column="28">new</op:operator> <call><name pos:line="63" pos:column="32">HistoryResource</name><argument_list pos:line="63" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="65" pos:column="13">var</name></type> <name pos:line="65" pos:column="17">storeMock</name> <init pos:line="65" pos:column="27">= <expr><op:operator pos:line="65" pos:column="29">new</op:operator> <call><name><name pos:line="65" pos:column="33">Mock</name><argument_list pos:line="65" pos:column="37">&lt;<argument><name pos:line="65" pos:column="38">IReadOnlyPersistenceStore</name></argument>&gt;</argument_list></name><argument_list pos:line="65" pos:column="64">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="66" pos:column="13">storeMock</name><op:operator pos:line="66" pos:column="22">.</op:operator><name pos:line="66" pos:column="23">Setup</name></name><argument_list pos:line="66" pos:column="28">(<argument><expr><lambda><name pos:line="66" pos:column="29">s</name> <op:operator pos:line="66" pos:column="31">=&gt;</op:operator> <call><name><name pos:line="66" pos:column="34">s</name><op:operator pos:line="66" pos:column="35">.</op:operator><name pos:line="66" pos:column="36">GetTop</name></name><argument_list pos:line="66" pos:column="42">(<argument><expr><call><name><name pos:line="66" pos:column="43">It</name><op:operator pos:line="66" pos:column="45">.</op:operator><name><name pos:line="66" pos:column="46">IsAny</name><argument_list pos:line="66" pos:column="51">&lt;<argument><name pos:line="66" pos:column="52">int</name></argument>&gt;</argument_list></name></name><argument_list pos:line="66" pos:column="56">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="66" pos:column="60">.</op:operator><call><name><name pos:line="66" pos:column="61">Returns</name><argument_list pos:line="66" pos:column="68">&lt;<argument><name><name pos:line="66" pos:column="69">IEnumerable</name><argument_list pos:line="66" pos:column="80">&lt;<argument><name pos:line="66" pos:column="81">GlimpseRequest</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list pos:line="66" pos:column="97">(<argument><expr><name pos:line="66" pos:column="98">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="67" pos:column="13">var</name></type> <name pos:line="67" pos:column="17">contextMock</name> <init pos:line="67" pos:column="29">= <expr><op:operator pos:line="67" pos:column="31">new</op:operator> <call><name><name pos:line="67" pos:column="35">Mock</name><argument_list pos:line="67" pos:column="39">&lt;<argument><name pos:line="67" pos:column="40">IResourceContext</name></argument>&gt;</argument_list></name><argument_list pos:line="67" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="68" pos:column="13">string</name></type> <name pos:line="68" pos:column="20">output</name> <init pos:line="68" pos:column="27">= <expr><lit:literal type="string" pos:line="68" pos:column="29">"25"</lit:literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="69" pos:column="13">contextMock</name><op:operator pos:line="69" pos:column="24">.</op:operator><name pos:line="69" pos:column="25">Setup</name></name><argument_list pos:line="69" pos:column="30">(<argument><expr><lambda><name pos:line="69" pos:column="31">c</name> <op:operator pos:line="69" pos:column="33">=&gt;</op:operator> <call><name><name pos:line="69" pos:column="36">c</name><op:operator pos:line="69" pos:column="37">.</op:operator><name pos:line="69" pos:column="38">Parameters</name><op:operator pos:line="69" pos:column="48">.</op:operator><name pos:line="69" pos:column="49">TryGetValue</name></name><argument_list pos:line="69" pos:column="60">(<argument><expr><lit:literal type="string" pos:line="69" pos:column="61">"top"</lit:literal></expr></argument>, <argument><expr pos:line="69" pos:column="68">out <name pos:line="69" pos:column="72">output</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="69" pos:column="80">.</op:operator><call><name pos:line="69" pos:column="81">Returns</name><argument_list pos:line="69" pos:column="88">(<argument><expr><lit:literal type="boolean" pos:line="69" pos:column="89">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="70" pos:column="13">contextMock</name><op:operator pos:line="70" pos:column="24">.</op:operator><name pos:line="70" pos:column="25">Setup</name></name><argument_list pos:line="70" pos:column="30">(<argument><expr><lambda><name pos:line="70" pos:column="31">c</name> <op:operator pos:line="70" pos:column="33">=&gt;</op:operator> <name><name pos:line="70" pos:column="36">c</name><op:operator pos:line="70" pos:column="37">.</op:operator><name pos:line="70" pos:column="38">PersistenceStore</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="70" pos:column="55">.</op:operator><call><name pos:line="70" pos:column="56">Returns</name><argument_list pos:line="70" pos:column="63">(<argument><expr><name><name pos:line="70" pos:column="64">storeMock</name><op:operator pos:line="70" pos:column="73">.</op:operator><name pos:line="70" pos:column="74">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="72" pos:column="13">var</name></type> <name pos:line="72" pos:column="17">result</name> <init pos:line="72" pos:column="24">= <expr><call><name><name pos:line="72" pos:column="26">resource</name><op:operator pos:line="72" pos:column="34">.</op:operator><name pos:line="72" pos:column="35">Execute</name></name><argument_list pos:line="72" pos:column="42">(<argument><expr><name><name pos:line="72" pos:column="43">contextMock</name><op:operator pos:line="72" pos:column="54">.</op:operator><name pos:line="72" pos:column="55">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="74" pos:column="13">var</name></type> <name pos:line="74" pos:column="17">statusCodeResult</name> <init pos:line="74" pos:column="34">= <expr><name pos:line="74" pos:column="36">result</name> <op:operator pos:line="74" pos:column="43">as</op:operator> <name pos:line="74" pos:column="46">StatusCodeResourceResult</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="76" pos:column="13">Assert</name><op:operator pos:line="76" pos:column="19">.</op:operator><name pos:line="76" pos:column="20">NotNull</name></name><argument_list pos:line="76" pos:column="27">(<argument><expr><name pos:line="76" pos:column="28">statusCodeResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="77" pos:column="13">Assert</name><op:operator pos:line="77" pos:column="19">.</op:operator><name pos:line="77" pos:column="20">Equal</name></name><argument_list pos:line="77" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="77" pos:column="26">404</lit:literal></expr></argument>, <argument><expr><name><name pos:line="77" pos:column="31">statusCodeResult</name><op:operator pos:line="77" pos:column="47">.</op:operator><name pos:line="77" pos:column="48">StatusCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="80" pos:column="9">[<expr><name pos:line="80" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="81" pos:column="9">public</specifier> <name pos:line="81" pos:column="16">void</name></type> <name pos:line="81" pos:column="21">ReturnCacheResourceResultWithData</name><parameter_list pos:line="81" pos:column="54">()</parameter_list>
        <block pos:line="82" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="83" pos:column="13">var</name></type> <name pos:line="83" pos:column="17">resource</name> <init pos:line="83" pos:column="26">= <expr><op:operator pos:line="83" pos:column="28">new</op:operator> <call><name pos:line="83" pos:column="32">HistoryResource</name><argument_list pos:line="83" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="85" pos:column="13">var</name></type> <name pos:line="85" pos:column="17">storeMock</name> <init pos:line="85" pos:column="27">= <expr><op:operator pos:line="85" pos:column="29">new</op:operator> <call><name><name pos:line="85" pos:column="33">Mock</name><argument_list pos:line="85" pos:column="37">&lt;<argument><name pos:line="85" pos:column="38">IReadOnlyPersistenceStore</name></argument>&gt;</argument_list></name><argument_list pos:line="85" pos:column="64">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="86" pos:column="13">storeMock</name><op:operator pos:line="86" pos:column="22">.</op:operator><name pos:line="86" pos:column="23">Setup</name></name><argument_list pos:line="86" pos:column="28">(<argument><expr><lambda><name pos:line="86" pos:column="29">s</name> <op:operator pos:line="86" pos:column="31">=&gt;</op:operator> <call><name><name pos:line="86" pos:column="34">s</name><op:operator pos:line="86" pos:column="35">.</op:operator><name pos:line="86" pos:column="36">GetTop</name></name><argument_list pos:line="86" pos:column="42">(<argument><expr><call><name><name pos:line="86" pos:column="43">It</name><op:operator pos:line="86" pos:column="45">.</op:operator><name><name pos:line="86" pos:column="46">IsAny</name><argument_list pos:line="86" pos:column="51">&lt;<argument><name pos:line="86" pos:column="52">int</name></argument>&gt;</argument_list></name></name><argument_list pos:line="86" pos:column="56">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="86" pos:column="60">.</op:operator><call><name pos:line="86" pos:column="61">Returns</name><argument_list pos:line="86" pos:column="68">(<argument><expr><call><name><name pos:line="86" pos:column="69">Enumerable</name><op:operator pos:line="86" pos:column="79">.</op:operator><name><name pos:line="86" pos:column="80">Empty</name><argument_list pos:line="86" pos:column="85">&lt;<argument><name pos:line="86" pos:column="86">GlimpseRequest</name></argument>&gt;</argument_list></name></name><argument_list pos:line="86" pos:column="101">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="87" pos:column="13">var</name></type> <name pos:line="87" pos:column="17">contextMock</name> <init pos:line="87" pos:column="29">= <expr><op:operator pos:line="87" pos:column="31">new</op:operator> <call><name><name pos:line="87" pos:column="35">Mock</name><argument_list pos:line="87" pos:column="39">&lt;<argument><name pos:line="87" pos:column="40">IResourceContext</name></argument>&gt;</argument_list></name><argument_list pos:line="87" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="88" pos:column="13">string</name></type> <name pos:line="88" pos:column="20">output</name> <init pos:line="88" pos:column="27">= <expr><lit:literal type="string" pos:line="88" pos:column="29">"25"</lit:literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="89" pos:column="13">contextMock</name><op:operator pos:line="89" pos:column="24">.</op:operator><name pos:line="89" pos:column="25">Setup</name></name><argument_list pos:line="89" pos:column="30">(<argument><expr><lambda><name pos:line="89" pos:column="31">c</name> <op:operator pos:line="89" pos:column="33">=&gt;</op:operator> <call><name><name pos:line="89" pos:column="36">c</name><op:operator pos:line="89" pos:column="37">.</op:operator><name pos:line="89" pos:column="38">Parameters</name><op:operator pos:line="89" pos:column="48">.</op:operator><name pos:line="89" pos:column="49">TryGetValue</name></name><argument_list pos:line="89" pos:column="60">(<argument><expr><lit:literal type="string" pos:line="89" pos:column="61">"top"</lit:literal></expr></argument>, <argument><expr pos:line="89" pos:column="68">out <name pos:line="89" pos:column="72">output</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="89" pos:column="80">.</op:operator><call><name pos:line="89" pos:column="81">Returns</name><argument_list pos:line="89" pos:column="88">(<argument><expr><lit:literal type="boolean" pos:line="89" pos:column="89">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="90" pos:column="13">contextMock</name><op:operator pos:line="90" pos:column="24">.</op:operator><name pos:line="90" pos:column="25">Setup</name></name><argument_list pos:line="90" pos:column="30">(<argument><expr><lambda><name pos:line="90" pos:column="31">c</name> <op:operator pos:line="90" pos:column="33">=&gt;</op:operator> <name><name pos:line="90" pos:column="36">c</name><op:operator pos:line="90" pos:column="37">.</op:operator><name pos:line="90" pos:column="38">PersistenceStore</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="90" pos:column="55">.</op:operator><call><name pos:line="90" pos:column="56">Returns</name><argument_list pos:line="90" pos:column="63">(<argument><expr><name><name pos:line="90" pos:column="64">storeMock</name><op:operator pos:line="90" pos:column="73">.</op:operator><name pos:line="90" pos:column="74">Object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="92" pos:column="13">var</name></type> <name pos:line="92" pos:column="17">result</name> <init pos:line="92" pos:column="24">= <expr><call><name><name pos:line="92" pos:column="26">resource</name><op:operator pos:line="92" pos:column="34">.</op:operator><name pos:line="92" pos:column="35">Execute</name></name><argument_list pos:line="92" pos:column="42">(<argument><expr><name><name pos:line="92" pos:column="43">contextMock</name><op:operator pos:line="92" pos:column="54">.</op:operator><name pos:line="92" pos:column="55">Object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
             
            <expr_stmt><expr><call><name><name pos:line="94" pos:column="13">Assert</name><op:operator pos:line="94" pos:column="19">.</op:operator><name pos:line="94" pos:column="20">NotNull</name></name><argument_list pos:line="94" pos:column="27">(<argument><expr><name pos:line="94" pos:column="28">result</name> <op:operator pos:line="94" pos:column="35">as</op:operator> <name pos:line="94" pos:column="38">CacheControlDecorator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
