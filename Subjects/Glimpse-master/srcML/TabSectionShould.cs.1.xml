<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Core\Plugin\Assist\TabSectionShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">System</name><op:operator pos:line="1" pos:column="13">.</op:operator><name pos:line="1" pos:column="14">Collections</name><op:operator pos:line="1" pos:column="25">.</op:operator><name pos:line="1" pos:column="26">Generic</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Linq</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Glimpse</name><op:operator pos:line="3" pos:column="14">.</op:operator><name pos:line="3" pos:column="15">Core</name><op:operator pos:line="3" pos:column="19">.</op:operator><name pos:line="3" pos:column="20">Tab</name><op:operator pos:line="3" pos:column="23">.</op:operator><name pos:line="3" pos:column="24">Assist</name></name>;</using>
<using pos:line="4" pos:column="1">using <name pos:line="4" pos:column="7">Xunit</name>;</using>

<namespace pos:line="6" pos:column="1">namespace <name><name pos:line="6" pos:column="11">Glimpse</name><op:operator pos:line="6" pos:column="18">.</op:operator><name pos:line="6" pos:column="19">Test</name><op:operator pos:line="6" pos:column="23">.</op:operator><name pos:line="6" pos:column="24">Core</name><op:operator pos:line="6" pos:column="28">.</op:operator><name pos:line="6" pos:column="29">Plugin</name><op:operator pos:line="6" pos:column="35">.</op:operator><name pos:line="6" pos:column="36">Assist</name></name>
<block pos:line="7" pos:column="1">{
	<class><specifier pos:line="8" pos:column="9">public</specifier> class <name pos:line="8" pos:column="22">TabSectionShould</name>
	<block pos:line="9" pos:column="9">{
		<function><type><attribute pos:line="10" pos:column="17">[<expr><name pos:line="10" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="11" pos:column="17">public</specifier> <name pos:line="11" pos:column="24">void</name></type> <name pos:line="11" pos:column="29">HaveNoRows</name><parameter_list pos:line="11" pos:column="39">()</parameter_list>
		<block pos:line="12" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="13" pos:column="25">var</name></type> <name pos:line="13" pos:column="29">rows</name> <init pos:line="13" pos:column="34">= <expr><call><name><name pos:line="13" pos:column="36">Section</name><op:operator pos:line="13" pos:column="43">.</op:operator><name pos:line="13" pos:column="44">Rows</name><op:operator pos:line="13" pos:column="48">.</op:operator><name pos:line="13" pos:column="49">Count</name></name><argument_list pos:line="13" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name><name pos:line="15" pos:column="25">Assert</name><op:operator pos:line="15" pos:column="31">.</op:operator><name pos:line="15" pos:column="32">Equal</name></name><argument_list pos:line="15" pos:column="37">(<argument><expr><lit:literal type="number" pos:line="15" pos:column="38">0</lit:literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="41">rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="18" pos:column="17">[<expr><name pos:line="18" pos:column="18">Fact</name></expr>]</attribute>
		<specifier pos:line="19" pos:column="17">public</specifier> <name pos:line="19" pos:column="24">void</name></type> <name pos:line="19" pos:column="29">AddAndReturnsRow</name><parameter_list pos:line="19" pos:column="45">()</parameter_list>
		<block pos:line="20" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="21" pos:column="25">var</name></type> <name pos:line="21" pos:column="29">row</name> <init pos:line="21" pos:column="33">= <expr><call><name><name pos:line="21" pos:column="35">Section</name><op:operator pos:line="21" pos:column="42">.</op:operator><name pos:line="21" pos:column="43">AddRow</name></name><argument_list pos:line="21" pos:column="49">()</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name pos:line="23" pos:column="25">var</name></type> <name pos:line="23" pos:column="29">rows</name> <init pos:line="23" pos:column="34">= <expr><name><name pos:line="23" pos:column="36">Section</name><op:operator pos:line="23" pos:column="43">.</op:operator><name pos:line="23" pos:column="44">Rows</name></name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name><name pos:line="25" pos:column="25">Assert</name><op:operator pos:line="25" pos:column="31">.</op:operator><name pos:line="25" pos:column="32">Equal</name></name><argument_list pos:line="25" pos:column="37">(<argument><expr><lit:literal type="number" pos:line="25" pos:column="38">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="25" pos:column="41">rows</name><op:operator pos:line="25" pos:column="45">.</op:operator><name pos:line="25" pos:column="46">Count</name></name><argument_list pos:line="25" pos:column="51">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="26" pos:column="25">Assert</name><op:operator pos:line="26" pos:column="31">.</op:operator><name pos:line="26" pos:column="32">Equal</name></name><argument_list pos:line="26" pos:column="37">(<argument><expr><name pos:line="26" pos:column="38">row</name></expr></argument>, <argument><expr><call><name><name pos:line="26" pos:column="43">rows</name><op:operator pos:line="26" pos:column="47">.</op:operator><name pos:line="26" pos:column="48">First</name></name><argument_list pos:line="26" pos:column="53">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<decl_stmt><decl><type><specifier pos:line="29" pos:column="17">private</specifier> <name pos:line="29" pos:column="25">TabSection</name></type> <name pos:line="29" pos:column="36">Section</name> <block pos:line="29" pos:column="44">{ <function_decl><name pos:line="29" pos:column="46">get</name>;</function_decl> <function_decl><name pos:line="29" pos:column="51">set</name>;</function_decl> }</block></decl></decl_stmt>

		<constructor><specifier pos:line="31" pos:column="17">public</specifier> <name pos:line="31" pos:column="24">TabSectionShould</name><parameter_list pos:line="31" pos:column="40">()</parameter_list>
		<block pos:line="32" pos:column="17">{
			<expr_stmt><expr><name pos:line="33" pos:column="25">Section</name> <op:operator pos:line="33" pos:column="33">=</op:operator> <op:operator pos:line="33" pos:column="35">new</op:operator> <call><name pos:line="33" pos:column="39">TabSection</name><argument_list pos:line="33" pos:column="49">()</argument_list></call></expr>;</expr_stmt>
		}</block></constructor>
	}</block></class>
}</block></namespace>
</unit>
