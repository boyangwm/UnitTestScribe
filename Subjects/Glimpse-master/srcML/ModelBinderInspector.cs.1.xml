<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Mvc\Inspector\ModelBinderInspector.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">System</name><op:operator pos:line="1" pos:column="13">.</op:operator><name pos:line="1" pos:column="14">Linq</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Web</name><op:operator pos:line="2" pos:column="17">.</op:operator><name pos:line="2" pos:column="18">Mvc</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Glimpse</name><op:operator pos:line="3" pos:column="14">.</op:operator><name pos:line="3" pos:column="15">Core</name><op:operator pos:line="3" pos:column="19">.</op:operator><name pos:line="3" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Mvc</name><op:operator pos:line="4" pos:column="18">.</op:operator><name pos:line="4" pos:column="19">AlternateType</name></name>;</using>
<using pos:line="5" pos:column="1">using <name pos:line="5" pos:column="7">ValueProviderFactory</name> <init pos:line="5" pos:column="28">= <expr><name><name pos:line="5" pos:column="30">Glimpse</name><op:operator pos:line="5" pos:column="37">.</op:operator><name pos:line="5" pos:column="38">Mvc</name><op:operator pos:line="5" pos:column="41">.</op:operator><name pos:line="5" pos:column="42">AlternateType</name><op:operator pos:line="5" pos:column="55">.</op:operator><name pos:line="5" pos:column="56">ValueProviderFactory</name></name></expr></init>;</using>

<namespace pos:line="7" pos:column="1">namespace <name><name pos:line="7" pos:column="11">Glimpse</name><op:operator pos:line="7" pos:column="18">.</op:operator><name pos:line="7" pos:column="19">Mvc</name><op:operator pos:line="7" pos:column="22">.</op:operator><name pos:line="7" pos:column="23">Inspector</name></name>
<block pos:line="8" pos:column="1">{
    <class><specifier pos:line="9" pos:column="5">public</specifier> class <name pos:line="9" pos:column="18">ModelBinderInspector</name> <super pos:line="9" pos:column="39">: <name pos:line="9" pos:column="41">IInspector</name></super>
    <block pos:line="10" pos:column="5">{
        <function><type><specifier pos:line="11" pos:column="9">public</specifier> <name pos:line="11" pos:column="16">void</name></type> <name pos:line="11" pos:column="21">Setup</name><parameter_list pos:line="11" pos:column="26">(<param><decl><type><name pos:line="11" pos:column="27">IInspectorContext</name></type> <name pos:line="11" pos:column="45">context</name></decl></param>)</parameter_list>
        <block pos:line="12" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="13" pos:column="13">SetupModelBinderProviders</name><argument_list pos:line="13" pos:column="38">(<argument><expr><name pos:line="13" pos:column="39">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="14" pos:column="13">SetupValueProviderFactories</name><argument_list pos:line="14" pos:column="40">(<argument><expr><name pos:line="14" pos:column="41">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="15" pos:column="13">SetupModelBinders</name><argument_list pos:line="15" pos:column="30">(<argument><expr><name pos:line="15" pos:column="31">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="18" pos:column="9">private</specifier> <name pos:line="18" pos:column="17">void</name></type> <name pos:line="18" pos:column="22">SetupModelBinderProviders</name><parameter_list pos:line="18" pos:column="47">(<param><decl><type><name pos:line="18" pos:column="48">IInspectorContext</name></type> <name pos:line="18" pos:column="66">context</name></decl></param>)</parameter_list>
        <block pos:line="19" pos:column="9">{
<cpp:if pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">if</cpp:directive> <expr><op:operator pos:line="20" pos:column="5">!</op:operator><name pos:line="20" pos:column="6">MVC2</name></expr></cpp:if>
            <decl_stmt><decl><type><name pos:line="21" pos:column="13">var</name></type> <name pos:line="21" pos:column="17">binderProviders</name> <init pos:line="21" pos:column="33">= <expr><name><name pos:line="21" pos:column="35">ModelBinderProviders</name><op:operator pos:line="21" pos:column="55">.</op:operator><name pos:line="21" pos:column="56">BinderProviders</name></name></expr></init></decl>;</decl_stmt>
            <if pos:line="22" pos:column="13">if <condition pos:line="22" pos:column="16">(<expr><name><name pos:line="22" pos:column="17">binderProviders</name><op:operator pos:line="22" pos:column="32">.</op:operator><name pos:line="22" pos:column="33">Count</name></name> <op:operator pos:line="22" pos:column="39">==</op:operator> <lit:literal type="number" pos:line="22" pos:column="42">0</lit:literal></expr>)</condition><then pos:line="22" pos:column="44">
            <block pos:line="23" pos:column="13">{
                <return pos:line="24" pos:column="17">return;</return>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="27" pos:column="13">var</name></type> <name pos:line="27" pos:column="17">alternateModelBinderProvider</name> <init pos:line="27" pos:column="46">= <expr><op:operator pos:line="27" pos:column="48">new</op:operator> <call><name pos:line="27" pos:column="52">ModelBinderProvider</name><argument_list pos:line="27" pos:column="71">(<argument><expr><name><name pos:line="27" pos:column="72">context</name><op:operator pos:line="27" pos:column="79">.</op:operator><name pos:line="27" pos:column="80">ProxyFactory</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <for pos:line="29" pos:column="13">for (<init><decl><type><name pos:line="29" pos:column="18">int</name></type> <name pos:line="29" pos:column="22">i</name> <init pos:line="29" pos:column="24">= <expr><lit:literal type="number" pos:line="29" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="29" pos:column="29">i</name> <op:operator pos:line="29" pos:column="31">&lt;</op:operator> <name><name pos:line="29" pos:column="33">binderProviders</name><op:operator pos:line="29" pos:column="48">.</op:operator><name pos:line="29" pos:column="49">Count</name></name></expr>;</condition> <incr><expr><name pos:line="29" pos:column="56">i</name><op:operator pos:line="29" pos:column="57">++</op:operator></expr></incr>)
            <block pos:line="30" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="31" pos:column="17">var</name></type> <name pos:line="31" pos:column="21">originalBinder</name> <init pos:line="31" pos:column="36">= <expr><name><name pos:line="31" pos:column="38">binderProviders</name><index pos:line="31" pos:column="53">[<expr><name pos:line="31" pos:column="54">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="32" pos:column="17">IModelBinderProvider</name></type> <name pos:line="32" pos:column="38">newProvider</name></decl>;</decl_stmt>

                <if pos:line="34" pos:column="17">if <condition pos:line="34" pos:column="20">(<expr><call><name><name pos:line="34" pos:column="21">alternateModelBinderProvider</name><op:operator pos:line="34" pos:column="49">.</op:operator><name pos:line="34" pos:column="50">TryCreate</name></name><argument_list pos:line="34" pos:column="59">(<argument><expr><name pos:line="34" pos:column="60">originalBinder</name></expr></argument>, <argument><expr pos:line="34" pos:column="76">out <name pos:line="34" pos:column="80">newProvider</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="34" pos:column="93">
                <block pos:line="35" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="36" pos:column="21">context</name><op:operator pos:line="36" pos:column="28">.</op:operator><name pos:line="36" pos:column="29">Logger</name><op:operator pos:line="36" pos:column="35">.</op:operator><name pos:line="36" pos:column="36">Info</name></name><argument_list pos:line="36" pos:column="40">(<argument><expr><name><name pos:line="36" pos:column="41">Resources</name><op:operator pos:line="36" pos:column="50">.</op:operator><name pos:line="36" pos:column="51">ModelBinderInspectorSetupReplacedModelBinderProvider</name></name></expr></argument>, <argument><expr><call><name><name pos:line="36" pos:column="105">originalBinder</name><op:operator pos:line="36" pos:column="119">.</op:operator><name pos:line="36" pos:column="120">GetType</name></name><argument_list pos:line="36" pos:column="127">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="37" pos:column="21">binderProviders</name><index pos:line="37" pos:column="36">[<expr><name pos:line="37" pos:column="37">i</name></expr>]</index></name> <op:operator pos:line="37" pos:column="40">=</op:operator> <name pos:line="37" pos:column="42">newProvider</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
<cpp:endif pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">endif</cpp:directive></cpp:endif>
        }</block></function>

        <function><type><specifier pos:line="43" pos:column="9">private</specifier> <name pos:line="43" pos:column="17">void</name></type> <name pos:line="43" pos:column="22">SetupValueProviderFactories</name><parameter_list pos:line="43" pos:column="49">(<param><decl><type><name pos:line="43" pos:column="50">IInspectorContext</name></type> <name pos:line="43" pos:column="68">context</name></decl></param>)</parameter_list>
        <block pos:line="44" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="45" pos:column="13">var</name></type> <name pos:line="45" pos:column="17">factories</name> <init pos:line="45" pos:column="27">= <expr><name><name pos:line="45" pos:column="29">ValueProviderFactories</name><op:operator pos:line="45" pos:column="51">.</op:operator><name pos:line="45" pos:column="52">Factories</name></name></expr></init></decl>;</decl_stmt>
            <if pos:line="46" pos:column="13">if <condition pos:line="46" pos:column="16">(<expr><name><name pos:line="46" pos:column="17">factories</name><op:operator pos:line="46" pos:column="26">.</op:operator><name pos:line="46" pos:column="27">Count</name></name> <op:operator pos:line="46" pos:column="33">==</op:operator> <lit:literal type="number" pos:line="46" pos:column="36">0</lit:literal></expr>)</condition><then pos:line="46" pos:column="38">
            <block pos:line="47" pos:column="13">{
                <return pos:line="48" pos:column="17">return;</return>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="51" pos:column="13">var</name></type> <name pos:line="51" pos:column="17">alternateValueProviderFactory</name> <init pos:line="51" pos:column="47">= <expr><op:operator pos:line="51" pos:column="49">new</op:operator> <call><name pos:line="51" pos:column="53">ValueProviderFactory</name><argument_list pos:line="51" pos:column="73">(<argument><expr><name><name pos:line="51" pos:column="74">context</name><op:operator pos:line="51" pos:column="81">.</op:operator><name pos:line="51" pos:column="82">ProxyFactory</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <for pos:line="53" pos:column="13">for (<init><decl><type><name pos:line="53" pos:column="18">int</name></type> <name pos:line="53" pos:column="22">i</name> <init pos:line="53" pos:column="24">= <expr><lit:literal type="number" pos:line="53" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="53" pos:column="29">i</name> <op:operator pos:line="53" pos:column="31">&lt;</op:operator> <name><name pos:line="53" pos:column="33">factories</name><op:operator pos:line="53" pos:column="42">.</op:operator><name pos:line="53" pos:column="43">Count</name></name></expr>;</condition> <incr><expr><name pos:line="53" pos:column="50">i</name><op:operator pos:line="53" pos:column="51">++</op:operator></expr></incr>)
            <block pos:line="54" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="55" pos:column="17">var</name></type> <name pos:line="55" pos:column="21">originalFactory</name> <init pos:line="55" pos:column="37">= <expr><name><name pos:line="55" pos:column="39">factories</name><index pos:line="55" pos:column="48">[<expr><name pos:line="55" pos:column="49">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name pos:line="56" pos:column="17">System</name><op:operator pos:line="56" pos:column="23">.</op:operator><name pos:line="56" pos:column="24">Web</name><op:operator pos:line="56" pos:column="27">.</op:operator><name pos:line="56" pos:column="28">Mvc</name><op:operator pos:line="56" pos:column="31">.</op:operator><name pos:line="56" pos:column="32">ValueProviderFactory</name></name></type> <name pos:line="56" pos:column="53">newFactory</name></decl>;</decl_stmt>

                <if pos:line="58" pos:column="17">if <condition pos:line="58" pos:column="20">(<expr><call><name><name pos:line="58" pos:column="21">alternateValueProviderFactory</name><op:operator pos:line="58" pos:column="50">.</op:operator><name pos:line="58" pos:column="51">TryCreate</name></name><argument_list pos:line="58" pos:column="60">(<argument><expr><name pos:line="58" pos:column="61">originalFactory</name></expr></argument>, <argument><expr pos:line="58" pos:column="78">out <name pos:line="58" pos:column="82">newFactory</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="58" pos:column="94">
                <block pos:line="59" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="60" pos:column="21">context</name><op:operator pos:line="60" pos:column="28">.</op:operator><name pos:line="60" pos:column="29">Logger</name><op:operator pos:line="60" pos:column="35">.</op:operator><name pos:line="60" pos:column="36">Info</name></name><argument_list pos:line="60" pos:column="40">(<argument><expr><name><name pos:line="60" pos:column="41">Resources</name><op:operator pos:line="60" pos:column="50">.</op:operator><name pos:line="60" pos:column="51">ModelBinderInspectorSetupReplacedValueProviderFactory</name></name></expr></argument>, <argument><expr><call><name><name pos:line="60" pos:column="106">originalFactory</name><op:operator pos:line="60" pos:column="121">.</op:operator><name pos:line="60" pos:column="122">GetType</name></name><argument_list pos:line="60" pos:column="129">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="61" pos:column="21">factories</name><index pos:line="61" pos:column="30">[<expr><name pos:line="61" pos:column="31">i</name></expr>]</index></name> <op:operator pos:line="61" pos:column="34">=</op:operator> <name pos:line="61" pos:column="36">newFactory</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
        }</block></function>

        <function><type><specifier pos:line="66" pos:column="9">private</specifier> <name pos:line="66" pos:column="17">void</name></type> <name pos:line="66" pos:column="22">SetupModelBinders</name><parameter_list pos:line="66" pos:column="39">(<param><decl><type><name pos:line="66" pos:column="40">IInspectorContext</name></type> <name pos:line="66" pos:column="58">context</name></decl></param>)</parameter_list>
        <block pos:line="67" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="68" pos:column="13">var</name></type> <name pos:line="68" pos:column="17">alternateModelBinder</name> <init pos:line="68" pos:column="38">= <expr><op:operator pos:line="68" pos:column="40">new</op:operator> <call><name pos:line="68" pos:column="44">ModelBinder</name><argument_list pos:line="68" pos:column="55">(<argument><expr><name><name pos:line="68" pos:column="56">context</name><op:operator pos:line="68" pos:column="63">.</op:operator><name pos:line="68" pos:column="64">ProxyFactory</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="69" pos:column="13">var</name></type> <name pos:line="69" pos:column="17">binders</name> <init pos:line="69" pos:column="25">= <expr><name><name pos:line="69" pos:column="27">ModelBinders</name><op:operator pos:line="69" pos:column="39">.</op:operator><name pos:line="69" pos:column="40">Binders</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="70" pos:column="13">var</name></type> <name pos:line="70" pos:column="17">keys</name> <init pos:line="70" pos:column="22">= <expr><call><name><name pos:line="70" pos:column="24">binders</name><op:operator pos:line="70" pos:column="31">.</op:operator><name pos:line="70" pos:column="32">Keys</name><op:operator pos:line="70" pos:column="36">.</op:operator><name pos:line="70" pos:column="37">ToArray</name></name><argument_list pos:line="70" pos:column="44">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <for pos:line="72" pos:column="13">for (<init><decl><type><name pos:line="72" pos:column="18">int</name></type> <name pos:line="72" pos:column="22">i</name> <init pos:line="72" pos:column="24">= <expr><lit:literal type="number" pos:line="72" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="72" pos:column="29">i</name> <op:operator pos:line="72" pos:column="31">&lt;</op:operator> <name><name pos:line="72" pos:column="33">keys</name><op:operator pos:line="72" pos:column="37">.</op:operator><name pos:line="72" pos:column="38">Length</name></name></expr>;</condition> <incr><expr><name pos:line="72" pos:column="46">i</name><op:operator pos:line="72" pos:column="47">++</op:operator></expr></incr>)
            <block pos:line="73" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="74" pos:column="17">var</name></type> <name pos:line="74" pos:column="21">type</name> <init pos:line="74" pos:column="26">= <expr><name><name pos:line="74" pos:column="28">keys</name><index pos:line="74" pos:column="32">[<expr><name pos:line="74" pos:column="33">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="75" pos:column="17">var</name></type> <name pos:line="75" pos:column="21">originalBinder</name> <init pos:line="75" pos:column="36">= <expr><name><name pos:line="75" pos:column="38">binders</name><index pos:line="75" pos:column="45">[<expr><name pos:line="75" pos:column="46">type</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="76" pos:column="17">IModelBinder</name></type> <name pos:line="76" pos:column="30">newBinder</name></decl>;</decl_stmt>

                <if pos:line="78" pos:column="17">if <condition pos:line="78" pos:column="20">(<expr><call><name><name pos:line="78" pos:column="21">alternateModelBinder</name><op:operator pos:line="78" pos:column="41">.</op:operator><name pos:line="78" pos:column="42">TryCreate</name></name><argument_list pos:line="78" pos:column="51">(<argument><expr><name pos:line="78" pos:column="52">originalBinder</name></expr></argument>, <argument><expr pos:line="78" pos:column="68">out <name pos:line="78" pos:column="72">newBinder</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="78" pos:column="83">
                <block pos:line="79" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="80" pos:column="21">context</name><op:operator pos:line="80" pos:column="28">.</op:operator><name pos:line="80" pos:column="29">Logger</name><op:operator pos:line="80" pos:column="35">.</op:operator><name pos:line="80" pos:column="36">Info</name></name><argument_list pos:line="80" pos:column="40">(<argument><expr><name><name pos:line="80" pos:column="41">Resources</name><op:operator pos:line="80" pos:column="50">.</op:operator><name pos:line="80" pos:column="51">ModelBinderInspectorSetupReplacedModelBinder</name></name></expr></argument>, <argument><expr><call><name><name pos:line="80" pos:column="97">originalBinder</name><op:operator pos:line="80" pos:column="111">.</op:operator><name pos:line="80" pos:column="112">GetType</name></name><argument_list pos:line="80" pos:column="119">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="81" pos:column="21">binders</name><index pos:line="81" pos:column="28">[<expr><name pos:line="81" pos:column="29">type</name></expr>]</index></name> <op:operator pos:line="81" pos:column="35">=</op:operator> <name pos:line="81" pos:column="37">newBinder</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>

            <comment type="line" pos:line="85" pos:column="13">// handle default binder</comment>
            <decl_stmt><decl><type><name pos:line="86" pos:column="13">var</name></type> <name pos:line="86" pos:column="17">originalDefaultBinder</name> <init pos:line="86" pos:column="39">= <expr><name><name pos:line="86" pos:column="41">ModelBinders</name><op:operator pos:line="86" pos:column="53">.</op:operator><name pos:line="86" pos:column="54">Binders</name><op:operator pos:line="86" pos:column="61">.</op:operator><name pos:line="86" pos:column="62">DefaultBinder</name></name> <op:operator pos:line="86" pos:column="76">as</op:operator> <name pos:line="86" pos:column="79">DefaultModelBinder</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="87" pos:column="13">IModelBinder</name></type> <name pos:line="87" pos:column="26">newDefaultBinder</name></decl>;</decl_stmt>
            <if pos:line="88" pos:column="13">if <condition pos:line="88" pos:column="16">(<expr><name pos:line="88" pos:column="17">originalDefaultBinder</name> <op:operator pos:line="88" pos:column="39">!=</op:operator> <name pos:line="88" pos:column="42">null</name> <op:operator pos:line="88" pos:column="47">&amp;&amp;</op:operator> <call><name><name pos:line="88" pos:column="50">alternateModelBinder</name><op:operator pos:line="88" pos:column="70">.</op:operator><name pos:line="88" pos:column="71">TryCreate</name></name><argument_list pos:line="88" pos:column="80">(<argument><expr><name pos:line="88" pos:column="81">originalDefaultBinder</name></expr></argument>, <argument><expr pos:line="88" pos:column="104">out <name pos:line="88" pos:column="108">newDefaultBinder</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="88" pos:column="126">
            <block pos:line="89" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="90" pos:column="17">context</name><op:operator pos:line="90" pos:column="24">.</op:operator><name pos:line="90" pos:column="25">Logger</name><op:operator pos:line="90" pos:column="31">.</op:operator><name pos:line="90" pos:column="32">Info</name></name><argument_list pos:line="90" pos:column="36">(<argument><expr><name><name pos:line="90" pos:column="37">Resources</name><op:operator pos:line="90" pos:column="46">.</op:operator><name pos:line="90" pos:column="47">ModelBinderInspectorSetupReplacedModelBinder</name></name></expr></argument>, <argument><expr><call><name><name pos:line="90" pos:column="93">originalDefaultBinder</name><op:operator pos:line="90" pos:column="114">.</op:operator><name pos:line="90" pos:column="115">GetType</name></name><argument_list pos:line="90" pos:column="122">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="91" pos:column="17">ModelBinders</name><op:operator pos:line="91" pos:column="29">.</op:operator><name pos:line="91" pos:column="30">Binders</name><op:operator pos:line="91" pos:column="37">.</op:operator><name pos:line="91" pos:column="38">DefaultBinder</name></name> <op:operator pos:line="91" pos:column="52">=</op:operator> <name pos:line="91" pos:column="54">newDefaultBinder</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
