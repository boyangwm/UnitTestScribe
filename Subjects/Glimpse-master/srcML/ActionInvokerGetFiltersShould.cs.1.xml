<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Mvc\AlternateType\ActionInvokerGetFiltersShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Diagnostics</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">CodeAnalysis</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Web</name><op:operator pos:line="3" pos:column="17">.</op:operator><name pos:line="3" pos:column="18">Mvc</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Web</name><op:operator pos:line="4" pos:column="17">.</op:operator><name pos:line="4" pos:column="18">Mvc</name><op:operator pos:line="4" pos:column="21">.</op:operator><name pos:line="4" pos:column="22">Async</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Glimpse</name><op:operator pos:line="5" pos:column="14">.</op:operator><name pos:line="5" pos:column="15">Core</name><op:operator pos:line="5" pos:column="19">.</op:operator><name pos:line="5" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Glimpse</name><op:operator pos:line="6" pos:column="14">.</op:operator><name pos:line="6" pos:column="15">Mvc</name><op:operator pos:line="6" pos:column="18">.</op:operator><name pos:line="6" pos:column="19">AlternateType</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Glimpse</name><op:operator pos:line="7" pos:column="14">.</op:operator><name pos:line="7" pos:column="15">Test</name><op:operator pos:line="7" pos:column="19">.</op:operator><name pos:line="7" pos:column="20">Common</name></name>;</using>
<using pos:line="8" pos:column="1">using <name pos:line="8" pos:column="7">Moq</name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">Ploeh</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">AutoFixture</name><op:operator pos:line="9" pos:column="24">.</op:operator><name pos:line="9" pos:column="25">Xunit</name></name>;</using>
<using pos:line="10" pos:column="1">using <name pos:line="10" pos:column="7">Xunit</name>;</using>
<using pos:line="11" pos:column="1">using <name><name pos:line="11" pos:column="7">Xunit</name><op:operator pos:line="11" pos:column="12">.</op:operator><name pos:line="11" pos:column="13">Extensions</name></name>;</using>

<namespace pos:line="13" pos:column="1">namespace <name><name pos:line="13" pos:column="11">Glimpse</name><op:operator pos:line="13" pos:column="18">.</op:operator><name pos:line="13" pos:column="19">Test</name><op:operator pos:line="13" pos:column="23">.</op:operator><name pos:line="13" pos:column="24">Mvc</name><op:operator pos:line="13" pos:column="27">.</op:operator><name pos:line="13" pos:column="28">AlternateType</name></name>
<block pos:line="14" pos:column="1">{
    <class><attribute pos:line="15" pos:column="5">[<expr><call><name pos:line="15" pos:column="6">SuppressMessage</name><argument_list pos:line="15" pos:column="21">(<argument><expr><lit:literal type="string" pos:line="15" pos:column="22">"StyleCop.CSharp.MaintainabilityRules"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="15" pos:column="62">"SA1402:FileMayOnlyContainASingleClass"</lit:literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="103">Justification</name> <op:operator pos:line="15" pos:column="117">=</op:operator> <lit:literal type="string" pos:line="15" pos:column="119">"Reviewed. Class is okay because it only changes the generic T parameter for the abstract class below."</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    <specifier pos:line="16" pos:column="5">public</specifier> class <name pos:line="16" pos:column="18">ControllerActionInvokerGetFiltersShould</name> <super pos:line="16" pos:column="58">: <name><name pos:line="16" pos:column="60">ActionInvokerGetFiltersShould</name><argument_list pos:line="16" pos:column="89">&lt;<argument><name pos:line="16" pos:column="90">ControllerActionInvoker</name></argument>&gt;</argument_list></name></super>
    <block pos:line="17" pos:column="5">{
    }</block></class>

    <class><attribute pos:line="20" pos:column="5">[<expr><call><name pos:line="20" pos:column="6">SuppressMessage</name><argument_list pos:line="20" pos:column="21">(<argument><expr><lit:literal type="string" pos:line="20" pos:column="22">"StyleCop.CSharp.MaintainabilityRules"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="20" pos:column="62">"SA1402:FileMayOnlyContainASingleClass"</lit:literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="103">Justification</name> <op:operator pos:line="20" pos:column="117">=</op:operator> <lit:literal type="string" pos:line="20" pos:column="119">"Reviewed. Class is okay because it only changes the generic T parameter for the abstract class below."</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    <specifier pos:line="21" pos:column="5">public</specifier> class <name pos:line="21" pos:column="18">AsyncControllerActionInvokerGetFiltersShould</name> <super pos:line="21" pos:column="63">: <name><name pos:line="21" pos:column="65">ActionInvokerGetFiltersShould</name><argument_list pos:line="21" pos:column="94">&lt;<argument><name pos:line="21" pos:column="95">AsyncControllerActionInvoker</name></argument>&gt;</argument_list></name></super>
    <block pos:line="22" pos:column="5">{
    }</block></class>

    <class><specifier pos:line="25" pos:column="5">public</specifier> <specifier pos:line="25" pos:column="12">abstract</specifier> class <name><name pos:line="25" pos:column="27">ActionInvokerGetFiltersShould</name><argument_list pos:line="25" pos:column="56">&lt;<argument><name pos:line="25" pos:column="57">T</name></argument>&gt; <where pos:line="25" pos:column="60">where <name pos:line="25" pos:column="66">T</name> : class</where></argument_list></name>
    <block pos:line="26" pos:column="5">{
        <function><type><attribute pos:line="27" pos:column="9">[<expr><name pos:line="27" pos:column="10">Theory</name></expr><op:operator pos:line="27" pos:column="16">,</op:operator> <expr><name pos:line="27" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="28" pos:column="9">public</specifier> <name pos:line="28" pos:column="16">void</name></type> <name pos:line="28" pos:column="21">ImplementProperMethod</name><parameter_list pos:line="28" pos:column="42">(<param><decl><type><name><name pos:line="28" pos:column="43">ActionInvoker</name><op:operator pos:line="28" pos:column="56">.</op:operator><name><name pos:line="28" pos:column="57">GetFilters</name><argument_list pos:line="28" pos:column="67">&lt;<argument><name pos:line="28" pos:column="68">T</name></argument>&gt;</argument_list></name></name></type> <name pos:line="28" pos:column="71">sut</name></decl></param>)</parameter_list>
        <block pos:line="29" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="30" pos:column="13">Assert</name><op:operator pos:line="30" pos:column="19">.</op:operator><name pos:line="30" pos:column="20">Equal</name></name><argument_list pos:line="30" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="30" pos:column="26">"GetFilters"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="40">sut</name><op:operator pos:line="30" pos:column="43">.</op:operator><name pos:line="30" pos:column="44">MethodToImplement</name><op:operator pos:line="30" pos:column="61">.</op:operator><name pos:line="30" pos:column="62">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="33" pos:column="9">[<expr><name pos:line="33" pos:column="10">Theory</name></expr><op:operator pos:line="33" pos:column="16">,</op:operator> <expr><name pos:line="33" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="34" pos:column="9">public</specifier> <name pos:line="34" pos:column="16">void</name></type> <name pos:line="34" pos:column="21">ProceedAndReturnWithRuntimePolicyOff</name><parameter_list pos:line="34" pos:column="57">(<param><decl><type><name><name pos:line="34" pos:column="58">ActionInvoker</name><op:operator pos:line="34" pos:column="71">.</op:operator><name><name pos:line="34" pos:column="72">GetFilters</name><argument_list pos:line="34" pos:column="82">&lt;<argument><name pos:line="34" pos:column="83">T</name></argument>&gt;</argument_list></name></name></type> <name pos:line="34" pos:column="86">sut</name></decl></param>, <param><decl><type><name pos:line="34" pos:column="91">IAlternateMethodContext</name></type> <name pos:line="34" pos:column="115">context</name></decl></param>)</parameter_list>
        <block pos:line="35" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="36" pos:column="13">context</name><op:operator pos:line="36" pos:column="20">.</op:operator><name pos:line="36" pos:column="21">Setup</name></name><argument_list pos:line="36" pos:column="26">(<argument><expr><lambda><name pos:line="36" pos:column="27">c</name> <op:operator pos:line="36" pos:column="29">=&gt;</op:operator> <name><name pos:line="36" pos:column="32">c</name><op:operator pos:line="36" pos:column="33">.</op:operator><name pos:line="36" pos:column="34">RuntimePolicyStrategy</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="36" pos:column="56">.</op:operator><call><name pos:line="36" pos:column="57">Returns</name><argument_list pos:line="36" pos:column="64">(<argument><expr><lambda><parameter_list pos:line="36" pos:column="65">()</parameter_list> <op:operator pos:line="36" pos:column="68">=&gt;</op:operator> <name><name pos:line="36" pos:column="71">RuntimePolicy</name><op:operator pos:line="36" pos:column="84">.</op:operator><name pos:line="36" pos:column="85">Off</name></name></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="38" pos:column="13">sut</name><op:operator pos:line="38" pos:column="16">.</op:operator><name pos:line="38" pos:column="17">NewImplementation</name></name><argument_list pos:line="38" pos:column="34">(<argument><expr><name pos:line="38" pos:column="35">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="40" pos:column="13">context</name><op:operator pos:line="40" pos:column="20">.</op:operator><name pos:line="40" pos:column="21">Verify</name></name><argument_list pos:line="40" pos:column="27">(<argument><expr><lambda><name pos:line="40" pos:column="28">c</name> <op:operator pos:line="40" pos:column="30">=&gt;</op:operator> <call><name><name pos:line="40" pos:column="33">c</name><op:operator pos:line="40" pos:column="34">.</op:operator><name pos:line="40" pos:column="35">Proceed</name></name><argument_list pos:line="40" pos:column="42">()</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="41" pos:column="13">context</name><op:operator pos:line="41" pos:column="20">.</op:operator><name pos:line="41" pos:column="21">Verify</name></name><argument_list pos:line="41" pos:column="27">(<argument><expr><lambda><name pos:line="41" pos:column="28">c</name> <op:operator pos:line="41" pos:column="30">=&gt;</op:operator> <name><name pos:line="41" pos:column="33">c</name><op:operator pos:line="41" pos:column="34">.</op:operator><name pos:line="41" pos:column="35">ReturnValue</name></name></lambda></expr></argument>, <argument><expr><call><name><name pos:line="41" pos:column="48">Times</name><op:operator pos:line="41" pos:column="53">.</op:operator><name pos:line="41" pos:column="54">Never</name></name><argument_list pos:line="41" pos:column="59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="44" pos:column="9">[<expr><name pos:line="44" pos:column="10">Theory</name></expr><op:operator pos:line="44" pos:column="16">,</op:operator> <expr><name pos:line="44" pos:column="18">AutoMock</name></expr>]</attribute>
        <specifier pos:line="45" pos:column="9">public</specifier> <name pos:line="45" pos:column="16">void</name></type> <name pos:line="45" pos:column="21">ProxyFiltersWithRuntimePolicyOn</name><parameter_list pos:line="45" pos:column="52">(<param><decl><type><attribute pos:line="45" pos:column="53">[<expr><name pos:line="45" pos:column="54">Frozen</name></expr>]</attribute> <name pos:line="45" pos:column="62">IExecutionTimer</name></type> <name pos:line="45" pos:column="78">timer</name></decl></param>, <param><decl><type><name><name pos:line="45" pos:column="85">ActionInvoker</name><op:operator pos:line="45" pos:column="98">.</op:operator><name><name pos:line="45" pos:column="99">GetFilters</name><argument_list pos:line="45" pos:column="109">&lt;<argument><name pos:line="45" pos:column="110">T</name></argument>&gt;</argument_list></name></name></type> <name pos:line="45" pos:column="113">sut</name></decl></param>, <param><decl><type><name pos:line="45" pos:column="118">IAlternateMethodContext</name></type> <name pos:line="45" pos:column="142">context</name></decl></param>)</parameter_list>
        <block pos:line="46" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="47" pos:column="13">sut</name><op:operator pos:line="47" pos:column="16">.</op:operator><name pos:line="47" pos:column="17">NewImplementation</name></name><argument_list pos:line="47" pos:column="34">(<argument><expr><name pos:line="47" pos:column="35">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="49" pos:column="13">timer</name><op:operator pos:line="49" pos:column="18">.</op:operator><name pos:line="49" pos:column="19">Verify</name></name><argument_list pos:line="49" pos:column="25">(<argument><expr><lambda><name pos:line="49" pos:column="26">t</name> <op:operator pos:line="49" pos:column="28">=&gt;</op:operator> <call><name><name pos:line="49" pos:column="31">t</name><op:operator pos:line="49" pos:column="32">.</op:operator><name pos:line="49" pos:column="33">Time</name></name><argument_list pos:line="49" pos:column="37">(<argument><expr><call><name><name pos:line="49" pos:column="38">It</name><op:operator pos:line="49" pos:column="40">.</op:operator><name><name pos:line="49" pos:column="41">IsAny</name><argument_list pos:line="49" pos:column="46">&lt;<argument><name pos:line="49" pos:column="47">Action</name></argument>&gt;</argument_list></name></name><argument_list pos:line="49" pos:column="54">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="50" pos:column="13">context</name><op:operator pos:line="50" pos:column="20">.</op:operator><name pos:line="50" pos:column="21">Verify</name></name><argument_list pos:line="50" pos:column="27">(<argument><expr><lambda><name pos:line="50" pos:column="28">c</name> <op:operator pos:line="50" pos:column="30">=&gt;</op:operator> <name><name pos:line="50" pos:column="33">c</name><op:operator pos:line="50" pos:column="34">.</op:operator><name pos:line="50" pos:column="35">ReturnValue</name></name></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
