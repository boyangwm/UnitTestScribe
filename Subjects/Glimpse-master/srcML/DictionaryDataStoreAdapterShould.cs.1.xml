<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Glimpse-master\source\Glimpse.Test.Core\DictionaryDataStoreAdapterShould.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Collections</name><op:operator pos:line="3" pos:column="25">.</op:operator><name pos:line="3" pos:column="26">Generic</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Glimpse</name><op:operator pos:line="4" pos:column="14">.</op:operator><name pos:line="4" pos:column="15">Core</name><op:operator pos:line="4" pos:column="19">.</op:operator><name pos:line="4" pos:column="20">Extensibility</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Glimpse</name><op:operator pos:line="5" pos:column="14">.</op:operator><name pos:line="5" pos:column="15">Core</name><op:operator pos:line="5" pos:column="19">.</op:operator><name pos:line="5" pos:column="20">Extensions</name></name>;</using>
<using pos:line="6" pos:column="1">using <name pos:line="6" pos:column="7">Xunit</name>;</using>

<namespace pos:line="8" pos:column="1">namespace <name><name pos:line="8" pos:column="11">Glimpse</name><op:operator pos:line="8" pos:column="18">.</op:operator><name pos:line="8" pos:column="19">Test</name><op:operator pos:line="8" pos:column="23">.</op:operator><name pos:line="8" pos:column="24">Core</name></name>
<block pos:line="9" pos:column="1">{
    <class><specifier pos:line="10" pos:column="5">public</specifier> class <name pos:line="10" pos:column="18">DictionaryDataStoreAdapterShould</name>
    <block pos:line="11" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="12" pos:column="9">public</specifier> <name pos:line="12" pos:column="16">IDictionary</name></type> <name pos:line="12" pos:column="28">Dictionary</name> <block pos:line="12" pos:column="39">{ <function_decl><name pos:line="12" pos:column="41">get</name>;</function_decl> <function_decl><name pos:line="12" pos:column="46">set</name>;</function_decl> }</block></decl></decl_stmt>

        <constructor><specifier pos:line="14" pos:column="9">public</specifier> <name pos:line="14" pos:column="16">DictionaryDataStoreAdapterShould</name><parameter_list pos:line="14" pos:column="48">()</parameter_list>
        <block pos:line="15" pos:column="9">{
            <expr_stmt><expr><name pos:line="16" pos:column="13">Dictionary</name> <op:operator pos:line="16" pos:column="24">=</op:operator> <op:operator pos:line="16" pos:column="26">new</op:operator> <name><name pos:line="16" pos:column="30">Dictionary</name><argument_list pos:line="16" pos:column="40">&lt;<argument><name pos:line="16" pos:column="41">string</name></argument>, <argument><name pos:line="16" pos:column="49">object</name></argument>&gt;</argument_list></name>
                             <block pos:line="17" pos:column="30">{
                                 <expr><block pos:line="18" pos:column="34">{<expr><call><name pos:line="18" pos:column="35">typeof</name><argument_list pos:line="18" pos:column="41">(<argument><expr><name pos:line="18" pos:column="42">string</name></expr></argument>)</argument_list></call><op:operator pos:line="18" pos:column="49">.</op:operator><name pos:line="18" pos:column="50">AssemblyQualifiedName</name></expr><op:operator pos:line="18" pos:column="71">,</op:operator><expr><lit:literal type="string" pos:line="18" pos:column="72">"TestString"</lit:literal></expr>}</block></expr><op:operator pos:line="18" pos:column="85">,</op:operator>
                                 <expr><block pos:line="19" pos:column="34">{<expr><call><name pos:line="19" pos:column="35">typeof</name><argument_list pos:line="19" pos:column="41">(<argument><expr><name pos:line="19" pos:column="42">int</name></expr></argument>)</argument_list></call><op:operator pos:line="19" pos:column="46">.</op:operator><name pos:line="19" pos:column="47">AssemblyQualifiedName</name></expr><op:operator pos:line="19" pos:column="68">,</op:operator> <expr><lit:literal type="number" pos:line="19" pos:column="70">4</lit:literal></expr>}</block></expr><op:operator pos:line="19" pos:column="72">,</op:operator>
                                 <expr><block pos:line="20" pos:column="34">{<expr><lit:literal type="string" pos:line="20" pos:column="35">"intKey"</lit:literal></expr><op:operator pos:line="20" pos:column="43">,</op:operator> <expr><lit:literal type="number" pos:line="20" pos:column="45">5</lit:literal></expr>}</block></expr>
                             }</block></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><attribute pos:line="24" pos:column="9">[<expr><name pos:line="24" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="25" pos:column="9">public</specifier> <name pos:line="25" pos:column="16">void</name></type> <name pos:line="25" pos:column="21">ConstructWithDictionary</name><parameter_list pos:line="25" pos:column="44">()</parameter_list>
        <block pos:line="26" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="27" pos:column="13">var</name></type> <name pos:line="27" pos:column="17">instance</name> <init pos:line="27" pos:column="26">= <expr><op:operator pos:line="27" pos:column="28">new</op:operator> <call><name pos:line="27" pos:column="32">DictionaryDataStoreAdapter</name><argument_list pos:line="27" pos:column="58">(<argument><expr><name pos:line="27" pos:column="59">Dictionary</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="29" pos:column="13">Assert</name><op:operator pos:line="29" pos:column="19">.</op:operator><name pos:line="29" pos:column="20">NotNull</name></name><argument_list pos:line="29" pos:column="27">(<argument><expr><name pos:line="29" pos:column="28">instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="32" pos:column="9">[<expr><name pos:line="32" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="33" pos:column="9">public</specifier> <name pos:line="33" pos:column="16">void</name></type> <name pos:line="33" pos:column="21">GetViaGenerics</name><parameter_list pos:line="33" pos:column="35">()</parameter_list>
        <block pos:line="34" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="35" pos:column="13">var</name></type> <name pos:line="35" pos:column="17">instance</name> <init pos:line="35" pos:column="26">= <expr><op:operator pos:line="35" pos:column="28">new</op:operator> <call><name pos:line="35" pos:column="32">DictionaryDataStoreAdapter</name><argument_list pos:line="35" pos:column="58">(<argument><expr><name pos:line="35" pos:column="59">Dictionary</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="37" pos:column="13">var</name></type> <name pos:line="37" pos:column="17">result</name> <init pos:line="37" pos:column="24">= <expr><call><name><name pos:line="37" pos:column="26">instance</name><op:operator pos:line="37" pos:column="34">.</op:operator><name><name pos:line="37" pos:column="35">Get</name><argument_list pos:line="37" pos:column="38">&lt;<argument><name pos:line="37" pos:column="39">string</name></argument>&gt;</argument_list></name></name><argument_list pos:line="37" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="38" pos:column="13">Assert</name><op:operator pos:line="38" pos:column="19">.</op:operator><name pos:line="38" pos:column="20">Equal</name></name><argument_list pos:line="38" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="38" pos:column="26">"TestString"</lit:literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="40">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="39" pos:column="13">Assert</name><op:operator pos:line="39" pos:column="19">.</op:operator><name><name pos:line="39" pos:column="20">IsType</name><argument_list pos:line="39" pos:column="26">&lt;<argument><name pos:line="39" pos:column="27">string</name></argument>&gt;</argument_list></name></name><argument_list pos:line="39" pos:column="34">(<argument><expr><name pos:line="39" pos:column="35">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="42" pos:column="9">[<expr><name pos:line="42" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="43" pos:column="9">public</specifier> <name pos:line="43" pos:column="16">void</name></type> <name pos:line="43" pos:column="21">GetViaGenericsWithKey</name><parameter_list pos:line="43" pos:column="42">()</parameter_list>
        <block pos:line="44" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="45" pos:column="13">var</name></type> <name pos:line="45" pos:column="17">instance</name> <init pos:line="45" pos:column="26">= <expr><op:operator pos:line="45" pos:column="28">new</op:operator> <call><name pos:line="45" pos:column="32">DictionaryDataStoreAdapter</name><argument_list pos:line="45" pos:column="58">(<argument><expr><name pos:line="45" pos:column="59">Dictionary</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="47" pos:column="13">var</name></type> <name pos:line="47" pos:column="17">result</name> <init pos:line="47" pos:column="24">= <expr><call><name><name pos:line="47" pos:column="26">instance</name><op:operator pos:line="47" pos:column="34">.</op:operator><name><name pos:line="47" pos:column="35">Get</name><argument_list pos:line="47" pos:column="38">&lt;<argument><name pos:line="47" pos:column="39">int</name></argument>&gt;</argument_list></name></name><argument_list pos:line="47" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="47" pos:column="44">"intKey"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="48" pos:column="13">Assert</name><op:operator pos:line="48" pos:column="19">.</op:operator><name pos:line="48" pos:column="20">Equal</name></name><argument_list pos:line="48" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="48" pos:column="26">5</lit:literal></expr></argument>, <argument><expr><name pos:line="48" pos:column="29">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="49" pos:column="13">Assert</name><op:operator pos:line="49" pos:column="19">.</op:operator><name><name pos:line="49" pos:column="20">IsType</name><argument_list pos:line="49" pos:column="26">&lt;<argument><name pos:line="49" pos:column="27">int</name></argument>&gt;</argument_list></name></name><argument_list pos:line="49" pos:column="31">(<argument><expr><name pos:line="49" pos:column="32">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="52" pos:column="9">[<expr><name pos:line="52" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="53" pos:column="9">public</specifier> <name pos:line="53" pos:column="16">void</name></type> <name pos:line="53" pos:column="21">GetViaKey</name><parameter_list pos:line="53" pos:column="30">()</parameter_list>
        <block pos:line="54" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="55" pos:column="13">var</name></type> <name pos:line="55" pos:column="17">instance</name> <init pos:line="55" pos:column="26">= <expr><op:operator pos:line="55" pos:column="28">new</op:operator> <call><name pos:line="55" pos:column="32">DictionaryDataStoreAdapter</name><argument_list pos:line="55" pos:column="58">(<argument><expr><name pos:line="55" pos:column="59">Dictionary</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="57" pos:column="13">Assert</name><op:operator pos:line="57" pos:column="19">.</op:operator><name pos:line="57" pos:column="20">Equal</name></name><argument_list pos:line="57" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="57" pos:column="26">5</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="57" pos:column="29">instance</name><op:operator pos:line="57" pos:column="37">.</op:operator><name pos:line="57" pos:column="38">Get</name></name><argument_list pos:line="57" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="57" pos:column="42">"intKey"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="60" pos:column="9">[<expr><name pos:line="60" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="61" pos:column="9">public</specifier> <name pos:line="61" pos:column="16">void</name></type> <name pos:line="61" pos:column="21">SetViaGenerics</name><parameter_list pos:line="61" pos:column="35">()</parameter_list>
        <block pos:line="62" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="63" pos:column="13">var</name></type> <name pos:line="63" pos:column="17">instance</name> <init pos:line="63" pos:column="26">= <expr><op:operator pos:line="63" pos:column="28">new</op:operator> <call><name pos:line="63" pos:column="32">DictionaryDataStoreAdapter</name><argument_list pos:line="63" pos:column="58">(<argument><expr><name pos:line="63" pos:column="59">Dictionary</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="64" pos:column="13">instance</name><op:operator pos:line="64" pos:column="21">.</op:operator><name><name pos:line="64" pos:column="22">Set</name><argument_list pos:line="64" pos:column="25">&lt;<argument><name pos:line="64" pos:column="26">bool</name></argument>&gt;</argument_list></name></name><argument_list pos:line="64" pos:column="31">(<argument><expr><lit:literal type="boolean" pos:line="64" pos:column="32">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <expr_stmt><expr><call><name><name pos:line="66" pos:column="13">Assert</name><op:operator pos:line="66" pos:column="19">.</op:operator><name pos:line="66" pos:column="20">True</name></name><argument_list pos:line="66" pos:column="24">(<argument><expr><call><name><name pos:line="66" pos:column="25">instance</name><op:operator pos:line="66" pos:column="33">.</op:operator><name><name pos:line="66" pos:column="34">Get</name><argument_list pos:line="66" pos:column="37">&lt;<argument><name pos:line="66" pos:column="38">bool</name></argument>&gt;</argument_list></name></name><argument_list pos:line="66" pos:column="43">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="69" pos:column="9">[<expr><name pos:line="69" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="70" pos:column="9">public</specifier> <name pos:line="70" pos:column="16">void</name></type> <name pos:line="70" pos:column="21">SetViaKey</name><parameter_list pos:line="70" pos:column="30">()</parameter_list>
        <block pos:line="71" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="72" pos:column="13">var</name></type> <name pos:line="72" pos:column="17">instance</name> <init pos:line="72" pos:column="26">= <expr><op:operator pos:line="72" pos:column="28">new</op:operator> <call><name pos:line="72" pos:column="32">DictionaryDataStoreAdapter</name><argument_list pos:line="72" pos:column="58">(<argument><expr><name pos:line="72" pos:column="59">Dictionary</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="73" pos:column="13">var</name></type> <name pos:line="73" pos:column="17">random</name> <init pos:line="73" pos:column="24">= <expr><op:operator pos:line="73" pos:column="26">new</op:operator> <block pos:line="73" pos:column="30">{<expr><name pos:line="73" pos:column="31">Some</name> <op:operator pos:line="73" pos:column="36">=</op:operator> <lit:literal type="string" pos:line="73" pos:column="38">"Test"</lit:literal></expr>, <expr><name pos:line="73" pos:column="46">Data</name> <op:operator pos:line="73" pos:column="51">=</op:operator> <lit:literal type="number" pos:line="73" pos:column="53">5</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="75" pos:column="13">instance</name><op:operator pos:line="75" pos:column="21">.</op:operator><name pos:line="75" pos:column="22">Set</name></name><argument_list pos:line="75" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="75" pos:column="26">"random"</lit:literal></expr></argument>, <argument><expr><name pos:line="75" pos:column="36">random</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="77" pos:column="13">Assert</name><op:operator pos:line="77" pos:column="19">.</op:operator><name pos:line="77" pos:column="20">Equal</name></name><argument_list pos:line="77" pos:column="25">(<argument><expr><name pos:line="77" pos:column="26">random</name></expr></argument>, <argument><expr><call><name><name pos:line="77" pos:column="34">instance</name><op:operator pos:line="77" pos:column="42">.</op:operator><name pos:line="77" pos:column="43">Get</name></name><argument_list pos:line="77" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="77" pos:column="47">"random"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="80" pos:column="9">[<expr><name pos:line="80" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="81" pos:column="9">public</specifier> <name pos:line="81" pos:column="16">void</name></type> <name pos:line="81" pos:column="21">WorkWithStringBasedKeys</name><parameter_list pos:line="81" pos:column="44">()</parameter_list>
        <block pos:line="82" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="83" pos:column="13">var</name></type> <name pos:line="83" pos:column="17">instance</name> <init pos:line="83" pos:column="26">= <expr><op:operator pos:line="83" pos:column="28">new</op:operator> <call><name pos:line="83" pos:column="32">DictionaryDataStoreAdapter</name><argument_list pos:line="83" pos:column="58">(<argument><expr><op:operator pos:line="83" pos:column="59">new</op:operator> <call><name><name pos:line="83" pos:column="63">Dictionary</name><argument_list pos:line="83" pos:column="73">&lt;<argument><name pos:line="83" pos:column="74">string</name></argument>,<argument><name pos:line="83" pos:column="81">object</name></argument>&gt;</argument_list></name><argument_list pos:line="83" pos:column="88">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="85" pos:column="13">instance</name><op:operator pos:line="85" pos:column="21">.</op:operator><name><name pos:line="85" pos:column="22">Set</name><argument_list pos:line="85" pos:column="25">&lt;<argument><name pos:line="85" pos:column="26">int</name></argument>&gt;</argument_list></name></name><argument_list pos:line="85" pos:column="30">(<argument><expr><lit:literal type="number" pos:line="85" pos:column="31">5</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="87" pos:column="13">Assert</name><op:operator pos:line="87" pos:column="19">.</op:operator><name pos:line="87" pos:column="20">Equal</name></name><argument_list pos:line="87" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="87" pos:column="26">5</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="87" pos:column="29">instance</name><op:operator pos:line="87" pos:column="37">.</op:operator><name><name pos:line="87" pos:column="38">Get</name><argument_list pos:line="87" pos:column="41">&lt;<argument><name pos:line="87" pos:column="42">int</name></argument>&gt;</argument_list></name></name><argument_list pos:line="87" pos:column="46">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="90" pos:column="9">[<expr><name pos:line="90" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="91" pos:column="9">public</specifier> <name pos:line="91" pos:column="16">void</name></type> <name pos:line="91" pos:column="21">ThrowArgumentExceptionWithNonStringOrObjectKeyedDictionary</name><parameter_list pos:line="91" pos:column="79">()</parameter_list>
        <block pos:line="92" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="93" pos:column="13">Assert</name><op:operator pos:line="93" pos:column="19">.</op:operator><name><name pos:line="93" pos:column="20">Throws</name><argument_list pos:line="93" pos:column="26">&lt;<argument><name pos:line="93" pos:column="27">ArgumentException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="93" pos:column="45">(<argument><expr><lambda><parameter_list pos:line="93" pos:column="46">()</parameter_list><op:operator pos:line="93" pos:column="48">=&gt;</op:operator>
                                                 <block pos:line="94" pos:column="50">{
                                                     <expr_stmt><expr><op:operator pos:line="95" pos:column="54">new</op:operator> <call><name pos:line="95" pos:column="58">DictionaryDataStoreAdapter</name><argument_list pos:line="95" pos:column="84">(<argument><expr><op:operator pos:line="95" pos:column="85">new</op:operator> <call><name><name pos:line="95" pos:column="89">Dictionary</name><argument_list pos:line="95" pos:column="99">&lt;<argument><name pos:line="95" pos:column="100">int</name></argument>, <argument><name pos:line="95" pos:column="105">object</name></argument>&gt;</argument_list></name><argument_list pos:line="95" pos:column="112">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                                 }</block></lambda></expr></argument>
                )</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="100" pos:column="9">[<expr><name pos:line="100" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="101" pos:column="9">public</specifier> <name pos:line="101" pos:column="16">void</name></type> <name pos:line="101" pos:column="21">ConstructWithNonGenericDictionary</name><parameter_list pos:line="101" pos:column="54">()</parameter_list>
        <block pos:line="102" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="103" pos:column="13">var</name></type> <name pos:line="103" pos:column="17">dictionary</name> <init pos:line="103" pos:column="28">= <expr><op:operator pos:line="103" pos:column="30">new</op:operator> <call><name pos:line="103" pos:column="34">Hashtable</name><argument_list pos:line="103" pos:column="43">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="104" pos:column="13">var</name></type> <name pos:line="104" pos:column="17">instance</name> <init pos:line="104" pos:column="26">= <expr><op:operator pos:line="104" pos:column="28">new</op:operator> <call><name pos:line="104" pos:column="32">DictionaryDataStoreAdapter</name><argument_list pos:line="104" pos:column="58">(<argument><expr><name pos:line="104" pos:column="59">dictionary</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="106" pos:column="13">Assert</name><op:operator pos:line="106" pos:column="19">.</op:operator><name pos:line="106" pos:column="20">NotNull</name></name><argument_list pos:line="106" pos:column="27">(<argument><expr><name pos:line="106" pos:column="28">instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="109" pos:column="9">[<expr><name pos:line="109" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="110" pos:column="9">public</specifier> <name pos:line="110" pos:column="16">void</name></type> <name pos:line="110" pos:column="21">ThrowWithImproperInternalDictionary</name><parameter_list pos:line="110" pos:column="56">()</parameter_list>
        <block pos:line="111" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="112" pos:column="13">var</name></type> <name pos:line="112" pos:column="17">dictionary</name> <init pos:line="112" pos:column="28">= <expr><op:operator pos:line="112" pos:column="30">new</op:operator> <call><name><name pos:line="112" pos:column="34">Dictionary</name><argument_list pos:line="112" pos:column="44">&lt;<argument><name pos:line="112" pos:column="45">string</name></argument>, <argument><name pos:line="112" pos:column="53">string</name></argument>&gt;</argument_list></name><argument_list pos:line="112" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="114" pos:column="13">Assert</name><op:operator pos:line="114" pos:column="19">.</op:operator><name><name pos:line="114" pos:column="20">Throws</name><argument_list pos:line="114" pos:column="26">&lt;<argument><name pos:line="114" pos:column="27">ArgumentException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="114" pos:column="45">(<argument><expr><lambda><parameter_list pos:line="114" pos:column="46">()</parameter_list> <op:operator pos:line="114" pos:column="49">=&gt;</op:operator> <op:operator pos:line="114" pos:column="52">new</op:operator> <call><name pos:line="114" pos:column="56">DictionaryDataStoreAdapter</name><argument_list pos:line="114" pos:column="82">(<argument><expr><name pos:line="114" pos:column="83">dictionary</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="117" pos:column="9">[<expr><name pos:line="117" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="118" pos:column="9">public</specifier> <name pos:line="118" pos:column="16">void</name></type> <name pos:line="118" pos:column="21">ContainItems</name><parameter_list pos:line="118" pos:column="33">()</parameter_list>
        <block pos:line="119" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="120" pos:column="13">var</name></type> <name pos:line="120" pos:column="17">instance</name> <init pos:line="120" pos:column="26">= <expr><op:operator pos:line="120" pos:column="28">new</op:operator> <call><name pos:line="120" pos:column="32">DictionaryDataStoreAdapter</name><argument_list pos:line="120" pos:column="58">(<argument><expr><name pos:line="120" pos:column="59">Dictionary</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="121" pos:column="13">Assert</name><op:operator pos:line="121" pos:column="19">.</op:operator><name pos:line="121" pos:column="20">True</name></name><argument_list pos:line="121" pos:column="24">(<argument><expr><call><name><name pos:line="121" pos:column="25">instance</name><op:operator pos:line="121" pos:column="33">.</op:operator><name pos:line="121" pos:column="34">Contains</name></name><argument_list pos:line="121" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="121" pos:column="43">"intKey"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="124" pos:column="9">[<expr><name pos:line="124" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="125" pos:column="9">public</specifier> <name pos:line="125" pos:column="16">void</name></type> <name pos:line="125" pos:column="21">NotContainItems</name><parameter_list pos:line="125" pos:column="36">()</parameter_list>
        <block pos:line="126" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="127" pos:column="13">var</name></type> <name pos:line="127" pos:column="17">instance</name> <init pos:line="127" pos:column="26">= <expr><op:operator pos:line="127" pos:column="28">new</op:operator> <call><name pos:line="127" pos:column="32">DictionaryDataStoreAdapter</name><argument_list pos:line="127" pos:column="58">(<argument><expr><name pos:line="127" pos:column="59">Dictionary</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="128" pos:column="13">Assert</name><op:operator pos:line="128" pos:column="19">.</op:operator><name pos:line="128" pos:column="20">False</name></name><argument_list pos:line="128" pos:column="25">(<argument><expr><call><name><name pos:line="128" pos:column="26">instance</name><op:operator pos:line="128" pos:column="34">.</op:operator><name pos:line="128" pos:column="35">Contains</name></name><argument_list pos:line="128" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="128" pos:column="44">"random string"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="131" pos:column="9">[<expr><name pos:line="131" pos:column="10">Fact</name></expr>]</attribute>
        <specifier pos:line="132" pos:column="9">public</specifier> <name pos:line="132" pos:column="16">void</name></type> <name pos:line="132" pos:column="21">ThrowExceptionWhenConstructedWithNullDictionary</name><parameter_list pos:line="132" pos:column="68">()</parameter_list>
        <block pos:line="133" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="134" pos:column="13">Assert</name><op:operator pos:line="134" pos:column="19">.</op:operator><name><name pos:line="134" pos:column="20">Throws</name><argument_list pos:line="134" pos:column="26">&lt;<argument><name pos:line="134" pos:column="27">ArgumentException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="134" pos:column="45">(<argument><expr><lambda><parameter_list pos:line="134" pos:column="46">()</parameter_list><op:operator pos:line="134" pos:column="48">=&gt;</op:operator><op:operator pos:line="134" pos:column="50">new</op:operator> <call><name pos:line="134" pos:column="54">DictionaryDataStoreAdapter</name><argument_list pos:line="134" pos:column="80">(<argument><expr><name pos:line="134" pos:column="81">null</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
