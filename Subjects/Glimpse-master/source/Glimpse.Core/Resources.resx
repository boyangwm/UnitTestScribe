<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="EndRequestOutOfOrderRuntimeMethodCall" xml:space="preserve">
    <value>BeginRequest method has not been called in the context of the current HTTP request. Calls to EndRequest must be preceded by calls to BeginRequest.</value>
  </data>
  <data name="ExecuteTabError" xml:space="preserve">
    <value>Exception executing tab of type '{0}'.</value>
    <comment>{0} - GetType() of offending tab</comment>
  </data>
  <data name="InitializeInspectorError" xml:space="preserve">
    <value>Exception initializing inspector of type '{0}'.</value>
    <comment>{0} - GetType() of offending Inspector</comment>
  </data>
  <data name="InitializeTabError" xml:space="preserve">
    <value>Exception initializing tab of type '{0}'.</value>
    <comment>{0} - GetType() of offending tab</comment>
  </data>
  <data name="ExecuteResourceMissingError" xml:space="preserve">
    <value>Resource with name '{0}' could not be found.</value>
    <comment>{0} - Resource name</comment>
  </data>
  <data name="ExecuteResourceDuplicateError" xml:space="preserve">
    <value>Ambiguous resource with name '{0}' found.</value>
    <comment>{0} - Resource name</comment>
  </data>
  <data name="ExecutePolicyWarning" xml:space="preserve">
    <value>Exception executing policy of type '{0}'.</value>
    <comment>{0} - this.GetType() of offending policy</comment>
  </data>
  <data name="RenderClientScriptImproperImplementationWarning" xml:space="preserve">
    <value>Unable to render IClientScript: '{0}'. All IClientScript implementations should also implement either IStaticClientScript or IDynamicClientScript.</value>
    <comment>{0} - GetType() of IClientScript</comment>
  </data>
  <data name="RenderClientScriptMissingResourceWarning" xml:space="preserve">
    <value>Unable to render IClientScript: '{0}'. No IResource with the Name '{1}' could be found.</value>
    <comment>{0} - GetType() of IClientScript, {1} - Name of missing IResource</comment>
  </data>
  <data name="GenerateUriParameterKeysWarning" xml:space="preserve">
    <value>Exception getting Parameters for IResource of type '{0}'.</value>
    <comment>{0} - GetType() of offending resource</comment>
  </data>
  <data name="GenerateUriExecutionError" xml:space="preserve">
    <value>Exception generating uri with ResourceEndpointConfiguration of type '{0}'.</value>
    <comment>{0} - GetType() of offending ResourceEndpointConfiguration</comment>
  </data>
  <data name="DiscoverLoadAssembly" xml:space="preserve">
    <value>Exception loading assembly at path '{0}'.</value>
    <comment>{0} - path of offending assembly</comment>
  </data>
  <data name="DiscoverCreateInstance" xml:space="preserve">
    <value>Exception loading '{0}' of type '{1}'.</value>
    <comment>{0} - Interface type, {1} - InstanceType</comment>
  </data>
  <data name="SetDiscoveryLocationDirectoryNotFoundMessage" xml:space="preserve">
    <value>The input value '{0}' creates path '{1}', which does not exist.</value>
    <comment>{0} - value input to setter, {1} - missing path</comment>
  </data>
  <data name="InstantiateFrameworkProviderException" xml:space="preserve">
    <value>Unable to instantiate Framework Provider from IServiceLocator: '{0}' or '{1}'.</value>
    <comment>{0} - GetType() of UserServiceLocator, or friendly message if null, {1} - GetType() of ProviderServiceLocator, or friendly message if null</comment>
  </data>
  <data name="InstantiateResourceEndpointConfigurationException" xml:space="preserve">
    <value>Unable to instantiate Resource Endpoint Configuration from IServiceLocator: '{0}' or '{1}'.</value>
    <comment>{0} - GetType() of UserServiceLocator, or friendly message if null, {1} - GetType() of ProviderServiceLocator, or friendly message if null</comment>
  </data>
  <data name="BeginRequestOutOfOrderRuntimeMethodCall" xml:space="preserve">
    <value>Initialize method has not been called in the context on the current Glimpse runtime instance. Calls to BeginRequest must be preceded by calls to Initialize.</value>
  </data>
  <data name="GenerateScriptTagsDynamicException" xml:space="preserve">
    <value>Exception generating script tag for dynamic IClientScript of type '{0}'.</value>
    <comment>{0} - GetType() of offending IClientScript</comment>
  </data>
  <data name="GenerateScriptTagsStaticException" xml:space="preserve">
    <value>Exception generating script tag for static IClientScript of type '{0}'.</value>
  </data>
  <data name="DiscoverableCollectionAdd" xml:space="preserve">
    <value>Added {0} of type '{1}' to collection.</value>
    <comment>{0} - typeof(T).Name of collection generic argument, {1} = GetType() of item added to collection.</comment>
  </data>
  <data name="DiscoverableCollectionClear" xml:space="preserve">
    <value>Cleared {0} collection.</value>
    <comment>{0} - typeof(T).Name of collection generic argument</comment>
  </data>
  <data name="DiscoverableCollectionRemove" xml:space="preserve">
    <value>Removed {0} of type '{1}' from collection.</value>
    <comment>{0} - typeof(T).Name of collection generic argument, {1} = GetType() of item removed from collection.</comment>
  </data>
  <data name="DiscoverableCollectionDiscover" xml:space="preserve">
    <value>Discovered {0} of type '{1}' and added it to collection.</value>
  </data>
  <data name="ExecuteResourceInsufficientPolicy" xml:space="preserve">
    <value>Runtime policy does not allow execution of resource named '{0}'.</value>
  </data>
  <data name="GlimpseRuntimeInitializeSetupInspector" xml:space="preserve">
    <value>Setup IInspector of type '{0}'.</value>
    <comment>{0} - GetType() of IInspector</comment>
  </data>
  <data name="AlternateTypeGenerationHookMethodsInspected" xml:space="preserve">
    <value>Methods inspected via proxy generation hook on type '{0}'.</value>
    <comment>{0} - typeof(T)</comment>
  </data>
  <data name="AlternateTypeGenerationHookNonProxyableMemberNotification" xml:space="preserve">
    <value>{0} method of type '{1}' is not proxyable.</value>
    <comment>{0} - .Name of MemberInfo, {1} - Proxy Type</comment>
  </data>
  <data name="MessageBrokerSubscribe" xml:space="preserve">
    <value>Method '{0}' on type '{1}' has been subscribed to all '{2}' messages.</value>
    <comment>{0} - the method name, {1} = the method's declaring type, {2} = the message type</comment>
  </data>
  <data name="GlimpseRuntimeEndRequesPersistError" xml:space="preserve">
    <value>Could not persist metadata with IPersistenceStore of type '{0}'.</value>
    <comment>{0} - GetType() of persistence store</comment>
  </data>
  <data name="GlimpseRuntimeExecuteResourceError" xml:space="preserve">
    <value>Error executing IResource '{0}'.</value>
    <comment>{0} - name of IResource</comment>
  </data>
  <data name="GlimpseRuntimeExecuteResourceResultError" xml:space="preserve">
    <value>Error executing resource result of type '{0}'.</value>
    <comment>{0} - GetType() of errant ResourceResult</comment>
  </data>
  <data name="GlimpseRuntimePersistMetadataMultipleResourceWarning" xml:space="preserve">
    <value>Multiple Resources with name of '{0}'. Resources should have unique names.</value>
    <comment>{0} - The name of ambiguous resource.</comment>
  </data>
  <data name="DiscoverGetType" xml:space="preserve">
    <value>Failed to load type when getting types from assembly '{0}'</value>
    <comment>{0} - Assembly.FullName</comment>
  </data>
  <data name="PrivilegedResourceExecuteNotSupported" xml:space="preserve">
    <value>Invalid privileged resource execution on '{0}'. Call overload Execute(IResourceContext, IGlimpseConfiguration) instead.</value>
    <comment>{0} - GetType() of offending resource</comment>
  </data>
</root>