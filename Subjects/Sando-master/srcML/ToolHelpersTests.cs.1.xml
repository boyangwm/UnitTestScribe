<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Core\Core.UnitTests\Tools\ToolHelpersTests.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Text</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">NUnit</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">Framework</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Sando</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">Core</name><op:operator pos:line="6" pos:column="17">.</op:operator><name pos:line="6" pos:column="18">Tools</name></name>;</using>

<namespace pos:line="8" pos:column="1">namespace <name><name pos:line="8" pos:column="11">Sando</name><op:operator pos:line="8" pos:column="16">.</op:operator><name pos:line="8" pos:column="17">Core</name><op:operator pos:line="8" pos:column="21">.</op:operator><name pos:line="8" pos:column="22">UnitTests</name><op:operator pos:line="8" pos:column="31">.</op:operator><name pos:line="8" pos:column="32">Tools</name></name>
<block pos:line="9" pos:column="1">{
    <class><attribute pos:line="10" pos:column="5">[<expr><name pos:line="10" pos:column="6">TestFixture</name></expr>]</attribute>
    <specifier pos:line="11" pos:column="5">public</specifier> class <name pos:line="11" pos:column="18">ToolHelpersTests</name>
    <block pos:line="12" pos:column="5">{
        <class><specifier pos:line="13" pos:column="9">private</specifier> class <name pos:line="13" pos:column="23">Data</name>
        <block pos:line="14" pos:column="9">{
            <constructor><specifier pos:line="15" pos:column="13">internal</specifier> <name pos:line="15" pos:column="22">Data</name><parameter_list pos:line="15" pos:column="26">(<param><decl><type><name pos:line="15" pos:column="27">string</name></type> <name pos:line="15" pos:column="34">text</name></decl></param>, <param><decl><type><name pos:line="15" pos:column="40">int</name></type> <name pos:line="15" pos:column="44">iNumber</name></decl></param>, <param><decl><type><name pos:line="15" pos:column="53">float</name></type> <name pos:line="15" pos:column="59">fNumber</name></decl></param>)</parameter_list>
            <block pos:line="16" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="17" pos:column="17">this</name><op:operator pos:line="17" pos:column="21">.</op:operator><name pos:line="17" pos:column="22">text</name></name> <op:operator pos:line="17" pos:column="27">=</op:operator> <name pos:line="17" pos:column="29">text</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="18" pos:column="17">this</name><op:operator pos:line="18" pos:column="21">.</op:operator><name pos:line="18" pos:column="22">iNumber</name></name> <op:operator pos:line="18" pos:column="30">=</op:operator> <name pos:line="18" pos:column="32">iNumber</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="19" pos:column="17">this</name><op:operator pos:line="19" pos:column="21">.</op:operator><name pos:line="19" pos:column="22">fNumber</name></name> <op:operator pos:line="19" pos:column="30">=</op:operator> <name pos:line="19" pos:column="32">fNumber</name></expr>;</expr_stmt>
            }</block></constructor>
            <decl_stmt><decl><type><specifier pos:line="21" pos:column="13">public</specifier> <name pos:line="21" pos:column="20">string</name></type> <name pos:line="21" pos:column="27">text</name> <block pos:line="21" pos:column="32">{ <function_decl><name pos:line="21" pos:column="34">get</name>;</function_decl> <function_decl><specifier pos:line="21" pos:column="39">private</specifier> <name pos:line="21" pos:column="47">set</name>;</function_decl> }</block></decl></decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="22" pos:column="13">public</specifier> <name pos:line="22" pos:column="20">int</name></type> <name pos:line="22" pos:column="24">iNumber</name> <block pos:line="22" pos:column="32">{ <function_decl><name pos:line="22" pos:column="34">get</name>;</function_decl> <function_decl><specifier pos:line="22" pos:column="39">private</specifier> <name pos:line="22" pos:column="47">set</name>;</function_decl> }</block></decl></decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="23" pos:column="13">public</specifier> <name pos:line="23" pos:column="20">float</name></type> <name pos:line="23" pos:column="26">fNumber</name> <block pos:line="23" pos:column="34">{ <function_decl><name pos:line="23" pos:column="36">get</name>;</function_decl> <function_decl><specifier pos:line="23" pos:column="41">private</specifier> <name pos:line="23" pos:column="49">set</name>;</function_decl> }</block></decl></decl_stmt>
        }</block></class>

        <function><type><attribute pos:line="26" pos:column="9">[<expr><name pos:line="26" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="27" pos:column="9">public</specifier> <name pos:line="27" pos:column="16">void</name></type> <name pos:line="27" pos:column="21">TestDistinctBy</name><parameter_list pos:line="27" pos:column="35">()</parameter_list>
        <block pos:line="28" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="29" pos:column="13">var</name></type> <name pos:line="29" pos:column="17">d1</name> <init pos:line="29" pos:column="20">= <expr><op:operator pos:line="29" pos:column="22">new</op:operator> <call><name pos:line="29" pos:column="26">Data</name><argument_list pos:line="29" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="29" pos:column="31">"a"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="29" pos:column="36">2</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="29" pos:column="39">2.3f</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="30" pos:column="13">var</name></type> <name pos:line="30" pos:column="17">d2</name> <init pos:line="30" pos:column="20">= <expr><op:operator pos:line="30" pos:column="22">new</op:operator> <call><name pos:line="30" pos:column="26">Data</name><argument_list pos:line="30" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="30" pos:column="31">"a"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="30" pos:column="36">3</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="30" pos:column="39">3.4f</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="31" pos:column="13">var</name></type> <name pos:line="31" pos:column="17">d3</name> <init pos:line="31" pos:column="20">= <expr><op:operator pos:line="31" pos:column="22">new</op:operator> <call><name pos:line="31" pos:column="26">Data</name><argument_list pos:line="31" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="31" pos:column="31">"a"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="31" pos:column="36">4</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="31" pos:column="39">1.1f</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="32" pos:column="13">var</name></type> <name pos:line="32" pos:column="17">list</name> <init pos:line="32" pos:column="22">= <expr><op:operator pos:line="32" pos:column="24">new</op:operator><index pos:line="32" pos:column="27">[]</index> <block pos:line="32" pos:column="30">{<expr><name pos:line="32" pos:column="31">d1</name></expr>, <expr><name pos:line="32" pos:column="35">d2</name></expr>, <expr><name pos:line="32" pos:column="39">d3</name></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="33" pos:column="13">list</name> <op:operator pos:line="33" pos:column="18">=</op:operator> <call><name><name pos:line="33" pos:column="20">list</name><op:operator pos:line="33" pos:column="24">.</op:operator><name pos:line="33" pos:column="25">DistinctBy</name></name><argument_list pos:line="33" pos:column="35">(<argument><expr><lambda><name pos:line="33" pos:column="36">d</name> <op:operator pos:line="33" pos:column="38">=&gt;</op:operator> <name><name pos:line="33" pos:column="41">d</name><op:operator pos:line="33" pos:column="42">.</op:operator><name pos:line="33" pos:column="43">text</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="33" pos:column="48">.</op:operator><call><name pos:line="33" pos:column="49">ToArray</name><argument_list pos:line="33" pos:column="56">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="34" pos:column="13">Assert</name><op:operator pos:line="34" pos:column="19">.</op:operator><name pos:line="34" pos:column="20">IsTrue</name></name><argument_list pos:line="34" pos:column="26">(<argument><expr><call><name><name pos:line="34" pos:column="27">list</name><op:operator pos:line="34" pos:column="31">.</op:operator><name pos:line="34" pos:column="32">Count</name></name><argument_list pos:line="34" pos:column="37">()</argument_list></call> <op:operator pos:line="34" pos:column="40">==</op:operator> <lit:literal type="number" pos:line="34" pos:column="43">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="36" pos:column="13">d1</name> <op:operator pos:line="36" pos:column="16">=</op:operator> <op:operator pos:line="36" pos:column="18">new</op:operator> <call><name pos:line="36" pos:column="22">Data</name><argument_list pos:line="36" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="36" pos:column="27">"a"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="36" pos:column="32">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="36" pos:column="35">3.2f</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="37" pos:column="13">d2</name> <op:operator pos:line="37" pos:column="16">=</op:operator> <op:operator pos:line="37" pos:column="18">new</op:operator> <call><name pos:line="37" pos:column="22">Data</name><argument_list pos:line="37" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="37" pos:column="27">"b"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="37" pos:column="32">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="37" pos:column="35">2.2f</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="38" pos:column="13">d3</name> <op:operator pos:line="38" pos:column="16">=</op:operator> <op:operator pos:line="38" pos:column="18">new</op:operator> <call><name pos:line="38" pos:column="22">Data</name><argument_list pos:line="38" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="38" pos:column="27">"c"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="38" pos:column="32">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="38" pos:column="35">12.2f</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="39" pos:column="13">list</name> <op:operator pos:line="39" pos:column="18">=</op:operator> <op:operator pos:line="39" pos:column="20">new</op:operator><index pos:line="39" pos:column="23">[]</index> <block pos:line="39" pos:column="26">{<expr><name pos:line="39" pos:column="27">d1</name></expr><op:operator pos:line="39" pos:column="29">,</op:operator> <expr><name pos:line="39" pos:column="31">d2</name></expr><op:operator pos:line="39" pos:column="33">,</op:operator> <expr><name pos:line="39" pos:column="35">d3</name></expr>}</block></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="40" pos:column="13">list</name> <op:operator pos:line="40" pos:column="18">=</op:operator> <call><name><name pos:line="40" pos:column="20">list</name><op:operator pos:line="40" pos:column="24">.</op:operator><name pos:line="40" pos:column="25">DistinctBy</name></name><argument_list pos:line="40" pos:column="35">(<argument><expr><lambda><name pos:line="40" pos:column="36">d</name> <op:operator pos:line="40" pos:column="38">=&gt;</op:operator> <name><name pos:line="40" pos:column="41">d</name><op:operator pos:line="40" pos:column="42">.</op:operator><name pos:line="40" pos:column="43">iNumber</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="40" pos:column="51">.</op:operator><call><name pos:line="40" pos:column="52">ToArray</name><argument_list pos:line="40" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="41" pos:column="13">Assert</name><op:operator pos:line="41" pos:column="19">.</op:operator><name pos:line="41" pos:column="20">IsTrue</name></name><argument_list pos:line="41" pos:column="26">(<argument><expr><name><name pos:line="41" pos:column="27">list</name><op:operator pos:line="41" pos:column="31">.</op:operator><name pos:line="41" pos:column="32">Length</name></name> <op:operator pos:line="41" pos:column="39">==</op:operator> <lit:literal type="number" pos:line="41" pos:column="42">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="43" pos:column="13">d1</name> <op:operator pos:line="43" pos:column="16">=</op:operator> <op:operator pos:line="43" pos:column="18">new</op:operator> <call><name pos:line="43" pos:column="22">Data</name><argument_list pos:line="43" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="43" pos:column="27">"a"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="43" pos:column="32">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="43" pos:column="35">3.2f</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="44" pos:column="13">d2</name> <op:operator pos:line="44" pos:column="16">=</op:operator> <op:operator pos:line="44" pos:column="18">new</op:operator> <call><name pos:line="44" pos:column="22">Data</name><argument_list pos:line="44" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="44" pos:column="27">"b"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="44" pos:column="32">2</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="44" pos:column="35">2.2f</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="45" pos:column="13">d3</name> <op:operator pos:line="45" pos:column="16">=</op:operator> <op:operator pos:line="45" pos:column="18">new</op:operator> <call><name pos:line="45" pos:column="22">Data</name><argument_list pos:line="45" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="45" pos:column="27">"c"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="45" pos:column="32">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="45" pos:column="35">12.2f</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="46" pos:column="13">list</name> <op:operator pos:line="46" pos:column="18">=</op:operator> <op:operator pos:line="46" pos:column="20">new</op:operator><index pos:line="46" pos:column="23">[]</index> <block pos:line="46" pos:column="26">{ <expr><name pos:line="46" pos:column="28">d1</name></expr><op:operator pos:line="46" pos:column="30">,</op:operator> <expr><name pos:line="46" pos:column="32">d2</name></expr><op:operator pos:line="46" pos:column="34">,</op:operator> <expr><name pos:line="46" pos:column="36">d3</name></expr> }</block></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="47" pos:column="13">list</name> <op:operator pos:line="47" pos:column="18">=</op:operator> <call><name><name pos:line="47" pos:column="20">list</name><op:operator pos:line="47" pos:column="24">.</op:operator><name pos:line="47" pos:column="25">DistinctBy</name></name><argument_list pos:line="47" pos:column="35">(<argument><expr><lambda><name pos:line="47" pos:column="36">d</name> <op:operator pos:line="47" pos:column="38">=&gt;</op:operator> <name><name pos:line="47" pos:column="41">d</name><op:operator pos:line="47" pos:column="42">.</op:operator><name pos:line="47" pos:column="43">iNumber</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="47" pos:column="51">.</op:operator><call><name pos:line="47" pos:column="52">ToArray</name><argument_list pos:line="47" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="48" pos:column="13">Assert</name><op:operator pos:line="48" pos:column="19">.</op:operator><name pos:line="48" pos:column="20">IsTrue</name></name><argument_list pos:line="48" pos:column="26">(<argument><expr><name><name pos:line="48" pos:column="27">list</name><op:operator pos:line="48" pos:column="31">.</op:operator><name pos:line="48" pos:column="32">Length</name></name> <op:operator pos:line="48" pos:column="39">==</op:operator> <lit:literal type="number" pos:line="48" pos:column="42">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
