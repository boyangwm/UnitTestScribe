<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Core\Core.UnitTests\Tools\LocalDictionaryTests.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Diagnostics</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">IO</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Linq</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">System</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">Text</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">System</name><op:operator pos:line="7" pos:column="13">.</op:operator><name pos:line="7" pos:column="14">Threading</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">NUnit</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">Framework</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">Sando</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">Core</name><op:operator pos:line="9" pos:column="17">.</op:operator><name pos:line="9" pos:column="18">Tools</name></name>;</using>

<namespace pos:line="11" pos:column="1">namespace <name><name pos:line="11" pos:column="11">Sando</name><op:operator pos:line="11" pos:column="16">.</op:operator><name pos:line="11" pos:column="17">Core</name><op:operator pos:line="11" pos:column="21">.</op:operator><name pos:line="11" pos:column="22">UnitTests</name><op:operator pos:line="11" pos:column="31">.</op:operator><name pos:line="11" pos:column="32">Tools</name></name>
<block pos:line="12" pos:column="1">{
    <class><attribute pos:line="13" pos:column="5">[<expr><name pos:line="13" pos:column="6">TestFixture</name></expr>]</attribute>
    class <name pos:line="14" pos:column="11">LocalDictionaryTests</name> <super pos:line="14" pos:column="32">: <name pos:line="14" pos:column="34">RandomStringBasedTests</name></super>
    <block pos:line="15" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="16" pos:column="9">private</specifier> <specifier pos:line="16" pos:column="17">const</specifier> <name pos:line="16" pos:column="23">string</name></type> <name pos:line="16" pos:column="30">tempFolder</name> <init pos:line="16" pos:column="41">= <expr><lit:literal type="string" pos:line="16" pos:column="43">@"C:\Windows\Temp\Dictionary\"</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="17" pos:column="9">private</specifier> <name pos:line="17" pos:column="17">DictionaryBasedSplitter</name></type> <name pos:line="17" pos:column="41">_dictionaryBasedSplitter</name></decl>;</decl_stmt>
    
        <function><type><attribute pos:line="19" pos:column="9">[<expr><name pos:line="19" pos:column="10">SetUp</name></expr>]</attribute>
        <specifier pos:line="20" pos:column="9">public</specifier> <name pos:line="20" pos:column="16">void</name></type> <name pos:line="20" pos:column="21">SetUp</name><parameter_list pos:line="20" pos:column="26">()</parameter_list>
        <block pos:line="21" pos:column="9">{
            <expr_stmt><expr><name><name pos:line="22" pos:column="13">this</name><op:operator pos:line="22" pos:column="17">.</op:operator><name pos:line="22" pos:column="18">_dictionaryBasedSplitter</name></name> <op:operator pos:line="22" pos:column="43">=</op:operator> <op:operator pos:line="22" pos:column="45">new</op:operator> <call><name pos:line="22" pos:column="49">DictionaryBasedSplitter</name><argument_list pos:line="22" pos:column="72">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="23" pos:column="13">CreateDirectory</name><argument_list pos:line="23" pos:column="28">(<argument><expr><name pos:line="23" pos:column="29">tempFolder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="24" pos:column="13">_dictionaryBasedSplitter</name><op:operator pos:line="24" pos:column="37">.</op:operator><name pos:line="24" pos:column="38">Initialize</name></name><argument_list pos:line="24" pos:column="48">(<argument><expr><name pos:line="24" pos:column="49">tempFolder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="27" pos:column="9">[<expr><name pos:line="27" pos:column="10">TearDown</name></expr>]</attribute>
        <specifier pos:line="28" pos:column="9">public</specifier> <name pos:line="28" pos:column="16">void</name></type> <name pos:line="28" pos:column="21">Disposing</name><parameter_list pos:line="28" pos:column="30">()</parameter_list>
        <block pos:line="29" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="30" pos:column="13">_dictionaryBasedSplitter</name><op:operator pos:line="30" pos:column="37">.</op:operator><name pos:line="30" pos:column="38">Dispose</name></name><argument_list pos:line="30" pos:column="45">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="31" pos:column="13">DeleteCreatedFile</name><argument_list pos:line="31" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>


        <function><type><attribute pos:line="35" pos:column="9">[<expr><name pos:line="35" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="36" pos:column="9">public</specifier> <name pos:line="36" pos:column="16">void</name></type> <name pos:line="36" pos:column="21">GetStemmedWord</name><parameter_list pos:line="36" pos:column="35">()</parameter_list>
        <block pos:line="37" pos:column="9">{
            <for pos:line="38" pos:column="13">for (<init><decl><type><name pos:line="38" pos:column="18">int</name></type> <name pos:line="38" pos:column="22">i</name> <init pos:line="38" pos:column="24">= <expr><lit:literal type="number" pos:line="38" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="38" pos:column="29">i</name> <op:operator pos:line="38" pos:column="31">&lt;</op:operator> <lit:literal type="number" pos:line="38" pos:column="33">1000</lit:literal></expr>;</condition> <incr><expr><name pos:line="38" pos:column="39">i</name> <op:operator pos:line="38" pos:column="41">++</op:operator></expr></incr>)
            <block pos:line="39" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="40" pos:column="17">string</name></type> <name pos:line="40" pos:column="24">word</name> <init pos:line="40" pos:column="29">= <expr><lit:literal type="string" pos:line="40" pos:column="31">"adding"</lit:literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="41" pos:column="17">var</name></type> <name pos:line="41" pos:column="21">stemmedWord</name> <init pos:line="41" pos:column="33">= <expr><call><name><name pos:line="41" pos:column="35">DictionaryHelper</name><op:operator pos:line="41" pos:column="51">.</op:operator><name pos:line="41" pos:column="52">GetStemmedQuery</name></name><argument_list pos:line="41" pos:column="67">(<argument><expr><name pos:line="41" pos:column="68">word</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="42" pos:column="17">Assert</name><op:operator pos:line="42" pos:column="23">.</op:operator><name pos:line="42" pos:column="24">IsTrue</name></name><argument_list pos:line="42" pos:column="30">(<argument><expr><call><name><name pos:line="42" pos:column="31">stemmedWord</name><op:operator pos:line="42" pos:column="42">.</op:operator><name pos:line="42" pos:column="43">Equals</name></name><argument_list pos:line="42" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="42" pos:column="50">"ad"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="43" pos:column="17">word</name> <op:operator pos:line="43" pos:column="22">=</op:operator> <lit:literal type="string" pos:line="43" pos:column="24">"add"</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="44" pos:column="17">stemmedWord</name> <op:operator pos:line="44" pos:column="29">=</op:operator> <call><name><name pos:line="44" pos:column="31">DictionaryHelper</name><op:operator pos:line="44" pos:column="47">.</op:operator><name pos:line="44" pos:column="48">GetStemmedQuery</name></name><argument_list pos:line="44" pos:column="63">(<argument><expr><name pos:line="44" pos:column="64">word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="45" pos:column="17">Assert</name><op:operator pos:line="45" pos:column="23">.</op:operator><name pos:line="45" pos:column="24">IsTrue</name></name><argument_list pos:line="45" pos:column="30">(<argument><expr><call><name><name pos:line="45" pos:column="31">stemmedWord</name><op:operator pos:line="45" pos:column="42">.</op:operator><name pos:line="45" pos:column="43">Equals</name></name><argument_list pos:line="45" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="45" pos:column="50">"add"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></function>


        <function><type><attribute pos:line="50" pos:column="9">[<expr><name pos:line="50" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="51" pos:column="9">public</specifier> <name pos:line="51" pos:column="16">void</name></type> <name pos:line="51" pos:column="21">MakeSureCanNotAddShortWords</name><parameter_list pos:line="51" pos:column="48">()</parameter_list>
        <block pos:line="52" pos:column="9">{
            <for pos:line="53" pos:column="13">for (<init><decl><type><name pos:line="53" pos:column="18">int</name></type> <name pos:line="53" pos:column="22">i</name> <init pos:line="53" pos:column="24">= <expr><lit:literal type="number" pos:line="53" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="53" pos:column="29">i</name> <op:operator pos:line="53" pos:column="31">&lt;</op:operator> <lit:literal type="number" pos:line="53" pos:column="33">100</lit:literal></expr>;</condition> <incr><expr><name pos:line="53" pos:column="38">i</name><op:operator pos:line="53" pos:column="39">++</op:operator></expr></incr>)
            <block pos:line="54" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="55" pos:column="17">var</name></type> <name pos:line="55" pos:column="21">word</name> <init pos:line="55" pos:column="26">= <expr><call><name pos:line="55" pos:column="28">GenerateRandomString</name><argument_list pos:line="55" pos:column="48">(<argument><expr><lit:literal type="number" pos:line="55" pos:column="49">2</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="56" pos:column="17">_dictionaryBasedSplitter</name><op:operator pos:line="56" pos:column="41">.</op:operator><name pos:line="56" pos:column="42">AddWords</name></name><argument_list pos:line="56" pos:column="50">(<argument><expr><op:operator pos:line="56" pos:column="51">new</op:operator><index pos:line="56" pos:column="54">[]</index> <block pos:line="56" pos:column="57">{ <expr><name pos:line="56" pos:column="59">word</name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="57" pos:column="17">Assert</name><op:operator pos:line="57" pos:column="23">.</op:operator><name pos:line="57" pos:column="24">IsTrue</name></name><argument_list pos:line="57" pos:column="30">(<argument><expr><op:operator pos:line="57" pos:column="31">!</op:operator><call><name><name pos:line="57" pos:column="32">_dictionaryBasedSplitter</name><op:operator pos:line="57" pos:column="56">.</op:operator><name pos:line="57" pos:column="57">DoesWordExist</name></name><argument_list pos:line="57" pos:column="70">(<argument><expr><name pos:line="57" pos:column="71">word</name></expr></argument>, 
                    <argument><expr><name><name pos:line="58" pos:column="21">DictionaryOption</name><op:operator pos:line="58" pos:column="37">.</op:operator><name pos:line="58" pos:column="38">NoStemming</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></function>

        <function><type><attribute pos:line="62" pos:column="9">[<expr><name pos:line="62" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="63" pos:column="9">public</specifier> <name pos:line="63" pos:column="16">void</name></type> <name pos:line="63" pos:column="21">AddSeveralWords</name><parameter_list pos:line="63" pos:column="36">()</parameter_list>
        <block pos:line="64" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="65" pos:column="13">const</specifier> <name pos:line="65" pos:column="19">string</name></type> <name pos:line="65" pos:column="26">alpha</name> <init pos:line="65" pos:column="32">= <expr><lit:literal type="string" pos:line="65" pos:column="34">"abcdefghijklmnopqrstuvwxwz"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="66" pos:column="13">const</specifier> <name pos:line="66" pos:column="19">int</name></type> <name pos:line="66" pos:column="23">length</name> <init pos:line="66" pos:column="30">= <expr><lit:literal type="number" pos:line="66" pos:column="32">3</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="67" pos:column="13">var</name></type> <name pos:line="67" pos:column="17">words</name> <init pos:line="67" pos:column="23">= <expr><op:operator pos:line="67" pos:column="25">new</op:operator> <call><name><name pos:line="67" pos:column="29">List</name><argument_list pos:line="67" pos:column="33">&lt;<argument><name pos:line="67" pos:column="34">String</name></argument>&gt;</argument_list></name><argument_list pos:line="67" pos:column="41">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <for pos:line="69" pos:column="13">for (<init><decl><type><name pos:line="69" pos:column="18">int</name></type> <name pos:line="69" pos:column="22">i</name> <init pos:line="69" pos:column="24">= <expr><lit:literal type="number" pos:line="69" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="69" pos:column="29">i</name> <op:operator pos:line="69" pos:column="31">&lt;=</op:operator> <lit:literal type="number" pos:line="69" pos:column="34">26</lit:literal> <op:operator pos:line="69" pos:column="37">-</op:operator> <name pos:line="69" pos:column="39">length</name></expr>;</condition> <incr><expr><name pos:line="69" pos:column="47">i</name><op:operator pos:line="69" pos:column="48">++</op:operator></expr></incr>)
            <block pos:line="70" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="71" pos:column="17">words</name><op:operator pos:line="71" pos:column="22">.</op:operator><name pos:line="71" pos:column="23">Add</name></name><argument_list pos:line="71" pos:column="26">(<argument><expr><call><name><name pos:line="71" pos:column="27">alpha</name><op:operator pos:line="71" pos:column="32">.</op:operator><name pos:line="71" pos:column="33">Substring</name></name><argument_list pos:line="71" pos:column="42">(<argument><expr><name pos:line="71" pos:column="43">i</name></expr></argument>, <argument><expr><name pos:line="71" pos:column="46">length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><call><name><name pos:line="73" pos:column="13">this</name><op:operator pos:line="73" pos:column="17">.</op:operator><name pos:line="73" pos:column="18">_dictionaryBasedSplitter</name><op:operator pos:line="73" pos:column="42">.</op:operator><name pos:line="73" pos:column="43">AddWords</name></name><argument_list pos:line="73" pos:column="51">(<argument><expr><name pos:line="73" pos:column="52">words</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <foreach pos:line="74" pos:column="13">foreach (<init><decl><type><name pos:line="74" pos:column="22">string</name></type> <name pos:line="74" pos:column="29">word</name> <range pos:line="74" pos:column="34">in <expr><name pos:line="74" pos:column="37">words</name></expr></range></decl></init>)
            <block pos:line="75" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="76" pos:column="17">Assert</name><op:operator pos:line="76" pos:column="23">.</op:operator><name pos:line="76" pos:column="24">IsTrue</name></name><argument_list pos:line="76" pos:column="30">(<argument><expr><call><name><name pos:line="76" pos:column="31">this</name><op:operator pos:line="76" pos:column="35">.</op:operator><name pos:line="76" pos:column="36">_dictionaryBasedSplitter</name><op:operator pos:line="76" pos:column="60">.</op:operator><name pos:line="76" pos:column="61">DoesWordExist</name></name><argument_list pos:line="76" pos:column="74">(<argument><expr><name pos:line="76" pos:column="75">word</name></expr></argument>, 
                    <argument><expr><name><name pos:line="77" pos:column="21">DictionaryOption</name><op:operator pos:line="77" pos:column="37">.</op:operator><name pos:line="77" pos:column="38">NoStemming</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>

        <function><type><attribute pos:line="81" pos:column="9">[<expr><name pos:line="81" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="82" pos:column="9">public</specifier> <name pos:line="82" pos:column="16">void</name></type> <name pos:line="82" pos:column="21">AddManyWords</name><parameter_list pos:line="82" pos:column="33">()</parameter_list>
        <block pos:line="83" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="84" pos:column="13">var</name></type> <name pos:line="84" pos:column="17">words</name> <init pos:line="84" pos:column="23">= <expr><op:operator pos:line="84" pos:column="25">new</op:operator> <call><name><name pos:line="84" pos:column="29">List</name><argument_list pos:line="84" pos:column="33">&lt;<argument><name pos:line="84" pos:column="34">String</name></argument>&gt;</argument_list></name><argument_list pos:line="84" pos:column="41">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for pos:line="85" pos:column="13">for (<init><decl><type><name pos:line="85" pos:column="18">int</name></type> <name pos:line="85" pos:column="22">i</name> <init pos:line="85" pos:column="24">= <expr><lit:literal type="number" pos:line="85" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="85" pos:column="29">i</name> <op:operator pos:line="85" pos:column="31">&lt;</op:operator> <lit:literal type="number" pos:line="85" pos:column="33">100</lit:literal></expr>;</condition> <incr><expr><name pos:line="85" pos:column="38">i</name><op:operator pos:line="85" pos:column="39">++</op:operator></expr></incr>)
            <block pos:line="86" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="87" pos:column="17">words</name><op:operator pos:line="87" pos:column="22">.</op:operator><name pos:line="87" pos:column="23">Add</name></name><argument_list pos:line="87" pos:column="26">(<argument><expr><call><name pos:line="87" pos:column="27">GenerateRandomString</name><argument_list pos:line="87" pos:column="47">(<argument><expr><lit:literal type="number" pos:line="87" pos:column="48">30</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><call><name><name pos:line="89" pos:column="13">this</name><op:operator pos:line="89" pos:column="17">.</op:operator><name pos:line="89" pos:column="18">_dictionaryBasedSplitter</name><op:operator pos:line="89" pos:column="42">.</op:operator><name pos:line="89" pos:column="43">AddWords</name></name><argument_list pos:line="89" pos:column="51">(<argument><expr><name pos:line="89" pos:column="52">words</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <foreach pos:line="90" pos:column="13">foreach (<init><decl><type><name pos:line="90" pos:column="22">string</name></type> <name pos:line="90" pos:column="29">word</name> <range pos:line="90" pos:column="34">in <expr><name pos:line="90" pos:column="37">words</name></expr></range></decl></init>)
            <block pos:line="91" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="92" pos:column="17">Assert</name><op:operator pos:line="92" pos:column="23">.</op:operator><name pos:line="92" pos:column="24">IsTrue</name></name><argument_list pos:line="92" pos:column="30">(<argument><expr><call><name><name pos:line="92" pos:column="31">this</name><op:operator pos:line="92" pos:column="35">.</op:operator><name pos:line="92" pos:column="36">_dictionaryBasedSplitter</name><op:operator pos:line="92" pos:column="60">.</op:operator><name pos:line="92" pos:column="61">DoesWordExist</name></name><argument_list pos:line="92" pos:column="74">(<argument><expr><name pos:line="92" pos:column="75">word</name></expr></argument>, 
                    <argument><expr><name><name pos:line="93" pos:column="21">DictionaryOption</name><op:operator pos:line="93" pos:column="37">.</op:operator><name pos:line="93" pos:column="38">NoStemming</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>

        <function><type><attribute pos:line="97" pos:column="9">[<expr><name pos:line="97" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="98" pos:column="9">public</specifier> <name pos:line="98" pos:column="16">void</name></type> <name pos:line="98" pos:column="21">SplitPerformanceTest</name><parameter_list pos:line="98" pos:column="41">()</parameter_list>
        <block pos:line="99" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="100" pos:column="13">var</name></type> <name pos:line="100" pos:column="17">words</name> <init pos:line="100" pos:column="23">= <expr><call><name pos:line="100" pos:column="25">GenerateRandomWordList</name><argument_list pos:line="100" pos:column="47">(<argument><expr><lit:literal type="number" pos:line="100" pos:column="48">1000</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="101" pos:column="13">this</name><op:operator pos:line="101" pos:column="17">.</op:operator><name pos:line="101" pos:column="18">_dictionaryBasedSplitter</name><op:operator pos:line="101" pos:column="42">.</op:operator><name pos:line="101" pos:column="43">AddWords</name></name><argument_list pos:line="101" pos:column="51">(<argument><expr><name pos:line="101" pos:column="52">words</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for pos:line="102" pos:column="13">for (<init><decl><type><name pos:line="102" pos:column="18">int</name></type> <name pos:line="102" pos:column="22">i</name> <init pos:line="102" pos:column="24">= <expr><lit:literal type="number" pos:line="102" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="102" pos:column="29">i</name> <op:operator pos:line="102" pos:column="31">&lt;</op:operator> <lit:literal type="number" pos:line="102" pos:column="33">100</lit:literal></expr>;</condition> <incr><expr><name pos:line="102" pos:column="38">i</name><op:operator pos:line="102" pos:column="39">++</op:operator></expr></incr>)
            <block pos:line="103" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="104" pos:column="17">var</name></type> <name pos:line="104" pos:column="21">combinedWords</name> <init pos:line="104" pos:column="35">= <expr><call><name pos:line="104" pos:column="37">CombiningWords</name><argument_list pos:line="104" pos:column="51">(<argument><expr><name pos:line="104" pos:column="52">words</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="104" pos:column="59">2</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="105" pos:column="17">var</name></type> <name pos:line="105" pos:column="21">watch</name> <init pos:line="105" pos:column="27">= <expr><call><name><name pos:line="105" pos:column="29">Stopwatch</name><op:operator pos:line="105" pos:column="38">.</op:operator><name pos:line="105" pos:column="39">StartNew</name></name><argument_list pos:line="105" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="106" pos:column="17">var</name></type> <name pos:line="106" pos:column="21">subWords</name> <init pos:line="106" pos:column="30">= <expr><call><name><name pos:line="106" pos:column="32">this</name><op:operator pos:line="106" pos:column="36">.</op:operator><name pos:line="106" pos:column="37">_dictionaryBasedSplitter</name><op:operator pos:line="106" pos:column="61">.</op:operator><name pos:line="106" pos:column="62">ExtractWords</name></name><argument_list pos:line="106" pos:column="74">(<argument><expr><name pos:line="106" pos:column="75">combinedWords</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="107" pos:column="17">var</name></type> <name pos:line="107" pos:column="21">time</name> <init pos:line="107" pos:column="26">= <expr><name><name pos:line="107" pos:column="28">watch</name><op:operator pos:line="107" pos:column="33">.</op:operator><name pos:line="107" pos:column="34">ElapsedMilliseconds</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="108" pos:column="17">Assert</name><op:operator pos:line="108" pos:column="23">.</op:operator><name pos:line="108" pos:column="24">IsTrue</name></name><argument_list pos:line="108" pos:column="30">(<argument><expr><name pos:line="108" pos:column="31">time</name> <op:operator pos:line="108" pos:column="36">&lt;</op:operator> <lit:literal type="number" pos:line="108" pos:column="38">20</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="109" pos:column="17">Assert</name><op:operator pos:line="109" pos:column="23">.</op:operator><name pos:line="109" pos:column="24">IsTrue</name></name><argument_list pos:line="109" pos:column="30">(<argument><expr><call><name><name pos:line="109" pos:column="31">subWords</name><op:operator pos:line="109" pos:column="39">.</op:operator><name pos:line="109" pos:column="40">Count</name></name><argument_list pos:line="109" pos:column="45">()</argument_list></call> <op:operator pos:line="109" pos:column="48">==</op:operator> <lit:literal type="number" pos:line="109" pos:column="51">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></function>

        <function><type><attribute pos:line="113" pos:column="9">[<expr><name pos:line="113" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="114" pos:column="9">public</specifier> <name pos:line="114" pos:column="16">void</name></type> <name pos:line="114" pos:column="21">UpdateProjectNamesAndReloadOldOnes</name><parameter_list pos:line="114" pos:column="55">()</parameter_list>
        <block pos:line="115" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="116" pos:column="13">var</name></type> <name pos:line="116" pos:column="17">projectNames</name> <init pos:line="116" pos:column="30">= <expr><call><name pos:line="116" pos:column="32">GenerateRandomWordList</name><argument_list pos:line="116" pos:column="54">(<argument><expr><lit:literal type="number" pos:line="116" pos:column="55">10</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="117" pos:column="13">var</name></type> <name pos:line="117" pos:column="17">wordDictionary</name> <init pos:line="117" pos:column="32">= <expr><op:operator pos:line="117" pos:column="34">new</op:operator> <call><name><name pos:line="117" pos:column="38">Dictionary</name><argument_list pos:line="117" pos:column="48">&lt;<argument><name pos:line="117" pos:column="49">String</name></argument>, <argument><name><name pos:line="117" pos:column="57">IEnumerable</name><argument_list pos:line="117" pos:column="68">&lt;<argument><name pos:line="117" pos:column="69">String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list pos:line="117" pos:column="77">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <foreach pos:line="119" pos:column="13">foreach (<init><decl><type><name pos:line="119" pos:column="22">string</name></type> <name pos:line="119" pos:column="29">project</name> <range pos:line="119" pos:column="37">in <expr><name pos:line="119" pos:column="40">projectNames</name></expr></range></decl></init>)
            <block pos:line="120" pos:column="13">{
                <expr_stmt><expr><call><name pos:line="121" pos:column="17">CreateDirectory</name><argument_list pos:line="121" pos:column="32">(<argument><expr><name pos:line="121" pos:column="33">tempFolder</name> <op:operator pos:line="121" pos:column="44">+</op:operator> <name pos:line="121" pos:column="46">project</name> <op:operator pos:line="121" pos:column="54">+</op:operator> <lit:literal type="string" pos:line="121" pos:column="56">@"\"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="122" pos:column="17">_dictionaryBasedSplitter</name><op:operator pos:line="122" pos:column="41">.</op:operator><name pos:line="122" pos:column="42">Initialize</name></name><argument_list pos:line="122" pos:column="52">(<argument><expr><name pos:line="122" pos:column="53">tempFolder</name> <op:operator pos:line="122" pos:column="64">+</op:operator> <name pos:line="122" pos:column="66">project</name> <op:operator pos:line="122" pos:column="74">+</op:operator> <lit:literal type="string" pos:line="122" pos:column="76">@"\"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="123" pos:column="17">var</name></type> <name pos:line="123" pos:column="21">words</name> <init pos:line="123" pos:column="27">= <expr><call><name pos:line="123" pos:column="29">GenerateRandomWordList</name><argument_list pos:line="123" pos:column="51">(<argument><expr><lit:literal type="number" pos:line="123" pos:column="52">100</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="124" pos:column="17">_dictionaryBasedSplitter</name><op:operator pos:line="124" pos:column="41">.</op:operator><name pos:line="124" pos:column="42">AddWords</name></name><argument_list pos:line="124" pos:column="50">(<argument><expr><name pos:line="124" pos:column="51">words</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="125" pos:column="17">wordDictionary</name><op:operator pos:line="125" pos:column="31">.</op:operator><name pos:line="125" pos:column="32">Add</name></name><argument_list pos:line="125" pos:column="35">(<argument><expr><name pos:line="125" pos:column="36">project</name></expr></argument>, <argument><expr><name pos:line="125" pos:column="45">words</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="126" pos:column="17">_dictionaryBasedSplitter</name><op:operator pos:line="126" pos:column="41">.</op:operator><name pos:line="126" pos:column="42">Dispose</name></name><argument_list pos:line="126" pos:column="49">()</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>

            <foreach pos:line="129" pos:column="13">foreach (<init><decl><type><name pos:line="129" pos:column="22">string</name></type> <name pos:line="129" pos:column="29">project</name> <range pos:line="129" pos:column="37">in <expr><name pos:line="129" pos:column="40">projectNames</name></expr></range></decl></init>)
            <block pos:line="130" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="131" pos:column="17">_dictionaryBasedSplitter</name><op:operator pos:line="131" pos:column="41">.</op:operator><name pos:line="131" pos:column="42">Initialize</name></name><argument_list pos:line="131" pos:column="52">(<argument><expr><name pos:line="131" pos:column="53">tempFolder</name> <op:operator pos:line="131" pos:column="64">+</op:operator> <name pos:line="131" pos:column="66">project</name> <op:operator pos:line="131" pos:column="74">+</op:operator> <lit:literal type="string" pos:line="131" pos:column="76">@"\"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="132" pos:column="17">var</name></type> <name pos:line="132" pos:column="21">words</name> <init pos:line="132" pos:column="27">= <expr><name><name pos:line="132" pos:column="29">wordDictionary</name><index pos:line="132" pos:column="43">[<expr><name pos:line="132" pos:column="44">project</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <foreach pos:line="133" pos:column="17">foreach (<init><decl><type><name pos:line="133" pos:column="26">string</name></type> <name pos:line="133" pos:column="33">word</name> <range pos:line="133" pos:column="38">in <expr><name pos:line="133" pos:column="41">words</name></expr></range></decl></init>)
                <block pos:line="134" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="135" pos:column="21">Assert</name><op:operator pos:line="135" pos:column="27">.</op:operator><name pos:line="135" pos:column="28">IsTrue</name></name><argument_list pos:line="135" pos:column="34">(<argument><expr><call><name><name pos:line="135" pos:column="35">_dictionaryBasedSplitter</name><op:operator pos:line="135" pos:column="59">.</op:operator><name pos:line="135" pos:column="60">DoesWordExist</name></name><argument_list pos:line="135" pos:column="73">(<argument><expr><name pos:line="135" pos:column="74">word</name></expr></argument>, 
                        <argument><expr><name><name pos:line="136" pos:column="25">DictionaryOption</name><op:operator pos:line="136" pos:column="41">.</op:operator><name pos:line="136" pos:column="42">NoStemming</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>
            }</block></foreach>
        }</block></function>

        <function><type><attribute pos:line="141" pos:column="9">[<expr><name pos:line="141" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="142" pos:column="9">public</specifier> <name pos:line="142" pos:column="16">void</name></type> <name pos:line="142" pos:column="21">SplitSimpleWord</name><parameter_list pos:line="142" pos:column="36">()</parameter_list>
        <block pos:line="143" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="144" pos:column="13">_dictionaryBasedSplitter</name><op:operator pos:line="144" pos:column="37">.</op:operator><name pos:line="144" pos:column="38">AddWords</name></name><argument_list pos:line="144" pos:column="46">(<argument><expr><op:operator pos:line="144" pos:column="47">new</op:operator> <name><name pos:line="144" pos:column="51">string</name><index pos:line="144" pos:column="57">[]</index></name> <block pos:line="144" pos:column="60">{ <expr><lit:literal type="string" pos:line="144" pos:column="62">"int"</lit:literal></expr><op:operator pos:line="144" pos:column="67">,</op:operator> <expr><lit:literal type="string" pos:line="144" pos:column="69">"i"</lit:literal></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="145" pos:column="13">var</name></type> <name pos:line="145" pos:column="17">subWords</name> <init pos:line="145" pos:column="26">= <expr><call><name><name pos:line="145" pos:column="28">_dictionaryBasedSplitter</name><op:operator pos:line="145" pos:column="52">.</op:operator><name pos:line="145" pos:column="53">ExtractWords</name></name><argument_list pos:line="145" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="145" pos:column="66">"inti"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="146" pos:column="13">Assert</name><op:operator pos:line="146" pos:column="19">.</op:operator><name pos:line="146" pos:column="20">IsTrue</name></name><argument_list pos:line="146" pos:column="26">(<argument><expr><name><name pos:line="146" pos:column="27">subWords</name><index pos:line="146" pos:column="35">[<expr><lit:literal type="number" pos:line="146" pos:column="36">0</lit:literal></expr>]</index></name><op:operator pos:line="146" pos:column="38">.</op:operator><call><name pos:line="146" pos:column="39">Equals</name><argument_list pos:line="146" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="146" pos:column="46">"int"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="147" pos:column="13">Assert</name><op:operator pos:line="147" pos:column="19">.</op:operator><name pos:line="147" pos:column="20">IsTrue</name></name><argument_list pos:line="147" pos:column="26">(<argument><expr><name><name pos:line="147" pos:column="27">subWords</name><index pos:line="147" pos:column="35">[<expr><lit:literal type="number" pos:line="147" pos:column="36">1</lit:literal></expr>]</index></name><op:operator pos:line="147" pos:column="38">.</op:operator><call><name pos:line="147" pos:column="39">Equals</name><argument_list pos:line="147" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="147" pos:column="46">"i"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>


        <function><type><attribute pos:line="151" pos:column="9">[<expr><name pos:line="151" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="152" pos:column="9">public</specifier> <name pos:line="152" pos:column="16">void</name></type> <name pos:line="152" pos:column="21">SplitRandomWord</name><parameter_list pos:line="152" pos:column="36">()</parameter_list>
        <block pos:line="153" pos:column="9">{
            <for pos:line="154" pos:column="13">for (<init><decl><type><name pos:line="154" pos:column="18">int</name></type> <name pos:line="154" pos:column="22">length</name> <init pos:line="154" pos:column="29">= <expr><lit:literal type="number" pos:line="154" pos:column="31">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="154" pos:column="34">length</name> <op:operator pos:line="154" pos:column="41">&lt;</op:operator> <lit:literal type="number" pos:line="154" pos:column="43">61</lit:literal></expr>;</condition> <incr><expr><name pos:line="154" pos:column="47">length</name><op:operator pos:line="154" pos:column="53">++</op:operator></expr></incr>)
            <block pos:line="155" pos:column="13">{
                <for pos:line="156" pos:column="17">for (<init><decl><type><name pos:line="156" pos:column="22">int</name></type> <name pos:line="156" pos:column="26">i</name> <init pos:line="156" pos:column="28">= <expr><lit:literal type="number" pos:line="156" pos:column="30">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="156" pos:column="33">i</name> <op:operator pos:line="156" pos:column="35">&lt;</op:operator> <lit:literal type="number" pos:line="156" pos:column="37">100</lit:literal></expr>;</condition> <incr><expr><name pos:line="156" pos:column="42">i</name><op:operator pos:line="156" pos:column="43">++</op:operator></expr></incr>)
                <block pos:line="157" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="158" pos:column="21">var</name></type> <name pos:line="158" pos:column="25">word</name> <init pos:line="158" pos:column="30">= <expr><call><name pos:line="158" pos:column="32">GenerateRandomString</name><argument_list pos:line="158" pos:column="52">(<argument><expr><name pos:line="158" pos:column="53">length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="159" pos:column="21">_dictionaryBasedSplitter</name><op:operator pos:line="159" pos:column="45">.</op:operator><name pos:line="159" pos:column="46">ExtractWords</name></name><argument_list pos:line="159" pos:column="58">(<argument><expr><name pos:line="159" pos:column="59">word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
            }</block></for>
        }</block></function>

        <function><type><attribute pos:line="164" pos:column="9">[<expr><name pos:line="164" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="165" pos:column="9">public</specifier> <name pos:line="165" pos:column="16">void</name></type> <name pos:line="165" pos:column="21">SplitHalfSplittableWord</name><parameter_list pos:line="165" pos:column="44">()</parameter_list>
        <block pos:line="166" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="167" pos:column="13">const</specifier> <name pos:line="167" pos:column="19">int</name></type> <name pos:line="167" pos:column="23">length</name> <init pos:line="167" pos:column="30">= <expr><lit:literal type="number" pos:line="167" pos:column="32">30</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="168" pos:column="13">var</name></type> <name pos:line="168" pos:column="17">prefixes</name> <init pos:line="168" pos:column="26">= <expr><call><name pos:line="168" pos:column="28">GenerateRandomWordList</name><argument_list pos:line="168" pos:column="50">(<argument><expr><name pos:line="168" pos:column="51">length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="169" pos:column="13">var</name></type> <name pos:line="169" pos:column="17">middels</name> <init pos:line="169" pos:column="25">= <expr><call><name pos:line="169" pos:column="27">GenerateRandomWordList</name><argument_list pos:line="169" pos:column="49">(<argument><expr><name pos:line="169" pos:column="50">length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="170" pos:column="13">var</name></type> <name pos:line="170" pos:column="17">suffixes</name> <init pos:line="170" pos:column="26">= <expr><call><name pos:line="170" pos:column="28">GenerateRandomWordList</name><argument_list pos:line="170" pos:column="50">(<argument><expr><name pos:line="170" pos:column="51">length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="171" pos:column="13">_dictionaryBasedSplitter</name><op:operator pos:line="171" pos:column="37">.</op:operator><name pos:line="171" pos:column="38">AddWords</name></name><argument_list pos:line="171" pos:column="46">(<argument><expr><name pos:line="171" pos:column="47">prefixes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="172" pos:column="13">_dictionaryBasedSplitter</name><op:operator pos:line="172" pos:column="37">.</op:operator><name pos:line="172" pos:column="38">AddWords</name></name><argument_list pos:line="172" pos:column="46">(<argument><expr><name pos:line="172" pos:column="47">suffixes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for pos:line="173" pos:column="13">for (<init><decl><type><name pos:line="173" pos:column="18">int</name></type> <name pos:line="173" pos:column="22">i</name> <init pos:line="173" pos:column="24">= <expr><lit:literal type="number" pos:line="173" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="173" pos:column="29">i</name> <op:operator pos:line="173" pos:column="31">&lt;</op:operator> <name pos:line="173" pos:column="33">length</name></expr>;</condition> <incr><expr><name pos:line="173" pos:column="41">i</name><op:operator pos:line="173" pos:column="42">++</op:operator></expr></incr>)
            <block pos:line="174" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="175" pos:column="17">var</name></type> <name pos:line="175" pos:column="21">sb</name> <init pos:line="175" pos:column="24">= <expr><op:operator pos:line="175" pos:column="26">new</op:operator> <call><name pos:line="175" pos:column="30">StringBuilder</name><argument_list pos:line="175" pos:column="43">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="176" pos:column="17">sb</name><op:operator pos:line="176" pos:column="19">.</op:operator><name pos:line="176" pos:column="20">Append</name></name><argument_list pos:line="176" pos:column="26">(<argument><expr><call><name><name pos:line="176" pos:column="27">prefixes</name><op:operator pos:line="176" pos:column="35">.</op:operator><name pos:line="176" pos:column="36">ElementAt</name></name><argument_list pos:line="176" pos:column="45">(<argument><expr><name pos:line="176" pos:column="46">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="177" pos:column="17">sb</name><op:operator pos:line="177" pos:column="19">.</op:operator><name pos:line="177" pos:column="20">Append</name></name><argument_list pos:line="177" pos:column="26">(<argument><expr><call><name><name pos:line="177" pos:column="27">middels</name><op:operator pos:line="177" pos:column="34">.</op:operator><name pos:line="177" pos:column="35">ElementAt</name></name><argument_list pos:line="177" pos:column="44">(<argument><expr><name pos:line="177" pos:column="45">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="178" pos:column="17">sb</name><op:operator pos:line="178" pos:column="19">.</op:operator><name pos:line="178" pos:column="20">Append</name></name><argument_list pos:line="178" pos:column="26">(<argument><expr><call><name><name pos:line="178" pos:column="27">suffixes</name><op:operator pos:line="178" pos:column="35">.</op:operator><name pos:line="178" pos:column="36">ElementAt</name></name><argument_list pos:line="178" pos:column="45">(<argument><expr><name pos:line="178" pos:column="46">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="179" pos:column="17">var</name></type> <name pos:line="179" pos:column="21">subWords</name> <init pos:line="179" pos:column="30">= <expr><call><name><name pos:line="179" pos:column="32">_dictionaryBasedSplitter</name><op:operator pos:line="179" pos:column="56">.</op:operator><name pos:line="179" pos:column="57">ExtractWords</name></name><argument_list pos:line="179" pos:column="69">(<argument><expr><call><name><name pos:line="179" pos:column="70">sb</name><op:operator pos:line="179" pos:column="72">.</op:operator><name pos:line="179" pos:column="73">ToString</name></name><argument_list pos:line="179" pos:column="81">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="180" pos:column="17">Assert</name><op:operator pos:line="180" pos:column="23">.</op:operator><name pos:line="180" pos:column="24">IsTrue</name></name><argument_list pos:line="180" pos:column="30">(<argument><expr><call><name><name pos:line="180" pos:column="31">subWords</name><op:operator pos:line="180" pos:column="39">.</op:operator><name pos:line="180" pos:column="40">Count</name></name><argument_list pos:line="180" pos:column="45">()</argument_list></call> <op:operator pos:line="180" pos:column="48">&gt;=</op:operator> <lit:literal type="number" pos:line="180" pos:column="51">3</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="181" pos:column="17">Assert</name><op:operator pos:line="181" pos:column="23">.</op:operator><name pos:line="181" pos:column="24">IsTrue</name></name><argument_list pos:line="181" pos:column="30">(<argument><expr><call><name><name pos:line="181" pos:column="31">subWords</name><op:operator pos:line="181" pos:column="39">.</op:operator><name pos:line="181" pos:column="40">First</name></name><argument_list pos:line="181" pos:column="45">()</argument_list></call><op:operator pos:line="181" pos:column="47">.</op:operator><call><name pos:line="181" pos:column="48">Equals</name><argument_list pos:line="181" pos:column="54">(<argument><expr><call><name><name pos:line="181" pos:column="55">prefixes</name><op:operator pos:line="181" pos:column="63">.</op:operator><name pos:line="181" pos:column="64">ElementAt</name></name><argument_list pos:line="181" pos:column="73">(<argument><expr><name pos:line="181" pos:column="74">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="182" pos:column="17">Assert</name><op:operator pos:line="182" pos:column="23">.</op:operator><name pos:line="182" pos:column="24">IsTrue</name></name><argument_list pos:line="182" pos:column="30">(<argument><expr><call><name><name pos:line="182" pos:column="31">subWords</name><op:operator pos:line="182" pos:column="39">.</op:operator><name pos:line="182" pos:column="40">Last</name></name><argument_list pos:line="182" pos:column="44">()</argument_list></call><op:operator pos:line="182" pos:column="46">.</op:operator><call><name pos:line="182" pos:column="47">Equals</name><argument_list pos:line="182" pos:column="53">(<argument><expr><call><name><name pos:line="182" pos:column="54">suffixes</name><op:operator pos:line="182" pos:column="62">.</op:operator><name pos:line="182" pos:column="63">ElementAt</name></name><argument_list pos:line="182" pos:column="72">(<argument><expr><name pos:line="182" pos:column="73">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></function>

        <function><type><attribute pos:line="186" pos:column="9">[<expr><name pos:line="186" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="187" pos:column="9">public</specifier> <name pos:line="187" pos:column="16">void</name></type> <name pos:line="187" pos:column="21">SplitSimpleQuote</name><parameter_list pos:line="187" pos:column="37">()</parameter_list>
        <block pos:line="188" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="189" pos:column="13">const</specifier> <name pos:line="189" pos:column="19">string</name></type> <name pos:line="189" pos:column="26">quote</name> <init pos:line="189" pos:column="32">= <expr><lit:literal type="string" pos:line="189" pos:column="34">"\"inti\""</lit:literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="190" pos:column="13">_dictionaryBasedSplitter</name><op:operator pos:line="190" pos:column="37">.</op:operator><name pos:line="190" pos:column="38">AddWords</name></name><argument_list pos:line="190" pos:column="46">(<argument><expr><op:operator pos:line="190" pos:column="47">new</op:operator> <name><name pos:line="190" pos:column="51">string</name><index pos:line="190" pos:column="57">[]</index></name> <block pos:line="190" pos:column="60">{ <expr><lit:literal type="string" pos:line="190" pos:column="62">"int"</lit:literal></expr><op:operator pos:line="190" pos:column="67">,</op:operator> <expr><lit:literal type="string" pos:line="190" pos:column="69">"i"</lit:literal></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="191" pos:column="13">var</name></type> <name pos:line="191" pos:column="17">words</name> <init pos:line="191" pos:column="23">= <expr><call><name><name pos:line="191" pos:column="25">_dictionaryBasedSplitter</name><op:operator pos:line="191" pos:column="49">.</op:operator><name pos:line="191" pos:column="50">ExtractWords</name></name><argument_list pos:line="191" pos:column="62">(<argument><expr><name pos:line="191" pos:column="63">quote</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="192" pos:column="13">Assert</name><op:operator pos:line="192" pos:column="19">.</op:operator><name pos:line="192" pos:column="20">IsTrue</name></name><argument_list pos:line="192" pos:column="26">(<argument><expr><call><name><name pos:line="192" pos:column="27">words</name><op:operator pos:line="192" pos:column="32">.</op:operator><name pos:line="192" pos:column="33">Count</name></name><argument_list pos:line="192" pos:column="38">()</argument_list></call> <op:operator pos:line="192" pos:column="41">==</op:operator> <lit:literal type="number" pos:line="192" pos:column="44">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="193" pos:column="13">Assert</name><op:operator pos:line="193" pos:column="19">.</op:operator><name pos:line="193" pos:column="20">IsTrue</name></name><argument_list pos:line="193" pos:column="26">(<argument><expr><call><name><name pos:line="193" pos:column="27">words</name><op:operator pos:line="193" pos:column="32">.</op:operator><name pos:line="193" pos:column="33">ElementAt</name></name><argument_list pos:line="193" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="193" pos:column="43">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="193" pos:column="45">.</op:operator><call><name pos:line="193" pos:column="46">Equals</name><argument_list pos:line="193" pos:column="52">(<argument><expr><name pos:line="193" pos:column="53">quote</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="196" pos:column="9">[<expr><name pos:line="196" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="197" pos:column="9">public</specifier> <name pos:line="197" pos:column="16">void</name></type> <name pos:line="197" pos:column="21">SplitQuoteWithNonQuote</name><parameter_list pos:line="197" pos:column="43">()</parameter_list>
        <block pos:line="198" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="199" pos:column="13">const</specifier> <name pos:line="199" pos:column="19">string</name></type> <name pos:line="199" pos:column="26">quote</name> <init pos:line="199" pos:column="32">= <expr><lit:literal type="string" pos:line="199" pos:column="34">"\"inti\""</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="200" pos:column="13">const</specifier> <name pos:line="200" pos:column="19">string</name></type> <name pos:line="200" pos:column="26">nonQuote</name> <init pos:line="200" pos:column="35">= <expr><lit:literal type="string" pos:line="200" pos:column="37">"inti"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="201" pos:column="13">const</specifier> <name pos:line="201" pos:column="19">string</name></type> <name pos:line="201" pos:column="26">mix1</name> <init pos:line="201" pos:column="31">= <expr><name pos:line="201" pos:column="33">quote</name> <op:operator pos:line="201" pos:column="39">+</op:operator> <lit:literal type="string" pos:line="201" pos:column="41">" "</lit:literal> <op:operator pos:line="201" pos:column="45">+</op:operator> <name pos:line="201" pos:column="47">nonQuote</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="202" pos:column="13">const</specifier> <name pos:line="202" pos:column="19">string</name></type> <name pos:line="202" pos:column="26">mix2</name> <init pos:line="202" pos:column="31">= <expr><name pos:line="202" pos:column="33">nonQuote</name> <op:operator pos:line="202" pos:column="42">+</op:operator> <lit:literal type="string" pos:line="202" pos:column="44">" "</lit:literal> <op:operator pos:line="202" pos:column="48">+</op:operator> <name pos:line="202" pos:column="50">quote</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="203" pos:column="13">const</specifier> <name pos:line="203" pos:column="19">string</name></type> <name pos:line="203" pos:column="26">mix3</name> <init pos:line="203" pos:column="31">= <expr><name pos:line="203" pos:column="33">nonQuote</name> <op:operator pos:line="203" pos:column="42">+</op:operator> <lit:literal type="string" pos:line="203" pos:column="44">" "</lit:literal> <op:operator pos:line="203" pos:column="48">+</op:operator> <name pos:line="203" pos:column="50">quote</name> <op:operator pos:line="203" pos:column="56">+</op:operator> <lit:literal type="string" pos:line="203" pos:column="58">" "</lit:literal> <op:operator pos:line="203" pos:column="62">+</op:operator> <name pos:line="203" pos:column="64">nonQuote</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="204" pos:column="13">const</specifier> <name pos:line="204" pos:column="19">string</name></type> <name pos:line="204" pos:column="26">mix4</name> <init pos:line="204" pos:column="31">= <expr><name pos:line="204" pos:column="33">quote</name> <op:operator pos:line="204" pos:column="39">+</op:operator> <lit:literal type="string" pos:line="204" pos:column="41">" "</lit:literal> <op:operator pos:line="204" pos:column="45">+</op:operator> <name pos:line="204" pos:column="47">nonQuote</name> <op:operator pos:line="204" pos:column="56">+</op:operator> <lit:literal type="string" pos:line="204" pos:column="58">" "</lit:literal> <op:operator pos:line="204" pos:column="62">+</op:operator> <name pos:line="204" pos:column="64">quote</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="205" pos:column="13">_dictionaryBasedSplitter</name><op:operator pos:line="205" pos:column="37">.</op:operator><name pos:line="205" pos:column="38">AddWords</name></name><argument_list pos:line="205" pos:column="46">(<argument><expr><op:operator pos:line="205" pos:column="47">new</op:operator> <name><name pos:line="205" pos:column="51">string</name><index pos:line="205" pos:column="57">[]</index></name> <block pos:line="205" pos:column="60">{ <expr><lit:literal type="string" pos:line="205" pos:column="62">"int"</lit:literal></expr><op:operator pos:line="205" pos:column="67">,</op:operator> <expr><lit:literal type="string" pos:line="205" pos:column="69">"i"</lit:literal></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="207" pos:column="13">var</name></type> <name pos:line="207" pos:column="17">words</name> <init pos:line="207" pos:column="23">= <expr><call><name><name pos:line="207" pos:column="25">_dictionaryBasedSplitter</name><op:operator pos:line="207" pos:column="49">.</op:operator><name pos:line="207" pos:column="50">ExtractWords</name></name><argument_list pos:line="207" pos:column="62">(<argument><expr><name pos:line="207" pos:column="63">mix1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="208" pos:column="13">Assert</name><op:operator pos:line="208" pos:column="19">.</op:operator><name pos:line="208" pos:column="20">IsTrue</name></name><argument_list pos:line="208" pos:column="26">(<argument><expr><call><name><name pos:line="208" pos:column="27">words</name><op:operator pos:line="208" pos:column="32">.</op:operator><name pos:line="208" pos:column="33">Count</name></name><argument_list pos:line="208" pos:column="38">()</argument_list></call> <op:operator pos:line="208" pos:column="41">==</op:operator> <lit:literal type="number" pos:line="208" pos:column="44">3</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="209" pos:column="13">Assert</name><op:operator pos:line="209" pos:column="19">.</op:operator><name pos:line="209" pos:column="20">IsTrue</name></name><argument_list pos:line="209" pos:column="26">(<argument><expr><call><name><name pos:line="209" pos:column="27">words</name><op:operator pos:line="209" pos:column="32">.</op:operator><name pos:line="209" pos:column="33">ElementAt</name></name><argument_list pos:line="209" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="209" pos:column="43">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="209" pos:column="45">.</op:operator><call><name pos:line="209" pos:column="46">Equals</name><argument_list pos:line="209" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="209" pos:column="53">"\"inti\""</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="210" pos:column="13">Assert</name><op:operator pos:line="210" pos:column="19">.</op:operator><name pos:line="210" pos:column="20">IsTrue</name></name><argument_list pos:line="210" pos:column="26">(<argument><expr><call><name><name pos:line="210" pos:column="27">words</name><op:operator pos:line="210" pos:column="32">.</op:operator><name pos:line="210" pos:column="33">ElementAt</name></name><argument_list pos:line="210" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="210" pos:column="43">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="210" pos:column="45">.</op:operator><call><name pos:line="210" pos:column="46">Equals</name><argument_list pos:line="210" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="210" pos:column="53">"int"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="211" pos:column="13">Assert</name><op:operator pos:line="211" pos:column="19">.</op:operator><name pos:line="211" pos:column="20">IsTrue</name></name><argument_list pos:line="211" pos:column="26">(<argument><expr><call><name><name pos:line="211" pos:column="27">words</name><op:operator pos:line="211" pos:column="32">.</op:operator><name pos:line="211" pos:column="33">ElementAt</name></name><argument_list pos:line="211" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="211" pos:column="43">2</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="211" pos:column="45">.</op:operator><call><name pos:line="211" pos:column="46">Equals</name><argument_list pos:line="211" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="211" pos:column="53">"i"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="213" pos:column="13">words</name> <op:operator pos:line="213" pos:column="19">=</op:operator> <call><name><name pos:line="213" pos:column="21">_dictionaryBasedSplitter</name><op:operator pos:line="213" pos:column="45">.</op:operator><name pos:line="213" pos:column="46">ExtractWords</name></name><argument_list pos:line="213" pos:column="58">(<argument><expr><name pos:line="213" pos:column="59">mix2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="214" pos:column="13">Assert</name><op:operator pos:line="214" pos:column="19">.</op:operator><name pos:line="214" pos:column="20">IsTrue</name></name><argument_list pos:line="214" pos:column="26">(<argument><expr><call><name><name pos:line="214" pos:column="27">words</name><op:operator pos:line="214" pos:column="32">.</op:operator><name pos:line="214" pos:column="33">Count</name></name><argument_list pos:line="214" pos:column="38">()</argument_list></call> <op:operator pos:line="214" pos:column="41">==</op:operator> <lit:literal type="number" pos:line="214" pos:column="44">3</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="215" pos:column="13">Assert</name><op:operator pos:line="215" pos:column="19">.</op:operator><name pos:line="215" pos:column="20">IsTrue</name></name><argument_list pos:line="215" pos:column="26">(<argument><expr><call><name><name pos:line="215" pos:column="27">words</name><op:operator pos:line="215" pos:column="32">.</op:operator><name pos:line="215" pos:column="33">ElementAt</name></name><argument_list pos:line="215" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="215" pos:column="43">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="215" pos:column="45">.</op:operator><call><name pos:line="215" pos:column="46">Equals</name><argument_list pos:line="215" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="215" pos:column="53">"int"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="216" pos:column="13">Assert</name><op:operator pos:line="216" pos:column="19">.</op:operator><name pos:line="216" pos:column="20">IsTrue</name></name><argument_list pos:line="216" pos:column="26">(<argument><expr><call><name><name pos:line="216" pos:column="27">words</name><op:operator pos:line="216" pos:column="32">.</op:operator><name pos:line="216" pos:column="33">ElementAt</name></name><argument_list pos:line="216" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="216" pos:column="43">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="216" pos:column="45">.</op:operator><call><name pos:line="216" pos:column="46">Equals</name><argument_list pos:line="216" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="216" pos:column="53">"i"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="217" pos:column="13">Assert</name><op:operator pos:line="217" pos:column="19">.</op:operator><name pos:line="217" pos:column="20">IsTrue</name></name><argument_list pos:line="217" pos:column="26">(<argument><expr><call><name><name pos:line="217" pos:column="27">words</name><op:operator pos:line="217" pos:column="32">.</op:operator><name pos:line="217" pos:column="33">ElementAt</name></name><argument_list pos:line="217" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="217" pos:column="43">2</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="217" pos:column="45">.</op:operator><call><name pos:line="217" pos:column="46">Equals</name><argument_list pos:line="217" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="217" pos:column="53">"\"inti\""</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="219" pos:column="13">words</name> <op:operator pos:line="219" pos:column="19">=</op:operator> <call><name><name pos:line="219" pos:column="21">_dictionaryBasedSplitter</name><op:operator pos:line="219" pos:column="45">.</op:operator><name pos:line="219" pos:column="46">ExtractWords</name></name><argument_list pos:line="219" pos:column="58">(<argument><expr><name pos:line="219" pos:column="59">mix3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="220" pos:column="13">Assert</name><op:operator pos:line="220" pos:column="19">.</op:operator><name pos:line="220" pos:column="20">IsTrue</name></name><argument_list pos:line="220" pos:column="26">(<argument><expr><call><name><name pos:line="220" pos:column="27">words</name><op:operator pos:line="220" pos:column="32">.</op:operator><name pos:line="220" pos:column="33">Count</name></name><argument_list pos:line="220" pos:column="38">()</argument_list></call> <op:operator pos:line="220" pos:column="41">==</op:operator> <lit:literal type="number" pos:line="220" pos:column="44">5</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="221" pos:column="13">Assert</name><op:operator pos:line="221" pos:column="19">.</op:operator><name pos:line="221" pos:column="20">IsTrue</name></name><argument_list pos:line="221" pos:column="26">(<argument><expr><call><name><name pos:line="221" pos:column="27">words</name><op:operator pos:line="221" pos:column="32">.</op:operator><name pos:line="221" pos:column="33">ElementAt</name></name><argument_list pos:line="221" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="221" pos:column="43">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="221" pos:column="45">.</op:operator><call><name pos:line="221" pos:column="46">Equals</name><argument_list pos:line="221" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="221" pos:column="53">"int"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="222" pos:column="13">Assert</name><op:operator pos:line="222" pos:column="19">.</op:operator><name pos:line="222" pos:column="20">IsTrue</name></name><argument_list pos:line="222" pos:column="26">(<argument><expr><call><name><name pos:line="222" pos:column="27">words</name><op:operator pos:line="222" pos:column="32">.</op:operator><name pos:line="222" pos:column="33">ElementAt</name></name><argument_list pos:line="222" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="222" pos:column="43">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="222" pos:column="45">.</op:operator><call><name pos:line="222" pos:column="46">Equals</name><argument_list pos:line="222" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="222" pos:column="53">"i"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="223" pos:column="13">Assert</name><op:operator pos:line="223" pos:column="19">.</op:operator><name pos:line="223" pos:column="20">IsTrue</name></name><argument_list pos:line="223" pos:column="26">(<argument><expr><call><name><name pos:line="223" pos:column="27">words</name><op:operator pos:line="223" pos:column="32">.</op:operator><name pos:line="223" pos:column="33">ElementAt</name></name><argument_list pos:line="223" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="223" pos:column="43">2</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="223" pos:column="45">.</op:operator><call><name pos:line="223" pos:column="46">Equals</name><argument_list pos:line="223" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="223" pos:column="53">"\"inti\""</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="224" pos:column="13">Assert</name><op:operator pos:line="224" pos:column="19">.</op:operator><name pos:line="224" pos:column="20">IsTrue</name></name><argument_list pos:line="224" pos:column="26">(<argument><expr><call><name><name pos:line="224" pos:column="27">words</name><op:operator pos:line="224" pos:column="32">.</op:operator><name pos:line="224" pos:column="33">ElementAt</name></name><argument_list pos:line="224" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="224" pos:column="43">3</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="224" pos:column="45">.</op:operator><call><name pos:line="224" pos:column="46">Equals</name><argument_list pos:line="224" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="224" pos:column="53">"int"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="225" pos:column="13">Assert</name><op:operator pos:line="225" pos:column="19">.</op:operator><name pos:line="225" pos:column="20">IsTrue</name></name><argument_list pos:line="225" pos:column="26">(<argument><expr><call><name><name pos:line="225" pos:column="27">words</name><op:operator pos:line="225" pos:column="32">.</op:operator><name pos:line="225" pos:column="33">ElementAt</name></name><argument_list pos:line="225" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="225" pos:column="43">4</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="225" pos:column="45">.</op:operator><call><name pos:line="225" pos:column="46">Equals</name><argument_list pos:line="225" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="225" pos:column="53">"i"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="227" pos:column="13">words</name> <op:operator pos:line="227" pos:column="19">=</op:operator> <call><name><name pos:line="227" pos:column="21">_dictionaryBasedSplitter</name><op:operator pos:line="227" pos:column="45">.</op:operator><name pos:line="227" pos:column="46">ExtractWords</name></name><argument_list pos:line="227" pos:column="58">(<argument><expr><name pos:line="227" pos:column="59">mix4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="228" pos:column="13">Assert</name><op:operator pos:line="228" pos:column="19">.</op:operator><name pos:line="228" pos:column="20">IsTrue</name></name><argument_list pos:line="228" pos:column="26">(<argument><expr><call><name><name pos:line="228" pos:column="27">words</name><op:operator pos:line="228" pos:column="32">.</op:operator><name pos:line="228" pos:column="33">Count</name></name><argument_list pos:line="228" pos:column="38">()</argument_list></call> <op:operator pos:line="228" pos:column="41">==</op:operator> <lit:literal type="number" pos:line="228" pos:column="44">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>


        <function><type><attribute pos:line="232" pos:column="9">[<expr><name pos:line="232" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="233" pos:column="9">public</specifier> <name pos:line="233" pos:column="16">void</name></type> <name pos:line="233" pos:column="21">SplitQuoteInsideQuote</name><parameter_list pos:line="233" pos:column="42">()</parameter_list>
        <block pos:line="234" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="235" pos:column="13">string</name></type> <name pos:line="235" pos:column="20">keywords</name> <init pos:line="235" pos:column="29">= <expr><lit:literal type="string" pos:line="235" pos:column="31">"\"Assert.IsNotNull(wordSplitter, \"Default word splitter should x used!!\");\""</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="236" pos:column="13">var</name></type> <name pos:line="236" pos:column="17">words</name> <init pos:line="236" pos:column="23">= <expr><call><name><name pos:line="236" pos:column="25">_dictionaryBasedSplitter</name><op:operator pos:line="236" pos:column="49">.</op:operator><name pos:line="236" pos:column="50">ExtractWords</name></name><argument_list pos:line="236" pos:column="62">(<argument><expr><name pos:line="236" pos:column="63">keywords</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="237" pos:column="13">Assert</name><op:operator pos:line="237" pos:column="19">.</op:operator><name pos:line="237" pos:column="20">IsTrue</name></name><argument_list pos:line="237" pos:column="26">(<argument><expr><call><name><name pos:line="237" pos:column="27">words</name><op:operator pos:line="237" pos:column="32">.</op:operator><name pos:line="237" pos:column="33">Count</name></name><argument_list pos:line="237" pos:column="38">()</argument_list></call> <op:operator pos:line="237" pos:column="41">==</op:operator> <lit:literal type="number" pos:line="237" pos:column="44">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="240" pos:column="9">[<expr><name pos:line="240" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="241" pos:column="9">public</specifier> <name pos:line="241" pos:column="16">void</name></type> <name pos:line="241" pos:column="21">SplitEmptyQuote</name><parameter_list pos:line="241" pos:column="36">()</parameter_list>
        <block pos:line="242" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="243" pos:column="13">const</specifier> <name pos:line="243" pos:column="19">string</name></type> <name pos:line="243" pos:column="26">quote</name> <init pos:line="243" pos:column="32">= <expr><lit:literal type="string" pos:line="243" pos:column="34">"\"\""</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="244" pos:column="13">var</name></type> <name pos:line="244" pos:column="17">words</name> <init pos:line="244" pos:column="23">= <expr><call><name><name pos:line="244" pos:column="25">_dictionaryBasedSplitter</name><op:operator pos:line="244" pos:column="49">.</op:operator><name pos:line="244" pos:column="50">ExtractWords</name></name><argument_list pos:line="244" pos:column="62">(<argument><expr><name pos:line="244" pos:column="63">quote</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="245" pos:column="13">Assert</name><op:operator pos:line="245" pos:column="19">.</op:operator><name pos:line="245" pos:column="20">IsTrue</name></name><argument_list pos:line="245" pos:column="26">(<argument><expr><call><name><name pos:line="245" pos:column="27">words</name><op:operator pos:line="245" pos:column="32">.</op:operator><name pos:line="245" pos:column="33">Count</name></name><argument_list pos:line="245" pos:column="38">()</argument_list></call> <op:operator pos:line="245" pos:column="41">==</op:operator> <lit:literal type="number" pos:line="245" pos:column="44">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="246" pos:column="13">Assert</name><op:operator pos:line="246" pos:column="19">.</op:operator><name pos:line="246" pos:column="20">IsTrue</name></name><argument_list pos:line="246" pos:column="26">(<argument><expr><call><name><name pos:line="246" pos:column="27">words</name><op:operator pos:line="246" pos:column="32">.</op:operator><name pos:line="246" pos:column="33">ElementAt</name></name><argument_list pos:line="246" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="246" pos:column="43">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="246" pos:column="45">.</op:operator><call><name pos:line="246" pos:column="46">Equals</name><argument_list pos:line="246" pos:column="52">(<argument><expr><name pos:line="246" pos:column="53">quote</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="249" pos:column="9">[<expr><name pos:line="249" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="250" pos:column="9">public</specifier> <name pos:line="250" pos:column="16">void</name></type> <name pos:line="250" pos:column="21">AddSpecialWords</name><parameter_list pos:line="250" pos:column="36">()</parameter_list>
        <block pos:line="251" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="252" pos:column="13">_dictionaryBasedSplitter</name><op:operator pos:line="252" pos:column="37">.</op:operator><name pos:line="252" pos:column="38">AddWords</name></name><argument_list pos:line="252" pos:column="46">(<argument><expr><op:operator pos:line="252" pos:column="47">new</op:operator> <name><name pos:line="252" pos:column="51">string</name><index pos:line="252" pos:column="57">[]</index></name><block pos:line="252" pos:column="59">{<expr><lit:literal type="string" pos:line="252" pos:column="60">"abb"</lit:literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="253" pos:column="13">_dictionaryBasedSplitter</name><op:operator pos:line="253" pos:column="37">.</op:operator><name pos:line="253" pos:column="38">DoesWordExist</name></name><argument_list pos:line="253" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="253" pos:column="52">"abb"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="253" pos:column="59">DictionaryOption</name><op:operator pos:line="253" pos:column="75">.</op:operator><name pos:line="253" pos:column="76">NoStemming</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

    }</block></class>
}</block></namespace>
</unit>
