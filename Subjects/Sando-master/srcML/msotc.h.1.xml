<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="D:\Research\Subjects\Sando-master\LIBS\Extensions\inc\office10\msotc.h" pos:tabs="8"><comment type="block" format="doxygen" pos:line="1" pos:column="1">/****************************************************************************
	Msotc.h

	Owner: EricSchr
 	Copyright (c) 1997 Microsoft Corporation

	Declarations for functions related to TCO
****************************************************************************/</comment>

<cpp:pragma pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">pragma</cpp:directive> once</cpp:pragma>

<cpp:ifndef pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">ifndef</cpp:directive> <name pos:line="12" pos:column="9">MSOTC_H</name></cpp:ifndef>
<cpp:define pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="13" pos:column="9">MSOTC_H</name></cpp:macro> <cpp:value pos:line="13" pos:column="17">1</cpp:value></cpp:define>




<comment type="block" pos:line="18" pos:column="1">/*------------------------------------------------------------------------
	MsoGetPathPreference

	0 - Default behavior (whatever was given)
	1 - Prefer Drive Letter
	2 - Prefer UNC name

---------------------------------------------------------------- AndrewH -*/</comment>
<macro><name pos:line="26" pos:column="1">MSOAPI_</name><argument_list pos:line="26" pos:column="8">(<argument pos:line="26" pos:column="9">BYTE</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="26" pos:column="15">MsoGetPathPreference</name><argument_list pos:line="26" pos:column="35">()</argument_list></call></expr>;</expr_stmt>

<enum pos:line="28" pos:column="1">enum
<block pos:line="29" pos:column="1">{
	<decl><name pos:line="30" pos:column="9">msoNoPathPreference</name>	<init pos:line="30" pos:column="33">= <expr><lit:literal type="number" pos:line="30" pos:column="35">0</lit:literal></expr></init></decl><op:operator pos:line="30" pos:column="36">,</op:operator>
	<decl><name pos:line="31" pos:column="9">msoPathPreferLetter</name>	<init pos:line="31" pos:column="33">= <expr><lit:literal type="number" pos:line="31" pos:column="35">1</lit:literal></expr></init></decl><op:operator pos:line="31" pos:column="36">,</op:operator>
	<decl><name pos:line="32" pos:column="9">msoPathPreferUNC</name>	<init pos:line="32" pos:column="33">= <expr><lit:literal type="number" pos:line="32" pos:column="35">2</lit:literal></expr></init></decl>
}</block>;</enum>


<cpp:ifdef pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">ifdef</cpp:directive> <name pos:line="36" pos:column="8">OFFICE10</name></cpp:ifdef>
<comment type="line" pos:line="37" pos:column="1">// Stuff from tcpush.cpp cut from office9:</comment>

<comment type="block" pos:line="39" pos:column="1">/*------------------------------------------------------------------------
	MsoFCheckForUpdate

	Check the registry for the product of szPID for a software update
	if returns true lpwzAbstract and lpwzInfoUrl must be deallocated unless
	MsoFAlertForUpdate is called (in which case they are deallocated there)
---------------------------------------------------------------- t-andreh -*/</comment>
<macro><name pos:line="46" pos:column="1">MSOAPI_</name><argument_list pos:line="46" pos:column="8">(<argument pos:line="46" pos:column="9">BOOL</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="46" pos:column="15">MsoFCheckForUpdate</name><argument_list pos:line="46" pos:column="33">(<argument><expr><name pos:line="46" pos:column="34">char</name><op:operator pos:line="46" pos:column="38">*</op:operator> <name pos:line="46" pos:column="40">szPID</name></expr></argument>, <argument><expr><name pos:line="46" pos:column="47">LPWSTR</name> <op:operator pos:line="46" pos:column="54">*</op:operator><name pos:line="46" pos:column="55">lpwzAbstract</name></expr></argument>, <argument><expr><name pos:line="46" pos:column="69">LPWSTR</name> <op:operator pos:line="46" pos:column="76">*</op:operator><name pos:line="46" pos:column="77">lpwzInfoUrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:line="48" pos:column="1">/*------------------------------------------------------------------------
	MsoFFAlertForUpdate

	Do an alert box with the agent prompting the user about a software
	update, using the given strings for the abstract and url to a web
	page with information.  
	The strings are deallocated by this function.
---------------------------------------------------------------- t-andreh -*/</comment>
<macro><name pos:line="56" pos:column="1">MSOAPI_</name><argument_list pos:line="56" pos:column="8">(<argument pos:line="56" pos:column="9">BOOL</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="56" pos:column="15">MsoFAlertForUpdate</name><argument_list pos:line="56" pos:column="33">(<argument><expr><name pos:line="56" pos:column="34">char</name><op:operator pos:line="56" pos:column="38">*</op:operator> <name pos:line="56" pos:column="40">szPID</name></expr></argument>, <argument><expr><name pos:line="56" pos:column="47">LPWSTR</name> <op:operator pos:line="56" pos:column="54">*</op:operator><name pos:line="56" pos:column="55">lpwzAbstract</name></expr></argument>, <argument><expr><name pos:line="56" pos:column="69">LPWSTR</name> <op:operator pos:line="56" pos:column="76">*</op:operator><name pos:line="56" pos:column="77">lpwzInfoUrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:line="58" pos:column="1">#<cpp:directive pos:line="58" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="58" pos:column="8">// OFFICE10</comment>

<comment type="block" pos:line="60" pos:column="1">/*---------------------------------------------------------------------------
	MsoAppendToPath

	Append a string, ensuring that there's the proper slash in between.
------------------------------------------------------------------ JJames -*/</comment>
<macro><name pos:line="65" pos:column="1">MSOAPI_</name><argument_list pos:line="65" pos:column="8">(<argument pos:line="65" pos:column="9">void</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="65" pos:column="15">MsoAppendToPath</name><argument_list pos:line="65" pos:column="30">(<argument><expr pos:line="65" pos:column="31">const <name pos:line="65" pos:column="37">WCHAR</name> <op:operator pos:line="65" pos:column="43">*</op:operator><name pos:line="65" pos:column="44">wzSub</name></expr></argument>, <argument><expr><name pos:line="65" pos:column="51">WCHAR</name> <op:operator pos:line="65" pos:column="57">*</op:operator><name pos:line="65" pos:column="58">wzPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:line="67" pos:column="1">/*-----------------------------------------------------------------------------
	MsoWzAfterPath

	Return a pointer after the last backslash, or the start if there is none.
------------------------------------------------------------------ JJames ---*/</comment>
<macro><name pos:line="72" pos:column="1">MSOAPI_</name><argument_list pos:line="72" pos:column="8">(<argument pos:line="72" pos:column="9">WCHAR *</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="72" pos:column="18">MsoWzAfterPath</name><argument_list pos:line="72" pos:column="32">(<argument><expr pos:line="72" pos:column="33">const <name pos:line="72" pos:column="39">WCHAR</name> <op:operator pos:line="72" pos:column="45">*</op:operator><name pos:line="72" pos:column="46">wzPathName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:line="74" pos:column="1">/*-----------------------------------------------------------------------------
	MsoWzBeforeExt

	Return a pointer just before extension.
	Return NULL if there is no extension.
------------------------------------------------------------------ IgorZ ---*/</comment>
<macro><name pos:line="80" pos:column="1">MSOAPI_</name><argument_list pos:line="80" pos:column="8">(<argument pos:line="80" pos:column="9">WCHAR *</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="80" pos:column="18">MsoWzBeforeExt</name><argument_list pos:line="80" pos:column="32">(<argument><expr pos:line="80" pos:column="33">const <name pos:line="80" pos:column="39">WCHAR</name> <op:operator pos:line="80" pos:column="45">*</op:operator><name pos:line="80" pos:column="46">wzPathName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:line="82" pos:column="1">/*-----------------------------------------------------------------------------
	MsoFFileExist

	Returns fTrue iff the file exists and is not a directory.
------------------------------------------------------------------ JJames ---*/</comment>
<macro><name pos:line="87" pos:column="1">MSOAPI_</name><argument_list pos:line="87" pos:column="8">(<argument pos:line="87" pos:column="9">BOOL</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="87" pos:column="15">MsoFFileExist</name><argument_list pos:line="87" pos:column="28">(<argument><expr pos:line="87" pos:column="29">const <name pos:line="87" pos:column="35">WCHAR</name> <op:operator pos:line="87" pos:column="41">*</op:operator><name pos:line="87" pos:column="42">wzFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<comment type="block" pos:line="90" pos:column="1">/*---------------------------------------------------------------------------
	MsoFDirExist

	Return fTrue if and only if wzDir exists and is a directory.
---------------------------------------------------------------- EricSchr -*/</comment>
<macro><name pos:line="95" pos:column="1">MSOAPI_</name><argument_list pos:line="95" pos:column="8">(<argument pos:line="95" pos:column="9">BOOL</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="95" pos:column="15">MsoFDirExist</name><argument_list pos:line="95" pos:column="27">(<argument><expr pos:line="95" pos:column="28">const <name pos:line="95" pos:column="34">WCHAR</name> <op:operator pos:line="95" pos:column="40">*</op:operator><name pos:line="95" pos:column="41">wzDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<comment type="block" pos:line="98" pos:column="1">/*---------------------------------------------------------------------------
	MsoFCreateFullDirectory

	Create directory wzDir, creating subdirectories as necessary.
	Return fTrue if successful.
---------------------------------------------------------------- EricSchr -*/</comment>
<macro><name pos:line="104" pos:column="1">MSOAPI_</name><argument_list pos:line="104" pos:column="8">(<argument pos:line="104" pos:column="9">BOOL</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="104" pos:column="15">MsoFCreateFullDirectory</name><argument_list pos:line="104" pos:column="38">(<argument><expr pos:line="104" pos:column="39">const <name pos:line="104" pos:column="45">WCHAR</name> <op:operator pos:line="104" pos:column="51">*</op:operator><name pos:line="104" pos:column="52">wzDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<comment type="line" pos:line="107" pos:column="1">// MSOADF (MSO Application Data Folder)</comment>
<comment type="line" pos:line="108" pos:column="1">// The subfolder under the App Data folder</comment>
<typedef pos:line="109" pos:column="1">typedef <type><enum pos:line="109" pos:column="9">enum
	<block pos:line="110" pos:column="9">{
	<decl><name pos:line="111" pos:column="9">msoadfFirst</name></decl><op:operator pos:line="111" pos:column="20">,</op:operator> <decl><name pos:line="111" pos:column="22">msoadfMin</name> <init pos:line="111" pos:column="32">= <expr><name pos:line="111" pos:column="34">msoadfFirst</name></expr></init></decl><op:operator pos:line="111" pos:column="45">,</op:operator> <decl><name pos:line="111" pos:column="47">msoadfMinLessOne</name> <init pos:line="111" pos:column="64">= <expr><name pos:line="111" pos:column="66">msoadfMin</name> <op:operator pos:line="111" pos:column="76">-</op:operator> <lit:literal type="number" pos:line="111" pos:column="78">1</lit:literal></expr></init></decl><op:operator pos:line="111" pos:column="79">,</op:operator>
	
	<decl><name pos:line="113" pos:column="9">msoadfMicrosoft</name></decl><op:operator pos:line="113" pos:column="24">,</op:operator>	<comment type="line" pos:line="113" pos:column="33">// Application Data\Microsoft</comment>
	<decl><name pos:line="114" pos:column="9">msoadfWord</name></decl><op:operator pos:line="114" pos:column="19">,</op:operator>			<comment type="line" pos:line="114" pos:column="41">// msoadfMicrosoft\Word</comment>
	<decl><name pos:line="115" pos:column="9">msoadfExcel</name></decl><op:operator pos:line="115" pos:column="20">,</op:operator>		<comment type="line" pos:line="115" pos:column="33">// msoadfMicrosoft\Excel</comment>
	<decl><name pos:line="116" pos:column="9">msoadfGraph</name></decl><op:operator pos:line="116" pos:column="20">,</op:operator>		<comment type="line" pos:line="116" pos:column="33">// msoadfMicrosoft\Graph</comment>
	<decl><name pos:line="117" pos:column="9">msoadfAccess</name></decl><op:operator pos:line="117" pos:column="21">,</op:operator>		<comment type="line" pos:line="117" pos:column="33">// msoadfMicrosoft\Access</comment>
	<decl><name pos:line="118" pos:column="9">msoadfOutlook</name></decl><op:operator pos:line="118" pos:column="22">,</op:operator>		<comment type="line" pos:line="118" pos:column="33">// msoadfMicrosoft\Outlook</comment>
	<decl><name pos:line="119" pos:column="9">msoadfPowerPoint</name></decl><op:operator pos:line="119" pos:column="25">,</op:operator>	<comment type="line" pos:line="119" pos:column="33">// msoadfMicrosoft\PowerPoint</comment>
	<decl><name pos:line="120" pos:column="9">msoadfOffice</name></decl><op:operator pos:line="120" pos:column="21">,</op:operator>		<comment type="line" pos:line="120" pos:column="33">// msoadfMicrosoft\Office</comment>
	<decl><name pos:line="121" pos:column="9">msoadfStartup</name></decl><op:operator pos:line="121" pos:column="22">,</op:operator>		<comment type="line" pos:line="121" pos:column="33">// msoadfWord\Startup</comment>
	<decl><name pos:line="122" pos:column="9">msoadfXlstart</name></decl><op:operator pos:line="122" pos:column="22">,</op:operator>		<comment type="line" pos:line="122" pos:column="33">// msoadfExcel\Xlstart</comment>
	<decl><name pos:line="123" pos:column="9">msoadfXlURL</name></decl><op:operator pos:line="123" pos:column="20">,</op:operator>		<comment type="line" pos:line="123" pos:column="33">// msoadfExcel\URL</comment>
	<decl><name pos:line="124" pos:column="9">msoadfAddins</name></decl><op:operator pos:line="124" pos:column="21">,</op:operator>		<comment type="line" pos:line="124" pos:column="33">// msoadfMicrosoft\Addins</comment>
	<decl><name pos:line="125" pos:column="9">msoadfQueries</name></decl><op:operator pos:line="125" pos:column="22">,</op:operator>		<comment type="line" pos:line="125" pos:column="33">// msoadfMicrosoft\Queries</comment>
	<decl><name pos:line="126" pos:column="9">msoadfProof</name></decl><op:operator pos:line="126" pos:column="20">,</op:operator>		<comment type="line" pos:line="126" pos:column="33">// msoadfMicrosoft\Proof</comment>
	<decl><name pos:line="127" pos:column="9">msoadfTemplates</name></decl><op:operator pos:line="127" pos:column="24">,</op:operator>	<comment type="line" pos:line="127" pos:column="33">// msoadfMicrosoft\Templates</comment>
	<decl><name pos:line="128" pos:column="9">msoadfRecentFiles</name></decl><op:operator pos:line="128" pos:column="26">,</op:operator>	<comment type="line" pos:line="128" pos:column="33">// msoadfOffice\Recent Files</comment>
	<decl><name pos:line="129" pos:column="9">msoadfActors</name></decl><op:operator pos:line="129" pos:column="21">,</op:operator>		<comment type="line" pos:line="129" pos:column="33">// msoadfOffice\Actors</comment>
	<decl><name pos:line="130" pos:column="9">msoadfThemes</name></decl><op:operator pos:line="130" pos:column="21">,</op:operator>		<comment type="line" pos:line="130" pos:column="33">// msoadfMicrosoft\Themes</comment>
	<decl><name pos:line="131" pos:column="9">msoadfOSB</name></decl><op:operator pos:line="131" pos:column="18">,</op:operator>			<comment type="line" pos:line="131" pos:column="41">// msoadfOffice\OSB</comment>
	<decl><name pos:line="132" pos:column="9">msoadfStationery</name></decl><op:operator pos:line="132" pos:column="25">,</op:operator>	<comment type="line" pos:line="132" pos:column="33">// msoadfMicrosoft\Stationery</comment>
	<decl><name pos:line="133" pos:column="9">msoadfSignatures</name></decl><op:operator pos:line="133" pos:column="25">,</op:operator>	<comment type="line" pos:line="133" pos:column="33">// msoadfMicrosoft\Signatures</comment>
	<decl><name pos:line="134" pos:column="9">msoadfPublisher</name></decl><op:operator pos:line="134" pos:column="24">,</op:operator>	<comment type="line" pos:line="134" pos:column="33">// msoadfMicrosoft\Publisher</comment>
	<decl><name pos:line="135" pos:column="9">msoadfDesigner</name></decl><op:operator pos:line="135" pos:column="23">,</op:operator>		<comment type="line" pos:line="135" pos:column="33">// msoadfMicrosoft\Designer</comment>
	<decl><name pos:line="136" pos:column="9">msoadfDesignerServers</name></decl><op:operator pos:line="136" pos:column="30">,</op:operator> <comment type="line" pos:line="136" pos:column="32">// msoadfDesigner\My Servers</comment>
	<decl><name pos:line="137" pos:column="9">msoadfDesignerPersonalFolders</name></decl><op:operator pos:line="137" pos:column="38">,</op:operator> <comment type="line" pos:line="137" pos:column="40">// msoadfDesigner\Personal Folders</comment>
	<decl><name pos:line="138" pos:column="9">msoadfMse</name></decl><op:operator pos:line="138" pos:column="18">,</op:operator> 			<comment type="line" pos:line="138" pos:column="41">// msoadfMicrosoft\Mse</comment>

	<decl><name pos:line="140" pos:column="9">msoadfMax</name></decl><op:operator pos:line="140" pos:column="18">,</op:operator> <decl><name pos:line="140" pos:column="20">msoadfLast</name> <init pos:line="140" pos:column="31">= <expr><name pos:line="140" pos:column="33">msoadfMax</name> <op:operator pos:line="140" pos:column="43">-</op:operator> <lit:literal type="number" pos:line="140" pos:column="45">1</lit:literal></expr></init></decl>
	}</block></enum></type> <name pos:line="141" pos:column="11">MSOADF</name>;</typedef>


<comment type="block" pos:line="144" pos:column="1">/*---------------------------------------------------------------------------
	MsoHrGetAppDataFolder

	Return the location of the user's Application Data folder in his/her
	profile.  It appends (and creates) the subdirectory specified by adf.
	'wz' is the buffer where the result will go.  'wz' should be at least
	MAX_PATH in size.  Use 'fCreate' to specify if the folder should be
	created if it doesn't exist already.  If fCreate is FALSE and the
	directory doesn't exist, return E_FAIL, otherwise return S_OK.
---------------------------------------------------------------- EricSchr -*/</comment>
<macro><name pos:line="154" pos:column="1">MSOAPI_</name><argument_list pos:line="154" pos:column="8">(<argument pos:line="154" pos:column="9">HRESULT</argument>)</argument_list></macro> <macro><name pos:line="154" pos:column="18">MsoHrGetAppDataFolder</name><argument_list pos:line="154" pos:column="39">(<argument pos:line="154" pos:column="40">WCHAR *wz</argument>, <argument pos:line="154" pos:column="51">MSOADF adf</argument>, <argument pos:line="154" pos:column="63">BOOL fCreate</argument>)</argument_list></macro><empty_stmt pos:line="154" pos:column="76">;</empty_stmt>


<comment type="block" pos:line="157" pos:column="1">/*---------------------------------------------------------------------------
	MsoHrGetCommonAppDataFolder

	Same as MsoHrGetAppDataFolder, but takes the All Users\Application Data
	directory as opposed to the &lt;username&gt;\Application Data directory.
------------------------------------------------------------------ DVierz -*/</comment>
<macro><name pos:line="163" pos:column="1">MSOAPI_</name><argument_list pos:line="163" pos:column="8">(<argument pos:line="163" pos:column="9">HRESULT</argument>)</argument_list></macro> <macro><name pos:line="163" pos:column="18">MsoHrGetCommonAppDataFolder</name><argument_list pos:line="163" pos:column="45">(<argument pos:line="163" pos:column="46">WCHAR *wz</argument>, <argument pos:line="163" pos:column="57">MSOADF adf</argument>, <argument pos:line="163" pos:column="69">BOOL fCreate</argument>)</argument_list></macro><empty_stmt pos:line="163" pos:column="82">;</empty_stmt>

<comment type="block" pos:line="165" pos:column="1">/*---------------------------------------------------------------------------
	MsoHrGetLocalAppDataFolder

	Same as MsoHrGetAppDataFolder, but returns the local (NON-roaming)
    [...\&lt;username&gt;\Local Settings\Application Data] directory as 
    opposed to the [...\&lt;username&gt;\Application Data] directory.
---------------------------------------------------------------- camerost -*/</comment>
<macro><name pos:line="172" pos:column="1">MSOAPI_</name><argument_list pos:line="172" pos:column="8">(<argument pos:line="172" pos:column="9">HRESULT</argument>)</argument_list></macro> <macro><name pos:line="172" pos:column="18">MsoHrGetLocalAppDataFolder</name><argument_list pos:line="172" pos:column="44">(<argument pos:line="172" pos:column="45">WCHAR *wz</argument>, <argument pos:line="172" pos:column="56">MSOADF adf</argument>, <argument pos:line="172" pos:column="68">BOOL fCreate</argument>)</argument_list></macro><empty_stmt pos:line="172" pos:column="81">;</empty_stmt>

<comment type="line" pos:line="174" pos:column="1">// behavioral flags</comment>
<cpp:define pos:line="175" pos:column="1">#<cpp:directive pos:line="175" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="175" pos:column="9">fadfCheckExist</name></cpp:macro> <cpp:value pos:line="175" pos:column="24">0x01</cpp:value></cpp:define>
<cpp:define pos:line="176" pos:column="1">#<cpp:directive pos:line="176" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="176" pos:column="9">fadfCreate</name></cpp:macro>     <cpp:value pos:line="176" pos:column="24">0x02</cpp:value></cpp:define>
<cpp:define pos:line="177" pos:column="1">#<cpp:directive pos:line="177" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="177" pos:column="9">grfadfDefault</name></cpp:macro>  <cpp:value pos:line="177" pos:column="24">(fadfCheckExist | fadfCreate)</cpp:value></cpp:define>

<comment type="line" pos:line="179" pos:column="1">// specific folder type flags</comment>
<cpp:define pos:line="180" pos:column="1">#<cpp:directive pos:line="180" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="180" pos:column="9">fadftRoamingAppData</name></cpp:macro>  <cpp:value pos:line="180" pos:column="30">0</cpp:value></cpp:define>
<cpp:define pos:line="181" pos:column="1">#<cpp:directive pos:line="181" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="181" pos:column="9">fadftCommonAppData</name></cpp:macro>   <cpp:value pos:line="181" pos:column="30">1</cpp:value></cpp:define>
<cpp:define pos:line="182" pos:column="1">#<cpp:directive pos:line="182" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="182" pos:column="9">fadftLocalAppData</name></cpp:macro>    <cpp:value pos:line="182" pos:column="30">2</cpp:value></cpp:define>

<comment type="block" pos:line="184" pos:column="1">/*---------------------------------------------------------------------------
	MsoHrGetAppDataFolderEx
------------------------------------------------------- HAILIU / camerost -*/</comment>
<macro><name pos:line="187" pos:column="1">MSOAPI_</name><argument_list pos:line="187" pos:column="8">(<argument pos:line="187" pos:column="9">HRESULT</argument>)</argument_list></macro> <macro><name pos:line="187" pos:column="18">MsoHrGetAppDataFolderEx</name><argument_list pos:line="187" pos:column="41">(<argument pos:line="187" pos:column="42">WCHAR *wz</argument>, <argument pos:line="187" pos:column="53">MSOADF adf</argument>, <argument pos:line="187" pos:column="65">DWORD grf</argument>, <argument pos:line="187" pos:column="76">int adfType</argument>)</argument_list></macro><empty_stmt pos:line="187" pos:column="88">;</empty_stmt>

<comment type="block" pos:line="189" pos:column="1">/*---------------------------------------------------------------------------
	MsoHrGetMyDocumentsFolder

	Return the location of the user's My Documents folder in their profile.
	'wz' is the buffer where the result will go.  It must be at least
	MAX_PATH in size.  Always return S_OK.
---------------------------------------------------------------- EricSchr -*/</comment>
<macro><name pos:line="196" pos:column="1">MSOAPI_</name><argument_list pos:line="196" pos:column="8">(<argument pos:line="196" pos:column="9">HRESULT</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="196" pos:column="18">MsoHrGetMyDocumentsFolder</name><argument_list pos:line="196" pos:column="43">(<argument><expr><name pos:line="196" pos:column="44">WCHAR</name> <op:operator pos:line="196" pos:column="50">*</op:operator><name pos:line="196" pos:column="51">wz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<comment type="block" pos:line="199" pos:column="1">/*---------------------------------------------------------------------------
	MsoHrGetFavoritesFolder

	Return the location of the user's Favorites folder in their profile.
	'wz' is the buffer where the result will go.  It must be at least
	MAX_PATH in size.  Always return S_OK.
---------------------------------------------------------------- EricSchr -*/</comment>
<macro><name pos:line="206" pos:column="1">MSOAPI_</name><argument_list pos:line="206" pos:column="8">(<argument pos:line="206" pos:column="9">HRESULT</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="206" pos:column="18">MsoHrGetFavoritesFolder</name><argument_list pos:line="206" pos:column="41">(<argument><expr><name pos:line="206" pos:column="42">WCHAR</name> <op:operator pos:line="206" pos:column="48">*</op:operator><name pos:line="206" pos:column="49">wz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<comment type="block" pos:line="209" pos:column="1">/*---------------------------------------------------------------------------
	MsoHrGetDesktopFolder

	Return the location of the user's Desktop folder in their profile.
	'wa' is the place where the result will go.  It must be at least
	MAX_PATH in size.  Always return S_OK.
---------------------------------------------------------------- EricSchr -*/</comment>
<macro><name pos:line="216" pos:column="1">MSOAPI_</name><argument_list pos:line="216" pos:column="8">(<argument pos:line="216" pos:column="9">HRESULT</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="216" pos:column="18">MsoHrGetDesktopFolder</name><argument_list pos:line="216" pos:column="39">(<argument><expr><name pos:line="216" pos:column="40">WCHAR</name> <op:operator pos:line="216" pos:column="46">*</op:operator><name pos:line="216" pos:column="47">wz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<comment type="block" pos:line="219" pos:column="1">/*---------------------------------------------------------------------------
	MsoFIsAppDataFolder

	Determine if 'wz' is the application data folder specified by 'msoadf'.
---------------------------------------------------------------- EricSchr -*/</comment>
<macro><name pos:line="224" pos:column="1">MSOAPI_</name><argument_list pos:line="224" pos:column="8">(<argument pos:line="224" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="224" pos:column="15">MsoFIsAppDataFolder</name><argument_list pos:line="224" pos:column="34">(<argument pos:line="224" pos:column="35">const WCHAR *wz</argument>, <argument pos:line="224" pos:column="52">MSOADF adf</argument>)</argument_list></macro><empty_stmt pos:line="224" pos:column="63">;</empty_stmt>


<comment type="block" pos:line="227" pos:column="1">/*---------------------------------------------------------------------------
	MsoFIsMyDocumentsFolder

	Determine if 'wz' is the My Documents folder.
---------------------------------------------------------------- EricSchr -*/</comment>
<macro><name pos:line="232" pos:column="1">MSOAPI_</name><argument_list pos:line="232" pos:column="8">(<argument pos:line="232" pos:column="9">BOOL</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="232" pos:column="15">MsoFIsMyDocumentsFolder</name><argument_list pos:line="232" pos:column="38">(<argument><expr pos:line="232" pos:column="39">const <name pos:line="232" pos:column="45">WCHAR</name> <op:operator pos:line="232" pos:column="51">*</op:operator><name pos:line="232" pos:column="52">wz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<comment type="block" pos:line="235" pos:column="1">/*---------------------------------------------------------------------------
	MsoFFileInAppDataFolder

	Determine if the non-leaf part of 'wz' is the app data folder specified
	by 'adf'.
---------------------------------------------------------------- EricSchr -*/</comment>
<macro><name pos:line="241" pos:column="1">MSOAPIX_</name><argument_list pos:line="241" pos:column="9">(<argument pos:line="241" pos:column="10">BOOL</argument>)</argument_list></macro> <macro><name pos:line="241" pos:column="16">MsoFFileInAppDataFolder</name><argument_list pos:line="241" pos:column="39">(<argument pos:line="241" pos:column="40">const WCHAR *wz</argument>, <argument pos:line="241" pos:column="57">MSOADF adf</argument>)</argument_list></macro><empty_stmt pos:line="241" pos:column="68">;</empty_stmt>
	

<comment type="block" pos:line="244" pos:column="1">/*---------------------------------------------------------------------------
	MsoFStripAppDataFolder

	If the non-leaf path is the app data folder specified by 'adf',
	remove it.  Return fTrue if the removal occurs, fFalse otherwise.
---------------------------------------------------------------- EricSchr -*/</comment>
<macro><name pos:line="250" pos:column="1">MSOAPI_</name><argument_list pos:line="250" pos:column="8">(<argument pos:line="250" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="250" pos:column="15">MsoFStripAppDataFolder</name><argument_list pos:line="250" pos:column="37">(<argument pos:line="250" pos:column="38">WCHAR *wz</argument>, <argument pos:line="250" pos:column="49">MSOADF adf</argument>)</argument_list></macro><empty_stmt pos:line="250" pos:column="60">;</empty_stmt>


<comment type="block" pos:line="253" pos:column="1">/*---------------------------------------------------------------------------
	MsoFAddAppDataFolder

	If 'wz' is just a filename (determined by searching for a backslash),
	then prepend the app data folder specified by 'msoadf'.  Return fTrue if
	the folder is added, fFalse otherwise.  Do nothing and return fFalse
	if 'wz' is empty.
---------------------------------------------------------------- EricSchr -*/</comment>
<macro><name pos:line="261" pos:column="1">MSOAPI_</name><argument_list pos:line="261" pos:column="8">(<argument pos:line="261" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="261" pos:column="15">MsoFAddAppDataFolder</name><argument_list pos:line="261" pos:column="35">(<argument pos:line="261" pos:column="36">WCHAR *wz</argument>, <argument pos:line="261" pos:column="47">MSOADF adf</argument>)</argument_list></macro><empty_stmt pos:line="261" pos:column="58">;</empty_stmt>


<comment type="block" pos:line="264" pos:column="1">/*---------------------------------------------------------------------------
	MsoHrGetUserQueriesFolder

	Look in the registry for the Queries folder (can be set only by
	policy).  If not there, return the Queries folder from
	Application Data.  Return S_OK.
---------------------------------------------------------------- EricSchr -*/</comment>
<macro><name pos:line="271" pos:column="1">MSOAPI_</name><argument_list pos:line="271" pos:column="8">(<argument pos:line="271" pos:column="9">HRESULT</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="271" pos:column="18">MsoHrGetUserQueriesFolder</name><argument_list pos:line="271" pos:column="43">(<argument><expr><name pos:line="271" pos:column="44">WCHAR</name> <op:operator pos:line="271" pos:column="50">*</op:operator><name pos:line="271" pos:column="51">wz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:ifdef pos:line="274" pos:column="1">#<cpp:directive pos:line="274" pos:column="2">ifdef</cpp:directive> <name pos:line="274" pos:column="8">LVP</name></cpp:ifdef>
<comment type="line" pos:line="275" pos:column="1">// HwndForLVType is a callback function type to be implemented by the</comment>
<comment type="line" pos:line="276" pos:column="1">// application.  If it is set, LV will call it to get an hwnd to parent</comment>
<comment type="line" pos:line="277" pos:column="1">// off of instead of trying to figure it out.  If the function returns</comment>
<comment type="line" pos:line="278" pos:column="1">// NULL, the LV code will not bring up the dialog but instead make</comment>
<comment type="line" pos:line="279" pos:column="1">// the callback again later.</comment>
<typedef pos:line="280" pos:column="1">typedef <function_decl><type><name pos:line="280" pos:column="9">HWND</name></type> (<name pos:line="280" pos:column="15">CALLBACK</name> <type:modifier pos:line="280" pos:column="24">*</type:modifier><name pos:line="280" pos:column="25">PfnHwndForLV</name>)<parameter_list pos:line="280" pos:column="38">(<param><decl><type><name pos:line="280" pos:column="39">void</name></type></decl></param>)</parameter_list>;</function_decl></typedef>
<cpp:endif pos:line="281" pos:column="1">#<cpp:directive pos:line="281" pos:column="2">endif</cpp:directive></cpp:endif>	<comment type="line" pos:line="281" pos:column="9">// LVP</comment>

<comment type="line" pos:line="283" pos:column="1">// MSOLVP (MSO License Verification Property)</comment>
<comment type="line" pos:line="284" pos:column="1">// Used with MsoSetLVProperty.</comment>
<typedef pos:line="285" pos:column="1">typedef <type><enum pos:line="285" pos:column="9">enum
	<block pos:line="286" pos:column="9">{
	<decl><name pos:line="287" pos:column="9">msolvpFirst</name></decl><op:operator pos:line="287" pos:column="20">,</op:operator> <decl><name pos:line="287" pos:column="22">msolvpMin</name> <init pos:line="287" pos:column="32">= <expr><name pos:line="287" pos:column="34">msolvpFirst</name></expr></init></decl><op:operator pos:line="287" pos:column="45">,</op:operator> <decl><name pos:line="287" pos:column="47">msolvpMinLessOne</name> <init pos:line="287" pos:column="64">= <expr><name pos:line="287" pos:column="66">msolvpMin</name> <op:operator pos:line="287" pos:column="76">-</op:operator> <lit:literal type="number" pos:line="287" pos:column="78">1</lit:literal></expr></init></decl><op:operator pos:line="287" pos:column="79">,</op:operator>

	<decl><name pos:line="289" pos:column="9">msolvpNoLV</name></decl><op:operator pos:line="289" pos:column="19">,</op:operator>		<comment type="line" pos:line="289" pos:column="33">// Turns off License Verification, pv should be NULL.</comment>
	<decl><name pos:line="290" pos:column="9">msolvpNoModal</name></decl><op:operator pos:line="290" pos:column="22">,</op:operator>	<comment type="line" pos:line="290" pos:column="25">// Tells LV that can't go modal yet and when it can,</comment>
					<comment type="line" pos:line="291" pos:column="41">// pv should be a BOOL.  Its primary purpose is to</comment>
					<comment type="line" pos:line="292" pos:column="41">// prevent a modal dialog during OLE interactions.</comment>
					<comment type="line" pos:line="293" pos:column="41">// Call with TRUE to disable any modal dialog, FALSE</comment>
					<comment type="line" pos:line="294" pos:column="41">// to turn back on.  It is also used by the Gimme</comment>
					<comment type="line" pos:line="295" pos:column="41">// layer (including Darwin dialogs).</comment>
	<decl><name pos:line="296" pos:column="9">msolvpPfnHwnd</name></decl><op:operator pos:line="296" pos:column="22">,</op:operator>	<comment type="line" pos:line="296" pos:column="25">// Passes to LV a callback function which it can</comment>
					<comment type="line" pos:line="297" pos:column="41">// use to ask the app for a window to parent off</comment>
					<comment type="line" pos:line="298" pos:column="41">// of. 'pv' should be a function of type PfnHwndForLV.</comment>

	<decl><name pos:line="300" pos:column="9">msolvpMax</name></decl><op:operator pos:line="300" pos:column="18">,</op:operator> <decl><name pos:line="300" pos:column="20">msolvpLast</name> <init pos:line="300" pos:column="31">= <expr><name pos:line="300" pos:column="33">msolvpMax</name> <op:operator pos:line="300" pos:column="43">-</op:operator> <lit:literal type="number" pos:line="300" pos:column="45">1</lit:literal></expr></init></decl>
	}</block></enum></type> <name pos:line="301" pos:column="11">MSOLVP</name>;</typedef>

<comment type="block" pos:line="303" pos:column="1">/*---------------------------------------------------------------------------
	MsoSetLVProperty

	Use this function to set specific properties for License Verification to
	use.  See the MSOLVP declaration to determine what 'pv' should be.
---------------------------------------------------------------- EricSchr -*/</comment>
<macro><name pos:line="309" pos:column="1">MSOAPI_</name><argument_list pos:line="309" pos:column="8">(<argument pos:line="309" pos:column="9">void</argument>)</argument_list></macro> <macro><name pos:line="309" pos:column="15">MsoSetLVProperty</name><argument_list pos:line="309" pos:column="31">(<argument pos:line="309" pos:column="32">MSOLVP lvp</argument>, <argument pos:line="309" pos:column="44">void *pv</argument>)</argument_list></macro><empty_stmt pos:line="309" pos:column="53">;</empty_stmt>


<cpp:ifdef pos:line="312" pos:column="1">#<cpp:directive pos:line="312" pos:column="2">ifdef</cpp:directive> <name pos:line="312" pos:column="8">LVP</name></cpp:ifdef>
<comment type="block" pos:line="313" pos:column="1">/*---------------------------------------------------------------------------
	MsoFDoLV

	For applications that don't participate in the component manager, they
	need a way to fire off the License Verification dialog.  This is a single
	API that they can call.  Note that a TRUE return value means that the
	application can run, while a FALSE return value means that the
	application needs to call again at a later time.  If the verification
	fails, there is no return value because the code will automatically
	exit.
---------------------------------------------------------------- EricSchr -*/</comment>
<macro><name pos:line="324" pos:column="1">MSOAPIX_</name><argument_list pos:line="324" pos:column="9">(<argument pos:line="324" pos:column="10">BOOL</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="324" pos:column="16">MsoFDoLV</name><argument_list pos:line="324" pos:column="24">(<argument><expr><name pos:line="324" pos:column="25">void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="325" pos:column="1">#<cpp:directive pos:line="325" pos:column="2">endif</cpp:directive></cpp:endif>	<comment type="line" pos:line="325" pos:column="9">// LVP</comment>



<comment type="block" pos:line="329" pos:column="1">/*---------------------------------------------------------------------------
	 MsoFixMeDlg
	
	 Bring up the Office FixMe dialog.
---------------------------------------------------------------- NancyDo -*/</comment>
<macro><name pos:line="334" pos:column="1">MSOAPI_</name><argument_list pos:line="334" pos:column="8">(<argument pos:line="334" pos:column="9">HRESULT</argument>)</argument_list></macro> <macro><name pos:line="334" pos:column="18">MsoFixMeDlg</name><argument_list pos:line="334" pos:column="29">(<argument pos:line="334" pos:column="30">HMSOINST hinst</argument>, <argument pos:line="334" pos:column="46">HWND hwndOwner</argument>)</argument_list></macro><empty_stmt pos:line="334" pos:column="61">;</empty_stmt>


<comment type="block" pos:line="337" pos:column="1">/*---------------------------------------------------------------------------
	 MsoHrFixMe
	
	 Skip the Office FixMe dialog and just do the fixing, using the two
	 settings as indicated.
---------------------------------------------------------------- BrianHi -*/</comment>
<macro><name pos:line="343" pos:column="1">MSOAPI_</name><argument_list pos:line="343" pos:column="8">(<argument pos:line="343" pos:column="9">HRESULT</argument>)</argument_list></macro> <macro><name pos:line="343" pos:column="18">MsoHrFixMe</name><argument_list pos:line="343" pos:column="28">(<argument pos:line="343" pos:column="29">BOOL fRestoreShortcuts</argument>, <argument pos:line="343" pos:column="53">BOOL fResetSettings</argument>)</argument_list></macro><empty_stmt pos:line="343" pos:column="73">;</empty_stmt>



<comment type="block" format="doxygen" pos:line="347" pos:column="1">/****************************************************************************
	Office layer over Darwin (GimmeFile and friends).

	* DO NOT EVER CALL DARWIN DIRECTLY. ALWAYS GO THROUGH OFFICE. *
	All MsoGimme* APIs are provided for overall performance, extra resiliency,
	and for your convenience. Gimme(TM) is a trademark of KirkG.

	The structures below add up to a MSOTCFCF structure which you have
	to give to IMsoUser::FHookDarwinTables.

	This structure holds tables which describe to MsoFGimmeFile and
	associated APIs the structure of files, components, and features, as
	authored in Setup. From the app's point of view, instead of accessing
	files by name, you access them by fid (file id). Some files are
	known by Office and the id is built in (see msotcdar.h). Others used
	only by your app need to be hooked up to Office so that the Office
	code can apply the same resiliency rules as with its own files.

	The tcmsi.exe tool (in otools) takes as input files which describe the
	Setup database layout, and output two files:
	- a header, which lists fid's local to your app (and cid's for
		components, and ftid's for features).
	- a C file, which contains the MSOTCFCF structure for your app.

	Note that Office itself uses this tool to generate msotcdar.h (included
	below) and tcdar.inc (included in the bowels of Office code).

	Expect the internals of the MSOTCFCF structure to move around a lot
	as we figure out boot, string loading, etc.
****************************************************************************/</comment>


<comment type="line" pos:line="379" pos:column="1">// this flag controls whether we build a single table with enums (1)</comment>
<comment type="line" pos:line="380" pos:column="1">// or externs to individual structs per row (0)</comment>
<cpp:define pos:line="381" pos:column="1">#<cpp:directive pos:line="381" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="381" pos:column="9">MSOGIMME_INDEXIDS</name></cpp:macro> <cpp:value pos:line="381" pos:column="27">1</cpp:value></cpp:define>

<typedef pos:line="383" pos:column="1">typedef <type><name pos:line="383" pos:column="9">int</name></type> <name pos:line="383" pos:column="13">msofidT</name>;</typedef>
<typedef pos:line="384" pos:column="1">typedef <type><name pos:line="384" pos:column="9">int</name></type> <name pos:line="384" pos:column="13">msocidT</name>;</typedef>
<typedef pos:line="385" pos:column="1">typedef <type><name pos:line="385" pos:column="9">int</name></type> <name pos:line="385" pos:column="13">msoftidT</name>;</typedef>

<comment type="line" pos:line="387" pos:column="1">// must be in ssync with otcdarmake's output</comment>
<cpp:define pos:line="388" pos:column="1">#<cpp:directive pos:line="388" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="388" pos:column="9">msoidstcoGeneric</name></cpp:macro> <cpp:value pos:line="388" pos:column="26">0</cpp:value></cpp:define>

<typedef pos:line="390" pos:column="1">typedef <type><enum pos:line="390" pos:column="9">enum
	<block pos:line="391" pos:column="9">{
	<decl><name pos:line="392" pos:column="9">msotcidmin</name> <init pos:line="392" pos:column="20">= <expr><lit:literal type="number" pos:line="392" pos:column="22">0</lit:literal></expr></init></decl><op:operator pos:line="392" pos:column="23">,</op:operator>
	<decl><name pos:line="393" pos:column="9">msofid</name> <init pos:line="393" pos:column="16">= <expr><lit:literal type="number" pos:line="393" pos:column="18">0</lit:literal></expr></init></decl><op:operator pos:line="393" pos:column="19">,</op:operator>
	<decl><name pos:line="394" pos:column="9">msocid</name></decl><op:operator pos:line="394" pos:column="15">,</op:operator>
	<decl><name pos:line="395" pos:column="9">msoftid</name></decl><op:operator pos:line="395" pos:column="16">,</op:operator>
	<decl><name pos:line="396" pos:column="9">msoqcid</name></decl><op:operator pos:line="396" pos:column="16">,</op:operator>
	<decl><name pos:line="397" pos:column="9">msoqfid</name></decl><op:operator pos:line="397" pos:column="16">,</op:operator>
	<decl><name pos:line="398" pos:column="9">msotcidmax</name> <init pos:line="398" pos:column="20">= <expr><name pos:line="398" pos:column="22">msoqfid</name></expr></init></decl>
	}</block></enum></type> <name pos:line="399" pos:column="11">MSOTCID</name>;</typedef>

<typedef pos:line="401" pos:column="1">typedef	<type><enum pos:line="401" pos:column="9">enum <block pos:line="401" pos:column="14">{ <comment type="line" pos:line="401" pos:column="16">// default language</comment>
	<decl><name pos:line="402" pos:column="9">msolangNone</name></decl><op:operator pos:line="402" pos:column="20">,</op:operator> 
	<decl><name pos:line="403" pos:column="9">msolangInstall</name></decl><op:operator pos:line="403" pos:column="23">,</op:operator> 
	<decl><name pos:line="404" pos:column="9">msolangUI</name></decl><op:operator pos:line="404" pos:column="18">,</op:operator> 
	<decl><name pos:line="405" pos:column="9">msolangHelp</name></decl><op:operator pos:line="405" pos:column="20">,</op:operator>
	<decl><name pos:line="406" pos:column="9">msolangInstallFlavor</name></decl><op:operator pos:line="406" pos:column="29">,</op:operator>
	<decl><name pos:line="407" pos:column="9">msolangPreviousUI</name></decl><op:operator pos:line="407" pos:column="26">,</op:operator>
	<decl><name pos:line="408" pos:column="9">msolangPreviousInstallFlavor</name></decl>
	}</block></enum></type> <name pos:line="409" pos:column="11">msolangT</name>;</typedef>

<typedef pos:line="411" pos:column="1">typedef <type><struct pos:line="411" pos:column="9">struct <name pos:line="411" pos:column="16">_msotcfileinfo</name> <block pos:line="411" pos:column="31">{<public type="default" pos:line="411" pos:column="32">
	<decl_stmt><decl><type><name pos:line="412" pos:column="9">CHAR</name> <type:modifier pos:line="412" pos:column="14">*</type:modifier></type><name pos:line="412" pos:column="15">szFilename</name></decl>;</decl_stmt>		<comment type="line" pos:line="412" pos:column="41">// filename</comment>
	<decl_stmt><decl><type><name pos:line="413" pos:column="9">msocidT</name></type> <name pos:line="413" pos:column="17">cid</name></decl>;</decl_stmt>			<comment type="line" pos:line="413" pos:column="41">// component ID</comment>
</public>}</block></struct></type> <name pos:line="414" pos:column="3">MSOTCFILEINFO</name>;</typedef>

<typedef pos:line="416" pos:column="1">typedef <type><struct pos:line="416" pos:column="9">struct <name pos:line="416" pos:column="16">_msotccomponentinfo</name> <block pos:line="416" pos:column="36">{<public type="default" pos:line="416" pos:column="37">
	<decl_stmt><decl><type><name pos:line="417" pos:column="9">GUID</name></type> <name pos:line="417" pos:column="14">msoguid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="418" pos:column="9">CHAR</name> <type:modifier pos:line="418" pos:column="14">*</type:modifier></type><name pos:line="418" pos:column="15">szKeyFile</name></decl>;</decl_stmt>		<comment type="line" pos:line="418" pos:column="41">// name of keyfile or static qualifier</comment>
	<decl_stmt><decl><type><name pos:line="419" pos:column="9">msoftidT</name></type> <name pos:line="419" pos:column="18">ftid</name></decl>;</decl_stmt>			<comment type="line" pos:line="419" pos:column="41">// feature ID, -1 if belongs to multiple features</comment>
	<decl_stmt><decl><type><name pos:line="420" pos:column="9">int</name></type> <name pos:line="420" pos:column="13">idsInstall</name></decl>;</decl_stmt>			<comment type="line" pos:line="420" pos:column="41">// string id, msoidstcoGeneric if none</comment>
	<decl_stmt><decl><type><name pos:line="421" pos:column="9">int</name></type> <name pos:line="421" pos:column="13">idsRepair</name></decl>;</decl_stmt>			<comment type="line" pos:line="421" pos:column="41">// TODO(JBelt): delete (otcdarmake, ssync with VB)</comment>
	<macro><name pos:line="422" pos:column="9">unsigned</name></macro> <label><name pos:line="422" pos:column="18">langDefault</name> :</label> <expr_stmt><expr><lit:literal type="number" pos:line="422" pos:column="32">2</lit:literal></expr>;</expr_stmt>
	<macro><name pos:line="423" pos:column="9">unsigned</name></macro> <label><name pos:line="423" pos:column="18">fLcidQualified</name> :</label> <expr_stmt><expr><lit:literal type="number" pos:line="423" pos:column="35">1</lit:literal></expr>;</expr_stmt>
	<macro><name pos:line="424" pos:column="9">unsigned</name></macro> <label><name pos:line="424" pos:column="18">fFilenameQualified</name> :</label> <expr_stmt><expr><lit:literal type="number" pos:line="424" pos:column="39">1</lit:literal></expr>;</expr_stmt>
	<macro><name pos:line="425" pos:column="9">unsigned</name></macro> <label><name pos:line="425" pos:column="18">fOtherQualified</name> :</label> <expr_stmt><expr><lit:literal type="number" pos:line="425" pos:column="36">1</lit:literal></expr>;</expr_stmt>
	<macro><name pos:line="426" pos:column="9">unsigned</name></macro> <label><name pos:line="426" pos:column="18">fStaticQualified</name> :</label> <expr_stmt><expr><lit:literal type="number" pos:line="426" pos:column="37">1</lit:literal></expr>;</expr_stmt>
</public>}</block></struct></type> <name pos:line="427" pos:column="3">MSOTCCOMPONENTINFO</name>;</typedef>

<typedef pos:line="429" pos:column="1">typedef <type><struct pos:line="429" pos:column="9">struct <name pos:line="429" pos:column="16">_msotcfeatureinfo</name> <block pos:line="429" pos:column="34">{<public type="default" pos:line="429" pos:column="35">
	<decl_stmt><decl><type><name pos:line="430" pos:column="9">CHAR</name> <type:modifier pos:line="430" pos:column="14">*</type:modifier></type><name pos:line="430" pos:column="15">szFtid</name></decl>;</decl_stmt>			<comment type="line" pos:line="430" pos:column="41">// GUID</comment>
	<decl_stmt><decl><type><name pos:line="431" pos:column="9">msocidT</name></type> <name pos:line="431" pos:column="17">qcid</name></decl>;</decl_stmt>			<comment type="line" pos:line="431" pos:column="41">// publish component for cross-product features, -1 if none</comment>
	<decl_stmt><decl><type><name pos:line="432" pos:column="9">int</name></type> <name pos:line="432" pos:column="13">idsInstall</name></decl>;</decl_stmt>			<comment type="line" pos:line="432" pos:column="41">// string id, msoidstcoGeneric if none</comment>
	<decl_stmt><decl><type><name pos:line="433" pos:column="9">int</name></type> <name pos:line="433" pos:column="13">idsRepair</name></decl>;</decl_stmt>			<comment type="line" pos:line="433" pos:column="41">// TODO(JBelt): delete (otcdarmake, ssync with VB)</comment>
</public>}</block></struct></type> <name pos:line="434" pos:column="3">MSOTCFEATUREINFO</name>;</typedef>

<typedef pos:line="436" pos:column="1">typedef <type><struct pos:line="436" pos:column="9">struct <name pos:line="436" pos:column="16">_msotcclassinfo</name> <block pos:line="436" pos:column="32">{<public type="default" pos:line="436" pos:column="33">
	<decl_stmt><decl><type><name pos:line="437" pos:column="9">CLSID</name></type> <name pos:line="437" pos:column="15">clsid</name></decl>;</decl_stmt>	<comment type="line" pos:line="437" pos:column="25">// GUID constant </comment>
	<decl_stmt><decl><type><name pos:line="438" pos:column="9">DWORD</name></type> <name pos:line="438" pos:column="15">dwClsCtx</name></decl>;</decl_stmt>	<comment type="line" pos:line="438" pos:column="25">// Class Context</comment>
	<decl_stmt><decl><type><name pos:line="439" pos:column="9">msocidT</name></type> <name pos:line="439" pos:column="17">cid</name></decl>;</decl_stmt>	<comment type="line" pos:line="439" pos:column="25">// Feature ID;</comment>
</public>}</block></struct></type> <name pos:line="440" pos:column="3">MSOTCCLASSINFO</name>;</typedef>

<typedef pos:line="442" pos:column="1">typedef <type><struct pos:line="442" pos:column="9">struct <name pos:line="442" pos:column="16">_msotcbackdoorinfo</name> <block pos:line="442" pos:column="35">{<public type="default" pos:line="442" pos:column="36">
	<decl_stmt><decl><type><name pos:line="443" pos:column="9">msocidT</name></type> <name pos:line="443" pos:column="17">cid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="444" pos:column="9">void</name> <type:modifier pos:line="444" pos:column="14">*</type:modifier></type><name pos:line="444" pos:column="15">pReserved</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="445" pos:column="9">CHAR</name> <type:modifier pos:line="445" pos:column="14">*</type:modifier></type><name pos:line="445" pos:column="15">szRelativePath</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="446" pos:column="9">CHAR</name> <type:modifier pos:line="446" pos:column="14">*</type:modifier></type><name pos:line="446" pos:column="15">szQualifier</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="447" pos:column="9">CHAR</name> <type:modifier pos:line="447" pos:column="14">*</type:modifier></type><name pos:line="447" pos:column="15">szAppData</name></decl>;</decl_stmt>
</public>}</block></struct></type> <name pos:line="448" pos:column="3">MSOTCBACKDOORINFO</name>;</typedef>

<cpp:define pos:line="450" pos:column="1">#<cpp:directive pos:line="450" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="450" pos:column="9">MSOTCFILEINFO_NIL</name></cpp:macro> <cpp:value pos:line="450" pos:column="27">{ "invalidFid", msocidNil }</cpp:value></cpp:define>
<cpp:define pos:line="451" pos:column="1">#<cpp:directive pos:line="451" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="451" pos:column="9">MSOTCCOMPONENTINFO_NIL</name></cpp:macro> <cpp:value pos:line="451" pos:column="32">{ {0,0,0,0}, "invalidCid", msoftidNil, -1 }</cpp:value></cpp:define>
<cpp:define pos:line="452" pos:column="1">#<cpp:directive pos:line="452" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="452" pos:column="9">MSOTCFEATUREINFO_NIL</name></cpp:macro> <cpp:value pos:line="452" pos:column="30">{ "invalidFtid", msoftidNil }</cpp:value></cpp:define>
<cpp:define pos:line="453" pos:column="1">#<cpp:directive pos:line="453" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="453" pos:column="9">MSOTCCLASSINFO_NIL</name></cpp:macro> <cpp:value pos:line="453" pos:column="28">{ {0,0,0,0}, 0, msocidNil }</cpp:value></cpp:define>
<cpp:define pos:line="454" pos:column="1">#<cpp:directive pos:line="454" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="454" pos:column="9">MSOTCBACKDOORINFO_NIL</name></cpp:macro> <cpp:value pos:line="454" pos:column="31">{ msocidNil, 0, "", "", "" }</cpp:value></cpp:define>

<typedef pos:line="456" pos:column="1">typedef <type><struct pos:line="456" pos:column="9">struct <name pos:line="456" pos:column="16">_msotcfcf</name> <block pos:line="456" pos:column="26">{<public type="default" pos:line="456" pos:column="27">
	<decl_stmt><decl><type><name pos:line="457" pos:column="9">DWORD</name></type> <name pos:line="457" pos:column="15">dwVersion</name></decl>;</decl_stmt>				<comment type="line" pos:line="457" pos:column="57">// version</comment>
	<decl_stmt><decl><type><name pos:line="458" pos:column="9">int</name></type> <name pos:line="458" pos:column="13">iTableIndex</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="459" pos:column="9">const</specifier> <name pos:line="459" pos:column="15">MSOTCFILEINFO</name> <type:modifier pos:line="459" pos:column="29">*</type:modifier></type><name pos:line="459" pos:column="30">rgfi</name></decl>;</decl_stmt>		<comment type="line" pos:line="459" pos:column="49">// file table</comment>
	<decl_stmt><decl><type><specifier pos:line="460" pos:column="9">const</specifier> <name pos:line="460" pos:column="15">MSOTCCOMPONENTINFO</name> <type:modifier pos:line="460" pos:column="34">*</type:modifier></type><name pos:line="460" pos:column="35">rgci</name></decl>;</decl_stmt>	<comment type="line" pos:line="460" pos:column="41">// component table</comment>
	<decl_stmt><decl><type><specifier pos:line="461" pos:column="9">const</specifier> <name pos:line="461" pos:column="15">MSOTCFEATUREINFO</name> <type:modifier pos:line="461" pos:column="32">*</type:modifier></type><name pos:line="461" pos:column="33">rgfti</name></decl>;</decl_stmt>	<comment type="line" pos:line="461" pos:column="41">// feature table</comment>
	<decl_stmt><decl><type><specifier pos:line="462" pos:column="9">const</specifier> <name pos:line="462" pos:column="15">MSOTCBACKDOORINFO</name> <type:modifier pos:line="462" pos:column="33">*</type:modifier></type><name pos:line="462" pos:column="34">rgbdi</name></decl>;</decl_stmt>	<comment type="line" pos:line="462" pos:column="41">// backdoor data</comment>
	<decl_stmt><decl><type><name pos:line="463" pos:column="9">int</name></type> <name pos:line="463" pos:column="13">cfi</name></decl><op:operator pos:line="463" pos:column="16">,</op:operator> <name pos:line="463" pos:column="18">cci</name><op:operator pos:line="463" pos:column="21">,</op:operator> <name pos:line="463" pos:column="23">cfti</name><op:operator pos:line="463" pos:column="27">,</op:operator> <name pos:line="463" pos:column="29">cbdi</name>;</decl_stmt>		<comment type="line" pos:line="463" pos:column="49">// counts</comment>
</public>}</block></struct></type> <name pos:line="464" pos:column="3">MSOTCFCF</name>;</typedef>

<comment type="block" pos:line="466" pos:column="1">/* Edit language info */</comment>
<typedef pos:line="467" pos:column="1">typedef <type><struct pos:line="467" pos:column="9">struct <name pos:line="467" pos:column="16">_msoeli</name>
	<block pos:line="468" pos:column="9">{<public type="default" pos:line="468" pos:column="10">
	<decl_stmt><decl><type><name pos:line="469" pos:column="9">UCHAR</name></type>	<name pos:line="469" pos:column="17">fExplicit</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="470" pos:column="9">LCID</name></type>	<name pos:line="470" pos:column="17">lcid</name></decl>;</decl_stmt>
	</public>}</block></struct></type><name pos:line="471" pos:column="10">MSOELI</name>;</typedef>
	
<comment type="line" pos:line="473" pos:column="1">// include file, component, and feature id's from Darwin</comment>
<cpp:include pos:line="474" pos:column="1">#<cpp:directive pos:line="474" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="474" pos:column="10">"msotcdar.h"</lit:literal></cpp:file></cpp:include>

<comment type="line" pos:line="476" pos:column="1">// Maximum length of a GUID string in the standard format,</comment>
<comment type="line" pos:line="477" pos:column="1">// "{000Cxxxx-0000-0000-C000-000000000046}"</comment>
<cpp:define pos:line="478" pos:column="1">#<cpp:directive pos:line="478" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="478" pos:column="9">MAX_GUID</name></cpp:macro> <cpp:value pos:line="478" pos:column="18">39</cpp:value></cpp:define>


<comment type="block" pos:line="481" pos:column="1">/*---------------------------------------------------------------------------
	dwGimmeFlags

	These flags specify options for the MsoFGimme*Ex functions below.
	Each functions always checks the install state of the object.
------------------------------------------------------------------ JJames -*/</comment>
<cpp:define pos:line="487" pos:column="1">#<cpp:directive pos:line="487" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="487" pos:column="9">msotcogfDemandInstall</name></cpp:macro>			<cpp:value pos:line="487" pos:column="49">0x0001</cpp:value></cpp:define>	<comment type="line" pos:line="487" pos:column="57">// install if not already</comment>
<cpp:define pos:line="488" pos:column="1">#<cpp:directive pos:line="488" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="488" pos:column="9">msotcogfSearchForFile</name></cpp:macro>			<cpp:value pos:line="488" pos:column="49">0x0002</cpp:value></cpp:define>	<comment type="line" pos:line="488" pos:column="57">// check file system if darwin fails</comment>
<cpp:define pos:line="489" pos:column="1">#<cpp:directive pos:line="489" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="489" pos:column="9">msotcogfTryOtherLanguages</name></cpp:macro>		<cpp:value pos:line="489" pos:column="49">0x0004</cpp:value></cpp:define>	<comment type="line" pos:line="489" pos:column="57">// try backup lcid's if requested one fails</comment>
<cpp:define pos:line="490" pos:column="1">#<cpp:directive pos:line="490" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="490" pos:column="9">msotcogfVerifyFileExists</name></cpp:macro>		<cpp:value pos:line="490" pos:column="49">0x0008</cpp:value></cpp:define>	<comment type="line" pos:line="490" pos:column="57">// verify that the requested file exists</comment>
<cpp:define pos:line="491" pos:column="1">#<cpp:directive pos:line="491" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="491" pos:column="9">msotcogfFixIfNecessary</name></cpp:macro>			<cpp:value pos:line="491" pos:column="49">0x0010</cpp:value></cpp:define>	<comment type="line" pos:line="491" pos:column="57">// call darwin fix functions if necessary</comment>
<cpp:define pos:line="492" pos:column="1">#<cpp:directive pos:line="492" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="492" pos:column="9">msotcogfForceFix</name></cpp:macro>				<cpp:value pos:line="492" pos:column="57">0x0020</cpp:value></cpp:define>	<comment type="line" pos:line="492" pos:column="65">// call darwin fix functions</comment>
<cpp:define pos:line="493" pos:column="1">#<cpp:directive pos:line="493" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="493" pos:column="9">msotcogfTrueIfAdvertised</name></cpp:macro>		<cpp:value pos:line="493" pos:column="49">0x0040</cpp:value></cpp:define>	<comment type="line" pos:line="493" pos:column="57">// return TRUE if the object is advertised</comment>
<cpp:define pos:line="494" pos:column="1">#<cpp:directive pos:line="494" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="494" pos:column="9">msotcogfForceFixMachineRegistry</name></cpp:macro>    <cpp:value pos:line="494" pos:column="44">0x0080</cpp:value></cpp:define>	<comment type="line" pos:line="494" pos:column="57">// force repair of user registry data</comment>
<cpp:define pos:line="495" pos:column="1">#<cpp:directive pos:line="495" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="495" pos:column="9">msotcogfNoInstallUI</name></cpp:macro>				<cpp:value pos:line="495" pos:column="57">0x0100</cpp:value></cpp:define>	<comment type="line" pos:line="495" pos:column="65">// no install confirmation UI (assume Yes)</comment>
<cpp:define pos:line="496" pos:column="1">#<cpp:directive pos:line="496" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="496" pos:column="9">msotcogfNoRepairUI</name></cpp:macro>				<cpp:value pos:line="496" pos:column="57">0x0200</cpp:value></cpp:define>	<comment type="line" pos:line="496" pos:column="65">// no repair confirmation UI (assume Yes)</comment>
<cpp:define pos:line="497" pos:column="1">#<cpp:directive pos:line="497" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="497" pos:column="9">msotcogfNoRetryUI</name></cpp:macro>				<cpp:value pos:line="497" pos:column="57">0x0400</cpp:value></cpp:define>	<comment type="line" pos:line="497" pos:column="65">// no retry on busy UI (assume Cancel)</comment>
<cpp:define pos:line="498" pos:column="1">#<cpp:directive pos:line="498" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="498" pos:column="9">msotcogfNoDisabledUI</name></cpp:macro>			<cpp:value pos:line="498" pos:column="49">0x0800</cpp:value></cpp:define>	<comment type="line" pos:line="498" pos:column="57">// no disabled feature UI (assume Ok)</comment>
<cpp:define pos:line="499" pos:column="1">#<cpp:directive pos:line="499" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="499" pos:column="9">msotcogfValidate</name></cpp:macro>				<cpp:value pos:line="499" pos:column="57">0x1000</cpp:value></cpp:define>  <comment type="line" pos:line="499" pos:column="65">// call MsiUseFeature instead of QueryFeature</comment>
<cpp:define pos:line="500" pos:column="1">#<cpp:directive pos:line="500" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="500" pos:column="9">msotcogfUninstall</name></cpp:macro>				<cpp:value pos:line="500" pos:column="57">0x2000</cpp:value></cpp:define>  <comment type="line" pos:line="500" pos:column="65">// change feature to advertised</comment>
<cpp:define pos:line="501" pos:column="1">#<cpp:directive pos:line="501" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="501" pos:column="9">msotcogfForceFixUserRegistry</name></cpp:macro>	<cpp:value pos:line="501" pos:column="41">0x4000</cpp:value></cpp:define>  <comment type="line" pos:line="501" pos:column="49">// force repair of machine registry data</comment>
<cpp:define pos:line="502" pos:column="1">#<cpp:directive pos:line="502" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="502" pos:column="9">msotcogfSearchFirst</name></cpp:macro>             <cpp:value pos:line="502" pos:column="41">0x8000</cpp:value></cpp:define>  <comment type="line" pos:line="502" pos:column="49">// check file system before querying Darwin (boot perf.)</comment>
<cpp:define pos:line="503" pos:column="1">#<cpp:directive pos:line="503" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="503" pos:column="9">msotcogfNoSourceDialog</name></cpp:macro>		   	<cpp:value pos:line="503" pos:column="49">0x10000</cpp:value></cpp:define>  <comment type="line" pos:line="503" pos:column="58">// suppress Darwin's source dialog</comment>
<cpp:define pos:line="504" pos:column="1">#<cpp:directive pos:line="504" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="504" pos:column="9">msotcogfNoCustomUI</name></cpp:macro>			   	<cpp:value pos:line="504" pos:column="57">0x20000</cpp:value></cpp:define>  <comment type="line" pos:line="504" pos:column="66">// Disable Office demandinstallUI dialog</comment>
<cpp:define pos:line="505" pos:column="1">#<cpp:directive pos:line="505" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="505" pos:column="9">msotcogfNoAutoApprove</name></cpp:macro>		   	<cpp:value pos:line="505" pos:column="49">0x40000</cpp:value></cpp:define>  <comment type="line" pos:line="505" pos:column="58">// Don't say "Yes" automatically</comment>
<cpp:define pos:line="506" pos:column="1">#<cpp:directive pos:line="506" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="506" pos:column="9">msotcogfNoAutoReject</name></cpp:macro>		   	<cpp:value pos:line="506" pos:column="49">0x80000</cpp:value></cpp:define>  <comment type="line" pos:line="506" pos:column="58">// Don't say "No" automatically</comment>
<cpp:define pos:line="507" pos:column="1">#<cpp:directive pos:line="507" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="507" pos:column="9">msotcogfForceUI</name></cpp:macro>				   <cpp:value pos:line="507" pos:column="52">0x100000</cpp:value></cpp:define>  <comment type="line" pos:line="507" pos:column="62">// Ignore the app callback</comment>
<comment type="line" pos:line="508" pos:column="1">// reserved for Gimme internal     		0xF0000000</comment>

<comment type="line" pos:line="510" pos:column="1">// preserve ForceFixRegistry option</comment>
<cpp:define pos:line="511" pos:column="1">#<cpp:directive pos:line="511" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="511" pos:column="9">msotcogfForceFixRegistry</name></cpp:macro> <cpp:value pos:line="511" pos:column="34">(msotcogfForceFixUserRegistry | msotcogfForceFixMachineRegistry)</cpp:value></cpp:define>

<cpp:define pos:line="513" pos:column="1">#<cpp:directive pos:line="513" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="513" pos:column="9">msotcogfResiliency</name></cpp:macro> <cpp:value pos:line="513" pos:column="28">(msotcogfSearchForFile | msotcogfTryOtherLanguages)</cpp:value></cpp:define>
	
<comment type="line" pos:line="515" pos:column="1">// test whether the associated feature is enabled for install</comment>
<cpp:define pos:line="516" pos:column="1">#<cpp:directive pos:line="516" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="516" pos:column="9">msotcogfEnabled</name></cpp:macro> <cpp:value pos:line="516" pos:column="25">(msotcogfTrueIfAdvertised | msotcogfResiliency)</cpp:value></cpp:define>

<comment type="line" pos:line="518" pos:column="1">// test whether the file or component is already installed on the machine</comment>
<cpp:define pos:line="519" pos:column="1">#<cpp:directive pos:line="519" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="519" pos:column="9">msotcogfInstalled</name></cpp:macro> <cpp:value pos:line="519" pos:column="27">(msotcogfResiliency)</cpp:value></cpp:define>
<cpp:define pos:line="520" pos:column="1">#<cpp:directive pos:line="520" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="520" pos:column="9">msotcogfInstalledNoResiliency</name></cpp:macro> <cpp:value pos:line="520" pos:column="39">(0)</cpp:value></cpp:define>

<comment type="line" pos:line="522" pos:column="1">// request the file or component, installing if necessary</comment>
<cpp:define pos:line="523" pos:column="1">#<cpp:directive pos:line="523" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="523" pos:column="9">msotcogfProvide</name></cpp:macro> <cpp:value pos:line="523" pos:column="25">(msotcogfDemandInstall | msotcogfResiliency)</cpp:value></cpp:define>

<comment type="line" pos:line="525" pos:column="1">// do whatever it takes to get the file or component</comment>
<cpp:define pos:line="526" pos:column="1">#<cpp:directive pos:line="526" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="526" pos:column="9">msotcogfRequired</name></cpp:macro> <cpp:value pos:line="526" pos:column="26">(msotcogfDemandInstall | msotcogfResiliency | msotcogfVerifyFileExists | msotcogfFixIfNecessary)</cpp:value></cpp:define>
<cpp:define pos:line="527" pos:column="1">#<cpp:directive pos:line="527" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="527" pos:column="9">msotcogfRequiredNoResiliency</name></cpp:macro> <cpp:value pos:line="527" pos:column="38">(msotcogfDemandInstall | msotcogfVerifyFileExists | msotcogfFixIfNecessary)</cpp:value></cpp:define>

<comment type="line" pos:line="529" pos:column="1">// don't display any UI</comment>
<comment type="line" pos:line="530" pos:column="1">// TODO(JBelt): merge all UI flags into one?</comment>
<cpp:define pos:line="531" pos:column="1">#<cpp:directive pos:line="531" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="531" pos:column="9">msotcogfQuiet</name></cpp:macro> <cpp:value pos:line="531" pos:column="23">(msotcogfNoInstallUI | msotcogfNoRepairUI | msotcogfNoRetryUI | msotcogfNoDisabledUI)</cpp:value></cpp:define>

<comment type="line" pos:line="533" pos:column="1">// don't automatically approve or deny an install or repair</comment>
<cpp:define pos:line="534" pos:column="1">#<cpp:directive pos:line="534" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="534" pos:column="9">msotcogfNoAutoReponse</name></cpp:macro> <cpp:value pos:line="534" pos:column="31">(msotcogfNoAutoApprove | msotcogfNoAutoReject)</cpp:value></cpp:define>

<comment type="block" pos:line="536" pos:column="1">/*---------------------------------------------------------------------------
	MsoFGimmeFeatureEx

	Perform an operation on a Darwin feature, as specified in
	%otools%\inc\misc\tcinuse.txt.  Will demand install, search, fix, check 
	advertisement, etc. according to options in dwGimmeFlags.

	Returns TRUE on success, which usually means the feature is installed and 
	enabled.  However, some flags affect this return.

	Use the Wz version only when absolutely necessary.
------------------------------------------------------------------ JJames -*/</comment>
<macro><name pos:line="548" pos:column="1">MSOAPI_</name><argument_list pos:line="548" pos:column="8">(<argument pos:line="548" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="548" pos:column="15">MsoFGimmeFeatureEx</name><argument_list pos:line="548" pos:column="33">(<argument pos:line="548" pos:column="34">msoftidT ftid</argument>, <argument pos:line="548" pos:column="49">DWORD dwGimmeFlags</argument>)</argument_list></macro><empty_stmt pos:line="548" pos:column="68">;</empty_stmt>
<macro><name pos:line="549" pos:column="1">MSOAPI_</name><argument_list pos:line="549" pos:column="8">(<argument pos:line="549" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="549" pos:column="15">MsoFGimmeFeatureExWz</name><argument_list pos:line="549" pos:column="35">(<argument pos:line="549" pos:column="36">const WCHAR *wzFeature</argument>, <argument pos:line="549" pos:column="60">DWORD dwGimmeFlags</argument>)</argument_list></macro><empty_stmt pos:line="549" pos:column="79">;</empty_stmt>

<cpp:define pos:line="551" pos:column="1">#<cpp:directive pos:line="551" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="551" pos:column="9">MsoFGimmeFeature</name><parameter_list pos:line="551" pos:column="25">(<param><type><name pos:line="551" pos:column="26">ftid</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="551" pos:column="32">MsoFGimmeFeatureEx(ftid, msotcogfProvide)</cpp:value></cpp:define>
<cpp:define pos:line="552" pos:column="1">#<cpp:directive pos:line="552" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="552" pos:column="9">_MsoFGimmeFeature</name><parameter_list pos:line="552" pos:column="26">(<param><type><name pos:line="552" pos:column="27">wzFeature</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="552" pos:column="38">MsoFGimmeFeatureExWz(wzFeature, msotcogfProvide)</cpp:value></cpp:define>
<cpp:define pos:line="553" pos:column="1">#<cpp:directive pos:line="553" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="553" pos:column="9">MsoFEnabledFeature</name><parameter_list pos:line="553" pos:column="27">(<param><type><name pos:line="553" pos:column="28">ftid</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="553" pos:column="34">MsoFGimmeFeatureEx(ftid, msotcogfEnabled)</cpp:value></cpp:define>
<cpp:define pos:line="554" pos:column="1">#<cpp:directive pos:line="554" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="554" pos:column="9">_MsoFEnabledFeature</name><parameter_list pos:line="554" pos:column="28">(<param><type><name pos:line="554" pos:column="29">wzFeature</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="554" pos:column="40">MsoFGimmeFeatureExWz(wzFeature, msotcogfEnabled)</cpp:value></cpp:define>
<cpp:define pos:line="555" pos:column="1">#<cpp:directive pos:line="555" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="555" pos:column="9">MsoFInstalledFeature</name><parameter_list pos:line="555" pos:column="29">(<param><type><name pos:line="555" pos:column="30">ftid</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="555" pos:column="36">MsoFGimmeFeatureEx(ftid, msotcogfInstalled)</cpp:value></cpp:define>
<cpp:define pos:line="556" pos:column="1">#<cpp:directive pos:line="556" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="556" pos:column="9">_MsoFInstalledFeature</name><parameter_list pos:line="556" pos:column="30">(<param><type><name pos:line="556" pos:column="31">wzFeature</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="556" pos:column="42">MsoFGimmeFeatureExWz(wzFeature, msotcogfInstalled)</cpp:value></cpp:define>
<cpp:define pos:line="557" pos:column="1">#<cpp:directive pos:line="557" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="557" pos:column="9">MsoFFixFeature</name><parameter_list pos:line="557" pos:column="23">(<param><type><name pos:line="557" pos:column="24">ftid</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="557" pos:column="30">MsoFGimmeFeatureEx(ftid, msotcogfForceFix)</cpp:value></cpp:define>

<comment type="block" pos:line="559" pos:column="1">/*---------------------------------------------------------------------------
	MsoFGimmeComponentEx

	Returns a full pathname to the component keyfile specified by the component
	id with possible language and string qualification according to the cid 
	specification found in %otools%\inc\misc\tcinuse.txt.  Will demand install,
	search, fix, check advertisement, etc. according to options in dwGimmeFlags.

	Since components don't always have keyfiles (or they can be misauthored),
	you should generally use MsoFGimmeFileEx if you are relying on the pathname return.
	
	wzPath must be NULL or MAX_PATH characters in size.
	Returns TRUE on success, which usually means the component is installed and 
	enabled.  However, some flags affect this return.
------------------------------------------------------------------ JJames -*/</comment>
<macro><name pos:line="574" pos:column="1">MSOAPI_</name><argument_list pos:line="574" pos:column="8">(<argument pos:line="574" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="574" pos:column="15">MsoFGimmeComponentEx</name><argument_list pos:line="574" pos:column="35">(<argument pos:line="574" pos:column="36">msocidT cid</argument>, <argument pos:line="574" pos:column="49">LCID lcid</argument>, <argument pos:line="574" pos:column="60">const WCHAR *wzQualifier</argument>, <argument pos:line="574" pos:column="86">WCHAR *wzPath</argument>, <argument pos:line="574" pos:column="101">DWORD dwGimmeFlags</argument>)</argument_list></macro><empty_stmt pos:line="574" pos:column="120">;</empty_stmt>

<cpp:define pos:line="576" pos:column="1">#<cpp:directive pos:line="576" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="576" pos:column="9">MsoFGimmeComponent</name><parameter_list pos:line="576" pos:column="27">(<param><type><name pos:line="576" pos:column="28">cid</name></type></param>, <param><type><name pos:line="576" pos:column="33">wzPath</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="576" pos:column="41">MsoFGimmeComponentEx(cid, 0, NULL, wzPath, msotcogfProvide)</cpp:value></cpp:define>
<cpp:define pos:line="577" pos:column="1">#<cpp:directive pos:line="577" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="577" pos:column="9">MsoFGimmeComponentQualified</name><parameter_list pos:line="577" pos:column="36">(<param><type><name pos:line="577" pos:column="37">cid</name></type></param>, <param><type><name pos:line="577" pos:column="42">wzQualifier</name></type></param>, <param><type><name pos:line="577" pos:column="55">wzPath</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="577" pos:column="63">MsoFGimmeComponentEx(cid, 0, wzQualifier, wzPath, msotcogfProvide)</cpp:value></cpp:define>
<cpp:define pos:line="578" pos:column="1">#<cpp:directive pos:line="578" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="578" pos:column="9">MsoFGimmeLocalizedComponent</name><parameter_list pos:line="578" pos:column="36">(<param><type><name pos:line="578" pos:column="37">cid</name></type></param>, <param><type><name pos:line="578" pos:column="42">lcid</name></type></param>, <param><type><name pos:line="578" pos:column="48">wzPath</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="578" pos:column="56">MsoFGimmeComponentEx(cid, lcid, NULL, wzPath, msotcogfProvide)</cpp:value></cpp:define>
<cpp:define pos:line="579" pos:column="1">#<cpp:directive pos:line="579" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="579" pos:column="9">MsoFFixLocalizedComponent</name><parameter_list pos:line="579" pos:column="34">(<param><type><name pos:line="579" pos:column="35">cid</name></type></param>, <param><type><name pos:line="579" pos:column="40">lcid</name></type></param>, <param><type><name pos:line="579" pos:column="46">wzPath</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="579" pos:column="54">MsoFGimmeComponentEx(cid, lcid, NULL, wzPath, msotcogfForceFix)</cpp:value></cpp:define>

<comment type="block" pos:line="581" pos:column="1">/*---------------------------------------------------------------------------
	MsoFGimmeFileEx
	
	Returns a full pathname to the file specified by the file id with possible
	language and string qualification according to the fid specification found
	in %otools%\inc\misc\tcinuse.txt.  Will demand install,	search, fix, check 
	advertisement, etc. according to options in dwGimmeFlags.
	
	wzPath must be NULL or MAX_PATH characters in size.
	Returns TRUE on success, which usually means the file is installed and 
	enabled.  However, some flags affect this return.
------------------------------------------------------------------ JJames -*/</comment>
<macro><name pos:line="593" pos:column="1">MSOAPI_</name><argument_list pos:line="593" pos:column="8">(<argument pos:line="593" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="593" pos:column="15">MsoFGimmeFileEx</name><argument_list pos:line="593" pos:column="30">(<argument pos:line="593" pos:column="31">msofidT fid</argument>, <argument pos:line="593" pos:column="44">LCID lcid</argument>, <argument pos:line="593" pos:column="55">const WCHAR *wzQualifier</argument>, <argument pos:line="593" pos:column="81">WCHAR *wzPath</argument>, <argument pos:line="593" pos:column="96">DWORD dwGimmeFlags</argument>)</argument_list></macro><empty_stmt pos:line="593" pos:column="115">;</empty_stmt>

<cpp:define pos:line="595" pos:column="1">#<cpp:directive pos:line="595" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="595" pos:column="9">MsoFGimmeFile</name><parameter_list pos:line="595" pos:column="22">(<param><type><name pos:line="595" pos:column="23">fid</name></type></param>, <param><type><name pos:line="595" pos:column="28">wzPath</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="595" pos:column="36">MsoFGimmeFileEx(fid, 0, NULL, wzPath, msotcogfProvide)</cpp:value></cpp:define>
<cpp:define pos:line="596" pos:column="1">#<cpp:directive pos:line="596" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="596" pos:column="9">MsoFGimmeFileQualified</name><parameter_list pos:line="596" pos:column="31">(<param><type><name pos:line="596" pos:column="32">fid</name></type></param>, <param><type><name pos:line="596" pos:column="37">wzQualifier</name></type></param>, <param><type><name pos:line="596" pos:column="50">wzPath</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="596" pos:column="58">MsoFGimmeFileEx(fid, 0, wzQualifier, wzPath, msotcogfProvide)</cpp:value></cpp:define>
<cpp:define pos:line="597" pos:column="1">#<cpp:directive pos:line="597" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="597" pos:column="9">MsoFGimmeLocalizedFile</name><parameter_list pos:line="597" pos:column="31">(<param><type><name pos:line="597" pos:column="32">fid</name></type></param>, <param><type><name pos:line="597" pos:column="37">lcid</name></type></param>, <param><type><name pos:line="597" pos:column="43">wzPath</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="597" pos:column="51">MsoFGimmeFileEx(fid, lcid, NULL, wzPath, msotcogfProvide)</cpp:value></cpp:define>
<cpp:define pos:line="598" pos:column="1">#<cpp:directive pos:line="598" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="598" pos:column="9">MsoFGimmeAdvertisedFile</name><parameter_list pos:line="598" pos:column="32">(<param><type><name pos:line="598" pos:column="33">qcid</name></type></param>, <param><type><name pos:line="598" pos:column="39">wzFilename</name></type></param>, <param><type><name pos:line="598" pos:column="51">wzPath</name></type></param>, <param><type><name pos:line="598" pos:column="59">fDemandInstall</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="598" pos:column="75">MsoFGimmeComponentEx(qcid, 0, wzFilename, wzPath, \
	(fDemandInstall) ? msotcogfProvide : msotcogfInstalled)</cpp:value></cpp:define>
<cpp:define pos:line="600" pos:column="1">#<cpp:directive pos:line="600" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="600" pos:column="9">MsoFFixFile</name><parameter_list pos:line="600" pos:column="20">(<param><type><name pos:line="600" pos:column="21">fid</name></type></param>, <param><type><name pos:line="600" pos:column="26">wzPath</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="600" pos:column="34">MsoFGimmeFileEx(fid, 0, NULL, wzPath, msotcogfForceFix)</cpp:value></cpp:define>
<cpp:define pos:line="601" pos:column="1">#<cpp:directive pos:line="601" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="601" pos:column="9">MsoFEnabledFile</name><parameter_list pos:line="601" pos:column="24">(<param><type><name pos:line="601" pos:column="25">fid</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="601" pos:column="30">MsoFGimmeFileEx(fid, 0, NULL, NULL, msotcogfEnabled)</cpp:value></cpp:define>
<cpp:define pos:line="602" pos:column="1">#<cpp:directive pos:line="602" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="602" pos:column="9">MsoFInstalledFile</name><parameter_list pos:line="602" pos:column="26">(<param><type><name pos:line="602" pos:column="27">fid</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="602" pos:column="32">MsoFGimmeFileEx(fid, 0, NULL, NULL, msotcogfInstalled)</cpp:value></cpp:define>

<comment type="block" pos:line="604" pos:column="1">/*-----------------------------------------------------------------------------
	MsoFGimmeFileVersion

	In addition to grabbing file (modeled after MsoFGimmeFileFull), this checks 
	version of the file that we get and calls a more agressive repair if the
	version is less that the one expected.
  
	*** Inherited from MsoFGimmeFileFull ***
	Returns a full pathname to the file specified by the file id with possible
	language and string qualification according to the fid specification found
	in %otools%\inc\misc\tcinuse.txt.  Will demand install, search, fix, check 
	advertisement, etc. according to options in dwGimmeFlags.

	wzPath must be NULL or MAX_PATH characters in size.
	Returns the language used in *plcid.
	*** Inherited from MsoFGimmeFileFull ***

	Returns TRUE on success, which usually means the file is installed, enabled,
	and at least the version requested.  However, some flags affect this return.
  
---------------------------------------------------------------- RFlaming ---*/</comment>
<macro><name pos:line="625" pos:column="1">MSOAPI_</name><argument_list pos:line="625" pos:column="8">(<argument pos:line="625" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="625" pos:column="15">MsoFGimmeFileVersion</name><argument_list pos:line="625" pos:column="35">(<argument pos:line="625" pos:column="36">msofidT fid</argument>, <argument pos:line="625" pos:column="49">LCID lcid</argument>, <argument pos:line="625" pos:column="60">const WCHAR *wzQualifier</argument>,
	<argument pos:line="626" pos:column="9">WCHAR *wzPath</argument>, <argument pos:line="626" pos:column="24">DWORD dwGimmeFlags</argument>, <argument pos:line="626" pos:column="44">DWORD dwTargetVersionMS</argument>, <argument pos:line="626" pos:column="69">DWORD dwTargetVersionLS</argument>)</argument_list></macro><empty_stmt pos:line="626" pos:column="93">;</empty_stmt>


<comment type="block" pos:line="629" pos:column="1">/*----------------------------------------------------------------------------
	MsoFGimmeComponentPathEx

	Thin wrapper around MsoFGimmeComponent, which strips out the keyfile if
	there is one.
-------------------------------------------------------------------- JBelt --*/</comment>
<macro><name pos:line="635" pos:column="1">MSOAPI_</name><argument_list pos:line="635" pos:column="8">(<argument pos:line="635" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="635" pos:column="15">MsoFGimmeComponentPathEx</name><argument_list pos:line="635" pos:column="39">(<argument pos:line="635" pos:column="40">msocidT cid</argument>, <argument pos:line="635" pos:column="53">LCID lcid</argument>, <argument pos:line="635" pos:column="64">const WCHAR *wzQualifier</argument>, <argument pos:line="635" pos:column="90">WCHAR *wzPath</argument>, <argument pos:line="635" pos:column="105">DWORD dwGimmeFlags</argument>)</argument_list></macro><empty_stmt pos:line="635" pos:column="124">;</empty_stmt>
<cpp:define pos:line="636" pos:column="1">#<cpp:directive pos:line="636" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="636" pos:column="9">MsoFGimmeComponentPath</name><parameter_list pos:line="636" pos:column="31">(<param><type><name pos:line="636" pos:column="32">cid</name></type></param>, <param><type><name pos:line="636" pos:column="37">wzPath</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="636" pos:column="45">MsoFGimmeComponentPathEx(cid, 0, NULL, wzPath, msotcogfProvide)</cpp:value></cpp:define>


<comment type="block" pos:line="639" pos:column="1">/*---------------------------------------------------------------------------
	MsoFEnumComponentQualifiers

	Enumerate the qualifiers advertised under this qcid.
	Begin with iIndex = 0 and increase until the function returns FALSE.
	String args except wzQualifier can be NULL.
	Non-NULL string args must be at least MAX_PATH characters long.
	Can pass qcid and wzQualifier to MsoFGimmeComponentQualified.
	Returns FALSE when there are no more to be had.
---------------------------------------------------------------- JJames -*/</comment>
<macro><name pos:line="649" pos:column="1">MSOAPI_</name><argument_list pos:line="649" pos:column="8">(<argument pos:line="649" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="649" pos:column="15">MsoFEnumComponentQualifiers</name><argument_list pos:line="649" pos:column="42">(<argument pos:line="649" pos:column="43">msocidT qcid</argument>, <argument pos:line="649" pos:column="57">DWORD iIndex</argument>, <argument pos:line="649" pos:column="71">WCHAR *wzQualifier</argument>, 
	<argument pos:line="650" pos:column="9">WCHAR *wzAppData</argument>)</argument_list></macro><empty_stmt pos:line="650" pos:column="26">;</empty_stmt>


<comment type="block" pos:line="653" pos:column="1">/*---------------------------------------------------------------------------
	MsoFEnumGraphicFilters

	Specialized graphic filter enumeration routine.

	Input:
	- qcid: qualified component to enumerate
	- piIndex: fill with 0 prior to initial call

	Output (all strings must be 256 chars, including terminator)
	- piIndex: incremented internally, do not modify
	- wzClass: class name
	- wzName: friendly display name
	- wzDarwinPath: Gimme token representing the path. Give this path to
		MsoFGimmeComponentQcidQualifierEx to get the real path, and possibly
		install on demand. This string is guaranteed to start with '{'.
	- wzExtensions: extensions, separated by spaces. No lowercase / uppercase
		assumptions can be made.
	- pgfo: bit field representing graphic filter options. Use msogfoxxx flags
		below. May be NULL.
-------------------------------------------------------------------- JBelt --*/</comment>
<cpp:define pos:line="674" pos:column="1">#<cpp:directive pos:line="674" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="674" pos:column="9">msogfoShowOptionsDialog</name></cpp:macro>  <cpp:value pos:line="674" pos:column="34">0x0001</cpp:value></cpp:define>
<cpp:define pos:line="675" pos:column="1">#<cpp:directive pos:line="675" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="675" pos:column="9">msogfoShowProgressDialog</name></cpp:macro> <cpp:value pos:line="675" pos:column="34">0x0002</cpp:value></cpp:define>
<macro><name pos:line="676" pos:column="1">MSOAPI_</name><argument_list pos:line="676" pos:column="8">(<argument pos:line="676" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="676" pos:column="15">MsoFEnumGraphicFilters</name><argument_list pos:line="676" pos:column="37">(<argument pos:line="676" pos:column="38">msocidT qcid</argument>, <argument pos:line="676" pos:column="52">int *piIndex</argument>,
	<argument pos:line="677" pos:column="9">WCHAR *wzClass</argument>, <argument pos:line="677" pos:column="25">WCHAR *wzName</argument>, <argument pos:line="677" pos:column="40">WCHAR *wzDarwinPath</argument>, <argument pos:line="677" pos:column="61">WCHAR *wzExtensions</argument>,
	<argument pos:line="678" pos:column="9">DWORD *pgfo</argument>)</argument_list></macro><empty_stmt pos:line="678" pos:column="21">;</empty_stmt>


<comment type="block" pos:line="681" pos:column="1">/*---------------------------------------------------------------------------
	MsoEnumComponentQualifiersEx

	Enumerate the qualifiers advertised under this qcid.
	lcid identifies a language for doubly qualified components and should
	be the same throughout a sequence of calls.	wzAppData can be null. 
	Begin with *pdwIterator = 0, the function will increment on success, 
	possibly by more than +1.

	Pass the lcid and wzQualifier to MsoFGimmeComponentQualifiedEx to
	retrieve the component.
---------------------------------------------------------------- JJames -*/</comment>
<macro><name pos:line="693" pos:column="1">MSOAPI_</name><argument_list pos:line="693" pos:column="8">(<argument pos:line="693" pos:column="9">UINT</argument>)</argument_list></macro> <macro><name pos:line="693" pos:column="15">MsoEnumComponentQualifiersEx</name><argument_list pos:line="693" pos:column="43">(
	<argument pos:line="694" pos:column="9">msocidT qcid</argument>,         <comment type="line" pos:line="694" pos:column="31">// gimme id</comment>
	<argument pos:line="695" pos:column="9">LCID lcid</argument>,            <comment type="line" pos:line="695" pos:column="31">// language id for double-qualified components, 0 if not</comment>
	<argument pos:line="696" pos:column="9">WCHAR *wzQualifier</argument>,   <comment type="line" pos:line="696" pos:column="31">// buffer for to receive qualifier</comment>
	<argument pos:line="697" pos:column="9">DWORD *pcchQualifier</argument>, <comment type="line" pos:line="697" pos:column="31">// pointer to size of buffer, receives resulting size</comment>
	<argument pos:line="698" pos:column="9">WCHAR *wzAppData</argument>,     <comment type="line" pos:line="698" pos:column="31">// buffer to receive application data (can be NULL)</comment>
	<argument pos:line="699" pos:column="9">DWORD *pcchAppData</argument>,   <comment type="line" pos:line="699" pos:column="31">// pointer to size of buffer, receives resulting size</comment>
	<argument pos:line="700" pos:column="9">DWORD *pdwIterator</argument>)</argument_list></macro><empty_stmt pos:line="700" pos:column="28">;</empty_stmt>  <comment type="line" pos:line="700" pos:column="31">// internally incremented iterator </comment>

<cpp:if pos:line="702" pos:column="1">#<cpp:directive pos:line="702" pos:column="2">if</cpp:directive> <expr><lit:literal type="number" pos:line="702" pos:column="5">0</lit:literal></expr></cpp:if>
MSOAPI_(UINT) MsoEnumComponentQualifiersExEx(
	msocidT qcid,         <comment type="line" pos:line="704" pos:column="31">// gimme id</comment>
	LCID lcid,            <comment type="line" pos:line="705" pos:column="31">// language id for double-qualified components, 0 if not</comment>
	WCHAR *wzQualifier,   <comment type="line" pos:line="706" pos:column="31">// buffer for to receive qualifier</comment>
	DWORD *pcchQualifier, <comment type="line" pos:line="707" pos:column="31">// pointer to size of buffer, receives resulting size</comment>
	WCHAR *wzAppData,     <comment type="line" pos:line="708" pos:column="31">// buffer to receive application data (can be NULL)</comment>
	DWORD *pcchAppData,   <comment type="line" pos:line="709" pos:column="31">// pointer to size of buffer, receives resulting size</comment>
	DWORD *pdwIterator,   <comment type="line" pos:line="710" pos:column="31">// internally incremented iterator </comment>
	DWORD fAnsiCPConversion);
<cpp:endif pos:line="712" pos:column="1">#<cpp:directive pos:line="712" pos:column="2">endif</cpp:directive></cpp:endif>

<comment type="block" pos:line="714" pos:column="1">/*---------------------------------------------------------------------------
	MsoFGimmeComponentQualifiedData

	Get the wzAppData field for this qualified component.
	Returns TRUE and sets wzAppData if the the qualifier was found.
------------------------------------------------------------------ JJames -*/</comment>
<macro><name pos:line="720" pos:column="1">MSOAPI_</name><argument_list pos:line="720" pos:column="8">(<argument pos:line="720" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="720" pos:column="15">MsoFGimmeComponentQualifiedData</name><argument_list pos:line="720" pos:column="46">(<argument pos:line="720" pos:column="47">msocidT qcid</argument>, <argument pos:line="720" pos:column="61">const WCHAR *wzQualifier</argument>, <argument pos:line="720" pos:column="87">WCHAR *wzAppData</argument>)</argument_list></macro><empty_stmt pos:line="720" pos:column="104">;</empty_stmt>

<comment type="block" pos:line="722" pos:column="1">/*---------------------------------------------------------------------------
	MsoFGimmeAdvertisedName

	Returns the filename qualifier for a given pathname, verifying that the
	darwin entry for that qualifier is installed at that path.
	Reverse of MsoFGimmeAdvertisedFile.
	Returns TRUE if the path proved to be a darwin aware file.
------------------------------------------------------------------ JJames -*/</comment>
<macro><name pos:line="730" pos:column="1">MSOAPIX_</name><argument_list pos:line="730" pos:column="9">(<argument pos:line="730" pos:column="10">BOOL</argument>)</argument_list></macro> <macro><name pos:line="730" pos:column="16">MsoFGimmeAdvertisedName</name><argument_list pos:line="730" pos:column="39">(<argument pos:line="730" pos:column="40">msocidT qcid</argument>, <argument pos:line="730" pos:column="54">const WCHAR *wzPath</argument>, <argument pos:line="730" pos:column="75">WCHAR *wzQualifier</argument>)</argument_list></macro><empty_stmt pos:line="730" pos:column="94">;</empty_stmt>

<comment type="block" pos:line="732" pos:column="1">/*---------------------------------------------------------------------------
	MsoFGimmeProductCode

	Copies the 39 character product code into wzPath if true is returned
------------------------------------------------------------------ AndrewH -*/</comment>
<macro><name pos:line="737" pos:column="1">MSOAPI_</name><argument_list pos:line="737" pos:column="8">(<argument pos:line="737" pos:column="9">BOOL</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="737" pos:column="15">MsoFGimmeProductCode</name><argument_list pos:line="737" pos:column="35">(<argument><expr><name pos:line="737" pos:column="36">WCHAR</name> <op:operator pos:line="737" pos:column="42">*</op:operator><name pos:line="737" pos:column="43">wzPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<comment type="block" pos:line="740" pos:column="1">/*-----------------------------------------------------------------------------
	MsoFGimmeOleServer

	Demand load a server based on an OLE object.
------------------------------------------------------------------ JJames ---*/</comment>
<macro><name pos:line="745" pos:column="1">MSOAPI_</name><argument_list pos:line="745" pos:column="8">(<argument pos:line="745" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="745" pos:column="15">MsoFGimmeOleServer</name><argument_list pos:line="745" pos:column="33">(<argument pos:line="745" pos:column="34">IOleObject *pOleObject</argument>, <argument pos:line="745" pos:column="58">DWORD dwGimmeFlags</argument>)</argument_list></macro><empty_stmt pos:line="745" pos:column="77">;</empty_stmt>


<comment type="block" pos:line="748" pos:column="1">/*----------------------------------------------------------------------------
	MsoFidToFilename

	Returns the filename corresponding to qcid. The filename can be NULL.
------------------------------------------------------------------ JJames --*/</comment>
<macro><name pos:line="753" pos:column="1">MSOAPI_</name><argument_list pos:line="753" pos:column="8">(<argument pos:line="753" pos:column="9">VOID</argument>)</argument_list></macro> <macro><name pos:line="753" pos:column="15">MsoFidToFilename</name><argument_list pos:line="753" pos:column="31">(<argument pos:line="753" pos:column="32">msofidT fid</argument>, <argument pos:line="753" pos:column="45">WCHAR *wzFilename</argument>)</argument_list></macro><empty_stmt pos:line="753" pos:column="63">;</empty_stmt>
<macro><name pos:line="754" pos:column="1">MSOAPI_</name><argument_list pos:line="754" pos:column="8">(<argument pos:line="754" pos:column="9">VOID</argument>)</argument_list></macro> <macro><name pos:line="754" pos:column="15">MsoCidToFilename</name><argument_list pos:line="754" pos:column="31">(<argument pos:line="754" pos:column="32">msocidT cid</argument>, <argument pos:line="754" pos:column="45">WCHAR *wzFilename</argument>)</argument_list></macro><empty_stmt pos:line="754" pos:column="63">;</empty_stmt>

<cpp:define pos:line="756" pos:column="1">#<cpp:directive pos:line="756" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="756" pos:column="9">MsoQfidToFilename</name></cpp:macro> <cpp:value pos:line="756" pos:column="27">MsoFidToFilename</cpp:value></cpp:define>
<cpp:define pos:line="757" pos:column="1">#<cpp:directive pos:line="757" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="757" pos:column="9">MsoQcidToFilename</name></cpp:macro> <cpp:value pos:line="757" pos:column="27">MsoCidToFilename</cpp:value></cpp:define>


<comment type="block" pos:line="760" pos:column="1">/*----------------------------------------------------------------------------
	MsoFidToGuid

	Returns the GUID corresponding to the component the file belongs to.
	wzGuid must should be at least MAX_GUID characters long (39)
-------------------------------------------------------------------- JBelt --*/</comment>
<macro><name pos:line="766" pos:column="1">MSOAPIX_</name><argument_list pos:line="766" pos:column="9">(<argument pos:line="766" pos:column="10">void</argument>)</argument_list></macro> <macro><name pos:line="766" pos:column="16">MsoFidToGuid</name><argument_list pos:line="766" pos:column="28">(<argument pos:line="766" pos:column="29">msofidT fid</argument>, <argument pos:line="766" pos:column="42">WCHAR *wzGuid</argument>)</argument_list></macro><empty_stmt pos:line="766" pos:column="56">;</empty_stmt>

<comment type="block" pos:line="768" pos:column="1">/*----------------------------------------------------------------------------
	MsoFindFid

	Returns the fid corresponding to a known filename.
	Returns msofidNil if not found.
	These should be used ONLY when filenames are given from outside sources.
------------------------------------------------------------------ JJames --*/</comment>
<macro><name pos:line="775" pos:column="1">MSOAPIX_</name><argument_list pos:line="775" pos:column="9">(<argument pos:line="775" pos:column="10">msofidT</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="775" pos:column="19">MsoFindFid</name><argument_list pos:line="775" pos:column="29">(<argument><expr pos:line="775" pos:column="30">const <name pos:line="775" pos:column="36">WCHAR</name> <op:operator pos:line="775" pos:column="42">*</op:operator><name pos:line="775" pos:column="43">wzFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define pos:line="777" pos:column="1">#<cpp:directive pos:line="777" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="777" pos:column="9">MsoFindQfid</name></cpp:macro> <cpp:value pos:line="777" pos:column="21">MsoFindFid</cpp:value></cpp:define>

<comment type="block" pos:line="779" pos:column="1">/*----------------------------------------------------------------------------
	MsoFindFidInList

	Returns one of the fid's in the msofidNil terminated list according
	to equivalent filenames.  Returns msofidNil if not found.
	This should be used ONLY when filenames are given from outside sources.
------------------------------------------------------------------ JJames --*/</comment>
<macro><name pos:line="786" pos:column="1">MSOAPI_</name><argument_list pos:line="786" pos:column="8">(<argument pos:line="786" pos:column="9">msofidT</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="786" pos:column="18">MsoFindFidInList</name><argument_list pos:line="786" pos:column="34">(<argument><expr pos:line="786" pos:column="35">const <name pos:line="786" pos:column="41">WCHAR</name> <op:operator pos:line="786" pos:column="47">*</op:operator><name pos:line="786" pos:column="48">wzFile</name></expr></argument>, <argument><expr><name pos:line="786" pos:column="56">msofidT</name> <op:operator pos:line="786" pos:column="64">*</op:operator><name pos:line="786" pos:column="65">pfid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<comment type="block" pos:line="789" pos:column="1">/*----------------------------------------------------------------------------
	MsoFFirstRun

	Performs Office first run if necessary. Call this only if your app has
	already detected that *it* needs to do a first run. This saves one boot
	registry lookup. If this returns FALSE, you must refuse to boot.
------------------------------------------------------------------- JBelt --*/</comment>
<macro><name pos:line="796" pos:column="1">MSOAPI_</name><argument_list pos:line="796" pos:column="8">(<argument pos:line="796" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="796" pos:column="15">MsoFFirstRun</name><argument_list pos:line="796" pos:column="27">(<argument pos:line="796" pos:column="28">HMSOINST hinst</argument>)</argument_list></macro><empty_stmt pos:line="796" pos:column="43">;</empty_stmt>


<comment type="block" pos:line="799" pos:column="1">/*----------------------------------------------------------------------------
	MsoFReinstallProduct

	Reinstall the product.
-------------------------------------------------------------------- KirkG --*/</comment>
<macro><name pos:line="804" pos:column="1">MSOAPIX_</name><argument_list pos:line="804" pos:column="9">(<argument pos:line="804" pos:column="10">BOOL</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="804" pos:column="16">MsoFReinstallProduct</name><argument_list pos:line="804" pos:column="36">(<argument><expr><name pos:line="804" pos:column="37">void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:line="806" pos:column="1">/*---------------------------------------------------------------------------
	MsoFGetUserInfo

	Returns name, company, and serial number (CD key). Each string must be at
	as long msocch[Username|UserInitials|Company|Serial]Max. Pass in NULL if
	not interested in a particular string.
------------------------------------------------------------------- JBelt -*/</comment>
<macro><name pos:line="813" pos:column="1">MSOAPI_</name><argument_list pos:line="813" pos:column="8">(<argument pos:line="813" pos:column="9">BOOL</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="813" pos:column="15">MsoFGetUserInfo</name><argument_list pos:line="813" pos:column="30">(<argument><expr><name pos:line="813" pos:column="31">WCHAR</name> <op:operator pos:line="813" pos:column="37">*</op:operator><name pos:line="813" pos:column="38">wzName</name></expr></argument>, <argument><expr><name pos:line="813" pos:column="46">WCHAR</name> <op:operator pos:line="813" pos:column="52">*</op:operator><name pos:line="813" pos:column="53">wzInitials</name></expr></argument>,
	<argument><expr><name pos:line="814" pos:column="9">WCHAR</name> <op:operator pos:line="814" pos:column="15">*</op:operator><name pos:line="814" pos:column="16">wzCompany</name></expr></argument>, <argument><expr><name pos:line="814" pos:column="27">WCHAR</name> <op:operator pos:line="814" pos:column="33">*</op:operator><name pos:line="814" pos:column="34">wzSerial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<comment type="line" pos:line="817" pos:column="1">// string size limits, not including null terminator</comment>
<cpp:define pos:line="818" pos:column="1">#<cpp:directive pos:line="818" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="818" pos:column="9">msocchUsernameMax</name></cpp:macro>		<cpp:value pos:line="818" pos:column="41">52</cpp:value></cpp:define>
<cpp:define pos:line="819" pos:column="1">#<cpp:directive pos:line="819" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="819" pos:column="9">msocchUserInitialsMax</name></cpp:macro>	<cpp:value pos:line="819" pos:column="33">9</cpp:value></cpp:define>
<cpp:define pos:line="820" pos:column="1">#<cpp:directive pos:line="820" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="820" pos:column="9">msocchCompanyMax</name></cpp:macro>		<cpp:value pos:line="820" pos:column="41">52</cpp:value></cpp:define>
<cpp:define pos:line="821" pos:column="1">#<cpp:directive pos:line="821" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="821" pos:column="9">msocchSerialMax</name></cpp:macro>			<cpp:value pos:line="821" pos:column="41">23</cpp:value></cpp:define>	<comment type="line" pos:line="821" pos:column="49">// RPCNO-LOC-SERIALX-SEQNC</comment>

<comment type="line" pos:line="823" pos:column="1">// for compatibility</comment>
<cpp:define pos:line="824" pos:column="1">#<cpp:directive pos:line="824" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="824" pos:column="9">cbCDUserNameMax</name></cpp:macro> 		<cpp:value pos:line="824" pos:column="41">msocchUsernameMax</cpp:value></cpp:define>
<cpp:define pos:line="825" pos:column="1">#<cpp:directive pos:line="825" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="825" pos:column="9">cbCDOrgNameMax</name></cpp:macro>  		<cpp:value pos:line="825" pos:column="41">msocchCompanyMax</cpp:value></cpp:define>
<cpp:define pos:line="826" pos:column="1">#<cpp:directive pos:line="826" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="826" pos:column="9">cbFormattedPID</name></cpp:macro>  		<cpp:value pos:line="826" pos:column="41">msocchSerialMax</cpp:value></cpp:define>


<comment type="block" pos:line="829" pos:column="1">/*---------------------------------------------------------------------------
	MsoLGetProductInfo

	An Office wrapper around MsiGetProductInfoW().
---------------------------------------------------------------- EricSchr -*/</comment>
<macro><name pos:line="834" pos:column="1">MSOAPIX_</name><argument_list pos:line="834" pos:column="9">(<argument pos:line="834" pos:column="10">LONG</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="834" pos:column="16">MsoLGetProductInfo</name><argument_list pos:line="834" pos:column="34">(<argument><expr pos:line="834" pos:column="35">const <name pos:line="834" pos:column="41">WCHAR</name> <op:operator pos:line="834" pos:column="47">*</op:operator><name pos:line="834" pos:column="48">wzProperty</name></expr></argument>,
	<argument><expr><name pos:line="835" pos:column="9">WCHAR</name> <op:operator pos:line="835" pos:column="15">*</op:operator><name pos:line="835" pos:column="16">wzValueBuf</name></expr></argument>, <argument><expr><name pos:line="835" pos:column="28">DWORD</name> <op:operator pos:line="835" pos:column="34">*</op:operator><name pos:line="835" pos:column="35">pcchValueBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<comment type="block" pos:line="838" pos:column="1">/*-----------------------------------------------------------------------------
	MsoLoadLocalizedLibraryFull

	LoadLibraryEx's the file fid and language plcid (if non NULL).

	If dwFlags is zero, does the equivalent of a simple LoadLibrary.

	If wzFullPath is non NULL, returns the path of the module loaded (max
	length MAX_PATH + null char).
------------------------------------------------------------------- JBelt ---*/</comment>
<macro><name pos:line="848" pos:column="1">MSOAPI_</name><argument_list pos:line="848" pos:column="8">(<argument pos:line="848" pos:column="9">HMODULE</argument>)</argument_list></macro> <macro><name pos:line="848" pos:column="18">MsoLoadLocalizedLibraryFull</name><argument_list pos:line="848" pos:column="45">(<argument pos:line="848" pos:column="46">msofidT fid</argument>, <argument pos:line="848" pos:column="59">LCID *plcid</argument>,
	<argument pos:line="849" pos:column="9">const DWORD dwFlags</argument>, <argument pos:line="849" pos:column="30">WCHAR *wzFullPath</argument>)</argument_list></macro><empty_stmt pos:line="849" pos:column="48">;</empty_stmt>


<comment type="block" pos:line="852" pos:column="1">/*-----------------------------------------------------------------------------
	MsoLoadLocalizedLibraryEx

	Thin wrapper around MsoLoadLocalizedLibraryFull.
------------------------------------------------------------------- JBelt ---*/</comment>
<macro><name pos:line="857" pos:column="1">MSOAPI_</name><argument_list pos:line="857" pos:column="8">(<argument pos:line="857" pos:column="9">HMODULE</argument>)</argument_list></macro> <macro><name pos:line="857" pos:column="18">MsoLoadLocalizedLibraryEx</name><argument_list pos:line="857" pos:column="43">(<argument pos:line="857" pos:column="44">msofidT fid</argument>, <argument pos:line="857" pos:column="57">LCID lcid</argument>, <argument pos:line="857" pos:column="68">DWORD dwFlags</argument>)</argument_list></macro><empty_stmt pos:line="857" pos:column="82">;</empty_stmt>

<cpp:define pos:line="859" pos:column="1">#<cpp:directive pos:line="859" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="859" pos:column="9">MsoLoadLibrary</name><parameter_list pos:line="859" pos:column="23">(<param><type><name pos:line="859" pos:column="24">fid</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="859" pos:column="29">MsoLoadLocalizedLibraryEx(fid, 0, 0)</cpp:value></cpp:define>
<cpp:define pos:line="860" pos:column="1">#<cpp:directive pos:line="860" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="860" pos:column="9">MsoLoadLibraryEx</name><parameter_list pos:line="860" pos:column="25">(<param><type><name pos:line="860" pos:column="26">fid</name></type></param>, <param><type><name pos:line="860" pos:column="31">dwFlags</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="860" pos:column="40">MsoLoadLocalizedLibraryEx(fid, 0, dwFlags)</cpp:value></cpp:define>
<cpp:define pos:line="861" pos:column="1">#<cpp:directive pos:line="861" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="861" pos:column="9">MsoLoadLocalizedLibrary</name><parameter_list pos:line="861" pos:column="32">(<param><type><name pos:line="861" pos:column="33">fid</name></type></param>, <param><type><name pos:line="861" pos:column="38">lcid</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="861" pos:column="44">MsoLoadLocalizedLibraryEx(fid, lcid, 0)</cpp:value></cpp:define>


<comment type="block" pos:line="864" pos:column="1">/*----------------------------------------------------------------------------
	MsoWzEncodeQcidQualifier

	From a qcid and a qualifier, fills wzQC with {Qcid\Qualifier. This lets
	you store both inside a single string. wzQC must be at least 256
	characters long. Returns a pointer to the end of the string.
-------------------------------------------------------------------- JBelt --*/</comment>
<macro><name pos:line="871" pos:column="1">MSOAPI_</name><argument_list pos:line="871" pos:column="8">(<argument pos:line="871" pos:column="9">WCHAR *</argument>)</argument_list></macro> <macro><name pos:line="871" pos:column="18">MsoWzEncodeQcidQualifier</name><argument_list pos:line="871" pos:column="42">(<argument pos:line="871" pos:column="43">msocidT qcid</argument>, <argument pos:line="871" pos:column="57">WCHAR *wzQualifier</argument>, <argument pos:line="871" pos:column="77">WCHAR *wzQC</argument>)</argument_list></macro><empty_stmt pos:line="871" pos:column="89">;</empty_stmt>


<comment type="block" pos:line="874" pos:column="1">/*----------------------------------------------------------------------------
	MsoFGimmeComponentQcidQualifierEx

	Decodes the qcid and qualifier encoded in wzQC, and calls
	MsoFGimmeComponentQualifier on the results. wzPath must be at least
	MAX_PATH+1 characters long.
-------------------------------------------------------------------- JBelt --*/</comment>
<macro><name pos:line="881" pos:column="1">MSOAPI_</name><argument_list pos:line="881" pos:column="8">(<argument pos:line="881" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="881" pos:column="15">MsoFGimmeComponentQcidQualifierEx</name><argument_list pos:line="881" pos:column="48">(<argument pos:line="881" pos:column="49">WCHAR *wzQC</argument>, <argument pos:line="881" pos:column="62">WCHAR *wzPath</argument>,
	<argument pos:line="882" pos:column="9">DWORD dwGimmeFlags</argument>)</argument_list></macro><empty_stmt pos:line="882" pos:column="28">;</empty_stmt>

<cpp:define pos:line="884" pos:column="1">#<cpp:directive pos:line="884" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="884" pos:column="9">MsoFGimmeComponentQcidQualifier</name><parameter_list pos:line="884" pos:column="40">(<param><type><name pos:line="884" pos:column="41">wzQC</name></type></param>, <param><type><name pos:line="884" pos:column="47">wzPath</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="884" pos:column="55">MsoFGimmeComponentQcidQualifierEx(wzQC, wzPath, msotcogfProvide)</cpp:value></cpp:define>


<comment type="block" pos:line="887" pos:column="1">/*----------------------------------------------------------------------------
	MsoFGimmeComponentQcidQualifierDp

	Wrapper around MsoFGimmeComponentQcidQualifierEx, which also takes into
	account the dp variable passed in (see msotcodpxxx below). Used in loops,
	to carry the user choice to the first Gimme prompt through all subsequent
	prompts.
-------------------------------------------------------------------- JBelt --*/</comment>
<macro><name pos:line="895" pos:column="1">MSOAPI_</name><argument_list pos:line="895" pos:column="8">(<argument pos:line="895" pos:column="9">BOOL</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="895" pos:column="15">MsoFGimmeComponentQcidQualifierDp</name><argument_list pos:line="895" pos:column="48">(<argument><expr><name pos:line="895" pos:column="49">WCHAR</name> <op:operator pos:line="895" pos:column="55">*</op:operator><name pos:line="895" pos:column="56">wzQC</name></expr></argument>, <argument><expr><name pos:line="895" pos:column="62">WCHAR</name> <op:operator pos:line="895" pos:column="68">*</op:operator><name pos:line="895" pos:column="69">wzPath</name></expr></argument>,
	<argument><expr><name pos:line="896" pos:column="9">int</name> <op:operator pos:line="896" pos:column="13">*</op:operator><name pos:line="896" pos:column="14">pdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define pos:line="898" pos:column="1">#<cpp:directive pos:line="898" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="898" pos:column="9">msotcodpNotAsked</name></cpp:macro>    <cpp:value pos:line="898" pos:column="29">0</cpp:value></cpp:define>
<cpp:define pos:line="899" pos:column="1">#<cpp:directive pos:line="899" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="899" pos:column="9">msotcodpInstall</name></cpp:macro>     <cpp:value pos:line="899" pos:column="29">1</cpp:value></cpp:define>
<cpp:define pos:line="900" pos:column="1">#<cpp:directive pos:line="900" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="900" pos:column="9">msotcodpDontInstall</name></cpp:macro> <cpp:value pos:line="900" pos:column="29">2</cpp:value></cpp:define>


<comment type="block" pos:line="903" pos:column="1">/*-----------------------------------------------------------------------------
	MsoForgetLastGimme

	The Gimme API automatically approves or rejects subsequent calls
	within 10 seconds and before the event monitor picks up a user action.
	Successful installs turn on automatic approval, failures and user-cancels
	turn on automatic rejection.  This function resets that memory and should
	be used in cases where events don't get to the monitor.
------------------------------------------------------------------ JJames ---*/</comment>
<macro><name pos:line="912" pos:column="1">MSOAPI_</name><argument_list pos:line="912" pos:column="8">(<argument pos:line="912" pos:column="9">void</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="912" pos:column="15">MsoForgetLastGimme</name><argument_list pos:line="912" pos:column="33">(<argument><expr><name pos:line="912" pos:column="34">void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<comment type="block" pos:line="915" pos:column="1">/*----------------------------------------------------------------------------
	MsoFFormatMessage

	Formats an appropriate error message for the last Gimme error.
	Returns FALSE if unknown.
	NOT REALLY USED.
------------------------------------------------------------------ JJames --*/</comment>
<macro><name pos:line="922" pos:column="1">MSOAPI_</name><argument_list pos:line="922" pos:column="8">(<argument pos:line="922" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="922" pos:column="15">MsoFFormatMessage</name><argument_list pos:line="922" pos:column="32">(<argument pos:line="922" pos:column="33">DWORD dwError</argument>, <argument pos:line="922" pos:column="48">WCHAR *wzMessage</argument>)</argument_list></macro><empty_stmt pos:line="922" pos:column="65">;</empty_stmt>


<comment type="block" pos:line="925" pos:column="1">/*------------------------------------------------------------------------
	MsoLaunchFid

	Given a FID for a file that represents a setup-installed EXE,
	ShellExec it and return the hinstance.  Pases arguments specified
	in character string, if any (may be NULL)
---------------------------------------------------------------- MikeKell -*/</comment>
<macro><name pos:line="932" pos:column="1">MSOAPI_</name><argument_list pos:line="932" pos:column="8">(<argument pos:line="932" pos:column="9">HINSTANCE</argument>)</argument_list></macro> <macro><name pos:line="932" pos:column="20">MsoLaunchFid</name><argument_list pos:line="932" pos:column="32">(<argument pos:line="932" pos:column="33">msofidT fid</argument>, <argument pos:line="932" pos:column="46">const WCHAR *wzArguments</argument>, <argument pos:line="932" pos:column="72">int sw</argument>)</argument_list></macro><empty_stmt pos:line="932" pos:column="79">;</empty_stmt>


<comment type="block" pos:line="935" pos:column="1">/*------------------------------------------------------------------------
	MsoFLaunchMsInfo

	Launches MSInfo.  Does some extra checking like bringing it forward
	if if is already there.  wzArguments should contain the name of the
	application invoking MSInfo.
---------------------------------------------------------------- MikeKell -*/</comment>
<macro><name pos:line="942" pos:column="1">MSOAPI_</name><argument_list pos:line="942" pos:column="8">(<argument pos:line="942" pos:column="9">BOOL</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="942" pos:column="15">MsoFLaunchMsInfo</name><argument_list pos:line="942" pos:column="31">(<argument><expr pos:line="942" pos:column="32">const <name pos:line="942" pos:column="38">WCHAR</name> <op:operator pos:line="942" pos:column="44">*</op:operator><name pos:line="942" pos:column="45">wzArguments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<comment type="block" pos:line="945" pos:column="1">/*----------------------------------------------------------------------------
	MsoFEnsureUserData

	If the registry referenced by rid than 1, ensures the user data in ftid
	is on the machine, then writes 1 in the registry. Call this after initing
	ORAPI, but before reading anything, to make sure Setup-time user data has
	been written for this particular user.
-------------------------------------------------------------------- JBelt --*/</comment>
<macro><name pos:line="953" pos:column="1">MSOAPI_</name><argument_list pos:line="953" pos:column="8">(<argument pos:line="953" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="953" pos:column="15">MsoFEnsureUserData</name><argument_list pos:line="953" pos:column="33">(<argument pos:line="953" pos:column="34">int rid</argument>, <argument pos:line="953" pos:column="43">msoftidT ftid</argument>)</argument_list></macro><empty_stmt pos:line="953" pos:column="57">;</empty_stmt>


<comment type="block" pos:line="956" pos:column="1">/*----------------------------------------------------------------------------
	MsoFEnsureTypelib

	1) Detect Mso Typelib key existence: 
	[HKEY_CLASSES_ROOT\TypeLib\{2DF8D04C-5BFA-101B-BDE5-00AA0044DE52}\2.2\0\win32]
    2) call Darwin to repair the feature that contains the typelib (ProductFiles)
	Note: Call this after initing ORAPI and Gimme. 
---------------------------------------------------------------- (EricLam) --*/</comment>
<macro><name pos:line="964" pos:column="1">MSOAPI_</name><argument_list pos:line="964" pos:column="8">(<argument pos:line="964" pos:column="9">BOOL</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="964" pos:column="15">MsoFEnsureMsoTypelib</name><argument_list pos:line="964" pos:column="35">()</argument_list></call></expr>;</expr_stmt>


<comment type="block" pos:line="967" pos:column="1">/*----------------------------------------------------------------------------
	MsoFInGimme

	Returns TRUE if we're currently stuck in a potentially long Darwin call.
	Be patient if you get called in a message filter and this returns TRUE.
	Fix Office 9 24103.
-------------------------------------------------------------------- JBelt --*/</comment>
<macro><name pos:line="974" pos:column="1">MSOAPI_</name><argument_list pos:line="974" pos:column="8">(<argument pos:line="974" pos:column="9">BOOL</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="974" pos:column="15">MsoFInGimme</name><argument_list pos:line="974" pos:column="26">()</argument_list></call></expr>;</expr_stmt>


<comment type="block" pos:line="977" pos:column="1">/*----------------------------------------------------------------------------
	MsoDwGetGimmeTableVersion

	Returns the version number of the passed-in Gimme table.
-------------------------------------------------------------------- JBelt --*/</comment>
<macro><name pos:line="982" pos:column="1">MSOAPIX_</name><argument_list pos:line="982" pos:column="9">(<argument pos:line="982" pos:column="10">DWORD</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="982" pos:column="17">MsoDwGetGimmeTableVersion</name><argument_list pos:line="982" pos:column="42">(<argument><expr><name pos:line="982" pos:column="43">MSOTCFCF</name> <op:operator pos:line="982" pos:column="52">*</op:operator><name pos:line="982" pos:column="53">pfcf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<comment type="block" pos:line="985" pos:column="1">/*------------------------------------------------------------------------
	MsoFIsOLEAwareDarwin

	Returns TRUE if OS recognizes Darwin descriptors in the OLE registry.
---------------------------------------------------------------- WesYang -*/</comment>
<macro><name pos:line="990" pos:column="1">MSOAPIX_</name><argument_list pos:line="990" pos:column="9">(<argument pos:line="990" pos:column="10">BOOL</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="990" pos:column="16">MsoFIsOLEAwareDarwin</name> <argument_list pos:line="990" pos:column="37">()</argument_list></call></expr>;</expr_stmt>


<comment type="block" pos:line="993" pos:column="1">/*------------------------------------------------------------------------
	Obsolete Gimme wrapper to the standard OLE calls
---------------------------------------------------------------- JJames -*/</comment>

<cpp:define pos:line="997" pos:column="1">#<cpp:directive pos:line="997" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="997" pos:column="9">MsoFGimmeCoCreateInstance</name><parameter_list pos:line="997" pos:column="34">(<param><type><name pos:line="997" pos:column="35">rclsid</name></type></param>,<param><type><name pos:line="997" pos:column="42">pUnkOuter</name></type></param>,<param><type><name pos:line="997" pos:column="52">dwClsContext</name></type></param>,<param><type><name pos:line="997" pos:column="65">riid</name></type></param>,<param><type><name pos:line="997" pos:column="70">ppv</name></type></param>)</parameter_list></cpp:macro> \
		         <cpp:value pos:line="998" pos:column="26">CoCreateInstance(rclsid,pUnkOuter,dwClsContext,riid,ppv)</cpp:value></cpp:define>
<cpp:define pos:line="999" pos:column="1">#<cpp:directive pos:line="999" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="999" pos:column="9">MsoFGimmeCoGetClassObject</name><parameter_list pos:line="999" pos:column="34">(<param><type><name pos:line="999" pos:column="35">rclsid</name></type></param>,<param><type><name pos:line="999" pos:column="42">dwClsContext</name></type></param>,<param><type><name pos:line="999" pos:column="55">pServerInfo</name></type></param>,<param><type><name pos:line="999" pos:column="67">riid</name></type></param>,<param><type><name pos:line="999" pos:column="72">ppv</name></type></param>)</parameter_list></cpp:macro> \
		         <cpp:value pos:line="1000" pos:column="26">CoGetClassObject(rclsid,dwClsContext,pServerInfo,riid,ppv)</cpp:value></cpp:define>
<cpp:define pos:line="1001" pos:column="1">#<cpp:directive pos:line="1001" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1001" pos:column="9">MsoHrCoCreateInstance</name><parameter_list pos:line="1001" pos:column="30">(<param><type><name pos:line="1001" pos:column="31">rclsid</name></type></param>,<param><type><name pos:line="1001" pos:column="38">pUnkOuter</name></type></param>,<param><type><name pos:line="1001" pos:column="48">dwClsContext</name></type></param>,<param><type><name pos:line="1001" pos:column="61">riid</name></type></param>,<param><type><name pos:line="1001" pos:column="66">ppv</name></type></param>)</parameter_list></cpp:macro> \
		     <cpp:value pos:line="1002" pos:column="22">CoCreateInstance(rclsid,pUnkOuter,dwClsContext,riid,ppv)</cpp:value></cpp:define>
<cpp:define pos:line="1003" pos:column="1">#<cpp:directive pos:line="1003" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1003" pos:column="9">MsoHrCoGetClassObject</name><parameter_list pos:line="1003" pos:column="30">(<param><type><name pos:line="1003" pos:column="31">rclsid</name></type></param>,<param><type><name pos:line="1003" pos:column="38">dwClsContext</name></type></param>,<param><type><name pos:line="1003" pos:column="51">pServerInfo</name></type></param>,<param><type><name pos:line="1003" pos:column="63">riid</name></type></param>,<param><type><name pos:line="1003" pos:column="68">ppv</name></type></param>)</parameter_list></cpp:macro> \
		     <cpp:value pos:line="1004" pos:column="22">CoGetClassObject(rclsid,dwClsContext,pServerInfo,riid,ppv)</cpp:value></cpp:define>
<cpp:define pos:line="1005" pos:column="1">#<cpp:directive pos:line="1005" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1005" pos:column="9">MsoHrOleCreate</name><parameter_list pos:line="1005" pos:column="23">(<param><type><name pos:line="1005" pos:column="24">rclsid</name></type></param>,<param><type><name pos:line="1005" pos:column="31">rrid</name></type></param>,<param><type><name pos:line="1005" pos:column="36">renderopt</name></type></param>,<param><type><name pos:line="1005" pos:column="46">pFormatEtc</name></type></param>,<param><type><name pos:line="1005" pos:column="57">pClientSite</name></type></param>,<param><type><name pos:line="1005" pos:column="69">pStg</name></type></param>,<param><type><name pos:line="1005" pos:column="74">ppvObject</name></type></param>)</parameter_list></cpp:macro> \
		     <cpp:value pos:line="1006" pos:column="22">OleCreate(rclsid,rrid,renderopt,pFormatEtc,pClientSite,pStg,ppvObject)</cpp:value></cpp:define>
<cpp:define pos:line="1007" pos:column="1">#<cpp:directive pos:line="1007" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1007" pos:column="9">MsoHrOleCreateLink</name><parameter_list pos:line="1007" pos:column="27">(<param><type><name pos:line="1007" pos:column="28">pmkLinkSrc</name></type></param>,<param><type><name pos:line="1007" pos:column="39">rrid</name></type></param>,<param><type><name pos:line="1007" pos:column="44">renderopt</name></type></param>,<param><type><name pos:line="1007" pos:column="54">pFormatEtc</name></type></param>,<param><type><name pos:line="1007" pos:column="65">pClientSite</name></type></param>,<param><type><name pos:line="1007" pos:column="77">pStg</name></type></param>,<param><type><name pos:line="1007" pos:column="82">ppvObj</name></type></param>)</parameter_list></cpp:macro> \
		     <cpp:value pos:line="1008" pos:column="22">OleCreateLink(pmkLinkSrc,rrid,renderopt,pFormatEtc,pClientSite,pStg,ppvObj)</cpp:value></cpp:define>
<cpp:define pos:line="1009" pos:column="1">#<cpp:directive pos:line="1009" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1009" pos:column="9">MsoHrOleCreateFromFile</name><parameter_list pos:line="1009" pos:column="31">(<param><type><name pos:line="1009" pos:column="32">rclsid</name></type></param>,<param><type><name pos:line="1009" pos:column="39">lpszFileName</name></type></param>,<param><type><name pos:line="1009" pos:column="52">rrid</name></type></param>,<param><type><name pos:line="1009" pos:column="57">renderopt</name></type></param>,<param><type><name pos:line="1009" pos:column="67">pFormatEtc</name></type></param>,<param><type><name pos:line="1009" pos:column="78">pClientSite</name></type></param>,<param><type><name pos:line="1009" pos:column="90">pStg</name></type></param>,<param><type><name pos:line="1009" pos:column="95">ppvObject</name></type></param>)</parameter_list></cpp:macro> \
		     <cpp:value pos:line="1010" pos:column="22">OleCreateFromFile(rclsid,lpszFileName,rrid,renderopt,pFormatEtc,pClientSite,pStg,ppvObject)</cpp:value></cpp:define>
<cpp:define pos:line="1011" pos:column="1">#<cpp:directive pos:line="1011" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1011" pos:column="9">MsoHrOleCreateLinkToFile</name><parameter_list pos:line="1011" pos:column="33">(<param><type><name pos:line="1011" pos:column="34">lpszFileName</name></type></param>,<param><type><name pos:line="1011" pos:column="47">rrid</name></type></param>,<param><type><name pos:line="1011" pos:column="52">renderopt</name></type></param>,<param><type><name pos:line="1011" pos:column="62">pFormatEtc</name></type></param>,<param><type><name pos:line="1011" pos:column="73">pClientSite</name></type></param>,<param><type><name pos:line="1011" pos:column="85">pStg</name></type></param>,<param><type><name pos:line="1011" pos:column="90">ppvObject</name></type></param>)</parameter_list></cpp:macro> \
		     <cpp:value pos:line="1012" pos:column="22">OleCreateLinkToFile(lpszFileName,rrid,renderopt,pFormatEtc,pClientSite,pStg,ppvObject)</cpp:value></cpp:define>
<cpp:define pos:line="1013" pos:column="1">#<cpp:directive pos:line="1013" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1013" pos:column="9">MsoHrOleCreateFromData</name><parameter_list pos:line="1013" pos:column="31">(<param><type><name pos:line="1013" pos:column="32">pSrcDataObj</name></type></param>,<param><type><name pos:line="1013" pos:column="44">rrid</name></type></param>,<param><type><name pos:line="1013" pos:column="49">renderopt</name></type></param>,<param><type><name pos:line="1013" pos:column="59">pFormatEtc</name></type></param>,<param><type><name pos:line="1013" pos:column="70">pClientSite</name></type></param>,<param><type><name pos:line="1013" pos:column="82">pStg</name></type></param>,<param><type><name pos:line="1013" pos:column="87">ppvObject</name></type></param>)</parameter_list></cpp:macro> \
		     <cpp:value pos:line="1014" pos:column="22">OleCreateFromData(pSrcDataObj,rrid,renderopt,pFormatEtc,pClientSite,pStg,ppvObject)</cpp:value></cpp:define>
<cpp:define pos:line="1015" pos:column="1">#<cpp:directive pos:line="1015" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1015" pos:column="9">MsoHrOleCreateStaticFromData</name><parameter_list pos:line="1015" pos:column="37">(<param><type><name pos:line="1015" pos:column="38">pSrcDataObj</name></type></param>,<param><type><name pos:line="1015" pos:column="50">rrid</name></type></param>,<param><type><name pos:line="1015" pos:column="55">renderopt</name></type></param>,<param><type><name pos:line="1015" pos:column="65">pFormatEtc</name></type></param>,<param><type><name pos:line="1015" pos:column="76">pClientSite</name></type></param>,<param><type><name pos:line="1015" pos:column="88">pStg</name></type></param>,<param><type><name pos:line="1015" pos:column="93">ppvObject</name></type></param>)</parameter_list></cpp:macro> \
		     <cpp:value pos:line="1016" pos:column="22">OleCreateStaticFromData(pSrcDataObj,rrid,renderopt,pFormatEtc,pClientSite,pStg,ppvObject)</cpp:value></cpp:define>
<cpp:define pos:line="1017" pos:column="1">#<cpp:directive pos:line="1017" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1017" pos:column="9">MsoHrOleCreateLinkFromData</name><parameter_list pos:line="1017" pos:column="35">(<param><type><name pos:line="1017" pos:column="36">pSrcDataObj</name></type></param>,<param><type><name pos:line="1017" pos:column="48">rrid</name></type></param>,<param><type><name pos:line="1017" pos:column="53">renderopt</name></type></param>,<param><type><name pos:line="1017" pos:column="63">pFormatEtc</name></type></param>,<param><type><name pos:line="1017" pos:column="74">pClientSite</name></type></param>,<param><type><name pos:line="1017" pos:column="86">pStg</name></type></param>,<param><type><name pos:line="1017" pos:column="91">ppvObject</name></type></param>)</parameter_list></cpp:macro> \
		     <cpp:value pos:line="1018" pos:column="22">OleCreateLinkFromData(pSrcDataObj,rrid,renderopt,pFormatEtc,pClientSite,pStg,ppvObject)</cpp:value></cpp:define>
<cpp:define pos:line="1019" pos:column="1">#<cpp:directive pos:line="1019" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1019" pos:column="9">MsoHrOleLoad</name><parameter_list pos:line="1019" pos:column="21">(<param><type><name pos:line="1019" pos:column="22">pStg</name></type></param>,<param><type><name pos:line="1019" pos:column="27">riid</name></type></param>,<param><type><name pos:line="1019" pos:column="32">pClientSite</name></type></param>,<param><type><name pos:line="1019" pos:column="44">ppvObj</name></type></param>)</parameter_list></cpp:macro> \
		     <cpp:value pos:line="1020" pos:column="22">OleLoad(pStg,riid,pClientSite,ppvObj)</cpp:value></cpp:define>
<cpp:define pos:line="1021" pos:column="1">#<cpp:directive pos:line="1021" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1021" pos:column="9">MsoHrOleLoadFromStream</name><parameter_list pos:line="1021" pos:column="31">(<param><type><name pos:line="1021" pos:column="32">pStm</name></type></param>,<param><type><name pos:line="1021" pos:column="37">iidInterface</name></type></param>,<param><type><name pos:line="1021" pos:column="50">ppvObj</name></type></param>)</parameter_list></cpp:macro> \
		     <cpp:value pos:line="1022" pos:column="22">OleLoadFromStream(pStm,iidInterface,ppvObj)</cpp:value></cpp:define>

                            
<comment type="block" pos:line="1025" pos:column="1">/*---------------------------------------------------------------------------
	IMsoGimmeUser callback for Gimme clients.
------------------------------------------------------------------- JBelt -*/</comment>

<cpp:undef pos:line="1029" pos:column="1">#<cpp:directive pos:line="1029" pos:column="2">undef</cpp:directive>  <name pos:line="1029" pos:column="9">INTERFACE</name></cpp:undef>
<cpp:define pos:line="1030" pos:column="1">#<cpp:directive pos:line="1030" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1030" pos:column="9">INTERFACE</name></cpp:macro>  <cpp:value pos:line="1030" pos:column="20">IMsoGimmeUser</cpp:value></cpp:define>

<cpp:define pos:line="1032" pos:column="1">#<cpp:directive pos:line="1032" pos:column="2">define</cpp:directive>	<cpp:macro><name pos:line="1032" pos:column="9">cchMaxMsoGimmeUserFGetString</name></cpp:macro>	<cpp:value pos:line="1032" pos:column="41">300</cpp:value></cpp:define>	<comment type="line" pos:line="1032" pos:column="49">// maximum length of returned string</comment>
											<comment type="line" pos:line="1033" pos:column="89">// from IMsoGimmeUser::FGetString</comment>
<cpp:define pos:line="1034" pos:column="1">#<cpp:directive pos:line="1034" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1034" pos:column="9">GIMMEUSER_INSTALL</name></cpp:macro>	<cpp:value pos:line="1034" pos:column="33">0x01</cpp:value></cpp:define>	<comment type="line" pos:line="1034" pos:column="41">// ok to install</comment>
<cpp:define pos:line="1035" pos:column="1">#<cpp:directive pos:line="1035" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1035" pos:column="9">GIMMEUSER_GIMMEUI</name></cpp:macro>	<cpp:value pos:line="1035" pos:column="33">0x02</cpp:value></cpp:define>	<comment type="line" pos:line="1035" pos:column="41">// ok to display Gimme UI (install prompt, etc)</comment>
<cpp:define pos:line="1036" pos:column="1">#<cpp:directive pos:line="1036" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1036" pos:column="9">GIMMEUSER_DARWINUI</name></cpp:macro>	<cpp:value pos:line="1036" pos:column="33">0x04</cpp:value></cpp:define>	<comment type="line" pos:line="1036" pos:column="41">// ok to display Darwin UI</comment>
<cpp:define pos:line="1037" pos:column="1">#<cpp:directive pos:line="1037" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1037" pos:column="9">GIMMEUSER_DEFAULT</name></cpp:macro>   <cpp:value pos:line="1037" pos:column="29">(GIMMEUSER_INSTALL | GIMMEUSER_GIMMEUI | GIMMEUSER_DARWINUI)</cpp:value></cpp:define>

<macro><name pos:line="1039" pos:column="1">DECLARE_INTERFACE</name><argument_list pos:line="1039" pos:column="18">(<argument pos:line="1039" pos:column="19">IMsoGimmeUser</argument>)</argument_list></macro>
<block pos:line="1040" pos:column="1">{

	<comment type="block" pos:line="1042" pos:column="9">/* Debugging interface for this interface */</comment>
	<decl_stmt><decl><type><name pos:line="1043" pos:column="9">MSODEBUGMETHOD</name></type>

	<comment type="block" pos:line="1045" pos:column="9">/* If Darwin is on the machine, but your app doesn't have a product code,
		Office will look for a MSI to install on the fly, and call you.
		If you return FALSE, Office immediately gives up looking for a MSI.
		If you return TRUE, Office will look for the MSI.
		- If you set *pfPattern to TRUE, wtzPattern is assumed to be a file
			pattern (with wildcards). If you set *pfPattern to FALSE, wtzPattern
			is assumed to be a fully qualified path to the file, and is
			used as is.
		- Office prefills wtzPattern with a suggested search pattern, and
			pfPattern with TRUE. */</comment>
	<name pos:line="1055" pos:column="9">MSOMETHOD_</name><argument_list pos:line="1055" pos:column="19">(<argument><expr><name pos:line="1055" pos:column="20">BOOL</name></expr></argument>, <argument><expr><name pos:line="1055" pos:column="26">FSearchMSI</name></expr></argument>)</argument_list> <argument_list pos:line="1055" pos:column="38">(<argument><expr><name pos:line="1055" pos:column="39">THIS_</name> <name pos:line="1055" pos:column="45">WCHAR</name> <op:operator pos:line="1055" pos:column="51">*</op:operator><name pos:line="1055" pos:column="52">wtzPattern</name></expr></argument>, <argument><expr><name pos:line="1055" pos:column="64">BOOL</name> <op:operator pos:line="1055" pos:column="69">*</op:operator><name pos:line="1055" pos:column="70">pfPattern</name></expr></argument>)</argument_list> <name pos:line="1055" pos:column="81">PURE</name></decl>;</decl_stmt>

	<comment type="block" pos:line="1057" pos:column="9">/* Gimme is ready to demand install something. Return a combination of
		GIMMEUSER_xxx flags declared above, or GIMMEUSER_DEFAULT. */</comment>
	<macro><name pos:line="1059" pos:column="9">MSOMETHOD_</name><argument_list pos:line="1059" pos:column="19">(<argument pos:line="1059" pos:column="20">DWORD</argument>, <argument pos:line="1059" pos:column="27">DwInstallBehavior</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="1059" pos:column="46">(</op:operator><name pos:line="1059" pos:column="47">THIS</name><op:operator pos:line="1059" pos:column="51">)</op:operator> <name pos:line="1059" pos:column="53">PURE</name></expr>;</expr_stmt>

	<comment type="block" pos:line="1061" pos:column="9">/* The Gimme layer needs the string corresponding to the string identifier
		corresponding to an id you have specified in your tcinuse.txt. Fill
		wtz with the string and return TRUE; return FALSE if unable to fill
		the string, and Gimme will default to a generic string.  Note the
		buffer is a wtz, i.e. the first entry is the length of the string,
		not including the terminating null.  The size of the buffer is
		cchMaxMsoGimmeUserFGetString.  */</comment>
	<macro><name pos:line="1068" pos:column="9">MSOMETHOD_</name><argument_list pos:line="1068" pos:column="19">(<argument pos:line="1068" pos:column="20">BOOL</argument>, <argument pos:line="1068" pos:column="26">FGetString</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="1068" pos:column="38">(</op:operator><name pos:line="1068" pos:column="39">THIS_</name> <name pos:line="1068" pos:column="45">int</name> <name pos:line="1068" pos:column="49">ids</name><op:operator pos:line="1068" pos:column="52">,</op:operator> <name pos:line="1068" pos:column="54">WCHAR</name> <op:operator pos:line="1068" pos:column="60">*</op:operator><name pos:line="1068" pos:column="61">wtz</name><op:operator pos:line="1068" pos:column="64">)</op:operator> <name pos:line="1068" pos:column="66">PURE</name></expr>;</expr_stmt>

	<comment type="block" pos:line="1070" pos:column="9">/* Return the directory in which most of your files live (your main, or bin,
		directory), and TRUE. The Gimme layer uses this directory for search for
		files for dev override (oprep machines), and resiliency (if Darwin is
		dead, there's a MSI mismatch, etc). Office prefills wtzDir with the
		directory where the EXE which launched the process lives. wtzDir is
		MAX_PATH+1 long. Returning FALSE turns off override / resiliency.
		Hint: use MsoGetModuleFilenameW to get your main DLL / EXE path. */</comment>
	<macro><name pos:line="1077" pos:column="9">MSOMETHOD_</name><argument_list pos:line="1077" pos:column="19">(<argument pos:line="1077" pos:column="20">BOOL</argument>, <argument pos:line="1077" pos:column="26">FGetRootDirectory</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="1077" pos:column="45">(</op:operator><name pos:line="1077" pos:column="46">THIS_</name> <name pos:line="1077" pos:column="52">WCHAR</name> <op:operator pos:line="1077" pos:column="58">*</op:operator><name pos:line="1077" pos:column="59">wtzDir</name><op:operator pos:line="1077" pos:column="65">)</op:operator> <name pos:line="1077" pos:column="67">PURE</name></expr>;</expr_stmt>
}</block><empty_stmt pos:line="1078" pos:column="2">;</empty_stmt>

<comment type="block" pos:line="1080" pos:column="1">/*----------------------------------------------------------------------------
	MsoDwGimmeUserInstallBehavior

	This code generates the behavior flags needed for DarwinOK
------------------------------------------------------------------- ARSHADA --*/</comment>
<macro><name pos:line="1085" pos:column="1">MSOAPI_</name><argument_list pos:line="1085" pos:column="8">(<argument pos:line="1085" pos:column="9">DWORD</argument>)</argument_list></macro> <macro><name pos:line="1085" pos:column="16">MsoDwGimmeUserInstallBehavior</name><argument_list pos:line="1085" pos:column="45">(<argument pos:line="1085" pos:column="46">WORD FeatureInstall</argument>, <argument pos:line="1085" pos:column="67">BOOL fDisplayAlerts</argument>)</argument_list></macro><empty_stmt pos:line="1085" pos:column="87">;</empty_stmt>

<comment type="line" pos:line="1087" pos:column="1">// OBSOLETE, DO NOT CALL. Use MsoDwGimmeUserInstallBehavior instead</comment>
<comment type="line" pos:line="1088" pos:column="1">// TODO(JBelt): delete, ssync with VB</comment>
<macro><name pos:line="1089" pos:column="1">MSOAPIX_</name><argument_list pos:line="1089" pos:column="9">(<argument pos:line="1089" pos:column="10">BOOL</argument>)</argument_list></macro> <macro><name pos:line="1089" pos:column="16">MsoFGimmeUserInstallBehavior</name><argument_list pos:line="1089" pos:column="44">(<argument pos:line="1089" pos:column="45">WORD FeatureInstall</argument>, <argument pos:line="1089" pos:column="66">BOOL fDisplayAlerts</argument>, <argument pos:line="1089" pos:column="87">WORD *pwFlag</argument>)</argument_list></macro><empty_stmt pos:line="1089" pos:column="100">;</empty_stmt>


<comment type="block" pos:line="1092" pos:column="1">/*---------------------------------------------------------------------------
	MsoInitGimme

	Hook up your own Gimme tables, if you have any. If you don't, you don't
	need to call this API.
	
	cidCore is a Gimme component ID to your core component.  It must be given.
	pGimmeTables is build by otcdarmake.exe as "vfcf" and can be NULL.
	If your cid is not in the Office tables, then you must build your own
	using otcdarmake.exe from a version of %otools%\inc\misc\tcinuse.txt.
	See http://officedev/tco/gimmehelp.htm for details.

	See IMsoGimmeUser above for description of pigu. You must implement this
	interface, or some Darwin features will be disabled.
------------------------------------------------------------------- JBelt -*/</comment>
<macro><name pos:line="1107" pos:column="1">MSOAPI_</name><argument_list pos:line="1107" pos:column="8">(<argument pos:line="1107" pos:column="9">void</argument>)</argument_list></macro> <macro><name pos:line="1107" pos:column="15">MsoInitGimmeEx</name><argument_list pos:line="1107" pos:column="29">(<argument pos:line="1107" pos:column="30">msocidT cidCore</argument>, <argument pos:line="1107" pos:column="47">MSOTCFCF *pGimmeTables</argument>,
		<argument pos:line="1108" pos:column="17">IMsoGimmeUser *pigu</argument>, <argument pos:line="1108" pos:column="38">msocidT cidFull</argument>, <argument pos:line="1108" pos:column="55">DWORD dwUnused</argument>)</argument_list></macro><empty_stmt pos:line="1108" pos:column="70">;</empty_stmt>
<macro><name pos:line="1109" pos:column="1">MSOAPI_</name><argument_list pos:line="1109" pos:column="8">(<argument pos:line="1109" pos:column="9">void</argument>)</argument_list></macro> <macro><name pos:line="1109" pos:column="15">MsoInitGimme</name><argument_list pos:line="1109" pos:column="27">(<argument pos:line="1109" pos:column="28">msocidT cidCore</argument>, <argument pos:line="1109" pos:column="45">MSOTCFCF *pGimmeTables</argument>,
	<argument pos:line="1110" pos:column="9">IMsoGimmeUser *pigu</argument>)</argument_list></macro><empty_stmt pos:line="1110" pos:column="29">;</empty_stmt>


<comment type="line" pos:line="1113" pos:column="1">// </comment>
<comment type="line" pos:line="1114" pos:column="1">// This enum list which is used for the MsoGimmePublishComponentString() API</comment>
<comment type="line" pos:line="1115" pos:column="1">// below is to be mapped with the %OTOOLS%\inc\misc\msistr.pp list of</comment>
<comment type="line" pos:line="1116" pos:column="1">// string identifiers.  This list is on a "fill in as you go" basis if </comment>
<comment type="line" pos:line="1117" pos:column="1">// other clients wish to access certain strings of the MSI string table.</comment>
<enum pos:line="1118" pos:column="1">enum <block pos:line="1118" pos:column="6">{
	<decl><name pos:line="1119" pos:column="9">msiIndexDesignTemplates</name> <init pos:line="1119" pos:column="33">= <expr><lit:literal type="number" pos:line="1119" pos:column="35">4</lit:literal></expr></init></decl><op:operator pos:line="1119" pos:column="36">,</op:operator> <comment type="line" pos:line="1119" pos:column="38">// msiidsDesignTemplates</comment>
}</block>;</enum>

<macro><name pos:line="1122" pos:column="1">MSOAPI_</name><argument_list pos:line="1122" pos:column="8">(<argument pos:line="1122" pos:column="9">void</argument>)</argument_list></macro> <macro><name pos:line="1122" pos:column="15">MsoGimmePublishComponentString</name><argument_list pos:line="1122" pos:column="45">(<argument pos:line="1122" pos:column="46">DWORD dwIndex</argument>, <argument pos:line="1122" pos:column="61">LPWSTR pwzBuffer</argument>, <argument pos:line="1122" pos:column="79">DWORD *pcchBuffer</argument>)</argument_list></macro><empty_stmt pos:line="1122" pos:column="97">;</empty_stmt>

<comment type="block" format="doxygen" pos:line="1124" pos:column="1">/****************************************************************************
 World-Wide Exe
****************************************************************************/</comment>

<comment type="block" pos:line="1128" pos:column="1">/*----------------------------------------------------------------------------
	MsoInitPluggableUI

	Init and cache the language settings used by pluggable UI
------------------------------------------------------------------- ZIYIW --*/</comment>
<macro><name pos:line="1133" pos:column="1">MSOAPI_</name><argument_list pos:line="1133" pos:column="8">(<argument pos:line="1133" pos:column="9">BOOL</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="1133" pos:column="15">MsoInitPluggableUI</name><argument_list pos:line="1133" pos:column="33">(<argument><expr><name pos:line="1133" pos:column="34">void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:line="1135" pos:column="1">/*-----------------------------------------------------------------------------
	MsoSetupFontLink

	Setup the global Fontlink switch : vfDoFontLink
--------------------------------------------------------------------- ZIYIW -*/</comment>
<macro><name pos:line="1140" pos:column="1">MSOAPIX_</name><argument_list pos:line="1140" pos:column="9">(<argument pos:line="1140" pos:column="10">void</argument>)</argument_list></macro> <macro><name pos:line="1140" pos:column="16">MsoSetupFontLink</name><argument_list pos:line="1140" pos:column="32">(<argument pos:line="1140" pos:column="33">LCID lcidUINew</argument>)</argument_list></macro><empty_stmt pos:line="1140" pos:column="48">;</empty_stmt>

<cpp:ifdef pos:line="1142" pos:column="1">#<cpp:directive pos:line="1142" pos:column="2">ifdef</cpp:directive> <name pos:line="1142" pos:column="8">FUTURE</name></cpp:ifdef>
<comment type="block" pos:line="1143" pos:column="1">/*-----------------------------------------------------------------------------
	MsoMarkFontForInstall

	Marks specified font for demand installation upon next boot. 
------------------------------------------------------------------- NobuyaH -*/</comment>
<macro><name pos:line="1148" pos:column="1">MSOAPIX_</name><argument_list pos:line="1148" pos:column="9">(<argument pos:line="1148" pos:column="10">VOID</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="1148" pos:column="16">MsoMarkFontForInstall</name><argument_list pos:line="1148" pos:column="37">(<argument><expr><name pos:line="1148" pos:column="38">WCHAR</name> <op:operator pos:line="1148" pos:column="44">*</op:operator><name pos:line="1148" pos:column="45">wzFont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:line="1150" pos:column="1">/*-----------------------------------------------------------------------------
	MsoCommitFontForInstall

	Commits marked fonts for demand installation into registry so they will be
	demand installed upon next boot.
------------------------------------------------------------------- NobuyaH -*/</comment>
<macro><name pos:line="1156" pos:column="1">MSOAPIX_</name><argument_list pos:line="1156" pos:column="9">(<argument pos:line="1156" pos:column="10">VOID</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="1156" pos:column="16">MsoCommitFontForInstall</name><argument_list pos:line="1156" pos:column="39">()</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="1157" pos:column="1">#<cpp:directive pos:line="1157" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="1157" pos:column="8">// FUTURE</comment>

<comment type="block" pos:line="1159" pos:column="1">/*----------------------------------------------------------------------------
	MsoAnsiCodePageLimited

	Declare that your application is code page limited.
	Must be called before MsoInitPluggableUI.
------------------------------------------------------------------- ZIYIW --*/</comment>
<macro><name pos:line="1165" pos:column="1">MSOAPI_</name><argument_list pos:line="1165" pos:column="8">(<argument pos:line="1165" pos:column="9">VOID</argument>)</argument_list></macro> <macro><name pos:line="1165" pos:column="15">MsoAnsiCodePageLimited</name><argument_list pos:line="1165" pos:column="37">(<argument pos:line="1165" pos:column="38">BOOL fLimited</argument>)</argument_list></macro><empty_stmt pos:line="1165" pos:column="52">;</empty_stmt>

<comment type="block" pos:line="1167" pos:column="1">/*----------------------------------------------------------------------------
	MsoFAnsiCodePageSupportsLCID

	Test whether the code page supports the lcid for an ANSI application.
	Typically, cp = GetACP().
------------------------------------------------------------------- ZIYIW --*/</comment>
<macro><name pos:line="1173" pos:column="1">MSOAPI_</name><argument_list pos:line="1173" pos:column="8">(<argument pos:line="1173" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="1173" pos:column="15">MsoFAnsiCodePageSupportsLCID</name><argument_list pos:line="1173" pos:column="43">(<argument pos:line="1173" pos:column="44">UINT cp</argument>, <argument pos:line="1173" pos:column="53">LCID lcid</argument>)</argument_list></macro><empty_stmt pos:line="1173" pos:column="63">;</empty_stmt>


<comment type="block" pos:line="1176" pos:column="1">/*----------------------------------------------------------------------------
	MsoFValidLocale

	Test whether this lcid is valid on this machine.
------------------------------------------------------------------- JJames --*/</comment>
<macro><name pos:line="1181" pos:column="1">MSOAPI_</name><argument_list pos:line="1181" pos:column="8">(<argument pos:line="1181" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="1181" pos:column="15">MsoFValidLocale</name><argument_list pos:line="1181" pos:column="30">(<argument pos:line="1181" pos:column="31">LCID lcid</argument>)</argument_list></macro><empty_stmt pos:line="1181" pos:column="41">;</empty_stmt>

<cpp:define pos:line="1183" pos:column="1">#<cpp:directive pos:line="1183" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1183" pos:column="9">ILS_NOTCHANGED</name></cpp:macro>				<cpp:value pos:line="1183" pos:column="49">0</cpp:value></cpp:define>
<cpp:define pos:line="1184" pos:column="1">#<cpp:directive pos:line="1184" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1184" pos:column="9">ILS_CHANGED_NOT_PROCESSED</name></cpp:macro>	<cpp:value pos:line="1184" pos:column="41">1</cpp:value></cpp:define>
<cpp:define pos:line="1185" pos:column="1">#<cpp:directive pos:line="1185" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1185" pos:column="9">ILS_CHANGED_PROCESSED</name></cpp:macro>		<cpp:value pos:line="1185" pos:column="41">2</cpp:value></cpp:define>
<cpp:define pos:line="1186" pos:column="1">#<cpp:directive pos:line="1186" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1186" pos:column="9">ILS_CHANGED_PROCESSING</name></cpp:macro>		<cpp:value pos:line="1186" pos:column="41">3</cpp:value></cpp:define>

<cpp:define pos:line="1188" pos:column="1">#<cpp:directive pos:line="1188" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1188" pos:column="9">APPID_WORD</name></cpp:macro>					<cpp:value pos:line="1188" pos:column="57">0</cpp:value></cpp:define>
<cpp:define pos:line="1189" pos:column="1">#<cpp:directive pos:line="1189" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1189" pos:column="9">APPID_XL</name></cpp:macro>					<cpp:value pos:line="1189" pos:column="57">1</cpp:value></cpp:define>
<cpp:define pos:line="1190" pos:column="1">#<cpp:directive pos:line="1190" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1190" pos:column="9">APPID_PPT</name></cpp:macro>					<cpp:value pos:line="1190" pos:column="57">2</cpp:value></cpp:define>
<cpp:define pos:line="1191" pos:column="1">#<cpp:directive pos:line="1191" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1191" pos:column="9">APPID_ACCESS</name></cpp:macro>				<cpp:value pos:line="1191" pos:column="49">3</cpp:value></cpp:define>
<cpp:define pos:line="1192" pos:column="1">#<cpp:directive pos:line="1192" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1192" pos:column="9">APPID_OUTLOOK</name></cpp:macro>				<cpp:value pos:line="1192" pos:column="49">4</cpp:value></cpp:define>
<cpp:define pos:line="1193" pos:column="1">#<cpp:directive pos:line="1193" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1193" pos:column="9">APPID_FRONTPAGE</name></cpp:macro>				<cpp:value pos:line="1193" pos:column="49">5</cpp:value></cpp:define>
<cpp:define pos:line="1194" pos:column="1">#<cpp:directive pos:line="1194" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1194" pos:column="9">APPID_PUBLISHER</name></cpp:macro>				<cpp:value pos:line="1194" pos:column="49">6</cpp:value></cpp:define>
<cpp:define pos:line="1195" pos:column="1">#<cpp:directive pos:line="1195" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1195" pos:column="9">APPID_PROJECT</name></cpp:macro>				<cpp:value pos:line="1195" pos:column="49">7</cpp:value></cpp:define>
<cpp:define pos:line="1196" pos:column="1">#<cpp:directive pos:line="1196" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1196" pos:column="9">APPID_DESIGNER</name></cpp:macro>				<cpp:value pos:line="1196" pos:column="49">8</cpp:value></cpp:define>
<comment type="block" pos:line="1197" pos:column="1">/*----------------------------------------------------------------------------
	MsoAppSetChangeInstallLanguageState
	MsoAppGetChangeInstallLanguageState

	Get/Set Application based install language change state.
------------------------------------------------------------------- ZIYIW --*/</comment>
<macro><name pos:line="1203" pos:column="1">MSOAPI_</name><argument_list pos:line="1203" pos:column="8">(<argument pos:line="1203" pos:column="9">int</argument>)</argument_list></macro> <macro><name pos:line="1203" pos:column="14">MsoAppSetChangeInstallLanguageState</name><argument_list pos:line="1203" pos:column="49">(<argument pos:line="1203" pos:column="50">int idApp</argument>, <argument pos:line="1203" pos:column="61">int ils</argument>)</argument_list></macro><empty_stmt pos:line="1203" pos:column="69">;</empty_stmt>
<macro><name pos:line="1204" pos:column="1">MSOAPI_</name><argument_list pos:line="1204" pos:column="8">(<argument pos:line="1204" pos:column="9">int</argument>)</argument_list></macro> <macro><name pos:line="1204" pos:column="14">MsoAppGetChangeInstallLanguageState</name><argument_list pos:line="1204" pos:column="49">(<argument pos:line="1204" pos:column="50">int idApp</argument>)</argument_list></macro><empty_stmt pos:line="1204" pos:column="60">;</empty_stmt>

<comment type="block" pos:line="1206" pos:column="1">/*----------------------------------------------------------------------------
	MsoGetInstallLcid

	return the cached office install lcid
------------------------------------------------------------------- ZIYIW --*/</comment>
<macro><name pos:line="1211" pos:column="1">MSOAPI_</name><argument_list pos:line="1211" pos:column="8">(<argument pos:line="1211" pos:column="9">LCID</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="1211" pos:column="15">MsoGetInstallLcid</name><argument_list pos:line="1211" pos:column="32">(<argument><expr><name pos:line="1211" pos:column="33">void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:line="1213" pos:column="1">/*----------------------------------------------------------------------------
	MsoGetInstallLcid

	return the cached office install lcid
------------------------------------------------------------------- ZIYIW --*/</comment>
<macro><name pos:line="1218" pos:column="1">MSOAPI_</name><argument_list pos:line="1218" pos:column="8">(<argument pos:line="1218" pos:column="9">LCID</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="1218" pos:column="15">MsoGetInstallLcid2000Compatible</name><argument_list pos:line="1218" pos:column="46">(<argument><expr><name pos:line="1218" pos:column="47">void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:line="1220" pos:column="1">/*-----------------------------------------------------------------------------
	MsoGetInstallFlavor

	return the cached office install flavor lcid
--------------------------------------------------------------------- ZIYIW -*/</comment>
<macro><name pos:line="1225" pos:column="1">MSOAPI_</name><argument_list pos:line="1225" pos:column="8">(<argument pos:line="1225" pos:column="9">LCID</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="1225" pos:column="15">MsoGetInstallFlavor</name><argument_list pos:line="1225" pos:column="34">(<argument><expr><name pos:line="1225" pos:column="35">void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:line="1227" pos:column="1">/*-----------------------------------------------------------------------------
	MsoFLangChanged

	return a flag whether or not the UI lang has been changed since last time
--------------------------------------------------------------------- ZIYIW -*/</comment>
<macro><name pos:line="1232" pos:column="1">MSOAPIX_</name><argument_list pos:line="1232" pos:column="9">(<argument pos:line="1232" pos:column="10">int</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="1232" pos:column="15">MsoFLangChanged</name><argument_list pos:line="1232" pos:column="30">(<argument><expr><name pos:line="1232" pos:column="31">LCID</name> <op:operator pos:line="1232" pos:column="36">*</op:operator><name pos:line="1232" pos:column="37">plcid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:line="1234" pos:column="1">/*-----------------------------------------------------------------------------
	MsoGetPreviousUILcid 
	
	return the cached previous ui lcid
--------------------------------------------------------------------- ZIYIW -*/</comment>
<macro><name pos:line="1239" pos:column="1">MSOAPIX_</name><argument_list pos:line="1239" pos:column="9">(<argument pos:line="1239" pos:column="10">LCID</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="1239" pos:column="16">MsoGetPreviousUILcid</name><argument_list pos:line="1239" pos:column="36">(<argument><expr><name pos:line="1239" pos:column="37">void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:line="1241" pos:column="1">/*-----------------------------------------------------------------------------
	MsoGetPreviousInstallFlavor 
	
	return the cached previous install flavor
--------------------------------------------------------------------- ZIYIW -*/</comment>
<macro><name pos:line="1246" pos:column="1">MSOAPI_</name><argument_list pos:line="1246" pos:column="8">(<argument pos:line="1246" pos:column="9">LCID</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="1246" pos:column="15">MsoGetPreviousInstallFlavor</name><argument_list pos:line="1246" pos:column="42">(<argument><expr><name pos:line="1246" pos:column="43">void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:line="1248" pos:column="1">/*----------------------------------------------------------------------------
	MsoGetUILcid

	return the cached office UI lcid
------------------------------------------------------------------- ZIYIW --*/</comment>
<macro><name pos:line="1253" pos:column="1">MSOAPI_</name><argument_list pos:line="1253" pos:column="8">(<argument pos:line="1253" pos:column="9">LCID</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="1253" pos:column="15">MsoGetUILcid</name><argument_list pos:line="1253" pos:column="27">(<argument><expr><name pos:line="1253" pos:column="28">void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:line="1255" pos:column="1">/*----------------------------------------------------------------------------
	MsoGetHelpLcid

	return the cached office Help lcid
------------------------------------------------------------------- ZIYIW --*/</comment>
<macro><name pos:line="1260" pos:column="1">MSOAPI_</name><argument_list pos:line="1260" pos:column="8">(<argument pos:line="1260" pos:column="9">LCID</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="1260" pos:column="15">MsoGetHelpLcid</name><argument_list pos:line="1260" pos:column="29">(<argument><expr><name pos:line="1260" pos:column="30">void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:line="1262" pos:column="1">/*-----------------------------------------------------------------------------
	MsoGetExeModeLcid
	
	return the cached ExeMode lcid
-------------------------------------------------------------------- IrfanGo -*/</comment>
<macro><name pos:line="1267" pos:column="1">MSOAPI_</name><argument_list pos:line="1267" pos:column="8">(<argument pos:line="1267" pos:column="9">LCID</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="1267" pos:column="15">MsoGetExeModeLcid</name><argument_list pos:line="1267" pos:column="32">(<argument><expr><name pos:line="1267" pos:column="33">void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:line="1269" pos:column="1">/*----------------------------------------------------------------------------
	MsoGetSKULcid

	return the cached office installed SKU lcid
------------------------------------------------------------------- ZIYIW --*/</comment>
<macro><name pos:line="1274" pos:column="1">MSOAPI_</name><argument_list pos:line="1274" pos:column="8">(<argument pos:line="1274" pos:column="9">LCID</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="1274" pos:column="15">MsoGetSKULcid</name><argument_list pos:line="1274" pos:column="28">(<argument><expr><name pos:line="1274" pos:column="29">void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:line="1276" pos:column="1">/*-----------------------------------------------------------------------------
	MsoGetWebLocale -  return the cached weblocale lcid
-------------------------------------------------------------------- ZIYIW -*/</comment>
<macro><name pos:line="1279" pos:column="1">MSOAPI_</name><argument_list pos:line="1279" pos:column="8">(<argument pos:line="1279" pos:column="9">LCID</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="1279" pos:column="15">MsoGetWebLocale</name><argument_list pos:line="1279" pos:column="30">(<argument><expr><name pos:line="1279" pos:column="31">void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:line="1281" pos:column="1">/*----------------------------------------------------------------------------
	MsoEnumEditLcid

	enumerate throught the cached office edit lcids
------------------------------------------------------------------- ZIYIW --*/</comment>
<macro><name pos:line="1286" pos:column="1">MSOAPI_</name><argument_list pos:line="1286" pos:column="8">(<argument pos:line="1286" pos:column="9">BOOL</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="1286" pos:column="15">MsoEnumEditLcid</name><argument_list pos:line="1286" pos:column="30">(<argument><expr><name pos:line="1286" pos:column="31">LCID</name><op:operator pos:line="1286" pos:column="35">*</op:operator></expr></argument>, <argument><expr><name pos:line="1286" pos:column="38">int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:line="1288" pos:column="1">/*----------------------------------------------------------------------------
	MsoFAddRemoveEditLcidFromReg

	Turn On/Off a edit langauge in reg
	You generally want to avoid the Ex version
------------------------------------------------------------------- ZIYIW --*/</comment>
<macro><name pos:line="1294" pos:column="1">MSOAPI_</name><argument_list pos:line="1294" pos:column="8">(<argument pos:line="1294" pos:column="9">int</argument>)</argument_list></macro> <macro><name pos:line="1294" pos:column="14">MsoFAddRemoveEditLcidFromReg</name><argument_list pos:line="1294" pos:column="42">(<argument pos:line="1294" pos:column="43">LCID lcid</argument>, <argument pos:line="1294" pos:column="54">int fAdd</argument>, <argument pos:line="1294" pos:column="64">int fExplicit</argument>)</argument_list></macro><empty_stmt pos:line="1294" pos:column="78">;</empty_stmt>
<macro><name pos:line="1295" pos:column="1">MSOAPI_</name><argument_list pos:line="1295" pos:column="8">(<argument pos:line="1295" pos:column="9">int</argument>)</argument_list></macro> <macro><name pos:line="1295" pos:column="14">MsoFAddRemoveEditLcidFromRegEx</name><argument_list pos:line="1295" pos:column="44">(<argument pos:line="1295" pos:column="45">LCID lcid</argument>, <argument pos:line="1295" pos:column="56">int fAdd</argument>, <argument pos:line="1295" pos:column="66">int fExplicit</argument>, <argument pos:line="1295" pos:column="81">int fOverride</argument>)</argument_list></macro><empty_stmt pos:line="1295" pos:column="95">;</empty_stmt>

<comment type="line" pos:line="1297" pos:column="1">// Return a best-guess LCID for the current keyboard and the optional character</comment>
<macro><name pos:line="1298" pos:column="1">MSOAPI_</name><argument_list pos:line="1298" pos:column="8">(<argument pos:line="1298" pos:column="9">LCID</argument>)</argument_list></macro> <macro><name pos:line="1298" pos:column="15">MsoLcidKeyboard</name><argument_list pos:line="1298" pos:column="30">(
	<argument pos:line="1299" pos:column="9">HMSOINST			hinst</argument>,
	<argument pos:line="1300" pos:column="9">LCID				lcidFEDefault</argument>,
	<argument pos:line="1301" pos:column="9">WCHAR               *pwch</argument>,                           <comment type="line" pos:line="1301" pos:column="62">// Optional, or NULL</comment>
	<argument pos:line="1302" pos:column="9">int                  cch</argument>
	)</argument_list></macro><empty_stmt pos:line="1303" pos:column="10">;</empty_stmt>

<comment type="block" pos:line="1305" pos:column="1">/*----------------------------------------------------------------------------
	MsoLcidGetLanguages

	read various language settings from the registry throught ORAPI
----------------------------------------------------------- ZIYIW/irfango --*/</comment>
<function_decl><type><name pos:line="1310" pos:column="1">BOOL</name></type> <name pos:line="1310" pos:column="6">MsoLcidGetLanguages</name><parameter_list pos:line="1310" pos:column="25">(<param><decl><type><name pos:line="1310" pos:column="26">LCID</name><type:modifier pos:line="1310" pos:column="30">*</type:modifier></type></decl></param>, <param><decl><type><name pos:line="1310" pos:column="33">LCID</name><type:modifier pos:line="1310" pos:column="37">*</type:modifier></type></decl></param>, <param><decl><type><name pos:line="1310" pos:column="40">LCID</name><type:modifier pos:line="1310" pos:column="44">*</type:modifier></type></decl></param>, <param><decl><type><name pos:line="1310" pos:column="47">MSOELI</name><type:modifier pos:line="1310" pos:column="53">*</type:modifier></type></decl></param>, <param><decl><type><name pos:line="1310" pos:column="56">int</name><type:modifier pos:line="1310" pos:column="59">*</type:modifier></type></decl></param>, <param><decl><type><name pos:line="1310" pos:column="62">MSOELI</name><type:modifier pos:line="1310" pos:column="68">*</type:modifier></type></decl></param>, <param><decl><type><name pos:line="1310" pos:column="71">int</name><type:modifier pos:line="1310" pos:column="74">*</type:modifier></type></decl></param>, <param><decl><type><name pos:line="1310" pos:column="77">LCID</name><type:modifier pos:line="1310" pos:column="81">*</type:modifier></type></decl></param>)</parameter_list>;</function_decl>

<comment type="block" pos:line="1312" pos:column="1">/*-----------------------------------------------------------------------------
	MsoPropagateInstallFlavor

	Setup InstallFlavor reg setting for ENG/FRN/GER SKU
--------------------------------------------------------------------- ZIYIW -*/</comment>
<function_decl><type><name pos:line="1317" pos:column="1">void</name></type> <name pos:line="1317" pos:column="6">MsoPropagateInstallFlavor</name><parameter_list pos:line="1317" pos:column="31">(<param><decl><type><name pos:line="1317" pos:column="32">LCID</name></type> <name pos:line="1317" pos:column="37">lcidInstall</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block" pos:line="1319" pos:column="1">/*-----------------------------------------------------------------------------
	MsoHrCreateLanguageSettingsObject

	creates a new instance of the LanguageSettings OLE object
--------------------------------------------------------------------- ZIYIW -*/</comment>
<macro><name pos:line="1324" pos:column="1">MSOAPI_</name><argument_list pos:line="1324" pos:column="8">(<argument pos:line="1324" pos:column="9">int</argument>)</argument_list></macro> <macro><name pos:line="1324" pos:column="14">MsoHrCreateLanguageSettingsObject</name><argument_list pos:line="1324" pos:column="47">(<argument pos:line="1324" pos:column="48">HMSOINST hmsoinst</argument>, <argument pos:line="1324" pos:column="67">void **pplss</argument>)</argument_list></macro><empty_stmt pos:line="1324" pos:column="80">;</empty_stmt>

<comment type="block" pos:line="1326" pos:column="1">/*-----------------------------------------------------------------------------
	MsoDialogFontNameLid

	get the Localized/EUC dialog font name based on UI lid passed in. 
--------------------------------------------------------------------- ZIYIW -*/</comment>
<macro><name pos:line="1331" pos:column="1">MSOAPI_</name><argument_list pos:line="1331" pos:column="8">(<argument pos:line="1331" pos:column="9">void</argument>)</argument_list></macro> <macro><name pos:line="1331" pos:column="15">MsoDialogFontNameLid</name><argument_list pos:line="1331" pos:column="35">(<argument pos:line="1331" pos:column="36">WCHAR *wzName</argument>, <argument pos:line="1331" pos:column="51">LCID lid</argument>)</argument_list></macro><empty_stmt pos:line="1331" pos:column="60">;</empty_stmt>

<comment type="block" pos:line="1333" pos:column="1">/*-----------------------------------------------------------------------------
	MsoDialogFontJpnAlt

	get the Localied/EUC alternate dialog font name for JPN.
------------------------------------------------------------------- NobuyaH -*/</comment>
<macro><name pos:line="1338" pos:column="1">MSOAPI_</name><argument_list pos:line="1338" pos:column="8">(<argument pos:line="1338" pos:column="9">void</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="1338" pos:column="15">MsoDialogFontJpnAlt</name><argument_list pos:line="1338" pos:column="34">(<argument><expr><name pos:line="1338" pos:column="35">WCHAR</name> <op:operator pos:line="1338" pos:column="41">*</op:operator><name pos:line="1338" pos:column="42">wzName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<comment type="block" pos:line="1341" pos:column="1">/*-----------------------------------------------------------------------------
	MsoSetPureReg/MsoGetPureReg

	Operations on the Pure language resource registry
--------------------------------------------------------------------- ZIYIW -*/</comment>
<cpp:define pos:line="1346" pos:column="1">#<cpp:directive pos:line="1346" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1346" pos:column="9">REG_PURE_UNKNOWN</name></cpp:macro>		<cpp:value pos:line="1346" pos:column="41">0</cpp:value></cpp:define>
<cpp:define pos:line="1347" pos:column="1">#<cpp:directive pos:line="1347" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1347" pos:column="9">REG_PURE_OFF</name></cpp:macro>			<cpp:value pos:line="1347" pos:column="41">1</cpp:value></cpp:define>
<cpp:define pos:line="1348" pos:column="1">#<cpp:directive pos:line="1348" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1348" pos:column="9">REG_PURE_COMPLETED</name></cpp:macro>		<cpp:value pos:line="1348" pos:column="41">2</cpp:value></cpp:define>
<cpp:define pos:line="1349" pos:column="1">#<cpp:directive pos:line="1349" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1349" pos:column="9">REG_PURE_PROHIBITED</name></cpp:macro>		<cpp:value pos:line="1349" pos:column="41">3</cpp:value></cpp:define>
<cpp:define pos:line="1350" pos:column="1">#<cpp:directive pos:line="1350" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1350" pos:column="9">REG_PURE_ON</name></cpp:macro>             <cpp:value pos:line="1350" pos:column="33">REG_PURE_PROHIBITED</cpp:value></cpp:define>

<macro><name pos:line="1352" pos:column="1">MSOAPIX_</name><argument_list pos:line="1352" pos:column="9">(<argument pos:line="1352" pos:column="10">int</argument>)</argument_list></macro> <macro><name pos:line="1352" pos:column="15">MsoSetPureReg</name><argument_list pos:line="1352" pos:column="28">(<argument pos:line="1352" pos:column="29">int iState</argument>)</argument_list></macro><empty_stmt pos:line="1352" pos:column="40">;</empty_stmt>
<macro><name pos:line="1353" pos:column="1">MSOAPI_</name><argument_list pos:line="1353" pos:column="8">(<argument pos:line="1353" pos:column="9">int</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="1353" pos:column="14">MsoGetPureReg</name><argument_list pos:line="1353" pos:column="27">(<argument><expr><name pos:line="1353" pos:column="28">void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen" pos:line="1355" pos:column="1">/****************************************************************************
 Migration
****************************************************************************/</comment>

<enum pos:line="1359" pos:column="1">enum
<block pos:line="1360" pos:column="1">{
	<decl><name pos:line="1361" pos:column="9">msoFirstApp</name>  <init pos:line="1361" pos:column="22">= <expr><lit:literal type="number" pos:line="1361" pos:column="24">0</lit:literal></expr></init></decl><op:operator pos:line="1361" pos:column="25">,</op:operator>
	<decl><name pos:line="1362" pos:column="9">msoWord</name>      <init pos:line="1362" pos:column="22">= <expr><lit:literal type="number" pos:line="1362" pos:column="24">0</lit:literal></expr></init></decl><op:operator pos:line="1362" pos:column="25">,</op:operator>
	<decl><name pos:line="1363" pos:column="9">msoExcel</name>     <init pos:line="1363" pos:column="22">= <expr><lit:literal type="number" pos:line="1363" pos:column="24">1</lit:literal></expr></init></decl><op:operator pos:line="1363" pos:column="25">,</op:operator>
	<decl><name pos:line="1364" pos:column="9">msoAccess</name>    <init pos:line="1364" pos:column="22">= <expr><lit:literal type="number" pos:line="1364" pos:column="24">2</lit:literal></expr></init></decl><op:operator pos:line="1364" pos:column="25">,</op:operator>
	<decl><name pos:line="1365" pos:column="9">msoPPT</name>       <init pos:line="1365" pos:column="22">= <expr><lit:literal type="number" pos:line="1365" pos:column="24">3</lit:literal></expr></init></decl><op:operator pos:line="1365" pos:column="25">,</op:operator>
	<decl><name pos:line="1366" pos:column="9">msoOffice</name>    <init pos:line="1366" pos:column="22">= <expr><lit:literal type="number" pos:line="1366" pos:column="24">4</lit:literal></expr></init></decl><op:operator pos:line="1366" pos:column="25">,</op:operator>
	<decl><name pos:line="1367" pos:column="9">msoGraph</name>     <init pos:line="1367" pos:column="22">= <expr><lit:literal type="number" pos:line="1367" pos:column="24">5</lit:literal></expr></init></decl><op:operator pos:line="1367" pos:column="25">,</op:operator>
	<decl><name pos:line="1368" pos:column="9">msoOutlook</name>   <init pos:line="1368" pos:column="22">= <expr><lit:literal type="number" pos:line="1368" pos:column="24">6</lit:literal></expr></init></decl><op:operator pos:line="1368" pos:column="25">,</op:operator>
	<decl><name pos:line="1369" pos:column="9">msoFrontPage</name> <init pos:line="1369" pos:column="22">= <expr><lit:literal type="number" pos:line="1369" pos:column="24">7</lit:literal></expr></init></decl><op:operator pos:line="1369" pos:column="25">,</op:operator>
	<decl><name pos:line="1370" pos:column="9">msoPublisher</name> <init pos:line="1370" pos:column="22">= <expr><lit:literal type="number" pos:line="1370" pos:column="24">8</lit:literal></expr></init></decl><op:operator pos:line="1370" pos:column="25">,</op:operator>
	<decl><name pos:line="1371" pos:column="9">msoProject</name>   <init pos:line="1371" pos:column="22">= <expr><lit:literal type="number" pos:line="1371" pos:column="24">9</lit:literal></expr></init></decl><op:operator pos:line="1371" pos:column="25">,</op:operator>
	<decl><name pos:line="1372" pos:column="9">msoVisio</name>     <init pos:line="1372" pos:column="22">= <expr><lit:literal type="number" pos:line="1372" pos:column="24">10</lit:literal></expr></init></decl><op:operator pos:line="1372" pos:column="26">,</op:operator>
	<decl><name pos:line="1373" pos:column="9">msoDesigner</name>  <init pos:line="1373" pos:column="22">= <expr><lit:literal type="number" pos:line="1373" pos:column="24">11</lit:literal></expr></init></decl><op:operator pos:line="1373" pos:column="26">,</op:operator>
	<decl><name pos:line="1374" pos:column="9">msoOSA</name>		 <init pos:line="1374" pos:column="26">= <expr><lit:literal type="number" pos:line="1374" pos:column="28">12</lit:literal></expr></init></decl><op:operator pos:line="1374" pos:column="30">,</op:operator>
	<decl><name pos:line="1375" pos:column="9">msoLastApp</name>   <init pos:line="1375" pos:column="22">= <expr><name pos:line="1375" pos:column="24">msoOSA</name></expr></init></decl>
}</block>;</enum>

<cpp:define pos:line="1378" pos:column="1">#<cpp:directive pos:line="1378" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1378" pos:column="9">msoNoCmwPopulate</name></cpp:macro> <cpp:value pos:line="1378" pos:column="26">0x80000000</cpp:value></cpp:define>

<enum pos:line="1380" pos:column="1">enum
<block pos:line="1381" pos:column="1">{
	<decl><name pos:line="1382" pos:column="9">msoOfficeCurrentVersion</name> <init pos:line="1382" pos:column="33">= <expr><lit:literal type="number" pos:line="1382" pos:column="35">0</lit:literal></expr></init></decl><op:operator pos:line="1382" pos:column="36">,</op:operator>
	<decl><name pos:line="1383" pos:column="9">msoOffice10Version</name>      <init pos:line="1383" pos:column="33">= <expr><lit:literal type="number" pos:line="1383" pos:column="35">0</lit:literal></expr></init></decl><op:operator pos:line="1383" pos:column="36">,</op:operator>
	<decl><name pos:line="1384" pos:column="9">msoOffice9Version</name>       <init pos:line="1384" pos:column="33">= <expr><lit:literal type="number" pos:line="1384" pos:column="35">1</lit:literal></expr></init></decl><op:operator pos:line="1384" pos:column="36">,</op:operator>
	<decl><name pos:line="1385" pos:column="9">msoOffice97Version</name>      <init pos:line="1385" pos:column="33">= <expr><lit:literal type="number" pos:line="1385" pos:column="35">2</lit:literal></expr></init></decl>
}</block>;</enum>

<enum pos:line="1388" pos:column="1">enum
<block pos:line="1389" pos:column="1">{
	<decl><name pos:line="1390" pos:column="9">msoNoMigration</name>		<init pos:line="1390" pos:column="33">= <expr><lit:literal type="number" pos:line="1390" pos:column="35">0</lit:literal></expr></init></decl><op:operator pos:line="1390" pos:column="36">,</op:operator>
	<decl><name pos:line="1391" pos:column="9">msoOfficeVersion6</name>	<init pos:line="1391" pos:column="33">= <expr><lit:literal type="number" pos:line="1391" pos:column="35">6</lit:literal></expr></init></decl><op:operator pos:line="1391" pos:column="36">,</op:operator>
	<decl><name pos:line="1392" pos:column="9">msoOfficeVersion7</name>	<init pos:line="1392" pos:column="33">= <expr><lit:literal type="number" pos:line="1392" pos:column="35">7</lit:literal></expr></init></decl><op:operator pos:line="1392" pos:column="36">,</op:operator>
	<decl><name pos:line="1393" pos:column="9">msoOfficeVersion8</name>	<init pos:line="1393" pos:column="33">= <expr><lit:literal type="number" pos:line="1393" pos:column="35">8</lit:literal></expr></init></decl><op:operator pos:line="1393" pos:column="36">,</op:operator>
	<decl><name pos:line="1394" pos:column="9">msoOfficeVersion9</name>	<init pos:line="1394" pos:column="33">= <expr><lit:literal type="number" pos:line="1394" pos:column="35">9</lit:literal></expr></init></decl>
}</block>;</enum>

<macro><name pos:line="1397" pos:column="1">MSOAPI_</name><argument_list pos:line="1397" pos:column="8">(<argument pos:line="1397" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="1397" pos:column="15">MsoMigrate</name><argument_list pos:line="1397" pos:column="25">(<argument pos:line="1397" pos:column="26">int iApp</argument>, <argument pos:line="1397" pos:column="36">DWORD *pdwMigrationVersion</argument>)</argument_list></macro><empty_stmt pos:line="1397" pos:column="63">;</empty_stmt>


<comment type="block" pos:line="1400" pos:column="1">/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	The New New New  O R A P I   A P I s
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */</comment>

<cpp:include pos:line="1404" pos:column="1">#<cpp:directive pos:line="1404" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="1404" pos:column="10">"msoreg.h"</lit:literal></cpp:file></cpp:include>


<comment type="block" pos:line="1407" pos:column="1">/*-----------------------------------------------------------------------------
	ORAPI Cache data
--------------------------------------------------------------------dgray----*/</comment>
<typedef pos:line="1410" pos:column="1">typedef <type><struct pos:line="1410" pos:column="9">struct <name pos:line="1410" pos:column="16">KEYNODE_S</name> <block pos:line="1410" pos:column="26">{<public type="default" pos:line="1410" pos:column="27">
	<decl_stmt><decl><type><name pos:line="1411" pos:column="9">HKEY</name></type>	<name pos:line="1411" pos:column="17">hKey</name></decl>;</decl_stmt>                   <comment type="line" pos:line="1411" pos:column="41">// handle to the key</comment>
	<decl_stmt><decl><type><name pos:line="1412" pos:column="9">int</name></type>		<name pos:line="1412" pos:column="25">keyID</name></decl>;</decl_stmt>                  <comment type="line" pos:line="1412" pos:column="49">// enum ID number for this key</comment>
	<union pos:line="1413" pos:column="9">union
		<block pos:line="1414" pos:column="17">{<public type="default" pos:line="1414" pos:column="18">
		<decl_stmt><decl><type><name pos:line="1415" pos:column="17">int</name></type>		<name pos:line="1415" pos:column="33">Options</name></decl>;</decl_stmt>            <comment type="line" pos:line="1415" pos:column="53">// ORAPICacheOptionFlags</comment>
		<struct pos:line="1416" pos:column="17">struct
			<block pos:line="1417" pos:column="25">{<public type="default" pos:line="1417" pos:column="26">
			<macro><name pos:line="1418" pos:column="25">BOOL</name></macro> <label><name pos:line="1418" pos:column="30">fPersist</name>  :</label> <expr_stmt><expr><lit:literal type="number" pos:line="1418" pos:column="42">1</lit:literal></expr>;</expr_stmt>
			<macro><name pos:line="1419" pos:column="25">BOOL</name></macro> <label><name pos:line="1419" pos:column="30">fRWAccess</name> :</label> <expr_stmt><expr><lit:literal type="number" pos:line="1419" pos:column="42">1</lit:literal></expr>;</expr_stmt>
			<macro><name pos:line="1420" pos:column="25">BOOL</name></macro> <label><name pos:line="1420" pos:column="30">fIsPolicy</name> :</label> <expr_stmt><expr><lit:literal type="number" pos:line="1420" pos:column="42">1</lit:literal></expr>;</expr_stmt>
			<macro><name pos:line="1421" pos:column="25">BOOL</name></macro> <label><name pos:line="1421" pos:column="30">fIsApp</name>    :</label> <expr_stmt><expr><lit:literal type="number" pos:line="1421" pos:column="42">1</lit:literal></expr>;</expr_stmt>
			<macro><name pos:line="1422" pos:column="25">BOOL</name></macro> <label><name pos:line="1422" pos:column="30">fIsValid</name>  :</label> <expr_stmt><expr><lit:literal type="number" pos:line="1422" pos:column="42">1</lit:literal></expr>;</expr_stmt>
			<comment type="line" pos:line="1423" pos:column="25">// if the ref count is changed, make sure </comment>
			<comment type="line" pos:line="1424" pos:column="25">// ORAPI_MAX_REF_COUNT in tcorapi.cpp matches</comment>
			<macro><name pos:line="1425" pos:column="25">int</name></macro> <label><name pos:line="1425" pos:column="29">nRefCount</name>  :</label> <expr_stmt><expr><lit:literal type="number" pos:line="1425" pos:column="42">3</lit:literal></expr>;</expr_stmt>
			<comment type="line" pos:line="1426" pos:column="25">// TODO DGray : Pad this to 32 bits</comment>
			<comment type="line" pos:line="1427" pos:column="25">// int pad        : 24;</comment>
			</public>}</block>;</struct>
		</public>}</block>;</union>
<cpp:ifdef pos:line="1430" pos:column="1">#<cpp:directive pos:line="1430" pos:column="2">ifdef</cpp:directive> <name pos:line="1430" pos:column="8">VSMSODEBUG</name></cpp:ifdef>
	<decl_stmt><decl><type><name pos:line="1431" pos:column="9">CHAR</name></type>	<name><name pos:line="1431" pos:column="17">szKeyName</name><index pos:line="1431" pos:column="26">[<expr><name pos:line="1431" pos:column="27">MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>  <comment type="line" pos:line="1431" pos:column="39">// Name of the key</comment>
	<decl_stmt><decl><type><name pos:line="1432" pos:column="9">int</name></type>		<name pos:line="1432" pos:column="25">nTimesUsed</name></decl>;</decl_stmt>           <comment type="line" pos:line="1432" pos:column="47">// Number of times this key has been hit</comment>
<cpp:endif pos:line="1433" pos:column="1">#<cpp:directive pos:line="1433" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="1433" pos:column="8">// VSMSODEBUG</comment>
	<decl_stmt><decl><type pos:line="1434" pos:column="9">struct <name pos:line="1434" pos:column="16">KEYNODE_S</name><type:modifier pos:line="1434" pos:column="25">*</type:modifier></type> <name pos:line="1434" pos:column="27">pNext</name></decl>;</decl_stmt>      <comment type="line" pos:line="1434" pos:column="39">// The next keyID in the cache</comment>
	<decl_stmt><decl><type pos:line="1435" pos:column="9">struct <name pos:line="1435" pos:column="16">KEYNODE_S</name><type:modifier pos:line="1435" pos:column="25">*</type:modifier></type> <name pos:line="1435" pos:column="27">pPrev</name></decl>;</decl_stmt>      <comment type="line" pos:line="1435" pos:column="39">// The next keyID in the cache</comment>
</public>}</block></struct></type> <name pos:line="1436" pos:column="3">KEYNODE</name>;</typedef>


<comment type="block" pos:line="1439" pos:column="1">/*

 PERSIST    - When set, Do not remove this key from the cache
 RW_ACCESS  - When set, key opened with READ/WRITE access, otherwise just read
 IS_POLICY  - Set, this key exists in the policy tree, otherwise user tree
 IS_APP_KEY - Set, this key is from the APP, otherwise from MSO
 KEY_VALID  - The hkey attached to this node is valid

*/</comment>
<enum pos:line="1448" pos:column="1">enum <name pos:line="1448" pos:column="6">ORAPICacheOptionFlags</name>
<block pos:line="1449" pos:column="1">{
	<decl><name pos:line="1450" pos:column="9">PERSIST</name>			<init pos:line="1450" pos:column="33">= <expr><lit:literal type="number" pos:line="1450" pos:column="35">0x01</lit:literal></expr></init></decl><op:operator pos:line="1450" pos:column="39">,</op:operator>
	<decl><name pos:line="1451" pos:column="9">RW_ACCESS</name>		<init pos:line="1451" pos:column="33">= <expr><lit:literal type="number" pos:line="1451" pos:column="35">0x02</lit:literal></expr></init></decl><op:operator pos:line="1451" pos:column="39">,</op:operator>
	<decl><name pos:line="1452" pos:column="9">IS_POLICY</name>		<init pos:line="1452" pos:column="33">= <expr><lit:literal type="number" pos:line="1452" pos:column="35">0x04</lit:literal></expr></init></decl><op:operator pos:line="1452" pos:column="39">,</op:operator>
	<decl><name pos:line="1453" pos:column="9">IS_APP_KEY</name>		<init pos:line="1453" pos:column="33">= <expr><lit:literal type="number" pos:line="1453" pos:column="35">0x08</lit:literal></expr></init></decl><op:operator pos:line="1453" pos:column="39">,</op:operator>
	<decl><name pos:line="1454" pos:column="9">KEY_VALID</name>		<init pos:line="1454" pos:column="33">= <expr><lit:literal type="number" pos:line="1454" pos:column="35">0x10</lit:literal></expr></init></decl><op:operator pos:line="1454" pos:column="39">,</op:operator>

	<decl><name pos:line="1456" pos:column="9">MASK_PERSIST</name>	<init pos:line="1456" pos:column="25">= <expr><lit:literal type="number" pos:line="1456" pos:column="27">0xFFFFFFFE</lit:literal></expr></init></decl><op:operator pos:line="1456" pos:column="37">,</op:operator>
	<decl><name pos:line="1457" pos:column="9">MASK_RW</name>			<init pos:line="1457" pos:column="33">= <expr><lit:literal type="number" pos:line="1457" pos:column="35">0xFFFFFFFD</lit:literal></expr></init></decl><op:operator pos:line="1457" pos:column="45">,</op:operator>
	<decl><name pos:line="1458" pos:column="9">MASK_POLICY</name>		<init pos:line="1458" pos:column="33">= <expr><lit:literal type="number" pos:line="1458" pos:column="35">0xFFFFFFFB</lit:literal></expr></init></decl><op:operator pos:line="1458" pos:column="45">,</op:operator>
	<decl><name pos:line="1459" pos:column="9">MASK_APP</name>		<init pos:line="1459" pos:column="33">= <expr><lit:literal type="number" pos:line="1459" pos:column="35">0xFFFFFFF7</lit:literal></expr></init></decl><op:operator pos:line="1459" pos:column="45">,</op:operator>
}</block>;</enum>



<comment type="block" pos:line="1464" pos:column="1">/*-----------------------------------------------------------------------------
	MsoFOrapiPrimeKeyCache

	Prime a root of the registry tree in the cache
	Used only in the init
--------------------------------------------------------------------dgray----*/</comment>
<macro><name pos:line="1470" pos:column="1">MSOAPI_</name><argument_list pos:line="1470" pos:column="8">(<argument pos:line="1470" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="1470" pos:column="15">MsoFOrapiPrimeKeyCache</name><argument_list pos:line="1470" pos:column="37">(<argument pos:line="1470" pos:column="38">int keyID</argument>, <argument pos:line="1470" pos:column="49">int Options</argument>, <argument pos:line="1470" pos:column="62">HKEY hKey</argument>,
                                     <argument pos:line="1471" pos:column="38">BOOL fHoldRef</argument>, <argument pos:line="1471" pos:column="53">KEYNODE** ppkn</argument>, <argument pos:line="1471" pos:column="69">PCSTR sz</argument>)</argument_list></macro><empty_stmt pos:line="1471" pos:column="78">;</empty_stmt>
<comment type="line" pos:line="1472" pos:column="1">//#ifdef VSMSODEBUG</comment>
<comment type="line" pos:line="1473" pos:column="1">//MSOAPI_(BOOL) MsoFOrapiPrimeKeyCache(int keyID, int Options, HKEY hKey,</comment>
<comment type="line" pos:line="1474" pos:column="1">//                                     BOOL fHoldRef, KEYNODE** ppkn,</comment>
<comment type="line" pos:line="1475" pos:column="1">//                                     PCSTR sz);</comment>
<comment type="line" pos:line="1476" pos:column="1">//#else  // ! DEBUG</comment>
<comment type="line" pos:line="1477" pos:column="1">//#define MsoFOrapiPrimeKeyCache(keyID,Options,hKey,fHoldRef,ppkn,sz) \</comment>
<comment type="line" pos:line="1478" pos:column="1">//        MsoFOrapiPrimeKeyCache(keyID,Options,hKey,fHoldRef,ppkn)</comment>
<comment type="line" pos:line="1479" pos:column="1">//MSOAPI_(BOOL) MsoFOrapiPrimeKeyCache(int keyID, int Options, HKEY hKey,</comment>
<comment type="line" pos:line="1480" pos:column="1">//                                     BOOL fHoldRef, KEYNODE** ppkn);</comment>
<comment type="line" pos:line="1481" pos:column="1">//#endif // ! VSMSODEBUG</comment>


<comment type="block" pos:line="1484" pos:column="1">/*-----------------------------------------------------------------------------
	ORAPI App init routines
--------------------------------------------------------------------dgray----*/</comment>

<comment type="block" pos:line="1488" pos:column="1">/*-----------------------------------------------------------------------------
   MsoFRegHookAppTables

   Hooks the application data tables into ORAPI.  Needs to be called before 
   any ORAPI calls are made by an application.
   Returns TRUE if policy is in effect, FALSE if no policy.
--------------------------------------------------------------------dgray----*/</comment>
<macro><name pos:line="1495" pos:column="1">MSOAPI_</name><argument_list pos:line="1495" pos:column="8">(<argument pos:line="1495" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="1495" pos:column="15">MsoFRegHookAppTables</name><argument_list pos:line="1495" pos:column="35">(<argument pos:line="1495" pos:column="36">const void* pAppReg</argument>, <argument pos:line="1495" pos:column="57">const void* pAppOrkey</argument>,
                                   <argument pos:line="1496" pos:column="36">int cNumRegs</argument>, <argument pos:line="1496" pos:column="50">int cNumKeys</argument>)</argument_list></macro><empty_stmt pos:line="1496" pos:column="63">;</empty_stmt>



<comment type="block" pos:line="1500" pos:column="1">/*-----------------------------------------------------------------------------
	These ORAPI functions are used to get a handle to a HKEY.  This should 
	only be used when you are using orapi to open the key, and then you are
	using the HKEY to do something ORAPI doesn't handle, such as enumeration.

	ALWAYS close the key through ORAPI with MsoRegCloseKeyHkey().

--------------------------------------------------------------------dgray----*/</comment>
<macro><name pos:line="1508" pos:column="1">MSOAPI_</name><argument_list pos:line="1508" pos:column="8">(<argument pos:line="1508" pos:column="9">LONG</argument>)</argument_list></macro> <macro><name pos:line="1508" pos:column="15">MsoRegOpenKey</name><argument_list pos:line="1508" pos:column="28">(<argument pos:line="1508" pos:column="29">int msorid</argument>, <argument pos:line="1508" pos:column="41">PHKEY phkResult</argument>)</argument_list></macro><empty_stmt pos:line="1508" pos:column="57">;</empty_stmt>
<macro><name pos:line="1509" pos:column="1">MSOAPI_</name><argument_list pos:line="1509" pos:column="8">(<argument pos:line="1509" pos:column="9">LONG</argument>)</argument_list></macro> <macro><name pos:line="1509" pos:column="15">MsoRegOpenKeyEx</name> <argument_list pos:line="1509" pos:column="31">(<argument pos:line="1509" pos:column="32">int msorid</argument>, <argument pos:line="1509" pos:column="44">REGSAM samDesired</argument>, <argument pos:line="1509" pos:column="63">PHKEY phkResult</argument>)</argument_list></macro><empty_stmt pos:line="1509" pos:column="79">;</empty_stmt>
<macro><name pos:line="1510" pos:column="1">MSOAPI_</name><argument_list pos:line="1510" pos:column="8">(<argument pos:line="1510" pos:column="9">LONG</argument>)</argument_list></macro> <macro><name pos:line="1510" pos:column="15">MsoRegCreateKeyEx</name><argument_list pos:line="1510" pos:column="32">(<argument pos:line="1510" pos:column="33">int msorid</argument>, <argument pos:line="1510" pos:column="45">PHKEY phkResult</argument>,
                                <argument pos:line="1511" pos:column="33">LPDWORD lpdwDisposition</argument>)</argument_list></macro><empty_stmt pos:line="1511" pos:column="57">;</empty_stmt>
<macro><name pos:line="1512" pos:column="1">MSOAPI_</name><argument_list pos:line="1512" pos:column="8">(<argument pos:line="1512" pos:column="9">LONG</argument>)</argument_list></macro> <macro><name pos:line="1512" pos:column="15">MsoRegCreateKey</name><argument_list pos:line="1512" pos:column="30">(<argument pos:line="1512" pos:column="31">int msorid</argument>, <argument pos:line="1512" pos:column="43">PHKEY phkResult</argument>)</argument_list></macro><empty_stmt pos:line="1512" pos:column="59">;</empty_stmt>



<comment type="block" pos:line="1516" pos:column="1">/*-----------------------------------------------------------------------------
   MsoRegDeleteValue

   This function deletes a value from the registry.
--------------------------------------------------------------------dgray----*/</comment>
<macro><name pos:line="1521" pos:column="1">MSOAPI_</name><argument_list pos:line="1521" pos:column="8">(<argument pos:line="1521" pos:column="9">LONG</argument>)</argument_list></macro> <macro><name pos:line="1521" pos:column="15">MsoRegDeleteValue</name><argument_list pos:line="1521" pos:column="32">(<argument pos:line="1521" pos:column="33">int msorid</argument>)</argument_list></macro><empty_stmt pos:line="1521" pos:column="44">;</empty_stmt>



<comment type="block" pos:line="1525" pos:column="1">/*-----------------------------------------------------------------------------
   MsoRegDeleteKey

   This function deletes a registry key from the users registry tree.
   It also clears the value in the cache if there is one.

--------------------------------------------------------------------dgray----*/</comment>
<macro><name pos:line="1532" pos:column="1">MSOAPI_</name><argument_list pos:line="1532" pos:column="8">(<argument pos:line="1532" pos:column="9">LONG</argument>)</argument_list></macro> <macro><name pos:line="1532" pos:column="15">MsoRegDeleteKey</name><argument_list pos:line="1532" pos:column="30">(<argument pos:line="1532" pos:column="31">int msorid</argument>)</argument_list></macro><empty_stmt pos:line="1532" pos:column="42">;</empty_stmt>



<comment type="block" pos:line="1536" pos:column="1">/*-----------------------------------------------------------------------------
	MsoCbRegGetBufferSize*

	Use these functions to mimic the win32 RegQueryValueEx() call to get
	buffer size.  RegQueryValueEx(phkey, pValueName, NULL, NULL, NULL, &amp;Size);
	Use the function suited to the type accessed.
	
  MsoCbRegGetBufferSizeCore
  MsoCbRegGetBufferSizeDefaultCore
    Don't use these.  Other funcions wrap or #define to them.

  MsoCbRegGetBufferSizeSz
    Use this function to query for the size you need to allocate in order
    to query for a REG_SZ in ansi space.  Returns the size in bytes.

  MsoCbRegGetBufferSizeDefaultSz
    Use this function to query for the size you need to allocate in order
    to query for the default value of a REG_SZ in ansi space.  
    Returns the size in bytes.

  MsoCbRegGetBufferSizeWz
    Use this function to query for the size you need to allocate in order
    to query for a REG_SZ in unicode space.  Returns the size in bytes.

  MsoCbRegGetBufferSizeDefaultWz
    Use this function to query for the size you need to allocate in order
    to query for the default value of a REG_SZ in unicode space.  
    Returns the size in bytes.

  MsoCbRegGetBufferSizeBinary
    Use this function to query for the size you need to allocate in order
    to query for a REG_BINARY value data.  Returns size in bytes.
--------------------------------------------------------------------dgray----*/</comment>
<macro><name pos:line="1569" pos:column="1">MSOAPI_</name><argument_list pos:line="1569" pos:column="8">(<argument pos:line="1569" pos:column="9">DWORD</argument>)</argument_list></macro> <macro><name pos:line="1569" pos:column="16">MsoCbRegGetBufferSizeCore</name><argument_list pos:line="1569" pos:column="41">(<argument pos:line="1569" pos:column="42">int msorid</argument>)</argument_list></macro><empty_stmt pos:line="1569" pos:column="53">;</empty_stmt>
<macro><name pos:line="1570" pos:column="1">MSOAPIX_</name><argument_list pos:line="1570" pos:column="9">(<argument pos:line="1570" pos:column="10">DWORD</argument>)</argument_list></macro> <macro><name pos:line="1570" pos:column="17">MsoCbRegGetBufferSizeDefaultCore</name><argument_list pos:line="1570" pos:column="49">(<argument pos:line="1570" pos:column="50">int msorid</argument>)</argument_list></macro><empty_stmt pos:line="1570" pos:column="61">;</empty_stmt>
<macro><name pos:line="1571" pos:column="1">MSOAPI_</name><argument_list pos:line="1571" pos:column="8">(<argument pos:line="1571" pos:column="9">DWORD</argument>)</argument_list></macro> <macro><name pos:line="1571" pos:column="16">MsoCbRegGetBufferSizeSz</name><argument_list pos:line="1571" pos:column="39">(<argument pos:line="1571" pos:column="40">int msorid</argument>)</argument_list></macro><empty_stmt pos:line="1571" pos:column="51">;</empty_stmt>
<macro><name pos:line="1572" pos:column="1">MSOAPIX_</name><argument_list pos:line="1572" pos:column="9">(<argument pos:line="1572" pos:column="10">DWORD</argument>)</argument_list></macro> <macro><name pos:line="1572" pos:column="17">MsoCbRegGetBufferSizeDefaultSz</name><argument_list pos:line="1572" pos:column="47">(<argument pos:line="1572" pos:column="48">int msorid</argument>)</argument_list></macro><empty_stmt pos:line="1572" pos:column="59">;</empty_stmt>
<macro><name pos:line="1573" pos:column="1">MSOAPI_</name><argument_list pos:line="1573" pos:column="8">(<argument pos:line="1573" pos:column="9">DWORD</argument>)</argument_list></macro> <macro><name pos:line="1573" pos:column="16">MsoCbRegGetBufferSizeWz</name><argument_list pos:line="1573" pos:column="39">(<argument pos:line="1573" pos:column="40">int msorid</argument>)</argument_list></macro><empty_stmt pos:line="1573" pos:column="51">;</empty_stmt>
<macro><name pos:line="1574" pos:column="1">MSOAPIX_</name><argument_list pos:line="1574" pos:column="9">(<argument pos:line="1574" pos:column="10">DWORD</argument>)</argument_list></macro> <macro><name pos:line="1574" pos:column="17">MsoCbRegGetBufferSizeDefaultWz</name><argument_list pos:line="1574" pos:column="47">(<argument pos:line="1574" pos:column="48">int msorid</argument>)</argument_list></macro><empty_stmt pos:line="1574" pos:column="59">;</empty_stmt>
<cpp:ifdef pos:line="1575" pos:column="1">#<cpp:directive pos:line="1575" pos:column="2">ifdef</cpp:directive> <name pos:line="1575" pos:column="8">VSMSODEBUG</name></cpp:ifdef>
<macro><name pos:line="1576" pos:column="1">MSOAPI_</name><argument_list pos:line="1576" pos:column="8">(<argument pos:line="1576" pos:column="9">DWORD</argument>)</argument_list></macro> <macro><name pos:line="1576" pos:column="16">MsoCbRegGetBufferSizeBinary</name><argument_list pos:line="1576" pos:column="43">(<argument pos:line="1576" pos:column="44">int msorid</argument>)</argument_list></macro><empty_stmt pos:line="1576" pos:column="55">;</empty_stmt>
<cpp:else pos:line="1577" pos:column="1">#<cpp:directive pos:line="1577" pos:column="2">else</cpp:directive></cpp:else>  <comment type="line" pos:line="1577" pos:column="8">// ! DEBUG</comment>
<cpp:define pos:line="1578" pos:column="1">#<cpp:directive pos:line="1578" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1578" pos:column="9">MsoCbRegGetBufferSizeBinary</name><parameter_list pos:line="1578" pos:column="36">(<param><type><name pos:line="1578" pos:column="37">msorid</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="1578" pos:column="45">MsoCbRegGetBufferSizeCore(msorid)</cpp:value></cpp:define>
<cpp:endif pos:line="1579" pos:column="1">#<cpp:directive pos:line="1579" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="1579" pos:column="8">// ! VSMSODEBUG</comment>



<comment type="block" pos:line="1583" pos:column="1">/*-----------------------------------------------------------------------------
   MsoRegForceWriteDefaultValue

   DO NOT USE THIS FUNCTION!  It is not safe for general consumption.  This
   should only be used by JJames.  See the comments in tcorapi.cpp
--------------------------------------------------------------------dgray----*/</comment>
<macro><name pos:line="1589" pos:column="1">MSOAPIX_</name><argument_list pos:line="1589" pos:column="9">(<argument pos:line="1589" pos:column="10">LONG</argument>)</argument_list></macro> <macro><name pos:line="1589" pos:column="16">MsoRegForceWriteDefaultValue</name><argument_list pos:line="1589" pos:column="44">(<argument pos:line="1589" pos:column="45">int msorid</argument>)</argument_list></macro><empty_stmt pos:line="1589" pos:column="56">;</empty_stmt>



<comment type="block" pos:line="1593" pos:column="1">/*-----------------------------------------------------------------------------
	MsoFRegGetDw

	Gets the REG_DWORD value for this msorid and puts it in *pdwData.
	MsoFRegGetDw
		Returns TRUE if succeeded, FALSE if failed.  Assert if default value
		is not NO_DEFAULT
--------------------------------------------------------------------dgray----*/</comment>
<macro><name pos:line="1601" pos:column="1">MSOAPI_</name><argument_list pos:line="1601" pos:column="8">(<argument pos:line="1601" pos:column="9">BOOL</argument>)</argument_list></macro>  <macro><name pos:line="1601" pos:column="16">MsoFRegGetDwCore</name><argument_list pos:line="1601" pos:column="32">(<argument pos:line="1601" pos:column="33">int msorid</argument>, <argument pos:line="1601" pos:column="45">DWORD* pdwData</argument>)</argument_list></macro><empty_stmt pos:line="1601" pos:column="60">;</empty_stmt>
<cpp:ifdef pos:line="1602" pos:column="1">#<cpp:directive pos:line="1602" pos:column="2">ifdef</cpp:directive> <name pos:line="1602" pos:column="8">VSMSODEBUG</name></cpp:ifdef>
<macro><name pos:line="1603" pos:column="1">MSOAPI_</name><argument_list pos:line="1603" pos:column="8">(<argument pos:line="1603" pos:column="9">BOOL</argument>)</argument_list></macro>  <macro><name pos:line="1603" pos:column="16">MsoFRegGetDw</name><argument_list pos:line="1603" pos:column="28">(<argument pos:line="1603" pos:column="29">int msorid</argument>, <argument pos:line="1603" pos:column="41">DWORD* pdwData</argument>)</argument_list></macro><empty_stmt pos:line="1603" pos:column="56">;</empty_stmt>
<cpp:else pos:line="1604" pos:column="1">#<cpp:directive pos:line="1604" pos:column="2">else</cpp:directive></cpp:else>  <comment type="line" pos:line="1604" pos:column="8">// ! DEBUG</comment>
<cpp:define pos:line="1605" pos:column="1">#<cpp:directive pos:line="1605" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1605" pos:column="9">MsoFRegGetDw</name><parameter_list pos:line="1605" pos:column="21">(<param><type><name pos:line="1605" pos:column="22">msorid</name></type></param>, <param><type><name pos:line="1605" pos:column="30">pdwData</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="1605" pos:column="39">MsoFRegGetDwCore(msorid, pdwData)</cpp:value></cpp:define>
<cpp:endif pos:line="1606" pos:column="1">#<cpp:directive pos:line="1606" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="1606" pos:column="8">// ! VSMSODEBUG</comment>



<comment type="block" pos:line="1610" pos:column="1">/*-----------------------------------------------------------------------------
	MsoDwRegGetDw

	Returns the REG_DWORD value for this msorid.
	Does not check for failure, which is fine if default values are defined.
--------------------------------------------------------------------dgray----*/</comment>
<macro><name pos:line="1616" pos:column="1">MSOAPI_</name><argument_list pos:line="1616" pos:column="8">(<argument pos:line="1616" pos:column="9">DWORD</argument>)</argument_list></macro> <macro><name pos:line="1616" pos:column="16">MsoDwRegGetDw</name><argument_list pos:line="1616" pos:column="29">(<argument pos:line="1616" pos:column="30">int msorid</argument>)</argument_list></macro><empty_stmt pos:line="1616" pos:column="41">;</empty_stmt>



<comment type="block" pos:line="1620" pos:column="1">/*-----------------------------------------------------------------------------
	These should be used in only select cases!  These functions should be
	used only in cases where we know that a DWORD may be written out as a
	REG_BINARY type.  In general, we will accept a REG_BINARY if it is the 
	correct size, but we will assert if the type does not match.  These
	functions turn that assert off and back on.  Use like so:
		MsoRegDwTypeMatchAssertOff();
		dw = MsoDwRegGetDw(msoridFoo);
		MsoRegDwTypeMatchAssertOn();

	ALWAYS CALL THIS IN PAIRS SO THE ASSERT GETS RE-ENABLED!
--------------------------------------------------------------------dgray----*/</comment>
<cpp:ifdef pos:line="1632" pos:column="1">#<cpp:directive pos:line="1632" pos:column="2">ifdef</cpp:directive> <name pos:line="1632" pos:column="8">VSMSODEBUG</name></cpp:ifdef>
<macro><name pos:line="1633" pos:column="1">MSOAPI_</name><argument_list pos:line="1633" pos:column="8">(<argument pos:line="1633" pos:column="9">void</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="1633" pos:column="15">MsoRegDwTypeMatchAssertOff</name><argument_list pos:line="1633" pos:column="41">()</argument_list></call></expr>;</expr_stmt>
<macro><name pos:line="1634" pos:column="1">MSOAPI_</name><argument_list pos:line="1634" pos:column="8">(<argument pos:line="1634" pos:column="9">void</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="1634" pos:column="15">MsoRegDwTypeMatchAssertOn</name><argument_list pos:line="1634" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="1635" pos:column="1">#<cpp:directive pos:line="1635" pos:column="2">else</cpp:directive></cpp:else>  <comment type="line" pos:line="1635" pos:column="8">// ! DEBUG</comment>
<cpp:define pos:line="1636" pos:column="1">#<cpp:directive pos:line="1636" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1636" pos:column="9">MsoRegDwTypeMatchAssertOff</name><parameter_list pos:line="1636" pos:column="35">()</parameter_list></cpp:macro></cpp:define>
<cpp:define pos:line="1637" pos:column="1">#<cpp:directive pos:line="1637" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1637" pos:column="9">MsoRegDwTypeMatchAssertOn</name><parameter_list pos:line="1637" pos:column="34">()</parameter_list></cpp:macro></cpp:define>
<cpp:endif pos:line="1638" pos:column="1">#<cpp:directive pos:line="1638" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="1638" pos:column="8">// ! VSMSODEBUG</comment>



<comment type="block" pos:line="1642" pos:column="1">/*-----------------------------------------------------------------------------
	These should be used in only select cases!  These functions should be
	used when we're calling MsoFRegGetDw, but the rid may have Orapi
	default-value-data.  In general, MsoFRegGetDw will assert if the rid has 
	def-value-data, since the code could call MsoDwRegGetDw instead (guaranteed 
	not to fail). 
	These functions turn that assert off and back on.  Use like so:
		MsoRegDefValAssertOff();
		if (MsoFDwRegGetDw(msoridFoo)) blah;
		MsoRegDefValAssertOn();

	ALWAYS CALL THIS IN PAIRS SO THE ASSERT GETS RE-ENABLED!
--------------------------------------------------------------------dgray----*/</comment>
<cpp:ifdef pos:line="1655" pos:column="1">#<cpp:directive pos:line="1655" pos:column="2">ifdef</cpp:directive> <name pos:line="1655" pos:column="8">VSMSODEBUG</name></cpp:ifdef>
<macro><name pos:line="1656" pos:column="1">MSOAPI_</name><argument_list pos:line="1656" pos:column="8">(<argument pos:line="1656" pos:column="9">void</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="1656" pos:column="15">MsoRegDefValAssertOff</name><argument_list pos:line="1656" pos:column="36">()</argument_list></call></expr>;</expr_stmt>
<macro><name pos:line="1657" pos:column="1">MSOAPI_</name><argument_list pos:line="1657" pos:column="8">(<argument pos:line="1657" pos:column="9">void</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="1657" pos:column="15">MsoRegDefValAssertOn</name><argument_list pos:line="1657" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="1658" pos:column="1">#<cpp:directive pos:line="1658" pos:column="2">else</cpp:directive></cpp:else>  <comment type="line" pos:line="1658" pos:column="8">// ! DEBUG</comment>
<cpp:define pos:line="1659" pos:column="1">#<cpp:directive pos:line="1659" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1659" pos:column="9">MsoRegDefValAssertOff</name><parameter_list pos:line="1659" pos:column="30">()</parameter_list></cpp:macro></cpp:define>
<cpp:define pos:line="1660" pos:column="1">#<cpp:directive pos:line="1660" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1660" pos:column="9">MsoRegDefValAssertOn</name><parameter_list pos:line="1660" pos:column="29">()</parameter_list></cpp:macro></cpp:define>
<cpp:endif pos:line="1661" pos:column="1">#<cpp:directive pos:line="1661" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="1661" pos:column="8">// ! VSMSODEBUG</comment>



<comment type="block" pos:line="1665" pos:column="1">/*-----------------------------------------------------------------------------
	MsoFRegSetDw

	Sets the REG_DWORD value for this msorid.
	Returns TRUE if succeeded, FALSE if failed.
--------------------------------------------------------------------dgray----*/</comment>
<macro><name pos:line="1671" pos:column="1">MSOAPI_</name><argument_list pos:line="1671" pos:column="8">(<argument pos:line="1671" pos:column="9">BOOL</argument>)</argument_list></macro>  <macro><name pos:line="1671" pos:column="16">MsoFRegSetDw</name><argument_list pos:line="1671" pos:column="28">(<argument pos:line="1671" pos:column="29">int msorid</argument>, <argument pos:line="1671" pos:column="41">DWORD dwData</argument>)</argument_list></macro><empty_stmt pos:line="1671" pos:column="54">;</empty_stmt>



<comment type="block" pos:line="1675" pos:column="1">/*-----------------------------------------------------------------------------
	MsoFRegGetBinary

	Gets the REG_BINARY value for this msorid. pCb should be set to the size
	of the buffer passed in.  (pCb needed can be queried with GetBufferSize
	functions)
	
	Returns:	TRUE if succeeded, FALSE if failed.
	Sides:		*pbData is filled with the binary data retrieved.
				*pCb is filled with the size of the returned binary.
--------------------------------------------------------------------dgray----*/</comment>
<macro><name pos:line="1686" pos:column="1">MSOAPI_</name><argument_list pos:line="1686" pos:column="8">(<argument pos:line="1686" pos:column="9">BOOL</argument>)</argument_list></macro>  <macro><name pos:line="1686" pos:column="16">MsoFRegGetBinary</name><argument_list pos:line="1686" pos:column="32">(<argument pos:line="1686" pos:column="33">int msorid</argument>, <argument pos:line="1686" pos:column="45">LPBYTE pbData</argument>, <argument pos:line="1686" pos:column="60">DWORD* pCb</argument>)</argument_list></macro><empty_stmt pos:line="1686" pos:column="71">;</empty_stmt>



<comment type="block" pos:line="1690" pos:column="1">/*-----------------------------------------------------------------------------
	MsoFRegSetBinary

	Sets the REG_BINARY value for this msorid. Cb should be set to the size
	of the buffer passed in to be written.
	
	Returns:	TRUE if succeeded, FALSE if failed.
--------------------------------------------------------------------dgray----*/</comment>
<macro><name pos:line="1698" pos:column="1">MSOAPI_</name><argument_list pos:line="1698" pos:column="8">(<argument pos:line="1698" pos:column="9">BOOL</argument>)</argument_list></macro>  <macro><name pos:line="1698" pos:column="16">MsoFRegSetBinary</name><argument_list pos:line="1698" pos:column="32">(<argument pos:line="1698" pos:column="33">int msorid</argument>, <argument pos:line="1698" pos:column="45">const BYTE *pbData</argument>, <argument pos:line="1698" pos:column="65">DWORD Cb</argument>)</argument_list></macro><empty_stmt pos:line="1698" pos:column="74">;</empty_stmt>



<comment type="block" pos:line="1702" pos:column="1">/*-----------------------------------------------------------------------------
	Mso*RegGetSz

	Gets the REG_SZ value for this msorid. 

	Input Parameters:
						Cb should be set to the size of the buffer passed
							in in bytes
						sz should be the character buffer to be filled.
	
	Sides:		*sz is filled with the ansi string data retrieved.

	MsoFRegGetSz
		Returns TRUE if success, FALSE if failed.  Asserts is default value
		is not NO_DEFAULT
	MsoRegGetSz
		No return value.  Used if there is a default value in the database.
--------------------------------------------------------------------dgray----*/</comment>
<macro><name pos:line="1720" pos:column="1">MSOAPI_</name><argument_list pos:line="1720" pos:column="8">(<argument pos:line="1720" pos:column="9">BOOL</argument>)</argument_list></macro>  <macro><name pos:line="1720" pos:column="16">MsoFRegGetSzCore</name><argument_list pos:line="1720" pos:column="32">(<argument pos:line="1720" pos:column="33">int msorid</argument>, <argument pos:line="1720" pos:column="45">PSTR sz</argument>, <argument pos:line="1720" pos:column="54">DWORD Cb</argument>)</argument_list></macro><empty_stmt pos:line="1720" pos:column="63">;</empty_stmt>
<cpp:ifdef pos:line="1721" pos:column="1">#<cpp:directive pos:line="1721" pos:column="2">ifdef</cpp:directive> <name pos:line="1721" pos:column="8">VSMSODEBUG</name></cpp:ifdef>
<macro><name pos:line="1722" pos:column="1">MSOAPI_</name><argument_list pos:line="1722" pos:column="8">(<argument pos:line="1722" pos:column="9">VOID</argument>)</argument_list></macro>  <macro><name pos:line="1722" pos:column="16">MsoRegGetSz</name> <argument_list pos:line="1722" pos:column="28">(<argument pos:line="1722" pos:column="29">int msorid</argument>, <argument pos:line="1722" pos:column="41">PSTR sz</argument>, <argument pos:line="1722" pos:column="50">DWORD Cb</argument>)</argument_list></macro><empty_stmt pos:line="1722" pos:column="59">;</empty_stmt>
<macro><name pos:line="1723" pos:column="1">MSOAPI_</name><argument_list pos:line="1723" pos:column="8">(<argument pos:line="1723" pos:column="9">BOOL</argument>)</argument_list></macro>  <macro><name pos:line="1723" pos:column="16">MsoFRegGetSz</name><argument_list pos:line="1723" pos:column="28">(<argument pos:line="1723" pos:column="29">int msorid</argument>, <argument pos:line="1723" pos:column="41">PSTR sz</argument>, <argument pos:line="1723" pos:column="50">DWORD Cb</argument>)</argument_list></macro><empty_stmt pos:line="1723" pos:column="59">;</empty_stmt>
<cpp:else pos:line="1724" pos:column="1">#<cpp:directive pos:line="1724" pos:column="2">else</cpp:directive></cpp:else>  <comment type="line" pos:line="1724" pos:column="8">// ! DEBUG</comment>
<cpp:define pos:line="1725" pos:column="1">#<cpp:directive pos:line="1725" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1725" pos:column="9">MsoFRegGetSz</name><parameter_list pos:line="1725" pos:column="21">(<param><type><name pos:line="1725" pos:column="22">msorid</name></type></param>, <param><type><name pos:line="1725" pos:column="30">sz</name></type></param>, <param><type><name pos:line="1725" pos:column="34">Cb</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="1725" pos:column="38">MsoFRegGetSzCore(msorid, sz, Cb)</cpp:value></cpp:define>
<cpp:define pos:line="1726" pos:column="1">#<cpp:directive pos:line="1726" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1726" pos:column="9">MsoRegGetSz</name><parameter_list pos:line="1726" pos:column="20">(<param><type><name pos:line="1726" pos:column="21">msorid</name></type></param>, <param><type><name pos:line="1726" pos:column="29">sz</name></type></param>, <param><type><name pos:line="1726" pos:column="33">Cb</name></type></param>)</parameter_list></cpp:macro>  <cpp:value pos:line="1726" pos:column="38">MsoFRegGetSzCore(msorid, sz, Cb)</cpp:value></cpp:define>
<cpp:endif pos:line="1727" pos:column="1">#<cpp:directive pos:line="1727" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="1727" pos:column="8">// ! VSMSODEBUG</comment>



<comment type="block" pos:line="1731" pos:column="1">/*-----------------------------------------------------------------------------
	Mso*RegGetWz

	Gets the REG_SZ value for this msorid.

	Input Parameters:
						Cb should be set to the size of the buffer passed
							in in bytes
						wz should be the character buffer to be filled.
	
	Sides:		*wz is filled with the wide string data retrieved.

	MsoFRegGetWz
		Returns TRUE if success, FALSE if failed.  Asserts is default value
		is not NO_DEFAULT
	MsoRegGetWz
		No return value.  Used if there is a default value in the database.
--------------------------------------------------------------------dgray----*/</comment>
<macro><name pos:line="1749" pos:column="1">MSOAPI_</name><argument_list pos:line="1749" pos:column="8">(<argument pos:line="1749" pos:column="9">BOOL</argument>)</argument_list></macro>  <macro><name pos:line="1749" pos:column="16">MsoFRegGetWzCore</name><argument_list pos:line="1749" pos:column="32">(<argument pos:line="1749" pos:column="33">int msorid</argument>, <argument pos:line="1749" pos:column="45">PWSTR wz</argument>, <argument pos:line="1749" pos:column="55">DWORD Cb</argument>)</argument_list></macro><empty_stmt pos:line="1749" pos:column="64">;</empty_stmt>
<cpp:ifdef pos:line="1750" pos:column="1">#<cpp:directive pos:line="1750" pos:column="2">ifdef</cpp:directive> <name pos:line="1750" pos:column="8">VSMSODEBUG</name></cpp:ifdef>
<macro><name pos:line="1751" pos:column="1">MSOAPI_</name><argument_list pos:line="1751" pos:column="8">(<argument pos:line="1751" pos:column="9">VOID</argument>)</argument_list></macro>  <macro><name pos:line="1751" pos:column="16">MsoRegGetWz</name> <argument_list pos:line="1751" pos:column="28">(<argument pos:line="1751" pos:column="29">int msorid</argument>, <argument pos:line="1751" pos:column="41">PWSTR wz</argument>, <argument pos:line="1751" pos:column="51">DWORD Cb</argument>)</argument_list></macro><empty_stmt pos:line="1751" pos:column="60">;</empty_stmt>
<macro><name pos:line="1752" pos:column="1">MSOAPI_</name><argument_list pos:line="1752" pos:column="8">(<argument pos:line="1752" pos:column="9">BOOL</argument>)</argument_list></macro>  <macro><name pos:line="1752" pos:column="16">MsoFRegGetWz</name><argument_list pos:line="1752" pos:column="28">(<argument pos:line="1752" pos:column="29">int msorid</argument>, <argument pos:line="1752" pos:column="41">PWSTR wz</argument>, <argument pos:line="1752" pos:column="51">DWORD Cb</argument>)</argument_list></macro><empty_stmt pos:line="1752" pos:column="60">;</empty_stmt>
<cpp:else pos:line="1753" pos:column="1">#<cpp:directive pos:line="1753" pos:column="2">else</cpp:directive></cpp:else>  <comment type="line" pos:line="1753" pos:column="8">// ! DEBUG</comment>
<cpp:define pos:line="1754" pos:column="1">#<cpp:directive pos:line="1754" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1754" pos:column="9">MsoFRegGetWz</name><parameter_list pos:line="1754" pos:column="21">(<param><type><name pos:line="1754" pos:column="22">msorid</name></type></param>, <param><type><name pos:line="1754" pos:column="30">wz</name></type></param>, <param><type><name pos:line="1754" pos:column="34">Cb</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="1754" pos:column="38">MsoFRegGetWzCore(msorid, wz, Cb)</cpp:value></cpp:define>
<cpp:define pos:line="1755" pos:column="1">#<cpp:directive pos:line="1755" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1755" pos:column="9">MsoRegGetWz</name><parameter_list pos:line="1755" pos:column="20">(<param><type><name pos:line="1755" pos:column="21">msorid</name></type></param>, <param><type><name pos:line="1755" pos:column="29">wz</name></type></param>, <param><type><name pos:line="1755" pos:column="33">Cb</name></type></param>)</parameter_list></cpp:macro>  <cpp:value pos:line="1755" pos:column="38">MsoFRegGetWzCore(msorid, wz, Cb)</cpp:value></cpp:define>
<cpp:endif pos:line="1756" pos:column="1">#<cpp:directive pos:line="1756" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="1756" pos:column="8">// ! VSMSODEBUG</comment>
<macro><name pos:line="1757" pos:column="1">MSOAPI_</name><argument_list pos:line="1757" pos:column="8">(<argument pos:line="1757" pos:column="9">DWORD</argument>)</argument_list></macro> <macro><name pos:line="1757" pos:column="16">MsoCchRegGetWz</name><argument_list pos:line="1757" pos:column="30">(<argument pos:line="1757" pos:column="31">int msorid</argument>, <argument pos:line="1757" pos:column="43">PWSTR wz</argument>, <argument pos:line="1757" pos:column="53">DWORD Cb</argument>)</argument_list></macro><empty_stmt pos:line="1757" pos:column="62">;</empty_stmt>



<comment type="block" pos:line="1761" pos:column="1">/*-----------------------------------------------------------------------------
	MsoFRegSetSz

	Sets the REG_SZ registry value for this msorid using sz as the input.

	Input Parameters:
						*sz is the buffer containing the ansi string to write.

	Returns:	TRUE if succeeded, FALSE if failed.	
--------------------------------------------------------------------dgray----*/</comment>
<macro><name pos:line="1771" pos:column="1">MSOAPI_</name><argument_list pos:line="1771" pos:column="8">(<argument pos:line="1771" pos:column="9">BOOL</argument>)</argument_list></macro>  <macro><name pos:line="1771" pos:column="16">MsoFRegSetSz</name><argument_list pos:line="1771" pos:column="28">(<argument pos:line="1771" pos:column="29">int msorid</argument>, <argument pos:line="1771" pos:column="41">PCSTR sz</argument>)</argument_list></macro><empty_stmt pos:line="1771" pos:column="50">;</empty_stmt>



<comment type="block" pos:line="1775" pos:column="1">/*-----------------------------------------------------------------------------
	MsoFRegSetWz

	Sets the REG_SZ registry value for this msorid using a wz as the input.

	Input Parameters:
						*wz is the buffer containing the wide string to write.

	Returns:	TRUE if succeeded, FALSE if failed.	
--------------------------------------------------------------------dgray----*/</comment>
<macro><name pos:line="1785" pos:column="1">MSOAPI_</name><argument_list pos:line="1785" pos:column="8">(<argument pos:line="1785" pos:column="9">BOOL</argument>)</argument_list></macro>  <macro><name pos:line="1785" pos:column="16">MsoFRegSetWz</name><argument_list pos:line="1785" pos:column="28">(<argument pos:line="1785" pos:column="29">int msorid</argument>, <argument pos:line="1785" pos:column="41">PCWSTR wz</argument>)</argument_list></macro><empty_stmt pos:line="1785" pos:column="51">;</empty_stmt>



<comment type="block" pos:line="1789" pos:column="1">/*-----------------------------------------------------------------------------
	MsoFRegKeyExists

	Returns true if the key for this msorid exists in the registry.
	This could be in either the policy tree or the user reg tree.
	Returns false if there is no value in the registry.
--------------------------------------------------------------------dgray----*/</comment>
<macro><name pos:line="1796" pos:column="1">MSOAPI_</name><argument_list pos:line="1796" pos:column="8">(<argument pos:line="1796" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="1796" pos:column="15">MsoFRegKeyExists</name><argument_list pos:line="1796" pos:column="31">(<argument pos:line="1796" pos:column="32">int msorid</argument>)</argument_list></macro><empty_stmt pos:line="1796" pos:column="43">;</empty_stmt>



<comment type="block" pos:line="1800" pos:column="1">/*-----------------------------------------------------------------------------
	Mso*RegGetDefault*

	Retrieves the DEFAULT value for a particular rid, in the same method as the 
	other retrieval functions above.

	False if failed (no default value)
--------------------------------------------------------------------dgray----*/</comment>
<macro><name pos:line="1808" pos:column="1">MSOAPIX_</name><argument_list pos:line="1808" pos:column="9">(<argument pos:line="1808" pos:column="10">BOOL</argument>)</argument_list></macro> <macro><name pos:line="1808" pos:column="16">MsoFRegGetDefaultSz</name><argument_list pos:line="1808" pos:column="35">(<argument pos:line="1808" pos:column="36">int msorid</argument>, <argument pos:line="1808" pos:column="48">PSTR sz</argument>, <argument pos:line="1808" pos:column="57">DWORD Cb</argument>)</argument_list></macro><empty_stmt pos:line="1808" pos:column="66">;</empty_stmt>
<macro><name pos:line="1809" pos:column="1">MSOAPI_</name><argument_list pos:line="1809" pos:column="8">(<argument pos:line="1809" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="1809" pos:column="15">MsoFRegGetDefaultWz</name><argument_list pos:line="1809" pos:column="34">(<argument pos:line="1809" pos:column="35">int msorid</argument>, <argument pos:line="1809" pos:column="47">PWSTR wz</argument>, <argument pos:line="1809" pos:column="57">DWORD Cb</argument>)</argument_list></macro><empty_stmt pos:line="1809" pos:column="66">;</empty_stmt>
<macro><name pos:line="1810" pos:column="1">MSOAPI_</name><argument_list pos:line="1810" pos:column="8">(<argument pos:line="1810" pos:column="9">DWORD</argument>)</argument_list></macro> <macro><name pos:line="1810" pos:column="16">MsoDwRegGetDefaultDw</name><argument_list pos:line="1810" pos:column="36">(<argument pos:line="1810" pos:column="37">int msorid</argument>)</argument_list></macro><empty_stmt pos:line="1810" pos:column="48">;</empty_stmt>



<comment type="block" pos:line="1814" pos:column="1">/*-----------------------------------------------------------------------------
	MsoFRegValueExists

	Returns true if value data for this msorid exists in the registry.
	This could be in either the policy tree or the user reg tree.
	Returns false if there is no value in the registry.

--------------------------------------------------------------------dgray----*/</comment>
<macro><name pos:line="1822" pos:column="1">MSOAPI_</name><argument_list pos:line="1822" pos:column="8">(<argument pos:line="1822" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="1822" pos:column="15">MsoFRegValueExists</name><argument_list pos:line="1822" pos:column="33">(<argument pos:line="1822" pos:column="34">int msorid</argument>)</argument_list></macro><empty_stmt pos:line="1822" pos:column="45">;</empty_stmt>



<comment type="block" pos:line="1826" pos:column="1">/*-----------------------------------------------------------------------------
	MsoFRegDefaultValueExists

	Returns &gt; 0 if default value exists, returns 0 if no default exists.
--------------------------------------------------------------------dgray----*/</comment>
<macro><name pos:line="1831" pos:column="1">MSOAPIDBG_</name><argument_list pos:line="1831" pos:column="11">(<argument pos:line="1831" pos:column="12">BOOL</argument>)</argument_list></macro> <macro><name pos:line="1831" pos:column="18">MsoFRegValueExistsDefault</name><argument_list pos:line="1831" pos:column="43">(<argument pos:line="1831" pos:column="44">int msorid</argument>)</argument_list></macro><empty_stmt pos:line="1831" pos:column="55">;</empty_stmt>



<comment type="block" pos:line="1835" pos:column="1">/*-----------------------------------------------------------------------------
	MsoFRegPolicyValueExists

	Returns TRUE if there is a value in the Policies tree to return. 
	FALSE otherwise.
--------------------------------------------------------------------dgray----*/</comment>
<macro><name pos:line="1841" pos:column="1">MSOAPI_</name><argument_list pos:line="1841" pos:column="8">(<argument pos:line="1841" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="1841" pos:column="15">MsoFRegPolicyValueExists</name><argument_list pos:line="1841" pos:column="39">(<argument pos:line="1841" pos:column="40">int msorid</argument>)</argument_list></macro><empty_stmt pos:line="1841" pos:column="51">;</empty_stmt>



<comment type="block" pos:line="1845" pos:column="1">/*-----------------------------------------------------------------------------
	OrapiSetVal

	Sets a Generic ORAPI value

	Don't use this function if you just check for ERROR_SUCCESS.  It is
	wrapped for each type.

	Returns:	Win32 error code
	Sides:		None.
--------------------------------------------------------------------dgray----*/</comment>
<macro><name pos:line="1856" pos:column="1">MSOAPIX_</name><argument_list pos:line="1856" pos:column="9">(<argument pos:line="1856" pos:column="10">LONG</argument>)</argument_list></macro> <macro><name pos:line="1856" pos:column="16">OrapiSetVal</name><argument_list pos:line="1856" pos:column="27">(<argument pos:line="1856" pos:column="28">int msorid</argument>, <argument pos:line="1856" pos:column="40">const BYTE* pbData</argument>, <argument pos:line="1856" pos:column="60">DWORD Cb</argument>)</argument_list></macro><empty_stmt pos:line="1856" pos:column="69">;</empty_stmt>



<comment type="block" pos:line="1860" pos:column="1">/*-----------------------------------------------------------------------------
	OrapiQueryVal

	Queries for a Generic ORAPI value, not a string
	Order of how it gets the value
			1) Query Software/Policy Tree
			2) Query Software Tree
			3) Use Default Value
			4) Fill with empty value (0; 0x00, 0x00;)

	Returns:	Win32 error code (ERROR_SUCCESS except in case 4, but never
					use to check for ERROR_MORE_DATA, or 
					ERROR_INSUFFICIENT_BUFFER.
					(Use the GetBufferSize functions)
	Sides:		Fills wzData with a valid wz string
				Fills *pCb with the size in bytes returned.

REVIEW DGray: 
		Is there a way I can make this function even more compact by
		using a pointer to a function to make the query calls, 
		and dynamically setting it to either the W or A version, based 
		on vfUnicodeAPI?  The only thing holding my up is the type checking for 
		the wzValueName or rgMsoReg[msorid].szValue
--------------------------------------------------------------------dgray----*/</comment>
<macro><name pos:line="1884" pos:column="1">MSOAPIX_</name><argument_list pos:line="1884" pos:column="9">(<argument pos:line="1884" pos:column="10">LONG</argument>)</argument_list></macro> <macro><name pos:line="1884" pos:column="16">OrapiQueryVal</name><argument_list pos:line="1884" pos:column="29">(<argument pos:line="1884" pos:column="30">int msorid</argument>, <argument pos:line="1884" pos:column="42">LPBYTE pbData</argument>, <argument pos:line="1884" pos:column="57">LPDWORD pCb</argument>)</argument_list></macro><empty_stmt pos:line="1884" pos:column="69">;</empty_stmt>



<comment type="block" pos:line="1888" pos:column="1">/*-----------------------------------------------------------------------------
	OrapiQuerySzVal

	Queries for an ORAPI string value, to be returned as an sz
	Order of how it gets the string:
			1) Query Software/Policy Tree
			2) Query Software Tree
			3) Use Default Value
			4) Fill with empty string ("\0")


	Returns:	Win32 error code (ERROR_SUCCESS except in case 4, but never
					use to check for ERROR_MORE_DATA, or 
					ERROR_INSUFFICIENT_BUFFER.
					(Use the GetBufferSize functions)
	Sides:		Fills szData with a valid sz string
--------------------------------------------------------------------dgray----*/</comment>
<macro><name pos:line="1905" pos:column="1">MSOAPI_</name><argument_list pos:line="1905" pos:column="8">(<argument pos:line="1905" pos:column="9">LONG</argument>)</argument_list></macro> <macro><name pos:line="1905" pos:column="15">OrapiQuerySzVal</name><argument_list pos:line="1905" pos:column="30">(<argument pos:line="1905" pos:column="31">int msorid</argument>, <argument pos:line="1905" pos:column="43">PSTR szData</argument>, <argument pos:line="1905" pos:column="56">DWORD Cb</argument>)</argument_list></macro><empty_stmt pos:line="1905" pos:column="65">;</empty_stmt>



<comment type="block" pos:line="1909" pos:column="1">/*-----------------------------------------------------------------------------
	OrapiQueryWzVal

	Queries for an ORAPI string value, to be returned as a wz
	Order of how it gets the string:
			1) Query Software/Policy Tree
			2) Query Software Tree
			3) Use Default Value
			4) Fill with empty string (L"\0")


	Returns:	Win32 error code (ERROR_SUCCESS except in case 4, but never
					use to check for ERROR_MORE_DATA, or 
					ERROR_INSUFFICIENT_BUFFER.  
					(Use the GetBufferSize functions)

	Sides:		Fills wzData with a valid wz string
--------------------------------------------------------------------dgray----*/</comment>
<macro><name pos:line="1927" pos:column="1">MSOAPI_</name><argument_list pos:line="1927" pos:column="8">(<argument pos:line="1927" pos:column="9">LONG</argument>)</argument_list></macro> <macro><name pos:line="1927" pos:column="15">OrapiQueryWzVal</name><argument_list pos:line="1927" pos:column="30">(<argument pos:line="1927" pos:column="31">int msorid</argument>, <argument pos:line="1927" pos:column="43">PWSTR wzData</argument>, <argument pos:line="1927" pos:column="57">DWORD Cb</argument>)</argument_list></macro><empty_stmt pos:line="1927" pos:column="66">;</empty_stmt>



<comment type="block" pos:line="1931" pos:column="1">/*-----------------------------------------------------------------------------
	OrapiGetRid

	Given a value name, what is the rid associated with it.
--------------------------------------------------------------------dgray----*/</comment>
<macro><name pos:line="1936" pos:column="1">MSOAPIX_</name><argument_list pos:line="1936" pos:column="9">(<argument pos:line="1936" pos:column="10">BOOL</argument>)</argument_list></macro> <macro><name pos:line="1936" pos:column="16">OrapiGetRidForValueEx</name><argument_list pos:line="1936" pos:column="37">(<argument pos:line="1936" pos:column="38">PSTR pszValueName</argument>, <argument pos:line="1936" pos:column="57">PSTR pszKeyName</argument>,
                                    <argument pos:line="1937" pos:column="37">BOOL fUseApp</argument>, <argument pos:line="1937" pos:column="51">DWORD *pdwMsoRid</argument>,
                                    <argument pos:line="1938" pos:column="37">DWORD *pdwRegType</argument>)</argument_list></macro><empty_stmt pos:line="1938" pos:column="55">;</empty_stmt>
<macro><name pos:line="1939" pos:column="1">MSOAPI_</name><argument_list pos:line="1939" pos:column="8">(<argument pos:line="1939" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="1939" pos:column="15">OrapiGetRidForValueExW</name><argument_list pos:line="1939" pos:column="37">(<argument pos:line="1939" pos:column="38">PWSTR pwzValueName</argument>, <argument pos:line="1939" pos:column="58">PWSTR pwzKeyName</argument>, <argument pos:line="1939" pos:column="76">BOOL fUseApp</argument>, <argument pos:line="1939" pos:column="90">DWORD *pdwMsoRid</argument>, <argument pos:line="1939" pos:column="108">DWORD *pdwRegType</argument>)</argument_list></macro><empty_stmt pos:line="1939" pos:column="126">;</empty_stmt>
<cpp:define pos:line="1940" pos:column="1">#<cpp:directive pos:line="1940" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1940" pos:column="9">OrapiGetRidForValue</name><parameter_list pos:line="1940" pos:column="28">(<param><type><name pos:line="1940" pos:column="29">pszValueName</name></type></param>, <param><type><name pos:line="1940" pos:column="43">pszKeyName</name></type></param>, <param><type><name pos:line="1940" pos:column="55">fUseApp</name></type></param>, <param><type><name pos:line="1940" pos:column="64">pdwMsoRid</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="1941" pos:column="9">OrapiGetRidForValueEx(pszValueName, pszKeyName, fUseApp, pdwMsoRid, NULL)</cpp:value></cpp:define>


<comment type="block" pos:line="1944" pos:column="1">/*-----------------------------------------------------------------------------
	FOfficePolicyKeyExists

	Determines if registry policy is being applied by reading the hkey.  Also
	inserts the key into the cache.
--------------------------------------------------------------------dgray----*/</comment>
<function_decl><type><name pos:line="1950" pos:column="1">BOOL</name></type> <name pos:line="1950" pos:column="6">FOfficePolicyKeyExists</name><parameter_list pos:line="1950" pos:column="28">(<param><decl><type><name pos:line="1950" pos:column="29">HKEY</name></type> <name pos:line="1950" pos:column="34">hHive</name></decl></param>, <param><decl><type><name pos:line="1950" pos:column="41">int</name></type> <name pos:line="1950" pos:column="45">keyID</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block" pos:line="1953" pos:column="1">/*-----------------------------------------------------------------------------
	When dealing with shared Excel and Graph code, use this to distinguish 
	between places where a single reg call is used to access graph in some
	cases and excel in others.  Tag on a rid that is msorid*XL to see an
	example.
--------------------------------------------------------------------dgray----*/</comment>
<cpp:ifdef pos:line="1959" pos:column="1">#<cpp:directive pos:line="1959" pos:column="2">ifdef</cpp:directive> <name pos:line="1959" pos:column="8">EXCEL_BUILD</name></cpp:ifdef>
<cpp:ifdef pos:line="1960" pos:column="1">#<cpp:directive pos:line="1960" pos:column="2">ifdef</cpp:directive> <name pos:line="1960" pos:column="8">GRAF</name></cpp:ifdef>
<cpp:define pos:line="1961" pos:column="1">#<cpp:directive pos:line="1961" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1961" pos:column="9">GetRid</name><parameter_list pos:line="1961" pos:column="15">(<param><type><name pos:line="1961" pos:column="16">x</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="1961" pos:column="19">x##GR</cpp:value></cpp:define>
<cpp:else pos:line="1962" pos:column="1">#<cpp:directive pos:line="1962" pos:column="2">else</cpp:directive></cpp:else>
<cpp:define pos:line="1963" pos:column="1">#<cpp:directive pos:line="1963" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1963" pos:column="9">GetRid</name><parameter_list pos:line="1963" pos:column="15">(<param><type><name pos:line="1963" pos:column="16">x</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="1963" pos:column="19">x##XL</cpp:value></cpp:define>
<cpp:endif pos:line="1964" pos:column="1">#<cpp:directive pos:line="1964" pos:column="2">endif</cpp:directive></cpp:endif>
<cpp:endif pos:line="1965" pos:column="1">#<cpp:directive pos:line="1965" pos:column="2">endif</cpp:directive></cpp:endif>



<comment type="block" pos:line="1969" pos:column="1">/*-----------------------------------------------------------------------------
	MsoFRegCheckKeyPath

	Fills a buffer with the Ansi key path to a rid.  Used to make sure
	certain paths don't get accidentally changed.  Note: This path does NOT
	include the root, that is, HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, etc.
	So "Software\\Policies" would match "HKEY_CURRENT_USER\\Software\\Policies"
	and also "HKEY_LOCAL_MACHINE\\Software\\Policies", but that is not where 
	these key mishaps that we are trying to catch actually happen, so this is
	fine.  If msoridRoot is specified, we build the string up only until that
	key.
	
	Returns:
		TRUE  if the rid's key matches the expected string
		FALSE if the rid's key does not match the expected string.
--------------------------------------------------------------------dgray----*/</comment>
<cpp:ifdef pos:line="1985" pos:column="1">#<cpp:directive pos:line="1985" pos:column="2">ifdef</cpp:directive> <name pos:line="1985" pos:column="8">VSMSODEBUG</name></cpp:ifdef>
<macro><name pos:line="1986" pos:column="1">MSOAPI_</name><argument_list pos:line="1986" pos:column="8">(<argument pos:line="1986" pos:column="9">LONG</argument>)</argument_list></macro> <macro><name pos:line="1986" pos:column="15">MsoFRegCheckKeyPath</name><argument_list pos:line="1986" pos:column="34">(<argument pos:line="1986" pos:column="35">int msorid</argument>, <argument pos:line="1986" pos:column="47">int msoridRoot</argument>, <argument pos:line="1986" pos:column="63">const CHAR* sz</argument>)</argument_list></macro><empty_stmt pos:line="1986" pos:column="78">;</empty_stmt>
<cpp:endif pos:line="1987" pos:column="1">#<cpp:directive pos:line="1987" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="1987" pos:column="8">// VSMSODEBUG</comment>



<comment type="block" pos:line="1991" pos:column="1">/*----------------------------------------------------------------------------
	Experimental code to detect unused rids.
-------------------------------------------------------------------- KirKG--*/</comment>
<comment type="line" pos:line="1994" pos:column="1">// REVIEW: KirkG (DGray)  This is gone now, so we should rip it out, yes?</comment>
<cpp:ifdef pos:line="1995" pos:column="1">#<cpp:directive pos:line="1995" pos:column="2">ifdef</cpp:directive> <name pos:line="1995" pos:column="8">ORAPI_RIDCHECK</name></cpp:ifdef>
<cpp:define pos:line="1996" pos:column="1">#<cpp:directive pos:line="1996" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1996" pos:column="9">MsoRegFGetSz</name><parameter_list pos:line="1996" pos:column="21">(<param><type><name pos:line="1996" pos:column="22">rid</name></type></param>,<param><type><name pos:line="1996" pos:column="26">b</name></type></param>,<param><type><name pos:line="1996" pos:column="28">c</name></type></param>,<param><type><name pos:line="1996" pos:column="30">d</name></type></param>)</parameter_list></cpp:macro>	<cpp:value pos:line="1996" pos:column="33">(ORAPI_##rid(), MsoFRegGetSzCore(rid,b,c,d))</cpp:value></cpp:define> 
<macro><name pos:line="1997" pos:column="1">MSOAPI_</name><argument_list pos:line="1997" pos:column="8">(<argument pos:line="1997" pos:column="9">LONG</argument>)</argument_list></macro> <macro><name pos:line="1997" pos:column="15">MsoFRegGetSzCore</name><argument_list pos:line="1997" pos:column="31">(<argument pos:line="1997" pos:column="32">int msorid</argument>, <argument pos:line="1997" pos:column="44">LPDWORD lpType</argument>, <argument pos:line="1997" pos:column="60">LPBYTE lpData</argument>, <argument pos:line="1997" pos:column="75">LPDWORD lpcbData</argument>)</argument_list></macro><empty_stmt pos:line="1997" pos:column="92">;</empty_stmt>
<cpp:endif pos:line="1998" pos:column="1">#<cpp:directive pos:line="1998" pos:column="2">endif</cpp:directive></cpp:endif>


<comment type="block" format="doxygen" pos:line="2001" pos:column="1">/****************************************************************************
	Binary Policy Routines (for Word and Excel)
****************************************************************************/</comment>

<comment type="block" pos:line="2005" pos:column="1">/*---------------------------------------------------------------------------
	MsoPolicyApplyBinary

	Applies policy settings to bitmapped members of a structure.  Stores
	a history list of changes so that policy changes are rolled back and
	don't infect the app's user preference settings in the registry.
-------------------------------------------------------------------JoelDow-*/</comment>	
<macro><name pos:line="2012" pos:column="1">MSOAPI_</name><argument_list pos:line="2012" pos:column="8">(<argument pos:line="2012" pos:column="9">void</argument>)</argument_list></macro> <macro><name pos:line="2012" pos:column="15">MsoPolicyApplyBinary</name><argument_list pos:line="2012" pos:column="35">(<argument pos:line="2012" pos:column="36">void* pvStruct</argument>, <argument pos:line="2012" pos:column="52">int msoridKey</argument>, 
	<argument pos:line="2013" pos:column="9">WORD wcbStruct</argument>, <argument pos:line="2013" pos:column="25">HANDLE* phRestore</argument>)</argument_list></macro><empty_stmt pos:line="2013" pos:column="43">;</empty_stmt>


<comment type="block" pos:line="2016" pos:column="1">/*---------------------------------------------------------------------------
	MsoApplyAppBinarySettings

	Similar in concept to MsoPolicyApplyBinary, this API will apply, on a ONE
	time basis, bits to certain app structures. After it finishes, it deletes
	the key containing the bits. ( msoridKey ) Used for CMW settings.
-------------------------------------------------------------------MattP-*/</comment>	
<macro><name pos:line="2023" pos:column="1">MSOAPI_</name><argument_list pos:line="2023" pos:column="8">(<argument pos:line="2023" pos:column="9">void</argument>)</argument_list></macro> <macro><name pos:line="2023" pos:column="15">MsoApplyAppBinarySettings</name><argument_list pos:line="2023" pos:column="40">(<argument pos:line="2023" pos:column="41">void* pvStruct</argument>, <argument pos:line="2023" pos:column="57">int msoridKey</argument>, 
	<argument pos:line="2024" pos:column="9">WORD wcbStruct</argument>)</argument_list></macro><empty_stmt pos:line="2024" pos:column="24">;</empty_stmt>

<comment type="block" pos:line="2026" pos:column="1">/*---------------------------------------------------------------------------
	MsoPolicyRestoreBinary
	
	"Undoes" previous changes to bitmapped members of a structure to 
	prevent policy settings from infecting a user's configuration
	options in the registry.
-------------------------------------------------------------------JoelDow-*/</comment>	
<macro><name pos:line="2033" pos:column="1">MSOAPI_</name><argument_list pos:line="2033" pos:column="8">(<argument pos:line="2033" pos:column="9">void</argument>)</argument_list></macro> <macro><name pos:line="2033" pos:column="15">MsoPolicyRestoreBinary</name><argument_list pos:line="2033" pos:column="37">(<argument pos:line="2033" pos:column="38">void* pvStruct</argument>, <argument pos:line="2033" pos:column="54">WORD wcbStruct</argument>, <argument pos:line="2033" pos:column="70">HANDLE hRestore</argument>)</argument_list></macro><empty_stmt pos:line="2033" pos:column="86">;</empty_stmt>

<cpp:ifdef pos:line="2035" pos:column="1">#<cpp:directive pos:line="2035" pos:column="2">ifdef</cpp:directive> <name pos:line="2035" pos:column="8">VSMSODEBUG</name></cpp:ifdef>
<comment type="block" pos:line="2036" pos:column="1">/*---------------------------------------------------------------------------
	MsoPolicyDumpBinary
	
	Outputs a list of active policy overrides for the context provided
	in hRestore.  Intended for use in a debug-only status dump.
-------------------------------------------------------------------JoelDow-*/</comment>	

<macro><name pos:line="2043" pos:column="1">MSOAPI_</name><argument_list pos:line="2043" pos:column="8">(<argument pos:line="2043" pos:column="9">void</argument>)</argument_list></macro> <macro><name pos:line="2043" pos:column="15">MsoPolicyDumpBinary</name><argument_list pos:line="2043" pos:column="34">(<argument pos:line="2043" pos:column="35">HANDLE fhOut</argument>, <argument pos:line="2043" pos:column="49">HANDLE hRestore</argument>)</argument_list></macro><empty_stmt pos:line="2043" pos:column="65">;</empty_stmt>
<cpp:endif pos:line="2044" pos:column="1">#<cpp:directive pos:line="2044" pos:column="2">endif</cpp:directive></cpp:endif>


<comment type="block" format="doxygen" pos:line="2047" pos:column="1">/****************************************************************************
	Terminal Server (Hydra) Support/Detection
****************************************************************************/</comment>

<comment type="block" pos:line="2051" pos:column="1">/*------------------------------------------------------------

	MsoFIsTerminalServer

	Old API to detect Hydra.  I'm keeping this function here
	to maintain binary compatibility with all MSO clients.

	IT IS OBSOLETE.  PLEASE DO NOT USE THIS FUNCTION.

	This function will assert and ask everyone to use the 
	new behavior modification API's. However, to maintain 
	some semblance of backward compatibility, we will return 
	assume that what the caller wants to know is whether or
	not this code is running on an AppServer, since that's
	really the only interesting way WTS 4 was used and WTS 5
	hadn't shipped when Office 9 did.

	It's just an incomplete answer, since now there are more
	"flavors" of Terminal Server, and we may want to modify
	our behavior on the Console vs. when we're running with 
	graphics over the wire, etc.

----------------------------------------------- (FrankRon) -*/</comment>
<macro><name pos:line="2074" pos:column="1">MSOAPI_</name><argument_list pos:line="2074" pos:column="8">(<argument pos:line="2074" pos:column="9">BOOL</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="2074" pos:column="15">MsoFIsTerminalServer</name><argument_list pos:line="2074" pos:column="35">(<argument><expr><name pos:line="2074" pos:column="36">void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<comment type="block" pos:line="2078" pos:column="1">/*------------------------------------------------------------

	MsoFTSAppServer

	Use this routine to fork behavior based on whether or not
	we're running on a regular TS App Server machine (console
	or not).  TS-Lite/Remote-Admin and regular non-TS work-
	stations return FALSE here.
----------------------------------------------- (FrankRon) -*/</comment>
<macro><name pos:line="2087" pos:column="1">MSOAPI_</name><argument_list pos:line="2087" pos:column="8">(<argument pos:line="2087" pos:column="9">BOOL</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="2087" pos:column="15">MsoFTSAppServer</name><argument_list pos:line="2087" pos:column="30">(<argument><expr><name pos:line="2087" pos:column="31">void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:line="2089" pos:column="1">/*------------------------------------------------------------

	MsoFEnableComplexGraphics

	Use this routine to fork behavior on animation/sound-
	intensive features (e.g., splashes) to minimize unnecessary 
	graphics "candy."  Basically this is important for Hydra
	systems were we're transmitting lots of graphics bits
	over the wire, but it's also useful if the Shell ever
	implements a "Simplify Graphics" key in their Display
	Properties that may actually be exposed on all systems
----------------------------------------------- (FrankRon) -*/</comment>
<macro><name pos:line="2101" pos:column="1">MSOAPI_</name><argument_list pos:line="2101" pos:column="8">(<argument pos:line="2101" pos:column="9">BOOL</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="2101" pos:column="15">MsoFEnableComplexGraphics</name><argument_list pos:line="2101" pos:column="40">(<argument><expr><name pos:line="2101" pos:column="41">void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:line="2103" pos:column="1">/*------------------------------------------------------------

	MsoFAllowIOD

	Use this routine to determine if Darwin is going to let
	us do an Install-On-Demand. Especially useful for TS.

	Basically, we allow IOD for non-TS systems, TS-Lite/RA,
	or when the user is an admin and the Policy to allow
	remote installs on TS is set.

	Note that usually Darwin will allow an admin to do an 
	install at the console even if the policy is not set,
	but we don't allow this.  Dynamic installation of Office
	is generally not a good idea, and we will respect admin
	policy, but we aren't going to allow admin console install
	without the policy setting.
----------------------------------------------- (FrankRon) -*/</comment>
<macro><name pos:line="2121" pos:column="1">MSOAPI_</name><argument_list pos:line="2121" pos:column="8">(<argument pos:line="2121" pos:column="9">BOOL</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="2121" pos:column="15">MsoFAllowIOD</name><argument_list pos:line="2121" pos:column="27">(<argument><expr><name pos:line="2121" pos:column="28">void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:line="2123" pos:column="1">/*------------------------------------------------------------

	MsoFRemoteUI

	Use this routine if a feature needs to know if it's UI
	is running remotely (as is the case on TS non-Console
	sessions).
----------------------------------------------- (FrankRon) -*/</comment>
<macro><name pos:line="2131" pos:column="1">MSOAPI_</name><argument_list pos:line="2131" pos:column="8">(<argument pos:line="2131" pos:column="9">BOOL</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="2131" pos:column="15">MsoFRemoteUI</name><argument_list pos:line="2131" pos:column="27">(<argument><expr><name pos:line="2131" pos:column="28">void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:line="2133" pos:column="1">/*---------------------------------------------------------------------------
	MsoFIEPolicyAndVersion

	Put the current version of IE in 'plMajor' and 'plMinor, with a zero
	meaning that IE is not currently installed.  Return TRUE is policy is set
	to disable just-in-time installation of IE, FALSE otherwise.
---------------------------------------------------------------- EricSchr -*/</comment>
<macro><name pos:line="2140" pos:column="1">MSOAPI_</name><argument_list pos:line="2140" pos:column="8">(<argument pos:line="2140" pos:column="9">BOOL</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="2140" pos:column="15">MsoFIEPolicyAndVersion</name><argument_list pos:line="2140" pos:column="37">(<argument><expr><name pos:line="2140" pos:column="38">long</name> <op:operator pos:line="2140" pos:column="43">*</op:operator><name pos:line="2140" pos:column="44">plMajor</name></expr></argument>, <argument><expr><name pos:line="2140" pos:column="53">long</name> <op:operator pos:line="2140" pos:column="58">*</op:operator><name pos:line="2140" pos:column="59">plMinor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<comment type="block" pos:line="2143" pos:column="1">/*-----------------------------------------------------------------------------
	MsoFCheckIEVersion

	Return TRUE if we have an IE of at least the version passed in.
	Don't worry about policy or prompting in case it isn't.  MsoFIEPolicyAndVersion()
	and MsoFUseIEFeature() are for that.

-------------------------------------------------------------------- KBrown -*/</comment>
<macro><name pos:line="2151" pos:column="1">MSOAPI_</name><argument_list pos:line="2151" pos:column="8">(<argument pos:line="2151" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="2151" pos:column="15">MsoFCheckIEVersion</name><argument_list pos:line="2151" pos:column="33">(<argument pos:line="2151" pos:column="34">long lMajor</argument>, <argument pos:line="2151" pos:column="47">long lMinor</argument>)</argument_list></macro><empty_stmt pos:line="2151" pos:column="59">;</empty_stmt>

<comment type="block" pos:line="2153" pos:column="1">/*---------------------------------------------------------------------------
	MsoFUseIEFeature

	Return TRUE if the version of IE installed on the machine is high enough
	to use a feature requiring version 'lMajor' and 'lMinor'.  Return
	FALSE otherwise.  Note that 'lMinor' could be a two digit number, so
	that version 4.1 is actually lMajor == 4 and lMinor == 10, since
	lMinor == 1 implies 4.01.  The function will not do a demand
	installation, but it does warn about not having a new enough version
	and about admin disabling.
---------------------------------------------------------------- EricSchr -*/</comment>
<macro><name pos:line="2164" pos:column="1">MSOAPI_</name><argument_list pos:line="2164" pos:column="8">(<argument pos:line="2164" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="2164" pos:column="15">MsoFUseIEFeature</name><argument_list pos:line="2164" pos:column="31">(<argument pos:line="2164" pos:column="32">long lMajor</argument>, <argument pos:line="2164" pos:column="45">long lMinor</argument>)</argument_list></macro><empty_stmt pos:line="2164" pos:column="57">;</empty_stmt>


<comment type="block" pos:line="2167" pos:column="1">/*---------------------------------------------------------------------------
	MsoCheckHEVReg

	Calls the Self-registration routine for the HEV project.
---------------------------------------------------------------- A-GordRo -*/</comment>
<macro><name pos:line="2172" pos:column="1">MSOAPI_</name><argument_list pos:line="2172" pos:column="8">(<argument pos:line="2172" pos:column="9">void</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="2172" pos:column="15">MsoCheckHEVReg</name><argument_list pos:line="2172" pos:column="29">(<argument><expr><name pos:line="2172" pos:column="30">void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:line="2174" pos:column="1">/*-----------------------------------------------------------------------------
	MsoFSupportThisEditLID
	
	return whether the editing of specified lang is supported
-------------------------------------------------------------------- IrfanGo -*/</comment>
<macro><name pos:line="2179" pos:column="1">MSOAPI_</name><argument_list pos:line="2179" pos:column="8">(<argument pos:line="2179" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="2179" pos:column="15">MsoFSupportThisEditLID</name><argument_list pos:line="2179" pos:column="37">(<argument pos:line="2179" pos:column="38">UINT lid</argument>)</argument_list></macro><empty_stmt pos:line="2179" pos:column="47">;</empty_stmt>

<comment type="block" pos:line="2181" pos:column="1">/*-----------------------------------------------------------------------------
	MsoFSupportThisEditBaseLID
	
	return whether the editing of specified lang is supported
-------------------------------------------------------------------- katsun -*/</comment>
<macro><name pos:line="2186" pos:column="1">MSOAPIX_</name><argument_list pos:line="2186" pos:column="9">(<argument pos:line="2186" pos:column="10">BOOL</argument>)</argument_list></macro> <macro><name pos:line="2186" pos:column="16">MsoFSupportThisEditBaseLID</name><argument_list pos:line="2186" pos:column="42">(<argument pos:line="2186" pos:column="43">UINT lid</argument>)</argument_list></macro><empty_stmt pos:line="2186" pos:column="52">;</empty_stmt>

<comment type="block" pos:line="2188" pos:column="1">/*----------------------------------------------------------------------------
	MsoSetInstallingState

	Tell Office that app is starting/finsihing installing components.
-------------------------------------------------------------------- MattP --*/</comment>
<macro><name pos:line="2193" pos:column="1">MSOAPIX_</name><argument_list pos:line="2193" pos:column="9">(<argument pos:line="2193" pos:column="10">BOOL</argument>)</argument_list></macro> <macro><name pos:line="2193" pos:column="16">MsoSetInstallingState</name><argument_list pos:line="2193" pos:column="37">(<argument pos:line="2193" pos:column="38">BOOL fStartInstall</argument>)</argument_list></macro><empty_stmt pos:line="2193" pos:column="57">;</empty_stmt>

<comment type="block" pos:line="2195" pos:column="1">/*----------------------------------------------------------------------------
	MsoFGetInstallingState

	Returns what the current global install state is.
-------------------------------------------------------------------- MattP --*/</comment>
<macro><name pos:line="2200" pos:column="1">MSOAPIX_</name><argument_list pos:line="2200" pos:column="9">(<argument pos:line="2200" pos:column="10">BOOL</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="2200" pos:column="16">MsoFGetInstallingState</name><argument_list pos:line="2200" pos:column="38">(<argument><expr><name pos:line="2200" pos:column="39">void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:line="2202" pos:column="1">/*-----------------------------------------------------------------------------
	MsoFSupportFEEditLID - 

	return fTrue if one of the FE lids are among the editing languages 
	specified by the langtool
------------------------------------------------------------------ JeffreyK -*/</comment>
<macro><name pos:line="2208" pos:column="1">MSOAPI_</name><argument_list pos:line="2208" pos:column="8">(<argument pos:line="2208" pos:column="9">BOOL</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="2208" pos:column="15">MsoFSupportFEEditLID</name><argument_list pos:line="2208" pos:column="35">(<argument><expr><name pos:line="2208" pos:column="36">void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:line="2210" pos:column="1">/*-----------------------------------------------------------------------------
	MsoFSupportFEEditBaseLID - 

	return fTrue if one of the FE lids are among the editing languages 
	specified by the langtool
------------------------------------------------------------------ katsun -*/</comment>
<macro><name pos:line="2216" pos:column="1">MSOAPIX_</name><argument_list pos:line="2216" pos:column="9">(<argument pos:line="2216" pos:column="10">BOOL</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="2216" pos:column="16">MsoFSupportFEEditBaseLID</name><argument_list pos:line="2216" pos:column="40">(<argument><expr><name pos:line="2216" pos:column="41">void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:line="2218" pos:column="1">/*-----------------------------------------------------------------------------
	MsoGimmeLocalizedLibrary
	
	Extended entry-point for MsoLoadLocalizedLibraryFull -- allows user to
	pass flags requesting check of file system before calling Darwin.  Intended
	for use in boot optimization.

	Supports msotcgfProvide (same behavior as MsoLoadLocalizedLibraryFull,
	and msotcogfProvide | msotcogfSearchFirst (check file system).
----------------------------------------------------------------- JoelDow ---*/</comment>
<macro><name pos:line="2228" pos:column="1">MSOAPI_</name><argument_list pos:line="2228" pos:column="8">(<argument pos:line="2228" pos:column="9">HMODULE</argument>)</argument_list></macro> <macro><name pos:line="2228" pos:column="18">MsoGimmeLocalizedLibrary</name><argument_list pos:line="2228" pos:column="42">(<argument pos:line="2228" pos:column="43">msofidT fid</argument>, <argument pos:line="2228" pos:column="56">LCID *plcid</argument>,
	<argument pos:line="2229" pos:column="9">const DWORD dwFlags</argument>, <argument pos:line="2229" pos:column="30">WCHAR *wzFullPath</argument>, <argument pos:line="2229" pos:column="49">DWORD dwGimmeFlags</argument>)</argument_list></macro><empty_stmt pos:line="2229" pos:column="68">;</empty_stmt>

<comment type="block" pos:line="2231" pos:column="1">/*----------------------------------------------------------------------------
	Find out version of the CLSID's OLE server and append it to the given string
	in the form of "#version=X.X.X.X"
---------------------------------------------------------------- vadimc ----*/</comment>
<macro><name pos:line="2235" pos:column="1">MSOAPI_</name><argument_list pos:line="2235" pos:column="8">(<argument pos:line="2235" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="2235" pos:column="15">MsoFAppendCodebaseVer</name><argument_list pos:line="2235" pos:column="36">(<argument pos:line="2235" pos:column="37">const CLSID* pclsid</argument>, <argument pos:line="2235" pos:column="58">WCHAR* wzBuff</argument>, <argument pos:line="2235" pos:column="73">int cchMax</argument>)</argument_list></macro><empty_stmt pos:line="2235" pos:column="84">;</empty_stmt>

<comment type="block" pos:line="2237" pos:column="1">/*---------------------------------------------------------------------------------------------------
	MsoFOsChange() is designed to let the apps tell minor differences in the OS since they last booted, i.e. 
	a new service pack or minor version.  Note that these structures will be identical the very first time 
	this API is called by anyapp after installation.
	   hmsoinst may be NULL. If so, wzHostName must be non-NULL and must give the short name
	of the application, i.e. the name passed to MsoFInitOffice.  If hmsoinst is non-NULL,
	wzHostName may be NULL.  This scheme is designed to allow apps to call this function
	before calling MsoFInitOffice if necessary and in that case an HMSOINST will not be
	available.
	   If poviOld is non-NULL, it will be filled with the OSVERSIONINFOA structure cached for this application
	the last time this API was called.  If this is the first time the API was called, it will be filled with
	current OSVERSIONINFOA information.
	   If poviNew is non-NULL, it will be filled with the current return from GetVersionExA, i.e. the current 
	OSVERSIONINFOA information.  
	Either or both of poviOld and poviNew may be NULL if that information is not needed.

	Returns TRUE if anything has changed in the OSVERSIONINFOA structure between the 
	cached copy	from the last time this API was called by this appplication and this call.
-------------------------------------------------------------------------- VadimC ------------------*/</comment>
<macro><name pos:line="2256" pos:column="1">MSOAPIX_</name><argument_list pos:line="2256" pos:column="9">(<argument pos:line="2256" pos:column="10">BOOL</argument>)</argument_list></macro> <macro><name pos:line="2256" pos:column="16">MsoFOsChange</name><argument_list pos:line="2256" pos:column="28">(<argument pos:line="2256" pos:column="29">const HMSOINST hmsoinst</argument>, <argument pos:line="2256" pos:column="54">const WCHAR* wzHostName</argument>, 
							<argument pos:line="2257" pos:column="57">OSVERSIONINFOA* poviOld</argument>, <argument pos:line="2257" pos:column="82">OSVERSIONINFOA* poviNew</argument>)</argument_list></macro><empty_stmt pos:line="2257" pos:column="106">;</empty_stmt>

<comment type="block" pos:line="2259" pos:column="1">/*---------------------------------------------------------------------------------------------------
	Returns	TRUE if the platform changed from VER_PLATFORM_WIN32_WINDOWS to VER_PLATFORM_WIN32_NT 
	and the major version of NT is greater than or equal to 5, i.e. we upgraded from Win9X to NT 5.0.
-------------------------------------------------------------------------- VadimC ------------------*/</comment>
<macro><name pos:line="2263" pos:column="1">MSOAPIX_</name><argument_list pos:line="2263" pos:column="9">(<argument pos:line="2263" pos:column="10">BOOL</argument>)</argument_list></macro> <macro><name pos:line="2263" pos:column="16">MsoFOsPlatformChanged</name><argument_list pos:line="2263" pos:column="37">(<argument pos:line="2263" pos:column="38">const HMSOINST hmsoinst</argument>, <argument pos:line="2263" pos:column="63">const WCHAR* wzHostName</argument>)</argument_list></macro><empty_stmt pos:line="2263" pos:column="87">;</empty_stmt>


<comment type="block" pos:line="2266" pos:column="1">/*----------------------------------------------------------------------------
 MSOAPI_(BOOL) MsoFSystemPolicyEnabled(int msorid) 
 Returns TRUE if Windows2000 policy corresponding to the msorid is enabled, 
 FALSE if disabled or not configured. 
 
 The following msorids are currently passed to this macro:
  	msoridNoDrives
  	msoridRestrictRun
  	msoridNoRecentDocsHistory
  	msoridNoPlacesBar 
  	msoridNoBackButton
  	msoridNoFileMru
  	msoridNoNetConnectDisconnect  

 All these msorids have an Orapi DEFAULT-VALUE-DATA of 0 (false).

------------------------------------------------------------------ AnzhelN  */</comment>
<cpp:define pos:line="2283" pos:column="1">#<cpp:directive pos:line="2283" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="2283" pos:column="9">MsoFSystemPolicyEnabled</name><parameter_list pos:line="2283" pos:column="32">(<param><type><name pos:line="2283" pos:column="33">msorid</name></type></param>)</parameter_list></cpp:macro>	<cpp:value pos:line="2283" pos:column="41">MsoDwRegGetDw(msorid)</cpp:value></cpp:define>


<comment type="block" pos:line="2286" pos:column="1">/*----------------------------------------------------------------------------
 MSOAPI_(BOOL) MsoFCanBrowse(void)

 Returns TRUE if  default browser is allowed to run by 
 "Run only allowed applications" Windows2000 policy.

 ----------------------------------------------------------------- AnzhelN  */</comment>
 <macro><name pos:line="2293" pos:column="2">MSOAPI_</name><argument_list pos:line="2293" pos:column="9">(<argument pos:line="2293" pos:column="10">BOOL</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="2293" pos:column="16">MsoFCanBrowse</name><argument_list pos:line="2293" pos:column="29">(<argument><expr><name pos:line="2293" pos:column="30">void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  

<comment type="block" pos:line="2295" pos:column="1">/*----------------------------------------------------------------------------
MSOAPI_(BOOL) MsoFCanLaunch(WCHAR * wzAppName)

This API checks the list of allowed apps for wzAppName. Returns TRUE if it's on 
the list, FALSE otherwize
------------------------------------------------------------------ AnzhelN -*/</comment>
<macro><name pos:line="2301" pos:column="1">MSOAPI_</name><argument_list pos:line="2301" pos:column="8">(<argument pos:line="2301" pos:column="9">BOOL</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="2301" pos:column="15">MsoFCanLaunch</name><argument_list pos:line="2301" pos:column="28">(<argument><expr><name pos:line="2301" pos:column="29">WCHAR</name> <op:operator pos:line="2301" pos:column="35">*</op:operator> <name pos:line="2301" pos:column="37">wzAppName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line" pos:line="2303" pos:column="1">//AnzhelN: ERROR_RESTRICTED_APP is an internally defined system error which is </comment>
<comment type="line" pos:line="2304" pos:column="1">//returned by GetLastError() in case if ShellExecute or ShellExecuteEx failed </comment>
<comment type="line" pos:line="2305" pos:column="1">//for the reason of RestrictRun system policy</comment>
<cpp:define pos:line="2306" pos:column="1">#<cpp:directive pos:line="2306" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="2306" pos:column="9">ERROR_RESTRICTED_APP</name></cpp:macro> <cpp:value pos:line="2306" pos:column="30">((UINT)-1)</cpp:value></cpp:define>

<comment type="block" pos:line="2308" pos:column="1">/*----------------------------------------------------------------------------
MSOAPI_(void) MsoSystemPolicyAlert(void);

Displays an Alert message analogious to the system Restrictions alert for
System Policy restricted applications
------------------------------------------------------------------ AnzhelN -*/</comment>
<macro><name pos:line="2314" pos:column="1">MSOAPI_</name><argument_list pos:line="2314" pos:column="8">(<argument pos:line="2314" pos:column="9">void</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="2314" pos:column="15">MsoSystemPolicyAlert</name><argument_list pos:line="2314" pos:column="35">(<argument><expr><name pos:line="2314" pos:column="36">void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:line="2316" pos:column="1">/*----------------------------------------------------------------------------
MSOAPI_(WCHAR*) MsoWzGetAppNameFromPath(WCHAR * wzAppPath)

Given application path wzAppPath as stored in the registry 
returns its name without a path
------------------------------------------------------------------ AnzhelN -*/</comment>
<macro><name pos:line="2322" pos:column="1">MSOAPI_</name><argument_list pos:line="2322" pos:column="8">(<argument pos:line="2322" pos:column="9">WCHAR*</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="2322" pos:column="17">MsoWzGetAppNameFromPath</name><argument_list pos:line="2322" pos:column="40">(<argument><expr><name pos:line="2322" pos:column="41">WCHAR</name> <op:operator pos:line="2322" pos:column="47">*</op:operator> <name pos:line="2322" pos:column="49">wzAppPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:line="2324" pos:column="1">/*----------------------------------------------------------------------------
MSOAPI_(BOOL) MsoFHistoryPolicyEnabled(void);

Checks if NoRecentDocsHistory is enabled. Called in FrontPage.
------------------------------------------------------------------ AnzhelN -*/</comment>
<macro><name pos:line="2329" pos:column="1">MSOAPI_</name><argument_list pos:line="2329" pos:column="8">(<argument pos:line="2329" pos:column="9">BOOL</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="2329" pos:column="15">MsoFHistoryPolicyEnabled</name><argument_list pos:line="2329" pos:column="39">(<argument><expr><name pos:line="2329" pos:column="40">void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:line="2331" pos:column="1">/*---------------------------------------------------------------------------
MSOAPI_(VOID) MsoSetPolicyTooltip(unsigned int tmc)

The tooltip text is from 
HKEY_CURRENT_USER\Software\Policies\Microsoft\Office\10.0\Common\
Toolbars\AttemptDisabledActionMessage
which is set by Admin through the policy editor
The tooltip is set only if EnableWPFeatures regkey is 1. 
For SDM dialogs only.
------------------------------------------------------------------ AnzhelN -*/</comment>
<macro><name pos:line="2341" pos:column="1">MSOAPI_</name><argument_list pos:line="2341" pos:column="8">(<argument pos:line="2341" pos:column="9">VOID</argument>)</argument_list></macro> <macro><name pos:line="2341" pos:column="15">MsoSetPolicyTooltip</name><argument_list pos:line="2341" pos:column="34">(<argument pos:line="2341" pos:column="35">unsigned int tmc</argument>)</argument_list></macro><empty_stmt pos:line="2341" pos:column="52">;</empty_stmt>

<comment type="block" pos:line="2343" pos:column="1">/*-----------------------------------------------------------------------------
	MsoEnsureValidDocObj

	make sure docobj.dll (for ie4) or actxprxy.dll (for ie5) are correctly
	registered
-------------------------------------------------------------------- HAILIU -*/</comment>
<macro><name pos:line="2349" pos:column="1">MSOAPI_</name><argument_list pos:line="2349" pos:column="8">(<argument pos:line="2349" pos:column="9">VOID</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="2349" pos:column="15">MsoEnsureValidDocObj</name><argument_list pos:line="2349" pos:column="35">(<argument><expr><name pos:line="2349" pos:column="36">void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:line="2351" pos:column="1">/*-----------------------------------------------------------------------------
MSOAPI_(BOOL) MsoFQueryPhotoDraw(UINT32 grfqphd)

Asks various interesting things about the installed PhotoDraw and image
editing.
* msofqphdMayEditPictures asks whether or not PhotoDraw should edit raster
  images from Office Drawing.  It's just a thin wrapper on the Gimme API
  to verify PhotoDraw is available (at least advertised.)
------------------------------------------------------------------- JustinV -*/</comment>
<cpp:define pos:line="2360" pos:column="1">#<cpp:directive pos:line="2360" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="2360" pos:column="9">msofqphdMayEditPictures</name></cpp:macro> <cpp:value pos:line="2360" pos:column="33">(1&lt;&lt;0)</cpp:value></cpp:define>
<macro><name pos:line="2361" pos:column="1">MSOAPI_</name><argument_list pos:line="2361" pos:column="8">(<argument pos:line="2361" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="2361" pos:column="15">MsoFQueryPhotoDraw</name><argument_list pos:line="2361" pos:column="33">(<argument pos:line="2361" pos:column="34">UINT32 grfqphd</argument>)</argument_list></macro><empty_stmt pos:line="2361" pos:column="49">;</empty_stmt>

<cpp:endif pos:line="2363" pos:column="1">#<cpp:directive pos:line="2363" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="2363" pos:column="8">// MSOTC_H</comment>
</unit>
