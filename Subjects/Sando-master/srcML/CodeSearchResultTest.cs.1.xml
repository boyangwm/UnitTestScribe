<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Search Engine\SearchEngine.UnitTests\CodeSearchResultTest.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">NUnit</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">Framework</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">Sando</name><op:operator pos:line="2" pos:column="12">.</op:operator><name pos:line="2" pos:column="13">ExtensionContracts</name><op:operator pos:line="2" pos:column="31">.</op:operator><name pos:line="2" pos:column="32">ProgramElementContracts</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Sando</name><op:operator pos:line="3" pos:column="12">.</op:operator><name pos:line="3" pos:column="13">ExtensionContracts</name><op:operator pos:line="3" pos:column="31">.</op:operator><name pos:line="3" pos:column="32">ResultsReordererContracts</name></name>;</using>

<namespace pos:line="5" pos:column="1">namespace <name><name pos:line="5" pos:column="11">Sando</name><op:operator pos:line="5" pos:column="16">.</op:operator><name pos:line="5" pos:column="17">SearchEngine</name><op:operator pos:line="5" pos:column="29">.</op:operator><name pos:line="5" pos:column="30">UnitTests</name></name>
<block pos:line="6" pos:column="1">{
    <class><attribute pos:line="7" pos:column="5">[<expr><name pos:line="7" pos:column="6">TestFixture</name></expr>]</attribute>
    <specifier pos:line="8" pos:column="5">public</specifier> class <name pos:line="8" pos:column="18">CodeSearchResultTest</name>
    <block pos:line="9" pos:column="5">{
        <function><type><attribute pos:line="10" pos:column="9">[<expr><name pos:line="10" pos:column="10">TestCase</name></expr>]</attribute>
        <specifier pos:line="11" pos:column="9">public</specifier> <name pos:line="11" pos:column="16">void</name></type> <name pos:line="11" pos:column="21">FixSnipTabTest</name><parameter_list pos:line="11" pos:column="35">()</parameter_list>
        <block pos:line="12" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="13" pos:column="13">var</name></type> <name pos:line="13" pos:column="17">stuff</name> <init pos:line="13" pos:column="23">= <expr><lit:literal type="string" pos:line="13" pos:column="25">"	public void yo()"</lit:literal><op:operator pos:line="13" pos:column="50">+</op:operator>
                        <lit:literal type="string" pos:line="14" pos:column="25">"\n\t\tsasdfsadf"</lit:literal><op:operator pos:line="14" pos:column="42">+</op:operator>
                        <lit:literal type="string" pos:line="15" pos:column="25">"\n\t\tasdfasdf\n"</lit:literal><op:operator pos:line="15" pos:column="43">+</op:operator>
                        <lit:literal type="string" pos:line="16" pos:column="25">"    }"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="17" pos:column="13">string</name></type> <name pos:line="17" pos:column="20">fixSnip</name> <init pos:line="17" pos:column="28">= <expr><call><name><name pos:line="17" pos:column="30">CodeSearchResultInstance</name><op:operator pos:line="17" pos:column="54">.</op:operator><name pos:line="17" pos:column="55">SourceToSnippet</name></name><argument_list pos:line="17" pos:column="70">(<argument><expr><name pos:line="17" pos:column="71">stuff</name></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="78">CodeSearchResult</name><op:operator pos:line="17" pos:column="94">.</op:operator><name pos:line="17" pos:column="95">DefaultSnippetSize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="18" pos:column="13">Assert</name><op:operator pos:line="18" pos:column="19">.</op:operator><name pos:line="18" pos:column="20">IsTrue</name></name><argument_list pos:line="18" pos:column="26">(<argument><expr><call><name><name pos:line="18" pos:column="27">fixSnip</name><op:operator pos:line="18" pos:column="34">.</op:operator><name pos:line="18" pos:column="35">Equals</name></name><argument_list pos:line="18" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="18" pos:column="42">"public void yo()"</lit:literal><op:operator pos:line="18" pos:column="60">+</op:operator>
                                         <lit:literal type="string" pos:line="19" pos:column="42">"\n    sasdfsadf"</lit:literal><op:operator pos:line="19" pos:column="59">+</op:operator>
                                         <lit:literal type="string" pos:line="20" pos:column="42">"\n    asdfasdf\n}\n"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="23" pos:column="9">[<expr><name pos:line="23" pos:column="10">TestCase</name></expr>]</attribute>
        <specifier pos:line="24" pos:column="9">public</specifier> <name pos:line="24" pos:column="16">void</name></type> <name pos:line="24" pos:column="21">FixSnipSpacesTest</name><parameter_list pos:line="24" pos:column="38">()</parameter_list>
        <block pos:line="25" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="26" pos:column="13">var</name></type> <name pos:line="26" pos:column="17">stuff</name> <init pos:line="26" pos:column="23">= <expr><lit:literal type="string" pos:line="26" pos:column="25">"      public void yo()"</lit:literal><op:operator pos:line="26" pos:column="49">+</op:operator>
                        <lit:literal type="string" pos:line="27" pos:column="25">"\n            sasdfsadf"</lit:literal><op:operator pos:line="27" pos:column="50">+</op:operator>
                        <lit:literal type="string" pos:line="28" pos:column="25">"\n            asdfasdf\n"</lit:literal> <op:operator pos:line="28" pos:column="52">+</op:operator>
                        <lit:literal type="string" pos:line="29" pos:column="25">"      }"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="30" pos:column="13">string</name></type> <name pos:line="30" pos:column="20">fixSnip</name> <init pos:line="30" pos:column="28">= <expr><call><name><name pos:line="30" pos:column="30">CodeSearchResultInstance</name><op:operator pos:line="30" pos:column="54">.</op:operator><name pos:line="30" pos:column="55">SourceToSnippet</name></name><argument_list pos:line="30" pos:column="70">(<argument><expr><name pos:line="30" pos:column="71">stuff</name></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="78">CodeSearchResult</name><op:operator pos:line="30" pos:column="94">.</op:operator><name pos:line="30" pos:column="95">DefaultSnippetSize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="31" pos:column="13">Assert</name><op:operator pos:line="31" pos:column="19">.</op:operator><name pos:line="31" pos:column="20">IsTrue</name></name><argument_list pos:line="31" pos:column="26">(<argument><expr><call><name><name pos:line="31" pos:column="27">fixSnip</name><op:operator pos:line="31" pos:column="34">.</op:operator><name pos:line="31" pos:column="35">Equals</name></name><argument_list pos:line="31" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="31" pos:column="42">"public void yo()\n      sasdfsadf\n      asdfasdf\n}\n"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>


        <function><type><attribute pos:line="35" pos:column="9">[<expr><name pos:line="35" pos:column="10">TestCase</name></expr>]</attribute>
        <specifier pos:line="36" pos:column="9">public</specifier> <name pos:line="36" pos:column="16">void</name></type> <name pos:line="36" pos:column="21">FixSnipSpacesTwoTest</name><parameter_list pos:line="36" pos:column="41">()</parameter_list>
        <block pos:line="37" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="38" pos:column="13">var</name></type> <name pos:line="38" pos:column="17">stuff</name> <init pos:line="38" pos:column="23">= <expr><lit:literal type="string" pos:line="38" pos:column="25">"\t\tpublic void yo()"</lit:literal> <op:operator pos:line="38" pos:column="48">+</op:operator>
                        <lit:literal type="string" pos:line="39" pos:column="25">"\n\t\t{"</lit:literal> <op:operator pos:line="39" pos:column="35">+</op:operator>
                        <lit:literal type="string" pos:line="40" pos:column="25">"\n\t\t\tasdfasdf\n"</lit:literal><op:operator pos:line="40" pos:column="45">+</op:operator>
                        <lit:literal type="string" pos:line="41" pos:column="25">"\t\t}"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="42" pos:column="13">string</name></type> <name pos:line="42" pos:column="20">fixSnip</name> <init pos:line="42" pos:column="28">= <expr><call><name><name pos:line="42" pos:column="30">CodeSearchResultInstance</name><op:operator pos:line="42" pos:column="54">.</op:operator><name pos:line="42" pos:column="55">SourceToSnippet</name></name><argument_list pos:line="42" pos:column="70">(<argument><expr><name pos:line="42" pos:column="71">stuff</name></expr></argument>, <argument><expr><name><name pos:line="42" pos:column="78">CodeSearchResult</name><op:operator pos:line="42" pos:column="94">.</op:operator><name pos:line="42" pos:column="95">DefaultSnippetSize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="43" pos:column="13">Assert</name><op:operator pos:line="43" pos:column="19">.</op:operator><name pos:line="43" pos:column="20">IsTrue</name></name><argument_list pos:line="43" pos:column="26">(<argument><expr><call><name><name pos:line="43" pos:column="27">fixSnip</name><op:operator pos:line="43" pos:column="34">.</op:operator><name pos:line="43" pos:column="35">Equals</name></name><argument_list pos:line="43" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="43" pos:column="42">"public void yo()\n{\n    asdfasdf\n}\n"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="46" pos:column="9">[<expr><name pos:line="46" pos:column="10">TestCase</name></expr>]</attribute>
        <specifier pos:line="47" pos:column="9">public</specifier> <name pos:line="47" pos:column="16">void</name></type> <name pos:line="47" pos:column="21">FixNoSpaceOnFirst</name><parameter_list pos:line="47" pos:column="38">()</parameter_list>
        <block pos:line="48" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="49" pos:column="13">var</name></type> <name pos:line="49" pos:column="17">stuff</name> <init pos:line="49" pos:column="23">= <expr><lit:literal type="string" pos:line="49" pos:column="25">"public void yo()"</lit:literal> <op:operator pos:line="49" pos:column="44">+</op:operator>
                        <lit:literal type="string" pos:line="50" pos:column="25">"\n\t{"</lit:literal> <op:operator pos:line="50" pos:column="33">+</op:operator>
                        <lit:literal type="string" pos:line="51" pos:column="25">"\n\t\tasdfasdf\n"</lit:literal><op:operator pos:line="51" pos:column="43">+</op:operator>
                        <lit:literal type="string" pos:line="52" pos:column="25">"\t}"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="53" pos:column="13">string</name></type> <name pos:line="53" pos:column="20">fixSnip</name> <init pos:line="53" pos:column="28">= <expr><call><name><name pos:line="53" pos:column="30">CodeSearchResultInstance</name><op:operator pos:line="53" pos:column="54">.</op:operator><name pos:line="53" pos:column="55">SourceToSnippet</name></name><argument_list pos:line="53" pos:column="70">(<argument><expr><name pos:line="53" pos:column="71">stuff</name></expr></argument>, <argument><expr><name><name pos:line="53" pos:column="78">CodeSearchResult</name><op:operator pos:line="53" pos:column="94">.</op:operator><name pos:line="53" pos:column="95">DefaultSnippetSize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="54" pos:column="13">Assert</name><op:operator pos:line="54" pos:column="19">.</op:operator><name pos:line="54" pos:column="20">IsTrue</name></name><argument_list pos:line="54" pos:column="26">(<argument><expr><call><name><name pos:line="54" pos:column="27">fixSnip</name><op:operator pos:line="54" pos:column="34">.</op:operator><name pos:line="54" pos:column="35">Equals</name></name><argument_list pos:line="54" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="54" pos:column="42">"public void yo()\n{\n    asdfasdf\n}\n"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="57" pos:column="9">//List&lt;Monster&gt; monsterlist;</comment>

        <function><type><attribute pos:line="59" pos:column="9">[<expr><name pos:line="59" pos:column="10">TestCase</name></expr>]</attribute>
        <specifier pos:line="60" pos:column="9">public</specifier> <name pos:line="60" pos:column="16">void</name></type> <name pos:line="60" pos:column="21">FixFieldsSpace</name><parameter_list pos:line="60" pos:column="35">()</parameter_list>
        <block pos:line="61" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="62" pos:column="13">var</name></type> <name pos:line="62" pos:column="17">stuff</name> <init pos:line="62" pos:column="23">= <expr><lit:literal type="string" pos:line="62" pos:column="25">"List&lt;Monster&gt; monsterlist;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="63" pos:column="13">string</name></type> <name pos:line="63" pos:column="20">fixSnip</name> <init pos:line="63" pos:column="28">= <expr><call><name><name pos:line="63" pos:column="30">CodeSearchResultInstance</name><op:operator pos:line="63" pos:column="54">.</op:operator><name pos:line="63" pos:column="55">SourceToSnippet</name></name><argument_list pos:line="63" pos:column="70">(<argument><expr><name pos:line="63" pos:column="71">stuff</name></expr></argument>, <argument><expr><name><name pos:line="63" pos:column="78">CodeSearchResult</name><op:operator pos:line="63" pos:column="94">.</op:operator><name pos:line="63" pos:column="95">DefaultSnippetSize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="64" pos:column="13">Assert</name><op:operator pos:line="64" pos:column="19">.</op:operator><name pos:line="64" pos:column="20">IsTrue</name></name><argument_list pos:line="64" pos:column="26">(<argument><expr><call><name><name pos:line="64" pos:column="27">fixSnip</name><op:operator pos:line="64" pos:column="34">.</op:operator><name pos:line="64" pos:column="35">Equals</name></name><argument_list pos:line="64" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="64" pos:column="42">"List&lt;Monster&gt; monsterlist;\n"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

<decl_stmt><decl><type><specifier pos:line="67" pos:column="1">private</specifier> <name pos:line="67" pos:column="9">string</name></type> <name pos:line="67" pos:column="16">input</name> <init pos:line="67" pos:column="22">= 
<expr><lit:literal type="string" pos:line="68" pos:column="1">"        public virtual List&lt;CodeSearchResult&gt; Search(string searchString, bool rerunWithWildcardIfNoResults = false)\n"</lit:literal><op:operator pos:line="68" pos:column="121">+</op:operator>
<lit:literal type="string" pos:line="69" pos:column="1">"		{\n"</lit:literal><op:operator pos:line="69" pos:column="21">+</op:operator>
<lit:literal type="string" pos:line="70" pos:column="1">"			Contract.Requires(String.IsNullOrWhiteSpace(searchString), \"CodeSearcher:Search - searchString cannot be null or an empty string!\");\n"</lit:literal><op:operator pos:line="70" pos:column="162">+</op:operator>
<lit:literal type="string" pos:line="71" pos:column="1">"            var searchCriteria = CriteriaBuilder.GetBuilder().AddSearchString(searchString).GetCriteria();\n"</lit:literal><op:operator pos:line="71" pos:column="111">+</op:operator>
<lit:literal type="string" pos:line="72" pos:column="1">"		}\n"</lit:literal></expr></init></decl>
;</decl_stmt>


        <function><type><attribute pos:line="76" pos:column="9">[<expr><name pos:line="76" pos:column="10">TestCase</name></expr>]</attribute>
        <specifier pos:line="77" pos:column="9">public</specifier> <name pos:line="77" pos:column="16">void</name></type> <name pos:line="77" pos:column="21">FixSpacesDifferentCase</name><parameter_list pos:line="77" pos:column="43">()</parameter_list>
        <block pos:line="78" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="79" pos:column="13">string</name></type> <name pos:line="79" pos:column="20">fixSnip</name> <init pos:line="79" pos:column="28">= <expr><call><name><name pos:line="79" pos:column="30">CodeSearchResultInstance</name><op:operator pos:line="79" pos:column="54">.</op:operator><name pos:line="79" pos:column="55">SourceToSnippet</name></name><argument_list pos:line="79" pos:column="70">(<argument><expr><name pos:line="79" pos:column="71">input</name></expr></argument>, <argument><expr><name><name pos:line="79" pos:column="78">CodeSearchResult</name><op:operator pos:line="79" pos:column="94">.</op:operator><name pos:line="79" pos:column="95">DefaultSnippetSize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="80" pos:column="13">Assert</name><op:operator pos:line="80" pos:column="19">.</op:operator><name pos:line="80" pos:column="20">IsTrue</name></name><argument_list pos:line="80" pos:column="26">(<argument><expr><call><name><name pos:line="80" pos:column="27">fixSnip</name><op:operator pos:line="80" pos:column="34">.</op:operator><name pos:line="80" pos:column="35">Equals</name></name><argument_list pos:line="80" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="80" pos:column="42">"public virtual List&lt;CodeSearchResult&gt; Search(string searchString, bool rerunWithWildc...\n"</lit:literal><op:operator pos:line="80" pos:column="134">+</op:operator>
                <lit:literal type="string" pos:line="81" pos:column="17">"{\n"</lit:literal><op:operator pos:line="81" pos:column="22">+</op:operator>
<lit:literal type="string" pos:line="82" pos:column="1">"    Contract.Requires(String.IsNullOrWhiteSpace(searchString), \"CodeSearcher:Search -...\n"</lit:literal><op:operator pos:line="82" pos:column="94">+</op:operator>
<lit:literal type="string" pos:line="83" pos:column="1">"    var searchCriteria = CriteriaBuilder.GetBuilder().AddSearchString(searchString).G...\n"</lit:literal><op:operator pos:line="83" pos:column="93">+</op:operator>
                <lit:literal type="string" pos:line="84" pos:column="17">"}\n"</lit:literal></expr></argument>
                )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>


        <decl_stmt><decl><type><specifier pos:line="89" pos:column="9">private</specifier> <name pos:line="89" pos:column="17">string</name></type> <name pos:line="89" pos:column="24">tab</name> <init pos:line="89" pos:column="28">=
<expr><lit:literal type="string" pos:line="90" pos:column="1">@"        protected virtual void Layout(bool continueLayout)
        {
            if (Graph == null || Graph.VertexCount == 0 || !LayoutAlgorithmFactory.IsValidAlgorithm(LayoutAlgorithmType) || !CanLayout)
                return; //no graph to layout, or wrong layout algorithm
        }
"</lit:literal></expr></init></decl>;</decl_stmt>

        <function><type><attribute pos:line="97" pos:column="9">[<expr><name pos:line="97" pos:column="10">TestCase</name></expr>]</attribute>
        <specifier pos:line="98" pos:column="9">public</specifier> <name pos:line="98" pos:column="16">void</name></type> <name pos:line="98" pos:column="21">FixAnotherWeirdCase</name><parameter_list pos:line="98" pos:column="40">()</parameter_list>
        <block pos:line="99" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="100" pos:column="13">string</name></type> <name pos:line="100" pos:column="20">fixSnip</name> <init pos:line="100" pos:column="28">= <expr><call><name><name pos:line="100" pos:column="30">CodeSearchResultInstance</name><op:operator pos:line="100" pos:column="54">.</op:operator><name pos:line="100" pos:column="55">SourceToSnippet</name></name><argument_list pos:line="100" pos:column="70">(<argument><expr><name pos:line="100" pos:column="71">tab</name></expr></argument>, <argument><expr><name><name pos:line="100" pos:column="76">CodeSearchResult</name><op:operator pos:line="100" pos:column="92">.</op:operator><name pos:line="100" pos:column="93">DefaultSnippetSize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="101" pos:column="13">Assert</name><op:operator pos:line="101" pos:column="19">.</op:operator><name pos:line="101" pos:column="20">IsTrue</name></name><argument_list pos:line="101" pos:column="26">(<argument><expr><call><name><name pos:line="101" pos:column="27">fixSnip</name><op:operator pos:line="101" pos:column="34">.</op:operator><name pos:line="101" pos:column="35">Equals</name></name><argument_list pos:line="101" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="101" pos:column="42">"protected virtual void Layout(bool continueLayout)\r\n"</lit:literal> <op:operator pos:line="101" pos:column="99">+</op:operator>
                <lit:literal type="string" pos:line="102" pos:column="17">"{\r\n"</lit:literal> <op:operator pos:line="102" pos:column="25">+</op:operator>
<lit:literal type="string" pos:line="103" pos:column="1">"    if (Graph == null || Graph.VertexCount == 0 || !LayoutAlgorithmFactory.IsValidAlg...\n"</lit:literal> <op:operator pos:line="103" pos:column="94">+</op:operator>
<lit:literal type="string" pos:line="104" pos:column="1">"        return; //no graph to layout, or wrong layout algorithm\r\n"</lit:literal><op:operator pos:line="104" pos:column="70">+</op:operator>
                <lit:literal type="string" pos:line="105" pos:column="17">"}\r\n"</lit:literal></expr></argument> 
                )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <decl_stmt><decl><type><specifier pos:line="109" pos:column="9">private</specifier> <name pos:line="109" pos:column="17">CodeSearchResult</name></type> <name pos:line="109" pos:column="34">CodeSearchResultInstance</name> <init pos:line="109" pos:column="59">= <expr><op:operator pos:line="109" pos:column="61">new</op:operator> <call><name pos:line="109" pos:column="65">CodeSearchResult</name><argument_list pos:line="109" pos:column="81">(<argument><expr><call><name><name pos:line="109" pos:column="82">Sando</name><op:operator pos:line="109" pos:column="87">.</op:operator><name pos:line="109" pos:column="88">UnitTestHelpers</name><op:operator pos:line="109" pos:column="103">.</op:operator><name pos:line="109" pos:column="104">SampleProgramElementFactory</name><op:operator pos:line="109" pos:column="131">.</op:operator><name pos:line="109" pos:column="132">GetSampleMethodElement</name></name><argument_list pos:line="109" pos:column="154">()</argument_list></call></expr></argument>,<argument><expr><lit:literal type="number" pos:line="109" pos:column="157">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    }</block></class>
}</block></namespace>
</unit>
