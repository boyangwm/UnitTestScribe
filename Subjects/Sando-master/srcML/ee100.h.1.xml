<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="D:\Research\Subjects\Sando-master\LIBS\Extensions\inc\ee100.h" pos:tabs="8" pos:line="1" pos:column="1">

<comment type="block" pos:line="3" pos:column="1">/* this ALWAYS GENERATED file contains the definitions for the interfaces */</comment>


 <comment type="block" pos:line="6" pos:column="2">/* File created by MIDL compiler version 7.00.0499 */</comment>
<comment type="block" pos:line="7" pos:column="1">/* Compiler settings for ee100.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/</comment>
<comment type="line" pos:line="15" pos:column="1">//@@MIDL_FILE_HEADING(  )</comment>

<cpp:pragma pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">pragma</cpp:directive> warning( disable: 4049 )</cpp:pragma>  <comment type="block" pos:line="17" pos:column="35">/* more than 64k source lines */</comment>


<comment type="block" pos:line="20" pos:column="1">/* verify that the &lt;rpcndr.h&gt; version is high enough to compile this file*/</comment>
<cpp:ifndef pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">ifndef</cpp:directive> <name pos:line="21" pos:column="9">__REQUIRED_RPCNDR_H_VERSION__</name></cpp:ifndef>
<cpp:define pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="22" pos:column="9">__REQUIRED_RPCNDR_H_VERSION__</name></cpp:macro> <cpp:value pos:line="22" pos:column="39">475</cpp:value></cpp:define>
<cpp:endif pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">endif</cpp:directive></cpp:endif>

<comment type="block" pos:line="25" pos:column="1">/* verify that the &lt;rpcsal.h&gt; version is high enough to compile this file*/</comment>
<cpp:ifndef pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">ifndef</cpp:directive> <name pos:line="26" pos:column="9">__REQUIRED_RPCSAL_H_VERSION__</name></cpp:ifndef>
<cpp:define pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="27" pos:column="9">__REQUIRED_RPCSAL_H_VERSION__</name></cpp:macro> <cpp:value pos:line="27" pos:column="39">100</cpp:value></cpp:define>
<cpp:endif pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:include pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="30" pos:column="10">"rpc.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="31" pos:column="10">"rpcndr.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifndef pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">ifndef</cpp:directive> <name pos:line="33" pos:column="9">__RPCNDR_H_VERSION__</name></cpp:ifndef>
<cpp:error pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">error</cpp:directive> this stub requires an updated version of &lt;rpcndr.h&gt;</cpp:error>
<cpp:endif pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="35" pos:column="8">// __RPCNDR_H_VERSION__</comment>

<cpp:ifndef pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">ifndef</cpp:directive> <name pos:line="37" pos:column="9">COM_NO_WINDOWS_H</name></cpp:ifndef>
<cpp:include pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="38" pos:column="10">"windows.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="39" pos:column="10">"ole2.h"</lit:literal></cpp:file></cpp:include>
<cpp:endif pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="block" pos:line="40" pos:column="8">/*COM_NO_WINDOWS_H*/</comment>

<cpp:ifndef pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">ifndef</cpp:directive> <name pos:line="42" pos:column="9">__ee100_h__</name></cpp:ifndef>
<cpp:define pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="43" pos:column="9">__ee100_h__</name></cpp:macro></cpp:define>

<cpp:if pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">if</cpp:directive> <expr><call><name pos:line="45" pos:column="5">defined</name><argument_list pos:line="45" pos:column="12">(<argument><expr><name pos:line="45" pos:column="13">_MSC_VER</name></expr></argument>)</argument_list></call> <op:operator pos:line="45" pos:column="23">&amp;&amp;</op:operator> <op:operator pos:line="45" pos:column="26">(</op:operator><name pos:line="45" pos:column="27">_MSC_VER</name> <op:operator pos:line="45" pos:column="36">&gt;=</op:operator> <lit:literal type="number" pos:line="45" pos:column="39">1020</lit:literal><op:operator pos:line="45" pos:column="43">)</op:operator></expr></cpp:if>
<cpp:pragma pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">pragma</cpp:directive> once</cpp:pragma>
<cpp:endif pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">endif</cpp:directive></cpp:endif>

<comment type="block" pos:line="49" pos:column="1">/* Forward Declarations */</comment> 

<cpp:ifndef pos:line="51" pos:column="1">#<cpp:directive pos:line="51" pos:column="2">ifndef</cpp:directive> <name pos:line="51" pos:column="9">__IDebugBinderDirect100_FWD_DEFINED__</name></cpp:ifndef>
<cpp:define pos:line="52" pos:column="1">#<cpp:directive pos:line="52" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="52" pos:column="9">__IDebugBinderDirect100_FWD_DEFINED__</name></cpp:macro></cpp:define>
<typedef pos:line="53" pos:column="1">typedef <type><name pos:line="53" pos:column="9">interface</name> <name pos:line="53" pos:column="19">IDebugBinderDirect100</name></type> <name pos:line="53" pos:column="41">IDebugBinderDirect100</name>;</typedef>
<cpp:endif pos:line="54" pos:column="1">#<cpp:directive pos:line="54" pos:column="2">endif</cpp:directive></cpp:endif> 	<comment type="block" pos:line="54" pos:column="9">/* __IDebugBinderDirect100_FWD_DEFINED__ */</comment>


<cpp:ifndef pos:line="57" pos:column="1">#<cpp:directive pos:line="57" pos:column="2">ifndef</cpp:directive> <name pos:line="57" pos:column="9">__IDebugExpressionEvaluator100_FWD_DEFINED__</name></cpp:ifndef>
<cpp:define pos:line="58" pos:column="1">#<cpp:directive pos:line="58" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="58" pos:column="9">__IDebugExpressionEvaluator100_FWD_DEFINED__</name></cpp:macro></cpp:define>
<typedef pos:line="59" pos:column="1">typedef <type><name pos:line="59" pos:column="9">interface</name> <name pos:line="59" pos:column="19">IDebugExpressionEvaluator100</name></type> <name pos:line="59" pos:column="48">IDebugExpressionEvaluator100</name>;</typedef>
<cpp:endif pos:line="60" pos:column="1">#<cpp:directive pos:line="60" pos:column="2">endif</cpp:directive></cpp:endif> 	<comment type="block" pos:line="60" pos:column="9">/* __IDebugExpressionEvaluator100_FWD_DEFINED__ */</comment>


<comment type="block" pos:line="63" pos:column="1">/* header files for imported files */</comment>
<cpp:include pos:line="64" pos:column="1">#<cpp:directive pos:line="64" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="64" pos:column="10">"ocidl.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="66" pos:column="1">#<cpp:directive pos:line="66" pos:column="2">ifdef</cpp:directive> <name pos:line="66" pos:column="8">__cplusplus</name></cpp:ifdef>
<extern pos:line="67" pos:column="1">extern <lit:literal type="string" pos:line="67" pos:column="8">"C"</lit:literal><block pos:line="67" pos:column="11">{
<cpp:endif pos:line="68" pos:column="1">#<cpp:directive pos:line="68" pos:column="2">endif</cpp:directive></cpp:endif> 


<comment type="block" pos:line="71" pos:column="1">/* interface __MIDL_itf_ee100_0000_0000 */</comment>
<comment type="block" pos:line="72" pos:column="1">/* [local] */</comment> 

<cpp:define pos:line="74" pos:column="1">#<cpp:directive pos:line="74" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="74" pos:column="9">E_EVAL_ILLEGAL_SIDE_EFFECT</name></cpp:macro>            	<cpp:value pos:line="74" pos:column="49">MAKE_HRESULT(1, FACILITY_ITF, 0x0019)</cpp:value></cpp:define>
<cpp:define pos:line="75" pos:column="1">#<cpp:directive pos:line="75" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="75" pos:column="9">S_EVAL_THREADSLIP_REQUIRED</name></cpp:macro>            	<cpp:value pos:line="75" pos:column="49">MAKE_HRESULT(0, FACILITY_ITF, 0x0020)</cpp:value></cpp:define>
<cpp:define pos:line="76" pos:column="1">#<cpp:directive pos:line="76" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="76" pos:column="9">E_EVAL_INTERPRETER_ERROR</name></cpp:macro>                 <cpp:value pos:line="76" pos:column="50">MAKE_HRESULT(1, FACILITY_ITF, 0x0021)</cpp:value></cpp:define>
<cpp:define pos:line="77" pos:column="1">#<cpp:directive pos:line="77" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="77" pos:column="9">E_EVAL_FUNCEVAL_IN_MINIDUMP</name></cpp:macro>              <cpp:value pos:line="77" pos:column="50">MAKE_HRESULT(1, FACILITY_ITF, 0x0022)</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier pos:line="80" pos:column="1">extern</specifier> <name pos:line="80" pos:column="8">RPC_IF_HANDLE</name></type> <name pos:line="80" pos:column="22">__MIDL_itf_ee100_0000_0000_v0_0_c_ifspec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="81" pos:column="1">extern</specifier> <name pos:line="81" pos:column="8">RPC_IF_HANDLE</name></type> <name pos:line="81" pos:column="22">__MIDL_itf_ee100_0000_0000_v0_0_s_ifspec</name></decl>;</decl_stmt>

<cpp:ifndef pos:line="83" pos:column="1">#<cpp:directive pos:line="83" pos:column="2">ifndef</cpp:directive> <name pos:line="83" pos:column="9">__IDebugBinderDirect100_INTERFACE_DEFINED__</name></cpp:ifndef>
<cpp:define pos:line="84" pos:column="1">#<cpp:directive pos:line="84" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="84" pos:column="9">__IDebugBinderDirect100_INTERFACE_DEFINED__</name></cpp:macro></cpp:define>

<comment type="block" pos:line="86" pos:column="1">/* interface IDebugBinderDirect100 */</comment>
<comment type="block" pos:line="87" pos:column="1">/* [unique][uuid][object] */</comment> 


<decl_stmt><decl><type><name pos:line="90" pos:column="1">EXTERN_C</name> <specifier pos:line="90" pos:column="10">const</specifier> <name pos:line="90" pos:column="16">IID</name></type> <name pos:line="90" pos:column="20">IID_IDebugBinderDirect100</name></decl>;</decl_stmt>

<cpp:if pos:line="92" pos:column="1">#<cpp:directive pos:line="92" pos:column="2">if</cpp:directive> <expr><call><name pos:line="92" pos:column="5">defined</name><argument_list pos:line="92" pos:column="12">(<argument><expr><name pos:line="92" pos:column="13">__cplusplus</name></expr></argument>)</argument_list></call> <op:operator pos:line="92" pos:column="26">&amp;&amp;</op:operator> <op:operator pos:line="92" pos:column="29">!</op:operator><call><name pos:line="92" pos:column="30">defined</name><argument_list pos:line="92" pos:column="37">(<argument><expr><name pos:line="92" pos:column="38">CINTERFACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    
    <macro><name pos:line="94" pos:column="5">MIDL_INTERFACE</name><argument_list pos:line="94" pos:column="19">(<argument pos:line="94" pos:column="20">"00ca5803-6adc-49b3-adcb-a2b538b5665e"</argument>)</argument_list></macro>
    <label><name pos:line="95" pos:column="5">IDebugBinderDirect100</name> :</label> <expr_stmt><expr pos:line="95" pos:column="29">public <name pos:line="95" pos:column="36">IUnknown</name>
    <block pos:line="96" pos:column="5">{
    <expr pos:line="97" pos:column="5">public<op:operator pos:line="97" pos:column="11">:</op:operator>
        virtual <name pos:line="98" pos:column="17">HRESULT</name> <name pos:line="98" pos:column="25">STDMETHODCALLTYPE</name> <macro><name pos:line="98" pos:column="43">GetErrorMessage</name><argument_list pos:line="98" pos:column="58">( 
            <argument pos:line="99" pos:column="13">HRESULT hrError</argument>,
            <comment type="block" pos:line="100" pos:column="13">/* [out] */</comment> <argument pos:line="100" pos:column="25">__RPC__deref_out_opt BSTR *pbstrError</argument>)</argument_list></macro> <op:operator pos:line="100" pos:column="64">=</op:operator> <lit:literal type="number" pos:line="100" pos:column="66">0</lit:literal></expr>;
        
        <expr pos:line="102" pos:column="9">virtual <name pos:line="102" pos:column="17">HRESULT</name> <name pos:line="102" pos:column="25">STDMETHODCALLTYPE</name> <macro><name pos:line="102" pos:column="43">IsDump</name><argument_list pos:line="102" pos:column="49">( 
            <comment type="block" pos:line="103" pos:column="13">/* [out] */</comment> <argument pos:line="103" pos:column="25">__RPC__out BOOL *pfDump</argument>)</argument_list></macro> <op:operator pos:line="103" pos:column="50">=</op:operator> <lit:literal type="number" pos:line="103" pos:column="52">0</lit:literal></expr>;
        
    }</block></expr>;</expr_stmt>
    
<cpp:else pos:line="107" pos:column="1">#<cpp:directive pos:line="107" pos:column="2">else</cpp:directive></cpp:else> 	<comment type="block" pos:line="107" pos:column="9">/* C style interface */</comment>

    <typedef pos:line="109" pos:column="5">typedef <type><struct pos:line="109" pos:column="13">struct <name pos:line="109" pos:column="20">IDebugBinderDirect100Vtbl</name>
    <block pos:line="110" pos:column="5">{<public type="default" pos:line="110" pos:column="6">
        <function_decl><type><name pos:line="111" pos:column="9">BEGIN_INTERFACE</name>
        
        <name pos:line="113" pos:column="9">HRESULT</name></type> ( <name pos:line="113" pos:column="19">STDMETHODCALLTYPE</name> <type:modifier pos:line="113" pos:column="37">*</type:modifier><name pos:line="113" pos:column="38">QueryInterface</name> )<parameter_list pos:line="113" pos:column="54">( 
            <param><decl><type><name pos:line="114" pos:column="13">IDebugBinderDirect100</name> <type:modifier pos:line="114" pos:column="35">*</type:modifier></type> <name pos:line="114" pos:column="37">This</name></decl></param>,
            <comment type="block" pos:line="115" pos:column="13">/* [in] */</comment> <param><decl><type><name pos:line="115" pos:column="24">__RPC__in</name> <name pos:line="115" pos:column="34">REFIID</name></type> <name pos:line="115" pos:column="41">riid</name></decl></param>,
            <comment type="block" pos:line="116" pos:column="13">/* [iid_is][out] */</comment> 
            <param><decl><type><name pos:line="117" pos:column="13">__RPC__deref_out</name>  <name pos:line="117" pos:column="31">void</name> <type:modifier pos:line="117" pos:column="36">*</type:modifier><type:modifier pos:line="117" pos:column="37">*</type:modifier></type><name pos:line="117" pos:column="38">ppvObject</name></decl></param>)</parameter_list>;</function_decl>
        
        <function_decl><type><name pos:line="119" pos:column="9">ULONG</name></type> ( <name pos:line="119" pos:column="17">STDMETHODCALLTYPE</name> <type:modifier pos:line="119" pos:column="35">*</type:modifier><name pos:line="119" pos:column="36">AddRef</name> )<parameter_list pos:line="119" pos:column="44">( 
            <param><decl><type><name pos:line="120" pos:column="13">IDebugBinderDirect100</name> <type:modifier pos:line="120" pos:column="35">*</type:modifier></type> <name pos:line="120" pos:column="37">This</name></decl></param>)</parameter_list>;</function_decl>
        
        <function_decl><type><name pos:line="122" pos:column="9">ULONG</name></type> ( <name pos:line="122" pos:column="17">STDMETHODCALLTYPE</name> <type:modifier pos:line="122" pos:column="35">*</type:modifier><name pos:line="122" pos:column="36">Release</name> )<parameter_list pos:line="122" pos:column="45">( 
            <param><decl><type><name pos:line="123" pos:column="13">IDebugBinderDirect100</name> <type:modifier pos:line="123" pos:column="35">*</type:modifier></type> <name pos:line="123" pos:column="37">This</name></decl></param>)</parameter_list>;</function_decl>
        
        <function_decl><type><name pos:line="125" pos:column="9">HRESULT</name></type> ( <name pos:line="125" pos:column="19">STDMETHODCALLTYPE</name> <type:modifier pos:line="125" pos:column="37">*</type:modifier><name pos:line="125" pos:column="38">GetErrorMessage</name> )<parameter_list pos:line="125" pos:column="55">( 
            <param><decl><type><name pos:line="126" pos:column="13">IDebugBinderDirect100</name> <type:modifier pos:line="126" pos:column="35">*</type:modifier></type> <name pos:line="126" pos:column="37">This</name></decl></param>,
            <param><decl><type><name pos:line="127" pos:column="13">HRESULT</name></type> <name pos:line="127" pos:column="21">hrError</name></decl></param>,
            <comment type="block" pos:line="128" pos:column="13">/* [out] */</comment> <param><decl><type><name pos:line="128" pos:column="25">__RPC__deref_out_opt</name> <name pos:line="128" pos:column="46">BSTR</name> <type:modifier pos:line="128" pos:column="51">*</type:modifier></type><name pos:line="128" pos:column="52">pbstrError</name></decl></param>)</parameter_list>;</function_decl>
        
        <function_decl><type><name pos:line="130" pos:column="9">HRESULT</name></type> ( <name pos:line="130" pos:column="19">STDMETHODCALLTYPE</name> <type:modifier pos:line="130" pos:column="37">*</type:modifier><name pos:line="130" pos:column="38">IsDump</name> )<parameter_list pos:line="130" pos:column="46">( 
            <param><decl><type><name pos:line="131" pos:column="13">IDebugBinderDirect100</name> <type:modifier pos:line="131" pos:column="35">*</type:modifier></type> <name pos:line="131" pos:column="37">This</name></decl></param>,
            <comment type="block" pos:line="132" pos:column="13">/* [out] */</comment> <param><decl><type><name pos:line="132" pos:column="25">__RPC__out</name> <name pos:line="132" pos:column="36">BOOL</name> <type:modifier pos:line="132" pos:column="41">*</type:modifier></type><name pos:line="132" pos:column="42">pfDump</name></decl></param>)</parameter_list>;</function_decl>
        
        <macro><name pos:line="134" pos:column="9">END_INTERFACE</name></macro>
    </public>}</block></struct></type> <name pos:line="135" pos:column="7">IDebugBinderDirect100Vtbl</name>;</typedef>

    <decl_stmt><decl><type><name pos:line="137" pos:column="5">interface</name></type> <name pos:line="137" pos:column="15">IDebugBinderDirect100</name>
    <argument_list pos:line="138" pos:column="5">{
        <argument><expr><name pos:line="139" pos:column="9">CONST_VTBL</name> struct <name pos:line="139" pos:column="27">IDebugBinderDirect100Vtbl</name> <op:operator pos:line="139" pos:column="53">*</op:operator><name pos:line="139" pos:column="54">lpVtbl</name></expr></argument>;
    }</argument_list></decl>;</decl_stmt>

    

<cpp:ifdef pos:line="144" pos:column="1">#<cpp:directive pos:line="144" pos:column="2">ifdef</cpp:directive> <name pos:line="144" pos:column="8">COBJMACROS</name></cpp:ifdef>


<cpp:define pos:line="147" pos:column="1">#<cpp:directive pos:line="147" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="147" pos:column="9">IDebugBinderDirect100_QueryInterface</name><parameter_list pos:line="147" pos:column="45">(<param><type><name pos:line="147" pos:column="46">This</name></type></param>,<param><type><name pos:line="147" pos:column="51">riid</name></type></param>,<param><type><name pos:line="147" pos:column="56">ppvObject</name></type></param>)</parameter_list></cpp:macro>	\
    <cpp:value pos:line="148" pos:column="5">( (This)-&gt;lpVtbl -&gt; QueryInterface(This,riid,ppvObject) )</cpp:value></cpp:define> 

<cpp:define pos:line="150" pos:column="1">#<cpp:directive pos:line="150" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="150" pos:column="9">IDebugBinderDirect100_AddRef</name><parameter_list pos:line="150" pos:column="37">(<param><type><name pos:line="150" pos:column="38">This</name></type></param>)</parameter_list></cpp:macro>	\
    <cpp:value pos:line="151" pos:column="5">( (This)-&gt;lpVtbl -&gt; AddRef(This) )</cpp:value></cpp:define> 

<cpp:define pos:line="153" pos:column="1">#<cpp:directive pos:line="153" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="153" pos:column="9">IDebugBinderDirect100_Release</name><parameter_list pos:line="153" pos:column="38">(<param><type><name pos:line="153" pos:column="39">This</name></type></param>)</parameter_list></cpp:macro>	\
    <cpp:value pos:line="154" pos:column="5">( (This)-&gt;lpVtbl -&gt; Release(This) )</cpp:value></cpp:define> 


<cpp:define pos:line="157" pos:column="1">#<cpp:directive pos:line="157" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="157" pos:column="9">IDebugBinderDirect100_GetErrorMessage</name><parameter_list pos:line="157" pos:column="46">(<param><type><name pos:line="157" pos:column="47">This</name></type></param>,<param><type><name pos:line="157" pos:column="52">hrError</name></type></param>,<param><type><name pos:line="157" pos:column="60">pbstrError</name></type></param>)</parameter_list></cpp:macro>	\
    <cpp:value pos:line="158" pos:column="5">( (This)-&gt;lpVtbl -&gt; GetErrorMessage(This,hrError,pbstrError) )</cpp:value></cpp:define> 

<cpp:define pos:line="160" pos:column="1">#<cpp:directive pos:line="160" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="160" pos:column="9">IDebugBinderDirect100_IsDump</name><parameter_list pos:line="160" pos:column="37">(<param><type><name pos:line="160" pos:column="38">This</name></type></param>,<param><type><name pos:line="160" pos:column="43">pfDump</name></type></param>)</parameter_list></cpp:macro>	\
    <cpp:value pos:line="161" pos:column="5">( (This)-&gt;lpVtbl -&gt; IsDump(This,pfDump) )</cpp:value></cpp:define> 

<cpp:endif pos:line="163" pos:column="1">#<cpp:directive pos:line="163" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="block" pos:line="163" pos:column="8">/* COBJMACROS */</comment>


<cpp:endif pos:line="166" pos:column="1">#<cpp:directive pos:line="166" pos:column="2">endif</cpp:directive></cpp:endif> 	<comment type="block" pos:line="166" pos:column="9">/* C style interface */</comment>




<cpp:endif pos:line="171" pos:column="1">#<cpp:directive pos:line="171" pos:column="2">endif</cpp:directive></cpp:endif> 	<comment type="block" pos:line="171" pos:column="9">/* __IDebugBinderDirect100_INTERFACE_DEFINED__ */</comment>


<cpp:ifndef pos:line="174" pos:column="1">#<cpp:directive pos:line="174" pos:column="2">ifndef</cpp:directive> <name pos:line="174" pos:column="9">__IDebugExpressionEvaluator100_INTERFACE_DEFINED__</name></cpp:ifndef>
<cpp:define pos:line="175" pos:column="1">#<cpp:directive pos:line="175" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="175" pos:column="9">__IDebugExpressionEvaluator100_INTERFACE_DEFINED__</name></cpp:macro></cpp:define>

<comment type="block" pos:line="177" pos:column="1">/* interface IDebugExpressionEvaluator100 */</comment>
<comment type="block" pos:line="178" pos:column="1">/* [unique][uuid][object] */</comment> 


<decl_stmt><decl><type><name pos:line="181" pos:column="1">EXTERN_C</name> <specifier pos:line="181" pos:column="10">const</specifier> <name pos:line="181" pos:column="16">IID</name></type> <name pos:line="181" pos:column="20">IID_IDebugExpressionEvaluator100</name></decl>;</decl_stmt>

<cpp:if pos:line="183" pos:column="1">#<cpp:directive pos:line="183" pos:column="2">if</cpp:directive> <expr><call><name pos:line="183" pos:column="5">defined</name><argument_list pos:line="183" pos:column="12">(<argument><expr><name pos:line="183" pos:column="13">__cplusplus</name></expr></argument>)</argument_list></call> <op:operator pos:line="183" pos:column="26">&amp;&amp;</op:operator> <op:operator pos:line="183" pos:column="29">!</op:operator><call><name pos:line="183" pos:column="30">defined</name><argument_list pos:line="183" pos:column="37">(<argument><expr><name pos:line="183" pos:column="38">CINTERFACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    
    <macro><name pos:line="185" pos:column="5">MIDL_INTERFACE</name><argument_list pos:line="185" pos:column="19">(<argument pos:line="185" pos:column="20">"643CD3D4-043D-410C-8201-7E83C8918A91"</argument>)</argument_list></macro>
    <label><name pos:line="186" pos:column="5">IDebugExpressionEvaluator100</name> :</label> <expr_stmt><expr pos:line="186" pos:column="36">public <name pos:line="186" pos:column="43">IUnknown</name>
    <block pos:line="187" pos:column="5">{
    <expr pos:line="188" pos:column="5">public<op:operator pos:line="188" pos:column="11">:</op:operator>
        virtual <name pos:line="189" pos:column="17">HRESULT</name> <name pos:line="189" pos:column="25">STDMETHODCALLTYPE</name> <macro><name pos:line="189" pos:column="43">SetAttachedCLRMajorMinorVersion</name><argument_list pos:line="189" pos:column="74">( 
            <comment type="block" pos:line="190" pos:column="13">/* [in] */</comment> <argument pos:line="190" pos:column="24">__RPC__in BSTR bstrCLRVersion</argument>)</argument_list></macro> <op:operator pos:line="190" pos:column="55">=</op:operator> <lit:literal type="number" pos:line="190" pos:column="57">0</lit:literal></expr>;
        
        <expr pos:line="192" pos:column="9">virtual <name pos:line="192" pos:column="17">HRESULT</name> <name pos:line="192" pos:column="25">STDMETHODCALLTYPE</name> <call><name pos:line="192" pos:column="43">NotifyFuncEval</name><argument_list pos:line="192" pos:column="57">( <argument><expr><name pos:line="192" pos:column="59">void</name></expr></argument>)</argument_list></call> <op:operator pos:line="192" pos:column="65">=</op:operator> <lit:literal type="number" pos:line="192" pos:column="67">0</lit:literal></expr>;
        
    }</block></expr>;</expr_stmt>
    
<cpp:else pos:line="196" pos:column="1">#<cpp:directive pos:line="196" pos:column="2">else</cpp:directive></cpp:else> 	<comment type="block" pos:line="196" pos:column="9">/* C style interface */</comment>

    <typedef pos:line="198" pos:column="5">typedef <type><struct pos:line="198" pos:column="13">struct <name pos:line="198" pos:column="20">IDebugExpressionEvaluator100Vtbl</name>
    <block pos:line="199" pos:column="5">{<public type="default" pos:line="199" pos:column="6">
        <function_decl><type><name pos:line="200" pos:column="9">BEGIN_INTERFACE</name>
        
        <name pos:line="202" pos:column="9">HRESULT</name></type> ( <name pos:line="202" pos:column="19">STDMETHODCALLTYPE</name> <type:modifier pos:line="202" pos:column="37">*</type:modifier><name pos:line="202" pos:column="38">QueryInterface</name> )<parameter_list pos:line="202" pos:column="54">( 
            <param><decl><type><name pos:line="203" pos:column="13">IDebugExpressionEvaluator100</name> <type:modifier pos:line="203" pos:column="42">*</type:modifier></type> <name pos:line="203" pos:column="44">This</name></decl></param>,
            <comment type="block" pos:line="204" pos:column="13">/* [in] */</comment> <param><decl><type><name pos:line="204" pos:column="24">__RPC__in</name> <name pos:line="204" pos:column="34">REFIID</name></type> <name pos:line="204" pos:column="41">riid</name></decl></param>,
            <comment type="block" pos:line="205" pos:column="13">/* [iid_is][out] */</comment> 
            <param><decl><type><name pos:line="206" pos:column="13">__RPC__deref_out</name>  <name pos:line="206" pos:column="31">void</name> <type:modifier pos:line="206" pos:column="36">*</type:modifier><type:modifier pos:line="206" pos:column="37">*</type:modifier></type><name pos:line="206" pos:column="38">ppvObject</name></decl></param>)</parameter_list>;</function_decl>
        
        <function_decl><type><name pos:line="208" pos:column="9">ULONG</name></type> ( <name pos:line="208" pos:column="17">STDMETHODCALLTYPE</name> <type:modifier pos:line="208" pos:column="35">*</type:modifier><name pos:line="208" pos:column="36">AddRef</name> )<parameter_list pos:line="208" pos:column="44">( 
            <param><decl><type><name pos:line="209" pos:column="13">IDebugExpressionEvaluator100</name> <type:modifier pos:line="209" pos:column="42">*</type:modifier></type> <name pos:line="209" pos:column="44">This</name></decl></param>)</parameter_list>;</function_decl>
        
        <function_decl><type><name pos:line="211" pos:column="9">ULONG</name></type> ( <name pos:line="211" pos:column="17">STDMETHODCALLTYPE</name> <type:modifier pos:line="211" pos:column="35">*</type:modifier><name pos:line="211" pos:column="36">Release</name> )<parameter_list pos:line="211" pos:column="45">( 
            <param><decl><type><name pos:line="212" pos:column="13">IDebugExpressionEvaluator100</name> <type:modifier pos:line="212" pos:column="42">*</type:modifier></type> <name pos:line="212" pos:column="44">This</name></decl></param>)</parameter_list>;</function_decl>
        
        <function_decl><type><name pos:line="214" pos:column="9">HRESULT</name></type> ( <name pos:line="214" pos:column="19">STDMETHODCALLTYPE</name> <type:modifier pos:line="214" pos:column="37">*</type:modifier><name pos:line="214" pos:column="38">SetAttachedCLRMajorMinorVersion</name> )<parameter_list pos:line="214" pos:column="71">( 
            <param><decl><type><name pos:line="215" pos:column="13">IDebugExpressionEvaluator100</name> <type:modifier pos:line="215" pos:column="42">*</type:modifier></type> <name pos:line="215" pos:column="44">This</name></decl></param>,
            <comment type="block" pos:line="216" pos:column="13">/* [in] */</comment> <param><decl><type><name pos:line="216" pos:column="24">__RPC__in</name> <name pos:line="216" pos:column="34">BSTR</name></type> <name pos:line="216" pos:column="39">bstrCLRVersion</name></decl></param>)</parameter_list>;</function_decl>
        
        <function_decl><type><name pos:line="218" pos:column="9">HRESULT</name></type> ( <name pos:line="218" pos:column="19">STDMETHODCALLTYPE</name> <type:modifier pos:line="218" pos:column="37">*</type:modifier><name pos:line="218" pos:column="38">NotifyFuncEval</name> )<parameter_list pos:line="218" pos:column="54">( 
            <param><decl><type><name pos:line="219" pos:column="13">IDebugExpressionEvaluator100</name> <type:modifier pos:line="219" pos:column="42">*</type:modifier></type> <name pos:line="219" pos:column="44">This</name></decl></param>)</parameter_list>;</function_decl>
        
        <macro><name pos:line="221" pos:column="9">END_INTERFACE</name></macro>
    </public>}</block></struct></type> <name pos:line="222" pos:column="7">IDebugExpressionEvaluator100Vtbl</name>;</typedef>

    <decl_stmt><decl><type><name pos:line="224" pos:column="5">interface</name></type> <name pos:line="224" pos:column="15">IDebugExpressionEvaluator100</name>
    <argument_list pos:line="225" pos:column="5">{
        <argument><expr><name pos:line="226" pos:column="9">CONST_VTBL</name> struct <name pos:line="226" pos:column="27">IDebugExpressionEvaluator100Vtbl</name> <op:operator pos:line="226" pos:column="60">*</op:operator><name pos:line="226" pos:column="61">lpVtbl</name></expr></argument>;
    }</argument_list></decl>;</decl_stmt>

    

<cpp:ifdef pos:line="231" pos:column="1">#<cpp:directive pos:line="231" pos:column="2">ifdef</cpp:directive> <name pos:line="231" pos:column="8">COBJMACROS</name></cpp:ifdef>


<cpp:define pos:line="234" pos:column="1">#<cpp:directive pos:line="234" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="234" pos:column="9">IDebugExpressionEvaluator100_QueryInterface</name><parameter_list pos:line="234" pos:column="52">(<param><type><name pos:line="234" pos:column="53">This</name></type></param>,<param><type><name pos:line="234" pos:column="58">riid</name></type></param>,<param><type><name pos:line="234" pos:column="63">ppvObject</name></type></param>)</parameter_list></cpp:macro>	\
    <cpp:value pos:line="235" pos:column="5">( (This)-&gt;lpVtbl -&gt; QueryInterface(This,riid,ppvObject) )</cpp:value></cpp:define> 

<cpp:define pos:line="237" pos:column="1">#<cpp:directive pos:line="237" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="237" pos:column="9">IDebugExpressionEvaluator100_AddRef</name><parameter_list pos:line="237" pos:column="44">(<param><type><name pos:line="237" pos:column="45">This</name></type></param>)</parameter_list></cpp:macro>	\
    <cpp:value pos:line="238" pos:column="5">( (This)-&gt;lpVtbl -&gt; AddRef(This) )</cpp:value></cpp:define> 

<cpp:define pos:line="240" pos:column="1">#<cpp:directive pos:line="240" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="240" pos:column="9">IDebugExpressionEvaluator100_Release</name><parameter_list pos:line="240" pos:column="45">(<param><type><name pos:line="240" pos:column="46">This</name></type></param>)</parameter_list></cpp:macro>	\
    <cpp:value pos:line="241" pos:column="5">( (This)-&gt;lpVtbl -&gt; Release(This) )</cpp:value></cpp:define> 


<cpp:define pos:line="244" pos:column="1">#<cpp:directive pos:line="244" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="244" pos:column="9">IDebugExpressionEvaluator100_SetAttachedCLRMajorMinorVersion</name><parameter_list pos:line="244" pos:column="69">(<param><type><name pos:line="244" pos:column="70">This</name></type></param>,<param><type><name pos:line="244" pos:column="75">bstrCLRVersion</name></type></param>)</parameter_list></cpp:macro>	\
    <cpp:value pos:line="245" pos:column="5">( (This)-&gt;lpVtbl -&gt; SetAttachedCLRMajorMinorVersion(This,bstrCLRVersion) )</cpp:value></cpp:define> 

<cpp:define pos:line="247" pos:column="1">#<cpp:directive pos:line="247" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="247" pos:column="9">IDebugExpressionEvaluator100_NotifyFuncEval</name><parameter_list pos:line="247" pos:column="52">(<param><type><name pos:line="247" pos:column="53">This</name></type></param>)</parameter_list></cpp:macro>	\
    <cpp:value pos:line="248" pos:column="5">( (This)-&gt;lpVtbl -&gt; NotifyFuncEval(This) )</cpp:value></cpp:define> 

<cpp:endif pos:line="250" pos:column="1">#<cpp:directive pos:line="250" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="block" pos:line="250" pos:column="8">/* COBJMACROS */</comment>


<cpp:endif pos:line="253" pos:column="1">#<cpp:directive pos:line="253" pos:column="2">endif</cpp:directive></cpp:endif> 	<comment type="block" pos:line="253" pos:column="9">/* C style interface */</comment>




<cpp:endif pos:line="258" pos:column="1">#<cpp:directive pos:line="258" pos:column="2">endif</cpp:directive></cpp:endif> 	<comment type="block" pos:line="258" pos:column="9">/* __IDebugExpressionEvaluator100_INTERFACE_DEFINED__ */</comment>


<comment type="block" pos:line="261" pos:column="1">/* Additional Prototypes for ALL interfaces */</comment>

<function_decl><type><name pos:line="263" pos:column="1">unsigned</name> <name pos:line="263" pos:column="10">long</name>             <name pos:line="263" pos:column="27">__RPC_USER</name></type>  <name pos:line="263" pos:column="39">BSTR_UserSize</name><parameter_list pos:line="263" pos:column="52">(     <param><decl><type><name pos:line="263" pos:column="58">unsigned</name></type> <name pos:line="263" pos:column="67">long</name> <type:modifier pos:line="263" pos:column="72">*</type:modifier></decl></param>, <param><decl><type><name pos:line="263" pos:column="75">unsigned</name></type> <name pos:line="263" pos:column="84">long</name></decl></param>            , <param><decl><type><name pos:line="263" pos:column="102">BSTR</name> <type:modifier pos:line="263" pos:column="107">*</type:modifier></type></decl></param> )</parameter_list>;</function_decl> 
<function_decl><type><name pos:line="264" pos:column="1">unsigned</name> <name pos:line="264" pos:column="10">char</name> <type:modifier pos:line="264" pos:column="15">*</type:modifier> <name pos:line="264" pos:column="17">__RPC_USER</name></type>  <name pos:line="264" pos:column="29">BSTR_UserMarshal</name><parameter_list pos:line="264" pos:column="45">(  <param><decl><type><name pos:line="264" pos:column="48">unsigned</name></type> <name pos:line="264" pos:column="57">long</name> <type:modifier pos:line="264" pos:column="62">*</type:modifier></decl></param>, <param><decl><type><name pos:line="264" pos:column="65">unsigned</name></type> <name pos:line="264" pos:column="74">char</name> <type:modifier pos:line="264" pos:column="79">*</type:modifier></decl></param>, <param><decl><type><name pos:line="264" pos:column="82">BSTR</name> <type:modifier pos:line="264" pos:column="87">*</type:modifier></type></decl></param> )</parameter_list>;</function_decl> 
<function_decl><type><name pos:line="265" pos:column="1">unsigned</name> <name pos:line="265" pos:column="10">char</name> <type:modifier pos:line="265" pos:column="15">*</type:modifier> <name pos:line="265" pos:column="17">__RPC_USER</name></type>  <name pos:line="265" pos:column="29">BSTR_UserUnmarshal</name><parameter_list pos:line="265" pos:column="47">(<param><decl><type><name pos:line="265" pos:column="48">unsigned</name></type> <name pos:line="265" pos:column="57">long</name> <type:modifier pos:line="265" pos:column="62">*</type:modifier></decl></param>, <param><decl><type><name pos:line="265" pos:column="65">unsigned</name></type> <name pos:line="265" pos:column="74">char</name> <type:modifier pos:line="265" pos:column="79">*</type:modifier></decl></param>, <param><decl><type><name pos:line="265" pos:column="82">BSTR</name> <type:modifier pos:line="265" pos:column="87">*</type:modifier></type></decl></param> )</parameter_list>;</function_decl> 
<function_decl><type><name pos:line="266" pos:column="1">void</name>                      <name pos:line="266" pos:column="27">__RPC_USER</name></type>  <name pos:line="266" pos:column="39">BSTR_UserFree</name><parameter_list pos:line="266" pos:column="52">(     <param><decl><type><name pos:line="266" pos:column="58">unsigned</name></type> <name pos:line="266" pos:column="67">long</name> <type:modifier pos:line="266" pos:column="72">*</type:modifier></decl></param>, <param><decl><type><name pos:line="266" pos:column="75">BSTR</name> <type:modifier pos:line="266" pos:column="80">*</type:modifier></type></decl></param> )</parameter_list>;</function_decl> 

<comment type="block" pos:line="268" pos:column="1">/* end of Additional Prototypes */</comment>

<cpp:ifdef pos:line="270" pos:column="1">#<cpp:directive pos:line="270" pos:column="2">ifdef</cpp:directive> <name pos:line="270" pos:column="8">__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif pos:line="272" pos:column="1">#<cpp:directive pos:line="272" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:endif pos:line="274" pos:column="1">#<cpp:directive pos:line="274" pos:column="2">endif</cpp:directive></cpp:endif>


</unit>
