<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Indexer\Indexer.UnitTests\QueryParsingAndConvertingTests.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Text</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">NUnit</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">Framework</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Sando</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">Core</name><op:operator pos:line="6" pos:column="17">.</op:operator><name pos:line="6" pos:column="18">Tools</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Sando</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">Indexer</name><op:operator pos:line="7" pos:column="20">.</op:operator><name pos:line="7" pos:column="21">Searching</name><op:operator pos:line="7" pos:column="30">.</op:operator><name pos:line="7" pos:column="31">Criteria</name></name>;</using>

<namespace pos:line="9" pos:column="1">namespace <name><name pos:line="9" pos:column="11">Sando</name><op:operator pos:line="9" pos:column="16">.</op:operator><name pos:line="9" pos:column="17">Indexer</name><op:operator pos:line="9" pos:column="24">.</op:operator><name pos:line="9" pos:column="25">UnitTests</name></name>
<block pos:line="10" pos:column="1">{
    <class><attribute pos:line="11" pos:column="5">[<expr><name pos:line="11" pos:column="6">TestFixture</name></expr>]</attribute>
    <specifier pos:line="12" pos:column="5">public</specifier> class <name pos:line="12" pos:column="18">QueryParsingAndConvertingTests</name>
    <block pos:line="13" pos:column="5">{

        <function><type><attribute pos:line="15" pos:column="9">[<expr><name pos:line="15" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="16" pos:column="9">public</specifier> <name pos:line="16" pos:column="16">void</name></type> <name pos:line="16" pos:column="21">TestIfQueryParsesToEmptySearchTerm</name><parameter_list pos:line="16" pos:column="55">()</parameter_list>
        <block pos:line="17" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="18" pos:column="13">var</name></type> <name pos:line="18" pos:column="17">description</name> <init pos:line="18" pos:column="29">= <expr><op:operator pos:line="18" pos:column="31">new</op:operator> <call><name pos:line="18" pos:column="35">SandoQueryParser</name><argument_list pos:line="18" pos:column="51">()</argument_list></call><op:operator pos:line="18" pos:column="53">.</op:operator><call><name pos:line="18" pos:column="54">Parse</name><argument_list pos:line="18" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="18" pos:column="60">"g_u16ActiveFault"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="19" pos:column="13">var</name></type> <name pos:line="19" pos:column="17">builder</name> <init pos:line="19" pos:column="25">= <expr><call><name><name pos:line="19" pos:column="27">CriteriaBuilder</name><op:operator pos:line="19" pos:column="42">.</op:operator><name pos:line="19" pos:column="43">GetBuilder</name></name><argument_list pos:line="19" pos:column="53">()</argument_list></call><op:operator pos:line="19" pos:column="55">.</op:operator><call><name pos:line="19" pos:column="56">AddFromDescription</name><argument_list pos:line="19" pos:column="74">(<argument><expr><name pos:line="19" pos:column="75">description</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="20" pos:column="13">var</name></type> <name pos:line="20" pos:column="17">simple</name> <init pos:line="20" pos:column="24">= <expr><call><name><name pos:line="20" pos:column="26">builder</name><op:operator pos:line="20" pos:column="33">.</op:operator><name pos:line="20" pos:column="34">GetCriteria</name></name><argument_list pos:line="20" pos:column="45">()</argument_list></call> <op:operator pos:line="20" pos:column="48">as</op:operator> <name pos:line="20" pos:column="51">SimpleSearchCriteria</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="21" pos:column="13">Assert</name><op:operator pos:line="21" pos:column="19">.</op:operator><name pos:line="21" pos:column="20">IsFalse</name></name><argument_list pos:line="21" pos:column="27">(<argument><expr><call><name><name pos:line="21" pos:column="28">simple</name><op:operator pos:line="21" pos:column="34">.</op:operator><name pos:line="21" pos:column="35">SearchTerms</name><op:operator pos:line="21" pos:column="46">.</op:operator><name pos:line="21" pos:column="47">Where</name></name><argument_list pos:line="21" pos:column="52">(<argument><expr><lambda><name pos:line="21" pos:column="53">x</name> <op:operator pos:line="21" pos:column="55">=&gt;</op:operator> <call><name><name pos:line="21" pos:column="58">String</name><op:operator pos:line="21" pos:column="64">.</op:operator><name pos:line="21" pos:column="65">IsNullOrWhiteSpace</name></name><argument_list pos:line="21" pos:column="83">(<argument><expr><name pos:line="21" pos:column="84">x</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="21" pos:column="87">.</op:operator><call><name pos:line="21" pos:column="88">ToList</name><argument_list pos:line="21" pos:column="94">()</argument_list></call><op:operator pos:line="21" pos:column="96">.</op:operator><name pos:line="21" pos:column="97">Count</name> <op:operator pos:line="21" pos:column="103">&gt;=</op:operator> <lit:literal type="number" pos:line="21" pos:column="106">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
