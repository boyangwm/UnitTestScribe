<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Core\Core.UnitTests\Tools\WordCorrectorTests.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Text</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">NUnit</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">Framework</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Sando</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">Core</name><op:operator pos:line="6" pos:column="17">.</op:operator><name pos:line="6" pos:column="18">Tools</name></name>;</using>

<namespace pos:line="8" pos:column="1">namespace <name><name pos:line="8" pos:column="11">Sando</name><op:operator pos:line="8" pos:column="16">.</op:operator><name pos:line="8" pos:column="17">Core</name><op:operator pos:line="8" pos:column="21">.</op:operator><name pos:line="8" pos:column="22">UnitTests</name><op:operator pos:line="8" pos:column="31">.</op:operator><name pos:line="8" pos:column="32">Tools</name></name>
<block pos:line="9" pos:column="1">{
    <class><attribute pos:line="10" pos:column="5">[<expr><name pos:line="10" pos:column="6">TestFixture</name></expr>]</attribute>
    <specifier pos:line="11" pos:column="5">public</specifier> class <name pos:line="11" pos:column="18">WordCorrectorTests</name>
    <block pos:line="12" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="13" pos:column="9">private</specifier> <specifier pos:line="13" pos:column="17">static</specifier> <specifier pos:line="13" pos:column="24">readonly</specifier> <name pos:line="13" pos:column="33">Random</name></type> <name pos:line="13" pos:column="40">random</name> <init pos:line="13" pos:column="47">= <expr><op:operator pos:line="13" pos:column="49">new</op:operator> <call><name pos:line="13" pos:column="53">Random</name><argument_list pos:line="13" pos:column="59">(<argument><expr><op:operator pos:line="13" pos:column="60">(</op:operator><name pos:line="13" pos:column="61">int</name><op:operator pos:line="13" pos:column="64">)</op:operator><name><name pos:line="13" pos:column="65">DateTime</name><op:operator pos:line="13" pos:column="73">.</op:operator><name pos:line="13" pos:column="74">Now</name><op:operator pos:line="13" pos:column="77">.</op:operator><name pos:line="13" pos:column="78">Ticks</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="14" pos:column="9">private</specifier> <specifier pos:line="14" pos:column="17">readonly</specifier> <name pos:line="14" pos:column="26">WordCorrector</name></type> <name pos:line="14" pos:column="40">corrector</name> <init pos:line="14" pos:column="50">= <expr><op:operator pos:line="14" pos:column="52">new</op:operator> <call><name pos:line="14" pos:column="56">WordCorrector</name><argument_list pos:line="14" pos:column="69">()</argument_list></call></expr></init></decl>;</decl_stmt> 

        <function><type><specifier pos:line="16" pos:column="9">private</specifier> <name pos:line="16" pos:column="17">string</name></type> <name pos:line="16" pos:column="24">GenerateRandomString</name><parameter_list pos:line="16" pos:column="44">(<param><decl><type><name pos:line="16" pos:column="45">int</name></type> <name pos:line="16" pos:column="49">size</name></decl></param>)</parameter_list>
        <block pos:line="17" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="18" pos:column="13">var</name></type> <name pos:line="18" pos:column="17">builder</name> <init pos:line="18" pos:column="25">= <expr><op:operator pos:line="18" pos:column="27">new</op:operator> <call><name pos:line="18" pos:column="31">StringBuilder</name><argument_list pos:line="18" pos:column="44">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for pos:line="19" pos:column="13">for (<init><decl><type><name pos:line="19" pos:column="18">int</name></type> <name pos:line="19" pos:column="22">i</name> <init pos:line="19" pos:column="24">= <expr><lit:literal type="number" pos:line="19" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="19" pos:column="29">i</name> <op:operator pos:line="19" pos:column="31">&lt;</op:operator> <name pos:line="19" pos:column="33">size</name></expr>;</condition> <incr><expr><name pos:line="19" pos:column="39">i</name><op:operator pos:line="19" pos:column="40">++</op:operator></expr></incr>)
            <block pos:line="20" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="21" pos:column="17">char</name></type> <name pos:line="21" pos:column="22">ch</name> <init pos:line="21" pos:column="25">= <expr><call><name pos:line="21" pos:column="27">GenerateRandomChar</name><argument_list pos:line="21" pos:column="45">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="22" pos:column="17">builder</name><op:operator pos:line="22" pos:column="24">.</op:operator><name pos:line="22" pos:column="25">Append</name></name><argument_list pos:line="22" pos:column="31">(<argument><expr><name pos:line="22" pos:column="32">ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>

            <return pos:line="25" pos:column="13">return <expr><call><name><name pos:line="25" pos:column="20">builder</name><op:operator pos:line="25" pos:column="27">.</op:operator><name pos:line="25" pos:column="28">ToString</name></name><argument_list pos:line="25" pos:column="36">()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="28" pos:column="9">private</specifier> <name pos:line="28" pos:column="17">char</name></type> <name pos:line="28" pos:column="22">GenerateRandomChar</name><parameter_list pos:line="28" pos:column="40">()</parameter_list>
        <block pos:line="29" pos:column="9">{
            <return pos:line="30" pos:column="13">return <expr><call><name><name pos:line="30" pos:column="20">Convert</name><op:operator pos:line="30" pos:column="27">.</op:operator><name pos:line="30" pos:column="28">ToChar</name></name><argument_list pos:line="30" pos:column="34">(<argument><expr><call><name pos:line="30" pos:column="35">GenerateRandomInt</name><argument_list pos:line="30" pos:column="52">(<argument><expr><lit:literal type="number" pos:line="30" pos:column="53">97</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="30" pos:column="57">122</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="33" pos:column="9">private</specifier> <name pos:line="33" pos:column="17">int</name></type> <name pos:line="33" pos:column="21">GenerateRandomInt</name><parameter_list pos:line="33" pos:column="38">(<param><decl><type><name pos:line="33" pos:column="39">int</name></type> <name pos:line="33" pos:column="43">min</name></decl></param>, <param><decl><type><name pos:line="33" pos:column="48">int</name></type> <name pos:line="33" pos:column="52">max</name></decl></param>)</parameter_list>
        <block pos:line="34" pos:column="9">{
            <return pos:line="35" pos:column="13">return <expr><call><name><name pos:line="35" pos:column="20">Convert</name><op:operator pos:line="35" pos:column="27">.</op:operator><name pos:line="35" pos:column="28">ToInt32</name></name><argument_list pos:line="35" pos:column="35">(<argument><expr><call><name><name pos:line="35" pos:column="36">Math</name><op:operator pos:line="35" pos:column="40">.</op:operator><name pos:line="35" pos:column="41">Floor</name></name><argument_list pos:line="35" pos:column="46">(<argument><expr><op:operator pos:line="35" pos:column="47">(</op:operator><name pos:line="35" pos:column="48">max</name> <op:operator pos:line="35" pos:column="52">-</op:operator> <name pos:line="35" pos:column="54">min</name> <op:operator pos:line="35" pos:column="58">+</op:operator> <lit:literal type="number" pos:line="35" pos:column="60">1</lit:literal><op:operator pos:line="35" pos:column="61">)</op:operator> <op:operator pos:line="35" pos:column="63">*</op:operator> 
                <call><name><name pos:line="36" pos:column="17">random</name><op:operator pos:line="36" pos:column="23">.</op:operator><name pos:line="36" pos:column="24">NextDouble</name></name><argument_list pos:line="36" pos:column="34">()</argument_list></call> <op:operator pos:line="36" pos:column="37">+</op:operator> <name pos:line="36" pos:column="39">min</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="39" pos:column="9">private</specifier> <name><name pos:line="39" pos:column="17">IEnumerable</name><argument_list pos:line="39" pos:column="28">&lt;<argument><name pos:line="39" pos:column="29">string</name></argument>&gt;</argument_list></name></type> <name pos:line="39" pos:column="37">GenerateRandomWordList</name><parameter_list pos:line="39" pos:column="59">(<param><decl><type><name pos:line="39" pos:column="60">int</name></type> <name pos:line="39" pos:column="64">length</name></decl></param>)</parameter_list>
        <block pos:line="40" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="41" pos:column="13">var</name></type> <name pos:line="41" pos:column="17">words</name> <init pos:line="41" pos:column="23">= <expr><op:operator pos:line="41" pos:column="25">new</op:operator> <call><name><name pos:line="41" pos:column="29">List</name><argument_list pos:line="41" pos:column="33">&lt;<argument><name pos:line="41" pos:column="34">String</name></argument>&gt;</argument_list></name><argument_list pos:line="41" pos:column="41">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for pos:line="42" pos:column="13">for (<init><decl><type><name pos:line="42" pos:column="18">int</name></type> <name pos:line="42" pos:column="22">i</name> <init pos:line="42" pos:column="24">= <expr><lit:literal type="number" pos:line="42" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="42" pos:column="29">i</name> <op:operator pos:line="42" pos:column="31">&lt;</op:operator> <name pos:line="42" pos:column="33">length</name></expr>;</condition> <incr><expr><name pos:line="42" pos:column="41">i</name><op:operator pos:line="42" pos:column="42">++</op:operator></expr></incr>)
            <block pos:line="43" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="44" pos:column="17">words</name><op:operator pos:line="44" pos:column="22">.</op:operator><name pos:line="44" pos:column="23">Add</name></name><argument_list pos:line="44" pos:column="26">(<argument><expr><call><name pos:line="44" pos:column="27">GenerateRandomString</name><argument_list pos:line="44" pos:column="47">(<argument><expr><lit:literal type="number" pos:line="44" pos:column="48">15</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <return pos:line="46" pos:column="13">return <expr><name pos:line="46" pos:column="20">words</name></expr>;</return>
        }</block></function>

        <function><type><attribute pos:line="49" pos:column="9">[<expr><name pos:line="49" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="50" pos:column="9">public</specifier> <name pos:line="50" pos:column="16">void</name></type> <name pos:line="50" pos:column="21">AddMultipleWords</name><parameter_list pos:line="50" pos:column="37">()</parameter_list>
        <block pos:line="51" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="52" pos:column="13">corrector</name><op:operator pos:line="52" pos:column="22">.</op:operator><name pos:line="52" pos:column="23">AddWords</name></name><argument_list pos:line="52" pos:column="31">(<argument><expr><call><name pos:line="52" pos:column="32">GenerateRandomWordList</name><argument_list pos:line="52" pos:column="54">(<argument><expr><lit:literal type="number" pos:line="52" pos:column="55">200</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="55" pos:column="9">[<expr><name pos:line="55" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="56" pos:column="9">public</specifier> <name pos:line="56" pos:column="16">void</name></type> <name pos:line="56" pos:column="21">RandomIntegersTest</name><parameter_list pos:line="56" pos:column="39">()</parameter_list>
        <block pos:line="57" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="58" pos:column="13">var</name></type> <name pos:line="58" pos:column="17">min</name> <init pos:line="58" pos:column="21">= <expr><lit:literal type="number" pos:line="58" pos:column="23">0</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="59" pos:column="13">var</name></type> <name pos:line="59" pos:column="17">max</name> <init pos:line="59" pos:column="21">= <expr><lit:literal type="number" pos:line="59" pos:column="23">100</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="60" pos:column="13">var</name></type> <name pos:line="60" pos:column="17">lowReached</name> <init pos:line="60" pos:column="28">= <expr><lit:literal type="boolean" pos:line="60" pos:column="30">false</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="61" pos:column="13">var</name></type> <name pos:line="61" pos:column="17">highReached</name> <init pos:line="61" pos:column="29">= <expr><lit:literal type="boolean" pos:line="61" pos:column="31">false</lit:literal></expr></init></decl>;</decl_stmt>
            <for pos:line="62" pos:column="13">for (<init><decl><type><name pos:line="62" pos:column="18">int</name></type> <name pos:line="62" pos:column="22">i</name> <init pos:line="62" pos:column="24">= <expr><lit:literal type="number" pos:line="62" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="62" pos:column="29">i</name> <op:operator pos:line="62" pos:column="31">&lt;</op:operator> <lit:literal type="number" pos:line="62" pos:column="33">1000</lit:literal></expr>;</condition> <incr><expr><name pos:line="62" pos:column="39">i</name><op:operator pos:line="62" pos:column="40">++</op:operator></expr></incr>)
            <block pos:line="63" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="64" pos:column="17">var</name></type> <name pos:line="64" pos:column="21">value</name> <init pos:line="64" pos:column="27">= <expr><call><name pos:line="64" pos:column="29">GenerateRandomInt</name><argument_list pos:line="64" pos:column="46">(<argument><expr><name pos:line="64" pos:column="47">min</name></expr></argument>, <argument><expr><name pos:line="64" pos:column="52">max</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="65" pos:column="17">Assert</name><op:operator pos:line="65" pos:column="23">.</op:operator><name pos:line="65" pos:column="24">IsTrue</name></name><argument_list pos:line="65" pos:column="30">(<argument><expr><name pos:line="65" pos:column="31">value</name> <op:operator pos:line="65" pos:column="37">&gt;=</op:operator> <name pos:line="65" pos:column="40">min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="66" pos:column="17">Assert</name><op:operator pos:line="66" pos:column="23">.</op:operator><name pos:line="66" pos:column="24">IsTrue</name></name><argument_list pos:line="66" pos:column="30">(<argument><expr><name pos:line="66" pos:column="31">value</name> <op:operator pos:line="66" pos:column="37">&lt;=</op:operator> <name pos:line="66" pos:column="40">max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="67" pos:column="17">if <condition pos:line="67" pos:column="20">(<expr><name pos:line="67" pos:column="21">value</name> <op:operator pos:line="67" pos:column="27">==</op:operator> <name pos:line="67" pos:column="30">min</name></expr>)</condition><then pos:line="67" pos:column="34">
                    <expr_stmt><expr><name pos:line="68" pos:column="21">lowReached</name> <op:operator pos:line="68" pos:column="32">=</op:operator> <lit:literal type="boolean" pos:line="68" pos:column="34">true</lit:literal></expr>;</expr_stmt></then></if>
                <if pos:line="69" pos:column="17">if <condition pos:line="69" pos:column="20">(<expr><name pos:line="69" pos:column="21">value</name> <op:operator pos:line="69" pos:column="27">==</op:operator> <name pos:line="69" pos:column="30">max</name></expr>)</condition><then pos:line="69" pos:column="34">
                    <expr_stmt><expr><name pos:line="70" pos:column="21">highReached</name> <op:operator pos:line="70" pos:column="33">=</op:operator> <lit:literal type="boolean" pos:line="70" pos:column="35">true</lit:literal></expr>;</expr_stmt></then></if>
            }</block></for>
            <expr_stmt><expr><call><name><name pos:line="72" pos:column="13">Assert</name><op:operator pos:line="72" pos:column="19">.</op:operator><name pos:line="72" pos:column="20">IsTrue</name></name><argument_list pos:line="72" pos:column="26">(<argument><expr><name pos:line="72" pos:column="27">lowReached</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="73" pos:column="13">Assert</name><op:operator pos:line="73" pos:column="19">.</op:operator><name pos:line="73" pos:column="20">IsTrue</name></name><argument_list pos:line="73" pos:column="26">(<argument><expr><name pos:line="73" pos:column="27">highReached</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block></function>

        <function><type><attribute pos:line="77" pos:column="9">[<expr><name pos:line="77" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="78" pos:column="9">public</specifier> <name pos:line="78" pos:column="16">void</name></type> <name pos:line="78" pos:column="21">QuerySameWords</name><parameter_list pos:line="78" pos:column="35">()</parameter_list>
        <block pos:line="79" pos:column="9">{
            <for pos:line="80" pos:column="13">for (<init><decl><type><name pos:line="80" pos:column="18">int</name></type> <name pos:line="80" pos:column="22">i</name> <init pos:line="80" pos:column="24">= <expr><lit:literal type="number" pos:line="80" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="80" pos:column="29">i</name> <op:operator pos:line="80" pos:column="31">&lt;</op:operator> <lit:literal type="number" pos:line="80" pos:column="33">100</lit:literal></expr>;</condition> <incr><expr><name pos:line="80" pos:column="38">i</name><op:operator pos:line="80" pos:column="39">++</op:operator></expr></incr>)
            <block pos:line="81" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="82" pos:column="17">string</name></type> <name pos:line="82" pos:column="24">word</name> <init pos:line="82" pos:column="29">= <expr><call><name pos:line="82" pos:column="31">GenerateRandomString</name><argument_list pos:line="82" pos:column="51">(<argument><expr><lit:literal type="number" pos:line="82" pos:column="52">20</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="83" pos:column="17">corrector</name><op:operator pos:line="83" pos:column="26">.</op:operator><name pos:line="83" pos:column="27">AddWords</name></name><argument_list pos:line="83" pos:column="35">(<argument><expr><call><name pos:line="83" pos:column="36">GenerateRandomWordList</name><argument_list pos:line="83" pos:column="58">(<argument><expr><lit:literal type="number" pos:line="83" pos:column="59">200</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="84" pos:column="17">corrector</name><op:operator pos:line="84" pos:column="26">.</op:operator><name pos:line="84" pos:column="27">AddWords</name></name><argument_list pos:line="84" pos:column="35">(<argument><expr><op:operator pos:line="84" pos:column="36">new</op:operator> <name><name pos:line="84" pos:column="40">string</name><index pos:line="84" pos:column="46">[]</index></name> <block pos:line="84" pos:column="49">{<expr><name pos:line="84" pos:column="50">word</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="85" pos:column="17">var</name></type> <name pos:line="85" pos:column="21">results</name> <init pos:line="85" pos:column="29">= <expr><call><name><name pos:line="85" pos:column="31">corrector</name><op:operator pos:line="85" pos:column="40">.</op:operator><name pos:line="85" pos:column="41">FindSimilarWords</name></name><argument_list pos:line="85" pos:column="57">(<argument><expr><name pos:line="85" pos:column="58">word</name></expr></argument>)</argument_list></call><op:operator pos:line="85" pos:column="63">.</op:operator><call><name pos:line="85" pos:column="64">ToArray</name><argument_list pos:line="85" pos:column="71">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="86" pos:column="17">Assert</name><op:operator pos:line="86" pos:column="23">.</op:operator><name pos:line="86" pos:column="24">IsNotNull</name></name><argument_list pos:line="86" pos:column="33">(<argument><expr><name pos:line="86" pos:column="34">results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="87" pos:column="17">Assert</name><op:operator pos:line="87" pos:column="23">.</op:operator><name pos:line="87" pos:column="24">IsTrue</name></name><argument_list pos:line="87" pos:column="30">(<argument><expr><call><name><name pos:line="87" pos:column="31">results</name><op:operator pos:line="87" pos:column="38">.</op:operator><name pos:line="87" pos:column="39">Any</name></name><argument_list pos:line="87" pos:column="42">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="88" pos:column="17">Assert</name><op:operator pos:line="88" pos:column="23">.</op:operator><name pos:line="88" pos:column="24">IsTrue</name></name><argument_list pos:line="88" pos:column="30">(<argument><expr><call><name><name pos:line="88" pos:column="31">results</name><op:operator pos:line="88" pos:column="38">.</op:operator><name pos:line="88" pos:column="39">First</name></name><argument_list pos:line="88" pos:column="44">()</argument_list></call><op:operator pos:line="88" pos:column="46">.</op:operator><call><name pos:line="88" pos:column="47">Equals</name><argument_list pos:line="88" pos:column="53">(<argument><expr><name pos:line="88" pos:column="54">word</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></function>

        <function><type><attribute pos:line="92" pos:column="9">[<expr><name pos:line="92" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="93" pos:column="9">public</specifier> <name pos:line="93" pos:column="16">void</name></type> <name pos:line="93" pos:column="21">QuerySlightlyDifferentWords</name><parameter_list pos:line="93" pos:column="48">()</parameter_list>
        <block pos:line="94" pos:column="9">{
            <for pos:line="95" pos:column="13">for (<init><decl><type><name pos:line="95" pos:column="18">int</name></type> <name pos:line="95" pos:column="22">i</name> <init pos:line="95" pos:column="24">= <expr><lit:literal type="number" pos:line="95" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="95" pos:column="29">i</name> <op:operator pos:line="95" pos:column="31">&lt;</op:operator> <lit:literal type="number" pos:line="95" pos:column="33">100</lit:literal></expr>;</condition> <incr><expr><name pos:line="95" pos:column="38">i</name><op:operator pos:line="95" pos:column="39">++</op:operator></expr></incr>)
            <block pos:line="96" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="97" pos:column="17">string</name></type> <name pos:line="97" pos:column="24">word</name> <init pos:line="97" pos:column="29">= <expr><call><name pos:line="97" pos:column="31">GenerateRandomString</name><argument_list pos:line="97" pos:column="51">(<argument><expr><lit:literal type="number" pos:line="97" pos:column="52">20</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="98" pos:column="17">corrector</name><op:operator pos:line="98" pos:column="26">.</op:operator><name pos:line="98" pos:column="27">AddWords</name></name><argument_list pos:line="98" pos:column="35">(<argument><expr><call><name pos:line="98" pos:column="36">GenerateRandomWordList</name><argument_list pos:line="98" pos:column="58">(<argument><expr><lit:literal type="number" pos:line="98" pos:column="59">200</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="99" pos:column="17">corrector</name><op:operator pos:line="99" pos:column="26">.</op:operator><name pos:line="99" pos:column="27">AddWords</name></name><argument_list pos:line="99" pos:column="35">(<argument><expr><op:operator pos:line="99" pos:column="36">new</op:operator> <name><name pos:line="99" pos:column="40">string</name><index pos:line="99" pos:column="46">[]</index></name> <block pos:line="99" pos:column="49">{ <expr><name pos:line="99" pos:column="51">word</name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="100" pos:column="17">int</name></type> <name pos:line="100" pos:column="21">splitIndex</name> <init pos:line="100" pos:column="32">= <expr><call><name pos:line="100" pos:column="34">GenerateRandomInt</name><argument_list pos:line="100" pos:column="51">(<argument><expr><lit:literal type="number" pos:line="100" pos:column="52">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="100" pos:column="55">word</name><op:operator pos:line="100" pos:column="59">.</op:operator><name pos:line="100" pos:column="60">Length</name></name> <op:operator pos:line="100" pos:column="67">-</op:operator> <lit:literal type="number" pos:line="100" pos:column="69">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="101" pos:column="17">var</name></type> <name pos:line="101" pos:column="21">changedWord</name> <init pos:line="101" pos:column="33">= <expr><call><name><name pos:line="101" pos:column="35">word</name><op:operator pos:line="101" pos:column="39">.</op:operator><name pos:line="101" pos:column="40">Substring</name></name><argument_list pos:line="101" pos:column="49">(<argument><expr><lit:literal type="number" pos:line="101" pos:column="50">0</lit:literal></expr></argument>, <argument><expr><name pos:line="101" pos:column="53">splitIndex</name> <op:operator pos:line="101" pos:column="64">+</op:operator> <lit:literal type="number" pos:line="101" pos:column="66">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="101" pos:column="69">+</op:operator> <call><name pos:line="101" pos:column="71">GenerateRandomChar</name><argument_list pos:line="101" pos:column="89">()</argument_list></call> <op:operator pos:line="101" pos:column="92">+</op:operator> <call><name><name pos:line="101" pos:column="94">word</name><op:operator pos:line="101" pos:column="98">.</op:operator>
                    <name pos:line="102" pos:column="21">Substring</name></name><argument_list pos:line="102" pos:column="30">(<argument><expr><name pos:line="102" pos:column="31">splitIndex</name> <op:operator pos:line="102" pos:column="42">+</op:operator> <lit:literal type="number" pos:line="102" pos:column="44">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="103" pos:column="17">var</name></type> <name pos:line="103" pos:column="21">results</name> <init pos:line="103" pos:column="29">= <expr><call><name><name pos:line="103" pos:column="31">corrector</name><op:operator pos:line="103" pos:column="40">.</op:operator><name pos:line="103" pos:column="41">FindSimilarWords</name></name><argument_list pos:line="103" pos:column="57">(<argument><expr><name pos:line="103" pos:column="58">changedWord</name></expr></argument>)</argument_list></call><op:operator pos:line="103" pos:column="70">.</op:operator><call><name pos:line="103" pos:column="71">ToArray</name><argument_list pos:line="103" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="104" pos:column="17">Assert</name><op:operator pos:line="104" pos:column="23">.</op:operator><name pos:line="104" pos:column="24">IsNotNull</name></name><argument_list pos:line="104" pos:column="33">(<argument><expr><name pos:line="104" pos:column="34">results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="105" pos:column="17">Assert</name><op:operator pos:line="105" pos:column="23">.</op:operator><name pos:line="105" pos:column="24">IsTrue</name></name><argument_list pos:line="105" pos:column="30">(<argument><expr><call><name><name pos:line="105" pos:column="31">results</name><op:operator pos:line="105" pos:column="38">.</op:operator><name pos:line="105" pos:column="39">Any</name></name><argument_list pos:line="105" pos:column="42">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="106" pos:column="17">Assert</name><op:operator pos:line="106" pos:column="23">.</op:operator><name pos:line="106" pos:column="24">IsTrue</name></name><argument_list pos:line="106" pos:column="30">(<argument><expr><call><name><name pos:line="106" pos:column="31">results</name><op:operator pos:line="106" pos:column="38">.</op:operator><name pos:line="106" pos:column="39">First</name></name><argument_list pos:line="106" pos:column="44">()</argument_list></call><op:operator pos:line="106" pos:column="46">.</op:operator><call><name pos:line="106" pos:column="47">Equals</name><argument_list pos:line="106" pos:column="53">(<argument><expr><name pos:line="106" pos:column="54">word</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
