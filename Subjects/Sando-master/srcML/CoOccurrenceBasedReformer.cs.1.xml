<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Core\Core\QueryRefomers\CoOccurrenceBasedReformer.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Text</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Sando</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">Core</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">Tools</name></name>;</using>

<namespace pos:line="7" pos:column="1">namespace <name><name pos:line="7" pos:column="11">Sando</name><op:operator pos:line="7" pos:column="16">.</op:operator><name pos:line="7" pos:column="17">Core</name><op:operator pos:line="7" pos:column="21">.</op:operator><name pos:line="7" pos:column="22">QueryRefomers</name></name>
<block pos:line="8" pos:column="1">{
    <class><specifier pos:line="9" pos:column="5">public</specifier> class <name pos:line="9" pos:column="18">CoOccurrenceBasedReformer</name> <super pos:line="9" pos:column="44">: <name pos:line="9" pos:column="46">AbstractContextSensitiveWordReformer</name></super>
    <block pos:line="10" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="11" pos:column="9">private</specifier> <name><name pos:line="11" pos:column="17">List</name><argument_list pos:line="11" pos:column="21">&lt;<argument><name pos:line="11" pos:column="22">string</name></argument>&gt;</argument_list></name></type> <name pos:line="11" pos:column="30">otherWords</name></decl>;</decl_stmt>

        <constructor><specifier pos:line="13" pos:column="9">public</specifier> <name pos:line="13" pos:column="16">CoOccurrenceBasedReformer</name><parameter_list pos:line="13" pos:column="41">(<param><decl><type><name pos:line="13" pos:column="42">DictionaryBasedSplitter</name></type> <name pos:line="13" pos:column="66">localDictionary</name></decl></param>)</parameter_list> 
            <member_list pos:line="14" pos:column="13">: <call><name pos:line="14" pos:column="15">base</name><argument_list pos:line="14" pos:column="19">(<argument><expr><name pos:line="14" pos:column="20">localDictionary</name></expr></argument>)</argument_list></call>
        </member_list><block pos:line="15" pos:column="9">{
        }</block></constructor>

        <function><type><specifier pos:line="18" pos:column="9">protected</specifier> <specifier pos:line="18" pos:column="19">override</specifier> <name><name pos:line="18" pos:column="28">IEnumerable</name><argument_list pos:line="18" pos:column="39">&lt;<argument><name pos:line="18" pos:column="40">ReformedWord</name></argument>&gt;</argument_list></name></type> <name pos:line="18" pos:column="54">GetReformedTargetInternal</name><parameter_list pos:line="18" pos:column="79">(<param><decl><type><name pos:line="18" pos:column="80">string</name></type> <name pos:line="18" pos:column="87">target</name></decl></param>)</parameter_list>
        <block pos:line="19" pos:column="9">{
            <if pos:line="20" pos:column="13">if <condition pos:line="20" pos:column="16">(<expr><call><name><name pos:line="20" pos:column="17">otherWords</name><op:operator pos:line="20" pos:column="27">.</op:operator><name pos:line="20" pos:column="28">Any</name></name><argument_list pos:line="20" pos:column="31">()</argument_list></call></expr>)</condition><then pos:line="20" pos:column="34">
            <block pos:line="21" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="22" pos:column="17">var</name></type> <name pos:line="22" pos:column="21">commonWords</name> <init pos:line="22" pos:column="33">= <expr><call><name><name pos:line="22" pos:column="35">otherWords</name><op:operator pos:line="22" pos:column="45">.</op:operator><name pos:line="22" pos:column="46">Select</name></name><argument_list pos:line="22" pos:column="52">(<argument><expr><lambda><name pos:line="22" pos:column="53">w</name> <op:operator pos:line="22" pos:column="55">=&gt;</op:operator> <call><name><name pos:line="22" pos:column="58">localDictionary</name><op:operator pos:line="22" pos:column="73">.</op:operator><name pos:line="22" pos:column="74">GetCoOccurredWordsAndCount</name></name><argument_list pos:line="22" pos:column="100">(<argument><expr><name pos:line="22" pos:column="101">w</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call>
                    <op:operator pos:line="23" pos:column="21">.</op:operator><call><name pos:line="23" pos:column="22">Aggregate</name><argument_list pos:line="23" pos:column="31">(<argument><expr><name pos:line="23" pos:column="32">GetDictionaryIntersect</name></expr></argument>)</argument_list></call><op:operator pos:line="23" pos:column="55">.</op:operator><call><name pos:line="23" pos:column="56">ToList</name><argument_list pos:line="23" pos:column="62">()</argument_list></call><op:operator pos:line="23" pos:column="64">.</op:operator><call><name pos:line="23" pos:column="65">OrderBy</name><argument_list pos:line="23" pos:column="72">(<argument><expr><lambda><name pos:line="23" pos:column="73">p</name> <op:operator pos:line="23" pos:column="75">=&gt;</op:operator> <op:operator pos:line="23" pos:column="78">-</op:operator><name><name pos:line="23" pos:column="79">p</name><op:operator pos:line="23" pos:column="80">.</op:operator><name pos:line="23" pos:column="81">Value</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="23" pos:column="87">.</op:operator><call><name pos:line="23" pos:column="88">Select</name><argument_list pos:line="23" pos:column="94">(<argument><expr><lambda><name pos:line="23" pos:column="95">p</name> <op:operator pos:line="23" pos:column="97">=&gt;</op:operator> <name><name pos:line="23" pos:column="100">p</name><op:operator pos:line="23" pos:column="101">.</op:operator><name pos:line="23" pos:column="102">Key</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return pos:line="24" pos:column="17">return <expr><call><name><name pos:line="24" pos:column="24">commonWords</name><op:operator pos:line="24" pos:column="35">.</op:operator><name pos:line="24" pos:column="36">Select</name></name><argument_list pos:line="24" pos:column="42">(<argument><expr><lambda><name pos:line="24" pos:column="43">w</name> <op:operator pos:line="24" pos:column="45">=&gt;</op:operator> <op:operator pos:line="24" pos:column="48">new</op:operator> <call><name pos:line="24" pos:column="52">ReformedWord</name><argument_list pos:line="24" pos:column="64">(<argument><expr><name><name pos:line="24" pos:column="65">TermChangeCategory</name><op:operator pos:line="24" pos:column="83">.</op:operator><name pos:line="24" pos:column="84">COOCCUR</name></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="93">target</name></expr></argument>, 
                    <argument><expr><name pos:line="25" pos:column="21">w</name></expr></argument>, <argument><expr><call><name pos:line="25" pos:column="24">GetMessage</name><argument_list pos:line="25" pos:column="34">(<argument><expr><name pos:line="25" pos:column="35">target</name></expr></argument>, <argument><expr><name pos:line="25" pos:column="43">w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
            <return pos:line="27" pos:column="13">return <expr><call><name><name pos:line="27" pos:column="20">Enumerable</name><op:operator pos:line="27" pos:column="30">.</op:operator><name><name pos:line="27" pos:column="31">Empty</name><argument_list pos:line="27" pos:column="36">&lt;<argument><name pos:line="27" pos:column="37">ReformedWord</name></argument>&gt;</argument_list></name></name><argument_list pos:line="27" pos:column="50">()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="30" pos:column="9">protected</specifier> <specifier pos:line="30" pos:column="19">override</specifier> <name pos:line="30" pos:column="28">int</name></type> <name pos:line="30" pos:column="32">GetMaximumReformCount</name><parameter_list pos:line="30" pos:column="53">()</parameter_list>
        <block pos:line="31" pos:column="9">{
            <return pos:line="32" pos:column="13">return <expr><name><name pos:line="32" pos:column="20">QuerySuggestionConfigurations</name><op:operator pos:line="32" pos:column="49">.</op:operator><name pos:line="32" pos:column="50">COOCCURRENCE_WORDS_MAX_COUNT</name></name></expr>;</return>
        }</block></function>


        <function><type><specifier pos:line="36" pos:column="9">private</specifier> <name><name pos:line="36" pos:column="17">Dictionary</name><argument_list pos:line="36" pos:column="27">&lt;<argument><name pos:line="36" pos:column="28">string</name></argument>, <argument><name pos:line="36" pos:column="36">int</name></argument>&gt;</argument_list></name></type> <name pos:line="36" pos:column="41">GetDictionaryIntersect</name><parameter_list pos:line="36" pos:column="63">(<param><decl><type><name><name pos:line="36" pos:column="64">Dictionary</name><argument_list pos:line="36" pos:column="74">&lt;<argument><name pos:line="36" pos:column="75">string</name></argument>, <argument><name pos:line="36" pos:column="83">int</name></argument>&gt;</argument_list></name></type> <name pos:line="36" pos:column="88">dict1</name></decl></param>, 
            <param><decl><type><name><name pos:line="37" pos:column="13">Dictionary</name><argument_list pos:line="37" pos:column="23">&lt;<argument><name pos:line="37" pos:column="24">string</name></argument>, <argument><name pos:line="37" pos:column="32">int</name></argument>&gt;</argument_list></name></type> <name pos:line="37" pos:column="37">dict2</name></decl></param>)</parameter_list>
        <block pos:line="38" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="39" pos:column="13">var</name></type> <name pos:line="39" pos:column="17">dictionary</name> <init pos:line="39" pos:column="28">= <expr><op:operator pos:line="39" pos:column="30">new</op:operator> <call><name><name pos:line="39" pos:column="34">Dictionary</name><argument_list pos:line="39" pos:column="44">&lt;<argument><name pos:line="39" pos:column="45">string</name></argument>, <argument><name pos:line="39" pos:column="53">int</name></argument>&gt;</argument_list></name><argument_list pos:line="39" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="40" pos:column="13">var</name></type> <name pos:line="40" pos:column="17">list1</name> <init pos:line="40" pos:column="23">= <expr><call><name><name pos:line="40" pos:column="25">dict1</name><op:operator pos:line="40" pos:column="30">.</op:operator><name pos:line="40" pos:column="31">ToList</name></name><argument_list pos:line="40" pos:column="37">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="41" pos:column="13">foreach (<init><decl><type><name pos:line="41" pos:column="22">var</name></type> <name pos:line="41" pos:column="26">word</name> <range pos:line="41" pos:column="31">in <expr><name pos:line="41" pos:column="34">list1</name></expr></range></decl></init>)
            <block pos:line="42" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="43" pos:column="17">int</name></type> <name pos:line="43" pos:column="21">v2</name></decl>;</decl_stmt>
                <if pos:line="44" pos:column="17">if <condition pos:line="44" pos:column="20">(<expr><call><name><name pos:line="44" pos:column="21">dict2</name><op:operator pos:line="44" pos:column="26">.</op:operator><name pos:line="44" pos:column="27">TryGetValue</name></name><argument_list pos:line="44" pos:column="38">(<argument><expr><name><name pos:line="44" pos:column="39">word</name><op:operator pos:line="44" pos:column="43">.</op:operator><name pos:line="44" pos:column="44">Key</name></name></expr></argument>, <argument><expr pos:line="44" pos:column="49">out <name pos:line="44" pos:column="53">v2</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="44" pos:column="57">
                <block pos:line="45" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="46" pos:column="21">dictionary</name><op:operator pos:line="46" pos:column="31">.</op:operator><name pos:line="46" pos:column="32">Add</name></name><argument_list pos:line="46" pos:column="35">(<argument><expr><name><name pos:line="46" pos:column="36">word</name><op:operator pos:line="46" pos:column="40">.</op:operator><name pos:line="46" pos:column="41">Key</name></name></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="46">word</name><op:operator pos:line="46" pos:column="50">.</op:operator><name pos:line="46" pos:column="51">Value</name></name> <op:operator pos:line="46" pos:column="57">+</op:operator> <name pos:line="46" pos:column="59">v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></foreach>
            <return pos:line="49" pos:column="13">return <expr><name pos:line="49" pos:column="20">dictionary</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="52" pos:column="9">private</specifier> <name pos:line="52" pos:column="17">string</name></type> <name pos:line="52" pos:column="24">GetMessage</name><parameter_list pos:line="52" pos:column="34">(<param><decl><type><name pos:line="52" pos:column="35">string</name></type> <name pos:line="52" pos:column="42">original</name></decl></param>, <param><decl><type><name pos:line="52" pos:column="52">string</name></type> <name pos:line="52" pos:column="59">reformed</name></decl></param>)</parameter_list>
        <block pos:line="53" pos:column="9">{
            <return pos:line="54" pos:column="13">return <expr><lit:literal type="string" pos:line="54" pos:column="20">"Neighbor"</lit:literal></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="57" pos:column="9">public</specifier> <specifier pos:line="57" pos:column="16">override</specifier> <name pos:line="57" pos:column="25">void</name></type> <name pos:line="57" pos:column="30">SetContextWords</name><parameter_list pos:line="57" pos:column="45">(<param><decl><type><name><name pos:line="57" pos:column="46">IEnumerable</name><argument_list pos:line="57" pos:column="57">&lt;<argument><name pos:line="57" pos:column="58">string</name></argument>&gt;</argument_list></name></type> <name pos:line="57" pos:column="66">words</name></decl></param>)</parameter_list>
        <block pos:line="58" pos:column="9">{
            <expr_stmt><expr><name><name pos:line="59" pos:column="13">this</name><op:operator pos:line="59" pos:column="17">.</op:operator><name pos:line="59" pos:column="18">otherWords</name></name> <op:operator pos:line="59" pos:column="29">=</op:operator> <call><name><name pos:line="59" pos:column="31">words</name><op:operator pos:line="59" pos:column="36">.</op:operator><name pos:line="59" pos:column="37">Where</name></name><argument_list pos:line="59" pos:column="42">(<argument><expr><lambda><name pos:line="59" pos:column="43">w</name> <op:operator pos:line="59" pos:column="45">=&gt;</op:operator> <call><name><name pos:line="59" pos:column="48">localDictionary</name><op:operator pos:line="59" pos:column="63">.</op:operator><name pos:line="59" pos:column="64">DoesWordExist</name></name>
                <argument_list pos:line="60" pos:column="17">(<argument><expr><name pos:line="60" pos:column="18">w</name></expr></argument>, <argument><expr><name><name pos:line="60" pos:column="21">DictionaryOption</name><op:operator pos:line="60" pos:column="37">.</op:operator><name pos:line="60" pos:column="38">NoStemming</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="60" pos:column="50">&amp;&amp;</op:operator> <op:operator pos:line="60" pos:column="53">!</op:operator><call><name><name pos:line="60" pos:column="54">String</name><op:operator pos:line="60" pos:column="60">.</op:operator><name pos:line="60" pos:column="61">IsNullOrEmpty</name></name><argument_list pos:line="60" pos:column="74">(<argument><expr><name pos:line="60" pos:column="75">w</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="60" pos:column="78">.</op:operator><call><name pos:line="60" pos:column="79">ToList</name><argument_list pos:line="60" pos:column="85">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
