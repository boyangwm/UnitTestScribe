<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Core\Core\Tools\TimedProcessor.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Text</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Timers</name></name>;</using>

<namespace pos:line="7" pos:column="1">namespace <name><name pos:line="7" pos:column="11">Sando</name><op:operator pos:line="7" pos:column="16">.</op:operator><name pos:line="7" pos:column="17">Core</name><op:operator pos:line="7" pos:column="21">.</op:operator><name pos:line="7" pos:column="22">Tools</name></name>
<block pos:line="8" pos:column="1">{
    <class><specifier pos:line="9" pos:column="5">public</specifier> class <name pos:line="9" pos:column="18">TimedProcessor</name>
    <block pos:line="10" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="11" pos:column="9">private</specifier> <specifier pos:line="11" pos:column="17">static</specifier> <name pos:line="11" pos:column="24">TimedProcessor</name></type> <name pos:line="11" pos:column="39">instance</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="12" pos:column="9">private</specifier> <specifier pos:line="12" pos:column="17">readonly</specifier> <name><name pos:line="12" pos:column="26">List</name><argument_list pos:line="12" pos:column="30">&lt;<argument><name pos:line="12" pos:column="31">TimeWorkItem</name></argument>&gt;</argument_list></name></type> <name pos:line="12" pos:column="45">workItems</name> <init pos:line="12" pos:column="55">= <expr><op:operator pos:line="12" pos:column="57">new</op:operator> <call><name><name pos:line="12" pos:column="61">List</name><argument_list pos:line="12" pos:column="65">&lt;<argument><name pos:line="12" pos:column="66">TimeWorkItem</name></argument>&gt;</argument_list></name><argument_list pos:line="12" pos:column="79">()</argument_list></call></expr></init></decl>;</decl_stmt> 
        <decl_stmt><decl><type><specifier pos:line="13" pos:column="9">private</specifier> <specifier pos:line="13" pos:column="17">readonly</specifier> <name pos:line="13" pos:column="26">object</name></type> <name pos:line="13" pos:column="33">locker</name> <init pos:line="13" pos:column="40">= <expr><op:operator pos:line="13" pos:column="42">new</op:operator> <call><name pos:line="13" pos:column="46">object</name><argument_list pos:line="13" pos:column="52">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <function><type><specifier pos:line="15" pos:column="9">public</specifier> <specifier pos:line="15" pos:column="16">static</specifier> <name pos:line="15" pos:column="23">TimedProcessor</name></type> <name pos:line="15" pos:column="38">GetInstance</name><parameter_list pos:line="15" pos:column="49">()</parameter_list>
        <block pos:line="16" pos:column="9">{
            <return pos:line="17" pos:column="13">return <expr><name pos:line="17" pos:column="20">instance</name> <op:operator pos:line="17" pos:column="29">??</op:operator> <op:operator pos:line="17" pos:column="32">(</op:operator><name pos:line="17" pos:column="33">instance</name> <op:operator pos:line="17" pos:column="42">=</op:operator> <op:operator pos:line="17" pos:column="44">new</op:operator> <call><name pos:line="17" pos:column="48">TimedProcessor</name><argument_list pos:line="17" pos:column="62">()</argument_list></call><op:operator pos:line="17" pos:column="64">)</op:operator></expr>;</return>
        }</block></function>

        <class><specifier pos:line="20" pos:column="9">private</specifier> class <name pos:line="20" pos:column="23">TimeWorkItem</name> <super pos:line="20" pos:column="36">: <name pos:line="20" pos:column="38">IDisposable</name></super>
        <block pos:line="21" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="22" pos:column="13">public</specifier> <name pos:line="22" pos:column="20">Action</name></type> <name pos:line="22" pos:column="27">Task</name> <block pos:line="22" pos:column="32">{ <function_decl><specifier pos:line="22" pos:column="34">private</specifier> <name pos:line="22" pos:column="42">set</name>;</function_decl> <function_decl><name pos:line="22" pos:column="47">get</name>;</function_decl> }</block></decl></decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="23" pos:column="13">private</specifier> <name pos:line="23" pos:column="21">int</name></type> <name pos:line="23" pos:column="25">MilliSeconds</name> <block pos:line="23" pos:column="38">{ <function_decl><name pos:line="23" pos:column="40">set</name>;</function_decl> <function_decl><name pos:line="23" pos:column="45">get</name>;</function_decl> }</block></decl></decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="24" pos:column="13">private</specifier> <specifier pos:line="24" pos:column="21">readonly</specifier> <name pos:line="24" pos:column="30">Timer</name></type> <name pos:line="24" pos:column="36">timer</name></decl>;</decl_stmt>

            <constructor><specifier pos:line="26" pos:column="13">public</specifier> <name pos:line="26" pos:column="20">TimeWorkItem</name><parameter_list pos:line="26" pos:column="32">(<param><decl><type><name pos:line="26" pos:column="33">Action</name></type> <name pos:line="26" pos:column="40">Task</name></decl></param>, <param><decl><type><name pos:line="26" pos:column="46">int</name></type> <name pos:line="26" pos:column="50">MilliSeconds</name></decl></param>)</parameter_list>
            <block pos:line="27" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="28" pos:column="17">this</name><op:operator pos:line="28" pos:column="21">.</op:operator><name pos:line="28" pos:column="22">Task</name></name> <op:operator pos:line="28" pos:column="27">=</op:operator> <name pos:line="28" pos:column="29">Task</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="29" pos:column="17">this</name><op:operator pos:line="29" pos:column="21">.</op:operator><name pos:line="29" pos:column="22">MilliSeconds</name></name> <op:operator pos:line="29" pos:column="35">=</op:operator> <name pos:line="29" pos:column="37">MilliSeconds</name></expr>;</expr_stmt>

                <expr_stmt><expr><name><name pos:line="31" pos:column="17">this</name><op:operator pos:line="31" pos:column="21">.</op:operator><name pos:line="31" pos:column="22">timer</name></name> <op:operator pos:line="31" pos:column="28">=</op:operator> <op:operator pos:line="31" pos:column="30">new</op:operator> <call><name pos:line="31" pos:column="34">Timer</name><argument_list pos:line="31" pos:column="39">(<argument><expr><name pos:line="31" pos:column="40">MilliSeconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="32" pos:column="17">timer</name><op:operator pos:line="32" pos:column="22">.</op:operator><name pos:line="32" pos:column="23">Elapsed</name></name> <op:operator pos:line="32" pos:column="31">+=</op:operator> <lambda><parameter_list pos:line="32" pos:column="34">(<param><decl><name pos:line="32" pos:column="35">sender</name></decl></param>, <param><decl><name pos:line="32" pos:column="43">args</name></decl></param>)</parameter_list> <op:operator pos:line="32" pos:column="49">=&gt;</op:operator> <call><name><name pos:line="32" pos:column="52">Task</name><op:operator pos:line="32" pos:column="56">.</op:operator><name pos:line="32" pos:column="57">Invoke</name></name><argument_list pos:line="32" pos:column="63">()</argument_list></call></lambda></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="33" pos:column="17">timer</name><op:operator pos:line="33" pos:column="22">.</op:operator><name pos:line="33" pos:column="23">Enabled</name></name> <op:operator pos:line="33" pos:column="31">=</op:operator> <lit:literal type="boolean" pos:line="33" pos:column="33">true</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="34" pos:column="17">timer</name><op:operator pos:line="34" pos:column="22">.</op:operator><name pos:line="34" pos:column="23">AutoReset</name></name> <op:operator pos:line="34" pos:column="33">=</op:operator> <lit:literal type="boolean" pos:line="34" pos:column="35">true</lit:literal></expr>;</expr_stmt>
            }</block></constructor>

            <function><type><specifier pos:line="37" pos:column="13">public</specifier> <name pos:line="37" pos:column="20">void</name></type> <name pos:line="37" pos:column="25">Dispose</name><parameter_list pos:line="37" pos:column="32">()</parameter_list>
            <block pos:line="38" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="39" pos:column="17">timer</name><op:operator pos:line="39" pos:column="22">.</op:operator><name pos:line="39" pos:column="23">Enabled</name></name> <op:operator pos:line="39" pos:column="31">=</op:operator> <lit:literal type="boolean" pos:line="39" pos:column="33">false</lit:literal></expr>;</expr_stmt>
            }</block></function>
        }</block></class>

        <function><type><specifier pos:line="43" pos:column="9">public</specifier> <name pos:line="43" pos:column="16">void</name></type> <name pos:line="43" pos:column="21">AddTimedTask</name><parameter_list pos:line="43" pos:column="33">(<param><decl><type><name pos:line="43" pos:column="34">Action</name></type> <name pos:line="43" pos:column="41">task</name></decl></param>, <param><decl><type><name pos:line="43" pos:column="47">int</name></type> <name pos:line="43" pos:column="51">time</name></decl></param>)</parameter_list>
        <block pos:line="44" pos:column="9">{
            <lock pos:line="45" pos:column="13">lock (<expr><name pos:line="45" pos:column="19">locker</name></expr>)
            <block pos:line="46" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="47" pos:column="17">workItems</name><op:operator pos:line="47" pos:column="26">.</op:operator><name pos:line="47" pos:column="27">Add</name></name><argument_list pos:line="47" pos:column="30">(<argument><expr><op:operator pos:line="47" pos:column="31">new</op:operator> <call><name pos:line="47" pos:column="35">TimeWorkItem</name><argument_list pos:line="47" pos:column="47">(<argument><expr><name pos:line="47" pos:column="48">task</name></expr></argument>, <argument><expr><name pos:line="47" pos:column="54">time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></lock>
        }</block></function>

        <function><type><specifier pos:line="51" pos:column="9">public</specifier> <name pos:line="51" pos:column="16">void</name></type> <name pos:line="51" pos:column="21">RemoveTimedTask</name><parameter_list pos:line="51" pos:column="36">(<param><decl><type><name pos:line="51" pos:column="37">Action</name></type> <name pos:line="51" pos:column="44">task</name></decl></param>)</parameter_list>
        <block pos:line="52" pos:column="9">{
            <lock pos:line="53" pos:column="13">lock (<expr><name pos:line="53" pos:column="19">locker</name></expr>)
            <block pos:line="54" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="55" pos:column="17">int</name></type> <name pos:line="55" pos:column="21">index</name> <init pos:line="55" pos:column="27">= <expr><call><name><name pos:line="55" pos:column="29">workItems</name><op:operator pos:line="55" pos:column="38">.</op:operator><name pos:line="55" pos:column="39">FindIndex</name></name><argument_list pos:line="55" pos:column="48">(<argument><expr><lambda><name pos:line="55" pos:column="49">item</name> <op:operator pos:line="55" pos:column="54">=&gt;</op:operator> <name><name pos:line="55" pos:column="57">item</name><op:operator pos:line="55" pos:column="61">.</op:operator><name pos:line="55" pos:column="62">Task</name></name> <op:operator pos:line="55" pos:column="67">==</op:operator> <name pos:line="55" pos:column="70">task</name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="56" pos:column="17">if <condition pos:line="56" pos:column="20">(<expr><call><name><name pos:line="56" pos:column="21">workItems</name><op:operator pos:line="56" pos:column="30">.</op:operator><name pos:line="56" pos:column="31">IsIndexInRange</name></name><argument_list pos:line="56" pos:column="45">(<argument><expr><name pos:line="56" pos:column="46">index</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="56" pos:column="53">
                <block pos:line="57" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="58" pos:column="21">workItems</name><op:operator pos:line="58" pos:column="30">.</op:operator><name pos:line="58" pos:column="31">ElementAt</name></name><argument_list pos:line="58" pos:column="40">(<argument><expr><name pos:line="58" pos:column="41">index</name></expr></argument>)</argument_list></call><op:operator pos:line="58" pos:column="47">.</op:operator><call><name pos:line="58" pos:column="48">Dispose</name><argument_list pos:line="58" pos:column="55">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="59" pos:column="21">workItems</name><op:operator pos:line="59" pos:column="30">.</op:operator><name pos:line="59" pos:column="31">RemoveAt</name></name><argument_list pos:line="59" pos:column="39">(<argument><expr><name pos:line="59" pos:column="40">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></lock>
        }</block></function>

        <function><type><specifier pos:line="64" pos:column="9">public</specifier> <name pos:line="64" pos:column="16">bool</name></type> <name pos:line="64" pos:column="21">HasTasks</name><parameter_list pos:line="64" pos:column="29">()</parameter_list>
        <block pos:line="65" pos:column="9">{
            <lock pos:line="66" pos:column="13">lock (<expr><name pos:line="66" pos:column="19">locker</name></expr>)
            <block pos:line="67" pos:column="13">{
                <return pos:line="68" pos:column="17">return <expr><call><name><name pos:line="68" pos:column="24">workItems</name><op:operator pos:line="68" pos:column="33">.</op:operator><name pos:line="68" pos:column="34">Any</name></name><argument_list pos:line="68" pos:column="37">()</argument_list></call></expr>;</return>
            }</block></lock>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
