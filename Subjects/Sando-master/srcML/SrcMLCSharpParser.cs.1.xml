<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Parser\Parser\SrcMLCSharpParser.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">IO</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Linq</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Xml</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">Linq</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Sando</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">Core</name><op:operator pos:line="6" pos:column="17">.</op:operator><name pos:line="6" pos:column="18">Logging</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Sando</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">ExtensionContracts</name><op:operator pos:line="7" pos:column="31">.</op:operator><name pos:line="7" pos:column="32">ParserContracts</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Sando</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">ExtensionContracts</name><op:operator pos:line="8" pos:column="31">.</op:operator><name pos:line="8" pos:column="32">ProgramElementContracts</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">ABB</name><op:operator pos:line="9" pos:column="10">.</op:operator><name pos:line="9" pos:column="11">SrcML</name></name>;</using>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">Sando</name><op:operator pos:line="10" pos:column="12">.</op:operator><name pos:line="10" pos:column="13">Core</name><op:operator pos:line="10" pos:column="17">.</op:operator><name pos:line="10" pos:column="18">Logging</name><op:operator pos:line="10" pos:column="25">.</op:operator><name pos:line="10" pos:column="26">Events</name></name>;</using>

<namespace pos:line="12" pos:column="1">namespace <name><name pos:line="12" pos:column="11">Sando</name><op:operator pos:line="12" pos:column="16">.</op:operator><name pos:line="12" pos:column="17">Parser</name></name>
<block pos:line="13" pos:column="1">{
    <class><specifier pos:line="14" pos:column="5">public</specifier> class <name pos:line="14" pos:column="18">SrcMLCSharpParser</name> <super pos:line="14" pos:column="36">: <name pos:line="14" pos:column="38">IParser</name></super>
    <block pos:line="15" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="16" pos:column="9">private</specifier> <specifier pos:line="16" pos:column="17">static</specifier> <specifier pos:line="16" pos:column="24">readonly</specifier> <name pos:line="16" pos:column="33">int</name></type> <name pos:line="16" pos:column="37">snippetSize</name> <init pos:line="16" pos:column="49">= <expr><lit:literal type="number" pos:line="16" pos:column="51">5</lit:literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="18" pos:column="9">public</specifier> <name pos:line="18" pos:column="16">ISrcMLArchive</name></type> <name pos:line="18" pos:column="30">Archive</name> <block pos:line="18" pos:column="38">{ <function_decl><name pos:line="18" pos:column="40">get</name>;</function_decl> <function_decl><name pos:line="18" pos:column="45">set</name>;</function_decl> }</block></decl></decl_stmt>           <comment type="line" pos:line="18" pos:column="62">// should be deleted</comment>
        <decl_stmt><decl><type><specifier pos:line="19" pos:column="9">public</specifier> <name pos:line="19" pos:column="16">ISrcMLGenerator</name></type> <name pos:line="19" pos:column="32">Generator</name> <block pos:line="19" pos:column="42">{ <function_decl><name pos:line="19" pos:column="44">get</name>;</function_decl> <function_decl><name pos:line="19" pos:column="49">set</name>;</function_decl> }</block></decl></decl_stmt>

        <constructor><specifier pos:line="21" pos:column="9">public</specifier> <name pos:line="21" pos:column="16">SrcMLCSharpParser</name><parameter_list pos:line="21" pos:column="33">()</parameter_list> <block pos:line="21" pos:column="36">{
        }</block></constructor>

        <constructor><specifier pos:line="24" pos:column="9">public</specifier> <name pos:line="24" pos:column="16">SrcMLCSharpParser</name><parameter_list pos:line="24" pos:column="33">(<param><decl><type><name pos:line="24" pos:column="34">ISrcMLArchive</name></type> <name pos:line="24" pos:column="48">archive</name></decl></param>)</parameter_list> <block pos:line="24" pos:column="57">{
            <expr_stmt><expr><name><name pos:line="25" pos:column="13">this</name><op:operator pos:line="25" pos:column="17">.</op:operator><name pos:line="25" pos:column="18">Archive</name></name> <op:operator pos:line="25" pos:column="26">=</op:operator> <name pos:line="25" pos:column="28">archive</name></expr>;</expr_stmt>
        }</block></constructor>

        <constructor><specifier pos:line="28" pos:column="9">public</specifier> <name pos:line="28" pos:column="16">SrcMLCSharpParser</name><parameter_list pos:line="28" pos:column="33">(<param><decl><type><name pos:line="28" pos:column="34">ISrcMLGenerator</name></type> <name pos:line="28" pos:column="50">generator</name></decl></param>)</parameter_list> <block pos:line="28" pos:column="61">{
            <expr_stmt><expr><name><name pos:line="29" pos:column="13">this</name><op:operator pos:line="29" pos:column="17">.</op:operator><name pos:line="29" pos:column="18">Generator</name></name> <op:operator pos:line="29" pos:column="28">=</op:operator> <name pos:line="29" pos:column="30">generator</name></expr>;</expr_stmt>
        }</block></constructor>
        
        <function><type><specifier pos:line="32" pos:column="9">public</specifier> <name><name pos:line="32" pos:column="16">List</name><argument_list pos:line="32" pos:column="20">&lt;<argument><name pos:line="32" pos:column="21">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="32" pos:column="37">Parse</name><parameter_list pos:line="32" pos:column="42">(<param><decl><type><name pos:line="32" pos:column="43">string</name></type> <name pos:line="32" pos:column="50">fileName</name></decl></param>)</parameter_list> <block pos:line="32" pos:column="60">{
            <decl_stmt><decl><type><name pos:line="33" pos:column="13">var</name></type> <name pos:line="33" pos:column="17">programElements</name> <init pos:line="33" pos:column="33">= <expr><op:operator pos:line="33" pos:column="35">new</op:operator> <call><name><name pos:line="33" pos:column="39">List</name><argument_list pos:line="33" pos:column="43">&lt;<argument><name pos:line="33" pos:column="44">ProgramElement</name></argument>&gt;</argument_list></name><argument_list pos:line="33" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="34" pos:column="13">XElement</name></type> <name pos:line="34" pos:column="22">sourceElements</name></decl>;</decl_stmt>
            <if pos:line="35" pos:column="13">if<condition pos:line="35" pos:column="15">(<expr><name pos:line="35" pos:column="16">Archive</name> <op:operator pos:line="35" pos:column="24">!=</op:operator> <name pos:line="35" pos:column="27">null</name></expr>)</condition><then pos:line="35" pos:column="32"> <block pos:line="35" pos:column="33">{
                <expr_stmt><expr><name pos:line="36" pos:column="17">sourceElements</name> <op:operator pos:line="36" pos:column="32">=</op:operator> <call><name><name pos:line="36" pos:column="34">Archive</name><op:operator pos:line="36" pos:column="41">.</op:operator><name pos:line="36" pos:column="42">GetXElementForSourceFile</name></name><argument_list pos:line="36" pos:column="66">(<argument><expr><name pos:line="36" pos:column="67">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="37" pos:column="17">if<condition pos:line="37" pos:column="19">(<expr><name pos:line="37" pos:column="20">sourceElements</name> <op:operator pos:line="37" pos:column="35">!=</op:operator> <name pos:line="37" pos:column="38">null</name></expr>)</condition><then pos:line="37" pos:column="43"> <block pos:line="37" pos:column="44">{
                    <expr_stmt><expr><name pos:line="38" pos:column="21">programElements</name> <op:operator pos:line="38" pos:column="37">=</op:operator> <call><name pos:line="38" pos:column="39">Parse</name><argument_list pos:line="38" pos:column="44">(<argument><expr><name pos:line="38" pos:column="45">fileName</name></expr></argument>, <argument><expr><name pos:line="38" pos:column="55">sourceElements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="39" pos:column="19">else <block pos:line="39" pos:column="24">{
                    <expr_stmt><expr><call><name><name pos:line="40" pos:column="21">LogEvents</name><op:operator pos:line="40" pos:column="30">.</op:operator><name pos:line="40" pos:column="31">ParserFileNotFoundInArchiveError</name></name><argument_list pos:line="40" pos:column="63">(<argument><expr><name pos:line="40" pos:column="64">this</name></expr></argument>, <argument><expr><name pos:line="40" pos:column="70">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then> <else pos:line="42" pos:column="15">else <if pos:line="42" pos:column="20">if<condition pos:line="42" pos:column="22">(<expr><name pos:line="42" pos:column="23">Generator</name> <op:operator pos:line="42" pos:column="33">!=</op:operator> <name pos:line="42" pos:column="36">null</name></expr>)</condition><then pos:line="42" pos:column="41"> <block pos:line="42" pos:column="42">{
                <decl_stmt><decl><type><name pos:line="43" pos:column="17">string</name></type> <name pos:line="43" pos:column="24">outFile</name> <init pos:line="43" pos:column="32">= <expr><call><name><name pos:line="43" pos:column="34">Path</name><op:operator pos:line="43" pos:column="38">.</op:operator><name pos:line="43" pos:column="39">GetTempFileName</name></name><argument_list pos:line="43" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <try pos:line="44" pos:column="17">try <block pos:line="44" pos:column="21">{
                    <comment type="line" pos:line="45" pos:column="21">//This is a CSharp parser, so we'll convert the input file as CSharp no matter what the file extension is</comment>
                    <expr_stmt><expr><call><name><name pos:line="46" pos:column="21">Generator</name><op:operator pos:line="46" pos:column="30">.</op:operator><name pos:line="46" pos:column="31">GenerateSrcMLFromFile</name></name><argument_list pos:line="46" pos:column="52">(<argument><expr><name pos:line="46" pos:column="53">fileName</name></expr></argument>, <argument><expr><name pos:line="46" pos:column="63">outFile</name></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="72">Language</name><op:operator pos:line="46" pos:column="80">.</op:operator><name pos:line="46" pos:column="81">CSharp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="47" pos:column="21">sourceElements</name> <op:operator pos:line="47" pos:column="36">=</op:operator> <call><name><name pos:line="47" pos:column="38">SrcMLElement</name><op:operator pos:line="47" pos:column="50">.</op:operator><name pos:line="47" pos:column="51">Load</name></name><argument_list pos:line="47" pos:column="55">(<argument><expr><name pos:line="47" pos:column="56">outFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                    
                    <if pos:line="48" pos:column="21">if<condition pos:line="48" pos:column="23">(<expr><name pos:line="48" pos:column="24">sourceElements</name> <op:operator pos:line="48" pos:column="39">!=</op:operator> <name pos:line="48" pos:column="42">null</name></expr>)</condition><then pos:line="48" pos:column="47"> <block pos:line="48" pos:column="48">{
                        <expr_stmt><expr><name pos:line="49" pos:column="25">programElements</name> <op:operator pos:line="49" pos:column="41">=</op:operator> <call><name pos:line="49" pos:column="43">Parse</name><argument_list pos:line="49" pos:column="48">(<argument><expr><name pos:line="49" pos:column="49">fileName</name></expr></argument>, <argument><expr><name pos:line="49" pos:column="59">sourceElements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block> <finally pos:line="51" pos:column="19">finally <block pos:line="51" pos:column="27">{
                    <expr_stmt><expr><call><name><name pos:line="52" pos:column="21">File</name><op:operator pos:line="52" pos:column="25">.</op:operator><name pos:line="52" pos:column="26">Delete</name></name><argument_list pos:line="52" pos:column="32">(<argument><expr><name pos:line="52" pos:column="33">outFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></finally></try>
            }</block></then> <else pos:line="54" pos:column="15">else <block pos:line="54" pos:column="20">{
                <throw pos:line="55" pos:column="17">throw <expr><op:operator pos:line="55" pos:column="23">new</op:operator> <call><name pos:line="55" pos:column="27">InvalidOperationException</name><argument_list pos:line="55" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="55" pos:column="53">"SrcMLCSharpParser - Archive and Generator are both null"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></else></if></else></if>

            <return pos:line="58" pos:column="13">return <expr><name pos:line="58" pos:column="20">programElements</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="61" pos:column="9">// Code changed by JZ: solution monitor integration</comment>
        <comment type="line" pos:line="62" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="63" pos:column="9">/// New Parse method that takes both source file path and the XElement representation of the source file as input arguments.</comment>
        <comment type="line" pos:line="64" pos:column="9">/// TODO: what if the XElement is null?</comment>
        <comment type="line" pos:line="65" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="66" pos:column="9">/// &lt;param name="fileName"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="67" pos:column="9">/// &lt;param name="sourceElements"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="68" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="69" pos:column="9">public</specifier> <name><name pos:line="69" pos:column="16">List</name><argument_list pos:line="69" pos:column="20">&lt;<argument><name pos:line="69" pos:column="21">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="69" pos:column="37">Parse</name><parameter_list pos:line="69" pos:column="42">(<param><decl><type><name pos:line="69" pos:column="43">string</name></type> <name pos:line="69" pos:column="50">fileName</name></decl></param>, <param><decl><type><name pos:line="69" pos:column="60">XElement</name></type> <name pos:line="69" pos:column="69">sourceElements</name></decl></param>)</parameter_list>
        <block pos:line="70" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="71" pos:column="13">var</name></type> <name pos:line="71" pos:column="17">programElements</name> <init pos:line="71" pos:column="33">= <expr><op:operator pos:line="71" pos:column="35">new</op:operator> <call><name><name pos:line="71" pos:column="39">List</name><argument_list pos:line="71" pos:column="43">&lt;<argument><name pos:line="71" pos:column="44">ProgramElement</name></argument>&gt;</argument_list></name><argument_list pos:line="71" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="73" pos:column="13">//classes and structs have to be parsed first</comment>
            <expr_stmt><expr><call><name pos:line="74" pos:column="13">ParseClasses</name><argument_list pos:line="74" pos:column="25">(<argument><expr><name pos:line="74" pos:column="26">programElements</name></expr></argument>, <argument><expr><name pos:line="74" pos:column="43">sourceElements</name></expr></argument>, <argument><expr><name pos:line="74" pos:column="59">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="75" pos:column="13">ParseStructs</name><argument_list pos:line="75" pos:column="25">(<argument><expr><name pos:line="75" pos:column="26">programElements</name></expr></argument>, <argument><expr><name pos:line="75" pos:column="43">sourceElements</name></expr></argument>, <argument><expr><name pos:line="75" pos:column="59">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name pos:line="77" pos:column="13">ParseEnums</name><argument_list pos:line="77" pos:column="23">(<argument><expr><name pos:line="77" pos:column="24">programElements</name></expr></argument>, <argument><expr><name pos:line="77" pos:column="41">sourceElements</name></expr></argument>, <argument><expr><name pos:line="77" pos:column="57">fileName</name></expr></argument>, <argument><expr><name pos:line="77" pos:column="67">snippetSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="78" pos:column="13">SrcMLParsingUtils</name><op:operator pos:line="78" pos:column="30">.</op:operator><name pos:line="78" pos:column="31">ParseFields</name></name><argument_list pos:line="78" pos:column="42">(<argument><expr><name pos:line="78" pos:column="43">programElements</name></expr></argument>, <argument><expr><name pos:line="78" pos:column="60">sourceElements</name></expr></argument>, <argument><expr><name pos:line="78" pos:column="76">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="79" pos:column="13">ParseConstructors</name><argument_list pos:line="79" pos:column="30">(<argument><expr><name pos:line="79" pos:column="31">programElements</name></expr></argument>, <argument><expr><name pos:line="79" pos:column="48">sourceElements</name></expr></argument>, <argument><expr><name pos:line="79" pos:column="64">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="80" pos:column="13">ParseMethods</name><argument_list pos:line="80" pos:column="25">(<argument><expr><name pos:line="80" pos:column="26">programElements</name></expr></argument>, <argument><expr><name pos:line="80" pos:column="43">sourceElements</name></expr></argument>, <argument><expr><name pos:line="80" pos:column="59">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="81" pos:column="13">ParseProperties</name><argument_list pos:line="81" pos:column="28">(<argument><expr><name pos:line="81" pos:column="29">programElements</name></expr></argument>, <argument><expr><name pos:line="81" pos:column="46">sourceElements</name></expr></argument>, <argument><expr><name pos:line="81" pos:column="62">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="82" pos:column="13">SrcMLParsingUtils</name><op:operator pos:line="82" pos:column="30">.</op:operator><name pos:line="82" pos:column="31">ParseComments</name></name><argument_list pos:line="82" pos:column="44">(<argument><expr><name pos:line="82" pos:column="45">programElements</name></expr></argument>, <argument><expr><name pos:line="82" pos:column="62">sourceElements</name></expr></argument>, <argument><expr><name pos:line="82" pos:column="78">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:line="84" pos:column="13">return <expr><name pos:line="84" pos:column="20">programElements</name></expr>;</return>
        }</block></function>
        <comment type="line" pos:line="86" pos:column="9">// End of code changes</comment>

        <function><type><specifier pos:line="88" pos:column="9">private</specifier> <name pos:line="88" pos:column="17">void</name></type> <name pos:line="88" pos:column="22">ParseProperties</name><parameter_list pos:line="88" pos:column="37">(<param><decl><type><name><name pos:line="88" pos:column="38">List</name><argument_list pos:line="88" pos:column="42">&lt;<argument><name pos:line="88" pos:column="43">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="88" pos:column="59">programElements</name></decl></param>, <param><decl><type><name pos:line="88" pos:column="76">XElement</name></type> <name pos:line="88" pos:column="85">elements</name></decl></param>, <param><decl><type><name pos:line="88" pos:column="95">string</name></type> <name pos:line="88" pos:column="102">fileName</name></decl></param>)</parameter_list>
        <block pos:line="89" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="90" pos:column="13">IEnumerable</name><argument_list pos:line="90" pos:column="24">&lt;<argument><name pos:line="90" pos:column="25">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="90" pos:column="35">props</name> <init pos:line="90" pos:column="41">=
                <expr><linq><from pos:line="91" pos:column="17">from <expr><name pos:line="91" pos:column="22">el</name></expr> <in pos:line="91" pos:column="25">in <expr><call><name><name pos:line="91" pos:column="28">elements</name><op:operator pos:line="91" pos:column="36">.</op:operator><name pos:line="91" pos:column="37">Descendants</name></name><argument_list pos:line="91" pos:column="48">(<argument><expr><name><name pos:line="91" pos:column="49">SRC</name><op:operator pos:line="91" pos:column="52">.</op:operator><name pos:line="91" pos:column="53">Declaration</name></name></expr></argument>)</argument_list></call></expr></in></from>
                <where pos:line="92" pos:column="17">where <expr><call><name><name pos:line="92" pos:column="23">el</name><op:operator pos:line="92" pos:column="25">.</op:operator><name pos:line="92" pos:column="26">Element</name></name><argument_list pos:line="92" pos:column="33">(<argument><expr><name><name pos:line="92" pos:column="34">SRC</name><op:operator pos:line="92" pos:column="37">.</op:operator><name pos:line="92" pos:column="38">Name</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="92" pos:column="44">!=</op:operator> <name pos:line="92" pos:column="47">null</name> <op:operator pos:line="92" pos:column="52">&amp;&amp;</op:operator>
                      <call><name><name pos:line="93" pos:column="23">el</name><op:operator pos:line="93" pos:column="25">.</op:operator><name pos:line="93" pos:column="26">Element</name></name><argument_list pos:line="93" pos:column="33">(<argument><expr><name><name pos:line="93" pos:column="34">SRC</name><op:operator pos:line="93" pos:column="37">.</op:operator><name pos:line="93" pos:column="38">Type</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="93" pos:column="44">!=</op:operator> <name pos:line="93" pos:column="47">null</name> <op:operator pos:line="93" pos:column="52">&amp;&amp;</op:operator>
                      <call><name><name pos:line="94" pos:column="23">el</name><op:operator pos:line="94" pos:column="25">.</op:operator><name pos:line="94" pos:column="26">Element</name></name><argument_list pos:line="94" pos:column="33">(<argument><expr><name><name pos:line="94" pos:column="34">SRC</name><op:operator pos:line="94" pos:column="37">.</op:operator><name pos:line="94" pos:column="38">Block</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="94" pos:column="45">!=</op:operator> <name pos:line="94" pos:column="48">null</name> <op:operator pos:line="94" pos:column="53">&amp;&amp;</op:operator>
                      <call><name><name pos:line="95" pos:column="23">el</name><op:operator pos:line="95" pos:column="25">.</op:operator><name pos:line="95" pos:column="26">Elements</name></name><argument_list pos:line="95" pos:column="34">()</argument_list></call><op:operator pos:line="95" pos:column="36">.</op:operator><call><name pos:line="95" pos:column="37">Count</name><argument_list pos:line="95" pos:column="42">()</argument_list></call> <op:operator pos:line="95" pos:column="45">==</op:operator> <lit:literal type="number" pos:line="95" pos:column="48">3</lit:literal></expr></where>
                <select pos:line="96" pos:column="17">select <expr><name pos:line="96" pos:column="24">el</name></expr></select></linq></expr></init></decl>;</decl_stmt>

            <foreach pos:line="98" pos:column="13">foreach (<init><decl><type><name pos:line="98" pos:column="22">XElement</name></type> <name pos:line="98" pos:column="31">prop</name> <range pos:line="98" pos:column="36">in <expr><name pos:line="98" pos:column="39">props</name></expr></range></decl></init>)
            <block pos:line="99" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="100" pos:column="17">string</name></type> <name pos:line="100" pos:column="24">name</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="101" pos:column="17">int</name></type> <name pos:line="101" pos:column="21">definitionLineNumber</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="102" pos:column="17">int</name></type> <name pos:line="102" pos:column="21">definitionColumnNumber</name></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="103" pos:column="17">SrcMLParsingUtils</name><op:operator pos:line="103" pos:column="34">.</op:operator><name pos:line="103" pos:column="35">ParseNameAndLineNumber</name></name><argument_list pos:line="103" pos:column="57">(<argument><expr><name pos:line="103" pos:column="58">prop</name></expr></argument>, <argument><expr pos:line="103" pos:column="64">out <name pos:line="103" pos:column="68">name</name></expr></argument>, <argument><expr pos:line="103" pos:column="74">out <name pos:line="103" pos:column="78">definitionLineNumber</name></expr></argument>, <argument><expr pos:line="103" pos:column="100">out <name pos:line="103" pos:column="104">definitionColumnNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name pos:line="105" pos:column="17">ClassElement</name></type> <name pos:line="105" pos:column="30">classElement</name> <init pos:line="105" pos:column="43">= <expr><call><name><name pos:line="105" pos:column="45">SrcMLParsingUtils</name><op:operator pos:line="105" pos:column="62">.</op:operator><name pos:line="105" pos:column="63">RetrieveClassElement</name></name><argument_list pos:line="105" pos:column="83">(<argument><expr><name pos:line="105" pos:column="84">prop</name></expr></argument>, <argument><expr><name pos:line="105" pos:column="90">programElements</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="106" pos:column="17">Guid</name></type> <name pos:line="106" pos:column="22">classId</name> <init pos:line="106" pos:column="30">= <expr><name pos:line="106" pos:column="32">classElement</name> <op:operator pos:line="106" pos:column="45">!=</op:operator> <name pos:line="106" pos:column="48">null</name> <op:operator pos:line="106" pos:column="53">?</op:operator> <name><name pos:line="106" pos:column="55">classElement</name><op:operator pos:line="106" pos:column="67">.</op:operator><name pos:line="106" pos:column="68">Id</name></name> <op:operator pos:line="106" pos:column="71">:</op:operator> <name><name pos:line="106" pos:column="73">Guid</name><op:operator pos:line="106" pos:column="77">.</op:operator><name pos:line="106" pos:column="78">Empty</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="107" pos:column="17">string</name></type> <name pos:line="107" pos:column="24">className</name> <init pos:line="107" pos:column="34">= <expr><name pos:line="107" pos:column="36">classElement</name> <op:operator pos:line="107" pos:column="49">!=</op:operator> <name pos:line="107" pos:column="52">null</name> <op:operator pos:line="107" pos:column="57">?</op:operator> <name><name pos:line="107" pos:column="59">classElement</name><op:operator pos:line="107" pos:column="71">.</op:operator><name pos:line="107" pos:column="72">Name</name></name> <op:operator pos:line="107" pos:column="77">:</op:operator> <name><name pos:line="107" pos:column="79">String</name><op:operator pos:line="107" pos:column="85">.</op:operator><name pos:line="107" pos:column="86">Empty</name></name></expr></init></decl>;</decl_stmt>

                <comment type="line" pos:line="109" pos:column="17">//parse access level and type</comment>
                <decl_stmt><decl><type><name pos:line="110" pos:column="17">XElement</name></type> <name pos:line="110" pos:column="26">accessElement</name> <init pos:line="110" pos:column="40">= <expr><call><name><name pos:line="110" pos:column="42">prop</name><op:operator pos:line="110" pos:column="46">.</op:operator><name pos:line="110" pos:column="47">Element</name></name><argument_list pos:line="110" pos:column="54">(<argument><expr><name><name pos:line="110" pos:column="55">SRC</name><op:operator pos:line="110" pos:column="58">.</op:operator><name pos:line="110" pos:column="59">Type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="111" pos:column="17">AccessLevel</name></type> <name pos:line="111" pos:column="29">accessLevel</name> <init pos:line="111" pos:column="41">= <expr><call><name><name pos:line="111" pos:column="43">SrcMLParsingUtils</name><op:operator pos:line="111" pos:column="60">.</op:operator><name pos:line="111" pos:column="61">RetrieveAccessLevel</name></name><argument_list pos:line="111" pos:column="80">(<argument><expr><name pos:line="111" pos:column="81">accessElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name><name pos:line="113" pos:column="17">IEnumerable</name><argument_list pos:line="113" pos:column="28">&lt;<argument><name pos:line="113" pos:column="29">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="113" pos:column="39">types</name> <init pos:line="113" pos:column="45">= <expr><call><name><name pos:line="113" pos:column="47">prop</name><op:operator pos:line="113" pos:column="51">.</op:operator><name pos:line="113" pos:column="52">Element</name></name><argument_list pos:line="113" pos:column="59">(<argument><expr><name><name pos:line="113" pos:column="60">SRC</name><op:operator pos:line="113" pos:column="63">.</op:operator><name pos:line="113" pos:column="64">Type</name></name></expr></argument>)</argument_list></call><op:operator pos:line="113" pos:column="69">.</op:operator><call><name pos:line="113" pos:column="70">Elements</name><argument_list pos:line="113" pos:column="78">(<argument><expr><name><name pos:line="113" pos:column="79">SRC</name><op:operator pos:line="113" pos:column="82">.</op:operator><name pos:line="113" pos:column="83">Name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line" pos:line="115" pos:column="17">//oops, namespaces have the same structure in srcml so need this check</comment>
                <if pos:line="116" pos:column="17">if <condition pos:line="116" pos:column="20">(<expr><call><name><name pos:line="116" pos:column="21">types</name><op:operator pos:line="116" pos:column="26">.</op:operator><name pos:line="116" pos:column="27">Count</name></name><argument_list pos:line="116" pos:column="32">()</argument_list></call> <op:operator pos:line="116" pos:column="35">==</op:operator> <lit:literal type="number" pos:line="116" pos:column="38">0</lit:literal> <op:operator pos:line="116" pos:column="40">||</op:operator> <call><name><name pos:line="116" pos:column="43">types</name><op:operator pos:line="116" pos:column="48">.</op:operator><name pos:line="116" pos:column="49">First</name></name><argument_list pos:line="116" pos:column="54">()</argument_list></call><op:operator pos:line="116" pos:column="56">.</op:operator><name pos:line="116" pos:column="57">Value</name> <op:operator pos:line="116" pos:column="63">==</op:operator> <lit:literal type="string" pos:line="116" pos:column="66">"namespace"</lit:literal></expr>)</condition><then pos:line="116" pos:column="78"> <continue pos:line="116" pos:column="79">continue;</continue></then></if>

                <decl_stmt><decl><type><name pos:line="118" pos:column="17">string</name></type> <name pos:line="118" pos:column="24">propertyType</name> <init pos:line="118" pos:column="37">= <expr><name><name pos:line="118" pos:column="39">String</name><op:operator pos:line="118" pos:column="45">.</op:operator><name pos:line="118" pos:column="46">Empty</name></name></expr></init></decl>;</decl_stmt>
                <foreach pos:line="119" pos:column="17">foreach (<init><decl><type><name pos:line="119" pos:column="26">XElement</name></type> <name pos:line="119" pos:column="35">type</name> <range pos:line="119" pos:column="40">in <expr><name pos:line="119" pos:column="43">types</name></expr></range></decl></init>)
                <block pos:line="120" pos:column="17">{
                    <expr_stmt><expr><name pos:line="121" pos:column="21">propertyType</name> <op:operator pos:line="121" pos:column="34">+=</op:operator> <name><name pos:line="121" pos:column="37">type</name><op:operator pos:line="121" pos:column="41">.</op:operator><name pos:line="121" pos:column="42">Value</name></name> <op:operator pos:line="121" pos:column="48">+</op:operator> <lit:literal type="string" pos:line="121" pos:column="50">" "</lit:literal></expr>;</expr_stmt>
                }</block></foreach>
                <expr_stmt><expr><name pos:line="123" pos:column="17">propertyType</name> <op:operator pos:line="123" pos:column="30">=</op:operator> <call><name><name pos:line="123" pos:column="32">propertyType</name><op:operator pos:line="123" pos:column="44">.</op:operator><name pos:line="123" pos:column="45">TrimEnd</name></name><argument_list pos:line="123" pos:column="52">()</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name pos:line="125" pos:column="17">string</name></type> <name pos:line="125" pos:column="24">body</name> <init pos:line="125" pos:column="29">= <expr><call><name><name pos:line="125" pos:column="31">SrcMLParsingUtils</name><op:operator pos:line="125" pos:column="48">.</op:operator><name pos:line="125" pos:column="49">ParseBody</name></name><argument_list pos:line="125" pos:column="58">(<argument><expr><name pos:line="125" pos:column="59">prop</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name pos:line="127" pos:column="17">string</name></type> <name pos:line="127" pos:column="24">fullFilePath</name> <init pos:line="127" pos:column="37">= <expr><call><name><name pos:line="127" pos:column="39">System</name><op:operator pos:line="127" pos:column="45">.</op:operator><name pos:line="127" pos:column="46">IO</name><op:operator pos:line="127" pos:column="48">.</op:operator><name pos:line="127" pos:column="49">Path</name><op:operator pos:line="127" pos:column="53">.</op:operator><name pos:line="127" pos:column="54">GetFullPath</name></name><argument_list pos:line="127" pos:column="65">(<argument><expr><name pos:line="127" pos:column="66">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="128" pos:column="17">string</name></type> <name pos:line="128" pos:column="24">source</name> <init pos:line="128" pos:column="31">= <expr><call><name><name pos:line="128" pos:column="33">SrcMLParsingUtils</name><op:operator pos:line="128" pos:column="50">.</op:operator><name pos:line="128" pos:column="51">RetrieveSource</name></name><argument_list pos:line="128" pos:column="65">(<argument><expr><name pos:line="128" pos:column="66">prop</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name pos:line="130" pos:column="17">programElements</name><op:operator pos:line="130" pos:column="32">.</op:operator><name pos:line="130" pos:column="33">Add</name></name><argument_list pos:line="130" pos:column="36">(<argument><expr><op:operator pos:line="130" pos:column="37">new</op:operator> <call><name pos:line="130" pos:column="41">PropertyElement</name><argument_list pos:line="130" pos:column="56">(<argument><expr><name pos:line="130" pos:column="57">name</name></expr></argument>, <argument><expr><name pos:line="130" pos:column="63">definitionLineNumber</name></expr></argument>, <argument><expr><name pos:line="130" pos:column="85">definitionColumnNumber</name></expr></argument>, <argument><expr><name pos:line="130" pos:column="109">fullFilePath</name></expr></argument>, <argument><expr><name pos:line="130" pos:column="123">source</name></expr></argument>, <argument><expr><name pos:line="130" pos:column="131">accessLevel</name></expr></argument>, <argument><expr><name pos:line="130" pos:column="144">propertyType</name></expr></argument>, <argument><expr><name pos:line="130" pos:column="158">body</name></expr></argument>, <argument><expr><name pos:line="130" pos:column="164">classId</name></expr></argument>, <argument><expr><name pos:line="130" pos:column="173">className</name></expr></argument>, <argument><expr><name><name pos:line="130" pos:column="184">String</name><op:operator pos:line="130" pos:column="190">.</op:operator><name pos:line="130" pos:column="191">Empty</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>

        <function><type><specifier pos:line="134" pos:column="9">private</specifier> <name pos:line="134" pos:column="17">void</name></type> <name pos:line="134" pos:column="22">ParseClasses</name><parameter_list pos:line="134" pos:column="34">(<param><decl><type><name><name pos:line="134" pos:column="35">List</name><argument_list pos:line="134" pos:column="39">&lt;<argument><name pos:line="134" pos:column="40">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="134" pos:column="56">programElements</name></decl></param>, <param><decl><type><name pos:line="134" pos:column="73">XElement</name></type> <name pos:line="134" pos:column="82">elements</name></decl></param>, <param><decl><type><name pos:line="134" pos:column="92">string</name></type> <name pos:line="134" pos:column="99">fileName</name></decl></param>)</parameter_list>
        <block pos:line="135" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="136" pos:column="13">IEnumerable</name><argument_list pos:line="136" pos:column="24">&lt;<argument><name pos:line="136" pos:column="25">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="136" pos:column="35">classes</name> <init pos:line="136" pos:column="43">=
                <expr><linq><from pos:line="137" pos:column="17">from <expr><name pos:line="137" pos:column="22">el</name></expr> <in pos:line="137" pos:column="25">in <expr><call><name><name pos:line="137" pos:column="28">elements</name><op:operator pos:line="137" pos:column="36">.</op:operator><name pos:line="137" pos:column="37">Descendants</name></name><argument_list pos:line="137" pos:column="48">(<argument><expr><name><name pos:line="137" pos:column="49">SRC</name><op:operator pos:line="137" pos:column="52">.</op:operator><name pos:line="137" pos:column="53">Class</name></name></expr></argument>)</argument_list></call></expr></in></from>
                <select pos:line="138" pos:column="17">select <expr><name pos:line="138" pos:column="24">el</name></expr></select></linq></expr></init></decl>;</decl_stmt>
            <foreach pos:line="139" pos:column="13">foreach (<init><decl><type><name pos:line="139" pos:column="22">XElement</name></type> <name pos:line="139" pos:column="31">cls</name> <range pos:line="139" pos:column="35">in <expr><name pos:line="139" pos:column="38">classes</name></expr></range></decl></init>)
            <block pos:line="140" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="141" pos:column="17">programElements</name><op:operator pos:line="141" pos:column="32">.</op:operator><name pos:line="141" pos:column="33">Add</name></name><argument_list pos:line="141" pos:column="36">(<argument><expr><call><name pos:line="141" pos:column="37">ParseClass</name><argument_list pos:line="141" pos:column="47">(<argument><expr><name pos:line="141" pos:column="48">cls</name></expr></argument>, <argument><expr><name pos:line="141" pos:column="53">fileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>

        <function><type><specifier pos:line="145" pos:column="9">private</specifier> <name pos:line="145" pos:column="17">void</name></type> <name pos:line="145" pos:column="22">ParseStructs</name><parameter_list pos:line="145" pos:column="34">(<param><decl><type><name><name pos:line="145" pos:column="35">List</name><argument_list pos:line="145" pos:column="39">&lt;<argument><name pos:line="145" pos:column="40">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="145" pos:column="56">programElements</name></decl></param>, <param><decl><type><name pos:line="145" pos:column="73">XElement</name></type> <name pos:line="145" pos:column="82">elements</name></decl></param>, <param><decl><type><name pos:line="145" pos:column="92">string</name></type> <name pos:line="145" pos:column="99">fileName</name></decl></param>)</parameter_list>
        <block pos:line="146" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="147" pos:column="13">IEnumerable</name><argument_list pos:line="147" pos:column="24">&lt;<argument><name pos:line="147" pos:column="25">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="147" pos:column="35">structs</name> <init pos:line="147" pos:column="43">=
                <expr><linq><from pos:line="148" pos:column="17">from <expr><name pos:line="148" pos:column="22">el</name></expr> <in pos:line="148" pos:column="25">in <expr><call><name><name pos:line="148" pos:column="28">elements</name><op:operator pos:line="148" pos:column="36">.</op:operator><name pos:line="148" pos:column="37">Descendants</name></name><argument_list pos:line="148" pos:column="48">(<argument><expr><name><name pos:line="148" pos:column="49">SRC</name><op:operator pos:line="148" pos:column="52">.</op:operator><name pos:line="148" pos:column="53">Struct</name></name></expr></argument>)</argument_list></call></expr></in></from>
                <comment type="line" pos:line="149" pos:column="17">//where el.Element(SourceNamespace + "type") != null &amp;&amp;</comment>
                <comment type="line" pos:line="150" pos:column="17">//      el.Element(SourceNamespace + "type").Element(SourceNamespace + "name") != null &amp;&amp;</comment>
                <comment type="line" pos:line="151" pos:column="17">//      el.Element(SourceNamespace + "type").Element(SourceNamespace + "name").Value == "struct"</comment>
                <select pos:line="152" pos:column="17">select <expr><name pos:line="152" pos:column="24">el</name></expr></select></linq></expr></init></decl>;</decl_stmt>
            <foreach pos:line="153" pos:column="13">foreach (<init><decl><type><name pos:line="153" pos:column="22">XElement</name></type> <name pos:line="153" pos:column="31">strct</name> <range pos:line="153" pos:column="37">in <expr><name pos:line="153" pos:column="40">structs</name></expr></range></decl></init>)
            <block pos:line="154" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="155" pos:column="17">programElements</name><op:operator pos:line="155" pos:column="32">.</op:operator><name pos:line="155" pos:column="33">Add</name></name><argument_list pos:line="155" pos:column="36">(<argument><expr><call><name pos:line="155" pos:column="37">ParseStruct</name><argument_list pos:line="155" pos:column="48">(<argument><expr><name pos:line="155" pos:column="49">strct</name></expr></argument>, <argument><expr><name pos:line="155" pos:column="56">fileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>

        <function><type><specifier pos:line="159" pos:column="9">private</specifier> <name pos:line="159" pos:column="17">StructElement</name></type> <name pos:line="159" pos:column="31">ParseStruct</name><parameter_list pos:line="159" pos:column="42">(<param><decl><type><name pos:line="159" pos:column="43">XElement</name></type> <name pos:line="159" pos:column="52">strct</name></decl></param>, <param><decl><type><name pos:line="159" pos:column="59">string</name></type> <name pos:line="159" pos:column="66">fileName</name></decl></param>)</parameter_list>
        <block pos:line="160" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="161" pos:column="13">string</name></type> <name pos:line="161" pos:column="20">name</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="162" pos:column="13">int</name></type> <name pos:line="162" pos:column="17">definitionLineNumber</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="163" pos:column="13">int</name></type> <name pos:line="163" pos:column="17">definitionColumnNumber</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="164" pos:column="13">SrcMLParsingUtils</name><op:operator pos:line="164" pos:column="30">.</op:operator><name pos:line="164" pos:column="31">ParseNameAndLineNumber</name></name><argument_list pos:line="164" pos:column="53">(<argument><expr><name pos:line="164" pos:column="54">strct</name></expr></argument>, <argument><expr pos:line="164" pos:column="61">out <name pos:line="164" pos:column="65">name</name></expr></argument>, <argument><expr pos:line="164" pos:column="71">out <name pos:line="164" pos:column="75">definitionLineNumber</name></expr></argument>, <argument><expr pos:line="164" pos:column="97">out <name pos:line="164" pos:column="101">definitionColumnNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="166" pos:column="13">AccessLevel</name></type> <name pos:line="166" pos:column="25">accessLevel</name> <init pos:line="166" pos:column="37">= <expr><call><name><name pos:line="166" pos:column="39">SrcMLParsingUtils</name><op:operator pos:line="166" pos:column="56">.</op:operator><name pos:line="166" pos:column="57">RetrieveAccessLevel</name></name><argument_list pos:line="166" pos:column="76">(<argument><expr><name pos:line="166" pos:column="77">strct</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="168" pos:column="13">var</name></type> <name pos:line="168" pos:column="17">anc</name> <init pos:line="168" pos:column="21">= <expr><call><name><name pos:line="168" pos:column="23">strct</name><op:operator pos:line="168" pos:column="28">.</op:operator><name pos:line="168" pos:column="29">Ancestors</name></name><argument_list pos:line="168" pos:column="38">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="169" pos:column="13">var</name></type> <name pos:line="169" pos:column="17">x</name> <init pos:line="169" pos:column="19">= <expr><name pos:line="169" pos:column="21">anc</name></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="170" pos:column="13">//parse namespace</comment>
            <decl_stmt><decl><type><name><name pos:line="171" pos:column="13">IEnumerable</name><argument_list pos:line="171" pos:column="24">&lt;<argument><name pos:line="171" pos:column="25">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="171" pos:column="35">ownerNamespaces</name> <init pos:line="171" pos:column="51">=
                <expr><linq><from pos:line="172" pos:column="17">from <expr><name pos:line="172" pos:column="22">el</name></expr> <in pos:line="172" pos:column="25">in <expr><call><name><name pos:line="172" pos:column="28">strct</name><op:operator pos:line="172" pos:column="33">.</op:operator><name pos:line="172" pos:column="34">Ancestors</name></name><argument_list pos:line="172" pos:column="43">(<argument><expr><name><name pos:line="172" pos:column="44">SRC</name><op:operator pos:line="172" pos:column="47">.</op:operator><name pos:line="172" pos:column="48">Namespace</name></name></expr></argument>)</argument_list></call></expr></in></from>
                <select pos:line="173" pos:column="17">select <expr><name pos:line="173" pos:column="24">el</name></expr></select></linq></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="174" pos:column="13">string</name></type> <name pos:line="174" pos:column="20">namespaceName</name> <init pos:line="174" pos:column="34">= <expr><name><name pos:line="174" pos:column="36">String</name><op:operator pos:line="174" pos:column="42">.</op:operator><name pos:line="174" pos:column="43">Empty</name></name></expr></init></decl>;</decl_stmt>
            <foreach pos:line="175" pos:column="13">foreach (<init><decl><type><name pos:line="175" pos:column="22">XElement</name></type> <name pos:line="175" pos:column="31">ownerNamespace</name> <range pos:line="175" pos:column="46">in <expr><name pos:line="175" pos:column="49">ownerNamespaces</name></expr></range></decl></init>)
            <block pos:line="176" pos:column="13">{
                <foreach pos:line="177" pos:column="17">foreach (<init><decl><type><name pos:line="177" pos:column="26">XElement</name></type> <name pos:line="177" pos:column="35">spc</name> <range pos:line="177" pos:column="39">in <expr><call><name><name pos:line="177" pos:column="42">ownerNamespace</name><op:operator pos:line="177" pos:column="56">.</op:operator><name pos:line="177" pos:column="57">Elements</name></name><argument_list pos:line="177" pos:column="65">(<argument><expr><name><name pos:line="177" pos:column="66">SRC</name><op:operator pos:line="177" pos:column="69">.</op:operator><name pos:line="177" pos:column="70">Name</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)
                <block pos:line="178" pos:column="17">{
                    <expr_stmt><expr><name pos:line="179" pos:column="21">namespaceName</name> <op:operator pos:line="179" pos:column="35">+=</op:operator> <name><name pos:line="179" pos:column="38">spc</name><op:operator pos:line="179" pos:column="41">.</op:operator><name pos:line="179" pos:column="42">Value</name></name> <op:operator pos:line="179" pos:column="48">+</op:operator> <lit:literal type="string" pos:line="179" pos:column="50">" "</lit:literal></expr>;</expr_stmt>
                }</block></foreach>
            }</block></foreach>
            <expr_stmt><expr><name pos:line="182" pos:column="13">namespaceName</name> <op:operator pos:line="182" pos:column="27">=</op:operator> <call><name><name pos:line="182" pos:column="29">namespaceName</name><op:operator pos:line="182" pos:column="42">.</op:operator><name pos:line="182" pos:column="43">TrimEnd</name></name><argument_list pos:line="182" pos:column="50">()</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="184" pos:column="13">//TODO: extended structs are pretty difficult to parse in SrcML</comment>
            <decl_stmt><decl><type><name pos:line="185" pos:column="13">string</name></type> <name pos:line="185" pos:column="20">extendedStructs</name> <init pos:line="185" pos:column="36">= <expr><name><name pos:line="185" pos:column="38">String</name><op:operator pos:line="185" pos:column="44">.</op:operator><name pos:line="185" pos:column="45">Empty</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="187" pos:column="13">string</name></type> <name pos:line="187" pos:column="20">fullFilePath</name> <init pos:line="187" pos:column="33">= <expr><call><name><name pos:line="187" pos:column="35">System</name><op:operator pos:line="187" pos:column="41">.</op:operator><name pos:line="187" pos:column="42">IO</name><op:operator pos:line="187" pos:column="44">.</op:operator><name pos:line="187" pos:column="45">Path</name><op:operator pos:line="187" pos:column="49">.</op:operator><name pos:line="187" pos:column="50">GetFullPath</name></name><argument_list pos:line="187" pos:column="61">(<argument><expr><name pos:line="187" pos:column="62">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="188" pos:column="13">string</name></type> <name pos:line="188" pos:column="20">source</name> <init pos:line="188" pos:column="27">= <expr><call><name><name pos:line="188" pos:column="29">SrcMLParsingUtils</name><op:operator pos:line="188" pos:column="46">.</op:operator><name pos:line="188" pos:column="47">RetrieveSource</name></name><argument_list pos:line="188" pos:column="61">(<argument><expr><name pos:line="188" pos:column="62">strct</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="190" pos:column="13">string</name></type> <name pos:line="190" pos:column="20">body</name> <init pos:line="190" pos:column="25">= <expr><name><name pos:line="190" pos:column="27">strct</name><op:operator pos:line="190" pos:column="32">.</op:operator><name pos:line="190" pos:column="33">Value</name></name></expr></init></decl>;</decl_stmt>
            <return pos:line="191" pos:column="13">return <expr><op:operator pos:line="191" pos:column="20">new</op:operator> <call><name pos:line="191" pos:column="24">StructElement</name><argument_list pos:line="191" pos:column="37">(<argument><expr><name pos:line="191" pos:column="38">name</name></expr></argument>, <argument><expr><name pos:line="191" pos:column="44">definitionLineNumber</name></expr></argument>,<argument><expr><name pos:line="191" pos:column="65">definitionColumnNumber</name></expr></argument>, <argument><expr><name pos:line="191" pos:column="89">fileName</name></expr></argument>, <argument><expr><name pos:line="191" pos:column="99">source</name></expr></argument>, <argument><expr><name pos:line="191" pos:column="107">accessLevel</name></expr></argument>, <argument><expr><name pos:line="191" pos:column="120">namespaceName</name></expr></argument>, <argument><expr><name pos:line="191" pos:column="135">body</name></expr></argument>, <argument><expr><name pos:line="191" pos:column="141">extendedStructs</name></expr></argument>, <argument><expr><name><name pos:line="191" pos:column="158">String</name><op:operator pos:line="191" pos:column="164">.</op:operator><name pos:line="191" pos:column="165">Empty</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="194" pos:column="9">private</specifier> <name pos:line="194" pos:column="17">ClassElement</name></type> <name pos:line="194" pos:column="30">ParseClass</name><parameter_list pos:line="194" pos:column="40">(<param><decl><type><name pos:line="194" pos:column="41">XElement</name></type> <name pos:line="194" pos:column="50">cls</name></decl></param>, <param><decl><type><name pos:line="194" pos:column="55">string</name></type> <name pos:line="194" pos:column="62">fileName</name></decl></param>)</parameter_list>
        <block pos:line="195" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="196" pos:column="13">string</name></type> <name pos:line="196" pos:column="20">name</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="197" pos:column="13">int</name></type> <name pos:line="197" pos:column="17">definitionLineNumber</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="198" pos:column="13">int</name></type> <name pos:line="198" pos:column="17">definitionColumnNumber</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="199" pos:column="13">SrcMLParsingUtils</name><op:operator pos:line="199" pos:column="30">.</op:operator><name pos:line="199" pos:column="31">ParseNameAndLineNumber</name></name><argument_list pos:line="199" pos:column="53">(<argument><expr><name pos:line="199" pos:column="54">cls</name></expr></argument>, <argument><expr pos:line="199" pos:column="59">out <name pos:line="199" pos:column="63">name</name></expr></argument>, <argument><expr pos:line="199" pos:column="69">out <name pos:line="199" pos:column="73">definitionLineNumber</name></expr></argument>, <argument><expr pos:line="199" pos:column="95">out <name pos:line="199" pos:column="99">definitionColumnNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="201" pos:column="13">AccessLevel</name></type> <name pos:line="201" pos:column="25">accessLevel</name> <init pos:line="201" pos:column="37">= <expr><call><name><name pos:line="201" pos:column="39">SrcMLParsingUtils</name><op:operator pos:line="201" pos:column="56">.</op:operator><name pos:line="201" pos:column="57">RetrieveAccessLevel</name></name><argument_list pos:line="201" pos:column="76">(<argument><expr><name pos:line="201" pos:column="77">cls</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="203" pos:column="13">//parse namespace</comment>
            <decl_stmt><decl><type><name><name pos:line="204" pos:column="13">IEnumerable</name><argument_list pos:line="204" pos:column="24">&lt;<argument><name pos:line="204" pos:column="25">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="204" pos:column="35">ownerNamespaces</name> <init pos:line="204" pos:column="51">=
                <expr><linq><from pos:line="205" pos:column="17">from <expr><name pos:line="205" pos:column="22">el</name></expr> <in pos:line="205" pos:column="25">in <expr><call><name><name pos:line="205" pos:column="28">cls</name><op:operator pos:line="205" pos:column="31">.</op:operator><name pos:line="205" pos:column="32">Ancestors</name></name><argument_list pos:line="205" pos:column="41">(<argument><expr><name><name pos:line="205" pos:column="42">SRC</name><op:operator pos:line="205" pos:column="45">.</op:operator><name pos:line="205" pos:column="46">Namespace</name></name></expr></argument>)</argument_list></call></expr></in></from>
                <select pos:line="206" pos:column="17">select <expr><name pos:line="206" pos:column="24">el</name></expr></select></linq></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="207" pos:column="13">string</name></type> <name pos:line="207" pos:column="20">namespaceName</name> <init pos:line="207" pos:column="34">= <expr><name><name pos:line="207" pos:column="36">String</name><op:operator pos:line="207" pos:column="42">.</op:operator><name pos:line="207" pos:column="43">Empty</name></name></expr></init></decl>;</decl_stmt>
            <foreach pos:line="208" pos:column="13">foreach (<init><decl><type><name pos:line="208" pos:column="22">XElement</name></type> <name pos:line="208" pos:column="31">ownerNamespace</name> <range pos:line="208" pos:column="46">in <expr><name pos:line="208" pos:column="49">ownerNamespaces</name></expr></range></decl></init>)
            <block pos:line="209" pos:column="13">{
                <foreach pos:line="210" pos:column="17">foreach (<init><decl><type><name pos:line="210" pos:column="26">XElement</name></type> <name pos:line="210" pos:column="35">spc</name> <range pos:line="210" pos:column="39">in <expr><call><name><name pos:line="210" pos:column="42">ownerNamespace</name><op:operator pos:line="210" pos:column="56">.</op:operator><name pos:line="210" pos:column="57">Elements</name></name><argument_list pos:line="210" pos:column="65">(<argument><expr><name><name pos:line="210" pos:column="66">SRC</name><op:operator pos:line="210" pos:column="69">.</op:operator><name pos:line="210" pos:column="70">Name</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)
                <block pos:line="211" pos:column="17">{
                    <expr_stmt><expr><name pos:line="212" pos:column="21">namespaceName</name> <op:operator pos:line="212" pos:column="35">+=</op:operator> <name><name pos:line="212" pos:column="38">spc</name><op:operator pos:line="212" pos:column="41">.</op:operator><name pos:line="212" pos:column="42">Value</name></name> <op:operator pos:line="212" pos:column="48">+</op:operator> <lit:literal type="string" pos:line="212" pos:column="50">" "</lit:literal></expr>;</expr_stmt>
                }</block></foreach>
            }</block></foreach>
            <expr_stmt><expr><name pos:line="215" pos:column="13">namespaceName</name> <op:operator pos:line="215" pos:column="27">=</op:operator> <call><name><name pos:line="215" pos:column="29">namespaceName</name><op:operator pos:line="215" pos:column="42">.</op:operator><name pos:line="215" pos:column="43">TrimEnd</name></name><argument_list pos:line="215" pos:column="50">()</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="217" pos:column="13">//parse extended classes and implemented interfaces (interfaces are treated as extended classes in SrcML for now)</comment>
            <decl_stmt><decl><type><name pos:line="218" pos:column="13">string</name></type> <name pos:line="218" pos:column="20">extendedClasses</name> <init pos:line="218" pos:column="36">= <expr><name><name pos:line="218" pos:column="38">String</name><op:operator pos:line="218" pos:column="44">.</op:operator><name pos:line="218" pos:column="45">Empty</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="219" pos:column="13">XElement</name></type> <name pos:line="219" pos:column="22">super</name> <init pos:line="219" pos:column="28">= <expr><call><name><name pos:line="219" pos:column="30">cls</name><op:operator pos:line="219" pos:column="33">.</op:operator><name pos:line="219" pos:column="34">Element</name></name><argument_list pos:line="219" pos:column="41">(<argument><expr><name><name pos:line="219" pos:column="42">SRC</name><op:operator pos:line="219" pos:column="45">.</op:operator><name pos:line="219" pos:column="46">Super</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="220" pos:column="13">if <condition pos:line="220" pos:column="16">(<expr><name pos:line="220" pos:column="17">super</name> <op:operator pos:line="220" pos:column="23">!=</op:operator> <name pos:line="220" pos:column="26">null</name></expr>)</condition><then pos:line="220" pos:column="31">
            <block pos:line="221" pos:column="13">{
                <decl_stmt><decl><type><name><name pos:line="222" pos:column="17">IEnumerable</name><argument_list pos:line="222" pos:column="28">&lt;<argument><name pos:line="222" pos:column="29">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="222" pos:column="39">impNames</name> <init pos:line="222" pos:column="48">=
                    <expr><linq><from pos:line="223" pos:column="21">from <expr><name pos:line="223" pos:column="26">el</name></expr> <in pos:line="223" pos:column="29">in <expr><call><name><name pos:line="223" pos:column="32">super</name><op:operator pos:line="223" pos:column="37">.</op:operator><name pos:line="223" pos:column="38">Descendants</name></name><argument_list pos:line="223" pos:column="49">(<argument><expr><name><name pos:line="223" pos:column="50">SRC</name><op:operator pos:line="223" pos:column="53">.</op:operator><name pos:line="223" pos:column="54">Name</name></name></expr></argument>)</argument_list></call></expr></in></from>
                    <select pos:line="224" pos:column="21">select <expr><name pos:line="224" pos:column="28">el</name></expr></select></linq></expr></init></decl>;</decl_stmt>
                <foreach pos:line="225" pos:column="17">foreach (<init><decl><type><name pos:line="225" pos:column="26">XElement</name></type> <name pos:line="225" pos:column="35">impName</name> <range pos:line="225" pos:column="43">in <expr><name pos:line="225" pos:column="46">impNames</name></expr></range></decl></init>)
                <block pos:line="226" pos:column="17">{
                    <expr_stmt><expr><name pos:line="227" pos:column="21">extendedClasses</name> <op:operator pos:line="227" pos:column="37">+=</op:operator> <name><name pos:line="227" pos:column="40">impName</name><op:operator pos:line="227" pos:column="47">.</op:operator><name pos:line="227" pos:column="48">Value</name></name> <op:operator pos:line="227" pos:column="54">+</op:operator> <lit:literal type="string" pos:line="227" pos:column="56">" "</lit:literal></expr>;</expr_stmt>
                }</block></foreach>
                <expr_stmt><expr><name pos:line="229" pos:column="17">extendedClasses</name> <op:operator pos:line="229" pos:column="33">=</op:operator> <call><name><name pos:line="229" pos:column="35">extendedClasses</name><op:operator pos:line="229" pos:column="50">.</op:operator><name pos:line="229" pos:column="51">TrimEnd</name></name><argument_list pos:line="229" pos:column="58">()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <comment type="line" pos:line="231" pos:column="13">//interfaces are treated as extended classes in SrcML for now</comment>
            <decl_stmt><decl><type><name pos:line="232" pos:column="13">string</name></type> <name pos:line="232" pos:column="20">implementedInterfaces</name> <init pos:line="232" pos:column="42">= <expr><name><name pos:line="232" pos:column="44">String</name><op:operator pos:line="232" pos:column="50">.</op:operator><name pos:line="232" pos:column="51">Empty</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="234" pos:column="13">string</name></type> <name pos:line="234" pos:column="20">fullFilePath</name> <init pos:line="234" pos:column="33">= <expr><call><name><name pos:line="234" pos:column="35">System</name><op:operator pos:line="234" pos:column="41">.</op:operator><name pos:line="234" pos:column="42">IO</name><op:operator pos:line="234" pos:column="44">.</op:operator><name pos:line="234" pos:column="45">Path</name><op:operator pos:line="234" pos:column="49">.</op:operator><name pos:line="234" pos:column="50">GetFullPath</name></name><argument_list pos:line="234" pos:column="61">(<argument><expr><name pos:line="234" pos:column="62">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="235" pos:column="13">string</name></type> <name pos:line="235" pos:column="20">source</name> <init pos:line="235" pos:column="27">= <expr><call><name><name pos:line="235" pos:column="29">SrcMLParsingUtils</name><op:operator pos:line="235" pos:column="46">.</op:operator><name pos:line="235" pos:column="47">RetrieveSource</name></name><argument_list pos:line="235" pos:column="61">(<argument><expr><name pos:line="235" pos:column="62">cls</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="237" pos:column="13">string</name></type> <name pos:line="237" pos:column="20">body</name> <init pos:line="237" pos:column="25">= <expr><name><name pos:line="237" pos:column="27">cls</name><op:operator pos:line="237" pos:column="30">.</op:operator><name pos:line="237" pos:column="31">Value</name></name></expr></init></decl>;</decl_stmt>
            <return pos:line="238" pos:column="13">return <expr><op:operator pos:line="238" pos:column="20">new</op:operator> <call><name pos:line="238" pos:column="24">ClassElement</name><argument_list pos:line="238" pos:column="36">(<argument><expr><name pos:line="238" pos:column="37">name</name></expr></argument>, <argument><expr><name pos:line="238" pos:column="43">definitionLineNumber</name></expr></argument>, <argument><expr><name pos:line="238" pos:column="65">definitionColumnNumber</name></expr></argument>, <argument><expr><name pos:line="238" pos:column="89">fullFilePath</name></expr></argument>, <argument><expr><name pos:line="238" pos:column="103">source</name></expr></argument>, <argument><expr><name pos:line="238" pos:column="111">accessLevel</name></expr></argument>, <argument><expr><name pos:line="238" pos:column="124">namespaceName</name></expr></argument>, <argument><expr><name pos:line="238" pos:column="139">extendedClasses</name></expr></argument>, <argument><expr><name pos:line="238" pos:column="156">implementedInterfaces</name></expr></argument>, <argument><expr><name><name pos:line="238" pos:column="179">String</name><op:operator pos:line="238" pos:column="185">.</op:operator><name pos:line="238" pos:column="186">Empty</name></name></expr></argument>, <argument><expr><name pos:line="238" pos:column="193">body</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="241" pos:column="9">private</specifier> <name pos:line="241" pos:column="17">void</name></type> <name pos:line="241" pos:column="22">ParseConstructors</name><parameter_list pos:line="241" pos:column="39">(<param><decl><type><name><name pos:line="241" pos:column="40">List</name><argument_list pos:line="241" pos:column="44">&lt;<argument><name pos:line="241" pos:column="45">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="241" pos:column="61">programElements</name></decl></param>, <param><decl><type><name pos:line="241" pos:column="78">XElement</name></type> <name pos:line="241" pos:column="87">elements</name></decl></param>, <param><decl><type><name pos:line="241" pos:column="97">string</name></type> <name pos:line="241" pos:column="104">fileName</name></decl></param>)</parameter_list>
        <block pos:line="242" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="243" pos:column="13">IEnumerable</name><argument_list pos:line="243" pos:column="24">&lt;<argument><name pos:line="243" pos:column="25">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="243" pos:column="35">constructors</name> <init pos:line="243" pos:column="48">=
                <expr><linq><from pos:line="244" pos:column="17">from <expr><name pos:line="244" pos:column="22">el</name></expr> <in pos:line="244" pos:column="25">in <expr><call><name><name pos:line="244" pos:column="28">elements</name><op:operator pos:line="244" pos:column="36">.</op:operator><name pos:line="244" pos:column="37">Descendants</name></name><argument_list pos:line="244" pos:column="48">(<argument><expr><name><name pos:line="244" pos:column="49">SRC</name><op:operator pos:line="244" pos:column="52">.</op:operator><name pos:line="244" pos:column="53">Constructor</name></name></expr></argument>)</argument_list></call></expr></in></from>
                <select pos:line="245" pos:column="17">select <expr><name pos:line="245" pos:column="24">el</name></expr></select></linq></expr></init></decl>;</decl_stmt>
            <foreach pos:line="246" pos:column="13">foreach (<init><decl><type><name pos:line="246" pos:column="22">XElement</name></type> <name pos:line="246" pos:column="31">cons</name> <range pos:line="246" pos:column="36">in <expr><name pos:line="246" pos:column="39">constructors</name></expr></range></decl></init>)
            <block pos:line="247" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="248" pos:column="17">programElements</name><op:operator pos:line="248" pos:column="32">.</op:operator><name pos:line="248" pos:column="33">Add</name></name><argument_list pos:line="248" pos:column="36">(<argument><expr><call><name pos:line="248" pos:column="37">ParseMethod</name><argument_list pos:line="248" pos:column="48">(<argument><expr><name pos:line="248" pos:column="49">cons</name></expr></argument>, <argument><expr><name pos:line="248" pos:column="55">programElements</name></expr></argument>, <argument><expr><name pos:line="248" pos:column="72">fileName</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="248" pos:column="82">true</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>

        <function><type><specifier pos:line="252" pos:column="9">private</specifier> <name pos:line="252" pos:column="17">void</name></type> <name pos:line="252" pos:column="22">ParseMethods</name><parameter_list pos:line="252" pos:column="34">(<param><decl><type><name><name pos:line="252" pos:column="35">List</name><argument_list pos:line="252" pos:column="39">&lt;<argument><name pos:line="252" pos:column="40">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="252" pos:column="56">programElements</name></decl></param>, <param><decl><type><name pos:line="252" pos:column="73">XElement</name></type> <name pos:line="252" pos:column="82">elements</name></decl></param>, <param><decl><type><name pos:line="252" pos:column="92">string</name></type> <name pos:line="252" pos:column="99">fileName</name></decl></param>)</parameter_list>
        <block pos:line="253" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="254" pos:column="13">IEnumerable</name><argument_list pos:line="254" pos:column="24">&lt;<argument><name pos:line="254" pos:column="25">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="254" pos:column="35">functions</name> <init pos:line="254" pos:column="45">=
                <expr><linq><from pos:line="255" pos:column="17">from <expr><name pos:line="255" pos:column="22">el</name></expr> <in pos:line="255" pos:column="25">in <expr><call><name><name pos:line="255" pos:column="28">elements</name><op:operator pos:line="255" pos:column="36">.</op:operator><name pos:line="255" pos:column="37">Descendants</name></name><argument_list pos:line="255" pos:column="48">(<argument><expr><name><name pos:line="255" pos:column="49">SRC</name><op:operator pos:line="255" pos:column="52">.</op:operator><name pos:line="255" pos:column="53">Function</name></name></expr></argument>)</argument_list></call></expr></in></from>
                <where pos:line="256" pos:column="17">where <expr><call><name><name pos:line="256" pos:column="23">el</name><op:operator pos:line="256" pos:column="25">.</op:operator><name pos:line="256" pos:column="26">Element</name></name><argument_list pos:line="256" pos:column="33">(<argument><expr><name><name pos:line="256" pos:column="34">SRC</name><op:operator pos:line="256" pos:column="37">.</op:operator><name pos:line="256" pos:column="38">Name</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="256" pos:column="44">!=</op:operator> <name pos:line="256" pos:column="47">null</name></expr></where>
                <select pos:line="257" pos:column="17">select <expr><name pos:line="257" pos:column="24">el</name></expr></select></linq></expr></init></decl>;</decl_stmt>
            <foreach pos:line="258" pos:column="13">foreach (<init><decl><type><name pos:line="258" pos:column="22">XElement</name></type> <name pos:line="258" pos:column="31">func</name> <range pos:line="258" pos:column="36">in <expr><name pos:line="258" pos:column="39">functions</name></expr></range></decl></init>)
            <block pos:line="259" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="260" pos:column="17">programElements</name><op:operator pos:line="260" pos:column="32">.</op:operator><name pos:line="260" pos:column="33">Add</name></name><argument_list pos:line="260" pos:column="36">(<argument><expr><call><name pos:line="260" pos:column="37">ParseMethod</name><argument_list pos:line="260" pos:column="48">(<argument><expr><name pos:line="260" pos:column="49">func</name></expr></argument>, <argument><expr><name pos:line="260" pos:column="55">programElements</name></expr></argument>, <argument><expr><name pos:line="260" pos:column="72">fileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>

        <function><type><specifier pos:line="264" pos:column="9">private</specifier> <name pos:line="264" pos:column="17">MethodElement</name></type> <name pos:line="264" pos:column="31">ParseMethod</name><parameter_list pos:line="264" pos:column="42">(<param><decl><type><name pos:line="264" pos:column="43">XElement</name></type> <name pos:line="264" pos:column="52">method</name></decl></param>, <param><decl><type><name><name pos:line="264" pos:column="60">List</name><argument_list pos:line="264" pos:column="64">&lt;<argument><name pos:line="264" pos:column="65">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="264" pos:column="81">programElements</name></decl></param>, <param><decl><type><name pos:line="264" pos:column="98">string</name></type> <name pos:line="264" pos:column="105">fileName</name></decl></param>, <param><decl><type><name pos:line="264" pos:column="115">bool</name></type> <name pos:line="264" pos:column="120">isConstructor</name> <init pos:line="264" pos:column="134">= <expr><lit:literal type="boolean" pos:line="264" pos:column="136">false</lit:literal></expr></init></decl></param>)</parameter_list>
        <block pos:line="265" pos:column="9">{
            <return pos:line="266" pos:column="13">return <expr><call><name pos:line="266" pos:column="20">ParseMethod</name><argument_list pos:line="266" pos:column="31">(<argument><expr><name pos:line="266" pos:column="32">method</name></expr></argument>, <argument><expr><name pos:line="266" pos:column="40">programElements</name></expr></argument>, <argument><expr><name pos:line="266" pos:column="57">fileName</name></expr></argument>, <argument><expr><call><name pos:line="266" pos:column="67">typeof</name><argument_list pos:line="266" pos:column="73">(<argument><expr><name pos:line="266" pos:column="74">MethodElement</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="266" pos:column="90">isConstructor</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="269" pos:column="9">public</specifier> <specifier pos:line="269" pos:column="16">virtual</specifier> <name pos:line="269" pos:column="24">MethodElement</name></type> <name pos:line="269" pos:column="38">ParseMethod</name><parameter_list pos:line="269" pos:column="49">(<param><decl><type><name pos:line="269" pos:column="50">XElement</name></type> <name pos:line="269" pos:column="59">method</name></decl></param>, <param><decl><type><name><name pos:line="269" pos:column="67">List</name><argument_list pos:line="269" pos:column="71">&lt;<argument><name pos:line="269" pos:column="72">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="269" pos:column="88">programElements</name></decl></param>, <param><decl><type><name pos:line="269" pos:column="105">string</name></type> <name pos:line="269" pos:column="112">fileName</name></decl></param>, <param><decl><type><name pos:line="269" pos:column="122">Type</name></type> <name pos:line="269" pos:column="127">myType</name></decl></param>, <param><decl><type><name pos:line="269" pos:column="135">bool</name></type> <name pos:line="269" pos:column="140">isConstructor</name> <init pos:line="269" pos:column="154">= <expr><lit:literal type="boolean" pos:line="269" pos:column="156">false</lit:literal></expr></init></decl></param>)</parameter_list>
        <block pos:line="270" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="271" pos:column="13">string</name></type> <name pos:line="271" pos:column="20">name</name> <init pos:line="271" pos:column="25">= <expr><name><name pos:line="271" pos:column="27">String</name><op:operator pos:line="271" pos:column="33">.</op:operator><name pos:line="271" pos:column="34">Empty</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="272" pos:column="13">int</name></type> <name pos:line="272" pos:column="17">definitionLineNumber</name> <init pos:line="272" pos:column="38">= <expr><lit:literal type="number" pos:line="272" pos:column="40">0</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="273" pos:column="13">int</name></type> <name pos:line="273" pos:column="17">definitionColumnNumber</name> <init pos:line="273" pos:column="40">= <expr><lit:literal type="number" pos:line="273" pos:column="42">0</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="274" pos:column="13">string</name></type> <name pos:line="274" pos:column="20">returnType</name> <init pos:line="274" pos:column="31">= <expr><name><name pos:line="274" pos:column="33">String</name><op:operator pos:line="274" pos:column="39">.</op:operator><name pos:line="274" pos:column="40">Empty</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="276" pos:column="13">SrcMLParsingUtils</name><op:operator pos:line="276" pos:column="30">.</op:operator><name pos:line="276" pos:column="31">ParseNameAndLineNumber</name></name><argument_list pos:line="276" pos:column="53">(<argument><expr><name pos:line="276" pos:column="54">method</name></expr></argument>, <argument><expr pos:line="276" pos:column="62">out <name pos:line="276" pos:column="66">name</name></expr></argument>, <argument><expr pos:line="276" pos:column="72">out <name pos:line="276" pos:column="76">definitionLineNumber</name></expr></argument>, <argument><expr pos:line="276" pos:column="98">out <name pos:line="276" pos:column="102">definitionColumnNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name pos:line="278" pos:column="25">AccessLevel</name></type> <name pos:line="278" pos:column="37">accessLevel</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="279" pos:column="13">XElement</name></type> <name pos:line="279" pos:column="22">type</name> <init pos:line="279" pos:column="27">= <expr><call><name><name pos:line="279" pos:column="29">method</name><op:operator pos:line="279" pos:column="35">.</op:operator><name pos:line="279" pos:column="36">Element</name></name><argument_list pos:line="279" pos:column="43">(<argument><expr><name><name pos:line="279" pos:column="44">SRC</name><op:operator pos:line="279" pos:column="47">.</op:operator><name pos:line="279" pos:column="48">Type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="280" pos:column="13">if <condition pos:line="280" pos:column="16">(<expr><name pos:line="280" pos:column="17">type</name> <op:operator pos:line="280" pos:column="22">!=</op:operator> <name pos:line="280" pos:column="25">null</name></expr>)</condition><then pos:line="280" pos:column="30">
            <block pos:line="281" pos:column="13">{
                <expr_stmt><expr><name pos:line="282" pos:column="17">accessLevel</name> <op:operator pos:line="282" pos:column="29">=</op:operator> <call><name><name pos:line="282" pos:column="31">SrcMLParsingUtils</name><op:operator pos:line="282" pos:column="48">.</op:operator><name pos:line="282" pos:column="49">RetrieveAccessLevel</name></name><argument_list pos:line="282" pos:column="68">(<argument><expr><name pos:line="282" pos:column="69">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name pos:line="284" pos:column="17">XElement</name></type> <name pos:line="284" pos:column="26">typeName</name> <init pos:line="284" pos:column="35">= <expr><call><name><name pos:line="284" pos:column="37">type</name><op:operator pos:line="284" pos:column="41">.</op:operator><name pos:line="284" pos:column="42">Element</name></name><argument_list pos:line="284" pos:column="49">(<argument><expr><name><name pos:line="284" pos:column="50">SRC</name><op:operator pos:line="284" pos:column="53">.</op:operator><name pos:line="284" pos:column="54">Name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="285" pos:column="17">if <condition pos:line="285" pos:column="20">(<expr><name pos:line="285" pos:column="21">typeName</name> <op:operator pos:line="285" pos:column="30">!=</op:operator> <name pos:line="285" pos:column="33">null</name></expr>)</condition><then pos:line="285" pos:column="38">
                <block pos:line="286" pos:column="17">{
                    <expr_stmt><expr><name pos:line="287" pos:column="21">returnType</name> <op:operator pos:line="287" pos:column="32">=</op:operator> <name><name pos:line="287" pos:column="34">typeName</name><op:operator pos:line="287" pos:column="42">.</op:operator><name pos:line="287" pos:column="43">Value</name></name></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="289" pos:column="17">else
                <block pos:line="290" pos:column="17">{
                    <expr_stmt><expr><name pos:line="291" pos:column="21">returnType</name> <op:operator pos:line="291" pos:column="32">=</op:operator> <lit:literal type="string" pos:line="291" pos:column="34">"void"</lit:literal></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then>
            <else pos:line="294" pos:column="13">else
            <block pos:line="295" pos:column="13">{
                <expr_stmt><expr><name pos:line="296" pos:column="17">accessLevel</name> <op:operator pos:line="296" pos:column="29">=</op:operator> <call><name><name pos:line="296" pos:column="31">SrcMLParsingUtils</name><op:operator pos:line="296" pos:column="48">.</op:operator><name pos:line="296" pos:column="49">RetrieveAccessLevel</name></name><argument_list pos:line="296" pos:column="68">(<argument><expr><name pos:line="296" pos:column="69">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <if pos:line="299" pos:column="13">if <condition pos:line="299" pos:column="16">(<expr><call><name><name pos:line="299" pos:column="17">String</name><op:operator pos:line="299" pos:column="23">.</op:operator><name pos:line="299" pos:column="24">IsNullOrEmpty</name></name><argument_list pos:line="299" pos:column="37">(<argument><expr><name pos:line="299" pos:column="38">returnType</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="299" pos:column="50">
            <block pos:line="300" pos:column="13">{
                <if pos:line="301" pos:column="17">if <condition pos:line="301" pos:column="20">(<expr><call><name><name pos:line="301" pos:column="21">name</name><op:operator pos:line="301" pos:column="25">.</op:operator><name pos:line="301" pos:column="26">Equals</name></name><argument_list pos:line="301" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="301" pos:column="33">"get"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="301" pos:column="40">
                <block pos:line="302" pos:column="17">{
                    <try pos:line="303" pos:column="21">try
                    <block pos:line="304" pos:column="21">{
                        <decl_stmt><decl><type><name pos:line="305" pos:column="25">var</name></type> <name pos:line="305" pos:column="29">myName</name> <init pos:line="305" pos:column="36">=
                            <expr><call><name><name pos:line="306" pos:column="29">method</name><op:operator pos:line="306" pos:column="35">.</op:operator><name pos:line="306" pos:column="36">Ancestors</name></name><argument_list pos:line="306" pos:column="45">(<argument><expr><name><name pos:line="306" pos:column="46">SRC</name><op:operator pos:line="306" pos:column="49">.</op:operator><name pos:line="306" pos:column="50">DeclarationStatement</name></name></expr></argument>)</argument_list></call><op:operator pos:line="306" pos:column="71">.</op:operator><call><name pos:line="306" pos:column="72">Descendants</name><argument_list pos:line="306" pos:column="83">(<argument><expr><name><name pos:line="306" pos:column="84">SRC</name><op:operator pos:line="306" pos:column="87">.</op:operator><name pos:line="306" pos:column="88">Declaration</name></name></expr></argument>)</argument_list></call><op:operator pos:line="306" pos:column="100">.</op:operator>
                                <call><name pos:line="307" pos:column="33">Descendants</name><argument_list pos:line="307" pos:column="44">(<argument><expr><name><name pos:line="307" pos:column="45">SRC</name><op:operator pos:line="307" pos:column="48">.</op:operator><name pos:line="307" pos:column="49">Type</name></name></expr></argument>)</argument_list></call><op:operator pos:line="307" pos:column="54">.</op:operator><call><name pos:line="307" pos:column="55">Elements</name><argument_list pos:line="307" pos:column="63">(<argument><expr><name><name pos:line="307" pos:column="64">SRC</name><op:operator pos:line="307" pos:column="67">.</op:operator><name pos:line="307" pos:column="68">Name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name pos:line="308" pos:column="25">returnType</name> <op:operator pos:line="308" pos:column="36">=</op:operator> <call><name><name pos:line="308" pos:column="38">myName</name><op:operator pos:line="308" pos:column="44">.</op:operator><name pos:line="308" pos:column="45">First</name></name><argument_list pos:line="308" pos:column="50">()</argument_list></call><op:operator pos:line="308" pos:column="52">.</op:operator><name pos:line="308" pos:column="53">Value</name></expr>;</expr_stmt>
                    }</block>
                    <catch pos:line="310" pos:column="21">catch <parameter_list pos:line="310" pos:column="27">(<param><decl><type><name pos:line="310" pos:column="28">NullReferenceException</name></type> <name pos:line="310" pos:column="51">nre</name></decl></param>)</parameter_list>
                    <block pos:line="311" pos:column="21">{
                        <expr_stmt><expr><name pos:line="312" pos:column="25">returnType</name> <op:operator pos:line="312" pos:column="36">=</op:operator> <lit:literal type="string" pos:line="312" pos:column="38">""</lit:literal></expr>;</expr_stmt>
                    }</block></catch></try>
                }</block></then>
                <else pos:line="315" pos:column="17">else <if pos:line="315" pos:column="22">if <condition pos:line="315" pos:column="25">(<expr><call><name><name pos:line="315" pos:column="26">name</name><op:operator pos:line="315" pos:column="30">.</op:operator><name pos:line="315" pos:column="31">Equals</name></name><argument_list pos:line="315" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="315" pos:column="38">"set"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="315" pos:column="45">
                <block pos:line="316" pos:column="17">{
                    <expr_stmt><expr><name pos:line="317" pos:column="21">returnType</name> <op:operator pos:line="317" pos:column="32">=</op:operator> <lit:literal type="string" pos:line="317" pos:column="34">"void"</lit:literal></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="319" pos:column="17">else <if pos:line="319" pos:column="22">if <condition pos:line="319" pos:column="25">(<expr><call><name><name pos:line="319" pos:column="26">name</name><op:operator pos:line="319" pos:column="30">.</op:operator><name pos:line="319" pos:column="31">Equals</name></name><argument_list pos:line="319" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="319" pos:column="38">"add"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="319" pos:column="45">||</op:operator> <call><name><name pos:line="319" pos:column="48">name</name><op:operator pos:line="319" pos:column="52">.</op:operator><name pos:line="319" pos:column="53">Equals</name></name><argument_list pos:line="319" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="319" pos:column="60">"remove"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="319" pos:column="70">
                <block pos:line="320" pos:column="17">{
                    <try pos:line="321" pos:column="21">try
                    <block pos:line="322" pos:column="21">{
                        <decl_stmt><decl><type><name pos:line="323" pos:column="25">var</name></type> <name pos:line="323" pos:column="29">myName</name> <init pos:line="323" pos:column="36">=
                            <expr><call><name><name pos:line="324" pos:column="29">method</name><op:operator pos:line="324" pos:column="35">.</op:operator><name pos:line="324" pos:column="36">Parent</name><op:operator pos:line="324" pos:column="42">.</op:operator><name pos:line="324" pos:column="43">Parent</name><op:operator pos:line="324" pos:column="49">.</op:operator><name pos:line="324" pos:column="50">Elements</name></name><argument_list pos:line="324" pos:column="58">(<argument><expr><name><name pos:line="324" pos:column="59">SRC</name><op:operator pos:line="324" pos:column="62">.</op:operator><name pos:line="324" pos:column="63">Type</name></name></expr></argument>)</argument_list></call><op:operator pos:line="324" pos:column="68">.</op:operator><call><name pos:line="324" pos:column="69">First</name><argument_list pos:line="324" pos:column="74">()</argument_list></call><op:operator pos:line="324" pos:column="76">.</op:operator><call><name pos:line="324" pos:column="77">Elements</name><argument_list pos:line="324" pos:column="85">(<argument><expr><name><name pos:line="324" pos:column="86">SRC</name><op:operator pos:line="324" pos:column="89">.</op:operator><name pos:line="324" pos:column="90">Name</name></name></expr></argument>)</argument_list></call><op:operator pos:line="324" pos:column="95">.</op:operator><call><name pos:line="324" pos:column="96">First</name><argument_list pos:line="324" pos:column="101">()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name pos:line="325" pos:column="25">returnType</name> <op:operator pos:line="325" pos:column="36">=</op:operator> <name><name pos:line="325" pos:column="38">myName</name><op:operator pos:line="325" pos:column="44">.</op:operator><name pos:line="325" pos:column="45">Value</name></name></expr>;</expr_stmt>
                    }</block>
                    <catch pos:line="327" pos:column="21">catch <parameter_list pos:line="327" pos:column="27">(<param><decl><type><name pos:line="327" pos:column="28">NullReferenceException</name></type> <name pos:line="327" pos:column="51">nre</name></decl></param>)</parameter_list>
                    <block pos:line="328" pos:column="21">{
                        <expr_stmt><expr><name pos:line="329" pos:column="25">returnType</name> <op:operator pos:line="329" pos:column="36">=</op:operator> <lit:literal type="string" pos:line="329" pos:column="38">""</lit:literal></expr>;</expr_stmt>
                    }</block></catch></try>
                }</block></then></if></else></if></else></if>
            }</block></then></if>


            <comment type="line" pos:line="335" pos:column="13">//parse arguments</comment>
            <decl_stmt><decl><type><name pos:line="336" pos:column="13">XElement</name></type> <name pos:line="336" pos:column="22">paramlist</name> <init pos:line="336" pos:column="32">= <expr><call><name><name pos:line="336" pos:column="34">method</name><op:operator pos:line="336" pos:column="40">.</op:operator><name pos:line="336" pos:column="41">Element</name></name><argument_list pos:line="336" pos:column="48">(<argument><expr><name><name pos:line="336" pos:column="49">SRC</name><op:operator pos:line="336" pos:column="52">.</op:operator><name pos:line="336" pos:column="53">ParameterList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="337" pos:column="13">string</name></type> <name pos:line="337" pos:column="20">arguments</name> <init pos:line="337" pos:column="30">= <expr><name><name pos:line="337" pos:column="32">String</name><op:operator pos:line="337" pos:column="38">.</op:operator><name pos:line="337" pos:column="39">Empty</name></name></expr></init></decl>;</decl_stmt>
            <if pos:line="338" pos:column="13">if <condition pos:line="338" pos:column="16">(<expr><name pos:line="338" pos:column="17">paramlist</name> <op:operator pos:line="338" pos:column="27">!=</op:operator> <name pos:line="338" pos:column="30">null</name></expr>)</condition><then pos:line="338" pos:column="35">
            <block pos:line="339" pos:column="13">{
                <decl_stmt><decl><type><name><name pos:line="340" pos:column="17">IEnumerable</name><argument_list pos:line="340" pos:column="28">&lt;<argument><name pos:line="340" pos:column="29">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="340" pos:column="39">argumentElements</name> <init pos:line="340" pos:column="56">=
                    <expr><linq><from pos:line="341" pos:column="21">from <expr><name pos:line="341" pos:column="26">el</name></expr> <in pos:line="341" pos:column="29">in <expr><call><name><name pos:line="341" pos:column="32">paramlist</name><op:operator pos:line="341" pos:column="41">.</op:operator><name pos:line="341" pos:column="42">Descendants</name></name><argument_list pos:line="341" pos:column="53">(<argument><expr><name><name pos:line="341" pos:column="54">SRC</name><op:operator pos:line="341" pos:column="57">.</op:operator><name pos:line="341" pos:column="58">Name</name></name></expr></argument>)</argument_list></call></expr></in></from>
                    <select pos:line="342" pos:column="21">select <expr><name pos:line="342" pos:column="28">el</name></expr></select></linq></expr></init></decl>;</decl_stmt>

                <foreach pos:line="344" pos:column="17">foreach (<init><decl><type><name pos:line="344" pos:column="26">XElement</name></type> <name pos:line="344" pos:column="35">elem</name> <range pos:line="344" pos:column="40">in <expr><name pos:line="344" pos:column="43">argumentElements</name></expr></range></decl></init>)
                <block pos:line="345" pos:column="17">{
                    <expr_stmt><expr><name pos:line="346" pos:column="21">arguments</name> <op:operator pos:line="346" pos:column="31">+=</op:operator> <name><name pos:line="346" pos:column="34">elem</name><op:operator pos:line="346" pos:column="38">.</op:operator><name pos:line="346" pos:column="39">Value</name></name> <op:operator pos:line="346" pos:column="45">+</op:operator> <lit:literal type="string" pos:line="346" pos:column="47">" "</lit:literal></expr>;</expr_stmt>
                }</block></foreach>
            }</block></then></if>
            <expr_stmt><expr><name pos:line="349" pos:column="13">arguments</name> <op:operator pos:line="349" pos:column="23">=</op:operator> <call><name><name pos:line="349" pos:column="25">arguments</name><op:operator pos:line="349" pos:column="34">.</op:operator><name pos:line="349" pos:column="35">TrimEnd</name></name><argument_list pos:line="349" pos:column="42">()</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="351" pos:column="13">string</name></type> <name pos:line="351" pos:column="20">body</name> <init pos:line="351" pos:column="25">= <expr><call><name><name pos:line="351" pos:column="27">SrcMLParsingUtils</name><op:operator pos:line="351" pos:column="44">.</op:operator><name pos:line="351" pos:column="45">ParseBody</name></name><argument_list pos:line="351" pos:column="54">(<argument><expr><name pos:line="351" pos:column="55">method</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="353" pos:column="13">ClassElement</name></type> <name pos:line="353" pos:column="26">classElement</name> <init pos:line="353" pos:column="39">= <expr><call><name><name pos:line="353" pos:column="41">SrcMLParsingUtils</name><op:operator pos:line="353" pos:column="58">.</op:operator><name pos:line="353" pos:column="59">RetrieveClassElement</name></name><argument_list pos:line="353" pos:column="79">(<argument><expr><name pos:line="353" pos:column="80">method</name></expr></argument>, <argument><expr><name pos:line="353" pos:column="88">programElements</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="354" pos:column="13">Guid</name></type> <name pos:line="354" pos:column="18">classId</name> <init pos:line="354" pos:column="26">= <expr><name pos:line="354" pos:column="28">classElement</name> <op:operator pos:line="354" pos:column="41">!=</op:operator> <name pos:line="354" pos:column="44">null</name> <op:operator pos:line="354" pos:column="49">?</op:operator> <name><name pos:line="354" pos:column="51">classElement</name><op:operator pos:line="354" pos:column="63">.</op:operator><name pos:line="354" pos:column="64">Id</name></name> <op:operator pos:line="354" pos:column="67">:</op:operator> <name><name pos:line="354" pos:column="69">Guid</name><op:operator pos:line="354" pos:column="73">.</op:operator><name pos:line="354" pos:column="74">Empty</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="355" pos:column="13">string</name></type> <name pos:line="355" pos:column="20">className</name> <init pos:line="355" pos:column="30">= <expr><name pos:line="355" pos:column="32">classElement</name> <op:operator pos:line="355" pos:column="45">!=</op:operator> <name pos:line="355" pos:column="48">null</name> <op:operator pos:line="355" pos:column="53">?</op:operator> <name><name pos:line="355" pos:column="55">classElement</name><op:operator pos:line="355" pos:column="67">.</op:operator><name pos:line="355" pos:column="68">Name</name></name> <op:operator pos:line="355" pos:column="73">:</op:operator> <name><name pos:line="355" pos:column="75">String</name><op:operator pos:line="355" pos:column="81">.</op:operator><name pos:line="355" pos:column="82">Empty</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="357" pos:column="13">string</name></type> <name pos:line="357" pos:column="20">fullFilePath</name> <init pos:line="357" pos:column="33">= <expr><call><name><name pos:line="357" pos:column="35">System</name><op:operator pos:line="357" pos:column="41">.</op:operator><name pos:line="357" pos:column="42">IO</name><op:operator pos:line="357" pos:column="44">.</op:operator><name pos:line="357" pos:column="45">Path</name><op:operator pos:line="357" pos:column="49">.</op:operator><name pos:line="357" pos:column="50">GetFullPath</name></name><argument_list pos:line="357" pos:column="61">(<argument><expr><name pos:line="357" pos:column="62">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="359" pos:column="13">string</name></type> <name pos:line="359" pos:column="20">source</name> <init pos:line="359" pos:column="27">= <expr><call><name><name pos:line="359" pos:column="29">SrcMLParsingUtils</name><op:operator pos:line="359" pos:column="46">.</op:operator><name pos:line="359" pos:column="47">RetrieveSource</name></name><argument_list pos:line="359" pos:column="61">(<argument><expr><name pos:line="359" pos:column="62">method</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <return pos:line="361" pos:column="13">return <expr><call><name><name pos:line="361" pos:column="20">Activator</name><op:operator pos:line="361" pos:column="29">.</op:operator><name pos:line="361" pos:column="30">CreateInstance</name></name><argument_list pos:line="361" pos:column="44">(<argument><expr><name pos:line="361" pos:column="45">myType</name></expr></argument>, <argument><expr><name pos:line="361" pos:column="53">name</name></expr></argument>, <argument><expr><name pos:line="361" pos:column="59">definitionLineNumber</name></expr></argument>, <argument><expr><name pos:line="361" pos:column="81">definitionColumnNumber</name></expr></argument>, <argument><expr><name pos:line="361" pos:column="105">fullFilePath</name></expr></argument>, <argument><expr><name pos:line="361" pos:column="119">source</name></expr></argument>, <argument><expr><name pos:line="361" pos:column="127">accessLevel</name></expr></argument>, <argument><expr><name pos:line="361" pos:column="140">arguments</name></expr></argument>, <argument><expr><name pos:line="361" pos:column="151">returnType</name></expr></argument>, <argument><expr><name pos:line="361" pos:column="163">body</name></expr></argument>,
                                        <argument><expr><name pos:line="362" pos:column="41">classId</name></expr></argument>, <argument><expr><name pos:line="362" pos:column="50">className</name></expr></argument>, <argument><expr><name><name pos:line="362" pos:column="61">String</name><op:operator pos:line="362" pos:column="67">.</op:operator><name pos:line="362" pos:column="68">Empty</name></name></expr></argument>, <argument><expr><name pos:line="362" pos:column="75">isConstructor</name></expr></argument>)</argument_list></call> <op:operator pos:line="362" pos:column="90">as</op:operator> <name pos:line="362" pos:column="93">MethodElement</name></expr>;</return>
        }</block></function>


        <function><type><specifier pos:line="366" pos:column="9">public</specifier> <specifier pos:line="366" pos:column="16">static</specifier> <name pos:line="366" pos:column="23">void</name></type> <name pos:line="366" pos:column="28">ParseEnums</name><parameter_list pos:line="366" pos:column="38">(<param><decl><type><name><name pos:line="366" pos:column="39">List</name><argument_list pos:line="366" pos:column="43">&lt;<argument><name pos:line="366" pos:column="44">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="366" pos:column="60">programElements</name></decl></param>, <param><decl><type><name pos:line="366" pos:column="77">XElement</name></type> <name pos:line="366" pos:column="86">elements</name></decl></param>, <param><decl><type><name pos:line="366" pos:column="96">string</name></type> <name pos:line="366" pos:column="103">fileName</name></decl></param>, <param><decl><type><name pos:line="366" pos:column="113">int</name></type> <name pos:line="366" pos:column="117">snippetSize</name></decl></param>)</parameter_list>
        <block pos:line="367" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="368" pos:column="13">IEnumerable</name><argument_list pos:line="368" pos:column="24">&lt;<argument><name pos:line="368" pos:column="25">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="368" pos:column="35">enums</name> <init pos:line="368" pos:column="41">=
                <expr><linq><from pos:line="369" pos:column="17">from <expr><name pos:line="369" pos:column="22">el</name></expr> <in pos:line="369" pos:column="25">in <expr><call><name><name pos:line="369" pos:column="28">elements</name><op:operator pos:line="369" pos:column="36">.</op:operator><name pos:line="369" pos:column="37">Descendants</name></name><argument_list pos:line="369" pos:column="48">(<argument><expr><name><name pos:line="369" pos:column="49">SRC</name><op:operator pos:line="369" pos:column="52">.</op:operator><name pos:line="369" pos:column="53">Enum</name></name></expr></argument>)</argument_list></call></expr></in></from>
                <select pos:line="370" pos:column="17">select <expr><name pos:line="370" pos:column="24">el</name></expr></select></linq></expr></init></decl>;</decl_stmt>

            <foreach pos:line="372" pos:column="13">foreach (<init><decl><type><name pos:line="372" pos:column="22">XElement</name></type> <name pos:line="372" pos:column="31">enm</name> <range pos:line="372" pos:column="35">in <expr><name pos:line="372" pos:column="38">enums</name></expr></range></decl></init>)
            <block pos:line="373" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="374" pos:column="17">AccessLevel</name></type> <name pos:line="374" pos:column="29">accessLevel</name> <init pos:line="374" pos:column="41">= <expr><call><name><name pos:line="374" pos:column="43">SrcMLParsingUtils</name><op:operator pos:line="374" pos:column="60">.</op:operator><name pos:line="374" pos:column="61">RetrieveAccessLevel</name></name><argument_list pos:line="374" pos:column="80">(<argument><expr><name pos:line="374" pos:column="81">enm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name pos:line="376" pos:column="17">string</name></type> <name pos:line="376" pos:column="24">name</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="377" pos:column="17">int</name></type> <name pos:line="377" pos:column="21">definitionLineNumber</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="378" pos:column="17">int</name></type> <name pos:line="378" pos:column="21">definitionColumnNumber</name></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="379" pos:column="17">SrcMLParsingUtils</name><op:operator pos:line="379" pos:column="34">.</op:operator><name pos:line="379" pos:column="35">ParseNameAndLineNumber</name></name><argument_list pos:line="379" pos:column="57">(<argument><expr><name pos:line="379" pos:column="58">enm</name></expr></argument>, <argument><expr pos:line="379" pos:column="63">out <name pos:line="379" pos:column="67">name</name></expr></argument>, <argument><expr pos:line="379" pos:column="73">out <name pos:line="379" pos:column="77">definitionLineNumber</name></expr></argument>, <argument><expr pos:line="379" pos:column="99">out <name pos:line="379" pos:column="103">definitionColumnNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line" pos:line="381" pos:column="17">//parse namespace</comment>
                <decl_stmt><decl><type><name><name pos:line="382" pos:column="17">IEnumerable</name><argument_list pos:line="382" pos:column="28">&lt;<argument><name pos:line="382" pos:column="29">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="382" pos:column="39">ownerNamespaces</name> <init pos:line="382" pos:column="55">=
                    <expr><linq><from pos:line="383" pos:column="21">from <expr><name pos:line="383" pos:column="26">el</name></expr> <in pos:line="383" pos:column="29">in <expr><call><name><name pos:line="383" pos:column="32">enm</name><op:operator pos:line="383" pos:column="35">.</op:operator><name pos:line="383" pos:column="36">Ancestors</name></name><argument_list pos:line="383" pos:column="45">(<argument><expr><name><name pos:line="383" pos:column="46">SRC</name><op:operator pos:line="383" pos:column="49">.</op:operator><name pos:line="383" pos:column="50">Namespace</name></name></expr></argument>)</argument_list></call></expr></in></from>
                    <select pos:line="384" pos:column="21">select <expr><name pos:line="384" pos:column="28">el</name></expr></select></linq></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="385" pos:column="17">string</name></type> <name pos:line="385" pos:column="24">namespaceName</name> <init pos:line="385" pos:column="38">= <expr><name><name pos:line="385" pos:column="40">String</name><op:operator pos:line="385" pos:column="46">.</op:operator><name pos:line="385" pos:column="47">Empty</name></name></expr></init></decl>;</decl_stmt>
                <foreach pos:line="386" pos:column="17">foreach (<init><decl><type><name pos:line="386" pos:column="26">XElement</name></type> <name pos:line="386" pos:column="35">ownerNamespace</name> <range pos:line="386" pos:column="50">in <expr><name pos:line="386" pos:column="53">ownerNamespaces</name></expr></range></decl></init>)
                <block pos:line="387" pos:column="17">{
                    <foreach pos:line="388" pos:column="21">foreach (<init><decl><type><name pos:line="388" pos:column="30">XElement</name></type> <name pos:line="388" pos:column="39">spc</name> <range pos:line="388" pos:column="43">in <expr><call><name><name pos:line="388" pos:column="46">ownerNamespace</name><op:operator pos:line="388" pos:column="60">.</op:operator><name pos:line="388" pos:column="61">Elements</name></name><argument_list pos:line="388" pos:column="69">(<argument><expr><name><name pos:line="388" pos:column="70">SRC</name><op:operator pos:line="388" pos:column="73">.</op:operator><name pos:line="388" pos:column="74">Name</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)
                    <block pos:line="389" pos:column="21">{
                        <expr_stmt><expr><name pos:line="390" pos:column="25">namespaceName</name> <op:operator pos:line="390" pos:column="39">+=</op:operator> <name><name pos:line="390" pos:column="42">spc</name><op:operator pos:line="390" pos:column="45">.</op:operator><name pos:line="390" pos:column="46">Value</name></name> <op:operator pos:line="390" pos:column="52">+</op:operator> <lit:literal type="string" pos:line="390" pos:column="54">" "</lit:literal></expr>;</expr_stmt>
                    }</block></foreach>
                }</block></foreach>
                <expr_stmt><expr><name pos:line="393" pos:column="17">namespaceName</name> <op:operator pos:line="393" pos:column="31">=</op:operator> <call><name><name pos:line="393" pos:column="33">namespaceName</name><op:operator pos:line="393" pos:column="46">.</op:operator><name pos:line="393" pos:column="47">TrimEnd</name></name><argument_list pos:line="393" pos:column="54">()</argument_list></call></expr>;</expr_stmt>

                <comment type="line" pos:line="395" pos:column="17">//parse values</comment>
                <decl_stmt><decl><type><name pos:line="396" pos:column="17">XElement</name></type> <name pos:line="396" pos:column="26">block</name> <init pos:line="396" pos:column="32">= <expr><call><name><name pos:line="396" pos:column="34">enm</name><op:operator pos:line="396" pos:column="37">.</op:operator><name pos:line="396" pos:column="38">Element</name></name><argument_list pos:line="396" pos:column="45">(<argument><expr><name><name pos:line="396" pos:column="46">SRC</name><op:operator pos:line="396" pos:column="49">.</op:operator><name pos:line="396" pos:column="50">Block</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="397" pos:column="17">string</name></type> <name pos:line="397" pos:column="24">values</name> <init pos:line="397" pos:column="31">= <expr><name><name pos:line="397" pos:column="33">String</name><op:operator pos:line="397" pos:column="39">.</op:operator><name pos:line="397" pos:column="40">Empty</name></name></expr></init></decl>;</decl_stmt>
                <if pos:line="398" pos:column="17">if <condition pos:line="398" pos:column="20">(<expr><name pos:line="398" pos:column="21">block</name> <op:operator pos:line="398" pos:column="27">!=</op:operator> <name pos:line="398" pos:column="30">null</name></expr>)</condition><then pos:line="398" pos:column="35">
                <block pos:line="399" pos:column="17">{
                    <decl_stmt><decl><type><name><name pos:line="400" pos:column="21">IEnumerable</name><argument_list pos:line="400" pos:column="32">&lt;<argument><name pos:line="400" pos:column="33">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="400" pos:column="43">exprs</name> <init pos:line="400" pos:column="49">=
                        <expr><linq><from pos:line="401" pos:column="25">from <expr><name pos:line="401" pos:column="30">el</name></expr> <in pos:line="401" pos:column="33">in <expr><call><name><name pos:line="401" pos:column="36">block</name><op:operator pos:line="401" pos:column="41">.</op:operator><name pos:line="401" pos:column="42">Descendants</name></name><argument_list pos:line="401" pos:column="53">(<argument><expr><name><name pos:line="401" pos:column="54">SRC</name><op:operator pos:line="401" pos:column="57">.</op:operator><name pos:line="401" pos:column="58">Expression</name></name></expr></argument>)</argument_list></call></expr></in></from>
                        <select pos:line="402" pos:column="25">select <expr><name pos:line="402" pos:column="32">el</name></expr></select></linq></expr></init></decl>;</decl_stmt>
                    <foreach pos:line="403" pos:column="21">foreach (<init><decl><type><name pos:line="403" pos:column="30">XElement</name></type> <name pos:line="403" pos:column="39">expr</name> <range pos:line="403" pos:column="44">in <expr><name pos:line="403" pos:column="47">exprs</name></expr></range></decl></init>)
                    <block pos:line="404" pos:column="21">{
                        <decl_stmt><decl><type><name><name pos:line="405" pos:column="25">IEnumerable</name><argument_list pos:line="405" pos:column="36">&lt;<argument><name pos:line="405" pos:column="37">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="405" pos:column="47">enames</name> <init pos:line="405" pos:column="54">= <expr><call><name><name pos:line="405" pos:column="56">expr</name><op:operator pos:line="405" pos:column="60">.</op:operator><name pos:line="405" pos:column="61">Elements</name></name><argument_list pos:line="405" pos:column="69">(<argument><expr><name><name pos:line="405" pos:column="70">SRC</name><op:operator pos:line="405" pos:column="73">.</op:operator><name pos:line="405" pos:column="74">Name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <foreach pos:line="406" pos:column="25">foreach (<init><decl><type><name pos:line="406" pos:column="34">XElement</name></type> <name pos:line="406" pos:column="43">ename</name> <range pos:line="406" pos:column="49">in <expr><name pos:line="406" pos:column="52">enames</name></expr></range></decl></init>)
                        <block pos:line="407" pos:column="25">{
                            <expr_stmt><expr><name pos:line="408" pos:column="29">values</name> <op:operator pos:line="408" pos:column="36">+=</op:operator> <name><name pos:line="408" pos:column="39">ename</name><op:operator pos:line="408" pos:column="44">.</op:operator><name pos:line="408" pos:column="45">Value</name></name> <op:operator pos:line="408" pos:column="51">+</op:operator> <lit:literal type="string" pos:line="408" pos:column="53">" "</lit:literal></expr>;</expr_stmt>
                        }</block></foreach>
                    }</block></foreach>
                    <expr_stmt><expr><name pos:line="411" pos:column="21">values</name> <op:operator pos:line="411" pos:column="28">=</op:operator> <call><name><name pos:line="411" pos:column="30">values</name><op:operator pos:line="411" pos:column="36">.</op:operator><name pos:line="411" pos:column="37">TrimEnd</name></name><argument_list pos:line="411" pos:column="44">()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <decl_stmt><decl><type><name pos:line="414" pos:column="17">string</name></type> <name pos:line="414" pos:column="24">fullFilePath</name> <init pos:line="414" pos:column="37">= <expr><call><name><name pos:line="414" pos:column="39">System</name><op:operator pos:line="414" pos:column="45">.</op:operator><name pos:line="414" pos:column="46">IO</name><op:operator pos:line="414" pos:column="48">.</op:operator><name pos:line="414" pos:column="49">Path</name><op:operator pos:line="414" pos:column="53">.</op:operator><name pos:line="414" pos:column="54">GetFullPath</name></name><argument_list pos:line="414" pos:column="65">(<argument><expr><name pos:line="414" pos:column="66">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="415" pos:column="17">string</name></type> <name pos:line="415" pos:column="24">source</name> <init pos:line="415" pos:column="31">= <expr><call><name><name pos:line="415" pos:column="33">SrcMLParsingUtils</name><op:operator pos:line="415" pos:column="50">.</op:operator><name pos:line="415" pos:column="51">RetrieveSource</name></name><argument_list pos:line="415" pos:column="65">(<argument><expr><name pos:line="415" pos:column="66">enm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name pos:line="417" pos:column="17">programElements</name><op:operator pos:line="417" pos:column="32">.</op:operator><name pos:line="417" pos:column="33">Add</name></name><argument_list pos:line="417" pos:column="36">(<argument><expr><op:operator pos:line="417" pos:column="37">new</op:operator> <call><name pos:line="417" pos:column="41">EnumElement</name><argument_list pos:line="417" pos:column="52">(<argument><expr><name pos:line="417" pos:column="53">name</name></expr></argument>, <argument><expr><name pos:line="417" pos:column="59">definitionLineNumber</name></expr></argument>, <argument><expr><name pos:line="417" pos:column="81">definitionColumnNumber</name></expr></argument>, <argument><expr><name pos:line="417" pos:column="105">fullFilePath</name></expr></argument>, <argument><expr><name pos:line="417" pos:column="119">source</name></expr></argument>, <argument><expr><name pos:line="417" pos:column="127">accessLevel</name></expr></argument>, <argument><expr><name pos:line="417" pos:column="140">namespaceName</name></expr></argument>, <argument><expr><name pos:line="417" pos:column="155">values</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>
    }</block></class>

}</block></namespace>
</unit>
