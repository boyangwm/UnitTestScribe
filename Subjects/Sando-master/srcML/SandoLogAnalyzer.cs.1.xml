<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Core\Core\Tools\SandoLogAnalyzer.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">IO</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Linq</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Text</name></name>;</using>

<namespace pos:line="7" pos:column="1">namespace <name><name pos:line="7" pos:column="11">Sando</name><op:operator pos:line="7" pos:column="16">.</op:operator><name pos:line="7" pos:column="17">Core</name><op:operator pos:line="7" pos:column="21">.</op:operator><name pos:line="7" pos:column="22">Tools</name></name>
<block pos:line="8" pos:column="1">{
    <class type="interface"><specifier pos:line="9" pos:column="5">public</specifier> interface <name pos:line="9" pos:column="22">ILogFileAnalyzer</name>
    <block pos:line="10" pos:column="5">{
        <function_decl><type><name pos:line="11" pos:column="9">void</name></type> <name pos:line="11" pos:column="14">StartAnalyze</name><parameter_list pos:line="11" pos:column="26">(<param><decl><type><name pos:line="11" pos:column="27">ILogFile</name></type> <name pos:line="11" pos:column="36">file</name></decl></param>)</parameter_list>;</function_decl>
        <function_decl><type><name pos:line="12" pos:column="9">void</name></type> <name pos:line="12" pos:column="14">FinishAnalysis</name><parameter_list pos:line="12" pos:column="28">()</parameter_list>;</function_decl>
    }</block></class>

    <class type="interface"><specifier pos:line="15" pos:column="5">public</specifier> interface <name pos:line="15" pos:column="22">ILogFile</name>
    <block pos:line="16" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="17" pos:column="9">String</name></type> <name pos:line="17" pos:column="16">Name</name> <block pos:line="17" pos:column="21">{ <function_decl><name pos:line="17" pos:column="23">get</name>;</function_decl> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><name pos:line="18" pos:column="9">String</name></type> <name pos:line="18" pos:column="16">Content</name> <block pos:line="18" pos:column="24">{ <function_decl><name pos:line="18" pos:column="26">get</name>;</function_decl> }</block></decl></decl_stmt>
    }</block></class>

    <class><specifier pos:line="21" pos:column="5">public</specifier> class <name pos:line="21" pos:column="18">SandoAnalysisManager</name>
    <block pos:line="22" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="23" pos:column="9">private</specifier> <specifier pos:line="23" pos:column="17">readonly</specifier> <name pos:line="23" pos:column="26">SandoLogAnalyzer</name></type> <name pos:line="23" pos:column="43">analyzer</name></decl>;</decl_stmt>

        <constructor><specifier pos:line="25" pos:column="9">public</specifier> <name pos:line="25" pos:column="16">SandoAnalysisManager</name><parameter_list pos:line="25" pos:column="36">(<param><decl><type><name pos:line="25" pos:column="37">string</name></type> <name pos:line="25" pos:column="44">directory</name></decl></param>)</parameter_list>
        <block pos:line="26" pos:column="9">{
            <expr_stmt><expr><name><name pos:line="27" pos:column="13">this</name><op:operator pos:line="27" pos:column="17">.</op:operator><name pos:line="27" pos:column="18">analyzer</name></name> <op:operator pos:line="27" pos:column="27">=</op:operator> <op:operator pos:line="27" pos:column="29">new</op:operator> <call><name pos:line="27" pos:column="33">SandoLogAnalyzer</name><argument_list pos:line="27" pos:column="49">(<argument><expr><name pos:line="27" pos:column="50">directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier pos:line="30" pos:column="9">public</specifier> <name pos:line="30" pos:column="16">void</name></type> <name pos:line="30" pos:column="21">Analyze</name><parameter_list pos:line="30" pos:column="28">()</parameter_list>
        <block pos:line="31" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="32" pos:column="13">this</name><op:operator pos:line="32" pos:column="17">.</op:operator><name pos:line="32" pos:column="18">analyzer</name><op:operator pos:line="32" pos:column="26">.</op:operator><name pos:line="32" pos:column="27">AddAnalyzer</name></name><argument_list pos:line="32" pos:column="38">(<argument><expr><op:operator pos:line="32" pos:column="39">new</op:operator> <call><name pos:line="32" pos:column="43">NoSearchResultsAnalyzer</name><argument_list pos:line="32" pos:column="66">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="33" pos:column="13">this</name><op:operator pos:line="33" pos:column="17">.</op:operator><name pos:line="33" pos:column="18">analyzer</name><op:operator pos:line="33" pos:column="26">.</op:operator><name pos:line="33" pos:column="27">AddAnalyzer</name></name><argument_list pos:line="33" pos:column="38">(<argument><expr><op:operator pos:line="33" pos:column="39">new</op:operator> <call><name pos:line="33" pos:column="43">NumberOfUsersAnalyzer</name><argument_list pos:line="33" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="34" pos:column="13">this</name><op:operator pos:line="34" pos:column="17">.</op:operator><name pos:line="34" pos:column="18">analyzer</name><op:operator pos:line="34" pos:column="26">.</op:operator><name pos:line="34" pos:column="27">StartAnalysis</name></name><argument_list pos:line="34" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        
        <class><specifier pos:line="37" pos:column="9">private</specifier> class <name pos:line="37" pos:column="23">NoSearchResultsAnalyzer</name> <super pos:line="37" pos:column="47">: <name pos:line="37" pos:column="49">ILogFileAnalyzer</name></super>
        <block pos:line="38" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="39" pos:column="13">private</specifier> <name pos:line="39" pos:column="21">int</name></type> <name pos:line="39" pos:column="25">allQueryCount</name> <init pos:line="39" pos:column="39">= <expr><lit:literal type="number" pos:line="39" pos:column="41">0</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="40" pos:column="13">private</specifier> <name pos:line="40" pos:column="21">int</name></type> <name pos:line="40" pos:column="25">emptyQueryCount</name> <init pos:line="40" pos:column="41">= <expr><lit:literal type="number" pos:line="40" pos:column="43">0</lit:literal></expr></init></decl>;</decl_stmt>

            <function><type><specifier pos:line="42" pos:column="13">public</specifier> <name pos:line="42" pos:column="20">void</name></type> <name pos:line="42" pos:column="25">StartAnalyze</name><parameter_list pos:line="42" pos:column="37">(<param><decl><type><name pos:line="42" pos:column="38">ILogFile</name></type> <name pos:line="42" pos:column="47">file</name></decl></param>)</parameter_list>
            <block pos:line="43" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="44" pos:column="17">var</name></type> <name pos:line="44" pos:column="21">lines</name> <init pos:line="44" pos:column="27">= <expr><call><name><name pos:line="44" pos:column="29">file</name><op:operator pos:line="44" pos:column="33">.</op:operator><name pos:line="44" pos:column="34">Content</name><op:operator pos:line="44" pos:column="41">.</op:operator><name pos:line="44" pos:column="42">Split</name></name><argument_list pos:line="44" pos:column="47">(<argument><expr><lit:literal type="char" pos:line="44" pos:column="48">'\n'</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name pos:line="45" pos:column="17">lines</name> <op:operator pos:line="45" pos:column="23">=</op:operator> <call><name><name pos:line="45" pos:column="25">lines</name><op:operator pos:line="45" pos:column="30">.</op:operator><name pos:line="45" pos:column="31">Where</name></name><argument_list pos:line="45" pos:column="36">(<argument><expr><lambda><name pos:line="45" pos:column="37">l</name> <op:operator pos:line="45" pos:column="39">=&gt;</op:operator> <call><name><name pos:line="45" pos:column="42">l</name><op:operator pos:line="45" pos:column="43">.</op:operator><name pos:line="45" pos:column="44">Contains</name></name><argument_list pos:line="45" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="45" pos:column="53">"Sando returned results"</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="45" pos:column="79">.</op:operator><call><name pos:line="45" pos:column="80">ToArray</name><argument_list pos:line="45" pos:column="87">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="46" pos:column="17">allQueryCount</name> <op:operator pos:line="46" pos:column="31">+=</op:operator> <call><name><name pos:line="46" pos:column="34">lines</name><op:operator pos:line="46" pos:column="39">.</op:operator><name pos:line="46" pos:column="40">Count</name></name><argument_list pos:line="46" pos:column="45">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="47" pos:column="17">emptyQueryCount</name> <op:operator pos:line="47" pos:column="33">+=</op:operator> <call><name><name pos:line="47" pos:column="36">lines</name><op:operator pos:line="47" pos:column="41">.</op:operator><name pos:line="47" pos:column="42">Count</name></name><argument_list pos:line="47" pos:column="47">(<argument><expr><lambda><name pos:line="47" pos:column="48">l</name> <op:operator pos:line="47" pos:column="50">=&gt;</op:operator> <call><name><name pos:line="47" pos:column="53">l</name><op:operator pos:line="47" pos:column="54">.</op:operator><name pos:line="47" pos:column="55">Contains</name></name><argument_list pos:line="47" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="47" pos:column="64">"NumberOfResults=0"</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <function><type><specifier pos:line="50" pos:column="13">public</specifier> <name pos:line="50" pos:column="20">void</name></type> <name pos:line="50" pos:column="25">FinishAnalysis</name><parameter_list pos:line="50" pos:column="39">()</parameter_list>
            <block pos:line="51" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="52" pos:column="17">var</name></type> <name pos:line="52" pos:column="21">sb</name> <init pos:line="52" pos:column="24">= <expr><op:operator pos:line="52" pos:column="26">new</op:operator> <call><name pos:line="52" pos:column="30">StringBuilder</name><argument_list pos:line="52" pos:column="43">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="53" pos:column="17">sb</name><op:operator pos:line="53" pos:column="19">.</op:operator><name pos:line="53" pos:column="20">AppendLine</name></name><argument_list pos:line="53" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="53" pos:column="31">"All query count: "</lit:literal> <op:operator pos:line="53" pos:column="51">+</op:operator> <name pos:line="53" pos:column="53">allQueryCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="54" pos:column="17">sb</name><op:operator pos:line="54" pos:column="19">.</op:operator><name pos:line="54" pos:column="20">AppendLine</name></name><argument_list pos:line="54" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="54" pos:column="31">"No result query count: "</lit:literal> <op:operator pos:line="54" pos:column="57">+</op:operator> <name pos:line="54" pos:column="59">emptyQueryCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="55" pos:column="17">string</name></type> <name pos:line="55" pos:column="24">result</name> <init pos:line="55" pos:column="31">= <expr><call><name><name pos:line="55" pos:column="33">sb</name><op:operator pos:line="55" pos:column="35">.</op:operator><name pos:line="55" pos:column="36">ToString</name></name><argument_list pos:line="55" pos:column="44">()</argument_list></call></expr></init></decl>;</decl_stmt>
            }</block></function>
        }</block></class>

        <class><specifier pos:line="59" pos:column="9">private</specifier> class <name pos:line="59" pos:column="23">NumberOfUsersAnalyzer</name> <super pos:line="59" pos:column="45">: <name pos:line="59" pos:column="47">ILogFileAnalyzer</name></super>
        <block pos:line="60" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="61" pos:column="13">private</specifier> <specifier pos:line="61" pos:column="21">readonly</specifier> <name><name pos:line="61" pos:column="30">Dictionary</name><argument_list pos:line="61" pos:column="40">&lt;<argument><name pos:line="61" pos:column="41">string</name></argument>, <argument><name pos:line="61" pos:column="49">int</name></argument>&gt;</argument_list></name></type> <name pos:line="61" pos:column="54">IDs</name> <init pos:line="61" pos:column="58">= <expr><op:operator pos:line="61" pos:column="60">new</op:operator> <call><name><name pos:line="61" pos:column="64">Dictionary</name><argument_list pos:line="61" pos:column="74">&lt;<argument><name pos:line="61" pos:column="75">string</name></argument>, <argument><name pos:line="61" pos:column="83">int</name></argument>&gt;</argument_list></name><argument_list pos:line="61" pos:column="87">()</argument_list></call></expr></init></decl>;</decl_stmt>  

            <function><type><specifier pos:line="63" pos:column="13">public</specifier> <name pos:line="63" pos:column="20">void</name></type> <name pos:line="63" pos:column="25">StartAnalyze</name><parameter_list pos:line="63" pos:column="37">(<param><decl><type><name pos:line="63" pos:column="38">ILogFile</name></type> <name pos:line="63" pos:column="47">file</name></decl></param>)</parameter_list>
            <block pos:line="64" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="65" pos:column="17">var</name></type> <name pos:line="65" pos:column="21">id</name> <init pos:line="65" pos:column="24">= <expr><call><name><name pos:line="65" pos:column="26">file</name><op:operator pos:line="65" pos:column="30">.</op:operator><name pos:line="65" pos:column="31">Name</name><op:operator pos:line="65" pos:column="35">.</op:operator><name pos:line="65" pos:column="36">Split</name></name><argument_list pos:line="65" pos:column="41">(<argument><expr><lit:literal type="char" pos:line="65" pos:column="42">'_'</lit:literal></expr></argument>)</argument_list></call><index pos:line="65" pos:column="46">[<expr><lit:literal type="number" pos:line="65" pos:column="47">2</lit:literal></expr>]</index></expr></init></decl>;</decl_stmt>
                <if pos:line="66" pos:column="17">if <condition pos:line="66" pos:column="20">(<expr><call><name><name pos:line="66" pos:column="21">IDs</name><op:operator pos:line="66" pos:column="24">.</op:operator><name pos:line="66" pos:column="25">ContainsKey</name></name><argument_list pos:line="66" pos:column="36">(<argument><expr><name pos:line="66" pos:column="37">id</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="66" pos:column="41">
                <block pos:line="67" pos:column="17">{
                    <expr_stmt><expr><name><name pos:line="68" pos:column="21">IDs</name><index pos:line="68" pos:column="24">[<expr><name pos:line="68" pos:column="25">id</name></expr>]</index></name><op:operator pos:line="68" pos:column="28">++</op:operator></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="70" pos:column="17">else
                <block pos:line="71" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="72" pos:column="21">IDs</name><op:operator pos:line="72" pos:column="24">.</op:operator><name pos:line="72" pos:column="25">Add</name></name><argument_list pos:line="72" pos:column="28">(<argument><expr><name pos:line="72" pos:column="29">id</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="72" pos:column="33">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></function>

            <function><type><specifier pos:line="76" pos:column="13">public</specifier> <name pos:line="76" pos:column="20">void</name></type> <name pos:line="76" pos:column="25">FinishAnalysis</name><parameter_list pos:line="76" pos:column="39">()</parameter_list>
            <block pos:line="77" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="78" pos:column="17">int</name></type> <name pos:line="78" pos:column="21">count</name> <init pos:line="78" pos:column="27">= <expr><name><name pos:line="78" pos:column="29">IDs</name><op:operator pos:line="78" pos:column="32">.</op:operator><name pos:line="78" pos:column="33">Keys</name><op:operator pos:line="78" pos:column="37">.</op:operator><name pos:line="78" pos:column="38">Count</name></name></expr></init></decl>;</decl_stmt>
            }</block></function>
        }</block></class>



        <class><specifier pos:line="84" pos:column="9">public</specifier> class <name pos:line="84" pos:column="22">SandoLogAnalyzer</name>
        <block pos:line="85" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="86" pos:column="13">private</specifier> <specifier pos:line="86" pos:column="21">readonly</specifier> <name pos:line="86" pos:column="30">string</name></type> <name pos:line="86" pos:column="37">directory</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="87" pos:column="13">private</specifier> <specifier pos:line="87" pos:column="21">readonly</specifier> <name><name pos:line="87" pos:column="30">List</name><argument_list pos:line="87" pos:column="34">&lt;<argument><name pos:line="87" pos:column="35">ILogFileAnalyzer</name></argument>&gt;</argument_list></name></type> <name pos:line="87" pos:column="53">analyzers</name></decl>;</decl_stmt>

            <constructor><specifier pos:line="89" pos:column="13">public</specifier> <name pos:line="89" pos:column="20">SandoLogAnalyzer</name><parameter_list pos:line="89" pos:column="36">(<param><decl><type><name pos:line="89" pos:column="37">string</name></type> <name pos:line="89" pos:column="44">directory</name></decl></param>)</parameter_list>
            <block pos:line="90" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="91" pos:column="17">this</name><op:operator pos:line="91" pos:column="21">.</op:operator><name pos:line="91" pos:column="22">directory</name></name> <op:operator pos:line="91" pos:column="32">=</op:operator> <name pos:line="91" pos:column="34">directory</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="92" pos:column="17">this</name><op:operator pos:line="92" pos:column="21">.</op:operator><name pos:line="92" pos:column="22">analyzers</name></name> <op:operator pos:line="92" pos:column="32">=</op:operator> <op:operator pos:line="92" pos:column="34">new</op:operator> <call><name><name pos:line="92" pos:column="38">List</name><argument_list pos:line="92" pos:column="42">&lt;<argument><name pos:line="92" pos:column="43">ILogFileAnalyzer</name></argument>&gt;</argument_list></name><argument_list pos:line="92" pos:column="60">()</argument_list></call></expr>;</expr_stmt>
            }</block></constructor>

            <class><specifier pos:line="95" pos:column="13">private</specifier> class <name pos:line="95" pos:column="27">LogFile</name> <super pos:line="95" pos:column="35">: <name pos:line="95" pos:column="37">ILogFile</name></super>
            <block pos:line="96" pos:column="13">{
                <decl_stmt><decl><type><specifier pos:line="97" pos:column="17">public</specifier> <name pos:line="97" pos:column="24">String</name></type> <name pos:line="97" pos:column="31">Name</name> <block pos:line="97" pos:column="36">{ <function_decl><specifier pos:line="97" pos:column="38">private</specifier> <name pos:line="97" pos:column="46">set</name>;</function_decl> <function_decl><name pos:line="97" pos:column="51">get</name>;</function_decl> }</block></decl></decl_stmt>
                <decl_stmt><decl><type><specifier pos:line="98" pos:column="17">public</specifier> <name pos:line="98" pos:column="24">String</name></type> <name pos:line="98" pos:column="31">Content</name> <block pos:line="98" pos:column="39">{ <function_decl><specifier pos:line="98" pos:column="41">private</specifier> <name pos:line="98" pos:column="49">set</name>;</function_decl> <function_decl><name pos:line="98" pos:column="54">get</name>;</function_decl> }</block></decl></decl_stmt>

                <constructor><specifier pos:line="100" pos:column="17">public</specifier> <name pos:line="100" pos:column="24">LogFile</name><parameter_list pos:line="100" pos:column="31">(<param><decl><type><name pos:line="100" pos:column="32">String</name></type> <name pos:line="100" pos:column="39">Name</name></decl></param>, <param><decl><type><name pos:line="100" pos:column="45">String</name></type> <name pos:line="100" pos:column="52">Content</name></decl></param>)</parameter_list>
                <block pos:line="101" pos:column="17">{
                    <expr_stmt><expr><name><name pos:line="102" pos:column="21">this</name><op:operator pos:line="102" pos:column="25">.</op:operator><name pos:line="102" pos:column="26">Name</name></name> <op:operator pos:line="102" pos:column="31">=</op:operator> <name pos:line="102" pos:column="33">Name</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="103" pos:column="21">this</name><op:operator pos:line="103" pos:column="25">.</op:operator><name pos:line="103" pos:column="26">Content</name></name> <op:operator pos:line="103" pos:column="34">=</op:operator> <name pos:line="103" pos:column="36">Content</name></expr>;</expr_stmt>
                }</block></constructor>
            }</block></class>

            <function><type><specifier pos:line="107" pos:column="13">private</specifier> <name pos:line="107" pos:column="21">LogFile</name><index pos:line="107" pos:column="28">[]</index></type> <name pos:line="107" pos:column="31">GetLogFiles</name><parameter_list pos:line="107" pos:column="42">()</parameter_list>
            <block pos:line="108" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="109" pos:column="17">var</name></type> <name pos:line="109" pos:column="21">files</name> <init pos:line="109" pos:column="27">= <expr><op:operator pos:line="109" pos:column="29">new</op:operator> <call><name><name pos:line="109" pos:column="33">List</name><argument_list pos:line="109" pos:column="37">&lt;<argument><name pos:line="109" pos:column="38">LogFile</name></argument>&gt;</argument_list></name><argument_list pos:line="109" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="110" pos:column="17">var</name></type> <name pos:line="110" pos:column="21">dir</name> <init pos:line="110" pos:column="25">= <expr><op:operator pos:line="110" pos:column="27">new</op:operator> <call><name pos:line="110" pos:column="31">DirectoryInfo</name><argument_list pos:line="110" pos:column="44">(<argument><expr><name pos:line="110" pos:column="45">directory</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <foreach pos:line="112" pos:column="17">foreach (<init><decl><type><name pos:line="112" pos:column="26">FileInfo</name></type> <name pos:line="112" pos:column="35">file</name> <range pos:line="112" pos:column="40">in <expr><call><name><name pos:line="112" pos:column="43">dir</name><op:operator pos:line="112" pos:column="46">.</op:operator><name pos:line="112" pos:column="47">GetFiles</name></name><argument_list pos:line="112" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="112" pos:column="56">"*.log"</lit:literal></expr></argument>)</argument_list></call></expr></range></decl></init>)
                <block pos:line="113" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="114" pos:column="21">var</name></type> <name pos:line="114" pos:column="25">path</name> <init pos:line="114" pos:column="30">= <expr><name><name pos:line="114" pos:column="32">file</name><op:operator pos:line="114" pos:column="36">.</op:operator><name pos:line="114" pos:column="37">Name</name></name></expr></init></decl>;</decl_stmt>
                    <if pos:line="115" pos:column="21">if <condition pos:line="115" pos:column="24">(<expr><call><name pos:line="115" pos:column="25">IsFileNameGood</name><argument_list pos:line="115" pos:column="39">(<argument><expr><name pos:line="115" pos:column="40">path</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="115" pos:column="46">
                    <block pos:line="116" pos:column="21">{
                        <using pos:line="117" pos:column="25">using (<decl><type><name pos:line="117" pos:column="32">var</name></type> <name pos:line="117" pos:column="36">reader</name> <init pos:line="117" pos:column="43">= <expr><call><name><name pos:line="117" pos:column="45">file</name><op:operator pos:line="117" pos:column="49">.</op:operator><name pos:line="117" pos:column="50">OpenText</name></name><argument_list pos:line="117" pos:column="58">()</argument_list></call></expr></init></decl>)
                        <block pos:line="118" pos:column="25">{
                            <decl_stmt><decl><type><name pos:line="119" pos:column="29">var</name></type> <name pos:line="119" pos:column="33">content</name> <init pos:line="119" pos:column="41">= <expr><call><name><name pos:line="119" pos:column="43">reader</name><op:operator pos:line="119" pos:column="49">.</op:operator><name pos:line="119" pos:column="50">ReadToEnd</name></name><argument_list pos:line="119" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><call><name><name pos:line="120" pos:column="29">files</name><op:operator pos:line="120" pos:column="34">.</op:operator><name pos:line="120" pos:column="35">Add</name></name><argument_list pos:line="120" pos:column="38">(<argument><expr><op:operator pos:line="120" pos:column="39">new</op:operator> <call><name pos:line="120" pos:column="43">LogFile</name><argument_list pos:line="120" pos:column="50">(<argument><expr><name pos:line="120" pos:column="51">path</name></expr></argument>, <argument><expr><name pos:line="120" pos:column="57">content</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></using>
                    }</block></then></if>
                }</block></foreach>
                <return pos:line="124" pos:column="17">return <expr><call><name><name pos:line="124" pos:column="24">files</name><op:operator pos:line="124" pos:column="29">.</op:operator><name pos:line="124" pos:column="30">ToArray</name></name><argument_list pos:line="124" pos:column="37">()</argument_list></call></expr>;</return>
            }</block></function>

            <function><type><specifier pos:line="127" pos:column="13">private</specifier> <name pos:line="127" pos:column="21">bool</name></type> <name pos:line="127" pos:column="26">IsFileNameGood</name><parameter_list pos:line="127" pos:column="40">(<param><decl><type><name pos:line="127" pos:column="41">String</name></type> <name pos:line="127" pos:column="48">fileName</name></decl></param>)</parameter_list>
            <block pos:line="128" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="129" pos:column="17">var</name></type> <name pos:line="129" pos:column="21">shepherd</name> <init pos:line="129" pos:column="30">= <expr><lit:literal type="string" pos:line="129" pos:column="32">"2021486822"</lit:literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="130" pos:column="17">var</name></type> <name pos:line="130" pos:column="21">xi</name> <init pos:line="130" pos:column="24">= <expr><lit:literal type="string" pos:line="130" pos:column="26">"1914121570"</lit:literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="131" pos:column="17">var</name></type> <name pos:line="131" pos:column="21">busy</name> <init pos:line="131" pos:column="26">= <expr><lit:literal type="string" pos:line="131" pos:column="28">"1602809067"</lit:literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="132" pos:column="17">var</name></type> <name pos:line="132" pos:column="21">pat</name> <init pos:line="132" pos:column="25">= <expr><lit:literal type="string" pos:line="132" pos:column="27">"174697094"</lit:literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="133" pos:column="17">var</name></type> <name pos:line="133" pos:column="21">vinay</name> <init pos:line="133" pos:column="27">= <expr><lit:literal type="string" pos:line="133" pos:column="29">"222472157"</lit:literal></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name pos:line="135" pos:column="17">var</name></type> <name pos:line="135" pos:column="21">list</name> <init pos:line="135" pos:column="26">= <expr><op:operator pos:line="135" pos:column="28">new</op:operator> <name><name pos:line="135" pos:column="32">List</name><argument_list pos:line="135" pos:column="36">&lt;<argument><name pos:line="135" pos:column="37">String</name></argument>&gt;</argument_list></name> <block pos:line="135" pos:column="45">{<expr><name pos:line="135" pos:column="46">shepherd</name></expr>, <expr><name pos:line="135" pos:column="56">xi</name></expr>, <expr><name pos:line="135" pos:column="60">busy</name></expr>, <expr><name pos:line="135" pos:column="66">pat</name></expr>, <expr><name pos:line="135" pos:column="71">vinay</name></expr>}</block></expr></init></decl>;</decl_stmt>
                <return pos:line="136" pos:column="17">return <expr><call><name><name pos:line="136" pos:column="24">list</name><op:operator pos:line="136" pos:column="28">.</op:operator><name pos:line="136" pos:column="29">All</name></name><argument_list pos:line="136" pos:column="32">(<argument><expr><lambda><name pos:line="136" pos:column="33">l</name> <op:operator pos:line="136" pos:column="35">=&gt;</op:operator> <op:operator pos:line="136" pos:column="38">!</op:operator><call><name><name pos:line="136" pos:column="39">fileName</name><op:operator pos:line="136" pos:column="47">.</op:operator><name pos:line="136" pos:column="48">Contains</name></name><argument_list pos:line="136" pos:column="56">(<argument><expr><name pos:line="136" pos:column="57">l</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>


            <function><type><specifier pos:line="140" pos:column="13">public</specifier> <name pos:line="140" pos:column="20">void</name></type> <name pos:line="140" pos:column="25">AddAnalyzer</name><parameter_list pos:line="140" pos:column="36">(<param><decl><type><name pos:line="140" pos:column="37">ILogFileAnalyzer</name></type> <name pos:line="140" pos:column="54">analyzer</name></decl></param>)</parameter_list>
            <block pos:line="141" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="142" pos:column="17">this</name><op:operator pos:line="142" pos:column="21">.</op:operator><name pos:line="142" pos:column="22">analyzers</name><op:operator pos:line="142" pos:column="31">.</op:operator><name pos:line="142" pos:column="32">Add</name></name><argument_list pos:line="142" pos:column="35">(<argument><expr><name pos:line="142" pos:column="36">analyzer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <function><type><specifier pos:line="145" pos:column="13">public</specifier> <name pos:line="145" pos:column="20">void</name></type> <name pos:line="145" pos:column="25">StartAnalysis</name><parameter_list pos:line="145" pos:column="38">()</parameter_list>
            <block pos:line="146" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="147" pos:column="17">var</name></type> <name pos:line="147" pos:column="21">logFiles</name> <init pos:line="147" pos:column="30">= <expr><call><name pos:line="147" pos:column="32">GetLogFiles</name><argument_list pos:line="147" pos:column="43">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <foreach pos:line="148" pos:column="17">foreach (<init><decl><type><name pos:line="148" pos:column="26">var</name></type> <name pos:line="148" pos:column="30">analyzer</name> <range pos:line="148" pos:column="39">in <expr><name pos:line="148" pos:column="42">analyzers</name></expr></range></decl></init>)
                <block pos:line="149" pos:column="17">{
                    <foreach pos:line="150" pos:column="21">foreach (<init><decl><type><name pos:line="150" pos:column="30">var</name></type> <name pos:line="150" pos:column="34">log</name> <range pos:line="150" pos:column="38">in <expr><name pos:line="150" pos:column="41">logFiles</name></expr></range></decl></init>)
                    <block pos:line="151" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="152" pos:column="25">analyzer</name><op:operator pos:line="152" pos:column="33">.</op:operator><name pos:line="152" pos:column="34">StartAnalyze</name></name><argument_list pos:line="152" pos:column="46">(<argument><expr><name pos:line="152" pos:column="47">log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></foreach>
                    <expr_stmt><expr><call><name><name pos:line="154" pos:column="21">analyzer</name><op:operator pos:line="154" pos:column="29">.</op:operator><name pos:line="154" pos:column="30">FinishAnalysis</name></name><argument_list pos:line="154" pos:column="44">()</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>
            }</block></function>
        }</block></class>
    }</block></class>
}</block></namespace></unit>
