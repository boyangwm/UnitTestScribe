<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Core\Core\Tools\WorkQueueBasedProcess.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Text</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">BlackHen</name><op:operator pos:line="5" pos:column="15">.</op:operator><name pos:line="5" pos:column="16">Threading</name></name>;</using>

<namespace pos:line="7" pos:column="1">namespace <name><name pos:line="7" pos:column="11">Sando</name><op:operator pos:line="7" pos:column="16">.</op:operator><name pos:line="7" pos:column="17">Core</name><op:operator pos:line="7" pos:column="21">.</op:operator><name pos:line="7" pos:column="22">Tools</name></name>
<block pos:line="8" pos:column="1">{
    <function_decl><type><specifier pos:line="9" pos:column="5">public</specifier> <specifier pos:line="9" pos:column="12">delegate</specifier> <name pos:line="9" pos:column="21">void</name></type> <name pos:line="9" pos:column="26">WorkItemFinished</name><parameter_list pos:line="9" pos:column="42">(<param><decl><type><name pos:line="9" pos:column="43">object</name></type> <name pos:line="9" pos:column="50">sender</name></decl></param>, <param><decl><type><name pos:line="9" pos:column="58">object</name></type> <name pos:line="9" pos:column="65">output</name></decl></param>)</parameter_list>;</function_decl>

    <class><specifier pos:line="11" pos:column="5">public</specifier> class <name pos:line="11" pos:column="18">WorkQueueBasedProcess</name>
    <block pos:line="12" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="13" pos:column="9">private</specifier> <specifier pos:line="13" pos:column="17">readonly</specifier> <name pos:line="13" pos:column="26">WorkQueue</name></type> <name pos:line="13" pos:column="36">queue</name></decl>;</decl_stmt>

        <constructor><specifier pos:line="15" pos:column="9">public</specifier> <name pos:line="15" pos:column="16">WorkQueueBasedProcess</name><parameter_list pos:line="15" pos:column="37">()</parameter_list>
        <block pos:line="16" pos:column="9">{
            <expr_stmt><expr><name pos:line="17" pos:column="13">queue</name> <op:operator pos:line="17" pos:column="19">=</op:operator> <op:operator pos:line="17" pos:column="21">new</op:operator> <name pos:line="17" pos:column="25">WorkQueue</name> <block pos:line="17" pos:column="35">{<expr><name pos:line="17" pos:column="36">ConcurrentLimit</name> <op:operator pos:line="17" pos:column="52">=</op:operator> <lit:literal type="number" pos:line="17" pos:column="54">1</lit:literal></expr>}</block></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier pos:line="20" pos:column="9">public</specifier> <name pos:line="20" pos:column="16">void</name></type> <name><name pos:line="20" pos:column="21">Enqueue</name><argument_list pos:line="20" pos:column="28">&lt;<argument><name pos:line="20" pos:column="29">T1</name></argument>, <argument><name pos:line="20" pos:column="33">T2</name></argument>&gt;</argument_list></name><parameter_list pos:line="20" pos:column="36">(<param><decl><type><name><name pos:line="20" pos:column="37">Func</name><argument_list pos:line="20" pos:column="41">&lt;<argument><name pos:line="20" pos:column="42">T1</name></argument>, <argument><name pos:line="20" pos:column="46">T2</name></argument>&gt;</argument_list></name></type> <name pos:line="20" pos:column="50">function</name></decl></param>, <param><decl><type><name pos:line="20" pos:column="60">T1</name></type> <name pos:line="20" pos:column="63">input</name></decl></param>, 
            <param><decl><type><name pos:line="21" pos:column="13">WorkItemFinished</name></type> <name pos:line="21" pos:column="30">method</name> <init pos:line="21" pos:column="37">= <expr><name pos:line="21" pos:column="39">null</name></expr></init></decl></param>)</parameter_list>
        <block pos:line="22" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="23" pos:column="13">var</name></type> <name pos:line="23" pos:column="17">item</name> <init pos:line="23" pos:column="22">= <expr><op:operator pos:line="23" pos:column="24">new</op:operator> <call><name><name pos:line="23" pos:column="28">FuncWorkItem</name><argument_list pos:line="23" pos:column="40">&lt;<argument><name pos:line="23" pos:column="41">T1</name></argument>, <argument><name pos:line="23" pos:column="45">T2</name></argument>&gt;</argument_list></name><argument_list pos:line="23" pos:column="48">(<argument><expr><name pos:line="23" pos:column="49">function</name></expr></argument>, <argument><expr><name pos:line="23" pos:column="59">input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="24" pos:column="13">if<condition pos:line="24" pos:column="15">(<expr><name pos:line="24" pos:column="16">method</name> <op:operator pos:line="24" pos:column="23">!=</op:operator> <name pos:line="24" pos:column="26">null</name></expr>)</condition><then pos:line="24" pos:column="31">
                <expr_stmt><expr><name><name pos:line="25" pos:column="17">item</name><op:operator pos:line="25" pos:column="21">.</op:operator><name pos:line="25" pos:column="22">FinishedEvent</name></name> <op:operator pos:line="25" pos:column="36">+=</op:operator> <name pos:line="25" pos:column="39">method</name></expr>;</expr_stmt></then></if>
            <expr_stmt><expr><call><name><name pos:line="26" pos:column="13">queue</name><op:operator pos:line="26" pos:column="18">.</op:operator><name pos:line="26" pos:column="19">Add</name></name><argument_list pos:line="26" pos:column="22">(<argument><expr><name pos:line="26" pos:column="23">item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="29" pos:column="9">public</specifier> <name pos:line="29" pos:column="16">void</name></type> <name pos:line="29" pos:column="21">Enqueue</name><parameter_list pos:line="29" pos:column="28">(<param><decl><type><name pos:line="29" pos:column="29">Action</name></type> <name pos:line="29" pos:column="36">action</name></decl></param>, <param><decl><type><name pos:line="29" pos:column="44">WorkItemFinished</name></type> <name pos:line="29" pos:column="61">method</name> <init pos:line="29" pos:column="68">= <expr><name pos:line="29" pos:column="70">null</name></expr></init></decl></param>)</parameter_list>
        <block pos:line="30" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="31" pos:column="13">var</name></type> <name pos:line="31" pos:column="17">item</name> <init pos:line="31" pos:column="22">= <expr><op:operator pos:line="31" pos:column="24">new</op:operator> <call><name><name pos:line="31" pos:column="28">FuncWorkItem</name><argument_list pos:line="31" pos:column="40">&lt;<argument><name pos:line="31" pos:column="41">int</name></argument>, <argument><name pos:line="31" pos:column="46">int</name></argument>&gt;</argument_list></name><argument_list pos:line="31" pos:column="50">(<argument><expr><lambda><name pos:line="31" pos:column="51">i</name> <op:operator pos:line="31" pos:column="53">=&gt;</op:operator> <block pos:line="31" pos:column="56">{ 
                <expr_stmt><expr><call><name><name pos:line="32" pos:column="17">action</name><op:operator pos:line="32" pos:column="23">.</op:operator><name pos:line="32" pos:column="24">Invoke</name></name><argument_list pos:line="32" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
                <return pos:line="33" pos:column="17">return <expr><lit:literal type="number" pos:line="33" pos:column="24">1</lit:literal></expr>;</return>
            }</block></lambda></expr></argument>, <argument><expr><lit:literal type="number" pos:line="34" pos:column="16">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="35" pos:column="13">if <condition pos:line="35" pos:column="16">(<expr><name pos:line="35" pos:column="17">method</name> <op:operator pos:line="35" pos:column="24">!=</op:operator> <name pos:line="35" pos:column="27">null</name></expr>)</condition><then pos:line="35" pos:column="32">
                <expr_stmt><expr><name><name pos:line="36" pos:column="17">item</name><op:operator pos:line="36" pos:column="21">.</op:operator><name pos:line="36" pos:column="22">FinishedEvent</name></name> <op:operator pos:line="36" pos:column="36">+=</op:operator> <name pos:line="36" pos:column="39">method</name></expr>;</expr_stmt></then></if>
            <expr_stmt><expr><call><name><name pos:line="37" pos:column="13">queue</name><op:operator pos:line="37" pos:column="18">.</op:operator><name pos:line="37" pos:column="19">Add</name></name><argument_list pos:line="37" pos:column="22">(<argument><expr><name pos:line="37" pos:column="23">item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <class><specifier pos:line="40" pos:column="9">private</specifier> class <name><name pos:line="40" pos:column="23">FuncWorkItem</name><argument_list pos:line="40" pos:column="35">&lt;<argument><name pos:line="40" pos:column="36">T1</name></argument>,<argument><name pos:line="40" pos:column="39">T2</name></argument>&gt;</argument_list></name> <super pos:line="40" pos:column="43">: <name pos:line="40" pos:column="45">WorkItem</name></super> 
        <block pos:line="41" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="42" pos:column="13">private</specifier> <specifier pos:line="42" pos:column="21">readonly</specifier> <name><name pos:line="42" pos:column="30">Func</name><argument_list pos:line="42" pos:column="34">&lt;<argument><name pos:line="42" pos:column="35">T1</name></argument>, <argument><name pos:line="42" pos:column="39">T2</name></argument>&gt;</argument_list></name></type> <name pos:line="42" pos:column="43">func</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="43" pos:column="13">private</specifier> <specifier pos:line="43" pos:column="21">readonly</specifier> <name pos:line="43" pos:column="30">T1</name></type> <name pos:line="43" pos:column="33">input</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="44" pos:column="13">public</specifier> <specifier pos:line="44" pos:column="20">event</specifier> <name pos:line="44" pos:column="26">WorkItemFinished</name></type> <name pos:line="44" pos:column="43">FinishedEvent</name></decl>;</decl_stmt>

            <constructor><specifier pos:line="46" pos:column="13">internal</specifier> <name pos:line="46" pos:column="22">FuncWorkItem</name><parameter_list pos:line="46" pos:column="34">(<param><decl><type><name><name pos:line="46" pos:column="35">Func</name><argument_list pos:line="46" pos:column="39">&lt;<argument><name pos:line="46" pos:column="40">T1</name></argument>, <argument><name pos:line="46" pos:column="44">T2</name></argument>&gt;</argument_list></name></type> <name pos:line="46" pos:column="48">func</name></decl></param>, <param><decl><type><name pos:line="46" pos:column="54">T1</name></type> <name pos:line="46" pos:column="57">input</name></decl></param>)</parameter_list>
            <block pos:line="47" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="48" pos:column="17">this</name><op:operator pos:line="48" pos:column="21">.</op:operator><name pos:line="48" pos:column="22">func</name></name> <op:operator pos:line="48" pos:column="27">=</op:operator> <name pos:line="48" pos:column="29">func</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="49" pos:column="17">this</name><op:operator pos:line="49" pos:column="21">.</op:operator><name pos:line="49" pos:column="22">input</name></name> <op:operator pos:line="49" pos:column="28">=</op:operator> <name pos:line="49" pos:column="30">input</name></expr>;</expr_stmt>
            }</block></constructor>

            <function><type><specifier pos:line="52" pos:column="13">public</specifier> <specifier pos:line="52" pos:column="20">override</specifier> <name pos:line="52" pos:column="29">void</name></type> <name pos:line="52" pos:column="34">Perform</name><parameter_list pos:line="52" pos:column="41">()</parameter_list>
            <block pos:line="53" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="54" pos:column="17">var</name></type> <name pos:line="54" pos:column="21">output</name> <init pos:line="54" pos:column="28">= <expr><call><name><name pos:line="54" pos:column="30">func</name><op:operator pos:line="54" pos:column="34">.</op:operator><name pos:line="54" pos:column="35">Invoke</name></name><argument_list pos:line="54" pos:column="41">(<argument><expr><name pos:line="54" pos:column="42">input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="55" pos:column="17">if<condition pos:line="55" pos:column="19">(<expr><name pos:line="55" pos:column="20">FinishedEvent</name> <op:operator pos:line="55" pos:column="34">!=</op:operator> <name pos:line="55" pos:column="37">null</name></expr>)</condition><then pos:line="55" pos:column="42">
                    <expr_stmt><expr><call><name pos:line="56" pos:column="21">FinishedEvent</name><argument_list pos:line="56" pos:column="34">(<argument><expr><name pos:line="56" pos:column="35">this</name></expr></argument>, <argument><expr><name pos:line="56" pos:column="41">output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></function>
        }</block></class>
    }</block></class>
}</block></namespace>
</unit>
