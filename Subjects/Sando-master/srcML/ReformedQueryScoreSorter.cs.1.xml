<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Core\Core\QueryRefomers\ReformedQueryScoreSorter.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Text</name></name>;</using>

<namespace pos:line="6" pos:column="1">namespace <name><name pos:line="6" pos:column="11">Sando</name><op:operator pos:line="6" pos:column="16">.</op:operator><name pos:line="6" pos:column="17">Core</name><op:operator pos:line="6" pos:column="21">.</op:operator><name pos:line="6" pos:column="22">QueryRefomers</name></name>
<block pos:line="7" pos:column="1">{
    <class><specifier pos:line="8" pos:column="5">internal</specifier> <specifier pos:line="8" pos:column="14">partial</specifier> class <name pos:line="8" pos:column="28">ReformedQuerySorters</name>
    <block pos:line="9" pos:column="5">{
        <class><specifier pos:line="10" pos:column="9">private</specifier> class <name pos:line="10" pos:column="23">ScoreBasedSorter</name> <super pos:line="10" pos:column="40">: <name pos:line="10" pos:column="42">IReformedQuerySorter</name></super>
        <block pos:line="11" pos:column="9">{
            <class><specifier pos:line="12" pos:column="13">private</specifier> class <name pos:line="12" pos:column="27">ScoredReformedQuery</name> <super pos:line="12" pos:column="47">: <name><name pos:line="12" pos:column="49">IComparable</name><argument_list pos:line="12" pos:column="60">&lt;<argument><name pos:line="12" pos:column="61">ScoredReformedQuery</name></argument>&gt;</argument_list></name></super>
            <block pos:line="13" pos:column="13">{
                <decl_stmt><decl><type><specifier pos:line="14" pos:column="17">internal</specifier> <name pos:line="14" pos:column="26">IReformedQuery</name></type> <name pos:line="14" pos:column="41">Query</name> <block pos:line="14" pos:column="47">{ <function_decl><specifier pos:line="14" pos:column="49">private</specifier> <name pos:line="14" pos:column="57">set</name>;</function_decl> <function_decl><name pos:line="14" pos:column="62">get</name>;</function_decl> }</block></decl></decl_stmt>
                <decl_stmt><decl><type><specifier pos:line="15" pos:column="17">internal</specifier> <name pos:line="15" pos:column="26">int</name></type> <name pos:line="15" pos:column="30">Score</name> <block pos:line="15" pos:column="36">{ <function_decl><specifier pos:line="15" pos:column="38">private</specifier> <name pos:line="15" pos:column="46">set</name>;</function_decl> <function_decl><name pos:line="15" pos:column="51">get</name>;</function_decl> }</block></decl></decl_stmt>

                <constructor><specifier pos:line="17" pos:column="17">internal</specifier> <name pos:line="17" pos:column="26">ScoredReformedQuery</name><parameter_list pos:line="17" pos:column="45">(<param><decl><type><name pos:line="17" pos:column="46">IReformedQuery</name></type> <name pos:line="17" pos:column="61">query</name></decl></param>)</parameter_list>
                <block pos:line="18" pos:column="17">{
                    <expr_stmt><expr><name><name pos:line="19" pos:column="21">this</name><op:operator pos:line="19" pos:column="25">.</op:operator><name pos:line="19" pos:column="26">Query</name></name> <op:operator pos:line="19" pos:column="32">=</op:operator> <name pos:line="19" pos:column="34">query</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="20" pos:column="21">this</name><op:operator pos:line="20" pos:column="25">.</op:operator><name pos:line="20" pos:column="26">Score</name></name> <op:operator pos:line="20" pos:column="32">=</op:operator> <lit:literal type="number" pos:line="20" pos:column="34">0</lit:literal></expr>;</expr_stmt>
                }</block></constructor>

                <function><type><specifier pos:line="23" pos:column="17">internal</specifier> <name pos:line="23" pos:column="26">void</name></type> <name pos:line="23" pos:column="31">AddPoints</name><parameter_list pos:line="23" pos:column="40">(<param><decl><type><name pos:line="23" pos:column="41">int</name></type> <name pos:line="23" pos:column="45">points</name></decl></param>)</parameter_list>
                <block pos:line="24" pos:column="17">{
                    <expr_stmt><expr><name><name pos:line="25" pos:column="21">this</name><op:operator pos:line="25" pos:column="25">.</op:operator><name pos:line="25" pos:column="26">Score</name></name> <op:operator pos:line="25" pos:column="32">+=</op:operator> <name pos:line="25" pos:column="35">points</name></expr>;</expr_stmt>
                }</block></function>
                
                <function><type><specifier pos:line="28" pos:column="17">public</specifier> <name pos:line="28" pos:column="24">int</name></type> <name pos:line="28" pos:column="28">CompareTo</name><parameter_list pos:line="28" pos:column="37">(<param><decl><type><name pos:line="28" pos:column="38">ScoredReformedQuery</name></type> <name pos:line="28" pos:column="58">other</name></decl></param>)</parameter_list>
                <block pos:line="29" pos:column="17">{
                    <return pos:line="30" pos:column="21">return <expr><call><name><name pos:line="30" pos:column="28">this</name><op:operator pos:line="30" pos:column="32">.</op:operator><name pos:line="30" pos:column="33">Score</name><op:operator pos:line="30" pos:column="38">.</op:operator><name pos:line="30" pos:column="39">CompareTo</name></name><argument_list pos:line="30" pos:column="48">(<argument><expr><name><name pos:line="30" pos:column="49">other</name><op:operator pos:line="30" pos:column="54">.</op:operator><name pos:line="30" pos:column="55">Score</name></name></expr></argument>)</argument_list></call></expr>;</return>
                }</block></function>
            }</block></class>

            <class><specifier pos:line="34" pos:column="13">private</specifier> class <name pos:line="34" pos:column="27">ScoreGenerator</name>
            <block pos:line="35" pos:column="13">{
                <decl_stmt><decl><type><specifier pos:line="36" pos:column="17">private</specifier> <name pos:line="36" pos:column="25">int</name></type> <name pos:line="36" pos:column="29">currentScore</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier pos:line="37" pos:column="17">private</specifier> <specifier pos:line="37" pos:column="25">readonly</specifier> <name pos:line="37" pos:column="34">int</name></type> <name pos:line="37" pos:column="38">interval</name></decl>;</decl_stmt>

                <constructor><specifier pos:line="39" pos:column="17">internal</specifier> <name pos:line="39" pos:column="26">ScoreGenerator</name><parameter_list pos:line="39" pos:column="40">(<param><decl><type><name pos:line="39" pos:column="41">int</name></type> <name pos:line="39" pos:column="45">interval</name></decl></param>)</parameter_list>
                <block pos:line="40" pos:column="17">{
                    <expr_stmt><expr><name><name pos:line="41" pos:column="21">this</name><op:operator pos:line="41" pos:column="25">.</op:operator><name pos:line="41" pos:column="26">currentScore</name></name> <op:operator pos:line="41" pos:column="39">=</op:operator> <lit:literal type="number" pos:line="41" pos:column="41">0</lit:literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="42" pos:column="21">this</name><op:operator pos:line="42" pos:column="25">.</op:operator><name pos:line="42" pos:column="26">interval</name></name> <op:operator pos:line="42" pos:column="35">=</op:operator> <name pos:line="42" pos:column="37">interval</name></expr>;</expr_stmt>
                }</block></constructor>

                <function><type><specifier pos:line="45" pos:column="17">internal</specifier> <name pos:line="45" pos:column="26">int</name></type> <name pos:line="45" pos:column="30">GetNextScore</name><parameter_list pos:line="45" pos:column="42">()</parameter_list>
                <block pos:line="46" pos:column="17">{
                    <expr_stmt><expr><name pos:line="47" pos:column="21">currentScore</name> <op:operator pos:line="47" pos:column="34">+=</op:operator> <name pos:line="47" pos:column="37">interval</name></expr>;</expr_stmt>
                    <return pos:line="48" pos:column="21">return <expr><name pos:line="48" pos:column="28">currentScore</name></expr>;</return>
                }</block></function>

            }</block></class>

            <decl_stmt><decl><type><specifier pos:line="53" pos:column="13">private</specifier> <specifier pos:line="53" pos:column="21">const</specifier> <name pos:line="53" pos:column="27">int</name></type> <name pos:line="53" pos:column="31">COOCCURRENCE_INTERVAL</name> <init pos:line="53" pos:column="53">= <expr><lit:literal type="number" pos:line="53" pos:column="55">1</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="54" pos:column="13">private</specifier> <specifier pos:line="54" pos:column="21">const</specifier> <name pos:line="54" pos:column="27">int</name></type> <name pos:line="54" pos:column="31">EDIT_DISTANCE_INTERVAL</name> <init pos:line="54" pos:column="54">= <expr><lit:literal type="number" pos:line="54" pos:column="56">1</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="55" pos:column="13">private</specifier> <specifier pos:line="55" pos:column="21">const</specifier> <name pos:line="55" pos:column="27">int</name></type> <name pos:line="55" pos:column="31">SE_SYNONYM_COUNT_INTERVAL</name> <init pos:line="55" pos:column="57">= <expr><lit:literal type="number" pos:line="55" pos:column="59">4</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="56" pos:column="13">private</specifier> <specifier pos:line="56" pos:column="21">const</specifier> <name pos:line="56" pos:column="27">int</name></type> <name pos:line="56" pos:column="31">GENERAL_SYNONYM_COUNT_INTERVAL</name> <init pos:line="56" pos:column="62">= <expr><lit:literal type="number" pos:line="56" pos:column="64">3</lit:literal></expr></init></decl>;</decl_stmt>

            <function><type><specifier pos:line="58" pos:column="13">public</specifier> <name><name pos:line="58" pos:column="20">IEnumerable</name><argument_list pos:line="58" pos:column="31">&lt;<argument><name pos:line="58" pos:column="32">IReformedQuery</name></argument>&gt;</argument_list></name></type> <name pos:line="58" pos:column="48">SortReformedQueries</name><parameter_list pos:line="58" pos:column="67">(<param><decl><type><name><name pos:line="58" pos:column="68">IEnumerable</name><argument_list pos:line="58" pos:column="79">&lt;<argument><name pos:line="58" pos:column="80">IReformedQuery</name></argument>&gt;</argument_list></name></type> <name pos:line="58" pos:column="96">queries</name></decl></param>)</parameter_list>
            <block pos:line="59" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="60" pos:column="17">var</name></type> <name pos:line="60" pos:column="21">scoredQuery</name> <init pos:line="60" pos:column="33">= <expr><call><name><name pos:line="60" pos:column="35">queries</name><op:operator pos:line="60" pos:column="42">.</op:operator><name pos:line="60" pos:column="43">Select</name></name><argument_list pos:line="60" pos:column="49">(<argument><expr><lambda><name pos:line="60" pos:column="50">q</name> <op:operator pos:line="60" pos:column="52">=&gt;</op:operator> <op:operator pos:line="60" pos:column="55">new</op:operator> <call><name pos:line="60" pos:column="59">ScoredReformedQuery</name><argument_list pos:line="60" pos:column="78">(<argument><expr><name pos:line="60" pos:column="79">q</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="60" pos:column="82">.</op:operator><call><name pos:line="60" pos:column="83">ToList</name><argument_list pos:line="60" pos:column="89">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name pos:line="61" pos:column="17">AddScoreToGroups</name><argument_list pos:line="61" pos:column="33">(<argument><expr><call><name><name pos:line="61" pos:column="34">scoredQuery</name><op:operator pos:line="61" pos:column="45">.</op:operator><name pos:line="61" pos:column="46">GroupBy</name></name><argument_list pos:line="61" pos:column="53">(<argument><expr><lambda><name pos:line="61" pos:column="54">q</name> <op:operator pos:line="61" pos:column="56">=&gt;</op:operator> <name><name pos:line="61" pos:column="59">q</name><op:operator pos:line="61" pos:column="60">.</op:operator><name pos:line="61" pos:column="61">Query</name><op:operator pos:line="61" pos:column="66">.</op:operator><name pos:line="61" pos:column="67">CoOccurrenceCount</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="61" pos:column="85">.</op:operator><call><name pos:line="61" pos:column="86">OrderBy</name><argument_list pos:line="61" pos:column="93">(<argument><expr><lambda><name pos:line="61" pos:column="94">q</name> <op:operator pos:line="61" pos:column="96">=&gt;</op:operator> <name><name pos:line="61" pos:column="99">q</name><op:operator pos:line="61" pos:column="100">.</op:operator><name pos:line="61" pos:column="101">Key</name></name></lambda></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><op:operator pos:line="62" pos:column="21">new</op:operator> <call><name pos:line="62" pos:column="25">ScoreGenerator</name><argument_list pos:line="62" pos:column="39">(<argument><expr><name pos:line="62" pos:column="40">COOCCURRENCE_INTERVAL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="63" pos:column="17">AddScoreToGroups</name><argument_list pos:line="63" pos:column="33">(<argument><expr><call><name><name pos:line="63" pos:column="34">scoredQuery</name><op:operator pos:line="63" pos:column="45">.</op:operator><name pos:line="63" pos:column="46">GroupBy</name></name><argument_list pos:line="63" pos:column="53">(<argument><expr><lambda><name pos:line="63" pos:column="54">q</name> <op:operator pos:line="63" pos:column="56">=&gt;</op:operator> <name><name pos:line="63" pos:column="59">q</name><op:operator pos:line="63" pos:column="60">.</op:operator><name pos:line="63" pos:column="61">Query</name><op:operator pos:line="63" pos:column="66">.</op:operator><name pos:line="63" pos:column="67">EditDistance</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="63" pos:column="80">.</op:operator><call><name pos:line="63" pos:column="81">OrderBy</name><argument_list pos:line="63" pos:column="88">(<argument><expr><lambda><name pos:line="63" pos:column="89">q</name> <op:operator pos:line="63" pos:column="91">=&gt;</op:operator> <op:operator pos:line="63" pos:column="94">-</op:operator><name><name pos:line="63" pos:column="95">q</name><op:operator pos:line="63" pos:column="96">.</op:operator><name pos:line="63" pos:column="97">Key</name></name></lambda></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><op:operator pos:line="64" pos:column="21">new</op:operator> <call><name pos:line="64" pos:column="25">ScoreGenerator</name><argument_list pos:line="64" pos:column="39">(<argument><expr><name pos:line="64" pos:column="40">EDIT_DISTANCE_INTERVAL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="65" pos:column="17">AddScoreToGroups</name><argument_list pos:line="65" pos:column="33">(<argument><expr><call><name pos:line="65" pos:column="34">GroupScoredQueriesByTermChangeTypeCount</name><argument_list pos:line="65" pos:column="73">(<argument><expr><name pos:line="65" pos:column="74">scoredQuery</name></expr></argument>,
                    <argument><expr><name><name pos:line="66" pos:column="21">TermChangeCategory</name><op:operator pos:line="66" pos:column="39">.</op:operator><name pos:line="66" pos:column="40">SE_SYNONYM</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="66" pos:column="53">new</op:operator> <call><name pos:line="66" pos:column="57">ScoreGenerator</name><argument_list pos:line="66" pos:column="71">(<argument><expr><name pos:line="66" pos:column="72">SE_SYNONYM_COUNT_INTERVAL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="67" pos:column="17">AddScoreToGroups</name><argument_list pos:line="67" pos:column="33">(<argument><expr><call><name pos:line="67" pos:column="34">GroupScoredQueriesByTermChangeTypeCount</name><argument_list pos:line="67" pos:column="73">(<argument><expr><name pos:line="67" pos:column="74">scoredQuery</name></expr></argument>,
                    <argument><expr><name><name pos:line="68" pos:column="21">TermChangeCategory</name><op:operator pos:line="68" pos:column="39">.</op:operator><name pos:line="68" pos:column="40">GENERAL_SYNONYM</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="68" pos:column="58">new</op:operator> <call><name pos:line="68" pos:column="62">ScoreGenerator</name><argument_list pos:line="68" pos:column="76">(<argument><expr><name pos:line="68" pos:column="77">GENERAL_SYNONYM_COUNT_INTERVAL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="69" pos:column="17">return <expr><call><name><name pos:line="69" pos:column="24">scoredQuery</name><op:operator pos:line="69" pos:column="35">.</op:operator><name pos:line="69" pos:column="36">OrderBy</name></name><argument_list pos:line="69" pos:column="43">(<argument><expr><lambda><name pos:line="69" pos:column="44">sq</name> <op:operator pos:line="69" pos:column="47">=&gt;</op:operator> <op:operator pos:line="69" pos:column="50">-</op:operator><name><name pos:line="69" pos:column="51">sq</name><op:operator pos:line="69" pos:column="53">.</op:operator><name pos:line="69" pos:column="54">Score</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="69" pos:column="60">.</op:operator><call><name pos:line="69" pos:column="61">Select</name><argument_list pos:line="69" pos:column="67">(<argument><expr><lambda><name pos:line="69" pos:column="68">sq</name> <op:operator pos:line="69" pos:column="71">=&gt;</op:operator> <name><name pos:line="69" pos:column="74">sq</name><op:operator pos:line="69" pos:column="76">.</op:operator><name pos:line="69" pos:column="77">Query</name></name></lambda></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>

            <function><type><specifier pos:line="72" pos:column="13">private</specifier> <name><name pos:line="72" pos:column="21">IEnumerable</name><argument_list pos:line="72" pos:column="32">&lt;<argument><name><name pos:line="72" pos:column="33">IGrouping</name><argument_list pos:line="72" pos:column="42">&lt;<argument><name pos:line="72" pos:column="43">int</name></argument>, <argument><name pos:line="72" pos:column="48">ScoredReformedQuery</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="72" pos:column="70">GroupScoredQueriesByTermChangeTypeCount</name>
                <parameter_list pos:line="73" pos:column="17">(<param><decl><type><name><name pos:line="73" pos:column="18">IEnumerable</name><argument_list pos:line="73" pos:column="29">&lt;<argument><name pos:line="73" pos:column="30">ScoredReformedQuery</name></argument>&gt;</argument_list></name></type> <name pos:line="73" pos:column="51">scoredQueries</name></decl></param>, <param><decl><type><name pos:line="73" pos:column="66">TermChangeCategory</name></type> <name pos:line="73" pos:column="85">type</name></decl></param>)</parameter_list>
            <block pos:line="74" pos:column="13">{
                <return pos:line="75" pos:column="17">return <expr><call><name><name pos:line="75" pos:column="24">scoredQueries</name><op:operator pos:line="75" pos:column="37">.</op:operator><name pos:line="75" pos:column="38">GroupBy</name></name><argument_list pos:line="75" pos:column="45">(<argument><expr><lambda><name pos:line="75" pos:column="46">sq</name> <op:operator pos:line="75" pos:column="49">=&gt;</op:operator> <call><name><name pos:line="75" pos:column="52">sq</name><op:operator pos:line="75" pos:column="54">.</op:operator><name pos:line="75" pos:column="55">Query</name><op:operator pos:line="75" pos:column="60">.</op:operator><name pos:line="75" pos:column="61">ReformedWords</name><op:operator pos:line="75" pos:column="74">.</op:operator><name pos:line="75" pos:column="75">Count</name></name><argument_list pos:line="75" pos:column="80">(<argument><expr><lambda><name pos:line="75" pos:column="81">w</name> <op:operator pos:line="75" pos:column="83">=&gt;</op:operator> <name><name pos:line="75" pos:column="86">w</name><op:operator pos:line="75" pos:column="87">.</op:operator><name pos:line="75" pos:column="88">Category</name></name> <op:operator pos:line="75" pos:column="97">==</op:operator> <name pos:line="75" pos:column="100">type</name></lambda></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>


            <function><type><specifier pos:line="79" pos:column="13">private</specifier> <name pos:line="79" pos:column="21">void</name></type> <name pos:line="79" pos:column="26">AddScoreToGroups</name><parameter_list pos:line="79" pos:column="42">(<param><decl><type><name><name pos:line="79" pos:column="43">IEnumerable</name><argument_list pos:line="79" pos:column="54">&lt;<argument><name><name pos:line="79" pos:column="55">IGrouping</name><argument_list pos:line="79" pos:column="64">&lt;<argument><name pos:line="79" pos:column="65">int</name></argument>, <argument><name pos:line="79" pos:column="70">ScoredReformedQuery</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="79" pos:column="92">groups</name></decl></param>, 
                <param><decl><type><name pos:line="80" pos:column="17">ScoreGenerator</name></type> <name pos:line="80" pos:column="32">scoreGenerator</name></decl></param>)</parameter_list>
            <block pos:line="81" pos:column="13">{
                <foreach pos:line="82" pos:column="17">foreach (<init><decl><type><name pos:line="82" pos:column="26">var</name></type> <name pos:line="82" pos:column="30">group</name> <range pos:line="82" pos:column="36">in <expr><name pos:line="82" pos:column="39">groups</name></expr></range></decl></init>)
                <block pos:line="83" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="84" pos:column="21">var</name></type> <name pos:line="84" pos:column="25">points</name> <init pos:line="84" pos:column="32">= <expr><call><name><name pos:line="84" pos:column="34">scoreGenerator</name><op:operator pos:line="84" pos:column="48">.</op:operator><name pos:line="84" pos:column="49">GetNextScore</name></name><argument_list pos:line="84" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <foreach pos:line="85" pos:column="21">foreach (<init><decl><type><name pos:line="85" pos:column="30">var</name></type> <name pos:line="85" pos:column="34">query</name> <range pos:line="85" pos:column="40">in <expr><name pos:line="85" pos:column="43">group</name></expr></range></decl></init>)
                    <block pos:line="86" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="87" pos:column="25">query</name><op:operator pos:line="87" pos:column="30">.</op:operator><name pos:line="87" pos:column="31">AddPoints</name></name><argument_list pos:line="87" pos:column="40">(<argument><expr><name pos:line="87" pos:column="41">points</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></foreach>
                }</block></foreach>
            }</block></function>
        }</block></class>
    }</block></class>
}</block></namespace>
</unit>
