<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="D:\Research\Subjects\Sando-master\LIBS\Extensions\inc\office10\msourl.h" pos:tabs="8"><comment type="block" format="doxygen" pos:line="1" pos:column="1">/****************************************************************************
	msourl.h

	Owner: SeanMc
	Copyright (c) 1999 Microsoft Corporation

	MSO's url handling interfaces.
****************************************************************************/</comment>

<cpp:pragma pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">pragma</cpp:directive> once</cpp:pragma>

<cpp:ifndef pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">ifndef</cpp:directive> <name pos:line="12" pos:column="9">MSOURL_H</name></cpp:ifndef>
<cpp:define pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="13" pos:column="9">MSOURL_H</name></cpp:macro></cpp:define>

<cpp:ifndef pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">ifndef</cpp:directive> <name pos:line="15" pos:column="9">CONST_METHOD</name></cpp:ifndef>
<comment type="line" pos:line="16" pos:column="1">// to declare const methods in C++</comment>
<cpp:if pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">if</cpp:directive> <expr><call><name pos:line="17" pos:column="5">defined</name><argument_list pos:line="17" pos:column="12">(<argument><expr><name pos:line="17" pos:column="13">__cplusplus</name></expr></argument>)</argument_list></call> <op:operator pos:line="17" pos:column="26">&amp;&amp;</op:operator> <op:operator pos:line="17" pos:column="29">!</op:operator><call><name pos:line="17" pos:column="30">defined</name><argument_list pos:line="17" pos:column="37">(<argument><expr><name pos:line="17" pos:column="38">CINTERFACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<cpp:define pos:line="18" pos:column="9">#<cpp:directive pos:line="18" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="18" pos:column="17">CONST_METHOD</name></cpp:macro> <cpp:value pos:line="18" pos:column="30">const</cpp:value></cpp:define>
<cpp:else pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">else</cpp:directive></cpp:else>
	<cpp:define pos:line="20" pos:column="9">#<cpp:directive pos:line="20" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="20" pos:column="17">CONST_METHOD</name></cpp:macro></cpp:define>
<cpp:endif pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">endif</cpp:directive></cpp:endif>
<cpp:endif pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"wininet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"msobp.h"</lit:literal></cpp:file></cpp:include>

<comment type="line" pos:line="27" pos:column="1">// list of schemes recognized via MsoUrl</comment>
<typedef pos:line="28" pos:column="1">typedef <type><enum pos:line="28" pos:column="9">enum
	<block pos:line="29" pos:column="9">{
	<decl><name pos:line="30" pos:column="9">urlsNil</name> <init pos:line="30" pos:column="17">= <expr><op:operator pos:line="30" pos:column="19">-</op:operator><lit:literal type="number" pos:line="30" pos:column="20">1</lit:literal></expr></init></decl><op:operator pos:line="30" pos:column="21">,</op:operator>
	<decl><name pos:line="31" pos:column="9">urlsHttp</name></decl><op:operator pos:line="31" pos:column="17">,</op:operator>             <comment type="line" pos:line="31" pos:column="31">// "http"</comment>
	<decl><name pos:line="32" pos:column="9">urlsHttps</name></decl><op:operator pos:line="32" pos:column="18">,</op:operator>            <comment type="line" pos:line="32" pos:column="31">// "https"</comment>
	<decl><name pos:line="33" pos:column="9">urlsFtp</name></decl><op:operator pos:line="33" pos:column="16">,</op:operator>              <comment type="line" pos:line="33" pos:column="31">// "ftp"</comment>
	<decl><name pos:line="34" pos:column="9">urlsFile</name></decl><op:operator pos:line="34" pos:column="17">,</op:operator>             <comment type="line" pos:line="34" pos:column="31">// "file"</comment>
	<decl><name pos:line="35" pos:column="9">urlsCid</name></decl><op:operator pos:line="35" pos:column="16">,</op:operator>              <comment type="line" pos:line="35" pos:column="31">// "cid"</comment>
	<decl><name pos:line="36" pos:column="9">urlsMailto</name></decl><op:operator pos:line="36" pos:column="19">,</op:operator>           <comment type="line" pos:line="36" pos:column="31">// "mailto"</comment>
	<decl><name pos:line="37" pos:column="9">urlsJavascript</name></decl><op:operator pos:line="37" pos:column="23">,</op:operator>       <comment type="line" pos:line="37" pos:column="31">// "javascript"</comment>
	<decl><name pos:line="38" pos:column="9">urlsOutlook</name></decl><op:operator pos:line="38" pos:column="20">,</op:operator>          <comment type="line" pos:line="38" pos:column="31">// "outlook"</comment>
	<decl><name pos:line="39" pos:column="9">urlsODMA</name></decl><op:operator pos:line="39" pos:column="17">,</op:operator>             <comment type="line" pos:line="39" pos:column="31">// "::ODMA\"</comment>
	<decl><name pos:line="40" pos:column="9">urlsMhtmlCompound</name></decl><op:operator pos:line="40" pos:column="26">,</op:operator>    <comment type="line" pos:line="40" pos:column="31">// "mhtml:X!Y"</comment>
	<decl><name pos:line="41" pos:column="9">urlsThismessage</name></decl><op:operator pos:line="41" pos:column="24">,</op:operator>      <comment type="line" pos:line="41" pos:column="31">// "thismessage"</comment>
	<decl><name pos:line="42" pos:column="9">urlsRes</name></decl><op:operator pos:line="42" pos:column="16">,</op:operator>              <comment type="line" pos:line="42" pos:column="31">// "res"</comment>
	<decl><name pos:line="43" pos:column="9">urlsMk</name></decl><op:operator pos:line="43" pos:column="15">,</op:operator>               <comment type="line" pos:line="43" pos:column="31">// "mk"</comment>
	<decl><name pos:line="44" pos:column="9">urlsUnknown</name></decl>
	}</block></enum></type> <name pos:line="45" pos:column="11">MSOURLSCHEME</name>;</typedef>


<comment type="line" pos:line="48" pos:column="1">// list of relativities understood via MsoUrl</comment>
<typedef pos:line="49" pos:column="1">typedef <type><enum pos:line="49" pos:column="9">enum
	<block pos:line="50" pos:column="9">{
	<decl><name pos:line="51" pos:column="9">urlrNil</name> <init pos:line="51" pos:column="17">= <expr><op:operator pos:line="51" pos:column="19">-</op:operator><lit:literal type="number" pos:line="51" pos:column="20">1</lit:literal></expr></init></decl><op:operator pos:line="51" pos:column="21">,</op:operator>
	<decl><name pos:line="52" pos:column="9">urlrOpaque</name></decl><op:operator pos:line="52" pos:column="19">,</op:operator>           <comment type="line" pos:line="52" pos:column="31">// EXAMPLE: "mailto:someone@somewhere.com"</comment>
	<decl><name pos:line="53" pos:column="9">urlrAbsolute</name></decl><op:operator pos:line="53" pos:column="21">,</op:operator>         <comment type="line" pos:line="53" pos:column="31">// EXAMPLE: "http://mumble.com/woo.hoo"</comment>
	<decl><name pos:line="54" pos:column="9">urlrServer</name></decl><op:operator pos:line="54" pos:column="19">,</op:operator>           <comment type="line" pos:line="54" pos:column="31">// EXAMPLE: "/foo/bar/woo.hoo"</comment>
	<decl><name pos:line="55" pos:column="9">urlrPage</name></decl>              <comment type="line" pos:line="55" pos:column="31">// EXAMPLE: "../foo/bar/woo.hoo"</comment>
	}</block></enum></type> <name pos:line="56" pos:column="11">MSOURLRELATIVITY</name>;</typedef>


<comment type="block" pos:line="59" pos:column="1">/* URLC (Url Component) flags, passed to IMsoUrl::HrGetCustomForm &amp; IMsoUrl::FComponentsAreEqual. */</comment>
<cpp:define pos:line="60" pos:column="1">#<cpp:directive pos:line="60" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="60" pos:column="9">msofurlcScheme</name></cpp:macro>   <cpp:value pos:line="60" pos:column="26">0x0001</cpp:value></cpp:define>
<cpp:define pos:line="61" pos:column="1">#<cpp:directive pos:line="61" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="61" pos:column="9">msofurlcUserName</name></cpp:macro> <cpp:value pos:line="61" pos:column="26">0x0002</cpp:value></cpp:define>
<cpp:define pos:line="62" pos:column="1">#<cpp:directive pos:line="62" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="62" pos:column="9">msofurlcPassword</name></cpp:macro> <cpp:value pos:line="62" pos:column="26">0x0004</cpp:value></cpp:define>
<cpp:define pos:line="63" pos:column="1">#<cpp:directive pos:line="63" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="63" pos:column="9">msofurlcServer</name></cpp:macro>   <cpp:value pos:line="63" pos:column="26">0x0008</cpp:value></cpp:define>
<cpp:define pos:line="64" pos:column="1">#<cpp:directive pos:line="64" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="64" pos:column="9">msofurlcPort</name></cpp:macro>     <cpp:value pos:line="64" pos:column="26">0x0010</cpp:value></cpp:define>
<cpp:define pos:line="65" pos:column="1">#<cpp:directive pos:line="65" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="65" pos:column="9">msofurlcDir</name></cpp:macro>      <cpp:value pos:line="65" pos:column="26">0x0020</cpp:value></cpp:define>
<cpp:define pos:line="66" pos:column="1">#<cpp:directive pos:line="66" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="66" pos:column="9">msofurlcFileName</name></cpp:macro> <cpp:value pos:line="66" pos:column="26">0x0040</cpp:value></cpp:define>
<cpp:define pos:line="67" pos:column="1">#<cpp:directive pos:line="67" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="67" pos:column="9">msofurlcFileExt</name></cpp:macro>  <cpp:value pos:line="67" pos:column="26">0x0080</cpp:value></cpp:define>
<cpp:define pos:line="68" pos:column="1">#<cpp:directive pos:line="68" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="68" pos:column="9">msofurlcQuery</name></cpp:macro>    <cpp:value pos:line="68" pos:column="26">0x0100</cpp:value></cpp:define>
<cpp:define pos:line="69" pos:column="1">#<cpp:directive pos:line="69" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="69" pos:column="9">msofurlcFragment</name></cpp:macro> <cpp:value pos:line="69" pos:column="26">0x0200</cpp:value></cpp:define>
<cpp:define pos:line="70" pos:column="1">#<cpp:directive pos:line="70" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="70" pos:column="9">msofurlcMhtml</name></cpp:macro>	 <cpp:value pos:line="70" pos:column="26">0x0400</cpp:value></cpp:define>

<cpp:define pos:line="72" pos:column="1">#<cpp:directive pos:line="72" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="72" pos:column="9">msofurlcAuthority</name></cpp:macro> <cpp:value pos:line="72" pos:column="27">(msofurlcUserName | msofurlcPassword | msofurlcServer | msofurlcPort)</cpp:value></cpp:define>
<cpp:define pos:line="73" pos:column="1">#<cpp:directive pos:line="73" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="73" pos:column="9">msofurlcFileLeaf</name></cpp:macro>  <cpp:value pos:line="73" pos:column="27">(msofurlcFileName | msofurlcFileExt)</cpp:value></cpp:define>
<cpp:define pos:line="74" pos:column="1">#<cpp:directive pos:line="74" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="74" pos:column="9">msofurlcPath</name></cpp:macro>      <cpp:value pos:line="74" pos:column="27">(msofurlcDir | msofurlcFileLeaf)</cpp:value></cpp:define>
<cpp:define pos:line="75" pos:column="1">#<cpp:directive pos:line="75" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="75" pos:column="9">msofurlcComplete</name></cpp:macro>  <cpp:value pos:line="75" pos:column="27">(msofurlcScheme | msofurlcAuthority | msofurlcPath | msofurlcQuery | msofurlcFragment | msofurlcMhtml)</cpp:value></cpp:define>

<comment type="block" pos:line="77" pos:column="1">/* URL flags, passed to IMsoUrl::HrSetFromUser[Rgwch]. */</comment>
<cpp:define pos:line="78" pos:column="1">#<cpp:directive pos:line="78" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="78" pos:column="9">msofurlNoFragment</name></cpp:macro>               <cpp:value pos:line="78" pos:column="41">0x00000001</cpp:value></cpp:define>  <comment type="line" pos:line="78" pos:column="53">// don't treat the '#' character as a fragment delimiter</comment>
<cpp:define pos:line="79" pos:column="1">#<cpp:directive pos:line="79" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="79" pos:column="9">msofurlStripEncapsulatingDelims</name></cpp:macro> <cpp:value pos:line="79" pos:column="41">0x00000002</cpp:value></cpp:define>  <comment type="line" pos:line="79" pos:column="53">// strip off quotes or angle brackets encapsulating the url (if present)</comment>
<cpp:define pos:line="80" pos:column="1">#<cpp:directive pos:line="80" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="80" pos:column="9">msofurlConvertDriveMappedUNC</name></cpp:macro>    <cpp:value pos:line="80" pos:column="41">0x00000004</cpp:value></cpp:define>  <comment type="line" pos:line="80" pos:column="53">// convert drive mapped UNCs to pure UNC form</comment>
<cpp:define pos:line="81" pos:column="1">#<cpp:directive pos:line="81" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="81" pos:column="9">msofurlConvertToShortFileName</name></cpp:macro>   <cpp:value pos:line="81" pos:column="41">0x00000008</cpp:value></cpp:define>  <comment type="line" pos:line="81" pos:column="53">// convert any local paths to 8.3 form</comment>
<cpp:define pos:line="82" pos:column="1">#<cpp:directive pos:line="82" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="82" pos:column="9">msofurlConvertToLongFileName</name></cpp:macro>    <cpp:value pos:line="82" pos:column="41">0x00000010</cpp:value></cpp:define>  <comment type="line" pos:line="82" pos:column="53">// convert any local paths to long filename form</comment>
<cpp:define pos:line="83" pos:column="1">#<cpp:directive pos:line="83" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="83" pos:column="9">msofurlEscapeSingleQuotes</name></cpp:macro>       <cpp:value pos:line="83" pos:column="41">0x00000020</cpp:value></cpp:define>  <comment type="line" pos:line="83" pos:column="53">// escape any single quotes found in the url</comment>
<cpp:define pos:line="84" pos:column="1">#<cpp:directive pos:line="84" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="84" pos:column="9">msofurlEscapeAllPercents</name></cpp:macro>        <cpp:value pos:line="84" pos:column="41">0x00000040</cpp:value></cpp:define>  <comment type="line" pos:line="84" pos:column="53">// escape all percents (normally percents in %HH sequences are not escaped)</comment>
<cpp:define pos:line="85" pos:column="1">#<cpp:directive pos:line="85" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="85" pos:column="9">msofurlStripLeadingWhitespace</name></cpp:macro>   <cpp:value pos:line="85" pos:column="41">0x00000080</cpp:value></cpp:define>  <comment type="line" pos:line="85" pos:column="53">// strip off leading whitespace (if present)</comment>
<cpp:define pos:line="86" pos:column="1">#<cpp:directive pos:line="86" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="86" pos:column="9">msofurlStripTrailingWhitespace</name></cpp:macro>  <cpp:value pos:line="86" pos:column="41">0x00000100</cpp:value></cpp:define>  <comment type="line" pos:line="86" pos:column="53">// strip off trailing whitespace (if present)</comment>
                                                    <comment type="line" pos:line="87" pos:column="53">// if present with msofurlStripEncapsulatingDelims, strips both inside and outside delims</comment>
<cpp:define pos:line="88" pos:column="1">#<cpp:directive pos:line="88" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="88" pos:column="9">msofurlApplyGuessScheme</name></cpp:macro>         <cpp:value pos:line="88" pos:column="41">0x00000200</cpp:value></cpp:define>  <comment type="line" pos:line="88" pos:column="53">// apply best guess scheme if none exists on the url</comment>
<cpp:define pos:line="89" pos:column="1">#<cpp:directive pos:line="89" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="89" pos:column="9">msofurlApplyDefaultScheme</name></cpp:macro>       <cpp:value pos:line="89" pos:column="41">0x00000400</cpp:value></cpp:define>  <comment type="line" pos:line="89" pos:column="53">// apply the default scheme if none exists on the url</comment>
<cpp:define pos:line="90" pos:column="1">#<cpp:directive pos:line="90" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="90" pos:column="9">msofurlCaseInsensitivePath</name></cpp:macro>      <cpp:value pos:line="90" pos:column="41">0x00000800</cpp:value></cpp:define>  <comment type="line" pos:line="90" pos:column="53">// use case-insensitive comparisons on the path component</comment>
<cpp:define pos:line="91" pos:column="1">#<cpp:directive pos:line="91" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="91" pos:column="9">msofurlEnsureTrailingPathSep</name></cpp:macro>    <cpp:value pos:line="91" pos:column="41">0x00001000</cpp:value></cpp:define>  <comment type="line" pos:line="91" pos:column="53">// ensure the path component includes a trailing slash (indicating it is a directory)</comment>
<cpp:define pos:line="92" pos:column="1">#<cpp:directive pos:line="92" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="92" pos:column="9">msofurlRemoveTrailingPathSep</name></cpp:macro>    <cpp:value pos:line="92" pos:column="41">0x00002000</cpp:value></cpp:define>  <comment type="line" pos:line="92" pos:column="53">// ensure the path component does not have a trailing slash (indicating a file leaf or empty path)</comment>
<cpp:define pos:line="93" pos:column="1">#<cpp:directive pos:line="93" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="93" pos:column="9">msofurlAllowInvertedLocalSep</name></cpp:macro>    <cpp:value pos:line="93" pos:column="41">0x00004000</cpp:value></cpp:define>  <comment type="line" pos:line="93" pos:column="53">// let "x:/" map to { scheme:"file", path:"x:\" }, rather than { scheme:"x", path:"/" }</comment>
                                                    <comment type="line" pos:line="94" pos:column="53">// also applies the same logic to "//server/share"</comment>
<cpp:define pos:line="95" pos:column="1">#<cpp:directive pos:line="95" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="95" pos:column="9">msofurlDontChangeSlashTypes</name></cpp:macro>     <cpp:value pos:line="95" pos:column="41">0x00008000</cpp:value></cpp:define>  <comment type="line" pos:line="95" pos:column="53">// don't change /'s to \'s or vice-versa</comment>
<cpp:define pos:line="96" pos:column="1">#<cpp:directive pos:line="96" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="96" pos:column="9">msofurlNoEscape</name></cpp:macro>                 <cpp:value pos:line="96" pos:column="41">0x00010000</cpp:value></cpp:define>  <comment type="line" pos:line="96" pos:column="53">// don't escape this url internally</comment>
<cpp:define pos:line="97" pos:column="1">#<cpp:directive pos:line="97" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="97" pos:column="9">msofurlEnsureValidAuthority</name></cpp:macro>     <cpp:value pos:line="97" pos:column="41">0x00020000</cpp:value></cpp:define>  <comment type="line" pos:line="97" pos:column="53">// ensure the authority component is valid if present (non-empty)</comment>
<cpp:define pos:line="98" pos:column="1">#<cpp:directive pos:line="98" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="98" pos:column="9">msofurlNoQuery</name></cpp:macro>                  <cpp:value pos:line="98" pos:column="41">0x00040000</cpp:value></cpp:define>  <comment type="line" pos:line="98" pos:column="53">// don't treat the '?' character as a query delimiter</comment>
<cpp:define pos:line="99" pos:column="1">#<cpp:directive pos:line="99" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="99" pos:column="9">msofurlEnsureBalancedQuotes</name></cpp:macro>     <cpp:value pos:line="99" pos:column="41">0x00080000</cpp:value></cpp:define>  <comment type="line" pos:line="99" pos:column="53">// ensure no unbalanced quotes at the beginning/end of the URL</comment>
                                                    <comment type="line" pos:line="100" pos:column="53">// use with caution: these may be valid in some cases</comment>
<cpp:define pos:line="101" pos:column="1">#<cpp:directive pos:line="101" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="101" pos:column="9">msofurlEscapeAllReservedChars</name></cpp:macro>   <cpp:value pos:line="101" pos:column="41">0x00100000</cpp:value></cpp:define>  <comment type="line" pos:line="101" pos:column="53">// escape all reserved characters (any in ";/:@&amp;=+$,") use with care -- creates very odd urls!</comment>
<cpp:define pos:line="102" pos:column="1">#<cpp:directive pos:line="102" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="102" pos:column="9">msofurlDetectASPLinks</name></cpp:macro>           <cpp:value pos:line="102" pos:column="41">0x00200000</cpp:value></cpp:define>  <comment type="line" pos:line="102" pos:column="53">// client wants ASP links detected</comment>

<comment type="block" pos:line="104" pos:column="1">/* URLDF flags, passed to IMsoUrl::HrGetDisplayForm. */</comment>
<cpp:define pos:line="105" pos:column="1">#<cpp:directive pos:line="105" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="105" pos:column="9">msofurldfUnescapeHighAnsi</name></cpp:macro>       <cpp:value pos:line="105" pos:column="41">0x0001</cpp:value></cpp:define>  <comment type="line" pos:line="105" pos:column="49">// unescape high-ANSI entities (use with extreme caution!)</comment>
<cpp:define pos:line="106" pos:column="1">#<cpp:directive pos:line="106" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="106" pos:column="9">msofurldfUseLocalPathForm</name></cpp:macro>       <cpp:value pos:line="106" pos:column="41">0x0002</cpp:value></cpp:define>  <comment type="line" pos:line="106" pos:column="49">// use the local path form for local urls (return what HrGetLocalPath would return if the url is local)</comment>
<cpp:define pos:line="107" pos:column="1">#<cpp:directive pos:line="107" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="107" pos:column="9">msofurldfDoNotUnescapeHash</name></cpp:macro>      <cpp:value pos:line="107" pos:column="41">0x0004</cpp:value></cpp:define>  <comment type="line" pos:line="107" pos:column="49">// do not unescape the hash character (leave it "%23" instead)</comment>
<cpp:define pos:line="108" pos:column="1">#<cpp:directive pos:line="108" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="108" pos:column="9">msofurldfDoNotUnescapeLowAnsi</name></cpp:macro>   <cpp:value pos:line="108" pos:column="41">0x0008</cpp:value></cpp:define>  <comment type="line" pos:line="108" pos:column="49">// do not unescape low-ANSI entities (use with extreme caution!)</comment>

<comment type="block" pos:line="110" pos:column="1">/* URLCF flags, passed to IMsoUrl::HrGetCustomForm. */</comment>
<cpp:define pos:line="111" pos:column="1">#<cpp:directive pos:line="111" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="111" pos:column="9">msofurlcfDisplay</name></cpp:macro>                <cpp:value pos:line="111" pos:column="41">0x0001</cpp:value></cpp:define>  <comment type="line" pos:line="111" pos:column="49">// get the display form</comment>
<cpp:define pos:line="112" pos:column="1">#<cpp:directive pos:line="112" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="112" pos:column="9">msofurlcf3SlashFileSyntax</name></cpp:macro>       <cpp:value pos:line="112" pos:column="41">0x0002</cpp:value></cpp:define>  <comment type="line" pos:line="112" pos:column="49">// use the 3 slash file: syntax</comment>
<cpp:define pos:line="113" pos:column="1">#<cpp:directive pos:line="113" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="113" pos:column="9">msofurlcfUseHideExtShellSetting</name></cpp:macro> <cpp:value pos:line="113" pos:column="41">0x0004</cpp:value></cpp:define>  <comment type="line" pos:line="113" pos:column="49">// use the OS shell setting to hide extensions to include ext in leaf</comment>
<cpp:define pos:line="114" pos:column="1">#<cpp:directive pos:line="114" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="114" pos:column="9">msofurlcfUseLocalPathForm</name></cpp:macro>       <cpp:value pos:line="114" pos:column="41">0x0008</cpp:value></cpp:define>  <comment type="line" pos:line="114" pos:column="49">// use the local path form for local urls (return what HrGetLocalPath would return if the url is local)</comment>

<comment type="block" pos:line="116" pos:column="1">/* URLE flags, passed to IMsoUrl::FExists. */</comment>
<cpp:define pos:line="117" pos:column="1">#<cpp:directive pos:line="117" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="117" pos:column="9">msofurleCheckServers</name></cpp:macro>      <cpp:value pos:line="117" pos:column="35">0x0001</cpp:value></cpp:define>  <comment type="line" pos:line="117" pos:column="43">// validate against the server (if not set then server based paths return FALSE)</comment>
<cpp:define pos:line="118" pos:column="1">#<cpp:directive pos:line="118" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="118" pos:column="9">msofurleFolder</name></cpp:macro>            <cpp:value pos:line="118" pos:column="35">0x0002</cpp:value></cpp:define>  <comment type="line" pos:line="118" pos:column="43">// verify that path points to a folder</comment>
<cpp:define pos:line="119" pos:column="1">#<cpp:directive pos:line="119" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="119" pos:column="9">msofurleBrowsable</name></cpp:macro>         <cpp:value pos:line="119" pos:column="35">0x0004</cpp:value></cpp:define>  <comment type="line" pos:line="119" pos:column="43">// verify that path points to a browsable folder (requires msofurleFolder)</comment>
<cpp:define pos:line="120" pos:column="1">#<cpp:directive pos:line="120" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="120" pos:column="9">msofurleAllowUI</name></cpp:macro>           <cpp:value pos:line="120" pos:column="35">0x0008</cpp:value></cpp:define>  <comment type="line" pos:line="120" pos:column="43">// allow UI to be raised (such as the password authentication dialog)</comment>

<comment type="block" pos:line="122" pos:column="1">/* URLU flags, passed to IMsoUrl::HrUpload. */</comment>
<cpp:define pos:line="123" pos:column="1">#<cpp:directive pos:line="123" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="123" pos:column="9">msofurluAlertIfExist</name></cpp:macro>       <cpp:value pos:line="123" pos:column="36">0x0001</cpp:value></cpp:define>
<cpp:define pos:line="124" pos:column="1">#<cpp:directive pos:line="124" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="124" pos:column="9">msofurluFailIfExist</name></cpp:macro>        <cpp:value pos:line="124" pos:column="36">0x0002</cpp:value></cpp:define>

<comment type="block" pos:line="126" pos:column="1">/* URLD flags, passed to IMsoUrl::HrDownload. */</comment>
<cpp:define pos:line="127" pos:column="1">#<cpp:directive pos:line="127" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="127" pos:column="9">msofurldUseCachedVersion</name></cpp:macro>  <cpp:value pos:line="127" pos:column="35">0x0001</cpp:value></cpp:define>  <comment type="line" pos:line="127" pos:column="43">// if it already exists in the cache, use it (otherwise download it)</comment>


<comment type="line" format="doxygen" pos:line="130" pos:column="1">/////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line" pos:line="131" pos:column="1">//</comment>
<comment type="line" pos:line="132" pos:column="1">// Basic url definitions:</comment>
<comment type="line" pos:line="133" pos:column="1">//</comment>
<comment type="line" pos:line="134" pos:column="1">// hierarchichal url := &lt;scheme&gt;://&lt;authority&gt;[/&lt;path&gt;][?&lt;query&gt;][#&lt;fragment&gt;]</comment>
<comment type="line" pos:line="135" pos:column="1">// authority := [&lt;username&gt;[:&lt;password&gt;]@]&lt;server&gt;[:&lt;port&gt;]</comment>
<comment type="line" pos:line="136" pos:column="1">// path := &lt;dir&gt;[/[fileleaf]]</comment>
<comment type="line" pos:line="137" pos:column="1">// fileleaf := &lt;filename&gt;[.&lt;fileext&gt;]</comment>
<comment type="line" pos:line="138" pos:column="1">//</comment>
<comment type="line" pos:line="139" pos:column="1">// opaque url := &lt;scheme&gt;:&lt;path&gt;[?&lt;query&gt;][#&lt;fragment&gt;]</comment>
<comment type="line" pos:line="140" pos:column="1">//</comment>
<comment type="line" pos:line="141" pos:column="1">// NOTE: every url always has a path (&amp; dir) component (but it may be the empty string)</comment>
<comment type="line" pos:line="142" pos:column="1">//</comment>
<comment type="line" format="doxygen" pos:line="143" pos:column="1">/////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line" pos:line="144" pos:column="1">//</comment>
<comment type="line" pos:line="145" pos:column="1">// Mhtml url definitions:</comment>
<comment type="line" pos:line="146" pos:column="1">// </comment>
<comment type="line" pos:line="147" pos:column="1">// Only-File form: mhtml:X - where X is an absolute hierarchichal url.</comment>
<comment type="line" pos:line="148" pos:column="1">// Compound form: mhtml:X!Y - where X is like above, Y is a CID or CLOC (Content-Location)</comment>
<comment type="line" pos:line="149" pos:column="1">//</comment>
<comment type="line" pos:line="150" pos:column="1">// NOTE: We do not return Only-File forms for these types of url's, since this can</comment>
<comment type="line" pos:line="151" pos:column="1">//       expose a bug in IE which causes these files to be loaded with the wrong codepage.</comment>
<comment type="line" pos:line="152" pos:column="1">// NOTE: We only use the mhtml: prefix when we have a compound mhtml url (restating above).</comment>
<comment type="line" pos:line="153" pos:column="1">//       Therefore Only-File url's become normal url's when accessed via url methods.</comment>
<comment type="line" pos:line="154" pos:column="1">// </comment>
<comment type="line" pos:line="155" pos:column="1">// We fixup REL url's with mhtml url's by doing the following:</comment>
<comment type="line" pos:line="156" pos:column="1">// mhtml:X + REL ==&gt; mhtml:X!REL &lt;- Only-File becomes a compound mhtml url</comment>
<comment type="line" pos:line="157" pos:column="1">// mhtml:X!Y + REL ==&gt; mhtml:X!(Y+REL)  &lt;- here, Y+REL is the proper combination of these url's as single entities</comment>
<comment type="line" pos:line="158" pos:column="1">//</comment>
<comment type="line" format="doxygen" pos:line="159" pos:column="1">/////////////////////////////////////////////////////////////////////////////////</comment>

<comment type="block" pos:line="161" pos:column="1">/* IMsoUrl (iurl) */</comment>
<cpp:undef pos:line="162" pos:column="1">#<cpp:directive pos:line="162" pos:column="2">undef</cpp:directive>  <name pos:line="162" pos:column="9">INTERFACE</name></cpp:undef>
<cpp:define pos:line="163" pos:column="1">#<cpp:directive pos:line="163" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="163" pos:column="9">INTERFACE</name></cpp:macro> <cpp:value pos:line="163" pos:column="19">IMsoUrl</cpp:value></cpp:define>
<macro><name pos:line="164" pos:column="1">DECLARE_INTERFACE_</name><argument_list pos:line="164" pos:column="19">(<argument pos:line="164" pos:column="20">IMsoUrl</argument>, <argument pos:line="164" pos:column="29">IUnknown</argument>)</argument_list></macro>
<block pos:line="165" pos:column="1">{
	<comment type="line" pos:line="166" pos:column="9">// ----- IUnknown methods</comment>

	<function_decl><type><name pos:line="168" pos:column="9">MSOMETHOD</name></type> (<name pos:line="168" pos:column="20">QueryInterface</name>) <parameter_list pos:line="168" pos:column="36">(<param><decl><type><name pos:line="168" pos:column="37">THIS_</name> <name pos:line="168" pos:column="43">REFIID</name></type> <name pos:line="168" pos:column="50">riid</name></decl></param>, <param><decl><type><name pos:line="168" pos:column="56">VOID</name> <type:modifier pos:line="168" pos:column="61">*</type:modifier><type:modifier pos:line="168" pos:column="62">*</type:modifier></type><name pos:line="168" pos:column="63">ppvObj</name></decl></param>)</parameter_list> <name pos:line="168" pos:column="71">PURE</name>;</function_decl>
	<macro><name pos:line="169" pos:column="9">MSOMETHOD_</name><argument_list pos:line="169" pos:column="19">(<argument pos:line="169" pos:column="20">ULONG</argument>, <argument pos:line="169" pos:column="27">AddRef</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="169" pos:column="35">(</op:operator><name pos:line="169" pos:column="36">THIS</name><op:operator pos:line="169" pos:column="40">)</op:operator> <name pos:line="169" pos:column="42">PURE</name></expr>;</expr_stmt>
	<macro><name pos:line="170" pos:column="9">MSOMETHOD_</name><argument_list pos:line="170" pos:column="19">(<argument pos:line="170" pos:column="20">ULONG</argument>, <argument pos:line="170" pos:column="27">Release</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="170" pos:column="36">(</op:operator><name pos:line="170" pos:column="37">THIS</name><op:operator pos:line="170" pos:column="41">)</op:operator> <name pos:line="170" pos:column="43">PURE</name></expr>;</expr_stmt>

	<comment type="line" pos:line="172" pos:column="9">// ----- IMsoUrl methods</comment>

	<comment type="block" pos:line="174" pos:column="9">/* FDebugMessage method */</comment>
	<decl_stmt><decl><type><name pos:line="175" pos:column="9">MSODEBUGMETHOD</name></type>

	<comment type="line" pos:line="177" pos:column="9">// is the URL valid? (was it set properly?)</comment>
	<name pos:line="178" pos:column="9">MSOMETHOD_</name><argument_list pos:line="178" pos:column="19">(<argument><expr><name pos:line="178" pos:column="20">BOOL</name></expr></argument>, <argument><expr><name pos:line="178" pos:column="26">FValid</name></expr></argument>)</argument_list> <argument_list pos:line="178" pos:column="34">(<argument><expr><name pos:line="178" pos:column="35">THIS</name></expr></argument>)</argument_list> <name pos:line="178" pos:column="41">CONST_METHOD</name> <name pos:line="178" pos:column="54">PURE</name></decl>;</decl_stmt>

	<comment type="line" pos:line="180" pos:column="9">// set methods</comment>
	<comment type="line" pos:line="181" pos:column="9">//</comment>
	<comment type="line" pos:line="182" pos:column="9">// HrSetFromUser - use when you have a url from an external source other than another</comment>
	<comment type="line" pos:line="183" pos:column="9">//    MsoUrl (for instance from user typing or pasting in from some external source</comment>
	<comment type="line" pos:line="184" pos:column="9">//    or a url read in from an html file).  Param grfurl allows the user to specify</comment>
	<comment type="line" pos:line="185" pos:column="9">//    special behavior (such as msofurlNoFragment specifying to interpreting the url</comment>
	<comment type="line" pos:line="186" pos:column="9">//    as having no fragment).  Default grfurl is 0.</comment>
	<comment type="line" pos:line="187" pos:column="9">// HrSetFromUserRgwch - same as HrSetFromUser but takes a rgwch &amp; cch instead of wz.</comment>
	<comment type="line" pos:line="188" pos:column="9">// HrSetFromCanonicalUrl - use only when you have a canonical url retrieved from</comment>
	<comment type="line" pos:line="189" pos:column="9">//    another MsoUrl.  Primarily only used internally, or maybe when writing out a</comment>
	<comment type="line" pos:line="190" pos:column="9">//    url to a cache in the registry for example.  When in doubt, use HrSetFromUser</comment>
	<comment type="line" pos:line="191" pos:column="9">//    (which does more robustifying and canonicalizing on the input url).</comment>
	<comment type="line" pos:line="192" pos:column="9">//</comment>
	<comment type="line" pos:line="193" pos:column="9">// NOTE: each set method also has a param cp which is the codepage context of the</comment>
	<comment type="line" pos:line="194" pos:column="9">//    url (i.e. the codepage of the html source file or CP_ACP for something pasted</comment>
	<comment type="line" pos:line="195" pos:column="9">//    or the document codepage for something typed in by the user).</comment>
	<comment type="line" pos:line="196" pos:column="9">// NOTE: each set method also has a param piurlBase which is a url which represent the</comment>
	<comment type="line" pos:line="197" pos:column="9">//    base for resolving this url.  Urls which are absolute or opaque may safely pass</comment>
	<comment type="line" pos:line="198" pos:column="9">//    in NULL for the base.  Relative url's should however always have a valid base.  If</comment>
	<comment type="line" pos:line="199" pos:column="9">//    a relative url is created without a base, the HrResolve method will assert.</comment>
	<function_decl><type><name pos:line="200" pos:column="9">MSOMETHOD</name></type> (<name pos:line="200" pos:column="20">HrSetFromUser</name>) <parameter_list pos:line="200" pos:column="35">(<param><decl><type><name pos:line="200" pos:column="36">THIS_</name> <specifier pos:line="200" pos:column="42">const</specifier> <name pos:line="200" pos:column="48">WCHAR</name> <type:modifier pos:line="200" pos:column="54">*</type:modifier></type><name pos:line="200" pos:column="55">wzUrl</name></decl></param>, <param><decl><type><name pos:line="200" pos:column="62">DWORD</name></type> <name pos:line="200" pos:column="68">cp</name></decl></param>, <param><decl><type><specifier pos:line="200" pos:column="72">const</specifier> <name pos:line="200" pos:column="78">IMsoUrl</name> <type:modifier pos:line="200" pos:column="86">*</type:modifier></type><name pos:line="200" pos:column="87">piurlBase</name></decl></param>, <param><decl><type><name pos:line="200" pos:column="98">DWORD</name></type> <name pos:line="200" pos:column="104">grfurl</name></decl></param>)</parameter_list> <name pos:line="200" pos:column="112">PURE</name>;</function_decl>
	<function_decl><type><name pos:line="201" pos:column="9">MSOMETHOD</name></type> (<name pos:line="201" pos:column="20">HrSetFromUserRgwch</name>) <parameter_list pos:line="201" pos:column="40">(<param><decl><type><name pos:line="201" pos:column="41">THIS_</name> <specifier pos:line="201" pos:column="47">const</specifier> <name pos:line="201" pos:column="53">WCHAR</name> <type:modifier pos:line="201" pos:column="59">*</type:modifier></type><name pos:line="201" pos:column="60">rgwchUrl</name></decl></param>, <param><decl><type><name pos:line="201" pos:column="70">int</name></type> <name pos:line="201" pos:column="74">cchUrl</name></decl></param>, <param><decl><type><name pos:line="201" pos:column="82">DWORD</name></type> <name pos:line="201" pos:column="88">cp</name></decl></param>, <param><decl><type><specifier pos:line="201" pos:column="92">const</specifier> <name pos:line="201" pos:column="98">IMsoUrl</name> <type:modifier pos:line="201" pos:column="106">*</type:modifier></type><name pos:line="201" pos:column="107">piurlBase</name></decl></param>, <param><decl><type><name pos:line="201" pos:column="118">DWORD</name></type> <name pos:line="201" pos:column="124">grfurl</name></decl></param>)</parameter_list> <name pos:line="201" pos:column="132">PURE</name>;</function_decl>
	<function_decl><type><name pos:line="202" pos:column="9">MSOMETHOD</name></type> (<name pos:line="202" pos:column="20">HrSetFromCanonicalUrl</name>) <parameter_list pos:line="202" pos:column="43">(<param><decl><type><name pos:line="202" pos:column="44">THIS_</name> <specifier pos:line="202" pos:column="50">const</specifier> <name pos:line="202" pos:column="56">WCHAR</name> <type:modifier pos:line="202" pos:column="62">*</type:modifier></type><name pos:line="202" pos:column="63">wzUrl</name></decl></param>, <param><decl><type><name pos:line="202" pos:column="70">DWORD</name></type> <name pos:line="202" pos:column="76">cp</name></decl></param>, <param><decl><type><specifier pos:line="202" pos:column="80">const</specifier> <name pos:line="202" pos:column="86">IMsoUrl</name> <type:modifier pos:line="202" pos:column="94">*</type:modifier></type><name pos:line="202" pos:column="95">piurlBase</name></decl></param>)</parameter_list> <name pos:line="202" pos:column="106">PURE</name>;</function_decl>

	<comment type="line" pos:line="204" pos:column="9">// lock/unlock methods</comment>
	<comment type="line" pos:line="205" pos:column="9">//</comment>
	<comment type="line" pos:line="206" pos:column="9">// Use these when you use methods returning LPCWSTR's to ensure the data is not changed</comment>
	<comment type="line" pos:line="207" pos:column="9">//    while you are accessing it.  These methods ensure that no updates are done to the</comment>
	<comment type="line" pos:line="208" pos:column="9">//    url while you are using it's data.  If you don't want to use this, use the methods</comment>
	<comment type="line" pos:line="209" pos:column="9">//    which copy the url data to a buffer instead (which don't require buffer locking).</comment>
	<macro><name pos:line="210" pos:column="9">MSOMETHOD_</name><argument_list pos:line="210" pos:column="19">(<argument pos:line="210" pos:column="20">void</argument>, <argument pos:line="210" pos:column="26">Lock</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="210" pos:column="32">(</op:operator><name pos:line="210" pos:column="33">THIS</name><op:operator pos:line="210" pos:column="37">)</op:operator> <name pos:line="210" pos:column="39">CONST_METHOD</name> <name pos:line="210" pos:column="52">PURE</name></expr>;</expr_stmt>
	<macro><name pos:line="211" pos:column="9">MSOMETHOD_</name><argument_list pos:line="211" pos:column="19">(<argument pos:line="211" pos:column="20">void</argument>, <argument pos:line="211" pos:column="26">Unlock</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="211" pos:column="34">(</op:operator><name pos:line="211" pos:column="35">THIS</name><op:operator pos:line="211" pos:column="39">)</op:operator> <name pos:line="211" pos:column="41">CONST_METHOD</name> <name pos:line="211" pos:column="54">PURE</name></expr>;</expr_stmt>

	<comment type="line" pos:line="213" pos:column="9">// get url methods</comment>
	<comment type="line" pos:line="214" pos:column="9">//</comment>
	<comment type="line" pos:line="215" pos:column="9">// HrGetDisplayForm - use to get the unescaped "friendly" form of a url for displaying to</comment>
	<comment type="line" pos:line="216" pos:column="9">//    the user (i.e. spaces in the url are actually spaces instead of %20s).</comment>
	<comment type="line" pos:line="217" pos:column="9">// HrGetCanonicalForm - use to get the canonical form of the url.  This is the standard</comment>
	<comment type="line" pos:line="218" pos:column="9">//    form of the url.</comment>
	<comment type="line" pos:line="219" pos:column="9">// HrGetCustomForm - use to get a url with or without certain components.  For instance,</comment>
	<comment type="line" pos:line="220" pos:column="9">//    use this when you want to get a url without a fragment (if it has one) -- you would</comment>
	<comment type="line" pos:line="221" pos:column="9">//    pass in grfurlc as (msofurlcComplete &amp; ~msofurlcFragment).  Note, this returns the</comment>
	<comment type="line" pos:line="222" pos:column="9">//    components with their associated delimiters (unlike the component access methods below).</comment>
	<comment type="line" pos:line="223" pos:column="9">//</comment>
	<comment type="line" pos:line="224" pos:column="9">// NOTE: the HrGet methods all take in a WCHAR buffer wzBuf, whose size is passed in as</comment>
	<comment type="line" pos:line="225" pos:column="9">//    the input value of pcchBuf.  The length of the url put in wzBuf is returned as the</comment>
	<comment type="line" pos:line="226" pos:column="9">//    output value of pcchBuf.  If NULL is passed in for wzBuf, then the requisite size</comment>
	<comment type="line" pos:line="227" pos:column="9">//    of wzBuf is returned in pcchBuf.  In all cases (input/output) pcchBuf is the actual</comment>
	<comment type="line" pos:line="228" pos:column="9">//    count of characters in wzBuf not including the NULL termination character.  So if</comment>
	<comment type="line" pos:line="229" pos:column="9">//    you query with NULL, you should alloc (*pcchBuf + 1) characters for wzBuf.  If wzBuf</comment>
	<comment type="line" pos:line="230" pos:column="9">//    is NULL and the function succeeds, S_FALSE is returned.  If wzBuf is non-NULL and</comment>
	<comment type="line" pos:line="231" pos:column="9">//    the function succeeds, S_OK is returned.</comment>
	<comment type="line" pos:line="232" pos:column="9">//</comment>
	<comment type="line" pos:line="233" pos:column="9">// CpGetCodePage - use to retrieve the codepage context of this url.</comment>
	<comment type="line" pos:line="234" pos:column="9">// WzCanonicalForm - returns the same value as HrGetCanonicalForm but returns an LPCWSTR</comment>
	<comment type="line" pos:line="235" pos:column="9">//    pointer to the internal buffer rather than putting it in a user specified buffer.</comment>
	<comment type="line" pos:line="236" pos:column="9">//    Useful in certain scenarios.  Url must be locked while this function is called and</comment>
	<comment type="line" pos:line="237" pos:column="9">//    while the return value is in use.  Returns NULL on error.</comment>
	<comment type="line" pos:line="238" pos:column="9">// CchCanonicalForm - returns the count of characters of the url returned by</comment>
	<comment type="line" pos:line="239" pos:column="9">//    WzCanonicalForm.</comment>
	<function_decl><type><name pos:line="240" pos:column="9">MSOMETHOD</name></type> (<name pos:line="240" pos:column="20">HrGetDisplayForm</name>) <parameter_list pos:line="240" pos:column="38">(<param><decl><type><name pos:line="240" pos:column="39">THIS_</name> <name pos:line="240" pos:column="45">WCHAR</name> <type:modifier pos:line="240" pos:column="51">*</type:modifier></type><name pos:line="240" pos:column="52">wzBuf</name></decl></param>, <param><decl><type><name pos:line="240" pos:column="59">int</name> <type:modifier pos:line="240" pos:column="63">*</type:modifier></type><name pos:line="240" pos:column="64">pcchBuf</name></decl></param>, <param><decl><type><name pos:line="240" pos:column="73">DWORD</name></type> <name pos:line="240" pos:column="79">grfurldf</name></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="240" pos:column="89">CONST_METHOD</name></type> <name pos:line="240" pos:column="102">PURE</name></decl>;</decl_stmt>
	<name pos:line="241" pos:column="9">MSOMETHOD</name> <parameter_list pos:line="241" pos:column="19">(<param><decl><type><name pos:line="241" pos:column="20">HrGetCanonicalForm</name></type></decl></param>)</parameter_list> <parameter_list pos:line="241" pos:column="40">(<param><decl><type><name pos:line="241" pos:column="41">THIS_</name> <name pos:line="241" pos:column="47">WCHAR</name> <type:modifier pos:line="241" pos:column="53">*</type:modifier></type><name pos:line="241" pos:column="54">wzBuf</name></decl></param>, <param><decl><type><name pos:line="241" pos:column="61">int</name> <type:modifier pos:line="241" pos:column="65">*</type:modifier></type><name pos:line="241" pos:column="66">pcchBuf</name></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="241" pos:column="75">CONST_METHOD</name></type> <name pos:line="241" pos:column="88">PURE</name></decl>;</decl_stmt>
	<name pos:line="242" pos:column="9">MSOMETHOD</name> <parameter_list pos:line="242" pos:column="19">(<param><decl><type><name pos:line="242" pos:column="20">HrGetCustomForm</name></type></decl></param>)</parameter_list> <parameter_list pos:line="242" pos:column="37">(<param><decl><type><name pos:line="242" pos:column="38">THIS_</name> <name pos:line="242" pos:column="44">DWORD</name></type> <name pos:line="242" pos:column="50">grfurlc</name></decl></param>, <param><decl><type><name pos:line="242" pos:column="59">WCHAR</name> <type:modifier pos:line="242" pos:column="65">*</type:modifier></type><name pos:line="242" pos:column="66">wzBuf</name></decl></param>, <param><decl><type><name pos:line="242" pos:column="73">int</name> <type:modifier pos:line="242" pos:column="77">*</type:modifier></type><name pos:line="242" pos:column="78">pcchBuf</name></decl></param>, <param><decl><type><name pos:line="242" pos:column="87">DWORD</name></type> <name pos:line="242" pos:column="93">grfurlcf</name></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="242" pos:column="103">CONST_METHOD</name></type> <name pos:line="242" pos:column="116">PURE</name></decl>;</decl_stmt>
	<name pos:line="243" pos:column="9">MSOMETHOD_</name><parameter_list pos:line="243" pos:column="19">(<param><decl><type><name pos:line="243" pos:column="20">DWORD</name></type></decl></param>, <param><decl><type><name pos:line="243" pos:column="27">CpGetCodePage</name></type></decl></param>)</parameter_list> <parameter_list pos:line="243" pos:column="42">(<param><decl><type><name pos:line="243" pos:column="43">THIS</name></type></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="243" pos:column="49">CONST_METHOD</name></type> <name pos:line="243" pos:column="62">PURE</name></decl>;</decl_stmt>
	<name pos:line="244" pos:column="9">MSOMETHOD_</name><parameter_list pos:line="244" pos:column="19">(<param><decl><type><name pos:line="244" pos:column="20">LPCWSTR</name></type></decl></param>, <param><decl><type><name pos:line="244" pos:column="29">WzCanonicalForm</name></type></decl></param>)</parameter_list> <parameter_list pos:line="244" pos:column="46">(<param><decl><type><name pos:line="244" pos:column="47">THIS</name></type></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="244" pos:column="53">CONST_METHOD</name></type> <name pos:line="244" pos:column="66">PURE</name></decl>;</decl_stmt>
	<name pos:line="245" pos:column="9">MSOMETHOD_</name><parameter_list pos:line="245" pos:column="19">(<param><decl><type><name pos:line="245" pos:column="20">int</name></type></decl></param>, <param><decl><type><name pos:line="245" pos:column="25">CchCanonicalForm</name></type></decl></param>)</parameter_list> <parameter_list pos:line="245" pos:column="43">(<param><decl><type><name pos:line="245" pos:column="44">THIS</name></type></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="245" pos:column="50">CONST_METHOD</name></type> <name pos:line="245" pos:column="63">PURE</name></decl>;</decl_stmt>

	<comment type="line" pos:line="247" pos:column="9">// component accessor methods</comment>
	<comment type="line" pos:line="248" pos:column="9">//</comment>
	<comment type="line" pos:line="249" pos:column="9">// Note: see "Basic url definition" comment above for component definitions.</comment>
	<comment type="line" pos:line="250" pos:column="9">//</comment>
	<comment type="line" pos:line="251" pos:column="9">// UrlsGetScheme - returns the scheme specified in this url as an MSOURLSCHEME.</comment>
	<comment type="line" pos:line="252" pos:column="9">// HrGetScheme - returns the scheme string (without ':' delimiter).</comment>
	<comment type="line" pos:line="253" pos:column="9">// HrGetAuthority - returns the authority string</comment>
	<comment type="line" pos:line="254" pos:column="9">//    (with all subcomponent delimiters but without initial '/' delimiters).</comment>
	<comment type="line" pos:line="255" pos:column="9">// HrGetUserName - returns the username string (without '@' delimiter).</comment>
	<comment type="line" pos:line="256" pos:column="9">// HrGetPassword - returns the password string (without ':' delimiter).</comment>
	<comment type="line" pos:line="257" pos:column="9">// HrGetServer - returns the server string.</comment>
	<comment type="line" pos:line="258" pos:column="9">// HrGetPort - returns the port string (without ':' delimiter).</comment>
	<comment type="line" pos:line="259" pos:column="9">// HrGetPath - returns the path string (with the initial '/' delimiter if this</comment>
	<comment type="line" pos:line="260" pos:column="9">//    is a hierarchical url).  This may validly return the empty string.</comment>
	<comment type="line" pos:line="261" pos:column="9">//    (Path contains Dir &amp; FileLeaf).</comment>
	<comment type="line" pos:line="262" pos:column="9">// HrGetDir - returns the dir string (with the initial '/' delimiter if this</comment>
	<comment type="line" pos:line="263" pos:column="9">//    is a hierarchical url).  This may validly return the empty string.</comment>
	<comment type="line" pos:line="264" pos:column="9">// HrGetFileLeaf - returns the file leaf string (without '/' delimeter).</comment>
	<comment type="line" pos:line="265" pos:column="9">//    (FileLeaf contains FileName &amp; FileExt).</comment>
	<comment type="line" pos:line="266" pos:column="9">// HrGetFileName - returns the file name string (without '/' delimeter).</comment>
	<comment type="line" pos:line="267" pos:column="9">// HrGetFileExt - returns the file ext string (without '.' delimiter).</comment>
	<comment type="line" pos:line="268" pos:column="9">// HrGetQuery - returns the query string (without '?' delimiter).</comment>
	<comment type="line" pos:line="269" pos:column="9">// HrGetFragment - returns the fragment string (without '#' delimiter).</comment>
	<comment type="line" pos:line="270" pos:column="9">//    (Fragment is also known as Bookmark).</comment>
	<comment type="line" pos:line="271" pos:column="9">//</comment>
	<comment type="line" pos:line="272" pos:column="9">// NOTE: see HrGet url note above for usage of the HrGet component methods.</comment>
	<comment type="line" pos:line="273" pos:column="9">//</comment>
	<comment type="line" pos:line="274" pos:column="9">// RgwchScheme - same as HrGetScheme but returns a pointer to the scheme component.</comment>
	<comment type="line" pos:line="275" pos:column="9">// RgwchAuthority - same</comment>
	<comment type="line" pos:line="276" pos:column="9">// RgwchUserName - same</comment>
	<comment type="line" pos:line="277" pos:column="9">// RgwchPassword - same</comment>
	<comment type="line" pos:line="278" pos:column="9">// RgwchServer - same</comment>
	<comment type="line" pos:line="279" pos:column="9">// RgwchPort - same</comment>
	<comment type="line" pos:line="280" pos:column="9">// RgwchPath - same</comment>
	<comment type="line" pos:line="281" pos:column="9">// RgwchDir - same</comment>
	<comment type="line" pos:line="282" pos:column="9">// RgwchFileLeaf - same</comment>
	<comment type="line" pos:line="283" pos:column="9">// RgwchFileName - same</comment>
	<comment type="line" pos:line="284" pos:column="9">// RgwchFileExt - same</comment>
	<comment type="line" pos:line="285" pos:column="9">// RgwchQuery - same</comment>
	<comment type="line" pos:line="286" pos:column="9">// RgwchFragment - same</comment>
	<comment type="line" pos:line="287" pos:column="9">//</comment>
	<comment type="line" pos:line="288" pos:column="9">// NOTE: the Rgwch returning functions all return NULL if the component does not</comment>
	<comment type="line" pos:line="289" pos:column="9">//    exist.  Param pcch is an output parameter which will contain the length of</comment>
	<comment type="line" pos:line="290" pos:column="9">//    the returned rgwch pointer.  These are not NULL terminated!</comment>
	<name pos:line="291" pos:column="9">MSOMETHOD_</name><parameter_list pos:line="291" pos:column="19">(<param><decl><type><name pos:line="291" pos:column="20">MSOURLSCHEME</name></type></decl></param>, <param><decl><type><name pos:line="291" pos:column="34">UrlsGetScheme</name></type></decl></param>)</parameter_list> <parameter_list pos:line="291" pos:column="49">(<param><decl><type><name pos:line="291" pos:column="50">THIS</name></type></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="291" pos:column="56">CONST_METHOD</name></type> <name pos:line="291" pos:column="69">PURE</name></decl>;</decl_stmt>
	<name pos:line="292" pos:column="9">MSOMETHOD</name> <parameter_list pos:line="292" pos:column="19">(<param><decl><type><name pos:line="292" pos:column="20">HrGetScheme</name></type></decl></param>)</parameter_list> <parameter_list pos:line="292" pos:column="33">(<param><decl><type><name pos:line="292" pos:column="34">THIS_</name> <name pos:line="292" pos:column="40">WCHAR</name> <type:modifier pos:line="292" pos:column="46">*</type:modifier></type><name pos:line="292" pos:column="47">wzBuf</name></decl></param>, <param><decl><type><name pos:line="292" pos:column="54">int</name> <type:modifier pos:line="292" pos:column="58">*</type:modifier></type><name pos:line="292" pos:column="59">pcchBuf</name></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="292" pos:column="68">CONST_METHOD</name></type> <name pos:line="292" pos:column="81">PURE</name></decl>;</decl_stmt>
	<name pos:line="293" pos:column="9">MSOMETHOD</name> <parameter_list pos:line="293" pos:column="19">(<param><decl><type><name pos:line="293" pos:column="20">HrGetAuthority</name></type></decl></param>)</parameter_list> <parameter_list pos:line="293" pos:column="36">(<param><decl><type><name pos:line="293" pos:column="37">THIS_</name> <name pos:line="293" pos:column="43">WCHAR</name> <type:modifier pos:line="293" pos:column="49">*</type:modifier></type><name pos:line="293" pos:column="50">wzBuf</name></decl></param>, <param><decl><type><name pos:line="293" pos:column="57">int</name> <type:modifier pos:line="293" pos:column="61">*</type:modifier></type><name pos:line="293" pos:column="62">pcchBuf</name></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="293" pos:column="71">CONST_METHOD</name></type> <name pos:line="293" pos:column="84">PURE</name></decl>;</decl_stmt>
	<name pos:line="294" pos:column="9">MSOMETHOD</name> <parameter_list pos:line="294" pos:column="19">(<param><decl><type><name pos:line="294" pos:column="20">HrGetUserName</name></type></decl></param>)</parameter_list> <parameter_list pos:line="294" pos:column="35">(<param><decl><type><name pos:line="294" pos:column="36">THIS_</name> <name pos:line="294" pos:column="42">WCHAR</name> <type:modifier pos:line="294" pos:column="48">*</type:modifier></type><name pos:line="294" pos:column="49">wzBuf</name></decl></param>, <param><decl><type><name pos:line="294" pos:column="56">int</name> <type:modifier pos:line="294" pos:column="60">*</type:modifier></type><name pos:line="294" pos:column="61">pcchBuf</name></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="294" pos:column="70">CONST_METHOD</name></type> <name pos:line="294" pos:column="83">PURE</name></decl>;</decl_stmt>
	<name pos:line="295" pos:column="9">MSOMETHOD</name> <parameter_list pos:line="295" pos:column="19">(<param><decl><type><name pos:line="295" pos:column="20">HrGetPassword</name></type></decl></param>)</parameter_list> <parameter_list pos:line="295" pos:column="35">(<param><decl><type><name pos:line="295" pos:column="36">THIS_</name> <name pos:line="295" pos:column="42">WCHAR</name> <type:modifier pos:line="295" pos:column="48">*</type:modifier></type><name pos:line="295" pos:column="49">wzBuf</name></decl></param>, <param><decl><type><name pos:line="295" pos:column="56">int</name> <type:modifier pos:line="295" pos:column="60">*</type:modifier></type><name pos:line="295" pos:column="61">pcchBuf</name></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="295" pos:column="70">CONST_METHOD</name></type> <name pos:line="295" pos:column="83">PURE</name></decl>;</decl_stmt>
	<name pos:line="296" pos:column="9">MSOMETHOD</name> <parameter_list pos:line="296" pos:column="19">(<param><decl><type><name pos:line="296" pos:column="20">HrGetServer</name></type></decl></param>)</parameter_list> <parameter_list pos:line="296" pos:column="33">(<param><decl><type><name pos:line="296" pos:column="34">THIS_</name> <name pos:line="296" pos:column="40">WCHAR</name> <type:modifier pos:line="296" pos:column="46">*</type:modifier></type><name pos:line="296" pos:column="47">wzBuf</name></decl></param>, <param><decl><type><name pos:line="296" pos:column="54">int</name> <type:modifier pos:line="296" pos:column="58">*</type:modifier></type><name pos:line="296" pos:column="59">pcchBuf</name></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="296" pos:column="68">CONST_METHOD</name></type> <name pos:line="296" pos:column="81">PURE</name></decl>;</decl_stmt>
	<name pos:line="297" pos:column="9">MSOMETHOD</name> <parameter_list pos:line="297" pos:column="19">(<param><decl><type><name pos:line="297" pos:column="20">HrGetPort</name></type></decl></param>)</parameter_list> <parameter_list pos:line="297" pos:column="31">(<param><decl><type><name pos:line="297" pos:column="32">THIS_</name> <name pos:line="297" pos:column="38">WCHAR</name> <type:modifier pos:line="297" pos:column="44">*</type:modifier></type><name pos:line="297" pos:column="45">wzBuf</name></decl></param>, <param><decl><type><name pos:line="297" pos:column="52">int</name> <type:modifier pos:line="297" pos:column="56">*</type:modifier></type><name pos:line="297" pos:column="57">pcchBuf</name></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="297" pos:column="66">CONST_METHOD</name></type> <name pos:line="297" pos:column="79">PURE</name></decl>;</decl_stmt>
	<name pos:line="298" pos:column="9">MSOMETHOD</name> <parameter_list pos:line="298" pos:column="19">(<param><decl><type><name pos:line="298" pos:column="20">HrGetPath</name></type></decl></param>)</parameter_list> <parameter_list pos:line="298" pos:column="31">(<param><decl><type><name pos:line="298" pos:column="32">THIS_</name> <name pos:line="298" pos:column="38">WCHAR</name> <type:modifier pos:line="298" pos:column="44">*</type:modifier></type><name pos:line="298" pos:column="45">wzBuf</name></decl></param>, <param><decl><type><name pos:line="298" pos:column="52">int</name> <type:modifier pos:line="298" pos:column="56">*</type:modifier></type><name pos:line="298" pos:column="57">pcchBuf</name></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="298" pos:column="66">CONST_METHOD</name></type> <name pos:line="298" pos:column="79">PURE</name></decl>;</decl_stmt>
	<name pos:line="299" pos:column="9">MSOMETHOD</name> <parameter_list pos:line="299" pos:column="19">(<param><decl><type><name pos:line="299" pos:column="20">HrGetDir</name></type></decl></param>)</parameter_list> <parameter_list pos:line="299" pos:column="30">(<param><decl><type><name pos:line="299" pos:column="31">THIS_</name> <name pos:line="299" pos:column="37">WCHAR</name> <type:modifier pos:line="299" pos:column="43">*</type:modifier></type><name pos:line="299" pos:column="44">wzBuf</name></decl></param>, <param><decl><type><name pos:line="299" pos:column="51">int</name> <type:modifier pos:line="299" pos:column="55">*</type:modifier></type><name pos:line="299" pos:column="56">pcchBuf</name></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="299" pos:column="65">CONST_METHOD</name></type> <name pos:line="299" pos:column="78">PURE</name></decl>;</decl_stmt>
	<name pos:line="300" pos:column="9">MSOMETHOD</name> <parameter_list pos:line="300" pos:column="19">(<param><decl><type><name pos:line="300" pos:column="20">HrGetFileLeaf</name></type></decl></param>)</parameter_list> <parameter_list pos:line="300" pos:column="35">(<param><decl><type><name pos:line="300" pos:column="36">THIS_</name> <name pos:line="300" pos:column="42">WCHAR</name> <type:modifier pos:line="300" pos:column="48">*</type:modifier></type><name pos:line="300" pos:column="49">wzBuf</name></decl></param>, <param><decl><type><name pos:line="300" pos:column="56">int</name> <type:modifier pos:line="300" pos:column="60">*</type:modifier></type><name pos:line="300" pos:column="61">pcchBuf</name></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="300" pos:column="70">CONST_METHOD</name></type> <name pos:line="300" pos:column="83">PURE</name></decl>;</decl_stmt>
	<name pos:line="301" pos:column="9">MSOMETHOD</name> <parameter_list pos:line="301" pos:column="19">(<param><decl><type><name pos:line="301" pos:column="20">HrGetFileName</name></type></decl></param>)</parameter_list> <parameter_list pos:line="301" pos:column="35">(<param><decl><type><name pos:line="301" pos:column="36">THIS_</name> <name pos:line="301" pos:column="42">WCHAR</name> <type:modifier pos:line="301" pos:column="48">*</type:modifier></type><name pos:line="301" pos:column="49">wzBuf</name></decl></param>, <param><decl><type><name pos:line="301" pos:column="56">int</name> <type:modifier pos:line="301" pos:column="60">*</type:modifier></type><name pos:line="301" pos:column="61">pcchBuf</name></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="301" pos:column="70">CONST_METHOD</name></type> <name pos:line="301" pos:column="83">PURE</name></decl>;</decl_stmt>
	<name pos:line="302" pos:column="9">MSOMETHOD</name> <parameter_list pos:line="302" pos:column="19">(<param><decl><type><name pos:line="302" pos:column="20">HrGetFileExt</name></type></decl></param>)</parameter_list> <parameter_list pos:line="302" pos:column="34">(<param><decl><type><name pos:line="302" pos:column="35">THIS_</name> <name pos:line="302" pos:column="41">WCHAR</name> <type:modifier pos:line="302" pos:column="47">*</type:modifier></type><name pos:line="302" pos:column="48">wzBuf</name></decl></param>, <param><decl><type><name pos:line="302" pos:column="55">int</name> <type:modifier pos:line="302" pos:column="59">*</type:modifier></type><name pos:line="302" pos:column="60">pcchBuf</name></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="302" pos:column="69">CONST_METHOD</name></type> <name pos:line="302" pos:column="82">PURE</name></decl>;</decl_stmt>
	<name pos:line="303" pos:column="9">MSOMETHOD</name> <parameter_list pos:line="303" pos:column="19">(<param><decl><type><name pos:line="303" pos:column="20">HrGetQuery</name></type></decl></param>)</parameter_list> <parameter_list pos:line="303" pos:column="32">(<param><decl><type><name pos:line="303" pos:column="33">THIS_</name> <name pos:line="303" pos:column="39">WCHAR</name> <type:modifier pos:line="303" pos:column="45">*</type:modifier></type><name pos:line="303" pos:column="46">wzBuf</name></decl></param>, <param><decl><type><name pos:line="303" pos:column="53">int</name> <type:modifier pos:line="303" pos:column="57">*</type:modifier></type><name pos:line="303" pos:column="58">pcchBuf</name></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="303" pos:column="67">CONST_METHOD</name></type> <name pos:line="303" pos:column="80">PURE</name></decl>;</decl_stmt>
	<name pos:line="304" pos:column="9">MSOMETHOD</name> <parameter_list pos:line="304" pos:column="19">(<param><decl><type><name pos:line="304" pos:column="20">HrGetFragment</name></type></decl></param>)</parameter_list> <parameter_list pos:line="304" pos:column="35">(<param><decl><type><name pos:line="304" pos:column="36">THIS_</name> <name pos:line="304" pos:column="42">WCHAR</name> <type:modifier pos:line="304" pos:column="48">*</type:modifier></type><name pos:line="304" pos:column="49">wzBuf</name></decl></param>, <param><decl><type><name pos:line="304" pos:column="56">int</name> <type:modifier pos:line="304" pos:column="60">*</type:modifier></type><name pos:line="304" pos:column="61">pcchBuf</name></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="304" pos:column="70">CONST_METHOD</name></type> <name pos:line="304" pos:column="83">PURE</name></decl>;</decl_stmt>
	<name pos:line="305" pos:column="9">MSOMETHOD_</name><parameter_list pos:line="305" pos:column="19">(<param><decl><type><name pos:line="305" pos:column="20">LPCWSTR</name></type></decl></param>, <param><decl><type><name pos:line="305" pos:column="29">RgwchScheme</name></type></decl></param>)</parameter_list> <parameter_list pos:line="305" pos:column="42">(<param><decl><type><name pos:line="305" pos:column="43">THIS_</name> <name pos:line="305" pos:column="49">int</name> <type:modifier pos:line="305" pos:column="53">*</type:modifier></type><name pos:line="305" pos:column="54">pcch</name></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="305" pos:column="60">CONST_METHOD</name></type> <name pos:line="305" pos:column="73">PURE</name></decl>;</decl_stmt>
	<name pos:line="306" pos:column="9">MSOMETHOD_</name><parameter_list pos:line="306" pos:column="19">(<param><decl><type><name pos:line="306" pos:column="20">LPCWSTR</name></type></decl></param>, <param><decl><type><name pos:line="306" pos:column="29">RgwchAuthority</name></type></decl></param>)</parameter_list> <parameter_list pos:line="306" pos:column="45">(<param><decl><type><name pos:line="306" pos:column="46">THIS_</name> <name pos:line="306" pos:column="52">int</name> <type:modifier pos:line="306" pos:column="56">*</type:modifier></type><name pos:line="306" pos:column="57">pcch</name></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="306" pos:column="63">CONST_METHOD</name></type> <name pos:line="306" pos:column="76">PURE</name></decl>;</decl_stmt>
	<name pos:line="307" pos:column="9">MSOMETHOD_</name><parameter_list pos:line="307" pos:column="19">(<param><decl><type><name pos:line="307" pos:column="20">LPCWSTR</name></type></decl></param>, <param><decl><type><name pos:line="307" pos:column="29">RgwchUserName</name></type></decl></param>)</parameter_list> <parameter_list pos:line="307" pos:column="44">(<param><decl><type><name pos:line="307" pos:column="45">THIS_</name> <name pos:line="307" pos:column="51">int</name> <type:modifier pos:line="307" pos:column="55">*</type:modifier></type><name pos:line="307" pos:column="56">pcch</name></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="307" pos:column="62">CONST_METHOD</name></type> <name pos:line="307" pos:column="75">PURE</name></decl>;</decl_stmt>
	<name pos:line="308" pos:column="9">MSOMETHOD_</name><parameter_list pos:line="308" pos:column="19">(<param><decl><type><name pos:line="308" pos:column="20">LPCWSTR</name></type></decl></param>, <param><decl><type><name pos:line="308" pos:column="29">RgwchPassword</name></type></decl></param>)</parameter_list> <parameter_list pos:line="308" pos:column="44">(<param><decl><type><name pos:line="308" pos:column="45">THIS_</name> <name pos:line="308" pos:column="51">int</name> <type:modifier pos:line="308" pos:column="55">*</type:modifier></type><name pos:line="308" pos:column="56">pcch</name></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="308" pos:column="62">CONST_METHOD</name></type> <name pos:line="308" pos:column="75">PURE</name></decl>;</decl_stmt>
	<name pos:line="309" pos:column="9">MSOMETHOD_</name><parameter_list pos:line="309" pos:column="19">(<param><decl><type><name pos:line="309" pos:column="20">LPCWSTR</name></type></decl></param>, <param><decl><type><name pos:line="309" pos:column="29">RgwchServer</name></type></decl></param>)</parameter_list> <parameter_list pos:line="309" pos:column="42">(<param><decl><type><name pos:line="309" pos:column="43">THIS_</name> <name pos:line="309" pos:column="49">int</name> <type:modifier pos:line="309" pos:column="53">*</type:modifier></type><name pos:line="309" pos:column="54">pcch</name></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="309" pos:column="60">CONST_METHOD</name></type> <name pos:line="309" pos:column="73">PURE</name></decl>;</decl_stmt>
	<name pos:line="310" pos:column="9">MSOMETHOD_</name><parameter_list pos:line="310" pos:column="19">(<param><decl><type><name pos:line="310" pos:column="20">LPCWSTR</name></type></decl></param>, <param><decl><type><name pos:line="310" pos:column="29">RgwchPort</name></type></decl></param>)</parameter_list> <parameter_list pos:line="310" pos:column="40">(<param><decl><type><name pos:line="310" pos:column="41">THIS_</name> <name pos:line="310" pos:column="47">int</name> <type:modifier pos:line="310" pos:column="51">*</type:modifier></type><name pos:line="310" pos:column="52">pcch</name></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="310" pos:column="58">CONST_METHOD</name></type> <name pos:line="310" pos:column="71">PURE</name></decl>;</decl_stmt>
	<name pos:line="311" pos:column="9">MSOMETHOD_</name><parameter_list pos:line="311" pos:column="19">(<param><decl><type><name pos:line="311" pos:column="20">LPCWSTR</name></type></decl></param>, <param><decl><type><name pos:line="311" pos:column="29">RgwchPath</name></type></decl></param>)</parameter_list> <parameter_list pos:line="311" pos:column="40">(<param><decl><type><name pos:line="311" pos:column="41">THIS_</name> <name pos:line="311" pos:column="47">int</name> <type:modifier pos:line="311" pos:column="51">*</type:modifier></type><name pos:line="311" pos:column="52">pcch</name></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="311" pos:column="58">CONST_METHOD</name></type> <name pos:line="311" pos:column="71">PURE</name></decl>;</decl_stmt>
	<name pos:line="312" pos:column="9">MSOMETHOD_</name><parameter_list pos:line="312" pos:column="19">(<param><decl><type><name pos:line="312" pos:column="20">LPCWSTR</name></type></decl></param>, <param><decl><type><name pos:line="312" pos:column="29">RgwchDir</name></type></decl></param>)</parameter_list> <parameter_list pos:line="312" pos:column="39">(<param><decl><type><name pos:line="312" pos:column="40">THIS_</name> <name pos:line="312" pos:column="46">int</name> <type:modifier pos:line="312" pos:column="50">*</type:modifier></type><name pos:line="312" pos:column="51">pcch</name></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="312" pos:column="57">CONST_METHOD</name></type> <name pos:line="312" pos:column="70">PURE</name></decl>;</decl_stmt>
	<name pos:line="313" pos:column="9">MSOMETHOD_</name><parameter_list pos:line="313" pos:column="19">(<param><decl><type><name pos:line="313" pos:column="20">LPCWSTR</name></type></decl></param>, <param><decl><type><name pos:line="313" pos:column="29">RgwchFileLeaf</name></type></decl></param>)</parameter_list> <parameter_list pos:line="313" pos:column="44">(<param><decl><type><name pos:line="313" pos:column="45">THIS_</name> <name pos:line="313" pos:column="51">int</name> <type:modifier pos:line="313" pos:column="55">*</type:modifier></type><name pos:line="313" pos:column="56">pcch</name></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="313" pos:column="62">CONST_METHOD</name></type> <name pos:line="313" pos:column="75">PURE</name></decl>;</decl_stmt>
	<name pos:line="314" pos:column="9">MSOMETHOD_</name><parameter_list pos:line="314" pos:column="19">(<param><decl><type><name pos:line="314" pos:column="20">LPCWSTR</name></type></decl></param>, <param><decl><type><name pos:line="314" pos:column="29">RgwchFileName</name></type></decl></param>)</parameter_list> <parameter_list pos:line="314" pos:column="44">(<param><decl><type><name pos:line="314" pos:column="45">THIS_</name> <name pos:line="314" pos:column="51">int</name> <type:modifier pos:line="314" pos:column="55">*</type:modifier></type><name pos:line="314" pos:column="56">pcch</name></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="314" pos:column="62">CONST_METHOD</name></type> <name pos:line="314" pos:column="75">PURE</name></decl>;</decl_stmt>
	<name pos:line="315" pos:column="9">MSOMETHOD_</name><parameter_list pos:line="315" pos:column="19">(<param><decl><type><name pos:line="315" pos:column="20">LPCWSTR</name></type></decl></param>, <param><decl><type><name pos:line="315" pos:column="29">RgwchFileExt</name></type></decl></param>)</parameter_list> <parameter_list pos:line="315" pos:column="43">(<param><decl><type><name pos:line="315" pos:column="44">THIS_</name> <name pos:line="315" pos:column="50">int</name> <type:modifier pos:line="315" pos:column="54">*</type:modifier></type><name pos:line="315" pos:column="55">pcch</name></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="315" pos:column="61">CONST_METHOD</name></type> <name pos:line="315" pos:column="74">PURE</name></decl>;</decl_stmt>
	<name pos:line="316" pos:column="9">MSOMETHOD_</name><parameter_list pos:line="316" pos:column="19">(<param><decl><type><name pos:line="316" pos:column="20">LPCWSTR</name></type></decl></param>, <param><decl><type><name pos:line="316" pos:column="29">RgwchQuery</name></type></decl></param>)</parameter_list> <parameter_list pos:line="316" pos:column="41">(<param><decl><type><name pos:line="316" pos:column="42">THIS_</name> <name pos:line="316" pos:column="48">int</name> <type:modifier pos:line="316" pos:column="52">*</type:modifier></type><name pos:line="316" pos:column="53">pcch</name></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="316" pos:column="59">CONST_METHOD</name></type> <name pos:line="316" pos:column="72">PURE</name></decl>;</decl_stmt>
	<name pos:line="317" pos:column="9">MSOMETHOD_</name><parameter_list pos:line="317" pos:column="19">(<param><decl><type><name pos:line="317" pos:column="20">LPCWSTR</name></type></decl></param>, <param><decl><type><name pos:line="317" pos:column="29">RgwchFragment</name></type></decl></param>)</parameter_list> <parameter_list pos:line="317" pos:column="44">(<param><decl><type><name pos:line="317" pos:column="45">THIS_</name> <name pos:line="317" pos:column="51">int</name> <type:modifier pos:line="317" pos:column="55">*</type:modifier></type><name pos:line="317" pos:column="56">pcch</name></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="317" pos:column="62">CONST_METHOD</name></type> <name pos:line="317" pos:column="75">PURE</name></decl>;</decl_stmt>

	<comment type="line" pos:line="319" pos:column="9">// helper functions for file management</comment>
	<comment type="line" pos:line="320" pos:column="9">//</comment>
	<comment type="line" pos:line="321" pos:column="9">// FIsHttp - does the url point to a http or https address?</comment>
	<comment type="line" pos:line="322" pos:column="9">// FIsFtp - does the url point to a ftp address?</comment>
	<comment type="line" pos:line="323" pos:column="9">// FIsLocal - does the url point to a dos addressable file address</comment>
	<comment type="line" pos:line="324" pos:column="9">//            (local drive, mapped drive or UNC drive)?</comment>
	<comment type="line" pos:line="325" pos:column="9">// FIsUNC - does the url point to a UNC file address?</comment>
	<comment type="line" pos:line="326" pos:column="9">// FIsODMA - does the url point to an ODMA path identifier?</comment>
	<name pos:line="327" pos:column="9">MSOMETHOD_</name><parameter_list pos:line="327" pos:column="19">(<param><decl><type><name pos:line="327" pos:column="20">BOOL</name></type></decl></param>, <param><decl><type><name pos:line="327" pos:column="26">FIsHttp</name></type></decl></param>)</parameter_list> <parameter_list pos:line="327" pos:column="35">(<param><decl><type><name pos:line="327" pos:column="36">THIS</name></type></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="327" pos:column="42">CONST_METHOD</name></type> <name pos:line="327" pos:column="55">PURE</name></decl>;</decl_stmt>
	<name pos:line="328" pos:column="9">MSOMETHOD_</name><parameter_list pos:line="328" pos:column="19">(<param><decl><type><name pos:line="328" pos:column="20">BOOL</name></type></decl></param>, <param><decl><type><name pos:line="328" pos:column="26">FIsFtp</name></type></decl></param>)</parameter_list> <parameter_list pos:line="328" pos:column="34">(<param><decl><type><name pos:line="328" pos:column="35">THIS</name></type></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="328" pos:column="41">CONST_METHOD</name></type> <name pos:line="328" pos:column="54">PURE</name></decl>;</decl_stmt>
	<name pos:line="329" pos:column="9">MSOMETHOD_</name><parameter_list pos:line="329" pos:column="19">(<param><decl><type><name pos:line="329" pos:column="20">BOOL</name></type></decl></param>, <param><decl><type><name pos:line="329" pos:column="26">FIsLocal</name></type></decl></param>)</parameter_list> <parameter_list pos:line="329" pos:column="36">(<param><decl><type><name pos:line="329" pos:column="37">THIS</name></type></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="329" pos:column="43">CONST_METHOD</name></type> <name pos:line="329" pos:column="56">PURE</name></decl>;</decl_stmt>
	<name pos:line="330" pos:column="9">MSOMETHOD_</name><parameter_list pos:line="330" pos:column="19">(<param><decl><type><name pos:line="330" pos:column="20">BOOL</name></type></decl></param>, <param><decl><type><name pos:line="330" pos:column="26">FIsUNC</name></type></decl></param>)</parameter_list> <parameter_list pos:line="330" pos:column="34">(<param><decl><type><name pos:line="330" pos:column="35">THIS</name></type></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="330" pos:column="41">CONST_METHOD</name></type> <name pos:line="330" pos:column="54">PURE</name></decl>;</decl_stmt>
	<name pos:line="331" pos:column="9">MSOMETHOD_</name><parameter_list pos:line="331" pos:column="19">(<param><decl><type><name pos:line="331" pos:column="20">BOOL</name></type></decl></param>, <param><decl><type><name pos:line="331" pos:column="26">FIsODMA</name></type></decl></param>)</parameter_list> <parameter_list pos:line="331" pos:column="35">(<param><decl><type><name pos:line="331" pos:column="36">THIS</name></type></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="331" pos:column="42">CONST_METHOD</name></type> <name pos:line="331" pos:column="55">PURE</name></decl>;</decl_stmt>

	<comment type="line" pos:line="333" pos:column="9">// local path accessor methods (only work for file: url's)</comment>
	<comment type="line" pos:line="334" pos:column="9">//</comment>
	<comment type="line" pos:line="335" pos:column="9">// HrGetLocalPath - returns the dos path form of the file: url.  Returns error</comment>
	<comment type="line" pos:line="336" pos:column="9">//    if the url is not a file: url.  Behaves the same as HrGet url methods.</comment>
	<comment type="line" pos:line="337" pos:column="9">// WzLocalPath - returns a pointer to the dos path form of the file: url.  Returns NULL</comment>
	<comment type="line" pos:line="338" pos:column="9">//    if the url is not a file: url.  Behaves the same as WzCanonicalForm.</comment>
	<comment type="line" pos:line="339" pos:column="9">// CchLocalPath - returns the count of characters of the dos path returned by</comment>
	<comment type="line" pos:line="340" pos:column="9">//    WzLocalPath.</comment>
	<comment type="line" pos:line="341" pos:column="9">//</comment>
	<comment type="line" pos:line="342" pos:column="9">// EXAMPLE 1: "file://c:/mumble/woo.hoo" yields "c:\mumble\woo.hoo".</comment>
	<comment type="line" pos:line="343" pos:column="9">// EXAMPLE 2: "file://server/share/mumble/woo.hoo" yields "\\server\share\mumble\woo.hoo".</comment>
	<name pos:line="344" pos:column="9">MSOMETHOD</name> <parameter_list pos:line="344" pos:column="19">(<param><decl><type><name pos:line="344" pos:column="20">HrGetLocalPath</name></type></decl></param>)</parameter_list> <parameter_list pos:line="344" pos:column="36">(<param><decl><type><name pos:line="344" pos:column="37">THIS_</name> <name pos:line="344" pos:column="43">WCHAR</name> <type:modifier pos:line="344" pos:column="49">*</type:modifier></type><name pos:line="344" pos:column="50">wzBuf</name></decl></param>, <param><decl><type><name pos:line="344" pos:column="57">int</name> <type:modifier pos:line="344" pos:column="61">*</type:modifier></type><name pos:line="344" pos:column="62">pcchBuf</name></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="344" pos:column="71">CONST_METHOD</name></type> <name pos:line="344" pos:column="84">PURE</name></decl>;</decl_stmt>
	<name pos:line="345" pos:column="9">MSOMETHOD_</name><parameter_list pos:line="345" pos:column="19">(<param><decl><type><name pos:line="345" pos:column="20">LPCWSTR</name></type></decl></param>, <param><decl><type><name pos:line="345" pos:column="29">WzLocalPath</name></type></decl></param>)</parameter_list> <parameter_list pos:line="345" pos:column="42">(<param><decl><type><name pos:line="345" pos:column="43">THIS</name></type></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="345" pos:column="49">CONST_METHOD</name></type> <name pos:line="345" pos:column="62">PURE</name></decl>;</decl_stmt>
	<name pos:line="346" pos:column="9">MSOMETHOD_</name><parameter_list pos:line="346" pos:column="19">(<param><decl><type><name pos:line="346" pos:column="20">int</name></type></decl></param>, <param><decl><type><name pos:line="346" pos:column="25">CchLocalPath</name></type></decl></param>)</parameter_list> <parameter_list pos:line="346" pos:column="39">(<param><decl><type><name pos:line="346" pos:column="40">THIS</name></type></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="346" pos:column="46">CONST_METHOD</name></type> <name pos:line="346" pos:column="59">PURE</name></decl>;</decl_stmt>

	<comment type="line" pos:line="348" pos:column="9">// FIsEqual - returns TRUE iff the given url is equivalent to this url.</comment>
	<comment type="line" pos:line="349" pos:column="9">//    (Equivalent to calling FComponentsAreEqual with grfurlc as msofurlcComplete).</comment>
	<name pos:line="350" pos:column="9">MSOMETHOD_</name><parameter_list pos:line="350" pos:column="19">(<param><decl><type><name pos:line="350" pos:column="20">BOOL</name></type></decl></param>, <param><decl><type><name pos:line="350" pos:column="26">FIsEqual</name></type></decl></param>)</parameter_list> <parameter_list pos:line="350" pos:column="36">(<param><decl><type><name pos:line="350" pos:column="37">THIS_</name> <specifier pos:line="350" pos:column="43">const</specifier> <name pos:line="350" pos:column="49">IMsoUrl</name> <type:modifier pos:line="350" pos:column="57">*</type:modifier></type><name pos:line="350" pos:column="58">piurl</name></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="350" pos:column="65">CONST_METHOD</name></type> <name pos:line="350" pos:column="78">PURE</name></decl>;</decl_stmt>

	<comment type="line" pos:line="352" pos:column="9">// FComponentsAreEqual - returns TRUE iff the components specifed in grfurlc are equivalent</comment>
	<comment type="line" pos:line="353" pos:column="9">//    in this url and the given url.</comment>
	<name pos:line="354" pos:column="9">MSOMETHOD_</name><parameter_list pos:line="354" pos:column="19">(<param><decl><type><name pos:line="354" pos:column="20">BOOL</name></type></decl></param>, <param><decl><type><name pos:line="354" pos:column="26">FComponentsAreEqual</name></type></decl></param>)</parameter_list> <parameter_list pos:line="354" pos:column="47">(<param><decl><type><name pos:line="354" pos:column="48">THIS_</name> <name pos:line="354" pos:column="54">DWORD</name></type> <name pos:line="354" pos:column="60">grfurlc</name></decl></param>, <param><decl><type><specifier pos:line="354" pos:column="69">const</specifier> <name pos:line="354" pos:column="75">IMsoUrl</name> <type:modifier pos:line="354" pos:column="83">*</type:modifier></type><name pos:line="354" pos:column="84">piurl</name></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="354" pos:column="91">CONST_METHOD</name></type> <name pos:line="354" pos:column="104">PURE</name></decl>;</decl_stmt>

	<comment type="line" pos:line="356" pos:column="9">// FSubsumes - returns TRUE iff this url's folder location is a direct</comment>
	<comment type="line" pos:line="357" pos:column="9">//    hierarchical ancestor of piurl.  If two url's subsume each other, they point to</comment>
	<comment type="line" pos:line="358" pos:column="9">//    the same folder location!</comment>
	<comment type="line" pos:line="359" pos:column="9">//</comment>
	<comment type="line" pos:line="360" pos:column="9">// EXAMPLE 1: "http://mumble/woo/blah.htm" subsumes "http://mumble/woo/hoo/wunder.bar".</comment>
	<comment type="line" pos:line="361" pos:column="9">// EXAMPLE 2: "http://mumble/woo/hoo/wunder.bar" does not subsume "http://mumble/woo/blah.htm".</comment>
	<comment type="line" pos:line="362" pos:column="9">// EXAMPLE 3: "http://mumble/woo/blah.htm" does not subsume "ftp://foobarbaz/woo/hoo/wunder.bar".</comment>
	<comment type="line" pos:line="363" pos:column="9">// EXAMPLE 4: "http://mumble/woo/hoo/blah.htm" does not subsume "http://mumble/woo/zoo/foo.gif".</comment>
	<name pos:line="364" pos:column="9">MSOMETHOD_</name><parameter_list pos:line="364" pos:column="19">(<param><decl><type><name pos:line="364" pos:column="20">BOOL</name></type></decl></param>, <param><decl><type><name pos:line="364" pos:column="26">FSubsumes</name></type></decl></param>)</parameter_list> <parameter_list pos:line="364" pos:column="37">(<param><decl><type><name pos:line="364" pos:column="38">THIS_</name> <specifier pos:line="364" pos:column="44">const</specifier> <name pos:line="364" pos:column="50">IMsoUrl</name> <type:modifier pos:line="364" pos:column="58">*</type:modifier></type><name pos:line="364" pos:column="59">piurl</name></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="364" pos:column="66">CONST_METHOD</name></type> <name pos:line="364" pos:column="79">PURE</name></decl>;</decl_stmt>

	<comment type="line" pos:line="366" pos:column="9">// UrlrGetRelativity - returns the relativity of this url as an MSOURLRELATIVITY.</comment>
	<name pos:line="367" pos:column="9">MSOMETHOD_</name><parameter_list pos:line="367" pos:column="19">(<param><decl><type><name pos:line="367" pos:column="20">MSOURLRELATIVITY</name></type></decl></param>, <param><decl><type><name pos:line="367" pos:column="38">UrlrGetRelativity</name></type></decl></param>)</parameter_list> <parameter_list pos:line="367" pos:column="57">(<param><decl><type><name pos:line="367" pos:column="58">THIS</name></type></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="367" pos:column="64">CONST_METHOD</name></type> <name pos:line="367" pos:column="77">PURE</name></decl>;</decl_stmt>

	<comment type="line" pos:line="369" pos:column="9">// HrSetRelativity - updates the relativity of this url.  Returns S_OK when the</comment>
	<comment type="line" pos:line="370" pos:column="9">//    url is successfully updated or S_FALSE if the requested url cannot be set</comment>
	<comment type="line" pos:line="371" pos:column="9">//    because the base url's server or scheme is different.  Returns error codes</comment>
	<comment type="line" pos:line="372" pos:column="9">//    for other failures.</comment>
	<name pos:line="373" pos:column="9">MSOMETHOD</name> <parameter_list pos:line="373" pos:column="19">(<param><decl><type><name pos:line="373" pos:column="20">HrSetRelativity</name></type></decl></param>)</parameter_list> <parameter_list pos:line="373" pos:column="37">(<param><decl><type><name pos:line="373" pos:column="38">THIS_</name> <name pos:line="373" pos:column="44">MSOURLRELATIVITY</name></type> <name pos:line="373" pos:column="61">urlr</name></decl></param>)</parameter_list> <name pos:line="373" pos:column="67">PURE</name>;</function_decl>

	<comment type="line" pos:line="375" pos:column="9">// HrResolve - resolves this relative url to a full path (by combining it with its base),</comment>
	<comment type="line" pos:line="376" pos:column="9">//    creates a new url and returns it in ppiurlAbsolute.  On success,</comment>
	<comment type="line" pos:line="377" pos:column="9">//    *ppiurlAbsolute must be Released by the client when done.  Calling this on an</comment>
	<comment type="line" pos:line="378" pos:column="9">//    absolute or opaque url is valid.</comment>
	<comment type="line" pos:line="379" pos:column="9">//</comment>
	<comment type="line" pos:line="380" pos:column="9">// EXAMPLE 1: this url "foo.bar" combined with base "http://woohoo/sub/hub/spiffy.htm"</comment>
	<comment type="line" pos:line="381" pos:column="9">//    yields resolved path "http://woohoo/sub/hub/foo.bar".</comment>
	<comment type="line" pos:line="382" pos:column="9">// EXAMPLE 2: this url "/foo.bar" combined with base "http://woohoo/sub/hub/spiffy.htm"</comment>
	<comment type="line" pos:line="383" pos:column="9">//    yields resolved path "http://woohoo/foo.bar".</comment>
	<comment type="line" pos:line="384" pos:column="9">// EXAMPLE 3: this url "../foo.bar" combined with base "http://woohoo/sub/hub/spiffy.htm"</comment>
	<comment type="line" pos:line="385" pos:column="9">//    yields resolved path "http://woohoo/sub/foo.bar".</comment>
	<function_decl><type><name pos:line="386" pos:column="9">MSOMETHOD</name></type> (<name pos:line="386" pos:column="20">HrResolve</name>) <parameter_list pos:line="386" pos:column="31">(<param><decl><type><name pos:line="386" pos:column="32">THIS_</name> <name pos:line="386" pos:column="38">IMsoUrl</name> <type:modifier pos:line="386" pos:column="46">*</type:modifier><type:modifier pos:line="386" pos:column="47">*</type:modifier></type><name pos:line="386" pos:column="48">ppiurlAbsolute</name></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="386" pos:column="64">CONST_METHOD</name></type> <name pos:line="386" pos:column="77">PURE</name></decl>;</decl_stmt>

	<comment type="line" pos:line="388" pos:column="9">// HrRebase - rebase this url with a different base url (i.e. link fixup).</comment>
	<comment type="line" pos:line="389" pos:column="9">//    If the new base url is on a different server this just makes the url absolute.</comment>
	<comment type="line" pos:line="390" pos:column="9">//    Otherwise it maintains the current relativity state and constructs a new</comment>
	<comment type="line" pos:line="391" pos:column="9">//    relative url pointing at the same target location.  If the relativity state</comment>
	<comment type="line" pos:line="392" pos:column="9">//    was not maintainable, it returns S_FALSE on success.</comment>
	<comment type="line" pos:line="393" pos:column="9">//</comment>
	<comment type="line" pos:line="394" pos:column="9">// EXAMPLE 1: this url "foo.bar" with old base "http://woohoo/sub/hub/spiffy.htm"</comment>
	<comment type="line" pos:line="395" pos:column="9">//    rebased with new base "http://woohoo/sub/spiffy.htm"</comment>
	<comment type="line" pos:line="396" pos:column="9">//    yields this url "hub/foo.bar".</comment>
	<comment type="line" pos:line="397" pos:column="9">// EXAMPLE 2: this url "../foo.bar" with old base "http://woohoo/sub/hub/spiffy.htm"</comment>
	<comment type="line" pos:line="398" pos:column="9">//    rebased with new base "http://woohoo/sub/spiffy.htm"</comment>
	<comment type="line" pos:line="399" pos:column="9">//    yields this url "foo.bar".</comment>
	<comment type="line" pos:line="400" pos:column="9">// EXAMPLE 3: this url "/foo.bar" with old base "http://woohoo/sub/hub/spiffy.htm"</comment>
	<comment type="line" pos:line="401" pos:column="9">//    rebased with new base "http://woohoo/sub/spiffy.htm"</comment>
	<comment type="line" pos:line="402" pos:column="9">//    yields this url "/foo.bar".</comment>
	<comment type="line" pos:line="403" pos:column="9">// EXAMPLE 4: this url "foo.bar" with old base "http://woohoo/sub/hub/spiffy.htm"</comment>
	<comment type="line" pos:line="404" pos:column="9">//    rebased with new base "http://mumble/spiffy.htm"</comment>
	<comment type="line" pos:line="405" pos:column="9">//    yields this url "http://woohoo/sub/hub/foo.bar".</comment>
	<name pos:line="406" pos:column="9">MSOMETHOD</name> <parameter_list pos:line="406" pos:column="19">(<param><decl><type><name pos:line="406" pos:column="20">HrRebase</name></type></decl></param>)</parameter_list> <parameter_list pos:line="406" pos:column="30">(<param><decl><type><name pos:line="406" pos:column="31">THIS_</name> <specifier pos:line="406" pos:column="37">const</specifier> <name pos:line="406" pos:column="43">IMsoUrl</name> <type:modifier pos:line="406" pos:column="51">*</type:modifier></type><name pos:line="406" pos:column="52">piurlBase</name></decl></param>)</parameter_list> <name pos:line="406" pos:column="63">PURE</name>;</function_decl>

	<comment type="line" pos:line="408" pos:column="9">// HrDownload - downloads this url for local data access.  On success, returns the</comment>
	<comment type="line" pos:line="409" pos:column="9">//    local path to the downloaded file in wzBuf.  The size of wzBuf is the</comment>
	<comment type="line" pos:line="410" pos:column="9">//    input value of pcchBuf, the length of the path put into wzBuf is the</comment>
	<comment type="line" pos:line="411" pos:column="9">//    output value of pcchBuf.  The grfurld param is a set of flags used to</comment>
	<comment type="line" pos:line="412" pos:column="9">//    control the download (default is 0).</comment>
	<function_decl><type><name pos:line="413" pos:column="9">MSOMETHOD</name></type> (<name pos:line="413" pos:column="20">HrDownload</name>) <parameter_list pos:line="413" pos:column="32">(<param><decl><type><name pos:line="413" pos:column="33">THIS_</name> <name pos:line="413" pos:column="39">WCHAR</name> <type:modifier pos:line="413" pos:column="45">*</type:modifier></type><name pos:line="413" pos:column="46">wzBuf</name></decl></param>, <param><decl><type><name pos:line="413" pos:column="53">int</name> <type:modifier pos:line="413" pos:column="57">*</type:modifier></type><name pos:line="413" pos:column="58">pcchBuf</name></decl></param>, <param><decl><type><name pos:line="413" pos:column="67">DWORD</name></type> <name pos:line="413" pos:column="73">grfurld</name></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="413" pos:column="82">CONST_METHOD</name></type> <name pos:line="413" pos:column="95">PURE</name></decl>;</decl_stmt>

	<comment type="line" pos:line="415" pos:column="9">// HrUpload - uploads the file specified in wzFile to the location specified</comment>
	<comment type="line" pos:line="416" pos:column="9">//    by this url.  The grfurlu param is a set of flags used to control the</comment>
	<comment type="line" pos:line="417" pos:column="9">//    upload (default is 0).</comment>
	<comment type="line" pos:line="418" pos:column="9">//    Returns:</comment>
	<comment type="line" pos:line="419" pos:column="9">//      S_OK    if the file was uploaded successfuly</comment>
	<comment type="line" pos:line="420" pos:column="9">//      S_FALSE if the user cancel the operation (for example, he/she doesn't </comment>
	<comment type="line" pos:line="421" pos:column="9">//                      want to overwrite an existing file)</comment>
	<comment type="line" pos:line="422" pos:column="9">//      E_FAIL  generic failure</comment>
	<name pos:line="423" pos:column="9">MSOMETHOD</name> <parameter_list pos:line="423" pos:column="19">(<param><decl><type><name pos:line="423" pos:column="20">HrUpload</name></type></decl></param>)</parameter_list> <parameter_list pos:line="423" pos:column="30">(<param><decl><type><name pos:line="423" pos:column="31">THIS_</name> <specifier pos:line="423" pos:column="37">const</specifier> <name pos:line="423" pos:column="43">WCHAR</name> <type:modifier pos:line="423" pos:column="49">*</type:modifier></type><name pos:line="423" pos:column="50">wzFile</name></decl></param>, <param><decl><type><name pos:line="423" pos:column="58">DWORD</name></type> <name pos:line="423" pos:column="64">grfurlu</name></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="423" pos:column="73">CONST_METHOD</name></type> <name pos:line="423" pos:column="86">PURE</name></decl>;</decl_stmt>

	<comment type="line" pos:line="425" pos:column="9">// HrDelete - deletes the file specified by this url.</comment>
	<name pos:line="426" pos:column="9">MSOMETHOD</name> <parameter_list pos:line="426" pos:column="19">(<param><decl><type><name pos:line="426" pos:column="20">HrDelete</name></type></decl></param>)</parameter_list> <parameter_list pos:line="426" pos:column="30">(<param><decl><type><name pos:line="426" pos:column="31">THIS</name></type></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="426" pos:column="37">CONST_METHOD</name></type> <name pos:line="426" pos:column="50">PURE</name></decl>;</decl_stmt>

	<comment type="line" pos:line="428" pos:column="9">// FExists - returns TRUE iff the file exists.  Param grfurle determines</comment>
	<comment type="line" pos:line="429" pos:column="9">//    which kind of validation to perform (default is 0 which means do not</comment>
	<comment type="line" pos:line="430" pos:column="9">//    check web servers (i.e. http/ftp) &amp; returns FALSE if this url points</comment>
	<comment type="line" pos:line="431" pos:column="9">//    to a web server location - to validate against web servers pass the</comment>
	<comment type="line" pos:line="432" pos:column="9">//    msofurleCheckServers flag).</comment>
	<name pos:line="433" pos:column="9">MSOMETHOD_</name><parameter_list pos:line="433" pos:column="19">(<param><decl><type><name pos:line="433" pos:column="20">BOOL</name></type></decl></param>, <param><decl><type><name pos:line="433" pos:column="26">FExists</name></type></decl></param>)</parameter_list> <parameter_list pos:line="433" pos:column="35">(<param><decl><type><name pos:line="433" pos:column="36">THIS_</name> <name pos:line="433" pos:column="42">DWORD</name></type> <name pos:line="433" pos:column="48">grfurle</name></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="433" pos:column="57">CONST_METHOD</name></type> <name pos:line="433" pos:column="70">PURE</name></decl>;</decl_stmt>

	<comment type="line" pos:line="435" pos:column="9">// HrGetBase - returns the base url of this url in ppiurlBase.</comment>
	<comment type="line" pos:line="436" pos:column="9">//    Caller must release the returned url when done.</comment>
	<name pos:line="437" pos:column="9">MSOMETHOD</name> <parameter_list pos:line="437" pos:column="19">(<param><decl><type><name pos:line="437" pos:column="20">HrGetBase</name></type></decl></param>)</parameter_list> <parameter_list pos:line="437" pos:column="31">(<param><decl><type><name pos:line="437" pos:column="32">THIS_</name> <specifier pos:line="437" pos:column="38">const</specifier> <name pos:line="437" pos:column="44">IMsoUrl</name> <type:modifier pos:line="437" pos:column="52">*</type:modifier><type:modifier pos:line="437" pos:column="53">*</type:modifier></type><name pos:line="437" pos:column="54">ppiurlBase</name></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="437" pos:column="66">CONST_METHOD</name></type> <name pos:line="437" pos:column="79">PURE</name></decl>;</decl_stmt>

 	<comment type="line" pos:line="439" pos:column="9">// FIsMhtml - does the url point to an mhtml file, and in the form "mhtml:X[!Y]" ?</comment>
	<name pos:line="440" pos:column="9">MSOMETHOD_</name><parameter_list pos:line="440" pos:column="19">(<param><decl><type><name pos:line="440" pos:column="20">BOOL</name></type></decl></param>, <param><decl><type><name pos:line="440" pos:column="26">FIsMhtml</name></type></decl></param>)</parameter_list> <parameter_list pos:line="440" pos:column="36">(<param><decl><type><name pos:line="440" pos:column="37">THIS</name></type></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="440" pos:column="43">CONST_METHOD</name></type> <name pos:line="440" pos:column="56">PURE</name></decl>;</decl_stmt>

	<comment type="line" pos:line="442" pos:column="9">// Returns the reference to the bodypart this mhtml url is referring to</comment>
	<name pos:line="443" pos:column="9">MSOMETHOD_</name><parameter_list pos:line="443" pos:column="19">(<param><decl><type><name pos:line="443" pos:column="20">LPCWSTR</name></type></decl></param>, <param><decl><type><name pos:line="443" pos:column="29">WzMhtmlBodypart</name></type></decl></param>)</parameter_list> <parameter_list pos:line="443" pos:column="46">(<param><decl><type><name pos:line="443" pos:column="47">THIS</name></type></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="443" pos:column="53">CONST_METHOD</name></type> <name pos:line="443" pos:column="66">PURE</name></decl>;</decl_stmt>

	<comment type="line" pos:line="445" pos:column="9">// Returns the cch of the reference to the bodypart this mhtml url is referring to</comment>
	<name pos:line="446" pos:column="9">MSOMETHOD_</name><parameter_list pos:line="446" pos:column="19">(<param><decl><type><name pos:line="446" pos:column="20">int</name></type></decl></param>, <param><decl><type><name pos:line="446" pos:column="25">CchMhtmlBodypart</name></type></decl></param>)</parameter_list> <parameter_list pos:line="446" pos:column="43">(<param><decl><type><name pos:line="446" pos:column="44">THIS</name></type></decl></param>)</parameter_list> <decl_stmt><decl><type><name pos:line="446" pos:column="50">CONST_METHOD</name></type> <name pos:line="446" pos:column="63">PURE</name></decl>;</decl_stmt>

	<name pos:line="448" pos:column="9">MSOMETHOD_</name><parameter_list pos:line="448" pos:column="19">(<param><decl><type><name pos:line="448" pos:column="20">BPSC</name></type></decl></param>, <param><decl><type><name pos:line="448" pos:column="26">BpscBulletProof</name></type></decl></param>)</parameter_list> <parameter_list pos:line="448" pos:column="43">(<param><decl><type><name pos:line="448" pos:column="44">THIS_</name> <name pos:line="448" pos:column="50">MSOBPCB</name> <type:modifier pos:line="448" pos:column="58">*</type:modifier></type><name pos:line="448" pos:column="59">pmsobpcb</name></decl></param>)</parameter_list> <name pos:line="448" pos:column="69">PURE</name>;</function_decl>

	<macro><name pos:line="450" pos:column="9">MSOMETHOD_</name><argument_list pos:line="450" pos:column="19">(<argument pos:line="450" pos:column="20">ULONG</argument>, <argument pos:line="450" pos:column="27">Free</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="450" pos:column="33">(</op:operator><name pos:line="450" pos:column="34">THIS</name><op:operator pos:line="450" pos:column="38">)</op:operator> <name pos:line="450" pos:column="40">PURE</name></expr>;</expr_stmt>
}</block><empty_stmt pos:line="451" pos:column="2">;</empty_stmt>


<cpp:ifndef pos:line="454" pos:column="1">#<cpp:directive pos:line="454" pos:column="2">ifndef</cpp:directive> <name pos:line="454" pos:column="9">__cplusplus</name></cpp:ifndef>
<comment type="line" pos:line="455" pos:column="1">// IMsoUrl wrapper/convenience functions for C clients</comment>
<cpp:define pos:line="456" pos:column="1">#<cpp:directive pos:line="456" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="456" pos:column="9">IMsoUrl_QueryInterface</name><parameter_list pos:line="456" pos:column="31">(<param><type><name pos:line="456" pos:column="32">this</name></type></param>, <param><type><name pos:line="456" pos:column="38">riid</name></type></param>, <param><type><name pos:line="456" pos:column="44">ppvObj</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="457" pos:column="9">( (this)-&gt;lpVtbl-&gt;QueryInterface(this, riid, ppvObj) )</cpp:value></cpp:define>
<cpp:define pos:line="458" pos:column="1">#<cpp:directive pos:line="458" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="458" pos:column="9">IMsoUrl_AddRef</name><parameter_list pos:line="458" pos:column="23">(<param><type><name pos:line="458" pos:column="24">this</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="459" pos:column="9">( (this)-&gt;lpVtbl-&gt;AddRef(this) )</cpp:value></cpp:define>
<cpp:define pos:line="460" pos:column="1">#<cpp:directive pos:line="460" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="460" pos:column="9">IMsoUrl_Release</name><parameter_list pos:line="460" pos:column="24">(<param><type><name pos:line="460" pos:column="25">this</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="461" pos:column="9">( (this)-&gt;lpVtbl-&gt;Free(this) )</cpp:value></cpp:define>
<cpp:define pos:line="462" pos:column="1">#<cpp:directive pos:line="462" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="462" pos:column="9">IMsoUrl_FValid</name><parameter_list pos:line="462" pos:column="23">(<param><type><name pos:line="462" pos:column="24">this</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="463" pos:column="9">( (this)-&gt;lpVtbl-&gt;FValid(this) )</cpp:value></cpp:define>
<cpp:define pos:line="464" pos:column="1">#<cpp:directive pos:line="464" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="464" pos:column="9">IMsoUrl_HrSetFromUser</name><parameter_list pos:line="464" pos:column="30">(<param><type><name pos:line="464" pos:column="31">this</name></type></param>, <param><type><name pos:line="464" pos:column="37">wzUrl</name></type></param>, <param><type><name pos:line="464" pos:column="44">cp</name></type></param>, <param><type><name pos:line="464" pos:column="48">piurlBase</name></type></param>, <param><type><name pos:line="464" pos:column="59">grfurl</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="465" pos:column="9">( (this)-&gt;lpVtbl-&gt;HrSetFromUser(this, wzUrl, cp, piurlBase, grfurl) )</cpp:value></cpp:define>
<cpp:define pos:line="466" pos:column="1">#<cpp:directive pos:line="466" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="466" pos:column="9">IMsoUrl_HrSetFromUserRgwch</name><parameter_list pos:line="466" pos:column="35">(<param><type><name pos:line="466" pos:column="36">this</name></type></param>, <param><type><name pos:line="466" pos:column="42">rgwchUrl</name></type></param>, <param><type><name pos:line="466" pos:column="52">cchUrl</name></type></param>, <param><type><name pos:line="466" pos:column="60">cp</name></type></param>, <param><type><name pos:line="466" pos:column="64">piurlBase</name></type></param>, <param><type><name pos:line="466" pos:column="75">grfurl</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="467" pos:column="9">( (this)-&gt;lpVtbl-&gt;HrSetFromUserRgwch(this, rgwchUrl, cchUrl, cp, piurlBase, grfurl) )</cpp:value></cpp:define>
<cpp:define pos:line="468" pos:column="1">#<cpp:directive pos:line="468" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="468" pos:column="9">IMsoUrl_HrSetFromCanonicalUrl</name><parameter_list pos:line="468" pos:column="38">(<param><type><name pos:line="468" pos:column="39">this</name></type></param>, <param><type><name pos:line="468" pos:column="45">wzUrl</name></type></param>, <param><type><name pos:line="468" pos:column="52">cp</name></type></param>, <param><type><name pos:line="468" pos:column="56">piurlBase</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="469" pos:column="9">( (this)-&gt;lpVtbl-&gt;HrSetFromCanonicalUrl(this, wzUrl, cp, piurlBase) )</cpp:value></cpp:define>
<cpp:define pos:line="470" pos:column="1">#<cpp:directive pos:line="470" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="470" pos:column="9">IMsoUrl_Lock</name><parameter_list pos:line="470" pos:column="21">(<param><type><name pos:line="470" pos:column="22">this</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="471" pos:column="9">( (this)-&gt;lpVtbl-&gt;Lock(this) )</cpp:value></cpp:define>
<cpp:define pos:line="472" pos:column="1">#<cpp:directive pos:line="472" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="472" pos:column="9">IMsoUrl_Unlock</name><parameter_list pos:line="472" pos:column="23">(<param><type><name pos:line="472" pos:column="24">this</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="473" pos:column="9">( (this)-&gt;lpVtbl-&gt;Unlock(this) )</cpp:value></cpp:define>
<cpp:define pos:line="474" pos:column="1">#<cpp:directive pos:line="474" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="474" pos:column="9">IMsoUrl_HrGetDisplayForm</name><parameter_list pos:line="474" pos:column="33">(<param><type><name pos:line="474" pos:column="34">this</name></type></param>, <param><type><name pos:line="474" pos:column="40">wzBuf</name></type></param>, <param><type><name pos:line="474" pos:column="47">pcchBuf</name></type></param>, <param><type><name pos:line="474" pos:column="56">grfurldf</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="475" pos:column="9">( (this)-&gt;lpVtbl-&gt;HrGetDisplayForm(this, wzBuf, pcchBuf, grfurldf) )</cpp:value></cpp:define>
<cpp:define pos:line="476" pos:column="1">#<cpp:directive pos:line="476" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="476" pos:column="9">IMsoUrl_HrGetCanonicalForm</name><parameter_list pos:line="476" pos:column="35">(<param><type><name pos:line="476" pos:column="36">this</name></type></param>, <param><type><name pos:line="476" pos:column="42">wzBuf</name></type></param>, <param><type><name pos:line="476" pos:column="49">pcchBuf</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="477" pos:column="9">( (this)-&gt;lpVtbl-&gt;HrGetCanonicalForm(this, wzBuf, pcchBuf) )</cpp:value></cpp:define>
<cpp:define pos:line="478" pos:column="1">#<cpp:directive pos:line="478" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="478" pos:column="9">IMsoUrl_HrGetCustomForm</name><parameter_list pos:line="478" pos:column="32">(<param><type><name pos:line="478" pos:column="33">this</name></type></param>, <param><type><name pos:line="478" pos:column="39">grfurlc</name></type></param>, <param><type><name pos:line="478" pos:column="48">wzBuf</name></type></param>, <param><type><name pos:line="478" pos:column="55">pcchBuf</name></type></param>, <param><type><name pos:line="478" pos:column="64">grfurlcf</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="479" pos:column="9">( (this)-&gt;lpVtbl-&gt;HrGetCustomForm(this, grfurlc, wzBuf, pcchBuf, grfurlcf) )</cpp:value></cpp:define>
<cpp:define pos:line="480" pos:column="1">#<cpp:directive pos:line="480" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="480" pos:column="9">IMsoUrl_CpGetCodePage</name><parameter_list pos:line="480" pos:column="30">(<param><type><name pos:line="480" pos:column="31">this</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="481" pos:column="9">( (this)-&gt;lpVtbl-&gt;CpGetCodePage(this) )</cpp:value></cpp:define>
<cpp:define pos:line="482" pos:column="1">#<cpp:directive pos:line="482" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="482" pos:column="9">IMsoUrl_WzCanonicalForm</name><parameter_list pos:line="482" pos:column="32">(<param><type><name pos:line="482" pos:column="33">this</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="483" pos:column="9">( (this)-&gt;lpVtbl-&gt;WzCanonicalForm(this) )</cpp:value></cpp:define>
<cpp:define pos:line="484" pos:column="1">#<cpp:directive pos:line="484" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="484" pos:column="9">IMsoUrl_CchCanonicalForm</name><parameter_list pos:line="484" pos:column="33">(<param><type><name pos:line="484" pos:column="34">this</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="485" pos:column="9">( (this)-&gt;lpVtbl-&gt;CchCanonicalForm(this) )</cpp:value></cpp:define>
<cpp:define pos:line="486" pos:column="1">#<cpp:directive pos:line="486" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="486" pos:column="9">IMsoUrl_UrlsGetScheme</name><parameter_list pos:line="486" pos:column="30">(<param><type><name pos:line="486" pos:column="31">this</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="487" pos:column="9">( (this)-&gt;lpVtbl-&gt;UrlsGetScheme(this) )</cpp:value></cpp:define>
<cpp:define pos:line="488" pos:column="1">#<cpp:directive pos:line="488" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="488" pos:column="9">IMsoUrl_HrGetScheme</name><parameter_list pos:line="488" pos:column="28">(<param><type><name pos:line="488" pos:column="29">this</name></type></param>, <param><type><name pos:line="488" pos:column="35">wzBuf</name></type></param>, <param><type><name pos:line="488" pos:column="42">pcchBuf</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="489" pos:column="9">( (this)-&gt;lpVtbl-&gt;HrGetScheme(this, wzBuf, pcchBuf) )</cpp:value></cpp:define>
<cpp:define pos:line="490" pos:column="1">#<cpp:directive pos:line="490" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="490" pos:column="9">IMsoUrl_HrGetAuthority</name><parameter_list pos:line="490" pos:column="31">(<param><type><name pos:line="490" pos:column="32">this</name></type></param>, <param><type><name pos:line="490" pos:column="38">wzBuf</name></type></param>, <param><type><name pos:line="490" pos:column="45">pcchBuf</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="491" pos:column="9">( (this)-&gt;lpVtbl-&gt;HrGetAuthority(this, wzBuf, pcchBuf) )</cpp:value></cpp:define>
<cpp:define pos:line="492" pos:column="1">#<cpp:directive pos:line="492" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="492" pos:column="9">IMsoUrl_HrGetUserName</name><parameter_list pos:line="492" pos:column="30">(<param><type><name pos:line="492" pos:column="31">this</name></type></param>, <param><type><name pos:line="492" pos:column="37">wzBuf</name></type></param>, <param><type><name pos:line="492" pos:column="44">pcchBuf</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="493" pos:column="9">( (this)-&gt;lpVtbl-&gt;HrGetUserName(this, wzBuf, pcchBuf) )</cpp:value></cpp:define>
<cpp:define pos:line="494" pos:column="1">#<cpp:directive pos:line="494" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="494" pos:column="9">IMsoUrl_HrGetPassword</name><parameter_list pos:line="494" pos:column="30">(<param><type><name pos:line="494" pos:column="31">this</name></type></param>, <param><type><name pos:line="494" pos:column="37">wzBuf</name></type></param>, <param><type><name pos:line="494" pos:column="44">pcchBuf</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="495" pos:column="9">( (this)-&gt;lpVtbl-&gt;HrGetPassword(this, wzBuf, pcchBuf) )</cpp:value></cpp:define>
<cpp:define pos:line="496" pos:column="1">#<cpp:directive pos:line="496" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="496" pos:column="9">IMsoUrl_HrGetServer</name><parameter_list pos:line="496" pos:column="28">(<param><type><name pos:line="496" pos:column="29">this</name></type></param>, <param><type><name pos:line="496" pos:column="35">wzBuf</name></type></param>, <param><type><name pos:line="496" pos:column="42">pcchBuf</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="497" pos:column="9">( (this)-&gt;lpVtbl-&gt;HrGetServer(this, wzBuf, pcchBuf) )</cpp:value></cpp:define>
<cpp:define pos:line="498" pos:column="1">#<cpp:directive pos:line="498" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="498" pos:column="9">IMsoUrl_HrGetPort</name><parameter_list pos:line="498" pos:column="26">(<param><type><name pos:line="498" pos:column="27">this</name></type></param>, <param><type><name pos:line="498" pos:column="33">wzBuf</name></type></param>, <param><type><name pos:line="498" pos:column="40">pcchBuf</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="499" pos:column="9">( (this)-&gt;lpVtbl-&gt;HrGetPort(this, wzBuf, pcchBuf) )</cpp:value></cpp:define>
<cpp:define pos:line="500" pos:column="1">#<cpp:directive pos:line="500" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="500" pos:column="9">IMsoUrl_HrGetPath</name><parameter_list pos:line="500" pos:column="26">(<param><type><name pos:line="500" pos:column="27">this</name></type></param>, <param><type><name pos:line="500" pos:column="33">wzBuf</name></type></param>, <param><type><name pos:line="500" pos:column="40">pcchBuf</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="501" pos:column="9">( (this)-&gt;lpVtbl-&gt;HrGetPath(this, wzBuf, pcchBuf) )</cpp:value></cpp:define>
<cpp:define pos:line="502" pos:column="1">#<cpp:directive pos:line="502" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="502" pos:column="9">IMsoUrl_HrGetDir</name><parameter_list pos:line="502" pos:column="25">(<param><type><name pos:line="502" pos:column="26">this</name></type></param>, <param><type><name pos:line="502" pos:column="32">wzBuf</name></type></param>, <param><type><name pos:line="502" pos:column="39">pcchBuf</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="503" pos:column="9">( (this)-&gt;lpVtbl-&gt;HrGetDir(this, wzBuf, pcchBuf) )</cpp:value></cpp:define>
<cpp:define pos:line="504" pos:column="1">#<cpp:directive pos:line="504" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="504" pos:column="9">IMsoUrl_HrGetFileLeaf</name><parameter_list pos:line="504" pos:column="30">(<param><type><name pos:line="504" pos:column="31">this</name></type></param>, <param><type><name pos:line="504" pos:column="37">wzBuf</name></type></param>, <param><type><name pos:line="504" pos:column="44">pcchBuf</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="505" pos:column="9">( (this)-&gt;lpVtbl-&gt;HrGetFileLeaf(this, wzBuf, pcchBuf) )</cpp:value></cpp:define>
<cpp:define pos:line="506" pos:column="1">#<cpp:directive pos:line="506" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="506" pos:column="9">IMsoUrl_HrGetFileName</name><parameter_list pos:line="506" pos:column="30">(<param><type><name pos:line="506" pos:column="31">this</name></type></param>, <param><type><name pos:line="506" pos:column="37">wzBuf</name></type></param>, <param><type><name pos:line="506" pos:column="44">pcchBuf</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="507" pos:column="9">( (this)-&gt;lpVtbl-&gt;HrGetFileName(this, wzBuf, pcchBuf) )</cpp:value></cpp:define>
<cpp:define pos:line="508" pos:column="1">#<cpp:directive pos:line="508" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="508" pos:column="9">IMsoUrl_HrGetFileExt</name><parameter_list pos:line="508" pos:column="29">(<param><type><name pos:line="508" pos:column="30">this</name></type></param>, <param><type><name pos:line="508" pos:column="36">wzBuf</name></type></param>, <param><type><name pos:line="508" pos:column="43">pcchBuf</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="509" pos:column="9">( (this)-&gt;lpVtbl-&gt;HrGetFileExt(this, wzBuf, pcchBuf) )</cpp:value></cpp:define>
<cpp:define pos:line="510" pos:column="1">#<cpp:directive pos:line="510" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="510" pos:column="9">IMsoUrl_HrGetQuery</name><parameter_list pos:line="510" pos:column="27">(<param><type><name pos:line="510" pos:column="28">this</name></type></param>, <param><type><name pos:line="510" pos:column="34">wzBuf</name></type></param>, <param><type><name pos:line="510" pos:column="41">pcchBuf</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="511" pos:column="9">( (this)-&gt;lpVtbl-&gt;HrGetQuery(this, wzBuf, pcchBuf) )</cpp:value></cpp:define>
<cpp:define pos:line="512" pos:column="1">#<cpp:directive pos:line="512" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="512" pos:column="9">IMsoUrl_HrGetFragment</name><parameter_list pos:line="512" pos:column="30">(<param><type><name pos:line="512" pos:column="31">this</name></type></param>, <param><type><name pos:line="512" pos:column="37">wzBuf</name></type></param>, <param><type><name pos:line="512" pos:column="44">pcchBuf</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="513" pos:column="9">( (this)-&gt;lpVtbl-&gt;HrGetFragment(this, wzBuf, pcchBuf) )</cpp:value></cpp:define>
<cpp:define pos:line="514" pos:column="1">#<cpp:directive pos:line="514" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="514" pos:column="9">IMsoUrl_RgwchScheme</name><parameter_list pos:line="514" pos:column="28">(<param><type><name pos:line="514" pos:column="29">this</name></type></param>, <param><type><name pos:line="514" pos:column="35">pcch</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="515" pos:column="9">( (this)-&gt;lpVtbl-&gt;RgwchScheme(this, pcch) )</cpp:value></cpp:define>
<cpp:define pos:line="516" pos:column="1">#<cpp:directive pos:line="516" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="516" pos:column="9">IMsoUrl_RgwchAuthority</name><parameter_list pos:line="516" pos:column="31">(<param><type><name pos:line="516" pos:column="32">this</name></type></param>, <param><type><name pos:line="516" pos:column="38">pcch</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="517" pos:column="9">( (this)-&gt;lpVtbl-&gt;RgwchAuthority(this, pcch) )</cpp:value></cpp:define>
<cpp:define pos:line="518" pos:column="1">#<cpp:directive pos:line="518" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="518" pos:column="9">IMsoUrl_RgwchUserName</name><parameter_list pos:line="518" pos:column="30">(<param><type><name pos:line="518" pos:column="31">this</name></type></param>, <param><type><name pos:line="518" pos:column="37">pcch</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="519" pos:column="9">( (this)-&gt;lpVtbl-&gt;RgwchUserName(this, pcch) )</cpp:value></cpp:define>
<cpp:define pos:line="520" pos:column="1">#<cpp:directive pos:line="520" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="520" pos:column="9">IMsoUrl_RgwchPassword</name><parameter_list pos:line="520" pos:column="30">(<param><type><name pos:line="520" pos:column="31">this</name></type></param>, <param><type><name pos:line="520" pos:column="37">pcch</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="521" pos:column="9">( (this)-&gt;lpVtbl-&gt;RgwchPassword(this, pcch) )</cpp:value></cpp:define>
<cpp:define pos:line="522" pos:column="1">#<cpp:directive pos:line="522" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="522" pos:column="9">IMsoUrl_RgwchServer</name><parameter_list pos:line="522" pos:column="28">(<param><type><name pos:line="522" pos:column="29">this</name></type></param>, <param><type><name pos:line="522" pos:column="35">pcch</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="523" pos:column="9">( (this)-&gt;lpVtbl-&gt;RgwchServer(this, pcch) )</cpp:value></cpp:define>
<cpp:define pos:line="524" pos:column="1">#<cpp:directive pos:line="524" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="524" pos:column="9">IMsoUrl_RgwchPort</name><parameter_list pos:line="524" pos:column="26">(<param><type><name pos:line="524" pos:column="27">this</name></type></param>, <param><type><name pos:line="524" pos:column="33">pcch</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="525" pos:column="9">( (this)-&gt;lpVtbl-&gt;RgwchPort(this, pcch) )</cpp:value></cpp:define>
<cpp:define pos:line="526" pos:column="1">#<cpp:directive pos:line="526" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="526" pos:column="9">IMsoUrl_RgwchPath</name><parameter_list pos:line="526" pos:column="26">(<param><type><name pos:line="526" pos:column="27">this</name></type></param>, <param><type><name pos:line="526" pos:column="33">pcch</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="527" pos:column="9">( (this)-&gt;lpVtbl-&gt;RgwchPath(this, pcch) )</cpp:value></cpp:define>
<cpp:define pos:line="528" pos:column="1">#<cpp:directive pos:line="528" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="528" pos:column="9">IMsoUrl_RgwchFileLeaf</name><parameter_list pos:line="528" pos:column="30">(<param><type><name pos:line="528" pos:column="31">this</name></type></param>, <param><type><name pos:line="528" pos:column="37">pcch</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="529" pos:column="9">( (this)-&gt;lpVtbl-&gt;RgwchFileLeaf(this, pcch) )</cpp:value></cpp:define>
<cpp:define pos:line="530" pos:column="1">#<cpp:directive pos:line="530" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="530" pos:column="9">IMsoUrl_RgwchFileExt</name><parameter_list pos:line="530" pos:column="29">(<param><type><name pos:line="530" pos:column="30">this</name></type></param>, <param><type><name pos:line="530" pos:column="36">pcch</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="531" pos:column="9">( (this)-&gt;lpVtbl-&gt;RgwchFileExt(this, pcch) )</cpp:value></cpp:define>
<cpp:define pos:line="532" pos:column="1">#<cpp:directive pos:line="532" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="532" pos:column="9">IMsoUrl_RgwchQuery</name><parameter_list pos:line="532" pos:column="27">(<param><type><name pos:line="532" pos:column="28">this</name></type></param>, <param><type><name pos:line="532" pos:column="34">pcch</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="533" pos:column="9">( (this)-&gt;lpVtbl-&gt;RgwchQuery(this, pcch) )</cpp:value></cpp:define>
<cpp:define pos:line="534" pos:column="1">#<cpp:directive pos:line="534" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="534" pos:column="9">IMsoUrl_RgwchFragment</name><parameter_list pos:line="534" pos:column="30">(<param><type><name pos:line="534" pos:column="31">this</name></type></param>, <param><type><name pos:line="534" pos:column="37">pcch</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="535" pos:column="9">( (this)-&gt;lpVtbl-&gt;RgwchFragment(this, pcch) )</cpp:value></cpp:define>
<cpp:define pos:line="536" pos:column="1">#<cpp:directive pos:line="536" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="536" pos:column="9">IMsoUrl_FIsHttp</name><parameter_list pos:line="536" pos:column="24">(<param><type><name pos:line="536" pos:column="25">this</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="537" pos:column="9">( (this)-&gt;lpVtbl-&gt;FIsHttp(this) )</cpp:value></cpp:define>
<cpp:define pos:line="538" pos:column="1">#<cpp:directive pos:line="538" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="538" pos:column="9">IMsoUrl_FIsFtp</name><parameter_list pos:line="538" pos:column="23">(<param><type><name pos:line="538" pos:column="24">this</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="539" pos:column="9">( (this)-&gt;lpVtbl-&gt;FIsFtp(this) )</cpp:value></cpp:define>
<cpp:define pos:line="540" pos:column="1">#<cpp:directive pos:line="540" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="540" pos:column="9">IMsoUrl_FIsLocal</name><parameter_list pos:line="540" pos:column="25">(<param><type><name pos:line="540" pos:column="26">this</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="541" pos:column="9">( (this)-&gt;lpVtbl-&gt;FIsLocal(this) )</cpp:value></cpp:define>
<cpp:define pos:line="542" pos:column="1">#<cpp:directive pos:line="542" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="542" pos:column="9">IMsoUrl_FIsUNC</name><parameter_list pos:line="542" pos:column="23">(<param><type><name pos:line="542" pos:column="24">this</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="543" pos:column="9">( (this)-&gt;lpVtbl-&gt;FIsUNC(this) )</cpp:value></cpp:define>
<cpp:define pos:line="544" pos:column="1">#<cpp:directive pos:line="544" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="544" pos:column="9">IMsoUrl_FIsODMA</name><parameter_list pos:line="544" pos:column="24">(<param><type><name pos:line="544" pos:column="25">this</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="545" pos:column="9">( (this)-&gt;lpVtbl-&gt;FIsODMA(this) )</cpp:value></cpp:define>
<cpp:define pos:line="546" pos:column="1">#<cpp:directive pos:line="546" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="546" pos:column="9">IMsoUrl_HrGetLocalPath</name><parameter_list pos:line="546" pos:column="31">(<param><type><name pos:line="546" pos:column="32">this</name></type></param>, <param><type><name pos:line="546" pos:column="38">wzBuf</name></type></param>, <param><type><name pos:line="546" pos:column="45">pcchBuf</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="547" pos:column="9">( (this)-&gt;lpVtbl-&gt;HrGetLocalPath(this, wzBuf, pcchBuf) )</cpp:value></cpp:define>
<cpp:define pos:line="548" pos:column="1">#<cpp:directive pos:line="548" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="548" pos:column="9">IMsoUrl_WzLocalPath</name><parameter_list pos:line="548" pos:column="28">(<param><type><name pos:line="548" pos:column="29">this</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="549" pos:column="9">( (this)-&gt;lpVtbl-&gt;WzLocalPath(this) )</cpp:value></cpp:define>
<cpp:define pos:line="550" pos:column="1">#<cpp:directive pos:line="550" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="550" pos:column="9">IMsoUrl_CchLocalPath</name><parameter_list pos:line="550" pos:column="29">(<param><type><name pos:line="550" pos:column="30">this</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="551" pos:column="9">( (this)-&gt;lpVtbl-&gt;CchLocalPath(this) )</cpp:value></cpp:define>
<cpp:define pos:line="552" pos:column="1">#<cpp:directive pos:line="552" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="552" pos:column="9">IMsoUrl_FIsEqual</name><parameter_list pos:line="552" pos:column="25">(<param><type><name pos:line="552" pos:column="26">this</name></type></param>, <param><type><name pos:line="552" pos:column="32">piurl</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="553" pos:column="9">( (this)-&gt;lpVtbl-&gt;FIsEqual(this, piurl) )</cpp:value></cpp:define>
<cpp:define pos:line="554" pos:column="1">#<cpp:directive pos:line="554" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="554" pos:column="9">IMsoUrl_FComponentsAreEqual</name><parameter_list pos:line="554" pos:column="36">(<param><type><name pos:line="554" pos:column="37">this</name></type></param>, <param><type><name pos:line="554" pos:column="43">grfurlc</name></type></param>, <param><type><name pos:line="554" pos:column="52">piurl</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="555" pos:column="9">( (this)-&gt;lpVtbl-&gt;FComponentsAreEqual(this, grfurlc, piurl) )</cpp:value></cpp:define>
<cpp:define pos:line="556" pos:column="1">#<cpp:directive pos:line="556" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="556" pos:column="9">IMsoUrl_FSubsumes</name><parameter_list pos:line="556" pos:column="26">(<param><type><name pos:line="556" pos:column="27">this</name></type></param>, <param><type><name pos:line="556" pos:column="33">piurl</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="557" pos:column="9">( (this)-&gt;lpVtbl-&gt;FSubsumes(this, piurl) )</cpp:value></cpp:define>
<cpp:define pos:line="558" pos:column="1">#<cpp:directive pos:line="558" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="558" pos:column="9">IMsoUrl_UrlrGetRelativity</name><parameter_list pos:line="558" pos:column="34">(<param><type><name pos:line="558" pos:column="35">this</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="559" pos:column="9">( (this)-&gt;lpVtbl-&gt;UrlrGetRelativity(this) )</cpp:value></cpp:define>
<cpp:define pos:line="560" pos:column="1">#<cpp:directive pos:line="560" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="560" pos:column="9">IMsoUrl_HrSetRelativity</name><parameter_list pos:line="560" pos:column="32">(<param><type><name pos:line="560" pos:column="33">this</name></type></param>, <param><type><name pos:line="560" pos:column="39">urlr</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="561" pos:column="9">( (this)-&gt;lpVtbl-&gt;HrSetRelativity(this, urlr) )</cpp:value></cpp:define>
<cpp:define pos:line="562" pos:column="1">#<cpp:directive pos:line="562" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="562" pos:column="9">IMsoUrl_HrResolve</name><parameter_list pos:line="562" pos:column="26">(<param><type><name pos:line="562" pos:column="27">this</name></type></param>, <param><type><name pos:line="562" pos:column="33">ppiurlAbsolute</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="563" pos:column="9">( (this)-&gt;lpVtbl-&gt;HrResolve(this, ppiurlAbsolute) )</cpp:value></cpp:define>
<cpp:define pos:line="564" pos:column="1">#<cpp:directive pos:line="564" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="564" pos:column="9">IMsoUrl_HrRebase</name><parameter_list pos:line="564" pos:column="25">(<param><type><name pos:line="564" pos:column="26">this</name></type></param>, <param><type><name pos:line="564" pos:column="32">piurlBase</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="565" pos:column="9">( (this)-&gt;lpVtbl-&gt;HrRebase(this, piurlBase) )</cpp:value></cpp:define>
<cpp:define pos:line="566" pos:column="1">#<cpp:directive pos:line="566" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="566" pos:column="9">IMsoUrl_HrDownload</name><parameter_list pos:line="566" pos:column="27">(<param><type><name pos:line="566" pos:column="28">this</name></type></param>, <param><type><name pos:line="566" pos:column="34">wzBuf</name></type></param>, <param><type><name pos:line="566" pos:column="41">pcchBuf</name></type></param>, <param><type><name pos:line="566" pos:column="50">grfurld</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="567" pos:column="9">( (this)-&gt;lpVtbl-&gt;HrDownload(this, wzBuf, pcchBuf, grfurld) )</cpp:value></cpp:define>
<cpp:define pos:line="568" pos:column="1">#<cpp:directive pos:line="568" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="568" pos:column="9">IMsoUrl_HrUpload</name><parameter_list pos:line="568" pos:column="25">(<param><type><name pos:line="568" pos:column="26">this</name></type></param>, <param><type><name pos:line="568" pos:column="32">wzFile</name></type></param>, <param><type><name pos:line="568" pos:column="40">grfurlu</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="569" pos:column="9">( (this)-&gt;lpVtbl-&gt;HrUpload(this, wzFile, grfurlu) )</cpp:value></cpp:define>
<cpp:define pos:line="570" pos:column="1">#<cpp:directive pos:line="570" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="570" pos:column="9">IMsoUrl_HrDelete</name><parameter_list pos:line="570" pos:column="25">(<param><type><name pos:line="570" pos:column="26">this</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="571" pos:column="9">( (this)-&gt;lpVtbl-&gt;HrDelete(this) )</cpp:value></cpp:define>
<cpp:define pos:line="572" pos:column="1">#<cpp:directive pos:line="572" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="572" pos:column="9">IMsoUrl_FExists</name><parameter_list pos:line="572" pos:column="24">(<param><type><name pos:line="572" pos:column="25">this</name></type></param>, <param><type><name pos:line="572" pos:column="31">grfurle</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="573" pos:column="9">( (this)-&gt;lpVtbl-&gt;FExists(this, grfurle) )</cpp:value></cpp:define>
<cpp:define pos:line="574" pos:column="1">#<cpp:directive pos:line="574" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="574" pos:column="9">IMsoUrl_HrGetBase</name><parameter_list pos:line="574" pos:column="26">(<param><type><name pos:line="574" pos:column="27">this</name></type></param>, <param><type><name pos:line="574" pos:column="33">ppiurlBase</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="575" pos:column="9">( (this)-&gt;lpVtbl-&gt;HrGetBase(this, ppiurlBase) )</cpp:value></cpp:define>
<cpp:define pos:line="576" pos:column="1">#<cpp:directive pos:line="576" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="576" pos:column="9">IMsoUrl_FIsMhtml</name><parameter_list pos:line="576" pos:column="25">(<param><type><name pos:line="576" pos:column="26">this</name></type></param>)</parameter_list></cpp:macro> \
 	<cpp:value pos:line="577" pos:column="9">( (this)-&gt;lpVtbl-&gt;FIsMhtml(this) )</cpp:value></cpp:define>
<cpp:define pos:line="578" pos:column="1">#<cpp:directive pos:line="578" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="578" pos:column="9">IMsoUrl_WzMhtmlBodypart</name><parameter_list pos:line="578" pos:column="32">(<param><type><name pos:line="578" pos:column="33">this</name></type></param>)</parameter_list></cpp:macro> \
 	<cpp:value pos:line="579" pos:column="9">( (this)-&gt;lpVtbl-&gt;WzMhtmlBodypart(this) )</cpp:value></cpp:define>
<cpp:define pos:line="580" pos:column="1">#<cpp:directive pos:line="580" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="580" pos:column="9">IMsoUrl_CchMhtmlBodypart</name><parameter_list pos:line="580" pos:column="33">(<param><type><name pos:line="580" pos:column="34">this</name></type></param>)</parameter_list></cpp:macro> \
 	<cpp:value pos:line="581" pos:column="9">( (this)-&gt;lpVtbl-&gt;CchMhtmlBodypart(this) )</cpp:value></cpp:define>
<cpp:endif pos:line="582" pos:column="1">#<cpp:directive pos:line="582" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="582" pos:column="8">// __cplusplus</comment>


<comment type="line" pos:line="585" pos:column="1">// Url Creation APIs</comment>
<comment type="line" pos:line="586" pos:column="1">//</comment>
<comment type="line" pos:line="587" pos:column="1">// MsoHrCreateUrl - creates an unset url in ppiurl.</comment>
<comment type="line" pos:line="588" pos:column="1">// MsoHrCreateUrlFromUser - same as calling MsoHrCreateUrl</comment>
<comment type="line" pos:line="589" pos:column="1">//    followed by IMsoUrl::HrSetFromUser.</comment>
<comment type="line" pos:line="590" pos:column="1">// MsoHrCreateUrlFromUserRgwch - same as calling MsoHrCreateUrl</comment>
<comment type="line" pos:line="591" pos:column="1">//    followed by IMsoUrl::HrSetFromUserRgwch.</comment>
<comment type="line" pos:line="592" pos:column="1">// MsoHrCreateUrlFromCanonicalUrl - same as calling MsoHrCreateUrl</comment>
<comment type="line" pos:line="593" pos:column="1">//    followed by IMsoUrl::HrSetFromCanonicalUrl.</comment>
<comment type="line" pos:line="594" pos:column="1">// MsoHrCloneUrl - creates a new copy of the given url</comment>
<macro><name pos:line="595" pos:column="1">MSOAPI_</name><argument_list pos:line="595" pos:column="8">(<argument pos:line="595" pos:column="9">HRESULT</argument>)</argument_list></macro> <macro><name pos:line="595" pos:column="18">MsoHrCreateUrl</name><argument_list pos:line="595" pos:column="32">(<argument pos:line="595" pos:column="33">interface IMsoUrl **ppiurl</argument>)</argument_list></macro><empty_stmt pos:line="595" pos:column="60">;</empty_stmt>
<macro><name pos:line="596" pos:column="1">MSOAPI_</name><argument_list pos:line="596" pos:column="8">(<argument pos:line="596" pos:column="9">HRESULT</argument>)</argument_list></macro> <macro><name pos:line="596" pos:column="18">MsoHrCreateUrlFromUser</name><argument_list pos:line="596" pos:column="40">(<argument pos:line="596" pos:column="41">interface IMsoUrl **ppiurl</argument>,
	<argument pos:line="597" pos:column="9">const WCHAR *wzUrl</argument>, <argument pos:line="597" pos:column="29">DWORD cp</argument>, <argument pos:line="597" pos:column="39">const IMsoUrl *piurlBase</argument>, <argument pos:line="597" pos:column="65">DWORD grfurl</argument>)</argument_list></macro><empty_stmt pos:line="597" pos:column="78">;</empty_stmt>
<macro><name pos:line="598" pos:column="1">MSOAPI_</name><argument_list pos:line="598" pos:column="8">(<argument pos:line="598" pos:column="9">HRESULT</argument>)</argument_list></macro> <macro><name pos:line="598" pos:column="18">MsoHrCreateUrlFromUserRgwch</name><argument_list pos:line="598" pos:column="45">(<argument pos:line="598" pos:column="46">interface IMsoUrl **ppiurl</argument>,
	<argument pos:line="599" pos:column="9">const WCHAR *wzUrl</argument>, <argument pos:line="599" pos:column="29">int cchUrl</argument>, <argument pos:line="599" pos:column="41">DWORD cp</argument>, <argument pos:line="599" pos:column="51">const IMsoUrl *piurlBase</argument>, <argument pos:line="599" pos:column="77">DWORD grfurl</argument>)</argument_list></macro><empty_stmt pos:line="599" pos:column="90">;</empty_stmt>
<macro><name pos:line="600" pos:column="1">MSOAPIX_</name><argument_list pos:line="600" pos:column="9">(<argument pos:line="600" pos:column="10">HRESULT</argument>)</argument_list></macro> <macro><name pos:line="600" pos:column="19">MsoHrCreateUrlFromCanonicalUrl</name><argument_list pos:line="600" pos:column="49">(<argument pos:line="600" pos:column="50">interface IMsoUrl **ppiurl</argument>,
	<argument pos:line="601" pos:column="9">const WCHAR *wzUrl</argument>, <argument pos:line="601" pos:column="29">DWORD cp</argument>, <argument pos:line="601" pos:column="39">const IMsoUrl *piurlBase</argument>)</argument_list></macro><empty_stmt pos:line="601" pos:column="64">;</empty_stmt>
<macro><name pos:line="602" pos:column="1">MSOAPI_</name><argument_list pos:line="602" pos:column="8">(<argument pos:line="602" pos:column="9">HRESULT</argument>)</argument_list></macro> <macro><name pos:line="602" pos:column="18">MsoHrCloneUrl</name><argument_list pos:line="602" pos:column="31">(<argument pos:line="602" pos:column="32">interface IMsoUrl **ppiurl</argument>, <argument pos:line="602" pos:column="60">const IMsoUrl *piurl</argument>)</argument_list></macro><empty_stmt pos:line="602" pos:column="81">;</empty_stmt>


<comment type="line" pos:line="605" pos:column="1">// Some useful path manipulation APIs</comment>
<comment type="line" pos:line="606" pos:column="1">//</comment>
<comment type="line" pos:line="607" pos:column="1">// MsoFIsPathSep - returns TRUE iff the character is a recognized path separator</comment>
<comment type="line" pos:line="608" pos:column="1">// MsoRgwchPathSepIndex - returns a ptr to the first path sep character</comment>
<comment type="line" pos:line="609" pos:column="1">// MsoRgwchPathSepIndexRight - returns a ptr to the last path sep character</comment>
<function><type><name pos:line="610" pos:column="1">__inline</name></type> <name pos:line="610" pos:column="10">MsoFIsPathSep</name><parameter_list pos:line="610" pos:column="23">(<param><decl><type><name pos:line="610" pos:column="24">WCHAR</name></type> <name pos:line="610" pos:column="30">wch</name></decl></param>)</parameter_list> <block pos:line="610" pos:column="35">{ <return pos:line="610" pos:column="37">return <expr><name pos:line="610" pos:column="44">wch</name> <op:operator pos:line="610" pos:column="48">==</op:operator> <lit:literal type="string" pos:line="610" pos:column="51">L'</lit:literal>/' <op:operator pos:line="610" pos:column="56">||</op:operator> <name pos:line="610" pos:column="59">wch</name> <op:operator pos:line="610" pos:column="63">==</op:operator> <lit:literal type="string" pos:line="610" pos:column="66">L'</lit:literal>\\'</expr>;</return> }</block></function><empty_stmt pos:line="610" pos:column="74">;</empty_stmt>
<macro><name pos:line="611" pos:column="1">MSOAPIX_</name><argument_list pos:line="611" pos:column="9">(<argument pos:line="611" pos:column="10">WCHAR*</argument>)</argument_list></macro> <macro><name pos:line="611" pos:column="18">MsoRgwchPathSepIndex</name><argument_list pos:line="611" pos:column="38">(<argument pos:line="611" pos:column="39">const WCHAR *rgwch</argument>, <argument pos:line="611" pos:column="59">int cch</argument>)</argument_list></macro><empty_stmt pos:line="611" pos:column="67">;</empty_stmt>
<macro><name pos:line="612" pos:column="1">MSOAPI_</name><argument_list pos:line="612" pos:column="8">(<argument pos:line="612" pos:column="9">WCHAR*</argument>)</argument_list></macro> <macro><name pos:line="612" pos:column="17">MsoRgwchPathSepIndexRight</name><argument_list pos:line="612" pos:column="42">(<argument pos:line="612" pos:column="43">const WCHAR *rgwch</argument>, <argument pos:line="612" pos:column="63">int cch</argument>)</argument_list></macro><empty_stmt pos:line="612" pos:column="71">;</empty_stmt>

<macro><name pos:line="614" pos:column="1">MSOAPIX_</name><argument_list pos:line="614" pos:column="9">(<argument pos:line="614" pos:column="10">BOOL</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="614" pos:column="16">MsoFWzIsResUrl</name><argument_list pos:line="614" pos:column="30">(<argument><expr pos:line="614" pos:column="31">const <name pos:line="614" pos:column="37">WCHAR</name> <op:operator pos:line="614" pos:column="43">*</op:operator><name pos:line="614" pos:column="44">wzURL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line" pos:line="616" pos:column="1">// Path buffer constants</comment>
<cpp:define pos:line="617" pos:column="1">#<cpp:directive pos:line="617" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="617" pos:column="9">MSO_MAX_PATH</name></cpp:macro>            <cpp:value pos:line="617" pos:column="33">INTERNET_MAX_URL_LENGTH</cpp:value></cpp:define>
<cpp:define pos:line="618" pos:column="1">#<cpp:directive pos:line="618" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="618" pos:column="9">MSO_CB_MAX_PATH</name></cpp:macro>         <cpp:value pos:line="618" pos:column="33">(MSO_MAX_PATH*sizeof(WCHAR))</cpp:value></cpp:define>
<cpp:define pos:line="619" pos:column="1">#<cpp:directive pos:line="619" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="619" pos:column="9">MSO_MAX_URL_PATH</name></cpp:macro>        <cpp:value pos:line="619" pos:column="33">INTERNET_MAX_URL_LENGTH</cpp:value></cpp:define>
<cpp:define pos:line="620" pos:column="1">#<cpp:directive pos:line="620" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="620" pos:column="9">MSO_CB_MAX_URL_PATH</name></cpp:macro>     <cpp:value pos:line="620" pos:column="33">(MSO_MAX_URL_PATH*sizeof(WCHAR))</cpp:value></cpp:define>
<cpp:define pos:line="621" pos:column="1">#<cpp:directive pos:line="621" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="621" pos:column="9">MSO_MAX_LOCAL_PATH</name></cpp:macro>      <cpp:value pos:line="621" pos:column="33">MAX_PATH</cpp:value></cpp:define>
<cpp:define pos:line="622" pos:column="1">#<cpp:directive pos:line="622" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="622" pos:column="9">MSO_CB_MAX_LOCAL_PATH</name></cpp:macro>   <cpp:value pos:line="622" pos:column="33">(MSO_MAX_LOCAL_PATH*sizeof(WCHAR))</cpp:value></cpp:define>


<comment type="line" format="doxygen" pos:line="625" pos:column="1">//////////////////////////////////////////////////////////////////////////</comment>
<comment type="line" pos:line="626" pos:column="1">//</comment>
<comment type="line" pos:line="627" pos:column="1">// OPEN ISSUES:</comment>
<comment type="line" pos:line="628" pos:column="1">// </comment>
<comment type="line" pos:line="629" pos:column="1">// 1.  We don't handle default ports in the equivalence comparison.</comment>
<comment type="line" pos:line="630" pos:column="1">// 2.  We don't handle "http://server.com" &amp; "http://www.server.com"</comment>
<comment type="line" pos:line="631" pos:column="1">//     equivalence correctly.</comment>
<comment type="line" pos:line="632" pos:column="1">//</comment>
<comment type="line" format="doxygen" pos:line="633" pos:column="1">//////////////////////////////////////////////////////////////////////////</comment>

<cpp:endif pos:line="635" pos:column="1">#<cpp:directive pos:line="635" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="635" pos:column="8">// MSOURL_H</comment>











</unit>
