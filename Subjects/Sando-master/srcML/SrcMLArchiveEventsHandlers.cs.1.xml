<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\UI\UI\Monitoring\SrcMLArchiveEventsHandlers.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">IO</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">ABB</name><op:operator pos:line="3" pos:column="10">.</op:operator><name pos:line="3" pos:column="11">SrcML</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">ABB</name><op:operator pos:line="4" pos:column="10">.</op:operator><name pos:line="4" pos:column="11">SrcML</name><op:operator pos:line="4" pos:column="16">.</op:operator><name pos:line="4" pos:column="17">VisualStudio</name><op:operator pos:line="4" pos:column="29">.</op:operator><name pos:line="4" pos:column="30">SrcMLService</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Sando</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">Core</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">Extensions</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Sando</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">Core</name><op:operator pos:line="6" pos:column="17">.</op:operator><name pos:line="6" pos:column="18">Logging</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Sando</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">DependencyInjection</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Sando</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">Indexer</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">Sando</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">Indexer</name><op:operator pos:line="9" pos:column="20">.</op:operator><name pos:line="9" pos:column="21">IndexFiltering</name></name>;</using>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">Sando</name><op:operator pos:line="10" pos:column="12">.</op:operator><name pos:line="10" pos:column="13">Recommender</name></name>;</using>
<using pos:line="11" pos:column="1">using <name><name pos:line="11" pos:column="7">System</name><op:operator pos:line="11" pos:column="13">.</op:operator><name pos:line="11" pos:column="14">Threading</name><op:operator pos:line="11" pos:column="23">.</op:operator><name pos:line="11" pos:column="24">Tasks</name></name>;</using>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">System</name><op:operator pos:line="12" pos:column="13">.</op:operator><name pos:line="12" pos:column="14">Threading</name></name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Collections</name><op:operator pos:line="13" pos:column="25">.</op:operator><name pos:line="13" pos:column="26">Generic</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Collections</name><op:operator pos:line="14" pos:column="25">.</op:operator><name pos:line="14" pos:column="26">Concurrent</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Xml</name><op:operator pos:line="15" pos:column="17">.</op:operator><name pos:line="15" pos:column="18">Linq</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">Sando</name><op:operator pos:line="16" pos:column="12">.</op:operator><name pos:line="16" pos:column="13">Core</name><op:operator pos:line="16" pos:column="17">.</op:operator><name pos:line="16" pos:column="18">Logging</name><op:operator pos:line="16" pos:column="25">.</op:operator><name pos:line="16" pos:column="26">Events</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Linq</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">Sando</name><op:operator pos:line="18" pos:column="12">.</op:operator><name pos:line="18" pos:column="13">UI</name><op:operator pos:line="18" pos:column="15">.</op:operator><name pos:line="18" pos:column="16">View</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">Sando</name><op:operator pos:line="19" pos:column="12">.</op:operator><name pos:line="19" pos:column="13">ExtensionContracts</name><op:operator pos:line="19" pos:column="31">.</op:operator><name pos:line="19" pos:column="32">TaskFactoryContracts</name></name>;</using>
<using pos:line="20" pos:column="1">using <name><name pos:line="20" pos:column="7">System</name><op:operator pos:line="20" pos:column="13">.</op:operator><name pos:line="20" pos:column="14">Diagnostics</name></name>;</using>
<using pos:line="21" pos:column="1">using <name><name pos:line="21" pos:column="7">System</name><op:operator pos:line="21" pos:column="13">.</op:operator><name pos:line="21" pos:column="14">ComponentModel</name></name>;</using>


<namespace pos:line="24" pos:column="1">namespace <name><name pos:line="24" pos:column="11">Sando</name><op:operator pos:line="24" pos:column="16">.</op:operator><name pos:line="24" pos:column="17">UI</name><op:operator pos:line="24" pos:column="19">.</op:operator><name pos:line="24" pos:column="20">Monitoring</name></name>
<block pos:line="25" pos:column="1">{
    <class><specifier pos:line="26" pos:column="5">public</specifier> class <name pos:line="26" pos:column="18">SrcMLArchiveEventsHandlers</name> <super pos:line="26" pos:column="45">: <name pos:line="26" pos:column="47">ITaskScheduler</name></super>
    <block pos:line="27" pos:column="5">{

        <decl_stmt><decl><type><specifier pos:line="29" pos:column="9">private</specifier> <name><name pos:line="29" pos:column="17">ConcurrentBag</name><argument_list pos:line="29" pos:column="30">&lt;<argument><name pos:line="29" pos:column="31">Task</name></argument>&gt;</argument_list></name></type> <name pos:line="29" pos:column="37">tasks</name> <init pos:line="29" pos:column="43">= <expr><op:operator pos:line="29" pos:column="45">new</op:operator> <call><name><name pos:line="29" pos:column="49">ConcurrentBag</name><argument_list pos:line="29" pos:column="62">&lt;<argument><name pos:line="29" pos:column="63">Task</name></argument>&gt;</argument_list></name><argument_list pos:line="29" pos:column="68">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="30" pos:column="9">private</specifier> <name><name pos:line="30" pos:column="17">ConcurrentBag</name><argument_list pos:line="30" pos:column="30">&lt;<argument><name pos:line="30" pos:column="31">CancellationTokenSource</name></argument>&gt;</argument_list></name></type> <name pos:line="30" pos:column="56">cancellers</name> <init pos:line="30" pos:column="67">= <expr><op:operator pos:line="30" pos:column="69">new</op:operator> <call><name><name pos:line="30" pos:column="73">ConcurrentBag</name><argument_list pos:line="30" pos:column="86">&lt;<argument><name pos:line="30" pos:column="87">CancellationTokenSource</name></argument>&gt;</argument_list></name><argument_list pos:line="30" pos:column="111">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="31" pos:column="9">private</specifier> <name pos:line="31" pos:column="17">TaskScheduler</name></type> <name pos:line="31" pos:column="31">scheduler</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="32" pos:column="9">public</specifier> <name pos:line="32" pos:column="16">TaskFactory</name></type> <name pos:line="32" pos:column="28">factory</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="33" pos:column="9">public</specifier> <specifier pos:line="33" pos:column="16">static</specifier> <name pos:line="33" pos:column="23">SrcMLArchiveEventsHandlers</name></type> <name pos:line="33" pos:column="50">Instance</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name pos:line="34" pos:column="9">System</name><op:operator pos:line="34" pos:column="15">.</op:operator><name pos:line="34" pos:column="16">Timers</name><op:operator pos:line="34" pos:column="22">.</op:operator><name pos:line="34" pos:column="23">Timer</name></name></type> <name pos:line="34" pos:column="29">hideProgressBarTimer</name> <init pos:line="34" pos:column="50">= <expr><op:operator pos:line="34" pos:column="52">new</op:operator> <call><name><name pos:line="34" pos:column="56">System</name><op:operator pos:line="34" pos:column="62">.</op:operator><name pos:line="34" pos:column="63">Timers</name><op:operator pos:line="34" pos:column="69">.</op:operator><name pos:line="34" pos:column="70">Timer</name></name><argument_list pos:line="34" pos:column="75">(<argument><expr><lit:literal type="number" pos:line="34" pos:column="76">500</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <constructor><specifier pos:line="36" pos:column="9">public</specifier> <name pos:line="36" pos:column="16">SrcMLArchiveEventsHandlers</name><parameter_list pos:line="36" pos:column="42">()</parameter_list>
        <block pos:line="37" pos:column="9">{
            <expr_stmt><expr><name pos:line="38" pos:column="13">scheduler</name> <op:operator pos:line="38" pos:column="23">=</op:operator> <op:operator pos:line="38" pos:column="25">new</op:operator> <call><name pos:line="38" pos:column="29">LimitedConcurrencyLevelTaskScheduler</name><argument_list pos:line="38" pos:column="65">(<argument><expr><lit:literal type="number" pos:line="38" pos:column="66">2</lit:literal></expr></argument>,<argument><expr><name pos:line="38" pos:column="68">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="39" pos:column="13">factory</name> <op:operator pos:line="39" pos:column="21">=</op:operator> <op:operator pos:line="39" pos:column="23">new</op:operator> <call><name pos:line="39" pos:column="27">TaskFactory</name><argument_list pos:line="39" pos:column="38">(<argument><expr><name pos:line="39" pos:column="39">scheduler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="40" pos:column="13">Instance</name> <op:operator pos:line="40" pos:column="22">=</op:operator> <name pos:line="40" pos:column="24">this</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="41" pos:column="13">hideProgressBarTimer</name><op:operator pos:line="41" pos:column="33">.</op:operator><name pos:line="41" pos:column="34">Elapsed</name></name> <op:operator pos:line="41" pos:column="42">+=</op:operator> <name pos:line="41" pos:column="45">waitToUpdateProgressBar_Elapsed</name></expr>;</expr_stmt>
        }</block></constructor>

   

     

        <function><type><specifier pos:line="48" pos:column="9">public</specifier> <name pos:line="48" pos:column="16">void</name></type> <name pos:line="48" pos:column="21">SourceFileChanged</name><parameter_list pos:line="48" pos:column="38">(<param><decl><type><name pos:line="48" pos:column="39">object</name></type> <name pos:line="48" pos:column="46">sender</name></decl></param>, <param><decl><type><name pos:line="48" pos:column="54">FileEventRaisedArgs</name></type> <name pos:line="48" pos:column="74">args</name></decl></param>)</parameter_list>
        <block pos:line="49" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="50" pos:column="13">SourceFileChanged</name><argument_list pos:line="50" pos:column="30">(<argument><expr><name pos:line="50" pos:column="31">sender</name></expr></argument>, <argument><expr><name pos:line="50" pos:column="39">args</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="50" pos:column="45">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="53" pos:column="9">public</specifier> <name pos:line="53" pos:column="16">int</name></type> <name pos:line="53" pos:column="20">TaskCount</name><parameter_list pos:line="53" pos:column="29">()</parameter_list>
        <block pos:line="54" pos:column="9">{
            <lock pos:line="55" pos:column="13">lock (<expr><name pos:line="55" pos:column="19">tasksTrackerLock</name></expr>)
                <return pos:line="56" pos:column="17">return <expr><name><name pos:line="56" pos:column="24">tasks</name><op:operator pos:line="56" pos:column="29">.</op:operator><name pos:line="56" pos:column="30">Count</name></name></expr>;</return></lock>
        }</block></function>

        <function><type><specifier pos:line="59" pos:column="9">public</specifier> <name pos:line="59" pos:column="16">void</name></type> <name pos:line="59" pos:column="21">WaitForIndexing</name><parameter_list pos:line="59" pos:column="36">()</parameter_list>
        <block pos:line="60" pos:column="9">{
            <while pos:line="61" pos:column="13">while <condition pos:line="61" pos:column="19">(<expr><op:operator pos:line="61" pos:column="20">(</op:operator><name pos:line="61" pos:column="21">scheduler</name> <op:operator pos:line="61" pos:column="31">as</op:operator> <name pos:line="61" pos:column="34">LimitedConcurrencyLevelTaskScheduler</name><op:operator pos:line="61" pos:column="70">)</op:operator><op:operator pos:line="61" pos:column="71">.</op:operator><call><name pos:line="61" pos:column="72">GetTasks</name><argument_list pos:line="61" pos:column="80">()</argument_list></call><op:operator pos:line="61" pos:column="82">&gt;</op:operator><lit:literal type="number" pos:line="61" pos:column="83">0</lit:literal></expr>)</condition>
            <block pos:line="62" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="63" pos:column="17">Thread</name><op:operator pos:line="63" pos:column="23">.</op:operator><name pos:line="63" pos:column="24">Sleep</name></name><argument_list pos:line="63" pos:column="29">(<argument><expr><lit:literal type="number" pos:line="63" pos:column="30">500</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
        }</block></function>

        <function><type><specifier pos:line="67" pos:column="9">public</specifier> <name pos:line="67" pos:column="16">Task</name></type> <name pos:line="67" pos:column="21">StartNew</name><parameter_list pos:line="67" pos:column="29">(<param><decl><type><name pos:line="67" pos:column="30">Action</name></type> <name pos:line="67" pos:column="37">a</name></decl></param>, <param><decl><type><name pos:line="67" pos:column="40">CancellationTokenSource</name></type> <name pos:line="67" pos:column="64">c</name></decl></param>)</parameter_list>
        <block pos:line="68" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="69" pos:column="13">var</name></type> <name pos:line="69" pos:column="17">task</name> <init pos:line="69" pos:column="22">= <expr><call><name><name pos:line="69" pos:column="24">factory</name><op:operator pos:line="69" pos:column="31">.</op:operator><name pos:line="69" pos:column="32">StartNew</name></name><argument_list pos:line="69" pos:column="40">(<argument><expr><name pos:line="69" pos:column="41">a</name></expr></argument>, <argument><expr><name><name pos:line="69" pos:column="44">c</name><op:operator pos:line="69" pos:column="45">.</op:operator><name pos:line="69" pos:column="46">Token</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <lock pos:line="70" pos:column="13">lock (<expr><name pos:line="70" pos:column="19">tasksTrackerLock</name></expr>)
            <block pos:line="71" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="72" pos:column="17">tasks</name><op:operator pos:line="72" pos:column="22">.</op:operator><name pos:line="72" pos:column="23">Add</name></name><argument_list pos:line="72" pos:column="26">(<argument><expr><name pos:line="72" pos:column="27">task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="73" pos:column="17">cancellers</name><op:operator pos:line="73" pos:column="27">.</op:operator><name pos:line="73" pos:column="28">Add</name></name><argument_list pos:line="73" pos:column="31">(<argument><expr><name pos:line="73" pos:column="32">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></lock>
            <expr_stmt><expr><call><name><name pos:line="75" pos:column="13">task</name><op:operator pos:line="75" pos:column="17">.</op:operator><name pos:line="75" pos:column="18">ContinueWith</name></name><argument_list pos:line="75" pos:column="30">(<argument><expr><lambda><name pos:line="75" pos:column="31">removeTask</name> <op:operator pos:line="75" pos:column="42">=&gt;</op:operator> <call><name pos:line="75" pos:column="45">RemoveTask</name><argument_list pos:line="75" pos:column="55">(<argument><expr><name pos:line="75" pos:column="56">task</name></expr></argument>, <argument><expr><name pos:line="75" pos:column="62">c</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="76" pos:column="13">return <expr><name pos:line="76" pos:column="20">task</name></expr>;</return>
        }</block></function>      
        <function><type><specifier pos:line="78" pos:column="9">public</specifier> <name pos:line="78" pos:column="16">void</name></type> <name pos:line="78" pos:column="21">SourceFileChanged</name><parameter_list pos:line="78" pos:column="38">(<param><decl><type><name pos:line="78" pos:column="39">object</name></type> <name pos:line="78" pos:column="46">sender</name></decl></param>, <param><decl><type><name pos:line="78" pos:column="54">FileEventRaisedArgs</name></type> <name pos:line="78" pos:column="74">args</name></decl></param>, <param><decl><type><name pos:line="78" pos:column="80">bool</name></type> <name pos:line="78" pos:column="85">commitImmediately</name> <init pos:line="78" pos:column="103">= <expr><lit:literal type="boolean" pos:line="78" pos:column="105">false</lit:literal></expr></init></decl></param>)</parameter_list>
        <block pos:line="79" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="80" pos:column="13">var</name></type> <name pos:line="80" pos:column="17">cancelTokenSource</name> <init pos:line="80" pos:column="35">= <expr><op:operator pos:line="80" pos:column="37">new</op:operator> <call><name pos:line="80" pos:column="41">CancellationTokenSource</name><argument_list pos:line="80" pos:column="64">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="81" pos:column="13">var</name></type> <name pos:line="81" pos:column="17">cancelToken</name> <init pos:line="81" pos:column="29">= <expr><name><name pos:line="81" pos:column="31">cancelTokenSource</name><op:operator pos:line="81" pos:column="48">.</op:operator><name pos:line="81" pos:column="49">Token</name></name></expr></init></decl>;</decl_stmt>            
            <decl_stmt><decl><type><name pos:line="82" pos:column="13">Action</name></type> <name pos:line="82" pos:column="20">action</name> <init pos:line="82" pos:column="27">=  <expr><lambda><parameter_list pos:line="82" pos:column="30">()</parameter_list> <op:operator pos:line="82" pos:column="33">=&gt;</op:operator>
            <block pos:line="83" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="84" pos:column="17">cancelToken</name><op:operator pos:line="84" pos:column="28">.</op:operator><name pos:line="84" pos:column="29">ThrowIfCancellationRequested</name></name><argument_list pos:line="84" pos:column="57">()</argument_list></call></expr>;</expr_stmt>

                <comment type="line" pos:line="86" pos:column="17">// Ignore files that can not be indexed by Sando.</comment>
                <decl_stmt><decl><type><name pos:line="87" pos:column="17">var</name></type> <name pos:line="87" pos:column="21">fileExtension</name> <init pos:line="87" pos:column="35">= <expr><call><name><name pos:line="87" pos:column="37">Path</name><op:operator pos:line="87" pos:column="41">.</op:operator><name pos:line="87" pos:column="42">GetExtension</name></name><argument_list pos:line="87" pos:column="54">(<argument><expr><name><name pos:line="87" pos:column="55">args</name><op:operator pos:line="87" pos:column="59">.</op:operator><name pos:line="87" pos:column="60">FilePath</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="88" pos:column="17">if <condition pos:line="88" pos:column="20">(<expr><name pos:line="88" pos:column="21">fileExtension</name> <op:operator pos:line="88" pos:column="35">!=</op:operator> <name pos:line="88" pos:column="38">null</name> <op:operator pos:line="88" pos:column="43">&amp;&amp;</op:operator> <op:operator pos:line="88" pos:column="46">!</op:operator><call><name><name pos:line="88" pos:column="47">fileExtension</name><op:operator pos:line="88" pos:column="60">.</op:operator><name pos:line="88" pos:column="61">Equals</name></name><argument_list pos:line="88" pos:column="67">(<argument><expr><name><name pos:line="88" pos:column="68">String</name><op:operator pos:line="88" pos:column="74">.</op:operator><name pos:line="88" pos:column="75">Empty</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="88" pos:column="82">
                <block pos:line="89" pos:column="17">{                    
                    <decl_stmt><decl><type><name pos:line="90" pos:column="21">string</name></type> <name pos:line="90" pos:column="28">sourceFilePath</name> <init pos:line="90" pos:column="43">= <expr><name><name pos:line="90" pos:column="45">args</name><op:operator pos:line="90" pos:column="49">.</op:operator><name pos:line="90" pos:column="50">FilePath</name></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="91" pos:column="21">string</name></type> <name pos:line="91" pos:column="28">oldSourceFilePath</name> <init pos:line="91" pos:column="46">= <expr><name><name pos:line="91" pos:column="48">args</name><op:operator pos:line="91" pos:column="52">.</op:operator><name pos:line="91" pos:column="53">OldFilePath</name></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="92" pos:column="21">var</name></type> <name pos:line="92" pos:column="25">documentIndexer</name> <init pos:line="92" pos:column="41">= <expr><call><name><name pos:line="92" pos:column="43">ServiceLocator</name><op:operator pos:line="92" pos:column="57">.</op:operator><name><name pos:line="92" pos:column="58">Resolve</name><argument_list pos:line="92" pos:column="65">&lt;<argument><name pos:line="92" pos:column="66">DocumentIndexer</name></argument>&gt;</argument_list></name></name><argument_list pos:line="92" pos:column="82">()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if pos:line="93" pos:column="21">if <condition pos:line="93" pos:column="24">(<expr><call><name><name pos:line="93" pos:column="25">ServiceLocator</name><op:operator pos:line="93" pos:column="39">.</op:operator><name><name pos:line="93" pos:column="40">Resolve</name><argument_list pos:line="93" pos:column="47">&lt;<argument><name pos:line="93" pos:column="48">IndexFilterManager</name></argument>&gt;</argument_list></name></name><argument_list pos:line="93" pos:column="67">()</argument_list></call><op:operator pos:line="93" pos:column="69">.</op:operator><call><name pos:line="93" pos:column="70">ShouldFileBeIndexed</name><argument_list pos:line="93" pos:column="89">(<argument><expr><name><name pos:line="93" pos:column="90">args</name><op:operator pos:line="93" pos:column="94">.</op:operator><name pos:line="93" pos:column="95">FilePath</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="93" pos:column="105">
                    <block pos:line="94" pos:column="21">{
                        <if pos:line="95" pos:column="25">if <condition pos:line="95" pos:column="28">(<expr><call><name><name pos:line="95" pos:column="29">ExtensionPointsRepository</name><op:operator pos:line="95" pos:column="54">.</op:operator><name pos:line="95" pos:column="55">Instance</name><op:operator pos:line="95" pos:column="63">.</op:operator><name pos:line="95" pos:column="64">GetParserImplementation</name></name><argument_list pos:line="95" pos:column="87">(<argument><expr><name pos:line="95" pos:column="88">fileExtension</name></expr></argument>)</argument_list></call> <op:operator pos:line="95" pos:column="103">!=</op:operator> <name pos:line="95" pos:column="106">null</name></expr>)</condition><then pos:line="95" pos:column="111">
                        <block pos:line="96" pos:column="25">{
                            <comment type="line" pos:line="97" pos:column="29">// Get SrcMLService and use its API to get the XElement</comment>
                            <decl_stmt><decl><type><name pos:line="98" pos:column="29">var</name></type> <name pos:line="98" pos:column="33">srcMLService</name> <init pos:line="98" pos:column="46">= <expr><op:operator pos:line="98" pos:column="48">(</op:operator><name pos:line="98" pos:column="49">sender</name> <op:operator pos:line="98" pos:column="56">as</op:operator> <name pos:line="98" pos:column="59">ISrcMLGlobalService</name><op:operator pos:line="98" pos:column="78">)</op:operator></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><call><name><name pos:line="99" pos:column="29">cancelToken</name><op:operator pos:line="99" pos:column="40">.</op:operator><name pos:line="99" pos:column="41">ThrowIfCancellationRequested</name></name><argument_list pos:line="99" pos:column="69">()</argument_list></call></expr>;</expr_stmt>
                            <decl_stmt><decl><type><name pos:line="100" pos:column="29">var</name></type> <name pos:line="100" pos:column="33">xelement</name> <init pos:line="100" pos:column="42">= <expr><call><name pos:line="100" pos:column="44">GetXElementForFile</name><argument_list pos:line="100" pos:column="62">(<argument><expr><name pos:line="100" pos:column="63">args</name></expr></argument>, <argument><expr><name pos:line="100" pos:column="69">srcMLService</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name pos:line="101" pos:column="29">var</name></type> <name pos:line="101" pos:column="33">indexUpdateManager</name> <init pos:line="101" pos:column="52">= <expr><call><name><name pos:line="101" pos:column="54">ServiceLocator</name><op:operator pos:line="101" pos:column="68">.</op:operator><name><name pos:line="101" pos:column="69">Resolve</name><argument_list pos:line="101" pos:column="76">&lt;<argument><name pos:line="101" pos:column="77">IndexUpdateManager</name></argument>&gt;</argument_list></name></name><argument_list pos:line="101" pos:column="96">()</argument_list></call></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name pos:line="102" pos:column="29">var</name></type> <name pos:line="102" pos:column="33">elapsed</name> <init pos:line="102" pos:column="41">= <expr><name pos:line="102" pos:column="43">lastTime</name> <op:operator pos:line="102" pos:column="52">-</op:operator> <name><name pos:line="102" pos:column="54">DateTime</name><op:operator pos:line="102" pos:column="62">.</op:operator><name pos:line="102" pos:column="63">Now</name></name></expr></init></decl>;</decl_stmt>
                            <if pos:line="103" pos:column="29">if <condition pos:line="103" pos:column="32">(<expr><name><name pos:line="103" pos:column="33">FileEventType</name><op:operator pos:line="103" pos:column="46">.</op:operator><name pos:line="103" pos:column="47">FileDeleted</name></name><op:operator pos:line="103" pos:column="58">==</op:operator><name><name pos:line="103" pos:column="60">args</name><op:operator pos:line="103" pos:column="64">.</op:operator><name pos:line="103" pos:column="65">EventType</name></name> <op:operator pos:line="103" pos:column="75">||</op:operator> <op:operator pos:line="103" pos:column="78">!</op:operator><call><name><name pos:line="103" pos:column="79">lastFile</name><op:operator pos:line="103" pos:column="87">.</op:operator><name pos:line="103" pos:column="88">Equals</name></name><argument_list pos:line="103" pos:column="94">(<argument><expr><call><name><name pos:line="103" pos:column="95">sourceFilePath</name><op:operator pos:line="103" pos:column="109">.</op:operator><name pos:line="103" pos:column="110">ToLowerInvariant</name></name><argument_list pos:line="103" pos:column="126">()</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="103" pos:column="130">||</op:operator> <name><name pos:line="103" pos:column="133">elapsed</name><op:operator pos:line="103" pos:column="140">.</op:operator><name pos:line="103" pos:column="141">TotalMilliseconds</name></name> <op:operator pos:line="103" pos:column="159">&gt;</op:operator> <lit:literal type="number" pos:line="103" pos:column="161">1000</lit:literal></expr>)</condition><then pos:line="103" pos:column="166">
                            <block pos:line="104" pos:column="29">{
                                <switch pos:line="105" pos:column="33">switch <condition pos:line="105" pos:column="40">(<expr><name><name pos:line="105" pos:column="41">args</name><op:operator pos:line="105" pos:column="45">.</op:operator><name pos:line="105" pos:column="46">EventType</name></name></expr>)</condition>
                                <block pos:line="106" pos:column="33">{
                                    <case pos:line="107" pos:column="37">case <expr><name><name pos:line="107" pos:column="42">FileEventType</name><op:operator pos:line="107" pos:column="55">.</op:operator><name pos:line="107" pos:column="56">FileAdded</name></name></expr>:
                                        <expr_stmt><expr><call><name><name pos:line="108" pos:column="41">documentIndexer</name><op:operator pos:line="108" pos:column="56">.</op:operator><name pos:line="108" pos:column="57">DeleteDocuments</name></name><argument_list pos:line="108" pos:column="72">(<argument><expr><call><name><name pos:line="108" pos:column="73">sourceFilePath</name><op:operator pos:line="108" pos:column="87">.</op:operator><name pos:line="108" pos:column="88">ToLowerInvariant</name></name><argument_list pos:line="108" pos:column="104">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="line" pos:line="108" pos:column="112">//"just to be safe!"</comment>
                                        <expr_stmt><expr><call><name><name pos:line="109" pos:column="41">indexUpdateManager</name><op:operator pos:line="109" pos:column="59">.</op:operator><name pos:line="109" pos:column="60">Update</name></name><argument_list pos:line="109" pos:column="66">(<argument><expr><call><name><name pos:line="109" pos:column="67">sourceFilePath</name><op:operator pos:line="109" pos:column="81">.</op:operator><name pos:line="109" pos:column="82">ToLowerInvariant</name></name><argument_list pos:line="109" pos:column="98">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="109" pos:column="102">xelement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <expr_stmt><expr><call><name><name pos:line="110" pos:column="41">SwumManager</name><op:operator pos:line="110" pos:column="52">.</op:operator><name pos:line="110" pos:column="53">Instance</name><op:operator pos:line="110" pos:column="61">.</op:operator><name pos:line="110" pos:column="62">AddSourceFile</name></name><argument_list pos:line="110" pos:column="75">(<argument><expr><call><name><name pos:line="110" pos:column="76">sourceFilePath</name><op:operator pos:line="110" pos:column="90">.</op:operator><name pos:line="110" pos:column="91">ToLowerInvariant</name></name><argument_list pos:line="110" pos:column="107">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="110" pos:column="111">xelement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <break pos:line="111" pos:column="41">break;</break>
                                    </case><case pos:line="112" pos:column="37">case <expr><name><name pos:line="112" pos:column="42">FileEventType</name><op:operator pos:line="112" pos:column="55">.</op:operator><name pos:line="112" pos:column="56">FileChanged</name></name></expr>:


                                        <expr_stmt><expr><call><name><name pos:line="115" pos:column="41">documentIndexer</name><op:operator pos:line="115" pos:column="56">.</op:operator><name pos:line="115" pos:column="57">DeleteDocuments</name></name><argument_list pos:line="115" pos:column="72">(<argument><expr><call><name><name pos:line="115" pos:column="73">sourceFilePath</name><op:operator pos:line="115" pos:column="87">.</op:operator><name pos:line="115" pos:column="88">ToLowerInvariant</name></name><argument_list pos:line="115" pos:column="104">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <expr_stmt><expr><call><name><name pos:line="116" pos:column="41">indexUpdateManager</name><op:operator pos:line="116" pos:column="59">.</op:operator><name pos:line="116" pos:column="60">Update</name></name><argument_list pos:line="116" pos:column="66">(<argument><expr><call><name><name pos:line="116" pos:column="67">sourceFilePath</name><op:operator pos:line="116" pos:column="81">.</op:operator><name pos:line="116" pos:column="82">ToLowerInvariant</name></name><argument_list pos:line="116" pos:column="98">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="116" pos:column="102">xelement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <expr_stmt><expr><call><name><name pos:line="117" pos:column="41">SwumManager</name><op:operator pos:line="117" pos:column="52">.</op:operator><name pos:line="117" pos:column="53">Instance</name><op:operator pos:line="117" pos:column="61">.</op:operator><name pos:line="117" pos:column="62">UpdateSourceFile</name></name><argument_list pos:line="117" pos:column="78">(<argument><expr><call><name><name pos:line="117" pos:column="79">sourceFilePath</name><op:operator pos:line="117" pos:column="93">.</op:operator><name pos:line="117" pos:column="94">ToLowerInvariant</name></name><argument_list pos:line="117" pos:column="110">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="117" pos:column="114">xelement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <break pos:line="118" pos:column="41">break;</break>
                                    </case><case pos:line="119" pos:column="37">case <expr><name><name pos:line="119" pos:column="42">FileEventType</name><op:operator pos:line="119" pos:column="55">.</op:operator><name pos:line="119" pos:column="56">FileDeleted</name></name></expr>:
                                        <expr_stmt><expr><call><name><name pos:line="120" pos:column="41">documentIndexer</name><op:operator pos:line="120" pos:column="56">.</op:operator><name pos:line="120" pos:column="57">DeleteDocuments</name></name><argument_list pos:line="120" pos:column="72">(<argument><expr><call><name><name pos:line="120" pos:column="73">sourceFilePath</name><op:operator pos:line="120" pos:column="87">.</op:operator><name pos:line="120" pos:column="88">ToLowerInvariant</name></name><argument_list pos:line="120" pos:column="104">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="120" pos:column="108">commitImmediately</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <expr_stmt><expr><call><name><name pos:line="121" pos:column="41">SwumManager</name><op:operator pos:line="121" pos:column="52">.</op:operator><name pos:line="121" pos:column="53">Instance</name><op:operator pos:line="121" pos:column="61">.</op:operator><name pos:line="121" pos:column="62">RemoveSourceFile</name></name><argument_list pos:line="121" pos:column="78">(<argument><expr><call><name><name pos:line="121" pos:column="79">sourceFilePath</name><op:operator pos:line="121" pos:column="93">.</op:operator><name pos:line="121" pos:column="94">ToLowerInvariant</name></name><argument_list pos:line="121" pos:column="110">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <break pos:line="122" pos:column="41">break;</break>
                                    </case><case pos:line="123" pos:column="37">case <expr><name><name pos:line="123" pos:column="42">FileEventType</name><op:operator pos:line="123" pos:column="55">.</op:operator><name pos:line="123" pos:column="56">FileRenamed</name></name></expr>: <comment type="line" pos:line="123" pos:column="69">// FileRenamed is repurposed. Now means you may already know about it, so check and only parse if not existing</comment>
                                        <if pos:line="124" pos:column="41">if <condition pos:line="124" pos:column="44">(<expr><op:operator pos:line="124" pos:column="45">!</op:operator><call><name><name pos:line="124" pos:column="46">SwumManager</name><op:operator pos:line="124" pos:column="57">.</op:operator><name pos:line="124" pos:column="58">Instance</name><op:operator pos:line="124" pos:column="66">.</op:operator><name pos:line="124" pos:column="67">ContainsFile</name></name><argument_list pos:line="124" pos:column="79">(<argument><expr><call><name><name pos:line="124" pos:column="80">sourceFilePath</name><op:operator pos:line="124" pos:column="94">.</op:operator><name pos:line="124" pos:column="95">ToLowerInvariant</name></name><argument_list pos:line="124" pos:column="111">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="124" pos:column="115">
                                        <block pos:line="125" pos:column="41">{
                                            <expr_stmt><expr><call><name><name pos:line="126" pos:column="45">documentIndexer</name><op:operator pos:line="126" pos:column="60">.</op:operator><name pos:line="126" pos:column="61">DeleteDocuments</name></name><argument_list pos:line="126" pos:column="76">(<argument><expr><call><name><name pos:line="126" pos:column="77">sourceFilePath</name><op:operator pos:line="126" pos:column="91">.</op:operator><name pos:line="126" pos:column="92">ToLowerInvariant</name></name><argument_list pos:line="126" pos:column="108">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="line" pos:line="126" pos:column="116">//"just to be safe!"</comment>
                                            <expr_stmt><expr><call><name><name pos:line="127" pos:column="45">indexUpdateManager</name><op:operator pos:line="127" pos:column="63">.</op:operator><name pos:line="127" pos:column="64">Update</name></name><argument_list pos:line="127" pos:column="70">(<argument><expr><call><name><name pos:line="127" pos:column="71">sourceFilePath</name><op:operator pos:line="127" pos:column="85">.</op:operator><name pos:line="127" pos:column="86">ToLowerInvariant</name></name><argument_list pos:line="127" pos:column="102">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="127" pos:column="106">xelement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                            <expr_stmt><expr><call><name><name pos:line="128" pos:column="45">SwumManager</name><op:operator pos:line="128" pos:column="56">.</op:operator><name pos:line="128" pos:column="57">Instance</name><op:operator pos:line="128" pos:column="65">.</op:operator><name pos:line="128" pos:column="66">AddSourceFile</name></name><argument_list pos:line="128" pos:column="79">(<argument><expr><call><name><name pos:line="128" pos:column="80">sourceFilePath</name><op:operator pos:line="128" pos:column="94">.</op:operator><name pos:line="128" pos:column="95">ToLowerInvariant</name></name><argument_list pos:line="128" pos:column="111">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="128" pos:column="115">xelement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        }</block></then></if>
                                        <break pos:line="130" pos:column="41">break;</break>
                                </case>}</block></switch>
                                <if pos:line="132" pos:column="33">if <condition pos:line="132" pos:column="36">(<expr><name><name pos:line="132" pos:column="37">args</name><op:operator pos:line="132" pos:column="41">.</op:operator><name pos:line="132" pos:column="42">EventType</name></name> <op:operator pos:line="132" pos:column="52">!=</op:operator> <name><name pos:line="132" pos:column="55">FileEventType</name><op:operator pos:line="132" pos:column="68">.</op:operator><name pos:line="132" pos:column="69">FileDeleted</name></name></expr>)</condition><then pos:line="132" pos:column="81">
                                <block pos:line="133" pos:column="33">{
                                    <expr_stmt><expr><name pos:line="134" pos:column="37">lastFile</name> <op:operator pos:line="134" pos:column="46">=</op:operator> <call><name><name pos:line="134" pos:column="48">sourceFilePath</name><op:operator pos:line="134" pos:column="62">.</op:operator><name pos:line="134" pos:column="63">ToLowerInvariant</name></name><argument_list pos:line="134" pos:column="79">()</argument_list></call></expr>;</expr_stmt>
                                    <expr_stmt><expr><name pos:line="135" pos:column="37">lastTime</name> <op:operator pos:line="135" pos:column="46">=</op:operator> <name><name pos:line="135" pos:column="48">DateTime</name><op:operator pos:line="135" pos:column="56">.</op:operator><name pos:line="135" pos:column="57">Now</name></name></expr>;</expr_stmt>
                                }</block></then></if>
                            }</block></then></if>
                        }</block></then></if>
                    }</block></then>
                    <else pos:line="140" pos:column="21">else
                    <block pos:line="141" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="142" pos:column="25">documentIndexer</name><op:operator pos:line="142" pos:column="40">.</op:operator><name pos:line="142" pos:column="41">DeleteDocuments</name></name><argument_list pos:line="142" pos:column="56">(<argument><expr><name pos:line="142" pos:column="57">sourceFilePath</name></expr></argument>, <argument><expr><name pos:line="142" pos:column="73">commitImmediately</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then></if>
            }</block></lambda></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="146" pos:column="13">StartNew</name><argument_list pos:line="146" pos:column="21">(<argument><expr><name pos:line="146" pos:column="22">action</name></expr></argument>, <argument><expr><name pos:line="146" pos:column="30">cancelTokenSource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>



        <function><type><specifier pos:line="151" pos:column="9">private</specifier> <specifier pos:line="151" pos:column="17">static</specifier> <name pos:line="151" pos:column="24">XElement</name></type> <name pos:line="151" pos:column="33">GetXElementForFile</name><parameter_list pos:line="151" pos:column="51">(<param><decl><type><name pos:line="151" pos:column="52">FileEventRaisedArgs</name></type> <name pos:line="151" pos:column="72">args</name></decl></param>, <param><decl><type><name pos:line="151" pos:column="78">ISrcMLGlobalService</name></type> <name pos:line="151" pos:column="98">srcMLService</name></decl></param>)</parameter_list>
        <block pos:line="152" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="153" pos:column="13">XElement</name></type> <name pos:line="153" pos:column="22">xelement</name> <init pos:line="153" pos:column="31">= <expr><name pos:line="153" pos:column="33">null</name></expr></init></decl>;</decl_stmt>
            <if pos:line="154" pos:column="13">if <condition pos:line="154" pos:column="16">(<expr><op:operator pos:line="154" pos:column="17">!</op:operator><call><name><name pos:line="154" pos:column="18">args</name><op:operator pos:line="154" pos:column="22">.</op:operator><name pos:line="154" pos:column="23">EventType</name><op:operator pos:line="154" pos:column="32">.</op:operator><name pos:line="154" pos:column="33">Equals</name></name><argument_list pos:line="154" pos:column="39">(<argument><expr><name><name pos:line="154" pos:column="40">FileEventType</name><op:operator pos:line="154" pos:column="53">.</op:operator><name pos:line="154" pos:column="54">FileDeleted</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="154" pos:column="67">
            <block pos:line="155" pos:column="13">{
                <if pos:line="156" pos:column="17">if <condition pos:line="156" pos:column="20">(<expr><call><name><name pos:line="156" pos:column="21">args</name><op:operator pos:line="156" pos:column="25">.</op:operator><name pos:line="156" pos:column="26">FilePath</name><op:operator pos:line="156" pos:column="34">.</op:operator><name pos:line="156" pos:column="35">EndsWith</name></name><argument_list pos:line="156" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="156" pos:column="44">".xml"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="156" pos:column="52">||</op:operator> <call><name><name pos:line="156" pos:column="55">args</name><op:operator pos:line="156" pos:column="59">.</op:operator><name pos:line="156" pos:column="60">FilePath</name><op:operator pos:line="156" pos:column="68">.</op:operator><name pos:line="156" pos:column="69">EndsWith</name></name><argument_list pos:line="156" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="156" pos:column="78">".xaml"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="156" pos:column="87">
                <block pos:line="157" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="158" pos:column="21">var</name></type> <name pos:line="158" pos:column="25">allText</name> <init pos:line="158" pos:column="33">= <expr><call><name><name pos:line="158" pos:column="35">File</name><op:operator pos:line="158" pos:column="39">.</op:operator><name pos:line="158" pos:column="40">ReadAllText</name></name><argument_list pos:line="158" pos:column="51">(<argument><expr><name><name pos:line="158" pos:column="52">args</name><op:operator pos:line="158" pos:column="56">.</op:operator><name pos:line="158" pos:column="57">FilePath</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <try pos:line="159" pos:column="21">try
                    <block pos:line="160" pos:column="21">{
                        <expr_stmt><expr><name pos:line="161" pos:column="25">xelement</name> <op:operator pos:line="161" pos:column="34">=</op:operator> <call><name><name pos:line="161" pos:column="36">XDocument</name><op:operator pos:line="161" pos:column="45">.</op:operator><name pos:line="161" pos:column="46">Parse</name></name><argument_list pos:line="161" pos:column="51">(<argument><expr><name pos:line="161" pos:column="52">allText</name></expr></argument>, <argument><expr><name><name pos:line="161" pos:column="61">LoadOptions</name><op:operator pos:line="161" pos:column="72">.</op:operator><name pos:line="161" pos:column="73">SetLineInfo</name></name> <op:operator pos:line="161" pos:column="85">|</op:operator>
                                                        <name><name pos:line="162" pos:column="57">LoadOptions</name><op:operator pos:line="162" pos:column="68">.</op:operator><name pos:line="162" pos:column="69">PreserveWhitespace</name></name></expr></argument>)</argument_list></call><op:operator pos:line="162" pos:column="88">.</op:operator><name pos:line="162" pos:column="89">Root</name></expr>;</expr_stmt>
                    }</block>
                    <catch pos:line="164" pos:column="21">catch <parameter_list pos:line="164" pos:column="27">(<param><decl><type><name pos:line="164" pos:column="28">Exception</name></type> <name pos:line="164" pos:column="38">e</name></decl></param>)</parameter_list>
                    <block pos:line="165" pos:column="21">{
                        <return pos:line="166" pos:column="25">return <expr><name pos:line="166" pos:column="32">xelement</name></expr>;</return>
                    }</block></catch></try>
                }</block></then>
                <else pos:line="169" pos:column="17">else
                    <expr_stmt><expr><name pos:line="170" pos:column="21">xelement</name> <op:operator pos:line="170" pos:column="30">=</op:operator> <call><name><name pos:line="170" pos:column="32">srcMLService</name><op:operator pos:line="170" pos:column="44">.</op:operator><name pos:line="170" pos:column="45">GetXElementForSourceFile</name></name><argument_list pos:line="170" pos:column="69">(<argument><expr><name><name pos:line="170" pos:column="70">args</name><op:operator pos:line="170" pos:column="74">.</op:operator><name pos:line="170" pos:column="75">FilePath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
            }</block></then></if>
            <return pos:line="172" pos:column="13">return <expr><name pos:line="172" pos:column="20">xelement</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="175" pos:column="9">private</specifier> <name pos:line="175" pos:column="17">void</name></type> <name pos:line="175" pos:column="22">RemoveTask</name><parameter_list pos:line="175" pos:column="32">(<param><decl><type><name pos:line="175" pos:column="33">Task</name></type> <name pos:line="175" pos:column="38">task</name></decl></param>, <param><decl><type><name pos:line="175" pos:column="44">CancellationTokenSource</name></type> <name pos:line="175" pos:column="68">cancelToken</name></decl></param>)</parameter_list>
        <block pos:line="176" pos:column="9">{
            <lock pos:line="177" pos:column="13">lock (<expr><name pos:line="177" pos:column="19">tasksTrackerLock</name></expr>)
            <block pos:line="178" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="179" pos:column="17">tasks</name><op:operator pos:line="179" pos:column="22">.</op:operator><name pos:line="179" pos:column="23">TryTake</name></name><argument_list pos:line="179" pos:column="30">(<argument><expr pos:line="179" pos:column="31">out <name pos:line="179" pos:column="35">task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="180" pos:column="17">cancellers</name><op:operator pos:line="180" pos:column="27">.</op:operator><name pos:line="180" pos:column="28">TryTake</name></name><argument_list pos:line="180" pos:column="35">(<argument><expr pos:line="180" pos:column="36">out <name pos:line="180" pos:column="40">cancelToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></lock>
        }</block></function>

        <decl_stmt><decl><type><specifier pos:line="184" pos:column="9">private</specifier> <name pos:line="184" pos:column="17">object</name></type> <name pos:line="184" pos:column="24">tasksTrackerLock</name> <init pos:line="184" pos:column="41">= <expr><op:operator pos:line="184" pos:column="43">new</op:operator> <call><name pos:line="184" pos:column="47">object</name><argument_list pos:line="184" pos:column="53">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="185" pos:column="9">private</specifier> <name pos:line="185" pos:column="17">string</name></type> <name pos:line="185" pos:column="24">lastFile</name> <init pos:line="185" pos:column="33">= <expr><lit:literal type="string" pos:line="185" pos:column="35">""</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="186" pos:column="9">private</specifier> <name pos:line="186" pos:column="17">DateTime</name></type> <name pos:line="186" pos:column="26">lastTime</name> <init pos:line="186" pos:column="35">= <expr><name><name pos:line="186" pos:column="37">DateTime</name><op:operator pos:line="186" pos:column="45">.</op:operator><name pos:line="186" pos:column="46">Now</name></name></expr></init></decl>;</decl_stmt>
        

        <function><type><specifier pos:line="189" pos:column="9">public</specifier> <name pos:line="189" pos:column="16">void</name></type> <name pos:line="189" pos:column="21">StartupCompleted</name><parameter_list pos:line="189" pos:column="37">(<param><decl><type><name pos:line="189" pos:column="38">object</name></type> <name pos:line="189" pos:column="45">sender</name></decl></param>, <param><decl><type><name pos:line="189" pos:column="53">IsReadyChangedEventArgs</name></type> <name pos:line="189" pos:column="77">args</name></decl></param>)</parameter_list>
        <block pos:line="190" pos:column="9">{
            <if pos:line="191" pos:column="13">if <condition pos:line="191" pos:column="16">(<expr><name><name pos:line="191" pos:column="17">args</name><op:operator pos:line="191" pos:column="21">.</op:operator><name pos:line="191" pos:column="22">ReadyState</name></name></expr>)</condition><then pos:line="191" pos:column="33">
            <block pos:line="192" pos:column="13">{
                <if pos:line="193" pos:column="17">if <condition pos:line="193" pos:column="20">(<expr><call><name><name pos:line="193" pos:column="21">ServiceLocator</name><op:operator pos:line="193" pos:column="35">.</op:operator><name><name pos:line="193" pos:column="36">Resolve</name><argument_list pos:line="193" pos:column="43">&lt;<argument><name pos:line="193" pos:column="44">SrcMLArchiveEventsHandlers</name></argument>&gt;</argument_list></name></name><argument_list pos:line="193" pos:column="71">()</argument_list></call><op:operator pos:line="193" pos:column="73">.</op:operator><call><name pos:line="193" pos:column="74">TaskCount</name><argument_list pos:line="193" pos:column="83">()</argument_list></call> <op:operator pos:line="193" pos:column="86">==</op:operator> <lit:literal type="number" pos:line="193" pos:column="89">0</lit:literal></expr>)</condition><then pos:line="193" pos:column="91">
                <block pos:line="194" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="195" pos:column="21">ServiceLocator</name><op:operator pos:line="195" pos:column="35">.</op:operator><name><name pos:line="195" pos:column="36">Resolve</name><argument_list pos:line="195" pos:column="43">&lt;<argument><name pos:line="195" pos:column="44">InitialIndexingWatcher</name></argument>&gt;</argument_list></name></name><argument_list pos:line="195" pos:column="67">()</argument_list></call><op:operator pos:line="195" pos:column="69">.</op:operator><call><name pos:line="195" pos:column="70">InitialIndexingCompleted</name><argument_list pos:line="195" pos:column="94">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="196" pos:column="21">SwumManager</name><op:operator pos:line="196" pos:column="32">.</op:operator><name pos:line="196" pos:column="33">Instance</name><op:operator pos:line="196" pos:column="41">.</op:operator><name pos:line="196" pos:column="42">PrintSwumCache</name></name><argument_list pos:line="196" pos:column="56">()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="201" pos:column="9">public</specifier> <name pos:line="201" pos:column="16">void</name></type> <name pos:line="201" pos:column="21">MonitoringStopped</name><parameter_list pos:line="201" pos:column="38">(<param><decl><type><name pos:line="201" pos:column="39">object</name></type> <name pos:line="201" pos:column="46">sender</name></decl></param>, <param><decl><type><name pos:line="201" pos:column="54">EventArgs</name></type> <name pos:line="201" pos:column="64">args</name></decl></param>)</parameter_list>
        <block pos:line="202" pos:column="9">{
            <lock pos:line="203" pos:column="13">lock (<expr><name pos:line="203" pos:column="19">tasksTrackerLock</name></expr>)
            <block pos:line="204" pos:column="13">{
                <foreach pos:line="205" pos:column="17">foreach (<init><decl><type><name pos:line="205" pos:column="26">var</name></type> <name pos:line="205" pos:column="30">cancelToken</name> <range pos:line="205" pos:column="42">in <expr><name pos:line="205" pos:column="45">cancellers</name></expr></range></decl></init>)
                    <expr_stmt><expr><call><name><name pos:line="206" pos:column="21">cancelToken</name><op:operator pos:line="206" pos:column="32">.</op:operator><name pos:line="206" pos:column="33">Cancel</name></name><argument_list pos:line="206" pos:column="39">()</argument_list></call></expr>;</expr_stmt></foreach>
            }</block></lock>

            <expr_stmt><expr><call><name><name pos:line="209" pos:column="13">LogEvents</name><op:operator pos:line="209" pos:column="22">.</op:operator><name pos:line="209" pos:column="23">UIMonitoringStopped</name></name><argument_list pos:line="209" pos:column="42">(<argument><expr><name pos:line="209" pos:column="43">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="210" pos:column="13">var</name></type> <name pos:line="210" pos:column="17">currentIndexer</name> <init pos:line="210" pos:column="32">= <expr><call><name><name pos:line="210" pos:column="34">ServiceLocator</name><op:operator pos:line="210" pos:column="48">.</op:operator><name><name pos:line="210" pos:column="49">ResolveOptional</name><argument_list pos:line="210" pos:column="64">&lt;<argument><name pos:line="210" pos:column="65">DocumentIndexer</name></argument>&gt;</argument_list></name></name><argument_list pos:line="210" pos:column="81">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="211" pos:column="13">if <condition pos:line="211" pos:column="16">(<expr><name pos:line="211" pos:column="17">currentIndexer</name> <op:operator pos:line="211" pos:column="32">!=</op:operator> <name pos:line="211" pos:column="35">null</name></expr>)</condition><then pos:line="211" pos:column="40">
            <block pos:line="212" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="213" pos:column="17">currentIndexer</name><op:operator pos:line="213" pos:column="31">.</op:operator><name pos:line="213" pos:column="32">Dispose</name></name><argument_list pos:line="213" pos:column="39">(<argument><expr><lit:literal type="boolean" pos:line="213" pos:column="40">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:line="213" pos:column="49">// Because in SolutionMonitor: public void StopMonitoring(bool killReaders = false)</comment>
            }</block></then></if>
            <if pos:line="215" pos:column="13">if <condition pos:line="215" pos:column="16">(<expr><name><name pos:line="215" pos:column="17">SwumManager</name><op:operator pos:line="215" pos:column="28">.</op:operator><name pos:line="215" pos:column="29">Instance</name></name> <op:operator pos:line="215" pos:column="38">!=</op:operator> <name pos:line="215" pos:column="41">null</name></expr>)</condition><then pos:line="215" pos:column="46">
            <block pos:line="216" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="217" pos:column="17">SwumManager</name><op:operator pos:line="217" pos:column="28">.</op:operator><name pos:line="217" pos:column="29">Instance</name><op:operator pos:line="217" pos:column="37">.</op:operator><name pos:line="217" pos:column="38">PrintSwumCache</name></name><argument_list pos:line="217" pos:column="52">()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="221" pos:column="9">internal</specifier> <name pos:line="221" pos:column="18">void</name></type> <name pos:line="221" pos:column="23">StartingToIndex</name><parameter_list pos:line="221" pos:column="38">()</parameter_list>
        <block pos:line="222" pos:column="9">{            
            <expr_stmt><expr><call><name><name pos:line="223" pos:column="13">hideProgressBarTimer</name><op:operator pos:line="223" pos:column="33">.</op:operator><name pos:line="223" pos:column="34">Stop</name></name><argument_list pos:line="223" pos:column="38">()</argument_list></call></expr>;</expr_stmt>            
            <try pos:line="224" pos:column="13">try
            <block pos:line="225" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="226" pos:column="17">ServiceLocator</name><op:operator pos:line="226" pos:column="31">.</op:operator><name><name pos:line="226" pos:column="32">Resolve</name><argument_list pos:line="226" pos:column="39">&lt;<argument><name pos:line="226" pos:column="40">UIPackage</name></argument>&gt;</argument_list></name></name><argument_list pos:line="226" pos:column="50">()</argument_list></call><op:operator pos:line="226" pos:column="52">.</op:operator><call><name pos:line="226" pos:column="53">UpdateIndexingFilesListIfEmpty</name><argument_list pos:line="226" pos:column="83">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="227" pos:column="17">ServiceLocator</name><op:operator pos:line="227" pos:column="31">.</op:operator><name><name pos:line="227" pos:column="32">Resolve</name><argument_list pos:line="227" pos:column="39">&lt;<argument><name pos:line="227" pos:column="40">UIPackage</name></argument>&gt;</argument_list></name></name><argument_list pos:line="227" pos:column="50">()</argument_list></call><op:operator pos:line="227" pos:column="52">.</op:operator><call><name pos:line="227" pos:column="53">HandleIndexingStateChange</name><argument_list pos:line="227" pos:column="78">(<argument><expr><lit:literal type="boolean" pos:line="227" pos:column="79">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch pos:line="229" pos:column="13">catch <parameter_list pos:line="229" pos:column="19">(<param><decl><type><name pos:line="229" pos:column="20">Exception</name></type> <name pos:line="229" pos:column="30">ee</name></decl></param>)</parameter_list>
            <block pos:line="230" pos:column="13">{
                <comment type="line" pos:line="231" pos:column="17">//ignore</comment>
            }</block></catch></try>                                        
        }</block></function>

        <function><type><specifier pos:line="235" pos:column="9">internal</specifier> <name pos:line="235" pos:column="18">void</name></type> <name pos:line="235" pos:column="23">FinishedIndexing</name><parameter_list pos:line="235" pos:column="39">()</parameter_list>
        <block pos:line="236" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="237" pos:column="13">hideProgressBarTimer</name><op:operator pos:line="237" pos:column="33">.</op:operator><name pos:line="237" pos:column="34">Stop</name></name><argument_list pos:line="237" pos:column="38">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="238" pos:column="13">hideProgressBarTimer</name><op:operator pos:line="238" pos:column="33">.</op:operator><name pos:line="238" pos:column="34">Start</name></name><argument_list pos:line="238" pos:column="39">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>
       
        <function><type><name pos:line="241" pos:column="9">void</name></type> <name pos:line="241" pos:column="14">waitToUpdateProgressBar_Elapsed</name><parameter_list pos:line="241" pos:column="45">(<param><decl><type><name pos:line="241" pos:column="46">object</name></type> <name pos:line="241" pos:column="53">sender</name></decl></param>, <param><decl><type><name><name pos:line="241" pos:column="61">System</name><op:operator pos:line="241" pos:column="67">.</op:operator><name pos:line="241" pos:column="68">Timers</name><op:operator pos:line="241" pos:column="74">.</op:operator><name pos:line="241" pos:column="75">ElapsedEventArgs</name></name></type> <name pos:line="241" pos:column="92">e</name></decl></param>)</parameter_list>
        <block pos:line="242" pos:column="9">{
            <try pos:line="243" pos:column="13">try
            <block pos:line="244" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="245" pos:column="17">ServiceLocator</name><op:operator pos:line="245" pos:column="31">.</op:operator><name><name pos:line="245" pos:column="32">Resolve</name><argument_list pos:line="245" pos:column="39">&lt;<argument><name pos:line="245" pos:column="40">UIPackage</name></argument>&gt;</argument_list></name></name><argument_list pos:line="245" pos:column="50">()</argument_list></call><op:operator pos:line="245" pos:column="52">.</op:operator><call><name pos:line="245" pos:column="53">HandleIndexingStateChange</name><argument_list pos:line="245" pos:column="78">(<argument><expr><lit:literal type="boolean" pos:line="245" pos:column="79">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch pos:line="247" pos:column="13">catch <parameter_list pos:line="247" pos:column="19">(<param><decl><type><name pos:line="247" pos:column="20">Exception</name></type> <name pos:line="247" pos:column="30">errorToIgnore</name></decl></param>)</parameter_list>
            <block pos:line="248" pos:column="13">{
                <comment type="line" pos:line="249" pos:column="17">//ignore</comment>
            }</block></catch></try>
        }</block></function>






        <comment type="line" pos:line="258" pos:column="9">// Provides a task scheduler that ensures a maximum concurrency level while  </comment>
        <comment type="line" pos:line="259" pos:column="9">// running on top of the thread pool. </comment>
        <class><specifier pos:line="260" pos:column="9">public</specifier> class <name pos:line="260" pos:column="22">LimitedConcurrencyLevelTaskScheduler</name> <super pos:line="260" pos:column="59">: <name pos:line="260" pos:column="61">TaskScheduler</name></super>
        <block pos:line="261" pos:column="9">{
            <comment type="line" pos:line="262" pos:column="13">// Indicates whether the current thread is processing work items.</comment>
            <decl_stmt><decl><type><attribute pos:line="263" pos:column="13">[<expr><name pos:line="263" pos:column="14">ThreadStatic</name></expr>]</attribute>
            <specifier pos:line="264" pos:column="13">public</specifier> <specifier pos:line="264" pos:column="20">static</specifier> <name pos:line="264" pos:column="27">bool</name></type> <name pos:line="264" pos:column="32">_currentThreadIsProcessingItems</name></decl>;</decl_stmt>

            <comment type="line" pos:line="266" pos:column="13">// The list of tasks to be executed  </comment>
            <decl_stmt><decl><type><specifier pos:line="267" pos:column="13">private</specifier> <specifier pos:line="267" pos:column="21">readonly</specifier> <name><name pos:line="267" pos:column="30">LinkedList</name><argument_list pos:line="267" pos:column="40">&lt;<argument><name pos:line="267" pos:column="41">Task</name></argument>&gt;</argument_list></name></type> <name pos:line="267" pos:column="47">_tasks</name> <init pos:line="267" pos:column="54">= <expr><op:operator pos:line="267" pos:column="56">new</op:operator> <call><name><name pos:line="267" pos:column="60">LinkedList</name><argument_list pos:line="267" pos:column="70">&lt;<argument><name pos:line="267" pos:column="71">Task</name></argument>&gt;</argument_list></name><argument_list pos:line="267" pos:column="76">()</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="267" pos:column="80">// protected by lock(_tasks) </comment>

            <comment type="line" pos:line="269" pos:column="13">// The maximum concurrency level allowed by this scheduler.  </comment>
            <decl_stmt><decl><type><specifier pos:line="270" pos:column="13">private</specifier> <specifier pos:line="270" pos:column="21">readonly</specifier> <name pos:line="270" pos:column="30">int</name></type> <name pos:line="270" pos:column="34">_maxDegreeOfParallelism</name></decl>;</decl_stmt>

            <comment type="line" pos:line="272" pos:column="13">// Indicates whether the scheduler is currently processing work items.  </comment>
            <decl_stmt><decl><type><specifier pos:line="273" pos:column="13">private</specifier> <name pos:line="273" pos:column="21">int</name></type> <name pos:line="273" pos:column="25">_delegatesQueuedOrRunning</name> <init pos:line="273" pos:column="51">= <expr><lit:literal type="number" pos:line="273" pos:column="53">0</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="274" pos:column="13">private</specifier> <name pos:line="274" pos:column="21">SrcMLArchiveEventsHandlers</name></type> <name pos:line="274" pos:column="48">_handler</name></decl>;</decl_stmt>

            <constructor><specifier pos:line="276" pos:column="13">public</specifier> <name pos:line="276" pos:column="20">LimitedConcurrencyLevelTaskScheduler</name><parameter_list pos:line="276" pos:column="56">(<param><decl><type><name pos:line="276" pos:column="57">int</name></type> <name pos:line="276" pos:column="61">maxDegreeOfParallelism</name></decl></param>, <param><decl><type><name pos:line="276" pos:column="85">SrcMLArchiveEventsHandlers</name></type> <name pos:line="276" pos:column="112">handler</name></decl></param>)</parameter_list>
                <member_list pos:line="277" pos:column="17">: <call><name pos:line="277" pos:column="19">this</name><argument_list pos:line="277" pos:column="23">(<argument><expr><name pos:line="277" pos:column="24">maxDegreeOfParallelism</name></expr></argument>)</argument_list></call>
            </member_list><block pos:line="278" pos:column="13">{
                <expr_stmt><expr><name pos:line="279" pos:column="17">_handler</name> <op:operator pos:line="279" pos:column="26">=</op:operator> <name pos:line="279" pos:column="28">handler</name></expr>;</expr_stmt>
            }</block></constructor>

            <comment type="line" pos:line="282" pos:column="13">// Creates a new instance with the specified degree of parallelism.  </comment>
            <constructor><specifier pos:line="283" pos:column="13">public</specifier> <name pos:line="283" pos:column="20">LimitedConcurrencyLevelTaskScheduler</name><parameter_list pos:line="283" pos:column="56">(<param><decl><type><name pos:line="283" pos:column="57">int</name></type> <name pos:line="283" pos:column="61">maxDegreeOfParallelism</name></decl></param>)</parameter_list>
            <block pos:line="284" pos:column="13">{
                <if pos:line="285" pos:column="17">if <condition pos:line="285" pos:column="20">(<expr><name pos:line="285" pos:column="21">maxDegreeOfParallelism</name> <op:operator pos:line="285" pos:column="44">&lt;</op:operator> <lit:literal type="number" pos:line="285" pos:column="46">1</lit:literal></expr>)</condition><then pos:line="285" pos:column="48"> <throw pos:line="285" pos:column="49">throw <expr><op:operator pos:line="285" pos:column="55">new</op:operator> <call><name pos:line="285" pos:column="59">ArgumentOutOfRangeException</name><argument_list pos:line="285" pos:column="86">(<argument><expr><lit:literal type="string" pos:line="285" pos:column="87">"maxDegreeOfParallelism"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
                <expr_stmt><expr><name pos:line="286" pos:column="17">_maxDegreeOfParallelism</name> <op:operator pos:line="286" pos:column="41">=</op:operator> <name pos:line="286" pos:column="43">maxDegreeOfParallelism</name></expr>;</expr_stmt>
            }</block></constructor>

            <function><type><specifier pos:line="289" pos:column="13">public</specifier> <name pos:line="289" pos:column="20">int</name></type> <name pos:line="289" pos:column="24">GetTasks</name><parameter_list pos:line="289" pos:column="32">()</parameter_list><block pos:line="289" pos:column="34">{

                <lock pos:line="291" pos:column="17">lock (<expr><name pos:line="291" pos:column="23">_tasks</name></expr>)
                    <return pos:line="292" pos:column="21">return <expr><call><name><name pos:line="292" pos:column="28">_tasks</name><op:operator pos:line="292" pos:column="34">.</op:operator><name pos:line="292" pos:column="35">Count</name></name><argument_list pos:line="292" pos:column="40">()</argument_list></call></expr>;</return></lock>
            }</block></function>
            

            <comment type="line" pos:line="296" pos:column="13">// Queues a task to the scheduler.  </comment>
            <function><type><specifier pos:line="297" pos:column="13">protected</specifier> <specifier pos:line="297" pos:column="23">sealed</specifier> <specifier pos:line="297" pos:column="30">override</specifier> <name pos:line="297" pos:column="39">void</name></type> <name pos:line="297" pos:column="44">QueueTask</name><parameter_list pos:line="297" pos:column="53">(<param><decl><type><name pos:line="297" pos:column="54">Task</name></type> <name pos:line="297" pos:column="59">task</name></decl></param>)</parameter_list>
            <block pos:line="298" pos:column="13">{
                <comment type="line" pos:line="299" pos:column="17">// Add the task to the list of tasks to be processed.  If there aren't enough  </comment>
                <comment type="line" pos:line="300" pos:column="17">// delegates currently queued or running to process tasks, schedule another.  </comment>
                <lock pos:line="301" pos:column="17">lock (<expr><name pos:line="301" pos:column="23">_tasks</name></expr>)
                <block pos:line="302" pos:column="17">{
                    <if pos:line="303" pos:column="21">if <condition pos:line="303" pos:column="24">(<expr><name><name pos:line="303" pos:column="25">_tasks</name><op:operator pos:line="303" pos:column="31">.</op:operator><name pos:line="303" pos:column="32">Count</name></name> <op:operator pos:line="303" pos:column="38">&gt;</op:operator> <lit:literal type="number" pos:line="303" pos:column="40">2</lit:literal></expr>)</condition><then pos:line="303" pos:column="42">
                        <expr_stmt><expr><call><name><name pos:line="304" pos:column="25">_handler</name><op:operator pos:line="304" pos:column="33">.</op:operator><name pos:line="304" pos:column="34">StartingToIndex</name></name><argument_list pos:line="304" pos:column="49">()</argument_list></call></expr>;</expr_stmt></then></if>
                    <expr_stmt><expr><call><name><name pos:line="305" pos:column="21">_tasks</name><op:operator pos:line="305" pos:column="27">.</op:operator><name pos:line="305" pos:column="28">AddLast</name></name><argument_list pos:line="305" pos:column="35">(<argument><expr><name pos:line="305" pos:column="36">task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if pos:line="306" pos:column="21">if <condition pos:line="306" pos:column="24">(<expr><name pos:line="306" pos:column="25">_delegatesQueuedOrRunning</name> <op:operator pos:line="306" pos:column="51">&lt;</op:operator> <name pos:line="306" pos:column="53">_maxDegreeOfParallelism</name></expr>)</condition><then pos:line="306" pos:column="77">
                    <block pos:line="307" pos:column="21">{
                        <expr_stmt><expr><op:operator pos:line="308" pos:column="25">++</op:operator><name pos:line="308" pos:column="27">_delegatesQueuedOrRunning</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name pos:line="309" pos:column="25">NotifyThreadPoolOfPendingWork</name><argument_list pos:line="309" pos:column="54">()</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></lock>
            }</block></function>



            <comment type="line" pos:line="316" pos:column="13">// Inform the ThreadPool that there's work to be executed for this scheduler.  </comment>
            <function><type><specifier pos:line="317" pos:column="13">private</specifier> <name pos:line="317" pos:column="21">void</name></type> <name pos:line="317" pos:column="26">NotifyThreadPoolOfPendingWork</name><parameter_list pos:line="317" pos:column="55">()</parameter_list>
            <block pos:line="318" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="319" pos:column="17">ThreadPool</name><op:operator pos:line="319" pos:column="27">.</op:operator><name pos:line="319" pos:column="28">UnsafeQueueUserWorkItem</name></name><argument_list pos:line="319" pos:column="51">(<argument><expr><lambda><name pos:line="319" pos:column="52">_</name> <op:operator pos:line="319" pos:column="54">=&gt;</op:operator>
                <block pos:line="320" pos:column="17">{
                    <comment type="line" pos:line="321" pos:column="21">// Note that the current thread is now processing work items. </comment>
                    <comment type="line" pos:line="322" pos:column="21">// This is necessary to enable inlining of tasks into this thread.</comment>
                    <expr_stmt><expr><name pos:line="323" pos:column="21">_currentThreadIsProcessingItems</name> <op:operator pos:line="323" pos:column="53">=</op:operator> <lit:literal type="boolean" pos:line="323" pos:column="55">true</lit:literal></expr>;</expr_stmt>
                    <try pos:line="324" pos:column="21">try
                    <block pos:line="325" pos:column="21">{
                        <comment type="line" pos:line="326" pos:column="25">// Process all available items in the queue. </comment>
                        <while pos:line="327" pos:column="25">while <condition pos:line="327" pos:column="31">(<expr><lit:literal type="boolean" pos:line="327" pos:column="32">true</lit:literal></expr>)</condition>
                        <block pos:line="328" pos:column="25">{
                            <decl_stmt><decl><type><name pos:line="329" pos:column="29">Task</name></type> <name pos:line="329" pos:column="34">item</name></decl>;</decl_stmt>
                            <lock pos:line="330" pos:column="29">lock (<expr><name pos:line="330" pos:column="35">_tasks</name></expr>)
                            <block pos:line="331" pos:column="29">{
                                <comment type="line" pos:line="332" pos:column="33">// When there are no more items to be processed, </comment>
                                <comment type="line" pos:line="333" pos:column="33">// note that we're done processing, and get out. </comment>
                                <if pos:line="334" pos:column="33">if <condition pos:line="334" pos:column="36">(<expr><name><name pos:line="334" pos:column="37">_tasks</name><op:operator pos:line="334" pos:column="43">.</op:operator><name pos:line="334" pos:column="44">Count</name></name> <op:operator pos:line="334" pos:column="50">==</op:operator> <lit:literal type="number" pos:line="334" pos:column="53">0</lit:literal></expr>)</condition><then pos:line="334" pos:column="55">
                                <block pos:line="335" pos:column="33">{
                                    <expr_stmt><expr><op:operator pos:line="336" pos:column="37">--</op:operator><name pos:line="336" pos:column="39">_delegatesQueuedOrRunning</name></expr>;</expr_stmt>
                                    <break pos:line="337" pos:column="37">break;</break>
                                }</block></then></if>

                                <comment type="line" pos:line="340" pos:column="33">// Get the next item from the queue</comment>
                                <expr_stmt><expr><name pos:line="341" pos:column="33">item</name> <op:operator pos:line="341" pos:column="38">=</op:operator> <name><name pos:line="341" pos:column="40">_tasks</name><op:operator pos:line="341" pos:column="46">.</op:operator><name pos:line="341" pos:column="47">First</name><op:operator pos:line="341" pos:column="52">.</op:operator><name pos:line="341" pos:column="53">Value</name></name></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name><name pos:line="342" pos:column="33">_tasks</name><op:operator pos:line="342" pos:column="39">.</op:operator><name pos:line="342" pos:column="40">RemoveFirst</name></name><argument_list pos:line="342" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
                            }</block></lock>

                            <comment type="line" pos:line="345" pos:column="29">// Execute the task we pulled out of the queue </comment>
                            <expr_stmt><expr><call><name><name pos:line="346" pos:column="29">base</name><op:operator pos:line="346" pos:column="33">.</op:operator><name pos:line="346" pos:column="34">TryExecuteTask</name></name><argument_list pos:line="346" pos:column="48">(<argument><expr><name pos:line="346" pos:column="49">item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></while>
                    }</block>
                    <comment type="line" pos:line="349" pos:column="21">// We're done processing items on the current thread </comment>
                    <finally pos:line="350" pos:column="21">finally <block pos:line="350" pos:column="29">{
                        <expr_stmt><expr><call><name><name pos:line="351" pos:column="25">_handler</name><op:operator pos:line="351" pos:column="33">.</op:operator><name pos:line="351" pos:column="34">FinishedIndexing</name></name><argument_list pos:line="351" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="352" pos:column="25">_currentThreadIsProcessingItems</name> <op:operator pos:line="352" pos:column="57">=</op:operator> <lit:literal type="boolean" pos:line="352" pos:column="59">false</lit:literal></expr>;</expr_stmt> 
                    }</block></finally></try>
                }</block></lambda></expr></argument>, <argument><expr><name pos:line="354" pos:column="20">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <comment type="line" pos:line="357" pos:column="13">// Attempts to execute the specified task on the current thread.  </comment>
            <function><type><specifier pos:line="358" pos:column="13">protected</specifier> <specifier pos:line="358" pos:column="23">sealed</specifier> <specifier pos:line="358" pos:column="30">override</specifier> <name pos:line="358" pos:column="39">bool</name></type> <name pos:line="358" pos:column="44">TryExecuteTaskInline</name><parameter_list pos:line="358" pos:column="64">(<param><decl><type><name pos:line="358" pos:column="65">Task</name></type> <name pos:line="358" pos:column="70">task</name></decl></param>, <param><decl><type><name pos:line="358" pos:column="76">bool</name></type> <name pos:line="358" pos:column="81">taskWasPreviouslyQueued</name></decl></param>)</parameter_list>
            <block pos:line="359" pos:column="13">{
                <comment type="line" pos:line="360" pos:column="17">// If this thread isn't already processing a task, we don't support inlining </comment>
                <if pos:line="361" pos:column="17">if <condition pos:line="361" pos:column="20">(<expr><op:operator pos:line="361" pos:column="21">!</op:operator><name pos:line="361" pos:column="22">_currentThreadIsProcessingItems</name></expr>)</condition><then pos:line="361" pos:column="54"> <return pos:line="361" pos:column="55">return <expr><lit:literal type="boolean" pos:line="361" pos:column="62">false</lit:literal></expr>;</return></then></if>

                <comment type="line" pos:line="363" pos:column="17">// If the task was previously queued, remove it from the queue </comment>
                <if pos:line="364" pos:column="17">if <condition pos:line="364" pos:column="20">(<expr><name pos:line="364" pos:column="21">taskWasPreviouslyQueued</name></expr>)</condition><then pos:line="364" pos:column="45">
                    <comment type="line" pos:line="365" pos:column="21">// Try to run the task.  </comment>
                    <if pos:line="366" pos:column="21">if <condition pos:line="366" pos:column="24">(<expr><call><name pos:line="366" pos:column="25">TryDequeue</name><argument_list pos:line="366" pos:column="35">(<argument><expr><name pos:line="366" pos:column="36">task</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="366" pos:column="42">
                        <return pos:line="367" pos:column="25">return <expr><call><name><name pos:line="367" pos:column="32">base</name><op:operator pos:line="367" pos:column="36">.</op:operator><name pos:line="367" pos:column="37">TryExecuteTask</name></name><argument_list pos:line="367" pos:column="51">(<argument><expr><name pos:line="367" pos:column="52">task</name></expr></argument>)</argument_list></call></expr>;</return></then>
                    <else pos:line="368" pos:column="21">else
                        <return pos:line="369" pos:column="25">return <expr><lit:literal type="boolean" pos:line="369" pos:column="32">false</lit:literal></expr>;</return></else></if></then>
                <else pos:line="370" pos:column="17">else
                    <return pos:line="371" pos:column="21">return <expr><call><name><name pos:line="371" pos:column="28">base</name><op:operator pos:line="371" pos:column="32">.</op:operator><name pos:line="371" pos:column="33">TryExecuteTask</name></name><argument_list pos:line="371" pos:column="47">(<argument><expr><name pos:line="371" pos:column="48">task</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
            }</block></function>

            <comment type="line" pos:line="374" pos:column="13">// Attempt to remove a previously scheduled task from the scheduler.  </comment>
            <function><type><specifier pos:line="375" pos:column="13">protected</specifier> <specifier pos:line="375" pos:column="23">sealed</specifier> <specifier pos:line="375" pos:column="30">override</specifier> <name pos:line="375" pos:column="39">bool</name></type> <name pos:line="375" pos:column="44">TryDequeue</name><parameter_list pos:line="375" pos:column="54">(<param><decl><type><name pos:line="375" pos:column="55">Task</name></type> <name pos:line="375" pos:column="60">task</name></decl></param>)</parameter_list>
            <block pos:line="376" pos:column="13">{
                <lock pos:line="377" pos:column="17">lock (<expr><name pos:line="377" pos:column="23">_tasks</name></expr>) <return pos:line="377" pos:column="31">return <expr><call><name><name pos:line="377" pos:column="38">_tasks</name><op:operator pos:line="377" pos:column="44">.</op:operator><name pos:line="377" pos:column="45">Remove</name></name><argument_list pos:line="377" pos:column="51">(<argument><expr><name pos:line="377" pos:column="52">task</name></expr></argument>)</argument_list></call></expr>;</return></lock>
            }</block></function>

            <comment type="line" pos:line="380" pos:column="13">// Gets the maximum concurrency level supported by this scheduler.  </comment>
            <decl_stmt><decl><type><specifier pos:line="381" pos:column="13">public</specifier> <specifier pos:line="381" pos:column="20">sealed</specifier> <specifier pos:line="381" pos:column="27">override</specifier> <name pos:line="381" pos:column="36">int</name></type> <name pos:line="381" pos:column="40">MaximumConcurrencyLevel</name> <block pos:line="381" pos:column="64">{ <function><name pos:line="381" pos:column="66">get</name> <block pos:line="381" pos:column="70">{ <return pos:line="381" pos:column="72">return <expr><name pos:line="381" pos:column="79">_maxDegreeOfParallelism</name></expr>;</return> }</block></function> }</block></decl></decl_stmt>

            <comment type="line" pos:line="383" pos:column="13">// Gets an enumerable of the tasks currently scheduled on this scheduler.  </comment>
            <function><type><specifier pos:line="384" pos:column="13">protected</specifier> <specifier pos:line="384" pos:column="23">sealed</specifier> <specifier pos:line="384" pos:column="30">override</specifier> <name><name pos:line="384" pos:column="39">IEnumerable</name><argument_list pos:line="384" pos:column="50">&lt;<argument><name pos:line="384" pos:column="51">Task</name></argument>&gt;</argument_list></name></type> <name pos:line="384" pos:column="57">GetScheduledTasks</name><parameter_list pos:line="384" pos:column="74">()</parameter_list>
            <block pos:line="385" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="386" pos:column="17">bool</name></type> <name pos:line="386" pos:column="22">lockTaken</name> <init pos:line="386" pos:column="32">= <expr><lit:literal type="boolean" pos:line="386" pos:column="34">false</lit:literal></expr></init></decl>;</decl_stmt>
                <try pos:line="387" pos:column="17">try
                <block pos:line="388" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="389" pos:column="21">Monitor</name><op:operator pos:line="389" pos:column="28">.</op:operator><name pos:line="389" pos:column="29">TryEnter</name></name><argument_list pos:line="389" pos:column="37">(<argument><expr><name pos:line="389" pos:column="38">_tasks</name></expr></argument>, <argument><expr pos:line="389" pos:column="46">ref <name pos:line="389" pos:column="50">lockTaken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if pos:line="390" pos:column="21">if <condition pos:line="390" pos:column="24">(<expr><name pos:line="390" pos:column="25">lockTaken</name></expr>)</condition><then pos:line="390" pos:column="35"> <return pos:line="390" pos:column="36">return <expr><name pos:line="390" pos:column="43">_tasks</name></expr>;</return></then>
                    <else pos:line="391" pos:column="21">else <throw pos:line="391" pos:column="26">throw <expr><op:operator pos:line="391" pos:column="32">new</op:operator> <call><name pos:line="391" pos:column="36">NotSupportedException</name><argument_list pos:line="391" pos:column="57">()</argument_list></call></expr>;</throw></else></if>
                }</block>
                <finally pos:line="393" pos:column="17">finally
                <block pos:line="394" pos:column="17">{
                    <if pos:line="395" pos:column="21">if <condition pos:line="395" pos:column="24">(<expr><name pos:line="395" pos:column="25">lockTaken</name></expr>)</condition><then pos:line="395" pos:column="35"> <expr_stmt><expr><call><name><name pos:line="395" pos:column="36">Monitor</name><op:operator pos:line="395" pos:column="43">.</op:operator><name pos:line="395" pos:column="44">Exit</name></name><argument_list pos:line="395" pos:column="48">(<argument><expr><name pos:line="395" pos:column="49">_tasks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                }</block></finally></try>
            }</block></function>

       
        }</block></class>



    }</block></class>
}</block></namespace></unit>
