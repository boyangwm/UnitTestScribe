<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Core\Core\Tools\ToolHelpers.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Collections</name><op:operator pos:line="3" pos:column="25">.</op:operator><name pos:line="3" pos:column="26">Generic</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Linq</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Text</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Sando</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">Core</name><op:operator pos:line="6" pos:column="17">.</op:operator><name pos:line="6" pos:column="18">QueryRefomers</name></name>;</using>

<namespace pos:line="8" pos:column="1">namespace <name><name pos:line="8" pos:column="11">Sando</name><op:operator pos:line="8" pos:column="16">.</op:operator><name pos:line="8" pos:column="17">Core</name><op:operator pos:line="8" pos:column="21">.</op:operator><name pos:line="8" pos:column="22">Tools</name></name>
<block pos:line="9" pos:column="1">{
    <class><specifier pos:line="10" pos:column="5">public</specifier> <specifier pos:line="10" pos:column="12">static</specifier> class <name pos:line="10" pos:column="25">ToolHelpers</name>
    <block pos:line="11" pos:column="5">{
        <function><type><specifier pos:line="12" pos:column="9">public</specifier> <specifier pos:line="12" pos:column="16">static</specifier> <name><name pos:line="12" pos:column="23">IEnumerable</name><argument_list pos:line="12" pos:column="34">&lt;<argument><name pos:line="12" pos:column="35">T</name></argument>&gt;</argument_list></name></type> <name><name pos:line="12" pos:column="38">RemoveRedundance</name><argument_list pos:line="12" pos:column="54">&lt;<argument><name pos:line="12" pos:column="55">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="12" pos:column="57">(<param><decl><type><name pos:line="12" pos:column="58">this</name> <name><name pos:line="12" pos:column="63">IEnumerable</name><argument_list pos:line="12" pos:column="74">&lt;<argument><name pos:line="12" pos:column="75">T</name></argument>&gt;</argument_list></name></type> <name pos:line="12" pos:column="78">list</name></decl></param>)</parameter_list> <where pos:line="12" pos:column="84">where <name pos:line="12" pos:column="90">T</name> : <name><name pos:line="12" pos:column="94">IEquatable</name><argument_list pos:line="12" pos:column="104">&lt;<argument><name pos:line="12" pos:column="105">T</name></argument>&gt;</argument_list></name></where>
        <block pos:line="13" pos:column="9">{
            <return pos:line="14" pos:column="13">return <expr><call><name><name pos:line="14" pos:column="20">list</name><op:operator pos:line="14" pos:column="24">.</op:operator><name pos:line="14" pos:column="25">Distinct</name></name><argument_list pos:line="14" pos:column="33">()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="17" pos:column="9">public</specifier> <specifier pos:line="17" pos:column="16">static</specifier> <name><name pos:line="17" pos:column="23">IEnumerable</name><argument_list pos:line="17" pos:column="34">&lt;<argument><name pos:line="17" pos:column="35">ReformedWord</name></argument>&gt;</argument_list></name></type> <name pos:line="17" pos:column="49">CreateNonChangedTerm</name><parameter_list pos:line="17" pos:column="69">(<param><decl><type><name pos:line="17" pos:column="70">string</name></type> <name pos:line="17" pos:column="77">word</name></decl></param>)</parameter_list>
        <block pos:line="18" pos:column="9">{
            <return pos:line="19" pos:column="13">return <expr><op:operator pos:line="19" pos:column="20">new</op:operator><index pos:line="19" pos:column="23">[]</index> <block pos:line="19" pos:column="26">{ <expr><op:operator pos:line="19" pos:column="28">new</op:operator> <call><name pos:line="19" pos:column="32">ReformedWord</name><argument_list pos:line="19" pos:column="44">(<argument><expr><name><name pos:line="19" pos:column="45">TermChangeCategory</name><op:operator pos:line="19" pos:column="63">.</op:operator><name pos:line="19" pos:column="64">NOT_CHANGED</name></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="77">word</name></expr></argument>, <argument><expr><name pos:line="19" pos:column="83">word</name></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="89">String</name><op:operator pos:line="19" pos:column="95">.</op:operator><name pos:line="19" pos:column="96">Empty</name></name></expr></argument>)</argument_list></call></expr> }</block></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="22" pos:column="9">public</specifier> <specifier pos:line="22" pos:column="16">static</specifier> <name><name pos:line="22" pos:column="23">IEnumerable</name><argument_list pos:line="22" pos:column="34">&lt;<argument><name pos:line="22" pos:column="35">T</name></argument>&gt;</argument_list></name></type> <name><name pos:line="22" pos:column="38">TrimIfOverlyLong</name><argument_list pos:line="22" pos:column="54">&lt;<argument><name pos:line="22" pos:column="55">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="22" pos:column="57">(<param><decl><type><name pos:line="22" pos:column="58">this</name> <name><name pos:line="22" pos:column="63">IEnumerable</name><argument_list pos:line="22" pos:column="74">&lt;<argument><name pos:line="22" pos:column="75">T</name></argument>&gt;</argument_list></name></type> <name pos:line="22" pos:column="78">list</name></decl></param>, <param><decl><type><name pos:line="22" pos:column="84">int</name></type> <name pos:line="22" pos:column="88">maxCount</name></decl></param>)</parameter_list>
        <block pos:line="23" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="24" pos:column="13">var</name></type> <name pos:line="24" pos:column="17">newList</name> <init pos:line="24" pos:column="25">= <expr><call><name><name pos:line="24" pos:column="27">list</name><op:operator pos:line="24" pos:column="31">.</op:operator><name pos:line="24" pos:column="32">ToList</name></name><argument_list pos:line="24" pos:column="38">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="25" pos:column="13">return <expr><call><name><name pos:line="25" pos:column="20">newList</name><op:operator pos:line="25" pos:column="27">.</op:operator><name pos:line="25" pos:column="28">Count</name></name><argument_list pos:line="25" pos:column="33">()</argument_list></call> <op:operator pos:line="25" pos:column="36">&gt;</op:operator> <name pos:line="25" pos:column="38">maxCount</name> <op:operator pos:line="25" pos:column="47">?</op:operator> <call><name><name pos:line="25" pos:column="49">newList</name><op:operator pos:line="25" pos:column="56">.</op:operator><name pos:line="25" pos:column="57">GetRange</name></name><argument_list pos:line="25" pos:column="65">(<argument><expr><lit:literal type="number" pos:line="25" pos:column="66">0</lit:literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="69">maxCount</name></expr></argument>)</argument_list></call> <op:operator pos:line="25" pos:column="79">:</op:operator> <name pos:line="25" pos:column="81">newList</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="28" pos:column="9">public</specifier> <specifier pos:line="28" pos:column="16">static</specifier> <name><name pos:line="28" pos:column="23">IEnumerable</name><argument_list pos:line="28" pos:column="34">&lt;<argument><name pos:line="28" pos:column="35">T</name></argument>&gt;</argument_list></name></type> <name><name pos:line="28" pos:column="38">DistinctBy</name><argument_list pos:line="28" pos:column="48">&lt;<argument><name pos:line="28" pos:column="49">T</name></argument>, <argument><name pos:line="28" pos:column="52">M</name></argument>&gt;</argument_list></name><parameter_list pos:line="28" pos:column="54">(<param><decl><type><name pos:line="28" pos:column="55">this</name> <name><name pos:line="28" pos:column="60">IEnumerable</name><argument_list pos:line="28" pos:column="71">&lt;<argument><name pos:line="28" pos:column="72">T</name></argument>&gt;</argument_list></name></type> <name pos:line="28" pos:column="75">list</name></decl></param>,
            <param><decl><type><name><name pos:line="29" pos:column="13">Func</name><argument_list pos:line="29" pos:column="17">&lt;<argument><name pos:line="29" pos:column="18">T</name></argument>, <argument><name pos:line="29" pos:column="21">M</name></argument>&gt;</argument_list></name></type> <name pos:line="29" pos:column="24">selector</name></decl></param>)</parameter_list> <where pos:line="29" pos:column="34">where <name pos:line="29" pos:column="40">M</name> : <name><name pos:line="29" pos:column="44">IEquatable</name><argument_list pos:line="29" pos:column="54">&lt;<argument><name pos:line="29" pos:column="55">M</name></argument>&gt;</argument_list></name></where>
        <block pos:line="30" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="31" pos:column="13">var</name></type> <name pos:line="31" pos:column="17">set</name> <init pos:line="31" pos:column="21">= <expr><op:operator pos:line="31" pos:column="23">new</op:operator> <call><name><name pos:line="31" pos:column="27">HashSet</name><argument_list pos:line="31" pos:column="34">&lt;<argument><name pos:line="31" pos:column="35">T</name></argument>&gt;</argument_list></name><argument_list pos:line="31" pos:column="37">(<argument><expr><name pos:line="31" pos:column="38">list</name></expr></argument>, <argument><expr><op:operator pos:line="31" pos:column="44">new</op:operator> <call><name><name pos:line="31" pos:column="48">GenericEqualityCompare</name><argument_list pos:line="31" pos:column="70">&lt;<argument><name pos:line="31" pos:column="71">T</name></argument>,<argument><name pos:line="31" pos:column="73">M</name></argument>&gt;</argument_list></name><argument_list pos:line="31" pos:column="75">(<argument><expr><name pos:line="31" pos:column="76">selector</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="32" pos:column="13">return <expr><call><name><name pos:line="32" pos:column="20">set</name><op:operator pos:line="32" pos:column="23">.</op:operator><name pos:line="32" pos:column="24">AsEnumerable</name></name><argument_list pos:line="32" pos:column="36">()</argument_list></call></expr>;</return>
        }</block></function>

        <class><specifier pos:line="35" pos:column="9">private</specifier> class <name><name pos:line="35" pos:column="23">GenericEqualityCompare</name><argument_list pos:line="35" pos:column="45">&lt;<argument><name pos:line="35" pos:column="46">T</name></argument>, <argument><name pos:line="35" pos:column="49">M</name></argument>&gt;</argument_list></name> <super pos:line="35" pos:column="52">: <name><name pos:line="35" pos:column="54">IEqualityComparer</name><argument_list pos:line="35" pos:column="71">&lt;<argument><name pos:line="35" pos:column="72">T</name></argument>&gt;
            <where pos:line="36" pos:column="13">where <name pos:line="36" pos:column="19">M</name> : <name><name pos:line="36" pos:column="23">IEquatable</name><argument_list pos:line="36" pos:column="33">&lt;<argument><name pos:line="36" pos:column="34">M</name></argument>&gt;</argument_list></name></where></argument_list></name></super>
        <block pos:line="37" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="38" pos:column="13">private</specifier> <specifier pos:line="38" pos:column="21">readonly</specifier> <name><name pos:line="38" pos:column="30">Func</name><argument_list pos:line="38" pos:column="34">&lt;<argument><name pos:line="38" pos:column="35">T</name></argument>, <argument><name pos:line="38" pos:column="38">M</name></argument>&gt;</argument_list></name></type> <name pos:line="38" pos:column="41">selector</name></decl>;</decl_stmt>

            <constructor><specifier pos:line="40" pos:column="13">public</specifier> <name pos:line="40" pos:column="20">GenericEqualityCompare</name><parameter_list pos:line="40" pos:column="42">(<param><decl><type><name><name pos:line="40" pos:column="43">Func</name><argument_list pos:line="40" pos:column="47">&lt;<argument><name pos:line="40" pos:column="48">T</name></argument>, <argument><name pos:line="40" pos:column="51">M</name></argument>&gt;</argument_list></name></type> <name pos:line="40" pos:column="54">selector</name></decl></param>)</parameter_list>
            <block pos:line="41" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="42" pos:column="17">this</name><op:operator pos:line="42" pos:column="21">.</op:operator><name pos:line="42" pos:column="22">selector</name></name> <op:operator pos:line="42" pos:column="31">=</op:operator> <name pos:line="42" pos:column="33">selector</name></expr>;</expr_stmt>
            }</block></constructor>

            <function><type><specifier pos:line="45" pos:column="13">public</specifier> <name pos:line="45" pos:column="20">bool</name></type> <name pos:line="45" pos:column="25">Equals</name><parameter_list pos:line="45" pos:column="31">(<param><decl><type><name pos:line="45" pos:column="32">T</name></type> <name pos:line="45" pos:column="34">x</name></decl></param>, <param><decl><type><name pos:line="45" pos:column="37">T</name></type> <name pos:line="45" pos:column="39">y</name></decl></param>)</parameter_list>
            <block pos:line="46" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="47" pos:column="17">var</name></type> <name pos:line="47" pos:column="21">mx</name> <init pos:line="47" pos:column="24">= <expr><call><name><name pos:line="47" pos:column="26">selector</name><op:operator pos:line="47" pos:column="34">.</op:operator><name pos:line="47" pos:column="35">Invoke</name></name><argument_list pos:line="47" pos:column="41">(<argument><expr><name pos:line="47" pos:column="42">x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="48" pos:column="17">var</name></type> <name pos:line="48" pos:column="21">my</name> <init pos:line="48" pos:column="24">= <expr><call><name><name pos:line="48" pos:column="26">selector</name><op:operator pos:line="48" pos:column="34">.</op:operator><name pos:line="48" pos:column="35">Invoke</name></name><argument_list pos:line="48" pos:column="41">(<argument><expr><name pos:line="48" pos:column="42">y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return pos:line="49" pos:column="17">return <expr><call><name><name pos:line="49" pos:column="24">mx</name><op:operator pos:line="49" pos:column="26">.</op:operator><name pos:line="49" pos:column="27">Equals</name></name><argument_list pos:line="49" pos:column="33">(<argument><expr><name pos:line="49" pos:column="34">my</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>

            <function><type><specifier pos:line="52" pos:column="13">public</specifier> <name pos:line="52" pos:column="20">int</name></type> <name pos:line="52" pos:column="24">GetHashCode</name><parameter_list pos:line="52" pos:column="35">(<param><decl><type><name pos:line="52" pos:column="36">T</name></type> <name pos:line="52" pos:column="38">obj</name></decl></param>)</parameter_list>
            <block pos:line="53" pos:column="13">{
                <return pos:line="54" pos:column="17">return <expr><lit:literal type="number" pos:line="54" pos:column="24">0</lit:literal></expr>;</return>
            }</block></function>
        }</block></class>

        <function><type><specifier pos:line="58" pos:column="9">public</specifier> <specifier pos:line="58" pos:column="16">static</specifier> <name pos:line="58" pos:column="23">T</name><index pos:line="58" pos:column="24">[]</index></type> <name><name pos:line="58" pos:column="27">SubArray</name><argument_list pos:line="58" pos:column="35">&lt;<argument><name pos:line="58" pos:column="36">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="58" pos:column="38">(<param><decl><type><name pos:line="58" pos:column="39">this</name> <name><name pos:line="58" pos:column="44">T</name><index pos:line="58" pos:column="45">[]</index></name></type> <name pos:line="58" pos:column="48">data</name></decl></param>, <param><decl><type><name pos:line="58" pos:column="54">int</name></type> <name pos:line="58" pos:column="58">index</name></decl></param>, <param><decl><type><name pos:line="58" pos:column="65">int</name></type> <name pos:line="58" pos:column="69">length</name></decl></param>)</parameter_list>
        <block pos:line="59" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="60" pos:column="13">T</name><index pos:line="60" pos:column="14">[]</index></type> <name pos:line="60" pos:column="17">result</name> <init pos:line="60" pos:column="24">= <expr><op:operator pos:line="60" pos:column="26">new</op:operator> <name><name pos:line="60" pos:column="30">T</name><index pos:line="60" pos:column="31">[<expr><name pos:line="60" pos:column="32">length</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="61" pos:column="13">Array</name><op:operator pos:line="61" pos:column="18">.</op:operator><name pos:line="61" pos:column="19">Copy</name></name><argument_list pos:line="61" pos:column="23">(<argument><expr><name pos:line="61" pos:column="24">data</name></expr></argument>, <argument><expr><name pos:line="61" pos:column="30">index</name></expr></argument>, <argument><expr><name pos:line="61" pos:column="37">result</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="61" pos:column="45">0</lit:literal></expr></argument>, <argument><expr><name pos:line="61" pos:column="48">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="62" pos:column="13">return <expr><name pos:line="62" pos:column="20">result</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="65" pos:column="9">public</specifier> <specifier pos:line="65" pos:column="16">static</specifier> <name><name pos:line="65" pos:column="23">IEqualityComparer</name><argument_list pos:line="65" pos:column="40">&lt;<argument><name pos:line="65" pos:column="41">String</name></argument>&gt;</argument_list></name></type> <name pos:line="65" pos:column="49">GetCaseInsensitiveEqualityComparer</name><parameter_list pos:line="65" pos:column="83">()</parameter_list>
        <block pos:line="66" pos:column="9">{
            <return pos:line="67" pos:column="13">return <expr><op:operator pos:line="67" pos:column="20">new</op:operator> <call><name pos:line="67" pos:column="24">InternalStringComparer</name><argument_list pos:line="67" pos:column="46">()</argument_list></call></expr>;</return>
        }</block></function>

        <class><specifier pos:line="70" pos:column="9">private</specifier> class <name pos:line="70" pos:column="23">InternalStringComparer</name> <super pos:line="70" pos:column="46">: <name><name pos:line="70" pos:column="48">IEqualityComparer</name><argument_list pos:line="70" pos:column="65">&lt;<argument><name pos:line="70" pos:column="66">string</name></argument>&gt;</argument_list></name></super>
        <block pos:line="71" pos:column="9">{
            <function><type><specifier pos:line="72" pos:column="13">public</specifier> <name pos:line="72" pos:column="20">bool</name></type> <name pos:line="72" pos:column="25">Equals</name><parameter_list pos:line="72" pos:column="31">(<param><decl><type><name pos:line="72" pos:column="32">string</name></type> <name pos:line="72" pos:column="39">x</name></decl></param>, <param><decl><type><name pos:line="72" pos:column="42">string</name></type> <name pos:line="72" pos:column="49">y</name></decl></param>)</parameter_list>
            <block pos:line="73" pos:column="13">{
                <return pos:line="74" pos:column="17">return <expr><call><name><name pos:line="74" pos:column="24">x</name><op:operator pos:line="74" pos:column="25">.</op:operator><name pos:line="74" pos:column="26">Equals</name></name><argument_list pos:line="74" pos:column="32">(<argument><expr><name pos:line="74" pos:column="33">y</name></expr></argument>, <argument><expr><name><name pos:line="74" pos:column="36">StringComparison</name><op:operator pos:line="74" pos:column="52">.</op:operator><name pos:line="74" pos:column="53">InvariantCultureIgnoreCase</name></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>

            <function><type><specifier pos:line="77" pos:column="13">public</specifier> <name pos:line="77" pos:column="20">int</name></type> <name pos:line="77" pos:column="24">GetHashCode</name><parameter_list pos:line="77" pos:column="35">(<param><decl><type><name pos:line="77" pos:column="36">string</name></type> <name pos:line="77" pos:column="43">obj</name></decl></param>)</parameter_list>
            <block pos:line="78" pos:column="13">{
                <return pos:line="79" pos:column="17">return <expr><lit:literal type="number" pos:line="79" pos:column="24">0</lit:literal></expr>;</return>
            }</block></function>
        }</block></class>

        <function><type><specifier pos:line="83" pos:column="9">public</specifier> <specifier pos:line="83" pos:column="16">static</specifier> <name pos:line="83" pos:column="23">bool</name></type> <name><name pos:line="83" pos:column="28">IsIndexInRange</name><argument_list pos:line="83" pos:column="42">&lt;<argument><name pos:line="83" pos:column="43">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="83" pos:column="45">(<param><decl><type><name pos:line="83" pos:column="46">this</name> <name><name pos:line="83" pos:column="51">IEnumerable</name><argument_list pos:line="83" pos:column="62">&lt;<argument><name pos:line="83" pos:column="63">T</name></argument>&gt;</argument_list></name></type> <name pos:line="83" pos:column="66">list</name></decl></param>, <param><decl><type><name pos:line="83" pos:column="72">int</name></type> <name pos:line="83" pos:column="76">index</name></decl></param>)</parameter_list>
        <block pos:line="84" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="85" pos:column="13">var</name></type> <name pos:line="85" pos:column="17">array</name> <init pos:line="85" pos:column="23">= <expr><call><name><name pos:line="85" pos:column="25">list</name><op:operator pos:line="85" pos:column="29">.</op:operator><name pos:line="85" pos:column="30">ToArray</name></name><argument_list pos:line="85" pos:column="37">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="86" pos:column="13">return <expr><name pos:line="86" pos:column="20">index</name> <op:operator pos:line="86" pos:column="26">&gt;=</op:operator> <lit:literal type="number" pos:line="86" pos:column="29">0</lit:literal> <op:operator pos:line="86" pos:column="31">&amp;&amp;</op:operator> <name pos:line="86" pos:column="34">index</name> <op:operator pos:line="86" pos:column="40">&lt;</op:operator> <call><name><name pos:line="86" pos:column="42">array</name><op:operator pos:line="86" pos:column="47">.</op:operator><name pos:line="86" pos:column="48">Count</name></name><argument_list pos:line="86" pos:column="53">()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="89" pos:column="9">public</specifier> <specifier pos:line="89" pos:column="16">static</specifier> <name><name pos:line="89" pos:column="23">IEnumerable</name><argument_list pos:line="89" pos:column="34">&lt;<argument><name pos:line="89" pos:column="35">T</name></argument>&gt;</argument_list></name></type> <name><name pos:line="89" pos:column="38">CustomBinarySearch</name><argument_list pos:line="89" pos:column="56">&lt;<argument><name pos:line="89" pos:column="57">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="89" pos:column="59">(<param><decl><type><name pos:line="89" pos:column="60">this</name> <name><name pos:line="89" pos:column="65">List</name><argument_list pos:line="89" pos:column="69">&lt;<argument><name pos:line="89" pos:column="70">T</name></argument>&gt;</argument_list></name></type> <name pos:line="89" pos:column="73">list</name></decl></param>, <param><decl><type><name pos:line="89" pos:column="79">T</name></type> <name pos:line="89" pos:column="81">target</name></decl></param>, <param><decl><type><name><name pos:line="89" pos:column="89">IComparer</name><argument_list pos:line="89" pos:column="98">&lt;<argument><name pos:line="89" pos:column="99">T</name></argument>&gt;</argument_list></name></type> <name pos:line="89" pos:column="102">comparer</name></decl></param>)</parameter_list>
        <block pos:line="90" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="91" pos:column="13">var</name></type> <name pos:line="91" pos:column="17">endIndex</name> <init pos:line="91" pos:column="26">= <expr><call><name><name pos:line="91" pos:column="28">list</name><op:operator pos:line="91" pos:column="32">.</op:operator><name pos:line="91" pos:column="33">BinarySearch</name></name><argument_list pos:line="91" pos:column="45">(<argument><expr><name pos:line="91" pos:column="46">target</name></expr></argument>, <argument><expr><name pos:line="91" pos:column="54">comparer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="92" pos:column="13">if <condition pos:line="92" pos:column="16">(<expr><name pos:line="92" pos:column="17">endIndex</name> <op:operator pos:line="92" pos:column="26">&gt;</op:operator> <op:operator pos:line="92" pos:column="28">-</op:operator><lit:literal type="number" pos:line="92" pos:column="29">1</lit:literal> <op:operator pos:line="92" pos:column="31">&amp;&amp;</op:operator> <name pos:line="92" pos:column="34">endIndex</name> <op:operator pos:line="92" pos:column="43">&lt;</op:operator> <name><name pos:line="92" pos:column="45">list</name><op:operator pos:line="92" pos:column="49">.</op:operator><name pos:line="92" pos:column="50">Count</name></name></expr>)</condition><then pos:line="92" pos:column="56"> 
            <block pos:line="93" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="94" pos:column="17">int</name></type> <name pos:line="94" pos:column="21">startIndex</name> <init pos:line="94" pos:column="32">= <expr><name pos:line="94" pos:column="34">endIndex</name></expr></init></decl>;</decl_stmt>
                <for pos:line="95" pos:column="17">for (<init pos:line="95" pos:column="22">;</init> <condition><expr><name pos:line="95" pos:column="24">startIndex</name> <op:operator pos:line="95" pos:column="35">&gt;=</op:operator><lit:literal type="number" pos:line="95" pos:column="37">0</lit:literal> <op:operator pos:line="95" pos:column="39">&amp;&amp;</op:operator> <call><name><name pos:line="95" pos:column="42">comparer</name><op:operator pos:line="95" pos:column="50">.</op:operator><name pos:line="95" pos:column="51">Compare</name></name><argument_list pos:line="95" pos:column="58">(<argument><expr><call><name><name pos:line="95" pos:column="59">list</name><op:operator pos:line="95" pos:column="63">.</op:operator><name pos:line="95" pos:column="64">ElementAt</name></name><argument_list pos:line="95" pos:column="73">(<argument><expr><name pos:line="95" pos:column="74">startIndex</name> <op:operator pos:line="95" pos:column="85">-</op:operator> <lit:literal type="number" pos:line="95" pos:column="87">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="95" pos:column="91">target</name></expr></argument>)</argument_list></call> <op:operator pos:line="95" pos:column="99">==</op:operator> <lit:literal type="number" pos:line="95" pos:column="102">0</lit:literal></expr>;</condition> <incr><expr><name pos:line="95" pos:column="105">startIndex</name><op:operator pos:line="95" pos:column="115">--</op:operator></expr></incr>)<empty_stmt pos:line="95" pos:column="118">;</empty_stmt></for>
                <expr_stmt><expr><name pos:line="96" pos:column="17">startIndex</name> <op:operator pos:line="96" pos:column="28">=</op:operator> <name pos:line="96" pos:column="30">startIndex</name> <op:operator pos:line="96" pos:column="41">&lt;</op:operator> <lit:literal type="number" pos:line="96" pos:column="43">0</lit:literal> <op:operator pos:line="96" pos:column="45">?</op:operator> <lit:literal type="number" pos:line="96" pos:column="47">0</lit:literal> <op:operator pos:line="96" pos:column="49">:</op:operator> <name pos:line="96" pos:column="51">startIndex</name></expr>;</expr_stmt>
                <return pos:line="97" pos:column="17">return <expr><call><name><name pos:line="97" pos:column="24">list</name><op:operator pos:line="97" pos:column="28">.</op:operator><name pos:line="97" pos:column="29">GetRange</name></name><argument_list pos:line="97" pos:column="37">(<argument><expr><name pos:line="97" pos:column="38">startIndex</name></expr></argument>, <argument><expr><name pos:line="97" pos:column="50">endIndex</name> <op:operator pos:line="97" pos:column="59">-</op:operator> <name pos:line="97" pos:column="61">startIndex</name> <op:operator pos:line="97" pos:column="72">+</op:operator> <lit:literal type="number" pos:line="97" pos:column="74">1</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
            <return pos:line="99" pos:column="13">return <expr><call><name><name pos:line="99" pos:column="20">Enumerable</name><op:operator pos:line="99" pos:column="30">.</op:operator><name><name pos:line="99" pos:column="31">Empty</name><argument_list pos:line="99" pos:column="36">&lt;<argument><name pos:line="99" pos:column="37">T</name></argument>&gt;</argument_list></name></name><argument_list pos:line="99" pos:column="39">()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="102" pos:column="9">public</specifier> <specifier pos:line="102" pos:column="16">static</specifier> <name pos:line="102" pos:column="23">bool</name></type> <name pos:line="102" pos:column="28">IsWordFlag</name><parameter_list pos:line="102" pos:column="38">(<param><decl><type><name pos:line="102" pos:column="39">this</name> <name pos:line="102" pos:column="44">string</name></type> <name pos:line="102" pos:column="51">word</name></decl></param>)</parameter_list>
        <block pos:line="103" pos:column="9">{
            <return pos:line="104" pos:column="13">return <expr><call><name><name pos:line="104" pos:column="20">word</name><op:operator pos:line="104" pos:column="24">.</op:operator><name pos:line="104" pos:column="25">StartsWith</name></name><argument_list pos:line="104" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="104" pos:column="36">"-"</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="107" pos:column="9">public</specifier> <specifier pos:line="107" pos:column="16">static</specifier> <name pos:line="107" pos:column="23">bool</name></type> <name pos:line="107" pos:column="28">IsWordQuoted</name><parameter_list pos:line="107" pos:column="40">(<param><decl><type><name pos:line="107" pos:column="41">this</name> <name pos:line="107" pos:column="46">string</name></type> <name pos:line="107" pos:column="53">word</name></decl></param>)</parameter_list>
        <block pos:line="108" pos:column="9">{
            <return pos:line="109" pos:column="13">return <expr><call><name><name pos:line="109" pos:column="20">word</name><op:operator pos:line="109" pos:column="24">.</op:operator><name pos:line="109" pos:column="25">Trim</name></name><argument_list pos:line="109" pos:column="29">()</argument_list></call><op:operator pos:line="109" pos:column="31">.</op:operator><call><name pos:line="109" pos:column="32">StartsWith</name><argument_list pos:line="109" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="109" pos:column="43">"\""</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="109" pos:column="49">&amp;&amp;</op:operator> <call><name><name pos:line="109" pos:column="52">word</name><op:operator pos:line="109" pos:column="56">.</op:operator><name pos:line="109" pos:column="57">EndsWith</name></name><argument_list pos:line="109" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="109" pos:column="66">"\""</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="112" pos:column="9">public</specifier> <specifier pos:line="112" pos:column="16">static</specifier> <name pos:line="112" pos:column="23">String</name></type> <name pos:line="112" pos:column="30">ToLowerAndTrim</name><parameter_list pos:line="112" pos:column="44">(<param><decl><type><name pos:line="112" pos:column="45">this</name> <name pos:line="112" pos:column="50">string</name></type> <name pos:line="112" pos:column="57">text</name></decl></param>)</parameter_list>
        <block pos:line="113" pos:column="9">{
            <return pos:line="114" pos:column="13">return <expr><call><name><name pos:line="114" pos:column="20">text</name><op:operator pos:line="114" pos:column="24">.</op:operator><name pos:line="114" pos:column="25">ToLower</name></name><argument_list pos:line="114" pos:column="32">()</argument_list></call><op:operator pos:line="114" pos:column="34">.</op:operator><call><name pos:line="114" pos:column="35">Trim</name><argument_list pos:line="114" pos:column="39">()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="117" pos:column="9">public</specifier> <specifier pos:line="117" pos:column="16">static</specifier> <name pos:line="117" pos:column="23">bool</name></type> <name pos:line="117" pos:column="28">IsStemSameTo</name><parameter_list pos:line="117" pos:column="40">(<param><decl><type><name pos:line="117" pos:column="41">this</name> <name pos:line="117" pos:column="46">string</name></type> <name pos:line="117" pos:column="53">word1</name></decl></param>, <param><decl><type><name pos:line="117" pos:column="60">string</name></type> <name pos:line="117" pos:column="67">word2</name></decl></param>)</parameter_list>
        <block pos:line="118" pos:column="9">{
            <return pos:line="119" pos:column="13">return <expr><call><name><name pos:line="119" pos:column="20">word1</name><op:operator pos:line="119" pos:column="25">.</op:operator><name pos:line="119" pos:column="26">GetStemmedQuery</name></name><argument_list pos:line="119" pos:column="41">()</argument_list></call><op:operator pos:line="119" pos:column="43">.</op:operator><call><name pos:line="119" pos:column="44">Equals</name><argument_list pos:line="119" pos:column="50">(<argument><expr><call><name><name pos:line="119" pos:column="51">word2</name><op:operator pos:line="119" pos:column="56">.</op:operator><name pos:line="119" pos:column="57">GetStemmedQuery</name></name><argument_list pos:line="119" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="122" pos:column="9">public</specifier> <specifier pos:line="122" pos:column="16">static</specifier> <name><name pos:line="122" pos:column="23">List</name><argument_list pos:line="122" pos:column="27">&lt;<argument><name pos:line="122" pos:column="28">T</name></argument>&gt;</argument_list></name></type> <name><name pos:line="122" pos:column="31">AddImmutably</name><argument_list pos:line="122" pos:column="43">&lt;<argument><name pos:line="122" pos:column="44">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="122" pos:column="46">(<param><decl><type><name pos:line="122" pos:column="47">this</name> <name><name pos:line="122" pos:column="52">List</name><argument_list pos:line="122" pos:column="56">&lt;<argument><name pos:line="122" pos:column="57">T</name></argument>&gt;</argument_list></name></type> <name pos:line="122" pos:column="60">list</name></decl></param>, <param><decl><type><name pos:line="122" pos:column="66">T</name></type> <name pos:line="122" pos:column="68">element</name></decl></param>)</parameter_list>
        <block pos:line="123" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="124" pos:column="13">var</name></type> <name pos:line="124" pos:column="17">newList</name> <init pos:line="124" pos:column="25">= <expr><call><name><name pos:line="124" pos:column="27">list</name><op:operator pos:line="124" pos:column="31">.</op:operator><name pos:line="124" pos:column="32">ToList</name></name><argument_list pos:line="124" pos:column="38">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="125" pos:column="13">newList</name><op:operator pos:line="125" pos:column="20">.</op:operator><name pos:line="125" pos:column="21">Add</name></name><argument_list pos:line="125" pos:column="24">(<argument><expr><name pos:line="125" pos:column="25">element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="126" pos:column="13">return <expr><name pos:line="126" pos:column="20">newList</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="129" pos:column="9">public</specifier> <specifier pos:line="129" pos:column="16">static</specifier> <name pos:line="129" pos:column="23">String</name><index pos:line="129" pos:column="29">[]</index></type> <name pos:line="129" pos:column="32">SplitToLines</name><parameter_list pos:line="129" pos:column="44">(<param><decl><type><name pos:line="129" pos:column="45">this</name> <name pos:line="129" pos:column="50">String</name></type> <name pos:line="129" pos:column="57">text</name></decl></param>)</parameter_list>
        <block pos:line="130" pos:column="9">{
            <return pos:line="131" pos:column="13">return <expr><call><name><name pos:line="131" pos:column="20">text</name><op:operator pos:line="131" pos:column="24">.</op:operator><name pos:line="131" pos:column="25">Split</name></name><argument_list pos:line="131" pos:column="30">(<argument><expr><op:operator pos:line="131" pos:column="31">new</op:operator> <name><name pos:line="131" pos:column="35">string</name><index pos:line="131" pos:column="41">[]</index></name> <block pos:line="131" pos:column="44">{<expr><name><name pos:line="131" pos:column="45">Environment</name><op:operator pos:line="131" pos:column="56">.</op:operator><name pos:line="131" pos:column="57">NewLine</name></name></expr>}</block></expr></argument>, <argument><expr><name><name pos:line="131" pos:column="67">StringSplitOptions</name><op:operator pos:line="131" pos:column="85">.</op:operator><name pos:line="131" pos:column="86">None</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
