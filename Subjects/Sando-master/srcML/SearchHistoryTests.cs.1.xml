<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Core\Core.UnitTests\Tools\SearchHistoryTests.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">IO</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Linq</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Text</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">NUnit</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">Framework</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Sando</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">Core</name><op:operator pos:line="7" pos:column="17">.</op:operator><name pos:line="7" pos:column="18">Tools</name></name>;</using>

<namespace pos:line="9" pos:column="1">namespace <name><name pos:line="9" pos:column="11">Sando</name><op:operator pos:line="9" pos:column="16">.</op:operator><name pos:line="9" pos:column="17">Core</name><op:operator pos:line="9" pos:column="21">.</op:operator><name pos:line="9" pos:column="22">UnitTests</name><op:operator pos:line="9" pos:column="31">.</op:operator><name pos:line="9" pos:column="32">Tools</name></name>
<block pos:line="10" pos:column="1">{
    <class><attribute pos:line="11" pos:column="5">[<expr><name pos:line="11" pos:column="6">TestFixture</name></expr>]</attribute>
    <specifier pos:line="12" pos:column="5">public</specifier> class <name pos:line="12" pos:column="18">SearchHistoryTests</name> <super pos:line="12" pos:column="37">: <name pos:line="12" pos:column="39">RandomStringBasedTests</name></super>
    <block pos:line="13" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="14" pos:column="9">private</specifier> <name pos:line="14" pos:column="17">SearchHistory</name></type> <name pos:line="14" pos:column="31">history</name></decl>;</decl_stmt>

        <constructor><specifier pos:line="16" pos:column="9">public</specifier> <name pos:line="16" pos:column="16">SearchHistoryTests</name><parameter_list pos:line="16" pos:column="34">()</parameter_list>
        <block pos:line="17" pos:column="9">{
            <expr_stmt><expr><name pos:line="18" pos:column="13">history</name> <op:operator pos:line="18" pos:column="21">=</op:operator> <op:operator pos:line="18" pos:column="23">new</op:operator> <call><name pos:line="18" pos:column="27">SearchHistory</name><argument_list pos:line="18" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><attribute pos:line="21" pos:column="9">[<expr><name pos:line="21" pos:column="10">SetUp</name></expr>]</attribute>
        <specifier pos:line="22" pos:column="9">public</specifier> <name pos:line="22" pos:column="16">void</name></type> <name pos:line="22" pos:column="21">Initialize</name><parameter_list pos:line="22" pos:column="31">()</parameter_list>
        <block pos:line="23" pos:column="9">{
        }</block></function>

        <function><type><attribute pos:line="26" pos:column="9">[<expr><name pos:line="26" pos:column="10">TearDown</name></expr>]</attribute>
        <specifier pos:line="27" pos:column="9">public</specifier> <name pos:line="27" pos:column="16">void</name></type> <name pos:line="27" pos:column="21">disposeHistory</name><parameter_list pos:line="27" pos:column="35">()</parameter_list>
        <block pos:line="28" pos:column="9">{
        }</block></function>

        <function><type><attribute pos:line="31" pos:column="9">[<expr><name pos:line="31" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="32" pos:column="9">public</specifier> <name pos:line="32" pos:column="16">void</name></type> <name pos:line="32" pos:column="21">TestMultiQueries</name><parameter_list pos:line="32" pos:column="37">()</parameter_list>
        <block pos:line="33" pos:column="9">{
            <for pos:line="34" pos:column="13">for (<init><decl><type><name pos:line="34" pos:column="18">int</name></type> <name pos:line="34" pos:column="22">i</name> <init pos:line="34" pos:column="24">= <expr><lit:literal type="number" pos:line="34" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="34" pos:column="29">i</name> <op:operator pos:line="34" pos:column="31">&lt;</op:operator> <lit:literal type="number" pos:line="34" pos:column="33">900</lit:literal></expr>;</condition> <incr><expr><name pos:line="34" pos:column="38">i</name><op:operator pos:line="34" pos:column="39">++</op:operator></expr></incr>)
            <block pos:line="35" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="36" pos:column="17">var</name></type> <name pos:line="36" pos:column="21">query</name> <init pos:line="36" pos:column="27">= <expr><call><name pos:line="36" pos:column="29">GenerateRandomString</name><argument_list pos:line="36" pos:column="49">(<argument><expr><lit:literal type="number" pos:line="36" pos:column="50">20</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="37" pos:column="17">history</name><op:operator pos:line="37" pos:column="24">.</op:operator><name pos:line="37" pos:column="25">IssuedSearchString</name></name><argument_list pos:line="37" pos:column="43">(<argument><expr><name pos:line="37" pos:column="44">query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="38" pos:column="17">Assert</name><op:operator pos:line="38" pos:column="23">.</op:operator><name pos:line="38" pos:column="24">IsTrue</name></name><argument_list pos:line="38" pos:column="30">(<argument><expr><call><name><name pos:line="38" pos:column="31">history</name><op:operator pos:line="38" pos:column="38">.</op:operator><name pos:line="38" pos:column="39">GetSearchHistoryItems</name></name><argument_list pos:line="38" pos:column="60">(<argument><expr><lambda><name pos:line="38" pos:column="61">item</name> <op:operator pos:line="38" pos:column="66">=&gt;</op:operator> <call><name><name pos:line="38" pos:column="69">item</name><op:operator pos:line="38" pos:column="73">.</op:operator><name pos:line="38" pos:column="74">SearchString</name><op:operator pos:line="38" pos:column="86">.</op:operator>
                    <name pos:line="39" pos:column="21">Equals</name></name><argument_list pos:line="39" pos:column="27">(<argument><expr><name pos:line="39" pos:column="28">query</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="39" pos:column="35">.</op:operator><call><name pos:line="39" pos:column="36">Any</name><argument_list pos:line="39" pos:column="39">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></function>
    }</block></class>

    <class><attribute pos:line="44" pos:column="5">[<expr><name pos:line="44" pos:column="6">TestFixture</name></expr>]</attribute>
    <specifier pos:line="45" pos:column="5">public</specifier> class <name pos:line="45" pos:column="18">InFileSearchHistoryTests</name> <super pos:line="45" pos:column="43">: <name pos:line="45" pos:column="45">RandomStringBasedTests</name></super>
    <block pos:line="46" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="47" pos:column="9">private</specifier> <specifier pos:line="47" pos:column="17">const</specifier> <name pos:line="47" pos:column="23">String</name></type> <name pos:line="47" pos:column="30">directory</name> <init pos:line="47" pos:column="40">= <expr><lit:literal type="string" pos:line="47" pos:column="42">@"C:\Windows\Temp\"</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="48" pos:column="9">private</specifier> <name><name pos:line="48" pos:column="17">List</name><argument_list pos:line="48" pos:column="21">&lt;<argument><name pos:line="48" pos:column="22">String</name></argument>&gt;</argument_list></name></type> <name pos:line="48" pos:column="30">queries</name></decl>;</decl_stmt> 
        <decl_stmt><decl><type><specifier pos:line="49" pos:column="9">private</specifier> <name pos:line="49" pos:column="17">SearchHistory</name></type> <name pos:line="49" pos:column="31">history</name></decl>;</decl_stmt>

        <constructor><specifier pos:line="51" pos:column="9">public</specifier> <name pos:line="51" pos:column="16">InFileSearchHistoryTests</name><parameter_list pos:line="51" pos:column="40">()</parameter_list>
        <block pos:line="52" pos:column="9">{
            <expr_stmt><expr><name pos:line="53" pos:column="13">queries</name> <op:operator pos:line="53" pos:column="21">=</op:operator> <op:operator pos:line="53" pos:column="23">new</op:operator> <call><name><name pos:line="53" pos:column="27">List</name><argument_list pos:line="53" pos:column="31">&lt;<argument><name pos:line="53" pos:column="32">string</name></argument>&gt;</argument_list></name><argument_list pos:line="53" pos:column="39">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="54" pos:column="13">history</name> <op:operator pos:line="54" pos:column="21">=</op:operator> <op:operator pos:line="54" pos:column="23">new</op:operator> <call><name pos:line="54" pos:column="27">SearchHistory</name><argument_list pos:line="54" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><attribute pos:line="57" pos:column="9">[<expr><name pos:line="57" pos:column="10">SetUp</name></expr>]</attribute>
        <specifier pos:line="58" pos:column="9">public</specifier> <name pos:line="58" pos:column="16">void</name></type> <name pos:line="58" pos:column="21">Initialize</name><parameter_list pos:line="58" pos:column="31">()</parameter_list>
        <block pos:line="59" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="60" pos:column="13">var</name></type> <name pos:line="60" pos:column="17">path</name> <init pos:line="60" pos:column="22">= <expr><call><name><name pos:line="60" pos:column="24">Path</name><op:operator pos:line="60" pos:column="28">.</op:operator><name pos:line="60" pos:column="29">Combine</name></name><argument_list pos:line="60" pos:column="36">(<argument><expr><name pos:line="60" pos:column="37">directory</name></expr></argument>, <argument><expr><name><name pos:line="60" pos:column="48">SearchHistory</name><op:operator pos:line="60" pos:column="61">.</op:operator><name pos:line="60" pos:column="62">FILE_NAME</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="61" pos:column="13">File</name><op:operator pos:line="61" pos:column="17">.</op:operator><name pos:line="61" pos:column="18">Delete</name></name><argument_list pos:line="61" pos:column="24">(<argument><expr><name pos:line="61" pos:column="25">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="62" pos:column="13">queries</name><op:operator pos:line="62" pos:column="20">.</op:operator><name pos:line="62" pos:column="21">Clear</name></name><argument_list pos:line="62" pos:column="26">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="63" pos:column="13">history</name><op:operator pos:line="63" pos:column="20">.</op:operator><name pos:line="63" pos:column="21">Initialize</name></name><argument_list pos:line="63" pos:column="31">(<argument><expr><name pos:line="63" pos:column="32">directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for pos:line="64" pos:column="13">for (<init><decl><type><name pos:line="64" pos:column="18">var</name></type> <name pos:line="64" pos:column="22">i</name> <init pos:line="64" pos:column="24">= <expr><lit:literal type="number" pos:line="64" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="64" pos:column="29">i</name> <op:operator pos:line="64" pos:column="31">&lt;</op:operator> <lit:literal type="number" pos:line="64" pos:column="33">900</lit:literal></expr>;</condition> <incr><expr><name pos:line="64" pos:column="38">i</name><op:operator pos:line="64" pos:column="39">++</op:operator></expr></incr>)
            <block pos:line="65" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="66" pos:column="17">var</name></type> <name pos:line="66" pos:column="21">query</name> <init pos:line="66" pos:column="27">= <expr><call><name pos:line="66" pos:column="29">GenerateRandomString</name><argument_list pos:line="66" pos:column="49">(<argument><expr><lit:literal type="number" pos:line="66" pos:column="50">20</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="67" pos:column="17">history</name><op:operator pos:line="67" pos:column="24">.</op:operator><name pos:line="67" pos:column="25">IssuedSearchString</name></name><argument_list pos:line="67" pos:column="43">(<argument><expr><name pos:line="67" pos:column="44">query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="68" pos:column="17">queries</name><op:operator pos:line="68" pos:column="24">.</op:operator><name pos:line="68" pos:column="25">Add</name></name><argument_list pos:line="68" pos:column="28">(<argument><expr><name pos:line="68" pos:column="29">query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><call><name><name pos:line="70" pos:column="13">history</name><op:operator pos:line="70" pos:column="20">.</op:operator><name pos:line="70" pos:column="21">Dispose</name></name><argument_list pos:line="70" pos:column="28">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="71" pos:column="13">history</name><op:operator pos:line="71" pos:column="20">.</op:operator><name pos:line="71" pos:column="21">Initialize</name></name><argument_list pos:line="71" pos:column="31">(<argument><expr><name pos:line="71" pos:column="32">directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="74" pos:column="9">[<expr><name pos:line="74" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="75" pos:column="9">public</specifier> <name pos:line="75" pos:column="16">void</name></type> <name pos:line="75" pos:column="21">EnsureQueriesSavedCorrectly</name><parameter_list pos:line="75" pos:column="48">()</parameter_list>
        <block pos:line="76" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="77" pos:column="13">Assert</name><op:operator pos:line="77" pos:column="19">.</op:operator><name pos:line="77" pos:column="20">IsTrue</name></name><argument_list pos:line="77" pos:column="26">(<argument><expr><call><name><name pos:line="77" pos:column="27">queries</name><op:operator pos:line="77" pos:column="34">.</op:operator><name pos:line="77" pos:column="35">All</name></name><argument_list pos:line="77" pos:column="38">(<argument><expr><lambda><name pos:line="77" pos:column="39">q</name> <op:operator pos:line="77" pos:column="41">=&gt;</op:operator> <call><name><name pos:line="77" pos:column="44">history</name><op:operator pos:line="77" pos:column="51">.</op:operator><name pos:line="77" pos:column="52">GetSearchHistoryItems</name></name><argument_list pos:line="77" pos:column="73">(<argument><expr><lambda><name pos:line="77" pos:column="74">item</name> <op:operator pos:line="77" pos:column="79">=&gt;</op:operator> 
                <call><name><name pos:line="78" pos:column="17">item</name><op:operator pos:line="78" pos:column="21">.</op:operator><name pos:line="78" pos:column="22">SearchString</name><op:operator pos:line="78" pos:column="34">.</op:operator><name pos:line="78" pos:column="35">Equals</name></name><argument_list pos:line="78" pos:column="41">(<argument><expr><name pos:line="78" pos:column="42">q</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="78" pos:column="45">.</op:operator><call><name pos:line="78" pos:column="46">Any</name><argument_list pos:line="78" pos:column="49">()</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="81" pos:column="9">[<expr><name pos:line="81" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="82" pos:column="9">public</specifier> <name pos:line="82" pos:column="16">void</name></type> <name pos:line="82" pos:column="21">EnsureTimeSavedCorrectly</name><parameter_list pos:line="82" pos:column="45">()</parameter_list>
        <block pos:line="83" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="84" pos:column="13">var</name></type> <name pos:line="84" pos:column="17">now</name> <init pos:line="84" pos:column="21">= <expr><name><name pos:line="84" pos:column="23">DateTime</name><op:operator pos:line="84" pos:column="31">.</op:operator><name pos:line="84" pos:column="32">Now</name><op:operator pos:line="84" pos:column="35">.</op:operator><name pos:line="84" pos:column="36">Ticks</name></name></expr></init></decl>;</decl_stmt>
            <foreach pos:line="85" pos:column="13">foreach (<init><decl><type><name pos:line="85" pos:column="22">var</name></type> <name pos:line="85" pos:column="26">query</name> <range pos:line="85" pos:column="32">in <expr><name pos:line="85" pos:column="35">queries</name></expr></range></decl></init>)
            <block pos:line="86" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="87" pos:column="17">string</name></type> <name pos:line="87" pos:column="24">q</name> <init pos:line="87" pos:column="26">= <expr><name pos:line="87" pos:column="28">query</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="88" pos:column="17">var</name></type> <name pos:line="88" pos:column="21">entry</name> <init pos:line="88" pos:column="27">= <expr><call><name><name pos:line="88" pos:column="29">history</name><op:operator pos:line="88" pos:column="36">.</op:operator><name pos:line="88" pos:column="37">GetSearchHistoryItems</name></name><argument_list pos:line="88" pos:column="58">(<argument><expr><lambda><name pos:line="88" pos:column="59">item</name> <op:operator pos:line="88" pos:column="64">=&gt;</op:operator> <call><name><name pos:line="88" pos:column="67">item</name><op:operator pos:line="88" pos:column="71">.</op:operator><name pos:line="88" pos:column="72">SearchString</name><op:operator pos:line="88" pos:column="84">.</op:operator><name pos:line="88" pos:column="85">Equals</name></name><argument_list pos:line="88" pos:column="91">(<argument><expr><name pos:line="88" pos:column="92">q</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="88" pos:column="95">.</op:operator><call><name pos:line="88" pos:column="96">First</name><argument_list pos:line="88" pos:column="101">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="89" pos:column="17">Assert</name><op:operator pos:line="89" pos:column="23">.</op:operator><name pos:line="89" pos:column="24">IsTrue</name></name><argument_list pos:line="89" pos:column="30">(<argument><expr><name><name pos:line="89" pos:column="31">entry</name><op:operator pos:line="89" pos:column="36">.</op:operator><name pos:line="89" pos:column="37">TimeStamp</name></name> <op:operator pos:line="89" pos:column="47">&lt;</op:operator> <name pos:line="89" pos:column="49">now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line" pos:line="91" pos:column="17">// The gap should be less than 1 seconds.</comment>
                <expr_stmt><expr><call><name><name pos:line="92" pos:column="17">Assert</name><op:operator pos:line="92" pos:column="23">.</op:operator><name pos:line="92" pos:column="24">IsTrue</name></name><argument_list pos:line="92" pos:column="30">(<argument><expr><name pos:line="92" pos:column="31">now</name> <op:operator pos:line="92" pos:column="35">-</op:operator> <name><name pos:line="92" pos:column="37">entry</name><op:operator pos:line="92" pos:column="42">.</op:operator><name pos:line="92" pos:column="43">TimeStamp</name></name> <op:operator pos:line="92" pos:column="53">&lt;</op:operator> <lit:literal type="number" pos:line="92" pos:column="55">1</lit:literal><op:operator pos:line="92" pos:column="56">*</op:operator><lit:literal type="number" pos:line="92" pos:column="57">1000</lit:literal><op:operator pos:line="92" pos:column="61">*</op:operator><lit:literal type="number" pos:line="92" pos:column="62">10000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>
    }</block></class>

}</block></namespace>
</unit>
