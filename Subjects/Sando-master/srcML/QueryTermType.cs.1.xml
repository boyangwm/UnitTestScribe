<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Indexer\Indexer\Metrics\QueryTermType.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Text</name></name>;</using>

<namespace pos:line="6" pos:column="1">namespace <name><name pos:line="6" pos:column="11">Sando</name><op:operator pos:line="6" pos:column="16">.</op:operator><name pos:line="6" pos:column="17">Indexer</name><op:operator pos:line="6" pos:column="24">.</op:operator><name pos:line="6" pos:column="25">Searching</name><op:operator pos:line="6" pos:column="34">.</op:operator><name pos:line="6" pos:column="35">Metrics</name></name>
<block pos:line="7" pos:column="1">{
    <enum><attribute pos:line="8" pos:column="5">[<expr><name pos:line="8" pos:column="6">Flags</name></expr>]</attribute>
    <specifier pos:line="9" pos:column="5">public</specifier> enum <macro><name pos:line="9" pos:column="17">QueryTermType</name></macro>
    <block pos:line="10" pos:column="5">{
        <decl><name pos:line="11" pos:column="9">None</name> <init pos:line="11" pos:column="14">= <expr><lit:literal type="number" pos:line="11" pos:column="16">0x00</lit:literal></expr></init></decl><op:operator pos:line="11" pos:column="20">,</op:operator>
        <decl><name pos:line="12" pos:column="9">Minus</name> <init pos:line="12" pos:column="15">= <expr><lit:literal type="number" pos:line="12" pos:column="17">0x01</lit:literal></expr></init></decl><op:operator pos:line="12" pos:column="21">,</op:operator>
        <decl><name pos:line="13" pos:column="9">Camelcase</name> <init pos:line="13" pos:column="19">= <expr><lit:literal type="number" pos:line="13" pos:column="21">0x02</lit:literal></expr></init></decl><op:operator pos:line="13" pos:column="25">,</op:operator>
        <decl><name pos:line="14" pos:column="9">Underscore</name> <init pos:line="14" pos:column="20">= <expr><lit:literal type="number" pos:line="14" pos:column="22">0x04</lit:literal></expr></init></decl><op:operator pos:line="14" pos:column="26">,</op:operator>
        <decl><name pos:line="15" pos:column="9">Filetype</name> <init pos:line="15" pos:column="18">= <expr><lit:literal type="number" pos:line="15" pos:column="20">0x08</lit:literal></expr></init></decl><op:operator pos:line="15" pos:column="24">,</op:operator>
        <decl><name pos:line="16" pos:column="9">Quoted</name> <init pos:line="16" pos:column="16">= <expr><lit:literal type="number" pos:line="16" pos:column="18">0x10</lit:literal></expr></init></decl><op:operator pos:line="16" pos:column="22">,</op:operator>
        <decl><name pos:line="17" pos:column="9">Acronym</name> <init pos:line="17" pos:column="17">= <expr><lit:literal type="number" pos:line="17" pos:column="19">0x20</lit:literal></expr></init></decl>
    }</block>

    <decl pos:line="20" pos:column="5">public <name pos:line="20" pos:column="12">class</name> <name pos:line="20" pos:column="18">QueryTermTypeList</name>
    <block pos:line="21" pos:column="5">{
        <constructor><specifier pos:line="22" pos:column="9">public</specifier> <name pos:line="22" pos:column="16">QueryTermTypeList</name><parameter_list pos:line="22" pos:column="33">()</parameter_list>
        <block pos:line="23" pos:column="9">{
            <expr_stmt><expr><name pos:line="24" pos:column="13">_termTypes</name> <op:operator pos:line="24" pos:column="24">=</op:operator> <op:operator pos:line="24" pos:column="26">new</op:operator> <call><name><name pos:line="24" pos:column="30">List</name><argument_list pos:line="24" pos:column="34">&lt;<argument><name pos:line="24" pos:column="35">QueryTermType</name></argument>&gt;</argument_list></name><argument_list pos:line="24" pos:column="49">()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <decl_stmt><decl><type><specifier pos:line="27" pos:column="9">public</specifier> <name pos:line="27" pos:column="16">QueryTermType</name></type> <name pos:line="27" pos:column="30">this</name><parameter_list pos:line="27" pos:column="34">[<param><decl><type><name pos:line="27" pos:column="35">int</name></type> <name pos:line="27" pos:column="39">i</name></decl></param>]</parameter_list>
        <block pos:line="28" pos:column="9">{
            <function><name pos:line="29" pos:column="13">get</name> 
            <block pos:line="30" pos:column="13">{
                <if pos:line="31" pos:column="17">if <condition pos:line="31" pos:column="20">(<expr><name pos:line="31" pos:column="21">i</name> <op:operator pos:line="31" pos:column="23">&lt;</op:operator> <name><name pos:line="31" pos:column="25">_termTypes</name><op:operator pos:line="31" pos:column="35">.</op:operator><name pos:line="31" pos:column="36">Count</name></name></expr>)</condition><then pos:line="31" pos:column="42">
                <block pos:line="32" pos:column="17">{
                    <return pos:line="33" pos:column="21">return <expr><name><name pos:line="33" pos:column="28">_termTypes</name><index pos:line="33" pos:column="38">[<expr><name pos:line="33" pos:column="39">i</name></expr>]</index></name></expr>;</return>
                }</block></then>
                <else pos:line="35" pos:column="17">else
                <block pos:line="36" pos:column="17">{
                    <return pos:line="37" pos:column="21">return <expr><name><name pos:line="37" pos:column="28">QueryTermType</name><op:operator pos:line="37" pos:column="41">.</op:operator><name pos:line="37" pos:column="42">None</name></name></expr>;</return>
                }</block></else></if>
            }</block></function>
            <function><name pos:line="40" pos:column="13">set</name> 
            <block pos:line="41" pos:column="13">{
                <if pos:line="42" pos:column="17">if <condition pos:line="42" pos:column="20">(<expr><name pos:line="42" pos:column="21">i</name> <op:operator pos:line="42" pos:column="23">&gt;=</op:operator> <name><name pos:line="42" pos:column="26">_termTypes</name><op:operator pos:line="42" pos:column="36">.</op:operator><name pos:line="42" pos:column="37">Count</name></name></expr>)</condition><then pos:line="42" pos:column="43">
                <block pos:line="43" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="44" pos:column="21">_termTypes</name><op:operator pos:line="44" pos:column="31">.</op:operator><name pos:line="44" pos:column="32">AddRange</name></name><argument_list pos:line="44" pos:column="40">(<argument><expr><call><name><name pos:line="44" pos:column="41">Enumerable</name><op:operator pos:line="44" pos:column="51">.</op:operator><name pos:line="44" pos:column="52">Repeat</name></name><argument_list pos:line="44" pos:column="58">(<argument><expr><name><name pos:line="44" pos:column="59">QueryTermType</name><op:operator pos:line="44" pos:column="72">.</op:operator><name pos:line="44" pos:column="73">None</name></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="79">i</name> <op:operator pos:line="44" pos:column="81">-</op:operator> <name><name pos:line="44" pos:column="83">_termTypes</name><op:operator pos:line="44" pos:column="93">.</op:operator><name pos:line="44" pos:column="94">Count</name></name> <op:operator pos:line="44" pos:column="100">+</op:operator> <lit:literal type="number" pos:line="44" pos:column="102">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name><name pos:line="46" pos:column="17">_termTypes</name><index pos:line="46" pos:column="27">[<expr><name pos:line="46" pos:column="28">i</name></expr>]</index></name> <op:operator pos:line="46" pos:column="31">=</op:operator> <name pos:line="46" pos:column="33">value</name></expr>;</expr_stmt>
            }</block></function>
        }</block></decl></decl_stmt>

        <function><type><specifier pos:line="50" pos:column="9">public</specifier> <name pos:line="50" pos:column="16">string</name></type> <name pos:line="50" pos:column="23">ToString</name><parameter_list pos:line="50" pos:column="31">()</parameter_list>
        <block pos:line="51" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="52" pos:column="13">string</name></type> <name pos:line="52" pos:column="20">result</name> <init pos:line="52" pos:column="27">= <expr><lit:literal type="string" pos:line="52" pos:column="29">""</lit:literal></expr></init></decl>;</decl_stmt>
            <foreach pos:line="53" pos:column="13">foreach (<init><decl><type><name pos:line="53" pos:column="22">var</name></type> <name pos:line="53" pos:column="26">tt</name> <range pos:line="53" pos:column="29">in <expr><name pos:line="53" pos:column="32">_termTypes</name></expr></range></decl></init>)
            <block pos:line="54" pos:column="13">{
                <if pos:line="55" pos:column="17">if <condition pos:line="55" pos:column="20">(<expr><name pos:line="55" pos:column="21">tt</name> <op:operator pos:line="55" pos:column="24">==</op:operator> <name><name pos:line="55" pos:column="27">QueryTermType</name><op:operator pos:line="55" pos:column="40">.</op:operator><name pos:line="55" pos:column="41">None</name></name></expr>)</condition><then pos:line="55" pos:column="46">
                <block pos:line="56" pos:column="17">{
                    <expr_stmt><expr><name pos:line="57" pos:column="21">result</name> <op:operator pos:line="57" pos:column="28">+=</op:operator> <lit:literal type="string" pos:line="57" pos:column="31">"Plain"</lit:literal></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="59" pos:column="17">else
                <block pos:line="60" pos:column="17">{
                    <if pos:line="61" pos:column="21">if <condition pos:line="61" pos:column="24">(<expr><op:operator pos:line="61" pos:column="25">(</op:operator><name pos:line="61" pos:column="26">tt</name> <op:operator pos:line="61" pos:column="29">&amp;</op:operator> <name><name pos:line="61" pos:column="31">QueryTermType</name><op:operator pos:line="61" pos:column="44">.</op:operator><name pos:line="61" pos:column="45">Filetype</name></name><op:operator pos:line="61" pos:column="53">)</op:operator> <op:operator pos:line="61" pos:column="55">==</op:operator> <name><name pos:line="61" pos:column="58">QueryTermType</name><op:operator pos:line="61" pos:column="71">.</op:operator><name pos:line="61" pos:column="72">Filetype</name></name></expr>)</condition><then pos:line="61" pos:column="81"> <expr_stmt><expr><name pos:line="61" pos:column="82">result</name> <op:operator pos:line="61" pos:column="89">+=</op:operator> <lit:literal type="string" pos:line="61" pos:column="92">"Filetype"</lit:literal></expr>;</expr_stmt></then></if>
                    <if pos:line="62" pos:column="21">if <condition pos:line="62" pos:column="24">(<expr><op:operator pos:line="62" pos:column="25">(</op:operator><name pos:line="62" pos:column="26">tt</name> <op:operator pos:line="62" pos:column="29">&amp;</op:operator> <name><name pos:line="62" pos:column="31">QueryTermType</name><op:operator pos:line="62" pos:column="44">.</op:operator><name pos:line="62" pos:column="45">Minus</name></name><op:operator pos:line="62" pos:column="50">)</op:operator> <op:operator pos:line="62" pos:column="52">==</op:operator> <name><name pos:line="62" pos:column="55">QueryTermType</name><op:operator pos:line="62" pos:column="68">.</op:operator><name pos:line="62" pos:column="69">Minus</name></name></expr>)</condition><then pos:line="62" pos:column="75"> <expr_stmt><expr><name pos:line="62" pos:column="76">result</name> <op:operator pos:line="62" pos:column="83">+=</op:operator> <lit:literal type="string" pos:line="62" pos:column="86">"Minus"</lit:literal></expr>;</expr_stmt></then></if>
                    <if pos:line="63" pos:column="21">if <condition pos:line="63" pos:column="24">(<expr><op:operator pos:line="63" pos:column="25">(</op:operator><name pos:line="63" pos:column="26">tt</name> <op:operator pos:line="63" pos:column="29">&amp;</op:operator> <name><name pos:line="63" pos:column="31">QueryTermType</name><op:operator pos:line="63" pos:column="44">.</op:operator><name pos:line="63" pos:column="45">Quoted</name></name><op:operator pos:line="63" pos:column="51">)</op:operator> <op:operator pos:line="63" pos:column="53">==</op:operator> <name><name pos:line="63" pos:column="56">QueryTermType</name><op:operator pos:line="63" pos:column="69">.</op:operator><name pos:line="63" pos:column="70">Quoted</name></name></expr>)</condition><then pos:line="63" pos:column="77"> <expr_stmt><expr><name pos:line="63" pos:column="78">result</name> <op:operator pos:line="63" pos:column="85">+=</op:operator> <lit:literal type="string" pos:line="63" pos:column="88">"Quoted"</lit:literal></expr>;</expr_stmt></then></if>
                    <if pos:line="64" pos:column="21">if <condition pos:line="64" pos:column="24">(<expr><op:operator pos:line="64" pos:column="25">(</op:operator><name pos:line="64" pos:column="26">tt</name> <op:operator pos:line="64" pos:column="29">&amp;</op:operator> <name><name pos:line="64" pos:column="31">QueryTermType</name><op:operator pos:line="64" pos:column="44">.</op:operator><name pos:line="64" pos:column="45">Camelcase</name></name><op:operator pos:line="64" pos:column="54">)</op:operator> <op:operator pos:line="64" pos:column="56">==</op:operator> <name><name pos:line="64" pos:column="59">QueryTermType</name><op:operator pos:line="64" pos:column="72">.</op:operator><name pos:line="64" pos:column="73">Camelcase</name></name></expr>)</condition><then pos:line="64" pos:column="83"> <expr_stmt><expr><name pos:line="64" pos:column="84">result</name> <op:operator pos:line="64" pos:column="91">+=</op:operator> <lit:literal type="string" pos:line="64" pos:column="94">"Camelcase"</lit:literal></expr>;</expr_stmt></then></if>
                    <if pos:line="65" pos:column="21">if <condition pos:line="65" pos:column="24">(<expr><op:operator pos:line="65" pos:column="25">(</op:operator><name pos:line="65" pos:column="26">tt</name> <op:operator pos:line="65" pos:column="29">&amp;</op:operator> <name><name pos:line="65" pos:column="31">QueryTermType</name><op:operator pos:line="65" pos:column="44">.</op:operator><name pos:line="65" pos:column="45">Acronym</name></name><op:operator pos:line="65" pos:column="52">)</op:operator> <op:operator pos:line="65" pos:column="54">==</op:operator> <name><name pos:line="65" pos:column="57">QueryTermType</name><op:operator pos:line="65" pos:column="70">.</op:operator><name pos:line="65" pos:column="71">Acronym</name></name></expr>)</condition><then pos:line="65" pos:column="79"> <expr_stmt><expr><name pos:line="65" pos:column="80">result</name> <op:operator pos:line="65" pos:column="87">+=</op:operator> <lit:literal type="string" pos:line="65" pos:column="90">"Acronym"</lit:literal></expr>;</expr_stmt></then></if>
                    <if pos:line="66" pos:column="21">if <condition pos:line="66" pos:column="24">(<expr><op:operator pos:line="66" pos:column="25">(</op:operator><name pos:line="66" pos:column="26">tt</name> <op:operator pos:line="66" pos:column="29">&amp;</op:operator> <name><name pos:line="66" pos:column="31">QueryTermType</name><op:operator pos:line="66" pos:column="44">.</op:operator><name pos:line="66" pos:column="45">Underscore</name></name><op:operator pos:line="66" pos:column="55">)</op:operator> <op:operator pos:line="66" pos:column="57">==</op:operator> <name><name pos:line="66" pos:column="60">QueryTermType</name><op:operator pos:line="66" pos:column="73">.</op:operator><name pos:line="66" pos:column="74">Underscore</name></name></expr>)</condition><then pos:line="66" pos:column="85"> <expr_stmt><expr><name pos:line="66" pos:column="86">result</name> <op:operator pos:line="66" pos:column="93">+=</op:operator> <lit:literal type="string" pos:line="66" pos:column="96">"Underscore"</lit:literal></expr>;</expr_stmt></then></if>
                }</block></else></if>
                <expr_stmt><expr><name pos:line="68" pos:column="17">result</name> <op:operator pos:line="68" pos:column="24">+=</op:operator> <lit:literal type="string" pos:line="68" pos:column="27">","</lit:literal></expr>;</expr_stmt>
            }</block></foreach>
            <return pos:line="70" pos:column="13">return <expr><call><name><name pos:line="70" pos:column="20">result</name><op:operator pos:line="70" pos:column="26">.</op:operator><name pos:line="70" pos:column="27">TrimEnd</name></name><argument_list pos:line="70" pos:column="34">(<argument><expr><lit:literal type="char" pos:line="70" pos:column="35">','</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <decl_stmt><decl><type><specifier pos:line="73" pos:column="9">private</specifier> <name><name pos:line="73" pos:column="17">List</name><argument_list pos:line="73" pos:column="21">&lt;<argument><name pos:line="73" pos:column="22">QueryTermType</name></argument>&gt;</argument_list></name></type> <name pos:line="73" pos:column="37">_termTypes</name></decl>;</decl_stmt> 
    }</block></decl>
<decl/></enum>}</block></namespace>
</unit>
