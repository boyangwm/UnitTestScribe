<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Core\Core\Tools\WordCoOccurrenceMatrix.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Collections</name><op:operator pos:line="3" pos:column="25">.</op:operator><name pos:line="3" pos:column="26">Generic</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">ComponentModel</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">IO</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">System</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">Linq</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">System</name><op:operator pos:line="7" pos:column="13">.</op:operator><name pos:line="7" pos:column="14">Text</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Sando</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">Core</name><op:operator pos:line="8" pos:column="17">.</op:operator><name pos:line="8" pos:column="18">QueryRefomers</name></name>;</using>

<namespace pos:line="10" pos:column="1">namespace <name><name pos:line="10" pos:column="11">Sando</name><op:operator pos:line="10" pos:column="16">.</op:operator><name pos:line="10" pos:column="17">Core</name><op:operator pos:line="10" pos:column="21">.</op:operator><name pos:line="10" pos:column="22">Tools</name></name>
<block pos:line="11" pos:column="1">{
    <class type="interface"><specifier pos:line="12" pos:column="5">public</specifier> interface <name pos:line="12" pos:column="22">IMatrixEntry</name>
    <block pos:line="13" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="14" pos:column="9">string</name></type> <name pos:line="14" pos:column="16">Row</name> <block pos:line="14" pos:column="20">{ <function_decl><name pos:line="14" pos:column="22">get</name>;</function_decl> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><name pos:line="15" pos:column="9">string</name></type> <name pos:line="15" pos:column="16">Column</name> <block pos:line="15" pos:column="23">{ <function_decl><name pos:line="15" pos:column="25">get</name>;</function_decl> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><name pos:line="16" pos:column="9">int</name></type> <name pos:line="16" pos:column="13">Count</name> <block pos:line="16" pos:column="19">{ <function_decl><name pos:line="16" pos:column="21">get</name>;</function_decl> }</block></decl></decl_stmt>
    }</block></class>

    <class type="interface"><specifier pos:line="19" pos:column="5">public</specifier> interface <name pos:line="19" pos:column="22">IWordCoOccurrenceMatrix</name> <super pos:line="19" pos:column="46">: <name pos:line="19" pos:column="48">IDisposable</name>, <name pos:line="19" pos:column="61">IInitializable</name></super>
    <block pos:line="20" pos:column="5">{
        <function_decl><type><name pos:line="21" pos:column="9">int</name></type> <name pos:line="21" pos:column="13">GetCoOccurrenceCount</name><parameter_list pos:line="21" pos:column="33">(<param><decl><type><name pos:line="21" pos:column="34">String</name></type> <name pos:line="21" pos:column="41">word1</name></decl></param>, <param><decl><type><name pos:line="21" pos:column="48">String</name></type> <name pos:line="21" pos:column="55">word2</name></decl></param>)</parameter_list>;</function_decl>
        <function_decl><type><name><name pos:line="22" pos:column="9">Dictionary</name><argument_list pos:line="22" pos:column="19">&lt;<argument><name pos:line="22" pos:column="20">String</name></argument>, <argument><name pos:line="22" pos:column="28">int</name></argument>&gt;</argument_list></name></type> <name pos:line="22" pos:column="33">GetCoOccurredWordsAndCount</name><parameter_list pos:line="22" pos:column="59">(<param><decl><type><name pos:line="22" pos:column="60">String</name></type> <name pos:line="22" pos:column="67">word</name></decl></param>)</parameter_list>;</function_decl>
        <function_decl><type><name><name pos:line="23" pos:column="9">Dictionary</name><argument_list pos:line="23" pos:column="19">&lt;<argument><name pos:line="23" pos:column="20">string</name></argument>, <argument><name pos:line="23" pos:column="28">int</name></argument>&gt;</argument_list></name></type> <name pos:line="23" pos:column="33">GetAllWordsAndCount</name><parameter_list pos:line="23" pos:column="52">()</parameter_list>;</function_decl>
        <function_decl><type><name><name pos:line="24" pos:column="9">IEnumerable</name><argument_list pos:line="24" pos:column="20">&lt;<argument><name pos:line="24" pos:column="21">IMatrixEntry</name></argument>&gt;</argument_list></name></type> <name pos:line="24" pos:column="35">GetEntries</name><parameter_list pos:line="24" pos:column="45">(<param><decl><type><name><name pos:line="24" pos:column="46">Predicate</name><argument_list pos:line="24" pos:column="55">&lt;<argument><name pos:line="24" pos:column="56">IMatrixEntry</name></argument>&gt;</argument_list></name></type> <name pos:line="24" pos:column="70">predicate</name></decl></param>)</parameter_list>;</function_decl>
    }</block></class>

    <class><specifier pos:line="27" pos:column="5">public</specifier> class <name pos:line="27" pos:column="18">InternalWordCoOccurrenceMatrix</name> <super pos:line="27" pos:column="49">: <name pos:line="27" pos:column="51">IWordCoOccurrenceMatrix</name></super>
    <block pos:line="28" pos:column="5">{
       
        <decl_stmt><decl><type><specifier pos:line="30" pos:column="9">private</specifier> <specifier pos:line="30" pos:column="17">readonly</specifier> <name pos:line="30" pos:column="26">object</name></type> <name pos:line="30" pos:column="33">locker</name> <init pos:line="30" pos:column="40">= <expr><op:operator pos:line="30" pos:column="42">new</op:operator> <call><name pos:line="30" pos:column="46">object</name><argument_list pos:line="30" pos:column="52">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="31" pos:column="9">private</specifier> <name><name pos:line="31" pos:column="17">List</name><argument_list pos:line="31" pos:column="21">&lt;<argument><name pos:line="31" pos:column="22">MatrixEntry</name></argument>&gt;</argument_list></name></type> <name pos:line="31" pos:column="35">matrix</name> <init pos:line="31" pos:column="42">= <expr><op:operator pos:line="31" pos:column="44">new</op:operator> <call><name><name pos:line="31" pos:column="48">List</name><argument_list pos:line="31" pos:column="52">&lt;<argument><name pos:line="31" pos:column="53">MatrixEntry</name></argument>&gt;</argument_list></name><argument_list pos:line="31" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="32" pos:column="9">private</specifier> <specifier pos:line="32" pos:column="17">readonly</specifier> <name pos:line="32" pos:column="26">WorkQueueBasedProcess</name></type> <name pos:line="32" pos:column="48">queue</name> <init pos:line="32" pos:column="54">= <expr><op:operator pos:line="32" pos:column="56">new</op:operator> <call><name pos:line="32" pos:column="60">WorkQueueBasedProcess</name><argument_list pos:line="32" pos:column="81">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="34" pos:column="9">private</specifier> <name pos:line="34" pos:column="17">string</name></type> <name pos:line="34" pos:column="24">directory</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="35" pos:column="9">private</specifier> <name pos:line="35" pos:column="17">Action</name></type> <name pos:line="35" pos:column="24">saveAction</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="37" pos:column="9">private</specifier> <specifier pos:line="37" pos:column="17">const</specifier> <name pos:line="37" pos:column="23">string</name></type> <name pos:line="37" pos:column="30">fileName</name> <init pos:line="37" pos:column="39">= <expr><lit:literal type="string" pos:line="37" pos:column="41">"CooccurenceMatrix.txt"</lit:literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="39" pos:column="9">private</specifier> <specifier pos:line="39" pos:column="17">const</specifier> <name pos:line="39" pos:column="23">int</name></type> <name pos:line="39" pos:column="27">MAX_WORD_LENGTH</name> <init pos:line="39" pos:column="43">= <expr><lit:literal type="number" pos:line="39" pos:column="45">3</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="40" pos:column="9">private</specifier> <specifier pos:line="40" pos:column="17">const</specifier> <name pos:line="40" pos:column="23">int</name></type> <name pos:line="40" pos:column="27">MAX_COOCCURRENCE_WORDS_COUNT</name> <init pos:line="40" pos:column="56">= <expr><lit:literal type="number" pos:line="40" pos:column="58">100</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="41" pos:column="9">private</specifier> <specifier pos:line="41" pos:column="17">const</specifier> <name pos:line="41" pos:column="23">int</name></type> <name pos:line="41" pos:column="27">GRAM_NUMBER</name> <init pos:line="41" pos:column="39">= <expr><lit:literal type="number" pos:line="41" pos:column="41">3</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="42" pos:column="9">private</specifier> <specifier pos:line="42" pos:column="17">const</specifier> <name pos:line="42" pos:column="23">int</name></type> <name pos:line="42" pos:column="27">SAVE_EVERY_MINUTES</name> <init pos:line="42" pos:column="46">= <expr><lit:literal type="number" pos:line="42" pos:column="48">10</lit:literal></expr></init></decl>;</decl_stmt>

        <function><type><specifier pos:line="44" pos:column="9">public</specifier> <name pos:line="44" pos:column="16">void</name></type> <name pos:line="44" pos:column="21">Initialize</name><parameter_list pos:line="44" pos:column="31">(<param><decl><type><name pos:line="44" pos:column="32">String</name></type> <name pos:line="44" pos:column="39">directory</name></decl></param>)</parameter_list>
        <block pos:line="45" pos:column="9">{
            <lock pos:line="46" pos:column="13">lock (<expr><name pos:line="46" pos:column="19">locker</name></expr>)
            <block pos:line="47" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="48" pos:column="17">matrix</name><op:operator pos:line="48" pos:column="23">.</op:operator><name pos:line="48" pos:column="24">Clear</name></name><argument_list pos:line="48" pos:column="29">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="49" pos:column="17">this</name><op:operator pos:line="49" pos:column="21">.</op:operator><name pos:line="49" pos:column="22">directory</name></name> <op:operator pos:line="49" pos:column="32">=</op:operator> <name pos:line="49" pos:column="34">directory</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="50" pos:column="17">ReadMatrixFromFile</name><argument_list pos:line="50" pos:column="35">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name pos:line="52" pos:column="17">saveAction</name> <op:operator pos:line="52" pos:column="28">=</op:operator> <op:operator pos:line="52" pos:column="30">new</op:operator> <call><name pos:line="52" pos:column="34">Action</name><argument_list pos:line="52" pos:column="40">(<argument><expr><name pos:line="52" pos:column="41">WriteMatrixToFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="53" pos:column="17">TimedProcessor</name><op:operator pos:line="53" pos:column="31">.</op:operator><name pos:line="53" pos:column="32">GetInstance</name></name><argument_list pos:line="53" pos:column="43">()</argument_list></call><op:operator pos:line="53" pos:column="45">.</op:operator><call><name pos:line="53" pos:column="46">AddTimedTask</name><argument_list pos:line="53" pos:column="58">(<argument><expr><name pos:line="53" pos:column="59">saveAction</name></expr></argument>, 
                    <argument><expr><name pos:line="54" pos:column="21">SAVE_EVERY_MINUTES</name> <op:operator pos:line="54" pos:column="40">*</op:operator> <lit:literal type="number" pos:line="54" pos:column="42">60</lit:literal> <op:operator pos:line="54" pos:column="45">*</op:operator> <lit:literal type="number" pos:line="54" pos:column="47">1000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></lock>
        }</block></function>

        <function><type><specifier pos:line="58" pos:column="9">public</specifier> <name><name pos:line="58" pos:column="16">Dictionary</name><argument_list pos:line="58" pos:column="26">&lt;<argument><name pos:line="58" pos:column="27">string</name></argument>, <argument><name pos:line="58" pos:column="35">int</name></argument>&gt;</argument_list></name></type> <name pos:line="58" pos:column="40">GetCoOccurredWordsAndCount</name><parameter_list pos:line="58" pos:column="66">(<param><decl><type><name pos:line="58" pos:column="67">string</name></type> <name pos:line="58" pos:column="74">word</name></decl></param>)</parameter_list>
        <block pos:line="59" pos:column="9">{
            <lock pos:line="60" pos:column="13">lock (<expr><name pos:line="60" pos:column="19">locker</name></expr>)
            <block pos:line="61" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="62" pos:column="17">var</name></type> <name pos:line="62" pos:column="21">columns</name> <init pos:line="62" pos:column="29">= <expr><op:operator pos:line="62" pos:column="31">new</op:operator> <call><name><name pos:line="62" pos:column="35">Dictionary</name><argument_list pos:line="62" pos:column="45">&lt;<argument><name pos:line="62" pos:column="46">String</name></argument>, <argument><name pos:line="62" pos:column="54">int</name></argument>&gt;</argument_list></name><argument_list pos:line="62" pos:column="58">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <foreach pos:line="63" pos:column="17">foreach (<init><decl><type><name pos:line="63" pos:column="26">var</name></type> <name pos:line="63" pos:column="30">entry</name> <range pos:line="63" pos:column="36">in <expr><name pos:line="63" pos:column="39">matrix</name></expr></range></decl></init>)
                <block pos:line="64" pos:column="17">{
                    <if pos:line="65" pos:column="21">if <condition pos:line="65" pos:column="24">(<expr><call><name><name pos:line="65" pos:column="25">entry</name><op:operator pos:line="65" pos:column="30">.</op:operator><name pos:line="65" pos:column="31">Column</name><op:operator pos:line="65" pos:column="37">.</op:operator><name pos:line="65" pos:column="38">CompareTo</name></name><argument_list pos:line="65" pos:column="47">(<argument><expr><name pos:line="65" pos:column="48">word</name></expr></argument>)</argument_list></call> <op:operator pos:line="65" pos:column="54">==</op:operator> <lit:literal type="number" pos:line="65" pos:column="57">0</lit:literal> <op:operator pos:line="65" pos:column="59">||</op:operator> <call><name><name pos:line="65" pos:column="62">entry</name><op:operator pos:line="65" pos:column="67">.</op:operator><name pos:line="65" pos:column="68">Row</name><op:operator pos:line="65" pos:column="71">.</op:operator><name pos:line="65" pos:column="72">CompareTo</name></name><argument_list pos:line="65" pos:column="81">(<argument><expr><name pos:line="65" pos:column="82">word</name></expr></argument>)</argument_list></call> <op:operator pos:line="65" pos:column="88">==</op:operator> <lit:literal type="number" pos:line="65" pos:column="91">0</lit:literal></expr>)</condition><then pos:line="65" pos:column="93">
                    <block pos:line="66" pos:column="21">{
                        <decl_stmt><decl><type><name pos:line="67" pos:column="25">var</name></type> <name pos:line="67" pos:column="29">key</name> <init pos:line="67" pos:column="33">= <expr><call><name><name pos:line="67" pos:column="35">entry</name><op:operator pos:line="67" pos:column="40">.</op:operator><name pos:line="67" pos:column="41">Column</name><op:operator pos:line="67" pos:column="47">.</op:operator><name pos:line="67" pos:column="48">CompareTo</name></name><argument_list pos:line="67" pos:column="57">(<argument><expr><name pos:line="67" pos:column="58">word</name></expr></argument>)</argument_list></call> <op:operator pos:line="67" pos:column="64">==</op:operator> <lit:literal type="number" pos:line="67" pos:column="67">0</lit:literal> <op:operator pos:line="67" pos:column="69">?</op:operator> <name><name pos:line="67" pos:column="71">entry</name><op:operator pos:line="67" pos:column="76">.</op:operator><name pos:line="67" pos:column="77">Row</name></name> <op:operator pos:line="67" pos:column="81">:</op:operator> <name><name pos:line="67" pos:column="83">entry</name><op:operator pos:line="67" pos:column="88">.</op:operator><name pos:line="67" pos:column="89">Column</name></name></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name pos:line="68" pos:column="25">columns</name><op:operator pos:line="68" pos:column="32">.</op:operator><name pos:line="68" pos:column="33">Add</name></name><argument_list pos:line="68" pos:column="36">(<argument><expr><name pos:line="68" pos:column="37">key</name></expr></argument>, <argument><expr><name><name pos:line="68" pos:column="42">entry</name><op:operator pos:line="68" pos:column="47">.</op:operator><name pos:line="68" pos:column="48">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></foreach>
                <return pos:line="71" pos:column="17">return <expr><name pos:line="71" pos:column="24">columns</name></expr>;</return>
                <comment type="block" pos:line="72" pos:column="17">/*
                int start = ~matrix.BinarySearch(CreateEntry(word, ""));
                if (start &lt; 0 || start &gt;= matrix.Count)
                    return columns;

                for (; !matrix.ElementAt(start).Row.Equals(word); start ++);
                
                for (int i = start; i &lt; matrix.Count; i++)
                {
                    var entry = matrix.ElementAt(i);
                    if (!entry.Row.Equals(word))
                    {
                        break;
                    }
                    columns.Add(entry.Column, entry.Count);
                }
                return columns;*/</comment>
            }</block></lock>
        }</block></function>

        <function><type><specifier pos:line="92" pos:column="9">private</specifier> <name pos:line="92" pos:column="17">void</name></type> <name pos:line="92" pos:column="22">ReadMatrixFromFile</name><parameter_list pos:line="92" pos:column="40">()</parameter_list>
        <block pos:line="93" pos:column="9">{
            <if pos:line="94" pos:column="13">if <condition pos:line="94" pos:column="16">(<expr><call><name><name pos:line="94" pos:column="17">File</name><op:operator pos:line="94" pos:column="21">.</op:operator><name pos:line="94" pos:column="22">Exists</name></name><argument_list pos:line="94" pos:column="28">(<argument><expr><call><name pos:line="94" pos:column="29">GetMatrixFilePath</name><argument_list pos:line="94" pos:column="46">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="94" pos:column="50">
            <block pos:line="95" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="96" pos:column="17">var</name></type> <name pos:line="96" pos:column="21">allLines</name> <init pos:line="96" pos:column="30">= <expr><call><name><name pos:line="96" pos:column="32">File</name><op:operator pos:line="96" pos:column="36">.</op:operator><name pos:line="96" pos:column="37">ReadAllLines</name></name><argument_list pos:line="96" pos:column="49">(<argument><expr><call><name pos:line="96" pos:column="50">GetMatrixFilePath</name><argument_list pos:line="96" pos:column="67">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <foreach pos:line="97" pos:column="17">foreach (<init><decl><type><name pos:line="97" pos:column="26">string</name></type> <name pos:line="97" pos:column="33">line</name> <range pos:line="97" pos:column="38">in <expr><name pos:line="97" pos:column="41">allLines</name></expr></range></decl></init>)
                <block pos:line="98" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="99" pos:column="21">var</name></type> <name pos:line="99" pos:column="25">parts</name> <init pos:line="99" pos:column="31">= <expr><call><name><name pos:line="99" pos:column="33">line</name><op:operator pos:line="99" pos:column="37">.</op:operator><name pos:line="99" pos:column="38">Split</name></name><argument_list pos:line="99" pos:column="43">()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="100" pos:column="21">var</name></type> <name pos:line="100" pos:column="25">row</name> <init pos:line="100" pos:column="29">= <expr><name><name pos:line="100" pos:column="31">parts</name><index pos:line="100" pos:column="36">[<expr><lit:literal type="number" pos:line="100" pos:column="37">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <for pos:line="101" pos:column="21">for (<init><decl><type><name pos:line="101" pos:column="26">int</name></type> <name pos:line="101" pos:column="30">i</name> <init pos:line="101" pos:column="32">= <expr><lit:literal type="number" pos:line="101" pos:column="34">1</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="101" pos:column="37">i</name> <op:operator pos:line="101" pos:column="39">&lt;</op:operator> <call><name><name pos:line="101" pos:column="41">parts</name><op:operator pos:line="101" pos:column="46">.</op:operator><name pos:line="101" pos:column="47">Count</name></name><argument_list pos:line="101" pos:column="52">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="101" pos:column="56">i</name><op:operator pos:line="101" pos:column="57">++</op:operator></expr></incr>)
                    <block pos:line="102" pos:column="21">{
                        <decl_stmt><decl><type><name pos:line="103" pos:column="25">var</name></type> <name pos:line="103" pos:column="29">splits</name> <init pos:line="103" pos:column="36">= <expr><name><name pos:line="103" pos:column="38">parts</name><index pos:line="103" pos:column="43">[<expr><name pos:line="103" pos:column="44">i</name></expr>]</index></name><op:operator pos:line="103" pos:column="46">.</op:operator><call><name pos:line="103" pos:column="47">Split</name><argument_list pos:line="103" pos:column="52">(<argument><expr><lit:literal type="char" pos:line="103" pos:column="53">':'</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name pos:line="104" pos:column="25">var</name></type> <name pos:line="104" pos:column="29">column</name> <init pos:line="104" pos:column="36">= <expr><name><name pos:line="104" pos:column="38">splits</name><index pos:line="104" pos:column="44">[<expr><lit:literal type="number" pos:line="104" pos:column="45">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name pos:line="105" pos:column="25">var</name></type> <name pos:line="105" pos:column="29">count</name> <init pos:line="105" pos:column="35">= <expr><call><name><name pos:line="105" pos:column="37">Int32</name><op:operator pos:line="105" pos:column="42">.</op:operator><name pos:line="105" pos:column="43">Parse</name></name><argument_list pos:line="105" pos:column="48">(<argument><expr><name><name pos:line="105" pos:column="49">splits</name><index pos:line="105" pos:column="55">[<expr><lit:literal type="number" pos:line="105" pos:column="56">1</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name pos:line="106" pos:column="25">matrix</name><op:operator pos:line="106" pos:column="31">.</op:operator><name pos:line="106" pos:column="32">Add</name></name><argument_list pos:line="106" pos:column="35">(<argument><expr><call><name pos:line="106" pos:column="36">CreateEntry</name><argument_list pos:line="106" pos:column="47">(<argument><expr><name pos:line="106" pos:column="48">row</name></expr></argument>, <argument><expr><name pos:line="106" pos:column="53">column</name></expr></argument>, <argument><expr><name pos:line="106" pos:column="61">count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></for>
                }</block></foreach>
                <expr_stmt><expr><name pos:line="109" pos:column="17">matrix</name> <op:operator pos:line="109" pos:column="24">=</op:operator> <call><name><name pos:line="109" pos:column="26">matrix</name><op:operator pos:line="109" pos:column="32">.</op:operator><name pos:line="109" pos:column="33">OrderBy</name></name><argument_list pos:line="109" pos:column="40">(<argument><expr><lambda><name pos:line="109" pos:column="41">m</name> <op:operator pos:line="109" pos:column="43">=&gt;</op:operator> <name pos:line="109" pos:column="46">m</name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="109" pos:column="48">.</op:operator><call><name pos:line="109" pos:column="49">ToList</name><argument_list pos:line="109" pos:column="55">()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="113" pos:column="9">private</specifier> <name pos:line="113" pos:column="17">string</name></type> <name pos:line="113" pos:column="24">GetMatrixFilePath</name><parameter_list pos:line="113" pos:column="41">()</parameter_list>
        <block pos:line="114" pos:column="9">{
            <return pos:line="115" pos:column="13">return <expr><call><name><name pos:line="115" pos:column="20">Path</name><op:operator pos:line="115" pos:column="24">.</op:operator><name pos:line="115" pos:column="25">Combine</name></name><argument_list pos:line="115" pos:column="32">(<argument><expr><name pos:line="115" pos:column="33">directory</name></expr></argument>, <argument><expr><name pos:line="115" pos:column="44">fileName</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="118" pos:column="9">private</specifier> <name pos:line="118" pos:column="17">void</name></type> <name pos:line="118" pos:column="22">WriteMatrixToFile</name><parameter_list pos:line="118" pos:column="39">()</parameter_list>
        <block pos:line="119" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="120" pos:column="13">var</name></type> <name pos:line="120" pos:column="17">sb</name> <init pos:line="120" pos:column="20">= <expr><op:operator pos:line="120" pos:column="22">new</op:operator> <call><name pos:line="120" pos:column="26">StringBuilder</name><argument_list pos:line="120" pos:column="39">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="121" pos:column="13">var</name></type> <name pos:line="121" pos:column="17">groups</name> <init pos:line="121" pos:column="24">= <expr><call><name><name pos:line="121" pos:column="26">matrix</name><op:operator pos:line="121" pos:column="32">.</op:operator><name pos:line="121" pos:column="33">GroupBy</name></name><argument_list pos:line="121" pos:column="40">(<argument><expr><lambda><name pos:line="121" pos:column="41">p</name> <op:operator pos:line="121" pos:column="43">=&gt;</op:operator> <name><name pos:line="121" pos:column="46">p</name><op:operator pos:line="121" pos:column="47">.</op:operator><name pos:line="121" pos:column="48">Row</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="122" pos:column="13">foreach (<init><decl><type><name pos:line="122" pos:column="22">var</name></type> <name pos:line="122" pos:column="26">group</name> <range pos:line="122" pos:column="32">in <expr><name pos:line="122" pos:column="35">groups</name></expr></range></decl></init>)
            <block pos:line="123" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="124" pos:column="17">var</name></type> <name pos:line="124" pos:column="21">row</name> <init pos:line="124" pos:column="25">= <expr><linq><group pos:line="124" pos:column="27">group<expr><op:operator pos:line="124" pos:column="32">.</op:operator><call><name pos:line="124" pos:column="33">First</name><argument_list pos:line="124" pos:column="38">()</argument_list></call><op:operator pos:line="124" pos:column="40">.</op:operator><name pos:line="124" pos:column="41">Row</name></expr></group></linq></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="125" pos:column="17">var</name></type> <name pos:line="125" pos:column="21">line</name> <init pos:line="125" pos:column="26">= <expr><name pos:line="125" pos:column="28">row</name> <op:operator pos:line="125" pos:column="32">+</op:operator> <lit:literal type="char" pos:line="125" pos:column="34">' '</lit:literal> <op:operator pos:line="125" pos:column="38">+</op:operator> <linq><group pos:line="125" pos:column="40">group<expr><op:operator pos:line="125" pos:column="45">.</op:operator><call><name pos:line="125" pos:column="46">Select</name><argument_list pos:line="125" pos:column="52">(<argument><expr><lambda><name pos:line="125" pos:column="53">g</name> <op:operator pos:line="125" pos:column="55">=&gt;</op:operator> <name><name pos:line="125" pos:column="58">g</name><op:operator pos:line="125" pos:column="59">.</op:operator><name pos:line="125" pos:column="60">Column</name></name> <op:operator pos:line="125" pos:column="67">+</op:operator> <lit:literal type="string" pos:line="125" pos:column="69">":"</lit:literal> <op:operator pos:line="125" pos:column="73">+</op:operator> <name><name pos:line="125" pos:column="75">g</name><op:operator pos:line="125" pos:column="76">.</op:operator><name pos:line="125" pos:column="77">Count</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="125" pos:column="83">.</op:operator>
                    <call><name pos:line="126" pos:column="21">Aggregate</name><argument_list pos:line="126" pos:column="30">(<argument><expr><lambda><parameter_list pos:line="126" pos:column="31">(<param><decl><name pos:line="126" pos:column="32">s1</name></decl></param>, <param><decl><name pos:line="126" pos:column="36">s2</name></decl></param>)</parameter_list> <op:operator pos:line="126" pos:column="40">=&gt;</op:operator> <name pos:line="126" pos:column="43">s1</name> <op:operator pos:line="126" pos:column="46">+</op:operator> <lit:literal type="char" pos:line="126" pos:column="48">' '</lit:literal> <op:operator pos:line="126" pos:column="52">+</op:operator> <name pos:line="126" pos:column="54">s2</name></lambda></expr></argument>)</argument_list></call></expr></group></linq></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="127" pos:column="17">sb</name><op:operator pos:line="127" pos:column="19">.</op:operator><name pos:line="127" pos:column="20">AppendLine</name></name><argument_list pos:line="127" pos:column="30">(<argument><expr><name pos:line="127" pos:column="31">line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
            <expr_stmt><expr><call><name><name pos:line="129" pos:column="13">File</name><op:operator pos:line="129" pos:column="17">.</op:operator><name pos:line="129" pos:column="18">WriteAllText</name></name><argument_list pos:line="129" pos:column="30">(<argument><expr><call><name pos:line="129" pos:column="31">GetMatrixFilePath</name><argument_list pos:line="129" pos:column="48">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="129" pos:column="52">sb</name><op:operator pos:line="129" pos:column="54">.</op:operator><name pos:line="129" pos:column="55">ToString</name></name><argument_list pos:line="129" pos:column="63">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>


        <function><type><specifier pos:line="133" pos:column="9">private</specifier> <name pos:line="133" pos:column="17">String</name></type> <name pos:line="133" pos:column="24">Preprocess</name><parameter_list pos:line="133" pos:column="34">(<param><decl><type><name pos:line="133" pos:column="35">String</name></type> <name pos:line="133" pos:column="42">word</name></decl></param>)</parameter_list>
        <block pos:line="134" pos:column="9">{
            <return pos:line="135" pos:column="13">return <expr><call><name><name pos:line="135" pos:column="20">word</name><op:operator pos:line="135" pos:column="24">.</op:operator><name pos:line="135" pos:column="25">ToLower</name></name><argument_list pos:line="135" pos:column="32">()</argument_list></call><op:operator pos:line="135" pos:column="34">.</op:operator><call><name pos:line="135" pos:column="35">Trim</name><argument_list pos:line="135" pos:column="39">()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="138" pos:column="9">public</specifier> <name pos:line="138" pos:column="16">int</name></type> <name pos:line="138" pos:column="20">GetCoOccurrenceCount</name><parameter_list pos:line="138" pos:column="40">(<param><decl><type><name pos:line="138" pos:column="41">String</name></type> <name pos:line="138" pos:column="48">word1</name></decl></param>, <param><decl><type><name pos:line="138" pos:column="55">String</name></type> <name pos:line="138" pos:column="62">word2</name></decl></param>)</parameter_list>
        <block pos:line="139" pos:column="9">{
            <lock pos:line="140" pos:column="13">lock (<expr><name pos:line="140" pos:column="19">locker</name></expr>)
            <block pos:line="141" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="142" pos:column="17">var</name></type> <name pos:line="142" pos:column="21">target</name> <init pos:line="142" pos:column="28">= <expr><call><name pos:line="142" pos:column="30">CreateEntry</name><argument_list pos:line="142" pos:column="41">(<argument><expr><name pos:line="142" pos:column="42">word1</name></expr></argument>, <argument><expr><name pos:line="142" pos:column="49">word2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="143" pos:column="17">int</name></type> <name pos:line="143" pos:column="21">index</name> <init pos:line="143" pos:column="27">= <expr><call><name><name pos:line="143" pos:column="29">matrix</name><op:operator pos:line="143" pos:column="35">.</op:operator><name pos:line="143" pos:column="36">BinarySearch</name></name><argument_list pos:line="143" pos:column="48">(<argument><expr><name pos:line="143" pos:column="49">target</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return pos:line="144" pos:column="17">return <expr><name pos:line="144" pos:column="24">index</name> <op:operator pos:line="144" pos:column="30">&gt;=</op:operator> <lit:literal type="number" pos:line="144" pos:column="33">0</lit:literal> <op:operator pos:line="144" pos:column="35">?</op:operator> <call><name><name pos:line="144" pos:column="37">matrix</name><op:operator pos:line="144" pos:column="43">.</op:operator><name pos:line="144" pos:column="44">ElementAt</name></name><argument_list pos:line="144" pos:column="53">(<argument><expr><name pos:line="144" pos:column="54">index</name></expr></argument>)</argument_list></call><op:operator pos:line="144" pos:column="60">.</op:operator><name pos:line="144" pos:column="61">Count</name> <op:operator pos:line="144" pos:column="67">:</op:operator> <lit:literal type="number" pos:line="144" pos:column="69">0</lit:literal></expr>;</return>
            }</block></lock>
        }</block></function>

      

        <function><type><specifier pos:line="150" pos:column="9">private</specifier> <name><name pos:line="150" pos:column="17">IEnumerable</name><argument_list pos:line="150" pos:column="28">&lt;<argument><name pos:line="150" pos:column="29">String</name></argument>&gt;</argument_list></name></type> <name pos:line="150" pos:column="37">LimitWordNumber</name><parameter_list pos:line="150" pos:column="52">(<param><decl><type><name><name pos:line="150" pos:column="53">List</name><argument_list pos:line="150" pos:column="57">&lt;<argument><name pos:line="150" pos:column="58">string</name></argument>&gt;</argument_list></name></type> <name pos:line="150" pos:column="66">words</name></decl></param>)</parameter_list>
        <block pos:line="151" pos:column="9">{
            <return pos:line="152" pos:column="13">return <expr><op:operator pos:line="152" pos:column="20">(</op:operator><name><name pos:line="152" pos:column="21">words</name><op:operator pos:line="152" pos:column="26">.</op:operator><name pos:line="152" pos:column="27">Count</name></name> <op:operator pos:line="152" pos:column="33">&gt;</op:operator> <name pos:line="152" pos:column="35">MAX_COOCCURRENCE_WORDS_COUNT</name><op:operator pos:line="152" pos:column="63">)</op:operator>
                       <op:operator pos:line="153" pos:column="24">?</op:operator> <call><name><name pos:line="153" pos:column="26">words</name><op:operator pos:line="153" pos:column="31">.</op:operator><name pos:line="153" pos:column="32">GetRange</name></name><argument_list pos:line="153" pos:column="40">(<argument><expr><lit:literal type="number" pos:line="153" pos:column="41">0</lit:literal></expr></argument>, <argument><expr><name pos:line="153" pos:column="44">MAX_COOCCURRENCE_WORDS_COUNT</name></expr></argument>)</argument_list></call>
                       <op:operator pos:line="154" pos:column="24">:</op:operator> <name pos:line="154" pos:column="26">words</name></expr>;</return>
        }</block></function>


        <function><type><specifier pos:line="158" pos:column="9">private</specifier> <name pos:line="158" pos:column="17">int</name></type> <name pos:line="158" pos:column="21">AddMatrixEntriesSync</name><parameter_list pos:line="158" pos:column="41">(<param><decl><type><name><name pos:line="158" pos:column="42">IEnumerable</name><argument_list pos:line="158" pos:column="53">&lt;<argument><name pos:line="158" pos:column="54">String</name></argument>&gt;</argument_list></name></type> <name pos:line="158" pos:column="62">words</name></decl></param>)</parameter_list>
        <block pos:line="159" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="160" pos:column="13">var</name></type> <name pos:line="160" pos:column="17">allEntries</name> <init pos:line="160" pos:column="28">= <expr><call><name pos:line="160" pos:column="30">GetBigramEntries</name><argument_list pos:line="160" pos:column="46">(<argument><expr><name pos:line="160" pos:column="47">words</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <lock pos:line="161" pos:column="13">lock (<expr><name pos:line="161" pos:column="19">locker</name></expr>)
            <block pos:line="162" pos:column="13">{
                <foreach pos:line="163" pos:column="17">foreach (<init><decl><type><name pos:line="163" pos:column="26">var</name></type> <name pos:line="163" pos:column="30">target</name> <range pos:line="163" pos:column="37">in <expr><name pos:line="163" pos:column="40">allEntries</name></expr></range></decl></init>)
                <block pos:line="164" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="165" pos:column="21">int</name></type> <name pos:line="165" pos:column="25">end</name> <init pos:line="165" pos:column="29">= <expr><call><name><name pos:line="165" pos:column="31">matrix</name><op:operator pos:line="165" pos:column="37">.</op:operator><name pos:line="165" pos:column="38">BinarySearch</name></name><argument_list pos:line="165" pos:column="50">(<argument><expr><name pos:line="165" pos:column="51">target</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if pos:line="166" pos:column="21">if <condition pos:line="166" pos:column="24">(<expr><name pos:line="166" pos:column="25">end</name> <op:operator pos:line="166" pos:column="29">&gt;=</op:operator> <lit:literal type="number" pos:line="166" pos:column="32">0</lit:literal></expr>)</condition><then pos:line="166" pos:column="34">
                    <block pos:line="167" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="168" pos:column="25">matrix</name><op:operator pos:line="168" pos:column="31">.</op:operator><name pos:line="168" pos:column="32">ElementAt</name></name><argument_list pos:line="168" pos:column="41">(<argument><expr><name pos:line="168" pos:column="42">end</name></expr></argument>)</argument_list></call><op:operator pos:line="168" pos:column="46">.</op:operator><call><name pos:line="168" pos:column="47">IncrementCount</name><argument_list pos:line="168" pos:column="61">()</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else pos:line="170" pos:column="21">else
                    <block pos:line="171" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="172" pos:column="25">target</name><op:operator pos:line="172" pos:column="31">.</op:operator><name pos:line="172" pos:column="32">ResetCount</name></name><argument_list pos:line="172" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
                        <decl_stmt><decl><type><name pos:line="173" pos:column="25">int</name></type> <name pos:line="173" pos:column="29">index</name> <init pos:line="173" pos:column="35">= <expr><op:operator pos:line="173" pos:column="37">~</op:operator><name pos:line="173" pos:column="38">end</name></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name pos:line="174" pos:column="25">matrix</name><op:operator pos:line="174" pos:column="31">.</op:operator><name pos:line="174" pos:column="32">Insert</name></name><argument_list pos:line="174" pos:column="38">(<argument><expr><name pos:line="174" pos:column="39">index</name></expr></argument>, <argument><expr><name pos:line="174" pos:column="46">target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></foreach>
            }</block></lock>
            <return pos:line="178" pos:column="13">return <expr><lit:literal type="number" pos:line="178" pos:column="20">0</lit:literal></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="181" pos:column="9">private</specifier> <name><name pos:line="181" pos:column="17">IEnumerable</name><argument_list pos:line="181" pos:column="28">&lt;<argument><name pos:line="181" pos:column="29">String</name></argument>&gt;</argument_list></name></type> <name pos:line="181" pos:column="37">FilterOutBadWords</name><parameter_list pos:line="181" pos:column="54">(<param><decl><type><name><name pos:line="181" pos:column="55">IEnumerable</name><argument_list pos:line="181" pos:column="66">&lt;<argument><name pos:line="181" pos:column="67">String</name></argument>&gt;</argument_list></name></type> <name pos:line="181" pos:column="75">words</name></decl></param>)</parameter_list>
        <block pos:line="182" pos:column="9">{
            <return pos:line="183" pos:column="13">return <expr><call><name><name pos:line="183" pos:column="20">words</name><op:operator pos:line="183" pos:column="25">.</op:operator><name pos:line="183" pos:column="26">Where</name></name><argument_list pos:line="183" pos:column="31">(<argument><expr><lambda><name pos:line="183" pos:column="32">w</name> <op:operator pos:line="183" pos:column="34">=&gt;</op:operator> <name><name pos:line="183" pos:column="37">w</name><op:operator pos:line="183" pos:column="38">.</op:operator><name pos:line="183" pos:column="39">Length</name></name> <op:operator pos:line="183" pos:column="46">&gt;=</op:operator> <name pos:line="183" pos:column="49">MAX_WORD_LENGTH</name>
                <op:operator pos:line="184" pos:column="17">||</op:operator> <call><name><name pos:line="184" pos:column="20">w</name><op:operator pos:line="184" pos:column="21">.</op:operator><name pos:line="184" pos:column="22">Contains</name></name><argument_list pos:line="184" pos:column="30">(<argument><expr><lit:literal type="char" pos:line="184" pos:column="31">' '</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="184" pos:column="36">||</op:operator> <call><name><name pos:line="184" pos:column="39">w</name><op:operator pos:line="184" pos:column="40">.</op:operator><name pos:line="184" pos:column="41">Contains</name></name><argument_list pos:line="184" pos:column="49">(<argument><expr><lit:literal type="char" pos:line="184" pos:column="50">':'</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>


        <function><type><specifier pos:line="188" pos:column="9">private</specifier> <name pos:line="188" pos:column="17">MatrixEntry</name></type> <name pos:line="188" pos:column="29">CreateEntry</name><parameter_list pos:line="188" pos:column="40">(<param><decl><type><name pos:line="188" pos:column="41">String</name></type> <name pos:line="188" pos:column="48">word1</name></decl></param>, <param><decl><type><name pos:line="188" pos:column="55">String</name></type> <name pos:line="188" pos:column="62">word2</name></decl></param>, <param><decl><type><name pos:line="188" pos:column="69">int</name></type> <name pos:line="188" pos:column="73">count</name> <init pos:line="188" pos:column="79">= <expr><lit:literal type="number" pos:line="188" pos:column="81">1</lit:literal></expr></init></decl></param>)</parameter_list>
        <block pos:line="189" pos:column="9">{
            <expr_stmt><expr><name pos:line="190" pos:column="13">word1</name> <op:operator pos:line="190" pos:column="19">=</op:operator> <call><name pos:line="190" pos:column="21">Preprocess</name><argument_list pos:line="190" pos:column="31">(<argument><expr><name pos:line="190" pos:column="32">word1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="191" pos:column="13">word2</name> <op:operator pos:line="191" pos:column="19">=</op:operator> <call><name pos:line="191" pos:column="21">Preprocess</name><argument_list pos:line="191" pos:column="31">(<argument><expr><name pos:line="191" pos:column="32">word2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if pos:line="192" pos:column="13">if <condition pos:line="192" pos:column="16">(<expr><call><name><name pos:line="192" pos:column="17">word1</name><op:operator pos:line="192" pos:column="22">.</op:operator><name pos:line="192" pos:column="23">CompareTo</name></name><argument_list pos:line="192" pos:column="32">(<argument><expr><name pos:line="192" pos:column="33">word2</name></expr></argument>)</argument_list></call> <op:operator pos:line="192" pos:column="40">&gt;</op:operator> <lit:literal type="number" pos:line="192" pos:column="42">0</lit:literal></expr>)</condition><then pos:line="192" pos:column="44">
            <block pos:line="193" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="194" pos:column="17">var</name></type> <name pos:line="194" pos:column="21">temp</name> <init pos:line="194" pos:column="26">= <expr><name pos:line="194" pos:column="28">word2</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name pos:line="195" pos:column="17">word2</name> <op:operator pos:line="195" pos:column="23">=</op:operator> <name pos:line="195" pos:column="25">word1</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="196" pos:column="17">word1</name> <op:operator pos:line="196" pos:column="23">=</op:operator> <name pos:line="196" pos:column="25">temp</name></expr>;</expr_stmt>
            }</block></then></if>
            <return pos:line="198" pos:column="13">return <expr><op:operator pos:line="198" pos:column="20">new</op:operator> <call><name pos:line="198" pos:column="24">MatrixEntry</name><argument_list pos:line="198" pos:column="35">(<argument><expr><name pos:line="198" pos:column="36">word1</name></expr></argument>, <argument><expr><name pos:line="198" pos:column="43">word2</name></expr></argument>, <argument><expr><name pos:line="198" pos:column="50">count</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="201" pos:column="9">public</specifier> <name pos:line="201" pos:column="16">void</name></type> <name pos:line="201" pos:column="21">Dispose</name><parameter_list pos:line="201" pos:column="28">()</parameter_list>
        <block pos:line="202" pos:column="9">{
            <lock pos:line="203" pos:column="13">lock (<expr><name pos:line="203" pos:column="19">locker</name></expr>)
            <block pos:line="204" pos:column="13">{
                <expr_stmt><expr><call><name pos:line="205" pos:column="17">WriteMatrixToFile</name><argument_list pos:line="205" pos:column="34">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="206" pos:column="17">matrix</name><op:operator pos:line="206" pos:column="23">.</op:operator><name pos:line="206" pos:column="24">Clear</name></name><argument_list pos:line="206" pos:column="29">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="207" pos:column="17">TimedProcessor</name><op:operator pos:line="207" pos:column="31">.</op:operator><name pos:line="207" pos:column="32">GetInstance</name></name><argument_list pos:line="207" pos:column="43">()</argument_list></call><op:operator pos:line="207" pos:column="45">.</op:operator><call><name pos:line="207" pos:column="46">RemoveTimedTask</name><argument_list pos:line="207" pos:column="61">(<argument><expr><name pos:line="207" pos:column="62">saveAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="208" pos:column="17">directory</name> <op:operator pos:line="208" pos:column="27">=</op:operator> <name pos:line="208" pos:column="29">null</name></expr>;</expr_stmt>
            }</block></lock>
        }</block></function>

        <function><type><specifier pos:line="212" pos:column="9">public</specifier> <name><name pos:line="212" pos:column="16">Dictionary</name><argument_list pos:line="212" pos:column="26">&lt;<argument><name pos:line="212" pos:column="27">string</name></argument>, <argument><name pos:line="212" pos:column="35">int</name></argument>&gt;</argument_list></name></type> <name pos:line="212" pos:column="40">GetAllWordsAndCount</name><parameter_list pos:line="212" pos:column="59">()</parameter_list>
        <block pos:line="213" pos:column="9">{
            <lock pos:line="214" pos:column="13">lock (<expr><name pos:line="214" pos:column="19">locker</name></expr>)
            <block pos:line="215" pos:column="13">{
                <return pos:line="216" pos:column="17">return <expr><call><name><name pos:line="216" pos:column="24">matrix</name><op:operator pos:line="216" pos:column="30">.</op:operator><name pos:line="216" pos:column="31">Where</name></name><argument_list pos:line="216" pos:column="36">(<argument><expr><lambda><name pos:line="216" pos:column="37">entry</name> <op:operator pos:line="216" pos:column="43">=&gt;</op:operator> <call><name><name pos:line="216" pos:column="46">entry</name><op:operator pos:line="216" pos:column="51">.</op:operator><name pos:line="216" pos:column="52">Column</name><op:operator pos:line="216" pos:column="58">.</op:operator><name pos:line="216" pos:column="59">Equals</name></name><argument_list pos:line="216" pos:column="65">(<argument><expr><name><name pos:line="216" pos:column="66">entry</name><op:operator pos:line="216" pos:column="71">.</op:operator><name pos:line="216" pos:column="72">Row</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="216" pos:column="77">.</op:operator>
                    <call><name pos:line="217" pos:column="21">ToDictionary</name><argument_list pos:line="217" pos:column="33">(<argument><expr><lambda><name pos:line="217" pos:column="34">entry</name> <op:operator pos:line="217" pos:column="40">=&gt;</op:operator> <name><name pos:line="217" pos:column="43">entry</name><op:operator pos:line="217" pos:column="48">.</op:operator><name pos:line="217" pos:column="49">Row</name></name></lambda></expr></argument>, <argument><expr><lambda><name pos:line="217" pos:column="54">entry</name> <op:operator pos:line="217" pos:column="60">=&gt;</op:operator> <name><name pos:line="217" pos:column="63">entry</name><op:operator pos:line="217" pos:column="68">.</op:operator><name pos:line="217" pos:column="69">Count</name></name></lambda></expr></argument>)</argument_list></call></expr>;</return>
            }</block></lock>
        }</block></function>


        <class><specifier pos:line="222" pos:column="9">protected</specifier> class <name pos:line="222" pos:column="25">MatrixEntry</name> <super pos:line="222" pos:column="37">: <name><name pos:line="222" pos:column="39">IComparable</name><argument_list pos:line="222" pos:column="50">&lt;<argument><name pos:line="222" pos:column="51">MatrixEntry</name></argument>&gt;</argument_list></name>, <name><name pos:line="222" pos:column="65">IEquatable</name><argument_list pos:line="222" pos:column="75">&lt;<argument><name pos:line="222" pos:column="76">MatrixEntry</name></argument>&gt;</argument_list></name>, <name pos:line="222" pos:column="90">IMatrixEntry</name></super>
        <block pos:line="223" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="224" pos:column="13">public</specifier> <name pos:line="224" pos:column="20">String</name></type> <name pos:line="224" pos:column="27">Row</name> <block pos:line="224" pos:column="31">{ <function_decl><name pos:line="224" pos:column="33">get</name>;</function_decl> <function_decl><specifier pos:line="224" pos:column="38">private</specifier> <name pos:line="224" pos:column="46">set</name>;</function_decl> }</block></decl></decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="225" pos:column="13">public</specifier> <name pos:line="225" pos:column="20">String</name></type> <name pos:line="225" pos:column="27">Column</name> <block pos:line="225" pos:column="34">{ <function_decl><name pos:line="225" pos:column="36">get</name>;</function_decl> <function_decl><specifier pos:line="225" pos:column="41">private</specifier> <name pos:line="225" pos:column="49">set</name>;</function_decl> }</block></decl></decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="226" pos:column="13">public</specifier> <name pos:line="226" pos:column="20">int</name></type> <name pos:line="226" pos:column="24">Count</name> <block pos:line="226" pos:column="30">{ <function_decl><name pos:line="226" pos:column="32">get</name>;</function_decl> <function_decl><specifier pos:line="226" pos:column="37">private</specifier> <name pos:line="226" pos:column="45">set</name>;</function_decl> }</block></decl></decl_stmt>

            <constructor><specifier pos:line="228" pos:column="13">public</specifier> <name pos:line="228" pos:column="20">MatrixEntry</name><parameter_list pos:line="228" pos:column="31">(<param><decl><type><name pos:line="228" pos:column="32">String</name></type> <name pos:line="228" pos:column="39">Row</name></decl></param>, <param><decl><type><name pos:line="228" pos:column="44">String</name></type> <name pos:line="228" pos:column="51">Column</name></decl></param>, <param><decl><type><name pos:line="228" pos:column="59">int</name></type> <name pos:line="228" pos:column="63">Count</name></decl></param>)</parameter_list>
            <block pos:line="229" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="230" pos:column="17">this</name><op:operator pos:line="230" pos:column="21">.</op:operator><name pos:line="230" pos:column="22">Row</name></name> <op:operator pos:line="230" pos:column="26">=</op:operator> <name pos:line="230" pos:column="28">Row</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="231" pos:column="17">this</name><op:operator pos:line="231" pos:column="21">.</op:operator><name pos:line="231" pos:column="22">Column</name></name> <op:operator pos:line="231" pos:column="29">=</op:operator> <name pos:line="231" pos:column="31">Column</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="232" pos:column="17">this</name><op:operator pos:line="232" pos:column="21">.</op:operator><name pos:line="232" pos:column="22">Count</name></name> <op:operator pos:line="232" pos:column="28">=</op:operator> <name pos:line="232" pos:column="30">Count</name></expr>;</expr_stmt>
            }</block></constructor>

            <function><type><specifier pos:line="235" pos:column="13">public</specifier> <name pos:line="235" pos:column="20">int</name></type> <name pos:line="235" pos:column="24">CompareTo</name><parameter_list pos:line="235" pos:column="33">(<param><decl><type><name pos:line="235" pos:column="34">MatrixEntry</name></type> <name pos:line="235" pos:column="46">other</name></decl></param>)</parameter_list>
            <block pos:line="236" pos:column="13">{
                <return pos:line="237" pos:column="17">return <expr><op:operator pos:line="237" pos:column="24">(</op:operator><name><name pos:line="237" pos:column="25">this</name><op:operator pos:line="237" pos:column="29">.</op:operator><name pos:line="237" pos:column="30">Row</name></name> <op:operator pos:line="237" pos:column="34">+</op:operator> <name><name pos:line="237" pos:column="36">this</name><op:operator pos:line="237" pos:column="40">.</op:operator><name pos:line="237" pos:column="41">Column</name></name><op:operator pos:line="237" pos:column="47">)</op:operator><op:operator pos:line="237" pos:column="48">.</op:operator><call><name pos:line="237" pos:column="49">CompareTo</name><argument_list pos:line="237" pos:column="58">(<argument><expr><name><name pos:line="237" pos:column="59">other</name><op:operator pos:line="237" pos:column="64">.</op:operator><name pos:line="237" pos:column="65">Row</name></name> <op:operator pos:line="237" pos:column="69">+</op:operator> <name><name pos:line="237" pos:column="71">other</name><op:operator pos:line="237" pos:column="76">.</op:operator><name pos:line="237" pos:column="77">Column</name></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>

            <function><type><specifier pos:line="240" pos:column="13">public</specifier> <name pos:line="240" pos:column="20">void</name></type> <name pos:line="240" pos:column="25">IncrementCount</name><parameter_list pos:line="240" pos:column="39">()</parameter_list>
            <block pos:line="241" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="242" pos:column="17">this</name><op:operator pos:line="242" pos:column="21">.</op:operator><name pos:line="242" pos:column="22">Count</name></name><op:operator pos:line="242" pos:column="27">++</op:operator></expr>;</expr_stmt>
            }</block></function>

            <function><type><specifier pos:line="245" pos:column="13">public</specifier> <name pos:line="245" pos:column="20">void</name></type> <name pos:line="245" pos:column="25">ResetCount</name><parameter_list pos:line="245" pos:column="35">()</parameter_list>
            <block pos:line="246" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="247" pos:column="17">this</name><op:operator pos:line="247" pos:column="21">.</op:operator><name pos:line="247" pos:column="22">Count</name></name> <op:operator pos:line="247" pos:column="28">=</op:operator> <lit:literal type="number" pos:line="247" pos:column="30">1</lit:literal></expr>;</expr_stmt>
            }</block></function>

            <function><type><specifier pos:line="250" pos:column="13">public</specifier> <name pos:line="250" pos:column="20">bool</name></type> <name pos:line="250" pos:column="25">Equals</name><parameter_list pos:line="250" pos:column="31">(<param><decl><type><name pos:line="250" pos:column="32">MatrixEntry</name></type> <name pos:line="250" pos:column="44">other</name></decl></param>)</parameter_list>
            <block pos:line="251" pos:column="13">{
                <return pos:line="252" pos:column="17">return <expr><call><name pos:line="252" pos:column="24">CompareTo</name><argument_list pos:line="252" pos:column="33">(<argument><expr><name pos:line="252" pos:column="34">other</name></expr></argument>)</argument_list></call> <op:operator pos:line="252" pos:column="41">==</op:operator> <lit:literal type="number" pos:line="252" pos:column="44">0</lit:literal></expr>;</return>
            }</block></function>
        }</block></class>

        <function><type><specifier pos:line="256" pos:column="9">public</specifier> <name pos:line="256" pos:column="16">void</name></type> <name pos:line="256" pos:column="21">HandleCoOcurrentWordsSync</name><parameter_list pos:line="256" pos:column="46">(<param><decl><type><name><name pos:line="256" pos:column="47">IEnumerable</name><argument_list pos:line="256" pos:column="58">&lt;<argument><name pos:line="256" pos:column="59">String</name></argument>&gt;</argument_list></name></type> <name pos:line="256" pos:column="67">words</name></decl></param>)</parameter_list>
        <block pos:line="257" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="258" pos:column="13">AddMatrixEntriesSync</name><argument_list pos:line="258" pos:column="33">(<argument><expr><name pos:line="258" pos:column="34">words</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="261" pos:column="9">public</specifier> <name pos:line="261" pos:column="16">void</name></type> <name pos:line="261" pos:column="21">HandleCoOcurrentWordsAsync</name><parameter_list pos:line="261" pos:column="47">(<param><decl><type><name><name pos:line="261" pos:column="48">IEnumerable</name><argument_list pos:line="261" pos:column="59">&lt;<argument><name pos:line="261" pos:column="60">String</name></argument>&gt;</argument_list></name></type> <name pos:line="261" pos:column="68">words</name></decl></param>)</parameter_list>
        <block pos:line="262" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="263" pos:column="13">queue</name><op:operator pos:line="263" pos:column="18">.</op:operator><name pos:line="263" pos:column="19">Enqueue</name></name><argument_list pos:line="263" pos:column="26">(<argument><expr><name pos:line="263" pos:column="27">AddMatrixEntriesSync</name></expr></argument>, <argument><expr><name pos:line="263" pos:column="49">words</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="266" pos:column="9">private</specifier> <name><name pos:line="266" pos:column="17">IEnumerable</name><argument_list pos:line="266" pos:column="28">&lt;<argument><name pos:line="266" pos:column="29">MatrixEntry</name></argument>&gt;</argument_list></name></type> <name pos:line="266" pos:column="42">GetEntries</name><parameter_list pos:line="266" pos:column="52">(<param><decl><type><name><name pos:line="266" pos:column="53">IEnumerable</name><argument_list pos:line="266" pos:column="64">&lt;<argument><name pos:line="266" pos:column="65">string</name></argument>&gt;</argument_list></name></type> <name pos:line="266" pos:column="73">words</name></decl></param>)</parameter_list>
        <block pos:line="267" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="268" pos:column="13">var</name></type> <name pos:line="268" pos:column="17">list</name> <init pos:line="268" pos:column="22">= <expr><call><name pos:line="268" pos:column="24">LimitWordNumber</name><argument_list pos:line="268" pos:column="39">(<argument><expr><call><name pos:line="268" pos:column="40">FilterOutBadWords</name><argument_list pos:line="268" pos:column="57">(<argument><expr><name pos:line="268" pos:column="58">words</name></expr></argument>)</argument_list></call><op:operator pos:line="268" pos:column="64">.</op:operator>
                                           <call><name pos:line="269" pos:column="44">Distinct</name><argument_list pos:line="269" pos:column="52">()</argument_list></call><op:operator pos:line="269" pos:column="54">.</op:operator><call><name pos:line="269" pos:column="55">ToList</name><argument_list pos:line="269" pos:column="61">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="269" pos:column="64">.</op:operator><call><name pos:line="269" pos:column="65">ToList</name><argument_list pos:line="269" pos:column="71">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="270" pos:column="13">var</name></type> <name pos:line="270" pos:column="17">allEntries</name> <init pos:line="270" pos:column="28">= <expr><op:operator pos:line="270" pos:column="30">new</op:operator> <call><name><name pos:line="270" pos:column="34">List</name><argument_list pos:line="270" pos:column="38">&lt;<argument><name pos:line="270" pos:column="39">MatrixEntry</name></argument>&gt;</argument_list></name><argument_list pos:line="270" pos:column="51">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for pos:line="271" pos:column="13">for (<init><decl><type><name pos:line="271" pos:column="18">int</name></type> <name pos:line="271" pos:column="22">i</name> <init pos:line="271" pos:column="24">= <expr><lit:literal type="number" pos:line="271" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="271" pos:column="29">i</name> <op:operator pos:line="271" pos:column="31">&lt;</op:operator> <name><name pos:line="271" pos:column="33">list</name><op:operator pos:line="271" pos:column="37">.</op:operator><name pos:line="271" pos:column="38">Count</name></name></expr>;</condition> <incr><expr><name pos:line="271" pos:column="45">i</name><op:operator pos:line="271" pos:column="46">++</op:operator></expr></incr>)
            <block pos:line="272" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="273" pos:column="17">var</name></type> <name pos:line="273" pos:column="21">word1</name> <init pos:line="273" pos:column="27">= <expr><call><name><name pos:line="273" pos:column="29">list</name><op:operator pos:line="273" pos:column="33">.</op:operator><name pos:line="273" pos:column="34">ElementAt</name></name><argument_list pos:line="273" pos:column="43">(<argument><expr><name pos:line="273" pos:column="44">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <for pos:line="274" pos:column="17">for (<init><decl><type><name pos:line="274" pos:column="22">int</name></type> <name pos:line="274" pos:column="26">j</name> <init pos:line="274" pos:column="28">= <expr><name pos:line="274" pos:column="30">i</name></expr></init></decl>;</init> <condition><expr><name pos:line="274" pos:column="33">j</name> <op:operator pos:line="274" pos:column="35">&lt;</op:operator> <name><name pos:line="274" pos:column="37">list</name><op:operator pos:line="274" pos:column="41">.</op:operator><name pos:line="274" pos:column="42">Count</name></name></expr>;</condition> <incr><expr><name pos:line="274" pos:column="49">j</name><op:operator pos:line="274" pos:column="50">++</op:operator></expr></incr>)
                <block pos:line="275" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="276" pos:column="21">var</name></type> <name pos:line="276" pos:column="25">word2</name> <init pos:line="276" pos:column="31">= <expr><call><name><name pos:line="276" pos:column="33">list</name><op:operator pos:line="276" pos:column="37">.</op:operator><name pos:line="276" pos:column="38">ElementAt</name></name><argument_list pos:line="276" pos:column="47">(<argument><expr><name pos:line="276" pos:column="48">j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="277" pos:column="21">allEntries</name><op:operator pos:line="277" pos:column="31">.</op:operator><name pos:line="277" pos:column="32">Add</name></name><argument_list pos:line="277" pos:column="35">(<argument><expr><call><name pos:line="277" pos:column="36">CreateEntry</name><argument_list pos:line="277" pos:column="47">(<argument><expr><name pos:line="277" pos:column="48">word1</name></expr></argument>, <argument><expr><name pos:line="277" pos:column="55">word2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
            }</block></for>
            <return pos:line="280" pos:column="13">return <expr><name pos:line="280" pos:column="20">allEntries</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="283" pos:column="9">private</specifier> <name><name pos:line="283" pos:column="17">IEnumerable</name><argument_list pos:line="283" pos:column="28">&lt;<argument><name pos:line="283" pos:column="29">MatrixEntry</name></argument>&gt;</argument_list></name></type> <name pos:line="283" pos:column="42">GetBigramEntries</name><parameter_list pos:line="283" pos:column="58">(<param><decl><type><name><name pos:line="283" pos:column="59">IEnumerable</name><argument_list pos:line="283" pos:column="70">&lt;<argument><name pos:line="283" pos:column="71">string</name></argument>&gt;</argument_list></name></type> <name pos:line="283" pos:column="79">words</name></decl></param>)</parameter_list>
        <block pos:line="284" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="285" pos:column="13">var</name></type> <name pos:line="285" pos:column="17">list</name> <init pos:line="285" pos:column="22">= <expr><call><name><name pos:line="285" pos:column="24">words</name><op:operator pos:line="285" pos:column="29">.</op:operator><name pos:line="285" pos:column="30">ToList</name></name><argument_list pos:line="285" pos:column="36">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="286" pos:column="13">var</name></type> <name pos:line="286" pos:column="17">allEntries</name> <init pos:line="286" pos:column="28">= <expr><op:operator pos:line="286" pos:column="30">new</op:operator> <call><name><name pos:line="286" pos:column="34">List</name><argument_list pos:line="286" pos:column="38">&lt;<argument><name pos:line="286" pos:column="39">MatrixEntry</name></argument>&gt;</argument_list></name><argument_list pos:line="286" pos:column="51">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="287" pos:column="13">int</name></type> <name pos:line="287" pos:column="17">i</name></decl>;</decl_stmt>
            <for pos:line="288" pos:column="13">for (<init><expr><name pos:line="288" pos:column="18">i</name> <op:operator pos:line="288" pos:column="20">=</op:operator> <lit:literal type="number" pos:line="288" pos:column="22">0</lit:literal></expr>;</init> <condition><expr><name pos:line="288" pos:column="25">i</name> <op:operator pos:line="288" pos:column="27">+</op:operator> <name pos:line="288" pos:column="29">GRAM_NUMBER</name> <op:operator pos:line="288" pos:column="41">-</op:operator> <lit:literal type="number" pos:line="288" pos:column="43">1</lit:literal> <op:operator pos:line="288" pos:column="45">&lt;</op:operator> <name><name pos:line="288" pos:column="47">list</name><op:operator pos:line="288" pos:column="51">.</op:operator><name pos:line="288" pos:column="52">Count</name></name></expr>;</condition> <incr><expr><name pos:line="288" pos:column="59">i</name><op:operator pos:line="288" pos:column="60">++</op:operator></expr></incr>)
            <block pos:line="289" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="290" pos:column="17">allEntries</name><op:operator pos:line="290" pos:column="27">.</op:operator><name pos:line="290" pos:column="28">AddRange</name></name><argument_list pos:line="290" pos:column="36">(<argument><expr><call><name pos:line="290" pos:column="37">GetEntries</name><argument_list pos:line="290" pos:column="47">(<argument><expr><call><name><name pos:line="290" pos:column="48">list</name><op:operator pos:line="290" pos:column="52">.</op:operator><name pos:line="290" pos:column="53">GetRange</name></name><argument_list pos:line="290" pos:column="61">(<argument><expr><name pos:line="290" pos:column="62">i</name></expr></argument>, <argument><expr><name pos:line="290" pos:column="65">GRAM_NUMBER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>

            <comment type="line" pos:line="293" pos:column="13">// Check if having leftovers.</comment>
            <if pos:line="294" pos:column="13">if <condition pos:line="294" pos:column="16">(<expr><name pos:line="294" pos:column="17">i</name> <op:operator pos:line="294" pos:column="19">+</op:operator> <name pos:line="294" pos:column="21">GRAM_NUMBER</name> <op:operator pos:line="294" pos:column="33">-</op:operator> <lit:literal type="number" pos:line="294" pos:column="35">1</lit:literal> <op:operator pos:line="294" pos:column="37">!=</op:operator> <name><name pos:line="294" pos:column="40">list</name><op:operator pos:line="294" pos:column="44">.</op:operator><name pos:line="294" pos:column="45">Count</name></name> <op:operator pos:line="294" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="294" pos:column="53">1</lit:literal> <op:operator pos:line="294" pos:column="55">&amp;&amp;</op:operator> <call><name><name pos:line="294" pos:column="58">list</name><op:operator pos:line="294" pos:column="62">.</op:operator><name pos:line="294" pos:column="63">Any</name></name><argument_list pos:line="294" pos:column="66">()</argument_list></call></expr>)</condition><then pos:line="294" pos:column="69">
            <block pos:line="295" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="296" pos:column="17">allEntries</name><op:operator pos:line="296" pos:column="27">.</op:operator><name pos:line="296" pos:column="28">AddRange</name></name><argument_list pos:line="296" pos:column="36">(<argument><expr><call><name pos:line="296" pos:column="37">GetEntries</name><argument_list pos:line="296" pos:column="47">(<argument><expr><call><name><name pos:line="296" pos:column="48">list</name><op:operator pos:line="296" pos:column="52">.</op:operator><name pos:line="296" pos:column="53">GetRange</name></name><argument_list pos:line="296" pos:column="61">(<argument><expr><name pos:line="296" pos:column="62">i</name></expr></argument>, <argument><expr><name><name pos:line="296" pos:column="65">list</name><op:operator pos:line="296" pos:column="69">.</op:operator><name pos:line="296" pos:column="70">Count</name></name> <op:operator pos:line="296" pos:column="76">-</op:operator> <name pos:line="296" pos:column="78">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <return pos:line="299" pos:column="13">return <expr><name pos:line="299" pos:column="20">allEntries</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="302" pos:column="9">public</specifier> <name><name pos:line="302" pos:column="16">IEnumerable</name><argument_list pos:line="302" pos:column="27">&lt;<argument><name pos:line="302" pos:column="28">IMatrixEntry</name></argument>&gt;</argument_list></name></type> <name pos:line="302" pos:column="42">GetEntries</name><parameter_list pos:line="302" pos:column="52">(<param><decl><type><name><name pos:line="302" pos:column="53">Predicate</name><argument_list pos:line="302" pos:column="62">&lt;<argument><name pos:line="302" pos:column="63">IMatrixEntry</name></argument>&gt;</argument_list></name></type> <name pos:line="302" pos:column="77">predicate</name></decl></param>)</parameter_list>
        <block pos:line="303" pos:column="9">{
            <lock pos:line="304" pos:column="13">lock (<expr><name pos:line="304" pos:column="19">locker</name></expr>)
            <block pos:line="305" pos:column="13">{
                <return pos:line="306" pos:column="17">return <expr><call><name><name pos:line="306" pos:column="24">matrix</name><op:operator pos:line="306" pos:column="30">.</op:operator><name pos:line="306" pos:column="31">Where</name></name><argument_list pos:line="306" pos:column="36">(<argument><expr><name><name pos:line="306" pos:column="37">predicate</name><op:operator pos:line="306" pos:column="46">.</op:operator><name pos:line="306" pos:column="47">Invoke</name></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></lock>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
