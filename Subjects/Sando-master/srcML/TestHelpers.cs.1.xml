<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\IntegrationTests\TestHelpers.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">EnvDTE</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">Microsoft</name><op:operator pos:line="2" pos:column="16">.</op:operator><name pos:line="2" pos:column="17">VisualStudio</name><op:operator pos:line="2" pos:column="29">.</op:operator><name pos:line="2" pos:column="30">TestTools</name><op:operator pos:line="2" pos:column="39">.</op:operator><name pos:line="2" pos:column="40">UnitTesting</name></name>;</using>
<using pos:line="3" pos:column="1">using <name pos:line="3" pos:column="7">System</name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Collections</name><op:operator pos:line="4" pos:column="25">.</op:operator><name pos:line="4" pos:column="26">Generic</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">IO</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">System</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">Linq</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">System</name><op:operator pos:line="7" pos:column="13">.</op:operator><name pos:line="7" pos:column="14">Text</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">System</name><op:operator pos:line="8" pos:column="13">.</op:operator><name pos:line="8" pos:column="14">Threading</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">System</name><op:operator pos:line="9" pos:column="13">.</op:operator><name pos:line="9" pos:column="14">Threading</name><op:operator pos:line="9" pos:column="23">.</op:operator><name pos:line="9" pos:column="24">Tasks</name></name>;</using>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">ABB</name><op:operator pos:line="10" pos:column="10">.</op:operator><name pos:line="10" pos:column="11">SrcML</name><op:operator pos:line="10" pos:column="16">.</op:operator><name pos:line="10" pos:column="17">VisualStudio</name><op:operator pos:line="10" pos:column="29">.</op:operator><name pos:line="10" pos:column="30">SrcMLService</name></name>;</using>
<using pos:line="11" pos:column="1">using <name><name pos:line="11" pos:column="7">ABB</name><op:operator pos:line="11" pos:column="10">.</op:operator><name pos:line="11" pos:column="11">SrcML</name><op:operator pos:line="11" pos:column="16">.</op:operator><name pos:line="11" pos:column="17">Utilities</name></name>;</using>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">Sando</name><op:operator pos:line="12" pos:column="12">.</op:operator><name pos:line="12" pos:column="13">ExtensionContracts</name><op:operator pos:line="12" pos:column="31">.</op:operator><name pos:line="12" pos:column="32">ServiceContracts</name></name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">Sando</name><op:operator pos:line="13" pos:column="12">.</op:operator><name pos:line="13" pos:column="13">UI</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">ABB</name><op:operator pos:line="14" pos:column="10">.</op:operator><name pos:line="14" pos:column="11">SrcML</name></name>;</using>

<namespace pos:line="16" pos:column="1">namespace <name><name pos:line="16" pos:column="11">Sando</name><op:operator pos:line="16" pos:column="16">.</op:operator><name pos:line="16" pos:column="17">IntegrationTests</name></name>
<block pos:line="17" pos:column="1">{
    <class><attribute pos:line="18" pos:column="5">[<expr><name pos:line="18" pos:column="6">TestClass</name></expr>]</attribute>
    <specifier pos:line="19" pos:column="5">public</specifier> class <name pos:line="19" pos:column="18">TestHelpers</name>
    <block pos:line="20" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="21" pos:column="9">internal</specifier> <specifier pos:line="21" pos:column="18">static</specifier> <name><name pos:line="21" pos:column="25">Scaffold</name><argument_list pos:line="21" pos:column="33">&lt;<argument><name pos:line="21" pos:column="34">ISandoGlobalService</name></argument>&gt;</argument_list></name></type> <name pos:line="21" pos:column="55">TestScaffold</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="22" pos:column="9">internal</specifier> <specifier pos:line="22" pos:column="18">static</specifier> <name><name pos:line="22" pos:column="25">Scaffold</name><argument_list pos:line="22" pos:column="33">&lt;<argument><name pos:line="22" pos:column="34">ISrcMLGlobalService</name></argument>&gt;</argument_list></name></type> <name pos:line="22" pos:column="55">SrcMLTestScaffold</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="23" pos:column="9">private</specifier> <specifier pos:line="23" pos:column="17">static</specifier> <name pos:line="23" pos:column="24">UIPackage</name></type> <name pos:line="23" pos:column="34">TestPackage</name></decl>;</decl_stmt>

        <function><type><attribute pos:line="25" pos:column="9">[<expr><name pos:line="25" pos:column="10">AssemblyInitialize</name></expr>]</attribute>
        <specifier pos:line="26" pos:column="9">public</specifier> <specifier pos:line="26" pos:column="16">static</specifier> <name pos:line="26" pos:column="23">void</name></type> <name pos:line="26" pos:column="28">AssemblySetup</name><parameter_list pos:line="26" pos:column="41">(<param><decl><type><name pos:line="26" pos:column="42">TestContext</name></type> <name pos:line="26" pos:column="54">testContext</name></decl></param>)</parameter_list>
        <block pos:line="27" pos:column="9">{
            <expr_stmt><expr><name pos:line="28" pos:column="13">SrcMLTestScaffold</name> <op:operator pos:line="28" pos:column="31">=</op:operator> <call><name><name><name pos:line="28" pos:column="33">Scaffold</name><argument_list pos:line="28" pos:column="41">&lt;<argument><name pos:line="28" pos:column="42">ISrcMLGlobalService</name></argument>&gt;</argument_list></name><op:operator pos:line="28" pos:column="62">.</op:operator><name pos:line="28" pos:column="63">Setup</name></name><argument_list pos:line="28" pos:column="68">(<argument><expr><op:operator pos:line="28" pos:column="69">new</op:operator> <call><name pos:line="28" pos:column="73">SrcMLServicePackage</name><argument_list pos:line="28" pos:column="92">()</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="28" pos:column="96">typeof</name><argument_list pos:line="28" pos:column="102">(<argument><expr><name pos:line="28" pos:column="103">SSrcMLGlobalService</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="29" pos:column="13">TestPackage</name> <op:operator pos:line="29" pos:column="25">=</op:operator> <op:operator pos:line="29" pos:column="27">new</op:operator> <call><name pos:line="29" pos:column="31">UIPackage</name><argument_list pos:line="29" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="30" pos:column="13">TestScaffold</name> <op:operator pos:line="30" pos:column="26">=</op:operator> <call><name><name><name pos:line="30" pos:column="28">Scaffold</name><argument_list pos:line="30" pos:column="36">&lt;<argument><name pos:line="30" pos:column="37">ISandoGlobalService</name></argument>&gt;</argument_list></name><op:operator pos:line="30" pos:column="57">.</op:operator><name pos:line="30" pos:column="58">Setup</name></name><argument_list pos:line="30" pos:column="63">(<argument><expr><name pos:line="30" pos:column="64">TestPackage</name></expr></argument>, <argument><expr><call><name pos:line="30" pos:column="77">typeof</name><argument_list pos:line="30" pos:column="83">(<argument><expr><name pos:line="30" pos:column="84">SSandoGlobalService</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>            
        }</block></function>

        <function><type><specifier pos:line="33" pos:column="9">public</specifier> <specifier pos:line="33" pos:column="16">static</specifier> <name pos:line="33" pos:column="23">void</name></type> <name pos:line="33" pos:column="28">StartupCompleted</name><parameter_list pos:line="33" pos:column="44">()</parameter_list>
        <block pos:line="34" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="35" pos:column="13">TestPackage</name><op:operator pos:line="35" pos:column="24">.</op:operator><name pos:line="35" pos:column="25">StartupCompleted</name></name><argument_list pos:line="35" pos:column="41">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="38" pos:column="9">[<expr><name pos:line="38" pos:column="10">AssemblyCleanup</name></expr>]</attribute>
        <specifier pos:line="39" pos:column="9">public</specifier> <specifier pos:line="39" pos:column="16">static</specifier> <name pos:line="39" pos:column="23">void</name></type> <name pos:line="39" pos:column="28">AssemblyCleanup</name><parameter_list pos:line="39" pos:column="43">()</parameter_list>
        <block pos:line="40" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="41" pos:column="13">TestScaffold</name><op:operator pos:line="41" pos:column="25">.</op:operator><name pos:line="41" pos:column="26">Cleanup</name></name><argument_list pos:line="41" pos:column="33">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="42" pos:column="13">SrcMLTestScaffold</name><op:operator pos:line="42" pos:column="30">.</op:operator><name pos:line="42" pos:column="31">Cleanup</name></name><argument_list pos:line="42" pos:column="38">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="45" pos:column="9">internal</specifier> <specifier pos:line="45" pos:column="18">static</specifier> <name pos:line="45" pos:column="25">string</name></type> <name pos:line="45" pos:column="32">GetSolutionDirectory</name><parameter_list pos:line="45" pos:column="52">()</parameter_list>
        <block pos:line="46" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="47" pos:column="13">var</name></type> <name pos:line="47" pos:column="17">currentDirectory</name> <init pos:line="47" pos:column="34">= <expr><op:operator pos:line="47" pos:column="36">new</op:operator> <call><name pos:line="47" pos:column="40">DirectoryInfo</name><argument_list pos:line="47" pos:column="53">(<argument><expr><name><name pos:line="47" pos:column="54">Environment</name><op:operator pos:line="47" pos:column="65">.</op:operator><name pos:line="47" pos:column="66">CurrentDirectory</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <while pos:line="48" pos:column="13">while <condition pos:line="48" pos:column="19">(<expr><name pos:line="48" pos:column="20">currentDirectory</name> <op:operator pos:line="48" pos:column="37">!=</op:operator> <name pos:line="48" pos:column="40">null</name> <op:operator pos:line="48" pos:column="45">&amp;&amp;</op:operator> <op:operator pos:line="48" pos:column="48">!</op:operator><call><name><name pos:line="48" pos:column="49">Directory</name><op:operator pos:line="48" pos:column="58">.</op:operator><name pos:line="48" pos:column="59">Exists</name></name><argument_list pos:line="48" pos:column="65">(<argument><expr><call><name><name pos:line="48" pos:column="66">Path</name><op:operator pos:line="48" pos:column="70">.</op:operator><name pos:line="48" pos:column="71">Combine</name></name><argument_list pos:line="48" pos:column="78">(<argument><expr><name><name pos:line="48" pos:column="79">currentDirectory</name><op:operator pos:line="48" pos:column="95">.</op:operator><name pos:line="48" pos:column="96">FullName</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="48" pos:column="106">"LIBS"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
            <block pos:line="49" pos:column="13">{
                <expr_stmt><expr><name pos:line="50" pos:column="17">currentDirectory</name> <op:operator pos:line="50" pos:column="34">=</op:operator> <name><name pos:line="50" pos:column="36">currentDirectory</name><op:operator pos:line="50" pos:column="52">.</op:operator><name pos:line="50" pos:column="53">Parent</name></name></expr>;</expr_stmt>
            }</block></while>
            <return pos:line="52" pos:column="13">return <expr><name><name pos:line="52" pos:column="20">currentDirectory</name><op:operator pos:line="52" pos:column="36">.</op:operator><name pos:line="52" pos:column="37">FullName</name></name></expr>;</return>
        }</block></function>
        <function><type><specifier pos:line="54" pos:column="9">internal</specifier> <specifier pos:line="54" pos:column="18">static</specifier> <name pos:line="54" pos:column="25">void</name></type> <name pos:line="54" pos:column="30">CopyDirectory</name><parameter_list pos:line="54" pos:column="43">(<param><decl><type><name pos:line="54" pos:column="44">string</name></type> <name pos:line="54" pos:column="51">sourcePath</name></decl></param>, <param><decl><type><name pos:line="54" pos:column="63">string</name></type> <name pos:line="54" pos:column="70">destinationPath</name></decl></param>)</parameter_list>
        <block pos:line="55" pos:column="9">{
            <foreach pos:line="56" pos:column="13">foreach (<init><decl><type><name pos:line="56" pos:column="22">var</name></type> <name pos:line="56" pos:column="26">fileTemplate</name> <range pos:line="56" pos:column="39">in <expr><call><name><name pos:line="56" pos:column="42">Directory</name><op:operator pos:line="56" pos:column="51">.</op:operator><name pos:line="56" pos:column="52">GetFiles</name></name><argument_list pos:line="56" pos:column="60">(<argument><expr><name pos:line="56" pos:column="61">sourcePath</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="56" pos:column="73">"*"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="56" pos:column="78">SearchOption</name><op:operator pos:line="56" pos:column="90">.</op:operator><name pos:line="56" pos:column="91">AllDirectories</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)
            <block pos:line="57" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="58" pos:column="17">var</name></type> <name pos:line="58" pos:column="21">fileName</name> <init pos:line="58" pos:column="30">= <expr><call><name><name pos:line="58" pos:column="32">fileTemplate</name><op:operator pos:line="58" pos:column="44">.</op:operator><name pos:line="58" pos:column="45">Replace</name></name><argument_list pos:line="58" pos:column="52">(<argument><expr><name pos:line="58" pos:column="53">sourcePath</name></expr></argument>, <argument><expr><name pos:line="58" pos:column="65">destinationPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="59" pos:column="17">var</name></type> <name pos:line="59" pos:column="21">directoryName</name> <init pos:line="59" pos:column="35">= <expr><call><name><name pos:line="59" pos:column="37">Path</name><op:operator pos:line="59" pos:column="41">.</op:operator><name pos:line="59" pos:column="42">GetDirectoryName</name></name><argument_list pos:line="59" pos:column="58">(<argument><expr><name pos:line="59" pos:column="59">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="60" pos:column="17">if <condition pos:line="60" pos:column="20">(<expr><op:operator pos:line="60" pos:column="21">!</op:operator><call><name><name pos:line="60" pos:column="22">Directory</name><op:operator pos:line="60" pos:column="31">.</op:operator><name pos:line="60" pos:column="32">Exists</name></name><argument_list pos:line="60" pos:column="38">(<argument><expr><name pos:line="60" pos:column="39">directoryName</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="60" pos:column="54">
                <block pos:line="61" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="62" pos:column="21">Directory</name><op:operator pos:line="62" pos:column="30">.</op:operator><name pos:line="62" pos:column="31">CreateDirectory</name></name><argument_list pos:line="62" pos:column="46">(<argument><expr><name pos:line="62" pos:column="47">directoryName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><call><name><name pos:line="64" pos:column="17">File</name><op:operator pos:line="64" pos:column="21">.</op:operator><name pos:line="64" pos:column="22">Copy</name></name><argument_list pos:line="64" pos:column="26">(<argument><expr><name pos:line="64" pos:column="27">fileTemplate</name></expr></argument>, <argument><expr><name pos:line="64" pos:column="41">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>

 

        <function><type><specifier pos:line="70" pos:column="9">internal</specifier> <specifier pos:line="70" pos:column="18">static</specifier> <name pos:line="70" pos:column="25">bool</name></type> <name pos:line="70" pos:column="30">WaitForServiceToFinish</name><parameter_list pos:line="70" pos:column="52">(<param><decl><type><name pos:line="70" pos:column="53">ISrcMLGlobalService</name></type> <name pos:line="70" pos:column="73">service</name></decl></param>, <param><decl><type><name pos:line="70" pos:column="82">int</name></type> <name pos:line="70" pos:column="86">millisecondsTimeout</name></decl></param>)</parameter_list>
        <block pos:line="71" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="72" pos:column="13">System</name><op:operator pos:line="72" pos:column="19">.</op:operator><name pos:line="72" pos:column="20">Threading</name><op:operator pos:line="72" pos:column="29">.</op:operator><name pos:line="72" pos:column="30">Thread</name><op:operator pos:line="72" pos:column="36">.</op:operator><name pos:line="72" pos:column="37">Sleep</name></name><argument_list pos:line="72" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="72" pos:column="43">2000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if pos:line="73" pos:column="13">if <condition pos:line="73" pos:column="16">(<expr><op:operator pos:line="73" pos:column="17">!</op:operator><name><name pos:line="73" pos:column="18">service</name><op:operator pos:line="73" pos:column="25">.</op:operator><name pos:line="73" pos:column="26">IsReady</name></name></expr>)</condition><then pos:line="73" pos:column="34">
            <block pos:line="74" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="75" pos:column="17">ManualResetEvent</name></type> <name pos:line="75" pos:column="34">mre</name> <init pos:line="75" pos:column="38">= <expr><op:operator pos:line="75" pos:column="40">new</op:operator> <call><name pos:line="75" pos:column="44">ManualResetEvent</name><argument_list pos:line="75" pos:column="60">(<argument><expr><lit:literal type="boolean" pos:line="75" pos:column="61">false</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name pos:line="76" pos:column="17">EventHandler</name><argument_list pos:line="76" pos:column="29">&lt;<argument><name pos:line="76" pos:column="30">IsReadyChangedEventArgs</name></argument>&gt;</argument_list></name></type> <name pos:line="76" pos:column="55">action</name> <init pos:line="76" pos:column="62">= <expr><lambda><parameter_list pos:line="76" pos:column="64">(<param><decl><name pos:line="76" pos:column="65">o</name></decl></param>, <param><decl><name pos:line="76" pos:column="68">e</name></decl></param>)</parameter_list> <op:operator pos:line="76" pos:column="71">=&gt;</op:operator> <block pos:line="76" pos:column="74">{ <expr_stmt><expr><call><name><name pos:line="76" pos:column="76">mre</name><op:operator pos:line="76" pos:column="79">.</op:operator><name pos:line="76" pos:column="80">Set</name></name><argument_list pos:line="76" pos:column="83">()</argument_list></call></expr>;</expr_stmt> }</block></lambda></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name pos:line="77" pos:column="17">service</name><op:operator pos:line="77" pos:column="24">.</op:operator><name pos:line="77" pos:column="25">IsReadyChanged</name></name> <op:operator pos:line="77" pos:column="40">+=</op:operator> <name pos:line="77" pos:column="43">action</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="78" pos:column="17">mre</name><op:operator pos:line="78" pos:column="20">.</op:operator><name pos:line="78" pos:column="21">WaitOne</name></name><argument_list pos:line="78" pos:column="28">(<argument><expr><name pos:line="78" pos:column="29">millisecondsTimeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="79" pos:column="17">service</name><op:operator pos:line="79" pos:column="24">.</op:operator><name pos:line="79" pos:column="25">IsReadyChanged</name></name> <op:operator pos:line="79" pos:column="40">-=</op:operator> <name pos:line="79" pos:column="43">action</name></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name pos:line="81" pos:column="13">System</name><op:operator pos:line="81" pos:column="19">.</op:operator><name pos:line="81" pos:column="20">Threading</name><op:operator pos:line="81" pos:column="29">.</op:operator><name pos:line="81" pos:column="30">Thread</name><op:operator pos:line="81" pos:column="36">.</op:operator><name pos:line="81" pos:column="37">Sleep</name></name><argument_list pos:line="81" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="81" pos:column="43">10000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="82" pos:column="13">return <expr><name><name pos:line="82" pos:column="20">service</name><op:operator pos:line="82" pos:column="27">.</op:operator><name pos:line="82" pos:column="28">IsReady</name></name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="85" pos:column="9">internal</specifier> <specifier pos:line="85" pos:column="18">static</specifier> <name><name pos:line="85" pos:column="25">IEnumerable</name><argument_list pos:line="85" pos:column="36">&lt;<argument><name pos:line="85" pos:column="37">Project</name></argument>&gt;</argument_list></name></type> <name pos:line="85" pos:column="46">GetProjects</name><parameter_list pos:line="85" pos:column="57">(<param><decl><type><name pos:line="85" pos:column="58">Solution</name></type> <name pos:line="85" pos:column="67">solution</name></decl></param>)</parameter_list>
        <block pos:line="86" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="87" pos:column="13">var</name></type> <name pos:line="87" pos:column="17">projects</name> <init pos:line="87" pos:column="26">= <expr><name><name pos:line="87" pos:column="28">solution</name><op:operator pos:line="87" pos:column="36">.</op:operator><name pos:line="87" pos:column="37">Projects</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="88" pos:column="13">var</name></type> <name pos:line="88" pos:column="17">enumerator</name> <init pos:line="88" pos:column="28">= <expr><call><name><name pos:line="88" pos:column="30">projects</name><op:operator pos:line="88" pos:column="38">.</op:operator><name pos:line="88" pos:column="39">GetEnumerator</name></name><argument_list pos:line="88" pos:column="52">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while pos:line="89" pos:column="13">while <condition pos:line="89" pos:column="19">(<expr><call><name><name pos:line="89" pos:column="20">enumerator</name><op:operator pos:line="89" pos:column="30">.</op:operator><name pos:line="89" pos:column="31">MoveNext</name></name><argument_list pos:line="89" pos:column="39">()</argument_list></call></expr>)</condition>
            <block pos:line="90" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="91" pos:column="17">Project</name></type> <name pos:line="91" pos:column="25">currentProject</name> <init pos:line="91" pos:column="40">= <expr><name><name pos:line="91" pos:column="42">enumerator</name><op:operator pos:line="91" pos:column="52">.</op:operator><name pos:line="91" pos:column="53">Current</name></name> <op:operator pos:line="91" pos:column="61">as</op:operator> <name pos:line="91" pos:column="64">Project</name></expr></init></decl>;</decl_stmt>
                <if pos:line="92" pos:column="17">if <condition pos:line="92" pos:column="20">(<expr><name pos:line="92" pos:column="21">null</name> <op:operator pos:line="92" pos:column="26">!=</op:operator> <name pos:line="92" pos:column="29">currentProject</name></expr>)</condition><then pos:line="92" pos:column="44">
                <block pos:line="93" pos:column="17">{
                    <return><specifier pos:line="94" pos:column="21">yield</specifier> return <expr><name pos:line="94" pos:column="34">currentProject</name></expr>;</return>
                }</block></then></if>
            }</block></while>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
