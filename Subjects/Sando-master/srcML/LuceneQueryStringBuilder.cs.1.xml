<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Indexer\Indexer\Searching\LuceneQueryStringBuilder.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Text</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Diagnostics</name><op:operator pos:line="3" pos:column="25">.</op:operator><name pos:line="3" pos:column="26">Contracts</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Sando</name><op:operator pos:line="4" pos:column="12">.</op:operator><name pos:line="4" pos:column="13">Core</name><op:operator pos:line="4" pos:column="17">.</op:operator><name pos:line="4" pos:column="18">Extensions</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Sando</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">ExtensionContracts</name><op:operator pos:line="5" pos:column="31">.</op:operator><name pos:line="5" pos:column="32">ProgramElementContracts</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Sando</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">Indexer</name><op:operator pos:line="6" pos:column="20">.</op:operator><name pos:line="6" pos:column="21">Documents</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Sando</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">Indexer</name><op:operator pos:line="7" pos:column="20">.</op:operator><name pos:line="7" pos:column="21">Exceptions</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Sando</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">Indexer</name><op:operator pos:line="8" pos:column="20">.</op:operator><name pos:line="8" pos:column="21">Searching</name><op:operator pos:line="8" pos:column="30">.</op:operator><name pos:line="8" pos:column="31">Criteria</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">Sando</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">Translation</name></name>;</using>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">System</name><op:operator pos:line="10" pos:column="13">.</op:operator><name pos:line="10" pos:column="14">Text</name><op:operator pos:line="10" pos:column="18">.</op:operator><name pos:line="10" pos:column="19">RegularExpressions</name></name>;</using>
<using pos:line="11" pos:column="1">using <name><name pos:line="11" pos:column="7">System</name><op:operator pos:line="11" pos:column="13">.</op:operator><name pos:line="11" pos:column="14">Globalization</name></name>;</using>

<namespace pos:line="13" pos:column="1">namespace <name><name pos:line="13" pos:column="11">Sando</name><op:operator pos:line="13" pos:column="16">.</op:operator><name pos:line="13" pos:column="17">Indexer</name><op:operator pos:line="13" pos:column="24">.</op:operator><name pos:line="13" pos:column="25">Searching</name></name>
<block pos:line="14" pos:column="1">{
    <class><specifier pos:line="15" pos:column="5">public</specifier> class <name pos:line="15" pos:column="18">LuceneQueryStringBuilder</name>
    <block pos:line="16" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="17" pos:column="9">private</specifier> <specifier pos:line="17" pos:column="17">readonly</specifier> <name pos:line="17" pos:column="26">SimpleSearchCriteria</name></type> <name pos:line="17" pos:column="47">_criteria</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="18" pos:column="9">private</specifier> <name><name pos:line="18" pos:column="17">System</name><op:operator pos:line="18" pos:column="23">.</op:operator><name pos:line="18" pos:column="24">Collections</name><op:operator pos:line="18" pos:column="35">.</op:operator><name pos:line="18" pos:column="36">Generic</name><op:operator pos:line="18" pos:column="43">.</op:operator><name><name pos:line="18" pos:column="44">Dictionary</name><argument_list pos:line="18" pos:column="54">&lt;<argument><name pos:line="18" pos:column="55">string</name></argument>, <argument><name pos:line="18" pos:column="63">float</name></argument>&gt;</argument_list></name></name></type> <name pos:line="18" pos:column="70">_queryWeights</name></decl>;</decl_stmt>

        <constructor><specifier pos:line="20" pos:column="9">public</specifier> <name pos:line="20" pos:column="16">LuceneQueryStringBuilder</name><parameter_list pos:line="20" pos:column="40">(<param><decl><type><name pos:line="20" pos:column="41">SimpleSearchCriteria</name></type> <name pos:line="20" pos:column="62">simpleSearchCriteria</name></decl></param>)</parameter_list>
        <block pos:line="21" pos:column="9">{            
            <expr_stmt><expr><name pos:line="22" pos:column="13">_criteria</name> <op:operator pos:line="22" pos:column="23">=</op:operator> <name pos:line="22" pos:column="25">simpleSearchCriteria</name></expr>;</expr_stmt>
        }</block></constructor>


        <function><type><specifier pos:line="26" pos:column="9">public</specifier> <name pos:line="26" pos:column="16">string</name></type> <name pos:line="26" pos:column="23">Build</name><parameter_list pos:line="26" pos:column="28">()</parameter_list>
        <block pos:line="27" pos:column="9">{
            <expr_stmt><expr><name pos:line="28" pos:column="13">_queryWeights</name> <op:operator pos:line="28" pos:column="27">=</op:operator> <call><name><name pos:line="28" pos:column="29">ExtensionPointsRepository</name><op:operator pos:line="28" pos:column="54">.</op:operator><name pos:line="28" pos:column="55">Instance</name><op:operator pos:line="28" pos:column="63">.</op:operator><name pos:line="28" pos:column="64">GetQueryWeightsSupplierImplementation</name></name><argument_list pos:line="28" pos:column="101">()</argument_list></call><op:operator pos:line="28" pos:column="103">.</op:operator><call><name pos:line="28" pos:column="104">GetQueryWeightsValues</name><argument_list pos:line="28" pos:column="125">()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="29" pos:column="13">var</name></type> <name pos:line="29" pos:column="17">stringBuilder</name> <init pos:line="29" pos:column="31">= <expr><op:operator pos:line="29" pos:column="33">new</op:operator> <call><name pos:line="29" pos:column="37">StringBuilder</name><argument_list pos:line="29" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="30" pos:column="13">if <condition pos:line="30" pos:column="16">(<expr><call><name><name pos:line="30" pos:column="17">_criteria</name><op:operator pos:line="30" pos:column="26">.</op:operator><name pos:line="30" pos:column="27">SearchByAccessLevel</name> <type:modifier pos:line="30" pos:column="47">&amp;&amp;</type:modifier></name> <argument_list pos:line="30" pos:column="50">(<argument><expr><op:operator pos:line="30" pos:column="51">!</op:operator><name><name pos:line="30" pos:column="52">_criteria</name><op:operator pos:line="30" pos:column="61">.</op:operator><name pos:line="30" pos:column="62">SearchByProgramElementType</name></name> <op:operator pos:line="30" pos:column="89">||</op:operator> <op:operator pos:line="30" pos:column="92">!</op:operator><call><name><name pos:line="30" pos:column="93">_criteria</name><op:operator pos:line="30" pos:column="102">.</op:operator><name pos:line="30" pos:column="103">ProgramElementTypes</name><op:operator pos:line="30" pos:column="122">.</op:operator><name pos:line="30" pos:column="123">Contains</name></name><argument_list pos:line="30" pos:column="131">(<argument><expr><name><name pos:line="30" pos:column="132">ProgramElementType</name><op:operator pos:line="30" pos:column="150">.</op:operator><name pos:line="30" pos:column="151">Comment</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="30" pos:column="161">
            <block pos:line="31" pos:column="13">{                
                <expr_stmt><expr><call><name pos:line="32" pos:column="17">AccessLevelCriteriaToString</name><argument_list pos:line="32" pos:column="44">(<argument><expr><name pos:line="32" pos:column="45">stringBuilder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if pos:line="34" pos:column="13">if <condition pos:line="34" pos:column="16">(<expr><name><name pos:line="34" pos:column="17">_criteria</name><op:operator pos:line="34" pos:column="26">.</op:operator><name pos:line="34" pos:column="27">SearchByProgramElementType</name></name></expr>)</condition><then pos:line="34" pos:column="54">
            <block pos:line="35" pos:column="13">{
                <if pos:line="36" pos:column="17">if<condition pos:line="36" pos:column="19">(<expr><name><name pos:line="36" pos:column="20">_criteria</name><op:operator pos:line="36" pos:column="29">.</op:operator><name pos:line="36" pos:column="30">ProgramElementTypes</name><op:operator pos:line="36" pos:column="49">.</op:operator><name pos:line="36" pos:column="50">Count</name></name> <op:operator pos:line="36" pos:column="56">!=</op:operator> <sizeof pos:line="36" pos:column="59">sizeof<argument_list pos:line="36" pos:column="65">(<argument><expr><name pos:line="36" pos:column="66">ProgramElementType</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then><block pos:line="36" pos:column="86">{
                    <if pos:line="37" pos:column="21">if <condition pos:line="37" pos:column="24">(<expr><name><name pos:line="37" pos:column="25">stringBuilder</name><op:operator pos:line="37" pos:column="38">.</op:operator><name pos:line="37" pos:column="39">Length</name></name> <op:operator pos:line="37" pos:column="46">&gt;</op:operator> <lit:literal type="number" pos:line="37" pos:column="48">0</lit:literal></expr>)</condition><then pos:line="37" pos:column="50">
                        <expr_stmt><expr><call><name><name pos:line="38" pos:column="25">stringBuilder</name><op:operator pos:line="38" pos:column="38">.</op:operator><name pos:line="38" pos:column="39">Append</name></name><argument_list pos:line="38" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="38" pos:column="46">" AND "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                    <expr_stmt><expr><call><name pos:line="39" pos:column="21">ProgramElementTypeCriteriaToString</name><argument_list pos:line="39" pos:column="55">(<argument><expr><name pos:line="39" pos:column="56">stringBuilder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
            <if pos:line="42" pos:column="13">if <condition pos:line="42" pos:column="16">(<expr><name><name pos:line="42" pos:column="17">_criteria</name><op:operator pos:line="42" pos:column="26">.</op:operator><name pos:line="42" pos:column="27">SearchByFileExtension</name></name></expr>)</condition><then pos:line="42" pos:column="49">
            <block pos:line="43" pos:column="13">{
                <if pos:line="44" pos:column="17">if <condition pos:line="44" pos:column="20">(<expr><name><name pos:line="44" pos:column="21">stringBuilder</name><op:operator pos:line="44" pos:column="34">.</op:operator><name pos:line="44" pos:column="35">Length</name></name> <op:operator pos:line="44" pos:column="42">&gt;</op:operator> <lit:literal type="number" pos:line="44" pos:column="44">0</lit:literal></expr>)</condition><then pos:line="44" pos:column="46">
                    <expr_stmt><expr><call><name><name pos:line="45" pos:column="21">stringBuilder</name><op:operator pos:line="45" pos:column="34">.</op:operator><name pos:line="45" pos:column="35">Append</name></name><argument_list pos:line="45" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="45" pos:column="42">" AND "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                <expr_stmt><expr><call><name pos:line="46" pos:column="17">FileExtensionsCriteriaToString</name><argument_list pos:line="46" pos:column="47">(<argument><expr><name pos:line="46" pos:column="48">stringBuilder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if pos:line="48" pos:column="13">if <condition pos:line="48" pos:column="16">(<expr><name><name pos:line="48" pos:column="17">_criteria</name><op:operator pos:line="48" pos:column="26">.</op:operator><name pos:line="48" pos:column="27">SearchByLocation</name></name></expr>)</condition><then pos:line="48" pos:column="44">
            <block pos:line="49" pos:column="13">{
                <if pos:line="50" pos:column="17">if <condition pos:line="50" pos:column="20">(<expr><name><name pos:line="50" pos:column="21">stringBuilder</name><op:operator pos:line="50" pos:column="34">.</op:operator><name pos:line="50" pos:column="35">Length</name></name> <op:operator pos:line="50" pos:column="42">&gt;</op:operator> <lit:literal type="number" pos:line="50" pos:column="44">0</lit:literal></expr>)</condition><then pos:line="50" pos:column="46">
                    <expr_stmt><expr><call><name><name pos:line="51" pos:column="21">stringBuilder</name><op:operator pos:line="51" pos:column="34">.</op:operator><name pos:line="51" pos:column="35">Append</name></name><argument_list pos:line="51" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="51" pos:column="42">" AND "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                <expr_stmt><expr><call><name pos:line="52" pos:column="17">LocationCriteriaToString</name><argument_list pos:line="52" pos:column="41">(<argument><expr><name pos:line="52" pos:column="42">stringBuilder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name pos:line="54" pos:column="13">UsageTypeCriteriaToString</name><argument_list pos:line="54" pos:column="38">(<argument><expr><name pos:line="54" pos:column="39">stringBuilder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="55" pos:column="13">return <expr><call><name><name pos:line="55" pos:column="20">stringBuilder</name><op:operator pos:line="55" pos:column="33">.</op:operator><name pos:line="55" pos:column="34">ToString</name></name><argument_list pos:line="55" pos:column="42">()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="58" pos:column="9">private</specifier> <name pos:line="58" pos:column="17">void</name></type> <name pos:line="58" pos:column="22">AccessLevelCriteriaToString</name><parameter_list pos:line="58" pos:column="49">(<param><decl><type><name pos:line="58" pos:column="50">StringBuilder</name></type> <name pos:line="58" pos:column="64">stringBuilder</name></decl></param>)</parameter_list>
        <block pos:line="59" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="60" pos:column="13">Contract</name><op:operator pos:line="60" pos:column="21">.</op:operator><name pos:line="60" pos:column="22">Requires</name></name><argument_list pos:line="60" pos:column="30">(<argument><expr><name><name pos:line="60" pos:column="31">_criteria</name><op:operator pos:line="60" pos:column="40">.</op:operator><name pos:line="60" pos:column="41">AccessLevels</name></name> <op:operator pos:line="60" pos:column="54">!=</op:operator> <name pos:line="60" pos:column="57">null</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="60" pos:column="63">"SimpleSearchCriteria:AccessLevelCriteriaToString - AccessLevels cannot be null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="61" pos:column="13">Contract</name><op:operator pos:line="61" pos:column="21">.</op:operator><name pos:line="61" pos:column="22">Requires</name></name><argument_list pos:line="61" pos:column="30">(<argument><expr><name><name pos:line="61" pos:column="31">_criteria</name><op:operator pos:line="61" pos:column="40">.</op:operator><name pos:line="61" pos:column="41">AccessLevels</name><op:operator pos:line="61" pos:column="53">.</op:operator><name pos:line="61" pos:column="54">Count</name></name> <op:operator pos:line="61" pos:column="60">&gt;</op:operator> <lit:literal type="number" pos:line="61" pos:column="62">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="61" pos:column="65">"SimpleSearchCriteria:AccessLevelCriteriaToString - AccessLevels cannot be empty!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if pos:line="63" pos:column="13">if <condition pos:line="63" pos:column="16">(<expr><name><name pos:line="63" pos:column="17">_criteria</name><op:operator pos:line="63" pos:column="26">.</op:operator><name pos:line="63" pos:column="27">AccessLevels</name><op:operator pos:line="63" pos:column="39">.</op:operator><name pos:line="63" pos:column="40">Count</name></name> <op:operator pos:line="63" pos:column="46">!=</op:operator> <sizeof pos:line="63" pos:column="49">sizeof<argument_list pos:line="63" pos:column="55">(<argument><expr><name pos:line="63" pos:column="56">AccessLevel</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then pos:line="63" pos:column="69">
            <block pos:line="64" pos:column="13">{

                <expr_stmt><expr><call><name><name pos:line="66" pos:column="17">stringBuilder</name><op:operator pos:line="66" pos:column="30">.</op:operator><name pos:line="66" pos:column="31">Append</name></name><argument_list pos:line="66" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="66" pos:column="38">"("</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="67" pos:column="17">int</name></type> <name pos:line="67" pos:column="21">collectionSize</name> <init pos:line="67" pos:column="36">= <expr><name><name pos:line="67" pos:column="38">_criteria</name><op:operator pos:line="67" pos:column="47">.</op:operator><name pos:line="67" pos:column="48">AccessLevels</name><op:operator pos:line="67" pos:column="60">.</op:operator><name pos:line="67" pos:column="61">Count</name></name></expr></init></decl>;</decl_stmt>
                <foreach pos:line="68" pos:column="17">foreach (<init><decl><type><name pos:line="68" pos:column="26">AccessLevel</name></type> <name pos:line="68" pos:column="38">accessLevel</name> <range pos:line="68" pos:column="50">in <expr><name><name pos:line="68" pos:column="53">_criteria</name><op:operator pos:line="68" pos:column="62">.</op:operator><name pos:line="68" pos:column="63">AccessLevels</name></name></expr></range></decl></init>)
                <block pos:line="69" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="70" pos:column="21">stringBuilder</name><op:operator pos:line="70" pos:column="34">.</op:operator><name pos:line="70" pos:column="35">Append</name></name><argument_list pos:line="70" pos:column="41">(<argument><expr><call><name><name pos:line="70" pos:column="42">SandoField</name><op:operator pos:line="70" pos:column="52">.</op:operator><name pos:line="70" pos:column="53">AccessLevel</name><op:operator pos:line="70" pos:column="64">.</op:operator><name pos:line="70" pos:column="65">ToString</name></name><argument_list pos:line="70" pos:column="73">()</argument_list></call> <op:operator pos:line="70" pos:column="76">+</op:operator> <lit:literal type="string" pos:line="70" pos:column="78">":"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="71" pos:column="21">stringBuilder</name><op:operator pos:line="71" pos:column="34">.</op:operator><name pos:line="71" pos:column="35">Append</name></name><argument_list pos:line="71" pos:column="41">(<argument><expr><call><name><name pos:line="71" pos:column="42">accessLevel</name><op:operator pos:line="71" pos:column="53">.</op:operator><name pos:line="71" pos:column="54">ToString</name></name><argument_list pos:line="71" pos:column="62">()</argument_list></call><op:operator pos:line="71" pos:column="64">.</op:operator><call><name pos:line="71" pos:column="65">ToLower</name><argument_list pos:line="71" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="72" pos:column="21">AppendBoostFactor</name><argument_list pos:line="72" pos:column="38">(<argument><expr><name pos:line="72" pos:column="39">stringBuilder</name></expr></argument>, <argument><expr><call><name><name pos:line="72" pos:column="54">SandoField</name><op:operator pos:line="72" pos:column="64">.</op:operator><name pos:line="72" pos:column="65">AccessLevel</name><op:operator pos:line="72" pos:column="76">.</op:operator><name pos:line="72" pos:column="77">ToString</name></name><argument_list pos:line="72" pos:column="85">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if pos:line="73" pos:column="21">if <condition pos:line="73" pos:column="24">(<expr><name pos:line="73" pos:column="25">collectionSize</name> <op:operator pos:line="73" pos:column="40">&gt;</op:operator> <lit:literal type="number" pos:line="73" pos:column="42">1</lit:literal></expr>)</condition><then pos:line="73" pos:column="44">
                    <block pos:line="74" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="75" pos:column="25">stringBuilder</name><op:operator pos:line="75" pos:column="38">.</op:operator><name pos:line="75" pos:column="39">Append</name></name><argument_list pos:line="75" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="75" pos:column="46">" OR "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <expr_stmt><expr><op:operator pos:line="77" pos:column="21">--</op:operator><name pos:line="77" pos:column="23">collectionSize</name></expr>;</expr_stmt>
                }</block></foreach>
                <expr_stmt><expr><call><name><name pos:line="79" pos:column="17">stringBuilder</name><op:operator pos:line="79" pos:column="30">.</op:operator><name pos:line="79" pos:column="31">Append</name></name><argument_list pos:line="79" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="79" pos:column="38">")"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="83" pos:column="9">private</specifier> <name pos:line="83" pos:column="17">void</name></type> <name pos:line="83" pos:column="22">ProgramElementTypeCriteriaToString</name><parameter_list pos:line="83" pos:column="56">(<param><decl><type><name pos:line="83" pos:column="57">StringBuilder</name></type> <name pos:line="83" pos:column="71">stringBuilder</name></decl></param>)</parameter_list>
        <block pos:line="84" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="85" pos:column="13">Contract</name><op:operator pos:line="85" pos:column="21">.</op:operator><name pos:line="85" pos:column="22">Requires</name></name><argument_list pos:line="85" pos:column="30">(<argument><expr><name><name pos:line="85" pos:column="31">_criteria</name><op:operator pos:line="85" pos:column="40">.</op:operator><name pos:line="85" pos:column="41">ProgramElementTypes</name></name> <op:operator pos:line="85" pos:column="61">!=</op:operator> <name pos:line="85" pos:column="64">null</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="85" pos:column="70">"SimpleSearchCriteria:ProgramElementTypeCriteriaToString - ProgramElementTypes cannot be null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="86" pos:column="13">Contract</name><op:operator pos:line="86" pos:column="21">.</op:operator><name pos:line="86" pos:column="22">Requires</name></name><argument_list pos:line="86" pos:column="30">(<argument><expr><name><name pos:line="86" pos:column="31">_criteria</name><op:operator pos:line="86" pos:column="40">.</op:operator><name pos:line="86" pos:column="41">ProgramElementTypes</name><op:operator pos:line="86" pos:column="60">.</op:operator><name pos:line="86" pos:column="61">Count</name></name> <op:operator pos:line="86" pos:column="67">&gt;</op:operator> <lit:literal type="number" pos:line="86" pos:column="69">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="86" pos:column="72">"SimpleSearchCriteria:ProgramElementTypeCriteriaToString - ProgramElementTypes cannot be empty!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="88" pos:column="13">stringBuilder</name><op:operator pos:line="88" pos:column="26">.</op:operator><name pos:line="88" pos:column="27">Append</name></name><argument_list pos:line="88" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="88" pos:column="34">"("</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="89" pos:column="13">int</name></type> <name pos:line="89" pos:column="17">collectionSize</name> <init pos:line="89" pos:column="32">= <expr><name><name pos:line="89" pos:column="34">_criteria</name><op:operator pos:line="89" pos:column="43">.</op:operator><name pos:line="89" pos:column="44">ProgramElementTypes</name><op:operator pos:line="89" pos:column="63">.</op:operator><name pos:line="89" pos:column="64">Count</name></name></expr></init></decl>;</decl_stmt>
            <foreach pos:line="90" pos:column="13">foreach (<init><decl><type><name pos:line="90" pos:column="22">ProgramElementType</name></type> <name pos:line="90" pos:column="41">programElementType</name> <range pos:line="90" pos:column="60">in <expr><name><name pos:line="90" pos:column="63">_criteria</name><op:operator pos:line="90" pos:column="72">.</op:operator><name pos:line="90" pos:column="73">ProgramElementTypes</name></name></expr></range></decl></init>)
            <block pos:line="91" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="92" pos:column="17">stringBuilder</name><op:operator pos:line="92" pos:column="30">.</op:operator><name pos:line="92" pos:column="31">Append</name></name><argument_list pos:line="92" pos:column="37">(<argument><expr><call><name><name pos:line="92" pos:column="38">SandoField</name><op:operator pos:line="92" pos:column="48">.</op:operator><name pos:line="92" pos:column="49">ProgramElementType</name><op:operator pos:line="92" pos:column="67">.</op:operator><name pos:line="92" pos:column="68">ToString</name></name><argument_list pos:line="92" pos:column="76">()</argument_list></call> <op:operator pos:line="92" pos:column="79">+</op:operator> <lit:literal type="string" pos:line="92" pos:column="81">":"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="93" pos:column="17">string</name></type> <name pos:line="93" pos:column="24">value</name> <init pos:line="93" pos:column="30">= <expr><call><name><name pos:line="93" pos:column="32">programElementType</name><op:operator pos:line="93" pos:column="50">.</op:operator><name pos:line="93" pos:column="51">ToString</name></name><argument_list pos:line="93" pos:column="59">()</argument_list></call><op:operator pos:line="93" pos:column="61">.</op:operator><call><name pos:line="93" pos:column="62">ToLower</name><argument_list pos:line="93" pos:column="69">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="94" pos:column="17">stringBuilder</name><op:operator pos:line="94" pos:column="30">.</op:operator><name pos:line="94" pos:column="31">Append</name></name><argument_list pos:line="94" pos:column="37">(<argument><expr><name pos:line="94" pos:column="38">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="95" pos:column="17">AppendBoostFactor</name><argument_list pos:line="95" pos:column="34">(<argument><expr><name pos:line="95" pos:column="35">stringBuilder</name></expr></argument>, <argument><expr><call><name><name pos:line="95" pos:column="50">SandoField</name><op:operator pos:line="95" pos:column="60">.</op:operator><name pos:line="95" pos:column="61">ProgramElementType</name><op:operator pos:line="95" pos:column="79">.</op:operator><name pos:line="95" pos:column="80">ToString</name></name><argument_list pos:line="95" pos:column="88">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="96" pos:column="17">if <condition pos:line="96" pos:column="20">(<expr><name pos:line="96" pos:column="21">collectionSize</name> <op:operator pos:line="96" pos:column="36">&gt;</op:operator> <lit:literal type="number" pos:line="96" pos:column="38">1</lit:literal></expr>)</condition><then pos:line="96" pos:column="40">
                <block pos:line="97" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="98" pos:column="21">stringBuilder</name><op:operator pos:line="98" pos:column="34">.</op:operator><name pos:line="98" pos:column="35">Append</name></name><argument_list pos:line="98" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="98" pos:column="42">" OR "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><op:operator pos:line="100" pos:column="17">--</op:operator><name pos:line="100" pos:column="19">collectionSize</name></expr>;</expr_stmt>
            }</block></foreach>
            <expr_stmt><expr><call><name><name pos:line="102" pos:column="13">stringBuilder</name><op:operator pos:line="102" pos:column="26">.</op:operator><name pos:line="102" pos:column="27">Append</name></name><argument_list pos:line="102" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="102" pos:column="34">")"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="105" pos:column="9">private</specifier> <name pos:line="105" pos:column="17">void</name></type> <name pos:line="105" pos:column="22">LocationCriteriaToString</name><parameter_list pos:line="105" pos:column="46">(<param><decl><type><name pos:line="105" pos:column="47">StringBuilder</name></type> <name pos:line="105" pos:column="61">stringBuilder</name></decl></param>)</parameter_list>
        <block pos:line="106" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="107" pos:column="13">Contract</name><op:operator pos:line="107" pos:column="21">.</op:operator><name pos:line="107" pos:column="22">Requires</name></name><argument_list pos:line="107" pos:column="30">(<argument><expr><name><name pos:line="107" pos:column="31">_criteria</name><op:operator pos:line="107" pos:column="40">.</op:operator><name pos:line="107" pos:column="41">Locations</name></name> <op:operator pos:line="107" pos:column="51">!=</op:operator> <name pos:line="107" pos:column="54">null</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="107" pos:column="60">"SimpleSearchCriteria:LocationCriteriaToString - Locations cannot be null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="108" pos:column="13">Contract</name><op:operator pos:line="108" pos:column="21">.</op:operator><name pos:line="108" pos:column="22">Requires</name></name><argument_list pos:line="108" pos:column="30">(<argument><expr><name><name pos:line="108" pos:column="31">_criteria</name><op:operator pos:line="108" pos:column="40">.</op:operator><name pos:line="108" pos:column="41">Locations</name><op:operator pos:line="108" pos:column="50">.</op:operator><name pos:line="108" pos:column="51">Count</name></name> <op:operator pos:line="108" pos:column="57">&gt;</op:operator> <lit:literal type="number" pos:line="108" pos:column="59">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="108" pos:column="62">"SimpleSearchCriteria:LocationCriteriaToString - Locations cannot be empty!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="110" pos:column="13">stringBuilder</name><op:operator pos:line="110" pos:column="26">.</op:operator><name pos:line="110" pos:column="27">Append</name></name><argument_list pos:line="110" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="110" pos:column="34">"("</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="111" pos:column="13">int</name></type> <name pos:line="111" pos:column="17">collectionSize</name> <init pos:line="111" pos:column="32">= <expr><name><name pos:line="111" pos:column="34">_criteria</name><op:operator pos:line="111" pos:column="43">.</op:operator><name pos:line="111" pos:column="44">Locations</name><op:operator pos:line="111" pos:column="53">.</op:operator><name pos:line="111" pos:column="54">Count</name></name></expr></init></decl>;</decl_stmt>
            <foreach pos:line="112" pos:column="13">foreach (<init><decl><type><name pos:line="112" pos:column="22">string</name></type> <name pos:line="112" pos:column="29">location</name> <range pos:line="112" pos:column="38">in <expr><name><name pos:line="112" pos:column="41">_criteria</name><op:operator pos:line="112" pos:column="50">.</op:operator><name pos:line="112" pos:column="51">Locations</name></name></expr></range></decl></init>)
            <block pos:line="113" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="114" pos:column="17">stringBuilder</name><op:operator pos:line="114" pos:column="30">.</op:operator><name pos:line="114" pos:column="31">Append</name></name><argument_list pos:line="114" pos:column="37">(<argument><expr><call><name><name pos:line="114" pos:column="38">SandoField</name><op:operator pos:line="114" pos:column="48">.</op:operator><name pos:line="114" pos:column="49">FullFilePath</name><op:operator pos:line="114" pos:column="61">.</op:operator><name pos:line="114" pos:column="62">ToString</name></name><argument_list pos:line="114" pos:column="70">()</argument_list></call> <op:operator pos:line="114" pos:column="73">+</op:operator> <lit:literal type="string" pos:line="114" pos:column="75">":"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="115" pos:column="17">stringBuilder</name><op:operator pos:line="115" pos:column="30">.</op:operator><name pos:line="115" pos:column="31">Append</name></name><argument_list pos:line="115" pos:column="37">(<argument><expr><call><name><name pos:line="115" pos:column="38">String</name><op:operator pos:line="115" pos:column="44">.</op:operator><name pos:line="115" pos:column="45">IsNullOrWhiteSpace</name></name><argument_list pos:line="115" pos:column="63">(<argument><expr><name pos:line="115" pos:column="64">location</name></expr></argument>)</argument_list></call> <op:operator pos:line="115" pos:column="74">?</op:operator> <lit:literal type="string" pos:line="115" pos:column="76">"*"</lit:literal> <op:operator pos:line="115" pos:column="80">:</op:operator> <lit:literal type="char" pos:line="115" pos:column="82">'\"'</lit:literal> <op:operator pos:line="115" pos:column="87">+</op:operator> <name pos:line="115" pos:column="89">location</name> <op:operator pos:line="115" pos:column="98">+</op:operator> <lit:literal type="char" pos:line="115" pos:column="100">'\"'</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="116" pos:column="17">AppendBoostFactor</name><argument_list pos:line="116" pos:column="34">(<argument><expr><name pos:line="116" pos:column="35">stringBuilder</name></expr></argument>, <argument><expr><call><name><name pos:line="116" pos:column="50">SandoField</name><op:operator pos:line="116" pos:column="60">.</op:operator><name pos:line="116" pos:column="61">FullFilePath</name><op:operator pos:line="116" pos:column="73">.</op:operator><name pos:line="116" pos:column="74">ToString</name></name><argument_list pos:line="116" pos:column="82">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="117" pos:column="17">if <condition pos:line="117" pos:column="20">(<expr><name pos:line="117" pos:column="21">collectionSize</name> <op:operator pos:line="117" pos:column="36">&gt;</op:operator> <lit:literal type="number" pos:line="117" pos:column="38">1</lit:literal></expr>)</condition><then pos:line="117" pos:column="40">
                <block pos:line="118" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="119" pos:column="21">stringBuilder</name><op:operator pos:line="119" pos:column="34">.</op:operator><name pos:line="119" pos:column="35">Append</name></name><argument_list pos:line="119" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="119" pos:column="42">" OR "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><op:operator pos:line="121" pos:column="17">--</op:operator><name pos:line="121" pos:column="19">collectionSize</name></expr>;</expr_stmt>
            }</block></foreach>
            <expr_stmt><expr><call><name><name pos:line="123" pos:column="13">stringBuilder</name><op:operator pos:line="123" pos:column="26">.</op:operator><name pos:line="123" pos:column="27">Append</name></name><argument_list pos:line="123" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="123" pos:column="34">")"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="126" pos:column="9">private</specifier> <name pos:line="126" pos:column="17">void</name></type> <name pos:line="126" pos:column="22">FileExtensionsCriteriaToString</name><parameter_list pos:line="126" pos:column="52">(<param><decl><type><name pos:line="126" pos:column="53">StringBuilder</name></type> <name pos:line="126" pos:column="67">stringBuilder</name></decl></param>)</parameter_list>
        <block pos:line="127" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="128" pos:column="13">Contract</name><op:operator pos:line="128" pos:column="21">.</op:operator><name pos:line="128" pos:column="22">Requires</name></name><argument_list pos:line="128" pos:column="30">(<argument><expr><name><name pos:line="128" pos:column="31">_criteria</name><op:operator pos:line="128" pos:column="40">.</op:operator><name pos:line="128" pos:column="41">FileExtensions</name></name> <op:operator pos:line="128" pos:column="56">!=</op:operator> <name pos:line="128" pos:column="59">null</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="128" pos:column="65">"SimpleSearchCriteria:LFileExtensionsCriteriaToString - FileExtensions cannot be null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="129" pos:column="13">Contract</name><op:operator pos:line="129" pos:column="21">.</op:operator><name pos:line="129" pos:column="22">Requires</name></name><argument_list pos:line="129" pos:column="30">(<argument><expr><name><name pos:line="129" pos:column="31">_criteria</name><op:operator pos:line="129" pos:column="40">.</op:operator><name pos:line="129" pos:column="41">FileExtensions</name><op:operator pos:line="129" pos:column="55">.</op:operator><name pos:line="129" pos:column="56">Count</name></name> <op:operator pos:line="129" pos:column="62">&gt;</op:operator> <lit:literal type="number" pos:line="129" pos:column="64">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="129" pos:column="67">"SimpleSearchCriteria:FileExtensionsCriteriaToString - FileExtensions cannot be empty!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="131" pos:column="13">stringBuilder</name><op:operator pos:line="131" pos:column="26">.</op:operator><name pos:line="131" pos:column="27">Append</name></name><argument_list pos:line="131" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="131" pos:column="34">"("</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="132" pos:column="13">int</name></type> <name pos:line="132" pos:column="17">collectionSize</name> <init pos:line="132" pos:column="32">= <expr><name><name pos:line="132" pos:column="34">_criteria</name><op:operator pos:line="132" pos:column="43">.</op:operator><name pos:line="132" pos:column="44">FileExtensions</name><op:operator pos:line="132" pos:column="58">.</op:operator><name pos:line="132" pos:column="59">Count</name></name></expr></init></decl>;</decl_stmt>
            <foreach pos:line="133" pos:column="13">foreach (<init><decl><type><name pos:line="133" pos:column="22">var</name></type> <name pos:line="133" pos:column="26">fileExtension</name> <range pos:line="133" pos:column="40">in <expr><name><name pos:line="133" pos:column="43">_criteria</name><op:operator pos:line="133" pos:column="52">.</op:operator><name pos:line="133" pos:column="53">FileExtensions</name></name></expr></range></decl></init>)
            <block pos:line="134" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="135" pos:column="17">stringBuilder</name><op:operator pos:line="135" pos:column="30">.</op:operator><name pos:line="135" pos:column="31">Append</name></name><argument_list pos:line="135" pos:column="37">(<argument><expr><call><name><name pos:line="135" pos:column="38">SandoField</name><op:operator pos:line="135" pos:column="48">.</op:operator><name pos:line="135" pos:column="49">FileExtension</name><op:operator pos:line="135" pos:column="62">.</op:operator><name pos:line="135" pos:column="63">ToString</name></name><argument_list pos:line="135" pos:column="71">()</argument_list></call> <op:operator pos:line="135" pos:column="74">+</op:operator> <lit:literal type="string" pos:line="135" pos:column="76">":"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="136" pos:column="17">stringBuilder</name><op:operator pos:line="136" pos:column="30">.</op:operator><name pos:line="136" pos:column="31">Append</name></name><argument_list pos:line="136" pos:column="37">(<argument><expr><lit:literal type="char" pos:line="136" pos:column="38">'\"'</lit:literal> <op:operator pos:line="136" pos:column="43">+</op:operator> <name pos:line="136" pos:column="45">fileExtension</name> <op:operator pos:line="136" pos:column="59">+</op:operator> <lit:literal type="char" pos:line="136" pos:column="61">'\"'</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="137" pos:column="17">AppendBoostFactor</name><argument_list pos:line="137" pos:column="34">(<argument><expr><name pos:line="137" pos:column="35">stringBuilder</name></expr></argument>, <argument><expr><call><name><name pos:line="137" pos:column="50">SandoField</name><op:operator pos:line="137" pos:column="60">.</op:operator><name pos:line="137" pos:column="61">FileExtension</name><op:operator pos:line="137" pos:column="74">.</op:operator><name pos:line="137" pos:column="75">ToString</name></name><argument_list pos:line="137" pos:column="83">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="138" pos:column="17">if <condition pos:line="138" pos:column="20">(<expr><name pos:line="138" pos:column="21">collectionSize</name> <op:operator pos:line="138" pos:column="36">&gt;</op:operator> <lit:literal type="number" pos:line="138" pos:column="38">1</lit:literal></expr>)</condition><then pos:line="138" pos:column="40">
                <block pos:line="139" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="140" pos:column="21">stringBuilder</name><op:operator pos:line="140" pos:column="34">.</op:operator><name pos:line="140" pos:column="35">Append</name></name><argument_list pos:line="140" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="140" pos:column="42">" OR "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><op:operator pos:line="142" pos:column="17">--</op:operator><name pos:line="142" pos:column="19">collectionSize</name></expr>;</expr_stmt>
            }</block></foreach>
            <expr_stmt><expr><call><name><name pos:line="144" pos:column="13">stringBuilder</name><op:operator pos:line="144" pos:column="26">.</op:operator><name pos:line="144" pos:column="27">Append</name></name><argument_list pos:line="144" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="144" pos:column="34">")"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="147" pos:column="9">private</specifier> <name pos:line="147" pos:column="17">void</name></type> <name pos:line="147" pos:column="22">UsageTypeCriteriaToString</name><parameter_list pos:line="147" pos:column="47">(<param><decl><type><name pos:line="147" pos:column="48">StringBuilder</name></type> <name pos:line="147" pos:column="62">stringBuilder</name></decl></param>)</parameter_list>
        <block pos:line="148" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="149" pos:column="13">Contract</name><op:operator pos:line="149" pos:column="21">.</op:operator><name pos:line="149" pos:column="22">Requires</name></name><argument_list pos:line="149" pos:column="30">(<argument><expr><name><name pos:line="149" pos:column="31">_criteria</name><op:operator pos:line="149" pos:column="40">.</op:operator><name pos:line="149" pos:column="41">UsageTypes</name></name> <op:operator pos:line="149" pos:column="52">!=</op:operator> <name pos:line="149" pos:column="55">null</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="149" pos:column="61">"SimpleSearchCriteria:UsageTypeCriteriaToString - UsageTypes cannot be null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="150" pos:column="13">Contract</name><op:operator pos:line="150" pos:column="21">.</op:operator><name pos:line="150" pos:column="22">Requires</name></name><argument_list pos:line="150" pos:column="30">(<argument><expr><op:operator pos:line="150" pos:column="31">!</op:operator><name><name pos:line="150" pos:column="32">_criteria</name><op:operator pos:line="150" pos:column="41">.</op:operator><name pos:line="150" pos:column="42">SearchByUsageType</name></name> <op:operator pos:line="150" pos:column="60">||</op:operator> <name><name pos:line="150" pos:column="63">_criteria</name><op:operator pos:line="150" pos:column="72">.</op:operator><name pos:line="150" pos:column="73">UsageTypes</name><op:operator pos:line="150" pos:column="83">.</op:operator><name pos:line="150" pos:column="84">Count</name></name> <op:operator pos:line="150" pos:column="90">&gt;</op:operator> <lit:literal type="number" pos:line="150" pos:column="92">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="150" pos:column="95">"SimpleSearchCriteria:UsageTypeCriteriaToString - UsageTypes cannot be empty!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if pos:line="152" pos:column="13">if <condition pos:line="152" pos:column="16">(<expr><name><name pos:line="152" pos:column="17">_criteria</name><op:operator pos:line="152" pos:column="26">.</op:operator><name pos:line="152" pos:column="27">SearchTerms</name><op:operator pos:line="152" pos:column="38">.</op:operator><name pos:line="152" pos:column="39">Count</name></name> <op:operator pos:line="152" pos:column="45">==</op:operator> <lit:literal type="number" pos:line="152" pos:column="48">0</lit:literal></expr>)</condition><then pos:line="152" pos:column="50">
                <return pos:line="153" pos:column="17">return;</return></then></if>

            <if pos:line="155" pos:column="13">if <condition pos:line="155" pos:column="16">(<expr><name><name pos:line="155" pos:column="17">stringBuilder</name><op:operator pos:line="155" pos:column="30">.</op:operator><name pos:line="155" pos:column="31">Length</name></name> <op:operator pos:line="155" pos:column="38">&gt;</op:operator> <lit:literal type="number" pos:line="155" pos:column="40">0</lit:literal></expr>)</condition><then pos:line="155" pos:column="42">
                <expr_stmt><expr><call><name><name pos:line="156" pos:column="17">stringBuilder</name><op:operator pos:line="156" pos:column="30">.</op:operator><name pos:line="156" pos:column="31">Append</name></name><argument_list pos:line="156" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="156" pos:column="38">" AND "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

            <expr_stmt><expr><call><name><name pos:line="158" pos:column="13">stringBuilder</name><op:operator pos:line="158" pos:column="26">.</op:operator><name pos:line="158" pos:column="27">Append</name></name><argument_list pos:line="158" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="158" pos:column="34">"("</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if pos:line="159" pos:column="13">if <condition pos:line="159" pos:column="16">(<expr><op:operator pos:line="159" pos:column="17">!</op:operator><name><name pos:line="159" pos:column="18">_criteria</name><op:operator pos:line="159" pos:column="27">.</op:operator><name pos:line="159" pos:column="28">SearchByUsageType</name></name></expr>)</condition><then pos:line="159" pos:column="46">
            <block pos:line="160" pos:column="13">{
                <foreach pos:line="161" pos:column="17">foreach (<init><decl><type><name pos:line="161" pos:column="26">UsageType</name></type> <name pos:line="161" pos:column="36">usageType</name> <range pos:line="161" pos:column="46">in <expr><call><name><name pos:line="161" pos:column="49">Enum</name><op:operator pos:line="161" pos:column="53">.</op:operator><name pos:line="161" pos:column="54">GetValues</name></name><argument_list pos:line="161" pos:column="63">(<argument><expr><call><name pos:line="161" pos:column="64">typeof</name><argument_list pos:line="161" pos:column="70">(<argument><expr><name pos:line="161" pos:column="71">UsageType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></range></decl></init>)
                <block pos:line="162" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="163" pos:column="21">_criteria</name><op:operator pos:line="163" pos:column="30">.</op:operator><name pos:line="163" pos:column="31">UsageTypes</name><op:operator pos:line="163" pos:column="41">.</op:operator><name pos:line="163" pos:column="42">Add</name></name><argument_list pos:line="163" pos:column="45">(<argument><expr><name pos:line="163" pos:column="46">usageType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>
            }</block></then></if>
            <decl_stmt><decl><type><name pos:line="166" pos:column="13">int</name></type> <name pos:line="166" pos:column="17">searchTermsLeft</name> <init pos:line="166" pos:column="33">= <expr><name><name pos:line="166" pos:column="35">_criteria</name><op:operator pos:line="166" pos:column="44">.</op:operator><name pos:line="166" pos:column="45">SearchTerms</name><op:operator pos:line="166" pos:column="56">.</op:operator><name pos:line="166" pos:column="57">Count</name></name></expr></init></decl>;</decl_stmt>
            <foreach pos:line="167" pos:column="13">foreach (<init><decl><type><name pos:line="167" pos:column="22">string</name></type> <name pos:line="167" pos:column="29">searchTerm</name> <range pos:line="167" pos:column="40">in <expr><name><name pos:line="167" pos:column="43">_criteria</name><op:operator pos:line="167" pos:column="52">.</op:operator><name pos:line="167" pos:column="53">SearchTerms</name></name></expr></range></decl></init>)
            <block pos:line="168" pos:column="13">{
                <comment type="line" pos:line="169" pos:column="17">//stringBuilder.Append("(");</comment>
                <decl_stmt><decl><type><name pos:line="170" pos:column="17">bool</name></type> <name pos:line="170" pos:column="22">notCondition</name> <init pos:line="170" pos:column="35">= <expr><lit:literal type="boolean" pos:line="170" pos:column="37">false</lit:literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="171" pos:column="17">string</name></type> <name pos:line="171" pos:column="24">searchTermEscaped</name> <init pos:line="171" pos:column="42">= <expr><name pos:line="171" pos:column="44">searchTerm</name></expr></init></decl>;</decl_stmt>
                <if pos:line="172" pos:column="17">if <condition pos:line="172" pos:column="20">(<expr><call><name><name pos:line="172" pos:column="21">searchTermEscaped</name><op:operator pos:line="172" pos:column="38">.</op:operator><name pos:line="172" pos:column="39">StartsWith</name></name><argument_list pos:line="172" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="172" pos:column="50">"-"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="172" pos:column="55">
                <block pos:line="173" pos:column="17">{
                    <expr_stmt><expr><name pos:line="174" pos:column="21">notCondition</name> <op:operator pos:line="174" pos:column="34">=</op:operator> <lit:literal type="boolean" pos:line="174" pos:column="36">true</lit:literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="175" pos:column="21">searchTermEscaped</name> <op:operator pos:line="175" pos:column="39">=</op:operator> <call><name><name pos:line="175" pos:column="41">searchTerm</name><op:operator pos:line="175" pos:column="51">.</op:operator><name pos:line="175" pos:column="52">Substring</name></name><argument_list pos:line="175" pos:column="61">(<argument><expr><lit:literal type="number" pos:line="175" pos:column="62">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="177" pos:column="17">else
                <block pos:line="178" pos:column="17">{
                    <expr_stmt><expr><name pos:line="179" pos:column="21">searchTermEscaped</name> <op:operator pos:line="179" pos:column="39">=</op:operator> <call><name pos:line="179" pos:column="41">EscapeForLucene</name><argument_list pos:line="179" pos:column="56">(<argument><expr><name pos:line="179" pos:column="57">searchTermEscaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <decl_stmt><decl><type><name pos:line="181" pos:column="17">int</name></type> <name pos:line="181" pos:column="21">usageTypesLeft</name> <init pos:line="181" pos:column="36">= <expr><name><name pos:line="181" pos:column="38">_criteria</name><op:operator pos:line="181" pos:column="47">.</op:operator><name pos:line="181" pos:column="48">UsageTypes</name><op:operator pos:line="181" pos:column="58">.</op:operator><name pos:line="181" pos:column="59">Count</name></name></expr></init></decl>;</decl_stmt>
                <foreach pos:line="182" pos:column="17">foreach (<init><decl><type><name pos:line="182" pos:column="26">UsageType</name></type> <name pos:line="182" pos:column="36">usageType</name> <range pos:line="182" pos:column="46">in <expr><name><name pos:line="182" pos:column="49">_criteria</name><op:operator pos:line="182" pos:column="58">.</op:operator><name pos:line="182" pos:column="59">UsageTypes</name></name></expr></range></decl></init>)
                <block pos:line="183" pos:column="17">{
                    <if pos:line="184" pos:column="21">if <condition pos:line="184" pos:column="24">(<expr><name pos:line="184" pos:column="25">notCondition</name></expr>)</condition><then pos:line="184" pos:column="38">
                        <expr_stmt><expr><call><name><name pos:line="185" pos:column="25">stringBuilder</name><op:operator pos:line="185" pos:column="38">.</op:operator><name pos:line="185" pos:column="39">Append</name></name><argument_list pos:line="185" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="185" pos:column="46">" NOT "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                    <expr_stmt><expr><call><name pos:line="186" pos:column="21">SingleUsageTypeCriteriaToString</name><argument_list pos:line="186" pos:column="52">(<argument><expr><name pos:line="186" pos:column="53">stringBuilder</name></expr></argument>, <argument><expr><name pos:line="186" pos:column="68">usageType</name></expr></argument>, <argument><expr><name pos:line="186" pos:column="79">searchTermEscaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if pos:line="187" pos:column="21">if <condition pos:line="187" pos:column="24">(<expr><name pos:line="187" pos:column="25">usageTypesLeft</name> <op:operator pos:line="187" pos:column="40">&gt;</op:operator> <lit:literal type="number" pos:line="187" pos:column="42">1</lit:literal> <op:operator pos:line="187" pos:column="44">&amp;&amp;</op:operator> <op:operator pos:line="187" pos:column="47">!</op:operator><name pos:line="187" pos:column="48">notCondition</name></expr>)</condition><then pos:line="187" pos:column="61">
                    <block pos:line="188" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="189" pos:column="25">stringBuilder</name><op:operator pos:line="189" pos:column="38">.</op:operator><name pos:line="189" pos:column="39">Append</name></name><argument_list pos:line="189" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="189" pos:column="46">" OR "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <expr_stmt><expr><op:operator pos:line="191" pos:column="21">--</op:operator><name pos:line="191" pos:column="23">usageTypesLeft</name></expr>;</expr_stmt>
                }</block></foreach>
                <if pos:line="193" pos:column="17">if <condition pos:line="193" pos:column="20">(<expr><name pos:line="193" pos:column="21">searchTermsLeft</name> <op:operator pos:line="193" pos:column="37">&gt;</op:operator> <lit:literal type="number" pos:line="193" pos:column="39">1</lit:literal></expr>)</condition><then pos:line="193" pos:column="41">
                <block pos:line="194" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="195" pos:column="21">stringBuilder</name><op:operator pos:line="195" pos:column="34">.</op:operator><name pos:line="195" pos:column="35">Append</name></name><argument_list pos:line="195" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="195" pos:column="42">" OR "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><op:operator pos:line="197" pos:column="17">--</op:operator><name pos:line="197" pos:column="19">searchTermsLeft</name></expr>;</expr_stmt>
            }</block></foreach>
            <expr_stmt><expr><call><name><name pos:line="199" pos:column="13">stringBuilder</name><op:operator pos:line="199" pos:column="26">.</op:operator><name pos:line="199" pos:column="27">Append</name></name><argument_list pos:line="199" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="199" pos:column="34">")"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="202" pos:column="9">private</specifier> <specifier pos:line="202" pos:column="17">static</specifier> <name pos:line="202" pos:column="24">string</name></type> <name pos:line="202" pos:column="31">EscapeForLucene</name><parameter_list pos:line="202" pos:column="46">(<param><decl><type><name pos:line="202" pos:column="47">string</name></type> <name pos:line="202" pos:column="54">searchTermEscaped</name></decl></param>)</parameter_list>
        <block pos:line="203" pos:column="9">{
            <if pos:line="204" pos:column="13">if <condition pos:line="204" pos:column="16">(<expr><call><name><name pos:line="204" pos:column="17">searchTermEscaped</name><op:operator pos:line="204" pos:column="34">.</op:operator><name pos:line="204" pos:column="35">StartsWith</name></name><argument_list pos:line="204" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="204" pos:column="46">"\""</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="204" pos:column="52">&amp;&amp;</op:operator> <call><name><name pos:line="204" pos:column="55">searchTermEscaped</name><op:operator pos:line="204" pos:column="72">.</op:operator><name pos:line="204" pos:column="73">EndsWith</name></name><argument_list pos:line="204" pos:column="81">(<argument><expr><lit:literal type="string" pos:line="204" pos:column="82">"\""</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="204" pos:column="88">
            <block pos:line="205" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="206" pos:column="17">var</name></type> <name pos:line="206" pos:column="21">toAdd</name> <init pos:line="206" pos:column="27">= <expr><call><name><name pos:line="206" pos:column="29">searchTermEscaped</name><op:operator pos:line="206" pos:column="46">.</op:operator><name pos:line="206" pos:column="47">Substring</name></name><argument_list pos:line="206" pos:column="56">(<argument><expr><lit:literal type="number" pos:line="206" pos:column="57">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name pos:line="207" pos:column="17">toAdd</name> <op:operator pos:line="207" pos:column="23">=</op:operator> <call><name><name pos:line="207" pos:column="25">toAdd</name><op:operator pos:line="207" pos:column="30">.</op:operator><name pos:line="207" pos:column="31">Substring</name></name><argument_list pos:line="207" pos:column="40">(<argument><expr><lit:literal type="number" pos:line="207" pos:column="41">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="207" pos:column="44">toAdd</name><op:operator pos:line="207" pos:column="49">.</op:operator><name pos:line="207" pos:column="50">Length</name></name> <op:operator pos:line="207" pos:column="57">-</op:operator> <lit:literal type="number" pos:line="207" pos:column="59">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="208" pos:column="17">searchTermEscaped</name> <op:operator pos:line="208" pos:column="35">=</op:operator> <lit:literal type="string" pos:line="208" pos:column="37">"*"</lit:literal> <op:operator pos:line="208" pos:column="41">+</op:operator> <name pos:line="208" pos:column="43">toAdd</name> <op:operator pos:line="208" pos:column="49">+</op:operator> <lit:literal type="string" pos:line="208" pos:column="51">"*"</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="209" pos:column="17">searchTermEscaped</name> <op:operator pos:line="209" pos:column="35">=</op:operator> <call><name pos:line="209" pos:column="37">EscapeChars</name><argument_list pos:line="209" pos:column="48">(<argument><expr><name pos:line="209" pos:column="49">searchTermEscaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                
            }</block></then></if>
            <return pos:line="211" pos:column="13">return <expr><name pos:line="211" pos:column="20">searchTermEscaped</name></expr>;</return>
            
        }</block></function>

 
        <function><type><specifier pos:line="216" pos:column="9">public</specifier> <specifier pos:line="216" pos:column="16">static</specifier> <name pos:line="216" pos:column="23">string</name></type> <name pos:line="216" pos:column="30">EscapeChars</name><parameter_list pos:line="216" pos:column="41">(<param><decl><type><name pos:line="216" pos:column="42">string</name></type> <name pos:line="216" pos:column="49">searchTerm</name></decl></param>)</parameter_list>
        <block pos:line="217" pos:column="9">{

            <comment type="line" pos:line="219" pos:column="13">//+ - &amp;&amp; || ! ( ) { } [ ] ^ " ~ * ? : \</comment>
            <comment type="line" pos:line="220" pos:column="13">// " ~ * ? : \            </comment>
            <expr_stmt><expr><name pos:line="221" pos:column="13">searchTerm</name> <op:operator pos:line="221" pos:column="24">=</op:operator> <call><name><name pos:line="221" pos:column="26">searchTerm</name><op:operator pos:line="221" pos:column="36">.</op:operator><name pos:line="221" pos:column="37">Replace</name></name><argument_list pos:line="221" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="221" pos:column="45">"+"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="221" pos:column="50">"\\+"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="222" pos:column="13">searchTerm</name> <op:operator pos:line="222" pos:column="24">=</op:operator> <call><name><name pos:line="222" pos:column="26">searchTerm</name><op:operator pos:line="222" pos:column="36">.</op:operator><name pos:line="222" pos:column="37">Replace</name></name><argument_list pos:line="222" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="222" pos:column="45">"-"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="222" pos:column="50">"\\-"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="223" pos:column="13">searchTerm</name> <op:operator pos:line="223" pos:column="24">=</op:operator> <call><name><name pos:line="223" pos:column="26">searchTerm</name><op:operator pos:line="223" pos:column="36">.</op:operator><name pos:line="223" pos:column="37">Replace</name></name><argument_list pos:line="223" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="223" pos:column="45">"&amp;&amp;"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="223" pos:column="51">"\\&amp;\\&amp;"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="224" pos:column="13">searchTerm</name> <op:operator pos:line="224" pos:column="24">=</op:operator> <call><name><name pos:line="224" pos:column="26">searchTerm</name><op:operator pos:line="224" pos:column="36">.</op:operator><name pos:line="224" pos:column="37">Replace</name></name><argument_list pos:line="224" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="224" pos:column="45">"||"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="224" pos:column="51">"\\|\\|"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="225" pos:column="13">searchTerm</name> <op:operator pos:line="225" pos:column="24">=</op:operator> <call><name><name pos:line="225" pos:column="26">searchTerm</name><op:operator pos:line="225" pos:column="36">.</op:operator><name pos:line="225" pos:column="37">Replace</name></name><argument_list pos:line="225" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="225" pos:column="45">"!"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="225" pos:column="50">"\\!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="226" pos:column="13">searchTerm</name> <op:operator pos:line="226" pos:column="24">=</op:operator> <call><name><name pos:line="226" pos:column="26">searchTerm</name><op:operator pos:line="226" pos:column="36">.</op:operator><name pos:line="226" pos:column="37">Replace</name></name><argument_list pos:line="226" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="226" pos:column="45">"("</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="226" pos:column="50">"\\("</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="227" pos:column="13">searchTerm</name> <op:operator pos:line="227" pos:column="24">=</op:operator> <call><name><name pos:line="227" pos:column="26">searchTerm</name><op:operator pos:line="227" pos:column="36">.</op:operator><name pos:line="227" pos:column="37">Replace</name></name><argument_list pos:line="227" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="227" pos:column="45">")"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="227" pos:column="50">"\\)"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="228" pos:column="13">searchTerm</name> <op:operator pos:line="228" pos:column="24">=</op:operator> <call><name><name pos:line="228" pos:column="26">searchTerm</name><op:operator pos:line="228" pos:column="36">.</op:operator><name pos:line="228" pos:column="37">Replace</name></name><argument_list pos:line="228" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="228" pos:column="45">"{"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="228" pos:column="50">"\\{"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="229" pos:column="13">searchTerm</name> <op:operator pos:line="229" pos:column="24">=</op:operator> <call><name><name pos:line="229" pos:column="26">searchTerm</name><op:operator pos:line="229" pos:column="36">.</op:operator><name pos:line="229" pos:column="37">Replace</name></name><argument_list pos:line="229" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="229" pos:column="45">"}"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="229" pos:column="50">"\\}"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="230" pos:column="13">searchTerm</name> <op:operator pos:line="230" pos:column="24">=</op:operator> <call><name><name pos:line="230" pos:column="26">searchTerm</name><op:operator pos:line="230" pos:column="36">.</op:operator><name pos:line="230" pos:column="37">Replace</name></name><argument_list pos:line="230" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="230" pos:column="45">"["</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="230" pos:column="50">"\\["</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="231" pos:column="13">searchTerm</name> <op:operator pos:line="231" pos:column="24">=</op:operator> <call><name><name pos:line="231" pos:column="26">searchTerm</name><op:operator pos:line="231" pos:column="36">.</op:operator><name pos:line="231" pos:column="37">Replace</name></name><argument_list pos:line="231" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="231" pos:column="45">"]"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="231" pos:column="50">"\\]"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="232" pos:column="13">searchTerm</name> <op:operator pos:line="232" pos:column="24">=</op:operator> <call><name><name pos:line="232" pos:column="26">searchTerm</name><op:operator pos:line="232" pos:column="36">.</op:operator><name pos:line="232" pos:column="37">Replace</name></name><argument_list pos:line="232" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="232" pos:column="45">"^"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="232" pos:column="50">"\\^"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="233" pos:column="13">searchTerm</name> <op:operator pos:line="233" pos:column="24">=</op:operator> <call><name><name pos:line="233" pos:column="26">searchTerm</name><op:operator pos:line="233" pos:column="36">.</op:operator><name pos:line="233" pos:column="37">Replace</name></name><argument_list pos:line="233" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="233" pos:column="45">"~"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="233" pos:column="50">"\\~"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="234" pos:column="13">searchTerm</name> <op:operator pos:line="234" pos:column="24">=</op:operator> <call><name><name pos:line="234" pos:column="26">searchTerm</name><op:operator pos:line="234" pos:column="36">.</op:operator><name pos:line="234" pos:column="37">Replace</name></name><argument_list pos:line="234" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="234" pos:column="45">":"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="234" pos:column="50">"\\:"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="235" pos:column="13">searchTerm</name> <op:operator pos:line="235" pos:column="24">=</op:operator> <call><name><name pos:line="235" pos:column="26">searchTerm</name><op:operator pos:line="235" pos:column="36">.</op:operator><name pos:line="235" pos:column="37">Replace</name></name><argument_list pos:line="235" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="235" pos:column="45">"?"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="235" pos:column="50">"\\?"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="236" pos:column="13">searchTerm</name> <op:operator pos:line="236" pos:column="24">=</op:operator> <call><name><name pos:line="236" pos:column="26">searchTerm</name><op:operator pos:line="236" pos:column="36">.</op:operator><name pos:line="236" pos:column="37">Replace</name></name><argument_list pos:line="236" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="236" pos:column="45">" "</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="236" pos:column="50">"?"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="237" pos:column="13">return <expr><name pos:line="237" pos:column="20">searchTerm</name></expr>;</return>
        }</block></function>

 

        <function><type><specifier pos:line="242" pos:column="9">private</specifier> <name pos:line="242" pos:column="17">void</name></type> <name pos:line="242" pos:column="22">SingleUsageTypeCriteriaToString</name><parameter_list pos:line="242" pos:column="53">(<param><decl><type><name pos:line="242" pos:column="54">StringBuilder</name></type> <name pos:line="242" pos:column="68">stringBuilder</name></decl></param>, <param><decl><type><name pos:line="242" pos:column="83">UsageType</name></type> <name pos:line="242" pos:column="93">usageType</name></decl></param>, <param><decl><type><name pos:line="242" pos:column="104">string</name></type> <name pos:line="242" pos:column="111">searchTerm</name></decl></param>)</parameter_list>
        <block pos:line="243" pos:column="9">{
            <switch pos:line="244" pos:column="13">switch <condition pos:line="244" pos:column="20">(<expr><name pos:line="244" pos:column="21">usageType</name></expr>)</condition>
            <block pos:line="245" pos:column="13">{
                <case pos:line="246" pos:column="17">case <expr><name><name pos:line="246" pos:column="22">UsageType</name><op:operator pos:line="246" pos:column="31">.</op:operator><name pos:line="246" pos:column="32">Bodies</name></name></expr>:
                    <expr_stmt><expr><call><name><name pos:line="247" pos:column="21">stringBuilder</name><op:operator pos:line="247" pos:column="34">.</op:operator><name pos:line="247" pos:column="35">Append</name></name><argument_list pos:line="247" pos:column="41">(<argument><expr><call><name><name pos:line="247" pos:column="42">SandoField</name><op:operator pos:line="247" pos:column="52">.</op:operator><name pos:line="247" pos:column="53">Body</name><op:operator pos:line="247" pos:column="57">.</op:operator><name pos:line="247" pos:column="58">ToString</name></name><argument_list pos:line="247" pos:column="66">()</argument_list></call> <op:operator pos:line="247" pos:column="69">+</op:operator> <lit:literal type="string" pos:line="247" pos:column="71">":"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="248" pos:column="21">stringBuilder</name><op:operator pos:line="248" pos:column="34">.</op:operator><name pos:line="248" pos:column="35">Append</name></name><argument_list pos:line="248" pos:column="41">(<argument><expr><name pos:line="248" pos:column="42">searchTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="249" pos:column="21">AppendBoostFactor</name><argument_list pos:line="249" pos:column="38">(<argument><expr><name pos:line="249" pos:column="39">stringBuilder</name></expr></argument>, <argument><expr><call><name><name pos:line="249" pos:column="54">SandoField</name><op:operator pos:line="249" pos:column="64">.</op:operator><name pos:line="249" pos:column="65">Body</name><op:operator pos:line="249" pos:column="69">.</op:operator><name pos:line="249" pos:column="70">ToString</name></name><argument_list pos:line="249" pos:column="78">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:line="250" pos:column="21">break;</break>
                </case><case pos:line="251" pos:column="17">case <expr><name><name pos:line="251" pos:column="22">UsageType</name><op:operator pos:line="251" pos:column="31">.</op:operator><name pos:line="251" pos:column="32">Definitions</name></name></expr>:
                    <expr_stmt><expr><call><name><name pos:line="252" pos:column="21">stringBuilder</name><op:operator pos:line="252" pos:column="34">.</op:operator><name pos:line="252" pos:column="35">Append</name></name><argument_list pos:line="252" pos:column="41">(<argument><expr><call><name><name pos:line="252" pos:column="42">SandoField</name><op:operator pos:line="252" pos:column="52">.</op:operator><name pos:line="252" pos:column="53">Name</name><op:operator pos:line="252" pos:column="57">.</op:operator><name pos:line="252" pos:column="58">ToString</name></name><argument_list pos:line="252" pos:column="66">()</argument_list></call> <op:operator pos:line="252" pos:column="69">+</op:operator> <lit:literal type="string" pos:line="252" pos:column="71">":"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="253" pos:column="21">stringBuilder</name><op:operator pos:line="253" pos:column="34">.</op:operator><name pos:line="253" pos:column="35">Append</name></name><argument_list pos:line="253" pos:column="41">(<argument><expr><name pos:line="253" pos:column="42">searchTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="254" pos:column="21">AppendBoostFactor</name><argument_list pos:line="254" pos:column="38">(<argument><expr><name pos:line="254" pos:column="39">stringBuilder</name></expr></argument>, <argument><expr><call><name><name pos:line="254" pos:column="54">SandoField</name><op:operator pos:line="254" pos:column="64">.</op:operator><name pos:line="254" pos:column="65">Name</name><op:operator pos:line="254" pos:column="69">.</op:operator><name pos:line="254" pos:column="70">ToString</name></name><argument_list pos:line="254" pos:column="78">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:line="255" pos:column="21">break;</break>
                </case><case pos:line="256" pos:column="17">case <expr><name><name pos:line="256" pos:column="22">UsageType</name><op:operator pos:line="256" pos:column="31">.</op:operator><name pos:line="256" pos:column="32">ExtendedClasses</name></name></expr>:
                    <expr_stmt><expr><call><name><name pos:line="257" pos:column="21">stringBuilder</name><op:operator pos:line="257" pos:column="34">.</op:operator><name pos:line="257" pos:column="35">Append</name></name><argument_list pos:line="257" pos:column="41">(<argument><expr><call><name><name pos:line="257" pos:column="42">SandoField</name><op:operator pos:line="257" pos:column="52">.</op:operator><name pos:line="257" pos:column="53">ExtendedClasses</name><op:operator pos:line="257" pos:column="68">.</op:operator><name pos:line="257" pos:column="69">ToString</name></name><argument_list pos:line="257" pos:column="77">()</argument_list></call> <op:operator pos:line="257" pos:column="80">+</op:operator> <lit:literal type="string" pos:line="257" pos:column="82">":"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="258" pos:column="21">stringBuilder</name><op:operator pos:line="258" pos:column="34">.</op:operator><name pos:line="258" pos:column="35">Append</name></name><argument_list pos:line="258" pos:column="41">(<argument><expr><name pos:line="258" pos:column="42">searchTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="259" pos:column="21">AppendBoostFactor</name><argument_list pos:line="259" pos:column="38">(<argument><expr><name pos:line="259" pos:column="39">stringBuilder</name></expr></argument>, <argument><expr><call><name><name pos:line="259" pos:column="54">SandoField</name><op:operator pos:line="259" pos:column="64">.</op:operator><name pos:line="259" pos:column="65">ExtendedClasses</name><op:operator pos:line="259" pos:column="80">.</op:operator><name pos:line="259" pos:column="81">ToString</name></name><argument_list pos:line="259" pos:column="89">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:line="260" pos:column="21">break;</break>
                </case><case pos:line="261" pos:column="17">case <expr><name><name pos:line="261" pos:column="22">UsageType</name><op:operator pos:line="261" pos:column="31">.</op:operator><name pos:line="261" pos:column="32">ImplementedInterfaces</name></name></expr>:
                    <expr_stmt><expr><call><name><name pos:line="262" pos:column="21">stringBuilder</name><op:operator pos:line="262" pos:column="34">.</op:operator><name pos:line="262" pos:column="35">Append</name></name><argument_list pos:line="262" pos:column="41">(<argument><expr><call><name><name pos:line="262" pos:column="42">SandoField</name><op:operator pos:line="262" pos:column="52">.</op:operator><name pos:line="262" pos:column="53">ImplementedInterfaces</name><op:operator pos:line="262" pos:column="74">.</op:operator><name pos:line="262" pos:column="75">ToString</name></name><argument_list pos:line="262" pos:column="83">()</argument_list></call> <op:operator pos:line="262" pos:column="86">+</op:operator> <lit:literal type="string" pos:line="262" pos:column="88">":"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="263" pos:column="21">stringBuilder</name><op:operator pos:line="263" pos:column="34">.</op:operator><name pos:line="263" pos:column="35">Append</name></name><argument_list pos:line="263" pos:column="41">(<argument><expr><name pos:line="263" pos:column="42">searchTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="264" pos:column="21">AppendBoostFactor</name><argument_list pos:line="264" pos:column="38">(<argument><expr><name pos:line="264" pos:column="39">stringBuilder</name></expr></argument>, <argument><expr><call><name><name pos:line="264" pos:column="54">SandoField</name><op:operator pos:line="264" pos:column="64">.</op:operator><name pos:line="264" pos:column="65">ImplementedInterfaces</name><op:operator pos:line="264" pos:column="86">.</op:operator><name pos:line="264" pos:column="87">ToString</name></name><argument_list pos:line="264" pos:column="95">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:line="265" pos:column="21">break;</break>
                </case><case pos:line="266" pos:column="17">case <expr><name><name pos:line="266" pos:column="22">UsageType</name><op:operator pos:line="266" pos:column="31">.</op:operator><name pos:line="266" pos:column="32">MethodArguments</name></name></expr>:
                    <expr_stmt><expr><call><name><name pos:line="267" pos:column="21">stringBuilder</name><op:operator pos:line="267" pos:column="34">.</op:operator><name pos:line="267" pos:column="35">Append</name></name><argument_list pos:line="267" pos:column="41">(<argument><expr><call><name><name pos:line="267" pos:column="42">SandoField</name><op:operator pos:line="267" pos:column="52">.</op:operator><name pos:line="267" pos:column="53">Arguments</name><op:operator pos:line="267" pos:column="62">.</op:operator><name pos:line="267" pos:column="63">ToString</name></name><argument_list pos:line="267" pos:column="71">()</argument_list></call> <op:operator pos:line="267" pos:column="74">+</op:operator> <lit:literal type="string" pos:line="267" pos:column="76">":"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="268" pos:column="21">stringBuilder</name><op:operator pos:line="268" pos:column="34">.</op:operator><name pos:line="268" pos:column="35">Append</name></name><argument_list pos:line="268" pos:column="41">(<argument><expr><name pos:line="268" pos:column="42">searchTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="269" pos:column="21">AppendBoostFactor</name><argument_list pos:line="269" pos:column="38">(<argument><expr><name pos:line="269" pos:column="39">stringBuilder</name></expr></argument>, <argument><expr><call><name><name pos:line="269" pos:column="54">SandoField</name><op:operator pos:line="269" pos:column="64">.</op:operator><name pos:line="269" pos:column="65">Arguments</name><op:operator pos:line="269" pos:column="74">.</op:operator><name pos:line="269" pos:column="75">ToString</name></name><argument_list pos:line="269" pos:column="83">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:line="270" pos:column="21">break;</break>
                </case><case pos:line="271" pos:column="17">case <expr><name><name pos:line="271" pos:column="22">UsageType</name><op:operator pos:line="271" pos:column="31">.</op:operator><name pos:line="271" pos:column="32">MethodReturnTypes</name></name></expr>:
                    <expr_stmt><expr><call><name><name pos:line="272" pos:column="21">stringBuilder</name><op:operator pos:line="272" pos:column="34">.</op:operator><name pos:line="272" pos:column="35">Append</name></name><argument_list pos:line="272" pos:column="41">(<argument><expr><call><name><name pos:line="272" pos:column="42">SandoField</name><op:operator pos:line="272" pos:column="52">.</op:operator><name pos:line="272" pos:column="53">ReturnType</name><op:operator pos:line="272" pos:column="63">.</op:operator><name pos:line="272" pos:column="64">ToString</name></name><argument_list pos:line="272" pos:column="72">()</argument_list></call> <op:operator pos:line="272" pos:column="75">+</op:operator> <lit:literal type="string" pos:line="272" pos:column="77">":"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="273" pos:column="21">stringBuilder</name><op:operator pos:line="273" pos:column="34">.</op:operator><name pos:line="273" pos:column="35">Append</name></name><argument_list pos:line="273" pos:column="41">(<argument><expr><name pos:line="273" pos:column="42">searchTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="274" pos:column="21">AppendBoostFactor</name><argument_list pos:line="274" pos:column="38">(<argument><expr><name pos:line="274" pos:column="39">stringBuilder</name></expr></argument>, <argument><expr><call><name><name pos:line="274" pos:column="54">SandoField</name><op:operator pos:line="274" pos:column="64">.</op:operator><name pos:line="274" pos:column="65">ReturnType</name><op:operator pos:line="274" pos:column="75">.</op:operator><name pos:line="274" pos:column="76">ToString</name></name><argument_list pos:line="274" pos:column="84">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:line="275" pos:column="21">break;</break>
                </case><case pos:line="276" pos:column="17">case <expr><name><name pos:line="276" pos:column="22">UsageType</name><op:operator pos:line="276" pos:column="31">.</op:operator><name pos:line="276" pos:column="32">NamespaceNames</name></name></expr>:
                    <expr_stmt><expr><call><name><name pos:line="277" pos:column="21">stringBuilder</name><op:operator pos:line="277" pos:column="34">.</op:operator><name pos:line="277" pos:column="35">Append</name></name><argument_list pos:line="277" pos:column="41">(<argument><expr><call><name><name pos:line="277" pos:column="42">SandoField</name><op:operator pos:line="277" pos:column="52">.</op:operator><name pos:line="277" pos:column="53">Namespace</name><op:operator pos:line="277" pos:column="62">.</op:operator><name pos:line="277" pos:column="63">ToString</name></name><argument_list pos:line="277" pos:column="71">()</argument_list></call> <op:operator pos:line="277" pos:column="74">+</op:operator> <lit:literal type="string" pos:line="277" pos:column="76">":"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="278" pos:column="21">stringBuilder</name><op:operator pos:line="278" pos:column="34">.</op:operator><name pos:line="278" pos:column="35">Append</name></name><argument_list pos:line="278" pos:column="41">(<argument><expr><name pos:line="278" pos:column="42">searchTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="279" pos:column="21">AppendBoostFactor</name><argument_list pos:line="279" pos:column="38">(<argument><expr><name pos:line="279" pos:column="39">stringBuilder</name></expr></argument>, <argument><expr><call><name><name pos:line="279" pos:column="54">SandoField</name><op:operator pos:line="279" pos:column="64">.</op:operator><name pos:line="279" pos:column="65">Namespace</name><op:operator pos:line="279" pos:column="74">.</op:operator><name pos:line="279" pos:column="75">ToString</name></name><argument_list pos:line="279" pos:column="83">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:line="280" pos:column="21">break;</break>
                </case><case pos:line="281" pos:column="17">case <expr><name><name pos:line="281" pos:column="22">UsageType</name><op:operator pos:line="281" pos:column="31">.</op:operator><name pos:line="281" pos:column="32">PropertyOrFieldTypes</name></name></expr>:
                    <expr_stmt><expr><call><name><name pos:line="282" pos:column="21">stringBuilder</name><op:operator pos:line="282" pos:column="34">.</op:operator><name pos:line="282" pos:column="35">Append</name></name><argument_list pos:line="282" pos:column="41">(<argument><expr><call><name><name pos:line="282" pos:column="42">SandoField</name><op:operator pos:line="282" pos:column="52">.</op:operator><name pos:line="282" pos:column="53">DataType</name><op:operator pos:line="282" pos:column="61">.</op:operator><name pos:line="282" pos:column="62">ToString</name></name><argument_list pos:line="282" pos:column="70">()</argument_list></call> <op:operator pos:line="282" pos:column="73">+</op:operator> <lit:literal type="string" pos:line="282" pos:column="75">":"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="283" pos:column="21">stringBuilder</name><op:operator pos:line="283" pos:column="34">.</op:operator><name pos:line="283" pos:column="35">Append</name></name><argument_list pos:line="283" pos:column="41">(<argument><expr><name pos:line="283" pos:column="42">searchTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="284" pos:column="21">AppendBoostFactor</name><argument_list pos:line="284" pos:column="38">(<argument><expr><name pos:line="284" pos:column="39">stringBuilder</name></expr></argument>, <argument><expr><call><name><name pos:line="284" pos:column="54">SandoField</name><op:operator pos:line="284" pos:column="64">.</op:operator><name pos:line="284" pos:column="65">DataType</name><op:operator pos:line="284" pos:column="73">.</op:operator><name pos:line="284" pos:column="74">ToString</name></name><argument_list pos:line="284" pos:column="82">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:line="285" pos:column="21">break;</break>
                </case><case pos:line="286" pos:column="17">case <expr><name><name pos:line="286" pos:column="22">UsageType</name><op:operator pos:line="286" pos:column="31">.</op:operator><name pos:line="286" pos:column="32">RawSourceCode</name></name></expr>:
                    <expr_stmt><expr><call><name><name pos:line="287" pos:column="21">stringBuilder</name><op:operator pos:line="287" pos:column="34">.</op:operator><name pos:line="287" pos:column="35">Append</name></name><argument_list pos:line="287" pos:column="41">(<argument><expr><call><name><name pos:line="287" pos:column="42">SandoField</name><op:operator pos:line="287" pos:column="52">.</op:operator><name pos:line="287" pos:column="53">Source</name><op:operator pos:line="287" pos:column="59">.</op:operator><name pos:line="287" pos:column="60">ToString</name></name><argument_list pos:line="287" pos:column="68">()</argument_list></call> <op:operator pos:line="287" pos:column="71">+</op:operator> <lit:literal type="string" pos:line="287" pos:column="73">":"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="288" pos:column="21">stringBuilder</name><op:operator pos:line="288" pos:column="34">.</op:operator><name pos:line="288" pos:column="35">Append</name></name><argument_list pos:line="288" pos:column="41">(<argument><expr><name pos:line="288" pos:column="42">searchTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="289" pos:column="21">AppendBoostFactor</name><argument_list pos:line="289" pos:column="38">(<argument><expr><name pos:line="289" pos:column="39">stringBuilder</name></expr></argument>, <argument><expr><call><name><name pos:line="289" pos:column="54">SandoField</name><op:operator pos:line="289" pos:column="64">.</op:operator><name pos:line="289" pos:column="65">Source</name><op:operator pos:line="289" pos:column="71">.</op:operator><name pos:line="289" pos:column="72">ToString</name></name><argument_list pos:line="289" pos:column="80">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:line="290" pos:column="21">break;</break>
                </case><case pos:line="291" pos:column="17">case <expr><name><name pos:line="291" pos:column="22">UsageType</name><op:operator pos:line="291" pos:column="31">.</op:operator><name pos:line="291" pos:column="32">ClassName</name></name></expr>:
                    <expr_stmt><expr><call><name><name pos:line="292" pos:column="21">stringBuilder</name><op:operator pos:line="292" pos:column="34">.</op:operator><name pos:line="292" pos:column="35">Append</name></name><argument_list pos:line="292" pos:column="41">(<argument><expr><call><name><name pos:line="292" pos:column="42">SandoField</name><op:operator pos:line="292" pos:column="52">.</op:operator><name pos:line="292" pos:column="53">ClassName</name><op:operator pos:line="292" pos:column="62">.</op:operator><name pos:line="292" pos:column="63">ToString</name></name><argument_list pos:line="292" pos:column="71">()</argument_list></call> <op:operator pos:line="292" pos:column="74">+</op:operator> <lit:literal type="string" pos:line="292" pos:column="76">":"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="293" pos:column="21">stringBuilder</name><op:operator pos:line="293" pos:column="34">.</op:operator><name pos:line="293" pos:column="35">Append</name></name><argument_list pos:line="293" pos:column="41">(<argument><expr><name pos:line="293" pos:column="42">searchTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="294" pos:column="21">AppendBoostFactor</name><argument_list pos:line="294" pos:column="38">(<argument><expr><name pos:line="294" pos:column="39">stringBuilder</name></expr></argument>, <argument><expr><call><name><name pos:line="294" pos:column="54">SandoField</name><op:operator pos:line="294" pos:column="64">.</op:operator><name pos:line="294" pos:column="65">ClassName</name><op:operator pos:line="294" pos:column="74">.</op:operator><name pos:line="294" pos:column="75">ToString</name></name><argument_list pos:line="294" pos:column="83">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:line="295" pos:column="21">break;</break>
                </case><default pos:line="296" pos:column="17">default:
                    <throw pos:line="297" pos:column="21">throw <expr><op:operator pos:line="297" pos:column="27">new</op:operator> <call><name pos:line="297" pos:column="31">IndexerException</name><argument_list pos:line="297" pos:column="47">(<argument><expr><name><name pos:line="297" pos:column="48">TranslationCode</name><op:operator pos:line="297" pos:column="63">.</op:operator><name pos:line="297" pos:column="64">Exception_General_UnrecognizedEnumValue</name></name></expr></argument>, <argument><expr><name pos:line="297" pos:column="105">null</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="297" pos:column="111">"UsageType"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            </default>}</block></switch>
        }</block></function>

        <function><type><specifier pos:line="301" pos:column="9">private</specifier> <name pos:line="301" pos:column="17">void</name></type> <name pos:line="301" pos:column="22">AppendBoostFactor</name><parameter_list pos:line="301" pos:column="39">(<param><decl><type><name pos:line="301" pos:column="40">StringBuilder</name></type> <name pos:line="301" pos:column="54">stringBuilder</name></decl></param>, <param><decl><type><name pos:line="301" pos:column="69">string</name></type> <name pos:line="301" pos:column="76">fieldName</name></decl></param>)</parameter_list>
        <block pos:line="302" pos:column="9">{
            <if pos:line="303" pos:column="13">if <condition pos:line="303" pos:column="16">(<expr><call><name><name pos:line="303" pos:column="17">_queryWeights</name><op:operator pos:line="303" pos:column="30">.</op:operator><name pos:line="303" pos:column="31">ContainsKey</name></name><argument_list pos:line="303" pos:column="42">(<argument><expr><name pos:line="303" pos:column="43">fieldName</name></expr></argument>)</argument_list></call> <op:operator pos:line="303" pos:column="54">&amp;&amp;</op:operator> <name><name pos:line="303" pos:column="57">_queryWeights</name><index pos:line="303" pos:column="70">[<expr><name pos:line="303" pos:column="71">fieldName</name></expr>]</index></name> <op:operator pos:line="303" pos:column="82">!=</op:operator> <lit:literal type="number" pos:line="303" pos:column="85">1</lit:literal></expr>)</condition><then pos:line="303" pos:column="87">
            <block pos:line="304" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="305" pos:column="17">stringBuilder</name><op:operator pos:line="305" pos:column="30">.</op:operator><name pos:line="305" pos:column="31">Append</name></name><argument_list pos:line="305" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="305" pos:column="38">"^"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="306" pos:column="17">stringBuilder</name><op:operator pos:line="306" pos:column="30">.</op:operator><name pos:line="306" pos:column="31">Append</name></name><argument_list pos:line="306" pos:column="37">(<argument><expr><name><name pos:line="306" pos:column="38">_queryWeights</name><index pos:line="306" pos:column="51">[<expr><name pos:line="306" pos:column="52">fieldName</name></expr>]</index></name><op:operator pos:line="306" pos:column="62">.</op:operator><call><name pos:line="306" pos:column="63">ToString</name><argument_list pos:line="306" pos:column="71">(<argument><expr><name><name pos:line="306" pos:column="72">CultureInfo</name><op:operator pos:line="306" pos:column="83">.</op:operator><name pos:line="306" pos:column="84">InvariantCulture</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
