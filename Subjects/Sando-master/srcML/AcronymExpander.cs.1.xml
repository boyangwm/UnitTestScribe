<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Core\Core\QueryRefomers\AcronymExpander.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Text</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Sando</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">Core</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">Tools</name></name>;</using>

<namespace pos:line="7" pos:column="1">namespace <name><name pos:line="7" pos:column="11">Sando</name><op:operator pos:line="7" pos:column="16">.</op:operator><name pos:line="7" pos:column="17">Core</name><op:operator pos:line="7" pos:column="21">.</op:operator><name pos:line="7" pos:column="22">QueryRefomers</name></name>
<block pos:line="8" pos:column="1">{
    <class><specifier pos:line="9" pos:column="5">public</specifier> class <name pos:line="9" pos:column="18">AcronymExpander</name>
    <block pos:line="10" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="11" pos:column="9">private</specifier> <specifier pos:line="11" pos:column="17">readonly</specifier> <name pos:line="11" pos:column="26">IWordCoOccurrenceMatrix</name></type> <name pos:line="11" pos:column="50">localCoOccurMatrix</name></decl>;</decl_stmt>

        <constructor><specifier pos:line="13" pos:column="9">public</specifier> <name pos:line="13" pos:column="16">AcronymExpander</name><parameter_list pos:line="13" pos:column="31">(<param><decl><type><name pos:line="13" pos:column="32">IWordCoOccurrenceMatrix</name></type> <name pos:line="13" pos:column="56">localCoOccurMatrix</name></decl></param>)</parameter_list>
        <block pos:line="14" pos:column="9">{
            <expr_stmt><expr><name><name pos:line="15" pos:column="13">this</name><op:operator pos:line="15" pos:column="17">.</op:operator><name pos:line="15" pos:column="18">localCoOccurMatrix</name></name> <op:operator pos:line="15" pos:column="37">=</op:operator> <name pos:line="15" pos:column="39">localCoOccurMatrix</name></expr>;</expr_stmt>
        }</block></constructor>

        <class><specifier pos:line="18" pos:column="9">private</specifier> class <name pos:line="18" pos:column="23">ExtendedAcronym</name>
        <block pos:line="19" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="20" pos:column="13">private</specifier> <name><name pos:line="20" pos:column="21">List</name><argument_list pos:line="20" pos:column="25">&lt;<argument><name pos:line="20" pos:column="26">String</name></argument>&gt;</argument_list></name></type> <name pos:line="20" pos:column="34">Words</name></decl>;</decl_stmt>

            <constructor><specifier pos:line="22" pos:column="13">public</specifier> <name pos:line="22" pos:column="20">ExtendedAcronym</name><parameter_list pos:line="22" pos:column="35">(<param><decl><type><name><name pos:line="22" pos:column="36">IEnumerable</name><argument_list pos:line="22" pos:column="47">&lt;<argument><name pos:line="22" pos:column="48">string</name></argument>&gt;</argument_list></name></type> <name pos:line="22" pos:column="56">Words</name></decl></param>)</parameter_list>
            <block pos:line="23" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="24" pos:column="17">this</name><op:operator pos:line="24" pos:column="21">.</op:operator><name pos:line="24" pos:column="22">Words</name></name> <op:operator pos:line="24" pos:column="28">=</op:operator> <call><name><name pos:line="24" pos:column="30">Words</name><op:operator pos:line="24" pos:column="35">.</op:operator><name pos:line="24" pos:column="36">ToList</name></name><argument_list pos:line="24" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
            }</block></constructor>

            <function><type><specifier pos:line="27" pos:column="13">public</specifier> <name><name pos:line="27" pos:column="20">IEnumerable</name><argument_list pos:line="27" pos:column="31">&lt;<argument><name pos:line="27" pos:column="32">ExtendedAcronym</name></argument>&gt;</argument_list></name></type> <name pos:line="27" pos:column="49">GetCommonCoOccurWords</name><parameter_list pos:line="27" pos:column="70">(<param><decl><type><name pos:line="27" pos:column="71">IWordCoOccurrenceMatrix</name></type> 
                <name pos:line="28" pos:column="17">matrix</name></decl></param>, <param><decl><type><name pos:line="28" pos:column="25">char</name></type> <name pos:line="28" pos:column="30">letter</name></decl></param>)</parameter_list>
            <block pos:line="29" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="30" pos:column="17">var</name></type> <name pos:line="30" pos:column="21">entries</name> <init pos:line="30" pos:column="29">= <expr><call><name><name pos:line="30" pos:column="31">matrix</name><op:operator pos:line="30" pos:column="37">.</op:operator><name pos:line="30" pos:column="38">GetEntries</name></name><argument_list pos:line="30" pos:column="48">(<argument><expr><lambda><name pos:line="30" pos:column="49">entry</name> <op:operator pos:line="30" pos:column="55">=&gt;</op:operator> <call><name pos:line="30" pos:column="58">IsEntryCorrect</name><argument_list pos:line="30" pos:column="72">(<argument><expr><name pos:line="30" pos:column="73">matrix</name></expr></argument>, <argument><expr><name pos:line="30" pos:column="81">entry</name></expr></argument>, <argument><expr><name pos:line="30" pos:column="88">letter</name></expr></argument>, 
                    <argument><expr><call><name><name pos:line="31" pos:column="21">Words</name><op:operator pos:line="31" pos:column="26">.</op:operator><name pos:line="31" pos:column="27">ToArray</name></name><argument_list pos:line="31" pos:column="34">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="31" pos:column="38">.</op:operator><call><name pos:line="31" pos:column="39">ToArray</name><argument_list pos:line="31" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="32" pos:column="17">var</name></type> <name pos:line="32" pos:column="21">newWords</name> <init pos:line="32" pos:column="30">= <expr><call><name><name pos:line="32" pos:column="32">entries</name><op:operator pos:line="32" pos:column="39">.</op:operator><name pos:line="32" pos:column="40">Select</name></name><argument_list pos:line="32" pos:column="46">(<argument><expr><lambda><name pos:line="32" pos:column="47">e</name> <op:operator pos:line="32" pos:column="49">=&gt;</op:operator> <call><name><name pos:line="32" pos:column="52">Words</name><op:operator pos:line="32" pos:column="57">.</op:operator><name pos:line="32" pos:column="58">Contains</name></name><argument_list pos:line="32" pos:column="66">(<argument><expr><name><name pos:line="32" pos:column="67">e</name><op:operator pos:line="32" pos:column="68">.</op:operator><name pos:line="32" pos:column="69">Column</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="32" pos:column="77">?</op:operator> <name><name pos:line="32" pos:column="79">e</name><op:operator pos:line="32" pos:column="80">.</op:operator><name pos:line="32" pos:column="81">Row</name></name> <op:operator pos:line="32" pos:column="85">:</op:operator> <name><name pos:line="32" pos:column="87">e</name><op:operator pos:line="32" pos:column="88">.</op:operator><name pos:line="32" pos:column="89">Column</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="32" pos:column="96">.</op:operator><call><name pos:line="32" pos:column="97">Distinct</name><argument_list pos:line="32" pos:column="105">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <return pos:line="33" pos:column="17">return <expr><call><name><name pos:line="33" pos:column="24">newWords</name><op:operator pos:line="33" pos:column="32">.</op:operator><name pos:line="33" pos:column="33">Select</name></name><argument_list pos:line="33" pos:column="39">(<argument><expr><lambda><name pos:line="33" pos:column="40">k</name> <op:operator pos:line="33" pos:column="42">=&gt;</op:operator> <op:operator pos:line="33" pos:column="45">new</op:operator> <call><name pos:line="33" pos:column="49">ExtendedAcronym</name><argument_list pos:line="33" pos:column="64">(<argument><expr><call><name><name pos:line="33" pos:column="65">Words</name><op:operator pos:line="33" pos:column="70">.</op:operator><name pos:line="33" pos:column="71">AddImmutably</name></name><argument_list pos:line="33" pos:column="83">(<argument><expr><name pos:line="33" pos:column="84">k</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="33" pos:column="88">.</op:operator><call><name pos:line="33" pos:column="89">ToArray</name><argument_list pos:line="33" pos:column="96">()</argument_list></call></expr>;</return>
            }</block></function>


            <function><type><specifier pos:line="37" pos:column="13">private</specifier> <name pos:line="37" pos:column="21">bool</name></type> <name pos:line="37" pos:column="26">IsEntryCorrect</name><parameter_list pos:line="37" pos:column="40">(<param><decl><type><name pos:line="37" pos:column="41">IWordCoOccurrenceMatrix</name></type> <name pos:line="37" pos:column="65">matrix</name></decl></param>, <param><decl><type><name pos:line="37" pos:column="73">IMatrixEntry</name></type> <name pos:line="37" pos:column="86">entry</name></decl></param>, 
                <param><decl><type><name pos:line="38" pos:column="17">char</name></type> <name pos:line="38" pos:column="22">start</name></decl></param>, <param><decl><type><name><name pos:line="38" pos:column="29">string</name><index pos:line="38" pos:column="35">[]</index></name></type> <name pos:line="38" pos:column="38">words</name></decl></param>)</parameter_list>
            <block pos:line="39" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="40" pos:column="17">var</name></type> <name pos:line="40" pos:column="21">otherWord</name> <init pos:line="40" pos:column="31">= <expr><call><name><name pos:line="40" pos:column="33">words</name><op:operator pos:line="40" pos:column="38">.</op:operator><name pos:line="40" pos:column="39">Contains</name></name><argument_list pos:line="40" pos:column="47">(<argument><expr><name><name pos:line="40" pos:column="48">entry</name><op:operator pos:line="40" pos:column="53">.</op:operator><name pos:line="40" pos:column="54">Column</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="40" pos:column="62">?</op:operator> <name><name pos:line="40" pos:column="64">entry</name><op:operator pos:line="40" pos:column="69">.</op:operator><name pos:line="40" pos:column="70">Row</name></name> <op:operator pos:line="40" pos:column="74">:</op:operator> <name><name pos:line="40" pos:column="76">entry</name><op:operator pos:line="40" pos:column="81">.</op:operator><name pos:line="40" pos:column="82">Column</name></name></expr></init></decl>;</decl_stmt>
                <if pos:line="41" pos:column="17">if <condition pos:line="41" pos:column="20">(<expr><call><name><name pos:line="41" pos:column="21">words</name><op:operator pos:line="41" pos:column="26">.</op:operator><name pos:line="41" pos:column="27">Contains</name></name><argument_list pos:line="41" pos:column="35">(<argument><expr><name pos:line="41" pos:column="36">otherWord</name></expr></argument>)</argument_list></call> <op:operator pos:line="41" pos:column="47">||</op:operator> <op:operator pos:line="41" pos:column="50">!</op:operator><call><name><name pos:line="41" pos:column="51">otherWord</name><op:operator pos:line="41" pos:column="60">.</op:operator><name pos:line="41" pos:column="61">StartsWith</name></name><argument_list pos:line="41" pos:column="71">(<argument><expr><call><name><name pos:line="41" pos:column="72">start</name><op:operator pos:line="41" pos:column="77">.</op:operator><name pos:line="41" pos:column="78">ToString</name></name><argument_list pos:line="41" pos:column="86">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="41" pos:column="90"> 
                    <return pos:line="42" pos:column="21">return <expr><lit:literal type="boolean" pos:line="42" pos:column="28">false</lit:literal></expr>;</return></then></if>
                <return pos:line="43" pos:column="17">return <expr><call><name><name pos:line="43" pos:column="24">words</name><op:operator pos:line="43" pos:column="29">.</op:operator><name pos:line="43" pos:column="30">All</name></name><argument_list pos:line="43" pos:column="33">(<argument><expr><lambda><name pos:line="43" pos:column="34">w</name> <op:operator pos:line="43" pos:column="36">=&gt;</op:operator> <call><name><name pos:line="43" pos:column="39">matrix</name><op:operator pos:line="43" pos:column="45">.</op:operator><name pos:line="43" pos:column="46">GetCoOccurrenceCount</name></name><argument_list pos:line="43" pos:column="66">(<argument><expr><name pos:line="43" pos:column="67">w</name></expr></argument>, <argument><expr><name pos:line="43" pos:column="70">otherWord</name></expr></argument>)</argument_list></call> <op:operator pos:line="43" pos:column="81">&gt;</op:operator> <lit:literal type="number" pos:line="43" pos:column="83">0</lit:literal></lambda></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>

            <function><type><specifier pos:line="46" pos:column="13">public</specifier> <name pos:line="46" pos:column="20">int</name></type> <name pos:line="46" pos:column="24">ComputeCoOccurrenceCount</name><parameter_list pos:line="46" pos:column="48">(<param><decl><type><name pos:line="46" pos:column="49">IWordCoOccurrenceMatrix</name></type> <name pos:line="46" pos:column="73">matrix</name></decl></param>)</parameter_list>
            <block pos:line="47" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="48" pos:column="17">int</name></type> <name pos:line="48" pos:column="21">sum</name> <init pos:line="48" pos:column="25">= <expr><lit:literal type="number" pos:line="48" pos:column="27">0</lit:literal></expr></init></decl>;</decl_stmt>
                <for pos:line="49" pos:column="17">for (<init><decl><type><name pos:line="49" pos:column="22">int</name></type> <name pos:line="49" pos:column="26">i</name> <init pos:line="49" pos:column="28">= <expr><name><name pos:line="49" pos:column="30">Words</name><op:operator pos:line="49" pos:column="35">.</op:operator><name pos:line="49" pos:column="36">Count</name></name> <op:operator pos:line="49" pos:column="42">-</op:operator> <lit:literal type="number" pos:line="49" pos:column="44">1</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="49" pos:column="47">i</name> <op:operator pos:line="49" pos:column="49">&gt;</op:operator> <lit:literal type="number" pos:line="49" pos:column="51">0</lit:literal></expr>;</condition> <incr><expr><name pos:line="49" pos:column="54">i</name><op:operator pos:line="49" pos:column="55">--</op:operator></expr></incr>)
                <block pos:line="50" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="51" pos:column="21">var</name></type> <name pos:line="51" pos:column="25">current</name> <init pos:line="51" pos:column="33">= <expr><call><name><name pos:line="51" pos:column="35">Words</name><op:operator pos:line="51" pos:column="40">.</op:operator><name pos:line="51" pos:column="41">ElementAt</name></name><argument_list pos:line="51" pos:column="50">(<argument><expr><name pos:line="51" pos:column="51">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="52" pos:column="21">var</name></type> <name pos:line="52" pos:column="25">restList</name> <init pos:line="52" pos:column="34">= <expr><call><name><name pos:line="52" pos:column="36">Words</name><op:operator pos:line="52" pos:column="41">.</op:operator><name pos:line="52" pos:column="42">GetRange</name></name><argument_list pos:line="52" pos:column="50">(<argument><expr><lit:literal type="number" pos:line="52" pos:column="51">0</lit:literal></expr></argument>, <argument><expr><name pos:line="52" pos:column="54">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name pos:line="53" pos:column="21">sum</name> <op:operator pos:line="53" pos:column="25">+=</op:operator> <call><name><name pos:line="53" pos:column="28">restList</name><op:operator pos:line="53" pos:column="36">.</op:operator><name pos:line="53" pos:column="37">Sum</name></name><argument_list pos:line="53" pos:column="40">(<argument><expr><lambda><name pos:line="53" pos:column="41">rest</name> <op:operator pos:line="53" pos:column="46">=&gt;</op:operator> <call><name><name pos:line="53" pos:column="49">matrix</name><op:operator pos:line="53" pos:column="55">.</op:operator><name pos:line="53" pos:column="56">GetCoOccurrenceCount</name></name><argument_list pos:line="53" pos:column="76">(<argument><expr><name pos:line="53" pos:column="77">rest</name></expr></argument>, <argument><expr><name pos:line="53" pos:column="83">current</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
                <return pos:line="55" pos:column="17">return <expr><name pos:line="55" pos:column="24">sum</name></expr>;</return>
            }</block></function>

            <function><type><specifier pos:line="58" pos:column="13">public</specifier> <name pos:line="58" pos:column="20">IReformedQuery</name></type> <name pos:line="58" pos:column="35">ToReformedQuery</name><parameter_list pos:line="58" pos:column="50">(<param><decl><type><name pos:line="58" pos:column="51">IWordCoOccurrenceMatrix</name></type> <name pos:line="58" pos:column="75">matrix</name></decl></param>)</parameter_list>
            <block pos:line="59" pos:column="13">{
                <return pos:line="60" pos:column="17">return <expr><op:operator pos:line="60" pos:column="24">new</op:operator> <call><name pos:line="60" pos:column="28">ExpandedQuery</name><argument_list pos:line="60" pos:column="41">(<argument><expr><name><name pos:line="60" pos:column="42">this</name><op:operator pos:line="60" pos:column="46">.</op:operator><name pos:line="60" pos:column="47">Words</name></name></expr></argument>, <argument><expr><call><name pos:line="60" pos:column="54">ComputeCoOccurrenceCount</name><argument_list pos:line="60" pos:column="78">(<argument><expr><name pos:line="60" pos:column="79">matrix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>   
            }</block></function>


            <class><specifier pos:line="64" pos:column="13">private</specifier> class <name pos:line="64" pos:column="27">ExpandedQuery</name> <super pos:line="64" pos:column="41">: <name pos:line="64" pos:column="43">IReformedQuery</name></super>
            <block pos:line="65" pos:column="13">{
                <decl_stmt><decl><type><specifier pos:line="66" pos:column="17">public</specifier> <name><name pos:line="66" pos:column="24">IEnumerable</name><argument_list pos:line="66" pos:column="35">&lt;<argument><name pos:line="66" pos:column="36">ReformedWord</name></argument>&gt;</argument_list></name></type> <name pos:line="66" pos:column="50">ReformedWords</name> <block pos:line="66" pos:column="64">{ <function_decl><name pos:line="66" pos:column="66">get</name>;</function_decl> <function_decl><specifier pos:line="66" pos:column="71">private</specifier> <name pos:line="66" pos:column="79">set</name>;</function_decl> }</block></decl></decl_stmt>
                <decl_stmt><decl><type><specifier pos:line="67" pos:column="17">public</specifier> <name><name pos:line="67" pos:column="24">IEnumerable</name><argument_list pos:line="67" pos:column="35">&lt;<argument><name pos:line="67" pos:column="36">string</name></argument>&gt;</argument_list></name></type> <name pos:line="67" pos:column="44">WordsAfterReform</name> <block pos:line="67" pos:column="61">{ <function_decl><name pos:line="67" pos:column="63">get</name>;</function_decl> <function_decl><specifier pos:line="67" pos:column="68">private</specifier> <name pos:line="67" pos:column="76">set</name>;</function_decl> }</block></decl></decl_stmt>
                <decl_stmt><decl><type><specifier pos:line="68" pos:column="17">public</specifier> <name pos:line="68" pos:column="24">string</name></type> <name pos:line="68" pos:column="31">ReformExplanation</name> <block pos:line="68" pos:column="49">{ <function_decl><name pos:line="68" pos:column="51">get</name>;</function_decl> <function_decl><specifier pos:line="68" pos:column="56">private</specifier> <name pos:line="68" pos:column="64">set</name>;</function_decl> }</block></decl></decl_stmt>
                <decl_stmt><decl><type><specifier pos:line="69" pos:column="17">public</specifier> <name pos:line="69" pos:column="24">string</name></type> <name pos:line="69" pos:column="31">QueryString</name> <block pos:line="69" pos:column="43">{ <function_decl><name pos:line="69" pos:column="45">get</name>;</function_decl> <function_decl><specifier pos:line="69" pos:column="50">private</specifier> <name pos:line="69" pos:column="58">set</name>;</function_decl> }</block></decl></decl_stmt>
                <decl_stmt><decl><type><specifier pos:line="70" pos:column="17">public</specifier> <name pos:line="70" pos:column="24">string</name></type> <name pos:line="70" pos:column="31">OriginalQueryString</name> <block pos:line="70" pos:column="51">{ <function_decl><name pos:line="70" pos:column="53">get</name>;</function_decl> <function_decl><specifier pos:line="70" pos:column="58">private</specifier> <name pos:line="70" pos:column="66">set</name>;</function_decl> }</block></decl></decl_stmt>
                <decl_stmt><decl><type><specifier pos:line="71" pos:column="17">public</specifier> <name pos:line="71" pos:column="24">int</name></type> <name pos:line="71" pos:column="28">CoOccurrenceCount</name> <block pos:line="71" pos:column="46">{ <function_decl><name pos:line="71" pos:column="48">get</name>;</function_decl> <function_decl><specifier pos:line="71" pos:column="53">private</specifier> <name pos:line="71" pos:column="61">set</name>;</function_decl> }</block></decl></decl_stmt>
                <decl_stmt><decl><type><specifier pos:line="72" pos:column="17">public</specifier> <name pos:line="72" pos:column="24">int</name></type> <name pos:line="72" pos:column="28">EditDistance</name> <block pos:line="72" pos:column="41">{ <function_decl><name pos:line="72" pos:column="43">get</name>;</function_decl> <function_decl><specifier pos:line="72" pos:column="48">private</specifier> <name pos:line="72" pos:column="56">set</name>;</function_decl> }</block></decl></decl_stmt>

                <constructor><specifier pos:line="74" pos:column="17">internal</specifier> <name pos:line="74" pos:column="26">ExpandedQuery</name><parameter_list pos:line="74" pos:column="39">(<param><decl><type><name><name pos:line="74" pos:column="40">IEnumerable</name><argument_list pos:line="74" pos:column="51">&lt;<argument><name pos:line="74" pos:column="52">String</name></argument>&gt;</argument_list></name></type> <name pos:line="74" pos:column="60">expandedWords</name></decl></param>, <param><decl><type><name pos:line="74" pos:column="75">int</name></type> <name pos:line="74" pos:column="79">CoOccurrenceCount</name></decl></param>)</parameter_list>
                <block pos:line="75" pos:column="17">{
                    <expr_stmt><expr><name><name pos:line="76" pos:column="21">this</name><op:operator pos:line="76" pos:column="25">.</op:operator><name pos:line="76" pos:column="26">CoOccurrenceCount</name></name> <op:operator pos:line="76" pos:column="44">=</op:operator> <name pos:line="76" pos:column="46">CoOccurrenceCount</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="77" pos:column="21">this</name><op:operator pos:line="77" pos:column="25">.</op:operator><name pos:line="77" pos:column="26">ReformedWords</name></name> <op:operator pos:line="77" pos:column="40">=</op:operator> <call><name><name pos:line="77" pos:column="42">expandedWords</name><op:operator pos:line="77" pos:column="55">.</op:operator><name pos:line="77" pos:column="56">Select</name></name><argument_list pos:line="77" pos:column="62">(<argument><expr><lambda><name pos:line="77" pos:column="63">ew</name> <op:operator pos:line="77" pos:column="66">=&gt;</op:operator> <op:operator pos:line="77" pos:column="69">new</op:operator> <call><name pos:line="77" pos:column="73">ReformedWord</name><argument_list pos:line="77" pos:column="85">(<argument><expr><name><name pos:line="77" pos:column="86">TermChangeCategory</name><op:operator pos:line="77" pos:column="104">.</op:operator>
                        <name pos:line="78" pos:column="25">ACRONYM_EXPAND</name></name></expr></argument>, <argument><expr><call><name><name pos:line="78" pos:column="41">ew</name><op:operator pos:line="78" pos:column="43">.</op:operator><name pos:line="78" pos:column="44">First</name></name><argument_list pos:line="78" pos:column="49">()</argument_list></call><op:operator pos:line="78" pos:column="51">.</op:operator><call><name pos:line="78" pos:column="52">ToString</name><argument_list pos:line="78" pos:column="60">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="78" pos:column="64">ew</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="78" pos:column="68">""</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="78" pos:column="72">.</op:operator><call><name pos:line="78" pos:column="73">ToArray</name><argument_list pos:line="78" pos:column="80">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="79" pos:column="21">this</name><op:operator pos:line="79" pos:column="25">.</op:operator><name pos:line="79" pos:column="26">WordsAfterReform</name></name> <op:operator pos:line="79" pos:column="43">=</op:operator> <call><name><name pos:line="79" pos:column="45">this</name><op:operator pos:line="79" pos:column="49">.</op:operator><name pos:line="79" pos:column="50">ReformedWords</name><op:operator pos:line="79" pos:column="63">.</op:operator><name pos:line="79" pos:column="64">Select</name></name><argument_list pos:line="79" pos:column="70">(<argument><expr><lambda><name pos:line="79" pos:column="71">rw</name> <op:operator pos:line="79" pos:column="74">=&gt;</op:operator> <name><name pos:line="79" pos:column="77">rw</name><op:operator pos:line="79" pos:column="79">.</op:operator><name pos:line="79" pos:column="80">NewTerm</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="79" pos:column="88">.</op:operator><call><name pos:line="79" pos:column="89">ToArray</name><argument_list pos:line="79" pos:column="96">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="80" pos:column="21">this</name><op:operator pos:line="80" pos:column="25">.</op:operator><name pos:line="80" pos:column="26">QueryString</name></name> <op:operator pos:line="80" pos:column="38">=</op:operator> <call><name><name pos:line="80" pos:column="40">this</name><op:operator pos:line="80" pos:column="44">.</op:operator><name pos:line="80" pos:column="45">WordsAfterReform</name><op:operator pos:line="80" pos:column="61">.</op:operator><name pos:line="80" pos:column="62">Aggregate</name></name><argument_list pos:line="80" pos:column="71">(<argument><expr><lambda><parameter_list pos:line="80" pos:column="72">(<param><decl><name pos:line="80" pos:column="73">w1</name></decl></param>, <param><decl><name pos:line="80" pos:column="77">w2</name></decl></param>)</parameter_list> <op:operator pos:line="80" pos:column="81">=&gt;</op:operator> <name pos:line="80" pos:column="84">w1</name> <op:operator pos:line="80" pos:column="87">+</op:operator> <lit:literal type="string" pos:line="80" pos:column="89">" "</lit:literal> <op:operator pos:line="80" pos:column="93">+</op:operator> <name pos:line="80" pos:column="95">w2</name></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="81" pos:column="21">this</name><op:operator pos:line="81" pos:column="25">.</op:operator><name pos:line="81" pos:column="26">OriginalQueryString</name></name> <op:operator pos:line="81" pos:column="46">=</op:operator> <call><name><name pos:line="81" pos:column="48">this</name><op:operator pos:line="81" pos:column="52">.</op:operator><name pos:line="81" pos:column="53">ReformedWords</name><op:operator pos:line="81" pos:column="66">.</op:operator><name pos:line="81" pos:column="67">Select</name></name><argument_list pos:line="81" pos:column="73">(<argument><expr><lambda><name pos:line="81" pos:column="74">rw</name> <op:operator pos:line="81" pos:column="77">=&gt;</op:operator> <name><name pos:line="81" pos:column="80">rw</name><op:operator pos:line="81" pos:column="82">.</op:operator><name pos:line="81" pos:column="83">OriginalTerm</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="81" pos:column="96">.</op:operator>
                        <call><name pos:line="82" pos:column="25">Aggregate</name><argument_list pos:line="82" pos:column="34">(<argument><expr><lambda><parameter_list pos:line="82" pos:column="35">(<param><decl><name pos:line="82" pos:column="36">w1</name></decl></param>, <param><decl><name pos:line="82" pos:column="40">w2</name></decl></param>)</parameter_list> <op:operator pos:line="82" pos:column="44">=&gt;</op:operator> <name pos:line="82" pos:column="47">w1</name> <op:operator pos:line="82" pos:column="50">+</op:operator> <lit:literal type="string" pos:line="82" pos:column="52">" "</lit:literal> <op:operator pos:line="82" pos:column="56">+</op:operator> <name pos:line="82" pos:column="58">w2</name></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="83" pos:column="21">this</name><op:operator pos:line="83" pos:column="25">.</op:operator><name pos:line="83" pos:column="26">EditDistance</name></name> <op:operator pos:line="83" pos:column="39">=</op:operator> <call><name><name pos:line="83" pos:column="41">this</name><op:operator pos:line="83" pos:column="45">.</op:operator><name pos:line="83" pos:column="46">WordsAfterReform</name><op:operator pos:line="83" pos:column="62">.</op:operator><name pos:line="83" pos:column="63">Sum</name></name><argument_list pos:line="83" pos:column="66">(<argument><expr><lambda><name pos:line="83" pos:column="67">s</name> <op:operator pos:line="83" pos:column="69">=&gt;</op:operator> <call><name><name pos:line="83" pos:column="72">s</name><op:operator pos:line="83" pos:column="73">.</op:operator><name pos:line="83" pos:column="74">Count</name></name><argument_list pos:line="83" pos:column="79">()</argument_list></call> <op:operator pos:line="83" pos:column="82">-</op:operator> <lit:literal type="number" pos:line="83" pos:column="84">1</lit:literal></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="84" pos:column="21">this</name><op:operator pos:line="84" pos:column="25">.</op:operator><name pos:line="84" pos:column="26">ReformExplanation</name></name> <op:operator pos:line="84" pos:column="44">=</op:operator> <lit:literal type="string" pos:line="84" pos:column="46">"Expanding an acronym."</lit:literal></expr>;</expr_stmt>
                }</block></constructor>

                <function><type><specifier pos:line="87" pos:column="17">public</specifier> <name pos:line="87" pos:column="24">bool</name></type> <name pos:line="87" pos:column="29">Equals</name><parameter_list pos:line="87" pos:column="35">(<param><decl><type><name pos:line="87" pos:column="36">IReformedQuery</name></type> <name pos:line="87" pos:column="51">other</name></decl></param>)</parameter_list>
                <block pos:line="88" pos:column="17">{
                    <if pos:line="89" pos:column="21">if <condition pos:line="89" pos:column="24">(<expr><name pos:line="89" pos:column="25">other</name> <op:operator pos:line="89" pos:column="31">as</op:operator> <name pos:line="89" pos:column="34">ExpandedQuery</name> <op:operator pos:line="89" pos:column="48">!=</op:operator> <name pos:line="89" pos:column="51">null</name></expr>)</condition><then pos:line="89" pos:column="56">
                    <block pos:line="90" pos:column="21">{
                        <decl_stmt><decl><type><name pos:line="91" pos:column="25">var</name></type> <name pos:line="91" pos:column="29">wordsList1</name> <init pos:line="91" pos:column="40">= <expr><call><name><name pos:line="91" pos:column="42">this</name><op:operator pos:line="91" pos:column="46">.</op:operator><name pos:line="91" pos:column="47">WordsAfterReform</name><op:operator pos:line="91" pos:column="63">.</op:operator><name pos:line="91" pos:column="64">ToArray</name></name><argument_list pos:line="91" pos:column="71">()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name pos:line="92" pos:column="25">var</name></type> <name pos:line="92" pos:column="29">wordsList2</name> <init pos:line="92" pos:column="40">= <expr><call><name><name pos:line="92" pos:column="42">other</name><op:operator pos:line="92" pos:column="47">.</op:operator><name pos:line="92" pos:column="48">WordsAfterReform</name><op:operator pos:line="92" pos:column="64">.</op:operator><name pos:line="92" pos:column="65">ToArray</name></name><argument_list pos:line="92" pos:column="72">()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <return pos:line="93" pos:column="25">return <expr><call><name><name pos:line="93" pos:column="32">wordsList1</name><op:operator pos:line="93" pos:column="42">.</op:operator><name pos:line="93" pos:column="43">Aggregate</name></name><argument_list pos:line="93" pos:column="52">(<argument><expr><lambda><parameter_list pos:line="93" pos:column="53">(<param><decl><name pos:line="93" pos:column="54">s1</name></decl></param>, <param><decl><name pos:line="93" pos:column="58">s2</name></decl></param>)</parameter_list> <op:operator pos:line="93" pos:column="62">=&gt;</op:operator> <name pos:line="93" pos:column="65">s1</name> <op:operator pos:line="93" pos:column="68">+</op:operator> <lit:literal type="string" pos:line="93" pos:column="70">" "</lit:literal> <op:operator pos:line="93" pos:column="74">+</op:operator> <name pos:line="93" pos:column="76">s2</name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="93" pos:column="79">.</op:operator><call><name pos:line="93" pos:column="80">Equals</name>
                            <argument_list pos:line="94" pos:column="29">(<argument><expr><call><name><name pos:line="94" pos:column="30">wordsList2</name><op:operator pos:line="94" pos:column="40">.</op:operator><name pos:line="94" pos:column="41">Aggregate</name></name><argument_list pos:line="94" pos:column="50">(<argument><expr><lambda><parameter_list pos:line="94" pos:column="51">(<param><decl><name pos:line="94" pos:column="52">s1</name></decl></param>, <param><decl><name pos:line="94" pos:column="56">s2</name></decl></param>)</parameter_list> <op:operator pos:line="94" pos:column="60">=&gt;</op:operator> <name pos:line="94" pos:column="63">s1</name> <op:operator pos:line="94" pos:column="66">+</op:operator> <lit:literal type="string" pos:line="94" pos:column="68">" "</lit:literal> <op:operator pos:line="94" pos:column="72">+</op:operator> <name pos:line="94" pos:column="74">s2</name></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
                    }</block></then></if>
                    <return pos:line="96" pos:column="21">return <expr><lit:literal type="boolean" pos:line="96" pos:column="28">false</lit:literal></expr>;</return>
                }</block></function>
            }</block></class>
        }</block></class>

        <function><type><specifier pos:line="101" pos:column="9">public</specifier> <name pos:line="101" pos:column="16">IReformedQuery</name><index pos:line="101" pos:column="30">[]</index></type> <name pos:line="101" pos:column="33">GetExpandedQueries</name><parameter_list pos:line="101" pos:column="51">(<param><decl><type><name pos:line="101" pos:column="52">string</name></type> <name pos:line="101" pos:column="59">target</name></decl></param>)</parameter_list>
        <block pos:line="102" pos:column="9">{
            <if pos:line="103" pos:column="13">if <condition pos:line="103" pos:column="16">(<expr><op:operator pos:line="103" pos:column="17">!</op:operator><call><name pos:line="103" pos:column="18">IsPreconditionMet</name><argument_list pos:line="103" pos:column="35">(<argument><expr><name pos:line="103" pos:column="36">target</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="103" pos:column="44"> <return pos:line="103" pos:column="45">return <expr><op:operator pos:line="103" pos:column="52">new</op:operator> <name><name pos:line="103" pos:column="56">IReformedQuery</name><index pos:line="103" pos:column="70">[]</index></name><block pos:line="103" pos:column="72">{}</block></expr>;</return></then></if>
            <decl_stmt><decl><type><name pos:line="104" pos:column="13">var</name></type> <name pos:line="104" pos:column="17">entries</name> <init pos:line="104" pos:column="25">= <expr><call><name><name pos:line="104" pos:column="27">localCoOccurMatrix</name><op:operator pos:line="104" pos:column="45">.</op:operator><name pos:line="104" pos:column="46">GetEntries</name></name><argument_list pos:line="104" pos:column="56">(<argument><expr><lambda><name pos:line="104" pos:column="57">en</name> <op:operator pos:line="104" pos:column="60">=&gt;</op:operator> <call><name pos:line="104" pos:column="63">IsEntryStartWith</name><argument_list pos:line="104" pos:column="79">(<argument><expr><name pos:line="104" pos:column="80">en</name></expr></argument>, <argument><expr><name><name pos:line="104" pos:column="84">target</name><index pos:line="104" pos:column="90">[<expr><lit:literal type="number" pos:line="104" pos:column="91">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name><name pos:line="104" pos:column="95">target</name><index pos:line="104" pos:column="101">[<expr><lit:literal type="number" pos:line="104" pos:column="102">1</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call>
                <op:operator pos:line="105" pos:column="17">&amp;&amp;</op:operator> <op:operator pos:line="105" pos:column="20">!</op:operator><call><name><name pos:line="105" pos:column="21">en</name><op:operator pos:line="105" pos:column="23">.</op:operator><name pos:line="105" pos:column="24">Column</name><op:operator pos:line="105" pos:column="30">.</op:operator><name pos:line="105" pos:column="31">Equals</name></name><argument_list pos:line="105" pos:column="37">(<argument><expr><name><name pos:line="105" pos:column="38">en</name><op:operator pos:line="105" pos:column="40">.</op:operator><name pos:line="105" pos:column="41">Row</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="105" pos:column="46">.</op:operator><call><name pos:line="105" pos:column="47">ToList</name><argument_list pos:line="105" pos:column="53">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="106" pos:column="13">var</name></type> <name pos:line="106" pos:column="17">acronyms</name> <init pos:line="106" pos:column="26">= <expr><call><name pos:line="106" pos:column="28">CreateInitialAcronym</name><argument_list pos:line="106" pos:column="48">(<argument><expr><name pos:line="106" pos:column="49">entries</name></expr></argument>, <argument><expr><name><name pos:line="106" pos:column="58">target</name><index pos:line="106" pos:column="64">[<expr><lit:literal type="number" pos:line="106" pos:column="65">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name><name pos:line="106" pos:column="69">target</name><index pos:line="106" pos:column="75">[<expr><lit:literal type="number" pos:line="106" pos:column="76">1</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="106" pos:column="79">.</op:operator><call><name pos:line="106" pos:column="80">OrderByDescending</name><argument_list pos:line="106" pos:column="97">(<argument><expr><lambda><name pos:line="106" pos:column="98">a</name> <op:operator pos:line="106" pos:column="100">=&gt;</op:operator> <call><name><name pos:line="106" pos:column="103">a</name><op:operator pos:line="106" pos:column="104">.</op:operator>
                <name pos:line="107" pos:column="17">ComputeCoOccurrenceCount</name></name><argument_list pos:line="107" pos:column="41">(<argument><expr><name pos:line="107" pos:column="42">localCoOccurMatrix</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="107" pos:column="62">.</op:operator><call><name pos:line="107" pos:column="63">TrimIfOverlyLong</name><argument_list pos:line="107" pos:column="79">(<argument><expr><lit:literal type="number" pos:line="107" pos:column="80">3</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="107" pos:column="82">.</op:operator><call><name pos:line="107" pos:column="83">ToArray</name><argument_list pos:line="107" pos:column="90">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <for pos:line="109" pos:column="13">for (<init><decl><type><name pos:line="109" pos:column="18">int</name></type> <name pos:line="109" pos:column="22">i</name> <init pos:line="109" pos:column="24">= <expr><lit:literal type="number" pos:line="109" pos:column="26">2</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="109" pos:column="29">i</name> <op:operator pos:line="109" pos:column="31">&lt;</op:operator> <call><name><name pos:line="109" pos:column="33">target</name><op:operator pos:line="109" pos:column="39">.</op:operator><name pos:line="109" pos:column="40">Count</name></name><argument_list pos:line="109" pos:column="45">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="109" pos:column="49">i</name><op:operator pos:line="109" pos:column="50">++</op:operator></expr></incr>)
            <block pos:line="110" pos:column="13">{
                <expr_stmt><expr><name pos:line="111" pos:column="17">acronyms</name> <op:operator pos:line="111" pos:column="26">=</op:operator> <call><name><name pos:line="111" pos:column="28">acronyms</name><op:operator pos:line="111" pos:column="36">.</op:operator><name pos:line="111" pos:column="37">SelectMany</name></name><argument_list pos:line="111" pos:column="47">(<argument><expr><lambda><name pos:line="111" pos:column="48">a</name> <op:operator pos:line="111" pos:column="50">=&gt;</op:operator> <call><name><name pos:line="111" pos:column="53">a</name><op:operator pos:line="111" pos:column="54">.</op:operator><name pos:line="111" pos:column="55">GetCommonCoOccurWords</name></name><argument_list pos:line="111" pos:column="76">(<argument><expr><name pos:line="111" pos:column="77">localCoOccurMatrix</name></expr></argument>, 
                    <argument><expr><call><name><name pos:line="112" pos:column="21">target</name><op:operator pos:line="112" pos:column="27">.</op:operator><name pos:line="112" pos:column="28">ElementAt</name></name><argument_list pos:line="112" pos:column="37">(<argument><expr><name pos:line="112" pos:column="38">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="112" pos:column="42">.</op:operator><call><name pos:line="112" pos:column="43">OrderByDescending</name><argument_list pos:line="112" pos:column="60">(<argument><expr><lambda><name pos:line="112" pos:column="61">a</name> <op:operator pos:line="112" pos:column="63">=&gt;</op:operator> <call><name><name pos:line="112" pos:column="66">a</name><op:operator pos:line="112" pos:column="67">.</op:operator><name pos:line="112" pos:column="68">ComputeCoOccurrenceCount</name></name>
                        <argument_list pos:line="113" pos:column="25">(<argument><expr><name pos:line="113" pos:column="26">localCoOccurMatrix</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="113" pos:column="46">.</op:operator><call><name pos:line="113" pos:column="47">TrimIfOverlyLong</name><argument_list pos:line="113" pos:column="63">(<argument><expr><lit:literal type="number" pos:line="113" pos:column="64">3</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="113" pos:column="66">.</op:operator><call><name pos:line="113" pos:column="67">ToArray</name><argument_list pos:line="113" pos:column="74">()</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <return pos:line="115" pos:column="13">return <expr><call><name><name pos:line="115" pos:column="20">acronyms</name><op:operator pos:line="115" pos:column="28">.</op:operator><name pos:line="115" pos:column="29">Select</name></name><argument_list pos:line="115" pos:column="35">(<argument><expr><lambda><name pos:line="115" pos:column="36">a</name> <op:operator pos:line="115" pos:column="38">=&gt;</op:operator> <call><name><name pos:line="115" pos:column="41">a</name><op:operator pos:line="115" pos:column="42">.</op:operator><name pos:line="115" pos:column="43">ToReformedQuery</name></name><argument_list pos:line="115" pos:column="58">(<argument><expr><name pos:line="115" pos:column="59">localCoOccurMatrix</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="115" pos:column="79">.</op:operator>
                <call><name pos:line="116" pos:column="17">OrderByDescending</name><argument_list pos:line="116" pos:column="34">(<argument><expr><lambda><name pos:line="116" pos:column="35">query</name> <op:operator pos:line="116" pos:column="41">=&gt;</op:operator> <name><name pos:line="116" pos:column="44">query</name><op:operator pos:line="116" pos:column="49">.</op:operator><name pos:line="116" pos:column="50">CoOccurrenceCount</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="116" pos:column="68">.</op:operator>
                    <call><name pos:line="117" pos:column="21">TrimIfOverlyLong</name><argument_list pos:line="117" pos:column="37">(<argument><expr><call><name pos:line="117" pos:column="38">GetMaximumCount</name><argument_list pos:line="117" pos:column="53">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="117" pos:column="56">.</op:operator><call><name pos:line="117" pos:column="57">ToArray</name><argument_list pos:line="117" pos:column="64">()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="120" pos:column="9">private</specifier> <name><name pos:line="120" pos:column="17">IEnumerable</name><argument_list pos:line="120" pos:column="28">&lt;<argument><name pos:line="120" pos:column="29">ExtendedAcronym</name></argument>&gt;</argument_list></name></type> <name pos:line="120" pos:column="46">CreateInitialAcronym</name><parameter_list pos:line="120" pos:column="66">(<param><decl><type><name><name pos:line="120" pos:column="67">IEnumerable</name><argument_list pos:line="120" pos:column="78">&lt;<argument><name pos:line="120" pos:column="79">IMatrixEntry</name></argument>&gt;</argument_list></name></type> <name pos:line="120" pos:column="93">entries</name></decl></param>, 
            <param><decl><type><name pos:line="121" pos:column="13">char</name></type> <name pos:line="121" pos:column="18">c1</name></decl></param>, <param><decl><type><name pos:line="121" pos:column="22">char</name></type> <name pos:line="121" pos:column="27">c2</name></decl></param>)</parameter_list>
        <block pos:line="122" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="123" pos:column="13">var</name></type> <name pos:line="123" pos:column="17">list</name> <init pos:line="123" pos:column="22">= <expr><op:operator pos:line="123" pos:column="24">new</op:operator> <call><name><name pos:line="123" pos:column="28">List</name><argument_list pos:line="123" pos:column="32">&lt;<argument><name pos:line="123" pos:column="33">ExtendedAcronym</name></argument>&gt;</argument_list></name><argument_list pos:line="123" pos:column="49">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="124" pos:column="13">foreach (<init><decl><type><name pos:line="124" pos:column="22">var</name></type> <name pos:line="124" pos:column="26">entry</name> <range pos:line="124" pos:column="32">in <expr><name pos:line="124" pos:column="35">entries</name></expr></range></decl></init>)
            <block pos:line="125" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="126" pos:column="17">var</name></type> <name pos:line="126" pos:column="21">firstWord</name> <init pos:line="126" pos:column="31">= <expr><call><name><name pos:line="126" pos:column="33">entry</name><op:operator pos:line="126" pos:column="38">.</op:operator><name pos:line="126" pos:column="39">Row</name><op:operator pos:line="126" pos:column="42">.</op:operator><name pos:line="126" pos:column="43">StartsWith</name></name><argument_list pos:line="126" pos:column="53">(<argument><expr><call><name><name pos:line="126" pos:column="54">c1</name><op:operator pos:line="126" pos:column="56">.</op:operator><name pos:line="126" pos:column="57">ToString</name></name><argument_list pos:line="126" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="126" pos:column="69">?</op:operator> <name><name pos:line="126" pos:column="71">entry</name><op:operator pos:line="126" pos:column="76">.</op:operator><name pos:line="126" pos:column="77">Row</name></name> <op:operator pos:line="126" pos:column="81">:</op:operator> <name><name pos:line="126" pos:column="83">entry</name><op:operator pos:line="126" pos:column="88">.</op:operator><name pos:line="126" pos:column="89">Column</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="127" pos:column="17">var</name></type> <name pos:line="127" pos:column="21">secondWord</name> <init pos:line="127" pos:column="32">= <expr><call><name><name pos:line="127" pos:column="34">firstWord</name><op:operator pos:line="127" pos:column="43">.</op:operator><name pos:line="127" pos:column="44">Equals</name></name><argument_list pos:line="127" pos:column="50">(<argument><expr><name><name pos:line="127" pos:column="51">entry</name><op:operator pos:line="127" pos:column="56">.</op:operator><name pos:line="127" pos:column="57">Row</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="127" pos:column="62">?</op:operator> <name><name pos:line="127" pos:column="64">entry</name><op:operator pos:line="127" pos:column="69">.</op:operator><name pos:line="127" pos:column="70">Column</name></name> <op:operator pos:line="127" pos:column="77">:</op:operator> <name><name pos:line="127" pos:column="79">entry</name><op:operator pos:line="127" pos:column="84">.</op:operator><name pos:line="127" pos:column="85">Row</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="128" pos:column="17">list</name><op:operator pos:line="128" pos:column="21">.</op:operator><name pos:line="128" pos:column="22">Add</name></name><argument_list pos:line="128" pos:column="25">(<argument><expr><op:operator pos:line="128" pos:column="26">new</op:operator> <call><name pos:line="128" pos:column="30">ExtendedAcronym</name><argument_list pos:line="128" pos:column="45">(<argument><expr><op:operator pos:line="128" pos:column="46">new</op:operator> <name><name pos:line="128" pos:column="50">string</name><index pos:line="128" pos:column="56">[]</index></name><block pos:line="128" pos:column="58">{<expr><name pos:line="128" pos:column="59">firstWord</name></expr><op:operator pos:line="128" pos:column="68">,</op:operator> <expr><name pos:line="128" pos:column="70">secondWord</name></expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
            <return pos:line="130" pos:column="13">return <expr><name pos:line="130" pos:column="20">list</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="133" pos:column="9">private</specifier> <name pos:line="133" pos:column="17">bool</name></type> <name pos:line="133" pos:column="22">IsPreconditionMet</name><parameter_list pos:line="133" pos:column="39">(<param><decl><type><name pos:line="133" pos:column="40">string</name></type> <name pos:line="133" pos:column="47">word</name></decl></param>)</parameter_list>
        <block pos:line="134" pos:column="9">{
            <return pos:line="135" pos:column="13">return <expr><call><name><name pos:line="135" pos:column="20">word</name><op:operator pos:line="135" pos:column="24">.</op:operator><name pos:line="135" pos:column="25">Count</name></name><argument_list pos:line="135" pos:column="30">()</argument_list></call> <op:operator pos:line="135" pos:column="33">&gt;=</op:operator> <lit:literal type="number" pos:line="135" pos:column="36">2</lit:literal></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="138" pos:column="9">private</specifier> <name pos:line="138" pos:column="17">bool</name></type> <name pos:line="138" pos:column="22">IsEntryStartWith</name><parameter_list pos:line="138" pos:column="38">(<param><decl><type><name pos:line="138" pos:column="39">IMatrixEntry</name></type> <name pos:line="138" pos:column="52">entry</name></decl></param>, <param><decl><type><name pos:line="138" pos:column="59">char</name></type> <name pos:line="138" pos:column="64">c1</name></decl></param>, <param><decl><type><name pos:line="138" pos:column="68">char</name></type> <name pos:line="138" pos:column="73">c2</name></decl></param>)</parameter_list>
        <block pos:line="139" pos:column="9">{
            <return pos:line="140" pos:column="13">return <expr><call><name><name pos:line="140" pos:column="20">entry</name><op:operator pos:line="140" pos:column="25">.</op:operator><name pos:line="140" pos:column="26">Column</name><op:operator pos:line="140" pos:column="32">.</op:operator><name pos:line="140" pos:column="33">StartsWith</name></name><argument_list pos:line="140" pos:column="43">(<argument><expr><call><name><name pos:line="140" pos:column="44">c1</name><op:operator pos:line="140" pos:column="46">.</op:operator><name pos:line="140" pos:column="47">ToString</name></name><argument_list pos:line="140" pos:column="55">()</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="140" pos:column="59">&amp;&amp;</op:operator> <call><name><name pos:line="140" pos:column="62">entry</name><op:operator pos:line="140" pos:column="67">.</op:operator><name pos:line="140" pos:column="68">Row</name><op:operator pos:line="140" pos:column="71">.</op:operator><name pos:line="140" pos:column="72">StartsWith</name></name><argument_list pos:line="140" pos:column="82">(<argument><expr><call><name><name pos:line="140" pos:column="83">c2</name><op:operator pos:line="140" pos:column="85">.</op:operator><name pos:line="140" pos:column="86">ToString</name></name><argument_list pos:line="140" pos:column="94">()</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="140" pos:column="98">?</op:operator>
                <lit:literal type="boolean" pos:line="141" pos:column="17">true</lit:literal> <op:operator pos:line="141" pos:column="22">:</op:operator> <call><name><name pos:line="141" pos:column="24">entry</name><op:operator pos:line="141" pos:column="29">.</op:operator><name pos:line="141" pos:column="30">Column</name><op:operator pos:line="141" pos:column="36">.</op:operator><name pos:line="141" pos:column="37">StartsWith</name></name><argument_list pos:line="141" pos:column="47">(<argument><expr><call><name><name pos:line="141" pos:column="48">c2</name><op:operator pos:line="141" pos:column="50">.</op:operator><name pos:line="141" pos:column="51">ToString</name></name><argument_list pos:line="141" pos:column="59">()</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="141" pos:column="63">&amp;&amp;</op:operator> <call><name><name pos:line="141" pos:column="66">entry</name><op:operator pos:line="141" pos:column="71">.</op:operator><name pos:line="141" pos:column="72">Row</name><op:operator pos:line="141" pos:column="75">.</op:operator><name pos:line="141" pos:column="76">StartsWith</name></name><argument_list pos:line="141" pos:column="86">(<argument><expr><call><name><name pos:line="141" pos:column="87">c1</name><op:operator pos:line="141" pos:column="89">.</op:operator><name pos:line="141" pos:column="90">ToString</name></name><argument_list pos:line="141" pos:column="98">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="144" pos:column="9">private</specifier> <name pos:line="144" pos:column="17">int</name></type> <name pos:line="144" pos:column="21">GetMaximumCount</name><parameter_list pos:line="144" pos:column="36">()</parameter_list>
        <block pos:line="145" pos:column="9">{
            <return pos:line="146" pos:column="13">return <expr><name><name pos:line="146" pos:column="20">int</name><op:operator pos:line="146" pos:column="23">.</op:operator><name pos:line="146" pos:column="24">MaxValue</name></name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
