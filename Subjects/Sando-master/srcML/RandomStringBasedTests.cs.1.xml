<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Core\Core.UnitTests\Tools\RandomStringBasedTests.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">IO</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Linq</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Text</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">NUnit</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">Framework</name></name>;</using>

<namespace pos:line="8" pos:column="1">namespace <name><name pos:line="8" pos:column="11">Sando</name><op:operator pos:line="8" pos:column="16">.</op:operator><name pos:line="8" pos:column="17">Core</name><op:operator pos:line="8" pos:column="21">.</op:operator><name pos:line="8" pos:column="22">UnitTests</name><op:operator pos:line="8" pos:column="31">.</op:operator><name pos:line="8" pos:column="32">Tools</name></name>
<block pos:line="9" pos:column="1">{
    <class><attribute pos:line="10" pos:column="5">[<expr><name pos:line="10" pos:column="6">TestFixture</name></expr>]</attribute>
    <specifier pos:line="11" pos:column="5">public</specifier> <specifier pos:line="11" pos:column="12">abstract</specifier> class <name pos:line="11" pos:column="27">RandomStringBasedTests</name>
    <block pos:line="12" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="13" pos:column="9">private</specifier> <name><name pos:line="13" pos:column="17">List</name><argument_list pos:line="13" pos:column="21">&lt;<argument><name pos:line="13" pos:column="22">string</name></argument>&gt;</argument_list></name></type> <name pos:line="13" pos:column="30">_createdDirectory</name> <init pos:line="13" pos:column="48">= <expr><op:operator pos:line="13" pos:column="50">new</op:operator> <call><name><name pos:line="13" pos:column="54">List</name><argument_list pos:line="13" pos:column="58">&lt;<argument><name pos:line="13" pos:column="59">string</name></argument>&gt;</argument_list></name><argument_list pos:line="13" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="14" pos:column="9">private</specifier> <specifier pos:line="14" pos:column="17">static</specifier> <name pos:line="14" pos:column="24">Random</name></type> <name pos:line="14" pos:column="31">random</name> <init pos:line="14" pos:column="38">= <expr><op:operator pos:line="14" pos:column="40">new</op:operator> <call><name pos:line="14" pos:column="44">Random</name><argument_list pos:line="14" pos:column="50">(<argument><expr><op:operator pos:line="14" pos:column="51">(</op:operator><name pos:line="14" pos:column="52">int</name><op:operator pos:line="14" pos:column="55">)</op:operator><name><name pos:line="14" pos:column="56">DateTime</name><op:operator pos:line="14" pos:column="64">.</op:operator><name pos:line="14" pos:column="65">Now</name><op:operator pos:line="14" pos:column="68">.</op:operator><name pos:line="14" pos:column="69">Ticks</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <function><type><specifier pos:line="16" pos:column="9">protected</specifier> <name pos:line="16" pos:column="19">string</name></type> <name pos:line="16" pos:column="26">GenerateRandomString</name><parameter_list pos:line="16" pos:column="46">(<param><decl><type><name pos:line="16" pos:column="47">int</name></type> <name pos:line="16" pos:column="51">size</name></decl></param>)</parameter_list>
        <block pos:line="17" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="18" pos:column="13">var</name></type> <name pos:line="18" pos:column="17">builder</name> <init pos:line="18" pos:column="25">= <expr><op:operator pos:line="18" pos:column="27">new</op:operator> <call><name pos:line="18" pos:column="31">StringBuilder</name><argument_list pos:line="18" pos:column="44">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for pos:line="19" pos:column="13">for (<init><decl><type><name pos:line="19" pos:column="18">int</name></type> <name pos:line="19" pos:column="22">i</name> <init pos:line="19" pos:column="24">= <expr><lit:literal type="number" pos:line="19" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="19" pos:column="29">i</name> <op:operator pos:line="19" pos:column="31">&lt;</op:operator> <name pos:line="19" pos:column="33">size</name></expr>;</condition> <incr><expr><name pos:line="19" pos:column="39">i</name><op:operator pos:line="19" pos:column="40">++</op:operator></expr></incr>)
            <block pos:line="20" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="21" pos:column="17">char</name></type> <name pos:line="21" pos:column="22">ch</name> <init pos:line="21" pos:column="25">= <expr><call><name><name pos:line="21" pos:column="27">Convert</name><op:operator pos:line="21" pos:column="34">.</op:operator><name pos:line="21" pos:column="35">ToChar</name></name><argument_list pos:line="21" pos:column="41">(<argument><expr><call><name><name pos:line="21" pos:column="42">Convert</name><op:operator pos:line="21" pos:column="49">.</op:operator><name pos:line="21" pos:column="50">ToInt32</name></name><argument_list pos:line="21" pos:column="57">(<argument><expr><call><name><name pos:line="21" pos:column="58">Math</name><op:operator pos:line="21" pos:column="62">.</op:operator>
                    <name pos:line="22" pos:column="21">Floor</name></name><argument_list pos:line="22" pos:column="26">(<argument><expr><lit:literal type="number" pos:line="22" pos:column="27">26</lit:literal> <op:operator pos:line="22" pos:column="30">*</op:operator> <call><name><name pos:line="22" pos:column="32">random</name><op:operator pos:line="22" pos:column="38">.</op:operator><name pos:line="22" pos:column="39">NextDouble</name></name><argument_list pos:line="22" pos:column="49">()</argument_list></call> <op:operator pos:line="22" pos:column="52">+</op:operator> <lit:literal type="number" pos:line="22" pos:column="54">97</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="23" pos:column="17">builder</name><op:operator pos:line="23" pos:column="24">.</op:operator><name pos:line="23" pos:column="25">Append</name></name><argument_list pos:line="23" pos:column="31">(<argument><expr><name pos:line="23" pos:column="32">ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <return pos:line="25" pos:column="13">return <expr><call><name><name pos:line="25" pos:column="20">builder</name><op:operator pos:line="25" pos:column="27">.</op:operator><name pos:line="25" pos:column="28">ToString</name></name><argument_list pos:line="25" pos:column="36">()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="28" pos:column="9">protected</specifier> <name><name pos:line="28" pos:column="19">List</name><argument_list pos:line="28" pos:column="23">&lt;<argument><name pos:line="28" pos:column="24">string</name></argument>&gt;</argument_list></name></type> <name pos:line="28" pos:column="32">GenerateRandomWordList</name><parameter_list pos:line="28" pos:column="54">(<param><decl><type><name pos:line="28" pos:column="55">int</name></type> <name pos:line="28" pos:column="59">length</name></decl></param>)</parameter_list>
        <block pos:line="29" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="30" pos:column="13">var</name></type> <name pos:line="30" pos:column="17">words</name> <init pos:line="30" pos:column="23">= <expr><op:operator pos:line="30" pos:column="25">new</op:operator> <call><name><name pos:line="30" pos:column="29">List</name><argument_list pos:line="30" pos:column="33">&lt;<argument><name pos:line="30" pos:column="34">String</name></argument>&gt;</argument_list></name><argument_list pos:line="30" pos:column="41">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for pos:line="31" pos:column="13">for (<init><decl><type><name pos:line="31" pos:column="18">int</name></type> <name pos:line="31" pos:column="22">i</name> <init pos:line="31" pos:column="24">= <expr><lit:literal type="number" pos:line="31" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="31" pos:column="29">i</name> <op:operator pos:line="31" pos:column="31">&lt;</op:operator> <name pos:line="31" pos:column="33">length</name></expr>;</condition> <incr><expr><name pos:line="31" pos:column="41">i</name><op:operator pos:line="31" pos:column="42">++</op:operator></expr></incr>)
            <block pos:line="32" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="33" pos:column="17">words</name><op:operator pos:line="33" pos:column="22">.</op:operator><name pos:line="33" pos:column="23">Add</name></name><argument_list pos:line="33" pos:column="26">(<argument><expr><call><name pos:line="33" pos:column="27">GenerateRandomString</name><argument_list pos:line="33" pos:column="47">(<argument><expr><lit:literal type="number" pos:line="33" pos:column="48">15</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <return pos:line="35" pos:column="13">return <expr><name pos:line="35" pos:column="20">words</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="38" pos:column="9">protected</specifier> <name pos:line="38" pos:column="19">void</name></type> <name pos:line="38" pos:column="24">CreateDirectory</name><parameter_list pos:line="38" pos:column="39">(<param><decl><type><name pos:line="38" pos:column="40">String</name></type> <name pos:line="38" pos:column="47">path</name></decl></param>)</parameter_list>
        <block pos:line="39" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="40" pos:column="13">Directory</name><op:operator pos:line="40" pos:column="22">.</op:operator><name pos:line="40" pos:column="23">CreateDirectory</name></name><argument_list pos:line="40" pos:column="38">(<argument><expr><name pos:line="40" pos:column="39">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if pos:line="41" pos:column="13">if <condition pos:line="41" pos:column="16">(<expr><op:operator pos:line="41" pos:column="17">!</op:operator><call><name><name pos:line="41" pos:column="18">_createdDirectory</name><op:operator pos:line="41" pos:column="35">.</op:operator><name pos:line="41" pos:column="36">Contains</name></name><argument_list pos:line="41" pos:column="44">(<argument><expr><name pos:line="41" pos:column="45">path</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="41" pos:column="51">
                <expr_stmt><expr><call><name><name pos:line="42" pos:column="17">_createdDirectory</name><op:operator pos:line="42" pos:column="34">.</op:operator><name pos:line="42" pos:column="35">Add</name></name><argument_list pos:line="42" pos:column="38">(<argument><expr><name pos:line="42" pos:column="39">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></function>

        <function><type><specifier pos:line="45" pos:column="9">protected</specifier> <name pos:line="45" pos:column="19">string</name></type> <name pos:line="45" pos:column="26">CombiningWords</name><parameter_list pos:line="45" pos:column="40">(<param><decl><type><name><name pos:line="45" pos:column="41">IEnumerable</name><argument_list pos:line="45" pos:column="52">&lt;<argument><name pos:line="45" pos:column="53">String</name></argument>&gt;</argument_list></name></type> <name pos:line="45" pos:column="61">words</name></decl></param>, <param><decl><type><name pos:line="45" pos:column="68">int</name></type> <name pos:line="45" pos:column="72">wordCount</name></decl></param>)</parameter_list>
        <block pos:line="46" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="47" pos:column="13">var</name></type> <name pos:line="47" pos:column="17">sb</name> <init pos:line="47" pos:column="20">= <expr><op:operator pos:line="47" pos:column="22">new</op:operator> <call><name pos:line="47" pos:column="26">StringBuilder</name><argument_list pos:line="47" pos:column="39">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for pos:line="48" pos:column="13">for (<init><decl><type><name pos:line="48" pos:column="18">int</name></type> <name pos:line="48" pos:column="22">i</name> <init pos:line="48" pos:column="24">= <expr><lit:literal type="number" pos:line="48" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="48" pos:column="29">i</name> <op:operator pos:line="48" pos:column="31">&lt;</op:operator> <name pos:line="48" pos:column="33">wordCount</name></expr>;</condition> <incr><expr><name pos:line="48" pos:column="44">i</name><op:operator pos:line="48" pos:column="45">++</op:operator></expr></incr>)
            <block pos:line="49" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="50" pos:column="17">int</name></type> <name pos:line="50" pos:column="21">index</name> <init pos:line="50" pos:column="27">= <expr><call><name><name pos:line="50" pos:column="29">random</name><op:operator pos:line="50" pos:column="35">.</op:operator><name pos:line="50" pos:column="36">Next</name></name><argument_list pos:line="50" pos:column="40">()</argument_list></call> <op:operator pos:line="50" pos:column="43">%</op:operator> <call><name><name pos:line="50" pos:column="45">words</name><op:operator pos:line="50" pos:column="50">.</op:operator><name pos:line="50" pos:column="51">Count</name></name><argument_list pos:line="50" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="51" pos:column="17">sb</name><op:operator pos:line="51" pos:column="19">.</op:operator><name pos:line="51" pos:column="20">Append</name></name><argument_list pos:line="51" pos:column="26">(<argument><expr><call><name><name pos:line="51" pos:column="27">words</name><op:operator pos:line="51" pos:column="32">.</op:operator><name pos:line="51" pos:column="33">ElementAt</name></name><argument_list pos:line="51" pos:column="42">(<argument><expr><name pos:line="51" pos:column="43">index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <return pos:line="53" pos:column="13">return <expr><call><name><name pos:line="53" pos:column="20">sb</name><op:operator pos:line="53" pos:column="22">.</op:operator><name pos:line="53" pos:column="23">ToString</name></name><argument_list pos:line="53" pos:column="31">()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="56" pos:column="9">protected</specifier> <name pos:line="56" pos:column="19">void</name></type> <name pos:line="56" pos:column="24">DeleteCreatedFile</name><parameter_list pos:line="56" pos:column="41">()</parameter_list>
        <block pos:line="57" pos:column="9">{
            <foreach pos:line="58" pos:column="13">foreach (<init><decl><type><name pos:line="58" pos:column="22">string</name></type> <name pos:line="58" pos:column="29">directory</name> <range pos:line="58" pos:column="39">in <expr><name pos:line="58" pos:column="42">_createdDirectory</name></expr></range></decl></init>)
            <block pos:line="59" pos:column="13">{
                <if pos:line="60" pos:column="17">if <condition pos:line="60" pos:column="20">(<expr><call><name><name pos:line="60" pos:column="21">Directory</name><op:operator pos:line="60" pos:column="30">.</op:operator><name pos:line="60" pos:column="31">Exists</name></name><argument_list pos:line="60" pos:column="37">(<argument><expr><name pos:line="60" pos:column="38">directory</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="60" pos:column="49">
                <block pos:line="61" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="62" pos:column="21">Directory</name><op:operator pos:line="62" pos:column="30">.</op:operator><name pos:line="62" pos:column="31">Delete</name></name><argument_list pos:line="62" pos:column="37">(<argument><expr><name pos:line="62" pos:column="38">directory</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="62" pos:column="49">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></foreach>
            <expr_stmt><expr><call><name><name pos:line="65" pos:column="13">_createdDirectory</name><op:operator pos:line="65" pos:column="30">.</op:operator><name pos:line="65" pos:column="31">Clear</name></name><argument_list pos:line="65" pos:column="36">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
