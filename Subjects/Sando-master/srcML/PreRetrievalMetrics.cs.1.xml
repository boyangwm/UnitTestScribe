<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Indexer\Indexer\Metrics\PreRetrievalMetrics.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Text</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Lucene</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Net</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">Index</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Sando</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">Indexer</name><op:operator pos:line="6" pos:column="20">.</op:operator><name pos:line="6" pos:column="21">Documents</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Lucene</name><op:operator pos:line="7" pos:column="13">.</op:operator><name pos:line="7" pos:column="14">Net</name><op:operator pos:line="7" pos:column="17">.</op:operator><name pos:line="7" pos:column="18">Analysis</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">System</name><op:operator pos:line="8" pos:column="13">.</op:operator><name pos:line="8" pos:column="14">IO</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">Lucene</name><op:operator pos:line="9" pos:column="13">.</op:operator><name pos:line="9" pos:column="14">Net</name><op:operator pos:line="9" pos:column="17">.</op:operator><name pos:line="9" pos:column="18">Analysis</name><op:operator pos:line="9" pos:column="26">.</op:operator><name pos:line="9" pos:column="27">Tokenattributes</name></name>;</using>


<namespace pos:line="12" pos:column="1">namespace <name><name pos:line="12" pos:column="11">Sando</name><op:operator pos:line="12" pos:column="16">.</op:operator><name pos:line="12" pos:column="17">Indexer</name><op:operator pos:line="12" pos:column="24">.</op:operator><name pos:line="12" pos:column="25">Searching</name><op:operator pos:line="12" pos:column="34">.</op:operator><name pos:line="12" pos:column="35">Metrics</name></name>
<block pos:line="13" pos:column="1">{
	<class><specifier pos:line="14" pos:column="9">public</specifier> class <name pos:line="14" pos:column="22">PreRetrievalMetrics</name>
	<block pos:line="15" pos:column="9">{
		<constructor><specifier pos:line="16" pos:column="17">public</specifier> <name pos:line="16" pos:column="24">PreRetrievalMetrics</name><parameter_list pos:line="16" pos:column="43">(<param><decl><type><name pos:line="16" pos:column="44">IndexReader</name></type> <name pos:line="16" pos:column="56">indexReader</name></decl></param>, <param><decl><type><name pos:line="16" pos:column="69">Analyzer</name></type> <name pos:line="16" pos:column="78">analyzer</name></decl></param>)</parameter_list>
		<block pos:line="17" pos:column="17">{
			<expr_stmt><expr><name pos:line="18" pos:column="25">Reader</name> <op:operator pos:line="18" pos:column="32">=</op:operator> <name pos:line="18" pos:column="34">indexReader</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="19" pos:column="13">Stemmer</name> <op:operator pos:line="19" pos:column="21">=</op:operator> <name pos:line="19" pos:column="23">analyzer</name></expr>;</expr_stmt>
		}</block></constructor>

		<cpp:region pos:line="22" pos:column="17">#<cpp:directive pos:line="22" pos:column="18">region</cpp:directive> specificity</cpp:region>

		<function><type><specifier pos:line="24" pos:column="17">public</specifier> <name pos:line="24" pos:column="24">double</name></type> <name pos:line="24" pos:column="31">AvgIdf</name><parameter_list pos:line="24" pos:column="37">(<param><decl><type><name pos:line="24" pos:column="38">string</name></type> <name pos:line="24" pos:column="45">query</name></decl></param>)</parameter_list>
		<block pos:line="25" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="26" pos:column="25">double</name></type> <name pos:line="26" pos:column="32">SumIdf</name> <init pos:line="26" pos:column="39">= <expr><lit:literal type="number" pos:line="26" pos:column="41">0.0</lit:literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="27" pos:column="13">query</name> <op:operator pos:line="27" pos:column="19">=</op:operator> <call><name pos:line="27" pos:column="21">StemText</name><argument_list pos:line="27" pos:column="29">(<argument><expr><name pos:line="27" pos:column="30">query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="28" pos:column="13">string</name><index pos:line="28" pos:column="19">[]</index></type> <name pos:line="28" pos:column="22">terms</name> <init pos:line="28" pos:column="28">= <expr><call><name><name pos:line="28" pos:column="30">query</name><op:operator pos:line="28" pos:column="35">.</op:operator><name pos:line="28" pos:column="36">Split</name></name><argument_list pos:line="28" pos:column="41">(<argument><expr><lit:literal type="char" pos:line="28" pos:column="42">' '</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<foreach pos:line="29" pos:column="25">foreach(<init><decl><type><name pos:line="29" pos:column="33">var</name></type> <name pos:line="29" pos:column="37">term</name> <range pos:line="29" pos:column="42">in <expr><name pos:line="29" pos:column="45">terms</name></expr></range></decl></init>)
			<block pos:line="30" pos:column="25">{
				<expr_stmt><expr><name pos:line="31" pos:column="33">SumIdf</name> <op:operator pos:line="31" pos:column="40">+=</op:operator> <call><name pos:line="31" pos:column="43">Idf</name><argument_list pos:line="31" pos:column="46">(<argument><expr><name pos:line="31" pos:column="47">term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></foreach>
			<return pos:line="33" pos:column="25">return <expr><op:operator pos:line="33" pos:column="32">(</op:operator><name pos:line="33" pos:column="33">SumIdf</name> <op:operator pos:line="33" pos:column="40">/</op:operator> <name><name pos:line="33" pos:column="42">terms</name><op:operator pos:line="33" pos:column="47">.</op:operator><name pos:line="33" pos:column="48">Length</name></name><op:operator pos:line="33" pos:column="54">)</op:operator></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="36" pos:column="17">public</specifier> <name pos:line="36" pos:column="24">double</name></type> <name pos:line="36" pos:column="31">MaxIdf</name><parameter_list pos:line="36" pos:column="37">(<param><decl><type><name pos:line="36" pos:column="38">string</name></type> <name pos:line="36" pos:column="45">query</name></decl></param>)</parameter_list>
		<block pos:line="37" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="38" pos:column="25">double</name></type> <name pos:line="38" pos:column="32">MaxIdf</name> <init pos:line="38" pos:column="39">= <expr><name><name pos:line="38" pos:column="41">Double</name><op:operator pos:line="38" pos:column="47">.</op:operator><name pos:line="38" pos:column="48">MinValue</name></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="39" pos:column="25">query</name> <op:operator pos:line="39" pos:column="31">=</op:operator> <call><name pos:line="39" pos:column="33">StemText</name><argument_list pos:line="39" pos:column="41">(<argument><expr><name pos:line="39" pos:column="42">query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="40" pos:column="25">string</name><index pos:line="40" pos:column="31">[]</index></type> <name pos:line="40" pos:column="34">terms</name> <init pos:line="40" pos:column="40">= <expr><call><name><name pos:line="40" pos:column="42">query</name><op:operator pos:line="40" pos:column="47">.</op:operator><name pos:line="40" pos:column="48">Split</name></name><argument_list pos:line="40" pos:column="53">(<argument><expr><lit:literal type="char" pos:line="40" pos:column="54">' '</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<foreach pos:line="41" pos:column="25">foreach(<init><decl><type><name pos:line="41" pos:column="33">var</name></type> <name pos:line="41" pos:column="37">term</name> <range pos:line="41" pos:column="42">in <expr><name pos:line="41" pos:column="45">terms</name></expr></range></decl></init>)
			<block pos:line="42" pos:column="25">{
				<if pos:line="43" pos:column="33">if<condition pos:line="43" pos:column="35">(<expr><name pos:line="43" pos:column="36">MaxIdf</name> <op:operator pos:line="43" pos:column="43">&lt;</op:operator> <call><name pos:line="43" pos:column="45">Idf</name><argument_list pos:line="43" pos:column="48">(<argument><expr><name pos:line="43" pos:column="49">term</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="43" pos:column="55"> <expr_stmt><expr><name pos:line="43" pos:column="56">MaxIdf</name> <op:operator pos:line="43" pos:column="63">=</op:operator> <call><name pos:line="43" pos:column="65">Idf</name><argument_list pos:line="43" pos:column="68">(<argument><expr><name pos:line="43" pos:column="69">term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
			}</block></foreach>
			<return pos:line="45" pos:column="25">return <expr><name pos:line="45" pos:column="32">MaxIdf</name></expr>;</return>
		}</block></function>


		<function><type><specifier pos:line="49" pos:column="17">public</specifier> <name pos:line="49" pos:column="24">double</name></type> <name pos:line="49" pos:column="31">DevIdf</name><parameter_list pos:line="49" pos:column="37">(<param><decl><type><name pos:line="49" pos:column="38">string</name></type> <name pos:line="49" pos:column="45">query</name></decl></param>)</parameter_list>
		<block pos:line="50" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="51" pos:column="25">double</name></type> <name pos:line="51" pos:column="32">diff</name> <init pos:line="51" pos:column="37">= <expr><lit:literal type="number" pos:line="51" pos:column="39">0.0</lit:literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="52" pos:column="13">query</name> <op:operator pos:line="52" pos:column="19">=</op:operator> <call><name pos:line="52" pos:column="21">StemText</name><argument_list pos:line="52" pos:column="29">(<argument><expr><name pos:line="52" pos:column="30">query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="53" pos:column="25">double</name></type> <name pos:line="53" pos:column="32">avgIdf</name> <init pos:line="53" pos:column="39">= <expr><call><name pos:line="53" pos:column="41">AvgIdf</name><argument_list pos:line="53" pos:column="47">(<argument><expr><name pos:line="53" pos:column="48">query</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="54" pos:column="25">string</name><index pos:line="54" pos:column="31">[]</index></type> <name pos:line="54" pos:column="34">terms</name> <init pos:line="54" pos:column="40">= <expr><call><name><name pos:line="54" pos:column="42">query</name><op:operator pos:line="54" pos:column="47">.</op:operator><name pos:line="54" pos:column="48">Split</name></name><argument_list pos:line="54" pos:column="53">(<argument><expr><lit:literal type="char" pos:line="54" pos:column="54">' '</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<foreach pos:line="55" pos:column="25">foreach(<init><decl><type><name pos:line="55" pos:column="33">var</name></type> <name pos:line="55" pos:column="37">term</name> <range pos:line="55" pos:column="42">in <expr><name pos:line="55" pos:column="45">terms</name></expr></range></decl></init>)
			<block pos:line="56" pos:column="25">{
				<expr_stmt><expr><name pos:line="57" pos:column="33">diff</name> <op:operator pos:line="57" pos:column="38">+=</op:operator> <call><name><name pos:line="57" pos:column="41">Math</name><op:operator pos:line="57" pos:column="45">.</op:operator><name pos:line="57" pos:column="46">Pow</name></name><argument_list pos:line="57" pos:column="49">(<argument><expr><call><name pos:line="57" pos:column="50">Idf</name><argument_list pos:line="57" pos:column="53">(<argument><expr><name pos:line="57" pos:column="54">term</name></expr></argument>)</argument_list></call> <op:operator pos:line="57" pos:column="60">-</op:operator> <name pos:line="57" pos:column="62">avgIdf</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="57" pos:column="70">2.0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></foreach>
			<return pos:line="59" pos:column="25">return <expr><call><name><name pos:line="59" pos:column="32">Math</name><op:operator pos:line="59" pos:column="36">.</op:operator><name pos:line="59" pos:column="37">Sqrt</name></name><argument_list pos:line="59" pos:column="41">(<argument><expr><name pos:line="59" pos:column="42">diff</name> <op:operator pos:line="59" pos:column="47">/</op:operator> <name><name pos:line="59" pos:column="49">terms</name><op:operator pos:line="59" pos:column="54">.</op:operator><name pos:line="59" pos:column="55">Length</name></name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<cpp:endregion pos:line="62" pos:column="17">#<cpp:directive pos:line="62" pos:column="18">endregion</cpp:directive></cpp:endregion>

		<cpp:region pos:line="64" pos:column="17">#<cpp:directive pos:line="64" pos:column="18">region</cpp:directive> similarity</cpp:region>

		<function><type><specifier pos:line="66" pos:column="17">public</specifier> <name pos:line="66" pos:column="24">double</name></type> <name pos:line="66" pos:column="31">AvgSqc</name><parameter_list pos:line="66" pos:column="37">(<param><decl><type><name pos:line="66" pos:column="38">string</name></type> <name pos:line="66" pos:column="45">query</name></decl></param>)</parameter_list>
		<block pos:line="67" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="68" pos:column="25">double</name></type> <name pos:line="68" pos:column="32">SumSqc</name> <init pos:line="68" pos:column="39">= <expr><lit:literal type="number" pos:line="68" pos:column="41">0.0</lit:literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="69" pos:column="13">query</name> <op:operator pos:line="69" pos:column="19">=</op:operator> <call><name pos:line="69" pos:column="21">StemText</name><argument_list pos:line="69" pos:column="29">(<argument><expr><name pos:line="69" pos:column="30">query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="70" pos:column="25">string</name><index pos:line="70" pos:column="31">[]</index></type> <name pos:line="70" pos:column="34">terms</name> <init pos:line="70" pos:column="40">= <expr><call><name><name pos:line="70" pos:column="42">query</name><op:operator pos:line="70" pos:column="47">.</op:operator><name pos:line="70" pos:column="48">Split</name></name><argument_list pos:line="70" pos:column="53">(<argument><expr><lit:literal type="char" pos:line="70" pos:column="54">' '</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<foreach pos:line="71" pos:column="25">foreach(<init><decl><type><name pos:line="71" pos:column="33">var</name></type> <name pos:line="71" pos:column="37">term</name> <range pos:line="71" pos:column="42">in <expr><name pos:line="71" pos:column="45">terms</name></expr></range></decl></init>)
			<block pos:line="72" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="73" pos:column="33">double</name></type> <name pos:line="73" pos:column="40">tfCorp</name> <init pos:line="73" pos:column="47">= <expr><call><name pos:line="73" pos:column="49">TfOfCorpus</name><argument_list pos:line="73" pos:column="59">(<argument><expr><name pos:line="73" pos:column="60">term</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="74" pos:column="33">double</name></type> <name pos:line="74" pos:column="40">idf</name> <init pos:line="74" pos:column="44">= <expr><call><name pos:line="74" pos:column="46">Idf</name><argument_list pos:line="74" pos:column="49">(<argument><expr><name pos:line="74" pos:column="50">term</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="75" pos:column="33">if<condition pos:line="75" pos:column="35">(<expr><name pos:line="75" pos:column="36">tfCorp</name> <op:operator pos:line="75" pos:column="43">&gt;</op:operator> <lit:literal type="number" pos:line="75" pos:column="45">0.0</lit:literal></expr>)</condition><then pos:line="75" pos:column="49">
				<block pos:line="76" pos:column="33">{
					<expr_stmt><expr><name pos:line="77" pos:column="41">SumSqc</name> <op:operator pos:line="77" pos:column="48">+=</op:operator> <op:operator pos:line="77" pos:column="51">(</op:operator><op:operator pos:line="77" pos:column="52">(</op:operator><lit:literal type="number" pos:line="77" pos:column="53">1</lit:literal> <op:operator pos:line="77" pos:column="55">+</op:operator> <call><name><name pos:line="77" pos:column="57">Math</name><op:operator pos:line="77" pos:column="61">.</op:operator><name pos:line="77" pos:column="62">Log</name></name><argument_list pos:line="77" pos:column="65">(<argument><expr><name pos:line="77" pos:column="66">tfCorp</name></expr></argument>)</argument_list></call><op:operator pos:line="77" pos:column="73">)</op:operator> <op:operator pos:line="77" pos:column="75">*</op:operator> <name pos:line="77" pos:column="77">idf</name><op:operator pos:line="77" pos:column="80">)</op:operator></expr>;</expr_stmt>
				}</block></then>
				<else pos:line="79" pos:column="33">else
				<block pos:line="80" pos:column="33">{
					<expr_stmt><expr><name pos:line="81" pos:column="41">SumSqc</name> <op:operator pos:line="81" pos:column="48">+=</op:operator> <lit:literal type="number" pos:line="81" pos:column="51">1</lit:literal> <op:operator pos:line="81" pos:column="53">*</op:operator> <name pos:line="81" pos:column="55">idf</name></expr>;</expr_stmt>
				}</block></else></if>
			}</block></foreach>
			<return pos:line="84" pos:column="25">return <expr><op:operator pos:line="84" pos:column="32">(</op:operator><name pos:line="84" pos:column="33">SumSqc</name> <op:operator pos:line="84" pos:column="40">/</op:operator> <name><name pos:line="84" pos:column="42">terms</name><op:operator pos:line="84" pos:column="47">.</op:operator><name pos:line="84" pos:column="48">Length</name></name><op:operator pos:line="84" pos:column="54">)</op:operator></expr>;</return>
		}</block></function>

		<cpp:endregion pos:line="87" pos:column="17">#<cpp:directive pos:line="87" pos:column="18">endregion</cpp:directive></cpp:endregion>

		<cpp:region pos:line="89" pos:column="17">#<cpp:directive pos:line="89" pos:column="18">region</cpp:directive> coherency</cpp:region>

		<function><type><specifier pos:line="91" pos:column="17">public</specifier> <name pos:line="91" pos:column="24">double</name></type> <name pos:line="91" pos:column="31">AvgVar</name><parameter_list pos:line="91" pos:column="37">(<param><decl><type><name pos:line="91" pos:column="38">string</name></type> <name pos:line="91" pos:column="45">query</name></decl></param>)</parameter_list>
		<block pos:line="92" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="93" pos:column="25">double</name></type> <name pos:line="93" pos:column="32">AvgVar</name> <init pos:line="93" pos:column="39">= <expr><lit:literal type="number" pos:line="93" pos:column="41">0.0</lit:literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="94" pos:column="13">query</name> <op:operator pos:line="94" pos:column="19">=</op:operator> <call><name pos:line="94" pos:column="21">StemText</name><argument_list pos:line="94" pos:column="29">(<argument><expr><name pos:line="94" pos:column="30">query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="95" pos:column="25">string</name><index pos:line="95" pos:column="31">[]</index></type> <name pos:line="95" pos:column="34">terms</name> <init pos:line="95" pos:column="40">= <expr><call><name><name pos:line="95" pos:column="42">query</name><op:operator pos:line="95" pos:column="47">.</op:operator><name pos:line="95" pos:column="48">Split</name></name><argument_list pos:line="95" pos:column="53">(<argument><expr><lit:literal type="char" pos:line="95" pos:column="54">' '</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<foreach pos:line="96" pos:column="25">foreach(<init><decl><type><name pos:line="96" pos:column="33">var</name></type> <name pos:line="96" pos:column="37">term</name> <range pos:line="96" pos:column="42">in <expr><name pos:line="96" pos:column="45">terms</name></expr></range></decl></init>)
			<block pos:line="97" pos:column="25">{
				<expr_stmt><expr><name pos:line="98" pos:column="33">AvgVar</name> <op:operator pos:line="98" pos:column="40">+=</op:operator> <call><name pos:line="98" pos:column="43">Var</name><argument_list pos:line="98" pos:column="46">(<argument><expr><name pos:line="98" pos:column="47">term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></foreach>
			<return pos:line="100" pos:column="25">return <expr><op:operator pos:line="100" pos:column="32">(</op:operator><name pos:line="100" pos:column="33">AvgVar</name> <op:operator pos:line="100" pos:column="40">/</op:operator> <name><name pos:line="100" pos:column="42">terms</name><op:operator pos:line="100" pos:column="47">.</op:operator><name pos:line="100" pos:column="48">Length</name></name><op:operator pos:line="100" pos:column="54">)</op:operator></expr>;</return>
		}</block></function>

        <function><type><specifier pos:line="103" pos:column="9">private</specifier> <name pos:line="103" pos:column="17">double</name></type> <name pos:line="103" pos:column="24">Var</name><parameter_list pos:line="103" pos:column="27">(<param><decl><type><name pos:line="103" pos:column="28">string</name></type> <name pos:line="103" pos:column="35">term</name></decl></param>)</parameter_list>
        <block pos:line="104" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="105" pos:column="13">int</name></type> <name pos:line="105" pos:column="17">num_docs</name> <init pos:line="105" pos:column="26">= <expr><lit:literal type="number" pos:line="105" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="106" pos:column="13">List</name><argument_list pos:line="106" pos:column="17">&lt;<argument><name pos:line="106" pos:column="18">double</name></argument>&gt;</argument_list></name></type> <name pos:line="106" pos:column="26">freqs</name> <init pos:line="106" pos:column="32">= <expr><op:operator pos:line="106" pos:column="34">new</op:operator> <call><name><name pos:line="106" pos:column="38">List</name><argument_list pos:line="106" pos:column="42">&lt;<argument><name pos:line="106" pos:column="43">double</name></argument>&gt;</argument_list></name><argument_list pos:line="106" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="107" pos:column="13">TermDocs</name></type> <name pos:line="107" pos:column="22">termDocs</name> <init pos:line="107" pos:column="31">= <expr><call><name><name pos:line="107" pos:column="33">Reader</name><op:operator pos:line="107" pos:column="39">.</op:operator><name pos:line="107" pos:column="40">TermDocs</name></name><argument_list pos:line="107" pos:column="48">(<argument><expr><op:operator pos:line="107" pos:column="49">new</op:operator> <call><name pos:line="107" pos:column="53">Term</name><argument_list pos:line="107" pos:column="57">(<argument><expr><call><name><name pos:line="107" pos:column="58">SandoField</name><op:operator pos:line="107" pos:column="68">.</op:operator><name pos:line="107" pos:column="69">Name</name><op:operator pos:line="107" pos:column="73">.</op:operator><name pos:line="107" pos:column="74">ToString</name></name><argument_list pos:line="107" pos:column="82">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="107" pos:column="86">term</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="108" pos:column="13">if <condition pos:line="108" pos:column="16">(<expr><name pos:line="108" pos:column="17">termDocs</name> <op:operator pos:line="108" pos:column="26">!=</op:operator> <name pos:line="108" pos:column="29">null</name></expr>)</condition><then pos:line="108" pos:column="34">
            <block pos:line="109" pos:column="13">{
                <while pos:line="110" pos:column="17">while <condition pos:line="110" pos:column="23">(<expr><call><name><name pos:line="110" pos:column="24">termDocs</name><op:operator pos:line="110" pos:column="32">.</op:operator><name pos:line="110" pos:column="33">Next</name></name><argument_list pos:line="110" pos:column="37">()</argument_list></call></expr>)</condition>
                <block pos:line="111" pos:column="17">{
                    <expr_stmt><expr><name pos:line="112" pos:column="21">num_docs</name><op:operator pos:line="112" pos:column="29">++</op:operator></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="113" pos:column="21">freqs</name><op:operator pos:line="113" pos:column="26">.</op:operator><name pos:line="113" pos:column="27">Add</name></name><argument_list pos:line="113" pos:column="30">(<argument><expr><call><name><name pos:line="113" pos:column="31">termDocs</name><op:operator pos:line="113" pos:column="39">.</op:operator><name pos:line="113" pos:column="40">Freq</name></name><argument_list pos:line="113" pos:column="44">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></while>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="117" pos:column="13">double</name></type> <name pos:line="117" pos:column="20">var</name> <init pos:line="117" pos:column="24">= <expr><lit:literal type="number" pos:line="117" pos:column="26">0.0</lit:literal></expr></init></decl>;</decl_stmt>
            <if pos:line="118" pos:column="13">if <condition pos:line="118" pos:column="16">(<expr><name><name pos:line="118" pos:column="17">freqs</name><op:operator pos:line="118" pos:column="22">.</op:operator><name pos:line="118" pos:column="23">Count</name></name> <op:operator pos:line="118" pos:column="29">&gt;</op:operator> <lit:literal type="number" pos:line="118" pos:column="31">0</lit:literal></expr>)</condition><then pos:line="118" pos:column="33">
            <block pos:line="119" pos:column="13">{
                <decl_stmt><decl><type><name><name pos:line="120" pos:column="17">List</name><argument_list pos:line="120" pos:column="21">&lt;<argument><name pos:line="120" pos:column="22">double</name></argument>&gt;</argument_list></name></type> <name pos:line="120" pos:column="30">weights</name> <init pos:line="120" pos:column="38">= <expr><op:operator pos:line="120" pos:column="40">new</op:operator> <call><name><name pos:line="120" pos:column="44">List</name><argument_list pos:line="120" pos:column="48">&lt;<argument><name pos:line="120" pos:column="49">double</name></argument>&gt;</argument_list></name><argument_list pos:line="120" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <foreach pos:line="121" pos:column="17">foreach (<init><decl><type><name pos:line="121" pos:column="26">var</name></type> <name pos:line="121" pos:column="30">freq</name> <range pos:line="121" pos:column="35">in <expr><name pos:line="121" pos:column="38">freqs</name></expr></range></decl></init>)
                <block pos:line="122" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="123" pos:column="21">weights</name><op:operator pos:line="123" pos:column="28">.</op:operator><name pos:line="123" pos:column="29">Add</name></name><argument_list pos:line="123" pos:column="32">(<argument><expr><op:operator pos:line="123" pos:column="33">(</op:operator><call><name><name pos:line="123" pos:column="34">Math</name><op:operator pos:line="123" pos:column="38">.</op:operator><name pos:line="123" pos:column="39">Log</name></name><argument_list pos:line="123" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="123" pos:column="43">1</lit:literal> <op:operator pos:line="123" pos:column="45">+</op:operator> <name pos:line="123" pos:column="47">freq</name></expr></argument>)</argument_list></call> <op:operator pos:line="123" pos:column="53">*</op:operator> <call><name pos:line="123" pos:column="55">Idf</name><argument_list pos:line="123" pos:column="58">(<argument><expr><name pos:line="123" pos:column="59">term</name></expr></argument>)</argument_list></call><op:operator pos:line="123" pos:column="64">)</op:operator> <op:operator pos:line="123" pos:column="66">/</op:operator> <name pos:line="123" pos:column="68">num_docs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>

                <decl_stmt><decl><type><name pos:line="126" pos:column="17">double</name></type> <name pos:line="126" pos:column="24">avg_w</name> <init pos:line="126" pos:column="30">= <expr><lit:literal type="number" pos:line="126" pos:column="32">0.0</lit:literal></expr></init></decl>;</decl_stmt>
                <foreach pos:line="127" pos:column="17">foreach (<init><decl><type><name pos:line="127" pos:column="26">var</name></type> <name pos:line="127" pos:column="30">w</name> <range pos:line="127" pos:column="32">in <expr><name pos:line="127" pos:column="35">weights</name></expr></range></decl></init>)
                <block pos:line="128" pos:column="17">{
                    <expr_stmt><expr><name pos:line="129" pos:column="21">avg_w</name> <op:operator pos:line="129" pos:column="27">+=</op:operator> <name pos:line="129" pos:column="30">w</name></expr>;</expr_stmt>
                }</block></foreach>
                <expr_stmt><expr><name pos:line="131" pos:column="17">avg_w</name> <op:operator pos:line="131" pos:column="23">=</op:operator> <name pos:line="131" pos:column="25">avg_w</name> <op:operator pos:line="131" pos:column="31">/</op:operator> <name pos:line="131" pos:column="33">num_docs</name></expr>;</expr_stmt>

                <foreach pos:line="133" pos:column="17">foreach (<init><decl><type><name pos:line="133" pos:column="26">var</name></type> <name pos:line="133" pos:column="30">w</name> <range pos:line="133" pos:column="32">in <expr><name pos:line="133" pos:column="35">weights</name></expr></range></decl></init>)
                <block pos:line="134" pos:column="17">{
                    <expr_stmt><expr><name pos:line="135" pos:column="21">var</name> <op:operator pos:line="135" pos:column="25">+=</op:operator> <call><name><name pos:line="135" pos:column="28">Math</name><op:operator pos:line="135" pos:column="32">.</op:operator><name pos:line="135" pos:column="33">Abs</name></name><argument_list pos:line="135" pos:column="36">(<argument><expr><name pos:line="135" pos:column="37">w</name> <op:operator pos:line="135" pos:column="39">-</op:operator> <name pos:line="135" pos:column="41">avg_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>
                <expr_stmt><expr><name pos:line="137" pos:column="17">var</name> <op:operator pos:line="137" pos:column="21">=</op:operator> <name pos:line="137" pos:column="23">var</name> <op:operator pos:line="137" pos:column="27">/</op:operator> <name pos:line="137" pos:column="29">num_docs</name></expr>;</expr_stmt>
            }</block></then></if>
            <return pos:line="139" pos:column="13">return <expr><name pos:line="139" pos:column="20">var</name></expr>;</return>
        }</block></function>

		<cpp:endregion pos:line="142" pos:column="17">#<cpp:directive pos:line="142" pos:column="18">endregion</cpp:directive></cpp:endregion>

		<function><type><specifier pos:line="144" pos:column="17">private</specifier> <name pos:line="144" pos:column="25">int</name></type> <name pos:line="144" pos:column="29">TfOfCorpus</name><parameter_list pos:line="144" pos:column="39">(<param><decl><type><name pos:line="144" pos:column="40">string</name></type> <name pos:line="144" pos:column="47">term</name></decl></param>)</parameter_list>
		<block pos:line="145" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="146" pos:column="25">int</name></type> <name pos:line="146" pos:column="29">tf</name> <init pos:line="146" pos:column="32">= <expr><lit:literal type="number" pos:line="146" pos:column="34">0</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="147" pos:column="25">TermDocs</name></type> <name pos:line="147" pos:column="34">termDocs</name> <init pos:line="147" pos:column="43">= <expr><call><name><name pos:line="147" pos:column="45">Reader</name><op:operator pos:line="147" pos:column="51">.</op:operator><name pos:line="147" pos:column="52">TermDocs</name></name><argument_list pos:line="147" pos:column="60">(<argument><expr><op:operator pos:line="147" pos:column="61">new</op:operator> <call><name pos:line="147" pos:column="65">Term</name><argument_list pos:line="147" pos:column="69">(<argument><expr><call><name><name pos:line="147" pos:column="70">SandoField</name><op:operator pos:line="147" pos:column="80">.</op:operator><name pos:line="147" pos:column="81">Name</name><op:operator pos:line="147" pos:column="85">.</op:operator><name pos:line="147" pos:column="86">ToString</name></name><argument_list pos:line="147" pos:column="94">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="147" pos:column="98">term</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="148" pos:column="25">if<condition pos:line="148" pos:column="27">(<expr><name pos:line="148" pos:column="28">termDocs</name> <op:operator pos:line="148" pos:column="37">!=</op:operator> <name pos:line="148" pos:column="40">null</name></expr>)</condition><then pos:line="148" pos:column="45">
			<block pos:line="149" pos:column="25">{
				<comment type="line" pos:line="150" pos:column="33">//tf += termDocs.Freq();</comment>
				<while pos:line="151" pos:column="33">while<condition pos:line="151" pos:column="38">(<expr><call><name><name pos:line="151" pos:column="39">termDocs</name><op:operator pos:line="151" pos:column="47">.</op:operator><name pos:line="151" pos:column="48">Next</name></name><argument_list pos:line="151" pos:column="52">()</argument_list></call></expr>)</condition>
				<block pos:line="152" pos:column="33">{
					<expr_stmt><expr><name pos:line="153" pos:column="41">tf</name> <op:operator pos:line="153" pos:column="44">+=</op:operator> <call><name><name pos:line="153" pos:column="47">termDocs</name><op:operator pos:line="153" pos:column="55">.</op:operator><name pos:line="153" pos:column="56">Freq</name></name><argument_list pos:line="153" pos:column="60">()</argument_list></call></expr>;</expr_stmt>
				}</block></while>
			}</block></then></if>
			<return pos:line="156" pos:column="25">return <expr><name pos:line="156" pos:column="32">tf</name></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="159" pos:column="17">private</specifier> <name pos:line="159" pos:column="25">double</name></type> <name pos:line="159" pos:column="32">Idf</name><parameter_list pos:line="159" pos:column="35">(<param><decl><type><name pos:line="159" pos:column="36">string</name></type> <name pos:line="159" pos:column="43">term</name></decl></param>)</parameter_list>
		<block pos:line="160" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="161" pos:column="25">double</name></type> <name pos:line="161" pos:column="32">idf</name> <init pos:line="161" pos:column="36">= <expr><lit:literal type="number" pos:line="161" pos:column="38">0.0</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="162" pos:column="25">int</name></type> <name pos:line="162" pos:column="29">nameDocFreq</name> <init pos:line="162" pos:column="41">= <expr><call><name><name pos:line="162" pos:column="43">Reader</name><op:operator pos:line="162" pos:column="49">.</op:operator><name pos:line="162" pos:column="50">DocFreq</name></name><argument_list pos:line="162" pos:column="57">(<argument><expr><op:operator pos:line="162" pos:column="58">new</op:operator> <call><name pos:line="162" pos:column="62">Term</name><argument_list pos:line="162" pos:column="66">(<argument><expr><call><name><name pos:line="162" pos:column="67">SandoField</name><op:operator pos:line="162" pos:column="77">.</op:operator><name pos:line="162" pos:column="78">Name</name><op:operator pos:line="162" pos:column="82">.</op:operator><name pos:line="162" pos:column="83">ToString</name></name><argument_list pos:line="162" pos:column="91">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="162" pos:column="95">term</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="163" pos:column="25">int</name></type> <name pos:line="163" pos:column="29">bodyDocFreq</name> <init pos:line="163" pos:column="41">= <expr><call><name><name pos:line="163" pos:column="43">Reader</name><op:operator pos:line="163" pos:column="49">.</op:operator><name pos:line="163" pos:column="50">DocFreq</name></name><argument_list pos:line="163" pos:column="57">(<argument><expr><op:operator pos:line="163" pos:column="58">new</op:operator> <call><name pos:line="163" pos:column="62">Term</name><argument_list pos:line="163" pos:column="66">(<argument><expr><call><name><name pos:line="163" pos:column="67">SandoField</name><op:operator pos:line="163" pos:column="77">.</op:operator><name pos:line="163" pos:column="78">Body</name><op:operator pos:line="163" pos:column="82">.</op:operator><name pos:line="163" pos:column="83">ToString</name></name><argument_list pos:line="163" pos:column="91">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="163" pos:column="95">term</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="164" pos:column="25">int</name></type> <name pos:line="164" pos:column="29">docFreq</name> <init pos:line="164" pos:column="37">= <expr><name pos:line="164" pos:column="39">nameDocFreq</name> <op:operator pos:line="164" pos:column="51">+</op:operator> <name pos:line="164" pos:column="53">bodyDocFreq</name></expr></init></decl>;</decl_stmt>
			<if pos:line="165" pos:column="25">if<condition pos:line="165" pos:column="27">(<expr><name pos:line="165" pos:column="28">docFreq</name> <op:operator pos:line="165" pos:column="36">&gt;</op:operator> <lit:literal type="number" pos:line="165" pos:column="38">0</lit:literal></expr>)</condition><then pos:line="165" pos:column="40">
			<block pos:line="166" pos:column="25">{
				<expr_stmt><expr><name pos:line="167" pos:column="33">idf</name> <op:operator pos:line="167" pos:column="37">=</op:operator> <call><name><name pos:line="167" pos:column="39">Math</name><op:operator pos:line="167" pos:column="43">.</op:operator><name pos:line="167" pos:column="44">Log</name></name><argument_list pos:line="167" pos:column="47">(<argument><expr><call><name><name pos:line="167" pos:column="48">Reader</name><op:operator pos:line="167" pos:column="54">.</op:operator><name pos:line="167" pos:column="55">NumDocs</name></name><argument_list pos:line="167" pos:column="62">()</argument_list></call> <op:operator pos:line="167" pos:column="65">/</op:operator> <name pos:line="167" pos:column="67">docFreq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<return pos:line="169" pos:column="25">return <expr><name pos:line="169" pos:column="32">idf</name></expr>;</return>
		}</block></function>

        <function><type><specifier pos:line="172" pos:column="9">public</specifier> <name pos:line="172" pos:column="16">string</name></type> <name pos:line="172" pos:column="23">StemText</name><parameter_list pos:line="172" pos:column="31">(<param><decl><type><name pos:line="172" pos:column="32">string</name></type> <name pos:line="172" pos:column="39">text</name></decl></param>)</parameter_list> 
        <block pos:line="173" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="174" pos:column="13">string</name></type> <name pos:line="174" pos:column="20">result</name> <init pos:line="174" pos:column="27">= <expr><lit:literal type="string" pos:line="174" pos:column="29">""</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="175" pos:column="13">TokenStream</name></type> <name pos:line="175" pos:column="25">stream</name>  <init pos:line="175" pos:column="33">= <expr><call><name><name pos:line="175" pos:column="35">Stemmer</name><op:operator pos:line="175" pos:column="42">.</op:operator><name pos:line="175" pos:column="43">TokenStream</name></name><argument_list pos:line="175" pos:column="54">(<argument><expr><name><name pos:line="175" pos:column="55">String</name><op:operator pos:line="175" pos:column="61">.</op:operator><name pos:line="175" pos:column="62">Empty</name></name></expr></argument>, <argument><expr><op:operator pos:line="175" pos:column="69">new</op:operator> <call><name pos:line="175" pos:column="73">StringReader</name><argument_list pos:line="175" pos:column="85">(<argument><expr><name pos:line="175" pos:column="86">text</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <while pos:line="177" pos:column="13">while<condition pos:line="177" pos:column="18">(<expr><call><name><name pos:line="177" pos:column="19">stream</name><op:operator pos:line="177" pos:column="25">.</op:operator><name pos:line="177" pos:column="26">IncrementToken</name></name><argument_list pos:line="177" pos:column="40">()</argument_list></call></expr>)</condition> <block pos:line="177" pos:column="44">{
                <decl_stmt><decl><type><name pos:line="178" pos:column="17">TermAttribute</name></type> <name pos:line="178" pos:column="31">termAttr</name> <init pos:line="178" pos:column="40">= <expr><op:operator pos:line="178" pos:column="42">(</op:operator><name pos:line="178" pos:column="43">TermAttribute</name><op:operator pos:line="178" pos:column="56">)</op:operator> <call><name><name pos:line="178" pos:column="58">stream</name><op:operator pos:line="178" pos:column="64">.</op:operator><name pos:line="178" pos:column="65">GetAttribute</name></name><argument_list pos:line="178" pos:column="77">(<argument><expr><call><name pos:line="178" pos:column="78">typeof</name><argument_list pos:line="178" pos:column="84">(<argument><expr><name pos:line="178" pos:column="85">TermAttribute</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name pos:line="179" pos:column="17">result</name> <op:operator pos:line="179" pos:column="24">=</op:operator> <name pos:line="179" pos:column="26">result</name> <op:operator pos:line="179" pos:column="33">+</op:operator> <call><name><name pos:line="179" pos:column="35">termAttr</name><op:operator pos:line="179" pos:column="43">.</op:operator><name pos:line="179" pos:column="44">Term</name></name><argument_list pos:line="179" pos:column="48">()</argument_list></call> <op:operator pos:line="179" pos:column="51">+</op:operator> <lit:literal type="string" pos:line="179" pos:column="53">" "</lit:literal></expr>;</expr_stmt> 
            }</block></while>
            
            <return pos:line="182" pos:column="13">return <expr><call><name><name pos:line="182" pos:column="20">result</name><op:operator pos:line="182" pos:column="26">.</op:operator><name pos:line="182" pos:column="27">Trim</name></name><argument_list pos:line="182" pos:column="31">()</argument_list></call></expr>;</return>
        }</block></function>  

		<decl_stmt><decl><type><specifier pos:line="185" pos:column="17">private</specifier> <name pos:line="185" pos:column="25">IndexReader</name></type> <name pos:line="185" pos:column="37">Reader</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="186" pos:column="9">private</specifier> <name pos:line="186" pos:column="17">Analyzer</name></type> <name pos:line="186" pos:column="26">Stemmer</name></decl>;</decl_stmt>
	}</block></class>
}</block></namespace>
</unit>
