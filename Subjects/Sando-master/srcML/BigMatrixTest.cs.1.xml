<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Core\Core.UnitTests\Tools\BigMatrixTest.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">IO</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Linq</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Text</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">NUnit</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">Framework</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Sando</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">Core</name><op:operator pos:line="7" pos:column="17">.</op:operator><name pos:line="7" pos:column="18">Tools</name></name>;</using>

<namespace pos:line="9" pos:column="1">namespace <name><name pos:line="9" pos:column="11">Sando</name><op:operator pos:line="9" pos:column="16">.</op:operator><name pos:line="9" pos:column="17">Core</name><op:operator pos:line="9" pos:column="21">.</op:operator><name pos:line="9" pos:column="22">UnitTests</name><op:operator pos:line="9" pos:column="31">.</op:operator><name pos:line="9" pos:column="32">Tools</name></name>
<block pos:line="10" pos:column="1">{
    <class><attribute pos:line="11" pos:column="5">[<expr><name pos:line="11" pos:column="6">TestFixture</name></expr>]</attribute>
    class <name pos:line="12" pos:column="11">BigMatrixTest</name>
    <block pos:line="13" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="14" pos:column="9">public</specifier> <name pos:line="14" pos:column="16">IWordCoOccurrenceMatrix</name></type> <name pos:line="14" pos:column="40">matrix</name></decl>;</decl_stmt>

        <constructor><specifier pos:line="16" pos:column="9">public</specifier> <name pos:line="16" pos:column="16">BigMatrixTest</name><parameter_list pos:line="16" pos:column="29">()</parameter_list>
        <block pos:line="17" pos:column="9">{
            <expr_stmt><expr><name><name pos:line="18" pos:column="13">this</name><op:operator pos:line="18" pos:column="17">.</op:operator><name pos:line="18" pos:column="18">matrix</name></name> <op:operator pos:line="18" pos:column="25">=</op:operator> <op:operator pos:line="18" pos:column="27">new</op:operator> <call><name pos:line="18" pos:column="31">SparseCoOccurrenceMatrix</name><argument_list pos:line="18" pos:column="55">()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><attribute pos:line="21" pos:column="9">[<expr><name pos:line="21" pos:column="10">SetUp</name></expr>]</attribute>
        <specifier pos:line="22" pos:column="9">public</specifier> <name pos:line="22" pos:column="16">void</name></type> <name pos:line="22" pos:column="21">ReadData</name><parameter_list pos:line="22" pos:column="29">()</parameter_list>
        <block pos:line="23" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="24" pos:column="13">matrix</name><op:operator pos:line="24" pos:column="19">.</op:operator><name pos:line="24" pos:column="20">Initialize</name></name><argument_list pos:line="24" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="24" pos:column="31">@"TestFiles\"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="27" pos:column="9">private</specifier> <name pos:line="27" pos:column="17">void</name></type> <name pos:line="27" pos:column="22">AssertWordPairExist</name><parameter_list pos:line="27" pos:column="41">(<param><decl><type><name pos:line="27" pos:column="42">string</name></type> <name pos:line="27" pos:column="49">word1</name></decl></param>, <param><decl><type><name pos:line="27" pos:column="56">string</name></type> <name pos:line="27" pos:column="63">word2</name></decl></param>)</parameter_list>
        <block pos:line="28" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="29" pos:column="13">Assert</name><op:operator pos:line="29" pos:column="19">.</op:operator><name pos:line="29" pos:column="20">IsTrue</name></name><argument_list pos:line="29" pos:column="26">(<argument><expr><call><name><name pos:line="29" pos:column="27">matrix</name><op:operator pos:line="29" pos:column="33">.</op:operator><name pos:line="29" pos:column="34">GetCoOccurrenceCount</name></name><argument_list pos:line="29" pos:column="54">(<argument><expr><name pos:line="29" pos:column="55">word1</name></expr></argument>, <argument><expr><name pos:line="29" pos:column="62">word2</name></expr></argument>)</argument_list></call> <op:operator pos:line="29" pos:column="69">&gt;</op:operator> <lit:literal type="number" pos:line="29" pos:column="71">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="32" pos:column="9">private</specifier> <name pos:line="32" pos:column="17">void</name></type> <name pos:line="32" pos:column="22">AssertWordPairNonExist</name><parameter_list pos:line="32" pos:column="44">(<param><decl><type><name pos:line="32" pos:column="45">string</name></type> <name pos:line="32" pos:column="52">word1</name></decl></param>, <param><decl><type><name pos:line="32" pos:column="59">string</name></type> <name pos:line="32" pos:column="66">word2</name></decl></param>)</parameter_list>
        <block pos:line="33" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="34" pos:column="13">Assert</name><op:operator pos:line="34" pos:column="19">.</op:operator><name pos:line="34" pos:column="20">IsTrue</name></name><argument_list pos:line="34" pos:column="26">(<argument><expr><call><name><name pos:line="34" pos:column="27">matrix</name><op:operator pos:line="34" pos:column="33">.</op:operator><name pos:line="34" pos:column="34">GetCoOccurrenceCount</name></name><argument_list pos:line="34" pos:column="54">(<argument><expr><name pos:line="34" pos:column="55">word1</name></expr></argument>, <argument><expr><name pos:line="34" pos:column="62">word2</name></expr></argument>)</argument_list></call> <op:operator pos:line="34" pos:column="69">==</op:operator> <lit:literal type="number" pos:line="34" pos:column="72">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="37" pos:column="9">[<expr><name pos:line="37" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="38" pos:column="9">public</specifier> <name pos:line="38" pos:column="16">void</name></type> <name pos:line="38" pos:column="21">SameLocalDictionaryWordPairAlwaysExist</name><parameter_list pos:line="38" pos:column="59">()</parameter_list>
        <block pos:line="39" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="40" pos:column="13">AssertWordPairExist</name><argument_list pos:line="40" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="40" pos:column="33">"sando"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="40" pos:column="42">"sando"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="41" pos:column="13">AssertWordPairExist</name><argument_list pos:line="41" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="41" pos:column="33">"abb"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="41" pos:column="40">"abb"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="42" pos:column="13">AssertWordPairExist</name><argument_list pos:line="42" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="42" pos:column="33">"test"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="42" pos:column="41">"test"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="45" pos:column="9">[<expr><name pos:line="45" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="46" pos:column="9">public</specifier> <name pos:line="46" pos:column="16">void</name></type> <name pos:line="46" pos:column="21">SameNonLocalDictionaryWordNeverExist</name><parameter_list pos:line="46" pos:column="57">()</parameter_list>
        <block pos:line="47" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="48" pos:column="13">AssertWordPairNonExist</name><argument_list pos:line="48" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="48" pos:column="36">"animal"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="48" pos:column="46">"animal"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="49" pos:column="13">AssertWordPairNonExist</name><argument_list pos:line="49" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="49" pos:column="36">"bush"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="49" pos:column="44">"bush"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="50" pos:column="13">AssertWordPairNonExist</name><argument_list pos:line="50" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="50" pos:column="36">"pinkcolor"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="50" pos:column="49">"pinkcolor"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="53" pos:column="9">[<expr><name pos:line="53" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="54" pos:column="9">public</specifier> <name pos:line="54" pos:column="16">void</name></type> <name pos:line="54" pos:column="21">DifferentWordPairsThatExist</name><parameter_list pos:line="54" pos:column="48">()</parameter_list>
        <block pos:line="55" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="56" pos:column="13">AssertWordPairExist</name><argument_list pos:line="56" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="56" pos:column="33">"method"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="56" pos:column="43">"name"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="57" pos:column="13">AssertWordPairExist</name><argument_list pos:line="57" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="57" pos:column="33">"assert"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="57" pos:column="43">"true"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="58" pos:column="13">AssertWordPairExist</name><argument_list pos:line="58" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="58" pos:column="33">"search"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="58" pos:column="43">"result"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="59" pos:column="13">AssertWordPairExist</name><argument_list pos:line="59" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="59" pos:column="33">"assert"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="59" pos:column="43">"null"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="60" pos:column="13">AssertWordPairExist</name><argument_list pos:line="60" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="60" pos:column="33">"sando"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="60" pos:column="42">"search"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="61" pos:column="13">AssertWordPairExist</name><argument_list pos:line="61" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="61" pos:column="33">"directory"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="61" pos:column="46">"update"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="62" pos:column="13">AssertWordPairExist</name><argument_list pos:line="62" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="62" pos:column="33">"configuration"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="62" pos:column="50">"results"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="65" pos:column="9">[<expr><name pos:line="65" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="66" pos:column="9">public</specifier> <name pos:line="66" pos:column="16">void</name></type> <name pos:line="66" pos:column="21">DifferentWordPairsThatDoesNotExist</name><parameter_list pos:line="66" pos:column="55">()</parameter_list>
        <block pos:line="67" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="68" pos:column="13">AssertWordPairNonExist</name><argument_list pos:line="68" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="68" pos:column="36">"confidence"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="68" pos:column="50">"apple"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="69" pos:column="13">AssertWordPairNonExist</name><argument_list pos:line="69" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="69" pos:column="36">"confidence"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="69" pos:column="50">"lackof"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="70" pos:column="13">AssertWordPairNonExist</name><argument_list pos:line="70" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="70" pos:column="36">"confidence"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="70" pos:column="50">"configuration"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="71" pos:column="13">AssertWordPairNonExist</name><argument_list pos:line="71" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="71" pos:column="36">"configuration"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="71" pos:column="53">"nomad"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
        }</block></function>

        <function><type><attribute pos:line="74" pos:column="9">[<expr><name pos:line="74" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="75" pos:column="9">public</specifier> <name pos:line="75" pos:column="16">void</name></type> <name pos:line="75" pos:column="21">AssertCanGetWordsAndCount</name><parameter_list pos:line="75" pos:column="46">()</parameter_list>
        <block pos:line="76" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="77" pos:column="13">var</name></type> <name pos:line="77" pos:column="17">dic</name> <init pos:line="77" pos:column="21">= <expr><call><name><name pos:line="77" pos:column="23">matrix</name><op:operator pos:line="77" pos:column="29">.</op:operator><name pos:line="77" pos:column="30">GetAllWordsAndCount</name></name><argument_list pos:line="77" pos:column="49">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="78" pos:column="13">Assert</name><op:operator pos:line="78" pos:column="19">.</op:operator><name pos:line="78" pos:column="20">IsNotNull</name></name><argument_list pos:line="78" pos:column="29">(<argument><expr><name pos:line="78" pos:column="30">dic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="79" pos:column="13">Assert</name><op:operator pos:line="79" pos:column="19">.</op:operator><name pos:line="79" pos:column="20">IsTrue</name></name><argument_list pos:line="79" pos:column="26">(<argument><expr><call><name><name pos:line="79" pos:column="27">dic</name><op:operator pos:line="79" pos:column="30">.</op:operator><name pos:line="79" pos:column="31">Any</name></name><argument_list pos:line="79" pos:column="34">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
