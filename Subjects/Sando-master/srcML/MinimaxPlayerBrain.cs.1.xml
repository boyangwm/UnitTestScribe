<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\TestInputs\tictactoe\TicTacToe.Classes\MinimaxPlayerBrain.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Text</name></name>;</using>

<namespace pos:line="5" pos:column="1">namespace <name><name pos:line="5" pos:column="11">TicTacToe</name><op:operator pos:line="5" pos:column="20">.</op:operator><name pos:line="5" pos:column="21">Classes</name></name>
<block pos:line="6" pos:column="1">{
    <class><specifier pos:line="7" pos:column="5">public</specifier> class <name pos:line="7" pos:column="18">MinimaxPlayerBrain</name> <super pos:line="7" pos:column="37">: <name pos:line="7" pos:column="39">IPlayerBrain</name></super>
    <block pos:line="8" pos:column="5">{

        <decl_stmt><decl><type><name pos:line="10" pos:column="9">XOSymbol</name></type> <name pos:line="10" pos:column="18">playerSymbol</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name pos:line="11" pos:column="9">List</name><argument_list pos:line="11" pos:column="13">&lt;<argument><name pos:line="11" pos:column="14">GamePadNode</name></argument>&gt;</argument_list></name></type> <name pos:line="11" pos:column="27">listGamePadNode</name></decl>;</decl_stmt>

        <cpp:region pos:line="13" pos:column="9">#<cpp:directive pos:line="13" pos:column="10">region</cpp:directive> IPlayerBrain Members</cpp:region>

        <function><type><specifier pos:line="15" pos:column="9">public</specifier> <name pos:line="15" pos:column="16">GameMove</name></type> <name pos:line="15" pos:column="25">Think</name><parameter_list pos:line="15" pos:column="30">(<param><decl><type><name><name pos:line="15" pos:column="31">XOSymbol</name><index pos:line="15" pos:column="39">[,]</index></name></type> <name pos:line="15" pos:column="43">gamePad</name></decl></param>, <param><decl><type><name pos:line="15" pos:column="52">XOSymbol</name></type> <name pos:line="15" pos:column="61">playerSymbol</name></decl></param>)</parameter_list>
        <block pos:line="16" pos:column="9">{
            <expr_stmt><expr><name><name pos:line="17" pos:column="13">this</name><op:operator pos:line="17" pos:column="17">.</op:operator><name pos:line="17" pos:column="18">playerSymbol</name></name> <op:operator pos:line="17" pos:column="31">=</op:operator> <name pos:line="17" pos:column="33">playerSymbol</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name pos:line="18" pos:column="13">List</name><argument_list pos:line="18" pos:column="17">&lt;<argument><name pos:line="18" pos:column="18">GamePadNode</name></argument>&gt;</argument_list></name></type> <name pos:line="18" pos:column="31">listGamePadNode</name> <init pos:line="18" pos:column="47">= <expr><call><name pos:line="18" pos:column="49">generateChilds</name><argument_list pos:line="18" pos:column="63">(<argument><expr><op:operator pos:line="18" pos:column="64">new</op:operator> <call><name pos:line="18" pos:column="68">GamePadNode</name><argument_list pos:line="18" pos:column="79">(<argument><expr><name pos:line="18" pos:column="80">gamePad</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="19" pos:column="13">this</name><op:operator pos:line="19" pos:column="17">.</op:operator><name pos:line="19" pos:column="18">listGamePadNode</name></name> <op:operator pos:line="19" pos:column="34">=</op:operator> <name pos:line="19" pos:column="36">listGamePadNode</name></expr>;</expr_stmt>
            <foreach pos:line="20" pos:column="13">foreach (<init><decl><type><name pos:line="20" pos:column="22">GamePadNode</name></type> <name pos:line="20" pos:column="34">node</name> <range pos:line="20" pos:column="39">in <expr><name pos:line="20" pos:column="42">listGamePadNode</name></expr></range></decl></init>)
            <block pos:line="21" pos:column="13">{
                <expr_stmt><expr><call><name pos:line="22" pos:column="17">calculateHeuristic</name><argument_list pos:line="22" pos:column="35">(<argument><expr><name pos:line="22" pos:column="36">node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><name><name pos:line="23" pos:column="21">node</name><op:operator pos:line="23" pos:column="25">.</op:operator><name pos:line="23" pos:column="26">IsWinning</name></name></expr>)</condition><then pos:line="23" pos:column="36">
                    <return pos:line="24" pos:column="21">return <expr><name><name pos:line="24" pos:column="28">node</name><op:operator pos:line="24" pos:column="32">.</op:operator><name pos:line="24" pos:column="33">GameMove</name></name></expr>;</return></then></if>
            }</block></foreach>

            <comment type="line" pos:line="27" pos:column="13">//Find Best Heuristic</comment>
            <decl_stmt><decl><type><name pos:line="28" pos:column="13">int</name></type> <name pos:line="28" pos:column="17">bestIndex</name> <init pos:line="28" pos:column="27">= <expr><lit:literal type="number" pos:line="28" pos:column="29">0</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="29" pos:column="13">GamePadNode</name></type> <name pos:line="29" pos:column="25">_node</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="30" pos:column="13">int</name></type> <name pos:line="30" pos:column="17">best</name> <init pos:line="30" pos:column="22">= <expr><lit:literal type="number" pos:line="30" pos:column="24">0</lit:literal></expr></init></decl>;</decl_stmt>
            <switch pos:line="31" pos:column="13">switch<condition pos:line="31" pos:column="19">(<expr><name pos:line="31" pos:column="20">playerSymbol</name></expr>)</condition>
            <block pos:line="32" pos:column="13">{
                <case pos:line="33" pos:column="17">case <expr><name><name pos:line="33" pos:column="22">XOSymbol</name><op:operator pos:line="33" pos:column="30">.</op:operator><name pos:line="33" pos:column="31">X</name></name></expr>:
                    <expr_stmt><expr><name pos:line="34" pos:column="21">best</name> <op:operator pos:line="34" pos:column="26">=</op:operator> <name><name pos:line="34" pos:column="28">int</name><op:operator pos:line="34" pos:column="31">.</op:operator><name pos:line="34" pos:column="32">MinValue</name></name></expr>;</expr_stmt>
                    <break pos:line="35" pos:column="21">break;</break>
                </case><case pos:line="36" pos:column="17">case <expr><name><name pos:line="36" pos:column="22">XOSymbol</name><op:operator pos:line="36" pos:column="30">.</op:operator><name pos:line="36" pos:column="31">O</name></name></expr>:
                    <expr_stmt><expr><name pos:line="37" pos:column="21">best</name> <op:operator pos:line="37" pos:column="26">=</op:operator> <name><name pos:line="37" pos:column="28">int</name><op:operator pos:line="37" pos:column="31">.</op:operator><name pos:line="37" pos:column="32">MaxValue</name></name></expr>;</expr_stmt>
                    <break pos:line="38" pos:column="21">break;</break>
            </case>}</block></switch>

            <for pos:line="41" pos:column="13">for (<init><decl><type><name pos:line="41" pos:column="18">int</name></type> <name pos:line="41" pos:column="22">counter</name> <init pos:line="41" pos:column="30">= <expr><lit:literal type="number" pos:line="41" pos:column="32">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="41" pos:column="35">counter</name> <op:operator pos:line="41" pos:column="43">&lt;</op:operator> <name><name pos:line="41" pos:column="45">listGamePadNode</name><op:operator pos:line="41" pos:column="60">.</op:operator><name pos:line="41" pos:column="61">Count</name></name></expr>;</condition> <incr><expr><name pos:line="41" pos:column="68">counter</name><op:operator pos:line="41" pos:column="75">++</op:operator></expr></incr> )
            <block pos:line="42" pos:column="13">{
                <expr_stmt><expr><name pos:line="43" pos:column="17">_node</name> <op:operator pos:line="43" pos:column="23">=</op:operator> <name><name pos:line="43" pos:column="25">listGamePadNode</name><index pos:line="43" pos:column="40">[<expr><name pos:line="43" pos:column="41">counter</name></expr>]</index></name></expr>;</expr_stmt>
                <switch pos:line="44" pos:column="17">switch <condition pos:line="44" pos:column="24">(<expr><name pos:line="44" pos:column="25">playerSymbol</name></expr>)</condition>
                <block pos:line="45" pos:column="17">{
                    <case pos:line="46" pos:column="21">case <expr><name><name pos:line="46" pos:column="26">XOSymbol</name><op:operator pos:line="46" pos:column="34">.</op:operator><name pos:line="46" pos:column="35">X</name></name></expr>: <comment type="line" pos:line="46" pos:column="38">//Look for max value</comment>
                        <if pos:line="47" pos:column="25">if <condition pos:line="47" pos:column="28">(<expr><name><name pos:line="47" pos:column="29">_node</name><op:operator pos:line="47" pos:column="34">.</op:operator><name pos:line="47" pos:column="35">Heurisitic</name></name> <op:operator pos:line="47" pos:column="46">&gt;</op:operator> <name pos:line="47" pos:column="48">best</name></expr>)</condition><then pos:line="47" pos:column="53">
                        <block pos:line="48" pos:column="25">{
                            <expr_stmt><expr><name pos:line="49" pos:column="29">best</name> <op:operator pos:line="49" pos:column="34">=</op:operator> <name><name pos:line="49" pos:column="36">_node</name><op:operator pos:line="49" pos:column="41">.</op:operator><name pos:line="49" pos:column="42">Heurisitic</name></name></expr>;</expr_stmt>
                            <expr_stmt><expr><name pos:line="50" pos:column="29">bestIndex</name> <op:operator pos:line="50" pos:column="39">=</op:operator> <name pos:line="50" pos:column="41">counter</name></expr>;</expr_stmt>
                        }</block></then></if>
                        <break pos:line="52" pos:column="25">break;</break>
                    </case><case pos:line="53" pos:column="21">case <expr><name><name pos:line="53" pos:column="26">XOSymbol</name><op:operator pos:line="53" pos:column="34">.</op:operator><name pos:line="53" pos:column="35">O</name></name></expr>: <comment type="line" pos:line="53" pos:column="38">//Look for min Value</comment>
                        <if pos:line="54" pos:column="25">if <condition pos:line="54" pos:column="28">(<expr><name><name pos:line="54" pos:column="29">_node</name><op:operator pos:line="54" pos:column="34">.</op:operator><name pos:line="54" pos:column="35">Heurisitic</name></name> <op:operator pos:line="54" pos:column="46">&lt;</op:operator> <name pos:line="54" pos:column="48">best</name></expr>)</condition><then pos:line="54" pos:column="53">
                        <block pos:line="55" pos:column="25">{
                            <expr_stmt><expr><name pos:line="56" pos:column="29">best</name> <op:operator pos:line="56" pos:column="34">=</op:operator> <name><name pos:line="56" pos:column="36">_node</name><op:operator pos:line="56" pos:column="41">.</op:operator><name pos:line="56" pos:column="42">Heurisitic</name></name></expr>;</expr_stmt>
                            <expr_stmt><expr><name pos:line="57" pos:column="29">bestIndex</name> <op:operator pos:line="57" pos:column="39">=</op:operator> <name pos:line="57" pos:column="41">counter</name></expr>;</expr_stmt>
                        }</block></then></if>
                        <break pos:line="59" pos:column="25">break;</break>
                </case>}</block></switch>
            }</block></for>

            <return pos:line="63" pos:column="13">return <expr><name><name pos:line="63" pos:column="20">listGamePadNode</name><index pos:line="63" pos:column="35">[<expr><name pos:line="63" pos:column="36">bestIndex</name></expr>]</index></name><op:operator pos:line="63" pos:column="46">.</op:operator><name pos:line="63" pos:column="47">GameMove</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="66" pos:column="9">public</specifier> <name><name pos:line="66" pos:column="16">List</name><argument_list pos:line="66" pos:column="20">&lt;<argument><name pos:line="66" pos:column="21">GamePadNode</name></argument>&gt;</argument_list></name></type> <name pos:line="66" pos:column="34">GetGamePadNodes</name><parameter_list pos:line="66" pos:column="49">()</parameter_list>
        <block pos:line="67" pos:column="9">{
            <return pos:line="68" pos:column="13">return <expr><name><name pos:line="68" pos:column="20">this</name><op:operator pos:line="68" pos:column="24">.</op:operator><name pos:line="68" pos:column="25">listGamePadNode</name></name></expr>;</return>
        }</block></function>

        <cpp:endregion pos:line="71" pos:column="9">#<cpp:directive pos:line="71" pos:column="10">endregion</cpp:directive></cpp:endregion>

        <function><type><specifier pos:line="73" pos:column="9">private</specifier> <name><name pos:line="73" pos:column="17">List</name><argument_list pos:line="73" pos:column="21">&lt;<argument><name pos:line="73" pos:column="22">GamePadNode</name></argument>&gt;</argument_list></name></type> <name pos:line="73" pos:column="35">generateChilds</name><parameter_list pos:line="73" pos:column="49">(<param><decl><type><name pos:line="73" pos:column="50">GamePadNode</name></type> <name pos:line="73" pos:column="62">gamePadNode</name></decl></param>)</parameter_list>
        <block pos:line="74" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="75" pos:column="13">List</name><argument_list pos:line="75" pos:column="17">&lt;<argument><name pos:line="75" pos:column="18">int</name></argument>&gt;</argument_list></name></type> <name pos:line="75" pos:column="23">listEmptyCellsIndex</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="76" pos:column="13">List</name><argument_list pos:line="76" pos:column="17">&lt;<argument><name pos:line="76" pos:column="18">GamePadNode</name></argument>&gt;</argument_list></name></type> <name pos:line="76" pos:column="31">listGamePadNode</name> <init pos:line="76" pos:column="47">= <expr><op:operator pos:line="76" pos:column="49">new</op:operator> <call><name><name pos:line="76" pos:column="53">List</name><argument_list pos:line="76" pos:column="57">&lt;<argument><name pos:line="76" pos:column="58">GamePadNode</name></argument>&gt;</argument_list></name><argument_list pos:line="76" pos:column="70">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="77" pos:column="13">listEmptyCellsIndex</name> <op:operator pos:line="77" pos:column="33">=</op:operator> <call><name pos:line="77" pos:column="35">countEmptyCells</name><argument_list pos:line="77" pos:column="50">(<argument><expr><name><name pos:line="77" pos:column="51">gamePadNode</name><op:operator pos:line="77" pos:column="62">.</op:operator><name pos:line="77" pos:column="63">GamePad</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <foreach pos:line="78" pos:column="13">foreach (<init><decl><type><name pos:line="78" pos:column="22">int</name></type> <name pos:line="78" pos:column="26">currentIndex</name> <range pos:line="78" pos:column="39">in <expr><name pos:line="78" pos:column="42">listEmptyCellsIndex</name></expr></range></decl></init>)
            <block pos:line="79" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="80" pos:column="17">GamePadNode</name></type> <name pos:line="80" pos:column="29">childGamePad</name> <init pos:line="80" pos:column="42">= <expr><op:operator pos:line="80" pos:column="44">new</op:operator> <call><name pos:line="80" pos:column="48">GamePadNode</name><argument_list pos:line="80" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name pos:line="81" pos:column="17">childGamePad</name><op:operator pos:line="81" pos:column="29">.</op:operator><name pos:line="81" pos:column="30">GamePad</name></name> <op:operator pos:line="81" pos:column="38">=</op:operator> <op:operator pos:line="81" pos:column="40">(</op:operator><name><name pos:line="81" pos:column="41">XOSymbol</name><index pos:line="81" pos:column="49">[,]</index></name><op:operator pos:line="81" pos:column="52">)</op:operator><call><name><name pos:line="81" pos:column="53">gamePadNode</name><op:operator pos:line="81" pos:column="64">.</op:operator><name pos:line="81" pos:column="65">GamePad</name><op:operator pos:line="81" pos:column="72">.</op:operator><name pos:line="81" pos:column="73">Clone</name></name><argument_list pos:line="81" pos:column="78">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="82" pos:column="17">childGamePad</name><op:operator pos:line="82" pos:column="29">.</op:operator><name pos:line="82" pos:column="30">GamePad</name><op:operator pos:line="82" pos:column="37">.</op:operator><name pos:line="82" pos:column="38">SetValue</name></name><argument_list pos:line="82" pos:column="46">(<argument><expr><name pos:line="82" pos:column="47">playerSymbol</name></expr></argument>, <argument><expr><call><name pos:line="82" pos:column="61">getRowIndex</name><argument_list pos:line="82" pos:column="72">(<argument><expr><name pos:line="82" pos:column="73">currentIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="82" pos:column="88">getColumnIndex</name><argument_list pos:line="82" pos:column="102">(<argument><expr><name pos:line="82" pos:column="103">currentIndex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="83" pos:column="17">childGamePad</name><op:operator pos:line="83" pos:column="29">.</op:operator><name pos:line="83" pos:column="30">GameMove</name></name> <op:operator pos:line="83" pos:column="39">=</op:operator> <op:operator pos:line="83" pos:column="41">new</op:operator> <call><name pos:line="83" pos:column="45">GameMove</name><argument_list pos:line="83" pos:column="53">(<argument><expr><name pos:line="83" pos:column="54">currentIndex</name></expr></argument>, <argument><expr><name pos:line="83" pos:column="68">playerSymbol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="84" pos:column="17">listGamePadNode</name><op:operator pos:line="84" pos:column="32">.</op:operator><name pos:line="84" pos:column="33">Add</name></name><argument_list pos:line="84" pos:column="36">(<argument><expr><name pos:line="84" pos:column="37">childGamePad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
            <return pos:line="86" pos:column="13">return <expr><name pos:line="86" pos:column="20">listGamePadNode</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="89" pos:column="9">private</specifier> <name pos:line="89" pos:column="17">void</name></type> <name pos:line="89" pos:column="22">calculateHeuristic</name><parameter_list pos:line="89" pos:column="40">(<param><decl><type><name pos:line="89" pos:column="41">GamePadNode</name></type> <name pos:line="89" pos:column="53">gamePadNode</name></decl></param>)</parameter_list>
        <block pos:line="90" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="91" pos:column="13">xFunction</name><argument_list pos:line="91" pos:column="22">(<argument><expr><name pos:line="91" pos:column="23">gamePadNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="92" pos:column="13">oFunction</name><argument_list pos:line="92" pos:column="22">(<argument><expr><name pos:line="92" pos:column="23">gamePadNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="95" pos:column="9">private</specifier> <name pos:line="95" pos:column="17">void</name></type> <name pos:line="95" pos:column="22">xFunction</name><parameter_list pos:line="95" pos:column="31">(<param><decl><type><name pos:line="95" pos:column="32">GamePadNode</name></type> <name pos:line="95" pos:column="44">gamePadNode</name></decl></param>)</parameter_list>
        <block pos:line="96" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="97" pos:column="13">XOSymbol</name></type> <name pos:line="97" pos:column="22">xoSymbol</name> <init pos:line="97" pos:column="31">= <expr><name><name pos:line="97" pos:column="33">XOSymbol</name><op:operator pos:line="97" pos:column="41">.</op:operator><name pos:line="97" pos:column="42">X</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="98" pos:column="13">calculateRows</name><argument_list pos:line="98" pos:column="26">(<argument><expr><name pos:line="98" pos:column="27">xoSymbol</name></expr></argument>, <argument><expr><name pos:line="98" pos:column="37">gamePadNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="99" pos:column="13">calculateColumns</name><argument_list pos:line="99" pos:column="29">(<argument><expr><name pos:line="99" pos:column="30">xoSymbol</name></expr></argument>, <argument><expr><name pos:line="99" pos:column="40">gamePadNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="100" pos:column="13">calculateDiagonals</name><argument_list pos:line="100" pos:column="31">(<argument><expr><name pos:line="100" pos:column="32">xoSymbol</name></expr></argument>, <argument><expr><name pos:line="100" pos:column="42">gamePadNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="103" pos:column="9">private</specifier> <name pos:line="103" pos:column="17">void</name></type> <name pos:line="103" pos:column="22">oFunction</name><parameter_list pos:line="103" pos:column="31">(<param><decl><type><name pos:line="103" pos:column="32">GamePadNode</name></type> <name pos:line="103" pos:column="44">gamePadNode</name></decl></param>)</parameter_list>
        <block pos:line="104" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="105" pos:column="13">XOSymbol</name></type> <name pos:line="105" pos:column="22">xoSymbol</name> <init pos:line="105" pos:column="31">= <expr><name><name pos:line="105" pos:column="33">XOSymbol</name><op:operator pos:line="105" pos:column="41">.</op:operator><name pos:line="105" pos:column="42">O</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="106" pos:column="13">calculateRows</name><argument_list pos:line="106" pos:column="26">(<argument><expr><name pos:line="106" pos:column="27">xoSymbol</name></expr></argument>, <argument><expr><name pos:line="106" pos:column="37">gamePadNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="107" pos:column="13">calculateColumns</name><argument_list pos:line="107" pos:column="29">(<argument><expr><name pos:line="107" pos:column="30">xoSymbol</name></expr></argument>, <argument><expr><name pos:line="107" pos:column="40">gamePadNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="108" pos:column="13">calculateDiagonals</name><argument_list pos:line="108" pos:column="31">(<argument><expr><name pos:line="108" pos:column="32">xoSymbol</name></expr></argument>, <argument><expr><name pos:line="108" pos:column="42">gamePadNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="111" pos:column="9">private</specifier> <name pos:line="111" pos:column="17">void</name></type> <name pos:line="111" pos:column="22">calculateRows</name><parameter_list pos:line="111" pos:column="35">(<param><decl><type><name pos:line="111" pos:column="36">XOSymbol</name></type> <name pos:line="111" pos:column="45">xoSymbol</name></decl></param>, <param><decl><type><name pos:line="111" pos:column="55">GamePadNode</name></type> <name pos:line="111" pos:column="67">gamePadNode</name></decl></param>)</parameter_list>
        <block pos:line="112" pos:column="9">{
            <for pos:line="113" pos:column="13">for (<init><decl><type><name pos:line="113" pos:column="18">int</name></type> <name pos:line="113" pos:column="22">row</name> <init pos:line="113" pos:column="26">= <expr><lit:literal type="number" pos:line="113" pos:column="28">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="113" pos:column="31">row</name> <op:operator pos:line="113" pos:column="35">&lt;</op:operator> <call><name><name pos:line="113" pos:column="37">gamePadNode</name><op:operator pos:line="113" pos:column="48">.</op:operator><name pos:line="113" pos:column="49">GamePad</name><op:operator pos:line="113" pos:column="56">.</op:operator><name pos:line="113" pos:column="57">GetLength</name></name><argument_list pos:line="113" pos:column="66">(<argument><expr><lit:literal type="number" pos:line="113" pos:column="67">0</lit:literal></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name pos:line="113" pos:column="71">row</name><op:operator pos:line="113" pos:column="74">++</op:operator></expr></incr>)
            <block pos:line="114" pos:column="13">{
                <decl_stmt><decl><type><name><name pos:line="115" pos:column="17">List</name><argument_list pos:line="115" pos:column="21">&lt;<argument><name pos:line="115" pos:column="22">XOSymbol</name></argument>&gt;</argument_list></name></type> <name pos:line="115" pos:column="32">xoSymbolLine</name> <init pos:line="115" pos:column="45">= <expr><op:operator pos:line="115" pos:column="47">new</op:operator> <call><name><name pos:line="115" pos:column="51">List</name><argument_list pos:line="115" pos:column="55">&lt;<argument><name pos:line="115" pos:column="56">XOSymbol</name></argument>&gt;</argument_list></name><argument_list pos:line="115" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for pos:line="116" pos:column="17">for (<init><decl><type><name pos:line="116" pos:column="22">int</name></type> <name pos:line="116" pos:column="26">column</name> <init pos:line="116" pos:column="33">= <expr><lit:literal type="number" pos:line="116" pos:column="35">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="116" pos:column="38">column</name> <op:operator pos:line="116" pos:column="45">&lt;</op:operator> <call><name><name pos:line="116" pos:column="47">gamePadNode</name><op:operator pos:line="116" pos:column="58">.</op:operator><name pos:line="116" pos:column="59">GamePad</name><op:operator pos:line="116" pos:column="66">.</op:operator><name pos:line="116" pos:column="67">GetLength</name></name><argument_list pos:line="116" pos:column="76">(<argument><expr><lit:literal type="number" pos:line="116" pos:column="77">0</lit:literal></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name pos:line="116" pos:column="81">column</name><op:operator pos:line="116" pos:column="87">++</op:operator></expr></incr>)
                <block pos:line="117" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="118" pos:column="21">xoSymbolLine</name><op:operator pos:line="118" pos:column="33">.</op:operator><name pos:line="118" pos:column="34">Add</name></name><argument_list pos:line="118" pos:column="37">(<argument><expr><op:operator pos:line="118" pos:column="38">(</op:operator><name pos:line="118" pos:column="39">XOSymbol</name><op:operator pos:line="118" pos:column="47">)</op:operator><call><name><name pos:line="118" pos:column="48">gamePadNode</name><op:operator pos:line="118" pos:column="59">.</op:operator><name pos:line="118" pos:column="60">GamePad</name><op:operator pos:line="118" pos:column="67">.</op:operator><name pos:line="118" pos:column="68">GetValue</name></name><argument_list pos:line="118" pos:column="76">(<argument><expr><name pos:line="118" pos:column="77">row</name></expr></argument>, <argument><expr><name pos:line="118" pos:column="82">column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
                <if pos:line="120" pos:column="17">if <condition pos:line="120" pos:column="20">(<expr><call><name pos:line="120" pos:column="21">isWinningMove</name><argument_list pos:line="120" pos:column="34">(<argument><expr><name pos:line="120" pos:column="35">xoSymbol</name></expr></argument>, <argument><expr><name pos:line="120" pos:column="45">xoSymbolLine</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="120" pos:column="59">
                <block pos:line="121" pos:column="17">{
                    <expr_stmt><expr><name><name pos:line="122" pos:column="21">gamePadNode</name><op:operator pos:line="122" pos:column="32">.</op:operator><name pos:line="122" pos:column="33">IsWinning</name></name> <op:operator pos:line="122" pos:column="43">=</op:operator> <lit:literal type="boolean" pos:line="122" pos:column="45">true</lit:literal></expr>;</expr_stmt>
                    <return pos:line="123" pos:column="21">return;</return>
                }</block></then></if>
                <if pos:line="125" pos:column="17">if <condition pos:line="125" pos:column="20">(<expr><call><name pos:line="125" pos:column="21">hasPotential</name><argument_list pos:line="125" pos:column="33">(<argument><expr><name pos:line="125" pos:column="34">xoSymbol</name></expr></argument>, <argument><expr><name pos:line="125" pos:column="44">xoSymbolLine</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="125" pos:column="58">
                <block pos:line="126" pos:column="17">{
                    <switch pos:line="127" pos:column="21">switch <condition pos:line="127" pos:column="28">(<expr><name pos:line="127" pos:column="29">xoSymbol</name></expr>)</condition>
                    <block pos:line="128" pos:column="21">{
                        <case pos:line="129" pos:column="25">case <expr><name><name pos:line="129" pos:column="30">XOSymbol</name><op:operator pos:line="129" pos:column="38">.</op:operator><name pos:line="129" pos:column="39">X</name></name></expr>:
                            <expr_stmt><expr><name><name pos:line="130" pos:column="29">gamePadNode</name><op:operator pos:line="130" pos:column="40">.</op:operator><name pos:line="130" pos:column="41">XFunction</name></name><op:operator pos:line="130" pos:column="50">++</op:operator></expr>;</expr_stmt>
                            <break pos:line="131" pos:column="29">break;</break>
                        </case><case pos:line="132" pos:column="25">case <expr><name><name pos:line="132" pos:column="30">XOSymbol</name><op:operator pos:line="132" pos:column="38">.</op:operator><name pos:line="132" pos:column="39">O</name></name></expr>:
                            <expr_stmt><expr><name><name pos:line="133" pos:column="29">gamePadNode</name><op:operator pos:line="133" pos:column="40">.</op:operator><name pos:line="133" pos:column="41">OFunction</name></name><op:operator pos:line="133" pos:column="50">++</op:operator></expr>;</expr_stmt>
                            <break pos:line="134" pos:column="29">break;</break>
                    </case>}</block></switch>
                }</block></then></if>
            }</block></for>
        }</block></function>

        <function><type><specifier pos:line="140" pos:column="9">private</specifier> <name pos:line="140" pos:column="17">void</name></type> <name pos:line="140" pos:column="22">calculateColumns</name><parameter_list pos:line="140" pos:column="38">(<param><decl><type><name pos:line="140" pos:column="39">XOSymbol</name></type> <name pos:line="140" pos:column="48">xoSymbol</name></decl></param>, <param><decl><type><name pos:line="140" pos:column="58">GamePadNode</name></type> <name pos:line="140" pos:column="70">gamePadNode</name></decl></param>)</parameter_list>
        <block pos:line="141" pos:column="9">{
            <for pos:line="142" pos:column="13">for (<init><decl><type><name pos:line="142" pos:column="18">int</name></type> <name pos:line="142" pos:column="22">column</name> <init pos:line="142" pos:column="29">= <expr><lit:literal type="number" pos:line="142" pos:column="31">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="142" pos:column="34">column</name> <op:operator pos:line="142" pos:column="41">&lt;</op:operator> <call><name><name pos:line="142" pos:column="43">gamePadNode</name><op:operator pos:line="142" pos:column="54">.</op:operator><name pos:line="142" pos:column="55">GamePad</name><op:operator pos:line="142" pos:column="62">.</op:operator><name pos:line="142" pos:column="63">GetLength</name></name><argument_list pos:line="142" pos:column="72">(<argument><expr><lit:literal type="number" pos:line="142" pos:column="73">0</lit:literal></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name pos:line="142" pos:column="77">column</name><op:operator pos:line="142" pos:column="83">++</op:operator></expr></incr>)
            <block pos:line="143" pos:column="13">{
                <decl_stmt><decl><type><name><name pos:line="144" pos:column="17">List</name><argument_list pos:line="144" pos:column="21">&lt;<argument><name pos:line="144" pos:column="22">XOSymbol</name></argument>&gt;</argument_list></name></type> <name pos:line="144" pos:column="32">xoSymbolLine</name> <init pos:line="144" pos:column="45">= <expr><op:operator pos:line="144" pos:column="47">new</op:operator> <call><name><name pos:line="144" pos:column="51">List</name><argument_list pos:line="144" pos:column="55">&lt;<argument><name pos:line="144" pos:column="56">XOSymbol</name></argument>&gt;</argument_list></name><argument_list pos:line="144" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for pos:line="145" pos:column="17">for (<init><decl><type><name pos:line="145" pos:column="22">int</name></type> <name pos:line="145" pos:column="26">row</name> <init pos:line="145" pos:column="30">= <expr><lit:literal type="number" pos:line="145" pos:column="32">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="145" pos:column="35">row</name> <op:operator pos:line="145" pos:column="39">&lt;</op:operator> <call><name><name pos:line="145" pos:column="41">gamePadNode</name><op:operator pos:line="145" pos:column="52">.</op:operator><name pos:line="145" pos:column="53">GamePad</name><op:operator pos:line="145" pos:column="60">.</op:operator><name pos:line="145" pos:column="61">GetLength</name></name><argument_list pos:line="145" pos:column="70">(<argument><expr><lit:literal type="number" pos:line="145" pos:column="71">0</lit:literal></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name pos:line="145" pos:column="75">row</name><op:operator pos:line="145" pos:column="78">++</op:operator></expr></incr>)
                <block pos:line="146" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="147" pos:column="21">xoSymbolLine</name><op:operator pos:line="147" pos:column="33">.</op:operator><name pos:line="147" pos:column="34">Add</name></name><argument_list pos:line="147" pos:column="37">(<argument><expr><op:operator pos:line="147" pos:column="38">(</op:operator><name pos:line="147" pos:column="39">XOSymbol</name><op:operator pos:line="147" pos:column="47">)</op:operator><call><name><name pos:line="147" pos:column="48">gamePadNode</name><op:operator pos:line="147" pos:column="59">.</op:operator><name pos:line="147" pos:column="60">GamePad</name><op:operator pos:line="147" pos:column="67">.</op:operator><name pos:line="147" pos:column="68">GetValue</name></name><argument_list pos:line="147" pos:column="76">(<argument><expr><name pos:line="147" pos:column="77">row</name></expr></argument>, <argument><expr><name pos:line="147" pos:column="82">column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
                <if pos:line="149" pos:column="17">if <condition pos:line="149" pos:column="20">(<expr><call><name pos:line="149" pos:column="21">isWinningMove</name><argument_list pos:line="149" pos:column="34">(<argument><expr><name pos:line="149" pos:column="35">xoSymbol</name></expr></argument>, <argument><expr><name pos:line="149" pos:column="45">xoSymbolLine</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="149" pos:column="59">
                <block pos:line="150" pos:column="17">{
                    <expr_stmt><expr><name><name pos:line="151" pos:column="21">gamePadNode</name><op:operator pos:line="151" pos:column="32">.</op:operator><name pos:line="151" pos:column="33">IsWinning</name></name> <op:operator pos:line="151" pos:column="43">=</op:operator> <lit:literal type="boolean" pos:line="151" pos:column="45">true</lit:literal></expr>;</expr_stmt>
                    <return pos:line="152" pos:column="21">return;</return>
                }</block></then></if>
                <if pos:line="154" pos:column="17">if <condition pos:line="154" pos:column="20">(<expr><call><name pos:line="154" pos:column="21">hasPotential</name><argument_list pos:line="154" pos:column="33">(<argument><expr><name pos:line="154" pos:column="34">xoSymbol</name></expr></argument>, <argument><expr><name pos:line="154" pos:column="44">xoSymbolLine</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="154" pos:column="58">
                <block pos:line="155" pos:column="17">{
                    <switch pos:line="156" pos:column="21">switch <condition pos:line="156" pos:column="28">(<expr><name pos:line="156" pos:column="29">xoSymbol</name></expr>)</condition>
                    <block pos:line="157" pos:column="21">{
                        <case pos:line="158" pos:column="25">case <expr><name><name pos:line="158" pos:column="30">XOSymbol</name><op:operator pos:line="158" pos:column="38">.</op:operator><name pos:line="158" pos:column="39">X</name></name></expr>:
                            <expr_stmt><expr><name><name pos:line="159" pos:column="29">gamePadNode</name><op:operator pos:line="159" pos:column="40">.</op:operator><name pos:line="159" pos:column="41">XFunction</name></name><op:operator pos:line="159" pos:column="50">++</op:operator></expr>;</expr_stmt>
                            <break pos:line="160" pos:column="29">break;</break>
                        </case><case pos:line="161" pos:column="25">case <expr><name><name pos:line="161" pos:column="30">XOSymbol</name><op:operator pos:line="161" pos:column="38">.</op:operator><name pos:line="161" pos:column="39">O</name></name></expr>:
                            <expr_stmt><expr><name><name pos:line="162" pos:column="29">gamePadNode</name><op:operator pos:line="162" pos:column="40">.</op:operator><name pos:line="162" pos:column="41">OFunction</name></name><op:operator pos:line="162" pos:column="50">++</op:operator></expr>;</expr_stmt>
                            <break pos:line="163" pos:column="29">break;</break>
                    </case>}</block></switch>
                }</block></then></if>
            }</block></for>
        }</block></function>

        <function><type><specifier pos:line="169" pos:column="9">private</specifier> <name pos:line="169" pos:column="17">void</name></type> <name pos:line="169" pos:column="22">calculateDiagonals</name><parameter_list pos:line="169" pos:column="40">(<param><decl><type><name pos:line="169" pos:column="41">XOSymbol</name></type> <name pos:line="169" pos:column="50">xoSymbol</name></decl></param>, <param><decl><type><name pos:line="169" pos:column="60">GamePadNode</name></type> <name pos:line="169" pos:column="72">gamePadNode</name></decl></param>)</parameter_list>
        <block pos:line="170" pos:column="9">{
            <for pos:line="171" pos:column="13">for (<init><decl><type><name pos:line="171" pos:column="18">int</name></type> <name pos:line="171" pos:column="22">diagonal</name> <init pos:line="171" pos:column="31">= <expr><lit:literal type="number" pos:line="171" pos:column="33">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="171" pos:column="36">diagonal</name> <op:operator pos:line="171" pos:column="45">&lt;</op:operator> <lit:literal type="number" pos:line="171" pos:column="47">2</lit:literal></expr>;</condition> <incr><expr><name pos:line="171" pos:column="50">diagonal</name><op:operator pos:line="171" pos:column="58">++</op:operator></expr></incr>)
            <block pos:line="172" pos:column="13">{
                <decl_stmt><decl><type><name><name pos:line="173" pos:column="17">List</name><argument_list pos:line="173" pos:column="21">&lt;<argument><name pos:line="173" pos:column="22">XOSymbol</name></argument>&gt;</argument_list></name></type> <name pos:line="173" pos:column="32">xoSymbolLine</name> <init pos:line="173" pos:column="45">= <expr><op:operator pos:line="173" pos:column="47">new</op:operator> <call><name><name pos:line="173" pos:column="51">List</name><argument_list pos:line="173" pos:column="55">&lt;<argument><name pos:line="173" pos:column="56">XOSymbol</name></argument>&gt;</argument_list></name><argument_list pos:line="173" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for pos:line="174" pos:column="17">for (<init><decl><type><name pos:line="174" pos:column="22">int</name></type> <name pos:line="174" pos:column="26">row</name> <init pos:line="174" pos:column="30">= <expr><lit:literal type="number" pos:line="174" pos:column="32">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="174" pos:column="35">row</name> <op:operator pos:line="174" pos:column="39">&lt;</op:operator> <call><name><name pos:line="174" pos:column="41">gamePadNode</name><op:operator pos:line="174" pos:column="52">.</op:operator><name pos:line="174" pos:column="53">GamePad</name><op:operator pos:line="174" pos:column="60">.</op:operator><name pos:line="174" pos:column="61">GetLength</name></name><argument_list pos:line="174" pos:column="70">(<argument><expr><lit:literal type="number" pos:line="174" pos:column="71">0</lit:literal></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name pos:line="174" pos:column="75">row</name><op:operator pos:line="174" pos:column="78">++</op:operator></expr></incr>)
                <block pos:line="175" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="176" pos:column="21">int</name></type> <name pos:line="176" pos:column="25">column</name> <init pos:line="176" pos:column="32">= <expr><lit:literal type="number" pos:line="176" pos:column="34">0</lit:literal></expr></init></decl>;</decl_stmt>

                    <switch pos:line="178" pos:column="21">switch <condition pos:line="178" pos:column="28">(<expr><name pos:line="178" pos:column="29">diagonal</name></expr>)</condition>
                    <block pos:line="179" pos:column="21">{
                        <case pos:line="180" pos:column="25">case <expr><lit:literal type="number" pos:line="180" pos:column="30">0</lit:literal></expr>: <expr_stmt><expr><name pos:line="180" pos:column="33">column</name> <op:operator pos:line="180" pos:column="40">=</op:operator> <name pos:line="180" pos:column="42">row</name></expr>;</expr_stmt>
                            <break pos:line="181" pos:column="29">break;</break>
                        </case><case pos:line="182" pos:column="25">case <expr><lit:literal type="number" pos:line="182" pos:column="30">1</lit:literal></expr>: <expr_stmt><expr><name pos:line="182" pos:column="33">column</name> <op:operator pos:line="182" pos:column="40">=</op:operator> <op:operator pos:line="182" pos:column="42">(</op:operator><call><name><name pos:line="182" pos:column="43">gamePadNode</name><op:operator pos:line="182" pos:column="54">.</op:operator><name pos:line="182" pos:column="55">GamePad</name><op:operator pos:line="182" pos:column="62">.</op:operator><name pos:line="182" pos:column="63">GetLength</name></name><argument_list pos:line="182" pos:column="72">(<argument><expr><lit:literal type="number" pos:line="182" pos:column="73">0</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="182" pos:column="76">-</op:operator> <lit:literal type="number" pos:line="182" pos:column="78">1</lit:literal><op:operator pos:line="182" pos:column="79">)</op:operator> <op:operator pos:line="182" pos:column="81">-</op:operator> <name pos:line="182" pos:column="83">row</name></expr>;</expr_stmt>
                            <break pos:line="183" pos:column="29">break;</break>
                    </case>}</block></switch>
                    <expr_stmt><expr><call><name><name pos:line="185" pos:column="21">xoSymbolLine</name><op:operator pos:line="185" pos:column="33">.</op:operator><name pos:line="185" pos:column="34">Add</name></name><argument_list pos:line="185" pos:column="37">(<argument><expr><op:operator pos:line="185" pos:column="38">(</op:operator><name pos:line="185" pos:column="39">XOSymbol</name><op:operator pos:line="185" pos:column="47">)</op:operator><call><name><name pos:line="185" pos:column="48">gamePadNode</name><op:operator pos:line="185" pos:column="59">.</op:operator><name pos:line="185" pos:column="60">GamePad</name><op:operator pos:line="185" pos:column="67">.</op:operator><name pos:line="185" pos:column="68">GetValue</name></name><argument_list pos:line="185" pos:column="76">(<argument><expr><name pos:line="185" pos:column="77">row</name></expr></argument>, <argument><expr><name pos:line="185" pos:column="82">column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
                <if pos:line="187" pos:column="17">if <condition pos:line="187" pos:column="20">(<expr><call><name pos:line="187" pos:column="21">isWinningMove</name><argument_list pos:line="187" pos:column="34">(<argument><expr><name pos:line="187" pos:column="35">xoSymbol</name></expr></argument>, <argument><expr><name pos:line="187" pos:column="45">xoSymbolLine</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="187" pos:column="59">
                <block pos:line="188" pos:column="17">{
                    <expr_stmt><expr><name><name pos:line="189" pos:column="21">gamePadNode</name><op:operator pos:line="189" pos:column="32">.</op:operator><name pos:line="189" pos:column="33">IsWinning</name></name> <op:operator pos:line="189" pos:column="43">=</op:operator> <lit:literal type="boolean" pos:line="189" pos:column="45">true</lit:literal></expr>;</expr_stmt>
                    <return pos:line="190" pos:column="21">return;</return>
                }</block></then></if>
                <if pos:line="192" pos:column="17">if <condition pos:line="192" pos:column="20">(<expr><call><name pos:line="192" pos:column="21">hasPotential</name><argument_list pos:line="192" pos:column="33">(<argument><expr><name pos:line="192" pos:column="34">xoSymbol</name></expr></argument>, <argument><expr><name pos:line="192" pos:column="44">xoSymbolLine</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="192" pos:column="58">
                <block pos:line="193" pos:column="17">{
                    <switch pos:line="194" pos:column="21">switch <condition pos:line="194" pos:column="28">(<expr><name pos:line="194" pos:column="29">xoSymbol</name></expr>)</condition>
                    <block pos:line="195" pos:column="21">{
                        <case pos:line="196" pos:column="25">case <expr><name><name pos:line="196" pos:column="30">XOSymbol</name><op:operator pos:line="196" pos:column="38">.</op:operator><name pos:line="196" pos:column="39">X</name></name></expr>:
                            <expr_stmt><expr><name><name pos:line="197" pos:column="29">gamePadNode</name><op:operator pos:line="197" pos:column="40">.</op:operator><name pos:line="197" pos:column="41">XFunction</name></name><op:operator pos:line="197" pos:column="50">++</op:operator></expr>;</expr_stmt>
                            <break pos:line="198" pos:column="29">break;</break>
                        </case><case pos:line="199" pos:column="25">case <expr><name><name pos:line="199" pos:column="30">XOSymbol</name><op:operator pos:line="199" pos:column="38">.</op:operator><name pos:line="199" pos:column="39">O</name></name></expr>:
                            <expr_stmt><expr><name><name pos:line="200" pos:column="29">gamePadNode</name><op:operator pos:line="200" pos:column="40">.</op:operator><name pos:line="200" pos:column="41">OFunction</name></name><op:operator pos:line="200" pos:column="50">++</op:operator></expr>;</expr_stmt>
                            <break pos:line="201" pos:column="29">break;</break>
                    </case>}</block></switch>
                }</block></then></if>
            }</block></for>
        }</block></function>

        <function><type><specifier pos:line="207" pos:column="9">private</specifier> <name><name pos:line="207" pos:column="17">List</name><argument_list pos:line="207" pos:column="21">&lt;<argument><name pos:line="207" pos:column="22">int</name></argument>&gt;</argument_list></name></type> <name pos:line="207" pos:column="27">countEmptyCells</name><parameter_list pos:line="207" pos:column="42">(<param><decl><type><name><name pos:line="207" pos:column="43">XOSymbol</name><index pos:line="207" pos:column="51">[,]</index></name></type> <name pos:line="207" pos:column="55">gamePad</name></decl></param>)</parameter_list>
        <block pos:line="208" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="209" pos:column="13">List</name><argument_list pos:line="209" pos:column="17">&lt;<argument><name pos:line="209" pos:column="18">int</name></argument>&gt;</argument_list></name></type> <name pos:line="209" pos:column="23">listEmptyCellsIndex</name> <init pos:line="209" pos:column="43">= <expr><op:operator pos:line="209" pos:column="45">new</op:operator> <call><name><name pos:line="209" pos:column="49">List</name><argument_list pos:line="209" pos:column="53">&lt;<argument><name pos:line="209" pos:column="54">int</name></argument>&gt;</argument_list></name><argument_list pos:line="209" pos:column="58">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="210" pos:column="13">int</name></type> <name pos:line="210" pos:column="17">index</name> <init pos:line="210" pos:column="23">= <expr><lit:literal type="number" pos:line="210" pos:column="25">0</lit:literal></expr></init></decl>;</decl_stmt>
            <for pos:line="211" pos:column="13">for (<init><decl><type><name pos:line="211" pos:column="18">int</name></type> <name pos:line="211" pos:column="22">row</name> <init pos:line="211" pos:column="26">= <expr><lit:literal type="number" pos:line="211" pos:column="28">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="211" pos:column="31">row</name> <op:operator pos:line="211" pos:column="35">&lt;</op:operator> <call><name><name pos:line="211" pos:column="37">gamePad</name><op:operator pos:line="211" pos:column="44">.</op:operator><name pos:line="211" pos:column="45">GetLength</name></name><argument_list pos:line="211" pos:column="54">(<argument><expr><lit:literal type="number" pos:line="211" pos:column="55">0</lit:literal></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name pos:line="211" pos:column="59">row</name><op:operator pos:line="211" pos:column="62">++</op:operator></expr></incr>)
            <block pos:line="212" pos:column="13">{
                <for pos:line="213" pos:column="17">for (<init><decl><type><name pos:line="213" pos:column="22">int</name></type> <name pos:line="213" pos:column="26">column</name> <init pos:line="213" pos:column="33">= <expr><lit:literal type="number" pos:line="213" pos:column="35">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="213" pos:column="38">column</name> <op:operator pos:line="213" pos:column="45">&lt;</op:operator> <call><name><name pos:line="213" pos:column="47">gamePad</name><op:operator pos:line="213" pos:column="54">.</op:operator><name pos:line="213" pos:column="55">GetLength</name></name><argument_list pos:line="213" pos:column="64">(<argument><expr><lit:literal type="number" pos:line="213" pos:column="65">1</lit:literal></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name pos:line="213" pos:column="69">column</name><op:operator pos:line="213" pos:column="75">++</op:operator></expr></incr>)
                <block pos:line="214" pos:column="17">{
                    <if pos:line="215" pos:column="21">if <condition pos:line="215" pos:column="24">(<expr><op:operator pos:line="215" pos:column="25">(</op:operator><name pos:line="215" pos:column="26">XOSymbol</name><op:operator pos:line="215" pos:column="34">)</op:operator><call><name><name pos:line="215" pos:column="35">gamePad</name><op:operator pos:line="215" pos:column="42">.</op:operator><name pos:line="215" pos:column="43">GetValue</name></name><argument_list pos:line="215" pos:column="51">(<argument><expr><name pos:line="215" pos:column="52">row</name></expr></argument>, <argument><expr><name pos:line="215" pos:column="57">column</name></expr></argument>)</argument_list></call> <op:operator pos:line="215" pos:column="65">==</op:operator> <name><name pos:line="215" pos:column="68">XOSymbol</name><op:operator pos:line="215" pos:column="76">.</op:operator><name pos:line="215" pos:column="77">EMPTY</name></name></expr>)</condition><then pos:line="215" pos:column="83">
                    <block pos:line="216" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="217" pos:column="25">listEmptyCellsIndex</name><op:operator pos:line="217" pos:column="44">.</op:operator><name pos:line="217" pos:column="45">Add</name></name><argument_list pos:line="217" pos:column="48">(<argument><expr><name pos:line="217" pos:column="49">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <expr_stmt><expr><name pos:line="219" pos:column="21">index</name><op:operator pos:line="219" pos:column="26">++</op:operator></expr>;</expr_stmt>
                }</block></for>
            }</block></for>
            <return pos:line="222" pos:column="13">return <expr><name pos:line="222" pos:column="20">listEmptyCellsIndex</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="225" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="226" pos:column="9">/// Returns the row index from the GameMove position</comment>
        <comment type="line" pos:line="227" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="228" pos:column="9">/// &lt;param name="position"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="229" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="230" pos:column="9">private</specifier> <name pos:line="230" pos:column="17">int</name></type> <name pos:line="230" pos:column="21">getRowIndex</name><parameter_list pos:line="230" pos:column="32">(<param><decl><type><name pos:line="230" pos:column="33">int</name></type> <name pos:line="230" pos:column="37">position</name></decl></param>)</parameter_list>
        <block pos:line="231" pos:column="9">{
            <return pos:line="232" pos:column="13">return <expr><name pos:line="232" pos:column="20">position</name> <op:operator pos:line="232" pos:column="29">/</op:operator> <lit:literal type="number" pos:line="232" pos:column="31">3</lit:literal></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="235" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="236" pos:column="9">/// Returns the column index from the GameMove position</comment>
        <comment type="line" pos:line="237" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="238" pos:column="9">/// &lt;param name="position"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="239" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="240" pos:column="9">private</specifier> <name pos:line="240" pos:column="17">int</name></type> <name pos:line="240" pos:column="21">getColumnIndex</name><parameter_list pos:line="240" pos:column="35">(<param><decl><type><name pos:line="240" pos:column="36">int</name></type> <name pos:line="240" pos:column="40">position</name></decl></param>)</parameter_list>
        <block pos:line="241" pos:column="9">{
            <return pos:line="242" pos:column="13">return <expr><name pos:line="242" pos:column="20">position</name> <op:operator pos:line="242" pos:column="29">%</op:operator> <lit:literal type="number" pos:line="242" pos:column="31">3</lit:literal></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="245" pos:column="9">private</specifier> <name pos:line="245" pos:column="17">bool</name></type> <name pos:line="245" pos:column="22">isWinningMove</name><parameter_list pos:line="245" pos:column="35">(<param><decl><type><name pos:line="245" pos:column="36">XOSymbol</name></type> <name pos:line="245" pos:column="45">xoSymbol</name></decl></param>, <param><decl><type><name><name pos:line="245" pos:column="55">List</name><argument_list pos:line="245" pos:column="59">&lt;<argument><name pos:line="245" pos:column="60">XOSymbol</name></argument>&gt;</argument_list></name></type> <name pos:line="245" pos:column="70">xoSymbolLine</name></decl></param>)</parameter_list>
        <block pos:line="246" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="247" pos:column="13">bool</name></type> <name pos:line="247" pos:column="18">isMathced</name> <init pos:line="247" pos:column="28">= <expr><lit:literal type="boolean" pos:line="247" pos:column="30">true</lit:literal></expr></init></decl>;</decl_stmt>
            <foreach pos:line="248" pos:column="13">foreach (<init><decl><type><name pos:line="248" pos:column="22">XOSymbol</name></type> <name pos:line="248" pos:column="31">xoSymbolCell</name> <range pos:line="248" pos:column="44">in <expr><name pos:line="248" pos:column="47">xoSymbolLine</name></expr></range></decl></init>)
            <block pos:line="249" pos:column="13">{
                <expr_stmt><expr><name pos:line="250" pos:column="17">isMathced</name> <op:operator pos:line="250" pos:column="27">&amp;=</op:operator> <name pos:line="250" pos:column="30">xoSymbolCell</name> <op:operator pos:line="250" pos:column="43">==</op:operator> <name pos:line="250" pos:column="46">xoSymbol</name></expr>;</expr_stmt>
            }</block></foreach>
            <return pos:line="252" pos:column="13">return <expr><name pos:line="252" pos:column="20">isMathced</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="255" pos:column="9">private</specifier> <name pos:line="255" pos:column="17">bool</name></type> <name pos:line="255" pos:column="22">hasPotential</name><parameter_list pos:line="255" pos:column="34">(<param><decl><type><name pos:line="255" pos:column="35">XOSymbol</name></type> <name pos:line="255" pos:column="44">xoSymbol</name></decl></param>, <param><decl><type><name><name pos:line="255" pos:column="54">List</name><argument_list pos:line="255" pos:column="58">&lt;<argument><name pos:line="255" pos:column="59">XOSymbol</name></argument>&gt;</argument_list></name></type> <name pos:line="255" pos:column="69">xoSymbolLine</name></decl></param>)</parameter_list>
        <block pos:line="256" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="257" pos:column="13">bool</name></type> <name pos:line="257" pos:column="18">isMatchedOrEmpty</name> <init pos:line="257" pos:column="35">= <expr><lit:literal type="boolean" pos:line="257" pos:column="37">true</lit:literal></expr></init></decl>;</decl_stmt>
            <foreach pos:line="258" pos:column="13">foreach (<init><decl><type><name pos:line="258" pos:column="22">XOSymbol</name></type> <name pos:line="258" pos:column="31">xoSymbolCell</name> <range pos:line="258" pos:column="44">in <expr><name pos:line="258" pos:column="47">xoSymbolLine</name></expr></range></decl></init>)
            <block pos:line="259" pos:column="13">{
                <expr_stmt><expr><name pos:line="260" pos:column="17">isMatchedOrEmpty</name> <op:operator pos:line="260" pos:column="34">&amp;=</op:operator> <op:operator pos:line="260" pos:column="37">(</op:operator><name pos:line="260" pos:column="38">xoSymbolCell</name> <op:operator pos:line="260" pos:column="51">==</op:operator> <name pos:line="260" pos:column="54">xoSymbol</name> <op:operator pos:line="260" pos:column="63">||</op:operator> <name pos:line="260" pos:column="66">xoSymbolCell</name> <op:operator pos:line="260" pos:column="79">==</op:operator> <name><name pos:line="260" pos:column="82">XOSymbol</name><op:operator pos:line="260" pos:column="90">.</op:operator><name pos:line="260" pos:column="91">EMPTY</name></name><op:operator pos:line="260" pos:column="96">)</op:operator></expr>;</expr_stmt>
            }</block></foreach>
            <return pos:line="262" pos:column="13">return <expr><name pos:line="262" pos:column="20">isMatchedOrEmpty</name></expr>;</return>
        }</block></function>

    }</block></class>
}</block></namespace>
</unit>
