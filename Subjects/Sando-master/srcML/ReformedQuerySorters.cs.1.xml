<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Core\Core\QueryRefomers\ReformedQuerySorters.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Text</name></name>;</using>

<namespace pos:line="6" pos:column="1">namespace <name><name pos:line="6" pos:column="11">Sando</name><op:operator pos:line="6" pos:column="16">.</op:operator><name pos:line="6" pos:column="17">Core</name><op:operator pos:line="6" pos:column="21">.</op:operator><name pos:line="6" pos:column="22">QueryRefomers</name></name>
<block pos:line="7" pos:column="1">{
    <enum><specifier pos:line="8" pos:column="5">internal</specifier> enum <macro><name pos:line="8" pos:column="19">QuerySorterType</name></macro>
    <block pos:line="9" pos:column="5">{
        <decl><name pos:line="10" pos:column="9">EDIT_DISTANCE</name></decl><op:operator pos:line="10" pos:column="22">,</op:operator>
        <decl><name pos:line="11" pos:column="9">COOCCURRENCE</name></decl><op:operator pos:line="11" pos:column="21">,</op:operator>
        <decl><name pos:line="12" pos:column="9">ROBIN_HOOD</name></decl><op:operator pos:line="12" pos:column="19">,</op:operator>
        <decl><name pos:line="13" pos:column="9">SCORE</name></decl><op:operator pos:line="13" pos:column="14">,</op:operator>
        <decl><name pos:line="14" pos:column="9">NULL_SORTER</name></decl><op:operator pos:line="14" pos:column="20">,</op:operator>
    }</block>


    <decl pos:line="18" pos:column="5">internal partial <name pos:line="18" pos:column="22">class</name> <name pos:line="18" pos:column="28">ReformedQuerySorters</name>
    <block pos:line="19" pos:column="5">{
        <class><specifier pos:line="20" pos:column="9">private</specifier> class <name pos:line="20" pos:column="23">EditDistanceSorter</name> <super pos:line="20" pos:column="42">: <name pos:line="20" pos:column="44">IReformedQuerySorter</name></super>
        <block pos:line="21" pos:column="9">{
            <function><type><specifier pos:line="22" pos:column="13">public</specifier> <name><name pos:line="22" pos:column="20">IEnumerable</name><argument_list pos:line="22" pos:column="31">&lt;<argument><name pos:line="22" pos:column="32">IReformedQuery</name></argument>&gt;</argument_list></name></type> <name pos:line="22" pos:column="48">SortReformedQueries</name><parameter_list pos:line="22" pos:column="67">(<param><decl><type><name><name pos:line="22" pos:column="68">IEnumerable</name><argument_list pos:line="22" pos:column="79">&lt;<argument><name pos:line="22" pos:column="80">IReformedQuery</name></argument>&gt;</argument_list></name></type> <name pos:line="22" pos:column="96">queries</name></decl></param>)</parameter_list>
            <block pos:line="23" pos:column="13">{
                <return pos:line="24" pos:column="17">return <expr><call><name><name pos:line="24" pos:column="24">queries</name><op:operator pos:line="24" pos:column="31">.</op:operator><name pos:line="24" pos:column="32">OrderBy</name></name><argument_list pos:line="24" pos:column="39">(<argument><expr><name pos:line="24" pos:column="40">GetTotalDistance</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>

            <function><type><specifier pos:line="27" pos:column="13">private</specifier> <name pos:line="27" pos:column="21">int</name></type> <name pos:line="27" pos:column="25">GetTotalDistance</name><parameter_list pos:line="27" pos:column="41">(<param><decl><type><name pos:line="27" pos:column="42">IReformedQuery</name></type> <name pos:line="27" pos:column="57">query</name></decl></param>)</parameter_list>
            <block pos:line="28" pos:column="13">{
                <return pos:line="29" pos:column="17">return <expr><call><name><name pos:line="29" pos:column="24">query</name><op:operator pos:line="29" pos:column="29">.</op:operator><name pos:line="29" pos:column="30">ReformedWords</name><op:operator pos:line="29" pos:column="43">.</op:operator><name pos:line="29" pos:column="44">Sum</name></name><argument_list pos:line="29" pos:column="47">(<argument><expr><lambda><name pos:line="29" pos:column="48">term</name> <op:operator pos:line="29" pos:column="53">=&gt;</op:operator> <name><name pos:line="29" pos:column="56">term</name><op:operator pos:line="29" pos:column="60">.</op:operator><name pos:line="29" pos:column="61">DistanceFromOriginal</name></name></lambda></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class>

        <class><specifier pos:line="33" pos:column="9">private</specifier> class <name pos:line="33" pos:column="23">CoOccurrenceSorter</name> <super pos:line="33" pos:column="42">: <name pos:line="33" pos:column="44">IReformedQuerySorter</name></super>
        <block pos:line="34" pos:column="9">{
            <function><type><specifier pos:line="35" pos:column="13">public</specifier> <name><name pos:line="35" pos:column="20">IEnumerable</name><argument_list pos:line="35" pos:column="31">&lt;<argument><name pos:line="35" pos:column="32">IReformedQuery</name></argument>&gt;</argument_list></name></type> <name pos:line="35" pos:column="48">SortReformedQueries</name><parameter_list pos:line="35" pos:column="67">(<param><decl><type><name><name pos:line="35" pos:column="68">IEnumerable</name><argument_list pos:line="35" pos:column="79">&lt;<argument><name pos:line="35" pos:column="80">IReformedQuery</name></argument>&gt;</argument_list></name></type> <name pos:line="35" pos:column="96">queries</name></decl></param>)</parameter_list>
            <block pos:line="36" pos:column="13">{
                <return pos:line="37" pos:column="17">return <expr><call><name><name pos:line="37" pos:column="24">queries</name><op:operator pos:line="37" pos:column="31">.</op:operator><name pos:line="37" pos:column="32">OrderBy</name></name><argument_list pos:line="37" pos:column="39">(<argument><expr><lambda><name pos:line="37" pos:column="40">q</name> <op:operator pos:line="37" pos:column="42">=&gt;</op:operator> <op:operator pos:line="37" pos:column="45">-</op:operator><name><name pos:line="37" pos:column="46">q</name><op:operator pos:line="37" pos:column="47">.</op:operator><name pos:line="37" pos:column="48">CoOccurrenceCount</name></name></lambda></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class>


        <class><specifier pos:line="42" pos:column="9">private</specifier> class <name pos:line="42" pos:column="23">RobinHoodSorter</name> <super pos:line="42" pos:column="39">: <name pos:line="42" pos:column="41">IReformedQuerySorter</name></super>
        <block pos:line="43" pos:column="9">{ 
            <function><type><specifier pos:line="44" pos:column="13">public</specifier> <name><name pos:line="44" pos:column="20">IEnumerable</name><argument_list pos:line="44" pos:column="31">&lt;<argument><name pos:line="44" pos:column="32">IReformedQuery</name></argument>&gt;</argument_list></name></type> <name pos:line="44" pos:column="48">SortReformedQueries</name><parameter_list pos:line="44" pos:column="67">(<param><decl><type><name><name pos:line="44" pos:column="68">IEnumerable</name><argument_list pos:line="44" pos:column="79">&lt;<argument><name pos:line="44" pos:column="80">IReformedQuery</name></argument>&gt;</argument_list></name></type> <name pos:line="44" pos:column="96">queries</name></decl></param>)</parameter_list>
            <block pos:line="45" pos:column="13">{
                <expr_stmt><expr><name pos:line="46" pos:column="17">queries</name> <op:operator pos:line="46" pos:column="25">=</op:operator> <call><name><name pos:line="46" pos:column="27">queries</name><op:operator pos:line="46" pos:column="34">.</op:operator><name pos:line="46" pos:column="35">ToList</name></name><argument_list pos:line="46" pos:column="41">()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="47" pos:column="17">var</name></type> <name pos:line="47" pos:column="21">mispellings</name> <init pos:line="47" pos:column="33">= <expr><call><name pos:line="47" pos:column="35">SortCorrectionByEditDistance</name><argument_list pos:line="47" pos:column="63">(<argument><expr><call><name pos:line="47" pos:column="64">GetCorrectedQueries</name><argument_list pos:line="47" pos:column="83">(<argument><expr><name pos:line="47" pos:column="84">queries</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="47" pos:column="93">.</op:operator><call><name pos:line="47" pos:column="94">ToList</name><argument_list pos:line="47" pos:column="100">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="48" pos:column="17">var</name></type> <name pos:line="48" pos:column="21">others</name> <init pos:line="48" pos:column="28">= <expr><call><name><name pos:line="48" pos:column="30">queries</name><op:operator pos:line="48" pos:column="37">.</op:operator><name pos:line="48" pos:column="38">Except</name></name><argument_list pos:line="48" pos:column="44">(<argument><expr><name pos:line="48" pos:column="45">mispellings</name></expr></argument>)</argument_list></call><op:operator pos:line="48" pos:column="57">.</op:operator><call><name pos:line="48" pos:column="58">ToList</name><argument_list pos:line="48" pos:column="64">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="49" pos:column="17">var</name></type> <name pos:line="49" pos:column="21">othersWithSynonym</name> <init pos:line="49" pos:column="39">= <expr><call><name pos:line="49" pos:column="41">SortByCoOccurCount</name><argument_list pos:line="49" pos:column="59">(<argument><expr><call><name pos:line="49" pos:column="60">SortBySynonymSimilarity</name>
                    <argument_list pos:line="50" pos:column="21">(<argument><expr><call><name pos:line="50" pos:column="22">GetSynonymQueries</name><argument_list pos:line="50" pos:column="39">(<argument><expr><name pos:line="50" pos:column="40">others</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="50" pos:column="49">.</op:operator><call><name pos:line="50" pos:column="50">ToList</name><argument_list pos:line="50" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="51" pos:column="17">var</name></type> <name pos:line="51" pos:column="21">othersWithoutSynonym</name> <init pos:line="51" pos:column="42">= <expr><call><name pos:line="51" pos:column="44">SortByCoOccurCount</name><argument_list pos:line="51" pos:column="62">(<argument><expr><call><name><name pos:line="51" pos:column="63">others</name><op:operator pos:line="51" pos:column="69">.</op:operator><name pos:line="51" pos:column="70">Except</name></name><argument_list pos:line="51" pos:column="76">(<argument><expr><name pos:line="51" pos:column="77">othersWithSynonym</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="51" pos:column="96">.</op:operator><call><name pos:line="51" pos:column="97">ToList</name><argument_list pos:line="51" pos:column="103">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="52" pos:column="17">others</name><op:operator pos:line="52" pos:column="23">.</op:operator><name pos:line="52" pos:column="24">Clear</name></name><argument_list pos:line="52" pos:column="29">()</argument_list></call></expr>;</expr_stmt> 
                <expr_stmt><expr><call><name><name pos:line="53" pos:column="17">others</name><op:operator pos:line="53" pos:column="23">.</op:operator><name pos:line="53" pos:column="24">AddRange</name></name><argument_list pos:line="53" pos:column="32">(<argument><expr><name pos:line="53" pos:column="33">othersWithSynonym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="54" pos:column="17">others</name><op:operator pos:line="54" pos:column="23">.</op:operator><name pos:line="54" pos:column="24">AddRange</name></name><argument_list pos:line="54" pos:column="32">(<argument><expr><name pos:line="54" pos:column="33">othersWithoutSynonym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="55" pos:column="17">return <expr><call><name pos:line="55" pos:column="24">MergetList</name><argument_list pos:line="55" pos:column="34">(<argument><expr><name pos:line="55" pos:column="35">mispellings</name></expr></argument>, <argument><expr><name pos:line="55" pos:column="48">others</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>

            <function><type><specifier pos:line="58" pos:column="13">private</specifier> <name><name pos:line="58" pos:column="21">IEnumerable</name><argument_list pos:line="58" pos:column="32">&lt;<argument><name pos:line="58" pos:column="33">IReformedQuery</name></argument>&gt;</argument_list></name></type> <name pos:line="58" pos:column="49">SortBySynonymSimilarity</name><parameter_list pos:line="58" pos:column="72">(<param><decl><type><name><name pos:line="58" pos:column="73">IEnumerable</name><argument_list pos:line="58" pos:column="84">&lt;<argument><name pos:line="58" pos:column="85">IReformedQuery</name></argument>&gt;</argument_list></name></type>
                <name pos:line="59" pos:column="17">queries</name></decl></param>)</parameter_list>
            <block pos:line="60" pos:column="13">{
                <return pos:line="61" pos:column="17">return <expr><call><name><name pos:line="61" pos:column="24">queries</name><op:operator pos:line="61" pos:column="31">.</op:operator><name pos:line="61" pos:column="32">OrderByDescending</name></name><argument_list pos:line="61" pos:column="49">(<argument><expr><lambda><name pos:line="61" pos:column="50">q</name> <op:operator pos:line="61" pos:column="52">=&gt;</op:operator> <call><name><name pos:line="61" pos:column="55">q</name><op:operator pos:line="61" pos:column="56">.</op:operator><name pos:line="61" pos:column="57">ReformedWords</name><op:operator pos:line="61" pos:column="70">.</op:operator><name pos:line="61" pos:column="71">Sum</name></name><argument_list pos:line="61" pos:column="74">(<argument><expr><lambda><name pos:line="61" pos:column="75">w</name> <op:operator pos:line="61" pos:column="77">=&gt;</op:operator> <name pos:line="61" pos:column="80">w</name> <op:operator pos:line="61" pos:column="82">as</op:operator> <name pos:line="61" pos:column="85">SynonymReformedWord</name> <op:operator pos:line="61" pos:column="105">!=</op:operator> <name pos:line="61" pos:column="108">null</name>
                    <op:operator pos:line="62" pos:column="21">?</op:operator> <op:operator pos:line="62" pos:column="23">(</op:operator><name pos:line="62" pos:column="24">w</name> <op:operator pos:line="62" pos:column="26">as</op:operator> <name pos:line="62" pos:column="29">SynonymReformedWord</name><op:operator pos:line="62" pos:column="48">)</op:operator><op:operator pos:line="62" pos:column="49">.</op:operator><name pos:line="62" pos:column="50">SynonymSimilarityScore</name> <op:operator pos:line="62" pos:column="73">:</op:operator> <lit:literal type="number" pos:line="62" pos:column="75">0</lit:literal></lambda></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>


            <function><type><specifier pos:line="66" pos:column="13">private</specifier> <name><name pos:line="66" pos:column="21">IEnumerable</name><argument_list pos:line="66" pos:column="32">&lt;<argument><name pos:line="66" pos:column="33">IReformedQuery</name></argument>&gt;</argument_list></name></type> <name pos:line="66" pos:column="49">SortCorrectionByEditDistance</name><parameter_list pos:line="66" pos:column="77">(<param><decl><type><name><name pos:line="66" pos:column="78">IEnumerable</name><argument_list pos:line="66" pos:column="89">&lt;<argument><name pos:line="66" pos:column="90">IReformedQuery</name></argument>&gt;</argument_list></name></type> <name pos:line="66" pos:column="106">queries</name></decl></param> )</parameter_list>
            <block pos:line="67" pos:column="13">{
                <return pos:line="68" pos:column="17">return <expr><op:operator pos:line="68" pos:column="24">new</op:operator> <call><name pos:line="68" pos:column="28">EditDistanceSorter</name><argument_list pos:line="68" pos:column="46">()</argument_list></call><op:operator pos:line="68" pos:column="48">.</op:operator><call><name pos:line="68" pos:column="49">SortReformedQueries</name><argument_list pos:line="68" pos:column="68">(<argument><expr><name pos:line="68" pos:column="69">queries</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>

            <function><type><specifier pos:line="71" pos:column="13">private</specifier> <specifier pos:line="71" pos:column="21">static</specifier> <name><name pos:line="71" pos:column="28">IEnumerable</name><argument_list pos:line="71" pos:column="39">&lt;<argument><name pos:line="71" pos:column="40">IReformedQuery</name></argument>&gt;</argument_list></name></type> <name pos:line="71" pos:column="56">GetCorrectedQueries</name><parameter_list pos:line="71" pos:column="75">(<param><decl><type><name><name pos:line="71" pos:column="76">IEnumerable</name><argument_list pos:line="71" pos:column="87">&lt;<argument><name pos:line="71" pos:column="88">IReformedQuery</name></argument>&gt;</argument_list></name></type> <name pos:line="71" pos:column="104">queries</name></decl></param>)</parameter_list>
            <block pos:line="72" pos:column="13">{
                <return pos:line="73" pos:column="17">return <expr><call><name><name pos:line="73" pos:column="24">queries</name><op:operator pos:line="73" pos:column="31">.</op:operator><name pos:line="73" pos:column="32">Where</name></name><argument_list pos:line="73" pos:column="37">(<argument><expr><lambda><name pos:line="73" pos:column="38">q</name> <op:operator pos:line="73" pos:column="40">=&gt;</op:operator> <call><name><name pos:line="73" pos:column="43">q</name><op:operator pos:line="73" pos:column="44">.</op:operator><name pos:line="73" pos:column="45">ReformedWords</name><op:operator pos:line="73" pos:column="58">.</op:operator><name pos:line="73" pos:column="59">All</name></name><argument_list pos:line="73" pos:column="62">(<argument><expr><lambda><name pos:line="73" pos:column="63">t</name> <op:operator pos:line="73" pos:column="65">=&gt;</op:operator> <name><name pos:line="73" pos:column="68">t</name><op:operator pos:line="73" pos:column="69">.</op:operator><name pos:line="73" pos:column="70">Category</name></name> <op:operator pos:line="73" pos:column="79">==</op:operator> <name><name pos:line="73" pos:column="82">TermChangeCategory</name><op:operator pos:line="73" pos:column="100">.</op:operator><name pos:line="73" pos:column="101">MISSPELLING</name></name> <op:operator pos:line="73" pos:column="113">||</op:operator>
                    <name><name pos:line="74" pos:column="21">t</name><op:operator pos:line="74" pos:column="22">.</op:operator><name pos:line="74" pos:column="23">Category</name></name> <op:operator pos:line="74" pos:column="32">==</op:operator> <name><name pos:line="74" pos:column="35">TermChangeCategory</name><op:operator pos:line="74" pos:column="53">.</op:operator><name pos:line="74" pos:column="54">NOT_CHANGED</name></name></lambda></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="74" pos:column="67">.</op:operator><call><name pos:line="74" pos:column="68">ToList</name><argument_list pos:line="74" pos:column="74">()</argument_list></call></expr>;</return>
            }</block></function>

            <function><type><specifier pos:line="77" pos:column="13">private</specifier> <specifier pos:line="77" pos:column="21">static</specifier> <name><name pos:line="77" pos:column="28">IEnumerable</name><argument_list pos:line="77" pos:column="39">&lt;<argument><name pos:line="77" pos:column="40">IReformedQuery</name></argument>&gt;</argument_list></name></type> <name pos:line="77" pos:column="56">GetSynonymQueries</name><parameter_list pos:line="77" pos:column="73">(<param><decl><type><name><name pos:line="77" pos:column="74">IEnumerable</name><argument_list pos:line="77" pos:column="85">&lt;<argument><name pos:line="77" pos:column="86">IReformedQuery</name></argument>&gt;</argument_list></name></type> <name pos:line="77" pos:column="102">queries</name></decl></param>)</parameter_list>
            <block pos:line="78" pos:column="13">{
                <return pos:line="79" pos:column="17">return <expr><call><name><name pos:line="79" pos:column="24">queries</name><op:operator pos:line="79" pos:column="31">.</op:operator><name pos:line="79" pos:column="32">Where</name></name><argument_list pos:line="79" pos:column="37">(<argument><expr><lambda><name pos:line="79" pos:column="38">q</name> <op:operator pos:line="79" pos:column="40">=&gt;</op:operator> <call><name><name pos:line="79" pos:column="43">q</name><op:operator pos:line="79" pos:column="44">.</op:operator><name pos:line="79" pos:column="45">ReformedWords</name><op:operator pos:line="79" pos:column="58">.</op:operator><name pos:line="79" pos:column="59">Any</name></name><argument_list pos:line="79" pos:column="62">(<argument><expr><lambda><name pos:line="79" pos:column="63">w</name> <op:operator pos:line="79" pos:column="65">=&gt;</op:operator> <name><name pos:line="79" pos:column="68">w</name><op:operator pos:line="79" pos:column="69">.</op:operator><name pos:line="79" pos:column="70">Category</name></name> <op:operator pos:line="79" pos:column="79">==</op:operator> <name><name pos:line="79" pos:column="82">TermChangeCategory</name><op:operator pos:line="79" pos:column="100">.</op:operator><name pos:line="79" pos:column="101">GENERAL_SYNONYM</name></name> <op:operator pos:line="79" pos:column="117">||</op:operator>
                    <name><name pos:line="80" pos:column="21">w</name><op:operator pos:line="80" pos:column="22">.</op:operator><name pos:line="80" pos:column="23">Category</name></name> <op:operator pos:line="80" pos:column="32">==</op:operator> <name><name pos:line="80" pos:column="35">TermChangeCategory</name><op:operator pos:line="80" pos:column="53">.</op:operator><name pos:line="80" pos:column="54">SE_SYNONYM</name></name></lambda></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="80" pos:column="66">.</op:operator><call><name pos:line="80" pos:column="67">ToList</name><argument_list pos:line="80" pos:column="73">()</argument_list></call></expr>;</return>
            }</block></function>
            
            <function><type><specifier pos:line="83" pos:column="13">private</specifier> <specifier pos:line="83" pos:column="21">static</specifier> <name><name pos:line="83" pos:column="28">IEnumerable</name><argument_list pos:line="83" pos:column="39">&lt;<argument><name pos:line="83" pos:column="40">IReformedQuery</name></argument>&gt;</argument_list></name></type> <name pos:line="83" pos:column="56">SortByCoOccurCount</name><parameter_list pos:line="83" pos:column="74">(<param><decl><type><name><name pos:line="83" pos:column="75">IEnumerable</name><argument_list pos:line="83" pos:column="86">&lt;<argument><name pos:line="83" pos:column="87">IReformedQuery</name></argument>&gt;</argument_list></name></type> <name pos:line="83" pos:column="103">queries</name></decl></param>)</parameter_list>
            <block pos:line="84" pos:column="13">{
                <return pos:line="85" pos:column="17">return <expr><call><name><name pos:line="85" pos:column="24">queries</name><op:operator pos:line="85" pos:column="31">.</op:operator><name pos:line="85" pos:column="32">OrderBy</name></name><argument_list pos:line="85" pos:column="39">(<argument><expr><lambda><name pos:line="85" pos:column="40">q</name> <op:operator pos:line="85" pos:column="42">=&gt;</op:operator> <op:operator pos:line="85" pos:column="45">-</op:operator><name><name pos:line="85" pos:column="46">q</name><op:operator pos:line="85" pos:column="47">.</op:operator><name pos:line="85" pos:column="48">CoOccurrenceCount</name></name></lambda></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>


            <function><type><specifier pos:line="89" pos:column="13">private</specifier> <name><name pos:line="89" pos:column="21">IEnumerable</name><argument_list pos:line="89" pos:column="32">&lt;<argument><name pos:line="89" pos:column="33">IReformedQuery</name></argument>&gt;</argument_list></name></type> <name pos:line="89" pos:column="49">MergetList</name><parameter_list pos:line="89" pos:column="59">(<param><decl><type><name><name pos:line="89" pos:column="60">List</name><argument_list pos:line="89" pos:column="64">&lt;<argument><name pos:line="89" pos:column="65">IReformedQuery</name></argument>&gt;</argument_list></name></type> <name pos:line="89" pos:column="81">list1</name></decl></param>, <param><decl><type><name><name pos:line="89" pos:column="88">List</name><argument_list pos:line="89" pos:column="92">&lt;<argument><name pos:line="89" pos:column="93">IReformedQuery</name></argument>&gt;</argument_list></name></type> <name pos:line="89" pos:column="109">list2</name></decl></param>)</parameter_list>
            <block pos:line="90" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="91" pos:column="17">var</name></type> <name pos:line="91" pos:column="21">result</name> <init pos:line="91" pos:column="28">= <expr><op:operator pos:line="91" pos:column="30">new</op:operator> <call><name><name pos:line="91" pos:column="34">List</name><argument_list pos:line="91" pos:column="38">&lt;<argument><name pos:line="91" pos:column="39">IReformedQuery</name></argument>&gt;</argument_list></name><argument_list pos:line="91" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="92" pos:column="17">var</name></type> <name pos:line="92" pos:column="21">shortList</name> <init pos:line="92" pos:column="31">= <expr><name><name pos:line="92" pos:column="33">list1</name><op:operator pos:line="92" pos:column="38">.</op:operator><name pos:line="92" pos:column="39">Count</name></name> <op:operator pos:line="92" pos:column="45">&gt;</op:operator> <name><name pos:line="92" pos:column="47">list2</name><op:operator pos:line="92" pos:column="52">.</op:operator><name pos:line="92" pos:column="53">Count</name> <type:modifier pos:line="92" pos:column="59">?</type:modifier></name> <name pos:line="92" pos:column="61">list2</name> <op:operator pos:line="92" pos:column="67">:</op:operator> <name pos:line="92" pos:column="69">list1</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="93" pos:column="17">var</name></type> <name pos:line="93" pos:column="21">longList</name> <init pos:line="93" pos:column="30">= <expr><name pos:line="93" pos:column="32">shortList</name> <op:operator pos:line="93" pos:column="42">==</op:operator> <name pos:line="93" pos:column="45">list1</name> <op:operator pos:line="93" pos:column="51">?</op:operator> <name pos:line="93" pos:column="53">list2</name> <op:operator pos:line="93" pos:column="59">:</op:operator> <name pos:line="93" pos:column="61">list1</name></expr></init></decl>;</decl_stmt>

                <for pos:line="95" pos:column="17">for (<init><decl><type><name pos:line="95" pos:column="22">var</name></type> <name pos:line="95" pos:column="26">i</name> <init pos:line="95" pos:column="28">= <expr><lit:literal type="number" pos:line="95" pos:column="30">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="95" pos:column="33">i</name> <op:operator pos:line="95" pos:column="35">&lt;</op:operator> <name><name pos:line="95" pos:column="37">shortList</name><op:operator pos:line="95" pos:column="46">.</op:operator><name pos:line="95" pos:column="47">Count</name></name></expr>;</condition> <incr><expr><name pos:line="95" pos:column="54">i</name> <op:operator pos:line="95" pos:column="56">++</op:operator></expr></incr>)
                <block pos:line="96" pos:column="17">{
                    <if pos:line="97" pos:column="21">if <condition pos:line="97" pos:column="24">(<expr><name pos:line="97" pos:column="25">shortList</name> <op:operator pos:line="97" pos:column="35">==</op:operator> <name pos:line="97" pos:column="38">list1</name></expr>)</condition><then pos:line="97" pos:column="44">
                    <block pos:line="98" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="99" pos:column="25">result</name><op:operator pos:line="99" pos:column="31">.</op:operator><name pos:line="99" pos:column="32">Add</name></name><argument_list pos:line="99" pos:column="35">(<argument><expr><call><name><name pos:line="99" pos:column="36">shortList</name><op:operator pos:line="99" pos:column="45">.</op:operator><name pos:line="99" pos:column="46">ElementAt</name></name><argument_list pos:line="99" pos:column="55">(<argument><expr><name pos:line="99" pos:column="56">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="100" pos:column="25">result</name><op:operator pos:line="100" pos:column="31">.</op:operator><name pos:line="100" pos:column="32">Add</name></name><argument_list pos:line="100" pos:column="35">(<argument><expr><call><name><name pos:line="100" pos:column="36">longList</name><op:operator pos:line="100" pos:column="44">.</op:operator><name pos:line="100" pos:column="45">ElementAt</name></name><argument_list pos:line="100" pos:column="54">(<argument><expr><name pos:line="100" pos:column="55">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else pos:line="102" pos:column="21">else
                    <block pos:line="103" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="104" pos:column="25">result</name><op:operator pos:line="104" pos:column="31">.</op:operator><name pos:line="104" pos:column="32">Add</name></name><argument_list pos:line="104" pos:column="35">(<argument><expr><call><name><name pos:line="104" pos:column="36">longList</name><op:operator pos:line="104" pos:column="44">.</op:operator><name pos:line="104" pos:column="45">ElementAt</name></name><argument_list pos:line="104" pos:column="54">(<argument><expr><name pos:line="104" pos:column="55">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="105" pos:column="25">result</name><op:operator pos:line="105" pos:column="31">.</op:operator><name pos:line="105" pos:column="32">Add</name></name><argument_list pos:line="105" pos:column="35">(<argument><expr><call><name><name pos:line="105" pos:column="36">shortList</name><op:operator pos:line="105" pos:column="45">.</op:operator><name pos:line="105" pos:column="46">ElementAt</name></name><argument_list pos:line="105" pos:column="55">(<argument><expr><name pos:line="105" pos:column="56">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></for>
                <expr_stmt><expr><call><name><name pos:line="108" pos:column="17">result</name><op:operator pos:line="108" pos:column="23">.</op:operator><name pos:line="108" pos:column="24">AddRange</name></name><argument_list pos:line="108" pos:column="32">(<argument><expr><call><name><name pos:line="108" pos:column="33">longList</name><op:operator pos:line="108" pos:column="41">.</op:operator><name pos:line="108" pos:column="42">GetRange</name></name><argument_list pos:line="108" pos:column="50">(<argument><expr><name><name pos:line="108" pos:column="51">shortList</name><op:operator pos:line="108" pos:column="60">.</op:operator><name pos:line="108" pos:column="61">Count</name></name></expr></argument>, <argument><expr><name><name pos:line="108" pos:column="68">longList</name><op:operator pos:line="108" pos:column="76">.</op:operator><name pos:line="108" pos:column="77">Count</name></name> <op:operator pos:line="108" pos:column="83">-</op:operator> <name><name pos:line="108" pos:column="85">shortList</name><op:operator pos:line="108" pos:column="94">.</op:operator><name pos:line="108" pos:column="95">Count</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="109" pos:column="17">return <expr><name pos:line="109" pos:column="24">result</name></expr>;</return>
            }</block></function>
        }</block></class>


        <class><specifier pos:line="114" pos:column="9">private</specifier> class <name pos:line="114" pos:column="23">NullSorter</name> <super pos:line="114" pos:column="34">: <name pos:line="114" pos:column="36">IReformedQuerySorter</name></super>
        <block pos:line="115" pos:column="9">{
            <function><type><specifier pos:line="116" pos:column="13">public</specifier> <name><name pos:line="116" pos:column="20">IEnumerable</name><argument_list pos:line="116" pos:column="31">&lt;<argument><name pos:line="116" pos:column="32">IReformedQuery</name></argument>&gt;</argument_list></name></type> <name pos:line="116" pos:column="48">SortReformedQueries</name><parameter_list pos:line="116" pos:column="67">(<param><decl><type><name><name pos:line="116" pos:column="68">IEnumerable</name><argument_list pos:line="116" pos:column="79">&lt;<argument><name pos:line="116" pos:column="80">IReformedQuery</name></argument>&gt;</argument_list></name></type> <name pos:line="116" pos:column="96">queries</name></decl></param>)</parameter_list>
            <block pos:line="117" pos:column="13">{
                <return pos:line="118" pos:column="17">return <expr><name pos:line="118" pos:column="24">queries</name></expr>;</return>
            }</block></function>
        }</block></class>

        <function><type><specifier pos:line="122" pos:column="9">public</specifier> <specifier pos:line="122" pos:column="16">static</specifier> <name pos:line="122" pos:column="23">IReformedQuerySorter</name></type> <name pos:line="122" pos:column="44">GetReformedQuerySorter</name><parameter_list pos:line="122" pos:column="66">(<param><decl><type><name pos:line="122" pos:column="67">QuerySorterType</name></type> <name pos:line="122" pos:column="83">type</name></decl></param>)</parameter_list>
        <block pos:line="123" pos:column="9">{
            <if pos:line="124" pos:column="13">if<condition pos:line="124" pos:column="15">(<expr><name pos:line="124" pos:column="16">type</name> <op:operator pos:line="124" pos:column="21">==</op:operator> <name><name pos:line="124" pos:column="24">QuerySorterType</name><op:operator pos:line="124" pos:column="39">.</op:operator><name pos:line="124" pos:column="40">EDIT_DISTANCE</name></name></expr>)</condition><then pos:line="124" pos:column="54">
                <return pos:line="125" pos:column="17">return <expr><op:operator pos:line="125" pos:column="24">new</op:operator> <call><name pos:line="125" pos:column="28">EditDistanceSorter</name><argument_list pos:line="125" pos:column="46">()</argument_list></call></expr>;</return></then></if>
            <if pos:line="126" pos:column="13">if<condition pos:line="126" pos:column="15">(<expr><name pos:line="126" pos:column="16">type</name> <op:operator pos:line="126" pos:column="21">==</op:operator> <name><name pos:line="126" pos:column="24">QuerySorterType</name><op:operator pos:line="126" pos:column="39">.</op:operator><name pos:line="126" pos:column="40">ROBIN_HOOD</name></name></expr>)</condition><then pos:line="126" pos:column="51">
                <return pos:line="127" pos:column="17">return <expr><op:operator pos:line="127" pos:column="24">new</op:operator> <call><name pos:line="127" pos:column="28">RobinHoodSorter</name><argument_list pos:line="127" pos:column="43">()</argument_list></call></expr>;</return></then></if>
            <if pos:line="128" pos:column="13">if<condition pos:line="128" pos:column="15">(<expr><name pos:line="128" pos:column="16">type</name> <op:operator pos:line="128" pos:column="21">==</op:operator> <name><name pos:line="128" pos:column="24">QuerySorterType</name><op:operator pos:line="128" pos:column="39">.</op:operator><name pos:line="128" pos:column="40">COOCCURRENCE</name></name></expr>)</condition><then pos:line="128" pos:column="53">
                <return pos:line="129" pos:column="17">return <expr><op:operator pos:line="129" pos:column="24">new</op:operator> <call><name pos:line="129" pos:column="28">CoOccurrenceSorter</name><argument_list pos:line="129" pos:column="46">()</argument_list></call></expr>;</return></then></if>
            <if pos:line="130" pos:column="13">if<condition pos:line="130" pos:column="15">(<expr><name pos:line="130" pos:column="16">type</name> <op:operator pos:line="130" pos:column="21">==</op:operator> <name><name pos:line="130" pos:column="24">QuerySorterType</name><op:operator pos:line="130" pos:column="39">.</op:operator><name pos:line="130" pos:column="40">SCORE</name></name></expr>)</condition><then pos:line="130" pos:column="46">
                <return pos:line="131" pos:column="17">return <expr><op:operator pos:line="131" pos:column="24">new</op:operator> <call><name pos:line="131" pos:column="28">ScoreBasedSorter</name><argument_list pos:line="131" pos:column="44">()</argument_list></call></expr>;</return></then></if>
            <return pos:line="132" pos:column="13">return <expr><op:operator pos:line="132" pos:column="20">new</op:operator> <call><name pos:line="132" pos:column="24">NullSorter</name><argument_list pos:line="132" pos:column="34">()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></decl>
<decl/></enum>}</block></namespace>
</unit>
