<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\UI\UI\View\TagCloudBuilder.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Windows</name><op:operator pos:line="4" pos:column="21">.</op:operator><name pos:line="4" pos:column="22">Forms</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Windows</name><op:operator pos:line="5" pos:column="21">.</op:operator><name pos:line="5" pos:column="22">Media</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Sando</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">Core</name><op:operator pos:line="6" pos:column="17">.</op:operator><name pos:line="6" pos:column="18">Tools</name></name>;</using>
<using pos:line="7" pos:column="1">using <name pos:line="7" pos:column="7">Application</name> <init pos:line="7" pos:column="19">= <expr><name><name pos:line="7" pos:column="21">System</name><op:operator pos:line="7" pos:column="27">.</op:operator><name pos:line="7" pos:column="28">Windows</name><op:operator pos:line="7" pos:column="35">.</op:operator><name pos:line="7" pos:column="36">Application</name></name></expr></init>;</using>

<namespace pos:line="9" pos:column="1">namespace <name><name pos:line="9" pos:column="11">Sando</name><op:operator pos:line="9" pos:column="16">.</op:operator><name pos:line="9" pos:column="17">UI</name><op:operator pos:line="9" pos:column="19">.</op:operator><name pos:line="9" pos:column="20">View</name></name>
<block pos:line="10" pos:column="1">{
    <class type="interface"><specifier pos:line="11" pos:column="5">public</specifier> interface <name pos:line="11" pos:column="22">IShapedWord</name>
    <block pos:line="12" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="13" pos:column="9">String</name></type> <name pos:line="13" pos:column="16">Word</name> <block pos:line="13" pos:column="21">{ <function_decl><name pos:line="13" pos:column="23">get</name>;</function_decl> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><name pos:line="14" pos:column="9">int</name></type> <name pos:line="14" pos:column="13">FontSize</name> <block pos:line="14" pos:column="22">{ <function_decl><name pos:line="14" pos:column="24">get</name>;</function_decl> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><name pos:line="15" pos:column="9">Brush</name></type> <name pos:line="15" pos:column="15">Color</name> <block pos:line="15" pos:column="21">{ <function_decl><name pos:line="15" pos:column="23">get</name>;</function_decl> }</block></decl></decl_stmt>
    }</block></class>

    <class><specifier pos:line="18" pos:column="5">public</specifier> class <name pos:line="18" pos:column="18">TagCloudBuilder</name>
    <block pos:line="19" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="20" pos:column="9">private</specifier> <specifier pos:line="20" pos:column="17">readonly</specifier> <name pos:line="20" pos:column="26">IWordCoOccurrenceMatrix</name></type> <name pos:line="20" pos:column="50">matrix</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="21" pos:column="9">private</specifier> <specifier pos:line="21" pos:column="17">const</specifier> <name pos:line="21" pos:column="23">int</name></type> <name pos:line="21" pos:column="27">MAX_WORD_COUNT</name> <init pos:line="21" pos:column="42">= <expr><lit:literal type="number" pos:line="21" pos:column="44">200</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="23" pos:column="9">// The count of font and color should be same.</comment>
        <decl_stmt><decl><type><specifier pos:line="24" pos:column="9">private</specifier> <specifier pos:line="24" pos:column="17">readonly</specifier> <name pos:line="24" pos:column="26">int</name><index pos:line="24" pos:column="29">[]</index></type> <name pos:line="24" pos:column="32">FONT_POOL</name> <init pos:line="24" pos:column="42">= <expr><block pos:line="24" pos:column="44">{<expr><lit:literal type="number" pos:line="24" pos:column="45">15</lit:literal></expr>, <expr><lit:literal type="number" pos:line="24" pos:column="49">20</lit:literal></expr>, <expr><lit:literal type="number" pos:line="24" pos:column="53">25</lit:literal></expr>, <expr><lit:literal type="number" pos:line="24" pos:column="57">30</lit:literal></expr>, <expr><lit:literal type="number" pos:line="24" pos:column="61">35</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="26" pos:column="9">private</specifier> <specifier pos:line="26" pos:column="17">readonly</specifier> <name pos:line="26" pos:column="26">Brush</name><index pos:line="26" pos:column="31">[]</index></type> <name pos:line="26" pos:column="34">whiteBackgroundColorPool</name> <init pos:line="26" pos:column="59">= <expr><block pos:line="26" pos:column="61">{ <expr><name><name pos:line="26" pos:column="63">Brushes</name><op:operator pos:line="26" pos:column="70">.</op:operator><name pos:line="26" pos:column="71">LightSkyBlue</name></name></expr>, <expr><name><name pos:line="26" pos:column="85">Brushes</name><op:operator pos:line="26" pos:column="92">.</op:operator><name pos:line="26" pos:column="93">LightSkyBlue</name></name></expr>, 
            <expr><name><name pos:line="27" pos:column="13">Brushes</name><op:operator pos:line="27" pos:column="20">.</op:operator><name pos:line="27" pos:column="21">Blue</name></name></expr>, <expr><name><name pos:line="27" pos:column="27">Brushes</name><op:operator pos:line="27" pos:column="34">.</op:operator><name pos:line="27" pos:column="35">Navy</name></name></expr>, <expr><name><name pos:line="27" pos:column="41">Brushes</name><op:operator pos:line="27" pos:column="48">.</op:operator><name pos:line="27" pos:column="49">MidnightBlue</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="29" pos:column="9">private</specifier> <specifier pos:line="29" pos:column="17">readonly</specifier> <name pos:line="29" pos:column="26">Brush</name><index pos:line="29" pos:column="31">[]</index></type> <name pos:line="29" pos:column="34">darkBackgroundColorPool</name> <init pos:line="29" pos:column="58">= <expr><block pos:line="29" pos:column="60">{
                <expr><name><name pos:line="30" pos:column="17">Brushes</name><op:operator pos:line="30" pos:column="24">.</op:operator><name pos:line="30" pos:column="25">Blue</name></name></expr>, <expr><name><name pos:line="30" pos:column="31">Brushes</name><op:operator pos:line="30" pos:column="38">.</op:operator><name pos:line="30" pos:column="39">CadetBlue</name></name></expr>, <expr><name><name pos:line="30" pos:column="50">Brushes</name><op:operator pos:line="30" pos:column="57">.</op:operator><name pos:line="30" pos:column="58">DarkSeaGreen</name></name></expr>,
                <expr><name><name pos:line="31" pos:column="17">Brushes</name><op:operator pos:line="31" pos:column="24">.</op:operator><name pos:line="31" pos:column="25">LightSkyBlue</name></name></expr>, <expr><name><name pos:line="31" pos:column="39">Brushes</name><op:operator pos:line="31" pos:column="46">.</op:operator><name pos:line="31" pos:column="47">White</name></name></expr>}</block></expr></init></decl>;</decl_stmt>


        <decl_stmt><decl><type><specifier pos:line="34" pos:column="9">private</specifier> <specifier pos:line="34" pos:column="17">readonly</specifier> <name pos:line="34" pos:column="26">string</name><index pos:line="34" pos:column="32">[]</index></type> <name pos:line="34" pos:column="35">rootWords</name></decl>;</decl_stmt>

        <class><specifier pos:line="36" pos:column="9">private</specifier> class <name pos:line="36" pos:column="23">WordWithShape</name> <super pos:line="36" pos:column="37">: <name pos:line="36" pos:column="39">IShapedWord</name></super>
        <block pos:line="37" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="38" pos:column="13">public</specifier> <name pos:line="38" pos:column="20">string</name></type> <name pos:line="38" pos:column="27">Word</name> <block pos:line="38" pos:column="32">{ <function_decl><name pos:line="38" pos:column="34">set</name>;</function_decl> <function_decl><name pos:line="38" pos:column="39">get</name>;</function_decl> }</block></decl></decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="39" pos:column="13">public</specifier> <name pos:line="39" pos:column="20">int</name></type> <name pos:line="39" pos:column="24">Count</name> <block pos:line="39" pos:column="30">{ <function_decl><name pos:line="39" pos:column="32">set</name>;</function_decl> <function_decl><name pos:line="39" pos:column="37">get</name>;</function_decl> }</block></decl></decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="40" pos:column="13">public</specifier> <name pos:line="40" pos:column="20">int</name></type> <name pos:line="40" pos:column="24">FontSize</name> <block pos:line="40" pos:column="33">{ <function_decl><name pos:line="40" pos:column="35">set</name>;</function_decl> <function_decl><name pos:line="40" pos:column="40">get</name>;</function_decl> }</block></decl></decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="41" pos:column="13">public</specifier> <name pos:line="41" pos:column="20">Brush</name></type> <name pos:line="41" pos:column="26">Color</name> <block pos:line="41" pos:column="32">{ <function_decl><name pos:line="41" pos:column="34">get</name>;</function_decl> <function_decl><name pos:line="41" pos:column="39">set</name>;</function_decl> }</block></decl></decl_stmt>

            <constructor><specifier pos:line="43" pos:column="13">public</specifier> <name pos:line="43" pos:column="20">WordWithShape</name><parameter_list pos:line="43" pos:column="33">(<param><decl><type><name pos:line="43" pos:column="34">String</name></type> <name pos:line="43" pos:column="41">Word</name></decl></param>, <param><decl><type><name pos:line="43" pos:column="47">int</name></type> <name pos:line="43" pos:column="51">Count</name></decl></param>, <param><decl><type><name pos:line="43" pos:column="58">Brush</name></type> <name pos:line="43" pos:column="64">Color</name><init pos:line="43" pos:column="69">=<expr><name pos:line="43" pos:column="70">null</name></expr></init></decl></param>, <name pos:line="43" pos:column="76">int</name> <name pos:line="43" pos:column="80">FontSize</name> <op:operator pos:line="43" pos:column="89">=</op:operator> <lit:literal type="number" pos:line="43" pos:column="91">0</lit:literal>)</parameter_list>
            <block pos:line="44" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="45" pos:column="17">this</name><op:operator pos:line="45" pos:column="21">.</op:operator><name pos:line="45" pos:column="22">Word</name></name> <op:operator pos:line="45" pos:column="27">=</op:operator> <name pos:line="45" pos:column="29">Word</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="46" pos:column="17">this</name><op:operator pos:line="46" pos:column="21">.</op:operator><name pos:line="46" pos:column="22">Count</name></name> <op:operator pos:line="46" pos:column="28">=</op:operator> <name pos:line="46" pos:column="30">Count</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="47" pos:column="17">this</name><op:operator pos:line="47" pos:column="21">.</op:operator><name pos:line="47" pos:column="22">FontSize</name></name> <op:operator pos:line="47" pos:column="31">=</op:operator> <name pos:line="47" pos:column="33">FontSize</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="48" pos:column="17">this</name><op:operator pos:line="48" pos:column="21">.</op:operator><name pos:line="48" pos:column="22">Color</name></name> <op:operator pos:line="48" pos:column="28">=</op:operator> <name pos:line="48" pos:column="30">Color</name></expr>;</expr_stmt>
            }</block></constructor>
        }</block></class>

        <constructor><specifier pos:line="52" pos:column="9">public</specifier> <name pos:line="52" pos:column="16">TagCloudBuilder</name><parameter_list pos:line="52" pos:column="31">(<param><decl><type><name pos:line="52" pos:column="32">IWordCoOccurrenceMatrix</name></type> <name pos:line="52" pos:column="56">matrix</name></decl></param>, <param><decl><type><name><name pos:line="52" pos:column="64">String</name><index pos:line="52" pos:column="70">[]</index></name></type> <name pos:line="52" pos:column="73">rootWords</name> <init pos:line="52" pos:column="83">= <expr><name pos:line="52" pos:column="85">null</name></expr></init></decl></param>)</parameter_list>
        <block pos:line="53" pos:column="9">{
            <expr_stmt><expr><name><name pos:line="54" pos:column="13">this</name><op:operator pos:line="54" pos:column="17">.</op:operator><name pos:line="54" pos:column="18">matrix</name></name> <op:operator pos:line="54" pos:column="25">=</op:operator> <name pos:line="54" pos:column="27">matrix</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="55" pos:column="13">this</name><op:operator pos:line="55" pos:column="17">.</op:operator><name pos:line="55" pos:column="18">rootWords</name></name> <op:operator pos:line="55" pos:column="28">=</op:operator> <name pos:line="55" pos:column="30">rootWords</name></expr>;</expr_stmt>
        }</block></constructor>
        
        <function><type><specifier pos:line="58" pos:column="9">public</specifier> <name pos:line="58" pos:column="16">IShapedWord</name><index pos:line="58" pos:column="27">[]</index></type> <name pos:line="58" pos:column="30">Build</name><parameter_list pos:line="58" pos:column="35">()</parameter_list>
        <block pos:line="59" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="60" pos:column="13">var</name></type> <name pos:line="60" pos:column="17">wordsAndCount</name> <init pos:line="60" pos:column="31">= <expr><op:operator pos:line="60" pos:column="33">!</op:operator><call><name><name pos:line="60" pos:column="34">rootWords</name><op:operator pos:line="60" pos:column="43">.</op:operator><name pos:line="60" pos:column="44">Any</name></name><argument_list pos:line="60" pos:column="47">()</argument_list></call> <op:operator pos:line="60" pos:column="50">?</op:operator> <call><name pos:line="60" pos:column="52">CollectWordsFromPool</name><argument_list pos:line="60" pos:column="72">()</argument_list></call> <op:operator pos:line="60" pos:column="75">:</op:operator> <call><name><name pos:line="60" pos:column="77">rootWords</name><op:operator pos:line="60" pos:column="86">.</op:operator><name pos:line="60" pos:column="87">Count</name></name><argument_list pos:line="60" pos:column="92">()</argument_list></call> <op:operator pos:line="60" pos:column="95">==</op:operator> <lit:literal type="number" pos:line="60" pos:column="98">1</lit:literal> <op:operator pos:line="60" pos:column="100">?</op:operator>
                <call><name pos:line="61" pos:column="17">CollectNeighborWords</name><argument_list pos:line="61" pos:column="37">(<argument><expr><call><name><name pos:line="61" pos:column="38">rootWords</name><op:operator pos:line="61" pos:column="47">.</op:operator><name pos:line="61" pos:column="48">First</name></name><argument_list pos:line="61" pos:column="53">()</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="61" pos:column="57">:</op:operator> <call><name pos:line="61" pos:column="59">CollectCommonNeighbors</name><argument_list pos:line="61" pos:column="81">(<argument><expr><name pos:line="61" pos:column="82">rootWords</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="62" pos:column="13">var</name></type> <name pos:line="62" pos:column="17">list</name> <init pos:line="62" pos:column="22">= <expr><call><name><name pos:line="62" pos:column="24">wordsAndCount</name><op:operator pos:line="62" pos:column="37">.</op:operator><name pos:line="62" pos:column="38">Select</name></name><argument_list pos:line="62" pos:column="44">(<argument><expr><lambda><name pos:line="62" pos:column="45">p</name> <op:operator pos:line="62" pos:column="47">=&gt;</op:operator> <op:operator pos:line="62" pos:column="50">new</op:operator> <call><name pos:line="62" pos:column="54">WordWithShape</name><argument_list pos:line="62" pos:column="67">(<argument><expr><name><name pos:line="62" pos:column="68">p</name><op:operator pos:line="62" pos:column="69">.</op:operator><name pos:line="62" pos:column="70">Key</name></name></expr></argument>, <argument><expr><name><name pos:line="62" pos:column="75">p</name><op:operator pos:line="62" pos:column="76">.</op:operator><name pos:line="62" pos:column="77">Value</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="62" pos:column="84">.</op:operator><call><name pos:line="62" pos:column="85">ToArray</name><argument_list pos:line="62" pos:column="92">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="63" pos:column="13">list</name> <op:operator pos:line="63" pos:column="18">=</op:operator> <name pos:line="63" pos:column="20">rootWords</name> <op:operator pos:line="63" pos:column="30">!=</op:operator> <name pos:line="63" pos:column="33">null</name> <op:operator pos:line="63" pos:column="38">?</op:operator> <call><name><name pos:line="63" pos:column="40">list</name><op:operator pos:line="63" pos:column="44">.</op:operator><name pos:line="63" pos:column="45">Where</name></name><argument_list pos:line="63" pos:column="50">(<argument><expr><lambda><name pos:line="63" pos:column="51">w</name> <op:operator pos:line="63" pos:column="53">=&gt;</op:operator> <op:operator pos:line="63" pos:column="56">!</op:operator><call><name><name pos:line="63" pos:column="57">rootWords</name><op:operator pos:line="63" pos:column="66">.</op:operator><name pos:line="63" pos:column="67">Contains</name></name><argument_list pos:line="63" pos:column="75">(<argument><expr><name><name pos:line="63" pos:column="76">w</name><op:operator pos:line="63" pos:column="77">.</op:operator><name pos:line="63" pos:column="78">Word</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="63" pos:column="84">.</op:operator><call><name pos:line="63" pos:column="85">ToArray</name><argument_list pos:line="63" pos:column="92">()</argument_list></call> <op:operator pos:line="63" pos:column="95">:</op:operator> <name pos:line="63" pos:column="97">list</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="64" pos:column="13">SetWordShape</name><argument_list pos:line="64" pos:column="25">(<argument><expr><name pos:line="64" pos:column="26">list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="65" pos:column="13">return <expr><call><name><name pos:line="65" pos:column="20">list</name><op:operator pos:line="65" pos:column="24">.</op:operator><name><name pos:line="65" pos:column="25">Cast</name><argument_list pos:line="65" pos:column="29">&lt;<argument><name pos:line="65" pos:column="30">IShapedWord</name></argument>&gt;</argument_list></name></name><argument_list pos:line="65" pos:column="42">()</argument_list></call><op:operator pos:line="65" pos:column="44">.</op:operator><call><name pos:line="65" pos:column="45">OrderBy</name><argument_list pos:line="65" pos:column="52">(<argument><expr><lambda><name pos:line="65" pos:column="53">w</name> <op:operator pos:line="65" pos:column="55">=&gt;</op:operator> <name><name pos:line="65" pos:column="58">w</name><op:operator pos:line="65" pos:column="59">.</op:operator><name pos:line="65" pos:column="60">Word</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="65" pos:column="65">.</op:operator><call><name pos:line="65" pos:column="66">ToArray</name><argument_list pos:line="65" pos:column="73">()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="68" pos:column="9">private</specifier> <name><name pos:line="68" pos:column="17">Dictionary</name><argument_list pos:line="68" pos:column="27">&lt;<argument><name pos:line="68" pos:column="28">String</name></argument>, <argument><name pos:line="68" pos:column="36">int</name></argument>&gt;</argument_list></name></type> <name pos:line="68" pos:column="41">CollectWordsFromPool</name><parameter_list pos:line="68" pos:column="61">()</parameter_list>
        <block pos:line="69" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="70" pos:column="13">var</name></type> <name pos:line="70" pos:column="17">wordsAndCounts</name> <init pos:line="70" pos:column="32">= <expr><call><name><name pos:line="70" pos:column="34">matrix</name><op:operator pos:line="70" pos:column="40">.</op:operator><name pos:line="70" pos:column="41">GetAllWordsAndCount</name></name><argument_list pos:line="70" pos:column="60">()</argument_list></call><op:operator pos:line="70" pos:column="62">.</op:operator><call><name pos:line="70" pos:column="63">OrderByDescending</name><argument_list pos:line="70" pos:column="80">(<argument><expr><lambda><name pos:line="70" pos:column="81">p</name> <op:operator pos:line="70" pos:column="83">=&gt;</op:operator> <name><name pos:line="70" pos:column="86">p</name><op:operator pos:line="70" pos:column="87">.</op:operator><name pos:line="70" pos:column="88">Value</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="70" pos:column="94">.</op:operator>
                <call><name pos:line="71" pos:column="17">TrimIfOverlyLong</name><argument_list pos:line="71" pos:column="33">(<argument><expr><name pos:line="71" pos:column="34">MAX_WORD_COUNT</name> <op:operator pos:line="71" pos:column="49">*</op:operator> <lit:literal type="number" pos:line="71" pos:column="51">2</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="71" pos:column="53">.</op:operator><call><name pos:line="71" pos:column="54">ToList</name><argument_list pos:line="71" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="72" pos:column="13">var</name></type> <name pos:line="72" pos:column="17">trivialWords</name> <init pos:line="72" pos:column="30">= <expr><call><name><name pos:line="72" pos:column="32">SpecialWords</name><op:operator pos:line="72" pos:column="44">.</op:operator><name pos:line="72" pos:column="45">NonInformativeWords</name></name><argument_list pos:line="72" pos:column="64">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="73" pos:column="13">return <expr><call><name pos:line="73" pos:column="20">SelectWordsAndCount</name><argument_list pos:line="73" pos:column="39">(<argument><expr><name pos:line="73" pos:column="40">wordsAndCounts</name></expr></argument>, <argument><expr><name pos:line="73" pos:column="56">trivialWords</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="76" pos:column="9">private</specifier> <name><name pos:line="76" pos:column="17">Dictionary</name><argument_list pos:line="76" pos:column="27">&lt;<argument><name pos:line="76" pos:column="28">string</name></argument>, <argument><name pos:line="76" pos:column="36">int</name></argument>&gt;</argument_list></name></type> <name pos:line="76" pos:column="41">SelectWordsAndCount</name><parameter_list pos:line="76" pos:column="60">(<param><decl><type><name><name pos:line="76" pos:column="61">List</name><argument_list pos:line="76" pos:column="65">&lt;<argument><name><name pos:line="76" pos:column="66">KeyValuePair</name><argument_list pos:line="76" pos:column="78">&lt;<argument><name pos:line="76" pos:column="79">string</name></argument>, <argument><name pos:line="76" pos:column="87">int</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="76" pos:column="93">wordsAndCounts</name></decl></param>, 
            <param><decl><type><name><name pos:line="77" pos:column="13">string</name><index pos:line="77" pos:column="19">[]</index></name></type> <name pos:line="77" pos:column="22">trivialWords</name></decl></param>)</parameter_list>
        <block pos:line="78" pos:column="9">{
            <expr_stmt><expr><name pos:line="79" pos:column="13">wordsAndCounts</name> <op:operator pos:line="79" pos:column="28">=</op:operator> <call><name><name pos:line="79" pos:column="30">wordsAndCounts</name><op:operator pos:line="79" pos:column="44">.</op:operator><name pos:line="79" pos:column="45">Where</name></name><argument_list pos:line="79" pos:column="50">(<argument><expr><lambda><name pos:line="79" pos:column="51">p</name> <op:operator pos:line="79" pos:column="53">=&gt;</op:operator> <op:operator pos:line="79" pos:column="56">!</op:operator><call><name><name pos:line="79" pos:column="57">trivialWords</name><op:operator pos:line="79" pos:column="69">.</op:operator><name pos:line="79" pos:column="70">Contains</name></name><argument_list pos:line="79" pos:column="78">(<argument><expr><name><name pos:line="79" pos:column="79">p</name><op:operator pos:line="79" pos:column="80">.</op:operator><name pos:line="79" pos:column="81">Key</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="79" pos:column="86">.</op:operator><call><name pos:line="79" pos:column="87">Select</name><argument_list pos:line="79" pos:column="93">(
                <argument><expr><lambda><name pos:line="80" pos:column="17">pair</name> <op:operator pos:line="80" pos:column="22">=&gt;</op:operator> <op:operator pos:line="80" pos:column="25">new</op:operator> <call><name><name pos:line="80" pos:column="29">KeyValuePair</name><argument_list pos:line="80" pos:column="41">&lt;<argument><name pos:line="80" pos:column="42">String</name></argument>, <argument><name pos:line="80" pos:column="50">int</name></argument>&gt;</argument_list></name><argument_list pos:line="80" pos:column="54">(<argument><expr><call><name pos:line="80" pos:column="55">TryGetExpandedWord</name><argument_list pos:line="80" pos:column="73">(<argument><expr><name><name pos:line="80" pos:column="74">pair</name><op:operator pos:line="80" pos:column="78">.</op:operator><name pos:line="80" pos:column="79">Key</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="80" pos:column="85">pair</name><op:operator pos:line="80" pos:column="89">.</op:operator><name pos:line="80" pos:column="90">Value</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="80" pos:column="97">.</op:operator>
                    <call><name pos:line="81" pos:column="21">OrderByDescending</name><argument_list pos:line="81" pos:column="38">(<argument><expr><lambda><name pos:line="81" pos:column="39">p</name> <op:operator pos:line="81" pos:column="41">=&gt;</op:operator> <name><name pos:line="81" pos:column="44">p</name><op:operator pos:line="81" pos:column="45">.</op:operator><name pos:line="81" pos:column="46">Value</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="81" pos:column="52">.</op:operator><call><name pos:line="81" pos:column="53">ToList</name><argument_list pos:line="81" pos:column="59">()</argument_list></call></expr>;</expr_stmt>

            <for pos:line="83" pos:column="13">for (<init><decl><type><name pos:line="83" pos:column="18">int</name></type> <name pos:line="83" pos:column="22">i</name> <init pos:line="83" pos:column="24">= <expr><call><name><name pos:line="83" pos:column="26">wordsAndCounts</name><op:operator pos:line="83" pos:column="40">.</op:operator><name pos:line="83" pos:column="41">Count</name></name><argument_list pos:line="83" pos:column="46">()</argument_list></call> <op:operator pos:line="83" pos:column="49">-</op:operator> <lit:literal type="number" pos:line="83" pos:column="51">1</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="83" pos:column="54">i</name> <op:operator pos:line="83" pos:column="56">&gt;=</op:operator> <lit:literal type="number" pos:line="83" pos:column="59">0</lit:literal></expr>;</condition> <incr><expr><name pos:line="83" pos:column="62">i</name><op:operator pos:line="83" pos:column="63">--</op:operator></expr></incr>)
            <block pos:line="84" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="85" pos:column="17">var</name></type> <name pos:line="85" pos:column="21">pair</name> <init pos:line="85" pos:column="26">= <expr><call><name><name pos:line="85" pos:column="28">wordsAndCounts</name><op:operator pos:line="85" pos:column="42">.</op:operator><name pos:line="85" pos:column="43">ElementAt</name></name><argument_list pos:line="85" pos:column="52">(<argument><expr><name pos:line="85" pos:column="53">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="86" pos:column="17">var</name></type> <name pos:line="86" pos:column="21">beforePairs</name> <init pos:line="86" pos:column="33">= <expr><call><name><name pos:line="86" pos:column="35">wordsAndCounts</name><op:operator pos:line="86" pos:column="49">.</op:operator><name pos:line="86" pos:column="50">GetRange</name></name><argument_list pos:line="86" pos:column="58">(<argument><expr><lit:literal type="number" pos:line="86" pos:column="59">0</lit:literal></expr></argument>, <argument><expr><name pos:line="86" pos:column="62">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="87" pos:column="17">if <condition pos:line="87" pos:column="20">(<expr><call><name><name pos:line="87" pos:column="21">trivialWords</name><op:operator pos:line="87" pos:column="33">.</op:operator><name pos:line="87" pos:column="34">Contains</name></name><argument_list pos:line="87" pos:column="42">(<argument><expr><call><name><name pos:line="87" pos:column="43">pair</name><op:operator pos:line="87" pos:column="47">.</op:operator><name pos:line="87" pos:column="48">Key</name><op:operator pos:line="87" pos:column="51">.</op:operator><name pos:line="87" pos:column="52">GetStemmedQuery</name></name><argument_list pos:line="87" pos:column="67">()</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="87" pos:column="71">||</op:operator>
                    <call><name><name pos:line="88" pos:column="21">beforePairs</name><op:operator pos:line="88" pos:column="32">.</op:operator><name pos:line="88" pos:column="33">Any</name></name><argument_list pos:line="88" pos:column="36">(<argument><expr><lambda><name pos:line="88" pos:column="37">bp</name> <op:operator pos:line="88" pos:column="40">=&gt;</op:operator> <call><name><name pos:line="88" pos:column="43">bp</name><op:operator pos:line="88" pos:column="45">.</op:operator><name pos:line="88" pos:column="46">Key</name><op:operator pos:line="88" pos:column="49">.</op:operator><name pos:line="88" pos:column="50">IsStemSameTo</name></name><argument_list pos:line="88" pos:column="62">(<argument><expr><name><name pos:line="88" pos:column="63">pair</name><op:operator pos:line="88" pos:column="67">.</op:operator><name pos:line="88" pos:column="68">Key</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="88" pos:column="74">
                        <expr_stmt><expr><call><name><name pos:line="89" pos:column="25">wordsAndCounts</name><op:operator pos:line="89" pos:column="39">.</op:operator><name pos:line="89" pos:column="40">RemoveAt</name></name><argument_list pos:line="89" pos:column="48">(<argument><expr><name pos:line="89" pos:column="49">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></for>
            <return pos:line="91" pos:column="13">return <expr><call><name><name pos:line="91" pos:column="20">wordsAndCounts</name><op:operator pos:line="91" pos:column="34">.</op:operator><name pos:line="91" pos:column="35">TrimIfOverlyLong</name></name><argument_list pos:line="91" pos:column="51">(<argument><expr><name pos:line="91" pos:column="52">MAX_WORD_COUNT</name></expr></argument>)</argument_list></call><op:operator pos:line="91" pos:column="67">.</op:operator><call><name pos:line="91" pos:column="68">ToDictionary</name><argument_list pos:line="91" pos:column="80">(<argument><expr><lambda><name pos:line="91" pos:column="81">p</name> <op:operator pos:line="91" pos:column="83">=&gt;</op:operator> <name><name pos:line="91" pos:column="86">p</name><op:operator pos:line="91" pos:column="87">.</op:operator><name pos:line="91" pos:column="88">Key</name></name></lambda></expr></argument>, <argument><expr><lambda><name pos:line="91" pos:column="93">p</name> <op:operator pos:line="91" pos:column="95">=&gt;</op:operator> <name><name pos:line="91" pos:column="98">p</name><op:operator pos:line="91" pos:column="99">.</op:operator><name pos:line="91" pos:column="100">Value</name></name></lambda></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="94" pos:column="9">private</specifier> <name><name pos:line="94" pos:column="17">Dictionary</name><argument_list pos:line="94" pos:column="27">&lt;<argument><name pos:line="94" pos:column="28">String</name></argument>, <argument><name pos:line="94" pos:column="36">int</name></argument>&gt;</argument_list></name></type> <name pos:line="94" pos:column="41">CollectNeighborWords</name><parameter_list pos:line="94" pos:column="61">(<param><decl><type><name pos:line="94" pos:column="62">String</name></type> <name pos:line="94" pos:column="69">word</name></decl></param>)</parameter_list>
        <block pos:line="95" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="96" pos:column="13">var</name></type> <name pos:line="96" pos:column="17">trivialWords</name> <init pos:line="96" pos:column="30">= <expr><call><name><name pos:line="96" pos:column="32">SpecialWords</name><op:operator pos:line="96" pos:column="44">.</op:operator><name pos:line="96" pos:column="45">NonInformativeWords</name></name><argument_list pos:line="96" pos:column="64">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="97" pos:column="13">var</name></type> <name pos:line="97" pos:column="17">wordsAndCounts</name> <init pos:line="97" pos:column="32">= <expr><call><name><name pos:line="97" pos:column="34">matrix</name><op:operator pos:line="97" pos:column="40">.</op:operator><name pos:line="97" pos:column="41">GetCoOccurredWordsAndCount</name></name><argument_list pos:line="97" pos:column="67">(<argument><expr><name pos:line="97" pos:column="68">word</name></expr></argument>)</argument_list></call><op:operator pos:line="97" pos:column="73">.</op:operator>
                <call><name pos:line="98" pos:column="17">OrderByDescending</name><argument_list pos:line="98" pos:column="34">(<argument><expr><lambda><name pos:line="98" pos:column="35">p</name> <op:operator pos:line="98" pos:column="37">=&gt;</op:operator> <name><name pos:line="98" pos:column="40">p</name><op:operator pos:line="98" pos:column="41">.</op:operator><name pos:line="98" pos:column="42">Value</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="98" pos:column="48">.</op:operator><call><name pos:line="98" pos:column="49">TrimIfOverlyLong</name>
                    <argument_list pos:line="99" pos:column="21">(<argument><expr><name pos:line="99" pos:column="22">MAX_WORD_COUNT</name> <op:operator pos:line="99" pos:column="37">*</op:operator> <lit:literal type="number" pos:line="99" pos:column="39">2</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="99" pos:column="41">.</op:operator><call><name pos:line="99" pos:column="42">ToList</name><argument_list pos:line="99" pos:column="48">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="100" pos:column="13">return <expr><call><name pos:line="100" pos:column="20">SelectWordsAndCount</name><argument_list pos:line="100" pos:column="39">(<argument><expr><name pos:line="100" pos:column="40">wordsAndCounts</name></expr></argument>, <argument><expr><name pos:line="100" pos:column="56">trivialWords</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="103" pos:column="9">private</specifier> <name><name pos:line="103" pos:column="17">Dictionary</name><argument_list pos:line="103" pos:column="27">&lt;<argument><name pos:line="103" pos:column="28">string</name></argument>, <argument><name pos:line="103" pos:column="36">int</name></argument>&gt;</argument_list></name></type> <name pos:line="103" pos:column="41">CollectCommonNeighbors</name><parameter_list pos:line="103" pos:column="63">(<param><decl><type><name><name pos:line="103" pos:column="64">IEnumerable</name><argument_list pos:line="103" pos:column="75">&lt;<argument><name pos:line="103" pos:column="76">string</name></argument>&gt;</argument_list></name></type> <name pos:line="103" pos:column="84">words</name></decl></param>)</parameter_list>
        <block pos:line="104" pos:column="9">{
            <return pos:line="105" pos:column="13">return <expr><call><name><name pos:line="105" pos:column="20">words</name><op:operator pos:line="105" pos:column="25">.</op:operator><name pos:line="105" pos:column="26">Select</name></name><argument_list pos:line="105" pos:column="32">(<argument><expr><name pos:line="105" pos:column="33">CollectNeighborWords</name></expr></argument>)</argument_list></call><op:operator pos:line="105" pos:column="54">.</op:operator>
                <call><name pos:line="106" pos:column="17">Aggregate</name><argument_list pos:line="106" pos:column="26">(<argument><expr><lambda><parameter_list pos:line="106" pos:column="27">(<param><decl><name pos:line="106" pos:column="28">d1</name></decl></param>, <param><decl><name pos:line="106" pos:column="32">d2</name></decl></param>)</parameter_list> <op:operator pos:line="106" pos:column="36">=&gt;</op:operator> <block pos:line="106" pos:column="39">{
                    <decl_stmt><decl><type><name pos:line="107" pos:column="21">var</name></type> <name pos:line="107" pos:column="25">keys</name> <init pos:line="107" pos:column="30">= <expr><call><name><name pos:line="107" pos:column="32">d1</name><op:operator pos:line="107" pos:column="34">.</op:operator><name pos:line="107" pos:column="35">Keys</name><op:operator pos:line="107" pos:column="39">.</op:operator><name pos:line="107" pos:column="40">Intersect</name></name><argument_list pos:line="107" pos:column="49">(<argument><expr><name><name pos:line="107" pos:column="50">d2</name><op:operator pos:line="107" pos:column="52">.</op:operator><name pos:line="107" pos:column="53">Keys</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <return pos:line="108" pos:column="21">return <expr><call><name><name pos:line="108" pos:column="28">keys</name><op:operator pos:line="108" pos:column="32">.</op:operator><name pos:line="108" pos:column="33">ToDictionary</name></name><argument_list pos:line="108" pos:column="45">(<argument><expr><lambda><name pos:line="108" pos:column="46">k</name> <op:operator pos:line="108" pos:column="48">=&gt;</op:operator> <name pos:line="108" pos:column="51">k</name></lambda></expr></argument>, <argument><expr><lambda><name pos:line="108" pos:column="54">k</name> <op:operator pos:line="108" pos:column="56">=&gt;</op:operator> <call><name><name pos:line="108" pos:column="59">Math</name><op:operator pos:line="108" pos:column="63">.</op:operator><name pos:line="108" pos:column="64">Min</name></name><argument_list pos:line="108" pos:column="67">(<argument><expr><name><name pos:line="108" pos:column="68">d1</name><index pos:line="108" pos:column="70">[<expr><name pos:line="108" pos:column="71">k</name></expr>]</index></name></expr></argument>, <argument><expr><name><name pos:line="108" pos:column="75">d2</name><index pos:line="108" pos:column="77">[<expr><name pos:line="108" pos:column="78">k</name></expr>]</index></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</return>
            }</block></lambda></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="112" pos:column="9">private</specifier> <name pos:line="112" pos:column="17">string</name></type> <name pos:line="112" pos:column="24">TryGetExpandedWord</name><parameter_list pos:line="112" pos:column="42">(<param><decl><type><name pos:line="112" pos:column="43">string</name></type> <name pos:line="112" pos:column="50">word</name></decl></param>)</parameter_list>
        <block pos:line="113" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="114" pos:column="13">string</name></type> <name pos:line="114" pos:column="20">result</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="115" pos:column="13">var</name></type> <name pos:line="115" pos:column="17">dic</name> <init pos:line="115" pos:column="21">= <expr><call><name><name pos:line="115" pos:column="23">SpecialWords</name><op:operator pos:line="115" pos:column="35">.</op:operator><name pos:line="115" pos:column="36">HyperCommonAcronyms</name></name><argument_list pos:line="115" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="116" pos:column="13">return <expr><call><name><name pos:line="116" pos:column="20">dic</name><op:operator pos:line="116" pos:column="23">.</op:operator><name pos:line="116" pos:column="24">TryGetValue</name></name><argument_list pos:line="116" pos:column="35">(<argument><expr><name pos:line="116" pos:column="36">word</name></expr></argument>, <argument><expr pos:line="116" pos:column="42">out <name pos:line="116" pos:column="46">result</name></expr></argument>)</argument_list></call> <op:operator pos:line="116" pos:column="54">?</op:operator> <name pos:line="116" pos:column="56">result</name> <op:operator pos:line="116" pos:column="63">:</op:operator> <name pos:line="116" pos:column="65">word</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="119" pos:column="9">private</specifier> <name pos:line="119" pos:column="17">int</name><index pos:line="119" pos:column="20">[]</index></type> <name pos:line="119" pos:column="23">DivideToRanges</name><parameter_list pos:line="119" pos:column="37">(<param><decl><type><name pos:line="119" pos:column="38">int</name></type> <name pos:line="119" pos:column="42">totalLength</name></decl></param>, <param><decl><type><name pos:line="119" pos:column="55">int</name></type> <name pos:line="119" pos:column="59">area</name></decl></param>)</parameter_list>
        <block pos:line="120" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="121" pos:column="13">int</name></type> <name pos:line="121" pos:column="17">areaLength</name> <init pos:line="121" pos:column="28">= <expr><name pos:line="121" pos:column="30">totalLength</name><op:operator pos:line="121" pos:column="41">/</op:operator><name pos:line="121" pos:column="42">area</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="122" pos:column="13">var</name></type> <name pos:line="122" pos:column="17">list</name> <init pos:line="122" pos:column="22">= <expr><op:operator pos:line="122" pos:column="24">new</op:operator> <call><name><name pos:line="122" pos:column="28">List</name><argument_list pos:line="122" pos:column="32">&lt;<argument><name pos:line="122" pos:column="33">int</name></argument>&gt;</argument_list></name><argument_list pos:line="122" pos:column="37">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="123" pos:column="13">int</name></type> <name pos:line="123" pos:column="17">start</name> <init pos:line="123" pos:column="23">= <expr><lit:literal type="number" pos:line="123" pos:column="25">0</lit:literal></expr></init></decl>;</decl_stmt>
            <for pos:line="124" pos:column="13">for (<init><decl><type><name pos:line="124" pos:column="18">int</name></type> <name pos:line="124" pos:column="22">i</name> <init pos:line="124" pos:column="24">= <expr><lit:literal type="number" pos:line="124" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="124" pos:column="29">i</name> <op:operator pos:line="124" pos:column="31">&lt;</op:operator> <name pos:line="124" pos:column="33">area</name></expr>;</condition> <incr><expr><name pos:line="124" pos:column="39">i</name><op:operator pos:line="124" pos:column="40">++</op:operator></expr></incr>)
            <block pos:line="125" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="126" pos:column="17">list</name><op:operator pos:line="126" pos:column="21">.</op:operator><name pos:line="126" pos:column="22">Add</name></name><argument_list pos:line="126" pos:column="25">(<argument><expr><name pos:line="126" pos:column="26">start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="127" pos:column="17">start</name> <op:operator pos:line="127" pos:column="23">+=</op:operator> <name pos:line="127" pos:column="26">areaLength</name></expr>;</expr_stmt>
            }</block></for>
            <return pos:line="129" pos:column="13">return <expr><call><name><name pos:line="129" pos:column="20">list</name><op:operator pos:line="129" pos:column="24">.</op:operator><name pos:line="129" pos:column="25">ToArray</name></name><argument_list pos:line="129" pos:column="32">()</argument_list></call></expr>;</return>
        }</block></function>


        <function><type><specifier pos:line="133" pos:column="9">private</specifier> <name pos:line="133" pos:column="17">void</name></type> <name pos:line="133" pos:column="22">SetWordShape</name><parameter_list pos:line="133" pos:column="34">(<param><decl><type><name><name pos:line="133" pos:column="35">WordWithShape</name><index pos:line="133" pos:column="48">[]</index></name></type> <name pos:line="133" pos:column="51">list</name></decl></param>)</parameter_list>
        <block pos:line="134" pos:column="9">{
            <expr_stmt><expr><name pos:line="135" pos:column="13">list</name> <op:operator pos:line="135" pos:column="18">=</op:operator> <call><name><name pos:line="135" pos:column="20">list</name><op:operator pos:line="135" pos:column="24">.</op:operator><name pos:line="135" pos:column="25">OrderBy</name></name><argument_list pos:line="135" pos:column="32">(<argument><expr><lambda><name pos:line="135" pos:column="33">w</name> <op:operator pos:line="135" pos:column="35">=&gt;</op:operator> <name><name pos:line="135" pos:column="38">w</name><op:operator pos:line="135" pos:column="39">.</op:operator><name pos:line="135" pos:column="40">Count</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="135" pos:column="46">.</op:operator><call><name pos:line="135" pos:column="47">ToArray</name><argument_list pos:line="135" pos:column="54">()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="136" pos:column="13">var</name></type> <name pos:line="136" pos:column="17">starts</name> <init pos:line="136" pos:column="24">= <expr><call><name pos:line="136" pos:column="26">DivideToRanges</name><argument_list pos:line="136" pos:column="40">(<argument><expr><call><name><name pos:line="136" pos:column="41">list</name><op:operator pos:line="136" pos:column="45">.</op:operator><name pos:line="136" pos:column="46">Count</name></name><argument_list pos:line="136" pos:column="51">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="136" pos:column="55">FONT_POOL</name><op:operator pos:line="136" pos:column="64">.</op:operator><name pos:line="136" pos:column="65">Count</name></name><argument_list pos:line="136" pos:column="70">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="137" pos:column="13">var</name></type> <name pos:line="137" pos:column="17">fontMap</name> <init pos:line="137" pos:column="25">= <expr><op:operator pos:line="137" pos:column="27">new</op:operator> <call><name><name pos:line="137" pos:column="31">Dictionary</name><argument_list pos:line="137" pos:column="41">&lt;<argument><name><name pos:line="137" pos:column="42">Predicate</name><argument_list pos:line="137" pos:column="51">&lt;<argument><name pos:line="137" pos:column="52">int</name></argument>&gt;</argument_list></name></argument>, <argument><name pos:line="137" pos:column="58">int</name></argument>&gt;</argument_list></name><argument_list pos:line="137" pos:column="62">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="138" pos:column="13">var</name></type> <name pos:line="138" pos:column="17">colorMap</name> <init pos:line="138" pos:column="26">= <expr><op:operator pos:line="138" pos:column="28">new</op:operator> <call><name><name pos:line="138" pos:column="32">Dictionary</name><argument_list pos:line="138" pos:column="42">&lt;<argument><name><name pos:line="138" pos:column="43">Predicate</name><argument_list pos:line="138" pos:column="52">&lt;<argument><name pos:line="138" pos:column="53">int</name></argument>&gt;</argument_list></name></argument>, <argument><name pos:line="138" pos:column="59">Brush</name></argument>&gt;</argument_list></name><argument_list pos:line="138" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="139" pos:column="13">var</name></type> <name pos:line="139" pos:column="17">colorPool</name> <init pos:line="139" pos:column="27">= <expr><call><name pos:line="139" pos:column="29">GetColorPool</name><argument_list pos:line="139" pos:column="41">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <for pos:line="141" pos:column="13">for (<init><decl><type><name pos:line="141" pos:column="18">int</name></type> <name pos:line="141" pos:column="22">i</name> <init pos:line="141" pos:column="24">= <expr><lit:literal type="number" pos:line="141" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="141" pos:column="29">i</name> <op:operator pos:line="141" pos:column="31">&lt;</op:operator> <call><name><name pos:line="141" pos:column="33">starts</name><op:operator pos:line="141" pos:column="39">.</op:operator><name pos:line="141" pos:column="40">Count</name></name><argument_list pos:line="141" pos:column="45">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="141" pos:column="49">i</name><op:operator pos:line="141" pos:column="50">++</op:operator></expr></incr>)
            <block pos:line="142" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="143" pos:column="17">var</name></type> <name pos:line="143" pos:column="21">start</name> <init pos:line="143" pos:column="27">= <expr><call><name><name pos:line="143" pos:column="29">starts</name><op:operator pos:line="143" pos:column="35">.</op:operator><name pos:line="143" pos:column="36">ElementAt</name></name><argument_list pos:line="143" pos:column="45">(<argument><expr><name pos:line="143" pos:column="46">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="144" pos:column="17">var</name></type> <name pos:line="144" pos:column="21">end</name> <init pos:line="144" pos:column="25">= <expr><name pos:line="144" pos:column="27">i</name> <op:operator pos:line="144" pos:column="29">==</op:operator> <call><name><name pos:line="144" pos:column="32">starts</name><op:operator pos:line="144" pos:column="38">.</op:operator><name pos:line="144" pos:column="39">Count</name></name><argument_list pos:line="144" pos:column="44">()</argument_list></call> <op:operator pos:line="144" pos:column="47">-</op:operator> <lit:literal type="number" pos:line="144" pos:column="49">1</lit:literal> <op:operator pos:line="144" pos:column="51">?</op:operator> <call><name><name pos:line="144" pos:column="53">list</name><op:operator pos:line="144" pos:column="57">.</op:operator><name pos:line="144" pos:column="58">Count</name></name><argument_list pos:line="144" pos:column="63">()</argument_list></call> <op:operator pos:line="144" pos:column="66">-</op:operator> <lit:literal type="number" pos:line="144" pos:column="68">1</lit:literal> <op:operator pos:line="144" pos:column="70">:</op:operator> 
                    <call><name><name pos:line="145" pos:column="21">starts</name><op:operator pos:line="145" pos:column="27">.</op:operator><name pos:line="145" pos:column="28">ElementAt</name></name><argument_list pos:line="145" pos:column="37">(<argument><expr><name pos:line="145" pos:column="38">i</name> <op:operator pos:line="145" pos:column="40">+</op:operator> <lit:literal type="number" pos:line="145" pos:column="42">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="145" pos:column="45">-</op:operator> <lit:literal type="number" pos:line="145" pos:column="47">1</lit:literal></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="146" pos:column="17">fontMap</name><op:operator pos:line="146" pos:column="24">.</op:operator><name pos:line="146" pos:column="25">Add</name></name><argument_list pos:line="146" pos:column="28">(<argument><expr><lambda><name pos:line="146" pos:column="29">j</name> <op:operator pos:line="146" pos:column="31">=&gt;</op:operator> <name pos:line="146" pos:column="34">j</name> <op:operator pos:line="146" pos:column="36">&gt;=</op:operator> <name pos:line="146" pos:column="39">start</name> <op:operator pos:line="146" pos:column="45">&amp;&amp;</op:operator> <name pos:line="146" pos:column="48">j</name> <op:operator pos:line="146" pos:column="50">&lt;=</op:operator> <name pos:line="146" pos:column="53">end</name></lambda></expr></argument>, <argument><expr><call><name><name pos:line="146" pos:column="58">FONT_POOL</name><op:operator pos:line="146" pos:column="67">.</op:operator><name pos:line="146" pos:column="68">ElementAt</name></name><argument_list pos:line="146" pos:column="77">(<argument><expr><name pos:line="146" pos:column="78">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="147" pos:column="17">colorMap</name><op:operator pos:line="147" pos:column="25">.</op:operator><name pos:line="147" pos:column="26">Add</name></name><argument_list pos:line="147" pos:column="29">(<argument><expr><lambda><name pos:line="147" pos:column="30">j</name> <op:operator pos:line="147" pos:column="32">=&gt;</op:operator> <name pos:line="147" pos:column="35">j</name> <op:operator pos:line="147" pos:column="37">&gt;=</op:operator> <name pos:line="147" pos:column="40">start</name> <op:operator pos:line="147" pos:column="46">&amp;&amp;</op:operator> <name pos:line="147" pos:column="49">j</name> <op:operator pos:line="147" pos:column="51">&lt;=</op:operator> <name pos:line="147" pos:column="54">end</name></lambda></expr></argument>, <argument><expr><call><name><name pos:line="147" pos:column="59">colorPool</name><op:operator pos:line="147" pos:column="68">.</op:operator><name pos:line="147" pos:column="69">ElementAt</name></name><argument_list pos:line="147" pos:column="78">(<argument><expr><name pos:line="147" pos:column="79">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <for pos:line="149" pos:column="13">for (<init><decl><type><name pos:line="149" pos:column="18">int</name></type> <name pos:line="149" pos:column="22">i</name> <init pos:line="149" pos:column="24">= <expr><lit:literal type="number" pos:line="149" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="149" pos:column="29">i</name> <op:operator pos:line="149" pos:column="31">&lt;</op:operator> <call><name><name pos:line="149" pos:column="33">list</name><op:operator pos:line="149" pos:column="37">.</op:operator><name pos:line="149" pos:column="38">Count</name></name><argument_list pos:line="149" pos:column="43">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="149" pos:column="47">i</name><op:operator pos:line="149" pos:column="48">++</op:operator></expr></incr>)
            <block pos:line="150" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="151" pos:column="17">var</name></type> <name pos:line="151" pos:column="21">fontKey</name> <init pos:line="151" pos:column="29">= <expr><call><name><name pos:line="151" pos:column="31">fontMap</name><op:operator pos:line="151" pos:column="38">.</op:operator><name pos:line="151" pos:column="39">Keys</name><op:operator pos:line="151" pos:column="43">.</op:operator><name pos:line="151" pos:column="44">First</name></name><argument_list pos:line="151" pos:column="49">(<argument><expr><lambda><name pos:line="151" pos:column="50">k</name> <op:operator pos:line="151" pos:column="52">=&gt;</op:operator> <call><name><name pos:line="151" pos:column="55">k</name><op:operator pos:line="151" pos:column="56">.</op:operator><name pos:line="151" pos:column="57">Invoke</name></name><argument_list pos:line="151" pos:column="63">(<argument><expr><name pos:line="151" pos:column="64">i</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="152" pos:column="17">var</name></type> <name pos:line="152" pos:column="21">font</name> <init pos:line="152" pos:column="26">= <expr><name><name pos:line="152" pos:column="28">fontMap</name><index pos:line="152" pos:column="35">[<expr><name pos:line="152" pos:column="36">fontKey</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="153" pos:column="17">list</name><op:operator pos:line="153" pos:column="21">.</op:operator><name pos:line="153" pos:column="22">ElementAt</name></name><argument_list pos:line="153" pos:column="31">(<argument><expr><name pos:line="153" pos:column="32">i</name></expr></argument>)</argument_list></call><op:operator pos:line="153" pos:column="34">.</op:operator><name pos:line="153" pos:column="35">FontSize</name> <op:operator pos:line="153" pos:column="44">=</op:operator> <name pos:line="153" pos:column="46">font</name></expr>;</expr_stmt>

                <decl_stmt><decl><type><name pos:line="155" pos:column="17">var</name></type> <name pos:line="155" pos:column="21">colorKey</name> <init pos:line="155" pos:column="30">= <expr><call><name><name pos:line="155" pos:column="32">colorMap</name><op:operator pos:line="155" pos:column="40">.</op:operator><name pos:line="155" pos:column="41">Keys</name><op:operator pos:line="155" pos:column="45">.</op:operator><name pos:line="155" pos:column="46">First</name></name><argument_list pos:line="155" pos:column="51">(<argument><expr><lambda><name pos:line="155" pos:column="52">k</name> <op:operator pos:line="155" pos:column="54">=&gt;</op:operator> <call><name><name pos:line="155" pos:column="57">k</name><op:operator pos:line="155" pos:column="58">.</op:operator><name pos:line="155" pos:column="59">Invoke</name></name><argument_list pos:line="155" pos:column="65">(<argument><expr><name pos:line="155" pos:column="66">i</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="156" pos:column="17">var</name></type> <name pos:line="156" pos:column="21">color</name> <init pos:line="156" pos:column="27">= <expr><name><name pos:line="156" pos:column="29">colorMap</name><index pos:line="156" pos:column="37">[<expr><name pos:line="156" pos:column="38">colorKey</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="157" pos:column="17">list</name><op:operator pos:line="157" pos:column="21">.</op:operator><name pos:line="157" pos:column="22">ElementAt</name></name><argument_list pos:line="157" pos:column="31">(<argument><expr><name pos:line="157" pos:column="32">i</name></expr></argument>)</argument_list></call><op:operator pos:line="157" pos:column="34">.</op:operator><name pos:line="157" pos:column="35">Color</name> <op:operator pos:line="157" pos:column="41">=</op:operator> <name pos:line="157" pos:column="43">color</name></expr>;</expr_stmt>
            }</block></for>
        }</block></function>

        <function><type><specifier pos:line="161" pos:column="9">private</specifier> <name pos:line="161" pos:column="17">Brush</name><index pos:line="161" pos:column="22">[]</index></type> <name pos:line="161" pos:column="25">GetColorPool</name><parameter_list pos:line="161" pos:column="37">()</parameter_list>
        <block pos:line="162" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="163" pos:column="13">var</name></type> <name pos:line="163" pos:column="17">white</name> <init pos:line="163" pos:column="23">= <expr><name><name pos:line="163" pos:column="25">Brushes</name><op:operator pos:line="163" pos:column="32">.</op:operator><name pos:line="163" pos:column="33">White</name><op:operator pos:line="163" pos:column="38">.</op:operator><name pos:line="163" pos:column="39">Color</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="164" pos:column="13">var</name></type> <name pos:line="164" pos:column="17">black</name> <init pos:line="164" pos:column="23">= <expr><name><name pos:line="164" pos:column="25">Brushes</name><op:operator pos:line="164" pos:column="32">.</op:operator><name pos:line="164" pos:column="33">Black</name><op:operator pos:line="164" pos:column="38">.</op:operator><name pos:line="164" pos:column="39">Color</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="165" pos:column="13">var</name></type> <name pos:line="165" pos:column="17">back</name> <init pos:line="165" pos:column="22">= <expr><call><name pos:line="165" pos:column="24">GetBackGroundColor</name><argument_list pos:line="165" pos:column="42">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="166" pos:column="13">return <expr><call><name pos:line="166" pos:column="20">GetColorDifference</name><argument_list pos:line="166" pos:column="38">(<argument><expr><name pos:line="166" pos:column="39">white</name></expr></argument>, <argument><expr><name pos:line="166" pos:column="46">back</name></expr></argument>)</argument_list></call> <op:operator pos:line="166" pos:column="52">&gt;</op:operator> <call><name pos:line="166" pos:column="54">GetColorDifference</name><argument_list pos:line="166" pos:column="72">(<argument><expr><name pos:line="166" pos:column="73">black</name></expr></argument>, <argument><expr><name pos:line="166" pos:column="80">back</name></expr></argument>)</argument_list></call>
                       <op:operator pos:line="167" pos:column="24">?</op:operator> <name pos:line="167" pos:column="26">darkBackgroundColorPool</name>
                       <op:operator pos:line="168" pos:column="24">:</op:operator> <name pos:line="168" pos:column="26">whiteBackgroundColorPool</name></expr>;</return>
        }</block></function>



        <function><type><specifier pos:line="173" pos:column="9">private</specifier> <name pos:line="173" pos:column="17">Brush</name><index pos:line="173" pos:column="22">[]</index></type> <name pos:line="173" pos:column="25">GenerateColorPool</name><parameter_list pos:line="173" pos:column="42">(<param><decl><type><name pos:line="173" pos:column="43">int</name></type> <name pos:line="173" pos:column="47">count</name></decl></param>)</parameter_list>
        <block pos:line="174" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="175" pos:column="13">var</name></type> <name pos:line="175" pos:column="17">currentColor</name> <init pos:line="175" pos:column="30">= <expr><name><name pos:line="175" pos:column="32">Brushes</name><op:operator pos:line="175" pos:column="39">.</op:operator><name pos:line="175" pos:column="40">LightSkyBlue</name><op:operator pos:line="175" pos:column="52">.</op:operator><name pos:line="175" pos:column="53">Color</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="176" pos:column="13">var</name></type> <name pos:line="176" pos:column="17">colors</name> <init pos:line="176" pos:column="24">= <expr><op:operator pos:line="176" pos:column="26">new</op:operator> <call><name><name pos:line="176" pos:column="30">List</name><argument_list pos:line="176" pos:column="34">&lt;<argument><name pos:line="176" pos:column="35">Color</name></argument>&gt;</argument_list></name><argument_list pos:line="176" pos:column="41">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for pos:line="177" pos:column="13">for (<init><decl><type><name pos:line="177" pos:column="18">int</name></type> <name pos:line="177" pos:column="22">i</name> <init pos:line="177" pos:column="24">= <expr><lit:literal type="number" pos:line="177" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="177" pos:column="29">i</name> <op:operator pos:line="177" pos:column="31">&lt;</op:operator> <name pos:line="177" pos:column="33">count</name></expr>;</condition> <incr><expr><name pos:line="177" pos:column="40">i</name><op:operator pos:line="177" pos:column="41">++</op:operator></expr></incr>)
            <block pos:line="178" pos:column="13">{
                <expr_stmt><expr><name pos:line="179" pos:column="17">currentColor</name> <op:operator pos:line="179" pos:column="30">=</op:operator> <call><name pos:line="179" pos:column="32">GetDarkerColor</name><argument_list pos:line="179" pos:column="46">(<argument><expr><name pos:line="179" pos:column="47">currentColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="180" pos:column="17">colors</name><op:operator pos:line="180" pos:column="23">.</op:operator><name pos:line="180" pos:column="24">Add</name></name><argument_list pos:line="180" pos:column="27">(<argument><expr><name pos:line="180" pos:column="28">currentColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <return pos:line="182" pos:column="13">return <expr><call><name><name pos:line="182" pos:column="20">colors</name><op:operator pos:line="182" pos:column="26">.</op:operator><name pos:line="182" pos:column="27">Select</name></name>
                <argument_list pos:line="183" pos:column="17">(<argument><expr><lambda><name pos:line="183" pos:column="18">c</name> <op:operator pos:line="183" pos:column="20">=&gt;</op:operator> <op:operator pos:line="183" pos:column="23">new</op:operator> <call><name pos:line="183" pos:column="27">SolidColorBrush</name><argument_list pos:line="183" pos:column="42">(<argument><expr><name pos:line="183" pos:column="43">c</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="183" pos:column="46">.</op:operator><call><name><name pos:line="183" pos:column="47">Cast</name><argument_list pos:line="183" pos:column="51">&lt;<argument><name pos:line="183" pos:column="52">Brush</name></argument>&gt;</argument_list></name><argument_list pos:line="183" pos:column="58">()</argument_list></call><op:operator pos:line="183" pos:column="60">.</op:operator><call><name pos:line="183" pos:column="61">ToArray</name><argument_list pos:line="183" pos:column="68">()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="186" pos:column="9">private</specifier> <name pos:line="186" pos:column="17">Color</name></type> <name pos:line="186" pos:column="23">GetLighterColor</name><parameter_list pos:line="186" pos:column="38">(<param><decl><type><name pos:line="186" pos:column="39">Color</name></type> <name pos:line="186" pos:column="45">c</name></decl></param>)</parameter_list>
        <block pos:line="187" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="188" pos:column="13">var</name></type> <name pos:line="188" pos:column="17">drawingcolor</name> <init pos:line="188" pos:column="30">= <expr><call><name><name pos:line="188" pos:column="32">System</name><op:operator pos:line="188" pos:column="38">.</op:operator><name pos:line="188" pos:column="39">Drawing</name><op:operator pos:line="188" pos:column="46">.</op:operator><name pos:line="188" pos:column="47">Color</name><op:operator pos:line="188" pos:column="52">.</op:operator><name pos:line="188" pos:column="53">FromArgb</name></name><argument_list pos:line="188" pos:column="61">(<argument><expr><name><name pos:line="188" pos:column="62">c</name><op:operator pos:line="188" pos:column="63">.</op:operator><name pos:line="188" pos:column="64">A</name></name></expr></argument>, <argument><expr><name><name pos:line="188" pos:column="67">c</name><op:operator pos:line="188" pos:column="68">.</op:operator><name pos:line="188" pos:column="69">R</name></name></expr></argument>, <argument><expr><name><name pos:line="188" pos:column="72">c</name><op:operator pos:line="188" pos:column="73">.</op:operator><name pos:line="188" pos:column="74">G</name></name></expr></argument>, <argument><expr><name><name pos:line="188" pos:column="77">c</name><op:operator pos:line="188" pos:column="78">.</op:operator><name pos:line="188" pos:column="79">B</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="189" pos:column="13">System</name><op:operator pos:line="189" pos:column="19">.</op:operator><name pos:line="189" pos:column="20">Drawing</name><op:operator pos:line="189" pos:column="27">.</op:operator><name pos:line="189" pos:column="28">Color</name></name></type> <name pos:line="189" pos:column="34">lightC</name> <init pos:line="189" pos:column="41">= <expr><call><name><name pos:line="189" pos:column="43">ControlPaint</name><op:operator pos:line="189" pos:column="55">.</op:operator><name pos:line="189" pos:column="56">Light</name></name><argument_list pos:line="189" pos:column="61">(<argument><expr><name pos:line="189" pos:column="62">drawingcolor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="190" pos:column="13">return <expr><call><name><name pos:line="190" pos:column="20">Color</name><op:operator pos:line="190" pos:column="25">.</op:operator><name pos:line="190" pos:column="26">FromArgb</name></name><argument_list pos:line="190" pos:column="34">(<argument><expr><name><name pos:line="190" pos:column="35">lightC</name><op:operator pos:line="190" pos:column="41">.</op:operator><name pos:line="190" pos:column="42">A</name></name></expr></argument>, <argument><expr><name><name pos:line="190" pos:column="45">lightC</name><op:operator pos:line="190" pos:column="51">.</op:operator><name pos:line="190" pos:column="52">R</name></name></expr></argument>, <argument><expr><name><name pos:line="190" pos:column="55">lightC</name><op:operator pos:line="190" pos:column="61">.</op:operator><name pos:line="190" pos:column="62">G</name></name></expr></argument>, <argument><expr><name><name pos:line="190" pos:column="65">lightC</name><op:operator pos:line="190" pos:column="71">.</op:operator><name pos:line="190" pos:column="72">B</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="193" pos:column="9">private</specifier> <name pos:line="193" pos:column="17">Color</name></type> <name pos:line="193" pos:column="23">GetDarkerColor</name><parameter_list pos:line="193" pos:column="37">(<param><decl><type><name pos:line="193" pos:column="38">Color</name></type> <name pos:line="193" pos:column="44">c</name></decl></param>)</parameter_list>
        <block pos:line="194" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="195" pos:column="13">var</name></type> <name pos:line="195" pos:column="17">drawingcolor</name> <init pos:line="195" pos:column="30">= <expr><call><name><name pos:line="195" pos:column="32">System</name><op:operator pos:line="195" pos:column="38">.</op:operator><name pos:line="195" pos:column="39">Drawing</name><op:operator pos:line="195" pos:column="46">.</op:operator><name pos:line="195" pos:column="47">Color</name><op:operator pos:line="195" pos:column="52">.</op:operator><name pos:line="195" pos:column="53">FromArgb</name></name><argument_list pos:line="195" pos:column="61">(<argument><expr><name><name pos:line="195" pos:column="62">c</name><op:operator pos:line="195" pos:column="63">.</op:operator><name pos:line="195" pos:column="64">A</name></name></expr></argument>, <argument><expr><name><name pos:line="195" pos:column="67">c</name><op:operator pos:line="195" pos:column="68">.</op:operator><name pos:line="195" pos:column="69">R</name></name></expr></argument>, <argument><expr><name><name pos:line="195" pos:column="72">c</name><op:operator pos:line="195" pos:column="73">.</op:operator><name pos:line="195" pos:column="74">G</name></name></expr></argument>, <argument><expr><name><name pos:line="195" pos:column="77">c</name><op:operator pos:line="195" pos:column="78">.</op:operator><name pos:line="195" pos:column="79">B</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="196" pos:column="13">System</name><op:operator pos:line="196" pos:column="19">.</op:operator><name pos:line="196" pos:column="20">Drawing</name><op:operator pos:line="196" pos:column="27">.</op:operator><name pos:line="196" pos:column="28">Color</name></name></type> <name pos:line="196" pos:column="34">lightC</name> <init pos:line="196" pos:column="41">= <expr><call><name><name pos:line="196" pos:column="43">ControlPaint</name><op:operator pos:line="196" pos:column="55">.</op:operator><name pos:line="196" pos:column="56">Dark</name></name><argument_list pos:line="196" pos:column="60">(<argument><expr><name pos:line="196" pos:column="61">drawingcolor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="197" pos:column="13">return <expr><call><name><name pos:line="197" pos:column="20">Color</name><op:operator pos:line="197" pos:column="25">.</op:operator><name pos:line="197" pos:column="26">FromArgb</name></name><argument_list pos:line="197" pos:column="34">(<argument><expr><name><name pos:line="197" pos:column="35">lightC</name><op:operator pos:line="197" pos:column="41">.</op:operator><name pos:line="197" pos:column="42">A</name></name></expr></argument>, <argument><expr><name><name pos:line="197" pos:column="45">lightC</name><op:operator pos:line="197" pos:column="51">.</op:operator><name pos:line="197" pos:column="52">R</name></name></expr></argument>, <argument><expr><name><name pos:line="197" pos:column="55">lightC</name><op:operator pos:line="197" pos:column="61">.</op:operator><name pos:line="197" pos:column="62">G</name></name></expr></argument>, <argument><expr><name><name pos:line="197" pos:column="65">lightC</name><op:operator pos:line="197" pos:column="71">.</op:operator><name pos:line="197" pos:column="72">B</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="200" pos:column="9">internal</specifier> <name pos:line="200" pos:column="18">Color</name></type> <name pos:line="200" pos:column="24">GetBackGroundColor</name><parameter_list pos:line="200" pos:column="42">()</parameter_list>
        <block pos:line="201" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="202" pos:column="13">var</name></type> <name pos:line="202" pos:column="17">key</name> <init pos:line="202" pos:column="21">= <expr><name><name pos:line="202" pos:column="23">Microsoft</name><op:operator pos:line="202" pos:column="32">.</op:operator><name pos:line="202" pos:column="33">VisualStudio</name><op:operator pos:line="202" pos:column="45">.</op:operator><name pos:line="202" pos:column="46">Shell</name><op:operator pos:line="202" pos:column="51">.</op:operator><name pos:line="202" pos:column="52">VsBrushes</name><op:operator pos:line="202" pos:column="61">.</op:operator><name pos:line="202" pos:column="62">BackgroundKey</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="203" pos:column="13">var</name></type> <name pos:line="203" pos:column="17">brush</name> <init pos:line="203" pos:column="23">= <expr><op:operator pos:line="203" pos:column="25">(</op:operator><name pos:line="203" pos:column="26">SolidColorBrush</name><op:operator pos:line="203" pos:column="41">)</op:operator><name><name pos:line="203" pos:column="42">Application</name><op:operator pos:line="203" pos:column="53">.</op:operator><name pos:line="203" pos:column="54">Current</name><op:operator pos:line="203" pos:column="61">.</op:operator><name pos:line="203" pos:column="62">Resources</name><index pos:line="203" pos:column="71">[<expr><name pos:line="203" pos:column="72">key</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <return pos:line="204" pos:column="13">return <expr><name><name pos:line="204" pos:column="20">brush</name><op:operator pos:line="204" pos:column="25">.</op:operator><name pos:line="204" pos:column="26">Color</name></name></expr>;</return>
        }</block></function>


        <function><type><specifier pos:line="208" pos:column="9">private</specifier> <name pos:line="208" pos:column="17">double</name></type> <name pos:line="208" pos:column="24">GetColorDifference</name><parameter_list pos:line="208" pos:column="42">(<param><decl><type><name pos:line="208" pos:column="43">Color</name></type> <name pos:line="208" pos:column="49">a</name></decl></param>, <param><decl><type><name pos:line="208" pos:column="52">Color</name></type> <name pos:line="208" pos:column="58">b</name></decl></param>)</parameter_list>
        <block pos:line="209" pos:column="9">{
            <return pos:line="210" pos:column="13">return <expr><call><name><name pos:line="210" pos:column="20">Math</name><op:operator pos:line="210" pos:column="24">.</op:operator><name pos:line="210" pos:column="25">Abs</name></name><argument_list pos:line="210" pos:column="28">(<argument><expr><op:operator pos:line="210" pos:column="29">(</op:operator><call><name pos:line="210" pos:column="30">GetGreyColor</name><argument_list pos:line="210" pos:column="42">(<argument><expr><name pos:line="210" pos:column="43">a</name></expr></argument>)</argument_list></call> <op:operator pos:line="210" pos:column="46">-</op:operator> <call><name pos:line="210" pos:column="48">GetGreyColor</name><argument_list pos:line="210" pos:column="60">(<argument><expr><name pos:line="210" pos:column="61">b</name></expr></argument>)</argument_list></call><op:operator pos:line="210" pos:column="63">)</op:operator><op:operator pos:line="210" pos:column="64">*</op:operator><lit:literal type="number" pos:line="210" pos:column="65">100.0</lit:literal><op:operator pos:line="210" pos:column="70">/</op:operator><lit:literal type="number" pos:line="210" pos:column="71">256.0</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="213" pos:column="9">private</specifier> <name pos:line="213" pos:column="17">double</name></type> <name pos:line="213" pos:column="24">GetGreyColor</name><parameter_list pos:line="213" pos:column="36">(<param><decl><type><name pos:line="213" pos:column="37">Color</name></type> <name pos:line="213" pos:column="43">a</name></decl></param>)</parameter_list>
        <block pos:line="214" pos:column="9">{
            <return pos:line="215" pos:column="13">return <expr><lit:literal type="number" pos:line="215" pos:column="20">.11</lit:literal><op:operator pos:line="215" pos:column="23">*</op:operator><name><name pos:line="215" pos:column="24">a</name><op:operator pos:line="215" pos:column="25">.</op:operator><name pos:line="215" pos:column="26">B</name></name> <op:operator pos:line="215" pos:column="28">+</op:operator> <lit:literal type="number" pos:line="215" pos:column="30">.59</lit:literal><op:operator pos:line="215" pos:column="33">*</op:operator><name><name pos:line="215" pos:column="34">a</name><op:operator pos:line="215" pos:column="35">.</op:operator><name pos:line="215" pos:column="36">G</name></name> <op:operator pos:line="215" pos:column="38">+</op:operator> <lit:literal type="number" pos:line="215" pos:column="40">.30</lit:literal><op:operator pos:line="215" pos:column="43">*</op:operator><name><name pos:line="215" pos:column="44">a</name><op:operator pos:line="215" pos:column="45">.</op:operator><name pos:line="215" pos:column="46">R</name></name></expr>;</return>
        }</block></function>


    }</block></class>
}</block></namespace>
</unit>
