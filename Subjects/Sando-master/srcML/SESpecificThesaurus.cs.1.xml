<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Core\Core\Tools\SESpecificThesaurus.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">IO</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Linq</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Text</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Sando</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">Core</name><op:operator pos:line="6" pos:column="17">.</op:operator><name pos:line="6" pos:column="18">QueryRefomers</name></name>;</using>

<namespace pos:line="8" pos:column="1">namespace <name><name pos:line="8" pos:column="11">Sando</name><op:operator pos:line="8" pos:column="16">.</op:operator><name pos:line="8" pos:column="17">Core</name><op:operator pos:line="8" pos:column="21">.</op:operator><name pos:line="8" pos:column="22">Tools</name></name>
<block pos:line="9" pos:column="1">{
    <class type="interface"><specifier pos:line="10" pos:column="5">public</specifier> interface <name pos:line="10" pos:column="22">IThesaurus</name> <super pos:line="10" pos:column="33">: <name pos:line="10" pos:column="35">IInitializable</name></super>
    <block pos:line="11" pos:column="5">{
        <function_decl><type><name><name pos:line="12" pos:column="9">IEnumerable</name><argument_list pos:line="12" pos:column="20">&lt;<argument><name pos:line="12" pos:column="21">SynonymInfo</name></argument>&gt;</argument_list></name></type> <name pos:line="12" pos:column="34">GetSynonyms</name><parameter_list pos:line="12" pos:column="45">(<param><decl><type><name pos:line="12" pos:column="46">String</name></type> <name pos:line="12" pos:column="53">word</name></decl></param>)</parameter_list>;</function_decl>
    }</block></class>

    <class><specifier pos:line="15" pos:column="5">public</specifier> class <name pos:line="15" pos:column="18">SynonymInfo</name>
    <block pos:line="16" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="17" pos:column="9">public</specifier> <name pos:line="17" pos:column="16">string</name></type> <name pos:line="17" pos:column="23">Synonym</name> <block pos:line="17" pos:column="31">{ <function_decl><name pos:line="17" pos:column="33">get</name>;</function_decl> <function_decl><specifier pos:line="17" pos:column="38">private</specifier> <name pos:line="17" pos:column="46">set</name>;</function_decl> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="18" pos:column="9">public</specifier> <name pos:line="18" pos:column="16">int</name></type> <name pos:line="18" pos:column="20">SimilarityScore</name> <block pos:line="18" pos:column="36">{ <function_decl><name pos:line="18" pos:column="38">get</name>;</function_decl> <function_decl><specifier pos:line="18" pos:column="43">private</specifier> <name pos:line="18" pos:column="51">set</name>;</function_decl> }</block></decl></decl_stmt>

        <constructor><specifier pos:line="20" pos:column="9">public</specifier> <name pos:line="20" pos:column="16">SynonymInfo</name><parameter_list pos:line="20" pos:column="27">(<param><decl><type><name pos:line="20" pos:column="28">String</name></type> <name pos:line="20" pos:column="35">Synonym</name></decl></param>, <param><decl><type><name pos:line="20" pos:column="44">int</name></type> <name pos:line="20" pos:column="48">SimilarityScore</name> <init pos:line="20" pos:column="64">= <expr><lit:literal type="number" pos:line="20" pos:column="66">0</lit:literal></expr></init></decl></param>)</parameter_list>
        <block pos:line="21" pos:column="9">{
            <expr_stmt><expr><name><name pos:line="22" pos:column="13">this</name><op:operator pos:line="22" pos:column="17">.</op:operator><name pos:line="22" pos:column="18">Synonym</name></name> <op:operator pos:line="22" pos:column="26">=</op:operator> <name pos:line="22" pos:column="28">Synonym</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="23" pos:column="13">this</name><op:operator pos:line="23" pos:column="17">.</op:operator><name pos:line="23" pos:column="18">SimilarityScore</name></name> <op:operator pos:line="23" pos:column="34">=</op:operator> <name pos:line="23" pos:column="36">SimilarityScore</name></expr>;</expr_stmt>
        }</block></constructor>
    }</block></class>

    <class><specifier pos:line="27" pos:column="5">public</specifier> class <name pos:line="27" pos:column="18">ThesaurusHelper</name>
    <block pos:line="28" pos:column="5">{
        <function><type><specifier pos:line="29" pos:column="9">public</specifier> <specifier pos:line="29" pos:column="16">static</specifier> <name><name pos:line="29" pos:column="23">IEnumerable</name><argument_list pos:line="29" pos:column="34">&lt;<argument><name pos:line="29" pos:column="35">T</name></argument>&gt;</argument_list></name></type> <name><name pos:line="29" pos:column="38">GetValuesOfKey</name><argument_list pos:line="29" pos:column="52">&lt;<argument><name pos:line="29" pos:column="53">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="29" pos:column="55">(<param><decl><type><name><name pos:line="29" pos:column="56">List</name><argument_list pos:line="29" pos:column="60">&lt;<argument><name><name pos:line="29" pos:column="61">KeyValuePair</name><argument_list pos:line="29" pos:column="73">&lt;<argument><name pos:line="29" pos:column="74">String</name></argument>, <argument><name pos:line="29" pos:column="82">T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="29" pos:column="86">keyValuePairs</name></decl></param>,
          <param><decl><type><name pos:line="30" pos:column="11">string</name></type> <name pos:line="30" pos:column="18">word</name></decl></param>)</parameter_list>
        <block pos:line="31" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="32" pos:column="13">var</name></type> <name pos:line="32" pos:column="17">target</name> <init pos:line="32" pos:column="24">= <expr><op:operator pos:line="32" pos:column="26">new</op:operator> <macro><name pos:line="32" pos:column="30">KeyValuePair</name></macro><op:operator pos:line="32" pos:column="42">&lt;</op:operator><name pos:line="32" pos:column="43">String</name></expr></init><op:operator pos:line="32" pos:column="49">,</op:operator> <name pos:line="32" pos:column="51">T</name>&gt;<argument_list pos:line="32" pos:column="53">(<argument><expr><name pos:line="32" pos:column="54">word</name></expr></argument>, <argument><expr><call><name pos:line="32" pos:column="60">default</name><argument_list pos:line="32" pos:column="67">(<argument><expr><name pos:line="32" pos:column="68">T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="33" pos:column="13">var</name></type> <name pos:line="33" pos:column="17">comparer</name> <init pos:line="33" pos:column="26">= <expr><op:operator pos:line="33" pos:column="28">new</op:operator> <call><name><name pos:line="33" pos:column="32">KeyComparer</name><argument_list pos:line="33" pos:column="43">&lt;<argument><name pos:line="33" pos:column="44">T</name></argument>&gt;</argument_list></name><argument_list pos:line="33" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="34" pos:column="13">int</name></type> <name pos:line="34" pos:column="17">endIndex</name> <init pos:line="34" pos:column="26">= <expr><call><name><name pos:line="34" pos:column="28">keyValuePairs</name><op:operator pos:line="34" pos:column="41">.</op:operator><name pos:line="34" pos:column="42">BinarySearch</name></name><argument_list pos:line="34" pos:column="54">(<argument><expr><name pos:line="34" pos:column="55">target</name></expr></argument>, <argument><expr><name pos:line="34" pos:column="63">comparer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="35" pos:column="13">if <condition pos:line="35" pos:column="16">(<expr><name pos:line="35" pos:column="17">endIndex</name> <op:operator pos:line="35" pos:column="26">&gt;</op:operator> <op:operator pos:line="35" pos:column="28">-</op:operator><lit:literal type="number" pos:line="35" pos:column="29">1</lit:literal> <op:operator pos:line="35" pos:column="31">&amp;&amp;</op:operator> <name pos:line="35" pos:column="34">endIndex</name> <op:operator pos:line="35" pos:column="43">&lt;</op:operator> <name><name pos:line="35" pos:column="45">keyValuePairs</name><op:operator pos:line="35" pos:column="58">.</op:operator><name pos:line="35" pos:column="59">Count</name></name></expr>)</condition><then pos:line="35" pos:column="65">
            <block pos:line="36" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="37" pos:column="17">int</name></type> <name pos:line="37" pos:column="21">startInex</name></decl>;</decl_stmt>
                <for pos:line="38" pos:column="17">for (<init><expr><name pos:line="38" pos:column="22">startInex</name> <op:operator pos:line="38" pos:column="32">=</op:operator> <name pos:line="38" pos:column="34">endIndex</name></expr>;</init> <condition><expr><name pos:line="38" pos:column="44">startInex</name> <op:operator pos:line="38" pos:column="54">&gt;</op:operator> <lit:literal type="number" pos:line="38" pos:column="56">0</lit:literal> <op:operator pos:line="38" pos:column="58">&amp;&amp;</op:operator> <call><name><name pos:line="38" pos:column="61">comparer</name><op:operator pos:line="38" pos:column="69">.</op:operator><name pos:line="38" pos:column="70">Compare</name></name><argument_list pos:line="38" pos:column="77">(<argument><expr><call><name><name pos:line="38" pos:column="78">keyValuePairs</name><op:operator pos:line="38" pos:column="91">.</op:operator><name pos:line="38" pos:column="92">ElementAt</name></name><argument_list pos:line="38" pos:column="101">(<argument><expr><name pos:line="38" pos:column="102">startInex</name> <op:operator pos:line="38" pos:column="112">-</op:operator> <lit:literal type="number" pos:line="38" pos:column="114">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>, 
                    <argument><expr><name pos:line="39" pos:column="21">target</name></expr></argument>)</argument_list></call> <op:operator pos:line="39" pos:column="29">==</op:operator> <lit:literal type="number" pos:line="39" pos:column="32">0</lit:literal></expr>;</condition> <incr><expr><name pos:line="39" pos:column="35">startInex</name><op:operator pos:line="39" pos:column="44">--</op:operator></expr></incr>)<empty_stmt pos:line="39" pos:column="47">;</empty_stmt></for>
                <return pos:line="40" pos:column="17">return <expr><call><name><name pos:line="40" pos:column="24">keyValuePairs</name><op:operator pos:line="40" pos:column="37">.</op:operator><name pos:line="40" pos:column="38">GetRange</name></name><argument_list pos:line="40" pos:column="46">(<argument><expr><name pos:line="40" pos:column="47">startInex</name></expr></argument>, <argument><expr><name pos:line="40" pos:column="58">endIndex</name> <op:operator pos:line="40" pos:column="67">-</op:operator> <name pos:line="40" pos:column="69">startInex</name> <op:operator pos:line="40" pos:column="79">+</op:operator> <lit:literal type="number" pos:line="40" pos:column="81">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="40" pos:column="83">.</op:operator><call><name pos:line="40" pos:column="84">Select</name><argument_list pos:line="40" pos:column="90">(<argument><expr><lambda><name pos:line="40" pos:column="91">p</name> <op:operator pos:line="40" pos:column="93">=&gt;</op:operator> <name><name pos:line="40" pos:column="96">p</name><op:operator pos:line="40" pos:column="97">.</op:operator><name pos:line="40" pos:column="98">Value</name></name></lambda></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
            <return pos:line="42" pos:column="13">return <expr><call><name><name pos:line="42" pos:column="20">Enumerable</name><op:operator pos:line="42" pos:column="30">.</op:operator><name><name pos:line="42" pos:column="31">Empty</name><argument_list pos:line="42" pos:column="36">&lt;<argument><name pos:line="42" pos:column="37">T</name></argument>&gt;</argument_list></name></name><argument_list pos:line="42" pos:column="39">()</argument_list></call></expr>;</return>
        }</block></function>

        <class><specifier pos:line="45" pos:column="9">private</specifier> class <name><name pos:line="45" pos:column="23">KeyComparer</name><argument_list pos:line="45" pos:column="34">&lt;<argument><name pos:line="45" pos:column="35">T</name></argument>&gt;</argument_list></name> <super pos:line="45" pos:column="38">: <name><name pos:line="45" pos:column="40">IComparer</name><argument_list pos:line="45" pos:column="49">&lt;<argument><name><name pos:line="45" pos:column="50">KeyValuePair</name><argument_list pos:line="45" pos:column="62">&lt;<argument><name pos:line="45" pos:column="63">string</name></argument>, <argument><name pos:line="45" pos:column="71">T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></super>
        <block pos:line="46" pos:column="9">{
            <function><type><specifier pos:line="47" pos:column="13">public</specifier> <name pos:line="47" pos:column="20">int</name></type> <name pos:line="47" pos:column="24">Compare</name><parameter_list pos:line="47" pos:column="31">(<param><decl><type><name><name pos:line="47" pos:column="32">KeyValuePair</name><argument_list pos:line="47" pos:column="44">&lt;<argument><name pos:line="47" pos:column="45">string</name></argument>, <argument><name pos:line="47" pos:column="53">T</name></argument>&gt;</argument_list></name></type> <name pos:line="47" pos:column="56">x</name></decl></param>, <param><decl><type><name><name pos:line="47" pos:column="59">KeyValuePair</name><argument_list pos:line="47" pos:column="71">&lt;<argument><name pos:line="47" pos:column="72">string</name></argument>, <argument><name pos:line="47" pos:column="80">T</name></argument>&gt;</argument_list></name></type> <name pos:line="47" pos:column="83">y</name></decl></param>)</parameter_list>
            <block pos:line="48" pos:column="13">{
                <return pos:line="49" pos:column="17">return <expr><call><name><name pos:line="49" pos:column="24">x</name><op:operator pos:line="49" pos:column="25">.</op:operator><name pos:line="49" pos:column="26">Key</name><op:operator pos:line="49" pos:column="29">.</op:operator><name pos:line="49" pos:column="30">CompareTo</name></name><argument_list pos:line="49" pos:column="39">(<argument><expr><name><name pos:line="49" pos:column="40">y</name><op:operator pos:line="49" pos:column="41">.</op:operator><name pos:line="49" pos:column="42">Key</name></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class>
    }</block></class>


    <class><specifier pos:line="55" pos:column="5">public</specifier> class <name pos:line="55" pos:column="18">SeSpecificThesaurus</name> <super pos:line="55" pos:column="38">: <name pos:line="55" pos:column="40">IThesaurus</name></super>
    <block pos:line="56" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="57" pos:column="9">private</specifier> <specifier pos:line="57" pos:column="17">static</specifier> <specifier pos:line="57" pos:column="24">readonly</specifier> <name pos:line="57" pos:column="33">string</name></type> <name pos:line="57" pos:column="40">filePath</name> <init pos:line="57" pos:column="49">= <expr><call><name pos:line="57" pos:column="51">GetFilePath</name><argument_list pos:line="57" pos:column="62">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="58" pos:column="9">private</specifier> <name><name pos:line="58" pos:column="17">List</name><argument_list pos:line="58" pos:column="21">&lt;<argument><name pos:line="58" pos:column="22">ThesaurusEntry</name></argument>&gt;</argument_list></name></type> <name pos:line="58" pos:column="38">orderedWordPairs</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="59" pos:column="9">private</specifier> <name><name pos:line="59" pos:column="17">List</name><argument_list pos:line="59" pos:column="21">&lt;<argument><name pos:line="59" pos:column="22">ThesaurusEntry</name></argument>&gt;</argument_list></name></type> <name pos:line="59" pos:column="38">switchedWordPairs</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="60" pos:column="9">private</specifier> <specifier pos:line="60" pos:column="17">readonly</specifier> <name pos:line="60" pos:column="26">object</name></type> <name pos:line="60" pos:column="33">locker</name> <init pos:line="60" pos:column="40">= <expr><op:operator pos:line="60" pos:column="42">new</op:operator> <call><name pos:line="60" pos:column="46">object</name><argument_list pos:line="60" pos:column="52">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="61" pos:column="9">private</specifier> <name pos:line="61" pos:column="17">bool</name></type> <name pos:line="61" pos:column="22">isInitialized</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="62" pos:column="9">private</specifier> <specifier pos:line="62" pos:column="17">static</specifier> <name pos:line="62" pos:column="24">SeSpecificThesaurus</name></type> <name pos:line="62" pos:column="44">instance</name></decl>;</decl_stmt>

        <constructor><specifier pos:line="64" pos:column="9">private</specifier> <name pos:line="64" pos:column="17">SeSpecificThesaurus</name><parameter_list pos:line="64" pos:column="36">()</parameter_list>
        <block pos:line="65" pos:column="9">{
            <lock pos:line="66" pos:column="13">lock (<expr><name pos:line="66" pos:column="19">locker</name></expr>)
            <block pos:line="67" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="68" pos:column="17">this</name><op:operator pos:line="68" pos:column="21">.</op:operator><name pos:line="68" pos:column="22">isInitialized</name></name> <op:operator pos:line="68" pos:column="36">=</op:operator> <lit:literal type="boolean" pos:line="68" pos:column="38">false</lit:literal></expr>;</expr_stmt>
            }</block></lock>
        }</block></constructor>
        <function><type><specifier pos:line="71" pos:column="9">public</specifier> <specifier pos:line="71" pos:column="16">static</specifier> <name pos:line="71" pos:column="23">IThesaurus</name></type> <name pos:line="71" pos:column="34">GetInstance</name><parameter_list pos:line="71" pos:column="45">()</parameter_list>
        <block pos:line="72" pos:column="9">{
            <return pos:line="73" pos:column="13">return <expr><name pos:line="73" pos:column="20">instance</name> <op:operator pos:line="73" pos:column="29">??</op:operator> <op:operator pos:line="73" pos:column="32">(</op:operator><name pos:line="73" pos:column="33">instance</name> <op:operator pos:line="73" pos:column="42">=</op:operator> <op:operator pos:line="73" pos:column="44">new</op:operator> <call><name pos:line="73" pos:column="48">SeSpecificThesaurus</name><argument_list pos:line="73" pos:column="67">()</argument_list></call><op:operator pos:line="73" pos:column="69">)</op:operator></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="76" pos:column="9">private</specifier> <specifier pos:line="76" pos:column="17">static</specifier> <name pos:line="76" pos:column="24">string</name></type> <name pos:line="76" pos:column="31">GetFilePath</name><parameter_list pos:line="76" pos:column="42">()</parameter_list>
        <block pos:line="77" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="78" pos:column="13">var</name></type> <name pos:line="78" pos:column="17">directory</name> <init pos:line="78" pos:column="27">= <expr><call><name><name pos:line="78" pos:column="29">PathManager</name><op:operator pos:line="78" pos:column="40">.</op:operator><name pos:line="78" pos:column="41">Instance</name><op:operator pos:line="78" pos:column="49">.</op:operator><name pos:line="78" pos:column="50">GetExtensionRoot</name></name><argument_list pos:line="78" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="79" pos:column="13">var</name></type> <name pos:line="79" pos:column="17">file</name> <init pos:line="79" pos:column="22">= <expr><lit:literal type="string" pos:line="79" pos:column="24">@"Dictionaries\mined_related_unique.csv"</lit:literal></expr></init></decl>;</decl_stmt>
            <return pos:line="80" pos:column="13">return <expr><call><name><name pos:line="80" pos:column="20">File</name><op:operator pos:line="80" pos:column="24">.</op:operator><name pos:line="80" pos:column="25">Exists</name></name><argument_list pos:line="80" pos:column="31">(<argument><expr><name pos:line="80" pos:column="32">file</name></expr></argument>)</argument_list></call> <op:operator pos:line="80" pos:column="38">?</op:operator> <name pos:line="80" pos:column="40">file</name> <op:operator pos:line="80" pos:column="45">:</op:operator> <call><name><name pos:line="80" pos:column="47">Path</name><op:operator pos:line="80" pos:column="51">.</op:operator><name pos:line="80" pos:column="52">Combine</name></name><argument_list pos:line="80" pos:column="59">(<argument><expr><name pos:line="80" pos:column="60">directory</name></expr></argument>, <argument><expr><name pos:line="80" pos:column="71">file</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>


        <class><specifier pos:line="84" pos:column="9">private</specifier> class <name pos:line="84" pos:column="23">ThesaurusEntry</name>
        <block pos:line="85" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="86" pos:column="13">public</specifier> <name pos:line="86" pos:column="20">String</name></type> <name pos:line="86" pos:column="27">FirstWord</name> <block pos:line="86" pos:column="37">{ <function_decl><specifier pos:line="86" pos:column="39">private</specifier> <name pos:line="86" pos:column="47">set</name>;</function_decl> <function_decl><name pos:line="86" pos:column="52">get</name>;</function_decl> }</block></decl></decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="87" pos:column="13">public</specifier> <name pos:line="87" pos:column="20">String</name></type> <name pos:line="87" pos:column="27">SecondWord</name> <block pos:line="87" pos:column="38">{ <function_decl><specifier pos:line="87" pos:column="40">private</specifier> <name pos:line="87" pos:column="48">set</name>;</function_decl> <function_decl><name pos:line="87" pos:column="53">get</name>;</function_decl> }</block></decl></decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="88" pos:column="13">public</specifier> <name pos:line="88" pos:column="20">int</name></type> <name pos:line="88" pos:column="24">Score</name> <block pos:line="88" pos:column="30">{ <function_decl><specifier pos:line="88" pos:column="32">private</specifier> <name pos:line="88" pos:column="40">set</name>;</function_decl> <function_decl><name pos:line="88" pos:column="45">get</name>;</function_decl> }</block></decl></decl_stmt>

            <constructor><specifier pos:line="90" pos:column="13">public</specifier> <name pos:line="90" pos:column="20">ThesaurusEntry</name><parameter_list pos:line="90" pos:column="34">(<param><decl><type><name pos:line="90" pos:column="35">String</name></type> <name pos:line="90" pos:column="42">FirstWord</name></decl></param>, <param><decl><type><name pos:line="90" pos:column="53">String</name></type> <name pos:line="90" pos:column="60">SecondWord</name></decl></param>, <param><decl><type><name pos:line="90" pos:column="72">int</name></type> <name pos:line="90" pos:column="76">Score</name></decl></param>)</parameter_list>
            <block pos:line="91" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="92" pos:column="17">this</name><op:operator pos:line="92" pos:column="21">.</op:operator><name pos:line="92" pos:column="22">FirstWord</name></name> <op:operator pos:line="92" pos:column="32">=</op:operator> <name pos:line="92" pos:column="34">FirstWord</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="93" pos:column="17">this</name><op:operator pos:line="93" pos:column="21">.</op:operator><name pos:line="93" pos:column="22">SecondWord</name></name> <op:operator pos:line="93" pos:column="33">=</op:operator> <name pos:line="93" pos:column="35">SecondWord</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="94" pos:column="17">this</name><op:operator pos:line="94" pos:column="21">.</op:operator><name pos:line="94" pos:column="22">Score</name></name> <op:operator pos:line="94" pos:column="28">=</op:operator> <name pos:line="94" pos:column="30">Score</name></expr>;</expr_stmt>
            }</block></constructor>

            <constructor><specifier pos:line="97" pos:column="13">public</specifier> <name pos:line="97" pos:column="20">ThesaurusEntry</name><parameter_list pos:line="97" pos:column="34">(<param><decl><type><name pos:line="97" pos:column="35">String</name></type> <name pos:line="97" pos:column="42">line</name></decl></param>)</parameter_list>
            <block pos:line="98" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="99" pos:column="17">var</name></type> <name pos:line="99" pos:column="21">parts</name> <init pos:line="99" pos:column="27">= <expr><call><name><name pos:line="99" pos:column="29">line</name><op:operator pos:line="99" pos:column="33">.</op:operator><name pos:line="99" pos:column="34">Split</name></name><argument_list pos:line="99" pos:column="39">(<argument><expr><op:operator pos:line="99" pos:column="40">new</op:operator> <name><name pos:line="99" pos:column="44">char</name><index pos:line="99" pos:column="48">[]</index></name> <block pos:line="99" pos:column="51">{<expr><lit:literal type="char" pos:line="99" pos:column="52">','</lit:literal></expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name pos:line="100" pos:column="17">this</name><op:operator pos:line="100" pos:column="21">.</op:operator><name pos:line="100" pos:column="22">FirstWord</name></name> <op:operator pos:line="100" pos:column="32">=</op:operator> <name><name pos:line="100" pos:column="34">parts</name><index pos:line="100" pos:column="39">[<expr><lit:literal type="number" pos:line="100" pos:column="40">0</lit:literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="101" pos:column="17">this</name><op:operator pos:line="101" pos:column="21">.</op:operator><name pos:line="101" pos:column="22">SecondWord</name></name> <op:operator pos:line="101" pos:column="33">=</op:operator> <name><name pos:line="101" pos:column="35">parts</name><index pos:line="101" pos:column="40">[<expr><lit:literal type="number" pos:line="101" pos:column="41">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="102" pos:column="17">this</name><op:operator pos:line="102" pos:column="21">.</op:operator><name pos:line="102" pos:column="22">Score</name></name> <op:operator pos:line="102" pos:column="28">=</op:operator> <call><name><name pos:line="102" pos:column="30">int</name><op:operator pos:line="102" pos:column="33">.</op:operator><name pos:line="102" pos:column="34">Parse</name></name><argument_list pos:line="102" pos:column="39">(<argument><expr><name><name pos:line="102" pos:column="40">parts</name><index pos:line="102" pos:column="45">[<expr><lit:literal type="number" pos:line="102" pos:column="46">2</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></constructor>

            <function><type><specifier pos:line="105" pos:column="13">public</specifier> <name pos:line="105" pos:column="20">ThesaurusEntry</name></type> <name pos:line="105" pos:column="35">GetReversedEntry</name><parameter_list pos:line="105" pos:column="51">()</parameter_list>
            <block pos:line="106" pos:column="13">{
                <return pos:line="107" pos:column="17">return <expr><op:operator pos:line="107" pos:column="24">new</op:operator> <call><name pos:line="107" pos:column="28">ThesaurusEntry</name><argument_list pos:line="107" pos:column="42">(<argument><expr><name pos:line="107" pos:column="43">SecondWord</name></expr></argument>, <argument><expr><name pos:line="107" pos:column="55">FirstWord</name></expr></argument>, <argument><expr><name pos:line="107" pos:column="66">Score</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class>

        <function><type><specifier pos:line="111" pos:column="9">public</specifier> <name pos:line="111" pos:column="16">void</name></type> <name pos:line="111" pos:column="21">Initialize</name><parameter_list pos:line="111" pos:column="31">(<param><decl><type><name pos:line="111" pos:column="32">string</name></type> <name pos:line="111" pos:column="39">notUsedDirectory</name></decl></param>)</parameter_list>
        <block pos:line="112" pos:column="9">{
            <lock pos:line="113" pos:column="13">lock (<expr><name pos:line="113" pos:column="19">locker</name></expr>)
            <block pos:line="114" pos:column="13">{
                <if pos:line="115" pos:column="17">if <condition pos:line="115" pos:column="20">(<expr><op:operator pos:line="115" pos:column="21">!</op:operator><name pos:line="115" pos:column="22">isInitialized</name></expr>)</condition><then pos:line="115" pos:column="36">
                <block pos:line="116" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="117" pos:column="21">var</name></type> <name pos:line="117" pos:column="25">lines</name> <init pos:line="117" pos:column="31">= <expr><call><name><name pos:line="117" pos:column="33">File</name><op:operator pos:line="117" pos:column="37">.</op:operator><name pos:line="117" pos:column="38">ReadAllLines</name></name><argument_list pos:line="117" pos:column="50">(<argument><expr><name pos:line="117" pos:column="51">filePath</name></expr></argument>)</argument_list></call><op:operator pos:line="117" pos:column="60">.</op:operator><call><name pos:line="117" pos:column="61">Select</name><argument_list pos:line="117" pos:column="67">(<argument><expr><lambda><name pos:line="117" pos:column="68">a</name> <op:operator pos:line="117" pos:column="70">=&gt;</op:operator> <call><name><name pos:line="117" pos:column="73">a</name><op:operator pos:line="117" pos:column="74">.</op:operator><name pos:line="117" pos:column="75">Split</name></name><argument_list pos:line="117" pos:column="80">(<argument><expr><lit:literal type="char" pos:line="117" pos:column="81">';'</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name pos:line="118" pos:column="21">IEnumerable</name><argument_list pos:line="118" pos:column="32">&lt;<argument><name pos:line="118" pos:column="33">string</name></argument>&gt;</argument_list></name></type> <name pos:line="118" pos:column="41">csv</name> <init pos:line="118" pos:column="45">= <expr><op:operator pos:line="118" pos:column="47">(</op:operator><linq><from pos:line="118" pos:column="48">from <expr><name pos:line="118" pos:column="53">line</name></expr> <in pos:line="118" pos:column="58">in <expr><name pos:line="118" pos:column="61">lines</name></expr></in></from> <select pos:line="118" pos:column="67">select <expr><op:operator pos:line="118" pos:column="74">(</op:operator></expr></select><from pos:line="118" pos:column="75">from <expr><name pos:line="118" pos:column="80">piece</name></expr> <in pos:line="118" pos:column="86">in <expr><name pos:line="118" pos:column="89">line</name></expr></in></from> <select pos:line="118" pos:column="94">select <expr><name pos:line="118" pos:column="101">piece</name></expr></select></linq><op:operator pos:line="118" pos:column="106">)</op:operator><op:operator pos:line="118" pos:column="107">.</op:operator>
                            <call><name pos:line="119" pos:column="29">First</name><argument_list pos:line="119" pos:column="34">()</argument_list></call></expr>)</init><op:operator pos:line="119" pos:column="37">.</op:operator><call><name pos:line="119" pos:column="38">Skip</name><argument_list pos:line="119" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="119" pos:column="43">1</lit:literal></expr></argument>)</argument_list></call></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="120" pos:column="21">var</name></type> <name pos:line="120" pos:column="25">synonyms</name> <init pos:line="120" pos:column="34">= <expr><call><name><name pos:line="120" pos:column="36">csv</name><op:operator pos:line="120" pos:column="39">.</op:operator><name pos:line="120" pos:column="40">Select</name></name><argument_list pos:line="120" pos:column="46">(<argument><expr><lambda><name pos:line="120" pos:column="47">s</name> <op:operator pos:line="120" pos:column="49">=&gt;</op:operator> <op:operator pos:line="120" pos:column="52">new</op:operator> <call><name pos:line="120" pos:column="56">ThesaurusEntry</name><argument_list pos:line="120" pos:column="70">(<argument><expr><name pos:line="120" pos:column="71">s</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="120" pos:column="74">.</op:operator><call><name pos:line="120" pos:column="75">ToList</name><argument_list pos:line="120" pos:column="81">()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name><name pos:line="121" pos:column="21">this</name><op:operator pos:line="121" pos:column="25">.</op:operator><name pos:line="121" pos:column="26">orderedWordPairs</name></name> <op:operator pos:line="121" pos:column="43">=</op:operator> <call><name><name pos:line="121" pos:column="45">synonyms</name><op:operator pos:line="121" pos:column="53">.</op:operator><name pos:line="121" pos:column="54">OrderBy</name></name><argument_list pos:line="121" pos:column="61">(<argument><expr><lambda><name pos:line="121" pos:column="62">s</name> <op:operator pos:line="121" pos:column="64">=&gt;</op:operator> <name><name pos:line="121" pos:column="67">s</name><op:operator pos:line="121" pos:column="68">.</op:operator><name pos:line="121" pos:column="69">FirstWord</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="121" pos:column="79">.</op:operator><call><name pos:line="121" pos:column="80">ToList</name><argument_list pos:line="121" pos:column="86">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="122" pos:column="21">this</name><op:operator pos:line="122" pos:column="25">.</op:operator><name pos:line="122" pos:column="26">switchedWordPairs</name></name> <op:operator pos:line="122" pos:column="44">=</op:operator> <call><name><name pos:line="122" pos:column="46">synonyms</name><op:operator pos:line="122" pos:column="54">.</op:operator><name pos:line="122" pos:column="55">Select</name></name><argument_list pos:line="122" pos:column="61">(<argument><expr><lambda><name pos:line="122" pos:column="62">s</name> <op:operator pos:line="122" pos:column="64">=&gt;</op:operator> <call><name><name pos:line="122" pos:column="67">s</name><op:operator pos:line="122" pos:column="68">.</op:operator><name pos:line="122" pos:column="69">GetReversedEntry</name></name><argument_list pos:line="122" pos:column="85">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="122" pos:column="88">.</op:operator><call><name pos:line="122" pos:column="89">OrderBy</name><argument_list pos:line="122" pos:column="96">(<argument><expr><lambda><name pos:line="122" pos:column="97">s</name> <op:operator pos:line="122" pos:column="99">=&gt;</op:operator> 
                        <name><name pos:line="123" pos:column="25">s</name><op:operator pos:line="123" pos:column="26">.</op:operator><name pos:line="123" pos:column="27">FirstWord</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="123" pos:column="37">.</op:operator><call><name pos:line="123" pos:column="38">ToList</name><argument_list pos:line="123" pos:column="44">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="124" pos:column="21">this</name><op:operator pos:line="124" pos:column="25">.</op:operator><name pos:line="124" pos:column="26">isInitialized</name></name> <op:operator pos:line="124" pos:column="40">=</op:operator> <lit:literal type="boolean" pos:line="124" pos:column="42">true</lit:literal></expr>;</expr_stmt>
                }</block></then></if>
            }</block></lock>
        }</block></function>

        <function><type><specifier pos:line="129" pos:column="9">private</specifier> <name pos:line="129" pos:column="17">String</name></type> <name pos:line="129" pos:column="24">Preprocess</name><parameter_list pos:line="129" pos:column="34">(<param><decl><type><name pos:line="129" pos:column="35">String</name></type> <name pos:line="129" pos:column="42">word</name></decl></param>)</parameter_list>
        <block pos:line="130" pos:column="9">{
            <return pos:line="131" pos:column="13">return <expr><call><name><name pos:line="131" pos:column="20">word</name><op:operator pos:line="131" pos:column="24">.</op:operator><name pos:line="131" pos:column="25">Trim</name></name><argument_list pos:line="131" pos:column="29">()</argument_list></call><op:operator pos:line="131" pos:column="31">.</op:operator><call><name pos:line="131" pos:column="32">ToLower</name><argument_list pos:line="131" pos:column="39">()</argument_list></call></expr>;</return>
        }</block></function>
       
        <function><type><specifier pos:line="134" pos:column="9">private</specifier> <name><name pos:line="134" pos:column="17">IEnumerable</name><argument_list pos:line="134" pos:column="28">&lt;<argument><name pos:line="134" pos:column="29">ThesaurusEntry</name></argument>&gt;</argument_list></name></type> <name pos:line="134" pos:column="45">GetEntriesByFirstWord</name><parameter_list pos:line="134" pos:column="66">(<param><decl><type><name><name pos:line="134" pos:column="67">List</name><argument_list pos:line="134" pos:column="71">&lt;<argument><name pos:line="134" pos:column="72">ThesaurusEntry</name></argument>&gt;</argument_list></name></type> <name pos:line="134" pos:column="88">entries</name></decl></param>, <param><decl><type><name pos:line="134" pos:column="97">String</name></type> <name pos:line="134" pos:column="104">word</name></decl></param>)</parameter_list>
        <block pos:line="135" pos:column="9">{
            <return pos:line="136" pos:column="13">return <expr><call><name><name pos:line="136" pos:column="20">entries</name><op:operator pos:line="136" pos:column="27">.</op:operator><name pos:line="136" pos:column="28">CustomBinarySearch</name></name><argument_list pos:line="136" pos:column="46">(<argument><expr><op:operator pos:line="136" pos:column="47">new</op:operator> <call><name pos:line="136" pos:column="51">ThesaurusEntry</name><argument_list pos:line="136" pos:column="65">(<argument><expr><name pos:line="136" pos:column="66">word</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="136" pos:column="72">""</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="136" pos:column="76">0</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="136" pos:column="80">new</op:operator> <call><name pos:line="136" pos:column="84">EntryKeyComparer</name><argument_list pos:line="136" pos:column="100">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <class><specifier pos:line="139" pos:column="9">private</specifier> class <name pos:line="139" pos:column="23">EntryKeyComparer</name> <super pos:line="139" pos:column="40">: <name><name pos:line="139" pos:column="42">IComparer</name><argument_list pos:line="139" pos:column="51">&lt;<argument><name pos:line="139" pos:column="52">ThesaurusEntry</name></argument>&gt;</argument_list></name></super>
        <block pos:line="140" pos:column="9">{
            <function><type><specifier pos:line="141" pos:column="13">public</specifier> <name pos:line="141" pos:column="20">int</name></type> <name pos:line="141" pos:column="24">Compare</name><parameter_list pos:line="141" pos:column="31">(<param><decl><type><name pos:line="141" pos:column="32">ThesaurusEntry</name></type> <name pos:line="141" pos:column="47">x</name></decl></param>, <param><decl><type><name pos:line="141" pos:column="50">ThesaurusEntry</name></type> <name pos:line="141" pos:column="65">y</name></decl></param>)</parameter_list>
            <block pos:line="142" pos:column="13">{
                <return pos:line="143" pos:column="17">return <expr><call><name><name pos:line="143" pos:column="24">x</name><op:operator pos:line="143" pos:column="25">.</op:operator><name pos:line="143" pos:column="26">FirstWord</name><op:operator pos:line="143" pos:column="35">.</op:operator><name pos:line="143" pos:column="36">CompareTo</name></name><argument_list pos:line="143" pos:column="45">(<argument><expr><name><name pos:line="143" pos:column="46">y</name><op:operator pos:line="143" pos:column="47">.</op:operator><name pos:line="143" pos:column="48">FirstWord</name></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class>

        <function><type><specifier pos:line="147" pos:column="9">public</specifier> <name><name pos:line="147" pos:column="16">IEnumerable</name><argument_list pos:line="147" pos:column="27">&lt;<argument><name pos:line="147" pos:column="28">SynonymInfo</name></argument>&gt;</argument_list></name></type> <name pos:line="147" pos:column="41">GetSynonyms</name><parameter_list pos:line="147" pos:column="52">(<param><decl><type><name pos:line="147" pos:column="53">String</name></type> <name pos:line="147" pos:column="60">word</name></decl></param>)</parameter_list>
        <block pos:line="148" pos:column="9">{
            <lock pos:line="149" pos:column="13">lock (<expr><name pos:line="149" pos:column="19">locker</name></expr>)
            <block pos:line="150" pos:column="13">{
                <if pos:line="151" pos:column="17">if <condition pos:line="151" pos:column="20">(<expr><op:operator pos:line="151" pos:column="21">!</op:operator><call><name><name pos:line="151" pos:column="22">String</name><op:operator pos:line="151" pos:column="28">.</op:operator><name pos:line="151" pos:column="29">IsNullOrEmpty</name></name><argument_list pos:line="151" pos:column="42">(<argument><expr><name pos:line="151" pos:column="43">word</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="151" pos:column="49">
                <block pos:line="152" pos:column="17">{
                    <expr_stmt><expr><name pos:line="153" pos:column="21">word</name> <op:operator pos:line="153" pos:column="26">=</op:operator> <call><name pos:line="153" pos:column="28">Preprocess</name><argument_list pos:line="153" pos:column="38">(<argument><expr><name pos:line="153" pos:column="39">word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return pos:line="154" pos:column="21">return <expr><call><name pos:line="154" pos:column="28">GetEntriesByFirstWord</name><argument_list pos:line="154" pos:column="49">(<argument><expr><name pos:line="154" pos:column="50">orderedWordPairs</name></expr></argument>, <argument><expr><name pos:line="154" pos:column="68">word</name></expr></argument>)</argument_list></call>
                            <op:operator pos:line="155" pos:column="29">.</op:operator><call><name pos:line="155" pos:column="30">Union</name><argument_list pos:line="155" pos:column="35">(<argument><expr><call><name pos:line="155" pos:column="36">GetEntriesByFirstWord</name><argument_list pos:line="155" pos:column="57">(<argument><expr><name pos:line="155" pos:column="58">switchedWordPairs</name></expr></argument>, <argument><expr><name pos:line="155" pos:column="77">word</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="155" pos:column="83">.</op:operator>
                                <call><name pos:line="156" pos:column="33">Select</name><argument_list pos:line="156" pos:column="39">(<argument><expr><lambda><name pos:line="156" pos:column="40">entry</name> <op:operator pos:line="156" pos:column="46">=&gt;</op:operator> <op:operator pos:line="156" pos:column="49">new</op:operator> <call><name pos:line="156" pos:column="53">SynonymInfo</name><argument_list pos:line="156" pos:column="64">(<argument><expr><name><name pos:line="156" pos:column="65">entry</name><op:operator pos:line="156" pos:column="70">.</op:operator><name pos:line="156" pos:column="71">SecondWord</name></name></expr></argument>, 
                                    <argument><expr><name><name pos:line="157" pos:column="37">entry</name><op:operator pos:line="157" pos:column="42">.</op:operator><name pos:line="157" pos:column="43">Score</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</return>
                }</block></then></if>
                <return pos:line="159" pos:column="17">return <expr><call><name><name pos:line="159" pos:column="24">Enumerable</name><op:operator pos:line="159" pos:column="34">.</op:operator><name><name pos:line="159" pos:column="35">Empty</name><argument_list pos:line="159" pos:column="40">&lt;<argument><name pos:line="159" pos:column="41">SynonymInfo</name></argument>&gt;</argument_list></name></name><argument_list pos:line="159" pos:column="53">()</argument_list></call></expr>;</return>
            }</block></lock>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
