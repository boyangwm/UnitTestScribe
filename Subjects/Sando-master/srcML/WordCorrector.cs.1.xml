<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Core\Core\Tools\WordCorrector.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Text</name></name>;</using>

<namespace pos:line="6" pos:column="1">namespace <name><name pos:line="6" pos:column="11">Sando</name><op:operator pos:line="6" pos:column="16">.</op:operator><name pos:line="6" pos:column="17">Core</name><op:operator pos:line="6" pos:column="21">.</op:operator><name pos:line="6" pos:column="22">Tools</name></name>
<block pos:line="7" pos:column="1">{
    <class><specifier pos:line="8" pos:column="5">public</specifier> class <name pos:line="8" pos:column="18">WordCorrector</name>
    <block pos:line="9" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="10" pos:column="9">public</specifier> <specifier pos:line="10" pos:column="16">const</specifier> <name pos:line="10" pos:column="22">int</name></type> <name pos:line="10" pos:column="26">GramNumber</name> <init pos:line="10" pos:column="37">= <expr><lit:literal type="number" pos:line="10" pos:column="39">2</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="11" pos:column="9">private</specifier> <specifier pos:line="11" pos:column="17">readonly</specifier> <name><name pos:line="11" pos:column="26">Dictionary</name><argument_list pos:line="11" pos:column="36">&lt;<argument><name pos:line="11" pos:column="37">String</name></argument>, <argument><name><name pos:line="11" pos:column="45">List</name><argument_list pos:line="11" pos:column="49">&lt;<argument><name pos:line="11" pos:column="50">String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="11" pos:column="59">indexedWords</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="12" pos:column="9">private</specifier> <specifier pos:line="12" pos:column="17">readonly</specifier> <name pos:line="12" pos:column="26">object</name></type> <name pos:line="12" pos:column="33">locker</name> <init pos:line="12" pos:column="40">= <expr><op:operator pos:line="12" pos:column="42">new</op:operator> <call><name pos:line="12" pos:column="46">object</name><argument_list pos:line="12" pos:column="52">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <constructor><specifier pos:line="14" pos:column="9">public</specifier> <name pos:line="14" pos:column="16">WordCorrector</name><parameter_list pos:line="14" pos:column="29">()</parameter_list>
        <block pos:line="15" pos:column="9">{
            <expr_stmt><expr><name pos:line="16" pos:column="13">indexedWords</name> <op:operator pos:line="16" pos:column="26">=</op:operator> <op:operator pos:line="16" pos:column="28">new</op:operator> <call><name><name pos:line="16" pos:column="32">Dictionary</name><argument_list pos:line="16" pos:column="42">&lt;<argument><name pos:line="16" pos:column="43">string</name></argument>, <argument><name><name pos:line="16" pos:column="51">List</name><argument_list pos:line="16" pos:column="55">&lt;<argument><name pos:line="16" pos:column="56">string</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list pos:line="16" pos:column="64">()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier pos:line="19" pos:column="9">public</specifier> <name pos:line="19" pos:column="16">void</name></type> <name pos:line="19" pos:column="21">AddWords</name><parameter_list pos:line="19" pos:column="29">(<param><decl><type><name><name pos:line="19" pos:column="30">IEnumerable</name><argument_list pos:line="19" pos:column="41">&lt;<argument><name pos:line="19" pos:column="42">String</name></argument>&gt;</argument_list></name></type> <name pos:line="19" pos:column="50">words</name></decl></param>)</parameter_list>
        <block pos:line="20" pos:column="9">{
            <lock pos:line="21" pos:column="13">lock (<expr><name pos:line="21" pos:column="19">locker</name></expr>)
            <block pos:line="22" pos:column="13">{
                <foreach pos:line="23" pos:column="17">foreach (<init><decl><type><name pos:line="23" pos:column="26">var</name></type> <name pos:line="23" pos:column="30">word</name> <range pos:line="23" pos:column="35">in <expr><name pos:line="23" pos:column="38">words</name></expr></range></decl></init>)
                <block pos:line="24" pos:column="17">{
                    <expr_stmt><expr><call><name pos:line="25" pos:column="21">AddWord</name><argument_list pos:line="25" pos:column="28">(<argument><expr><name pos:line="25" pos:column="29">word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>
            }</block></lock>
        }</block></function>

        <function><type><specifier pos:line="30" pos:column="9">public</specifier> <name><name pos:line="30" pos:column="16">IEnumerable</name><argument_list pos:line="30" pos:column="27">&lt;<argument><name pos:line="30" pos:column="28">string</name></argument>&gt;</argument_list></name></type> <name pos:line="30" pos:column="36">FindSimilarWords</name><parameter_list pos:line="30" pos:column="52">(<param><decl><type><name pos:line="30" pos:column="53">String</name></type> <name pos:line="30" pos:column="60">word</name></decl></param>)</parameter_list>
        <block pos:line="31" pos:column="9">{
            <expr_stmt><expr><name pos:line="32" pos:column="13">word</name> <op:operator pos:line="32" pos:column="18">=</op:operator> <call><name><name pos:line="32" pos:column="20">word</name><op:operator pos:line="32" pos:column="24">.</op:operator><name pos:line="32" pos:column="25">ToLower</name></name><argument_list pos:line="32" pos:column="32">()</argument_list></call></expr>;</expr_stmt>
            <lock pos:line="33" pos:column="13">lock (<expr><name pos:line="33" pos:column="19">locker</name></expr>)
            <block pos:line="34" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="35" pos:column="17">var</name></type> <name pos:line="35" pos:column="21">results</name> <init pos:line="35" pos:column="29">= <expr><op:operator pos:line="35" pos:column="31">new</op:operator> <call><name><name pos:line="35" pos:column="35">Dictionary</name><argument_list pos:line="35" pos:column="45">&lt;<argument><name pos:line="35" pos:column="46">String</name></argument>, <argument><name pos:line="35" pos:column="54">int</name></argument>&gt;</argument_list></name><argument_list pos:line="35" pos:column="58">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="36" pos:column="17">var</name></type> <name pos:line="36" pos:column="21">grams</name> <init pos:line="36" pos:column="27">= <expr><call><name pos:line="36" pos:column="29">GetNGrams</name><argument_list pos:line="36" pos:column="38">(<argument><expr><name pos:line="36" pos:column="39">word</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <foreach pos:line="37" pos:column="17">foreach (<init><decl><type><name pos:line="37" pos:column="26">var</name></type> <name pos:line="37" pos:column="30">gra</name> <range pos:line="37" pos:column="34">in <expr><name pos:line="37" pos:column="37">grams</name></expr></range></decl></init>)
                <block pos:line="38" pos:column="17">{
                    <if pos:line="39" pos:column="21">if <condition pos:line="39" pos:column="24">(<expr><call><name><name pos:line="39" pos:column="25">indexedWords</name><op:operator pos:line="39" pos:column="37">.</op:operator><name pos:line="39" pos:column="38">ContainsKey</name></name><argument_list pos:line="39" pos:column="49">(<argument><expr><name pos:line="39" pos:column="50">gra</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="39" pos:column="55">
                    <block pos:line="40" pos:column="21">{
                        <decl_stmt><decl><type><name pos:line="41" pos:column="25">var</name></type> <name pos:line="41" pos:column="29">correctWords</name> <init pos:line="41" pos:column="42">= <expr><name><name pos:line="41" pos:column="44">indexedWords</name><index pos:line="41" pos:column="56">[<expr><name pos:line="41" pos:column="57">gra</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                        <foreach pos:line="42" pos:column="25">foreach (<init><decl><type><name pos:line="42" pos:column="34">var</name></type> <name pos:line="42" pos:column="38">cw</name> <range pos:line="42" pos:column="41">in <expr><name pos:line="42" pos:column="44">correctWords</name></expr></range></decl></init>)
                        <block pos:line="43" pos:column="25">{
                            <if pos:line="44" pos:column="29">if <condition pos:line="44" pos:column="32">(<expr><op:operator pos:line="44" pos:column="33">!</op:operator><call><name><name pos:line="44" pos:column="34">results</name><op:operator pos:line="44" pos:column="41">.</op:operator><name pos:line="44" pos:column="42">ContainsKey</name></name><argument_list pos:line="44" pos:column="53">(<argument><expr><name pos:line="44" pos:column="54">cw</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="44" pos:column="58">
                                <expr_stmt><expr><name><name pos:line="45" pos:column="33">results</name><index pos:line="45" pos:column="40">[<expr><name pos:line="45" pos:column="41">cw</name></expr>]</index></name> <op:operator pos:line="45" pos:column="45">=</op:operator> <lit:literal type="number" pos:line="45" pos:column="47">0</lit:literal></expr>;</expr_stmt></then></if>
                            <expr_stmt><expr><name><name pos:line="46" pos:column="29">results</name><index pos:line="46" pos:column="36">[<expr><name pos:line="46" pos:column="37">cw</name></expr>]</index></name><op:operator pos:line="46" pos:column="40">++</op:operator></expr>;</expr_stmt>
                        }</block></foreach>
                    }</block></then></if>
                }</block></foreach>
                <return pos:line="50" pos:column="17">return <expr><call><name pos:line="50" pos:column="24">RankSimilarWords</name><argument_list pos:line="50" pos:column="40">(<argument><expr><name pos:line="50" pos:column="41">results</name></expr></argument>, <argument><expr><name pos:line="50" pos:column="50">word</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></lock>
        }</block></function>

        <function><type><specifier pos:line="54" pos:column="9">private</specifier> <name pos:line="54" pos:column="17">String</name><index pos:line="54" pos:column="23">[]</index></type> <name pos:line="54" pos:column="26">RankSimilarWords</name><parameter_list pos:line="54" pos:column="42">(<param><decl><type><name><name pos:line="54" pos:column="43">Dictionary</name><argument_list pos:line="54" pos:column="53">&lt;<argument><name pos:line="54" pos:column="54">String</name></argument>, <argument><name pos:line="54" pos:column="62">int</name></argument>&gt;</argument_list></name></type> <name pos:line="54" pos:column="67">results</name></decl></param>, <param><decl><type><name pos:line="54" pos:column="76">string</name></type> <name pos:line="54" pos:column="83">originalWord</name></decl></param>)</parameter_list>
        <block pos:line="55" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="56" pos:column="13">var</name></type> <name pos:line="56" pos:column="17">de</name> <init pos:line="56" pos:column="20">= <expr><op:operator pos:line="56" pos:column="22">new</op:operator> <call><name pos:line="56" pos:column="26">Levenshtein</name><argument_list pos:line="56" pos:column="37">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="57" pos:column="13">var</name></type> <name pos:line="57" pos:column="17">correctionWords</name> <init pos:line="57" pos:column="33">= <expr><call><name><name pos:line="57" pos:column="35">results</name><op:operator pos:line="57" pos:column="42">.</op:operator><name pos:line="57" pos:column="43">OrderByDescending</name></name><argument_list pos:line="57" pos:column="60">(<argument><expr><lambda><name pos:line="57" pos:column="61">r</name> <op:operator pos:line="57" pos:column="63">=&gt;</op:operator> <name><name pos:line="57" pos:column="66">r</name><op:operator pos:line="57" pos:column="67">.</op:operator><name pos:line="57" pos:column="68">Value</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="57" pos:column="74">.</op:operator><call><name pos:line="57" pos:column="75">Select</name><argument_list pos:line="57" pos:column="81">(<argument><expr><lambda><name pos:line="57" pos:column="82">r</name> <op:operator pos:line="57" pos:column="84">=&gt;</op:operator> <name><name pos:line="57" pos:column="87">r</name><op:operator pos:line="57" pos:column="88">.</op:operator><name pos:line="57" pos:column="89">Key</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="57" pos:column="93">.</op:operator><call><name pos:line="57" pos:column="94">TrimIfOverlyLong</name><argument_list pos:line="57" pos:column="110">(<argument><expr><lit:literal type="number" pos:line="57" pos:column="111">10</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="58" pos:column="13">return <expr><call><name><name pos:line="58" pos:column="20">correctionWords</name><op:operator pos:line="58" pos:column="35">.</op:operator><name pos:line="58" pos:column="36">OrderBy</name></name><argument_list pos:line="58" pos:column="43">(<argument><expr><lambda><name pos:line="58" pos:column="44">w</name> <op:operator pos:line="58" pos:column="46">=&gt;</op:operator> <call><name><name pos:line="58" pos:column="49">de</name><op:operator pos:line="58" pos:column="51">.</op:operator><name pos:line="58" pos:column="52">LD</name></name><argument_list pos:line="58" pos:column="54">(<argument><expr><name pos:line="58" pos:column="55">w</name></expr></argument>, <argument><expr><name pos:line="58" pos:column="58">originalWord</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="58" pos:column="72">.</op:operator><call><name pos:line="58" pos:column="73">ToArray</name><argument_list pos:line="58" pos:column="80">()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="61" pos:column="9">private</specifier> <name pos:line="61" pos:column="17">void</name></type> <name pos:line="61" pos:column="22">AddWord</name><parameter_list pos:line="61" pos:column="29">(<param><decl><type><name pos:line="61" pos:column="30">String</name></type> <name pos:line="61" pos:column="37">word</name></decl></param>)</parameter_list>
        <block pos:line="62" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="63" pos:column="13">var</name></type> <name pos:line="63" pos:column="17">keys</name> <init pos:line="63" pos:column="22">= <expr><call><name pos:line="63" pos:column="24">GetNGrams</name><argument_list pos:line="63" pos:column="33">(<argument><expr><name pos:line="63" pos:column="34">word</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="64" pos:column="13">foreach (<init><decl><type><name pos:line="64" pos:column="22">var</name></type> <name pos:line="64" pos:column="26">key</name> <range pos:line="64" pos:column="30">in <expr><name pos:line="64" pos:column="33">keys</name></expr></range></decl></init>)
            <block pos:line="65" pos:column="13">{
                <if pos:line="66" pos:column="17">if<condition pos:line="66" pos:column="19">(<expr><op:operator pos:line="66" pos:column="20">!</op:operator><call><name><name pos:line="66" pos:column="21">indexedWords</name><op:operator pos:line="66" pos:column="33">.</op:operator><name pos:line="66" pos:column="34">ContainsKey</name></name><argument_list pos:line="66" pos:column="45">(<argument><expr><name pos:line="66" pos:column="46">key</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="66" pos:column="51">
                    <expr_stmt><expr><call><name><name pos:line="67" pos:column="21">indexedWords</name><op:operator pos:line="67" pos:column="33">.</op:operator><name pos:line="67" pos:column="34">Add</name></name><argument_list pos:line="67" pos:column="37">(<argument><expr><name pos:line="67" pos:column="38">key</name></expr></argument>, <argument><expr><op:operator pos:line="67" pos:column="43">new</op:operator> <call><name><name pos:line="67" pos:column="47">List</name><argument_list pos:line="67" pos:column="51">&lt;<argument><name pos:line="67" pos:column="52">string</name></argument>&gt;</argument_list></name><argument_list pos:line="67" pos:column="59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                <if pos:line="68" pos:column="17">if<condition pos:line="68" pos:column="19">(<expr><name><name pos:line="68" pos:column="20">indexedWords</name><index pos:line="68" pos:column="32">[<expr><name pos:line="68" pos:column="33">key</name></expr>]</index></name><op:operator pos:line="68" pos:column="37">.</op:operator><call><name pos:line="68" pos:column="38">Contains</name><argument_list pos:line="68" pos:column="46">(<argument><expr><name pos:line="68" pos:column="47">word</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="68" pos:column="53">
                    <return pos:line="69" pos:column="21">return;</return></then></if>
                <expr_stmt><expr><name><name pos:line="70" pos:column="17">indexedWords</name><index pos:line="70" pos:column="29">[<expr><name pos:line="70" pos:column="30">key</name></expr>]</index></name><op:operator pos:line="70" pos:column="34">.</op:operator><call><name pos:line="70" pos:column="35">Add</name><argument_list pos:line="70" pos:column="38">(<argument><expr><name pos:line="70" pos:column="39">word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>

        <function><type><specifier pos:line="74" pos:column="9">private</specifier> <name><name pos:line="74" pos:column="17">IEnumerable</name><argument_list pos:line="74" pos:column="28">&lt;<argument><name pos:line="74" pos:column="29">string</name></argument>&gt;</argument_list></name></type> <name pos:line="74" pos:column="37">GetNGrams</name><parameter_list pos:line="74" pos:column="46">(<param><decl><type><name pos:line="74" pos:column="47">String</name></type> <name pos:line="74" pos:column="54">word</name></decl></param>)</parameter_list>
        <block pos:line="75" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="76" pos:column="13">var</name></type> <name pos:line="76" pos:column="17">list</name> <init pos:line="76" pos:column="22">= <expr><op:operator pos:line="76" pos:column="24">new</op:operator> <call><name><name pos:line="76" pos:column="28">List</name><argument_list pos:line="76" pos:column="32">&lt;<argument><name pos:line="76" pos:column="33">String</name></argument>&gt;</argument_list></name><argument_list pos:line="76" pos:column="40">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for pos:line="77" pos:column="13">for (<init><decl><type><name pos:line="77" pos:column="18">int</name></type> <name pos:line="77" pos:column="22">start</name> <init pos:line="77" pos:column="28">= <expr><lit:literal type="number" pos:line="77" pos:column="30">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="77" pos:column="33">start</name> <op:operator pos:line="77" pos:column="39">&lt;=</op:operator> <name><name pos:line="77" pos:column="42">word</name><op:operator pos:line="77" pos:column="46">.</op:operator><name pos:line="77" pos:column="47">Length</name></name> <op:operator pos:line="77" pos:column="54">-</op:operator> <name pos:line="77" pos:column="56">GramNumber</name></expr>;</condition> <incr><expr><name pos:line="77" pos:column="68">start</name> <op:operator pos:line="77" pos:column="74">++</op:operator></expr></incr> )
            <block pos:line="78" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="79" pos:column="17">var</name></type> <name pos:line="79" pos:column="21">gram</name> <init pos:line="79" pos:column="26">= <expr><call><name><name pos:line="79" pos:column="28">word</name><op:operator pos:line="79" pos:column="32">.</op:operator><name pos:line="79" pos:column="33">Substring</name></name><argument_list pos:line="79" pos:column="42">(<argument><expr><name pos:line="79" pos:column="43">start</name></expr></argument>, <argument><expr><name pos:line="79" pos:column="50">GramNumber</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
                <if pos:line="80" pos:column="17">if<condition pos:line="80" pos:column="19">(<expr><op:operator pos:line="80" pos:column="20">!</op:operator><call><name><name pos:line="80" pos:column="21">list</name><op:operator pos:line="80" pos:column="25">.</op:operator><name pos:line="80" pos:column="26">Contains</name></name><argument_list pos:line="80" pos:column="34">(<argument><expr><name pos:line="80" pos:column="35">gram</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="80" pos:column="41">
                    <expr_stmt><expr><call><name><name pos:line="81" pos:column="21">list</name><op:operator pos:line="81" pos:column="25">.</op:operator><name pos:line="81" pos:column="26">Add</name></name><argument_list pos:line="81" pos:column="29">(<argument><expr><name pos:line="81" pos:column="30">gram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></for>
            <return pos:line="83" pos:column="13">return <expr><name pos:line="83" pos:column="20">list</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
