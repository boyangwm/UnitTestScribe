<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Core\Core\Tools\DictionaryBasedSplitter.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Collections</name><op:operator pos:line="3" pos:column="25">.</op:operator><name pos:line="3" pos:column="26">ObjectModel</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">IO</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Linq</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">System</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">Text</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">System</name><op:operator pos:line="7" pos:column="13">.</op:operator><name pos:line="7" pos:column="14">Text</name><op:operator pos:line="7" pos:column="18">.</op:operator><name pos:line="7" pos:column="19">RegularExpressions</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Sando</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">ExtensionContracts</name><op:operator pos:line="8" pos:column="31">.</op:operator><name pos:line="8" pos:column="32">ProgramElementContracts</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">Sando</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">ExtensionContracts</name><op:operator pos:line="9" pos:column="31">.</op:operator><name pos:line="9" pos:column="32">SplitterContracts</name></name>;</using>

<namespace pos:line="11" pos:column="1">namespace <name><name pos:line="11" pos:column="11">Sando</name><op:operator pos:line="11" pos:column="16">.</op:operator><name pos:line="11" pos:column="17">Core</name><op:operator pos:line="11" pos:column="21">.</op:operator><name pos:line="11" pos:column="22">Tools</name></name>
<block pos:line="12" pos:column="1">{
    <enum><specifier pos:line="13" pos:column="5">public</specifier> enum <macro><name pos:line="13" pos:column="17">DictionaryOption</name></macro>
    <block pos:line="14" pos:column="5">{
        <decl><name pos:line="15" pos:column="9">IncludingStemming</name></decl><op:operator pos:line="15" pos:column="26">,</op:operator>
        <decl><name pos:line="16" pos:column="9">NoStemming</name></decl>
    }</block>

    <decl pos:line="19" pos:column="5">public delegate <name pos:line="19" pos:column="21">void</name> <name pos:line="19" pos:column="26">NewWordsAdded</name><argument_list pos:line="19" pos:column="39">(<argument><expr><name><name pos:line="19" pos:column="40">IEnumerable</name><argument_list pos:line="19" pos:column="51">&lt;<argument><name pos:line="19" pos:column="52">String</name></argument>&gt;</argument_list></name> <name pos:line="19" pos:column="60">words</name></expr></argument>)</argument_list></decl>;</enum>
   
    <comment type="line" pos:line="21" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="22" pos:column="5">/// This class keeps records of used words in the code under searching. Also, it can greedily </comment>
    <comment type="line" pos:line="23" pos:column="5">/// split a given string by matching words in the dictionary. </comment>
    <comment type="line" pos:line="24" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="25" pos:column="5">public</specifier> <specifier pos:line="25" pos:column="12">partial</specifier> class <name pos:line="25" pos:column="26">DictionaryBasedSplitter</name> <super pos:line="25" pos:column="50">: <name pos:line="25" pos:column="52">IWordSplitter</name>, <name pos:line="25" pos:column="67">IWordCoOccurrenceMatrix</name></super>
    <block pos:line="26" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="27" pos:column="9">private</specifier> <specifier pos:line="27" pos:column="17">readonly</specifier> <name pos:line="27" pos:column="26">FileDictionary</name></type> <name pos:line="27" pos:column="41">dictionary</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="28" pos:column="9">private</specifier> <specifier pos:line="28" pos:column="17">readonly</specifier> <name pos:line="28" pos:column="26">SparseCoOccurrenceMatrix</name></type> <name pos:line="28" pos:column="51">matrix</name></decl>;</decl_stmt>
        
        <constructor><specifier pos:line="30" pos:column="9">public</specifier> <name pos:line="30" pos:column="16">DictionaryBasedSplitter</name><parameter_list pos:line="30" pos:column="39">()</parameter_list>
        <block pos:line="31" pos:column="9">{
            <expr_stmt><expr><name><name pos:line="32" pos:column="13">this</name><op:operator pos:line="32" pos:column="17">.</op:operator><name pos:line="32" pos:column="18">dictionary</name></name> <op:operator pos:line="32" pos:column="29">=</op:operator> <op:operator pos:line="32" pos:column="31">new</op:operator> <call><name pos:line="32" pos:column="35">FileDictionary</name><argument_list pos:line="32" pos:column="49">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="33" pos:column="13">this</name><op:operator pos:line="33" pos:column="17">.</op:operator><name pos:line="33" pos:column="18">matrix</name></name> <op:operator pos:line="33" pos:column="25">=</op:operator> <op:operator pos:line="33" pos:column="27">new</op:operator> <call><name pos:line="33" pos:column="31">SparseCoOccurrenceMatrix</name><argument_list pos:line="33" pos:column="55">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="34" pos:column="13">this</name><op:operator pos:line="34" pos:column="17">.</op:operator><name pos:line="34" pos:column="18">dictionary</name><op:operator pos:line="34" pos:column="28">.</op:operator><name pos:line="34" pos:column="29">rawWordsEvent</name></name> <op:operator pos:line="34" pos:column="43">+=</op:operator> <name><name pos:line="34" pos:column="46">matrix</name><op:operator pos:line="34" pos:column="52">.</op:operator><name pos:line="34" pos:column="53">HandleCoOcurrentWordsAsync</name></name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier pos:line="37" pos:column="9">public</specifier> <name pos:line="37" pos:column="16">void</name></type> <name pos:line="37" pos:column="21">Initialize</name><parameter_list pos:line="37" pos:column="31">(<param><decl><type><name pos:line="37" pos:column="32">String</name></type> <name pos:line="37" pos:column="39">directory</name></decl></param>)</parameter_list>
        <block pos:line="38" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="39" pos:column="13">dictionary</name><op:operator pos:line="39" pos:column="23">.</op:operator><name pos:line="39" pos:column="24">Initialize</name></name><argument_list pos:line="39" pos:column="34">(<argument><expr><name pos:line="39" pos:column="35">directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="40" pos:column="13">matrix</name><op:operator pos:line="40" pos:column="19">.</op:operator><name pos:line="40" pos:column="20">Initialize</name></name><argument_list pos:line="40" pos:column="30">(<argument><expr><name pos:line="40" pos:column="31">directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="43" pos:column="9">public</specifier> <name><name pos:line="43" pos:column="16">Dictionary</name><argument_list pos:line="43" pos:column="26">&lt;<argument><name pos:line="43" pos:column="27">string</name></argument>, <argument><name pos:line="43" pos:column="35">int</name></argument>&gt;</argument_list></name></type> <name pos:line="43" pos:column="40">GetCoOccurredWordsAndCount</name><parameter_list pos:line="43" pos:column="66">(<param><decl><type><name pos:line="43" pos:column="67">string</name></type> <name pos:line="43" pos:column="74">word</name></decl></param>)</parameter_list>
        <block pos:line="44" pos:column="9">{
            <return pos:line="45" pos:column="13">return <expr><call><name><name pos:line="45" pos:column="20">matrix</name><op:operator pos:line="45" pos:column="26">.</op:operator><name pos:line="45" pos:column="27">GetCoOccurredWordsAndCount</name></name><argument_list pos:line="45" pos:column="53">(<argument><expr><name pos:line="45" pos:column="54">word</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="48" pos:column="9">public</specifier> <name pos:line="48" pos:column="16">void</name></type> <name pos:line="48" pos:column="21">AddWords</name><parameter_list pos:line="48" pos:column="29">(<param><decl><type><name><name pos:line="48" pos:column="30">IEnumerable</name><argument_list pos:line="48" pos:column="41">&lt;<argument><name pos:line="48" pos:column="42">String</name></argument>&gt;</argument_list></name></type> <name pos:line="48" pos:column="50">words</name></decl></param>)</parameter_list>
        <block pos:line="49" pos:column="9">{
            <expr_stmt><expr><name pos:line="50" pos:column="13">words</name> <op:operator pos:line="50" pos:column="19">=</op:operator> <call><name><name pos:line="50" pos:column="21">words</name><op:operator pos:line="50" pos:column="26">.</op:operator><name pos:line="50" pos:column="27">ToList</name></name><argument_list pos:line="50" pos:column="33">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="51" pos:column="13">dictionary</name><op:operator pos:line="51" pos:column="23">.</op:operator><name pos:line="51" pos:column="24">AddWords</name></name><argument_list pos:line="51" pos:column="32">(<argument><expr><name pos:line="51" pos:column="33">words</name></expr></argument>, <argument><expr><name><name pos:line="51" pos:column="40">DictionaryOption</name><op:operator pos:line="51" pos:column="56">.</op:operator><name pos:line="51" pos:column="57">IncludingStemming</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>


        <function><type><specifier pos:line="55" pos:column="9">public</specifier> <name><name pos:line="55" pos:column="16">Dictionary</name><argument_list pos:line="55" pos:column="26">&lt;<argument><name pos:line="55" pos:column="27">String</name></argument>, <argument><name pos:line="55" pos:column="35">int</name></argument>&gt;</argument_list></name></type> <name pos:line="55" pos:column="40">GetAllWordsAndCount</name><parameter_list pos:line="55" pos:column="59">()</parameter_list>
        <block pos:line="56" pos:column="9">{
            <return pos:line="57" pos:column="13">return <expr><call><name><name pos:line="57" pos:column="20">matrix</name><op:operator pos:line="57" pos:column="26">.</op:operator><name pos:line="57" pos:column="27">GetAllWordsAndCount</name></name><argument_list pos:line="57" pos:column="46">()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="60" pos:column="9">public</specifier> <name><name pos:line="60" pos:column="16">IEnumerable</name><argument_list pos:line="60" pos:column="27">&lt;<argument><name pos:line="60" pos:column="28">IMatrixEntry</name></argument>&gt;</argument_list></name></type> <name pos:line="60" pos:column="42">GetEntries</name><parameter_list pos:line="60" pos:column="52">(<param><decl><type><name><name pos:line="60" pos:column="53">Predicate</name><argument_list pos:line="60" pos:column="62">&lt;<argument><name pos:line="60" pos:column="63">IMatrixEntry</name></argument>&gt;</argument_list></name></type> <name pos:line="60" pos:column="77">predicate</name></decl></param>)</parameter_list>
        <block pos:line="61" pos:column="9">{
            <return pos:line="62" pos:column="13">return <expr><call><name><name pos:line="62" pos:column="20">matrix</name><op:operator pos:line="62" pos:column="26">.</op:operator><name pos:line="62" pos:column="27">GetEntries</name></name><argument_list pos:line="62" pos:column="37">(<argument><expr><name pos:line="62" pos:column="38">predicate</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="65" pos:column="9">public</specifier> <name pos:line="65" pos:column="16">void</name></type> <name pos:line="65" pos:column="21">UpdateProgramElement</name><parameter_list pos:line="65" pos:column="41">(<param><decl><type><name><name pos:line="65" pos:column="42">ReadOnlyCollection</name><argument_list pos:line="65" pos:column="60">&lt;<argument><name pos:line="65" pos:column="61">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="65" pos:column="77">elements</name></decl></param>)</parameter_list>
        <block pos:line="66" pos:column="9">{
            <foreach pos:line="67" pos:column="13">foreach (<init><decl><type><name pos:line="67" pos:column="22">ProgramElement</name></type> <name pos:line="67" pos:column="37">element</name> <range pos:line="67" pos:column="45">in <expr><name pos:line="67" pos:column="48">elements</name></expr></range></decl></init>)
            <block pos:line="68" pos:column="13">{
                <expr_stmt><expr><call><name pos:line="69" pos:column="17">AddWords</name><argument_list pos:line="69" pos:column="25">(<argument><expr><call><name><name pos:line="69" pos:column="26">DictionaryHelper</name><op:operator pos:line="69" pos:column="42">.</op:operator><name pos:line="69" pos:column="43">ExtractElementWords</name></name><argument_list pos:line="69" pos:column="62">(<argument><expr><name pos:line="69" pos:column="63">element</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>


        <function><type><specifier pos:line="74" pos:column="9">public</specifier> <name pos:line="74" pos:column="16">Boolean</name></type> <name pos:line="74" pos:column="24">DoesWordExist</name><parameter_list pos:line="74" pos:column="37">(<param><decl><type><name pos:line="74" pos:column="38">String</name></type> <name pos:line="74" pos:column="45">word</name></decl></param>, <param><decl><type><name pos:line="74" pos:column="51">DictionaryOption</name></type> <name pos:line="74" pos:column="68">option</name></decl></param>)</parameter_list>
        <block pos:line="75" pos:column="9">{
            <expr_stmt><expr><name pos:line="76" pos:column="13">word</name> <op:operator pos:line="76" pos:column="18">=</op:operator> <call><name><name pos:line="76" pos:column="20">word</name><op:operator pos:line="76" pos:column="24">.</op:operator><name pos:line="76" pos:column="25">Trim</name></name><argument_list pos:line="76" pos:column="29">()</argument_list></call></expr>;</expr_stmt>   
            <return pos:line="77" pos:column="13">return <expr><call><name><name pos:line="77" pos:column="20">word</name><op:operator pos:line="77" pos:column="24">.</op:operator><name pos:line="77" pos:column="25">Equals</name></name><argument_list pos:line="77" pos:column="31">(<argument><expr><name><name pos:line="77" pos:column="32">String</name><op:operator pos:line="77" pos:column="38">.</op:operator><name pos:line="77" pos:column="39">Empty</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="77" pos:column="46">||</op:operator> <call><name><name pos:line="77" pos:column="49">dictionary</name><op:operator pos:line="77" pos:column="59">.</op:operator><name pos:line="77" pos:column="60">DoesWordExist</name></name><argument_list pos:line="77" pos:column="73">(<argument><expr><name pos:line="77" pos:column="74">word</name></expr></argument>, <argument><expr><name pos:line="77" pos:column="80">option</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="80" pos:column="9">private</specifier> <name pos:line="80" pos:column="17">string</name></type> <name pos:line="80" pos:column="24">RemoveUnderScore</name><parameter_list pos:line="80" pos:column="40">(<param><decl><type><name pos:line="80" pos:column="41">string</name></type> <name pos:line="80" pos:column="48">text</name></decl></param>)</parameter_list>
        <block pos:line="81" pos:column="9">{
            <return pos:line="82" pos:column="13">return <expr><call><name><name pos:line="82" pos:column="20">text</name><op:operator pos:line="82" pos:column="24">.</op:operator><name pos:line="82" pos:column="25">Replace</name></name><argument_list pos:line="82" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="82" pos:column="33">"_"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="82" pos:column="38">""</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>


        <function><type><specifier pos:line="86" pos:column="9">public</specifier> <name pos:line="86" pos:column="16">string</name><index pos:line="86" pos:column="22">[]</index></type> <name pos:line="86" pos:column="25">ExtractWords</name> <parameter_list pos:line="86" pos:column="38">(<param><decl><type><name pos:line="86" pos:column="39">string</name></type> <name pos:line="86" pos:column="46">text</name></decl></param>)</parameter_list>
        <block pos:line="87" pos:column="9">{
            <if pos:line="88" pos:column="13">if <condition pos:line="88" pos:column="16">(<expr><call><name><name pos:line="88" pos:column="17">text</name><op:operator pos:line="88" pos:column="21">.</op:operator><name pos:line="88" pos:column="22">IsWordQuoted</name></name><argument_list pos:line="88" pos:column="34">()</argument_list></call> <op:operator pos:line="88" pos:column="37">||</op:operator> <call><name><name pos:line="88" pos:column="40">text</name><op:operator pos:line="88" pos:column="44">.</op:operator><name pos:line="88" pos:column="45">IsWordFlag</name></name><argument_list pos:line="88" pos:column="55">()</argument_list></call> <op:operator pos:line="88" pos:column="58">||</op:operator> 
                <call><name pos:line="89" pos:column="17">DoesWordExist</name><argument_list pos:line="89" pos:column="30">(<argument><expr><name pos:line="89" pos:column="31">text</name></expr></argument>, <argument><expr><name><name pos:line="89" pos:column="37">DictionaryOption</name><op:operator pos:line="89" pos:column="53">.</op:operator><name pos:line="89" pos:column="54">IncludingStemming</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="89" pos:column="73">
            <block pos:line="90" pos:column="13">{
                <return pos:line="91" pos:column="17">return <expr><op:operator pos:line="91" pos:column="24">new</op:operator> <name><name pos:line="91" pos:column="28">string</name><index pos:line="91" pos:column="34">[]</index></name><block pos:line="91" pos:column="36">{<expr><name pos:line="91" pos:column="37">text</name></expr>}</block></expr>;</return>    
            }</block></then></if>
            <expr_stmt><expr><name pos:line="93" pos:column="13">text</name> <op:operator pos:line="93" pos:column="18">=</op:operator> <call><name pos:line="93" pos:column="20">RemoveUnderScore</name><argument_list pos:line="93" pos:column="36">(<argument><expr><name pos:line="93" pos:column="37">text</name></expr></argument>)</argument_list></call><op:operator pos:line="93" pos:column="42">.</op:operator><call><name pos:line="93" pos:column="43">ToLower</name><argument_list pos:line="93" pos:column="50">()</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="95" pos:column="13">var</name></type> <name pos:line="95" pos:column="17">allSplits</name> <init pos:line="95" pos:column="27">= <expr><op:operator pos:line="95" pos:column="29">new</op:operator> <call><name><name pos:line="95" pos:column="33">List</name><argument_list pos:line="95" pos:column="37">&lt;<argument><name pos:line="95" pos:column="38">String</name></argument>&gt;</argument_list></name><argument_list pos:line="95" pos:column="45">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="96" pos:column="13">var</name></type> <name pos:line="96" pos:column="17">starts</name> <init pos:line="96" pos:column="24">= <expr><call><name><name pos:line="96" pos:column="26">DictionaryHelper</name><op:operator pos:line="96" pos:column="42">.</op:operator><name pos:line="96" pos:column="43">GetQuoteStarts</name></name><argument_list pos:line="96" pos:column="57">(<argument><expr><name pos:line="96" pos:column="58">text</name></expr></argument>)</argument_list></call><op:operator pos:line="96" pos:column="63">.</op:operator><call><name pos:line="96" pos:column="64">ToList</name><argument_list pos:line="96" pos:column="70">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="97" pos:column="13">starts</name><op:operator pos:line="97" pos:column="19">.</op:operator><name pos:line="97" pos:column="20">Add</name></name><argument_list pos:line="97" pos:column="23">(<argument><expr><name><name pos:line="97" pos:column="24">text</name><op:operator pos:line="97" pos:column="28">.</op:operator><name pos:line="97" pos:column="29">Length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="98" pos:column="13">var</name></type> <name pos:line="98" pos:column="17">ends</name> <init pos:line="98" pos:column="22">= <expr><call><name><name pos:line="98" pos:column="24">DictionaryHelper</name><op:operator pos:line="98" pos:column="40">.</op:operator><name pos:line="98" pos:column="41">GetQuoteEnds</name></name><argument_list pos:line="98" pos:column="53">(<argument><expr><name pos:line="98" pos:column="54">text</name></expr></argument>)</argument_list></call><op:operator pos:line="98" pos:column="59">.</op:operator><call><name pos:line="98" pos:column="60">ToList</name><argument_list pos:line="98" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="99" pos:column="13">ends</name><op:operator pos:line="99" pos:column="17">.</op:operator><name pos:line="99" pos:column="18">Insert</name></name><argument_list pos:line="99" pos:column="24">(<argument><expr><lit:literal type="number" pos:line="99" pos:column="25">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="99" pos:column="28">-</op:operator><lit:literal type="number" pos:line="99" pos:column="29">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:line="101" pos:column="13">for (<init><decl><type><name pos:line="101" pos:column="18">int</name></type> <name pos:line="101" pos:column="22">i</name> <init pos:line="101" pos:column="24">= <expr><lit:literal type="number" pos:line="101" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="101" pos:column="29">i</name> <op:operator pos:line="101" pos:column="31">&lt;</op:operator> <name><name pos:line="101" pos:column="33">starts</name><op:operator pos:line="101" pos:column="39">.</op:operator><name pos:line="101" pos:column="40">Count</name></name></expr>;</condition> <incr><expr><name pos:line="101" pos:column="47">i</name><op:operator pos:line="101" pos:column="48">++</op:operator></expr></incr>)
            <block pos:line="102" pos:column="13">{
                <comment type="line" pos:line="103" pos:column="17">// Split the non-quotes part.</comment>
                <decl_stmt><decl><type><name pos:line="104" pos:column="17">int</name></type> <name pos:line="104" pos:column="21">nonQuoteLength</name> <init pos:line="104" pos:column="36">= <expr><call><name><name pos:line="104" pos:column="38">starts</name><op:operator pos:line="104" pos:column="44">.</op:operator><name pos:line="104" pos:column="45">ElementAt</name></name><argument_list pos:line="104" pos:column="54">(<argument><expr><name pos:line="104" pos:column="55">i</name></expr></argument>)</argument_list></call> <op:operator pos:line="104" pos:column="58">-</op:operator> <call><name><name pos:line="104" pos:column="60">ends</name><op:operator pos:line="104" pos:column="64">.</op:operator><name pos:line="104" pos:column="65">ElementAt</name></name><argument_list pos:line="104" pos:column="74">(<argument><expr><name pos:line="104" pos:column="75">i</name></expr></argument>)</argument_list></call> <op:operator pos:line="104" pos:column="78">-</op:operator> <lit:literal type="number" pos:line="104" pos:column="80">1</lit:literal></expr></init></decl>;</decl_stmt>
                <if pos:line="105" pos:column="17">if <condition pos:line="105" pos:column="20">(<expr><name pos:line="105" pos:column="21">nonQuoteLength</name> <op:operator pos:line="105" pos:column="36">&gt;</op:operator> <lit:literal type="number" pos:line="105" pos:column="38">0</lit:literal></expr>)</condition><then pos:line="105" pos:column="40">
                <block pos:line="106" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="107" pos:column="21">var</name></type> <name pos:line="107" pos:column="25">nonQuote</name> <init pos:line="107" pos:column="34">= <expr><call><name><name pos:line="107" pos:column="36">text</name><op:operator pos:line="107" pos:column="40">.</op:operator><name pos:line="107" pos:column="41">Substring</name></name><argument_list pos:line="107" pos:column="50">(<argument><expr><call><name><name pos:line="107" pos:column="51">ends</name><op:operator pos:line="107" pos:column="55">.</op:operator><name pos:line="107" pos:column="56">ElementAt</name></name><argument_list pos:line="107" pos:column="65">(<argument><expr><name pos:line="107" pos:column="66">i</name></expr></argument>)</argument_list></call> <op:operator pos:line="107" pos:column="69">+</op:operator> <lit:literal type="number" pos:line="107" pos:column="71">1</lit:literal></expr></argument>, <argument><expr><name pos:line="107" pos:column="74">nonQuoteLength</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="108" pos:column="21">allSplits</name><op:operator pos:line="108" pos:column="30">.</op:operator><name pos:line="108" pos:column="31">AddRange</name></name><argument_list pos:line="108" pos:column="39">(<argument><expr><call><name pos:line="108" pos:column="40">SplitNonQuote</name><argument_list pos:line="108" pos:column="53">(<argument><expr><name pos:line="108" pos:column="54">nonQuote</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <comment type="line" pos:line="111" pos:column="17">// Keep the quotes part.</comment>
                <if pos:line="112" pos:column="17">if <condition pos:line="112" pos:column="20">(<expr><name pos:line="112" pos:column="21">i</name> <op:operator pos:line="112" pos:column="23">!=</op:operator> <name><name pos:line="112" pos:column="26">starts</name><op:operator pos:line="112" pos:column="32">.</op:operator><name pos:line="112" pos:column="33">Count</name></name> <op:operator pos:line="112" pos:column="39">-</op:operator> <lit:literal type="number" pos:line="112" pos:column="41">1</lit:literal></expr>)</condition><then pos:line="112" pos:column="43">
                <block pos:line="113" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="114" pos:column="21">var</name></type> <name pos:line="114" pos:column="25">quote</name> <init pos:line="114" pos:column="31">= <expr><call><name><name pos:line="114" pos:column="33">text</name><op:operator pos:line="114" pos:column="37">.</op:operator><name pos:line="114" pos:column="38">Substring</name></name><argument_list pos:line="114" pos:column="47">(<argument><expr><call><name><name pos:line="114" pos:column="48">starts</name><op:operator pos:line="114" pos:column="54">.</op:operator><name pos:line="114" pos:column="55">ElementAt</name></name><argument_list pos:line="114" pos:column="64">(<argument><expr><name pos:line="114" pos:column="65">i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="114" pos:column="69">ends</name><op:operator pos:line="114" pos:column="73">.</op:operator><name pos:line="114" pos:column="74">ElementAt</name></name><argument_list pos:line="114" pos:column="83">(<argument><expr><name pos:line="114" pos:column="84">i</name> <op:operator pos:line="114" pos:column="86">+</op:operator> <lit:literal type="number" pos:line="114" pos:column="88">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="114" pos:column="91">-</op:operator>
                        <call><name><name pos:line="115" pos:column="25">starts</name><op:operator pos:line="115" pos:column="31">.</op:operator><name pos:line="115" pos:column="32">ElementAt</name></name><argument_list pos:line="115" pos:column="41">(<argument><expr><name pos:line="115" pos:column="42">i</name></expr></argument>)</argument_list></call> <op:operator pos:line="115" pos:column="45">+</op:operator> <lit:literal type="number" pos:line="115" pos:column="47">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="116" pos:column="21">allSplits</name><op:operator pos:line="116" pos:column="30">.</op:operator><name pos:line="116" pos:column="31">Add</name></name><argument_list pos:line="116" pos:column="34">(<argument><expr><name pos:line="116" pos:column="35">quote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
            <return pos:line="119" pos:column="13">return <expr><call><name><name pos:line="119" pos:column="20">allSplits</name><op:operator pos:line="119" pos:column="29">.</op:operator><name pos:line="119" pos:column="30">ToArray</name></name><argument_list pos:line="119" pos:column="37">()</argument_list></call></expr>;</return>

        }</block></function>

        <function><type><specifier pos:line="123" pos:column="9">private</specifier> <name><name pos:line="123" pos:column="17">IEnumerable</name><argument_list pos:line="123" pos:column="28">&lt;<argument><name pos:line="123" pos:column="29">String</name></argument>&gt;</argument_list></name></type> <name pos:line="123" pos:column="37">SplitNonQuote</name><parameter_list pos:line="123" pos:column="50">(<param><decl><type><name pos:line="123" pos:column="51">string</name></type> <name pos:line="123" pos:column="58">text</name></decl></param>)</parameter_list>
        <block pos:line="124" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="125" pos:column="13">var</name></type> <name pos:line="125" pos:column="17">allSplits</name> <init pos:line="125" pos:column="27">= <expr><op:operator pos:line="125" pos:column="29">new</op:operator> <call><name><name pos:line="125" pos:column="33">List</name><argument_list pos:line="125" pos:column="37">&lt;<argument><name pos:line="125" pos:column="38">String</name></argument>&gt;</argument_list></name><argument_list pos:line="125" pos:column="45">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="126" pos:column="13">var</name></type> <name pos:line="126" pos:column="17">allWords</name> <init pos:line="126" pos:column="26">= <expr><call><name><name pos:line="126" pos:column="28">text</name><op:operator pos:line="126" pos:column="32">.</op:operator><name pos:line="126" pos:column="33">Split</name></name><argument_list pos:line="126" pos:column="38">(<argument><expr><name pos:line="126" pos:column="39">null</name></expr></argument>)</argument_list></call><op:operator pos:line="126" pos:column="44">.</op:operator><call><name pos:line="126" pos:column="45">Select</name><argument_list pos:line="126" pos:column="51">(<argument><expr><lambda><name pos:line="126" pos:column="52">w</name> <op:operator pos:line="126" pos:column="54">=&gt;</op:operator> <call><name><name pos:line="126" pos:column="57">w</name><op:operator pos:line="126" pos:column="58">.</op:operator><name pos:line="126" pos:column="59">ToLower</name></name><argument_list pos:line="126" pos:column="66">()</argument_list></call><op:operator pos:line="126" pos:column="68">.</op:operator><call><name pos:line="126" pos:column="69">Trim</name><argument_list pos:line="126" pos:column="73">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="126" pos:column="76">.</op:operator>
                <call><name pos:line="127" pos:column="17">Where</name><argument_list pos:line="127" pos:column="22">(<argument><expr><lambda><name pos:line="127" pos:column="23">s</name> <op:operator pos:line="127" pos:column="25">=&gt;</op:operator> <op:operator pos:line="127" pos:column="28">!</op:operator><call><name><name pos:line="127" pos:column="29">String</name><op:operator pos:line="127" pos:column="35">.</op:operator><name pos:line="127" pos:column="36">IsNullOrEmpty</name></name><argument_list pos:line="127" pos:column="49">(<argument><expr><name pos:line="127" pos:column="50">s</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="128" pos:column="13">var</name></type> <name pos:line="128" pos:column="17">strategy</name> <init pos:line="128" pos:column="26">= <expr><op:operator pos:line="128" pos:column="28">new</op:operator> <call><name pos:line="128" pos:column="32">GreedySplitStrategy</name><argument_list pos:line="128" pos:column="51">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <foreach pos:line="130" pos:column="13">foreach (<init><decl><type><name pos:line="130" pos:column="22">string</name></type> <name pos:line="130" pos:column="29">word</name> <range pos:line="130" pos:column="34">in <expr><name pos:line="130" pos:column="37">allWords</name></expr></range></decl></init>)
            <block pos:line="131" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="132" pos:column="17">allSplits</name><op:operator pos:line="132" pos:column="26">.</op:operator><name pos:line="132" pos:column="27">AddRange</name></name><argument_list pos:line="132" pos:column="35">(<argument><expr><call><name><name pos:line="132" pos:column="36">strategy</name><op:operator pos:line="132" pos:column="44">.</op:operator><name pos:line="132" pos:column="45">SplitWord</name></name><argument_list pos:line="132" pos:column="54">(<argument><expr><name pos:line="132" pos:column="55">word</name></expr></argument>, <argument><expr><lambda><name pos:line="132" pos:column="61">s</name> <op:operator pos:line="132" pos:column="63">=&gt;</op:operator> <call><name pos:line="132" pos:column="66">DoesWordExist</name><argument_list pos:line="132" pos:column="79">(<argument><expr><name pos:line="132" pos:column="80">s</name></expr></argument>, 
                    <argument><expr><name><name pos:line="133" pos:column="21">DictionaryOption</name><op:operator pos:line="133" pos:column="37">.</op:operator><name pos:line="133" pos:column="38">NoStemming</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
            <return pos:line="135" pos:column="13">return <expr><name pos:line="135" pos:column="20">allSplits</name></expr>;</return>
        }</block></function>


        <function><type><specifier pos:line="139" pos:column="9">public</specifier> <name><name pos:line="139" pos:column="16">IEnumerable</name><argument_list pos:line="139" pos:column="27">&lt;<argument><name pos:line="139" pos:column="28">string</name></argument>&gt;</argument_list></name></type> <name pos:line="139" pos:column="36">FindSimilarWords</name><parameter_list pos:line="139" pos:column="52">(<param><decl><type><name pos:line="139" pos:column="53">String</name></type> <name pos:line="139" pos:column="60">word</name></decl></param>)</parameter_list>
        <block pos:line="140" pos:column="9">{
            <return pos:line="141" pos:column="13">return <expr><call><name><name pos:line="141" pos:column="20">dictionary</name><op:operator pos:line="141" pos:column="30">.</op:operator><name pos:line="141" pos:column="31">FindSimilarWords</name></name><argument_list pos:line="141" pos:column="47">(<argument><expr><name pos:line="141" pos:column="48">word</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>


        <function><type><specifier pos:line="145" pos:column="9">public</specifier> <name pos:line="145" pos:column="16">void</name></type> <name pos:line="145" pos:column="21">Dispose</name><parameter_list pos:line="145" pos:column="28">()</parameter_list>
        <block pos:line="146" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="147" pos:column="13">dictionary</name><op:operator pos:line="147" pos:column="23">.</op:operator><name pos:line="147" pos:column="24">Dispose</name></name><argument_list pos:line="147" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="148" pos:column="13">matrix</name><op:operator pos:line="148" pos:column="19">.</op:operator><name pos:line="148" pos:column="20">Dispose</name></name><argument_list pos:line="148" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>


        <class type="interface"><specifier pos:line="152" pos:column="9">private</specifier> interface <name pos:line="152" pos:column="27">IWordSplitStrategy</name>
        <block pos:line="153" pos:column="9">{
            <function_decl><type><name><name pos:line="154" pos:column="13">IEnumerable</name><argument_list pos:line="154" pos:column="24">&lt;<argument><name pos:line="154" pos:column="25">string</name></argument>&gt;</argument_list></name></type> <name pos:line="154" pos:column="33">SplitWord</name><parameter_list pos:line="154" pos:column="42">(<param><decl><type><name pos:line="154" pos:column="43">String</name></type> <name pos:line="154" pos:column="50">word</name></decl></param>, <param><decl><type><name><name pos:line="154" pos:column="56">Predicate</name><argument_list pos:line="154" pos:column="65">&lt;<argument><name pos:line="154" pos:column="66">String</name></argument>&gt;</argument_list></name></type> <name pos:line="154" pos:column="74">doesWordExist</name></decl></param>)</parameter_list>;</function_decl>
        }</block></class>

        <class><specifier pos:line="157" pos:column="9">private</specifier> class <name pos:line="157" pos:column="23">GreedySplitStrategy</name> <super pos:line="157" pos:column="43">: <name pos:line="157" pos:column="45">IWordSplitStrategy</name></super>
        <block pos:line="158" pos:column="9">{
            <function><type><specifier pos:line="159" pos:column="13">public</specifier> <name><name pos:line="159" pos:column="20">IEnumerable</name><argument_list pos:line="159" pos:column="31">&lt;<argument><name pos:line="159" pos:column="32">string</name></argument>&gt;</argument_list></name></type> <name pos:line="159" pos:column="40">SplitWord</name><parameter_list pos:line="159" pos:column="49">(<param><decl><type><name pos:line="159" pos:column="50">string</name></type> <name pos:line="159" pos:column="57">word</name></decl></param>, <param><decl><type><name><name pos:line="159" pos:column="63">Predicate</name><argument_list pos:line="159" pos:column="72">&lt;<argument><name pos:line="159" pos:column="73">String</name></argument>&gt;</argument_list></name></type> <name pos:line="159" pos:column="81">doesWordExist</name></decl></param>)</parameter_list>
            <block pos:line="160" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="161" pos:column="17">var</name></type> <name pos:line="161" pos:column="21">allSubWords</name> <init pos:line="161" pos:column="33">= <expr><op:operator pos:line="161" pos:column="35">new</op:operator> <call><name><name pos:line="161" pos:column="39">List</name><argument_list pos:line="161" pos:column="43">&lt;<argument><name pos:line="161" pos:column="44">String</name></argument>&gt;</argument_list></name><argument_list pos:line="161" pos:column="51">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="162" pos:column="17">int</name></type> <name pos:line="162" pos:column="21">prefixLength</name></decl><op:operator pos:line="162" pos:column="33">,</op:operator> <decl><type ref="prev"/><name pos:line="162" pos:column="35">suffixLength</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="163" pos:column="17">string</name></type> <name pos:line="163" pos:column="24">prefix</name> <init pos:line="163" pos:column="31">= <expr><name pos:line="163" pos:column="33">null</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="164" pos:column="17">string</name></type> <name pos:line="164" pos:column="24">suffix</name> <init pos:line="164" pos:column="31">= <expr><name pos:line="164" pos:column="33">null</name></expr></init></decl>;</decl_stmt>

                <comment type="line" pos:line="166" pos:column="17">// Get the longest prefix.</comment>
                <for pos:line="167" pos:column="17">for (<init><expr><name pos:line="167" pos:column="22">prefixLength</name> <op:operator pos:line="167" pos:column="35">=</op:operator> <name><name pos:line="167" pos:column="37">word</name><op:operator pos:line="167" pos:column="41">.</op:operator><name pos:line="167" pos:column="42">Length</name></name></expr>;</init> <condition><expr><name pos:line="167" pos:column="50">prefixLength</name> <op:operator pos:line="167" pos:column="63">&gt;</op:operator> <lit:literal type="number" pos:line="167" pos:column="65">0</lit:literal></expr>;</condition> <incr><expr><name pos:line="167" pos:column="68">prefixLength</name><op:operator pos:line="167" pos:column="80">--</op:operator></expr></incr>)
                <block pos:line="168" pos:column="17">{
                    <expr_stmt><expr><name pos:line="169" pos:column="21">prefix</name> <op:operator pos:line="169" pos:column="28">=</op:operator> <call><name><name pos:line="169" pos:column="30">word</name><op:operator pos:line="169" pos:column="34">.</op:operator><name pos:line="169" pos:column="35">Substring</name></name><argument_list pos:line="169" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="169" pos:column="45">0</lit:literal></expr></argument>, <argument><expr><name pos:line="169" pos:column="48">prefixLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if pos:line="170" pos:column="21">if <condition pos:line="170" pos:column="24">(<expr><call><name><name pos:line="170" pos:column="25">doesWordExist</name><op:operator pos:line="170" pos:column="38">.</op:operator><name pos:line="170" pos:column="39">Invoke</name></name><argument_list pos:line="170" pos:column="45">(<argument><expr><name pos:line="170" pos:column="46">prefix</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="170" pos:column="54">
                        <break pos:line="171" pos:column="25">break;</break></then></if>
                }</block></for>

                <comment type="line" pos:line="174" pos:column="17">// Get the longest suffix.</comment>
                <for pos:line="175" pos:column="17">for (<init><expr><name pos:line="175" pos:column="22">suffixLength</name> <op:operator pos:line="175" pos:column="35">=</op:operator> <name><name pos:line="175" pos:column="37">word</name><op:operator pos:line="175" pos:column="41">.</op:operator><name pos:line="175" pos:column="42">Length</name></name> <op:operator pos:line="175" pos:column="49">-</op:operator> <name pos:line="175" pos:column="51">prefixLength</name></expr>;</init> <condition><expr><name pos:line="175" pos:column="65">suffixLength</name> <op:operator pos:line="175" pos:column="78">&gt;</op:operator> <lit:literal type="number" pos:line="175" pos:column="80">0</lit:literal></expr>;</condition> <incr><expr><name pos:line="175" pos:column="83">suffixLength</name><op:operator pos:line="175" pos:column="95">--</op:operator></expr></incr>)
                <block pos:line="176" pos:column="17">{
                    <expr_stmt><expr><name pos:line="177" pos:column="21">suffix</name> <op:operator pos:line="177" pos:column="28">=</op:operator> <call><name><name pos:line="177" pos:column="30">word</name><op:operator pos:line="177" pos:column="34">.</op:operator><name pos:line="177" pos:column="35">Substring</name></name><argument_list pos:line="177" pos:column="44">(<argument><expr><name><name pos:line="177" pos:column="45">word</name><op:operator pos:line="177" pos:column="49">.</op:operator><name pos:line="177" pos:column="50">Length</name></name> <op:operator pos:line="177" pos:column="57">-</op:operator> <name pos:line="177" pos:column="59">suffixLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if pos:line="178" pos:column="21">if<condition pos:line="178" pos:column="23">(<expr><call><name><name pos:line="178" pos:column="24">doesWordExist</name><op:operator pos:line="178" pos:column="37">.</op:operator><name pos:line="178" pos:column="38">Invoke</name></name><argument_list pos:line="178" pos:column="44">(<argument><expr><name pos:line="178" pos:column="45">suffix</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="178" pos:column="53">
                        <break pos:line="179" pos:column="25">break;</break></then></if>
                }</block></for>

                <decl_stmt><decl><type><name pos:line="182" pos:column="17">String</name></type> <name pos:line="182" pos:column="24">middel</name> <init pos:line="182" pos:column="31">= <expr><call><name><name pos:line="182" pos:column="33">word</name><op:operator pos:line="182" pos:column="37">.</op:operator><name pos:line="182" pos:column="38">Substring</name></name><argument_list pos:line="182" pos:column="47">(<argument><expr><name pos:line="182" pos:column="48">prefixLength</name></expr></argument>, <argument><expr><name><name pos:line="182" pos:column="62">word</name><op:operator pos:line="182" pos:column="66">.</op:operator><name pos:line="182" pos:column="67">Length</name></name> <op:operator pos:line="182" pos:column="74">-</op:operator> <name pos:line="182" pos:column="76">prefixLength</name> <op:operator pos:line="182" pos:column="89">-</op:operator> <name pos:line="182" pos:column="91">suffixLength</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="183" pos:column="17">if <condition pos:line="183" pos:column="20">(<expr><call><name><name pos:line="183" pos:column="21">middel</name><op:operator pos:line="183" pos:column="27">.</op:operator><name pos:line="183" pos:column="28">Equals</name></name><argument_list pos:line="183" pos:column="34">(<argument><expr><name pos:line="183" pos:column="35">word</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="183" pos:column="41">
                    <return pos:line="184" pos:column="21">return <expr><op:operator pos:line="184" pos:column="28">new</op:operator> <index pos:line="184" pos:column="32">[]</index><block pos:line="184" pos:column="34">{<expr><name pos:line="184" pos:column="35">word</name></expr>}</block></expr>;</return></then></if>

                <if pos:line="186" pos:column="17">if<condition pos:line="186" pos:column="19">(<expr><name pos:line="186" pos:column="20">prefixLength</name> <op:operator pos:line="186" pos:column="33">&gt;</op:operator> <lit:literal type="number" pos:line="186" pos:column="35">0</lit:literal></expr>)</condition><then pos:line="186" pos:column="37">
                    <expr_stmt><expr><call><name><name pos:line="187" pos:column="21">allSubWords</name><op:operator pos:line="187" pos:column="32">.</op:operator><name pos:line="187" pos:column="33">Add</name></name><argument_list pos:line="187" pos:column="36">(<argument><expr><name pos:line="187" pos:column="37">prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
             
                <if pos:line="189" pos:column="17">if<condition pos:line="189" pos:column="19">(<expr><name><name pos:line="189" pos:column="20">middel</name><op:operator pos:line="189" pos:column="26">.</op:operator><name pos:line="189" pos:column="27">Length</name></name> <op:operator pos:line="189" pos:column="34">&gt;</op:operator> <lit:literal type="number" pos:line="189" pos:column="36">0</lit:literal></expr>)</condition><then pos:line="189" pos:column="38">
                    <expr_stmt><expr><call><name><name pos:line="190" pos:column="21">allSubWords</name><op:operator pos:line="190" pos:column="32">.</op:operator><name pos:line="190" pos:column="33">AddRange</name></name><argument_list pos:line="190" pos:column="41">(<argument><expr><call><name pos:line="190" pos:column="42">SplitWord</name><argument_list pos:line="190" pos:column="51">(<argument><expr><name pos:line="190" pos:column="52">middel</name></expr></argument>, <argument><expr><name pos:line="190" pos:column="60">doesWordExist</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

                <if pos:line="192" pos:column="17">if<condition pos:line="192" pos:column="19">(<expr><name pos:line="192" pos:column="20">suffixLength</name> <op:operator pos:line="192" pos:column="33">&gt;</op:operator> <lit:literal type="number" pos:line="192" pos:column="35">0</lit:literal></expr>)</condition><then pos:line="192" pos:column="37">
                    <expr_stmt><expr><call><name><name pos:line="193" pos:column="21">allSubWords</name><op:operator pos:line="193" pos:column="32">.</op:operator><name pos:line="193" pos:column="33">Add</name></name><argument_list pos:line="193" pos:column="36">(<argument><expr><name pos:line="193" pos:column="37">suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
             
                <return pos:line="195" pos:column="17">return <expr><name pos:line="195" pos:column="24">allSubWords</name></expr>;</return>
            }</block></function>
        }</block></class>

        <class><specifier pos:line="199" pos:column="9">private</specifier> class <name pos:line="199" pos:column="23">PerfectSplitStrategy</name> <super pos:line="199" pos:column="44">: <name pos:line="199" pos:column="46">IWordSplitStrategy</name></super>
        <block pos:line="200" pos:column="9">{
            <function><type><specifier pos:line="201" pos:column="13">public</specifier> <name><name pos:line="201" pos:column="20">IEnumerable</name><argument_list pos:line="201" pos:column="31">&lt;<argument><name pos:line="201" pos:column="32">String</name></argument>&gt;</argument_list></name></type> <name pos:line="201" pos:column="40">SplitWord</name><parameter_list pos:line="201" pos:column="49">(<param><decl><type><name pos:line="201" pos:column="50">String</name></type> <name pos:line="201" pos:column="57">word</name></decl></param>, <param><decl><type><name><name pos:line="201" pos:column="63">Predicate</name><argument_list pos:line="201" pos:column="72">&lt;<argument><name pos:line="201" pos:column="73">String</name></argument>&gt;</argument_list></name></type> <name pos:line="201" pos:column="81">doesWordExist</name></decl></param>)</parameter_list>
            <block pos:line="202" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="203" pos:column="17">var</name></type> <name pos:line="203" pos:column="21">split</name> <init pos:line="203" pos:column="27">= <expr><call><name pos:line="203" pos:column="29">PerfectSplitWordHelper</name><argument_list pos:line="203" pos:column="51">(<argument><expr><name pos:line="203" pos:column="52">word</name></expr></argument>, <argument><expr><name pos:line="203" pos:column="58">doesWordExist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="204" pos:column="17">if <condition pos:line="204" pos:column="20">(<expr><op:operator pos:line="204" pos:column="21">!</op:operator><call><name><name pos:line="204" pos:column="22">split</name><op:operator pos:line="204" pos:column="27">.</op:operator><name pos:line="204" pos:column="28">Any</name></name><argument_list pos:line="204" pos:column="31">()</argument_list></call></expr>)</condition><then pos:line="204" pos:column="34">
                    <expr_stmt><expr><call><name><name pos:line="205" pos:column="21">split</name><op:operator pos:line="205" pos:column="26">.</op:operator><name pos:line="205" pos:column="27">Add</name></name><argument_list pos:line="205" pos:column="30">(<argument><expr><name pos:line="205" pos:column="31">word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                <return pos:line="206" pos:column="17">return <expr><name pos:line="206" pos:column="24">split</name></expr>;</return>
            }</block></function>


            <comment type="line" pos:line="210" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="211" pos:column="13">/// Given a word with all letters in the lower case, this method try to split the word to </comment>
            <comment type="line" pos:line="212" pos:column="13">/// meaningful subwords.</comment>
            <comment type="line" pos:line="213" pos:column="13">/// &lt;/summary&gt;</comment>
            <comment type="line" pos:line="214" pos:column="13">/// &lt;param name="word"&gt;&lt;/param&gt;</comment>
            <comment type="line" pos:line="215" pos:column="13">/// &lt;param name="doesWordExist"&gt;&lt;/param&gt;</comment>
            <comment type="line" pos:line="216" pos:column="13">/// &lt;returns&gt;&lt;/returns&gt;</comment>
            <function><type><specifier pos:line="217" pos:column="13">private</specifier> <name><name pos:line="217" pos:column="21">List</name><argument_list pos:line="217" pos:column="25">&lt;<argument><name pos:line="217" pos:column="26">string</name></argument>&gt;</argument_list></name></type> <name pos:line="217" pos:column="34">PerfectSplitWordHelper</name><parameter_list pos:line="217" pos:column="56">(<param><decl><type><name pos:line="217" pos:column="57">string</name></type> <name pos:line="217" pos:column="64">word</name></decl></param>, <param><decl><type><name><name pos:line="217" pos:column="70">Predicate</name><argument_list pos:line="217" pos:column="79">&lt;<argument><name pos:line="217" pos:column="80">string</name></argument>&gt;</argument_list></name></type> <name pos:line="217" pos:column="88">doesWordExist</name></decl></param>)</parameter_list>
            <block pos:line="218" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="219" pos:column="17">var</name></type> <name pos:line="219" pos:column="21">allSubWords</name> <init pos:line="219" pos:column="33">= <expr><op:operator pos:line="219" pos:column="35">new</op:operator> <call><name><name pos:line="219" pos:column="39">List</name><argument_list pos:line="219" pos:column="43">&lt;<argument><name pos:line="219" pos:column="44">String</name></argument>&gt;</argument_list></name><argument_list pos:line="219" pos:column="51">()</argument_list></call></expr></init></decl>;</decl_stmt>

                <if pos:line="221" pos:column="17">if <condition pos:line="221" pos:column="20">(<expr><call><name><name pos:line="221" pos:column="21">doesWordExist</name><op:operator pos:line="221" pos:column="34">.</op:operator><name pos:line="221" pos:column="35">Invoke</name></name><argument_list pos:line="221" pos:column="41">(<argument><expr><name pos:line="221" pos:column="42">word</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="221" pos:column="48">
                <block pos:line="222" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="223" pos:column="21">allSubWords</name><op:operator pos:line="223" pos:column="32">.</op:operator><name pos:line="223" pos:column="33">Add</name></name><argument_list pos:line="223" pos:column="36">(<argument><expr><name pos:line="223" pos:column="37">word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return pos:line="224" pos:column="21">return <expr><name pos:line="224" pos:column="28">allSubWords</name></expr>;</return>
                }</block></then></if>

                <if pos:line="227" pos:column="17">if <condition pos:line="227" pos:column="20">(<expr><name><name pos:line="227" pos:column="21">word</name><op:operator pos:line="227" pos:column="25">.</op:operator><name pos:line="227" pos:column="26">Length</name></name> <op:operator pos:line="227" pos:column="33">==</op:operator> <lit:literal type="number" pos:line="227" pos:column="36">1</lit:literal></expr>)</condition><then pos:line="227" pos:column="38">
                <block pos:line="228" pos:column="17">{
                    <if pos:line="229" pos:column="21">if <condition pos:line="229" pos:column="24">(<expr><call><name><name pos:line="229" pos:column="25">doesWordExist</name><op:operator pos:line="229" pos:column="38">.</op:operator><name pos:line="229" pos:column="39">Invoke</name></name><argument_list pos:line="229" pos:column="45">(<argument><expr><name pos:line="229" pos:column="46">word</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="229" pos:column="52">
                        <expr_stmt><expr><call><name><name pos:line="230" pos:column="25">allSubWords</name><op:operator pos:line="230" pos:column="36">.</op:operator><name pos:line="230" pos:column="37">Add</name></name><argument_list pos:line="230" pos:column="40">(<argument><expr><name pos:line="230" pos:column="41">word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                    <return pos:line="231" pos:column="21">return <expr><name pos:line="231" pos:column="28">allSubWords</name></expr>;</return>
                }</block></then></if>

                <for pos:line="234" pos:column="17">for (<init><decl><type><name pos:line="234" pos:column="22">int</name></type> <name pos:line="234" pos:column="26">length</name> <init pos:line="234" pos:column="33">= <expr><name><name pos:line="234" pos:column="35">word</name><op:operator pos:line="234" pos:column="39">.</op:operator><name pos:line="234" pos:column="40">Length</name></name> <op:operator pos:line="234" pos:column="47">-</op:operator> <lit:literal type="number" pos:line="234" pos:column="49">1</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="234" pos:column="52">length</name> <op:operator pos:line="234" pos:column="59">&gt;</op:operator> <lit:literal type="number" pos:line="234" pos:column="61">0</lit:literal></expr>;</condition> <incr><expr><name pos:line="234" pos:column="64">length</name><op:operator pos:line="234" pos:column="70">--</op:operator></expr></incr>)
                <block pos:line="235" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="236" pos:column="21">var</name></type> <name pos:line="236" pos:column="25">subWord1</name> <init pos:line="236" pos:column="34">= <expr><call><name><name pos:line="236" pos:column="36">word</name><op:operator pos:line="236" pos:column="40">.</op:operator><name pos:line="236" pos:column="41">Substring</name></name><argument_list pos:line="236" pos:column="50">(<argument><expr><lit:literal type="number" pos:line="236" pos:column="51">0</lit:literal></expr></argument>, <argument><expr><name pos:line="236" pos:column="54">length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="237" pos:column="21">var</name></type> <name pos:line="237" pos:column="25">subWord2</name> <init pos:line="237" pos:column="34">= <expr><call><name><name pos:line="237" pos:column="36">word</name><op:operator pos:line="237" pos:column="40">.</op:operator><name pos:line="237" pos:column="41">Substring</name></name><argument_list pos:line="237" pos:column="50">(<argument><expr><name pos:line="237" pos:column="51">length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name pos:line="238" pos:column="21">List</name><argument_list pos:line="238" pos:column="25">&lt;<argument><name pos:line="238" pos:column="26">String</name></argument>&gt;</argument_list></name></type> <name pos:line="238" pos:column="34">split1</name></decl><op:operator pos:line="238" pos:column="40">,</op:operator> <decl><type ref="prev"/><name pos:line="238" pos:column="42">split2</name></decl>;</decl_stmt>

                    <comment type="line" pos:line="240" pos:column="21">// Always split the shorter sub word first.</comment>
                    <if pos:line="241" pos:column="21">if <condition pos:line="241" pos:column="24">(<expr><name><name pos:line="241" pos:column="25">subWord1</name><op:operator pos:line="241" pos:column="33">.</op:operator><name pos:line="241" pos:column="34">Length</name></name> <op:operator pos:line="241" pos:column="41">&gt;</op:operator> <name><name pos:line="241" pos:column="43">subWord2</name><op:operator pos:line="241" pos:column="51">.</op:operator><name pos:line="241" pos:column="52">Length</name></name></expr>)</condition><then pos:line="241" pos:column="59">
                    <block pos:line="242" pos:column="21">{
                        <expr_stmt><expr><name pos:line="243" pos:column="25">split2</name> <op:operator pos:line="243" pos:column="32">=</op:operator> <call><name pos:line="243" pos:column="34">PerfectSplitWordHelper</name><argument_list pos:line="243" pos:column="56">(<argument><expr><name pos:line="243" pos:column="57">subWord2</name></expr></argument>, <argument><expr><name pos:line="243" pos:column="67">doesWordExist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if pos:line="244" pos:column="25">if <condition pos:line="244" pos:column="28">(<expr><op:operator pos:line="244" pos:column="29">!</op:operator><call><name><name pos:line="244" pos:column="30">split2</name><op:operator pos:line="244" pos:column="36">.</op:operator><name pos:line="244" pos:column="37">Any</name></name><argument_list pos:line="244" pos:column="40">()</argument_list></call></expr>)</condition><then pos:line="244" pos:column="43">
                            <continue pos:line="245" pos:column="29">continue;</continue></then></if>
                        <expr_stmt><expr><name pos:line="246" pos:column="25">split1</name> <op:operator pos:line="246" pos:column="32">=</op:operator> <call><name pos:line="246" pos:column="34">PerfectSplitWordHelper</name><argument_list pos:line="246" pos:column="56">(<argument><expr><name pos:line="246" pos:column="57">subWord1</name></expr></argument>, <argument><expr><name pos:line="246" pos:column="67">doesWordExist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if pos:line="247" pos:column="25">if <condition pos:line="247" pos:column="28">(<expr><op:operator pos:line="247" pos:column="29">!</op:operator><call><name><name pos:line="247" pos:column="30">split1</name><op:operator pos:line="247" pos:column="36">.</op:operator><name pos:line="247" pos:column="37">Any</name></name><argument_list pos:line="247" pos:column="40">()</argument_list></call></expr>)</condition><then pos:line="247" pos:column="43">
                            <continue pos:line="248" pos:column="29">continue;</continue></then></if>
                    }</block></then>
                    <else pos:line="250" pos:column="21">else
                    <block pos:line="251" pos:column="21">{
                        <expr_stmt><expr><name pos:line="252" pos:column="25">split1</name> <op:operator pos:line="252" pos:column="32">=</op:operator> <call><name pos:line="252" pos:column="34">PerfectSplitWordHelper</name><argument_list pos:line="252" pos:column="56">(<argument><expr><name pos:line="252" pos:column="57">subWord1</name></expr></argument>, <argument><expr><name pos:line="252" pos:column="67">doesWordExist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if pos:line="253" pos:column="25">if <condition pos:line="253" pos:column="28">(<expr><op:operator pos:line="253" pos:column="29">!</op:operator><call><name><name pos:line="253" pos:column="30">split1</name><op:operator pos:line="253" pos:column="36">.</op:operator><name pos:line="253" pos:column="37">Any</name></name><argument_list pos:line="253" pos:column="40">()</argument_list></call></expr>)</condition><then pos:line="253" pos:column="43">
                            <continue pos:line="254" pos:column="29">continue;</continue></then></if>
                        <expr_stmt><expr><name pos:line="255" pos:column="25">split2</name> <op:operator pos:line="255" pos:column="32">=</op:operator> <call><name pos:line="255" pos:column="34">PerfectSplitWordHelper</name><argument_list pos:line="255" pos:column="56">(<argument><expr><name pos:line="255" pos:column="57">subWord2</name></expr></argument>, <argument><expr><name pos:line="255" pos:column="67">doesWordExist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if pos:line="256" pos:column="25">if <condition pos:line="256" pos:column="28">(<expr><op:operator pos:line="256" pos:column="29">!</op:operator><call><name><name pos:line="256" pos:column="30">split2</name><op:operator pos:line="256" pos:column="36">.</op:operator><name pos:line="256" pos:column="37">Any</name></name><argument_list pos:line="256" pos:column="40">()</argument_list></call></expr>)</condition><then pos:line="256" pos:column="43">
                            <continue pos:line="257" pos:column="29">continue;</continue></then></if>
                    }</block></else></if>

                    <expr_stmt><expr><call><name><name pos:line="260" pos:column="21">allSubWords</name><op:operator pos:line="260" pos:column="32">.</op:operator><name pos:line="260" pos:column="33">AddRange</name></name><argument_list pos:line="260" pos:column="41">(<argument><expr><name pos:line="260" pos:column="42">split1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="261" pos:column="21">allSubWords</name><op:operator pos:line="261" pos:column="32">.</op:operator><name pos:line="261" pos:column="33">AddRange</name></name><argument_list pos:line="261" pos:column="41">(<argument><expr><name pos:line="261" pos:column="42">split2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return pos:line="262" pos:column="21">return <expr><name pos:line="262" pos:column="28">allSubWords</name></expr>;</return>
                }</block></for>
                <return pos:line="264" pos:column="17">return <expr><name pos:line="264" pos:column="24">allSubWords</name></expr>;</return>
            }</block></function>
        }</block></class>

        <function><type><specifier pos:line="268" pos:column="9">public</specifier> <name pos:line="268" pos:column="16">int</name></type> <name pos:line="268" pos:column="20">GetCoOccurrenceCount</name><parameter_list pos:line="268" pos:column="40">(<param><decl><type><name pos:line="268" pos:column="41">string</name></type> <name pos:line="268" pos:column="48">word1</name></decl></param>, <param><decl><type><name pos:line="268" pos:column="55">string</name></type> <name pos:line="268" pos:column="62">word2</name></decl></param>)</parameter_list>
        <block pos:line="269" pos:column="9">{
            <return pos:line="270" pos:column="13">return <expr><call><name><name pos:line="270" pos:column="20">matrix</name><op:operator pos:line="270" pos:column="26">.</op:operator><name pos:line="270" pos:column="27">GetCoOccurrenceCount</name></name><argument_list pos:line="270" pos:column="47">(<argument><expr><name pos:line="270" pos:column="48">word1</name></expr></argument>, <argument><expr><name pos:line="270" pos:column="55">word2</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
