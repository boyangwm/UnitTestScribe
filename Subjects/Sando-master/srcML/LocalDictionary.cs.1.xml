<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Core\Core\Tools\LocalDictionary.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">IO</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Linq</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Text</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Sando</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">Core</name><op:operator pos:line="6" pos:column="17">.</op:operator><name pos:line="6" pos:column="18">QueryRefomers</name></name>;</using>

<namespace pos:line="8" pos:column="1">namespace <name><name pos:line="8" pos:column="11">Sando</name><op:operator pos:line="8" pos:column="16">.</op:operator><name pos:line="8" pos:column="17">Core</name><op:operator pos:line="8" pos:column="21">.</op:operator><name pos:line="8" pos:column="22">Tools</name></name>
<block pos:line="9" pos:column="1">{
    <class><specifier pos:line="10" pos:column="5">public</specifier> <specifier pos:line="10" pos:column="12">partial</specifier> class <name pos:line="10" pos:column="26">DictionaryBasedSplitter</name>
    <block pos:line="11" pos:column="5">{
        <class><specifier pos:line="12" pos:column="9">private</specifier> <specifier pos:line="12" pos:column="17">sealed</specifier> class <name pos:line="12" pos:column="30">FileDictionary</name> <super pos:line="12" pos:column="45">: <name pos:line="12" pos:column="47">IDisposable</name>, <name pos:line="12" pos:column="60">IInitializable</name></super>
        <block pos:line="13" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="14" pos:column="13">private</specifier> <specifier pos:line="14" pos:column="21">const</specifier> <name pos:line="14" pos:column="27">int</name></type> <name pos:line="14" pos:column="31">TERM_MINIMUM_LENGTH</name> <init pos:line="14" pos:column="51">= <expr><lit:literal type="number" pos:line="14" pos:column="53">2</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="15" pos:column="13">private</specifier> <specifier pos:line="15" pos:column="21">const</specifier> <name pos:line="15" pos:column="27">int</name></type> <name pos:line="15" pos:column="31">SAVE_EVERY_MINUTES</name> <init pos:line="15" pos:column="50">= <expr><lit:literal type="number" pos:line="15" pos:column="52">7</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="16" pos:column="13">private</specifier> <specifier pos:line="16" pos:column="21">const</specifier> <name pos:line="16" pos:column="27">string</name></type> <name pos:line="16" pos:column="34">dictionaryName</name> <init pos:line="16" pos:column="49">= <expr><lit:literal type="string" pos:line="16" pos:column="51">"dictionary.txt"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="17" pos:column="13">private</specifier> <specifier pos:line="17" pos:column="21">const</specifier> <name pos:line="17" pos:column="27">string</name></type> <name pos:line="17" pos:column="34">stemDictionary</name> <init pos:line="17" pos:column="49">= <expr><lit:literal type="string" pos:line="17" pos:column="51">"stemDictionary.txt"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="18" pos:column="13">private</specifier> <name pos:line="18" pos:column="21">string</name></type> <name pos:line="18" pos:column="28">directory</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="19" pos:column="13">private</specifier> <name pos:line="19" pos:column="21">Action</name></type> <name pos:line="19" pos:column="28">autoSaveAction</name></decl>;</decl_stmt>

            <decl_stmt><decl><type><specifier pos:line="21" pos:column="13">private</specifier> <specifier pos:line="21" pos:column="21">readonly</specifier> <name pos:line="21" pos:column="30">object</name></type> <name pos:line="21" pos:column="37">locker</name> <init pos:line="21" pos:column="44">= <expr><op:operator pos:line="21" pos:column="46">new</op:operator> <call><name pos:line="21" pos:column="50">object</name><argument_list pos:line="21" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="22" pos:column="13">private</specifier> <specifier pos:line="22" pos:column="21">readonly</specifier> <name><name pos:line="22" pos:column="30">List</name><argument_list pos:line="22" pos:column="34">&lt;<argument><name pos:line="22" pos:column="35">string</name></argument>&gt;</argument_list></name></type> <name pos:line="22" pos:column="43">originalWords</name> <init pos:line="22" pos:column="57">= <expr><op:operator pos:line="22" pos:column="59">new</op:operator> <call><name><name pos:line="22" pos:column="63">List</name><argument_list pos:line="22" pos:column="67">&lt;<argument><name pos:line="22" pos:column="68">string</name></argument>&gt;</argument_list></name><argument_list pos:line="22" pos:column="75">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="23" pos:column="13">private</specifier> <specifier pos:line="23" pos:column="21">readonly</specifier> <name><name pos:line="23" pos:column="30">List</name><argument_list pos:line="23" pos:column="34">&lt;<argument><name pos:line="23" pos:column="35">string</name></argument>&gt;</argument_list></name></type> <name pos:line="23" pos:column="43">stemmedWords</name> <init pos:line="23" pos:column="56">= <expr><op:operator pos:line="23" pos:column="58">new</op:operator> <call><name><name pos:line="23" pos:column="62">List</name><argument_list pos:line="23" pos:column="66">&lt;<argument><name pos:line="23" pos:column="67">string</name></argument>&gt;</argument_list></name><argument_list pos:line="23" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="24" pos:column="13">private</specifier> <specifier pos:line="24" pos:column="21">readonly</specifier> <name pos:line="24" pos:column="30">WordCorrector</name></type> <name pos:line="24" pos:column="44">corrector</name> <init pos:line="24" pos:column="54">= <expr><op:operator pos:line="24" pos:column="56">new</op:operator> <call><name pos:line="24" pos:column="60">WordCorrector</name><argument_list pos:line="24" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt>
            

            <decl_stmt><decl><type><specifier pos:line="27" pos:column="13">public</specifier> <specifier pos:line="27" pos:column="20">event</specifier> <name pos:line="27" pos:column="26">NewWordsAdded</name></type> <name pos:line="27" pos:column="40">addWordsEvent</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="28" pos:column="13">public</specifier> <specifier pos:line="28" pos:column="20">event</specifier> <name pos:line="28" pos:column="26">NewWordsAdded</name></type> <name pos:line="28" pos:column="40">rawWordsEvent</name></decl>;</decl_stmt>

            <constructor><specifier pos:line="30" pos:column="13">public</specifier> <name pos:line="30" pos:column="20">FileDictionary</name><parameter_list pos:line="30" pos:column="34">()</parameter_list>
            <block pos:line="31" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="32" pos:column="17">this</name><op:operator pos:line="32" pos:column="21">.</op:operator><name pos:line="32" pos:column="22">corrector</name></name> <op:operator pos:line="32" pos:column="32">=</op:operator> <op:operator pos:line="32" pos:column="34">new</op:operator> <call><name pos:line="32" pos:column="38">WordCorrector</name><argument_list pos:line="32" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="33" pos:column="17">addWordsEvent</name> <op:operator pos:line="33" pos:column="31">+=</op:operator> <name><name pos:line="33" pos:column="34">corrector</name><op:operator pos:line="33" pos:column="43">.</op:operator><name pos:line="33" pos:column="44">AddWords</name></name></expr>;</expr_stmt>
            }</block></constructor>

            <function><type><specifier pos:line="36" pos:column="13">public</specifier> <name pos:line="36" pos:column="20">void</name></type> <name pos:line="36" pos:column="25">Initialize</name><parameter_list pos:line="36" pos:column="35">(<param><decl><type><name pos:line="36" pos:column="36">String</name></type> <name pos:line="36" pos:column="43">directory</name></decl></param>)</parameter_list>
            <block pos:line="37" pos:column="13">{
                <lock pos:line="38" pos:column="17">lock (<expr><name pos:line="38" pos:column="23">locker</name></expr>)
                <block pos:line="39" pos:column="17">{
                    <expr_stmt><expr><name><name pos:line="40" pos:column="21">this</name><op:operator pos:line="40" pos:column="25">.</op:operator><name pos:line="40" pos:column="26">directory</name></name> <op:operator pos:line="40" pos:column="36">=</op:operator> <name pos:line="40" pos:column="38">directory</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="41" pos:column="21">originalWords</name><op:operator pos:line="41" pos:column="34">.</op:operator><name pos:line="41" pos:column="35">Clear</name></name><argument_list pos:line="41" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="42" pos:column="21">stemmedWords</name><op:operator pos:line="42" pos:column="33">.</op:operator><name pos:line="42" pos:column="34">Clear</name></name><argument_list pos:line="42" pos:column="39">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="43" pos:column="21">ReadWordsFromFile</name><argument_list pos:line="43" pos:column="38">(<argument><expr><call><name pos:line="43" pos:column="39">GetDicFilePath</name><argument_list pos:line="43" pos:column="53">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="43" pos:column="57">originalWords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="44" pos:column="21">ReadWordsFromFile</name><argument_list pos:line="44" pos:column="38">(<argument><expr><call><name pos:line="44" pos:column="39">GetStemDicPath</name><argument_list pos:line="44" pos:column="53">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="44" pos:column="57">stemmedWords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="line" pos:line="46" pos:column="21">// Save to the local dictionarty every 10 minutes.</comment>
                    <expr_stmt><expr><name><name pos:line="47" pos:column="21">this</name><op:operator pos:line="47" pos:column="25">.</op:operator><name pos:line="47" pos:column="26">autoSaveAction</name></name> <op:operator pos:line="47" pos:column="41">=</op:operator> <name pos:line="47" pos:column="43">WriteToFiles</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="48" pos:column="21">TimedProcessor</name><op:operator pos:line="48" pos:column="35">.</op:operator><name pos:line="48" pos:column="36">GetInstance</name></name><argument_list pos:line="48" pos:column="47">()</argument_list></call><op:operator pos:line="48" pos:column="49">.</op:operator><call><name pos:line="48" pos:column="50">AddTimedTask</name><argument_list pos:line="48" pos:column="62">(<argument><expr><name pos:line="48" pos:column="63">autoSaveAction</name></expr></argument>, 
                        <argument><expr><name pos:line="49" pos:column="25">SAVE_EVERY_MINUTES</name> <op:operator pos:line="49" pos:column="44">*</op:operator> <lit:literal type="number" pos:line="49" pos:column="46">60</lit:literal> <op:operator pos:line="49" pos:column="49">*</op:operator> <lit:literal type="number" pos:line="49" pos:column="51">1000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></lock>
            }</block></function>

            <function><type><specifier pos:line="53" pos:column="13">public</specifier> <name pos:line="53" pos:column="20">void</name></type> <name pos:line="53" pos:column="25">Dispose</name><parameter_list pos:line="53" pos:column="32">()</parameter_list>
            <block pos:line="54" pos:column="13">{
                <lock pos:line="55" pos:column="17">lock (<expr><name pos:line="55" pos:column="23">locker</name></expr>)
                <block pos:line="56" pos:column="17">{
                    <if pos:line="57" pos:column="21">if <condition pos:line="57" pos:column="24">(<expr><name pos:line="57" pos:column="25">directory</name> <op:operator pos:line="57" pos:column="35">!=</op:operator> <name pos:line="57" pos:column="38">null</name></expr>)</condition><then pos:line="57" pos:column="43">
                    <block pos:line="58" pos:column="21">{
                        <expr_stmt><expr><call><name pos:line="59" pos:column="25">WriteToFiles</name><argument_list pos:line="59" pos:column="37">()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="60" pos:column="25">TimedProcessor</name><op:operator pos:line="60" pos:column="39">.</op:operator><name pos:line="60" pos:column="40">GetInstance</name></name><argument_list pos:line="60" pos:column="51">()</argument_list></call><op:operator pos:line="60" pos:column="53">.</op:operator><call><name pos:line="60" pos:column="54">RemoveTimedTask</name><argument_list pos:line="60" pos:column="69">(<argument><expr><name pos:line="60" pos:column="70">autoSaveAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="61" pos:column="25">directory</name> <op:operator pos:line="61" pos:column="35">=</op:operator> <name pos:line="61" pos:column="37">null</name></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></lock>
            }</block></function>

            <function><type><specifier pos:line="66" pos:column="13">private</specifier> <name pos:line="66" pos:column="21">void</name></type> <name pos:line="66" pos:column="26">WriteToFiles</name><parameter_list pos:line="66" pos:column="38">()</parameter_list>
            <block pos:line="67" pos:column="13">{
                <expr_stmt><expr><call><name pos:line="68" pos:column="17">WriteWordsToFile</name><argument_list pos:line="68" pos:column="33">(<argument><expr><call><name pos:line="68" pos:column="34">GetDicFilePath</name><argument_list pos:line="68" pos:column="48">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="68" pos:column="52">originalWords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="69" pos:column="17">WriteWordsToFile</name><argument_list pos:line="69" pos:column="33">(<argument><expr><call><name pos:line="69" pos:column="34">GetStemDicPath</name><argument_list pos:line="69" pos:column="48">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="69" pos:column="52">stemmedWords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <function><type><specifier pos:line="72" pos:column="13">private</specifier> <name pos:line="72" pos:column="21">void</name></type> <name pos:line="72" pos:column="26">WriteWordsToFile</name><parameter_list pos:line="72" pos:column="42">(<param><decl><type><name pos:line="72" pos:column="43">String</name></type> <name pos:line="72" pos:column="50">path</name></decl></param>, <param><decl><type><name><name pos:line="72" pos:column="56">IEnumerable</name><argument_list pos:line="72" pos:column="67">&lt;<argument><name pos:line="72" pos:column="68">String</name></argument>&gt;</argument_list></name></type> <name pos:line="72" pos:column="76">wordsToWrite</name></decl></param>)</parameter_list>
            <block pos:line="73" pos:column="13">{
                <using pos:line="74" pos:column="17">using (<decl><type><name pos:line="74" pos:column="24">var</name></type> <name pos:line="74" pos:column="28">writer</name> <init pos:line="74" pos:column="35">= <expr><op:operator pos:line="74" pos:column="37">new</op:operator> <call><name pos:line="74" pos:column="41">StreamWriter</name><argument_list pos:line="74" pos:column="53">(<argument><expr><name pos:line="74" pos:column="54">path</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="74" pos:column="60">false</lit:literal></expr></argument>, <argument><expr><name><name pos:line="74" pos:column="67">Encoding</name><op:operator pos:line="74" pos:column="75">.</op:operator><name pos:line="74" pos:column="76">ASCII</name></name></expr></argument>)</argument_list></call></expr></init></decl>)
                <block pos:line="75" pos:column="17">{
                    <foreach pos:line="76" pos:column="21">foreach (<init><decl><type><name pos:line="76" pos:column="30">string</name></type> <name pos:line="76" pos:column="37">word</name> <range pos:line="76" pos:column="42">in <expr><name pos:line="76" pos:column="45">wordsToWrite</name></expr></range></decl></init>)
                    <block pos:line="77" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="78" pos:column="25">writer</name><op:operator pos:line="78" pos:column="31">.</op:operator><name pos:line="78" pos:column="32">WriteLine</name></name><argument_list pos:line="78" pos:column="41">(<argument><expr><call><name><name pos:line="78" pos:column="42">word</name><op:operator pos:line="78" pos:column="46">.</op:operator><name pos:line="78" pos:column="47">Trim</name></name><argument_list pos:line="78" pos:column="51">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></foreach>
                }</block></using>
            }</block></function>

            <function><type><specifier pos:line="83" pos:column="13">private</specifier> <name pos:line="83" pos:column="21">void</name></type> <name pos:line="83" pos:column="26">ReadWordsFromFile</name><parameter_list pos:line="83" pos:column="43">(<param><decl><type><name pos:line="83" pos:column="44">String</name></type> <name pos:line="83" pos:column="51">path</name></decl></param>, <param><decl><type><name><name pos:line="83" pos:column="57">List</name><argument_list pos:line="83" pos:column="61">&lt;<argument><name pos:line="83" pos:column="62">String</name></argument>&gt;</argument_list></name></type> <name pos:line="83" pos:column="70">wordList</name></decl></param>)</parameter_list>
            <block pos:line="84" pos:column="13">{
                <if pos:line="85" pos:column="17">if <condition pos:line="85" pos:column="20">(<expr><call><name><name pos:line="85" pos:column="21">File</name><op:operator pos:line="85" pos:column="25">.</op:operator><name pos:line="85" pos:column="26">Exists</name></name><argument_list pos:line="85" pos:column="32">(<argument><expr><name pos:line="85" pos:column="33">path</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="85" pos:column="39">
                <block pos:line="86" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="87" pos:column="21">var</name></type> <name pos:line="87" pos:column="25">allLines</name> <init pos:line="87" pos:column="34">= <expr><call><name><name pos:line="87" pos:column="36">File</name><op:operator pos:line="87" pos:column="40">.</op:operator><name pos:line="87" pos:column="41">ReadAllLines</name></name><argument_list pos:line="87" pos:column="53">(<argument><expr><call><name pos:line="87" pos:column="54">GetDicFilePath</name><argument_list pos:line="87" pos:column="68">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="88" pos:column="21">wordList</name><op:operator pos:line="88" pos:column="29">.</op:operator><name pos:line="88" pos:column="30">Clear</name></name><argument_list pos:line="88" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="89" pos:column="21">wordList</name><op:operator pos:line="89" pos:column="29">.</op:operator><name pos:line="89" pos:column="30">AddRange</name></name><argument_list pos:line="89" pos:column="38">(<argument><expr><name pos:line="89" pos:column="39">allLines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="90" pos:column="21">addWordsEvent</name><argument_list pos:line="90" pos:column="34">(<argument><expr><name pos:line="90" pos:column="35">wordList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></function>

            <function><type><specifier pos:line="94" pos:column="13">private</specifier> <name pos:line="94" pos:column="21">String</name></type> <name pos:line="94" pos:column="28">GetDicFilePath</name><parameter_list pos:line="94" pos:column="42">()</parameter_list>
            <block pos:line="95" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="96" pos:column="17">var</name></type> <name pos:line="96" pos:column="21">path</name> <init pos:line="96" pos:column="26">= <expr><call><name><name pos:line="96" pos:column="28">Path</name><op:operator pos:line="96" pos:column="32">.</op:operator><name pos:line="96" pos:column="33">Combine</name></name><argument_list pos:line="96" pos:column="40">(<argument><expr><name pos:line="96" pos:column="41">directory</name></expr></argument>, <argument><expr><name pos:line="96" pos:column="52">dictionaryName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return pos:line="97" pos:column="17">return <expr><name pos:line="97" pos:column="24">path</name></expr>;</return>
            }</block></function>

            <function><type><specifier pos:line="100" pos:column="13">private</specifier> <name pos:line="100" pos:column="21">String</name></type> <name pos:line="100" pos:column="28">GetStemDicPath</name><parameter_list pos:line="100" pos:column="42">()</parameter_list>
            <block pos:line="101" pos:column="13">{
                <return pos:line="102" pos:column="17">return <expr><call><name><name pos:line="102" pos:column="24">Path</name><op:operator pos:line="102" pos:column="28">.</op:operator><name pos:line="102" pos:column="29">Combine</name></name><argument_list pos:line="102" pos:column="36">(<argument><expr><name pos:line="102" pos:column="37">directory</name></expr></argument>, <argument><expr><name pos:line="102" pos:column="48">stemDictionary</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>

            <function><type><specifier pos:line="105" pos:column="13">private</specifier> <name><name pos:line="105" pos:column="21">IEnumerable</name><argument_list pos:line="105" pos:column="32">&lt;<argument><name pos:line="105" pos:column="33">String</name></argument>&gt;</argument_list></name></type> <name pos:line="105" pos:column="41">AddWordsToList</name><parameter_list pos:line="105" pos:column="55">(<param><decl><type><name><name pos:line="105" pos:column="56">List</name><argument_list pos:line="105" pos:column="60">&lt;<argument><name pos:line="105" pos:column="61">String</name></argument>&gt;</argument_list></name></type> <name pos:line="105" pos:column="69">wordsPool</name></decl></param>, <param><decl><type><name><name pos:line="105" pos:column="80">IEnumerable</name><argument_list pos:line="105" pos:column="91">&lt;<argument><name pos:line="105" pos:column="92">String</name></argument>&gt;</argument_list></name></type> <name pos:line="105" pos:column="100">wordsToAdd</name></decl></param>)</parameter_list>
            <block pos:line="106" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="107" pos:column="17">var</name></type> <name pos:line="107" pos:column="21">addedWords</name> <init pos:line="107" pos:column="32">= <expr><op:operator pos:line="107" pos:column="34">new</op:operator> <call><name><name pos:line="107" pos:column="38">List</name><argument_list pos:line="107" pos:column="42">&lt;<argument><name pos:line="107" pos:column="43">String</name></argument>&gt;</argument_list></name><argument_list pos:line="107" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <foreach pos:line="108" pos:column="17">foreach (<init><decl><type><name pos:line="108" pos:column="26">string</name></type> <name pos:line="108" pos:column="33">word</name> <range pos:line="108" pos:column="38">in <expr><name pos:line="108" pos:column="41">wordsToAdd</name></expr></range></decl></init>)
                <block pos:line="109" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="110" pos:column="21">var</name></type> <name pos:line="110" pos:column="25">found</name> <init pos:line="110" pos:column="31">= <expr><lit:literal type="boolean" pos:line="110" pos:column="33">false</lit:literal></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="111" pos:column="21">var</name></type> <name pos:line="111" pos:column="25">smallerWordsCount</name> <init pos:line="111" pos:column="43">= <expr><call><name pos:line="111" pos:column="45">GetSmallerWordsCount</name><argument_list pos:line="111" pos:column="65">(<argument><expr><name pos:line="111" pos:column="66">wordsPool</name></expr></argument>, <argument><expr><name pos:line="111" pos:column="77">word</name></expr></argument>, <argument><expr pos:line="111" pos:column="83">out <name pos:line="111" pos:column="87">found</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if pos:line="112" pos:column="21">if <condition pos:line="112" pos:column="24">(<expr><op:operator pos:line="112" pos:column="25">!</op:operator><name pos:line="112" pos:column="26">found</name></expr>)</condition><then pos:line="112" pos:column="32">
                    <block pos:line="113" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="114" pos:column="25">wordsPool</name><op:operator pos:line="114" pos:column="34">.</op:operator><name pos:line="114" pos:column="35">Insert</name></name><argument_list pos:line="114" pos:column="41">(<argument><expr><name pos:line="114" pos:column="42">smallerWordsCount</name></expr></argument>, <argument><expr><name pos:line="114" pos:column="61">word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="115" pos:column="25">addedWords</name><op:operator pos:line="115" pos:column="35">.</op:operator><name pos:line="115" pos:column="36">Add</name></name><argument_list pos:line="115" pos:column="39">(<argument><expr><name pos:line="115" pos:column="40">word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></foreach>
                <return pos:line="118" pos:column="17">return <expr><name pos:line="118" pos:column="24">addedWords</name></expr>;</return>
            }</block></function>


            <function><type><specifier pos:line="122" pos:column="13">public</specifier> <name pos:line="122" pos:column="20">void</name></type> <name pos:line="122" pos:column="25">AddWords</name><parameter_list pos:line="122" pos:column="33">(<param><decl><type><name><name pos:line="122" pos:column="34">IEnumerable</name><argument_list pos:line="122" pos:column="45">&lt;<argument><name pos:line="122" pos:column="46">String</name></argument>&gt;</argument_list></name></type> <name pos:line="122" pos:column="54">words</name></decl></param>, <param><decl><type><name pos:line="122" pos:column="61">DictionaryOption</name></type> <name pos:line="122" pos:column="78">option</name></decl></param>)</parameter_list>
            <block pos:line="123" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="124" pos:column="17">var</name></type> <name pos:line="124" pos:column="21">addedWords</name> <init pos:line="124" pos:column="32">= <expr><op:operator pos:line="124" pos:column="34">new</op:operator> <call><name><name pos:line="124" pos:column="38">List</name><argument_list pos:line="124" pos:column="42">&lt;<argument><name pos:line="124" pos:column="43">String</name></argument>&gt;</argument_list></name><argument_list pos:line="124" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="125" pos:column="17">var</name></type> <name pos:line="125" pos:column="21">originalWordsToAdd</name> <init pos:line="125" pos:column="40">= <expr><call><name pos:line="125" pos:column="42">SelectingWordsAddToDictionary</name><argument_list pos:line="125" pos:column="71">(<argument><expr><name pos:line="125" pos:column="72">words</name></expr></argument>)</argument_list></call><op:operator pos:line="125" pos:column="78">.</op:operator><call><name pos:line="125" pos:column="79">ToList</name><argument_list pos:line="125" pos:column="85">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="126" pos:column="17">var</name></type> <name pos:line="126" pos:column="21">stemmedWordsToAdd</name> <init pos:line="126" pos:column="39">= <expr><op:operator pos:line="126" pos:column="41">new</op:operator> <call><name><name pos:line="126" pos:column="45">List</name><argument_list pos:line="126" pos:column="49">&lt;<argument><name pos:line="126" pos:column="50">String</name></argument>&gt;</argument_list></name><argument_list pos:line="126" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="127" pos:column="17">if <condition pos:line="127" pos:column="20">(<expr><name pos:line="127" pos:column="21">option</name> <op:operator pos:line="127" pos:column="28">==</op:operator> <name><name pos:line="127" pos:column="31">DictionaryOption</name><op:operator pos:line="127" pos:column="47">.</op:operator><name pos:line="127" pos:column="48">IncludingStemming</name></name></expr>)</condition><then pos:line="127" pos:column="66">
                <block pos:line="128" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="129" pos:column="21">var</name></type> <name pos:line="129" pos:column="25">stems</name> <init pos:line="129" pos:column="31">= <expr><call><name><name pos:line="129" pos:column="33">originalWordsToAdd</name><op:operator pos:line="129" pos:column="51">.</op:operator><name pos:line="129" pos:column="52">Select</name></name><argument_list pos:line="129" pos:column="58">(<argument><expr><name><name pos:line="129" pos:column="59">DictionaryHelper</name><op:operator pos:line="129" pos:column="75">.</op:operator><name pos:line="129" pos:column="76">GetStemmedQuery</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="130" pos:column="21">stemmedWordsToAdd</name><op:operator pos:line="130" pos:column="38">.</op:operator><name pos:line="130" pos:column="39">AddRange</name></name><argument_list pos:line="130" pos:column="47">(<argument><expr><name pos:line="130" pos:column="48">stems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <lock pos:line="133" pos:column="17">lock (<expr><name pos:line="133" pos:column="23">locker</name></expr>)
                <block pos:line="134" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="135" pos:column="21">addedWords</name><op:operator pos:line="135" pos:column="31">.</op:operator><name pos:line="135" pos:column="32">AddRange</name></name><argument_list pos:line="135" pos:column="40">(<argument><expr><call><name pos:line="135" pos:column="41">AddWordsToList</name><argument_list pos:line="135" pos:column="55">(<argument><expr><name pos:line="135" pos:column="56">originalWords</name></expr></argument>, <argument><expr><name pos:line="135" pos:column="71">originalWordsToAdd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="136" pos:column="21">AddWordsToList</name><argument_list pos:line="136" pos:column="35">(<argument><expr><name pos:line="136" pos:column="36">stemmedWords</name></expr></argument>, <argument><expr><name pos:line="136" pos:column="50">stemmedWordsToAdd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></lock>

                <expr_stmt><expr><call><name pos:line="139" pos:column="17">addWordsEvent</name><argument_list pos:line="139" pos:column="30">(<argument><expr><name pos:line="139" pos:column="31">addedWords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="140" pos:column="17">rawWordsEvent</name><argument_list pos:line="140" pos:column="30">(<argument><expr><name pos:line="140" pos:column="31">originalWordsToAdd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <function><type><specifier pos:line="143" pos:column="13">private</specifier> <name><name pos:line="143" pos:column="21">IEnumerable</name><argument_list pos:line="143" pos:column="32">&lt;<argument><name pos:line="143" pos:column="33">String</name></argument>&gt;</argument_list></name></type> <name pos:line="143" pos:column="41">SelectingWordsAddToDictionary</name><parameter_list pos:line="143" pos:column="70">(<param><decl><type><name><name pos:line="143" pos:column="71">IEnumerable</name><argument_list pos:line="143" pos:column="82">&lt;<argument><name pos:line="143" pos:column="83">String</name></argument>&gt;</argument_list></name></type> <name pos:line="143" pos:column="91">words</name></decl></param>)</parameter_list>
            <block pos:line="144" pos:column="13">{
                <return pos:line="145" pos:column="17">return <expr><call><name><name pos:line="145" pos:column="24">words</name><op:operator pos:line="145" pos:column="29">.</op:operator><name pos:line="145" pos:column="30">Select</name></name><argument_list pos:line="145" pos:column="36">(<argument><expr><lambda><name pos:line="145" pos:column="37">w</name> <op:operator pos:line="145" pos:column="39">=&gt;</op:operator> <call><name><name pos:line="145" pos:column="42">w</name><op:operator pos:line="145" pos:column="43">.</op:operator><name pos:line="145" pos:column="44">Trim</name></name><argument_list pos:line="145" pos:column="48">()</argument_list></call><op:operator pos:line="145" pos:column="50">.</op:operator><call><name pos:line="145" pos:column="51">ToLower</name><argument_list pos:line="145" pos:column="58">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="145" pos:column="61">.</op:operator><call><name pos:line="145" pos:column="62">Distinct</name><argument_list pos:line="145" pos:column="70">()</argument_list></call><op:operator pos:line="145" pos:column="72">.</op:operator><call><name pos:line="145" pos:column="73">Where</name><argument_list pos:line="145" pos:column="78">(<argument><expr><lambda><name pos:line="145" pos:column="79">w</name> <op:operator pos:line="145" pos:column="81">=&gt;</op:operator> <op:operator pos:line="145" pos:column="84">!</op:operator><call><name><name pos:line="145" pos:column="85">String</name><op:operator pos:line="145" pos:column="91">.</op:operator><name pos:line="145" pos:column="92">IsNullOrEmpty</name></name><argument_list pos:line="145" pos:column="105">(<argument><expr><name pos:line="145" pos:column="106">w</name></expr></argument>)</argument_list></call>
                    <op:operator pos:line="146" pos:column="21">&amp;&amp;</op:operator> <name><name pos:line="146" pos:column="24">w</name><op:operator pos:line="146" pos:column="25">.</op:operator><name pos:line="146" pos:column="26">Length</name></name> <op:operator pos:line="146" pos:column="33">&gt;</op:operator> <name pos:line="146" pos:column="35">TERM_MINIMUM_LENGTH</name></lambda></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>


            <function><type><specifier pos:line="150" pos:column="13">public</specifier> <name pos:line="150" pos:column="20">Boolean</name></type> <name pos:line="150" pos:column="28">DoesWordExist</name><parameter_list pos:line="150" pos:column="41">(<param><decl><type><name pos:line="150" pos:column="42">String</name></type> <name pos:line="150" pos:column="49">word</name></decl></param>, <param><decl><type><name pos:line="150" pos:column="55">DictionaryOption</name></type> <name pos:line="150" pos:column="72">option</name></decl></param>)</parameter_list>
            <block pos:line="151" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="152" pos:column="17">var</name></type> <name pos:line="152" pos:column="21">trimmedWord</name> <init pos:line="152" pos:column="33">= <expr><call><name><name pos:line="152" pos:column="35">word</name><op:operator pos:line="152" pos:column="39">.</op:operator><name pos:line="152" pos:column="40">Trim</name></name><argument_list pos:line="152" pos:column="44">()</argument_list></call><op:operator pos:line="152" pos:column="46">.</op:operator><call><name pos:line="152" pos:column="47">ToLower</name><argument_list pos:line="152" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="153" pos:column="17">bool</name></type> <name pos:line="153" pos:column="22">found</name> <init pos:line="153" pos:column="28">= <expr><lit:literal type="boolean" pos:line="153" pos:column="30">false</lit:literal></expr></init></decl>;</decl_stmt>
                <lock pos:line="154" pos:column="17">lock (<expr><name pos:line="154" pos:column="23">locker</name></expr>)
                <block pos:line="155" pos:column="17">{
                    <expr_stmt><expr><call><name pos:line="156" pos:column="21">GetSmallerWordsCount</name><argument_list pos:line="156" pos:column="41">(<argument><expr><name pos:line="156" pos:column="42">originalWords</name></expr></argument>, <argument><expr><name pos:line="156" pos:column="57">trimmedWord</name></expr></argument>, <argument><expr pos:line="156" pos:column="70">out <name pos:line="156" pos:column="74">found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if pos:line="157" pos:column="21">if <condition pos:line="157" pos:column="24">(<expr><op:operator pos:line="157" pos:column="25">!</op:operator><name pos:line="157" pos:column="26">found</name> <op:operator pos:line="157" pos:column="32">&amp;&amp;</op:operator> <name pos:line="157" pos:column="35">option</name> <op:operator pos:line="157" pos:column="42">==</op:operator> <name><name pos:line="157" pos:column="45">DictionaryOption</name><op:operator pos:line="157" pos:column="61">.</op:operator><name pos:line="157" pos:column="62">IncludingStemming</name></name></expr>)</condition><then pos:line="157" pos:column="80">
                    <block pos:line="158" pos:column="21">{
                        <decl_stmt><decl><type><name pos:line="159" pos:column="25">var</name></type> <name pos:line="159" pos:column="29">stemmedWord</name> <init pos:line="159" pos:column="41">= <expr><call><name><name pos:line="159" pos:column="43">trimmedWord</name><op:operator pos:line="159" pos:column="54">.</op:operator><name pos:line="159" pos:column="55">GetStemmedQuery</name></name><argument_list pos:line="159" pos:column="70">()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if pos:line="160" pos:column="25">if <condition pos:line="160" pos:column="28">(<expr><op:operator pos:line="160" pos:column="29">!</op:operator><call><name><name pos:line="160" pos:column="30">stemmedWord</name><op:operator pos:line="160" pos:column="41">.</op:operator><name pos:line="160" pos:column="42">Equals</name></name><argument_list pos:line="160" pos:column="48">(<argument><expr><name pos:line="160" pos:column="49">word</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="160" pos:column="55">
                        <block pos:line="161" pos:column="25">{
                            <expr_stmt><expr><call><name pos:line="162" pos:column="29">GetSmallerWordsCount</name><argument_list pos:line="162" pos:column="49">(<argument><expr><name pos:line="162" pos:column="50">stemmedWords</name></expr></argument>, <argument><expr><name pos:line="162" pos:column="64">stemmedWord</name></expr></argument>, <argument><expr pos:line="162" pos:column="77">out <name pos:line="162" pos:column="81">found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></then></if>
                    <return pos:line="165" pos:column="21">return <expr><name pos:line="165" pos:column="28">found</name></expr>;</return>
                }</block></lock>
            }</block></function>

            <function><type><specifier pos:line="169" pos:column="13">private</specifier> <name pos:line="169" pos:column="21">int</name></type> <name pos:line="169" pos:column="25">GetSmallerWordsCount</name><parameter_list pos:line="169" pos:column="45">(<param><decl><type><name><name pos:line="169" pos:column="46">List</name><argument_list pos:line="169" pos:column="50">&lt;<argument><name pos:line="169" pos:column="51">String</name></argument>&gt;</argument_list></name></type> <name pos:line="169" pos:column="59">list</name></decl></param>, <param><decl><type><name pos:line="169" pos:column="65">string</name></type> <name pos:line="169" pos:column="72">word</name></decl></param>, <param><decl><type><specifier pos:line="169" pos:column="78">out</specifier> <name pos:line="169" pos:column="82">bool</name></type> <name pos:line="169" pos:column="87">found</name></decl></param>)</parameter_list>
            <block pos:line="170" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="171" pos:column="17">int</name></type> <name pos:line="171" pos:column="21">min</name> <init pos:line="171" pos:column="25">= <expr><lit:literal type="number" pos:line="171" pos:column="27">0</lit:literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="172" pos:column="17">int</name></type> <name pos:line="172" pos:column="21">max</name> <init pos:line="172" pos:column="25">= <expr><name><name pos:line="172" pos:column="27">list</name><op:operator pos:line="172" pos:column="31">.</op:operator><name pos:line="172" pos:column="32">Count</name></name> <op:operator pos:line="172" pos:column="38">-</op:operator> <lit:literal type="number" pos:line="172" pos:column="40">1</lit:literal></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name pos:line="173" pos:column="17">found</name> <op:operator pos:line="173" pos:column="23">=</op:operator> <lit:literal type="boolean" pos:line="173" pos:column="25">false</lit:literal></expr>;</expr_stmt>

                <comment type="line" pos:line="175" pos:column="17">// If no words, then return directly.</comment>
                <if pos:line="176" pos:column="17">if <condition pos:line="176" pos:column="20">(<expr><name pos:line="176" pos:column="21">max</name> <op:operator pos:line="176" pos:column="25">==</op:operator> <op:operator pos:line="176" pos:column="28">-</op:operator><lit:literal type="number" pos:line="176" pos:column="29">1</lit:literal></expr>)</condition><then pos:line="176" pos:column="31">
                <block pos:line="177" pos:column="17">{
                    <return pos:line="178" pos:column="21">return <expr><lit:literal type="number" pos:line="178" pos:column="28">0</lit:literal></expr>;</return>
                }</block></then></if>

                <while pos:line="181" pos:column="17">while <condition pos:line="181" pos:column="23">(<expr><op:operator pos:line="181" pos:column="24">!</op:operator><name pos:line="181" pos:column="25">found</name> <op:operator pos:line="181" pos:column="31">&amp;&amp;</op:operator> <name pos:line="181" pos:column="34">min</name> <op:operator pos:line="181" pos:column="38">&lt;=</op:operator> <name pos:line="181" pos:column="41">max</name></expr>)</condition>
                <block pos:line="182" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="183" pos:column="21">int</name></type> <name pos:line="183" pos:column="25">current</name> <init pos:line="183" pos:column="33">= <expr><op:operator pos:line="183" pos:column="35">(</op:operator><name pos:line="183" pos:column="36">min</name> <op:operator pos:line="183" pos:column="40">+</op:operator> <name pos:line="183" pos:column="42">max</name><op:operator pos:line="183" pos:column="45">)</op:operator> <op:operator pos:line="183" pos:column="47">/</op:operator> <lit:literal type="number" pos:line="183" pos:column="49">2</lit:literal></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="184" pos:column="21">var</name></type> <name pos:line="184" pos:column="25">currentWord</name> <init pos:line="184" pos:column="37">= <expr><call><name><name pos:line="184" pos:column="39">list</name><op:operator pos:line="184" pos:column="43">.</op:operator><name pos:line="184" pos:column="44">ElementAt</name></name><argument_list pos:line="184" pos:column="53">(<argument><expr><name pos:line="184" pos:column="54">current</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if pos:line="185" pos:column="21">if <condition pos:line="185" pos:column="24">(<expr><call><name><name pos:line="185" pos:column="25">word</name><op:operator pos:line="185" pos:column="29">.</op:operator><name pos:line="185" pos:column="30">CompareTo</name></name><argument_list pos:line="185" pos:column="39">(<argument><expr><name pos:line="185" pos:column="40">currentWord</name></expr></argument>)</argument_list></call> <op:operator pos:line="185" pos:column="53">&lt;</op:operator> <lit:literal type="number" pos:line="185" pos:column="55">0</lit:literal></expr>)</condition><then pos:line="185" pos:column="57">
                        <expr_stmt><expr><name pos:line="186" pos:column="25">max</name> <op:operator pos:line="186" pos:column="29">=</op:operator> <name pos:line="186" pos:column="31">current</name> <op:operator pos:line="186" pos:column="39">-</op:operator> <lit:literal type="number" pos:line="186" pos:column="41">1</lit:literal></expr>;</expr_stmt></then>
                    <else pos:line="187" pos:column="21">else <if pos:line="187" pos:column="26">if <condition pos:line="187" pos:column="29">(<expr><call><name><name pos:line="187" pos:column="30">word</name><op:operator pos:line="187" pos:column="34">.</op:operator><name pos:line="187" pos:column="35">CompareTo</name></name><argument_list pos:line="187" pos:column="44">(<argument><expr><name pos:line="187" pos:column="45">currentWord</name></expr></argument>)</argument_list></call> <op:operator pos:line="187" pos:column="58">&gt;</op:operator> <lit:literal type="number" pos:line="187" pos:column="60">0</lit:literal></expr>)</condition><then pos:line="187" pos:column="62">
                        <expr_stmt><expr><name pos:line="188" pos:column="25">min</name> <op:operator pos:line="188" pos:column="29">=</op:operator> <name pos:line="188" pos:column="31">current</name> <op:operator pos:line="188" pos:column="39">+</op:operator> <lit:literal type="number" pos:line="188" pos:column="41">1</lit:literal></expr>;</expr_stmt></then>
                    <else pos:line="189" pos:column="21">else
                        <expr_stmt><expr><name pos:line="190" pos:column="25">found</name> <op:operator pos:line="190" pos:column="31">=</op:operator> <lit:literal type="boolean" pos:line="190" pos:column="33">true</lit:literal></expr>;</expr_stmt></else></if></else></if>
                }</block></while>
                <return pos:line="192" pos:column="17">return <expr><name pos:line="192" pos:column="24">min</name></expr>;</return>
            }</block></function>

            <function><type><specifier pos:line="195" pos:column="13">public</specifier> <name><name pos:line="195" pos:column="20">IEnumerable</name><argument_list pos:line="195" pos:column="31">&lt;<argument><name pos:line="195" pos:column="32">String</name></argument>&gt;</argument_list></name></type> <name pos:line="195" pos:column="40">FindSimilarWords</name><parameter_list pos:line="195" pos:column="56">(<param><decl><type><name pos:line="195" pos:column="57">String</name></type> <name pos:line="195" pos:column="64">word</name></decl></param>)</parameter_list>
            <block pos:line="196" pos:column="13">{
                <return pos:line="197" pos:column="17">return <expr><call><name><name pos:line="197" pos:column="24">corrector</name><op:operator pos:line="197" pos:column="33">.</op:operator><name pos:line="197" pos:column="34">FindSimilarWords</name></name><argument_list pos:line="197" pos:column="50">(<argument><expr><name pos:line="197" pos:column="51">word</name></expr></argument>)</argument_list></call><op:operator pos:line="197" pos:column="56">.</op:operator><call><name pos:line="197" pos:column="57">ToList</name><argument_list pos:line="197" pos:column="63">()</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class>
    }</block></class>
}</block></namespace>
</unit>
