<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\IntegrationTests\Search\SelfSearchTest.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">IO</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Lucene</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Net</name><op:operator pos:line="4" pos:column="17">.</op:operator><name pos:line="4" pos:column="18">Analysis</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Lucene</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Net</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">Analysis</name><op:operator pos:line="5" pos:column="26">.</op:operator><name pos:line="5" pos:column="27">Snowball</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">NUnit</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">Framework</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Sando</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">Core</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Sando</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">DependencyInjection</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">Sando</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">ExtensionContracts</name><op:operator pos:line="9" pos:column="31">.</op:operator><name pos:line="9" pos:column="32">ProgramElementContracts</name></name>;</using>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">Sando</name><op:operator pos:line="10" pos:column="12">.</op:operator><name pos:line="10" pos:column="13">ExtensionContracts</name><op:operator pos:line="10" pos:column="31">.</op:operator><name pos:line="10" pos:column="32">ResultsReordererContracts</name></name>;</using>
<using pos:line="11" pos:column="1">using <name><name pos:line="11" pos:column="7">Sando</name><op:operator pos:line="11" pos:column="12">.</op:operator><name pos:line="11" pos:column="13">Indexer</name></name>;</using>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">Sando</name><op:operator pos:line="12" pos:column="12">.</op:operator><name pos:line="12" pos:column="13">Indexer</name><op:operator pos:line="12" pos:column="20">.</op:operator><name pos:line="12" pos:column="21">Searching</name></name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">Sando</name><op:operator pos:line="13" pos:column="12">.</op:operator><name pos:line="13" pos:column="13">Indexer</name><op:operator pos:line="13" pos:column="20">.</op:operator><name pos:line="13" pos:column="21">Searching</name><op:operator pos:line="13" pos:column="30">.</op:operator><name pos:line="13" pos:column="31">Criteria</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">Sando</name><op:operator pos:line="14" pos:column="12">.</op:operator><name pos:line="14" pos:column="13">SearchEngine</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">Sando</name><op:operator pos:line="15" pos:column="12">.</op:operator><name pos:line="15" pos:column="13">UI</name><op:operator pos:line="15" pos:column="15">.</op:operator><name pos:line="15" pos:column="16">Monitoring</name></name>;</using>
<using pos:line="16" pos:column="1">using <name pos:line="16" pos:column="7">UnitTestHelpers</name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">Sando</name><op:operator pos:line="17" pos:column="12">.</op:operator><name pos:line="17" pos:column="13">Recommender</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">Sando</name><op:operator pos:line="18" pos:column="12">.</op:operator><name pos:line="18" pos:column="13">Core</name><op:operator pos:line="18" pos:column="17">.</op:operator><name pos:line="18" pos:column="18">Tools</name></name>;</using>

<namespace pos:line="20" pos:column="1">namespace <name><name pos:line="20" pos:column="11">Sando</name><op:operator pos:line="20" pos:column="16">.</op:operator><name pos:line="20" pos:column="17">IntegrationTests</name><op:operator pos:line="20" pos:column="33">.</op:operator><name pos:line="20" pos:column="34">Search</name></name>
<block pos:line="21" pos:column="1">{
	<class><attribute pos:line="22" pos:column="9">[<expr><name pos:line="22" pos:column="10">TestFixture</name></expr>]</attribute>
	<specifier pos:line="23" pos:column="9">public</specifier> class <name pos:line="23" pos:column="22">SelfSearchTest</name> <super pos:line="23" pos:column="37">: <name pos:line="23" pos:column="39">AutomaticallyIndexingTestClass</name></super>
	<block pos:line="24" pos:column="9">{

        <comment type="line" pos:line="26" pos:column="9">//document add field should find CustomFieldTest.GetLuceneDocument near top</comment>
        <function><type><attribute pos:line="27" pos:column="9">[<expr><name pos:line="27" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="28" pos:column="9">public</specifier> <name pos:line="28" pos:column="16">void</name></type> <name pos:line="28" pos:column="21">FindBodyText</name><parameter_list pos:line="28" pos:column="33">()</parameter_list>
        <block pos:line="29" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="30" pos:column="13">string</name></type> <name pos:line="30" pos:column="20">keywords</name> <init pos:line="30" pos:column="29">= <expr><lit:literal type="string" pos:line="30" pos:column="31">"document add"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="31" pos:column="13">var</name></type> <name pos:line="31" pos:column="17">expectedLowestRank</name> <init pos:line="31" pos:column="36">= <expr><lit:literal type="number" pos:line="31" pos:column="38">10</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="32" pos:column="13">Predicate</name><argument_list pos:line="32" pos:column="22">&lt;<argument><name pos:line="32" pos:column="23">CodeSearchResult</name></argument>&gt;</argument_list></name></type> <name pos:line="32" pos:column="41">predicate</name> <init pos:line="32" pos:column="51">= <expr><lambda><name pos:line="32" pos:column="53">el</name> <op:operator pos:line="32" pos:column="56">=&gt;</op:operator> <name><name pos:line="32" pos:column="59">el</name><op:operator pos:line="32" pos:column="61">.</op:operator><name pos:line="32" pos:column="62">ProgramElement</name><op:operator pos:line="32" pos:column="76">.</op:operator><name pos:line="32" pos:column="77">ProgramElementType</name></name> <op:operator pos:line="32" pos:column="96">==</op:operator> <call><name><name pos:line="32" pos:column="99">ProgramElementType</name><op:operator pos:line="32" pos:column="117">.</op:operator><name pos:line="32" pos:column="118">Method</name> <type:modifier pos:line="32" pos:column="125">&amp;&amp;</type:modifier></name> <argument_list pos:line="32" pos:column="128">(<argument><expr><name><name pos:line="32" pos:column="129">el</name><op:operator pos:line="32" pos:column="131">.</op:operator><name pos:line="32" pos:column="132">ProgramElement</name><op:operator pos:line="32" pos:column="146">.</op:operator><name pos:line="32" pos:column="147">Name</name></name> <op:operator pos:line="32" pos:column="152">==</op:operator> <lit:literal type="string" pos:line="32" pos:column="155">"GetLuceneDocument"</lit:literal></expr></argument>)</argument_list></call></lambda></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="33" pos:column="13">EnsureRankingPrettyGood</name><argument_list pos:line="33" pos:column="36">(<argument><expr><name pos:line="33" pos:column="37">keywords</name></expr></argument>, <argument><expr><name pos:line="33" pos:column="47">predicate</name></expr></argument>, <argument><expr><name pos:line="33" pos:column="58">expectedLowestRank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>


        <function><type><attribute pos:line="37" pos:column="9">[<expr><name pos:line="37" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="38" pos:column="9">public</specifier> <name pos:line="38" pos:column="16">void</name></type> <name pos:line="38" pos:column="21">QuotedSearchNoResults</name><parameter_list pos:line="38" pos:column="42">()</parameter_list>
        <block pos:line="39" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="40" pos:column="13">string</name></type> <name pos:line="40" pos:column="20">keywords</name> <init pos:line="40" pos:column="29">= <expr><lit:literal type="string" pos:line="40" pos:column="31">"\"frigging"</lit:literal><op:operator pos:line="40" pos:column="43">+</op:operator><lit:literal type="string" pos:line="40" pos:column="44">"NoResultsMahn\""</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="41" pos:column="13">var</name></type> <name pos:line="41" pos:column="17">expectedLowestRank</name> <init pos:line="41" pos:column="36">= <expr><lit:literal type="number" pos:line="41" pos:column="38">0</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="42" pos:column="13">Predicate</name><argument_list pos:line="42" pos:column="22">&lt;<argument><name pos:line="42" pos:column="23">CodeSearchResult</name></argument>&gt;</argument_list></name></type> <name pos:line="42" pos:column="41">predicate</name> <init pos:line="42" pos:column="51">= <expr><lambda><name pos:line="42" pos:column="53">el</name> <op:operator pos:line="42" pos:column="56">=&gt;</op:operator> <name><name pos:line="42" pos:column="59">el</name><op:operator pos:line="42" pos:column="61">.</op:operator><name pos:line="42" pos:column="62">ProgramElement</name><op:operator pos:line="42" pos:column="76">.</op:operator><name pos:line="42" pos:column="77">ProgramElementType</name></name> <op:operator pos:line="42" pos:column="96">==</op:operator> <call><name><name pos:line="42" pos:column="99">ProgramElementType</name><op:operator pos:line="42" pos:column="117">.</op:operator><name pos:line="42" pos:column="118">Class</name> <type:modifier pos:line="42" pos:column="124">&amp;&amp;</type:modifier></name> <argument_list pos:line="42" pos:column="127">(<argument><expr><name><name pos:line="42" pos:column="128">el</name><op:operator pos:line="42" pos:column="130">.</op:operator><name pos:line="42" pos:column="131">ProgramElement</name><op:operator pos:line="42" pos:column="145">.</op:operator><name pos:line="42" pos:column="146">Name</name></name> <op:operator pos:line="42" pos:column="151">==</op:operator> <lit:literal type="string" pos:line="42" pos:column="154">"CppHeaderElementResolver"</lit:literal></expr></argument>)</argument_list></call></lambda></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="43" pos:column="13">EnsureRankingPrettyGood</name><argument_list pos:line="43" pos:column="36">(<argument><expr><name pos:line="43" pos:column="37">keywords</name></expr></argument>, <argument><expr><name pos:line="43" pos:column="47">predicate</name></expr></argument>, <argument><expr><name pos:line="43" pos:column="58">expectedLowestRank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="44" pos:column="13">Assert</name><op:operator pos:line="44" pos:column="19">.</op:operator><name pos:line="44" pos:column="20">IsTrue</name></name><argument_list pos:line="44" pos:column="26">(<argument><expr><call><name><name pos:line="44" pos:column="27">_myMessage</name><op:operator pos:line="44" pos:column="37">.</op:operator><name pos:line="44" pos:column="38">Contains</name></name><argument_list pos:line="44" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="44" pos:column="47">"No results"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="47" pos:column="9">[<expr><name pos:line="47" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="48" pos:column="9">public</specifier> <name pos:line="48" pos:column="16">void</name></type> <name pos:line="48" pos:column="21">QuotedNoQuotesWithQuotesInside</name><parameter_list pos:line="48" pos:column="51">()</parameter_list>
        <block pos:line="49" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="50" pos:column="13">string</name></type> <name pos:line="50" pos:column="20">keywords</name> <init pos:line="50" pos:column="29">= <expr><lit:literal type="string" pos:line="50" pos:column="31">"\"return \\\"..\\\\\\\\..\\\\\\\\Parser\\\";\""</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="51" pos:column="13">var</name></type> <name pos:line="51" pos:column="17">expectedLowestRank</name> <init pos:line="51" pos:column="36">= <expr><lit:literal type="number" pos:line="51" pos:column="38">5</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="52" pos:column="13">Predicate</name><argument_list pos:line="52" pos:column="22">&lt;<argument><name pos:line="52" pos:column="23">CodeSearchResult</name></argument>&gt;</argument_list></name></type> <name pos:line="52" pos:column="41">predicate</name> <init pos:line="52" pos:column="51">= <expr><lambda><name pos:line="52" pos:column="53">el</name> <op:operator pos:line="52" pos:column="56">=&gt;</op:operator> <name><name pos:line="52" pos:column="59">el</name><op:operator pos:line="52" pos:column="61">.</op:operator><name pos:line="52" pos:column="62">ProgramElement</name><op:operator pos:line="52" pos:column="76">.</op:operator><name pos:line="52" pos:column="77">ProgramElementType</name></name> <op:operator pos:line="52" pos:column="96">==</op:operator> <call><name><name pos:line="52" pos:column="99">ProgramElementType</name><op:operator pos:line="52" pos:column="117">.</op:operator><name pos:line="52" pos:column="118">Method</name> <type:modifier pos:line="52" pos:column="125">&amp;&amp;</type:modifier></name> <argument_list pos:line="52" pos:column="128">(<argument><expr><name><name pos:line="52" pos:column="129">el</name><op:operator pos:line="52" pos:column="131">.</op:operator><name pos:line="52" pos:column="132">ProgramElement</name><op:operator pos:line="52" pos:column="146">.</op:operator><name pos:line="52" pos:column="147">Name</name></name> <op:operator pos:line="52" pos:column="152">==</op:operator> <lit:literal type="string" pos:line="52" pos:column="155">"GetFilesDirectory"</lit:literal></expr></argument>)</argument_list></call></lambda></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="53" pos:column="13">EnsureRankingPrettyGood</name><argument_list pos:line="53" pos:column="36">(<argument><expr><name pos:line="53" pos:column="37">keywords</name></expr></argument>, <argument><expr><name pos:line="53" pos:column="47">predicate</name></expr></argument>, <argument><expr><name pos:line="53" pos:column="58">expectedLowestRank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>            
        }</block></function>


        <comment type="line" pos:line="57" pos:column="9">//"Debug.WriteLine(string.Format("{0}:\t{1}\t{2}\t{3}\t{4}","</comment>
        <function><type><attribute pos:line="58" pos:column="9">[<expr><name pos:line="58" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="59" pos:column="9">public</specifier> <name pos:line="59" pos:column="16">void</name></type> <name pos:line="59" pos:column="21">QueryShouldGetSomeResults</name><parameter_list pos:line="59" pos:column="46">()</parameter_list>
        <block pos:line="60" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="61" pos:column="13">string</name></type> <name pos:line="61" pos:column="20">keywords</name> <init pos:line="61" pos:column="29">= <expr><lit:literal type="string" pos:line="61" pos:column="31">"\"Debug.WriteLine(string.Format(\"{0}:\\t{1}\\t{2}\\t{3}\\t{4}\",\""</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="62" pos:column="13">var</name></type> <name pos:line="62" pos:column="17">expectedLowestRank</name> <init pos:line="62" pos:column="36">= <expr><lit:literal type="number" pos:line="62" pos:column="38">20</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="63" pos:column="13">Predicate</name><argument_list pos:line="63" pos:column="22">&lt;<argument><name pos:line="63" pos:column="23">CodeSearchResult</name></argument>&gt;</argument_list></name></type> <name pos:line="63" pos:column="41">predicate</name> <init pos:line="63" pos:column="51">= <expr><lambda><name pos:line="63" pos:column="53">el</name> <op:operator pos:line="63" pos:column="56">=&gt;</op:operator> <name><name pos:line="63" pos:column="59">el</name><op:operator pos:line="63" pos:column="61">.</op:operator><name pos:line="63" pos:column="62">ProgramElement</name><op:operator pos:line="63" pos:column="76">.</op:operator><name pos:line="63" pos:column="77">ProgramElementType</name></name> <op:operator pos:line="63" pos:column="96">==</op:operator> <name><name pos:line="63" pos:column="99">ProgramElementType</name><op:operator pos:line="63" pos:column="117">.</op:operator><name pos:line="63" pos:column="118">Method</name></name></lambda></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="64" pos:column="13">EnsureRankingPrettyGood</name><argument_list pos:line="64" pos:column="36">(<argument><expr><name pos:line="64" pos:column="37">keywords</name></expr></argument>, <argument><expr><name pos:line="64" pos:column="47">predicate</name></expr></argument>, <argument><expr><name pos:line="64" pos:column="58">expectedLowestRank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>



        <function><type><attribute pos:line="69" pos:column="9">[<expr><name pos:line="69" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="70" pos:column="9">public</specifier> <name pos:line="70" pos:column="16">void</name></type> <name pos:line="70" pos:column="21">QuotedSearchWithNot</name><parameter_list pos:line="70" pos:column="40">()</parameter_list>
        <block pos:line="71" pos:column="9">{
            <comment type="line" pos:line="72" pos:column="13">//NOT supported as of now.  Only pure literal searches are supported now,</comment>
            <comment type="line" pos:line="73" pos:column="13">//meaning you cannot combine literal searches with anything else.</comment>
            <decl_stmt><decl><type><name pos:line="74" pos:column="13">string</name></type> <name pos:line="74" pos:column="20">keywords</name> <init pos:line="74" pos:column="29">= <expr><lit:literal type="string" pos:line="74" pos:column="31">"\"Search(\" -test"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="75" pos:column="13">var</name></type> <name pos:line="75" pos:column="17">expectedLowestRank</name> <init pos:line="75" pos:column="36">= <expr><lit:literal type="number" pos:line="75" pos:column="38">2</lit:literal></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="77" pos:column="13">//Predicate&lt;CodeSearchResult&gt; predicate = el =&gt; el.ProgramElement.ProgramElementType == ProgramElementType.Method &amp;&amp; (el.ProgramElement.Name == "Search");</comment>
            <comment type="line" pos:line="78" pos:column="13">//EnsureRankingPrettyGood(keywords, predicate, expectedLowestRank);</comment>
        }</block></function>

        <function><type><attribute pos:line="81" pos:column="9">[<expr><name pos:line="81" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="82" pos:column="9">public</specifier> <name pos:line="82" pos:column="16">void</name></type> <name pos:line="82" pos:column="21">QuotedSearchBroken</name><parameter_list pos:line="82" pos:column="39">()</parameter_list>
        <block pos:line="83" pos:column="9">{            
            <decl_stmt><decl><type><name pos:line="84" pos:column="13">string</name></type> <name pos:line="84" pos:column="20">keywords</name> <init pos:line="84" pos:column="29">= <expr><lit:literal type="string" pos:line="84" pos:column="31">"\"ServiceLocator.Resolve&lt;DTE2&gt;();\""</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="85" pos:column="13">var</name></type> <name pos:line="85" pos:column="17">expectedLowestRank</name> <init pos:line="85" pos:column="36">= <expr><lit:literal type="number" pos:line="85" pos:column="38">10</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="86" pos:column="13">Predicate</name><argument_list pos:line="86" pos:column="22">&lt;<argument><name pos:line="86" pos:column="23">CodeSearchResult</name></argument>&gt;</argument_list></name></type> <name pos:line="86" pos:column="41">predicate</name> <init pos:line="86" pos:column="51">= <expr><lambda><name pos:line="86" pos:column="53">el</name> <op:operator pos:line="86" pos:column="56">=&gt;</op:operator> <name><name pos:line="86" pos:column="59">el</name><op:operator pos:line="86" pos:column="61">.</op:operator><name pos:line="86" pos:column="62">ProgramElement</name><op:operator pos:line="86" pos:column="76">.</op:operator><name pos:line="86" pos:column="77">ProgramElementType</name></name> <op:operator pos:line="86" pos:column="96">==</op:operator> <call><name><name pos:line="86" pos:column="99">ProgramElementType</name><op:operator pos:line="86" pos:column="117">.</op:operator><name pos:line="86" pos:column="118">Method</name> <type:modifier pos:line="86" pos:column="125">&amp;&amp;</type:modifier></name> <argument_list pos:line="86" pos:column="128">(<argument><expr><name><name pos:line="86" pos:column="129">el</name><op:operator pos:line="86" pos:column="131">.</op:operator><name pos:line="86" pos:column="132">ProgramElement</name><op:operator pos:line="86" pos:column="146">.</op:operator><name pos:line="86" pos:column="147">Name</name></name> <op:operator pos:line="86" pos:column="152">==</op:operator> <lit:literal type="string" pos:line="86" pos:column="155">"InitDte2"</lit:literal></expr></argument>)</argument_list></call></lambda></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="87" pos:column="13">EnsureRankingPrettyGood</name><argument_list pos:line="87" pos:column="36">(<argument><expr><name pos:line="87" pos:column="37">keywords</name></expr></argument>, <argument><expr><name pos:line="87" pos:column="47">predicate</name></expr></argument>, <argument><expr><name pos:line="87" pos:column="58">expectedLowestRank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>            
        }</block></function>

        <function><type><attribute pos:line="90" pos:column="9">[<expr><name pos:line="90" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="91" pos:column="9">public</specifier> <name pos:line="91" pos:column="16">void</name></type> <name pos:line="91" pos:column="21">QuotedWithoutQuotes</name><parameter_list pos:line="91" pos:column="40">()</parameter_list>
        <block pos:line="92" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="93" pos:column="13">string</name></type> <name pos:line="93" pos:column="20">keywords</name> <init pos:line="93" pos:column="29">= <expr><lit:literal type="string" pos:line="93" pos:column="31">"ServiceLocator.Resolve&lt;DTE2&gt;();"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="94" pos:column="13">var</name></type> <name pos:line="94" pos:column="17">expectedLowestRank</name> <init pos:line="94" pos:column="36">= <expr><lit:literal type="number" pos:line="94" pos:column="38">10</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="95" pos:column="13">Predicate</name><argument_list pos:line="95" pos:column="22">&lt;<argument><name pos:line="95" pos:column="23">CodeSearchResult</name></argument>&gt;</argument_list></name></type> <name pos:line="95" pos:column="41">predicate</name> <init pos:line="95" pos:column="51">= <expr><lambda><name pos:line="95" pos:column="53">el</name> <op:operator pos:line="95" pos:column="56">=&gt;</op:operator> <name><name pos:line="95" pos:column="59">el</name><op:operator pos:line="95" pos:column="61">.</op:operator><name pos:line="95" pos:column="62">ProgramElement</name><op:operator pos:line="95" pos:column="76">.</op:operator><name pos:line="95" pos:column="77">ProgramElementType</name></name> <op:operator pos:line="95" pos:column="96">==</op:operator> <call><name><name pos:line="95" pos:column="99">ProgramElementType</name><op:operator pos:line="95" pos:column="117">.</op:operator><name pos:line="95" pos:column="118">Method</name> <type:modifier pos:line="95" pos:column="125">&amp;&amp;</type:modifier></name> <argument_list pos:line="95" pos:column="128">(<argument><expr><name><name pos:line="95" pos:column="129">el</name><op:operator pos:line="95" pos:column="131">.</op:operator><name pos:line="95" pos:column="132">ProgramElement</name><op:operator pos:line="95" pos:column="146">.</op:operator><name pos:line="95" pos:column="147">Name</name></name> <op:operator pos:line="95" pos:column="152">==</op:operator> <lit:literal type="string" pos:line="95" pos:column="155">"InitDte2"</lit:literal></expr></argument>)</argument_list></call></lambda></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="96" pos:column="13">EnsureRankingPrettyGood</name><argument_list pos:line="96" pos:column="36">(<argument><expr><name pos:line="96" pos:column="37">keywords</name></expr></argument>, <argument><expr><name pos:line="96" pos:column="47">predicate</name></expr></argument>, <argument><expr><name pos:line="96" pos:column="58">expectedLowestRank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="99" pos:column="9">[<expr><name pos:line="99" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="100" pos:column="9">public</specifier> <name pos:line="100" pos:column="16">void</name></type> <name pos:line="100" pos:column="21">QuotedSearchWithSpacesBroken</name><parameter_list pos:line="100" pos:column="49">()</parameter_list>
        <block pos:line="101" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="102" pos:column="13">string</name></type> <name pos:line="102" pos:column="20">keywords</name> <init pos:line="102" pos:column="29">= <expr><lit:literal type="string" pos:line="102" pos:column="31">"\"foreach (var term in SearchTerms)\""</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="103" pos:column="13">var</name></type> <name pos:line="103" pos:column="17">expectedLowestRank</name> <init pos:line="103" pos:column="36">= <expr><lit:literal type="number" pos:line="103" pos:column="38">10</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="104" pos:column="13">Predicate</name><argument_list pos:line="104" pos:column="22">&lt;<argument><name pos:line="104" pos:column="23">CodeSearchResult</name></argument>&gt;</argument_list></name></type> <name pos:line="104" pos:column="41">predicate</name> <init pos:line="104" pos:column="51">= <expr><lambda><name pos:line="104" pos:column="53">el</name> <op:operator pos:line="104" pos:column="56">=&gt;</op:operator> <name><name pos:line="104" pos:column="59">el</name><op:operator pos:line="104" pos:column="61">.</op:operator><name pos:line="104" pos:column="62">ProgramElement</name><op:operator pos:line="104" pos:column="76">.</op:operator><name pos:line="104" pos:column="77">ProgramElementType</name></name> <op:operator pos:line="104" pos:column="96">==</op:operator> <call><name><name pos:line="104" pos:column="99">ProgramElementType</name><op:operator pos:line="104" pos:column="117">.</op:operator><name pos:line="104" pos:column="118">Method</name> <type:modifier pos:line="104" pos:column="125">&amp;&amp;</type:modifier></name> <argument_list pos:line="104" pos:column="128">(<argument><expr><name><name pos:line="104" pos:column="129">el</name><op:operator pos:line="104" pos:column="131">.</op:operator><name pos:line="104" pos:column="132">ProgramElement</name><op:operator pos:line="104" pos:column="146">.</op:operator><name pos:line="104" pos:column="147">Name</name></name> <op:operator pos:line="104" pos:column="152">==</op:operator> <lit:literal type="string" pos:line="104" pos:column="155">"IsLiteralSearch"</lit:literal></expr></argument>)</argument_list></call></lambda></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="105" pos:column="13">EnsureRankingPrettyGood</name><argument_list pos:line="105" pos:column="36">(<argument><expr><name pos:line="105" pos:column="37">keywords</name></expr></argument>, <argument><expr><name pos:line="105" pos:column="47">predicate</name></expr></argument>, <argument><expr><name pos:line="105" pos:column="58">expectedLowestRank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="108" pos:column="9">[<expr><name pos:line="108" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="109" pos:column="9">public</specifier> <name pos:line="109" pos:column="16">void</name></type> <name pos:line="109" pos:column="21">ExcludeTestIfClassNameHasTest</name><parameter_list pos:line="109" pos:column="50">()</parameter_list>
        <block pos:line="110" pos:column="9">{            
            <decl_stmt><decl><type><name pos:line="111" pos:column="13">string</name></type> <name pos:line="111" pos:column="20">keywords</name> <init pos:line="111" pos:column="29">= <expr><lit:literal type="string" pos:line="111" pos:column="31">"reorder search results -test"</lit:literal></expr></init></decl>;</decl_stmt>            
            <decl_stmt><decl><type><name pos:line="112" pos:column="13">var</name></type> <name pos:line="112" pos:column="17">expectedLowestRank</name> <init pos:line="112" pos:column="36">= <expr><lit:literal type="number" pos:line="112" pos:column="38">20</lit:literal></expr></init></decl>;</decl_stmt>
            <try pos:line="113" pos:column="13">try<block pos:line="113" pos:column="16">{
                <decl_stmt><decl><type><name><name pos:line="114" pos:column="17">Predicate</name><argument_list pos:line="114" pos:column="26">&lt;<argument><name pos:line="114" pos:column="27">CodeSearchResult</name></argument>&gt;</argument_list></name></type> <name pos:line="114" pos:column="45">predicate</name> <init pos:line="114" pos:column="55">= <expr><lambda><name pos:line="114" pos:column="57">el</name> <op:operator pos:line="114" pos:column="60">=&gt;</op:operator> <name><name pos:line="114" pos:column="63">el</name><op:operator pos:line="114" pos:column="65">.</op:operator><name pos:line="114" pos:column="66">ProgramElement</name><op:operator pos:line="114" pos:column="80">.</op:operator><name pos:line="114" pos:column="81">ProgramElementType</name></name> <op:operator pos:line="114" pos:column="100">==</op:operator> <call><name><name pos:line="114" pos:column="103">ProgramElementType</name><op:operator pos:line="114" pos:column="121">.</op:operator><name pos:line="114" pos:column="122">Method</name> <type:modifier pos:line="114" pos:column="129">&amp;&amp;</type:modifier></name> <argument_list pos:line="114" pos:column="132">(<argument><expr><name><name pos:line="114" pos:column="133">el</name><op:operator pos:line="114" pos:column="135">.</op:operator><name pos:line="114" pos:column="136">ProgramElement</name><op:operator pos:line="114" pos:column="150">.</op:operator><name pos:line="114" pos:column="151">Name</name></name> <op:operator pos:line="114" pos:column="156">==</op:operator> <lit:literal type="string" pos:line="114" pos:column="159">"ReorderSearchResults"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="114" pos:column="183">&amp;&amp;</op:operator> <op:operator pos:line="114" pos:column="186">(</op:operator><op:operator pos:line="114" pos:column="187">(</op:operator><name><name pos:line="114" pos:column="188">el</name><op:operator pos:line="114" pos:column="190">.</op:operator><name pos:line="114" pos:column="191">ProgramElement</name></name> <op:operator pos:line="114" pos:column="206">as</op:operator> <name pos:line="114" pos:column="209">MethodElement</name><op:operator pos:line="114" pos:column="222">)</op:operator><op:operator pos:line="114" pos:column="223">.</op:operator><call><name><name pos:line="114" pos:column="224">ClassName</name><op:operator pos:line="114" pos:column="233">.</op:operator><name pos:line="114" pos:column="234">Contains</name></name><argument_list pos:line="114" pos:column="242">(<argument><expr><lit:literal type="string" pos:line="114" pos:column="243">"Test"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="114" pos:column="250">)</op:operator></lambda></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name pos:line="115" pos:column="17">EnsureRankingPrettyGood</name><argument_list pos:line="115" pos:column="40">(<argument><expr><name pos:line="115" pos:column="41">keywords</name></expr></argument>, <argument><expr><name pos:line="115" pos:column="51">predicate</name></expr></argument>, <argument><expr><name pos:line="115" pos:column="62">expectedLowestRank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                
            }</block><catch pos:line="116" pos:column="14">catch<parameter_list pos:line="116" pos:column="19">(<param><decl><type><name pos:line="116" pos:column="20">Exception</name></type> <name pos:line="116" pos:column="30">e</name></decl></param>)</parameter_list><block pos:line="116" pos:column="32">{
                <comment type="line" pos:line="117" pos:column="17">//expected</comment>
                <return pos:line="118" pos:column="17">return;</return>
            }</block></catch></try> 
            <expr_stmt><expr><call><name><name pos:line="120" pos:column="13">Assert</name><op:operator pos:line="120" pos:column="19">.</op:operator><name pos:line="120" pos:column="20">IsTrue</name></name><argument_list pos:line="120" pos:column="26">(<argument><expr><lit:literal type="boolean" pos:line="120" pos:column="27">false</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="120" pos:column="34">"Should fail to find this method "</lit:literal><op:operator pos:line="120" pos:column="68">+</op:operator><call><name pos:line="120" pos:column="69">PrintFailInformation</name><argument_list pos:line="120" pos:column="89">(<argument><expr><lit:literal type="boolean" pos:line="120" pos:column="90">false</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>        

		<function><type><attribute pos:line="123" pos:column="17">[<expr><name pos:line="123" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="124" pos:column="17">public</specifier> <name pos:line="124" pos:column="24">void</name></type> <name pos:line="124" pos:column="29">ElementNameSearchesInTop3</name><parameter_list pos:line="124" pos:column="54">()</parameter_list>
		<block pos:line="125" pos:column="17">{
            <decl_stmt><decl><type><name pos:line="126" pos:column="13">string</name></type> <name pos:line="126" pos:column="20">keywords</name> <init pos:line="126" pos:column="29">= <expr><lit:literal type="string" pos:line="126" pos:column="31">"header element resolver cpp"</lit:literal></expr></init></decl>;</decl_stmt>
		    <decl_stmt><decl><type><name pos:line="127" pos:column="21">var</name></type> <name pos:line="127" pos:column="25">expectedLowestRank</name> <init pos:line="127" pos:column="44">= <expr><lit:literal type="number" pos:line="127" pos:column="46">3</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name pos:line="128" pos:column="25">Predicate</name><argument_list pos:line="128" pos:column="34">&lt;<argument><name pos:line="128" pos:column="35">CodeSearchResult</name></argument>&gt;</argument_list></name></type> <name pos:line="128" pos:column="53">predicate</name> <init pos:line="128" pos:column="63">= <expr><lambda><name pos:line="128" pos:column="65">el</name> <op:operator pos:line="128" pos:column="68">=&gt;</op:operator> <name><name pos:line="128" pos:column="71">el</name><op:operator pos:line="128" pos:column="73">.</op:operator><name pos:line="128" pos:column="74">ProgramElement</name><op:operator pos:line="128" pos:column="88">.</op:operator><name pos:line="128" pos:column="89">ProgramElementType</name></name> <op:operator pos:line="128" pos:column="108">==</op:operator> <call><name><name pos:line="128" pos:column="111">ProgramElementType</name><op:operator pos:line="128" pos:column="129">.</op:operator><name pos:line="128" pos:column="130">Class</name> <type:modifier pos:line="128" pos:column="136">&amp;&amp;</type:modifier></name> <argument_list pos:line="128" pos:column="139">(<argument><expr><name><name pos:line="128" pos:column="140">el</name><op:operator pos:line="128" pos:column="142">.</op:operator><name pos:line="128" pos:column="143">ProgramElement</name><op:operator pos:line="128" pos:column="157">.</op:operator><name pos:line="128" pos:column="158">Name</name></name> <op:operator pos:line="128" pos:column="163">==</op:operator> <lit:literal type="string" pos:line="128" pos:column="166">"CppHeaderElementResolver"</lit:literal></expr></argument>)</argument_list></call></lambda></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="129" pos:column="25">EnsureRankingPrettyGood</name><argument_list pos:line="129" pos:column="48">(<argument><expr><name pos:line="129" pos:column="49">keywords</name></expr></argument>, <argument><expr><name pos:line="129" pos:column="59">predicate</name></expr></argument>, <argument><expr><name pos:line="129" pos:column="70">expectedLowestRank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

        <function><type><attribute pos:line="132" pos:column="9">[<expr><name pos:line="132" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="133" pos:column="9">public</specifier> <name pos:line="133" pos:column="16">void</name></type> <name pos:line="133" pos:column="21">UnderscoreSearch</name><parameter_list pos:line="133" pos:column="37">()</parameter_list>
        <block pos:line="134" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="135" pos:column="13">string</name></type> <name pos:line="135" pos:column="20">keywords</name> <init pos:line="135" pos:column="29">= <expr><lit:literal type="string" pos:line="135" pos:column="31">"solutionEvents"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="136" pos:column="13">var</name></type> <name pos:line="136" pos:column="17">expectedLowestRank</name> <init pos:line="136" pos:column="36">= <expr><lit:literal type="number" pos:line="136" pos:column="38">6</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="137" pos:column="13">Predicate</name><argument_list pos:line="137" pos:column="22">&lt;<argument><name pos:line="137" pos:column="23">CodeSearchResult</name></argument>&gt;</argument_list></name></type> <name pos:line="137" pos:column="41">predicate</name> <init pos:line="137" pos:column="51">= <expr><lambda><name pos:line="137" pos:column="53">el</name> <op:operator pos:line="137" pos:column="56">=&gt;</op:operator> <name><name pos:line="137" pos:column="59">el</name><op:operator pos:line="137" pos:column="61">.</op:operator><name pos:line="137" pos:column="62">ProgramElement</name><op:operator pos:line="137" pos:column="76">.</op:operator><name pos:line="137" pos:column="77">ProgramElementType</name></name> <op:operator pos:line="137" pos:column="96">==</op:operator> <call><name><name pos:line="137" pos:column="99">ProgramElementType</name><op:operator pos:line="137" pos:column="117">.</op:operator><name pos:line="137" pos:column="118">Field</name> <type:modifier pos:line="137" pos:column="124">&amp;&amp;</type:modifier></name> <argument_list pos:line="137" pos:column="127">(<argument><expr><name><name pos:line="137" pos:column="128">el</name><op:operator pos:line="137" pos:column="130">.</op:operator><name pos:line="137" pos:column="131">ProgramElement</name><op:operator pos:line="137" pos:column="145">.</op:operator><name pos:line="137" pos:column="146">Name</name></name> <op:operator pos:line="137" pos:column="151">==</op:operator> <lit:literal type="string" pos:line="137" pos:column="154">"_solutionEvents"</lit:literal></expr></argument>)</argument_list></call></lambda></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="138" pos:column="13">EnsureRankingPrettyGood</name><argument_list pos:line="138" pos:column="36">(<argument><expr><name pos:line="138" pos:column="37">keywords</name></expr></argument>, <argument><expr><name pos:line="138" pos:column="47">predicate</name></expr></argument>, <argument><expr><name pos:line="138" pos:column="58">expectedLowestRank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="139" pos:column="13">keywords</name> <op:operator pos:line="139" pos:column="22">=</op:operator> <lit:literal type="string" pos:line="139" pos:column="24">"_solutionEvents"</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="140" pos:column="13">predicate</name> <op:operator pos:line="140" pos:column="23">=</op:operator> <lambda><name pos:line="140" pos:column="25">el</name> <op:operator pos:line="140" pos:column="28">=&gt;</op:operator> <name><name pos:line="140" pos:column="31">el</name><op:operator pos:line="140" pos:column="33">.</op:operator><name pos:line="140" pos:column="34">ProgramElement</name><op:operator pos:line="140" pos:column="48">.</op:operator><name pos:line="140" pos:column="49">ProgramElementType</name></name> <op:operator pos:line="140" pos:column="68">==</op:operator> <call><name><name pos:line="140" pos:column="71">ProgramElementType</name><op:operator pos:line="140" pos:column="89">.</op:operator><name pos:line="140" pos:column="90">Field</name> <type:modifier pos:line="140" pos:column="96">&amp;&amp;</type:modifier></name> <argument_list pos:line="140" pos:column="99">(<argument><expr><name><name pos:line="140" pos:column="100">el</name><op:operator pos:line="140" pos:column="102">.</op:operator><name pos:line="140" pos:column="103">ProgramElement</name><op:operator pos:line="140" pos:column="117">.</op:operator><name pos:line="140" pos:column="118">Name</name></name> <op:operator pos:line="140" pos:column="123">==</op:operator> <lit:literal type="string" pos:line="140" pos:column="126">"_solutionEvents"</lit:literal></expr></argument>)</argument_list></call></lambda></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="141" pos:column="13">EnsureRankingPrettyGood</name><argument_list pos:line="141" pos:column="36">(<argument><expr><name pos:line="141" pos:column="37">keywords</name></expr></argument>, <argument><expr><name pos:line="141" pos:column="47">predicate</name></expr></argument>, <argument><expr><name pos:line="141" pos:column="58">expectedLowestRank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block></function>

        <function><type><attribute pos:line="145" pos:column="9">[<expr><name pos:line="145" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="146" pos:column="9">public</specifier> <name pos:line="146" pos:column="16">void</name></type> <name pos:line="146" pos:column="21">FileTypeWithTerm</name><parameter_list pos:line="146" pos:column="37">()</parameter_list>
        <block pos:line="147" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="148" pos:column="13">string</name></type> <name pos:line="148" pos:column="20">keywords</name> <init pos:line="148" pos:column="29">= <expr><lit:literal type="string" pos:line="148" pos:column="31">"hello world file:cpp"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="149" pos:column="13">var</name></type> <name pos:line="149" pos:column="17">expectedLowestRank</name> <init pos:line="149" pos:column="36">= <expr><lit:literal type="number" pos:line="149" pos:column="38">2</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="150" pos:column="13">Predicate</name><argument_list pos:line="150" pos:column="22">&lt;<argument><name pos:line="150" pos:column="23">CodeSearchResult</name></argument>&gt;</argument_list></name></type> <name pos:line="150" pos:column="41">predicate</name> <init pos:line="150" pos:column="51">= <expr><lambda><name pos:line="150" pos:column="53">el</name> <op:operator pos:line="150" pos:column="56">=&gt;</op:operator> <name><name pos:line="150" pos:column="59">el</name><op:operator pos:line="150" pos:column="61">.</op:operator><name pos:line="150" pos:column="62">ProgramElement</name><op:operator pos:line="150" pos:column="76">.</op:operator><name pos:line="150" pos:column="77">ProgramElementType</name></name> <op:operator pos:line="150" pos:column="96">==</op:operator> <call><name><name pos:line="150" pos:column="99">ProgramElementType</name><op:operator pos:line="150" pos:column="117">.</op:operator><name pos:line="150" pos:column="118">Method</name> <type:modifier pos:line="150" pos:column="125">&amp;&amp;</type:modifier></name> <argument_list pos:line="150" pos:column="128">(<argument><expr><name><name pos:line="150" pos:column="129">el</name><op:operator pos:line="150" pos:column="131">.</op:operator><name pos:line="150" pos:column="132">ProgramElement</name><op:operator pos:line="150" pos:column="146">.</op:operator><name pos:line="150" pos:column="147">Name</name></name> <op:operator pos:line="150" pos:column="152">==</op:operator> <lit:literal type="string" pos:line="150" pos:column="155">"MyFunction"</lit:literal></expr></argument>)</argument_list></call></lambda></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="151" pos:column="13">EnsureRankingPrettyGood</name><argument_list pos:line="151" pos:column="36">(<argument><expr><name pos:line="151" pos:column="37">keywords</name></expr></argument>, <argument><expr><name pos:line="151" pos:column="47">predicate</name></expr></argument>, <argument><expr><name pos:line="151" pos:column="58">expectedLowestRank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                
        }</block></function>

        <function><type><attribute pos:line="154" pos:column="9">[<expr><name pos:line="154" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="155" pos:column="9">public</specifier> <name pos:line="155" pos:column="16">void</name></type> <name pos:line="155" pos:column="21">FileTypeH</name><parameter_list pos:line="155" pos:column="30">()</parameter_list>
        <block pos:line="156" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="157" pos:column="13">string</name></type> <name pos:line="157" pos:column="20">keywords</name> <init pos:line="157" pos:column="29">= <expr><lit:literal type="string" pos:line="157" pos:column="31">"session file info file:h"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="158" pos:column="13">var</name></type> <name pos:line="158" pos:column="17">expectedLowestRank</name> <init pos:line="158" pos:column="36">= <expr><lit:literal type="number" pos:line="158" pos:column="38">3</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="159" pos:column="13">Predicate</name><argument_list pos:line="159" pos:column="22">&lt;<argument><name pos:line="159" pos:column="23">CodeSearchResult</name></argument>&gt;</argument_list></name></type> <name pos:line="159" pos:column="41">predicate</name> <init pos:line="159" pos:column="51">= <expr><lambda><name pos:line="159" pos:column="53">el</name> <op:operator pos:line="159" pos:column="56">=&gt;</op:operator> <name><name pos:line="159" pos:column="59">el</name><op:operator pos:line="159" pos:column="61">.</op:operator><name pos:line="159" pos:column="62">ProgramElement</name><op:operator pos:line="159" pos:column="76">.</op:operator><name pos:line="159" pos:column="77">ProgramElementType</name></name> <op:operator pos:line="159" pos:column="96">==</op:operator> <call><name><name pos:line="159" pos:column="99">ProgramElementType</name><op:operator pos:line="159" pos:column="117">.</op:operator><name pos:line="159" pos:column="118">Struct</name> <type:modifier pos:line="159" pos:column="125">&amp;&amp;</type:modifier></name> <argument_list pos:line="159" pos:column="128">(<argument><expr><name><name pos:line="159" pos:column="129">el</name><op:operator pos:line="159" pos:column="131">.</op:operator><name pos:line="159" pos:column="132">ProgramElement</name><op:operator pos:line="159" pos:column="146">.</op:operator><name pos:line="159" pos:column="147">Name</name></name> <op:operator pos:line="159" pos:column="152">==</op:operator> <lit:literal type="string" pos:line="159" pos:column="155">"sessionFileInfo"</lit:literal></expr></argument>)</argument_list></call></lambda></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="160" pos:column="13">EnsureRankingPrettyGood</name><argument_list pos:line="160" pos:column="36">(<argument><expr><name pos:line="160" pos:column="37">keywords</name></expr></argument>, <argument><expr><name pos:line="160" pos:column="47">predicate</name></expr></argument>, <argument><expr><name pos:line="160" pos:column="58">expectedLowestRank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="163" pos:column="9">[<expr><name pos:line="163" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="164" pos:column="9">public</specifier> <name pos:line="164" pos:column="16">void</name></type> <name pos:line="164" pos:column="21">FileTypeSearch</name><parameter_list pos:line="164" pos:column="35">()</parameter_list>
        <block pos:line="165" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="166" pos:column="13">string</name></type> <name pos:line="166" pos:column="20">keywords</name> <init pos:line="166" pos:column="29">= <expr><lit:literal type="string" pos:line="166" pos:column="31">"XmlMatchedTagsHighlighter filetype:cs"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="167" pos:column="13">var</name></type> <name pos:line="167" pos:column="17">expectedLowestRank</name> <init pos:line="167" pos:column="36">= <expr><lit:literal type="number" pos:line="167" pos:column="38">10</lit:literal></expr></init></decl>;</decl_stmt>
            <try pos:line="168" pos:column="13">try
            <block pos:line="169" pos:column="13">{
                <decl_stmt><decl><type><name><name pos:line="170" pos:column="17">Predicate</name><argument_list pos:line="170" pos:column="26">&lt;<argument><name pos:line="170" pos:column="27">CodeSearchResult</name></argument>&gt;</argument_list></name></type> <name pos:line="170" pos:column="45">predicate</name> <init pos:line="170" pos:column="55">= <expr><lambda><name pos:line="170" pos:column="57">el</name> <op:operator pos:line="170" pos:column="60">=&gt;</op:operator> <name><name pos:line="170" pos:column="63">el</name><op:operator pos:line="170" pos:column="65">.</op:operator><name pos:line="170" pos:column="66">ProgramElement</name><op:operator pos:line="170" pos:column="80">.</op:operator><name pos:line="170" pos:column="81">ProgramElementType</name></name> <op:operator pos:line="170" pos:column="100">==</op:operator> <call><name><name pos:line="170" pos:column="103">ProgramElementType</name><op:operator pos:line="170" pos:column="121">.</op:operator><name pos:line="170" pos:column="122">Method</name> <type:modifier pos:line="170" pos:column="129">&amp;&amp;</type:modifier></name> <argument_list pos:line="170" pos:column="132">(<argument><expr><name><name pos:line="170" pos:column="133">el</name><op:operator pos:line="170" pos:column="135">.</op:operator><name pos:line="170" pos:column="136">ProgramElement</name><op:operator pos:line="170" pos:column="150">.</op:operator><name pos:line="170" pos:column="151">Name</name></name> <op:operator pos:line="170" pos:column="156">==</op:operator> <lit:literal type="string" pos:line="170" pos:column="159">"getXmlMatchedTagsPos"</lit:literal></expr></argument>)</argument_list></call></lambda></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name pos:line="171" pos:column="17">EnsureRankingPrettyGood</name><argument_list pos:line="171" pos:column="40">(<argument><expr><name pos:line="171" pos:column="41">keywords</name></expr></argument>, <argument><expr><name pos:line="171" pos:column="51">predicate</name></expr></argument>, <argument><expr><name pos:line="171" pos:column="62">expectedLowestRank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="172" pos:column="17">Assert</name><op:operator pos:line="172" pos:column="23">.</op:operator><name pos:line="172" pos:column="24">IsTrue</name></name><argument_list pos:line="172" pos:column="30">(<argument><expr><lit:literal type="boolean" pos:line="172" pos:column="31">false</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="172" pos:column="38">"Should never reach this point. If it does, then it is finding a .cpp file when searching for only cs files"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch pos:line="174" pos:column="13">catch <parameter_list pos:line="174" pos:column="19">(<param><decl><type><name pos:line="174" pos:column="20">Exception</name></type> <name pos:line="174" pos:column="30">e</name></decl></param>)</parameter_list>
            <block pos:line="175" pos:column="13">{
                <comment type="line" pos:line="176" pos:column="17">//expected to fail</comment>
            }</block></catch></try>
        }</block></function>

	    <function><type><attribute pos:line="180" pos:column="13">[<expr><name pos:line="180" pos:column="14">Test</name></expr>]</attribute>
        <specifier pos:line="181" pos:column="9">public</specifier> <name pos:line="181" pos:column="16">void</name></type> <name pos:line="181" pos:column="21">TestSandoSearch</name><parameter_list pos:line="181" pos:column="36">()</parameter_list>
        <block pos:line="182" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="183" pos:column="13">string</name></type> <name pos:line="183" pos:column="20">keywords</name> <init pos:line="183" pos:column="29">= <expr><lit:literal type="string" pos:line="183" pos:column="31">"test sando search"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="184" pos:column="13">var</name></type> <name pos:line="184" pos:column="17">expectedLowestRank</name> <init pos:line="184" pos:column="36">= <expr><lit:literal type="number" pos:line="184" pos:column="38">3</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="185" pos:column="13">Predicate</name><argument_list pos:line="185" pos:column="22">&lt;<argument><name pos:line="185" pos:column="23">CodeSearchResult</name></argument>&gt;</argument_list></name></type> <name pos:line="185" pos:column="41">predicate</name> <init pos:line="185" pos:column="51">= <expr><lambda><name pos:line="185" pos:column="53">el</name> <op:operator pos:line="185" pos:column="56">=&gt;</op:operator> <name><name pos:line="185" pos:column="59">el</name><op:operator pos:line="185" pos:column="61">.</op:operator><name pos:line="185" pos:column="62">ProgramElement</name><op:operator pos:line="185" pos:column="76">.</op:operator><name pos:line="185" pos:column="77">ProgramElementType</name></name> <op:operator pos:line="185" pos:column="96">==</op:operator> <call><name><name pos:line="185" pos:column="99">ProgramElementType</name><op:operator pos:line="185" pos:column="117">.</op:operator><name pos:line="185" pos:column="118">Class</name> <type:modifier pos:line="185" pos:column="124">&amp;&amp;</type:modifier></name> <argument_list pos:line="185" pos:column="127">(<argument><expr><name><name pos:line="185" pos:column="128">el</name><op:operator pos:line="185" pos:column="130">.</op:operator><name pos:line="185" pos:column="131">ProgramElement</name><op:operator pos:line="185" pos:column="145">.</op:operator><name pos:line="185" pos:column="146">Name</name></name> <op:operator pos:line="185" pos:column="151">==</op:operator> <lit:literal type="string" pos:line="185" pos:column="154">"SelfSearchTest"</lit:literal></expr></argument>)</argument_list></call></lambda></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="186" pos:column="13">EnsureRankingPrettyGood</name><argument_list pos:line="186" pos:column="36">(<argument><expr><name pos:line="186" pos:column="37">keywords</name></expr></argument>, <argument><expr><name pos:line="186" pos:column="47">predicate</name></expr></argument>, <argument><expr><name pos:line="186" pos:column="58">expectedLowestRank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="189" pos:column="9">[<expr><name pos:line="189" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="190" pos:column="9">public</specifier> <name pos:line="190" pos:column="16">void</name></type> <name pos:line="190" pos:column="21">TestNoteSandoSearch</name><parameter_list pos:line="190" pos:column="40">()</parameter_list>
        <block pos:line="191" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="192" pos:column="13">string</name></type> <name pos:line="192" pos:column="20">keywords</name> <init pos:line="192" pos:column="29">= <expr><lit:literal type="string" pos:line="192" pos:column="31">"-test sando search"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="193" pos:column="13">var</name></type> <name pos:line="193" pos:column="17">expectedLowestRank</name> <init pos:line="193" pos:column="36">= <expr><lit:literal type="number" pos:line="193" pos:column="38">10</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="194" pos:column="13">Predicate</name><argument_list pos:line="194" pos:column="22">&lt;<argument><name pos:line="194" pos:column="23">CodeSearchResult</name></argument>&gt;</argument_list></name></type> <name pos:line="194" pos:column="41">predicate</name> <init pos:line="194" pos:column="51">= <expr><lambda><name pos:line="194" pos:column="53">el</name> <op:operator pos:line="194" pos:column="56">=&gt;</op:operator> <name><name pos:line="194" pos:column="59">el</name><op:operator pos:line="194" pos:column="61">.</op:operator><name pos:line="194" pos:column="62">ProgramElement</name><op:operator pos:line="194" pos:column="76">.</op:operator><name pos:line="194" pos:column="77">ProgramElementType</name></name> <op:operator pos:line="194" pos:column="96">==</op:operator> <call><name><name pos:line="194" pos:column="99">ProgramElementType</name><op:operator pos:line="194" pos:column="117">.</op:operator><name pos:line="194" pos:column="118">Class</name> <type:modifier pos:line="194" pos:column="124">&amp;&amp;</type:modifier></name> <argument_list pos:line="194" pos:column="127">(<argument><expr><name><name pos:line="194" pos:column="128">el</name><op:operator pos:line="194" pos:column="130">.</op:operator><name pos:line="194" pos:column="131">ProgramElement</name><op:operator pos:line="194" pos:column="145">.</op:operator><name pos:line="194" pos:column="146">Name</name></name> <op:operator pos:line="194" pos:column="151">==</op:operator> <lit:literal type="string" pos:line="194" pos:column="154">"SelfSearchTest"</lit:literal></expr></argument>)</argument_list></call></lambda></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="195" pos:column="13">var</name></type> <name pos:line="195" pos:column="17">codeSearcher</name> <init pos:line="195" pos:column="30">= <expr><op:operator pos:line="195" pos:column="32">new</op:operator> <call><name pos:line="195" pos:column="36">CodeSearcher</name><argument_list pos:line="195" pos:column="48">(<argument><expr><op:operator pos:line="195" pos:column="49">new</op:operator> <call><name pos:line="195" pos:column="53">IndexerSearcher</name><argument_list pos:line="195" pos:column="68">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="196" pos:column="13">List</name><argument_list pos:line="196" pos:column="17">&lt;<argument><name pos:line="196" pos:column="18">CodeSearchResult</name></argument>&gt;</argument_list></name></type> <name pos:line="196" pos:column="36">codeSearchResults</name> <init pos:line="196" pos:column="54">= <expr><call><name><name pos:line="196" pos:column="56">codeSearcher</name><op:operator pos:line="196" pos:column="68">.</op:operator><name pos:line="196" pos:column="69">Search</name></name><argument_list pos:line="196" pos:column="75">(<argument><expr><name pos:line="196" pos:column="76">keywords</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="197" pos:column="13">var</name></type> <name pos:line="197" pos:column="17">methodSearchResult</name> <init pos:line="197" pos:column="36">= <expr><call><name><name pos:line="197" pos:column="38">codeSearchResults</name><op:operator pos:line="197" pos:column="55">.</op:operator><name pos:line="197" pos:column="56">Find</name></name><argument_list pos:line="197" pos:column="60">(<argument><expr><name pos:line="197" pos:column="61">predicate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="198" pos:column="13">if <condition pos:line="198" pos:column="16">(<expr><name pos:line="198" pos:column="17">methodSearchResult</name> <op:operator pos:line="198" pos:column="36">!=</op:operator> <name pos:line="198" pos:column="39">null</name></expr>)</condition><then pos:line="198" pos:column="44">
            <block pos:line="199" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="200" pos:column="17">Assert</name><op:operator pos:line="200" pos:column="23">.</op:operator><name pos:line="200" pos:column="24">Fail</name></name><argument_list pos:line="200" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="200" pos:column="29">"Should not find anything that matches for this test: "</lit:literal> <op:operator pos:line="200" pos:column="85">+</op:operator> <name pos:line="200" pos:column="87">keywords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>


        <function><type><attribute pos:line="205" pos:column="9">[<expr><name pos:line="205" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="206" pos:column="9">public</specifier> <name pos:line="206" pos:column="16">void</name></type> <name pos:line="206" pos:column="21">TestSolutionOpened</name><parameter_list pos:line="206" pos:column="39">()</parameter_list>
        <block pos:line="207" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="208" pos:column="13">string</name></type> <name pos:line="208" pos:column="20">keywords</name> <init pos:line="208" pos:column="29">= <expr><lit:literal type="string" pos:line="208" pos:column="31">"RespondToSolutionOpened"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="209" pos:column="13">var</name></type> <name pos:line="209" pos:column="17">expectedLowestRank</name> <init pos:line="209" pos:column="36">= <expr><lit:literal type="number" pos:line="209" pos:column="38">2</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="210" pos:column="13">Predicate</name><argument_list pos:line="210" pos:column="22">&lt;<argument><name pos:line="210" pos:column="23">CodeSearchResult</name></argument>&gt;</argument_list></name></type> <name pos:line="210" pos:column="41">predicate</name> <init pos:line="210" pos:column="51">= <expr><lambda><name pos:line="210" pos:column="53">el</name> <op:operator pos:line="210" pos:column="56">=&gt;</op:operator> <name><name pos:line="210" pos:column="59">el</name><op:operator pos:line="210" pos:column="61">.</op:operator><name pos:line="210" pos:column="62">ProgramElement</name><op:operator pos:line="210" pos:column="76">.</op:operator><name pos:line="210" pos:column="77">ProgramElementType</name></name> <op:operator pos:line="210" pos:column="96">==</op:operator> <call><name><name pos:line="210" pos:column="99">ProgramElementType</name><op:operator pos:line="210" pos:column="117">.</op:operator><name pos:line="210" pos:column="118">Method</name> <type:modifier pos:line="210" pos:column="125">&amp;&amp;</type:modifier></name> <argument_list pos:line="210" pos:column="128">(<argument><expr><name><name pos:line="210" pos:column="129">el</name><op:operator pos:line="210" pos:column="131">.</op:operator><name pos:line="210" pos:column="132">ProgramElement</name><op:operator pos:line="210" pos:column="146">.</op:operator><name pos:line="210" pos:column="147">Name</name></name> <op:operator pos:line="210" pos:column="152">==</op:operator> <lit:literal type="string" pos:line="210" pos:column="155">"RespondToSolutionOpened"</lit:literal></expr></argument>)</argument_list></call></lambda></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="211" pos:column="13">EnsureRankingPrettyGood</name><argument_list pos:line="211" pos:column="36">(<argument><expr><name pos:line="211" pos:column="37">keywords</name></expr></argument>, <argument><expr><name pos:line="211" pos:column="47">predicate</name></expr></argument>, <argument><expr><name pos:line="211" pos:column="58">expectedLowestRank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="214" pos:column="9">[<expr><name pos:line="214" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="215" pos:column="9">public</specifier> <name pos:line="215" pos:column="16">void</name></type> <name pos:line="215" pos:column="21">TestSeveralSearchesOnSandoCodeBase</name><parameter_list pos:line="215" pos:column="55">()</parameter_list>
        <block pos:line="216" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="217" pos:column="13">string</name></type> <name pos:line="217" pos:column="20">keywords</name> <init pos:line="217" pos:column="29">= <expr><lit:literal type="string" pos:line="217" pos:column="31">"parse method"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="218" pos:column="13">var</name></type> <name pos:line="218" pos:column="17">expectedLowestRank</name> <init pos:line="218" pos:column="36">= <expr><lit:literal type="number" pos:line="218" pos:column="38">2</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="219" pos:column="13">Predicate</name><argument_list pos:line="219" pos:column="22">&lt;<argument><name pos:line="219" pos:column="23">CodeSearchResult</name></argument>&gt;</argument_list></name></type> <name pos:line="219" pos:column="41">predicate</name> <init pos:line="219" pos:column="51">= <expr><lambda><name pos:line="219" pos:column="53">el</name> <op:operator pos:line="219" pos:column="56">=&gt;</op:operator> <name><name pos:line="219" pos:column="59">el</name><op:operator pos:line="219" pos:column="61">.</op:operator><name pos:line="219" pos:column="62">ProgramElement</name><op:operator pos:line="219" pos:column="76">.</op:operator><name pos:line="219" pos:column="77">ProgramElementType</name></name> <op:operator pos:line="219" pos:column="96">==</op:operator> <call><name><name pos:line="219" pos:column="99">ProgramElementType</name><op:operator pos:line="219" pos:column="117">.</op:operator><name pos:line="219" pos:column="118">Method</name> <type:modifier pos:line="219" pos:column="125">&amp;&amp;</type:modifier></name> <argument_list pos:line="219" pos:column="128">(<argument><expr><name><name pos:line="219" pos:column="129">el</name><op:operator pos:line="219" pos:column="131">.</op:operator><name pos:line="219" pos:column="132">ProgramElement</name><op:operator pos:line="219" pos:column="146">.</op:operator><name pos:line="219" pos:column="147">Name</name></name> <op:operator pos:line="219" pos:column="152">==</op:operator> <lit:literal type="string" pos:line="219" pos:column="155">"ParseMethod"</lit:literal></expr></argument>)</argument_list></call></lambda></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="220" pos:column="13">EnsureRankingPrettyGood</name><argument_list pos:line="220" pos:column="36">(<argument><expr><name pos:line="220" pos:column="37">keywords</name></expr></argument>, <argument><expr><name pos:line="220" pos:column="47">predicate</name></expr></argument>, <argument><expr><name pos:line="220" pos:column="58">expectedLowestRank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="221" pos:column="13">keywords</name> <op:operator pos:line="221" pos:column="22">=</op:operator> <lit:literal type="string" pos:line="221" pos:column="24">"parse class"</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="222" pos:column="13">expectedLowestRank</name> <op:operator pos:line="222" pos:column="32">=</op:operator> <lit:literal type="number" pos:line="222" pos:column="34">2</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="223" pos:column="13">predicate</name> <op:operator pos:line="223" pos:column="23">=</op:operator> <lambda><name pos:line="223" pos:column="25">el</name> <op:operator pos:line="223" pos:column="28">=&gt;</op:operator> <name><name pos:line="223" pos:column="31">el</name><op:operator pos:line="223" pos:column="33">.</op:operator><name pos:line="223" pos:column="34">ProgramElement</name><op:operator pos:line="223" pos:column="48">.</op:operator><name pos:line="223" pos:column="49">ProgramElementType</name></name> <op:operator pos:line="223" pos:column="68">==</op:operator> <call><name><name pos:line="223" pos:column="71">ProgramElementType</name><op:operator pos:line="223" pos:column="89">.</op:operator><name pos:line="223" pos:column="90">Method</name> <type:modifier pos:line="223" pos:column="97">&amp;&amp;</type:modifier></name> <argument_list pos:line="223" pos:column="100">(<argument><expr><name><name pos:line="223" pos:column="101">el</name><op:operator pos:line="223" pos:column="103">.</op:operator><name pos:line="223" pos:column="104">ProgramElement</name><op:operator pos:line="223" pos:column="118">.</op:operator><name pos:line="223" pos:column="119">Name</name></name> <op:operator pos:line="223" pos:column="124">==</op:operator> <lit:literal type="string" pos:line="223" pos:column="127">"ParseClass"</lit:literal></expr></argument>)</argument_list></call></lambda></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="224" pos:column="13">EnsureRankingPrettyGood</name><argument_list pos:line="224" pos:column="36">(<argument><expr><name pos:line="224" pos:column="37">keywords</name></expr></argument>, <argument><expr><name pos:line="224" pos:column="47">predicate</name></expr></argument>, <argument><expr><name pos:line="224" pos:column="58">expectedLowestRank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="225" pos:column="13">keywords</name> <op:operator pos:line="225" pos:column="22">=</op:operator> <lit:literal type="string" pos:line="225" pos:column="24">"parse util"</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="226" pos:column="13">expectedLowestRank</name> <op:operator pos:line="226" pos:column="32">=</op:operator> <lit:literal type="number" pos:line="226" pos:column="34">3</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="227" pos:column="13">predicate</name> <op:operator pos:line="227" pos:column="23">=</op:operator> <lambda><name pos:line="227" pos:column="25">el</name> <op:operator pos:line="227" pos:column="28">=&gt;</op:operator> <name><name pos:line="227" pos:column="31">el</name><op:operator pos:line="227" pos:column="33">.</op:operator><name pos:line="227" pos:column="34">ProgramElement</name><op:operator pos:line="227" pos:column="48">.</op:operator><name pos:line="227" pos:column="49">ProgramElementType</name></name> <op:operator pos:line="227" pos:column="68">==</op:operator> <call><name><name pos:line="227" pos:column="71">ProgramElementType</name><op:operator pos:line="227" pos:column="89">.</op:operator><name pos:line="227" pos:column="90">Class</name> <type:modifier pos:line="227" pos:column="96">&amp;&amp;</type:modifier></name> <argument_list pos:line="227" pos:column="99">(<argument><expr><name><name pos:line="227" pos:column="100">el</name><op:operator pos:line="227" pos:column="102">.</op:operator><name pos:line="227" pos:column="103">ProgramElement</name><op:operator pos:line="227" pos:column="117">.</op:operator><name pos:line="227" pos:column="118">Name</name></name> <op:operator pos:line="227" pos:column="123">==</op:operator> <lit:literal type="string" pos:line="227" pos:column="126">"SrcMLParsingUtils"</lit:literal></expr></argument>)</argument_list></call></lambda></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="228" pos:column="13">EnsureRankingPrettyGood</name><argument_list pos:line="228" pos:column="36">(<argument><expr><name pos:line="228" pos:column="37">keywords</name></expr></argument>, <argument><expr><name pos:line="228" pos:column="47">predicate</name></expr></argument>, <argument><expr><name pos:line="228" pos:column="58">expectedLowestRank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="229" pos:column="13">keywords</name> <op:operator pos:line="229" pos:column="22">=</op:operator> <lit:literal type="string" pos:line="229" pos:column="24">"custom properties"</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="230" pos:column="13">expectedLowestRank</name> <op:operator pos:line="230" pos:column="32">=</op:operator> <lit:literal type="number" pos:line="230" pos:column="34">2</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="231" pos:column="13">predicate</name> <op:operator pos:line="231" pos:column="23">=</op:operator> <lambda><name pos:line="231" pos:column="25">el</name> <op:operator pos:line="231" pos:column="28">=&gt;</op:operator> <name><name pos:line="231" pos:column="31">el</name><op:operator pos:line="231" pos:column="33">.</op:operator><name pos:line="231" pos:column="34">ProgramElement</name><op:operator pos:line="231" pos:column="48">.</op:operator><name pos:line="231" pos:column="49">ProgramElementType</name></name> <op:operator pos:line="231" pos:column="68">==</op:operator> <call><name><name pos:line="231" pos:column="71">ProgramElementType</name><op:operator pos:line="231" pos:column="89">.</op:operator><name pos:line="231" pos:column="90">Method</name> <type:modifier pos:line="231" pos:column="97">&amp;&amp;</type:modifier></name> <argument_list pos:line="231" pos:column="100">(<argument><expr><name><name pos:line="231" pos:column="101">el</name><op:operator pos:line="231" pos:column="103">.</op:operator><name pos:line="231" pos:column="104">ProgramElement</name><op:operator pos:line="231" pos:column="118">.</op:operator><name pos:line="231" pos:column="119">Name</name></name> <op:operator pos:line="231" pos:column="124">==</op:operator> <lit:literal type="string" pos:line="231" pos:column="127">"GetCustomProperties"</lit:literal></expr></argument>)</argument_list></call></lambda></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="232" pos:column="13">EnsureRankingPrettyGood</name><argument_list pos:line="232" pos:column="36">(<argument><expr><name pos:line="232" pos:column="37">keywords</name></expr></argument>, <argument><expr><name pos:line="232" pos:column="47">predicate</name></expr></argument>, <argument><expr><name pos:line="232" pos:column="58">expectedLowestRank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:line="233" pos:column="13">//keywords = "access level";</comment>
            <comment type="line" pos:line="234" pos:column="13">//expectedLowestRank = 7;</comment>
            <comment type="line" pos:line="235" pos:column="13">//predicate = el =&gt; el.Element.ProgramElementType == ProgramElementType.Enum &amp;&amp; (el.Element.Name == "AccessLevel");</comment>
            <comment type="line" pos:line="236" pos:column="13">//EnsureRankingPrettyGood(keywords, predicate, expectedLowestRank);</comment>
            <expr_stmt><expr><name pos:line="237" pos:column="13">keywords</name> <op:operator pos:line="237" pos:column="22">=</op:operator> <lit:literal type="string" pos:line="237" pos:column="24">"ParserException"</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="238" pos:column="13">expectedLowestRank</name> <op:operator pos:line="238" pos:column="32">=</op:operator> <lit:literal type="number" pos:line="238" pos:column="34">2</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="239" pos:column="13">predicate</name> <op:operator pos:line="239" pos:column="23">=</op:operator> <lambda><name pos:line="239" pos:column="25">el</name> <op:operator pos:line="239" pos:column="28">=&gt;</op:operator> <name><name pos:line="239" pos:column="31">el</name><op:operator pos:line="239" pos:column="33">.</op:operator><name pos:line="239" pos:column="34">ProgramElement</name><op:operator pos:line="239" pos:column="48">.</op:operator><name pos:line="239" pos:column="49">ProgramElementType</name></name> <op:operator pos:line="239" pos:column="68">==</op:operator> <call><name><name pos:line="239" pos:column="71">ProgramElementType</name><op:operator pos:line="239" pos:column="89">.</op:operator><name pos:line="239" pos:column="90">Class</name> <type:modifier pos:line="239" pos:column="96">&amp;&amp;</type:modifier></name> <argument_list pos:line="239" pos:column="99">(<argument><expr><name><name pos:line="239" pos:column="100">el</name><op:operator pos:line="239" pos:column="102">.</op:operator><name pos:line="239" pos:column="103">ProgramElement</name><op:operator pos:line="239" pos:column="117">.</op:operator><name pos:line="239" pos:column="118">Name</name></name> <op:operator pos:line="239" pos:column="123">==</op:operator> <lit:literal type="string" pos:line="239" pos:column="126">"ParserException"</lit:literal></expr></argument>)</argument_list></call></lambda></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="240" pos:column="13">EnsureRankingPrettyGood</name><argument_list pos:line="240" pos:column="36">(<argument><expr><name pos:line="240" pos:column="37">keywords</name></expr></argument>, <argument><expr><name pos:line="240" pos:column="47">predicate</name></expr></argument>, <argument><expr><name pos:line="240" pos:column="58">expectedLowestRank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="241" pos:column="13">keywords</name> <op:operator pos:line="241" pos:column="22">=</op:operator> <lit:literal type="string" pos:line="241" pos:column="24">"word extract"</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="242" pos:column="13">expectedLowestRank</name> <op:operator pos:line="242" pos:column="32">=</op:operator> <lit:literal type="number" pos:line="242" pos:column="34">1</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="243" pos:column="13">predicate</name> <op:operator pos:line="243" pos:column="23">=</op:operator> <lambda><name pos:line="243" pos:column="25">el</name> <op:operator pos:line="243" pos:column="28">=&gt;</op:operator> <name><name pos:line="243" pos:column="31">el</name><op:operator pos:line="243" pos:column="33">.</op:operator><name pos:line="243" pos:column="34">ProgramElement</name><op:operator pos:line="243" pos:column="48">.</op:operator><name pos:line="243" pos:column="49">ProgramElementType</name></name> <op:operator pos:line="243" pos:column="68">==</op:operator> <call><name><name pos:line="243" pos:column="71">ProgramElementType</name><op:operator pos:line="243" pos:column="89">.</op:operator><name pos:line="243" pos:column="90">Method</name> <type:modifier pos:line="243" pos:column="97">&amp;&amp;</type:modifier></name> <argument_list pos:line="243" pos:column="100">(<argument><expr><name><name pos:line="243" pos:column="101">el</name><op:operator pos:line="243" pos:column="103">.</op:operator><name pos:line="243" pos:column="104">ProgramElement</name><op:operator pos:line="243" pos:column="118">.</op:operator><name pos:line="243" pos:column="119">Name</name></name> <op:operator pos:line="243" pos:column="124">==</op:operator> <lit:literal type="string" pos:line="243" pos:column="127">"ExtractWords"</lit:literal></expr></argument>)</argument_list></call></lambda></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="244" pos:column="13">EnsureRankingPrettyGood</name><argument_list pos:line="244" pos:column="36">(<argument><expr><name pos:line="244" pos:column="37">keywords</name></expr></argument>, <argument><expr><name pos:line="244" pos:column="47">predicate</name></expr></argument>, <argument><expr><name pos:line="244" pos:column="58">expectedLowestRank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="245" pos:column="13">keywords</name> <op:operator pos:line="245" pos:column="22">=</op:operator> <lit:literal type="string" pos:line="245" pos:column="24">"translation get"</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="246" pos:column="13">expectedLowestRank</name> <op:operator pos:line="246" pos:column="32">=</op:operator> <lit:literal type="number" pos:line="246" pos:column="34">3</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="247" pos:column="13">predicate</name> <op:operator pos:line="247" pos:column="23">=</op:operator> <lambda><name pos:line="247" pos:column="25">el</name> <op:operator pos:line="247" pos:column="28">=&gt;</op:operator> <name><name pos:line="247" pos:column="31">el</name><op:operator pos:line="247" pos:column="33">.</op:operator><name pos:line="247" pos:column="34">ProgramElement</name><op:operator pos:line="247" pos:column="48">.</op:operator><name pos:line="247" pos:column="49">ProgramElementType</name></name> <op:operator pos:line="247" pos:column="68">==</op:operator> <call><name><name pos:line="247" pos:column="71">ProgramElementType</name><op:operator pos:line="247" pos:column="89">.</op:operator><name pos:line="247" pos:column="90">Method</name> <type:modifier pos:line="247" pos:column="97">&amp;&amp;</type:modifier></name> <argument_list pos:line="247" pos:column="100">(<argument><expr><name><name pos:line="247" pos:column="101">el</name><op:operator pos:line="247" pos:column="103">.</op:operator><name pos:line="247" pos:column="104">ProgramElement</name><op:operator pos:line="247" pos:column="118">.</op:operator><name pos:line="247" pos:column="119">Name</name></name> <op:operator pos:line="247" pos:column="124">==</op:operator> <lit:literal type="string" pos:line="247" pos:column="127">"GetTranslation"</lit:literal></expr></argument>)</argument_list></call></lambda></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="248" pos:column="13">EnsureRankingPrettyGood</name><argument_list pos:line="248" pos:column="36">(<argument><expr><name pos:line="248" pos:column="37">keywords</name></expr></argument>, <argument><expr><name pos:line="248" pos:column="47">predicate</name></expr></argument>, <argument><expr><name pos:line="248" pos:column="58">expectedLowestRank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="249" pos:column="13">keywords</name> <op:operator pos:line="249" pos:column="22">=</op:operator> <lit:literal type="string" pos:line="249" pos:column="24">"RegisterExtensionPoints"</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="250" pos:column="13">expectedLowestRank</name> <op:operator pos:line="250" pos:column="32">=</op:operator> <lit:literal type="number" pos:line="250" pos:column="34">3</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="251" pos:column="13">predicate</name> <op:operator pos:line="251" pos:column="23">=</op:operator> <lambda><name pos:line="251" pos:column="25">el</name> <op:operator pos:line="251" pos:column="28">=&gt;</op:operator> <name><name pos:line="251" pos:column="31">el</name><op:operator pos:line="251" pos:column="33">.</op:operator><name pos:line="251" pos:column="34">ProgramElement</name><op:operator pos:line="251" pos:column="48">.</op:operator><name pos:line="251" pos:column="49">ProgramElementType</name></name> <op:operator pos:line="251" pos:column="68">==</op:operator> <call><name><name pos:line="251" pos:column="71">ProgramElementType</name><op:operator pos:line="251" pos:column="89">.</op:operator><name pos:line="251" pos:column="90">Method</name> <type:modifier pos:line="251" pos:column="97">&amp;&amp;</type:modifier></name> <argument_list pos:line="251" pos:column="100">(<argument><expr><name><name pos:line="251" pos:column="101">el</name><op:operator pos:line="251" pos:column="103">.</op:operator><name pos:line="251" pos:column="104">ProgramElement</name><op:operator pos:line="251" pos:column="118">.</op:operator><name pos:line="251" pos:column="119">Name</name></name> <op:operator pos:line="251" pos:column="124">==</op:operator> <lit:literal type="string" pos:line="251" pos:column="127">"RegisterExtensionPoints"</lit:literal></expr></argument>)</argument_list></call></lambda></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="252" pos:column="13">EnsureRankingPrettyGood</name><argument_list pos:line="252" pos:column="36">(<argument><expr><name pos:line="252" pos:column="37">keywords</name></expr></argument>, <argument><expr><name pos:line="252" pos:column="47">predicate</name></expr></argument>, <argument><expr><name pos:line="252" pos:column="58">expectedLowestRank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>            
        }</block></function>


        <function><type><specifier pos:line="256" pos:column="9">public</specifier> <specifier pos:line="256" pos:column="16">override</specifier> <name pos:line="256" pos:column="25">string</name></type> <name pos:line="256" pos:column="32">GetIndexDirName</name><parameter_list pos:line="256" pos:column="47">()</parameter_list>
        <block pos:line="257" pos:column="9">{
            <return pos:line="258" pos:column="13">return <expr><lit:literal type="string" pos:line="258" pos:column="20">"SelfSearchTest"</lit:literal></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="261" pos:column="9">public</specifier> <specifier pos:line="261" pos:column="16">override</specifier> <name pos:line="261" pos:column="25">string</name></type> <name pos:line="261" pos:column="32">GetFilesDirectory</name><parameter_list pos:line="261" pos:column="49">()</parameter_list>
        <block pos:line="262" pos:column="9">{
            <return pos:line="263" pos:column="13">return <expr><lit:literal type="string" pos:line="263" pos:column="20">"..\\.."</lit:literal></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="266" pos:column="9">public</specifier> <specifier pos:line="266" pos:column="16">override</specifier> <name pos:line="266" pos:column="25">TimeSpan</name><type:modifier pos:line="266" pos:column="33">?</type:modifier></type> <name pos:line="266" pos:column="35">GetTimeToCommit</name><parameter_list pos:line="266" pos:column="50">()</parameter_list>
        <block pos:line="267" pos:column="9">{
            <return pos:line="268" pos:column="13">return <expr><call><name><name pos:line="268" pos:column="20">TimeSpan</name><op:operator pos:line="268" pos:column="28">.</op:operator><name pos:line="268" pos:column="29">FromSeconds</name></name><argument_list pos:line="268" pos:column="40">(<argument><expr><lit:literal type="number" pos:line="268" pos:column="41">1</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
        

	}</block></class>
}</block></namespace>
</unit>
