<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Core\Core.UnitTests\Tools\DictionaryBasedQueryReformerTests.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Text</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">NUnit</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">Framework</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Sando</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">Core</name><op:operator pos:line="6" pos:column="17">.</op:operator><name pos:line="6" pos:column="18">QueryRefomers</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Sando</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">Core</name><op:operator pos:line="7" pos:column="17">.</op:operator><name pos:line="7" pos:column="18">Tools</name></name>;</using>

<namespace pos:line="9" pos:column="1">namespace <name><name pos:line="9" pos:column="11">Sando</name><op:operator pos:line="9" pos:column="16">.</op:operator><name pos:line="9" pos:column="17">Core</name><op:operator pos:line="9" pos:column="21">.</op:operator><name pos:line="9" pos:column="22">UnitTests</name><op:operator pos:line="9" pos:column="31">.</op:operator><name pos:line="9" pos:column="32">Tools</name></name>
<block pos:line="10" pos:column="1">{
    <class><attribute pos:line="11" pos:column="5">[<expr><name pos:line="11" pos:column="6">TestFixture</name></expr>]</attribute>
    <specifier pos:line="12" pos:column="5">public</specifier> class <name pos:line="12" pos:column="18">DictionaryBasedQueryReformerTests</name>
    <block pos:line="13" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="14" pos:column="9">private</specifier> <specifier pos:line="14" pos:column="17">const</specifier> <name pos:line="14" pos:column="23">String</name></type> <name pos:line="14" pos:column="30">directory</name> <init pos:line="14" pos:column="40">= <expr><lit:literal type="string" pos:line="14" pos:column="42">@"TestFiles\"</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="15" pos:column="9">private</specifier> <specifier pos:line="15" pos:column="17">readonly</specifier> <name pos:line="15" pos:column="26">DictionaryBasedSplitter</name></type> <name pos:line="15" pos:column="50">dictionary</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="16" pos:column="9">private</specifier> <specifier pos:line="16" pos:column="17">readonly</specifier> <name pos:line="16" pos:column="26">QueryReformerManager</name></type> <name pos:line="16" pos:column="47">reformer</name></decl>;</decl_stmt>

        <constructor><specifier pos:line="18" pos:column="9">public</specifier> <name pos:line="18" pos:column="16">DictionaryBasedQueryReformerTests</name><parameter_list pos:line="18" pos:column="49">()</parameter_list>
        <block pos:line="19" pos:column="9">{
            <expr_stmt><expr><name><name pos:line="20" pos:column="13">this</name><op:operator pos:line="20" pos:column="17">.</op:operator><name pos:line="20" pos:column="18">dictionary</name></name> <op:operator pos:line="20" pos:column="29">=</op:operator> <op:operator pos:line="20" pos:column="31">new</op:operator> <call><name pos:line="20" pos:column="35">DictionaryBasedSplitter</name><argument_list pos:line="20" pos:column="58">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="21" pos:column="13">this</name><op:operator pos:line="21" pos:column="17">.</op:operator><name pos:line="21" pos:column="18">reformer</name></name> <op:operator pos:line="21" pos:column="27">=</op:operator> <op:operator pos:line="21" pos:column="29">new</op:operator> <call><name pos:line="21" pos:column="33">QueryReformerManager</name><argument_list pos:line="21" pos:column="53">(<argument><expr><name pos:line="21" pos:column="54">dictionary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="22" pos:column="13">dictionary</name><op:operator pos:line="22" pos:column="23">.</op:operator><name pos:line="22" pos:column="24">Initialize</name></name><argument_list pos:line="22" pos:column="34">(<argument><expr><name pos:line="22" pos:column="35">directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier pos:line="25" pos:column="9">private</specifier> <name pos:line="25" pos:column="17">void</name></type> <name pos:line="25" pos:column="22">AssertNotReformed</name><parameter_list pos:line="25" pos:column="39">(<param><decl><type><name><name pos:line="25" pos:column="40">IEnumerable</name><argument_list pos:line="25" pos:column="51">&lt;<argument><name pos:line="25" pos:column="52">string</name></argument>&gt;</argument_list></name></type> <name pos:line="25" pos:column="60">words</name></decl></param>)</parameter_list>
        <block pos:line="26" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="27" pos:column="13">var</name></type> <name pos:line="27" pos:column="17">newQueries</name> <init pos:line="27" pos:column="28">= <expr><call><name><name pos:line="27" pos:column="30">reformer</name><op:operator pos:line="27" pos:column="38">.</op:operator><name pos:line="27" pos:column="39">ReformTermsSynchronously</name></name><argument_list pos:line="27" pos:column="63">(<argument><expr><name pos:line="27" pos:column="64">words</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="28" pos:column="13">if <condition pos:line="28" pos:column="16">(<expr><call><name><name pos:line="28" pos:column="17">newQueries</name><op:operator pos:line="28" pos:column="27">.</op:operator><name pos:line="28" pos:column="28">Any</name></name><argument_list pos:line="28" pos:column="31">()</argument_list></call></expr>)</condition><then pos:line="28" pos:column="34">
            <block pos:line="29" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="30" pos:column="17">Assert</name><op:operator pos:line="30" pos:column="23">.</op:operator><name pos:line="30" pos:column="24">IsTrue</name></name><argument_list pos:line="30" pos:column="30">(<argument><expr><call><name><name pos:line="30" pos:column="31">newQueries</name><op:operator pos:line="30" pos:column="41">.</op:operator><name pos:line="30" pos:column="42">Count</name></name><argument_list pos:line="30" pos:column="47">()</argument_list></call> <op:operator pos:line="30" pos:column="50">==</op:operator> <lit:literal type="number" pos:line="30" pos:column="53">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="31" pos:column="17">var</name></type> <name pos:line="31" pos:column="21">query</name> <init pos:line="31" pos:column="27">= <expr><call><name><name pos:line="31" pos:column="29">newQueries</name><op:operator pos:line="31" pos:column="39">.</op:operator><name pos:line="31" pos:column="40">First</name></name><argument_list pos:line="31" pos:column="45">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="32" pos:column="17">Assert</name><op:operator pos:line="32" pos:column="23">.</op:operator><name pos:line="32" pos:column="24">IsTrue</name></name><argument_list pos:line="32" pos:column="30">(<argument><expr><call><name><name pos:line="32" pos:column="31">query</name><op:operator pos:line="32" pos:column="36">.</op:operator><name pos:line="32" pos:column="37">ReformedWords</name><op:operator pos:line="32" pos:column="50">.</op:operator><name pos:line="32" pos:column="51">All</name></name><argument_list pos:line="32" pos:column="54">(<argument><expr><lambda><name pos:line="32" pos:column="55">q</name> <op:operator pos:line="32" pos:column="57">=&gt;</op:operator> <name><name pos:line="32" pos:column="60">q</name><op:operator pos:line="32" pos:column="61">.</op:operator><name pos:line="32" pos:column="62">Category</name></name> <op:operator pos:line="32" pos:column="71">==</op:operator>
                    <name><name pos:line="33" pos:column="21">TermChangeCategory</name><op:operator pos:line="33" pos:column="39">.</op:operator><name pos:line="33" pos:column="40">NOT_CHANGED</name></name></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="37" pos:column="9">private</specifier> <name pos:line="37" pos:column="17">void</name></type> <name pos:line="37" pos:column="22">AssertReformed</name><parameter_list pos:line="37" pos:column="36">(<param><decl><type><name><name pos:line="37" pos:column="37">String</name><index pos:line="37" pos:column="43">[]</index></name></type> <name pos:line="37" pos:column="46">words</name></decl></param>, <param><decl><type><name><name pos:line="37" pos:column="53">int</name><index pos:line="37" pos:column="56">[]</index></name></type> <name pos:line="37" pos:column="59">changedIndexes</name></decl></param>, <param><decl><type><name><name pos:line="37" pos:column="75">String</name><index pos:line="37" pos:column="81">[]</index></name></type> <name pos:line="37" pos:column="84">expectedReforms</name></decl></param>)</parameter_list>
        <block pos:line="38" pos:column="9">{
            <if pos:line="39" pos:column="13">if<condition pos:line="39" pos:column="15">(<expr><call><name><name pos:line="39" pos:column="16">changedIndexes</name><op:operator pos:line="39" pos:column="30">.</op:operator><name pos:line="39" pos:column="31">Count</name></name><argument_list pos:line="39" pos:column="36">()</argument_list></call> <op:operator pos:line="39" pos:column="39">!=</op:operator> <call><name><name pos:line="39" pos:column="42">expectedReforms</name><op:operator pos:line="39" pos:column="57">.</op:operator><name pos:line="39" pos:column="58">Count</name></name><argument_list pos:line="39" pos:column="63">()</argument_list></call></expr>)</condition><then pos:line="39" pos:column="66">
                <expr_stmt><expr><call><name><name pos:line="40" pos:column="17">Assert</name><op:operator pos:line="40" pos:column="23">.</op:operator><name pos:line="40" pos:column="24">IsTrue</name></name><argument_list pos:line="40" pos:column="30">(<argument><expr><lit:literal type="boolean" pos:line="40" pos:column="31">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            <decl_stmt><decl><type><name pos:line="41" pos:column="13">var</name></type> <name pos:line="41" pos:column="17">reformForEachWord</name> <init pos:line="41" pos:column="35">= <expr><op:operator pos:line="41" pos:column="37">new</op:operator> <name><name><name pos:line="41" pos:column="41">List</name><argument_list pos:line="41" pos:column="45">&lt;<argument><name pos:line="41" pos:column="46">String</name></argument>&gt;</argument_list></name><index pos:line="41" pos:column="53">[<expr><call><name><name pos:line="41" pos:column="54">words</name><op:operator pos:line="41" pos:column="59">.</op:operator><name pos:line="41" pos:column="60">Count</name></name><argument_list pos:line="41" pos:column="65">()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="42" pos:column="13">var</name></type> <name pos:line="42" pos:column="17">newQueries</name> <init pos:line="42" pos:column="28">= <expr><call><name><name pos:line="42" pos:column="30">reformer</name><op:operator pos:line="42" pos:column="38">.</op:operator><name pos:line="42" pos:column="39">ReformTermsSynchronously</name></name><argument_list pos:line="42" pos:column="63">(<argument><expr><name pos:line="42" pos:column="64">words</name></expr></argument>)</argument_list></call><op:operator pos:line="42" pos:column="70">.</op:operator><call><name pos:line="42" pos:column="71">ToList</name><argument_list pos:line="42" pos:column="77">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="43" pos:column="13">Assert</name><op:operator pos:line="43" pos:column="19">.</op:operator><name pos:line="43" pos:column="20">IsTrue</name></name><argument_list pos:line="43" pos:column="26">(<argument><expr><call><name><name pos:line="43" pos:column="27">newQueries</name><op:operator pos:line="43" pos:column="37">.</op:operator><name pos:line="43" pos:column="38">Any</name></name><argument_list pos:line="43" pos:column="41">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="44" pos:column="13">var</name></type> <name pos:line="44" pos:column="17">termLists</name> <init pos:line="44" pos:column="27">= <expr><call><name><name pos:line="44" pos:column="29">newQueries</name><op:operator pos:line="44" pos:column="39">.</op:operator><name pos:line="44" pos:column="40">Select</name></name><argument_list pos:line="44" pos:column="46">(<argument><expr><lambda><name pos:line="44" pos:column="47">q</name> <op:operator pos:line="44" pos:column="49">=&gt;</op:operator> <call><name><name pos:line="44" pos:column="52">q</name><op:operator pos:line="44" pos:column="53">.</op:operator><name pos:line="44" pos:column="54">ReformedWords</name><op:operator pos:line="44" pos:column="67">.</op:operator><name pos:line="44" pos:column="68">Select</name></name><argument_list pos:line="44" pos:column="74">(<argument><expr><lambda><name pos:line="44" pos:column="75">p</name> <op:operator pos:line="44" pos:column="77">=&gt;</op:operator> <name><name pos:line="44" pos:column="80">p</name><op:operator pos:line="44" pos:column="81">.</op:operator><name pos:line="44" pos:column="82">NewTerm</name></name></lambda></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="45" pos:column="13">foreach (<init><decl><type><name><name pos:line="45" pos:column="22">IEnumerable</name><argument_list pos:line="45" pos:column="33">&lt;<argument><name pos:line="45" pos:column="34">string</name></argument>&gt;</argument_list></name></type> <name pos:line="45" pos:column="42">newTermList</name> <range pos:line="45" pos:column="54">in <expr><name pos:line="45" pos:column="57">termLists</name></expr></range></decl></init>)
            <block pos:line="46" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="47" pos:column="17">var</name></type> <name pos:line="47" pos:column="21">list</name> <init pos:line="47" pos:column="26">= <expr><call><name><name pos:line="47" pos:column="28">newTermList</name><op:operator pos:line="47" pos:column="39">.</op:operator><name pos:line="47" pos:column="40">ToList</name></name><argument_list pos:line="47" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for pos:line="48" pos:column="17">for (<init><decl><type><name pos:line="48" pos:column="22">int</name></type> <name pos:line="48" pos:column="26">i</name> <init pos:line="48" pos:column="28">= <expr><lit:literal type="number" pos:line="48" pos:column="30">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="48" pos:column="33">i</name> <op:operator pos:line="48" pos:column="35">&lt;</op:operator> <call><name><name pos:line="48" pos:column="37">list</name><op:operator pos:line="48" pos:column="41">.</op:operator><name pos:line="48" pos:column="42">Count</name></name><argument_list pos:line="48" pos:column="47">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="48" pos:column="51">i</name><op:operator pos:line="48" pos:column="52">++</op:operator></expr></incr>)
                <block pos:line="49" pos:column="17">{
                    <if pos:line="50" pos:column="21">if <condition pos:line="50" pos:column="24">(<expr><call><name><name pos:line="50" pos:column="25">changedIndexes</name><op:operator pos:line="50" pos:column="39">.</op:operator><name pos:line="50" pos:column="40">Contains</name></name><argument_list pos:line="50" pos:column="48">(<argument><expr><name pos:line="50" pos:column="49">i</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="50" pos:column="52">
                    <block pos:line="51" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="52" pos:column="25">Assert</name><op:operator pos:line="52" pos:column="31">.</op:operator><name pos:line="52" pos:column="32">IsTrue</name></name><argument_list pos:line="52" pos:column="38">(<argument><expr><op:operator pos:line="52" pos:column="39">!</op:operator><call><name><name pos:line="52" pos:column="40">list</name><op:operator pos:line="52" pos:column="44">.</op:operator><name pos:line="52" pos:column="45">ElementAt</name></name><argument_list pos:line="52" pos:column="54">(<argument><expr><name pos:line="52" pos:column="55">i</name></expr></argument>)</argument_list></call><op:operator pos:line="52" pos:column="57">.</op:operator><call><name pos:line="52" pos:column="58">Equals</name><argument_list pos:line="52" pos:column="64">(<argument><expr><call><name><name pos:line="52" pos:column="65">words</name><op:operator pos:line="52" pos:column="70">.</op:operator><name pos:line="52" pos:column="71">ElementAt</name></name><argument_list pos:line="52" pos:column="80">(<argument><expr><name pos:line="52" pos:column="81">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if pos:line="53" pos:column="25">if <condition pos:line="53" pos:column="28">(<expr><name><name pos:line="53" pos:column="29">reformForEachWord</name><index pos:line="53" pos:column="46">[<expr><name pos:line="53" pos:column="47">i</name></expr>]</index></name> <op:operator pos:line="53" pos:column="50">==</op:operator> <name pos:line="53" pos:column="53">null</name></expr>)</condition><then pos:line="53" pos:column="58">
                        <block pos:line="54" pos:column="25">{
                            <expr_stmt><expr><name><name pos:line="55" pos:column="29">reformForEachWord</name><index pos:line="55" pos:column="46">[<expr><name pos:line="55" pos:column="47">i</name></expr>]</index></name> <op:operator pos:line="55" pos:column="50">=</op:operator> <op:operator pos:line="55" pos:column="52">new</op:operator> <call><name><name pos:line="55" pos:column="56">List</name><argument_list pos:line="55" pos:column="60">&lt;<argument><name pos:line="55" pos:column="61">string</name></argument>&gt;</argument_list></name><argument_list pos:line="55" pos:column="68">()</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                        <decl_stmt><decl><type><name pos:line="57" pos:column="25">var</name></type> <name pos:line="57" pos:column="29">reform</name> <init pos:line="57" pos:column="36">= <expr><name><name pos:line="57" pos:column="38">reformForEachWord</name><index pos:line="57" pos:column="55">[<expr><name pos:line="57" pos:column="56">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name pos:line="58" pos:column="25">reform</name><op:operator pos:line="58" pos:column="31">.</op:operator><name pos:line="58" pos:column="32">Add</name></name><argument_list pos:line="58" pos:column="35">(<argument><expr><call><name><name pos:line="58" pos:column="36">list</name><op:operator pos:line="58" pos:column="40">.</op:operator><name pos:line="58" pos:column="41">ElementAt</name></name><argument_list pos:line="58" pos:column="50">(<argument><expr><name pos:line="58" pos:column="51">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else pos:line="60" pos:column="21">else
                    <block pos:line="61" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="62" pos:column="25">Assert</name><op:operator pos:line="62" pos:column="31">.</op:operator><name pos:line="62" pos:column="32">IsTrue</name></name><argument_list pos:line="62" pos:column="38">(<argument><expr><call><name><name pos:line="62" pos:column="39">list</name><op:operator pos:line="62" pos:column="43">.</op:operator><name pos:line="62" pos:column="44">ElementAt</name></name><argument_list pos:line="62" pos:column="53">(<argument><expr><name pos:line="62" pos:column="54">i</name></expr></argument>)</argument_list></call><op:operator pos:line="62" pos:column="56">.</op:operator><call><name pos:line="62" pos:column="57">Equals</name><argument_list pos:line="62" pos:column="63">(<argument><expr><call><name><name pos:line="62" pos:column="64">words</name><op:operator pos:line="62" pos:column="69">.</op:operator><name pos:line="62" pos:column="70">ElementAt</name></name><argument_list pos:line="62" pos:column="79">(<argument><expr><name pos:line="62" pos:column="80">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></for>
            }</block></foreach>

            <for pos:line="67" pos:column="13">for (<init><decl><type><name pos:line="67" pos:column="18">int</name></type> <name pos:line="67" pos:column="22">i</name> <init pos:line="67" pos:column="24">= <expr><lit:literal type="number" pos:line="67" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="67" pos:column="29">i</name> <op:operator pos:line="67" pos:column="31">&lt;</op:operator> <call><name><name pos:line="67" pos:column="33">changedIndexes</name><op:operator pos:line="67" pos:column="47">.</op:operator><name pos:line="67" pos:column="48">Count</name></name><argument_list pos:line="67" pos:column="53">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="67" pos:column="57">i</name><op:operator pos:line="67" pos:column="58">++</op:operator></expr></incr>)
            <block pos:line="68" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="69" pos:column="17">var</name></type> <name pos:line="69" pos:column="21">index</name> <init pos:line="69" pos:column="27">= <expr><call><name><name pos:line="69" pos:column="29">changedIndexes</name><op:operator pos:line="69" pos:column="43">.</op:operator><name pos:line="69" pos:column="44">ElementAt</name></name><argument_list pos:line="69" pos:column="53">(<argument><expr><name pos:line="69" pos:column="54">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="70" pos:column="17">var</name></type> <name pos:line="70" pos:column="21">expected</name> <init pos:line="70" pos:column="30">= <expr><call><name><name pos:line="70" pos:column="32">expectedReforms</name><op:operator pos:line="70" pos:column="47">.</op:operator><name pos:line="70" pos:column="48">ElementAt</name></name><argument_list pos:line="70" pos:column="57">(<argument><expr><name pos:line="70" pos:column="58">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="71" pos:column="17">var</name></type> <name pos:line="71" pos:column="21">reformWords</name> <init pos:line="71" pos:column="33">= <expr><name><name pos:line="71" pos:column="35">reformForEachWord</name><index pos:line="71" pos:column="52">[<expr><name pos:line="71" pos:column="53">index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="72" pos:column="17">Assert</name><op:operator pos:line="72" pos:column="23">.</op:operator><name pos:line="72" pos:column="24">IsNotNull</name></name><argument_list pos:line="72" pos:column="33">(<argument><expr><name pos:line="72" pos:column="34">reformWords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="73" pos:column="17">Assert</name><op:operator pos:line="73" pos:column="23">.</op:operator><name pos:line="73" pos:column="24">IsTrue</name></name><argument_list pos:line="73" pos:column="30">(<argument><expr><call><name><name pos:line="73" pos:column="31">reformWords</name><op:operator pos:line="73" pos:column="42">.</op:operator><name pos:line="73" pos:column="43">Any</name></name><argument_list pos:line="73" pos:column="46">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="74" pos:column="17">Assert</name><op:operator pos:line="74" pos:column="23">.</op:operator><name pos:line="74" pos:column="24">IsTrue</name></name><argument_list pos:line="74" pos:column="30">(<argument><expr><call><name><name pos:line="74" pos:column="31">reformWords</name><op:operator pos:line="74" pos:column="42">.</op:operator><name pos:line="74" pos:column="43">Contains</name></name><argument_list pos:line="74" pos:column="51">(<argument><expr><name pos:line="74" pos:column="52">expected</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></function>

        <function><type><specifier pos:line="78" pos:column="9">private</specifier> <name pos:line="78" pos:column="17">void</name></type> <name pos:line="78" pos:column="22">AssertOriginalTerm</name><parameter_list pos:line="78" pos:column="40">(<param><decl><type><name><name pos:line="78" pos:column="41">IEnumerable</name><argument_list pos:line="78" pos:column="52">&lt;<argument><name pos:line="78" pos:column="53">IReformedQuery</name></argument>&gt;</argument_list></name></type> <name pos:line="78" pos:column="69">queries</name></decl></param>, <param><decl><type><name pos:line="78" pos:column="78">String</name></type> <name pos:line="78" pos:column="85">term</name></decl></param>)</parameter_list>
        <block pos:line="79" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="80" pos:column="13">Assert</name><op:operator pos:line="80" pos:column="19">.</op:operator><name pos:line="80" pos:column="20">IsTrue</name></name><argument_list pos:line="80" pos:column="26">(<argument><expr><call><name><name pos:line="80" pos:column="27">queries</name><op:operator pos:line="80" pos:column="34">.</op:operator><name pos:line="80" pos:column="35">All</name></name><argument_list pos:line="80" pos:column="38">(<argument><expr><lambda><name pos:line="80" pos:column="39">q</name> <op:operator pos:line="80" pos:column="41">=&gt;</op:operator> <call><name><name pos:line="80" pos:column="44">q</name><op:operator pos:line="80" pos:column="45">.</op:operator><name pos:line="80" pos:column="46">ReformedWords</name><op:operator pos:line="80" pos:column="59">.</op:operator><name pos:line="80" pos:column="60">All</name></name><argument_list pos:line="80" pos:column="63">(<argument><expr><lambda><name pos:line="80" pos:column="64">p</name> <op:operator pos:line="80" pos:column="66">=&gt;</op:operator> <call><name><name pos:line="80" pos:column="69">p</name><op:operator pos:line="80" pos:column="70">.</op:operator><name pos:line="80" pos:column="71">OriginalTerm</name><op:operator pos:line="80" pos:column="83">.</op:operator><name pos:line="80" pos:column="84">Equals</name></name><argument_list pos:line="80" pos:column="90">(<argument><expr><name pos:line="80" pos:column="91">term</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="83" pos:column="9">[<expr><name pos:line="83" pos:column="10">SetUp</name></expr>]</attribute>
        <specifier pos:line="84" pos:column="9">public</specifier> <name pos:line="84" pos:column="16">void</name></type> <name pos:line="84" pos:column="21">setUp</name><parameter_list pos:line="84" pos:column="26">()</parameter_list>
        <block pos:line="85" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="86" pos:column="13">reformer</name><op:operator pos:line="86" pos:column="21">.</op:operator><name pos:line="86" pos:column="22">Initialize</name></name><argument_list pos:line="86" pos:column="32">(<argument><expr><name pos:line="86" pos:column="33">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="89" pos:column="9">[<expr><name pos:line="89" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="90" pos:column="9">public</specifier> <name pos:line="90" pos:column="16">void</name></type> <name pos:line="90" pos:column="21">ReformWiredTerms</name><parameter_list pos:line="90" pos:column="37">()</parameter_list>
        <block pos:line="91" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="92" pos:column="13">reformer</name><op:operator pos:line="92" pos:column="21">.</op:operator><name pos:line="92" pos:column="22">ReformTermsSynchronously</name></name><argument_list pos:line="92" pos:column="46">(<argument><expr><op:operator pos:line="92" pos:column="47">new</op:operator> <name><name pos:line="92" pos:column="51">string</name><index pos:line="92" pos:column="57">[]</index></name> <block pos:line="92" pos:column="60">{<expr><lit:literal type="string" pos:line="92" pos:column="61">""</lit:literal></expr><op:operator pos:line="92" pos:column="63">,</op:operator> <expr><lit:literal type="string" pos:line="92" pos:column="65">""</lit:literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="95" pos:column="9">[<expr><name pos:line="95" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="96" pos:column="9">public</specifier> <name pos:line="96" pos:column="16">void</name></type> <name pos:line="96" pos:column="21">ReformOneTermInDictionary</name><parameter_list pos:line="96" pos:column="46">()</parameter_list>
        <block pos:line="97" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="98" pos:column="13">AssertNotReformed</name><argument_list pos:line="98" pos:column="30">(<argument><expr><op:operator pos:line="98" pos:column="31">new</op:operator> <name><name pos:line="98" pos:column="35">string</name><index pos:line="98" pos:column="41">[]</index></name> <block pos:line="98" pos:column="44">{<expr><lit:literal type="string" pos:line="98" pos:column="45">"sando"</lit:literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="99" pos:column="13">AssertNotReformed</name><argument_list pos:line="99" pos:column="30">(<argument><expr><op:operator pos:line="99" pos:column="31">new</op:operator> <name><name pos:line="99" pos:column="35">string</name><index pos:line="99" pos:column="41">[]</index></name> <block pos:line="99" pos:column="44">{<expr><lit:literal type="string" pos:line="99" pos:column="45">"add"</lit:literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="100" pos:column="13">AssertNotReformed</name><argument_list pos:line="100" pos:column="30">(<argument><expr><op:operator pos:line="100" pos:column="31">new</op:operator> <name><name pos:line="100" pos:column="35">string</name><index pos:line="100" pos:column="41">[]</index></name> <block pos:line="100" pos:column="44">{<expr><lit:literal type="string" pos:line="100" pos:column="45">"adjust"</lit:literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="101" pos:column="13">AssertNotReformed</name><argument_list pos:line="101" pos:column="30">(<argument><expr><op:operator pos:line="101" pos:column="31">new</op:operator> <name><name pos:line="101" pos:column="35">string</name><index pos:line="101" pos:column="41">[]</index></name> <block pos:line="101" pos:column="44">{<expr><lit:literal type="string" pos:line="101" pos:column="45">"after"</lit:literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="102" pos:column="13">AssertNotReformed</name><argument_list pos:line="102" pos:column="30">(<argument><expr><op:operator pos:line="102" pos:column="31">new</op:operator> <name><name pos:line="102" pos:column="35">string</name><index pos:line="102" pos:column="41">[]</index></name> <block pos:line="102" pos:column="44">{<expr><lit:literal type="string" pos:line="102" pos:column="45">"alignment"</lit:literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="103" pos:column="13">AssertNotReformed</name><argument_list pos:line="103" pos:column="30">(<argument><expr><op:operator pos:line="103" pos:column="31">new</op:operator> <name><name pos:line="103" pos:column="35">string</name><index pos:line="103" pos:column="41">[]</index></name> <block pos:line="103" pos:column="44">{<expr><lit:literal type="string" pos:line="103" pos:column="45">"alignment"</lit:literal></expr><op:operator pos:line="103" pos:column="56">,</op:operator> <expr><lit:literal type="string" pos:line="103" pos:column="58">"add"</lit:literal></expr><op:operator pos:line="103" pos:column="63">,</op:operator> <expr><lit:literal type="string" pos:line="103" pos:column="65">"after"</lit:literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="104" pos:column="13">AssertNotReformed</name><argument_list pos:line="104" pos:column="30">(<argument><expr><op:operator pos:line="104" pos:column="31">new</op:operator> <name><name pos:line="104" pos:column="35">string</name><index pos:line="104" pos:column="41">[]</index></name> <block pos:line="104" pos:column="44">{<expr><lit:literal type="string" pos:line="104" pos:column="45">"Directory"</lit:literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="107" pos:column="9">[<expr><name pos:line="107" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="108" pos:column="9">public</specifier> <name pos:line="108" pos:column="16">void</name></type> <name pos:line="108" pos:column="21">ReformOneTermNotInDictionary</name><parameter_list pos:line="108" pos:column="49">()</parameter_list>
        <block pos:line="109" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="110" pos:column="13">AssertReformed</name><argument_list pos:line="110" pos:column="27">(<argument><expr><op:operator pos:line="110" pos:column="28">new</op:operator> <name><name pos:line="110" pos:column="32">string</name><index pos:line="110" pos:column="38">[]</index></name> <block pos:line="110" pos:column="41">{<expr><lit:literal type="string" pos:line="110" pos:column="42">"addi"</lit:literal></expr>}</block></expr></argument>, <argument><expr><op:operator pos:line="110" pos:column="51">new</op:operator> <name><name pos:line="110" pos:column="55">int</name><index pos:line="110" pos:column="58">[]</index></name> <block pos:line="110" pos:column="61">{<expr><lit:literal type="number" pos:line="110" pos:column="62">0</lit:literal></expr>}</block></expr></argument>, <argument><expr><op:operator pos:line="110" pos:column="66">new</op:operator> <name><name pos:line="110" pos:column="70">string</name><index pos:line="110" pos:column="76">[]</index></name><block pos:line="110" pos:column="78">{<expr><lit:literal type="string" pos:line="110" pos:column="79">"add"</lit:literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="111" pos:column="13">AssertReformed</name><argument_list pos:line="111" pos:column="27">(<argument><expr><op:operator pos:line="111" pos:column="28">new</op:operator> <name><name pos:line="111" pos:column="32">string</name><index pos:line="111" pos:column="38">[]</index></name> <block pos:line="111" pos:column="41">{<expr><lit:literal type="string" pos:line="111" pos:column="42">"addi"</lit:literal></expr><op:operator pos:line="111" pos:column="48">,</op:operator> <expr><lit:literal type="string" pos:line="111" pos:column="50">"add"</lit:literal></expr>}</block></expr></argument>, <argument><expr><op:operator pos:line="111" pos:column="58">new</op:operator> <name><name pos:line="111" pos:column="62">int</name><index pos:line="111" pos:column="65">[]</index></name> <block pos:line="111" pos:column="68">{<expr><lit:literal type="number" pos:line="111" pos:column="69">0</lit:literal></expr>}</block></expr></argument>, <argument><expr><op:operator pos:line="111" pos:column="73">new</op:operator> <name><name pos:line="111" pos:column="77">string</name><index pos:line="111" pos:column="83">[]</index></name><block pos:line="111" pos:column="85">{<expr><lit:literal type="string" pos:line="111" pos:column="86">"add"</lit:literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="112" pos:column="13">AssertReformed</name><argument_list pos:line="112" pos:column="27">(<argument><expr><op:operator pos:line="112" pos:column="28">new</op:operator> <name><name pos:line="112" pos:column="32">string</name><index pos:line="112" pos:column="38">[]</index></name> <block pos:line="112" pos:column="41">{<expr><lit:literal type="string" pos:line="112" pos:column="42">"add"</lit:literal></expr><op:operator pos:line="112" pos:column="47">,</op:operator> <expr><lit:literal type="string" pos:line="112" pos:column="49">"additional"</lit:literal></expr><op:operator pos:line="112" pos:column="61">,</op:operator> <expr><lit:literal type="string" pos:line="112" pos:column="63">"addi"</lit:literal></expr>}</block></expr></argument>, <argument><expr><op:operator pos:line="112" pos:column="72">new</op:operator> <name><name pos:line="112" pos:column="76">int</name><index pos:line="112" pos:column="79">[]</index></name> <block pos:line="112" pos:column="82">{<expr><lit:literal type="number" pos:line="112" pos:column="83">2</lit:literal></expr>}</block></expr></argument>, 
                <argument><expr><op:operator pos:line="113" pos:column="17">new</op:operator> <name><name pos:line="113" pos:column="21">string</name><index pos:line="113" pos:column="27">[]</index></name><block pos:line="113" pos:column="29">{<expr><lit:literal type="string" pos:line="113" pos:column="30">"adding"</lit:literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="114" pos:column="13">AssertReformed</name><argument_list pos:line="114" pos:column="27">(<argument><expr><op:operator pos:line="114" pos:column="28">new</op:operator> <name><name pos:line="114" pos:column="32">string</name><index pos:line="114" pos:column="38">[]</index></name> <block pos:line="114" pos:column="41">{<expr><lit:literal type="string" pos:line="114" pos:column="42">"san"</lit:literal></expr>}</block></expr></argument>, <argument><expr><op:operator pos:line="114" pos:column="50">new</op:operator> <name><name pos:line="114" pos:column="54">int</name><index pos:line="114" pos:column="57">[]</index></name> <block pos:line="114" pos:column="60">{<expr><lit:literal type="number" pos:line="114" pos:column="61">0</lit:literal></expr>}</block></expr></argument>, <argument><expr><op:operator pos:line="114" pos:column="65">new</op:operator> <name><name pos:line="114" pos:column="69">string</name><index pos:line="114" pos:column="75">[]</index></name><block pos:line="114" pos:column="77">{<expr><lit:literal type="string" pos:line="114" pos:column="78">"sando"</lit:literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="115" pos:column="13">AssertReformed</name><argument_list pos:line="115" pos:column="27">(<argument><expr><op:operator pos:line="115" pos:column="28">new</op:operator> <name><name pos:line="115" pos:column="32">string</name><index pos:line="115" pos:column="38">[]</index></name> <block pos:line="115" pos:column="41">{<expr><lit:literal type="string" pos:line="115" pos:column="42">"adjusting"</lit:literal></expr>}</block></expr></argument>, <argument><expr><op:operator pos:line="115" pos:column="56">new</op:operator> <name><name pos:line="115" pos:column="60">int</name><index pos:line="115" pos:column="63">[]</index></name> <block pos:line="115" pos:column="66">{}</block></expr></argument>, <argument><expr><op:operator pos:line="115" pos:column="70">new</op:operator> <name><name pos:line="115" pos:column="74">string</name><index pos:line="115" pos:column="80">[]</index></name><block pos:line="115" pos:column="82">{}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="116" pos:column="13">AssertReformed</name><argument_list pos:line="116" pos:column="27">(<argument><expr><op:operator pos:line="116" pos:column="28">new</op:operator> <name><name pos:line="116" pos:column="32">string</name><index pos:line="116" pos:column="38">[]</index></name> <block pos:line="116" pos:column="41">{<expr><lit:literal type="string" pos:line="116" pos:column="42">"aft"</lit:literal></expr>}</block></expr></argument>, <argument><expr><op:operator pos:line="116" pos:column="50">new</op:operator> <name><name pos:line="116" pos:column="54">int</name><index pos:line="116" pos:column="57">[]</index></name> <block pos:line="116" pos:column="60">{<expr><lit:literal type="number" pos:line="116" pos:column="61">0</lit:literal></expr>}</block></expr></argument>, <argument><expr><op:operator pos:line="116" pos:column="65">new</op:operator> <name><name pos:line="116" pos:column="69">string</name><index pos:line="116" pos:column="75">[]</index></name><block pos:line="116" pos:column="77">{<expr><lit:literal type="string" pos:line="116" pos:column="78">"after"</lit:literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="117" pos:column="13">AssertReformed</name><argument_list pos:line="117" pos:column="27">(<argument><expr><op:operator pos:line="117" pos:column="28">new</op:operator> <name><name pos:line="117" pos:column="32">string</name><index pos:line="117" pos:column="38">[]</index></name> <block pos:line="117" pos:column="41">{<expr><lit:literal type="string" pos:line="117" pos:column="42">"alignme"</lit:literal></expr>}</block></expr></argument>, <argument><expr><op:operator pos:line="117" pos:column="54">new</op:operator> <name><name pos:line="117" pos:column="58">int</name><index pos:line="117" pos:column="61">[]</index></name> <block pos:line="117" pos:column="64">{<expr><lit:literal type="number" pos:line="117" pos:column="65">0</lit:literal></expr>}</block></expr></argument>, <argument><expr><op:operator pos:line="117" pos:column="69">new</op:operator> <name><name pos:line="117" pos:column="73">string</name><index pos:line="117" pos:column="79">[]</index></name><block pos:line="117" pos:column="81">{<expr><lit:literal type="string" pos:line="117" pos:column="82">"alignment"</lit:literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="118" pos:column="13">AssertReformed</name><argument_list pos:line="118" pos:column="27">(<argument><expr><op:operator pos:line="118" pos:column="28">new</op:operator> <name><name pos:line="118" pos:column="32">string</name><index pos:line="118" pos:column="38">[]</index></name> <block pos:line="118" pos:column="41">{<expr><lit:literal type="string" pos:line="118" pos:column="42">"Sano"</lit:literal></expr><op:operator pos:line="118" pos:column="48">,</op:operator> <expr><lit:literal type="string" pos:line="118" pos:column="50">"Sand"</lit:literal></expr><op:operator pos:line="118" pos:column="56">,</op:operator> <expr><lit:literal type="string" pos:line="118" pos:column="58">"Sando"</lit:literal></expr>}</block></expr></argument>, <argument><expr><op:operator pos:line="118" pos:column="68">new</op:operator> <name><name pos:line="118" pos:column="72">int</name><index pos:line="118" pos:column="75">[]</index></name> <block pos:line="118" pos:column="78">{<expr><lit:literal type="number" pos:line="118" pos:column="79">0</lit:literal></expr><op:operator pos:line="118" pos:column="80">,</op:operator> <expr><lit:literal type="number" pos:line="118" pos:column="82">1</lit:literal></expr>}</block></expr></argument>, <argument><expr><op:operator pos:line="118" pos:column="86">new</op:operator> 
                <name><name pos:line="119" pos:column="17">string</name><index pos:line="119" pos:column="23">[]</index></name><block pos:line="119" pos:column="25">{<expr><lit:literal type="string" pos:line="119" pos:column="26">"sando"</lit:literal></expr><op:operator pos:line="119" pos:column="33">,</op:operator> <expr><lit:literal type="string" pos:line="119" pos:column="35">"sando"</lit:literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="122" pos:column="9">[<expr><name pos:line="122" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="123" pos:column="9">public</specifier> <name pos:line="123" pos:column="16">void</name></type> <name pos:line="123" pos:column="21">NotReformingWordWhoseStemmingIsInDictionary</name><parameter_list pos:line="123" pos:column="64">()</parameter_list>
        <block pos:line="124" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="125" pos:column="13">AssertNotReformed</name><argument_list pos:line="125" pos:column="30">(<argument><expr><op:operator pos:line="125" pos:column="31">new</op:operator> <name><name pos:line="125" pos:column="35">string</name><index pos:line="125" pos:column="41">[]</index></name><block pos:line="125" pos:column="43">{<expr><lit:literal type="string" pos:line="125" pos:column="44">"adapted"</lit:literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="126" pos:column="13">AssertNotReformed</name><argument_list pos:line="126" pos:column="30">(<argument><expr><op:operator pos:line="126" pos:column="31">new</op:operator> <name><name pos:line="126" pos:column="35">string</name><index pos:line="126" pos:column="41">[]</index></name><block pos:line="126" pos:column="43">{<expr><lit:literal type="string" pos:line="126" pos:column="44">"searchers"</lit:literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="127" pos:column="13">AssertNotReformed</name><argument_list pos:line="127" pos:column="30">(<argument><expr><op:operator pos:line="127" pos:column="31">new</op:operator> <name><name pos:line="127" pos:column="35">string</name><index pos:line="127" pos:column="41">[]</index></name><block pos:line="127" pos:column="43">{<expr><lit:literal type="string" pos:line="127" pos:column="44">"absentive"</lit:literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="128" pos:column="13">AssertNotReformed</name><argument_list pos:line="128" pos:column="30">(<argument><expr><op:operator pos:line="128" pos:column="31">new</op:operator> <name><name pos:line="128" pos:column="35">string</name><index pos:line="128" pos:column="41">[]</index></name><block pos:line="128" pos:column="43">{<expr><lit:literal type="string" pos:line="128" pos:column="44">"accessive"</lit:literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="129" pos:column="13">AssertNotReformed</name><argument_list pos:line="129" pos:column="30">(<argument><expr><op:operator pos:line="129" pos:column="31">new</op:operator> <name><name pos:line="129" pos:column="35">string</name><index pos:line="129" pos:column="41">[]</index></name><block pos:line="129" pos:column="43">{<expr><lit:literal type="string" pos:line="129" pos:column="44">"actually"</lit:literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="130" pos:column="13">AssertNotReformed</name><argument_list pos:line="130" pos:column="30">(<argument><expr><op:operator pos:line="130" pos:column="31">new</op:operator> <name><name pos:line="130" pos:column="35">string</name><index pos:line="130" pos:column="41">[]</index></name><block pos:line="130" pos:column="43">{<expr><lit:literal type="string" pos:line="130" pos:column="44">"automatically"</lit:literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="131" pos:column="13">AssertNotReformed</name><argument_list pos:line="131" pos:column="30">(<argument><expr><op:operator pos:line="131" pos:column="31">new</op:operator> <name><name pos:line="131" pos:column="35">string</name><index pos:line="131" pos:column="41">[]</index></name><block pos:line="131" pos:column="43">{<expr><lit:literal type="string" pos:line="131" pos:column="44">"application"</lit:literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="134" pos:column="9">[<expr><name pos:line="134" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="135" pos:column="9">public</specifier> <name pos:line="135" pos:column="16">void</name></type> <name pos:line="135" pos:column="21">MakeSureLeavingQuotedTermUntouched</name><parameter_list pos:line="135" pos:column="55">()</parameter_list>
        <block pos:line="136" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="137" pos:column="13">AssertNotReformed</name><argument_list pos:line="137" pos:column="30">(<argument><expr><op:operator pos:line="137" pos:column="31">new</op:operator> <name><name pos:line="137" pos:column="35">string</name><index pos:line="137" pos:column="41">[]</index></name><block pos:line="137" pos:column="43">{<expr><lit:literal type="string" pos:line="137" pos:column="44">"\"fadfs\""</lit:literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="138" pos:column="13">AssertNotReformed</name><argument_list pos:line="138" pos:column="30">(<argument><expr><op:operator pos:line="138" pos:column="31">new</op:operator> <name><name pos:line="138" pos:column="35">string</name><index pos:line="138" pos:column="41">[]</index></name><block pos:line="138" pos:column="43">{<expr><lit:literal type="string" pos:line="138" pos:column="44">"\"?fdat\""</lit:literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="139" pos:column="13">AssertNotReformed</name><argument_list pos:line="139" pos:column="30">(<argument><expr><op:operator pos:line="139" pos:column="31">new</op:operator> <name><name pos:line="139" pos:column="35">string</name><index pos:line="139" pos:column="41">[]</index></name><block pos:line="139" pos:column="43">{<expr><lit:literal type="string" pos:line="139" pos:column="44">"\"534q253\""</lit:literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="140" pos:column="13">AssertNotReformed</name><argument_list pos:line="140" pos:column="30">(<argument><expr><op:operator pos:line="140" pos:column="31">new</op:operator> <name><name pos:line="140" pos:column="35">string</name><index pos:line="140" pos:column="41">[]</index></name><block pos:line="140" pos:column="43">{<expr><lit:literal type="string" pos:line="140" pos:column="44">"\"nvcd\""</lit:literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="141" pos:column="13">AssertNotReformed</name><argument_list pos:line="141" pos:column="30">(<argument><expr><op:operator pos:line="141" pos:column="31">new</op:operator> <name><name pos:line="141" pos:column="35">string</name><index pos:line="141" pos:column="41">[]</index></name> <block pos:line="141" pos:column="44">{ <expr><lit:literal type="string" pos:line="141" pos:column="46">"\"nvcd\""</lit:literal></expr><op:operator pos:line="141" pos:column="56">,</op:operator> <expr><lit:literal type="string" pos:line="141" pos:column="58">"\"534q253\""</lit:literal></expr><op:operator pos:line="141" pos:column="71">,</op:operator> <expr><lit:literal type="string" pos:line="141" pos:column="73">"\"?fdat\""</lit:literal></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>


        <function><type><attribute pos:line="145" pos:column="9">[<expr><name pos:line="145" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="146" pos:column="9">public</specifier> <name pos:line="146" pos:column="16">void</name></type> <name pos:line="146" pos:column="21">TermChangeTypeTestForNonWord</name><parameter_list pos:line="146" pos:column="49">()</parameter_list>
        <block pos:line="147" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="148" pos:column="13">const</specifier> <name pos:line="148" pos:column="19">string</name></type> <name pos:line="148" pos:column="26">word</name> <init pos:line="148" pos:column="31">= <expr><lit:literal type="string" pos:line="148" pos:column="33">"addi"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="149" pos:column="13">var</name></type> <name pos:line="149" pos:column="17">newQueries</name> <init pos:line="149" pos:column="28">= <expr><call><name><name pos:line="149" pos:column="30">reformer</name><op:operator pos:line="149" pos:column="38">.</op:operator><name pos:line="149" pos:column="39">ReformTermsSynchronously</name></name><argument_list pos:line="149" pos:column="63">(<argument><expr><op:operator pos:line="149" pos:column="64">new</op:operator> <name><name pos:line="149" pos:column="68">string</name><index pos:line="149" pos:column="74">[]</index></name> <block pos:line="149" pos:column="77">{ <expr><name pos:line="149" pos:column="79">word</name></expr> }</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="150" pos:column="13">AssertOriginalTerm</name><argument_list pos:line="150" pos:column="31">(<argument><expr><name pos:line="150" pos:column="32">newQueries</name></expr></argument>, <argument><expr><name pos:line="150" pos:column="44">word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="151" pos:column="13">var</name></type> <name pos:line="151" pos:column="17">q1</name> <init pos:line="151" pos:column="20">= <expr><call><name><name pos:line="151" pos:column="22">newQueries</name><op:operator pos:line="151" pos:column="32">.</op:operator><name pos:line="151" pos:column="33">Where</name></name><argument_list pos:line="151" pos:column="38">(<argument><expr><lambda><name pos:line="151" pos:column="39">q</name> <op:operator pos:line="151" pos:column="41">=&gt;</op:operator> <call><name><name pos:line="151" pos:column="44">q</name><op:operator pos:line="151" pos:column="45">.</op:operator><name pos:line="151" pos:column="46">ReformedWords</name><op:operator pos:line="151" pos:column="59">.</op:operator><name pos:line="151" pos:column="60">First</name></name><argument_list pos:line="151" pos:column="65">()</argument_list></call><op:operator pos:line="151" pos:column="67">.</op:operator><name pos:line="151" pos:column="68">Category</name> <op:operator pos:line="151" pos:column="77">==</op:operator> <name><name pos:line="151" pos:column="80">TermChangeCategory</name><op:operator pos:line="151" pos:column="98">.</op:operator>
                <name pos:line="152" pos:column="17">MISSPELLING</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="153" pos:column="13">var</name></type> <name pos:line="153" pos:column="17">q2</name> <init pos:line="153" pos:column="20">= <expr><call><name><name pos:line="153" pos:column="22">newQueries</name><op:operator pos:line="153" pos:column="32">.</op:operator><name pos:line="153" pos:column="33">Where</name></name><argument_list pos:line="153" pos:column="38">(<argument><expr><lambda><name pos:line="153" pos:column="39">q</name> <op:operator pos:line="153" pos:column="41">=&gt;</op:operator> <call><name><name pos:line="153" pos:column="44">q</name><op:operator pos:line="153" pos:column="45">.</op:operator><name pos:line="153" pos:column="46">ReformedWords</name><op:operator pos:line="153" pos:column="59">.</op:operator><name pos:line="153" pos:column="60">First</name></name><argument_list pos:line="153" pos:column="65">()</argument_list></call><op:operator pos:line="153" pos:column="67">.</op:operator><name pos:line="153" pos:column="68">Category</name> <op:operator pos:line="153" pos:column="77">==</op:operator> <name><name pos:line="153" pos:column="80">TermChangeCategory</name><op:operator pos:line="153" pos:column="98">.</op:operator>
                <name pos:line="154" pos:column="17">SE_SYNONYM</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="155" pos:column="13">var</name></type> <name pos:line="155" pos:column="17">q3</name> <init pos:line="155" pos:column="20">= <expr><call><name><name pos:line="155" pos:column="22">newQueries</name><op:operator pos:line="155" pos:column="32">.</op:operator><name pos:line="155" pos:column="33">Where</name></name><argument_list pos:line="155" pos:column="38">(<argument><expr><lambda><name pos:line="155" pos:column="39">q</name> <op:operator pos:line="155" pos:column="41">=&gt;</op:operator> <call><name><name pos:line="155" pos:column="44">q</name><op:operator pos:line="155" pos:column="45">.</op:operator><name pos:line="155" pos:column="46">ReformedWords</name><op:operator pos:line="155" pos:column="59">.</op:operator><name pos:line="155" pos:column="60">First</name></name><argument_list pos:line="155" pos:column="65">()</argument_list></call><op:operator pos:line="155" pos:column="67">.</op:operator><name pos:line="155" pos:column="68">Category</name> <op:operator pos:line="155" pos:column="77">==</op:operator> <name><name pos:line="155" pos:column="80">TermChangeCategory</name><op:operator pos:line="155" pos:column="98">.</op:operator>
               <name pos:line="156" pos:column="16">GENERAL_SYNONYM</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="157" pos:column="13">Assert</name><op:operator pos:line="157" pos:column="19">.</op:operator><name pos:line="157" pos:column="20">IsTrue</name></name><argument_list pos:line="157" pos:column="26">(<argument><expr><call><name><name pos:line="157" pos:column="27">q1</name><op:operator pos:line="157" pos:column="29">.</op:operator><name pos:line="157" pos:column="30">Any</name></name><argument_list pos:line="157" pos:column="33">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="158" pos:column="13">Assert</name><op:operator pos:line="158" pos:column="19">.</op:operator><name pos:line="158" pos:column="20">IsTrue</name></name><argument_list pos:line="158" pos:column="26">(<argument><expr><op:operator pos:line="158" pos:column="27">!</op:operator><call><name><name pos:line="158" pos:column="28">q2</name><op:operator pos:line="158" pos:column="30">.</op:operator><name pos:line="158" pos:column="31">Any</name></name><argument_list pos:line="158" pos:column="34">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="159" pos:column="13">Assert</name><op:operator pos:line="159" pos:column="19">.</op:operator><name pos:line="159" pos:column="20">IsTrue</name></name><argument_list pos:line="159" pos:column="26">(<argument><expr><op:operator pos:line="159" pos:column="27">!</op:operator><call><name><name pos:line="159" pos:column="28">q3</name><op:operator pos:line="159" pos:column="30">.</op:operator><name pos:line="159" pos:column="31">Any</name></name><argument_list pos:line="159" pos:column="34">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>


        <function><type><attribute pos:line="163" pos:column="9">[<expr><name pos:line="163" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="164" pos:column="9">public</specifier> <name pos:line="164" pos:column="16">void</name></type> <name pos:line="164" pos:column="21">TermChangeTypeTestForWordExistingInLocalDictionary</name><parameter_list pos:line="164" pos:column="71">()</parameter_list>
        <block pos:line="165" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="166" pos:column="13">const</specifier> <name pos:line="166" pos:column="19">string</name></type> <name pos:line="166" pos:column="26">word</name> <init pos:line="166" pos:column="31">= <expr><lit:literal type="string" pos:line="166" pos:column="33">"add"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="167" pos:column="13">var</name></type> <name pos:line="167" pos:column="17">newQueries</name> <init pos:line="167" pos:column="28">= <expr><call><name><name pos:line="167" pos:column="30">reformer</name><op:operator pos:line="167" pos:column="38">.</op:operator><name pos:line="167" pos:column="39">ReformTermsSynchronously</name></name><argument_list pos:line="167" pos:column="63">(<argument><expr><op:operator pos:line="167" pos:column="64">new</op:operator> <name><name pos:line="167" pos:column="68">string</name><index pos:line="167" pos:column="74">[]</index></name> <block pos:line="167" pos:column="77">{<expr><name pos:line="167" pos:column="78">word</name></expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="168" pos:column="13">AssertOriginalTerm</name><argument_list pos:line="168" pos:column="31">(<argument><expr><name pos:line="168" pos:column="32">newQueries</name></expr></argument>, <argument><expr><name pos:line="168" pos:column="44">word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="169" pos:column="13">var</name></type> <name pos:line="169" pos:column="17">q1</name> <init pos:line="169" pos:column="20">= <expr><call><name><name pos:line="169" pos:column="22">newQueries</name><op:operator pos:line="169" pos:column="32">.</op:operator><name pos:line="169" pos:column="33">Where</name></name><argument_list pos:line="169" pos:column="38">(<argument><expr><lambda><name pos:line="169" pos:column="39">q</name> <op:operator pos:line="169" pos:column="41">=&gt;</op:operator> <call><name><name pos:line="169" pos:column="44">q</name><op:operator pos:line="169" pos:column="45">.</op:operator><name pos:line="169" pos:column="46">ReformedWords</name><op:operator pos:line="169" pos:column="59">.</op:operator><name pos:line="169" pos:column="60">First</name></name><argument_list pos:line="169" pos:column="65">()</argument_list></call><op:operator pos:line="169" pos:column="67">.</op:operator><name pos:line="169" pos:column="68">Category</name> <op:operator pos:line="169" pos:column="77">==</op:operator> <name><name pos:line="169" pos:column="80">TermChangeCategory</name><op:operator pos:line="169" pos:column="98">.</op:operator>
                <name pos:line="170" pos:column="17">MISSPELLING</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="171" pos:column="13">var</name></type> <name pos:line="171" pos:column="17">q2</name> <init pos:line="171" pos:column="20">= <expr><call><name><name pos:line="171" pos:column="22">newQueries</name><op:operator pos:line="171" pos:column="32">.</op:operator><name pos:line="171" pos:column="33">Where</name></name><argument_list pos:line="171" pos:column="38">(<argument><expr><lambda><name pos:line="171" pos:column="39">q</name> <op:operator pos:line="171" pos:column="41">=&gt;</op:operator> <call><name><name pos:line="171" pos:column="44">q</name><op:operator pos:line="171" pos:column="45">.</op:operator><name pos:line="171" pos:column="46">ReformedWords</name><op:operator pos:line="171" pos:column="59">.</op:operator><name pos:line="171" pos:column="60">First</name></name><argument_list pos:line="171" pos:column="65">()</argument_list></call><op:operator pos:line="171" pos:column="67">.</op:operator><name pos:line="171" pos:column="68">Category</name> <op:operator pos:line="171" pos:column="77">==</op:operator> <name><name pos:line="171" pos:column="80">TermChangeCategory</name><op:operator pos:line="171" pos:column="98">.</op:operator>
                <name pos:line="172" pos:column="17">SE_SYNONYM</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="173" pos:column="13">var</name></type> <name pos:line="173" pos:column="17">q3</name> <init pos:line="173" pos:column="20">= <expr><call><name><name pos:line="173" pos:column="22">newQueries</name><op:operator pos:line="173" pos:column="32">.</op:operator><name pos:line="173" pos:column="33">Where</name></name><argument_list pos:line="173" pos:column="38">(<argument><expr><lambda><name pos:line="173" pos:column="39">q</name> <op:operator pos:line="173" pos:column="41">=&gt;</op:operator> <call><name><name pos:line="173" pos:column="44">q</name><op:operator pos:line="173" pos:column="45">.</op:operator><name pos:line="173" pos:column="46">ReformedWords</name><op:operator pos:line="173" pos:column="59">.</op:operator><name pos:line="173" pos:column="60">First</name></name><argument_list pos:line="173" pos:column="65">()</argument_list></call><op:operator pos:line="173" pos:column="67">.</op:operator><name pos:line="173" pos:column="68">Category</name> <op:operator pos:line="173" pos:column="77">==</op:operator> <name><name pos:line="173" pos:column="80">TermChangeCategory</name><op:operator pos:line="173" pos:column="98">.</op:operator>
                <name pos:line="174" pos:column="17">GENERAL_SYNONYM</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
            <expr_stmt><expr><call><name><name pos:line="176" pos:column="13">Assert</name><op:operator pos:line="176" pos:column="19">.</op:operator><name pos:line="176" pos:column="20">IsTrue</name></name><argument_list pos:line="176" pos:column="26">(<argument><expr><op:operator pos:line="176" pos:column="27">!</op:operator><call><name><name pos:line="176" pos:column="28">q1</name><op:operator pos:line="176" pos:column="30">.</op:operator><name pos:line="176" pos:column="31">Any</name></name><argument_list pos:line="176" pos:column="34">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="177" pos:column="13">Assert</name><op:operator pos:line="177" pos:column="19">.</op:operator><name pos:line="177" pos:column="20">IsTrue</name></name><argument_list pos:line="177" pos:column="26">(<argument><expr><op:operator pos:line="177" pos:column="27">!</op:operator><call><name><name pos:line="177" pos:column="28">q2</name><op:operator pos:line="177" pos:column="30">.</op:operator><name pos:line="177" pos:column="31">Any</name></name><argument_list pos:line="177" pos:column="34">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="178" pos:column="13">Assert</name><op:operator pos:line="178" pos:column="19">.</op:operator><name pos:line="178" pos:column="20">IsTrue</name></name><argument_list pos:line="178" pos:column="26">(<argument><expr><op:operator pos:line="178" pos:column="27">!</op:operator><call><name><name pos:line="178" pos:column="28">q3</name><op:operator pos:line="178" pos:column="30">.</op:operator><name pos:line="178" pos:column="31">Any</name></name><argument_list pos:line="178" pos:column="34">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="181" pos:column="9">[<expr><name pos:line="181" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="182" pos:column="9">public</specifier> <name pos:line="182" pos:column="16">void</name></type> <name pos:line="182" pos:column="21">TermChangeTypeTestForWordNotExistingInLocalDictionary</name><parameter_list pos:line="182" pos:column="74">()</parameter_list>
        <block pos:line="183" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="184" pos:column="13">const</specifier> <name pos:line="184" pos:column="19">string</name></type> <name pos:line="184" pos:column="26">word</name> <init pos:line="184" pos:column="31">= <expr><lit:literal type="string" pos:line="184" pos:column="33">"instantiate"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="185" pos:column="13">var</name></type> <name pos:line="185" pos:column="17">newQueries</name> <init pos:line="185" pos:column="28">= <expr><call><name><name pos:line="185" pos:column="30">reformer</name><op:operator pos:line="185" pos:column="38">.</op:operator><name pos:line="185" pos:column="39">ReformTermsSynchronously</name></name><argument_list pos:line="185" pos:column="63">(<argument><expr><op:operator pos:line="185" pos:column="64">new</op:operator> <name><name pos:line="185" pos:column="68">string</name><index pos:line="185" pos:column="74">[]</index></name> <block pos:line="185" pos:column="77">{<expr><name pos:line="185" pos:column="78">word</name></expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="186" pos:column="13">AssertOriginalTerm</name><argument_list pos:line="186" pos:column="31">(<argument><expr><name pos:line="186" pos:column="32">newQueries</name></expr></argument>, <argument><expr><name pos:line="186" pos:column="44">word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="187" pos:column="13">var</name></type> <name pos:line="187" pos:column="17">q1</name> <init pos:line="187" pos:column="20">= <expr><call><name><name pos:line="187" pos:column="22">newQueries</name><op:operator pos:line="187" pos:column="32">.</op:operator><name pos:line="187" pos:column="33">Where</name></name><argument_list pos:line="187" pos:column="38">(<argument><expr><lambda><name pos:line="187" pos:column="39">q</name> <op:operator pos:line="187" pos:column="41">=&gt;</op:operator> <call><name><name pos:line="187" pos:column="44">q</name><op:operator pos:line="187" pos:column="45">.</op:operator><name pos:line="187" pos:column="46">ReformedWords</name><op:operator pos:line="187" pos:column="59">.</op:operator><name pos:line="187" pos:column="60">First</name></name><argument_list pos:line="187" pos:column="65">()</argument_list></call><op:operator pos:line="187" pos:column="67">.</op:operator><name pos:line="187" pos:column="68">Category</name> <op:operator pos:line="187" pos:column="77">==</op:operator> <name><name pos:line="187" pos:column="80">TermChangeCategory</name><op:operator pos:line="187" pos:column="98">.</op:operator>
                <name pos:line="188" pos:column="17">MISSPELLING</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="189" pos:column="13">var</name></type> <name pos:line="189" pos:column="17">q2</name> <init pos:line="189" pos:column="20">= <expr><call><name><name pos:line="189" pos:column="22">newQueries</name><op:operator pos:line="189" pos:column="32">.</op:operator><name pos:line="189" pos:column="33">Where</name></name><argument_list pos:line="189" pos:column="38">(<argument><expr><lambda><name pos:line="189" pos:column="39">q</name> <op:operator pos:line="189" pos:column="41">=&gt;</op:operator> <call><name><name pos:line="189" pos:column="44">q</name><op:operator pos:line="189" pos:column="45">.</op:operator><name pos:line="189" pos:column="46">ReformedWords</name><op:operator pos:line="189" pos:column="59">.</op:operator><name pos:line="189" pos:column="60">First</name></name><argument_list pos:line="189" pos:column="65">()</argument_list></call><op:operator pos:line="189" pos:column="67">.</op:operator><name pos:line="189" pos:column="68">Category</name> <op:operator pos:line="189" pos:column="77">==</op:operator> <name><name pos:line="189" pos:column="80">TermChangeCategory</name><op:operator pos:line="189" pos:column="98">.</op:operator>
                <name pos:line="190" pos:column="17">SE_SYNONYM</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="191" pos:column="13">var</name></type> <name pos:line="191" pos:column="17">q3</name> <init pos:line="191" pos:column="20">= <expr><call><name><name pos:line="191" pos:column="22">newQueries</name><op:operator pos:line="191" pos:column="32">.</op:operator><name pos:line="191" pos:column="33">Where</name></name><argument_list pos:line="191" pos:column="38">(<argument><expr><lambda><name pos:line="191" pos:column="39">q</name> <op:operator pos:line="191" pos:column="41">=&gt;</op:operator> <call><name><name pos:line="191" pos:column="44">q</name><op:operator pos:line="191" pos:column="45">.</op:operator><name pos:line="191" pos:column="46">ReformedWords</name><op:operator pos:line="191" pos:column="59">.</op:operator><name pos:line="191" pos:column="60">First</name></name><argument_list pos:line="191" pos:column="65">()</argument_list></call><op:operator pos:line="191" pos:column="67">.</op:operator><name pos:line="191" pos:column="68">Category</name> <op:operator pos:line="191" pos:column="77">==</op:operator> <name><name pos:line="191" pos:column="80">TermChangeCategory</name><op:operator pos:line="191" pos:column="98">.</op:operator>
                <name pos:line="192" pos:column="17">GENERAL_SYNONYM</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="193" pos:column="13">Assert</name><op:operator pos:line="193" pos:column="19">.</op:operator><name pos:line="193" pos:column="20">IsTrue</name></name><argument_list pos:line="193" pos:column="26">(<argument><expr><call><name><name pos:line="193" pos:column="27">q1</name><op:operator pos:line="193" pos:column="29">.</op:operator><name pos:line="193" pos:column="30">Any</name></name><argument_list pos:line="193" pos:column="33">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="194" pos:column="13">Assert</name><op:operator pos:line="194" pos:column="19">.</op:operator><name pos:line="194" pos:column="20">IsTrue</name></name><argument_list pos:line="194" pos:column="26">(<argument><expr><call><name><name pos:line="194" pos:column="27">q2</name><op:operator pos:line="194" pos:column="29">.</op:operator><name pos:line="194" pos:column="30">Any</name></name><argument_list pos:line="194" pos:column="33">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="195" pos:column="13">Assert</name><op:operator pos:line="195" pos:column="19">.</op:operator><name pos:line="195" pos:column="20">IsTrue</name></name><argument_list pos:line="195" pos:column="26">(<argument><expr><op:operator pos:line="195" pos:column="27">!</op:operator><call><name><name pos:line="195" pos:column="28">q3</name><op:operator pos:line="195" pos:column="30">.</op:operator><name pos:line="195" pos:column="31">Any</name></name><argument_list pos:line="195" pos:column="34">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="196" pos:column="13">var</name></type> <name pos:line="196" pos:column="17">word1</name> <init pos:line="196" pos:column="23">= <expr><call><name><name pos:line="196" pos:column="25">q1</name><op:operator pos:line="196" pos:column="27">.</op:operator><name pos:line="196" pos:column="28">First</name></name><argument_list pos:line="196" pos:column="33">()</argument_list></call><op:operator pos:line="196" pos:column="35">.</op:operator><call><name><name pos:line="196" pos:column="36">ReformedWords</name><op:operator pos:line="196" pos:column="49">.</op:operator><name pos:line="196" pos:column="50">First</name></name><argument_list pos:line="196" pos:column="55">()</argument_list></call><op:operator pos:line="196" pos:column="57">.</op:operator><name pos:line="196" pos:column="58">NewTerm</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="197" pos:column="13">var</name></type> <name pos:line="197" pos:column="17">word2</name> <init pos:line="197" pos:column="23">= <expr><call><name><name pos:line="197" pos:column="25">q2</name><op:operator pos:line="197" pos:column="27">.</op:operator><name pos:line="197" pos:column="28">First</name></name><argument_list pos:line="197" pos:column="33">()</argument_list></call><op:operator pos:line="197" pos:column="35">.</op:operator><call><name><name pos:line="197" pos:column="36">ReformedWords</name><op:operator pos:line="197" pos:column="49">.</op:operator><name pos:line="197" pos:column="50">First</name></name><argument_list pos:line="197" pos:column="55">()</argument_list></call><op:operator pos:line="197" pos:column="57">.</op:operator><name pos:line="197" pos:column="58">NewTerm</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="198" pos:column="13">Assert</name><op:operator pos:line="198" pos:column="19">.</op:operator><name pos:line="198" pos:column="20">IsTrue</name></name><argument_list pos:line="198" pos:column="26">(<argument><expr><op:operator pos:line="198" pos:column="27">!</op:operator><call><name><name pos:line="198" pos:column="28">word1</name><op:operator pos:line="198" pos:column="33">.</op:operator><name pos:line="198" pos:column="34">Equals</name></name><argument_list pos:line="198" pos:column="40">(<argument><expr><name pos:line="198" pos:column="41">word2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="201" pos:column="9">[<expr><name pos:line="201" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="202" pos:column="9">public</specifier> <name pos:line="202" pos:column="16">void</name></type> <name pos:line="202" pos:column="21">TermChangeTypeForTermsInGeneralEnglishDictionary</name><parameter_list pos:line="202" pos:column="69">()</parameter_list>
        <block pos:line="203" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="204" pos:column="13">const</specifier> <name pos:line="204" pos:column="19">string</name></type> <name pos:line="204" pos:column="26">word</name> <init pos:line="204" pos:column="31">= <expr><lit:literal type="string" pos:line="204" pos:column="33">"principal"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="205" pos:column="13">var</name></type> <name pos:line="205" pos:column="17">newQueries</name> <init pos:line="205" pos:column="28">= <expr><call><name><name pos:line="205" pos:column="30">reformer</name><op:operator pos:line="205" pos:column="38">.</op:operator><name pos:line="205" pos:column="39">ReformTermsSynchronously</name></name><argument_list pos:line="205" pos:column="63">(<argument><expr><op:operator pos:line="205" pos:column="64">new</op:operator> <name><name pos:line="205" pos:column="68">string</name><index pos:line="205" pos:column="74">[]</index></name> <block pos:line="205" pos:column="77">{ <expr><name pos:line="205" pos:column="79">word</name></expr> }</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="206" pos:column="13">AssertOriginalTerm</name><argument_list pos:line="206" pos:column="31">(<argument><expr><name pos:line="206" pos:column="32">newQueries</name></expr></argument>, <argument><expr><name pos:line="206" pos:column="44">word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="207" pos:column="13">var</name></type> <name pos:line="207" pos:column="17">q1</name> <init pos:line="207" pos:column="20">= <expr><call><name><name pos:line="207" pos:column="22">newQueries</name><op:operator pos:line="207" pos:column="32">.</op:operator><name pos:line="207" pos:column="33">Where</name></name><argument_list pos:line="207" pos:column="38">(<argument><expr><lambda><name pos:line="207" pos:column="39">q</name> <op:operator pos:line="207" pos:column="41">=&gt;</op:operator> <call><name><name pos:line="207" pos:column="44">q</name><op:operator pos:line="207" pos:column="45">.</op:operator><name pos:line="207" pos:column="46">ReformedWords</name><op:operator pos:line="207" pos:column="59">.</op:operator><name pos:line="207" pos:column="60">First</name></name><argument_list pos:line="207" pos:column="65">()</argument_list></call><op:operator pos:line="207" pos:column="67">.</op:operator><name pos:line="207" pos:column="68">Category</name> <op:operator pos:line="207" pos:column="77">==</op:operator> <name><name pos:line="207" pos:column="80">TermChangeCategory</name><op:operator pos:line="207" pos:column="98">.</op:operator>
                <name pos:line="208" pos:column="17">MISSPELLING</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="209" pos:column="13">var</name></type> <name pos:line="209" pos:column="17">q2</name> <init pos:line="209" pos:column="20">= <expr><call><name><name pos:line="209" pos:column="22">newQueries</name><op:operator pos:line="209" pos:column="32">.</op:operator><name pos:line="209" pos:column="33">Where</name></name><argument_list pos:line="209" pos:column="38">(<argument><expr><lambda><name pos:line="209" pos:column="39">q</name> <op:operator pos:line="209" pos:column="41">=&gt;</op:operator> <call><name><name pos:line="209" pos:column="44">q</name><op:operator pos:line="209" pos:column="45">.</op:operator><name pos:line="209" pos:column="46">ReformedWords</name><op:operator pos:line="209" pos:column="59">.</op:operator><name pos:line="209" pos:column="60">First</name></name><argument_list pos:line="209" pos:column="65">()</argument_list></call><op:operator pos:line="209" pos:column="67">.</op:operator><name pos:line="209" pos:column="68">Category</name> <op:operator pos:line="209" pos:column="77">==</op:operator> <name><name pos:line="209" pos:column="80">TermChangeCategory</name><op:operator pos:line="209" pos:column="98">.</op:operator>
                <name pos:line="210" pos:column="17">SE_SYNONYM</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="211" pos:column="13">var</name></type> <name pos:line="211" pos:column="17">q3</name> <init pos:line="211" pos:column="20">= <expr><call><name><name pos:line="211" pos:column="22">newQueries</name><op:operator pos:line="211" pos:column="32">.</op:operator><name pos:line="211" pos:column="33">Where</name></name><argument_list pos:line="211" pos:column="38">(<argument><expr><lambda><name pos:line="211" pos:column="39">q</name> <op:operator pos:line="211" pos:column="41">=&gt;</op:operator> <call><name><name pos:line="211" pos:column="44">q</name><op:operator pos:line="211" pos:column="45">.</op:operator><name pos:line="211" pos:column="46">ReformedWords</name><op:operator pos:line="211" pos:column="59">.</op:operator><name pos:line="211" pos:column="60">First</name></name><argument_list pos:line="211" pos:column="65">()</argument_list></call><op:operator pos:line="211" pos:column="67">.</op:operator><name pos:line="211" pos:column="68">Category</name> <op:operator pos:line="211" pos:column="77">==</op:operator> <name><name pos:line="211" pos:column="80">TermChangeCategory</name><op:operator pos:line="211" pos:column="98">.</op:operator>
                <name pos:line="212" pos:column="17">GENERAL_SYNONYM</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="213" pos:column="13">Assert</name><op:operator pos:line="213" pos:column="19">.</op:operator><name pos:line="213" pos:column="20">IsTrue</name></name><argument_list pos:line="213" pos:column="26">(<argument><expr><call><name><name pos:line="213" pos:column="27">q1</name><op:operator pos:line="213" pos:column="29">.</op:operator><name pos:line="213" pos:column="30">Any</name></name><argument_list pos:line="213" pos:column="33">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="214" pos:column="13">Assert</name><op:operator pos:line="214" pos:column="19">.</op:operator><name pos:line="214" pos:column="20">IsTrue</name></name><argument_list pos:line="214" pos:column="26">(<argument><expr><op:operator pos:line="214" pos:column="27">!</op:operator><call><name><name pos:line="214" pos:column="28">q2</name><op:operator pos:line="214" pos:column="30">.</op:operator><name pos:line="214" pos:column="31">Any</name></name><argument_list pos:line="214" pos:column="34">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="215" pos:column="13">Assert</name><op:operator pos:line="215" pos:column="19">.</op:operator><name pos:line="215" pos:column="20">IsTrue</name></name><argument_list pos:line="215" pos:column="26">(<argument><expr><call><name><name pos:line="215" pos:column="27">q3</name><op:operator pos:line="215" pos:column="29">.</op:operator><name pos:line="215" pos:column="30">Any</name></name><argument_list pos:line="215" pos:column="33">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="218" pos:column="9">[<expr><name pos:line="218" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="219" pos:column="9">public</specifier> <name pos:line="219" pos:column="16">void</name></type> <name pos:line="219" pos:column="21">TestingTermsThatNeverOccurTogetherAreFiltered</name><parameter_list pos:line="219" pos:column="66">()</parameter_list>
        <block pos:line="220" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="221" pos:column="13">var</name></type> <name pos:line="221" pos:column="17">reformed</name> <init pos:line="221" pos:column="26">= <expr><call><name><name pos:line="221" pos:column="28">reformer</name><op:operator pos:line="221" pos:column="36">.</op:operator><name pos:line="221" pos:column="37">ReformTermsSynchronously</name></name><argument_list pos:line="221" pos:column="61">(<argument><expr><op:operator pos:line="221" pos:column="62">new</op:operator> <name><name pos:line="221" pos:column="66">string</name><index pos:line="221" pos:column="72">[]</index></name> <block pos:line="221" pos:column="75">{<expr><lit:literal type="string" pos:line="221" pos:column="76">"sando"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="221" pos:column="85">"me"</lit:literal></expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="222" pos:column="13">reformed</name> <op:operator pos:line="222" pos:column="22">=</op:operator> <call><name><name pos:line="222" pos:column="24">reformer</name><op:operator pos:line="222" pos:column="32">.</op:operator><name pos:line="222" pos:column="33">ReformTermsSynchronously</name></name><argument_list pos:line="222" pos:column="57">(<argument><expr><op:operator pos:line="222" pos:column="58">new</op:operator> <name><name pos:line="222" pos:column="62">string</name><index pos:line="222" pos:column="68">[]</index></name> <block pos:line="222" pos:column="71">{<expr><lit:literal type="string" pos:line="222" pos:column="72">"sand"</lit:literal></expr><op:operator pos:line="222" pos:column="78">,</op:operator> <expr><lit:literal type="string" pos:line="222" pos:column="80">"s"</lit:literal></expr><op:operator pos:line="222" pos:column="83">,</op:operator> <expr><lit:literal type="string" pos:line="222" pos:column="85">"and"</lit:literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
