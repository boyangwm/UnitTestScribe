<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Parser\Parser.UnitTests\XAMLFileParserTest.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Diagnostics</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">IO</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Linq</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">System</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">Text</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">NUnit</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">Framework</name></name>;</using>

<namespace pos:line="9" pos:column="1">namespace <name><name pos:line="9" pos:column="11">Sando</name><op:operator pos:line="9" pos:column="16">.</op:operator><name pos:line="9" pos:column="17">Parser</name><op:operator pos:line="9" pos:column="23">.</op:operator><name pos:line="9" pos:column="24">UnitTests</name></name>
<block pos:line="10" pos:column="1">{
    <class><attribute pos:line="11" pos:column="5">[<expr><name pos:line="11" pos:column="6">TestFixture</name></expr>]</attribute>
    <specifier pos:line="12" pos:column="5">public</specifier> class <name pos:line="12" pos:column="18">XAMLFileParserTest</name>
    <block pos:line="13" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="14" pos:column="9">private</specifier> <specifier pos:line="14" pos:column="17">const</specifier> <name pos:line="14" pos:column="23">string</name></type> <name pos:line="14" pos:column="30">filePath</name> <init pos:line="14" pos:column="39">= <expr><lit:literal type="string" pos:line="14" pos:column="41">@"TestFiles\SampleXAML.txt"</lit:literal></expr></init></decl>;</decl_stmt>

        <function><type><attribute pos:line="16" pos:column="9">[<expr><name pos:line="16" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="17" pos:column="9">public</specifier> <name pos:line="17" pos:column="16">void</name></type> <name pos:line="17" pos:column="21">TestLengthOfEachXamlElement</name><parameter_list pos:line="17" pos:column="48">()</parameter_list>
        <block pos:line="18" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="19" pos:column="13">var</name></type> <name pos:line="19" pos:column="17">parser</name> <init pos:line="19" pos:column="24">= <expr><op:operator pos:line="19" pos:column="26">new</op:operator> <call><name pos:line="19" pos:column="30">XAMLFileParser</name><argument_list pos:line="19" pos:column="44">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="20" pos:column="13">var</name></type> <name pos:line="20" pos:column="17">elements</name> <init pos:line="20" pos:column="26">= <expr><call><name><name pos:line="20" pos:column="28">parser</name><op:operator pos:line="20" pos:column="34">.</op:operator><name pos:line="20" pos:column="35">Parse</name></name><argument_list pos:line="20" pos:column="40">(<argument><expr><name pos:line="20" pos:column="41">filePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="21" pos:column="13">var</name></type> <name pos:line="21" pos:column="17">sb</name> <init pos:line="21" pos:column="20">= <expr><op:operator pos:line="21" pos:column="22">new</op:operator> <call><name pos:line="21" pos:column="26">StringBuilder</name><argument_list pos:line="21" pos:column="39">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="22" pos:column="13">foreach (<init><decl><type><name pos:line="22" pos:column="22">var</name></type> <name pos:line="22" pos:column="26">element</name> <range pos:line="22" pos:column="34">in <expr><name pos:line="22" pos:column="37">elements</name></expr></range></decl></init>)
            <block pos:line="23" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="24" pos:column="17">sb</name><op:operator pos:line="24" pos:column="19">.</op:operator><name pos:line="24" pos:column="20">AppendLine</name></name><argument_list pos:line="24" pos:column="30">(<argument><expr><name><name pos:line="24" pos:column="31">element</name><op:operator pos:line="24" pos:column="38">.</op:operator><name pos:line="24" pos:column="39">RawSource</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="25" pos:column="17">sb</name><op:operator pos:line="25" pos:column="19">.</op:operator><name pos:line="25" pos:column="20">AppendLine</name></name><argument_list pos:line="25" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="25" pos:column="31">"===================================================="</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="26" pos:column="17">Assert</name><op:operator pos:line="26" pos:column="23">.</op:operator><name pos:line="26" pos:column="24">IsTrue</name></name><argument_list pos:line="26" pos:column="30">(<argument><expr><call><name><name pos:line="26" pos:column="31">element</name><op:operator pos:line="26" pos:column="38">.</op:operator><name pos:line="26" pos:column="39">RawSource</name><op:operator pos:line="26" pos:column="48">.</op:operator><name pos:line="26" pos:column="49">Split</name></name><argument_list pos:line="26" pos:column="54">(<argument><expr><op:operator pos:line="26" pos:column="55">new</op:operator> <name><name pos:line="26" pos:column="59">string</name><index pos:line="26" pos:column="65">[]</index></name><block pos:line="26" pos:column="67">{<expr><name><name pos:line="26" pos:column="68">Environment</name><op:operator pos:line="26" pos:column="79">.</op:operator><name pos:line="26" pos:column="80">NewLine</name></name></expr>}</block></expr></argument>, 
                    <argument><expr><name><name pos:line="27" pos:column="21">StringSplitOptions</name><op:operator pos:line="27" pos:column="39">.</op:operator><name pos:line="27" pos:column="40">None</name></name></expr></argument>)</argument_list></call><op:operator pos:line="27" pos:column="45">.</op:operator><call><name pos:line="27" pos:column="46">Count</name><argument_list pos:line="27" pos:column="51">()</argument_list></call> <op:operator pos:line="27" pos:column="54">&lt;=</op:operator> <name><name pos:line="27" pos:column="57">XAMLFileParser</name><op:operator pos:line="27" pos:column="71">.</op:operator><name pos:line="27" pos:column="72">LengthLimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>

        <function><type><attribute pos:line="31" pos:column="9">[<expr><name pos:line="31" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="32" pos:column="9">public</specifier> <name pos:line="32" pos:column="16">void</name></type> <name pos:line="32" pos:column="21">PerformanceTest</name><parameter_list pos:line="32" pos:column="36">()</parameter_list>
        <block pos:line="33" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="34" pos:column="13">var</name></type> <name pos:line="34" pos:column="17">parser</name> <init pos:line="34" pos:column="24">= <expr><op:operator pos:line="34" pos:column="26">new</op:operator> <call><name pos:line="34" pos:column="30">XAMLFileParser</name><argument_list pos:line="34" pos:column="44">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="35" pos:column="13">var</name></type> <name pos:line="35" pos:column="17">sw</name> <init pos:line="35" pos:column="20">= <expr><op:operator pos:line="35" pos:column="22">new</op:operator> <call><name pos:line="35" pos:column="26">Stopwatch</name><argument_list pos:line="35" pos:column="35">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="36" pos:column="13">sw</name><op:operator pos:line="36" pos:column="15">.</op:operator><name pos:line="36" pos:column="16">Start</name></name><argument_list pos:line="36" pos:column="21">()</argument_list></call></expr>;</expr_stmt>
            <for pos:line="37" pos:column="13">for (<init><decl><type><name pos:line="37" pos:column="18">int</name></type> <name pos:line="37" pos:column="22">i</name> <init pos:line="37" pos:column="24">= <expr><lit:literal type="number" pos:line="37" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="37" pos:column="29">i</name> <op:operator pos:line="37" pos:column="31">&lt;</op:operator> <lit:literal type="number" pos:line="37" pos:column="33">100</lit:literal></expr>;</condition> <incr><expr><name pos:line="37" pos:column="38">i</name><op:operator pos:line="37" pos:column="39">++</op:operator></expr></incr>)
            <block pos:line="38" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="39" pos:column="17">parser</name><op:operator pos:line="39" pos:column="23">.</op:operator><name pos:line="39" pos:column="24">Parse</name></name><argument_list pos:line="39" pos:column="29">(<argument><expr><name pos:line="39" pos:column="30">filePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><call><name><name pos:line="41" pos:column="13">sw</name><op:operator pos:line="41" pos:column="15">.</op:operator><name pos:line="41" pos:column="16">Stop</name></name><argument_list pos:line="41" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="42" pos:column="13">Assert</name><op:operator pos:line="42" pos:column="19">.</op:operator><name pos:line="42" pos:column="20">IsTrue</name></name><argument_list pos:line="42" pos:column="26">(<argument><expr><name><name pos:line="42" pos:column="27">sw</name><op:operator pos:line="42" pos:column="29">.</op:operator><name pos:line="42" pos:column="30">Elapsed</name><op:operator pos:line="42" pos:column="37">.</op:operator><name pos:line="42" pos:column="38">TotalSeconds</name></name> <op:operator pos:line="42" pos:column="51">&lt;</op:operator> <lit:literal type="number" pos:line="42" pos:column="53">50</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace>
    </unit>
