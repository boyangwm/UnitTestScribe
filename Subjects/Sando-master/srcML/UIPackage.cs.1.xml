<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\UI\UI\UIPackage.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">ComponentModel</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">ComponentModel</name><op:operator pos:line="4" pos:column="28">.</op:operator><name pos:line="4" pos:column="29">Design</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Globalization</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">System</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">IO</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">System</name><op:operator pos:line="7" pos:column="13">.</op:operator><name pos:line="7" pos:column="14">Runtime</name><op:operator pos:line="7" pos:column="21">.</op:operator><name pos:line="7" pos:column="22">InteropServices</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">ABB</name><op:operator pos:line="8" pos:column="10">.</op:operator><name pos:line="8" pos:column="11">SrcML</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">ABB</name><op:operator pos:line="9" pos:column="10">.</op:operator><name pos:line="9" pos:column="11">SrcML</name><op:operator pos:line="9" pos:column="16">.</op:operator><name pos:line="9" pos:column="17">VisualStudio</name><op:operator pos:line="9" pos:column="29">.</op:operator><name pos:line="9" pos:column="30">SrcMLService</name></name>;</using>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">Configuration</name><op:operator pos:line="10" pos:column="20">.</op:operator><name pos:line="10" pos:column="21">OptionsPages</name></name>;</using>
<using pos:line="11" pos:column="1">using <name pos:line="11" pos:column="7">EnvDTE</name>;</using>
<using pos:line="12" pos:column="1">using <name pos:line="12" pos:column="7">EnvDTE80</name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">Lucene</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Net</name><op:operator pos:line="13" pos:column="17">.</op:operator><name pos:line="13" pos:column="18">Analysis</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">Lucene</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Net</name><op:operator pos:line="14" pos:column="17">.</op:operator><name pos:line="14" pos:column="18">Analysis</name><op:operator pos:line="14" pos:column="26">.</op:operator><name pos:line="14" pos:column="27">Snowball</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">Sando</name><op:operator pos:line="15" pos:column="12">.</op:operator><name pos:line="15" pos:column="13">Core</name><op:operator pos:line="15" pos:column="17">.</op:operator><name pos:line="15" pos:column="18">QueryRefomers</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">Sando</name><op:operator pos:line="16" pos:column="12">.</op:operator><name pos:line="16" pos:column="13">DependencyInjection</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">Sando</name><op:operator pos:line="17" pos:column="12">.</op:operator><name pos:line="17" pos:column="13">Indexer</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">Sando</name><op:operator pos:line="18" pos:column="12">.</op:operator><name pos:line="18" pos:column="13">Indexer</name><op:operator pos:line="18" pos:column="20">.</op:operator><name pos:line="18" pos:column="21">IndexFiltering</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">Sando</name><op:operator pos:line="19" pos:column="12">.</op:operator><name pos:line="19" pos:column="13">UI</name><op:operator pos:line="19" pos:column="15">.</op:operator><name pos:line="19" pos:column="16">Options</name></name>;</using>
<using pos:line="20" pos:column="1">using <name><name pos:line="20" pos:column="7">Microsoft</name><op:operator pos:line="20" pos:column="16">.</op:operator><name pos:line="20" pos:column="17">VisualStudio</name><op:operator pos:line="20" pos:column="29">.</op:operator><name pos:line="20" pos:column="30">Shell</name></name>;</using>
<using pos:line="21" pos:column="1">using <name><name pos:line="21" pos:column="7">Sando</name><op:operator pos:line="21" pos:column="12">.</op:operator><name pos:line="21" pos:column="13">Core</name><op:operator pos:line="21" pos:column="17">.</op:operator><name pos:line="21" pos:column="18">Extensions</name></name>;</using>
<using pos:line="22" pos:column="1">using <name><name pos:line="22" pos:column="7">Sando</name><op:operator pos:line="22" pos:column="12">.</op:operator><name pos:line="22" pos:column="13">Core</name><op:operator pos:line="22" pos:column="17">.</op:operator><name pos:line="22" pos:column="18">Extensions</name><op:operator pos:line="22" pos:column="28">.</op:operator><name pos:line="22" pos:column="29">Configuration</name></name>;</using>
<using pos:line="23" pos:column="1">using <name><name pos:line="23" pos:column="7">Sando</name><op:operator pos:line="23" pos:column="12">.</op:operator><name pos:line="23" pos:column="13">Core</name><op:operator pos:line="23" pos:column="17">.</op:operator><name pos:line="23" pos:column="18">Tools</name></name>;</using>
<using pos:line="24" pos:column="1">using <name><name pos:line="24" pos:column="7">Sando</name><op:operator pos:line="24" pos:column="12">.</op:operator><name pos:line="24" pos:column="13">Indexer</name><op:operator pos:line="24" pos:column="20">.</op:operator><name pos:line="24" pos:column="21">Searching</name></name>;</using>
<using pos:line="25" pos:column="1">using <name><name pos:line="25" pos:column="7">Sando</name><op:operator pos:line="25" pos:column="12">.</op:operator><name pos:line="25" pos:column="13">Parser</name></name>;</using>
<using pos:line="26" pos:column="1">using <name><name pos:line="26" pos:column="7">Sando</name><op:operator pos:line="26" pos:column="12">.</op:operator><name pos:line="26" pos:column="13">SearchEngine</name></name>;</using>
<using pos:line="27" pos:column="1">using <name><name pos:line="27" pos:column="7">Sando</name><op:operator pos:line="27" pos:column="12">.</op:operator><name pos:line="27" pos:column="13">UI</name><op:operator pos:line="27" pos:column="15">.</op:operator><name pos:line="27" pos:column="16">Monitoring</name></name>;</using>
<using pos:line="28" pos:column="1">using <name><name pos:line="28" pos:column="7">Sando</name><op:operator pos:line="28" pos:column="12">.</op:operator><name pos:line="28" pos:column="13">UI</name><op:operator pos:line="28" pos:column="15">.</op:operator><name pos:line="28" pos:column="16">View</name></name>;</using>
<using pos:line="29" pos:column="1">using <name><name pos:line="29" pos:column="7">Sando</name><op:operator pos:line="29" pos:column="12">.</op:operator><name pos:line="29" pos:column="13">Indexer</name><op:operator pos:line="29" pos:column="20">.</op:operator><name pos:line="29" pos:column="21">IndexState</name></name>;</using>
<using pos:line="30" pos:column="1">using <name><name pos:line="30" pos:column="7">Sando</name><op:operator pos:line="30" pos:column="12">.</op:operator><name pos:line="30" pos:column="13">Recommender</name></name>;</using>
<using pos:line="31" pos:column="1">using <name><name pos:line="31" pos:column="7">System</name><op:operator pos:line="31" pos:column="13">.</op:operator><name pos:line="31" pos:column="14">Reflection</name></name>;</using>
<using pos:line="32" pos:column="1">using <name><name pos:line="32" pos:column="7">System</name><op:operator pos:line="32" pos:column="13">.</op:operator><name pos:line="32" pos:column="14">Threading</name><op:operator pos:line="32" pos:column="23">.</op:operator><name pos:line="32" pos:column="24">Tasks</name></name>;</using>
<using pos:line="33" pos:column="1">using <name><name pos:line="33" pos:column="7">Sando</name><op:operator pos:line="33" pos:column="12">.</op:operator><name pos:line="33" pos:column="13">Indexer</name><op:operator pos:line="33" pos:column="20">.</op:operator><name pos:line="33" pos:column="21">Documents</name></name>;</using>
<using pos:line="34" pos:column="1">using <name><name pos:line="34" pos:column="7">Lucene</name><op:operator pos:line="34" pos:column="13">.</op:operator><name pos:line="34" pos:column="14">Net</name><op:operator pos:line="34" pos:column="17">.</op:operator><name pos:line="34" pos:column="18">Analysis</name><op:operator pos:line="34" pos:column="26">.</op:operator><name pos:line="34" pos:column="27">Standard</name></name>;</using>
<using pos:line="35" pos:column="1">using <name><name pos:line="35" pos:column="7">Sando</name><op:operator pos:line="35" pos:column="12">.</op:operator><name pos:line="35" pos:column="13">Core</name><op:operator pos:line="35" pos:column="17">.</op:operator><name pos:line="35" pos:column="18">Logging</name></name>;</using>
<using pos:line="36" pos:column="1">using <name><name pos:line="36" pos:column="7">Sando</name><op:operator pos:line="36" pos:column="12">.</op:operator><name pos:line="36" pos:column="13">Core</name><op:operator pos:line="36" pos:column="17">.</op:operator><name pos:line="36" pos:column="18">Logging</name><op:operator pos:line="36" pos:column="25">.</op:operator><name pos:line="36" pos:column="26">Events</name></name>;</using>
<using pos:line="37" pos:column="1">using <name><name pos:line="37" pos:column="7">Sando</name><op:operator pos:line="37" pos:column="12">.</op:operator><name pos:line="37" pos:column="13">Core</name><op:operator pos:line="37" pos:column="17">.</op:operator><name pos:line="37" pos:column="18">Logging</name><op:operator pos:line="37" pos:column="25">.</op:operator><name pos:line="37" pos:column="26">Persistence</name></name>;</using>
<using pos:line="38" pos:column="1">using <name><name pos:line="38" pos:column="7">Sando</name><op:operator pos:line="38" pos:column="12">.</op:operator><name pos:line="38" pos:column="13">UI</name><op:operator pos:line="38" pos:column="15">.</op:operator><name pos:line="38" pos:column="16">Service</name></name>;</using>
<using pos:line="39" pos:column="1">using <name><name pos:line="39" pos:column="7">System</name><op:operator pos:line="39" pos:column="13">.</op:operator><name pos:line="39" pos:column="14">Diagnostics</name></name>;</using>
<using pos:line="40" pos:column="1">using <name><name pos:line="40" pos:column="7">Sando</name><op:operator pos:line="40" pos:column="12">.</op:operator><name pos:line="40" pos:column="13">ExtensionContracts</name><op:operator pos:line="40" pos:column="31">.</op:operator><name pos:line="40" pos:column="32">ServiceContracts</name></name>;</using>
<using pos:line="41" pos:column="1">using <name><name pos:line="41" pos:column="7">Microsoft</name><op:operator pos:line="41" pos:column="16">.</op:operator><name pos:line="41" pos:column="17">VisualStudio</name></name>;</using>
<using pos:line="42" pos:column="1">using <name><name pos:line="42" pos:column="7">System</name><op:operator pos:line="42" pos:column="13">.</op:operator><name pos:line="42" pos:column="14">Linq</name></name>;</using>
<using pos:line="43" pos:column="1">using <name><name pos:line="43" pos:column="7">System</name><op:operator pos:line="43" pos:column="13">.</op:operator><name pos:line="43" pos:column="14">Windows</name><op:operator pos:line="43" pos:column="21">.</op:operator><name pos:line="43" pos:column="22">Threading</name></name>;</using>
<using pos:line="44" pos:column="1">using <name><name pos:line="44" pos:column="7">System</name><op:operator pos:line="44" pos:column="13">.</op:operator><name pos:line="44" pos:column="14">Collections</name><op:operator pos:line="44" pos:column="25">.</op:operator><name pos:line="44" pos:column="26">ObjectModel</name></name>;</using>



<namespace pos:line="48" pos:column="1">namespace <name><name pos:line="48" pos:column="11">Sando</name><op:operator pos:line="48" pos:column="16">.</op:operator><name pos:line="48" pos:column="17">UI</name></name>
<block pos:line="49" pos:column="1">{
    <comment type="line" pos:line="50" pos:column="5">/// &lt;summary&gt; </comment>
    <comment type="line" pos:line="51" pos:column="5">/// This is the class that implements the package exposed by this assembly.</comment>
    <comment type="line" pos:line="52" pos:column="5">///</comment>
    <comment type="line" pos:line="53" pos:column="5">/// The minimum requirement for a class to be considered a valid package for Visual Studio</comment>
    <comment type="line" pos:line="54" pos:column="5">/// is to implement the IVsPackage interface and register itself with the shell.</comment>
    <comment type="line" pos:line="55" pos:column="5">/// This package uses the helper classes defined inside the Managed Package Framework (MPF)</comment>
    <comment type="line" pos:line="56" pos:column="5">/// to do it: it derives from the Package class that provides the implementation of the </comment>
    <comment type="line" pos:line="57" pos:column="5">/// IVsPackage interface and uses the registration attributes defined in the framework to </comment>
    <comment type="line" pos:line="58" pos:column="5">/// register itself and its components with the shell.</comment>
    <comment type="line" pos:line="59" pos:column="5">/// &lt;/summary&gt;</comment>
    <comment type="line" pos:line="60" pos:column="5">// This attribute tells the PkgDef creation utility (CreatePkgDef.exe) that this class is</comment>
    <comment type="line" pos:line="61" pos:column="5">// a package.</comment>
    <class><attribute pos:line="62" pos:column="5">[<expr><call><name pos:line="62" pos:column="6">PackageRegistration</name><argument_list pos:line="62" pos:column="25">(<argument><expr><name pos:line="62" pos:column="26">UseManagedResourcesOnly</name> <op:operator pos:line="62" pos:column="50">=</op:operator> <lit:literal type="boolean" pos:line="62" pos:column="52">true</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    <comment type="line" pos:line="63" pos:column="5">// This attribute is used to register the informations needed to show the this package</comment>
    <comment type="line" pos:line="64" pos:column="5">// in the Help/About dialog of Visual Studio.</comment>
    <attribute pos:line="65" pos:column="5">[<expr><call><name pos:line="65" pos:column="6">InstalledProductRegistration</name><argument_list pos:line="65" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="65" pos:column="35">"#110"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="65" pos:column="43">"#112"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="65" pos:column="51">"1.0"</lit:literal></expr></argument>, <argument><expr><name pos:line="65" pos:column="58">IconResourceID</name> <op:operator pos:line="65" pos:column="73">=</op:operator> <lit:literal type="number" pos:line="65" pos:column="75">400</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    <comment type="line" pos:line="66" pos:column="5">// This attribute is needed to let the shell know that this package exposes some menus.</comment>
    <attribute pos:line="67" pos:column="5">[<expr><call><name pos:line="67" pos:column="6">ProvideMenuResource</name><argument_list pos:line="67" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="67" pos:column="26">"Menus.ctmenu"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="67" pos:column="42">1</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    <comment type="line" pos:line="68" pos:column="5">// This attribute registers a tool window exposed by this package.</comment>
    <attribute pos:line="69" pos:column="5">[<expr><call><name pos:line="69" pos:column="6">ProvideToolWindow</name><argument_list pos:line="69" pos:column="23">(<argument><expr><call><name pos:line="69" pos:column="24">typeof</name><argument_list pos:line="69" pos:column="30">(<argument><expr><name pos:line="69" pos:column="31">SearchToolWindow</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="69" pos:column="50">Transient</name> <op:operator pos:line="69" pos:column="60">=</op:operator> <lit:literal type="boolean" pos:line="69" pos:column="62">false</lit:literal></expr></argument>, <argument><expr><name pos:line="69" pos:column="69">MultiInstances</name> <op:operator pos:line="69" pos:column="84">=</op:operator> <lit:literal type="boolean" pos:line="69" pos:column="86">false</lit:literal></expr></argument>, <argument><expr><name pos:line="69" pos:column="93">Style</name> <op:operator pos:line="69" pos:column="99">=</op:operator> <name><name pos:line="69" pos:column="101">VsDockStyle</name><op:operator pos:line="69" pos:column="112">.</op:operator><name pos:line="69" pos:column="113">Tabbed</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
    
    <attribute pos:line="71" pos:column="5">[<expr><call><name pos:line="71" pos:column="6">Guid</name><argument_list pos:line="71" pos:column="10">(<argument><expr><name><name pos:line="71" pos:column="11">GuidList</name><op:operator pos:line="71" pos:column="19">.</op:operator><name pos:line="71" pos:column="20">guidUIPkgString</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
	<comment type="line" pos:line="72" pos:column="9">// This attribute starts up our extension early so that it can listen to solution events    </comment>
	<attribute pos:line="73" pos:column="9">[<expr><call><name pos:line="73" pos:column="10">ProvideAutoLoad</name><argument_list pos:line="73" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="73" pos:column="26">"ADFC4E64-0397-11D1-9F4E-00A0C911004F"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    <comment type="line" pos:line="74" pos:column="5">// Start when solution exists</comment>
    <comment type="line" pos:line="75" pos:column="5">//[ProvideAutoLoad("f1536ef8-92ec-443c-9ed7-fdadf150da82")]    </comment>
	<attribute pos:line="76" pos:column="9">[<expr><call><name pos:line="76" pos:column="10">ProvideOptionPage</name><argument_list pos:line="76" pos:column="27">(<argument><expr><call><name pos:line="76" pos:column="28">typeof</name><argument_list pos:line="76" pos:column="34">(<argument><expr><name pos:line="76" pos:column="35">SandoDialogPage</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="76" pos:column="53">"Sando"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="76" pos:column="62">"General"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="76" pos:column="73">1000</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="76" pos:column="79">1001</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="76" pos:column="85">true</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
	<attribute pos:line="77" pos:column="9">[<expr><call><name pos:line="77" pos:column="10">ProvideProfile</name><argument_list pos:line="77" pos:column="24">(<argument><expr><call><name pos:line="77" pos:column="25">typeof</name><argument_list pos:line="77" pos:column="31">(<argument><expr><name pos:line="77" pos:column="32">SandoDialogPage</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="77" pos:column="50">"Sando"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="77" pos:column="59">"General"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="77" pos:column="70">1002</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="77" pos:column="76">1003</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="77" pos:column="82">true</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>

    <comment type="line" pos:line="79" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="80" pos:column="5">/// Add the ProvideServiceAttribute to the VSPackage that provides the global service.</comment>
    <comment type="line" pos:line="81" pos:column="5">/// ProvideServiceAttribute registers SSandoGlobalService with Visual Studio. </comment>
    <comment type="line" pos:line="82" pos:column="5">/// Only the global service must be registered.</comment>
    <comment type="line" pos:line="83" pos:column="5">/// &lt;/summary&gt;</comment>
    <attribute pos:line="84" pos:column="5">[<expr><call><name pos:line="84" pos:column="6">ProvideService</name><argument_list pos:line="84" pos:column="20">(<argument><expr><call><name pos:line="84" pos:column="21">typeof</name><argument_list pos:line="84" pos:column="27">(<argument><expr><name pos:line="84" pos:column="28">SSandoGlobalService</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>]</attribute>

    <specifier pos:line="86" pos:column="5">public</specifier> <specifier pos:line="86" pos:column="12">sealed</specifier> class <name pos:line="86" pos:column="25">UIPackage</name> <super pos:line="86" pos:column="35">: <name pos:line="86" pos:column="37">Package</name>, <name pos:line="86" pos:column="46">IToolWindowFinder</name></super>
    <block pos:line="87" pos:column="5">{
        <comment type="line" pos:line="88" pos:column="9">// JZ: SrcMLService Integration</comment>
        <comment type="line" pos:line="89" pos:column="9">//private ABB.SrcML.VisualStudio.SolutionMonitor.SolutionMonitor _currentMonitor;</comment>
        <decl_stmt><decl><type><specifier pos:line="90" pos:column="9">private</specifier> <name pos:line="90" pos:column="17">ISrcMLArchive</name></type> <name pos:line="90" pos:column="31">_srcMLArchive</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="91" pos:column="9">private</specifier> <name pos:line="91" pos:column="17">ISrcMLGlobalService</name></type> <name pos:line="91" pos:column="37">srcMLService</name></decl>;</decl_stmt>
        <comment type="line" pos:line="92" pos:column="9">// End of code changes</comment>

    	<decl_stmt><decl><type><specifier pos:line="94" pos:column="9">private</specifier> <name pos:line="94" pos:column="17">SolutionEvents</name></type> <name pos:line="94" pos:column="32">_solutionEvents</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="95" pos:column="17">private</specifier> <name pos:line="95" pos:column="25">ExtensionPointsConfiguration</name></type> <name pos:line="95" pos:column="54">_extensionPointsConfiguration</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="96" pos:column="9">private</specifier> <name pos:line="96" pos:column="17">DTEEvents</name></type> <name pos:line="96" pos:column="27">_dteEvents</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="97" pos:column="9">private</specifier> <name pos:line="97" pos:column="17">ViewManager</name></type> <name pos:line="97" pos:column="29">_viewManager</name></decl>;</decl_stmt>		
        <decl_stmt><decl><type><specifier pos:line="98" pos:column="9">private</specifier> <name pos:line="98" pos:column="17">WindowEvents</name></type> <name pos:line="98" pos:column="30">_windowEvents</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="99" pos:column="9">private</specifier> <name pos:line="99" pos:column="17">bool</name></type> <name pos:line="99" pos:column="22">SetupHandlers</name> <init pos:line="99" pos:column="36">= <expr><lit:literal type="boolean" pos:line="99" pos:column="38">false</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="100" pos:column="9">private</specifier> <name pos:line="100" pos:column="17">bool</name></type> <name pos:line="100" pos:column="22">WindowActivated</name> <init pos:line="100" pos:column="38">= <expr><lit:literal type="boolean" pos:line="100" pos:column="40">false</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="102" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="103" pos:column="9">/// Default constructor of the package.</comment>
        <comment type="line" pos:line="104" pos:column="9">/// Inside this method you can place any initialization code that does not require </comment>
        <comment type="line" pos:line="105" pos:column="9">/// any Visual Studio service because at this point the package object is created but </comment>
        <comment type="line" pos:line="106" pos:column="9">/// not sited yet inside Visual Studio environment. The place to do all the other </comment>
        <comment type="line" pos:line="107" pos:column="9">/// initialization is the Initialize method.</comment>
        <comment type="line" pos:line="108" pos:column="9">/// &lt;/summary&gt;</comment>
        <constructor><specifier pos:line="109" pos:column="9">public</specifier> <name pos:line="109" pos:column="16">UIPackage</name><parameter_list pos:line="109" pos:column="25">()</parameter_list>
        <block pos:line="110" pos:column="9">{            
            <expr_stmt><expr><call><name><name pos:line="111" pos:column="13">PathManager</name><op:operator pos:line="111" pos:column="24">.</op:operator><name pos:line="111" pos:column="25">Create</name></name><argument_list pos:line="111" pos:column="31">(<argument><expr><call><name><name pos:line="111" pos:column="32">Assembly</name><op:operator pos:line="111" pos:column="40">.</op:operator><name pos:line="111" pos:column="41">GetAssembly</name></name><argument_list pos:line="111" pos:column="52">(<argument><expr><call><name pos:line="111" pos:column="53">typeof</name><argument_list pos:line="111" pos:column="59">(<argument><expr><name pos:line="111" pos:column="60">UIPackage</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="111" pos:column="71">.</op:operator><name pos:line="111" pos:column="72">Location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="112" pos:column="13">SandoLogManager</name><op:operator pos:line="112" pos:column="28">.</op:operator><name pos:line="112" pos:column="29">StartDefaultLogging</name></name><argument_list pos:line="112" pos:column="48">(<argument><expr><call><name><name pos:line="112" pos:column="49">PathManager</name><op:operator pos:line="112" pos:column="60">.</op:operator><name pos:line="112" pos:column="61">Instance</name><op:operator pos:line="112" pos:column="69">.</op:operator><name pos:line="112" pos:column="70">GetExtensionRoot</name></name><argument_list pos:line="112" pos:column="86">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="114" pos:column="13">// Add callback methods to the service container to create the services.</comment>
            <comment type="line" pos:line="115" pos:column="13">// Here we update the list of the provided services with the ones specific for this package.</comment>
            <comment type="line" pos:line="116" pos:column="13">// Notice that we set to true the boolean flag about the service promotion for the global:</comment>
            <comment type="line" pos:line="117" pos:column="13">// to promote the service is actually to proffer it globally using the SProfferService service.</comment>
            <comment type="line" pos:line="118" pos:column="13">// For performance reasons we don’t want to instantiate the services now, but only when and </comment>
            <comment type="line" pos:line="119" pos:column="13">// if some client asks for them, so we here define only the type of the service and a function</comment>
            <comment type="line" pos:line="120" pos:column="13">// that will be called the first time the package will receive a request for the service. </comment>
            <comment type="line" pos:line="121" pos:column="13">// This callback function is the one responsible for creating the instance of the service </comment>
            <comment type="line" pos:line="122" pos:column="13">// object.</comment>
            <decl_stmt><decl><type><name pos:line="123" pos:column="13">IServiceContainer</name></type> <name pos:line="123" pos:column="31">serviceContainer</name> <init pos:line="123" pos:column="48">= <expr><name pos:line="123" pos:column="50">this</name> <op:operator pos:line="123" pos:column="55">as</op:operator> <name pos:line="123" pos:column="58">IServiceContainer</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="124" pos:column="13">ServiceCreatorCallback</name></type> <name pos:line="124" pos:column="36">callback</name> <init pos:line="124" pos:column="45">= <expr><op:operator pos:line="124" pos:column="47">new</op:operator> <call><name pos:line="124" pos:column="51">ServiceCreatorCallback</name><argument_list pos:line="124" pos:column="73">(<argument><expr><name pos:line="124" pos:column="74">CreateService</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="125" pos:column="13">serviceContainer</name><op:operator pos:line="125" pos:column="29">.</op:operator><name pos:line="125" pos:column="30">AddService</name></name><argument_list pos:line="125" pos:column="40">(<argument><expr><call><name pos:line="125" pos:column="41">typeof</name><argument_list pos:line="125" pos:column="47">(<argument><expr><name pos:line="125" pos:column="48">SSandoGlobalService</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="125" pos:column="70">callback</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="125" pos:column="80">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="126" pos:column="13">serviceContainer</name><op:operator pos:line="126" pos:column="29">.</op:operator><name pos:line="126" pos:column="30">AddService</name></name><argument_list pos:line="126" pos:column="40">(<argument><expr><call><name pos:line="126" pos:column="41">typeof</name><argument_list pos:line="126" pos:column="47">(<argument><expr><name pos:line="126" pos:column="48">SSandoLocalService</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="126" pos:column="69">callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier pos:line="129" pos:column="9">public</specifier> <name pos:line="129" pos:column="16">SandoDialogPage</name></type> <name pos:line="129" pos:column="32">GetSandoDialogPage</name><parameter_list pos:line="129" pos:column="50">()</parameter_list>
        <block pos:line="130" pos:column="9">{
            <return pos:line="131" pos:column="13">return <expr><op:operator pos:line="131" pos:column="20">(</op:operator><call><name pos:line="131" pos:column="21">GetDialogPage</name><argument_list pos:line="131" pos:column="34">(<argument><expr><call><name pos:line="131" pos:column="35">typeof</name><argument_list pos:line="131" pos:column="41">(<argument><expr><name pos:line="131" pos:column="42">SandoDialogPage</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="131" pos:column="60">as</op:operator> <name pos:line="131" pos:column="63">SandoDialogPage</name><op:operator pos:line="131" pos:column="78">)</op:operator></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="134" pos:column="9">public</specifier> <name pos:line="134" pos:column="16">void</name></type> <name pos:line="134" pos:column="21">OpenSandoOptions</name><parameter_list pos:line="134" pos:column="37">()</parameter_list>
        <block pos:line="135" pos:column="9">{
            <try pos:line="136" pos:column="13">try
            <block pos:line="137" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="138" pos:column="17">string</name></type> <name pos:line="138" pos:column="24">sandoDialogPageGuid</name> <init pos:line="138" pos:column="44">= <expr><lit:literal type="string" pos:line="138" pos:column="46">"B0002DC2-56EE-4931-93F7-70D6E9863940"</lit:literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="139" pos:column="17">var</name></type> <name pos:line="139" pos:column="21">command</name> <init pos:line="139" pos:column="29">= <expr><op:operator pos:line="139" pos:column="31">new</op:operator> <call><name pos:line="139" pos:column="35">CommandID</name><argument_list pos:line="139" pos:column="44">(
                    <argument><expr><name><name pos:line="140" pos:column="21">VSConstants</name><op:operator pos:line="140" pos:column="32">.</op:operator><name pos:line="140" pos:column="33">GUID_VSStandardCommandSet97</name></name></expr></argument>,
                    <argument><expr><name><name pos:line="141" pos:column="21">VSConstants</name><op:operator pos:line="141" pos:column="32">.</op:operator><name pos:line="141" pos:column="33">cmdidToolsOptions</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="142" pos:column="17">var</name></type> <name pos:line="142" pos:column="21">mcs</name> <init pos:line="142" pos:column="25">= <expr><call><name pos:line="142" pos:column="27">GetService</name><argument_list pos:line="142" pos:column="37">(<argument><expr><call><name pos:line="142" pos:column="38">typeof</name><argument_list pos:line="142" pos:column="44">(<argument><expr><name pos:line="142" pos:column="45">IMenuCommandService</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                    <op:operator pos:line="143" pos:column="21">as</op:operator> <name pos:line="143" pos:column="24">MenuCommandService</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="144" pos:column="17">mcs</name><op:operator pos:line="144" pos:column="20">.</op:operator><name pos:line="144" pos:column="21">GlobalInvoke</name></name><argument_list pos:line="144" pos:column="33">(<argument><expr><name pos:line="144" pos:column="34">command</name></expr></argument>, <argument><expr><name pos:line="144" pos:column="43">sandoDialogPageGuid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch pos:line="146" pos:column="13">catch <parameter_list pos:line="146" pos:column="19">(<param><decl><type><name pos:line="146" pos:column="20">Exception</name></type> <name pos:line="146" pos:column="30">e</name></decl></param>)</parameter_list>
            <block pos:line="147" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="148" pos:column="17">LogEvents</name><op:operator pos:line="148" pos:column="26">.</op:operator><name pos:line="148" pos:column="27">UIGenericError</name></name><argument_list pos:line="148" pos:column="41">(<argument><expr><name pos:line="148" pos:column="42">this</name></expr></argument>, <argument><expr><name pos:line="148" pos:column="48">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></function>

        <comment type="line" pos:line="152" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="153" pos:column="9">/// Implement the callback method.</comment>
        <comment type="line" pos:line="154" pos:column="9">/// This is the function that will create a new instance of the services the first time a client</comment>
        <comment type="line" pos:line="155" pos:column="9">/// will ask for a specific service type. </comment>
        <comment type="line" pos:line="156" pos:column="9">/// It is called by the base class's implementation of IServiceProvider.</comment>
        <comment type="line" pos:line="157" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="158" pos:column="9">/// &lt;param name="container"&gt;The IServiceContainer that needs a new instance of the service.</comment>
        <comment type="line" pos:line="159" pos:column="9">///                         This must be this package.&lt;/param&gt;</comment>
        <comment type="line" pos:line="160" pos:column="9">/// &lt;param name="serviceType"&gt;The type of service to create.&lt;/param&gt;</comment>
        <comment type="line" pos:line="161" pos:column="9">/// &lt;returns&gt;The instance of the service.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="162" pos:column="9">private</specifier> <name pos:line="162" pos:column="17">object</name></type> <name pos:line="162" pos:column="24">CreateService</name><parameter_list pos:line="162" pos:column="37">(<param><decl><type><name pos:line="162" pos:column="38">IServiceContainer</name></type> <name pos:line="162" pos:column="56">container</name></decl></param>, <param><decl><type><name pos:line="162" pos:column="67">Type</name></type> <name pos:line="162" pos:column="72">serviceType</name></decl></param>)</parameter_list>
        <block pos:line="163" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="164" pos:column="13">Trace</name><op:operator pos:line="164" pos:column="18">.</op:operator><name pos:line="164" pos:column="19">WriteLine</name></name><argument_list pos:line="164" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="164" pos:column="29">"    SandoServicePackage.CreateService()"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:line="165" pos:column="13">//todo: write it to log file</comment>

            <comment type="line" pos:line="167" pos:column="13">// Check if the IServiceContainer is this package.</comment>
            <if pos:line="168" pos:column="13">if <condition pos:line="168" pos:column="16">(<expr><name pos:line="168" pos:column="17">container</name> <op:operator pos:line="168" pos:column="27">!=</op:operator> <name pos:line="168" pos:column="30">this</name></expr>)</condition><then pos:line="168" pos:column="35">
            <block pos:line="169" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="170" pos:column="17">Trace</name><op:operator pos:line="170" pos:column="22">.</op:operator><name pos:line="170" pos:column="23">WriteLine</name></name><argument_list pos:line="170" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="170" pos:column="33">"ServicesPackage.CreateService called from an unexpected service container."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="171" pos:column="17">return <expr><name pos:line="171" pos:column="24">null</name></expr>;</return>
            }</block></then></if>

            <comment type="line" pos:line="174" pos:column="13">// Find the type of the requested service and create it.</comment>
            <if pos:line="175" pos:column="13">if <condition pos:line="175" pos:column="16">(<expr><call><name pos:line="175" pos:column="17">typeof</name><argument_list pos:line="175" pos:column="23">(<argument><expr><name pos:line="175" pos:column="24">SSandoGlobalService</name></expr></argument>)</argument_list></call> <op:operator pos:line="175" pos:column="45">==</op:operator> <name pos:line="175" pos:column="48">serviceType</name></expr>)</condition><then pos:line="175" pos:column="60">
            <block pos:line="176" pos:column="13">{
                <comment type="line" pos:line="177" pos:column="17">// Build the global service using this package as its service provider.</comment>
                <return pos:line="178" pos:column="17">return <expr><op:operator pos:line="178" pos:column="24">new</op:operator> <call><name pos:line="178" pos:column="28">SandoGlobalService</name><argument_list pos:line="178" pos:column="46">(<argument><expr><name pos:line="178" pos:column="47">this</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
            <if pos:line="180" pos:column="13">if <condition pos:line="180" pos:column="16">(<expr><call><name pos:line="180" pos:column="17">typeof</name><argument_list pos:line="180" pos:column="23">(<argument><expr><name pos:line="180" pos:column="24">SSandoLocalService</name></expr></argument>)</argument_list></call> <op:operator pos:line="180" pos:column="44">==</op:operator> <name pos:line="180" pos:column="47">serviceType</name></expr>)</condition><then pos:line="180" pos:column="59">
            <block pos:line="181" pos:column="13">{
                <comment type="line" pos:line="182" pos:column="17">// Build the local service using this package as its service provider.</comment>
                <return pos:line="183" pos:column="17">return <expr><op:operator pos:line="183" pos:column="24">new</op:operator> <call><name pos:line="183" pos:column="28">SandoLocalService</name><argument_list pos:line="183" pos:column="45">(<argument><expr><name pos:line="183" pos:column="46">this</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>

            <comment type="line" pos:line="186" pos:column="13">// If we are here the service type is unknown, so write a message on the debug output</comment>
            <comment type="line" pos:line="187" pos:column="13">// and return null.</comment>
            <comment type="line" pos:line="188" pos:column="13">//Trace.WriteLine("ServicesPackage.CreateService called for an unknown service type.");</comment>
            <return pos:line="189" pos:column="13">return <expr><name pos:line="189" pos:column="20">null</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="192" pos:column="9">/////////////////////////////////////////////////////////////////////////////</comment>
        <comment type="line" pos:line="193" pos:column="9">// Overriden Package Implementation</comment>
        <cpp:region pos:line="194" pos:column="9">#<cpp:directive pos:line="194" pos:column="10">region</cpp:directive> Package Members</cpp:region>

        <comment type="line" pos:line="196" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="197" pos:column="9">/// Initialization of the package; this method is called right after the package is sited, so this is the place</comment>
        <comment type="line" pos:line="198" pos:column="9">/// where you can put all the initilaization code that rely on services provided by VisualStudio.</comment>
        <comment type="line" pos:line="199" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="200" pos:column="9">protected</specifier> <specifier pos:line="200" pos:column="19">override</specifier> <name pos:line="200" pos:column="28">void</name></type> <name pos:line="200" pos:column="33">Initialize</name><parameter_list pos:line="200" pos:column="43">()</parameter_list>
        <block pos:line="201" pos:column="9">{
            <try pos:line="202" pos:column="13">try
            <block pos:line="203" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="204" pos:column="17">base</name><op:operator pos:line="204" pos:column="21">.</op:operator><name pos:line="204" pos:column="22">Initialize</name></name><argument_list pos:line="204" pos:column="32">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="205" pos:column="17">LogEvents</name><op:operator pos:line="205" pos:column="26">.</op:operator><name pos:line="205" pos:column="27">UISandoBeginInitialization</name></name><argument_list pos:line="205" pos:column="53">(<argument><expr><name pos:line="205" pos:column="54">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                

                <expr_stmt><expr><call><name pos:line="207" pos:column="17">SetupDependencyInjectionObjects</name><argument_list pos:line="207" pos:column="48">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name pos:line="209" pos:column="17">_viewManager</name> <op:operator pos:line="209" pos:column="30">=</op:operator> <call><name><name pos:line="209" pos:column="32">ServiceLocator</name><op:operator pos:line="209" pos:column="46">.</op:operator><name><name pos:line="209" pos:column="47">Resolve</name><argument_list pos:line="209" pos:column="54">&lt;<argument><name pos:line="209" pos:column="55">ViewManager</name></argument>&gt;</argument_list></name></name><argument_list pos:line="209" pos:column="67">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="210" pos:column="17">AddCommand</name><argument_list pos:line="210" pos:column="27">()</argument_list></call></expr>;</expr_stmt>                
                <expr_stmt><expr><call><name pos:line="211" pos:column="17">SetUpLifeCycleEvents</name><argument_list pos:line="211" pos:column="37">()</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch pos:line="213" pos:column="13">catch<parameter_list pos:line="213" pos:column="18">(<param><decl><type><name pos:line="213" pos:column="19">Exception</name></type> <name pos:line="213" pos:column="29">e</name></decl></param>)</parameter_list>
            <block pos:line="214" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="215" pos:column="17">LogEvents</name><op:operator pos:line="215" pos:column="26">.</op:operator><name pos:line="215" pos:column="27">UISandoInitializationError</name></name><argument_list pos:line="215" pos:column="53">(<argument><expr><name pos:line="215" pos:column="54">this</name></expr></argument>, <argument><expr><name pos:line="215" pos:column="60">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>            
        }</block></function>


        <function><type><specifier pos:line="220" pos:column="9">private</specifier> <name pos:line="220" pos:column="17">void</name></type> <name pos:line="220" pos:column="22">SetUpLifeCycleEvents</name><parameter_list pos:line="220" pos:column="42">()</parameter_list>
        <block pos:line="221" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="222" pos:column="13">var</name></type> <name pos:line="222" pos:column="17">dte</name> <init pos:line="222" pos:column="21">= <expr><call><name><name pos:line="222" pos:column="23">ServiceLocator</name><op:operator pos:line="222" pos:column="37">.</op:operator><name><name pos:line="222" pos:column="38">Resolve</name><argument_list pos:line="222" pos:column="45">&lt;<argument><name pos:line="222" pos:column="46">DTE2</name></argument>&gt;</argument_list></name></name><argument_list pos:line="222" pos:column="51">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="223" pos:column="13">_dteEvents</name> <op:operator pos:line="223" pos:column="24">=</op:operator> <name><name pos:line="223" pos:column="26">dte</name><op:operator pos:line="223" pos:column="29">.</op:operator><name pos:line="223" pos:column="30">Events</name><op:operator pos:line="223" pos:column="36">.</op:operator><name pos:line="223" pos:column="37">DTEEvents</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="224" pos:column="13">_dteEvents</name><op:operator pos:line="224" pos:column="23">.</op:operator><name pos:line="224" pos:column="24">OnBeginShutdown</name></name> <op:operator pos:line="224" pos:column="40">+=</op:operator> <name pos:line="224" pos:column="43">DteEventsOnOnBeginShutdown</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="225" pos:column="13">_dteEvents</name><op:operator pos:line="225" pos:column="23">.</op:operator><name pos:line="225" pos:column="24">OnStartupComplete</name></name> <op:operator pos:line="225" pos:column="42">+=</op:operator> <name pos:line="225" pos:column="45">StartupCompleted</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="226" pos:column="13">_windowEvents</name> <op:operator pos:line="226" pos:column="27">=</op:operator> <name><name pos:line="226" pos:column="29">dte</name><op:operator pos:line="226" pos:column="32">.</op:operator><name pos:line="226" pos:column="33">Events</name><op:operator pos:line="226" pos:column="39">.</op:operator><name pos:line="226" pos:column="40">WindowEvents</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="227" pos:column="13">_windowEvents</name><op:operator pos:line="227" pos:column="26">.</op:operator><name pos:line="227" pos:column="27">WindowActivated</name></name> <op:operator pos:line="227" pos:column="43">+=</op:operator> <name pos:line="227" pos:column="46">SandoWindowActivated</name></expr>;</expr_stmt>
            
        }</block></function>

        <function><type><specifier pos:line="231" pos:column="9">private</specifier> <name pos:line="231" pos:column="17">void</name></type> <name pos:line="231" pos:column="22">SandoWindowActivated</name><parameter_list pos:line="231" pos:column="42">(<param><decl><type><name pos:line="231" pos:column="43">Window</name></type> <name pos:line="231" pos:column="50">gotFocus</name></decl></param>, <param><decl><type><name pos:line="231" pos:column="60">Window</name></type> <name pos:line="231" pos:column="67">lostFocus</name></decl></param>)</parameter_list>
        <block pos:line="232" pos:column="9">{
            <try pos:line="233" pos:column="13">try
            <block pos:line="234" pos:column="13">{
                <if pos:line="235" pos:column="17">if <condition pos:line="235" pos:column="20">(<expr><call><name><name pos:line="235" pos:column="21">gotFocus</name><op:operator pos:line="235" pos:column="29">.</op:operator><name pos:line="235" pos:column="30">ObjectKind</name><op:operator pos:line="235" pos:column="40">.</op:operator><name pos:line="235" pos:column="41">Equals</name></name><argument_list pos:line="235" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="235" pos:column="48">"{AC71D0B7-7613-4EDD-95CC-9BE31C0A993A}"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="235" pos:column="90">
                <block pos:line="236" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="237" pos:column="21">var</name></type> <name pos:line="237" pos:column="25">window</name> <init pos:line="237" pos:column="32">= <expr><call><name pos:line="237" pos:column="34">FindToolWindow</name><argument_list pos:line="237" pos:column="48">(<argument><expr><call><name pos:line="237" pos:column="49">typeof</name><argument_list pos:line="237" pos:column="55">(<argument><expr><name pos:line="237" pos:column="56">SearchToolWindow</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="237" pos:column="75">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="237" pos:column="78">true</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if pos:line="238" pos:column="21">if <condition pos:line="238" pos:column="24">(<expr><op:operator pos:line="238" pos:column="25">(</op:operator><name pos:line="238" pos:column="26">null</name> <op:operator pos:line="238" pos:column="31">==</op:operator> <name pos:line="238" pos:column="34">window</name><op:operator pos:line="238" pos:column="40">)</op:operator> <op:operator pos:line="238" pos:column="42">||</op:operator> <op:operator pos:line="238" pos:column="45">(</op:operator><name pos:line="238" pos:column="46">null</name> <op:operator pos:line="238" pos:column="51">==</op:operator> <name><name pos:line="238" pos:column="54">window</name><op:operator pos:line="238" pos:column="60">.</op:operator><name pos:line="238" pos:column="61">Frame</name></name><op:operator pos:line="238" pos:column="66">)</op:operator></expr>)</condition><then pos:line="238" pos:column="68">
                    <block pos:line="239" pos:column="21">{
                        <throw pos:line="240" pos:column="25">throw <expr><op:operator pos:line="240" pos:column="31">new</op:operator> <call><name pos:line="240" pos:column="35">NotSupportedException</name><argument_list pos:line="240" pos:column="56">(<argument><expr><name><name pos:line="240" pos:column="57">Resources</name><op:operator pos:line="240" pos:column="66">.</op:operator><name pos:line="240" pos:column="67">CanNotCreateWindow</name></name></expr></argument>)</argument_list></call></expr>;</throw>
                    }</block></then></if>
                    <decl_stmt><decl><type><name pos:line="242" pos:column="21">var</name></type> <name pos:line="242" pos:column="25">stw</name> <init pos:line="242" pos:column="29">= <expr><name pos:line="242" pos:column="31">window</name> <op:operator pos:line="242" pos:column="38">as</op:operator> <name pos:line="242" pos:column="41">SearchToolWindow</name></expr></init></decl>;</decl_stmt>
                    <if pos:line="243" pos:column="21">if <condition pos:line="243" pos:column="24">(<expr><name pos:line="243" pos:column="25">stw</name> <op:operator pos:line="243" pos:column="29">!=</op:operator> <name pos:line="243" pos:column="32">null</name></expr>)</condition><then pos:line="243" pos:column="37">
                    <block pos:line="244" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="245" pos:column="25">stw</name><op:operator pos:line="245" pos:column="28">.</op:operator><name pos:line="245" pos:column="29">GetSearchViewControl</name></name><argument_list pos:line="245" pos:column="49">()</argument_list></call><op:operator pos:line="245" pos:column="51">.</op:operator><call><name pos:line="245" pos:column="52">FocusOnText</name><argument_list pos:line="245" pos:column="63">()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="246" pos:column="25">WindowActivated</name> <op:operator pos:line="246" pos:column="41">=</op:operator> <lit:literal type="boolean" pos:line="246" pos:column="43">true</lit:literal></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>
            }</block>
            <catch pos:line="250" pos:column="13">catch <parameter_list pos:line="250" pos:column="19">(<param><decl><type><name pos:line="250" pos:column="20">Exception</name></type> <name pos:line="250" pos:column="30">e</name></decl></param>)</parameter_list>
            <block pos:line="251" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="252" pos:column="17">LogEvents</name><op:operator pos:line="252" pos:column="26">.</op:operator><name pos:line="252" pos:column="27">UISandoWindowActivationError</name></name><argument_list pos:line="252" pos:column="55">(<argument><expr><name pos:line="252" pos:column="56">this</name></expr></argument>, <argument><expr><name pos:line="252" pos:column="62">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
            
        }</block></function>

        <function><type><specifier pos:line="257" pos:column="9">private</specifier> <name pos:line="257" pos:column="17">void</name></type> <name pos:line="257" pos:column="22">AddCommand</name><parameter_list pos:line="257" pos:column="32">()</parameter_list>
        <block pos:line="258" pos:column="9">{
            <comment type="line" pos:line="259" pos:column="13">// Add our command handlers for menu (commands must exist in the .vsct file)</comment>
            <decl_stmt><decl><type><name pos:line="260" pos:column="13">var</name></type> <name pos:line="260" pos:column="17">mcs</name> <init pos:line="260" pos:column="21">= <expr><call><name pos:line="260" pos:column="23">GetService</name><argument_list pos:line="260" pos:column="33">(<argument><expr><call><name pos:line="260" pos:column="34">typeof</name> <argument_list pos:line="260" pos:column="41">(<argument><expr><name pos:line="260" pos:column="42">IMenuCommandService</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="260" pos:column="64">as</op:operator> <name pos:line="260" pos:column="67">OleMenuCommandService</name></expr></init></decl>;</decl_stmt>
            <if pos:line="261" pos:column="13">if <condition pos:line="261" pos:column="16">(<expr><name pos:line="261" pos:column="17">null</name> <op:operator pos:line="261" pos:column="22">!=</op:operator> <name pos:line="261" pos:column="25">mcs</name></expr>)</condition><then pos:line="261" pos:column="29">
            <block pos:line="262" pos:column="13">{
                <comment type="line" pos:line="263" pos:column="17">// Create the command for the tool window</comment>
                <decl_stmt><decl><type><name pos:line="264" pos:column="17">var</name></type> <name pos:line="264" pos:column="21">toolwndCommandID</name> <init pos:line="264" pos:column="38">= <expr><op:operator pos:line="264" pos:column="40">new</op:operator> <call><name pos:line="264" pos:column="44">CommandID</name><argument_list pos:line="264" pos:column="53">(<argument><expr><name><name pos:line="264" pos:column="54">GuidList</name><op:operator pos:line="264" pos:column="62">.</op:operator><name pos:line="264" pos:column="63">guidUICmdSet</name></name></expr></argument>, <argument><expr><op:operator pos:line="264" pos:column="77">(</op:operator><name pos:line="264" pos:column="78">int</name><op:operator pos:line="264" pos:column="81">)</op:operator> <name><name pos:line="264" pos:column="83">PkgCmdIDList</name><op:operator pos:line="264" pos:column="95">.</op:operator><name pos:line="264" pos:column="96">sandoSearch</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="265" pos:column="17">var</name></type> <name pos:line="265" pos:column="21">menuToolWin</name> <init pos:line="265" pos:column="33">= <expr><op:operator pos:line="265" pos:column="35">new</op:operator> <call><name pos:line="265" pos:column="39">MenuCommand</name><argument_list pos:line="265" pos:column="50">(<argument><expr><name><name pos:line="265" pos:column="51">_viewManager</name><op:operator pos:line="265" pos:column="63">.</op:operator><name pos:line="265" pos:column="64">ShowToolWindow</name></name></expr></argument>, <argument><expr><name pos:line="265" pos:column="80">toolwndCommandID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="266" pos:column="17">mcs</name><op:operator pos:line="266" pos:column="20">.</op:operator><name pos:line="266" pos:column="21">AddCommand</name></name><argument_list pos:line="266" pos:column="31">(<argument><expr><name pos:line="266" pos:column="32">menuToolWin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>
        
        <function><type><specifier pos:line="270" pos:column="9">public</specifier> <name pos:line="270" pos:column="16">void</name></type> <name pos:line="270" pos:column="21">StartupCompleted</name><parameter_list pos:line="270" pos:column="37">()</parameter_list>
        <block pos:line="271" pos:column="9">{
            <try pos:line="272" pos:column="13">try
            <block pos:line="273" pos:column="13">{
                <if pos:line="274" pos:column="17">if <condition pos:line="274" pos:column="20">(<expr><call><name><name pos:line="274" pos:column="21">_viewManager</name><op:operator pos:line="274" pos:column="33">.</op:operator><name pos:line="274" pos:column="34">ShouldShow</name></name><argument_list pos:line="274" pos:column="44">()</argument_list></call></expr>)</condition><then pos:line="274" pos:column="47">
                <block pos:line="275" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="276" pos:column="21">_viewManager</name><op:operator pos:line="276" pos:column="33">.</op:operator><name pos:line="276" pos:column="34">ShowSando</name></name><argument_list pos:line="276" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
                    <try pos:line="277" pos:column="21">try
                    <block pos:line="278" pos:column="21">{
                        <comment type="line" pos:line="279" pos:column="25">//will fail during testing in VS IDE host</comment>
                        <expr_stmt><expr><call><name><name pos:line="280" pos:column="25">_viewManager</name><op:operator pos:line="280" pos:column="37">.</op:operator><name pos:line="280" pos:column="38">ShowToolbar</name></name><argument_list pos:line="280" pos:column="49">()</argument_list></call></expr>;</expr_stmt>
                    }</block>
                    <catch pos:line="282" pos:column="21">catch <parameter_list pos:line="282" pos:column="27">(<param><decl><type><name pos:line="282" pos:column="28">Exception</name></type> <name pos:line="282" pos:column="38">e</name></decl></param>)</parameter_list>
                    <block pos:line="283" pos:column="21">{
                        <comment type="line" pos:line="284" pos:column="25">//ignore</comment>
                    }</block></catch></try>
                }</block></then></if>

                <if pos:line="288" pos:column="17">if <condition pos:line="288" pos:column="20">(<expr><call><name><name pos:line="288" pos:column="21">ServiceLocator</name><op:operator pos:line="288" pos:column="35">.</op:operator><name><name pos:line="288" pos:column="36">Resolve</name><argument_list pos:line="288" pos:column="43">&lt;<argument><name pos:line="288" pos:column="44">DTE2</name></argument>&gt;</argument_list></name></name><argument_list pos:line="288" pos:column="49">()</argument_list></call><op:operator pos:line="288" pos:column="51">.</op:operator><call><name><name pos:line="288" pos:column="52">Version</name><op:operator pos:line="288" pos:column="59">.</op:operator><name pos:line="288" pos:column="60">StartsWith</name></name><argument_list pos:line="288" pos:column="70">(<argument><expr><lit:literal type="string" pos:line="288" pos:column="71">"10"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="288" pos:column="77">
                <block pos:line="289" pos:column="17">{
                    <comment type="line" pos:line="290" pos:column="21">//only need to do this in VS2010, and it breaks things in VS2012</comment>
                    <decl_stmt><decl><type><name pos:line="291" pos:column="21">Solution</name></type> <name pos:line="291" pos:column="30">openSolution</name> <init pos:line="291" pos:column="43">= <expr><call><name><name pos:line="291" pos:column="45">ServiceLocator</name><op:operator pos:line="291" pos:column="59">.</op:operator><name><name pos:line="291" pos:column="60">Resolve</name><argument_list pos:line="291" pos:column="67">&lt;<argument><name pos:line="291" pos:column="68">DTE2</name></argument>&gt;</argument_list></name></name><argument_list pos:line="291" pos:column="73">()</argument_list></call><op:operator pos:line="291" pos:column="75">.</op:operator><name pos:line="291" pos:column="76">Solution</name></expr></init></decl>;</decl_stmt>

                    <comment type="line" pos:line="293" pos:column="21">// JZ: SrcMLService Integration</comment>
                    <comment type="line" pos:line="294" pos:column="21">////if(openSolution != null &amp;&amp; !String.IsNullOrWhiteSpace(openSolution.FullName) &amp;&amp; _currentMonitor == null)</comment>
                    <if pos:line="295" pos:column="21">if <condition pos:line="295" pos:column="24">(<expr><name pos:line="295" pos:column="25">openSolution</name> <op:operator pos:line="295" pos:column="38">!=</op:operator> <name pos:line="295" pos:column="41">null</name> <op:operator pos:line="295" pos:column="46">&amp;&amp;</op:operator> <op:operator pos:line="295" pos:column="49">!</op:operator><call><name><name pos:line="295" pos:column="50">String</name><op:operator pos:line="295" pos:column="56">.</op:operator><name pos:line="295" pos:column="57">IsNullOrWhiteSpace</name></name><argument_list pos:line="295" pos:column="75">(<argument><expr><name><name pos:line="295" pos:column="76">openSolution</name><op:operator pos:line="295" pos:column="88">.</op:operator><name pos:line="295" pos:column="89">FullName</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="295" pos:column="99">
                    <comment type="line" pos:line="296" pos:column="21">// End of code changes</comment>
                    <block pos:line="297" pos:column="21">{
                        <expr_stmt><expr><call><name pos:line="298" pos:column="25">SolutionHasBeenOpened</name><argument_list pos:line="298" pos:column="46">()</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>

                <expr_stmt><expr><call><name pos:line="302" pos:column="17">RegisterSolutionEvents</name><argument_list pos:line="302" pos:column="39">()</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch pos:line="304" pos:column="13">catch <parameter_list pos:line="304" pos:column="19">(<param><decl><type><name pos:line="304" pos:column="20">Exception</name></type> <name pos:line="304" pos:column="30">e</name></decl></param>)</parameter_list>
            <block pos:line="305" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="306" pos:column="17">LogEvents</name><op:operator pos:line="306" pos:column="26">.</op:operator><name pos:line="306" pos:column="27">UIGenericError</name></name><argument_list pos:line="306" pos:column="41">(<argument><expr><name pos:line="306" pos:column="42">this</name></expr></argument>, <argument><expr><name pos:line="306" pos:column="48">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></function>  

        <function><type><specifier pos:line="310" pos:column="9">public</specifier> <name pos:line="310" pos:column="16">void</name></type> <name pos:line="310" pos:column="21">RegisterSolutionEvents</name><parameter_list pos:line="310" pos:column="43">()</parameter_list>
        <block pos:line="311" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="312" pos:column="13">var</name></type> <name pos:line="312" pos:column="17">dte</name> <init pos:line="312" pos:column="21">= <expr><call><name><name pos:line="312" pos:column="23">ServiceLocator</name><op:operator pos:line="312" pos:column="37">.</op:operator><name><name pos:line="312" pos:column="38">Resolve</name><argument_list pos:line="312" pos:column="45">&lt;<argument><name pos:line="312" pos:column="46">DTE2</name></argument>&gt;</argument_list></name></name><argument_list pos:line="312" pos:column="51">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="313" pos:column="13">if <condition pos:line="313" pos:column="16">(<expr><name pos:line="313" pos:column="17">dte</name> <op:operator pos:line="313" pos:column="21">!=</op:operator> <name pos:line="313" pos:column="24">null</name></expr>)</condition><then pos:line="313" pos:column="29">
            <block pos:line="314" pos:column="13">{
                <expr_stmt><expr><name pos:line="315" pos:column="17">_solutionEvents</name> <op:operator pos:line="315" pos:column="33">=</op:operator> <name><name pos:line="315" pos:column="35">dte</name><op:operator pos:line="315" pos:column="38">.</op:operator><name pos:line="315" pos:column="39">Events</name><op:operator pos:line="315" pos:column="45">.</op:operator><name pos:line="315" pos:column="46">SolutionEvents</name></name></expr>;</expr_stmt>                
                <expr_stmt><expr><name><name pos:line="316" pos:column="17">_solutionEvents</name><op:operator pos:line="316" pos:column="32">.</op:operator><name pos:line="316" pos:column="33">Opened</name></name> <op:operator pos:line="316" pos:column="40">+=</op:operator> <name pos:line="316" pos:column="43">SolutionHasBeenOpened</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="317" pos:column="17">_solutionEvents</name><op:operator pos:line="317" pos:column="32">.</op:operator><name pos:line="317" pos:column="33">BeforeClosing</name></name> <op:operator pos:line="317" pos:column="47">+=</op:operator> <name pos:line="317" pos:column="50">SolutionAboutToClose</name></expr>;</expr_stmt>
            }</block></then></if>

        }</block></function>

         

        <function><type><specifier pos:line="324" pos:column="9">private</specifier> <name pos:line="324" pos:column="17">void</name></type> <name pos:line="324" pos:column="22">DteEventsOnOnBeginShutdown</name><parameter_list pos:line="324" pos:column="48">()</parameter_list>
        <block pos:line="325" pos:column="9">{
            <if pos:line="326" pos:column="13">if <condition pos:line="326" pos:column="16">(<expr><name pos:line="326" pos:column="17">_extensionPointsConfiguration</name> <op:operator pos:line="326" pos:column="47">!=</op:operator> <name pos:line="326" pos:column="50">null</name></expr>)</condition><then pos:line="326" pos:column="55">
            <block pos:line="327" pos:column="13">{                                
                <expr_stmt><expr><call><name><name pos:line="328" pos:column="17">ExtensionPointsConfigurationFileReader</name><op:operator pos:line="328" pos:column="55">.</op:operator><name pos:line="328" pos:column="56">WriteConfiguration</name></name><argument_list pos:line="328" pos:column="74">(<argument><expr><name pos:line="328" pos:column="75">_extensionPointsConfiguration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line" pos:line="329" pos:column="17">//After writing the extension points configuration file, the index state file on disk is out of date; so it needs to be rewritten</comment>
                <expr_stmt><expr><call><name><name pos:line="330" pos:column="17">IndexStateManager</name><op:operator pos:line="330" pos:column="34">.</op:operator><name pos:line="330" pos:column="35">SaveCurrentIndexState</name></name><argument_list pos:line="330" pos:column="56">()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <comment type="line" pos:line="332" pos:column="13">//TODO - kill file processing threads</comment>
        }</block></function>

        <function><type><specifier pos:line="335" pos:column="9">private</specifier> <name pos:line="335" pos:column="17">void</name></type> <name pos:line="335" pos:column="22">RegisterExtensionPoints</name><parameter_list pos:line="335" pos:column="45">()</parameter_list>
        <block pos:line="336" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="337" pos:column="13">var</name></type> <name pos:line="337" pos:column="17">extensionPointsRepository</name> <init pos:line="337" pos:column="43">= <expr><name><name pos:line="337" pos:column="45">ExtensionPointsRepository</name><op:operator pos:line="337" pos:column="70">.</op:operator><name pos:line="337" pos:column="71">Instance</name></name></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="339" pos:column="13">// JZ: SrcMLService Integration</comment>
            <expr_stmt><expr><call><name><name pos:line="340" pos:column="13">extensionPointsRepository</name><op:operator pos:line="340" pos:column="38">.</op:operator><name pos:line="340" pos:column="39">RegisterParserImplementation</name></name><argument_list pos:line="340" pos:column="67">(<argument><expr><op:operator pos:line="340" pos:column="68">new</op:operator> <name><name pos:line="340" pos:column="72">List</name><argument_list pos:line="340" pos:column="76">&lt;<argument><name pos:line="340" pos:column="77">string</name></argument>&gt;</argument_list></name> <block pos:line="340" pos:column="85">{ <expr><lit:literal type="string" pos:line="340" pos:column="87">".cs"</lit:literal></expr> }</block></expr></argument>, <argument><expr><op:operator pos:line="340" pos:column="96">new</op:operator> <call><name pos:line="340" pos:column="100">SrcMLCSharpParser</name><argument_list pos:line="340" pos:column="117">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="341" pos:column="13">extensionPointsRepository</name><op:operator pos:line="341" pos:column="38">.</op:operator><name pos:line="341" pos:column="39">RegisterParserImplementation</name></name><argument_list pos:line="341" pos:column="67">(<argument><expr><op:operator pos:line="341" pos:column="68">new</op:operator> <name><name pos:line="341" pos:column="72">List</name><argument_list pos:line="341" pos:column="76">&lt;<argument><name pos:line="341" pos:column="77">string</name></argument>&gt;</argument_list></name> <block pos:line="341" pos:column="85">{ <expr><lit:literal type="string" pos:line="341" pos:column="87">".h"</lit:literal></expr><op:operator pos:line="341" pos:column="91">,</op:operator> <expr><lit:literal type="string" pos:line="341" pos:column="93">".cpp"</lit:literal></expr><op:operator pos:line="341" pos:column="99">,</op:operator> <expr><lit:literal type="string" pos:line="341" pos:column="101">".cxx"</lit:literal></expr><op:operator pos:line="341" pos:column="107">,</op:operator> <expr><lit:literal type="string" pos:line="341" pos:column="109">".c"</lit:literal></expr> }</block></expr></argument>, <argument><expr><op:operator pos:line="341" pos:column="117">new</op:operator> <call><name pos:line="341" pos:column="121">SrcMLCppParser</name><argument_list pos:line="341" pos:column="135">(<argument><expr><name pos:line="341" pos:column="136">srcMLService</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:line="342" pos:column="13">////extensionPointsRepository.RegisterParserImplementation(new List&lt;string&gt; { ".cs" }, new SrcMLCSharpParser(_srcMLArchive));</comment>
            <comment type="line" pos:line="343" pos:column="13">////extensionPointsRepository.RegisterParserImplementation(new List&lt;string&gt; { ".h", ".cpp", ".cxx", ".c" }, new SrcMLCppParser(_srcMLArchive));</comment>
            <comment type="line" pos:line="344" pos:column="13">// JZ: End of code changes</comment>
            <expr_stmt><expr><call><name><name pos:line="345" pos:column="13">extensionPointsRepository</name><op:operator pos:line="345" pos:column="38">.</op:operator><name pos:line="345" pos:column="39">RegisterParserImplementation</name></name><argument_list pos:line="345" pos:column="67">(<argument><expr><op:operator pos:line="345" pos:column="68">new</op:operator> <name><name pos:line="345" pos:column="72">List</name><argument_list pos:line="345" pos:column="76">&lt;<argument><name pos:line="345" pos:column="77">string</name></argument>&gt;</argument_list></name> <block pos:line="345" pos:column="85">{ <expr><lit:literal type="string" pos:line="345" pos:column="87">".xaml"</lit:literal></expr> }</block></expr></argument>, <argument><expr><op:operator pos:line="345" pos:column="98">new</op:operator> <call><name pos:line="345" pos:column="102">XAMLFileParser</name><argument_list pos:line="345" pos:column="116">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line" pos:line="346" pos:column="25">//extensionPointsRepository.RegisterParserImplementation(new List&lt;string&gt; { ".txt" },</comment>
																  <comment type="line" pos:line="347" pos:column="131">// new TextFileParser());</comment>

            <expr_stmt><expr><call><name><name pos:line="349" pos:column="13">extensionPointsRepository</name><op:operator pos:line="349" pos:column="38">.</op:operator><name pos:line="349" pos:column="39">RegisterWordSplitterImplementation</name></name><argument_list pos:line="349" pos:column="73">(<argument><expr><op:operator pos:line="349" pos:column="74">new</op:operator> <call><name pos:line="349" pos:column="78">WordSplitter</name><argument_list pos:line="349" pos:column="90">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 	
            <expr_stmt><expr><call><name><name pos:line="350" pos:column="13">extensionPointsRepository</name><op:operator pos:line="350" pos:column="38">.</op:operator><name pos:line="350" pos:column="39">RegisterResultsReordererImplementation</name></name><argument_list pos:line="350" pos:column="77">(<argument><expr><op:operator pos:line="350" pos:column="78">new</op:operator> <call><name pos:line="350" pos:column="82">SortByScoreResultsReorderer</name><argument_list pos:line="350" pos:column="109">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 	        <expr_stmt><expr><call><name><name pos:line="351" pos:column="17">extensionPointsRepository</name><op:operator pos:line="351" pos:column="42">.</op:operator><name pos:line="351" pos:column="43">RegisterQueryWeightsSupplierImplementation</name></name><argument_list pos:line="351" pos:column="85">(<argument><expr><op:operator pos:line="351" pos:column="86">new</op:operator> <call><name pos:line="351" pos:column="90">QueryWeightsSupplier</name><argument_list pos:line="351" pos:column="110">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 	        <expr_stmt><expr><call><name><name pos:line="352" pos:column="17">extensionPointsRepository</name><op:operator pos:line="352" pos:column="42">.</op:operator><name pos:line="352" pos:column="43">RegisterQueryRewriterImplementation</name></name><argument_list pos:line="352" pos:column="78">(<argument><expr><op:operator pos:line="352" pos:column="79">new</op:operator> <call><name pos:line="352" pos:column="83">DefaultQueryRewriter</name><argument_list pos:line="352" pos:column="103">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="353" pos:column="13">extensionPointsRepository</name><op:operator pos:line="353" pos:column="38">.</op:operator><name pos:line="353" pos:column="39">RegisterIndexFilterManagerImplementation</name></name><argument_list pos:line="353" pos:column="79">(<argument><expr><op:operator pos:line="353" pos:column="80">new</op:operator> <call><name pos:line="353" pos:column="84">IndexFilterManager</name><argument_list pos:line="353" pos:column="102">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


            <decl_stmt><decl><type><name pos:line="356" pos:column="13">var</name></type> <name pos:line="356" pos:column="17">sandoOptions</name> <init pos:line="356" pos:column="30">= <expr><call><name><name pos:line="356" pos:column="32">ServiceLocator</name><op:operator pos:line="356" pos:column="46">.</op:operator><name><name pos:line="356" pos:column="47">Resolve</name><argument_list pos:line="356" pos:column="54">&lt;<argument><name pos:line="356" pos:column="55">ISandoOptionsProvider</name></argument>&gt;</argument_list></name></name><argument_list pos:line="356" pos:column="77">()</argument_list></call><op:operator pos:line="356" pos:column="79">.</op:operator><call><name pos:line="356" pos:column="80">GetSandoOptions</name><argument_list pos:line="356" pos:column="95">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="358" pos:column="13">var</name></type> <name pos:line="358" pos:column="17">loggerPath</name> <init pos:line="358" pos:column="28">= <expr><call><name><name pos:line="358" pos:column="30">Path</name><op:operator pos:line="358" pos:column="34">.</op:operator><name pos:line="358" pos:column="35">Combine</name></name><argument_list pos:line="358" pos:column="42">(<argument><expr><name><name pos:line="358" pos:column="43">sandoOptions</name><op:operator pos:line="358" pos:column="55">.</op:operator><name pos:line="358" pos:column="56">ExtensionPointsPluginDirectoryPath</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="358" pos:column="92">"ExtensionPointsLogger.log"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="359" pos:column="13">var</name></type> <name pos:line="359" pos:column="17">logger</name> <init pos:line="359" pos:column="24">= <expr><call><name><name pos:line="359" pos:column="26">FileLogger</name><op:operator pos:line="359" pos:column="36">.</op:operator><name pos:line="359" pos:column="37">CreateFileLogger</name></name><argument_list pos:line="359" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="359" pos:column="54">"ExtensionPointsLogger"</lit:literal></expr></argument>, <argument><expr><name pos:line="359" pos:column="79">loggerPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="360" pos:column="13">_extensionPointsConfiguration</name> <op:operator pos:line="360" pos:column="43">=</op:operator> <call><name><name pos:line="360" pos:column="45">ExtensionPointsConfigurationFileReader</name><op:operator pos:line="360" pos:column="83">.</op:operator><name pos:line="360" pos:column="84">ReadAndValidate</name></name><argument_list pos:line="360" pos:column="99">(<argument><expr><name pos:line="360" pos:column="100">logger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if pos:line="362" pos:column="13">if<condition pos:line="362" pos:column="15">(<expr><name pos:line="362" pos:column="16">_extensionPointsConfiguration</name> <op:operator pos:line="362" pos:column="46">!=</op:operator> <name pos:line="362" pos:column="49">null</name></expr>)</condition><then pos:line="362" pos:column="54">
			<block pos:line="363" pos:column="25">{
                <expr_stmt><expr><name><name pos:line="364" pos:column="17">_extensionPointsConfiguration</name><op:operator pos:line="364" pos:column="46">.</op:operator><name pos:line="364" pos:column="47">PluginDirectoryPath</name></name> <op:operator pos:line="364" pos:column="67">=</op:operator> <name><name pos:line="364" pos:column="69">sandoOptions</name><op:operator pos:line="364" pos:column="81">.</op:operator><name pos:line="364" pos:column="82">ExtensionPointsPluginDirectoryPath</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="365" pos:column="33">ExtensionPointsConfigurationAnalyzer</name><op:operator pos:line="365" pos:column="69">.</op:operator><name pos:line="365" pos:column="70">FindAndRegisterValidExtensionPoints</name></name><argument_list pos:line="365" pos:column="105">(<argument><expr><name pos:line="365" pos:column="106">_extensionPointsConfiguration</name></expr></argument>, <argument><expr><name pos:line="365" pos:column="137">logger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>

            <decl_stmt><decl><type><name pos:line="368" pos:column="13">var</name></type> <name pos:line="368" pos:column="17">csParser</name> <init pos:line="368" pos:column="26">= <expr><call><name><name pos:line="368" pos:column="28">extensionPointsRepository</name><op:operator pos:line="368" pos:column="53">.</op:operator><name pos:line="368" pos:column="54">GetParserImplementation</name></name><argument_list pos:line="368" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="368" pos:column="78">".cs"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="368" pos:column="85">as</op:operator> <name pos:line="368" pos:column="88">SrcMLCSharpParser</name></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="369" pos:column="13">// JZ: SrcMLService Integration</comment>
            <comment type="line" pos:line="370" pos:column="13">////if(csParser != null) {</comment>
            <comment type="line" pos:line="371" pos:column="13">////    csParser.Archive = _srcMLArchive;</comment>
            <comment type="line" pos:line="372" pos:column="13">////}</comment>
            <comment type="line" pos:line="373" pos:column="13">// End of code changes</comment>
            <decl_stmt><decl><type><name pos:line="374" pos:column="13">var</name></type> <name pos:line="374" pos:column="17">cppParser</name> <init pos:line="374" pos:column="27">= <expr><call><name><name pos:line="374" pos:column="29">extensionPointsRepository</name><op:operator pos:line="374" pos:column="54">.</op:operator><name pos:line="374" pos:column="55">GetParserImplementation</name></name><argument_list pos:line="374" pos:column="78">(<argument><expr><lit:literal type="string" pos:line="374" pos:column="79">".cpp"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="374" pos:column="87">as</op:operator> <name pos:line="374" pos:column="90">SrcMLCppParser</name></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="375" pos:column="13">// JZ: SrcMLService Integration</comment>
            <comment type="line" pos:line="376" pos:column="13">////if(cppParser != null) {</comment>
            <comment type="line" pos:line="377" pos:column="13">////    cppParser.Archive = _srcMLArchive;</comment>
            <comment type="line" pos:line="378" pos:column="13">////}</comment>
            <comment type="line" pos:line="379" pos:column="13">// End of code changes</comment>

        }</block></function>

        <function><type><specifier pos:line="383" pos:column="9">private</specifier> <name pos:line="383" pos:column="17">void</name></type> <name pos:line="383" pos:column="22">SolutionAboutToClose</name><parameter_list pos:line="383" pos:column="42">()</parameter_list>
		<block pos:line="384" pos:column="17">{
			<try pos:line="385" pos:column="25">try
            <block pos:line="386" pos:column="13">{
                <comment type="line" pos:line="387" pos:column="17">// JZ: SrcMLService Integration</comment>
                <comment type="line" pos:line="388" pos:column="17">//srcMLService.StopMonitoring();</comment>
                <comment type="line" pos:line="389" pos:column="17">// TODO: DocumentIndexer.CommitChanges(); DocumentIndexer.Dispose(false);</comment>
                <comment type="line" pos:line="390" pos:column="17">// End of code changes</comment>

                
                
                <if pos:line="394" pos:column="17">if<condition pos:line="394" pos:column="19">(<expr><name pos:line="394" pos:column="20">_srcMLArchive</name> <op:operator pos:line="394" pos:column="34">!=</op:operator> <name pos:line="394" pos:column="37">null</name></expr>)</condition><then pos:line="394" pos:column="42">
                <block pos:line="395" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="396" pos:column="21">_srcMLArchive</name><op:operator pos:line="396" pos:column="34">.</op:operator><name pos:line="396" pos:column="35">Dispose</name></name><argument_list pos:line="396" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="397" pos:column="21">_srcMLArchive</name> <op:operator pos:line="397" pos:column="35">=</op:operator> <name pos:line="397" pos:column="37">null</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="398" pos:column="21">ServiceLocator</name><op:operator pos:line="398" pos:column="35">.</op:operator><name><name pos:line="398" pos:column="36">Resolve</name><argument_list pos:line="398" pos:column="43">&lt;<argument><name pos:line="398" pos:column="44">IndexFilterManager</name></argument>&gt;</argument_list></name></name><argument_list pos:line="398" pos:column="63">()</argument_list></call><op:operator pos:line="398" pos:column="65">.</op:operator><call><name pos:line="398" pos:column="66">Dispose</name><argument_list pos:line="398" pos:column="73">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="399" pos:column="21">ServiceLocator</name><op:operator pos:line="399" pos:column="35">.</op:operator><name><name pos:line="399" pos:column="36">Resolve</name><argument_list pos:line="399" pos:column="43">&lt;<argument><name pos:line="399" pos:column="44">DocumentIndexer</name></argument>&gt;</argument_list></name></name><argument_list pos:line="399" pos:column="60">()</argument_list></call><op:operator pos:line="399" pos:column="62">.</op:operator><call><name pos:line="399" pos:column="63">Dispose</name><argument_list pos:line="399" pos:column="70">()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <comment type="line" pos:line="401" pos:column="17">// XiGe: dispose the dictionary.</comment>
                <expr_stmt><expr><call><name><name pos:line="402" pos:column="17">ServiceLocator</name><op:operator pos:line="402" pos:column="31">.</op:operator><name><name pos:line="402" pos:column="32">Resolve</name><argument_list pos:line="402" pos:column="39">&lt;<argument><name pos:line="402" pos:column="40">DictionaryBasedSplitter</name></argument>&gt;</argument_list></name></name><argument_list pos:line="402" pos:column="64">()</argument_list></call><op:operator pos:line="402" pos:column="66">.</op:operator><call><name pos:line="402" pos:column="67">Dispose</name><argument_list pos:line="402" pos:column="74">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="403" pos:column="17">ServiceLocator</name><op:operator pos:line="403" pos:column="31">.</op:operator><name><name pos:line="403" pos:column="32">Resolve</name><argument_list pos:line="403" pos:column="39">&lt;<argument><name pos:line="403" pos:column="40">SearchHistory</name></argument>&gt;</argument_list></name></name><argument_list pos:line="403" pos:column="54">()</argument_list></call><op:operator pos:line="403" pos:column="56">.</op:operator><call><name pos:line="403" pos:column="57">Dispose</name><argument_list pos:line="403" pos:column="64">()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="404" pos:column="17">var</name></type> <name pos:line="404" pos:column="21">control</name> <init pos:line="404" pos:column="29">= <expr><call><name><name pos:line="404" pos:column="31">ServiceLocator</name><op:operator pos:line="404" pos:column="45">.</op:operator><name><name pos:line="404" pos:column="46">Resolve</name><argument_list pos:line="404" pos:column="53">&lt;<argument><name pos:line="404" pos:column="54">SearchViewControl</name></argument>&gt;</argument_list></name></name><argument_list pos:line="404" pos:column="72">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="405" pos:column="17">control</name><op:operator pos:line="405" pos:column="24">.</op:operator><name pos:line="405" pos:column="25">Dispatcher</name><op:operator pos:line="405" pos:column="35">.</op:operator><name pos:line="405" pos:column="36">Invoke</name></name><argument_list pos:line="405" pos:column="42">(<argument><expr><call pos:line="405" pos:column="43">(<name pos:line="405" pos:column="44">Action</name>)<argument_list pos:line="405" pos:column="51">(<argument><expr><lambda><parameter_list pos:line="405" pos:column="52">()</parameter_list> <op:operator pos:line="405" pos:column="55">=&gt;</op:operator> <call><name pos:line="405" pos:column="58">UpdateDirectory</name><argument_list pos:line="405" pos:column="73">(<argument><expr><name><name pos:line="405" pos:column="74">SearchViewControl</name><op:operator pos:line="405" pos:column="91">.</op:operator><name pos:line="405" pos:column="92">DefaultOpenSolutionMessage</name></name></expr></argument>, <argument><expr><name pos:line="405" pos:column="120">control</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                                                    
            }</block>
            <catch pos:line="407" pos:column="13">catch <parameter_list pos:line="407" pos:column="19">(<param><decl><type><name pos:line="407" pos:column="20">Exception</name></type> <name pos:line="407" pos:column="30">e</name></decl></param>)</parameter_list>
            <block pos:line="408" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="409" pos:column="17">LogEvents</name><op:operator pos:line="409" pos:column="26">.</op:operator><name pos:line="409" pos:column="27">UISolutionClosingError</name></name><argument_list pos:line="409" pos:column="49">(<argument><expr><name pos:line="409" pos:column="50">this</name></expr></argument>, <argument><expr><name pos:line="409" pos:column="56">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
		}</block></function>

		<function><type><specifier pos:line="413" pos:column="17">private</specifier> <name pos:line="413" pos:column="25">void</name></type> <name pos:line="413" pos:column="30">SolutionHasBeenOpened</name><parameter_list pos:line="413" pos:column="51">()</parameter_list>
		<block pos:line="414" pos:column="17">{            
            <decl_stmt><decl><type><name pos:line="415" pos:column="13">var</name></type> <name pos:line="415" pos:column="17">bw</name> <init pos:line="415" pos:column="20">= <expr><op:operator pos:line="415" pos:column="22">new</op:operator> <name pos:line="415" pos:column="26">BackgroundWorker</name> <block pos:line="415" pos:column="43">{<expr><name pos:line="415" pos:column="44">WorkerReportsProgress</name> <op:operator pos:line="415" pos:column="66">=</op:operator> <lit:literal type="boolean" pos:line="415" pos:column="68">false</lit:literal></expr>, <expr><name pos:line="415" pos:column="75">WorkerSupportsCancellation</name> <op:operator pos:line="415" pos:column="102">=</op:operator> <lit:literal type="boolean" pos:line="415" pos:column="104">false</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
		    <expr_stmt><expr><name><name pos:line="416" pos:column="21">bw</name><op:operator pos:line="416" pos:column="23">.</op:operator><name pos:line="416" pos:column="24">DoWork</name></name> <op:operator pos:line="416" pos:column="31">+=</op:operator> <name pos:line="416" pos:column="34">RespondToSolutionOpened</name></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name><name pos:line="417" pos:column="21">bw</name><op:operator pos:line="417" pos:column="23">.</op:operator><name pos:line="417" pos:column="24">RunWorkerAsync</name></name><argument_list pos:line="417" pos:column="38">()</argument_list></call></expr>;</expr_stmt>
		}</block></function>


        <function><type><specifier pos:line="421" pos:column="9">public</specifier> <name pos:line="421" pos:column="16">void</name></type> <name pos:line="421" pos:column="21">HandleIndexingStateChange</name><parameter_list pos:line="421" pos:column="46">(<param><decl><type><name pos:line="421" pos:column="47">bool</name></type> <name pos:line="421" pos:column="52">ready</name></decl></param>)</parameter_list>
        <block pos:line="422" pos:column="9">{            
            <expr_stmt><expr><call><name pos:line="423" pos:column="13">CallShowProgressBar</name><argument_list pos:line="423" pos:column="32">(<argument><expr><op:operator pos:line="423" pos:column="33">!</op:operator><name pos:line="423" pos:column="34">ready</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if pos:line="424" pos:column="13">if <condition pos:line="424" pos:column="16">(<expr><name pos:line="424" pos:column="17">ready</name></expr>)</condition><then pos:line="424" pos:column="23">
                <expr_stmt><expr><call><name><name pos:line="425" pos:column="17">ServiceLocator</name><op:operator pos:line="425" pos:column="31">.</op:operator><name><name pos:line="425" pos:column="32">Resolve</name><argument_list pos:line="425" pos:column="39">&lt;<argument><name pos:line="425" pos:column="40">InitialIndexingWatcher</name></argument>&gt;</argument_list></name></name><argument_list pos:line="425" pos:column="63">()</argument_list></call><op:operator pos:line="425" pos:column="65">.</op:operator><call><name pos:line="425" pos:column="66">InitialIndexingCompleted</name><argument_list pos:line="425" pos:column="90">()</argument_list></call></expr>;</expr_stmt></then></if>
            <expr_stmt><expr><call><name pos:line="426" pos:column="13">UpdateIndexingFilesList</name><argument_list pos:line="426" pos:column="36">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="429" pos:column="9">public</specifier> <name pos:line="429" pos:column="16">void</name></type> <name pos:line="429" pos:column="21">UpdateIndexingFilesListIfEmpty</name><parameter_list pos:line="429" pos:column="51">()</parameter_list>
        <block pos:line="430" pos:column="9">{   
            <if pos:line="431" pos:column="13">if <condition pos:line="431" pos:column="16">(<expr><op:operator pos:line="431" pos:column="17">!</op:operator><name pos:line="431" pos:column="18">updatedForThisSolution</name></expr>)</condition><then pos:line="431" pos:column="41">
            <block pos:line="432" pos:column="13">{
                <expr_stmt><expr><call><name pos:line="433" pos:column="17">UpdateIndexingFilesList</name><argument_list pos:line="433" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>             
        }</block></function>

        <function><type><specifier pos:line="437" pos:column="9">public</specifier> <name pos:line="437" pos:column="16">void</name></type> <name pos:line="437" pos:column="21">UpdateIndexingFilesList</name><parameter_list pos:line="437" pos:column="44">()</parameter_list>
        <block pos:line="438" pos:column="9">{
            <if pos:line="439" pos:column="13">if<condition pos:line="439" pos:column="15">(<expr><name pos:line="439" pos:column="16">srcMLService</name> <op:operator pos:line="439" pos:column="29">!=</op:operator> <name pos:line="439" pos:column="32">null</name> <op:operator pos:line="439" pos:column="37">&amp;&amp;</op:operator> <name><name pos:line="439" pos:column="40">srcMLService</name><op:operator pos:line="439" pos:column="52">.</op:operator><name pos:line="439" pos:column="53">MonitoredDirectories</name></name> <op:operator pos:line="439" pos:column="74">!=</op:operator> <name pos:line="439" pos:column="77">null</name> <op:operator pos:line="439" pos:column="82">&amp;&amp;</op:operator> <name pos:line="439" pos:column="85">WindowActivated</name></expr>)</condition><then pos:line="439" pos:column="101">
            <block pos:line="440" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="441" pos:column="17">var</name></type> <name pos:line="441" pos:column="21">path</name> <init pos:line="441" pos:column="26">= <expr><call><name pos:line="441" pos:column="28">GetDisplayPathMonitoredFiles</name><argument_list pos:line="441" pos:column="56">(<argument><expr><name pos:line="441" pos:column="57">srcMLService</name></expr></argument>, <argument><expr><name pos:line="441" pos:column="71">this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <try pos:line="442" pos:column="17">try <block pos:line="442" pos:column="21">{
                    <decl_stmt><decl><type><name pos:line="443" pos:column="21">var</name></type> <name pos:line="443" pos:column="25">control</name> <init pos:line="443" pos:column="33">= <expr><call><name><name pos:line="443" pos:column="35">ServiceLocator</name><op:operator pos:line="443" pos:column="49">.</op:operator><name><name pos:line="443" pos:column="50">Resolve</name><argument_list pos:line="443" pos:column="57">&lt;<argument><name pos:line="443" pos:column="58">SearchViewControl</name></argument>&gt;</argument_list></name></name><argument_list pos:line="443" pos:column="76">()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="444" pos:column="21">control</name><op:operator pos:line="444" pos:column="28">.</op:operator><name pos:line="444" pos:column="29">Dispatcher</name><op:operator pos:line="444" pos:column="39">.</op:operator><name pos:line="444" pos:column="40">Invoke</name></name><argument_list pos:line="444" pos:column="46">(<argument><expr><call pos:line="444" pos:column="47">(<name pos:line="444" pos:column="48">Action</name>) <argument_list pos:line="444" pos:column="56">(<argument><expr><lambda><parameter_list pos:line="444" pos:column="57">()</parameter_list> <op:operator pos:line="444" pos:column="60">=&gt;</op:operator> <call><name pos:line="444" pos:column="63">UpdateDirectory</name><argument_list pos:line="444" pos:column="78">(<argument><expr><name pos:line="444" pos:column="79">path</name></expr></argument>, <argument><expr><name pos:line="444" pos:column="85">control</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if pos:line="445" pos:column="21">if<condition pos:line="445" pos:column="23">(<expr><name><name pos:line="445" pos:column="24">srcMLService</name><op:operator pos:line="445" pos:column="36">.</op:operator><name pos:line="445" pos:column="37">MonitoredDirectories</name><op:operator pos:line="445" pos:column="57">.</op:operator><name pos:line="445" pos:column="58">Count</name></name> <op:operator pos:line="445" pos:column="64">&gt;</op:operator> <lit:literal type="number" pos:line="445" pos:column="66">0</lit:literal></expr>)</condition><then pos:line="445" pos:column="68">
                        <expr_stmt><expr><name pos:line="446" pos:column="25">updatedForThisSolution</name> <op:operator pos:line="446" pos:column="48">=</op:operator> <lit:literal type="boolean" pos:line="446" pos:column="50">true</lit:literal></expr>;</expr_stmt></then></if>
                }</block> <catch pos:line="447" pos:column="19">catch<parameter_list pos:line="447" pos:column="24">(<param><decl><type><name pos:line="447" pos:column="25">InvalidOperationException</name></type> <name pos:line="447" pos:column="51">notInited</name></decl></param>)</parameter_list> <block pos:line="447" pos:column="62">{
                    <comment type="line" pos:line="448" pos:column="21">//OK, window not inited so can't update it</comment>
                }</block></catch></try>
            }</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="453" pos:column="9">public</specifier> <specifier pos:line="453" pos:column="16">static</specifier> <name pos:line="453" pos:column="23">string</name></type> <name pos:line="453" pos:column="30">GetDisplayPathMonitoredFiles</name><parameter_list pos:line="453" pos:column="58">(<param><decl><type><name pos:line="453" pos:column="59">ISrcMLGlobalService</name></type> <name pos:line="453" pos:column="79">service</name></decl></param>, <param><decl><type><name pos:line="453" pos:column="88">object</name></type> <name pos:line="453" pos:column="95">callingObject</name></decl></param> )</parameter_list>
        <block pos:line="454" pos:column="9">{
            <if pos:line="455" pos:column="13">if <condition pos:line="455" pos:column="16">(<expr><name><name pos:line="455" pos:column="17">service</name><op:operator pos:line="455" pos:column="24">.</op:operator><name pos:line="455" pos:column="25">MonitoredDirectories</name><op:operator pos:line="455" pos:column="45">.</op:operator><name pos:line="455" pos:column="46">Count</name></name> <op:operator pos:line="455" pos:column="52">&gt;</op:operator> <lit:literal type="number" pos:line="455" pos:column="54">0</lit:literal></expr>)</condition><then pos:line="455" pos:column="56">
            <block pos:line="456" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="457" pos:column="17">var</name></type> <name pos:line="457" pos:column="21">fullpath</name> <init pos:line="457" pos:column="30">= <expr><call><name><name pos:line="457" pos:column="32">service</name><op:operator pos:line="457" pos:column="39">.</op:operator><name pos:line="457" pos:column="40">MonitoredDirectories</name><op:operator pos:line="457" pos:column="60">.</op:operator><name pos:line="457" pos:column="61">First</name></name><argument_list pos:line="457" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="458" pos:column="17">var</name></type> <name pos:line="458" pos:column="21">path</name> <init pos:line="458" pos:column="26">= <expr><call><name><name pos:line="458" pos:column="28">Path</name><op:operator pos:line="458" pos:column="32">.</op:operator><name pos:line="458" pos:column="33">GetFileName</name></name><argument_list pos:line="458" pos:column="44">(<argument><expr><name pos:line="458" pos:column="45">fullpath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <try pos:line="459" pos:column="17">try
                <block pos:line="460" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="461" pos:column="21">var</name></type> <name pos:line="461" pos:column="25">parent</name> <init pos:line="461" pos:column="32">= <expr><call><name><name pos:line="461" pos:column="34">Path</name><op:operator pos:line="461" pos:column="38">.</op:operator><name pos:line="461" pos:column="39">GetFileName</name></name><argument_list pos:line="461" pos:column="50">(<argument><expr><call><name><name pos:line="461" pos:column="51">Path</name><op:operator pos:line="461" pos:column="55">.</op:operator><name pos:line="461" pos:column="56">GetDirectoryName</name></name><argument_list pos:line="461" pos:column="72">(<argument><expr><name pos:line="461" pos:column="73">fullpath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name pos:line="462" pos:column="21">path</name> <op:operator pos:line="462" pos:column="26">+=</op:operator> <lit:literal type="string" pos:line="462" pos:column="29">" in folder "</lit:literal> <op:operator pos:line="462" pos:column="43">+</op:operator> <name pos:line="462" pos:column="45">parent</name></expr>;</expr_stmt>
                }</block>
                <catch pos:line="464" pos:column="17">catch <parameter_list pos:line="464" pos:column="23">(<param><decl><type><name pos:line="464" pos:column="24">Exception</name></type> <name pos:line="464" pos:column="34">e</name></decl></param>)</parameter_list>
                <block pos:line="465" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="466" pos:column="21">LogEvents</name><op:operator pos:line="466" pos:column="30">.</op:operator><name pos:line="466" pos:column="31">UIIndexUpdateError</name></name><argument_list pos:line="466" pos:column="49">(<argument><expr><name pos:line="466" pos:column="50">callingObject</name></expr></argument>, <argument><expr><name pos:line="466" pos:column="65">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
                <return pos:line="468" pos:column="17">return <expr><name pos:line="468" pos:column="24">path</name></expr>;</return>
            }</block></then>
            <else pos:line="470" pos:column="13">else
            <block pos:line="471" pos:column="13">{
                <return pos:line="472" pos:column="17">return <expr><name><name pos:line="472" pos:column="24">SearchViewControl</name><op:operator pos:line="472" pos:column="41">.</op:operator><name pos:line="472" pos:column="42">PleaseAddDirectoriesMessage</name></name></expr>;</return>
            }</block></else></if>
        }</block></function>

        <function><type><specifier pos:line="476" pos:column="9">private</specifier> <name pos:line="476" pos:column="17">void</name></type> <name pos:line="476" pos:column="22">UpdateDirectory</name><parameter_list pos:line="476" pos:column="37">(<param><decl><type><name pos:line="476" pos:column="38">string</name></type> <name pos:line="476" pos:column="45">path</name></decl></param>, <param><decl><type><name pos:line="476" pos:column="51">SearchViewControl</name></type> <name pos:line="476" pos:column="69">control</name></decl></param>)</parameter_list>
        <block pos:line="477" pos:column="9">{
            <if pos:line="478" pos:column="13">if <condition pos:line="478" pos:column="16">(<expr><name pos:line="478" pos:column="17">control</name> <op:operator pos:line="478" pos:column="25">!=</op:operator> <name pos:line="478" pos:column="28">null</name></expr>)</condition><then pos:line="478" pos:column="33">
            <block pos:line="479" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="480" pos:column="17">control</name><op:operator pos:line="480" pos:column="24">.</op:operator><name pos:line="480" pos:column="25">OpenSolutionPaths</name></name> <op:operator pos:line="480" pos:column="43">=</op:operator> <name pos:line="480" pos:column="45">path</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>


        <function><type><specifier pos:line="485" pos:column="9">private</specifier> <name pos:line="485" pos:column="17">void</name></type> <name pos:line="485" pos:column="22">CallShowProgressBar</name><parameter_list pos:line="485" pos:column="41">(<param><decl><type><name pos:line="485" pos:column="42">bool</name></type> <name pos:line="485" pos:column="47">show</name></decl></param>)</parameter_list>
        <block pos:line="486" pos:column="9">{
            <if pos:line="487" pos:column="13">if<condition pos:line="487" pos:column="15">(<expr><name pos:line="487" pos:column="16">WindowActivated</name></expr>)</condition><then pos:line="487" pos:column="32">
            <block pos:line="488" pos:column="13">{
                <try pos:line="489" pos:column="17">try <block pos:line="489" pos:column="21">{
                    <decl_stmt><decl><type><name pos:line="490" pos:column="21">var</name></type> <name pos:line="490" pos:column="25">control</name> <init pos:line="490" pos:column="33">= <expr><call><name><name pos:line="490" pos:column="35">ServiceLocator</name><op:operator pos:line="490" pos:column="49">.</op:operator><name><name pos:line="490" pos:column="50">Resolve</name><argument_list pos:line="490" pos:column="57">&lt;<argument><name pos:line="490" pos:column="58">SearchViewControl</name></argument>&gt;</argument_list></name></name><argument_list pos:line="490" pos:column="76">()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if pos:line="491" pos:column="21">if<condition pos:line="491" pos:column="23">(<expr><name pos:line="491" pos:column="24">null</name> <op:operator pos:line="491" pos:column="29">!=</op:operator> <name pos:line="491" pos:column="32">control</name></expr>)</condition><then pos:line="491" pos:column="40"> <block pos:line="491" pos:column="41">{
                        <expr_stmt><expr><call><name><name pos:line="492" pos:column="25">control</name><op:operator pos:line="492" pos:column="32">.</op:operator><name pos:line="492" pos:column="33">Dispatcher</name><op:operator pos:line="492" pos:column="43">.</op:operator><name pos:line="492" pos:column="44">BeginInvoke</name></name><argument_list pos:line="492" pos:column="55">(<argument><expr><call pos:line="492" pos:column="56">(<name pos:line="492" pos:column="57">Action</name>) <argument_list pos:line="492" pos:column="65">(<argument><expr><lambda><parameter_list pos:line="492" pos:column="66">()</parameter_list> <op:operator pos:line="492" pos:column="69">=&gt;</op:operator> <call><name><name pos:line="492" pos:column="72">control</name><op:operator pos:line="492" pos:column="79">.</op:operator><name pos:line="492" pos:column="80">ShowProgressBar</name></name><argument_list pos:line="492" pos:column="95">(<argument><expr><name pos:line="492" pos:column="96">show</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block> <catch pos:line="494" pos:column="19">catch<parameter_list pos:line="494" pos:column="24">(<param><decl><type><name pos:line="494" pos:column="25">TargetInvocationException</name></type> <name pos:line="494" pos:column="51">e</name></decl></param>)</parameter_list> <block pos:line="494" pos:column="54">{
                    <expr_stmt><expr><call><name><name pos:line="495" pos:column="21">FileLogger</name><op:operator pos:line="495" pos:column="31">.</op:operator><name pos:line="495" pos:column="32">DefaultLogger</name><op:operator pos:line="495" pos:column="45">.</op:operator><name pos:line="495" pos:column="46">Error</name></name><argument_list pos:line="495" pos:column="51">(<argument><expr><name pos:line="495" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="500" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="501" pos:column="9">/// Respond to solution opening.</comment>
        <comment type="line" pos:line="502" pos:column="9">/// Still use Sando's SolutionMonitorFactory because Sando's SolutionMonitorFactory has too much indexer code which is specific with Sando.</comment>
        <comment type="line" pos:line="503" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="504" pos:column="9">private</specifier> <name pos:line="504" pos:column="17">void</name></type> <name pos:line="504" pos:column="22">RespondToSolutionOpened</name><parameter_list pos:line="504" pos:column="45">(<param><decl><type><name pos:line="504" pos:column="46">object</name></type> <name pos:line="504" pos:column="53">sender</name></decl></param>, <param><decl><type><name pos:line="504" pos:column="61">DoWorkEventArgs</name></type> <name pos:line="504" pos:column="77">ee</name></decl></param>)</parameter_list>
        <block pos:line="505" pos:column="9">{
            <try pos:line="506" pos:column="13">try
            <block pos:line="507" pos:column="13">{
                <expr_stmt><expr><name pos:line="508" pos:column="17">updatedForThisSolution</name> <op:operator pos:line="508" pos:column="40">=</op:operator> <lit:literal type="boolean" pos:line="508" pos:column="42">false</lit:literal></expr>;</expr_stmt>
                <comment type="line" pos:line="509" pos:column="17">//TODO if solution is reopen - the guid should be read from file - future change</comment>
                <decl_stmt><decl><type><name pos:line="510" pos:column="17">var</name></type> <name pos:line="510" pos:column="21">solutionId</name> <init pos:line="510" pos:column="32">= <expr><call><name><name pos:line="510" pos:column="34">Guid</name><op:operator pos:line="510" pos:column="38">.</op:operator><name pos:line="510" pos:column="39">NewGuid</name></name><argument_list pos:line="510" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="511" pos:column="17">var</name></type> <name pos:line="511" pos:column="21">openSolution</name> <init pos:line="511" pos:column="34">= <expr><call><name><name pos:line="511" pos:column="36">ServiceLocator</name><op:operator pos:line="511" pos:column="50">.</op:operator><name><name pos:line="511" pos:column="51">Resolve</name><argument_list pos:line="511" pos:column="58">&lt;<argument><name pos:line="511" pos:column="59">DTE2</name></argument>&gt;</argument_list></name></name><argument_list pos:line="511" pos:column="64">()</argument_list></call><op:operator pos:line="511" pos:column="66">.</op:operator><name pos:line="511" pos:column="67">Solution</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="512" pos:column="17">var</name></type> <name pos:line="512" pos:column="21">solutionPath</name> <init pos:line="512" pos:column="34">= <expr><name><name pos:line="512" pos:column="36">openSolution</name><op:operator pos:line="512" pos:column="48">.</op:operator><name pos:line="512" pos:column="49">FileName</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="513" pos:column="17">var</name></type> <name pos:line="513" pos:column="21">key</name> <init pos:line="513" pos:column="25">= <expr><op:operator pos:line="513" pos:column="27">new</op:operator> <call><name pos:line="513" pos:column="31">SolutionKey</name><argument_list pos:line="513" pos:column="42">(<argument><expr><name pos:line="513" pos:column="43">solutionId</name></expr></argument>, <argument><expr><name pos:line="513" pos:column="55">solutionPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>              
                <expr_stmt><expr><call><name><name pos:line="514" pos:column="17">ServiceLocator</name><op:operator pos:line="514" pos:column="31">.</op:operator><name pos:line="514" pos:column="32">RegisterInstance</name></name><argument_list pos:line="514" pos:column="48">(<argument><expr><name pos:line="514" pos:column="49">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name pos:line="516" pos:column="17">var</name></type> <name pos:line="516" pos:column="21">sandoOptions</name> <init pos:line="516" pos:column="34">= <expr><call><name><name pos:line="516" pos:column="36">ServiceLocator</name><op:operator pos:line="516" pos:column="50">.</op:operator><name><name pos:line="516" pos:column="51">Resolve</name><argument_list pos:line="516" pos:column="58">&lt;<argument><name pos:line="516" pos:column="59">ISandoOptionsProvider</name></argument>&gt;</argument_list></name></name><argument_list pos:line="516" pos:column="81">()</argument_list></call><op:operator pos:line="516" pos:column="83">.</op:operator><call><name pos:line="516" pos:column="84">GetSandoOptions</name><argument_list pos:line="516" pos:column="99">()</argument_list></call></expr></init></decl>;</decl_stmt>                
                <decl_stmt><decl><type><name pos:line="517" pos:column="17">bool</name></type> <name pos:line="517" pos:column="22">isIndexRecreationRequired</name> <init pos:line="517" pos:column="48">= <expr><call><name><name pos:line="517" pos:column="50">IndexStateManager</name><op:operator pos:line="517" pos:column="67">.</op:operator><name pos:line="517" pos:column="68">IsIndexRecreationRequired</name></name><argument_list pos:line="517" pos:column="93">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name pos:line="518" pos:column="17">isIndexRecreationRequired</name> <op:operator pos:line="518" pos:column="43">=</op:operator> <name pos:line="518" pos:column="45">isIndexRecreationRequired</name> <op:operator pos:line="518" pos:column="71">||</op:operator> <op:operator pos:line="518" pos:column="74">!</op:operator><call><name><name pos:line="518" pos:column="75">PathManager</name><op:operator pos:line="518" pos:column="86">.</op:operator><name pos:line="518" pos:column="87">Instance</name><op:operator pos:line="518" pos:column="95">.</op:operator><name pos:line="518" pos:column="96">IndexPathExists</name></name><argument_list pos:line="518" pos:column="111">(<argument><expr><name pos:line="518" pos:column="112">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                
                <expr_stmt><expr><call><name><name pos:line="520" pos:column="17">ServiceLocator</name><op:operator pos:line="520" pos:column="31">.</op:operator><name pos:line="520" pos:column="32">RegisterInstance</name></name><argument_list pos:line="520" pos:column="48">(<argument><expr><op:operator pos:line="520" pos:column="49">new</op:operator> <call><name pos:line="520" pos:column="53">IndexFilterManager</name><argument_list pos:line="520" pos:column="71">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>                

                <expr_stmt><expr><call><name><name pos:line="522" pos:column="17">ServiceLocator</name><op:operator pos:line="522" pos:column="31">.</op:operator><name><name pos:line="522" pos:column="32">RegisterInstance</name><argument_list pos:line="522" pos:column="48">&lt;<argument><name pos:line="522" pos:column="49">Analyzer</name></argument>&gt;</argument_list></name></name><argument_list pos:line="522" pos:column="58">(<argument><expr><call><name pos:line="522" pos:column="59">GetAnalyzer</name><argument_list pos:line="522" pos:column="70">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="523" pos:column="17">SrcMLArchiveEventsHandlers</name></type> <name pos:line="523" pos:column="44">srcMLArchiveEventsHandlers</name> <init pos:line="523" pos:column="71">= <expr><call><name><name pos:line="523" pos:column="73">ServiceLocator</name><op:operator pos:line="523" pos:column="87">.</op:operator><name><name pos:line="523" pos:column="88">Resolve</name><argument_list pos:line="523" pos:column="95">&lt;<argument><name pos:line="523" pos:column="96">SrcMLArchiveEventsHandlers</name></argument>&gt;</argument_list></name></name><argument_list pos:line="523" pos:column="123">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="524" pos:column="17">var</name></type> <name pos:line="524" pos:column="21">currentIndexer</name> <init pos:line="524" pos:column="36">= <expr><op:operator pos:line="524" pos:column="38">new</op:operator> <call><name pos:line="524" pos:column="42">DocumentIndexer</name><argument_list pos:line="524" pos:column="57">(<argument><expr><name pos:line="524" pos:column="58">srcMLArchiveEventsHandlers</name></expr></argument>, <argument><expr><call><name><name pos:line="524" pos:column="86">TimeSpan</name><op:operator pos:line="524" pos:column="94">.</op:operator><name pos:line="524" pos:column="95">FromSeconds</name></name><argument_list pos:line="524" pos:column="106">(<argument><expr><lit:literal type="number" pos:line="524" pos:column="107">10</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="524" pos:column="112">TimeSpan</name><op:operator pos:line="524" pos:column="120">.</op:operator><name pos:line="524" pos:column="121">FromSeconds</name></name><argument_list pos:line="524" pos:column="132">(<argument><expr><lit:literal type="number" pos:line="524" pos:column="133">10</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="525" pos:column="17">ServiceLocator</name><op:operator pos:line="525" pos:column="31">.</op:operator><name pos:line="525" pos:column="32">RegisterInstance</name></name><argument_list pos:line="525" pos:column="48">(<argument><expr><name pos:line="525" pos:column="49">currentIndexer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name pos:line="527" pos:column="17">ServiceLocator</name><op:operator pos:line="527" pos:column="31">.</op:operator><name pos:line="527" pos:column="32">RegisterInstance</name></name><argument_list pos:line="527" pos:column="48">(<argument><expr><op:operator pos:line="527" pos:column="49">new</op:operator> <call><name pos:line="527" pos:column="53">IndexUpdateManager</name><argument_list pos:line="527" pos:column="71">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if pos:line="529" pos:column="17">if <condition pos:line="529" pos:column="20">(<expr><name pos:line="529" pos:column="21">isIndexRecreationRequired</name></expr>)</condition><then pos:line="529" pos:column="47">
                <block pos:line="530" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="531" pos:column="21">currentIndexer</name><op:operator pos:line="531" pos:column="35">.</op:operator><name pos:line="531" pos:column="36">ClearIndex</name></name><argument_list pos:line="531" pos:column="46">()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <expr_stmt><expr><call><name><name pos:line="534" pos:column="17">ServiceLocator</name><op:operator pos:line="534" pos:column="31">.</op:operator><name><name pos:line="534" pos:column="32">Resolve</name><argument_list pos:line="534" pos:column="39">&lt;<argument><name pos:line="534" pos:column="40">InitialIndexingWatcher</name></argument>&gt;</argument_list></name></name><argument_list pos:line="534" pos:column="63">()</argument_list></call><op:operator pos:line="534" pos:column="65">.</op:operator><call><name pos:line="534" pos:column="66">InitialIndexingStarted</name><argument_list pos:line="534" pos:column="88">()</argument_list></call></expr>;</expr_stmt>

                <comment type="line" pos:line="536" pos:column="17">// JZ: SrcMLService Integration</comment>
                <comment type="line" pos:line="537" pos:column="17">// Get the SrcML Service.</comment>
                <expr_stmt><expr><name pos:line="538" pos:column="17">srcMLService</name> <op:operator pos:line="538" pos:column="30">=</op:operator> <call><name pos:line="538" pos:column="32">GetService</name><argument_list pos:line="538" pos:column="42">(<argument><expr><call><name pos:line="538" pos:column="43">typeof</name><argument_list pos:line="538" pos:column="49">(<argument><expr><name pos:line="538" pos:column="50">SSrcMLGlobalService</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="538" pos:column="72">as</op:operator> <name pos:line="538" pos:column="75">ISrcMLGlobalService</name></expr>;</expr_stmt>
                <if pos:line="539" pos:column="17">if<condition pos:line="539" pos:column="19">(<expr><name pos:line="539" pos:column="20">null</name> <op:operator pos:line="539" pos:column="25">==</op:operator> <name pos:line="539" pos:column="28">srcMLService</name></expr>)</condition><then pos:line="539" pos:column="41"> <block pos:line="539" pos:column="42">{
                    <throw pos:line="540" pos:column="21">throw <expr><op:operator pos:line="540" pos:column="27">new</op:operator> <call><name pos:line="540" pos:column="31">Exception</name><argument_list pos:line="540" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="540" pos:column="41">"Can not get the SrcML global service."</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then>
                <else pos:line="542" pos:column="17">else
                <block pos:line="543" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="544" pos:column="21">ServiceLocator</name><op:operator pos:line="544" pos:column="35">.</op:operator><name pos:line="544" pos:column="36">RegisterInstance</name></name><argument_list pos:line="544" pos:column="52">(<argument><expr><name pos:line="544" pos:column="53">srcMLService</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>                                               
                <comment type="line" pos:line="546" pos:column="17">// Register all types of events from the SrcML Service.</comment>
                
                <if pos:line="548" pos:column="17">if <condition pos:line="548" pos:column="20">(<expr><op:operator pos:line="548" pos:column="21">!</op:operator><name pos:line="548" pos:column="22">SetupHandlers</name></expr>)</condition><then pos:line="548" pos:column="36">
                <block pos:line="549" pos:column="17">{
                    <expr_stmt><expr><name pos:line="550" pos:column="21">SetupHandlers</name> <op:operator pos:line="550" pos:column="35">=</op:operator> <lit:literal type="boolean" pos:line="550" pos:column="37">true</lit:literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="551" pos:column="21">srcMLService</name><op:operator pos:line="551" pos:column="33">.</op:operator><name pos:line="551" pos:column="34">SourceFileChanged</name></name> <op:operator pos:line="551" pos:column="52">+=</op:operator> <name><name pos:line="551" pos:column="55">srcMLArchiveEventsHandlers</name><op:operator pos:line="551" pos:column="81">.</op:operator><name pos:line="551" pos:column="82">SourceFileChanged</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="552" pos:column="21">srcMLService</name><op:operator pos:line="552" pos:column="33">.</op:operator><name pos:line="552" pos:column="34">MonitoringStopped</name></name> <op:operator pos:line="552" pos:column="52">+=</op:operator> <name><name pos:line="552" pos:column="55">srcMLArchiveEventsHandlers</name><op:operator pos:line="552" pos:column="81">.</op:operator><name pos:line="552" pos:column="82">MonitoringStopped</name></name></expr>;</expr_stmt>
                }</block></then></if>

                <comment type="line" pos:line="555" pos:column="17">//This is done here because some extension points require data that isn't set until the solution is opened, e.g. the solution key or the srcml archive</comment>
                <comment type="line" pos:line="556" pos:column="17">//However, registration must happen before file monitoring begins below.</comment>
                <expr_stmt><expr><call><name pos:line="557" pos:column="17">RegisterExtensionPoints</name><argument_list pos:line="557" pos:column="40">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name pos:line="559" pos:column="17">SwumManager</name><op:operator pos:line="559" pos:column="28">.</op:operator><name pos:line="559" pos:column="29">Instance</name><op:operator pos:line="559" pos:column="37">.</op:operator><name pos:line="559" pos:column="38">Initialize</name></name><argument_list pos:line="559" pos:column="48">(<argument><expr><call><name><name pos:line="559" pos:column="49">PathManager</name><op:operator pos:line="559" pos:column="60">.</op:operator><name pos:line="559" pos:column="61">Instance</name><op:operator pos:line="559" pos:column="69">.</op:operator><name pos:line="559" pos:column="70">GetIndexPath</name></name><argument_list pos:line="559" pos:column="82">(<argument><expr><call><name><name pos:line="559" pos:column="83">ServiceLocator</name><op:operator pos:line="559" pos:column="97">.</op:operator><name><name pos:line="559" pos:column="98">Resolve</name><argument_list pos:line="559" pos:column="105">&lt;<argument><name pos:line="559" pos:column="106">SolutionKey</name></argument>&gt;</argument_list></name></name><argument_list pos:line="559" pos:column="118">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="559" pos:column="123">!</op:operator><name pos:line="559" pos:column="124">isIndexRecreationRequired</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line" pos:line="560" pos:column="17">//SwumManager.Instance.Archive = _srcMLArchive;</comment>

                <comment type="line" pos:line="562" pos:column="17">////XQ: for testing</comment>
                <comment type="line" pos:line="563" pos:column="17">//ISandoGlobalService sandoService = GetService(typeof(SSandoGlobalService)) as ISandoGlobalService;</comment>
                <comment type="line" pos:line="564" pos:column="17">//var res = sandoService.GetSearchResults("Monster");</comment>

                <comment type="line" pos:line="566" pos:column="17">// xige</comment>
                <decl_stmt><decl><type><name pos:line="567" pos:column="17">var</name></type> <name pos:line="567" pos:column="21">dictionary</name> <init pos:line="567" pos:column="32">= <expr><op:operator pos:line="567" pos:column="34">new</op:operator> <call><name pos:line="567" pos:column="38">DictionaryBasedSplitter</name><argument_list pos:line="567" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="568" pos:column="17">dictionary</name><op:operator pos:line="568" pos:column="27">.</op:operator><name pos:line="568" pos:column="28">Initialize</name></name><argument_list pos:line="568" pos:column="38">(<argument><expr><call><name><name pos:line="568" pos:column="39">PathManager</name><op:operator pos:line="568" pos:column="50">.</op:operator><name pos:line="568" pos:column="51">Instance</name><op:operator pos:line="568" pos:column="59">.</op:operator><name pos:line="568" pos:column="60">GetIndexPath</name></name><argument_list pos:line="568" pos:column="72">(<argument><expr><call><name><name pos:line="568" pos:column="73">ServiceLocator</name><op:operator pos:line="568" pos:column="87">.</op:operator><name><name pos:line="568" pos:column="88">Resolve</name><argument_list pos:line="568" pos:column="95">&lt;<argument><name pos:line="568" pos:column="96">SolutionKey</name></argument>&gt;</argument_list></name></name><argument_list pos:line="568" pos:column="108">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="569" pos:column="17">ServiceLocator</name><op:operator pos:line="569" pos:column="31">.</op:operator><name><name pos:line="569" pos:column="32">Resolve</name><argument_list pos:line="569" pos:column="39">&lt;<argument><name pos:line="569" pos:column="40">IndexUpdateManager</name></argument>&gt;</argument_list></name></name><argument_list pos:line="569" pos:column="59">()</argument_list></call><op:operator pos:line="569" pos:column="61">.</op:operator><name pos:line="569" pos:column="62">indexUpdated</name> <op:operator pos:line="569" pos:column="75">+=</op:operator> 
                    <name><name pos:line="570" pos:column="21">dictionary</name><op:operator pos:line="570" pos:column="31">.</op:operator><name pos:line="570" pos:column="32">UpdateProgramElement</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="571" pos:column="17">ServiceLocator</name><op:operator pos:line="571" pos:column="31">.</op:operator><name pos:line="571" pos:column="32">RegisterInstance</name></name><argument_list pos:line="571" pos:column="48">(<argument><expr><name pos:line="571" pos:column="49">dictionary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name pos:line="573" pos:column="17">var</name></type> <name pos:line="573" pos:column="21">reformer</name> <init pos:line="573" pos:column="30">= <expr><op:operator pos:line="573" pos:column="32">new</op:operator> <call><name pos:line="573" pos:column="36">QueryReformerManager</name><argument_list pos:line="573" pos:column="56">(<argument><expr><name pos:line="573" pos:column="57">dictionary</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="574" pos:column="17">reformer</name><op:operator pos:line="574" pos:column="25">.</op:operator><name pos:line="574" pos:column="26">Initialize</name></name><argument_list pos:line="574" pos:column="36">(<argument><expr><name pos:line="574" pos:column="37">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="575" pos:column="17">ServiceLocator</name><op:operator pos:line="575" pos:column="31">.</op:operator><name pos:line="575" pos:column="32">RegisterInstance</name></name><argument_list pos:line="575" pos:column="48">(<argument><expr><name pos:line="575" pos:column="49">reformer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name pos:line="577" pos:column="17">var</name></type> <name pos:line="577" pos:column="21">history</name> <init pos:line="577" pos:column="29">= <expr><op:operator pos:line="577" pos:column="31">new</op:operator> <call><name pos:line="577" pos:column="35">SearchHistory</name><argument_list pos:line="577" pos:column="48">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="578" pos:column="17">history</name><op:operator pos:line="578" pos:column="24">.</op:operator><name pos:line="578" pos:column="25">Initialize</name></name><argument_list pos:line="578" pos:column="35">(<argument><expr><call><name><name pos:line="578" pos:column="36">PathManager</name><op:operator pos:line="578" pos:column="47">.</op:operator><name pos:line="578" pos:column="48">Instance</name><op:operator pos:line="578" pos:column="56">.</op:operator><name pos:line="578" pos:column="57">GetIndexPath</name></name>
                    <argument_list pos:line="579" pos:column="21">(<argument><expr><call><name><name pos:line="579" pos:column="22">ServiceLocator</name><op:operator pos:line="579" pos:column="36">.</op:operator><name><name pos:line="579" pos:column="37">Resolve</name><argument_list pos:line="579" pos:column="44">&lt;<argument><name pos:line="579" pos:column="45">SolutionKey</name></argument>&gt;</argument_list></name></name><argument_list pos:line="579" pos:column="57">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="580" pos:column="17">ServiceLocator</name><op:operator pos:line="580" pos:column="31">.</op:operator><name pos:line="580" pos:column="32">RegisterInstance</name></name><argument_list pos:line="580" pos:column="48">(<argument><expr><name pos:line="580" pos:column="49">history</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                

                <comment type="line" pos:line="583" pos:column="17">// End of code changes</comment>

                <if pos:line="585" pos:column="17">if <condition pos:line="585" pos:column="20">(<expr><name><name pos:line="585" pos:column="21">sandoOptions</name><op:operator pos:line="585" pos:column="33">.</op:operator><name pos:line="585" pos:column="34">AllowDataCollectionLogging</name></name></expr>)</condition><then pos:line="585" pos:column="61">
                <block pos:line="586" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="587" pos:column="21">SandoLogManager</name><op:operator pos:line="587" pos:column="36">.</op:operator><name pos:line="587" pos:column="37">StartDataCollectionLogging</name></name><argument_list pos:line="587" pos:column="63">(<argument><expr><call><name><name pos:line="587" pos:column="64">PathManager</name><op:operator pos:line="587" pos:column="75">.</op:operator><name pos:line="587" pos:column="76">Instance</name><op:operator pos:line="587" pos:column="84">.</op:operator><name pos:line="587" pos:column="85">GetExtensionRoot</name></name><argument_list pos:line="587" pos:column="101">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="589" pos:column="17">else
                <block pos:line="590" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="591" pos:column="21">SandoLogManager</name><op:operator pos:line="591" pos:column="36">.</op:operator><name pos:line="591" pos:column="37">StopDataCollectionLogging</name></name><argument_list pos:line="591" pos:column="62">()</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
				<expr_stmt><expr><call><name><name pos:line="593" pos:column="33">LogEvents</name><op:operator pos:line="593" pos:column="42">.</op:operator><name pos:line="593" pos:column="43">SolutionOpened</name></name><argument_list pos:line="593" pos:column="57">(<argument><expr><name pos:line="593" pos:column="58">this</name></expr></argument>, <argument><expr><call><name><name pos:line="593" pos:column="64">Path</name><op:operator pos:line="593" pos:column="68">.</op:operator><name pos:line="593" pos:column="69">GetFileName</name></name><argument_list pos:line="593" pos:column="80">(<argument><expr><name pos:line="593" pos:column="81">solutionPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if pos:line="595" pos:column="17">if <condition pos:line="595" pos:column="20">(<expr><name pos:line="595" pos:column="21">isIndexRecreationRequired</name></expr>)</condition><then pos:line="595" pos:column="47">
                <block pos:line="596" pos:column="17">{
                    <comment type="line" pos:line="597" pos:column="21">//just recreate the whole index</comment>
                    <decl_stmt><decl><type><name pos:line="598" pos:column="21">var</name></type> <name pos:line="598" pos:column="25">indexingTask</name> <init pos:line="598" pos:column="38">= <expr><call><name><name pos:line="598" pos:column="40">System</name><op:operator pos:line="598" pos:column="46">.</op:operator><name pos:line="598" pos:column="47">Threading</name><op:operator pos:line="598" pos:column="56">.</op:operator><name pos:line="598" pos:column="57">Tasks</name><op:operator pos:line="598" pos:column="62">.</op:operator><name pos:line="598" pos:column="63">Task</name><op:operator pos:line="598" pos:column="67">.</op:operator><name pos:line="598" pos:column="68">Factory</name><op:operator pos:line="598" pos:column="75">.</op:operator><name pos:line="598" pos:column="76">StartNew</name></name><argument_list pos:line="598" pos:column="84">(<argument><expr><lambda><parameter_list pos:line="598" pos:column="85">()</parameter_list> <op:operator pos:line="598" pos:column="88">=&gt;</op:operator>
                        <block pos:line="599" pos:column="25">{
                            <decl_stmt><decl><type><name><name pos:line="600" pos:column="29">Collection</name><argument_list pos:line="600" pos:column="39">&lt;<argument><name pos:line="600" pos:column="40">string</name></argument>&gt;</argument_list></name></type> <name pos:line="600" pos:column="48">files</name> <init pos:line="600" pos:column="54">= <expr><name pos:line="600" pos:column="56">null</name></expr></init></decl>;</decl_stmt>
                            <while pos:line="601" pos:column="29">while <condition pos:line="601" pos:column="35">(<expr><name pos:line="601" pos:column="36">files</name> <op:operator pos:line="601" pos:column="42">==</op:operator> <name pos:line="601" pos:column="45">null</name></expr>)</condition>
                            <block pos:line="602" pos:column="29">{
                                <try pos:line="603" pos:column="33">try
                                <block pos:line="604" pos:column="33">{
                                    <expr_stmt><expr><name pos:line="605" pos:column="37">files</name> <op:operator pos:line="605" pos:column="43">=</op:operator> <call><name><name pos:line="605" pos:column="45">srcMLService</name><op:operator pos:line="605" pos:column="57">.</op:operator><name pos:line="605" pos:column="58">GetSrcMLArchive</name></name><argument_list pos:line="605" pos:column="73">()</argument_list></call><op:operator pos:line="605" pos:column="75">.</op:operator><call><name pos:line="605" pos:column="76">GetFiles</name><argument_list pos:line="605" pos:column="84">()</argument_list></call></expr>;</expr_stmt>                                    
                                }</block>
                                <catch pos:line="607" pos:column="33">catch <parameter_list pos:line="607" pos:column="39">(<param><decl><type><name pos:line="607" pos:column="40">NullReferenceException</name></type> <name pos:line="607" pos:column="63">ne</name></decl></param>)</parameter_list>
                                <block pos:line="608" pos:column="33">{
                                    <expr_stmt><expr><call><name><name pos:line="609" pos:column="37">System</name><op:operator pos:line="609" pos:column="43">.</op:operator><name pos:line="609" pos:column="44">Threading</name><op:operator pos:line="609" pos:column="53">.</op:operator><name pos:line="609" pos:column="54">Thread</name><op:operator pos:line="609" pos:column="60">.</op:operator><name pos:line="609" pos:column="61">Sleep</name></name><argument_list pos:line="609" pos:column="66">(<argument><expr><lit:literal type="number" pos:line="609" pos:column="67">3000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                }</block></catch></try>
                            }</block></while>                            
                            <foreach pos:line="612" pos:column="29">foreach (<init><decl><type><name pos:line="612" pos:column="38">var</name></type> <name pos:line="612" pos:column="42">file</name> <range pos:line="612" pos:column="47">in <expr><call><name><name pos:line="612" pos:column="50">srcMLService</name><op:operator pos:line="612" pos:column="62">.</op:operator><name pos:line="612" pos:column="63">GetSrcMLArchive</name></name><argument_list pos:line="612" pos:column="78">()</argument_list></call><op:operator pos:line="612" pos:column="80">.</op:operator><name pos:line="612" pos:column="81">FileUnits</name></expr></range></decl></init>)
                            <block pos:line="613" pos:column="29">{                                
                                <decl_stmt><decl><type><name pos:line="614" pos:column="33">var</name></type> <name pos:line="614" pos:column="37">fileName</name> <init pos:line="614" pos:column="46">= <expr><call><name><name pos:line="614" pos:column="48">ABB</name><op:operator pos:line="614" pos:column="51">.</op:operator><name pos:line="614" pos:column="52">SrcML</name><op:operator pos:line="614" pos:column="57">.</op:operator><name pos:line="614" pos:column="58">SrcMLElement</name><op:operator pos:line="614" pos:column="70">.</op:operator><name pos:line="614" pos:column="71">GetFileNameForUnit</name></name><argument_list pos:line="614" pos:column="89">(<argument><expr><name pos:line="614" pos:column="90">file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                <expr_stmt><expr><call><name><name pos:line="615" pos:column="33">srcMLArchiveEventsHandlers</name><op:operator pos:line="615" pos:column="59">.</op:operator><name pos:line="615" pos:column="60">SourceFileChanged</name></name><argument_list pos:line="615" pos:column="77">(<argument><expr><name pos:line="615" pos:column="78">srcMLService</name></expr></argument>, <argument><expr><op:operator pos:line="615" pos:column="92">new</op:operator> <call><name pos:line="615" pos:column="96">FileEventRaisedArgs</name><argument_list pos:line="615" pos:column="115">(<argument><expr><name><name pos:line="615" pos:column="116">FileEventType</name><op:operator pos:line="615" pos:column="129">.</op:operator><name pos:line="615" pos:column="130">FileAdded</name></name></expr></argument>, <argument><expr><name pos:line="615" pos:column="141">fileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></foreach>
                            <expr_stmt><expr><call><name><name pos:line="617" pos:column="29">srcMLArchiveEventsHandlers</name><op:operator pos:line="617" pos:column="55">.</op:operator><name pos:line="617" pos:column="56">WaitForIndexing</name></name><argument_list pos:line="617" pos:column="71">()</argument_list></call></expr>;</expr_stmt>
                        }</block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                }</block></then>
                <else pos:line="620" pos:column="17">else
                <block pos:line="621" pos:column="17">{
                    <comment type="line" pos:line="622" pos:column="21">//make sure you're not missing any files </comment>
                    <decl_stmt><decl><type><name pos:line="623" pos:column="21">var</name></type> <name pos:line="623" pos:column="25">indexingTask</name> <init pos:line="623" pos:column="38">= <expr><call><name><name pos:line="623" pos:column="40">System</name><op:operator pos:line="623" pos:column="46">.</op:operator><name pos:line="623" pos:column="47">Threading</name><op:operator pos:line="623" pos:column="56">.</op:operator><name pos:line="623" pos:column="57">Tasks</name><op:operator pos:line="623" pos:column="62">.</op:operator><name pos:line="623" pos:column="63">Task</name><op:operator pos:line="623" pos:column="67">.</op:operator><name pos:line="623" pos:column="68">Factory</name><op:operator pos:line="623" pos:column="75">.</op:operator><name pos:line="623" pos:column="76">StartNew</name></name><argument_list pos:line="623" pos:column="84">(<argument><expr><lambda><parameter_list pos:line="623" pos:column="85">()</parameter_list> <op:operator pos:line="623" pos:column="88">=&gt;</op:operator>
                    <block pos:line="624" pos:column="21">{
                        <decl_stmt><decl><type><name><name pos:line="625" pos:column="25">Collection</name><argument_list pos:line="625" pos:column="35">&lt;<argument><name pos:line="625" pos:column="36">string</name></argument>&gt;</argument_list></name></type> <name pos:line="625" pos:column="44">files</name> <init pos:line="625" pos:column="50">= <expr><name pos:line="625" pos:column="52">null</name></expr></init></decl>;</decl_stmt>
                        <while pos:line="626" pos:column="25">while <condition pos:line="626" pos:column="31">(<expr><name pos:line="626" pos:column="32">files</name> <op:operator pos:line="626" pos:column="38">==</op:operator> <name pos:line="626" pos:column="41">null</name></expr>)</condition>
                        <block pos:line="627" pos:column="25">{
                            <try pos:line="628" pos:column="29">try
                            <block pos:line="629" pos:column="29">{
                                <expr_stmt><expr><name pos:line="630" pos:column="33">files</name> <op:operator pos:line="630" pos:column="39">=</op:operator> <call><name><name pos:line="630" pos:column="41">srcMLService</name><op:operator pos:line="630" pos:column="53">.</op:operator><name pos:line="630" pos:column="54">GetSrcMLArchive</name></name><argument_list pos:line="630" pos:column="69">()</argument_list></call><op:operator pos:line="630" pos:column="71">.</op:operator><call><name pos:line="630" pos:column="72">GetFiles</name><argument_list pos:line="630" pos:column="80">()</argument_list></call></expr>;</expr_stmt>
                            }</block>
                            <catch pos:line="632" pos:column="29">catch <parameter_list pos:line="632" pos:column="35">(<param><decl><type><name pos:line="632" pos:column="36">NullReferenceException</name></type> <name pos:line="632" pos:column="59">ne</name></decl></param>)</parameter_list>
                            <block pos:line="633" pos:column="29">{
                                <expr_stmt><expr><call><name><name pos:line="634" pos:column="33">System</name><op:operator pos:line="634" pos:column="39">.</op:operator><name pos:line="634" pos:column="40">Threading</name><op:operator pos:line="634" pos:column="49">.</op:operator><name pos:line="634" pos:column="50">Thread</name><op:operator pos:line="634" pos:column="56">.</op:operator><name pos:line="634" pos:column="57">Sleep</name></name><argument_list pos:line="634" pos:column="62">(<argument><expr><lit:literal type="number" pos:line="634" pos:column="63">3000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></catch></try>
                        }</block></while>
                        <foreach pos:line="637" pos:column="25">foreach (<init><decl><type><name pos:line="637" pos:column="34">var</name></type> <name pos:line="637" pos:column="38">fileName</name> <range pos:line="637" pos:column="47">in <expr><call><name><name pos:line="637" pos:column="50">srcMLService</name><op:operator pos:line="637" pos:column="62">.</op:operator><name pos:line="637" pos:column="63">GetSrcMLArchive</name></name><argument_list pos:line="637" pos:column="78">()</argument_list></call><op:operator pos:line="637" pos:column="80">.</op:operator><call><name pos:line="637" pos:column="81">GetFiles</name><argument_list pos:line="637" pos:column="89">()</argument_list></call></expr></range></decl></init>)
                        <block pos:line="638" pos:column="25">{                            
                            <expr_stmt><expr><call><name><name pos:line="639" pos:column="29">srcMLArchiveEventsHandlers</name><op:operator pos:line="639" pos:column="55">.</op:operator><name pos:line="639" pos:column="56">SourceFileChanged</name></name><argument_list pos:line="639" pos:column="73">(<argument><expr><name pos:line="639" pos:column="74">srcMLService</name></expr></argument>, <argument><expr><op:operator pos:line="639" pos:column="88">new</op:operator> <call><name pos:line="639" pos:column="92">FileEventRaisedArgs</name><argument_list pos:line="639" pos:column="111">(<argument><expr><name><name pos:line="639" pos:column="112">FileEventType</name><op:operator pos:line="639" pos:column="125">.</op:operator><name pos:line="639" pos:column="126">FileRenamed</name></name></expr></argument>, <argument><expr><name pos:line="639" pos:column="139">fileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></foreach>
                        <expr_stmt><expr><call><name><name pos:line="641" pos:column="25">srcMLArchiveEventsHandlers</name><op:operator pos:line="641" pos:column="51">.</op:operator><name pos:line="641" pos:column="52">WaitForIndexing</name></name><argument_list pos:line="641" pos:column="67">()</argument_list></call></expr>;</expr_stmt>
                    }</block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>                    
                }</block></else></if>                
            }</block>
            <catch pos:line="645" pos:column="13">catch <parameter_list pos:line="645" pos:column="19">(<param><decl><type><name pos:line="645" pos:column="20">Exception</name></type> <name pos:line="645" pos:column="30">e</name></decl></param>)</parameter_list>
            <block pos:line="646" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="647" pos:column="17">LogEvents</name><op:operator pos:line="647" pos:column="26">.</op:operator><name pos:line="647" pos:column="27">UIRespondToSolutionOpeningError</name></name><argument_list pos:line="647" pos:column="58">(<argument><expr><name pos:line="647" pos:column="59">this</name></expr></argument>, <argument><expr><name pos:line="647" pos:column="65">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
            <decl_stmt><decl><type><name pos:line="649" pos:column="13">var</name></type> <name pos:line="649" pos:column="17">updateListedFoldersTask</name> <init pos:line="649" pos:column="41">= <expr><call><name><name pos:line="649" pos:column="43">System</name><op:operator pos:line="649" pos:column="49">.</op:operator><name pos:line="649" pos:column="50">Threading</name><op:operator pos:line="649" pos:column="59">.</op:operator><name pos:line="649" pos:column="60">Tasks</name><op:operator pos:line="649" pos:column="65">.</op:operator><name pos:line="649" pos:column="66">Task</name><op:operator pos:line="649" pos:column="70">.</op:operator><name pos:line="649" pos:column="71">Factory</name><op:operator pos:line="649" pos:column="78">.</op:operator><name pos:line="649" pos:column="79">StartNew</name></name><argument_list pos:line="649" pos:column="87">(<argument><expr><lambda><parameter_list pos:line="649" pos:column="88">()</parameter_list> <op:operator pos:line="649" pos:column="91">=&gt;</op:operator>
            <block pos:line="650" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="651" pos:column="17">bool</name></type> <name pos:line="651" pos:column="22">done</name> <init pos:line="651" pos:column="27">= <expr><lit:literal type="boolean" pos:line="651" pos:column="29">false</lit:literal></expr></init></decl>;</decl_stmt>
                <while pos:line="652" pos:column="17">while <condition pos:line="652" pos:column="23">(<expr><op:operator pos:line="652" pos:column="24">!</op:operator><name pos:line="652" pos:column="25">done</name></expr>)</condition>
                <block pos:line="653" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="654" pos:column="21">System</name><op:operator pos:line="654" pos:column="27">.</op:operator><name pos:line="654" pos:column="28">Threading</name><op:operator pos:line="654" pos:column="37">.</op:operator><name pos:line="654" pos:column="38">Thread</name><op:operator pos:line="654" pos:column="44">.</op:operator><name pos:line="654" pos:column="45">Sleep</name></name><argument_list pos:line="654" pos:column="50">(<argument><expr><lit:literal type="number" pos:line="654" pos:column="51">2000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if pos:line="655" pos:column="21">if <condition pos:line="655" pos:column="24">(<expr><name pos:line="655" pos:column="25">srcMLService</name> <op:operator pos:line="655" pos:column="38">!=</op:operator> <name pos:line="655" pos:column="41">null</name></expr>)</condition><then pos:line="655" pos:column="46">
                    <block pos:line="656" pos:column="21">{
                        <if pos:line="657" pos:column="25">if <condition pos:line="657" pos:column="28">(<expr><name><name pos:line="657" pos:column="29">srcMLService</name><op:operator pos:line="657" pos:column="41">.</op:operator><name pos:line="657" pos:column="42">MonitoredDirectories</name></name> <op:operator pos:line="657" pos:column="63">!=</op:operator> <name pos:line="657" pos:column="66">null</name></expr>)</condition><then pos:line="657" pos:column="71">
                        <block pos:line="658" pos:column="25">{
                            <expr_stmt><expr><call><name pos:line="659" pos:column="29">UpdateIndexingFilesList</name><argument_list pos:line="659" pos:column="52">()</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name pos:line="660" pos:column="29">done</name> <op:operator pos:line="660" pos:column="34">=</op:operator> <lit:literal type="boolean" pos:line="660" pos:column="36">true</lit:literal></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></then></if>
                }</block></while>
            }</block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        }</block></function>

        <decl_stmt><decl><type><name pos:line="667" pos:column="9">Action</name></type> <name pos:line="667" pos:column="16">progressAction</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="668" pos:column="9">private</specifier> <name pos:line="668" pos:column="17">bool</name></type> <name pos:line="668" pos:column="22">updatedForThisSolution</name> <init pos:line="668" pos:column="45">= <expr><lit:literal type="boolean" pos:line="668" pos:column="47">false</lit:literal></expr></init></decl>;</decl_stmt>
 
        <function><type><specifier pos:line="670" pos:column="9">private</specifier> <name pos:line="670" pos:column="17">Analyzer</name></type> <name pos:line="670" pos:column="26">GetAnalyzer</name><parameter_list pos:line="670" pos:column="37">()</parameter_list>
        <block pos:line="671" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="672" pos:column="13">PerFieldAnalyzerWrapper</name></type> <name pos:line="672" pos:column="37">analyzer</name> <init pos:line="672" pos:column="46">= <expr><op:operator pos:line="672" pos:column="48">new</op:operator> <call><name pos:line="672" pos:column="52">PerFieldAnalyzerWrapper</name><argument_list pos:line="672" pos:column="75">(<argument><expr><op:operator pos:line="672" pos:column="76">new</op:operator> <call><name pos:line="672" pos:column="80">SnowballAnalyzer</name><argument_list pos:line="672" pos:column="96">(<argument><expr><lit:literal type="string" pos:line="672" pos:column="97">"English"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="673" pos:column="13">analyzer</name><op:operator pos:line="673" pos:column="21">.</op:operator><name pos:line="673" pos:column="22">AddAnalyzer</name></name><argument_list pos:line="673" pos:column="33">(<argument><expr><call><name><name pos:line="673" pos:column="34">SandoField</name><op:operator pos:line="673" pos:column="44">.</op:operator><name pos:line="673" pos:column="45">Source</name><op:operator pos:line="673" pos:column="51">.</op:operator><name pos:line="673" pos:column="52">ToString</name></name><argument_list pos:line="673" pos:column="60">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="673" pos:column="64">new</op:operator> <call><name pos:line="673" pos:column="68">KeywordAnalyzer</name><argument_list pos:line="673" pos:column="83">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="674" pos:column="13">analyzer</name><op:operator pos:line="674" pos:column="21">.</op:operator><name pos:line="674" pos:column="22">AddAnalyzer</name></name><argument_list pos:line="674" pos:column="33">(<argument><expr><call><name><name pos:line="674" pos:column="34">SandoField</name><op:operator pos:line="674" pos:column="44">.</op:operator><name pos:line="674" pos:column="45">AccessLevel</name><op:operator pos:line="674" pos:column="56">.</op:operator><name pos:line="674" pos:column="57">ToString</name></name><argument_list pos:line="674" pos:column="65">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="674" pos:column="69">new</op:operator> <call><name pos:line="674" pos:column="73">KeywordAnalyzer</name><argument_list pos:line="674" pos:column="88">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="675" pos:column="13">analyzer</name><op:operator pos:line="675" pos:column="21">.</op:operator><name pos:line="675" pos:column="22">AddAnalyzer</name></name><argument_list pos:line="675" pos:column="33">(<argument><expr><call><name><name pos:line="675" pos:column="34">SandoField</name><op:operator pos:line="675" pos:column="44">.</op:operator><name pos:line="675" pos:column="45">ProgramElementType</name><op:operator pos:line="675" pos:column="63">.</op:operator><name pos:line="675" pos:column="64">ToString</name></name><argument_list pos:line="675" pos:column="72">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="675" pos:column="76">new</op:operator> <call><name pos:line="675" pos:column="80">KeywordAnalyzer</name><argument_list pos:line="675" pos:column="95">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="676" pos:column="13">return <expr><name pos:line="676" pos:column="20">analyzer</name></expr>;</return>
        }</block></function>  

        <cpp:endregion pos:line="679" pos:column="9">#<cpp:directive pos:line="679" pos:column="10">endregion</cpp:directive></cpp:endregion>




        <function><type><specifier pos:line="684" pos:column="9">private</specifier> <name pos:line="684" pos:column="17">void</name></type> <name pos:line="684" pos:column="22">SetupDependencyInjectionObjects</name><parameter_list pos:line="684" pos:column="53">()</parameter_list>
        <block pos:line="685" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="686" pos:column="13">ServiceLocator</name><op:operator pos:line="686" pos:column="27">.</op:operator><name pos:line="686" pos:column="28">RegisterInstance</name></name><argument_list pos:line="686" pos:column="44">(<argument><expr><call><name pos:line="686" pos:column="45">GetService</name><argument_list pos:line="686" pos:column="55">(<argument><expr><call><name pos:line="686" pos:column="56">typeof</name> <argument_list pos:line="686" pos:column="63">(<argument><expr><name pos:line="686" pos:column="64">DTE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="686" pos:column="70">as</op:operator> <name pos:line="686" pos:column="73">DTE2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="687" pos:column="13">ServiceLocator</name><op:operator pos:line="687" pos:column="27">.</op:operator><name pos:line="687" pos:column="28">RegisterInstance</name></name><argument_list pos:line="687" pos:column="44">(<argument><expr><name pos:line="687" pos:column="45">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="688" pos:column="13">ServiceLocator</name><op:operator pos:line="688" pos:column="27">.</op:operator><name pos:line="688" pos:column="28">RegisterInstance</name></name><argument_list pos:line="688" pos:column="44">(<argument><expr><op:operator pos:line="688" pos:column="45">new</op:operator> <call><name pos:line="688" pos:column="49">ViewManager</name><argument_list pos:line="688" pos:column="60">(<argument><expr><name pos:line="688" pos:column="61">this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="689" pos:column="13">ServiceLocator</name><op:operator pos:line="689" pos:column="27">.</op:operator><name><name pos:line="689" pos:column="28">RegisterInstance</name><argument_list pos:line="689" pos:column="44">&lt;<argument><name pos:line="689" pos:column="45">ISandoOptionsProvider</name></argument>&gt;</argument_list></name></name><argument_list pos:line="689" pos:column="67">(<argument><expr><op:operator pos:line="689" pos:column="68">new</op:operator> <call><name pos:line="689" pos:column="72">SandoOptionsProvider</name><argument_list pos:line="689" pos:column="92">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="690" pos:column="13">ServiceLocator</name><op:operator pos:line="690" pos:column="27">.</op:operator><name pos:line="690" pos:column="28">RegisterInstance</name></name><argument_list pos:line="690" pos:column="44">(<argument><expr><op:operator pos:line="690" pos:column="45">new</op:operator> <call><name pos:line="690" pos:column="49">SrcMLArchiveEventsHandlers</name><argument_list pos:line="690" pos:column="75">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="691" pos:column="13">ServiceLocator</name><op:operator pos:line="691" pos:column="27">.</op:operator><name pos:line="691" pos:column="28">RegisterInstance</name></name><argument_list pos:line="691" pos:column="44">(<argument><expr><op:operator pos:line="691" pos:column="45">new</op:operator> <call><name pos:line="691" pos:column="49">InitialIndexingWatcher</name><argument_list pos:line="691" pos:column="71">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="692" pos:column="13">ServiceLocator</name><op:operator pos:line="692" pos:column="27">.</op:operator><name><name pos:line="692" pos:column="28">RegisterType</name><argument_list pos:line="692" pos:column="40">&lt;<argument><name pos:line="692" pos:column="41">IIndexerSearcher</name></argument>, <argument><name pos:line="692" pos:column="59">IndexerSearcher</name></argument>&gt;</argument_list></name></name><argument_list pos:line="692" pos:column="75">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
