<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Parser\Parser.UnitTests\CppParserTest.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">ComponentModel</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Threading</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">NUnit</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">Framework</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Sando</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">ExtensionContracts</name><op:operator pos:line="6" pos:column="31">.</op:operator><name pos:line="6" pos:column="32">ProgramElementContracts</name></name>;</using>
<using pos:line="7" pos:column="1">using <name pos:line="7" pos:column="7">UnitTestHelpers</name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">System</name><op:operator pos:line="8" pos:column="13">.</op:operator><name pos:line="8" pos:column="14">Diagnostics</name></name>;</using>

<namespace pos:line="10" pos:column="1">namespace <name><name pos:line="10" pos:column="11">Sando</name><op:operator pos:line="10" pos:column="16">.</op:operator><name pos:line="10" pos:column="17">Parser</name><op:operator pos:line="10" pos:column="23">.</op:operator><name pos:line="10" pos:column="24">UnitTests</name></name>
<block pos:line="11" pos:column="1">{
	<class><attribute pos:line="12" pos:column="9">[<expr><name pos:line="12" pos:column="10">TestFixture</name></expr>]</attribute>
	<specifier pos:line="13" pos:column="9">public</specifier> class <name pos:line="13" pos:column="22">CppParserTest</name> <block pos:line="13" pos:column="36">{
	    <decl_stmt><decl><type><specifier pos:line="14" pos:column="13">private</specifier> <name><name pos:line="14" pos:column="21">ABB</name><op:operator pos:line="14" pos:column="24">.</op:operator><name pos:line="14" pos:column="25">SrcML</name><op:operator pos:line="14" pos:column="30">.</op:operator><name pos:line="14" pos:column="31">SrcMLGenerator</name></name></type> <name pos:line="14" pos:column="46">generator</name></decl>;</decl_stmt>

		<function><type><attribute pos:line="16" pos:column="17">[<expr><name pos:line="16" pos:column="18">TestFixtureSetUp</name></expr>]</attribute>
		<specifier pos:line="17" pos:column="17">public</specifier> <name pos:line="17" pos:column="24">void</name></type> <name pos:line="17" pos:column="29">FixtureSetUp</name><parameter_list pos:line="17" pos:column="41">()</parameter_list> <block pos:line="17" pos:column="44">{
		    <expr_stmt><expr><name pos:line="18" pos:column="21">generator</name> <op:operator pos:line="18" pos:column="31">=</op:operator> <op:operator pos:line="18" pos:column="33">new</op:operator> <call><name><name pos:line="18" pos:column="37">ABB</name><op:operator pos:line="18" pos:column="40">.</op:operator><name pos:line="18" pos:column="41">SrcML</name><op:operator pos:line="18" pos:column="46">.</op:operator><name pos:line="18" pos:column="47">SrcMLGenerator</name></name><argument_list pos:line="18" pos:column="61">(<argument><expr><name><name pos:line="18" pos:column="62">TestUtils</name><op:operator pos:line="18" pos:column="71">.</op:operator><name pos:line="18" pos:column="72">SrcMLDirectory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

        
        <function><type><attribute pos:line="22" pos:column="9">[<expr><name pos:line="22" pos:column="10">Test</name></expr>]</attribute>
		<specifier pos:line="23" pos:column="17">public</specifier> <name pos:line="23" pos:column="24">void</name></type> <name pos:line="23" pos:column="29">ParseCPPSourceTest</name><parameter_list pos:line="23" pos:column="47">()</parameter_list>
		<block pos:line="24" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="25" pos:column="25">bool</name></type> <name pos:line="25" pos:column="30">seenGetTimeMethod</name> <init pos:line="25" pos:column="48">= <expr><lit:literal type="boolean" pos:line="25" pos:column="50">false</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="26" pos:column="25">int</name></type> <name pos:line="26" pos:column="29">numMethods</name> <init pos:line="26" pos:column="40">= <expr><lit:literal type="number" pos:line="26" pos:column="42">0</lit:literal></expr></init></decl>;</decl_stmt>
			<comment type="line" pos:line="27" pos:column="25">///////string sourceFile = @"..\..\Parser\Parser.UnitTests\TestFiles\Event.CPP.txt";</comment>
            <decl_stmt><decl><type><name pos:line="28" pos:column="13">string</name></type> <name pos:line="28" pos:column="20">sourceFile</name> <init pos:line="28" pos:column="31">= <expr><lit:literal type="string" pos:line="28" pos:column="33">@"TestFiles\Event.cpp"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="29" pos:column="13">var</name></type> <name pos:line="29" pos:column="17">parser</name> <init pos:line="29" pos:column="24">= <expr><op:operator pos:line="29" pos:column="26">new</op:operator> <call><name pos:line="29" pos:column="30">SrcMLCppParser</name><argument_list pos:line="29" pos:column="44">(<argument><expr><name pos:line="29" pos:column="45">generator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="30" pos:column="25">var</name></type> <name pos:line="30" pos:column="29">elements</name> <init pos:line="30" pos:column="38">= <expr><call><name><name pos:line="30" pos:column="40">parser</name><op:operator pos:line="30" pos:column="46">.</op:operator><name pos:line="30" pos:column="47">Parse</name></name><argument_list pos:line="30" pos:column="52">(<argument><expr><name pos:line="30" pos:column="53">sourceFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="31" pos:column="25">Assert</name><op:operator pos:line="31" pos:column="31">.</op:operator><name pos:line="31" pos:column="32">IsNotNull</name></name><argument_list pos:line="31" pos:column="41">(<argument><expr><name pos:line="31" pos:column="42">elements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="32" pos:column="25">Assert</name><op:operator pos:line="32" pos:column="31">.</op:operator><name pos:line="32" pos:column="32">AreEqual</name></name><argument_list pos:line="32" pos:column="40">(<argument><expr><name><name pos:line="32" pos:column="41">elements</name><op:operator pos:line="32" pos:column="49">.</op:operator><name pos:line="32" pos:column="50">Count</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="32" pos:column="57">6</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:line="33" pos:column="13">///////CheckParseOfEventFile(parser, sourceFile, elements);</comment>
		}</block></function>


        <function><type><attribute pos:line="37" pos:column="9">[<expr><name pos:line="37" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="38" pos:column="9">public</specifier> <name pos:line="38" pos:column="16">void</name></type> <name pos:line="38" pos:column="21">ParseCPPSourceWithErrorsTest</name><parameter_list pos:line="38" pos:column="49">()</parameter_list>
        <block pos:line="39" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="40" pos:column="13">bool</name></type> <name pos:line="40" pos:column="18">seenGetTimeMethod</name> <init pos:line="40" pos:column="36">= <expr><lit:literal type="boolean" pos:line="40" pos:column="38">false</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="41" pos:column="13">int</name></type> <name pos:line="41" pos:column="17">numMethods</name> <init pos:line="41" pos:column="28">= <expr><lit:literal type="number" pos:line="41" pos:column="30">0</lit:literal></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="42" pos:column="13">///////string sourceFile = @"..\..\Parser\Parser.UnitTests\TestFiles\Event.CPP.txt";</comment>
            <decl_stmt><decl><type><name pos:line="43" pos:column="13">string</name></type> <name pos:line="43" pos:column="20">sourceFile</name> <init pos:line="43" pos:column="31">= <expr><lit:literal type="string" pos:line="43" pos:column="33">@"TestFiles\EventWithErrorInIt.cpp"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="44" pos:column="13">var</name></type> <name pos:line="44" pos:column="17">parser</name> <init pos:line="44" pos:column="24">= <expr><op:operator pos:line="44" pos:column="26">new</op:operator> <call><name pos:line="44" pos:column="30">SrcMLCppParser</name><argument_list pos:line="44" pos:column="44">(<argument><expr><name pos:line="44" pos:column="45">generator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="45" pos:column="13">var</name></type> <name pos:line="45" pos:column="17">elements</name> <init pos:line="45" pos:column="26">= <expr><call><name><name pos:line="45" pos:column="28">parser</name><op:operator pos:line="45" pos:column="34">.</op:operator><name pos:line="45" pos:column="35">Parse</name></name><argument_list pos:line="45" pos:column="40">(<argument><expr><name pos:line="45" pos:column="41">sourceFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="46" pos:column="13">Assert</name><op:operator pos:line="46" pos:column="19">.</op:operator><name pos:line="46" pos:column="20">IsNotNull</name></name><argument_list pos:line="46" pos:column="29">(<argument><expr><name pos:line="46" pos:column="30">elements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="47" pos:column="13">Assert</name><op:operator pos:line="47" pos:column="19">.</op:operator><name pos:line="47" pos:column="20">AreEqual</name></name><argument_list pos:line="47" pos:column="28">(<argument><expr><name><name pos:line="47" pos:column="29">elements</name><op:operator pos:line="47" pos:column="37">.</op:operator><name pos:line="47" pos:column="38">Count</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="47" pos:column="45">5</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:line="48" pos:column="13">///////CheckParseOfEventFile(parser, sourceFile, elements);</comment>
        }</block></function>
        

		<function><type><attribute pos:line="52" pos:column="17">[<expr><name pos:line="52" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="53" pos:column="17">public</specifier> <name pos:line="53" pos:column="24">void</name></type> <name pos:line="53" pos:column="29">ParseCPPHeaderTest</name><parameter_list pos:line="53" pos:column="47">()</parameter_list>
		<block pos:line="54" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="55" pos:column="25">bool</name></type> <name pos:line="55" pos:column="30">hasClass</name> <init pos:line="55" pos:column="39">= <expr><lit:literal type="boolean" pos:line="55" pos:column="41">false</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="56" pos:column="25">bool</name></type> <name pos:line="56" pos:column="30">hasEnum</name> <init pos:line="56" pos:column="38">= <expr><lit:literal type="boolean" pos:line="56" pos:column="40">false</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="57" pos:column="13">var</name></type> <name pos:line="57" pos:column="17">parser</name> <init pos:line="57" pos:column="24">= <expr><op:operator pos:line="57" pos:column="26">new</op:operator> <call><name pos:line="57" pos:column="30">SrcMLCppParser</name><argument_list pos:line="57" pos:column="44">(<argument><expr><name pos:line="57" pos:column="45">generator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="58" pos:column="25">var</name></type> <name pos:line="58" pos:column="29">elements</name> <init pos:line="58" pos:column="38">= <expr><call><name><name pos:line="58" pos:column="40">parser</name><op:operator pos:line="58" pos:column="46">.</op:operator><name pos:line="58" pos:column="47">Parse</name></name><argument_list pos:line="58" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="58" pos:column="53">"TestFiles\\Event.H.txt"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="59" pos:column="25">Assert</name><op:operator pos:line="59" pos:column="31">.</op:operator><name pos:line="59" pos:column="32">IsNotNull</name></name><argument_list pos:line="59" pos:column="41">(<argument><expr><name pos:line="59" pos:column="42">elements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="60" pos:column="25">Assert</name><op:operator pos:line="60" pos:column="31">.</op:operator><name pos:line="60" pos:column="32">AreEqual</name></name><argument_list pos:line="60" pos:column="40">(<argument><expr><name><name pos:line="60" pos:column="41">elements</name><op:operator pos:line="60" pos:column="49">.</op:operator><name pos:line="60" pos:column="50">Count</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="60" pos:column="57">8</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<foreach pos:line="61" pos:column="25">foreach(<init><decl><type><name pos:line="61" pos:column="33">ProgramElement</name></type> <name pos:line="61" pos:column="48">pe</name> <range pos:line="61" pos:column="51">in <expr><name pos:line="61" pos:column="54">elements</name></expr></range></decl></init>)
			<block pos:line="62" pos:column="25">{
				<if pos:line="63" pos:column="33">if<condition pos:line="63" pos:column="35">(<expr><name pos:line="63" pos:column="36">pe</name> <op:operator pos:line="63" pos:column="39">is</op:operator> <name pos:line="63" pos:column="42">ClassElement</name></expr>)</condition><then pos:line="63" pos:column="55">
				<block pos:line="64" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="65" pos:column="41">ClassElement</name></type> <name pos:line="65" pos:column="54">classElem</name> <init pos:line="65" pos:column="64">= <expr><op:operator pos:line="65" pos:column="66">(</op:operator><name pos:line="65" pos:column="67">ClassElement</name><op:operator pos:line="65" pos:column="79">)</op:operator><name pos:line="65" pos:column="80">pe</name></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="66" pos:column="41">Assert</name><op:operator pos:line="66" pos:column="47">.</op:operator><name pos:line="66" pos:column="48">AreEqual</name></name><argument_list pos:line="66" pos:column="56">(<argument><expr><name><name pos:line="66" pos:column="57">classElem</name><op:operator pos:line="66" pos:column="66">.</op:operator><name pos:line="66" pos:column="67">Name</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="66" pos:column="73">"Event"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="67" pos:column="41">Assert</name><op:operator pos:line="67" pos:column="47">.</op:operator><name pos:line="67" pos:column="48">AreEqual</name></name><argument_list pos:line="67" pos:column="56">(<argument><expr><name><name pos:line="67" pos:column="57">classElem</name><op:operator pos:line="67" pos:column="66">.</op:operator><name pos:line="67" pos:column="67">DefinitionLineNumber</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="67" pos:column="89">12</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="68" pos:column="41">Assert</name><op:operator pos:line="68" pos:column="47">.</op:operator><name pos:line="68" pos:column="48">AreEqual</name></name><argument_list pos:line="68" pos:column="56">(<argument><expr><name><name pos:line="68" pos:column="57">classElem</name><op:operator pos:line="68" pos:column="66">.</op:operator><name pos:line="68" pos:column="67">AccessLevel</name></name></expr></argument>, <argument><expr><name><name pos:line="68" pos:column="80">AccessLevel</name><op:operator pos:line="68" pos:column="91">.</op:operator><name pos:line="68" pos:column="92">Public</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="69" pos:column="41">Assert</name><op:operator pos:line="69" pos:column="47">.</op:operator><name pos:line="69" pos:column="48">AreEqual</name></name><argument_list pos:line="69" pos:column="56">(<argument><expr><name><name pos:line="69" pos:column="57">classElem</name><op:operator pos:line="69" pos:column="66">.</op:operator><name pos:line="69" pos:column="67">Namespace</name></name></expr></argument>, <argument><expr><name><name pos:line="69" pos:column="78">String</name><op:operator pos:line="69" pos:column="84">.</op:operator><name pos:line="69" pos:column="85">Empty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="70" pos:column="41">Assert</name><op:operator pos:line="70" pos:column="47">.</op:operator><name pos:line="70" pos:column="48">True</name></name><argument_list pos:line="70" pos:column="52">(<argument><expr><call><name><name pos:line="70" pos:column="53">classElem</name><op:operator pos:line="70" pos:column="62">.</op:operator><name pos:line="70" pos:column="63">FullFilePath</name><op:operator pos:line="70" pos:column="75">.</op:operator><name pos:line="70" pos:column="76">EndsWith</name></name><argument_list pos:line="70" pos:column="84">(<argument><expr><lit:literal type="string" pos:line="70" pos:column="85">"TestFiles\\Event.H.txt"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="71" pos:column="41">hasClass</name> <op:operator pos:line="71" pos:column="50">=</op:operator> <lit:literal type="boolean" pos:line="71" pos:column="52">true</lit:literal></expr>;</expr_stmt>
				}</block></then>
				<else pos:line="73" pos:column="33">else <if pos:line="73" pos:column="38">if<condition pos:line="73" pos:column="40">(<expr><name pos:line="73" pos:column="41">pe</name> <op:operator pos:line="73" pos:column="44">is</op:operator> <name pos:line="73" pos:column="47">EnumElement</name></expr>)</condition><then pos:line="73" pos:column="59">
				<block pos:line="74" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="75" pos:column="41">EnumElement</name></type> <name pos:line="75" pos:column="53">enumElem</name> <init pos:line="75" pos:column="62">= <expr><op:operator pos:line="75" pos:column="64">(</op:operator><name pos:line="75" pos:column="65">EnumElement</name><op:operator pos:line="75" pos:column="76">)</op:operator><name pos:line="75" pos:column="77">pe</name></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="76" pos:column="41">Assert</name><op:operator pos:line="76" pos:column="47">.</op:operator><name pos:line="76" pos:column="48">AreEqual</name></name><argument_list pos:line="76" pos:column="56">(<argument><expr><name><name pos:line="76" pos:column="57">enumElem</name><op:operator pos:line="76" pos:column="65">.</op:operator><name pos:line="76" pos:column="66">Name</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="76" pos:column="72">"EventType"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="77" pos:column="41">Assert</name><op:operator pos:line="77" pos:column="47">.</op:operator><name pos:line="77" pos:column="48">AreEqual</name></name><argument_list pos:line="77" pos:column="56">(<argument><expr><name><name pos:line="77" pos:column="57">enumElem</name><op:operator pos:line="77" pos:column="65">.</op:operator><name pos:line="77" pos:column="66">DefinitionLineNumber</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="77" pos:column="88">6</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="78" pos:column="41">Assert</name><op:operator pos:line="78" pos:column="47">.</op:operator><name pos:line="78" pos:column="48">AreEqual</name></name><argument_list pos:line="78" pos:column="56">(<argument><expr><name><name pos:line="78" pos:column="57">enumElem</name><op:operator pos:line="78" pos:column="65">.</op:operator><name pos:line="78" pos:column="66">Namespace</name></name></expr></argument>, <argument><expr><name><name pos:line="78" pos:column="77">String</name><op:operator pos:line="78" pos:column="83">.</op:operator><name pos:line="78" pos:column="84">Empty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="79" pos:column="41">Assert</name><op:operator pos:line="79" pos:column="47">.</op:operator><name pos:line="79" pos:column="48">AreEqual</name></name><argument_list pos:line="79" pos:column="56">(<argument><expr><name><name pos:line="79" pos:column="57">enumElem</name><op:operator pos:line="79" pos:column="65">.</op:operator><name pos:line="79" pos:column="66">Body</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="79" pos:column="72">"SENSED_DATA_READY SENDING_DONE RECEIVING_DONE"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="80" pos:column="41">Assert</name><op:operator pos:line="80" pos:column="47">.</op:operator><name pos:line="80" pos:column="48">AreEqual</name></name><argument_list pos:line="80" pos:column="56">(<argument><expr><name><name pos:line="80" pos:column="57">enumElem</name><op:operator pos:line="80" pos:column="65">.</op:operator><name pos:line="80" pos:column="66">AccessLevel</name></name></expr></argument>, <argument><expr><name><name pos:line="80" pos:column="79">AccessLevel</name><op:operator pos:line="80" pos:column="90">.</op:operator><name pos:line="80" pos:column="91">Public</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="81" pos:column="41">Assert</name><op:operator pos:line="81" pos:column="47">.</op:operator><name pos:line="81" pos:column="48">True</name></name><argument_list pos:line="81" pos:column="52">(<argument><expr><call><name><name pos:line="81" pos:column="53">enumElem</name><op:operator pos:line="81" pos:column="61">.</op:operator><name pos:line="81" pos:column="62">FullFilePath</name><op:operator pos:line="81" pos:column="74">.</op:operator><name pos:line="81" pos:column="75">EndsWith</name></name><argument_list pos:line="81" pos:column="83">(<argument><expr><lit:literal type="string" pos:line="81" pos:column="84">"TestFiles\\Event.H.txt"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="82" pos:column="41">hasEnum</name> <op:operator pos:line="82" pos:column="49">=</op:operator> <lit:literal type="boolean" pos:line="82" pos:column="51">true</lit:literal></expr>;</expr_stmt>
				}</block></then></if></else></if>
			}</block></foreach>
			<expr_stmt><expr><call><name><name pos:line="85" pos:column="25">Assert</name><op:operator pos:line="85" pos:column="31">.</op:operator><name pos:line="85" pos:column="32">IsTrue</name></name><argument_list pos:line="85" pos:column="38">(<argument><expr><name pos:line="85" pos:column="39">hasClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="86" pos:column="25">Assert</name><op:operator pos:line="86" pos:column="31">.</op:operator><name pos:line="86" pos:column="32">IsTrue</name></name><argument_list pos:line="86" pos:column="38">(<argument><expr><name pos:line="86" pos:column="39">hasEnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

        <function><type><attribute pos:line="89" pos:column="9">[<expr><name pos:line="89" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="90" pos:column="9">public</specifier> <name pos:line="90" pos:column="16">void</name></type> <name pos:line="90" pos:column="21">ParseAboutDlgTest</name><parameter_list pos:line="90" pos:column="38">()</parameter_list>
        <block pos:line="91" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="92" pos:column="13">var</name></type> <name pos:line="92" pos:column="17">parser</name> <init pos:line="92" pos:column="24">= <expr><op:operator pos:line="92" pos:column="26">new</op:operator> <call><name pos:line="92" pos:column="30">SrcMLCppParser</name><argument_list pos:line="92" pos:column="44">(<argument><expr><name pos:line="92" pos:column="45">generator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="93" pos:column="13">var</name></type> <name pos:line="93" pos:column="17">elements</name> <init pos:line="93" pos:column="26">= <expr><call><name><name pos:line="93" pos:column="28">parser</name><op:operator pos:line="93" pos:column="34">.</op:operator><name pos:line="93" pos:column="35">Parse</name></name><argument_list pos:line="93" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="93" pos:column="41">"TestFiles\\AboutDlg.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="94" pos:column="13">Assert</name><op:operator pos:line="94" pos:column="19">.</op:operator><name pos:line="94" pos:column="20">IsNotNull</name></name><argument_list pos:line="94" pos:column="29">(<argument><expr><name pos:line="94" pos:column="30">elements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

		<function><type><attribute pos:line="97" pos:column="17">[<expr><name pos:line="97" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="98" pos:column="17">public</specifier> <name pos:line="98" pos:column="24">void</name></type> <name pos:line="98" pos:column="29">ParseUndefinedNameEnumTest</name><parameter_list pos:line="98" pos:column="55">()</parameter_list>
		<block pos:line="99" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="100" pos:column="25">bool</name></type> <name pos:line="100" pos:column="30">hasEnum</name> <init pos:line="100" pos:column="38">= <expr><lit:literal type="boolean" pos:line="100" pos:column="40">false</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="101" pos:column="13">var</name></type> <name pos:line="101" pos:column="17">parser</name> <init pos:line="101" pos:column="24">= <expr><op:operator pos:line="101" pos:column="26">new</op:operator> <call><name pos:line="101" pos:column="30">SrcMLCppParser</name><argument_list pos:line="101" pos:column="44">(<argument><expr><name pos:line="101" pos:column="45">generator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="102" pos:column="25">var</name></type> <name pos:line="102" pos:column="29">elements</name> <init pos:line="102" pos:column="38">= <expr><call><name><name pos:line="102" pos:column="40">parser</name><op:operator pos:line="102" pos:column="46">.</op:operator><name pos:line="102" pos:column="47">Parse</name></name><argument_list pos:line="102" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="102" pos:column="53">"TestFiles\\PlayMp3Dlg.h.txt"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="103" pos:column="25">Assert</name><op:operator pos:line="103" pos:column="31">.</op:operator><name pos:line="103" pos:column="32">IsNotNull</name></name><argument_list pos:line="103" pos:column="41">(<argument><expr><name pos:line="103" pos:column="42">elements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<foreach pos:line="104" pos:column="25">foreach(<init><decl><type><name pos:line="104" pos:column="33">ProgramElement</name></type> <name pos:line="104" pos:column="48">pe</name> <range pos:line="104" pos:column="51">in <expr><name pos:line="104" pos:column="54">elements</name></expr></range></decl></init>)
			<block pos:line="105" pos:column="25">{
				<if pos:line="106" pos:column="33">if<condition pos:line="106" pos:column="35">(<expr><name pos:line="106" pos:column="36">pe</name> <op:operator pos:line="106" pos:column="39">is</op:operator> <name pos:line="106" pos:column="42">EnumElement</name></expr>)</condition><then pos:line="106" pos:column="54">
				<block pos:line="107" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="108" pos:column="41">EnumElement</name></type> <name pos:line="108" pos:column="53">enumElem</name> <init pos:line="108" pos:column="62">= <expr><op:operator pos:line="108" pos:column="64">(</op:operator><name pos:line="108" pos:column="65">EnumElement</name><op:operator pos:line="108" pos:column="76">)</op:operator><name pos:line="108" pos:column="77">pe</name></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="109" pos:column="41">Assert</name><op:operator pos:line="109" pos:column="47">.</op:operator><name pos:line="109" pos:column="48">AreEqual</name></name><argument_list pos:line="109" pos:column="56">(<argument><expr><name><name pos:line="109" pos:column="57">enumElem</name><op:operator pos:line="109" pos:column="65">.</op:operator><name pos:line="109" pos:column="66">Name</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="109" pos:column="72">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="110" pos:column="41">Assert</name><op:operator pos:line="110" pos:column="47">.</op:operator><name pos:line="110" pos:column="48">AreEqual</name></name><argument_list pos:line="110" pos:column="56">(<argument><expr><name><name pos:line="110" pos:column="57">enumElem</name><op:operator pos:line="110" pos:column="65">.</op:operator><name pos:line="110" pos:column="66">DefinitionLineNumber</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="110" pos:column="88">30</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="111" pos:column="41">Assert</name><op:operator pos:line="111" pos:column="47">.</op:operator><name pos:line="111" pos:column="48">AreEqual</name></name><argument_list pos:line="111" pos:column="56">(<argument><expr><name><name pos:line="111" pos:column="57">enumElem</name><op:operator pos:line="111" pos:column="65">.</op:operator><name pos:line="111" pos:column="66">Body</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="111" pos:column="72">"IDD IDD_PLAYMP3_DIALOG"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="112" pos:column="41">Assert</name><op:operator pos:line="112" pos:column="47">.</op:operator><name pos:line="112" pos:column="48">AreEqual</name></name><argument_list pos:line="112" pos:column="56">(<argument><expr><name><name pos:line="112" pos:column="57">enumElem</name><op:operator pos:line="112" pos:column="65">.</op:operator><name pos:line="112" pos:column="66">AccessLevel</name></name></expr></argument>, <argument><expr><name><name pos:line="112" pos:column="79">AccessLevel</name><op:operator pos:line="112" pos:column="90">.</op:operator><name pos:line="112" pos:column="91">Public</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="113" pos:column="41">Assert</name><op:operator pos:line="113" pos:column="47">.</op:operator><name pos:line="113" pos:column="48">True</name></name><argument_list pos:line="113" pos:column="52">(<argument><expr><call><name><name pos:line="113" pos:column="53">enumElem</name><op:operator pos:line="113" pos:column="61">.</op:operator><name pos:line="113" pos:column="62">FullFilePath</name><op:operator pos:line="113" pos:column="74">.</op:operator><name pos:line="113" pos:column="75">EndsWith</name></name><argument_list pos:line="113" pos:column="83">(<argument><expr><lit:literal type="string" pos:line="113" pos:column="84">"TestFiles\\PlayMp3Dlg.h.txt"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="114" pos:column="41">hasEnum</name> <op:operator pos:line="114" pos:column="49">=</op:operator> <lit:literal type="boolean" pos:line="114" pos:column="51">true</lit:literal></expr>;</expr_stmt>
				}</block></then></if>
			}</block></foreach>
			<expr_stmt><expr><call><name><name pos:line="117" pos:column="25">Assert</name><op:operator pos:line="117" pos:column="31">.</op:operator><name pos:line="117" pos:column="32">IsTrue</name></name><argument_list pos:line="117" pos:column="38">(<argument><expr><name pos:line="117" pos:column="39">hasEnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="120" pos:column="17">[<expr><name pos:line="120" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="121" pos:column="17">public</specifier> <name pos:line="121" pos:column="24">void</name></type> <name pos:line="121" pos:column="29">ParseAnotherEnumTest</name><parameter_list pos:line="121" pos:column="49">()</parameter_list>
		<block pos:line="122" pos:column="17">{
            <decl_stmt><decl><type><name pos:line="123" pos:column="13">var</name></type> <name pos:line="123" pos:column="17">parser</name> <init pos:line="123" pos:column="24">= <expr><op:operator pos:line="123" pos:column="26">new</op:operator> <call><name pos:line="123" pos:column="30">SrcMLCppParser</name><argument_list pos:line="123" pos:column="44">(<argument><expr><name pos:line="123" pos:column="45">generator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="124" pos:column="25">var</name></type> <name pos:line="124" pos:column="29">elements</name> <init pos:line="124" pos:column="38">= <expr><call><name><name pos:line="124" pos:column="40">parser</name><op:operator pos:line="124" pos:column="46">.</op:operator><name pos:line="124" pos:column="47">Parse</name></name><argument_list pos:line="124" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="124" pos:column="53">"TestFiles\\xmlMatchedTagsHighlighter.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="125" pos:column="25">Assert</name><op:operator pos:line="125" pos:column="31">.</op:operator><name pos:line="125" pos:column="32">IsNotNull</name></name><argument_list pos:line="125" pos:column="41">(<argument><expr><name pos:line="125" pos:column="42">elements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="128" pos:column="17">[<expr><name pos:line="128" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="129" pos:column="17">public</specifier> <name pos:line="129" pos:column="24">void</name></type> <name pos:line="129" pos:column="29">TrickyFileTest</name><parameter_list pos:line="129" pos:column="43">()</parameter_list>
		<block pos:line="130" pos:column="17">{
            <decl_stmt><decl><type><name pos:line="131" pos:column="13">var</name></type> <name pos:line="131" pos:column="17">parser</name> <init pos:line="131" pos:column="24">= <expr><op:operator pos:line="131" pos:column="26">new</op:operator> <call><name pos:line="131" pos:column="30">SrcMLCppParser</name><argument_list pos:line="131" pos:column="44">(<argument><expr><name pos:line="131" pos:column="45">generator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="132" pos:column="25">var</name></type> <name pos:line="132" pos:column="29">elements</name> <init pos:line="132" pos:column="38">= <expr><call><name><name pos:line="132" pos:column="40">parser</name><op:operator pos:line="132" pos:column="46">.</op:operator><name pos:line="132" pos:column="47">Parse</name></name><argument_list pos:line="132" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="132" pos:column="53">"TestFiles\\Parameters.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="133" pos:column="25">Assert</name><op:operator pos:line="133" pos:column="31">.</op:operator><name pos:line="133" pos:column="32">IsNotNull</name></name><argument_list pos:line="133" pos:column="41">(<argument><expr><name pos:line="133" pos:column="42">elements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="136" pos:column="17">[<expr><name pos:line="136" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="137" pos:column="17">public</specifier> <name pos:line="137" pos:column="24">void</name></type> <name pos:line="137" pos:column="29">WeirdStructTest</name><parameter_list pos:line="137" pos:column="44">()</parameter_list>
		<block pos:line="138" pos:column="17">{	
			<comment type="line" pos:line="139" pos:column="25">//Note: may not want to create this in mydocuments.... </comment>
			<comment type="line" pos:line="140" pos:column="25">//create a test file</comment>
			<decl_stmt><decl><type><name pos:line="141" pos:column="25">String</name></type> <name pos:line="141" pos:column="32">WeirdStruct</name> <init pos:line="141" pos:column="44">= <expr><lit:literal type="string" pos:line="141" pos:column="46">"struct LangMenuItem { LangType _langType; int	_cmdID; generic_string _langName; "</lit:literal> <op:operator pos:line="141" pos:column="133">+</op:operator>
									<lit:literal type="string" pos:line="142" pos:column="73">"LangMenuItem(LangType lt, int cmdID = 0, generic_string langName = TEXT(\"\")): "</lit:literal> <op:operator pos:line="142" pos:column="156">+</op:operator>
									<lit:literal type="string" pos:line="143" pos:column="73">"_langType(lt), _cmdID(cmdID), _langName(langName){};};"</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="144" pos:column="25">String</name></type> <name pos:line="144" pos:column="32">WeirdStructFile</name> <init pos:line="144" pos:column="48">= <expr><call><name><name pos:line="144" pos:column="50">Environment</name><op:operator pos:line="144" pos:column="61">.</op:operator><name pos:line="144" pos:column="62">GetFolderPath</name></name><argument_list pos:line="144" pos:column="75">(<argument><expr><name><name pos:line="144" pos:column="76">Environment</name><op:operator pos:line="144" pos:column="87">.</op:operator><name pos:line="144" pos:column="88">SpecialFolder</name><op:operator pos:line="144" pos:column="101">.</op:operator><name pos:line="144" pos:column="102">MyDocuments</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="144" pos:column="115">+</op:operator> <lit:literal type="string" pos:line="144" pos:column="117">"\\HelloWorld1.cs"</lit:literal></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="145" pos:column="25">System</name><op:operator pos:line="145" pos:column="31">.</op:operator><name pos:line="145" pos:column="32">IO</name><op:operator pos:line="145" pos:column="34">.</op:operator><name pos:line="145" pos:column="35">File</name><op:operator pos:line="145" pos:column="39">.</op:operator><name pos:line="145" pos:column="40">WriteAllText</name></name><argument_list pos:line="145" pos:column="52">(<argument><expr><name pos:line="145" pos:column="53">WeirdStructFile</name></expr></argument>, <argument><expr><name pos:line="145" pos:column="70">WeirdStruct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="147" pos:column="13">bool</name></type> <name pos:line="147" pos:column="18">hasStruct</name> <init pos:line="147" pos:column="28">= <expr><lit:literal type="boolean" pos:line="147" pos:column="30">false</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="148" pos:column="13">Guid</name></type> <name pos:line="148" pos:column="18">structId</name> <init pos:line="148" pos:column="27">= <expr><name><name pos:line="148" pos:column="29">Guid</name><op:operator pos:line="148" pos:column="33">.</op:operator><name pos:line="148" pos:column="34">Empty</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="149" pos:column="13">var</name></type> <name pos:line="149" pos:column="17">parser</name> <init pos:line="149" pos:column="24">= <expr><op:operator pos:line="149" pos:column="26">new</op:operator> <call><name pos:line="149" pos:column="30">SrcMLCppParser</name><argument_list pos:line="149" pos:column="44">(<argument><expr><name pos:line="149" pos:column="45">generator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="150" pos:column="25">var</name></type> <name pos:line="150" pos:column="29">elements</name> <init pos:line="150" pos:column="38">= <expr><call><name><name pos:line="150" pos:column="40">parser</name><op:operator pos:line="150" pos:column="46">.</op:operator><name pos:line="150" pos:column="47">Parse</name></name><argument_list pos:line="150" pos:column="52">(<argument><expr><name pos:line="150" pos:column="53">WeirdStructFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="151" pos:column="25">Assert</name><op:operator pos:line="151" pos:column="31">.</op:operator><name pos:line="151" pos:column="32">IsTrue</name></name><argument_list pos:line="151" pos:column="38">(<argument><expr><name><name pos:line="151" pos:column="39">elements</name><op:operator pos:line="151" pos:column="47">.</op:operator><name pos:line="151" pos:column="48">Count</name></name> <op:operator pos:line="151" pos:column="54">==</op:operator> <lit:literal type="number" pos:line="151" pos:column="57">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <foreach pos:line="153" pos:column="13">foreach (<init><decl><type><name pos:line="153" pos:column="22">ProgramElement</name></type> <name pos:line="153" pos:column="37">pe</name> <range pos:line="153" pos:column="40">in <expr><name pos:line="153" pos:column="43">elements</name></expr></range></decl></init>)
            <block pos:line="154" pos:column="13">{
                <if pos:line="155" pos:column="17">if <condition pos:line="155" pos:column="20">(<expr><name pos:line="155" pos:column="21">pe</name> <op:operator pos:line="155" pos:column="24">is</op:operator> <name pos:line="155" pos:column="27">StructElement</name></expr>)</condition><then pos:line="155" pos:column="41">
                <block pos:line="156" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="157" pos:column="21">StructElement</name></type> <name pos:line="157" pos:column="35">structElement</name> <init pos:line="157" pos:column="49">= <expr><op:operator pos:line="157" pos:column="51">(</op:operator><name pos:line="157" pos:column="52">StructElement</name><op:operator pos:line="157" pos:column="65">)</op:operator><name pos:line="157" pos:column="66">pe</name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="158" pos:column="21">Assert</name><op:operator pos:line="158" pos:column="27">.</op:operator><name pos:line="158" pos:column="28">IsNotNull</name></name><argument_list pos:line="158" pos:column="37">(<argument><expr><name pos:line="158" pos:column="38">structElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="159" pos:column="21">Assert</name><op:operator pos:line="159" pos:column="27">.</op:operator><name pos:line="159" pos:column="28">AreEqual</name></name><argument_list pos:line="159" pos:column="36">(<argument><expr><name><name pos:line="159" pos:column="37">structElement</name><op:operator pos:line="159" pos:column="50">.</op:operator><name pos:line="159" pos:column="51">Name</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="159" pos:column="57">"LangMenuItem"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="160" pos:column="21">structId</name> <op:operator pos:line="160" pos:column="30">=</op:operator> <name><name pos:line="160" pos:column="32">structElement</name><op:operator pos:line="160" pos:column="45">.</op:operator><name pos:line="160" pos:column="46">Id</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="161" pos:column="21">hasStruct</name> <op:operator pos:line="161" pos:column="31">=</op:operator> <lit:literal type="boolean" pos:line="161" pos:column="33">true</lit:literal></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="163" pos:column="17">else <if pos:line="163" pos:column="22">if <condition pos:line="163" pos:column="25">(<expr><name pos:line="163" pos:column="26">pe</name> <op:operator pos:line="163" pos:column="29">is</op:operator> <name pos:line="163" pos:column="32">MethodElement</name></expr>)</condition><then pos:line="163" pos:column="46">
                <block pos:line="164" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="165" pos:column="21">MethodElement</name></type> <name pos:line="165" pos:column="35">methodElement</name> <init pos:line="165" pos:column="49">= <expr><op:operator pos:line="165" pos:column="51">(</op:operator><name pos:line="165" pos:column="52">MethodElement</name><op:operator pos:line="165" pos:column="65">)</op:operator><name pos:line="165" pos:column="66">pe</name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="166" pos:column="21">Assert</name><op:operator pos:line="166" pos:column="27">.</op:operator><name pos:line="166" pos:column="28">AreEqual</name></name><argument_list pos:line="166" pos:column="36">(<argument><expr><name><name pos:line="166" pos:column="37">methodElement</name><op:operator pos:line="166" pos:column="50">.</op:operator><name pos:line="166" pos:column="51">ClassId</name></name></expr></argument>, <argument><expr><name pos:line="166" pos:column="60">structId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></else></if>
            }</block></foreach>
            <expr_stmt><expr><call><name><name pos:line="169" pos:column="13">Assert</name><op:operator pos:line="169" pos:column="19">.</op:operator><name pos:line="169" pos:column="20">IsTrue</name></name><argument_list pos:line="169" pos:column="26">(<argument><expr><name pos:line="169" pos:column="27">hasStruct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line" pos:line="171" pos:column="25">//delete file</comment>
			<expr_stmt><expr><call><name><name pos:line="172" pos:column="25">System</name><op:operator pos:line="172" pos:column="31">.</op:operator><name pos:line="172" pos:column="32">IO</name><op:operator pos:line="172" pos:column="34">.</op:operator><name pos:line="172" pos:column="35">File</name><op:operator pos:line="172" pos:column="39">.</op:operator><name pos:line="172" pos:column="40">Delete</name></name><argument_list pos:line="172" pos:column="46">(<argument><expr><name pos:line="172" pos:column="47">WeirdStructFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="175" pos:column="17">[<expr><name pos:line="175" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="176" pos:column="17">public</specifier> <name pos:line="176" pos:column="24">void</name></type> <name pos:line="176" pos:column="29">ParseCppConstructorTest</name><parameter_list pos:line="176" pos:column="52">()</parameter_list>
		<block pos:line="177" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="178" pos:column="25">bool</name></type> <name pos:line="178" pos:column="30">hasConstructor</name> <init pos:line="178" pos:column="45">= <expr><lit:literal type="boolean" pos:line="178" pos:column="47">false</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="179" pos:column="13">var</name></type> <name pos:line="179" pos:column="17">parser</name> <init pos:line="179" pos:column="24">= <expr><op:operator pos:line="179" pos:column="26">new</op:operator> <call><name pos:line="179" pos:column="30">SrcMLCppParser</name><argument_list pos:line="179" pos:column="44">(<argument><expr><name pos:line="179" pos:column="45">generator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="180" pos:column="25">var</name></type> <name pos:line="180" pos:column="29">elements</name> <init pos:line="180" pos:column="38">= <expr><call><name><name pos:line="180" pos:column="40">parser</name><op:operator pos:line="180" pos:column="46">.</op:operator><name pos:line="180" pos:column="47">Parse</name></name><argument_list pos:line="180" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="180" pos:column="53">"TestFiles\\Event.H.txt"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="181" pos:column="25">Assert</name><op:operator pos:line="181" pos:column="31">.</op:operator><name pos:line="181" pos:column="32">IsNotNull</name></name><argument_list pos:line="181" pos:column="41">(<argument><expr><name pos:line="181" pos:column="42">elements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<foreach pos:line="182" pos:column="25">foreach(<init><decl><type><name pos:line="182" pos:column="33">ProgramElement</name></type> <name pos:line="182" pos:column="48">pe</name> <range pos:line="182" pos:column="51">in <expr><name pos:line="182" pos:column="54">elements</name></expr></range></decl></init>)
			<block pos:line="183" pos:column="25">{
				<if pos:line="184" pos:column="33">if<condition pos:line="184" pos:column="35">(<expr><name pos:line="184" pos:column="36">pe</name> <op:operator pos:line="184" pos:column="39">is</op:operator> <name pos:line="184" pos:column="42">MethodPrototypeElement</name></expr>)</condition><then pos:line="184" pos:column="65">
				<block pos:line="185" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="186" pos:column="41">var</name></type> <name pos:line="186" pos:column="45">protoElement</name> <init pos:line="186" pos:column="58">= <expr><op:operator pos:line="186" pos:column="60">(</op:operator><name pos:line="186" pos:column="61">MethodPrototypeElement</name><op:operator pos:line="186" pos:column="83">)</op:operator><name pos:line="186" pos:column="84">pe</name></expr></init></decl>;</decl_stmt>
					<if pos:line="187" pos:column="41">if<condition pos:line="187" pos:column="43">(<expr><name><name pos:line="187" pos:column="44">protoElement</name><op:operator pos:line="187" pos:column="56">.</op:operator><name pos:line="187" pos:column="57">IsConstructor</name></name></expr>)</condition><then pos:line="187" pos:column="71">
					<block pos:line="188" pos:column="41">{
						<expr_stmt><expr><name pos:line="189" pos:column="49">hasConstructor</name> <op:operator pos:line="189" pos:column="64">=</op:operator> <lit:literal type="boolean" pos:line="189" pos:column="66">true</lit:literal></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="190" pos:column="49">Assert</name><op:operator pos:line="190" pos:column="55">.</op:operator><name pos:line="190" pos:column="56">AreEqual</name></name><argument_list pos:line="190" pos:column="64">(<argument><expr><name><name pos:line="190" pos:column="65">protoElement</name><op:operator pos:line="190" pos:column="77">.</op:operator><name pos:line="190" pos:column="78">Name</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="190" pos:column="84">"Event"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="191" pos:column="49">Assert</name><op:operator pos:line="191" pos:column="55">.</op:operator><name pos:line="191" pos:column="56">AreEqual</name></name><argument_list pos:line="191" pos:column="64">(<argument><expr><name><name pos:line="191" pos:column="65">protoElement</name><op:operator pos:line="191" pos:column="77">.</op:operator><name pos:line="191" pos:column="78">DefinitionLineNumber</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="191" pos:column="100">15</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then></if>
			}</block></foreach>
			<expr_stmt><expr><call><name><name pos:line="195" pos:column="25">Assert</name><op:operator pos:line="195" pos:column="31">.</op:operator><name pos:line="195" pos:column="32">IsTrue</name></name><argument_list pos:line="195" pos:column="38">(<argument><expr><name pos:line="195" pos:column="39">hasConstructor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

        <function><type><attribute pos:line="198" pos:column="9">[<expr><name pos:line="198" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="199" pos:column="9">public</specifier> <name pos:line="199" pos:column="16">void</name></type> <name pos:line="199" pos:column="21">ParseBigFileTest</name><parameter_list pos:line="199" pos:column="37">()</parameter_list>
        <block pos:line="200" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="201" pos:column="13">var</name></type> <name pos:line="201" pos:column="17">_processFileInBackground</name> <init pos:line="201" pos:column="42">= <expr><op:operator pos:line="201" pos:column="44">new</op:operator> <call><name><name pos:line="201" pos:column="48">System</name><op:operator pos:line="201" pos:column="54">.</op:operator><name pos:line="201" pos:column="55">ComponentModel</name><op:operator pos:line="201" pos:column="69">.</op:operator><name pos:line="201" pos:column="70">BackgroundWorker</name></name><argument_list pos:line="201" pos:column="86">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="202" pos:column="13">_processFileInBackground</name><op:operator pos:line="202" pos:column="37">.</op:operator><name pos:line="202" pos:column="38">DoWork</name></name> <op:operator pos:line="202" pos:column="45">+=</op:operator>
                <op:operator pos:line="203" pos:column="17">new</op:operator> <call><name pos:line="203" pos:column="21">DoWorkEventHandler</name><argument_list pos:line="203" pos:column="39">(<argument><expr><name pos:line="203" pos:column="40">_processFileInBackground_DoWork</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
            <expr_stmt><expr><call><name><name pos:line="204" pos:column="13">_processFileInBackground</name><op:operator pos:line="204" pos:column="37">.</op:operator><name pos:line="204" pos:column="38">RunWorkerAsync</name></name><argument_list pos:line="204" pos:column="52">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="205" pos:column="25">Thread</name><op:operator pos:line="205" pos:column="31">.</op:operator><name pos:line="205" pos:column="32">Sleep</name></name><argument_list pos:line="205" pos:column="37">(<argument><expr><lit:literal type="number" pos:line="205" pos:column="38">5000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="206" pos:column="13">Assert</name><op:operator pos:line="206" pos:column="19">.</op:operator><name pos:line="206" pos:column="20">IsTrue</name></name><argument_list pos:line="206" pos:column="26">(<argument><expr><name><name pos:line="206" pos:column="27">_processFileInBackground</name><op:operator pos:line="206" pos:column="51">.</op:operator><name pos:line="206" pos:column="52">IsBusy</name></name><op:operator pos:line="206" pos:column="58">==</op:operator><lit:literal type="boolean" pos:line="206" pos:column="60">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

		

	    <function><type><specifier pos:line="211" pos:column="13">private</specifier> <name pos:line="211" pos:column="21">void</name></type> <name pos:line="211" pos:column="26">_processFileInBackground_DoWork</name><parameter_list pos:line="211" pos:column="57">(<param><decl><type><name pos:line="211" pos:column="58">object</name></type> <name pos:line="211" pos:column="65">sender</name></decl></param>, <param><decl><type><name pos:line="211" pos:column="73">DoWorkEventArgs</name></type> <name pos:line="211" pos:column="89">e</name></decl></param>)</parameter_list>
	    <block pos:line="212" pos:column="13">{
            <decl_stmt><decl><type><name pos:line="213" pos:column="13">var</name></type> <name pos:line="213" pos:column="17">parser</name> <init pos:line="213" pos:column="24">= <expr><op:operator pos:line="213" pos:column="26">new</op:operator> <call><name pos:line="213" pos:column="30">SrcMLCppParser</name><argument_list pos:line="213" pos:column="44">(<argument><expr><name pos:line="213" pos:column="45">generator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="214" pos:column="13">var</name></type> <name pos:line="214" pos:column="17">elements</name> <init pos:line="214" pos:column="26">= <expr><call><name><name pos:line="214" pos:column="28">parser</name><op:operator pos:line="214" pos:column="34">.</op:operator><name pos:line="214" pos:column="35">Parse</name></name><argument_list pos:line="214" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="214" pos:column="41">"TestFiles\\xmlMatchedTagsHighlighter.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>     
	    }</block></function>

        <function><type><attribute pos:line="217" pos:column="9">[<expr><name pos:line="217" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="218" pos:column="9">public</specifier> <name pos:line="218" pos:column="16">void</name></type> <name pos:line="218" pos:column="21">ParseCppSourceWithAlternativeParserTest</name><parameter_list pos:line="218" pos:column="60">()</parameter_list>
        <block pos:line="219" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="220" pos:column="13">string</name></type> <name pos:line="220" pos:column="20">sourceFile</name> <init pos:line="220" pos:column="31">= <expr><lit:literal type="string" pos:line="220" pos:column="33">@"TestFiles\Event.CPP.txt"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="221" pos:column="13">var</name></type> <name pos:line="221" pos:column="17">parser</name> <init pos:line="221" pos:column="24">= <expr><op:operator pos:line="221" pos:column="26">new</op:operator> <call><name pos:line="221" pos:column="30">MySrcMlCppParser</name><argument_list pos:line="221" pos:column="46">(<argument><expr><name pos:line="221" pos:column="47">generator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="222" pos:column="13">var</name></type> <name pos:line="222" pos:column="17">elements</name> <init pos:line="222" pos:column="26">= <expr><call><name><name pos:line="222" pos:column="28">parser</name><op:operator pos:line="222" pos:column="34">.</op:operator><name pos:line="222" pos:column="35">Parse</name></name><argument_list pos:line="222" pos:column="40">(<argument><expr><name pos:line="222" pos:column="41">sourceFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="223" pos:column="13">Assert</name><op:operator pos:line="223" pos:column="19">.</op:operator><name pos:line="223" pos:column="20">IsNotNull</name></name><argument_list pos:line="223" pos:column="29">(<argument><expr><name pos:line="223" pos:column="30">elements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="224" pos:column="13">Assert</name><op:operator pos:line="224" pos:column="19">.</op:operator><name pos:line="224" pos:column="20">AreEqual</name></name><argument_list pos:line="224" pos:column="28">(<argument><expr><name><name pos:line="224" pos:column="29">elements</name><op:operator pos:line="224" pos:column="37">.</op:operator><name pos:line="224" pos:column="38">Count</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="224" pos:column="45">6</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="225" pos:column="13">CheckParseOfEventFile</name><argument_list pos:line="225" pos:column="34">(<argument><expr><name pos:line="225" pos:column="35">parser</name></expr></argument>, <argument><expr><name pos:line="225" pos:column="43">sourceFile</name></expr></argument>, <argument><expr><name pos:line="225" pos:column="55">elements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="226" pos:column="13">bool</name></type> <name pos:line="226" pos:column="18">foundOne</name> <init pos:line="226" pos:column="27">= <expr><lit:literal type="boolean" pos:line="226" pos:column="29">false</lit:literal></expr></init></decl>;</decl_stmt>
            <foreach pos:line="227" pos:column="13">foreach (<init><decl><type><name pos:line="227" pos:column="22">var</name></type> <name pos:line="227" pos:column="26">programElement</name> <range pos:line="227" pos:column="41">in <expr><name pos:line="227" pos:column="44">elements</name></expr></range></decl></init>)
            <block pos:line="228" pos:column="13">{
                <if pos:line="229" pos:column="17">if<condition pos:line="229" pos:column="19">(<expr><name pos:line="229" pos:column="20">programElement</name> <op:operator pos:line="229" pos:column="35">as</op:operator> <name pos:line="229" pos:column="38">MyMethodElementUnresolvedType</name> <op:operator pos:line="229" pos:column="68">!=</op:operator><name pos:line="229" pos:column="70">null</name></expr>)</condition><then pos:line="229" pos:column="75">
                <block pos:line="230" pos:column="17">{
                    <expr_stmt><expr><name pos:line="231" pos:column="21">foundOne</name> <op:operator pos:line="231" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="231" pos:column="32">true</lit:literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="232" pos:column="21">Assert</name><op:operator pos:line="232" pos:column="27">.</op:operator><name pos:line="232" pos:column="28">IsTrue</name></name><argument_list pos:line="232" pos:column="34">(<argument><expr><op:operator pos:line="232" pos:column="35">(</op:operator><name pos:line="232" pos:column="36">programElement</name> <op:operator pos:line="232" pos:column="51">as</op:operator> <name pos:line="232" pos:column="54">MyMethodElementUnresolvedType</name><op:operator pos:line="232" pos:column="83">)</op:operator><op:operator pos:line="232" pos:column="84">.</op:operator><call><name><name pos:line="232" pos:column="85">CustomStuffHere</name><op:operator pos:line="232" pos:column="100">.</op:operator><name pos:line="232" pos:column="101">Equals</name></name><argument_list pos:line="232" pos:column="107">(<argument><expr><lit:literal type="string" pos:line="232" pos:column="108">"WHOA"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></foreach>
            <expr_stmt><expr><call><name><name pos:line="235" pos:column="13">Assert</name><op:operator pos:line="235" pos:column="19">.</op:operator><name pos:line="235" pos:column="20">IsTrue</name></name><argument_list pos:line="235" pos:column="26">(<argument><expr><name pos:line="235" pos:column="27">foundOne</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

	    <function><type><specifier pos:line="238" pos:column="13">private</specifier> <specifier pos:line="238" pos:column="21">static</specifier> <name pos:line="238" pos:column="28">void</name></type> <name pos:line="238" pos:column="33">CheckParseOfEventFile</name><parameter_list pos:line="238" pos:column="54">(<param><decl><type><name pos:line="238" pos:column="55">SrcMLCppParser</name></type> <name pos:line="238" pos:column="70">parser</name></decl></param>, <param><decl><type><name pos:line="238" pos:column="78">string</name></type> <name pos:line="238" pos:column="85">sourceFile</name></decl></param>, <param><decl><type><name><name pos:line="238" pos:column="97">List</name><argument_list pos:line="238" pos:column="101">&lt;<argument><name pos:line="238" pos:column="102">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="238" pos:column="118">elements</name></decl></param>)</parameter_list>
	    <block pos:line="239" pos:column="13">{
	        <decl_stmt><decl><type><name pos:line="240" pos:column="17">bool</name></type> <name pos:line="240" pos:column="22">seenGetTimeMethod</name> <init pos:line="240" pos:column="40">= <expr><lit:literal type="boolean" pos:line="240" pos:column="42">false</lit:literal></expr></init></decl>;</decl_stmt>
	        <decl_stmt><decl><type><name pos:line="241" pos:column="17">int</name></type> <name pos:line="241" pos:column="21">numMethods</name> <init pos:line="241" pos:column="32">= <expr><lit:literal type="number" pos:line="241" pos:column="34">0</lit:literal></expr></init></decl>;</decl_stmt>
	        <foreach pos:line="242" pos:column="17">foreach (<init><decl><type><name pos:line="242" pos:column="26">ProgramElement</name></type> <name pos:line="242" pos:column="41">pe</name> <range pos:line="242" pos:column="44">in <expr><name pos:line="242" pos:column="47">elements</name></expr></range></decl></init>)
	        <block pos:line="243" pos:column="17">{
	            <if pos:line="244" pos:column="21">if <condition pos:line="244" pos:column="24">(<expr><name pos:line="244" pos:column="25">pe</name> <op:operator pos:line="244" pos:column="28">is</op:operator> <name pos:line="244" pos:column="31">CppUnresolvedMethodElement</name></expr>)</condition><then pos:line="244" pos:column="58">
	            <block pos:line="245" pos:column="21">{
	                <expr_stmt><expr><name pos:line="246" pos:column="25">numMethods</name><op:operator pos:line="246" pos:column="35">++</op:operator></expr>;</expr_stmt>

	                <comment type="line" pos:line="248" pos:column="25">//Resolve</comment>
	                <decl_stmt><decl><type><name pos:line="249" pos:column="25">bool</name></type> <name pos:line="249" pos:column="30">isResolved</name> <init pos:line="249" pos:column="41">= <expr><lit:literal type="boolean" pos:line="249" pos:column="43">false</lit:literal></expr></init></decl>;</decl_stmt>
	                <decl_stmt><decl><type><name pos:line="250" pos:column="25">MethodElement</name></type> <name pos:line="250" pos:column="39">method</name> <init pos:line="250" pos:column="46">= <expr><name pos:line="250" pos:column="48">null</name></expr></init></decl>;</decl_stmt>
	                <decl_stmt><decl><type><name pos:line="251" pos:column="25">CppUnresolvedMethodElement</name></type> <name pos:line="251" pos:column="52">unresolvedMethod</name> <init pos:line="251" pos:column="69">= <expr><op:operator pos:line="251" pos:column="71">(</op:operator><name pos:line="251" pos:column="72">CppUnresolvedMethodElement</name><op:operator pos:line="251" pos:column="98">)</op:operator> <name pos:line="251" pos:column="100">pe</name></expr></init></decl>;</decl_stmt>
	                <foreach pos:line="252" pos:column="25">foreach (<init><decl><type><name pos:line="252" pos:column="34">String</name></type> <name pos:line="252" pos:column="41">headerFile</name> <range pos:line="252" pos:column="52">in <expr><name><name pos:line="252" pos:column="55">unresolvedMethod</name><op:operator pos:line="252" pos:column="71">.</op:operator><name pos:line="252" pos:column="72">IncludeFileNames</name></name></expr></range></decl></init>)
	                <block pos:line="253" pos:column="25">{
	                    <comment type="line" pos:line="254" pos:column="29">//it's reasonable to assume that the header file path is relative from the cpp file,</comment>
	                    <comment type="line" pos:line="255" pos:column="29">//as other included files are unlikely to be part of the same project and therefore </comment>
	                    <comment type="line" pos:line="256" pos:column="29">//should not need to be parsed</comment>
	                    <decl_stmt><decl><type><name pos:line="257" pos:column="29">string</name></type> <name pos:line="257" pos:column="36">headerPath</name> <init pos:line="257" pos:column="47">= <expr><call><name><name pos:line="257" pos:column="49">System</name><op:operator pos:line="257" pos:column="55">.</op:operator><name pos:line="257" pos:column="56">IO</name><op:operator pos:line="257" pos:column="58">.</op:operator><name pos:line="257" pos:column="59">Path</name><op:operator pos:line="257" pos:column="63">.</op:operator><name pos:line="257" pos:column="64">GetDirectoryName</name></name><argument_list pos:line="257" pos:column="80">(<argument><expr><name pos:line="257" pos:column="81">sourceFile</name></expr></argument>)</argument_list></call> <op:operator pos:line="257" pos:column="93">+</op:operator> <lit:literal type="string" pos:line="257" pos:column="95">"\\"</lit:literal> <op:operator pos:line="257" pos:column="100">+</op:operator> <name pos:line="257" pos:column="102">headerFile</name></expr></init></decl>;</decl_stmt>
	                    <if pos:line="258" pos:column="29">if <condition pos:line="258" pos:column="32">(<expr><op:operator pos:line="258" pos:column="33">!</op:operator><call><name><name pos:line="258" pos:column="34">System</name><op:operator pos:line="258" pos:column="40">.</op:operator><name pos:line="258" pos:column="41">IO</name><op:operator pos:line="258" pos:column="43">.</op:operator><name pos:line="258" pos:column="44">File</name><op:operator pos:line="258" pos:column="48">.</op:operator><name pos:line="258" pos:column="49">Exists</name></name><argument_list pos:line="258" pos:column="55">(<argument><expr><name pos:line="258" pos:column="56">headerPath</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="258" pos:column="68"> <continue pos:line="258" pos:column="69">continue;</continue></then></if>

	                    <expr_stmt><expr><name pos:line="260" pos:column="29">isResolved</name> <op:operator pos:line="260" pos:column="40">=</op:operator> <call><name><name pos:line="260" pos:column="42">unresolvedMethod</name><op:operator pos:line="260" pos:column="58">.</op:operator><name pos:line="260" pos:column="59">TryResolve</name></name><argument_list pos:line="260" pos:column="69">(<argument><expr><name pos:line="260" pos:column="70">unresolvedMethod</name></expr></argument>, <argument><expr><call><name><name pos:line="260" pos:column="88">parser</name><op:operator pos:line="260" pos:column="94">.</op:operator><name pos:line="260" pos:column="95">Parse</name></name><argument_list pos:line="260" pos:column="100">(<argument><expr><name pos:line="260" pos:column="101">headerPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr pos:line="260" pos:column="114">out <name pos:line="260" pos:column="118">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	                    <if pos:line="261" pos:column="29">if <condition pos:line="261" pos:column="32">(<expr><name pos:line="261" pos:column="33">isResolved</name> <op:operator pos:line="261" pos:column="44">==</op:operator> <lit:literal type="boolean" pos:line="261" pos:column="47">true</lit:literal></expr>)</condition><then pos:line="261" pos:column="52"> <break pos:line="261" pos:column="53">break;</break></then></if>
	                }</block></foreach>
	                <expr_stmt><expr><call><name><name pos:line="263" pos:column="25">Assert</name><op:operator pos:line="263" pos:column="31">.</op:operator><name pos:line="263" pos:column="32">IsTrue</name></name><argument_list pos:line="263" pos:column="38">(<argument><expr><name pos:line="263" pos:column="39">isResolved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	                <expr_stmt><expr><call><name><name pos:line="264" pos:column="25">Assert</name><op:operator pos:line="264" pos:column="31">.</op:operator><name pos:line="264" pos:column="32">IsNotNull</name></name><argument_list pos:line="264" pos:column="41">(<argument><expr><name pos:line="264" pos:column="42">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	                <comment type="line" pos:line="266" pos:column="25">//pick one of the resolved methods to see if it seems complete</comment>
	                <if pos:line="267" pos:column="25">if <condition pos:line="267" pos:column="28">(<expr><name><name pos:line="267" pos:column="29">method</name><op:operator pos:line="267" pos:column="35">.</op:operator><name pos:line="267" pos:column="36">Name</name></name> <op:operator pos:line="267" pos:column="41">==</op:operator> <lit:literal type="string" pos:line="267" pos:column="44">"getTime"</lit:literal></expr>)</condition><then pos:line="267" pos:column="54">
	                <block pos:line="268" pos:column="25">{
	                    <expr_stmt><expr><name pos:line="269" pos:column="29">seenGetTimeMethod</name> <op:operator pos:line="269" pos:column="47">=</op:operator> <lit:literal type="boolean" pos:line="269" pos:column="49">true</lit:literal></expr>;</expr_stmt>
	                    <expr_stmt><expr><call><name><name pos:line="270" pos:column="29">Assert</name><op:operator pos:line="270" pos:column="35">.</op:operator><name pos:line="270" pos:column="36">AreEqual</name></name><argument_list pos:line="270" pos:column="44">(<argument><expr><name><name pos:line="270" pos:column="45">method</name><op:operator pos:line="270" pos:column="51">.</op:operator><name pos:line="270" pos:column="52">DefinitionLineNumber</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="270" pos:column="74">13</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	                    <expr_stmt><expr><call><name><name pos:line="271" pos:column="29">Assert</name><op:operator pos:line="271" pos:column="35">.</op:operator><name pos:line="271" pos:column="36">AreEqual</name></name><argument_list pos:line="271" pos:column="44">(<argument><expr><name><name pos:line="271" pos:column="45">method</name><op:operator pos:line="271" pos:column="51">.</op:operator><name pos:line="271" pos:column="52">ReturnType</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="271" pos:column="64">"double"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	                    <expr_stmt><expr><call><name><name pos:line="272" pos:column="29">Assert</name><op:operator pos:line="272" pos:column="35">.</op:operator><name pos:line="272" pos:column="36">AreEqual</name></name><argument_list pos:line="272" pos:column="44">(<argument><expr><name><name pos:line="272" pos:column="45">method</name><op:operator pos:line="272" pos:column="51">.</op:operator><name pos:line="272" pos:column="52">AccessLevel</name></name></expr></argument>, <argument><expr><name><name pos:line="272" pos:column="65">AccessLevel</name><op:operator pos:line="272" pos:column="76">.</op:operator><name pos:line="272" pos:column="77">Public</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	                    <expr_stmt><expr><call><name><name pos:line="273" pos:column="29">Assert</name><op:operator pos:line="273" pos:column="35">.</op:operator><name pos:line="273" pos:column="36">AreEqual</name></name><argument_list pos:line="273" pos:column="44">(<argument><expr><name><name pos:line="273" pos:column="45">method</name><op:operator pos:line="273" pos:column="51">.</op:operator><name pos:line="273" pos:column="52">Arguments</name></name></expr></argument>, <argument><expr><name><name pos:line="273" pos:column="63">String</name><op:operator pos:line="273" pos:column="69">.</op:operator><name pos:line="273" pos:column="70">Empty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	                    <expr_stmt><expr><call><name><name pos:line="274" pos:column="29">Assert</name><op:operator pos:line="274" pos:column="35">.</op:operator><name pos:line="274" pos:column="36">AreEqual</name></name><argument_list pos:line="274" pos:column="44">(<argument><expr><name><name pos:line="274" pos:column="45">method</name><op:operator pos:line="274" pos:column="51">.</op:operator><name pos:line="274" pos:column="52">Body</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="274" pos:column="58">"{ \n  return _time; \n}"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	                    <expr_stmt><expr><call><name><name pos:line="275" pos:column="29">Assert</name><op:operator pos:line="275" pos:column="35">.</op:operator><name pos:line="275" pos:column="36">AreNotEqual</name></name><argument_list pos:line="275" pos:column="47">(<argument><expr><name><name pos:line="275" pos:column="48">method</name><op:operator pos:line="275" pos:column="54">.</op:operator><name pos:line="275" pos:column="55">ClassId</name></name></expr></argument>, <argument><expr><name><name pos:line="275" pos:column="64">System</name><op:operator pos:line="275" pos:column="70">.</op:operator><name pos:line="275" pos:column="71">Guid</name><op:operator pos:line="275" pos:column="75">.</op:operator><name pos:line="275" pos:column="76">Empty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	                }</block></then></if>
	            }</block></then></if>
	        }</block></foreach>
	        <expr_stmt><expr><call><name><name pos:line="279" pos:column="17">Assert</name><op:operator pos:line="279" pos:column="23">.</op:operator><name pos:line="279" pos:column="24">AreEqual</name></name><argument_list pos:line="279" pos:column="32">(<argument><expr><name pos:line="279" pos:column="33">numMethods</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="279" pos:column="45">6</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><call><name><name pos:line="280" pos:column="17">Assert</name><op:operator pos:line="280" pos:column="23">.</op:operator><name pos:line="280" pos:column="24">IsTrue</name></name><argument_list pos:line="280" pos:column="30">(<argument><expr><name pos:line="280" pos:column="31">seenGetTimeMethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></function>
	}</block></class>

    <class><specifier pos:line="284" pos:column="5">public</specifier> class <name pos:line="284" pos:column="18">MySrcMlCppParser</name> <super pos:line="284" pos:column="35">: <name pos:line="284" pos:column="37">SrcMLCppParser</name></super>
    <block pos:line="285" pos:column="5">{
        <constructor><specifier pos:line="286" pos:column="9">public</specifier> <name pos:line="286" pos:column="16">MySrcMlCppParser</name><parameter_list pos:line="286" pos:column="32">(<param><decl><type><name><name pos:line="286" pos:column="33">ABB</name><op:operator pos:line="286" pos:column="36">.</op:operator><name pos:line="286" pos:column="37">SrcML</name><op:operator pos:line="286" pos:column="42">.</op:operator><name pos:line="286" pos:column="43">SrcMLGenerator</name></name></type> <name pos:line="286" pos:column="58">generator</name></decl></param>)</parameter_list> <block pos:line="286" pos:column="69">{
            <expr_stmt><expr><name><name pos:line="287" pos:column="13">this</name><op:operator pos:line="287" pos:column="17">.</op:operator><name pos:line="287" pos:column="18">Generator</name></name> <op:operator pos:line="287" pos:column="28">=</op:operator> <name pos:line="287" pos:column="30">generator</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier pos:line="290" pos:column="9">public</specifier> <specifier pos:line="290" pos:column="16">override</specifier> <name pos:line="290" pos:column="25">MethodElement</name></type> <name pos:line="290" pos:column="39">ParseCppFunction</name><parameter_list pos:line="290" pos:column="55">(<param><decl><type><name><name pos:line="290" pos:column="56">System</name><op:operator pos:line="290" pos:column="62">.</op:operator><name pos:line="290" pos:column="63">Xml</name><op:operator pos:line="290" pos:column="66">.</op:operator><name pos:line="290" pos:column="67">Linq</name><op:operator pos:line="290" pos:column="71">.</op:operator><name pos:line="290" pos:column="72">XElement</name></name></type> <name pos:line="290" pos:column="81">function</name></decl></param>, <param><decl><type><name><name pos:line="290" pos:column="91">List</name><argument_list pos:line="290" pos:column="95">&lt;<argument><name pos:line="290" pos:column="96">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="290" pos:column="112">programElements</name></decl></param>, <param><decl><type><name pos:line="290" pos:column="129">string</name></type> <name pos:line="290" pos:column="136">fileName</name></decl></param>, <param><decl><type><name><name pos:line="290" pos:column="146">string</name><index pos:line="290" pos:column="152">[]</index></name></type> <name pos:line="290" pos:column="155">includedFiles</name></decl></param>, <param><decl><type><name pos:line="290" pos:column="170">Type</name></type> <name pos:line="290" pos:column="175">resolvedType</name></decl></param>, <param><decl><type><name pos:line="290" pos:column="189">Type</name></type> <name pos:line="290" pos:column="194">unresolvedType</name></decl></param>, <param><decl><type><name pos:line="290" pos:column="210">bool</name></type> <name pos:line="290" pos:column="215">isConstructor</name> <init pos:line="290" pos:column="229">= <expr><lit:literal type="boolean" pos:line="290" pos:column="231">false</lit:literal></expr></init></decl></param>)</parameter_list>
        <block pos:line="291" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="292" pos:column="13">var</name></type> <name pos:line="292" pos:column="17">methodElement</name> <init pos:line="292" pos:column="31">= <expr><call><name><name pos:line="292" pos:column="33">base</name><op:operator pos:line="292" pos:column="37">.</op:operator><name pos:line="292" pos:column="38">ParseCppFunction</name></name><argument_list pos:line="292" pos:column="54">(<argument><expr><name pos:line="292" pos:column="55">function</name></expr></argument>, <argument><expr><name pos:line="292" pos:column="65">programElements</name></expr></argument>, <argument><expr><name pos:line="292" pos:column="82">fileName</name></expr></argument>, <argument><expr><name pos:line="292" pos:column="92">includedFiles</name></expr></argument>, <argument><expr><call><name pos:line="292" pos:column="107">typeof</name><argument_list pos:line="292" pos:column="113">(<argument><expr><name pos:line="292" pos:column="114">MyMethodElementType</name></expr></argument>)</argument_list></call></expr></argument>,  <argument><expr><call><name pos:line="292" pos:column="137">typeof</name><argument_list pos:line="292" pos:column="143">(<argument><expr><name pos:line="292" pos:column="144">MyMethodElementUnresolvedType</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="292" pos:column="176">isConstructor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="293" pos:column="13">var</name></type> <name pos:line="293" pos:column="17">myMethodElement</name> <init pos:line="293" pos:column="33">= <expr><name pos:line="293" pos:column="35">methodElement</name> <op:operator pos:line="293" pos:column="49">as</op:operator> <name pos:line="293" pos:column="52">MyMethodElementUnresolvedType</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="294" pos:column="13">myMethodElement</name><op:operator pos:line="294" pos:column="28">.</op:operator><name pos:line="294" pos:column="29">CustomStuffHere</name></name> <op:operator pos:line="294" pos:column="45">=</op:operator> <lit:literal type="string" pos:line="294" pos:column="47">"WHOA"</lit:literal></expr>;</expr_stmt>
            <return pos:line="295" pos:column="13">return <expr><name pos:line="295" pos:column="20">myMethodElement</name></expr>;</return>
        }</block></function>
    }</block></class>

    <class><specifier pos:line="299" pos:column="5">public</specifier> class <name pos:line="299" pos:column="18">MyMethodElementUnresolvedType</name><super pos:line="299" pos:column="47">:<name pos:line="299" pos:column="48">CppUnresolvedMethodElement</name></super>
    <block pos:line="300" pos:column="5">{
        <decl_stmt><decl><type><attribute pos:line="301" pos:column="9">[<expr><name pos:line="301" pos:column="10">CustomIndexField</name></expr>]</attribute>
        <specifier pos:line="302" pos:column="9">public</specifier> <name pos:line="302" pos:column="16">string</name></type> <name pos:line="302" pos:column="23">CustomStuffHere</name> <block pos:line="302" pos:column="39">{ <function_decl><name pos:line="302" pos:column="41">get</name>;</function_decl> <function_decl><name pos:line="302" pos:column="46">set</name>;</function_decl> }</block></decl></decl_stmt>

        <constructor><specifier pos:line="304" pos:column="9">public</specifier> <name pos:line="304" pos:column="16">MyMethodElementUnresolvedType</name><parameter_list pos:line="304" pos:column="45">(<param><decl><type><name pos:line="304" pos:column="46">string</name></type> <name pos:line="304" pos:column="53">name</name></decl></param>, <param><decl><type><name pos:line="304" pos:column="59">int</name></type> <name pos:line="304" pos:column="63">definitionLineNumber</name></decl></param>, <param><decl><type><name pos:line="304" pos:column="85">int</name></type> <name pos:line="304" pos:column="89">definitionColumn</name></decl></param>, <param><decl><type><name pos:line="304" pos:column="107">string</name></type> <name pos:line="304" pos:column="114">fullFilePath</name></decl></param>, <param><decl><type><name pos:line="304" pos:column="128">string</name></type> <name pos:line="304" pos:column="135">snippet</name></decl></param>, <param><decl><type><name pos:line="304" pos:column="144">string</name></type> <name pos:line="304" pos:column="151">arguments</name></decl></param>, <param><decl><type><name pos:line="304" pos:column="162">string</name></type> <name pos:line="304" pos:column="169">returnType</name></decl></param>, <param><decl><type><name pos:line="304" pos:column="181">string</name></type> <name pos:line="304" pos:column="188">body</name></decl></param>, <param><decl><type><name pos:line="304" pos:column="194">string</name></type> <name pos:line="304" pos:column="201">className</name></decl></param>, <param><decl><type><name pos:line="304" pos:column="212">bool</name></type> <name pos:line="304" pos:column="217">isConstructor</name></decl></param>, <param><decl><type><name><name pos:line="304" pos:column="232">string</name><index pos:line="304" pos:column="238">[]</index></name></type> <name pos:line="304" pos:column="241">headerFiles</name></decl></param>)</parameter_list>
            <member_list pos:line="305" pos:column="13">: <call><name pos:line="305" pos:column="15">base</name><argument_list pos:line="305" pos:column="19">(<argument><expr><name pos:line="305" pos:column="20">name</name></expr></argument>, <argument><expr><name pos:line="305" pos:column="26">definitionLineNumber</name></expr></argument>, <argument><expr><name pos:line="305" pos:column="48">definitionColumn</name></expr></argument>, <argument><expr><name pos:line="305" pos:column="66">fullFilePath</name></expr></argument>, <argument><expr><name pos:line="305" pos:column="80">snippet</name></expr></argument>, <argument><expr><name pos:line="305" pos:column="89">arguments</name></expr></argument>, <argument><expr><name pos:line="305" pos:column="100">returnType</name></expr></argument>, <argument><expr><name pos:line="305" pos:column="112">body</name></expr></argument>, <argument><expr><name pos:line="305" pos:column="118">className</name></expr></argument>, <argument><expr><name pos:line="305" pos:column="129">isConstructor</name></expr></argument>, <argument><expr><name pos:line="305" pos:column="144">headerFiles</name></expr></argument>)</argument_list></call>
        </member_list><block pos:line="306" pos:column="9">{
        }</block></constructor>

        <function><type><specifier pos:line="309" pos:column="9">protected</specifier> <specifier pos:line="309" pos:column="19">override</specifier> <name pos:line="309" pos:column="28">Type</name></type> <name pos:line="309" pos:column="33">GetResolvedType</name><parameter_list pos:line="309" pos:column="48">()</parameter_list>
        <block pos:line="310" pos:column="9">{
            <return pos:line="311" pos:column="13">return <expr><call><name pos:line="311" pos:column="20">typeof</name><argument_list pos:line="311" pos:column="26">(<argument><expr><name pos:line="311" pos:column="27">MyMethodElementType</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>


    }</block></class>

    <class><specifier pos:line="317" pos:column="5">public</specifier> class <name pos:line="317" pos:column="18">MyMethodElementType</name> <super pos:line="317" pos:column="38">: <name pos:line="317" pos:column="40">MethodElement</name></super>
    <block pos:line="318" pos:column="5">{
        <decl_stmt><decl><type><attribute pos:line="319" pos:column="9">[<expr><name pos:line="319" pos:column="10">CustomIndexField</name></expr>]</attribute>
        <specifier pos:line="320" pos:column="9">public</specifier> <name pos:line="320" pos:column="16">string</name></type> <name pos:line="320" pos:column="23">CustomStuffHere</name> <block pos:line="320" pos:column="39">{ <function_decl><name pos:line="320" pos:column="41">get</name>;</function_decl> <function_decl><name pos:line="320" pos:column="46">set</name>;</function_decl> }</block></decl></decl_stmt>

        <constructor><specifier pos:line="322" pos:column="9">public</specifier> <name pos:line="322" pos:column="16">MyMethodElementType</name><parameter_list pos:line="322" pos:column="35">(<param><decl><type><name pos:line="322" pos:column="36">string</name></type> <name pos:line="322" pos:column="43">name</name></decl></param>, <param><decl><type><name pos:line="322" pos:column="49">int</name></type> <name pos:line="322" pos:column="53">definitionLineNumber</name></decl></param>, <param><decl><type><name pos:line="322" pos:column="75">int</name></type> <name pos:line="322" pos:column="79">definitionColumn</name></decl></param>, <param><decl><type><name pos:line="322" pos:column="97">string</name></type> <name pos:line="322" pos:column="104">fullFilePath</name></decl></param>, <param><decl><type><name pos:line="322" pos:column="118">string</name></type> <name pos:line="322" pos:column="125">snippet</name></decl></param>, <param><decl><type><name pos:line="322" pos:column="134">AccessLevel</name></type> <name pos:line="322" pos:column="146">accessLevel</name></decl></param>, <param><decl><type><name pos:line="322" pos:column="159">string</name></type> <name pos:line="322" pos:column="166">arguments</name></decl></param>, <param><decl><type><name pos:line="322" pos:column="177">string</name></type> <name pos:line="322" pos:column="184">returnType</name></decl></param>, <param><decl><type><name pos:line="322" pos:column="196">string</name></type> <name pos:line="322" pos:column="203">body</name></decl></param>, <param><decl><type><name pos:line="322" pos:column="209">Guid</name></type> <name pos:line="322" pos:column="214">classId</name></decl></param>, <param><decl><type><name pos:line="322" pos:column="223">string</name></type> <name pos:line="322" pos:column="230">className</name></decl></param>, <param><decl><type><name pos:line="322" pos:column="241">string</name></type> <name pos:line="322" pos:column="248">modifiers</name></decl></param>, <param><decl><type><name pos:line="322" pos:column="259">bool</name></type> <name pos:line="322" pos:column="264">isConstructor</name></decl></param>)</parameter_list>
            <member_list pos:line="323" pos:column="13">: <call><name pos:line="323" pos:column="15">base</name><argument_list pos:line="323" pos:column="19">(<argument><expr><name pos:line="323" pos:column="20">name</name></expr></argument>, <argument><expr><name pos:line="323" pos:column="26">definitionLineNumber</name></expr></argument>, <argument><expr><name pos:line="323" pos:column="48">definitionColumn</name></expr></argument>, <argument><expr><name pos:line="323" pos:column="66">fullFilePath</name></expr></argument>, <argument><expr><name pos:line="323" pos:column="80">snippet</name></expr></argument>, <argument><expr><name pos:line="323" pos:column="89">accessLevel</name></expr></argument>, <argument><expr><name pos:line="323" pos:column="102">arguments</name></expr></argument>, <argument><expr><name pos:line="323" pos:column="113">returnType</name></expr></argument>, <argument><expr><name pos:line="323" pos:column="125">body</name></expr></argument>, <argument><expr><name pos:line="323" pos:column="131">classId</name></expr></argument>, <argument><expr><name pos:line="323" pos:column="140">className</name></expr></argument>, <argument><expr><name pos:line="323" pos:column="151">modifiers</name></expr></argument>, <argument><expr><name pos:line="323" pos:column="162">isConstructor</name></expr></argument>)</argument_list></call>
        </member_list><block pos:line="324" pos:column="9">{
        }</block></constructor>
    }</block></class>
}</block></namespace>
</unit>
