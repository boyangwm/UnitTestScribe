<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Recommender\Recommender\SwumQueriesSorter.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Text</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Sando</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">Core</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">Tools</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Sando</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">DependencyInjection</name></name>;</using>

<namespace pos:line="8" pos:column="1">namespace <name><name pos:line="8" pos:column="11">Sando</name><op:operator pos:line="8" pos:column="16">.</op:operator><name pos:line="8" pos:column="17">Recommender</name></name>
<block pos:line="9" pos:column="1">{

    <enum><specifier pos:line="11" pos:column="5">public</specifier> enum <macro><name pos:line="11" pos:column="17">SwumRecommnedationType</name></macro>
    <block pos:line="12" pos:column="5">{
        <decl><name pos:line="13" pos:column="9">History</name></decl><op:operator pos:line="13" pos:column="16">,</op:operator>
        <decl><name pos:line="14" pos:column="9">Other</name></decl><op:operator pos:line="14" pos:column="14">,</op:operator>
    }</block>

    <decl pos:line="17" pos:column="5">public interface <name pos:line="17" pos:column="22">ISwumRecommendedQuery</name>
    <block pos:line="18" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="19" pos:column="9">string</name></type> <name pos:line="19" pos:column="16">Query</name> <block pos:line="19" pos:column="22">{ <function_decl><name pos:line="19" pos:column="24">get</name>;</function_decl> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><name pos:line="20" pos:column="9">SwumRecommnedationType</name></type> <name pos:line="20" pos:column="32">Type</name> <block pos:line="20" pos:column="37">{ <function_decl><name pos:line="20" pos:column="39">get</name>;</function_decl> }</block></decl></decl_stmt>
    }</block></decl>

    <decl pos:line="23" pos:column="5">public <name pos:line="23" pos:column="12">class</name> <name pos:line="23" pos:column="18">SwumQueriesSorter</name>
    <block pos:line="24" pos:column="5">{
        <class><specifier pos:line="25" pos:column="9">private</specifier> class <name pos:line="25" pos:column="23">ScoredQuery</name>
        <block pos:line="26" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="27" pos:column="13">public</specifier> <name pos:line="27" pos:column="20">string</name></type> <name pos:line="27" pos:column="27">Query</name> <block pos:line="27" pos:column="33">{ <function_decl><name pos:line="27" pos:column="35">set</name>;</function_decl> <function_decl><name pos:line="27" pos:column="40">get</name>;</function_decl> }</block></decl></decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="28" pos:column="13">public</specifier> <name pos:line="28" pos:column="20">double</name></type> <name pos:line="28" pos:column="27">Score</name> <block pos:line="28" pos:column="33">{ <function_decl><name pos:line="28" pos:column="35">set</name>;</function_decl> <function_decl><name pos:line="28" pos:column="40">get</name>;</function_decl> }</block></decl></decl_stmt>

            <constructor><specifier pos:line="30" pos:column="13">internal</specifier> <name pos:line="30" pos:column="22">ScoredQuery</name><parameter_list pos:line="30" pos:column="33">(<param><decl><type><name pos:line="30" pos:column="34">string</name></type> <name pos:line="30" pos:column="41">Query</name></decl></param>, <param><decl><type><name pos:line="30" pos:column="48">double</name></type> <name pos:line="30" pos:column="55">Score</name></decl></param>)</parameter_list>
            <block pos:line="31" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="32" pos:column="17">this</name><op:operator pos:line="32" pos:column="21">.</op:operator><name pos:line="32" pos:column="22">Query</name></name> <op:operator pos:line="32" pos:column="28">=</op:operator> <name pos:line="32" pos:column="30">Query</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="33" pos:column="17">this</name><op:operator pos:line="33" pos:column="21">.</op:operator><name pos:line="33" pos:column="22">Score</name></name> <op:operator pos:line="33" pos:column="28">=</op:operator> <name pos:line="33" pos:column="30">Score</name></expr>;</expr_stmt>
            }</block></constructor>
        }</block></class>

        <class><specifier pos:line="37" pos:column="9">public</specifier> class <name pos:line="37" pos:column="22">InternalSwumRecommendedQuey</name> <super pos:line="37" pos:column="50">: <name pos:line="37" pos:column="52">ISwumRecommendedQuery</name></super>
        <block pos:line="38" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="39" pos:column="13">public</specifier> <name pos:line="39" pos:column="20">string</name></type> <name pos:line="39" pos:column="27">Query</name> <block pos:line="39" pos:column="33">{ <function_decl><name pos:line="39" pos:column="35">get</name>;</function_decl> <function_decl><name pos:line="39" pos:column="40">set</name>;</function_decl> }</block></decl></decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="40" pos:column="13">public</specifier> <name pos:line="40" pos:column="20">SwumRecommnedationType</name></type> <name pos:line="40" pos:column="43">Type</name> <block pos:line="40" pos:column="48">{ <function_decl><name pos:line="40" pos:column="50">get</name>;</function_decl> <function_decl><name pos:line="40" pos:column="55">set</name>;</function_decl> }</block></decl></decl_stmt>

            <constructor><specifier pos:line="42" pos:column="13">internal</specifier> <name pos:line="42" pos:column="22">InternalSwumRecommendedQuey</name><parameter_list pos:line="42" pos:column="49">(<param><decl><type><name pos:line="42" pos:column="50">string</name></type> <name pos:line="42" pos:column="57">Query</name></decl></param>, 
                <param><decl><type><name pos:line="43" pos:column="17">SwumRecommnedationType</name></type> <name pos:line="43" pos:column="40">Type</name></decl></param>)</parameter_list>
            <block pos:line="44" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="45" pos:column="17">this</name><op:operator pos:line="45" pos:column="21">.</op:operator><name pos:line="45" pos:column="22">Query</name></name> <op:operator pos:line="45" pos:column="28">=</op:operator> <name pos:line="45" pos:column="30">Query</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="46" pos:column="17">this</name><op:operator pos:line="46" pos:column="21">.</op:operator><name pos:line="46" pos:column="22">Type</name></name> <op:operator pos:line="46" pos:column="27">=</op:operator> <name pos:line="46" pos:column="29">Type</name></expr>;</expr_stmt>
            }</block></constructor>
        }</block></class>

        <class><specifier pos:line="50" pos:column="9">private</specifier> <specifier pos:line="50" pos:column="17">abstract</specifier> class <name pos:line="50" pos:column="32">AbstractQueryInputState</name>
        <block pos:line="51" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="52" pos:column="13">protected</specifier> <specifier pos:line="52" pos:column="23">readonly</specifier> <name pos:line="52" pos:column="32">string</name></type> <name pos:line="52" pos:column="39">originalQuery</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="53" pos:column="13">protected</specifier> <specifier pos:line="53" pos:column="23">readonly</specifier> <name pos:line="53" pos:column="32">string</name><index pos:line="53" pos:column="38">[]</index></type> <name pos:line="53" pos:column="41">wordsInOriginalQuery</name></decl>;</decl_stmt>
            <function_decl><type><specifier pos:line="54" pos:column="13">public</specifier> <specifier pos:line="54" pos:column="20">abstract</specifier> <name pos:line="54" pos:column="29">bool</name></type> <name pos:line="54" pos:column="34">IsInState</name><parameter_list pos:line="54" pos:column="43">()</parameter_list>;</function_decl>
            <function_decl><type><specifier pos:line="55" pos:column="13">protected</specifier> <specifier pos:line="55" pos:column="23">abstract</specifier> <name><name pos:line="55" pos:column="32">IEnumerable</name><argument_list pos:line="55" pos:column="43">&lt;<argument><name pos:line="55" pos:column="44">ISwumRecommendedQuery</name></argument>&gt;</argument_list></name></type> <name pos:line="55" pos:column="67">InternalSortQueries</name><parameter_list pos:line="55" pos:column="86">(<param><decl><type><name><name pos:line="55" pos:column="87">String</name><index pos:line="55" pos:column="93">[]</index></name></type> <name pos:line="55" pos:column="96">queries</name></decl></param>)</parameter_list>;</function_decl>

            <function><type><specifier pos:line="57" pos:column="13">public</specifier> <name><name pos:line="57" pos:column="20">IEnumerable</name><argument_list pos:line="57" pos:column="31">&lt;<argument><name pos:line="57" pos:column="32">ISwumRecommendedQuery</name></argument>&gt;</argument_list></name></type> <name pos:line="57" pos:column="55">SortQueries</name><parameter_list pos:line="57" pos:column="66">(<param><decl><type><name><name pos:line="57" pos:column="67">String</name><index pos:line="57" pos:column="73">[]</index></name></type> <name pos:line="57" pos:column="76">queries</name></decl></param>)</parameter_list>
            <block pos:line="58" pos:column="13">{
                <expr_stmt><expr><name pos:line="59" pos:column="17">queries</name> <op:operator pos:line="59" pos:column="25">=</op:operator> <call><name><name pos:line="59" pos:column="27">queries</name><op:operator pos:line="59" pos:column="34">.</op:operator><name pos:line="59" pos:column="35">Select</name></name><argument_list pos:line="59" pos:column="41">(<argument><expr><name pos:line="59" pos:column="42">RemoveDupWords</name></expr></argument>)</argument_list></call><op:operator pos:line="59" pos:column="57">.</op:operator><call><name pos:line="59" pos:column="58">Where</name><argument_list pos:line="59" pos:column="63">(<argument><expr><lambda><name pos:line="59" pos:column="64">s</name> <op:operator pos:line="59" pos:column="66">=&gt;</op:operator> <op:operator pos:line="59" pos:column="69">!</op:operator><call><name><name pos:line="59" pos:column="70">s</name><op:operator pos:line="59" pos:column="71">.</op:operator><name pos:line="59" pos:column="72">Equals</name></name>
                    <argument_list pos:line="60" pos:column="21">(<argument><expr><call><name><name pos:line="60" pos:column="22">originalQuery</name><op:operator pos:line="60" pos:column="35">.</op:operator><name pos:line="60" pos:column="36">Trim</name></name><argument_list pos:line="60" pos:column="40">()</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="60" pos:column="44">StringComparison</name><op:operator pos:line="60" pos:column="60">.</op:operator><name pos:line="60" pos:column="61">InvariantCultureIgnoreCase</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="60" pos:column="89">.</op:operator>
                        <call><name pos:line="61" pos:column="25">ToArray</name><argument_list pos:line="61" pos:column="32">()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="62" pos:column="17">var</name></type> <name pos:line="62" pos:column="21">sorted</name> <init pos:line="62" pos:column="28">= <expr><call><name pos:line="62" pos:column="30">InternalSortQueries</name><argument_list pos:line="62" pos:column="49">(<argument><expr><name pos:line="62" pos:column="50">queries</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return pos:line="63" pos:column="17">return <expr><name pos:line="63" pos:column="24">sorted</name></expr>;</return>
            }</block></function>


            <function><type><specifier pos:line="67" pos:column="13">private</specifier> <name pos:line="67" pos:column="21">String</name></type> <name pos:line="67" pos:column="28">RemoveDupWords</name><parameter_list pos:line="67" pos:column="42">(<param><decl><type><name pos:line="67" pos:column="43">String</name></type> <name pos:line="67" pos:column="50">input</name></decl></param>)</parameter_list>
            <block pos:line="68" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="69" pos:column="17">var</name></type> <name pos:line="69" pos:column="21">list</name> <init pos:line="69" pos:column="26">= <expr><op:operator pos:line="69" pos:column="28">new</op:operator> <call><name><name pos:line="69" pos:column="32">List</name><argument_list pos:line="69" pos:column="36">&lt;<argument><name pos:line="69" pos:column="37">String</name></argument>&gt;</argument_list></name><argument_list pos:line="69" pos:column="44">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="70" pos:column="17">var</name></type> <name pos:line="70" pos:column="21">words</name> <init pos:line="70" pos:column="27">= <expr><call><name><name pos:line="70" pos:column="29">input</name><op:operator pos:line="70" pos:column="34">.</op:operator><name pos:line="70" pos:column="35">Split</name></name><argument_list pos:line="70" pos:column="40">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for pos:line="71" pos:column="17">for (<init><decl><type><name pos:line="71" pos:column="22">var</name></type> <name pos:line="71" pos:column="26">i</name> <init pos:line="71" pos:column="28">= <expr><call><name><name pos:line="71" pos:column="30">words</name><op:operator pos:line="71" pos:column="35">.</op:operator><name pos:line="71" pos:column="36">Count</name></name><argument_list pos:line="71" pos:column="41">()</argument_list></call> <op:operator pos:line="71" pos:column="44">-</op:operator> <lit:literal type="number" pos:line="71" pos:column="46">1</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="71" pos:column="49">i</name> <op:operator pos:line="71" pos:column="51">&gt;=</op:operator> <lit:literal type="number" pos:line="71" pos:column="54">0</lit:literal></expr>;</condition> <incr><expr><name pos:line="71" pos:column="57">i</name><op:operator pos:line="71" pos:column="58">--</op:operator></expr></incr>)
                <block pos:line="72" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="73" pos:column="21">var</name></type> <name pos:line="73" pos:column="25">word</name> <init pos:line="73" pos:column="30">= <expr><call><name><name pos:line="73" pos:column="32">words</name><op:operator pos:line="73" pos:column="37">.</op:operator><name pos:line="73" pos:column="38">ElementAt</name></name><argument_list pos:line="73" pos:column="47">(<argument><expr><name pos:line="73" pos:column="48">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="74" pos:column="21">var</name></type> <name pos:line="74" pos:column="25">subList</name> <init pos:line="74" pos:column="33">= <expr><call><name><name pos:line="74" pos:column="35">words</name><op:operator pos:line="74" pos:column="40">.</op:operator><name pos:line="74" pos:column="41">SubArray</name></name><argument_list pos:line="74" pos:column="49">(<argument><expr><lit:literal type="number" pos:line="74" pos:column="50">0</lit:literal></expr></argument>, <argument><expr><name pos:line="74" pos:column="53">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if pos:line="75" pos:column="21">if <condition pos:line="75" pos:column="24">(<expr><op:operator pos:line="75" pos:column="25">!</op:operator><call><name><name pos:line="75" pos:column="26">subList</name><op:operator pos:line="75" pos:column="33">.</op:operator><name pos:line="75" pos:column="34">Contains</name></name><argument_list pos:line="75" pos:column="42">(<argument><expr><name pos:line="75" pos:column="43">word</name></expr></argument>, <argument><expr><call><name><name pos:line="75" pos:column="49">ToolHelpers</name><op:operator pos:line="75" pos:column="60">.</op:operator>
                        <name pos:line="76" pos:column="25">GetCaseInsensitiveEqualityComparer</name></name><argument_list pos:line="76" pos:column="59">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="76" pos:column="63">
                    <block pos:line="77" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="78" pos:column="25">list</name><op:operator pos:line="78" pos:column="29">.</op:operator><name pos:line="78" pos:column="30">Insert</name></name><argument_list pos:line="78" pos:column="36">(<argument><expr><lit:literal type="number" pos:line="78" pos:column="37">0</lit:literal></expr></argument>, <argument><expr><name pos:line="78" pos:column="40">word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></for>
                <return pos:line="81" pos:column="17">return <expr><call><name><name pos:line="81" pos:column="24">list</name><op:operator pos:line="81" pos:column="28">.</op:operator><name pos:line="81" pos:column="29">Aggregate</name></name><argument_list pos:line="81" pos:column="38">(<argument><expr><lambda><parameter_list pos:line="81" pos:column="39">(<param><decl><name pos:line="81" pos:column="40">s1</name></decl></param>, <param><decl><name pos:line="81" pos:column="44">s2</name></decl></param>)</parameter_list> <op:operator pos:line="81" pos:column="48">=&gt;</op:operator> <name pos:line="81" pos:column="51">s1</name> <op:operator pos:line="81" pos:column="54">+</op:operator> <lit:literal type="string" pos:line="81" pos:column="56">" "</lit:literal> <op:operator pos:line="81" pos:column="60">+</op:operator> <name pos:line="81" pos:column="62">s2</name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="81" pos:column="65">.</op:operator><call><name pos:line="81" pos:column="66">Trim</name><argument_list pos:line="81" pos:column="70">()</argument_list></call></expr>;</return>
            }</block></function>           

            <constructor><specifier pos:line="84" pos:column="13">protected</specifier> <name pos:line="84" pos:column="23">AbstractQueryInputState</name><parameter_list pos:line="84" pos:column="46">(<param><decl><type><name pos:line="84" pos:column="47">String</name></type> <name pos:line="84" pos:column="54">originalQuery</name></decl></param>)</parameter_list>
            <block pos:line="85" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="86" pos:column="17">this</name><op:operator pos:line="86" pos:column="21">.</op:operator><name pos:line="86" pos:column="22">originalQuery</name></name> <op:operator pos:line="86" pos:column="36">=</op:operator> <name pos:line="86" pos:column="38">originalQuery</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="87" pos:column="17">this</name><op:operator pos:line="87" pos:column="21">.</op:operator><name pos:line="87" pos:column="22">wordsInOriginalQuery</name></name> <op:operator pos:line="87" pos:column="43">=</op:operator> <call><name pos:line="87" pos:column="45">SplitQuery</name><argument_list pos:line="87" pos:column="55">(<argument><expr><name pos:line="87" pos:column="56">originalQuery</name></expr></argument>)</argument_list></call><op:operator pos:line="87" pos:column="70">.</op:operator><call><name pos:line="87" pos:column="71">ToArray</name><argument_list pos:line="87" pos:column="78">()</argument_list></call></expr>;</expr_stmt>
            }</block></constructor>

            <function><type><specifier pos:line="90" pos:column="13">protected</specifier> <name pos:line="90" pos:column="23">String</name><index pos:line="90" pos:column="29">[]</index></type> <name pos:line="90" pos:column="32">SelectQueriesByPrefixTerms</name><parameter_list pos:line="90" pos:column="58">(<param><decl><type><name><name pos:line="90" pos:column="59">IEnumerable</name><argument_list pos:line="90" pos:column="70">&lt;<argument><name pos:line="90" pos:column="71">string</name></argument>&gt;</argument_list></name></type> <name pos:line="90" pos:column="79">queries</name></decl></param>, <param><decl><type><name><name pos:line="90" pos:column="88">IEnumerable</name><argument_list pos:line="90" pos:column="99">&lt;<argument><name pos:line="90" pos:column="100">string</name></argument>&gt;</argument_list></name></type> <name pos:line="90" pos:column="108">startTerms</name></decl></param>)</parameter_list>
            <block pos:line="91" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="92" pos:column="17">var</name></type> <name pos:line="92" pos:column="21">prefix</name> <init pos:line="92" pos:column="28">= <expr><call><name><name pos:line="92" pos:column="30">startTerms</name><op:operator pos:line="92" pos:column="40">.</op:operator><name pos:line="92" pos:column="41">Aggregate</name></name><argument_list pos:line="92" pos:column="50">(<argument><expr><lambda><parameter_list pos:line="92" pos:column="51">(<param><decl><name pos:line="92" pos:column="52">s1</name></decl></param>, <param><decl><name pos:line="92" pos:column="56">s2</name></decl></param>)</parameter_list> <op:operator pos:line="92" pos:column="60">=&gt;</op:operator> <name pos:line="92" pos:column="63">s1</name> <op:operator pos:line="92" pos:column="66">+</op:operator> <name pos:line="92" pos:column="68">s2</name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return pos:line="93" pos:column="17">return <expr><op:operator pos:line="93" pos:column="24">(</op:operator><linq><from pos:line="93" pos:column="25">from <expr><name pos:line="93" pos:column="30">query</name></expr> <in pos:line="93" pos:column="36">in <expr><name pos:line="93" pos:column="39">queries</name></expr></in></from> <let pos:line="93" pos:column="47">let <expr><name pos:line="93" pos:column="51">removeSpace</name> <op:operator pos:line="93" pos:column="63">=</op:operator> <call><name><name pos:line="93" pos:column="65">query</name><op:operator pos:line="93" pos:column="70">.</op:operator><name pos:line="93" pos:column="71">Replace</name></name><argument_list pos:line="93" pos:column="78">(<argument><expr><lit:literal type="string" pos:line="93" pos:column="79">" "</lit:literal></expr></argument>, <argument><expr><name><name pos:line="93" pos:column="84">String</name><op:operator pos:line="93" pos:column="90">.</op:operator><name pos:line="93" pos:column="91">Empty</name></name></expr></argument>)</argument_list></call><op:operator pos:line="93" pos:column="97">.</op:operator><call><name pos:line="93" pos:column="98">Replace</name><argument_list pos:line="93" pos:column="105">(<argument><expr><lit:literal type="string" pos:line="93" pos:column="106">"_"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="93" pos:column="111">String</name><op:operator pos:line="93" pos:column="117">.</op:operator><name pos:line="93" pos:column="118">Empty</name></name></expr></argument>)</argument_list></call></expr></let>
                    <where pos:line="94" pos:column="21">where <expr><call><name><name pos:line="94" pos:column="27">removeSpace</name><op:operator pos:line="94" pos:column="38">.</op:operator><name pos:line="94" pos:column="39">StartsWith</name></name><argument_list pos:line="94" pos:column="49">(<argument><expr><name pos:line="94" pos:column="50">prefix</name></expr></argument>, <argument><expr><name><name pos:line="94" pos:column="58">StringComparison</name><op:operator pos:line="94" pos:column="74">.</op:operator><name pos:line="94" pos:column="75">InvariantCultureIgnoreCase</name></name></expr></argument>)</argument_list></call></expr></where> 
                        <select pos:line="95" pos:column="25">select <expr><name pos:line="95" pos:column="32">query</name></expr></select></linq><op:operator pos:line="95" pos:column="37">)</op:operator><op:operator pos:line="95" pos:column="38">.</op:operator><call><name pos:line="95" pos:column="39">ToArray</name><argument_list pos:line="95" pos:column="46">()</argument_list></call></expr>;</return>
            }</block></function>


            <function><type><specifier pos:line="99" pos:column="13">protected</specifier> <name pos:line="99" pos:column="23">String</name><index pos:line="99" pos:column="29">[]</index></type> <name pos:line="99" pos:column="32">SelectQueriesByContainedTerms</name><parameter_list pos:line="99" pos:column="61">(<param><decl><type><name><name pos:line="99" pos:column="62">IEnumerable</name><argument_list pos:line="99" pos:column="73">&lt;<argument><name pos:line="99" pos:column="74">String</name></argument>&gt;</argument_list></name></type> <name pos:line="99" pos:column="82">queries</name></decl></param>, <param><decl><type><name><name pos:line="99" pos:column="91">IEnumerable</name><argument_list pos:line="99" pos:column="102">&lt;<argument><name pos:line="99" pos:column="103">string</name></argument>&gt;</argument_list></name></type> <name pos:line="99" pos:column="111">terms</name></decl></param>)</parameter_list>
            <block pos:line="100" pos:column="13">{
                <return pos:line="101" pos:column="17">return <expr><call><name><name pos:line="101" pos:column="24">queries</name><op:operator pos:line="101" pos:column="31">.</op:operator><name pos:line="101" pos:column="32">Where</name></name><argument_list pos:line="101" pos:column="37">(<argument><expr><lambda><name pos:line="101" pos:column="38">q</name> <op:operator pos:line="101" pos:column="40">=&gt;</op:operator> <call><name pos:line="101" pos:column="43">SplitQuery</name><argument_list pos:line="101" pos:column="53">(<argument><expr><name pos:line="101" pos:column="54">q</name></expr></argument>)</argument_list></call><op:operator pos:line="101" pos:column="56">.</op:operator><call><name pos:line="101" pos:column="57">Any</name><argument_list pos:line="101" pos:column="60">(<argument><expr><lambda><name pos:line="101" pos:column="61">t</name> <op:operator pos:line="101" pos:column="63">=&gt;</op:operator> <call><name><name pos:line="101" pos:column="66">terms</name><op:operator pos:line="101" pos:column="71">.</op:operator><name pos:line="101" pos:column="72">Contains</name></name><argument_list pos:line="101" pos:column="80">(<argument><expr><name pos:line="101" pos:column="81">t</name></expr></argument>, <argument><expr><call><name><name pos:line="101" pos:column="84">ToolHelpers</name><op:operator pos:line="101" pos:column="95">.</op:operator>
                    <name pos:line="102" pos:column="21">GetCaseInsensitiveEqualityComparer</name></name><argument_list pos:line="102" pos:column="55">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="102" pos:column="60">.</op:operator><call><name pos:line="102" pos:column="61">ToArray</name><argument_list pos:line="102" pos:column="68">()</argument_list></call></expr>;</return>
            }</block></function>

            <function><type><specifier pos:line="105" pos:column="13">protected</specifier> <name><name pos:line="105" pos:column="23">IEnumerable</name><argument_list pos:line="105" pos:column="34">&lt;<argument><name pos:line="105" pos:column="35">string</name></argument>&gt;</argument_list></name></type> <name pos:line="105" pos:column="43">SortQueriesByWordsCoOccurrence</name><parameter_list pos:line="105" pos:column="73">(<param><decl><type><name><name pos:line="105" pos:column="74">IEnumerable</name><argument_list pos:line="105" pos:column="85">&lt;<argument><name pos:line="105" pos:column="86">string</name></argument>&gt;</argument_list></name></type> <name pos:line="105" pos:column="94">knownWords</name></decl></param>, 
                <param><decl><type><name><name pos:line="106" pos:column="17">IEnumerable</name><argument_list pos:line="106" pos:column="28">&lt;<argument><name pos:line="106" pos:column="29">string</name></argument>&gt;</argument_list></name></type> <name pos:line="106" pos:column="37">queries</name></decl></param>, <param><decl><type><name><name pos:line="106" pos:column="46">Func</name><argument_list pos:line="106" pos:column="50">&lt;<argument><name pos:line="106" pos:column="51">string</name></argument>, <argument><name><name pos:line="106" pos:column="59">IEnumerable</name><argument_list pos:line="106" pos:column="70">&lt;<argument><name pos:line="106" pos:column="71">string</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="106" pos:column="80">GetWordsInQuery</name></decl></param>)</parameter_list>
            <block pos:line="107" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="108" pos:column="17">var</name></type> <name pos:line="108" pos:column="21">list</name> <init pos:line="108" pos:column="26">= <expr><op:operator pos:line="108" pos:column="28">new</op:operator> <call><name><name pos:line="108" pos:column="32">List</name><argument_list pos:line="108" pos:column="36">&lt;<argument><name pos:line="108" pos:column="37">ScoredQuery</name></argument>&gt;</argument_list></name><argument_list pos:line="108" pos:column="49">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name pos:line="109" pos:column="17">knownWords</name> <op:operator pos:line="109" pos:column="28">=</op:operator> <call><name><name pos:line="109" pos:column="30">knownWords</name><op:operator pos:line="109" pos:column="40">.</op:operator><name pos:line="109" pos:column="41">ToList</name></name><argument_list pos:line="109" pos:column="47">()</argument_list></call></expr>;</expr_stmt>
                <foreach pos:line="110" pos:column="17">foreach (<init><decl><type><name pos:line="110" pos:column="26">var</name></type> <name pos:line="110" pos:column="30">query</name> <range pos:line="110" pos:column="36">in <expr><name pos:line="110" pos:column="39">queries</name></expr></range></decl></init>)
                <block pos:line="111" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="112" pos:column="21">var</name></type> <name pos:line="112" pos:column="25">words</name> <init pos:line="112" pos:column="31">= <expr><call><name pos:line="112" pos:column="33">GetWordsInQuery</name><argument_list pos:line="112" pos:column="48">(<argument><expr><name pos:line="112" pos:column="49">query</name></expr></argument>)</argument_list></call><op:operator pos:line="112" pos:column="55">.</op:operator><call><name pos:line="112" pos:column="56">ToArray</name><argument_list pos:line="112" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="113" pos:column="21">double</name></type> <name pos:line="113" pos:column="28">averageCoOccur</name> <init pos:line="113" pos:column="43">= <expr><call><name pos:line="113" pos:column="45">CalculateAverageCoOccurrence</name><argument_list pos:line="113" pos:column="73">(<argument><expr><call><name><name pos:line="113" pos:column="74">knownWords</name><op:operator pos:line="113" pos:column="84">.</op:operator><name pos:line="113" pos:column="85">ToArray</name></name><argument_list pos:line="113" pos:column="92">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="113" pos:column="96">words</name><op:operator pos:line="113" pos:column="101">.</op:operator><name pos:line="113" pos:column="102">ToArray</name></name><argument_list pos:line="113" pos:column="109">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="114" pos:column="21">list</name><op:operator pos:line="114" pos:column="25">.</op:operator><name pos:line="114" pos:column="26">Add</name></name><argument_list pos:line="114" pos:column="29">(<argument><expr><op:operator pos:line="114" pos:column="30">new</op:operator> <call><name pos:line="114" pos:column="34">ScoredQuery</name><argument_list pos:line="114" pos:column="45">(<argument><expr><name pos:line="114" pos:column="46">query</name></expr></argument>, <argument><expr><name pos:line="114" pos:column="53">averageCoOccur</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>
                <decl_stmt><decl><type><name pos:line="116" pos:column="17">var</name></type> <name pos:line="116" pos:column="21">sortedList</name> <init pos:line="116" pos:column="32">= <expr><call><name><name pos:line="116" pos:column="34">list</name><op:operator pos:line="116" pos:column="38">.</op:operator><name pos:line="116" pos:column="39">OrderByDescending</name></name><argument_list pos:line="116" pos:column="56">(<argument><expr><lambda><name pos:line="116" pos:column="57">sq</name> <op:operator pos:line="116" pos:column="60">=&gt;</op:operator> <name><name pos:line="116" pos:column="63">sq</name><op:operator pos:line="116" pos:column="65">.</op:operator><name pos:line="116" pos:column="66">Score</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="116" pos:column="72">.</op:operator><call><name pos:line="116" pos:column="73">ToArray</name><argument_list pos:line="116" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>

                <return pos:line="118" pos:column="17">return <expr><call><name><name pos:line="118" pos:column="24">sortedList</name><op:operator pos:line="118" pos:column="34">.</op:operator><name pos:line="118" pos:column="35">Select</name></name><argument_list pos:line="118" pos:column="41">(<argument><expr><lambda><name pos:line="118" pos:column="42">sq</name> <op:operator pos:line="118" pos:column="45">=&gt;</op:operator> <name><name pos:line="118" pos:column="48">sq</name><op:operator pos:line="118" pos:column="50">.</op:operator><name pos:line="118" pos:column="51">Query</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="118" pos:column="57">.</op:operator><call><name pos:line="118" pos:column="58">ToArray</name><argument_list pos:line="118" pos:column="65">()</argument_list></call></expr>;</return>
            }</block></function>

            <function><type><specifier pos:line="121" pos:column="13">private</specifier> <name pos:line="121" pos:column="21">double</name></type> <name pos:line="121" pos:column="28">CalculateAverageCoOccurrence</name><parameter_list pos:line="121" pos:column="56">(<param><decl><type><name><name pos:line="121" pos:column="57">String</name><index pos:line="121" pos:column="63">[]</index></name></type> <name pos:line="121" pos:column="66">knownWords</name></decl></param>, <param><decl><type><name><name pos:line="121" pos:column="78">String</name><index pos:line="121" pos:column="84">[]</index></name></type> <name pos:line="121" pos:column="87">words</name></decl></param>)</parameter_list>
            <block pos:line="122" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="123" pos:column="17">var</name></type> <name pos:line="123" pos:column="21">table</name> <init pos:line="123" pos:column="27">= <expr><call><name><name pos:line="123" pos:column="29">ServiceLocator</name><op:operator pos:line="123" pos:column="43">.</op:operator><name><name pos:line="123" pos:column="44">Resolve</name><argument_list pos:line="123" pos:column="51">&lt;<argument><name pos:line="123" pos:column="52">DictionaryBasedSplitter</name></argument>&gt;</argument_list></name></name><argument_list pos:line="123" pos:column="76">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="124" pos:column="17">double</name></type> <name pos:line="124" pos:column="24">pairCount</name> <init pos:line="124" pos:column="34">= <expr><call><name><name pos:line="124" pos:column="36">knownWords</name><op:operator pos:line="124" pos:column="46">.</op:operator><name pos:line="124" pos:column="47">Count</name></name><argument_list pos:line="124" pos:column="52">()</argument_list></call> <op:operator pos:line="124" pos:column="55">*</op:operator> <call><name><name pos:line="124" pos:column="57">words</name><op:operator pos:line="124" pos:column="62">.</op:operator><name pos:line="124" pos:column="63">Count</name></name><argument_list pos:line="124" pos:column="68">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="125" pos:column="17">double</name></type> <name pos:line="125" pos:column="24">sum</name> <init pos:line="125" pos:column="28">= <expr><lit:literal type="number" pos:line="125" pos:column="30">0.0</lit:literal></expr></init></decl>;</decl_stmt>
                <foreach pos:line="126" pos:column="17">foreach (<init><decl><type><name pos:line="126" pos:column="26">var</name></type> <name pos:line="126" pos:column="30">word1</name> <range pos:line="126" pos:column="36">in <expr><name pos:line="126" pos:column="39">words</name></expr></range></decl></init>)
                <block pos:line="127" pos:column="17">{
                    <foreach pos:line="128" pos:column="21">foreach (<init><decl><type><name pos:line="128" pos:column="30">var</name></type> <name pos:line="128" pos:column="34">word2</name> <range pos:line="128" pos:column="40">in <expr><name pos:line="128" pos:column="43">knownWords</name></expr></range></decl></init>)
                    <block pos:line="129" pos:column="21">{
                        <expr_stmt><expr><name pos:line="130" pos:column="25">sum</name> <op:operator pos:line="130" pos:column="29">+=</op:operator> <call><name><name pos:line="130" pos:column="32">table</name><op:operator pos:line="130" pos:column="37">.</op:operator><name pos:line="130" pos:column="38">GetCoOccurrenceCount</name></name><argument_list pos:line="130" pos:column="58">(<argument><expr><name pos:line="130" pos:column="59">word1</name></expr></argument>, <argument><expr><name pos:line="130" pos:column="66">word2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></foreach>
                }</block></foreach>
                <return pos:line="133" pos:column="17">return <expr><name pos:line="133" pos:column="24">sum</name><op:operator pos:line="133" pos:column="27">/</op:operator><name pos:line="133" pos:column="28">pairCount</name></expr>;</return>
            }</block></function>


            <function><type><specifier pos:line="137" pos:column="13">protected</specifier> <name><name pos:line="137" pos:column="23">IEnumerable</name><argument_list pos:line="137" pos:column="34">&lt;<argument><name pos:line="137" pos:column="35">string</name></argument>&gt;</argument_list></name></type> <name pos:line="137" pos:column="43">SplitQuery</name><parameter_list pos:line="137" pos:column="53">(<param><decl><type><name pos:line="137" pos:column="54">String</name></type> <name pos:line="137" pos:column="61">query</name></decl></param>)</parameter_list>
            <block pos:line="138" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="139" pos:column="17">var</name></type> <name pos:line="139" pos:column="21">words</name> <init pos:line="139" pos:column="27">= <expr><call><name><name pos:line="139" pos:column="29">query</name><op:operator pos:line="139" pos:column="34">.</op:operator><name pos:line="139" pos:column="35">Split</name></name><argument_list pos:line="139" pos:column="40">()</argument_list></call><op:operator pos:line="139" pos:column="42">.</op:operator><call><name pos:line="139" pos:column="43">Where</name><argument_list pos:line="139" pos:column="48">(<argument><expr><lambda><name pos:line="139" pos:column="49">t</name> <op:operator pos:line="139" pos:column="51">=&gt;</op:operator> <op:operator pos:line="139" pos:column="54">!</op:operator><call><name><name pos:line="139" pos:column="55">String</name><op:operator pos:line="139" pos:column="61">.</op:operator><name pos:line="139" pos:column="62">IsNullOrWhiteSpace</name></name><argument_list pos:line="139" pos:column="80">(<argument><expr><name pos:line="139" pos:column="81">t</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="139" pos:column="84">.</op:operator><call><name pos:line="139" pos:column="85">ToArray</name><argument_list pos:line="139" pos:column="92">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <return pos:line="140" pos:column="17">return <expr><call><name><name pos:line="140" pos:column="24">words</name><op:operator pos:line="140" pos:column="29">.</op:operator><name pos:line="140" pos:column="30">Any</name></name><argument_list pos:line="140" pos:column="33">()</argument_list></call> <op:operator pos:line="140" pos:column="36">?</op:operator> <name pos:line="140" pos:column="38">words</name> <op:operator pos:line="140" pos:column="44">:</op:operator> <op:operator pos:line="140" pos:column="46">new</op:operator><index pos:line="140" pos:column="49">[]</index> <block pos:line="140" pos:column="52">{ <expr><name><name pos:line="140" pos:column="54">String</name><op:operator pos:line="140" pos:column="60">.</op:operator><name pos:line="140" pos:column="61">Empty</name></name></expr> }</block></expr>;</return>
            }</block></function>
        }</block></class>

        <class><specifier pos:line="144" pos:column="9">private</specifier> class <name pos:line="144" pos:column="23">FinishedWordInputState</name> <super pos:line="144" pos:column="46">: <name pos:line="144" pos:column="48">AbstractQueryInputState</name></super>
        <block pos:line="145" pos:column="9">{
            <constructor><specifier pos:line="146" pos:column="13">public</specifier> <name pos:line="146" pos:column="20">FinishedWordInputState</name><parameter_list pos:line="146" pos:column="42">(<param><decl><type><name pos:line="146" pos:column="43">string</name></type> <name pos:line="146" pos:column="50">originalQuery</name></decl></param>)</parameter_list>
                <member_list pos:line="147" pos:column="17">: <call><name pos:line="147" pos:column="19">base</name><argument_list pos:line="147" pos:column="23">(<argument><expr><name pos:line="147" pos:column="24">originalQuery</name></expr></argument>)</argument_list></call>
            </member_list><block pos:line="148" pos:column="13">{
            }</block></constructor>

            <function><type><specifier pos:line="151" pos:column="13">public</specifier> <specifier pos:line="151" pos:column="20">override</specifier> <name pos:line="151" pos:column="29">bool</name></type> <name pos:line="151" pos:column="34">IsInState</name><parameter_list pos:line="151" pos:column="43">()</parameter_list>
            <block pos:line="152" pos:column="13">{
                <return pos:line="153" pos:column="17">return <expr><call><name><name pos:line="153" pos:column="24">originalQuery</name><op:operator pos:line="153" pos:column="37">.</op:operator><name pos:line="153" pos:column="38">EndsWith</name></name><argument_list pos:line="153" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="153" pos:column="47">" "</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>

            <function><type><specifier pos:line="156" pos:column="13">protected</specifier> <specifier pos:line="156" pos:column="23">override</specifier> <name><name pos:line="156" pos:column="32">IEnumerable</name><argument_list pos:line="156" pos:column="43">&lt;<argument><name pos:line="156" pos:column="44">ISwumRecommendedQuery</name></argument>&gt;</argument_list></name></type> <name pos:line="156" pos:column="67">InternalSortQueries</name><parameter_list pos:line="156" pos:column="86">(<param><decl><type><name><name pos:line="156" pos:column="87">string</name><index pos:line="156" pos:column="93">[]</index></name></type> <name pos:line="156" pos:column="96">queries</name></decl></param>)</parameter_list>
            <block pos:line="157" pos:column="13">{
                <expr_stmt><expr><name pos:line="158" pos:column="17">queries</name> <op:operator pos:line="158" pos:column="25">=</op:operator> <call><name pos:line="158" pos:column="27">SelectQueriesByContainedTerms</name><argument_list pos:line="158" pos:column="56">(<argument><expr><name pos:line="158" pos:column="57">queries</name></expr></argument>, <argument><expr><name pos:line="158" pos:column="66">wordsInOriginalQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name pos:line="160" pos:column="17">var</name></type> <name pos:line="160" pos:column="21">group1</name> <init pos:line="160" pos:column="28">= <expr><call><name pos:line="160" pos:column="30">SelectQueriesByPrefixTerms</name><argument_list pos:line="160" pos:column="56">(<argument><expr><name pos:line="160" pos:column="57">queries</name></expr></argument>, <argument><expr><name pos:line="160" pos:column="66">wordsInOriginalQuery</name></expr></argument>)</argument_list></call><op:operator pos:line="160" pos:column="87">.</op:operator><call><name pos:line="160" pos:column="88">ToList</name><argument_list pos:line="160" pos:column="94">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="161" pos:column="17">var</name></type> <name pos:line="161" pos:column="21">group2</name> <init pos:line="161" pos:column="28">= <expr><call><name><name pos:line="161" pos:column="30">queries</name><op:operator pos:line="161" pos:column="37">.</op:operator><name pos:line="161" pos:column="38">Except</name></name><argument_list pos:line="161" pos:column="44">(<argument><expr><name pos:line="161" pos:column="45">group1</name></expr></argument>)</argument_list></call><op:operator pos:line="161" pos:column="52">.</op:operator><call><name pos:line="161" pos:column="53">ToList</name><argument_list pos:line="161" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><name pos:line="163" pos:column="17">group1</name> <op:operator pos:line="163" pos:column="24">=</op:operator> <call><name pos:line="163" pos:column="26">SortQueriesByWordsCoOccurrence</name><argument_list pos:line="163" pos:column="56">(<argument><expr><name pos:line="163" pos:column="57">wordsInOriginalQuery</name></expr></argument>, <argument><expr><name pos:line="163" pos:column="79">group1</name></expr></argument>, <argument><expr><name pos:line="163" pos:column="87">GetWordsInQuery</name></expr></argument>)</argument_list></call><op:operator pos:line="163" pos:column="103">.</op:operator><call><name pos:line="163" pos:column="104">ToList</name><argument_list pos:line="163" pos:column="110">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="164" pos:column="17">group2</name> <op:operator pos:line="164" pos:column="24">=</op:operator> <call><name pos:line="164" pos:column="26">SortQueriesByWordsCoOccurrence</name><argument_list pos:line="164" pos:column="56">(<argument><expr><name pos:line="164" pos:column="57">wordsInOriginalQuery</name></expr></argument>, <argument><expr><name pos:line="164" pos:column="79">group2</name></expr></argument>, <argument><expr><name pos:line="164" pos:column="87">GetWordsInQuery</name></expr></argument>)</argument_list></call><op:operator pos:line="164" pos:column="103">.</op:operator><call><name pos:line="164" pos:column="104">ToList</name><argument_list pos:line="164" pos:column="110">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="165" pos:column="17">group1</name><op:operator pos:line="165" pos:column="23">.</op:operator><name pos:line="165" pos:column="24">AddRange</name></name><argument_list pos:line="165" pos:column="32">(<argument><expr><name pos:line="165" pos:column="33">group2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:line="167" pos:column="17">return <expr><call><name><name pos:line="167" pos:column="24">group1</name><op:operator pos:line="167" pos:column="30">.</op:operator><name pos:line="167" pos:column="31">Select</name></name><argument_list pos:line="167" pos:column="37">(<argument><expr><lambda><name pos:line="167" pos:column="38">s</name> <op:operator pos:line="167" pos:column="40">=&gt;</op:operator> <op:operator pos:line="167" pos:column="43">new</op:operator> <call><name pos:line="167" pos:column="47">InternalSwumRecommendedQuey</name><argument_list pos:line="167" pos:column="74">(<argument><expr><name pos:line="167" pos:column="75">s</name></expr></argument>, <argument><expr><name><name pos:line="167" pos:column="78">SwumRecommnedationType</name><op:operator pos:line="167" pos:column="100">.</op:operator><name pos:line="167" pos:column="101">Other</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>

            <function><type><specifier pos:line="170" pos:column="13">private</specifier> <name><name pos:line="170" pos:column="21">IEnumerable</name><argument_list pos:line="170" pos:column="32">&lt;<argument><name pos:line="170" pos:column="33">string</name></argument>&gt;</argument_list></name></type> <name pos:line="170" pos:column="41">GetWordsInQuery</name><parameter_list pos:line="170" pos:column="56">(<param><decl><type><name pos:line="170" pos:column="57">string</name></type> <name pos:line="170" pos:column="64">q</name></decl></param>)</parameter_list>
            <block pos:line="171" pos:column="13">{
                <return pos:line="172" pos:column="17">return <expr><call><name pos:line="172" pos:column="24">SplitQuery</name><argument_list pos:line="172" pos:column="34">(<argument><expr><name pos:line="172" pos:column="35">q</name></expr></argument>)</argument_list></call><op:operator pos:line="172" pos:column="37">.</op:operator><call><name pos:line="172" pos:column="38">Except</name><argument_list pos:line="172" pos:column="44">(<argument><expr><name pos:line="172" pos:column="45">wordsInOriginalQuery</name></expr></argument>, <argument><expr><call><name><name pos:line="172" pos:column="67">ToolHelpers</name><op:operator pos:line="172" pos:column="78">.</op:operator>
                        <name pos:line="173" pos:column="25">GetCaseInsensitiveEqualityComparer</name></name><argument_list pos:line="173" pos:column="59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class>

        <class><specifier pos:line="177" pos:column="9">private</specifier> class <name pos:line="177" pos:column="23">NotFinishedWordInputState</name> <super pos:line="177" pos:column="49">: <name pos:line="177" pos:column="51">AbstractQueryInputState</name></super>
        <block pos:line="178" pos:column="9">{
            <constructor><specifier pos:line="179" pos:column="13">public</specifier> <name pos:line="179" pos:column="20">NotFinishedWordInputState</name><parameter_list pos:line="179" pos:column="45">(<param><decl><type><name pos:line="179" pos:column="46">string</name></type> <name pos:line="179" pos:column="53">originalQuery</name></decl></param>)</parameter_list>
                <member_list pos:line="180" pos:column="17">: <call><name pos:line="180" pos:column="19">base</name><argument_list pos:line="180" pos:column="23">(<argument><expr><name pos:line="180" pos:column="24">originalQuery</name></expr></argument>)</argument_list></call>
            </member_list><block pos:line="181" pos:column="13">{
            }</block></constructor>

            <function><type><specifier pos:line="184" pos:column="13">public</specifier> <specifier pos:line="184" pos:column="20">override</specifier> <name pos:line="184" pos:column="29">bool</name></type> <name pos:line="184" pos:column="34">IsInState</name><parameter_list pos:line="184" pos:column="43">()</parameter_list>
            <block pos:line="185" pos:column="13">{
                <return pos:line="186" pos:column="17">return <expr><op:operator pos:line="186" pos:column="24">!</op:operator><call><name><name pos:line="186" pos:column="25">originalQuery</name><op:operator pos:line="186" pos:column="38">.</op:operator><name pos:line="186" pos:column="39">EndsWith</name></name><argument_list pos:line="186" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="186" pos:column="48">" "</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="186" pos:column="53">&amp;&amp;</op:operator> <op:operator pos:line="186" pos:column="56">!</op:operator><call><name pos:line="186" pos:column="57">IsWordInDictionary</name><argument_list pos:line="186" pos:column="75">(<argument><expr><call><name><name pos:line="186" pos:column="76">wordsInOriginalQuery</name><op:operator pos:line="186" pos:column="96">.</op:operator><name pos:line="186" pos:column="97">Last</name></name><argument_list pos:line="186" pos:column="101">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>

            <function><type><specifier pos:line="189" pos:column="13">protected</specifier> <specifier pos:line="189" pos:column="23">override</specifier> <name><name pos:line="189" pos:column="32">IEnumerable</name><argument_list pos:line="189" pos:column="43">&lt;<argument><name pos:line="189" pos:column="44">ISwumRecommendedQuery</name></argument>&gt;</argument_list></name></type> <name pos:line="189" pos:column="67">InternalSortQueries</name><parameter_list pos:line="189" pos:column="86">(<param><decl><type><name><name pos:line="189" pos:column="87">string</name><index pos:line="189" pos:column="93">[]</index></name></type> <name pos:line="189" pos:column="96">queries</name></decl></param>)</parameter_list>
            <block pos:line="190" pos:column="13">{
                <expr_stmt><expr><name pos:line="191" pos:column="17">queries</name> <op:operator pos:line="191" pos:column="25">=</op:operator> <call><name><name pos:line="191" pos:column="27">wordsInOriginalQuery</name><op:operator pos:line="191" pos:column="47">.</op:operator><name pos:line="191" pos:column="48">Count</name></name><argument_list pos:line="191" pos:column="53">()</argument_list></call> <op:operator pos:line="191" pos:column="56">&gt;</op:operator> <lit:literal type="number" pos:line="191" pos:column="58">1</lit:literal> <op:operator pos:line="191" pos:column="60">?</op:operator> <call><name pos:line="191" pos:column="62">SelectQueriesByContainedTerms</name><argument_list pos:line="191" pos:column="91">(<argument><expr><name pos:line="191" pos:column="92">queries</name></expr></argument>, 
                    <argument><expr><call><name><name pos:line="192" pos:column="21">wordsInOriginalQuery</name><op:operator pos:line="192" pos:column="41">.</op:operator>
                    <name pos:line="193" pos:column="21">SubArray</name></name><argument_list pos:line="193" pos:column="29">(<argument><expr><lit:literal type="number" pos:line="193" pos:column="30">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="193" pos:column="33">wordsInOriginalQuery</name><op:operator pos:line="193" pos:column="53">.</op:operator><name pos:line="193" pos:column="54">Count</name></name><argument_list pos:line="193" pos:column="59">()</argument_list></call> <op:operator pos:line="193" pos:column="62">-</op:operator> <lit:literal type="number" pos:line="193" pos:column="64">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="193" pos:column="68">:</op:operator> <name pos:line="193" pos:column="70">queries</name></expr>;</expr_stmt>

                <decl_stmt><decl><type><name pos:line="195" pos:column="17">var</name></type> <name pos:line="195" pos:column="21">group1</name> <init pos:line="195" pos:column="28">= <expr><call><name pos:line="195" pos:column="30">SelectQueriesByPrefixTerms</name><argument_list pos:line="195" pos:column="56">(<argument><expr><name pos:line="195" pos:column="57">queries</name></expr></argument>, <argument><expr><name pos:line="195" pos:column="66">wordsInOriginalQuery</name></expr></argument>)</argument_list></call><op:operator pos:line="195" pos:column="87">.</op:operator><call><name pos:line="195" pos:column="88">ToList</name><argument_list pos:line="195" pos:column="94">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="196" pos:column="17">var</name></type> <name pos:line="196" pos:column="21">group2</name> <init pos:line="196" pos:column="28">= <expr><call><name><name pos:line="196" pos:column="30">queries</name><op:operator pos:line="196" pos:column="37">.</op:operator><name pos:line="196" pos:column="38">Except</name></name><argument_list pos:line="196" pos:column="44">(<argument><expr><name pos:line="196" pos:column="45">group1</name></expr></argument>)</argument_list></call><op:operator pos:line="196" pos:column="52">.</op:operator><call><name pos:line="196" pos:column="53">ToList</name><argument_list pos:line="196" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><name pos:line="198" pos:column="17">group1</name> <op:operator pos:line="198" pos:column="24">=</op:operator> <call><name><name pos:line="198" pos:column="26">group1</name><op:operator pos:line="198" pos:column="32">.</op:operator><name pos:line="198" pos:column="33">OrderBy</name></name><argument_list pos:line="198" pos:column="40">(<argument><expr><lambda><name pos:line="198" pos:column="41">q</name> <op:operator pos:line="198" pos:column="43">=&gt;</op:operator> <name pos:line="198" pos:column="46">q</name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="198" pos:column="48">.</op:operator><call><name pos:line="198" pos:column="49">ToList</name><argument_list pos:line="198" pos:column="55">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name pos:line="200" pos:column="17">group2</name> <op:operator pos:line="200" pos:column="24">=</op:operator> <call><name><name pos:line="200" pos:column="26">wordsInOriginalQuery</name><op:operator pos:line="200" pos:column="46">.</op:operator><name pos:line="200" pos:column="47">Count</name></name><argument_list pos:line="200" pos:column="52">()</argument_list></call> <op:operator pos:line="200" pos:column="55">&gt;</op:operator> <lit:literal type="number" pos:line="200" pos:column="57">1</lit:literal> <op:operator pos:line="200" pos:column="59">?</op:operator>
                    <call><name pos:line="201" pos:column="21">SortQueriesByWordsCoOccurrence</name><argument_list pos:line="201" pos:column="51">(<argument><expr><call><name><name pos:line="201" pos:column="52">wordsInOriginalQuery</name><op:operator pos:line="201" pos:column="72">.</op:operator><name pos:line="201" pos:column="73">SubArray</name></name><argument_list pos:line="201" pos:column="81">(<argument><expr><lit:literal type="number" pos:line="201" pos:column="82">0</lit:literal></expr></argument>, 
                        <argument><expr><call><name><name pos:line="202" pos:column="25">wordsInOriginalQuery</name><op:operator pos:line="202" pos:column="45">.</op:operator><name pos:line="202" pos:column="46">Count</name></name><argument_list pos:line="202" pos:column="51">()</argument_list></call> <op:operator pos:line="202" pos:column="54">-</op:operator> <lit:literal type="number" pos:line="202" pos:column="56">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="202" pos:column="60">queries</name></expr></argument>, 
                            <argument><expr><name pos:line="203" pos:column="29">GetWordsInQuery</name></expr></argument>)</argument_list></call><op:operator pos:line="203" pos:column="45">.</op:operator><call><name pos:line="203" pos:column="46">ToList</name><argument_list pos:line="203" pos:column="52">()</argument_list></call> <op:operator pos:line="203" pos:column="55">:</op:operator> <call><name><name pos:line="203" pos:column="57">group2</name><op:operator pos:line="203" pos:column="63">.</op:operator><name pos:line="203" pos:column="64">OrderBy</name></name><argument_list pos:line="203" pos:column="71">(<argument><expr><lambda><name pos:line="203" pos:column="72">q</name> <op:operator pos:line="203" pos:column="74">=&gt;</op:operator> <name pos:line="203" pos:column="77">q</name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="203" pos:column="79">.</op:operator><call><name pos:line="203" pos:column="80">ToList</name><argument_list pos:line="203" pos:column="86">()</argument_list></call></expr>;</expr_stmt>
   
                <expr_stmt><expr><call><name><name pos:line="205" pos:column="17">group1</name><op:operator pos:line="205" pos:column="23">.</op:operator><name pos:line="205" pos:column="24">AddRange</name></name><argument_list pos:line="205" pos:column="32">(<argument><expr><name pos:line="205" pos:column="33">group2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="206" pos:column="17">return <expr><call><name><name pos:line="206" pos:column="24">group1</name><op:operator pos:line="206" pos:column="30">.</op:operator><name pos:line="206" pos:column="31">Select</name></name><argument_list pos:line="206" pos:column="37">(<argument><expr><lambda><name pos:line="206" pos:column="38">s</name> <op:operator pos:line="206" pos:column="40">=&gt;</op:operator> <op:operator pos:line="206" pos:column="43">new</op:operator> <call><name pos:line="206" pos:column="47">InternalSwumRecommendedQuey</name><argument_list pos:line="206" pos:column="74">(<argument><expr><name pos:line="206" pos:column="75">s</name></expr></argument>, 
                    <argument><expr><name><name pos:line="207" pos:column="21">SwumRecommnedationType</name><op:operator pos:line="207" pos:column="43">.</op:operator><name pos:line="207" pos:column="44">Other</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>

            <function><type><specifier pos:line="210" pos:column="13">private</specifier> <name><name pos:line="210" pos:column="21">IEnumerable</name><argument_list pos:line="210" pos:column="32">&lt;<argument><name pos:line="210" pos:column="33">string</name></argument>&gt;</argument_list></name></type> <name pos:line="210" pos:column="41">GetWordsInQuery</name><parameter_list pos:line="210" pos:column="56">(<param><decl><type><name pos:line="210" pos:column="57">string</name></type> <name pos:line="210" pos:column="64">query</name></decl></param>)</parameter_list>
            <block pos:line="211" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="212" pos:column="17">var</name></type> <name pos:line="212" pos:column="21">knownWords</name> <init pos:line="212" pos:column="32">= <expr><call><name><name pos:line="212" pos:column="34">wordsInOriginalQuery</name><op:operator pos:line="212" pos:column="54">.</op:operator><name pos:line="212" pos:column="55">Count</name></name><argument_list pos:line="212" pos:column="60">()</argument_list></call> <op:operator pos:line="212" pos:column="63">&gt;</op:operator> <lit:literal type="number" pos:line="212" pos:column="65">1</lit:literal> <op:operator pos:line="212" pos:column="67">?</op:operator> <call><name><name pos:line="212" pos:column="69">wordsInOriginalQuery</name><op:operator pos:line="212" pos:column="89">.</op:operator><name pos:line="212" pos:column="90">SubArray</name></name><argument_list pos:line="212" pos:column="98">(<argument><expr><lit:literal type="number" pos:line="212" pos:column="99">0</lit:literal></expr></argument>,
                    <argument><expr><call><name><name pos:line="213" pos:column="21">wordsInOriginalQuery</name><op:operator pos:line="213" pos:column="41">.</op:operator><name pos:line="213" pos:column="42">Count</name></name><argument_list pos:line="213" pos:column="47">()</argument_list></call> <op:operator pos:line="213" pos:column="50">-</op:operator> <lit:literal type="number" pos:line="213" pos:column="52">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="213" pos:column="55">:</op:operator> <op:operator pos:line="213" pos:column="57">new</op:operator> <name><name pos:line="213" pos:column="61">String</name><index pos:line="213" pos:column="67">[]</index></name> <block pos:line="213" pos:column="70">{ }</block></expr></init></decl>;</decl_stmt>
                <return pos:line="214" pos:column="17">return <expr><call><name pos:line="214" pos:column="24">SplitQuery</name><argument_list pos:line="214" pos:column="34">(<argument><expr><name pos:line="214" pos:column="35">query</name></expr></argument>)</argument_list></call><op:operator pos:line="214" pos:column="41">.</op:operator><call><name pos:line="214" pos:column="42">Except</name><argument_list pos:line="214" pos:column="48">(<argument><expr><name pos:line="214" pos:column="49">knownWords</name></expr></argument>, <argument><expr><call><name><name pos:line="214" pos:column="61">ToolHelpers</name><op:operator pos:line="214" pos:column="72">.</op:operator>
                    <name pos:line="215" pos:column="21">GetCaseInsensitiveEqualityComparer</name></name><argument_list pos:line="215" pos:column="55">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class>

        <class><specifier pos:line="219" pos:column="9">private</specifier> class <name pos:line="219" pos:column="23">MiddleInputState</name> <super pos:line="219" pos:column="40">: <name pos:line="219" pos:column="42">AbstractQueryInputState</name></super>
        <block pos:line="220" pos:column="9">{
            <constructor><specifier pos:line="221" pos:column="13">public</specifier> <name pos:line="221" pos:column="20">MiddleInputState</name><parameter_list pos:line="221" pos:column="36">(<param><decl><type><name pos:line="221" pos:column="37">string</name></type> <name pos:line="221" pos:column="44">originalQuery</name></decl></param>)</parameter_list>
                <member_list pos:line="222" pos:column="17">: <call><name pos:line="222" pos:column="19">base</name><argument_list pos:line="222" pos:column="23">(<argument><expr><name pos:line="222" pos:column="24">originalQuery</name></expr></argument>)</argument_list></call>
            </member_list><block pos:line="223" pos:column="13">{
            }</block></constructor>

            <function><type><specifier pos:line="226" pos:column="13">public</specifier> <specifier pos:line="226" pos:column="20">override</specifier> <name pos:line="226" pos:column="29">bool</name></type> <name pos:line="226" pos:column="34">IsInState</name><parameter_list pos:line="226" pos:column="43">()</parameter_list>
            <block pos:line="227" pos:column="13">{
                <return pos:line="228" pos:column="17">return <expr><op:operator pos:line="228" pos:column="24">!</op:operator><call><name><name pos:line="228" pos:column="25">originalQuery</name><op:operator pos:line="228" pos:column="38">.</op:operator><name pos:line="228" pos:column="39">EndsWith</name></name><argument_list pos:line="228" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="228" pos:column="48">" "</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="228" pos:column="53">&amp;&amp;</op:operator> <call><name pos:line="228" pos:column="56">IsWordInDictionary</name><argument_list pos:line="228" pos:column="74">(<argument><expr><call><name><name pos:line="228" pos:column="75">wordsInOriginalQuery</name><op:operator pos:line="228" pos:column="95">.</op:operator><name pos:line="228" pos:column="96">Last</name></name><argument_list pos:line="228" pos:column="100">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>

            <function><type><specifier pos:line="231" pos:column="13">protected</specifier> <specifier pos:line="231" pos:column="23">override</specifier> <name><name pos:line="231" pos:column="32">IEnumerable</name><argument_list pos:line="231" pos:column="43">&lt;<argument><name pos:line="231" pos:column="44">ISwumRecommendedQuery</name></argument>&gt;</argument_list></name></type> <name pos:line="231" pos:column="67">InternalSortQueries</name><parameter_list pos:line="231" pos:column="86">(<param><decl><type><name><name pos:line="231" pos:column="87">string</name><index pos:line="231" pos:column="93">[]</index></name></type> <name pos:line="231" pos:column="96">queries</name></decl></param>)</parameter_list>
            <block pos:line="232" pos:column="13">{
                <expr_stmt><expr><name pos:line="233" pos:column="17">queries</name> <op:operator pos:line="233" pos:column="25">=</op:operator> <call><name><name pos:line="233" pos:column="27">wordsInOriginalQuery</name><op:operator pos:line="233" pos:column="47">.</op:operator><name pos:line="233" pos:column="48">Count</name></name><argument_list pos:line="233" pos:column="53">()</argument_list></call> <op:operator pos:line="233" pos:column="56">&gt;</op:operator> <lit:literal type="number" pos:line="233" pos:column="58">1</lit:literal> <op:operator pos:line="233" pos:column="60">?</op:operator> <call><name pos:line="233" pos:column="62">SelectQueriesByContainedTerms</name><argument_list pos:line="233" pos:column="91">(<argument><expr><name pos:line="233" pos:column="92">queries</name></expr></argument>, 
                    <argument><expr><call><name><name pos:line="234" pos:column="21">wordsInOriginalQuery</name><op:operator pos:line="234" pos:column="41">.</op:operator><name pos:line="234" pos:column="42">SubArray</name></name><argument_list pos:line="234" pos:column="50">(<argument><expr><lit:literal type="number" pos:line="234" pos:column="51">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="234" pos:column="54">wordsInOriginalQuery</name><op:operator pos:line="234" pos:column="74">.</op:operator><name pos:line="234" pos:column="75">Count</name></name><argument_list pos:line="234" pos:column="80">()</argument_list></call> <op:operator pos:line="234" pos:column="83">-</op:operator> <lit:literal type="number" pos:line="234" pos:column="85">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="234" pos:column="89">:</op:operator> <name pos:line="234" pos:column="91">queries</name></expr>;</expr_stmt>

                <decl_stmt><decl><type><name pos:line="236" pos:column="17">var</name></type> <name pos:line="236" pos:column="21">group1</name> <init pos:line="236" pos:column="28">= <expr><call><name pos:line="236" pos:column="30">SelectQueriesByPrefixTerms</name><argument_list pos:line="236" pos:column="56">(<argument><expr><name pos:line="236" pos:column="57">queries</name></expr></argument>, <argument><expr><name pos:line="236" pos:column="66">wordsInOriginalQuery</name></expr></argument>)</argument_list></call><op:operator pos:line="236" pos:column="87">.</op:operator>
                    <call><name pos:line="237" pos:column="21">OrderBy</name><argument_list pos:line="237" pos:column="28">(<argument><expr><lambda><name pos:line="237" pos:column="29">q</name> <op:operator pos:line="237" pos:column="31">=&gt;</op:operator> <name pos:line="237" pos:column="34">q</name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="237" pos:column="36">.</op:operator><call><name pos:line="237" pos:column="37">ToList</name><argument_list pos:line="237" pos:column="43">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="238" pos:column="17">var</name></type> <name pos:line="238" pos:column="21">group2</name> <init pos:line="238" pos:column="28">= <expr><call><name><name pos:line="238" pos:column="30">queries</name><op:operator pos:line="238" pos:column="37">.</op:operator><name pos:line="238" pos:column="38">Except</name></name><argument_list pos:line="238" pos:column="44">(<argument><expr><name pos:line="238" pos:column="45">group1</name></expr></argument>)</argument_list></call><op:operator pos:line="238" pos:column="52">.</op:operator><call><name pos:line="238" pos:column="53">ToList</name><argument_list pos:line="238" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><name pos:line="240" pos:column="17">group2</name> <op:operator pos:line="240" pos:column="24">=</op:operator> <call><name><name pos:line="240" pos:column="26">wordsInOriginalQuery</name><op:operator pos:line="240" pos:column="46">.</op:operator><name pos:line="240" pos:column="47">Count</name></name><argument_list pos:line="240" pos:column="52">()</argument_list></call> <op:operator pos:line="240" pos:column="55">&gt;</op:operator> <lit:literal type="number" pos:line="240" pos:column="57">1</lit:literal> <op:operator pos:line="240" pos:column="59">?</op:operator> <call><name pos:line="240" pos:column="61">SortQueriesByWordsCoOccurrence</name>
                    <argument_list pos:line="241" pos:column="21">(<argument><expr><call><name><name pos:line="241" pos:column="22">wordsInOriginalQuery</name><op:operator pos:line="241" pos:column="42">.</op:operator><name pos:line="241" pos:column="43">SubArray</name></name><argument_list pos:line="241" pos:column="51">(<argument><expr><lit:literal type="number" pos:line="241" pos:column="52">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="241" pos:column="55">wordsInOriginalQuery</name><op:operator pos:line="241" pos:column="75">.</op:operator><name pos:line="241" pos:column="76">Count</name></name><argument_list pos:line="241" pos:column="81">()</argument_list></call> <op:operator pos:line="241" pos:column="84">-</op:operator> <lit:literal type="number" pos:line="241" pos:column="86">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>, 
                        <argument><expr><name pos:line="242" pos:column="25">queries</name></expr></argument>, <argument><expr><name pos:line="242" pos:column="34">GetWordsInQuery</name></expr></argument>)</argument_list></call><op:operator pos:line="242" pos:column="50">.</op:operator><call><name pos:line="242" pos:column="51">ToList</name><argument_list pos:line="242" pos:column="57">()</argument_list></call> <op:operator pos:line="242" pos:column="60">:</op:operator> <call><name><name pos:line="242" pos:column="62">group2</name><op:operator pos:line="242" pos:column="68">.</op:operator><name pos:line="242" pos:column="69">OrderBy</name></name><argument_list pos:line="242" pos:column="76">(<argument><expr><lambda><name pos:line="242" pos:column="77">q</name> <op:operator pos:line="242" pos:column="79">=&gt;</op:operator> <name pos:line="242" pos:column="82">q</name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="242" pos:column="84">.</op:operator><call><name pos:line="242" pos:column="85">ToList</name><argument_list pos:line="242" pos:column="91">()</argument_list></call></expr>;</expr_stmt>
                
                <expr_stmt><expr><call><name><name pos:line="244" pos:column="17">group1</name><op:operator pos:line="244" pos:column="23">.</op:operator><name pos:line="244" pos:column="24">AddRange</name></name><argument_list pos:line="244" pos:column="32">(<argument><expr><name pos:line="244" pos:column="33">group2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="245" pos:column="17">return <expr><call><name><name pos:line="245" pos:column="24">group1</name><op:operator pos:line="245" pos:column="30">.</op:operator><name pos:line="245" pos:column="31">Select</name></name><argument_list pos:line="245" pos:column="37">(<argument><expr><lambda><name pos:line="245" pos:column="38">s</name> <op:operator pos:line="245" pos:column="40">=&gt;</op:operator> <op:operator pos:line="245" pos:column="43">new</op:operator> <call><name pos:line="245" pos:column="47">InternalSwumRecommendedQuey</name><argument_list pos:line="245" pos:column="74">(<argument><expr><name pos:line="245" pos:column="75">s</name></expr></argument>, <argument><expr><name><name pos:line="245" pos:column="78">SwumRecommnedationType</name><op:operator pos:line="245" pos:column="100">.</op:operator><name pos:line="245" pos:column="101">Other</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>

            <function><type><specifier pos:line="248" pos:column="13">private</specifier> <name><name pos:line="248" pos:column="21">IEnumerable</name><argument_list pos:line="248" pos:column="32">&lt;<argument><name pos:line="248" pos:column="33">string</name></argument>&gt;</argument_list></name></type> <name pos:line="248" pos:column="41">GetWordsInQuery</name><parameter_list pos:line="248" pos:column="56">(<param><decl><type><name pos:line="248" pos:column="57">string</name></type> <name pos:line="248" pos:column="64">query</name></decl></param>)</parameter_list>
            <block pos:line="249" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="250" pos:column="17">var</name></type> <name pos:line="250" pos:column="21">knownWords</name> <init pos:line="250" pos:column="32">= <expr><call><name><name pos:line="250" pos:column="34">wordsInOriginalQuery</name><op:operator pos:line="250" pos:column="54">.</op:operator><name pos:line="250" pos:column="55">Count</name></name><argument_list pos:line="250" pos:column="60">()</argument_list></call> <op:operator pos:line="250" pos:column="63">&gt;</op:operator> <lit:literal type="number" pos:line="250" pos:column="65">1</lit:literal> <op:operator pos:line="250" pos:column="67">?</op:operator> <call><name><name pos:line="250" pos:column="69">wordsInOriginalQuery</name><op:operator pos:line="250" pos:column="89">.</op:operator>
                    <name pos:line="251" pos:column="21">SubArray</name></name><argument_list pos:line="251" pos:column="29">(<argument><expr><lit:literal type="number" pos:line="251" pos:column="30">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="251" pos:column="33">wordsInOriginalQuery</name><op:operator pos:line="251" pos:column="53">.</op:operator><name pos:line="251" pos:column="54">Count</name></name><argument_list pos:line="251" pos:column="59">()</argument_list></call> <op:operator pos:line="251" pos:column="62">-</op:operator> <lit:literal type="number" pos:line="251" pos:column="64">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="251" pos:column="67">:</op:operator> <op:operator pos:line="251" pos:column="69">new</op:operator> <name><name pos:line="251" pos:column="73">String</name><index pos:line="251" pos:column="79">[]</index></name> <block pos:line="251" pos:column="82">{}</block></expr></init></decl>;</decl_stmt>
                <return pos:line="252" pos:column="17">return <expr><call><name pos:line="252" pos:column="24">SplitQuery</name><argument_list pos:line="252" pos:column="34">(<argument><expr><name pos:line="252" pos:column="35">query</name></expr></argument>)</argument_list></call><op:operator pos:line="252" pos:column="41">.</op:operator><call><name pos:line="252" pos:column="42">Except</name><argument_list pos:line="252" pos:column="48">(<argument><expr><name pos:line="252" pos:column="49">knownWords</name></expr></argument>,
                    <argument><expr><call><name><name pos:line="253" pos:column="21">ToolHelpers</name><op:operator pos:line="253" pos:column="32">.</op:operator><name pos:line="253" pos:column="33">GetCaseInsensitiveEqualityComparer</name></name><argument_list pos:line="253" pos:column="67">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class>
       
        <function><type><specifier pos:line="257" pos:column="9">private</specifier> <specifier pos:line="257" pos:column="17">static</specifier> <name pos:line="257" pos:column="24">bool</name></type> <name pos:line="257" pos:column="29">IsWordInDictionary</name><parameter_list pos:line="257" pos:column="47">(<param><decl><type><name pos:line="257" pos:column="48">String</name></type> <name pos:line="257" pos:column="55">word</name></decl></param>)</parameter_list>
        <block pos:line="258" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="259" pos:column="13">var</name></type> <name pos:line="259" pos:column="17">dictionary</name> <init pos:line="259" pos:column="28">= <expr><call><name><name pos:line="259" pos:column="30">ServiceLocator</name><op:operator pos:line="259" pos:column="44">.</op:operator><name><name pos:line="259" pos:column="45">Resolve</name><argument_list pos:line="259" pos:column="52">&lt;<argument><name pos:line="259" pos:column="53">DictionaryBasedSplitter</name></argument>&gt;</argument_list></name></name><argument_list pos:line="259" pos:column="77">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="260" pos:column="13">return <expr><call><name><name pos:line="260" pos:column="20">dictionary</name><op:operator pos:line="260" pos:column="30">.</op:operator><name pos:line="260" pos:column="31">DoesWordExist</name></name><argument_list pos:line="260" pos:column="44">(<argument><expr><name pos:line="260" pos:column="45">word</name></expr></argument>, <argument><expr><name><name pos:line="260" pos:column="51">DictionaryOption</name><op:operator pos:line="260" pos:column="67">.</op:operator><name pos:line="260" pos:column="68">NoStemming</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="263" pos:column="9">public</specifier> <name pos:line="263" pos:column="16">ISwumRecommendedQuery</name><index pos:line="263" pos:column="37">[]</index></type> <name pos:line="263" pos:column="40">SelectSortSwumRecommendations</name><parameter_list pos:line="263" pos:column="69">(<param><decl><type><name pos:line="263" pos:column="70">string</name></type> <name pos:line="263" pos:column="77">originalQuery</name></decl></param>, <param><decl><type><name><name pos:line="263" pos:column="92">string</name><index pos:line="263" pos:column="98">[]</index></name></type> <name pos:line="263" pos:column="101">queries</name></decl></param>)</parameter_list>
        <block pos:line="264" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="265" pos:column="13">var</name></type> <name pos:line="265" pos:column="17">filters</name> <init pos:line="265" pos:column="25">= <expr><op:operator pos:line="265" pos:column="27">new</op:operator> <call><name pos:line="265" pos:column="31">AllFilters</name><argument_list pos:line="265" pos:column="41">(<argument><expr><name pos:line="265" pos:column="42">originalQuery</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="266" pos:column="13">var</name></type> <name pos:line="266" pos:column="17">list</name> <init pos:line="266" pos:column="22">= <expr><call><name pos:line="266" pos:column="24">GetSearchHistoryItemStartingWith</name><argument_list pos:line="266" pos:column="56">(<argument><expr><name pos:line="266" pos:column="57">originalQuery</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="267" pos:column="13">var</name></type> <name pos:line="267" pos:column="17">state</name> <init pos:line="267" pos:column="23">= <expr><call><name pos:line="267" pos:column="25">GetQueryInputState</name><argument_list pos:line="267" pos:column="43">(<argument><expr><name pos:line="267" pos:column="44">originalQuery</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="268" pos:column="13">list</name><op:operator pos:line="268" pos:column="17">.</op:operator><name pos:line="268" pos:column="18">AddRange</name></name><argument_list pos:line="268" pos:column="26">(<argument><expr><call><name><name pos:line="268" pos:column="27">state</name><op:operator pos:line="268" pos:column="32">.</op:operator><name pos:line="268" pos:column="33">SortQueries</name></name><argument_list pos:line="268" pos:column="44">(<argument><expr><name pos:line="268" pos:column="45">queries</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="269" pos:column="13">return <expr><call><name pos:line="269" pos:column="20">HandleCornerCases</name><argument_list pos:line="269" pos:column="37">(<argument><expr><name pos:line="269" pos:column="38">originalQuery</name></expr></argument>, <argument><expr><call><name><name pos:line="269" pos:column="53">filters</name><op:operator pos:line="269" pos:column="60">.</op:operator><name pos:line="269" pos:column="61">FilterBadQueries</name></name><argument_list pos:line="269" pos:column="77">(<argument><expr><call><name><name pos:line="269" pos:column="78">list</name><op:operator pos:line="269" pos:column="82">.</op:operator><name pos:line="269" pos:column="83">ToArray</name></name><argument_list pos:line="269" pos:column="90">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>


        <function><type><specifier pos:line="273" pos:column="9">public</specifier> <name pos:line="273" pos:column="16">ISwumRecommendedQuery</name><index pos:line="273" pos:column="37">[]</index></type> <name pos:line="273" pos:column="40">GetAllHistoryItems</name><parameter_list pos:line="273" pos:column="58">()</parameter_list>
        <block pos:line="274" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="275" pos:column="13">var</name></type> <name pos:line="275" pos:column="17">history</name> <init pos:line="275" pos:column="25">= <expr><call><name><name pos:line="275" pos:column="27">ServiceLocator</name><op:operator pos:line="275" pos:column="41">.</op:operator><name><name pos:line="275" pos:column="42">Resolve</name><argument_list pos:line="275" pos:column="49">&lt;<argument><name pos:line="275" pos:column="50">SearchHistory</name></argument>&gt;</argument_list></name></name><argument_list pos:line="275" pos:column="64">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="276" pos:column="13">return <expr><call><name><name pos:line="276" pos:column="20">history</name><op:operator pos:line="276" pos:column="27">.</op:operator><name pos:line="276" pos:column="28">GetSearchHistoryItems</name></name><argument_list pos:line="276" pos:column="49">(<argument><expr><lambda><name pos:line="276" pos:column="50">i</name> <op:operator pos:line="276" pos:column="52">=&gt;</op:operator> <lit:literal type="boolean" pos:line="276" pos:column="55">true</lit:literal></lambda></expr></argument>)</argument_list></call><op:operator pos:line="276" pos:column="60">.</op:operator><call><name pos:line="276" pos:column="61">Select</name><argument_list pos:line="276" pos:column="67">(<argument><expr><lambda><name pos:line="276" pos:column="68">i</name> <op:operator pos:line="276" pos:column="70">=&gt;</op:operator> <name><name pos:line="276" pos:column="73">i</name><op:operator pos:line="276" pos:column="74">.</op:operator><name pos:line="276" pos:column="75">SearchString</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="276" pos:column="88">.</op:operator><call><name pos:line="276" pos:column="89">Select</name>
                <argument_list pos:line="277" pos:column="17">(<argument><expr><lambda><name pos:line="277" pos:column="18">s</name> <op:operator pos:line="277" pos:column="20">=&gt;</op:operator> <op:operator pos:line="277" pos:column="23">new</op:operator> <call><name pos:line="277" pos:column="27">InternalSwumRecommendedQuey</name><argument_list pos:line="277" pos:column="54">(<argument><expr><name pos:line="277" pos:column="55">s</name></expr></argument>, <argument><expr><name><name pos:line="277" pos:column="58">SwumRecommnedationType</name><op:operator pos:line="277" pos:column="80">.</op:operator><name pos:line="277" pos:column="81">History</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="277" pos:column="90">.</op:operator>
                    <call><name><name pos:line="278" pos:column="21">Cast</name><argument_list pos:line="278" pos:column="25">&lt;<argument><name pos:line="278" pos:column="26">ISwumRecommendedQuery</name></argument>&gt;</argument_list></name><argument_list pos:line="278" pos:column="48">()</argument_list></call><op:operator pos:line="278" pos:column="50">.</op:operator><call><name pos:line="278" pos:column="51">ToArray</name><argument_list pos:line="278" pos:column="58">()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="281" pos:column="9">private</specifier> <name pos:line="281" pos:column="17">AbstractQueryInputState</name></type> <name pos:line="281" pos:column="41">GetQueryInputState</name><parameter_list pos:line="281" pos:column="59">(<param><decl><type><name pos:line="281" pos:column="60">String</name></type> <name pos:line="281" pos:column="67">query</name></decl></param>)</parameter_list>
        <block pos:line="282" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="283" pos:column="13">var</name></type> <name pos:line="283" pos:column="17">states</name> <init pos:line="283" pos:column="24">= <expr><op:operator pos:line="283" pos:column="26">new</op:operator> <name><name pos:line="283" pos:column="30">AbstractQueryInputState</name><index pos:line="283" pos:column="53">[]</index></name>
            <block pos:line="284" pos:column="13">{
                <expr><op:operator pos:line="285" pos:column="17">new</op:operator> <call><name pos:line="285" pos:column="21">NotFinishedWordInputState</name><argument_list pos:line="285" pos:column="46">(<argument><expr><name pos:line="285" pos:column="47">query</name></expr></argument>)</argument_list></call></expr>,
                <expr><op:operator pos:line="286" pos:column="17">new</op:operator> <call><name pos:line="286" pos:column="21">MiddleInputState</name><argument_list pos:line="286" pos:column="37">(<argument><expr><name pos:line="286" pos:column="38">query</name></expr></argument>)</argument_list></call></expr>, 
                <expr><op:operator pos:line="287" pos:column="17">new</op:operator> <call><name pos:line="287" pos:column="21">FinishedWordInputState</name><argument_list pos:line="287" pos:column="43">(<argument><expr><name pos:line="287" pos:column="44">query</name></expr></argument>)</argument_list></call></expr>
            }</block></expr></init></decl>;</decl_stmt>
            <return pos:line="289" pos:column="13">return <expr><call><name><name pos:line="289" pos:column="20">states</name><op:operator pos:line="289" pos:column="26">.</op:operator><name pos:line="289" pos:column="27">First</name></name><argument_list pos:line="289" pos:column="32">(<argument><expr><lambda><name pos:line="289" pos:column="33">s</name> <op:operator pos:line="289" pos:column="35">=&gt;</op:operator> <call><name><name pos:line="289" pos:column="38">s</name><op:operator pos:line="289" pos:column="39">.</op:operator><name pos:line="289" pos:column="40">IsInState</name></name><argument_list pos:line="289" pos:column="49">()</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="292" pos:column="9">private</specifier> <name><name pos:line="292" pos:column="17">List</name><argument_list pos:line="292" pos:column="21">&lt;<argument><name pos:line="292" pos:column="22">ISwumRecommendedQuery</name></argument>&gt;</argument_list></name></type> <name pos:line="292" pos:column="45">GetSearchHistoryItemStartingWith</name><parameter_list pos:line="292" pos:column="77">(<param><decl><type><name pos:line="292" pos:column="78">String</name></type> <name pos:line="292" pos:column="85">prefix</name></decl></param>)</parameter_list>
        <block pos:line="293" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="294" pos:column="13">var</name></type> <name pos:line="294" pos:column="17">history</name> <init pos:line="294" pos:column="25">= <expr><call><name><name pos:line="294" pos:column="27">ServiceLocator</name><op:operator pos:line="294" pos:column="41">.</op:operator><name><name pos:line="294" pos:column="42">Resolve</name><argument_list pos:line="294" pos:column="49">&lt;<argument><name pos:line="294" pos:column="50">SearchHistory</name></argument>&gt;</argument_list></name></name><argument_list pos:line="294" pos:column="64">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="295" pos:column="13">return <expr><call><name><name pos:line="295" pos:column="20">history</name><op:operator pos:line="295" pos:column="27">.</op:operator><name pos:line="295" pos:column="28">GetSearchHistoryItems</name></name><argument_list pos:line="295" pos:column="49">(<argument><expr><lambda><name pos:line="295" pos:column="50">item</name> <op:operator pos:line="295" pos:column="55">=&gt;</op:operator> <call><name><name pos:line="295" pos:column="58">item</name><op:operator pos:line="295" pos:column="62">.</op:operator><name pos:line="295" pos:column="63">SearchString</name><op:operator pos:line="295" pos:column="75">.</op:operator>
                <name pos:line="296" pos:column="17">StartsWith</name></name><argument_list pos:line="296" pos:column="27">(<argument><expr><name pos:line="296" pos:column="28">prefix</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="296" pos:column="36">.</op:operator><call><name pos:line="296" pos:column="37">Select</name><argument_list pos:line="296" pos:column="43">(<argument><expr><lambda><name pos:line="296" pos:column="44">i</name> <op:operator pos:line="296" pos:column="46">=&gt;</op:operator> <name><name pos:line="296" pos:column="49">i</name><op:operator pos:line="296" pos:column="50">.</op:operator><name pos:line="296" pos:column="51">SearchString</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="296" pos:column="64">.</op:operator><call><name pos:line="296" pos:column="65">Select</name><argument_list pos:line="296" pos:column="71">(<argument><expr><lambda><name pos:line="296" pos:column="72">s</name> <op:operator pos:line="296" pos:column="74">=&gt;</op:operator> <op:operator pos:line="296" pos:column="77">new</op:operator> 
                    <call><name pos:line="297" pos:column="21">InternalSwumRecommendedQuey</name><argument_list pos:line="297" pos:column="48">(<argument><expr><name pos:line="297" pos:column="49">s</name></expr></argument>, <argument><expr><name><name pos:line="297" pos:column="52">SwumRecommnedationType</name><op:operator pos:line="297" pos:column="74">.</op:operator><name pos:line="297" pos:column="75">History</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="297" pos:column="84">.</op:operator>
                        <call><name><name pos:line="298" pos:column="25">Cast</name><argument_list pos:line="298" pos:column="29">&lt;<argument><name pos:line="298" pos:column="30">ISwumRecommendedQuery</name></argument>&gt;</argument_list></name><argument_list pos:line="298" pos:column="52">()</argument_list></call><op:operator pos:line="298" pos:column="54">.</op:operator><call><name pos:line="298" pos:column="55">ToList</name><argument_list pos:line="298" pos:column="61">()</argument_list></call></expr>;</return>
        }</block></function>

        <class type="interface"><specifier pos:line="301" pos:column="9">private</specifier> interface <name pos:line="301" pos:column="27">IRecommendedQueryFilter</name>
        <block pos:line="302" pos:column="9">{
            <function_decl><type><name pos:line="303" pos:column="13">ISwumRecommendedQuery</name><index pos:line="303" pos:column="34">[]</index></type> <name pos:line="303" pos:column="37">FilterBadQueries</name><parameter_list pos:line="303" pos:column="53">(<param><decl><type><name><name pos:line="303" pos:column="54">ISwumRecommendedQuery</name><index pos:line="303" pos:column="75">[]</index></name></type> <name pos:line="303" pos:column="78">queries</name></decl></param>)</parameter_list>;</function_decl>
        }</block></class>

        <class><specifier pos:line="306" pos:column="9">private</specifier> class <name pos:line="306" pos:column="23">AllFilters</name> <super pos:line="306" pos:column="34">: <name pos:line="306" pos:column="36">IRecommendedQueryFilter</name></super>
        <block pos:line="307" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="308" pos:column="13">private</specifier> <specifier pos:line="308" pos:column="21">readonly</specifier> <name pos:line="308" pos:column="30">string</name></type> <name pos:line="308" pos:column="37">originalQuery</name></decl>;</decl_stmt>

            <constructor><specifier pos:line="310" pos:column="13">public</specifier> <name pos:line="310" pos:column="20">AllFilters</name><parameter_list pos:line="310" pos:column="30">(<param><decl><type><name pos:line="310" pos:column="31">String</name></type> <name pos:line="310" pos:column="38">originalQuery</name></decl></param>)</parameter_list>
            <block pos:line="311" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="312" pos:column="17">this</name><op:operator pos:line="312" pos:column="21">.</op:operator><name pos:line="312" pos:column="22">originalQuery</name></name> <op:operator pos:line="312" pos:column="36">=</op:operator> <name pos:line="312" pos:column="38">originalQuery</name></expr>;</expr_stmt>
            }</block></constructor>

            <function><type><specifier pos:line="315" pos:column="13">public</specifier> <name pos:line="315" pos:column="20">ISwumRecommendedQuery</name><index pos:line="315" pos:column="41">[]</index></type> <name pos:line="315" pos:column="44">FilterBadQueries</name><parameter_list pos:line="315" pos:column="60">(<param><decl><type><name><name pos:line="315" pos:column="61">ISwumRecommendedQuery</name><index pos:line="315" pos:column="82">[]</index></name></type> <name pos:line="315" pos:column="85">queries</name></decl></param>)</parameter_list>
            <block pos:line="316" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="317" pos:column="17">var</name></type> <name pos:line="317" pos:column="21">filters</name> <init pos:line="317" pos:column="29">= <expr><op:operator pos:line="317" pos:column="31">new</op:operator> <name><name pos:line="317" pos:column="35">IRecommendedQueryFilter</name><index pos:line="317" pos:column="58">[]</index></name>
                <block pos:line="318" pos:column="17">{
                    <expr><op:operator pos:line="319" pos:column="21">new</op:operator> <call><name pos:line="319" pos:column="25">DuplicateQueriesFilter</name><argument_list pos:line="319" pos:column="47">()</argument_list></call></expr>,
                    <expr><op:operator pos:line="320" pos:column="21">new</op:operator> <call><name pos:line="320" pos:column="25">ContainingNonLocalWordsQueriesFilter</name><argument_list pos:line="320" pos:column="61">()</argument_list></call></expr>,
                    <expr><op:operator pos:line="321" pos:column="21">new</op:operator> <call><name pos:line="321" pos:column="25">SameWithOriginalAfterStemmingFilter</name><argument_list pos:line="321" pos:column="60">(<argument><expr><name pos:line="321" pos:column="61">originalQuery</name></expr></argument>)</argument_list></call></expr>, 
                }</block></expr></init></decl>;</decl_stmt>
                <return pos:line="323" pos:column="17">return <expr><call><name><name pos:line="323" pos:column="24">filters</name><op:operator pos:line="323" pos:column="31">.</op:operator><name pos:line="323" pos:column="32">Aggregate</name></name><argument_list pos:line="323" pos:column="41">(<argument><expr><name pos:line="323" pos:column="42">queries</name></expr></argument>, <argument><expr><lambda><parameter_list pos:line="323" pos:column="51">(<param><decl><name pos:line="323" pos:column="52">current</name></decl></param>, <param><decl><name pos:line="323" pos:column="61">filter</name></decl></param>)</parameter_list> <op:operator pos:line="323" pos:column="69">=&gt;</op:operator> 
                    <call><name><name pos:line="324" pos:column="21">filter</name><op:operator pos:line="324" pos:column="27">.</op:operator><name pos:line="324" pos:column="28">FilterBadQueries</name></name><argument_list pos:line="324" pos:column="44">(<argument><expr><name pos:line="324" pos:column="45">current</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class>


        <class><specifier pos:line="329" pos:column="9">private</specifier> class <name pos:line="329" pos:column="23">DuplicateQueriesFilter</name> <super pos:line="329" pos:column="46">: <name pos:line="329" pos:column="48">IRecommendedQueryFilter</name></super>
        <block pos:line="330" pos:column="9">{
            <function><type><specifier pos:line="331" pos:column="13">public</specifier> <name pos:line="331" pos:column="20">ISwumRecommendedQuery</name><index pos:line="331" pos:column="41">[]</index></type> <name pos:line="331" pos:column="44">FilterBadQueries</name><parameter_list pos:line="331" pos:column="60">(<param><decl><type><name><name pos:line="331" pos:column="61">ISwumRecommendedQuery</name><index pos:line="331" pos:column="82">[]</index></name></type> <name pos:line="331" pos:column="85">queries</name></decl></param>)</parameter_list>
            <block pos:line="332" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="333" pos:column="17">var</name></type> <name pos:line="333" pos:column="21">set</name> <init pos:line="333" pos:column="25">= <expr><op:operator pos:line="333" pos:column="27">new</op:operator> <call><name><name pos:line="333" pos:column="31">HashSet</name><argument_list pos:line="333" pos:column="38">&lt;<argument><name pos:line="333" pos:column="39">ISwumRecommendedQuery</name></argument>&gt;</argument_list></name><argument_list pos:line="333" pos:column="61">(<argument><expr><name pos:line="333" pos:column="62">queries</name></expr></argument>, <argument><expr><op:operator pos:line="333" pos:column="71">new</op:operator> 
                    <call><name pos:line="334" pos:column="21">ISwumRecommendedQueryEqualityComparer</name><argument_list pos:line="334" pos:column="58">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return pos:line="335" pos:column="17">return <expr><call><name><name pos:line="335" pos:column="24">set</name><op:operator pos:line="335" pos:column="27">.</op:operator><name pos:line="335" pos:column="28">ToArray</name></name><argument_list pos:line="335" pos:column="35">()</argument_list></call></expr>;</return>
            }</block></function>

            <class><specifier pos:line="338" pos:column="13">private</specifier> class <name pos:line="338" pos:column="27">ISwumRecommendedQueryEqualityComparer</name> <super pos:line="338" pos:column="65">: 
                <name><name pos:line="339" pos:column="17">IEqualityComparer</name><argument_list pos:line="339" pos:column="34">&lt;<argument><name pos:line="339" pos:column="35">ISwumRecommendedQuery</name></argument>&gt;</argument_list></name></super>
            <block pos:line="340" pos:column="13">{
                <function><type><specifier pos:line="341" pos:column="17">public</specifier> <name pos:line="341" pos:column="24">bool</name></type> <name pos:line="341" pos:column="29">Equals</name><parameter_list pos:line="341" pos:column="35">(<param><decl><type><name pos:line="341" pos:column="36">ISwumRecommendedQuery</name></type> <name pos:line="341" pos:column="58">x</name></decl></param>, <param><decl><type><name pos:line="341" pos:column="61">ISwumRecommendedQuery</name></type> <name pos:line="341" pos:column="83">y</name></decl></param>)</parameter_list>
                <block pos:line="342" pos:column="17">{
                    <return pos:line="343" pos:column="21">return <expr><call><name><name pos:line="343" pos:column="28">x</name><op:operator pos:line="343" pos:column="29">.</op:operator><name pos:line="343" pos:column="30">Query</name><op:operator pos:line="343" pos:column="35">.</op:operator><name pos:line="343" pos:column="36">Trim</name></name><argument_list pos:line="343" pos:column="40">()</argument_list></call><op:operator pos:line="343" pos:column="42">.</op:operator><call><name pos:line="343" pos:column="43">Equals</name><argument_list pos:line="343" pos:column="49">(<argument><expr><call><name><name pos:line="343" pos:column="50">y</name><op:operator pos:line="343" pos:column="51">.</op:operator><name pos:line="343" pos:column="52">Query</name><op:operator pos:line="343" pos:column="57">.</op:operator><name pos:line="343" pos:column="58">Trim</name></name><argument_list pos:line="343" pos:column="62">()</argument_list></call></expr></argument>, 
                        <argument><expr><name><name pos:line="344" pos:column="25">StringComparison</name><op:operator pos:line="344" pos:column="41">.</op:operator><name pos:line="344" pos:column="42">InvariantCultureIgnoreCase</name></name></expr></argument>)</argument_list></call></expr>;</return>
                }</block></function>

                <function><type><specifier pos:line="347" pos:column="17">public</specifier> <name pos:line="347" pos:column="24">int</name></type> <name pos:line="347" pos:column="28">GetHashCode</name><parameter_list pos:line="347" pos:column="39">(<param><decl><type><name pos:line="347" pos:column="40">ISwumRecommendedQuery</name></type> <name pos:line="347" pos:column="62">obj</name></decl></param>)</parameter_list>
                <block pos:line="348" pos:column="17">{
                    <return pos:line="349" pos:column="21">return <expr><lit:literal type="number" pos:line="349" pos:column="28">0</lit:literal></expr>;</return>
                }</block></function>
            }</block></class>
        }</block></class>

        <class><specifier pos:line="354" pos:column="9">private</specifier> class <name pos:line="354" pos:column="23">SameWithOriginalAfterStemmingFilter</name> <super pos:line="354" pos:column="59">: <name pos:line="354" pos:column="61">IRecommendedQueryFilter</name></super>
        <block pos:line="355" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="356" pos:column="13">private</specifier> <specifier pos:line="356" pos:column="21">readonly</specifier> <name pos:line="356" pos:column="30">string</name></type> <name pos:line="356" pos:column="37">originalQuery</name></decl>;</decl_stmt>

            <constructor><specifier pos:line="358" pos:column="13">public</specifier> <name pos:line="358" pos:column="20">SameWithOriginalAfterStemmingFilter</name><parameter_list pos:line="358" pos:column="55">(<param><decl><type><name pos:line="358" pos:column="56">String</name></type> <name pos:line="358" pos:column="63">originalQuery</name></decl></param>)</parameter_list>
            <block pos:line="359" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="360" pos:column="17">this</name><op:operator pos:line="360" pos:column="21">.</op:operator><name pos:line="360" pos:column="22">originalQuery</name></name> <op:operator pos:line="360" pos:column="36">=</op:operator> <name pos:line="360" pos:column="38">originalQuery</name></expr>;</expr_stmt>
            }</block></constructor>

            <function><type><specifier pos:line="363" pos:column="13">public</specifier> <name pos:line="363" pos:column="20">ISwumRecommendedQuery</name><index pos:line="363" pos:column="41">[]</index></type> <name pos:line="363" pos:column="44">FilterBadQueries</name><parameter_list pos:line="363" pos:column="60">(<param><decl><type><name><name pos:line="363" pos:column="61">ISwumRecommendedQuery</name><index pos:line="363" pos:column="82">[]</index></name></type> <name pos:line="363" pos:column="85">queries</name></decl></param>)</parameter_list>
            <block pos:line="364" pos:column="13">{
                <return pos:line="365" pos:column="17">return <expr><call><name><name pos:line="365" pos:column="24">queries</name><op:operator pos:line="365" pos:column="31">.</op:operator><name pos:line="365" pos:column="32">Where</name></name><argument_list pos:line="365" pos:column="37">( <argument><expr><lambda><name pos:line="365" pos:column="39">q</name> <op:operator pos:line="365" pos:column="41">=&gt;</op:operator> <op:operator pos:line="365" pos:column="44">!</op:operator><call><name><name pos:line="365" pos:column="45">q</name><op:operator pos:line="365" pos:column="46">.</op:operator><name pos:line="365" pos:column="47">Query</name><op:operator pos:line="365" pos:column="52">.</op:operator><name pos:line="365" pos:column="53">GetStemmedQuery</name></name><argument_list pos:line="365" pos:column="68">()</argument_list></call><op:operator pos:line="365" pos:column="70">.</op:operator><call><name pos:line="365" pos:column="71">ToLowerAndTrim</name><argument_list pos:line="365" pos:column="85">()</argument_list></call><op:operator pos:line="365" pos:column="87">.</op:operator>
                    <call><name pos:line="366" pos:column="21">Equals</name><argument_list pos:line="366" pos:column="27">(<argument><expr><call><name><name pos:line="366" pos:column="28">this</name><op:operator pos:line="366" pos:column="32">.</op:operator><name pos:line="366" pos:column="33">originalQuery</name><op:operator pos:line="366" pos:column="46">.</op:operator><name pos:line="366" pos:column="47">ToLowerAndTrim</name></name><argument_list pos:line="366" pos:column="61">()</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="366" pos:column="65">.</op:operator><call><name pos:line="366" pos:column="66">ToArray</name><argument_list pos:line="366" pos:column="73">()</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class>

        <class><specifier pos:line="370" pos:column="9">private</specifier> class <name pos:line="370" pos:column="23">ContainingNonLocalWordsQueriesFilter</name> <super pos:line="370" pos:column="60">: <name pos:line="370" pos:column="62">IRecommendedQueryFilter</name></super>
        <block pos:line="371" pos:column="9">{
            <function><type><specifier pos:line="372" pos:column="13">public</specifier> <name pos:line="372" pos:column="20">ISwumRecommendedQuery</name><index pos:line="372" pos:column="41">[]</index></type> <name pos:line="372" pos:column="44">FilterBadQueries</name><parameter_list pos:line="372" pos:column="60">(<param><decl><type><name><name pos:line="372" pos:column="61">ISwumRecommendedQuery</name><index pos:line="372" pos:column="82">[]</index></name></type> <name pos:line="372" pos:column="85">queries</name></decl></param>)</parameter_list>
            <block pos:line="373" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="374" pos:column="17">var</name></type> <name pos:line="374" pos:column="21">badQueries</name> <init pos:line="374" pos:column="32">= <expr><call><name><name pos:line="374" pos:column="34">queries</name><op:operator pos:line="374" pos:column="41">.</op:operator><name pos:line="374" pos:column="42">Where</name></name><argument_list pos:line="374" pos:column="47">(<argument><expr><lambda><name pos:line="374" pos:column="48">q</name> <op:operator pos:line="374" pos:column="50">=&gt;</op:operator> <call><name><name pos:line="374" pos:column="53">q</name><op:operator pos:line="374" pos:column="54">.</op:operator><name pos:line="374" pos:column="55">Query</name><op:operator pos:line="374" pos:column="60">.</op:operator><name pos:line="374" pos:column="61">Trim</name></name><argument_list pos:line="374" pos:column="65">()</argument_list></call><op:operator pos:line="374" pos:column="67">.</op:operator><call><name pos:line="374" pos:column="68">Contains</name><argument_list pos:line="374" pos:column="76">(<argument><expr><lit:literal type="string" pos:line="374" pos:column="77">" "</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="374" pos:column="82">&amp;&amp;</op:operator> 
                    <op:operator pos:line="375" pos:column="21">!</op:operator><call><name pos:line="375" pos:column="22">AllWordsInDictionary</name><argument_list pos:line="375" pos:column="42">(<argument><expr><name><name pos:line="375" pos:column="43">q</name><op:operator pos:line="375" pos:column="44">.</op:operator><name pos:line="375" pos:column="45">Query</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return pos:line="376" pos:column="17">return <expr><call><name><name pos:line="376" pos:column="24">queries</name><op:operator pos:line="376" pos:column="31">.</op:operator><name pos:line="376" pos:column="32">Except</name></name><argument_list pos:line="376" pos:column="38">(<argument><expr><name pos:line="376" pos:column="39">badQueries</name></expr></argument>)</argument_list></call><op:operator pos:line="376" pos:column="50">.</op:operator><call><name pos:line="376" pos:column="51">ToArray</name><argument_list pos:line="376" pos:column="58">()</argument_list></call></expr>;</return>
            }</block></function>

            <function><type><specifier pos:line="379" pos:column="13">private</specifier> <name pos:line="379" pos:column="21">bool</name></type> <name pos:line="379" pos:column="26">AllWordsInDictionary</name><parameter_list pos:line="379" pos:column="46">(<param><decl><type><name pos:line="379" pos:column="47">string</name></type> <name pos:line="379" pos:column="54">s</name></decl></param>)</parameter_list>
            <block pos:line="380" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="381" pos:column="17">var</name></type> <name pos:line="381" pos:column="21">words</name> <init pos:line="381" pos:column="27">= <expr><call><name><name pos:line="381" pos:column="29">s</name><op:operator pos:line="381" pos:column="30">.</op:operator><name pos:line="381" pos:column="31">Split</name></name><argument_list pos:line="381" pos:column="36">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="382" pos:column="17">var</name></type> <name pos:line="382" pos:column="21">dictionary</name> <init pos:line="382" pos:column="32">= <expr><call><name><name pos:line="382" pos:column="34">ServiceLocator</name><op:operator pos:line="382" pos:column="48">.</op:operator><name><name pos:line="382" pos:column="49">Resolve</name><argument_list pos:line="382" pos:column="56">&lt;<argument><name pos:line="382" pos:column="57">DictionaryBasedSplitter</name></argument>&gt;</argument_list></name></name><argument_list pos:line="382" pos:column="81">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <return pos:line="383" pos:column="17">return <expr><call><name><name pos:line="383" pos:column="24">words</name><op:operator pos:line="383" pos:column="29">.</op:operator><name pos:line="383" pos:column="30">All</name></name><argument_list pos:line="383" pos:column="33">(<argument><expr><lambda><name pos:line="383" pos:column="34">w</name> <op:operator pos:line="383" pos:column="36">=&gt;</op:operator> <call><name><name pos:line="383" pos:column="39">dictionary</name><op:operator pos:line="383" pos:column="49">.</op:operator><name pos:line="383" pos:column="50">DoesWordExist</name></name><argument_list pos:line="383" pos:column="63">(<argument><expr><name pos:line="383" pos:column="64">w</name></expr></argument>, <argument><expr><name><name pos:line="383" pos:column="67">DictionaryOption</name><op:operator pos:line="383" pos:column="83">.</op:operator><name pos:line="383" pos:column="84">NoStemming</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class>

        <function><type><specifier pos:line="387" pos:column="9">private</specifier> <name pos:line="387" pos:column="17">ISwumRecommendedQuery</name><index pos:line="387" pos:column="38">[]</index></type> <name pos:line="387" pos:column="41">HandleCornerCases</name><parameter_list pos:line="387" pos:column="58">(<param><decl><type><name pos:line="387" pos:column="59">String</name></type> <name pos:line="387" pos:column="66">original</name></decl></param>, <param><decl><type><name><name pos:line="387" pos:column="76">ISwumRecommendedQuery</name><index pos:line="387" pos:column="97">[]</index></name></type> <name pos:line="387" pos:column="100">recommended</name></decl></param>)</parameter_list>
        <block pos:line="388" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="389" pos:column="13">var</name></type> <name pos:line="389" pos:column="17">allHandlers</name> <init pos:line="389" pos:column="29">= <expr><op:operator pos:line="389" pos:column="31">new</op:operator> <name><name pos:line="389" pos:column="35">ICornerCaseHandler</name><index pos:line="389" pos:column="53">[]</index></name>
            <block pos:line="390" pos:column="13">{
                <expr><op:operator pos:line="391" pos:column="17">new</op:operator> <call><name pos:line="391" pos:column="21">PreferVariableWhenNoSpace</name><argument_list pos:line="391" pos:column="46">()</argument_list></call></expr>
            }</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="393" pos:column="13">var</name></type> <name pos:line="393" pos:column="17">handlers</name> <init pos:line="393" pos:column="26">= <expr><call><name><name pos:line="393" pos:column="28">allHandlers</name><op:operator pos:line="393" pos:column="39">.</op:operator><name pos:line="393" pos:column="40">Where</name></name><argument_list pos:line="393" pos:column="45">(<argument><expr><lambda><name pos:line="393" pos:column="46">h</name> <op:operator pos:line="393" pos:column="48">=&gt;</op:operator> <call><name><name pos:line="393" pos:column="51">h</name><op:operator pos:line="393" pos:column="52">.</op:operator><name pos:line="393" pos:column="53">IsCornerCase</name></name><argument_list pos:line="393" pos:column="65">(<argument><expr><name pos:line="393" pos:column="66">original</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="394" pos:column="13">return <expr><call><name><name pos:line="394" pos:column="20">handlers</name><op:operator pos:line="394" pos:column="28">.</op:operator><name pos:line="394" pos:column="29">Any</name></name><argument_list pos:line="394" pos:column="32">()</argument_list></call> <op:operator pos:line="394" pos:column="35">?</op:operator> <call><name><name pos:line="394" pos:column="37">handlers</name><op:operator pos:line="394" pos:column="45">.</op:operator><name pos:line="394" pos:column="46">First</name></name><argument_list pos:line="394" pos:column="51">()</argument_list></call><op:operator pos:line="394" pos:column="53">.</op:operator><call><name pos:line="394" pos:column="54">Handle</name><argument_list pos:line="394" pos:column="60">(<argument><expr><name pos:line="394" pos:column="61">recommended</name></expr></argument>)</argument_list></call> <op:operator pos:line="394" pos:column="74">:</op:operator> <name pos:line="394" pos:column="76">recommended</name></expr>;</return>
        }</block></function>

        <class type="interface"><specifier pos:line="397" pos:column="9">private</specifier> interface <name pos:line="397" pos:column="27">ICornerCaseHandler</name>
        <block pos:line="398" pos:column="9">{
            <function_decl><type><name pos:line="399" pos:column="13">bool</name></type> <name pos:line="399" pos:column="18">IsCornerCase</name><parameter_list pos:line="399" pos:column="30">(<param><decl><type><name pos:line="399" pos:column="31">String</name></type> <name pos:line="399" pos:column="38">originalQuery</name></decl></param>)</parameter_list>;</function_decl>
            <function_decl><type><name pos:line="400" pos:column="13">ISwumRecommendedQuery</name><index pos:line="400" pos:column="34">[]</index></type> <name pos:line="400" pos:column="37">Handle</name><parameter_list pos:line="400" pos:column="43">(<param><decl><type><name><name pos:line="400" pos:column="44">ISwumRecommendedQuery</name><index pos:line="400" pos:column="65">[]</index></name></type> <name pos:line="400" pos:column="68">queries</name></decl></param>)</parameter_list>;</function_decl>
        }</block></class>

        <class><specifier pos:line="403" pos:column="9">private</specifier> class <name pos:line="403" pos:column="23">PreferVariableWhenNoSpace</name> <super pos:line="403" pos:column="49">: <name pos:line="403" pos:column="51">ICornerCaseHandler</name></super>
        <block pos:line="404" pos:column="9">{
            <function><type><specifier pos:line="405" pos:column="13">public</specifier> <name pos:line="405" pos:column="20">bool</name></type> <name pos:line="405" pos:column="25">IsCornerCase</name><parameter_list pos:line="405" pos:column="37">(<param><decl><type><name pos:line="405" pos:column="38">string</name></type> <name pos:line="405" pos:column="45">originalQuery</name></decl></param>)</parameter_list>
            <block pos:line="406" pos:column="13">{
                <return pos:line="407" pos:column="17">return <expr><op:operator pos:line="407" pos:column="24">!</op:operator><call><name><name pos:line="407" pos:column="25">originalQuery</name><op:operator pos:line="407" pos:column="38">.</op:operator><name pos:line="407" pos:column="39">TrimStart</name></name><argument_list pos:line="407" pos:column="48">()</argument_list></call><op:operator pos:line="407" pos:column="50">.</op:operator><call><name pos:line="407" pos:column="51">Contains</name><argument_list pos:line="407" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="407" pos:column="60">" "</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>

            <function><type><specifier pos:line="410" pos:column="13">public</specifier> <name pos:line="410" pos:column="20">ISwumRecommendedQuery</name><index pos:line="410" pos:column="41">[]</index></type> <name pos:line="410" pos:column="44">Handle</name><parameter_list pos:line="410" pos:column="50">(<param><decl><type><name><name pos:line="410" pos:column="51">ISwumRecommendedQuery</name><index pos:line="410" pos:column="72">[]</index></name></type> <name pos:line="410" pos:column="75">queries</name></decl></param>)</parameter_list>
            <block pos:line="411" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="412" pos:column="17">var</name></type> <name pos:line="412" pos:column="21">variableList</name> <init pos:line="412" pos:column="34">= <expr><op:operator pos:line="412" pos:column="36">new</op:operator> <call><name><name pos:line="412" pos:column="40">List</name><argument_list pos:line="412" pos:column="44">&lt;<argument><name pos:line="412" pos:column="45">ISwumRecommendedQuery</name></argument>&gt;</argument_list></name><argument_list pos:line="412" pos:column="67">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="413" pos:column="17">var</name></type> <name pos:line="413" pos:column="21">othersList</name> <init pos:line="413" pos:column="32">= <expr><op:operator pos:line="413" pos:column="34">new</op:operator> <call><name><name pos:line="413" pos:column="38">List</name><argument_list pos:line="413" pos:column="42">&lt;<argument><name pos:line="413" pos:column="43">ISwumRecommendedQuery</name></argument>&gt;</argument_list></name><argument_list pos:line="413" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <foreach pos:line="414" pos:column="17">foreach (<init><decl><type><name pos:line="414" pos:column="26">var</name></type> <name pos:line="414" pos:column="30">query</name> <range pos:line="414" pos:column="36">in <expr><name pos:line="414" pos:column="39">queries</name></expr></range></decl></init>)
                <block pos:line="415" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="416" pos:column="21">var</name></type> <name pos:line="416" pos:column="25">list</name> <init pos:line="416" pos:column="30">= <expr><call><name><name pos:line="416" pos:column="32">query</name><op:operator pos:line="416" pos:column="37">.</op:operator><name pos:line="416" pos:column="38">Query</name><op:operator pos:line="416" pos:column="43">.</op:operator><name pos:line="416" pos:column="44">Trim</name></name><argument_list pos:line="416" pos:column="48">()</argument_list></call><op:operator pos:line="416" pos:column="50">.</op:operator><call><name pos:line="416" pos:column="51">Contains</name><argument_list pos:line="416" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="416" pos:column="60">" "</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="416" pos:column="65">?</op:operator> <name pos:line="416" pos:column="67">othersList</name> <op:operator pos:line="416" pos:column="78">:</op:operator> 
                        <name pos:line="417" pos:column="25">variableList</name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="418" pos:column="21">list</name><op:operator pos:line="418" pos:column="25">.</op:operator><name pos:line="418" pos:column="26">Add</name></name><argument_list pos:line="418" pos:column="29">(<argument><expr><name pos:line="418" pos:column="30">query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>
                <expr_stmt><expr><call><name><name pos:line="420" pos:column="17">variableList</name><op:operator pos:line="420" pos:column="29">.</op:operator><name pos:line="420" pos:column="30">AddRange</name></name><argument_list pos:line="420" pos:column="38">(<argument><expr><name pos:line="420" pos:column="39">othersList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="421" pos:column="17">return <expr><call><name><name pos:line="421" pos:column="24">variableList</name><op:operator pos:line="421" pos:column="36">.</op:operator><name pos:line="421" pos:column="37">ToArray</name></name><argument_list pos:line="421" pos:column="44">()</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class>
    }</block></decl>
<decl/></enum>}</block></namespace>
</unit>
