<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Core\Core.UnitTests\Extensions\Configuration\ExtensionPointsConfigurationAnalyzerTest.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">IO</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Linq</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Sando</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">ExtensionContracts</name><op:operator pos:line="5" pos:column="31">.</op:operator><name pos:line="5" pos:column="32">IndexerContracts</name></name>;</using>
<using pos:line="6" pos:column="1">using <name pos:line="6" pos:column="7">log4net</name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">NUnit</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">Framework</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Sando</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">Core</name><op:operator pos:line="8" pos:column="17">.</op:operator><name pos:line="8" pos:column="18">Extensions</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">Sando</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">Core</name><op:operator pos:line="9" pos:column="17">.</op:operator><name pos:line="9" pos:column="18">Extensions</name><op:operator pos:line="9" pos:column="28">.</op:operator><name pos:line="9" pos:column="29">Configuration</name></name>;</using>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">Sando</name><op:operator pos:line="10" pos:column="12">.</op:operator><name pos:line="10" pos:column="13">Core</name><op:operator pos:line="10" pos:column="17">.</op:operator><name pos:line="10" pos:column="18">Logging</name></name>;</using>
<using pos:line="11" pos:column="1">using <name><name pos:line="11" pos:column="7">Sando</name><op:operator pos:line="11" pos:column="12">.</op:operator><name pos:line="11" pos:column="13">ExtensionContracts</name><op:operator pos:line="11" pos:column="31">.</op:operator><name pos:line="11" pos:column="32">ParserContracts</name></name>;</using>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">Sando</name><op:operator pos:line="12" pos:column="12">.</op:operator><name pos:line="12" pos:column="13">ExtensionContracts</name><op:operator pos:line="12" pos:column="31">.</op:operator><name pos:line="12" pos:column="32">ProgramElementContracts</name></name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">Sando</name><op:operator pos:line="13" pos:column="12">.</op:operator><name pos:line="13" pos:column="13">ExtensionContracts</name><op:operator pos:line="13" pos:column="31">.</op:operator><name pos:line="13" pos:column="32">QueryContracts</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">Sando</name><op:operator pos:line="14" pos:column="12">.</op:operator><name pos:line="14" pos:column="13">ExtensionContracts</name><op:operator pos:line="14" pos:column="31">.</op:operator><name pos:line="14" pos:column="32">ResultsReordererContracts</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">Sando</name><op:operator pos:line="15" pos:column="12">.</op:operator><name pos:line="15" pos:column="13">ExtensionContracts</name><op:operator pos:line="15" pos:column="31">.</op:operator><name pos:line="15" pos:column="32">SplitterContracts</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">Sando</name><op:operator pos:line="16" pos:column="12">.</op:operator><name pos:line="16" pos:column="13">UnitTestHelpers</name></name>;</using>
<using pos:line="17" pos:column="1">using <name pos:line="17" pos:column="7">UnitTestHelpers</name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">Sando</name><op:operator pos:line="18" pos:column="12">.</op:operator><name pos:line="18" pos:column="13">Core</name><op:operator pos:line="18" pos:column="17">.</op:operator><name pos:line="18" pos:column="18">Logging</name><op:operator pos:line="18" pos:column="25">.</op:operator><name pos:line="18" pos:column="26">Persistence</name></name>;</using>

<namespace pos:line="20" pos:column="1">namespace <name><name pos:line="20" pos:column="11">Sando</name><op:operator pos:line="20" pos:column="16">.</op:operator><name pos:line="20" pos:column="17">Core</name><op:operator pos:line="20" pos:column="21">.</op:operator><name pos:line="20" pos:column="22">UnitTests</name><op:operator pos:line="20" pos:column="31">.</op:operator><name pos:line="20" pos:column="32">Extensions</name><op:operator pos:line="20" pos:column="42">.</op:operator><name pos:line="20" pos:column="43">Configuration</name></name>
<block pos:line="21" pos:column="1">{
    <class><attribute pos:line="22" pos:column="5">[<expr><name pos:line="22" pos:column="6">TestFixture</name></expr>]</attribute>
    <specifier pos:line="23" pos:column="5">public</specifier> class <name pos:line="23" pos:column="18">ExtensionPointsConfigurationAnalyzerTest</name>
    <block pos:line="24" pos:column="5">{
        <function><type><attribute pos:line="25" pos:column="9">[<expr><name pos:line="25" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="26" pos:column="9">public</specifier> <name pos:line="26" pos:column="16">void</name></type> <name pos:line="26" pos:column="21">FindAndRegisterValidExtensionPoints_RegistersUsableCustomParser</name><parameter_list pos:line="26" pos:column="84">()</parameter_list>
        <block pos:line="27" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="28" pos:column="13">CreateExtensionPointsConfiguration</name><argument_list pos:line="28" pos:column="47">(<argument><expr><name pos:line="28" pos:column="48">addValidParserConfigurations</name><op:operator pos:line="28" pos:column="76">:</op:operator> <lit:literal type="boolean" pos:line="28" pos:column="78">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="29" pos:column="13">ExtensionPointsConfigurationAnalyzer</name><op:operator pos:line="29" pos:column="49">.</op:operator><name pos:line="29" pos:column="50">FindAndRegisterValidExtensionPoints</name></name><argument_list pos:line="29" pos:column="85">(<argument><expr><name pos:line="29" pos:column="86">extensionPointsConfiguration</name></expr></argument>, <argument><expr><name pos:line="29" pos:column="116">logger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="31" pos:column="13">IParser</name></type> <name pos:line="31" pos:column="21">parser</name> <init pos:line="31" pos:column="28">= <expr><call><name><name pos:line="31" pos:column="30">ExtensionPointsRepository</name><op:operator pos:line="31" pos:column="55">.</op:operator><name pos:line="31" pos:column="56">Instance</name><op:operator pos:line="31" pos:column="64">.</op:operator><name pos:line="31" pos:column="65">GetParserImplementation</name></name><argument_list pos:line="31" pos:column="88">(<argument><expr><lit:literal type="string" pos:line="31" pos:column="89">".cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="33" pos:column="13">Assert</name><op:operator pos:line="33" pos:column="19">.</op:operator><name pos:line="33" pos:column="20">IsNotNull</name></name><argument_list pos:line="33" pos:column="29">(<argument><expr><name pos:line="33" pos:column="30">parser</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="33" pos:column="38">"Parser for '.cs' extension should be registered!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name pos:line="34" pos:column="13">List</name><argument_list pos:line="34" pos:column="17">&lt;<argument><name pos:line="34" pos:column="18">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="34" pos:column="34">programElements</name> <init pos:line="34" pos:column="50">= <expr><name pos:line="34" pos:column="52">null</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="35" pos:column="13">Assert</name><op:operator pos:line="35" pos:column="19">.</op:operator><name pos:line="35" pos:column="20">DoesNotThrow</name></name><argument_list pos:line="35" pos:column="32">(<argument><expr><lambda><parameter_list pos:line="35" pos:column="33">()</parameter_list> <op:operator pos:line="35" pos:column="36">=&gt;</op:operator> <name pos:line="35" pos:column="39">programElements</name> <op:operator pos:line="35" pos:column="55">=</op:operator> <call><name><name pos:line="35" pos:column="57">parser</name><op:operator pos:line="35" pos:column="63">.</op:operator><name pos:line="35" pos:column="64">Parse</name></name><argument_list pos:line="35" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="35" pos:column="70">"filename"</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="36" pos:column="13">Assert</name><op:operator pos:line="36" pos:column="19">.</op:operator><name pos:line="36" pos:column="20">IsTrue</name></name><argument_list pos:line="36" pos:column="26">(<argument><expr><name pos:line="36" pos:column="27">programElements</name> <op:operator pos:line="36" pos:column="43">!=</op:operator> <name pos:line="36" pos:column="46">null</name> <op:operator pos:line="36" pos:column="51">&amp;&amp;</op:operator> <name><name pos:line="36" pos:column="54">programElements</name><op:operator pos:line="36" pos:column="69">.</op:operator><name pos:line="36" pos:column="70">Count</name></name> <op:operator pos:line="36" pos:column="76">==</op:operator> <lit:literal type="number" pos:line="36" pos:column="79">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="36" pos:column="82">"Invalid results from Parse method!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="37" pos:column="13">Assert</name><op:operator pos:line="37" pos:column="19">.</op:operator><name pos:line="37" pos:column="20">AreEqual</name></name><argument_list pos:line="37" pos:column="28">(<argument><expr><name><name pos:line="37" pos:column="29">programElements</name><index pos:line="37" pos:column="44">[<expr><lit:literal type="number" pos:line="37" pos:column="45">0</lit:literal></expr>]</index></name><op:operator pos:line="37" pos:column="47">.</op:operator><name pos:line="37" pos:column="48">Name</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="37" pos:column="54">"TestCSharpName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="37" pos:column="72">"Name differs!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="38" pos:column="13">Assert</name><op:operator pos:line="38" pos:column="19">.</op:operator><name pos:line="38" pos:column="20">AreEqual</name></name><argument_list pos:line="38" pos:column="28">(<argument><expr><name><name pos:line="38" pos:column="29">programElements</name><index pos:line="38" pos:column="44">[<expr><lit:literal type="number" pos:line="38" pos:column="45">0</lit:literal></expr>]</index></name><op:operator pos:line="38" pos:column="47">.</op:operator><call><name pos:line="38" pos:column="48">GetType</name><argument_list pos:line="38" pos:column="55">()</argument_list></call><op:operator pos:line="38" pos:column="57">.</op:operator><name pos:line="38" pos:column="58">FullName</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="38" pos:column="68">"Sando.TestExtensionPoints.TestElement"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="38" pos:column="109">"Type differs!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="41" pos:column="9">[<expr><name pos:line="41" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="42" pos:column="9">public</specifier> <name pos:line="42" pos:column="16">void</name></type> <name pos:line="42" pos:column="21">FindAndRegisterValidExtensionPoints_RegistersUsableCustomWordSplitter</name><parameter_list pos:line="42" pos:column="90">()</parameter_list>
        <block pos:line="43" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="44" pos:column="13">CreateExtensionPointsConfiguration</name><argument_list pos:line="44" pos:column="47">(<argument><expr><name pos:line="44" pos:column="48">addValidWordSplitterConfiguration</name><op:operator pos:line="44" pos:column="81">:</op:operator> <lit:literal type="boolean" pos:line="44" pos:column="83">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="45" pos:column="13">ExtensionPointsConfigurationAnalyzer</name><op:operator pos:line="45" pos:column="49">.</op:operator><name pos:line="45" pos:column="50">FindAndRegisterValidExtensionPoints</name></name><argument_list pos:line="45" pos:column="85">(<argument><expr><name pos:line="45" pos:column="86">extensionPointsConfiguration</name></expr></argument>, <argument><expr><name pos:line="45" pos:column="116">logger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="47" pos:column="13">IWordSplitter</name></type> <name pos:line="47" pos:column="27">wordSplitter</name> <init pos:line="47" pos:column="40">= <expr><call><name><name pos:line="47" pos:column="42">ExtensionPointsRepository</name><op:operator pos:line="47" pos:column="67">.</op:operator><name pos:line="47" pos:column="68">Instance</name><op:operator pos:line="47" pos:column="76">.</op:operator><name pos:line="47" pos:column="77">GetWordSplitterImplementation</name></name><argument_list pos:line="47" pos:column="106">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="48" pos:column="13">Assert</name><op:operator pos:line="48" pos:column="19">.</op:operator><name pos:line="48" pos:column="20">IsNotNull</name></name><argument_list pos:line="48" pos:column="29">(<argument><expr><name pos:line="48" pos:column="30">wordSplitter</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="48" pos:column="44">"Word splitter should be registered!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="49" pos:column="13">Assert</name><op:operator pos:line="49" pos:column="19">.</op:operator><name pos:line="49" pos:column="20">AreEqual</name></name><argument_list pos:line="49" pos:column="28">(<argument><expr><call><name><name pos:line="49" pos:column="29">wordSplitter</name><op:operator pos:line="49" pos:column="41">.</op:operator><name pos:line="49" pos:column="42">GetType</name></name><argument_list pos:line="49" pos:column="49">()</argument_list></call><op:operator pos:line="49" pos:column="51">.</op:operator><name pos:line="49" pos:column="52">FullName</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="49" pos:column="62">"Sando.TestExtensionPoints.TestWordSplitter"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="49" pos:column="108">"Invalid word splitter returned!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="51" pos:column="13">string</name><index pos:line="51" pos:column="19">[]</index></type> <name pos:line="51" pos:column="22">splittedWords</name> <init pos:line="51" pos:column="36">= <expr><name pos:line="51" pos:column="38">null</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="52" pos:column="13">Assert</name><op:operator pos:line="52" pos:column="19">.</op:operator><name pos:line="52" pos:column="20">DoesNotThrow</name></name><argument_list pos:line="52" pos:column="32">(<argument><expr><lambda><parameter_list pos:line="52" pos:column="33">()</parameter_list> <op:operator pos:line="52" pos:column="36">=&gt;</op:operator> <name pos:line="52" pos:column="39">splittedWords</name> <op:operator pos:line="52" pos:column="53">=</op:operator> <call><name><name pos:line="52" pos:column="55">wordSplitter</name><op:operator pos:line="52" pos:column="67">.</op:operator><name pos:line="52" pos:column="68">ExtractWords</name></name><argument_list pos:line="52" pos:column="80">(<argument><expr><lit:literal type="string" pos:line="52" pos:column="81">"FileName"</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="53" pos:column="13">Assert</name><op:operator pos:line="53" pos:column="19">.</op:operator><name pos:line="53" pos:column="20">IsTrue</name></name><argument_list pos:line="53" pos:column="26">(<argument><expr><name pos:line="53" pos:column="27">splittedWords</name> <op:operator pos:line="53" pos:column="41">!=</op:operator> <name pos:line="53" pos:column="44">null</name> <op:operator pos:line="53" pos:column="49">&amp;&amp;</op:operator> <name><name pos:line="53" pos:column="52">splittedWords</name><op:operator pos:line="53" pos:column="65">.</op:operator><name pos:line="53" pos:column="66">Length</name></name> <op:operator pos:line="53" pos:column="73">==</op:operator> <lit:literal type="number" pos:line="53" pos:column="76">2</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="53" pos:column="79">"Invalid results from ExtractWords method!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="54" pos:column="13">Assert</name><op:operator pos:line="54" pos:column="19">.</op:operator><name pos:line="54" pos:column="20">AreEqual</name></name><argument_list pos:line="54" pos:column="28">(<argument><expr><name><name pos:line="54" pos:column="29">splittedWords</name><index pos:line="54" pos:column="42">[<expr><lit:literal type="number" pos:line="54" pos:column="43">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="54" pos:column="47">"File"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="54" pos:column="55">"First splitted word is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="55" pos:column="13">Assert</name><op:operator pos:line="55" pos:column="19">.</op:operator><name pos:line="55" pos:column="20">AreEqual</name></name><argument_list pos:line="55" pos:column="28">(<argument><expr><name><name pos:line="55" pos:column="29">splittedWords</name><index pos:line="55" pos:column="42">[<expr><lit:literal type="number" pos:line="55" pos:column="43">1</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="55" pos:column="47">"Name"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="55" pos:column="55">"Second splitted word is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="58" pos:column="9">[<expr><name pos:line="58" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="59" pos:column="9">public</specifier> <name pos:line="59" pos:column="16">void</name></type> <name pos:line="59" pos:column="21">FindAndRegisterValidExtensionPoints_RegistersUsableCustomResultsReorderer</name><parameter_list pos:line="59" pos:column="94">()</parameter_list>
        <block pos:line="60" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="61" pos:column="13">CreateExtensionPointsConfiguration</name><argument_list pos:line="61" pos:column="47">(<argument><expr><name pos:line="61" pos:column="48">addValidResultsReordererConfiguration</name><op:operator pos:line="61" pos:column="85">:</op:operator> <lit:literal type="boolean" pos:line="61" pos:column="87">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="62" pos:column="13">ExtensionPointsConfigurationAnalyzer</name><op:operator pos:line="62" pos:column="49">.</op:operator><name pos:line="62" pos:column="50">FindAndRegisterValidExtensionPoints</name></name><argument_list pos:line="62" pos:column="85">(<argument><expr><name pos:line="62" pos:column="86">extensionPointsConfiguration</name></expr></argument>, <argument><expr><name pos:line="62" pos:column="116">logger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="64" pos:column="13">IResultsReorderer</name></type> <name pos:line="64" pos:column="31">resultsReorderer</name> <init pos:line="64" pos:column="48">= <expr><call><name><name pos:line="64" pos:column="50">ExtensionPointsRepository</name><op:operator pos:line="64" pos:column="75">.</op:operator><name pos:line="64" pos:column="76">Instance</name><op:operator pos:line="64" pos:column="84">.</op:operator><name pos:line="64" pos:column="85">GetResultsReordererImplementation</name></name><argument_list pos:line="64" pos:column="118">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="65" pos:column="13">Assert</name><op:operator pos:line="65" pos:column="19">.</op:operator><name pos:line="65" pos:column="20">IsNotNull</name></name><argument_list pos:line="65" pos:column="29">(<argument><expr><name pos:line="65" pos:column="30">resultsReorderer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="65" pos:column="48">"Results reorderer should be registered!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="66" pos:column="13">Assert</name><op:operator pos:line="66" pos:column="19">.</op:operator><name pos:line="66" pos:column="20">AreEqual</name></name><argument_list pos:line="66" pos:column="28">(<argument><expr><call><name><name pos:line="66" pos:column="29">resultsReorderer</name><op:operator pos:line="66" pos:column="45">.</op:operator><name pos:line="66" pos:column="46">GetType</name></name><argument_list pos:line="66" pos:column="53">()</argument_list></call><op:operator pos:line="66" pos:column="55">.</op:operator><name pos:line="66" pos:column="56">FullName</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="66" pos:column="66">"Sando.TestExtensionPoints.TestResultsReorderer"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="66" pos:column="116">"Invalid results reorderer returned!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name><name pos:line="68" pos:column="13">List</name><argument_list pos:line="68" pos:column="17">&lt;<argument><name pos:line="68" pos:column="18">CodeSearchResult</name></argument>&gt;</argument_list></name></type> <name pos:line="68" pos:column="36">results</name> <init pos:line="68" pos:column="44">= <expr><op:operator pos:line="68" pos:column="46">new</op:operator> <call><name><name pos:line="68" pos:column="50">List</name><argument_list pos:line="68" pos:column="54">&lt;<argument><name pos:line="68" pos:column="55">CodeSearchResult</name></argument>&gt;</argument_list></name><argument_list pos:line="68" pos:column="72">()</argument_list></call> 
												<block pos:line="69" pos:column="97">{
													<expr><op:operator pos:line="70" pos:column="105">new</op:operator> <call><name pos:line="70" pos:column="109">CodeSearchResult</name><argument_list pos:line="70" pos:column="125">(<argument><expr><call><name><name pos:line="70" pos:column="126">SampleProgramElementFactory</name><op:operator pos:line="70" pos:column="153">.</op:operator><name pos:line="70" pos:column="154">GetSampleClassElement</name></name><argument_list pos:line="70" pos:column="175">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="70" pos:column="179">1</lit:literal></expr></argument>)</argument_list></call></expr>,
													<expr><op:operator pos:line="71" pos:column="105">new</op:operator> <call><name pos:line="71" pos:column="109">CodeSearchResult</name><argument_list pos:line="71" pos:column="125">(<argument><expr><call><name><name pos:line="71" pos:column="126">SampleProgramElementFactory</name><op:operator pos:line="71" pos:column="153">.</op:operator><name pos:line="71" pos:column="154">GetSampleMethodElement</name></name><argument_list pos:line="71" pos:column="176">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="71" pos:column="180">3</lit:literal></expr></argument>)</argument_list></call></expr>,
												}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="73" pos:column="13">Assert</name><op:operator pos:line="73" pos:column="19">.</op:operator><name pos:line="73" pos:column="20">DoesNotThrow</name></name><argument_list pos:line="73" pos:column="32">(<argument><expr><lambda><parameter_list pos:line="73" pos:column="33">()</parameter_list> <op:operator pos:line="73" pos:column="36">=&gt;</op:operator> <name pos:line="73" pos:column="39">results</name> <op:operator pos:line="73" pos:column="47">=</op:operator> <call><name><name pos:line="73" pos:column="49">resultsReorderer</name><op:operator pos:line="73" pos:column="65">.</op:operator><name pos:line="73" pos:column="66">ReorderSearchResults</name></name><argument_list pos:line="73" pos:column="86">(<argument><expr><call><name><name pos:line="73" pos:column="87">results</name><op:operator pos:line="73" pos:column="94">.</op:operator><name pos:line="73" pos:column="95">AsQueryable</name></name><argument_list pos:line="73" pos:column="106">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="73" pos:column="109">.</op:operator><call><name pos:line="73" pos:column="110">ToList</name><argument_list pos:line="73" pos:column="116">()</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="74" pos:column="13">Assert</name><op:operator pos:line="74" pos:column="19">.</op:operator><name pos:line="74" pos:column="20">IsTrue</name></name><argument_list pos:line="74" pos:column="26">(<argument><expr><name pos:line="74" pos:column="27">results</name> <op:operator pos:line="74" pos:column="35">!=</op:operator> <name pos:line="74" pos:column="38">null</name> <op:operator pos:line="74" pos:column="43">&amp;&amp;</op:operator> <call><name><name pos:line="74" pos:column="46">results</name><op:operator pos:line="74" pos:column="53">.</op:operator><name pos:line="74" pos:column="54">Count</name></name><argument_list pos:line="74" pos:column="59">()</argument_list></call> <op:operator pos:line="74" pos:column="62">==</op:operator> <lit:literal type="number" pos:line="74" pos:column="65">2</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="74" pos:column="68">"Invalid results from ReorderSearchResults method!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="75" pos:column="13">Assert</name><op:operator pos:line="75" pos:column="19">.</op:operator><name pos:line="75" pos:column="20">IsTrue</name></name><argument_list pos:line="75" pos:column="26">(<argument><expr><call><name><name pos:line="75" pos:column="27">results</name><op:operator pos:line="75" pos:column="34">.</op:operator><name pos:line="75" pos:column="35">ElementAt</name></name><argument_list pos:line="75" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="75" pos:column="45">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="75" pos:column="47">.</op:operator><name pos:line="75" pos:column="48">Score</name> <op:operator pos:line="75" pos:column="54">==</op:operator> <lit:literal type="number" pos:line="75" pos:column="57">3</lit:literal> <op:operator pos:line="75" pos:column="59">&amp;&amp;</op:operator> <call><name><name pos:line="75" pos:column="62">results</name><op:operator pos:line="75" pos:column="69">.</op:operator><name pos:line="75" pos:column="70">ElementAt</name></name><argument_list pos:line="75" pos:column="79">(<argument><expr><lit:literal type="number" pos:line="75" pos:column="80">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="75" pos:column="82">.</op:operator><name><name pos:line="75" pos:column="83">ProgramElement</name><op:operator pos:line="75" pos:column="97">.</op:operator><name pos:line="75" pos:column="98">ProgramElementType</name></name> <op:operator pos:line="75" pos:column="117">==</op:operator> <name><name pos:line="75" pos:column="120">ProgramElementType</name><op:operator pos:line="75" pos:column="138">.</op:operator><name pos:line="75" pos:column="139">Method</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="75" pos:column="147">"First result is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="76" pos:column="13">Assert</name><op:operator pos:line="76" pos:column="19">.</op:operator><name pos:line="76" pos:column="20">IsTrue</name></name><argument_list pos:line="76" pos:column="26">(<argument><expr><call><name><name pos:line="76" pos:column="27">results</name><op:operator pos:line="76" pos:column="34">.</op:operator><name pos:line="76" pos:column="35">ElementAt</name></name><argument_list pos:line="76" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="76" pos:column="45">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="76" pos:column="47">.</op:operator><name pos:line="76" pos:column="48">Score</name> <op:operator pos:line="76" pos:column="54">==</op:operator> <lit:literal type="number" pos:line="76" pos:column="57">1</lit:literal> <op:operator pos:line="76" pos:column="59">&amp;&amp;</op:operator> <call><name><name pos:line="76" pos:column="62">results</name><op:operator pos:line="76" pos:column="69">.</op:operator><name pos:line="76" pos:column="70">ElementAt</name></name><argument_list pos:line="76" pos:column="79">(<argument><expr><lit:literal type="number" pos:line="76" pos:column="80">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="76" pos:column="82">.</op:operator><name><name pos:line="76" pos:column="83">ProgramElement</name><op:operator pos:line="76" pos:column="97">.</op:operator><name pos:line="76" pos:column="98">ProgramElementType</name></name> <op:operator pos:line="76" pos:column="117">==</op:operator> <name><name pos:line="76" pos:column="120">ProgramElementType</name><op:operator pos:line="76" pos:column="138">.</op:operator><name pos:line="76" pos:column="139">Class</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="76" pos:column="146">"Second result is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="79" pos:column="9">[<expr><name pos:line="79" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="80" pos:column="9">public</specifier> <name pos:line="80" pos:column="16">void</name></type> <name pos:line="80" pos:column="21">FindAndRegisterValidExtensionPoints_RegistersUsableCustomQueryWeightsSupplier</name><parameter_list pos:line="80" pos:column="98">()</parameter_list>
        <block pos:line="81" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="82" pos:column="13">CreateExtensionPointsConfiguration</name><argument_list pos:line="82" pos:column="47">(<argument><expr><name pos:line="82" pos:column="48">addValidQueryWeightsSupplierConfiguration</name><op:operator pos:line="82" pos:column="89">:</op:operator> <lit:literal type="boolean" pos:line="82" pos:column="91">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="83" pos:column="13">ExtensionPointsConfigurationAnalyzer</name><op:operator pos:line="83" pos:column="49">.</op:operator><name pos:line="83" pos:column="50">FindAndRegisterValidExtensionPoints</name></name><argument_list pos:line="83" pos:column="85">(<argument><expr><name pos:line="83" pos:column="86">extensionPointsConfiguration</name></expr></argument>, <argument><expr><name pos:line="83" pos:column="116">logger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="85" pos:column="13">IQueryWeightsSupplier</name></type> <name pos:line="85" pos:column="35">queryWeightsSupplier</name> <init pos:line="85" pos:column="56">= <expr><call><name><name pos:line="85" pos:column="58">ExtensionPointsRepository</name><op:operator pos:line="85" pos:column="83">.</op:operator><name pos:line="85" pos:column="84">Instance</name><op:operator pos:line="85" pos:column="92">.</op:operator><name pos:line="85" pos:column="93">GetQueryWeightsSupplierImplementation</name></name><argument_list pos:line="85" pos:column="130">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="86" pos:column="13">Assert</name><op:operator pos:line="86" pos:column="19">.</op:operator><name pos:line="86" pos:column="20">IsNotNull</name></name><argument_list pos:line="86" pos:column="29">(<argument><expr><name pos:line="86" pos:column="30">queryWeightsSupplier</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="86" pos:column="52">"Query weights supplier should be registered!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="87" pos:column="13">Assert</name><op:operator pos:line="87" pos:column="19">.</op:operator><name pos:line="87" pos:column="20">AreEqual</name></name><argument_list pos:line="87" pos:column="28">(<argument><expr><call><name><name pos:line="87" pos:column="29">queryWeightsSupplier</name><op:operator pos:line="87" pos:column="49">.</op:operator><name pos:line="87" pos:column="50">GetType</name></name><argument_list pos:line="87" pos:column="57">()</argument_list></call><op:operator pos:line="87" pos:column="59">.</op:operator><name pos:line="87" pos:column="60">FullName</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="87" pos:column="70">"Sando.TestExtensionPoints.TestQueryWeightsSupplier"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="87" pos:column="124">"Invalid query weights supplier returned!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name><name pos:line="89" pos:column="13">Dictionary</name><argument_list pos:line="89" pos:column="23">&lt;<argument><name pos:line="89" pos:column="24">string</name></argument>, <argument><name pos:line="89" pos:column="32">float</name></argument>&gt;</argument_list></name></type> <name pos:line="89" pos:column="39">weights</name> <init pos:line="89" pos:column="47">= <expr><name pos:line="89" pos:column="49">null</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="90" pos:column="13">Assert</name><op:operator pos:line="90" pos:column="19">.</op:operator><name pos:line="90" pos:column="20">DoesNotThrow</name></name><argument_list pos:line="90" pos:column="32">(<argument><expr><lambda><parameter_list pos:line="90" pos:column="33">()</parameter_list> <op:operator pos:line="90" pos:column="36">=&gt;</op:operator> <name pos:line="90" pos:column="39">weights</name> <op:operator pos:line="90" pos:column="47">=</op:operator> <call><name><name pos:line="90" pos:column="49">queryWeightsSupplier</name><op:operator pos:line="90" pos:column="69">.</op:operator><name pos:line="90" pos:column="70">GetQueryWeightsValues</name></name><argument_list pos:line="90" pos:column="91">()</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="91" pos:column="13">Assert</name><op:operator pos:line="91" pos:column="19">.</op:operator><name pos:line="91" pos:column="20">IsTrue</name></name><argument_list pos:line="91" pos:column="26">(<argument><expr><name pos:line="91" pos:column="27">weights</name> <op:operator pos:line="91" pos:column="35">!=</op:operator> <name pos:line="91" pos:column="38">null</name> <op:operator pos:line="91" pos:column="43">&amp;&amp;</op:operator> <call><name><name pos:line="91" pos:column="46">weights</name><op:operator pos:line="91" pos:column="53">.</op:operator><name pos:line="91" pos:column="54">Count</name></name><argument_list pos:line="91" pos:column="59">()</argument_list></call> <op:operator pos:line="91" pos:column="62">==</op:operator> <lit:literal type="number" pos:line="91" pos:column="65">2</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="91" pos:column="68">"Invalid results from SetQueryWeightsValues method!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="92" pos:column="13">Assert</name><op:operator pos:line="92" pos:column="19">.</op:operator><name pos:line="92" pos:column="20">AreEqual</name></name><argument_list pos:line="92" pos:column="28">(<argument><expr><name><name pos:line="92" pos:column="29">weights</name><index pos:line="92" pos:column="36">[<expr><lit:literal type="string" pos:line="92" pos:column="37">"field1"</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="92" pos:column="48">2</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="92" pos:column="51">"First weight is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="93" pos:column="13">Assert</name><op:operator pos:line="93" pos:column="19">.</op:operator><name pos:line="93" pos:column="20">AreEqual</name></name><argument_list pos:line="93" pos:column="28">(<argument><expr><name><name pos:line="93" pos:column="29">weights</name><index pos:line="93" pos:column="36">[<expr><lit:literal type="string" pos:line="93" pos:column="37">"field2"</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="93" pos:column="48">3</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="93" pos:column="51">"Second weight is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="96" pos:column="9">[<expr><name pos:line="96" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="97" pos:column="9">public</specifier> <name pos:line="97" pos:column="16">void</name></type> <name pos:line="97" pos:column="21">FindAndRegisterValidExtensionPoints_RegistersUsableCustomQueryRewriter</name><parameter_list pos:line="97" pos:column="91">()</parameter_list>
        <block pos:line="98" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="99" pos:column="13">CreateExtensionPointsConfiguration</name><argument_list pos:line="99" pos:column="47">(<argument><expr><name pos:line="99" pos:column="48">addValidQueryRewriterConfiguration</name><op:operator pos:line="99" pos:column="82">:</op:operator> <lit:literal type="boolean" pos:line="99" pos:column="84">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="100" pos:column="13">ExtensionPointsConfigurationAnalyzer</name><op:operator pos:line="100" pos:column="49">.</op:operator><name pos:line="100" pos:column="50">FindAndRegisterValidExtensionPoints</name></name><argument_list pos:line="100" pos:column="85">(<argument><expr><name pos:line="100" pos:column="86">extensionPointsConfiguration</name></expr></argument>, <argument><expr><name pos:line="100" pos:column="116">logger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="102" pos:column="13">IQueryRewriter</name></type> <name pos:line="102" pos:column="28">queryRewriter</name> <init pos:line="102" pos:column="42">= <expr><call><name><name pos:line="102" pos:column="44">ExtensionPointsRepository</name><op:operator pos:line="102" pos:column="69">.</op:operator><name pos:line="102" pos:column="70">Instance</name><op:operator pos:line="102" pos:column="78">.</op:operator><name pos:line="102" pos:column="79">GetQueryRewriterImplementation</name></name><argument_list pos:line="102" pos:column="109">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="103" pos:column="13">Assert</name><op:operator pos:line="103" pos:column="19">.</op:operator><name pos:line="103" pos:column="20">IsNotNull</name></name><argument_list pos:line="103" pos:column="29">(<argument><expr><name pos:line="103" pos:column="30">queryRewriter</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="103" pos:column="45">"Query rewriter should be registered!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="104" pos:column="13">Assert</name><op:operator pos:line="104" pos:column="19">.</op:operator><name pos:line="104" pos:column="20">AreEqual</name></name><argument_list pos:line="104" pos:column="28">(<argument><expr><call><name><name pos:line="104" pos:column="29">queryRewriter</name><op:operator pos:line="104" pos:column="42">.</op:operator><name pos:line="104" pos:column="43">GetType</name></name><argument_list pos:line="104" pos:column="50">()</argument_list></call><op:operator pos:line="104" pos:column="52">.</op:operator><name pos:line="104" pos:column="53">FullName</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="104" pos:column="63">"Sando.TestExtensionPoints.TestQueryRewriter"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="104" pos:column="110">"Invalid query rewriter returned!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="106" pos:column="13">string</name></type> <name pos:line="106" pos:column="20">query</name> <init pos:line="106" pos:column="26">= <expr><name pos:line="106" pos:column="28">null</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="107" pos:column="13">Assert</name><op:operator pos:line="107" pos:column="19">.</op:operator><name pos:line="107" pos:column="20">DoesNotThrow</name></name><argument_list pos:line="107" pos:column="32">(<argument><expr><lambda><parameter_list pos:line="107" pos:column="33">()</parameter_list> <op:operator pos:line="107" pos:column="36">=&gt;</op:operator> <name pos:line="107" pos:column="39">query</name> <op:operator pos:line="107" pos:column="45">=</op:operator> <call><name><name pos:line="107" pos:column="47">queryRewriter</name><op:operator pos:line="107" pos:column="60">.</op:operator><name pos:line="107" pos:column="61">RewriteQuery</name></name><argument_list pos:line="107" pos:column="73">(<argument><expr><lit:literal type="string" pos:line="107" pos:column="74">"Two Keywords"</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="108" pos:column="13">Assert</name><op:operator pos:line="108" pos:column="19">.</op:operator><name pos:line="108" pos:column="20">IsFalse</name></name><argument_list pos:line="108" pos:column="27">(<argument><expr><call><name><name pos:line="108" pos:column="28">String</name><op:operator pos:line="108" pos:column="34">.</op:operator><name pos:line="108" pos:column="35">IsNullOrWhiteSpace</name></name><argument_list pos:line="108" pos:column="53">(<argument><expr><name pos:line="108" pos:column="54">query</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="108" pos:column="62">"Invalid results from RewriteQuery method!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="109" pos:column="13">Assert</name><op:operator pos:line="109" pos:column="19">.</op:operator><name pos:line="109" pos:column="20">AreEqual</name></name><argument_list pos:line="109" pos:column="28">(<argument><expr><name pos:line="109" pos:column="29">query</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="109" pos:column="36">"two keywords"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="109" pos:column="52">"Query is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="112" pos:column="9">[<expr><name pos:line="112" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="113" pos:column="9">public</specifier> <name pos:line="113" pos:column="16">void</name></type> <name pos:line="113" pos:column="21">FindAndRegisterValidExtensionPoints_RegistersUsableCustomIndexFilterManager</name><parameter_list pos:line="113" pos:column="96">()</parameter_list>
        <block pos:line="114" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="115" pos:column="13">CreateExtensionPointsConfiguration</name><argument_list pos:line="115" pos:column="47">(<argument><expr><name pos:line="115" pos:column="48">addValidIndexFilterManagerConfiguration</name><op:operator pos:line="115" pos:column="87">:</op:operator> <lit:literal type="boolean" pos:line="115" pos:column="89">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="116" pos:column="13">ExtensionPointsConfigurationAnalyzer</name><op:operator pos:line="116" pos:column="49">.</op:operator><name pos:line="116" pos:column="50">FindAndRegisterValidExtensionPoints</name></name><argument_list pos:line="116" pos:column="85">(<argument><expr><name pos:line="116" pos:column="86">extensionPointsConfiguration</name></expr></argument>, <argument><expr><name pos:line="116" pos:column="116">logger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="118" pos:column="13">IIndexFilterManager</name></type> <name pos:line="118" pos:column="33">indexFilterManager</name> <init pos:line="118" pos:column="52">= <expr><call><name><name pos:line="118" pos:column="54">ExtensionPointsRepository</name><op:operator pos:line="118" pos:column="79">.</op:operator><name pos:line="118" pos:column="80">Instance</name><op:operator pos:line="118" pos:column="88">.</op:operator><name pos:line="118" pos:column="89">GetIndexFilterManagerImplementation</name></name><argument_list pos:line="118" pos:column="124">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="119" pos:column="13">Assert</name><op:operator pos:line="119" pos:column="19">.</op:operator><name pos:line="119" pos:column="20">IsNotNull</name></name><argument_list pos:line="119" pos:column="29">(<argument><expr><name pos:line="119" pos:column="30">indexFilterManager</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="119" pos:column="50">"Index filter manager should be registered!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="120" pos:column="13">Assert</name><op:operator pos:line="120" pos:column="19">.</op:operator><name pos:line="120" pos:column="20">AreEqual</name></name><argument_list pos:line="120" pos:column="28">(<argument><expr><call><name><name pos:line="120" pos:column="29">indexFilterManager</name><op:operator pos:line="120" pos:column="47">.</op:operator><name pos:line="120" pos:column="48">GetType</name></name><argument_list pos:line="120" pos:column="55">()</argument_list></call><op:operator pos:line="120" pos:column="57">.</op:operator><name pos:line="120" pos:column="58">FullName</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="120" pos:column="68">"Sando.TestExtensionPoints.TestIndexFilterManager"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="120" pos:column="120">"Invalid index filter manager returned!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="122" pos:column="13">bool</name></type> <name pos:line="122" pos:column="18">shouldBeIndexed</name> <init pos:line="122" pos:column="34">= <expr><lit:literal type="boolean" pos:line="122" pos:column="36">false</lit:literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="123" pos:column="13">Assert</name><op:operator pos:line="123" pos:column="19">.</op:operator><name pos:line="123" pos:column="20">DoesNotThrow</name></name><argument_list pos:line="123" pos:column="32">(<argument><expr><lambda><parameter_list pos:line="123" pos:column="33">()</parameter_list> <op:operator pos:line="123" pos:column="36">=&gt;</op:operator> <name pos:line="123" pos:column="39">shouldBeIndexed</name> <op:operator pos:line="123" pos:column="55">=</op:operator> <call><name><name pos:line="123" pos:column="57">indexFilterManager</name><op:operator pos:line="123" pos:column="75">.</op:operator><name pos:line="123" pos:column="76">ShouldFileBeIndexed</name></name><argument_list pos:line="123" pos:column="95">(<argument><expr><lit:literal type="string" pos:line="123" pos:column="96">"C:\\\\index.xml"</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="124" pos:column="13">Assert</name><op:operator pos:line="124" pos:column="19">.</op:operator><name pos:line="124" pos:column="20">IsTrue</name></name><argument_list pos:line="124" pos:column="26">(<argument><expr><name pos:line="124" pos:column="27">shouldBeIndexed</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="124" pos:column="44">"Invalid results from ShouldFileBeIndexed method!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="127" pos:column="9">[<expr><name pos:line="127" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="128" pos:column="9">public</specifier> <name pos:line="128" pos:column="16">void</name></type> <name pos:line="128" pos:column="21">FindAndRegisterValidExtensionPoints_RegistersCustomParsers</name><parameter_list pos:line="128" pos:column="79">()</parameter_list>
        <block pos:line="129" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="130" pos:column="13">CreateExtensionPointsConfiguration</name><argument_list pos:line="130" pos:column="47">(<argument><expr><name pos:line="130" pos:column="48">addValidParserConfigurations</name><op:operator pos:line="130" pos:column="76">:</op:operator> <lit:literal type="boolean" pos:line="130" pos:column="78">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="131" pos:column="13">ExtensionPointsConfigurationAnalyzer</name><op:operator pos:line="131" pos:column="49">.</op:operator><name pos:line="131" pos:column="50">FindAndRegisterValidExtensionPoints</name></name><argument_list pos:line="131" pos:column="85">(<argument><expr><name pos:line="131" pos:column="86">extensionPointsConfiguration</name></expr></argument>, <argument><expr><name pos:line="131" pos:column="116">logger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="133" pos:column="13">IParser</name></type> <name pos:line="133" pos:column="21">parser</name> <init pos:line="133" pos:column="28">= <expr><call><name><name pos:line="133" pos:column="30">ExtensionPointsRepository</name><op:operator pos:line="133" pos:column="55">.</op:operator><name pos:line="133" pos:column="56">Instance</name><op:operator pos:line="133" pos:column="64">.</op:operator><name pos:line="133" pos:column="65">GetParserImplementation</name></name><argument_list pos:line="133" pos:column="88">(<argument><expr><lit:literal type="string" pos:line="133" pos:column="89">".cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="134" pos:column="13">Assert</name><op:operator pos:line="134" pos:column="19">.</op:operator><name pos:line="134" pos:column="20">IsNotNull</name></name><argument_list pos:line="134" pos:column="29">(<argument><expr><name pos:line="134" pos:column="30">parser</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="134" pos:column="38">"Parser for '.cs' extension should be registered!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="135" pos:column="13">Assert</name><op:operator pos:line="135" pos:column="19">.</op:operator><name pos:line="135" pos:column="20">AreEqual</name></name><argument_list pos:line="135" pos:column="28">(<argument><expr><call><name><name pos:line="135" pos:column="29">parser</name><op:operator pos:line="135" pos:column="35">.</op:operator><name pos:line="135" pos:column="36">GetType</name></name><argument_list pos:line="135" pos:column="43">()</argument_list></call><op:operator pos:line="135" pos:column="45">.</op:operator><name pos:line="135" pos:column="46">FullName</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="135" pos:column="56">"Sando.TestExtensionPoints.TestCSharpParser"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="135" pos:column="102">"Invalid parser returned for '.cs' extension!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="137" pos:column="13">parser</name> <op:operator pos:line="137" pos:column="20">=</op:operator> <call><name><name pos:line="137" pos:column="22">ExtensionPointsRepository</name><op:operator pos:line="137" pos:column="47">.</op:operator><name pos:line="137" pos:column="48">Instance</name><op:operator pos:line="137" pos:column="56">.</op:operator><name pos:line="137" pos:column="57">GetParserImplementation</name></name><argument_list pos:line="137" pos:column="80">(<argument><expr><lit:literal type="string" pos:line="137" pos:column="81">".h"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="138" pos:column="13">Assert</name><op:operator pos:line="138" pos:column="19">.</op:operator><name pos:line="138" pos:column="20">IsNotNull</name></name><argument_list pos:line="138" pos:column="29">(<argument><expr><name pos:line="138" pos:column="30">parser</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="138" pos:column="38">"Parser for '.h' extension should be registered!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="139" pos:column="13">Assert</name><op:operator pos:line="139" pos:column="19">.</op:operator><name pos:line="139" pos:column="20">AreEqual</name></name><argument_list pos:line="139" pos:column="28">(<argument><expr><call><name><name pos:line="139" pos:column="29">parser</name><op:operator pos:line="139" pos:column="35">.</op:operator><name pos:line="139" pos:column="36">GetType</name></name><argument_list pos:line="139" pos:column="43">()</argument_list></call><op:operator pos:line="139" pos:column="45">.</op:operator><name pos:line="139" pos:column="46">FullName</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="139" pos:column="56">"Sando.TestExtensionPoints.TestCppParser"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="139" pos:column="99">"Invalid parser returned for '.h' extension!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="141" pos:column="13">parser</name> <op:operator pos:line="141" pos:column="20">=</op:operator> <call><name><name pos:line="141" pos:column="22">ExtensionPointsRepository</name><op:operator pos:line="141" pos:column="47">.</op:operator><name pos:line="141" pos:column="48">Instance</name><op:operator pos:line="141" pos:column="56">.</op:operator><name pos:line="141" pos:column="57">GetParserImplementation</name></name><argument_list pos:line="141" pos:column="80">(<argument><expr><lit:literal type="string" pos:line="141" pos:column="81">".cpp"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="142" pos:column="13">Assert</name><op:operator pos:line="142" pos:column="19">.</op:operator><name pos:line="142" pos:column="20">IsNotNull</name></name><argument_list pos:line="142" pos:column="29">(<argument><expr><name pos:line="142" pos:column="30">parser</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="142" pos:column="38">"Parser for '.cpp' extension should be registered!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="143" pos:column="13">Assert</name><op:operator pos:line="143" pos:column="19">.</op:operator><name pos:line="143" pos:column="20">AreEqual</name></name><argument_list pos:line="143" pos:column="28">(<argument><expr><call><name><name pos:line="143" pos:column="29">parser</name><op:operator pos:line="143" pos:column="35">.</op:operator><name pos:line="143" pos:column="36">GetType</name></name><argument_list pos:line="143" pos:column="43">()</argument_list></call><op:operator pos:line="143" pos:column="45">.</op:operator><name pos:line="143" pos:column="46">FullName</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="143" pos:column="56">"Sando.TestExtensionPoints.TestCppParser"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="143" pos:column="99">"Invalid parser returned for '.cpp' extension!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="145" pos:column="13">parser</name> <op:operator pos:line="145" pos:column="20">=</op:operator> <call><name><name pos:line="145" pos:column="22">ExtensionPointsRepository</name><op:operator pos:line="145" pos:column="47">.</op:operator><name pos:line="145" pos:column="48">Instance</name><op:operator pos:line="145" pos:column="56">.</op:operator><name pos:line="145" pos:column="57">GetParserImplementation</name></name><argument_list pos:line="145" pos:column="80">(<argument><expr><lit:literal type="string" pos:line="145" pos:column="81">".cxx"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="146" pos:column="13">Assert</name><op:operator pos:line="146" pos:column="19">.</op:operator><name pos:line="146" pos:column="20">IsNotNull</name></name><argument_list pos:line="146" pos:column="29">(<argument><expr><name pos:line="146" pos:column="30">parser</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="146" pos:column="38">"Parser for '.cxx' extension should be registered!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="147" pos:column="13">Assert</name><op:operator pos:line="147" pos:column="19">.</op:operator><name pos:line="147" pos:column="20">AreEqual</name></name><argument_list pos:line="147" pos:column="28">(<argument><expr><call><name><name pos:line="147" pos:column="29">parser</name><op:operator pos:line="147" pos:column="35">.</op:operator><name pos:line="147" pos:column="36">GetType</name></name><argument_list pos:line="147" pos:column="43">()</argument_list></call><op:operator pos:line="147" pos:column="45">.</op:operator><name pos:line="147" pos:column="46">FullName</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="147" pos:column="56">"Sando.TestExtensionPoints.TestCppParser"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="147" pos:column="99">"Invalid parser returned for '.cxx' extension!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="150" pos:column="9">[<expr><name pos:line="150" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="151" pos:column="9">public</specifier> <name pos:line="151" pos:column="16">void</name></type> <name pos:line="151" pos:column="21">FindAndRegisterValidExtensionPoints_RemovesInvalidCustomParserConfigurations</name><parameter_list pos:line="151" pos:column="97">()</parameter_list>
        <block pos:line="152" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="153" pos:column="13">CreateExtensionPointsConfiguration</name><argument_list pos:line="153" pos:column="47">(<argument><expr><name pos:line="153" pos:column="48">addInvalidParserConfigurations</name><op:operator pos:line="153" pos:column="78">:</op:operator> <lit:literal type="boolean" pos:line="153" pos:column="80">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="154" pos:column="13">ExtensionPointsConfigurationAnalyzer</name><op:operator pos:line="154" pos:column="49">.</op:operator><name pos:line="154" pos:column="50">FindAndRegisterValidExtensionPoints</name></name><argument_list pos:line="154" pos:column="85">(<argument><expr><name pos:line="154" pos:column="86">extensionPointsConfiguration</name></expr></argument>, <argument><expr><name pos:line="154" pos:column="116">logger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="156" pos:column="13">IParser</name></type> <name pos:line="156" pos:column="21">parser</name> <init pos:line="156" pos:column="28">= <expr><call><name><name pos:line="156" pos:column="30">ExtensionPointsRepository</name><op:operator pos:line="156" pos:column="55">.</op:operator><name pos:line="156" pos:column="56">Instance</name><op:operator pos:line="156" pos:column="64">.</op:operator><name pos:line="156" pos:column="65">GetParserImplementation</name></name><argument_list pos:line="156" pos:column="88">(<argument><expr><lit:literal type="string" pos:line="156" pos:column="89">".cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="157" pos:column="13">Assert</name><op:operator pos:line="157" pos:column="19">.</op:operator><name pos:line="157" pos:column="20">IsNotNull</name></name><argument_list pos:line="157" pos:column="29">(<argument><expr><name pos:line="157" pos:column="30">parser</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="157" pos:column="38">"Default parser for '.cs' extension should be used!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="158" pos:column="13">Assert</name><op:operator pos:line="158" pos:column="19">.</op:operator><name pos:line="158" pos:column="20">AreEqual</name></name><argument_list pos:line="158" pos:column="28">(<argument><expr><call><name><name pos:line="158" pos:column="29">parser</name><op:operator pos:line="158" pos:column="35">.</op:operator><name pos:line="158" pos:column="36">GetType</name></name><argument_list pos:line="158" pos:column="43">()</argument_list></call><op:operator pos:line="158" pos:column="45">.</op:operator><name pos:line="158" pos:column="46">FullName</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="158" pos:column="56">"Sando.Parser.SrcMLCSharpParser"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="158" pos:column="90">"Invalid parser returned for '.cs' extension!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="160" pos:column="13">string</name></type> <name pos:line="160" pos:column="20">logFileContent</name> <init pos:line="160" pos:column="35">= <expr><call><name><name pos:line="160" pos:column="37">File</name><op:operator pos:line="160" pos:column="41">.</op:operator><name pos:line="160" pos:column="42">ReadAllText</name></name><argument_list pos:line="160" pos:column="53">(<argument><expr><name pos:line="160" pos:column="54">logFilePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="161" pos:column="13">Assert</name><op:operator pos:line="161" pos:column="19">.</op:operator><name pos:line="161" pos:column="20">IsTrue</name></name><argument_list pos:line="161" pos:column="26">(<argument><expr><call><name><name pos:line="161" pos:column="27">logFileContent</name><op:operator pos:line="161" pos:column="41">.</op:operator><name pos:line="161" pos:column="42">Contains</name></name><argument_list pos:line="161" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="161" pos:column="51">"3 invalid parser configurations found - they will be omitted during registration process."</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="161" pos:column="145">"Log file should contain information about removed invalid parser configurations!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="164" pos:column="9">[<expr><name pos:line="164" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="165" pos:column="9">public</specifier> <name pos:line="165" pos:column="16">void</name></type> <name pos:line="165" pos:column="21">FindAndRegisterValidExtensionPoints_RemovesInvalidCustomWordSplitterConfiguration</name><parameter_list pos:line="165" pos:column="102">()</parameter_list>
        <block pos:line="166" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="167" pos:column="13">CreateExtensionPointsConfiguration</name><argument_list pos:line="167" pos:column="47">(<argument><expr><name pos:line="167" pos:column="48">addInvalidWordSplitterConfiguration</name><op:operator pos:line="167" pos:column="83">:</op:operator> <lit:literal type="boolean" pos:line="167" pos:column="85">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="168" pos:column="13">ExtensionPointsConfigurationAnalyzer</name><op:operator pos:line="168" pos:column="49">.</op:operator><name pos:line="168" pos:column="50">FindAndRegisterValidExtensionPoints</name></name><argument_list pos:line="168" pos:column="85">(<argument><expr><name pos:line="168" pos:column="86">extensionPointsConfiguration</name></expr></argument>, <argument><expr><name pos:line="168" pos:column="116">logger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="170" pos:column="13">IWordSplitter</name></type> <name pos:line="170" pos:column="27">wordSplitter</name> <init pos:line="170" pos:column="40">= <expr><call><name><name pos:line="170" pos:column="42">ExtensionPointsRepository</name><op:operator pos:line="170" pos:column="67">.</op:operator><name pos:line="170" pos:column="68">Instance</name><op:operator pos:line="170" pos:column="76">.</op:operator><name pos:line="170" pos:column="77">GetWordSplitterImplementation</name></name><argument_list pos:line="170" pos:column="106">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="171" pos:column="13">Assert</name><op:operator pos:line="171" pos:column="19">.</op:operator><name pos:line="171" pos:column="20">IsNotNull</name></name><argument_list pos:line="171" pos:column="29">(<argument><expr><name pos:line="171" pos:column="30">wordSplitter</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="171" pos:column="44">"Default word splitter should x used!!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="172" pos:column="13">Assert</name><op:operator pos:line="172" pos:column="19">.</op:operator><name pos:line="172" pos:column="20">AreEqual</name></name><argument_list pos:line="172" pos:column="28">(<argument><expr><call><name><name pos:line="172" pos:column="29">wordSplitter</name><op:operator pos:line="172" pos:column="41">.</op:operator><name pos:line="172" pos:column="42">GetType</name></name><argument_list pos:line="172" pos:column="49">()</argument_list></call><op:operator pos:line="172" pos:column="51">.</op:operator><name pos:line="172" pos:column="52">FullName</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="172" pos:column="62">"Sando.Core.Tools.WordSplitter"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="172" pos:column="95">"Invalid word splitter returned!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="174" pos:column="13">string</name></type> <name pos:line="174" pos:column="20">logFileContent</name> <init pos:line="174" pos:column="35">= <expr><call><name><name pos:line="174" pos:column="37">File</name><op:operator pos:line="174" pos:column="41">.</op:operator><name pos:line="174" pos:column="42">ReadAllText</name></name><argument_list pos:line="174" pos:column="53">(<argument><expr><name pos:line="174" pos:column="54">logFilePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="175" pos:column="13">Assert</name><op:operator pos:line="175" pos:column="19">.</op:operator><name pos:line="175" pos:column="20">IsTrue</name></name><argument_list pos:line="175" pos:column="26">(<argument><expr><call><name><name pos:line="175" pos:column="27">logFileContent</name><op:operator pos:line="175" pos:column="41">.</op:operator><name pos:line="175" pos:column="42">Contains</name></name><argument_list pos:line="175" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="175" pos:column="51">"Invalid word splitter configuration found - it will be omitted during registration process."</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="175" pos:column="147">"Log file should contain information about removed invalid word splitter configuration!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="178" pos:column="9">[<expr><name pos:line="178" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="179" pos:column="9">public</specifier> <name pos:line="179" pos:column="16">void</name></type> <name pos:line="179" pos:column="21">FindAndRegisterValidExtensionPoints_RemovesInvalidCustomResultsReordererConfiguration</name><parameter_list pos:line="179" pos:column="106">()</parameter_list>
        <block pos:line="180" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="181" pos:column="13">CreateExtensionPointsConfiguration</name><argument_list pos:line="181" pos:column="47">(<argument><expr><name pos:line="181" pos:column="48">addInvalidResultsReordererConfiguration</name><op:operator pos:line="181" pos:column="87">:</op:operator> <lit:literal type="boolean" pos:line="181" pos:column="89">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="182" pos:column="13">ExtensionPointsConfigurationAnalyzer</name><op:operator pos:line="182" pos:column="49">.</op:operator><name pos:line="182" pos:column="50">FindAndRegisterValidExtensionPoints</name></name><argument_list pos:line="182" pos:column="85">(<argument><expr><name pos:line="182" pos:column="86">extensionPointsConfiguration</name></expr></argument>, <argument><expr><name pos:line="182" pos:column="116">logger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="184" pos:column="13">IResultsReorderer</name></type> <name pos:line="184" pos:column="31">resultsReorderer</name> <init pos:line="184" pos:column="48">= <expr><call><name><name pos:line="184" pos:column="50">ExtensionPointsRepository</name><op:operator pos:line="184" pos:column="75">.</op:operator><name pos:line="184" pos:column="76">Instance</name><op:operator pos:line="184" pos:column="84">.</op:operator><name pos:line="184" pos:column="85">GetResultsReordererImplementation</name></name><argument_list pos:line="184" pos:column="118">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="185" pos:column="13">Assert</name><op:operator pos:line="185" pos:column="19">.</op:operator><name pos:line="185" pos:column="20">IsNotNull</name></name><argument_list pos:line="185" pos:column="29">(<argument><expr><name pos:line="185" pos:column="30">resultsReorderer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="185" pos:column="48">"Default results reorderer should be used!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="186" pos:column="13">Assert</name><op:operator pos:line="186" pos:column="19">.</op:operator><name pos:line="186" pos:column="20">AreEqual</name></name><argument_list pos:line="186" pos:column="28">(<argument><expr><call><name><name pos:line="186" pos:column="29">resultsReorderer</name><op:operator pos:line="186" pos:column="45">.</op:operator><name pos:line="186" pos:column="46">GetType</name></name><argument_list pos:line="186" pos:column="53">()</argument_list></call><op:operator pos:line="186" pos:column="55">.</op:operator><name pos:line="186" pos:column="56">FullName</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="186" pos:column="66">"Sando.SearchEngine.SortByScoreResultsReorderer"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="186" pos:column="116">"Invalid results reorderer returned!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="188" pos:column="13">string</name></type> <name pos:line="188" pos:column="20">logFileContent</name> <init pos:line="188" pos:column="35">= <expr><call><name><name pos:line="188" pos:column="37">File</name><op:operator pos:line="188" pos:column="41">.</op:operator><name pos:line="188" pos:column="42">ReadAllText</name></name><argument_list pos:line="188" pos:column="53">(<argument><expr><name pos:line="188" pos:column="54">logFilePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="189" pos:column="13">Assert</name><op:operator pos:line="189" pos:column="19">.</op:operator><name pos:line="189" pos:column="20">IsTrue</name></name><argument_list pos:line="189" pos:column="26">(<argument><expr><call><name><name pos:line="189" pos:column="27">logFileContent</name><op:operator pos:line="189" pos:column="41">.</op:operator><name pos:line="189" pos:column="42">Contains</name></name><argument_list pos:line="189" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="189" pos:column="51">"Invalid results reorderer configuration found - it will be omitted during registration process."</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="189" pos:column="151">"Log file should contain information about removed invalid word splitter configuration!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="192" pos:column="9">[<expr><name pos:line="192" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="193" pos:column="9">public</specifier> <name pos:line="193" pos:column="16">void</name></type> <name pos:line="193" pos:column="21">FindAndRegisterValidExtensionPoints_RemovesInvalidCustomQueryWeightsSupplierConfiguration</name><parameter_list pos:line="193" pos:column="110">()</parameter_list>
        <block pos:line="194" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="195" pos:column="13">CreateExtensionPointsConfiguration</name><argument_list pos:line="195" pos:column="47">(<argument><expr><name pos:line="195" pos:column="48">addInvalidQueryWeightsSupplierConfiguration</name><op:operator pos:line="195" pos:column="91">:</op:operator> <lit:literal type="boolean" pos:line="195" pos:column="93">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="196" pos:column="13">ExtensionPointsConfigurationAnalyzer</name><op:operator pos:line="196" pos:column="49">.</op:operator><name pos:line="196" pos:column="50">FindAndRegisterValidExtensionPoints</name></name><argument_list pos:line="196" pos:column="85">(<argument><expr><name pos:line="196" pos:column="86">extensionPointsConfiguration</name></expr></argument>, <argument><expr><name pos:line="196" pos:column="116">logger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="198" pos:column="13">IQueryWeightsSupplier</name></type> <name pos:line="198" pos:column="35">queryWeightsSupplier</name> <init pos:line="198" pos:column="56">= <expr><call><name><name pos:line="198" pos:column="58">ExtensionPointsRepository</name><op:operator pos:line="198" pos:column="83">.</op:operator><name pos:line="198" pos:column="84">Instance</name><op:operator pos:line="198" pos:column="92">.</op:operator><name pos:line="198" pos:column="93">GetQueryWeightsSupplierImplementation</name></name><argument_list pos:line="198" pos:column="130">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="199" pos:column="13">Assert</name><op:operator pos:line="199" pos:column="19">.</op:operator><name pos:line="199" pos:column="20">IsNotNull</name></name><argument_list pos:line="199" pos:column="29">(<argument><expr><name pos:line="199" pos:column="30">queryWeightsSupplier</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="199" pos:column="52">"Default query weights supplier should be used!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="200" pos:column="13">Assert</name><op:operator pos:line="200" pos:column="19">.</op:operator><name pos:line="200" pos:column="20">AreEqual</name></name><argument_list pos:line="200" pos:column="28">(<argument><expr><call><name><name pos:line="200" pos:column="29">queryWeightsSupplier</name><op:operator pos:line="200" pos:column="49">.</op:operator><name pos:line="200" pos:column="50">GetType</name></name><argument_list pos:line="200" pos:column="57">()</argument_list></call><op:operator pos:line="200" pos:column="59">.</op:operator><name pos:line="200" pos:column="60">FullName</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="200" pos:column="70">"Sando.Indexer.Searching.QueryWeightsSupplier"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="200" pos:column="118">"Invalid query weights supplier returned!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="202" pos:column="13">string</name></type> <name pos:line="202" pos:column="20">logFileContent</name> <init pos:line="202" pos:column="35">= <expr><call><name><name pos:line="202" pos:column="37">File</name><op:operator pos:line="202" pos:column="41">.</op:operator><name pos:line="202" pos:column="42">ReadAllText</name></name><argument_list pos:line="202" pos:column="53">(<argument><expr><name pos:line="202" pos:column="54">logFilePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="203" pos:column="13">Assert</name><op:operator pos:line="203" pos:column="19">.</op:operator><name pos:line="203" pos:column="20">IsTrue</name></name><argument_list pos:line="203" pos:column="26">(<argument><expr><call><name><name pos:line="203" pos:column="27">logFileContent</name><op:operator pos:line="203" pos:column="41">.</op:operator><name pos:line="203" pos:column="42">Contains</name></name><argument_list pos:line="203" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="203" pos:column="51">"Invalid query weights supplier configuration found - it will be omitted during registration process."</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="203" pos:column="156">"Log file should contain information about removed invalid word splitter configuration!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="206" pos:column="9">[<expr><name pos:line="206" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="207" pos:column="9">public</specifier> <name pos:line="207" pos:column="16">void</name></type> <name pos:line="207" pos:column="21">FindAndRegisterValidExtensionPoints_RemovesInvalidCustomQueryRewriterConfiguration</name><parameter_list pos:line="207" pos:column="103">()</parameter_list>
        <block pos:line="208" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="209" pos:column="13">CreateExtensionPointsConfiguration</name><argument_list pos:line="209" pos:column="47">(<argument><expr><name pos:line="209" pos:column="48">addInvalidQueryRewriterConfiguration</name><op:operator pos:line="209" pos:column="84">:</op:operator> <lit:literal type="boolean" pos:line="209" pos:column="86">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="210" pos:column="13">ExtensionPointsConfigurationAnalyzer</name><op:operator pos:line="210" pos:column="49">.</op:operator><name pos:line="210" pos:column="50">FindAndRegisterValidExtensionPoints</name></name><argument_list pos:line="210" pos:column="85">(<argument><expr><name pos:line="210" pos:column="86">extensionPointsConfiguration</name></expr></argument>, <argument><expr><name pos:line="210" pos:column="116">logger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="212" pos:column="13">IQueryRewriter</name></type> <name pos:line="212" pos:column="28">queryRewriter</name> <init pos:line="212" pos:column="42">= <expr><call><name><name pos:line="212" pos:column="44">ExtensionPointsRepository</name><op:operator pos:line="212" pos:column="69">.</op:operator><name pos:line="212" pos:column="70">Instance</name><op:operator pos:line="212" pos:column="78">.</op:operator><name pos:line="212" pos:column="79">GetQueryRewriterImplementation</name></name><argument_list pos:line="212" pos:column="109">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="213" pos:column="13">Assert</name><op:operator pos:line="213" pos:column="19">.</op:operator><name pos:line="213" pos:column="20">IsNotNull</name></name><argument_list pos:line="213" pos:column="29">(<argument><expr><name pos:line="213" pos:column="30">queryRewriter</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="213" pos:column="45">"Default query rewriter should be used!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="214" pos:column="13">Assert</name><op:operator pos:line="214" pos:column="19">.</op:operator><name pos:line="214" pos:column="20">AreEqual</name></name><argument_list pos:line="214" pos:column="28">(<argument><expr><call><name><name pos:line="214" pos:column="29">queryRewriter</name><op:operator pos:line="214" pos:column="42">.</op:operator><name pos:line="214" pos:column="43">GetType</name></name><argument_list pos:line="214" pos:column="50">()</argument_list></call><op:operator pos:line="214" pos:column="52">.</op:operator><name pos:line="214" pos:column="53">FullName</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="214" pos:column="63">"Sando.Indexer.Searching.DefaultQueryRewriter"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="214" pos:column="111">"Invalid query rewriter returned!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="216" pos:column="13">string</name></type> <name pos:line="216" pos:column="20">logFileContent</name> <init pos:line="216" pos:column="35">= <expr><call><name><name pos:line="216" pos:column="37">File</name><op:operator pos:line="216" pos:column="41">.</op:operator><name pos:line="216" pos:column="42">ReadAllText</name></name><argument_list pos:line="216" pos:column="53">(<argument><expr><name pos:line="216" pos:column="54">logFilePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="217" pos:column="13">Assert</name><op:operator pos:line="217" pos:column="19">.</op:operator><name pos:line="217" pos:column="20">IsTrue</name></name><argument_list pos:line="217" pos:column="26">(<argument><expr><call><name><name pos:line="217" pos:column="27">logFileContent</name><op:operator pos:line="217" pos:column="41">.</op:operator><name pos:line="217" pos:column="42">Contains</name></name><argument_list pos:line="217" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="217" pos:column="51">"Invalid query rewriter configuration found - it will be omitted during registration process."</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="217" pos:column="148">"Log file should contain information about removed invalid query rewriter configuration!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="220" pos:column="9">[<expr><name pos:line="220" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="221" pos:column="9">public</specifier> <name pos:line="221" pos:column="16">void</name></type> <name pos:line="221" pos:column="21">FindAndRegisterValidExtensionPoints_RemovesInvalidCustomIndexFilterManagerConfiguration</name><parameter_list pos:line="221" pos:column="108">()</parameter_list>
        <block pos:line="222" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="223" pos:column="13">CreateExtensionPointsConfiguration</name><argument_list pos:line="223" pos:column="47">(<argument><expr><name pos:line="223" pos:column="48">addInvalidIndexFilterManagerConfiguration</name><op:operator pos:line="223" pos:column="89">:</op:operator> <lit:literal type="boolean" pos:line="223" pos:column="91">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="224" pos:column="13">ExtensionPointsConfigurationAnalyzer</name><op:operator pos:line="224" pos:column="49">.</op:operator><name pos:line="224" pos:column="50">FindAndRegisterValidExtensionPoints</name></name><argument_list pos:line="224" pos:column="85">(<argument><expr><name pos:line="224" pos:column="86">extensionPointsConfiguration</name></expr></argument>, <argument><expr><name pos:line="224" pos:column="116">logger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="226" pos:column="13">IIndexFilterManager</name></type> <name pos:line="226" pos:column="33">indexFilterManager</name> <init pos:line="226" pos:column="52">= <expr><call><name><name pos:line="226" pos:column="54">ExtensionPointsRepository</name><op:operator pos:line="226" pos:column="79">.</op:operator><name pos:line="226" pos:column="80">Instance</name><op:operator pos:line="226" pos:column="88">.</op:operator><name pos:line="226" pos:column="89">GetIndexFilterManagerImplementation</name></name><argument_list pos:line="226" pos:column="124">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="227" pos:column="13">Assert</name><op:operator pos:line="227" pos:column="19">.</op:operator><name pos:line="227" pos:column="20">IsNotNull</name></name><argument_list pos:line="227" pos:column="29">(<argument><expr><name pos:line="227" pos:column="30">indexFilterManager</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="227" pos:column="50">"Default index filter manager should be used!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="228" pos:column="13">Assert</name><op:operator pos:line="228" pos:column="19">.</op:operator><name pos:line="228" pos:column="20">AreEqual</name></name><argument_list pos:line="228" pos:column="28">(<argument><expr><call><name><name pos:line="228" pos:column="29">indexFilterManager</name><op:operator pos:line="228" pos:column="47">.</op:operator><name pos:line="228" pos:column="48">GetType</name></name><argument_list pos:line="228" pos:column="55">()</argument_list></call><op:operator pos:line="228" pos:column="57">.</op:operator><name pos:line="228" pos:column="58">FullName</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="228" pos:column="68">"Sando.Indexer.IndexFiltering.IndexFilterManager"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="228" pos:column="119">"Invalid index filter manager returned!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="230" pos:column="13">string</name></type> <name pos:line="230" pos:column="20">logFileContent</name> <init pos:line="230" pos:column="35">= <expr><call><name><name pos:line="230" pos:column="37">File</name><op:operator pos:line="230" pos:column="41">.</op:operator><name pos:line="230" pos:column="42">ReadAllText</name></name><argument_list pos:line="230" pos:column="53">(<argument><expr><name pos:line="230" pos:column="54">logFilePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="231" pos:column="13">Assert</name><op:operator pos:line="231" pos:column="19">.</op:operator><name pos:line="231" pos:column="20">IsTrue</name></name><argument_list pos:line="231" pos:column="26">(<argument><expr><call><name><name pos:line="231" pos:column="27">logFileContent</name><op:operator pos:line="231" pos:column="41">.</op:operator><name pos:line="231" pos:column="42">Contains</name></name><argument_list pos:line="231" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="231" pos:column="51">"Invalid index filter manager configuration found - it will be omitted during registration process."</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="231" pos:column="154">"Log file should contain information about removed invalid index filter manager configuration!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="234" pos:column="9">[<expr><name pos:line="234" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="235" pos:column="9">public</specifier> <name pos:line="235" pos:column="16">void</name></type> <name pos:line="235" pos:column="21">FindAndRegisterValidExtensionPoints_DoesNotRegisterInvalidExtensionPoints</name><parameter_list pos:line="235" pos:column="94">()</parameter_list>
        <block pos:line="236" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="237" pos:column="13">CreateExtensionPointsConfiguration</name><argument_list pos:line="237" pos:column="47">(<argument><expr><name pos:line="237" pos:column="48">addInvalidExtensionPoints</name><op:operator pos:line="237" pos:column="73">:</op:operator> <lit:literal type="boolean" pos:line="237" pos:column="75">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="238" pos:column="13">ExtensionPointsConfigurationAnalyzer</name><op:operator pos:line="238" pos:column="49">.</op:operator><name pos:line="238" pos:column="50">FindAndRegisterValidExtensionPoints</name></name><argument_list pos:line="238" pos:column="85">(<argument><expr><name pos:line="238" pos:column="86">extensionPointsConfiguration</name></expr></argument>, <argument><expr><name pos:line="238" pos:column="116">logger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="240" pos:column="13">IParser</name></type> <name pos:line="240" pos:column="21">parser</name> <init pos:line="240" pos:column="28">= <expr><call><name><name pos:line="240" pos:column="30">ExtensionPointsRepository</name><op:operator pos:line="240" pos:column="55">.</op:operator><name pos:line="240" pos:column="56">Instance</name><op:operator pos:line="240" pos:column="64">.</op:operator><name pos:line="240" pos:column="65">GetParserImplementation</name></name><argument_list pos:line="240" pos:column="88">(<argument><expr><lit:literal type="string" pos:line="240" pos:column="89">".cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="241" pos:column="13">Assert</name><op:operator pos:line="241" pos:column="19">.</op:operator><name pos:line="241" pos:column="20">IsNotNull</name></name><argument_list pos:line="241" pos:column="29">(<argument><expr><name pos:line="241" pos:column="30">parser</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="241" pos:column="38">"Default parser for '.cs' extension should be used!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="242" pos:column="13">Assert</name><op:operator pos:line="242" pos:column="19">.</op:operator><name pos:line="242" pos:column="20">AreEqual</name></name><argument_list pos:line="242" pos:column="28">(<argument><expr><call><name><name pos:line="242" pos:column="29">parser</name><op:operator pos:line="242" pos:column="35">.</op:operator><name pos:line="242" pos:column="36">GetType</name></name><argument_list pos:line="242" pos:column="43">()</argument_list></call><op:operator pos:line="242" pos:column="45">.</op:operator><name pos:line="242" pos:column="46">FullName</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="242" pos:column="56">"Sando.Parser.SrcMLCSharpParser"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="242" pos:column="90">"Invalid parser returned for '.cs' extension!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="244" pos:column="13">IWordSplitter</name></type> <name pos:line="244" pos:column="27">wordSplitter</name> <init pos:line="244" pos:column="40">= <expr><call><name><name pos:line="244" pos:column="42">ExtensionPointsRepository</name><op:operator pos:line="244" pos:column="67">.</op:operator><name pos:line="244" pos:column="68">Instance</name><op:operator pos:line="244" pos:column="76">.</op:operator><name pos:line="244" pos:column="77">GetWordSplitterImplementation</name></name><argument_list pos:line="244" pos:column="106">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="245" pos:column="13">Assert</name><op:operator pos:line="245" pos:column="19">.</op:operator><name pos:line="245" pos:column="20">IsNotNull</name></name><argument_list pos:line="245" pos:column="29">(<argument><expr><name pos:line="245" pos:column="30">wordSplitter</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="245" pos:column="44">"Default word splitter should be used!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="246" pos:column="13">Assert</name><op:operator pos:line="246" pos:column="19">.</op:operator><name pos:line="246" pos:column="20">AreEqual</name></name><argument_list pos:line="246" pos:column="28">(<argument><expr><call><name><name pos:line="246" pos:column="29">wordSplitter</name><op:operator pos:line="246" pos:column="41">.</op:operator><name pos:line="246" pos:column="42">GetType</name></name><argument_list pos:line="246" pos:column="49">()</argument_list></call><op:operator pos:line="246" pos:column="51">.</op:operator><name pos:line="246" pos:column="52">FullName</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="246" pos:column="62">"Sando.Core.Tools.WordSplitter"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="246" pos:column="95">"Invalid word splitter returned!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="248" pos:column="13">IResultsReorderer</name></type> <name pos:line="248" pos:column="31">resultsReorderer</name> <init pos:line="248" pos:column="48">= <expr><call><name><name pos:line="248" pos:column="50">ExtensionPointsRepository</name><op:operator pos:line="248" pos:column="75">.</op:operator><name pos:line="248" pos:column="76">Instance</name><op:operator pos:line="248" pos:column="84">.</op:operator><name pos:line="248" pos:column="85">GetResultsReordererImplementation</name></name><argument_list pos:line="248" pos:column="118">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="249" pos:column="13">Assert</name><op:operator pos:line="249" pos:column="19">.</op:operator><name pos:line="249" pos:column="20">IsNotNull</name></name><argument_list pos:line="249" pos:column="29">(<argument><expr><name pos:line="249" pos:column="30">resultsReorderer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="249" pos:column="48">"Default results reorderer should be used!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="250" pos:column="13">Assert</name><op:operator pos:line="250" pos:column="19">.</op:operator><name pos:line="250" pos:column="20">AreEqual</name></name><argument_list pos:line="250" pos:column="28">(<argument><expr><call><name><name pos:line="250" pos:column="29">resultsReorderer</name><op:operator pos:line="250" pos:column="45">.</op:operator><name pos:line="250" pos:column="46">GetType</name></name><argument_list pos:line="250" pos:column="53">()</argument_list></call><op:operator pos:line="250" pos:column="55">.</op:operator><name pos:line="250" pos:column="56">FullName</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="250" pos:column="66">"Sando.SearchEngine.SortByScoreResultsReorderer"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="250" pos:column="116">"Invalid results reorderer returned!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="252" pos:column="13">string</name></type> <name pos:line="252" pos:column="20">logFileContent</name> <init pos:line="252" pos:column="35">= <expr><call><name><name pos:line="252" pos:column="37">File</name><op:operator pos:line="252" pos:column="41">.</op:operator><name pos:line="252" pos:column="42">ReadAllText</name></name><argument_list pos:line="252" pos:column="53">(<argument><expr><name pos:line="252" pos:column="54">logFilePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="253" pos:column="13">Assert</name><op:operator pos:line="253" pos:column="19">.</op:operator><name pos:line="253" pos:column="20">IsTrue</name></name><argument_list pos:line="253" pos:column="26">(<argument><expr><call><name><name pos:line="253" pos:column="27">logFileContent</name><op:operator pos:line="253" pos:column="41">.</op:operator><name pos:line="253" pos:column="42">Contains</name></name><argument_list pos:line="253" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="253" pos:column="51">"Type cannot be found: Sando.NonExistingParser"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="253" pos:column="101">"Log file should contain information about errors occurred during the assembly loading!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="254" pos:column="13">Assert</name><op:operator pos:line="254" pos:column="19">.</op:operator><name pos:line="254" pos:column="20">IsTrue</name></name><argument_list pos:line="254" pos:column="26">(<argument><expr><call><name><name pos:line="254" pos:column="27">logFileContent</name><op:operator pos:line="254" pos:column="41">.</op:operator><name pos:line="254" pos:column="42">Contains</name></name><argument_list pos:line="254" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="254" pos:column="51">"Could not load file or assembly 'file:///"</lit:literal> <op:operator pos:line="254" pos:column="95">+</op:operator> <name pos:line="254" pos:column="97">pluginDirectory</name> <op:operator pos:line="254" pos:column="113">+</op:operator> <lit:literal type="string" pos:line="254" pos:column="115">"NonExistingParser.dll' or one of its dependencies"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="254" pos:column="169">"Log file should contain information about errors occurred during the assembly loading!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="255" pos:column="13">Assert</name><op:operator pos:line="255" pos:column="19">.</op:operator><name pos:line="255" pos:column="20">IsTrue</name></name><argument_list pos:line="255" pos:column="26">(<argument><expr><call><name><name pos:line="255" pos:column="27">logFileContent</name><op:operator pos:line="255" pos:column="41">.</op:operator><name pos:line="255" pos:column="42">Contains</name></name><argument_list pos:line="255" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="255" pos:column="51">"Could not load file or assembly 'file:///"</lit:literal> <op:operator pos:line="255" pos:column="95">+</op:operator> <name pos:line="255" pos:column="97">pluginDirectory</name> <op:operator pos:line="255" pos:column="113">+</op:operator> <lit:literal type="string" pos:line="255" pos:column="115">"NonExistingTestElement.dll' or one of its dependencies"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="255" pos:column="174">"Log file should contain information about errors occurred during the assembly loading!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="256" pos:column="13">Assert</name><op:operator pos:line="256" pos:column="19">.</op:operator><name pos:line="256" pos:column="20">IsTrue</name></name><argument_list pos:line="256" pos:column="26">(<argument><expr><call><name><name pos:line="256" pos:column="27">logFileContent</name><op:operator pos:line="256" pos:column="41">.</op:operator><name pos:line="256" pos:column="42">Contains</name></name><argument_list pos:line="256" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="256" pos:column="51">"Could not load file or assembly 'file:///"</lit:literal> <op:operator pos:line="256" pos:column="95">+</op:operator> <name pos:line="256" pos:column="97">pluginDirectory</name> <op:operator pos:line="256" pos:column="113">+</op:operator> <lit:literal type="string" pos:line="256" pos:column="115">"NonExistingWordSplitter.dll' or one of its dependencies"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="256" pos:column="175">"Log file should contain information about errors occurred during the assembly loading!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="257" pos:column="13">Assert</name><op:operator pos:line="257" pos:column="19">.</op:operator><name pos:line="257" pos:column="20">IsTrue</name></name><argument_list pos:line="257" pos:column="26">(<argument><expr><call><name><name pos:line="257" pos:column="27">logFileContent</name><op:operator pos:line="257" pos:column="41">.</op:operator><name pos:line="257" pos:column="42">Contains</name></name><argument_list pos:line="257" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="257" pos:column="51">"Type cannot be found: Sando.TestExtensionPoints.NonExistingResultsReorderer"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="257" pos:column="131">"Log file should contain information about errors occurred during the assembly loading!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="258" pos:column="13">Assert</name><op:operator pos:line="258" pos:column="19">.</op:operator><name pos:line="258" pos:column="20">IsTrue</name></name><argument_list pos:line="258" pos:column="26">(<argument><expr><call><name><name pos:line="258" pos:column="27">logFileContent</name><op:operator pos:line="258" pos:column="41">.</op:operator><name pos:line="258" pos:column="42">Contains</name></name><argument_list pos:line="258" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="258" pos:column="51">"Type cannot be found: Sando.TestExtensionPoints.NonExistingQueryWeightsSupplier"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="258" pos:column="135">"Log file should contain information about errors occurred during the assembly loading!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="259" pos:column="13">Assert</name><op:operator pos:line="259" pos:column="19">.</op:operator><name pos:line="259" pos:column="20">IsTrue</name></name><argument_list pos:line="259" pos:column="26">(<argument><expr><call><name><name pos:line="259" pos:column="27">logFileContent</name><op:operator pos:line="259" pos:column="41">.</op:operator><name pos:line="259" pos:column="42">Contains</name></name><argument_list pos:line="259" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="259" pos:column="51">"Type cannot be found: Sando.TestExtensionPoints.NonExistingQueryRewriter"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="259" pos:column="128">"Log file should contain information about errors occurred during the assembly loading!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="260" pos:column="13">Assert</name><op:operator pos:line="260" pos:column="19">.</op:operator><name pos:line="260" pos:column="20">IsTrue</name></name><argument_list pos:line="260" pos:column="26">(<argument><expr><call><name><name pos:line="260" pos:column="27">logFileContent</name><op:operator pos:line="260" pos:column="41">.</op:operator><name pos:line="260" pos:column="42">Contains</name></name><argument_list pos:line="260" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="260" pos:column="51">"Type cannot be found: Sando.TestExtensionPoints.NonExistingIndexFilterManager"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="260" pos:column="133">"Log file should contain information about errors occurred during the assembly loading!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="263" pos:column="9">[<expr><name pos:line="263" pos:column="10">SetUp</name></expr>]</attribute>
        <specifier pos:line="264" pos:column="9">public</specifier> <name pos:line="264" pos:column="16">void</name></type> <name pos:line="264" pos:column="21">SetUp</name><parameter_list pos:line="264" pos:column="26">()</parameter_list>
        <block pos:line="265" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="266" pos:column="13">TestUtils</name><op:operator pos:line="266" pos:column="22">.</op:operator><name pos:line="266" pos:column="23">InitializeDefaultExtensionPoints</name></name><argument_list pos:line="266" pos:column="55">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="269" pos:column="9">[<expr><name pos:line="269" pos:column="10">TestFixtureSetUp</name></expr>]</attribute>
        <specifier pos:line="270" pos:column="9">public</specifier> <name pos:line="270" pos:column="16">void</name></type> <name pos:line="270" pos:column="21">TextFixtureSetUp</name><parameter_list pos:line="270" pos:column="37">()</parameter_list>
        <block pos:line="271" pos:column="9">{
            <expr_stmt><expr><name pos:line="272" pos:column="13">pluginDirectory</name> <op:operator pos:line="272" pos:column="29">=</op:operator> <call><name><name pos:line="272" pos:column="31">Path</name><op:operator pos:line="272" pos:column="35">.</op:operator><name pos:line="272" pos:column="36">GetTempPath</name></name><argument_list pos:line="272" pos:column="47">()</argument_list></call></expr>;</expr_stmt>
            <try pos:line="273" pos:column="13">try
            <block pos:line="274" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="275" pos:column="17">File</name><op:operator pos:line="275" pos:column="21">.</op:operator><name pos:line="275" pos:column="22">Copy</name></name><argument_list pos:line="275" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="275" pos:column="27">"TestExtensionPoints.dll"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="275" pos:column="54">Path</name><op:operator pos:line="275" pos:column="58">.</op:operator><name pos:line="275" pos:column="59">Combine</name></name><argument_list pos:line="275" pos:column="66">(<argument><expr><name pos:line="275" pos:column="67">pluginDirectory</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="275" pos:column="84">"TestExtensionPoints.dll"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="275" pos:column="112">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch pos:line="277" pos:column="13">catch
            <block pos:line="278" pos:column="13">{
            }</block></catch></try>

            <expr_stmt><expr><name pos:line="281" pos:column="13">logFilePath</name> <op:operator pos:line="281" pos:column="25">=</op:operator> <call><name><name pos:line="281" pos:column="27">Path</name><op:operator pos:line="281" pos:column="31">.</op:operator><name pos:line="281" pos:column="32">Combine</name></name><argument_list pos:line="281" pos:column="39">(<argument><expr><name pos:line="281" pos:column="40">pluginDirectory</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="281" pos:column="57">"ExtensionAnalyzer.log"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="282" pos:column="13">logger</name> <op:operator pos:line="282" pos:column="20">=</op:operator> <call><name><name pos:line="282" pos:column="22">FileLogger</name><op:operator pos:line="282" pos:column="32">.</op:operator><name pos:line="282" pos:column="33">CreateFileLogger</name></name><argument_list pos:line="282" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="282" pos:column="50">"ExtensionPointsLogger"</lit:literal></expr></argument>, <argument><expr><name pos:line="282" pos:column="75">logFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="285" pos:column="9">[<expr><name pos:line="285" pos:column="10">TearDown</name></expr>]</attribute>
        <specifier pos:line="286" pos:column="9">public</specifier> <name pos:line="286" pos:column="16">void</name></type> <name pos:line="286" pos:column="21">TearDown</name><parameter_list pos:line="286" pos:column="29">()</parameter_list>
        <block pos:line="287" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="288" pos:column="13">ExtensionPointsRepository</name><op:operator pos:line="288" pos:column="38">.</op:operator><name pos:line="288" pos:column="39">Instance</name><op:operator pos:line="288" pos:column="47">.</op:operator><name pos:line="288" pos:column="48">ClearRepository</name></name><argument_list pos:line="288" pos:column="63">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="291" pos:column="9">private</specifier> <name pos:line="291" pos:column="17">void</name></type> <name pos:line="291" pos:column="22">CreateExtensionPointsConfiguration</name><parameter_list pos:line="291" pos:column="56">(
            <param><decl><type><name pos:line="292" pos:column="13">bool</name></type> <name pos:line="292" pos:column="18">addValidParserConfigurations</name> <init pos:line="292" pos:column="47">= <expr><lit:literal type="boolean" pos:line="292" pos:column="49">false</lit:literal></expr></init></decl></param>,
            <name pos:line="293" pos:column="13">bool</name> <name pos:line="293" pos:column="18">addInvalidParserConfigurations</name> <op:operator pos:line="293" pos:column="49">=</op:operator> <lit:literal type="boolean" pos:line="293" pos:column="51">false</lit:literal>,
            <name pos:line="294" pos:column="13">bool</name> <name pos:line="294" pos:column="18">addValidWordSplitterConfiguration</name> <op:operator pos:line="294" pos:column="52">=</op:operator> <lit:literal type="boolean" pos:line="294" pos:column="54">false</lit:literal>,
            <name pos:line="295" pos:column="13">bool</name> <name pos:line="295" pos:column="18">addInvalidWordSplitterConfiguration</name> <op:operator pos:line="295" pos:column="54">=</op:operator> <lit:literal type="boolean" pos:line="295" pos:column="56">false</lit:literal>,
            <name pos:line="296" pos:column="13">bool</name> <name pos:line="296" pos:column="18">addValidResultsReordererConfiguration</name> <op:operator pos:line="296" pos:column="56">=</op:operator> <lit:literal type="boolean" pos:line="296" pos:column="58">false</lit:literal>,
            <name pos:line="297" pos:column="13">bool</name> <name pos:line="297" pos:column="18">addInvalidResultsReordererConfiguration</name> <op:operator pos:line="297" pos:column="58">=</op:operator> <lit:literal type="boolean" pos:line="297" pos:column="60">false</lit:literal>,
            <name pos:line="298" pos:column="13">bool</name> <name pos:line="298" pos:column="18">addValidQueryWeightsSupplierConfiguration</name> <op:operator pos:line="298" pos:column="60">=</op:operator> <lit:literal type="boolean" pos:line="298" pos:column="62">false</lit:literal>,
            <name pos:line="299" pos:column="13">bool</name> <name pos:line="299" pos:column="18">addInvalidQueryWeightsSupplierConfiguration</name> <op:operator pos:line="299" pos:column="62">=</op:operator> <lit:literal type="boolean" pos:line="299" pos:column="64">false</lit:literal>,
            <name pos:line="300" pos:column="13">bool</name> <name pos:line="300" pos:column="18">addValidQueryRewriterConfiguration</name> <op:operator pos:line="300" pos:column="53">=</op:operator> <lit:literal type="boolean" pos:line="300" pos:column="55">false</lit:literal>,
            <name pos:line="301" pos:column="13">bool</name> <name pos:line="301" pos:column="18">addInvalidQueryRewriterConfiguration</name> <op:operator pos:line="301" pos:column="55">=</op:operator> <lit:literal type="boolean" pos:line="301" pos:column="57">false</lit:literal>,
            <name pos:line="302" pos:column="13">bool</name> <name pos:line="302" pos:column="18">addValidIndexFilterManagerConfiguration</name> <op:operator pos:line="302" pos:column="58">=</op:operator> <lit:literal type="boolean" pos:line="302" pos:column="60">false</lit:literal>,
            <name pos:line="303" pos:column="13">bool</name> <name pos:line="303" pos:column="18">addInvalidIndexFilterManagerConfiguration</name> <op:operator pos:line="303" pos:column="60">=</op:operator> <lit:literal type="boolean" pos:line="303" pos:column="62">false</lit:literal>,
            <name pos:line="304" pos:column="13">bool</name> <name pos:line="304" pos:column="18">addInvalidExtensionPoints</name> <op:operator pos:line="304" pos:column="44">=</op:operator> <lit:literal type="boolean" pos:line="304" pos:column="46">false</lit:literal>)</parameter_list>
        <block pos:line="305" pos:column="9">{
            <expr_stmt><expr><name pos:line="306" pos:column="13">extensionPointsConfiguration</name> <op:operator pos:line="306" pos:column="42">=</op:operator> <op:operator pos:line="306" pos:column="44">new</op:operator> <call><name pos:line="306" pos:column="48">ExtensionPointsConfiguration</name><argument_list pos:line="306" pos:column="76">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="307" pos:column="13">extensionPointsConfiguration</name><op:operator pos:line="307" pos:column="41">.</op:operator><name pos:line="307" pos:column="42">PluginDirectoryPath</name></name> <op:operator pos:line="307" pos:column="62">=</op:operator> <name pos:line="307" pos:column="64">pluginDirectory</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="308" pos:column="13">extensionPointsConfiguration</name><op:operator pos:line="308" pos:column="41">.</op:operator><name pos:line="308" pos:column="42">ParsersConfiguration</name></name> <op:operator pos:line="308" pos:column="63">=</op:operator> <op:operator pos:line="308" pos:column="65">new</op:operator> <call><name><name pos:line="308" pos:column="69">List</name><argument_list pos:line="308" pos:column="73">&lt;<argument><name pos:line="308" pos:column="74">ParserExtensionPointsConfiguration</name></argument>&gt;</argument_list></name><argument_list pos:line="308" pos:column="109">()</argument_list></call></expr>;</expr_stmt>

            <if pos:line="310" pos:column="13">if <condition pos:line="310" pos:column="16">(<expr><name pos:line="310" pos:column="17">addValidParserConfigurations</name></expr>)</condition><then pos:line="310" pos:column="46">
            <block pos:line="311" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="312" pos:column="17">extensionPointsConfiguration</name><op:operator pos:line="312" pos:column="45">.</op:operator><name pos:line="312" pos:column="46">ParsersConfiguration</name><op:operator pos:line="312" pos:column="66">.</op:operator><name pos:line="312" pos:column="67">AddRange</name></name><argument_list pos:line="312" pos:column="75">(
                    <argument><expr><op:operator pos:line="313" pos:column="21">new</op:operator> <call><name><name pos:line="313" pos:column="25">List</name><argument_list pos:line="313" pos:column="29">&lt;<argument><name pos:line="313" pos:column="30">ParserExtensionPointsConfiguration</name></argument>&gt;</argument_list></name><argument_list pos:line="313" pos:column="65">()</argument_list></call>
					<block pos:line="314" pos:column="41">{
						<expr><op:operator pos:line="315" pos:column="49">new</op:operator> <call><name pos:line="315" pos:column="53">ParserExtensionPointsConfiguration</name><argument_list pos:line="315" pos:column="87">()</argument_list></call>
						<block pos:line="316" pos:column="49">{
							<expr><name pos:line="317" pos:column="57">FullClassName</name> <op:operator pos:line="317" pos:column="71">=</op:operator> <lit:literal type="string" pos:line="317" pos:column="73">"Sando.TestExtensionPoints.TestCSharpParser"</lit:literal></expr><op:operator pos:line="317" pos:column="117">,</op:operator>
							<expr><name pos:line="318" pos:column="57">LibraryFileRelativePath</name> <op:operator pos:line="318" pos:column="81">=</op:operator> <lit:literal type="string" pos:line="318" pos:column="83">"TestExtensionPoints.dll"</lit:literal></expr><op:operator pos:line="318" pos:column="108">,</op:operator>
							<expr><name pos:line="319" pos:column="57">SupportedFileExtensions</name> <op:operator pos:line="319" pos:column="81">=</op:operator> <op:operator pos:line="319" pos:column="83">new</op:operator> <call><name><name pos:line="319" pos:column="87">List</name><argument_list pos:line="319" pos:column="91">&lt;<argument><name pos:line="319" pos:column="92">string</name></argument>&gt;</argument_list></name><argument_list pos:line="319" pos:column="99">()</argument_list></call> <block pos:line="319" pos:column="102">{ <expr><lit:literal type="string" pos:line="319" pos:column="104">".cs"</lit:literal></expr> }</block></expr><op:operator pos:line="319" pos:column="111">,</op:operator>
							<expr><name pos:line="320" pos:column="57">ProgramElementsConfiguration</name> <op:operator pos:line="320" pos:column="86">=</op:operator> <op:operator pos:line="320" pos:column="88">new</op:operator> <call><name><name pos:line="320" pos:column="92">List</name><argument_list pos:line="320" pos:column="96">&lt;<argument><name pos:line="320" pos:column="97">BaseExtensionPointConfiguration</name></argument>&gt;</argument_list></name><argument_list pos:line="320" pos:column="129">()</argument_list></call>
							<block pos:line="321" pos:column="57">{
								<expr><op:operator pos:line="322" pos:column="65">new</op:operator> <call><name pos:line="322" pos:column="69">BaseExtensionPointConfiguration</name><argument_list pos:line="322" pos:column="100">()</argument_list></call>
								<block pos:line="323" pos:column="65">{
									<expr><name pos:line="324" pos:column="73">FullClassName</name> <op:operator pos:line="324" pos:column="87">=</op:operator> <lit:literal type="string" pos:line="324" pos:column="89">"Sando.TestExtensionPoints.TestElement"</lit:literal></expr><op:operator pos:line="324" pos:column="128">,</op:operator>
									<expr><name pos:line="325" pos:column="73">LibraryFileRelativePath</name> <op:operator pos:line="325" pos:column="97">=</op:operator> <lit:literal type="string" pos:line="325" pos:column="99">"TestExtensionPoints.dll"</lit:literal></expr>
								}</block></expr>
							}</block></expr>
						}</block></expr><op:operator pos:line="328" pos:column="50">,</op:operator>
						<expr><op:operator pos:line="329" pos:column="49">new</op:operator> <call><name pos:line="329" pos:column="53">ParserExtensionPointsConfiguration</name><argument_list pos:line="329" pos:column="87">()</argument_list></call>
						<block pos:line="330" pos:column="49">{
							<expr><name pos:line="331" pos:column="57">FullClassName</name> <op:operator pos:line="331" pos:column="71">=</op:operator> <lit:literal type="string" pos:line="331" pos:column="73">"Sando.TestExtensionPoints.TestCppParser"</lit:literal></expr><op:operator pos:line="331" pos:column="114">,</op:operator>
							<expr><name pos:line="332" pos:column="57">LibraryFileRelativePath</name> <op:operator pos:line="332" pos:column="81">=</op:operator> <lit:literal type="string" pos:line="332" pos:column="83">"TestExtensionPoints.dll"</lit:literal></expr><op:operator pos:line="332" pos:column="108">,</op:operator>
							<expr><name pos:line="333" pos:column="57">SupportedFileExtensions</name> <op:operator pos:line="333" pos:column="81">=</op:operator> <op:operator pos:line="333" pos:column="83">new</op:operator> <call><name><name pos:line="333" pos:column="87">List</name><argument_list pos:line="333" pos:column="91">&lt;<argument><name pos:line="333" pos:column="92">string</name></argument>&gt;</argument_list></name><argument_list pos:line="333" pos:column="99">()</argument_list></call> <block pos:line="333" pos:column="102">{ <expr><lit:literal type="string" pos:line="333" pos:column="104">".h"</lit:literal></expr><op:operator pos:line="333" pos:column="108">,</op:operator> <expr><lit:literal type="string" pos:line="333" pos:column="110">".cpp"</lit:literal></expr><op:operator pos:line="333" pos:column="116">,</op:operator> <expr><lit:literal type="string" pos:line="333" pos:column="118">".cxx"</lit:literal></expr> }</block></expr>
						}</block></expr>
					}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if pos:line="337" pos:column="13">if <condition pos:line="337" pos:column="16">(<expr><name pos:line="337" pos:column="17">addInvalidParserConfigurations</name></expr>)</condition><then pos:line="337" pos:column="48">
            <block pos:line="338" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="339" pos:column="17">extensionPointsConfiguration</name><op:operator pos:line="339" pos:column="45">.</op:operator><name pos:line="339" pos:column="46">ParsersConfiguration</name><op:operator pos:line="339" pos:column="66">.</op:operator><name pos:line="339" pos:column="67">AddRange</name></name><argument_list pos:line="339" pos:column="75">(
                    <argument><expr><op:operator pos:line="340" pos:column="21">new</op:operator> <call><name><name pos:line="340" pos:column="25">List</name><argument_list pos:line="340" pos:column="29">&lt;<argument><name pos:line="340" pos:column="30">ParserExtensionPointsConfiguration</name></argument>&gt;</argument_list></name><argument_list pos:line="340" pos:column="65">()</argument_list></call>
					<block pos:line="341" pos:column="41">{
						<expr><op:operator pos:line="342" pos:column="49">new</op:operator> <call><name pos:line="342" pos:column="53">ParserExtensionPointsConfiguration</name><argument_list pos:line="342" pos:column="87">()</argument_list></call>
						<block pos:line="343" pos:column="49">{
							<expr><name pos:line="344" pos:column="57">FullClassName</name> <op:operator pos:line="344" pos:column="71">=</op:operator> <lit:literal type="string" pos:line="344" pos:column="73">""</lit:literal></expr><op:operator pos:line="344" pos:column="75">,</op:operator>
							<expr><name pos:line="345" pos:column="57">LibraryFileRelativePath</name> <op:operator pos:line="345" pos:column="81">=</op:operator> <lit:literal type="string" pos:line="345" pos:column="83">"TestExtensionPoints.dll"</lit:literal></expr><op:operator pos:line="345" pos:column="108">,</op:operator>
							<expr><name pos:line="346" pos:column="57">SupportedFileExtensions</name> <op:operator pos:line="346" pos:column="81">=</op:operator> <op:operator pos:line="346" pos:column="83">new</op:operator> <call><name><name pos:line="346" pos:column="87">List</name><argument_list pos:line="346" pos:column="91">&lt;<argument><name pos:line="346" pos:column="92">string</name></argument>&gt;</argument_list></name><argument_list pos:line="346" pos:column="99">()</argument_list></call> <block pos:line="346" pos:column="102">{ <expr><lit:literal type="string" pos:line="346" pos:column="104">".cs"</lit:literal></expr> }</block></expr>
						}</block></expr><op:operator pos:line="347" pos:column="50">,</op:operator>
						<expr><op:operator pos:line="348" pos:column="49">new</op:operator> <call><name pos:line="348" pos:column="53">ParserExtensionPointsConfiguration</name><argument_list pos:line="348" pos:column="87">()</argument_list></call>
						<block pos:line="349" pos:column="49">{
							<expr><name pos:line="350" pos:column="57">FullClassName</name> <op:operator pos:line="350" pos:column="71">=</op:operator> <lit:literal type="string" pos:line="350" pos:column="73">"Sando.TestExtensionPoints.TestCppParser"</lit:literal></expr><op:operator pos:line="350" pos:column="114">,</op:operator>
							<expr><name pos:line="351" pos:column="57">LibraryFileRelativePath</name> <op:operator pos:line="351" pos:column="81">=</op:operator> <lit:literal type="string" pos:line="351" pos:column="83">""</lit:literal></expr><op:operator pos:line="351" pos:column="85">,</op:operator>
							<expr><name pos:line="352" pos:column="57">SupportedFileExtensions</name> <op:operator pos:line="352" pos:column="81">=</op:operator> <op:operator pos:line="352" pos:column="83">new</op:operator> <call><name><name pos:line="352" pos:column="87">List</name><argument_list pos:line="352" pos:column="91">&lt;<argument><name pos:line="352" pos:column="92">string</name></argument>&gt;</argument_list></name><argument_list pos:line="352" pos:column="99">()</argument_list></call> <block pos:line="352" pos:column="102">{ <expr><lit:literal type="string" pos:line="352" pos:column="104">".h"</lit:literal></expr><op:operator pos:line="352" pos:column="108">,</op:operator> <expr><lit:literal type="string" pos:line="352" pos:column="110">".cpp"</lit:literal></expr><op:operator pos:line="352" pos:column="116">,</op:operator> <expr><lit:literal type="string" pos:line="352" pos:column="118">".cxx"</lit:literal></expr> }</block></expr>
						}</block></expr><op:operator pos:line="353" pos:column="50">,</op:operator>
						<expr><op:operator pos:line="354" pos:column="49">new</op:operator> <call><name pos:line="354" pos:column="53">ParserExtensionPointsConfiguration</name><argument_list pos:line="354" pos:column="87">()</argument_list></call>
						<block pos:line="355" pos:column="49">{
							<expr><name pos:line="356" pos:column="57">FullClassName</name> <op:operator pos:line="356" pos:column="71">=</op:operator> <lit:literal type="string" pos:line="356" pos:column="73">"Sando.TestExtensionPoints.TestCppParser"</lit:literal></expr><op:operator pos:line="356" pos:column="114">,</op:operator>
							<expr><name pos:line="357" pos:column="57">LibraryFileRelativePath</name> <op:operator pos:line="357" pos:column="81">=</op:operator> <lit:literal type="string" pos:line="357" pos:column="83">"TestExtensionPoints.dll"</lit:literal></expr><op:operator pos:line="357" pos:column="108">,</op:operator>
							<expr><name pos:line="358" pos:column="57">SupportedFileExtensions</name> <op:operator pos:line="358" pos:column="81">=</op:operator> <op:operator pos:line="358" pos:column="83">new</op:operator> <call><name><name pos:line="358" pos:column="87">List</name><argument_list pos:line="358" pos:column="91">&lt;<argument><name pos:line="358" pos:column="92">string</name></argument>&gt;</argument_list></name><argument_list pos:line="358" pos:column="99">()</argument_list></call><block pos:line="358" pos:column="101">{<expr><lit:literal type="string" pos:line="358" pos:column="102">".cs"</lit:literal></expr>}</block></expr><op:operator pos:line="358" pos:column="108">,</op:operator>
							<expr><name pos:line="359" pos:column="57">ProgramElementsConfiguration</name> <op:operator pos:line="359" pos:column="86">=</op:operator> <op:operator pos:line="359" pos:column="88">new</op:operator> <call><name><name pos:line="359" pos:column="92">List</name><argument_list pos:line="359" pos:column="96">&lt;<argument><name pos:line="359" pos:column="97">BaseExtensionPointConfiguration</name></argument>&gt;</argument_list></name><argument_list pos:line="359" pos:column="129">()</argument_list></call>
							<block pos:line="360" pos:column="57">{
								<expr><op:operator pos:line="361" pos:column="65">new</op:operator> <call><name pos:line="361" pos:column="69">BaseExtensionPointConfiguration</name><argument_list pos:line="361" pos:column="100">()</argument_list></call>
								<block pos:line="362" pos:column="65">{
									<expr><name pos:line="363" pos:column="73">FullClassName</name> <op:operator pos:line="363" pos:column="87">=</op:operator> <lit:literal type="string" pos:line="363" pos:column="89">"Sando.TestExtensionPoints.TestElement"</lit:literal></expr><op:operator pos:line="363" pos:column="128">,</op:operator>
									<expr><name pos:line="364" pos:column="73">LibraryFileRelativePath</name> <op:operator pos:line="364" pos:column="97">=</op:operator> <lit:literal type="string" pos:line="364" pos:column="99">""</lit:literal></expr>
								}</block></expr>
							}</block></expr>
						}</block></expr>
					}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if pos:line="371" pos:column="13">if <condition pos:line="371" pos:column="16">(<expr><name pos:line="371" pos:column="17">addValidWordSplitterConfiguration</name></expr>)</condition><then pos:line="371" pos:column="51">
            <block pos:line="372" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="373" pos:column="17">extensionPointsConfiguration</name><op:operator pos:line="373" pos:column="45">.</op:operator><name pos:line="373" pos:column="46">WordSplitterConfiguration</name></name> <op:operator pos:line="373" pos:column="72">=</op:operator>
                    <op:operator pos:line="374" pos:column="21">new</op:operator> <call><name pos:line="374" pos:column="25">BaseExtensionPointConfiguration</name><argument_list pos:line="374" pos:column="56">()</argument_list></call>
                    <block pos:line="375" pos:column="21">{
                        <expr><name pos:line="376" pos:column="25">FullClassName</name> <op:operator pos:line="376" pos:column="39">=</op:operator> <lit:literal type="string" pos:line="376" pos:column="41">"Sando.TestExtensionPoints.TestWordSplitter"</lit:literal></expr><op:operator pos:line="376" pos:column="85">,</op:operator>
                        <expr><name pos:line="377" pos:column="25">LibraryFileRelativePath</name> <op:operator pos:line="377" pos:column="49">=</op:operator> <lit:literal type="string" pos:line="377" pos:column="51">"TestExtensionPoints.dll"</lit:literal></expr>
                    }</block></expr>;</expr_stmt>
            }</block></then></if>

            <if pos:line="381" pos:column="13">if <condition pos:line="381" pos:column="16">(<expr><name pos:line="381" pos:column="17">addInvalidWordSplitterConfiguration</name></expr>)</condition><then pos:line="381" pos:column="53">
            <block pos:line="382" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="383" pos:column="17">extensionPointsConfiguration</name><op:operator pos:line="383" pos:column="45">.</op:operator><name pos:line="383" pos:column="46">WordSplitterConfiguration</name></name> <op:operator pos:line="383" pos:column="72">=</op:operator>
                    <op:operator pos:line="384" pos:column="21">new</op:operator> <call><name pos:line="384" pos:column="25">BaseExtensionPointConfiguration</name><argument_list pos:line="384" pos:column="56">()</argument_list></call>
                    <block pos:line="385" pos:column="21">{
                        <expr><name pos:line="386" pos:column="25">FullClassName</name> <op:operator pos:line="386" pos:column="39">=</op:operator> <lit:literal type="string" pos:line="386" pos:column="41">"Sando.TestExtensionPoints.TestWordSplitter"</lit:literal></expr><op:operator pos:line="386" pos:column="85">,</op:operator>
                        <expr><name pos:line="387" pos:column="25">LibraryFileRelativePath</name> <op:operator pos:line="387" pos:column="49">=</op:operator> <lit:literal type="string" pos:line="387" pos:column="51">""</lit:literal></expr>
                    }</block></expr>;</expr_stmt>
            }</block></then></if>

            <if pos:line="391" pos:column="13">if <condition pos:line="391" pos:column="16">(<expr><name pos:line="391" pos:column="17">addValidResultsReordererConfiguration</name></expr>)</condition><then pos:line="391" pos:column="55">
            <block pos:line="392" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="393" pos:column="17">extensionPointsConfiguration</name><op:operator pos:line="393" pos:column="45">.</op:operator><name pos:line="393" pos:column="46">ResultsReordererConfiguration</name></name> <op:operator pos:line="393" pos:column="76">=</op:operator>
                    <op:operator pos:line="394" pos:column="21">new</op:operator> <call><name pos:line="394" pos:column="25">BaseExtensionPointConfiguration</name><argument_list pos:line="394" pos:column="56">()</argument_list></call>
                    <block pos:line="395" pos:column="21">{
                        <expr><name pos:line="396" pos:column="25">FullClassName</name> <op:operator pos:line="396" pos:column="39">=</op:operator> <lit:literal type="string" pos:line="396" pos:column="41">"Sando.TestExtensionPoints.TestResultsReorderer"</lit:literal></expr><op:operator pos:line="396" pos:column="89">,</op:operator>
                        <expr><name pos:line="397" pos:column="25">LibraryFileRelativePath</name> <op:operator pos:line="397" pos:column="49">=</op:operator> <lit:literal type="string" pos:line="397" pos:column="51">"TestExtensionPoints.dll"</lit:literal></expr>
                    }</block></expr>;</expr_stmt>
            }</block></then></if>

            <if pos:line="401" pos:column="13">if <condition pos:line="401" pos:column="16">(<expr><name pos:line="401" pos:column="17">addInvalidResultsReordererConfiguration</name></expr>)</condition><then pos:line="401" pos:column="57">
            <block pos:line="402" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="403" pos:column="17">extensionPointsConfiguration</name><op:operator pos:line="403" pos:column="45">.</op:operator><name pos:line="403" pos:column="46">ResultsReordererConfiguration</name></name> <op:operator pos:line="403" pos:column="76">=</op:operator>
                    <op:operator pos:line="404" pos:column="21">new</op:operator> <call><name pos:line="404" pos:column="25">BaseExtensionPointConfiguration</name><argument_list pos:line="404" pos:column="56">()</argument_list></call>
                    <block pos:line="405" pos:column="21">{
                        <expr><name pos:line="406" pos:column="25">FullClassName</name> <op:operator pos:line="406" pos:column="39">=</op:operator> <lit:literal type="string" pos:line="406" pos:column="41">""</lit:literal></expr><op:operator pos:line="406" pos:column="43">,</op:operator>
                        <expr><name pos:line="407" pos:column="25">LibraryFileRelativePath</name> <op:operator pos:line="407" pos:column="49">=</op:operator> <lit:literal type="string" pos:line="407" pos:column="51">"TestExtensionPoints.dll"</lit:literal></expr>
                    }</block></expr>;</expr_stmt>
            }</block></then></if>

            <if pos:line="411" pos:column="13">if <condition pos:line="411" pos:column="16">(<expr><name pos:line="411" pos:column="17">addValidQueryWeightsSupplierConfiguration</name></expr>)</condition><then pos:line="411" pos:column="59">
            <block pos:line="412" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="413" pos:column="17">extensionPointsConfiguration</name><op:operator pos:line="413" pos:column="45">.</op:operator><name pos:line="413" pos:column="46">QueryWeightsSupplierConfiguration</name></name> <op:operator pos:line="413" pos:column="80">=</op:operator>
                    <op:operator pos:line="414" pos:column="21">new</op:operator> <call><name pos:line="414" pos:column="25">BaseExtensionPointConfiguration</name><argument_list pos:line="414" pos:column="56">()</argument_list></call>
                    <block pos:line="415" pos:column="21">{
                        <expr><name pos:line="416" pos:column="25">FullClassName</name> <op:operator pos:line="416" pos:column="39">=</op:operator> <lit:literal type="string" pos:line="416" pos:column="41">"Sando.TestExtensionPoints.TestQueryWeightsSupplier"</lit:literal></expr><op:operator pos:line="416" pos:column="93">,</op:operator>
                        <expr><name pos:line="417" pos:column="25">LibraryFileRelativePath</name> <op:operator pos:line="417" pos:column="49">=</op:operator> <lit:literal type="string" pos:line="417" pos:column="51">"TestExtensionPoints.dll"</lit:literal></expr>
                    }</block></expr>;</expr_stmt>
            }</block></then></if>

            <if pos:line="421" pos:column="13">if <condition pos:line="421" pos:column="16">(<expr><name pos:line="421" pos:column="17">addInvalidQueryWeightsSupplierConfiguration</name></expr>)</condition><then pos:line="421" pos:column="61">
            <block pos:line="422" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="423" pos:column="17">extensionPointsConfiguration</name><op:operator pos:line="423" pos:column="45">.</op:operator><name pos:line="423" pos:column="46">QueryWeightsSupplierConfiguration</name></name> <op:operator pos:line="423" pos:column="80">=</op:operator>
                    <op:operator pos:line="424" pos:column="21">new</op:operator> <call><name pos:line="424" pos:column="25">BaseExtensionPointConfiguration</name><argument_list pos:line="424" pos:column="56">()</argument_list></call>
                    <block pos:line="425" pos:column="21">{
                        <expr><name pos:line="426" pos:column="25">FullClassName</name> <op:operator pos:line="426" pos:column="39">=</op:operator> <lit:literal type="string" pos:line="426" pos:column="41">""</lit:literal></expr><op:operator pos:line="426" pos:column="43">,</op:operator>
                        <expr><name pos:line="427" pos:column="25">LibraryFileRelativePath</name> <op:operator pos:line="427" pos:column="49">=</op:operator> <lit:literal type="string" pos:line="427" pos:column="51">"TestExtensionPoints.dll"</lit:literal></expr>
                    }</block></expr>;</expr_stmt>
            }</block></then></if>

            <if pos:line="431" pos:column="13">if <condition pos:line="431" pos:column="16">(<expr><name pos:line="431" pos:column="17">addValidQueryRewriterConfiguration</name></expr>)</condition><then pos:line="431" pos:column="52">
            <block pos:line="432" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="433" pos:column="17">extensionPointsConfiguration</name><op:operator pos:line="433" pos:column="45">.</op:operator><name pos:line="433" pos:column="46">QueryRewriterConfiguration</name></name> <op:operator pos:line="433" pos:column="73">=</op:operator>
                    <op:operator pos:line="434" pos:column="21">new</op:operator> <call><name pos:line="434" pos:column="25">BaseExtensionPointConfiguration</name><argument_list pos:line="434" pos:column="56">()</argument_list></call>
                    <block pos:line="435" pos:column="21">{
                        <expr><name pos:line="436" pos:column="25">FullClassName</name> <op:operator pos:line="436" pos:column="39">=</op:operator> <lit:literal type="string" pos:line="436" pos:column="41">"Sando.TestExtensionPoints.TestQueryRewriter"</lit:literal></expr><op:operator pos:line="436" pos:column="86">,</op:operator>
                        <expr><name pos:line="437" pos:column="25">LibraryFileRelativePath</name> <op:operator pos:line="437" pos:column="49">=</op:operator> <lit:literal type="string" pos:line="437" pos:column="51">"TestExtensionPoints.dll"</lit:literal></expr>
                    }</block></expr>;</expr_stmt>
            }</block></then></if>

            <if pos:line="441" pos:column="13">if <condition pos:line="441" pos:column="16">(<expr><name pos:line="441" pos:column="17">addInvalidQueryRewriterConfiguration</name></expr>)</condition><then pos:line="441" pos:column="54">
            <block pos:line="442" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="443" pos:column="17">extensionPointsConfiguration</name><op:operator pos:line="443" pos:column="45">.</op:operator><name pos:line="443" pos:column="46">QueryRewriterConfiguration</name></name> <op:operator pos:line="443" pos:column="73">=</op:operator>
                    <op:operator pos:line="444" pos:column="21">new</op:operator> <call><name pos:line="444" pos:column="25">BaseExtensionPointConfiguration</name><argument_list pos:line="444" pos:column="56">()</argument_list></call>
                    <block pos:line="445" pos:column="21">{
                        <expr><name pos:line="446" pos:column="25">FullClassName</name> <op:operator pos:line="446" pos:column="39">=</op:operator> <lit:literal type="string" pos:line="446" pos:column="41">""</lit:literal></expr><op:operator pos:line="446" pos:column="43">,</op:operator>
                        <expr><name pos:line="447" pos:column="25">LibraryFileRelativePath</name> <op:operator pos:line="447" pos:column="49">=</op:operator> <lit:literal type="string" pos:line="447" pos:column="51">"TestExtensionPoints.dll"</lit:literal></expr>
                    }</block></expr>;</expr_stmt>
            }</block></then></if>

            <if pos:line="451" pos:column="13">if <condition pos:line="451" pos:column="16">(<expr><name pos:line="451" pos:column="17">addValidIndexFilterManagerConfiguration</name></expr>)</condition><then pos:line="451" pos:column="57">
            <block pos:line="452" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="453" pos:column="17">extensionPointsConfiguration</name><op:operator pos:line="453" pos:column="45">.</op:operator><name pos:line="453" pos:column="46">IndexFilterManagerConfiguration</name></name> <op:operator pos:line="453" pos:column="78">=</op:operator>
                    <op:operator pos:line="454" pos:column="21">new</op:operator> <call><name pos:line="454" pos:column="25">BaseExtensionPointConfiguration</name><argument_list pos:line="454" pos:column="56">()</argument_list></call>
                    <block pos:line="455" pos:column="21">{
                        <expr><name pos:line="456" pos:column="25">FullClassName</name> <op:operator pos:line="456" pos:column="39">=</op:operator> <lit:literal type="string" pos:line="456" pos:column="41">"Sando.TestExtensionPoints.TestIndexFilterManager"</lit:literal></expr><op:operator pos:line="456" pos:column="91">,</op:operator>
                        <expr><name pos:line="457" pos:column="25">LibraryFileRelativePath</name> <op:operator pos:line="457" pos:column="49">=</op:operator> <lit:literal type="string" pos:line="457" pos:column="51">"TestExtensionPoints.dll"</lit:literal></expr>
                    }</block></expr>;</expr_stmt>
            }</block></then></if>

            <if pos:line="461" pos:column="13">if <condition pos:line="461" pos:column="16">(<expr><name pos:line="461" pos:column="17">addInvalidIndexFilterManagerConfiguration</name></expr>)</condition><then pos:line="461" pos:column="59">
            <block pos:line="462" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="463" pos:column="17">extensionPointsConfiguration</name><op:operator pos:line="463" pos:column="45">.</op:operator><name pos:line="463" pos:column="46">IndexFilterManagerConfiguration</name></name> <op:operator pos:line="463" pos:column="78">=</op:operator>
                    <op:operator pos:line="464" pos:column="21">new</op:operator> <call><name pos:line="464" pos:column="25">BaseExtensionPointConfiguration</name><argument_list pos:line="464" pos:column="56">()</argument_list></call>
                    <block pos:line="465" pos:column="21">{
                        <expr><name pos:line="466" pos:column="25">FullClassName</name> <op:operator pos:line="466" pos:column="39">=</op:operator> <lit:literal type="string" pos:line="466" pos:column="41">""</lit:literal></expr><op:operator pos:line="466" pos:column="43">,</op:operator>
                        <expr><name pos:line="467" pos:column="25">LibraryFileRelativePath</name> <op:operator pos:line="467" pos:column="49">=</op:operator> <lit:literal type="string" pos:line="467" pos:column="51">"TestExtensionPoints.dll"</lit:literal></expr>
                    }</block></expr>;</expr_stmt>
            }</block></then></if>

            <if pos:line="471" pos:column="13">if <condition pos:line="471" pos:column="16">(<expr><name pos:line="471" pos:column="17">addInvalidExtensionPoints</name></expr>)</condition><then pos:line="471" pos:column="43">
            <block pos:line="472" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="473" pos:column="17">extensionPointsConfiguration</name><op:operator pos:line="473" pos:column="45">.</op:operator><name pos:line="473" pos:column="46">ParsersConfiguration</name><op:operator pos:line="473" pos:column="66">.</op:operator><name pos:line="473" pos:column="67">AddRange</name></name><argument_list pos:line="473" pos:column="75">(
                    <argument><expr><op:operator pos:line="474" pos:column="21">new</op:operator> <call><name><name pos:line="474" pos:column="25">List</name><argument_list pos:line="474" pos:column="29">&lt;<argument><name pos:line="474" pos:column="30">ParserExtensionPointsConfiguration</name></argument>&gt;</argument_list></name><argument_list pos:line="474" pos:column="65">()</argument_list></call>
					<block pos:line="475" pos:column="41">{
						<expr><op:operator pos:line="476" pos:column="49">new</op:operator> <call><name pos:line="476" pos:column="53">ParserExtensionPointsConfiguration</name><argument_list pos:line="476" pos:column="87">()</argument_list></call>
						<block pos:line="477" pos:column="49">{
							<expr><name pos:line="478" pos:column="57">FullClassName</name> <op:operator pos:line="478" pos:column="71">=</op:operator> <lit:literal type="string" pos:line="478" pos:column="73">"Sando.NonExistingParser"</lit:literal></expr><op:operator pos:line="478" pos:column="98">,</op:operator>
							<expr><name pos:line="479" pos:column="57">LibraryFileRelativePath</name> <op:operator pos:line="479" pos:column="81">=</op:operator> <lit:literal type="string" pos:line="479" pos:column="83">"TestExtensionPoints.dll"</lit:literal></expr><op:operator pos:line="479" pos:column="108">,</op:operator>
							<expr><name pos:line="480" pos:column="57">SupportedFileExtensions</name> <op:operator pos:line="480" pos:column="81">=</op:operator> <op:operator pos:line="480" pos:column="83">new</op:operator> <call><name><name pos:line="480" pos:column="87">List</name><argument_list pos:line="480" pos:column="91">&lt;<argument><name pos:line="480" pos:column="92">string</name></argument>&gt;</argument_list></name><argument_list pos:line="480" pos:column="99">()</argument_list></call> <block pos:line="480" pos:column="102">{ <expr><lit:literal type="string" pos:line="480" pos:column="104">".cs"</lit:literal></expr> }</block></expr>
						}</block></expr><op:operator pos:line="481" pos:column="50">,</op:operator>
						<expr><op:operator pos:line="482" pos:column="49">new</op:operator> <call><name pos:line="482" pos:column="53">ParserExtensionPointsConfiguration</name><argument_list pos:line="482" pos:column="87">()</argument_list></call>
						<block pos:line="483" pos:column="49">{
							<expr><name pos:line="484" pos:column="57">FullClassName</name> <op:operator pos:line="484" pos:column="71">=</op:operator> <lit:literal type="string" pos:line="484" pos:column="73">"Sando.TestExtensionPoints.TestCppParser"</lit:literal></expr><op:operator pos:line="484" pos:column="114">,</op:operator>
							<expr><name pos:line="485" pos:column="57">LibraryFileRelativePath</name> <op:operator pos:line="485" pos:column="81">=</op:operator> <lit:literal type="string" pos:line="485" pos:column="83">"NonExistingParser.dll"</lit:literal></expr><op:operator pos:line="485" pos:column="106">,</op:operator>
							<expr><name pos:line="486" pos:column="57">SupportedFileExtensions</name> <op:operator pos:line="486" pos:column="81">=</op:operator> <op:operator pos:line="486" pos:column="83">new</op:operator> <call><name><name pos:line="486" pos:column="87">List</name><argument_list pos:line="486" pos:column="91">&lt;<argument><name pos:line="486" pos:column="92">string</name></argument>&gt;</argument_list></name><argument_list pos:line="486" pos:column="99">()</argument_list></call> <block pos:line="486" pos:column="102">{ <expr><lit:literal type="string" pos:line="486" pos:column="104">".h"</lit:literal></expr><op:operator pos:line="486" pos:column="108">,</op:operator> <expr><lit:literal type="string" pos:line="486" pos:column="110">".cpp"</lit:literal></expr><op:operator pos:line="486" pos:column="116">,</op:operator> <expr><lit:literal type="string" pos:line="486" pos:column="118">".cxx"</lit:literal></expr> }</block></expr>
						}</block></expr><op:operator pos:line="487" pos:column="50">,</op:operator>
						<expr><op:operator pos:line="488" pos:column="49">new</op:operator> <call><name pos:line="488" pos:column="53">ParserExtensionPointsConfiguration</name><argument_list pos:line="488" pos:column="87">()</argument_list></call>
						<block pos:line="489" pos:column="49">{
							<expr><name pos:line="490" pos:column="57">FullClassName</name> <op:operator pos:line="490" pos:column="71">=</op:operator> <lit:literal type="string" pos:line="490" pos:column="73">"Sando.TestExtensionPoints.TestCppParser"</lit:literal></expr><op:operator pos:line="490" pos:column="114">,</op:operator>
							<expr><name pos:line="491" pos:column="57">LibraryFileRelativePath</name> <op:operator pos:line="491" pos:column="81">=</op:operator> <lit:literal type="string" pos:line="491" pos:column="83">"TestExtensionPoints.dll"</lit:literal></expr><op:operator pos:line="491" pos:column="108">,</op:operator>
							<expr><name pos:line="492" pos:column="57">SupportedFileExtensions</name> <op:operator pos:line="492" pos:column="81">=</op:operator> <op:operator pos:line="492" pos:column="83">new</op:operator> <call><name><name pos:line="492" pos:column="87">List</name><argument_list pos:line="492" pos:column="91">&lt;<argument><name pos:line="492" pos:column="92">string</name></argument>&gt;</argument_list></name><argument_list pos:line="492" pos:column="99">()</argument_list></call><block pos:line="492" pos:column="101">{<expr><lit:literal type="string" pos:line="492" pos:column="102">".cs"</lit:literal></expr>}</block></expr><op:operator pos:line="492" pos:column="108">,</op:operator>
							<expr><name pos:line="493" pos:column="57">ProgramElementsConfiguration</name> <op:operator pos:line="493" pos:column="86">=</op:operator> <op:operator pos:line="493" pos:column="88">new</op:operator> <call><name><name pos:line="493" pos:column="92">List</name><argument_list pos:line="493" pos:column="96">&lt;<argument><name pos:line="493" pos:column="97">BaseExtensionPointConfiguration</name></argument>&gt;</argument_list></name><argument_list pos:line="493" pos:column="129">()</argument_list></call>
							<block pos:line="494" pos:column="57">{
								<expr><op:operator pos:line="495" pos:column="65">new</op:operator> <call><name pos:line="495" pos:column="69">BaseExtensionPointConfiguration</name><argument_list pos:line="495" pos:column="100">()</argument_list></call>
								<block pos:line="496" pos:column="65">{
									<expr><name pos:line="497" pos:column="73">FullClassName</name> <op:operator pos:line="497" pos:column="87">=</op:operator> <lit:literal type="string" pos:line="497" pos:column="89">"Sando.TestExtensionPoints.TestElement"</lit:literal></expr><op:operator pos:line="497" pos:column="128">,</op:operator>
									<expr><name pos:line="498" pos:column="73">LibraryFileRelativePath</name> <op:operator pos:line="498" pos:column="97">=</op:operator> <lit:literal type="string" pos:line="498" pos:column="99">"NonExistingTestElement.dll"</lit:literal></expr>
								}</block></expr>
							}</block></expr>
						}</block></expr>
					}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name><name pos:line="504" pos:column="17">extensionPointsConfiguration</name><op:operator pos:line="504" pos:column="45">.</op:operator><name pos:line="504" pos:column="46">WordSplitterConfiguration</name></name> <op:operator pos:line="504" pos:column="72">=</op:operator>
                    <op:operator pos:line="505" pos:column="21">new</op:operator> <call><name pos:line="505" pos:column="25">BaseExtensionPointConfiguration</name><argument_list pos:line="505" pos:column="56">()</argument_list></call>
                    <block pos:line="506" pos:column="21">{
                        <expr><name pos:line="507" pos:column="25">FullClassName</name> <op:operator pos:line="507" pos:column="39">=</op:operator> <lit:literal type="string" pos:line="507" pos:column="41">"Sando.TestExtensionPoints.TestWordSplitter"</lit:literal></expr><op:operator pos:line="507" pos:column="85">,</op:operator>
                        <expr><name pos:line="508" pos:column="25">LibraryFileRelativePath</name> <op:operator pos:line="508" pos:column="49">=</op:operator> <lit:literal type="string" pos:line="508" pos:column="51">"NonExistingWordSplitter.dll"</lit:literal></expr>
                    }</block></expr>;</expr_stmt>

                <expr_stmt><expr><name><name pos:line="511" pos:column="17">extensionPointsConfiguration</name><op:operator pos:line="511" pos:column="45">.</op:operator><name pos:line="511" pos:column="46">ResultsReordererConfiguration</name></name> <op:operator pos:line="511" pos:column="76">=</op:operator>
                    <op:operator pos:line="512" pos:column="21">new</op:operator> <call><name pos:line="512" pos:column="25">BaseExtensionPointConfiguration</name><argument_list pos:line="512" pos:column="56">()</argument_list></call>
                    <block pos:line="513" pos:column="21">{
                        <expr><name pos:line="514" pos:column="25">FullClassName</name> <op:operator pos:line="514" pos:column="39">=</op:operator> <lit:literal type="string" pos:line="514" pos:column="41">"Sando.TestExtensionPoints.NonExistingResultsReorderer"</lit:literal></expr><op:operator pos:line="514" pos:column="96">,</op:operator>
                        <expr><name pos:line="515" pos:column="25">LibraryFileRelativePath</name> <op:operator pos:line="515" pos:column="49">=</op:operator> <lit:literal type="string" pos:line="515" pos:column="51">"TestExtensionPoints.dll"</lit:literal></expr>
                    }</block></expr>;</expr_stmt>

                <expr_stmt><expr><name><name pos:line="518" pos:column="17">extensionPointsConfiguration</name><op:operator pos:line="518" pos:column="45">.</op:operator><name pos:line="518" pos:column="46">QueryWeightsSupplierConfiguration</name></name> <op:operator pos:line="518" pos:column="80">=</op:operator>
                    <op:operator pos:line="519" pos:column="21">new</op:operator> <call><name pos:line="519" pos:column="25">BaseExtensionPointConfiguration</name><argument_list pos:line="519" pos:column="56">()</argument_list></call>
                    <block pos:line="520" pos:column="21">{
                        <expr><name pos:line="521" pos:column="25">FullClassName</name> <op:operator pos:line="521" pos:column="39">=</op:operator> <lit:literal type="string" pos:line="521" pos:column="41">"Sando.TestExtensionPoints.NonExistingQueryWeightsSupplier"</lit:literal></expr><op:operator pos:line="521" pos:column="100">,</op:operator>
                        <expr><name pos:line="522" pos:column="25">LibraryFileRelativePath</name> <op:operator pos:line="522" pos:column="49">=</op:operator> <lit:literal type="string" pos:line="522" pos:column="51">"TestExtensionPoints.dll"</lit:literal></expr>
                    }</block></expr>;</expr_stmt>

                <expr_stmt><expr><name><name pos:line="525" pos:column="17">extensionPointsConfiguration</name><op:operator pos:line="525" pos:column="45">.</op:operator><name pos:line="525" pos:column="46">QueryRewriterConfiguration</name></name> <op:operator pos:line="525" pos:column="73">=</op:operator>
                    <op:operator pos:line="526" pos:column="21">new</op:operator> <call><name pos:line="526" pos:column="25">BaseExtensionPointConfiguration</name><argument_list pos:line="526" pos:column="56">()</argument_list></call>
                    <block pos:line="527" pos:column="21">{
                        <expr><name pos:line="528" pos:column="25">FullClassName</name> <op:operator pos:line="528" pos:column="39">=</op:operator> <lit:literal type="string" pos:line="528" pos:column="41">"Sando.TestExtensionPoints.NonExistingQueryRewriter"</lit:literal></expr><op:operator pos:line="528" pos:column="93">,</op:operator>
                        <expr><name pos:line="529" pos:column="25">LibraryFileRelativePath</name> <op:operator pos:line="529" pos:column="49">=</op:operator> <lit:literal type="string" pos:line="529" pos:column="51">"TestExtensionPoints.dll"</lit:literal></expr>
                    }</block></expr>;</expr_stmt>

                <expr_stmt><expr><name><name pos:line="532" pos:column="17">extensionPointsConfiguration</name><op:operator pos:line="532" pos:column="45">.</op:operator><name pos:line="532" pos:column="46">IndexFilterManagerConfiguration</name></name> <op:operator pos:line="532" pos:column="78">=</op:operator>
                    <op:operator pos:line="533" pos:column="21">new</op:operator> <call><name pos:line="533" pos:column="25">BaseExtensionPointConfiguration</name><argument_list pos:line="533" pos:column="56">()</argument_list></call>
                    <block pos:line="534" pos:column="21">{
                        <expr><name pos:line="535" pos:column="25">FullClassName</name> <op:operator pos:line="535" pos:column="39">=</op:operator> <lit:literal type="string" pos:line="535" pos:column="41">"Sando.TestExtensionPoints.NonExistingIndexFilterManager"</lit:literal></expr><op:operator pos:line="535" pos:column="98">,</op:operator>
                        <expr><name pos:line="536" pos:column="25">LibraryFileRelativePath</name> <op:operator pos:line="536" pos:column="49">=</op:operator> <lit:literal type="string" pos:line="536" pos:column="51">"TestExtensionPoints.dll"</lit:literal></expr>
                    }</block></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <decl_stmt><decl><type><specifier pos:line="541" pos:column="9">private</specifier> <name pos:line="541" pos:column="17">ExtensionPointsConfiguration</name></type> <name pos:line="541" pos:column="46">extensionPointsConfiguration</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="542" pos:column="9">private</specifier> <name pos:line="542" pos:column="17">ILog</name></type> <name pos:line="542" pos:column="22">logger</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="543" pos:column="9">private</specifier> <name pos:line="543" pos:column="17">string</name></type> <name pos:line="543" pos:column="24">pluginDirectory</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="544" pos:column="9">private</specifier> <name pos:line="544" pos:column="17">string</name></type> <name pos:line="544" pos:column="24">logFilePath</name></decl>;</decl_stmt>
    }</block></class>
}</block></namespace>
</unit>
