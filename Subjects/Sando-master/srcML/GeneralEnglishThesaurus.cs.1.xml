<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Core\Core\Tools\GeneralEnglishThesaurus.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">IO</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Linq</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Text</name></name>;</using>

<namespace pos:line="7" pos:column="1">namespace <name><name pos:line="7" pos:column="11">Sando</name><op:operator pos:line="7" pos:column="16">.</op:operator><name pos:line="7" pos:column="17">Core</name><op:operator pos:line="7" pos:column="21">.</op:operator><name pos:line="7" pos:column="22">Tools</name></name>
<block pos:line="8" pos:column="1">{
    <class><specifier pos:line="9" pos:column="5">public</specifier> class <name pos:line="9" pos:column="18">GeneralEnglishThesaurus</name> <super pos:line="9" pos:column="42">: <name pos:line="9" pos:column="44">IThesaurus</name></super>
    <block pos:line="10" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="11" pos:column="9">private</specifier> <specifier pos:line="11" pos:column="17">static</specifier> <name pos:line="11" pos:column="24">IThesaurus</name></type> <name pos:line="11" pos:column="35">instance</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="12" pos:column="9">private</specifier> <specifier pos:line="12" pos:column="17">static</specifier> <specifier pos:line="12" pos:column="24">readonly</specifier> <name pos:line="12" pos:column="33">string</name></type> <name pos:line="12" pos:column="40">dictionaryFile</name> <init pos:line="12" pos:column="55">= <expr><call><name pos:line="12" pos:column="57">GetFilePath</name><argument_list pos:line="12" pos:column="68">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <function><type><specifier pos:line="14" pos:column="9">public</specifier> <specifier pos:line="14" pos:column="16">static</specifier> <name pos:line="14" pos:column="23">IThesaurus</name></type> <name pos:line="14" pos:column="34">GetInstance</name><parameter_list pos:line="14" pos:column="45">()</parameter_list>
        <block pos:line="15" pos:column="9">{
            <return pos:line="16" pos:column="13">return <expr><name pos:line="16" pos:column="20">instance</name> <op:operator pos:line="16" pos:column="29">??</op:operator> <op:operator pos:line="16" pos:column="32">(</op:operator><name pos:line="16" pos:column="33">instance</name> <op:operator pos:line="16" pos:column="42">=</op:operator> <op:operator pos:line="16" pos:column="44">new</op:operator> <call><name pos:line="16" pos:column="48">GeneralEnglishThesaurus</name><argument_list pos:line="16" pos:column="71">()</argument_list></call><op:operator pos:line="16" pos:column="73">)</op:operator></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="19" pos:column="9">private</specifier> <specifier pos:line="19" pos:column="17">static</specifier> <name pos:line="19" pos:column="24">string</name></type> <name pos:line="19" pos:column="31">GetFilePath</name><parameter_list pos:line="19" pos:column="42">()</parameter_list>
        <block pos:line="20" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="21" pos:column="13">var</name></type> <name pos:line="21" pos:column="17">directory</name> <init pos:line="21" pos:column="27">= <expr><call><name><name pos:line="21" pos:column="29">PathManager</name><op:operator pos:line="21" pos:column="40">.</op:operator><name pos:line="21" pos:column="41">Instance</name><op:operator pos:line="21" pos:column="49">.</op:operator><name pos:line="21" pos:column="50">GetExtensionRoot</name></name><argument_list pos:line="21" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="22" pos:column="13">var</name></type> <name pos:line="22" pos:column="17">file</name> <init pos:line="22" pos:column="22">= <expr><lit:literal type="string" pos:line="22" pos:column="24">@"Dictionaries\GeneralDictionary.csv"</lit:literal></expr></init></decl>;</decl_stmt>
            <return pos:line="23" pos:column="13">return <expr><call><name><name pos:line="23" pos:column="20">File</name><op:operator pos:line="23" pos:column="24">.</op:operator><name pos:line="23" pos:column="25">Exists</name></name><argument_list pos:line="23" pos:column="31">(<argument><expr><name pos:line="23" pos:column="32">file</name></expr></argument>)</argument_list></call> <op:operator pos:line="23" pos:column="38">?</op:operator> <name pos:line="23" pos:column="40">file</name> <op:operator pos:line="23" pos:column="45">:</op:operator> <call><name><name pos:line="23" pos:column="47">Path</name><op:operator pos:line="23" pos:column="51">.</op:operator><name pos:line="23" pos:column="52">Combine</name></name><argument_list pos:line="23" pos:column="59">(<argument><expr><name pos:line="23" pos:column="60">directory</name></expr></argument>, <argument><expr><name pos:line="23" pos:column="71">file</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
        
        <decl_stmt><decl><type><specifier pos:line="26" pos:column="9">private</specifier> <specifier pos:line="26" pos:column="17">readonly</specifier> <name><name pos:line="26" pos:column="26">List</name><argument_list pos:line="26" pos:column="30">&lt;<argument><name><name pos:line="26" pos:column="31">KeyValuePair</name><argument_list pos:line="26" pos:column="43">&lt;<argument><name pos:line="26" pos:column="44">String</name></argument>,<argument><name><name pos:line="26" pos:column="51">IEnumerable</name><argument_list pos:line="26" pos:column="62">&lt;<argument><name pos:line="26" pos:column="63">String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="26" pos:column="73">synonymLists</name> <init pos:line="26" pos:column="86">= 
            <expr><op:operator pos:line="27" pos:column="13">new</op:operator> <call><name><name pos:line="27" pos:column="17">List</name><argument_list pos:line="27" pos:column="21">&lt;<argument><name><name pos:line="27" pos:column="22">KeyValuePair</name><argument_list pos:line="27" pos:column="34">&lt;<argument><name pos:line="27" pos:column="35">string</name></argument>, <argument><name><name pos:line="27" pos:column="43">IEnumerable</name><argument_list pos:line="27" pos:column="54">&lt;<argument><name pos:line="27" pos:column="55">string</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list pos:line="27" pos:column="64">()</argument_list></call></expr></init></decl>;</decl_stmt> 
        <decl_stmt><decl><type><specifier pos:line="28" pos:column="9">private</specifier> <specifier pos:line="28" pos:column="17">readonly</specifier> <name pos:line="28" pos:column="26">object</name></type> <name pos:line="28" pos:column="33">locker</name> <init pos:line="28" pos:column="40">= <expr><op:operator pos:line="28" pos:column="42">new</op:operator> <call><name pos:line="28" pos:column="46">object</name><argument_list pos:line="28" pos:column="52">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="29" pos:column="9">private</specifier> <name pos:line="29" pos:column="17">bool</name></type> <name pos:line="29" pos:column="22">isInitialized</name> <init pos:line="29" pos:column="36">= <expr><lit:literal type="boolean" pos:line="29" pos:column="38">false</lit:literal></expr></init></decl>;</decl_stmt>

        <function><type><specifier pos:line="31" pos:column="9">public</specifier> <name pos:line="31" pos:column="16">void</name></type> <name pos:line="31" pos:column="21">Initialize</name><parameter_list pos:line="31" pos:column="31">(<param><decl><type><name pos:line="31" pos:column="32">string</name></type> <name pos:line="31" pos:column="39">notUsedDirectory</name></decl></param>)</parameter_list>
        <block pos:line="32" pos:column="9">{
            <lock pos:line="33" pos:column="13">lock (<expr><name pos:line="33" pos:column="19">locker</name></expr>)
            <block pos:line="34" pos:column="13">{
                <if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><op:operator pos:line="35" pos:column="21">!</op:operator><name pos:line="35" pos:column="22">isInitialized</name></expr>)</condition><then pos:line="35" pos:column="36">
                <block pos:line="36" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="37" pos:column="21">var</name></type> <name pos:line="37" pos:column="25">lines</name> <init pos:line="37" pos:column="31">= <expr><call><name><name pos:line="37" pos:column="33">File</name><op:operator pos:line="37" pos:column="37">.</op:operator><name pos:line="37" pos:column="38">ReadAllLines</name></name><argument_list pos:line="37" pos:column="50">(<argument><expr><name pos:line="37" pos:column="51">dictionaryFile</name></expr></argument>)</argument_list></call><op:operator pos:line="37" pos:column="66">.</op:operator><call><name pos:line="37" pos:column="67">Select</name><argument_list pos:line="37" pos:column="73">(<argument><expr><lambda><name pos:line="37" pos:column="74">a</name> <op:operator pos:line="37" pos:column="76">=&gt;</op:operator> <call><name><name pos:line="37" pos:column="79">a</name><op:operator pos:line="37" pos:column="80">.</op:operator><name pos:line="37" pos:column="81">Split</name></name><argument_list pos:line="37" pos:column="86">(<argument><expr><lit:literal type="char" pos:line="37" pos:column="87">';'</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name pos:line="38" pos:column="21">List</name><argument_list pos:line="38" pos:column="25">&lt;<argument><name pos:line="38" pos:column="26">string</name></argument>&gt;</argument_list></name></type> <name pos:line="38" pos:column="34">csv</name> <init pos:line="38" pos:column="38">= <expr><op:operator pos:line="38" pos:column="40">(</op:operator><linq><from pos:line="38" pos:column="41">from <expr><name pos:line="38" pos:column="46">line</name></expr> <in pos:line="38" pos:column="51">in <expr><name pos:line="38" pos:column="54">lines</name></expr></in></from>
                                        <select pos:line="39" pos:column="41">select <expr><op:operator pos:line="39" pos:column="48">(</op:operator></expr></select><from pos:line="39" pos:column="49">from <expr><name pos:line="39" pos:column="54">piece</name></expr> <in pos:line="39" pos:column="60">in <expr><name pos:line="39" pos:column="63">line</name></expr></in></from> <select pos:line="39" pos:column="68">select <expr><name pos:line="39" pos:column="75">piece</name></expr></select></linq><op:operator pos:line="39" pos:column="80">)</op:operator><op:operator pos:line="39" pos:column="81">.</op:operator>
                                            <call><name pos:line="40" pos:column="45">First</name><argument_list pos:line="40" pos:column="50">()</argument_list></call></expr>)</init><op:operator pos:line="40" pos:column="53">.</op:operator><call><name pos:line="40" pos:column="54">ToList</name><argument_list pos:line="40" pos:column="60">()</argument_list></call></decl>;</decl_stmt>
                    <foreach pos:line="41" pos:column="21">foreach (<init><decl><type><name pos:line="41" pos:column="30">string</name></type> <name pos:line="41" pos:column="37">line</name> <range pos:line="41" pos:column="42">in <expr><name pos:line="41" pos:column="45">csv</name></expr></range></decl></init>)
                    <block pos:line="42" pos:column="21">{
                        <decl_stmt><decl><type><name pos:line="43" pos:column="25">var</name></type> <name pos:line="43" pos:column="29">pair</name> <init pos:line="43" pos:column="34">= <expr><call><name pos:line="43" pos:column="36">CreateSynonymEntry</name><argument_list pos:line="43" pos:column="54">(<argument><expr><name pos:line="43" pos:column="55">line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name pos:line="44" pos:column="25">synonymLists</name><op:operator pos:line="44" pos:column="37">.</op:operator><name pos:line="44" pos:column="38">Add</name></name><argument_list pos:line="44" pos:column="41">(<argument><expr><name pos:line="44" pos:column="42">pair</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></foreach>
                    <expr_stmt><expr><name pos:line="46" pos:column="21">isInitialized</name> <op:operator pos:line="46" pos:column="35">=</op:operator> <lit:literal type="boolean" pos:line="46" pos:column="37">true</lit:literal></expr>;</expr_stmt>
                }</block></then></if>
            }</block></lock>
        }</block></function>

        <function><type><specifier pos:line="51" pos:column="9">private</specifier> <name><name pos:line="51" pos:column="17">KeyValuePair</name><argument_list pos:line="51" pos:column="29">&lt;<argument><name pos:line="51" pos:column="30">String</name></argument>, <argument><name><name pos:line="51" pos:column="38">IEnumerable</name><argument_list pos:line="51" pos:column="49">&lt;<argument><name pos:line="51" pos:column="50">String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="51" pos:column="59">CreateSynonymEntry</name><parameter_list pos:line="51" pos:column="77">(<param><decl><type><name pos:line="51" pos:column="78">String</name></type> <name pos:line="51" pos:column="85">line</name></decl></param>)</parameter_list>
        <block pos:line="52" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="53" pos:column="13">var</name></type> <name pos:line="53" pos:column="17">words</name> <init pos:line="53" pos:column="23">= <expr><call><name><name pos:line="53" pos:column="25">line</name><op:operator pos:line="53" pos:column="29">.</op:operator><name pos:line="53" pos:column="30">Split</name></name><argument_list pos:line="53" pos:column="35">(<argument><expr><op:operator pos:line="53" pos:column="36">new</op:operator> <name><name pos:line="53" pos:column="40">char</name><index pos:line="53" pos:column="44">[]</index></name> <block pos:line="53" pos:column="47">{<expr><lit:literal type="char" pos:line="53" pos:column="48">','</lit:literal></expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="54" pos:column="13">var</name></type> <name pos:line="54" pos:column="17">key</name> <init pos:line="54" pos:column="21">= <expr><call><name><name pos:line="54" pos:column="23">words</name><op:operator pos:line="54" pos:column="28">.</op:operator><name pos:line="54" pos:column="29">First</name></name><argument_list pos:line="54" pos:column="34">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="55" pos:column="13">var</name></type> <name pos:line="55" pos:column="17">value</name> <init pos:line="55" pos:column="23">= <expr><call><name><name pos:line="55" pos:column="25">words</name><op:operator pos:line="55" pos:column="30">.</op:operator><name pos:line="55" pos:column="31">Skip</name></name><argument_list pos:line="55" pos:column="35">(<argument><expr><lit:literal type="number" pos:line="55" pos:column="36">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="55" pos:column="38">.</op:operator><call><name pos:line="55" pos:column="39">ToList</name><argument_list pos:line="55" pos:column="45">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="56" pos:column="13">return <expr><op:operator pos:line="56" pos:column="20">new</op:operator> <call><name><name pos:line="56" pos:column="24">KeyValuePair</name><argument_list pos:line="56" pos:column="36">&lt;<argument><name pos:line="56" pos:column="37">string</name></argument>, <argument><name><name pos:line="56" pos:column="45">IEnumerable</name><argument_list pos:line="56" pos:column="56">&lt;<argument><name pos:line="56" pos:column="57">string</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list pos:line="56" pos:column="65">(<argument><expr><name pos:line="56" pos:column="66">key</name></expr></argument>, <argument><expr><name pos:line="56" pos:column="71">value</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="59" pos:column="9">public</specifier> <name><name pos:line="59" pos:column="16">IEnumerable</name><argument_list pos:line="59" pos:column="27">&lt;<argument><name pos:line="59" pos:column="28">SynonymInfo</name></argument>&gt;</argument_list></name></type> <name pos:line="59" pos:column="41">GetSynonyms</name><parameter_list pos:line="59" pos:column="52">(<param><decl><type><name pos:line="59" pos:column="53">string</name></type> <name pos:line="59" pos:column="60">word</name></decl></param>)</parameter_list>
        <block pos:line="60" pos:column="9">{
            <lock pos:line="61" pos:column="13">lock (<expr><name pos:line="61" pos:column="19">locker</name></expr>)
            <block pos:line="62" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="63" pos:column="17">var</name></type> <name pos:line="63" pos:column="21">synonyms</name> <init pos:line="63" pos:column="30">= <expr><call><name><name pos:line="63" pos:column="32">ThesaurusHelper</name><op:operator pos:line="63" pos:column="47">.</op:operator><name pos:line="63" pos:column="48">GetValuesOfKey</name></name><argument_list pos:line="63" pos:column="62">(<argument><expr><name pos:line="63" pos:column="63">synonymLists</name></expr></argument>, <argument><expr><name pos:line="63" pos:column="77">word</name></expr></argument>)</argument_list></call><op:operator pos:line="63" pos:column="82">.</op:operator><call><name pos:line="63" pos:column="83">FirstOrDefault</name><argument_list pos:line="63" pos:column="97">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <return pos:line="64" pos:column="17">return <expr><name pos:line="64" pos:column="24">synonyms</name> <op:operator pos:line="64" pos:column="33">==</op:operator> <name pos:line="64" pos:column="36">null</name> <op:operator pos:line="64" pos:column="41">?</op:operator> <call><name><name pos:line="64" pos:column="43">Enumerable</name><op:operator pos:line="64" pos:column="53">.</op:operator><name><name pos:line="64" pos:column="54">Empty</name><argument_list pos:line="64" pos:column="59">&lt;<argument><name pos:line="64" pos:column="60">SynonymInfo</name></argument>&gt;</argument_list></name></name><argument_list pos:line="64" pos:column="72">()</argument_list></call> <op:operator pos:line="64" pos:column="75">:</op:operator> <call><name><name pos:line="64" pos:column="77">synonyms</name><op:operator pos:line="64" pos:column="85">.</op:operator><name pos:line="64" pos:column="86">Select</name></name><argument_list pos:line="64" pos:column="92">(<argument><expr><lambda><name pos:line="64" pos:column="93">s</name> <op:operator pos:line="64" pos:column="95">=&gt;</op:operator> <op:operator pos:line="64" pos:column="98">new</op:operator> <call><name pos:line="64" pos:column="102">SynonymInfo</name><argument_list pos:line="64" pos:column="113">(<argument><expr><name pos:line="64" pos:column="114">s</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</return>
            }</block></lock>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
