<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\SandoExtensionContracts\ProgramElementContracts\CppUnresolvedMethodElement.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Diagnostics</name><op:operator pos:line="3" pos:column="25">.</op:operator><name pos:line="3" pos:column="26">Contracts</name></name>;</using>

<namespace pos:line="5" pos:column="1">namespace <name><name pos:line="5" pos:column="11">Sando</name><op:operator pos:line="5" pos:column="16">.</op:operator><name pos:line="5" pos:column="17">ExtensionContracts</name><op:operator pos:line="5" pos:column="35">.</op:operator><name pos:line="5" pos:column="36">ProgramElementContracts</name></name>
<block pos:line="6" pos:column="1">{
	<class><specifier pos:line="7" pos:column="9">public</specifier> class <name pos:line="7" pos:column="22">CppUnresolvedMethodElement</name> <super pos:line="7" pos:column="49">: <name pos:line="7" pos:column="51">MethodElement</name></super>
	<block pos:line="8" pos:column="9">{
        <constructor><specifier pos:line="9" pos:column="9">public</specifier> <name pos:line="9" pos:column="16">CppUnresolvedMethodElement</name><parameter_list pos:line="9" pos:column="42">(<param><decl><type><name pos:line="9" pos:column="43">string</name></type> <name pos:line="9" pos:column="50">name</name></decl></param>, <param><decl><type><name pos:line="9" pos:column="56">int</name></type> <name pos:line="9" pos:column="60">definitionLineNumber</name></decl></param>, <param><decl><type><name pos:line="9" pos:column="82">int</name></type> <name pos:line="9" pos:column="86">definitionColumnNumber</name></decl></param>, <param><decl><type><name pos:line="9" pos:column="110">string</name></type> <name pos:line="9" pos:column="117">fullFilePath</name></decl></param>, <param><decl><type><name pos:line="9" pos:column="131">string</name></type> <name pos:line="9" pos:column="138">snippet</name></decl></param>, <param><decl><type><name pos:line="9" pos:column="147">string</name></type> <name pos:line="9" pos:column="154">arguments</name></decl></param>, 
			<param><decl><type><name pos:line="10" pos:column="25">string</name></type> <name pos:line="10" pos:column="32">returnType</name></decl></param>, <param><decl><type><name pos:line="10" pos:column="44">string</name></type> <name pos:line="10" pos:column="51">body</name></decl></param>, <param><decl><type><name pos:line="10" pos:column="57">string</name></type> <name pos:line="10" pos:column="64">className</name></decl></param>, <param><decl><type><name pos:line="10" pos:column="75">bool</name></type> <name pos:line="10" pos:column="80">isConstructor</name></decl></param>, <param><decl><type><name><name pos:line="10" pos:column="95">string</name> <index pos:line="10" pos:column="102">[]</index></name></type> <name pos:line="10" pos:column="105">headerFiles</name></decl></param>)</parameter_list>
            <member_list pos:line="11" pos:column="13">: <call><name pos:line="11" pos:column="15">base</name><argument_list pos:line="11" pos:column="19">(<argument><expr><name pos:line="11" pos:column="20">name</name></expr></argument>, <argument><expr><name pos:line="11" pos:column="26">definitionLineNumber</name></expr></argument>, <argument><expr><name pos:line="11" pos:column="48">definitionColumnNumber</name></expr></argument>, <argument><expr><name pos:line="11" pos:column="72">fullFilePath</name></expr></argument>, <argument><expr><name pos:line="11" pos:column="86">snippet</name></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="95">AccessLevel</name><op:operator pos:line="11" pos:column="106">.</op:operator><name pos:line="11" pos:column="107">Protected</name></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="118">arguments</name></expr></argument>, <argument><expr><name pos:line="11" pos:column="129">returnType</name></expr></argument>, <argument><expr><name pos:line="11" pos:column="141">body</name></expr></argument>, 
					<argument><expr><call><name><name pos:line="12" pos:column="41">Guid</name><op:operator pos:line="12" pos:column="45">.</op:operator><name pos:line="12" pos:column="46">NewGuid</name></name><argument_list pos:line="12" pos:column="53">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="12" pos:column="57">className</name></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="68">String</name><op:operator pos:line="12" pos:column="74">.</op:operator><name pos:line="12" pos:column="75">Empty</name></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="82">isConstructor</name></expr></argument>)</argument_list></call>
		</member_list><block pos:line="13" pos:column="17">{
            <expr_stmt><expr><call><name><name pos:line="14" pos:column="13">Contract</name><op:operator pos:line="14" pos:column="21">.</op:operator><name pos:line="14" pos:column="22">Requires</name></name><argument_list pos:line="14" pos:column="30">(<argument><expr><name pos:line="14" pos:column="31">className</name> <op:operator pos:line="14" pos:column="41">!=</op:operator> <name pos:line="14" pos:column="44">null</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="14" pos:column="50">"CppUnresolvedMethodElement:Constructor - class name cannot be null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:line="15" pos:column="13">//Contract.Requires(headerFiles.Length &gt; 0, "CppSplitMethodElement:Constructor - there have to be some header files defined here");</comment>
            <expr_stmt><expr><call><name><name pos:line="16" pos:column="13">Contract</name><op:operator pos:line="16" pos:column="21">.</op:operator><name pos:line="16" pos:column="22">Requires</name></name><argument_list pos:line="16" pos:column="30">(<argument><expr><name pos:line="16" pos:column="31">headerFiles</name> <op:operator pos:line="16" pos:column="43">!=</op:operator> <name pos:line="16" pos:column="46">null</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="16" pos:column="52">"CppUnresolvedMethodElement:Constructor - headerFiles cannot be null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name pos:line="18" pos:column="25">IncludeFileNames</name> <op:operator pos:line="18" pos:column="42">=</op:operator> <name pos:line="18" pos:column="44">headerFiles</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="19" pos:column="25">IsResolved</name> <op:operator pos:line="19" pos:column="36">=</op:operator> <lit:literal type="boolean" pos:line="19" pos:column="38">false</lit:literal></expr>;</expr_stmt>
		}</block></constructor>

		<function><type><specifier pos:line="22" pos:column="17">public</specifier> <name pos:line="22" pos:column="24">bool</name></type> <name pos:line="22" pos:column="29">TryResolve</name><parameter_list pos:line="22" pos:column="39">(<param><decl><type><name pos:line="22" pos:column="40">CppUnresolvedMethodElement</name></type> <name pos:line="22" pos:column="67">unresolvedMethod</name></decl></param>, <param><decl><type><name><name pos:line="22" pos:column="85">List</name><argument_list pos:line="22" pos:column="89">&lt;<argument><name pos:line="22" pos:column="90">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="22" pos:column="106">headerElements</name></decl></param>, <param><decl><type><specifier pos:line="22" pos:column="122">out</specifier> <name pos:line="22" pos:column="126">MethodElement</name></type> <name pos:line="22" pos:column="140">outMethodElement</name></decl></param>)</parameter_list> 
		<block pos:line="23" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="24" pos:column="25">AccessLevel</name></type> <name pos:line="24" pos:column="37">accessLevel</name></decl>;</decl_stmt> 
			<decl_stmt><decl><type><name pos:line="25" pos:column="25">Guid</name></type> <name pos:line="25" pos:column="30">classId</name></decl>;</decl_stmt>

			<expr_stmt><expr><name pos:line="27" pos:column="25">outMethodElement</name> <op:operator pos:line="27" pos:column="42">=</op:operator> <name pos:line="27" pos:column="44">null</name></expr>;</expr_stmt>
			<if pos:line="28" pos:column="25">if<condition pos:line="28" pos:column="27">(<expr><call><name pos:line="28" pos:column="28">ResolveClassId</name><argument_list pos:line="28" pos:column="42">(<argument><expr><name pos:line="28" pos:column="43">ClassName</name></expr></argument>, <argument><expr><name pos:line="28" pos:column="54">headerElements</name></expr></argument>, <argument><expr pos:line="28" pos:column="70">out <name pos:line="28" pos:column="74">classId</name></expr></argument>)</argument_list></call> <op:operator pos:line="28" pos:column="83">==</op:operator> <lit:literal type="boolean" pos:line="28" pos:column="86">false</lit:literal></expr>)</condition><then pos:line="28" pos:column="92"> <return pos:line="28" pos:column="93">return <expr><lit:literal type="boolean" pos:line="28" pos:column="100">false</lit:literal></expr>;</return></then></if>
			<if pos:line="29" pos:column="25">if<condition pos:line="29" pos:column="27">(<expr><call><name pos:line="29" pos:column="28">ResolveAccessType</name><argument_list pos:line="29" pos:column="45">(<argument><expr><name pos:line="29" pos:column="46">Name</name></expr></argument>, <argument><expr><name pos:line="29" pos:column="52">headerElements</name></expr></argument>, <argument><expr pos:line="29" pos:column="68">out <name pos:line="29" pos:column="72">accessLevel</name></expr></argument>)</argument_list></call> <op:operator pos:line="29" pos:column="85">==</op:operator> <lit:literal type="boolean" pos:line="29" pos:column="88">false</lit:literal></expr>)</condition><then pos:line="29" pos:column="94"> <return pos:line="29" pos:column="95">return <expr><lit:literal type="boolean" pos:line="29" pos:column="102">false</lit:literal></expr>;</return></then></if>

			<expr_stmt><expr><name pos:line="31" pos:column="25">IsResolved</name> <op:operator pos:line="31" pos:column="36">=</op:operator> <lit:literal type="boolean" pos:line="31" pos:column="38">true</lit:literal></expr>;</expr_stmt>
		    <expr_stmt><expr><name pos:line="32" pos:column="21">outMethodElement</name> <op:operator pos:line="32" pos:column="38">=</op:operator>
                <call><name><name pos:line="33" pos:column="17">Activator</name><op:operator pos:line="33" pos:column="26">.</op:operator><name pos:line="33" pos:column="27">CreateInstance</name></name><argument_list pos:line="33" pos:column="41">(<argument><expr><call><name><name pos:line="33" pos:column="42">unresolvedMethod</name><op:operator pos:line="33" pos:column="58">.</op:operator><name pos:line="33" pos:column="59">GetResolvedType</name></name><argument_list pos:line="33" pos:column="74">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="33" pos:column="78">Name</name></expr></argument>, <argument><expr><name pos:line="33" pos:column="84">DefinitionLineNumber</name></expr></argument>, <argument><expr><name pos:line="33" pos:column="106">DefinitionColumnNumber</name></expr></argument>, <argument><expr><name pos:line="33" pos:column="130">FullFilePath</name></expr></argument>, <argument><expr><name pos:line="33" pos:column="144">RawSource</name></expr></argument>, <argument><expr><name pos:line="33" pos:column="155">accessLevel</name></expr></argument>,
		                                 <argument><expr><name pos:line="34" pos:column="50">Arguments</name></expr></argument>, <argument><expr><name pos:line="34" pos:column="61">ReturnType</name></expr></argument>, <argument><expr><name pos:line="34" pos:column="73">Body</name></expr></argument>,
		                                 <argument><expr><name pos:line="35" pos:column="50">classId</name></expr></argument>, <argument><expr><name pos:line="35" pos:column="59">ClassName</name></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="70">String</name><op:operator pos:line="35" pos:column="76">.</op:operator><name pos:line="35" pos:column="77">Empty</name></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="84">IsConstructor</name></expr></argument>)</argument_list></call> <op:operator pos:line="35" pos:column="99">as</op:operator> <name pos:line="35" pos:column="102">MethodElement</name></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name pos:line="36" pos:column="21">SetCustomFields</name><argument_list pos:line="36" pos:column="36">(<argument><expr><name pos:line="36" pos:column="37">unresolvedMethod</name></expr></argument>, <argument><expr><name pos:line="36" pos:column="55">outMethodElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="37" pos:column="25">return <expr><lit:literal type="boolean" pos:line="37" pos:column="32">true</lit:literal></expr>;</return>
		}</block></function>

		<comment type="line" pos:line="40" pos:column="17">//TODO: Remove this method</comment>
		<function><type><specifier pos:line="41" pos:column="17">public</specifier> <name pos:line="41" pos:column="24">MethodElement</name></type> <name pos:line="41" pos:column="38">Copy</name><parameter_list pos:line="41" pos:column="42">()</parameter_list>
		<block pos:line="42" pos:column="17">{
            <decl_stmt><decl><type><name pos:line="43" pos:column="13">var</name></type> <name pos:line="43" pos:column="17">outMethodElement</name> <init pos:line="43" pos:column="34">= <expr><call><name><name pos:line="43" pos:column="36">Activator</name><op:operator pos:line="43" pos:column="45">.</op:operator><name pos:line="43" pos:column="46">CreateInstance</name></name><argument_list pos:line="43" pos:column="60">(<argument><expr><call><name pos:line="43" pos:column="61">GetResolvedType</name><argument_list pos:line="43" pos:column="76">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="43" pos:column="80">Name</name></expr></argument>, <argument><expr><name pos:line="43" pos:column="86">DefinitionLineNumber</name></expr></argument>, <argument><expr><name pos:line="43" pos:column="108">DefinitionColumnNumber</name></expr></argument>, <argument><expr><name pos:line="43" pos:column="132">FullFilePath</name></expr></argument>, <argument><expr><name pos:line="43" pos:column="146">RawSource</name></expr></argument>, <argument><expr><name><name pos:line="43" pos:column="157">AccessLevel</name><op:operator pos:line="43" pos:column="168">.</op:operator><name pos:line="43" pos:column="169">Protected</name></name></expr></argument>,
                                         <argument><expr><name pos:line="44" pos:column="42">Arguments</name></expr></argument>, <argument><expr><name pos:line="44" pos:column="53">ReturnType</name></expr></argument>, <argument><expr><name pos:line="44" pos:column="65">Body</name></expr></argument>,
                                         <argument><expr><call><name><name pos:line="45" pos:column="42">Guid</name><op:operator pos:line="45" pos:column="46">.</op:operator><name pos:line="45" pos:column="47">NewGuid</name></name><argument_list pos:line="45" pos:column="54">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="45" pos:column="58">ClassName</name></expr></argument>, <argument><expr><name><name pos:line="45" pos:column="69">String</name><op:operator pos:line="45" pos:column="75">.</op:operator><name pos:line="45" pos:column="76">Empty</name></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="83">IsConstructor</name></expr></argument>)</argument_list></call> <op:operator pos:line="45" pos:column="98">as</op:operator> <name pos:line="45" pos:column="101">MethodElement</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="46" pos:column="13">SetCustomFields</name><argument_list pos:line="46" pos:column="28">(<argument><expr><name pos:line="46" pos:column="29">this</name></expr></argument>, <argument><expr><name pos:line="46" pos:column="35">outMethodElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <return pos:line="47" pos:column="21">return <expr><name pos:line="47" pos:column="28">outMethodElement</name></expr>;</return>
		}</block></function>

	    <function><type><specifier pos:line="50" pos:column="13">private</specifier> <name pos:line="50" pos:column="21">void</name></type> <name pos:line="50" pos:column="26">SetCustomFields</name><parameter_list pos:line="50" pos:column="41">(<param><decl><type><name pos:line="50" pos:column="42">CppUnresolvedMethodElement</name></type> <name pos:line="50" pos:column="69">oldElement</name></decl></param>, <param><decl><type><name pos:line="50" pos:column="81">MethodElement</name></type> <name pos:line="50" pos:column="95">newElement</name></decl></param>)</parameter_list>
	    <block pos:line="51" pos:column="13">{
	        <foreach pos:line="52" pos:column="17">foreach (<init><decl><type><name pos:line="52" pos:column="26">var</name></type> <name pos:line="52" pos:column="30">property</name> <range pos:line="52" pos:column="39">in <expr><op:operator pos:line="52" pos:column="42">(</op:operator><name pos:line="52" pos:column="43">oldElement</name> <op:operator pos:line="52" pos:column="54">as</op:operator> <name pos:line="52" pos:column="57">ProgramElement</name><op:operator pos:line="52" pos:column="71">)</op:operator><op:operator pos:line="52" pos:column="72">.</op:operator><call><name pos:line="52" pos:column="73">GetCustomProperties</name><argument_list pos:line="52" pos:column="92">()</argument_list></call></expr></range></decl></init>)
	        <block pos:line="53" pos:column="17">{
	            <if pos:line="54" pos:column="21">if <condition pos:line="54" pos:column="24">(<expr><op:operator pos:line="54" pos:column="25">!</op:operator><call><name><name pos:line="54" pos:column="26">property</name><op:operator pos:line="54" pos:column="34">.</op:operator><name pos:line="54" pos:column="35">Name</name><op:operator pos:line="54" pos:column="39">.</op:operator><name pos:line="54" pos:column="40">Equals</name></name><argument_list pos:line="54" pos:column="46">(<argument><expr><name><name pos:line="54" pos:column="47">ProgramElement</name><op:operator pos:line="54" pos:column="61">.</op:operator><name pos:line="54" pos:column="62">CustomTypeTag</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="54" pos:column="77">
	            <block pos:line="55" pos:column="21">{
	                <decl_stmt><decl><type><name pos:line="56" pos:column="25">var</name></type> <name pos:line="56" pos:column="29">newProperty</name> <init pos:line="56" pos:column="41">= <expr><call><name><name pos:line="56" pos:column="43">newElement</name><op:operator pos:line="56" pos:column="53">.</op:operator><name pos:line="56" pos:column="54">GetType</name></name><argument_list pos:line="56" pos:column="61">()</argument_list></call><op:operator pos:line="56" pos:column="63">.</op:operator><call><name pos:line="56" pos:column="64">GetProperty</name><argument_list pos:line="56" pos:column="75">(<argument><expr><name><name pos:line="56" pos:column="76">property</name><op:operator pos:line="56" pos:column="84">.</op:operator><name pos:line="56" pos:column="85">Name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="57" pos:column="21">var</name></type> <name pos:line="57" pos:column="25">oldProperty</name><init pos:line="57" pos:column="36">= <expr><call><name><name pos:line="57" pos:column="38">oldElement</name><op:operator pos:line="57" pos:column="48">.</op:operator><name pos:line="57" pos:column="49">GetType</name></name><argument_list pos:line="57" pos:column="56">()</argument_list></call><op:operator pos:line="57" pos:column="58">.</op:operator><call><name pos:line="57" pos:column="59">GetProperty</name><argument_list pos:line="57" pos:column="70">(<argument><expr><name><name pos:line="57" pos:column="71">property</name><op:operator pos:line="57" pos:column="79">.</op:operator><name pos:line="57" pos:column="80">Name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	                <decl_stmt><decl><type><name pos:line="58" pos:column="25">var</name></type> <name pos:line="58" pos:column="29">oldGet</name> <init pos:line="58" pos:column="36">= <expr><call><name><name pos:line="58" pos:column="38">oldProperty</name><op:operator pos:line="58" pos:column="49">.</op:operator><name pos:line="58" pos:column="50">GetGetMethod</name></name><argument_list pos:line="58" pos:column="62">(<argument><expr><lit:literal type="boolean" pos:line="58" pos:column="63">false</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	                <decl_stmt><decl><type><name pos:line="59" pos:column="25">var</name></type> <name pos:line="59" pos:column="29">newSet</name> <init pos:line="59" pos:column="36">= <expr><call><name><name pos:line="59" pos:column="38">newProperty</name><op:operator pos:line="59" pos:column="49">.</op:operator><name pos:line="59" pos:column="50">GetSetMethod</name></name><argument_list pos:line="59" pos:column="62">()</argument_list></call></expr></init></decl>;</decl_stmt>
	                <decl_stmt><decl><type><name pos:line="60" pos:column="25">object</name><index pos:line="60" pos:column="31">[]</index></type> <name pos:line="60" pos:column="34">parameters</name> <init pos:line="60" pos:column="45">= <expr><block pos:line="60" pos:column="47">{<expr><call><name><name pos:line="60" pos:column="48">oldGet</name><op:operator pos:line="60" pos:column="54">.</op:operator><name pos:line="60" pos:column="55">Invoke</name></name><argument_list pos:line="60" pos:column="61">(<argument><expr><name pos:line="60" pos:column="62">oldElement</name></expr></argument>, <argument><expr><name pos:line="60" pos:column="74">null</name></expr></argument>)</argument_list></call></expr>}</block></expr></init></decl>;</decl_stmt>
	                <expr_stmt><expr><call><name><name pos:line="61" pos:column="25">newSet</name><op:operator pos:line="61" pos:column="31">.</op:operator><name pos:line="61" pos:column="32">Invoke</name></name><argument_list pos:line="61" pos:column="38">(<argument><expr><name pos:line="61" pos:column="39">newElement</name></expr></argument>, <argument><expr><name pos:line="61" pos:column="51">parameters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            }</block></then></if>
	        }</block></foreach>	    
	    }</block></function>

	    <function><type><specifier pos:line="66" pos:column="13">protected</specifier> <specifier pos:line="66" pos:column="23">virtual</specifier> <name pos:line="66" pos:column="31">Type</name></type> <name pos:line="66" pos:column="36">GetResolvedType</name><parameter_list pos:line="66" pos:column="51">()</parameter_list>
	    <block pos:line="67" pos:column="13">{
	        <return pos:line="68" pos:column="17">return <expr><call><name pos:line="68" pos:column="24">typeof</name> <argument_list pos:line="68" pos:column="31">(<argument><expr><name pos:line="68" pos:column="32">MethodElement</name></expr></argument>)</argument_list></call></expr>;</return>
	    }</block></function>

	    <function><type><specifier pos:line="71" pos:column="13">private</specifier> <name pos:line="71" pos:column="21">bool</name></type> <name pos:line="71" pos:column="26">ResolveClassId</name><parameter_list pos:line="71" pos:column="40">(<param><decl><type><name pos:line="71" pos:column="41">string</name></type> <name pos:line="71" pos:column="48">className</name></decl></param>, <param><decl><type><name><name pos:line="71" pos:column="59">List</name><argument_list pos:line="71" pos:column="63">&lt;<argument><name pos:line="71" pos:column="64">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="71" pos:column="80">includeElements</name></decl></param>, <param><decl><type><specifier pos:line="71" pos:column="97">out</specifier> <name pos:line="71" pos:column="101">Guid</name></type> <name pos:line="71" pos:column="106">outGuid</name></decl></param>)</parameter_list>
		<block pos:line="72" pos:column="17">{
			<foreach pos:line="73" pos:column="25">foreach(<init><decl><type><name pos:line="73" pos:column="33">ProgramElement</name></type> <name pos:line="73" pos:column="48">element</name> <range pos:line="73" pos:column="56">in <expr><name pos:line="73" pos:column="59">includeElements</name></expr></range></decl></init>)
			<block pos:line="74" pos:column="25">{
				<if pos:line="75" pos:column="33">if<condition pos:line="75" pos:column="35">(<expr><name pos:line="75" pos:column="36">element</name> <op:operator pos:line="75" pos:column="44">is</op:operator> <name pos:line="75" pos:column="47">ClassElement</name> <op:operator pos:line="75" pos:column="60">&amp;&amp;</op:operator> <name><name pos:line="75" pos:column="63">element</name><op:operator pos:line="75" pos:column="70">.</op:operator><name pos:line="75" pos:column="71">Name</name></name> <op:operator pos:line="75" pos:column="76">==</op:operator> <name pos:line="75" pos:column="79">className</name></expr>)</condition><then pos:line="75" pos:column="89">
				<block pos:line="76" pos:column="33">{
					<expr_stmt><expr><name pos:line="77" pos:column="41">outGuid</name> <op:operator pos:line="77" pos:column="49">=</op:operator> <op:operator pos:line="77" pos:column="51">(</op:operator><op:operator pos:line="77" pos:column="52">(</op:operator><name pos:line="77" pos:column="53">ClassElement</name><op:operator pos:line="77" pos:column="65">)</op:operator><name pos:line="77" pos:column="66">element</name><op:operator pos:line="77" pos:column="73">)</op:operator><op:operator pos:line="77" pos:column="74">.</op:operator><name pos:line="77" pos:column="75">Id</name></expr>;</expr_stmt>
					<return pos:line="78" pos:column="41">return <expr><lit:literal type="boolean" pos:line="78" pos:column="48">true</lit:literal></expr>;</return>
				}</block></then>
                <else pos:line="80" pos:column="17">else <if pos:line="80" pos:column="22">if <condition pos:line="80" pos:column="25">(<expr><name pos:line="80" pos:column="26">element</name> <op:operator pos:line="80" pos:column="34">is</op:operator> <name pos:line="80" pos:column="37">StructElement</name> <op:operator pos:line="80" pos:column="51">&amp;&amp;</op:operator> <name><name pos:line="80" pos:column="54">element</name><op:operator pos:line="80" pos:column="61">.</op:operator><name pos:line="80" pos:column="62">Name</name></name> <op:operator pos:line="80" pos:column="67">==</op:operator> <name pos:line="80" pos:column="70">className</name></expr>)</condition><then pos:line="80" pos:column="80">
                <block pos:line="81" pos:column="17">{
                    <expr_stmt><expr><name pos:line="82" pos:column="21">outGuid</name> <op:operator pos:line="82" pos:column="29">=</op:operator> <op:operator pos:line="82" pos:column="31">(</op:operator><op:operator pos:line="82" pos:column="32">(</op:operator><name pos:line="82" pos:column="33">StructElement</name><op:operator pos:line="82" pos:column="46">)</op:operator><name pos:line="82" pos:column="47">element</name><op:operator pos:line="82" pos:column="54">)</op:operator><op:operator pos:line="82" pos:column="55">.</op:operator><name pos:line="82" pos:column="56">Id</name></expr>;</expr_stmt>
                    <return pos:line="83" pos:column="21">return <expr><lit:literal type="boolean" pos:line="83" pos:column="28">true</lit:literal></expr>;</return>
                }</block></then></if></else></if>
			}</block></foreach>

			<expr_stmt><expr><name pos:line="87" pos:column="25">outGuid</name> <op:operator pos:line="87" pos:column="33">=</op:operator> <name><name pos:line="87" pos:column="35">Guid</name><op:operator pos:line="87" pos:column="39">.</op:operator><name pos:line="87" pos:column="40">Empty</name></name></expr>;</expr_stmt>
			<return pos:line="88" pos:column="25">return <expr><lit:literal type="boolean" pos:line="88" pos:column="32">false</lit:literal></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="91" pos:column="17">private</specifier> <name pos:line="91" pos:column="25">bool</name></type> <name pos:line="91" pos:column="30">ResolveAccessType</name><parameter_list pos:line="91" pos:column="47">(<param><decl><type><name pos:line="91" pos:column="48">string</name></type> <name pos:line="91" pos:column="55">funcName</name></decl></param>, <param><decl><type><name><name pos:line="91" pos:column="65">List</name><argument_list pos:line="91" pos:column="69">&lt;<argument><name pos:line="91" pos:column="70">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="91" pos:column="86">includeElements</name></decl></param>, <param><decl><type><specifier pos:line="91" pos:column="103">out</specifier> <name pos:line="91" pos:column="107">AccessLevel</name></type> <name pos:line="91" pos:column="119">outAccessLevel</name></decl></param>)</parameter_list>
		<block pos:line="92" pos:column="17">{
			<foreach pos:line="93" pos:column="25">foreach(<init><decl><type><name pos:line="93" pos:column="33">ProgramElement</name></type> <name pos:line="93" pos:column="48">element</name> <range pos:line="93" pos:column="56">in <expr><name pos:line="93" pos:column="59">includeElements</name></expr></range></decl></init>)
			<block pos:line="94" pos:column="25">{
				<if pos:line="95" pos:column="33">if<condition pos:line="95" pos:column="35">(<expr><name pos:line="95" pos:column="36">element</name> <op:operator pos:line="95" pos:column="44">is</op:operator> <name pos:line="95" pos:column="47">MethodPrototypeElement</name> <op:operator pos:line="95" pos:column="70">&amp;&amp;</op:operator> <name><name pos:line="95" pos:column="73">element</name><op:operator pos:line="95" pos:column="80">.</op:operator><name pos:line="95" pos:column="81">Name</name></name> <op:operator pos:line="95" pos:column="86">==</op:operator> <name pos:line="95" pos:column="89">funcName</name></expr>)</condition><then pos:line="95" pos:column="98"> 
				<block pos:line="96" pos:column="33">{
					<expr_stmt><expr><name pos:line="97" pos:column="41">outAccessLevel</name> <op:operator pos:line="97" pos:column="56">=</op:operator> <op:operator pos:line="97" pos:column="58">(</op:operator><op:operator pos:line="97" pos:column="59">(</op:operator><name pos:line="97" pos:column="60">MethodPrototypeElement</name><op:operator pos:line="97" pos:column="82">)</op:operator><name pos:line="97" pos:column="83">element</name><op:operator pos:line="97" pos:column="90">)</op:operator><op:operator pos:line="97" pos:column="91">.</op:operator><name pos:line="97" pos:column="92">AccessLevel</name></expr>;</expr_stmt>
					<return pos:line="98" pos:column="41">return <expr><lit:literal type="boolean" pos:line="98" pos:column="48">true</lit:literal></expr>;</return>
				}</block></then></if>
			}</block></foreach>

			<expr_stmt><expr><name pos:line="102" pos:column="25">outAccessLevel</name> <op:operator pos:line="102" pos:column="40">=</op:operator> <name><name pos:line="102" pos:column="42">AccessLevel</name><op:operator pos:line="102" pos:column="53">.</op:operator><name pos:line="102" pos:column="54">Protected</name></name></expr>;</expr_stmt>
			<return pos:line="103" pos:column="25">return <expr><lit:literal type="boolean" pos:line="103" pos:column="32">false</lit:literal></expr>;</return>
		}</block></function>
		
		<decl_stmt><decl><type><specifier pos:line="106" pos:column="17">public</specifier> <specifier pos:line="106" pos:column="24">virtual</specifier> <name pos:line="106" pos:column="32">string</name><index pos:line="106" pos:column="38">[]</index></type> <name pos:line="106" pos:column="41">IncludeFileNames</name> <block pos:line="106" pos:column="58">{ <function_decl><name pos:line="106" pos:column="60">get</name>;</function_decl> <function_decl><specifier pos:line="106" pos:column="65">private</specifier> <name pos:line="106" pos:column="73">set</name>;</function_decl> }</block></decl></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="107" pos:column="17">public</specifier> <specifier pos:line="107" pos:column="24">virtual</specifier> <name pos:line="107" pos:column="32">bool</name></type> <name pos:line="107" pos:column="37">IsResolved</name> <block pos:line="107" pos:column="48">{ <function_decl><name pos:line="107" pos:column="50">get</name>;</function_decl> <function_decl><name pos:line="107" pos:column="55">set</name>;</function_decl> }</block></decl></decl_stmt>
	}</block></class>
}</block></namespace>
</unit>
