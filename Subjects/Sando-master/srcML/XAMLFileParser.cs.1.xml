<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Parser\Parser\XAMLFileParser.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Collections</name><op:operator pos:line="3" pos:column="25">.</op:operator><name pos:line="3" pos:column="26">ObjectModel</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">IO</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Linq</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">System</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">Text</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">System</name><op:operator pos:line="7" pos:column="13">.</op:operator><name pos:line="7" pos:column="14">Xml</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">System</name><op:operator pos:line="8" pos:column="13">.</op:operator><name pos:line="8" pos:column="14">Xml</name><op:operator pos:line="8" pos:column="17">.</op:operator><name pos:line="8" pos:column="18">Linq</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">Sando</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">ExtensionContracts</name><op:operator pos:line="9" pos:column="31">.</op:operator><name pos:line="9" pos:column="32">ParserContracts</name></name>;</using>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">Sando</name><op:operator pos:line="10" pos:column="12">.</op:operator><name pos:line="10" pos:column="13">ExtensionContracts</name><op:operator pos:line="10" pos:column="31">.</op:operator><name pos:line="10" pos:column="32">ProgramElementContracts</name></name>;</using>

<namespace pos:line="12" pos:column="1">namespace <name><name pos:line="12" pos:column="11">Sando</name><op:operator pos:line="12" pos:column="16">.</op:operator><name pos:line="12" pos:column="17">Parser</name></name>
<block pos:line="13" pos:column="1">{
    <comment type="line" pos:line="14" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="15" pos:column="5">/// This parser handles XML and XAML files. The algorithm to break an XML file to program elements is:</comment>
    <comment type="line" pos:line="16" pos:column="5">/// 1. Breaking the document to xml elements.</comment>
    <comment type="line" pos:line="17" pos:column="5">/// 2. For each element, calculating the length of the element. If the elment is too long, then folding </comment>
    <comment type="line" pos:line="18" pos:column="5">///     part of its decendant until the length of the element is under the limit or no decendant can be </comment>
    <comment type="line" pos:line="19" pos:column="5">///     folded any longer.</comment>
    <comment type="line" pos:line="20" pos:column="5">/// 3. For those elements that are under limit by themselves, leaving them alone.</comment>
    <comment type="line" pos:line="21" pos:column="5">/// 4. After processing all of the elements, each of them has a length under the limit.</comment>
    <comment type="line" pos:line="22" pos:column="5">/// 5. Each of these processed element derives a program element.</comment>
    <comment type="line" pos:line="23" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="24" pos:column="5">public</specifier> class <name pos:line="24" pos:column="18">XAMLFileParser</name> <super pos:line="24" pos:column="33">: <name pos:line="24" pos:column="35">IParser</name></super>
    <block pos:line="25" pos:column="5">{
        <comment type="line" pos:line="26" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="27" pos:column="9">/// Breaking down xml element, each element should not exceed this lenght.</comment>
        <comment type="line" pos:line="28" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="29" pos:column="9">public</specifier> <specifier pos:line="29" pos:column="16">const</specifier> <name pos:line="29" pos:column="22">int</name></type> <name pos:line="29" pos:column="26">LengthLimit</name> <init pos:line="29" pos:column="38">= <expr><lit:literal type="number" pos:line="29" pos:column="40">30</lit:literal></expr></init></decl>;</decl_stmt>

        
        <function><type><specifier pos:line="32" pos:column="9">public</specifier> <name><name pos:line="32" pos:column="16">List</name><argument_list pos:line="32" pos:column="20">&lt;<argument><name pos:line="32" pos:column="21">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="32" pos:column="37">OldParse</name><parameter_list pos:line="32" pos:column="45">(<param><decl><type><name pos:line="32" pos:column="46">string</name></type> <name pos:line="32" pos:column="53">fileName</name></decl></param>, <param><decl><type><name pos:line="32" pos:column="63">XElement</name></type> <name pos:line="32" pos:column="72">documentRoot</name></decl></param>)</parameter_list>
        <block pos:line="33" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="34" pos:column="13">var</name></type> <name pos:line="34" pos:column="17">allText</name> <init pos:line="34" pos:column="25">= <expr><call><name><name pos:line="34" pos:column="27">File</name><op:operator pos:line="34" pos:column="31">.</op:operator><name pos:line="34" pos:column="32">ReadAllText</name></name><argument_list pos:line="34" pos:column="43">(<argument><expr><name pos:line="34" pos:column="44">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="35" pos:column="13">var</name></type> <name pos:line="35" pos:column="17">allXElements</name> <init pos:line="35" pos:column="30">= <expr><call><name pos:line="35" pos:column="32">ParseXmlRoot</name><argument_list pos:line="35" pos:column="44">(<argument><expr><name pos:line="35" pos:column="45">allText</name></expr></argument>)</argument_list></call><op:operator pos:line="35" pos:column="53">.</op:operator><call><name pos:line="35" pos:column="54">DescendantNodesAndSelf</name><argument_list pos:line="35" pos:column="76">()</argument_list></call><op:operator pos:line="35" pos:column="78">.</op:operator>
                <call><name pos:line="36" pos:column="17">Where</name><argument_list pos:line="36" pos:column="22">(<argument><expr><lambda><name pos:line="36" pos:column="23">n</name> <op:operator pos:line="36" pos:column="25">=&gt;</op:operator> <name pos:line="36" pos:column="28">n</name> <op:operator pos:line="36" pos:column="30">as</op:operator> <name pos:line="36" pos:column="33">XElement</name><op:operator pos:line="36" pos:column="41">!=</op:operator> <name pos:line="36" pos:column="44">null</name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="37" pos:column="13">var</name></type> <name pos:line="37" pos:column="17">allProgramElements</name> <init pos:line="37" pos:column="36">= <expr><op:operator pos:line="37" pos:column="38">new</op:operator> <call><name><name pos:line="37" pos:column="42">List</name><argument_list pos:line="37" pos:column="46">&lt;<argument><name pos:line="37" pos:column="47">ProgramElement</name></argument>&gt;</argument_list></name><argument_list pos:line="37" pos:column="62">()</argument_list></call></expr></init></decl>;</decl_stmt>
   
            <foreach pos:line="39" pos:column="13">foreach (<init><decl><type><name pos:line="39" pos:column="22">XElement</name></type> <name pos:line="39" pos:column="31">element</name> <range pos:line="39" pos:column="39">in <expr><name pos:line="39" pos:column="42">allXElements</name></expr></range></decl></init>)
            <block pos:line="40" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="41" pos:column="17">var</name></type> <name pos:line="41" pos:column="21">root</name> <init pos:line="41" pos:column="26">= <expr><call><name pos:line="41" pos:column="28">ParseXmlRoot</name><argument_list pos:line="41" pos:column="40">(<argument><expr><name pos:line="41" pos:column="41">allText</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="42" pos:column="17">var</name></type> <name pos:line="42" pos:column="21">ele</name> <init pos:line="42" pos:column="25">= <expr><call><name pos:line="42" pos:column="27">MapNodeToRoot</name><argument_list pos:line="42" pos:column="40">(<argument><expr><name pos:line="42" pos:column="41">element</name></expr></argument>, <argument><expr><name pos:line="42" pos:column="50">root</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name pos:line="43" pos:column="17">FoldingElement</name><argument_list pos:line="43" pos:column="31">(<argument><expr><name pos:line="43" pos:column="32">ele</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line" pos:line="45" pos:column="17">// All information for creating program element.</comment>
                <decl_stmt><decl><type><name pos:line="46" pos:column="17">String</name></type> <name pos:line="46" pos:column="24">name</name> <init pos:line="46" pos:column="29">= <expr><name><name pos:line="46" pos:column="31">element</name><op:operator pos:line="46" pos:column="38">.</op:operator><name pos:line="46" pos:column="39">Name</name><op:operator pos:line="46" pos:column="43">.</op:operator><name pos:line="46" pos:column="44">LocalName</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="47" pos:column="17">String</name></type> <name pos:line="47" pos:column="24">body</name> <init pos:line="47" pos:column="29">= <expr><call><name><name pos:line="47" pos:column="31">ele</name><op:operator pos:line="47" pos:column="34">.</op:operator><name pos:line="47" pos:column="35">ToString</name></name><argument_list pos:line="47" pos:column="43">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="48" pos:column="17">int</name></type> <name pos:line="48" pos:column="21">line</name> <init pos:line="48" pos:column="26">= <expr><call><name pos:line="48" pos:column="28">GetLineNumber</name><argument_list pos:line="48" pos:column="41">(<argument><expr><name pos:line="48" pos:column="42">element</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="49" pos:column="17">int</name></type> <name pos:line="49" pos:column="21">columnn</name> <init pos:line="49" pos:column="29">= <expr><call><name pos:line="49" pos:column="31">GetColumnNumber</name><argument_list pos:line="49" pos:column="46">(<argument><expr><name pos:line="49" pos:column="47">element</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="50" pos:column="17">String</name></type> <name pos:line="50" pos:column="24">snippet</name> <init pos:line="50" pos:column="32">= <expr><call><name pos:line="50" pos:column="34">GetSnippet</name><argument_list pos:line="50" pos:column="44">(<argument><expr><name pos:line="50" pos:column="45">ele</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                
                <expr_stmt><expr><call><name><name pos:line="52" pos:column="17">allProgramElements</name><op:operator pos:line="52" pos:column="35">.</op:operator><name pos:line="52" pos:column="36">Add</name></name><argument_list pos:line="52" pos:column="39">(<argument><expr><op:operator pos:line="52" pos:column="40">new</op:operator> <call><name pos:line="52" pos:column="44">XmlXElement</name><argument_list pos:line="52" pos:column="55">(<argument><expr><name pos:line="52" pos:column="56">name</name></expr></argument>, <argument><expr><name pos:line="52" pos:column="62">body</name></expr></argument>, <argument><expr><name pos:line="52" pos:column="68">line</name></expr></argument>, <argument><expr><name pos:line="52" pos:column="74">columnn</name></expr></argument>, <argument><expr><name pos:line="52" pos:column="83">fileName</name></expr></argument>, <argument><expr><name pos:line="52" pos:column="93">snippet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
            <return pos:line="54" pos:column="13">return <expr><name pos:line="54" pos:column="20">allProgramElements</name></expr>;</return>
        }</block></function>



       <function><type><specifier pos:line="59" pos:column="8">public</specifier> <name><name pos:line="59" pos:column="15">List</name><argument_list pos:line="59" pos:column="19">&lt;<argument><name pos:line="59" pos:column="20">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="59" pos:column="36">Parse</name><parameter_list pos:line="59" pos:column="41">(<param><decl><type><name pos:line="59" pos:column="42">string</name></type> <name pos:line="59" pos:column="49">fileName</name></decl></param>, <param><decl><type><name pos:line="59" pos:column="59">XElement</name></type> <name pos:line="59" pos:column="68">root</name></decl></param>)</parameter_list>
       <block pos:line="60" pos:column="8">{
           <decl_stmt><decl><type><name pos:line="61" pos:column="12">var</name></type> <name pos:line="61" pos:column="16">allXElement</name> <init pos:line="61" pos:column="28">= <expr><call><name><name pos:line="61" pos:column="30">root</name><op:operator pos:line="61" pos:column="34">.</op:operator><name pos:line="61" pos:column="35">DescendantNodesAndSelf</name></name><argument_list pos:line="61" pos:column="57">()</argument_list></call><op:operator pos:line="61" pos:column="59">.</op:operator><call><name pos:line="61" pos:column="60">Where</name><argument_list pos:line="61" pos:column="65">(<argument><expr><lambda><name pos:line="61" pos:column="66">n</name> <op:operator pos:line="61" pos:column="68">=&gt;</op:operator> <name pos:line="61" pos:column="71">n</name> <op:operator pos:line="61" pos:column="73">as</op:operator> <name pos:line="61" pos:column="76">XElement</name> <op:operator pos:line="61" pos:column="85">!=</op:operator> <name pos:line="61" pos:column="88">null</name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
           <decl_stmt><decl><type><name pos:line="62" pos:column="12">var</name></type> <name pos:line="62" pos:column="16">list</name> <init pos:line="62" pos:column="21">= <expr><op:operator pos:line="62" pos:column="23">new</op:operator> <call><name><name pos:line="62" pos:column="27">List</name><argument_list pos:line="62" pos:column="31">&lt;<argument><name pos:line="62" pos:column="32">ProgramElement</name></argument>&gt;</argument_list></name><argument_list pos:line="62" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
           <foreach pos:line="63" pos:column="12">foreach (<init><decl><type><name pos:line="63" pos:column="21">XElement</name></type> <name pos:line="63" pos:column="30">original</name> <range pos:line="63" pos:column="39">in <expr><name pos:line="63" pos:column="42">allXElement</name></expr></range></decl></init>)
           <block pos:line="64" pos:column="12">{
               <decl_stmt><decl><type><name pos:line="65" pos:column="16">var</name></type> <name pos:line="65" pos:column="20">copy</name> <init pos:line="65" pos:column="25">= <expr><call><name><name pos:line="65" pos:column="27">XElement</name><op:operator pos:line="65" pos:column="35">.</op:operator><name pos:line="65" pos:column="36">Parse</name></name><argument_list pos:line="65" pos:column="41">(<argument><expr><call><name><name pos:line="65" pos:column="42">original</name><op:operator pos:line="65" pos:column="50">.</op:operator><name pos:line="65" pos:column="51">ToString</name></name><argument_list pos:line="65" pos:column="59">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
               <expr_stmt><expr><call><name pos:line="66" pos:column="16">ControlElement</name><argument_list pos:line="66" pos:column="30">(<argument><expr><name pos:line="66" pos:column="31">copy</name></expr></argument>, <argument><expr><name pos:line="66" pos:column="37">copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

               <comment type="line" pos:line="68" pos:column="16">// All information for creating program element.</comment>
               <decl_stmt><decl><type><name pos:line="69" pos:column="16">String</name></type> <name pos:line="69" pos:column="23">name</name> <init pos:line="69" pos:column="28">= <expr><name><name pos:line="69" pos:column="30">original</name><op:operator pos:line="69" pos:column="38">.</op:operator><name pos:line="69" pos:column="39">Name</name><op:operator pos:line="69" pos:column="43">.</op:operator><name pos:line="69" pos:column="44">LocalName</name></name></expr></init></decl>;</decl_stmt>
               <decl_stmt><decl><type><name pos:line="70" pos:column="16">String</name></type> <name pos:line="70" pos:column="23">body</name> <init pos:line="70" pos:column="28">= <expr><call><name><name pos:line="70" pos:column="30">copy</name><op:operator pos:line="70" pos:column="34">.</op:operator><name pos:line="70" pos:column="35">ToString</name></name><argument_list pos:line="70" pos:column="43">()</argument_list></call></expr></init></decl>;</decl_stmt>
               <decl_stmt><decl><type><name pos:line="71" pos:column="16">int</name></type> <name pos:line="71" pos:column="20">line</name> <init pos:line="71" pos:column="25">= <expr><call><name pos:line="71" pos:column="27">GetLineNumber</name><argument_list pos:line="71" pos:column="40">(<argument><expr><name pos:line="71" pos:column="41">original</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
               <decl_stmt><decl><type><name pos:line="72" pos:column="16">int</name></type> <name pos:line="72" pos:column="20">columnn</name> <init pos:line="72" pos:column="28">= <expr><call><name pos:line="72" pos:column="30">GetColumnNumber</name><argument_list pos:line="72" pos:column="45">(<argument><expr><name pos:line="72" pos:column="46">original</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
               <decl_stmt><decl><type><name pos:line="73" pos:column="16">String</name></type> <name pos:line="73" pos:column="23">snippet</name> <init pos:line="73" pos:column="31">= <expr><call><name pos:line="73" pos:column="33">GetSnippet</name><argument_list pos:line="73" pos:column="43">(<argument><expr><name pos:line="73" pos:column="44">copy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

               <expr_stmt><expr><call><name><name pos:line="75" pos:column="16">list</name><op:operator pos:line="75" pos:column="20">.</op:operator><name pos:line="75" pos:column="21">Add</name></name><argument_list pos:line="75" pos:column="24">(<argument><expr><op:operator pos:line="75" pos:column="25">new</op:operator> <call><name pos:line="75" pos:column="29">XmlXElement</name><argument_list pos:line="75" pos:column="40">(<argument><expr><name pos:line="75" pos:column="41">name</name></expr></argument>, <argument><expr><name pos:line="75" pos:column="47">body</name></expr></argument>, <argument><expr><name pos:line="75" pos:column="53">line</name></expr></argument>, <argument><expr><name pos:line="75" pos:column="59">columnn</name></expr></argument>, <argument><expr><name pos:line="75" pos:column="68">fileName</name></expr></argument>, <argument><expr><name pos:line="75" pos:column="78">snippet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           }</block></foreach>
           <return pos:line="77" pos:column="12">return <expr><name pos:line="77" pos:column="19">list</name></expr>;</return>
       }</block></function>
 



        <function><type><specifier pos:line="83" pos:column="9">private</specifier> <name pos:line="83" pos:column="17">void</name></type> <name pos:line="83" pos:column="22">ControlElement</name><parameter_list pos:line="83" pos:column="36">(<param><decl><type><name pos:line="83" pos:column="37">XElement</name></type> <name pos:line="83" pos:column="46">root</name></decl></param>, <param><decl><type><name pos:line="83" pos:column="52">XElement</name></type> <name pos:line="83" pos:column="61">currentElement</name></decl></param>)</parameter_list>
        <block pos:line="84" pos:column="9">{
            <if pos:line="85" pos:column="13">if <condition pos:line="85" pos:column="16">(<expr><call><name pos:line="85" pos:column="17">GetLineLength</name><argument_list pos:line="85" pos:column="30">(<argument><expr><name pos:line="85" pos:column="31">root</name></expr></argument>)</argument_list></call> <op:operator pos:line="85" pos:column="37">&gt;</op:operator> <name pos:line="85" pos:column="39">LengthLimit</name></expr>)</condition><then pos:line="85" pos:column="51">
            <block pos:line="86" pos:column="13">{
                <if pos:line="87" pos:column="17">if <condition pos:line="87" pos:column="20">(<expr><op:operator pos:line="87" pos:column="21">!</op:operator><call><name pos:line="87" pos:column="22">HasGrandChildren</name><argument_list pos:line="87" pos:column="38">(<argument><expr><name pos:line="87" pos:column="39">currentElement</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="87" pos:column="55">
                <block pos:line="88" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="89" pos:column="21">currentElement</name><op:operator pos:line="89" pos:column="35">.</op:operator><name pos:line="89" pos:column="36">ReplaceWith</name></name><argument_list pos:line="89" pos:column="47">(<argument><expr><call><name pos:line="89" pos:column="48">CreateEntirelyFoldedElement</name><argument_list pos:line="89" pos:column="75">(<argument><expr><name pos:line="89" pos:column="76">currentElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return pos:line="90" pos:column="21">return;</return>
                }</block></then></if>
                <decl_stmt><decl><type><name pos:line="92" pos:column="17">var</name></type> <name pos:line="92" pos:column="21">children</name> <init pos:line="92" pos:column="30">= <expr><call><name><name pos:line="92" pos:column="32">currentElement</name><op:operator pos:line="92" pos:column="46">.</op:operator><name pos:line="92" pos:column="47">Elements</name></name><argument_list pos:line="92" pos:column="55">()</argument_list></call><op:operator pos:line="92" pos:column="57">.</op:operator><call><name pos:line="92" pos:column="58">ToArray</name><argument_list pos:line="92" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for pos:line="93" pos:column="17">for (<init><decl><type><name pos:line="93" pos:column="22">int</name></type> <name pos:line="93" pos:column="26">i</name> <init pos:line="93" pos:column="28">= <expr><call><name><name pos:line="93" pos:column="30">children</name><op:operator pos:line="93" pos:column="38">.</op:operator><name pos:line="93" pos:column="39">Count</name></name><argument_list pos:line="93" pos:column="44">()</argument_list></call> <op:operator pos:line="93" pos:column="47">-</op:operator> <lit:literal type="number" pos:line="93" pos:column="49">1</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="93" pos:column="52">i</name> <op:operator pos:line="93" pos:column="54">&gt;=</op:operator> <lit:literal type="number" pos:line="93" pos:column="57">0</lit:literal></expr>;</condition> <incr><expr><name pos:line="93" pos:column="60">i</name><op:operator pos:line="93" pos:column="61">--</op:operator></expr></incr>)
                <block pos:line="94" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="95" pos:column="21">var</name></type> <name pos:line="95" pos:column="25">child</name> <init pos:line="95" pos:column="31">= <expr><call><name><name pos:line="95" pos:column="33">children</name><op:operator pos:line="95" pos:column="41">.</op:operator><name pos:line="95" pos:column="42">ElementAt</name></name><argument_list pos:line="95" pos:column="51">(<argument><expr><name pos:line="95" pos:column="52">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name pos:line="96" pos:column="21">ControlElement</name><argument_list pos:line="96" pos:column="35">(<argument><expr><name pos:line="96" pos:column="36">root</name></expr></argument>, <argument><expr><name pos:line="96" pos:column="42">child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if pos:line="97" pos:column="21">if <condition pos:line="97" pos:column="24">(<expr><call><name pos:line="97" pos:column="25">GetLineLength</name><argument_list pos:line="97" pos:column="38">(<argument><expr><name pos:line="97" pos:column="39">root</name></expr></argument>)</argument_list></call> <op:operator pos:line="97" pos:column="45">&lt;=</op:operator> <name pos:line="97" pos:column="48">LengthLimit</name></expr>)</condition><then pos:line="97" pos:column="60"> <return pos:line="97" pos:column="61">return;</return></then></if>
                }</block></for>
                <expr_stmt><expr><call><name><name pos:line="99" pos:column="17">currentElement</name><op:operator pos:line="99" pos:column="31">.</op:operator><name pos:line="99" pos:column="32">ReplaceWith</name></name><argument_list pos:line="99" pos:column="43">(<argument><expr><call><name pos:line="99" pos:column="44">CreateEntirelyFoldedElement</name><argument_list pos:line="99" pos:column="71">(<argument><expr><name pos:line="99" pos:column="72">currentElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>


        <function><type><specifier pos:line="104" pos:column="9">private</specifier> <name pos:line="104" pos:column="17">bool</name></type> <name pos:line="104" pos:column="22">HasGrandChildren</name><parameter_list pos:line="104" pos:column="38">(<param><decl><type><name pos:line="104" pos:column="39">XElement</name></type> <name pos:line="104" pos:column="48">element</name></decl></param>)</parameter_list>
        <block pos:line="105" pos:column="9">{
            <return pos:line="106" pos:column="13">return <expr><call><name><name pos:line="106" pos:column="20">element</name><op:operator pos:line="106" pos:column="27">.</op:operator><name pos:line="106" pos:column="28">Elements</name></name><argument_list pos:line="106" pos:column="36">()</argument_list></call><op:operator pos:line="106" pos:column="38">.</op:operator><call><name pos:line="106" pos:column="39">SelectMany</name><argument_list pos:line="106" pos:column="49">(<argument><expr><lambda><name pos:line="106" pos:column="50">e</name> <op:operator pos:line="106" pos:column="52">=&gt;</op:operator> <call><name><name pos:line="106" pos:column="55">e</name><op:operator pos:line="106" pos:column="56">.</op:operator><name pos:line="106" pos:column="57">Elements</name></name><argument_list pos:line="106" pos:column="65">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="106" pos:column="68">.</op:operator><call><name pos:line="106" pos:column="69">Any</name><argument_list pos:line="106" pos:column="72">()</argument_list></call></expr>;</return>
        }</block></function>


        <comment type="line" pos:line="110" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="111" pos:column="9">/// Map an element to its exact counterpart in another copy of the root.</comment>
        <comment type="line" pos:line="112" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="113" pos:column="9">/// &lt;param name="element"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="114" pos:column="9">/// &lt;param name="root"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="115" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="116" pos:column="9">private</specifier> <name pos:line="116" pos:column="17">XElement</name></type> <name pos:line="116" pos:column="26">MapNodeToRoot</name><parameter_list pos:line="116" pos:column="39">(<param><decl><type><name pos:line="116" pos:column="40">XElement</name></type> <name pos:line="116" pos:column="49">element</name></decl></param>, <param><decl><type><name pos:line="116" pos:column="58">XElement</name></type> <name pos:line="116" pos:column="67">root</name></decl></param>)</parameter_list>
        <block pos:line="117" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="118" pos:column="13">int</name></type> <name pos:line="118" pos:column="17">layer</name> <init pos:line="118" pos:column="23">= <expr><call><name pos:line="118" pos:column="25">GetXElementLayer</name><argument_list pos:line="118" pos:column="41">(<argument><expr><name pos:line="118" pos:column="42">element</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="119" pos:column="13">int</name></type> <name pos:line="119" pos:column="17">index</name> <init pos:line="119" pos:column="23">= <expr><call><name pos:line="119" pos:column="25">GetIndexAmongLayer</name><argument_list pos:line="119" pos:column="43">(<argument><expr><name pos:line="119" pos:column="44">element</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="120" pos:column="13">return <expr><call><name pos:line="120" pos:column="20">GetXElementByLayerAndIndex</name><argument_list pos:line="120" pos:column="46">(<argument><expr><name pos:line="120" pos:column="47">root</name></expr></argument>, <argument><expr><name pos:line="120" pos:column="53">layer</name></expr></argument>, <argument><expr><name pos:line="120" pos:column="60">index</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="123" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="124" pos:column="9">/// Get the starting line number of an element.</comment>
        <comment type="line" pos:line="125" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="126" pos:column="9">/// &lt;param name="element"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="127" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="128" pos:column="9">private</specifier> <specifier pos:line="128" pos:column="17">static</specifier> <name pos:line="128" pos:column="24">int</name></type> <name pos:line="128" pos:column="28">GetLineNumber</name><parameter_list pos:line="128" pos:column="41">(<param><decl><type><name pos:line="128" pos:column="42">XElement</name></type> <name pos:line="128" pos:column="51">element</name></decl></param>)</parameter_list>
        <block pos:line="129" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="130" pos:column="13">var</name></type> <name pos:line="130" pos:column="17">lineInfo</name> <init pos:line="130" pos:column="26">= <expr><name pos:line="130" pos:column="28">element</name> <op:operator pos:line="130" pos:column="36">as</op:operator> <name pos:line="130" pos:column="39">IXmlLineInfo</name></expr></init></decl>;</decl_stmt>
            <if pos:line="131" pos:column="13">if <condition pos:line="131" pos:column="16">(<expr><name pos:line="131" pos:column="17">lineInfo</name> <op:operator pos:line="131" pos:column="26">!=</op:operator> <name pos:line="131" pos:column="29">null</name></expr>)</condition><then pos:line="131" pos:column="34">
            <block pos:line="132" pos:column="13">{
                <return pos:line="133" pos:column="17">return <expr><name><name pos:line="133" pos:column="24">lineInfo</name><op:operator pos:line="133" pos:column="32">.</op:operator><name pos:line="133" pos:column="33">LineNumber</name></name></expr>;</return>
            }</block></then></if>
            <throw pos:line="135" pos:column="13">throw <expr><op:operator pos:line="135" pos:column="19">new</op:operator> <call><name pos:line="135" pos:column="23">Exception</name><argument_list pos:line="135" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="135" pos:column="33">"Cannot get starting line number."</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></function>

        <comment type="line" pos:line="138" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="139" pos:column="9">/// Get the column number of an XML element.</comment>
        <comment type="line" pos:line="140" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="141" pos:column="9">/// &lt;param name="element"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="142" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="143" pos:column="9">private</specifier> <specifier pos:line="143" pos:column="17">static</specifier> <name pos:line="143" pos:column="24">int</name></type> <name pos:line="143" pos:column="28">GetColumnNumber</name><parameter_list pos:line="143" pos:column="43">(<param><decl><type><name pos:line="143" pos:column="44">XElement</name></type> <name pos:line="143" pos:column="53">element</name></decl></param>)</parameter_list>
        <block pos:line="144" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="145" pos:column="13">var</name></type> <name pos:line="145" pos:column="17">lineInfo</name> <init pos:line="145" pos:column="26">= <expr><name pos:line="145" pos:column="28">element</name> <op:operator pos:line="145" pos:column="36">as</op:operator> <name pos:line="145" pos:column="39">IXmlLineInfo</name></expr></init></decl>;</decl_stmt>
            <if pos:line="146" pos:column="13">if <condition pos:line="146" pos:column="16">(<expr><name pos:line="146" pos:column="17">lineInfo</name> <op:operator pos:line="146" pos:column="26">!=</op:operator> <name pos:line="146" pos:column="29">null</name></expr>)</condition><then pos:line="146" pos:column="34">
            <block pos:line="147" pos:column="13">{
                <return pos:line="148" pos:column="17">return <expr><name><name pos:line="148" pos:column="24">lineInfo</name><op:operator pos:line="148" pos:column="32">.</op:operator><name pos:line="148" pos:column="33">LinePosition</name></name></expr>;</return>
            }</block></then></if>
            <throw pos:line="150" pos:column="13">throw <expr><op:operator pos:line="150" pos:column="19">new</op:operator> <call><name pos:line="150" pos:column="23">Exception</name><argument_list pos:line="150" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="150" pos:column="33">"Cannot get column number."</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></function>



        <comment type="line" pos:line="155" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="156" pos:column="9">/// Given an xml element, checking whether its lenght exceeds @LengthLimit; if it does,</comment>
        <comment type="line" pos:line="157" pos:column="9">/// folding part of it to a fake node containing only its local name; Keep doing so until</comment>
        <comment type="line" pos:line="158" pos:column="9">/// the element's length is in the limit.</comment>
        <comment type="line" pos:line="159" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="160" pos:column="9">/// &lt;param name="element"&gt;&lt;/param&gt;</comment>
        <function><type><specifier pos:line="161" pos:column="9">private</specifier> <name pos:line="161" pos:column="17">void</name></type> <name pos:line="161" pos:column="22">FoldingElement</name><parameter_list pos:line="161" pos:column="36">(<param><decl><type><name pos:line="161" pos:column="37">XElement</name></type> <name pos:line="161" pos:column="46">element</name></decl></param>)</parameter_list>
        <block pos:line="162" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="163" pos:column="13">var</name></type> <name pos:line="163" pos:column="17">it</name> <init pos:line="163" pos:column="20">= <expr><op:operator pos:line="163" pos:column="22">new</op:operator> <call><name pos:line="163" pos:column="26">ExpandingCountsIterator</name><argument_list pos:line="163" pos:column="49">(<argument><expr><name pos:line="163" pos:column="50">element</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <while pos:line="164" pos:column="13">while <condition pos:line="164" pos:column="19">(<expr><call><name><name pos:line="164" pos:column="20">it</name><op:operator pos:line="164" pos:column="22">.</op:operator><name pos:line="164" pos:column="23">HasNextCounts</name></name><argument_list pos:line="164" pos:column="36">()</argument_list></call></expr>)</condition>
            <block pos:line="165" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="166" pos:column="17">var</name></type> <name pos:line="166" pos:column="21">expandingCounts</name> <init pos:line="166" pos:column="37">= <expr><call><name><name pos:line="166" pos:column="39">it</name><op:operator pos:line="166" pos:column="41">.</op:operator><name pos:line="166" pos:column="42">GetNextCounts</name></name><argument_list pos:line="166" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <comment type="line" pos:line="167" pos:column="17">// LocalFileWriter.write(it.ConvertCountsToString(expandingCounts));</comment>
                <expr_stmt><expr><call><name pos:line="168" pos:column="17">FoldingXml</name><argument_list pos:line="168" pos:column="27">(<argument><expr><name pos:line="168" pos:column="28">element</name></expr></argument>, <argument><expr><lambda><name pos:line="168" pos:column="37">e</name> <op:operator pos:line="168" pos:column="39">=&gt;</op:operator> <call><name pos:line="168" pos:column="42">IsXElementFolding</name><argument_list pos:line="168" pos:column="59">(<argument><expr><name pos:line="168" pos:column="60">e</name></expr></argument>, <argument><expr><name pos:line="168" pos:column="63">expandingCounts</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="169" pos:column="17">if <condition pos:line="169" pos:column="20">(<expr><call><name pos:line="169" pos:column="21">GetLineLength</name><argument_list pos:line="169" pos:column="34">(<argument><expr><name pos:line="169" pos:column="35">element</name></expr></argument>)</argument_list></call> <op:operator pos:line="169" pos:column="44">&lt;</op:operator> <name pos:line="169" pos:column="46">LengthLimit</name></expr>)</condition><then pos:line="169" pos:column="58">
                    <return pos:line="170" pos:column="21">return;</return></then></if>
            }</block></while>
        }</block></function>

        <function><type><specifier pos:line="174" pos:column="9">private</specifier> <name pos:line="174" pos:column="17">XElement</name></type> <name pos:line="174" pos:column="26">ParseXmlRoot</name><parameter_list pos:line="174" pos:column="38">(<param><decl><type><name pos:line="174" pos:column="39">String</name></type> <name pos:line="174" pos:column="46">source</name></decl></param>)</parameter_list>
        <block pos:line="175" pos:column="9">{
            <return pos:line="176" pos:column="13">return <expr><call><name><name pos:line="176" pos:column="20">XDocument</name><op:operator pos:line="176" pos:column="29">.</op:operator><name pos:line="176" pos:column="30">Parse</name></name><argument_list pos:line="176" pos:column="35">(<argument><expr><name pos:line="176" pos:column="36">source</name></expr></argument>, <argument><expr><name><name pos:line="176" pos:column="44">LoadOptions</name><op:operator pos:line="176" pos:column="55">.</op:operator><name pos:line="176" pos:column="56">SetLineInfo</name></name> <op:operator pos:line="176" pos:column="68">|</op:operator> 
                <name><name pos:line="177" pos:column="17">LoadOptions</name><op:operator pos:line="177" pos:column="28">.</op:operator><name pos:line="177" pos:column="29">PreserveWhitespace</name></name></expr></argument>)</argument_list></call><op:operator pos:line="177" pos:column="48">.</op:operator><name pos:line="177" pos:column="49">Root</name></expr>;</return>
        }</block></function>
        <comment type="line" pos:line="179" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="180" pos:column="9">/// Given an xml element, this class keeps track of the decendant that should be folded.</comment>
        <comment type="line" pos:line="181" pos:column="9">/// The initial state is that all decendents are expanded; while the final state is no decendant of</comment>
        <comment type="line" pos:line="182" pos:column="9">/// the element is expanded.</comment>
        <comment type="line" pos:line="183" pos:column="9">/// &lt;/summary&gt;</comment>
        <class><specifier pos:line="184" pos:column="9">private</specifier> class <name pos:line="184" pos:column="23">ExpandingCountsIterator</name>
        <block pos:line="185" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="186" pos:column="13">private</specifier> <specifier pos:line="186" pos:column="21">readonly</specifier> <name pos:line="186" pos:column="30">XElement</name></type> <name pos:line="186" pos:column="39">element</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="187" pos:column="13">private</specifier> <specifier pos:line="187" pos:column="21">readonly</specifier> <name pos:line="187" pos:column="30">XElement</name></type> <name pos:line="187" pos:column="39">root</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="188" pos:column="13">private</specifier> <specifier pos:line="188" pos:column="21">readonly</specifier> <name><name pos:line="188" pos:column="30">List</name><argument_list pos:line="188" pos:column="34">&lt;<argument><name pos:line="188" pos:column="35">int</name></argument>&gt;</argument_list></name></type> <name pos:line="188" pos:column="40">finalExpandingCounts</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="189" pos:column="13">private</specifier> <name><name pos:line="189" pos:column="21">List</name><argument_list pos:line="189" pos:column="25">&lt;<argument><name pos:line="189" pos:column="26">int</name></argument>&gt;</argument_list></name></type> <name pos:line="189" pos:column="31">nextExpandingCounts</name></decl>;</decl_stmt>

            <constructor><specifier pos:line="191" pos:column="13">public</specifier> <name pos:line="191" pos:column="20">ExpandingCountsIterator</name><parameter_list pos:line="191" pos:column="43">(<param><decl><type><name pos:line="191" pos:column="44">XElement</name></type> <name pos:line="191" pos:column="53">element</name></decl></param>)</parameter_list>
            <block pos:line="192" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="193" pos:column="17">this</name><op:operator pos:line="193" pos:column="21">.</op:operator><name pos:line="193" pos:column="22">element</name></name> <op:operator pos:line="193" pos:column="30">=</op:operator> <name pos:line="193" pos:column="32">element</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="194" pos:column="17">this</name><op:operator pos:line="194" pos:column="21">.</op:operator><name pos:line="194" pos:column="22">root</name></name> <op:operator pos:line="194" pos:column="27">=</op:operator> <call><name pos:line="194" pos:column="29">GetRoot</name><argument_list pos:line="194" pos:column="36">(<argument><expr><name pos:line="194" pos:column="37">element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="195" pos:column="17">this</name><op:operator pos:line="195" pos:column="21">.</op:operator><name pos:line="195" pos:column="22">finalExpandingCounts</name></name> <op:operator pos:line="195" pos:column="43">=</op:operator> <call><name pos:line="195" pos:column="45">GetFinalExpandingCounts</name><argument_list pos:line="195" pos:column="68">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="196" pos:column="17">this</name><op:operator pos:line="196" pos:column="21">.</op:operator><name pos:line="196" pos:column="22">nextExpandingCounts</name></name> <op:operator pos:line="196" pos:column="42">=</op:operator> <call><name pos:line="196" pos:column="44">GetInitialExpandingCounts</name><argument_list pos:line="196" pos:column="69">()</argument_list></call></expr>;</expr_stmt>
            }</block></constructor>


            <function><type><specifier pos:line="200" pos:column="13">private</specifier> <name><name pos:line="200" pos:column="21">List</name><argument_list pos:line="200" pos:column="25">&lt;<argument><name pos:line="200" pos:column="26">int</name></argument>&gt;</argument_list></name></type> <name pos:line="200" pos:column="31">GetInitialExpandingCounts</name><parameter_list pos:line="200" pos:column="56">()</parameter_list>
            <block pos:line="201" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="202" pos:column="17">var</name></type> <name pos:line="202" pos:column="21">indexes</name> <init pos:line="202" pos:column="29">= <expr><call><name pos:line="202" pos:column="31">GetFinalExpandingCounts</name><argument_list pos:line="202" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for pos:line="203" pos:column="17">for (<init><decl><type><name pos:line="203" pos:column="22">var</name></type> <name pos:line="203" pos:column="26">layer</name> <init pos:line="203" pos:column="32">= <expr><call><name pos:line="203" pos:column="34">GetXElementLayer</name><argument_list pos:line="203" pos:column="50">(<argument><expr><name pos:line="203" pos:column="51">element</name></expr></argument>)</argument_list></call> <op:operator pos:line="203" pos:column="60">+</op:operator> <lit:literal type="number" pos:line="203" pos:column="62">1</lit:literal></expr></init></decl>;</init> <condition><expr><call><name pos:line="203" pos:column="65">GetXElementsAtLayer</name><argument_list pos:line="203" pos:column="84">(<argument><expr><name pos:line="203" pos:column="85">root</name></expr></argument>, <argument><expr><name pos:line="203" pos:column="91">layer</name></expr></argument>)</argument_list></call><op:operator pos:line="203" pos:column="97">.</op:operator>
                    <name pos:line="204" pos:column="21">Count</name> <op:operator pos:line="204" pos:column="27">&gt;</op:operator> <lit:literal type="number" pos:line="204" pos:column="29">0</lit:literal></expr>;</condition> <incr><expr><name pos:line="204" pos:column="32">layer</name><op:operator pos:line="204" pos:column="37">++</op:operator></expr></incr>)
                <block pos:line="205" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="206" pos:column="21">indexes</name><op:operator pos:line="206" pos:column="28">.</op:operator><name pos:line="206" pos:column="29">Add</name></name><argument_list pos:line="206" pos:column="32">(<argument><expr><call><name pos:line="206" pos:column="33">GetXElementsAtLayer</name><argument_list pos:line="206" pos:column="52">(<argument><expr><name pos:line="206" pos:column="53">root</name></expr></argument>, <argument><expr><name pos:line="206" pos:column="59">layer</name></expr></argument>)</argument_list></call><op:operator pos:line="206" pos:column="65">.</op:operator><name pos:line="206" pos:column="66">Count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
                <return pos:line="208" pos:column="17">return <expr><name pos:line="208" pos:column="24">indexes</name></expr>;</return>
            }</block></function>

            <function><type><specifier pos:line="211" pos:column="13">private</specifier> <name><name pos:line="211" pos:column="21">List</name><argument_list pos:line="211" pos:column="25">&lt;<argument><name pos:line="211" pos:column="26">int</name></argument>&gt;</argument_list></name></type> <name pos:line="211" pos:column="31">GetFinalExpandingCounts</name><parameter_list pos:line="211" pos:column="54">()</parameter_list>
            <block pos:line="212" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="213" pos:column="17">var</name></type> <name pos:line="213" pos:column="21">indexes</name> <init pos:line="213" pos:column="29">= <expr><call><name pos:line="213" pos:column="31">GetXElementIndex</name><argument_list pos:line="213" pos:column="47">(<argument><expr><name pos:line="213" pos:column="48">element</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <for pos:line="214" pos:column="17">for (<init><decl><type><name pos:line="214" pos:column="22">int</name></type> <name pos:line="214" pos:column="26">i</name> <init pos:line="214" pos:column="28">= <expr><lit:literal type="number" pos:line="214" pos:column="30">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="214" pos:column="33">i</name> <op:operator pos:line="214" pos:column="35">&lt;</op:operator> <name><name pos:line="214" pos:column="37">indexes</name><op:operator pos:line="214" pos:column="44">.</op:operator><name pos:line="214" pos:column="45">Count</name></name></expr>;</condition> <incr><expr><name pos:line="214" pos:column="52">i</name><op:operator pos:line="214" pos:column="53">++</op:operator></expr></incr>)
                <block pos:line="215" pos:column="17">{
                    <expr_stmt><expr><name><name pos:line="216" pos:column="21">indexes</name><index pos:line="216" pos:column="28">[<expr><name pos:line="216" pos:column="29">i</name></expr>]</index></name><op:operator pos:line="216" pos:column="31">++</op:operator></expr>;</expr_stmt>
                }</block></for>
                <return pos:line="218" pos:column="17">return <expr><name pos:line="218" pos:column="24">indexes</name></expr>;</return>
            }</block></function>

            <function><type><specifier pos:line="221" pos:column="13">private</specifier> <name><name pos:line="221" pos:column="21">List</name><argument_list pos:line="221" pos:column="25">&lt;<argument><name pos:line="221" pos:column="26">int</name></argument>&gt;</argument_list></name></type> <name pos:line="221" pos:column="31">CalculateNextExpandingCounts</name><parameter_list pos:line="221" pos:column="59">()</parameter_list>
            <block pos:line="222" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="223" pos:column="17">var</name></type> <name pos:line="223" pos:column="21">newCounts</name> <init pos:line="223" pos:column="31">= <expr><op:operator pos:line="223" pos:column="33">new</op:operator> <call><name><name pos:line="223" pos:column="37">List</name><argument_list pos:line="223" pos:column="41">&lt;<argument><name pos:line="223" pos:column="42">int</name></argument>&gt;</argument_list></name><argument_list pos:line="223" pos:column="46">(<argument><expr><name pos:line="223" pos:column="47">nextExpandingCounts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="224" pos:column="17">if <condition pos:line="224" pos:column="20">(<expr><call><name><name pos:line="224" pos:column="21">newCounts</name><op:operator pos:line="224" pos:column="30">.</op:operator><name pos:line="224" pos:column="31">Last</name></name><argument_list pos:line="224" pos:column="35">()</argument_list></call> <op:operator pos:line="224" pos:column="38">&gt;</op:operator> <lit:literal type="number" pos:line="224" pos:column="40">1</lit:literal></expr>)</condition><then pos:line="224" pos:column="42">
                <block pos:line="225" pos:column="17">{
                    <expr_stmt><expr><name><name pos:line="226" pos:column="21">newCounts</name><index pos:line="226" pos:column="30">[<expr><name><name pos:line="226" pos:column="31">newCounts</name><op:operator pos:line="226" pos:column="40">.</op:operator><name pos:line="226" pos:column="41">Count</name></name> <op:operator pos:line="226" pos:column="47">-</op:operator> <lit:literal type="number" pos:line="226" pos:column="49">1</lit:literal></expr>]</index></name><op:operator pos:line="226" pos:column="51">--</op:operator></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="228" pos:column="17">else
                <block pos:line="229" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="230" pos:column="21">newCounts</name><op:operator pos:line="230" pos:column="30">.</op:operator><name pos:line="230" pos:column="31">RemoveAt</name></name><argument_list pos:line="230" pos:column="39">(<argument><expr><name><name pos:line="230" pos:column="40">newCounts</name><op:operator pos:line="230" pos:column="49">.</op:operator><name pos:line="230" pos:column="50">Count</name></name> <op:operator pos:line="230" pos:column="56">-</op:operator> <lit:literal type="number" pos:line="230" pos:column="58">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <return pos:line="232" pos:column="17">return <expr><name pos:line="232" pos:column="24">newCounts</name></expr>;</return>
            }</block></function>

            <function><type><specifier pos:line="235" pos:column="13">public</specifier> <name pos:line="235" pos:column="20">Boolean</name></type> <name pos:line="235" pos:column="28">HasNextCounts</name><parameter_list pos:line="235" pos:column="41">()</parameter_list>
            <block pos:line="236" pos:column="13">{
                <if pos:line="237" pos:column="17">if <condition pos:line="237" pos:column="20">(<expr><name><name pos:line="237" pos:column="21">nextExpandingCounts</name><op:operator pos:line="237" pos:column="40">.</op:operator><name pos:line="237" pos:column="41">Count</name></name> <op:operator pos:line="237" pos:column="47">==</op:operator> <name><name pos:line="237" pos:column="50">finalExpandingCounts</name><op:operator pos:line="237" pos:column="70">.</op:operator><name pos:line="237" pos:column="71">Count</name></name></expr>)</condition><then pos:line="237" pos:column="77">
                <block pos:line="238" pos:column="17">{
                    <return pos:line="239" pos:column="21">return <expr><call><name><name pos:line="239" pos:column="28">nextExpandingCounts</name><op:operator pos:line="239" pos:column="47">.</op:operator><name pos:line="239" pos:column="48">Last</name></name><argument_list pos:line="239" pos:column="52">()</argument_list></call> <op:operator pos:line="239" pos:column="55">==</op:operator> <call><name><name pos:line="239" pos:column="58">finalExpandingCounts</name><op:operator pos:line="239" pos:column="78">.</op:operator><name pos:line="239" pos:column="79">Last</name></name><argument_list pos:line="239" pos:column="83">()</argument_list></call></expr>;</return>
                }</block></then></if>
                <return pos:line="241" pos:column="17">return <expr><lit:literal type="boolean" pos:line="241" pos:column="24">true</lit:literal></expr>;</return>
            }</block></function>

            <function><type><specifier pos:line="244" pos:column="13">public</specifier> <name><name pos:line="244" pos:column="20">List</name><argument_list pos:line="244" pos:column="24">&lt;<argument><name pos:line="244" pos:column="25">int</name></argument>&gt;</argument_list></name></type> <name pos:line="244" pos:column="30">GetNextCounts</name><parameter_list pos:line="244" pos:column="43">()</parameter_list>
            <block pos:line="245" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="246" pos:column="17">var</name></type> <name pos:line="246" pos:column="21">result</name> <init pos:line="246" pos:column="28">= <expr><op:operator pos:line="246" pos:column="30">new</op:operator> <call><name><name pos:line="246" pos:column="34">List</name><argument_list pos:line="246" pos:column="38">&lt;<argument><name pos:line="246" pos:column="39">int</name></argument>&gt;</argument_list></name><argument_list pos:line="246" pos:column="43">(<argument><expr><name pos:line="246" pos:column="44">nextExpandingCounts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name pos:line="247" pos:column="17">nextExpandingCounts</name> <op:operator pos:line="247" pos:column="37">=</op:operator> <call><name pos:line="247" pos:column="39">CalculateNextExpandingCounts</name><argument_list pos:line="247" pos:column="67">()</argument_list></call></expr>;</expr_stmt>
                <return pos:line="248" pos:column="17">return <expr><name pos:line="248" pos:column="24">result</name></expr>;</return>
            }</block></function>

            <function><type><specifier pos:line="251" pos:column="13">public</specifier> <name pos:line="251" pos:column="20">String</name></type> <name pos:line="251" pos:column="27">ConvertCountsToString</name><parameter_list pos:line="251" pos:column="48">(<param><decl><type><name><name pos:line="251" pos:column="49">IEnumerable</name><argument_list pos:line="251" pos:column="60">&lt;<argument><name pos:line="251" pos:column="61">int</name></argument>&gt;</argument_list></name></type> <name pos:line="251" pos:column="66">counts</name></decl></param>)</parameter_list>
            <block pos:line="252" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="253" pos:column="17">var</name></type> <name pos:line="253" pos:column="21">sb</name> <init pos:line="253" pos:column="24">= <expr><op:operator pos:line="253" pos:column="26">new</op:operator> <call><name pos:line="253" pos:column="30">StringBuilder</name><argument_list pos:line="253" pos:column="43">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <foreach pos:line="254" pos:column="17">foreach (<init><decl><type><name pos:line="254" pos:column="26">var</name></type> <name pos:line="254" pos:column="30">count</name> <range pos:line="254" pos:column="36">in <expr><name pos:line="254" pos:column="39">counts</name></expr></range></decl></init>)
                <block pos:line="255" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="256" pos:column="21">sb</name><op:operator pos:line="256" pos:column="23">.</op:operator><name pos:line="256" pos:column="24">Append</name></name><argument_list pos:line="256" pos:column="30">(<argument><expr><name pos:line="256" pos:column="31">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>
                <return pos:line="258" pos:column="17">return <expr><call><name><name pos:line="258" pos:column="24">sb</name><op:operator pos:line="258" pos:column="26">.</op:operator><name pos:line="258" pos:column="27">ToString</name></name><argument_list pos:line="258" pos:column="35">()</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class>
    
        <comment type="line" pos:line="262" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="263" pos:column="9">/// Given a xml node and its decendents that should be folded, the method updates</comment>
        <comment type="line" pos:line="264" pos:column="9">/// the node accordingly.</comment>
        <comment type="line" pos:line="265" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="266" pos:column="9">/// &lt;param name="parent"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="267" pos:column="9">/// &lt;param name="isFolding"&gt;&lt;/param&gt;</comment>
        <function><type><specifier pos:line="268" pos:column="9">private</specifier> <name pos:line="268" pos:column="17">void</name></type> <name pos:line="268" pos:column="22">FoldingXml</name><parameter_list pos:line="268" pos:column="32">(<param><decl><type><name pos:line="268" pos:column="33">XElement</name></type> <name pos:line="268" pos:column="42">parent</name></decl></param>, <param><decl><type><name><name pos:line="268" pos:column="50">Predicate</name><argument_list pos:line="268" pos:column="59">&lt;<argument><name pos:line="268" pos:column="60">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="268" pos:column="70">isFolding</name></decl></param>)</parameter_list>
        <block pos:line="269" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="270" pos:column="13">var</name></type> <name pos:line="270" pos:column="17">children</name> <init pos:line="270" pos:column="26">= <expr><call><name pos:line="270" pos:column="28">GetChildrenXElements</name><argument_list pos:line="270" pos:column="48">(<argument><expr><name pos:line="270" pos:column="49">parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="271" pos:column="13">children</name><op:operator pos:line="271" pos:column="21">.</op:operator><name pos:line="271" pos:column="22">Reverse</name></name><argument_list pos:line="271" pos:column="29">()</argument_list></call></expr>;</expr_stmt>
            <foreach pos:line="272" pos:column="13">foreach (<init><decl><type><name pos:line="272" pos:column="22">var</name></type> <name pos:line="272" pos:column="26">child</name> <range pos:line="272" pos:column="32">in <expr><name pos:line="272" pos:column="35">children</name></expr></range></decl></init>)
            <block pos:line="273" pos:column="13">{
                <expr_stmt><expr><call><name pos:line="274" pos:column="17">FoldingXml</name><argument_list pos:line="274" pos:column="27">(<argument><expr><name pos:line="274" pos:column="28">child</name></expr></argument>, <argument><expr><name pos:line="274" pos:column="35">isFolding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
           
            <if pos:line="277" pos:column="13">if <condition pos:line="277" pos:column="16">(<expr><call><name><name pos:line="277" pos:column="17">isFolding</name><op:operator pos:line="277" pos:column="26">.</op:operator><name pos:line="277" pos:column="27">Invoke</name></name><argument_list pos:line="277" pos:column="33">(<argument><expr><name pos:line="277" pos:column="34">parent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="277" pos:column="42">
                <expr_stmt><expr><call><name><name pos:line="278" pos:column="17">parent</name><op:operator pos:line="278" pos:column="23">.</op:operator><name pos:line="278" pos:column="24">ReplaceWith</name></name><argument_list pos:line="278" pos:column="35">(<argument><expr><call><name pos:line="278" pos:column="36">CreateEntirelyFoldedElement</name><argument_list pos:line="278" pos:column="63">(<argument><expr><name pos:line="278" pos:column="64">parent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></function>

        <function><type><specifier pos:line="281" pos:column="9">private</specifier> <name pos:line="281" pos:column="17">XElement</name></type> <name pos:line="281" pos:column="26">CreateEntirelyFoldedElement</name><parameter_list pos:line="281" pos:column="53">(<param><decl><type><name pos:line="281" pos:column="54">XElement</name></type> <name pos:line="281" pos:column="63">element</name></decl></param>)</parameter_list>
        <block pos:line="282" pos:column="9">{
            <return pos:line="283" pos:column="13">return <expr><op:operator pos:line="283" pos:column="20">new</op:operator> <call><name pos:line="283" pos:column="24">XElement</name><argument_list pos:line="283" pos:column="32">(<argument><expr><name><name pos:line="283" pos:column="33">element</name><op:operator pos:line="283" pos:column="40">.</op:operator><name pos:line="283" pos:column="41">Name</name><op:operator pos:line="283" pos:column="45">.</op:operator><name pos:line="283" pos:column="46">LocalName</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="286" pos:column="9">private</specifier> <name pos:line="286" pos:column="17">Boolean</name></type> <name pos:line="286" pos:column="25">IsXElementFolding</name><parameter_list pos:line="286" pos:column="42">(<param><decl><type><name pos:line="286" pos:column="43">XElement</name></type> <name pos:line="286" pos:column="52">element</name></decl></param>, <param><decl><type><name><name pos:line="286" pos:column="61">IEnumerable</name><argument_list pos:line="286" pos:column="72">&lt;<argument><name pos:line="286" pos:column="73">int</name></argument>&gt;</argument_list></name></type> 
            <name pos:line="287" pos:column="13">expandedChildrenCounts</name></decl></param>)</parameter_list>
        <block pos:line="288" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="289" pos:column="13">var</name></type> <name pos:line="289" pos:column="17">indexes</name> <init pos:line="289" pos:column="25">= <expr><call><name pos:line="289" pos:column="27">GetXElementIndex</name><argument_list pos:line="289" pos:column="43">(<argument><expr><name pos:line="289" pos:column="44">element</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for pos:line="290" pos:column="13">for (<init><decl><type><name pos:line="290" pos:column="18">int</name></type> <name pos:line="290" pos:column="22">i</name> <init pos:line="290" pos:column="24">= <expr><lit:literal type="number" pos:line="290" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="290" pos:column="29">i</name> <op:operator pos:line="290" pos:column="31">&lt;</op:operator> <call><name><name pos:line="290" pos:column="33">indexes</name><op:operator pos:line="290" pos:column="40">.</op:operator><name pos:line="290" pos:column="41">Count</name></name><argument_list pos:line="290" pos:column="46">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="290" pos:column="50">i</name> <op:operator pos:line="290" pos:column="52">++</op:operator></expr></incr>)
            <block pos:line="291" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="292" pos:column="17">int</name></type> <name pos:line="292" pos:column="21">index</name> <init pos:line="292" pos:column="27">= <expr><call><name><name pos:line="292" pos:column="29">indexes</name><op:operator pos:line="292" pos:column="36">.</op:operator><name pos:line="292" pos:column="37">ElementAt</name></name><argument_list pos:line="292" pos:column="46">(<argument><expr><name pos:line="292" pos:column="47">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="293" pos:column="17">int</name></type> <name pos:line="293" pos:column="21">bound</name> <init pos:line="293" pos:column="27">= <expr><call><name><name pos:line="293" pos:column="29">expandedChildrenCounts</name><op:operator pos:line="293" pos:column="51">.</op:operator><name pos:line="293" pos:column="52">Count</name></name><argument_list pos:line="293" pos:column="57">()</argument_list></call> <op:operator pos:line="293" pos:column="60">&gt;</op:operator> <name pos:line="293" pos:column="62">i</name> <op:operator pos:line="293" pos:column="64">?</op:operator> 
                    <call><name><name pos:line="294" pos:column="21">expandedChildrenCounts</name><op:operator pos:line="294" pos:column="43">.</op:operator><name pos:line="294" pos:column="44">ElementAt</name></name><argument_list pos:line="294" pos:column="53">(<argument><expr><name pos:line="294" pos:column="54">i</name></expr></argument>)</argument_list></call> <op:operator pos:line="294" pos:column="57">:</op:operator> <name><name pos:line="294" pos:column="59">int</name><op:operator pos:line="294" pos:column="62">.</op:operator><name pos:line="294" pos:column="63">MinValue</name></name></expr></init></decl>;</decl_stmt>
                <if pos:line="295" pos:column="17">if <condition pos:line="295" pos:column="20">(<expr><name pos:line="295" pos:column="21">index</name> <op:operator pos:line="295" pos:column="27">&gt;=</op:operator> <name pos:line="295" pos:column="30">bound</name></expr>)</condition><then pos:line="295" pos:column="36">
                    <return pos:line="296" pos:column="21">return <expr><lit:literal type="boolean" pos:line="296" pos:column="28">true</lit:literal></expr>;</return></then></if>
            }</block></for>
            <return pos:line="298" pos:column="13">return <expr><lit:literal type="boolean" pos:line="298" pos:column="20">false</lit:literal></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="301" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="302" pos:column="9">/// Given an XElement, the method gets its indexes in every layer.</comment>
        <comment type="line" pos:line="303" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="304" pos:column="9">/// &lt;param name="element"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="305" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="306" pos:column="9">private</specifier> <specifier pos:line="306" pos:column="17">static</specifier> <name><name pos:line="306" pos:column="24">List</name><argument_list pos:line="306" pos:column="28">&lt;<argument><name pos:line="306" pos:column="29">int</name></argument>&gt;</argument_list></name></type> <name pos:line="306" pos:column="34">GetXElementIndex</name><parameter_list pos:line="306" pos:column="50">(<param><decl><type><name pos:line="306" pos:column="51">XElement</name></type> <name pos:line="306" pos:column="60">element</name></decl></param>)</parameter_list>
        <block pos:line="307" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="308" pos:column="13">var</name></type> <name pos:line="308" pos:column="17">index</name> <init pos:line="308" pos:column="23">= <expr><op:operator pos:line="308" pos:column="25">new</op:operator> <call><name><name pos:line="308" pos:column="29">List</name><argument_list pos:line="308" pos:column="33">&lt;<argument><name pos:line="308" pos:column="34">int</name></argument>&gt;</argument_list></name><argument_list pos:line="308" pos:column="38">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for pos:line="309" pos:column="13">for (<init pos:line="309" pos:column="18">;</init> <condition><expr><name pos:line="309" pos:column="20">element</name> <op:operator pos:line="309" pos:column="28">!=</op:operator> <name pos:line="309" pos:column="31">null</name></expr>;</condition> <incr><expr><name pos:line="309" pos:column="37">element</name> <op:operator pos:line="309" pos:column="45">=</op:operator> <name><name pos:line="309" pos:column="47">element</name><op:operator pos:line="309" pos:column="54">.</op:operator><name pos:line="309" pos:column="55">Parent</name></name></expr></incr> )
            <block pos:line="310" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="311" pos:column="17">index</name><op:operator pos:line="311" pos:column="22">.</op:operator><name pos:line="311" pos:column="23">Insert</name></name><argument_list pos:line="311" pos:column="29">(<argument><expr><lit:literal type="number" pos:line="311" pos:column="30">0</lit:literal></expr></argument>, <argument><expr><call><name pos:line="311" pos:column="33">GetIndexAmongLayer</name><argument_list pos:line="311" pos:column="51">(<argument><expr><name pos:line="311" pos:column="52">element</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <return pos:line="313" pos:column="13">return <expr><call><name><name pos:line="313" pos:column="20">index</name><op:operator pos:line="313" pos:column="25">.</op:operator><name pos:line="313" pos:column="26">ToList</name></name><argument_list pos:line="313" pos:column="32">()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="316" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="317" pos:column="9">/// Given an XElement, this method returns its index among the layer the element</comment>
        <comment type="line" pos:line="318" pos:column="9">/// lies in.</comment>
        <comment type="line" pos:line="319" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="320" pos:column="9">/// &lt;param name="element"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="321" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="322" pos:column="9">private</specifier> <specifier pos:line="322" pos:column="17">static</specifier> <name pos:line="322" pos:column="24">int</name></type> <name pos:line="322" pos:column="28">GetIndexAmongLayer</name><parameter_list pos:line="322" pos:column="46">(<param><decl><type><name pos:line="322" pos:column="47">XElement</name></type> <name pos:line="322" pos:column="56">element</name></decl></param>)</parameter_list>
        <block pos:line="323" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="324" pos:column="13">var</name></type> <name pos:line="324" pos:column="17">layer</name> <init pos:line="324" pos:column="23">= <expr><call><name pos:line="324" pos:column="25">GetXElementLayer</name><argument_list pos:line="324" pos:column="41">(<argument><expr><name pos:line="324" pos:column="42">element</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="325" pos:column="13">var</name></type> <name pos:line="325" pos:column="17">allSiblings</name> <init pos:line="325" pos:column="29">= <expr><call><name pos:line="325" pos:column="31">GetXElementsAtLayer</name><argument_list pos:line="325" pos:column="50">(<argument><expr><call><name pos:line="325" pos:column="51">GetRoot</name><argument_list pos:line="325" pos:column="58">(<argument><expr><name pos:line="325" pos:column="59">element</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="325" pos:column="69">layer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="326" pos:column="13">return <expr><call><name><name pos:line="326" pos:column="20">allSiblings</name><op:operator pos:line="326" pos:column="31">.</op:operator><name pos:line="326" pos:column="32">IndexOf</name></name><argument_list pos:line="326" pos:column="39">(<argument><expr><name pos:line="326" pos:column="40">element</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="329" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="330" pos:column="9">/// Given a layer number, this method retrives all the XElements on that layer.</comment>
        <comment type="line" pos:line="331" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="332" pos:column="9">/// &lt;param name="root"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="333" pos:column="9">/// &lt;param name="layer"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="334" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="335" pos:column="9">private</specifier> <specifier pos:line="335" pos:column="17">static</specifier> <name><name pos:line="335" pos:column="24">List</name><argument_list pos:line="335" pos:column="28">&lt;<argument><name pos:line="335" pos:column="29">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="335" pos:column="39">GetXElementsAtLayer</name><parameter_list pos:line="335" pos:column="58">(<param><decl><type><name pos:line="335" pos:column="59">XElement</name></type> <name pos:line="335" pos:column="68">root</name></decl></param>, <param><decl><type><name pos:line="335" pos:column="74">int</name></type> <name pos:line="335" pos:column="78">layer</name></decl></param>)</parameter_list>
        <block pos:line="336" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="337" pos:column="13">var</name></type> <name pos:line="337" pos:column="17">nodes</name> <init pos:line="337" pos:column="23">= <expr><op:operator pos:line="337" pos:column="25">new</op:operator> <name><name pos:line="337" pos:column="29">List</name><argument_list pos:line="337" pos:column="33">&lt;<argument><name pos:line="337" pos:column="34">XElement</name></argument>&gt;</argument_list></name> <block pos:line="337" pos:column="44">{<expr><name pos:line="337" pos:column="45">root</name></expr>}</block></expr></init></decl>;</decl_stmt>
            <for pos:line="338" pos:column="13">for (<init><decl><type><name pos:line="338" pos:column="18">int</name></type> <name pos:line="338" pos:column="22">i</name> <init pos:line="338" pos:column="24">= <expr><lit:literal type="number" pos:line="338" pos:column="26">1</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="338" pos:column="29">i</name> <op:operator pos:line="338" pos:column="31">&lt;</op:operator> <name pos:line="338" pos:column="33">layer</name></expr>;</condition> <incr><expr><name pos:line="338" pos:column="40">i</name> <op:operator pos:line="338" pos:column="42">++</op:operator></expr></incr>)
            <block pos:line="339" pos:column="13">{
                <expr_stmt><expr><name pos:line="340" pos:column="17">nodes</name> <op:operator pos:line="340" pos:column="23">=</op:operator> <call><name><name pos:line="340" pos:column="25">nodes</name><op:operator pos:line="340" pos:column="30">.</op:operator><name pos:line="340" pos:column="31">SelectMany</name></name><argument_list pos:line="340" pos:column="41">(<argument><expr><name pos:line="340" pos:column="42">GetChildrenXElements</name></expr></argument>)</argument_list></call><op:operator pos:line="340" pos:column="63">.</op:operator><call><name pos:line="340" pos:column="64">ToList</name><argument_list pos:line="340" pos:column="70">()</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <return pos:line="342" pos:column="13">return <expr><name pos:line="342" pos:column="20">nodes</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="345" pos:column="9">private</specifier> <name pos:line="345" pos:column="17">XElement</name></type> <name pos:line="345" pos:column="26">GetXElementByLayerAndIndex</name><parameter_list pos:line="345" pos:column="52">(<param><decl><type><name pos:line="345" pos:column="53">XElement</name></type> <name pos:line="345" pos:column="62">root</name></decl></param>, <param><decl><type><name pos:line="345" pos:column="68">int</name></type> <name pos:line="345" pos:column="72">layer</name></decl></param>, <param><decl><type><name pos:line="345" pos:column="79">int</name></type> <name pos:line="345" pos:column="83">index</name></decl></param>)</parameter_list>
        <block pos:line="346" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="347" pos:column="13">var</name></type> <name pos:line="347" pos:column="17">elements</name> <init pos:line="347" pos:column="26">= <expr><call><name pos:line="347" pos:column="28">GetXElementsAtLayer</name><argument_list pos:line="347" pos:column="47">(<argument><expr><name pos:line="347" pos:column="48">root</name></expr></argument>, <argument><expr><name pos:line="347" pos:column="54">layer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="348" pos:column="13">return <expr><call><name><name pos:line="348" pos:column="20">elements</name><op:operator pos:line="348" pos:column="28">.</op:operator><name pos:line="348" pos:column="29">ElementAt</name></name><argument_list pos:line="348" pos:column="38">(<argument><expr><name pos:line="348" pos:column="39">index</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>


        <comment type="line" pos:line="352" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="353" pos:column="9">/// The model of an xml documents is a tree where the layer is the distance between the</comment>
        <comment type="line" pos:line="354" pos:column="9">/// given node to the very root of the document adding one.</comment>
        <comment type="line" pos:line="355" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="356" pos:column="9">/// &lt;param name="element"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="357" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="358" pos:column="9">private</specifier> <specifier pos:line="358" pos:column="17">static</specifier> <name pos:line="358" pos:column="24">int</name></type> <name pos:line="358" pos:column="28">GetXElementLayer</name><parameter_list pos:line="358" pos:column="44">(<param><decl><type><name pos:line="358" pos:column="45">XElement</name></type> <name pos:line="358" pos:column="54">element</name></decl></param>)</parameter_list>
        <block pos:line="359" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="360" pos:column="13">int</name></type> <name pos:line="360" pos:column="17">layer</name> <init pos:line="360" pos:column="23">= <expr><lit:literal type="number" pos:line="360" pos:column="25">0</lit:literal></expr></init></decl>;</decl_stmt>
            <for pos:line="361" pos:column="13">for (<init><decl><type><name pos:line="361" pos:column="18">XElement</name></type> <name pos:line="361" pos:column="27">parent</name> <init pos:line="361" pos:column="34">= <expr><name pos:line="361" pos:column="36">element</name></expr></init></decl>;</init> <condition><expr><name pos:line="361" pos:column="45">parent</name> <op:operator pos:line="361" pos:column="52">!=</op:operator> <name pos:line="361" pos:column="55">null</name></expr>;</condition> <incr><expr><name pos:line="361" pos:column="61">parent</name> <op:operator pos:line="361" pos:column="68">=</op:operator> <name><name pos:line="361" pos:column="70">parent</name><op:operator pos:line="361" pos:column="76">.</op:operator><name pos:line="361" pos:column="77">Parent</name></name></expr></incr>)
            <block pos:line="362" pos:column="13">{
                <expr_stmt><expr><name pos:line="363" pos:column="17">layer</name> <op:operator pos:line="363" pos:column="23">++</op:operator></expr>;</expr_stmt>
            }</block></for>
            <return pos:line="365" pos:column="13">return <expr><name pos:line="365" pos:column="20">layer</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="368" pos:column="9">private</specifier> <specifier pos:line="368" pos:column="17">static</specifier> <name><name pos:line="368" pos:column="24">List</name><argument_list pos:line="368" pos:column="28">&lt;<argument><name pos:line="368" pos:column="29">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="368" pos:column="39">GetChildrenXElements</name><parameter_list pos:line="368" pos:column="59">(<param><decl><type><name pos:line="368" pos:column="60">XElement</name></type> <name pos:line="368" pos:column="69">parent</name></decl></param>)</parameter_list>
        <block pos:line="369" pos:column="9">{
            <return pos:line="370" pos:column="13">return <expr><call><name><name pos:line="370" pos:column="20">parent</name><op:operator pos:line="370" pos:column="26">.</op:operator><name pos:line="370" pos:column="27">Elements</name></name><argument_list pos:line="370" pos:column="35">()</argument_list></call><op:operator pos:line="370" pos:column="37">.</op:operator><call><name pos:line="370" pos:column="38">ToList</name><argument_list pos:line="370" pos:column="44">()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="373" pos:column="9">private</specifier> <specifier pos:line="373" pos:column="17">static</specifier> <name pos:line="373" pos:column="24">XElement</name></type> <name pos:line="373" pos:column="33">GetRoot</name><parameter_list pos:line="373" pos:column="40">(<param><decl><type><name pos:line="373" pos:column="41">XElement</name></type> <name pos:line="373" pos:column="50">element</name></decl></param>)</parameter_list>
        <block pos:line="374" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="375" pos:column="13">XElement</name></type> <name pos:line="375" pos:column="22">e</name></decl>;</decl_stmt>
            <for pos:line="376" pos:column="13">for (<init><expr><name pos:line="376" pos:column="18">e</name> <op:operator pos:line="376" pos:column="20">=</op:operator> <name pos:line="376" pos:column="22">element</name></expr>;</init> <condition><expr><name><name pos:line="376" pos:column="31">e</name><op:operator pos:line="376" pos:column="32">.</op:operator><name pos:line="376" pos:column="33">Parent</name></name> <op:operator pos:line="376" pos:column="40">!=</op:operator> <name pos:line="376" pos:column="43">null</name></expr>;</condition> <incr><expr><name pos:line="376" pos:column="49">e</name> <op:operator pos:line="376" pos:column="51">=</op:operator> <name><name pos:line="376" pos:column="53">e</name><op:operator pos:line="376" pos:column="54">.</op:operator><name pos:line="376" pos:column="55">Parent</name></name></expr></incr>)<empty_stmt pos:line="376" pos:column="62">;</empty_stmt></for>
            <return pos:line="377" pos:column="13">return <expr><name pos:line="377" pos:column="20">e</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="380" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="381" pos:column="9">/// Given an xml element without folding, the method returns its snippet.</comment>
        <comment type="line" pos:line="382" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="383" pos:column="9">/// &lt;param name="element"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="384" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="385" pos:column="9">private</specifier> <name pos:line="385" pos:column="17">String</name></type> <name pos:line="385" pos:column="24">GetSnippet</name><parameter_list pos:line="385" pos:column="34">(<param><decl><type><name pos:line="385" pos:column="35">XElement</name></type> <name pos:line="385" pos:column="44">element</name></decl></param>)</parameter_list>
        <block pos:line="386" pos:column="9">{
            <return pos:line="387" pos:column="13">return <expr><call><name><name pos:line="387" pos:column="20">element</name><op:operator pos:line="387" pos:column="27">.</op:operator><name pos:line="387" pos:column="28">ToString</name></name><argument_list pos:line="387" pos:column="36">()</argument_list></call></expr>;</return>
        }</block></function>


        <comment type="line" pos:line="391" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="392" pos:column="9">/// Calculate the line count of a given xml element.</comment>
        <comment type="line" pos:line="393" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="394" pos:column="9">/// &lt;param name="element"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="395" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="396" pos:column="9">private</specifier> <name pos:line="396" pos:column="17">int</name></type> <name pos:line="396" pos:column="21">GetLineLength</name><parameter_list pos:line="396" pos:column="34">(<param><decl><type><name pos:line="396" pos:column="35">XElement</name></type> <name pos:line="396" pos:column="44">element</name></decl></param>)</parameter_list>
        <block pos:line="397" pos:column="9">{
            <return pos:line="398" pos:column="13">return <expr><call><name><name pos:line="398" pos:column="20">element</name><op:operator pos:line="398" pos:column="27">.</op:operator><name pos:line="398" pos:column="28">ToString</name></name><argument_list pos:line="398" pos:column="36">()</argument_list></call><op:operator pos:line="398" pos:column="38">.</op:operator><call><name pos:line="398" pos:column="39">Split</name><argument_list pos:line="398" pos:column="44">(<argument><expr><lit:literal type="char" pos:line="398" pos:column="45">'\n'</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="398" pos:column="50">.</op:operator><name pos:line="398" pos:column="51">Length</name></expr>;</return>
        }</block></function>


        <function><type><specifier pos:line="402" pos:column="9">public</specifier> <name><name pos:line="402" pos:column="16">List</name><argument_list pos:line="402" pos:column="20">&lt;<argument><name pos:line="402" pos:column="21">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="402" pos:column="37">Parse</name><parameter_list pos:line="402" pos:column="42">(<param><decl><type><name pos:line="402" pos:column="43">string</name></type> <name pos:line="402" pos:column="50">filename</name></decl></param>)</parameter_list>
        <block pos:line="403" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="404" pos:column="13">var</name></type> <name pos:line="404" pos:column="17">allText</name> <init pos:line="404" pos:column="25">= <expr><call><name><name pos:line="404" pos:column="27">File</name><op:operator pos:line="404" pos:column="31">.</op:operator><name pos:line="404" pos:column="32">ReadAllText</name></name><argument_list pos:line="404" pos:column="43">(<argument><expr><name pos:line="404" pos:column="44">filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="405" pos:column="13">var</name></type> <name pos:line="405" pos:column="17">realRoot</name> <init pos:line="405" pos:column="26">= <expr><call><name pos:line="405" pos:column="28">ParseXmlRoot</name><argument_list pos:line="405" pos:column="40">(<argument><expr><name pos:line="405" pos:column="41">allText</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="406" pos:column="13">return <expr><call><name pos:line="406" pos:column="20">Parse</name><argument_list pos:line="406" pos:column="25">(<argument><expr><name pos:line="406" pos:column="26">filename</name></expr></argument>, <argument><expr><name pos:line="406" pos:column="36">realRoot</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
