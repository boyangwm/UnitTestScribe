<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="D:\Research\Subjects\Sando-master\LIBS\Extensions\inc\office10\msobp.h" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/*------------------------------------------------------------------------------------------

	%%File: msobp.h
	%%Contact: EricFox

	MSO routines for bullet-proofing a document that might be corrupt.  Sniffs out
	corruption and tries to fix it.

------------------------------------------------------------------------------------------*/</comment>

<cpp:pragma pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">pragma</cpp:directive> once</cpp:pragma>

<cpp:ifndef pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">ifndef</cpp:directive> <name pos:line="13" pos:column="9">MSOBP_H</name></cpp:ifndef>
<cpp:define pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="14" pos:column="9">MSOBP_H</name></cpp:macro></cpp:define>


<typedef pos:line="17" pos:column="1">typedef <type><enum pos:line="17" pos:column="9">enum <comment type="line" pos:line="17" pos:column="14">// number of stack levels for Resetting the BPL Error watcher</comment>
	<block pos:line="18" pos:column="9">{
	<decl><name pos:line="19" pos:column="9">bprNil</name> <init pos:line="19" pos:column="16">= <expr><op:operator pos:line="19" pos:column="18">-</op:operator><lit:literal type="number" pos:line="19" pos:column="19">1</lit:literal></expr></init></decl><op:operator pos:line="19" pos:column="20">,</op:operator>
	<decl><name pos:line="20" pos:column="9">bprMax</name> <init pos:line="20" pos:column="16">= <expr><lit:literal type="number" pos:line="20" pos:column="18">4</lit:literal></expr></init></decl>
	}</block></enum></type> <name pos:line="21" pos:column="11">BPR</name>;</typedef>


<typedef pos:line="24" pos:column="1">typedef <type><enum pos:line="24" pos:column="9">enum	<comment type="line" pos:line="24" pos:column="17">// BulletProofing Success Code</comment>
	<block pos:line="25" pos:column="9">{
	<decl><name pos:line="26" pos:column="9">bpscNone</name> <init pos:line="26" pos:column="18">= <expr><lit:literal type="number" pos:line="26" pos:column="20">0</lit:literal></expr></init></decl><op:operator pos:line="26" pos:column="21">,</op:operator>	<comment type="line" pos:line="26" pos:column="25">// no problem</comment>
	<decl><name pos:line="27" pos:column="9">bpscFixed</name></decl><op:operator pos:line="27" pos:column="18">,</op:operator>
	<decl><name pos:line="28" pos:column="9">bpscNotFixed</name></decl><op:operator pos:line="28" pos:column="21">,</op:operator>
	<decl><name pos:line="29" pos:column="9">bpscOOM</name></decl>
	}</block></enum></type> <name pos:line="30" pos:column="11">BPSC</name>;</typedef>


<typedef pos:line="33" pos:column="1">typedef <type><name pos:line="33" pos:column="9">int</name></type> <name pos:line="33" pos:column="13">MSOBPLEK</name>;</typedef>

<cpp:define pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="35" pos:column="9">msobplekNil</name></cpp:macro>               <cpp:value pos:line="35" pos:column="35">0</cpp:value></cpp:define>
<cpp:define pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="36" pos:column="9">msobplekPv</name></cpp:macro>                <cpp:value pos:line="36" pos:column="35">1</cpp:value></cpp:define>
<cpp:define pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="37" pos:column="9">msobplekH</name></cpp:macro>                 <cpp:value pos:line="37" pos:column="35">2</cpp:value></cpp:define>
<cpp:define pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="38" pos:column="9">msobplekPl</name></cpp:macro>                <cpp:value pos:line="38" pos:column="35">3</cpp:value></cpp:define>
<cpp:define pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="39" pos:column="9">msobplekPlc</name></cpp:macro>               <cpp:value pos:line="39" pos:column="35">4</cpp:value></cpp:define>
<cpp:define pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="40" pos:column="9">msobplekSttb</name></cpp:macro>              <cpp:value pos:line="40" pos:column="35">5</cpp:value></cpp:define>
<cpp:define pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="41" pos:column="9">msobplekPcd</name></cpp:macro>               <cpp:value pos:line="41" pos:column="35">6</cpp:value></cpp:define>
<cpp:define pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="42" pos:column="9">msobplekBte</name></cpp:macro>               <cpp:value pos:line="42" pos:column="35">7</cpp:value></cpp:define>
<cpp:define pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="43" pos:column="9">msobplekChp</name></cpp:macro>               <cpp:value pos:line="43" pos:column="35">8</cpp:value></cpp:define>
<cpp:define pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="44" pos:column="9">msobplekPap</name></cpp:macro>               <cpp:value pos:line="44" pos:column="35">9</cpp:value></cpp:define>
<cpp:define pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="45" pos:column="9">msobplekTableProps</name></cpp:macro>        <cpp:value pos:line="45" pos:column="35">10</cpp:value></cpp:define>
<cpp:define pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="46" pos:column="9">msobplekTableChars</name></cpp:macro>        <cpp:value pos:line="46" pos:column="35">11</cpp:value></cpp:define>
<cpp:define pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="47" pos:column="9">msobplekFieldChars</name></cpp:macro>        <cpp:value pos:line="47" pos:column="35">12</cpp:value></cpp:define>
<cpp:define pos:line="48" pos:column="1">#<cpp:directive pos:line="48" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="48" pos:column="9">msobplekLists</name></cpp:macro>             <cpp:value pos:line="48" pos:column="35">13</cpp:value></cpp:define>
<cpp:define pos:line="49" pos:column="1">#<cpp:directive pos:line="49" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="49" pos:column="9">msobplekStyles</name></cpp:macro>            <cpp:value pos:line="49" pos:column="35">14</cpp:value></cpp:define>
<cpp:define pos:line="50" pos:column="1">#<cpp:directive pos:line="50" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="50" pos:column="9">msobplekOleFld</name></cpp:macro>            <cpp:value pos:line="50" pos:column="35">15</cpp:value></cpp:define>
<cpp:define pos:line="51" pos:column="1">#<cpp:directive pos:line="51" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="51" pos:column="9">msobplekOleOcx</name></cpp:macro>            <cpp:value pos:line="51" pos:column="35">16</cpp:value></cpp:define>
<cpp:define pos:line="52" pos:column="1">#<cpp:directive pos:line="52" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="52" pos:column="9">msobplekOleObjd</name></cpp:macro>           <cpp:value pos:line="52" pos:column="35">17</cpp:value></cpp:define>
<cpp:define pos:line="53" pos:column="1">#<cpp:directive pos:line="53" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="53" pos:column="9">msobplekNumberedStyles</name></cpp:macro>    <cpp:value pos:line="53" pos:column="35">18</cpp:value></cpp:define>
<cpp:define pos:line="54" pos:column="1">#<cpp:directive pos:line="54" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="54" pos:column="9">msobplekSections</name></cpp:macro>          <cpp:value pos:line="54" pos:column="35">19</cpp:value></cpp:define>
<cpp:define pos:line="55" pos:column="1">#<cpp:directive pos:line="55" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="55" pos:column="9">msobplekFootnotes</name></cpp:macro>         <cpp:value pos:line="55" pos:column="35">20</cpp:value></cpp:define>
<cpp:define pos:line="56" pos:column="1">#<cpp:directive pos:line="56" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="56" pos:column="9">msobplekEndnotes</name></cpp:macro>          <cpp:value pos:line="56" pos:column="35">21</cpp:value></cpp:define>
<cpp:define pos:line="57" pos:column="1">#<cpp:directive pos:line="57" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="57" pos:column="9">msobplekComments</name></cpp:macro>          <cpp:value pos:line="57" pos:column="35">22</cpp:value></cpp:define>
<cpp:define pos:line="58" pos:column="1">#<cpp:directive pos:line="58" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="58" pos:column="9">msobplekDrawnObjects</name></cpp:macro>      <cpp:value pos:line="58" pos:column="35">23</cpp:value></cpp:define>
<cpp:define pos:line="59" pos:column="1">#<cpp:directive pos:line="59" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="59" pos:column="9">msobplekTextbox</name></cpp:macro>           <cpp:value pos:line="59" pos:column="35">24</cpp:value></cpp:define>
<cpp:define pos:line="60" pos:column="1">#<cpp:directive pos:line="60" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="60" pos:column="9">msobplekFsr</name></cpp:macro>               <cpp:value pos:line="60" pos:column="35">25</cpp:value></cpp:define>
<cpp:define pos:line="61" pos:column="1">#<cpp:directive pos:line="61" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="61" pos:column="9">msobplekRsl</name></cpp:macro>               <cpp:value pos:line="61" pos:column="35">26</cpp:value></cpp:define>
<cpp:define pos:line="62" pos:column="1">#<cpp:directive pos:line="62" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="62" pos:column="9">msobplekUim</name></cpp:macro>               <cpp:value pos:line="62" pos:column="35">27</cpp:value></cpp:define>
<cpp:define pos:line="63" pos:column="1">#<cpp:directive pos:line="63" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="63" pos:column="9">msobplekPictures</name></cpp:macro>          <cpp:value pos:line="63" pos:column="35">28</cpp:value></cpp:define>
<cpp:define pos:line="64" pos:column="1">#<cpp:directive pos:line="64" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="64" pos:column="9">msobplekDivs</name></cpp:macro>              <cpp:value pos:line="64" pos:column="35">29</cpp:value></cpp:define>
<cpp:define pos:line="65" pos:column="1">#<cpp:directive pos:line="65" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="65" pos:column="9">msobplekBookmarks</name></cpp:macro>         <cpp:value pos:line="65" pos:column="35">30</cpp:value></cpp:define>
<cpp:define pos:line="66" pos:column="1">#<cpp:directive pos:line="66" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="66" pos:column="9">msobplekDataRecoveryOpen</name></cpp:macro>  <cpp:value pos:line="66" pos:column="35">31</cpp:value></cpp:define>
<cpp:define pos:line="67" pos:column="1">#<cpp:directive pos:line="67" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="67" pos:column="9">msobplekEscher</name></cpp:macro>            <cpp:value pos:line="67" pos:column="35">32</cpp:value></cpp:define>
<cpp:define pos:line="68" pos:column="1">#<cpp:directive pos:line="68" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="68" pos:column="9">msobplekPx</name></cpp:macro>                <cpp:value pos:line="68" pos:column="35">33</cpp:value></cpp:define>
<cpp:define pos:line="69" pos:column="1">#<cpp:directive pos:line="69" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="69" pos:column="9">msobplekSumInfo</name></cpp:macro>           <cpp:value pos:line="69" pos:column="35">34</cpp:value></cpp:define>
<cpp:define pos:line="70" pos:column="1">#<cpp:directive pos:line="70" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="70" pos:column="9">msobplekLinkedList</name></cpp:macro>        <cpp:value pos:line="70" pos:column="35">35</cpp:value></cpp:define>
<cpp:define pos:line="71" pos:column="1">#<cpp:directive pos:line="71" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="71" pos:column="9">msobplekString</name></cpp:macro>            <cpp:value pos:line="71" pos:column="35">36</cpp:value></cpp:define>
<cpp:define pos:line="72" pos:column="1">#<cpp:directive pos:line="72" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="72" pos:column="9">msobplekHyperlink</name></cpp:macro>         <cpp:value pos:line="72" pos:column="35">37</cpp:value></cpp:define>

<cpp:define pos:line="74" pos:column="1">#<cpp:directive pos:line="74" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="74" pos:column="9">msobplekMax</name></cpp:macro>               <cpp:value pos:line="74" pos:column="35">38</cpp:value></cpp:define>


<typedef pos:line="77" pos:column="1">typedef <function_decl><type><name pos:line="77" pos:column="9">BPSC</name></type> (<type:modifier pos:line="77" pos:column="15">*</type:modifier><name pos:line="77" pos:column="16">PFNBP</name>)<parameter_list pos:line="77" pos:column="22">(<param><decl><type pos:line="77" pos:column="23">struct</type> <name pos:line="77" pos:column="30">_BPL</name> <type:modifier pos:line="77" pos:column="35">*</type:modifier></decl></param>, <param><decl><type><name pos:line="77" pos:column="38">void</name> <type:modifier pos:line="77" pos:column="43">*</type:modifier></type></decl></param>, <param><decl><type pos:line="77" pos:column="46">struct</type> <name pos:line="77" pos:column="53">_SVI</name> <type:modifier pos:line="77" pos:column="58">*</type:modifier></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef pos:line="78" pos:column="1">typedef <type><struct pos:line="78" pos:column="9">struct <name pos:line="78" pos:column="16">_MSOBPCB</name>		<comment type="line" pos:line="78" pos:column="33">// MSO BulletProofing CallBack Block</comment>
	<block pos:line="79" pos:column="9">{<public type="default" pos:line="79" pos:column="10">
	<comment type="line" pos:line="80" pos:column="9">// main BP logging routine</comment>
	<function_decl><type><name pos:line="81" pos:column="9">void</name></type>			(<name pos:line="81" pos:column="34">CALLBACK</name> <type:modifier pos:line="81" pos:column="43">*</type:modifier><name pos:line="81" pos:column="44">pfnLogFixBple</name>)<parameter_list pos:line="81" pos:column="58">(<param><decl><type><name pos:line="81" pos:column="59">BPSC</name> <type:modifier pos:line="81" pos:column="64">*</type:modifier></type><name pos:line="81" pos:column="65">pbsc</name></decl></param>, <param><decl><type pos:line="81" pos:column="71">struct <name pos:line="81" pos:column="78">_BPL</name> <type:modifier pos:line="81" pos:column="83">*</type:modifier></type><name pos:line="81" pos:column="84">pbpl</name></decl></param>, <param><decl><type><name pos:line="81" pos:column="90">MSOBPLEK</name></type> <name pos:line="81" pos:column="99">msobplek</name></decl></param>)</parameter_list>;</function_decl>

	<comment type="line" pos:line="83" pos:column="9">// BPR helper routines</comment>
	<function_decl><type><name pos:line="84" pos:column="9">BPR</name></type>				(<name pos:line="84" pos:column="42">CALLBACK</name> <type:modifier pos:line="84" pos:column="51">*</type:modifier><name pos:line="84" pos:column="52">pfnBprResetBpl</name>)<parameter_list pos:line="84" pos:column="67">(<param><decl><type><name pos:line="84" pos:column="68">void</name> <type:modifier pos:line="84" pos:column="73">*</type:modifier></type><name pos:line="84" pos:column="74">pbpl</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="85" pos:column="9">int</name></type>				(<name pos:line="85" pos:column="42">CALLBACK</name> <type:modifier pos:line="85" pos:column="51">*</type:modifier><name pos:line="85" pos:column="52">pfnFSawErrorBpr</name>)<parameter_list pos:line="85" pos:column="68">(<param><decl><type><name pos:line="85" pos:column="69">void</name> <type:modifier pos:line="85" pos:column="74">*</type:modifier></type><name pos:line="85" pos:column="75">pbpl</name></decl></param>, <param><decl><type><name pos:line="85" pos:column="81">BPR</name></type> <name pos:line="85" pos:column="85">bpr</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="86" pos:column="9">void</name></type>			(<name pos:line="86" pos:column="34">CALLBACK</name> <type:modifier pos:line="86" pos:column="43">*</type:modifier><name pos:line="86" pos:column="44">pfnSawErrorBpl</name>)<parameter_list pos:line="86" pos:column="59">(<param><decl><type><name pos:line="86" pos:column="60">void</name> <type:modifier pos:line="86" pos:column="65">*</type:modifier></type><name pos:line="86" pos:column="66">pbpl</name></decl></param>)</parameter_list>;</function_decl>

	<comment type="line" pos:line="88" pos:column="9">// actual error log</comment>
	<decl_stmt><decl><type pos:line="89" pos:column="9">struct <name pos:line="89" pos:column="16">_BPL</name>		<type:modifier pos:line="89" pos:column="33">*</type:modifier></type><name pos:line="89" pos:column="34">pbpl</name></decl>;</decl_stmt>
	</public>}</block></struct></type> <name pos:line="90" pos:column="11">MSOBPCB</name>;</typedef>


<comment type="line" pos:line="93" pos:column="1">// BPSC handling</comment>
<macro><name pos:line="94" pos:column="1">MSOAPI_</name><argument_list pos:line="94" pos:column="8">(<argument pos:line="94" pos:column="9">void</argument>)</argument_list></macro> <macro><name pos:line="94" pos:column="15">MsoUpdateBpsc</name><argument_list pos:line="94" pos:column="28">(<argument pos:line="94" pos:column="29">BPSC *pbpsc</argument>, <argument pos:line="94" pos:column="42">BPSC bpscNew</argument>)</argument_list></macro><empty_stmt pos:line="94" pos:column="55">;</empty_stmt>

<comment type="line" pos:line="96" pos:column="1">// generic pointer routines</comment>
<macro><name pos:line="97" pos:column="1">MSOAPI_</name><argument_list pos:line="97" pos:column="8">(<argument pos:line="97" pos:column="9">void</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="97" pos:column="15">MsoSetStackLimits</name><argument_list pos:line="97" pos:column="32">(<argument><expr><name pos:line="97" pos:column="33">void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="line" pos:line="97" pos:column="49">//  REVIEW:  PETERO:  Is this a real routine?</comment>
<macro><name pos:line="98" pos:column="1">MSOAPI_</name><argument_list pos:line="98" pos:column="8">(<argument pos:line="98" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="98" pos:column="15">MsoFTestCbPv</name><argument_list pos:line="98" pos:column="27">(<argument pos:line="98" pos:column="28">void *pv</argument>, <argument pos:line="98" pos:column="38">int cb</argument>)</argument_list></macro><empty_stmt pos:line="98" pos:column="45">;</empty_stmt>
<macro><name pos:line="99" pos:column="1">MSOAPI_</name><argument_list pos:line="99" pos:column="8">(<argument pos:line="99" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="99" pos:column="15">MsoFTestCbPvRO</name><argument_list pos:line="99" pos:column="29">(<argument pos:line="99" pos:column="30">const void *pv</argument>, <argument pos:line="99" pos:column="46">int cb</argument>)</argument_list></macro><empty_stmt pos:line="99" pos:column="53">;</empty_stmt>
<macro><name pos:line="100" pos:column="1">MSOAPI_</name><argument_list pos:line="100" pos:column="8">(<argument pos:line="100" pos:column="9">int</argument>)</argument_list></macro> <macro><name pos:line="100" pos:column="14">MsoCbActualFromPv</name><argument_list pos:line="100" pos:column="31">(<argument pos:line="100" pos:column="32">void *pv</argument>, <argument pos:line="100" pos:column="42">int cb</argument>)</argument_list></macro><empty_stmt pos:line="100" pos:column="49">;</empty_stmt>
<macro><name pos:line="101" pos:column="1">MSOAPI_</name><argument_list pos:line="101" pos:column="8">(<argument pos:line="101" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="101" pos:column="15">MsoFEnsureCbPv</name><argument_list pos:line="101" pos:column="29">(<argument pos:line="101" pos:column="30">void **ppv</argument>, <argument pos:line="101" pos:column="42">int cb</argument>)</argument_list></macro><empty_stmt pos:line="101" pos:column="49">;</empty_stmt>
<macro><name pos:line="102" pos:column="1">MSOAPI_</name><argument_list pos:line="102" pos:column="8">(<argument pos:line="102" pos:column="9">BOOL</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="102" pos:column="15">MsoFTestH</name><argument_list pos:line="102" pos:column="24">(<argument><expr><name pos:line="102" pos:column="25">void</name> <op:operator pos:line="102" pos:column="30">*</op:operator><op:operator pos:line="102" pos:column="31">*</op:operator><name pos:line="102" pos:column="32">ppv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name pos:line="103" pos:column="1">MSOAPI_</name><argument_list pos:line="103" pos:column="8">(<argument pos:line="103" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="103" pos:column="15">MsoFTestWz</name><argument_list pos:line="103" pos:column="25">(<argument pos:line="103" pos:column="26">WCHAR *wz</argument>, <argument pos:line="103" pos:column="37">int cwchMaxPossible</argument>)</argument_list></macro><empty_stmt pos:line="103" pos:column="57">;</empty_stmt>
<macro><name pos:line="104" pos:column="1">MSOAPI_</name><argument_list pos:line="104" pos:column="8">(<argument pos:line="104" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="104" pos:column="15">MsoFTestSz</name><argument_list pos:line="104" pos:column="25">(<argument pos:line="104" pos:column="26">char *sz</argument>, <argument pos:line="104" pos:column="36">int cchMaxPossible</argument>)</argument_list></macro><empty_stmt pos:line="104" pos:column="55">;</empty_stmt>
<macro><name pos:line="105" pos:column="1">MSOAPI_</name><argument_list pos:line="105" pos:column="8">(<argument pos:line="105" pos:column="9">BOOL</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="105" pos:column="15">MsoFTestWt</name><argument_list pos:line="105" pos:column="25">(<argument><expr><name pos:line="105" pos:column="26">WCHAR</name> <op:operator pos:line="105" pos:column="32">*</op:operator><name pos:line="105" pos:column="33">wt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name pos:line="106" pos:column="1">MSOAPI_</name><argument_list pos:line="106" pos:column="8">(<argument pos:line="106" pos:column="9">BOOL</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="106" pos:column="15">MsoFTestSt</name><argument_list pos:line="106" pos:column="25">(<argument><expr><name pos:line="106" pos:column="26">char</name> <op:operator pos:line="106" pos:column="31">*</op:operator><name pos:line="106" pos:column="32">st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name pos:line="107" pos:column="1">MSOAPI_</name><argument_list pos:line="107" pos:column="8">(<argument pos:line="107" pos:column="9">BOOL</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="107" pos:column="15">MsoFTestWtz</name><argument_list pos:line="107" pos:column="26">(<argument><expr><name pos:line="107" pos:column="27">WCHAR</name> <op:operator pos:line="107" pos:column="33">*</op:operator><name pos:line="107" pos:column="34">wtz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name pos:line="108" pos:column="1">MSOAPI_</name><argument_list pos:line="108" pos:column="8">(<argument pos:line="108" pos:column="9">BOOL</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="108" pos:column="15">MsoFTestStz</name><argument_list pos:line="108" pos:column="26">(<argument><expr><name pos:line="108" pos:column="27">char</name> <op:operator pos:line="108" pos:column="32">*</op:operator><name pos:line="108" pos:column="33">stz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name pos:line="109" pos:column="1">MSOAPI_</name><argument_list pos:line="109" pos:column="8">(<argument pos:line="109" pos:column="9">BPSC</argument>)</argument_list></macro> <macro><name pos:line="109" pos:column="15">MsoBpscBulletProofPx</name><argument_list pos:line="109" pos:column="35">(<argument pos:line="109" pos:column="36">void *pvPx</argument>, <argument pos:line="109" pos:column="48">void *pmsobpcb</argument>, <argument pos:line="109" pos:column="64">int cb</argument>)</argument_list></macro><empty_stmt pos:line="109" pos:column="71">;</empty_stmt>
<macro><name pos:line="110" pos:column="1">MSOAPI_</name><argument_list pos:line="110" pos:column="8">(<argument pos:line="110" pos:column="9">BPSC</argument>)</argument_list></macro> <macro><name pos:line="110" pos:column="15">MsoBpscBulletProofLinkedList</name><argument_list pos:line="110" pos:column="43">(<argument pos:line="110" pos:column="44">MSOBPCB *pmsobpcb</argument>, <argument pos:line="110" pos:column="63">BYTE **ppbHead</argument>, <argument pos:line="110" pos:column="79">int cb</argument>, <argument pos:line="110" pos:column="87">int bpNext</argument>, <argument pos:line="110" pos:column="99">PFNBP pfnbp</argument>, <argument pos:line="110" pos:column="112">struct _SVI *psvi</argument>)</argument_list></macro><empty_stmt pos:line="110" pos:column="130">;</empty_stmt>

<cpp:endif pos:line="112" pos:column="1">#<cpp:directive pos:line="112" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="112" pos:column="8">// !MSOBP_H</comment>

</unit>
