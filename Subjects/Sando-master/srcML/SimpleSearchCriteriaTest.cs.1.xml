<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Indexer\Indexer.UnitTests\TestFiles\Searching\Criteria\SimpleSearchCriteriaTest.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Diagnostics</name><op:operator pos:line="3" pos:column="25">.</op:operator><name pos:line="3" pos:column="26">Contracts</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Globalization</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Threading</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Lucene</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">Net</name><op:operator pos:line="6" pos:column="17">.</op:operator><name pos:line="6" pos:column="18">Analysis</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Lucene</name><op:operator pos:line="7" pos:column="13">.</op:operator><name pos:line="7" pos:column="14">Net</name><op:operator pos:line="7" pos:column="17">.</op:operator><name pos:line="7" pos:column="18">QueryParsers</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Lucene</name><op:operator pos:line="8" pos:column="13">.</op:operator><name pos:line="8" pos:column="14">Net</name><op:operator pos:line="8" pos:column="17">.</op:operator><name pos:line="8" pos:column="18">Search</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">NUnit</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">Framework</name></name>;</using>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">Sando</name><op:operator pos:line="10" pos:column="12">.</op:operator><name pos:line="10" pos:column="13">Core</name><op:operator pos:line="10" pos:column="17">.</op:operator><name pos:line="10" pos:column="18">Extensions</name></name>;</using>
<using pos:line="11" pos:column="1">using <name><name pos:line="11" pos:column="7">Sando</name><op:operator pos:line="11" pos:column="12">.</op:operator><name pos:line="11" pos:column="13">Core</name><op:operator pos:line="11" pos:column="17">.</op:operator><name pos:line="11" pos:column="18">Tools</name></name>;</using>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">Sando</name><op:operator pos:line="12" pos:column="12">.</op:operator><name pos:line="12" pos:column="13">ExtensionContracts</name><op:operator pos:line="12" pos:column="31">.</op:operator><name pos:line="12" pos:column="32">ProgramElementContracts</name></name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">Sando</name><op:operator pos:line="13" pos:column="12">.</op:operator><name pos:line="13" pos:column="13">Indexer</name><op:operator pos:line="13" pos:column="20">.</op:operator><name pos:line="13" pos:column="21">Documents</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">Sando</name><op:operator pos:line="14" pos:column="12">.</op:operator><name pos:line="14" pos:column="13">Indexer</name><op:operator pos:line="14" pos:column="20">.</op:operator><name pos:line="14" pos:column="21">Searching</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">Sando</name><op:operator pos:line="15" pos:column="12">.</op:operator><name pos:line="15" pos:column="13">Indexer</name><op:operator pos:line="15" pos:column="20">.</op:operator><name pos:line="15" pos:column="21">Searching</name><op:operator pos:line="15" pos:column="30">.</op:operator><name pos:line="15" pos:column="31">Criteria</name></name>;</using>

<namespace pos:line="17" pos:column="1">namespace <name><name pos:line="17" pos:column="11">Sando</name><op:operator pos:line="17" pos:column="16">.</op:operator><name pos:line="17" pos:column="17">Indexer</name><op:operator pos:line="17" pos:column="24">.</op:operator><name pos:line="17" pos:column="25">UnitTests</name><op:operator pos:line="17" pos:column="34">.</op:operator><name pos:line="17" pos:column="35">Searching</name><op:operator pos:line="17" pos:column="44">.</op:operator><name pos:line="17" pos:column="45">Criteria</name></name>
<block pos:line="18" pos:column="1">{
    <class><attribute pos:line="19" pos:column="5">[<expr><name pos:line="19" pos:column="6">TestFixture</name></expr>]</attribute>
	<specifier pos:line="20" pos:column="9">public</specifier> class <name pos:line="20" pos:column="22">SimpleSearchCriteriaTest</name>
	<block pos:line="21" pos:column="9">{
		<function><type><attribute pos:line="22" pos:column="17">[<expr><name pos:line="22" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="23" pos:column="17">public</specifier> <name pos:line="23" pos:column="24">void</name></type> <name pos:line="23" pos:column="29">SimpleSearchCriteria_ToQueryStringCreatesValidQueryStringForEmptySearchCriteria</name><parameter_list pos:line="23" pos:column="108">()</parameter_list>
		<block pos:line="24" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="25" pos:column="25">SearchCriteria</name></type> <name pos:line="25" pos:column="40">simpleSearchCriteria</name> <init pos:line="25" pos:column="61">= <expr><op:operator pos:line="25" pos:column="63">new</op:operator> <call><name pos:line="25" pos:column="67">SimpleSearchCriteria</name><argument_list pos:line="25" pos:column="87">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="26" pos:column="25">string</name></type> <name pos:line="26" pos:column="32">queryString</name> <init pos:line="26" pos:column="44">= <expr><call><name><name pos:line="26" pos:column="46">simpleSearchCriteria</name><op:operator pos:line="26" pos:column="66">.</op:operator><name pos:line="26" pos:column="67">ToQueryString</name></name><argument_list pos:line="26" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="27" pos:column="25">Assert</name><op:operator pos:line="27" pos:column="31">.</op:operator><name pos:line="27" pos:column="32">AreEqual</name></name><argument_list pos:line="27" pos:column="40">(<argument><expr><name pos:line="27" pos:column="41">queryString</name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="54">String</name><op:operator pos:line="27" pos:column="60">.</op:operator><name pos:line="27" pos:column="61">Empty</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="27" pos:column="68">"Created query string is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>
        
        <function><type><attribute pos:line="30" pos:column="9">[<expr><name pos:line="30" pos:column="10">Test</name></expr>]</attribute>
		<specifier pos:line="31" pos:column="17">public</specifier> <name pos:line="31" pos:column="24">void</name></type> <name pos:line="31" pos:column="29">SimpleSearchCriteria_ExactMatchToQueryString</name><parameter_list pos:line="31" pos:column="73">()</parameter_list>
		<block pos:line="32" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="33" pos:column="25">SimpleSearchCriteria</name></type> <name pos:line="33" pos:column="46">simpleSearchCriteria</name> <init pos:line="33" pos:column="67">= <expr><op:operator pos:line="33" pos:column="69">new</op:operator> <call><name pos:line="33" pos:column="73">SimpleSearchCriteria</name><argument_list pos:line="33" pos:column="93">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="34" pos:column="13">simpleSearchCriteria</name><op:operator pos:line="34" pos:column="33">.</op:operator><name pos:line="34" pos:column="34">SearchTerms</name><op:operator pos:line="34" pos:column="45">.</op:operator><name pos:line="34" pos:column="46">Add</name></name><argument_list pos:line="34" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="34" pos:column="50">"\"ServiceLocator.Resolve&lt;DTE2&gt;();\""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="35" pos:column="25">string</name></type> <name pos:line="35" pos:column="32">queryString</name> <init pos:line="35" pos:column="44">= <expr><call><name><name pos:line="35" pos:column="46">simpleSearchCriteria</name><op:operator pos:line="35" pos:column="66">.</op:operator><name pos:line="35" pos:column="67">ToQueryString</name></name><argument_list pos:line="35" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="36" pos:column="13">//     Source:*ServiceLocator.Resolve&lt;DTE2&gt;\(\);*</comment>
            <expr_stmt><expr><call><name><name pos:line="37" pos:column="13">Assert</name><op:operator pos:line="37" pos:column="19">.</op:operator><name pos:line="37" pos:column="20">IsTrue</name></name><argument_list pos:line="37" pos:column="26">(<argument><expr><call><name><name pos:line="37" pos:column="27">queryString</name><op:operator pos:line="37" pos:column="38">.</op:operator><name pos:line="37" pos:column="39">Contains</name></name><argument_list pos:line="37" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="37" pos:column="48">"Source:*ServiceLocator.Resolve&lt;DTE2&gt;\\(\\);*"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="37" pos:column="97">"Created query string is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>


        <function><type><attribute pos:line="41" pos:column="9">[<expr><name pos:line="41" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="42" pos:column="9">public</specifier> <name pos:line="42" pos:column="16">void</name></type> <name pos:line="42" pos:column="21">SimpleSearchCriteria_BasicQueryWeightsInFinnish</name><parameter_list pos:line="42" pos:column="68">()</parameter_list>
        <block pos:line="43" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="44" pos:column="13">SimpleSearchCriteria</name></type> <name pos:line="44" pos:column="34">simpleSearchCriteria</name> <init pos:line="44" pos:column="55">= <expr><op:operator pos:line="44" pos:column="57">new</op:operator> <call><name pos:line="44" pos:column="61">SimpleSearchCriteria</name><argument_list pos:line="44" pos:column="81">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="45" pos:column="13">simpleSearchCriteria</name><op:operator pos:line="45" pos:column="33">.</op:operator><name pos:line="45" pos:column="34">SearchTerms</name><op:operator pos:line="45" pos:column="45">.</op:operator><name pos:line="45" pos:column="46">Add</name></name><argument_list pos:line="45" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="45" pos:column="50">"hi"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="46" pos:column="13">string</name></type> <name pos:line="46" pos:column="20">queryString</name> <init pos:line="46" pos:column="32">= <expr><call><name><name pos:line="46" pos:column="34">simpleSearchCriteria</name><op:operator pos:line="46" pos:column="54">.</op:operator><name pos:line="46" pos:column="55">ToQueryString</name></name><argument_list pos:line="46" pos:column="68">()</argument_list></call></expr></init></decl>;</decl_stmt>            
            <expr_stmt><expr><call><name><name pos:line="47" pos:column="13">Assert</name><op:operator pos:line="47" pos:column="19">.</op:operator><name pos:line="47" pos:column="20">IsTrue</name></name><argument_list pos:line="47" pos:column="26">(<argument><expr><call><name><name pos:line="47" pos:column="27">queryString</name><op:operator pos:line="47" pos:column="38">.</op:operator><name pos:line="47" pos:column="39">Contains</name></name><argument_list pos:line="47" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="47" pos:column="48">"ImplementedInterfaces:hi^0.2 "</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="47" pos:column="82">"Created query string is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="48" pos:column="13">Thread</name><op:operator pos:line="48" pos:column="19">.</op:operator><name pos:line="48" pos:column="20">CurrentThread</name><op:operator pos:line="48" pos:column="33">.</op:operator><name pos:line="48" pos:column="34">CurrentCulture</name></name> <op:operator pos:line="48" pos:column="49">=</op:operator> <call><name><name pos:line="48" pos:column="51">CultureInfo</name><op:operator pos:line="48" pos:column="62">.</op:operator><name pos:line="48" pos:column="63">CreateSpecificCulture</name></name><argument_list pos:line="48" pos:column="84">(<argument><expr><lit:literal type="string" pos:line="48" pos:column="85">"fi-FI"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="49" pos:column="13">Thread</name><op:operator pos:line="49" pos:column="19">.</op:operator><name pos:line="49" pos:column="20">CurrentThread</name><op:operator pos:line="49" pos:column="33">.</op:operator><name pos:line="49" pos:column="34">CurrentUICulture</name></name> <op:operator pos:line="49" pos:column="51">=</op:operator> <op:operator pos:line="49" pos:column="53">new</op:operator> <call><name pos:line="49" pos:column="57">CultureInfo</name><argument_list pos:line="49" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="49" pos:column="69">"fi-FI"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="50" pos:column="13">queryString</name> <op:operator pos:line="50" pos:column="25">=</op:operator> <call><name><name pos:line="50" pos:column="27">simpleSearchCriteria</name><op:operator pos:line="50" pos:column="47">.</op:operator><name pos:line="50" pos:column="48">ToQueryString</name></name><argument_list pos:line="50" pos:column="61">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="51" pos:column="13">Assert</name><op:operator pos:line="51" pos:column="19">.</op:operator><name pos:line="51" pos:column="20">IsTrue</name></name><argument_list pos:line="51" pos:column="26">(<argument><expr><op:operator pos:line="51" pos:column="27">(</op:operator><lit:literal type="number" pos:line="51" pos:column="28">0.2</lit:literal><op:operator pos:line="51" pos:column="31">)</op:operator><op:operator pos:line="51" pos:column="32">.</op:operator><call><name pos:line="51" pos:column="33">ToString</name><argument_list pos:line="51" pos:column="41">()</argument_list></call><op:operator pos:line="51" pos:column="43">.</op:operator><call><name pos:line="51" pos:column="44">Equals</name><argument_list pos:line="51" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="51" pos:column="51">"0,2"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="52" pos:column="13">Assert</name><op:operator pos:line="52" pos:column="19">.</op:operator><name pos:line="52" pos:column="20">IsTrue</name></name><argument_list pos:line="52" pos:column="26">(<argument><expr><call><name><name pos:line="52" pos:column="27">queryString</name><op:operator pos:line="52" pos:column="38">.</op:operator><name pos:line="52" pos:column="39">Contains</name></name><argument_list pos:line="52" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="52" pos:column="48">"ImplementedInterfaces:hi^0.2 "</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="52" pos:column="82">"Created query string is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="55" pos:column="9">[<expr><name pos:line="55" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="56" pos:column="9">public</specifier> <name pos:line="56" pos:column="16">void</name></type> <name pos:line="56" pos:column="21">SimpleSearchCriteria_QuotedToQueryString</name><parameter_list pos:line="56" pos:column="61">()</parameter_list>
        <block pos:line="57" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="58" pos:column="13">SimpleSearchCriteria</name></type> <name pos:line="58" pos:column="34">simpleSearchCriteria</name> <init pos:line="58" pos:column="55">= <expr><op:operator pos:line="58" pos:column="57">new</op:operator> <call><name pos:line="58" pos:column="61">SimpleSearchCriteria</name><argument_list pos:line="58" pos:column="81">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="59" pos:column="13">simpleSearchCriteria</name><op:operator pos:line="59" pos:column="33">.</op:operator><name pos:line="59" pos:column="34">SearchTerms</name><op:operator pos:line="59" pos:column="45">.</op:operator><name pos:line="59" pos:column="46">Add</name></name><argument_list pos:line="59" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="59" pos:column="50">"\"ServiceLocator.Resolve&lt;DTE2&gt;();\""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="60" pos:column="13">string</name></type> <name pos:line="60" pos:column="20">queryString</name> <init pos:line="60" pos:column="32">= <expr><call><name><name pos:line="60" pos:column="34">simpleSearchCriteria</name><op:operator pos:line="60" pos:column="54">.</op:operator><name pos:line="60" pos:column="55">ToQueryString</name></name><argument_list pos:line="60" pos:column="68">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="61" pos:column="13">Assert</name><op:operator pos:line="61" pos:column="19">.</op:operator><name pos:line="61" pos:column="20">IsTrue</name></name><argument_list pos:line="61" pos:column="26">(<argument><expr><call><name><name pos:line="61" pos:column="27">queryString</name><op:operator pos:line="61" pos:column="38">.</op:operator><name pos:line="61" pos:column="39">Contains</name></name><argument_list pos:line="61" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="61" pos:column="48">"Source:*ServiceLocator.Resolve&lt;DTE2&gt;\\(\\);*"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="61" pos:column="97">"Created query string is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="64" pos:column="9">[<expr><name pos:line="64" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="65" pos:column="9">public</specifier> <name pos:line="65" pos:column="16">void</name></type> <name pos:line="65" pos:column="21">SimpleSearchCriteria_QuotedNoWeirdCharsToQueryString</name><parameter_list pos:line="65" pos:column="73">()</parameter_list>
        <block pos:line="66" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="67" pos:column="13">SimpleSearchCriteria</name></type> <name pos:line="67" pos:column="34">simpleSearchCriteria</name> <init pos:line="67" pos:column="55">= <expr><op:operator pos:line="67" pos:column="57">new</op:operator> <call><name pos:line="67" pos:column="61">SimpleSearchCriteria</name><argument_list pos:line="67" pos:column="81">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="68" pos:column="13">simpleSearchCriteria</name><op:operator pos:line="68" pos:column="33">.</op:operator><name pos:line="68" pos:column="34">SearchTerms</name><op:operator pos:line="68" pos:column="45">.</op:operator><name pos:line="68" pos:column="46">Add</name></name><argument_list pos:line="68" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="68" pos:column="50">"\"ServiceLocatorResolve\""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="69" pos:column="13">string</name></type> <name pos:line="69" pos:column="20">queryString</name> <init pos:line="69" pos:column="32">= <expr><call><name><name pos:line="69" pos:column="34">simpleSearchCriteria</name><op:operator pos:line="69" pos:column="54">.</op:operator><name pos:line="69" pos:column="55">ToQueryString</name></name><argument_list pos:line="69" pos:column="68">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="70" pos:column="13">Assert</name><op:operator pos:line="70" pos:column="19">.</op:operator><name pos:line="70" pos:column="20">IsTrue</name></name><argument_list pos:line="70" pos:column="26">(<argument><expr><call><name><name pos:line="70" pos:column="27">queryString</name><op:operator pos:line="70" pos:column="38">.</op:operator><name pos:line="70" pos:column="39">Contains</name></name><argument_list pos:line="70" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="70" pos:column="48">"Source:*ServiceLocatorResolve*"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="70" pos:column="83">"Created query string is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="73" pos:column="9">[<expr><name pos:line="73" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="74" pos:column="9">public</specifier> <name pos:line="74" pos:column="16">void</name></type> <name pos:line="74" pos:column="21">SimpleSearchCriteria_QuotedWithSpaces</name><parameter_list pos:line="74" pos:column="58">()</parameter_list>
        <block pos:line="75" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="76" pos:column="13">SimpleSearchCriteria</name></type> <name pos:line="76" pos:column="34">simpleSearchCriteria</name> <init pos:line="76" pos:column="55">= <expr><op:operator pos:line="76" pos:column="57">new</op:operator> <call><name pos:line="76" pos:column="61">SimpleSearchCriteria</name><argument_list pos:line="76" pos:column="81">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="77" pos:column="13">simpleSearchCriteria</name><op:operator pos:line="77" pos:column="33">.</op:operator><name pos:line="77" pos:column="34">SearchTerms</name><op:operator pos:line="77" pos:column="45">.</op:operator><name pos:line="77" pos:column="46">Add</name></name><argument_list pos:line="77" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="77" pos:column="50">"\"foreach(var term in SearchTerms)\""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="78" pos:column="13">string</name></type> <name pos:line="78" pos:column="20">queryString</name> <init pos:line="78" pos:column="32">= <expr><call><name><name pos:line="78" pos:column="34">simpleSearchCriteria</name><op:operator pos:line="78" pos:column="54">.</op:operator><name pos:line="78" pos:column="55">ToQueryString</name></name><argument_list pos:line="78" pos:column="68">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="79" pos:column="13">Assert</name><op:operator pos:line="79" pos:column="19">.</op:operator><name pos:line="79" pos:column="20">IsTrue</name></name><argument_list pos:line="79" pos:column="26">(<argument><expr><call><name><name pos:line="79" pos:column="27">queryString</name><op:operator pos:line="79" pos:column="38">.</op:operator><name pos:line="79" pos:column="39">Contains</name></name><argument_list pos:line="79" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="79" pos:column="48">"Source:*foreach\\(var?term?in?SearchTerms\\)*"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="79" pos:column="98">"Created query string is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

		<function><type><attribute pos:line="82" pos:column="17">[<expr><name pos:line="82" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="83" pos:column="17">public</specifier> <name pos:line="83" pos:column="24">void</name></type> <name pos:line="83" pos:column="29">SimpleSearchCriteria_ToQueryStringThrowsWhenSearchingByAccessLevelWithNoAccessLevelCriteria</name><parameter_list pos:line="83" pos:column="120">()</parameter_list>
		<block pos:line="84" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="85" pos:column="25">SearchCriteria</name></type> <name pos:line="85" pos:column="40">simpleSearchCriteria</name> <init pos:line="85" pos:column="61">= <expr><op:operator pos:line="85" pos:column="63">new</op:operator> <call><name pos:line="85" pos:column="67">SimpleSearchCriteria</name><argument_list pos:line="85" pos:column="87">()</argument_list></call>
			<block pos:line="86" pos:column="25">{
				<expr><name pos:line="87" pos:column="33">SearchByAccessLevel</name> <op:operator pos:line="87" pos:column="53">=</op:operator> <lit:literal type="boolean" pos:line="87" pos:column="55">true</lit:literal></expr>
			}</block></expr></init></decl>;</decl_stmt>
			<try pos:line="89" pos:column="25">try
			<block pos:line="90" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="91" pos:column="33">string</name></type> <name pos:line="91" pos:column="40">queryString</name> <init pos:line="91" pos:column="52">= <expr><call><name><name pos:line="91" pos:column="54">simpleSearchCriteria</name><op:operator pos:line="91" pos:column="74">.</op:operator><name pos:line="91" pos:column="75">ToQueryString</name></name><argument_list pos:line="91" pos:column="88">()</argument_list></call></expr></init></decl>;</decl_stmt>
			}</block>
			<catch pos:line="93" pos:column="25">catch
			<block pos:line="94" pos:column="25">{
			}</block></catch></try>
			<expr_stmt><expr><call><name><name pos:line="96" pos:column="25">Assert</name><op:operator pos:line="96" pos:column="31">.</op:operator><name pos:line="96" pos:column="32">True</name></name><argument_list pos:line="96" pos:column="36">(<argument><expr><name pos:line="96" pos:column="37">contractFailed</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="96" pos:column="53">"Contract should fail!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="99" pos:column="17">[<expr><name pos:line="99" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="100" pos:column="17">public</specifier> <name pos:line="100" pos:column="24">void</name></type> <name pos:line="100" pos:column="29">SimpleSearchCriteria_ToQueryStringThrowsWhenSearchingByLocationWithNoLocationCriteria</name><parameter_list pos:line="100" pos:column="114">()</parameter_list>
		<block pos:line="101" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="102" pos:column="25">SearchCriteria</name></type> <name pos:line="102" pos:column="40">simpleSearchCriteria</name> <init pos:line="102" pos:column="61">= <expr><op:operator pos:line="102" pos:column="63">new</op:operator> <call><name pos:line="102" pos:column="67">SimpleSearchCriteria</name><argument_list pos:line="102" pos:column="87">()</argument_list></call>
			<block pos:line="103" pos:column="25">{
				<expr><name pos:line="104" pos:column="33">SearchByLocation</name> <op:operator pos:line="104" pos:column="50">=</op:operator> <lit:literal type="boolean" pos:line="104" pos:column="52">true</lit:literal></expr>
			}</block></expr></init></decl>;</decl_stmt>
			<try pos:line="106" pos:column="25">try
			<block pos:line="107" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="108" pos:column="33">string</name></type> <name pos:line="108" pos:column="40">queryString</name> <init pos:line="108" pos:column="52">= <expr><call><name><name pos:line="108" pos:column="54">simpleSearchCriteria</name><op:operator pos:line="108" pos:column="74">.</op:operator><name pos:line="108" pos:column="75">ToQueryString</name></name><argument_list pos:line="108" pos:column="88">()</argument_list></call></expr></init></decl>;</decl_stmt>
			}</block>
			<catch pos:line="110" pos:column="25">catch
			<block pos:line="111" pos:column="25">{
			}</block></catch></try>
			<expr_stmt><expr><call><name><name pos:line="113" pos:column="25">Assert</name><op:operator pos:line="113" pos:column="31">.</op:operator><name pos:line="113" pos:column="32">True</name></name><argument_list pos:line="113" pos:column="36">(<argument><expr><name pos:line="113" pos:column="37">contractFailed</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="113" pos:column="53">"Contract should fail!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="116" pos:column="17">[<expr><name pos:line="116" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="117" pos:column="17">public</specifier> <name pos:line="117" pos:column="24">void</name></type> <name pos:line="117" pos:column="29">SimpleSearchCriteria_ToQueryStringThrowsWhenSearchingByProgramElementTypeWithNoProgramElementTypeCriteria</name><parameter_list pos:line="117" pos:column="134">()</parameter_list>
		<block pos:line="118" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="119" pos:column="25">SearchCriteria</name></type> <name pos:line="119" pos:column="40">simpleSearchCriteria</name> <init pos:line="119" pos:column="61">= <expr><op:operator pos:line="119" pos:column="63">new</op:operator> <call><name pos:line="119" pos:column="67">SimpleSearchCriteria</name><argument_list pos:line="119" pos:column="87">()</argument_list></call>
			<block pos:line="120" pos:column="25">{
				<expr><name pos:line="121" pos:column="33">SearchByProgramElementType</name> <op:operator pos:line="121" pos:column="60">=</op:operator> <lit:literal type="boolean" pos:line="121" pos:column="62">true</lit:literal></expr>
			}</block></expr></init></decl>;</decl_stmt>
			<try pos:line="123" pos:column="25">try
			<block pos:line="124" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="125" pos:column="33">string</name></type> <name pos:line="125" pos:column="40">queryString</name> <init pos:line="125" pos:column="52">= <expr><call><name><name pos:line="125" pos:column="54">simpleSearchCriteria</name><op:operator pos:line="125" pos:column="74">.</op:operator><name pos:line="125" pos:column="75">ToQueryString</name></name><argument_list pos:line="125" pos:column="88">()</argument_list></call></expr></init></decl>;</decl_stmt>
			}</block>
			<catch pos:line="127" pos:column="25">catch
			<block pos:line="128" pos:column="25">{
			}</block></catch></try>
			<expr_stmt><expr><call><name><name pos:line="130" pos:column="25">Assert</name><op:operator pos:line="130" pos:column="31">.</op:operator><name pos:line="130" pos:column="32">True</name></name><argument_list pos:line="130" pos:column="36">(<argument><expr><name pos:line="130" pos:column="37">contractFailed</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="130" pos:column="53">"Contract should fail!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="133" pos:column="17">[<expr><name pos:line="133" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="134" pos:column="17">public</specifier> <name pos:line="134" pos:column="24">void</name></type> <name pos:line="134" pos:column="29">SimpleSearchCriteria_ToQueryStringThrowsWhenSearchingByUsageTypeWithNoUsageTypeCriteria</name><parameter_list pos:line="134" pos:column="116">()</parameter_list>
		<block pos:line="135" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="136" pos:column="25">SearchCriteria</name></type> <name pos:line="136" pos:column="40">simpleSearchCriteria</name> <init pos:line="136" pos:column="61">= <expr><op:operator pos:line="136" pos:column="63">new</op:operator> <call><name pos:line="136" pos:column="67">SimpleSearchCriteria</name><argument_list pos:line="136" pos:column="87">()</argument_list></call>
			<block pos:line="137" pos:column="25">{
				<expr><name pos:line="138" pos:column="33">SearchByUsageType</name> <op:operator pos:line="138" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="138" pos:column="53">true</lit:literal></expr>
			}</block></expr></init></decl>;</decl_stmt>
			<try pos:line="140" pos:column="25">try
			<block pos:line="141" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="142" pos:column="33">string</name></type> <name pos:line="142" pos:column="40">queryString</name> <init pos:line="142" pos:column="52">= <expr><call><name><name pos:line="142" pos:column="54">simpleSearchCriteria</name><op:operator pos:line="142" pos:column="74">.</op:operator><name pos:line="142" pos:column="75">ToQueryString</name></name><argument_list pos:line="142" pos:column="88">()</argument_list></call></expr></init></decl>;</decl_stmt>
			}</block>
			<catch pos:line="144" pos:column="25">catch
			<block pos:line="145" pos:column="25">{
			}</block></catch></try>
			<expr_stmt><expr><call><name><name pos:line="147" pos:column="25">Assert</name><op:operator pos:line="147" pos:column="31">.</op:operator><name pos:line="147" pos:column="32">True</name></name><argument_list pos:line="147" pos:column="36">(<argument><expr><name pos:line="147" pos:column="37">contractFailed</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="147" pos:column="53">"Contract should fail!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><attribute pos:line="150" pos:column="17">[<expr><name pos:line="150" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="151" pos:column="17">public</specifier> <name pos:line="151" pos:column="24">void</name></type> <name pos:line="151" pos:column="29">SimpleSearchCriteria_ToQueryStringCreatesValidAccessLevelsQueryString_SingleCondition</name><parameter_list pos:line="151" pos:column="114">()</parameter_list>
		<block pos:line="152" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="153" pos:column="25">SearchCriteria</name></type> <name pos:line="153" pos:column="40">simpleSearchCriteria</name> <init pos:line="153" pos:column="61">= <expr><op:operator pos:line="153" pos:column="63">new</op:operator> <call><name pos:line="153" pos:column="67">SimpleSearchCriteria</name><argument_list pos:line="153" pos:column="87">()</argument_list></call>
													<block pos:line="154" pos:column="105">{
														<expr><name pos:line="155" pos:column="113">SearchByAccessLevel</name> <op:operator pos:line="155" pos:column="133">=</op:operator> <lit:literal type="boolean" pos:line="155" pos:column="135">true</lit:literal></expr>,
														<expr><name pos:line="156" pos:column="113">AccessLevels</name> <op:operator pos:line="156" pos:column="126">=</op:operator> <op:operator pos:line="156" pos:column="128">new</op:operator> <call><name><name pos:line="156" pos:column="132">SortedSet</name><argument_list pos:line="156" pos:column="141">&lt;<argument><name pos:line="156" pos:column="142">AccessLevel</name></argument>&gt;</argument_list></name><argument_list pos:line="156" pos:column="154">()</argument_list></call>
																		<block pos:line="157" pos:column="145">{
																			<expr><name><name pos:line="158" pos:column="153">AccessLevel</name><op:operator pos:line="158" pos:column="164">.</op:operator><name pos:line="158" pos:column="165">Private</name></name></expr>
																		}</block></expr>
													}</block></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="161" pos:column="25">string</name></type> <name pos:line="161" pos:column="32">queryString</name> <init pos:line="161" pos:column="44">= <expr><call><name><name pos:line="161" pos:column="46">simpleSearchCriteria</name><op:operator pos:line="161" pos:column="66">.</op:operator><name pos:line="161" pos:column="67">ToQueryString</name></name><argument_list pos:line="161" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="162" pos:column="25">Assert</name><op:operator pos:line="162" pos:column="31">.</op:operator><name pos:line="162" pos:column="32">AreEqual</name></name><argument_list pos:line="162" pos:column="40">(<argument><expr><name pos:line="162" pos:column="41">queryString</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="162" pos:column="54">"("</lit:literal> <op:operator pos:line="162" pos:column="58">+</op:operator> <call><name><name pos:line="162" pos:column="60">SandoField</name><op:operator pos:line="162" pos:column="70">.</op:operator><name pos:line="162" pos:column="71">AccessLevel</name><op:operator pos:line="162" pos:column="82">.</op:operator><name pos:line="162" pos:column="83">ToString</name></name><argument_list pos:line="162" pos:column="91">()</argument_list></call> <op:operator pos:line="162" pos:column="94">+</op:operator> <lit:literal type="string" pos:line="162" pos:column="96">":private)"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="162" pos:column="109">"Created query string is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<try pos:line="163" pos:column="25">try
			<block pos:line="164" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="165" pos:column="33">Query</name></type> <name pos:line="165" pos:column="39">query</name> <init pos:line="165" pos:column="45">= <expr><op:operator pos:line="165" pos:column="47">new</op:operator> <call><name pos:line="165" pos:column="51">QueryParser</name><argument_list pos:line="165" pos:column="62">(<argument><expr><name><name pos:line="165" pos:column="63">Lucene</name><op:operator pos:line="165" pos:column="69">.</op:operator><name pos:line="165" pos:column="70">Net</name><op:operator pos:line="165" pos:column="73">.</op:operator><name pos:line="165" pos:column="74">Util</name><op:operator pos:line="165" pos:column="78">.</op:operator><name pos:line="165" pos:column="79">Version</name><op:operator pos:line="165" pos:column="86">.</op:operator><name pos:line="165" pos:column="87">LUCENE_29</name></name></expr></argument>, <argument><expr><call><name><name pos:line="165" pos:column="98">SandoField</name><op:operator pos:line="165" pos:column="108">.</op:operator><name pos:line="165" pos:column="109">AccessLevel</name><op:operator pos:line="165" pos:column="120">.</op:operator><name pos:line="165" pos:column="121">ToString</name></name><argument_list pos:line="165" pos:column="129">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="165" pos:column="133">new</op:operator> <call><name pos:line="165" pos:column="137">SimpleAnalyzer</name><argument_list pos:line="165" pos:column="151">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="165" pos:column="154">.</op:operator><call><name pos:line="165" pos:column="155">Parse</name><argument_list pos:line="165" pos:column="160">(<argument><expr><name pos:line="165" pos:column="161">queryString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="166" pos:column="33">Assert</name><op:operator pos:line="166" pos:column="39">.</op:operator><name pos:line="166" pos:column="40">NotNull</name></name><argument_list pos:line="166" pos:column="47">(<argument><expr><name pos:line="166" pos:column="48">query</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="166" pos:column="55">"Generated query object is null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block>
			<catch pos:line="168" pos:column="25">catch<parameter_list pos:line="168" pos:column="30">(<param><decl><type><name pos:line="168" pos:column="31">Exception</name></type> <name pos:line="168" pos:column="41">ex</name></decl></param>)</parameter_list>
			<block pos:line="169" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="170" pos:column="33">Assert</name><op:operator pos:line="170" pos:column="39">.</op:operator><name pos:line="170" pos:column="40">Fail</name></name><argument_list pos:line="170" pos:column="44">(<argument><expr><name><name pos:line="170" pos:column="45">ex</name><op:operator pos:line="170" pos:column="47">.</op:operator><name pos:line="170" pos:column="48">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></function>

		<function><type><attribute pos:line="174" pos:column="17">[<expr><name pos:line="174" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="175" pos:column="17">public</specifier> <name pos:line="175" pos:column="24">void</name></type> <name pos:line="175" pos:column="29">SimpleSearchCriteria_ToQueryStringCreatesValidAccessLevelsQueryString_MultipleConditions</name><parameter_list pos:line="175" pos:column="117">()</parameter_list>
		<block pos:line="176" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="177" pos:column="25">SearchCriteria</name></type> <name pos:line="177" pos:column="40">simpleSearchCriteria</name> <init pos:line="177" pos:column="61">= <expr><op:operator pos:line="177" pos:column="63">new</op:operator> <call><name pos:line="177" pos:column="67">SimpleSearchCriteria</name><argument_list pos:line="177" pos:column="87">()</argument_list></call>
													<block pos:line="178" pos:column="105">{
														<expr><name pos:line="179" pos:column="113">SearchByAccessLevel</name> <op:operator pos:line="179" pos:column="133">=</op:operator> <lit:literal type="boolean" pos:line="179" pos:column="135">true</lit:literal></expr>,
														<expr><name pos:line="180" pos:column="113">AccessLevels</name> <op:operator pos:line="180" pos:column="126">=</op:operator> <op:operator pos:line="180" pos:column="128">new</op:operator> <call><name><name pos:line="180" pos:column="132">SortedSet</name><argument_list pos:line="180" pos:column="141">&lt;<argument><name pos:line="180" pos:column="142">AccessLevel</name></argument>&gt;</argument_list></name><argument_list pos:line="180" pos:column="154">()</argument_list></call>
																		<block pos:line="181" pos:column="145">{
																			<expr><name><name pos:line="182" pos:column="153">AccessLevel</name><op:operator pos:line="182" pos:column="164">.</op:operator><name pos:line="182" pos:column="165">Public</name></name></expr>,
																			<expr><name><name pos:line="183" pos:column="153">AccessLevel</name><op:operator pos:line="183" pos:column="164">.</op:operator><name pos:line="183" pos:column="165">Protected</name></name></expr>
																		}</block></expr>
													}</block></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="186" pos:column="25">string</name></type> <name pos:line="186" pos:column="32">queryString</name> <init pos:line="186" pos:column="44">= <expr><call><name><name pos:line="186" pos:column="46">simpleSearchCriteria</name><op:operator pos:line="186" pos:column="66">.</op:operator><name pos:line="186" pos:column="67">ToQueryString</name></name><argument_list pos:line="186" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="187" pos:column="25">Assert</name><op:operator pos:line="187" pos:column="31">.</op:operator><name pos:line="187" pos:column="32">AreEqual</name></name><argument_list pos:line="187" pos:column="40">(<argument><expr><name pos:line="187" pos:column="41">queryString</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="187" pos:column="54">"("</lit:literal> <op:operator pos:line="187" pos:column="58">+</op:operator> <call><name><name pos:line="187" pos:column="60">SandoField</name><op:operator pos:line="187" pos:column="70">.</op:operator><name pos:line="187" pos:column="71">AccessLevel</name><op:operator pos:line="187" pos:column="82">.</op:operator><name pos:line="187" pos:column="83">ToString</name></name><argument_list pos:line="187" pos:column="91">()</argument_list></call> <op:operator pos:line="187" pos:column="94">+</op:operator> <lit:literal type="string" pos:line="187" pos:column="96">":protected OR "</lit:literal> <op:operator pos:line="187" pos:column="113">+</op:operator> <call><name><name pos:line="187" pos:column="115">SandoField</name><op:operator pos:line="187" pos:column="125">.</op:operator><name pos:line="187" pos:column="126">AccessLevel</name><op:operator pos:line="187" pos:column="137">.</op:operator><name pos:line="187" pos:column="138">ToString</name></name><argument_list pos:line="187" pos:column="146">()</argument_list></call> <op:operator pos:line="187" pos:column="149">+</op:operator> <lit:literal type="string" pos:line="187" pos:column="151">":public)"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="187" pos:column="163">"Created query string is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<try pos:line="188" pos:column="25">try
			<block pos:line="189" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="190" pos:column="33">Query</name></type> <name pos:line="190" pos:column="39">query</name> <init pos:line="190" pos:column="45">= <expr><op:operator pos:line="190" pos:column="47">new</op:operator> <call><name pos:line="190" pos:column="51">QueryParser</name><argument_list pos:line="190" pos:column="62">(<argument><expr><name><name pos:line="190" pos:column="63">Lucene</name><op:operator pos:line="190" pos:column="69">.</op:operator><name pos:line="190" pos:column="70">Net</name><op:operator pos:line="190" pos:column="73">.</op:operator><name pos:line="190" pos:column="74">Util</name><op:operator pos:line="190" pos:column="78">.</op:operator><name pos:line="190" pos:column="79">Version</name><op:operator pos:line="190" pos:column="86">.</op:operator><name pos:line="190" pos:column="87">LUCENE_29</name></name></expr></argument>, <argument><expr><call><name><name pos:line="190" pos:column="98">SandoField</name><op:operator pos:line="190" pos:column="108">.</op:operator><name pos:line="190" pos:column="109">AccessLevel</name><op:operator pos:line="190" pos:column="120">.</op:operator><name pos:line="190" pos:column="121">ToString</name></name><argument_list pos:line="190" pos:column="129">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="190" pos:column="133">new</op:operator> <call><name pos:line="190" pos:column="137">SimpleAnalyzer</name><argument_list pos:line="190" pos:column="151">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="190" pos:column="154">.</op:operator><call><name pos:line="190" pos:column="155">Parse</name><argument_list pos:line="190" pos:column="160">(<argument><expr><name pos:line="190" pos:column="161">queryString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="191" pos:column="33">Assert</name><op:operator pos:line="191" pos:column="39">.</op:operator><name pos:line="191" pos:column="40">NotNull</name></name><argument_list pos:line="191" pos:column="47">(<argument><expr><name pos:line="191" pos:column="48">query</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="191" pos:column="55">"Generated query object is null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block>
			<catch pos:line="193" pos:column="25">catch<parameter_list pos:line="193" pos:column="30">(<param><decl><type><name pos:line="193" pos:column="31">Exception</name></type> <name pos:line="193" pos:column="41">ex</name></decl></param>)</parameter_list>
			<block pos:line="194" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="195" pos:column="33">Assert</name><op:operator pos:line="195" pos:column="39">.</op:operator><name pos:line="195" pos:column="40">Fail</name></name><argument_list pos:line="195" pos:column="44">(<argument><expr><name><name pos:line="195" pos:column="45">ex</name><op:operator pos:line="195" pos:column="47">.</op:operator><name pos:line="195" pos:column="48">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
        }</block></function>

        <function><type><attribute pos:line="199" pos:column="9">[<expr><name pos:line="199" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="200" pos:column="9">public</specifier> <name pos:line="200" pos:column="16">void</name></type> <name pos:line="200" pos:column="21">SimpleSearchCriteria_ToQueryStringCreatesValidFileExtensionsQueryString_SingleCondition</name><parameter_list pos:line="200" pos:column="108">()</parameter_list>
        <block pos:line="201" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="202" pos:column="13">SearchCriteria</name></type> <name pos:line="202" pos:column="28">simpleSearchCriteria</name> <init pos:line="202" pos:column="49">= <expr><op:operator pos:line="202" pos:column="51">new</op:operator> <call><name pos:line="202" pos:column="55">SimpleSearchCriteria</name><argument_list pos:line="202" pos:column="75">()</argument_list></call>
                <block pos:line="203" pos:column="17">{
                    <expr><name pos:line="204" pos:column="21">SearchByFileExtension</name> <op:operator pos:line="204" pos:column="43">=</op:operator> <lit:literal type="boolean" pos:line="204" pos:column="45">true</lit:literal></expr>,
                    <expr><name pos:line="205" pos:column="21">FileExtensions</name> <op:operator pos:line="205" pos:column="36">=</op:operator> <op:operator pos:line="205" pos:column="38">new</op:operator> <name><name pos:line="205" pos:column="42">SortedSet</name><argument_list pos:line="205" pos:column="51">&lt;<argument><name pos:line="205" pos:column="52">string</name></argument>&gt;</argument_list></name>
                        <block pos:line="206" pos:column="25">{
                            <expr><lit:literal type="string" pos:line="207" pos:column="29">".cs"</lit:literal></expr>
                        }</block></expr>
                }</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="210" pos:column="13">var</name></type> <name pos:line="210" pos:column="17">queryString</name> <init pos:line="210" pos:column="29">= <expr><call><name><name pos:line="210" pos:column="31">simpleSearchCriteria</name><op:operator pos:line="210" pos:column="51">.</op:operator><name pos:line="210" pos:column="52">ToQueryString</name></name><argument_list pos:line="210" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="211" pos:column="13">Assert</name><op:operator pos:line="211" pos:column="19">.</op:operator><name pos:line="211" pos:column="20">AreEqual</name></name><argument_list pos:line="211" pos:column="28">(<argument><expr><name pos:line="211" pos:column="29">queryString</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="211" pos:column="42">"("</lit:literal> <op:operator pos:line="211" pos:column="46">+</op:operator> <call><name><name pos:line="211" pos:column="48">SandoField</name><op:operator pos:line="211" pos:column="58">.</op:operator><name pos:line="211" pos:column="59">FileExtension</name><op:operator pos:line="211" pos:column="72">.</op:operator><name pos:line="211" pos:column="73">ToString</name></name><argument_list pos:line="211" pos:column="81">()</argument_list></call> <op:operator pos:line="211" pos:column="84">+</op:operator> <lit:literal type="string" pos:line="211" pos:column="86">":\".cs\")"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="211" pos:column="99">"Created query string is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <try pos:line="212" pos:column="13">try
            <block pos:line="213" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="214" pos:column="17">var</name></type> <name pos:line="214" pos:column="21">query</name> <init pos:line="214" pos:column="27">= <expr><op:operator pos:line="214" pos:column="29">new</op:operator> <call><name pos:line="214" pos:column="33">QueryParser</name><argument_list pos:line="214" pos:column="44">(<argument><expr><name><name pos:line="214" pos:column="45">Lucene</name><op:operator pos:line="214" pos:column="51">.</op:operator><name pos:line="214" pos:column="52">Net</name><op:operator pos:line="214" pos:column="55">.</op:operator><name pos:line="214" pos:column="56">Util</name><op:operator pos:line="214" pos:column="60">.</op:operator><name pos:line="214" pos:column="61">Version</name><op:operator pos:line="214" pos:column="68">.</op:operator><name pos:line="214" pos:column="69">LUCENE_29</name></name></expr></argument>, <argument><expr><call><name><name pos:line="214" pos:column="80">SandoField</name><op:operator pos:line="214" pos:column="90">.</op:operator><name pos:line="214" pos:column="91">FileExtension</name><op:operator pos:line="214" pos:column="104">.</op:operator><name pos:line="214" pos:column="105">ToString</name></name><argument_list pos:line="214" pos:column="113">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="214" pos:column="117">new</op:operator> <call><name pos:line="214" pos:column="121">SimpleAnalyzer</name><argument_list pos:line="214" pos:column="135">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="214" pos:column="138">.</op:operator><call><name pos:line="214" pos:column="139">Parse</name><argument_list pos:line="214" pos:column="144">(<argument><expr><name pos:line="214" pos:column="145">queryString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="215" pos:column="17">Assert</name><op:operator pos:line="215" pos:column="23">.</op:operator><name pos:line="215" pos:column="24">NotNull</name></name><argument_list pos:line="215" pos:column="31">(<argument><expr><name pos:line="215" pos:column="32">query</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="215" pos:column="39">"Generated query object is null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch pos:line="217" pos:column="13">catch <parameter_list pos:line="217" pos:column="19">(<param><decl><type><name pos:line="217" pos:column="20">Exception</name></type> <name pos:line="217" pos:column="30">ex</name></decl></param>)</parameter_list>
            <block pos:line="218" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="219" pos:column="17">Assert</name><op:operator pos:line="219" pos:column="23">.</op:operator><name pos:line="219" pos:column="24">Fail</name></name><argument_list pos:line="219" pos:column="28">(<argument><expr><name><name pos:line="219" pos:column="29">ex</name><op:operator pos:line="219" pos:column="31">.</op:operator><name pos:line="219" pos:column="32">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></function>

        <function><type><attribute pos:line="223" pos:column="9">[<expr><name pos:line="223" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="224" pos:column="9">public</specifier> <name pos:line="224" pos:column="16">void</name></type> <name pos:line="224" pos:column="21">SimpleSearchCriteria_ToQueryStringCreatesFileExtensionsQueryString_MultipleConditions</name><parameter_list pos:line="224" pos:column="106">()</parameter_list>
        <block pos:line="225" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="226" pos:column="13">SearchCriteria</name></type> <name pos:line="226" pos:column="28">simpleSearchCriteria</name> <init pos:line="226" pos:column="49">= <expr><op:operator pos:line="226" pos:column="51">new</op:operator> <call><name pos:line="226" pos:column="55">SimpleSearchCriteria</name><argument_list pos:line="226" pos:column="75">()</argument_list></call>
                <block pos:line="227" pos:column="17">{
                    <expr><name pos:line="228" pos:column="21">SearchByFileExtension</name> <op:operator pos:line="228" pos:column="43">=</op:operator> <lit:literal type="boolean" pos:line="228" pos:column="45">true</lit:literal></expr>,
                    <expr><name pos:line="229" pos:column="21">FileExtensions</name> <op:operator pos:line="229" pos:column="36">=</op:operator> <op:operator pos:line="229" pos:column="38">new</op:operator> <call><name><name pos:line="229" pos:column="42">SortedSet</name><argument_list pos:line="229" pos:column="51">&lt;<argument><name pos:line="229" pos:column="52">string</name></argument>&gt;</argument_list></name><argument_list pos:line="229" pos:column="59">()</argument_list></call>
                        <block pos:line="230" pos:column="25">{
                            <expr><lit:literal type="string" pos:line="231" pos:column="29">".cs"</lit:literal></expr>,
                            <expr><lit:literal type="string" pos:line="232" pos:column="29">".h"</lit:literal></expr>
                        }</block></expr>
                }</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="235" pos:column="13">var</name></type> <name pos:line="235" pos:column="17">queryString</name> <init pos:line="235" pos:column="29">= <expr><call><name><name pos:line="235" pos:column="31">simpleSearchCriteria</name><op:operator pos:line="235" pos:column="51">.</op:operator><name pos:line="235" pos:column="52">ToQueryString</name></name><argument_list pos:line="235" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="236" pos:column="13">Assert</name><op:operator pos:line="236" pos:column="19">.</op:operator><name pos:line="236" pos:column="20">AreEqual</name></name><argument_list pos:line="236" pos:column="28">(<argument><expr><name pos:line="236" pos:column="29">queryString</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="236" pos:column="42">"("</lit:literal> <op:operator pos:line="236" pos:column="46">+</op:operator> <call><name><name pos:line="236" pos:column="48">SandoField</name><op:operator pos:line="236" pos:column="58">.</op:operator><name pos:line="236" pos:column="59">FileExtension</name><op:operator pos:line="236" pos:column="72">.</op:operator><name pos:line="236" pos:column="73">ToString</name></name><argument_list pos:line="236" pos:column="81">()</argument_list></call> <op:operator pos:line="236" pos:column="84">+</op:operator> <lit:literal type="string" pos:line="236" pos:column="86">":\".cs\" OR "</lit:literal> <op:operator pos:line="236" pos:column="101">+</op:operator> <call><name><name pos:line="236" pos:column="103">SandoField</name><op:operator pos:line="236" pos:column="113">.</op:operator><name pos:line="236" pos:column="114">FileExtension</name><op:operator pos:line="236" pos:column="127">.</op:operator><name pos:line="236" pos:column="128">ToString</name></name><argument_list pos:line="236" pos:column="136">()</argument_list></call> <op:operator pos:line="236" pos:column="139">+</op:operator> <lit:literal type="string" pos:line="236" pos:column="141">":\".h\")"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="236" pos:column="153">"Created query string is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <try pos:line="237" pos:column="13">try
            <block pos:line="238" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="239" pos:column="17">var</name></type> <name pos:line="239" pos:column="21">query</name> <init pos:line="239" pos:column="27">= <expr><op:operator pos:line="239" pos:column="29">new</op:operator> <call><name pos:line="239" pos:column="33">QueryParser</name><argument_list pos:line="239" pos:column="44">(<argument><expr><name><name pos:line="239" pos:column="45">Lucene</name><op:operator pos:line="239" pos:column="51">.</op:operator><name pos:line="239" pos:column="52">Net</name><op:operator pos:line="239" pos:column="55">.</op:operator><name pos:line="239" pos:column="56">Util</name><op:operator pos:line="239" pos:column="60">.</op:operator><name pos:line="239" pos:column="61">Version</name><op:operator pos:line="239" pos:column="68">.</op:operator><name pos:line="239" pos:column="69">LUCENE_29</name></name></expr></argument>, <argument><expr><call><name><name pos:line="239" pos:column="80">SandoField</name><op:operator pos:line="239" pos:column="90">.</op:operator><name pos:line="239" pos:column="91">FullFilePath</name><op:operator pos:line="239" pos:column="103">.</op:operator><name pos:line="239" pos:column="104">ToString</name></name><argument_list pos:line="239" pos:column="112">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="239" pos:column="116">new</op:operator> <call><name pos:line="239" pos:column="120">SimpleAnalyzer</name><argument_list pos:line="239" pos:column="134">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="239" pos:column="137">.</op:operator><call><name pos:line="239" pos:column="138">Parse</name><argument_list pos:line="239" pos:column="143">(<argument><expr><name pos:line="239" pos:column="144">queryString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="240" pos:column="17">Assert</name><op:operator pos:line="240" pos:column="23">.</op:operator><name pos:line="240" pos:column="24">NotNull</name></name><argument_list pos:line="240" pos:column="31">(<argument><expr><name pos:line="240" pos:column="32">query</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="240" pos:column="39">"Generated query object is null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch pos:line="242" pos:column="13">catch <parameter_list pos:line="242" pos:column="19">(<param><decl><type><name pos:line="242" pos:column="20">Exception</name></type> <name pos:line="242" pos:column="30">ex</name></decl></param>)</parameter_list>
            <block pos:line="243" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="244" pos:column="17">Assert</name><op:operator pos:line="244" pos:column="23">.</op:operator><name pos:line="244" pos:column="24">Fail</name></name><argument_list pos:line="244" pos:column="28">(<argument><expr><name><name pos:line="244" pos:column="29">ex</name><op:operator pos:line="244" pos:column="31">.</op:operator><name pos:line="244" pos:column="32">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></function>

		<function><type><attribute pos:line="248" pos:column="17">[<expr><name pos:line="248" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="249" pos:column="17">public</specifier> <name pos:line="249" pos:column="24">void</name></type> <name pos:line="249" pos:column="29">SimpleSearchCriteria_ToQueryStringCreatesValidLocationsQueryString_SingleCondition</name><parameter_list pos:line="249" pos:column="111">()</parameter_list>
		<block pos:line="250" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="251" pos:column="25">SearchCriteria</name></type> <name pos:line="251" pos:column="40">simpleSearchCriteria</name> <init pos:line="251" pos:column="61">= <expr><op:operator pos:line="251" pos:column="63">new</op:operator> <call><name pos:line="251" pos:column="67">SimpleSearchCriteria</name><argument_list pos:line="251" pos:column="87">()</argument_list></call>
													<block pos:line="252" pos:column="105">{
														<expr><name pos:line="253" pos:column="113">SearchByLocation</name> <op:operator pos:line="253" pos:column="130">=</op:operator> <lit:literal type="boolean" pos:line="253" pos:column="132">true</lit:literal></expr>,
														<expr><name pos:line="254" pos:column="113">Locations</name> <op:operator pos:line="254" pos:column="123">=</op:operator> <op:operator pos:line="254" pos:column="125">new</op:operator> <call><name><name pos:line="254" pos:column="129">SortedSet</name><argument_list pos:line="254" pos:column="138">&lt;<argument><name pos:line="254" pos:column="139">string</name></argument>&gt;</argument_list></name><argument_list pos:line="254" pos:column="146">()</argument_list></call>
																	<block pos:line="255" pos:column="137">{
																		<expr><lit:literal type="string" pos:line="256" pos:column="145">"C:/Project/*.cs"</lit:literal></expr>
																	}</block></expr>
													}</block></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="259" pos:column="25">string</name></type> <name pos:line="259" pos:column="32">queryString</name> <init pos:line="259" pos:column="44">= <expr><call><name><name pos:line="259" pos:column="46">simpleSearchCriteria</name><op:operator pos:line="259" pos:column="66">.</op:operator><name pos:line="259" pos:column="67">ToQueryString</name></name><argument_list pos:line="259" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="260" pos:column="25">Assert</name><op:operator pos:line="260" pos:column="31">.</op:operator><name pos:line="260" pos:column="32">AreEqual</name></name><argument_list pos:line="260" pos:column="40">(<argument><expr><name pos:line="260" pos:column="41">queryString</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="260" pos:column="54">"("</lit:literal> <op:operator pos:line="260" pos:column="58">+</op:operator> <call><name><name pos:line="260" pos:column="60">SandoField</name><op:operator pos:line="260" pos:column="70">.</op:operator><name pos:line="260" pos:column="71">FullFilePath</name><op:operator pos:line="260" pos:column="83">.</op:operator><name pos:line="260" pos:column="84">ToString</name></name><argument_list pos:line="260" pos:column="92">()</argument_list></call> <op:operator pos:line="260" pos:column="95">+</op:operator> <lit:literal type="string" pos:line="260" pos:column="97">":\"C:/Project/*.cs\")"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="260" pos:column="122">"Created query string is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<try pos:line="261" pos:column="25">try
			<block pos:line="262" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="263" pos:column="33">Query</name></type> <name pos:line="263" pos:column="39">query</name> <init pos:line="263" pos:column="45">= <expr><op:operator pos:line="263" pos:column="47">new</op:operator> <call><name pos:line="263" pos:column="51">QueryParser</name><argument_list pos:line="263" pos:column="62">(<argument><expr><name><name pos:line="263" pos:column="63">Lucene</name><op:operator pos:line="263" pos:column="69">.</op:operator><name pos:line="263" pos:column="70">Net</name><op:operator pos:line="263" pos:column="73">.</op:operator><name pos:line="263" pos:column="74">Util</name><op:operator pos:line="263" pos:column="78">.</op:operator><name pos:line="263" pos:column="79">Version</name><op:operator pos:line="263" pos:column="86">.</op:operator><name pos:line="263" pos:column="87">LUCENE_29</name></name></expr></argument>, <argument><expr><call><name><name pos:line="263" pos:column="98">SandoField</name><op:operator pos:line="263" pos:column="108">.</op:operator><name pos:line="263" pos:column="109">FullFilePath</name><op:operator pos:line="263" pos:column="121">.</op:operator><name pos:line="263" pos:column="122">ToString</name></name><argument_list pos:line="263" pos:column="130">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="263" pos:column="134">new</op:operator> <call><name pos:line="263" pos:column="138">SimpleAnalyzer</name><argument_list pos:line="263" pos:column="152">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="263" pos:column="155">.</op:operator><call><name pos:line="263" pos:column="156">Parse</name><argument_list pos:line="263" pos:column="161">(<argument><expr><name pos:line="263" pos:column="162">queryString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="264" pos:column="33">Assert</name><op:operator pos:line="264" pos:column="39">.</op:operator><name pos:line="264" pos:column="40">NotNull</name></name><argument_list pos:line="264" pos:column="47">(<argument><expr><name pos:line="264" pos:column="48">query</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="264" pos:column="55">"Generated query object is null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block>
			<catch pos:line="266" pos:column="25">catch<parameter_list pos:line="266" pos:column="30">(<param><decl><type><name pos:line="266" pos:column="31">Exception</name></type> <name pos:line="266" pos:column="41">ex</name></decl></param>)</parameter_list>
			<block pos:line="267" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="268" pos:column="33">Assert</name><op:operator pos:line="268" pos:column="39">.</op:operator><name pos:line="268" pos:column="40">Fail</name></name><argument_list pos:line="268" pos:column="44">(<argument><expr><name><name pos:line="268" pos:column="45">ex</name><op:operator pos:line="268" pos:column="47">.</op:operator><name pos:line="268" pos:column="48">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></function>

		<function><type><attribute pos:line="272" pos:column="17">[<expr><name pos:line="272" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="273" pos:column="17">public</specifier> <name pos:line="273" pos:column="24">void</name></type> <name pos:line="273" pos:column="29">SimpleSearchCriteria_ToQueryStringCreatesValidLocationsQueryString_MultipleConditions</name><parameter_list pos:line="273" pos:column="114">()</parameter_list>
		<block pos:line="274" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="275" pos:column="25">SearchCriteria</name></type> <name pos:line="275" pos:column="40">simpleSearchCriteria</name> <init pos:line="275" pos:column="61">= <expr><op:operator pos:line="275" pos:column="63">new</op:operator> <call><name pos:line="275" pos:column="67">SimpleSearchCriteria</name><argument_list pos:line="275" pos:column="87">()</argument_list></call>
													<block pos:line="276" pos:column="105">{
														<expr><name pos:line="277" pos:column="113">SearchByLocation</name> <op:operator pos:line="277" pos:column="130">=</op:operator> <lit:literal type="boolean" pos:line="277" pos:column="132">true</lit:literal></expr>,
														<expr><name pos:line="278" pos:column="113">Locations</name> <op:operator pos:line="278" pos:column="123">=</op:operator> <op:operator pos:line="278" pos:column="125">new</op:operator> <call><name><name pos:line="278" pos:column="129">SortedSet</name><argument_list pos:line="278" pos:column="138">&lt;<argument><name pos:line="278" pos:column="139">string</name></argument>&gt;</argument_list></name><argument_list pos:line="278" pos:column="146">()</argument_list></call>
																	<block pos:line="279" pos:column="137">{
																		<expr><lit:literal type="string" pos:line="280" pos:column="145">"C:/Project/*.cs"</lit:literal></expr>,
																		<expr><lit:literal type="string" pos:line="281" pos:column="145">"C:/Project2/*.cs"</lit:literal></expr>
																	}</block></expr>
													}</block></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="284" pos:column="25">string</name></type> <name pos:line="284" pos:column="32">queryString</name> <init pos:line="284" pos:column="44">= <expr><call><name><name pos:line="284" pos:column="46">simpleSearchCriteria</name><op:operator pos:line="284" pos:column="66">.</op:operator><name pos:line="284" pos:column="67">ToQueryString</name></name><argument_list pos:line="284" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="285" pos:column="25">Assert</name><op:operator pos:line="285" pos:column="31">.</op:operator><name pos:line="285" pos:column="32">AreEqual</name></name><argument_list pos:line="285" pos:column="40">(<argument><expr><name pos:line="285" pos:column="41">queryString</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="285" pos:column="54">"("</lit:literal> <op:operator pos:line="285" pos:column="58">+</op:operator> <call><name><name pos:line="285" pos:column="60">SandoField</name><op:operator pos:line="285" pos:column="70">.</op:operator><name pos:line="285" pos:column="71">FullFilePath</name><op:operator pos:line="285" pos:column="83">.</op:operator><name pos:line="285" pos:column="84">ToString</name></name><argument_list pos:line="285" pos:column="92">()</argument_list></call> <op:operator pos:line="285" pos:column="95">+</op:operator> <lit:literal type="string" pos:line="285" pos:column="97">":\"C:/Project/*.cs\" OR "</lit:literal> <op:operator pos:line="285" pos:column="124">+</op:operator> <call><name><name pos:line="285" pos:column="126">SandoField</name><op:operator pos:line="285" pos:column="136">.</op:operator><name pos:line="285" pos:column="137">FullFilePath</name><op:operator pos:line="285" pos:column="149">.</op:operator><name pos:line="285" pos:column="150">ToString</name></name><argument_list pos:line="285" pos:column="158">()</argument_list></call> <op:operator pos:line="285" pos:column="161">+</op:operator> <lit:literal type="string" pos:line="285" pos:column="163">":\"C:/Project2/*.cs\")"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="285" pos:column="189">"Created query string is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<try pos:line="286" pos:column="25">try
			<block pos:line="287" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="288" pos:column="33">Query</name></type> <name pos:line="288" pos:column="39">query</name> <init pos:line="288" pos:column="45">= <expr><op:operator pos:line="288" pos:column="47">new</op:operator> <call><name pos:line="288" pos:column="51">QueryParser</name><argument_list pos:line="288" pos:column="62">(<argument><expr><name><name pos:line="288" pos:column="63">Lucene</name><op:operator pos:line="288" pos:column="69">.</op:operator><name pos:line="288" pos:column="70">Net</name><op:operator pos:line="288" pos:column="73">.</op:operator><name pos:line="288" pos:column="74">Util</name><op:operator pos:line="288" pos:column="78">.</op:operator><name pos:line="288" pos:column="79">Version</name><op:operator pos:line="288" pos:column="86">.</op:operator><name pos:line="288" pos:column="87">LUCENE_29</name></name></expr></argument>, <argument><expr><call><name><name pos:line="288" pos:column="98">SandoField</name><op:operator pos:line="288" pos:column="108">.</op:operator><name pos:line="288" pos:column="109">FullFilePath</name><op:operator pos:line="288" pos:column="121">.</op:operator><name pos:line="288" pos:column="122">ToString</name></name><argument_list pos:line="288" pos:column="130">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="288" pos:column="134">new</op:operator> <call><name pos:line="288" pos:column="138">SimpleAnalyzer</name><argument_list pos:line="288" pos:column="152">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="288" pos:column="155">.</op:operator><call><name pos:line="288" pos:column="156">Parse</name><argument_list pos:line="288" pos:column="161">(<argument><expr><name pos:line="288" pos:column="162">queryString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="289" pos:column="33">Assert</name><op:operator pos:line="289" pos:column="39">.</op:operator><name pos:line="289" pos:column="40">NotNull</name></name><argument_list pos:line="289" pos:column="47">(<argument><expr><name pos:line="289" pos:column="48">query</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="289" pos:column="55">"Generated query object is null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block>
			<catch pos:line="291" pos:column="25">catch<parameter_list pos:line="291" pos:column="30">(<param><decl><type><name pos:line="291" pos:column="31">Exception</name></type> <name pos:line="291" pos:column="41">ex</name></decl></param>)</parameter_list>
			<block pos:line="292" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="293" pos:column="33">Assert</name><op:operator pos:line="293" pos:column="39">.</op:operator><name pos:line="293" pos:column="40">Fail</name></name><argument_list pos:line="293" pos:column="44">(<argument><expr><name><name pos:line="293" pos:column="45">ex</name><op:operator pos:line="293" pos:column="47">.</op:operator><name pos:line="293" pos:column="48">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></function>

		<function><type><attribute pos:line="297" pos:column="17">[<expr><name pos:line="297" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="298" pos:column="17">public</specifier> <name pos:line="298" pos:column="24">void</name></type> <name pos:line="298" pos:column="29">SimpleSearchCriteria_ToQueryStringCreatesValidProgramElementTypesQueryString_SingleCondition</name><parameter_list pos:line="298" pos:column="121">()</parameter_list>
		<block pos:line="299" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="300" pos:column="25">SearchCriteria</name></type> <name pos:line="300" pos:column="40">simpleSearchCriteria</name> <init pos:line="300" pos:column="61">= <expr><op:operator pos:line="300" pos:column="63">new</op:operator> <call><name pos:line="300" pos:column="67">SimpleSearchCriteria</name><argument_list pos:line="300" pos:column="87">()</argument_list></call>
													<block pos:line="301" pos:column="105">{
														<expr><name pos:line="302" pos:column="113">SearchByProgramElementType</name> <op:operator pos:line="302" pos:column="140">=</op:operator> <lit:literal type="boolean" pos:line="302" pos:column="142">true</lit:literal></expr>,
														<expr><name pos:line="303" pos:column="113">ProgramElementTypes</name> <op:operator pos:line="303" pos:column="133">=</op:operator> <op:operator pos:line="303" pos:column="135">new</op:operator> <call><name><name pos:line="303" pos:column="139">SortedSet</name><argument_list pos:line="303" pos:column="148">&lt;<argument><name pos:line="303" pos:column="149">ProgramElementType</name></argument>&gt;</argument_list></name><argument_list pos:line="303" pos:column="168">()</argument_list></call>
																				<block pos:line="304" pos:column="161">{
																					<expr><name><name pos:line="305" pos:column="169">ProgramElementType</name><op:operator pos:line="305" pos:column="187">.</op:operator><name pos:line="305" pos:column="188">Class</name></name></expr>
																				}</block></expr>
													}</block></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="308" pos:column="25">string</name></type> <name pos:line="308" pos:column="32">queryString</name> <init pos:line="308" pos:column="44">= <expr><call><name><name pos:line="308" pos:column="46">simpleSearchCriteria</name><op:operator pos:line="308" pos:column="66">.</op:operator><name pos:line="308" pos:column="67">ToQueryString</name></name><argument_list pos:line="308" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="309" pos:column="25">Assert</name><op:operator pos:line="309" pos:column="31">.</op:operator><name pos:line="309" pos:column="32">AreEqual</name></name><argument_list pos:line="309" pos:column="40">(<argument><expr><name pos:line="309" pos:column="41">queryString</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="309" pos:column="54">"("</lit:literal> <op:operator pos:line="309" pos:column="58">+</op:operator> <call><name><name pos:line="309" pos:column="60">SandoField</name><op:operator pos:line="309" pos:column="70">.</op:operator><name pos:line="309" pos:column="71">ProgramElementType</name><op:operator pos:line="309" pos:column="89">.</op:operator><name pos:line="309" pos:column="90">ToString</name></name><argument_list pos:line="309" pos:column="98">()</argument_list></call> <op:operator pos:line="309" pos:column="101">+</op:operator> <lit:literal type="string" pos:line="309" pos:column="103">":class)"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="309" pos:column="114">"Created query string is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<try pos:line="310" pos:column="25">try
			<block pos:line="311" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="312" pos:column="33">Query</name></type> <name pos:line="312" pos:column="39">query</name> <init pos:line="312" pos:column="45">= <expr><op:operator pos:line="312" pos:column="47">new</op:operator> <call><name pos:line="312" pos:column="51">QueryParser</name><argument_list pos:line="312" pos:column="62">(<argument><expr><name><name pos:line="312" pos:column="63">Lucene</name><op:operator pos:line="312" pos:column="69">.</op:operator><name pos:line="312" pos:column="70">Net</name><op:operator pos:line="312" pos:column="73">.</op:operator><name pos:line="312" pos:column="74">Util</name><op:operator pos:line="312" pos:column="78">.</op:operator><name pos:line="312" pos:column="79">Version</name><op:operator pos:line="312" pos:column="86">.</op:operator><name pos:line="312" pos:column="87">LUCENE_29</name></name></expr></argument>, <argument><expr><call><name><name pos:line="312" pos:column="98">SandoField</name><op:operator pos:line="312" pos:column="108">.</op:operator><name pos:line="312" pos:column="109">ProgramElementType</name><op:operator pos:line="312" pos:column="127">.</op:operator><name pos:line="312" pos:column="128">ToString</name></name><argument_list pos:line="312" pos:column="136">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="312" pos:column="140">new</op:operator> <call><name pos:line="312" pos:column="144">SimpleAnalyzer</name><argument_list pos:line="312" pos:column="158">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="312" pos:column="161">.</op:operator><call><name pos:line="312" pos:column="162">Parse</name><argument_list pos:line="312" pos:column="167">(<argument><expr><name pos:line="312" pos:column="168">queryString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="313" pos:column="33">Assert</name><op:operator pos:line="313" pos:column="39">.</op:operator><name pos:line="313" pos:column="40">NotNull</name></name><argument_list pos:line="313" pos:column="47">(<argument><expr><name pos:line="313" pos:column="48">query</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="313" pos:column="55">"Generated query object is null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block>
			<catch pos:line="315" pos:column="25">catch<parameter_list pos:line="315" pos:column="30">(<param><decl><type><name pos:line="315" pos:column="31">Exception</name></type> <name pos:line="315" pos:column="41">ex</name></decl></param>)</parameter_list>
			<block pos:line="316" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="317" pos:column="33">Assert</name><op:operator pos:line="317" pos:column="39">.</op:operator><name pos:line="317" pos:column="40">Fail</name></name><argument_list pos:line="317" pos:column="44">(<argument><expr><name><name pos:line="317" pos:column="45">ex</name><op:operator pos:line="317" pos:column="47">.</op:operator><name pos:line="317" pos:column="48">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></function>

		<function><type><attribute pos:line="321" pos:column="17">[<expr><name pos:line="321" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="322" pos:column="17">public</specifier> <name pos:line="322" pos:column="24">void</name></type> <name pos:line="322" pos:column="29">SimpleSearchCriteria_ToQueryStringCreatesValidProgramElementTypesQueryString_MultipleConditions</name><parameter_list pos:line="322" pos:column="124">()</parameter_list>
		<block pos:line="323" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="324" pos:column="25">SearchCriteria</name></type> <name pos:line="324" pos:column="40">simpleSearchCriteria</name> <init pos:line="324" pos:column="61">= <expr><op:operator pos:line="324" pos:column="63">new</op:operator> <call><name pos:line="324" pos:column="67">SimpleSearchCriteria</name><argument_list pos:line="324" pos:column="87">()</argument_list></call>
													<block pos:line="325" pos:column="105">{
														<expr><name pos:line="326" pos:column="113">SearchByProgramElementType</name> <op:operator pos:line="326" pos:column="140">=</op:operator> <lit:literal type="boolean" pos:line="326" pos:column="142">true</lit:literal></expr>,
														<expr><name pos:line="327" pos:column="113">ProgramElementTypes</name> <op:operator pos:line="327" pos:column="133">=</op:operator> <op:operator pos:line="327" pos:column="135">new</op:operator> <call><name><name pos:line="327" pos:column="139">SortedSet</name><argument_list pos:line="327" pos:column="148">&lt;<argument><name pos:line="327" pos:column="149">ProgramElementType</name></argument>&gt;</argument_list></name><argument_list pos:line="327" pos:column="168">()</argument_list></call>
																				<block pos:line="328" pos:column="161">{
																					<expr><name><name pos:line="329" pos:column="169">ProgramElementType</name><op:operator pos:line="329" pos:column="187">.</op:operator><name pos:line="329" pos:column="188">Property</name></name></expr>,
																					<expr><name><name pos:line="330" pos:column="169">ProgramElementType</name><op:operator pos:line="330" pos:column="187">.</op:operator><name pos:line="330" pos:column="188">Class</name></name></expr>,
																					<expr><name><name pos:line="331" pos:column="169">ProgramElementType</name><op:operator pos:line="331" pos:column="187">.</op:operator><name pos:line="331" pos:column="188">Enum</name></name></expr>
																				}</block></expr>
													}</block></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="334" pos:column="25">string</name></type> <name pos:line="334" pos:column="32">queryString</name> <init pos:line="334" pos:column="44">= <expr><call><name><name pos:line="334" pos:column="46">simpleSearchCriteria</name><op:operator pos:line="334" pos:column="66">.</op:operator><name pos:line="334" pos:column="67">ToQueryString</name></name><argument_list pos:line="334" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="335" pos:column="25">Assert</name><op:operator pos:line="335" pos:column="31">.</op:operator><name pos:line="335" pos:column="32">AreEqual</name></name><argument_list pos:line="335" pos:column="40">(<argument><expr><name pos:line="335" pos:column="41">queryString</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="335" pos:column="54">"("</lit:literal> <op:operator pos:line="335" pos:column="58">+</op:operator> <call><name><name pos:line="335" pos:column="60">SandoField</name><op:operator pos:line="335" pos:column="70">.</op:operator><name pos:line="335" pos:column="71">ProgramElementType</name><op:operator pos:line="335" pos:column="89">.</op:operator><name pos:line="335" pos:column="90">ToString</name></name><argument_list pos:line="335" pos:column="98">()</argument_list></call> <op:operator pos:line="335" pos:column="101">+</op:operator> <lit:literal type="string" pos:line="335" pos:column="103">":property OR "</lit:literal> <op:operator pos:line="335" pos:column="119">+</op:operator> <call><name><name pos:line="335" pos:column="121">SandoField</name><op:operator pos:line="335" pos:column="131">.</op:operator><name pos:line="335" pos:column="132">ProgramElementType</name><op:operator pos:line="335" pos:column="150">.</op:operator><name pos:line="335" pos:column="151">ToString</name></name><argument_list pos:line="335" pos:column="159">()</argument_list></call> <op:operator pos:line="335" pos:column="162">+</op:operator> <lit:literal type="string" pos:line="335" pos:column="164">":enum OR "</lit:literal> <op:operator pos:line="335" pos:column="176">+</op:operator> <call><name><name pos:line="335" pos:column="178">SandoField</name><op:operator pos:line="335" pos:column="188">.</op:operator><name pos:line="335" pos:column="189">ProgramElementType</name><op:operator pos:line="335" pos:column="207">.</op:operator><name pos:line="335" pos:column="208">ToString</name></name><argument_list pos:line="335" pos:column="216">()</argument_list></call> <op:operator pos:line="335" pos:column="219">+</op:operator> <lit:literal type="string" pos:line="335" pos:column="221">":class)"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="335" pos:column="232">"Created query string is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<try pos:line="336" pos:column="25">try
			<block pos:line="337" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="338" pos:column="33">Query</name></type> <name pos:line="338" pos:column="39">query</name> <init pos:line="338" pos:column="45">= <expr><op:operator pos:line="338" pos:column="47">new</op:operator> <call><name pos:line="338" pos:column="51">QueryParser</name><argument_list pos:line="338" pos:column="62">(<argument><expr><name><name pos:line="338" pos:column="63">Lucene</name><op:operator pos:line="338" pos:column="69">.</op:operator><name pos:line="338" pos:column="70">Net</name><op:operator pos:line="338" pos:column="73">.</op:operator><name pos:line="338" pos:column="74">Util</name><op:operator pos:line="338" pos:column="78">.</op:operator><name pos:line="338" pos:column="79">Version</name><op:operator pos:line="338" pos:column="86">.</op:operator><name pos:line="338" pos:column="87">LUCENE_29</name></name></expr></argument>, <argument><expr><call><name><name pos:line="338" pos:column="98">SandoField</name><op:operator pos:line="338" pos:column="108">.</op:operator><name pos:line="338" pos:column="109">ProgramElementType</name><op:operator pos:line="338" pos:column="127">.</op:operator><name pos:line="338" pos:column="128">ToString</name></name><argument_list pos:line="338" pos:column="136">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="338" pos:column="140">new</op:operator> <call><name pos:line="338" pos:column="144">SimpleAnalyzer</name><argument_list pos:line="338" pos:column="158">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="338" pos:column="161">.</op:operator><call><name pos:line="338" pos:column="162">Parse</name><argument_list pos:line="338" pos:column="167">(<argument><expr><name pos:line="338" pos:column="168">queryString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="339" pos:column="33">Assert</name><op:operator pos:line="339" pos:column="39">.</op:operator><name pos:line="339" pos:column="40">NotNull</name></name><argument_list pos:line="339" pos:column="47">(<argument><expr><name pos:line="339" pos:column="48">query</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="339" pos:column="55">"Generated query object is null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block>
			<catch pos:line="341" pos:column="25">catch<parameter_list pos:line="341" pos:column="30">(<param><decl><type><name pos:line="341" pos:column="31">Exception</name></type> <name pos:line="341" pos:column="41">ex</name></decl></param>)</parameter_list>
			<block pos:line="342" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="343" pos:column="33">Assert</name><op:operator pos:line="343" pos:column="39">.</op:operator><name pos:line="343" pos:column="40">Fail</name></name><argument_list pos:line="343" pos:column="44">(<argument><expr><name><name pos:line="343" pos:column="45">ex</name><op:operator pos:line="343" pos:column="47">.</op:operator><name pos:line="343" pos:column="48">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></function>

		<function><type><attribute pos:line="347" pos:column="17">[<expr><name pos:line="347" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="348" pos:column="17">public</specifier> <name pos:line="348" pos:column="24">void</name></type> <name pos:line="348" pos:column="29">SimpleSearchCriteria_ToQueryStringCreatesValidUsageTypesQueryString_NoCondition</name><parameter_list pos:line="348" pos:column="108">()</parameter_list>
		<block pos:line="349" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="350" pos:column="25">SearchCriteria</name></type> <name pos:line="350" pos:column="40">simpleSearchCriteria</name> <init pos:line="350" pos:column="61">= <expr><op:operator pos:line="350" pos:column="63">new</op:operator> <call><name pos:line="350" pos:column="67">SimpleSearchCriteria</name><argument_list pos:line="350" pos:column="87">()</argument_list></call>
													<block pos:line="351" pos:column="105">{
														<expr><name pos:line="352" pos:column="113">SearchByUsageType</name> <op:operator pos:line="352" pos:column="131">=</op:operator> <lit:literal type="boolean" pos:line="352" pos:column="133">false</lit:literal></expr>,
														<expr><name pos:line="353" pos:column="113">SearchTerms</name> <op:operator pos:line="353" pos:column="125">=</op:operator> <op:operator pos:line="353" pos:column="127">new</op:operator> <call><name><name pos:line="353" pos:column="131">SortedSet</name><argument_list pos:line="353" pos:column="140">&lt;<argument><name pos:line="353" pos:column="141">string</name></argument>&gt;</argument_list></name><argument_list pos:line="353" pos:column="148">()</argument_list></call>
																		<block pos:line="354" pos:column="145">{
																			<expr><lit:literal type="string" pos:line="355" pos:column="153">"SimpleClass"</lit:literal></expr>
																		}</block></expr>
													}</block></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="358" pos:column="25">string</name></type> <name pos:line="358" pos:column="32">queryString</name> <init pos:line="358" pos:column="44">= <expr><call><name><name pos:line="358" pos:column="46">simpleSearchCriteria</name><op:operator pos:line="358" pos:column="66">.</op:operator><name pos:line="358" pos:column="67">ToQueryString</name></name><argument_list pos:line="358" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="359" pos:column="13">string</name></type> <name pos:line="359" pos:column="20">actual</name> <init pos:line="359" pos:column="27">= <expr><lit:literal type="string" pos:line="359" pos:column="29">"("</lit:literal> <op:operator pos:line="359" pos:column="33">+</op:operator> <call><name><name pos:line="359" pos:column="35">SandoField</name><op:operator pos:line="359" pos:column="45">.</op:operator><name pos:line="359" pos:column="46">Body</name><op:operator pos:line="359" pos:column="50">.</op:operator><name pos:line="359" pos:column="51">ToString</name></name><argument_list pos:line="359" pos:column="59">()</argument_list></call> <op:operator pos:line="359" pos:column="62">+</op:operator> <lit:literal type="string" pos:line="359" pos:column="64">":SimpleClass^4 OR "</lit:literal> <op:operator pos:line="359" pos:column="85">+</op:operator> <call><name><name pos:line="359" pos:column="87">SandoField</name><op:operator pos:line="359" pos:column="97">.</op:operator><name pos:line="359" pos:column="98">Name</name><op:operator pos:line="359" pos:column="102">.</op:operator><name pos:line="359" pos:column="103">ToString</name></name><argument_list pos:line="359" pos:column="111">()</argument_list></call> <op:operator pos:line="359" pos:column="114">+</op:operator>
                <lit:literal type="string" pos:line="360" pos:column="17">":SimpleClass^3 OR "</lit:literal> <op:operator pos:line="360" pos:column="38">+</op:operator> <call><name><name pos:line="360" pos:column="40">SandoField</name><op:operator pos:line="360" pos:column="50">.</op:operator><name pos:line="360" pos:column="51">ExtendedClasses</name><op:operator pos:line="360" pos:column="66">.</op:operator><name pos:line="360" pos:column="67">ToString</name></name><argument_list pos:line="360" pos:column="75">()</argument_list></call> <op:operator pos:line="360" pos:column="78">+</op:operator> 
                <lit:literal type="string" pos:line="361" pos:column="17">":SimpleClass^0.2 OR "</lit:literal> <op:operator pos:line="361" pos:column="40">+</op:operator> <call><name><name pos:line="361" pos:column="42">SandoField</name><op:operator pos:line="361" pos:column="52">.</op:operator><name pos:line="361" pos:column="53">ImplementedInterfaces</name><op:operator pos:line="361" pos:column="74">.</op:operator><name pos:line="361" pos:column="75">ToString</name></name><argument_list pos:line="361" pos:column="83">()</argument_list></call> <op:operator pos:line="361" pos:column="86">+</op:operator>
                <lit:literal type="string" pos:line="362" pos:column="17">":SimpleClass^0.2 OR "</lit:literal> <op:operator pos:line="362" pos:column="40">+</op:operator> <call><name><name pos:line="362" pos:column="42">SandoField</name><op:operator pos:line="362" pos:column="52">.</op:operator><name pos:line="362" pos:column="53">Arguments</name><op:operator pos:line="362" pos:column="62">.</op:operator><name pos:line="362" pos:column="63">ToString</name></name><argument_list pos:line="362" pos:column="71">()</argument_list></call> <op:operator pos:line="362" pos:column="74">+</op:operator> <lit:literal type="string" pos:line="362" pos:column="76">":SimpleClass^0.1 OR "</lit:literal> <op:operator pos:line="362" pos:column="99">+</op:operator> 
                <call><name><name pos:line="363" pos:column="17">SandoField</name><op:operator pos:line="363" pos:column="27">.</op:operator><name pos:line="363" pos:column="28">ReturnType</name><op:operator pos:line="363" pos:column="38">.</op:operator><name pos:line="363" pos:column="39">ToString</name></name><argument_list pos:line="363" pos:column="47">()</argument_list></call> <op:operator pos:line="363" pos:column="50">+</op:operator> <lit:literal type="string" pos:line="363" pos:column="52">":SimpleClass^0.2 OR "</lit:literal> <op:operator pos:line="363" pos:column="75">+</op:operator> <call><name><name pos:line="363" pos:column="77">SandoField</name><op:operator pos:line="363" pos:column="87">.</op:operator><name pos:line="363" pos:column="88">Namespace</name><op:operator pos:line="363" pos:column="97">.</op:operator><name pos:line="363" pos:column="98">ToString</name></name><argument_list pos:line="363" pos:column="106">()</argument_list></call> <op:operator pos:line="363" pos:column="109">+</op:operator> <lit:literal type="string" pos:line="363" pos:column="111">":SimpleClass^0.05 OR "</lit:literal> <op:operator pos:line="363" pos:column="135">+</op:operator> 
                <call><name><name pos:line="364" pos:column="17">SandoField</name><op:operator pos:line="364" pos:column="27">.</op:operator><name pos:line="364" pos:column="28">DataType</name><op:operator pos:line="364" pos:column="36">.</op:operator><name pos:line="364" pos:column="37">ToString</name></name><argument_list pos:line="364" pos:column="45">()</argument_list></call> <op:operator pos:line="364" pos:column="48">+</op:operator> <lit:literal type="string" pos:line="364" pos:column="50">":SimpleClass OR "</lit:literal> <op:operator pos:line="364" pos:column="69">+</op:operator> 
                <call><name><name pos:line="365" pos:column="17">SandoField</name><op:operator pos:line="365" pos:column="27">.</op:operator><name pos:line="365" pos:column="28">Source</name><op:operator pos:line="365" pos:column="34">.</op:operator><name pos:line="365" pos:column="35">ToString</name></name><argument_list pos:line="365" pos:column="43">()</argument_list></call> <op:operator pos:line="365" pos:column="46">+</op:operator> <lit:literal type="string" pos:line="365" pos:column="48">":SimpleClass OR "</lit:literal> <op:operator pos:line="365" pos:column="67">+</op:operator> <call><name><name pos:line="365" pos:column="69">SandoField</name><op:operator pos:line="365" pos:column="79">.</op:operator><name pos:line="365" pos:column="80">ClassName</name><op:operator pos:line="365" pos:column="89">.</op:operator><name pos:line="365" pos:column="90">ToString</name></name><argument_list pos:line="365" pos:column="98">()</argument_list></call> <op:operator pos:line="365" pos:column="101">+</op:operator> <lit:literal type="string" pos:line="365" pos:column="103">":SimpleClass)"</lit:literal></expr></init></decl>;</decl_stmt>
		    <expr_stmt><expr><call><name><name pos:line="366" pos:column="21">Assert</name><op:operator pos:line="366" pos:column="27">.</op:operator><name pos:line="366" pos:column="28">AreEqual</name></name><argument_list pos:line="366" pos:column="36">(<argument><expr><name pos:line="366" pos:column="37">queryString</name></expr></argument>, <argument><expr><name pos:line="366" pos:column="50">actual</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="366" pos:column="58">"Created query string is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<try pos:line="367" pos:column="25">try
			<block pos:line="368" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="369" pos:column="33">Query</name></type> <name pos:line="369" pos:column="39">query</name> <init pos:line="369" pos:column="45">= <expr><op:operator pos:line="369" pos:column="47">new</op:operator> <call><name pos:line="369" pos:column="51">QueryParser</name><argument_list pos:line="369" pos:column="62">(<argument><expr><name><name pos:line="369" pos:column="63">Lucene</name><op:operator pos:line="369" pos:column="69">.</op:operator><name pos:line="369" pos:column="70">Net</name><op:operator pos:line="369" pos:column="73">.</op:operator><name pos:line="369" pos:column="74">Util</name><op:operator pos:line="369" pos:column="78">.</op:operator><name pos:line="369" pos:column="79">Version</name><op:operator pos:line="369" pos:column="86">.</op:operator><name pos:line="369" pos:column="87">LUCENE_29</name></name></expr></argument>, <argument><expr><call><name><name pos:line="369" pos:column="98">SandoField</name><op:operator pos:line="369" pos:column="108">.</op:operator><name pos:line="369" pos:column="109">Name</name><op:operator pos:line="369" pos:column="113">.</op:operator><name pos:line="369" pos:column="114">ToString</name></name><argument_list pos:line="369" pos:column="122">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="369" pos:column="126">new</op:operator> <call><name pos:line="369" pos:column="130">SimpleAnalyzer</name><argument_list pos:line="369" pos:column="144">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="369" pos:column="147">.</op:operator><call><name pos:line="369" pos:column="148">Parse</name><argument_list pos:line="369" pos:column="153">(<argument><expr><name pos:line="369" pos:column="154">queryString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="370" pos:column="33">Assert</name><op:operator pos:line="370" pos:column="39">.</op:operator><name pos:line="370" pos:column="40">NotNull</name></name><argument_list pos:line="370" pos:column="47">(<argument><expr><name pos:line="370" pos:column="48">query</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="370" pos:column="55">"Generated query object is null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block>
			<catch pos:line="372" pos:column="25">catch<parameter_list pos:line="372" pos:column="30">(<param><decl><type><name pos:line="372" pos:column="31">Exception</name></type> <name pos:line="372" pos:column="41">ex</name></decl></param>)</parameter_list>
			<block pos:line="373" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="374" pos:column="33">Assert</name><op:operator pos:line="374" pos:column="39">.</op:operator><name pos:line="374" pos:column="40">Fail</name></name><argument_list pos:line="374" pos:column="44">(<argument><expr><name><name pos:line="374" pos:column="45">ex</name><op:operator pos:line="374" pos:column="47">.</op:operator><name pos:line="374" pos:column="48">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></function>

		<function><type><attribute pos:line="378" pos:column="17">[<expr><name pos:line="378" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="379" pos:column="17">public</specifier> <name pos:line="379" pos:column="24">void</name></type> <name pos:line="379" pos:column="29">SimpleSearchCriteria_ToQueryStringCreatesValidUsageTypesQueryString_SingleCondition</name><parameter_list pos:line="379" pos:column="112">()</parameter_list>
		<block pos:line="380" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="381" pos:column="25">SearchCriteria</name></type> <name pos:line="381" pos:column="40">simpleSearchCriteria</name> <init pos:line="381" pos:column="61">= <expr><op:operator pos:line="381" pos:column="63">new</op:operator> <call><name pos:line="381" pos:column="67">SimpleSearchCriteria</name><argument_list pos:line="381" pos:column="87">()</argument_list></call>
													<block pos:line="382" pos:column="105">{
														<expr><name pos:line="383" pos:column="113">SearchByUsageType</name> <op:operator pos:line="383" pos:column="131">=</op:operator> <lit:literal type="boolean" pos:line="383" pos:column="133">true</lit:literal></expr>,
														<expr><name pos:line="384" pos:column="113">UsageTypes</name> <op:operator pos:line="384" pos:column="124">=</op:operator> <op:operator pos:line="384" pos:column="126">new</op:operator> <call><name><name pos:line="384" pos:column="130">SortedSet</name><argument_list pos:line="384" pos:column="139">&lt;<argument><name pos:line="384" pos:column="140">UsageType</name></argument>&gt;</argument_list></name><argument_list pos:line="384" pos:column="150">()</argument_list></call>
																		<block pos:line="385" pos:column="145">{
																			<expr><name><name pos:line="386" pos:column="153">UsageType</name><op:operator pos:line="386" pos:column="162">.</op:operator><name pos:line="386" pos:column="163">ExtendedClasses</name></name></expr>
																		}</block></expr>,
														<expr><name pos:line="388" pos:column="113">SearchTerms</name> <op:operator pos:line="388" pos:column="125">=</op:operator> <op:operator pos:line="388" pos:column="127">new</op:operator> <call><name><name pos:line="388" pos:column="131">SortedSet</name><argument_list pos:line="388" pos:column="140">&lt;<argument><name pos:line="388" pos:column="141">string</name></argument>&gt;</argument_list></name><argument_list pos:line="388" pos:column="148">()</argument_list></call>
																		<block pos:line="389" pos:column="145">{
																			<expr><lit:literal type="string" pos:line="390" pos:column="153">"SimpleClass"</lit:literal></expr>
																		}</block></expr>
													}</block></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="393" pos:column="25">string</name></type> <name pos:line="393" pos:column="32">queryString</name> <init pos:line="393" pos:column="44">= <expr><call><name><name pos:line="393" pos:column="46">simpleSearchCriteria</name><op:operator pos:line="393" pos:column="66">.</op:operator><name pos:line="393" pos:column="67">ToQueryString</name></name><argument_list pos:line="393" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="394" pos:column="13">Assert</name><op:operator pos:line="394" pos:column="19">.</op:operator><name pos:line="394" pos:column="20">AreEqual</name></name><argument_list pos:line="394" pos:column="28">(<argument><expr><name pos:line="394" pos:column="29">queryString</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="394" pos:column="42">"("</lit:literal> <op:operator pos:line="394" pos:column="46">+</op:operator> <call><name><name pos:line="394" pos:column="48">SandoField</name><op:operator pos:line="394" pos:column="58">.</op:operator><name pos:line="394" pos:column="59">ExtendedClasses</name><op:operator pos:line="394" pos:column="74">.</op:operator><name pos:line="394" pos:column="75">ToString</name></name><argument_list pos:line="394" pos:column="83">()</argument_list></call> <op:operator pos:line="394" pos:column="86">+</op:operator> <lit:literal type="string" pos:line="394" pos:column="88">":SimpleClass^0.2)"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="394" pos:column="109">"Created query string is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<try pos:line="395" pos:column="25">try
			<block pos:line="396" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="397" pos:column="33">Query</name></type> <name pos:line="397" pos:column="39">query</name> <init pos:line="397" pos:column="45">= <expr><op:operator pos:line="397" pos:column="47">new</op:operator> <call><name pos:line="397" pos:column="51">QueryParser</name><argument_list pos:line="397" pos:column="62">(<argument><expr><name><name pos:line="397" pos:column="63">Lucene</name><op:operator pos:line="397" pos:column="69">.</op:operator><name pos:line="397" pos:column="70">Net</name><op:operator pos:line="397" pos:column="73">.</op:operator><name pos:line="397" pos:column="74">Util</name><op:operator pos:line="397" pos:column="78">.</op:operator><name pos:line="397" pos:column="79">Version</name><op:operator pos:line="397" pos:column="86">.</op:operator><name pos:line="397" pos:column="87">LUCENE_29</name></name></expr></argument>, <argument><expr><call><name><name pos:line="397" pos:column="98">SandoField</name><op:operator pos:line="397" pos:column="108">.</op:operator><name pos:line="397" pos:column="109">ExtendedClasses</name><op:operator pos:line="397" pos:column="124">.</op:operator><name pos:line="397" pos:column="125">ToString</name></name><argument_list pos:line="397" pos:column="133">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="397" pos:column="137">new</op:operator> <call><name pos:line="397" pos:column="141">SimpleAnalyzer</name><argument_list pos:line="397" pos:column="155">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="397" pos:column="158">.</op:operator><call><name pos:line="397" pos:column="159">Parse</name><argument_list pos:line="397" pos:column="164">(<argument><expr><name pos:line="397" pos:column="165">queryString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="398" pos:column="33">Assert</name><op:operator pos:line="398" pos:column="39">.</op:operator><name pos:line="398" pos:column="40">NotNull</name></name><argument_list pos:line="398" pos:column="47">(<argument><expr><name pos:line="398" pos:column="48">query</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="398" pos:column="55">"Generated query object is null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block>
			<catch pos:line="400" pos:column="25">catch<parameter_list pos:line="400" pos:column="30">(<param><decl><type><name pos:line="400" pos:column="31">Exception</name></type> <name pos:line="400" pos:column="41">ex</name></decl></param>)</parameter_list>
			<block pos:line="401" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="402" pos:column="33">Assert</name><op:operator pos:line="402" pos:column="39">.</op:operator><name pos:line="402" pos:column="40">Fail</name></name><argument_list pos:line="402" pos:column="44">(<argument><expr><name><name pos:line="402" pos:column="45">ex</name><op:operator pos:line="402" pos:column="47">.</op:operator><name pos:line="402" pos:column="48">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></function>

		<function><type><attribute pos:line="406" pos:column="17">[<expr><name pos:line="406" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="407" pos:column="17">public</specifier> <name pos:line="407" pos:column="24">void</name></type> <name pos:line="407" pos:column="29">SimpleSearchCriteria_ToQueryStringCreatesValidUsageTypesQueryString_MultipleConditions</name><parameter_list pos:line="407" pos:column="115">()</parameter_list>
		<block pos:line="408" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="409" pos:column="25">SearchCriteria</name></type> <name pos:line="409" pos:column="40">simpleSearchCriteria</name> <init pos:line="409" pos:column="61">= <expr><op:operator pos:line="409" pos:column="63">new</op:operator> <call><name pos:line="409" pos:column="67">SimpleSearchCriteria</name><argument_list pos:line="409" pos:column="87">()</argument_list></call>
													<block pos:line="410" pos:column="105">{
														<expr><name pos:line="411" pos:column="113">SearchByUsageType</name> <op:operator pos:line="411" pos:column="131">=</op:operator> <lit:literal type="boolean" pos:line="411" pos:column="133">true</lit:literal></expr>,
														<expr><name pos:line="412" pos:column="113">UsageTypes</name> <op:operator pos:line="412" pos:column="124">=</op:operator> <op:operator pos:line="412" pos:column="126">new</op:operator> <call><name><name pos:line="412" pos:column="130">SortedSet</name><argument_list pos:line="412" pos:column="139">&lt;<argument><name pos:line="412" pos:column="140">UsageType</name></argument>&gt;</argument_list></name><argument_list pos:line="412" pos:column="150">()</argument_list></call>
																		<block pos:line="413" pos:column="145">{
																			<expr><name><name pos:line="414" pos:column="153">UsageType</name><op:operator pos:line="414" pos:column="162">.</op:operator><name pos:line="414" pos:column="163">ExtendedClasses</name></name></expr>,
																			<expr><name><name pos:line="415" pos:column="153">UsageType</name><op:operator pos:line="415" pos:column="162">.</op:operator><name pos:line="415" pos:column="163">Definitions</name></name></expr>,
																			<expr><name><name pos:line="416" pos:column="153">UsageType</name><op:operator pos:line="416" pos:column="162">.</op:operator><name pos:line="416" pos:column="163">NamespaceNames</name></name></expr>
																		}</block></expr>,
														<expr><name pos:line="418" pos:column="113">SearchTerms</name> <op:operator pos:line="418" pos:column="125">=</op:operator> <op:operator pos:line="418" pos:column="127">new</op:operator> <call><name><name pos:line="418" pos:column="131">SortedSet</name><argument_list pos:line="418" pos:column="140">&lt;<argument><name pos:line="418" pos:column="141">string</name></argument>&gt;</argument_list></name><argument_list pos:line="418" pos:column="148">()</argument_list></call>
																		<block pos:line="419" pos:column="145">{
																			<expr><lit:literal type="string" pos:line="420" pos:column="153">"SimpleClass"</lit:literal></expr>
																		}</block></expr>
													}</block></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="423" pos:column="25">string</name></type> <name pos:line="423" pos:column="32">queryString</name> <init pos:line="423" pos:column="44">= <expr><call><name><name pos:line="423" pos:column="46">simpleSearchCriteria</name><op:operator pos:line="423" pos:column="66">.</op:operator><name pos:line="423" pos:column="67">ToQueryString</name></name><argument_list pos:line="423" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="424" pos:column="13">Assert</name><op:operator pos:line="424" pos:column="19">.</op:operator><name pos:line="424" pos:column="20">AreEqual</name></name><argument_list pos:line="424" pos:column="28">(<argument><expr><name pos:line="424" pos:column="29">queryString</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="424" pos:column="42">"("</lit:literal> <op:operator pos:line="424" pos:column="46">+</op:operator> <call><name><name pos:line="424" pos:column="48">SandoField</name><op:operator pos:line="424" pos:column="58">.</op:operator><name pos:line="424" pos:column="59">Name</name><op:operator pos:line="424" pos:column="63">.</op:operator><name pos:line="424" pos:column="64">ToString</name></name><argument_list pos:line="424" pos:column="72">()</argument_list></call> <op:operator pos:line="424" pos:column="75">+</op:operator> <lit:literal type="string" pos:line="424" pos:column="77">":SimpleClass^3 OR "</lit:literal> <op:operator pos:line="424" pos:column="98">+</op:operator>
                <call><name><name pos:line="425" pos:column="17">SandoField</name><op:operator pos:line="425" pos:column="27">.</op:operator><name pos:line="425" pos:column="28">ExtendedClasses</name><op:operator pos:line="425" pos:column="43">.</op:operator><name pos:line="425" pos:column="44">ToString</name></name><argument_list pos:line="425" pos:column="52">()</argument_list></call> <op:operator pos:line="425" pos:column="55">+</op:operator> <lit:literal type="string" pos:line="425" pos:column="57">":SimpleClass^0.2 OR "</lit:literal> 
                <op:operator pos:line="426" pos:column="17">+</op:operator> <call><name><name pos:line="426" pos:column="19">SandoField</name><op:operator pos:line="426" pos:column="29">.</op:operator><name pos:line="426" pos:column="30">Namespace</name><op:operator pos:line="426" pos:column="39">.</op:operator><name pos:line="426" pos:column="40">ToString</name></name><argument_list pos:line="426" pos:column="48">()</argument_list></call> <op:operator pos:line="426" pos:column="51">+</op:operator> <lit:literal type="string" pos:line="426" pos:column="53">":SimpleClass^0.05)"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="426" pos:column="75">"Created query string is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<try pos:line="427" pos:column="25">try
			<block pos:line="428" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="429" pos:column="33">Query</name></type> <name pos:line="429" pos:column="39">query</name> <init pos:line="429" pos:column="45">= <expr><op:operator pos:line="429" pos:column="47">new</op:operator> <call><name pos:line="429" pos:column="51">QueryParser</name><argument_list pos:line="429" pos:column="62">(<argument><expr><name><name pos:line="429" pos:column="63">Lucene</name><op:operator pos:line="429" pos:column="69">.</op:operator><name pos:line="429" pos:column="70">Net</name><op:operator pos:line="429" pos:column="73">.</op:operator><name pos:line="429" pos:column="74">Util</name><op:operator pos:line="429" pos:column="78">.</op:operator><name pos:line="429" pos:column="79">Version</name><op:operator pos:line="429" pos:column="86">.</op:operator><name pos:line="429" pos:column="87">LUCENE_29</name></name></expr></argument>, <argument><expr><call><name><name pos:line="429" pos:column="98">SandoField</name><op:operator pos:line="429" pos:column="108">.</op:operator><name pos:line="429" pos:column="109">Name</name><op:operator pos:line="429" pos:column="113">.</op:operator><name pos:line="429" pos:column="114">ToString</name></name><argument_list pos:line="429" pos:column="122">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="429" pos:column="126">new</op:operator> <call><name pos:line="429" pos:column="130">SimpleAnalyzer</name><argument_list pos:line="429" pos:column="144">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="429" pos:column="147">.</op:operator><call><name pos:line="429" pos:column="148">Parse</name><argument_list pos:line="429" pos:column="153">(<argument><expr><name pos:line="429" pos:column="154">queryString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="430" pos:column="33">Assert</name><op:operator pos:line="430" pos:column="39">.</op:operator><name pos:line="430" pos:column="40">NotNull</name></name><argument_list pos:line="430" pos:column="47">(<argument><expr><name pos:line="430" pos:column="48">query</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="430" pos:column="55">"Generated query object is null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block>
			<catch pos:line="432" pos:column="25">catch<parameter_list pos:line="432" pos:column="30">(<param><decl><type><name pos:line="432" pos:column="31">Exception</name></type> <name pos:line="432" pos:column="41">ex</name></decl></param>)</parameter_list>
			<block pos:line="433" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="434" pos:column="33">Assert</name><op:operator pos:line="434" pos:column="39">.</op:operator><name pos:line="434" pos:column="40">Fail</name></name><argument_list pos:line="434" pos:column="44">(<argument><expr><name><name pos:line="434" pos:column="45">ex</name><op:operator pos:line="434" pos:column="47">.</op:operator><name pos:line="434" pos:column="48">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></function>

		<function><type><attribute pos:line="438" pos:column="17">[<expr><name pos:line="438" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="439" pos:column="17">public</specifier> <name pos:line="439" pos:column="24">void</name></type> <name pos:line="439" pos:column="29">SimpleSearchCriteria_ToQueryStringCreatesValidUsageTypesQueryString_MultipleSearchTerms</name><parameter_list pos:line="439" pos:column="116">()</parameter_list>
		<block pos:line="440" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="441" pos:column="25">SearchCriteria</name></type> <name pos:line="441" pos:column="40">simpleSearchCriteria</name> <init pos:line="441" pos:column="61">= <expr><op:operator pos:line="441" pos:column="63">new</op:operator> <call><name pos:line="441" pos:column="67">SimpleSearchCriteria</name><argument_list pos:line="441" pos:column="87">()</argument_list></call>
			<block pos:line="442" pos:column="25">{
				<expr><name pos:line="443" pos:column="33">SearchByUsageType</name> <op:operator pos:line="443" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="443" pos:column="53">true</lit:literal></expr>,
				<expr><name pos:line="444" pos:column="33">UsageTypes</name> <op:operator pos:line="444" pos:column="44">=</op:operator> <op:operator pos:line="444" pos:column="46">new</op:operator> <call><name><name pos:line="444" pos:column="50">SortedSet</name><argument_list pos:line="444" pos:column="59">&lt;<argument><name pos:line="444" pos:column="60">UsageType</name></argument>&gt;</argument_list></name><argument_list pos:line="444" pos:column="70">()</argument_list></call>
																		<block pos:line="445" pos:column="145">{
																			<expr><name><name pos:line="446" pos:column="153">UsageType</name><op:operator pos:line="446" pos:column="162">.</op:operator><name pos:line="446" pos:column="163">ExtendedClasses</name></name></expr>,
																			<expr><name><name pos:line="447" pos:column="153">UsageType</name><op:operator pos:line="447" pos:column="162">.</op:operator><name pos:line="447" pos:column="163">Definitions</name></name></expr>,
																			<expr><name><name pos:line="448" pos:column="153">UsageType</name><op:operator pos:line="448" pos:column="162">.</op:operator><name pos:line="448" pos:column="163">NamespaceNames</name></name></expr>
																		}</block></expr>,
				<expr><name pos:line="450" pos:column="33">SearchTerms</name> <op:operator pos:line="450" pos:column="45">=</op:operator> <op:operator pos:line="450" pos:column="47">new</op:operator> <call><name><name pos:line="450" pos:column="51">SortedSet</name><argument_list pos:line="450" pos:column="60">&lt;<argument><name pos:line="450" pos:column="61">string</name></argument>&gt;</argument_list></name><argument_list pos:line="450" pos:column="68">()</argument_list></call>
																		<block pos:line="451" pos:column="145">{
																			<expr><lit:literal type="string" pos:line="452" pos:column="153">"Class"</lit:literal></expr>,
																			<expr><lit:literal type="string" pos:line="453" pos:column="153">"Simple"</lit:literal></expr>
																		}</block></expr>
			}</block></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="456" pos:column="25">string</name></type> <name pos:line="456" pos:column="32">queryString</name> <init pos:line="456" pos:column="44">= <expr><call><name><name pos:line="456" pos:column="46">simpleSearchCriteria</name><op:operator pos:line="456" pos:column="66">.</op:operator><name pos:line="456" pos:column="67">ToQueryString</name></name><argument_list pos:line="456" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="457" pos:column="13">string</name></type> <name pos:line="457" pos:column="20">actual</name> <init pos:line="457" pos:column="27">= <expr><lit:literal type="string" pos:line="457" pos:column="29">"("</lit:literal> <op:operator pos:line="457" pos:column="33">+</op:operator> <call><name><name pos:line="457" pos:column="35">SandoField</name><op:operator pos:line="457" pos:column="45">.</op:operator><name pos:line="457" pos:column="46">Name</name><op:operator pos:line="457" pos:column="50">.</op:operator><name pos:line="457" pos:column="51">ToString</name></name><argument_list pos:line="457" pos:column="59">()</argument_list></call> <op:operator pos:line="457" pos:column="62">+</op:operator> <lit:literal type="string" pos:line="457" pos:column="64">":Class^3 OR "</lit:literal> 
                <op:operator pos:line="458" pos:column="17">+</op:operator> <call><name><name pos:line="458" pos:column="19">SandoField</name><op:operator pos:line="458" pos:column="29">.</op:operator><name pos:line="458" pos:column="30">ExtendedClasses</name><op:operator pos:line="458" pos:column="45">.</op:operator><name pos:line="458" pos:column="46">ToString</name></name><argument_list pos:line="458" pos:column="54">()</argument_list></call> <op:operator pos:line="458" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="458" pos:column="59">":Class^0.2 OR "</lit:literal> 
                <op:operator pos:line="459" pos:column="17">+</op:operator> <call><name><name pos:line="459" pos:column="19">SandoField</name><op:operator pos:line="459" pos:column="29">.</op:operator><name pos:line="459" pos:column="30">Namespace</name><op:operator pos:line="459" pos:column="39">.</op:operator><name pos:line="459" pos:column="40">ToString</name></name><argument_list pos:line="459" pos:column="48">()</argument_list></call> <op:operator pos:line="459" pos:column="51">+</op:operator> <lit:literal type="string" pos:line="459" pos:column="53">":Class^0.05 OR "</lit:literal> <op:operator pos:line="459" pos:column="71">+</op:operator> <lit:literal type="string" pos:line="459" pos:column="73">""</lit:literal> 
                <op:operator pos:line="460" pos:column="17">+</op:operator> <call><name><name pos:line="460" pos:column="19">SandoField</name><op:operator pos:line="460" pos:column="29">.</op:operator><name pos:line="460" pos:column="30">Name</name><op:operator pos:line="460" pos:column="34">.</op:operator><name pos:line="460" pos:column="35">ToString</name></name><argument_list pos:line="460" pos:column="43">()</argument_list></call> <op:operator pos:line="460" pos:column="46">+</op:operator> <lit:literal type="string" pos:line="460" pos:column="48">":Simple^3 OR "</lit:literal> <op:operator pos:line="460" pos:column="64">+</op:operator>
                <call><name><name pos:line="461" pos:column="17">SandoField</name><op:operator pos:line="461" pos:column="27">.</op:operator><name pos:line="461" pos:column="28">ExtendedClasses</name><op:operator pos:line="461" pos:column="43">.</op:operator><name pos:line="461" pos:column="44">ToString</name></name><argument_list pos:line="461" pos:column="52">()</argument_list></call> <op:operator pos:line="461" pos:column="55">+</op:operator> <lit:literal type="string" pos:line="461" pos:column="57">":Simple^0.2 OR "</lit:literal> 
                <op:operator pos:line="462" pos:column="17">+</op:operator> <call><name><name pos:line="462" pos:column="19">SandoField</name><op:operator pos:line="462" pos:column="29">.</op:operator><name pos:line="462" pos:column="30">Namespace</name><op:operator pos:line="462" pos:column="39">.</op:operator><name pos:line="462" pos:column="40">ToString</name></name><argument_list pos:line="462" pos:column="48">()</argument_list></call> <op:operator pos:line="462" pos:column="51">+</op:operator> <lit:literal type="string" pos:line="462" pos:column="53">":Simple^0.05)"</lit:literal></expr></init></decl>;</decl_stmt>
		    <expr_stmt><expr><call><name><name pos:line="463" pos:column="21">Assert</name><op:operator pos:line="463" pos:column="27">.</op:operator><name pos:line="463" pos:column="28">AreEqual</name></name><argument_list pos:line="463" pos:column="36">(<argument><expr><name pos:line="463" pos:column="37">queryString</name></expr></argument>, <argument><expr><name pos:line="463" pos:column="50">actual</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="463" pos:column="58">"Created query string is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<try pos:line="464" pos:column="25">try
			<block pos:line="465" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="466" pos:column="33">Query</name></type> <name pos:line="466" pos:column="39">query</name> <init pos:line="466" pos:column="45">= <expr><op:operator pos:line="466" pos:column="47">new</op:operator> <call><name pos:line="466" pos:column="51">QueryParser</name><argument_list pos:line="466" pos:column="62">(<argument><expr><name><name pos:line="466" pos:column="63">Lucene</name><op:operator pos:line="466" pos:column="69">.</op:operator><name pos:line="466" pos:column="70">Net</name><op:operator pos:line="466" pos:column="73">.</op:operator><name pos:line="466" pos:column="74">Util</name><op:operator pos:line="466" pos:column="78">.</op:operator><name pos:line="466" pos:column="79">Version</name><op:operator pos:line="466" pos:column="86">.</op:operator><name pos:line="466" pos:column="87">LUCENE_29</name></name></expr></argument>, <argument><expr><call><name><name pos:line="466" pos:column="98">SandoField</name><op:operator pos:line="466" pos:column="108">.</op:operator><name pos:line="466" pos:column="109">Name</name><op:operator pos:line="466" pos:column="113">.</op:operator><name pos:line="466" pos:column="114">ToString</name></name><argument_list pos:line="466" pos:column="122">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="466" pos:column="126">new</op:operator> <call><name pos:line="466" pos:column="130">SimpleAnalyzer</name><argument_list pos:line="466" pos:column="144">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="466" pos:column="147">.</op:operator><call><name pos:line="466" pos:column="148">Parse</name><argument_list pos:line="466" pos:column="153">(<argument><expr><name pos:line="466" pos:column="154">queryString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="467" pos:column="33">Assert</name><op:operator pos:line="467" pos:column="39">.</op:operator><name pos:line="467" pos:column="40">NotNull</name></name><argument_list pos:line="467" pos:column="47">(<argument><expr><name pos:line="467" pos:column="48">query</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="467" pos:column="55">"Generated query object is null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block>
			<catch pos:line="469" pos:column="25">catch<parameter_list pos:line="469" pos:column="30">(<param><decl><type><name pos:line="469" pos:column="31">Exception</name></type> <name pos:line="469" pos:column="41">ex</name></decl></param>)</parameter_list>
			<block pos:line="470" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="471" pos:column="33">Assert</name><op:operator pos:line="471" pos:column="39">.</op:operator><name pos:line="471" pos:column="40">Fail</name></name><argument_list pos:line="471" pos:column="44">(<argument><expr><name><name pos:line="471" pos:column="45">ex</name><op:operator pos:line="471" pos:column="47">.</op:operator><name pos:line="471" pos:column="48">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></function>

		<function><type><attribute pos:line="475" pos:column="17">[<expr><name pos:line="475" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="476" pos:column="17">public</specifier> <name pos:line="476" pos:column="24">void</name></type> <name pos:line="476" pos:column="29">SimpleSearchCriteria_ToQueryStringCreatesValidQueryString_QuotedSearchTerm</name><parameter_list pos:line="476" pos:column="103">()</parameter_list>
		<block pos:line="477" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="478" pos:column="25">SearchCriteria</name></type> <name pos:line="478" pos:column="40">simpleSearchCriteria</name> <init pos:line="478" pos:column="61">= <expr><op:operator pos:line="478" pos:column="63">new</op:operator> <call><name pos:line="478" pos:column="67">SimpleSearchCriteria</name><argument_list pos:line="478" pos:column="87">()</argument_list></call>
			<block pos:line="479" pos:column="25">{
				<expr><name pos:line="480" pos:column="33">SearchByUsageType</name> <op:operator pos:line="480" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="480" pos:column="53">true</lit:literal></expr>,
				<expr><name pos:line="481" pos:column="33">UsageTypes</name> <op:operator pos:line="481" pos:column="44">=</op:operator> <op:operator pos:line="481" pos:column="46">new</op:operator> <call><name><name pos:line="481" pos:column="50">SortedSet</name><argument_list pos:line="481" pos:column="59">&lt;<argument><name pos:line="481" pos:column="60">UsageType</name></argument>&gt;</argument_list></name><argument_list pos:line="481" pos:column="70">()</argument_list></call>
																		<block pos:line="482" pos:column="145">{
																			<expr><name><name pos:line="483" pos:column="153">UsageType</name><op:operator pos:line="483" pos:column="162">.</op:operator><name pos:line="483" pos:column="163">Definitions</name></name></expr>
																		}</block></expr>,
				<expr><name pos:line="485" pos:column="33">SearchTerms</name> <op:operator pos:line="485" pos:column="45">=</op:operator> <op:operator pos:line="485" pos:column="47">new</op:operator> <call><name><name pos:line="485" pos:column="51">SortedSet</name><argument_list pos:line="485" pos:column="60">&lt;<argument><name pos:line="485" pos:column="61">string</name></argument>&gt;</argument_list></name><argument_list pos:line="485" pos:column="68">(<argument><expr><call><name><name pos:line="485" pos:column="69">WordSplitter</name><op:operator pos:line="485" pos:column="81">.</op:operator><name pos:line="485" pos:column="82">ExtractSearchTerms</name></name><argument_list pos:line="485" pos:column="100">(<argument><expr><lit:literal type="string" pos:line="485" pos:column="101">"\"Class Simple\""</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>
			}</block></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="487" pos:column="25">string</name></type> <name pos:line="487" pos:column="32">queryString</name> <init pos:line="487" pos:column="44">= <expr><call><name><name pos:line="487" pos:column="46">simpleSearchCriteria</name><op:operator pos:line="487" pos:column="66">.</op:operator><name pos:line="487" pos:column="67">ToQueryString</name></name><argument_list pos:line="487" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="488" pos:column="25">Assert</name><op:operator pos:line="488" pos:column="31">.</op:operator><name pos:line="488" pos:column="32">AreEqual</name></name><argument_list pos:line="488" pos:column="40">(<argument><expr><name pos:line="488" pos:column="41">queryString</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="488" pos:column="54">"("</lit:literal> <op:operator pos:line="488" pos:column="58">+</op:operator> <call><name><name pos:line="488" pos:column="60">SandoField</name><op:operator pos:line="488" pos:column="70">.</op:operator><name pos:line="488" pos:column="71">Name</name><op:operator pos:line="488" pos:column="75">.</op:operator><name pos:line="488" pos:column="76">ToString</name></name><argument_list pos:line="488" pos:column="84">()</argument_list></call> <op:operator pos:line="488" pos:column="87">+</op:operator> <lit:literal type="string" pos:line="488" pos:column="89">":*Class?Simple*^3)"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="488" pos:column="111">"Created query string is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<try pos:line="489" pos:column="25">try
			<block pos:line="490" pos:column="25">{
                <decl_stmt><decl><type><name pos:line="491" pos:column="17">var</name></type> <name pos:line="491" pos:column="21">parser</name> <init pos:line="491" pos:column="28">= <expr><op:operator pos:line="491" pos:column="30">new</op:operator> <call><name pos:line="491" pos:column="34">QueryParser</name><argument_list pos:line="491" pos:column="45">(<argument><expr><name><name pos:line="491" pos:column="46">Lucene</name><op:operator pos:line="491" pos:column="52">.</op:operator><name pos:line="491" pos:column="53">Net</name><op:operator pos:line="491" pos:column="56">.</op:operator><name pos:line="491" pos:column="57">Util</name><op:operator pos:line="491" pos:column="61">.</op:operator><name pos:line="491" pos:column="62">Version</name><op:operator pos:line="491" pos:column="69">.</op:operator><name pos:line="491" pos:column="70">LUCENE_29</name></name></expr></argument>, <argument><expr><call><name><name pos:line="491" pos:column="81">SandoField</name><op:operator pos:line="491" pos:column="91">.</op:operator><name pos:line="491" pos:column="92">Name</name><op:operator pos:line="491" pos:column="96">.</op:operator><name pos:line="491" pos:column="97">ToString</name></name><argument_list pos:line="491" pos:column="105">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="491" pos:column="109">new</op:operator> <call><name pos:line="491" pos:column="113">SimpleAnalyzer</name><argument_list pos:line="491" pos:column="127">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="492" pos:column="17">parser</name><op:operator pos:line="492" pos:column="23">.</op:operator><name pos:line="492" pos:column="24">SetAllowLeadingWildcard</name></name><argument_list pos:line="492" pos:column="47">(<argument><expr><lit:literal type="boolean" pos:line="492" pos:column="48">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name pos:line="493" pos:column="33">Query</name></type> <name pos:line="493" pos:column="39">query</name> <init pos:line="493" pos:column="45">= <expr><call><name><name pos:line="493" pos:column="47">parser</name><op:operator pos:line="493" pos:column="53">.</op:operator><name pos:line="493" pos:column="54">Parse</name></name><argument_list pos:line="493" pos:column="59">(<argument><expr><name pos:line="493" pos:column="60">queryString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="494" pos:column="33">Assert</name><op:operator pos:line="494" pos:column="39">.</op:operator><name pos:line="494" pos:column="40">NotNull</name></name><argument_list pos:line="494" pos:column="47">(<argument><expr><name pos:line="494" pos:column="48">query</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="494" pos:column="55">"Generated query object is null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block>
			<catch pos:line="496" pos:column="25">catch<parameter_list pos:line="496" pos:column="30">(<param><decl><type><name pos:line="496" pos:column="31">Exception</name></type> <name pos:line="496" pos:column="41">ex</name></decl></param>)</parameter_list>
			<block pos:line="497" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="498" pos:column="33">Assert</name><op:operator pos:line="498" pos:column="39">.</op:operator><name pos:line="498" pos:column="40">Fail</name></name><argument_list pos:line="498" pos:column="44">(<argument><expr><name><name pos:line="498" pos:column="45">ex</name><op:operator pos:line="498" pos:column="47">.</op:operator><name pos:line="498" pos:column="48">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></function>

		<function><type><attribute pos:line="502" pos:column="17">[<expr><name pos:line="502" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="503" pos:column="17">public</specifier> <name pos:line="503" pos:column="24">void</name></type> <name pos:line="503" pos:column="29">SimpleSearchCriteria_ToQueryStringCreatesValidQueryString_AllConditions</name><parameter_list pos:line="503" pos:column="100">()</parameter_list>
		<block pos:line="504" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="505" pos:column="25">SearchCriteria</name></type> <name pos:line="505" pos:column="40">simpleSearchCriteria</name> <init pos:line="505" pos:column="61">= <expr><op:operator pos:line="505" pos:column="63">new</op:operator> <call><name pos:line="505" pos:column="67">SimpleSearchCriteria</name><argument_list pos:line="505" pos:column="87">()</argument_list></call>
													<block pos:line="506" pos:column="105">{
														<expr><name pos:line="507" pos:column="113">SearchByAccessLevel</name> <op:operator pos:line="507" pos:column="133">=</op:operator> <lit:literal type="boolean" pos:line="507" pos:column="135">true</lit:literal></expr>,
														<expr><name pos:line="508" pos:column="113">AccessLevels</name> <op:operator pos:line="508" pos:column="126">=</op:operator> <op:operator pos:line="508" pos:column="128">new</op:operator> <call><name><name pos:line="508" pos:column="132">SortedSet</name><argument_list pos:line="508" pos:column="141">&lt;<argument><name pos:line="508" pos:column="142">AccessLevel</name></argument>&gt;</argument_list></name><argument_list pos:line="508" pos:column="154">()</argument_list></call>
																		<block pos:line="509" pos:column="145">{
																			<expr><name><name pos:line="510" pos:column="153">AccessLevel</name><op:operator pos:line="510" pos:column="164">.</op:operator><name pos:line="510" pos:column="165">Public</name></name></expr>,
																			<expr><name><name pos:line="511" pos:column="153">AccessLevel</name><op:operator pos:line="511" pos:column="164">.</op:operator><name pos:line="511" pos:column="165">Protected</name></name></expr>
																		}</block></expr>,
                                                        <expr><name pos:line="513" pos:column="57">SearchByFileExtension</name> <op:operator pos:line="513" pos:column="79">=</op:operator> <lit:literal type="boolean" pos:line="513" pos:column="81">true</lit:literal></expr>,
                                                        <expr><name pos:line="514" pos:column="57">FileExtensions</name> <op:operator pos:line="514" pos:column="72">=</op:operator> <op:operator pos:line="514" pos:column="74">new</op:operator> <call><name><name pos:line="514" pos:column="78">SortedSet</name><argument_list pos:line="514" pos:column="87">&lt;<argument><name pos:line="514" pos:column="88">string</name></argument>&gt;</argument_list></name><argument_list pos:line="514" pos:column="95">()</argument_list></call>
																	<block pos:line="515" pos:column="137">{
																		<expr><lit:literal type="string" pos:line="516" pos:column="145">".cs"</lit:literal></expr>,
																		<expr><lit:literal type="string" pos:line="517" pos:column="145">".h"</lit:literal></expr>
																	}</block></expr>,
														<expr><name pos:line="519" pos:column="113">SearchByLocation</name> <op:operator pos:line="519" pos:column="130">=</op:operator> <lit:literal type="boolean" pos:line="519" pos:column="132">true</lit:literal></expr>,
														<expr><name pos:line="520" pos:column="113">Locations</name> <op:operator pos:line="520" pos:column="123">=</op:operator> <op:operator pos:line="520" pos:column="125">new</op:operator> <call><name><name pos:line="520" pos:column="129">SortedSet</name><argument_list pos:line="520" pos:column="138">&lt;<argument><name pos:line="520" pos:column="139">string</name></argument>&gt;</argument_list></name><argument_list pos:line="520" pos:column="146">()</argument_list></call>
																	<block pos:line="521" pos:column="137">{
																		<expr><lit:literal type="string" pos:line="522" pos:column="145">"C:/Project/*.cs"</lit:literal></expr>,
																		<expr><lit:literal type="string" pos:line="523" pos:column="145">"C:/Project2/*.cs"</lit:literal></expr>
																	}</block></expr>,
														<expr><name pos:line="525" pos:column="113">SearchByProgramElementType</name> <op:operator pos:line="525" pos:column="140">=</op:operator> <lit:literal type="boolean" pos:line="525" pos:column="142">true</lit:literal></expr>,
														<expr><name pos:line="526" pos:column="113">ProgramElementTypes</name> <op:operator pos:line="526" pos:column="133">=</op:operator> <op:operator pos:line="526" pos:column="135">new</op:operator> <call><name><name pos:line="526" pos:column="139">SortedSet</name><argument_list pos:line="526" pos:column="148">&lt;<argument><name pos:line="526" pos:column="149">ProgramElementType</name></argument>&gt;</argument_list></name><argument_list pos:line="526" pos:column="168">()</argument_list></call>
																				<block pos:line="527" pos:column="161">{
																					<expr><name><name pos:line="528" pos:column="169">ProgramElementType</name><op:operator pos:line="528" pos:column="187">.</op:operator><name pos:line="528" pos:column="188">Property</name></name></expr>,
																					<expr><name><name pos:line="529" pos:column="169">ProgramElementType</name><op:operator pos:line="529" pos:column="187">.</op:operator><name pos:line="529" pos:column="188">Class</name></name></expr>,
																					<expr><name><name pos:line="530" pos:column="169">ProgramElementType</name><op:operator pos:line="530" pos:column="187">.</op:operator><name pos:line="530" pos:column="188">Enum</name></name></expr>
																				}</block></expr>,
														<expr><name pos:line="532" pos:column="113">SearchByUsageType</name> <op:operator pos:line="532" pos:column="131">=</op:operator> <lit:literal type="boolean" pos:line="532" pos:column="133">true</lit:literal></expr>,
														<expr><name pos:line="533" pos:column="113">UsageTypes</name> <op:operator pos:line="533" pos:column="124">=</op:operator> <op:operator pos:line="533" pos:column="126">new</op:operator> <call><name><name pos:line="533" pos:column="130">SortedSet</name><argument_list pos:line="533" pos:column="139">&lt;<argument><name pos:line="533" pos:column="140">UsageType</name></argument>&gt;</argument_list></name><argument_list pos:line="533" pos:column="150">()</argument_list></call>
																		<block pos:line="534" pos:column="145">{
																			<expr><name><name pos:line="535" pos:column="153">UsageType</name><op:operator pos:line="535" pos:column="162">.</op:operator><name pos:line="535" pos:column="163">ExtendedClasses</name></name></expr>,
																			<expr><name><name pos:line="536" pos:column="153">UsageType</name><op:operator pos:line="536" pos:column="162">.</op:operator><name pos:line="536" pos:column="163">Definitions</name></name></expr>,
																			<expr><name><name pos:line="537" pos:column="153">UsageType</name><op:operator pos:line="537" pos:column="162">.</op:operator><name pos:line="537" pos:column="163">NamespaceNames</name></name></expr>
																		}</block></expr>,
														<expr><name pos:line="539" pos:column="113">SearchTerms</name> <op:operator pos:line="539" pos:column="125">=</op:operator> <op:operator pos:line="539" pos:column="127">new</op:operator> <call><name><name pos:line="539" pos:column="131">SortedSet</name><argument_list pos:line="539" pos:column="140">&lt;<argument><name pos:line="539" pos:column="141">string</name></argument>&gt;</argument_list></name><argument_list pos:line="539" pos:column="148">()</argument_list></call>
																		<block pos:line="540" pos:column="145">{
																			<expr><lit:literal type="string" pos:line="541" pos:column="153">"SimpleClass"</lit:literal></expr>
																		}</block></expr>
													}</block></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="544" pos:column="25">string</name></type> <name pos:line="544" pos:column="32">queryString</name> <init pos:line="544" pos:column="44">= <expr><call><name><name pos:line="544" pos:column="46">simpleSearchCriteria</name><op:operator pos:line="544" pos:column="66">.</op:operator><name pos:line="544" pos:column="67">ToQueryString</name></name><argument_list pos:line="544" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="545" pos:column="25">Assert</name><op:operator pos:line="545" pos:column="31">.</op:operator><name pos:line="545" pos:column="32">AreEqual</name></name><argument_list pos:line="545" pos:column="40">(<argument><expr><name pos:line="545" pos:column="41">queryString</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="545" pos:column="54">"("</lit:literal> <op:operator pos:line="545" pos:column="58">+</op:operator> <call><name><name pos:line="545" pos:column="60">SandoField</name><op:operator pos:line="545" pos:column="70">.</op:operator><name pos:line="545" pos:column="71">AccessLevel</name><op:operator pos:line="545" pos:column="82">.</op:operator><name pos:line="545" pos:column="83">ToString</name></name><argument_list pos:line="545" pos:column="91">()</argument_list></call> <op:operator pos:line="545" pos:column="94">+</op:operator> <lit:literal type="string" pos:line="545" pos:column="96">":protected OR "</lit:literal> <op:operator pos:line="545" pos:column="113">+</op:operator> 
                                            <call><name><name pos:line="546" pos:column="45">SandoField</name><op:operator pos:line="546" pos:column="55">.</op:operator><name pos:line="546" pos:column="56">AccessLevel</name><op:operator pos:line="546" pos:column="67">.</op:operator><name pos:line="546" pos:column="68">ToString</name></name><argument_list pos:line="546" pos:column="76">()</argument_list></call> <op:operator pos:line="546" pos:column="79">+</op:operator> <lit:literal type="string" pos:line="546" pos:column="81">":public) AND "</lit:literal> <op:operator pos:line="546" pos:column="97">+</op:operator>
										<lit:literal type="string" pos:line="547" pos:column="81">"("</lit:literal> <op:operator pos:line="547" pos:column="85">+</op:operator> <call><name><name pos:line="547" pos:column="87">SandoField</name><op:operator pos:line="547" pos:column="97">.</op:operator><name pos:line="547" pos:column="98">ProgramElementType</name><op:operator pos:line="547" pos:column="116">.</op:operator><name pos:line="547" pos:column="117">ToString</name></name><argument_list pos:line="547" pos:column="125">()</argument_list></call> <op:operator pos:line="547" pos:column="128">+</op:operator> <lit:literal type="string" pos:line="547" pos:column="130">":property OR "</lit:literal> 
                                         <op:operator pos:line="548" pos:column="42">+</op:operator> <call><name><name pos:line="548" pos:column="44">SandoField</name><op:operator pos:line="548" pos:column="54">.</op:operator><name pos:line="548" pos:column="55">ProgramElementType</name><op:operator pos:line="548" pos:column="73">.</op:operator><name pos:line="548" pos:column="74">ToString</name></name><argument_list pos:line="548" pos:column="82">()</argument_list></call> <op:operator pos:line="548" pos:column="85">+</op:operator> <lit:literal type="string" pos:line="548" pos:column="87">":enum OR "</lit:literal> <op:operator pos:line="548" pos:column="99">+</op:operator> 
                                         <call><name><name pos:line="549" pos:column="42">SandoField</name><op:operator pos:line="549" pos:column="52">.</op:operator><name pos:line="549" pos:column="53">ProgramElementType</name><op:operator pos:line="549" pos:column="71">.</op:operator><name pos:line="549" pos:column="72">ToString</name></name><argument_list pos:line="549" pos:column="80">()</argument_list></call> <op:operator pos:line="549" pos:column="83">+</op:operator> <lit:literal type="string" pos:line="549" pos:column="85">":class) AND "</lit:literal> <op:operator pos:line="549" pos:column="100">+</op:operator>
                                        <lit:literal type="string" pos:line="550" pos:column="41">"("</lit:literal> <op:operator pos:line="550" pos:column="45">+</op:operator> <call><name><name pos:line="550" pos:column="47">SandoField</name><op:operator pos:line="550" pos:column="57">.</op:operator><name pos:line="550" pos:column="58">FileExtension</name><op:operator pos:line="550" pos:column="71">.</op:operator><name pos:line="550" pos:column="72">ToString</name></name><argument_list pos:line="550" pos:column="80">()</argument_list></call> <op:operator pos:line="550" pos:column="83">+</op:operator> <lit:literal type="string" pos:line="550" pos:column="85">":\".cs\" OR "</lit:literal> <op:operator pos:line="550" pos:column="100">+</op:operator> 
                                        <call><name><name pos:line="551" pos:column="41">SandoField</name><op:operator pos:line="551" pos:column="51">.</op:operator><name pos:line="551" pos:column="52">FileExtension</name><op:operator pos:line="551" pos:column="65">.</op:operator><name pos:line="551" pos:column="66">ToString</name></name><argument_list pos:line="551" pos:column="74">()</argument_list></call> <op:operator pos:line="551" pos:column="77">+</op:operator> <lit:literal type="string" pos:line="551" pos:column="79">":\".h\") AND "</lit:literal> <op:operator pos:line="551" pos:column="95">+</op:operator>
                                        <lit:literal type="string" pos:line="552" pos:column="41">"("</lit:literal> <op:operator pos:line="552" pos:column="45">+</op:operator> <call><name><name pos:line="552" pos:column="47">SandoField</name><op:operator pos:line="552" pos:column="57">.</op:operator><name pos:line="552" pos:column="58">FullFilePath</name><op:operator pos:line="552" pos:column="70">.</op:operator><name pos:line="552" pos:column="71">ToString</name></name><argument_list pos:line="552" pos:column="79">()</argument_list></call> <op:operator pos:line="552" pos:column="82">+</op:operator> <lit:literal type="string" pos:line="552" pos:column="84">":\"C:/Project/*.cs\" OR "</lit:literal> 
                                        <op:operator pos:line="553" pos:column="41">+</op:operator> <call><name><name pos:line="553" pos:column="43">SandoField</name><op:operator pos:line="553" pos:column="53">.</op:operator><name pos:line="553" pos:column="54">FullFilePath</name><op:operator pos:line="553" pos:column="66">.</op:operator><name pos:line="553" pos:column="67">ToString</name></name><argument_list pos:line="553" pos:column="75">()</argument_list></call> <op:operator pos:line="553" pos:column="78">+</op:operator> <lit:literal type="string" pos:line="553" pos:column="80">":\"C:/Project2/*.cs\") AND "</lit:literal> <op:operator pos:line="553" pos:column="110">+</op:operator>
                                        <lit:literal type="string" pos:line="554" pos:column="41">"("</lit:literal> <op:operator pos:line="554" pos:column="45">+</op:operator> <call><name><name pos:line="554" pos:column="47">SandoField</name><op:operator pos:line="554" pos:column="57">.</op:operator><name pos:line="554" pos:column="58">Name</name><op:operator pos:line="554" pos:column="62">.</op:operator><name pos:line="554" pos:column="63">ToString</name></name><argument_list pos:line="554" pos:column="71">()</argument_list></call> <op:operator pos:line="554" pos:column="74">+</op:operator> <lit:literal type="string" pos:line="554" pos:column="76">":SimpleClass^3 OR "</lit:literal> 
                                        <op:operator pos:line="555" pos:column="41">+</op:operator> <call><name><name pos:line="555" pos:column="43">SandoField</name><op:operator pos:line="555" pos:column="53">.</op:operator><name pos:line="555" pos:column="54">ExtendedClasses</name><op:operator pos:line="555" pos:column="69">.</op:operator><name pos:line="555" pos:column="70">ToString</name></name><argument_list pos:line="555" pos:column="78">()</argument_list></call> <op:operator pos:line="555" pos:column="81">+</op:operator> <lit:literal type="string" pos:line="555" pos:column="83">":SimpleClass^0.2 OR "</lit:literal> 
                                        <op:operator pos:line="556" pos:column="41">+</op:operator> <call><name><name pos:line="556" pos:column="43">SandoField</name><op:operator pos:line="556" pos:column="53">.</op:operator><name pos:line="556" pos:column="54">Namespace</name><op:operator pos:line="556" pos:column="63">.</op:operator><name pos:line="556" pos:column="64">ToString</name></name><argument_list pos:line="556" pos:column="72">()</argument_list></call> <op:operator pos:line="556" pos:column="75">+</op:operator> <lit:literal type="string" pos:line="556" pos:column="77">":SimpleClass^0.05)"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="556" pos:column="99">"Created query string is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<try pos:line="557" pos:column="25">try
			<block pos:line="558" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="559" pos:column="33">Query</name></type> <name pos:line="559" pos:column="39">query</name> <init pos:line="559" pos:column="45">= <expr><op:operator pos:line="559" pos:column="47">new</op:operator> <call><name pos:line="559" pos:column="51">QueryParser</name><argument_list pos:line="559" pos:column="62">(<argument><expr><name><name pos:line="559" pos:column="63">Lucene</name><op:operator pos:line="559" pos:column="69">.</op:operator><name pos:line="559" pos:column="70">Net</name><op:operator pos:line="559" pos:column="73">.</op:operator><name pos:line="559" pos:column="74">Util</name><op:operator pos:line="559" pos:column="78">.</op:operator><name pos:line="559" pos:column="79">Version</name><op:operator pos:line="559" pos:column="86">.</op:operator><name pos:line="559" pos:column="87">LUCENE_29</name></name></expr></argument>, <argument><expr><call><name><name pos:line="559" pos:column="98">SandoField</name><op:operator pos:line="559" pos:column="108">.</op:operator><name pos:line="559" pos:column="109">Name</name><op:operator pos:line="559" pos:column="113">.</op:operator><name pos:line="559" pos:column="114">ToString</name></name><argument_list pos:line="559" pos:column="122">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="559" pos:column="126">new</op:operator> <call><name pos:line="559" pos:column="130">SimpleAnalyzer</name><argument_list pos:line="559" pos:column="144">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="559" pos:column="147">.</op:operator><call><name pos:line="559" pos:column="148">Parse</name><argument_list pos:line="559" pos:column="153">(<argument><expr><name pos:line="559" pos:column="154">queryString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="560" pos:column="33">Assert</name><op:operator pos:line="560" pos:column="39">.</op:operator><name pos:line="560" pos:column="40">NotNull</name></name><argument_list pos:line="560" pos:column="47">(<argument><expr><name pos:line="560" pos:column="48">query</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="560" pos:column="55">"Generated query object is null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block>
			<catch pos:line="562" pos:column="25">catch<parameter_list pos:line="562" pos:column="30">(<param><decl><type><name pos:line="562" pos:column="31">Exception</name></type> <name pos:line="562" pos:column="41">ex</name></decl></param>)</parameter_list>
			<block pos:line="563" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="564" pos:column="33">Assert</name><op:operator pos:line="564" pos:column="39">.</op:operator><name pos:line="564" pos:column="40">Fail</name></name><argument_list pos:line="564" pos:column="44">(<argument><expr><name><name pos:line="564" pos:column="45">ex</name><op:operator pos:line="564" pos:column="47">.</op:operator><name pos:line="564" pos:column="48">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></function>

        <function><type><attribute pos:line="568" pos:column="9">[<expr><name pos:line="568" pos:column="10">Test</name></expr>]</attribute>
		<specifier pos:line="569" pos:column="17">public</specifier> <name pos:line="569" pos:column="24">void</name></type> <name pos:line="569" pos:column="29">SimpleSearchCriteria_ToQueryStringCreatesValidQueryString_SpecialCharacters</name><parameter_list pos:line="569" pos:column="104">()</parameter_list>
		<block pos:line="570" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="571" pos:column="25">SearchCriteria</name></type> <name pos:line="571" pos:column="40">simpleSearchCriteria</name> <init pos:line="571" pos:column="61">= <expr><op:operator pos:line="571" pos:column="63">new</op:operator> <call><name pos:line="571" pos:column="67">SimpleSearchCriteria</name><argument_list pos:line="571" pos:column="87">()</argument_list></call>
													<block pos:line="572" pos:column="105">{
                                                        <expr><name pos:line="573" pos:column="57">SearchByUsageType</name> <op:operator pos:line="573" pos:column="75">=</op:operator> <lit:literal type="boolean" pos:line="573" pos:column="77">true</lit:literal></expr>,
                                                        <expr><name pos:line="574" pos:column="57">UsageTypes</name> <op:operator pos:line="574" pos:column="68">=</op:operator> <op:operator pos:line="574" pos:column="70">new</op:operator> <call><name><name pos:line="574" pos:column="74">SortedSet</name><argument_list pos:line="574" pos:column="83">&lt;<argument><name pos:line="574" pos:column="84">UsageType</name></argument>&gt;</argument_list></name><argument_list pos:line="574" pos:column="94">()</argument_list></call>
																		<block pos:line="575" pos:column="145">{
																			<expr><name><name pos:line="576" pos:column="153">UsageType</name><op:operator pos:line="576" pos:column="162">.</op:operator><name pos:line="576" pos:column="163">Bodies</name></name></expr>
																		}</block></expr>,
														<expr><name pos:line="578" pos:column="113">SearchTerms</name> <op:operator pos:line="578" pos:column="125">=</op:operator> <op:operator pos:line="578" pos:column="127">new</op:operator> <call><name><name pos:line="578" pos:column="131">SortedSet</name><argument_list pos:line="578" pos:column="140">&lt;<argument><name pos:line="578" pos:column="141">string</name></argument>&gt;</argument_list></name><argument_list pos:line="578" pos:column="148">()</argument_list></call>
																		<block pos:line="579" pos:column="145">{
																			<expr><lit:literal type="string" pos:line="580" pos:column="153">"\"+ - &amp;&amp; || ! ( ) { } [ ] ^ ~ : \""</lit:literal></expr>
																		}</block></expr>
													}</block></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="583" pos:column="25">string</name></type> <name pos:line="583" pos:column="32">queryString</name> <init pos:line="583" pos:column="44">= <expr><call><name><name pos:line="583" pos:column="46">simpleSearchCriteria</name><op:operator pos:line="583" pos:column="66">.</op:operator><name pos:line="583" pos:column="67">ToQueryString</name></name><argument_list pos:line="583" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="584" pos:column="13">Assert</name><op:operator pos:line="584" pos:column="19">.</op:operator><name pos:line="584" pos:column="20">AreEqual</name></name><argument_list pos:line="584" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="584" pos:column="29">"(Body:*\\+?\\-?\\&amp;\\&amp;?\\|\\|?\\!?\\(?\\)?\\{?\\}?\\[?\\]?\\^?\\~?\\:?*^4)"</lit:literal></expr></argument>, <argument><expr><name pos:line="584" pos:column="106">queryString</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="584" pos:column="119">"Created query string is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<try pos:line="585" pos:column="25">try
			<block pos:line="586" pos:column="25">{
                <decl_stmt><decl><type><name pos:line="587" pos:column="17">var</name></type> <name pos:line="587" pos:column="21">parser</name> <init pos:line="587" pos:column="28">= <expr><op:operator pos:line="587" pos:column="30">new</op:operator> <call><name pos:line="587" pos:column="34">QueryParser</name><argument_list pos:line="587" pos:column="45">(<argument><expr><name><name pos:line="587" pos:column="46">Lucene</name><op:operator pos:line="587" pos:column="52">.</op:operator><name pos:line="587" pos:column="53">Net</name><op:operator pos:line="587" pos:column="56">.</op:operator><name pos:line="587" pos:column="57">Util</name><op:operator pos:line="587" pos:column="61">.</op:operator><name pos:line="587" pos:column="62">Version</name><op:operator pos:line="587" pos:column="69">.</op:operator><name pos:line="587" pos:column="70">LUCENE_29</name></name></expr></argument>, <argument><expr><call><name><name pos:line="587" pos:column="81">SandoField</name><op:operator pos:line="587" pos:column="91">.</op:operator><name pos:line="587" pos:column="92">Name</name><op:operator pos:line="587" pos:column="96">.</op:operator><name pos:line="587" pos:column="97">ToString</name></name><argument_list pos:line="587" pos:column="105">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="587" pos:column="109">new</op:operator> <call><name pos:line="587" pos:column="113">SimpleAnalyzer</name><argument_list pos:line="587" pos:column="127">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="588" pos:column="17">parser</name><op:operator pos:line="588" pos:column="23">.</op:operator><name pos:line="588" pos:column="24">SetAllowLeadingWildcard</name></name><argument_list pos:line="588" pos:column="47">(<argument><expr><lit:literal type="boolean" pos:line="588" pos:column="48">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name pos:line="589" pos:column="33">Query</name></type> <name pos:line="589" pos:column="39">query</name> <init pos:line="589" pos:column="45">= <expr><call><name><name pos:line="589" pos:column="47">parser</name><op:operator pos:line="589" pos:column="53">.</op:operator><name pos:line="589" pos:column="54">Parse</name></name><argument_list pos:line="589" pos:column="59">(<argument><expr><name pos:line="589" pos:column="60">queryString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="590" pos:column="33">Assert</name><op:operator pos:line="590" pos:column="39">.</op:operator><name pos:line="590" pos:column="40">NotNull</name></name><argument_list pos:line="590" pos:column="47">(<argument><expr><name pos:line="590" pos:column="48">query</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="590" pos:column="55">"Generated query object is null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block>
			<catch pos:line="592" pos:column="25">catch<parameter_list pos:line="592" pos:column="30">(<param><decl><type><name pos:line="592" pos:column="31">Exception</name></type> <name pos:line="592" pos:column="41">ex</name></decl></param>)</parameter_list>
			<block pos:line="593" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="594" pos:column="33">Assert</name><op:operator pos:line="594" pos:column="39">.</op:operator><name pos:line="594" pos:column="40">Fail</name></name><argument_list pos:line="594" pos:column="44">(<argument><expr><name><name pos:line="594" pos:column="45">ex</name><op:operator pos:line="594" pos:column="47">.</op:operator><name pos:line="594" pos:column="48">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></function>

		<function><type><attribute pos:line="598" pos:column="17">[<expr><name pos:line="598" pos:column="18">SetUp</name></expr>]</attribute>
		<specifier pos:line="599" pos:column="17">public</specifier> <name pos:line="599" pos:column="24">void</name></type> <name pos:line="599" pos:column="29">resetContract</name><parameter_list pos:line="599" pos:column="42">()</parameter_list>
		<block pos:line="600" pos:column="17">{
            <decl_stmt><decl><type><name pos:line="601" pos:column="13">ExtensionPointsRepository</name></type> <name pos:line="601" pos:column="39">extensionPointsRepository</name> <init pos:line="601" pos:column="65">= <expr><name><name pos:line="601" pos:column="67">ExtensionPointsRepository</name><op:operator pos:line="601" pos:column="92">.</op:operator><name pos:line="601" pos:column="93">Instance</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="602" pos:column="13">extensionPointsRepository</name><op:operator pos:line="602" pos:column="38">.</op:operator><name pos:line="602" pos:column="39">RegisterWordSplitterImplementation</name></name><argument_list pos:line="602" pos:column="73">(<argument><expr><op:operator pos:line="602" pos:column="74">new</op:operator> <call><name pos:line="602" pos:column="78">WordSplitter</name><argument_list pos:line="602" pos:column="90">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="603" pos:column="13">extensionPointsRepository</name><op:operator pos:line="603" pos:column="38">.</op:operator><name pos:line="603" pos:column="39">RegisterQueryWeightsSupplierImplementation</name></name><argument_list pos:line="603" pos:column="81">(<argument><expr><op:operator pos:line="603" pos:column="82">new</op:operator> <call><name pos:line="603" pos:column="86">QueryWeightsSupplier</name><argument_list pos:line="603" pos:column="106">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="604" pos:column="13">extensionPointsRepository</name><op:operator pos:line="604" pos:column="38">.</op:operator><name pos:line="604" pos:column="39">RegisterQueryRewriterImplementation</name></name><argument_list pos:line="604" pos:column="74">(<argument><expr><op:operator pos:line="604" pos:column="75">new</op:operator> <call><name pos:line="604" pos:column="79">DefaultQueryRewriter</name><argument_list pos:line="604" pos:column="99">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
			<expr_stmt><expr><name pos:line="605" pos:column="25">contractFailed</name> <op:operator pos:line="605" pos:column="40">=</op:operator> <lit:literal type="boolean" pos:line="605" pos:column="42">false</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="606" pos:column="25">Contract</name><op:operator pos:line="606" pos:column="33">.</op:operator><name pos:line="606" pos:column="34">ContractFailed</name></name> <op:operator pos:line="606" pos:column="49">+=</op:operator> <lambda><parameter_list pos:line="606" pos:column="52">(<param><decl><name pos:line="606" pos:column="53">sender</name></decl></param>, <param><decl><name pos:line="606" pos:column="61">e</name></decl></param>)</parameter_list> <op:operator pos:line="606" pos:column="64">=&gt;</op:operator>
			<block pos:line="607" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="608" pos:column="33">e</name><op:operator pos:line="608" pos:column="34">.</op:operator><name pos:line="608" pos:column="35">SetHandled</name></name><argument_list pos:line="608" pos:column="45">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="609" pos:column="33">e</name><op:operator pos:line="609" pos:column="34">.</op:operator><name pos:line="609" pos:column="35">SetUnwind</name></name><argument_list pos:line="609" pos:column="44">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="610" pos:column="33">contractFailed</name> <op:operator pos:line="610" pos:column="48">=</op:operator> <lit:literal type="boolean" pos:line="610" pos:column="50">true</lit:literal></expr>;</expr_stmt>
			}</block></lambda></expr>;</expr_stmt>
		}</block></function>

		<decl_stmt><decl><type><specifier pos:line="614" pos:column="17">private</specifier> <name pos:line="614" pos:column="25">bool</name></type> <name pos:line="614" pos:column="30">contractFailed</name></decl>;</decl_stmt>
	}</block></class>
}</block></namespace>
</unit>
