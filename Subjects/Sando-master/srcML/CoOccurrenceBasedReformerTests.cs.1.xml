<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Core\Core.UnitTests\Tools\CoOccurrenceBasedReformerTests.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Text</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">NUnit</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">Framework</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Sando</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">Core</name><op:operator pos:line="6" pos:column="17">.</op:operator><name pos:line="6" pos:column="18">QueryRefomers</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Sando</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">Core</name><op:operator pos:line="7" pos:column="17">.</op:operator><name pos:line="7" pos:column="18">Tools</name></name>;</using>

<namespace pos:line="9" pos:column="1">namespace <name><name pos:line="9" pos:column="11">Sando</name><op:operator pos:line="9" pos:column="16">.</op:operator><name pos:line="9" pos:column="17">Core</name><op:operator pos:line="9" pos:column="21">.</op:operator><name pos:line="9" pos:column="22">UnitTests</name><op:operator pos:line="9" pos:column="31">.</op:operator><name pos:line="9" pos:column="32">Tools</name></name>
<block pos:line="10" pos:column="1">{
    <class><attribute pos:line="11" pos:column="5">[<expr><name pos:line="11" pos:column="6">TestFixture</name></expr>]</attribute>
    class <name pos:line="12" pos:column="11">CoOccurrenceBasedReformerTests</name> <super pos:line="12" pos:column="42">: <name pos:line="12" pos:column="44">RandomStringBasedTests</name></super>
    <block pos:line="13" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="14" pos:column="9">private</specifier> <specifier pos:line="14" pos:column="17">readonly</specifier> <name pos:line="14" pos:column="26">DictionaryBasedSplitter</name></type> <name pos:line="14" pos:column="50">dictionary</name></decl>;</decl_stmt>
        

        <constructor><specifier pos:line="17" pos:column="9">public</specifier> <name pos:line="17" pos:column="16">CoOccurrenceBasedReformerTests</name><parameter_list pos:line="17" pos:column="46">()</parameter_list>
        <block pos:line="18" pos:column="9">{
            <expr_stmt><expr><name pos:line="19" pos:column="13">dictionary</name> <op:operator pos:line="19" pos:column="24">=</op:operator> <op:operator pos:line="19" pos:column="26">new</op:operator> <call><name pos:line="19" pos:column="30">DictionaryBasedSplitter</name><argument_list pos:line="19" pos:column="53">()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><attribute pos:line="22" pos:column="9">[<expr><name pos:line="22" pos:column="10">SetUp</name></expr>]</attribute>
        <specifier pos:line="23" pos:column="9">public</specifier> <name pos:line="23" pos:column="16">void</name></type> <name pos:line="23" pos:column="21">Intialize</name><parameter_list pos:line="23" pos:column="30">()</parameter_list>
        <block pos:line="24" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="25" pos:column="13">dictionary</name><op:operator pos:line="25" pos:column="23">.</op:operator><name pos:line="25" pos:column="24">Initialize</name></name><argument_list pos:line="25" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="25" pos:column="35">@"TestFiles\"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="28" pos:column="9">private</specifier> <name><name pos:line="28" pos:column="17">IEnumerable</name><argument_list pos:line="28" pos:column="28">&lt;<argument><name pos:line="28" pos:column="29">string</name></argument>&gt;</argument_list></name></type> <name pos:line="28" pos:column="37">GetReformedWord</name><parameter_list pos:line="28" pos:column="52">(<param><decl><type><name pos:line="28" pos:column="53">String</name></type> <name pos:line="28" pos:column="60">target</name></decl></param>, <param><decl><type><name><name pos:line="28" pos:column="68">IEnumerable</name><argument_list pos:line="28" pos:column="79">&lt;<argument><name pos:line="28" pos:column="80">String</name></argument>&gt;</argument_list></name></type> <name pos:line="28" pos:column="88">context</name></decl></param>)</parameter_list>
        <block pos:line="29" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="30" pos:column="13">var</name></type> <name pos:line="30" pos:column="17">reformer</name> <init pos:line="30" pos:column="26">= <expr><op:operator pos:line="30" pos:column="28">new</op:operator> <call><name pos:line="30" pos:column="32">CoOccurrenceBasedReformer</name><argument_list pos:line="30" pos:column="57">(<argument><expr><name pos:line="30" pos:column="58">dictionary</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="31" pos:column="13">reformer</name><op:operator pos:line="31" pos:column="21">.</op:operator><name pos:line="31" pos:column="22">SetContextWords</name></name><argument_list pos:line="31" pos:column="37">(<argument><expr><name pos:line="31" pos:column="38">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="32" pos:column="13">var</name></type> <name pos:line="32" pos:column="17">list</name> <init pos:line="32" pos:column="22">= <expr><call><name><name pos:line="32" pos:column="24">reformer</name><op:operator pos:line="32" pos:column="32">.</op:operator><name pos:line="32" pos:column="33">GetReformedTarget</name></name><argument_list pos:line="32" pos:column="50">(<argument><expr><name pos:line="32" pos:column="51">target</name></expr></argument>)</argument_list></call><op:operator pos:line="32" pos:column="58">.</op:operator><call><name pos:line="32" pos:column="59">ToList</name><argument_list pos:line="32" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="33" pos:column="13">return <expr><call><name><name pos:line="33" pos:column="20">list</name><op:operator pos:line="33" pos:column="24">.</op:operator><name pos:line="33" pos:column="25">Select</name></name><argument_list pos:line="33" pos:column="31">(<argument><expr><lambda><name pos:line="33" pos:column="32">w</name> <op:operator pos:line="33" pos:column="34">=&gt;</op:operator> <name><name pos:line="33" pos:column="37">w</name><op:operator pos:line="33" pos:column="38">.</op:operator><name pos:line="33" pos:column="39">NewTerm</name></name></lambda></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="36" pos:column="9">private</specifier> <name><name pos:line="36" pos:column="17">IEnumerable</name><argument_list pos:line="36" pos:column="28">&lt;<argument><name pos:line="36" pos:column="29">String</name></argument>&gt;</argument_list></name></type> <name pos:line="36" pos:column="37">GetWordsCoOccurWithWords</name><parameter_list pos:line="36" pos:column="61">(<param><decl><type><name><name pos:line="36" pos:column="62">IEnumerable</name><argument_list pos:line="36" pos:column="73">&lt;<argument><name pos:line="36" pos:column="74">String</name></argument>&gt;</argument_list></name></type> <name pos:line="36" pos:column="82">words</name></decl></param>)</parameter_list>
        <block pos:line="37" pos:column="9">{
            <return pos:line="38" pos:column="13">return <expr><call><name><name pos:line="38" pos:column="20">words</name><op:operator pos:line="38" pos:column="25">.</op:operator><name pos:line="38" pos:column="26">Select</name></name><argument_list pos:line="38" pos:column="32">(<argument><expr><lambda><name pos:line="38" pos:column="33">w</name> <op:operator pos:line="38" pos:column="35">=&gt;</op:operator> <call><name><name pos:line="38" pos:column="38">dictionary</name><op:operator pos:line="38" pos:column="48">.</op:operator><name pos:line="38" pos:column="49">GetCoOccurredWordsAndCount</name></name><argument_list pos:line="38" pos:column="75">(<argument><expr><name pos:line="38" pos:column="76">w</name></expr></argument>)</argument_list></call><op:operator pos:line="38" pos:column="78">.</op:operator><call><name pos:line="38" pos:column="79">Select</name><argument_list pos:line="38" pos:column="85">(<argument><expr><lambda><name pos:line="38" pos:column="86">p</name> <op:operator pos:line="38" pos:column="88">=&gt;</op:operator> <name><name pos:line="38" pos:column="91">p</name><op:operator pos:line="38" pos:column="92">.</op:operator><name pos:line="38" pos:column="93">Key</name></name></lambda></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call>
                     <op:operator pos:line="39" pos:column="22">.</op:operator><call><name pos:line="39" pos:column="23">Aggregate</name><argument_list pos:line="39" pos:column="32">(<argument><expr><lambda><parameter_list pos:line="39" pos:column="33">(<param><decl><name pos:line="39" pos:column="34">list1</name></decl></param>, <param><decl><name pos:line="39" pos:column="41">list2</name></decl></param>)</parameter_list> <op:operator pos:line="39" pos:column="48">=&gt;</op:operator> <call><name><name pos:line="39" pos:column="51">list1</name><op:operator pos:line="39" pos:column="56">.</op:operator><name pos:line="39" pos:column="57">Intersect</name></name><argument_list pos:line="39" pos:column="66">(<argument><expr><name pos:line="39" pos:column="67">list2</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="39" pos:column="74">.</op:operator><call><name pos:line="39" pos:column="75">Distinct</name><argument_list pos:line="39" pos:column="83">()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="42" pos:column="9">private</specifier> <name pos:line="42" pos:column="17">void</name></type> <name pos:line="42" pos:column="22">AssertReformProperly</name><parameter_list pos:line="42" pos:column="42">(<param><decl><type><name pos:line="42" pos:column="43">String</name></type> <name pos:line="42" pos:column="50">target</name></decl></param>, <param><decl><type><name><name pos:line="42" pos:column="58">IEnumerable</name><argument_list pos:line="42" pos:column="69">&lt;<argument><name pos:line="42" pos:column="70">String</name></argument>&gt;</argument_list></name></type> <name pos:line="42" pos:column="78">context</name></decl></param>)</parameter_list>
        <block pos:line="43" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="44" pos:column="13">var</name></type> <name pos:line="44" pos:column="17">list</name> <init pos:line="44" pos:column="22">= <expr><call><name pos:line="44" pos:column="24">GetWordsCoOccurWithWords</name><argument_list pos:line="44" pos:column="48">(<argument><expr><name pos:line="44" pos:column="49">context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="45" pos:column="13">var</name></type> <name pos:line="45" pos:column="17">subList</name> <init pos:line="45" pos:column="25">= <expr><call><name pos:line="45" pos:column="27">GetReformedWord</name><argument_list pos:line="45" pos:column="42">(<argument><expr><name pos:line="45" pos:column="43">target</name></expr></argument>, <argument><expr><name pos:line="45" pos:column="51">context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="46" pos:column="13">Assert</name><op:operator pos:line="46" pos:column="19">.</op:operator><name pos:line="46" pos:column="20">IsTrue</name></name><argument_list pos:line="46" pos:column="26">(<argument><expr><call><name><name pos:line="46" pos:column="27">list</name><op:operator pos:line="46" pos:column="31">.</op:operator><name pos:line="46" pos:column="32">Any</name></name><argument_list pos:line="46" pos:column="35">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="47" pos:column="13">Assert</name><op:operator pos:line="47" pos:column="19">.</op:operator><name pos:line="47" pos:column="20">IsTrue</name></name><argument_list pos:line="47" pos:column="26">(<argument><expr><call><name><name pos:line="47" pos:column="27">subList</name><op:operator pos:line="47" pos:column="34">.</op:operator><name pos:line="47" pos:column="35">Any</name></name><argument_list pos:line="47" pos:column="38">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="48" pos:column="13">Assert</name><op:operator pos:line="48" pos:column="19">.</op:operator><name pos:line="48" pos:column="20">IsTrue</name></name><argument_list pos:line="48" pos:column="26">(<argument><expr><call><name><name pos:line="48" pos:column="27">subList</name><op:operator pos:line="48" pos:column="34">.</op:operator><name pos:line="48" pos:column="35">All</name></name><argument_list pos:line="48" pos:column="38">(<argument><expr><lambda><name pos:line="48" pos:column="39">w</name> <op:operator pos:line="48" pos:column="41">=&gt;</op:operator> <call><name><name pos:line="48" pos:column="44">list</name><op:operator pos:line="48" pos:column="48">.</op:operator><name pos:line="48" pos:column="49">Contains</name></name><argument_list pos:line="48" pos:column="57">(<argument><expr><name pos:line="48" pos:column="58">w</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="51" pos:column="9">private</specifier> <name pos:line="51" pos:column="17">void</name></type> <name pos:line="51" pos:column="22">AssertNotReformed</name><parameter_list pos:line="51" pos:column="39">(<param><decl><type><name pos:line="51" pos:column="40">String</name></type> <name pos:line="51" pos:column="47">target</name></decl></param>, <param><decl><type><name><name pos:line="51" pos:column="55">IEnumerable</name><argument_list pos:line="51" pos:column="66">&lt;<argument><name pos:line="51" pos:column="67">String</name></argument>&gt;</argument_list></name></type> <name pos:line="51" pos:column="75">context</name></decl></param>)</parameter_list>
        <block pos:line="52" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="53" pos:column="13">var</name></type> <name pos:line="53" pos:column="17">list</name> <init pos:line="53" pos:column="22">= <expr><call><name pos:line="53" pos:column="24">GetReformedWord</name><argument_list pos:line="53" pos:column="39">(<argument><expr><name pos:line="53" pos:column="40">target</name></expr></argument>, <argument><expr><name pos:line="53" pos:column="48">context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="54" pos:column="13">Assert</name><op:operator pos:line="54" pos:column="19">.</op:operator><name pos:line="54" pos:column="20">IsTrue</name></name><argument_list pos:line="54" pos:column="26">(<argument><expr><op:operator pos:line="54" pos:column="27">!</op:operator><call><name><name pos:line="54" pos:column="28">list</name><op:operator pos:line="54" pos:column="32">.</op:operator><name pos:line="54" pos:column="33">Any</name></name><argument_list pos:line="54" pos:column="36">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
            
        <function><type><attribute pos:line="57" pos:column="9">[<expr><name pos:line="57" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="58" pos:column="9">public</specifier> <name pos:line="58" pos:column="16">void</name></type> <name pos:line="58" pos:column="21">ReformWordWithoutContext</name><parameter_list pos:line="58" pos:column="45">()</parameter_list>
        <block pos:line="59" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="60" pos:column="13">Assert</name><op:operator pos:line="60" pos:column="19">.</op:operator><name pos:line="60" pos:column="20">IsTrue</name></name><argument_list pos:line="60" pos:column="26">(<argument><expr><op:operator pos:line="60" pos:column="27">!</op:operator><call><name pos:line="60" pos:column="28">GetReformedWord</name><argument_list pos:line="60" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="60" pos:column="44">""</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="60" pos:column="48">new</op:operator> <index pos:line="60" pos:column="52">[]</index><block pos:line="60" pos:column="54">{<expr><lit:literal type="string" pos:line="60" pos:column="55">""</lit:literal></expr>}</block></expr></argument>)</argument_list></call><op:operator pos:line="60" pos:column="59">.</op:operator><call><name pos:line="60" pos:column="60">Any</name><argument_list pos:line="60" pos:column="63">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="61" pos:column="13">Assert</name><op:operator pos:line="61" pos:column="19">.</op:operator><name pos:line="61" pos:column="20">IsTrue</name></name><argument_list pos:line="61" pos:column="26">(<argument><expr><op:operator pos:line="61" pos:column="27">!</op:operator><call><name pos:line="61" pos:column="28">GetReformedWord</name><argument_list pos:line="61" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="61" pos:column="44">"sando"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="61" pos:column="53">new</op:operator> <name><name pos:line="61" pos:column="57">string</name><index pos:line="61" pos:column="63">[]</index></name><block pos:line="61" pos:column="65">{}</block></expr></argument>)</argument_list></call><op:operator pos:line="61" pos:column="68">.</op:operator><call><name pos:line="61" pos:column="69">Any</name><argument_list pos:line="61" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="62" pos:column="13">Assert</name><op:operator pos:line="62" pos:column="19">.</op:operator><name pos:line="62" pos:column="20">IsTrue</name></name><argument_list pos:line="62" pos:column="26">(<argument><expr><op:operator pos:line="62" pos:column="27">!</op:operator><call><name pos:line="62" pos:column="28">GetReformedWord</name><argument_list pos:line="62" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="62" pos:column="44">"abb"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="62" pos:column="51">new</op:operator> <name><name pos:line="62" pos:column="55">string</name><index pos:line="62" pos:column="61">[]</index></name><block pos:line="62" pos:column="63">{<expr><lit:literal type="string" pos:line="62" pos:column="64">""</lit:literal></expr>}</block></expr></argument>)</argument_list></call><op:operator pos:line="62" pos:column="68">.</op:operator><call><name pos:line="62" pos:column="69">Any</name><argument_list pos:line="62" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="65" pos:column="9">[<expr><name pos:line="65" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="66" pos:column="9">public</specifier> <name pos:line="66" pos:column="16">void</name></type> <name pos:line="66" pos:column="21">ReformWordWithOneNeighborredWord</name><parameter_list pos:line="66" pos:column="53">()</parameter_list>
        <block pos:line="67" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="68" pos:column="13">AssertReformProperly</name><argument_list pos:line="68" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="68" pos:column="34">"somewiredwodnotindictionary"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="68" pos:column="65">new</op:operator> <name><name pos:line="68" pos:column="69">string</name><index pos:line="68" pos:column="75">[]</index></name> <block pos:line="68" pos:column="78">{ <expr><lit:literal type="string" pos:line="68" pos:column="80">"activator"</lit:literal></expr><op:operator pos:line="68" pos:column="91">,</op:operator> <expr><lit:literal type="string" pos:line="68" pos:column="93">"add"</lit:literal></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="69" pos:column="13">AssertReformProperly</name><argument_list pos:line="69" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="69" pos:column="34">"somewiredwodnotindictionary"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="69" pos:column="65">new</op:operator> <name><name pos:line="69" pos:column="69">string</name><index pos:line="69" pos:column="75">[]</index></name> <block pos:line="69" pos:column="78">{ <expr><lit:literal type="string" pos:line="69" pos:column="80">"allow"</lit:literal></expr><op:operator pos:line="69" pos:column="87">,</op:operator> <expr><lit:literal type="string" pos:line="69" pos:column="89">"add"</lit:literal></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="70" pos:column="13">AssertNotReformed</name><argument_list pos:line="70" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="70" pos:column="31">"sando"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="70" pos:column="40">new</op:operator> <name><name pos:line="70" pos:column="44">string</name><index pos:line="70" pos:column="50">[]</index></name><block pos:line="70" pos:column="52">{<expr><lit:literal type="string" pos:line="70" pos:column="53">"add"</lit:literal></expr><op:operator pos:line="70" pos:column="58">,</op:operator> <expr><lit:literal type="string" pos:line="70" pos:column="60">"activator"</lit:literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="71" pos:column="13">AssertNotReformed</name><argument_list pos:line="71" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="71" pos:column="31">"sando"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="71" pos:column="40">new</op:operator> <name><name pos:line="71" pos:column="44">string</name><index pos:line="71" pos:column="50">[]</index></name><block pos:line="71" pos:column="52">{<expr><lit:literal type="string" pos:line="71" pos:column="53">"add"</lit:literal></expr><op:operator pos:line="71" pos:column="58">,</op:operator> <expr><lit:literal type="string" pos:line="71" pos:column="60">"allow"</lit:literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>


    }</block></class>
}</block></namespace>
</unit>
