<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\UI\UI\Service\HelperFunctions.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2013 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Jiang Zheng (ABB Group) - Initial implementation
 *****************************************************************************/</comment>
<using pos:line="11" pos:column="1">using <name pos:line="11" pos:column="7">System</name>;</using>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">System</name><op:operator pos:line="12" pos:column="13">.</op:operator><name pos:line="12" pos:column="14">Diagnostics</name></name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">Microsoft</name><op:operator pos:line="13" pos:column="16">.</op:operator><name pos:line="13" pos:column="17">VisualStudio</name><op:operator pos:line="13" pos:column="29">.</op:operator><name pos:line="13" pos:column="30">Shell</name><op:operator pos:line="13" pos:column="35">.</op:operator><name pos:line="13" pos:column="36">Interop</name></name>;</using>

<namespace pos:line="15" pos:column="1">namespace <name><name pos:line="15" pos:column="11">Sando</name><op:operator pos:line="15" pos:column="16">.</op:operator><name pos:line="15" pos:column="17">UI</name><op:operator pos:line="15" pos:column="19">.</op:operator><name pos:line="15" pos:column="20">Service</name></name> <block pos:line="15" pos:column="28">{
    <comment type="line" pos:line="16" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="17" pos:column="5">/// This class is used to expose some utility functions used in this project.</comment>
    <comment type="line" pos:line="18" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="19" pos:column="5">internal</specifier> <specifier pos:line="19" pos:column="14">static</specifier> class <name pos:line="19" pos:column="27">HelperFunctions</name> <block pos:line="19" pos:column="43">{
        <comment type="line" pos:line="20" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="21" pos:column="9">/// This function is used to write a string on the Output window of Visual Studio.</comment>
        <comment type="line" pos:line="22" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="23" pos:column="9">/// &lt;param name="provider"&gt;The service provider to query for SVsOutputWindow&lt;/param&gt;</comment>
        <comment type="line" pos:line="24" pos:column="9">/// &lt;param name="text"&gt;The text to write&lt;/param&gt;</comment>
        <function><type><specifier pos:line="25" pos:column="9">internal</specifier> <specifier pos:line="25" pos:column="18">static</specifier> <name pos:line="25" pos:column="25">void</name></type> <name pos:line="25" pos:column="30">WriteOnOutputWindow</name><parameter_list pos:line="25" pos:column="49">(<param><decl><type><name pos:line="25" pos:column="50">IServiceProvider</name></type> <name pos:line="25" pos:column="67">provider</name></decl></param>, <param><decl><type><name pos:line="25" pos:column="77">string</name></type> <name pos:line="25" pos:column="84">text</name></decl></param>)</parameter_list> <block pos:line="25" pos:column="90">{
            <comment type="line" pos:line="26" pos:column="13">// At first write the text on the debug output.</comment>
            <comment type="line" pos:line="27" pos:column="13">//Trace.WriteLine(text);</comment>

            <comment type="line" pos:line="29" pos:column="13">// Check if we have a provider</comment>
            <if pos:line="30" pos:column="13">if<condition pos:line="30" pos:column="15">(<expr><name pos:line="30" pos:column="16">null</name> <op:operator pos:line="30" pos:column="21">==</op:operator> <name pos:line="30" pos:column="24">provider</name></expr>)</condition><then pos:line="30" pos:column="33"> <block pos:line="30" pos:column="34">{
                <comment type="line" pos:line="31" pos:column="17">// If there is no provider we can not do anything; exit now.</comment>
                <comment type="line" pos:line="32" pos:column="17">//Trace.WriteLine("No service provider passed to WriteOnOutputWindow.");</comment>
                <return pos:line="33" pos:column="17">return;</return>
            }</block></then></if>

            <comment type="line" pos:line="36" pos:column="13">// Now get the SVsOutputWindow service from the service provider.</comment>
            <decl_stmt><decl><type><name pos:line="37" pos:column="13">IVsOutputWindow</name></type> <name pos:line="37" pos:column="29">outputWindow</name> <init pos:line="37" pos:column="42">= <expr><call><name><name pos:line="37" pos:column="44">provider</name><op:operator pos:line="37" pos:column="52">.</op:operator><name pos:line="37" pos:column="53">GetService</name></name><argument_list pos:line="37" pos:column="63">(<argument><expr><call><name pos:line="37" pos:column="64">typeof</name><argument_list pos:line="37" pos:column="70">(<argument><expr><name pos:line="37" pos:column="71">SVsOutputWindow</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="37" pos:column="89">as</op:operator> <name pos:line="37" pos:column="92">IVsOutputWindow</name></expr></init></decl>;</decl_stmt>
            <if pos:line="38" pos:column="13">if<condition pos:line="38" pos:column="15">(<expr><name pos:line="38" pos:column="16">null</name> <op:operator pos:line="38" pos:column="21">==</op:operator> <name pos:line="38" pos:column="24">outputWindow</name></expr>)</condition><then pos:line="38" pos:column="37"> <block pos:line="38" pos:column="38">{
                <comment type="line" pos:line="39" pos:column="17">// If the provider doesn't expose the service there is nothing we can do.</comment>
                <comment type="line" pos:line="40" pos:column="17">// Write a message on the debug output and exit.</comment>
                <comment type="line" pos:line="41" pos:column="17">//Trace.WriteLine("Can not get the SVsOutputWindow service.");</comment>
                <return pos:line="42" pos:column="17">return;</return>
            }</block></then></if>

            <comment type="line" pos:line="45" pos:column="13">// We can not write on the Output window itself, but only on one of its panes.</comment>
            <comment type="line" pos:line="46" pos:column="13">// Here we try to use the "General" pane.</comment>
            <decl_stmt><decl><type><name pos:line="47" pos:column="13">Guid</name></type> <name pos:line="47" pos:column="18">guidGeneral</name> <init pos:line="47" pos:column="30">= <expr><name><name pos:line="47" pos:column="32">Microsoft</name><op:operator pos:line="47" pos:column="41">.</op:operator><name pos:line="47" pos:column="42">VisualStudio</name><op:operator pos:line="47" pos:column="54">.</op:operator><name pos:line="47" pos:column="55">VSConstants</name><op:operator pos:line="47" pos:column="66">.</op:operator><name pos:line="47" pos:column="67">GUID_OutWindowGeneralPane</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="48" pos:column="13">IVsOutputWindowPane</name></type> <name pos:line="48" pos:column="33">windowPane</name></decl>;</decl_stmt>
            <if pos:line="49" pos:column="13">if<condition pos:line="49" pos:column="15">(<expr><call><name><name pos:line="49" pos:column="16">Microsoft</name><op:operator pos:line="49" pos:column="25">.</op:operator><name pos:line="49" pos:column="26">VisualStudio</name><op:operator pos:line="49" pos:column="38">.</op:operator><name pos:line="49" pos:column="39">ErrorHandler</name><op:operator pos:line="49" pos:column="51">.</op:operator><name pos:line="49" pos:column="52">Failed</name></name><argument_list pos:line="49" pos:column="58">(<argument><expr><call><name><name pos:line="49" pos:column="59">outputWindow</name><op:operator pos:line="49" pos:column="71">.</op:operator><name pos:line="49" pos:column="72">GetPane</name></name><argument_list pos:line="49" pos:column="79">(<argument><expr pos:line="49" pos:column="80">ref <name pos:line="49" pos:column="84">guidGeneral</name></expr></argument>, <argument><expr pos:line="49" pos:column="97">out <name pos:line="49" pos:column="101">windowPane</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="49" pos:column="114">||</op:operator>
                <op:operator pos:line="50" pos:column="17">(</op:operator><name pos:line="50" pos:column="18">null</name> <op:operator pos:line="50" pos:column="23">==</op:operator> <name pos:line="50" pos:column="26">windowPane</name><op:operator pos:line="50" pos:column="36">)</op:operator></expr>)</condition><then pos:line="50" pos:column="38"> <block pos:line="50" pos:column="39">{
                <expr_stmt><expr><call><name><name pos:line="51" pos:column="17">Microsoft</name><op:operator pos:line="51" pos:column="26">.</op:operator><name pos:line="51" pos:column="27">VisualStudio</name><op:operator pos:line="51" pos:column="39">.</op:operator><name pos:line="51" pos:column="40">ErrorHandler</name><op:operator pos:line="51" pos:column="52">.</op:operator><name pos:line="51" pos:column="53">Failed</name></name><argument_list pos:line="51" pos:column="59">(<argument><expr><call><name><name pos:line="51" pos:column="60">outputWindow</name><op:operator pos:line="51" pos:column="72">.</op:operator><name pos:line="51" pos:column="73">CreatePane</name></name><argument_list pos:line="51" pos:column="83">(<argument><expr pos:line="51" pos:column="84">ref <name pos:line="51" pos:column="88">guidGeneral</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="51" pos:column="101">"General"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="51" pos:column="112">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="51" pos:column="115">0</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="52" pos:column="17">if<condition pos:line="52" pos:column="19">(<expr><call><name><name pos:line="52" pos:column="20">Microsoft</name><op:operator pos:line="52" pos:column="29">.</op:operator><name pos:line="52" pos:column="30">VisualStudio</name><op:operator pos:line="52" pos:column="42">.</op:operator><name pos:line="52" pos:column="43">ErrorHandler</name><op:operator pos:line="52" pos:column="55">.</op:operator><name pos:line="52" pos:column="56">Failed</name></name><argument_list pos:line="52" pos:column="62">(<argument><expr><call><name><name pos:line="52" pos:column="63">outputWindow</name><op:operator pos:line="52" pos:column="75">.</op:operator><name pos:line="52" pos:column="76">GetPane</name></name><argument_list pos:line="52" pos:column="83">(<argument><expr pos:line="52" pos:column="84">ref <name pos:line="52" pos:column="88">guidGeneral</name></expr></argument>, <argument><expr pos:line="52" pos:column="101">out <name pos:line="52" pos:column="105">windowPane</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="52" pos:column="118">||</op:operator>
                <op:operator pos:line="53" pos:column="17">(</op:operator><name pos:line="53" pos:column="18">null</name> <op:operator pos:line="53" pos:column="23">==</op:operator> <name pos:line="53" pos:column="26">windowPane</name><op:operator pos:line="53" pos:column="36">)</op:operator></expr>)</condition><then pos:line="53" pos:column="38"> <block pos:line="53" pos:column="39">{
                    <comment type="line" pos:line="54" pos:column="21">// Again, there is nothing we can do to recover from this error, so write on the</comment>
                    <comment type="line" pos:line="55" pos:column="21">// debug output and exit.</comment>
                    <comment type="line" pos:line="56" pos:column="21">//Trace.WriteLine("Failed to get the Output window pane.");</comment>
                    <return pos:line="57" pos:column="21">return;</return>
                }</block></then></if>
                <expr_stmt><expr><call><name><name pos:line="59" pos:column="17">Microsoft</name><op:operator pos:line="59" pos:column="26">.</op:operator><name pos:line="59" pos:column="27">VisualStudio</name><op:operator pos:line="59" pos:column="39">.</op:operator><name pos:line="59" pos:column="40">ErrorHandler</name><op:operator pos:line="59" pos:column="52">.</op:operator><name pos:line="59" pos:column="53">Failed</name></name><argument_list pos:line="59" pos:column="59">(<argument><expr><call><name><name pos:line="59" pos:column="60">windowPane</name><op:operator pos:line="59" pos:column="70">.</op:operator><name pos:line="59" pos:column="71">Activate</name></name><argument_list pos:line="59" pos:column="79">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <comment type="line" pos:line="62" pos:column="13">// Finally we can write on the window pane.</comment>
            <if pos:line="63" pos:column="13">if<condition pos:line="63" pos:column="15">(<expr><call><name><name pos:line="63" pos:column="16">Microsoft</name><op:operator pos:line="63" pos:column="25">.</op:operator><name pos:line="63" pos:column="26">VisualStudio</name><op:operator pos:line="63" pos:column="38">.</op:operator><name pos:line="63" pos:column="39">ErrorHandler</name><op:operator pos:line="63" pos:column="51">.</op:operator><name pos:line="63" pos:column="52">Failed</name></name><argument_list pos:line="63" pos:column="58">(<argument><expr><call><name><name pos:line="63" pos:column="59">windowPane</name><op:operator pos:line="63" pos:column="69">.</op:operator><name pos:line="63" pos:column="70">OutputString</name></name><argument_list pos:line="63" pos:column="82">(<argument><expr><name pos:line="63" pos:column="83">text</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="63" pos:column="90"> <block pos:line="63" pos:column="91">{
                <comment type="line" pos:line="64" pos:column="17">//Trace.WriteLine("Failed to write on the Output window pane.");</comment>
            }</block></then></if>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
