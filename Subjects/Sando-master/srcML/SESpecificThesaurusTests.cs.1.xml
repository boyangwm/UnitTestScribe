<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Core\Core.UnitTests\Tools\SESpecificThesaurusTests.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Text</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">NUnit</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">Framework</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Sando</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">Core</name><op:operator pos:line="6" pos:column="17">.</op:operator><name pos:line="6" pos:column="18">Tools</name></name>;</using>

<namespace pos:line="8" pos:column="1">namespace <name><name pos:line="8" pos:column="11">Sando</name><op:operator pos:line="8" pos:column="16">.</op:operator><name pos:line="8" pos:column="17">Core</name><op:operator pos:line="8" pos:column="21">.</op:operator><name pos:line="8" pos:column="22">UnitTests</name><op:operator pos:line="8" pos:column="31">.</op:operator><name pos:line="8" pos:column="32">Tools</name></name>
<block pos:line="9" pos:column="1">{
    <class><attribute pos:line="10" pos:column="5">[<expr><name pos:line="10" pos:column="6">TestFixture</name></expr>]</attribute>
    class <name pos:line="11" pos:column="11">SeSpecificThesaurusTests</name>
    <block pos:line="12" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="13" pos:column="9">private</specifier> <specifier pos:line="13" pos:column="17">readonly</specifier> <name pos:line="13" pos:column="26">IThesaurus</name></type> <name pos:line="13" pos:column="37">thesaurus</name> <init pos:line="13" pos:column="47">= <expr><call><name><name pos:line="13" pos:column="49">SeSpecificThesaurus</name><op:operator pos:line="13" pos:column="68">.</op:operator><name pos:line="13" pos:column="69">GetInstance</name></name><argument_list pos:line="13" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <function><type><attribute pos:line="15" pos:column="9">[<expr><name pos:line="15" pos:column="10">SetUp</name></expr>]</attribute>
        <specifier pos:line="16" pos:column="9">public</specifier> <name pos:line="16" pos:column="16">void</name></type> <name pos:line="16" pos:column="21">SetUp</name><parameter_list pos:line="16" pos:column="26">()</parameter_list>
        <block pos:line="17" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="18" pos:column="13">thesaurus</name><op:operator pos:line="18" pos:column="22">.</op:operator><name pos:line="18" pos:column="23">Initialize</name></name><argument_list pos:line="18" pos:column="33">(<argument><expr><name pos:line="18" pos:column="34">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="21" pos:column="9">[<expr><name pos:line="21" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="22" pos:column="9">public</specifier> <name pos:line="22" pos:column="16">void</name></type> <name pos:line="22" pos:column="21">QueryFreqentWord</name><parameter_list pos:line="22" pos:column="37">()</parameter_list>
        <block pos:line="23" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="24" pos:column="13">AssertWordExist</name><argument_list pos:line="24" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="24" pos:column="29">"add"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="25" pos:column="13">AssertWordExist</name><argument_list pos:line="25" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="25" pos:column="29">"get"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="26" pos:column="13">AssertWordExist</name><argument_list pos:line="26" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="26" pos:column="29">"debug"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="27" pos:column="13">AssertWordExist</name><argument_list pos:line="27" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="27" pos:column="29">"retrieve"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="28" pos:column="13">AssertWordExist</name><argument_list pos:line="28" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="28" pos:column="29">"file"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="29" pos:column="13">AssertWordExist</name><argument_list pos:line="29" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="29" pos:column="29">"release"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="32" pos:column="9">[<expr><name pos:line="32" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="33" pos:column="9">public</specifier> <name pos:line="33" pos:column="16">void</name></type> <name pos:line="33" pos:column="21">QueryNonExistingWord</name><parameter_list pos:line="33" pos:column="41">()</parameter_list>
        <block pos:line="34" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="35" pos:column="13">AssertNonExistingWord</name><argument_list pos:line="35" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="35" pos:column="35">"fafad"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="36" pos:column="13">AssertNonExistingWord</name><argument_list pos:line="36" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="36" pos:column="35">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="37" pos:column="13">AssertNonExistingWord</name><argument_list pos:line="37" pos:column="34">(<argument><expr><name pos:line="37" pos:column="35">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="38" pos:column="13">AssertNonExistingWord</name><argument_list pos:line="38" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="38" pos:column="35">"&amp;*##@"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="39" pos:column="13">AssertNonExistingWord</name><argument_list pos:line="39" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="39" pos:column="35">"324312"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="42" pos:column="9">private</specifier> <name pos:line="42" pos:column="17">void</name></type> <name pos:line="42" pos:column="22">AssertNonExistingWord</name><parameter_list pos:line="42" pos:column="43">(<param><decl><type><name pos:line="42" pos:column="44">String</name></type> <name pos:line="42" pos:column="51">word</name></decl></param>)</parameter_list>
        <block pos:line="43" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="44" pos:column="13">var</name></type> <name pos:line="44" pos:column="17">words</name> <init pos:line="44" pos:column="23">= <expr><call><name><name pos:line="44" pos:column="25">thesaurus</name><op:operator pos:line="44" pos:column="34">.</op:operator><name pos:line="44" pos:column="35">GetSynonyms</name></name><argument_list pos:line="44" pos:column="46">(<argument><expr><name pos:line="44" pos:column="47">word</name></expr></argument>)</argument_list></call><op:operator pos:line="44" pos:column="52">.</op:operator><call><name pos:line="44" pos:column="53">ToList</name><argument_list pos:line="44" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="45" pos:column="13">Assert</name><op:operator pos:line="45" pos:column="19">.</op:operator><name pos:line="45" pos:column="20">IsTrue</name></name><argument_list pos:line="45" pos:column="26">(<argument><expr><op:operator pos:line="45" pos:column="27">!</op:operator><call><name><name pos:line="45" pos:column="28">words</name><op:operator pos:line="45" pos:column="33">.</op:operator><name pos:line="45" pos:column="34">Any</name></name><argument_list pos:line="45" pos:column="37">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="48" pos:column="9">private</specifier> <name pos:line="48" pos:column="17">void</name></type> <name pos:line="48" pos:column="22">AssertWordExist</name><parameter_list pos:line="48" pos:column="37">(<param><decl><type><name pos:line="48" pos:column="38">String</name></type> <name pos:line="48" pos:column="45">word</name></decl></param>)</parameter_list>
        <block pos:line="49" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="50" pos:column="13">var</name></type> <name pos:line="50" pos:column="17">words</name> <init pos:line="50" pos:column="23">= <expr><call><name><name pos:line="50" pos:column="25">thesaurus</name><op:operator pos:line="50" pos:column="34">.</op:operator><name pos:line="50" pos:column="35">GetSynonyms</name></name><argument_list pos:line="50" pos:column="46">(<argument><expr><name pos:line="50" pos:column="47">word</name></expr></argument>)</argument_list></call><op:operator pos:line="50" pos:column="52">.</op:operator><call><name pos:line="50" pos:column="53">ToList</name><argument_list pos:line="50" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="51" pos:column="13">Assert</name><op:operator pos:line="51" pos:column="19">.</op:operator><name pos:line="51" pos:column="20">IsNotNull</name></name><argument_list pos:line="51" pos:column="29">(<argument><expr><name pos:line="51" pos:column="30">words</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="52" pos:column="13">Assert</name><op:operator pos:line="52" pos:column="19">.</op:operator><name pos:line="52" pos:column="20">IsTrue</name></name><argument_list pos:line="52" pos:column="26">(<argument><expr><call><name><name pos:line="52" pos:column="27">words</name><op:operator pos:line="52" pos:column="32">.</op:operator><name pos:line="52" pos:column="33">Any</name></name><argument_list pos:line="52" pos:column="36">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
