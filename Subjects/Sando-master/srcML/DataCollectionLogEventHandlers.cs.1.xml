<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Core\Core\Logging\EVENTS\DataCollectionLogEventHandlers.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">log4net</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">Sando</name><op:operator pos:line="2" pos:column="12">.</op:operator><name pos:line="2" pos:column="13">Core</name><op:operator pos:line="2" pos:column="17">.</op:operator><name pos:line="2" pos:column="18">Logging</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Persistence</name></name>;</using>
<using pos:line="3" pos:column="1">using <name pos:line="3" pos:column="7">System</name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Collections</name><op:operator pos:line="4" pos:column="25">.</op:operator><name pos:line="4" pos:column="26">Generic</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Linq</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">System</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">Text</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">System</name><op:operator pos:line="7" pos:column="13">.</op:operator><name pos:line="7" pos:column="14">ComponentModel</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">System</name><op:operator pos:line="8" pos:column="13">.</op:operator><name pos:line="8" pos:column="14">IO</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">Sando</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">Core</name><op:operator pos:line="9" pos:column="17">.</op:operator><name pos:line="9" pos:column="18">Logging</name><op:operator pos:line="9" pos:column="25">.</op:operator><name pos:line="9" pos:column="26">Upload</name></name>;</using>

<namespace pos:line="11" pos:column="1">namespace <name><name pos:line="11" pos:column="11">Sando</name><op:operator pos:line="11" pos:column="16">.</op:operator><name pos:line="11" pos:column="17">Core</name><op:operator pos:line="11" pos:column="21">.</op:operator><name pos:line="11" pos:column="22">Logging</name><op:operator pos:line="11" pos:column="29">.</op:operator><name pos:line="11" pos:column="30">Events</name></name>
<block pos:line="12" pos:column="1">{
    <class><specifier pos:line="13" pos:column="5">public</specifier> <specifier pos:line="13" pos:column="12">static</specifier> class <name pos:line="13" pos:column="25">DataCollectionLogEventHandlers</name>
    <block pos:line="14" pos:column="5">{
        <constructor><specifier pos:line="15" pos:column="9">static</specifier> <name pos:line="15" pos:column="16">DataCollectionLogEventHandlers</name><parameter_list pos:line="15" pos:column="46">()</parameter_list>
        <block pos:line="16" pos:column="9">{
            <expr_stmt><expr><name pos:line="17" pos:column="13">_initialized</name> <op:operator pos:line="17" pos:column="26">=</op:operator> <lit:literal type="boolean" pos:line="17" pos:column="28">false</lit:literal></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier pos:line="20" pos:column="9">public</specifier> <specifier pos:line="20" pos:column="16">static</specifier> <name pos:line="20" pos:column="23">void</name></type> <name pos:line="20" pos:column="28">InitializeDataCollection</name><parameter_list pos:line="20" pos:column="52">(<param><decl><type><name pos:line="20" pos:column="53">string</name></type> <name pos:line="20" pos:column="60">logPath</name></decl></param>)</parameter_list>
        <block pos:line="21" pos:column="9">{
            <if pos:line="22" pos:column="13">if <condition pos:line="22" pos:column="16">(<expr><op:operator pos:line="22" pos:column="17">!</op:operator><name pos:line="22" pos:column="18">_initialized</name></expr>)</condition><then pos:line="22" pos:column="31">
            <block pos:line="23" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="24" pos:column="17">var</name></type> <name pos:line="24" pos:column="21">machineDomain</name> <init pos:line="24" pos:column="35">= <expr><call><name pos:line="24" pos:column="37">GetMachineDomain</name><argument_list pos:line="24" pos:column="53">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="25" pos:column="17">var</name></type> <name pos:line="25" pos:column="21">dataFileName</name> <init pos:line="25" pos:column="34">= <expr><call><name><name pos:line="25" pos:column="36">Path</name><op:operator pos:line="25" pos:column="40">.</op:operator><name pos:line="25" pos:column="41">Combine</name></name><argument_list pos:line="25" pos:column="48">(<argument><expr><name pos:line="25" pos:column="49">logPath</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="25" pos:column="58">"SandoData_v"</lit:literal> <op:operator pos:line="25" pos:column="72">+</op:operator> <call><name pos:line="25" pos:column="74">GetSandoVersion</name><argument_list pos:line="25" pos:column="89">()</argument_list></call> <op:operator pos:line="25" pos:column="92">+</op:operator> <lit:literal type="string" pos:line="25" pos:column="94">"_"</lit:literal> <op:operator pos:line="25" pos:column="98">+</op:operator> <call><name><name pos:line="25" pos:column="100">Environment</name><op:operator pos:line="25" pos:column="111">.</op:operator><name pos:line="25" pos:column="112">MachineName</name><op:operator pos:line="25" pos:column="123">.</op:operator><name pos:line="25" pos:column="124">GetHashCode</name></name><argument_list pos:line="25" pos:column="135">()</argument_list></call> <op:operator pos:line="25" pos:column="138">+</op:operator> <lit:literal type="string" pos:line="25" pos:column="140">"_"</lit:literal> <op:operator pos:line="25" pos:column="144">+</op:operator> <call><name><name pos:line="25" pos:column="146">machineDomain</name><op:operator pos:line="25" pos:column="159">.</op:operator><name pos:line="25" pos:column="160">GetHashCode</name></name><argument_list pos:line="25" pos:column="171">()</argument_list></call> <op:operator pos:line="25" pos:column="174">+</op:operator> <call><name><name pos:line="25" pos:column="176">DateTime</name><op:operator pos:line="25" pos:column="184">.</op:operator><name pos:line="25" pos:column="185">Now</name><op:operator pos:line="25" pos:column="188">.</op:operator><name pos:line="25" pos:column="189">ToString</name></name><argument_list pos:line="25" pos:column="197">(<argument><expr><lit:literal type="string" pos:line="25" pos:column="198">"_yyyy-MM-dd-HH.mm"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="25" pos:column="219">+</op:operator> <lit:literal type="string" pos:line="25" pos:column="221">".log"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name pos:line="26" pos:column="17">Logger</name> <op:operator pos:line="26" pos:column="24">=</op:operator> <call><name><name pos:line="26" pos:column="26">FileLogger</name><op:operator pos:line="26" pos:column="36">.</op:operator><name pos:line="26" pos:column="37">CreateFileLogger</name></name><argument_list pos:line="26" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="26" pos:column="54">"DataCollectionLogger"</lit:literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="78">dataFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="27" pos:column="17">CurrentLogFile</name> <op:operator pos:line="27" pos:column="32">=</op:operator> <name pos:line="27" pos:column="34">dataFileName</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="28" pos:column="17">LogPath</name> <op:operator pos:line="28" pos:column="25">=</op:operator> <name pos:line="28" pos:column="27">logPath</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="29" pos:column="17">_initialized</name> <op:operator pos:line="29" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="29" pos:column="32">true</lit:literal></expr>;</expr_stmt>
            }</block></then></if>

        }</block></function>

        <function><type><specifier pos:line="34" pos:column="9">public</specifier> <specifier pos:line="34" pos:column="16">static</specifier> <name pos:line="34" pos:column="23">void</name></type> <name pos:line="34" pos:column="28">CloseDataCollection</name><parameter_list pos:line="34" pos:column="47">()</parameter_list>
        <block pos:line="35" pos:column="9">{
            <if pos:line="36" pos:column="13">if <condition pos:line="36" pos:column="16">(<expr><name pos:line="36" pos:column="17">_initialized</name></expr>)</condition><then pos:line="36" pos:column="30">
            <block pos:line="37" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="38" pos:column="17">FileLogger</name><op:operator pos:line="38" pos:column="27">.</op:operator><name pos:line="38" pos:column="28">CloseLogger</name></name><argument_list pos:line="38" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="38" pos:column="40">"DataCollectionLogger"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="39" pos:column="17">_initialized</name> <op:operator pos:line="39" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="39" pos:column="32">false</lit:literal></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="43" pos:column="9">public</specifier> <specifier pos:line="43" pos:column="16">static</specifier> <name pos:line="43" pos:column="23">void</name></type> <name pos:line="43" pos:column="28">WriteInfoLogMessage</name><parameter_list pos:line="43" pos:column="47">(<param><decl><type><name pos:line="43" pos:column="48">string</name></type> <name pos:line="43" pos:column="55">sendingType</name></decl></param>, <param><decl><type><name pos:line="43" pos:column="68">string</name></type> <name pos:line="43" pos:column="75">message</name></decl></param>)</parameter_list>
        <block pos:line="44" pos:column="9">{
            <if pos:line="45" pos:column="13">if <condition pos:line="45" pos:column="16">(<expr><name><name pos:line="45" pos:column="17">SandoLogManager</name><op:operator pos:line="45" pos:column="32">.</op:operator><name pos:line="45" pos:column="33">DataCollectionOn</name> <type:modifier pos:line="45" pos:column="50">&amp;&amp;</type:modifier></name> <name pos:line="45" pos:column="53">_initialized</name></expr>)</condition><then pos:line="45" pos:column="66">
            <block pos:line="46" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="47" pos:column="17">Logger</name><op:operator pos:line="47" pos:column="23">.</op:operator><name pos:line="47" pos:column="24">Info</name></name><argument_list pos:line="47" pos:column="28">(<argument><expr><name pos:line="47" pos:column="29">sendingType</name> <op:operator pos:line="47" pos:column="41">+</op:operator> <lit:literal type="string" pos:line="47" pos:column="43">": "</lit:literal> <op:operator pos:line="47" pos:column="48">+</op:operator> <name pos:line="47" pos:column="50">message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

		<function><type><specifier pos:line="51" pos:column="17">public</specifier> <specifier pos:line="51" pos:column="24">static</specifier> <name pos:line="51" pos:column="31">void</name></type> <name pos:line="51" pos:column="36">UploadLogFiles</name><parameter_list pos:line="51" pos:column="50">()</parameter_list>
		<block pos:line="52" pos:column="17">{
            <if pos:line="53" pos:column="13">if <condition pos:line="53" pos:column="16">(<expr><name><name pos:line="53" pos:column="17">SandoLogManager</name><op:operator pos:line="53" pos:column="32">.</op:operator><name pos:line="53" pos:column="33">DataCollectionOn</name> <type:modifier pos:line="53" pos:column="50">&amp;&amp;</type:modifier></name> <name pos:line="53" pos:column="53">_initialized</name></expr>)</condition><then pos:line="53" pos:column="66">
            <block pos:line="54" pos:column="13">{
                <comment type="line" pos:line="55" pos:column="17">//randomly with p=0.33</comment>
                <decl_stmt><decl><type><name pos:line="56" pos:column="17">Random</name></type> <name pos:line="56" pos:column="24">random</name> <init pos:line="56" pos:column="31">= <expr><op:operator pos:line="56" pos:column="33">new</op:operator> <call><name pos:line="56" pos:column="37">Random</name><argument_list pos:line="56" pos:column="43">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="57" pos:column="17">int</name></type> <name pos:line="57" pos:column="21">rand</name> <init pos:line="57" pos:column="26">= <expr><call><name><name pos:line="57" pos:column="28">random</name><op:operator pos:line="57" pos:column="34">.</op:operator><name pos:line="57" pos:column="35">Next</name></name><argument_list pos:line="57" pos:column="39">(<argument><expr><lit:literal type="number" pos:line="57" pos:column="40">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="57" pos:column="43">3</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="58" pos:column="17">if <condition pos:line="58" pos:column="20">(<expr><name pos:line="58" pos:column="21">rand</name> <op:operator pos:line="58" pos:column="26">==</op:operator> <lit:literal type="number" pos:line="58" pos:column="29">0</lit:literal></expr>)</condition><then pos:line="58" pos:column="31">
                <block pos:line="59" pos:column="17">{
                    <expr_stmt><expr><call><name pos:line="60" pos:column="21">DoS3Upload</name><argument_list pos:line="60" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="62" pos:column="17">else
                <block pos:line="63" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="64" pos:column="21">Type</name></type> <name pos:line="64" pos:column="26">t</name> <init pos:line="64" pos:column="28">= <expr><call><name><name pos:line="64" pos:column="30">System</name><op:operator pos:line="64" pos:column="36">.</op:operator><name pos:line="64" pos:column="37">Reflection</name><op:operator pos:line="64" pos:column="47">.</op:operator><name pos:line="64" pos:column="48">MethodBase</name><op:operator pos:line="64" pos:column="58">.</op:operator><name pos:line="64" pos:column="59">GetCurrentMethod</name></name><argument_list pos:line="64" pos:column="75">()</argument_list></call><op:operator pos:line="64" pos:column="77">.</op:operator><name pos:line="64" pos:column="78">DeclaringType</name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="65" pos:column="21">LogEvents</name><op:operator pos:line="65" pos:column="30">.</op:operator><name pos:line="65" pos:column="31">NoS3UploadDueToChance</name></name><argument_list pos:line="65" pos:column="52">(<argument><expr><name pos:line="65" pos:column="53">t</name></expr></argument>, <argument><expr><name pos:line="65" pos:column="56">rand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if>
		}</block></function>

		<function><type><specifier pos:line="70" pos:column="17">private</specifier> <specifier pos:line="70" pos:column="25">static</specifier> <name pos:line="70" pos:column="32">void</name></type> <name pos:line="70" pos:column="37">DoS3Upload</name><parameter_list pos:line="70" pos:column="47">()</parameter_list>
		<block pos:line="71" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="72" pos:column="25">string</name></type> <name pos:line="72" pos:column="32">s3CredsPath</name> <init pos:line="72" pos:column="44">= <expr><name pos:line="72" pos:column="46">LogPath</name> <op:operator pos:line="72" pos:column="54">+</op:operator> <lit:literal type="string" pos:line="72" pos:column="56">"//S3Credentials"</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="73" pos:column="25">string</name><index pos:line="73" pos:column="31">[]</index></type> <name pos:line="73" pos:column="34">files</name> <init pos:line="73" pos:column="40">= <expr><call><name><name pos:line="73" pos:column="42">Directory</name><op:operator pos:line="73" pos:column="51">.</op:operator><name pos:line="73" pos:column="52">GetFiles</name></name><argument_list pos:line="73" pos:column="60">(<argument><expr><name pos:line="73" pos:column="61">LogPath</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="73" pos:column="70">"*.log"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<foreach pos:line="74" pos:column="25">foreach (<init><decl><type><name pos:line="74" pos:column="34">var</name></type> <name pos:line="74" pos:column="38">file</name> <range pos:line="74" pos:column="43">in <expr><name pos:line="74" pos:column="46">files</name></expr></range></decl></init>)
			<block pos:line="75" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="76" pos:column="33">string</name></type> <name pos:line="76" pos:column="40">fullFilePath</name> <init pos:line="76" pos:column="53">= <expr><call><name><name pos:line="76" pos:column="55">Path</name><op:operator pos:line="76" pos:column="59">.</op:operator><name pos:line="76" pos:column="60">GetFullPath</name></name><argument_list pos:line="76" pos:column="71">(<argument><expr><name pos:line="76" pos:column="72">file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="77" pos:column="33">FileInfo</name></type> <name pos:line="77" pos:column="42">fileInfo</name> <init pos:line="77" pos:column="51">= <expr><op:operator pos:line="77" pos:column="53">new</op:operator> <call><name pos:line="77" pos:column="57">FileInfo</name><argument_list pos:line="77" pos:column="65">(<argument><expr><name pos:line="77" pos:column="66">fullFilePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="78" pos:column="33">string</name></type> <name pos:line="78" pos:column="40">fileName</name> <init pos:line="78" pos:column="49">= <expr><call><name><name pos:line="78" pos:column="51">Path</name><op:operator pos:line="78" pos:column="55">.</op:operator><name pos:line="78" pos:column="56">GetFileName</name></name><argument_list pos:line="78" pos:column="67">(<argument><expr><name pos:line="78" pos:column="68">fullFilePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="79" pos:column="33">if <condition pos:line="79" pos:column="36">(<expr><call><name><name pos:line="79" pos:column="37">fileName</name><op:operator pos:line="79" pos:column="45">.</op:operator><name pos:line="79" pos:column="46">StartsWith</name></name><argument_list pos:line="79" pos:column="56">(<argument><expr><lit:literal type="string" pos:line="79" pos:column="57">"SandoData"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="79" pos:column="70">
				<block pos:line="80" pos:column="33">{
                    <if pos:line="81" pos:column="21">if <condition pos:line="81" pos:column="24">(<expr><name><name pos:line="81" pos:column="25">fileInfo</name><op:operator pos:line="81" pos:column="33">.</op:operator><name pos:line="81" pos:column="34">Length</name></name> <op:operator pos:line="81" pos:column="41">&gt;</op:operator> <lit:literal type="number" pos:line="81" pos:column="43">400</lit:literal></expr>)</condition><then pos:line="81" pos:column="47">
                    <block pos:line="82" pos:column="21">{
                        <decl_stmt><decl><type><name pos:line="83" pos:column="25">bool</name></type> <name pos:line="83" pos:column="30">success</name> <init pos:line="83" pos:column="38">= <expr><call><name><name pos:line="83" pos:column="40">AmazonS3LogUploader</name><op:operator pos:line="83" pos:column="59">.</op:operator><name pos:line="83" pos:column="60">WriteLogFile</name></name><argument_list pos:line="83" pos:column="72">(<argument><expr><name pos:line="83" pos:column="73">fullFilePath</name></expr></argument>, <argument><expr><name pos:line="83" pos:column="87">s3CredsPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if pos:line="84" pos:column="25">if <condition pos:line="84" pos:column="28">(<expr><name pos:line="84" pos:column="29">success</name> <op:operator pos:line="84" pos:column="37">==</op:operator> <lit:literal type="boolean" pos:line="84" pos:column="40">true</lit:literal></expr>)</condition><then pos:line="84" pos:column="45">
                        <block pos:line="85" pos:column="25">{
                            <if pos:line="86" pos:column="29">if <condition pos:line="86" pos:column="32">(<expr><name pos:line="86" pos:column="33">fullFilePath</name> <op:operator pos:line="86" pos:column="46">==</op:operator> <name pos:line="86" pos:column="49">CurrentLogFile</name></expr>)</condition><then pos:line="86" pos:column="64">
                            <block pos:line="87" pos:column="29">{
                                <expr_stmt><expr><call><name pos:line="88" pos:column="33">CloseDataCollection</name><argument_list pos:line="88" pos:column="52">()</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name pos:line="89" pos:column="33">InitializeDataCollection</name><argument_list pos:line="89" pos:column="57">(<argument><expr><name pos:line="89" pos:column="58">LogPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></then></if>
                            <expr_stmt><expr><call><name><name pos:line="91" pos:column="29">System</name><op:operator pos:line="91" pos:column="35">.</op:operator><name pos:line="91" pos:column="36">IO</name><op:operator pos:line="91" pos:column="38">.</op:operator><name pos:line="91" pos:column="39">File</name><op:operator pos:line="91" pos:column="43">.</op:operator><name pos:line="91" pos:column="44">Delete</name></name><argument_list pos:line="91" pos:column="50">(<argument><expr><name pos:line="91" pos:column="51">fullFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></then>
                    <else pos:line="94" pos:column="21">else
                    <block pos:line="95" pos:column="21">{
                        <if pos:line="96" pos:column="25">if <condition pos:line="96" pos:column="28">(<expr><name pos:line="96" pos:column="29">fullFilePath</name> <op:operator pos:line="96" pos:column="42">!=</op:operator> <name pos:line="96" pos:column="45">CurrentLogFile</name></expr>)</condition><then pos:line="96" pos:column="60">
                        <block pos:line="97" pos:column="25">{
                            <expr_stmt><expr><call><name><name pos:line="98" pos:column="29">System</name><op:operator pos:line="98" pos:column="35">.</op:operator><name pos:line="98" pos:column="36">IO</name><op:operator pos:line="98" pos:column="38">.</op:operator><name pos:line="98" pos:column="39">File</name><op:operator pos:line="98" pos:column="43">.</op:operator><name pos:line="98" pos:column="44">Delete</name></name><argument_list pos:line="98" pos:column="50">(<argument><expr><name pos:line="98" pos:column="51">fullFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></else></if>
				}</block></then></if>
			}</block></foreach>
		}</block></function>

        <function><type><specifier pos:line="105" pos:column="9">private</specifier> <specifier pos:line="105" pos:column="17">static</specifier> <name pos:line="105" pos:column="24">string</name></type> <name pos:line="105" pos:column="31">GetSandoVersion</name><parameter_list pos:line="105" pos:column="46">()</parameter_list>
        <block pos:line="106" pos:column="9">{
            <comment type="line" pos:line="107" pos:column="13">//TODO: Need to get the version dynamically somehow, instead of hardcoding it</comment>
            <return pos:line="108" pos:column="13">return <expr><lit:literal type="string" pos:line="108" pos:column="20">"1.1.2"</lit:literal></expr>;</return>
        }</block></function>

		<function><type><specifier pos:line="111" pos:column="17">private</specifier> <specifier pos:line="111" pos:column="25">static</specifier> <name pos:line="111" pos:column="32">string</name></type> <name pos:line="111" pos:column="39">GetMachineDomain</name><parameter_list pos:line="111" pos:column="55">()</parameter_list>
		<block pos:line="112" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="113" pos:column="25">var</name></type> <name pos:line="113" pos:column="29">machineDomain</name> <init pos:line="113" pos:column="43">= <expr><call><name><name pos:line="113" pos:column="45">System</name><op:operator pos:line="113" pos:column="51">.</op:operator><name pos:line="113" pos:column="52">Net</name><op:operator pos:line="113" pos:column="55">.</op:operator><name pos:line="113" pos:column="56">NetworkInformation</name><op:operator pos:line="113" pos:column="74">.</op:operator><name pos:line="113" pos:column="75">IPGlobalProperties</name><op:operator pos:line="113" pos:column="93">.</op:operator><name pos:line="113" pos:column="94">GetIPGlobalProperties</name></name><argument_list pos:line="113" pos:column="115">()</argument_list></call><op:operator pos:line="113" pos:column="117">.</op:operator><name pos:line="113" pos:column="118">DomainName</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="114" pos:column="25">var</name></type> <name pos:line="114" pos:column="29">md</name> <init pos:line="114" pos:column="32">= <expr><call><name><name pos:line="114" pos:column="34">System</name><op:operator pos:line="114" pos:column="40">.</op:operator><name pos:line="114" pos:column="41">Net</name><op:operator pos:line="114" pos:column="44">.</op:operator><name pos:line="114" pos:column="45">Dns</name><op:operator pos:line="114" pos:column="48">.</op:operator><name pos:line="114" pos:column="49">GetHostName</name></name><argument_list pos:line="114" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<comment type="line" pos:line="115" pos:column="25">//if domain has the form x.y.z.com then return the last 2 parts: z.com </comment>
			<decl_stmt><decl><type><name pos:line="116" pos:column="25">string</name><index pos:line="116" pos:column="31">[]</index></type> <name pos:line="116" pos:column="34">domainSplit</name> <init pos:line="116" pos:column="46">= <expr><call><name><name pos:line="116" pos:column="48">machineDomain</name><op:operator pos:line="116" pos:column="61">.</op:operator><name pos:line="116" pos:column="62">Split</name></name><argument_list pos:line="116" pos:column="67">(<argument><expr><lit:literal type="char" pos:line="116" pos:column="68">'.'</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="117" pos:column="25">if<condition pos:line="117" pos:column="27">(<expr><call><name><name pos:line="117" pos:column="28">domainSplit</name><op:operator pos:line="117" pos:column="39">.</op:operator><name pos:line="117" pos:column="40">Count</name></name><argument_list pos:line="117" pos:column="45">()</argument_list></call> <op:operator pos:line="117" pos:column="48">&gt;=</op:operator> <lit:literal type="number" pos:line="117" pos:column="51">2</lit:literal></expr>)</condition><then pos:line="117" pos:column="53">
			<block pos:line="118" pos:column="25">{
				<return pos:line="119" pos:column="33">return <expr><name><name pos:line="119" pos:column="40">domainSplit</name><index pos:line="119" pos:column="51">[<expr><call><name><name pos:line="119" pos:column="52">domainSplit</name><op:operator pos:line="119" pos:column="63">.</op:operator><name pos:line="119" pos:column="64">Count</name></name><argument_list pos:line="119" pos:column="69">()</argument_list></call> <op:operator pos:line="119" pos:column="72">-</op:operator> <lit:literal type="number" pos:line="119" pos:column="74">2</lit:literal></expr>]</index></name> <op:operator pos:line="119" pos:column="77">+</op:operator> <lit:literal type="string" pos:line="119" pos:column="79">"."</lit:literal> <op:operator pos:line="119" pos:column="83">+</op:operator> <name><name pos:line="119" pos:column="85">domainSplit</name><index pos:line="119" pos:column="96">[<expr><call><name><name pos:line="119" pos:column="97">domainSplit</name><op:operator pos:line="119" pos:column="108">.</op:operator><name pos:line="119" pos:column="109">Count</name></name><argument_list pos:line="119" pos:column="114">()</argument_list></call> <op:operator pos:line="119" pos:column="117">-</op:operator> <lit:literal type="number" pos:line="119" pos:column="119">1</lit:literal></expr>]</index></name></expr>;</return>
			}</block></then></if>
			<return pos:line="121" pos:column="25">return <expr><name pos:line="121" pos:column="32">machineDomain</name></expr>;</return>
		}</block></function>

        <decl_stmt><decl><type><specifier pos:line="124" pos:column="9">private</specifier> <specifier pos:line="124" pos:column="17">static</specifier> <name pos:line="124" pos:column="24">ILog</name></type> <name pos:line="124" pos:column="29">Logger</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="125" pos:column="17">private</specifier> <specifier pos:line="125" pos:column="25">static</specifier> <name pos:line="125" pos:column="32">string</name></type> <name pos:line="125" pos:column="39">CurrentLogFile</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="126" pos:column="17">private</specifier> <specifier pos:line="126" pos:column="25">static</specifier> <name pos:line="126" pos:column="32">string</name></type> <name pos:line="126" pos:column="39">LogPath</name></decl>;</decl_stmt>

		<decl_stmt><decl><type><specifier pos:line="128" pos:column="17">private</specifier> <specifier pos:line="128" pos:column="25">static</specifier> <name pos:line="128" pos:column="32">bool</name></type> <name pos:line="128" pos:column="37">_initialized</name></decl>;</decl_stmt>
    }</block></class>
}</block></namespace>
</unit>
