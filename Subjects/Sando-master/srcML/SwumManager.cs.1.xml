<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Recommender\Recommender\SwumManager.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Diagnostics</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">IO</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Collections</name><op:operator pos:line="4" pos:column="25">.</op:operator><name pos:line="4" pos:column="26">Generic</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Linq</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">System</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">Xml</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">System</name><op:operator pos:line="7" pos:column="13">.</op:operator><name pos:line="7" pos:column="14">Xml</name><op:operator pos:line="7" pos:column="17">.</op:operator><name pos:line="7" pos:column="18">Linq</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">System</name><op:operator pos:line="8" pos:column="13">.</op:operator><name pos:line="8" pos:column="14">Text</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">ABB</name><op:operator pos:line="9" pos:column="10">.</op:operator><name pos:line="9" pos:column="11">Swum</name></name>;</using>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">ABB</name><op:operator pos:line="10" pos:column="10">.</op:operator><name pos:line="10" pos:column="11">Swum</name><op:operator pos:line="10" pos:column="15">.</op:operator><name pos:line="10" pos:column="16">Nodes</name></name>;</using>
<using pos:line="11" pos:column="1">using <name><name pos:line="11" pos:column="7">ABB</name><op:operator pos:line="11" pos:column="10">.</op:operator><name pos:line="11" pos:column="11">SrcML</name></name>;</using>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">Sando</name><op:operator pos:line="12" pos:column="12">.</op:operator><name pos:line="12" pos:column="13">Core</name><op:operator pos:line="12" pos:column="17">.</op:operator><name pos:line="12" pos:column="18">Logging</name></name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">Sando</name><op:operator pos:line="13" pos:column="12">.</op:operator><name pos:line="13" pos:column="13">Core</name><op:operator pos:line="13" pos:column="17">.</op:operator><name pos:line="13" pos:column="18">Logging</name><op:operator pos:line="13" pos:column="25">.</op:operator><name pos:line="13" pos:column="26">Persistence</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">Sando</name><op:operator pos:line="14" pos:column="12">.</op:operator><name pos:line="14" pos:column="13">Core</name><op:operator pos:line="14" pos:column="17">.</op:operator><name pos:line="14" pos:column="18">Logging</name><op:operator pos:line="14" pos:column="25">.</op:operator><name pos:line="14" pos:column="26">Events</name></name>;</using>


<namespace pos:line="17" pos:column="1">namespace <name><name pos:line="17" pos:column="11">Sando</name><op:operator pos:line="17" pos:column="16">.</op:operator><name pos:line="17" pos:column="17">Recommender</name></name> <block pos:line="17" pos:column="29">{
    <comment type="line" pos:line="18" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="19" pos:column="5">/// Builds SWUM for the methods and method calls in a srcML file.</comment>
    <comment type="line" pos:line="20" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="21" pos:column="5">public</specifier> class <name pos:line="21" pos:column="18">SwumManager</name> <block pos:line="21" pos:column="30">{
        <decl_stmt><decl><type><specifier pos:line="22" pos:column="9">private</specifier> <specifier pos:line="22" pos:column="17">static</specifier> <name pos:line="22" pos:column="24">SwumManager</name></type> <name pos:line="22" pos:column="36">instance</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="23" pos:column="9">private</specifier> <specifier pos:line="23" pos:column="17">const</specifier> <name pos:line="23" pos:column="23">string</name></type> <name pos:line="23" pos:column="30">DefaultCacheFile</name> <init pos:line="23" pos:column="47">= <expr><lit:literal type="string" pos:line="23" pos:column="49">"swum-cache.txt"</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="24" pos:column="9">private</specifier> <specifier pos:line="24" pos:column="17">readonly</specifier> <name pos:line="24" pos:column="26">XName</name><index pos:line="24" pos:column="31">[]</index></type> <name pos:line="24" pos:column="34">functionTypes</name> <init pos:line="24" pos:column="48">= <expr><op:operator pos:line="24" pos:column="50">new</op:operator> <name><name pos:line="24" pos:column="54">XName</name><index pos:line="24" pos:column="59">[]</index></name> <block pos:line="24" pos:column="62">{ <expr><name><name pos:line="24" pos:column="64">SRC</name><op:operator pos:line="24" pos:column="67">.</op:operator><name pos:line="24" pos:column="68">Function</name></name></expr>, <expr><name><name pos:line="24" pos:column="78">SRC</name><op:operator pos:line="24" pos:column="81">.</op:operator><name pos:line="24" pos:column="82">Constructor</name></name></expr>, <expr><name><name pos:line="24" pos:column="95">SRC</name><op:operator pos:line="24" pos:column="98">.</op:operator><name pos:line="24" pos:column="99">Destructor</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="25" pos:column="9">private</specifier> <name pos:line="25" pos:column="17">SwumBuilder</name></type> <name pos:line="25" pos:column="29">builder</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="26" pos:column="9">private</specifier> <name><name pos:line="26" pos:column="17">Dictionary</name><argument_list pos:line="26" pos:column="27">&lt;<argument><name pos:line="26" pos:column="28">string</name></argument>, <argument><name pos:line="26" pos:column="36">SwumDataRecord</name></argument>&gt;</argument_list></name></type> <name pos:line="26" pos:column="52">signaturesToSwum</name></decl>;</decl_stmt>

        <comment type="line" pos:line="28" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="29" pos:column="9">/// Private constructor for a new SwumManager.</comment>
        <comment type="line" pos:line="30" pos:column="9">/// &lt;/summary&gt;</comment>
        <constructor><specifier pos:line="31" pos:column="9">private</specifier> <name pos:line="31" pos:column="17">SwumManager</name><parameter_list pos:line="31" pos:column="28">()</parameter_list> <block pos:line="31" pos:column="31">{
            <expr_stmt><expr><name pos:line="32" pos:column="13">builder</name> <op:operator pos:line="32" pos:column="21">=</op:operator> <op:operator pos:line="32" pos:column="23">new</op:operator> <name pos:line="32" pos:column="27">UnigramSwumBuilder</name> <block pos:line="32" pos:column="46">{ <expr><name pos:line="32" pos:column="48">Splitter</name> <op:operator pos:line="32" pos:column="57">=</op:operator> <op:operator pos:line="32" pos:column="59">new</op:operator> <call><name pos:line="32" pos:column="63">CamelIdSplitter</name><argument_list pos:line="32" pos:column="78">()</argument_list></call></expr> }</block></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="33" pos:column="13">signaturesToSwum</name> <op:operator pos:line="33" pos:column="30">=</op:operator> <op:operator pos:line="33" pos:column="32">new</op:operator> <call><name><name pos:line="33" pos:column="36">Dictionary</name><argument_list pos:line="33" pos:column="46">&lt;<argument><name pos:line="33" pos:column="47">string</name></argument>, <argument><name pos:line="33" pos:column="55">SwumDataRecord</name></argument>&gt;</argument_list></name><argument_list pos:line="33" pos:column="70">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="34" pos:column="13">CacheLoaded</name> <op:operator pos:line="34" pos:column="25">=</op:operator> <lit:literal type="boolean" pos:line="34" pos:column="27">false</lit:literal></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="37" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="38" pos:column="9">/// Gets the singleton instance of SwumManager.</comment>
        <comment type="line" pos:line="39" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="40" pos:column="9">public</specifier> <specifier pos:line="40" pos:column="16">static</specifier> <name pos:line="40" pos:column="23">SwumManager</name></type> <name pos:line="40" pos:column="35">Instance</name> <block pos:line="40" pos:column="44">{ 
            <function><name pos:line="41" pos:column="13">get</name> <block pos:line="41" pos:column="17">{
                <if pos:line="42" pos:column="17">if<condition pos:line="42" pos:column="19">(<expr><name pos:line="42" pos:column="20">instance</name> <op:operator pos:line="42" pos:column="29">==</op:operator> <name pos:line="42" pos:column="32">null</name></expr>)</condition><then pos:line="42" pos:column="37"> <block pos:line="42" pos:column="38">{
                    <expr_stmt><expr><name pos:line="43" pos:column="21">instance</name> <op:operator pos:line="43" pos:column="30">=</op:operator> <op:operator pos:line="43" pos:column="32">new</op:operator> <call><name pos:line="43" pos:column="36">SwumManager</name><argument_list pos:line="43" pos:column="47">()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <return pos:line="45" pos:column="17">return <expr><name pos:line="45" pos:column="24">instance</name></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="49" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="50" pos:column="9">/// Gets or sets the SwumBuilder used to construct SWUM.</comment>
        <comment type="line" pos:line="51" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="52" pos:column="9">public</specifier> <name pos:line="52" pos:column="16">SwumBuilder</name></type> <name pos:line="52" pos:column="28">Builder</name> <block pos:line="52" pos:column="36">{
            <function><name pos:line="53" pos:column="13">get</name> <block pos:line="53" pos:column="17">{ <return pos:line="53" pos:column="19">return <expr><name pos:line="53" pos:column="26">builder</name></expr>;</return> }</block></function>
            <function><name pos:line="54" pos:column="13">set</name> <block pos:line="54" pos:column="17">{ <expr_stmt><expr><name pos:line="54" pos:column="19">builder</name> <op:operator pos:line="54" pos:column="27">=</op:operator> <name pos:line="54" pos:column="29">value</name></expr>;</expr_stmt> }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="57" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="58" pos:column="9">/// The SrcMLArchive to retrieve SrcML files from</comment>
        <comment type="line" pos:line="59" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="60" pos:column="9">public</specifier> <name pos:line="60" pos:column="16">ISrcMLArchive</name></type> <name pos:line="60" pos:column="30">Archive</name> <block pos:line="60" pos:column="38">{ <function_decl><name pos:line="60" pos:column="40">get</name>;</function_decl> <function_decl><name pos:line="60" pos:column="45">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="62" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="63" pos:column="9">/// The SrcMLGenerator to use to convert source files to SrcML.</comment>
        <comment type="line" pos:line="64" pos:column="9">/// This is only used if Archive is null.</comment>
        <comment type="line" pos:line="65" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="66" pos:column="9">public</specifier> <name pos:line="66" pos:column="16">ISrcMLGenerator</name></type> <name pos:line="66" pos:column="32">Generator</name> <block pos:line="66" pos:column="42">{ <function_decl><name pos:line="66" pos:column="44">get</name>;</function_decl> <function_decl><name pos:line="66" pos:column="49">set</name>;</function_decl> }</block></decl></decl_stmt>
    
        <comment type="line" pos:line="68" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="69" pos:column="9">/// The path to the cache file on disk.</comment>
        <comment type="line" pos:line="70" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="71" pos:column="9">public</specifier> <name pos:line="71" pos:column="16">string</name></type> <name pos:line="71" pos:column="23">CachePath</name> <block pos:line="71" pos:column="33">{ <function_decl><name pos:line="71" pos:column="35">get</name>;</function_decl> <function_decl><specifier pos:line="71" pos:column="40">private</specifier> <name pos:line="71" pos:column="48">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="73" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="74" pos:column="9">/// Indicates whether a cache file has been successfully loaded.</comment>
        <comment type="line" pos:line="75" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="76" pos:column="9">public</specifier> <name pos:line="76" pos:column="16">bool</name></type> <name pos:line="76" pos:column="21">CacheLoaded</name> <block pos:line="76" pos:column="33">{ <function_decl><name pos:line="76" pos:column="35">get</name>;</function_decl> <function_decl><specifier pos:line="76" pos:column="40">private</specifier> <name pos:line="76" pos:column="48">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="78" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="79" pos:column="9">/// Sets the CachePath and initializes the SWUM data from the cache file in the given directory, if it exists.</comment>
        <comment type="line" pos:line="80" pos:column="9">/// Any previously constructed SWUMs will be deleted.</comment>
        <comment type="line" pos:line="81" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="82" pos:column="9">/// &lt;param name="cacheDirectory"&gt;The path for the directory containing the SWUM cache file.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="83" pos:column="9">public</specifier> <name pos:line="83" pos:column="16">void</name></type> <name pos:line="83" pos:column="21">Initialize</name><parameter_list pos:line="83" pos:column="31">(<param><decl><type><name pos:line="83" pos:column="32">string</name></type> <name pos:line="83" pos:column="39">cacheDirectory</name></decl></param>)</parameter_list> <block pos:line="83" pos:column="55">{
            <expr_stmt><expr><call><name pos:line="84" pos:column="13">Initialize</name><argument_list pos:line="84" pos:column="23">(<argument><expr><name pos:line="84" pos:column="24">cacheDirectory</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="84" pos:column="40">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="87" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="88" pos:column="9">/// Sets the CachePath and initializes the SWUM data from the cache file in the given directory, if desired.</comment>
        <comment type="line" pos:line="89" pos:column="9">/// Any previously constructed SWUMs will be deleted.</comment>
        <comment type="line" pos:line="90" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="91" pos:column="9">/// &lt;param name="cacheDirectory"&gt;The path for the directory containing the SWUM cache file.&lt;/param&gt;</comment>
        <comment type="line" pos:line="92" pos:column="9">/// &lt;param name="useCache"&gt;True to use the existing cache file, if any. False to not load any cache file.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="93" pos:column="9">public</specifier> <name pos:line="93" pos:column="16">void</name></type> <name pos:line="93" pos:column="21">Initialize</name><parameter_list pos:line="93" pos:column="31">(<param><decl><type><name pos:line="93" pos:column="32">string</name></type> <name pos:line="93" pos:column="39">cacheDirectory</name></decl></param>, <param><decl><type><name pos:line="93" pos:column="55">bool</name></type> <name pos:line="93" pos:column="60">useCache</name></decl></param>)</parameter_list> <block pos:line="93" pos:column="70">{
            <expr_stmt><expr><call><name pos:line="94" pos:column="13">Clear</name><argument_list pos:line="94" pos:column="18">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="95" pos:column="13">CachePath</name> <op:operator pos:line="95" pos:column="23">=</op:operator> <call><name><name pos:line="95" pos:column="25">Path</name><op:operator pos:line="95" pos:column="29">.</op:operator><name pos:line="95" pos:column="30">Combine</name></name><argument_list pos:line="95" pos:column="37">(<argument><expr><name pos:line="95" pos:column="38">cacheDirectory</name></expr></argument>, <argument><expr><name pos:line="95" pos:column="54">DefaultCacheFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if pos:line="97" pos:column="13">if<condition pos:line="97" pos:column="15">(<expr><name pos:line="97" pos:column="16">useCache</name></expr>)</condition><then pos:line="97" pos:column="25"> <block pos:line="97" pos:column="26">{
                <if pos:line="98" pos:column="17">if<condition pos:line="98" pos:column="19">(<expr><op:operator pos:line="98" pos:column="20">!</op:operator><call><name><name pos:line="98" pos:column="21">File</name><op:operator pos:line="98" pos:column="25">.</op:operator><name pos:line="98" pos:column="26">Exists</name></name><argument_list pos:line="98" pos:column="32">(<argument><expr><name pos:line="98" pos:column="33">CachePath</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="98" pos:column="44"> <block pos:line="98" pos:column="45">{
					<expr_stmt><expr><call><name><name pos:line="99" pos:column="41">LogEvents</name><op:operator pos:line="99" pos:column="50">.</op:operator><name pos:line="99" pos:column="51">SwumCacheFileNotExist</name></name><argument_list pos:line="99" pos:column="72">(<argument><expr><name pos:line="99" pos:column="73">this</name></expr></argument>, <argument><expr><name pos:line="99" pos:column="79">CachePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return pos:line="100" pos:column="21">return;</return>
                }</block></then></if>
                <expr_stmt><expr><call><name pos:line="102" pos:column="17">ReadSwumCache</name><argument_list pos:line="102" pos:column="30">(<argument><expr><name pos:line="102" pos:column="31">CachePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="103" pos:column="17">CacheLoaded</name> <op:operator pos:line="103" pos:column="29">=</op:operator> <lit:literal type="boolean" pos:line="103" pos:column="31">true</lit:literal></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="107" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="108" pos:column="9">/// Generates SWUMs for the method definitions within the given source file.</comment>
        <comment type="line" pos:line="109" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="110" pos:column="9">/// &lt;param name="sourcePath"&gt;The path to the source file.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="111" pos:column="9">public</specifier> <name pos:line="111" pos:column="16">void</name></type> <name pos:line="111" pos:column="21">AddSourceFile</name><parameter_list pos:line="111" pos:column="34">(<param><decl><type><name pos:line="111" pos:column="35">string</name></type> <name pos:line="111" pos:column="42">sourcePath</name></decl></param>)</parameter_list> <block pos:line="111" pos:column="54">{
            <comment type="line" pos:line="112" pos:column="13">//Don't try to process files that SrcML can't handle</comment>
            <if pos:line="113" pos:column="13">if<condition pos:line="113" pos:column="15">(<expr><name pos:line="113" pos:column="16">Archive</name> <op:operator pos:line="113" pos:column="24">!=</op:operator> <name pos:line="113" pos:column="27">null</name> <op:operator pos:line="113" pos:column="32">&amp;&amp;</op:operator> <op:operator pos:line="113" pos:column="35">!</op:operator><call><name><name pos:line="113" pos:column="36">Archive</name><op:operator pos:line="113" pos:column="43">.</op:operator><name pos:line="113" pos:column="44">IsValidFileExtension</name></name><argument_list pos:line="113" pos:column="64">(<argument><expr><name pos:line="113" pos:column="65">sourcePath</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="113" pos:column="77"> <block pos:line="113" pos:column="78">{ <return pos:line="113" pos:column="80">return;</return> }</block></then></if>
            <decl_stmt><decl><type><name pos:line="114" pos:column="13">var</name></type> <name pos:line="114" pos:column="17">fileExt</name> <init pos:line="114" pos:column="25">= <expr><call><name><name pos:line="114" pos:column="27">Path</name><op:operator pos:line="114" pos:column="31">.</op:operator><name pos:line="114" pos:column="32">GetExtension</name></name><argument_list pos:line="114" pos:column="44">(<argument><expr><name pos:line="114" pos:column="45">sourcePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="115" pos:column="13">if<condition pos:line="115" pos:column="15">(<expr><name pos:line="115" pos:column="16">fileExt</name> <op:operator pos:line="115" pos:column="24">==</op:operator> <name pos:line="115" pos:column="27">null</name> <op:operator pos:line="115" pos:column="32">||</op:operator> <op:operator pos:line="115" pos:column="35">(</op:operator><name pos:line="115" pos:column="36">Generator</name> <op:operator pos:line="115" pos:column="46">!=</op:operator> <name pos:line="115" pos:column="49">null</name> <op:operator pos:line="115" pos:column="54">&amp;&amp;</op:operator> <op:operator pos:line="115" pos:column="57">!</op:operator><call><name><name pos:line="115" pos:column="58">Generator</name><op:operator pos:line="115" pos:column="67">.</op:operator><name pos:line="115" pos:column="68">ExtensionMapping</name><op:operator pos:line="115" pos:column="84">.</op:operator><name pos:line="115" pos:column="85">ContainsKey</name></name><argument_list pos:line="115" pos:column="96">(<argument><expr><name pos:line="115" pos:column="97">fileExt</name></expr></argument>)</argument_list></call><op:operator pos:line="115" pos:column="105">)</op:operator></expr>)</condition><then pos:line="115" pos:column="107"> <block pos:line="115" pos:column="108">{
                <return pos:line="116" pos:column="17">return;</return>
            }</block></then></if>

            <expr_stmt><expr><name pos:line="119" pos:column="13">sourcePath</name> <op:operator pos:line="119" pos:column="24">=</op:operator> <call><name><name pos:line="119" pos:column="26">Path</name><op:operator pos:line="119" pos:column="30">.</op:operator><name pos:line="119" pos:column="31">GetFullPath</name></name><argument_list pos:line="119" pos:column="42">(<argument><expr><name pos:line="119" pos:column="43">sourcePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="120" pos:column="13">XElement</name></type> <name pos:line="120" pos:column="22">fileElement</name></decl>;</decl_stmt>
            <if pos:line="121" pos:column="13">if<condition pos:line="121" pos:column="15">(<expr><name pos:line="121" pos:column="16">Archive</name> <op:operator pos:line="121" pos:column="24">!=</op:operator> <name pos:line="121" pos:column="27">null</name></expr>)</condition><then pos:line="121" pos:column="32"> <block pos:line="121" pos:column="33">{
                <expr_stmt><expr><name pos:line="122" pos:column="17">fileElement</name> <op:operator pos:line="122" pos:column="29">=</op:operator> <call><name><name pos:line="122" pos:column="31">Archive</name><op:operator pos:line="122" pos:column="38">.</op:operator><name pos:line="122" pos:column="39">GetXElementForSourceFile</name></name><argument_list pos:line="122" pos:column="63">(<argument><expr><name pos:line="122" pos:column="64">sourcePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="123" pos:column="17">if<condition pos:line="123" pos:column="19">(<expr><name pos:line="123" pos:column="20">fileElement</name> <op:operator pos:line="123" pos:column="32">==</op:operator> <name pos:line="123" pos:column="35">null</name></expr>)</condition><then pos:line="123" pos:column="40"> <block pos:line="123" pos:column="41">{
                    <expr_stmt><expr><call><name><name pos:line="124" pos:column="21">LogEvents</name><op:operator pos:line="124" pos:column="30">.</op:operator><name pos:line="124" pos:column="31">SwumFileNotFoundInArchive</name></name><argument_list pos:line="124" pos:column="56">(<argument><expr><name pos:line="124" pos:column="57">this</name></expr></argument>, <argument><expr><name pos:line="124" pos:column="63">sourcePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then> <else pos:line="126" pos:column="15">else <if pos:line="126" pos:column="20">if<condition pos:line="126" pos:column="22">(<expr><name pos:line="126" pos:column="23">Generator</name> <op:operator pos:line="126" pos:column="33">!=</op:operator> <name pos:line="126" pos:column="36">null</name></expr>)</condition><then pos:line="126" pos:column="41"> <block pos:line="126" pos:column="42">{
                <decl_stmt><decl><type><name pos:line="127" pos:column="17">string</name></type> <name pos:line="127" pos:column="24">outFile</name> <init pos:line="127" pos:column="32">= <expr><call><name><name pos:line="127" pos:column="34">Path</name><op:operator pos:line="127" pos:column="38">.</op:operator><name pos:line="127" pos:column="39">GetTempFileName</name></name><argument_list pos:line="127" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <try pos:line="128" pos:column="17">try <block pos:line="128" pos:column="21">{
                    <expr_stmt><expr><call><name><name pos:line="129" pos:column="21">Generator</name><op:operator pos:line="129" pos:column="30">.</op:operator><name pos:line="129" pos:column="31">GenerateSrcMLFromFile</name></name><argument_list pos:line="129" pos:column="52">(<argument><expr><name pos:line="129" pos:column="53">sourcePath</name></expr></argument>, <argument><expr><name pos:line="129" pos:column="65">outFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="130" pos:column="21">fileElement</name> <op:operator pos:line="130" pos:column="33">=</op:operator> <call><name><name pos:line="130" pos:column="35">SrcMLElement</name><op:operator pos:line="130" pos:column="47">.</op:operator><name pos:line="130" pos:column="48">Load</name></name><argument_list pos:line="130" pos:column="52">(<argument><expr><name pos:line="130" pos:column="53">outFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if pos:line="131" pos:column="21">if<condition pos:line="131" pos:column="23">(<expr><name pos:line="131" pos:column="24">fileElement</name> <op:operator pos:line="131" pos:column="36">==</op:operator> <name pos:line="131" pos:column="39">null</name></expr>)</condition><then pos:line="131" pos:column="44"> <block pos:line="131" pos:column="45">{
                        <expr_stmt><expr><call><name><name pos:line="132" pos:column="25">LogEvents</name><op:operator pos:line="132" pos:column="34">.</op:operator><name pos:line="132" pos:column="35">SwumErrorGeneratingSrcML</name></name><argument_list pos:line="132" pos:column="59">(<argument><expr><name pos:line="132" pos:column="60">this</name></expr></argument>, <argument><expr><name pos:line="132" pos:column="66">sourcePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block> <finally pos:line="134" pos:column="19">finally <block pos:line="134" pos:column="27">{
                    <expr_stmt><expr><call><name><name pos:line="135" pos:column="21">File</name><op:operator pos:line="135" pos:column="25">.</op:operator><name pos:line="135" pos:column="26">Delete</name></name><argument_list pos:line="135" pos:column="32">(<argument><expr><name pos:line="135" pos:column="33">outFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></finally></try>
            }</block></then> <else pos:line="137" pos:column="15">else <block pos:line="137" pos:column="20">{
                <throw pos:line="138" pos:column="17">throw <expr><op:operator pos:line="138" pos:column="23">new</op:operator> <call><name pos:line="138" pos:column="27">InvalidOperationException</name><argument_list pos:line="138" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="138" pos:column="53">"SwumManager - Archive and Generator are both null"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></else></if></else></if>

            <try pos:line="141" pos:column="13">try <block pos:line="141" pos:column="17">{
                <if pos:line="142" pos:column="17">if<condition pos:line="142" pos:column="19">(<expr><name pos:line="142" pos:column="20">fileElement</name> <op:operator pos:line="142" pos:column="32">!=</op:operator> <name pos:line="142" pos:column="35">null</name></expr>)</condition><then pos:line="142" pos:column="40"> <block pos:line="142" pos:column="41">{
                    <expr_stmt><expr><call><name pos:line="143" pos:column="21">AddSwumForMethodDefinitions</name><argument_list pos:line="143" pos:column="48">(<argument><expr><name pos:line="143" pos:column="49">fileElement</name></expr></argument>, <argument><expr><name pos:line="143" pos:column="62">sourcePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block> <catch pos:line="145" pos:column="15">catch<parameter_list pos:line="145" pos:column="20">(<param><decl><type><name pos:line="145" pos:column="21">Exception</name></type> <name pos:line="145" pos:column="31">e</name></decl></param>)</parameter_list> <block pos:line="145" pos:column="34">{
                <expr_stmt><expr><call><name><name pos:line="146" pos:column="17">LogEvents</name><op:operator pos:line="146" pos:column="26">.</op:operator><name pos:line="146" pos:column="27">SwumErrorCreatingSwum</name></name><argument_list pos:line="146" pos:column="48">(<argument><expr><name pos:line="146" pos:column="49">this</name></expr></argument>, <argument><expr><name pos:line="146" pos:column="55">sourcePath</name></expr></argument>, <argument><expr><name pos:line="146" pos:column="67">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></function>

        <comment type="line" pos:line="150" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="151" pos:column="9">/// Generates SWUMs for the method definitions within the given source file.</comment>
        <comment type="line" pos:line="152" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="153" pos:column="9">/// &lt;param name="sourcePath"&gt;The path to the source file.&lt;/param&gt;</comment>
        <comment type="line" pos:line="154" pos:column="9">/// &lt;param name="sourceXml"&gt;The SrcML for the given source file.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="155" pos:column="9">public</specifier> <name pos:line="155" pos:column="16">void</name></type> <name pos:line="155" pos:column="21">AddSourceFile</name><parameter_list pos:line="155" pos:column="34">(<param><decl><type><name pos:line="155" pos:column="35">string</name></type> <name pos:line="155" pos:column="42">sourcePath</name></decl></param>, <param><decl><type><name pos:line="155" pos:column="54">XElement</name></type> <name pos:line="155" pos:column="63">sourceXml</name></decl></param>)</parameter_list> <block pos:line="155" pos:column="74">{
            <try pos:line="156" pos:column="13">try <block pos:line="156" pos:column="17">{
                <if pos:line="157" pos:column="17">if<condition pos:line="157" pos:column="19">(<expr><name pos:line="157" pos:column="20">sourceXml</name> <op:operator pos:line="157" pos:column="30">!=</op:operator> <name pos:line="157" pos:column="33">null</name></expr>)</condition><then pos:line="157" pos:column="38"> <block pos:line="157" pos:column="39">{
                    <if pos:line="158" pos:column="21">if <condition pos:line="158" pos:column="24">(<expr><op:operator pos:line="158" pos:column="25">!</op:operator><call><name><name pos:line="158" pos:column="26">sourcePath</name><op:operator pos:line="158" pos:column="36">.</op:operator><name pos:line="158" pos:column="37">EndsWith</name></name><argument_list pos:line="158" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="158" pos:column="46">"xaml"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="158" pos:column="54">
                    <block pos:line="159" pos:column="21">{
                        <expr_stmt><expr><call><name pos:line="160" pos:column="25">AddSwumForMethodDefinitions</name><argument_list pos:line="160" pos:column="52">(<argument><expr><name pos:line="160" pos:column="53">sourceXml</name></expr></argument>, <argument><expr><name pos:line="160" pos:column="64">sourcePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name pos:line="161" pos:column="25">AddSwumForFieldDefinitions</name><argument_list pos:line="161" pos:column="51">(<argument><expr><name pos:line="161" pos:column="52">sourceXml</name></expr></argument>, <argument><expr><name pos:line="161" pos:column="63">sourcePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>
            }</block> <catch pos:line="164" pos:column="15">catch<parameter_list pos:line="164" pos:column="20">(<param><decl><type><name pos:line="164" pos:column="21">Exception</name></type> <name pos:line="164" pos:column="31">e</name></decl></param>)</parameter_list> <block pos:line="164" pos:column="34">{
                <expr_stmt><expr><call><name><name pos:line="165" pos:column="17">LogEvents</name><op:operator pos:line="165" pos:column="26">.</op:operator><name pos:line="165" pos:column="27">SwumErrorCreatingSwum</name></name><argument_list pos:line="165" pos:column="48">(<argument><expr><name pos:line="165" pos:column="49">this</name></expr></argument>, <argument><expr><name pos:line="165" pos:column="55">sourcePath</name></expr></argument>, <argument><expr><name pos:line="165" pos:column="67">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></function>

        <comment type="line" pos:line="169" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="170" pos:column="9">/// Generates SWUMs for the method definitions within the given SrcML file</comment>
        <comment type="line" pos:line="171" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="172" pos:column="9">/// &lt;param name="fileUnit"&gt;A SrcML file unit.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="173" pos:column="9">public</specifier> <name pos:line="173" pos:column="16">void</name></type> <name pos:line="173" pos:column="21">AddSrcMLFile</name><parameter_list pos:line="173" pos:column="33">(<param><decl><type><name pos:line="173" pos:column="34">XElement</name></type> <name pos:line="173" pos:column="43">fileUnit</name></decl></param>)</parameter_list> <block pos:line="173" pos:column="53">{
            <decl_stmt><decl><type><name pos:line="174" pos:column="13">var</name></type> <name pos:line="174" pos:column="17">fileName</name> <init pos:line="174" pos:column="26">= <expr><call><name><name pos:line="174" pos:column="28">SrcMLElement</name><op:operator pos:line="174" pos:column="40">.</op:operator><name pos:line="174" pos:column="41">GetFileNameForUnit</name></name><argument_list pos:line="174" pos:column="59">(<argument><expr><name pos:line="174" pos:column="60">fileUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="175" pos:column="13">AddSwumForMethodDefinitions</name><argument_list pos:line="175" pos:column="40">(<argument><expr><name pos:line="175" pos:column="41">fileUnit</name></expr></argument>, <argument><expr><name pos:line="175" pos:column="51">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="178" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="179" pos:column="9">/// Regenerates SWUMs for the methods in the given source file. Any previously-generated SWUMs for the file will first be removed.</comment>
        <comment type="line" pos:line="180" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="181" pos:column="9">/// &lt;param name="sourcePath"&gt;The path of the file to update.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="182" pos:column="9">public</specifier> <name pos:line="182" pos:column="16">void</name></type> <name pos:line="182" pos:column="21">UpdateSourceFile</name><parameter_list pos:line="182" pos:column="37">(<param><decl><type><name pos:line="182" pos:column="38">string</name></type> <name pos:line="182" pos:column="45">sourcePath</name></decl></param>)</parameter_list> <block pos:line="182" pos:column="57">{
            <expr_stmt><expr><call><name pos:line="183" pos:column="13">RemoveSourceFile</name><argument_list pos:line="183" pos:column="29">(<argument><expr><name pos:line="183" pos:column="30">sourcePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="184" pos:column="13">AddSourceFile</name><argument_list pos:line="184" pos:column="26">(<argument><expr><name pos:line="184" pos:column="27">sourcePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="187" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="188" pos:column="9">/// Regenerates SWUMs for the methods in the given source file. Any previously-generated SWUMs for the file will first be removed.</comment>
        <comment type="line" pos:line="189" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="190" pos:column="9">/// &lt;param name="sourcePath"&gt;The path of the file to update.&lt;/param&gt;</comment>
        <comment type="line" pos:line="191" pos:column="9">/// &lt;param name="sourceXml"&gt;The SrcML for the new version of the file.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="192" pos:column="9">public</specifier> <name pos:line="192" pos:column="16">void</name></type> <name pos:line="192" pos:column="21">UpdateSourceFile</name><parameter_list pos:line="192" pos:column="37">(<param><decl><type><name pos:line="192" pos:column="38">string</name></type> <name pos:line="192" pos:column="45">sourcePath</name></decl></param>, <param><decl><type><name pos:line="192" pos:column="57">XElement</name></type> <name pos:line="192" pos:column="66">sourceXml</name></decl></param>)</parameter_list> <block pos:line="192" pos:column="77">{
            <expr_stmt><expr><call><name pos:line="193" pos:column="13">RemoveSourceFile</name><argument_list pos:line="193" pos:column="29">(<argument><expr><name pos:line="193" pos:column="30">sourcePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="194" pos:column="13">AddSourceFile</name><argument_list pos:line="194" pos:column="26">(<argument><expr><name pos:line="194" pos:column="27">sourcePath</name></expr></argument>, <argument><expr><name pos:line="194" pos:column="39">sourceXml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="197" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="198" pos:column="9">/// Removes any SWUMs that were generated from the given source file.</comment>
        <comment type="line" pos:line="199" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="200" pos:column="9">/// &lt;param name="sourcePath"&gt;The path of the file to remove.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="201" pos:column="9">public</specifier> <name pos:line="201" pos:column="16">void</name></type> <name pos:line="201" pos:column="21">RemoveSourceFile</name><parameter_list pos:line="201" pos:column="37">(<param><decl><type><name pos:line="201" pos:column="38">string</name></type> <name pos:line="201" pos:column="45">sourcePath</name></decl></param>)</parameter_list> <block pos:line="201" pos:column="57">{
            <decl_stmt><decl><type><name pos:line="202" pos:column="13">var</name></type> <name pos:line="202" pos:column="17">fullPath</name> <init pos:line="202" pos:column="26">= <expr><call><name><name pos:line="202" pos:column="28">Path</name><op:operator pos:line="202" pos:column="32">.</op:operator><name pos:line="202" pos:column="33">GetFullPath</name></name><argument_list pos:line="202" pos:column="44">(<argument><expr><name pos:line="202" pos:column="45">sourcePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="203" pos:column="13">var</name></type> <name pos:line="203" pos:column="17">sigsToRemove</name> <init pos:line="203" pos:column="30">= <expr><op:operator pos:line="203" pos:column="32">new</op:operator> <call><name><name pos:line="203" pos:column="36">HashSet</name><argument_list pos:line="203" pos:column="43">&lt;<argument><name pos:line="203" pos:column="44">string</name></argument>&gt;</argument_list></name><argument_list pos:line="203" pos:column="51">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <lock pos:line="204" pos:column="13">lock(<expr><name pos:line="204" pos:column="18">signaturesToSwum</name></expr>) <block pos:line="204" pos:column="36">{
                <foreach pos:line="205" pos:column="17">foreach(<init><decl><type><name pos:line="205" pos:column="25">var</name></type> <name pos:line="205" pos:column="29">sig</name> <range pos:line="205" pos:column="33">in <expr><name><name pos:line="205" pos:column="36">signaturesToSwum</name><op:operator pos:line="205" pos:column="52">.</op:operator><name pos:line="205" pos:column="53">Keys</name></name></expr></range></decl></init>) <block pos:line="205" pos:column="59">{
                    <decl_stmt><decl><type><name pos:line="206" pos:column="21">var</name></type> <name pos:line="206" pos:column="25">sdr</name> <init pos:line="206" pos:column="29">= <expr><name><name pos:line="206" pos:column="31">signaturesToSwum</name><index pos:line="206" pos:column="47">[<expr><name pos:line="206" pos:column="48">sig</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <if pos:line="207" pos:column="21">if<condition pos:line="207" pos:column="23">(<expr><call><name><name pos:line="207" pos:column="24">sdr</name><op:operator pos:line="207" pos:column="27">.</op:operator><name pos:line="207" pos:column="28">FileNames</name><op:operator pos:line="207" pos:column="37">.</op:operator><name pos:line="207" pos:column="38">Contains</name></name><argument_list pos:line="207" pos:column="46">(<argument><expr><name pos:line="207" pos:column="47">fullPath</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="207" pos:column="57"> <block pos:line="207" pos:column="58">{
                        <expr_stmt><expr><call><name><name pos:line="208" pos:column="25">sdr</name><op:operator pos:line="208" pos:column="28">.</op:operator><name pos:line="208" pos:column="29">FileNames</name><op:operator pos:line="208" pos:column="38">.</op:operator><name pos:line="208" pos:column="39">Remove</name></name><argument_list pos:line="208" pos:column="45">(<argument><expr><name pos:line="208" pos:column="46">fullPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if pos:line="209" pos:column="25">if<condition pos:line="209" pos:column="27">(<expr><op:operator pos:line="209" pos:column="28">!</op:operator><call><name><name pos:line="209" pos:column="29">sdr</name><op:operator pos:line="209" pos:column="32">.</op:operator><name pos:line="209" pos:column="33">FileNames</name><op:operator pos:line="209" pos:column="42">.</op:operator><name pos:line="209" pos:column="43">Any</name></name><argument_list pos:line="209" pos:column="46">()</argument_list></call></expr>)</condition><then pos:line="209" pos:column="49"> <block pos:line="209" pos:column="50">{
                            <expr_stmt><expr><call><name><name pos:line="210" pos:column="29">sigsToRemove</name><op:operator pos:line="210" pos:column="41">.</op:operator><name pos:line="210" pos:column="42">Add</name></name><argument_list pos:line="210" pos:column="45">(<argument><expr><name pos:line="210" pos:column="46">sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></then></if>
                }</block></foreach>

                <comment type="line" pos:line="215" pos:column="17">//remove signatures that no longer have any file names</comment>
                <comment type="line" pos:line="216" pos:column="17">//(This is separate from the above loop because you can't delete keys while you're enumerating them.)</comment>
                <foreach pos:line="217" pos:column="17">foreach(<init><decl><type><name pos:line="217" pos:column="25">var</name></type> <name pos:line="217" pos:column="29">sig</name> <range pos:line="217" pos:column="33">in <expr><name pos:line="217" pos:column="36">sigsToRemove</name></expr></range></decl></init>) <block pos:line="217" pos:column="50">{
                    <expr_stmt><expr><call><name><name pos:line="218" pos:column="21">signaturesToSwum</name><op:operator pos:line="218" pos:column="37">.</op:operator><name pos:line="218" pos:column="38">Remove</name></name><argument_list pos:line="218" pos:column="44">(<argument><expr><name pos:line="218" pos:column="45">sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>
            }</block></lock>
        }</block></function>

        <comment type="line" pos:line="223" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="224" pos:column="9">/// Clears any constructed SWUMs.</comment>
        <comment type="line" pos:line="225" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="226" pos:column="9">public</specifier> <name pos:line="226" pos:column="16">void</name></type> <name pos:line="226" pos:column="21">Clear</name><parameter_list pos:line="226" pos:column="26">()</parameter_list> <block pos:line="226" pos:column="29">{
            <lock pos:line="227" pos:column="13">lock(<expr><name pos:line="227" pos:column="18">signaturesToSwum</name></expr>) <block pos:line="227" pos:column="36">{
                <expr_stmt><expr><call><name><name pos:line="228" pos:column="17">signaturesToSwum</name><op:operator pos:line="228" pos:column="33">.</op:operator><name pos:line="228" pos:column="34">Clear</name></name><argument_list pos:line="228" pos:column="39">()</argument_list></call></expr>;</expr_stmt>
            }</block></lock>
        }</block></function>

        <comment type="line" pos:line="232" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="233" pos:column="9">/// Prints the SWUM cache to the file specified in CachePath.</comment>
        <comment type="line" pos:line="234" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="235" pos:column="9">public</specifier> <name pos:line="235" pos:column="16">void</name></type> <name pos:line="235" pos:column="21">PrintSwumCache</name><parameter_list pos:line="235" pos:column="35">()</parameter_list> <block pos:line="235" pos:column="38">{
            <expr_stmt><expr><call><name pos:line="236" pos:column="13">PrintSwumCache</name><argument_list pos:line="236" pos:column="27">(<argument><expr><call><name><name pos:line="236" pos:column="28">string</name><op:operator pos:line="236" pos:column="34">.</op:operator><name pos:line="236" pos:column="35">IsNullOrWhiteSpace</name></name><argument_list pos:line="236" pos:column="53">(<argument><expr><name pos:line="236" pos:column="54">CachePath</name></expr></argument>)</argument_list></call> <op:operator pos:line="236" pos:column="65">?</op:operator> <name pos:line="236" pos:column="67">DefaultCacheFile</name> <op:operator pos:line="236" pos:column="84">:</op:operator> <name pos:line="236" pos:column="86">CachePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="239" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="240" pos:column="9">/// Prints the SWUM cache to the specified file.</comment>
        <comment type="line" pos:line="241" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="242" pos:column="9">/// &lt;param name="path"&gt;The path to print the SWUM cache to.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="243" pos:column="9">public</specifier> <name pos:line="243" pos:column="16">void</name></type> <name pos:line="243" pos:column="21">PrintSwumCache</name><parameter_list pos:line="243" pos:column="35">(<param><decl><type><name pos:line="243" pos:column="36">string</name></type> <name pos:line="243" pos:column="43">path</name></decl></param>)</parameter_list> <block pos:line="243" pos:column="49">{
            <if pos:line="244" pos:column="13">if<condition pos:line="244" pos:column="15">(<expr><call><name><name pos:line="244" pos:column="16">string</name><op:operator pos:line="244" pos:column="22">.</op:operator><name pos:line="244" pos:column="23">IsNullOrWhiteSpace</name></name><argument_list pos:line="244" pos:column="41">(<argument><expr><name pos:line="244" pos:column="42">path</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="244" pos:column="48"> <block pos:line="244" pos:column="49">{
                <throw pos:line="245" pos:column="17">throw <expr><op:operator pos:line="245" pos:column="23">new</op:operator> <call><name pos:line="245" pos:column="27">ArgumentException</name><argument_list pos:line="245" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="245" pos:column="45">"Path is empty or null."</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="245" pos:column="71">"path"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <using pos:line="247" pos:column="13">using(<decl><type><name pos:line="247" pos:column="19">StreamWriter</name></type> <name pos:line="247" pos:column="32">sw</name> <init pos:line="247" pos:column="35">= <expr><op:operator pos:line="247" pos:column="37">new</op:operator> <call><name pos:line="247" pos:column="41">StreamWriter</name><argument_list pos:line="247" pos:column="53">(<argument><expr><name pos:line="247" pos:column="54">path</name></expr></argument>)</argument_list></call></expr></init></decl>) <block pos:line="247" pos:column="61">{
                <expr_stmt><expr><call><name pos:line="248" pos:column="17">PrintSwumCache</name><argument_list pos:line="248" pos:column="31">(<argument><expr><name pos:line="248" pos:column="32">sw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></using>
        }</block></function>

        <comment type="line" pos:line="252" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="253" pos:column="9">/// Prints the SWUM cache to the specified output stream.</comment>
        <comment type="line" pos:line="254" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="255" pos:column="9">/// &lt;param name="output"&gt;A TextWriter to print the SWUM cache to.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="256" pos:column="9">public</specifier> <name pos:line="256" pos:column="16">void</name></type> <name pos:line="256" pos:column="21">PrintSwumCache</name><parameter_list pos:line="256" pos:column="35">(<param><decl><type><name pos:line="256" pos:column="36">TextWriter</name></type> <name pos:line="256" pos:column="47">output</name></decl></param>)</parameter_list> <block pos:line="256" pos:column="55">{
            <if pos:line="257" pos:column="13">if<condition pos:line="257" pos:column="15">(<expr><name pos:line="257" pos:column="16">output</name> <op:operator pos:line="257" pos:column="23">==</op:operator> <name pos:line="257" pos:column="26">null</name></expr>)</condition><then pos:line="257" pos:column="31"> <block pos:line="257" pos:column="32">{
                <throw pos:line="258" pos:column="17">throw <expr><op:operator pos:line="258" pos:column="23">new</op:operator> <call><name pos:line="258" pos:column="27">ArgumentNullException</name><argument_list pos:line="258" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="258" pos:column="49">"output"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <lock pos:line="260" pos:column="13">lock(<expr><name pos:line="260" pos:column="18">signaturesToSwum</name></expr>) <block pos:line="260" pos:column="36">{
                <foreach pos:line="261" pos:column="17">foreach(<init><decl><type><name pos:line="261" pos:column="25">var</name></type> <name pos:line="261" pos:column="29">kvp</name> <range pos:line="261" pos:column="33">in <expr><name pos:line="261" pos:column="36">signaturesToSwum</name></expr></range></decl></init>) <block pos:line="261" pos:column="54">{
                    <expr_stmt><expr><call><name><name pos:line="262" pos:column="21">output</name><op:operator pos:line="262" pos:column="27">.</op:operator><name pos:line="262" pos:column="28">WriteLine</name></name><argument_list pos:line="262" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="262" pos:column="38">"{0}|{1}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="262" pos:column="49">kvp</name><op:operator pos:line="262" pos:column="52">.</op:operator><name pos:line="262" pos:column="53">Key</name></name></expr></argument>, <argument><expr><call><name><name pos:line="262" pos:column="58">kvp</name><op:operator pos:line="262" pos:column="61">.</op:operator><name pos:line="262" pos:column="62">Value</name><op:operator pos:line="262" pos:column="67">.</op:operator><name pos:line="262" pos:column="68">ToString</name></name><argument_list pos:line="262" pos:column="76">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>
            }</block></lock>
        }</block></function>

        <comment type="line" pos:line="267" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="268" pos:column="9">/// Initializes the cache of SWUM data from a file. Any existing SWUM data will be cleared before reading the file.</comment>
        <comment type="line" pos:line="269" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="270" pos:column="9">/// &lt;param name="path"&gt;The path to the SWUM cache file.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="271" pos:column="9">public</specifier> <name pos:line="271" pos:column="16">void</name></type> <name pos:line="271" pos:column="21">ReadSwumCache</name><parameter_list pos:line="271" pos:column="34">(<param><decl><type><name pos:line="271" pos:column="35">string</name></type> <name pos:line="271" pos:column="42">path</name></decl></param>)</parameter_list> <block pos:line="271" pos:column="48">{
            <using pos:line="272" pos:column="13">using(<decl><type><name pos:line="272" pos:column="19">var</name></type> <name pos:line="272" pos:column="23">cacheFile</name> <init pos:line="272" pos:column="33">= <expr><op:operator pos:line="272" pos:column="35">new</op:operator> <call><name pos:line="272" pos:column="39">StreamReader</name><argument_list pos:line="272" pos:column="51">(<argument><expr><name pos:line="272" pos:column="52">path</name></expr></argument>)</argument_list></call></expr></init></decl>) <block pos:line="272" pos:column="59">{
                <lock pos:line="273" pos:column="17">lock(<expr><name pos:line="273" pos:column="22">signaturesToSwum</name></expr>) <block pos:line="273" pos:column="40">{
                    <comment type="line" pos:line="274" pos:column="21">//clear any existing SWUMs</comment>
                    <expr_stmt><expr><call><name><name pos:line="275" pos:column="21">signaturesToSwum</name><op:operator pos:line="275" pos:column="37">.</op:operator><name pos:line="275" pos:column="38">Clear</name></name><argument_list pos:line="275" pos:column="43">()</argument_list></call></expr>;</expr_stmt>

                    <comment type="line" pos:line="277" pos:column="21">//read each SWUM entry from the cache file</comment>
                    <decl_stmt><decl><type><name pos:line="278" pos:column="21">string</name></type> <name pos:line="278" pos:column="28">entry</name></decl>;</decl_stmt>
                    <while pos:line="279" pos:column="21">while<condition pos:line="279" pos:column="26">(<expr><op:operator pos:line="279" pos:column="27">(</op:operator><name pos:line="279" pos:column="28">entry</name> <op:operator pos:line="279" pos:column="34">=</op:operator> <call><name><name pos:line="279" pos:column="36">cacheFile</name><op:operator pos:line="279" pos:column="45">.</op:operator><name pos:line="279" pos:column="46">ReadLine</name></name><argument_list pos:line="279" pos:column="54">()</argument_list></call><op:operator pos:line="279" pos:column="56">)</op:operator> <op:operator pos:line="279" pos:column="58">!=</op:operator> <name pos:line="279" pos:column="61">null</name></expr>)</condition> <block pos:line="279" pos:column="67">{
                        <comment type="line" pos:line="280" pos:column="25">//the expected format is &lt;signature&gt;|&lt;SwumDataRecord.ToString()&gt;</comment>
                        <decl_stmt><decl><type><name pos:line="281" pos:column="25">string</name><index pos:line="281" pos:column="31">[]</index></type> <name pos:line="281" pos:column="34">fields</name> <init pos:line="281" pos:column="41">= <expr><call><name><name pos:line="281" pos:column="43">entry</name><op:operator pos:line="281" pos:column="48">.</op:operator><name pos:line="281" pos:column="49">Split</name></name><argument_list pos:line="281" pos:column="54">(<argument><expr><op:operator pos:line="281" pos:column="55">new</op:operator><index pos:line="281" pos:column="58">[]</index> <block pos:line="281" pos:column="61">{<expr><lit:literal type="char" pos:line="281" pos:column="62">'|'</lit:literal></expr>}</block></expr></argument>, <argument><expr><lit:literal type="number" pos:line="281" pos:column="68">2</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if pos:line="282" pos:column="25">if<condition pos:line="282" pos:column="27">(<expr><name><name pos:line="282" pos:column="28">fields</name><op:operator pos:line="282" pos:column="34">.</op:operator><name pos:line="282" pos:column="35">Length</name></name> <op:operator pos:line="282" pos:column="42">!=</op:operator> <lit:literal type="number" pos:line="282" pos:column="45">2</lit:literal></expr>)</condition><then pos:line="282" pos:column="47"> <block pos:line="282" pos:column="48">{
                            <expr_stmt><expr><call><name><name pos:line="283" pos:column="29">Debug</name><op:operator pos:line="283" pos:column="34">.</op:operator><name pos:line="283" pos:column="35">WriteLine</name></name><argument_list pos:line="283" pos:column="44">(<argument><expr><call><name><name pos:line="283" pos:column="45">string</name><op:operator pos:line="283" pos:column="51">.</op:operator><name pos:line="283" pos:column="52">Format</name></name><argument_list pos:line="283" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="283" pos:column="59">"Too few fields in SWUM cache entry: {0}"</lit:literal></expr></argument>, <argument><expr><name pos:line="283" pos:column="102">entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <continue pos:line="284" pos:column="29">continue;</continue>
                        }</block></then></if>
                        <try pos:line="286" pos:column="25">try <block pos:line="286" pos:column="29">{
                            <decl_stmt><decl><type><name pos:line="287" pos:column="29">string</name></type> <name pos:line="287" pos:column="36">sig</name> <init pos:line="287" pos:column="40">= <expr><name><name pos:line="287" pos:column="42">fields</name><index pos:line="287" pos:column="48">[<expr><lit:literal type="number" pos:line="287" pos:column="49">0</lit:literal></expr>]</index></name><op:operator pos:line="287" pos:column="51">.</op:operator><call><name pos:line="287" pos:column="52">Trim</name><argument_list pos:line="287" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name pos:line="288" pos:column="29">string</name></type> <name pos:line="288" pos:column="36">data</name> <init pos:line="288" pos:column="41">= <expr><name><name pos:line="288" pos:column="43">fields</name><index pos:line="288" pos:column="49">[<expr><lit:literal type="number" pos:line="288" pos:column="50">1</lit:literal></expr>]</index></name><op:operator pos:line="288" pos:column="52">.</op:operator><call><name pos:line="288" pos:column="53">Trim</name><argument_list pos:line="288" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><name><name pos:line="289" pos:column="29">signaturesToSwum</name><index pos:line="289" pos:column="45">[<expr><name pos:line="289" pos:column="46">sig</name></expr>]</index></name> <op:operator pos:line="289" pos:column="51">=</op:operator> <call><name><name pos:line="289" pos:column="53">SwumDataRecord</name><op:operator pos:line="289" pos:column="67">.</op:operator><name pos:line="289" pos:column="68">Parse</name></name><argument_list pos:line="289" pos:column="73">(<argument><expr><name pos:line="289" pos:column="74">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block> <catch pos:line="290" pos:column="27">catch<parameter_list pos:line="290" pos:column="32">(<param><decl><type><name pos:line="290" pos:column="33">FormatException</name></type> <name pos:line="290" pos:column="49">fe</name></decl></param>)</parameter_list> <block pos:line="290" pos:column="53">{
                            <expr_stmt><expr><call><name><name pos:line="291" pos:column="29">Debug</name><op:operator pos:line="291" pos:column="34">.</op:operator><name pos:line="291" pos:column="35">WriteLine</name></name><argument_list pos:line="291" pos:column="44">(<argument><expr><call><name><name pos:line="291" pos:column="45">string</name><op:operator pos:line="291" pos:column="51">.</op:operator><name pos:line="291" pos:column="52">Format</name></name><argument_list pos:line="291" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="291" pos:column="59">"Improperly formatted SwumDataRecord in Swum cache entry: {0}"</lit:literal></expr></argument>, <argument><expr><name pos:line="291" pos:column="123">entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name pos:line="292" pos:column="29">Debug</name><op:operator pos:line="292" pos:column="34">.</op:operator><name pos:line="292" pos:column="35">WriteLine</name></name><argument_list pos:line="292" pos:column="44">(<argument><expr><name><name pos:line="292" pos:column="45">fe</name><op:operator pos:line="292" pos:column="47">.</op:operator><name pos:line="292" pos:column="48">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></catch></try>
                    }</block></while>
                }</block></lock>
            }</block></using>
        }</block></function>


        <comment type="line" pos:line="300" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="301" pos:column="9">/// Returns the SWUM data for the given method signature.</comment>
        <comment type="line" pos:line="302" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="303" pos:column="9">/// &lt;param name="methodSignature"&gt;The method signature to get SWUM data about.&lt;/param&gt;</comment>
        <comment type="line" pos:line="304" pos:column="9">/// &lt;returns&gt;A SwumDataRecord containing the SWUM data about the given method, or null if no data is found.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="305" pos:column="9">public</specifier> <name pos:line="305" pos:column="16">SwumDataRecord</name></type> <name pos:line="305" pos:column="31">GetSwumForSignature</name><parameter_list pos:line="305" pos:column="50">(<param><decl><type><name pos:line="305" pos:column="51">string</name></type> <name pos:line="305" pos:column="58">methodSignature</name></decl></param>)</parameter_list> <block pos:line="305" pos:column="75">{
            <if pos:line="306" pos:column="13">if<condition pos:line="306" pos:column="15">(<expr><name pos:line="306" pos:column="16">methodSignature</name> <op:operator pos:line="306" pos:column="32">==</op:operator> <name pos:line="306" pos:column="35">null</name></expr>)</condition><then pos:line="306" pos:column="40"> <block pos:line="306" pos:column="41">{ <throw pos:line="306" pos:column="43">throw <expr><op:operator pos:line="306" pos:column="49">new</op:operator> <call><name pos:line="306" pos:column="53">ArgumentNullException</name><argument_list pos:line="306" pos:column="74">(<argument><expr><lit:literal type="string" pos:line="306" pos:column="75">"methodSignature"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>

            <decl_stmt><decl><type><name pos:line="308" pos:column="13">SwumDataRecord</name></type> <name pos:line="308" pos:column="28">result</name> <init pos:line="308" pos:column="35">= <expr><name pos:line="308" pos:column="37">null</name></expr></init></decl>;</decl_stmt>
            <lock pos:line="309" pos:column="13">lock(<expr><name pos:line="309" pos:column="18">signaturesToSwum</name></expr>) <block pos:line="309" pos:column="36">{
                <if pos:line="310" pos:column="17">if<condition pos:line="310" pos:column="19">(<expr><call><name><name pos:line="310" pos:column="20">signaturesToSwum</name><op:operator pos:line="310" pos:column="36">.</op:operator><name pos:line="310" pos:column="37">ContainsKey</name></name><argument_list pos:line="310" pos:column="48">(<argument><expr><name pos:line="310" pos:column="49">methodSignature</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="310" pos:column="66"> <block pos:line="310" pos:column="67">{
                    <expr_stmt><expr><name pos:line="311" pos:column="21">result</name> <op:operator pos:line="311" pos:column="28">=</op:operator> <name><name pos:line="311" pos:column="30">signaturesToSwum</name><index pos:line="311" pos:column="46">[<expr><name pos:line="311" pos:column="47">methodSignature</name></expr>]</index></name></expr>;</expr_stmt>
                }</block></then></if> 
            }</block></lock>
            <return pos:line="314" pos:column="13">return <expr><name pos:line="314" pos:column="20">result</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="317" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="318" pos:column="9">/// Returns a dictionary mapping method signatures to their SWUM data.</comment>
        <comment type="line" pos:line="319" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="320" pos:column="9">public</specifier> <name><name pos:line="320" pos:column="16">Dictionary</name><argument_list pos:line="320" pos:column="26">&lt;<argument><name pos:line="320" pos:column="27">string</name></argument>,<argument><name pos:line="320" pos:column="34">SwumDataRecord</name></argument>&gt;</argument_list></name></type> <name pos:line="320" pos:column="50">GetSwumData</name><parameter_list pos:line="320" pos:column="61">()</parameter_list> <block pos:line="320" pos:column="64">{
            <decl_stmt><decl><type><name pos:line="321" pos:column="13">var</name></type> <name pos:line="321" pos:column="17">currentSwum</name> <init pos:line="321" pos:column="29">= <expr><op:operator pos:line="321" pos:column="31">new</op:operator> <call><name><name pos:line="321" pos:column="35">Dictionary</name><argument_list pos:line="321" pos:column="45">&lt;<argument><name pos:line="321" pos:column="46">string</name></argument>, <argument><name pos:line="321" pos:column="54">SwumDataRecord</name></argument>&gt;</argument_list></name><argument_list pos:line="321" pos:column="69">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <lock pos:line="322" pos:column="13">lock(<expr><name pos:line="322" pos:column="18">signaturesToSwum</name></expr>) <block pos:line="322" pos:column="36">{
                <foreach pos:line="323" pos:column="17">foreach(<init><decl><type><name pos:line="323" pos:column="25">var</name></type> <name pos:line="323" pos:column="29">entry</name> <range pos:line="323" pos:column="35">in <expr><name pos:line="323" pos:column="38">signaturesToSwum</name></expr></range></decl></init>) <block pos:line="323" pos:column="56">{
                    <expr_stmt><expr><name><name pos:line="324" pos:column="21">currentSwum</name><index pos:line="324" pos:column="32">[<expr><name><name pos:line="324" pos:column="33">entry</name><op:operator pos:line="324" pos:column="38">.</op:operator><name pos:line="324" pos:column="39">Key</name></name></expr>]</index></name> <op:operator pos:line="324" pos:column="44">=</op:operator> <name><name pos:line="324" pos:column="46">entry</name><op:operator pos:line="324" pos:column="51">.</op:operator><name pos:line="324" pos:column="52">Value</name></name></expr>;</expr_stmt>
                }</block></foreach>
            }</block></lock>
            <return pos:line="327" pos:column="13">return <expr><name pos:line="327" pos:column="20">currentSwum</name></expr>;</return>
        }</block></function> 

        <cpp:region pos:line="330" pos:column="9">#<cpp:directive pos:line="330" pos:column="10">region</cpp:directive> Protected methods</cpp:region>

        <function><type><specifier pos:line="332" pos:column="9">protected</specifier> <name pos:line="332" pos:column="19">void</name></type> <name pos:line="332" pos:column="24">AddSwumForFieldDefinitions</name><parameter_list pos:line="332" pos:column="50">(<param><decl><type><name pos:line="332" pos:column="51">XElement</name></type> <name pos:line="332" pos:column="60">file</name></decl></param>, <param><decl><type><name pos:line="332" pos:column="66">string</name></type> <name pos:line="332" pos:column="73">fileName</name></decl></param>)</parameter_list>
        <block pos:line="333" pos:column="9">{
            <comment type="line" pos:line="334" pos:column="13">//compute SWUM on each field</comment>
            <foreach pos:line="335" pos:column="13">foreach (<init><decl><type><name pos:line="335" pos:column="22">var</name></type> <name pos:line="335" pos:column="26">fieldDecl</name> <range pos:line="335" pos:column="36">in <expr><op:operator pos:line="335" pos:column="39">(</op:operator><linq><from pos:line="335" pos:column="40">from <expr><name pos:line="335" pos:column="45">declStmt</name></expr> <in pos:line="335" pos:column="54">in <expr><call><name><name pos:line="335" pos:column="57">file</name><op:operator pos:line="335" pos:column="61">.</op:operator><name pos:line="335" pos:column="62">Descendants</name></name><argument_list pos:line="335" pos:column="73">(<argument><expr><name><name pos:line="335" pos:column="74">SRC</name><op:operator pos:line="335" pos:column="77">.</op:operator><name pos:line="335" pos:column="78">DeclarationStatement</name></name></expr></argument>)</argument_list></call></expr></in></from>
                                       <where pos:line="336" pos:column="40">where <expr><op:operator pos:line="336" pos:column="46">!</op:operator><call><name><name pos:line="336" pos:column="47">declStmt</name><op:operator pos:line="336" pos:column="55">.</op:operator><name pos:line="336" pos:column="56">Ancestors</name></name><argument_list pos:line="336" pos:column="65">()</argument_list></call><op:operator pos:line="336" pos:column="67">.</op:operator><call><name pos:line="336" pos:column="68">Any</name><argument_list pos:line="336" pos:column="71">(<argument><expr><lambda><name pos:line="336" pos:column="72">n</name> <op:operator pos:line="336" pos:column="74">=&gt;</op:operator> <call><name><name pos:line="336" pos:column="77">functionTypes</name><op:operator pos:line="336" pos:column="90">.</op:operator><name pos:line="336" pos:column="91">Contains</name></name><argument_list pos:line="336" pos:column="99">(<argument><expr><name><name pos:line="336" pos:column="100">n</name><op:operator pos:line="336" pos:column="101">.</op:operator><name pos:line="336" pos:column="102">Name</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></where>
                                       <select pos:line="337" pos:column="40">select <expr><call><name><name pos:line="337" pos:column="47">declStmt</name><op:operator pos:line="337" pos:column="55">.</op:operator><name pos:line="337" pos:column="56">Element</name></name><argument_list pos:line="337" pos:column="63">(<argument><expr><name><name pos:line="337" pos:column="64">SRC</name><op:operator pos:line="337" pos:column="67">.</op:operator><name pos:line="337" pos:column="68">Declaration</name></name></expr></argument>)</argument_list></call></expr></select></linq><op:operator pos:line="337" pos:column="80">)</op:operator></expr></range></decl></init>)
            <block pos:line="338" pos:column="13">{
                <expr><name pos:line="339" pos:column="17">int</name> <name pos:line="339" pos:column="21">declPos</name> <op:operator pos:line="339" pos:column="29">=</op:operator> <lit:literal type="number" pos:line="339" pos:column="31">1</lit:literal></expr>;
                <foreach pos:line="340" pos:column="17">foreach (<init><decl><type><name pos:line="340" pos:column="26">var</name></type> <name pos:line="340" pos:column="30">nameElement</name> <range pos:line="340" pos:column="42">in <expr><call><name><name pos:line="340" pos:column="45">fieldDecl</name><op:operator pos:line="340" pos:column="54">.</op:operator><name pos:line="340" pos:column="55">Elements</name></name><argument_list pos:line="340" pos:column="63">(<argument><expr><name><name pos:line="340" pos:column="64">SRC</name><op:operator pos:line="340" pos:column="67">.</op:operator><name pos:line="340" pos:column="68">Name</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)
                <block pos:line="341" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="342" pos:column="21">string</name></type> <name pos:line="342" pos:column="28">fieldName</name> <init pos:line="342" pos:column="38">= <expr><call><name><name pos:line="342" pos:column="40">nameElement</name><op:operator pos:line="342" pos:column="51">.</op:operator><name pos:line="342" pos:column="52">Elements</name></name><argument_list pos:line="342" pos:column="60">(<argument><expr><name><name pos:line="342" pos:column="61">SRC</name><op:operator pos:line="342" pos:column="64">.</op:operator><name pos:line="342" pos:column="65">Name</name></name></expr></argument>)</argument_list></call><op:operator pos:line="342" pos:column="70">.</op:operator><call><name pos:line="342" pos:column="71">Any</name><argument_list pos:line="342" pos:column="74">()</argument_list></call> <op:operator pos:line="342" pos:column="77">?</op:operator> <call><name><name pos:line="342" pos:column="79">nameElement</name><op:operator pos:line="342" pos:column="90">.</op:operator><name pos:line="342" pos:column="91">Elements</name></name><argument_list pos:line="342" pos:column="99">(<argument><expr><name><name pos:line="342" pos:column="100">SRC</name><op:operator pos:line="342" pos:column="103">.</op:operator><name pos:line="342" pos:column="104">Name</name></name></expr></argument>)</argument_list></call><op:operator pos:line="342" pos:column="109">.</op:operator><call><name pos:line="342" pos:column="110">Last</name><argument_list pos:line="342" pos:column="114">()</argument_list></call><op:operator pos:line="342" pos:column="116">.</op:operator><name pos:line="342" pos:column="117">Value</name> <op:operator pos:line="342" pos:column="123">:</op:operator> <name><name pos:line="342" pos:column="125">nameElement</name><op:operator pos:line="342" pos:column="136">.</op:operator><name pos:line="342" pos:column="137">Value</name></name></expr></init></decl>;</decl_stmt>

                    <decl_stmt><decl><type><name pos:line="344" pos:column="21">FieldDeclarationNode</name></type> <name pos:line="344" pos:column="42">fdn</name> <init pos:line="344" pos:column="46">= <expr><op:operator pos:line="344" pos:column="48">new</op:operator> <call><name pos:line="344" pos:column="52">FieldDeclarationNode</name><argument_list pos:line="344" pos:column="72">(<argument><expr><name pos:line="344" pos:column="73">fieldName</name></expr></argument>, <argument><expr><call><name><name pos:line="344" pos:column="84">ContextBuilder</name><op:operator pos:line="344" pos:column="98">.</op:operator><name pos:line="344" pos:column="99">BuildFieldContext</name></name><argument_list pos:line="344" pos:column="116">(<argument><expr><name pos:line="344" pos:column="117">fieldDecl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="345" pos:column="21">builder</name><op:operator pos:line="345" pos:column="28">.</op:operator><name pos:line="345" pos:column="29">ApplyRules</name></name><argument_list pos:line="345" pos:column="39">(<argument><expr><name pos:line="345" pos:column="40">fdn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="line" pos:line="346" pos:column="21">//var signature = string.Format("{0}:{1}:{2}", fileName, fieldDecl.Value, declPos);</comment>
                    <decl_stmt><decl><type><name pos:line="347" pos:column="21">var</name></type> <name pos:line="347" pos:column="25">signature</name> <init pos:line="347" pos:column="35">= <expr><call><name><name pos:line="347" pos:column="37">nameElement</name><op:operator pos:line="347" pos:column="48">.</op:operator><name pos:line="347" pos:column="49">GetXPath</name></name><argument_list pos:line="347" pos:column="57">(<argument><expr><lit:literal type="boolean" pos:line="347" pos:column="58">false</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="348" pos:column="21">var</name></type> <name pos:line="348" pos:column="25">swumData</name> <init pos:line="348" pos:column="34">= <expr><call><name pos:line="348" pos:column="36">ProcessSwumNode</name><argument_list pos:line="348" pos:column="51">(<argument><expr><name pos:line="348" pos:column="52">fdn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="349" pos:column="21">swumData</name><op:operator pos:line="349" pos:column="29">.</op:operator><name pos:line="349" pos:column="30">FileNames</name><op:operator pos:line="349" pos:column="39">.</op:operator><name pos:line="349" pos:column="40">Add</name></name><argument_list pos:line="349" pos:column="43">(<argument><expr><name pos:line="349" pos:column="44">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <lock pos:line="350" pos:column="21">lock (<expr><name pos:line="350" pos:column="27">signaturesToSwum</name></expr>)
                    <block pos:line="351" pos:column="21">{
                        <expr_stmt><expr><name><name pos:line="352" pos:column="25">signaturesToSwum</name><index pos:line="352" pos:column="41">[<expr><name pos:line="352" pos:column="42">signature</name></expr>]</index></name> <op:operator pos:line="352" pos:column="53">=</op:operator> <name pos:line="352" pos:column="55">swumData</name></expr>;</expr_stmt>
                    <expr_stmt/></block></lock></block></foreach>}</block>
                    <expr_stmt><expr><name pos:line="354" pos:column="21">declPos</name><op:operator pos:line="354" pos:column="28">++</op:operator></expr>;</expr_stmt></foreach>
                }</block></function>
            }</block></class>
        }</block></namespace>


        <comment type="line" pos:line="360" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="361" pos:column="9">/// Constructs SWUMs for each of the methods defined in &lt;paramref name="unitElement"/&gt; and adds them to the cache.</comment>
        <comment type="line" pos:line="362" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="363" pos:column="9">/// &lt;param name="unitElement"&gt;The root element for the file unit to be processed.&lt;/param&gt;</comment>
        <comment type="line" pos:line="364" pos:column="9">/// &lt;param name="filePath"&gt;The path for the file represented by &lt;paramref name="unitElement"/&gt;.&lt;/param&gt;</comment>
        <comment type="line" pos:line="365" pos:column="9">/// &lt;exception cref="System.ArgumentNullException"&gt;&lt;paramref name="unitElement"/&gt; is null.&lt;/exception&gt;</comment>
        <function><type><specifier pos:line="366" pos:column="9">protected</specifier> <name pos:line="366" pos:column="19">void</name></type> <name pos:line="366" pos:column="24">AddSwumForMethodDefinitions</name><parameter_list pos:line="366" pos:column="51">(<param><decl><type><name pos:line="366" pos:column="52">XElement</name></type> <name pos:line="366" pos:column="61">unitElement</name></decl></param>, <param><decl><type><name pos:line="366" pos:column="74">string</name></type> <name pos:line="366" pos:column="81">filePath</name></decl></param>)</parameter_list> <block pos:line="366" pos:column="91">{
            <if pos:line="367" pos:column="13">if<condition pos:line="367" pos:column="15">(<expr><name pos:line="367" pos:column="16">unitElement</name> <op:operator pos:line="367" pos:column="28">==</op:operator> <name pos:line="367" pos:column="31">null</name></expr>)</condition><then pos:line="367" pos:column="36"> <block pos:line="367" pos:column="37">{ <throw pos:line="367" pos:column="39">throw <expr><op:operator pos:line="367" pos:column="45">new</op:operator> <call><name pos:line="367" pos:column="49">ArgumentNullException</name><argument_list pos:line="367" pos:column="70">(<argument><expr><lit:literal type="string" pos:line="367" pos:column="71">"unitElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>
            <if pos:line="368" pos:column="13">if<condition pos:line="368" pos:column="15">(<expr><name><name pos:line="368" pos:column="16">unitElement</name><op:operator pos:line="368" pos:column="27">.</op:operator><name pos:line="368" pos:column="28">Name</name></name> <op:operator pos:line="368" pos:column="33">!=</op:operator> <name><name pos:line="368" pos:column="36">SRC</name><op:operator pos:line="368" pos:column="39">.</op:operator><name pos:line="368" pos:column="40">Unit</name></name></expr>)</condition><then pos:line="368" pos:column="45"> <block pos:line="368" pos:column="46">{
                <throw pos:line="369" pos:column="17">throw <expr><op:operator pos:line="369" pos:column="23">new</op:operator> <call><name pos:line="369" pos:column="27">ArgumentException</name><argument_list pos:line="369" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="369" pos:column="45">"Must be a SRC.Unit element"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="369" pos:column="75">"unitElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <comment type="line" pos:line="372" pos:column="13">//iterate over each method definition in the SrcML file</comment>
            <decl_stmt><decl><type><name pos:line="373" pos:column="13">var</name></type> <name pos:line="373" pos:column="17">fileAttribute</name> <init pos:line="373" pos:column="31">= <expr><call><name><name pos:line="373" pos:column="33">unitElement</name><op:operator pos:line="373" pos:column="44">.</op:operator><name pos:line="373" pos:column="45">Attribute</name></name><argument_list pos:line="373" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="373" pos:column="55">"filename"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="374" pos:column="13">if<condition pos:line="374" pos:column="15">(<expr><name pos:line="374" pos:column="16">fileAttribute</name> <op:operator pos:line="374" pos:column="30">!=</op:operator> <name pos:line="374" pos:column="33">null</name></expr>)</condition><then pos:line="374" pos:column="38"> <block pos:line="374" pos:column="39">{
                <expr_stmt><expr><name pos:line="375" pos:column="17">filePath</name> <op:operator pos:line="375" pos:column="26">=</op:operator> <name><name pos:line="375" pos:column="28">fileAttribute</name><op:operator pos:line="375" pos:column="41">.</op:operator><name pos:line="375" pos:column="42">Value</name></name></expr>;</expr_stmt>
            }</block></then></if>
            <decl_stmt><decl><type><name pos:line="377" pos:column="13">var</name></type> <name pos:line="377" pos:column="17">functions</name> <init pos:line="377" pos:column="27">= <expr><linq><from pos:line="377" pos:column="29">from <expr><name pos:line="377" pos:column="34">func</name></expr> <in pos:line="377" pos:column="39">in <expr><call><name><name pos:line="377" pos:column="42">unitElement</name><op:operator pos:line="377" pos:column="53">.</op:operator><name pos:line="377" pos:column="54">Descendants</name></name><argument_list pos:line="377" pos:column="65">()</argument_list></call></expr></in></from>
                            <where pos:line="378" pos:column="29">where <expr><call><name><name pos:line="378" pos:column="35">functionTypes</name><op:operator pos:line="378" pos:column="48">.</op:operator><name pos:line="378" pos:column="49">Contains</name></name><argument_list pos:line="378" pos:column="57">(<argument><expr><name><name pos:line="378" pos:column="58">func</name><op:operator pos:line="378" pos:column="62">.</op:operator><name pos:line="378" pos:column="63">Name</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="378" pos:column="69">&amp;&amp;</op:operator> <op:operator pos:line="378" pos:column="72">!</op:operator><call><name><name pos:line="378" pos:column="73">func</name><op:operator pos:line="378" pos:column="77">.</op:operator><name pos:line="378" pos:column="78">Ancestors</name></name><argument_list pos:line="378" pos:column="87">(<argument><expr><name><name pos:line="378" pos:column="88">SRC</name><op:operator pos:line="378" pos:column="91">.</op:operator><name pos:line="378" pos:column="92">Declaration</name></name></expr></argument>)</argument_list></call><op:operator pos:line="378" pos:column="104">.</op:operator><call><name pos:line="378" pos:column="105">Any</name><argument_list pos:line="378" pos:column="108">()</argument_list></call></expr></where>
                            <select pos:line="379" pos:column="29">select <expr><name pos:line="379" pos:column="36">func</name></expr></select></linq></expr></init></decl>;</decl_stmt>
            <foreach pos:line="380" pos:column="13">foreach(<init><decl><type><name pos:line="380" pos:column="21">XElement</name></type> <name pos:line="380" pos:column="30">func</name> <range pos:line="380" pos:column="35">in <expr><name pos:line="380" pos:column="38">functions</name></expr></range></decl></init>) <block pos:line="380" pos:column="49">{
                <comment type="line" pos:line="381" pos:column="17">//construct SWUM on the function (if necessary)</comment>
                <decl_stmt><decl><type><name pos:line="382" pos:column="17">string</name></type> <name pos:line="382" pos:column="24">sig</name> <init pos:line="382" pos:column="28">= <expr><call><name><name pos:line="382" pos:column="30">SrcMLElement</name><op:operator pos:line="382" pos:column="42">.</op:operator><name pos:line="382" pos:column="43">GetMethodSignature</name></name><argument_list pos:line="382" pos:column="61">(<argument><expr><name pos:line="382" pos:column="62">func</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <lock pos:line="383" pos:column="17">lock(<expr><name pos:line="383" pos:column="22">signaturesToSwum</name></expr>) <block pos:line="383" pos:column="40">{
                    <if pos:line="384" pos:column="21">if<condition pos:line="384" pos:column="23">(<expr><call><name><name pos:line="384" pos:column="24">signaturesToSwum</name><op:operator pos:line="384" pos:column="40">.</op:operator><name pos:line="384" pos:column="41">ContainsKey</name></name><argument_list pos:line="384" pos:column="52">(<argument><expr><name pos:line="384" pos:column="53">sig</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="384" pos:column="58"> <block pos:line="384" pos:column="59">{
                        <comment type="line" pos:line="385" pos:column="25">//update the SwumDataRecord with the filename of the duplicate method</comment>
                        <expr_stmt><expr><name><name pos:line="386" pos:column="25">signaturesToSwum</name><index pos:line="386" pos:column="41">[<expr><name pos:line="386" pos:column="42">sig</name></expr>]</index></name><op:operator pos:line="386" pos:column="46">.</op:operator><call><name><name pos:line="386" pos:column="47">FileNames</name><op:operator pos:line="386" pos:column="56">.</op:operator><name pos:line="386" pos:column="57">Add</name></name><argument_list pos:line="386" pos:column="60">(<argument><expr><name pos:line="386" pos:column="61">filePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else pos:line="387" pos:column="23">else <block pos:line="387" pos:column="28">{
                        <decl_stmt><decl><type><name pos:line="388" pos:column="25">MethodDeclarationNode</name></type> <name pos:line="388" pos:column="47">mdn</name> <init pos:line="388" pos:column="51">= <expr><call><name pos:line="388" pos:column="53">ConstructSwumFromMethodElement</name><argument_list pos:line="388" pos:column="83">(<argument><expr><name pos:line="388" pos:column="84">func</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name pos:line="389" pos:column="25">var</name></type> <name pos:line="389" pos:column="29">swumData</name> <init pos:line="389" pos:column="38">= <expr><call><name pos:line="389" pos:column="40">ProcessSwumNode</name><argument_list pos:line="389" pos:column="55">(<argument><expr><name pos:line="389" pos:column="56">mdn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name pos:line="390" pos:column="25">swumData</name><op:operator pos:line="390" pos:column="33">.</op:operator><name pos:line="390" pos:column="34">FileNames</name><op:operator pos:line="390" pos:column="43">.</op:operator><name pos:line="390" pos:column="44">Add</name></name><argument_list pos:line="390" pos:column="47">(<argument><expr><name pos:line="390" pos:column="48">filePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name pos:line="391" pos:column="25">signaturesToSwum</name><index pos:line="391" pos:column="41">[<expr><name pos:line="391" pos:column="42">sig</name></expr>]</index></name> <op:operator pos:line="391" pos:column="47">=</op:operator> <name pos:line="391" pos:column="49">swumData</name></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></lock>
            }</block></foreach>
        }</block></function>

        <comment type="line" pos:line="397" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="398" pos:column="9">/// Constructs SWUM on the given srcML method element. </comment>
        <comment type="line" pos:line="399" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="400" pos:column="9">/// &lt;param name="methodElement"&gt;The srcML element to use. This can be either a Function, Constructor or Destructor.&lt;/param&gt;</comment>
        <comment type="line" pos:line="401" pos:column="9">/// &lt;returns&gt;A MethodDeclarationNode with SWUM rules applied to it.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="402" pos:column="9">protected</specifier> <name pos:line="402" pos:column="19">MethodDeclarationNode</name></type> <name pos:line="402" pos:column="41">ConstructSwumFromMethodElement</name><parameter_list pos:line="402" pos:column="71">(<param><decl><type><name pos:line="402" pos:column="72">XElement</name></type> <name pos:line="402" pos:column="81">methodElement</name></decl></param>)</parameter_list> <block pos:line="402" pos:column="96">{
            <return pos:line="403" pos:column="13">return <expr><call><name pos:line="403" pos:column="20">ConstructSwumFromMethodElement</name><argument_list pos:line="403" pos:column="50">(<argument><expr><name pos:line="403" pos:column="51">methodElement</name></expr></argument>, <argument><expr><name pos:line="403" pos:column="66">null</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="406" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="407" pos:column="9">/// Constructs SWUM on the given srcML method element. </comment>
        <comment type="line" pos:line="408" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="409" pos:column="9">/// &lt;param name="methodElement"&gt;The srcML element to use. This can be either a Function, Constructor or Destructor.&lt;/param&gt;</comment>
        <comment type="line" pos:line="410" pos:column="9">/// &lt;param name="className"&gt;The class on which this method is declared.&lt;/param&gt;</comment>
        <comment type="line" pos:line="411" pos:column="9">/// &lt;returns&gt;A MethodDeclarationNode with SWUM rules applied to it.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="412" pos:column="9">protected</specifier> <name pos:line="412" pos:column="19">MethodDeclarationNode</name></type> <name pos:line="412" pos:column="41">ConstructSwumFromMethodElement</name><parameter_list pos:line="412" pos:column="71">(<param><decl><type><name pos:line="412" pos:column="72">XElement</name></type> <name pos:line="412" pos:column="81">methodElement</name></decl></param>, <param><decl><type><name pos:line="412" pos:column="96">string</name></type> <name pos:line="412" pos:column="103">className</name></decl></param>)</parameter_list> <block pos:line="412" pos:column="114">{
            <if pos:line="413" pos:column="13">if<condition pos:line="413" pos:column="15">(<expr><op:operator pos:line="413" pos:column="16">!</op:operator><call><name><name pos:line="413" pos:column="17">functionTypes</name><op:operator pos:line="413" pos:column="30">.</op:operator><name pos:line="413" pos:column="31">Contains</name></name><argument_list pos:line="413" pos:column="39">(<argument><expr><name><name pos:line="413" pos:column="40">methodElement</name><op:operator pos:line="413" pos:column="53">.</op:operator><name pos:line="413" pos:column="54">Name</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="413" pos:column="60"> <block pos:line="413" pos:column="61">{
                <throw pos:line="414" pos:column="17">throw <expr><op:operator pos:line="414" pos:column="23">new</op:operator> <call><name pos:line="414" pos:column="27">ArgumentException</name><argument_list pos:line="414" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="414" pos:column="45">"Element not a valid method type."</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="414" pos:column="81">"methodElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="417" pos:column="13">string</name></type> <name pos:line="417" pos:column="20">funcName</name> <init pos:line="417" pos:column="29">= <expr><call><name><name pos:line="417" pos:column="31">SrcMLElement</name><op:operator pos:line="417" pos:column="43">.</op:operator><name pos:line="417" pos:column="44">GetNameForMethod</name></name><argument_list pos:line="417" pos:column="60">(<argument><expr><name pos:line="417" pos:column="61">methodElement</name></expr></argument>)</argument_list></call><op:operator pos:line="417" pos:column="75">.</op:operator><name pos:line="417" pos:column="76">Value</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="418" pos:column="13">MethodContext</name></type> <name pos:line="418" pos:column="27">mc</name> <init pos:line="418" pos:column="30">= <expr><call><name><name pos:line="418" pos:column="32">ContextBuilder</name><op:operator pos:line="418" pos:column="46">.</op:operator><name pos:line="418" pos:column="47">BuildMethodContext</name></name><argument_list pos:line="418" pos:column="65">(<argument><expr><name pos:line="418" pos:column="66">methodElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="419" pos:column="13">//set the declaring class name, if it's been passed in</comment>
            <comment type="line" pos:line="420" pos:column="13">//this is necessary because the xml from the database for inline methods won't have the surrounding class xml</comment>
            <if pos:line="421" pos:column="13">if<condition pos:line="421" pos:column="15">(<expr><call><name><name pos:line="421" pos:column="16">string</name><op:operator pos:line="421" pos:column="22">.</op:operator><name pos:line="421" pos:column="23">IsNullOrEmpty</name></name><argument_list pos:line="421" pos:column="36">(<argument><expr><name><name pos:line="421" pos:column="37">mc</name><op:operator pos:line="421" pos:column="39">.</op:operator><name pos:line="421" pos:column="40">DeclaringClass</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="421" pos:column="56">&amp;&amp;</op:operator> <op:operator pos:line="421" pos:column="59">!</op:operator><call><name><name pos:line="421" pos:column="60">string</name><op:operator pos:line="421" pos:column="66">.</op:operator><name pos:line="421" pos:column="67">IsNullOrEmpty</name></name><argument_list pos:line="421" pos:column="80">(<argument><expr><name pos:line="421" pos:column="81">className</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="421" pos:column="92"> <block pos:line="421" pos:column="93">{
                <expr_stmt><expr><name><name pos:line="422" pos:column="17">mc</name><op:operator pos:line="422" pos:column="19">.</op:operator><name pos:line="422" pos:column="20">DeclaringClass</name></name> <op:operator pos:line="422" pos:column="35">=</op:operator> <name pos:line="422" pos:column="37">className</name></expr>;</expr_stmt>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="425" pos:column="13">MethodDeclarationNode</name></type> <name pos:line="425" pos:column="35">mdn</name> <init pos:line="425" pos:column="39">= <expr><op:operator pos:line="425" pos:column="41">new</op:operator> <call><name pos:line="425" pos:column="45">MethodDeclarationNode</name><argument_list pos:line="425" pos:column="66">(<argument><expr><name pos:line="425" pos:column="67">funcName</name></expr></argument>, <argument><expr><name pos:line="425" pos:column="77">mc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="426" pos:column="13">builder</name><op:operator pos:line="426" pos:column="20">.</op:operator><name pos:line="426" pos:column="21">ApplyRules</name></name><argument_list pos:line="426" pos:column="31">(<argument><expr><name pos:line="426" pos:column="32">mdn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="427" pos:column="13">return <expr><name pos:line="427" pos:column="20">mdn</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="430" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="431" pos:column="9">/// Constructs a method signature based on a method call.</comment>
        <comment type="line" pos:line="432" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="433" pos:column="9">/// &lt;param name="name"&gt;The name of the method being called.&lt;/param&gt;</comment>
        <comment type="line" pos:line="434" pos:column="9">/// &lt;param name="mc"&gt;A MethodContext object populated with data from the method call.&lt;/param&gt;</comment>
        <comment type="line" pos:line="435" pos:column="9">/// &lt;returns&gt;A method signature.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="436" pos:column="9">protected</specifier> <name pos:line="436" pos:column="19">string</name></type> <name pos:line="436" pos:column="26">GetMethodSignatureFromCall</name><parameter_list pos:line="436" pos:column="52">(<param><decl><type><name pos:line="436" pos:column="53">string</name></type> <name pos:line="436" pos:column="60">name</name></decl></param>, <param><decl><type><name pos:line="436" pos:column="66">MethodContext</name></type> <name pos:line="436" pos:column="80">mc</name></decl></param>)</parameter_list> <block pos:line="436" pos:column="84">{
            <if pos:line="437" pos:column="13">if<condition pos:line="437" pos:column="15">(<expr><name pos:line="437" pos:column="16">name</name> <op:operator pos:line="437" pos:column="21">==</op:operator> <name pos:line="437" pos:column="24">null</name></expr>)</condition><then pos:line="437" pos:column="29"> <block pos:line="437" pos:column="30">{ <throw pos:line="437" pos:column="32">throw <expr><op:operator pos:line="437" pos:column="38">new</op:operator> <call><name pos:line="437" pos:column="42">ArgumentNullException</name><argument_list pos:line="437" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="437" pos:column="64">"name"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>
            <if pos:line="438" pos:column="13">if<condition pos:line="438" pos:column="15">(<expr><name pos:line="438" pos:column="16">name</name> <op:operator pos:line="438" pos:column="21">==</op:operator> <name><name pos:line="438" pos:column="24">string</name><op:operator pos:line="438" pos:column="30">.</op:operator><name pos:line="438" pos:column="31">Empty</name></name></expr>)</condition><then pos:line="438" pos:column="37"> <block pos:line="438" pos:column="38">{ <throw pos:line="438" pos:column="40">throw <expr><op:operator pos:line="438" pos:column="46">new</op:operator> <call><name pos:line="438" pos:column="50">ArgumentException</name><argument_list pos:line="438" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="438" pos:column="68">"The method name must be non-empty."</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="438" pos:column="106">"name"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>
            <if pos:line="439" pos:column="13">if<condition pos:line="439" pos:column="15">(<expr><name pos:line="439" pos:column="16">mc</name> <op:operator pos:line="439" pos:column="19">==</op:operator> <name pos:line="439" pos:column="22">null</name></expr>)</condition><then pos:line="439" pos:column="27"> <block pos:line="439" pos:column="28">{ <throw pos:line="439" pos:column="30">throw <expr><op:operator pos:line="439" pos:column="36">new</op:operator> <call><name pos:line="439" pos:column="40">ArgumentNullException</name><argument_list pos:line="439" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="439" pos:column="62">"mc"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>
            
            <decl_stmt><decl><type><name pos:line="441" pos:column="13">StringBuilder</name></type> <name pos:line="441" pos:column="27">sig</name> <init pos:line="441" pos:column="31">= <expr><op:operator pos:line="441" pos:column="33">new</op:operator> <call><name pos:line="441" pos:column="37">StringBuilder</name><argument_list pos:line="441" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="442" pos:column="13">if<condition pos:line="442" pos:column="15">(<expr><name><name pos:line="442" pos:column="16">mc</name><op:operator pos:line="442" pos:column="18">.</op:operator><name pos:line="442" pos:column="19">IsStatic</name></name></expr>)</condition><then pos:line="442" pos:column="28"> <block pos:line="442" pos:column="29">{
                <expr_stmt><expr><call><name><name pos:line="443" pos:column="17">sig</name><op:operator pos:line="443" pos:column="20">.</op:operator><name pos:line="443" pos:column="21">Append</name></name><argument_list pos:line="443" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="443" pos:column="28">"static"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if pos:line="445" pos:column="13">if<condition pos:line="445" pos:column="15">(<expr><op:operator pos:line="445" pos:column="16">!</op:operator><call><name><name pos:line="445" pos:column="17">string</name><op:operator pos:line="445" pos:column="23">.</op:operator><name pos:line="445" pos:column="24">IsNullOrEmpty</name></name><argument_list pos:line="445" pos:column="37">(<argument><expr><name><name pos:line="445" pos:column="38">mc</name><op:operator pos:line="445" pos:column="40">.</op:operator><name pos:line="445" pos:column="41">IdType</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="445" pos:column="49"> <block pos:line="445" pos:column="50">{
                <expr_stmt><expr><call><name><name pos:line="446" pos:column="17">sig</name><op:operator pos:line="446" pos:column="20">.</op:operator><name pos:line="446" pos:column="21">AppendFormat</name></name><argument_list pos:line="446" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="446" pos:column="34">" {0}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="446" pos:column="42">mc</name><op:operator pos:line="446" pos:column="44">.</op:operator><name pos:line="446" pos:column="45">IdType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <comment type="line" pos:line="448" pos:column="13">//add method name</comment>
            <if pos:line="449" pos:column="13">if<condition pos:line="449" pos:column="15">(<expr><op:operator pos:line="449" pos:column="16">!</op:operator><call><name><name pos:line="449" pos:column="17">string</name><op:operator pos:line="449" pos:column="23">.</op:operator><name pos:line="449" pos:column="24">IsNullOrEmpty</name></name><argument_list pos:line="449" pos:column="37">(<argument><expr><name><name pos:line="449" pos:column="38">mc</name><op:operator pos:line="449" pos:column="40">.</op:operator><name pos:line="449" pos:column="41">DeclaringClass</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="449" pos:column="57"> <block pos:line="449" pos:column="58">{
                <expr_stmt><expr><call><name><name pos:line="450" pos:column="17">sig</name><op:operator pos:line="450" pos:column="20">.</op:operator><name pos:line="450" pos:column="21">AppendFormat</name></name><argument_list pos:line="450" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="450" pos:column="34">" {0}::{1}("</lit:literal></expr></argument>, <argument><expr><name><name pos:line="450" pos:column="48">mc</name><op:operator pos:line="450" pos:column="50">.</op:operator><name pos:line="450" pos:column="51">DeclaringClass</name></name></expr></argument>, <argument><expr><name pos:line="450" pos:column="67">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="451" pos:column="15">else <block pos:line="451" pos:column="20">{
                <expr_stmt><expr><call><name><name pos:line="452" pos:column="17">sig</name><op:operator pos:line="452" pos:column="20">.</op:operator><name pos:line="452" pos:column="21">AppendFormat</name></name><argument_list pos:line="452" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="452" pos:column="34">" {0}("</lit:literal></expr></argument>, <argument><expr><name pos:line="452" pos:column="43">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <comment type="line" pos:line="454" pos:column="13">//add method parameters</comment>
            <if pos:line="455" pos:column="13">if<condition pos:line="455" pos:column="15">(<expr><name><name pos:line="455" pos:column="16">mc</name><op:operator pos:line="455" pos:column="18">.</op:operator><name pos:line="455" pos:column="19">FormalParameters</name><op:operator pos:line="455" pos:column="35">.</op:operator><name pos:line="455" pos:column="36">Count</name></name> <op:operator pos:line="455" pos:column="42">&gt;</op:operator> <lit:literal type="number" pos:line="455" pos:column="44">0</lit:literal></expr>)</condition><then pos:line="455" pos:column="46"> <block pos:line="455" pos:column="47">{
                <for pos:line="456" pos:column="17">for(<init><decl><type><name pos:line="456" pos:column="21">int</name></type> <name pos:line="456" pos:column="25">i</name> <init pos:line="456" pos:column="27">= <expr><lit:literal type="number" pos:line="456" pos:column="29">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="456" pos:column="32">i</name> <op:operator pos:line="456" pos:column="34">&lt;</op:operator> <name><name pos:line="456" pos:column="36">mc</name><op:operator pos:line="456" pos:column="38">.</op:operator><name pos:line="456" pos:column="39">FormalParameters</name><op:operator pos:line="456" pos:column="55">.</op:operator><name pos:line="456" pos:column="56">Count</name></name> <op:operator pos:line="456" pos:column="62">-</op:operator> <lit:literal type="number" pos:line="456" pos:column="64">1</lit:literal></expr>;</condition> <incr><expr><name pos:line="456" pos:column="67">i</name><op:operator pos:line="456" pos:column="68">++</op:operator></expr></incr>) <block pos:line="456" pos:column="72">{
                    <expr_stmt><expr><call><name><name pos:line="457" pos:column="21">sig</name><op:operator pos:line="457" pos:column="24">.</op:operator><name pos:line="457" pos:column="25">AppendFormat</name></name><argument_list pos:line="457" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="457" pos:column="38">"{0}, "</lit:literal></expr></argument>, <argument><expr><name><name pos:line="457" pos:column="47">mc</name><op:operator pos:line="457" pos:column="49">.</op:operator><name pos:line="457" pos:column="50">FormalParameters</name><index pos:line="457" pos:column="66">[<expr><name pos:line="457" pos:column="67">i</name></expr>]</index></name><op:operator pos:line="457" pos:column="69">.</op:operator><name pos:line="457" pos:column="70">ParameterType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
                <expr_stmt><expr><call><name><name pos:line="459" pos:column="17">sig</name><op:operator pos:line="459" pos:column="20">.</op:operator><name pos:line="459" pos:column="21">Append</name></name><argument_list pos:line="459" pos:column="27">(<argument><expr><call><name><name pos:line="459" pos:column="28">mc</name><op:operator pos:line="459" pos:column="30">.</op:operator><name pos:line="459" pos:column="31">FormalParameters</name><op:operator pos:line="459" pos:column="47">.</op:operator><name pos:line="459" pos:column="48">Last</name></name><argument_list pos:line="459" pos:column="52">()</argument_list></call><op:operator pos:line="459" pos:column="54">.</op:operator><name pos:line="459" pos:column="55">ParameterType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name pos:line="461" pos:column="13">sig</name><op:operator pos:line="461" pos:column="16">.</op:operator><name pos:line="461" pos:column="17">Append</name></name><argument_list pos:line="461" pos:column="23">(<argument><expr><lit:literal type="string" pos:line="461" pos:column="24">")"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="462" pos:column="13">return <expr><call><name><name pos:line="462" pos:column="20">sig</name><op:operator pos:line="462" pos:column="23">.</op:operator><name pos:line="462" pos:column="24">ToString</name></name><argument_list pos:line="462" pos:column="32">()</argument_list></call><op:operator pos:line="462" pos:column="34">.</op:operator><call><name pos:line="462" pos:column="35">TrimStart</name><argument_list pos:line="462" pos:column="44">(<argument><expr><lit:literal type="char" pos:line="462" pos:column="45">' '</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

                <comment type="line" pos:line="465" pos:column="17">/// &lt;returns&gt;A SwumDataRecord containing &lt;paramref name="swumNode"/&gt; and various data extracted from it.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="466" pos:column="9">protected</specifier> <name pos:line="466" pos:column="19">SwumDataRecord</name></type> <name pos:line="466" pos:column="34">ProcessSwumNode</name><parameter_list pos:line="466" pos:column="49">(<param><decl><type><name pos:line="466" pos:column="50">FieldDeclarationNode</name></type> <name pos:line="466" pos:column="71">swumNode</name></decl></param>)</parameter_list>
        <block pos:line="467" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="468" pos:column="13">var</name></type> <name pos:line="468" pos:column="17">record</name> <init pos:line="468" pos:column="24">= <expr><op:operator pos:line="468" pos:column="26">new</op:operator> <call><name pos:line="468" pos:column="30">SwumDataRecord</name><argument_list pos:line="468" pos:column="44">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="469" pos:column="13">record</name><op:operator pos:line="469" pos:column="19">.</op:operator><name pos:line="469" pos:column="20">SwumNode</name></name> <op:operator pos:line="469" pos:column="29">=</op:operator> <name pos:line="469" pos:column="31">swumNode</name></expr>;</expr_stmt>
            <return pos:line="470" pos:column="13">return <expr><name pos:line="470" pos:column="20">record</name></expr>;</return>
        }</block></function>


        <comment type="line" pos:line="474" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="475" pos:column="9">/// Performs additional processing on a MethodDeclarationNode to put the data in the right format for the Comment Generator.</comment>
        <comment type="line" pos:line="476" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="477" pos:column="9">/// &lt;param name="swumNode"&gt;The MethodDeclarationNode from SWUM to process.&lt;/param&gt;</comment>
        <comment type="line" pos:line="478" pos:column="9">/// &lt;returns&gt;A SwumDataRecord containing &lt;paramref name="swumNode"/&gt; and various data extracted from it.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="479" pos:column="9">protected</specifier> <name pos:line="479" pos:column="19">SwumDataRecord</name></type> <name pos:line="479" pos:column="34">ProcessSwumNode</name><parameter_list pos:line="479" pos:column="49">(<param><decl><type><name pos:line="479" pos:column="50">MethodDeclarationNode</name></type> <name pos:line="479" pos:column="72">swumNode</name></decl></param>)</parameter_list> <block pos:line="479" pos:column="82">{
            <decl_stmt><decl><type><name pos:line="480" pos:column="13">var</name></type> <name pos:line="480" pos:column="17">record</name> <init pos:line="480" pos:column="24">= <expr><op:operator pos:line="480" pos:column="26">new</op:operator> <call><name pos:line="480" pos:column="30">SwumDataRecord</name><argument_list pos:line="480" pos:column="44">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="481" pos:column="13">record</name><op:operator pos:line="481" pos:column="19">.</op:operator><name pos:line="481" pos:column="20">SwumNode</name></name> <op:operator pos:line="481" pos:column="29">=</op:operator> <name pos:line="481" pos:column="31">swumNode</name></expr>;</expr_stmt>
            <comment type="line" pos:line="482" pos:column="13">//set Action</comment>
            <if pos:line="483" pos:column="13">if<condition pos:line="483" pos:column="15">(<expr><name><name pos:line="483" pos:column="16">swumNode</name><op:operator pos:line="483" pos:column="24">.</op:operator><name pos:line="483" pos:column="25">Action</name></name> <op:operator pos:line="483" pos:column="32">!=</op:operator> <name pos:line="483" pos:column="35">null</name></expr>)</condition><then pos:line="483" pos:column="40"> <block pos:line="483" pos:column="41">{
                <expr_stmt><expr><name><name pos:line="484" pos:column="17">record</name><op:operator pos:line="484" pos:column="23">.</op:operator><name pos:line="484" pos:column="24">Action</name></name> <op:operator pos:line="484" pos:column="31">=</op:operator> <call><name><name pos:line="484" pos:column="33">swumNode</name><op:operator pos:line="484" pos:column="41">.</op:operator><name pos:line="484" pos:column="42">Action</name><op:operator pos:line="484" pos:column="48">.</op:operator><name pos:line="484" pos:column="49">ToPlainString</name></name><argument_list pos:line="484" pos:column="62">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="485" pos:column="17">record</name><op:operator pos:line="485" pos:column="23">.</op:operator><name pos:line="485" pos:column="24">ParsedAction</name></name> <op:operator pos:line="485" pos:column="37">=</op:operator> <call><name><name pos:line="485" pos:column="39">swumNode</name><op:operator pos:line="485" pos:column="47">.</op:operator><name pos:line="485" pos:column="48">Action</name><op:operator pos:line="485" pos:column="54">.</op:operator><name pos:line="485" pos:column="55">GetParse</name></name><argument_list pos:line="485" pos:column="63">()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <comment type="line" pos:line="487" pos:column="13">//TODO: action is not lowercased. Should it be?</comment>

            <comment type="line" pos:line="489" pos:column="13">//set Theme</comment>
            <if pos:line="490" pos:column="13">if<condition pos:line="490" pos:column="15">(<expr><name><name pos:line="490" pos:column="16">swumNode</name><op:operator pos:line="490" pos:column="24">.</op:operator><name pos:line="490" pos:column="25">Theme</name></name> <op:operator pos:line="490" pos:column="31">!=</op:operator> <name pos:line="490" pos:column="34">null</name></expr>)</condition><then pos:line="490" pos:column="39"> <block pos:line="490" pos:column="40">{
                <if pos:line="491" pos:column="17">if<condition pos:line="491" pos:column="19">(<expr><name><name pos:line="491" pos:column="20">swumNode</name><op:operator pos:line="491" pos:column="28">.</op:operator><name pos:line="491" pos:column="29">Theme</name></name> <op:operator pos:line="491" pos:column="35">is</op:operator> <name pos:line="491" pos:column="38">EquivalenceNode</name> <op:operator pos:line="491" pos:column="54">&amp;&amp;</op:operator> <op:operator pos:line="491" pos:column="57">(</op:operator><op:operator pos:line="491" pos:column="58">(</op:operator><name pos:line="491" pos:column="59">EquivalenceNode</name><op:operator pos:line="491" pos:column="74">)</op:operator><name><name pos:line="491" pos:column="75">swumNode</name><op:operator pos:line="491" pos:column="83">.</op:operator><name pos:line="491" pos:column="84">Theme</name></name><op:operator pos:line="491" pos:column="89">)</op:operator><op:operator pos:line="491" pos:column="90">.</op:operator><call><name><name pos:line="491" pos:column="91">EquivalentNodes</name><op:operator pos:line="491" pos:column="106">.</op:operator><name pos:line="491" pos:column="107">Any</name></name><argument_list pos:line="491" pos:column="110">()</argument_list></call></expr>)</condition><then pos:line="491" pos:column="113"> <block pos:line="491" pos:column="114">{
                    <decl_stmt><decl><type><name pos:line="492" pos:column="21">var</name></type> <name pos:line="492" pos:column="25">firstNode</name> <init pos:line="492" pos:column="35">= <expr><op:operator pos:line="492" pos:column="37">(</op:operator><op:operator pos:line="492" pos:column="38">(</op:operator><name pos:line="492" pos:column="39">EquivalenceNode</name><op:operator pos:line="492" pos:column="54">)</op:operator><name><name pos:line="492" pos:column="55">swumNode</name><op:operator pos:line="492" pos:column="63">.</op:operator><name pos:line="492" pos:column="64">Theme</name></name><op:operator pos:line="492" pos:column="69">)</op:operator><op:operator pos:line="492" pos:column="70">.</op:operator><name><name pos:line="492" pos:column="71">EquivalentNodes</name><index pos:line="492" pos:column="86">[<expr><lit:literal type="number" pos:line="492" pos:column="87">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name><name pos:line="493" pos:column="21">record</name><op:operator pos:line="493" pos:column="27">.</op:operator><name pos:line="493" pos:column="28">Theme</name></name> <op:operator pos:line="493" pos:column="34">=</op:operator> <call><name><name pos:line="493" pos:column="36">firstNode</name><op:operator pos:line="493" pos:column="45">.</op:operator><name pos:line="493" pos:column="46">ToPlainString</name></name><argument_list pos:line="493" pos:column="59">()</argument_list></call><op:operator pos:line="493" pos:column="61">.</op:operator><call><name pos:line="493" pos:column="62">ToLower</name><argument_list pos:line="493" pos:column="69">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="494" pos:column="21">record</name><op:operator pos:line="494" pos:column="27">.</op:operator><name pos:line="494" pos:column="28">ParsedTheme</name></name> <op:operator pos:line="494" pos:column="40">=</op:operator> <call><name><name pos:line="494" pos:column="42">firstNode</name><op:operator pos:line="494" pos:column="51">.</op:operator><name pos:line="494" pos:column="52">GetParse</name></name><argument_list pos:line="494" pos:column="60">()</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="495" pos:column="19">else <block pos:line="495" pos:column="24">{
                    <expr_stmt><expr><name><name pos:line="496" pos:column="21">record</name><op:operator pos:line="496" pos:column="27">.</op:operator><name pos:line="496" pos:column="28">Theme</name></name> <op:operator pos:line="496" pos:column="34">=</op:operator> <call><name><name pos:line="496" pos:column="36">swumNode</name><op:operator pos:line="496" pos:column="44">.</op:operator><name pos:line="496" pos:column="45">Theme</name><op:operator pos:line="496" pos:column="50">.</op:operator><name pos:line="496" pos:column="51">ToPlainString</name></name><argument_list pos:line="496" pos:column="64">()</argument_list></call><op:operator pos:line="496" pos:column="66">.</op:operator><call><name pos:line="496" pos:column="67">ToLower</name><argument_list pos:line="496" pos:column="74">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="497" pos:column="21">record</name><op:operator pos:line="497" pos:column="27">.</op:operator><name pos:line="497" pos:column="28">ParsedTheme</name></name> <op:operator pos:line="497" pos:column="40">=</op:operator> <call><name><name pos:line="497" pos:column="42">swumNode</name><op:operator pos:line="497" pos:column="50">.</op:operator><name pos:line="497" pos:column="51">Theme</name><op:operator pos:line="497" pos:column="56">.</op:operator><name pos:line="497" pos:column="57">GetParse</name></name><argument_list pos:line="497" pos:column="65">()</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if>

            <comment type="line" pos:line="501" pos:column="13">//set Indirect Object</comment>
            <if pos:line="502" pos:column="13">if<condition pos:line="502" pos:column="15">(<expr><call><name><name pos:line="502" pos:column="16">string</name><op:operator pos:line="502" pos:column="22">.</op:operator><name pos:line="502" pos:column="23">Compare</name></name><argument_list pos:line="502" pos:column="30">(<argument><expr><name><name pos:line="502" pos:column="31">record</name><op:operator pos:line="502" pos:column="37">.</op:operator><name pos:line="502" pos:column="38">Action</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="502" pos:column="46">"set"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="502" pos:column="53">StringComparison</name><op:operator pos:line="502" pos:column="69">.</op:operator><name pos:line="502" pos:column="70">InvariantCultureIgnoreCase</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="502" pos:column="98">==</op:operator> <lit:literal type="number" pos:line="502" pos:column="101">0</lit:literal></expr>)</condition><then pos:line="502" pos:column="103"> <block pos:line="502" pos:column="104">{
                <comment type="line" pos:line="503" pos:column="17">//special handling for setter methods?</comment>
                <comment type="line" pos:line="504" pos:column="17">//TODO: should this set the IO to the declaring class? will that work correctly for sando?</comment>
                
            }</block></then> <else pos:line="506" pos:column="15">else <block pos:line="506" pos:column="20">{
                <if pos:line="507" pos:column="17">if<condition pos:line="507" pos:column="19">(<expr><name><name pos:line="507" pos:column="20">swumNode</name><op:operator pos:line="507" pos:column="28">.</op:operator><name pos:line="507" pos:column="29">SecondaryArguments</name></name> <op:operator pos:line="507" pos:column="48">!=</op:operator> <name pos:line="507" pos:column="51">null</name> <op:operator pos:line="507" pos:column="56">&amp;&amp;</op:operator> <call><name><name pos:line="507" pos:column="59">swumNode</name><op:operator pos:line="507" pos:column="67">.</op:operator><name pos:line="507" pos:column="68">SecondaryArguments</name><op:operator pos:line="507" pos:column="86">.</op:operator><name pos:line="507" pos:column="87">Any</name></name><argument_list pos:line="507" pos:column="90">()</argument_list></call></expr>)</condition><then pos:line="507" pos:column="93"> <block pos:line="507" pos:column="94">{
                    <decl_stmt><decl><type><name pos:line="508" pos:column="21">var</name></type> <name pos:line="508" pos:column="25">IONode</name> <init pos:line="508" pos:column="32">= <expr><call><name><name pos:line="508" pos:column="34">swumNode</name><op:operator pos:line="508" pos:column="42">.</op:operator><name pos:line="508" pos:column="43">SecondaryArguments</name><op:operator pos:line="508" pos:column="61">.</op:operator><name pos:line="508" pos:column="62">First</name></name><argument_list pos:line="508" pos:column="67">()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if pos:line="509" pos:column="21">if<condition pos:line="509" pos:column="23">(<expr><name><name pos:line="509" pos:column="24">IONode</name><op:operator pos:line="509" pos:column="30">.</op:operator><name pos:line="509" pos:column="31">Argument</name></name> <op:operator pos:line="509" pos:column="40">is</op:operator> <name pos:line="509" pos:column="43">EquivalenceNode</name> <op:operator pos:line="509" pos:column="59">&amp;&amp;</op:operator> <op:operator pos:line="509" pos:column="62">(</op:operator><op:operator pos:line="509" pos:column="63">(</op:operator><name pos:line="509" pos:column="64">EquivalenceNode</name><op:operator pos:line="509" pos:column="79">)</op:operator><name><name pos:line="509" pos:column="80">IONode</name><op:operator pos:line="509" pos:column="86">.</op:operator><name pos:line="509" pos:column="87">Argument</name></name><op:operator pos:line="509" pos:column="95">)</op:operator><op:operator pos:line="509" pos:column="96">.</op:operator><call><name><name pos:line="509" pos:column="97">EquivalentNodes</name><op:operator pos:line="509" pos:column="112">.</op:operator><name pos:line="509" pos:column="113">Any</name></name><argument_list pos:line="509" pos:column="116">()</argument_list></call></expr>)</condition><then pos:line="509" pos:column="119"> <block pos:line="509" pos:column="120">{
                        <decl_stmt><decl><type><name pos:line="510" pos:column="25">var</name></type> <name pos:line="510" pos:column="29">firstNode</name> <init pos:line="510" pos:column="39">= <expr><op:operator pos:line="510" pos:column="41">(</op:operator><op:operator pos:line="510" pos:column="42">(</op:operator><name pos:line="510" pos:column="43">EquivalenceNode</name><op:operator pos:line="510" pos:column="58">)</op:operator><name><name pos:line="510" pos:column="59">IONode</name><op:operator pos:line="510" pos:column="65">.</op:operator><name pos:line="510" pos:column="66">Argument</name></name><op:operator pos:line="510" pos:column="74">)</op:operator><op:operator pos:line="510" pos:column="75">.</op:operator><name><name pos:line="510" pos:column="76">EquivalentNodes</name><index pos:line="510" pos:column="91">[<expr><lit:literal type="number" pos:line="510" pos:column="92">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name><name pos:line="511" pos:column="25">record</name><op:operator pos:line="511" pos:column="31">.</op:operator><name pos:line="511" pos:column="32">IndirectObject</name></name> <op:operator pos:line="511" pos:column="47">=</op:operator> <call><name><name pos:line="511" pos:column="49">firstNode</name><op:operator pos:line="511" pos:column="58">.</op:operator><name pos:line="511" pos:column="59">ToPlainString</name></name><argument_list pos:line="511" pos:column="72">()</argument_list></call><op:operator pos:line="511" pos:column="74">.</op:operator><call><name pos:line="511" pos:column="75">ToLower</name><argument_list pos:line="511" pos:column="82">()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name pos:line="512" pos:column="25">record</name><op:operator pos:line="512" pos:column="31">.</op:operator><name pos:line="512" pos:column="32">ParsedIndirectObject</name></name> <op:operator pos:line="512" pos:column="53">=</op:operator> <call><name><name pos:line="512" pos:column="55">firstNode</name><op:operator pos:line="512" pos:column="64">.</op:operator><name pos:line="512" pos:column="65">GetParse</name></name><argument_list pos:line="512" pos:column="73">()</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else pos:line="513" pos:column="23">else <block pos:line="513" pos:column="28">{
                        <expr_stmt><expr><name><name pos:line="514" pos:column="25">record</name><op:operator pos:line="514" pos:column="31">.</op:operator><name pos:line="514" pos:column="32">IndirectObject</name></name> <op:operator pos:line="514" pos:column="47">=</op:operator> <call><name><name pos:line="514" pos:column="49">IONode</name><op:operator pos:line="514" pos:column="55">.</op:operator><name pos:line="514" pos:column="56">Argument</name><op:operator pos:line="514" pos:column="64">.</op:operator><name pos:line="514" pos:column="65">ToPlainString</name></name><argument_list pos:line="514" pos:column="78">()</argument_list></call><op:operator pos:line="514" pos:column="80">.</op:operator><call><name pos:line="514" pos:column="81">ToLower</name><argument_list pos:line="514" pos:column="88">()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name pos:line="515" pos:column="25">record</name><op:operator pos:line="515" pos:column="31">.</op:operator><name pos:line="515" pos:column="32">ParsedIndirectObject</name></name> <op:operator pos:line="515" pos:column="53">=</op:operator> <call><name><name pos:line="515" pos:column="55">IONode</name><op:operator pos:line="515" pos:column="61">.</op:operator><name pos:line="515" pos:column="62">Argument</name><op:operator pos:line="515" pos:column="70">.</op:operator><name pos:line="515" pos:column="71">GetParse</name></name><argument_list pos:line="515" pos:column="79">()</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then></if> 
            }</block></else></if>

            <return pos:line="520" pos:column="13">return <expr><name pos:line="520" pos:column="20">record</name></expr>;</return>
        }</block></function>

        <cpp:endregion pos:line="523" pos:column="9">#<cpp:directive pos:line="523" pos:column="10">endregion</cpp:directive> Protected methods</cpp:endregion>

        <function><type><specifier pos:line="525" pos:column="9">public</specifier> <name pos:line="525" pos:column="16">bool</name></type> <name pos:line="525" pos:column="21">ContainsFile</name><parameter_list pos:line="525" pos:column="33">(<param><decl><type><name pos:line="525" pos:column="34">string</name></type> <name pos:line="525" pos:column="41">sourcePath</name></decl></param>)</parameter_list>
        <block pos:line="526" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="527" pos:column="13">var</name></type> <name pos:line="527" pos:column="17">fullPath</name> <init pos:line="527" pos:column="26">= <expr><call><name><name pos:line="527" pos:column="28">Path</name><op:operator pos:line="527" pos:column="32">.</op:operator><name pos:line="527" pos:column="33">GetFullPath</name></name><argument_list pos:line="527" pos:column="44">(<argument><expr><name pos:line="527" pos:column="45">sourcePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <lock pos:line="528" pos:column="13">lock (<expr><name pos:line="528" pos:column="19">signaturesToSwum</name></expr>)
            <block pos:line="529" pos:column="13">{
                <foreach pos:line="530" pos:column="17">foreach (<init><decl><type><name pos:line="530" pos:column="26">var</name></type> <name pos:line="530" pos:column="30">sig</name> <range pos:line="530" pos:column="34">in <expr><name><name pos:line="530" pos:column="37">signaturesToSwum</name><op:operator pos:line="530" pos:column="53">.</op:operator><name pos:line="530" pos:column="54">Keys</name></name></expr></range></decl></init>)
                <block pos:line="531" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="532" pos:column="21">var</name></type> <name pos:line="532" pos:column="25">sdr</name> <init pos:line="532" pos:column="29">= <expr><name><name pos:line="532" pos:column="31">signaturesToSwum</name><index pos:line="532" pos:column="47">[<expr><name pos:line="532" pos:column="48">sig</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <if pos:line="533" pos:column="21">if <condition pos:line="533" pos:column="24">(<expr><call><name><name pos:line="533" pos:column="25">sdr</name><op:operator pos:line="533" pos:column="28">.</op:operator><name pos:line="533" pos:column="29">FileNames</name><op:operator pos:line="533" pos:column="38">.</op:operator><name pos:line="533" pos:column="39">Contains</name></name><argument_list pos:line="533" pos:column="47">(<argument><expr><name pos:line="533" pos:column="48">fullPath</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="533" pos:column="58">
                        <return pos:line="534" pos:column="25">return <expr><lit:literal type="boolean" pos:line="534" pos:column="32">true</lit:literal></expr>;</return></then></if>
                }</block></foreach>
            }</block></lock>
            <return pos:line="537" pos:column="13">return <expr><lit:literal type="boolean" pos:line="537" pos:column="20">false</lit:literal></expr>;</return>
        }</block></function>
    }
}
</unit>
