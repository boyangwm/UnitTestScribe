<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Parser\Parser\SrcMLCppParser.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">IO</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Collections</name><op:operator pos:line="3" pos:column="25">.</op:operator><name pos:line="3" pos:column="26">Generic</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Linq</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Xml</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">Linq</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">ABB</name><op:operator pos:line="6" pos:column="10">.</op:operator><name pos:line="6" pos:column="11">SrcML</name><op:operator pos:line="6" pos:column="16">.</op:operator><name pos:line="6" pos:column="17">VisualStudio</name><op:operator pos:line="6" pos:column="29">.</op:operator><name pos:line="6" pos:column="30">SrcMLService</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Sando</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">ExtensionContracts</name><op:operator pos:line="7" pos:column="31">.</op:operator><name pos:line="7" pos:column="32">ParserContracts</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Sando</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">ExtensionContracts</name><op:operator pos:line="8" pos:column="31">.</op:operator><name pos:line="8" pos:column="32">ProgramElementContracts</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">ABB</name><op:operator pos:line="9" pos:column="10">.</op:operator><name pos:line="9" pos:column="11">SrcML</name></name>;</using>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">Sando</name><op:operator pos:line="10" pos:column="12">.</op:operator><name pos:line="10" pos:column="13">Core</name><op:operator pos:line="10" pos:column="17">.</op:operator><name pos:line="10" pos:column="18">Logging</name><op:operator pos:line="10" pos:column="25">.</op:operator><name pos:line="10" pos:column="26">Events</name></name>;</using>
<using pos:line="11" pos:column="1">using <name><name pos:line="11" pos:column="7">Sando</name><op:operator pos:line="11" pos:column="12">.</op:operator><name pos:line="11" pos:column="13">Core</name><op:operator pos:line="11" pos:column="17">.</op:operator><name pos:line="11" pos:column="18">Logging</name><op:operator pos:line="11" pos:column="25">.</op:operator><name pos:line="11" pos:column="26">Persistence</name></name>;</using>

<namespace pos:line="13" pos:column="1">namespace <name><name pos:line="13" pos:column="11">Sando</name><op:operator pos:line="13" pos:column="16">.</op:operator><name pos:line="13" pos:column="17">Parser</name></name>
<block pos:line="14" pos:column="1">{
    <class><specifier pos:line="15" pos:column="5">public</specifier> class <name pos:line="15" pos:column="18">SrcMLCppParser</name> <super pos:line="15" pos:column="33">: <name pos:line="15" pos:column="35">IParser</name></super>
    <block pos:line="16" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="17" pos:column="9">public</specifier> <name pos:line="17" pos:column="16">ISrcMLGlobalService</name></type> <name pos:line="17" pos:column="36">SrcMLService</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="18" pos:column="9">public</specifier> <name pos:line="18" pos:column="16">ISrcMLArchive</name></type> <name pos:line="18" pos:column="30">Archive</name> <block pos:line="18" pos:column="38">{ <function_decl><name pos:line="18" pos:column="40">get</name>;</function_decl> <function_decl><name pos:line="18" pos:column="45">set</name>;</function_decl> }</block></decl></decl_stmt>           <comment type="line" pos:line="18" pos:column="62">// should be deleted</comment>
        <decl_stmt><decl><type><specifier pos:line="19" pos:column="9">public</specifier> <name pos:line="19" pos:column="16">ISrcMLGenerator</name></type> <name pos:line="19" pos:column="32">Generator</name> <block pos:line="19" pos:column="42">{ <function_decl><name pos:line="19" pos:column="44">get</name>;</function_decl> <function_decl><name pos:line="19" pos:column="49">set</name>;</function_decl> }</block></decl></decl_stmt>

        <constructor><specifier pos:line="21" pos:column="9">public</specifier> <name pos:line="21" pos:column="16">SrcMLCppParser</name><parameter_list pos:line="21" pos:column="30">()</parameter_list> <block pos:line="21" pos:column="33">{
        }</block></constructor>

        <constructor><specifier pos:line="24" pos:column="9">public</specifier> <name pos:line="24" pos:column="16">SrcMLCppParser</name><parameter_list pos:line="24" pos:column="30">(<param><decl><type><name pos:line="24" pos:column="31">ISrcMLGlobalService</name></type> <name pos:line="24" pos:column="51">srcmlService</name></decl></param>)</parameter_list> <block pos:line="24" pos:column="65">{
            <expr_stmt><expr><name><name pos:line="25" pos:column="13">this</name><op:operator pos:line="25" pos:column="17">.</op:operator><name pos:line="25" pos:column="18">SrcMLService</name></name> <op:operator pos:line="25" pos:column="31">=</op:operator> <name pos:line="25" pos:column="33">srcmlService</name></expr>;</expr_stmt>
        }</block></constructor>

        <constructor><specifier pos:line="28" pos:column="9">public</specifier> <name pos:line="28" pos:column="16">SrcMLCppParser</name><parameter_list pos:line="28" pos:column="30">(<param><decl><type><name pos:line="28" pos:column="31">ISrcMLArchive</name></type> <name pos:line="28" pos:column="45">archive</name></decl></param>)</parameter_list> <block pos:line="28" pos:column="54">{
            <expr_stmt><expr><name><name pos:line="29" pos:column="13">this</name><op:operator pos:line="29" pos:column="17">.</op:operator><name pos:line="29" pos:column="18">Archive</name></name> <op:operator pos:line="29" pos:column="26">=</op:operator> <name pos:line="29" pos:column="28">archive</name></expr>;</expr_stmt>
        }</block></constructor>

        <constructor><specifier pos:line="32" pos:column="9">public</specifier> <name pos:line="32" pos:column="16">SrcMLCppParser</name><parameter_list pos:line="32" pos:column="30">(<param><decl><type><name pos:line="32" pos:column="31">ISrcMLGenerator</name></type> <name pos:line="32" pos:column="47">generator</name></decl></param>)</parameter_list> <block pos:line="32" pos:column="58">{
            <expr_stmt><expr><name><name pos:line="33" pos:column="13">this</name><op:operator pos:line="33" pos:column="17">.</op:operator><name pos:line="33" pos:column="18">Generator</name></name> <op:operator pos:line="33" pos:column="28">=</op:operator> <name pos:line="33" pos:column="30">generator</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier pos:line="36" pos:column="9">public</specifier> <name><name pos:line="36" pos:column="16">List</name><argument_list pos:line="36" pos:column="20">&lt;<argument><name pos:line="36" pos:column="21">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="36" pos:column="37">Parse</name><parameter_list pos:line="36" pos:column="42">(<param><decl><type><name pos:line="36" pos:column="43">string</name></type> <name pos:line="36" pos:column="50">fileName</name></decl></param>)</parameter_list> <block pos:line="36" pos:column="60">{
            <decl_stmt><decl><type><name pos:line="37" pos:column="13">var</name></type> <name pos:line="37" pos:column="17">programElements</name> <init pos:line="37" pos:column="33">= <expr><op:operator pos:line="37" pos:column="35">new</op:operator> <call><name><name pos:line="37" pos:column="39">List</name><argument_list pos:line="37" pos:column="43">&lt;<argument><name pos:line="37" pos:column="44">ProgramElement</name></argument>&gt;</argument_list></name><argument_list pos:line="37" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="38" pos:column="13">XElement</name></type> <name pos:line="38" pos:column="22">sourceElements</name></decl>;</decl_stmt>
            <if pos:line="39" pos:column="13">if<condition pos:line="39" pos:column="15">(<expr><name pos:line="39" pos:column="16">SrcMLService</name> <op:operator pos:line="39" pos:column="29">!=</op:operator> <name pos:line="39" pos:column="32">null</name></expr>)</condition><then pos:line="39" pos:column="37"> <block pos:line="39" pos:column="38">{
                <expr_stmt><expr><name pos:line="40" pos:column="17">sourceElements</name> <op:operator pos:line="40" pos:column="32">=</op:operator> <call><name><name pos:line="40" pos:column="34">SrcMLService</name><op:operator pos:line="40" pos:column="46">.</op:operator><name pos:line="40" pos:column="47">GetXElementForSourceFile</name></name><argument_list pos:line="40" pos:column="71">(<argument><expr><name pos:line="40" pos:column="72">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="41" pos:column="17">if<condition pos:line="41" pos:column="19">(<expr><name pos:line="41" pos:column="20">sourceElements</name> <op:operator pos:line="41" pos:column="35">!=</op:operator> <name pos:line="41" pos:column="38">null</name></expr>)</condition><then pos:line="41" pos:column="43"> <block pos:line="41" pos:column="44">{
                    <expr_stmt><expr><name pos:line="42" pos:column="21">programElements</name> <op:operator pos:line="42" pos:column="37">=</op:operator> <call><name pos:line="42" pos:column="39">Parse</name><argument_list pos:line="42" pos:column="44">(<argument><expr><name pos:line="42" pos:column="45">fileName</name></expr></argument>, <argument><expr><name pos:line="42" pos:column="55">sourceElements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="43" pos:column="19">else <block pos:line="43" pos:column="24">{
                    <expr_stmt><expr><call><name><name pos:line="44" pos:column="21">FileLogger</name><op:operator pos:line="44" pos:column="31">.</op:operator><name pos:line="44" pos:column="32">DefaultLogger</name><op:operator pos:line="44" pos:column="45">.</op:operator><name pos:line="44" pos:column="46">ErrorFormat</name></name><argument_list pos:line="44" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="44" pos:column="58">"SrcMLCppParser: File not found in SrcMLService: {0}"</lit:literal></expr></argument>, <argument><expr><name pos:line="44" pos:column="113">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then> <else pos:line="46" pos:column="15">else <if pos:line="46" pos:column="20">if<condition pos:line="46" pos:column="22">(<expr><name pos:line="46" pos:column="23">Archive</name> <op:operator pos:line="46" pos:column="31">!=</op:operator> <name pos:line="46" pos:column="34">null</name></expr>)</condition><then pos:line="46" pos:column="39"> <block pos:line="46" pos:column="40">{
                <expr_stmt><expr><name pos:line="47" pos:column="17">sourceElements</name> <op:operator pos:line="47" pos:column="32">=</op:operator> <call><name><name pos:line="47" pos:column="34">Archive</name><op:operator pos:line="47" pos:column="41">.</op:operator><name pos:line="47" pos:column="42">GetXElementForSourceFile</name></name><argument_list pos:line="47" pos:column="66">(<argument><expr><name pos:line="47" pos:column="67">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="48" pos:column="17">if<condition pos:line="48" pos:column="19">(<expr><name pos:line="48" pos:column="20">sourceElements</name> <op:operator pos:line="48" pos:column="35">!=</op:operator> <name pos:line="48" pos:column="38">null</name></expr>)</condition><then pos:line="48" pos:column="43"> <block pos:line="48" pos:column="44">{
                    <expr_stmt><expr><name pos:line="49" pos:column="21">programElements</name> <op:operator pos:line="49" pos:column="37">=</op:operator> <call><name pos:line="49" pos:column="39">Parse</name><argument_list pos:line="49" pos:column="44">(<argument><expr><name pos:line="49" pos:column="45">fileName</name></expr></argument>, <argument><expr><name pos:line="49" pos:column="55">sourceElements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="50" pos:column="19">else <block pos:line="50" pos:column="24">{
                    <expr_stmt><expr><call><name><name pos:line="51" pos:column="21">LogEvents</name><op:operator pos:line="51" pos:column="30">.</op:operator><name pos:line="51" pos:column="31">ParserFileNotFoundInArchiveError</name></name><argument_list pos:line="51" pos:column="63">(<argument><expr><name pos:line="51" pos:column="64">this</name></expr></argument>, <argument><expr><name pos:line="51" pos:column="70">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then> <else pos:line="53" pos:column="15">else <if pos:line="53" pos:column="20">if<condition pos:line="53" pos:column="22">(<expr><name pos:line="53" pos:column="23">Generator</name> <op:operator pos:line="53" pos:column="33">!=</op:operator> <name pos:line="53" pos:column="36">null</name></expr>)</condition><then pos:line="53" pos:column="41"> <block pos:line="53" pos:column="42">{
                <decl_stmt><decl><type><name pos:line="54" pos:column="17">string</name></type> <name pos:line="54" pos:column="24">outFile</name> <init pos:line="54" pos:column="32">= <expr><call><name><name pos:line="54" pos:column="34">Path</name><op:operator pos:line="54" pos:column="38">.</op:operator><name pos:line="54" pos:column="39">GetTempFileName</name></name><argument_list pos:line="54" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <try pos:line="55" pos:column="17">try <block pos:line="55" pos:column="21">{
                    <comment type="line" pos:line="56" pos:column="21">//This is a C++ parser, so we'll convert the input file as C++ no matter what the file extension is</comment>
                    <expr_stmt><expr><call><name><name pos:line="57" pos:column="21">Generator</name><op:operator pos:line="57" pos:column="30">.</op:operator><name pos:line="57" pos:column="31">GenerateSrcMLFromFile</name></name><argument_list pos:line="57" pos:column="52">(<argument><expr><name pos:line="57" pos:column="53">fileName</name></expr></argument>, <argument><expr><name pos:line="57" pos:column="63">outFile</name></expr></argument>, <argument><expr><name><name pos:line="57" pos:column="72">Language</name><op:operator pos:line="57" pos:column="80">.</op:operator><name pos:line="57" pos:column="81">CPlusPlus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="58" pos:column="21">sourceElements</name> <op:operator pos:line="58" pos:column="36">=</op:operator> <call><name><name pos:line="58" pos:column="38">SrcMLElement</name><op:operator pos:line="58" pos:column="50">.</op:operator><name pos:line="58" pos:column="51">Load</name></name><argument_list pos:line="58" pos:column="55">(<argument><expr><name pos:line="58" pos:column="56">outFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                        
                    <if pos:line="59" pos:column="21">if<condition pos:line="59" pos:column="23">(<expr><name pos:line="59" pos:column="24">sourceElements</name> <op:operator pos:line="59" pos:column="39">!=</op:operator> <name pos:line="59" pos:column="42">null</name></expr>)</condition><then pos:line="59" pos:column="47"> <block pos:line="59" pos:column="48">{
                        <expr_stmt><expr><name pos:line="60" pos:column="25">programElements</name> <op:operator pos:line="60" pos:column="41">=</op:operator> <call><name pos:line="60" pos:column="43">Parse</name><argument_list pos:line="60" pos:column="48">(<argument><expr><name pos:line="60" pos:column="49">fileName</name></expr></argument>, <argument><expr><name pos:line="60" pos:column="59">sourceElements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block> <finally pos:line="62" pos:column="19">finally <block pos:line="62" pos:column="27">{
                    <expr_stmt><expr><call><name><name pos:line="63" pos:column="21">File</name><op:operator pos:line="63" pos:column="25">.</op:operator><name pos:line="63" pos:column="26">Delete</name></name><argument_list pos:line="63" pos:column="32">(<argument><expr><name pos:line="63" pos:column="33">outFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></finally></try>
            }</block></then> <else pos:line="65" pos:column="15">else <block pos:line="65" pos:column="20">{
                <throw pos:line="66" pos:column="17">throw <expr><op:operator pos:line="66" pos:column="23">new</op:operator> <call><name pos:line="66" pos:column="27">InvalidOperationException</name><argument_list pos:line="66" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="66" pos:column="53">"SrcMLCppParser - Archive and Generator are both null"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></else></if></else></if></else></if>

            <return pos:line="69" pos:column="13">return <expr><name pos:line="69" pos:column="20">programElements</name></expr>;</return>
        }</block></function>

        

        <comment type="line" pos:line="74" pos:column="9">// Code changed by JZ: solution monitor integration</comment>
        <comment type="line" pos:line="75" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="76" pos:column="9">/// New Parse method that takes both source file path and the XElement representation of the source file as input arguments.</comment>
        <comment type="line" pos:line="77" pos:column="9">/// TODO: what if the XElement is null?</comment>
        <comment type="line" pos:line="78" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="79" pos:column="9">/// &lt;param name="fileName"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="80" pos:column="9">/// &lt;param name="sourceElements"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="81" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="82" pos:column="9">public</specifier> <name><name pos:line="82" pos:column="16">List</name><argument_list pos:line="82" pos:column="20">&lt;<argument><name pos:line="82" pos:column="21">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="82" pos:column="37">Parse</name><parameter_list pos:line="82" pos:column="42">(<param><decl><type><name pos:line="82" pos:column="43">string</name></type> <name pos:line="82" pos:column="50">fileName</name></decl></param>, <param><decl><type><name pos:line="82" pos:column="60">XElement</name></type> <name pos:line="82" pos:column="69">sourceElements</name></decl></param>)</parameter_list>
        <block pos:line="83" pos:column="9">{            
            <decl_stmt><decl><type><name pos:line="84" pos:column="13">var</name></type> <name pos:line="84" pos:column="17">programElements</name> <init pos:line="84" pos:column="33">= <expr><op:operator pos:line="84" pos:column="35">new</op:operator> <call><name><name pos:line="84" pos:column="39">List</name><argument_list pos:line="84" pos:column="43">&lt;<argument><name pos:line="84" pos:column="44">ProgramElement</name></argument>&gt;</argument_list></name><argument_list pos:line="84" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="86" pos:column="13">//classes and structs have to parsed first</comment>
            <expr_stmt><expr><call><name pos:line="87" pos:column="13">ParseClasses</name><argument_list pos:line="87" pos:column="25">(<argument><expr><name pos:line="87" pos:column="26">programElements</name></expr></argument>, <argument><expr><name pos:line="87" pos:column="43">sourceElements</name></expr></argument>, <argument><expr><name pos:line="87" pos:column="59">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="88" pos:column="13">ParseStructs</name><argument_list pos:line="88" pos:column="25">(<argument><expr><name pos:line="88" pos:column="26">programElements</name></expr></argument>, <argument><expr><name pos:line="88" pos:column="43">sourceElements</name></expr></argument>, <argument><expr><name pos:line="88" pos:column="59">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="90" pos:column="13">SrcMLParsingUtils</name><op:operator pos:line="90" pos:column="30">.</op:operator><name pos:line="90" pos:column="31">ParseFields</name></name><argument_list pos:line="90" pos:column="42">(<argument><expr><name pos:line="90" pos:column="43">programElements</name></expr></argument>, <argument><expr><name pos:line="90" pos:column="60">sourceElements</name></expr></argument>, <argument><expr><name pos:line="90" pos:column="76">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="91" pos:column="13">ParseCppEnums</name><argument_list pos:line="91" pos:column="26">(<argument><expr><name pos:line="91" pos:column="27">programElements</name></expr></argument>, <argument><expr><name pos:line="91" pos:column="44">sourceElements</name></expr></argument>, <argument><expr><name pos:line="91" pos:column="60">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="92" pos:column="13">ParseConstructors</name><argument_list pos:line="92" pos:column="30">(<argument><expr><name pos:line="92" pos:column="31">programElements</name></expr></argument>, <argument><expr><name pos:line="92" pos:column="48">sourceElements</name></expr></argument>, <argument><expr><name pos:line="92" pos:column="64">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="93" pos:column="13">ParseFunctions</name><argument_list pos:line="93" pos:column="27">(<argument><expr><name pos:line="93" pos:column="28">programElements</name></expr></argument>, <argument><expr><name pos:line="93" pos:column="45">sourceElements</name></expr></argument>, <argument><expr><name pos:line="93" pos:column="61">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="94" pos:column="13">ParseCppFunctionPrototypes</name><argument_list pos:line="94" pos:column="39">(<argument><expr><name pos:line="94" pos:column="40">programElements</name></expr></argument>, <argument><expr><name pos:line="94" pos:column="57">sourceElements</name></expr></argument>, <argument><expr><name pos:line="94" pos:column="73">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="95" pos:column="13">ParseCppConstructorPrototypes</name><argument_list pos:line="95" pos:column="42">(<argument><expr><name pos:line="95" pos:column="43">programElements</name></expr></argument>, <argument><expr><name pos:line="95" pos:column="60">sourceElements</name></expr></argument>, <argument><expr><name pos:line="95" pos:column="76">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="96" pos:column="13">SrcMLParsingUtils</name><op:operator pos:line="96" pos:column="30">.</op:operator><name pos:line="96" pos:column="31">ParseComments</name></name><argument_list pos:line="96" pos:column="44">(<argument><expr><name pos:line="96" pos:column="45">programElements</name></expr></argument>, <argument><expr><name pos:line="96" pos:column="62">sourceElements</name></expr></argument>, <argument><expr><name pos:line="96" pos:column="78">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:line="98" pos:column="13">return <expr><name pos:line="98" pos:column="20">programElements</name></expr>;</return>
        }</block></function>
        <comment type="line" pos:line="100" pos:column="9">// End of code changes</comment>

        <function><type><specifier pos:line="102" pos:column="9">private</specifier> <name pos:line="102" pos:column="17">void</name></type> <name pos:line="102" pos:column="22">ParseCppFunctionPrototypes</name><parameter_list pos:line="102" pos:column="48">(<param><decl><type><name><name pos:line="102" pos:column="49">List</name><argument_list pos:line="102" pos:column="53">&lt;<argument><name pos:line="102" pos:column="54">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="102" pos:column="70">programElements</name></decl></param>, <param><decl><type><name pos:line="102" pos:column="87">XElement</name></type> <name pos:line="102" pos:column="96">sourceElements</name></decl></param>, <param><decl><type><name pos:line="102" pos:column="112">string</name></type> <name pos:line="102" pos:column="119">fileName</name></decl></param>)</parameter_list>
        <block pos:line="103" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="104" pos:column="13">IEnumerable</name><argument_list pos:line="104" pos:column="24">&lt;<argument><name pos:line="104" pos:column="25">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="104" pos:column="35">functions</name> <init pos:line="104" pos:column="45">=
                <expr><linq><from pos:line="105" pos:column="17">from <expr><name pos:line="105" pos:column="22">el</name></expr> <in pos:line="105" pos:column="25">in <expr><call><name><name pos:line="105" pos:column="28">sourceElements</name><op:operator pos:line="105" pos:column="42">.</op:operator><name pos:line="105" pos:column="43">Descendants</name></name><argument_list pos:line="105" pos:column="54">(<argument><expr><name><name pos:line="105" pos:column="55">SRC</name><op:operator pos:line="105" pos:column="58">.</op:operator><name pos:line="105" pos:column="59">FunctionDeclaration</name></name></expr></argument>)</argument_list></call></expr></in></from>
                <select pos:line="106" pos:column="17">select <expr><name pos:line="106" pos:column="24">el</name></expr></select></linq></expr></init></decl>;</decl_stmt>
            <foreach pos:line="107" pos:column="13">foreach (<init><decl><type><name pos:line="107" pos:column="22">XElement</name></type> <name pos:line="107" pos:column="31">function</name> <range pos:line="107" pos:column="40">in <expr><name pos:line="107" pos:column="43">functions</name></expr></range></decl></init>)
            <block pos:line="108" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="109" pos:column="17">var</name></type> <name pos:line="109" pos:column="21">func</name> <init pos:line="109" pos:column="26">= <expr><call><name pos:line="109" pos:column="28">ParseCppFunctionPrototype</name><argument_list pos:line="109" pos:column="53">(<argument><expr><name pos:line="109" pos:column="54">function</name></expr></argument>, <argument><expr><name pos:line="109" pos:column="64">fileName</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="109" pos:column="74">false</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="110" pos:column="17">if<condition pos:line="110" pos:column="19">(<expr><name pos:line="110" pos:column="20">func</name><op:operator pos:line="110" pos:column="24">!=</op:operator><name pos:line="110" pos:column="26">null</name></expr>)</condition><then pos:line="110" pos:column="31">
                    <expr_stmt><expr><call><name><name pos:line="111" pos:column="21">programElements</name><op:operator pos:line="111" pos:column="36">.</op:operator><name pos:line="111" pos:column="37">Add</name></name><argument_list pos:line="111" pos:column="40">(<argument><expr><name pos:line="111" pos:column="41">func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></foreach>
        }</block></function>

        <function><type><specifier pos:line="115" pos:column="9">private</specifier> <name pos:line="115" pos:column="17">void</name></type> <name pos:line="115" pos:column="22">ParseCppConstructorPrototypes</name><parameter_list pos:line="115" pos:column="51">(<param><decl><type><name><name pos:line="115" pos:column="52">List</name><argument_list pos:line="115" pos:column="56">&lt;<argument><name pos:line="115" pos:column="57">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="115" pos:column="73">programElements</name></decl></param>, <param><decl><type><name pos:line="115" pos:column="90">XElement</name></type> <name pos:line="115" pos:column="99">sourceElements</name></decl></param>, <param><decl><type><name pos:line="115" pos:column="115">string</name></type> <name pos:line="115" pos:column="122">fileName</name></decl></param>)</parameter_list>
        <block pos:line="116" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="117" pos:column="13">IEnumerable</name><argument_list pos:line="117" pos:column="24">&lt;<argument><name pos:line="117" pos:column="25">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="117" pos:column="35">functions</name> <init pos:line="117" pos:column="45">=
                <expr><linq><from pos:line="118" pos:column="17">from <expr><name pos:line="118" pos:column="22">el</name></expr> <in pos:line="118" pos:column="25">in <expr><call><name><name pos:line="118" pos:column="28">sourceElements</name><op:operator pos:line="118" pos:column="42">.</op:operator><name pos:line="118" pos:column="43">Descendants</name></name><argument_list pos:line="118" pos:column="54">(<argument><expr><name><name pos:line="118" pos:column="55">SRC</name><op:operator pos:line="118" pos:column="58">.</op:operator><name pos:line="118" pos:column="59">ConstructorDeclaration</name></name></expr></argument>)</argument_list></call></expr></in></from>
                <select pos:line="119" pos:column="17">select <expr><name pos:line="119" pos:column="24">el</name></expr></select></linq></expr></init></decl>;</decl_stmt>
            <foreach pos:line="120" pos:column="13">foreach (<init><decl><type><name pos:line="120" pos:column="22">XElement</name></type> <name pos:line="120" pos:column="31">function</name> <range pos:line="120" pos:column="40">in <expr><name pos:line="120" pos:column="43">functions</name></expr></range></decl></init>)
            <block pos:line="121" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="122" pos:column="17">var</name></type> <name pos:line="122" pos:column="21">prototype</name> <init pos:line="122" pos:column="31">= <expr><call><name pos:line="122" pos:column="33">ParseCppFunctionPrototype</name><argument_list pos:line="122" pos:column="58">(<argument><expr><name pos:line="122" pos:column="59">function</name></expr></argument>, <argument><expr><name pos:line="122" pos:column="69">fileName</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="122" pos:column="79">true</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="123" pos:column="17">if<condition pos:line="123" pos:column="19">(<expr><name pos:line="123" pos:column="20">prototype</name><op:operator pos:line="123" pos:column="29">!=</op:operator><name pos:line="123" pos:column="31">null</name></expr>)</condition><then pos:line="123" pos:column="36">
                    <expr_stmt><expr><call><name><name pos:line="124" pos:column="21">programElements</name><op:operator pos:line="124" pos:column="36">.</op:operator><name pos:line="124" pos:column="37">Add</name></name><argument_list pos:line="124" pos:column="40">(<argument><expr><name pos:line="124" pos:column="41">prototype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></foreach>
        }</block></function>

        <function><type><specifier pos:line="128" pos:column="9">private</specifier> <name pos:line="128" pos:column="17">MethodPrototypeElement</name></type> <name pos:line="128" pos:column="40">ParseCppFunctionPrototype</name><parameter_list pos:line="128" pos:column="65">(<param><decl><type><name pos:line="128" pos:column="66">XElement</name></type> <name pos:line="128" pos:column="75">function</name></decl></param>, <param><decl><type><name pos:line="128" pos:column="85">string</name></type> <name pos:line="128" pos:column="92">fileName</name></decl></param>, <param><decl><type><name pos:line="128" pos:column="102">bool</name></type> <name pos:line="128" pos:column="107">isConstructor</name></decl></param>)</parameter_list>
        <block pos:line="129" pos:column="9">{
            <try pos:line="130" pos:column="13">try
            <block pos:line="131" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="132" pos:column="17">string</name></type> <name pos:line="132" pos:column="24">name</name> <init pos:line="132" pos:column="29">= <expr><name><name pos:line="132" pos:column="31">String</name><op:operator pos:line="132" pos:column="37">.</op:operator><name pos:line="132" pos:column="38">Empty</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="133" pos:column="17">int</name></type> <name pos:line="133" pos:column="21">definitionLineNumber</name> <init pos:line="133" pos:column="42">= <expr><lit:literal type="number" pos:line="133" pos:column="44">0</lit:literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="134" pos:column="17">int</name></type> <name pos:line="134" pos:column="21">definitionColumnNumber</name> <init pos:line="134" pos:column="44">= <expr><lit:literal type="number" pos:line="134" pos:column="46">0</lit:literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="135" pos:column="17">string</name></type> <name pos:line="135" pos:column="24">returnType</name> <init pos:line="135" pos:column="35">= <expr><name><name pos:line="135" pos:column="37">String</name><op:operator pos:line="135" pos:column="43">.</op:operator><name pos:line="135" pos:column="44">Empty</name></name></expr></init></decl>;</decl_stmt>                
                <expr_stmt><expr><call><name><name pos:line="136" pos:column="17">SrcMLParsingUtils</name><op:operator pos:line="136" pos:column="34">.</op:operator><name pos:line="136" pos:column="35">ParseNameAndLineNumber</name></name><argument_list pos:line="136" pos:column="57">(<argument><expr><name pos:line="136" pos:column="58">function</name></expr></argument>, <argument><expr pos:line="136" pos:column="68">out <name pos:line="136" pos:column="72">name</name></expr></argument>, <argument><expr pos:line="136" pos:column="78">out <name pos:line="136" pos:column="82">definitionLineNumber</name></expr></argument>, <argument><expr pos:line="136" pos:column="104">out <name pos:line="136" pos:column="108">definitionColumnNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="137" pos:column="17">if <condition pos:line="137" pos:column="20">(<expr><call><name><name pos:line="137" pos:column="21">name</name><op:operator pos:line="137" pos:column="25">.</op:operator><name pos:line="137" pos:column="26">Contains</name></name><argument_list pos:line="137" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="137" pos:column="35">"::"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="137" pos:column="41">
                <block pos:line="138" pos:column="17">{
                    <expr_stmt><expr><name pos:line="139" pos:column="21">name</name> <op:operator pos:line="139" pos:column="26">=</op:operator> <call><name><name pos:line="139" pos:column="28">name</name><op:operator pos:line="139" pos:column="32">.</op:operator><name pos:line="139" pos:column="33">Substring</name></name><argument_list pos:line="139" pos:column="42">(<argument><expr><call><name><name pos:line="139" pos:column="43">name</name><op:operator pos:line="139" pos:column="47">.</op:operator><name pos:line="139" pos:column="48">LastIndexOf</name></name><argument_list pos:line="139" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="139" pos:column="60">"::"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="139" pos:column="66">+</op:operator> <lit:literal type="number" pos:line="139" pos:column="68">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <decl_stmt><decl><type><name pos:line="141" pos:column="17">AccessLevel</name></type> <name pos:line="141" pos:column="29">accessLevel</name> <init pos:line="141" pos:column="41">= <expr><call><name pos:line="141" pos:column="43">RetrieveCppAccessLevel</name><argument_list pos:line="141" pos:column="65">(<argument><expr><name pos:line="141" pos:column="66">function</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="142" pos:column="17">XElement</name></type> <name pos:line="142" pos:column="26">type</name> <init pos:line="142" pos:column="31">= <expr><call><name><name pos:line="142" pos:column="33">function</name><op:operator pos:line="142" pos:column="41">.</op:operator><name pos:line="142" pos:column="42">Element</name></name><argument_list pos:line="142" pos:column="49">(<argument><expr><name><name pos:line="142" pos:column="50">SRC</name><op:operator pos:line="142" pos:column="53">.</op:operator><name pos:line="142" pos:column="54">Type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="143" pos:column="17">if <condition pos:line="143" pos:column="20">(<expr><name pos:line="143" pos:column="21">type</name> <op:operator pos:line="143" pos:column="26">!=</op:operator> <name pos:line="143" pos:column="29">null</name></expr>)</condition><then pos:line="143" pos:column="34">
                <block pos:line="144" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="145" pos:column="21">XElement</name></type> <name pos:line="145" pos:column="30">typeName</name> <init pos:line="145" pos:column="39">= <expr><call><name><name pos:line="145" pos:column="41">type</name><op:operator pos:line="145" pos:column="45">.</op:operator><name pos:line="145" pos:column="46">Element</name></name><argument_list pos:line="145" pos:column="53">(<argument><expr><name><name pos:line="145" pos:column="54">SRC</name><op:operator pos:line="145" pos:column="57">.</op:operator><name pos:line="145" pos:column="58">Name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name pos:line="146" pos:column="21">returnType</name> <op:operator pos:line="146" pos:column="32">=</op:operator> <name><name pos:line="146" pos:column="34">typeName</name><op:operator pos:line="146" pos:column="42">.</op:operator><name pos:line="146" pos:column="43">Value</name></name></expr>;</expr_stmt>
                }</block></then></if>

                <decl_stmt><decl><type><name pos:line="149" pos:column="17">XElement</name></type> <name pos:line="149" pos:column="26">paramlist</name> <init pos:line="149" pos:column="36">= <expr><call><name><name pos:line="149" pos:column="38">function</name><op:operator pos:line="149" pos:column="46">.</op:operator><name pos:line="149" pos:column="47">Element</name></name><argument_list pos:line="149" pos:column="54">(<argument><expr><name><name pos:line="149" pos:column="55">SRC</name><op:operator pos:line="149" pos:column="58">.</op:operator><name pos:line="149" pos:column="59">ParameterList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name pos:line="150" pos:column="17">IEnumerable</name><argument_list pos:line="150" pos:column="28">&lt;<argument><name pos:line="150" pos:column="29">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="150" pos:column="39">argumentElements</name> <init pos:line="150" pos:column="56">=
                    <expr><linq><from pos:line="151" pos:column="21">from <expr><name pos:line="151" pos:column="26">el</name></expr> <in pos:line="151" pos:column="29">in <expr><call><name><name pos:line="151" pos:column="32">paramlist</name><op:operator pos:line="151" pos:column="41">.</op:operator><name pos:line="151" pos:column="42">Descendants</name></name><argument_list pos:line="151" pos:column="53">(<argument><expr><name><name pos:line="151" pos:column="54">SRC</name><op:operator pos:line="151" pos:column="57">.</op:operator><name pos:line="151" pos:column="58">Name</name></name></expr></argument>)</argument_list></call></expr></in></from>
                    <select pos:line="152" pos:column="21">select <expr><name pos:line="152" pos:column="28">el</name></expr></select></linq></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="153" pos:column="17">string</name></type> <name pos:line="153" pos:column="24">arguments</name> <init pos:line="153" pos:column="34">= <expr><name><name pos:line="153" pos:column="36">String</name><op:operator pos:line="153" pos:column="42">.</op:operator><name pos:line="153" pos:column="43">Empty</name></name></expr></init></decl>;</decl_stmt>
                <foreach pos:line="154" pos:column="17">foreach (<init><decl><type><name pos:line="154" pos:column="26">XElement</name></type> <name pos:line="154" pos:column="35">elem</name> <range pos:line="154" pos:column="40">in <expr><name pos:line="154" pos:column="43">argumentElements</name></expr></range></decl></init>)
                <block pos:line="155" pos:column="17">{
                    <expr_stmt><expr><name pos:line="156" pos:column="21">arguments</name> <op:operator pos:line="156" pos:column="31">+=</op:operator> <name><name pos:line="156" pos:column="34">elem</name><op:operator pos:line="156" pos:column="38">.</op:operator><name pos:line="156" pos:column="39">Value</name></name> <op:operator pos:line="156" pos:column="45">+</op:operator> <lit:literal type="string" pos:line="156" pos:column="47">" "</lit:literal></expr>;</expr_stmt>
                }</block></foreach>
                <expr_stmt><expr><name pos:line="158" pos:column="17">arguments</name> <op:operator pos:line="158" pos:column="27">=</op:operator> <call><name><name pos:line="158" pos:column="29">arguments</name><op:operator pos:line="158" pos:column="38">.</op:operator><name pos:line="158" pos:column="39">TrimEnd</name></name><argument_list pos:line="158" pos:column="46">()</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name pos:line="160" pos:column="17">string</name></type> <name pos:line="160" pos:column="24">fullFilePath</name> <init pos:line="160" pos:column="37">= <expr><call><name><name pos:line="160" pos:column="39">System</name><op:operator pos:line="160" pos:column="45">.</op:operator><name pos:line="160" pos:column="46">IO</name><op:operator pos:line="160" pos:column="48">.</op:operator><name pos:line="160" pos:column="49">Path</name><op:operator pos:line="160" pos:column="53">.</op:operator><name pos:line="160" pos:column="54">GetFullPath</name></name><argument_list pos:line="160" pos:column="65">(<argument><expr><name pos:line="160" pos:column="66">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="161" pos:column="17">string</name></type> <name pos:line="161" pos:column="24">source</name> <init pos:line="161" pos:column="31">= <expr><call><name><name pos:line="161" pos:column="33">SrcMLParsingUtils</name><op:operator pos:line="161" pos:column="50">.</op:operator><name pos:line="161" pos:column="51">RetrieveSource</name></name><argument_list pos:line="161" pos:column="65">(<argument><expr><name pos:line="161" pos:column="66">function</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <return pos:line="163" pos:column="17">return <expr><op:operator pos:line="163" pos:column="24">new</op:operator> <call><name pos:line="163" pos:column="28">MethodPrototypeElement</name><argument_list pos:line="163" pos:column="50">(<argument><expr><name pos:line="163" pos:column="51">name</name></expr></argument>, <argument><expr><name pos:line="163" pos:column="57">definitionLineNumber</name></expr></argument>, <argument><expr><name pos:line="163" pos:column="79">definitionColumnNumber</name></expr></argument>, <argument><expr><name pos:line="163" pos:column="103">returnType</name></expr></argument>, <argument><expr><name pos:line="163" pos:column="115">accessLevel</name></expr></argument>, <argument><expr><name pos:line="163" pos:column="128">arguments</name></expr></argument>, <argument><expr><name pos:line="163" pos:column="139">fullFilePath</name></expr></argument>, <argument><expr><name pos:line="163" pos:column="153">source</name></expr></argument>, <argument><expr><name pos:line="163" pos:column="161">isConstructor</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block>
            <catch pos:line="165" pos:column="13">catch <parameter_list pos:line="165" pos:column="19">(<param><decl><type><name pos:line="165" pos:column="20">Exception</name></type> <name pos:line="165" pos:column="30">error</name></decl></param>)</parameter_list>
            <block pos:line="166" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="167" pos:column="17">FileLogger</name><op:operator pos:line="167" pos:column="27">.</op:operator><name pos:line="167" pos:column="28">DefaultLogger</name><op:operator pos:line="167" pos:column="41">.</op:operator><name pos:line="167" pos:column="42">Info</name></name><argument_list pos:line="167" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="167" pos:column="47">"Exception in SrcMLCppParser "</lit:literal> <op:operator pos:line="167" pos:column="78">+</op:operator> <name><name pos:line="167" pos:column="80">error</name><op:operator pos:line="167" pos:column="85">.</op:operator><name pos:line="167" pos:column="86">Message</name></name> <op:operator pos:line="167" pos:column="94">+</op:operator> <lit:literal type="string" pos:line="167" pos:column="96">"\n"</lit:literal> <op:operator pos:line="167" pos:column="101">+</op:operator> <name><name pos:line="167" pos:column="103">error</name><op:operator pos:line="167" pos:column="108">.</op:operator><name pos:line="167" pos:column="109">StackTrace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="168" pos:column="17">return <expr><name pos:line="168" pos:column="24">null</name></expr>;</return>
            }</block></catch></try>
        }</block></function>


        <function><type><specifier pos:line="173" pos:column="9">private</specifier> <name pos:line="173" pos:column="17">string</name><index pos:line="173" pos:column="23">[]</index></type> <name pos:line="173" pos:column="26">ParseCppIncludes</name><parameter_list pos:line="173" pos:column="42">(<param><decl><type><name pos:line="173" pos:column="43">XElement</name></type> <name pos:line="173" pos:column="52">sourceElements</name></decl></param>)</parameter_list>
        <block pos:line="174" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="175" pos:column="13">List</name><argument_list pos:line="175" pos:column="17">&lt;<argument><name pos:line="175" pos:column="18">string</name></argument>&gt;</argument_list></name></type> <name pos:line="175" pos:column="26">includeFileNames</name> <init pos:line="175" pos:column="43">= <expr><op:operator pos:line="175" pos:column="45">new</op:operator> <call><name><name pos:line="175" pos:column="49">List</name><argument_list pos:line="175" pos:column="53">&lt;<argument><name pos:line="175" pos:column="54">string</name></argument>&gt;</argument_list></name><argument_list pos:line="175" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <try pos:line="176" pos:column="13">try
            <block pos:line="177" pos:column="13">{
                <decl_stmt><decl><type><name><name pos:line="178" pos:column="17">IEnumerable</name><argument_list pos:line="178" pos:column="28">&lt;<argument><name pos:line="178" pos:column="29">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="178" pos:column="39">includeStatements</name> <init pos:line="178" pos:column="57">=
                    <expr><linq><from pos:line="179" pos:column="21">from <expr><name pos:line="179" pos:column="26">el</name></expr> <in pos:line="179" pos:column="29">in <expr><call><name><name pos:line="179" pos:column="32">sourceElements</name><op:operator pos:line="179" pos:column="46">.</op:operator><name pos:line="179" pos:column="47">Descendants</name></name><argument_list pos:line="179" pos:column="58">(<argument><expr><name><name pos:line="179" pos:column="59">CPP</name><op:operator pos:line="179" pos:column="62">.</op:operator><name pos:line="179" pos:column="63">Include</name></name></expr></argument>)</argument_list></call></expr></in></from>
                    <select pos:line="180" pos:column="21">select <expr><name pos:line="180" pos:column="28">el</name></expr></select></linq></expr></init></decl>;</decl_stmt>

                <foreach pos:line="182" pos:column="17">foreach (<init><decl><type><name pos:line="182" pos:column="26">XElement</name></type> <name pos:line="182" pos:column="35">include</name> <range pos:line="182" pos:column="43">in <expr><name pos:line="182" pos:column="46">includeStatements</name></expr></range></decl></init>)
                <block pos:line="183" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="184" pos:column="21">string</name></type> <name pos:line="184" pos:column="28">filename</name> <init pos:line="184" pos:column="37">= <expr><call><name><name pos:line="184" pos:column="39">include</name><op:operator pos:line="184" pos:column="46">.</op:operator><name pos:line="184" pos:column="47">Element</name></name><argument_list pos:line="184" pos:column="54">(<argument><expr><name><name pos:line="184" pos:column="55">CPP</name><op:operator pos:line="184" pos:column="58">.</op:operator><name pos:line="184" pos:column="59">File</name></name></expr></argument>)</argument_list></call><op:operator pos:line="184" pos:column="64">.</op:operator><name pos:line="184" pos:column="65">Value</name></expr></init></decl>;</decl_stmt>
                    <if pos:line="185" pos:column="21">if <condition pos:line="185" pos:column="24">(<expr><call><name><name pos:line="185" pos:column="25">filename</name><op:operator pos:line="185" pos:column="33">.</op:operator><name pos:line="185" pos:column="34">Substring</name></name><argument_list pos:line="185" pos:column="43">(<argument><expr><lit:literal type="number" pos:line="185" pos:column="44">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="185" pos:column="47">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="185" pos:column="50">==</op:operator> <lit:literal type="string" pos:line="185" pos:column="53">"&lt;"</lit:literal></expr>)</condition><then pos:line="185" pos:column="57"> <continue pos:line="185" pos:column="58">continue;</continue></then></if> <comment type="line" pos:line="185" pos:column="68">//ignore includes of system files -&gt; they start with a bracket</comment>
                    <expr_stmt><expr><name pos:line="186" pos:column="21">filename</name> <op:operator pos:line="186" pos:column="30">=</op:operator> <call><name><name pos:line="186" pos:column="32">filename</name><op:operator pos:line="186" pos:column="40">.</op:operator><name pos:line="186" pos:column="41">Substring</name></name><argument_list pos:line="186" pos:column="50">(<argument><expr><lit:literal type="number" pos:line="186" pos:column="51">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="186" pos:column="54">filename</name><op:operator pos:line="186" pos:column="62">.</op:operator><name pos:line="186" pos:column="63">Length</name></name> <op:operator pos:line="186" pos:column="70">-</op:operator> <lit:literal type="number" pos:line="186" pos:column="72">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="186" pos:column="81">//remove quotes	</comment>
                    <expr_stmt><expr><call><name><name pos:line="187" pos:column="21">includeFileNames</name><op:operator pos:line="187" pos:column="37">.</op:operator><name pos:line="187" pos:column="38">Add</name></name><argument_list pos:line="187" pos:column="41">(<argument><expr><name pos:line="187" pos:column="42">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>
            }</block>
            <catch pos:line="190" pos:column="13">catch <parameter_list pos:line="190" pos:column="19">(<param><decl><type><name pos:line="190" pos:column="20">Exception</name></type> <name pos:line="190" pos:column="30">error</name></decl></param>)</parameter_list>
            <block pos:line="191" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="192" pos:column="17">FileLogger</name><op:operator pos:line="192" pos:column="27">.</op:operator><name pos:line="192" pos:column="28">DefaultLogger</name><op:operator pos:line="192" pos:column="41">.</op:operator><name pos:line="192" pos:column="42">Info</name></name><argument_list pos:line="192" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="192" pos:column="47">"Exception in SrcMLCppParser.ParseCppIncludes() "</lit:literal> <op:operator pos:line="192" pos:column="97">+</op:operator> <name><name pos:line="192" pos:column="99">error</name><op:operator pos:line="192" pos:column="104">.</op:operator><name pos:line="192" pos:column="105">Message</name></name> <op:operator pos:line="192" pos:column="113">+</op:operator> <lit:literal type="string" pos:line="192" pos:column="115">"\n"</lit:literal> <op:operator pos:line="192" pos:column="120">+</op:operator> <name><name pos:line="192" pos:column="122">error</name><op:operator pos:line="192" pos:column="127">.</op:operator><name pos:line="192" pos:column="128">StackTrace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
            <return pos:line="194" pos:column="13">return <expr><call><name><name pos:line="194" pos:column="20">includeFileNames</name><op:operator pos:line="194" pos:column="36">.</op:operator><name pos:line="194" pos:column="37">ToArray</name></name><argument_list pos:line="194" pos:column="44">()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="197" pos:column="9">private</specifier> <name pos:line="197" pos:column="17">void</name></type> <name pos:line="197" pos:column="22">ParseClasses</name><parameter_list pos:line="197" pos:column="34">(<param><decl><type><name><name pos:line="197" pos:column="35">List</name><argument_list pos:line="197" pos:column="39">&lt;<argument><name pos:line="197" pos:column="40">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="197" pos:column="56">programElements</name></decl></param>, <param><decl><type><name pos:line="197" pos:column="73">XElement</name></type> <name pos:line="197" pos:column="82">elements</name></decl></param>, <param><decl><type><name pos:line="197" pos:column="92">string</name></type> <name pos:line="197" pos:column="99">fileName</name></decl></param>)</parameter_list>
        <block pos:line="198" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="199" pos:column="13">IEnumerable</name><argument_list pos:line="199" pos:column="24">&lt;<argument><name pos:line="199" pos:column="25">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="199" pos:column="35">classes</name> <init pos:line="199" pos:column="43">=
                <expr><linq><from pos:line="200" pos:column="17">from <expr><name pos:line="200" pos:column="22">el</name></expr> <in pos:line="200" pos:column="25">in <expr><call><name><name pos:line="200" pos:column="28">elements</name><op:operator pos:line="200" pos:column="36">.</op:operator><name pos:line="200" pos:column="37">Descendants</name></name><argument_list pos:line="200" pos:column="48">(<argument><expr><name><name pos:line="200" pos:column="49">SRC</name><op:operator pos:line="200" pos:column="52">.</op:operator><name pos:line="200" pos:column="53">Class</name></name></expr></argument>)</argument_list></call></expr></in></from>
                <select pos:line="201" pos:column="17">select <expr><name pos:line="201" pos:column="24">el</name></expr></select></linq></expr></init></decl>;</decl_stmt>
            <foreach pos:line="202" pos:column="13">foreach (<init><decl><type><name pos:line="202" pos:column="22">XElement</name></type> <name pos:line="202" pos:column="31">cls</name> <range pos:line="202" pos:column="35">in <expr><name pos:line="202" pos:column="38">classes</name></expr></range></decl></init>)
            <block pos:line="203" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="204" pos:column="17">var</name></type> <name pos:line="204" pos:column="21">classElement</name> <init pos:line="204" pos:column="34">= <expr><op:operator pos:line="204" pos:column="36">(</op:operator><name pos:line="204" pos:column="37">ClassElement</name><op:operator pos:line="204" pos:column="49">)</op:operator><call><name pos:line="204" pos:column="50">ParseClassOrStruct</name><argument_list pos:line="204" pos:column="68">(<argument><expr><name pos:line="204" pos:column="69">cls</name></expr></argument>, <argument><expr><name pos:line="204" pos:column="74">fileName</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="204" pos:column="84">false</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="205" pos:column="17">if<condition pos:line="205" pos:column="19">(<expr><name pos:line="205" pos:column="20">classElement</name><op:operator pos:line="205" pos:column="32">!=</op:operator><name pos:line="205" pos:column="34">null</name></expr>)</condition><then pos:line="205" pos:column="39">
                    <expr_stmt><expr><call><name><name pos:line="206" pos:column="21">programElements</name><op:operator pos:line="206" pos:column="36">.</op:operator><name pos:line="206" pos:column="37">Add</name></name><argument_list pos:line="206" pos:column="40">(<argument><expr><name pos:line="206" pos:column="41">classElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></foreach>
        }</block></function>

        <function><type><specifier pos:line="210" pos:column="9">private</specifier> <name pos:line="210" pos:column="17">void</name></type> <name pos:line="210" pos:column="22">ParseStructs</name><parameter_list pos:line="210" pos:column="34">(<param><decl><type><name><name pos:line="210" pos:column="35">List</name><argument_list pos:line="210" pos:column="39">&lt;<argument><name pos:line="210" pos:column="40">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="210" pos:column="56">programElements</name></decl></param>, <param><decl><type><name pos:line="210" pos:column="73">XElement</name></type> <name pos:line="210" pos:column="82">elements</name></decl></param>, <param><decl><type><name pos:line="210" pos:column="92">string</name></type> <name pos:line="210" pos:column="99">fileName</name></decl></param>)</parameter_list>
        <block pos:line="211" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="212" pos:column="13">IEnumerable</name><argument_list pos:line="212" pos:column="24">&lt;<argument><name pos:line="212" pos:column="25">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="212" pos:column="35">classes</name> <init pos:line="212" pos:column="43">=
                <expr><linq><from pos:line="213" pos:column="17">from <expr><name pos:line="213" pos:column="22">el</name></expr> <in pos:line="213" pos:column="25">in <expr><call><name><name pos:line="213" pos:column="28">elements</name><op:operator pos:line="213" pos:column="36">.</op:operator><name pos:line="213" pos:column="37">Descendants</name></name><argument_list pos:line="213" pos:column="48">(<argument><expr><name><name pos:line="213" pos:column="49">SRC</name><op:operator pos:line="213" pos:column="52">.</op:operator><name pos:line="213" pos:column="53">Struct</name></name></expr></argument>)</argument_list></call></expr></in></from>
                <select pos:line="214" pos:column="17">select <expr><name pos:line="214" pos:column="24">el</name></expr></select></linq></expr></init></decl>;</decl_stmt>
            <foreach pos:line="215" pos:column="13">foreach (<init><decl><type><name pos:line="215" pos:column="22">XElement</name></type> <name pos:line="215" pos:column="31">cls</name> <range pos:line="215" pos:column="35">in <expr><name pos:line="215" pos:column="38">classes</name></expr></range></decl></init>)
            <block pos:line="216" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="217" pos:column="17">var</name></type> <name pos:line="217" pos:column="21">structure</name> <init pos:line="217" pos:column="31">= <expr><op:operator pos:line="217" pos:column="33">(</op:operator><name pos:line="217" pos:column="34">StructElement</name><op:operator pos:line="217" pos:column="47">)</op:operator><call><name pos:line="217" pos:column="48">ParseClassOrStruct</name><argument_list pos:line="217" pos:column="66">(<argument><expr><name pos:line="217" pos:column="67">cls</name></expr></argument>, <argument><expr><name pos:line="217" pos:column="72">fileName</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="217" pos:column="82">true</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="218" pos:column="17">if<condition pos:line="218" pos:column="19">(<expr><name pos:line="218" pos:column="20">structure</name><op:operator pos:line="218" pos:column="29">!=</op:operator><name pos:line="218" pos:column="31">null</name></expr>)</condition><then pos:line="218" pos:column="36">
                    <expr_stmt><expr><call><name><name pos:line="219" pos:column="21">programElements</name><op:operator pos:line="219" pos:column="36">.</op:operator><name pos:line="219" pos:column="37">Add</name></name><argument_list pos:line="219" pos:column="40">(<argument><expr><name pos:line="219" pos:column="41">structure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></foreach>
        }</block></function>

        <function><type><specifier pos:line="223" pos:column="9">private</specifier> <name pos:line="223" pos:column="17">ProgramElement</name></type> <name pos:line="223" pos:column="32">ParseClassOrStruct</name><parameter_list pos:line="223" pos:column="50">(<param><decl><type><name pos:line="223" pos:column="51">XElement</name></type> <name pos:line="223" pos:column="60">cls</name></decl></param>, <param><decl><type><name pos:line="223" pos:column="65">string</name></type> <name pos:line="223" pos:column="72">fileName</name></decl></param>, <param><decl><type><name pos:line="223" pos:column="82">bool</name></type> <name pos:line="223" pos:column="87">parseStruct</name></decl></param>)</parameter_list>
        <block pos:line="224" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="225" pos:column="13">string</name></type> <name pos:line="225" pos:column="20">name</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="226" pos:column="13">int</name></type> <name pos:line="226" pos:column="17">definitionLineNumber</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="227" pos:column="13">int</name></type> <name pos:line="227" pos:column="17">definitionColumnNumber</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="228" pos:column="13">SrcMLParsingUtils</name><op:operator pos:line="228" pos:column="30">.</op:operator><name pos:line="228" pos:column="31">ParseNameAndLineNumber</name></name><argument_list pos:line="228" pos:column="53">(<argument><expr><name pos:line="228" pos:column="54">cls</name></expr></argument>, <argument><expr pos:line="228" pos:column="59">out <name pos:line="228" pos:column="63">name</name></expr></argument>, <argument><expr pos:line="228" pos:column="69">out <name pos:line="228" pos:column="73">definitionLineNumber</name></expr></argument>, <argument><expr pos:line="228" pos:column="95">out <name pos:line="228" pos:column="99">definitionColumnNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="230" pos:column="13">AccessLevel</name></type> <name pos:line="230" pos:column="25">accessLevel</name> <init pos:line="230" pos:column="37">= <expr><call><name><name pos:line="230" pos:column="39">SrcMLParsingUtils</name><op:operator pos:line="230" pos:column="56">.</op:operator><name pos:line="230" pos:column="57">RetrieveAccessLevel</name></name><argument_list pos:line="230" pos:column="76">(<argument><expr><name pos:line="230" pos:column="77">cls</name></expr></argument>, <argument><expr><name><name pos:line="230" pos:column="82">AccessLevel</name><op:operator pos:line="230" pos:column="93">.</op:operator><name pos:line="230" pos:column="94">Public</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="232" pos:column="13">//parse namespace</comment>
            <decl_stmt><decl><type><name><name pos:line="233" pos:column="13">IEnumerable</name><argument_list pos:line="233" pos:column="24">&lt;<argument><name pos:line="233" pos:column="25">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="233" pos:column="35">ownerNamespaces</name> <init pos:line="233" pos:column="51">=
                <expr><linq><from pos:line="234" pos:column="17">from <expr><name pos:line="234" pos:column="22">el</name></expr> <in pos:line="234" pos:column="25">in <expr><call><name><name pos:line="234" pos:column="28">cls</name><op:operator pos:line="234" pos:column="31">.</op:operator><name pos:line="234" pos:column="32">Ancestors</name></name><argument_list pos:line="234" pos:column="41">(<argument><expr><name><name pos:line="234" pos:column="42">SRC</name><op:operator pos:line="234" pos:column="45">.</op:operator><name pos:line="234" pos:column="46">Declaration</name></name></expr></argument>)</argument_list></call></expr></in></from>
                <where pos:line="235" pos:column="17">where <expr><call><name><name pos:line="235" pos:column="23">el</name><op:operator pos:line="235" pos:column="25">.</op:operator><name pos:line="235" pos:column="26">Element</name></name><argument_list pos:line="235" pos:column="33">(<argument><expr><name><name pos:line="235" pos:column="34">SRC</name><op:operator pos:line="235" pos:column="37">.</op:operator><name pos:line="235" pos:column="38">Type</name></name></expr></argument>)</argument_list></call><op:operator pos:line="235" pos:column="43">.</op:operator><call><name pos:line="235" pos:column="44">Element</name><argument_list pos:line="235" pos:column="51">(<argument><expr><name><name pos:line="235" pos:column="52">SRC</name><op:operator pos:line="235" pos:column="55">.</op:operator><name pos:line="235" pos:column="56">Name</name></name></expr></argument>)</argument_list></call><op:operator pos:line="235" pos:column="61">.</op:operator><name pos:line="235" pos:column="62">Value</name> <op:operator pos:line="235" pos:column="68">==</op:operator> <lit:literal type="string" pos:line="235" pos:column="71">"namespace"</lit:literal></expr></where>
                <select pos:line="236" pos:column="17">select <expr><name pos:line="236" pos:column="24">el</name></expr></select></linq></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="237" pos:column="13">string</name></type> <name pos:line="237" pos:column="20">namespaceName</name> <init pos:line="237" pos:column="34">= <expr><name><name pos:line="237" pos:column="36">String</name><op:operator pos:line="237" pos:column="42">.</op:operator><name pos:line="237" pos:column="43">Empty</name></name></expr></init></decl>;</decl_stmt>
            <foreach pos:line="238" pos:column="13">foreach (<init><decl><type><name pos:line="238" pos:column="22">XElement</name></type> <name pos:line="238" pos:column="31">ownerNamespace</name> <range pos:line="238" pos:column="46">in <expr><name pos:line="238" pos:column="49">ownerNamespaces</name></expr></range></decl></init>)
            <block pos:line="239" pos:column="13">{
                <foreach pos:line="240" pos:column="17">foreach (<init><decl><type><name pos:line="240" pos:column="26">XElement</name></type> <name pos:line="240" pos:column="35">spc</name> <range pos:line="240" pos:column="39">in <expr><call><name><name pos:line="240" pos:column="42">ownerNamespace</name><op:operator pos:line="240" pos:column="56">.</op:operator><name pos:line="240" pos:column="57">Elements</name></name><argument_list pos:line="240" pos:column="65">(<argument><expr><name><name pos:line="240" pos:column="66">SRC</name><op:operator pos:line="240" pos:column="69">.</op:operator><name pos:line="240" pos:column="70">Name</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)
                <block pos:line="241" pos:column="17">{
                    <expr_stmt><expr><name pos:line="242" pos:column="21">namespaceName</name> <op:operator pos:line="242" pos:column="35">+=</op:operator> <name><name pos:line="242" pos:column="38">spc</name><op:operator pos:line="242" pos:column="41">.</op:operator><name pos:line="242" pos:column="42">Value</name></name> <op:operator pos:line="242" pos:column="48">+</op:operator> <lit:literal type="string" pos:line="242" pos:column="50">" "</lit:literal></expr>;</expr_stmt>
                }</block></foreach>
            }</block></foreach>
            <expr_stmt><expr><name pos:line="245" pos:column="13">namespaceName</name> <op:operator pos:line="245" pos:column="27">=</op:operator> <call><name><name pos:line="245" pos:column="29">namespaceName</name><op:operator pos:line="245" pos:column="42">.</op:operator><name pos:line="245" pos:column="43">TrimEnd</name></name><argument_list pos:line="245" pos:column="50">()</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="247" pos:column="13">//parse extended classes </comment>
            <decl_stmt><decl><type><name pos:line="248" pos:column="13">string</name></type> <name pos:line="248" pos:column="20">extendedClasses</name> <init pos:line="248" pos:column="36">= <expr><name><name pos:line="248" pos:column="38">String</name><op:operator pos:line="248" pos:column="44">.</op:operator><name pos:line="248" pos:column="45">Empty</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="249" pos:column="13">XElement</name></type> <name pos:line="249" pos:column="22">super</name> <init pos:line="249" pos:column="28">= <expr><call><name><name pos:line="249" pos:column="30">cls</name><op:operator pos:line="249" pos:column="33">.</op:operator><name pos:line="249" pos:column="34">Element</name></name><argument_list pos:line="249" pos:column="41">(<argument><expr><name><name pos:line="249" pos:column="42">SRC</name><op:operator pos:line="249" pos:column="45">.</op:operator><name pos:line="249" pos:column="46">Super</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="250" pos:column="13">if <condition pos:line="250" pos:column="16">(<expr><name pos:line="250" pos:column="17">super</name> <op:operator pos:line="250" pos:column="23">!=</op:operator> <name pos:line="250" pos:column="26">null</name></expr>)</condition><then pos:line="250" pos:column="31">
            <block pos:line="251" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="252" pos:column="17">XElement</name></type> <name pos:line="252" pos:column="26">implements</name> <init pos:line="252" pos:column="37">= <expr><call><name><name pos:line="252" pos:column="39">super</name><op:operator pos:line="252" pos:column="44">.</op:operator><name pos:line="252" pos:column="45">Element</name></name><argument_list pos:line="252" pos:column="52">(<argument><expr><name><name pos:line="252" pos:column="53">SRC</name><op:operator pos:line="252" pos:column="56">.</op:operator><name pos:line="252" pos:column="57">Implements</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="253" pos:column="17">if <condition pos:line="253" pos:column="20">(<expr><name pos:line="253" pos:column="21">implements</name> <op:operator pos:line="253" pos:column="32">!=</op:operator> <name pos:line="253" pos:column="35">null</name></expr>)</condition><then pos:line="253" pos:column="40">
                <block pos:line="254" pos:column="17">{
                    <decl_stmt><decl><type><name><name pos:line="255" pos:column="21">IEnumerable</name><argument_list pos:line="255" pos:column="32">&lt;<argument><name pos:line="255" pos:column="33">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="255" pos:column="43">impNames</name> <init pos:line="255" pos:column="52">=
                        <expr><linq><from pos:line="256" pos:column="25">from <expr><name pos:line="256" pos:column="30">el</name></expr> <in pos:line="256" pos:column="33">in <expr><call><name><name pos:line="256" pos:column="36">implements</name><op:operator pos:line="256" pos:column="46">.</op:operator><name pos:line="256" pos:column="47">Descendants</name></name><argument_list pos:line="256" pos:column="58">(<argument><expr><name><name pos:line="256" pos:column="59">SRC</name><op:operator pos:line="256" pos:column="62">.</op:operator><name pos:line="256" pos:column="63">Name</name></name></expr></argument>)</argument_list></call></expr></in></from>
                        <select pos:line="257" pos:column="25">select <expr><name pos:line="257" pos:column="32">el</name></expr></select></linq></expr></init></decl>;</decl_stmt>
                    <foreach pos:line="258" pos:column="21">foreach (<init><decl><type><name pos:line="258" pos:column="30">XElement</name></type> <name pos:line="258" pos:column="39">impName</name> <range pos:line="258" pos:column="47">in <expr><name pos:line="258" pos:column="50">impNames</name></expr></range></decl></init>)
                    <block pos:line="259" pos:column="21">{
                        <expr_stmt><expr><name pos:line="260" pos:column="25">extendedClasses</name> <op:operator pos:line="260" pos:column="41">+=</op:operator> <name><name pos:line="260" pos:column="44">impName</name><op:operator pos:line="260" pos:column="51">.</op:operator><name pos:line="260" pos:column="52">Value</name></name> <op:operator pos:line="260" pos:column="58">+</op:operator> <lit:literal type="string" pos:line="260" pos:column="60">" "</lit:literal></expr>;</expr_stmt>
                    }</block></foreach>
                    <expr_stmt><expr><name pos:line="262" pos:column="21">extendedClasses</name> <op:operator pos:line="262" pos:column="37">=</op:operator> <call><name><name pos:line="262" pos:column="39">extendedClasses</name><op:operator pos:line="262" pos:column="54">.</op:operator><name pos:line="262" pos:column="55">TrimEnd</name></name><argument_list pos:line="262" pos:column="62">()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="266" pos:column="13">string</name></type> <name pos:line="266" pos:column="20">fullFilePath</name> <init pos:line="266" pos:column="33">= <expr><call><name><name pos:line="266" pos:column="35">System</name><op:operator pos:line="266" pos:column="41">.</op:operator><name pos:line="266" pos:column="42">IO</name><op:operator pos:line="266" pos:column="44">.</op:operator><name pos:line="266" pos:column="45">Path</name><op:operator pos:line="266" pos:column="49">.</op:operator><name pos:line="266" pos:column="50">GetFullPath</name></name><argument_list pos:line="266" pos:column="61">(<argument><expr><name pos:line="266" pos:column="62">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="267" pos:column="13">string</name></type> <name pos:line="267" pos:column="20">source</name> <init pos:line="267" pos:column="27">= <expr><call><name><name pos:line="267" pos:column="29">SrcMLParsingUtils</name><op:operator pos:line="267" pos:column="46">.</op:operator><name pos:line="267" pos:column="47">RetrieveSource</name></name><argument_list pos:line="267" pos:column="61">(<argument><expr><name pos:line="267" pos:column="62">cls</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="269" pos:column="13">string</name></type> <name pos:line="269" pos:column="20">body</name> <init pos:line="269" pos:column="25">= <expr><name><name pos:line="269" pos:column="27">cls</name><op:operator pos:line="269" pos:column="30">.</op:operator><name pos:line="269" pos:column="31">Value</name></name></expr></init></decl>;</decl_stmt>
            <if pos:line="270" pos:column="13">if <condition pos:line="270" pos:column="16">(<expr><name pos:line="270" pos:column="17">parseStruct</name></expr>)</condition><then pos:line="270" pos:column="29">
            <block pos:line="271" pos:column="13">{
                <return pos:line="272" pos:column="17">return <expr><op:operator pos:line="272" pos:column="24">new</op:operator> <call><name pos:line="272" pos:column="28">StructElement</name><argument_list pos:line="272" pos:column="41">(<argument><expr><name pos:line="272" pos:column="42">name</name></expr></argument>, <argument><expr><name pos:line="272" pos:column="48">definitionLineNumber</name></expr></argument>, <argument><expr><name pos:line="272" pos:column="70">definitionColumnNumber</name></expr></argument>, <argument><expr><name pos:line="272" pos:column="94">fullFilePath</name></expr></argument>, <argument><expr><name pos:line="272" pos:column="108">source</name></expr></argument>, <argument><expr><name pos:line="272" pos:column="116">accessLevel</name></expr></argument>, <argument><expr><name pos:line="272" pos:column="129">namespaceName</name></expr></argument>, <argument><expr><name pos:line="272" pos:column="144">body</name></expr></argument>, <argument><expr><name pos:line="272" pos:column="150">extendedClasses</name></expr></argument>, <argument><expr><name><name pos:line="272" pos:column="167">String</name><op:operator pos:line="272" pos:column="173">.</op:operator><name pos:line="272" pos:column="174">Empty</name></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then>
            <else pos:line="274" pos:column="13">else
            <block pos:line="275" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="276" pos:column="17">string</name></type> <name pos:line="276" pos:column="24">implementedInterfaces</name> <init pos:line="276" pos:column="46">= <expr><name><name pos:line="276" pos:column="48">String</name><op:operator pos:line="276" pos:column="54">.</op:operator><name pos:line="276" pos:column="55">Empty</name></name></expr></init></decl>;</decl_stmt>
                <return pos:line="277" pos:column="17">return <expr><op:operator pos:line="277" pos:column="24">new</op:operator> <call><name pos:line="277" pos:column="28">ClassElement</name><argument_list pos:line="277" pos:column="40">(<argument><expr><name pos:line="277" pos:column="41">name</name></expr></argument>, <argument><expr><name pos:line="277" pos:column="47">definitionLineNumber</name></expr></argument>, <argument><expr><name pos:line="277" pos:column="69">definitionColumnNumber</name></expr></argument>, <argument><expr><name pos:line="277" pos:column="93">fullFilePath</name></expr></argument>, <argument><expr><name pos:line="277" pos:column="107">source</name></expr></argument>, <argument><expr><name pos:line="277" pos:column="115">accessLevel</name></expr></argument>, <argument><expr><name pos:line="277" pos:column="128">namespaceName</name></expr></argument>,
                    <argument><expr><name pos:line="278" pos:column="21">extendedClasses</name></expr></argument>, <argument><expr><name pos:line="278" pos:column="38">implementedInterfaces</name></expr></argument>, <argument><expr><name><name pos:line="278" pos:column="61">String</name><op:operator pos:line="278" pos:column="67">.</op:operator><name pos:line="278" pos:column="68">Empty</name></name></expr></argument>, <argument><expr><name pos:line="278" pos:column="75">body</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></else></if>
        }</block></function>

        <function><type><specifier pos:line="282" pos:column="9">private</specifier> <name pos:line="282" pos:column="17">void</name></type> <name pos:line="282" pos:column="22">ParseConstructors</name><parameter_list pos:line="282" pos:column="39">(<param><decl><type><name><name pos:line="282" pos:column="40">List</name><argument_list pos:line="282" pos:column="44">&lt;<argument><name pos:line="282" pos:column="45">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="282" pos:column="61">programElements</name></decl></param>, <param><decl><type><name pos:line="282" pos:column="78">XElement</name></type> <name pos:line="282" pos:column="87">elements</name></decl></param>, <param><decl><type><name pos:line="282" pos:column="97">string</name></type> <name pos:line="282" pos:column="104">fileName</name></decl></param>)</parameter_list>
        <block pos:line="283" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="284" pos:column="13">string</name><index pos:line="284" pos:column="19">[]</index></type> <name pos:line="284" pos:column="22">includedFiles</name> <init pos:line="284" pos:column="36">= <expr><call><name pos:line="284" pos:column="38">ParseCppIncludes</name><argument_list pos:line="284" pos:column="54">(<argument><expr><name pos:line="284" pos:column="55">elements</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="285" pos:column="13">IEnumerable</name><argument_list pos:line="285" pos:column="24">&lt;<argument><name pos:line="285" pos:column="25">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="285" pos:column="35">constructors</name> <init pos:line="285" pos:column="48">=
                <expr><linq><from pos:line="286" pos:column="17">from <expr><name pos:line="286" pos:column="22">el</name></expr> <in pos:line="286" pos:column="25">in <expr><call><name><name pos:line="286" pos:column="28">elements</name><op:operator pos:line="286" pos:column="36">.</op:operator><name pos:line="286" pos:column="37">Descendants</name></name><argument_list pos:line="286" pos:column="48">(<argument><expr><name><name pos:line="286" pos:column="49">SRC</name><op:operator pos:line="286" pos:column="52">.</op:operator><name pos:line="286" pos:column="53">Constructor</name></name></expr></argument>)</argument_list></call></expr></in></from>
                <select pos:line="287" pos:column="17">select <expr><name pos:line="287" pos:column="24">el</name></expr></select></linq></expr></init></decl>;</decl_stmt>
            <foreach pos:line="288" pos:column="13">foreach (<init><decl><type><name pos:line="288" pos:column="22">XElement</name></type> <name pos:line="288" pos:column="31">cons</name> <range pos:line="288" pos:column="36">in <expr><name pos:line="288" pos:column="39">constructors</name></expr></range></decl></init>)
            <block pos:line="289" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="290" pos:column="17">var</name></type> <name pos:line="290" pos:column="21">constructor</name> <init pos:line="290" pos:column="33">= <expr><call><name pos:line="290" pos:column="35">ParseCppFunction</name><argument_list pos:line="290" pos:column="51">(<argument><expr><name pos:line="290" pos:column="52">cons</name></expr></argument>, <argument><expr><name pos:line="290" pos:column="58">programElements</name></expr></argument>, <argument><expr><name pos:line="290" pos:column="75">fileName</name></expr></argument>, <argument><expr><name pos:line="290" pos:column="85">includedFiles</name></expr></argument>, <argument><expr><call><name pos:line="290" pos:column="100">typeof</name><argument_list pos:line="290" pos:column="106">(<argument><expr><name pos:line="290" pos:column="107">MethodElement</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="290" pos:column="123">typeof</name><argument_list pos:line="290" pos:column="129">(<argument><expr><name pos:line="290" pos:column="130">CppUnresolvedMethodElement</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="290" pos:column="159">true</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="291" pos:column="17">if<condition pos:line="291" pos:column="19">(<expr><name pos:line="291" pos:column="20">constructor</name><op:operator pos:line="291" pos:column="31">!=</op:operator><name pos:line="291" pos:column="33">null</name></expr>)</condition><then pos:line="291" pos:column="38">
                    <expr_stmt><expr><call><name><name pos:line="292" pos:column="21">programElements</name><op:operator pos:line="292" pos:column="36">.</op:operator><name pos:line="292" pos:column="37">Add</name></name><argument_list pos:line="292" pos:column="40">(<argument><expr><name pos:line="292" pos:column="41">constructor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></foreach>
        }</block></function>

        <function><type><specifier pos:line="296" pos:column="9">private</specifier> <name pos:line="296" pos:column="17">void</name></type> <name pos:line="296" pos:column="22">ParseFunctions</name><parameter_list pos:line="296" pos:column="36">(<param><decl><type><name><name pos:line="296" pos:column="37">List</name><argument_list pos:line="296" pos:column="41">&lt;<argument><name pos:line="296" pos:column="42">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="296" pos:column="58">programElements</name></decl></param>, <param><decl><type><name pos:line="296" pos:column="75">XElement</name></type> <name pos:line="296" pos:column="84">elements</name></decl></param>, <param><decl><type><name pos:line="296" pos:column="94">string</name></type> <name pos:line="296" pos:column="101">fileName</name></decl></param>)</parameter_list>
        <block pos:line="297" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="298" pos:column="13">string</name><index pos:line="298" pos:column="19">[]</index></type> <name pos:line="298" pos:column="22">includedFiles</name> <init pos:line="298" pos:column="36">= <expr><call><name pos:line="298" pos:column="38">ParseCppIncludes</name><argument_list pos:line="298" pos:column="54">(<argument><expr><name pos:line="298" pos:column="55">elements</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="299" pos:column="13">IEnumerable</name><argument_list pos:line="299" pos:column="24">&lt;<argument><name pos:line="299" pos:column="25">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="299" pos:column="35">functions</name> <init pos:line="299" pos:column="45">=
                <expr><linq><from pos:line="300" pos:column="17">from <expr><name pos:line="300" pos:column="22">el</name></expr> <in pos:line="300" pos:column="25">in <expr><call><name><name pos:line="300" pos:column="28">elements</name><op:operator pos:line="300" pos:column="36">.</op:operator><name pos:line="300" pos:column="37">Descendants</name></name><argument_list pos:line="300" pos:column="48">(<argument><expr><name><name pos:line="300" pos:column="49">SRC</name><op:operator pos:line="300" pos:column="52">.</op:operator><name pos:line="300" pos:column="53">Function</name></name></expr></argument>)</argument_list></call></expr></in></from>
                <select pos:line="301" pos:column="17">select <expr><name pos:line="301" pos:column="24">el</name></expr></select></linq></expr></init></decl>;</decl_stmt>
            <foreach pos:line="302" pos:column="13">foreach (<init><decl><type><name pos:line="302" pos:column="22">XElement</name></type> <name pos:line="302" pos:column="31">func</name> <range pos:line="302" pos:column="36">in <expr><name pos:line="302" pos:column="39">functions</name></expr></range></decl></init>)
            <block pos:line="303" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="304" pos:column="17">var</name></type> <name pos:line="304" pos:column="21">method</name> <init pos:line="304" pos:column="28">= <expr><call><name pos:line="304" pos:column="30">ParseCppFunction</name><argument_list pos:line="304" pos:column="46">(<argument><expr><name pos:line="304" pos:column="47">func</name></expr></argument>, <argument><expr><name pos:line="304" pos:column="53">programElements</name></expr></argument>, <argument><expr><name pos:line="304" pos:column="70">fileName</name></expr></argument>, <argument><expr><name pos:line="304" pos:column="80">includedFiles</name></expr></argument>, <argument><expr><call><name pos:line="304" pos:column="95">typeof</name><argument_list pos:line="304" pos:column="101">(<argument><expr><name pos:line="304" pos:column="102">MethodElement</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="304" pos:column="118">typeof</name><argument_list pos:line="304" pos:column="124">(<argument><expr><name pos:line="304" pos:column="125">CppUnresolvedMethodElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="305" pos:column="17">if<condition pos:line="305" pos:column="19">(<expr><name pos:line="305" pos:column="20">method</name><op:operator pos:line="305" pos:column="26">!=</op:operator><name pos:line="305" pos:column="28">null</name></expr>)</condition><then pos:line="305" pos:column="33">
                    <expr_stmt><expr><call><name><name pos:line="306" pos:column="21">programElements</name><op:operator pos:line="306" pos:column="36">.</op:operator><name pos:line="306" pos:column="37">Add</name></name><argument_list pos:line="306" pos:column="40">(<argument><expr><name pos:line="306" pos:column="41">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></foreach>
        }</block></function>

        <function><type><specifier pos:line="310" pos:column="9">public</specifier> <specifier pos:line="310" pos:column="16">virtual</specifier> <name pos:line="310" pos:column="24">MethodElement</name></type> <name pos:line="310" pos:column="38">ParseCppFunction</name><parameter_list pos:line="310" pos:column="54">(<param><decl><type><name pos:line="310" pos:column="55">XElement</name></type> <name pos:line="310" pos:column="64">function</name></decl></param>, <param><decl><type><name><name pos:line="310" pos:column="74">List</name><argument_list pos:line="310" pos:column="78">&lt;<argument><name pos:line="310" pos:column="79">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="310" pos:column="95">programElements</name></decl></param>, <param><decl><type><name pos:line="310" pos:column="112">string</name></type> <name pos:line="310" pos:column="119">fileName</name></decl></param>,
                                                <param><decl><type><name><name pos:line="311" pos:column="49">string</name><index pos:line="311" pos:column="55">[]</index></name></type> <name pos:line="311" pos:column="58">includedFiles</name></decl></param>, <param><decl><type><name pos:line="311" pos:column="73">Type</name></type> <name pos:line="311" pos:column="78">resolvedType</name></decl></param>, <param><decl><type><name pos:line="311" pos:column="92">Type</name></type> <name pos:line="311" pos:column="97">unresolvedType</name></decl></param>, <param><decl><type><name pos:line="311" pos:column="113">bool</name></type> <name pos:line="311" pos:column="118">isConstructor</name> <init pos:line="311" pos:column="132">= <expr><lit:literal type="boolean" pos:line="311" pos:column="134">false</lit:literal></expr></init></decl></param>)</parameter_list>
        <block pos:line="312" pos:column="9">{
            <try pos:line="313" pos:column="13">try
            <block pos:line="314" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="315" pos:column="17">MethodElement</name></type> <name pos:line="315" pos:column="31">methodElement</name> <init pos:line="315" pos:column="45">= <expr><name pos:line="315" pos:column="47">null</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="316" pos:column="17">string</name></type> <name pos:line="316" pos:column="24">source</name> <init pos:line="316" pos:column="31">= <expr><name><name pos:line="316" pos:column="33">String</name><op:operator pos:line="316" pos:column="39">.</op:operator><name pos:line="316" pos:column="40">Empty</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="317" pos:column="17">int</name></type> <name pos:line="317" pos:column="21">definitionLineNumber</name> <init pos:line="317" pos:column="42">= <expr><lit:literal type="number" pos:line="317" pos:column="44">0</lit:literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="318" pos:column="17">int</name></type> <name pos:line="318" pos:column="21">definitionColumnNumber</name> <init pos:line="318" pos:column="44">= <expr><lit:literal type="number" pos:line="318" pos:column="46">0</lit:literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="319" pos:column="17">string</name></type> <name pos:line="319" pos:column="24">returnType</name> <init pos:line="319" pos:column="35">= <expr><name><name pos:line="319" pos:column="37">String</name><op:operator pos:line="319" pos:column="43">.</op:operator><name pos:line="319" pos:column="44">Empty</name></name></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name pos:line="321" pos:column="17">XElement</name></type> <name pos:line="321" pos:column="26">type</name> <init pos:line="321" pos:column="31">= <expr><call><name><name pos:line="321" pos:column="33">function</name><op:operator pos:line="321" pos:column="41">.</op:operator><name pos:line="321" pos:column="42">Element</name></name><argument_list pos:line="321" pos:column="49">(<argument><expr><name><name pos:line="321" pos:column="50">SRC</name><op:operator pos:line="321" pos:column="53">.</op:operator><name pos:line="321" pos:column="54">Type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="322" pos:column="17">if <condition pos:line="322" pos:column="20">(<expr><name pos:line="322" pos:column="21">type</name> <op:operator pos:line="322" pos:column="26">!=</op:operator> <name pos:line="322" pos:column="29">null</name></expr>)</condition><then pos:line="322" pos:column="34">
                <block pos:line="323" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="324" pos:column="21">XElement</name></type> <name pos:line="324" pos:column="30">typeName</name> <init pos:line="324" pos:column="39">= <expr><call><name><name pos:line="324" pos:column="41">type</name><op:operator pos:line="324" pos:column="45">.</op:operator><name pos:line="324" pos:column="46">Element</name></name><argument_list pos:line="324" pos:column="53">(<argument><expr><name><name pos:line="324" pos:column="54">SRC</name><op:operator pos:line="324" pos:column="57">.</op:operator><name pos:line="324" pos:column="58">Name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name pos:line="325" pos:column="21">returnType</name> <op:operator pos:line="325" pos:column="32">=</op:operator> <name><name pos:line="325" pos:column="34">typeName</name><op:operator pos:line="325" pos:column="42">.</op:operator><name pos:line="325" pos:column="43">Value</name></name></expr>;</expr_stmt>
                }</block></then></if>

                <decl_stmt><decl><type><name pos:line="328" pos:column="17">XElement</name></type> <name pos:line="328" pos:column="26">paramlist</name> <init pos:line="328" pos:column="36">= <expr><call><name><name pos:line="328" pos:column="38">function</name><op:operator pos:line="328" pos:column="46">.</op:operator><name pos:line="328" pos:column="47">Element</name></name><argument_list pos:line="328" pos:column="54">(<argument><expr><name><name pos:line="328" pos:column="55">SRC</name><op:operator pos:line="328" pos:column="58">.</op:operator><name pos:line="328" pos:column="59">ParameterList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name pos:line="329" pos:column="17">IEnumerable</name><argument_list pos:line="329" pos:column="28">&lt;<argument><name pos:line="329" pos:column="29">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="329" pos:column="39">argumentElements</name> <init pos:line="329" pos:column="56">=
                    <expr><linq><from pos:line="330" pos:column="21">from <expr><name pos:line="330" pos:column="26">el</name></expr> <in pos:line="330" pos:column="29">in <expr><call><name><name pos:line="330" pos:column="32">paramlist</name><op:operator pos:line="330" pos:column="41">.</op:operator><name pos:line="330" pos:column="42">Descendants</name></name><argument_list pos:line="330" pos:column="53">(<argument><expr><name><name pos:line="330" pos:column="54">SRC</name><op:operator pos:line="330" pos:column="57">.</op:operator><name pos:line="330" pos:column="58">Name</name></name></expr></argument>)</argument_list></call></expr></in></from>
                    <select pos:line="331" pos:column="21">select <expr><name pos:line="331" pos:column="28">el</name></expr></select></linq></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="332" pos:column="17">string</name></type> <name pos:line="332" pos:column="24">arguments</name> <init pos:line="332" pos:column="34">= <expr><name><name pos:line="332" pos:column="36">String</name><op:operator pos:line="332" pos:column="42">.</op:operator><name pos:line="332" pos:column="43">Empty</name></name></expr></init></decl>;</decl_stmt>
                <foreach pos:line="333" pos:column="17">foreach (<init><decl><type><name pos:line="333" pos:column="26">XElement</name></type> <name pos:line="333" pos:column="35">elem</name> <range pos:line="333" pos:column="40">in <expr><name pos:line="333" pos:column="43">argumentElements</name></expr></range></decl></init>)
                <block pos:line="334" pos:column="17">{
                    <expr_stmt><expr><name pos:line="335" pos:column="21">arguments</name> <op:operator pos:line="335" pos:column="31">+=</op:operator> <name><name pos:line="335" pos:column="34">elem</name><op:operator pos:line="335" pos:column="38">.</op:operator><name pos:line="335" pos:column="39">Value</name></name> <op:operator pos:line="335" pos:column="45">+</op:operator> <lit:literal type="string" pos:line="335" pos:column="47">" "</lit:literal></expr>;</expr_stmt>
                }</block></foreach>
                <expr_stmt><expr><name pos:line="337" pos:column="17">arguments</name> <op:operator pos:line="337" pos:column="27">=</op:operator> <call><name><name pos:line="337" pos:column="29">arguments</name><op:operator pos:line="337" pos:column="38">.</op:operator><name pos:line="337" pos:column="39">TrimEnd</name></name><argument_list pos:line="337" pos:column="46">()</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name pos:line="339" pos:column="17">string</name></type> <name pos:line="339" pos:column="24">body</name> <init pos:line="339" pos:column="29">= <expr><call><name><name pos:line="339" pos:column="31">SrcMLParsingUtils</name><op:operator pos:line="339" pos:column="48">.</op:operator><name pos:line="339" pos:column="49">ParseBody</name></name><argument_list pos:line="339" pos:column="58">(<argument><expr><name pos:line="339" pos:column="59">function</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="340" pos:column="17">string</name></type> <name pos:line="340" pos:column="24">fullFilePath</name> <init pos:line="340" pos:column="37">= <expr><call><name><name pos:line="340" pos:column="39">System</name><op:operator pos:line="340" pos:column="45">.</op:operator><name pos:line="340" pos:column="46">IO</name><op:operator pos:line="340" pos:column="48">.</op:operator><name pos:line="340" pos:column="49">Path</name><op:operator pos:line="340" pos:column="53">.</op:operator><name pos:line="340" pos:column="54">GetFullPath</name></name><argument_list pos:line="340" pos:column="65">(<argument><expr><name pos:line="340" pos:column="66">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


                <decl_stmt><decl><type><name pos:line="343" pos:column="17">XElement</name></type> <name pos:line="343" pos:column="26">nameElement</name> <init pos:line="343" pos:column="38">= <expr><call><name><name pos:line="343" pos:column="40">function</name><op:operator pos:line="343" pos:column="48">.</op:operator><name pos:line="343" pos:column="49">Element</name></name><argument_list pos:line="343" pos:column="56">(<argument><expr><name><name pos:line="343" pos:column="57">SRC</name><op:operator pos:line="343" pos:column="60">.</op:operator><name pos:line="343" pos:column="61">Name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="344" pos:column="17">string</name></type> <name pos:line="344" pos:column="24">wholeName</name> <init pos:line="344" pos:column="34">= <expr><name><name pos:line="344" pos:column="36">nameElement</name><op:operator pos:line="344" pos:column="47">.</op:operator><name pos:line="344" pos:column="48">Value</name></name></expr></init></decl>;</decl_stmt>
                <if pos:line="345" pos:column="17">if <condition pos:line="345" pos:column="20">(<expr><call><name><name pos:line="345" pos:column="21">wholeName</name><op:operator pos:line="345" pos:column="30">.</op:operator><name pos:line="345" pos:column="31">Contains</name></name><argument_list pos:line="345" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="345" pos:column="40">"::"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="345" pos:column="46">
                <block pos:line="346" pos:column="17">{
                    <comment type="line" pos:line="347" pos:column="21">//class function</comment>
                    <decl_stmt><decl><type><name pos:line="348" pos:column="21">string</name><index pos:line="348" pos:column="27">[]</index></type> <name pos:line="348" pos:column="30">twonames</name> <init pos:line="348" pos:column="39">= <expr><call><name><name pos:line="348" pos:column="41">wholeName</name><op:operator pos:line="348" pos:column="50">.</op:operator><name pos:line="348" pos:column="51">Split</name></name><argument_list pos:line="348" pos:column="56">(<argument><expr><lit:literal type="string" pos:line="348" pos:column="57">"::"</lit:literal><op:operator pos:line="348" pos:column="61">.</op:operator><call><name pos:line="348" pos:column="62">ToCharArray</name><argument_list pos:line="348" pos:column="73">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="349" pos:column="21">string</name></type> <name pos:line="349" pos:column="28">funcName</name> <init pos:line="349" pos:column="37">= <expr><name><name pos:line="349" pos:column="39">twonames</name><index pos:line="349" pos:column="47">[<expr><lit:literal type="number" pos:line="349" pos:column="48">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="350" pos:column="21">string</name></type> <name pos:line="350" pos:column="28">className</name> <init pos:line="350" pos:column="38">= <expr><name><name pos:line="350" pos:column="40">twonames</name><index pos:line="350" pos:column="48">[<expr><lit:literal type="number" pos:line="350" pos:column="49">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name pos:line="351" pos:column="21">definitionLineNumber</name> <op:operator pos:line="351" pos:column="42">=</op:operator> <call><name><name pos:line="351" pos:column="44">Int32</name><op:operator pos:line="351" pos:column="49">.</op:operator><name pos:line="351" pos:column="50">Parse</name></name><argument_list pos:line="351" pos:column="55">(<argument><expr><call><name><name pos:line="351" pos:column="56">nameElement</name><op:operator pos:line="351" pos:column="67">.</op:operator><name pos:line="351" pos:column="68">Element</name></name><argument_list pos:line="351" pos:column="75">(<argument><expr><name><name pos:line="351" pos:column="76">SRC</name><op:operator pos:line="351" pos:column="79">.</op:operator><name pos:line="351" pos:column="80">Name</name></name></expr></argument>)</argument_list></call><op:operator pos:line="351" pos:column="85">.</op:operator><call><name pos:line="351" pos:column="86">Attribute</name><argument_list pos:line="351" pos:column="95">(<argument><expr><name><name pos:line="351" pos:column="96">POS</name><op:operator pos:line="351" pos:column="99">.</op:operator><name pos:line="351" pos:column="100">Line</name></name></expr></argument>)</argument_list></call><op:operator pos:line="351" pos:column="105">.</op:operator><name pos:line="351" pos:column="106">Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="352" pos:column="21">definitionColumnNumber</name> <op:operator pos:line="352" pos:column="44">=</op:operator> <call><name><name pos:line="352" pos:column="46">Int32</name><op:operator pos:line="352" pos:column="51">.</op:operator><name pos:line="352" pos:column="52">Parse</name></name><argument_list pos:line="352" pos:column="57">(<argument><expr><call><name><name pos:line="352" pos:column="58">nameElement</name><op:operator pos:line="352" pos:column="69">.</op:operator><name pos:line="352" pos:column="70">Element</name></name><argument_list pos:line="352" pos:column="77">(<argument><expr><name><name pos:line="352" pos:column="78">SRC</name><op:operator pos:line="352" pos:column="81">.</op:operator><name pos:line="352" pos:column="82">Name</name></name></expr></argument>)</argument_list></call><op:operator pos:line="352" pos:column="87">.</op:operator><call><name pos:line="352" pos:column="88">Attribute</name><argument_list pos:line="352" pos:column="97">(<argument><expr><name><name pos:line="352" pos:column="98">POS</name><op:operator pos:line="352" pos:column="101">.</op:operator><name pos:line="352" pos:column="102">Column</name></name></expr></argument>)</argument_list></call><op:operator pos:line="352" pos:column="109">.</op:operator><name pos:line="352" pos:column="110">Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="353" pos:column="21">source</name> <op:operator pos:line="353" pos:column="28">=</op:operator> <call><name><name pos:line="353" pos:column="30">SrcMLParsingUtils</name><op:operator pos:line="353" pos:column="47">.</op:operator><name pos:line="353" pos:column="48">RetrieveSource</name></name><argument_list pos:line="353" pos:column="62">(<argument><expr><name pos:line="353" pos:column="63">function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:line="355" pos:column="21">return <expr><call><name><name pos:line="355" pos:column="28">Activator</name><op:operator pos:line="355" pos:column="37">.</op:operator><name pos:line="355" pos:column="38">CreateInstance</name></name><argument_list pos:line="355" pos:column="52">(<argument><expr><name pos:line="355" pos:column="53">unresolvedType</name></expr></argument>, <argument><expr><name pos:line="355" pos:column="69">funcName</name></expr></argument>, <argument><expr><name pos:line="355" pos:column="79">definitionLineNumber</name></expr></argument>, <argument><expr><name pos:line="355" pos:column="101">definitionColumnNumber</name></expr></argument>, <argument><expr><name pos:line="355" pos:column="125">fullFilePath</name></expr></argument>, <argument><expr><name pos:line="355" pos:column="139">source</name></expr></argument>, <argument><expr><name pos:line="355" pos:column="147">arguments</name></expr></argument>, <argument><expr><name pos:line="355" pos:column="158">returnType</name></expr></argument>, <argument><expr><name pos:line="355" pos:column="170">body</name></expr></argument>,
                                                            <argument><expr><name pos:line="356" pos:column="61">className</name></expr></argument>, <argument><expr><name pos:line="356" pos:column="72">isConstructor</name></expr></argument>, <argument><expr><name pos:line="356" pos:column="87">includedFiles</name></expr></argument>)</argument_list></call> <op:operator pos:line="356" pos:column="102">as</op:operator> <name pos:line="356" pos:column="105">MethodElement</name></expr>;</return>
                }</block></then>
                <else pos:line="358" pos:column="17">else
                <block pos:line="359" pos:column="17">{
                    <comment type="line" pos:line="360" pos:column="21">//regular C-type function, or an inlined class function</comment>
                    <decl_stmt><decl><type><name pos:line="361" pos:column="21">string</name></type> <name pos:line="361" pos:column="28">funcName</name> <init pos:line="361" pos:column="37">= <expr><name pos:line="361" pos:column="39">wholeName</name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name pos:line="362" pos:column="21">definitionLineNumber</name> <op:operator pos:line="362" pos:column="42">=</op:operator> <call><name><name pos:line="362" pos:column="44">Int32</name><op:operator pos:line="362" pos:column="49">.</op:operator><name pos:line="362" pos:column="50">Parse</name></name><argument_list pos:line="362" pos:column="55">(<argument><expr><call><name><name pos:line="362" pos:column="56">nameElement</name><op:operator pos:line="362" pos:column="67">.</op:operator><name pos:line="362" pos:column="68">Attribute</name></name><argument_list pos:line="362" pos:column="77">(<argument><expr><name><name pos:line="362" pos:column="78">POS</name><op:operator pos:line="362" pos:column="81">.</op:operator><name pos:line="362" pos:column="82">Line</name></name></expr></argument>)</argument_list></call><op:operator pos:line="362" pos:column="87">.</op:operator><name pos:line="362" pos:column="88">Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="363" pos:column="21">definitionColumnNumber</name> <op:operator pos:line="363" pos:column="44">=</op:operator> <call><name><name pos:line="363" pos:column="46">Int32</name><op:operator pos:line="363" pos:column="51">.</op:operator><name pos:line="363" pos:column="52">Parse</name></name><argument_list pos:line="363" pos:column="57">(<argument><expr><call><name><name pos:line="363" pos:column="58">nameElement</name><op:operator pos:line="363" pos:column="69">.</op:operator><name pos:line="363" pos:column="70">Attribute</name></name><argument_list pos:line="363" pos:column="79">(<argument><expr><name><name pos:line="363" pos:column="80">POS</name><op:operator pos:line="363" pos:column="83">.</op:operator><name pos:line="363" pos:column="84">Column</name></name></expr></argument>)</argument_list></call><op:operator pos:line="363" pos:column="91">.</op:operator><name pos:line="363" pos:column="92">Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="364" pos:column="21">source</name> <op:operator pos:line="364" pos:column="28">=</op:operator> <call><name><name pos:line="364" pos:column="30">SrcMLParsingUtils</name><op:operator pos:line="364" pos:column="47">.</op:operator><name pos:line="364" pos:column="48">RetrieveSource</name></name><argument_list pos:line="364" pos:column="62">(<argument><expr><name pos:line="364" pos:column="63">function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name pos:line="365" pos:column="21">AccessLevel</name></type> <name pos:line="365" pos:column="33">accessLevel</name> <init pos:line="365" pos:column="45">= <expr><call><name pos:line="365" pos:column="47">RetrieveCppAccessLevel</name><argument_list pos:line="365" pos:column="69">(<argument><expr><name pos:line="365" pos:column="70">function</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt><decl><type><name pos:line="367" pos:column="21">Guid</name></type> <name pos:line="367" pos:column="26">classId</name> <init pos:line="367" pos:column="34">= <expr><name><name pos:line="367" pos:column="36">Guid</name><op:operator pos:line="367" pos:column="40">.</op:operator><name pos:line="367" pos:column="41">Empty</name></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="368" pos:column="21">string</name></type> <name pos:line="368" pos:column="28">className</name> <init pos:line="368" pos:column="38">= <expr><name><name pos:line="368" pos:column="40">String</name><op:operator pos:line="368" pos:column="46">.</op:operator><name pos:line="368" pos:column="47">Empty</name></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="369" pos:column="21">ClassElement</name></type> <name pos:line="369" pos:column="34">classElement</name> <init pos:line="369" pos:column="47">= <expr><call><name><name pos:line="369" pos:column="49">SrcMLParsingUtils</name><op:operator pos:line="369" pos:column="66">.</op:operator><name pos:line="369" pos:column="67">RetrieveClassElement</name></name><argument_list pos:line="369" pos:column="87">(<argument><expr><name pos:line="369" pos:column="88">function</name></expr></argument>, <argument><expr><name pos:line="369" pos:column="98">programElements</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="370" pos:column="21">StructElement</name></type> <name pos:line="370" pos:column="35">structElement</name> <init pos:line="370" pos:column="49">= <expr><call><name pos:line="370" pos:column="51">RetrieveStructElement</name><argument_list pos:line="370" pos:column="72">(<argument><expr><name pos:line="370" pos:column="73">function</name></expr></argument>, <argument><expr><name pos:line="370" pos:column="83">programElements</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if pos:line="371" pos:column="21">if <condition pos:line="371" pos:column="24">(<expr><name pos:line="371" pos:column="25">classElement</name> <op:operator pos:line="371" pos:column="38">!=</op:operator> <name pos:line="371" pos:column="41">null</name></expr>)</condition><then pos:line="371" pos:column="46">
                    <block pos:line="372" pos:column="21">{
                        <expr_stmt><expr><name pos:line="373" pos:column="25">classId</name> <op:operator pos:line="373" pos:column="33">=</op:operator> <name><name pos:line="373" pos:column="35">classElement</name><op:operator pos:line="373" pos:column="47">.</op:operator><name pos:line="373" pos:column="48">Id</name></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="374" pos:column="25">className</name> <op:operator pos:line="374" pos:column="35">=</op:operator> <name><name pos:line="374" pos:column="37">classElement</name><op:operator pos:line="374" pos:column="49">.</op:operator><name pos:line="374" pos:column="50">Name</name></name></expr>;</expr_stmt>
                    }</block></then>
                    <else pos:line="376" pos:column="21">else <if pos:line="376" pos:column="26">if <condition pos:line="376" pos:column="29">(<expr><name pos:line="376" pos:column="30">structElement</name> <op:operator pos:line="376" pos:column="44">!=</op:operator> <name pos:line="376" pos:column="47">null</name></expr>)</condition><then pos:line="376" pos:column="52">
                    <block pos:line="377" pos:column="21">{
                        <expr_stmt><expr><name pos:line="378" pos:column="25">classId</name> <op:operator pos:line="378" pos:column="33">=</op:operator> <name><name pos:line="378" pos:column="35">structElement</name><op:operator pos:line="378" pos:column="48">.</op:operator><name pos:line="378" pos:column="49">Id</name></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="379" pos:column="25">className</name> <op:operator pos:line="379" pos:column="35">=</op:operator> <name><name pos:line="379" pos:column="37">structElement</name><op:operator pos:line="379" pos:column="50">.</op:operator><name pos:line="379" pos:column="51">Name</name></name></expr>;</expr_stmt>
                    }</block></then></if></else></if>
                    <expr_stmt><expr><name pos:line="381" pos:column="21">methodElement</name> <op:operator pos:line="381" pos:column="35">=</op:operator> <call><name><name pos:line="381" pos:column="37">Activator</name><op:operator pos:line="381" pos:column="46">.</op:operator><name pos:line="381" pos:column="47">CreateInstance</name></name><argument_list pos:line="381" pos:column="61">(<argument><expr><name pos:line="381" pos:column="62">resolvedType</name></expr></argument>, <argument><expr><name pos:line="381" pos:column="76">funcName</name></expr></argument>, <argument><expr><name pos:line="381" pos:column="86">definitionLineNumber</name></expr></argument>, <argument><expr><name pos:line="381" pos:column="108">definitionColumnNumber</name></expr></argument>, <argument><expr><name pos:line="381" pos:column="132">fullFilePath</name></expr></argument>, <argument><expr><name pos:line="381" pos:column="146">source</name></expr></argument>, <argument><expr><name pos:line="381" pos:column="154">accessLevel</name></expr></argument>, <argument><expr><name pos:line="381" pos:column="167">arguments</name></expr></argument>,
                                             <argument><expr><name pos:line="382" pos:column="46">returnType</name></expr></argument>, <argument><expr><name pos:line="382" pos:column="58">body</name></expr></argument>,
                                             <argument><expr><name pos:line="383" pos:column="46">classId</name></expr></argument>, <argument><expr><name pos:line="383" pos:column="55">className</name></expr></argument>, <argument><expr><name><name pos:line="383" pos:column="66">String</name><op:operator pos:line="383" pos:column="72">.</op:operator><name pos:line="383" pos:column="73">Empty</name></name></expr></argument>, <argument><expr><name pos:line="383" pos:column="80">isConstructor</name></expr></argument>)</argument_list></call> <op:operator pos:line="383" pos:column="95">as</op:operator> <name pos:line="383" pos:column="98">MethodElement</name></expr>;</expr_stmt>
                }</block></else></if>

                <return pos:line="386" pos:column="17">return <expr><name pos:line="386" pos:column="24">methodElement</name></expr>;</return>
            }</block>
            <catch pos:line="388" pos:column="13">catch <parameter_list pos:line="388" pos:column="19">(<param><decl><type><name pos:line="388" pos:column="20">Exception</name></type> <name pos:line="388" pos:column="30">error</name></decl></param>)</parameter_list>
            <block pos:line="389" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="390" pos:column="17">FileLogger</name><op:operator pos:line="390" pos:column="27">.</op:operator><name pos:line="390" pos:column="28">DefaultLogger</name><op:operator pos:line="390" pos:column="41">.</op:operator><name pos:line="390" pos:column="42">Info</name></name><argument_list pos:line="390" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="390" pos:column="47">"Exception in SrcMLCppParser "</lit:literal> <op:operator pos:line="390" pos:column="78">+</op:operator> <name><name pos:line="390" pos:column="80">error</name><op:operator pos:line="390" pos:column="85">.</op:operator><name pos:line="390" pos:column="86">Message</name></name> <op:operator pos:line="390" pos:column="94">+</op:operator> <lit:literal type="string" pos:line="390" pos:column="96">"\n"</lit:literal> <op:operator pos:line="390" pos:column="101">+</op:operator> <name><name pos:line="390" pos:column="103">error</name><op:operator pos:line="390" pos:column="108">.</op:operator><name pos:line="390" pos:column="109">StackTrace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="391" pos:column="17">return <expr><name pos:line="391" pos:column="24">null</name></expr>;</return>
            }</block></catch></try>
        }</block></function>

        <function><type><specifier pos:line="395" pos:column="9">public</specifier> <specifier pos:line="395" pos:column="16">static</specifier> <name pos:line="395" pos:column="23">void</name></type> <name pos:line="395" pos:column="28">ParseCppEnums</name><parameter_list pos:line="395" pos:column="41">(<param><decl><type><name><name pos:line="395" pos:column="42">List</name><argument_list pos:line="395" pos:column="46">&lt;<argument><name pos:line="395" pos:column="47">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="395" pos:column="63">programElements</name></decl></param>, <param><decl><type><name pos:line="395" pos:column="80">XElement</name></type> <name pos:line="395" pos:column="89">elements</name></decl></param>, <param><decl><type><name pos:line="395" pos:column="99">string</name></type> <name pos:line="395" pos:column="106">fileName</name></decl></param>)</parameter_list>
        <block pos:line="396" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="397" pos:column="13">IEnumerable</name><argument_list pos:line="397" pos:column="24">&lt;<argument><name pos:line="397" pos:column="25">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="397" pos:column="35">enums</name> <init pos:line="397" pos:column="41">=
                <expr><linq><from pos:line="398" pos:column="17">from <expr><name pos:line="398" pos:column="22">el</name></expr> <in pos:line="398" pos:column="25">in <expr><call><name><name pos:line="398" pos:column="28">elements</name><op:operator pos:line="398" pos:column="36">.</op:operator><name pos:line="398" pos:column="37">Descendants</name></name><argument_list pos:line="398" pos:column="48">(<argument><expr><name><name pos:line="398" pos:column="49">SRC</name><op:operator pos:line="398" pos:column="52">.</op:operator><name pos:line="398" pos:column="53">Enum</name></name></expr></argument>)</argument_list></call></expr></in></from>
                <select pos:line="399" pos:column="17">select <expr><name pos:line="399" pos:column="24">el</name></expr></select></linq></expr></init></decl>;</decl_stmt>

            <foreach pos:line="401" pos:column="13">foreach (<init><decl><type><name pos:line="401" pos:column="22">XElement</name></type> <name pos:line="401" pos:column="31">enm</name> <range pos:line="401" pos:column="35">in <expr><name pos:line="401" pos:column="38">enums</name></expr></range></decl></init>)
            <block pos:line="402" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="403" pos:column="17">var</name></type> <name pos:line="403" pos:column="21">enumParsed</name> <init pos:line="403" pos:column="32">= <expr><call><name pos:line="403" pos:column="34">ParseEnum</name><argument_list pos:line="403" pos:column="43">(<argument><expr><name pos:line="403" pos:column="44">fileName</name></expr></argument>, <argument><expr><name pos:line="403" pos:column="54">enm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="404" pos:column="17">if<condition pos:line="404" pos:column="19">(<expr><name pos:line="404" pos:column="20">enumParsed</name><op:operator pos:line="404" pos:column="30">!=</op:operator><name pos:line="404" pos:column="32">null</name></expr>)</condition><then pos:line="404" pos:column="37">
                    <expr_stmt><expr><call><name><name pos:line="405" pos:column="21">programElements</name><op:operator pos:line="405" pos:column="36">.</op:operator><name pos:line="405" pos:column="37">Add</name></name><argument_list pos:line="405" pos:column="40">(<argument><expr><name pos:line="405" pos:column="41">enumParsed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></foreach>
        }</block></function>

        <function><type><specifier pos:line="409" pos:column="9">private</specifier> <specifier pos:line="409" pos:column="17">static</specifier> <name pos:line="409" pos:column="24">EnumElement</name></type> <name pos:line="409" pos:column="36">ParseEnum</name><parameter_list pos:line="409" pos:column="45">(<param><decl><type><name pos:line="409" pos:column="46">string</name></type> <name pos:line="409" pos:column="53">fileName</name></decl></param>, <param><decl><type><name pos:line="409" pos:column="63">XElement</name></type> <name pos:line="409" pos:column="72">enm</name></decl></param>)</parameter_list>
        <block pos:line="410" pos:column="9">{
            <try pos:line="411" pos:column="13">try
            <block pos:line="412" pos:column="13">{
                <comment type="line" pos:line="413" pos:column="17">//SrcML doesn't seem to parse access level specifiers for enums, so just pretend they are all public for now</comment>
                <decl_stmt><decl><type><name pos:line="414" pos:column="17">AccessLevel</name></type> <name pos:line="414" pos:column="29">accessLevel</name> <init pos:line="414" pos:column="41">= <expr><name><name pos:line="414" pos:column="43">AccessLevel</name><op:operator pos:line="414" pos:column="54">.</op:operator><name pos:line="414" pos:column="55">Public</name></name></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name pos:line="416" pos:column="17">string</name></type> <name pos:line="416" pos:column="24">name</name> <init pos:line="416" pos:column="29">= <expr><lit:literal type="string" pos:line="416" pos:column="31">""</lit:literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="417" pos:column="17">int</name></type> <name pos:line="417" pos:column="21">definitionLineNumber</name> <init pos:line="417" pos:column="42">= <expr><lit:literal type="number" pos:line="417" pos:column="44">0</lit:literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="418" pos:column="17">int</name></type> <name pos:line="418" pos:column="21">definitionColumnNumber</name><init pos:line="418" pos:column="43">=<expr><lit:literal type="number" pos:line="418" pos:column="44">0</lit:literal></expr></init></decl>;</decl_stmt>
                <if pos:line="419" pos:column="17">if <condition pos:line="419" pos:column="20">(<expr><call><name><name pos:line="419" pos:column="21">enm</name><op:operator pos:line="419" pos:column="24">.</op:operator><name pos:line="419" pos:column="25">Element</name></name><argument_list pos:line="419" pos:column="32">(<argument><expr><name><name pos:line="419" pos:column="33">SRC</name><op:operator pos:line="419" pos:column="36">.</op:operator><name pos:line="419" pos:column="37">Name</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="419" pos:column="43">!=</op:operator> <name pos:line="419" pos:column="46">null</name></expr>)</condition><then pos:line="419" pos:column="51">
                <block pos:line="420" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="421" pos:column="21">SrcMLParsingUtils</name><op:operator pos:line="421" pos:column="38">.</op:operator><name pos:line="421" pos:column="39">ParseNameAndLineNumber</name></name><argument_list pos:line="421" pos:column="61">(<argument><expr><name pos:line="421" pos:column="62">enm</name></expr></argument>, <argument><expr pos:line="421" pos:column="67">out <name pos:line="421" pos:column="71">name</name></expr></argument>, <argument><expr pos:line="421" pos:column="77">out <name pos:line="421" pos:column="81">definitionLineNumber</name></expr></argument>, <argument><expr pos:line="421" pos:column="103">out <name pos:line="421" pos:column="107">definitionColumnNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="423" pos:column="17">else
                <block pos:line="424" pos:column="17">{
                    <comment type="line" pos:line="425" pos:column="21">//enums in C++ aren't required to have a name</comment>
                    <expr_stmt><expr><name pos:line="426" pos:column="21">name</name> <op:operator pos:line="426" pos:column="26">=</op:operator> <name><name pos:line="426" pos:column="28">ProgramElement</name><op:operator pos:line="426" pos:column="42">.</op:operator><name pos:line="426" pos:column="43">UndefinedName</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="427" pos:column="21">definitionLineNumber</name> <op:operator pos:line="427" pos:column="42">=</op:operator> <call><name><name pos:line="427" pos:column="44">Int32</name><op:operator pos:line="427" pos:column="49">.</op:operator><name pos:line="427" pos:column="50">Parse</name></name><argument_list pos:line="427" pos:column="55">(<argument><expr><call><name><name pos:line="427" pos:column="56">enm</name><op:operator pos:line="427" pos:column="59">.</op:operator><name pos:line="427" pos:column="60">Attribute</name></name><argument_list pos:line="427" pos:column="69">(<argument><expr><name><name pos:line="427" pos:column="70">POS</name><op:operator pos:line="427" pos:column="73">.</op:operator><name pos:line="427" pos:column="74">Line</name></name></expr></argument>)</argument_list></call><op:operator pos:line="427" pos:column="79">.</op:operator><name pos:line="427" pos:column="80">Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>

                <comment type="line" pos:line="430" pos:column="17">//parse namespace</comment>
                <decl_stmt><decl><type><name><name pos:line="431" pos:column="17">IEnumerable</name><argument_list pos:line="431" pos:column="28">&lt;<argument><name pos:line="431" pos:column="29">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="431" pos:column="39">ownerNamespaces</name> <init pos:line="431" pos:column="55">=
                    <expr><linq><from pos:line="432" pos:column="21">from <expr><name pos:line="432" pos:column="26">el</name></expr> <in pos:line="432" pos:column="29">in <expr><call><name><name pos:line="432" pos:column="32">enm</name><op:operator pos:line="432" pos:column="35">.</op:operator><name pos:line="432" pos:column="36">Ancestors</name></name><argument_list pos:line="432" pos:column="45">(<argument><expr><name><name pos:line="432" pos:column="46">SRC</name><op:operator pos:line="432" pos:column="49">.</op:operator><name pos:line="432" pos:column="50">Declaration</name></name></expr></argument>)</argument_list></call></expr></in></from>
                    <where pos:line="433" pos:column="21">where <expr><call><name><name pos:line="433" pos:column="27">el</name><op:operator pos:line="433" pos:column="29">.</op:operator><name pos:line="433" pos:column="30">Element</name></name><argument_list pos:line="433" pos:column="37">(<argument><expr><name><name pos:line="433" pos:column="38">SRC</name><op:operator pos:line="433" pos:column="41">.</op:operator><name pos:line="433" pos:column="42">Type</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="433" pos:column="48">!=</op:operator> <name pos:line="433" pos:column="51">null</name> <op:operator pos:line="433" pos:column="56">&amp;&amp;</op:operator>
                            <call><name><name pos:line="434" pos:column="29">el</name><op:operator pos:line="434" pos:column="31">.</op:operator><name pos:line="434" pos:column="32">Element</name></name><argument_list pos:line="434" pos:column="39">(<argument><expr><name><name pos:line="434" pos:column="40">SRC</name><op:operator pos:line="434" pos:column="43">.</op:operator><name pos:line="434" pos:column="44">Type</name></name></expr></argument>)</argument_list></call><op:operator pos:line="434" pos:column="49">.</op:operator><call><name pos:line="434" pos:column="50">Element</name><argument_list pos:line="434" pos:column="57">(<argument><expr><name><name pos:line="434" pos:column="58">SRC</name><op:operator pos:line="434" pos:column="61">.</op:operator><name pos:line="434" pos:column="62">Name</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="434" pos:column="68">!=</op:operator> <name pos:line="434" pos:column="71">null</name> <op:operator pos:line="434" pos:column="76">&amp;&amp;</op:operator>
                            <call><name><name pos:line="435" pos:column="29">el</name><op:operator pos:line="435" pos:column="31">.</op:operator><name pos:line="435" pos:column="32">Element</name></name><argument_list pos:line="435" pos:column="39">(<argument><expr><name><name pos:line="435" pos:column="40">SRC</name><op:operator pos:line="435" pos:column="43">.</op:operator><name pos:line="435" pos:column="44">Type</name></name></expr></argument>)</argument_list></call><op:operator pos:line="435" pos:column="49">.</op:operator><call><name pos:line="435" pos:column="50">Element</name><argument_list pos:line="435" pos:column="57">(<argument><expr><name><name pos:line="435" pos:column="58">SRC</name><op:operator pos:line="435" pos:column="61">.</op:operator><name pos:line="435" pos:column="62">Name</name></name></expr></argument>)</argument_list></call><op:operator pos:line="435" pos:column="67">.</op:operator><name pos:line="435" pos:column="68">Value</name> <op:operator pos:line="435" pos:column="74">==</op:operator> <lit:literal type="string" pos:line="435" pos:column="77">"namespace"</lit:literal></expr></where>
                    <select pos:line="436" pos:column="21">select <expr><name pos:line="436" pos:column="28">el</name></expr></select></linq></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="437" pos:column="17">string</name></type> <name pos:line="437" pos:column="24">namespaceName</name> <init pos:line="437" pos:column="38">= <expr><name><name pos:line="437" pos:column="40">String</name><op:operator pos:line="437" pos:column="46">.</op:operator><name pos:line="437" pos:column="47">Empty</name></name></expr></init></decl>;</decl_stmt>
                <foreach pos:line="438" pos:column="17">foreach (<init><decl><type><name pos:line="438" pos:column="26">XElement</name></type> <name pos:line="438" pos:column="35">ownerNamespace</name> <range pos:line="438" pos:column="50">in <expr><name pos:line="438" pos:column="53">ownerNamespaces</name></expr></range></decl></init>)
                <block pos:line="439" pos:column="17">{
                    <foreach pos:line="440" pos:column="21">foreach (<init><decl><type><name pos:line="440" pos:column="30">XElement</name></type> <name pos:line="440" pos:column="39">spc</name> <range pos:line="440" pos:column="43">in <expr><call><name><name pos:line="440" pos:column="46">ownerNamespace</name><op:operator pos:line="440" pos:column="60">.</op:operator><name pos:line="440" pos:column="61">Elements</name></name><argument_list pos:line="440" pos:column="69">(<argument><expr><name><name pos:line="440" pos:column="70">SRC</name><op:operator pos:line="440" pos:column="73">.</op:operator><name pos:line="440" pos:column="74">Name</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)
                    <block pos:line="441" pos:column="21">{
                        <expr_stmt><expr><name pos:line="442" pos:column="25">namespaceName</name> <op:operator pos:line="442" pos:column="39">+=</op:operator> <name><name pos:line="442" pos:column="42">spc</name><op:operator pos:line="442" pos:column="45">.</op:operator><name pos:line="442" pos:column="46">Value</name></name> <op:operator pos:line="442" pos:column="52">+</op:operator> <lit:literal type="string" pos:line="442" pos:column="54">" "</lit:literal></expr>;</expr_stmt>
                    }</block></foreach>
                }</block></foreach>
                <expr_stmt><expr><name pos:line="445" pos:column="17">namespaceName</name> <op:operator pos:line="445" pos:column="31">=</op:operator> <call><name><name pos:line="445" pos:column="33">namespaceName</name><op:operator pos:line="445" pos:column="46">.</op:operator><name pos:line="445" pos:column="47">TrimEnd</name></name><argument_list pos:line="445" pos:column="54">()</argument_list></call></expr>;</expr_stmt>


                <comment type="line" pos:line="448" pos:column="17">//parse values</comment>
                <decl_stmt><decl><type><name pos:line="449" pos:column="17">XElement</name></type> <name pos:line="449" pos:column="26">block</name> <init pos:line="449" pos:column="32">= <expr><call><name><name pos:line="449" pos:column="34">enm</name><op:operator pos:line="449" pos:column="37">.</op:operator><name pos:line="449" pos:column="38">Element</name></name><argument_list pos:line="449" pos:column="45">(<argument><expr><name><name pos:line="449" pos:column="46">SRC</name><op:operator pos:line="449" pos:column="49">.</op:operator><name pos:line="449" pos:column="50">Block</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="450" pos:column="17">string</name></type> <name pos:line="450" pos:column="24">values</name> <init pos:line="450" pos:column="31">= <expr><name><name pos:line="450" pos:column="33">String</name><op:operator pos:line="450" pos:column="39">.</op:operator><name pos:line="450" pos:column="40">Empty</name></name></expr></init></decl>;</decl_stmt>
                <if pos:line="451" pos:column="17">if <condition pos:line="451" pos:column="20">(<expr><name pos:line="451" pos:column="21">block</name> <op:operator pos:line="451" pos:column="27">!=</op:operator> <name pos:line="451" pos:column="30">null</name></expr>)</condition><then pos:line="451" pos:column="35">
                <block pos:line="452" pos:column="17">{
                    <decl_stmt><decl><type><name><name pos:line="453" pos:column="21">IEnumerable</name><argument_list pos:line="453" pos:column="32">&lt;<argument><name pos:line="453" pos:column="33">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="453" pos:column="43">exprs</name> <init pos:line="453" pos:column="49">=
                        <expr><linq><from pos:line="454" pos:column="25">from <expr><name pos:line="454" pos:column="30">el</name></expr> <in pos:line="454" pos:column="33">in <expr><call><name><name pos:line="454" pos:column="36">block</name><op:operator pos:line="454" pos:column="41">.</op:operator><name pos:line="454" pos:column="42">Descendants</name></name><argument_list pos:line="454" pos:column="53">(<argument><expr><name><name pos:line="454" pos:column="54">SRC</name><op:operator pos:line="454" pos:column="57">.</op:operator><name pos:line="454" pos:column="58">Expression</name></name></expr></argument>)</argument_list></call></expr></in></from>
                        <select pos:line="455" pos:column="25">select <expr><name pos:line="455" pos:column="32">el</name></expr></select></linq></expr></init></decl>;</decl_stmt>
                    <foreach pos:line="456" pos:column="21">foreach (<init><decl><type><name pos:line="456" pos:column="30">XElement</name></type> <name pos:line="456" pos:column="39">expr</name> <range pos:line="456" pos:column="44">in <expr><name pos:line="456" pos:column="47">exprs</name></expr></range></decl></init>)
                    <block pos:line="457" pos:column="21">{
                        <decl_stmt><decl><type><name><name pos:line="458" pos:column="25">IEnumerable</name><argument_list pos:line="458" pos:column="36">&lt;<argument><name pos:line="458" pos:column="37">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="458" pos:column="47">enames</name> <init pos:line="458" pos:column="54">= <expr><call><name><name pos:line="458" pos:column="56">expr</name><op:operator pos:line="458" pos:column="60">.</op:operator><name pos:line="458" pos:column="61">Elements</name></name><argument_list pos:line="458" pos:column="69">(<argument><expr><name><name pos:line="458" pos:column="70">SRC</name><op:operator pos:line="458" pos:column="73">.</op:operator><name pos:line="458" pos:column="74">Name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <foreach pos:line="459" pos:column="25">foreach (<init><decl><type><name pos:line="459" pos:column="34">XElement</name></type> <name pos:line="459" pos:column="43">ename</name> <range pos:line="459" pos:column="49">in <expr><name pos:line="459" pos:column="52">enames</name></expr></range></decl></init>)
                        <block pos:line="460" pos:column="25">{
                            <expr_stmt><expr><name pos:line="461" pos:column="29">values</name> <op:operator pos:line="461" pos:column="36">+=</op:operator> <name><name pos:line="461" pos:column="39">ename</name><op:operator pos:line="461" pos:column="44">.</op:operator><name pos:line="461" pos:column="45">Value</name></name> <op:operator pos:line="461" pos:column="51">+</op:operator> <lit:literal type="string" pos:line="461" pos:column="53">" "</lit:literal></expr>;</expr_stmt>
                        }</block></foreach>
                    }</block></foreach>
                    <expr_stmt><expr><name pos:line="464" pos:column="21">values</name> <op:operator pos:line="464" pos:column="28">=</op:operator> <call><name><name pos:line="464" pos:column="30">values</name><op:operator pos:line="464" pos:column="36">.</op:operator><name pos:line="464" pos:column="37">TrimEnd</name></name><argument_list pos:line="464" pos:column="44">()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <decl_stmt><decl><type><name pos:line="467" pos:column="17">string</name></type> <name pos:line="467" pos:column="24">fullFilePath</name> <init pos:line="467" pos:column="37">= <expr><call><name><name pos:line="467" pos:column="39">System</name><op:operator pos:line="467" pos:column="45">.</op:operator><name pos:line="467" pos:column="46">IO</name><op:operator pos:line="467" pos:column="48">.</op:operator><name pos:line="467" pos:column="49">Path</name><op:operator pos:line="467" pos:column="53">.</op:operator><name pos:line="467" pos:column="54">GetFullPath</name></name><argument_list pos:line="467" pos:column="65">(<argument><expr><name pos:line="467" pos:column="66">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="468" pos:column="17">string</name></type> <name pos:line="468" pos:column="24">source</name> <init pos:line="468" pos:column="31">= <expr><call><name><name pos:line="468" pos:column="33">SrcMLParsingUtils</name><op:operator pos:line="468" pos:column="50">.</op:operator><name pos:line="468" pos:column="51">RetrieveSource</name></name><argument_list pos:line="468" pos:column="65">(<argument><expr><name pos:line="468" pos:column="66">enm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="469" pos:column="17">var</name></type> <name pos:line="469" pos:column="21">enumParsed</name> <init pos:line="469" pos:column="32">= <expr><op:operator pos:line="469" pos:column="34">new</op:operator> <call><name pos:line="469" pos:column="38">EnumElement</name><argument_list pos:line="469" pos:column="49">(<argument><expr><name pos:line="469" pos:column="50">name</name></expr></argument>, <argument><expr><name pos:line="469" pos:column="56">definitionLineNumber</name></expr></argument>, <argument><expr><name pos:line="469" pos:column="78">definitionColumnNumber</name></expr></argument>, <argument><expr><name pos:line="469" pos:column="102">fullFilePath</name></expr></argument>, <argument><expr><name pos:line="469" pos:column="116">source</name></expr></argument>, <argument><expr><name pos:line="469" pos:column="124">accessLevel</name></expr></argument>, <argument><expr><name pos:line="469" pos:column="137">namespaceName</name></expr></argument>, <argument><expr><name pos:line="469" pos:column="152">values</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return pos:line="470" pos:column="17">return <expr><name pos:line="470" pos:column="24">enumParsed</name></expr>;</return>
            }</block>
            <catch pos:line="472" pos:column="13">catch <parameter_list pos:line="472" pos:column="19">(<param><decl><type><name pos:line="472" pos:column="20">Exception</name></type> <name pos:line="472" pos:column="30">error</name></decl></param>)</parameter_list>
            <block pos:line="473" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="474" pos:column="17">FileLogger</name><op:operator pos:line="474" pos:column="27">.</op:operator><name pos:line="474" pos:column="28">DefaultLogger</name><op:operator pos:line="474" pos:column="41">.</op:operator><name pos:line="474" pos:column="42">Info</name></name><argument_list pos:line="474" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="474" pos:column="47">"Exception in SrcMLCppParser "</lit:literal> <op:operator pos:line="474" pos:column="78">+</op:operator> <name><name pos:line="474" pos:column="80">error</name><op:operator pos:line="474" pos:column="85">.</op:operator><name pos:line="474" pos:column="86">Message</name></name> <op:operator pos:line="474" pos:column="94">+</op:operator> <lit:literal type="string" pos:line="474" pos:column="96">"\n"</lit:literal> <op:operator pos:line="474" pos:column="101">+</op:operator> <name><name pos:line="474" pos:column="103">error</name><op:operator pos:line="474" pos:column="108">.</op:operator><name pos:line="474" pos:column="109">StackTrace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="475" pos:column="17">return <expr><name pos:line="475" pos:column="24">null</name></expr>;</return>
            }</block></catch></try>
        }</block></function>

        <function><type><specifier pos:line="479" pos:column="9">public</specifier> <specifier pos:line="479" pos:column="16">static</specifier> <name pos:line="479" pos:column="23">StructElement</name></type> <name pos:line="479" pos:column="37">RetrieveStructElement</name><parameter_list pos:line="479" pos:column="58">(<param><decl><type><name pos:line="479" pos:column="59">XElement</name></type> <name pos:line="479" pos:column="68">field</name></decl></param>, <param><decl><type><name><name pos:line="479" pos:column="75">List</name><argument_list pos:line="479" pos:column="79">&lt;<argument><name pos:line="479" pos:column="80">ProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="479" pos:column="96">programElements</name></decl></param>)</parameter_list>
        <block pos:line="480" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="481" pos:column="13">IEnumerable</name><argument_list pos:line="481" pos:column="24">&lt;<argument><name pos:line="481" pos:column="25">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="481" pos:column="35">ownerStructs</name> <init pos:line="481" pos:column="48">=
                <expr><linq><from pos:line="482" pos:column="17">from <expr><name pos:line="482" pos:column="22">el</name></expr> <in pos:line="482" pos:column="25">in <expr><call><name><name pos:line="482" pos:column="28">field</name><op:operator pos:line="482" pos:column="33">.</op:operator><name pos:line="482" pos:column="34">Ancestors</name></name><argument_list pos:line="482" pos:column="43">(<argument><expr><name><name pos:line="482" pos:column="44">SRC</name><op:operator pos:line="482" pos:column="47">.</op:operator><name pos:line="482" pos:column="48">Struct</name></name></expr></argument>)</argument_list></call></expr></in></from>
                <select pos:line="483" pos:column="17">select <expr><name pos:line="483" pos:column="24">el</name></expr></select></linq></expr></init></decl>;</decl_stmt>
            <if pos:line="484" pos:column="13">if <condition pos:line="484" pos:column="16">(<expr><call><name><name pos:line="484" pos:column="17">ownerStructs</name><op:operator pos:line="484" pos:column="29">.</op:operator><name pos:line="484" pos:column="30">Count</name></name><argument_list pos:line="484" pos:column="35">()</argument_list></call> <op:operator pos:line="484" pos:column="38">&gt;</op:operator> <lit:literal type="number" pos:line="484" pos:column="40">0</lit:literal></expr>)</condition><then pos:line="484" pos:column="42">
            <block pos:line="485" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="486" pos:column="17">XElement</name></type> <name pos:line="486" pos:column="26">name</name> <init pos:line="486" pos:column="31">= <expr><call><name><name pos:line="486" pos:column="33">ownerStructs</name><op:operator pos:line="486" pos:column="45">.</op:operator><name pos:line="486" pos:column="46">First</name></name><argument_list pos:line="486" pos:column="51">()</argument_list></call><op:operator pos:line="486" pos:column="53">.</op:operator><call><name pos:line="486" pos:column="54">Element</name><argument_list pos:line="486" pos:column="61">(<argument><expr><name><name pos:line="486" pos:column="62">SRC</name><op:operator pos:line="486" pos:column="65">.</op:operator><name pos:line="486" pos:column="66">Name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="487" pos:column="17">string</name></type> <name pos:line="487" pos:column="24">ownerStructName</name> <init pos:line="487" pos:column="40">= <expr><name><name pos:line="487" pos:column="42">name</name><op:operator pos:line="487" pos:column="46">.</op:operator><name pos:line="487" pos:column="47">Value</name></name></expr></init></decl>;</decl_stmt>
                <comment type="line" pos:line="488" pos:column="17">//now find the StructElement object corresponding to ownerClassName, since those should have been gen'd by now</comment>
                <decl_stmt><decl><type><name pos:line="489" pos:column="17">ProgramElement</name></type> <name pos:line="489" pos:column="32">ownerStruct</name> <init pos:line="489" pos:column="44">= <expr><call><name><name pos:line="489" pos:column="46">programElements</name><op:operator pos:line="489" pos:column="61">.</op:operator><name pos:line="489" pos:column="62">Find</name></name><argument_list pos:line="489" pos:column="66">(<argument><expr><lambda><name pos:line="489" pos:column="67">element</name> <op:operator pos:line="489" pos:column="75">=&gt;</op:operator> <name pos:line="489" pos:column="78">element</name> <op:operator pos:line="489" pos:column="86">is</op:operator> <name pos:line="489" pos:column="89">StructElement</name> <op:operator pos:line="489" pos:column="103">&amp;&amp;</op:operator> <op:operator pos:line="489" pos:column="106">(</op:operator><op:operator pos:line="489" pos:column="107">(</op:operator><name pos:line="489" pos:column="108">StructElement</name><op:operator pos:line="489" pos:column="121">)</op:operator><name pos:line="489" pos:column="122">element</name><op:operator pos:line="489" pos:column="129">)</op:operator><op:operator pos:line="489" pos:column="130">.</op:operator><name pos:line="489" pos:column="131">Name</name> <op:operator pos:line="489" pos:column="136">==</op:operator> <name pos:line="489" pos:column="139">ownerStructName</name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return pos:line="490" pos:column="17">return <expr><name pos:line="490" pos:column="24">ownerStruct</name> <op:operator pos:line="490" pos:column="36">as</op:operator> <name pos:line="490" pos:column="39">StructElement</name></expr>;</return>
            }</block></then>
            <else pos:line="492" pos:column="13">else
            <block pos:line="493" pos:column="13">{
                <comment type="line" pos:line="494" pos:column="17">//field is not contained by a class</comment>
                <return pos:line="495" pos:column="17">return <expr><name pos:line="495" pos:column="24">null</name></expr>;</return>
            }</block></else></if>
        }</block></function>

        <function><type><specifier pos:line="499" pos:column="9">private</specifier> <name pos:line="499" pos:column="17">AccessLevel</name></type> <name pos:line="499" pos:column="29">RetrieveCppAccessLevel</name><parameter_list pos:line="499" pos:column="51">(<param><decl><type><name pos:line="499" pos:column="52">XElement</name></type> <name pos:line="499" pos:column="61">field</name></decl></param>)</parameter_list>
        <block pos:line="500" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="501" pos:column="13">AccessLevel</name></type> <name pos:line="501" pos:column="25">accessLevel</name> <init pos:line="501" pos:column="37">= <expr><name><name pos:line="501" pos:column="39">AccessLevel</name><op:operator pos:line="501" pos:column="50">.</op:operator><name pos:line="501" pos:column="51">Protected</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="503" pos:column="13">XElement</name></type> <name pos:line="503" pos:column="22">parent</name> <init pos:line="503" pos:column="29">= <expr><name><name pos:line="503" pos:column="31">field</name><op:operator pos:line="503" pos:column="36">.</op:operator><name pos:line="503" pos:column="37">Parent</name></name></expr></init></decl>;</decl_stmt>
            <if pos:line="504" pos:column="13">if <condition pos:line="504" pos:column="16">(<expr><name><name pos:line="504" pos:column="17">parent</name><op:operator pos:line="504" pos:column="23">.</op:operator><name pos:line="504" pos:column="24">Name</name></name> <op:operator pos:line="504" pos:column="29">==</op:operator> <op:operator pos:line="504" pos:column="32">(</op:operator><name><name pos:line="504" pos:column="33">SRC</name><op:operator pos:line="504" pos:column="36">.</op:operator><name pos:line="504" pos:column="37">Public</name></name><op:operator pos:line="504" pos:column="43">)</op:operator></expr>)</condition><then pos:line="504" pos:column="45">
            <block pos:line="505" pos:column="13">{
                <expr_stmt><expr><name pos:line="506" pos:column="17">accessLevel</name> <op:operator pos:line="506" pos:column="29">=</op:operator> <name><name pos:line="506" pos:column="31">AccessLevel</name><op:operator pos:line="506" pos:column="42">.</op:operator><name pos:line="506" pos:column="43">Public</name></name></expr>;</expr_stmt>
            }</block></then>
            <else pos:line="508" pos:column="13">else <if pos:line="508" pos:column="18">if <condition pos:line="508" pos:column="21">(<expr><name><name pos:line="508" pos:column="22">parent</name><op:operator pos:line="508" pos:column="28">.</op:operator><name pos:line="508" pos:column="29">Name</name></name> <op:operator pos:line="508" pos:column="34">==</op:operator> <op:operator pos:line="508" pos:column="37">(</op:operator><name><name pos:line="508" pos:column="38">SRC</name><op:operator pos:line="508" pos:column="41">.</op:operator><name pos:line="508" pos:column="42">Private</name></name><op:operator pos:line="508" pos:column="49">)</op:operator></expr>)</condition><then pos:line="508" pos:column="51">
            <block pos:line="509" pos:column="13">{
                <expr_stmt><expr><name pos:line="510" pos:column="17">accessLevel</name> <op:operator pos:line="510" pos:column="29">=</op:operator> <name><name pos:line="510" pos:column="31">AccessLevel</name><op:operator pos:line="510" pos:column="42">.</op:operator><name pos:line="510" pos:column="43">Private</name></name></expr>;</expr_stmt>
            }</block></then></if></else></if>

            <return pos:line="513" pos:column="13">return <expr><name pos:line="513" pos:column="20">accessLevel</name></expr>;</return>
        }</block></function>

    }</block></class>
}</block></namespace>
</unit>
