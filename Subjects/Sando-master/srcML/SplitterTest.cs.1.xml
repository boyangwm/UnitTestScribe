<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Core\Core.UnitTests\Tools\SplitterTest.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Diagnostics</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Diagnostics</name><op:operator pos:line="4" pos:column="25">.</op:operator><name pos:line="4" pos:column="26">Contracts</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">NUnit</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">Framework</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Sando</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">Core</name><op:operator pos:line="6" pos:column="17">.</op:operator><name pos:line="6" pos:column="18">Extensions</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Sando</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">Core</name><op:operator pos:line="7" pos:column="17">.</op:operator><name pos:line="7" pos:column="18">Tools</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Sando</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">ExtensionContracts</name><op:operator pos:line="8" pos:column="31">.</op:operator><name pos:line="8" pos:column="32">SplitterContracts</name></name>;</using>
<using pos:line="9" pos:column="1">using <name pos:line="9" pos:column="7">UnitTestHelpers</name>;</using>

<namespace pos:line="11" pos:column="1">namespace <name><name pos:line="11" pos:column="11">Sando</name><op:operator pos:line="11" pos:column="16">.</op:operator><name pos:line="11" pos:column="17">Core</name><op:operator pos:line="11" pos:column="21">.</op:operator><name pos:line="11" pos:column="22">UnitTests</name><op:operator pos:line="11" pos:column="31">.</op:operator><name pos:line="11" pos:column="32">Tools</name></name>
<block pos:line="12" pos:column="1">{
    <class><attribute pos:line="13" pos:column="5">[<expr><name pos:line="13" pos:column="6">TestFixture</name></expr>]</attribute>
    class <name pos:line="14" pos:column="11">SplitterTest</name>
    <block pos:line="15" pos:column="5">{
        <function><type><attribute pos:line="16" pos:column="9">[<expr><name pos:line="16" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="17" pos:column="9">public</specifier> <name pos:line="17" pos:column="16">void</name></type> <name pos:line="17" pos:column="21">TestSplitCamelCase</name><parameter_list pos:line="17" pos:column="39">()</parameter_list>
        <block pos:line="18" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="19" pos:column="13">string</name><index pos:line="19" pos:column="19">[]</index></type> <name pos:line="19" pos:column="22">parts</name> <init pos:line="19" pos:column="28">= <expr><call><name><name pos:line="19" pos:column="30">wordSplitter</name><op:operator pos:line="19" pos:column="42">.</op:operator><name pos:line="19" pos:column="43">ExtractWords</name></name><argument_list pos:line="19" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="19" pos:column="56">"aLongVariableNameInCamelCase"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="20" pos:column="13">Assert</name><op:operator pos:line="20" pos:column="19">.</op:operator><name pos:line="20" pos:column="20">AreEqual</name></name><argument_list pos:line="20" pos:column="28">(<argument><expr><name><name pos:line="20" pos:column="29">parts</name><op:operator pos:line="20" pos:column="34">.</op:operator><name pos:line="20" pos:column="35">Length</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="20" pos:column="43">7</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="23" pos:column="9">[<expr><name pos:line="23" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="24" pos:column="9">public</specifier> <name pos:line="24" pos:column="16">void</name></type> <name pos:line="24" pos:column="21">ExtractSearchTermsTestLeaveCompleteTerm</name><parameter_list pos:line="24" pos:column="60">()</parameter_list>
        <block pos:line="25" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="26" pos:column="13">var</name></type> <name pos:line="26" pos:column="17">parts</name> <init pos:line="26" pos:column="23">= <expr><call><name><name pos:line="26" pos:column="25">WordSplitter</name><op:operator pos:line="26" pos:column="37">.</op:operator><name pos:line="26" pos:column="38">ExtractSearchTerms</name></name><argument_list pos:line="26" pos:column="56">(<argument><expr><lit:literal type="string" pos:line="26" pos:column="57">"_solutionEvents"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="27" pos:column="13">Assert</name><op:operator pos:line="27" pos:column="19">.</op:operator><name pos:line="27" pos:column="20">AreEqual</name></name><argument_list pos:line="27" pos:column="28">(<argument><expr><name><name pos:line="27" pos:column="29">parts</name><op:operator pos:line="27" pos:column="34">.</op:operator><name pos:line="27" pos:column="35">Count</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="27" pos:column="42">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="28" pos:column="13">Assert</name><op:operator pos:line="28" pos:column="19">.</op:operator><name pos:line="28" pos:column="20">IsTrue</name></name><argument_list pos:line="28" pos:column="26">(<argument><expr><call><name><name pos:line="28" pos:column="27">parts</name><op:operator pos:line="28" pos:column="32">.</op:operator><name pos:line="28" pos:column="33">Contains</name></name><argument_list pos:line="28" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="28" pos:column="42">"\"_solutionEvents\""</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        

        <function><type><attribute pos:line="33" pos:column="9">[<expr><name pos:line="33" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="34" pos:column="9">public</specifier> <name pos:line="34" pos:column="16">void</name></type> <name pos:line="34" pos:column="21">TestSplitUnderscores</name><parameter_list pos:line="34" pos:column="41">()</parameter_list>
        <block pos:line="35" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="36" pos:column="13">string</name><index pos:line="36" pos:column="19">[]</index></type> <name pos:line="36" pos:column="22">parts</name> <init pos:line="36" pos:column="28">= <expr><call><name><name pos:line="36" pos:column="30">wordSplitter</name><op:operator pos:line="36" pos:column="42">.</op:operator><name pos:line="36" pos:column="43">ExtractWords</name></name><argument_list pos:line="36" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="36" pos:column="56">"a_name_separated_by_lots_of_underscores"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="37" pos:column="13">Assert</name><op:operator pos:line="37" pos:column="19">.</op:operator><name pos:line="37" pos:column="20">AreEqual</name></name><argument_list pos:line="37" pos:column="28">(<argument><expr><name><name pos:line="37" pos:column="29">parts</name><op:operator pos:line="37" pos:column="34">.</op:operator><name pos:line="37" pos:column="35">Length</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="37" pos:column="43">7</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="40" pos:column="9">[<expr><name pos:line="40" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="41" pos:column="9">public</specifier> <name pos:line="41" pos:column="16">void</name></type> <name pos:line="41" pos:column="21">TestUnsplittable</name><parameter_list pos:line="41" pos:column="37">()</parameter_list>
        <block pos:line="42" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="43" pos:column="13">string</name><index pos:line="43" pos:column="19">[]</index></type> <name pos:line="43" pos:column="22">parts</name> <init pos:line="43" pos:column="28">= <expr><call><name><name pos:line="43" pos:column="30">wordSplitter</name><op:operator pos:line="43" pos:column="42">.</op:operator><name pos:line="43" pos:column="43">ExtractWords</name></name><argument_list pos:line="43" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="43" pos:column="56">"unsplittable"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="44" pos:column="13">Assert</name><op:operator pos:line="44" pos:column="19">.</op:operator><name pos:line="44" pos:column="20">AreEqual</name></name><argument_list pos:line="44" pos:column="28">(<argument><expr><name><name pos:line="44" pos:column="29">parts</name><op:operator pos:line="44" pos:column="34">.</op:operator><name pos:line="44" pos:column="35">Length</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="44" pos:column="43">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="47" pos:column="9">[<expr><name pos:line="47" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="48" pos:column="9">public</specifier> <name pos:line="48" pos:column="16">void</name></type> <name pos:line="48" pos:column="21">TestAbbreviations</name><parameter_list pos:line="48" pos:column="38">()</parameter_list>
        <block pos:line="49" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="50" pos:column="13">string</name><index pos:line="50" pos:column="19">[]</index></type> <name pos:line="50" pos:column="22">parts</name> <init pos:line="50" pos:column="28">= <expr><call><name><name pos:line="50" pos:column="30">wordSplitter</name><op:operator pos:line="50" pos:column="42">.</op:operator><name pos:line="50" pos:column="43">ExtractWords</name></name><argument_list pos:line="50" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="50" pos:column="56">"whatAboutALM"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="51" pos:column="13">Assert</name><op:operator pos:line="51" pos:column="19">.</op:operator><name pos:line="51" pos:column="20">IsTrue</name></name><argument_list pos:line="51" pos:column="26">(<argument><expr><name><name pos:line="51" pos:column="27">parts</name><op:operator pos:line="51" pos:column="32">.</op:operator><name pos:line="51" pos:column="33">Length</name></name> <op:operator pos:line="51" pos:column="40">==</op:operator> <lit:literal type="number" pos:line="51" pos:column="43">3</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="54" pos:column="9">[<expr><name pos:line="54" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="55" pos:column="9">public</specifier> <name pos:line="55" pos:column="16">void</name></type> <name pos:line="55" pos:column="21">TestAllCaps</name><parameter_list pos:line="55" pos:column="32">()</parameter_list>
        <block pos:line="56" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="57" pos:column="13">string</name><index pos:line="57" pos:column="19">[]</index></type> <name pos:line="57" pos:column="22">parts</name> <init pos:line="57" pos:column="28">= <expr><call><name><name pos:line="57" pos:column="30">wordSplitter</name><op:operator pos:line="57" pos:column="42">.</op:operator><name pos:line="57" pos:column="43">ExtractWords</name></name><argument_list pos:line="57" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="57" pos:column="56">"WHATIFALLINCAPS"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="58" pos:column="13">Assert</name><op:operator pos:line="58" pos:column="19">.</op:operator><name pos:line="58" pos:column="20">AreEqual</name></name><argument_list pos:line="58" pos:column="28">(<argument><expr><name><name pos:line="58" pos:column="29">parts</name><op:operator pos:line="58" pos:column="34">.</op:operator><name pos:line="58" pos:column="35">Length</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="58" pos:column="43">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="61" pos:column="9">[<expr><name pos:line="61" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="62" pos:column="9">public</specifier> <name pos:line="62" pos:column="16">void</name></type> <name pos:line="62" pos:column="21">TestAllCapsUnderscore</name><parameter_list pos:line="62" pos:column="42">()</parameter_list>
        <block pos:line="63" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="64" pos:column="13">string</name><index pos:line="64" pos:column="19">[]</index></type> <name pos:line="64" pos:column="22">parts</name> <init pos:line="64" pos:column="28">= <expr><call><name><name pos:line="64" pos:column="30">wordSplitter</name><op:operator pos:line="64" pos:column="42">.</op:operator><name pos:line="64" pos:column="43">ExtractWords</name></name><argument_list pos:line="64" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="64" pos:column="56">"WHAT_IF_ALL_IN_CAPS"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="65" pos:column="13">Assert</name><op:operator pos:line="65" pos:column="19">.</op:operator><name pos:line="65" pos:column="20">AreEqual</name></name><argument_list pos:line="65" pos:column="28">(<argument><expr><name><name pos:line="65" pos:column="29">parts</name><op:operator pos:line="65" pos:column="34">.</op:operator><name pos:line="65" pos:column="35">Length</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="65" pos:column="43">5</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="68" pos:column="9">[<expr><name pos:line="68" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="69" pos:column="9">public</specifier> <name pos:line="69" pos:column="16">void</name></type> <name pos:line="69" pos:column="21">TestBeginUnderscore</name><parameter_list pos:line="69" pos:column="40">()</parameter_list>
        <block pos:line="70" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="71" pos:column="13">string</name><index pos:line="71" pos:column="19">[]</index></type> <name pos:line="71" pos:column="22">parts</name> <init pos:line="71" pos:column="28">= <expr><call><name><name pos:line="71" pos:column="30">wordSplitter</name><op:operator pos:line="71" pos:column="42">.</op:operator><name pos:line="71" pos:column="43">ExtractWords</name></name><argument_list pos:line="71" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="71" pos:column="56">"_beginInUnderscore"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="72" pos:column="13">Assert</name><op:operator pos:line="72" pos:column="19">.</op:operator><name pos:line="72" pos:column="20">AreEqual</name></name><argument_list pos:line="72" pos:column="28">(<argument><expr><name><name pos:line="72" pos:column="29">parts</name><op:operator pos:line="72" pos:column="34">.</op:operator><name pos:line="72" pos:column="35">Length</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="72" pos:column="43">3</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="75" pos:column="9">[<expr><name pos:line="75" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="76" pos:column="9">public</specifier> <name pos:line="76" pos:column="16">void</name></type> <name pos:line="76" pos:column="21">ShortcutInName</name><parameter_list pos:line="76" pos:column="35">()</parameter_list>
        <block pos:line="77" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="78" pos:column="13">string</name><index pos:line="78" pos:column="19">[]</index></type> <name pos:line="78" pos:column="22">parts</name> <init pos:line="78" pos:column="28">= <expr><call><name><name pos:line="78" pos:column="30">wordSplitter</name><op:operator pos:line="78" pos:column="42">.</op:operator><name pos:line="78" pos:column="43">ExtractWords</name></name><argument_list pos:line="78" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="78" pos:column="56">"FBIInUnderscore"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="79" pos:column="13">Assert</name><op:operator pos:line="79" pos:column="19">.</op:operator><name pos:line="79" pos:column="20">AreEqual</name></name><argument_list pos:line="79" pos:column="28">(<argument><expr><name><name pos:line="79" pos:column="29">parts</name><op:operator pos:line="79" pos:column="34">.</op:operator><name pos:line="79" pos:column="35">Length</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="79" pos:column="43">3</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="82" pos:column="9">[<expr><name pos:line="82" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="83" pos:column="9">public</specifier> <name pos:line="83" pos:column="16">void</name></type> <name pos:line="83" pos:column="21">PseudoShortcutInName</name><parameter_list pos:line="83" pos:column="41">()</parameter_list>
        <block pos:line="84" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="85" pos:column="13">string</name><index pos:line="85" pos:column="19">[]</index></type> <name pos:line="85" pos:column="22">parts</name> <init pos:line="85" pos:column="28">= <expr><call><name><name pos:line="85" pos:column="30">wordSplitter</name><op:operator pos:line="85" pos:column="42">.</op:operator><name pos:line="85" pos:column="43">ExtractWords</name></name><argument_list pos:line="85" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="85" pos:column="56">"IInUnderscore"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="86" pos:column="13">Assert</name><op:operator pos:line="86" pos:column="19">.</op:operator><name pos:line="86" pos:column="20">AreEqual</name></name><argument_list pos:line="86" pos:column="28">(<argument><expr><name><name pos:line="86" pos:column="29">parts</name><op:operator pos:line="86" pos:column="34">.</op:operator><name pos:line="86" pos:column="35">Length</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="86" pos:column="43">3</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="89" pos:column="9">[<expr><name pos:line="89" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="90" pos:column="9">public</specifier> <name pos:line="90" pos:column="16">void</name></type> <name pos:line="90" pos:column="21">ExtractSearchTerms_ReturnsValidNumberOfSearchTermsWhenQuotesUsed</name><parameter_list pos:line="90" pos:column="85">()</parameter_list>
        <block pos:line="91" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="92" pos:column="13">List</name><argument_list pos:line="92" pos:column="17">&lt;<argument><name pos:line="92" pos:column="18">string</name></argument>&gt;</argument_list></name></type> <name pos:line="92" pos:column="26">parts</name> <init pos:line="92" pos:column="32">= <expr><call><name><name pos:line="92" pos:column="34">WordSplitter</name><op:operator pos:line="92" pos:column="46">.</op:operator><name pos:line="92" pos:column="47">ExtractSearchTerms</name></name><argument_list pos:line="92" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="92" pos:column="66">"word \"words inside quotes\" another_word"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="93" pos:column="13">Assert</name><op:operator pos:line="93" pos:column="19">.</op:operator><name pos:line="93" pos:column="20">AreEqual</name></name><argument_list pos:line="93" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="93" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="93" pos:column="32">parts</name><op:operator pos:line="93" pos:column="37">.</op:operator><name pos:line="93" pos:column="38">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="94" pos:column="13">Assert</name><op:operator pos:line="94" pos:column="19">.</op:operator><name pos:line="94" pos:column="20">AreEqual</name></name><argument_list pos:line="94" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="94" pos:column="29">"\"word \"words inside quotes\" another_word\""</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="94" pos:column="78">String</name><op:operator pos:line="94" pos:column="84">.</op:operator><name pos:line="94" pos:column="85">Join</name></name><argument_list pos:line="94" pos:column="89">(<argument><expr><lit:literal type="string" pos:line="94" pos:column="90">"*"</lit:literal></expr></argument>, <argument><expr><name pos:line="94" pos:column="95">parts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="96" pos:column="13">parts</name> <op:operator pos:line="96" pos:column="19">=</op:operator> <call><name><name pos:line="96" pos:column="21">WordSplitter</name><op:operator pos:line="96" pos:column="33">.</op:operator><name pos:line="96" pos:column="34">ExtractSearchTerms</name></name><argument_list pos:line="96" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="96" pos:column="53">"return \"..\\\\..\\\\Parser\""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="97" pos:column="13">Assert</name><op:operator pos:line="97" pos:column="19">.</op:operator><name pos:line="97" pos:column="20">AreEqual</name></name><argument_list pos:line="97" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="97" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="97" pos:column="32">parts</name><op:operator pos:line="97" pos:column="37">.</op:operator><name pos:line="97" pos:column="38">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="98" pos:column="13">Assert</name><op:operator pos:line="98" pos:column="19">.</op:operator><name pos:line="98" pos:column="20">AreEqual</name></name><argument_list pos:line="98" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="98" pos:column="29">"\"return \"..\\\\..\\\\Parser\"\""</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="98" pos:column="66">String</name><op:operator pos:line="98" pos:column="72">.</op:operator><name pos:line="98" pos:column="73">Join</name></name><argument_list pos:line="98" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="98" pos:column="78">"*"</lit:literal></expr></argument>, <argument><expr><name pos:line="98" pos:column="83">parts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="101" pos:column="9">[<expr><name pos:line="101" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="102" pos:column="9">public</specifier> <name pos:line="102" pos:column="16">void</name></type> <name pos:line="102" pos:column="21">InterpretSearchQuery</name><parameter_list pos:line="102" pos:column="41">()</parameter_list>
        <block pos:line="103" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="104" pos:column="13">Assert</name><op:operator pos:line="104" pos:column="19">.</op:operator><name pos:line="104" pos:column="20">IsTrue</name></name><argument_list pos:line="104" pos:column="26">(<argument><expr><call><name><name pos:line="104" pos:column="27">WordSplitter</name><op:operator pos:line="104" pos:column="39">.</op:operator><name pos:line="104" pos:column="40">IsUnquotedLiteral</name></name><argument_list pos:line="104" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="104" pos:column="58">"Assert.AreEqual(4, parts.Count);"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="105" pos:column="13">Assert</name><op:operator pos:line="105" pos:column="19">.</op:operator><name pos:line="105" pos:column="20">IsTrue</name></name><argument_list pos:line="105" pos:column="26">(<argument><expr><call><name><name pos:line="105" pos:column="27">WordSplitter</name><op:operator pos:line="105" pos:column="39">.</op:operator><name pos:line="105" pos:column="40">IsUnquotedLiteral</name></name><argument_list pos:line="105" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="105" pos:column="58">"public void ExtractSearchTerms_ReturnsValidNumberOfSearchTermsWhenQuotesUsedInsideQuotes()"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="106" pos:column="13">Assert</name><op:operator pos:line="106" pos:column="19">.</op:operator><name pos:line="106" pos:column="20">IsTrue</name></name><argument_list pos:line="106" pos:column="26">(<argument><expr><call><name><name pos:line="106" pos:column="27">WordSplitter</name><op:operator pos:line="106" pos:column="39">.</op:operator><name pos:line="106" pos:column="40">IsUnquotedLiteral</name></name><argument_list pos:line="106" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="106" pos:column="58">"ExtractSearchTerms_ReturnsValidNumberOfSearchTermsWhenQuotesUsedInsideQuotes("</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="107" pos:column="13">Assert</name><op:operator pos:line="107" pos:column="19">.</op:operator><name pos:line="107" pos:column="20">IsTrue</name></name><argument_list pos:line="107" pos:column="26">(<argument><expr><call><name><name pos:line="107" pos:column="27">WordSplitter</name><op:operator pos:line="107" pos:column="39">.</op:operator><name pos:line="107" pos:column="40">IsUnquotedLiteral</name></name><argument_list pos:line="107" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="107" pos:column="58">"WordSplitter.InvalidCharactersFound(\"\"wordSplitter.ExtractWords(\"IInUnderscore\")\"\")"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="108" pos:column="13">Assert</name><op:operator pos:line="108" pos:column="19">.</op:operator><name pos:line="108" pos:column="20">IsTrue</name></name><argument_list pos:line="108" pos:column="26">(<argument><expr><call><name><name pos:line="108" pos:column="27">WordSplitter</name><op:operator pos:line="108" pos:column="39">.</op:operator><name pos:line="108" pos:column="40">IsUnquotedLiteral</name></name><argument_list pos:line="108" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="108" pos:column="58">"simpleSearchCriteria.ToQueryString();"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="109" pos:column="13">Assert</name><op:operator pos:line="109" pos:column="19">.</op:operator><name pos:line="109" pos:column="20">IsFalse</name></name><argument_list pos:line="109" pos:column="27">(<argument><expr><call><name><name pos:line="109" pos:column="28">WordSplitter</name><op:operator pos:line="109" pos:column="40">.</op:operator><name pos:line="109" pos:column="41">IsUnquotedLiteral</name></name><argument_list pos:line="109" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="109" pos:column="59">"open file"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="110" pos:column="13">Assert</name><op:operator pos:line="110" pos:column="19">.</op:operator><name pos:line="110" pos:column="20">IsFalse</name></name><argument_list pos:line="110" pos:column="27">(<argument><expr><call><name><name pos:line="110" pos:column="28">WordSplitter</name><op:operator pos:line="110" pos:column="40">.</op:operator><name pos:line="110" pos:column="41">IsUnquotedLiteral</name></name><argument_list pos:line="110" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="110" pos:column="59">"\"sadfasdfasdfasdfasdfasdf\""</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="111" pos:column="13">Assert</name><op:operator pos:line="111" pos:column="19">.</op:operator><name pos:line="111" pos:column="20">IsFalse</name></name><argument_list pos:line="111" pos:column="27">(<argument><expr><call><name><name pos:line="111" pos:column="28">WordSplitter</name><op:operator pos:line="111" pos:column="40">.</op:operator><name pos:line="111" pos:column="41">IsUnquotedLiteral</name></name><argument_list pos:line="111" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="111" pos:column="59">" \"sadfasdfasdfasdfasdfasdf\" "</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="112" pos:column="13">Assert</name><op:operator pos:line="112" pos:column="19">.</op:operator><name pos:line="112" pos:column="20">IsFalse</name></name><argument_list pos:line="112" pos:column="27">(<argument><expr><call><name><name pos:line="112" pos:column="28">WordSplitter</name><op:operator pos:line="112" pos:column="40">.</op:operator><name pos:line="112" pos:column="41">IsUnquotedLiteral</name></name><argument_list pos:line="112" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="112" pos:column="59">" open file -test "</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="113" pos:column="13">Assert</name><op:operator pos:line="113" pos:column="19">.</op:operator><name pos:line="113" pos:column="20">IsTrue</name></name><argument_list pos:line="113" pos:column="26">(<argument><expr><call><name><name pos:line="113" pos:column="27">WordSplitter</name><op:operator pos:line="113" pos:column="39">.</op:operator><name pos:line="113" pos:column="40">IsUnquotedLiteral</name></name><argument_list pos:line="113" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="113" pos:column="58">"\"sadfasdfasdfasdfasdfasdf\" test"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="114" pos:column="13">Assert</name><op:operator pos:line="114" pos:column="19">.</op:operator><name pos:line="114" pos:column="20">IsTrue</name></name><argument_list pos:line="114" pos:column="26">(<argument><expr><call><name><name pos:line="114" pos:column="27">WordSplitter</name><op:operator pos:line="114" pos:column="39">.</op:operator><name pos:line="114" pos:column="40">IsUnquotedLiteral</name></name><argument_list pos:line="114" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="114" pos:column="58">"return \"..\\..\\Parser\";"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="116" pos:column="13">var</name></type> <name pos:line="116" pos:column="17">parsed</name> <init pos:line="116" pos:column="24">= <expr><call><name><name pos:line="116" pos:column="26">WordSplitter</name><op:operator pos:line="116" pos:column="38">.</op:operator><name pos:line="116" pos:column="39">ExtractSearchTerms</name></name><argument_list pos:line="116" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="116" pos:column="58">"return \"..\\..\\Parser\";"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="116" pos:column="87">.</op:operator><call><name pos:line="116" pos:column="88">ToArray</name><argument_list pos:line="116" pos:column="95">()</argument_list></call><index pos:line="116" pos:column="97">[<expr><lit:literal type="number" pos:line="116" pos:column="98">0</lit:literal></expr>]</index></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="117" pos:column="13">Assert</name><op:operator pos:line="117" pos:column="19">.</op:operator><name pos:line="117" pos:column="20">IsTrue</name></name><argument_list pos:line="117" pos:column="26">(<argument><expr><call><name><name pos:line="117" pos:column="27">parsed</name><op:operator pos:line="117" pos:column="33">.</op:operator><name pos:line="117" pos:column="34">Equals</name></name><argument_list pos:line="117" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="117" pos:column="41">"\"return \"..\\..\\Parser\";\""</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="120" pos:column="9">[<expr><name pos:line="120" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="121" pos:column="9">public</specifier> <name pos:line="121" pos:column="16">void</name></type> <name pos:line="121" pos:column="21">ExtractSearchTerms_ReturnsValidNumberOfSearchTermsWhenQuotesUsedInsideQuotes</name><parameter_list pos:line="121" pos:column="97">()</parameter_list>
        <block pos:line="122" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="123" pos:column="13">Assert</name><op:operator pos:line="123" pos:column="19">.</op:operator><name pos:line="123" pos:column="20">IsFalse</name></name><argument_list pos:line="123" pos:column="27">(<argument><expr><call><name><name pos:line="123" pos:column="28">WordSplitter</name><op:operator pos:line="123" pos:column="40">.</op:operator><name pos:line="123" pos:column="41">InvalidCharactersFound</name></name><argument_list pos:line="123" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="123" pos:column="64">"\"wordSplitter.ExtractWords(\"IInUnderscore\")\""</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="124" pos:column="13">Assert</name><op:operator pos:line="124" pos:column="19">.</op:operator><name pos:line="124" pos:column="20">IsFalse</name></name><argument_list pos:line="124" pos:column="27">(<argument><expr><call><name><name pos:line="124" pos:column="28">WordSplitter</name><op:operator pos:line="124" pos:column="40">.</op:operator><name pos:line="124" pos:column="41">InvalidCharactersFound</name></name><argument_list pos:line="124" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="124" pos:column="64">"\"Assert.IsNotNull(wordSplitter, \"Default word splitter should be used!\");\""</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="125" pos:column="13">Assert</name><op:operator pos:line="125" pos:column="19">.</op:operator><name pos:line="125" pos:column="20">IsNotNull</name></name><argument_list pos:line="125" pos:column="29">(<argument><expr><call><name><name pos:line="125" pos:column="30">WordSplitter</name><op:operator pos:line="125" pos:column="42">.</op:operator><name pos:line="125" pos:column="43">ExtractSearchTerms</name></name><argument_list pos:line="125" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="125" pos:column="62">"\"Assert.IsNotNull(wordSplitter, \"Default word splitter should be used!\");\""</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>            
            <decl_stmt><decl><type><name><name pos:line="126" pos:column="13">List</name><argument_list pos:line="126" pos:column="17">&lt;<argument><name pos:line="126" pos:column="18">string</name></argument>&gt;</argument_list></name></type> <name pos:line="126" pos:column="26">parts</name> <init pos:line="126" pos:column="32">= <expr><call><name><name pos:line="126" pos:column="34">WordSplitter</name><op:operator pos:line="126" pos:column="46">.</op:operator><name pos:line="126" pos:column="47">ExtractSearchTerms</name></name><argument_list pos:line="126" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="126" pos:column="66">"\"wordSplitter.ExtractWords(\"IInUnderscore\")\""</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="127" pos:column="13">Assert</name><op:operator pos:line="127" pos:column="19">.</op:operator><name pos:line="127" pos:column="20">AreEqual</name></name><argument_list pos:line="127" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="127" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="127" pos:column="32">parts</name><op:operator pos:line="127" pos:column="37">.</op:operator><name pos:line="127" pos:column="38">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>            
        }</block></function>

        <function><type><attribute pos:line="130" pos:column="9">[<expr><name pos:line="130" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="131" pos:column="9">public</specifier> <name pos:line="131" pos:column="16">void</name></type> <name pos:line="131" pos:column="21">ExtractSearchTerms_ReturnsValidNumberOfSearchTermsWhenQuotesUsedWithInvalidQuote</name><parameter_list pos:line="131" pos:column="101">()</parameter_list>
        <block pos:line="132" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="133" pos:column="13">List</name><argument_list pos:line="133" pos:column="17">&lt;<argument><name pos:line="133" pos:column="18">string</name></argument>&gt;</argument_list></name></type> <name pos:line="133" pos:column="26">parts</name> <init pos:line="133" pos:column="32">= <expr><call><name><name pos:line="133" pos:column="34">WordSplitter</name><op:operator pos:line="133" pos:column="46">.</op:operator><name pos:line="133" pos:column="47">ExtractSearchTerms</name></name><argument_list pos:line="133" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="133" pos:column="66">"word \"words inside quotes\" another word"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="134" pos:column="13">Assert</name><op:operator pos:line="134" pos:column="19">.</op:operator><name pos:line="134" pos:column="20">AreEqual</name></name><argument_list pos:line="134" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="134" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="134" pos:column="32">parts</name><op:operator pos:line="134" pos:column="37">.</op:operator><name pos:line="134" pos:column="38">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="135" pos:column="13">Assert</name><op:operator pos:line="135" pos:column="19">.</op:operator><name pos:line="135" pos:column="20">AreEqual</name></name><argument_list pos:line="135" pos:column="28">(<argument><expr><call><name><name pos:line="135" pos:column="29">String</name><op:operator pos:line="135" pos:column="35">.</op:operator><name pos:line="135" pos:column="36">Join</name></name><argument_list pos:line="135" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="135" pos:column="41">"*"</lit:literal></expr></argument>, <argument><expr><name pos:line="135" pos:column="46">parts</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="135" pos:column="54">"\"word \"words inside quotes\" another word\""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>


        <function><type><attribute pos:line="139" pos:column="9">[<expr><name pos:line="139" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="140" pos:column="9">public</specifier> <name pos:line="140" pos:column="16">void</name></type> <name pos:line="140" pos:column="21">ExtractSearchTerms_SlashesInsideQuotesInsideQuote</name><parameter_list pos:line="140" pos:column="70">()</parameter_list>
        <block pos:line="141" pos:column="9">{
            <comment type="line" pos:line="142" pos:column="13">//implicit quotes</comment>
            <decl_stmt><decl><type><name><name pos:line="143" pos:column="13">List</name><argument_list pos:line="143" pos:column="17">&lt;<argument><name pos:line="143" pos:column="18">string</name></argument>&gt;</argument_list></name></type> <name pos:line="143" pos:column="26">parts</name> <init pos:line="143" pos:column="32">= <expr><call><name><name pos:line="143" pos:column="34">WordSplitter</name><op:operator pos:line="143" pos:column="46">.</op:operator><name pos:line="143" pos:column="47">ExtractSearchTerms</name></name><argument_list pos:line="143" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="143" pos:column="66">"IsUnquotedLiteral(\"..\\Path\"))"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="144" pos:column="13">Assert</name><op:operator pos:line="144" pos:column="19">.</op:operator><name pos:line="144" pos:column="20">AreEqual</name></name><argument_list pos:line="144" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="144" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="144" pos:column="32">parts</name><op:operator pos:line="144" pos:column="37">.</op:operator><name pos:line="144" pos:column="38">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="145" pos:column="13">Assert</name><op:operator pos:line="145" pos:column="19">.</op:operator><name pos:line="145" pos:column="20">AreEqual</name></name><argument_list pos:line="145" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="145" pos:column="29">"\"IsUnquotedLiteral(\"..\\Path\"))\""</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="145" pos:column="69">String</name><op:operator pos:line="145" pos:column="75">.</op:operator><name pos:line="145" pos:column="76">Join</name></name><argument_list pos:line="145" pos:column="80">(<argument><expr><lit:literal type="string" pos:line="145" pos:column="81">" "</lit:literal></expr></argument>, <argument><expr><name pos:line="145" pos:column="86">parts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="147" pos:column="13">//explicit quotes</comment>
            <expr_stmt><expr><name pos:line="148" pos:column="13">parts</name> <op:operator pos:line="148" pos:column="19">=</op:operator> <call><name><name pos:line="148" pos:column="21">WordSplitter</name><op:operator pos:line="148" pos:column="33">.</op:operator><name pos:line="148" pos:column="34">ExtractSearchTerms</name></name><argument_list pos:line="148" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="148" pos:column="53">"\"IsUnquotedLiteral(\"..\\Path\"))\""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="149" pos:column="13">Assert</name><op:operator pos:line="149" pos:column="19">.</op:operator><name pos:line="149" pos:column="20">AreEqual</name></name><argument_list pos:line="149" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="149" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="149" pos:column="32">parts</name><op:operator pos:line="149" pos:column="37">.</op:operator><name pos:line="149" pos:column="38">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="150" pos:column="13">Assert</name><op:operator pos:line="150" pos:column="19">.</op:operator><name pos:line="150" pos:column="20">AreEqual</name></name><argument_list pos:line="150" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="150" pos:column="29">"\"IsUnquotedLiteral(\"..\\Path\"))\""</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="150" pos:column="69">String</name><op:operator pos:line="150" pos:column="75">.</op:operator><name pos:line="150" pos:column="76">Join</name></name><argument_list pos:line="150" pos:column="80">(<argument><expr><lit:literal type="string" pos:line="150" pos:column="81">" "</lit:literal></expr></argument>, <argument><expr><name pos:line="150" pos:column="86">parts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="153" pos:column="9">[<expr><name pos:line="153" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="154" pos:column="9">public</specifier> <name pos:line="154" pos:column="16">void</name></type> <name pos:line="154" pos:column="21">ExtractSearchTerms_ReturnsValidNumberOfSearchTermsWhenColonUsed</name><parameter_list pos:line="154" pos:column="84">()</parameter_list>
        <block pos:line="155" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="156" pos:column="13">List</name><argument_list pos:line="156" pos:column="17">&lt;<argument><name pos:line="156" pos:column="18">string</name></argument>&gt;</argument_list></name></type> <name pos:line="156" pos:column="26">parts</name> <init pos:line="156" pos:column="32">= <expr><call><name><name pos:line="156" pos:column="34">WordSplitter</name><op:operator pos:line="156" pos:column="46">.</op:operator><name pos:line="156" pos:column="47">ExtractSearchTerms</name></name><argument_list pos:line="156" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="156" pos:column="66">"file::open::now"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="157" pos:column="13">Assert</name><op:operator pos:line="157" pos:column="19">.</op:operator><name pos:line="157" pos:column="20">AreEqual</name></name><argument_list pos:line="157" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="157" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="157" pos:column="32">parts</name><op:operator pos:line="157" pos:column="37">.</op:operator><name pos:line="157" pos:column="38">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="158" pos:column="13">Assert</name><op:operator pos:line="158" pos:column="19">.</op:operator><name pos:line="158" pos:column="20">AreEqual</name></name><argument_list pos:line="158" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="158" pos:column="29">"\"file::open::now\""</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="158" pos:column="52">String</name><op:operator pos:line="158" pos:column="58">.</op:operator><name pos:line="158" pos:column="59">Join</name></name><argument_list pos:line="158" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="158" pos:column="64">" "</lit:literal></expr></argument>, <argument><expr><name pos:line="158" pos:column="69">parts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="161" pos:column="9">[<expr><name pos:line="161" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="162" pos:column="9">public</specifier> <name pos:line="162" pos:column="16">void</name></type> <name pos:line="162" pos:column="21">ExtractSearchTerms_ReturnsValidNumberOfSearchTermsWhenEqualityOperatorUsed</name><parameter_list pos:line="162" pos:column="95">()</parameter_list>
        <block pos:line="163" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="164" pos:column="13">List</name><argument_list pos:line="164" pos:column="17">&lt;<argument><name pos:line="164" pos:column="18">string</name></argument>&gt;</argument_list></name></type> <name pos:line="164" pos:column="26">parts</name> <init pos:line="164" pos:column="32">= <expr><call><name><name pos:line="164" pos:column="34">WordSplitter</name><op:operator pos:line="164" pos:column="46">.</op:operator><name pos:line="164" pos:column="47">ExtractSearchTerms</name></name><argument_list pos:line="164" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="164" pos:column="66">"file=new"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="165" pos:column="13">Assert</name><op:operator pos:line="165" pos:column="19">.</op:operator><name pos:line="165" pos:column="20">AreEqual</name></name><argument_list pos:line="165" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="165" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="165" pos:column="32">parts</name><op:operator pos:line="165" pos:column="37">.</op:operator><name pos:line="165" pos:column="38">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="166" pos:column="13">Assert</name><op:operator pos:line="166" pos:column="19">.</op:operator><name pos:line="166" pos:column="20">AreEqual</name></name><argument_list pos:line="166" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="166" pos:column="29">"\"file=new\""</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="166" pos:column="45">String</name><op:operator pos:line="166" pos:column="51">.</op:operator><name pos:line="166" pos:column="52">Join</name></name><argument_list pos:line="166" pos:column="56">(<argument><expr><lit:literal type="string" pos:line="166" pos:column="57">" "</lit:literal></expr></argument>, <argument><expr><name pos:line="166" pos:column="62">parts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="169" pos:column="9">[<expr><name pos:line="169" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="170" pos:column="9">public</specifier> <name pos:line="170" pos:column="16">void</name></type> <name pos:line="170" pos:column="21">ExtractSearchTerms_ReturnsValidNumberOfSearchTermsWhenBracketsUsed</name><parameter_list pos:line="170" pos:column="87">()</parameter_list>
        <block pos:line="171" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="172" pos:column="13">List</name><argument_list pos:line="172" pos:column="17">&lt;<argument><name pos:line="172" pos:column="18">string</name></argument>&gt;</argument_list></name></type> <name pos:line="172" pos:column="26">parts</name> <init pos:line="172" pos:column="32">= <expr><call><name><name pos:line="172" pos:column="34">WordSplitter</name><op:operator pos:line="172" pos:column="46">.</op:operator><name pos:line="172" pos:column="47">ExtractSearchTerms</name></name><argument_list pos:line="172" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="172" pos:column="66">"file(new File())"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="173" pos:column="13">Assert</name><op:operator pos:line="173" pos:column="19">.</op:operator><name pos:line="173" pos:column="20">AreEqual</name></name><argument_list pos:line="173" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="173" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="173" pos:column="32">parts</name><op:operator pos:line="173" pos:column="37">.</op:operator><name pos:line="173" pos:column="38">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="174" pos:column="13">Assert</name><op:operator pos:line="174" pos:column="19">.</op:operator><name pos:line="174" pos:column="20">AreEqual</name></name><argument_list pos:line="174" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="174" pos:column="29">"\"file(new File())\""</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="174" pos:column="53">String</name><op:operator pos:line="174" pos:column="59">.</op:operator><name pos:line="174" pos:column="60">Join</name></name><argument_list pos:line="174" pos:column="64">(<argument><expr><lit:literal type="string" pos:line="174" pos:column="65">" "</lit:literal></expr></argument>, <argument><expr><name pos:line="174" pos:column="70">parts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="177" pos:column="9">[<expr><name pos:line="177" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="178" pos:column="9">public</specifier> <name pos:line="178" pos:column="16">void</name></type> <name pos:line="178" pos:column="21">ExtractSearchTerms_ReturnsValidNumberOfSearchTermsWhenUpperCasesUsed1</name><parameter_list pos:line="178" pos:column="90">()</parameter_list>
        <block pos:line="179" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="180" pos:column="13">List</name><argument_list pos:line="180" pos:column="17">&lt;<argument><name pos:line="180" pos:column="18">string</name></argument>&gt;</argument_list></name></type> <name pos:line="180" pos:column="26">parts</name> <init pos:line="180" pos:column="32">= <expr><call><name><name pos:line="180" pos:column="34">WordSplitter</name><op:operator pos:line="180" pos:column="46">.</op:operator><name pos:line="180" pos:column="47">ExtractSearchTerms</name></name><argument_list pos:line="180" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="180" pos:column="66">"fileOpenNow"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="181" pos:column="13">Assert</name><op:operator pos:line="181" pos:column="19">.</op:operator><name pos:line="181" pos:column="20">AreEqual</name></name><argument_list pos:line="181" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="181" pos:column="29">4</lit:literal></expr></argument>, <argument><expr><name><name pos:line="181" pos:column="32">parts</name><op:operator pos:line="181" pos:column="37">.</op:operator><name pos:line="181" pos:column="38">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="182" pos:column="13">Assert</name><op:operator pos:line="182" pos:column="19">.</op:operator><name pos:line="182" pos:column="20">AreEqual</name></name><argument_list pos:line="182" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="182" pos:column="29">"fileopennow file open now"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="182" pos:column="58">String</name><op:operator pos:line="182" pos:column="64">.</op:operator><name pos:line="182" pos:column="65">Join</name></name><argument_list pos:line="182" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="182" pos:column="70">" "</lit:literal></expr></argument>, <argument><expr><name pos:line="182" pos:column="75">parts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="185" pos:column="9">[<expr><name pos:line="185" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="186" pos:column="9">public</specifier> <name pos:line="186" pos:column="16">void</name></type> <name pos:line="186" pos:column="21">ExtractSearchTerms_ReturnsValidNumberOfSearchTermsWhenUpperCasesUsed2</name><parameter_list pos:line="186" pos:column="90">()</parameter_list>
        <block pos:line="187" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="188" pos:column="13">List</name><argument_list pos:line="188" pos:column="17">&lt;<argument><name pos:line="188" pos:column="18">string</name></argument>&gt;</argument_list></name></type> <name pos:line="188" pos:column="26">parts</name> <init pos:line="188" pos:column="32">= <expr><call><name><name pos:line="188" pos:column="34">WordSplitter</name><op:operator pos:line="188" pos:column="46">.</op:operator><name pos:line="188" pos:column="47">ExtractSearchTerms</name></name><argument_list pos:line="188" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="188" pos:column="66">"FileOpenNow"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="189" pos:column="13">Assert</name><op:operator pos:line="189" pos:column="19">.</op:operator><name pos:line="189" pos:column="20">AreEqual</name></name><argument_list pos:line="189" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="189" pos:column="29">4</lit:literal></expr></argument>, <argument><expr><name><name pos:line="189" pos:column="32">parts</name><op:operator pos:line="189" pos:column="37">.</op:operator><name pos:line="189" pos:column="38">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="190" pos:column="13">Assert</name><op:operator pos:line="190" pos:column="19">.</op:operator><name pos:line="190" pos:column="20">AreEqual</name></name><argument_list pos:line="190" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="190" pos:column="29">"fileopennow file open now"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="190" pos:column="58">String</name><op:operator pos:line="190" pos:column="64">.</op:operator><name pos:line="190" pos:column="65">Join</name></name><argument_list pos:line="190" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="190" pos:column="70">" "</lit:literal></expr></argument>, <argument><expr><name pos:line="190" pos:column="75">parts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="193" pos:column="9">[<expr><name pos:line="193" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="194" pos:column="9">public</specifier> <name pos:line="194" pos:column="16">void</name></type> <name pos:line="194" pos:column="21">ExtractSearchTerms_ReturnsValidNumberOfSearchTermsWhenUpperCasesUsed3</name><parameter_list pos:line="194" pos:column="90">()</parameter_list>
        <block pos:line="195" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="196" pos:column="13">List</name><argument_list pos:line="196" pos:column="17">&lt;<argument><name pos:line="196" pos:column="18">string</name></argument>&gt;</argument_list></name></type> <name pos:line="196" pos:column="26">parts</name> <init pos:line="196" pos:column="32">= <expr><call><name><name pos:line="196" pos:column="34">WordSplitter</name><op:operator pos:line="196" pos:column="46">.</op:operator><name pos:line="196" pos:column="47">ExtractSearchTerms</name></name><argument_list pos:line="196" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="196" pos:column="66">"FileTXTOpenNow"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="197" pos:column="13">Assert</name><op:operator pos:line="197" pos:column="19">.</op:operator><name pos:line="197" pos:column="20">AreEqual</name></name><argument_list pos:line="197" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="197" pos:column="29">5</lit:literal></expr></argument>, <argument><expr><name><name pos:line="197" pos:column="32">parts</name><op:operator pos:line="197" pos:column="37">.</op:operator><name pos:line="197" pos:column="38">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="198" pos:column="13">Assert</name><op:operator pos:line="198" pos:column="19">.</op:operator><name pos:line="198" pos:column="20">AreEqual</name></name><argument_list pos:line="198" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="198" pos:column="29">"filetxtopennow file txt open now"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="198" pos:column="65">String</name><op:operator pos:line="198" pos:column="71">.</op:operator><name pos:line="198" pos:column="72">Join</name></name><argument_list pos:line="198" pos:column="76">(<argument><expr><lit:literal type="string" pos:line="198" pos:column="77">" "</lit:literal></expr></argument>, <argument><expr><name pos:line="198" pos:column="82">parts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="201" pos:column="9">[<expr><name pos:line="201" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="202" pos:column="9">public</specifier> <name pos:line="202" pos:column="16">void</name></type> <name pos:line="202" pos:column="21">ExtractSearchTerms_ReturnsValidNumberOfSearchTermsWhenNumbersUsed</name><parameter_list pos:line="202" pos:column="86">()</parameter_list>
        <block pos:line="203" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="204" pos:column="13">List</name><argument_list pos:line="204" pos:column="17">&lt;<argument><name pos:line="204" pos:column="18">string</name></argument>&gt;</argument_list></name></type> <name pos:line="204" pos:column="26">parts</name> <init pos:line="204" pos:column="32">= <expr><call><name><name pos:line="204" pos:column="34">WordSplitter</name><op:operator pos:line="204" pos:column="46">.</op:operator><name pos:line="204" pos:column="47">ExtractSearchTerms</name></name><argument_list pos:line="204" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="204" pos:column="66">"file324"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="205" pos:column="13">Assert</name><op:operator pos:line="205" pos:column="19">.</op:operator><name pos:line="205" pos:column="20">AreEqual</name></name><argument_list pos:line="205" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="205" pos:column="29">3</lit:literal></expr></argument>, <argument><expr><name><name pos:line="205" pos:column="32">parts</name><op:operator pos:line="205" pos:column="37">.</op:operator><name pos:line="205" pos:column="38">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="206" pos:column="13">Assert</name><op:operator pos:line="206" pos:column="19">.</op:operator><name pos:line="206" pos:column="20">AreEqual</name></name><argument_list pos:line="206" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="206" pos:column="29">"file324 file 324"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="206" pos:column="49">String</name><op:operator pos:line="206" pos:column="55">.</op:operator><name pos:line="206" pos:column="56">Join</name></name><argument_list pos:line="206" pos:column="60">(<argument><expr><lit:literal type="string" pos:line="206" pos:column="61">" "</lit:literal></expr></argument>, <argument><expr><name pos:line="206" pos:column="66">parts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="209" pos:column="9">[<expr><name pos:line="209" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="210" pos:column="9">public</specifier> <name pos:line="210" pos:column="16">void</name></type> <name pos:line="210" pos:column="21">ExtractSearchTerms_ReturnsValidNumberOfSearchTermsWhenNumbersUsed2</name><parameter_list pos:line="210" pos:column="87">()</parameter_list>
        <block pos:line="211" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="212" pos:column="13">List</name><argument_list pos:line="212" pos:column="17">&lt;<argument><name pos:line="212" pos:column="18">string</name></argument>&gt;</argument_list></name></type> <name pos:line="212" pos:column="26">parts</name> <init pos:line="212" pos:column="32">= <expr><call><name><name pos:line="212" pos:column="34">WordSplitter</name><op:operator pos:line="212" pos:column="46">.</op:operator><name pos:line="212" pos:column="47">ExtractSearchTerms</name></name><argument_list pos:line="212" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="212" pos:column="66">"Mp3Player"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="213" pos:column="13">Assert</name><op:operator pos:line="213" pos:column="19">.</op:operator><name pos:line="213" pos:column="20">AreEqual</name></name><argument_list pos:line="213" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="213" pos:column="29">4</lit:literal></expr></argument>, <argument><expr><name><name pos:line="213" pos:column="32">parts</name><op:operator pos:line="213" pos:column="37">.</op:operator><name pos:line="213" pos:column="38">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="214" pos:column="13">Assert</name><op:operator pos:line="214" pos:column="19">.</op:operator><name pos:line="214" pos:column="20">AreEqual</name></name><argument_list pos:line="214" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="214" pos:column="29">"mp3player mp 3 player"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="214" pos:column="54">String</name><op:operator pos:line="214" pos:column="60">.</op:operator><name pos:line="214" pos:column="61">Join</name></name><argument_list pos:line="214" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="214" pos:column="66">" "</lit:literal></expr></argument>, <argument><expr><name pos:line="214" pos:column="71">parts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="217" pos:column="9">[<expr><name pos:line="217" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="218" pos:column="9">public</specifier> <name pos:line="218" pos:column="16">void</name></type> <name pos:line="218" pos:column="21">ExtractSearchTerms_ReturnsValidNumberOfSearchTermsWhenUnderscoreUsed</name><parameter_list pos:line="218" pos:column="89">()</parameter_list>
        <block pos:line="219" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="220" pos:column="13">List</name><argument_list pos:line="220" pos:column="17">&lt;<argument><name pos:line="220" pos:column="18">string</name></argument>&gt;</argument_list></name></type> <name pos:line="220" pos:column="26">parts</name> <init pos:line="220" pos:column="32">= <expr><call><name><name pos:line="220" pos:column="34">WordSplitter</name><op:operator pos:line="220" pos:column="46">.</op:operator><name pos:line="220" pos:column="47">ExtractSearchTerms</name></name><argument_list pos:line="220" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="220" pos:column="66">"file_open_now"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="221" pos:column="13">Assert</name><op:operator pos:line="221" pos:column="19">.</op:operator><name pos:line="221" pos:column="20">AreEqual</name></name><argument_list pos:line="221" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="221" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="221" pos:column="32">parts</name><op:operator pos:line="221" pos:column="37">.</op:operator><name pos:line="221" pos:column="38">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="222" pos:column="13">Assert</name><op:operator pos:line="222" pos:column="19">.</op:operator><name pos:line="222" pos:column="20">AreEqual</name></name><argument_list pos:line="222" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="222" pos:column="29">"\"file_open_now\""</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="222" pos:column="50">String</name><op:operator pos:line="222" pos:column="56">.</op:operator><name pos:line="222" pos:column="57">Join</name></name><argument_list pos:line="222" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="222" pos:column="62">" "</lit:literal></expr></argument>, <argument><expr><name pos:line="222" pos:column="67">parts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="225" pos:column="9">[<expr><name pos:line="225" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="226" pos:column="9">public</specifier> <name pos:line="226" pos:column="16">void</name></type> <name pos:line="226" pos:column="21">ExtractSearchTerms_ReturnsValidNumberOfSearchTermsWhenNoQuotesUsed</name><parameter_list pos:line="226" pos:column="87">()</parameter_list>
        <block pos:line="227" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="228" pos:column="13">List</name><argument_list pos:line="228" pos:column="17">&lt;<argument><name pos:line="228" pos:column="18">string</name></argument>&gt;</argument_list></name></type> <name pos:line="228" pos:column="26">parts</name> <init pos:line="228" pos:column="32">= <expr><call><name><name pos:line="228" pos:column="34">WordSplitter</name><op:operator pos:line="228" pos:column="46">.</op:operator><name pos:line="228" pos:column="47">ExtractSearchTerms</name></name><argument_list pos:line="228" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="228" pos:column="66">"word words inside quotes another_word"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="229" pos:column="13">Assert</name><op:operator pos:line="229" pos:column="19">.</op:operator><name pos:line="229" pos:column="20">AreEqual</name></name><argument_list pos:line="229" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="229" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="229" pos:column="32">parts</name><op:operator pos:line="229" pos:column="37">.</op:operator><name pos:line="229" pos:column="38">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="230" pos:column="13">Assert</name><op:operator pos:line="230" pos:column="19">.</op:operator><name pos:line="230" pos:column="20">AreEqual</name></name><argument_list pos:line="230" pos:column="28">(<argument><expr><call><name><name pos:line="230" pos:column="29">String</name><op:operator pos:line="230" pos:column="35">.</op:operator><name pos:line="230" pos:column="36">Join</name></name><argument_list pos:line="230" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="230" pos:column="41">"*"</lit:literal></expr></argument>, <argument><expr><name pos:line="230" pos:column="46">parts</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="230" pos:column="54">"\"word words inside quotes another_word\""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="233" pos:column="9">[<expr><name pos:line="233" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="234" pos:column="9">public</specifier> <name pos:line="234" pos:column="16">void</name></type> <name pos:line="234" pos:column="21">ExtractSearchTerms_ReturnsValidNumberOfSearchTermsWhenNoOperatortUsedWithQuotes</name><parameter_list pos:line="234" pos:column="100">()</parameter_list>
        <block pos:line="235" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="236" pos:column="13">List</name><argument_list pos:line="236" pos:column="17">&lt;<argument><name pos:line="236" pos:column="18">string</name></argument>&gt;</argument_list></name></type> <name pos:line="236" pos:column="26">parts</name> <init pos:line="236" pos:column="32">= <expr><call><name><name pos:line="236" pos:column="34">WordSplitter</name><op:operator pos:line="236" pos:column="46">.</op:operator><name pos:line="236" pos:column="47">ExtractSearchTerms</name></name><argument_list pos:line="236" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="236" pos:column="66">"word \"words inside\""</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="237" pos:column="13">Assert</name><op:operator pos:line="237" pos:column="19">.</op:operator><name pos:line="237" pos:column="20">AreEqual</name></name><argument_list pos:line="237" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="237" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="237" pos:column="32">parts</name><op:operator pos:line="237" pos:column="37">.</op:operator><name pos:line="237" pos:column="38">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="238" pos:column="13">Assert</name><op:operator pos:line="238" pos:column="19">.</op:operator><name pos:line="238" pos:column="20">AreEqual</name></name><argument_list pos:line="238" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="238" pos:column="29">"\"word \"words inside\"\""</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="238" pos:column="58">String</name><op:operator pos:line="238" pos:column="64">.</op:operator><name pos:line="238" pos:column="65">Join</name></name><argument_list pos:line="238" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="238" pos:column="70">"*"</lit:literal></expr></argument>, <argument><expr><name pos:line="238" pos:column="75">parts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="241" pos:column="9">[<expr><name pos:line="241" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="242" pos:column="9">public</specifier> <name pos:line="242" pos:column="16">void</name></type> <name pos:line="242" pos:column="21">ExtractSearchTerms_ReturnsValidNumberOfSearchTermsWhenNoOperatortUsedWithoutQuotes</name><parameter_list pos:line="242" pos:column="103">()</parameter_list>
        <block pos:line="243" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="244" pos:column="13">List</name><argument_list pos:line="244" pos:column="17">&lt;<argument><name pos:line="244" pos:column="18">string</name></argument>&gt;</argument_list></name></type> <name pos:line="244" pos:column="26">parts</name> <init pos:line="244" pos:column="32">= <expr><call><name><name pos:line="244" pos:column="34">WordSplitter</name><op:operator pos:line="244" pos:column="46">.</op:operator><name pos:line="244" pos:column="47">ExtractSearchTerms</name></name><argument_list pos:line="244" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="244" pos:column="66">"word -about"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="245" pos:column="13">Assert</name><op:operator pos:line="245" pos:column="19">.</op:operator><name pos:line="245" pos:column="20">AreEqual</name></name><argument_list pos:line="245" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="245" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="245" pos:column="32">parts</name><op:operator pos:line="245" pos:column="37">.</op:operator><name pos:line="245" pos:column="38">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="246" pos:column="13">Assert</name><op:operator pos:line="246" pos:column="19">.</op:operator><name pos:line="246" pos:column="20">AreEqual</name></name><argument_list pos:line="246" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="246" pos:column="29">"word*-about"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="246" pos:column="44">String</name><op:operator pos:line="246" pos:column="50">.</op:operator><name pos:line="246" pos:column="51">Join</name></name><argument_list pos:line="246" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="246" pos:column="56">"*"</lit:literal></expr></argument>, <argument><expr><name pos:line="246" pos:column="61">parts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="249" pos:column="9">[<expr><name pos:line="249" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="250" pos:column="9">public</specifier> <name pos:line="250" pos:column="16">void</name></type> <name pos:line="250" pos:column="21">ExtractSearchTerms_ReturnsEmptyListWhenSearchTermIsEmptyString</name><parameter_list pos:line="250" pos:column="83">()</parameter_list>
        <block pos:line="251" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="252" pos:column="13">List</name><argument_list pos:line="252" pos:column="17">&lt;<argument><name pos:line="252" pos:column="18">string</name></argument>&gt;</argument_list></name></type> <name pos:line="252" pos:column="26">parts</name> <init pos:line="252" pos:column="32">= <expr><call><name><name pos:line="252" pos:column="34">WordSplitter</name><op:operator pos:line="252" pos:column="46">.</op:operator><name pos:line="252" pos:column="47">ExtractSearchTerms</name></name><argument_list pos:line="252" pos:column="65">(<argument><expr><name><name pos:line="252" pos:column="66">String</name><op:operator pos:line="252" pos:column="72">.</op:operator><name pos:line="252" pos:column="73">Empty</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="253" pos:column="13">Assert</name><op:operator pos:line="253" pos:column="19">.</op:operator><name pos:line="253" pos:column="20">AreEqual</name></name><argument_list pos:line="253" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="253" pos:column="29">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="253" pos:column="32">parts</name><op:operator pos:line="253" pos:column="37">.</op:operator><name pos:line="253" pos:column="38">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

 

        <function><type><attribute pos:line="258" pos:column="9">[<expr><name pos:line="258" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="259" pos:column="9">public</specifier> <name pos:line="259" pos:column="16">void</name></type> <name pos:line="259" pos:column="21">InvalidCharactersFound_ReturnsTrueWhenInvalidCharactersUsed</name><parameter_list pos:line="259" pos:column="80">()</parameter_list>
        <block pos:line="260" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="261" pos:column="13">bool</name></type> <name pos:line="261" pos:column="18">invalidCharactersFound</name> <init pos:line="261" pos:column="41">= <expr><call><name><name pos:line="261" pos:column="43">WordSplitter</name><op:operator pos:line="261" pos:column="55">.</op:operator><name pos:line="261" pos:column="56">InvalidCharactersFound</name></name><argument_list pos:line="261" pos:column="78">(<argument><expr><lit:literal type="string" pos:line="261" pos:column="79">"???"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="262" pos:column="13">Assert</name><op:operator pos:line="262" pos:column="19">.</op:operator><name pos:line="262" pos:column="20">IsTrue</name></name><argument_list pos:line="262" pos:column="26">(<argument><expr><name pos:line="262" pos:column="27">invalidCharactersFound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="265" pos:column="9">[<expr><name pos:line="265" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="266" pos:column="9">public</specifier> <name pos:line="266" pos:column="16">void</name></type> <name pos:line="266" pos:column="21">ParsingQuery</name><parameter_list pos:line="266" pos:column="33">()</parameter_list>
        <block pos:line="267" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="268" pos:column="13">bool</name></type> <name pos:line="268" pos:column="18">invalidCharactersFound</name> <init pos:line="268" pos:column="41">= <expr><call><name><name pos:line="268" pos:column="43">WordSplitter</name><op:operator pos:line="268" pos:column="55">.</op:operator><name pos:line="268" pos:column="56">InvalidCharactersFound</name></name><argument_list pos:line="268" pos:column="78">(<argument><expr><lit:literal type="string" pos:line="268" pos:column="79">"session file info filetype:h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="269" pos:column="13">Assert</name><op:operator pos:line="269" pos:column="19">.</op:operator><name pos:line="269" pos:column="20">IsFalse</name></name><argument_list pos:line="269" pos:column="27">(<argument><expr><name pos:line="269" pos:column="28">invalidCharactersFound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="270" pos:column="13">var</name></type> <name pos:line="270" pos:column="17">terms</name> <init pos:line="270" pos:column="23">= <expr><call><name><name pos:line="270" pos:column="25">WordSplitter</name><op:operator pos:line="270" pos:column="37">.</op:operator><name pos:line="270" pos:column="38">ExtractSearchTerms</name></name><argument_list pos:line="270" pos:column="56">(<argument><expr><lit:literal type="string" pos:line="270" pos:column="57">"session file info filetype:h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="271" pos:column="13">WordSplitter</name><op:operator pos:line="271" pos:column="25">.</op:operator><name pos:line="271" pos:column="26">GetFileExtensions</name></name><argument_list pos:line="271" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="271" pos:column="44">"session file info filetype:h"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="274" pos:column="9">[<expr><name pos:line="274" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="275" pos:column="9">public</specifier> <name pos:line="275" pos:column="16">void</name></type> <name pos:line="275" pos:column="21">InvalidCharactersFound_ReturnsFalseWhenInvalidCharactersUsedInQuotes</name><parameter_list pos:line="275" pos:column="89">()</parameter_list>
        <block pos:line="276" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="277" pos:column="13">bool</name></type> <name pos:line="277" pos:column="18">invalidCharactersFound</name> <init pos:line="277" pos:column="41">= <expr><call><name><name pos:line="277" pos:column="43">WordSplitter</name><op:operator pos:line="277" pos:column="55">.</op:operator><name pos:line="277" pos:column="56">InvalidCharactersFound</name></name><argument_list pos:line="277" pos:column="78">(<argument><expr><lit:literal type="string" pos:line="277" pos:column="79">"\"???\""</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="278" pos:column="13">Assert</name><op:operator pos:line="278" pos:column="19">.</op:operator><name pos:line="278" pos:column="20">IsFalse</name></name><argument_list pos:line="278" pos:column="27">(<argument><expr><name pos:line="278" pos:column="28">invalidCharactersFound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="281" pos:column="9">[<expr><name pos:line="281" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="282" pos:column="9">public</specifier> <name pos:line="282" pos:column="16">void</name></type> <name pos:line="282" pos:column="21">ExtractSearchTerms_ContractFailsWhenSearchTermIsNull</name><parameter_list pos:line="282" pos:column="73">()</parameter_list>
        <block pos:line="283" pos:column="9">{
            <try pos:line="284" pos:column="13">try
            <block pos:line="285" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="286" pos:column="17">WordSplitter</name><op:operator pos:line="286" pos:column="29">.</op:operator><name pos:line="286" pos:column="30">ExtractSearchTerms</name></name><argument_list pos:line="286" pos:column="48">(<argument><expr><name pos:line="286" pos:column="49">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch pos:line="288" pos:column="13">catch
            <block pos:line="289" pos:column="13">{
                <comment type="line" pos:line="290" pos:column="17">//contract exception catched here</comment>
            }</block></catch></try>
            <expr_stmt><expr><call><name><name pos:line="292" pos:column="13">Assert</name><op:operator pos:line="292" pos:column="19">.</op:operator><name pos:line="292" pos:column="20">True</name></name><argument_list pos:line="292" pos:column="24">(<argument><expr><name pos:line="292" pos:column="25">contractFailed</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="292" pos:column="41">"Contract should fail!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="295" pos:column="9">[<expr><name pos:line="295" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="296" pos:column="9">public</specifier> <name pos:line="296" pos:column="16">void</name></type> <name pos:line="296" pos:column="21">ExtractSearchTerms_FirstPartIsAlwaysOriginal</name><parameter_list pos:line="296" pos:column="65">()</parameter_list>
        <block pos:line="297" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="298" pos:column="13">const</specifier> <name pos:line="298" pos:column="19">string</name></type> <name pos:line="298" pos:column="26">term1</name> <init pos:line="298" pos:column="32">= <expr><lit:literal type="string" pos:line="298" pos:column="34">"splitWord"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="299" pos:column="13">const</specifier> <name pos:line="299" pos:column="19">string</name></type> <name pos:line="299" pos:column="26">term2</name> <init pos:line="299" pos:column="32">= <expr><lit:literal type="string" pos:line="299" pos:column="34">"splitAgain"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="300" pos:column="13">List</name><argument_list pos:line="300" pos:column="17">&lt;<argument><name pos:line="300" pos:column="18">string</name></argument>&gt;</argument_list></name></type> <name pos:line="300" pos:column="26">parts</name> <init pos:line="300" pos:column="32">= <expr><call><name><name pos:line="300" pos:column="34">WordSplitter</name><op:operator pos:line="300" pos:column="46">.</op:operator><name pos:line="300" pos:column="47">ExtractSearchTerms</name></name><argument_list pos:line="300" pos:column="65">(<argument><expr><name pos:line="300" pos:column="66">term1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="301" pos:column="13">Assert</name><op:operator pos:line="301" pos:column="19">.</op:operator><name pos:line="301" pos:column="20">AreEqual</name></name><argument_list pos:line="301" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="301" pos:column="29">3</lit:literal></expr></argument>, <argument><expr><name><name pos:line="301" pos:column="32">parts</name><op:operator pos:line="301" pos:column="37">.</op:operator><name pos:line="301" pos:column="38">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="302" pos:column="13">Assert</name><op:operator pos:line="302" pos:column="19">.</op:operator><name pos:line="302" pos:column="20">AreEqual</name></name><argument_list pos:line="302" pos:column="28">(<argument><expr><name><name pos:line="302" pos:column="29">parts</name><index pos:line="302" pos:column="34">[<expr><lit:literal type="number" pos:line="302" pos:column="35">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name pos:line="302" pos:column="39">term1</name><op:operator pos:line="302" pos:column="44">.</op:operator><name pos:line="302" pos:column="45">ToLower</name></name><argument_list pos:line="302" pos:column="52">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="304" pos:column="13">parts</name> <op:operator pos:line="304" pos:column="19">=</op:operator> <call><name><name pos:line="304" pos:column="21">WordSplitter</name><op:operator pos:line="304" pos:column="33">.</op:operator><name pos:line="304" pos:column="34">ExtractSearchTerms</name></name><argument_list pos:line="304" pos:column="52">(<argument><expr><name pos:line="304" pos:column="53">term2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="305" pos:column="13">Assert</name><op:operator pos:line="305" pos:column="19">.</op:operator><name pos:line="305" pos:column="20">AreEqual</name></name><argument_list pos:line="305" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="305" pos:column="29">3</lit:literal></expr></argument>, <argument><expr><name><name pos:line="305" pos:column="32">parts</name><op:operator pos:line="305" pos:column="37">.</op:operator><name pos:line="305" pos:column="38">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="306" pos:column="13">Assert</name><op:operator pos:line="306" pos:column="19">.</op:operator><name pos:line="306" pos:column="20">AreEqual</name></name><argument_list pos:line="306" pos:column="28">(<argument><expr><name><name pos:line="306" pos:column="29">parts</name><index pos:line="306" pos:column="34">[<expr><lit:literal type="number" pos:line="306" pos:column="35">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name pos:line="306" pos:column="39">term2</name><op:operator pos:line="306" pos:column="44">.</op:operator><name pos:line="306" pos:column="45">ToLower</name></name><argument_list pos:line="306" pos:column="52">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="308" pos:column="13">parts</name> <op:operator pos:line="308" pos:column="19">=</op:operator> <call><name><name pos:line="308" pos:column="21">WordSplitter</name><op:operator pos:line="308" pos:column="33">.</op:operator><name pos:line="308" pos:column="34">ExtractSearchTerms</name></name><argument_list pos:line="308" pos:column="52">(<argument><expr><name pos:line="308" pos:column="53">term1</name> <op:operator pos:line="308" pos:column="59">+</op:operator> <lit:literal type="string" pos:line="308" pos:column="61">" "</lit:literal> <op:operator pos:line="308" pos:column="65">+</op:operator> <name pos:line="308" pos:column="67">term2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="309" pos:column="13">Assert</name><op:operator pos:line="309" pos:column="19">.</op:operator><name pos:line="309" pos:column="20">AreEqual</name></name><argument_list pos:line="309" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="309" pos:column="29">5</lit:literal></expr></argument>, <argument><expr><name><name pos:line="309" pos:column="32">parts</name><op:operator pos:line="309" pos:column="37">.</op:operator><name pos:line="309" pos:column="38">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="310" pos:column="13">Assert</name><op:operator pos:line="310" pos:column="19">.</op:operator><name pos:line="310" pos:column="20">AreEqual</name></name><argument_list pos:line="310" pos:column="28">(<argument><expr><name><name pos:line="310" pos:column="29">parts</name><index pos:line="310" pos:column="34">[<expr><lit:literal type="number" pos:line="310" pos:column="35">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name pos:line="310" pos:column="39">term1</name><op:operator pos:line="310" pos:column="44">.</op:operator><name pos:line="310" pos:column="45">ToLower</name></name><argument_list pos:line="310" pos:column="52">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="311" pos:column="13">Assert</name><op:operator pos:line="311" pos:column="19">.</op:operator><name pos:line="311" pos:column="20">AreEqual</name></name><argument_list pos:line="311" pos:column="28">(<argument><expr><name><name pos:line="311" pos:column="29">parts</name><index pos:line="311" pos:column="34">[<expr><lit:literal type="number" pos:line="311" pos:column="35">1</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name pos:line="311" pos:column="39">term2</name><op:operator pos:line="311" pos:column="44">.</op:operator><name pos:line="311" pos:column="45">ToLower</name></name><argument_list pos:line="311" pos:column="52">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="314" pos:column="9">[<expr><name pos:line="314" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="315" pos:column="9">public</specifier> <name pos:line="315" pos:column="16">void</name></type> <name pos:line="315" pos:column="21">TestPerformance</name><parameter_list pos:line="315" pos:column="36">()</parameter_list>
        <block pos:line="316" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="317" pos:column="13">var</name></type> <name pos:line="317" pos:column="17">watch</name> <init pos:line="317" pos:column="23">= <expr><op:operator pos:line="317" pos:column="25">new</op:operator> <call><name pos:line="317" pos:column="29">Stopwatch</name><argument_list pos:line="317" pos:column="38">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="318" pos:column="13">watch</name><op:operator pos:line="318" pos:column="18">.</op:operator><name pos:line="318" pos:column="19">Start</name></name><argument_list pos:line="318" pos:column="24">()</argument_list></call></expr>;</expr_stmt>
            <for pos:line="319" pos:column="13">for (<init><decl><type><name pos:line="319" pos:column="18">int</name></type> <name pos:line="319" pos:column="22">i</name> <init pos:line="319" pos:column="24">= <expr><lit:literal type="number" pos:line="319" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="319" pos:column="29">i</name> <op:operator pos:line="319" pos:column="31">&lt;</op:operator> <lit:literal type="number" pos:line="319" pos:column="33">500</lit:literal></expr>;</condition> <incr><expr><name pos:line="319" pos:column="38">i</name><op:operator pos:line="319" pos:column="39">++</op:operator></expr></incr>)
            <block pos:line="320" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="321" pos:column="17">string</name><index pos:line="321" pos:column="23">[]</index></type> <name pos:line="321" pos:column="26">parts</name> <init pos:line="321" pos:column="32">= <expr><call><name><name pos:line="321" pos:column="34">wordSplitter</name><op:operator pos:line="321" pos:column="46">.</op:operator><name pos:line="321" pos:column="47">ExtractWords</name></name><argument_list pos:line="321" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="321" pos:column="60">"_beginInUnderscore"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="322" pos:column="17">Assert</name><op:operator pos:line="322" pos:column="23">.</op:operator><name pos:line="322" pos:column="24">IsTrue</name></name><argument_list pos:line="322" pos:column="30">(<argument><expr><name><name pos:line="322" pos:column="31">parts</name><op:operator pos:line="322" pos:column="36">.</op:operator><name pos:line="322" pos:column="37">Length</name></name> <op:operator pos:line="322" pos:column="44">==</op:operator> <lit:literal type="number" pos:line="322" pos:column="47">3</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><call><name><name pos:line="324" pos:column="13">watch</name><op:operator pos:line="324" pos:column="18">.</op:operator><name pos:line="324" pos:column="19">Stop</name></name><argument_list pos:line="324" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="325" pos:column="13">Assert</name><op:operator pos:line="325" pos:column="19">.</op:operator><name pos:line="325" pos:column="20">IsTrue</name></name><argument_list pos:line="325" pos:column="26">(<argument><expr><name><name pos:line="325" pos:column="27">watch</name><op:operator pos:line="325" pos:column="32">.</op:operator><name pos:line="325" pos:column="33">ElapsedMilliseconds</name></name> <op:operator pos:line="325" pos:column="53">&lt;</op:operator> <lit:literal type="number" pos:line="325" pos:column="55">500</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>




        <function><type><attribute pos:line="331" pos:column="9">[<expr><name pos:line="331" pos:column="10">SetUp</name></expr>]</attribute>
        <specifier pos:line="332" pos:column="9">public</specifier> <name pos:line="332" pos:column="16">void</name></type> <name pos:line="332" pos:column="21">ResetContract</name><parameter_list pos:line="332" pos:column="34">()</parameter_list>
        <block pos:line="333" pos:column="9">{
            <expr_stmt><expr><name pos:line="334" pos:column="13">contractFailed</name> <op:operator pos:line="334" pos:column="28">=</op:operator> <lit:literal type="boolean" pos:line="334" pos:column="30">false</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="335" pos:column="13">Contract</name><op:operator pos:line="335" pos:column="21">.</op:operator><name pos:line="335" pos:column="22">ContractFailed</name></name> <op:operator pos:line="335" pos:column="37">+=</op:operator> <lambda><parameter_list pos:line="335" pos:column="40">(<param><decl><name pos:line="335" pos:column="41">sender</name></decl></param>, <param><decl><name pos:line="335" pos:column="49">e</name></decl></param>)</parameter_list> <op:operator pos:line="335" pos:column="52">=&gt;</op:operator>
            <block pos:line="336" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="337" pos:column="17">e</name><op:operator pos:line="337" pos:column="18">.</op:operator><name pos:line="337" pos:column="19">SetHandled</name></name><argument_list pos:line="337" pos:column="29">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="338" pos:column="17">e</name><op:operator pos:line="338" pos:column="18">.</op:operator><name pos:line="338" pos:column="19">SetUnwind</name></name><argument_list pos:line="338" pos:column="28">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="339" pos:column="17">contractFailed</name> <op:operator pos:line="339" pos:column="32">=</op:operator> <lit:literal type="boolean" pos:line="339" pos:column="34">true</lit:literal></expr>;</expr_stmt>
            }</block></lambda></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="343" pos:column="9">[<expr><name pos:line="343" pos:column="10">TestFixtureSetUp</name></expr>]</attribute>
        <specifier pos:line="344" pos:column="9">public</specifier> <name pos:line="344" pos:column="16">void</name></type> <name pos:line="344" pos:column="21">SetUp</name><parameter_list pos:line="344" pos:column="26">()</parameter_list>
        <block pos:line="345" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="346" pos:column="13">TestUtils</name><op:operator pos:line="346" pos:column="22">.</op:operator><name pos:line="346" pos:column="23">InitializeDefaultExtensionPoints</name></name><argument_list pos:line="346" pos:column="55">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="348" pos:column="13">wordSplitter</name> <op:operator pos:line="348" pos:column="26">=</op:operator> <call><name><name pos:line="348" pos:column="28">ExtensionPointsRepository</name><op:operator pos:line="348" pos:column="53">.</op:operator><name pos:line="348" pos:column="54">Instance</name><op:operator pos:line="348" pos:column="62">.</op:operator><name pos:line="348" pos:column="63">GetWordSplitterImplementation</name></name><argument_list pos:line="348" pos:column="92">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <decl_stmt><decl><type><specifier pos:line="351" pos:column="9">private</specifier> <name pos:line="351" pos:column="17">bool</name></type> <name pos:line="351" pos:column="22">contractFailed</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="352" pos:column="9">private</specifier> <name pos:line="352" pos:column="17">IWordSplitter</name></type> <name pos:line="352" pos:column="31">wordSplitter</name></decl>;</decl_stmt>
    }</block></class>
}</block></namespace>
</unit>
