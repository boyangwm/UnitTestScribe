<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Core\Core\SandoQueryParser.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Text</name><op:operator pos:line="4" pos:column="18">.</op:operator><name pos:line="4" pos:column="19">RegularExpressions</name></name>;</using>

<namespace pos:line="6" pos:column="1">namespace <name><name pos:line="6" pos:column="11">Sando</name><op:operator pos:line="6" pos:column="16">.</op:operator><name pos:line="6" pos:column="17">Core</name><op:operator pos:line="6" pos:column="21">.</op:operator><name pos:line="6" pos:column="22">Tools</name></name>
<block pos:line="7" pos:column="1">{
    <class><specifier pos:line="8" pos:column="5">public</specifier> class <name pos:line="8" pos:column="18">SandoQueryParser</name>
    <block pos:line="9" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="10" pos:column="9">private</specifier> <specifier pos:line="10" pos:column="17">const</specifier> <name pos:line="10" pos:column="23">string</name></type> <name pos:line="10" pos:column="30">LocationFilterRegex</name> <init pos:line="10" pos:column="50">= <expr><lit:literal type="string" pos:line="10" pos:column="52">@"(?&lt;filter&gt;\-?location:(?&lt;location&gt;(""[\w\:\.\\\(\)\[\]\{\}\* ]+"")|[\w\:\.\\\(\)\[\]\{\}\*]+))"</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="11" pos:column="9">private</specifier> <specifier pos:line="11" pos:column="17">const</specifier> <name pos:line="11" pos:column="23">string</name></type> <name pos:line="11" pos:column="30">LiteralSearchRegex</name> <init pos:line="11" pos:column="49">= <expr><lit:literal type="string" pos:line="11" pos:column="51">@"(?&lt;literal&gt;\-?""(&lt;literalcontent&gt;[^""\\]*(?:\\.[^""\\]*)*)"")"</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="12" pos:column="9">private</specifier> <specifier pos:line="12" pos:column="17">const</specifier> <name pos:line="12" pos:column="23">string</name></type> <name pos:line="12" pos:column="30">FileExtensionFilterRegex</name> <init pos:line="12" pos:column="55">= <expr><lit:literal type="string" pos:line="12" pos:column="57">@"(?&lt;filter&gt;\-?file:\.?(?&lt;fileext&gt;\w+))"</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="13" pos:column="9">private</specifier> <specifier pos:line="13" pos:column="17">const</specifier> <name pos:line="13" pos:column="23">string</name></type> <name pos:line="13" pos:column="30">ProgramElementTypeFilterRegex</name> <init pos:line="13" pos:column="60">= <expr><lit:literal type="string" pos:line="13" pos:column="62">@"(?&lt;filter&gt;\-?type:(?&lt;type&gt;field|method|property|enum|struct|class))"</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="14" pos:column="9">private</specifier> <specifier pos:line="14" pos:column="17">const</specifier> <name pos:line="14" pos:column="23">string</name></type> <name pos:line="14" pos:column="30">AccessLevelFilterRegex</name> <init pos:line="14" pos:column="53">= <expr><lit:literal type="string" pos:line="14" pos:column="55">@"(?&lt;filter&gt;\-?access:(?&lt;access&gt;public|private|protected|internal))"</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="15" pos:column="9">private</specifier> <specifier pos:line="15" pos:column="17">const</specifier> <name pos:line="15" pos:column="23">string</name></type> <name pos:line="15" pos:column="30">InvalidCharactersRegex</name> <init pos:line="15" pos:column="53">= <expr><lit:literal type="string" pos:line="15" pos:column="55">"[^a-zA-Z0-9_\\s\\*\\-]"</lit:literal></expr></init></decl>;</decl_stmt>

        <function><type><specifier pos:line="17" pos:column="9">public</specifier> <name pos:line="17" pos:column="16">SandoQueryDescription</name></type> <name pos:line="17" pos:column="38">Parse</name><parameter_list pos:line="17" pos:column="43">(<param><decl><type><name pos:line="17" pos:column="44">string</name></type> <name pos:line="17" pos:column="51">query</name></decl></param>)</parameter_list>
        <block pos:line="18" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="19" pos:column="13">var</name></type> <name pos:line="19" pos:column="17">sandoQueryDescription</name> <init pos:line="19" pos:column="39">= <expr><op:operator pos:line="19" pos:column="41">new</op:operator> <name pos:line="19" pos:column="45">SandoQueryDescription</name> <block pos:line="19" pos:column="67">{<expr><name pos:line="19" pos:column="68">OriginalQuery</name> <op:operator pos:line="19" pos:column="82">=</op:operator> <name pos:line="19" pos:column="84">query</name></expr>}</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="20" pos:column="13">var</name></type> <name pos:line="20" pos:column="17">parseFunctions</name> <init pos:line="20" pos:column="32">= <expr><call><name pos:line="20" pos:column="34">GetQueryParseFunctions</name><argument_list pos:line="20" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="21" pos:column="13">var</name></type> <name pos:line="21" pos:column="17">analyzedQuery</name> <init pos:line="21" pos:column="31">= <expr><name pos:line="21" pos:column="33">query</name></expr></init></decl>;</decl_stmt>
            <foreach pos:line="22" pos:column="13">foreach (<init><decl><type><name pos:line="22" pos:column="22">var</name></type> <name pos:line="22" pos:column="26">function</name> <range pos:line="22" pos:column="35">in <expr><name pos:line="22" pos:column="38">parseFunctions</name></expr></range></decl></init>)
            <block pos:line="23" pos:column="13">{
                <if pos:line="24" pos:column="17">if <condition pos:line="24" pos:column="20">(<expr><call><name><name pos:line="24" pos:column="21">String</name><op:operator pos:line="24" pos:column="27">.</op:operator><name pos:line="24" pos:column="28">IsNullOrWhiteSpace</name></name><argument_list pos:line="24" pos:column="46">(<argument><expr><name pos:line="24" pos:column="47">analyzedQuery</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="24" pos:column="62">
                    <return pos:line="25" pos:column="21">return <expr><name pos:line="25" pos:column="28">sandoQueryDescription</name></expr>;</return></then></if>
                <expr_stmt><expr><name pos:line="26" pos:column="17">analyzedQuery</name> <op:operator pos:line="26" pos:column="31">=</op:operator> <call><name pos:line="26" pos:column="33">function</name><argument_list pos:line="26" pos:column="41">(<argument><expr><name pos:line="26" pos:column="42">analyzedQuery</name></expr></argument>, <argument><expr><name pos:line="26" pos:column="57">sandoQueryDescription</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
            <return pos:line="28" pos:column="13">return <expr><name pos:line="28" pos:column="20">sandoQueryDescription</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="31" pos:column="9">private</specifier> <specifier pos:line="31" pos:column="17">static</specifier> <name><name pos:line="31" pos:column="24">IEnumerable</name><argument_list pos:line="31" pos:column="35">&lt;<argument><name><name pos:line="31" pos:column="36">Func</name><argument_list pos:line="31" pos:column="40">&lt;<argument><name pos:line="31" pos:column="41">string</name></argument>, <argument><name pos:line="31" pos:column="49">SandoQueryDescription</name></argument>, <argument><name pos:line="31" pos:column="72">string</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="31" pos:column="81">GetQueryParseFunctions</name><parameter_list pos:line="31" pos:column="103">()</parameter_list>
        <block pos:line="32" pos:column="9">{
            <return pos:line="33" pos:column="13">return <expr><op:operator pos:line="33" pos:column="20">new</op:operator> <name><name pos:line="33" pos:column="24">List</name><argument_list pos:line="33" pos:column="28">&lt;<argument><name><name pos:line="33" pos:column="29">Func</name><argument_list pos:line="33" pos:column="33">&lt;<argument><name pos:line="33" pos:column="34">string</name></argument>, <argument><name pos:line="33" pos:column="42">SandoQueryDescription</name></argument>, <argument><name pos:line="33" pos:column="65">string</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name>
                <block pos:line="34" pos:column="17">{
                    <expr><name pos:line="35" pos:column="21">ParseLocationFilters</name></expr><op:operator pos:line="35" pos:column="41">,</op:operator>
                    <expr><name pos:line="36" pos:column="21">ParseLiteralSearchTerms</name></expr><op:operator pos:line="36" pos:column="44">,</op:operator>
                    <expr><name pos:line="37" pos:column="21">ParseFileExtensionFilters</name></expr><op:operator pos:line="37" pos:column="46">,</op:operator>
                    <expr><name pos:line="38" pos:column="21">ParseProgramElementTypeFilters</name></expr><op:operator pos:line="38" pos:column="51">,</op:operator>
                    <expr><name pos:line="39" pos:column="21">ParseAccessLevelFilters</name></expr><op:operator pos:line="39" pos:column="44">,</op:operator>
                    <expr><name pos:line="40" pos:column="21">ParseNormalSearchTerms</name></expr>
                }</block></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="44" pos:column="9">private</specifier> <specifier pos:line="44" pos:column="17">static</specifier> <name pos:line="44" pos:column="24">string</name></type> <name pos:line="44" pos:column="31">ParseLocationFilters</name><parameter_list pos:line="44" pos:column="51">(<param><decl><type><name pos:line="44" pos:column="52">string</name></type> <name pos:line="44" pos:column="59">query</name></decl></param>, <param><decl><type><name pos:line="44" pos:column="66">SandoQueryDescription</name></type> <name pos:line="44" pos:column="88">sandoQueryDescription</name></decl></param>)</parameter_list>
        <block pos:line="45" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="46" pos:column="13">var</name></type> <name pos:line="46" pos:column="17">matches</name> <init pos:line="46" pos:column="25">= <expr><call><name><name pos:line="46" pos:column="27">Regex</name><op:operator pos:line="46" pos:column="32">.</op:operator><name pos:line="46" pos:column="33">Matches</name></name><argument_list pos:line="46" pos:column="40">(<argument><expr><name pos:line="46" pos:column="41">query</name></expr></argument>, <argument><expr><name pos:line="46" pos:column="48">LocationFilterRegex</name></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="69">RegexOptions</name><op:operator pos:line="46" pos:column="81">.</op:operator><name pos:line="46" pos:column="82">IgnoreCase</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="47" pos:column="13">foreach (<init><decl><type><name pos:line="47" pos:column="22">Match</name></type> <name pos:line="47" pos:column="28">match</name> <range pos:line="47" pos:column="34">in <expr><name pos:line="47" pos:column="37">matches</name></expr></range></decl></init>)
            <block pos:line="48" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="49" pos:column="17">var</name></type> <name pos:line="49" pos:column="21">matchedFilter</name> <init pos:line="49" pos:column="35">= <expr><name><name pos:line="49" pos:column="37">match</name><op:operator pos:line="49" pos:column="42">.</op:operator><name pos:line="49" pos:column="43">Groups</name><index pos:line="49" pos:column="49">[<expr><lit:literal type="string" pos:line="49" pos:column="50">"filter"</lit:literal></expr>]</index></name><op:operator pos:line="49" pos:column="59">.</op:operator><name pos:line="49" pos:column="60">Value</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="50" pos:column="17">var</name></type> <name pos:line="50" pos:column="21">matchedLocation</name> <init pos:line="50" pos:column="37">= <expr><name><name pos:line="50" pos:column="39">match</name><op:operator pos:line="50" pos:column="44">.</op:operator><name pos:line="50" pos:column="45">Groups</name><index pos:line="50" pos:column="51">[<expr><lit:literal type="string" pos:line="50" pos:column="52">"location"</lit:literal></expr>]</index></name><op:operator pos:line="50" pos:column="63">.</op:operator><name pos:line="50" pos:column="64">Value</name></expr></init></decl>;</decl_stmt>
                <if pos:line="51" pos:column="17">if <condition pos:line="51" pos:column="20">(<expr><op:operator pos:line="51" pos:column="21">!</op:operator><call><name><name pos:line="51" pos:column="22">String</name><op:operator pos:line="51" pos:column="28">.</op:operator><name pos:line="51" pos:column="29">IsNullOrWhiteSpace</name></name><argument_list pos:line="51" pos:column="47">(<argument><expr><name pos:line="51" pos:column="48">matchedLocation</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="51" pos:column="65">
                <block pos:line="52" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="53" pos:column="21">sandoQueryDescription</name><op:operator pos:line="53" pos:column="42">.</op:operator><name pos:line="53" pos:column="43">Locations</name><op:operator pos:line="53" pos:column="52">.</op:operator><name pos:line="53" pos:column="53">Add</name></name><argument_list pos:line="53" pos:column="56">(<argument><expr><name pos:line="53" pos:column="57">matchedLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name pos:line="55" pos:column="17">query</name> <op:operator pos:line="55" pos:column="23">=</op:operator> <call><name><name pos:line="55" pos:column="25">query</name><op:operator pos:line="55" pos:column="30">.</op:operator><name pos:line="55" pos:column="31">Replace</name></name><argument_list pos:line="55" pos:column="38">(<argument><expr><name pos:line="55" pos:column="39">matchedFilter</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="55" pos:column="54">" "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
            <return pos:line="57" pos:column="13">return <expr><name pos:line="57" pos:column="20">query</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="60" pos:column="9">private</specifier> <specifier pos:line="60" pos:column="17">static</specifier> <name pos:line="60" pos:column="24">string</name></type> <name pos:line="60" pos:column="31">ParseLiteralSearchTerms</name><parameter_list pos:line="60" pos:column="54">(<param><decl><type><name pos:line="60" pos:column="55">string</name></type> <name pos:line="60" pos:column="62">query</name></decl></param>, <param><decl><type><name pos:line="60" pos:column="69">SandoQueryDescription</name></type> <name pos:line="60" pos:column="91">sandoQueryDescription</name></decl></param>)</parameter_list>
        <block pos:line="61" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="62" pos:column="13">var</name></type> <name pos:line="62" pos:column="17">matches</name> <init pos:line="62" pos:column="25">= <expr><call><name><name pos:line="62" pos:column="27">Regex</name><op:operator pos:line="62" pos:column="32">.</op:operator><name pos:line="62" pos:column="33">Matches</name></name><argument_list pos:line="62" pos:column="40">(<argument><expr><name pos:line="62" pos:column="41">query</name></expr></argument>, <argument><expr><name pos:line="62" pos:column="48">LiteralSearchRegex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="63" pos:column="13">foreach (<init><decl><type><name pos:line="63" pos:column="22">Match</name></type> <name pos:line="63" pos:column="28">match</name> <range pos:line="63" pos:column="34">in <expr><name pos:line="63" pos:column="37">matches</name></expr></range></decl></init>)
            <block pos:line="64" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="65" pos:column="17">var</name></type> <name pos:line="65" pos:column="21">matchedLiteral</name> <init pos:line="65" pos:column="36">= <expr><name><name pos:line="65" pos:column="38">match</name><op:operator pos:line="65" pos:column="43">.</op:operator><name pos:line="65" pos:column="44">Groups</name><index pos:line="65" pos:column="50">[<expr><lit:literal type="string" pos:line="65" pos:column="51">"literal"</lit:literal></expr>]</index></name><op:operator pos:line="65" pos:column="61">.</op:operator><name pos:line="65" pos:column="62">Value</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="66" pos:column="17">var</name></type> <name pos:line="66" pos:column="21">matchedLiteralContent</name> <init pos:line="66" pos:column="43">= <expr><name><name pos:line="66" pos:column="45">match</name><op:operator pos:line="66" pos:column="50">.</op:operator><name pos:line="66" pos:column="51">Groups</name><index pos:line="66" pos:column="57">[<expr><lit:literal type="string" pos:line="66" pos:column="58">"literalcontent"</lit:literal></expr>]</index></name><op:operator pos:line="66" pos:column="75">.</op:operator><name pos:line="66" pos:column="76">Value</name></expr></init></decl>;</decl_stmt>
                <if pos:line="67" pos:column="17">if <condition pos:line="67" pos:column="20">(<expr><op:operator pos:line="67" pos:column="21">!</op:operator><call><name><name pos:line="67" pos:column="22">String</name><op:operator pos:line="67" pos:column="28">.</op:operator><name pos:line="67" pos:column="29">IsNullOrWhiteSpace</name></name><argument_list pos:line="67" pos:column="47">(<argument><expr><name pos:line="67" pos:column="48">matchedLiteralContent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="67" pos:column="71">
                <block pos:line="68" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="69" pos:column="21">sandoQueryDescription</name><op:operator pos:line="69" pos:column="42">.</op:operator><name pos:line="69" pos:column="43">LiteralSearchTerms</name><op:operator pos:line="69" pos:column="61">.</op:operator><name pos:line="69" pos:column="62">Add</name></name><argument_list pos:line="69" pos:column="65">(<argument><expr><name pos:line="69" pos:column="66">matchedLiteral</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name pos:line="71" pos:column="17">query</name> <op:operator pos:line="71" pos:column="23">=</op:operator> <call><name><name pos:line="71" pos:column="25">query</name><op:operator pos:line="71" pos:column="30">.</op:operator><name pos:line="71" pos:column="31">Replace</name></name><argument_list pos:line="71" pos:column="38">(<argument><expr><name pos:line="71" pos:column="39">matchedLiteral</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="71" pos:column="55">" "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
            <expr_stmt><expr><name pos:line="73" pos:column="13">query</name> <op:operator pos:line="73" pos:column="19">=</op:operator> <call><name><name pos:line="73" pos:column="21">query</name><op:operator pos:line="73" pos:column="26">.</op:operator><name pos:line="73" pos:column="27">Replace</name></name><argument_list pos:line="73" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="73" pos:column="35">"\""</lit:literal></expr></argument>, <argument><expr><name><name pos:line="73" pos:column="41">String</name><op:operator pos:line="73" pos:column="47">.</op:operator><name pos:line="73" pos:column="48">Empty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="74" pos:column="13">return <expr><name pos:line="74" pos:column="20">query</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="77" pos:column="9">private</specifier> <specifier pos:line="77" pos:column="17">static</specifier> <name pos:line="77" pos:column="24">string</name></type> <name pos:line="77" pos:column="31">ParseFileExtensionFilters</name><parameter_list pos:line="77" pos:column="56">(<param><decl><type><name pos:line="77" pos:column="57">string</name></type> <name pos:line="77" pos:column="64">query</name></decl></param>, <param><decl><type><name pos:line="77" pos:column="71">SandoQueryDescription</name></type> <name pos:line="77" pos:column="93">sandoQueryDescription</name></decl></param>)</parameter_list>
        <block pos:line="78" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="79" pos:column="13">var</name></type> <name pos:line="79" pos:column="17">matches</name> <init pos:line="79" pos:column="25">= <expr><call><name><name pos:line="79" pos:column="27">Regex</name><op:operator pos:line="79" pos:column="32">.</op:operator><name pos:line="79" pos:column="33">Matches</name></name><argument_list pos:line="79" pos:column="40">(<argument><expr><name pos:line="79" pos:column="41">query</name></expr></argument>, <argument><expr><name pos:line="79" pos:column="48">FileExtensionFilterRegex</name></expr></argument>, <argument><expr><name><name pos:line="79" pos:column="74">RegexOptions</name><op:operator pos:line="79" pos:column="86">.</op:operator><name pos:line="79" pos:column="87">IgnoreCase</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="80" pos:column="13">foreach (<init><decl><type><name pos:line="80" pos:column="22">Match</name></type> <name pos:line="80" pos:column="28">match</name> <range pos:line="80" pos:column="34">in <expr><name pos:line="80" pos:column="37">matches</name></expr></range></decl></init>)
            <block pos:line="81" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="82" pos:column="17">var</name></type> <name pos:line="82" pos:column="21">matchedFilter</name> <init pos:line="82" pos:column="35">= <expr><name><name pos:line="82" pos:column="37">match</name><op:operator pos:line="82" pos:column="42">.</op:operator><name pos:line="82" pos:column="43">Groups</name><index pos:line="82" pos:column="49">[<expr><lit:literal type="string" pos:line="82" pos:column="50">"filter"</lit:literal></expr>]</index></name><op:operator pos:line="82" pos:column="59">.</op:operator><name pos:line="82" pos:column="60">Value</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="83" pos:column="17">var</name></type> <name pos:line="83" pos:column="21">matchedFileExtension</name> <init pos:line="83" pos:column="42">= <expr><name><name pos:line="83" pos:column="44">match</name><op:operator pos:line="83" pos:column="49">.</op:operator><name pos:line="83" pos:column="50">Groups</name><index pos:line="83" pos:column="56">[<expr><lit:literal type="string" pos:line="83" pos:column="57">"fileext"</lit:literal></expr>]</index></name><op:operator pos:line="83" pos:column="67">.</op:operator><call><name><name pos:line="83" pos:column="68">Value</name><op:operator pos:line="83" pos:column="73">.</op:operator><name pos:line="83" pos:column="74">ToLower</name></name><argument_list pos:line="83" pos:column="81">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="84" pos:column="17">if <condition pos:line="84" pos:column="20">(<expr><call><name><name pos:line="84" pos:column="21">matchedFilter</name><op:operator pos:line="84" pos:column="34">.</op:operator><name pos:line="84" pos:column="35">StartsWith</name></name><argument_list pos:line="84" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="84" pos:column="46">"-"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="84" pos:column="51">
                    <expr_stmt><expr><call><name><name pos:line="85" pos:column="21">sandoQueryDescription</name><op:operator pos:line="85" pos:column="42">.</op:operator><name pos:line="85" pos:column="43">FileExtensions</name><op:operator pos:line="85" pos:column="57">.</op:operator><name pos:line="85" pos:column="58">Add</name></name><argument_list pos:line="85" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="85" pos:column="62">"-"</lit:literal> <op:operator pos:line="85" pos:column="66">+</op:operator> <name pos:line="85" pos:column="68">matchedFileExtension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
                <else pos:line="86" pos:column="17">else
                    <expr_stmt><expr><call><name><name pos:line="87" pos:column="21">sandoQueryDescription</name><op:operator pos:line="87" pos:column="42">.</op:operator><name pos:line="87" pos:column="43">FileExtensions</name><op:operator pos:line="87" pos:column="57">.</op:operator><name pos:line="87" pos:column="58">Add</name></name><argument_list pos:line="87" pos:column="61">(<argument><expr><name pos:line="87" pos:column="62">matchedFileExtension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
                <expr_stmt><expr><name pos:line="88" pos:column="17">query</name> <op:operator pos:line="88" pos:column="23">=</op:operator> <call><name><name pos:line="88" pos:column="25">query</name><op:operator pos:line="88" pos:column="30">.</op:operator><name pos:line="88" pos:column="31">Replace</name></name><argument_list pos:line="88" pos:column="38">(<argument><expr><name pos:line="88" pos:column="39">matchedFilter</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="88" pos:column="54">" "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
            <return pos:line="90" pos:column="13">return <expr><name pos:line="90" pos:column="20">query</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="93" pos:column="9">private</specifier> <specifier pos:line="93" pos:column="17">static</specifier> <name pos:line="93" pos:column="24">string</name></type> <name pos:line="93" pos:column="31">ParseProgramElementTypeFilters</name><parameter_list pos:line="93" pos:column="61">(<param><decl><type><name pos:line="93" pos:column="62">string</name></type> <name pos:line="93" pos:column="69">query</name></decl></param>, <param><decl><type><name pos:line="93" pos:column="76">SandoQueryDescription</name></type> <name pos:line="93" pos:column="98">sandoQueryDescription</name></decl></param>)</parameter_list>
        <block pos:line="94" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="95" pos:column="13">var</name></type> <name pos:line="95" pos:column="17">matches</name> <init pos:line="95" pos:column="25">= <expr><call><name><name pos:line="95" pos:column="27">Regex</name><op:operator pos:line="95" pos:column="32">.</op:operator><name pos:line="95" pos:column="33">Matches</name></name><argument_list pos:line="95" pos:column="40">(<argument><expr><name pos:line="95" pos:column="41">query</name></expr></argument>, <argument><expr><name pos:line="95" pos:column="48">ProgramElementTypeFilterRegex</name></expr></argument>, <argument><expr><name><name pos:line="95" pos:column="79">RegexOptions</name><op:operator pos:line="95" pos:column="91">.</op:operator><name pos:line="95" pos:column="92">IgnoreCase</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="96" pos:column="13">foreach (<init><decl><type><name pos:line="96" pos:column="22">Match</name></type> <name pos:line="96" pos:column="28">match</name> <range pos:line="96" pos:column="34">in <expr><name pos:line="96" pos:column="37">matches</name></expr></range></decl></init>)
            <block pos:line="97" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="98" pos:column="17">var</name></type> <name pos:line="98" pos:column="21">matchedFilter</name> <init pos:line="98" pos:column="35">= <expr><name><name pos:line="98" pos:column="37">match</name><op:operator pos:line="98" pos:column="42">.</op:operator><name pos:line="98" pos:column="43">Groups</name><index pos:line="98" pos:column="49">[<expr><lit:literal type="string" pos:line="98" pos:column="50">"filter"</lit:literal></expr>]</index></name><op:operator pos:line="98" pos:column="59">.</op:operator><name pos:line="98" pos:column="60">Value</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="99" pos:column="17">var</name></type> <name pos:line="99" pos:column="21">matchedProgramElementType</name> <init pos:line="99" pos:column="47">= <expr><name><name pos:line="99" pos:column="49">match</name><op:operator pos:line="99" pos:column="54">.</op:operator><name pos:line="99" pos:column="55">Groups</name><index pos:line="99" pos:column="61">[<expr><lit:literal type="string" pos:line="99" pos:column="62">"type"</lit:literal></expr>]</index></name><op:operator pos:line="99" pos:column="69">.</op:operator><call><name><name pos:line="99" pos:column="70">Value</name><op:operator pos:line="99" pos:column="75">.</op:operator><name pos:line="99" pos:column="76">ToLower</name></name><argument_list pos:line="99" pos:column="83">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="100" pos:column="17">if <condition pos:line="100" pos:column="20">(<expr><call><name><name pos:line="100" pos:column="21">matchedFilter</name><op:operator pos:line="100" pos:column="34">.</op:operator><name pos:line="100" pos:column="35">StartsWith</name></name><argument_list pos:line="100" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="100" pos:column="46">"-"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="100" pos:column="51">
                    <expr_stmt><expr><call><name><name pos:line="101" pos:column="21">sandoQueryDescription</name><op:operator pos:line="101" pos:column="42">.</op:operator><name pos:line="101" pos:column="43">ProgramElementTypes</name><op:operator pos:line="101" pos:column="62">.</op:operator><name pos:line="101" pos:column="63">Add</name></name><argument_list pos:line="101" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="101" pos:column="67">"-"</lit:literal> <op:operator pos:line="101" pos:column="71">+</op:operator> <name pos:line="101" pos:column="73">matchedProgramElementType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
                <else pos:line="102" pos:column="17">else
                    <expr_stmt><expr><call><name><name pos:line="103" pos:column="21">sandoQueryDescription</name><op:operator pos:line="103" pos:column="42">.</op:operator><name pos:line="103" pos:column="43">ProgramElementTypes</name><op:operator pos:line="103" pos:column="62">.</op:operator><name pos:line="103" pos:column="63">Add</name></name><argument_list pos:line="103" pos:column="66">(<argument><expr><name pos:line="103" pos:column="67">matchedProgramElementType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
                <expr_stmt><expr><name pos:line="104" pos:column="17">query</name> <op:operator pos:line="104" pos:column="23">=</op:operator> <call><name><name pos:line="104" pos:column="25">query</name><op:operator pos:line="104" pos:column="30">.</op:operator><name pos:line="104" pos:column="31">Replace</name></name><argument_list pos:line="104" pos:column="38">(<argument><expr><name pos:line="104" pos:column="39">matchedFilter</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="104" pos:column="54">" "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
            <return pos:line="106" pos:column="13">return <expr><name pos:line="106" pos:column="20">query</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="109" pos:column="9">private</specifier> <specifier pos:line="109" pos:column="17">static</specifier> <name pos:line="109" pos:column="24">string</name></type> <name pos:line="109" pos:column="31">ParseAccessLevelFilters</name><parameter_list pos:line="109" pos:column="54">(<param><decl><type><name pos:line="109" pos:column="55">string</name></type> <name pos:line="109" pos:column="62">query</name></decl></param>, <param><decl><type><name pos:line="109" pos:column="69">SandoQueryDescription</name></type> <name pos:line="109" pos:column="91">sandoQueryDescription</name></decl></param>)</parameter_list>
        <block pos:line="110" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="111" pos:column="13">var</name></type> <name pos:line="111" pos:column="17">matches</name> <init pos:line="111" pos:column="25">= <expr><call><name><name pos:line="111" pos:column="27">Regex</name><op:operator pos:line="111" pos:column="32">.</op:operator><name pos:line="111" pos:column="33">Matches</name></name><argument_list pos:line="111" pos:column="40">(<argument><expr><name pos:line="111" pos:column="41">query</name></expr></argument>, <argument><expr><name pos:line="111" pos:column="48">AccessLevelFilterRegex</name></expr></argument>, <argument><expr><name><name pos:line="111" pos:column="72">RegexOptions</name><op:operator pos:line="111" pos:column="84">.</op:operator><name pos:line="111" pos:column="85">IgnoreCase</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="112" pos:column="13">foreach (<init><decl><type><name pos:line="112" pos:column="22">Match</name></type> <name pos:line="112" pos:column="28">match</name> <range pos:line="112" pos:column="34">in <expr><name pos:line="112" pos:column="37">matches</name></expr></range></decl></init>)
            <block pos:line="113" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="114" pos:column="17">var</name></type> <name pos:line="114" pos:column="21">matchedFilter</name> <init pos:line="114" pos:column="35">= <expr><name><name pos:line="114" pos:column="37">match</name><op:operator pos:line="114" pos:column="42">.</op:operator><name pos:line="114" pos:column="43">Groups</name><index pos:line="114" pos:column="49">[<expr><lit:literal type="string" pos:line="114" pos:column="50">"filter"</lit:literal></expr>]</index></name><op:operator pos:line="114" pos:column="59">.</op:operator><name pos:line="114" pos:column="60">Value</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="115" pos:column="17">var</name></type> <name pos:line="115" pos:column="21">matchedAccessLevel</name> <init pos:line="115" pos:column="40">= <expr><name><name pos:line="115" pos:column="42">match</name><op:operator pos:line="115" pos:column="47">.</op:operator><name pos:line="115" pos:column="48">Groups</name><index pos:line="115" pos:column="54">[<expr><lit:literal type="string" pos:line="115" pos:column="55">"access"</lit:literal></expr>]</index></name><op:operator pos:line="115" pos:column="64">.</op:operator><call><name><name pos:line="115" pos:column="65">Value</name><op:operator pos:line="115" pos:column="70">.</op:operator><name pos:line="115" pos:column="71">ToLower</name></name><argument_list pos:line="115" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="116" pos:column="17">if <condition pos:line="116" pos:column="20">(<expr><call><name><name pos:line="116" pos:column="21">matchedFilter</name><op:operator pos:line="116" pos:column="34">.</op:operator><name pos:line="116" pos:column="35">StartsWith</name></name><argument_list pos:line="116" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="116" pos:column="46">"-"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="116" pos:column="51">
                    <expr_stmt><expr><call><name><name pos:line="117" pos:column="21">sandoQueryDescription</name><op:operator pos:line="117" pos:column="42">.</op:operator><name pos:line="117" pos:column="43">AccessLevels</name><op:operator pos:line="117" pos:column="55">.</op:operator><name pos:line="117" pos:column="56">Add</name></name><argument_list pos:line="117" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="117" pos:column="60">"-"</lit:literal> <op:operator pos:line="117" pos:column="64">+</op:operator> <name pos:line="117" pos:column="66">matchedAccessLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
                <else pos:line="118" pos:column="17">else
                    <expr_stmt><expr><call><name><name pos:line="119" pos:column="21">sandoQueryDescription</name><op:operator pos:line="119" pos:column="42">.</op:operator><name pos:line="119" pos:column="43">AccessLevels</name><op:operator pos:line="119" pos:column="55">.</op:operator><name pos:line="119" pos:column="56">Add</name></name><argument_list pos:line="119" pos:column="59">(<argument><expr><name pos:line="119" pos:column="60">matchedAccessLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
                <expr_stmt><expr><name pos:line="120" pos:column="17">query</name> <op:operator pos:line="120" pos:column="23">=</op:operator> <call><name><name pos:line="120" pos:column="25">query</name><op:operator pos:line="120" pos:column="30">.</op:operator><name pos:line="120" pos:column="31">Replace</name></name><argument_list pos:line="120" pos:column="38">(<argument><expr><name pos:line="120" pos:column="39">matchedFilter</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="120" pos:column="54">" "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
            <return pos:line="122" pos:column="13">return <expr><name pos:line="122" pos:column="20">query</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="125" pos:column="9">private</specifier> <specifier pos:line="125" pos:column="17">static</specifier> <name pos:line="125" pos:column="24">string</name></type> <name pos:line="125" pos:column="31">ParseNormalSearchTerms</name><parameter_list pos:line="125" pos:column="53">(<param><decl><type><name pos:line="125" pos:column="54">string</name></type> <name pos:line="125" pos:column="61">query</name></decl></param>, <param><decl><type><name pos:line="125" pos:column="68">SandoQueryDescription</name></type> <name pos:line="125" pos:column="90">sandoQueryDescription</name></decl></param>)</parameter_list>
        <block pos:line="126" pos:column="9">{
            <expr_stmt><expr><name pos:line="127" pos:column="13">query</name> <op:operator pos:line="127" pos:column="19">=</op:operator> <call><name><name pos:line="127" pos:column="21">Regex</name><op:operator pos:line="127" pos:column="26">.</op:operator><name pos:line="127" pos:column="27">Replace</name></name><argument_list pos:line="127" pos:column="34">(<argument><expr><name pos:line="127" pos:column="35">query</name></expr></argument>, <argument><expr><name pos:line="127" pos:column="42">InvalidCharactersRegex</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="127" pos:column="66">" "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:line="128" pos:column="13">//ensure non-split query terms are added too.</comment>
            <decl_stmt><decl><type><name pos:line="129" pos:column="13">var</name></type> <name pos:line="129" pos:column="17">nonSplitTerms</name> <init pos:line="129" pos:column="31">= <expr><call><name><name pos:line="129" pos:column="33">query</name><op:operator pos:line="129" pos:column="38">.</op:operator><name pos:line="129" pos:column="39">Split</name></name><argument_list pos:line="129" pos:column="44">(<argument><expr><lit:literal type="char" pos:line="129" pos:column="45">' '</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="130" pos:column="13">foreach (<init><decl><type><name pos:line="130" pos:column="22">var</name></type> <name pos:line="130" pos:column="26">nonSplit</name> <range pos:line="130" pos:column="35">in <expr><name pos:line="130" pos:column="38">nonSplitTerms</name></expr></range></decl></init>)
            <block pos:line="131" pos:column="13">{
                <if pos:line="132" pos:column="17">if<condition pos:line="132" pos:column="19">(<expr><op:operator pos:line="132" pos:column="20">!</op:operator><call><name><name pos:line="132" pos:column="21">String</name><op:operator pos:line="132" pos:column="27">.</op:operator><name pos:line="132" pos:column="28">Empty</name><op:operator pos:line="132" pos:column="33">.</op:operator><name pos:line="132" pos:column="34">Equals</name></name><argument_list pos:line="132" pos:column="40">(<argument><expr><name pos:line="132" pos:column="41">nonSplit</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="132" pos:column="51">
                    <expr_stmt><expr><call><name><name pos:line="133" pos:column="21">sandoQueryDescription</name><op:operator pos:line="133" pos:column="42">.</op:operator><name pos:line="133" pos:column="43">SearchTerms</name><op:operator pos:line="133" pos:column="54">.</op:operator><name pos:line="133" pos:column="55">Add</name></name><argument_list pos:line="133" pos:column="58">(<argument><expr><call><name><name pos:line="133" pos:column="59">nonSplit</name><op:operator pos:line="133" pos:column="67">.</op:operator><name pos:line="133" pos:column="68">Trim</name></name><argument_list pos:line="133" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></foreach>
            <decl_stmt><decl><type><name pos:line="135" pos:column="13">var</name></type> <name pos:line="135" pos:column="17">wordSplitter</name> <init pos:line="135" pos:column="30">= <expr><op:operator pos:line="135" pos:column="32">new</op:operator> <call><name pos:line="135" pos:column="36">WordSplitter</name><argument_list pos:line="135" pos:column="48">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="136" pos:column="13">var</name></type> <name pos:line="136" pos:column="17">searchTerms</name> <init pos:line="136" pos:column="29">= <expr><call><name><name pos:line="136" pos:column="31">wordSplitter</name><op:operator pos:line="136" pos:column="43">.</op:operator><name pos:line="136" pos:column="44">ExtractWords</name></name><argument_list pos:line="136" pos:column="56">(<argument><expr><name pos:line="136" pos:column="57">query</name></expr></argument>)</argument_list></call><op:operator pos:line="136" pos:column="63">.</op:operator><call><name pos:line="136" pos:column="64">Where</name><argument_list pos:line="136" pos:column="69">(<argument><expr><lambda><name pos:line="136" pos:column="70">w</name> <op:operator pos:line="136" pos:column="72">=&gt;</op:operator> <op:operator pos:line="136" pos:column="75">!</op:operator><call><name><name pos:line="136" pos:column="76">String</name><op:operator pos:line="136" pos:column="82">.</op:operator><name pos:line="136" pos:column="83">IsNullOrWhiteSpace</name></name><argument_list pos:line="136" pos:column="101">(<argument><expr><name pos:line="136" pos:column="102">w</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="137" pos:column="13">foreach (<init><decl><type><name pos:line="137" pos:column="22">var</name></type> <name pos:line="137" pos:column="26">searchTerm</name> <range pos:line="137" pos:column="37">in <expr><name pos:line="137" pos:column="40">searchTerms</name></expr></range></decl></init>)
            <block pos:line="138" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="139" pos:column="17">sandoQueryDescription</name><op:operator pos:line="139" pos:column="38">.</op:operator><name pos:line="139" pos:column="39">SearchTerms</name><op:operator pos:line="139" pos:column="50">.</op:operator><name pos:line="139" pos:column="51">Add</name></name><argument_list pos:line="139" pos:column="54">(<argument><expr><call><name><name pos:line="139" pos:column="55">searchTerm</name><op:operator pos:line="139" pos:column="65">.</op:operator><name pos:line="139" pos:column="66">Trim</name></name><argument_list pos:line="139" pos:column="70">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="140" pos:column="17">query</name> <op:operator pos:line="140" pos:column="23">=</op:operator> <call><name><name pos:line="140" pos:column="25">query</name><op:operator pos:line="140" pos:column="30">.</op:operator><name pos:line="140" pos:column="31">Replace</name></name><argument_list pos:line="140" pos:column="38">(<argument><expr><name pos:line="140" pos:column="39">searchTerm</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="140" pos:column="51">" "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        
            <expr_stmt><expr><name><name pos:line="143" pos:column="13">sandoQueryDescription</name><op:operator pos:line="143" pos:column="34">.</op:operator><name pos:line="143" pos:column="35">SearchTerms</name></name> <op:operator pos:line="143" pos:column="47">=</op:operator> <call><name><name pos:line="143" pos:column="49">sandoQueryDescription</name><op:operator pos:line="143" pos:column="70">.</op:operator><name pos:line="143" pos:column="71">SearchTerms</name><op:operator pos:line="143" pos:column="82">.</op:operator><name pos:line="143" pos:column="83">Distinct</name></name><argument_list pos:line="143" pos:column="91">()</argument_list></call><op:operator pos:line="143" pos:column="93">.</op:operator><call><name pos:line="143" pos:column="94">ToList</name><argument_list pos:line="143" pos:column="100">()</argument_list></call></expr>;</expr_stmt>
            <return pos:line="144" pos:column="13">return <expr><name pos:line="144" pos:column="20">query</name></expr>;</return>
        }</block></function>
    }</block></class>

    <class><specifier pos:line="148" pos:column="5">public</specifier> class <name pos:line="148" pos:column="18">SandoQueryDescription</name>
    <block pos:line="149" pos:column="5">{
        <constructor><specifier pos:line="150" pos:column="9">public</specifier> <name pos:line="150" pos:column="16">SandoQueryDescription</name><parameter_list pos:line="150" pos:column="37">()</parameter_list>
        <block pos:line="151" pos:column="9">{
            <expr_stmt><expr><name pos:line="152" pos:column="13">SearchTerms</name> <op:operator pos:line="152" pos:column="25">=</op:operator> <op:operator pos:line="152" pos:column="27">new</op:operator> <call><name><name pos:line="152" pos:column="31">List</name><argument_list pos:line="152" pos:column="35">&lt;<argument><name pos:line="152" pos:column="36">string</name></argument>&gt;</argument_list></name><argument_list pos:line="152" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="153" pos:column="13">LiteralSearchTerms</name> <op:operator pos:line="153" pos:column="32">=</op:operator> <op:operator pos:line="153" pos:column="34">new</op:operator> <call><name><name pos:line="153" pos:column="38">List</name><argument_list pos:line="153" pos:column="42">&lt;<argument><name pos:line="153" pos:column="43">string</name></argument>&gt;</argument_list></name><argument_list pos:line="153" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="154" pos:column="13">FileExtensions</name> <op:operator pos:line="154" pos:column="28">=</op:operator> <op:operator pos:line="154" pos:column="30">new</op:operator> <call><name><name pos:line="154" pos:column="34">List</name><argument_list pos:line="154" pos:column="38">&lt;<argument><name pos:line="154" pos:column="39">string</name></argument>&gt;</argument_list></name><argument_list pos:line="154" pos:column="46">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="155" pos:column="13">ProgramElementTypes</name> <op:operator pos:line="155" pos:column="33">=</op:operator> <op:operator pos:line="155" pos:column="35">new</op:operator> <call><name><name pos:line="155" pos:column="39">List</name><argument_list pos:line="155" pos:column="43">&lt;<argument><name pos:line="155" pos:column="44">string</name></argument>&gt;</argument_list></name><argument_list pos:line="155" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="156" pos:column="13">Locations</name> <op:operator pos:line="156" pos:column="23">=</op:operator> <op:operator pos:line="156" pos:column="25">new</op:operator> <call><name><name pos:line="156" pos:column="29">List</name><argument_list pos:line="156" pos:column="33">&lt;<argument><name pos:line="156" pos:column="34">string</name></argument>&gt;</argument_list></name><argument_list pos:line="156" pos:column="41">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="157" pos:column="13">AccessLevels</name> <op:operator pos:line="157" pos:column="26">=</op:operator> <op:operator pos:line="157" pos:column="28">new</op:operator> <call><name><name pos:line="157" pos:column="32">List</name><argument_list pos:line="157" pos:column="36">&lt;<argument><name pos:line="157" pos:column="37">string</name></argument>&gt;</argument_list></name><argument_list pos:line="157" pos:column="44">()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <decl_stmt><decl><type><specifier pos:line="160" pos:column="9">public</specifier> <name pos:line="160" pos:column="16">string</name></type> <name pos:line="160" pos:column="23">OriginalQuery</name> <block pos:line="160" pos:column="37">{ <function_decl><name pos:line="160" pos:column="39">get</name>;</function_decl> <function_decl><name pos:line="160" pos:column="44">set</name>;</function_decl> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="161" pos:column="9">public</specifier> <name><name pos:line="161" pos:column="16">List</name><argument_list pos:line="161" pos:column="20">&lt;<argument><name pos:line="161" pos:column="21">string</name></argument>&gt;</argument_list></name></type> <name pos:line="161" pos:column="29">SearchTerms</name> <block pos:line="161" pos:column="41">{ <function_decl><name pos:line="161" pos:column="43">get</name>;</function_decl> <function_decl><name pos:line="161" pos:column="48">set</name>;</function_decl> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="162" pos:column="9">public</specifier> <name><name pos:line="162" pos:column="16">List</name><argument_list pos:line="162" pos:column="20">&lt;<argument><name pos:line="162" pos:column="21">string</name></argument>&gt;</argument_list></name></type> <name pos:line="162" pos:column="29">LiteralSearchTerms</name> <block pos:line="162" pos:column="48">{ <function_decl><name pos:line="162" pos:column="50">get</name>;</function_decl> <function_decl><name pos:line="162" pos:column="55">set</name>;</function_decl> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="163" pos:column="9">public</specifier> <name><name pos:line="163" pos:column="16">List</name><argument_list pos:line="163" pos:column="20">&lt;<argument><name pos:line="163" pos:column="21">string</name></argument>&gt;</argument_list></name></type> <name pos:line="163" pos:column="29">FileExtensions</name> <block pos:line="163" pos:column="44">{ <function_decl><name pos:line="163" pos:column="46">get</name>;</function_decl> <function_decl><name pos:line="163" pos:column="51">set</name>;</function_decl> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="164" pos:column="9">public</specifier> <name><name pos:line="164" pos:column="16">List</name><argument_list pos:line="164" pos:column="20">&lt;<argument><name pos:line="164" pos:column="21">string</name></argument>&gt;</argument_list></name></type> <name pos:line="164" pos:column="29">ProgramElementTypes</name> <block pos:line="164" pos:column="49">{ <function_decl><name pos:line="164" pos:column="51">get</name>;</function_decl> <function_decl><name pos:line="164" pos:column="56">set</name>;</function_decl> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="165" pos:column="9">public</specifier> <name><name pos:line="165" pos:column="16">List</name><argument_list pos:line="165" pos:column="20">&lt;<argument><name pos:line="165" pos:column="21">string</name></argument>&gt;</argument_list></name></type> <name pos:line="165" pos:column="29">Locations</name> <block pos:line="165" pos:column="39">{ <function_decl><name pos:line="165" pos:column="41">get</name>;</function_decl> <function_decl><name pos:line="165" pos:column="46">set</name>;</function_decl> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="166" pos:column="9">public</specifier> <name><name pos:line="166" pos:column="16">List</name><argument_list pos:line="166" pos:column="20">&lt;<argument><name pos:line="166" pos:column="21">string</name></argument>&gt;</argument_list></name></type> <name pos:line="166" pos:column="29">AccessLevels</name> <block pos:line="166" pos:column="42">{ <function_decl><name pos:line="166" pos:column="44">get</name>;</function_decl> <function_decl><name pos:line="166" pos:column="49">set</name>;</function_decl> }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="168" pos:column="9">public</specifier> <name pos:line="168" pos:column="16">bool</name></type> <name pos:line="168" pos:column="21">IsValid</name>
        <block pos:line="169" pos:column="9">{
            <function><name pos:line="170" pos:column="13">get</name>
            <block pos:line="171" pos:column="13">{
                <return pos:line="172" pos:column="17">return <expr><call><name><name pos:line="172" pos:column="24">SearchTerms</name><op:operator pos:line="172" pos:column="35">.</op:operator><name pos:line="172" pos:column="36">Any</name></name><argument_list pos:line="172" pos:column="39">()</argument_list></call> <op:operator pos:line="172" pos:column="42">||</op:operator>
                       <call><name><name pos:line="173" pos:column="24">LiteralSearchTerms</name><op:operator pos:line="173" pos:column="42">.</op:operator><name pos:line="173" pos:column="43">Any</name></name><argument_list pos:line="173" pos:column="46">()</argument_list></call> <op:operator pos:line="173" pos:column="49">||</op:operator>
                       <call><name><name pos:line="174" pos:column="24">FileExtensions</name><op:operator pos:line="174" pos:column="38">.</op:operator><name pos:line="174" pos:column="39">Any</name></name><argument_list pos:line="174" pos:column="42">()</argument_list></call> <op:operator pos:line="174" pos:column="45">||</op:operator>
                       <call><name><name pos:line="175" pos:column="24">ProgramElementTypes</name><op:operator pos:line="175" pos:column="43">.</op:operator><name pos:line="175" pos:column="44">Any</name></name><argument_list pos:line="175" pos:column="47">()</argument_list></call> <op:operator pos:line="175" pos:column="50">||</op:operator>
                       <call><name><name pos:line="176" pos:column="24">Locations</name><op:operator pos:line="176" pos:column="33">.</op:operator><name pos:line="176" pos:column="34">Any</name></name><argument_list pos:line="176" pos:column="37">()</argument_list></call> <op:operator pos:line="176" pos:column="40">||</op:operator>
                       <call><name><name pos:line="177" pos:column="24">AccessLevels</name><op:operator pos:line="177" pos:column="36">.</op:operator><name pos:line="177" pos:column="37">Any</name></name><argument_list pos:line="177" pos:column="40">()</argument_list></call></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <function><type><specifier pos:line="181" pos:column="9">public</specifier> <specifier pos:line="181" pos:column="16">override</specifier> <name pos:line="181" pos:column="25">string</name></type> <name pos:line="181" pos:column="32">ToString</name><parameter_list pos:line="181" pos:column="40">()</parameter_list>
        <block pos:line="182" pos:column="9">{
            <return pos:line="183" pos:column="13">return <expr><call><name><name pos:line="183" pos:column="20">String</name><op:operator pos:line="183" pos:column="26">.</op:operator><name pos:line="183" pos:column="27">Join</name></name><argument_list pos:line="183" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="183" pos:column="32">", "</lit:literal></expr></argument>, <argument><expr><call><name pos:line="183" pos:column="38">GetDescriptionForCollections</name><argument_list pos:line="183" pos:column="66">()</argument_list></call><op:operator pos:line="183" pos:column="68">.</op:operator><call><name pos:line="183" pos:column="69">Where</name><argument_list pos:line="183" pos:column="74">(<argument><expr><lambda><name pos:line="183" pos:column="75">d</name> <op:operator pos:line="183" pos:column="77">=&gt;</op:operator> <name pos:line="183" pos:column="80">d</name> <op:operator pos:line="183" pos:column="82">!=</op:operator> <name pos:line="183" pos:column="85">null</name></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="186" pos:column="9">private</specifier> <name><name pos:line="186" pos:column="17">IEnumerable</name><argument_list pos:line="186" pos:column="28">&lt;<argument><name pos:line="186" pos:column="29">string</name></argument>&gt;</argument_list></name></type> <name pos:line="186" pos:column="37">GetDescriptionForCollections</name><parameter_list pos:line="186" pos:column="65">()</parameter_list>
        <block pos:line="187" pos:column="9">{
            <return pos:line="188" pos:column="13">return <expr><op:operator pos:line="188" pos:column="20">new</op:operator> <name><name pos:line="188" pos:column="24">List</name><argument_list pos:line="188" pos:column="28">&lt;<argument><name pos:line="188" pos:column="29">string</name></argument>&gt;</argument_list></name>
                <block pos:line="189" pos:column="17">{
                    <expr><call><name pos:line="190" pos:column="21">GetDescriptionForCollection</name><argument_list pos:line="190" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="190" pos:column="49">"Search terms"</lit:literal></expr></argument>, <argument><expr><name pos:line="190" pos:column="65">SearchTerms</name></expr></argument>)</argument_list></call></expr><op:operator pos:line="190" pos:column="77">,</op:operator>
                    <expr><call><name pos:line="191" pos:column="21">GetDescriptionForCollection</name><argument_list pos:line="191" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="191" pos:column="49">"Literal search terms"</lit:literal></expr></argument>, <argument><expr><name pos:line="191" pos:column="73">LiteralSearchTerms</name></expr></argument>)</argument_list></call></expr><op:operator pos:line="191" pos:column="92">,</op:operator>
                    <expr><call><name pos:line="192" pos:column="21">GetDescriptionForCollection</name><argument_list pos:line="192" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="192" pos:column="49">"File extensions"</lit:literal></expr></argument>, <argument><expr><name pos:line="192" pos:column="68">FileExtensions</name></expr></argument>)</argument_list></call></expr><op:operator pos:line="192" pos:column="83">,</op:operator>
                    <expr><call><name pos:line="193" pos:column="21">GetDescriptionForCollection</name><argument_list pos:line="193" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="193" pos:column="49">"Program element types"</lit:literal></expr></argument>, <argument><expr><name pos:line="193" pos:column="74">ProgramElementTypes</name></expr></argument>)</argument_list></call></expr><op:operator pos:line="193" pos:column="94">,</op:operator>
                    <expr><call><name pos:line="194" pos:column="21">GetDescriptionForCollection</name><argument_list pos:line="194" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="194" pos:column="49">"Locations"</lit:literal></expr></argument>, <argument><expr><name pos:line="194" pos:column="62">Locations</name></expr></argument>)</argument_list></call></expr><op:operator pos:line="194" pos:column="72">,</op:operator>
                    <expr><call><name pos:line="195" pos:column="21">GetDescriptionForCollection</name><argument_list pos:line="195" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="195" pos:column="49">"Access levels"</lit:literal></expr></argument>, <argument><expr><name pos:line="195" pos:column="66">AccessLevels</name></expr></argument>)</argument_list></call></expr>
                }</block></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="199" pos:column="9">private</specifier> <specifier pos:line="199" pos:column="17">static</specifier> <name pos:line="199" pos:column="24">string</name></type> <name pos:line="199" pos:column="31">GetDescriptionForCollection</name><parameter_list pos:line="199" pos:column="58">(<param><decl><type><name pos:line="199" pos:column="59">string</name></type> <name pos:line="199" pos:column="66">collectionName</name></decl></param>, <param><decl><type><name><name pos:line="199" pos:column="82">List</name><argument_list pos:line="199" pos:column="86">&lt;<argument><name pos:line="199" pos:column="87">string</name></argument>&gt;</argument_list></name></type> <name pos:line="199" pos:column="95">collection</name></decl></param>)</parameter_list>
        <block pos:line="200" pos:column="9">{
            <return pos:line="201" pos:column="13">return <expr><call><name><name pos:line="201" pos:column="20">collection</name><op:operator pos:line="201" pos:column="30">.</op:operator><name pos:line="201" pos:column="31">Any</name></name><argument_list pos:line="201" pos:column="34">()</argument_list></call> <op:operator pos:line="201" pos:column="37">?</op:operator> <call><name><name pos:line="201" pos:column="39">String</name><op:operator pos:line="201" pos:column="45">.</op:operator><name pos:line="201" pos:column="46">Format</name></name><argument_list pos:line="201" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="201" pos:column="53">"{0}:[{1}]"</lit:literal></expr></argument>, <argument><expr><name pos:line="201" pos:column="66">collectionName</name></expr></argument>,  <argument><expr><call><name><name pos:line="201" pos:column="83">String</name><op:operator pos:line="201" pos:column="89">.</op:operator><name pos:line="201" pos:column="90">Join</name></name><argument_list pos:line="201" pos:column="94">(<argument><expr><lit:literal type="string" pos:line="201" pos:column="95">","</lit:literal></expr></argument>, <argument><expr><name pos:line="201" pos:column="100">collection</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="201" pos:column="113">:</op:operator> <name pos:line="201" pos:column="115">null</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
