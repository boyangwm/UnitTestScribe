<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Indexer\Indexer\Searching\Criteria\SimpleSearchCriteria.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">System</name><op:operator pos:line="1" pos:column="13">.</op:operator><name pos:line="1" pos:column="14">Collections</name><op:operator pos:line="1" pos:column="25">.</op:operator><name pos:line="1" pos:column="26">Generic</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Linq</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Sando</name><op:operator pos:line="3" pos:column="12">.</op:operator><name pos:line="3" pos:column="13">ExtensionContracts</name><op:operator pos:line="3" pos:column="31">.</op:operator><name pos:line="3" pos:column="32">ProgramElementContracts</name></name>;</using>
<using pos:line="4" pos:column="1">using <name pos:line="4" pos:column="7">System</name>;</using>

<namespace pos:line="6" pos:column="1">namespace <name><name pos:line="6" pos:column="11">Sando</name><op:operator pos:line="6" pos:column="16">.</op:operator><name pos:line="6" pos:column="17">Indexer</name><op:operator pos:line="6" pos:column="24">.</op:operator><name pos:line="6" pos:column="25">Searching</name><op:operator pos:line="6" pos:column="34">.</op:operator><name pos:line="6" pos:column="35">Criteria</name></name>
<block pos:line="7" pos:column="1">{
    <class><specifier pos:line="8" pos:column="5">public</specifier> class <name pos:line="8" pos:column="18">SimpleSearchCriteria</name> <super pos:line="8" pos:column="39">: <name pos:line="8" pos:column="41">SearchCriteria</name></super>
    <block pos:line="9" pos:column="5">{

        <constructor><specifier pos:line="11" pos:column="9">public</specifier> <name pos:line="11" pos:column="16">SimpleSearchCriteria</name><parameter_list pos:line="11" pos:column="36">()</parameter_list>
        <block pos:line="12" pos:column="9">{
            <expr_stmt><expr><name pos:line="13" pos:column="13">AccessLevels</name> <op:operator pos:line="13" pos:column="26">=</op:operator> <op:operator pos:line="13" pos:column="28">new</op:operator> <call><name><name pos:line="13" pos:column="32">SortedSet</name><argument_list pos:line="13" pos:column="41">&lt;<argument><name pos:line="13" pos:column="42">AccessLevel</name></argument>&gt;</argument_list></name><argument_list pos:line="13" pos:column="54">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="14" pos:column="13">ExactMode</name> <op:operator pos:line="14" pos:column="23">=</op:operator> <lit:literal type="boolean" pos:line="14" pos:column="25">true</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="15" pos:column="13">FileExtensions</name> <op:operator pos:line="15" pos:column="28">=</op:operator> <op:operator pos:line="15" pos:column="30">new</op:operator> <call><name><name pos:line="15" pos:column="34">SortedSet</name><argument_list pos:line="15" pos:column="43">&lt;<argument><name pos:line="15" pos:column="44">string</name></argument>&gt;</argument_list></name><argument_list pos:line="15" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="16" pos:column="13">Locations</name> <op:operator pos:line="16" pos:column="23">=</op:operator> <op:operator pos:line="16" pos:column="25">new</op:operator> <call><name><name pos:line="16" pos:column="29">SortedSet</name><argument_list pos:line="16" pos:column="38">&lt;<argument><name pos:line="16" pos:column="39">string</name></argument>&gt;</argument_list></name><argument_list pos:line="16" pos:column="46">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="17" pos:column="13">MatchCase</name> <op:operator pos:line="17" pos:column="23">=</op:operator> <lit:literal type="boolean" pos:line="17" pos:column="25">false</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="18" pos:column="13">ProgramElementTypes</name> <op:operator pos:line="18" pos:column="33">=</op:operator> <op:operator pos:line="18" pos:column="35">new</op:operator> <call><name><name pos:line="18" pos:column="39">SortedSet</name><argument_list pos:line="18" pos:column="48">&lt;<argument><name pos:line="18" pos:column="49">ProgramElementType</name></argument>&gt;</argument_list></name><argument_list pos:line="18" pos:column="68">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="19" pos:column="13">SearchByAccessLevel</name> <op:operator pos:line="19" pos:column="33">=</op:operator> <lit:literal type="boolean" pos:line="19" pos:column="35">false</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="20" pos:column="25">AccessLevels</name> <op:operator pos:line="20" pos:column="38">=</op:operator> <op:operator pos:line="20" pos:column="40">new</op:operator> <call><name><name pos:line="20" pos:column="44">SortedSet</name><argument_list pos:line="20" pos:column="53">&lt;<argument><name pos:line="20" pos:column="54">AccessLevel</name></argument>&gt;</argument_list></name><argument_list pos:line="20" pos:column="66">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="21" pos:column="13">SearchByProgramElementType</name> <op:operator pos:line="21" pos:column="40">=</op:operator> <lit:literal type="boolean" pos:line="21" pos:column="42">false</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="22" pos:column="13">SearchTerms</name> <op:operator pos:line="22" pos:column="25">=</op:operator> <op:operator pos:line="22" pos:column="27">new</op:operator> <call><name><name pos:line="22" pos:column="31">SortedSet</name><argument_list pos:line="22" pos:column="40">&lt;<argument><name pos:line="22" pos:column="41">string</name></argument>&gt;</argument_list></name><argument_list pos:line="22" pos:column="48">()</argument_list></call></expr>;</expr_stmt>									
            <expr_stmt><expr><name pos:line="23" pos:column="13">SearchByUsageType</name> <op:operator pos:line="23" pos:column="31">=</op:operator> <lit:literal type="boolean" pos:line="23" pos:column="33">false</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="24" pos:column="25">UsageTypes</name> <op:operator pos:line="24" pos:column="36">=</op:operator> <op:operator pos:line="24" pos:column="38">new</op:operator> <call><name><name pos:line="24" pos:column="42">SortedSet</name><argument_list pos:line="24" pos:column="51">&lt;<argument><name pos:line="24" pos:column="52">UsageType</name></argument>&gt;</argument_list></name><argument_list pos:line="24" pos:column="62">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="25" pos:column="25">Locations</name> <op:operator pos:line="25" pos:column="35">=</op:operator> <op:operator pos:line="25" pos:column="37">new</op:operator> <call><name><name pos:line="25" pos:column="41">SortedSet</name><argument_list pos:line="25" pos:column="50">&lt;<argument><name pos:line="25" pos:column="51">string</name></argument>&gt;</argument_list></name><argument_list pos:line="25" pos:column="58">()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>


        <function><type><specifier pos:line="29" pos:column="9">public</specifier> <specifier pos:line="29" pos:column="16">override</specifier> <name pos:line="29" pos:column="25">string</name></type> <name pos:line="29" pos:column="32">ToQueryString</name><parameter_list pos:line="29" pos:column="45">()</parameter_list>
        <block pos:line="30" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="31" pos:column="13">var</name></type> <name pos:line="31" pos:column="17">builder</name> <init pos:line="31" pos:column="25">= <expr><op:operator pos:line="31" pos:column="27">new</op:operator> <call><name pos:line="31" pos:column="31">LuceneQueryStringBuilder</name><argument_list pos:line="31" pos:column="55">(<argument><expr><name pos:line="31" pos:column="56">this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="32" pos:column="13">return <expr><call><name><name pos:line="32" pos:column="20">builder</name><op:operator pos:line="32" pos:column="27">.</op:operator><name pos:line="32" pos:column="28">Build</name></name><argument_list pos:line="32" pos:column="33">()</argument_list></call></expr>;</return>
        }</block></function>

        <decl_stmt><decl><type><specifier pos:line="35" pos:column="9">public</specifier> <name pos:line="35" pos:column="16">bool</name></type> <name pos:line="35" pos:column="21">Reformed</name> <block pos:line="35" pos:column="30">{ <function_decl><name pos:line="35" pos:column="32">set</name>;</function_decl> <function_decl><name pos:line="35" pos:column="37">get</name>;</function_decl> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="36" pos:column="9">public</specifier> <name pos:line="36" pos:column="16">string</name></type> <name pos:line="36" pos:column="23">Explanation</name> <block pos:line="36" pos:column="35">{ <function_decl><name pos:line="36" pos:column="37">set</name>;</function_decl> <function_decl><name pos:line="36" pos:column="42">get</name>;</function_decl> }</block></decl></decl_stmt>

        <function><type><specifier pos:line="38" pos:column="9">public</specifier> <specifier pos:line="38" pos:column="16">override</specifier> <name pos:line="38" pos:column="25">bool</name></type> <name pos:line="38" pos:column="30">IsQueryReformed</name><parameter_list pos:line="38" pos:column="45">()</parameter_list>
        <block pos:line="39" pos:column="9">{
            <return pos:line="40" pos:column="13">return <expr><name pos:line="40" pos:column="20">Reformed</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="43" pos:column="9">public</specifier> <specifier pos:line="43" pos:column="16">override</specifier> <name pos:line="43" pos:column="25">string</name></type> <name pos:line="43" pos:column="32">GetQueryReformExplanation</name><parameter_list pos:line="43" pos:column="57">()</parameter_list>
        <block pos:line="44" pos:column="9">{
            <return pos:line="45" pos:column="13">return <expr><name pos:line="45" pos:column="20">Explanation</name></expr>;</return>
        }</block></function>   

        <function><type><specifier pos:line="48" pos:column="9">public</specifier> <specifier pos:line="48" pos:column="16">override</specifier> <name><name pos:line="48" pos:column="25">IQueryable</name><argument_list pos:line="48" pos:column="35">&lt;<argument><name pos:line="48" pos:column="36">string</name></argument>&gt;</argument_list></name></type> <name pos:line="48" pos:column="44">GetRecommendedQueries</name><parameter_list pos:line="48" pos:column="65">()</parameter_list>
        <block pos:line="49" pos:column="9">{
            <return pos:line="50" pos:column="13">return <expr><name pos:line="50" pos:column="20">RecommendedQueries</name></expr>;</return>
        }</block></function>

        <decl_stmt><decl><type><specifier pos:line="53" pos:column="9">public</specifier> <name><name pos:line="53" pos:column="16">IQueryable</name><argument_list pos:line="53" pos:column="26">&lt;<argument><name pos:line="53" pos:column="27">string</name></argument>&gt;</argument_list></name></type> <name pos:line="53" pos:column="35">RecommendedQueries</name> <block pos:line="53" pos:column="54">{ <function_decl><name pos:line="53" pos:column="56">set</name>;</function_decl> <function_decl><name pos:line="53" pos:column="61">get</name>;</function_decl> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="54" pos:column="9">public</specifier> <name><name pos:line="54" pos:column="16">SortedSet</name><argument_list pos:line="54" pos:column="25">&lt;<argument><name pos:line="54" pos:column="26">string</name></argument>&gt;</argument_list></name></type> <name pos:line="54" pos:column="34">SearchTerms</name> <block pos:line="54" pos:column="46">{
            <function><name pos:line="55" pos:column="13">get</name>
            <block pos:line="56" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="57" pos:column="17">var</name></type> <name pos:line="57" pos:column="21">toRemove</name> <init pos:line="57" pos:column="30">= <expr><call><name><name pos:line="57" pos:column="32">_searchTerms</name><op:operator pos:line="57" pos:column="44">.</op:operator><name pos:line="57" pos:column="45">Where</name></name><argument_list pos:line="57" pos:column="50">(<argument><expr><lambda><name pos:line="57" pos:column="51">x</name> <op:operator pos:line="57" pos:column="53">=&gt;</op:operator> <call><name><name pos:line="57" pos:column="56">String</name><op:operator pos:line="57" pos:column="62">.</op:operator><name pos:line="57" pos:column="63">IsNullOrWhiteSpace</name></name><argument_list pos:line="57" pos:column="81">(<argument><expr><name pos:line="57" pos:column="82">x</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="57" pos:column="85">.</op:operator><call><name pos:line="57" pos:column="86">ToList</name><argument_list pos:line="57" pos:column="92">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <foreach pos:line="58" pos:column="17">foreach (<init><decl><type><name pos:line="58" pos:column="26">var</name></type> <name pos:line="58" pos:column="30">badOne</name> <range pos:line="58" pos:column="37">in <expr><name pos:line="58" pos:column="40">toRemove</name></expr></range></decl></init>)
                    <expr_stmt><expr><call><name><name pos:line="59" pos:column="21">_searchTerms</name><op:operator pos:line="59" pos:column="33">.</op:operator><name pos:line="59" pos:column="34">Remove</name></name><argument_list pos:line="59" pos:column="40">(<argument><expr><name pos:line="59" pos:column="41">badOne</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></foreach>
                <return pos:line="60" pos:column="17">return <expr><name pos:line="60" pos:column="24">_searchTerms</name></expr>;</return>
            }</block></function>
            <function><name pos:line="62" pos:column="13">set</name><block pos:line="62" pos:column="16">{ 
                <expr_stmt><expr><name pos:line="63" pos:column="17">_searchTerms</name> <op:operator pos:line="63" pos:column="30">=</op:operator> <name pos:line="63" pos:column="32">value</name></expr>;</expr_stmt>
            }</block></function>
        }</block></decl></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="66" pos:column="9">private</specifier> <name><name pos:line="66" pos:column="17">SortedSet</name><argument_list pos:line="66" pos:column="26">&lt;<argument><name pos:line="66" pos:column="27">string</name></argument>&gt;</argument_list></name></type> <name pos:line="66" pos:column="35">_searchTerms</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="68" pos:column="9">public</specifier> <name pos:line="68" pos:column="16">bool</name></type> <name pos:line="68" pos:column="21">MatchCase</name> <block pos:line="68" pos:column="31">{ <function_decl><name pos:line="68" pos:column="33">get</name>;</function_decl> <function_decl><name pos:line="68" pos:column="38">set</name>;</function_decl> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="69" pos:column="9">public</specifier> <name pos:line="69" pos:column="16">bool</name></type> <name pos:line="69" pos:column="21">ExactMode</name> <block pos:line="69" pos:column="31">{ <function_decl><name pos:line="69" pos:column="33">get</name>;</function_decl> <function_decl><name pos:line="69" pos:column="38">set</name>;</function_decl> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="70" pos:column="9">public</specifier> <name pos:line="70" pos:column="16">bool</name></type> <name pos:line="70" pos:column="21">SearchByAccessLevel</name> <block pos:line="70" pos:column="41">{ <function_decl><name pos:line="70" pos:column="43">get</name>;</function_decl> <function_decl><name pos:line="70" pos:column="48">set</name>;</function_decl> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="71" pos:column="9">public</specifier> <name><name pos:line="71" pos:column="16">SortedSet</name><argument_list pos:line="71" pos:column="25">&lt;<argument><name pos:line="71" pos:column="26">AccessLevel</name></argument>&gt;</argument_list></name></type> <name pos:line="71" pos:column="39">AccessLevels</name> <block pos:line="71" pos:column="52">{ <function_decl><name pos:line="71" pos:column="54">get</name>;</function_decl> <function_decl><name pos:line="71" pos:column="59">set</name>;</function_decl> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="72" pos:column="9">public</specifier> <name pos:line="72" pos:column="16">bool</name></type> <name pos:line="72" pos:column="21">SearchByProgramElementType</name> <block pos:line="72" pos:column="48">{ <function_decl><name pos:line="72" pos:column="50">get</name>;</function_decl> <function_decl><name pos:line="72" pos:column="55">set</name>;</function_decl> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="73" pos:column="9">public</specifier> <name><name pos:line="73" pos:column="16">SortedSet</name><argument_list pos:line="73" pos:column="25">&lt;<argument><name pos:line="73" pos:column="26">ProgramElementType</name></argument>&gt;</argument_list></name></type> <name pos:line="73" pos:column="46">ProgramElementTypes</name> <block pos:line="73" pos:column="66">{ <function_decl><name pos:line="73" pos:column="68">get</name>;</function_decl> <function_decl><name pos:line="73" pos:column="73">set</name>;</function_decl> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="74" pos:column="9">public</specifier> <name pos:line="74" pos:column="16">bool</name></type> <name pos:line="74" pos:column="21">SearchByUsageType</name> <block pos:line="74" pos:column="39">{ <function_decl><name pos:line="74" pos:column="41">get</name>;</function_decl> <function_decl><name pos:line="74" pos:column="46">set</name>;</function_decl> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="75" pos:column="9">public</specifier> <name><name pos:line="75" pos:column="16">SortedSet</name><argument_list pos:line="75" pos:column="25">&lt;<argument><name pos:line="75" pos:column="26">UsageType</name></argument>&gt;</argument_list></name></type> <name pos:line="75" pos:column="37">UsageTypes</name> <block pos:line="75" pos:column="48">{ <function_decl><name pos:line="75" pos:column="50">get</name>;</function_decl> <function_decl><name pos:line="75" pos:column="55">set</name>;</function_decl> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="76" pos:column="9">public</specifier> <name pos:line="76" pos:column="16">bool</name></type> <name pos:line="76" pos:column="21">SearchByLocation</name> <block pos:line="76" pos:column="38">{ <function_decl><name pos:line="76" pos:column="40">get</name>;</function_decl> <function_decl><name pos:line="76" pos:column="45">set</name>;</function_decl> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="77" pos:column="9">public</specifier> <name><name pos:line="77" pos:column="16">SortedSet</name><argument_list pos:line="77" pos:column="25">&lt;<argument><name pos:line="77" pos:column="26">string</name></argument>&gt;</argument_list></name></type> <name pos:line="77" pos:column="34">Locations</name> <block pos:line="77" pos:column="44">{ <function_decl><name pos:line="77" pos:column="46">get</name>;</function_decl> <function_decl><name pos:line="77" pos:column="51">set</name>;</function_decl> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="78" pos:column="9">public</specifier> <name pos:line="78" pos:column="16">bool</name></type> <name pos:line="78" pos:column="21">SearchByFileExtension</name> <block pos:line="78" pos:column="43">{ <function_decl><name pos:line="78" pos:column="45">get</name>;</function_decl> <function_decl><name pos:line="78" pos:column="50">set</name>;</function_decl> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="79" pos:column="9">public</specifier> <name><name pos:line="79" pos:column="16">SortedSet</name><argument_list pos:line="79" pos:column="25">&lt;<argument><name pos:line="79" pos:column="26">string</name></argument>&gt;</argument_list></name></type> <name pos:line="79" pos:column="34">FileExtensions</name> <block pos:line="79" pos:column="49">{ <function_decl><name pos:line="79" pos:column="51">get</name>;</function_decl> <function_decl><name pos:line="79" pos:column="56">set</name>;</function_decl> }</block></decl></decl_stmt>

        <function><type><specifier pos:line="81" pos:column="9">public</specifier> <name pos:line="81" pos:column="16">bool</name></type> <name pos:line="81" pos:column="21">IsLiteralSearch</name><parameter_list pos:line="81" pos:column="36">()</parameter_list>
        <block pos:line="82" pos:column="9">{
            <foreach pos:line="83" pos:column="13">foreach (<init><decl><type><name pos:line="83" pos:column="22">var</name></type> <name pos:line="83" pos:column="26">term</name> <range pos:line="83" pos:column="31">in <expr><name pos:line="83" pos:column="34">SearchTerms</name></expr></range></decl></init>)
            <block pos:line="84" pos:column="13">{                
                <if pos:line="85" pos:column="17">if <condition pos:line="85" pos:column="20">(<expr><call><name><name pos:line="85" pos:column="21">term</name><op:operator pos:line="85" pos:column="25">.</op:operator><name pos:line="85" pos:column="26">StartsWith</name></name><argument_list pos:line="85" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="85" pos:column="37">"\""</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="85" pos:column="43">             
                    <return pos:line="86" pos:column="21">return <expr><lit:literal type="boolean" pos:line="86" pos:column="28">true</lit:literal></expr>;</return></then></if>
            }</block></foreach>
            <return pos:line="88" pos:column="13">return <expr><lit:literal type="boolean" pos:line="88" pos:column="20">false</lit:literal></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="91" pos:column="9">internal</specifier> <name pos:line="91" pos:column="18">void</name></type> <name pos:line="91" pos:column="23">AddAccessLevels</name><parameter_list pos:line="91" pos:column="38">(<param><decl><type><name><name pos:line="91" pos:column="39">List</name><argument_list pos:line="91" pos:column="43">&lt;<argument><name pos:line="91" pos:column="44">string</name></argument>&gt;</argument_list></name></type> <name pos:line="91" pos:column="52">list</name></decl></param>)</parameter_list>
        <block pos:line="92" pos:column="9">{
            <foreach pos:line="93" pos:column="13">foreach (<init><decl><type><name pos:line="93" pos:column="22">var</name></type> <name pos:line="93" pos:column="26">accessLevel</name> <range pos:line="93" pos:column="38">in <expr><name pos:line="93" pos:column="41">list</name></expr></range></decl></init>)
            <block pos:line="94" pos:column="13">{
                <try pos:line="95" pos:column="17">try
                <block pos:line="96" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="97" pos:column="21">AccessLevel</name></type> <name pos:line="97" pos:column="33">value</name> <init pos:line="97" pos:column="39">= <expr><op:operator pos:line="97" pos:column="41">(</op:operator><name pos:line="97" pos:column="42">AccessLevel</name><op:operator pos:line="97" pos:column="53">)</op:operator><call><name><name pos:line="97" pos:column="54">Enum</name><op:operator pos:line="97" pos:column="58">.</op:operator><name pos:line="97" pos:column="59">Parse</name></name><argument_list pos:line="97" pos:column="64">(<argument><expr><call><name pos:line="97" pos:column="65">typeof</name><argument_list pos:line="97" pos:column="71">(<argument><expr><name pos:line="97" pos:column="72">AccessLevel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="97" pos:column="86">accessLevel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if pos:line="98" pos:column="21">if <condition pos:line="98" pos:column="24">(<expr><name pos:line="98" pos:column="25">value</name> <op:operator pos:line="98" pos:column="31">!=</op:operator> <name pos:line="98" pos:column="34">null</name></expr>)</condition><then pos:line="98" pos:column="39">
                        <expr_stmt><expr><call><name><name pos:line="99" pos:column="25">AccessLevels</name><op:operator pos:line="99" pos:column="37">.</op:operator><name pos:line="99" pos:column="38">Add</name></name><argument_list pos:line="99" pos:column="41">(<argument><expr><name pos:line="99" pos:column="42">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                }</block>
                <catch pos:line="101" pos:column="17">catch <parameter_list pos:line="101" pos:column="23">(<param><decl><type><name pos:line="101" pos:column="24">ArgumentException</name></type></decl></param>)</parameter_list>
                <block pos:line="102" pos:column="17">{
                    <comment type="line" pos:line="103" pos:column="21">//ignore invalid values</comment>
                }</block></catch></try>
            }</block></foreach>                
        }</block></function>

        <function><type><specifier pos:line="108" pos:column="9">internal</specifier> <name pos:line="108" pos:column="18">void</name></type> <name pos:line="108" pos:column="23">AddProgramElementTypes</name><parameter_list pos:line="108" pos:column="45">(<param><decl><type><name><name pos:line="108" pos:column="46">List</name><argument_list pos:line="108" pos:column="50">&lt;<argument><name pos:line="108" pos:column="51">string</name></argument>&gt;</argument_list></name></type> <name pos:line="108" pos:column="59">list</name></decl></param>)</parameter_list>
        <block pos:line="109" pos:column="9">{
            <foreach pos:line="110" pos:column="13">foreach (<init><decl><type><name pos:line="110" pos:column="22">var</name></type> <name pos:line="110" pos:column="26">elementType</name> <range pos:line="110" pos:column="38">in <expr><name pos:line="110" pos:column="41">list</name></expr></range></decl></init>)
            <block pos:line="111" pos:column="13">{
                <try pos:line="112" pos:column="17">try
                <block pos:line="113" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="114" pos:column="21">ProgramElementType</name></type> <name pos:line="114" pos:column="40">value</name> <init pos:line="114" pos:column="46">= <expr><op:operator pos:line="114" pos:column="48">(</op:operator><name pos:line="114" pos:column="49">ProgramElementType</name><op:operator pos:line="114" pos:column="67">)</op:operator><call><name><name pos:line="114" pos:column="68">Enum</name><op:operator pos:line="114" pos:column="72">.</op:operator><name pos:line="114" pos:column="73">Parse</name></name><argument_list pos:line="114" pos:column="78">(<argument><expr><call><name pos:line="114" pos:column="79">typeof</name><argument_list pos:line="114" pos:column="85">(<argument><expr><name pos:line="114" pos:column="86">ProgramElementType</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="114" pos:column="107">elementType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if pos:line="115" pos:column="21">if <condition pos:line="115" pos:column="24">(<expr><name pos:line="115" pos:column="25">value</name> <op:operator pos:line="115" pos:column="31">!=</op:operator> <name pos:line="115" pos:column="34">null</name></expr>)</condition><then pos:line="115" pos:column="39">
                        <expr_stmt><expr><call><name><name pos:line="116" pos:column="25">ProgramElementTypes</name><op:operator pos:line="116" pos:column="44">.</op:operator><name pos:line="116" pos:column="45">Add</name></name><argument_list pos:line="116" pos:column="48">(<argument><expr><name pos:line="116" pos:column="49">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                }</block>
                <catch pos:line="118" pos:column="17">catch <parameter_list pos:line="118" pos:column="23">(<param><decl><type><name pos:line="118" pos:column="24">ArgumentException</name></type></decl></param>)</parameter_list>
                <block pos:line="119" pos:column="17">{
                    <comment type="line" pos:line="120" pos:column="21">//ignore invalid values</comment>
                }</block></catch></try>
            }</block></foreach>   
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
