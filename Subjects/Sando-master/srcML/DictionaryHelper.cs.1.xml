<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Core\Core\Tools\DictionaryHelper.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Text</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Text</name><op:operator pos:line="5" pos:column="18">.</op:operator><name pos:line="5" pos:column="19">RegularExpressions</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">SF</name><op:operator pos:line="6" pos:column="9">.</op:operator><name pos:line="6" pos:column="10">Snowball</name><op:operator pos:line="6" pos:column="18">.</op:operator><name pos:line="6" pos:column="19">Ext</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Sando</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">ExtensionContracts</name><op:operator pos:line="7" pos:column="31">.</op:operator><name pos:line="7" pos:column="32">ProgramElementContracts</name></name>;</using>

<namespace pos:line="9" pos:column="1">namespace <name><name pos:line="9" pos:column="11">Sando</name><op:operator pos:line="9" pos:column="16">.</op:operator><name pos:line="9" pos:column="17">Core</name><op:operator pos:line="9" pos:column="21">.</op:operator><name pos:line="9" pos:column="22">Tools</name></name>
<block pos:line="10" pos:column="1">{
    <class><specifier pos:line="11" pos:column="5">public</specifier> <specifier pos:line="11" pos:column="12">static</specifier> class <name pos:line="11" pos:column="25">DictionaryHelper</name>
    <block pos:line="12" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="13" pos:column="9">private</specifier> <specifier pos:line="13" pos:column="17">static</specifier> <specifier pos:line="13" pos:column="24">readonly</specifier> <name pos:line="13" pos:column="33">Regex</name></type> <name pos:line="13" pos:column="39">_quotesPattern</name> <init pos:line="13" pos:column="54">= <expr><op:operator pos:line="13" pos:column="56">new</op:operator> <call><name pos:line="13" pos:column="60">Regex</name><argument_list pos:line="13" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="13" pos:column="66">"-{0,1}\"[^\"]+\""</lit:literal></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="86">RegexOptions</name><op:operator pos:line="13" pos:column="98">.</op:operator><name pos:line="13" pos:column="99">Compiled</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="14" pos:column="9">private</specifier> <specifier pos:line="14" pos:column="17">static</specifier> <specifier pos:line="14" pos:column="24">readonly</specifier> <name pos:line="14" pos:column="33">Regex</name></type> <name pos:line="14" pos:column="39">_patternChars</name> <init pos:line="14" pos:column="53">= <expr><op:operator pos:line="14" pos:column="55">new</op:operator> <call><name pos:line="14" pos:column="59">Regex</name><argument_list pos:line="14" pos:column="64">(<argument><expr><lit:literal type="string" pos:line="14" pos:column="65">@"([A-Z][a-z]+)"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="83">RegexOptions</name><op:operator pos:line="14" pos:column="95">.</op:operator><name pos:line="14" pos:column="96">Compiled</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="15" pos:column="9">private</specifier> <specifier pos:line="15" pos:column="17">static</specifier> <specifier pos:line="15" pos:column="24">readonly</specifier> <name pos:line="15" pos:column="33">Regex</name></type> <name pos:line="15" pos:column="39">_patternCharsLowerCase</name> <init pos:line="15" pos:column="62">= <expr><op:operator pos:line="15" pos:column="64">new</op:operator> <call><name pos:line="15" pos:column="68">Regex</name><argument_list pos:line="15" pos:column="73">(<argument><expr><lit:literal type="string" pos:line="15" pos:column="74">@"([^a-zA-Z][a-z]+)"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="96">RegexOptions</name><op:operator pos:line="15" pos:column="108">.</op:operator><name pos:line="15" pos:column="109">Compiled</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <function><type><specifier pos:line="17" pos:column="9">public</specifier> <specifier pos:line="17" pos:column="16">static</specifier> <name><name pos:line="17" pos:column="23">IEnumerable</name><argument_list pos:line="17" pos:column="34">&lt;<argument><name pos:line="17" pos:column="35">String</name></argument>&gt;</argument_list></name></type> <name pos:line="17" pos:column="43">ExtractElementWords</name><parameter_list pos:line="17" pos:column="62">(<param><decl><type><name pos:line="17" pos:column="63">ProgramElement</name></type> <name pos:line="17" pos:column="78">element</name></decl></param>)</parameter_list>
        <block pos:line="18" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="19" pos:column="13">var</name></type> <name pos:line="19" pos:column="17">list</name> <init pos:line="19" pos:column="22">= <expr><op:operator pos:line="19" pos:column="24">new</op:operator> <call><name><name pos:line="19" pos:column="28">List</name><argument_list pos:line="19" pos:column="32">&lt;<argument><name pos:line="19" pos:column="33">string</name></argument>&gt;</argument_list></name><argument_list pos:line="19" pos:column="40">()</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <if pos:line="21" pos:column="13">if <condition pos:line="21" pos:column="16">(<expr><name pos:line="21" pos:column="17">element</name> <op:operator pos:line="21" pos:column="25">as</op:operator> <name pos:line="21" pos:column="28">ClassElement</name> <op:operator pos:line="21" pos:column="41">!=</op:operator> <name pos:line="21" pos:column="44">null</name></expr>)</condition><then pos:line="21" pos:column="49">
            <block pos:line="22" pos:column="13">{
                <expr_stmt><expr><call><name pos:line="23" pos:column="17">AddElementName</name><argument_list pos:line="23" pos:column="31">(<argument><expr><name pos:line="23" pos:column="32">element</name></expr></argument>, <argument><expr><name pos:line="23" pos:column="41">list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="24" pos:column="17">list</name><op:operator pos:line="24" pos:column="21">.</op:operator><name pos:line="24" pos:column="22">AddRange</name></name><argument_list pos:line="24" pos:column="30">(<argument><expr><call><name pos:line="24" pos:column="31">ExtractClassWords</name><argument_list pos:line="24" pos:column="48">(<argument><expr><name pos:line="24" pos:column="49">element</name> <op:operator pos:line="24" pos:column="57">as</op:operator> <name pos:line="24" pos:column="60">ClassElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="25" pos:column="17">return <expr><name pos:line="25" pos:column="24">list</name></expr>;</return>
            }</block></then></if>
            <if pos:line="27" pos:column="13">if <condition pos:line="27" pos:column="16">(<expr><name pos:line="27" pos:column="17">element</name> <op:operator pos:line="27" pos:column="25">as</op:operator> <name pos:line="27" pos:column="28">CommentElement</name> <op:operator pos:line="27" pos:column="43">!=</op:operator> <name pos:line="27" pos:column="46">null</name></expr>)</condition><then pos:line="27" pos:column="51">
            <block pos:line="28" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="29" pos:column="17">list</name><op:operator pos:line="29" pos:column="21">.</op:operator><name pos:line="29" pos:column="22">AddRange</name></name><argument_list pos:line="29" pos:column="30">(<argument><expr><call><name pos:line="29" pos:column="31">ExtractCommentWords</name><argument_list pos:line="29" pos:column="50">(<argument><expr><name pos:line="29" pos:column="51">element</name> <op:operator pos:line="29" pos:column="59">as</op:operator> <name pos:line="29" pos:column="62">CommentElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="30" pos:column="17">return <expr><name pos:line="30" pos:column="24">list</name></expr>;</return>
            }</block></then></if>
            <if pos:line="32" pos:column="13">if <condition pos:line="32" pos:column="16">(<expr><name pos:line="32" pos:column="17">element</name> <op:operator pos:line="32" pos:column="25">as</op:operator> <name pos:line="32" pos:column="28">FieldElement</name> <op:operator pos:line="32" pos:column="41">!=</op:operator> <name pos:line="32" pos:column="44">null</name></expr>)</condition><then pos:line="32" pos:column="49">
            <block pos:line="33" pos:column="13">{
                <expr_stmt><expr><call><name pos:line="34" pos:column="17">AddElementName</name><argument_list pos:line="34" pos:column="31">(<argument><expr><name pos:line="34" pos:column="32">element</name></expr></argument>, <argument><expr><name pos:line="34" pos:column="41">list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="35" pos:column="17">list</name><op:operator pos:line="35" pos:column="21">.</op:operator><name pos:line="35" pos:column="22">AddRange</name></name><argument_list pos:line="35" pos:column="30">(<argument><expr><call><name pos:line="35" pos:column="31">ExtractFieldWords</name><argument_list pos:line="35" pos:column="48">(<argument><expr><name pos:line="35" pos:column="49">element</name> <op:operator pos:line="35" pos:column="57">as</op:operator> <name pos:line="35" pos:column="60">FieldElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="36" pos:column="17">return <expr><name pos:line="36" pos:column="24">list</name></expr>;</return>
            }</block></then></if>
            <if pos:line="38" pos:column="13">if <condition pos:line="38" pos:column="16">(<expr><name pos:line="38" pos:column="17">element</name> <op:operator pos:line="38" pos:column="25">as</op:operator> <name pos:line="38" pos:column="28">MethodElement</name> <op:operator pos:line="38" pos:column="42">!=</op:operator> <name pos:line="38" pos:column="45">null</name></expr>)</condition><then pos:line="38" pos:column="50">
            <block pos:line="39" pos:column="13">{
                <expr_stmt><expr><call><name pos:line="40" pos:column="17">AddElementName</name><argument_list pos:line="40" pos:column="31">(<argument><expr><name pos:line="40" pos:column="32">element</name></expr></argument>, <argument><expr><name pos:line="40" pos:column="41">list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="41" pos:column="17">list</name><op:operator pos:line="41" pos:column="21">.</op:operator><name pos:line="41" pos:column="22">AddRange</name></name><argument_list pos:line="41" pos:column="30">(<argument><expr><call><name pos:line="41" pos:column="31">ExtractMethodWords</name><argument_list pos:line="41" pos:column="49">(<argument><expr><name pos:line="41" pos:column="50">element</name> <op:operator pos:line="41" pos:column="58">as</op:operator> <name pos:line="41" pos:column="61">MethodElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="42" pos:column="17">return <expr><name pos:line="42" pos:column="24">list</name></expr>;</return>
            }</block></then></if>
            <if pos:line="44" pos:column="13">if <condition pos:line="44" pos:column="16">(<expr><name pos:line="44" pos:column="17">element</name> <op:operator pos:line="44" pos:column="25">as</op:operator> <name pos:line="44" pos:column="28">MethodPrototypeElement</name> <op:operator pos:line="44" pos:column="51">!=</op:operator> <name pos:line="44" pos:column="54">null</name></expr>)</condition><then pos:line="44" pos:column="59">
            <block pos:line="45" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="46" pos:column="17">list</name><op:operator pos:line="46" pos:column="21">.</op:operator><name pos:line="46" pos:column="22">AddRange</name></name><argument_list pos:line="46" pos:column="30">(<argument><expr><call><name pos:line="46" pos:column="31">ExtractMethodPrototypeWords</name><argument_list pos:line="46" pos:column="58">(<argument><expr><name pos:line="46" pos:column="59">element</name> <op:operator pos:line="46" pos:column="67">as</op:operator> <name pos:line="46" pos:column="70">MethodPrototypeElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="47" pos:column="17">return <expr><name pos:line="47" pos:column="24">list</name></expr>;</return>
            }</block></then></if>
            <if pos:line="49" pos:column="13">if <condition pos:line="49" pos:column="16">(<expr><name pos:line="49" pos:column="17">element</name> <op:operator pos:line="49" pos:column="25">as</op:operator> <name pos:line="49" pos:column="28">PropertyElement</name> <op:operator pos:line="49" pos:column="44">!=</op:operator> <name pos:line="49" pos:column="47">null</name></expr>)</condition><then pos:line="49" pos:column="52">
            <block pos:line="50" pos:column="13">{
                <expr_stmt><expr><call><name pos:line="51" pos:column="17">AddElementName</name><argument_list pos:line="51" pos:column="31">(<argument><expr><name pos:line="51" pos:column="32">element</name></expr></argument>, <argument><expr><name pos:line="51" pos:column="41">list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="52" pos:column="17">list</name><op:operator pos:line="52" pos:column="21">.</op:operator><name pos:line="52" pos:column="22">AddRange</name></name><argument_list pos:line="52" pos:column="30">(<argument><expr><call><name pos:line="52" pos:column="31">ExtractPropertyWords</name><argument_list pos:line="52" pos:column="51">(<argument><expr><name pos:line="52" pos:column="52">element</name> <op:operator pos:line="52" pos:column="60">as</op:operator> <name pos:line="52" pos:column="63">PropertyElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="53" pos:column="17">return <expr><name pos:line="53" pos:column="24">list</name></expr>;</return>
            }</block></then></if>
            <if pos:line="55" pos:column="13">if <condition pos:line="55" pos:column="16">(<expr><name pos:line="55" pos:column="17">element</name> <op:operator pos:line="55" pos:column="25">as</op:operator> <name pos:line="55" pos:column="28">StructElement</name> <op:operator pos:line="55" pos:column="42">!=</op:operator> <name pos:line="55" pos:column="45">null</name></expr>)</condition><then pos:line="55" pos:column="50">
            <block pos:line="56" pos:column="13">{
                <expr_stmt><expr><call><name pos:line="57" pos:column="17">AddElementName</name><argument_list pos:line="57" pos:column="31">(<argument><expr><name pos:line="57" pos:column="32">element</name></expr></argument>, <argument><expr><name pos:line="57" pos:column="41">list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="58" pos:column="17">list</name><op:operator pos:line="58" pos:column="21">.</op:operator><name pos:line="58" pos:column="22">AddRange</name></name><argument_list pos:line="58" pos:column="30">(<argument><expr><call><name pos:line="58" pos:column="31">ExtractStructWords</name><argument_list pos:line="58" pos:column="49">(<argument><expr><name pos:line="58" pos:column="50">element</name> <op:operator pos:line="58" pos:column="58">as</op:operator> <name pos:line="58" pos:column="61">StructElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="59" pos:column="17">return <expr><name pos:line="59" pos:column="24">list</name></expr>;</return>
            }</block></then></if>
            <if pos:line="61" pos:column="13">if <condition pos:line="61" pos:column="16">(<expr><name pos:line="61" pos:column="17">element</name> <op:operator pos:line="61" pos:column="25">as</op:operator> <name pos:line="61" pos:column="28">TextLineElement</name> <op:operator pos:line="61" pos:column="44">!=</op:operator> <name pos:line="61" pos:column="47">null</name></expr>)</condition><then pos:line="61" pos:column="52">
            <block pos:line="62" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="63" pos:column="17">list</name><op:operator pos:line="63" pos:column="21">.</op:operator><name pos:line="63" pos:column="22">AddRange</name></name><argument_list pos:line="63" pos:column="30">(<argument><expr><call><name pos:line="63" pos:column="31">ExtractTextLineElement</name><argument_list pos:line="63" pos:column="53">(<argument><expr><name pos:line="63" pos:column="54">element</name> <op:operator pos:line="63" pos:column="62">as</op:operator> <name pos:line="63" pos:column="65">TextLineElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="64" pos:column="17">return <expr><name pos:line="64" pos:column="24">list</name></expr>;</return>
            }</block></then></if>
            <if pos:line="66" pos:column="13">if <condition pos:line="66" pos:column="16">(<expr><name pos:line="66" pos:column="17">element</name> <op:operator pos:line="66" pos:column="25">as</op:operator> <name pos:line="66" pos:column="28">XmlXElement</name> <op:operator pos:line="66" pos:column="40">!=</op:operator> <name pos:line="66" pos:column="43">null</name></expr>)</condition><then pos:line="66" pos:column="48">
            <block pos:line="67" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="68" pos:column="17">list</name><op:operator pos:line="68" pos:column="21">.</op:operator><name pos:line="68" pos:column="22">AddRange</name></name><argument_list pos:line="68" pos:column="30">(<argument><expr><call><name pos:line="68" pos:column="31">ExtractXmlWords</name><argument_list pos:line="68" pos:column="46">(<argument><expr><name pos:line="68" pos:column="47">element</name> <op:operator pos:line="68" pos:column="55">as</op:operator> <name pos:line="68" pos:column="58">XmlXElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="69" pos:column="17">return <expr><name pos:line="69" pos:column="24">list</name></expr>;</return>
            }</block></then></if>

            <if pos:line="72" pos:column="13">if <condition pos:line="72" pos:column="16">(<expr><call><name><name pos:line="72" pos:column="17">element</name><op:operator pos:line="72" pos:column="24">.</op:operator><name pos:line="72" pos:column="25">GetCustomProperties</name></name><argument_list pos:line="72" pos:column="44">()</argument_list></call><op:operator pos:line="72" pos:column="46">.</op:operator><name pos:line="72" pos:column="47">Count</name> <op:operator pos:line="72" pos:column="53">&gt;</op:operator> <lit:literal type="number" pos:line="72" pos:column="55">0</lit:literal></expr>)</condition><then pos:line="72" pos:column="57">
            <block pos:line="73" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="74" pos:column="17">list</name><op:operator pos:line="74" pos:column="21">.</op:operator><name pos:line="74" pos:column="22">AddRange</name></name><argument_list pos:line="74" pos:column="30">(<argument><expr><call><name pos:line="74" pos:column="31">ExtractUnknownElementWords</name><argument_list pos:line="74" pos:column="57">(<argument><expr><name pos:line="74" pos:column="58">element</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="75" pos:column="17">return <expr><name pos:line="75" pos:column="24">list</name></expr>;</return>
            }</block></then></if>
            <expr_stmt><expr><call><name><name pos:line="77" pos:column="13">list</name><op:operator pos:line="77" pos:column="17">.</op:operator><name pos:line="77" pos:column="18">Clear</name></name><argument_list pos:line="77" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
            <return pos:line="78" pos:column="13">return <expr><name pos:line="78" pos:column="20">list</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="81" pos:column="9">private</specifier> <specifier pos:line="81" pos:column="17">static</specifier> <name pos:line="81" pos:column="24">void</name></type> <name pos:line="81" pos:column="29">AddElementName</name><parameter_list pos:line="81" pos:column="43">(<param><decl><type><name pos:line="81" pos:column="44">ProgramElement</name></type> <name pos:line="81" pos:column="59">element</name></decl></param>, <param><decl><type><name><name pos:line="81" pos:column="68">List</name><argument_list pos:line="81" pos:column="72">&lt;<argument><name pos:line="81" pos:column="73">string</name></argument>&gt;</argument_list></name></type> <name pos:line="81" pos:column="81">list</name></decl></param>)</parameter_list>
        <block pos:line="82" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="83" pos:column="13">var</name></type> <name pos:line="83" pos:column="17">name</name> <init pos:line="83" pos:column="22">= <expr><call><name pos:line="83" pos:column="24">NormalizeText</name><argument_list pos:line="83" pos:column="37">(<argument><expr><name><name pos:line="83" pos:column="38">element</name><op:operator pos:line="83" pos:column="45">.</op:operator><name pos:line="83" pos:column="46">Name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="84" pos:column="13">list</name><op:operator pos:line="84" pos:column="17">.</op:operator><name pos:line="84" pos:column="18">Add</name></name><argument_list pos:line="84" pos:column="21">(<argument><expr><name pos:line="84" pos:column="22">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>


        <function><type><specifier pos:line="88" pos:column="9">public</specifier> <specifier pos:line="88" pos:column="16">static</specifier> <name pos:line="88" pos:column="23">String</name></type> <name pos:line="88" pos:column="30">NormalizeText</name><parameter_list pos:line="88" pos:column="43">(<param><decl><type><name pos:line="88" pos:column="44">this</name> <name pos:line="88" pos:column="49">String</name></type> <name pos:line="88" pos:column="56">text</name></decl></param>)</parameter_list>
        <block pos:line="89" pos:column="9">{
            <return pos:line="90" pos:column="13">return <expr><call><name><name pos:line="90" pos:column="20">Regex</name><op:operator pos:line="90" pos:column="25">.</op:operator><name pos:line="90" pos:column="26">Replace</name></name><argument_list pos:line="90" pos:column="33">(<argument><expr><name pos:line="90" pos:column="34">text</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="90" pos:column="40">@"[^A-Za-z]+"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="90" pos:column="55">""</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="90" pos:column="58">.</op:operator><call><name pos:line="90" pos:column="59">ToLower</name><argument_list pos:line="90" pos:column="66">()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="93" pos:column="9">public</specifier> <specifier pos:line="93" pos:column="16">static</specifier> <name><name pos:line="93" pos:column="23">IEnumerable</name><argument_list pos:line="93" pos:column="34">&lt;<argument><name pos:line="93" pos:column="35">String</name></argument>&gt;</argument_list></name></type> <name pos:line="93" pos:column="43">GetQuotedStrings</name><parameter_list pos:line="93" pos:column="59">(<param><decl><type><name pos:line="93" pos:column="60">String</name></type> <name pos:line="93" pos:column="67">text</name></decl></param>)</parameter_list>
        <block pos:line="94" pos:column="9">{
            <return pos:line="95" pos:column="13">return <expr><call><name pos:line="95" pos:column="20">GetMatchedWords</name><argument_list pos:line="95" pos:column="35">(<argument><expr><name pos:line="95" pos:column="36">_quotesPattern</name></expr></argument>, <argument><expr><name pos:line="95" pos:column="52">text</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="98" pos:column="9">private</specifier> <specifier pos:line="98" pos:column="17">static</specifier> <name><name pos:line="98" pos:column="24">IEnumerable</name><argument_list pos:line="98" pos:column="35">&lt;<argument><name pos:line="98" pos:column="36">String</name></argument>&gt;</argument_list></name></type> <name pos:line="98" pos:column="44">ExtractMethodWords</name><parameter_list pos:line="98" pos:column="62">(<param><decl><type><name pos:line="98" pos:column="63">MethodElement</name></type> <name pos:line="98" pos:column="77">element</name></decl></param>)</parameter_list>
        <block pos:line="99" pos:column="9">{
            <return pos:line="100" pos:column="13">return <expr><call><name pos:line="100" pos:column="20">GetDefaultLetterWords</name><argument_list pos:line="100" pos:column="41">(<argument><expr><name><name pos:line="100" pos:column="42">element</name><op:operator pos:line="100" pos:column="49">.</op:operator><name pos:line="100" pos:column="50">RawSource</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="103" pos:column="9">private</specifier> <specifier pos:line="103" pos:column="17">static</specifier> <name><name pos:line="103" pos:column="24">IEnumerable</name><argument_list pos:line="103" pos:column="35">&lt;<argument><name pos:line="103" pos:column="36">String</name></argument>&gt;</argument_list></name></type> <name pos:line="103" pos:column="44">ExtractXmlWords</name><parameter_list pos:line="103" pos:column="59">(<param><decl><type><name pos:line="103" pos:column="60">XmlXElement</name></type> <name pos:line="103" pos:column="72">element</name></decl></param>)</parameter_list>
        <block pos:line="104" pos:column="9">{
            <return pos:line="105" pos:column="13">return <expr><call><name pos:line="105" pos:column="20">GetDefaultLetterWords</name><argument_list pos:line="105" pos:column="41">(<argument><expr><name><name pos:line="105" pos:column="42">element</name><op:operator pos:line="105" pos:column="49">.</op:operator><name pos:line="105" pos:column="50">Body</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="108" pos:column="9">private</specifier> <specifier pos:line="108" pos:column="17">static</specifier> <name><name pos:line="108" pos:column="24">IEnumerable</name><argument_list pos:line="108" pos:column="35">&lt;<argument><name pos:line="108" pos:column="36">String</name></argument>&gt;</argument_list></name></type> <name pos:line="108" pos:column="44">ExtractCommentWords</name><parameter_list pos:line="108" pos:column="63">(<param><decl><type><name pos:line="108" pos:column="64">CommentElement</name></type> <name pos:line="108" pos:column="79">element</name></decl></param>)</parameter_list>
        <block pos:line="109" pos:column="9">{
            <return pos:line="110" pos:column="13">return <expr><call><name pos:line="110" pos:column="20">GetDefaultLetterWords</name><argument_list pos:line="110" pos:column="41">(<argument><expr><name><name pos:line="110" pos:column="42">element</name><op:operator pos:line="110" pos:column="49">.</op:operator><name pos:line="110" pos:column="50">Body</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="113" pos:column="9">private</specifier> <specifier pos:line="113" pos:column="17">static</specifier> <name><name pos:line="113" pos:column="24">IEnumerable</name><argument_list pos:line="113" pos:column="35">&lt;<argument><name pos:line="113" pos:column="36">String</name></argument>&gt;</argument_list></name></type> <name pos:line="113" pos:column="44">ExtractClassWords</name><parameter_list pos:line="113" pos:column="61">(<param><decl><type><name pos:line="113" pos:column="62">ClassElement</name></type> <name pos:line="113" pos:column="75">element</name></decl></param>)</parameter_list>
        <block pos:line="114" pos:column="9">{
            <return pos:line="115" pos:column="13">return <expr><call><name pos:line="115" pos:column="20">GetDefaultLetterWords</name><argument_list pos:line="115" pos:column="41">(<argument><expr><name><name pos:line="115" pos:column="42">element</name><op:operator pos:line="115" pos:column="49">.</op:operator><name pos:line="115" pos:column="50">Name</name></name> <op:operator pos:line="115" pos:column="55">+</op:operator> <lit:literal type="string" pos:line="115" pos:column="57">" "</lit:literal> <op:operator pos:line="115" pos:column="61">+</op:operator> <name><name pos:line="115" pos:column="63">element</name><op:operator pos:line="115" pos:column="70">.</op:operator><name pos:line="115" pos:column="71">Namespace</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="118" pos:column="9">private</specifier> <specifier pos:line="118" pos:column="17">static</specifier> <name><name pos:line="118" pos:column="24">IEnumerable</name><argument_list pos:line="118" pos:column="35">&lt;<argument><name pos:line="118" pos:column="36">String</name></argument>&gt;</argument_list></name></type> <name pos:line="118" pos:column="44">ExtractEnumWords</name><parameter_list pos:line="118" pos:column="60">(<param><decl><type><name pos:line="118" pos:column="61">EnumElement</name></type> <name pos:line="118" pos:column="73">element</name></decl></param>)</parameter_list>
        <block pos:line="119" pos:column="9">{
            <return pos:line="120" pos:column="13">return <expr><call><name pos:line="120" pos:column="20">GetDefaultLetterWords</name><argument_list pos:line="120" pos:column="41">(<argument><expr><name><name pos:line="120" pos:column="42">element</name><op:operator pos:line="120" pos:column="49">.</op:operator><name pos:line="120" pos:column="50">Body</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="123" pos:column="9">private</specifier> <specifier pos:line="123" pos:column="17">static</specifier> <name><name pos:line="123" pos:column="24">IEnumerable</name><argument_list pos:line="123" pos:column="35">&lt;<argument><name pos:line="123" pos:column="36">string</name></argument>&gt;</argument_list></name></type> <name pos:line="123" pos:column="44">ExtractFieldWords</name><parameter_list pos:line="123" pos:column="61">(<param><decl><type><name pos:line="123" pos:column="62">FieldElement</name></type> <name pos:line="123" pos:column="75">element</name></decl></param>)</parameter_list>
        <block pos:line="124" pos:column="9">{
            <return pos:line="125" pos:column="13">return <expr><call><name pos:line="125" pos:column="20">GetDefaultLetterWords</name><argument_list pos:line="125" pos:column="41">(<argument><expr><op:operator pos:line="125" pos:column="42">new</op:operator> <index pos:line="125" pos:column="46">[]</index> <block pos:line="125" pos:column="49">{<expr><name><name pos:line="125" pos:column="50">element</name><op:operator pos:line="125" pos:column="57">.</op:operator><name pos:line="125" pos:column="58">Name</name></name></expr><op:operator pos:line="125" pos:column="62">,</op:operator> <expr><name><name pos:line="125" pos:column="64">element</name><op:operator pos:line="125" pos:column="71">.</op:operator><name pos:line="125" pos:column="72">FieldType</name></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="128" pos:column="9">private</specifier> <specifier pos:line="128" pos:column="17">static</specifier> <name><name pos:line="128" pos:column="24">IEnumerable</name><argument_list pos:line="128" pos:column="35">&lt;<argument><name pos:line="128" pos:column="36">string</name></argument>&gt;</argument_list></name></type> <name pos:line="128" pos:column="44">ExtractPropertyWords</name><parameter_list pos:line="128" pos:column="64">(<param><decl><type><name pos:line="128" pos:column="65">PropertyElement</name></type> <name pos:line="128" pos:column="81">element</name></decl></param>)</parameter_list>
        <block pos:line="129" pos:column="9">{
            <return pos:line="130" pos:column="13">return <expr><call><name pos:line="130" pos:column="20">GetDefaultLetterWords</name><argument_list pos:line="130" pos:column="41">(<argument><expr><name><name pos:line="130" pos:column="42">element</name><op:operator pos:line="130" pos:column="49">.</op:operator><name pos:line="130" pos:column="50">Body</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="133" pos:column="9">private</specifier> <specifier pos:line="133" pos:column="17">static</specifier> <name><name pos:line="133" pos:column="24">IEnumerable</name><argument_list pos:line="133" pos:column="35">&lt;<argument><name pos:line="133" pos:column="36">string</name></argument>&gt;</argument_list></name></type> <name pos:line="133" pos:column="44">ExtractMethodPrototypeWords</name><parameter_list pos:line="133" pos:column="71">(<param><decl><type><name pos:line="133" pos:column="72">MethodPrototypeElement</name></type>
            <name pos:line="134" pos:column="13">element</name></decl></param>)</parameter_list>
        <block pos:line="135" pos:column="9">{
            <return pos:line="136" pos:column="13">return <expr><call><name pos:line="136" pos:column="20">GetDefaultLetterWords</name><argument_list pos:line="136" pos:column="41">(<argument><expr><op:operator pos:line="136" pos:column="42">new</op:operator> <index pos:line="136" pos:column="46">[]</index><block pos:line="136" pos:column="48">{<expr><name><name pos:line="136" pos:column="49">element</name><op:operator pos:line="136" pos:column="56">.</op:operator><name pos:line="136" pos:column="57">Arguments</name></name></expr><op:operator pos:line="136" pos:column="66">,</op:operator> <expr><name><name pos:line="136" pos:column="68">element</name><op:operator pos:line="136" pos:column="75">.</op:operator><name pos:line="136" pos:column="76">Name</name></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="139" pos:column="9">private</specifier> <specifier pos:line="139" pos:column="17">static</specifier> <name><name pos:line="139" pos:column="24">IEnumerable</name><argument_list pos:line="139" pos:column="35">&lt;<argument><name pos:line="139" pos:column="36">string</name></argument>&gt;</argument_list></name></type> <name pos:line="139" pos:column="44">ExtractTextLineElement</name><parameter_list pos:line="139" pos:column="66">(<param><decl><type><name pos:line="139" pos:column="67">TextLineElement</name></type> <name pos:line="139" pos:column="83">element</name></decl></param>)</parameter_list>
        <block pos:line="140" pos:column="9">{
            <return pos:line="141" pos:column="13">return <expr><call><name pos:line="141" pos:column="20">GetDefaultLetterWords</name><argument_list pos:line="141" pos:column="41">(<argument><expr><name><name pos:line="141" pos:column="42">element</name><op:operator pos:line="141" pos:column="49">.</op:operator><name pos:line="141" pos:column="50">Body</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="144" pos:column="9">private</specifier> <specifier pos:line="144" pos:column="17">static</specifier> <name><name pos:line="144" pos:column="24">IEnumerable</name><argument_list pos:line="144" pos:column="35">&lt;<argument><name pos:line="144" pos:column="36">string</name></argument>&gt;</argument_list></name></type> <name pos:line="144" pos:column="44">ExtractStructWords</name><parameter_list pos:line="144" pos:column="62">(<param><decl><type><name pos:line="144" pos:column="63">StructElement</name></type> <name pos:line="144" pos:column="77">element</name></decl></param>)</parameter_list>
        <block pos:line="145" pos:column="9">{
            <return pos:line="146" pos:column="13">return <expr><call><name pos:line="146" pos:column="20">GetDefaultLetterWords</name><argument_list pos:line="146" pos:column="41">(<argument><expr><name><name pos:line="146" pos:column="42">element</name><op:operator pos:line="146" pos:column="49">.</op:operator><name pos:line="146" pos:column="50">Name</name></name> <op:operator pos:line="146" pos:column="55">+</op:operator> <lit:literal type="string" pos:line="146" pos:column="57">" "</lit:literal> <op:operator pos:line="146" pos:column="61">+</op:operator> <name><name pos:line="146" pos:column="63">element</name><op:operator pos:line="146" pos:column="70">.</op:operator><name pos:line="146" pos:column="71">Namespace</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="149" pos:column="9">private</specifier> <specifier pos:line="149" pos:column="17">static</specifier> <name><name pos:line="149" pos:column="24">IEnumerable</name><argument_list pos:line="149" pos:column="35">&lt;<argument><name pos:line="149" pos:column="36">string</name></argument>&gt;</argument_list></name></type> <name pos:line="149" pos:column="44">ExtractUnknownElementWords</name><parameter_list pos:line="149" pos:column="70">(<param><decl><type><name pos:line="149" pos:column="71">ProgramElement</name></type> <name pos:line="149" pos:column="86">element</name></decl></param>)</parameter_list>
        <block pos:line="150" pos:column="9">{
            <return pos:line="151" pos:column="13">return <expr><call><name pos:line="151" pos:column="20">GetDefaultLetterWords</name><argument_list pos:line="151" pos:column="41">(<argument><expr><name><name pos:line="151" pos:column="42">element</name><op:operator pos:line="151" pos:column="49">.</op:operator><name pos:line="151" pos:column="50">RawSource</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>


        <function><type><specifier pos:line="155" pos:column="9">private</specifier> <specifier pos:line="155" pos:column="17">static</specifier> <name><name pos:line="155" pos:column="24">IEnumerable</name><argument_list pos:line="155" pos:column="35">&lt;<argument><name pos:line="155" pos:column="36">String</name></argument>&gt;</argument_list></name></type> <name pos:line="155" pos:column="44">GetDefaultLetterWords</name><parameter_list pos:line="155" pos:column="65">(<param><decl><type><name><name pos:line="155" pos:column="66">IEnumerable</name><argument_list pos:line="155" pos:column="77">&lt;<argument><name pos:line="155" pos:column="78">string</name></argument>&gt;</argument_list></name></type> <name pos:line="155" pos:column="86">codes</name></decl></param>)</parameter_list>
        <block pos:line="156" pos:column="9">{
            <return pos:line="157" pos:column="13">return <expr><call><name><name pos:line="157" pos:column="20">codes</name><op:operator pos:line="157" pos:column="25">.</op:operator><name pos:line="157" pos:column="26">SelectMany</name></name><argument_list pos:line="157" pos:column="36">(<argument><expr><name pos:line="157" pos:column="37">GetDefaultLetterWords</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="160" pos:column="9">private</specifier> <specifier pos:line="160" pos:column="17">static</specifier> <name><name pos:line="160" pos:column="24">IEnumerable</name><argument_list pos:line="160" pos:column="35">&lt;<argument><name pos:line="160" pos:column="36">String</name></argument>&gt;</argument_list></name></type> <name pos:line="160" pos:column="44">GetDefaultLetterWords</name><parameter_list pos:line="160" pos:column="65">(<param><decl><type><name pos:line="160" pos:column="66">String</name></type> <name pos:line="160" pos:column="73">code</name></decl></param>)</parameter_list>
        <block pos:line="161" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="162" pos:column="13">var</name></type> <name pos:line="162" pos:column="17">words</name> <init pos:line="162" pos:column="23">= <expr><op:operator pos:line="162" pos:column="25">new</op:operator> <call><name><name pos:line="162" pos:column="29">List</name><argument_list pos:line="162" pos:column="33">&lt;<argument><name pos:line="162" pos:column="34">String</name></argument>&gt;</argument_list></name><argument_list pos:line="162" pos:column="41">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="163" pos:column="13">words</name><op:operator pos:line="163" pos:column="18">.</op:operator><name pos:line="163" pos:column="19">AddRange</name></name><argument_list pos:line="163" pos:column="27">(<argument><expr><call><name pos:line="163" pos:column="28">GetMatchedWords</name><argument_list pos:line="163" pos:column="43">(<argument><expr><name pos:line="163" pos:column="44">_patternChars</name></expr></argument>, <argument><expr><name pos:line="163" pos:column="59">code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="164" pos:column="13">words</name><op:operator pos:line="164" pos:column="18">.</op:operator><name pos:line="164" pos:column="19">AddRange</name></name><argument_list pos:line="164" pos:column="27">(<argument><expr><call><name pos:line="164" pos:column="28">GetMatchedWords</name><argument_list pos:line="164" pos:column="43">(<argument><expr><name pos:line="164" pos:column="44">_patternCharsLowerCase</name></expr></argument>, <argument><expr><name pos:line="164" pos:column="68">code</name></expr></argument>)</argument_list></call><op:operator pos:line="164" pos:column="73">.</op:operator><call><name pos:line="164" pos:column="74">Select</name>
                <argument_list pos:line="165" pos:column="17">(<argument><expr><name pos:line="165" pos:column="18">TrimNonLetterPrefix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="166" pos:column="13">return <expr><name pos:line="166" pos:column="20">words</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="169" pos:column="9">private</specifier> <specifier pos:line="169" pos:column="17">static</specifier> <name pos:line="169" pos:column="24">String</name></type> <name pos:line="169" pos:column="31">TrimNonLetterPrefix</name><parameter_list pos:line="169" pos:column="50">(<param><decl><type><name pos:line="169" pos:column="51">String</name></type> <name pos:line="169" pos:column="58">word</name></decl></param>)</parameter_list>
        <block pos:line="170" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="171" pos:column="13">var</name></type> <name pos:line="171" pos:column="17">firstLetter</name> <init pos:line="171" pos:column="29">= <expr><call><name><name pos:line="171" pos:column="31">word</name><op:operator pos:line="171" pos:column="35">.</op:operator><name pos:line="171" pos:column="36">First</name></name><argument_list pos:line="171" pos:column="41">(<argument><expr><name><name pos:line="171" pos:column="42">Char</name><op:operator pos:line="171" pos:column="46">.</op:operator><name pos:line="171" pos:column="47">IsLetter</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="172" pos:column="13">return <expr><call><name><name pos:line="172" pos:column="20">word</name><op:operator pos:line="172" pos:column="24">.</op:operator><name pos:line="172" pos:column="25">Substring</name></name><argument_list pos:line="172" pos:column="34">(<argument><expr><call><name><name pos:line="172" pos:column="35">word</name><op:operator pos:line="172" pos:column="39">.</op:operator><name pos:line="172" pos:column="40">IndexOf</name></name><argument_list pos:line="172" pos:column="47">(<argument><expr><name pos:line="172" pos:column="48">firstLetter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="175" pos:column="9">private</specifier> <specifier pos:line="175" pos:column="17">static</specifier> <name><name pos:line="175" pos:column="24">IEnumerable</name><argument_list pos:line="175" pos:column="35">&lt;<argument><name pos:line="175" pos:column="36">string</name></argument>&gt;</argument_list></name></type> <name pos:line="175" pos:column="44">GetMatchedWords</name><parameter_list pos:line="175" pos:column="59">(<param><decl><type><name pos:line="175" pos:column="60">Regex</name></type> <name pos:line="175" pos:column="66">pattern</name></decl></param>, <param><decl><type><name pos:line="175" pos:column="75">String</name></type> <name pos:line="175" pos:column="82">code</name></decl></param>)</parameter_list>
        <block pos:line="176" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="177" pos:column="13">var</name></type> <name pos:line="177" pos:column="17">matches</name> <init pos:line="177" pos:column="25">= <expr><call><name><name pos:line="177" pos:column="27">pattern</name><op:operator pos:line="177" pos:column="34">.</op:operator><name pos:line="177" pos:column="35">Matches</name></name><argument_list pos:line="177" pos:column="42">(<argument><expr><name pos:line="177" pos:column="43">code</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="178" pos:column="13">return <expr><call><name><name pos:line="178" pos:column="20">matches</name><op:operator pos:line="178" pos:column="27">.</op:operator><name><name pos:line="178" pos:column="28">Cast</name><argument_list pos:line="178" pos:column="32">&lt;<argument><name pos:line="178" pos:column="33">Match</name></argument>&gt;</argument_list></name></name><argument_list pos:line="178" pos:column="39">()</argument_list></call><op:operator pos:line="178" pos:column="41">.</op:operator><call><name pos:line="178" pos:column="42">Select</name><argument_list pos:line="178" pos:column="48">(<argument><expr><lambda><name pos:line="178" pos:column="49">m</name> <op:operator pos:line="178" pos:column="51">=&gt;</op:operator> <name><name pos:line="178" pos:column="54">m</name><op:operator pos:line="178" pos:column="55">.</op:operator><name pos:line="178" pos:column="56">Groups</name><index pos:line="178" pos:column="62">[<expr><lit:literal type="number" pos:line="178" pos:column="63">0</lit:literal></expr>]</index></name><op:operator pos:line="178" pos:column="65">.</op:operator><name pos:line="178" pos:column="66">Value</name></lambda></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="181" pos:column="9">public</specifier> <specifier pos:line="181" pos:column="16">static</specifier> <name><name pos:line="181" pos:column="23">IEnumerable</name><argument_list pos:line="181" pos:column="34">&lt;<argument><name pos:line="181" pos:column="35">int</name></argument>&gt;</argument_list></name></type> <name pos:line="181" pos:column="40">GetQuoteStarts</name><parameter_list pos:line="181" pos:column="54">(<param><decl><type><name pos:line="181" pos:column="55">string</name></type> <name pos:line="181" pos:column="62">text</name></decl></param>)</parameter_list>
        <block pos:line="182" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="183" pos:column="13">var</name></type> <name pos:line="183" pos:column="17">matches</name> <init pos:line="183" pos:column="25">= <expr><call><name pos:line="183" pos:column="27">RemoveChildMatches</name><argument_list pos:line="183" pos:column="45">(<argument><expr><call><name><name pos:line="183" pos:column="46">_quotesPattern</name><op:operator pos:line="183" pos:column="60">.</op:operator><name pos:line="183" pos:column="61">Matches</name></name><argument_list pos:line="183" pos:column="68">(<argument><expr><name pos:line="183" pos:column="69">text</name></expr></argument>)</argument_list></call><op:operator pos:line="183" pos:column="74">.</op:operator><call><name><name pos:line="183" pos:column="75">Cast</name><argument_list pos:line="183" pos:column="79">&lt;<argument><name pos:line="183" pos:column="80">Match</name></argument>&gt;</argument_list></name><argument_list pos:line="183" pos:column="86">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="184" pos:column="13">return <expr><call><name><name pos:line="184" pos:column="20">matches</name><op:operator pos:line="184" pos:column="27">.</op:operator><name pos:line="184" pos:column="28">Select</name></name><argument_list pos:line="184" pos:column="34">(<argument><expr><lambda><name pos:line="184" pos:column="35">m</name> <op:operator pos:line="184" pos:column="37">=&gt;</op:operator> <name><name pos:line="184" pos:column="40">m</name><op:operator pos:line="184" pos:column="41">.</op:operator><name pos:line="184" pos:column="42">Groups</name><index pos:line="184" pos:column="48">[<expr><lit:literal type="number" pos:line="184" pos:column="49">0</lit:literal></expr>]</index></name><op:operator pos:line="184" pos:column="51">.</op:operator><name pos:line="184" pos:column="52">Index</name></lambda></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="187" pos:column="9">public</specifier> <specifier pos:line="187" pos:column="16">static</specifier> <name><name pos:line="187" pos:column="23">IEnumerable</name><argument_list pos:line="187" pos:column="34">&lt;<argument><name pos:line="187" pos:column="35">int</name></argument>&gt;</argument_list></name></type> <name pos:line="187" pos:column="40">GetQuoteEnds</name><parameter_list pos:line="187" pos:column="52">(<param><decl><type><name pos:line="187" pos:column="53">string</name></type> <name pos:line="187" pos:column="60">text</name></decl></param>)</parameter_list>
        <block pos:line="188" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="189" pos:column="13">var</name></type> <name pos:line="189" pos:column="17">matches</name> <init pos:line="189" pos:column="25">= <expr><call><name pos:line="189" pos:column="27">RemoveChildMatches</name><argument_list pos:line="189" pos:column="45">(<argument><expr><call><name><name pos:line="189" pos:column="46">_quotesPattern</name><op:operator pos:line="189" pos:column="60">.</op:operator><name pos:line="189" pos:column="61">Matches</name></name><argument_list pos:line="189" pos:column="68">(<argument><expr><name pos:line="189" pos:column="69">text</name></expr></argument>)</argument_list></call><op:operator pos:line="189" pos:column="74">.</op:operator><call><name><name pos:line="189" pos:column="75">Cast</name><argument_list pos:line="189" pos:column="79">&lt;<argument><name pos:line="189" pos:column="80">Match</name></argument>&gt;</argument_list></name><argument_list pos:line="189" pos:column="86">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="190" pos:column="13">return <expr><call><name><name pos:line="190" pos:column="20">matches</name><op:operator pos:line="190" pos:column="27">.</op:operator><name pos:line="190" pos:column="28">Select</name></name><argument_list pos:line="190" pos:column="34">(<argument><expr><lambda><name pos:line="190" pos:column="35">m</name> <op:operator pos:line="190" pos:column="37">=&gt;</op:operator> <name><name pos:line="190" pos:column="40">m</name><op:operator pos:line="190" pos:column="41">.</op:operator><name pos:line="190" pos:column="42">Groups</name><index pos:line="190" pos:column="48">[<expr><lit:literal type="number" pos:line="190" pos:column="49">0</lit:literal></expr>]</index></name><op:operator pos:line="190" pos:column="51">.</op:operator><name pos:line="190" pos:column="52">Index</name> <op:operator pos:line="190" pos:column="58">+</op:operator> <name><name pos:line="190" pos:column="60">m</name><op:operator pos:line="190" pos:column="61">.</op:operator><name pos:line="190" pos:column="62">Groups</name><index pos:line="190" pos:column="68">[<expr><lit:literal type="number" pos:line="190" pos:column="69">0</lit:literal></expr>]</index></name><op:operator pos:line="190" pos:column="71">.</op:operator><name pos:line="190" pos:column="72">Length</name> <op:operator pos:line="190" pos:column="79">-</op:operator> <lit:literal type="number" pos:line="190" pos:column="81">1</lit:literal></lambda></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>


        <function><type><specifier pos:line="194" pos:column="9">public</specifier> <specifier pos:line="194" pos:column="16">static</specifier> <name pos:line="194" pos:column="23">string</name></type> <name pos:line="194" pos:column="30">GetStemmedQuery</name><parameter_list pos:line="194" pos:column="45">(<param><decl><type><name pos:line="194" pos:column="46">this</name> <name pos:line="194" pos:column="51">String</name></type> <name pos:line="194" pos:column="58">query</name></decl></param>)</parameter_list>
        <block pos:line="195" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="196" pos:column="13">var</name></type> <name pos:line="196" pos:column="17">stemmer</name> <init pos:line="196" pos:column="25">= <expr><op:operator pos:line="196" pos:column="27">new</op:operator> <call><name pos:line="196" pos:column="31">EnglishStemmer</name><argument_list pos:line="196" pos:column="45">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="197" pos:column="13">stemmer</name><op:operator pos:line="197" pos:column="20">.</op:operator><name pos:line="197" pos:column="21">SetCurrent</name></name><argument_list pos:line="197" pos:column="31">(<argument><expr><name pos:line="197" pos:column="32">query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="198" pos:column="13">stemmer</name><op:operator pos:line="198" pos:column="20">.</op:operator><name pos:line="198" pos:column="21">Stem</name></name><argument_list pos:line="198" pos:column="25">()</argument_list></call></expr>;</expr_stmt>
            <return pos:line="199" pos:column="13">return <expr><call><name><name pos:line="199" pos:column="20">stemmer</name><op:operator pos:line="199" pos:column="27">.</op:operator><name pos:line="199" pos:column="28">GetCurrent</name></name><argument_list pos:line="199" pos:column="38">()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="202" pos:column="9">private</specifier> <specifier pos:line="202" pos:column="17">static</specifier> <name><name pos:line="202" pos:column="24">IEnumerable</name><argument_list pos:line="202" pos:column="35">&lt;<argument><name pos:line="202" pos:column="36">Match</name></argument>&gt;</argument_list></name></type> <name pos:line="202" pos:column="43">RemoveChildMatches</name><parameter_list pos:line="202" pos:column="61">(<param><decl><type><name><name pos:line="202" pos:column="62">IEnumerable</name><argument_list pos:line="202" pos:column="73">&lt;<argument><name pos:line="202" pos:column="74">Match</name></argument>&gt;</argument_list></name></type> <name pos:line="202" pos:column="81">matches</name></decl></param>)</parameter_list>
        <block pos:line="203" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="204" pos:column="13">var</name></type> <name pos:line="204" pos:column="17">simplifiedMatches</name> <init pos:line="204" pos:column="35">= <expr><call><name><name pos:line="204" pos:column="37">matches</name><op:operator pos:line="204" pos:column="44">.</op:operator><name pos:line="204" pos:column="45">ToList</name></name><argument_list pos:line="204" pos:column="51">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="205" pos:column="13">foreach (<init><decl><type><name pos:line="205" pos:column="22">var</name></type> <name pos:line="205" pos:column="26">match</name> <range pos:line="205" pos:column="32">in <expr><name pos:line="205" pos:column="35">matches</name></expr></range></decl></init>)
            <block pos:line="206" pos:column="13">{
                <if pos:line="207" pos:column="17">if<condition pos:line="207" pos:column="19">(<expr><call><name><name pos:line="207" pos:column="20">matches</name><op:operator pos:line="207" pos:column="27">.</op:operator><name pos:line="207" pos:column="28">Any</name></name><argument_list pos:line="207" pos:column="31">(<argument><expr><lambda><name pos:line="207" pos:column="32">m</name> <op:operator pos:line="207" pos:column="34">=&gt;</op:operator> <call><name pos:line="207" pos:column="37">IsMatchIncluding</name><argument_list pos:line="207" pos:column="53">(<argument><expr><name pos:line="207" pos:column="54">m</name></expr></argument>, <argument><expr><name pos:line="207" pos:column="57">match</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="207" pos:column="65">
                <block pos:line="208" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="209" pos:column="21">simplifiedMatches</name><op:operator pos:line="209" pos:column="38">.</op:operator><name pos:line="209" pos:column="39">Remove</name></name><argument_list pos:line="209" pos:column="45">(<argument><expr><name pos:line="209" pos:column="46">match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></foreach>
            <return pos:line="212" pos:column="13">return <expr><name pos:line="212" pos:column="20">simplifiedMatches</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="215" pos:column="9">private</specifier> <specifier pos:line="215" pos:column="17">static</specifier> <name pos:line="215" pos:column="24">Boolean</name></type> <name pos:line="215" pos:column="32">IsMatchIncluding</name><parameter_list pos:line="215" pos:column="48">(<param><decl><type><name pos:line="215" pos:column="49">Match</name></type> <name pos:line="215" pos:column="55">m1</name></decl></param>, <param><decl><type><name pos:line="215" pos:column="59">Match</name></type> <name pos:line="215" pos:column="65">m2</name></decl></param>)</parameter_list>
        <block pos:line="216" pos:column="9">{
            <return pos:line="217" pos:column="13">return <expr><op:operator pos:line="217" pos:column="20">!</op:operator><call><name><name pos:line="217" pos:column="21">m1</name><op:operator pos:line="217" pos:column="23">.</op:operator><name pos:line="217" pos:column="24">Equals</name></name><argument_list pos:line="217" pos:column="30">(<argument><expr><name pos:line="217" pos:column="31">m2</name></expr></argument>)</argument_list></call> <op:operator pos:line="217" pos:column="35">&amp;&amp;</op:operator> <name><name pos:line="217" pos:column="38">m1</name><op:operator pos:line="217" pos:column="40">.</op:operator><name pos:line="217" pos:column="41">Groups</name><index pos:line="217" pos:column="47">[<expr><lit:literal type="number" pos:line="217" pos:column="48">0</lit:literal></expr>]</index></name><op:operator pos:line="217" pos:column="50">.</op:operator><name pos:line="217" pos:column="51">Index</name> <op:operator pos:line="217" pos:column="57">&lt;=</op:operator> <name><name pos:line="217" pos:column="60">m2</name><op:operator pos:line="217" pos:column="62">.</op:operator><name pos:line="217" pos:column="63">Groups</name><index pos:line="217" pos:column="69">[<expr><lit:literal type="number" pos:line="217" pos:column="70">0</lit:literal></expr>]</index></name><op:operator pos:line="217" pos:column="72">.</op:operator><name pos:line="217" pos:column="73">Index</name> <op:operator pos:line="217" pos:column="79">&amp;&amp;</op:operator>
                   <name><name pos:line="218" pos:column="20">m1</name><op:operator pos:line="218" pos:column="22">.</op:operator><name pos:line="218" pos:column="23">Groups</name><index pos:line="218" pos:column="29">[<expr><lit:literal type="number" pos:line="218" pos:column="30">0</lit:literal></expr>]</index></name><op:operator pos:line="218" pos:column="32">.</op:operator><name pos:line="218" pos:column="33">Length</name> <op:operator pos:line="218" pos:column="40">+</op:operator> <name><name pos:line="218" pos:column="42">m1</name><op:operator pos:line="218" pos:column="44">.</op:operator><name pos:line="218" pos:column="45">Groups</name><index pos:line="218" pos:column="51">[<expr><lit:literal type="number" pos:line="218" pos:column="52">0</lit:literal></expr>]</index></name><op:operator pos:line="218" pos:column="54">.</op:operator><name pos:line="218" pos:column="55">Index</name> <op:operator pos:line="218" pos:column="61">&gt;=</op:operator> <name><name pos:line="218" pos:column="64">m2</name><op:operator pos:line="218" pos:column="66">.</op:operator><name pos:line="218" pos:column="67">Groups</name><index pos:line="218" pos:column="73">[<expr><lit:literal type="number" pos:line="218" pos:column="74">0</lit:literal></expr>]</index></name><op:operator pos:line="218" pos:column="76">.</op:operator><name pos:line="218" pos:column="77">Length</name> <op:operator pos:line="218" pos:column="84">+</op:operator> <name><name pos:line="218" pos:column="86">m2</name><op:operator pos:line="218" pos:column="88">.</op:operator><name pos:line="218" pos:column="89">Groups</name><index pos:line="218" pos:column="95">[<expr><lit:literal type="number" pos:line="218" pos:column="96">0</lit:literal></expr>]</index></name><op:operator pos:line="218" pos:column="98">.</op:operator><name pos:line="218" pos:column="99">Index</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
