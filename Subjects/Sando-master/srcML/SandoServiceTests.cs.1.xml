<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\IntegrationTests\SandoServiceTests.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">EnvDTE</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">Microsoft</name><op:operator pos:line="2" pos:column="16">.</op:operator><name pos:line="2" pos:column="17">VisualStudio</name><op:operator pos:line="2" pos:column="29">.</op:operator><name pos:line="2" pos:column="30">TestTools</name><op:operator pos:line="2" pos:column="39">.</op:operator><name pos:line="2" pos:column="40">UnitTesting</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Microsoft</name><op:operator pos:line="3" pos:column="16">.</op:operator><name pos:line="3" pos:column="17">VSSDK</name><op:operator pos:line="3" pos:column="22">.</op:operator><name pos:line="3" pos:column="23">Tools</name><op:operator pos:line="3" pos:column="28">.</op:operator><name pos:line="3" pos:column="29">VsIdeTesting</name></name>;</using>
<using pos:line="4" pos:column="1">using <name pos:line="4" pos:column="7">System</name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Collections</name><op:operator pos:line="5" pos:column="25">.</op:operator><name pos:line="5" pos:column="26">Generic</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">System</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">IO</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">System</name><op:operator pos:line="7" pos:column="13">.</op:operator><name pos:line="7" pos:column="14">Linq</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">System</name><op:operator pos:line="8" pos:column="13">.</op:operator><name pos:line="8" pos:column="14">Text</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">System</name><op:operator pos:line="9" pos:column="13">.</op:operator><name pos:line="9" pos:column="14">Threading</name></name>;</using>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">System</name><op:operator pos:line="10" pos:column="13">.</op:operator><name pos:line="10" pos:column="14">Threading</name><op:operator pos:line="10" pos:column="23">.</op:operator><name pos:line="10" pos:column="24">Tasks</name></name>;</using>
<using pos:line="11" pos:column="1">using <name><name pos:line="11" pos:column="7">System</name><op:operator pos:line="11" pos:column="13">.</op:operator><name pos:line="11" pos:column="14">Windows</name><op:operator pos:line="11" pos:column="21">.</op:operator><name pos:line="11" pos:column="22">Forms</name></name>;</using>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">Sando</name><op:operator pos:line="12" pos:column="12">.</op:operator><name pos:line="12" pos:column="13">DependencyInjection</name></name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">Sando</name><op:operator pos:line="13" pos:column="12">.</op:operator><name pos:line="13" pos:column="13">Recommender</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">Sando</name><op:operator pos:line="14" pos:column="12">.</op:operator><name pos:line="14" pos:column="13">UI</name><op:operator pos:line="14" pos:column="15">.</op:operator><name pos:line="14" pos:column="16">View</name></name>;</using>

<namespace pos:line="16" pos:column="1">namespace <name><name pos:line="16" pos:column="11">Sando</name><op:operator pos:line="16" pos:column="16">.</op:operator><name pos:line="16" pos:column="17">IntegrationTests</name></name>
<block pos:line="17" pos:column="1">{
    <class><attribute pos:line="18" pos:column="5">[<expr><name pos:line="18" pos:column="6">TestClass</name></expr>]</attribute>
    <specifier pos:line="19" pos:column="5">public</specifier> class <name pos:line="19" pos:column="18">SandoServiceTests</name> <super pos:line="19" pos:column="36">: <name pos:line="19" pos:column="38">IInvoker</name></super>
    <block pos:line="20" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="21" pos:column="9">private</specifier> <specifier pos:line="21" pos:column="17">const</specifier> <name pos:line="21" pos:column="23">string</name></type> <name pos:line="21" pos:column="30">TestSolutionName</name> <init pos:line="21" pos:column="47">= <expr><lit:literal type="string" pos:line="21" pos:column="49">"tictactoe"</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="22" pos:column="9">private</specifier> <specifier pos:line="22" pos:column="17">static</specifier> <name pos:line="22" pos:column="24">Solution</name></type> <name pos:line="22" pos:column="33">TestSolution</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="23" pos:column="9">private</specifier> <specifier pos:line="23" pos:column="17">static</specifier> <name pos:line="23" pos:column="24">object</name></type> <name pos:line="23" pos:column="31">TestLock</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="25" pos:column="9">private</specifier> <specifier pos:line="25" pos:column="17">static</specifier> <name pos:line="25" pos:column="24">string</name></type> <name pos:line="25" pos:column="31">TestSolutionPath</name> <init pos:line="25" pos:column="48">= <expr><call><name><name pos:line="25" pos:column="50">Path</name><op:operator pos:line="25" pos:column="54">.</op:operator><name pos:line="25" pos:column="55">Combine</name></name><argument_list pos:line="25" pos:column="62">(<argument><expr><name pos:line="25" pos:column="63">TestSolutionName</name></expr></argument>, <argument><expr><name pos:line="25" pos:column="81">TestSolutionName</name> <op:operator pos:line="25" pos:column="98">+</op:operator> <lit:literal type="string" pos:line="25" pos:column="100">".sln"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <function><type><attribute pos:line="27" pos:column="9">[<expr><name pos:line="27" pos:column="10">ClassInitialize</name></expr>]</attribute>
        <specifier pos:line="28" pos:column="9">public</specifier> <specifier pos:line="28" pos:column="16">static</specifier> <name pos:line="28" pos:column="23">void</name></type> <name pos:line="28" pos:column="28">ClassSetup</name><parameter_list pos:line="28" pos:column="38">(<param><decl><type><name pos:line="28" pos:column="39">TestContext</name></type> <name pos:line="28" pos:column="51">testContext</name></decl></param>)</parameter_list>
        <block pos:line="29" pos:column="9">{
            <comment type="line" pos:line="30" pos:column="13">// Create a local copy of the solution</comment>
            <expr_stmt><expr><call><name><name pos:line="31" pos:column="13">TestHelpers</name><op:operator pos:line="31" pos:column="24">.</op:operator><name pos:line="31" pos:column="25">CopyDirectory</name></name><argument_list pos:line="31" pos:column="38">(<argument><expr><call><name><name pos:line="31" pos:column="39">Path</name><op:operator pos:line="31" pos:column="43">.</op:operator><name pos:line="31" pos:column="44">Combine</name></name><argument_list pos:line="31" pos:column="51">(<argument><expr><name><name pos:line="31" pos:column="52">TestConstants</name><op:operator pos:line="31" pos:column="65">.</op:operator><name pos:line="31" pos:column="66">InputFolderPath</name></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="83">TestSolutionName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="31" pos:column="102">TestSolutionName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="32" pos:column="13">TestHelpers</name><op:operator pos:line="32" pos:column="24">.</op:operator><name pos:line="32" pos:column="25">CopyDirectory</name></name><argument_list pos:line="32" pos:column="38">(<argument><expr><call><name><name pos:line="32" pos:column="39">TestHelpers</name><op:operator pos:line="32" pos:column="50">.</op:operator><name pos:line="32" pos:column="51">GetSolutionDirectory</name></name><argument_list pos:line="32" pos:column="71">()</argument_list></call> <op:operator pos:line="32" pos:column="74">+</op:operator> <lit:literal type="string" pos:line="32" pos:column="76">@"/LIBS/SrcML"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="32" pos:column="92">"SrcML"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="33" pos:column="13">TestHelpers</name><op:operator pos:line="33" pos:column="24">.</op:operator><name pos:line="33" pos:column="25">CopyDirectory</name></name><argument_list pos:line="33" pos:column="38">(<argument><expr><call><name><name pos:line="33" pos:column="39">TestHelpers</name><op:operator pos:line="33" pos:column="50">.</op:operator><name pos:line="33" pos:column="51">GetSolutionDirectory</name></name><argument_list pos:line="33" pos:column="71">()</argument_list></call> <op:operator pos:line="33" pos:column="74">+</op:operator> <lit:literal type="string" pos:line="33" pos:column="76">@"/Core/Core/Dictionaries"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="33" pos:column="104">"Dictionaries"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="34" pos:column="13">TestHelpers</name><op:operator pos:line="34" pos:column="24">.</op:operator><name pos:line="34" pos:column="25">CopyDirectory</name></name><argument_list pos:line="34" pos:column="38">(<argument><expr><call><name><name pos:line="34" pos:column="39">TestHelpers</name><op:operator pos:line="34" pos:column="50">.</op:operator><name pos:line="34" pos:column="51">GetSolutionDirectory</name></name><argument_list pos:line="34" pos:column="71">()</argument_list></call> <op:operator pos:line="34" pos:column="74">+</op:operator> <lit:literal type="string" pos:line="34" pos:column="76">@"/Recommender/Recommender/swum-data"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="34" pos:column="115">"swum-data"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="35" pos:column="13">File</name><op:operator pos:line="35" pos:column="17">.</op:operator><name pos:line="35" pos:column="18">Copy</name></name><argument_list pos:line="35" pos:column="22">(<argument><expr><call><name><name pos:line="35" pos:column="23">TestHelpers</name><op:operator pos:line="35" pos:column="34">.</op:operator><name pos:line="35" pos:column="35">GetSolutionDirectory</name></name><argument_list pos:line="35" pos:column="55">()</argument_list></call> <op:operator pos:line="35" pos:column="58">+</op:operator> <lit:literal type="string" pos:line="35" pos:column="60">@"\LIBS\Swum.NET\ABB.Swum.dll.config"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="35" pos:column="99">"ABB.Swum.dll.config"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="36" pos:column="13">TestLock</name> <op:operator pos:line="36" pos:column="22">=</op:operator> <op:operator pos:line="36" pos:column="24">new</op:operator> <call><name pos:line="36" pos:column="28">object</name><argument_list pos:line="36" pos:column="34">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="39" pos:column="9">[<expr><name pos:line="39" pos:column="10">TestInitialize</name></expr>]</attribute>
        <specifier pos:line="40" pos:column="9">public</specifier> <name pos:line="40" pos:column="16">void</name></type> <name pos:line="40" pos:column="21">Setup</name><parameter_list pos:line="40" pos:column="26">()</parameter_list>
        <block pos:line="41" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="42" pos:column="13">Invoke</name><argument_list pos:line="42" pos:column="19">(<argument><expr><name pos:line="42" pos:column="20">StartupCompleted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>            
            <expr_stmt><expr><name pos:line="43" pos:column="13">TestSolution</name> <op:operator pos:line="43" pos:column="26">=</op:operator> <name><name pos:line="43" pos:column="28">VsIdeTestHostContext</name><op:operator pos:line="43" pos:column="48">.</op:operator><name pos:line="43" pos:column="49">Dte</name><op:operator pos:line="43" pos:column="52">.</op:operator><name pos:line="43" pos:column="53">Solution</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="44" pos:column="13">Assert</name><op:operator pos:line="44" pos:column="19">.</op:operator><name pos:line="44" pos:column="20">IsNotNull</name></name><argument_list pos:line="44" pos:column="29">(<argument><expr><name pos:line="44" pos:column="30">TestSolution</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="44" pos:column="44">"Could not get the solution"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="45" pos:column="13">TestSolution</name><op:operator pos:line="45" pos:column="25">.</op:operator><name pos:line="45" pos:column="26">Open</name></name><argument_list pos:line="45" pos:column="30">(<argument><expr><call><name><name pos:line="45" pos:column="31">Path</name><op:operator pos:line="45" pos:column="35">.</op:operator><name pos:line="45" pos:column="36">GetFullPath</name></name><argument_list pos:line="45" pos:column="47">(<argument><expr><name pos:line="45" pos:column="48">TestSolutionPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="46" pos:column="13">TestHelpers</name><op:operator pos:line="46" pos:column="24">.</op:operator><name pos:line="46" pos:column="25">SrcMLTestScaffold</name><op:operator pos:line="46" pos:column="42">.</op:operator><name pos:line="46" pos:column="43">Service</name><op:operator pos:line="46" pos:column="50">.</op:operator><name pos:line="46" pos:column="51">StartMonitoring</name></name><argument_list pos:line="46" pos:column="66">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="49" pos:column="9">private</specifier> <name pos:line="49" pos:column="17">void</name></type> <name pos:line="49" pos:column="22">StartupCompleted</name><parameter_list pos:line="49" pos:column="38">()</parameter_list>
        <block pos:line="50" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="51" pos:column="13">TestHelpers</name><op:operator pos:line="51" pos:column="24">.</op:operator><name pos:line="51" pos:column="25">StartupCompleted</name></name><argument_list pos:line="51" pos:column="41">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="54" pos:column="9">[<expr><name pos:line="54" pos:column="10">TestCleanup</name></expr>]</attribute>
        <specifier pos:line="55" pos:column="9">public</specifier> <name pos:line="55" pos:column="16">void</name></type> <name pos:line="55" pos:column="21">Cleanup</name><parameter_list pos:line="55" pos:column="28">()</parameter_list>
        <block pos:line="56" pos:column="9">{            
            <expr_stmt><expr><call><name><name pos:line="57" pos:column="13">TestSolution</name><op:operator pos:line="57" pos:column="25">.</op:operator><name pos:line="57" pos:column="26">Close</name></name><argument_list pos:line="57" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="58" pos:column="13">TestHelpers</name><op:operator pos:line="58" pos:column="24">.</op:operator><name pos:line="58" pos:column="25">SrcMLTestScaffold</name><op:operator pos:line="58" pos:column="42">.</op:operator><name pos:line="58" pos:column="43">Service</name><op:operator pos:line="58" pos:column="50">.</op:operator><name pos:line="58" pos:column="51">StopMonitoring</name></name><argument_list pos:line="58" pos:column="65">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="61" pos:column="9">[<expr><name pos:line="61" pos:column="10">TestMethod</name></expr>]</attribute>
        <attribute pos:line="62" pos:column="9">[<expr><call><name pos:line="62" pos:column="10">HostType</name><argument_list pos:line="62" pos:column="18">(<argument><expr><lit:literal type="string" pos:line="62" pos:column="19">"VS IDE"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="63" pos:column="9">public</specifier> <name pos:line="63" pos:column="16">void</name></type> <name pos:line="63" pos:column="21">SearchTest</name><parameter_list pos:line="63" pos:column="31">()</parameter_list>
        <block pos:line="64" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="65" pos:column="13">Assert</name><op:operator pos:line="65" pos:column="19">.</op:operator><name pos:line="65" pos:column="20">IsTrue</name></name><argument_list pos:line="65" pos:column="26">(<argument><expr><call><name><name pos:line="65" pos:column="27">TestHelpers</name><op:operator pos:line="65" pos:column="38">.</op:operator><name pos:line="65" pos:column="39">WaitForServiceToFinish</name></name><argument_list pos:line="65" pos:column="61">(<argument><expr><name><name pos:line="65" pos:column="62">TestHelpers</name><op:operator pos:line="65" pos:column="73">.</op:operator><name pos:line="65" pos:column="74">SrcMLTestScaffold</name><op:operator pos:line="65" pos:column="91">.</op:operator><name pos:line="65" pos:column="92">Service</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="65" pos:column="101">5000</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <try pos:line="66" pos:column="13">try
            <block pos:line="67" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="68" pos:column="17">var</name></type> <name pos:line="68" pos:column="21">results</name> <init pos:line="68" pos:column="29">= <expr><call><name><name pos:line="68" pos:column="31">TestHelpers</name><op:operator pos:line="68" pos:column="42">.</op:operator><name pos:line="68" pos:column="43">TestScaffold</name><op:operator pos:line="68" pos:column="55">.</op:operator><name pos:line="68" pos:column="56">Service</name><op:operator pos:line="68" pos:column="63">.</op:operator><name pos:line="68" pos:column="64">GetSearchResults</name></name><argument_list pos:line="68" pos:column="80">(<argument><expr><lit:literal type="string" pos:line="68" pos:column="81">"game pad"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="69" pos:column="17">Assert</name><op:operator pos:line="69" pos:column="23">.</op:operator><name pos:line="69" pos:column="24">IsTrue</name></name><argument_list pos:line="69" pos:column="30">(<argument><expr><name><name pos:line="69" pos:column="31">results</name><op:operator pos:line="69" pos:column="38">.</op:operator><name pos:line="69" pos:column="39">Count</name></name> <op:operator pos:line="69" pos:column="45">&gt;</op:operator> <lit:literal type="number" pos:line="69" pos:column="47">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="69" pos:column="50">"Did not find any results when I should have"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>     
                <expr_stmt><expr><call><name><name pos:line="70" pos:column="17">Assert</name><op:operator pos:line="70" pos:column="23">.</op:operator><name pos:line="70" pos:column="24">IsTrue</name></name><argument_list pos:line="70" pos:column="30">(<argument><expr><call><name><name pos:line="70" pos:column="31">results</name><op:operator pos:line="70" pos:column="38">.</op:operator><name pos:line="70" pos:column="39">First</name></name><argument_list pos:line="70" pos:column="44">()</argument_list></call><op:operator pos:line="70" pos:column="46">.</op:operator><call><name><name pos:line="70" pos:column="47">Name</name><op:operator pos:line="70" pos:column="51">.</op:operator><name pos:line="70" pos:column="52">Equals</name></name><argument_list pos:line="70" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="70" pos:column="59">"GamePadNode"</lit:literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><lit:literal type="string" pos:line="70" pos:column="74">"Didn't find fthe correct first result, found: "</lit:literal><op:operator pos:line="70" pos:column="122">+</op:operator><call><name><name pos:line="70" pos:column="123">results</name><op:operator pos:line="70" pos:column="130">.</op:operator><name pos:line="70" pos:column="131">First</name></name><argument_list pos:line="70" pos:column="136">()</argument_list></call><op:operator pos:line="70" pos:column="138">.</op:operator><name pos:line="70" pos:column="139">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch pos:line="72" pos:column="13">catch <parameter_list pos:line="72" pos:column="19">(<param><decl><type><name pos:line="72" pos:column="20">Exception</name></type> <name pos:line="72" pos:column="30">e</name></decl></param>)</parameter_list>
            <block pos:line="73" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="74" pos:column="17">Assert</name><op:operator pos:line="74" pos:column="23">.</op:operator><name pos:line="74" pos:column="24">IsTrue</name></name><argument_list pos:line="74" pos:column="30">(<argument><expr><lit:literal type="boolean" pos:line="74" pos:column="31">false</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="74" pos:column="38">"Search failed with an exception: "</lit:literal> <op:operator pos:line="74" pos:column="74">+</op:operator> <name><name pos:line="74" pos:column="76">e</name><op:operator pos:line="74" pos:column="77">.</op:operator><name pos:line="74" pos:column="78">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>            
        }</block></function>

        <function><type><attribute pos:line="78" pos:column="9">[<expr><name pos:line="78" pos:column="10">TestMethod</name></expr>]</attribute>
        <attribute pos:line="79" pos:column="9">[<expr><call><name pos:line="79" pos:column="10">HostType</name><argument_list pos:line="79" pos:column="18">(<argument><expr><lit:literal type="string" pos:line="79" pos:column="19">"VS IDE"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="80" pos:column="9">public</specifier> <name pos:line="80" pos:column="16">void</name></type> <name pos:line="80" pos:column="21">RecommendationsTest</name><parameter_list pos:line="80" pos:column="40">()</parameter_list>
        <block pos:line="81" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="82" pos:column="13">Assert</name><op:operator pos:line="82" pos:column="19">.</op:operator><name pos:line="82" pos:column="20">IsTrue</name></name><argument_list pos:line="82" pos:column="26">(<argument><expr><call><name><name pos:line="82" pos:column="27">TestHelpers</name><op:operator pos:line="82" pos:column="38">.</op:operator><name pos:line="82" pos:column="39">WaitForServiceToFinish</name></name><argument_list pos:line="82" pos:column="61">(<argument><expr><name><name pos:line="82" pos:column="62">TestHelpers</name><op:operator pos:line="82" pos:column="73">.</op:operator><name pos:line="82" pos:column="74">SrcMLTestScaffold</name><op:operator pos:line="82" pos:column="91">.</op:operator><name pos:line="82" pos:column="92">Service</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="82" pos:column="101">5000</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <try pos:line="83" pos:column="13">try
            <block pos:line="84" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="85" pos:column="17">var</name></type> <name pos:line="85" pos:column="21">recommender</name> <init pos:line="85" pos:column="33">= <expr><call><name><name pos:line="85" pos:column="35">ServiceLocator</name><op:operator pos:line="85" pos:column="49">.</op:operator><name><name pos:line="85" pos:column="50">Resolve</name><argument_list pos:line="85" pos:column="57">&lt;<argument><name pos:line="85" pos:column="58">QueryRecommender</name></argument>&gt;</argument_list></name></name><argument_list pos:line="85" pos:column="75">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="86" pos:column="17">Assert</name><op:operator pos:line="86" pos:column="23">.</op:operator><name pos:line="86" pos:column="24">IsTrue</name></name><argument_list pos:line="86" pos:column="30">(<argument><expr><call><name><name pos:line="86" pos:column="31">recommender</name><op:operator pos:line="86" pos:column="42">.</op:operator><name pos:line="86" pos:column="43">GenerateRecommendations</name></name><argument_list pos:line="86" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="86" pos:column="67">"play"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="86" pos:column="74">.</op:operator><name pos:line="86" pos:column="75">Length</name> <op:operator pos:line="86" pos:column="82">&gt;</op:operator> <lit:literal type="number" pos:line="86" pos:column="84">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="86" pos:column="87">"Did not find any recommendations when I should have"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="87" pos:column="17">Assert</name><op:operator pos:line="87" pos:column="23">.</op:operator><name pos:line="87" pos:column="24">IsTrue</name></name><argument_list pos:line="87" pos:column="30">(<argument><expr><call><name><name pos:line="87" pos:column="31">recommender</name><op:operator pos:line="87" pos:column="42">.</op:operator><name pos:line="87" pos:column="43">GenerateRecommendations</name></name><argument_list pos:line="87" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="87" pos:column="67">"play"</lit:literal></expr></argument>)</argument_list></call><index pos:line="87" pos:column="74">[<expr><lit:literal type="number" pos:line="87" pos:column="75">0</lit:literal></expr>]</index><op:operator pos:line="87" pos:column="77">.</op:operator><call><name><name pos:line="87" pos:column="78">Query</name><op:operator pos:line="87" pos:column="83">.</op:operator><name pos:line="87" pos:column="84">Equals</name></name><argument_list pos:line="87" pos:column="90">(<argument><expr><lit:literal type="string" pos:line="87" pos:column="91">"Player"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="87" pos:column="102">"Didn't find the correct first result, found: "</lit:literal> <op:operator pos:line="87" pos:column="150">+</op:operator> <call><name><name pos:line="87" pos:column="152">recommender</name><op:operator pos:line="87" pos:column="163">.</op:operator><name pos:line="87" pos:column="164">GenerateRecommendations</name></name><argument_list pos:line="87" pos:column="187">(<argument><expr><lit:literal type="string" pos:line="87" pos:column="188">"game"</lit:literal></expr></argument>)</argument_list></call><index pos:line="87" pos:column="195">[<expr><lit:literal type="number" pos:line="87" pos:column="196">0</lit:literal></expr>]</index><op:operator pos:line="87" pos:column="198">.</op:operator><name pos:line="87" pos:column="199">Query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch pos:line="89" pos:column="13">catch <parameter_list pos:line="89" pos:column="19">(<param><decl><type><name pos:line="89" pos:column="20">Exception</name></type> <name pos:line="89" pos:column="30">e</name></decl></param>)</parameter_list>
            <block pos:line="90" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="91" pos:column="17">Assert</name><op:operator pos:line="91" pos:column="23">.</op:operator><name pos:line="91" pos:column="24">IsTrue</name></name><argument_list pos:line="91" pos:column="30">(<argument><expr><lit:literal type="boolean" pos:line="91" pos:column="31">false</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="91" pos:column="38">"Search failed with an exception: "</lit:literal> <op:operator pos:line="91" pos:column="74">+</op:operator> <name><name pos:line="91" pos:column="76">e</name><op:operator pos:line="91" pos:column="77">.</op:operator><name pos:line="91" pos:column="78">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></function>

        <function><type><attribute pos:line="95" pos:column="9">[<expr><name pos:line="95" pos:column="10">TestMethod</name></expr>]</attribute>
        <attribute pos:line="96" pos:column="9">[<expr><call><name pos:line="96" pos:column="10">HostType</name><argument_list pos:line="96" pos:column="18">(<argument><expr><lit:literal type="string" pos:line="96" pos:column="19">"VS IDE"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="97" pos:column="9">public</specifier> <name pos:line="97" pos:column="16">void</name></type> <name pos:line="97" pos:column="21">SummarizationTest</name><parameter_list pos:line="97" pos:column="38">()</parameter_list>
        <block pos:line="98" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="99" pos:column="13">Assert</name><op:operator pos:line="99" pos:column="19">.</op:operator><name pos:line="99" pos:column="20">IsTrue</name></name><argument_list pos:line="99" pos:column="26">(<argument><expr><call><name><name pos:line="99" pos:column="27">TestHelpers</name><op:operator pos:line="99" pos:column="38">.</op:operator><name pos:line="99" pos:column="39">WaitForServiceToFinish</name></name><argument_list pos:line="99" pos:column="61">(<argument><expr><name><name pos:line="99" pos:column="62">TestHelpers</name><op:operator pos:line="99" pos:column="73">.</op:operator><name pos:line="99" pos:column="74">SrcMLTestScaffold</name><op:operator pos:line="99" pos:column="91">.</op:operator><name pos:line="99" pos:column="92">Service</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="99" pos:column="101">10000</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="100" pos:column="13">var</name></type> <name pos:line="100" pos:column="17">firstResult</name> <init pos:line="100" pos:column="29">= <expr><call><name><name pos:line="100" pos:column="31">TestHelpers</name><op:operator pos:line="100" pos:column="42">.</op:operator><name pos:line="100" pos:column="43">TestScaffold</name><op:operator pos:line="100" pos:column="55">.</op:operator><name pos:line="100" pos:column="56">Service</name><op:operator pos:line="100" pos:column="63">.</op:operator><name pos:line="100" pos:column="64">GetSearchResults</name></name><argument_list pos:line="100" pos:column="80">(<argument><expr><lit:literal type="string" pos:line="100" pos:column="81">"pc player game"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="100" pos:column="98">.</op:operator><call><name pos:line="100" pos:column="99">First</name><argument_list pos:line="100" pos:column="104">()</argument_list></call></expr></init></decl>;</decl_stmt>            
            <decl_stmt><decl><type><name pos:line="101" pos:column="13">var</name></type> <name pos:line="101" pos:column="17">control</name> <init pos:line="101" pos:column="25">= <expr><call><name><name pos:line="101" pos:column="27">ServiceLocator</name><op:operator pos:line="101" pos:column="41">.</op:operator><name><name pos:line="101" pos:column="42">Resolve</name><argument_list pos:line="101" pos:column="49">&lt;<argument><name pos:line="101" pos:column="50">SearchViewControl</name></argument>&gt;</argument_list></name></name><argument_list pos:line="101" pos:column="68">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="102" pos:column="13">string</name></type> <name pos:line="102" pos:column="20">highlight</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="103" pos:column="13">string</name></type> <name pos:line="103" pos:column="20">highlightRaw</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="104" pos:column="13">control</name><op:operator pos:line="104" pos:column="20">.</op:operator><name pos:line="104" pos:column="21">GenerateHighlight</name></name><argument_list pos:line="104" pos:column="38">(<argument><expr><name><name pos:line="104" pos:column="39">firstResult</name><op:operator pos:line="104" pos:column="50">.</op:operator><name pos:line="104" pos:column="51">Raw</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="104" pos:column="56">"play"</lit:literal></expr></argument>, <argument><expr pos:line="104" pos:column="64">out <name pos:line="104" pos:column="68">highlight</name></expr></argument>, <argument><expr pos:line="104" pos:column="79">out <name pos:line="104" pos:column="83">highlightRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:line="105" pos:column="13">//        public PCPlayer PCPlayer</comment>
            <comment type="line" pos:line="106" pos:column="13">//Assert.IsTrue(false, highlight);</comment>
            <expr_stmt><expr><call><name><name pos:line="107" pos:column="13">Assert</name><op:operator pos:line="107" pos:column="19">.</op:operator><name pos:line="107" pos:column="20">IsTrue</name></name><argument_list pos:line="107" pos:column="26">(<argument><expr><call><name><name pos:line="107" pos:column="27">highlight</name><op:operator pos:line="107" pos:column="36">.</op:operator><name pos:line="107" pos:column="37">Contains</name></name><argument_list pos:line="107" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="107" pos:column="46">"public PC|~S~|Play|~E~|er PC|~S~|Play|~E~|er"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="108" pos:column="13">Assert</name><op:operator pos:line="108" pos:column="19">.</op:operator><name pos:line="108" pos:column="20">IsFalse</name></name><argument_list pos:line="108" pos:column="27">(<argument><expr><call><name><name pos:line="108" pos:column="28">highlight</name><op:operator pos:line="108" pos:column="37">.</op:operator><name pos:line="108" pos:column="38">Contains</name></name><argument_list pos:line="108" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="108" pos:column="47">"get"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:line="109" pos:column="13">//                return pcPlayer;</comment>
            <expr_stmt><expr><call><name><name pos:line="110" pos:column="13">Assert</name><op:operator pos:line="110" pos:column="19">.</op:operator><name pos:line="110" pos:column="20">IsTrue</name></name><argument_list pos:line="110" pos:column="26">(<argument><expr><call><name><name pos:line="110" pos:column="27">highlight</name><op:operator pos:line="110" pos:column="36">.</op:operator><name pos:line="110" pos:column="37">Contains</name></name><argument_list pos:line="110" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="110" pos:column="46">"return pc|~S~|Play|~E~|er;"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        }</block></function>

        <function><type><specifier pos:line="113" pos:column="9">public</specifier> <name pos:line="113" pos:column="16">void</name></type> <name pos:line="113" pos:column="21">Invoke</name><parameter_list pos:line="113" pos:column="27">(<param><decl><type><name pos:line="113" pos:column="28">MethodInvoker</name></type> <name pos:line="113" pos:column="42">globalSystemWindowsFormsMethodInvoker</name></decl></param>)</parameter_list>
        <block pos:line="114" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="115" pos:column="13">UIThreadInvoker</name><op:operator pos:line="115" pos:column="28">.</op:operator><name pos:line="115" pos:column="29">Invoke</name></name><argument_list pos:line="115" pos:column="35">(<argument><expr><name pos:line="115" pos:column="36">globalSystemWindowsFormsMethodInvoker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
